Search.setIndex({"docnames": ["about", "authors", "authors_emeritus", "auto_examples/applications/index", "auto_examples/applications/plot_cyclical_feature_engineering", "auto_examples/applications/plot_digits_denoising", "auto_examples/applications/plot_face_recognition", "auto_examples/applications/plot_model_complexity_influence", "auto_examples/applications/plot_out_of_core_classification", "auto_examples/applications/plot_outlier_detection_wine", "auto_examples/applications/plot_prediction_latency", "auto_examples/applications/plot_species_distribution_modeling", "auto_examples/applications/plot_stock_market", "auto_examples/applications/plot_time_series_lagged_features", "auto_examples/applications/plot_tomography_l1_reconstruction", "auto_examples/applications/plot_topics_extraction_with_nmf_lda", "auto_examples/applications/svm_gui", "auto_examples/applications/wikipedia_principal_eigenvector", "auto_examples/bicluster/index", "auto_examples/bicluster/plot_bicluster_newsgroups", "auto_examples/bicluster/plot_spectral_biclustering", "auto_examples/bicluster/plot_spectral_coclustering", "auto_examples/calibration/index", "auto_examples/calibration/plot_calibration", "auto_examples/calibration/plot_calibration_curve", "auto_examples/calibration/plot_calibration_multiclass", "auto_examples/calibration/plot_compare_calibration", "auto_examples/classification/index", "auto_examples/classification/plot_classification_probability", "auto_examples/classification/plot_classifier_comparison", "auto_examples/classification/plot_digits_classification", "auto_examples/classification/plot_lda", "auto_examples/classification/plot_lda_qda", "auto_examples/cluster/index", "auto_examples/cluster/plot_adjusted_for_chance_measures", "auto_examples/cluster/plot_affinity_propagation", "auto_examples/cluster/plot_agglomerative_clustering", "auto_examples/cluster/plot_agglomerative_clustering_metrics", "auto_examples/cluster/plot_agglomerative_dendrogram", "auto_examples/cluster/plot_birch_vs_minibatchkmeans", "auto_examples/cluster/plot_bisect_kmeans", "auto_examples/cluster/plot_cluster_comparison", "auto_examples/cluster/plot_cluster_iris", "auto_examples/cluster/plot_coin_segmentation", "auto_examples/cluster/plot_coin_ward_segmentation", "auto_examples/cluster/plot_color_quantization", "auto_examples/cluster/plot_dbscan", "auto_examples/cluster/plot_dict_face_patches", "auto_examples/cluster/plot_digits_agglomeration", "auto_examples/cluster/plot_digits_linkage", "auto_examples/cluster/plot_face_compress", "auto_examples/cluster/plot_feature_agglomeration_vs_univariate_selection", "auto_examples/cluster/plot_hdbscan", "auto_examples/cluster/plot_inductive_clustering", "auto_examples/cluster/plot_kmeans_assumptions", "auto_examples/cluster/plot_kmeans_digits", "auto_examples/cluster/plot_kmeans_plusplus", "auto_examples/cluster/plot_kmeans_silhouette_analysis", "auto_examples/cluster/plot_kmeans_stability_low_dim_dense", "auto_examples/cluster/plot_linkage_comparison", "auto_examples/cluster/plot_mean_shift", "auto_examples/cluster/plot_mini_batch_kmeans", "auto_examples/cluster/plot_optics", "auto_examples/cluster/plot_segmentation_toy", "auto_examples/cluster/plot_ward_structured_vs_unstructured", "auto_examples/compose/index", "auto_examples/compose/plot_column_transformer", "auto_examples/compose/plot_column_transformer_mixed_types", "auto_examples/compose/plot_compare_reduction", "auto_examples/compose/plot_digits_pipe", "auto_examples/compose/plot_feature_union", "auto_examples/compose/plot_transformed_target", "auto_examples/covariance/index", "auto_examples/covariance/plot_covariance_estimation", "auto_examples/covariance/plot_lw_vs_oas", "auto_examples/covariance/plot_mahalanobis_distances", "auto_examples/covariance/plot_robust_vs_empirical_covariance", "auto_examples/covariance/plot_sparse_cov", "auto_examples/cross_decomposition/index", "auto_examples/cross_decomposition/plot_compare_cross_decomposition", "auto_examples/cross_decomposition/plot_pcr_vs_pls", "auto_examples/datasets/index", "auto_examples/datasets/plot_digits_last_image", "auto_examples/datasets/plot_iris_dataset", "auto_examples/datasets/plot_random_dataset", "auto_examples/datasets/plot_random_multilabel_dataset", "auto_examples/decomposition/index", "auto_examples/decomposition/plot_faces_decomposition", "auto_examples/decomposition/plot_ica_blind_source_separation", "auto_examples/decomposition/plot_ica_vs_pca", "auto_examples/decomposition/plot_image_denoising", "auto_examples/decomposition/plot_incremental_pca", "auto_examples/decomposition/plot_kernel_pca", "auto_examples/decomposition/plot_pca_iris", "auto_examples/decomposition/plot_pca_vs_fa_model_selection", "auto_examples/decomposition/plot_pca_vs_lda", "auto_examples/decomposition/plot_sparse_coding", "auto_examples/decomposition/plot_varimax_fa", "auto_examples/developing_estimators/index", "auto_examples/developing_estimators/sklearn_is_fitted", "auto_examples/ensemble/index", "auto_examples/ensemble/plot_adaboost_multiclass", "auto_examples/ensemble/plot_adaboost_regression", "auto_examples/ensemble/plot_adaboost_twoclass", "auto_examples/ensemble/plot_bias_variance", "auto_examples/ensemble/plot_ensemble_oob", "auto_examples/ensemble/plot_feature_transformation", "auto_examples/ensemble/plot_forest_hist_grad_boosting_comparison", "auto_examples/ensemble/plot_forest_importances", "auto_examples/ensemble/plot_forest_importances_faces", "auto_examples/ensemble/plot_forest_iris", "auto_examples/ensemble/plot_gradient_boosting_categorical", "auto_examples/ensemble/plot_gradient_boosting_early_stopping", "auto_examples/ensemble/plot_gradient_boosting_oob", "auto_examples/ensemble/plot_gradient_boosting_quantile", "auto_examples/ensemble/plot_gradient_boosting_regression", "auto_examples/ensemble/plot_gradient_boosting_regularization", "auto_examples/ensemble/plot_hgbt_regression", "auto_examples/ensemble/plot_isolation_forest", "auto_examples/ensemble/plot_monotonic_constraints", "auto_examples/ensemble/plot_random_forest_embedding", "auto_examples/ensemble/plot_random_forest_regression_multioutput", "auto_examples/ensemble/plot_stack_predictors", "auto_examples/ensemble/plot_voting_decision_regions", "auto_examples/ensemble/plot_voting_probas", "auto_examples/ensemble/plot_voting_regressor", "auto_examples/exercises/index", "auto_examples/exercises/plot_cv_diabetes", "auto_examples/exercises/plot_digits_classification_exercise", "auto_examples/exercises/plot_iris_exercise", "auto_examples/feature_selection/index", "auto_examples/feature_selection/plot_f_test_vs_mi", "auto_examples/feature_selection/plot_feature_selection", "auto_examples/feature_selection/plot_feature_selection_pipeline", "auto_examples/feature_selection/plot_rfe_digits", "auto_examples/feature_selection/plot_rfe_with_cross_validation", "auto_examples/feature_selection/plot_select_from_model_diabetes", "auto_examples/gaussian_process/index", "auto_examples/gaussian_process/plot_compare_gpr_krr", "auto_examples/gaussian_process/plot_gpc", "auto_examples/gaussian_process/plot_gpc_iris", "auto_examples/gaussian_process/plot_gpc_isoprobability", "auto_examples/gaussian_process/plot_gpc_xor", "auto_examples/gaussian_process/plot_gpr_co2", "auto_examples/gaussian_process/plot_gpr_noisy", "auto_examples/gaussian_process/plot_gpr_noisy_targets", "auto_examples/gaussian_process/plot_gpr_on_structured_data", "auto_examples/gaussian_process/plot_gpr_prior_posterior", "auto_examples/impute/index", "auto_examples/impute/plot_iterative_imputer_variants_comparison", "auto_examples/impute/plot_missing_values", "auto_examples/index", "auto_examples/inspection/index", "auto_examples/inspection/plot_causal_interpretation", "auto_examples/inspection/plot_linear_model_coefficient_interpretation", "auto_examples/inspection/plot_partial_dependence", "auto_examples/inspection/plot_permutation_importance", "auto_examples/inspection/plot_permutation_importance_multicollinear", "auto_examples/kernel_approximation/index", "auto_examples/kernel_approximation/plot_scalable_poly_kernels", "auto_examples/linear_model/index", "auto_examples/linear_model/plot_ard", "auto_examples/linear_model/plot_bayesian_ridge_curvefit", "auto_examples/linear_model/plot_elastic_net_precomputed_gram_matrix_with_weighted_samples", "auto_examples/linear_model/plot_huber_vs_ridge", "auto_examples/linear_model/plot_iris_logistic", "auto_examples/linear_model/plot_lasso_and_elasticnet", "auto_examples/linear_model/plot_lasso_coordinate_descent_path", "auto_examples/linear_model/plot_lasso_dense_vs_sparse_data", "auto_examples/linear_model/plot_lasso_lars", "auto_examples/linear_model/plot_lasso_lars_ic", "auto_examples/linear_model/plot_lasso_model_selection", "auto_examples/linear_model/plot_logistic", "auto_examples/linear_model/plot_logistic_l1_l2_sparsity", "auto_examples/linear_model/plot_logistic_multinomial", "auto_examples/linear_model/plot_logistic_path", "auto_examples/linear_model/plot_multi_task_lasso_support", "auto_examples/linear_model/plot_nnls", "auto_examples/linear_model/plot_ols", "auto_examples/linear_model/plot_ols_3d", "auto_examples/linear_model/plot_ols_ridge_variance", "auto_examples/linear_model/plot_omp", "auto_examples/linear_model/plot_poisson_regression_non_normal_loss", "auto_examples/linear_model/plot_polynomial_interpolation", "auto_examples/linear_model/plot_quantile_regression", "auto_examples/linear_model/plot_ransac", "auto_examples/linear_model/plot_ridge_coeffs", "auto_examples/linear_model/plot_ridge_path", "auto_examples/linear_model/plot_robust_fit", "auto_examples/linear_model/plot_sgd_comparison", "auto_examples/linear_model/plot_sgd_early_stopping", "auto_examples/linear_model/plot_sgd_iris", "auto_examples/linear_model/plot_sgd_loss_functions", "auto_examples/linear_model/plot_sgd_penalties", "auto_examples/linear_model/plot_sgd_separating_hyperplane", "auto_examples/linear_model/plot_sgd_weighted_samples", "auto_examples/linear_model/plot_sgdocsvm_vs_ocsvm", "auto_examples/linear_model/plot_sparse_logistic_regression_20newsgroups", "auto_examples/linear_model/plot_sparse_logistic_regression_mnist", "auto_examples/linear_model/plot_theilsen", "auto_examples/linear_model/plot_tweedie_regression_insurance_claims", "auto_examples/manifold/index", "auto_examples/manifold/plot_compare_methods", "auto_examples/manifold/plot_lle_digits", "auto_examples/manifold/plot_manifold_sphere", "auto_examples/manifold/plot_mds", "auto_examples/manifold/plot_swissroll", "auto_examples/manifold/plot_t_sne_perplexity", "auto_examples/miscellaneous/index", "auto_examples/miscellaneous/plot_anomaly_comparison", "auto_examples/miscellaneous/plot_display_object_visualization", "auto_examples/miscellaneous/plot_estimator_representation", "auto_examples/miscellaneous/plot_isotonic_regression", "auto_examples/miscellaneous/plot_johnson_lindenstrauss_bound", "auto_examples/miscellaneous/plot_kernel_approximation", "auto_examples/miscellaneous/plot_kernel_ridge_regression", "auto_examples/miscellaneous/plot_metadata_routing", "auto_examples/miscellaneous/plot_multilabel", "auto_examples/miscellaneous/plot_multioutput_face_completion", "auto_examples/miscellaneous/plot_outlier_detection_bench", "auto_examples/miscellaneous/plot_partial_dependence_visualization_api", "auto_examples/miscellaneous/plot_pipeline_display", "auto_examples/miscellaneous/plot_roc_curve_visualization_api", "auto_examples/miscellaneous/plot_set_output", "auto_examples/mixture/index", "auto_examples/mixture/plot_concentration_prior", "auto_examples/mixture/plot_gmm", "auto_examples/mixture/plot_gmm_covariances", "auto_examples/mixture/plot_gmm_init", "auto_examples/mixture/plot_gmm_pdf", "auto_examples/mixture/plot_gmm_selection", "auto_examples/mixture/plot_gmm_sin", "auto_examples/model_selection/index", "auto_examples/model_selection/plot_confusion_matrix", "auto_examples/model_selection/plot_cv_indices", "auto_examples/model_selection/plot_cv_predict", "auto_examples/model_selection/plot_det", "auto_examples/model_selection/plot_grid_search_digits", "auto_examples/model_selection/plot_grid_search_refit_callable", "auto_examples/model_selection/plot_grid_search_stats", "auto_examples/model_selection/plot_grid_search_text_feature_extraction", "auto_examples/model_selection/plot_learning_curve", "auto_examples/model_selection/plot_likelihood_ratios", "auto_examples/model_selection/plot_multi_metric_evaluation", "auto_examples/model_selection/plot_nested_cross_validation_iris", "auto_examples/model_selection/plot_permutation_tests_for_classification", "auto_examples/model_selection/plot_precision_recall", "auto_examples/model_selection/plot_randomized_search", "auto_examples/model_selection/plot_roc", "auto_examples/model_selection/plot_roc_crossval", "auto_examples/model_selection/plot_successive_halving_heatmap", "auto_examples/model_selection/plot_successive_halving_iterations", "auto_examples/model_selection/plot_train_error_vs_test_error", "auto_examples/model_selection/plot_underfitting_overfitting", "auto_examples/model_selection/plot_validation_curve", "auto_examples/multiclass/index", "auto_examples/multiclass/plot_multiclass_overview", "auto_examples/multioutput/index", "auto_examples/multioutput/plot_classifier_chain_yeast", "auto_examples/neighbors/approximate_nearest_neighbors", "auto_examples/neighbors/index", "auto_examples/neighbors/plot_caching_nearest_neighbors", "auto_examples/neighbors/plot_classification", "auto_examples/neighbors/plot_digits_kde_sampling", "auto_examples/neighbors/plot_kde_1d", "auto_examples/neighbors/plot_lof_novelty_detection", "auto_examples/neighbors/plot_lof_outlier_detection", "auto_examples/neighbors/plot_nca_classification", "auto_examples/neighbors/plot_nca_dim_reduction", "auto_examples/neighbors/plot_nca_illustration", "auto_examples/neighbors/plot_nearest_centroid", "auto_examples/neighbors/plot_regression", "auto_examples/neighbors/plot_species_kde", "auto_examples/neural_networks/index", "auto_examples/neural_networks/plot_mlp_alpha", "auto_examples/neural_networks/plot_mlp_training_curves", "auto_examples/neural_networks/plot_mnist_filters", "auto_examples/neural_networks/plot_rbm_logistic_classification", "auto_examples/preprocessing/index", "auto_examples/preprocessing/plot_all_scaling", "auto_examples/preprocessing/plot_discretization", "auto_examples/preprocessing/plot_discretization_classification", "auto_examples/preprocessing/plot_discretization_strategies", "auto_examples/preprocessing/plot_map_data_to_normal", "auto_examples/preprocessing/plot_scaling_importance", "auto_examples/preprocessing/plot_target_encoder", "auto_examples/preprocessing/plot_target_encoder_cross_val", "auto_examples/release_highlights/index", "auto_examples/release_highlights/plot_release_highlights_0_22_0", "auto_examples/release_highlights/plot_release_highlights_0_23_0", "auto_examples/release_highlights/plot_release_highlights_0_24_0", "auto_examples/release_highlights/plot_release_highlights_1_0_0", "auto_examples/release_highlights/plot_release_highlights_1_1_0", "auto_examples/release_highlights/plot_release_highlights_1_2_0", "auto_examples/release_highlights/plot_release_highlights_1_3_0", "auto_examples/release_highlights/plot_release_highlights_1_4_0", "auto_examples/semi_supervised/index", "auto_examples/semi_supervised/plot_label_propagation_digits", "auto_examples/semi_supervised/plot_label_propagation_digits_active_learning", "auto_examples/semi_supervised/plot_label_propagation_structure", "auto_examples/semi_supervised/plot_self_training_varying_threshold", "auto_examples/semi_supervised/plot_semi_supervised_newsgroups", "auto_examples/semi_supervised/plot_semi_supervised_versus_svm_iris", "auto_examples/svm/index", "auto_examples/svm/plot_custom_kernel", "auto_examples/svm/plot_iris_svc", "auto_examples/svm/plot_linearsvc_support_vectors", "auto_examples/svm/plot_oneclass", "auto_examples/svm/plot_rbf_parameters", "auto_examples/svm/plot_separating_hyperplane", "auto_examples/svm/plot_separating_hyperplane_unbalanced", "auto_examples/svm/plot_svm_anova", "auto_examples/svm/plot_svm_kernels", "auto_examples/svm/plot_svm_margin", "auto_examples/svm/plot_svm_nonlinear", "auto_examples/svm/plot_svm_regression", "auto_examples/svm/plot_svm_scale_c", "auto_examples/svm/plot_svm_tie_breaking", "auto_examples/svm/plot_weighted_samples", "auto_examples/text/index", "auto_examples/text/plot_document_classification_20newsgroups", "auto_examples/text/plot_document_clustering", "auto_examples/text/plot_hashing_vs_dict_vectorizer", "auto_examples/tree/index", "auto_examples/tree/plot_cost_complexity_pruning", "auto_examples/tree/plot_iris_dtc", "auto_examples/tree/plot_tree_regression", "auto_examples/tree/plot_tree_regression_multioutput", "auto_examples/tree/plot_unveil_tree_structure", "common_pitfalls", "communication_team", "communication_team_emeritus", "computing", "computing/computational_performance", "computing/parallelism", "computing/scaling_strategies", "contributor_experience_team", "contributor_experience_team_emeritus", "data_transforms", "datasets", "datasets/loading_other_datasets", "datasets/real_world", "datasets/sample_generators", "datasets/toy_dataset", "developers/advanced_installation", "developers/bug_triaging", "developers/contributing", "developers/cython", "developers/develop", "developers/index", "developers/maintainer", "developers/minimal_reproducer", "developers/performance", "developers/plotting", "developers/tips", "developers/utilities", "dispatching", "documentation_team", "faq", "getting_started", "glossary", "governance", "index", "inspection", "install", "metadata_routing", "min_dependency_substitutions", "min_dependency_table", "model_persistence", "model_selection", "modules/array_api", "modules/biclustering", "modules/calibration", "modules/classes", "modules/clustering", "modules/compose", "modules/covariance", "modules/cross_decomposition", "modules/cross_validation", "modules/decomposition", "modules/density", "modules/ensemble", "modules/feature_extraction", "modules/feature_selection", "modules/gaussian_process", "modules/generated/dbscan-function", "modules/generated/fastica-function", "modules/generated/oas-function", "modules/generated/sklearn.base.BaseEstimator", "modules/generated/sklearn.base.BiclusterMixin", "modules/generated/sklearn.base.ClassNamePrefixFeaturesOutMixin", "modules/generated/sklearn.base.ClassifierMixin", "modules/generated/sklearn.base.ClusterMixin", "modules/generated/sklearn.base.DensityMixin", "modules/generated/sklearn.base.MetaEstimatorMixin", "modules/generated/sklearn.base.OneToOneFeatureMixin", "modules/generated/sklearn.base.OutlierMixin", "modules/generated/sklearn.base.RegressorMixin", "modules/generated/sklearn.base.TransformerMixin", "modules/generated/sklearn.base.clone", "modules/generated/sklearn.base.is_classifier", "modules/generated/sklearn.base.is_regressor", "modules/generated/sklearn.calibration.CalibratedClassifierCV", "modules/generated/sklearn.calibration.CalibrationDisplay", "modules/generated/sklearn.calibration.calibration_curve", "modules/generated/sklearn.cluster.AffinityPropagation", "modules/generated/sklearn.cluster.AgglomerativeClustering", "modules/generated/sklearn.cluster.Birch", "modules/generated/sklearn.cluster.BisectingKMeans", "modules/generated/sklearn.cluster.DBSCAN", "modules/generated/sklearn.cluster.FeatureAgglomeration", "modules/generated/sklearn.cluster.HDBSCAN", "modules/generated/sklearn.cluster.KMeans", "modules/generated/sklearn.cluster.MeanShift", "modules/generated/sklearn.cluster.MiniBatchKMeans", "modules/generated/sklearn.cluster.OPTICS", "modules/generated/sklearn.cluster.SpectralBiclustering", "modules/generated/sklearn.cluster.SpectralClustering", "modules/generated/sklearn.cluster.SpectralCoclustering", "modules/generated/sklearn.cluster.affinity_propagation", "modules/generated/sklearn.cluster.cluster_optics_dbscan", "modules/generated/sklearn.cluster.cluster_optics_xi", "modules/generated/sklearn.cluster.compute_optics_graph", "modules/generated/sklearn.cluster.estimate_bandwidth", "modules/generated/sklearn.cluster.k_means", "modules/generated/sklearn.cluster.kmeans_plusplus", "modules/generated/sklearn.cluster.mean_shift", "modules/generated/sklearn.cluster.spectral_clustering", "modules/generated/sklearn.cluster.ward_tree", "modules/generated/sklearn.compose.ColumnTransformer", "modules/generated/sklearn.compose.TransformedTargetRegressor", "modules/generated/sklearn.compose.make_column_selector", "modules/generated/sklearn.compose.make_column_transformer", "modules/generated/sklearn.config_context", "modules/generated/sklearn.covariance.EllipticEnvelope", "modules/generated/sklearn.covariance.EmpiricalCovariance", "modules/generated/sklearn.covariance.GraphicalLasso", "modules/generated/sklearn.covariance.GraphicalLassoCV", "modules/generated/sklearn.covariance.LedoitWolf", "modules/generated/sklearn.covariance.MinCovDet", "modules/generated/sklearn.covariance.OAS", "modules/generated/sklearn.covariance.ShrunkCovariance", "modules/generated/sklearn.covariance.empirical_covariance", "modules/generated/sklearn.covariance.graphical_lasso", "modules/generated/sklearn.covariance.ledoit_wolf", "modules/generated/sklearn.covariance.ledoit_wolf_shrinkage", "modules/generated/sklearn.covariance.shrunk_covariance", "modules/generated/sklearn.cross_decomposition.CCA", "modules/generated/sklearn.cross_decomposition.PLSCanonical", "modules/generated/sklearn.cross_decomposition.PLSRegression", "modules/generated/sklearn.cross_decomposition.PLSSVD", "modules/generated/sklearn.datasets.clear_data_home", "modules/generated/sklearn.datasets.dump_svmlight_file", "modules/generated/sklearn.datasets.fetch_20newsgroups", "modules/generated/sklearn.datasets.fetch_20newsgroups_vectorized", "modules/generated/sklearn.datasets.fetch_california_housing", "modules/generated/sklearn.datasets.fetch_covtype", "modules/generated/sklearn.datasets.fetch_kddcup99", "modules/generated/sklearn.datasets.fetch_lfw_pairs", "modules/generated/sklearn.datasets.fetch_lfw_people", "modules/generated/sklearn.datasets.fetch_olivetti_faces", "modules/generated/sklearn.datasets.fetch_openml", "modules/generated/sklearn.datasets.fetch_rcv1", "modules/generated/sklearn.datasets.fetch_species_distributions", "modules/generated/sklearn.datasets.get_data_home", "modules/generated/sklearn.datasets.load_breast_cancer", "modules/generated/sklearn.datasets.load_diabetes", "modules/generated/sklearn.datasets.load_digits", "modules/generated/sklearn.datasets.load_files", "modules/generated/sklearn.datasets.load_iris", "modules/generated/sklearn.datasets.load_linnerud", "modules/generated/sklearn.datasets.load_sample_image", "modules/generated/sklearn.datasets.load_sample_images", "modules/generated/sklearn.datasets.load_svmlight_file", "modules/generated/sklearn.datasets.load_svmlight_files", "modules/generated/sklearn.datasets.load_wine", "modules/generated/sklearn.datasets.make_biclusters", "modules/generated/sklearn.datasets.make_blobs", "modules/generated/sklearn.datasets.make_checkerboard", "modules/generated/sklearn.datasets.make_circles", "modules/generated/sklearn.datasets.make_classification", "modules/generated/sklearn.datasets.make_friedman1", "modules/generated/sklearn.datasets.make_friedman2", "modules/generated/sklearn.datasets.make_friedman3", "modules/generated/sklearn.datasets.make_gaussian_quantiles", "modules/generated/sklearn.datasets.make_hastie_10_2", "modules/generated/sklearn.datasets.make_low_rank_matrix", "modules/generated/sklearn.datasets.make_moons", "modules/generated/sklearn.datasets.make_multilabel_classification", "modules/generated/sklearn.datasets.make_regression", "modules/generated/sklearn.datasets.make_s_curve", "modules/generated/sklearn.datasets.make_sparse_coded_signal", "modules/generated/sklearn.datasets.make_sparse_spd_matrix", "modules/generated/sklearn.datasets.make_sparse_uncorrelated", "modules/generated/sklearn.datasets.make_spd_matrix", "modules/generated/sklearn.datasets.make_swiss_roll", "modules/generated/sklearn.decomposition.DictionaryLearning", "modules/generated/sklearn.decomposition.FactorAnalysis", "modules/generated/sklearn.decomposition.FastICA", "modules/generated/sklearn.decomposition.IncrementalPCA", "modules/generated/sklearn.decomposition.KernelPCA", "modules/generated/sklearn.decomposition.LatentDirichletAllocation", "modules/generated/sklearn.decomposition.MiniBatchDictionaryLearning", "modules/generated/sklearn.decomposition.MiniBatchNMF", "modules/generated/sklearn.decomposition.MiniBatchSparsePCA", "modules/generated/sklearn.decomposition.NMF", "modules/generated/sklearn.decomposition.PCA", "modules/generated/sklearn.decomposition.SparseCoder", "modules/generated/sklearn.decomposition.SparsePCA", "modules/generated/sklearn.decomposition.TruncatedSVD", "modules/generated/sklearn.decomposition.dict_learning", "modules/generated/sklearn.decomposition.dict_learning_online", "modules/generated/sklearn.decomposition.non_negative_factorization", "modules/generated/sklearn.decomposition.sparse_encode", "modules/generated/sklearn.discriminant_analysis.LinearDiscriminantAnalysis", "modules/generated/sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis", "modules/generated/sklearn.dummy.DummyClassifier", "modules/generated/sklearn.dummy.DummyRegressor", "modules/generated/sklearn.ensemble.AdaBoostClassifier", "modules/generated/sklearn.ensemble.AdaBoostRegressor", "modules/generated/sklearn.ensemble.BaggingClassifier", "modules/generated/sklearn.ensemble.BaggingRegressor", "modules/generated/sklearn.ensemble.ExtraTreesClassifier", "modules/generated/sklearn.ensemble.ExtraTreesRegressor", "modules/generated/sklearn.ensemble.GradientBoostingClassifier", "modules/generated/sklearn.ensemble.GradientBoostingRegressor", "modules/generated/sklearn.ensemble.HistGradientBoostingClassifier", "modules/generated/sklearn.ensemble.HistGradientBoostingRegressor", "modules/generated/sklearn.ensemble.IsolationForest", "modules/generated/sklearn.ensemble.RandomForestClassifier", "modules/generated/sklearn.ensemble.RandomForestRegressor", "modules/generated/sklearn.ensemble.RandomTreesEmbedding", "modules/generated/sklearn.ensemble.StackingClassifier", "modules/generated/sklearn.ensemble.StackingRegressor", "modules/generated/sklearn.ensemble.VotingClassifier", "modules/generated/sklearn.ensemble.VotingRegressor", "modules/generated/sklearn.exceptions.ConvergenceWarning", "modules/generated/sklearn.exceptions.DataConversionWarning", "modules/generated/sklearn.exceptions.DataDimensionalityWarning", "modules/generated/sklearn.exceptions.EfficiencyWarning", "modules/generated/sklearn.exceptions.FitFailedWarning", "modules/generated/sklearn.exceptions.InconsistentVersionWarning", "modules/generated/sklearn.exceptions.NotFittedError", "modules/generated/sklearn.exceptions.UndefinedMetricWarning", "modules/generated/sklearn.experimental.enable_halving_search_cv", "modules/generated/sklearn.experimental.enable_iterative_imputer", "modules/generated/sklearn.feature_extraction.DictVectorizer", "modules/generated/sklearn.feature_extraction.FeatureHasher", "modules/generated/sklearn.feature_extraction.image.PatchExtractor", "modules/generated/sklearn.feature_extraction.image.extract_patches_2d", "modules/generated/sklearn.feature_extraction.image.grid_to_graph", "modules/generated/sklearn.feature_extraction.image.img_to_graph", "modules/generated/sklearn.feature_extraction.image.reconstruct_from_patches_2d", "modules/generated/sklearn.feature_extraction.text.CountVectorizer", "modules/generated/sklearn.feature_extraction.text.HashingVectorizer", "modules/generated/sklearn.feature_extraction.text.TfidfTransformer", "modules/generated/sklearn.feature_extraction.text.TfidfVectorizer", "modules/generated/sklearn.feature_selection.GenericUnivariateSelect", "modules/generated/sklearn.feature_selection.RFE", "modules/generated/sklearn.feature_selection.RFECV", "modules/generated/sklearn.feature_selection.SelectFdr", "modules/generated/sklearn.feature_selection.SelectFpr", "modules/generated/sklearn.feature_selection.SelectFromModel", "modules/generated/sklearn.feature_selection.SelectFwe", "modules/generated/sklearn.feature_selection.SelectKBest", "modules/generated/sklearn.feature_selection.SelectPercentile", "modules/generated/sklearn.feature_selection.SelectorMixin", "modules/generated/sklearn.feature_selection.SequentialFeatureSelector", "modules/generated/sklearn.feature_selection.VarianceThreshold", "modules/generated/sklearn.feature_selection.chi2", "modules/generated/sklearn.feature_selection.f_classif", "modules/generated/sklearn.feature_selection.f_regression", "modules/generated/sklearn.feature_selection.mutual_info_classif", "modules/generated/sklearn.feature_selection.mutual_info_regression", "modules/generated/sklearn.feature_selection.r_regression", "modules/generated/sklearn.gaussian_process.GaussianProcessClassifier", "modules/generated/sklearn.gaussian_process.GaussianProcessRegressor", "modules/generated/sklearn.gaussian_process.kernels.CompoundKernel", "modules/generated/sklearn.gaussian_process.kernels.ConstantKernel", "modules/generated/sklearn.gaussian_process.kernels.DotProduct", "modules/generated/sklearn.gaussian_process.kernels.ExpSineSquared", "modules/generated/sklearn.gaussian_process.kernels.Exponentiation", "modules/generated/sklearn.gaussian_process.kernels.Hyperparameter", "modules/generated/sklearn.gaussian_process.kernels.Kernel", "modules/generated/sklearn.gaussian_process.kernels.Matern", "modules/generated/sklearn.gaussian_process.kernels.PairwiseKernel", "modules/generated/sklearn.gaussian_process.kernels.Product", "modules/generated/sklearn.gaussian_process.kernels.RBF", "modules/generated/sklearn.gaussian_process.kernels.RationalQuadratic", "modules/generated/sklearn.gaussian_process.kernels.Sum", "modules/generated/sklearn.gaussian_process.kernels.WhiteKernel", "modules/generated/sklearn.get_config", "modules/generated/sklearn.impute.IterativeImputer", "modules/generated/sklearn.impute.KNNImputer", "modules/generated/sklearn.impute.MissingIndicator", "modules/generated/sklearn.impute.SimpleImputer", "modules/generated/sklearn.inspection.DecisionBoundaryDisplay", "modules/generated/sklearn.inspection.PartialDependenceDisplay", "modules/generated/sklearn.inspection.partial_dependence", "modules/generated/sklearn.inspection.permutation_importance", "modules/generated/sklearn.isotonic.IsotonicRegression", "modules/generated/sklearn.isotonic.check_increasing", "modules/generated/sklearn.isotonic.isotonic_regression", "modules/generated/sklearn.kernel_approximation.AdditiveChi2Sampler", "modules/generated/sklearn.kernel_approximation.Nystroem", "modules/generated/sklearn.kernel_approximation.PolynomialCountSketch", "modules/generated/sklearn.kernel_approximation.RBFSampler", "modules/generated/sklearn.kernel_approximation.SkewedChi2Sampler", "modules/generated/sklearn.kernel_ridge.KernelRidge", "modules/generated/sklearn.linear_model.ARDRegression", "modules/generated/sklearn.linear_model.BayesianRidge", "modules/generated/sklearn.linear_model.ElasticNet", "modules/generated/sklearn.linear_model.ElasticNetCV", "modules/generated/sklearn.linear_model.GammaRegressor", "modules/generated/sklearn.linear_model.HuberRegressor", "modules/generated/sklearn.linear_model.Lars", "modules/generated/sklearn.linear_model.LarsCV", "modules/generated/sklearn.linear_model.Lasso", "modules/generated/sklearn.linear_model.LassoCV", "modules/generated/sklearn.linear_model.LassoLars", "modules/generated/sklearn.linear_model.LassoLarsCV", "modules/generated/sklearn.linear_model.LassoLarsIC", "modules/generated/sklearn.linear_model.LinearRegression", "modules/generated/sklearn.linear_model.LogisticRegression", "modules/generated/sklearn.linear_model.LogisticRegressionCV", "modules/generated/sklearn.linear_model.MultiTaskElasticNet", "modules/generated/sklearn.linear_model.MultiTaskElasticNetCV", "modules/generated/sklearn.linear_model.MultiTaskLasso", "modules/generated/sklearn.linear_model.MultiTaskLassoCV", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuit", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuitCV", "modules/generated/sklearn.linear_model.PassiveAggressiveClassifier", "modules/generated/sklearn.linear_model.PassiveAggressiveRegressor", "modules/generated/sklearn.linear_model.Perceptron", "modules/generated/sklearn.linear_model.PoissonRegressor", "modules/generated/sklearn.linear_model.QuantileRegressor", "modules/generated/sklearn.linear_model.RANSACRegressor", "modules/generated/sklearn.linear_model.Ridge", "modules/generated/sklearn.linear_model.RidgeCV", "modules/generated/sklearn.linear_model.RidgeClassifier", "modules/generated/sklearn.linear_model.RidgeClassifierCV", "modules/generated/sklearn.linear_model.SGDClassifier", "modules/generated/sklearn.linear_model.SGDOneClassSVM", "modules/generated/sklearn.linear_model.SGDRegressor", "modules/generated/sklearn.linear_model.TheilSenRegressor", "modules/generated/sklearn.linear_model.TweedieRegressor", "modules/generated/sklearn.linear_model.enet_path", "modules/generated/sklearn.linear_model.lars_path", "modules/generated/sklearn.linear_model.lars_path_gram", "modules/generated/sklearn.linear_model.lasso_path", "modules/generated/sklearn.linear_model.orthogonal_mp", "modules/generated/sklearn.linear_model.orthogonal_mp_gram", "modules/generated/sklearn.linear_model.ridge_regression", "modules/generated/sklearn.manifold.Isomap", "modules/generated/sklearn.manifold.LocallyLinearEmbedding", "modules/generated/sklearn.manifold.MDS", "modules/generated/sklearn.manifold.SpectralEmbedding", "modules/generated/sklearn.manifold.TSNE", "modules/generated/sklearn.manifold.locally_linear_embedding", "modules/generated/sklearn.manifold.smacof", "modules/generated/sklearn.manifold.spectral_embedding", "modules/generated/sklearn.manifold.trustworthiness", "modules/generated/sklearn.metrics.ConfusionMatrixDisplay", "modules/generated/sklearn.metrics.DetCurveDisplay", "modules/generated/sklearn.metrics.DistanceMetric", "modules/generated/sklearn.metrics.PrecisionRecallDisplay", "modules/generated/sklearn.metrics.PredictionErrorDisplay", "modules/generated/sklearn.metrics.RocCurveDisplay", "modules/generated/sklearn.metrics.accuracy_score", "modules/generated/sklearn.metrics.adjusted_mutual_info_score", "modules/generated/sklearn.metrics.adjusted_rand_score", "modules/generated/sklearn.metrics.auc", "modules/generated/sklearn.metrics.average_precision_score", "modules/generated/sklearn.metrics.balanced_accuracy_score", "modules/generated/sklearn.metrics.brier_score_loss", "modules/generated/sklearn.metrics.calinski_harabasz_score", "modules/generated/sklearn.metrics.check_scoring", "modules/generated/sklearn.metrics.class_likelihood_ratios", "modules/generated/sklearn.metrics.classification_report", "modules/generated/sklearn.metrics.cluster.contingency_matrix", "modules/generated/sklearn.metrics.cluster.pair_confusion_matrix", "modules/generated/sklearn.metrics.cohen_kappa_score", "modules/generated/sklearn.metrics.completeness_score", "modules/generated/sklearn.metrics.confusion_matrix", "modules/generated/sklearn.metrics.consensus_score", "modules/generated/sklearn.metrics.coverage_error", "modules/generated/sklearn.metrics.d2_absolute_error_score", "modules/generated/sklearn.metrics.d2_pinball_score", "modules/generated/sklearn.metrics.d2_tweedie_score", "modules/generated/sklearn.metrics.davies_bouldin_score", "modules/generated/sklearn.metrics.dcg_score", "modules/generated/sklearn.metrics.det_curve", "modules/generated/sklearn.metrics.explained_variance_score", "modules/generated/sklearn.metrics.f1_score", "modules/generated/sklearn.metrics.fbeta_score", "modules/generated/sklearn.metrics.fowlkes_mallows_score", "modules/generated/sklearn.metrics.get_scorer", "modules/generated/sklearn.metrics.get_scorer_names", "modules/generated/sklearn.metrics.hamming_loss", "modules/generated/sklearn.metrics.hinge_loss", "modules/generated/sklearn.metrics.homogeneity_completeness_v_measure", "modules/generated/sklearn.metrics.homogeneity_score", "modules/generated/sklearn.metrics.jaccard_score", "modules/generated/sklearn.metrics.label_ranking_average_precision_score", "modules/generated/sklearn.metrics.label_ranking_loss", "modules/generated/sklearn.metrics.log_loss", "modules/generated/sklearn.metrics.make_scorer", "modules/generated/sklearn.metrics.matthews_corrcoef", "modules/generated/sklearn.metrics.max_error", "modules/generated/sklearn.metrics.mean_absolute_error", "modules/generated/sklearn.metrics.mean_absolute_percentage_error", "modules/generated/sklearn.metrics.mean_gamma_deviance", "modules/generated/sklearn.metrics.mean_pinball_loss", "modules/generated/sklearn.metrics.mean_poisson_deviance", "modules/generated/sklearn.metrics.mean_squared_error", "modules/generated/sklearn.metrics.mean_squared_log_error", "modules/generated/sklearn.metrics.mean_tweedie_deviance", "modules/generated/sklearn.metrics.median_absolute_error", "modules/generated/sklearn.metrics.multilabel_confusion_matrix", "modules/generated/sklearn.metrics.mutual_info_score", "modules/generated/sklearn.metrics.ndcg_score", "modules/generated/sklearn.metrics.normalized_mutual_info_score", "modules/generated/sklearn.metrics.pairwise.additive_chi2_kernel", "modules/generated/sklearn.metrics.pairwise.chi2_kernel", "modules/generated/sklearn.metrics.pairwise.cosine_distances", "modules/generated/sklearn.metrics.pairwise.cosine_similarity", "modules/generated/sklearn.metrics.pairwise.distance_metrics", "modules/generated/sklearn.metrics.pairwise.euclidean_distances", "modules/generated/sklearn.metrics.pairwise.haversine_distances", "modules/generated/sklearn.metrics.pairwise.kernel_metrics", "modules/generated/sklearn.metrics.pairwise.laplacian_kernel", "modules/generated/sklearn.metrics.pairwise.linear_kernel", "modules/generated/sklearn.metrics.pairwise.manhattan_distances", "modules/generated/sklearn.metrics.pairwise.nan_euclidean_distances", "modules/generated/sklearn.metrics.pairwise.paired_cosine_distances", "modules/generated/sklearn.metrics.pairwise.paired_distances", "modules/generated/sklearn.metrics.pairwise.paired_euclidean_distances", "modules/generated/sklearn.metrics.pairwise.paired_manhattan_distances", "modules/generated/sklearn.metrics.pairwise.pairwise_kernels", "modules/generated/sklearn.metrics.pairwise.polynomial_kernel", "modules/generated/sklearn.metrics.pairwise.rbf_kernel", "modules/generated/sklearn.metrics.pairwise.sigmoid_kernel", "modules/generated/sklearn.metrics.pairwise_distances", "modules/generated/sklearn.metrics.pairwise_distances_argmin", "modules/generated/sklearn.metrics.pairwise_distances_argmin_min", "modules/generated/sklearn.metrics.pairwise_distances_chunked", "modules/generated/sklearn.metrics.precision_recall_curve", "modules/generated/sklearn.metrics.precision_recall_fscore_support", "modules/generated/sklearn.metrics.precision_score", "modules/generated/sklearn.metrics.r2_score", "modules/generated/sklearn.metrics.rand_score", "modules/generated/sklearn.metrics.recall_score", "modules/generated/sklearn.metrics.roc_auc_score", "modules/generated/sklearn.metrics.roc_curve", "modules/generated/sklearn.metrics.root_mean_squared_error", "modules/generated/sklearn.metrics.root_mean_squared_log_error", "modules/generated/sklearn.metrics.silhouette_samples", "modules/generated/sklearn.metrics.silhouette_score", "modules/generated/sklearn.metrics.top_k_accuracy_score", "modules/generated/sklearn.metrics.v_measure_score", "modules/generated/sklearn.metrics.zero_one_loss", "modules/generated/sklearn.mixture.BayesianGaussianMixture", "modules/generated/sklearn.mixture.GaussianMixture", "modules/generated/sklearn.model_selection.GridSearchCV", "modules/generated/sklearn.model_selection.GroupKFold", "modules/generated/sklearn.model_selection.GroupShuffleSplit", "modules/generated/sklearn.model_selection.HalvingGridSearchCV", "modules/generated/sklearn.model_selection.HalvingRandomSearchCV", "modules/generated/sklearn.model_selection.KFold", "modules/generated/sklearn.model_selection.LearningCurveDisplay", "modules/generated/sklearn.model_selection.LeaveOneGroupOut", "modules/generated/sklearn.model_selection.LeaveOneOut", "modules/generated/sklearn.model_selection.LeavePGroupsOut", "modules/generated/sklearn.model_selection.LeavePOut", "modules/generated/sklearn.model_selection.ParameterGrid", "modules/generated/sklearn.model_selection.ParameterSampler", "modules/generated/sklearn.model_selection.PredefinedSplit", "modules/generated/sklearn.model_selection.RandomizedSearchCV", "modules/generated/sklearn.model_selection.RepeatedKFold", "modules/generated/sklearn.model_selection.RepeatedStratifiedKFold", "modules/generated/sklearn.model_selection.ShuffleSplit", "modules/generated/sklearn.model_selection.StratifiedGroupKFold", "modules/generated/sklearn.model_selection.StratifiedKFold", "modules/generated/sklearn.model_selection.StratifiedShuffleSplit", "modules/generated/sklearn.model_selection.TimeSeriesSplit", "modules/generated/sklearn.model_selection.ValidationCurveDisplay", "modules/generated/sklearn.model_selection.check_cv", "modules/generated/sklearn.model_selection.cross_val_predict", "modules/generated/sklearn.model_selection.cross_val_score", "modules/generated/sklearn.model_selection.cross_validate", "modules/generated/sklearn.model_selection.learning_curve", "modules/generated/sklearn.model_selection.permutation_test_score", "modules/generated/sklearn.model_selection.train_test_split", "modules/generated/sklearn.model_selection.validation_curve", "modules/generated/sklearn.multiclass.OneVsOneClassifier", "modules/generated/sklearn.multiclass.OneVsRestClassifier", "modules/generated/sklearn.multiclass.OutputCodeClassifier", "modules/generated/sklearn.multioutput.ClassifierChain", "modules/generated/sklearn.multioutput.MultiOutputClassifier", "modules/generated/sklearn.multioutput.MultiOutputRegressor", "modules/generated/sklearn.multioutput.RegressorChain", "modules/generated/sklearn.naive_bayes.BernoulliNB", "modules/generated/sklearn.naive_bayes.CategoricalNB", "modules/generated/sklearn.naive_bayes.ComplementNB", "modules/generated/sklearn.naive_bayes.GaussianNB", "modules/generated/sklearn.naive_bayes.MultinomialNB", "modules/generated/sklearn.neighbors.BallTree", "modules/generated/sklearn.neighbors.KDTree", "modules/generated/sklearn.neighbors.KNeighborsClassifier", "modules/generated/sklearn.neighbors.KNeighborsRegressor", "modules/generated/sklearn.neighbors.KNeighborsTransformer", "modules/generated/sklearn.neighbors.KernelDensity", "modules/generated/sklearn.neighbors.LocalOutlierFactor", "modules/generated/sklearn.neighbors.NearestCentroid", "modules/generated/sklearn.neighbors.NearestNeighbors", "modules/generated/sklearn.neighbors.NeighborhoodComponentsAnalysis", "modules/generated/sklearn.neighbors.RadiusNeighborsClassifier", "modules/generated/sklearn.neighbors.RadiusNeighborsRegressor", "modules/generated/sklearn.neighbors.RadiusNeighborsTransformer", "modules/generated/sklearn.neighbors.kneighbors_graph", "modules/generated/sklearn.neighbors.radius_neighbors_graph", "modules/generated/sklearn.neighbors.sort_graph_by_row_values", "modules/generated/sklearn.neural_network.BernoulliRBM", "modules/generated/sklearn.neural_network.MLPClassifier", "modules/generated/sklearn.neural_network.MLPRegressor", "modules/generated/sklearn.pipeline.FeatureUnion", "modules/generated/sklearn.pipeline.Pipeline", "modules/generated/sklearn.pipeline.make_pipeline", "modules/generated/sklearn.pipeline.make_union", "modules/generated/sklearn.preprocessing.Binarizer", "modules/generated/sklearn.preprocessing.FunctionTransformer", "modules/generated/sklearn.preprocessing.KBinsDiscretizer", "modules/generated/sklearn.preprocessing.KernelCenterer", "modules/generated/sklearn.preprocessing.LabelBinarizer", "modules/generated/sklearn.preprocessing.LabelEncoder", "modules/generated/sklearn.preprocessing.MaxAbsScaler", "modules/generated/sklearn.preprocessing.MinMaxScaler", "modules/generated/sklearn.preprocessing.MultiLabelBinarizer", "modules/generated/sklearn.preprocessing.Normalizer", "modules/generated/sklearn.preprocessing.OneHotEncoder", "modules/generated/sklearn.preprocessing.OrdinalEncoder", "modules/generated/sklearn.preprocessing.PolynomialFeatures", "modules/generated/sklearn.preprocessing.PowerTransformer", "modules/generated/sklearn.preprocessing.QuantileTransformer", "modules/generated/sklearn.preprocessing.RobustScaler", "modules/generated/sklearn.preprocessing.SplineTransformer", "modules/generated/sklearn.preprocessing.StandardScaler", "modules/generated/sklearn.preprocessing.TargetEncoder", "modules/generated/sklearn.preprocessing.add_dummy_feature", "modules/generated/sklearn.preprocessing.binarize", "modules/generated/sklearn.preprocessing.label_binarize", "modules/generated/sklearn.preprocessing.maxabs_scale", "modules/generated/sklearn.preprocessing.minmax_scale", "modules/generated/sklearn.preprocessing.normalize", "modules/generated/sklearn.preprocessing.power_transform", "modules/generated/sklearn.preprocessing.quantile_transform", "modules/generated/sklearn.preprocessing.robust_scale", "modules/generated/sklearn.preprocessing.scale", "modules/generated/sklearn.random_projection.GaussianRandomProjection", "modules/generated/sklearn.random_projection.SparseRandomProjection", "modules/generated/sklearn.random_projection.johnson_lindenstrauss_min_dim", "modules/generated/sklearn.semi_supervised.LabelPropagation", "modules/generated/sklearn.semi_supervised.LabelSpreading", "modules/generated/sklearn.semi_supervised.SelfTrainingClassifier", "modules/generated/sklearn.set_config", "modules/generated/sklearn.show_versions", "modules/generated/sklearn.svm.LinearSVC", "modules/generated/sklearn.svm.LinearSVR", "modules/generated/sklearn.svm.NuSVC", "modules/generated/sklearn.svm.NuSVR", "modules/generated/sklearn.svm.OneClassSVM", "modules/generated/sklearn.svm.SVC", "modules/generated/sklearn.svm.SVR", "modules/generated/sklearn.svm.l1_min_c", "modules/generated/sklearn.tree.DecisionTreeClassifier", "modules/generated/sklearn.tree.DecisionTreeRegressor", "modules/generated/sklearn.tree.ExtraTreeClassifier", "modules/generated/sklearn.tree.ExtraTreeRegressor", "modules/generated/sklearn.tree.export_graphviz", "modules/generated/sklearn.tree.export_text", "modules/generated/sklearn.tree.plot_tree", "modules/generated/sklearn.utils.Bunch", "modules/generated/sklearn.utils._safe_indexing", "modules/generated/sklearn.utils.arrayfuncs.min_pos", "modules/generated/sklearn.utils.as_float_array", "modules/generated/sklearn.utils.assert_all_finite", "modules/generated/sklearn.utils.check_X_y", "modules/generated/sklearn.utils.check_array", "modules/generated/sklearn.utils.check_consistent_length", "modules/generated/sklearn.utils.check_random_state", "modules/generated/sklearn.utils.check_scalar", "modules/generated/sklearn.utils.class_weight.compute_class_weight", "modules/generated/sklearn.utils.class_weight.compute_sample_weight", "modules/generated/sklearn.utils.deprecated", "modules/generated/sklearn.utils.discovery.all_displays", "modules/generated/sklearn.utils.discovery.all_estimators", "modules/generated/sklearn.utils.discovery.all_functions", "modules/generated/sklearn.utils.estimator_checks.check_estimator", "modules/generated/sklearn.utils.estimator_checks.parametrize_with_checks", "modules/generated/sklearn.utils.estimator_html_repr", "modules/generated/sklearn.utils.extmath.density", "modules/generated/sklearn.utils.extmath.fast_logdet", "modules/generated/sklearn.utils.extmath.randomized_range_finder", "modules/generated/sklearn.utils.extmath.randomized_svd", "modules/generated/sklearn.utils.extmath.safe_sparse_dot", "modules/generated/sklearn.utils.extmath.weighted_mode", "modules/generated/sklearn.utils.gen_batches", "modules/generated/sklearn.utils.gen_even_slices", "modules/generated/sklearn.utils.graph.single_source_shortest_path_length", "modules/generated/sklearn.utils.indexable", "modules/generated/sklearn.utils.metadata_routing.MetadataRequest", "modules/generated/sklearn.utils.metadata_routing.MetadataRouter", "modules/generated/sklearn.utils.metadata_routing.MethodMapping", "modules/generated/sklearn.utils.metadata_routing.get_routing_for_object", "modules/generated/sklearn.utils.metadata_routing.process_routing", "modules/generated/sklearn.utils.metaestimators.available_if", "modules/generated/sklearn.utils.multiclass.is_multilabel", "modules/generated/sklearn.utils.multiclass.type_of_target", "modules/generated/sklearn.utils.multiclass.unique_labels", "modules/generated/sklearn.utils.murmurhash3_32", "modules/generated/sklearn.utils.parallel.Parallel", "modules/generated/sklearn.utils.parallel.delayed", "modules/generated/sklearn.utils.parallel_backend", "modules/generated/sklearn.utils.random.sample_without_replacement", "modules/generated/sklearn.utils.register_parallel_backend", "modules/generated/sklearn.utils.resample", "modules/generated/sklearn.utils.safe_mask", "modules/generated/sklearn.utils.safe_sqr", "modules/generated/sklearn.utils.shuffle", "modules/generated/sklearn.utils.sparsefuncs.incr_mean_variance_axis", "modules/generated/sklearn.utils.sparsefuncs.inplace_column_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_csr_column_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_row_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_column", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_row", "modules/generated/sklearn.utils.sparsefuncs.mean_variance_axis", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2", "modules/generated/sklearn.utils.validation.check_is_fitted", "modules/generated/sklearn.utils.validation.check_memory", "modules/generated/sklearn.utils.validation.check_symmetric", "modules/generated/sklearn.utils.validation.column_or_1d", "modules/generated/sklearn.utils.validation.has_fit_parameter", "modules/grid_search", "modules/impute", "modules/isotonic", "modules/kernel_approximation", "modules/kernel_ridge", "modules/lda_qda", "modules/learning_curve", "modules/linear_model", "modules/manifold", "modules/metrics", "modules/mixture", "modules/model_evaluation", "modules/multiclass", "modules/naive_bayes", "modules/neighbors", "modules/neural_networks_supervised", "modules/neural_networks_unsupervised", "modules/outlier_detection", "modules/partial_dependence", "modules/permutation_importance", "modules/pipeline", "modules/preprocessing", "modules/preprocessing_targets", "modules/random_projection", "modules/semi_supervised", "modules/sgd", "modules/svm", "modules/tree", "modules/unsupervised_reduction", "presentations", "related_projects", "roadmap", "sg_execution_times", "supervised_learning", "support", "testimonials/testimonials", "tutorial/basic/tutorial", "tutorial/index", "tutorial/machine_learning_map/index", "tutorial/statistical_inference/index", "tutorial/statistical_inference/model_selection", "tutorial/statistical_inference/putting_together", "tutorial/statistical_inference/settings", "tutorial/statistical_inference/supervised_learning", "tutorial/statistical_inference/unsupervised_learning", "tutorial/text_analytics/working_with_text_data", "unsupervised_learning", "user_guide", "versions", "visualizations", "whats_new", "whats_new/_contributors", "whats_new/older_versions", "whats_new/v0.13", "whats_new/v0.14", "whats_new/v0.15", "whats_new/v0.16", "whats_new/v0.17", "whats_new/v0.18", "whats_new/v0.19", "whats_new/v0.20", "whats_new/v0.21", "whats_new/v0.22", "whats_new/v0.23", "whats_new/v0.24", "whats_new/v1.0", "whats_new/v1.1", "whats_new/v1.2", "whats_new/v1.3", "whats_new/v1.4", "whats_new/v1.5"], "filenames": ["about.rst", "authors.rst", "authors_emeritus.rst", "auto_examples/applications/index.rst", "auto_examples/applications/plot_cyclical_feature_engineering.rst", "auto_examples/applications/plot_digits_denoising.rst", "auto_examples/applications/plot_face_recognition.rst", "auto_examples/applications/plot_model_complexity_influence.rst", "auto_examples/applications/plot_out_of_core_classification.rst", "auto_examples/applications/plot_outlier_detection_wine.rst", "auto_examples/applications/plot_prediction_latency.rst", "auto_examples/applications/plot_species_distribution_modeling.rst", "auto_examples/applications/plot_stock_market.rst", "auto_examples/applications/plot_time_series_lagged_features.rst", "auto_examples/applications/plot_tomography_l1_reconstruction.rst", "auto_examples/applications/plot_topics_extraction_with_nmf_lda.rst", "auto_examples/applications/svm_gui.rst", "auto_examples/applications/wikipedia_principal_eigenvector.rst", "auto_examples/bicluster/index.rst", "auto_examples/bicluster/plot_bicluster_newsgroups.rst", "auto_examples/bicluster/plot_spectral_biclustering.rst", "auto_examples/bicluster/plot_spectral_coclustering.rst", "auto_examples/calibration/index.rst", "auto_examples/calibration/plot_calibration.rst", "auto_examples/calibration/plot_calibration_curve.rst", "auto_examples/calibration/plot_calibration_multiclass.rst", "auto_examples/calibration/plot_compare_calibration.rst", "auto_examples/classification/index.rst", "auto_examples/classification/plot_classification_probability.rst", "auto_examples/classification/plot_classifier_comparison.rst", "auto_examples/classification/plot_digits_classification.rst", "auto_examples/classification/plot_lda.rst", "auto_examples/classification/plot_lda_qda.rst", "auto_examples/cluster/index.rst", "auto_examples/cluster/plot_adjusted_for_chance_measures.rst", "auto_examples/cluster/plot_affinity_propagation.rst", "auto_examples/cluster/plot_agglomerative_clustering.rst", "auto_examples/cluster/plot_agglomerative_clustering_metrics.rst", "auto_examples/cluster/plot_agglomerative_dendrogram.rst", "auto_examples/cluster/plot_birch_vs_minibatchkmeans.rst", "auto_examples/cluster/plot_bisect_kmeans.rst", "auto_examples/cluster/plot_cluster_comparison.rst", "auto_examples/cluster/plot_cluster_iris.rst", "auto_examples/cluster/plot_coin_segmentation.rst", "auto_examples/cluster/plot_coin_ward_segmentation.rst", "auto_examples/cluster/plot_color_quantization.rst", "auto_examples/cluster/plot_dbscan.rst", "auto_examples/cluster/plot_dict_face_patches.rst", "auto_examples/cluster/plot_digits_agglomeration.rst", "auto_examples/cluster/plot_digits_linkage.rst", "auto_examples/cluster/plot_face_compress.rst", "auto_examples/cluster/plot_feature_agglomeration_vs_univariate_selection.rst", "auto_examples/cluster/plot_hdbscan.rst", "auto_examples/cluster/plot_inductive_clustering.rst", "auto_examples/cluster/plot_kmeans_assumptions.rst", "auto_examples/cluster/plot_kmeans_digits.rst", "auto_examples/cluster/plot_kmeans_plusplus.rst", "auto_examples/cluster/plot_kmeans_silhouette_analysis.rst", "auto_examples/cluster/plot_kmeans_stability_low_dim_dense.rst", "auto_examples/cluster/plot_linkage_comparison.rst", "auto_examples/cluster/plot_mean_shift.rst", "auto_examples/cluster/plot_mini_batch_kmeans.rst", "auto_examples/cluster/plot_optics.rst", "auto_examples/cluster/plot_segmentation_toy.rst", "auto_examples/cluster/plot_ward_structured_vs_unstructured.rst", "auto_examples/compose/index.rst", "auto_examples/compose/plot_column_transformer.rst", "auto_examples/compose/plot_column_transformer_mixed_types.rst", "auto_examples/compose/plot_compare_reduction.rst", "auto_examples/compose/plot_digits_pipe.rst", "auto_examples/compose/plot_feature_union.rst", "auto_examples/compose/plot_transformed_target.rst", "auto_examples/covariance/index.rst", "auto_examples/covariance/plot_covariance_estimation.rst", "auto_examples/covariance/plot_lw_vs_oas.rst", "auto_examples/covariance/plot_mahalanobis_distances.rst", "auto_examples/covariance/plot_robust_vs_empirical_covariance.rst", "auto_examples/covariance/plot_sparse_cov.rst", "auto_examples/cross_decomposition/index.rst", "auto_examples/cross_decomposition/plot_compare_cross_decomposition.rst", "auto_examples/cross_decomposition/plot_pcr_vs_pls.rst", "auto_examples/datasets/index.rst", "auto_examples/datasets/plot_digits_last_image.rst", "auto_examples/datasets/plot_iris_dataset.rst", "auto_examples/datasets/plot_random_dataset.rst", "auto_examples/datasets/plot_random_multilabel_dataset.rst", "auto_examples/decomposition/index.rst", "auto_examples/decomposition/plot_faces_decomposition.rst", "auto_examples/decomposition/plot_ica_blind_source_separation.rst", "auto_examples/decomposition/plot_ica_vs_pca.rst", "auto_examples/decomposition/plot_image_denoising.rst", "auto_examples/decomposition/plot_incremental_pca.rst", "auto_examples/decomposition/plot_kernel_pca.rst", "auto_examples/decomposition/plot_pca_iris.rst", "auto_examples/decomposition/plot_pca_vs_fa_model_selection.rst", "auto_examples/decomposition/plot_pca_vs_lda.rst", "auto_examples/decomposition/plot_sparse_coding.rst", "auto_examples/decomposition/plot_varimax_fa.rst", "auto_examples/developing_estimators/index.rst", "auto_examples/developing_estimators/sklearn_is_fitted.rst", "auto_examples/ensemble/index.rst", "auto_examples/ensemble/plot_adaboost_multiclass.rst", "auto_examples/ensemble/plot_adaboost_regression.rst", "auto_examples/ensemble/plot_adaboost_twoclass.rst", "auto_examples/ensemble/plot_bias_variance.rst", "auto_examples/ensemble/plot_ensemble_oob.rst", "auto_examples/ensemble/plot_feature_transformation.rst", "auto_examples/ensemble/plot_forest_hist_grad_boosting_comparison.rst", "auto_examples/ensemble/plot_forest_importances.rst", "auto_examples/ensemble/plot_forest_importances_faces.rst", "auto_examples/ensemble/plot_forest_iris.rst", "auto_examples/ensemble/plot_gradient_boosting_categorical.rst", "auto_examples/ensemble/plot_gradient_boosting_early_stopping.rst", "auto_examples/ensemble/plot_gradient_boosting_oob.rst", "auto_examples/ensemble/plot_gradient_boosting_quantile.rst", "auto_examples/ensemble/plot_gradient_boosting_regression.rst", "auto_examples/ensemble/plot_gradient_boosting_regularization.rst", "auto_examples/ensemble/plot_hgbt_regression.rst", "auto_examples/ensemble/plot_isolation_forest.rst", "auto_examples/ensemble/plot_monotonic_constraints.rst", "auto_examples/ensemble/plot_random_forest_embedding.rst", "auto_examples/ensemble/plot_random_forest_regression_multioutput.rst", "auto_examples/ensemble/plot_stack_predictors.rst", "auto_examples/ensemble/plot_voting_decision_regions.rst", "auto_examples/ensemble/plot_voting_probas.rst", "auto_examples/ensemble/plot_voting_regressor.rst", "auto_examples/exercises/index.rst", "auto_examples/exercises/plot_cv_diabetes.rst", "auto_examples/exercises/plot_digits_classification_exercise.rst", "auto_examples/exercises/plot_iris_exercise.rst", "auto_examples/feature_selection/index.rst", "auto_examples/feature_selection/plot_f_test_vs_mi.rst", "auto_examples/feature_selection/plot_feature_selection.rst", "auto_examples/feature_selection/plot_feature_selection_pipeline.rst", "auto_examples/feature_selection/plot_rfe_digits.rst", "auto_examples/feature_selection/plot_rfe_with_cross_validation.rst", "auto_examples/feature_selection/plot_select_from_model_diabetes.rst", "auto_examples/gaussian_process/index.rst", "auto_examples/gaussian_process/plot_compare_gpr_krr.rst", "auto_examples/gaussian_process/plot_gpc.rst", "auto_examples/gaussian_process/plot_gpc_iris.rst", "auto_examples/gaussian_process/plot_gpc_isoprobability.rst", "auto_examples/gaussian_process/plot_gpc_xor.rst", "auto_examples/gaussian_process/plot_gpr_co2.rst", "auto_examples/gaussian_process/plot_gpr_noisy.rst", "auto_examples/gaussian_process/plot_gpr_noisy_targets.rst", "auto_examples/gaussian_process/plot_gpr_on_structured_data.rst", "auto_examples/gaussian_process/plot_gpr_prior_posterior.rst", "auto_examples/impute/index.rst", "auto_examples/impute/plot_iterative_imputer_variants_comparison.rst", "auto_examples/impute/plot_missing_values.rst", "auto_examples/index.rst", "auto_examples/inspection/index.rst", "auto_examples/inspection/plot_causal_interpretation.rst", "auto_examples/inspection/plot_linear_model_coefficient_interpretation.rst", "auto_examples/inspection/plot_partial_dependence.rst", "auto_examples/inspection/plot_permutation_importance.rst", "auto_examples/inspection/plot_permutation_importance_multicollinear.rst", "auto_examples/kernel_approximation/index.rst", "auto_examples/kernel_approximation/plot_scalable_poly_kernels.rst", "auto_examples/linear_model/index.rst", "auto_examples/linear_model/plot_ard.rst", "auto_examples/linear_model/plot_bayesian_ridge_curvefit.rst", "auto_examples/linear_model/plot_elastic_net_precomputed_gram_matrix_with_weighted_samples.rst", "auto_examples/linear_model/plot_huber_vs_ridge.rst", "auto_examples/linear_model/plot_iris_logistic.rst", "auto_examples/linear_model/plot_lasso_and_elasticnet.rst", "auto_examples/linear_model/plot_lasso_coordinate_descent_path.rst", "auto_examples/linear_model/plot_lasso_dense_vs_sparse_data.rst", "auto_examples/linear_model/plot_lasso_lars.rst", "auto_examples/linear_model/plot_lasso_lars_ic.rst", "auto_examples/linear_model/plot_lasso_model_selection.rst", "auto_examples/linear_model/plot_logistic.rst", "auto_examples/linear_model/plot_logistic_l1_l2_sparsity.rst", "auto_examples/linear_model/plot_logistic_multinomial.rst", "auto_examples/linear_model/plot_logistic_path.rst", "auto_examples/linear_model/plot_multi_task_lasso_support.rst", "auto_examples/linear_model/plot_nnls.rst", "auto_examples/linear_model/plot_ols.rst", "auto_examples/linear_model/plot_ols_3d.rst", "auto_examples/linear_model/plot_ols_ridge_variance.rst", "auto_examples/linear_model/plot_omp.rst", "auto_examples/linear_model/plot_poisson_regression_non_normal_loss.rst", "auto_examples/linear_model/plot_polynomial_interpolation.rst", "auto_examples/linear_model/plot_quantile_regression.rst", "auto_examples/linear_model/plot_ransac.rst", "auto_examples/linear_model/plot_ridge_coeffs.rst", "auto_examples/linear_model/plot_ridge_path.rst", "auto_examples/linear_model/plot_robust_fit.rst", "auto_examples/linear_model/plot_sgd_comparison.rst", "auto_examples/linear_model/plot_sgd_early_stopping.rst", "auto_examples/linear_model/plot_sgd_iris.rst", "auto_examples/linear_model/plot_sgd_loss_functions.rst", "auto_examples/linear_model/plot_sgd_penalties.rst", "auto_examples/linear_model/plot_sgd_separating_hyperplane.rst", "auto_examples/linear_model/plot_sgd_weighted_samples.rst", "auto_examples/linear_model/plot_sgdocsvm_vs_ocsvm.rst", "auto_examples/linear_model/plot_sparse_logistic_regression_20newsgroups.rst", "auto_examples/linear_model/plot_sparse_logistic_regression_mnist.rst", "auto_examples/linear_model/plot_theilsen.rst", "auto_examples/linear_model/plot_tweedie_regression_insurance_claims.rst", "auto_examples/manifold/index.rst", "auto_examples/manifold/plot_compare_methods.rst", "auto_examples/manifold/plot_lle_digits.rst", "auto_examples/manifold/plot_manifold_sphere.rst", "auto_examples/manifold/plot_mds.rst", "auto_examples/manifold/plot_swissroll.rst", "auto_examples/manifold/plot_t_sne_perplexity.rst", "auto_examples/miscellaneous/index.rst", "auto_examples/miscellaneous/plot_anomaly_comparison.rst", "auto_examples/miscellaneous/plot_display_object_visualization.rst", "auto_examples/miscellaneous/plot_estimator_representation.rst", "auto_examples/miscellaneous/plot_isotonic_regression.rst", "auto_examples/miscellaneous/plot_johnson_lindenstrauss_bound.rst", "auto_examples/miscellaneous/plot_kernel_approximation.rst", "auto_examples/miscellaneous/plot_kernel_ridge_regression.rst", "auto_examples/miscellaneous/plot_metadata_routing.rst", "auto_examples/miscellaneous/plot_multilabel.rst", "auto_examples/miscellaneous/plot_multioutput_face_completion.rst", "auto_examples/miscellaneous/plot_outlier_detection_bench.rst", "auto_examples/miscellaneous/plot_partial_dependence_visualization_api.rst", "auto_examples/miscellaneous/plot_pipeline_display.rst", "auto_examples/miscellaneous/plot_roc_curve_visualization_api.rst", "auto_examples/miscellaneous/plot_set_output.rst", "auto_examples/mixture/index.rst", "auto_examples/mixture/plot_concentration_prior.rst", "auto_examples/mixture/plot_gmm.rst", "auto_examples/mixture/plot_gmm_covariances.rst", "auto_examples/mixture/plot_gmm_init.rst", "auto_examples/mixture/plot_gmm_pdf.rst", "auto_examples/mixture/plot_gmm_selection.rst", "auto_examples/mixture/plot_gmm_sin.rst", "auto_examples/model_selection/index.rst", "auto_examples/model_selection/plot_confusion_matrix.rst", "auto_examples/model_selection/plot_cv_indices.rst", "auto_examples/model_selection/plot_cv_predict.rst", "auto_examples/model_selection/plot_det.rst", "auto_examples/model_selection/plot_grid_search_digits.rst", "auto_examples/model_selection/plot_grid_search_refit_callable.rst", "auto_examples/model_selection/plot_grid_search_stats.rst", "auto_examples/model_selection/plot_grid_search_text_feature_extraction.rst", "auto_examples/model_selection/plot_learning_curve.rst", "auto_examples/model_selection/plot_likelihood_ratios.rst", "auto_examples/model_selection/plot_multi_metric_evaluation.rst", "auto_examples/model_selection/plot_nested_cross_validation_iris.rst", "auto_examples/model_selection/plot_permutation_tests_for_classification.rst", "auto_examples/model_selection/plot_precision_recall.rst", "auto_examples/model_selection/plot_randomized_search.rst", "auto_examples/model_selection/plot_roc.rst", "auto_examples/model_selection/plot_roc_crossval.rst", "auto_examples/model_selection/plot_successive_halving_heatmap.rst", "auto_examples/model_selection/plot_successive_halving_iterations.rst", "auto_examples/model_selection/plot_train_error_vs_test_error.rst", "auto_examples/model_selection/plot_underfitting_overfitting.rst", "auto_examples/model_selection/plot_validation_curve.rst", "auto_examples/multiclass/index.rst", "auto_examples/multiclass/plot_multiclass_overview.rst", "auto_examples/multioutput/index.rst", "auto_examples/multioutput/plot_classifier_chain_yeast.rst", "auto_examples/neighbors/approximate_nearest_neighbors.rst", "auto_examples/neighbors/index.rst", "auto_examples/neighbors/plot_caching_nearest_neighbors.rst", "auto_examples/neighbors/plot_classification.rst", "auto_examples/neighbors/plot_digits_kde_sampling.rst", "auto_examples/neighbors/plot_kde_1d.rst", "auto_examples/neighbors/plot_lof_novelty_detection.rst", "auto_examples/neighbors/plot_lof_outlier_detection.rst", "auto_examples/neighbors/plot_nca_classification.rst", "auto_examples/neighbors/plot_nca_dim_reduction.rst", "auto_examples/neighbors/plot_nca_illustration.rst", "auto_examples/neighbors/plot_nearest_centroid.rst", "auto_examples/neighbors/plot_regression.rst", "auto_examples/neighbors/plot_species_kde.rst", "auto_examples/neural_networks/index.rst", "auto_examples/neural_networks/plot_mlp_alpha.rst", "auto_examples/neural_networks/plot_mlp_training_curves.rst", "auto_examples/neural_networks/plot_mnist_filters.rst", "auto_examples/neural_networks/plot_rbm_logistic_classification.rst", "auto_examples/preprocessing/index.rst", "auto_examples/preprocessing/plot_all_scaling.rst", "auto_examples/preprocessing/plot_discretization.rst", "auto_examples/preprocessing/plot_discretization_classification.rst", "auto_examples/preprocessing/plot_discretization_strategies.rst", "auto_examples/preprocessing/plot_map_data_to_normal.rst", "auto_examples/preprocessing/plot_scaling_importance.rst", "auto_examples/preprocessing/plot_target_encoder.rst", "auto_examples/preprocessing/plot_target_encoder_cross_val.rst", "auto_examples/release_highlights/index.rst", "auto_examples/release_highlights/plot_release_highlights_0_22_0.rst", "auto_examples/release_highlights/plot_release_highlights_0_23_0.rst", "auto_examples/release_highlights/plot_release_highlights_0_24_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_0_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_1_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_2_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_3_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_4_0.rst", "auto_examples/semi_supervised/index.rst", "auto_examples/semi_supervised/plot_label_propagation_digits.rst", "auto_examples/semi_supervised/plot_label_propagation_digits_active_learning.rst", "auto_examples/semi_supervised/plot_label_propagation_structure.rst", "auto_examples/semi_supervised/plot_self_training_varying_threshold.rst", "auto_examples/semi_supervised/plot_semi_supervised_newsgroups.rst", "auto_examples/semi_supervised/plot_semi_supervised_versus_svm_iris.rst", "auto_examples/svm/index.rst", "auto_examples/svm/plot_custom_kernel.rst", "auto_examples/svm/plot_iris_svc.rst", "auto_examples/svm/plot_linearsvc_support_vectors.rst", "auto_examples/svm/plot_oneclass.rst", "auto_examples/svm/plot_rbf_parameters.rst", "auto_examples/svm/plot_separating_hyperplane.rst", "auto_examples/svm/plot_separating_hyperplane_unbalanced.rst", "auto_examples/svm/plot_svm_anova.rst", "auto_examples/svm/plot_svm_kernels.rst", "auto_examples/svm/plot_svm_margin.rst", "auto_examples/svm/plot_svm_nonlinear.rst", "auto_examples/svm/plot_svm_regression.rst", "auto_examples/svm/plot_svm_scale_c.rst", "auto_examples/svm/plot_svm_tie_breaking.rst", "auto_examples/svm/plot_weighted_samples.rst", "auto_examples/text/index.rst", "auto_examples/text/plot_document_classification_20newsgroups.rst", "auto_examples/text/plot_document_clustering.rst", "auto_examples/text/plot_hashing_vs_dict_vectorizer.rst", "auto_examples/tree/index.rst", "auto_examples/tree/plot_cost_complexity_pruning.rst", "auto_examples/tree/plot_iris_dtc.rst", "auto_examples/tree/plot_tree_regression.rst", "auto_examples/tree/plot_tree_regression_multioutput.rst", "auto_examples/tree/plot_unveil_tree_structure.rst", "common_pitfalls.rst", "communication_team.rst", "communication_team_emeritus.rst", "computing.rst", "computing/computational_performance.rst", "computing/parallelism.rst", "computing/scaling_strategies.rst", "contributor_experience_team.rst", "contributor_experience_team_emeritus.rst", "data_transforms.rst", "datasets.rst", "datasets/loading_other_datasets.rst", "datasets/real_world.rst", "datasets/sample_generators.rst", "datasets/toy_dataset.rst", "developers/advanced_installation.rst", "developers/bug_triaging.rst", "developers/contributing.rst", "developers/cython.rst", "developers/develop.rst", "developers/index.rst", "developers/maintainer.rst", "developers/minimal_reproducer.rst", "developers/performance.rst", "developers/plotting.rst", "developers/tips.rst", "developers/utilities.rst", "dispatching.rst", "documentation_team.rst", "faq.rst", "getting_started.rst", "glossary.rst", "governance.rst", "index.rst", "inspection.rst", "install.rst", "metadata_routing.rst", "min_dependency_substitutions.rst", "min_dependency_table.rst", "model_persistence.rst", "model_selection.rst", "modules/array_api.rst", "modules/biclustering.rst", "modules/calibration.rst", "modules/classes.rst", "modules/clustering.rst", "modules/compose.rst", "modules/covariance.rst", "modules/cross_decomposition.rst", "modules/cross_validation.rst", "modules/decomposition.rst", "modules/density.rst", "modules/ensemble.rst", "modules/feature_extraction.rst", "modules/feature_selection.rst", "modules/gaussian_process.rst", "modules/generated/dbscan-function.rst", "modules/generated/fastica-function.rst", "modules/generated/oas-function.rst", "modules/generated/sklearn.base.BaseEstimator.rst", "modules/generated/sklearn.base.BiclusterMixin.rst", "modules/generated/sklearn.base.ClassNamePrefixFeaturesOutMixin.rst", "modules/generated/sklearn.base.ClassifierMixin.rst", "modules/generated/sklearn.base.ClusterMixin.rst", "modules/generated/sklearn.base.DensityMixin.rst", "modules/generated/sklearn.base.MetaEstimatorMixin.rst", "modules/generated/sklearn.base.OneToOneFeatureMixin.rst", "modules/generated/sklearn.base.OutlierMixin.rst", "modules/generated/sklearn.base.RegressorMixin.rst", "modules/generated/sklearn.base.TransformerMixin.rst", "modules/generated/sklearn.base.clone.rst", "modules/generated/sklearn.base.is_classifier.rst", "modules/generated/sklearn.base.is_regressor.rst", "modules/generated/sklearn.calibration.CalibratedClassifierCV.rst", "modules/generated/sklearn.calibration.CalibrationDisplay.rst", "modules/generated/sklearn.calibration.calibration_curve.rst", "modules/generated/sklearn.cluster.AffinityPropagation.rst", "modules/generated/sklearn.cluster.AgglomerativeClustering.rst", "modules/generated/sklearn.cluster.Birch.rst", "modules/generated/sklearn.cluster.BisectingKMeans.rst", "modules/generated/sklearn.cluster.DBSCAN.rst", "modules/generated/sklearn.cluster.FeatureAgglomeration.rst", "modules/generated/sklearn.cluster.HDBSCAN.rst", "modules/generated/sklearn.cluster.KMeans.rst", "modules/generated/sklearn.cluster.MeanShift.rst", "modules/generated/sklearn.cluster.MiniBatchKMeans.rst", "modules/generated/sklearn.cluster.OPTICS.rst", "modules/generated/sklearn.cluster.SpectralBiclustering.rst", "modules/generated/sklearn.cluster.SpectralClustering.rst", "modules/generated/sklearn.cluster.SpectralCoclustering.rst", "modules/generated/sklearn.cluster.affinity_propagation.rst", "modules/generated/sklearn.cluster.cluster_optics_dbscan.rst", "modules/generated/sklearn.cluster.cluster_optics_xi.rst", "modules/generated/sklearn.cluster.compute_optics_graph.rst", "modules/generated/sklearn.cluster.estimate_bandwidth.rst", "modules/generated/sklearn.cluster.k_means.rst", "modules/generated/sklearn.cluster.kmeans_plusplus.rst", "modules/generated/sklearn.cluster.mean_shift.rst", "modules/generated/sklearn.cluster.spectral_clustering.rst", "modules/generated/sklearn.cluster.ward_tree.rst", "modules/generated/sklearn.compose.ColumnTransformer.rst", "modules/generated/sklearn.compose.TransformedTargetRegressor.rst", "modules/generated/sklearn.compose.make_column_selector.rst", "modules/generated/sklearn.compose.make_column_transformer.rst", "modules/generated/sklearn.config_context.rst", "modules/generated/sklearn.covariance.EllipticEnvelope.rst", "modules/generated/sklearn.covariance.EmpiricalCovariance.rst", "modules/generated/sklearn.covariance.GraphicalLasso.rst", "modules/generated/sklearn.covariance.GraphicalLassoCV.rst", "modules/generated/sklearn.covariance.LedoitWolf.rst", "modules/generated/sklearn.covariance.MinCovDet.rst", "modules/generated/sklearn.covariance.OAS.rst", "modules/generated/sklearn.covariance.ShrunkCovariance.rst", "modules/generated/sklearn.covariance.empirical_covariance.rst", "modules/generated/sklearn.covariance.graphical_lasso.rst", "modules/generated/sklearn.covariance.ledoit_wolf.rst", "modules/generated/sklearn.covariance.ledoit_wolf_shrinkage.rst", "modules/generated/sklearn.covariance.shrunk_covariance.rst", "modules/generated/sklearn.cross_decomposition.CCA.rst", "modules/generated/sklearn.cross_decomposition.PLSCanonical.rst", "modules/generated/sklearn.cross_decomposition.PLSRegression.rst", "modules/generated/sklearn.cross_decomposition.PLSSVD.rst", "modules/generated/sklearn.datasets.clear_data_home.rst", "modules/generated/sklearn.datasets.dump_svmlight_file.rst", "modules/generated/sklearn.datasets.fetch_20newsgroups.rst", "modules/generated/sklearn.datasets.fetch_20newsgroups_vectorized.rst", "modules/generated/sklearn.datasets.fetch_california_housing.rst", "modules/generated/sklearn.datasets.fetch_covtype.rst", "modules/generated/sklearn.datasets.fetch_kddcup99.rst", "modules/generated/sklearn.datasets.fetch_lfw_pairs.rst", "modules/generated/sklearn.datasets.fetch_lfw_people.rst", "modules/generated/sklearn.datasets.fetch_olivetti_faces.rst", "modules/generated/sklearn.datasets.fetch_openml.rst", "modules/generated/sklearn.datasets.fetch_rcv1.rst", "modules/generated/sklearn.datasets.fetch_species_distributions.rst", "modules/generated/sklearn.datasets.get_data_home.rst", "modules/generated/sklearn.datasets.load_breast_cancer.rst", "modules/generated/sklearn.datasets.load_diabetes.rst", "modules/generated/sklearn.datasets.load_digits.rst", "modules/generated/sklearn.datasets.load_files.rst", "modules/generated/sklearn.datasets.load_iris.rst", "modules/generated/sklearn.datasets.load_linnerud.rst", "modules/generated/sklearn.datasets.load_sample_image.rst", "modules/generated/sklearn.datasets.load_sample_images.rst", "modules/generated/sklearn.datasets.load_svmlight_file.rst", "modules/generated/sklearn.datasets.load_svmlight_files.rst", "modules/generated/sklearn.datasets.load_wine.rst", "modules/generated/sklearn.datasets.make_biclusters.rst", "modules/generated/sklearn.datasets.make_blobs.rst", "modules/generated/sklearn.datasets.make_checkerboard.rst", "modules/generated/sklearn.datasets.make_circles.rst", "modules/generated/sklearn.datasets.make_classification.rst", "modules/generated/sklearn.datasets.make_friedman1.rst", "modules/generated/sklearn.datasets.make_friedman2.rst", "modules/generated/sklearn.datasets.make_friedman3.rst", "modules/generated/sklearn.datasets.make_gaussian_quantiles.rst", "modules/generated/sklearn.datasets.make_hastie_10_2.rst", "modules/generated/sklearn.datasets.make_low_rank_matrix.rst", "modules/generated/sklearn.datasets.make_moons.rst", "modules/generated/sklearn.datasets.make_multilabel_classification.rst", "modules/generated/sklearn.datasets.make_regression.rst", "modules/generated/sklearn.datasets.make_s_curve.rst", "modules/generated/sklearn.datasets.make_sparse_coded_signal.rst", "modules/generated/sklearn.datasets.make_sparse_spd_matrix.rst", "modules/generated/sklearn.datasets.make_sparse_uncorrelated.rst", "modules/generated/sklearn.datasets.make_spd_matrix.rst", "modules/generated/sklearn.datasets.make_swiss_roll.rst", "modules/generated/sklearn.decomposition.DictionaryLearning.rst", "modules/generated/sklearn.decomposition.FactorAnalysis.rst", "modules/generated/sklearn.decomposition.FastICA.rst", "modules/generated/sklearn.decomposition.IncrementalPCA.rst", "modules/generated/sklearn.decomposition.KernelPCA.rst", "modules/generated/sklearn.decomposition.LatentDirichletAllocation.rst", "modules/generated/sklearn.decomposition.MiniBatchDictionaryLearning.rst", "modules/generated/sklearn.decomposition.MiniBatchNMF.rst", "modules/generated/sklearn.decomposition.MiniBatchSparsePCA.rst", "modules/generated/sklearn.decomposition.NMF.rst", "modules/generated/sklearn.decomposition.PCA.rst", "modules/generated/sklearn.decomposition.SparseCoder.rst", "modules/generated/sklearn.decomposition.SparsePCA.rst", "modules/generated/sklearn.decomposition.TruncatedSVD.rst", "modules/generated/sklearn.decomposition.dict_learning.rst", "modules/generated/sklearn.decomposition.dict_learning_online.rst", "modules/generated/sklearn.decomposition.non_negative_factorization.rst", "modules/generated/sklearn.decomposition.sparse_encode.rst", "modules/generated/sklearn.discriminant_analysis.LinearDiscriminantAnalysis.rst", "modules/generated/sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.rst", "modules/generated/sklearn.dummy.DummyClassifier.rst", "modules/generated/sklearn.dummy.DummyRegressor.rst", "modules/generated/sklearn.ensemble.AdaBoostClassifier.rst", "modules/generated/sklearn.ensemble.AdaBoostRegressor.rst", "modules/generated/sklearn.ensemble.BaggingClassifier.rst", "modules/generated/sklearn.ensemble.BaggingRegressor.rst", "modules/generated/sklearn.ensemble.ExtraTreesClassifier.rst", "modules/generated/sklearn.ensemble.ExtraTreesRegressor.rst", "modules/generated/sklearn.ensemble.GradientBoostingClassifier.rst", "modules/generated/sklearn.ensemble.GradientBoostingRegressor.rst", "modules/generated/sklearn.ensemble.HistGradientBoostingClassifier.rst", "modules/generated/sklearn.ensemble.HistGradientBoostingRegressor.rst", "modules/generated/sklearn.ensemble.IsolationForest.rst", "modules/generated/sklearn.ensemble.RandomForestClassifier.rst", "modules/generated/sklearn.ensemble.RandomForestRegressor.rst", "modules/generated/sklearn.ensemble.RandomTreesEmbedding.rst", "modules/generated/sklearn.ensemble.StackingClassifier.rst", "modules/generated/sklearn.ensemble.StackingRegressor.rst", "modules/generated/sklearn.ensemble.VotingClassifier.rst", "modules/generated/sklearn.ensemble.VotingRegressor.rst", "modules/generated/sklearn.exceptions.ConvergenceWarning.rst", "modules/generated/sklearn.exceptions.DataConversionWarning.rst", "modules/generated/sklearn.exceptions.DataDimensionalityWarning.rst", "modules/generated/sklearn.exceptions.EfficiencyWarning.rst", "modules/generated/sklearn.exceptions.FitFailedWarning.rst", "modules/generated/sklearn.exceptions.InconsistentVersionWarning.rst", "modules/generated/sklearn.exceptions.NotFittedError.rst", "modules/generated/sklearn.exceptions.UndefinedMetricWarning.rst", "modules/generated/sklearn.experimental.enable_halving_search_cv.rst", "modules/generated/sklearn.experimental.enable_iterative_imputer.rst", "modules/generated/sklearn.feature_extraction.DictVectorizer.rst", "modules/generated/sklearn.feature_extraction.FeatureHasher.rst", "modules/generated/sklearn.feature_extraction.image.PatchExtractor.rst", "modules/generated/sklearn.feature_extraction.image.extract_patches_2d.rst", "modules/generated/sklearn.feature_extraction.image.grid_to_graph.rst", "modules/generated/sklearn.feature_extraction.image.img_to_graph.rst", "modules/generated/sklearn.feature_extraction.image.reconstruct_from_patches_2d.rst", "modules/generated/sklearn.feature_extraction.text.CountVectorizer.rst", "modules/generated/sklearn.feature_extraction.text.HashingVectorizer.rst", "modules/generated/sklearn.feature_extraction.text.TfidfTransformer.rst", "modules/generated/sklearn.feature_extraction.text.TfidfVectorizer.rst", "modules/generated/sklearn.feature_selection.GenericUnivariateSelect.rst", "modules/generated/sklearn.feature_selection.RFE.rst", "modules/generated/sklearn.feature_selection.RFECV.rst", "modules/generated/sklearn.feature_selection.SelectFdr.rst", "modules/generated/sklearn.feature_selection.SelectFpr.rst", "modules/generated/sklearn.feature_selection.SelectFromModel.rst", "modules/generated/sklearn.feature_selection.SelectFwe.rst", "modules/generated/sklearn.feature_selection.SelectKBest.rst", "modules/generated/sklearn.feature_selection.SelectPercentile.rst", "modules/generated/sklearn.feature_selection.SelectorMixin.rst", "modules/generated/sklearn.feature_selection.SequentialFeatureSelector.rst", "modules/generated/sklearn.feature_selection.VarianceThreshold.rst", "modules/generated/sklearn.feature_selection.chi2.rst", "modules/generated/sklearn.feature_selection.f_classif.rst", "modules/generated/sklearn.feature_selection.f_regression.rst", "modules/generated/sklearn.feature_selection.mutual_info_classif.rst", "modules/generated/sklearn.feature_selection.mutual_info_regression.rst", "modules/generated/sklearn.feature_selection.r_regression.rst", "modules/generated/sklearn.gaussian_process.GaussianProcessClassifier.rst", "modules/generated/sklearn.gaussian_process.GaussianProcessRegressor.rst", "modules/generated/sklearn.gaussian_process.kernels.CompoundKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.ConstantKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.DotProduct.rst", "modules/generated/sklearn.gaussian_process.kernels.ExpSineSquared.rst", "modules/generated/sklearn.gaussian_process.kernels.Exponentiation.rst", "modules/generated/sklearn.gaussian_process.kernels.Hyperparameter.rst", "modules/generated/sklearn.gaussian_process.kernels.Kernel.rst", "modules/generated/sklearn.gaussian_process.kernels.Matern.rst", "modules/generated/sklearn.gaussian_process.kernels.PairwiseKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.Product.rst", "modules/generated/sklearn.gaussian_process.kernels.RBF.rst", "modules/generated/sklearn.gaussian_process.kernels.RationalQuadratic.rst", "modules/generated/sklearn.gaussian_process.kernels.Sum.rst", "modules/generated/sklearn.gaussian_process.kernels.WhiteKernel.rst", "modules/generated/sklearn.get_config.rst", "modules/generated/sklearn.impute.IterativeImputer.rst", "modules/generated/sklearn.impute.KNNImputer.rst", "modules/generated/sklearn.impute.MissingIndicator.rst", "modules/generated/sklearn.impute.SimpleImputer.rst", "modules/generated/sklearn.inspection.DecisionBoundaryDisplay.rst", "modules/generated/sklearn.inspection.PartialDependenceDisplay.rst", "modules/generated/sklearn.inspection.partial_dependence.rst", "modules/generated/sklearn.inspection.permutation_importance.rst", "modules/generated/sklearn.isotonic.IsotonicRegression.rst", "modules/generated/sklearn.isotonic.check_increasing.rst", "modules/generated/sklearn.isotonic.isotonic_regression.rst", "modules/generated/sklearn.kernel_approximation.AdditiveChi2Sampler.rst", "modules/generated/sklearn.kernel_approximation.Nystroem.rst", "modules/generated/sklearn.kernel_approximation.PolynomialCountSketch.rst", "modules/generated/sklearn.kernel_approximation.RBFSampler.rst", "modules/generated/sklearn.kernel_approximation.SkewedChi2Sampler.rst", "modules/generated/sklearn.kernel_ridge.KernelRidge.rst", "modules/generated/sklearn.linear_model.ARDRegression.rst", "modules/generated/sklearn.linear_model.BayesianRidge.rst", "modules/generated/sklearn.linear_model.ElasticNet.rst", "modules/generated/sklearn.linear_model.ElasticNetCV.rst", "modules/generated/sklearn.linear_model.GammaRegressor.rst", "modules/generated/sklearn.linear_model.HuberRegressor.rst", "modules/generated/sklearn.linear_model.Lars.rst", "modules/generated/sklearn.linear_model.LarsCV.rst", "modules/generated/sklearn.linear_model.Lasso.rst", "modules/generated/sklearn.linear_model.LassoCV.rst", "modules/generated/sklearn.linear_model.LassoLars.rst", "modules/generated/sklearn.linear_model.LassoLarsCV.rst", "modules/generated/sklearn.linear_model.LassoLarsIC.rst", "modules/generated/sklearn.linear_model.LinearRegression.rst", "modules/generated/sklearn.linear_model.LogisticRegression.rst", "modules/generated/sklearn.linear_model.LogisticRegressionCV.rst", "modules/generated/sklearn.linear_model.MultiTaskElasticNet.rst", "modules/generated/sklearn.linear_model.MultiTaskElasticNetCV.rst", "modules/generated/sklearn.linear_model.MultiTaskLasso.rst", "modules/generated/sklearn.linear_model.MultiTaskLassoCV.rst", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuit.rst", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuitCV.rst", "modules/generated/sklearn.linear_model.PassiveAggressiveClassifier.rst", "modules/generated/sklearn.linear_model.PassiveAggressiveRegressor.rst", "modules/generated/sklearn.linear_model.Perceptron.rst", "modules/generated/sklearn.linear_model.PoissonRegressor.rst", "modules/generated/sklearn.linear_model.QuantileRegressor.rst", "modules/generated/sklearn.linear_model.RANSACRegressor.rst", "modules/generated/sklearn.linear_model.Ridge.rst", "modules/generated/sklearn.linear_model.RidgeCV.rst", "modules/generated/sklearn.linear_model.RidgeClassifier.rst", "modules/generated/sklearn.linear_model.RidgeClassifierCV.rst", "modules/generated/sklearn.linear_model.SGDClassifier.rst", "modules/generated/sklearn.linear_model.SGDOneClassSVM.rst", "modules/generated/sklearn.linear_model.SGDRegressor.rst", "modules/generated/sklearn.linear_model.TheilSenRegressor.rst", "modules/generated/sklearn.linear_model.TweedieRegressor.rst", "modules/generated/sklearn.linear_model.enet_path.rst", "modules/generated/sklearn.linear_model.lars_path.rst", "modules/generated/sklearn.linear_model.lars_path_gram.rst", "modules/generated/sklearn.linear_model.lasso_path.rst", "modules/generated/sklearn.linear_model.orthogonal_mp.rst", "modules/generated/sklearn.linear_model.orthogonal_mp_gram.rst", "modules/generated/sklearn.linear_model.ridge_regression.rst", "modules/generated/sklearn.manifold.Isomap.rst", "modules/generated/sklearn.manifold.LocallyLinearEmbedding.rst", "modules/generated/sklearn.manifold.MDS.rst", "modules/generated/sklearn.manifold.SpectralEmbedding.rst", "modules/generated/sklearn.manifold.TSNE.rst", "modules/generated/sklearn.manifold.locally_linear_embedding.rst", "modules/generated/sklearn.manifold.smacof.rst", "modules/generated/sklearn.manifold.spectral_embedding.rst", "modules/generated/sklearn.manifold.trustworthiness.rst", "modules/generated/sklearn.metrics.ConfusionMatrixDisplay.rst", "modules/generated/sklearn.metrics.DetCurveDisplay.rst", "modules/generated/sklearn.metrics.DistanceMetric.rst", "modules/generated/sklearn.metrics.PrecisionRecallDisplay.rst", "modules/generated/sklearn.metrics.PredictionErrorDisplay.rst", "modules/generated/sklearn.metrics.RocCurveDisplay.rst", "modules/generated/sklearn.metrics.accuracy_score.rst", "modules/generated/sklearn.metrics.adjusted_mutual_info_score.rst", "modules/generated/sklearn.metrics.adjusted_rand_score.rst", "modules/generated/sklearn.metrics.auc.rst", "modules/generated/sklearn.metrics.average_precision_score.rst", "modules/generated/sklearn.metrics.balanced_accuracy_score.rst", "modules/generated/sklearn.metrics.brier_score_loss.rst", "modules/generated/sklearn.metrics.calinski_harabasz_score.rst", "modules/generated/sklearn.metrics.check_scoring.rst", "modules/generated/sklearn.metrics.class_likelihood_ratios.rst", "modules/generated/sklearn.metrics.classification_report.rst", "modules/generated/sklearn.metrics.cluster.contingency_matrix.rst", "modules/generated/sklearn.metrics.cluster.pair_confusion_matrix.rst", "modules/generated/sklearn.metrics.cohen_kappa_score.rst", "modules/generated/sklearn.metrics.completeness_score.rst", "modules/generated/sklearn.metrics.confusion_matrix.rst", "modules/generated/sklearn.metrics.consensus_score.rst", "modules/generated/sklearn.metrics.coverage_error.rst", "modules/generated/sklearn.metrics.d2_absolute_error_score.rst", "modules/generated/sklearn.metrics.d2_pinball_score.rst", "modules/generated/sklearn.metrics.d2_tweedie_score.rst", "modules/generated/sklearn.metrics.davies_bouldin_score.rst", "modules/generated/sklearn.metrics.dcg_score.rst", "modules/generated/sklearn.metrics.det_curve.rst", "modules/generated/sklearn.metrics.explained_variance_score.rst", "modules/generated/sklearn.metrics.f1_score.rst", "modules/generated/sklearn.metrics.fbeta_score.rst", "modules/generated/sklearn.metrics.fowlkes_mallows_score.rst", "modules/generated/sklearn.metrics.get_scorer.rst", "modules/generated/sklearn.metrics.get_scorer_names.rst", "modules/generated/sklearn.metrics.hamming_loss.rst", "modules/generated/sklearn.metrics.hinge_loss.rst", "modules/generated/sklearn.metrics.homogeneity_completeness_v_measure.rst", "modules/generated/sklearn.metrics.homogeneity_score.rst", "modules/generated/sklearn.metrics.jaccard_score.rst", "modules/generated/sklearn.metrics.label_ranking_average_precision_score.rst", "modules/generated/sklearn.metrics.label_ranking_loss.rst", "modules/generated/sklearn.metrics.log_loss.rst", "modules/generated/sklearn.metrics.make_scorer.rst", "modules/generated/sklearn.metrics.matthews_corrcoef.rst", "modules/generated/sklearn.metrics.max_error.rst", "modules/generated/sklearn.metrics.mean_absolute_error.rst", "modules/generated/sklearn.metrics.mean_absolute_percentage_error.rst", "modules/generated/sklearn.metrics.mean_gamma_deviance.rst", "modules/generated/sklearn.metrics.mean_pinball_loss.rst", "modules/generated/sklearn.metrics.mean_poisson_deviance.rst", "modules/generated/sklearn.metrics.mean_squared_error.rst", "modules/generated/sklearn.metrics.mean_squared_log_error.rst", "modules/generated/sklearn.metrics.mean_tweedie_deviance.rst", "modules/generated/sklearn.metrics.median_absolute_error.rst", "modules/generated/sklearn.metrics.multilabel_confusion_matrix.rst", "modules/generated/sklearn.metrics.mutual_info_score.rst", "modules/generated/sklearn.metrics.ndcg_score.rst", "modules/generated/sklearn.metrics.normalized_mutual_info_score.rst", "modules/generated/sklearn.metrics.pairwise.additive_chi2_kernel.rst", "modules/generated/sklearn.metrics.pairwise.chi2_kernel.rst", "modules/generated/sklearn.metrics.pairwise.cosine_distances.rst", "modules/generated/sklearn.metrics.pairwise.cosine_similarity.rst", "modules/generated/sklearn.metrics.pairwise.distance_metrics.rst", "modules/generated/sklearn.metrics.pairwise.euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.haversine_distances.rst", "modules/generated/sklearn.metrics.pairwise.kernel_metrics.rst", "modules/generated/sklearn.metrics.pairwise.laplacian_kernel.rst", "modules/generated/sklearn.metrics.pairwise.linear_kernel.rst", "modules/generated/sklearn.metrics.pairwise.manhattan_distances.rst", "modules/generated/sklearn.metrics.pairwise.nan_euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_cosine_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_manhattan_distances.rst", "modules/generated/sklearn.metrics.pairwise.pairwise_kernels.rst", "modules/generated/sklearn.metrics.pairwise.polynomial_kernel.rst", "modules/generated/sklearn.metrics.pairwise.rbf_kernel.rst", "modules/generated/sklearn.metrics.pairwise.sigmoid_kernel.rst", "modules/generated/sklearn.metrics.pairwise_distances.rst", "modules/generated/sklearn.metrics.pairwise_distances_argmin.rst", "modules/generated/sklearn.metrics.pairwise_distances_argmin_min.rst", "modules/generated/sklearn.metrics.pairwise_distances_chunked.rst", "modules/generated/sklearn.metrics.precision_recall_curve.rst", "modules/generated/sklearn.metrics.precision_recall_fscore_support.rst", "modules/generated/sklearn.metrics.precision_score.rst", "modules/generated/sklearn.metrics.r2_score.rst", "modules/generated/sklearn.metrics.rand_score.rst", "modules/generated/sklearn.metrics.recall_score.rst", "modules/generated/sklearn.metrics.roc_auc_score.rst", "modules/generated/sklearn.metrics.roc_curve.rst", "modules/generated/sklearn.metrics.root_mean_squared_error.rst", "modules/generated/sklearn.metrics.root_mean_squared_log_error.rst", "modules/generated/sklearn.metrics.silhouette_samples.rst", "modules/generated/sklearn.metrics.silhouette_score.rst", "modules/generated/sklearn.metrics.top_k_accuracy_score.rst", "modules/generated/sklearn.metrics.v_measure_score.rst", "modules/generated/sklearn.metrics.zero_one_loss.rst", "modules/generated/sklearn.mixture.BayesianGaussianMixture.rst", "modules/generated/sklearn.mixture.GaussianMixture.rst", "modules/generated/sklearn.model_selection.GridSearchCV.rst", "modules/generated/sklearn.model_selection.GroupKFold.rst", "modules/generated/sklearn.model_selection.GroupShuffleSplit.rst", "modules/generated/sklearn.model_selection.HalvingGridSearchCV.rst", "modules/generated/sklearn.model_selection.HalvingRandomSearchCV.rst", "modules/generated/sklearn.model_selection.KFold.rst", "modules/generated/sklearn.model_selection.LearningCurveDisplay.rst", "modules/generated/sklearn.model_selection.LeaveOneGroupOut.rst", "modules/generated/sklearn.model_selection.LeaveOneOut.rst", "modules/generated/sklearn.model_selection.LeavePGroupsOut.rst", "modules/generated/sklearn.model_selection.LeavePOut.rst", "modules/generated/sklearn.model_selection.ParameterGrid.rst", "modules/generated/sklearn.model_selection.ParameterSampler.rst", "modules/generated/sklearn.model_selection.PredefinedSplit.rst", "modules/generated/sklearn.model_selection.RandomizedSearchCV.rst", "modules/generated/sklearn.model_selection.RepeatedKFold.rst", "modules/generated/sklearn.model_selection.RepeatedStratifiedKFold.rst", "modules/generated/sklearn.model_selection.ShuffleSplit.rst", "modules/generated/sklearn.model_selection.StratifiedGroupKFold.rst", "modules/generated/sklearn.model_selection.StratifiedKFold.rst", "modules/generated/sklearn.model_selection.StratifiedShuffleSplit.rst", "modules/generated/sklearn.model_selection.TimeSeriesSplit.rst", "modules/generated/sklearn.model_selection.ValidationCurveDisplay.rst", "modules/generated/sklearn.model_selection.check_cv.rst", "modules/generated/sklearn.model_selection.cross_val_predict.rst", "modules/generated/sklearn.model_selection.cross_val_score.rst", "modules/generated/sklearn.model_selection.cross_validate.rst", "modules/generated/sklearn.model_selection.learning_curve.rst", "modules/generated/sklearn.model_selection.permutation_test_score.rst", "modules/generated/sklearn.model_selection.train_test_split.rst", "modules/generated/sklearn.model_selection.validation_curve.rst", "modules/generated/sklearn.multiclass.OneVsOneClassifier.rst", "modules/generated/sklearn.multiclass.OneVsRestClassifier.rst", "modules/generated/sklearn.multiclass.OutputCodeClassifier.rst", "modules/generated/sklearn.multioutput.ClassifierChain.rst", "modules/generated/sklearn.multioutput.MultiOutputClassifier.rst", "modules/generated/sklearn.multioutput.MultiOutputRegressor.rst", "modules/generated/sklearn.multioutput.RegressorChain.rst", "modules/generated/sklearn.naive_bayes.BernoulliNB.rst", "modules/generated/sklearn.naive_bayes.CategoricalNB.rst", "modules/generated/sklearn.naive_bayes.ComplementNB.rst", "modules/generated/sklearn.naive_bayes.GaussianNB.rst", "modules/generated/sklearn.naive_bayes.MultinomialNB.rst", "modules/generated/sklearn.neighbors.BallTree.rst", "modules/generated/sklearn.neighbors.KDTree.rst", "modules/generated/sklearn.neighbors.KNeighborsClassifier.rst", "modules/generated/sklearn.neighbors.KNeighborsRegressor.rst", "modules/generated/sklearn.neighbors.KNeighborsTransformer.rst", "modules/generated/sklearn.neighbors.KernelDensity.rst", "modules/generated/sklearn.neighbors.LocalOutlierFactor.rst", "modules/generated/sklearn.neighbors.NearestCentroid.rst", "modules/generated/sklearn.neighbors.NearestNeighbors.rst", "modules/generated/sklearn.neighbors.NeighborhoodComponentsAnalysis.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsClassifier.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsRegressor.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsTransformer.rst", "modules/generated/sklearn.neighbors.kneighbors_graph.rst", "modules/generated/sklearn.neighbors.radius_neighbors_graph.rst", "modules/generated/sklearn.neighbors.sort_graph_by_row_values.rst", "modules/generated/sklearn.neural_network.BernoulliRBM.rst", "modules/generated/sklearn.neural_network.MLPClassifier.rst", "modules/generated/sklearn.neural_network.MLPRegressor.rst", "modules/generated/sklearn.pipeline.FeatureUnion.rst", "modules/generated/sklearn.pipeline.Pipeline.rst", "modules/generated/sklearn.pipeline.make_pipeline.rst", "modules/generated/sklearn.pipeline.make_union.rst", "modules/generated/sklearn.preprocessing.Binarizer.rst", "modules/generated/sklearn.preprocessing.FunctionTransformer.rst", "modules/generated/sklearn.preprocessing.KBinsDiscretizer.rst", "modules/generated/sklearn.preprocessing.KernelCenterer.rst", "modules/generated/sklearn.preprocessing.LabelBinarizer.rst", "modules/generated/sklearn.preprocessing.LabelEncoder.rst", "modules/generated/sklearn.preprocessing.MaxAbsScaler.rst", "modules/generated/sklearn.preprocessing.MinMaxScaler.rst", "modules/generated/sklearn.preprocessing.MultiLabelBinarizer.rst", "modules/generated/sklearn.preprocessing.Normalizer.rst", "modules/generated/sklearn.preprocessing.OneHotEncoder.rst", "modules/generated/sklearn.preprocessing.OrdinalEncoder.rst", "modules/generated/sklearn.preprocessing.PolynomialFeatures.rst", "modules/generated/sklearn.preprocessing.PowerTransformer.rst", "modules/generated/sklearn.preprocessing.QuantileTransformer.rst", "modules/generated/sklearn.preprocessing.RobustScaler.rst", "modules/generated/sklearn.preprocessing.SplineTransformer.rst", "modules/generated/sklearn.preprocessing.StandardScaler.rst", "modules/generated/sklearn.preprocessing.TargetEncoder.rst", "modules/generated/sklearn.preprocessing.add_dummy_feature.rst", "modules/generated/sklearn.preprocessing.binarize.rst", "modules/generated/sklearn.preprocessing.label_binarize.rst", "modules/generated/sklearn.preprocessing.maxabs_scale.rst", "modules/generated/sklearn.preprocessing.minmax_scale.rst", "modules/generated/sklearn.preprocessing.normalize.rst", "modules/generated/sklearn.preprocessing.power_transform.rst", "modules/generated/sklearn.preprocessing.quantile_transform.rst", "modules/generated/sklearn.preprocessing.robust_scale.rst", "modules/generated/sklearn.preprocessing.scale.rst", "modules/generated/sklearn.random_projection.GaussianRandomProjection.rst", "modules/generated/sklearn.random_projection.SparseRandomProjection.rst", "modules/generated/sklearn.random_projection.johnson_lindenstrauss_min_dim.rst", "modules/generated/sklearn.semi_supervised.LabelPropagation.rst", "modules/generated/sklearn.semi_supervised.LabelSpreading.rst", "modules/generated/sklearn.semi_supervised.SelfTrainingClassifier.rst", "modules/generated/sklearn.set_config.rst", "modules/generated/sklearn.show_versions.rst", "modules/generated/sklearn.svm.LinearSVC.rst", "modules/generated/sklearn.svm.LinearSVR.rst", "modules/generated/sklearn.svm.NuSVC.rst", "modules/generated/sklearn.svm.NuSVR.rst", "modules/generated/sklearn.svm.OneClassSVM.rst", "modules/generated/sklearn.svm.SVC.rst", "modules/generated/sklearn.svm.SVR.rst", "modules/generated/sklearn.svm.l1_min_c.rst", "modules/generated/sklearn.tree.DecisionTreeClassifier.rst", "modules/generated/sklearn.tree.DecisionTreeRegressor.rst", "modules/generated/sklearn.tree.ExtraTreeClassifier.rst", "modules/generated/sklearn.tree.ExtraTreeRegressor.rst", "modules/generated/sklearn.tree.export_graphviz.rst", "modules/generated/sklearn.tree.export_text.rst", "modules/generated/sklearn.tree.plot_tree.rst", "modules/generated/sklearn.utils.Bunch.rst", "modules/generated/sklearn.utils._safe_indexing.rst", "modules/generated/sklearn.utils.arrayfuncs.min_pos.rst", "modules/generated/sklearn.utils.as_float_array.rst", "modules/generated/sklearn.utils.assert_all_finite.rst", "modules/generated/sklearn.utils.check_X_y.rst", "modules/generated/sklearn.utils.check_array.rst", "modules/generated/sklearn.utils.check_consistent_length.rst", "modules/generated/sklearn.utils.check_random_state.rst", "modules/generated/sklearn.utils.check_scalar.rst", "modules/generated/sklearn.utils.class_weight.compute_class_weight.rst", "modules/generated/sklearn.utils.class_weight.compute_sample_weight.rst", "modules/generated/sklearn.utils.deprecated.rst", "modules/generated/sklearn.utils.discovery.all_displays.rst", "modules/generated/sklearn.utils.discovery.all_estimators.rst", "modules/generated/sklearn.utils.discovery.all_functions.rst", "modules/generated/sklearn.utils.estimator_checks.check_estimator.rst", "modules/generated/sklearn.utils.estimator_checks.parametrize_with_checks.rst", "modules/generated/sklearn.utils.estimator_html_repr.rst", "modules/generated/sklearn.utils.extmath.density.rst", "modules/generated/sklearn.utils.extmath.fast_logdet.rst", "modules/generated/sklearn.utils.extmath.randomized_range_finder.rst", "modules/generated/sklearn.utils.extmath.randomized_svd.rst", "modules/generated/sklearn.utils.extmath.safe_sparse_dot.rst", "modules/generated/sklearn.utils.extmath.weighted_mode.rst", "modules/generated/sklearn.utils.gen_batches.rst", "modules/generated/sklearn.utils.gen_even_slices.rst", "modules/generated/sklearn.utils.graph.single_source_shortest_path_length.rst", "modules/generated/sklearn.utils.indexable.rst", "modules/generated/sklearn.utils.metadata_routing.MetadataRequest.rst", "modules/generated/sklearn.utils.metadata_routing.MetadataRouter.rst", "modules/generated/sklearn.utils.metadata_routing.MethodMapping.rst", "modules/generated/sklearn.utils.metadata_routing.get_routing_for_object.rst", "modules/generated/sklearn.utils.metadata_routing.process_routing.rst", "modules/generated/sklearn.utils.metaestimators.available_if.rst", "modules/generated/sklearn.utils.multiclass.is_multilabel.rst", "modules/generated/sklearn.utils.multiclass.type_of_target.rst", "modules/generated/sklearn.utils.multiclass.unique_labels.rst", "modules/generated/sklearn.utils.murmurhash3_32.rst", "modules/generated/sklearn.utils.parallel.Parallel.rst", "modules/generated/sklearn.utils.parallel.delayed.rst", "modules/generated/sklearn.utils.parallel_backend.rst", "modules/generated/sklearn.utils.random.sample_without_replacement.rst", "modules/generated/sklearn.utils.register_parallel_backend.rst", "modules/generated/sklearn.utils.resample.rst", "modules/generated/sklearn.utils.safe_mask.rst", "modules/generated/sklearn.utils.safe_sqr.rst", "modules/generated/sklearn.utils.shuffle.rst", "modules/generated/sklearn.utils.sparsefuncs.incr_mean_variance_axis.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_column_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_csr_column_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_row_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_column.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_row.rst", "modules/generated/sklearn.utils.sparsefuncs.mean_variance_axis.rst", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1.rst", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2.rst", "modules/generated/sklearn.utils.validation.check_is_fitted.rst", "modules/generated/sklearn.utils.validation.check_memory.rst", "modules/generated/sklearn.utils.validation.check_symmetric.rst", "modules/generated/sklearn.utils.validation.column_or_1d.rst", "modules/generated/sklearn.utils.validation.has_fit_parameter.rst", "modules/grid_search.rst", "modules/impute.rst", "modules/isotonic.rst", "modules/kernel_approximation.rst", "modules/kernel_ridge.rst", "modules/lda_qda.rst", "modules/learning_curve.rst", "modules/linear_model.rst", "modules/manifold.rst", "modules/metrics.rst", "modules/mixture.rst", "modules/model_evaluation.rst", "modules/multiclass.rst", "modules/naive_bayes.rst", "modules/neighbors.rst", "modules/neural_networks_supervised.rst", "modules/neural_networks_unsupervised.rst", "modules/outlier_detection.rst", "modules/partial_dependence.rst", "modules/permutation_importance.rst", "modules/pipeline.rst", "modules/preprocessing.rst", "modules/preprocessing_targets.rst", "modules/random_projection.rst", "modules/semi_supervised.rst", "modules/sgd.rst", "modules/svm.rst", "modules/tree.rst", "modules/unsupervised_reduction.rst", "presentations.rst", "related_projects.rst", "roadmap.rst", "sg_execution_times.rst", "supervised_learning.rst", "support.rst", "testimonials/testimonials.rst", "tutorial/basic/tutorial.rst", "tutorial/index.rst", "tutorial/machine_learning_map/index.rst", "tutorial/statistical_inference/index.rst", "tutorial/statistical_inference/model_selection.rst", "tutorial/statistical_inference/putting_together.rst", "tutorial/statistical_inference/settings.rst", "tutorial/statistical_inference/supervised_learning.rst", "tutorial/statistical_inference/unsupervised_learning.rst", "tutorial/text_analytics/working_with_text_data.rst", "unsupervised_learning.rst", "user_guide.rst", "versions.rst", "visualizations.rst", "whats_new.rst", "whats_new/_contributors.rst", "whats_new/older_versions.rst", "whats_new/v0.13.rst", "whats_new/v0.14.rst", "whats_new/v0.15.rst", "whats_new/v0.16.rst", "whats_new/v0.17.rst", "whats_new/v0.18.rst", "whats_new/v0.19.rst", "whats_new/v0.20.rst", "whats_new/v0.21.rst", "whats_new/v0.22.rst", "whats_new/v0.23.rst", "whats_new/v0.24.rst", "whats_new/v1.0.rst", "whats_new/v1.1.rst", "whats_new/v1.2.rst", "whats_new/v1.3.rst", "whats_new/v1.4.rst", "whats_new/v1.5.rst"], "titles": ["About us", "&lt;no title&gt;", "&lt;no title&gt;", "Examples based on real world datasets", "Time-related feature engineering", "Image denoising using kernel PCA", "Faces recognition example using eigenfaces and SVMs", "Model Complexity Influence", "Out-of-core classification of text documents", "Outlier detection on a real data set", "Prediction Latency", "Species distribution modeling", "Visualizing the stock market structure", "Lagged features for time series forecasting", "Compressive sensing: tomography reconstruction with L1 prior (Lasso)", "Topic extraction with Non-negative Matrix Factorization and Latent Dirichlet Allocation", "Libsvm GUI", "Wikipedia principal eigenvector", "Biclustering", "Biclustering documents with the Spectral Co-clustering algorithm", "A demo of the Spectral Biclustering algorithm", "A demo of the Spectral Co-Clustering algorithm", "Calibration", "Probability calibration of classifiers", "Probability Calibration curves", "Probability Calibration for 3-class classification", "Comparison of Calibration of Classifiers", "Classification", "Plot classification probability", "Classifier comparison", "Recognizing hand-written digits", "Normal, Ledoit-Wolf and OAS Linear Discriminant Analysis for classification", "Linear and Quadratic Discriminant Analysis with covariance ellipsoid", "Clustering", "Adjustment for chance in clustering performance evaluation", "Demo of affinity propagation clustering algorithm", "Agglomerative clustering with and without structure", "Agglomerative clustering with different metrics", "Plot Hierarchical Clustering Dendrogram", "Compare BIRCH and MiniBatchKMeans", "Bisecting K-Means and Regular K-Means Performance Comparison", "Comparing different clustering algorithms on toy datasets", "K-means Clustering", "Segmenting the picture of greek coins in regions", "A demo of structured Ward hierarchical clustering on an image of coins", "Color Quantization using K-Means", "Demo of DBSCAN clustering algorithm", "Online learning of a dictionary of parts of faces", "Feature agglomeration", "Various Agglomerative Clustering on a 2D embedding of digits", "Vector Quantization Example", "Feature agglomeration vs. univariate selection", "Demo of HDBSCAN clustering algorithm", "Inductive Clustering", "Demonstration of k-means assumptions", "A demo of K-Means clustering on the handwritten digits data", "An example of K-Means++ initialization", "Selecting the number of clusters with silhouette analysis on KMeans clustering", "Empirical evaluation of the impact of k-means initialization", "Comparing different hierarchical linkage methods on toy datasets", "A demo of the mean-shift clustering algorithm", "Comparison of the K-Means and MiniBatchKMeans clustering algorithms", "Demo of OPTICS clustering algorithm", "Spectral clustering for image segmentation", "Hierarchical clustering: structured vs unstructured ward", "Pipelines and composite estimators", "Column Transformer with Heterogeneous Data Sources", "Column Transformer with Mixed Types", "Selecting dimensionality reduction with Pipeline and GridSearchCV", "Pipelining: chaining a PCA and a logistic regression", "Concatenating multiple feature extraction methods", "Effect of transforming the targets in regression model", "Covariance estimation", "Shrinkage covariance estimation: LedoitWolf vs OAS and max-likelihood", "Ledoit-Wolf vs OAS estimation", "Robust covariance estimation and Mahalanobis distances relevance", "Robust vs Empirical covariance estimate", "Sparse inverse covariance estimation", "Cross decomposition", "Compare cross decomposition methods", "Principal Component Regression vs Partial Least Squares Regression", "Dataset examples", "The Digit Dataset", "The Iris Dataset", "Plot randomly generated classification dataset", "Plot randomly generated multilabel dataset", "Decomposition", "Faces dataset decompositions", "Blind source separation using FastICA", "FastICA on 2D point clouds", "Image denoising using dictionary learning", "Incremental PCA", "Kernel PCA", "PCA example with Iris Data-set", "Model selection with Probabilistic PCA and Factor Analysis (FA)", "Comparison of LDA and PCA 2D projection of Iris dataset", "Sparse coding with a precomputed dictionary", "Factor Analysis (with rotation) to visualize patterns", "Developing Estimators", "<code class=\"docutils literal notranslate\"><span class=\"pre\">__sklearn_is_fitted__</span></code> as Developer API", "Ensemble methods", "Multi-class AdaBoosted Decision Trees", "Decision Tree Regression with AdaBoost", "Two-class AdaBoost", "Single estimator versus bagging: bias-variance decomposition", "OOB Errors for Random Forests", "Feature transformations with ensembles of trees", "Comparing Random Forests and Histogram Gradient Boosting models", "Feature importances with a forest of trees", "Pixel importances with a parallel forest of trees", "Plot the decision surfaces of ensembles of trees on the iris dataset", "Categorical Feature Support in Gradient Boosting", "Early stopping in Gradient Boosting", "Gradient Boosting Out-of-Bag estimates", "Prediction Intervals for Gradient Boosting Regression", "Gradient Boosting regression", "Gradient Boosting regularization", "Features in Histogram Gradient Boosting Trees", "IsolationForest example", "Monotonic Constraints", "Hashing feature transformation using Totally Random Trees", "Comparing random forests and the multi-output meta estimator", "Combine predictors using stacking", "Plot the decision boundaries of a VotingClassifier", "Plot class probabilities calculated by the VotingClassifier", "Plot individual and voting regression predictions", "Tutorial exercises", "Cross-validation on diabetes Dataset Exercise", "Digits Classification Exercise", "SVM Exercise", "Feature Selection", "Comparison of F-test and mutual information", "Univariate Feature Selection", "Pipeline ANOVA SVM", "Recursive feature elimination", "Recursive feature elimination with cross-validation", "Model-based and sequential feature selection", "Gaussian Process for Machine Learning", "Comparison of kernel ridge and Gaussian process regression", "Probabilistic predictions with Gaussian process classification (GPC)", "Gaussian process classification (GPC) on iris dataset", "Iso-probability lines for Gaussian Processes classification (GPC)", "Illustration of Gaussian process classification (GPC) on the XOR dataset", "Forecasting of CO2 level on Mona Loa dataset using Gaussian process regression (GPR)", "Ability of Gaussian process regression (GPR) to estimate data noise-level", "Gaussian Processes regression: basic introductory example", "Gaussian processes on discrete data structures", "Illustration of prior and posterior Gaussian process for different kernels", "Missing Value Imputation", "Imputing missing values with variants of IterativeImputer", "Imputing missing values before building an estimator", "Examples", "Inspection", "Failure of Machine Learning to infer causal effects", "Common pitfalls in the interpretation of coefficients of linear models", "Partial Dependence and Individual Conditional Expectation Plots", "Permutation Importance vs Random Forest Feature Importance (MDI)", "Permutation Importance with Multicollinear or Correlated Features", "Kernel Approximation", "Scalable learning with polynomial kernel approximation", "Generalized Linear Models", "Comparing Linear Bayesian Regressors", "Curve Fitting with Bayesian Ridge Regression", "Fitting an Elastic Net with a precomputed Gram Matrix and Weighted Samples", "HuberRegressor vs Ridge on dataset with strong outliers", "Logistic Regression 3-class Classifier", "L1-based models for Sparse Signals", "Lasso and Elastic Net", "Lasso on dense and sparse data", "Lasso path using LARS", "Lasso model selection via information criteria", "Lasso model selection: AIC-BIC / cross-validation", "Logistic function", "L1 Penalty and Sparsity in Logistic Regression", "Plot multinomial and One-vs-Rest Logistic Regression", "Regularization path of L1- Logistic Regression", "Joint feature selection with multi-task Lasso", "Non-negative least squares", "Linear Regression Example", "Sparsity Example: Fitting only features 1  and 2", "Ordinary Least Squares and Ridge Regression Variance", "Orthogonal Matching Pursuit", "Poisson regression and non-normal loss", "Polynomial and Spline interpolation", "Quantile regression", "Robust linear model estimation using RANSAC", "Ridge coefficients as a function of the L2 Regularization", "Plot Ridge coefficients as a function of the regularization", "Robust linear estimator fitting", "Comparing various online solvers", "Early stopping of Stochastic Gradient Descent", "Plot multi-class SGD on the iris dataset", "SGD: convex loss functions", "SGD: Penalties", "SGD: Maximum margin separating hyperplane", "SGD: Weighted samples", "One-Class SVM versus One-Class SVM using Stochastic Gradient Descent", "Multiclass sparse logistic regression on 20newgroups", "MNIST classification using multinomial logistic + L1", "Theil-Sen Regression", "Tweedie regression on insurance claims", "Manifold learning", "Comparison of Manifold Learning methods", "Manifold learning on handwritten digits: Locally Linear Embedding, Isomap\u2026", "Manifold Learning methods on a severed sphere", "Multi-dimensional scaling", "Swiss Roll And Swiss-Hole Reduction", "t-SNE: The effect of various perplexity values on the shape", "Miscellaneous", "Comparing anomaly detection algorithms for outlier detection on toy datasets", "Visualizations with Display Objects", "Displaying estimators and complex pipelines", "Isotonic Regression", "The Johnson-Lindenstrauss bound for embedding with random projections", "Explicit feature map approximation for RBF kernels", "Comparison of kernel ridge regression and SVR", "Metadata Routing", "Multilabel classification", "Face completion with a multi-output estimators", "Evaluation of outlier detection estimators", "Advanced Plotting With Partial Dependence", "Displaying Pipelines", "ROC Curve with Visualization API", "Introducing the <code class=\"docutils literal notranslate\"><span class=\"pre\">set_output</span></code> API", "Gaussian Mixture Models", "Concentration Prior Type Analysis of Variation Bayesian Gaussian Mixture", "Gaussian Mixture Model Ellipsoids", "GMM covariances", "GMM Initialization Methods", "Density Estimation for a Gaussian mixture", "Gaussian Mixture Model Selection", "Gaussian Mixture Model Sine Curve", "Model Selection", "Confusion matrix", "Visualizing cross-validation behavior in scikit-learn", "Plotting Cross-Validated Predictions", "Detection error tradeoff (DET) curve", "Custom refit strategy of a grid search with cross-validation", "Balance model complexity and cross-validated score", "Statistical comparison of models using grid search", "Sample pipeline for text feature extraction and evaluation", "Plotting Learning Curves and Checking Models\u2019 Scalability", "Class Likelihood Ratios to measure classification performance", "Demonstration of multi-metric evaluation on cross_val_score and GridSearchCV", "Nested versus non-nested cross-validation", "Test with permutations the significance of a classification score", "Precision-Recall", "Comparing randomized search and grid search for hyperparameter estimation", "Multiclass Receiver Operating Characteristic (ROC)", "Receiver Operating Characteristic (ROC) with cross validation", "Comparison between grid search and successive halving", "Successive Halving Iterations", "Train error vs Test error", "Underfitting vs. Overfitting", "Plotting Validation Curves", "Multiclass methods", "Overview of multiclass training meta-estimators", "Multioutput methods", "Multilabel classification using a classifier chain", "Approximate nearest neighbors in TSNE", "Nearest Neighbors", "Caching nearest neighbors", "Nearest Neighbors Classification", "Kernel Density Estimation", "Simple 1D Kernel Density Estimation", "Novelty detection with Local Outlier Factor (LOF)", "Outlier detection with Local Outlier Factor (LOF)", "Comparing Nearest Neighbors with and without Neighborhood Components Analysis", "Dimensionality Reduction with Neighborhood Components Analysis", "Neighborhood Components Analysis Illustration", "Nearest Centroid Classification", "Nearest Neighbors regression", "Kernel Density Estimate of Species Distributions", "Neural Networks", "Varying regularization in Multi-layer Perceptron", "Compare Stochastic learning strategies for MLPClassifier", "Visualization of MLP weights on MNIST", "Restricted Boltzmann Machine features for digit classification", "Preprocessing", "Compare the effect of different scalers on data with outliers", "Using KBinsDiscretizer to discretize continuous features", "Feature discretization", "Demonstrating the different strategies of KBinsDiscretizer", "Map data to a normal distribution", "Importance of Feature Scaling", "Comparing Target Encoder with Other Encoders", "Target Encoder\u2019s Internal Cross fitting", "Release Highlights", "Release Highlights for scikit-learn 0.22", "Release Highlights for scikit-learn 0.23", "Release Highlights for scikit-learn 0.24", "Release Highlights for scikit-learn 1.0", "Release Highlights for scikit-learn 1.1", "Release Highlights for scikit-learn 1.2", "Release Highlights for scikit-learn 1.3", "Release Highlights for scikit-learn 1.4", "Semi Supervised Classification", "Label Propagation digits: Demonstrating performance", "Label Propagation digits active learning", "Label Propagation learning a complex structure", "Effect of varying threshold for self-training", "Semi-supervised Classification on a Text Dataset", "Decision boundary of semi-supervised classifiers versus SVM on the Iris dataset", "Support Vector Machines", "SVM with custom kernel", "Plot different SVM classifiers in the iris dataset", "Plot the support vectors in LinearSVC", "One-class SVM with non-linear kernel (RBF)", "RBF SVM parameters", "SVM: Maximum margin separating hyperplane", "SVM: Separating hyperplane for unbalanced classes", "SVM-Anova: SVM with univariate feature selection", "Plot classification boundaries with different SVM Kernels", "SVM Margins Example", "Non-linear SVM", "Support Vector Regression (SVR) using linear and non-linear kernels", "Scaling the regularization parameter for SVCs", "SVM Tie Breaking Example", "SVM: Weighted samples", "Working with text documents", "Classification of text documents using sparse features", "Clustering text documents using k-means", "FeatureHasher and DictVectorizer Comparison", "Decision Trees", "Post pruning decision trees with cost complexity pruning", "Plot the decision surface of decision trees trained on the iris dataset", "Decision Tree Regression", "Multi-output Decision Tree Regression", "Understanding the decision tree structure", "<span class=\"section-number\">10. </span>Common pitfalls and recommended practices", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">8. </span>Computing with scikit-learn", "<span class=\"section-number\">8.2. </span>Computational Performance", "<span class=\"section-number\">8.3. </span>Parallelism, resource management, and configuration", "<span class=\"section-number\">8.1. </span>Strategies to scale computationally: bigger data", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">6. </span>Dataset transformations", "<span class=\"section-number\">7. </span>Dataset loading utilities", "<span class=\"section-number\">7.4. </span>Loading other datasets", "<span class=\"section-number\">7.2. </span>Real world datasets", "<span class=\"section-number\">7.3. </span>Generated datasets", "<span class=\"section-number\">7.1. </span>Toy datasets", "Installing the development version of scikit-learn", "Bug triaging and issue curation", "Contributing", "Cython Best Practices, Conventions and Knowledge", "Developing scikit-learn estimators", "Developer\u2019s Guide", "Maintainer / core-developer information", "Crafting a minimal reproducer for scikit-learn", "How to optimize for speed", "Developing with the Plotting API", "Developers\u2019 Tips and Tricks", "Utilities for Developers", "<span class=\"section-number\">11. </span>Dispatching", "&lt;no title&gt;", "Frequently Asked Questions", "Getting Started", "Glossary of Common Terms and API Elements", "Scikit-learn governance and decision-making", "Index", "<span class=\"section-number\">4. </span>Inspection", "Installing scikit-learn", "<span class=\"section-number\">1. </span>Metadata Routing", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">9. </span>Model persistence", "<span class=\"section-number\">3. </span>Model selection and evaluation", "<span class=\"section-number\">11.1. </span>Array API support (experimental)", "<span class=\"section-number\">2.4. </span>Biclustering", "<span class=\"section-number\">1.16. </span>Probability calibration", "API Reference", "<span class=\"section-number\">2.3. </span>Clustering", "<span class=\"section-number\">6.1. </span>Pipelines and composite estimators", "<span class=\"section-number\">2.6. </span>Covariance estimation", "<span class=\"section-number\">1.8. </span>Cross decomposition", "<span class=\"section-number\">3.1. </span>Cross-validation: evaluating estimator performance", "<span class=\"section-number\">2.5. </span>Decomposing signals in components (matrix factorization problems)", "<span class=\"section-number\">2.8. </span>Density Estimation", "<span class=\"section-number\">1.11. </span>Ensembles: Gradient boosting, random forests, bagging, voting, stacking", "<span class=\"section-number\">6.2. </span>Feature extraction", "<span class=\"section-number\">1.13. </span>Feature selection", "<span class=\"section-number\">1.7. </span>Gaussian Processes", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.dbscan", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.fastica", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.oas", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.BaseEstimator", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.BiclusterMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.ClassNamePrefixFeaturesOutMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.ClassifierMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.ClusterMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.DensityMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.MetaEstimatorMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.OneToOneFeatureMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.OutlierMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.RegressorMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.TransformerMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.clone", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.is_classifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.is_regressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.calibration</span></code>.CalibratedClassifierCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.calibration</span></code>.CalibrationDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.calibration</span></code>.calibration_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.AffinityPropagation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.AgglomerativeClustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.Birch", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.BisectingKMeans", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.DBSCAN", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.FeatureAgglomeration", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.HDBSCAN", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.KMeans", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.MeanShift", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.MiniBatchKMeans", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.OPTICS", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.SpectralBiclustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.SpectralClustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.SpectralCoclustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.affinity_propagation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.cluster_optics_dbscan", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.cluster_optics_xi", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.compute_optics_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.estimate_bandwidth", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.k_means", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.kmeans_plusplus", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.mean_shift", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.spectral_clustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.ward_tree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.compose</span></code>.ColumnTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.compose</span></code>.TransformedTargetRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.compose</span></code>.make_column_selector", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.compose</span></code>.make_column_transformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn</span></code>.config_context", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.EllipticEnvelope", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.EmpiricalCovariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.GraphicalLasso", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.GraphicalLassoCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.LedoitWolf", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.MinCovDet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.OAS", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.ShrunkCovariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.empirical_covariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.graphical_lasso", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.ledoit_wolf", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.ledoit_wolf_shrinkage", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.shrunk_covariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cross_decomposition</span></code>.CCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cross_decomposition</span></code>.PLSCanonical", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cross_decomposition</span></code>.PLSRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cross_decomposition</span></code>.PLSSVD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.clear_data_home", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.dump_svmlight_file", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_20newsgroups", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_20newsgroups_vectorized", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_california_housing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_covtype", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_kddcup99", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_lfw_pairs", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_lfw_people", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_olivetti_faces", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_openml", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_rcv1", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_species_distributions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.get_data_home", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_breast_cancer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_diabetes", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_digits", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_files", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_iris", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_linnerud", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_sample_image", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_sample_images", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_svmlight_file", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_svmlight_files", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_wine", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_biclusters", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_blobs", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_checkerboard", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_circles", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_classification", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_friedman1", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_friedman2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_friedman3", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_gaussian_quantiles", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_hastie_10_2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_low_rank_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_moons", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_multilabel_classification", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_s_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_sparse_coded_signal", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_sparse_spd_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_sparse_uncorrelated", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_spd_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_swiss_roll", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.DictionaryLearning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.FactorAnalysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.FastICA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.IncrementalPCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.KernelPCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.LatentDirichletAllocation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.MiniBatchDictionaryLearning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.MiniBatchNMF", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.MiniBatchSparsePCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.NMF", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.PCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.SparseCoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.SparsePCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.TruncatedSVD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.dict_learning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.dict_learning_online", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.non_negative_factorization", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.sparse_encode", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.discriminant_analysis</span></code>.LinearDiscriminantAnalysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.discriminant_analysis</span></code>.QuadraticDiscriminantAnalysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.dummy</span></code>.DummyClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.dummy</span></code>.DummyRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.AdaBoostClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.AdaBoostRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.BaggingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.BaggingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.ExtraTreesClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.ExtraTreesRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.GradientBoostingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.GradientBoostingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.HistGradientBoostingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.HistGradientBoostingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.IsolationForest", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.RandomForestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.RandomForestRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.RandomTreesEmbedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.StackingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.StackingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.VotingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.VotingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.ConvergenceWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.DataConversionWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.DataDimensionalityWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.EfficiencyWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.FitFailedWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.InconsistentVersionWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.NotFittedError", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.UndefinedMetricWarning", "sklearn.experimental.enable_halving_search_cv", "sklearn.experimental.enable_iterative_imputer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction</span></code>.DictVectorizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction</span></code>.FeatureHasher", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.PatchExtractor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.extract_patches_2d", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.grid_to_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.img_to_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.reconstruct_from_patches_2d", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.text</span></code>.CountVectorizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.text</span></code>.HashingVectorizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.text</span></code>.TfidfTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.text</span></code>.TfidfVectorizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.GenericUnivariateSelect", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.RFE", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.RFECV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectFdr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectFpr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectFromModel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectFwe", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectKBest", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectPercentile", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectorMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SequentialFeatureSelector", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.VarianceThreshold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.chi2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.f_classif", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.f_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.mutual_info_classif", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.mutual_info_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.r_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process</span></code>.GaussianProcessClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process</span></code>.GaussianProcessRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.CompoundKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.ConstantKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.DotProduct", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.ExpSineSquared", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Exponentiation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Hyperparameter", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Matern", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.PairwiseKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Product", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.RBF", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.RationalQuadratic", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Sum", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.WhiteKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn</span></code>.get_config", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.impute</span></code>.IterativeImputer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.impute</span></code>.KNNImputer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.impute</span></code>.MissingIndicator", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.impute</span></code>.SimpleImputer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.inspection</span></code>.DecisionBoundaryDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.inspection</span></code>.PartialDependenceDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.inspection</span></code>.partial_dependence", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.inspection</span></code>.permutation_importance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.isotonic</span></code>.IsotonicRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.isotonic</span></code>.check_increasing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.isotonic</span></code>.isotonic_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.AdditiveChi2Sampler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.Nystroem", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.PolynomialCountSketch", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.RBFSampler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.SkewedChi2Sampler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_ridge</span></code>.KernelRidge", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.ARDRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.BayesianRidge", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.ElasticNet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.ElasticNetCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.GammaRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.HuberRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.Lars", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LarsCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.Lasso", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LassoCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LassoLars", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LassoLarsCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LassoLarsIC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LinearRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LogisticRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LogisticRegressionCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.MultiTaskElasticNet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.MultiTaskElasticNetCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.MultiTaskLasso", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.MultiTaskLassoCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.OrthogonalMatchingPursuit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.OrthogonalMatchingPursuitCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.PassiveAggressiveClassifier", "sklearn.linear_model.PassiveAggressiveRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.Perceptron", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.PoissonRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.QuantileRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.RANSACRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.Ridge", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.RidgeCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.RidgeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.RidgeClassifierCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.SGDClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.SGDOneClassSVM", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.SGDRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.TheilSenRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.TweedieRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.enet_path", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.lars_path", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.lars_path_gram", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.lasso_path", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.orthogonal_mp", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.orthogonal_mp_gram", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.ridge_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.Isomap", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.LocallyLinearEmbedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.MDS", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.SpectralEmbedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.TSNE", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.locally_linear_embedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.smacof", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.spectral_embedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.trustworthiness", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.ConfusionMatrixDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.DetCurveDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.DistanceMetric", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.PrecisionRecallDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.PredictionErrorDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.RocCurveDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.accuracy_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.adjusted_mutual_info_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.adjusted_rand_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.auc", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.average_precision_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.balanced_accuracy_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.brier_score_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.calinski_harabasz_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.check_scoring", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.class_likelihood_ratios", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.classification_report", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.cluster</span></code>.contingency_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.cluster</span></code>.pair_confusion_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.cohen_kappa_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.completeness_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.confusion_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.consensus_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.coverage_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.d2_absolute_error_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.d2_pinball_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.d2_tweedie_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.davies_bouldin_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.dcg_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.det_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.explained_variance_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.f1_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.fbeta_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.fowlkes_mallows_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.get_scorer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.get_scorer_names", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.hamming_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.hinge_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.homogeneity_completeness_v_measure", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.homogeneity_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.jaccard_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.label_ranking_average_precision_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.label_ranking_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.log_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.make_scorer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.matthews_corrcoef", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.max_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_absolute_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_absolute_percentage_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_gamma_deviance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_pinball_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_poisson_deviance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_squared_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_squared_log_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_tweedie_deviance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.median_absolute_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.multilabel_confusion_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mutual_info_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.ndcg_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.normalized_mutual_info_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.additive_chi2_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.chi2_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.cosine_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.cosine_similarity", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.distance_metrics", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.euclidean_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.haversine_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.kernel_metrics", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.laplacian_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.linear_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.manhattan_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.nan_euclidean_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.paired_cosine_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.paired_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.paired_euclidean_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.paired_manhattan_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.pairwise_kernels", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.polynomial_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.rbf_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.sigmoid_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.pairwise_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.pairwise_distances_argmin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.pairwise_distances_argmin_min", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.pairwise_distances_chunked", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.precision_recall_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.precision_recall_fscore_support", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.precision_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.r2_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.rand_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.recall_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.roc_auc_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.roc_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.root_mean_squared_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.root_mean_squared_log_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.silhouette_samples", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.silhouette_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.top_k_accuracy_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.v_measure_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.zero_one_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.mixture</span></code>.BayesianGaussianMixture", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.mixture</span></code>.GaussianMixture", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.GridSearchCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.GroupKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.GroupShuffleSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.HalvingGridSearchCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.HalvingRandomSearchCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.KFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LearningCurveDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LeaveOneGroupOut", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LeaveOneOut", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LeavePGroupsOut", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LeavePOut", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.ParameterGrid", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.ParameterSampler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.PredefinedSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.RandomizedSearchCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.RepeatedKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.RepeatedStratifiedKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.ShuffleSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.StratifiedGroupKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.StratifiedKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.StratifiedShuffleSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.TimeSeriesSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.ValidationCurveDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.check_cv", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.cross_val_predict", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.cross_val_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.cross_validate", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.learning_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.permutation_test_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.train_test_split", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.validation_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multiclass</span></code>.OneVsOneClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multiclass</span></code>.OneVsRestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multiclass</span></code>.OutputCodeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multioutput</span></code>.ClassifierChain", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multioutput</span></code>.MultiOutputClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multioutput</span></code>.MultiOutputRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multioutput</span></code>.RegressorChain", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.BernoulliNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.CategoricalNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.ComplementNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.GaussianNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.MultinomialNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.BallTree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KDTree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KNeighborsClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KNeighborsRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KNeighborsTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KernelDensity", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.LocalOutlierFactor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.NearestCentroid", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.NearestNeighbors", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.NeighborhoodComponentsAnalysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.RadiusNeighborsClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.RadiusNeighborsRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.RadiusNeighborsTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.kneighbors_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.radius_neighbors_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.sort_graph_by_row_values", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neural_network</span></code>.BernoulliRBM", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neural_network</span></code>.MLPClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neural_network</span></code>.MLPRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.pipeline</span></code>.FeatureUnion", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.pipeline</span></code>.Pipeline", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.pipeline</span></code>.make_pipeline", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.pipeline</span></code>.make_union", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.Binarizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.FunctionTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.KBinsDiscretizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.KernelCenterer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.LabelBinarizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.LabelEncoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.MaxAbsScaler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.MinMaxScaler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.MultiLabelBinarizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.Normalizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.OneHotEncoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.OrdinalEncoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.PolynomialFeatures", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.PowerTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.QuantileTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.RobustScaler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.SplineTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.StandardScaler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.TargetEncoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.add_dummy_feature", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.binarize", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.label_binarize", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.maxabs_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.minmax_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.normalize", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.power_transform", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.quantile_transform", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.robust_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.random_projection</span></code>.GaussianRandomProjection", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.random_projection</span></code>.SparseRandomProjection", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.random_projection</span></code>.johnson_lindenstrauss_min_dim", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.semi_supervised</span></code>.LabelPropagation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.semi_supervised</span></code>.LabelSpreading", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.semi_supervised</span></code>.SelfTrainingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn</span></code>.set_config", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn</span></code>.show_versions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.LinearSVC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.LinearSVR", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.NuSVC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.NuSVR", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.OneClassSVM", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.SVC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.SVR", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.l1_min_c", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.DecisionTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.DecisionTreeRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.ExtraTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.ExtraTreeRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.export_graphviz", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.export_text", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.plot_tree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.Bunch", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>._safe_indexing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.arrayfuncs</span></code>.min_pos", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.as_float_array", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.assert_all_finite", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_X_y", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_array", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_consistent_length", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_random_state", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_scalar", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.class_weight</span></code>.compute_class_weight", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.class_weight</span></code>.compute_sample_weight", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.deprecated", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.discovery</span></code>.all_displays", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.discovery</span></code>.all_estimators", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.discovery</span></code>.all_functions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.estimator_checks</span></code>.check_estimator", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.estimator_checks</span></code>.parametrize_with_checks", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.estimator_html_repr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.density", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.fast_logdet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.randomized_range_finder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.randomized_svd", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.safe_sparse_dot", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.weighted_mode", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.gen_batches", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.gen_even_slices", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.graph</span></code>.single_source_shortest_path_length", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.indexable", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metadata_routing</span></code>.MetadataRequest", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metadata_routing</span></code>.MetadataRouter", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metadata_routing</span></code>.MethodMapping", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metadata_routing</span></code>.get_routing_for_object", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metadata_routing</span></code>.process_routing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metaestimators</span></code>.available_if", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.multiclass</span></code>.is_multilabel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.multiclass</span></code>.type_of_target", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.multiclass</span></code>.unique_labels", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.murmurhash3_32", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.parallel</span></code>.Parallel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.parallel</span></code>.delayed", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.parallel_backend", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.random</span></code>.sample_without_replacement", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.register_parallel_backend", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.resample", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.safe_mask", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.safe_sqr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.shuffle", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.incr_mean_variance_axis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_column_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_csr_column_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_row_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_swap_column", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_swap_row", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.mean_variance_axis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs_fast</span></code>.inplace_csr_row_normalize_l1", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs_fast</span></code>.inplace_csr_row_normalize_l2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.check_is_fitted", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.check_memory", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.check_symmetric", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.column_or_1d", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.has_fit_parameter", "<span class=\"section-number\">3.2. </span>Tuning the hyper-parameters of an estimator", "<span class=\"section-number\">6.4. </span>Imputation of missing values", "<span class=\"section-number\">1.15. </span>Isotonic regression", "<span class=\"section-number\">6.7. </span>Kernel Approximation", "<span class=\"section-number\">1.3. </span>Kernel ridge regression", "<span class=\"section-number\">1.2. </span>Linear and Quadratic Discriminant Analysis", "<span class=\"section-number\">3.4. </span>Validation curves: plotting scores to evaluate models", "<span class=\"section-number\">1.1. </span>Linear Models", "<span class=\"section-number\">2.2. </span>Manifold learning", "<span class=\"section-number\">6.8. </span>Pairwise metrics, Affinities and Kernels", "<span class=\"section-number\">2.1. </span>Gaussian mixture models", "<span class=\"section-number\">3.3. </span>Metrics and scoring: quantifying the quality of predictions", "<span class=\"section-number\">1.12. </span>Multiclass and multioutput algorithms", "<span class=\"section-number\">1.9. </span>Naive Bayes", "<span class=\"section-number\">1.6. </span>Nearest Neighbors", "<span class=\"section-number\">1.17. </span>Neural network models (supervised)", "<span class=\"section-number\">2.9. </span>Neural network models (unsupervised)", "<span class=\"section-number\">2.7. </span>Novelty and Outlier Detection", "<span class=\"section-number\">4.1. </span>Partial Dependence and Individual Conditional Expectation plots", "<span class=\"section-number\">4.2. </span>Permutation feature importance", "&lt;no title&gt;", "<span class=\"section-number\">6.3. </span>Preprocessing data", "<span class=\"section-number\">6.9. </span>Transforming the prediction target (<code class=\"docutils literal notranslate\"><span class=\"pre\">y</span></code>)", "<span class=\"section-number\">6.6. </span>Random Projection", "<span class=\"section-number\">1.14. </span>Semi-supervised learning", "<span class=\"section-number\">1.5. </span>Stochastic Gradient Descent", "<span class=\"section-number\">1.4. </span>Support Vector Machines", "<span class=\"section-number\">1.10. </span>Decision Trees", "<span class=\"section-number\">6.5. </span>Unsupervised dimensionality reduction", "External Resources, Videos and Talks", "Related Projects", "Roadmap", "Computation times", "<span class=\"section-number\">1. </span>Supervised learning", "Support", "Who is using scikit-learn?", "An introduction to machine learning with scikit-learn", "scikit-learn Tutorials", "Choosing the right estimator", "A tutorial on statistical-learning for scientific data processing", "Model selection: choosing estimators and their parameters", "Putting it all together", "Statistical learning: the setting and the estimator object in scikit-learn", "Supervised learning: predicting an output variable from high-dimensional observations", "Unsupervised learning: seeking representations of the data", "Working With Text Data", "<span class=\"section-number\">2. </span>Unsupervised learning", "User Guide", "Available documentation for scikit-learn", "<span class=\"section-number\">5. </span>Visualizations", "Release History", "&lt;no title&gt;", "Older Versions", "Version 0.13", "Version 0.14", "Version 0.15", "Version 0.16", "Version 0.17", "Version 0.18", "Version 0.19", "Version 0.20", "Version 0.21", "Version 0.22", "Version 0.23", "Version 0.24", "Version 1.0", "Version 1.1", "Version 1.2", "Version 1.3", "Version 1.4", "Version 1.5"], "terms": {"click": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "more": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "detail": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "thi": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 153, 154, 155, 156, 157, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 324, 325, 326, 327, 328, 329, 333, 334, 335, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 358, 359, 360, 361, 363, 364, 365, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 402, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 447, 448, 449, 450, 452, 454, 455, 458, 461, 462, 463, 464, 466, 467, 468, 470, 473, 474, 480, 481, 482, 483, 484, 485, 486, 488, 489, 491, 492, 493, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 538, 539, 540, 542, 544, 545, 546, 547, 548, 549, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 597, 598, 599, 600, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 664, 665, 666, 667, 668, 669, 671, 672, 674, 676, 677, 678, 679, 681, 682, 683, 685, 686, 687, 688, 690, 691, 692, 693, 694, 696, 700, 701, 702, 703, 704, 705, 706, 707, 712, 718, 719, 720, 721, 722, 723, 725, 726, 727, 729, 732, 733, 738, 742, 743, 744, 745, 746, 747, 748, 749, 751, 752, 753, 756, 757, 758, 759, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 881, 882, 886, 887, 892, 893, 895, 897, 898, 903, 905, 910, 911, 912, 913, 914, 915, 917, 920, 921, 922, 924, 925, 928, 929, 938, 943, 944, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 977, 978, 979, 982, 983, 984, 985, 986, 987, 988, 992, 993, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "wa": [0, 4, 8, 14, 16, 26, 37, 66, 67, 75, 80, 85, 119, 122, 136, 147, 154, 159, 186, 206, 219, 231, 233, 235, 237, 239, 245, 246, 256, 276, 284, 288, 289, 293, 299, 300, 320, 322, 328, 329, 333, 341, 343, 344, 346, 350, 351, 360, 364, 365, 368, 370, 371, 374, 377, 378, 382, 386, 398, 405, 406, 407, 408, 410, 411, 412, 414, 415, 419, 422, 425, 429, 433, 434, 439, 447, 448, 449, 450, 480, 488, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 514, 518, 519, 520, 521, 522, 523, 528, 529, 530, 531, 532, 533, 534, 535, 546, 547, 548, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 592, 593, 594, 595, 600, 603, 604, 605, 606, 607, 629, 641, 642, 650, 651, 653, 654, 657, 678, 693, 694, 747, 748, 751, 761, 762, 763, 766, 767, 777, 789, 791, 803, 810, 813, 815, 818, 822, 826, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 855, 858, 859, 863, 864, 897, 898, 921, 942, 943, 944, 953, 954, 957, 960, 964, 967, 970, 973, 979, 987, 988, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "start": [0, 4, 7, 10, 12, 13, 20, 25, 50, 55, 61, 64, 70, 80, 90, 106, 112, 114, 133, 136, 143, 145, 155, 159, 162, 163, 171, 182, 183, 184, 190, 200, 202, 206, 214, 216, 228, 239, 247, 259, 292, 294, 298, 320, 328, 329, 333, 334, 335, 339, 346, 347, 348, 350, 351, 352, 358, 360, 364, 371, 374, 378, 379, 383, 384, 405, 407, 415, 419, 421, 503, 575, 582, 597, 610, 618, 624, 631, 632, 633, 641, 642, 643, 655, 659, 745, 746, 753, 761, 762, 763, 766, 767, 777, 808, 809, 810, 812, 814, 822, 908, 938, 943, 950, 953, 958, 959, 968, 974, 978, 979, 987, 988, 998, 1000, 1003, 1005, 1007, 1008, 1009, 1010, 1011], "2007": [0, 35, 170, 341, 374, 383, 405, 417, 419, 425, 427, 531, 621, 656, 682, 698, 701, 722, 723, 759, 946, 950, 952, 954], "googl": [0, 17, 358, 374, 407, 972, 984, 995], "summer": [0, 4, 13, 45, 995], "codedavid": [0, 2, 34, 54, 76, 107, 117, 161, 166, 184, 219, 240, 242, 284, 320, 321, 322, 341, 374, 381, 384, 427, 497, 501, 532, 533, 587, 588, 593, 689, 761, 863, 944, 950, 958, 967, 978, 995, 998, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "cournapeau": [0, 2, 995, 998], "later": [0, 11, 50, 101, 106, 115, 138, 155, 159, 161, 219, 256, 272, 322, 329, 352, 358, 359, 364, 368, 812, 835, 836, 844, 846, 946, 964, 983, 988, 998, 1001, 1003, 1007], "year": [0, 4, 13, 125, 136, 143, 153, 154, 155, 182, 183, 200, 343, 345, 350, 358, 378, 382, 765, 770, 772, 845, 950, 954, 974, 978, 986], "matthieu": [0, 2, 995, 999, 1010], "brucher": [0, 2, 995], "work": [0, 4, 9, 13, 17, 30, 41, 42, 45, 49, 64, 73, 104, 111, 125, 136, 144, 145, 153, 154, 155, 171, 186, 199, 216, 225, 227, 237, 256, 265, 266, 285, 289, 291, 292, 294, 310, 321, 322, 329, 334, 335, 340, 341, 344, 346, 347, 348, 349, 350, 351, 352, 354, 359, 360, 361, 370, 371, 372, 374, 375, 376, 379, 381, 382, 383, 386, 387, 388, 389, 402, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 422, 425, 429, 430, 434, 435, 436, 437, 438, 439, 440, 441, 442, 444, 445, 447, 448, 449, 450, 469, 473, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 546, 547, 548, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 600, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 653, 654, 655, 656, 657, 660, 673, 706, 738, 742, 743, 744, 745, 752, 761, 762, 763, 764, 765, 766, 767, 768, 770, 771, 772, 773, 776, 777, 778, 779, 780, 781, 782, 783, 784, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 822, 823, 824, 825, 826, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 903, 907, 922, 943, 944, 946, 948, 949, 950, 951, 953, 954, 956, 957, 960, 961, 964, 967, 968, 973, 974, 978, 979, 980, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "part": [0, 5, 13, 29, 33, 58, 67, 77, 87, 90, 104, 107, 110, 114, 120, 127, 128, 129, 133, 143, 151, 161, 216, 218, 228, 234, 236, 253, 274, 281, 284, 286, 322, 335, 341, 343, 346, 348, 352, 354, 359, 360, 364, 370, 372, 374, 378, 379, 381, 382, 384, 411, 414, 458, 459, 460, 486, 496, 502, 507, 539, 549, 550, 551, 578, 590, 757, 831, 849, 851, 852, 853, 854, 855, 856, 857, 943, 944, 946, 951, 955, 972, 973, 974, 975, 976, 978, 981, 988, 990, 995, 1003, 1004, 1006, 1008, 1010], "hi": [0, 375, 954, 988], "thesi": [0, 343, 374, 381], "In": [0, 4, 5, 7, 9, 11, 12, 13, 14, 15, 24, 25, 26, 32, 34, 36, 45, 46, 50, 52, 54, 55, 57, 63, 64, 67, 68, 70, 71, 73, 75, 76, 77, 80, 82, 83, 87, 89, 92, 94, 95, 99, 101, 104, 106, 107, 108, 109, 110, 111, 112, 114, 116, 117, 118, 119, 120, 122, 125, 132, 133, 135, 136, 138, 142, 143, 145, 146, 147, 149, 150, 153, 154, 155, 156, 157, 159, 161, 162, 163, 166, 170, 171, 173, 177, 182, 183, 184, 185, 186, 187, 190, 199, 200, 209, 210, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 228, 230, 233, 236, 237, 239, 240, 241, 242, 244, 245, 248, 249, 251, 253, 254, 256, 259, 262, 265, 266, 268, 277, 279, 280, 281, 284, 285, 286, 288, 289, 290, 292, 293, 295, 299, 301, 308, 312, 316, 320, 321, 322, 324, 328, 329, 333, 334, 335, 339, 340, 341, 342, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 358, 359, 360, 361, 363, 364, 365, 368, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 391, 402, 405, 406, 407, 408, 409, 412, 413, 414, 417, 427, 428, 429, 434, 437, 440, 458, 461, 468, 473, 474, 476, 488, 499, 501, 503, 505, 506, 507, 509, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 546, 547, 553, 556, 567, 571, 574, 575, 576, 595, 597, 598, 599, 601, 608, 609, 610, 612, 613, 614, 616, 618, 620, 623, 624, 626, 628, 630, 631, 633, 634, 639, 640, 641, 644, 645, 649, 650, 651, 661, 664, 668, 677, 683, 685, 690, 692, 693, 698, 699, 702, 704, 706, 718, 720, 721, 745, 747, 749, 752, 758, 760, 761, 762, 763, 766, 767, 769, 777, 784, 785, 786, 787, 788, 789, 790, 791, 793, 794, 795, 796, 797, 800, 801, 802, 803, 804, 805, 808, 809, 810, 812, 813, 814, 816, 817, 818, 823, 831, 833, 839, 840, 844, 845, 847, 851, 852, 854, 855, 856, 857, 858, 859, 861, 862, 863, 866, 867, 868, 871, 874, 876, 881, 885, 887, 903, 943, 944, 946, 947, 948, 949, 950, 951, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 964, 965, 966, 967, 968, 969, 970, 974, 978, 979, 986, 987, 988, 992, 995, 996, 998, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "2010": [0, 44, 64, 74, 155, 244, 245, 371, 374, 376, 378, 379, 387, 440, 501, 669, 673, 684, 685, 704, 791, 823, 824, 946, 950, 954, 958, 968, 972, 995], "fabian": [0, 2, 169, 187, 203, 271, 995, 996, 997, 998, 999, 1001, 1002, 1004, 1012], "pedregosa": [0, 2, 169, 187, 203, 271, 995, 996, 997, 998, 999, 1001], "gael": [0, 1, 12, 30, 36, 37, 43, 49, 50, 63, 64, 77, 89, 171, 172, 203, 214, 227, 972, 974, 978, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "varoquaux": [0, 1, 12, 29, 30, 36, 37, 42, 43, 48, 49, 50, 63, 64, 69, 77, 82, 83, 89, 93, 165, 171, 172, 179, 180, 203, 205, 212, 214, 227, 281, 312, 313, 361, 972, 978, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "alexandr": [0, 1, 2, 23, 24, 28, 39, 44, 51, 64, 87, 89, 94, 167, 169, 170, 171, 173, 175, 176, 209, 212, 245, 252, 271, 361, 978, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012], "gramfort": [0, 1, 23, 24, 28, 39, 44, 51, 64, 87, 89, 94, 167, 169, 170, 171, 173, 175, 176, 209, 212, 245, 252, 271, 361, 978, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "vincent": [0, 2, 44, 64, 141, 145, 978, 995, 997, 999, 1000, 1002, 1005, 1010, 1011, 1012], "michel": [0, 2, 44, 64, 995, 997, 998, 1000, 1002, 1009, 1010], "inria": [0, 5, 9, 28, 34, 49, 51, 54, 71, 77, 107, 117, 144, 161, 166, 167, 169, 173, 175, 176, 187, 203, 204, 209, 212, 219, 240, 242, 245, 252, 271, 284, 316, 320, 321, 322, 623, 995], "took": [0, 4, 39, 247], "leadership": 0, "made": [0, 13, 26, 66, 76, 82, 92, 101, 107, 125, 145, 154, 155, 182, 200, 219, 231, 243, 285, 289, 308, 325, 333, 341, 343, 346, 350, 360, 361, 365, 374, 381, 382, 386, 408, 411, 412, 414, 424, 461, 468, 553, 554, 556, 595, 596, 621, 630, 650, 651, 699, 747, 763, 766, 767, 777, 781, 782, 783, 803, 806, 807, 955, 960, 970, 973, 978, 985, 987, 995, 996, 997, 998, 999, 1002, 1004, 1005, 1008, 1009], "first": [0, 4, 5, 7, 8, 11, 13, 17, 20, 24, 25, 28, 29, 30, 32, 36, 52, 53, 55, 58, 61, 62, 63, 64, 66, 67, 68, 71, 75, 79, 80, 82, 83, 84, 92, 95, 101, 102, 106, 108, 109, 110, 111, 112, 113, 115, 117, 119, 122, 123, 124, 125, 132, 133, 136, 138, 139, 140, 143, 144, 145, 146, 150, 153, 154, 155, 157, 159, 161, 163, 165, 171, 178, 179, 180, 183, 184, 190, 191, 196, 203, 206, 213, 214, 216, 217, 218, 220, 222, 223, 227, 231, 234, 239, 241, 242, 246, 248, 250, 251, 256, 258, 259, 261, 264, 268, 269, 270, 274, 276, 279, 281, 284, 285, 286, 289, 290, 298, 301, 304, 305, 308, 310, 320, 321, 322, 324, 325, 328, 329, 334, 335, 340, 341, 343, 344, 345, 348, 350, 351, 352, 354, 358, 360, 371, 372, 374, 377, 378, 379, 381, 382, 383, 384, 386, 408, 411, 412, 415, 424, 425, 429, 437, 448, 452, 453, 455, 456, 457, 459, 462, 465, 467, 469, 473, 474, 475, 493, 498, 499, 503, 506, 518, 522, 523, 524, 525, 526, 527, 529, 530, 531, 532, 547, 549, 553, 554, 555, 556, 558, 566, 575, 576, 582, 586, 589, 596, 597, 598, 599, 611, 617, 624, 631, 633, 639, 641, 653, 660, 663, 664, 665, 667, 677, 681, 700, 706, 727, 728, 746, 758, 761, 762, 766, 767, 768, 769, 770, 775, 777, 784, 785, 794, 795, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 811, 814, 815, 816, 817, 818, 819, 820, 823, 824, 825, 826, 831, 839, 843, 844, 845, 847, 848, 855, 856, 868, 871, 874, 875, 876, 877, 879, 881, 882, 886, 887, 888, 905, 907, 921, 925, 928, 940, 943, 944, 948, 949, 950, 951, 953, 954, 955, 956, 957, 961, 964, 965, 968, 969, 970, 978, 979, 985, 986, 987, 988, 995, 996, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012], "public": [0, 74, 340, 346, 348, 350, 351, 358, 359, 360, 361, 378, 381, 433, 629, 636, 650, 651, 657, 864, 950, 958, 995, 1000, 1001, 1006, 1007, 1008, 1011], "releas": [0, 15, 52, 67, 99, 105, 106, 119, 136, 149, 150, 155, 156, 159, 182, 183, 184, 211, 216, 221, 222, 223, 234, 235, 251, 256, 261, 285, 334, 344, 346, 347, 349, 354, 358, 360, 382, 408, 411, 412, 429, 432, 455, 456, 461, 466, 467, 469, 477, 480, 486, 489, 503, 506, 526, 527, 529, 530, 532, 564, 567, 593, 595, 597, 599, 605, 611, 613, 617, 623, 634, 645, 653, 666, 667, 682, 696, 712, 752, 759, 763, 764, 766, 767, 769, 777, 785, 788, 789, 792, 808, 810, 827, 831, 836, 839, 840, 841, 845, 846, 847, 863, 864, 866, 871, 874, 875, 898, 922, 970, 975, 995, 996, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "februari": [0, 376, 438, 954, 996, 1000, 1012], "1st": [0, 4, 57, 83, 146, 183, 284, 844, 845], "sinc": [0, 4, 5, 11, 13, 24, 32, 34, 46, 50, 52, 63, 66, 67, 68, 88, 111, 127, 133, 136, 138, 143, 154, 155, 157, 159, 164, 182, 184, 186, 199, 210, 214, 215, 216, 227, 230, 235, 239, 241, 242, 248, 249, 256, 258, 259, 261, 262, 285, 291, 292, 302, 305, 308, 316, 320, 321, 322, 329, 334, 341, 344, 346, 347, 348, 350, 351, 354, 358, 359, 360, 364, 365, 372, 374, 375, 376, 377, 378, 379, 381, 382, 384, 391, 402, 406, 410, 411, 412, 414, 415, 418, 421, 434, 443, 461, 491, 492, 501, 502, 503, 504, 505, 511, 512, 514, 515, 516, 517, 518, 520, 522, 524, 526, 527, 528, 529, 532, 534, 553, 554, 556, 575, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 597, 598, 603, 609, 610, 616, 620, 623, 624, 631, 633, 639, 640, 641, 642, 644, 657, 672, 674, 699, 705, 706, 714, 715, 746, 753, 766, 767, 769, 787, 788, 789, 794, 795, 796, 797, 801, 802, 803, 804, 805, 808, 813, 816, 823, 824, 831, 856, 857, 861, 862, 866, 868, 871, 874, 876, 903, 911, 943, 946, 947, 948, 950, 951, 955, 956, 957, 958, 960, 962, 964, 968, 969, 970, 978, 979, 988, 995, 996, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "sever": [0, 4, 9, 12, 13, 24, 26, 29, 32, 34, 52, 53, 54, 58, 70, 84, 104, 117, 120, 122, 125, 133, 136, 138, 143, 144, 151, 154, 159, 166, 171, 182, 186, 201, 202, 205, 206, 207, 213, 227, 234, 239, 244, 259, 261, 275, 279, 291, 316, 320, 321, 333, 340, 341, 343, 346, 348, 351, 358, 360, 371, 373, 374, 375, 378, 380, 381, 382, 384, 412, 414, 429, 452, 464, 473, 474, 503, 520, 521, 524, 525, 528, 529, 530, 535, 553, 554, 556, 575, 610, 611, 617, 653, 654, 655, 656, 657, 658, 761, 762, 763, 766, 767, 777, 794, 795, 801, 802, 803, 804, 805, 825, 826, 833, 850, 874, 875, 876, 877, 889, 943, 946, 951, 954, 955, 957, 962, 964, 968, 970, 971, 972, 973, 975, 977, 978, 979, 986, 987, 988, 995, 996, 997, 998, 999, 1000, 1002, 1003, 1004, 1008, 1011, 1012], "have": [0, 4, 5, 7, 8, 9, 11, 12, 13, 14, 23, 24, 25, 26, 34, 36, 39, 40, 43, 44, 47, 50, 52, 54, 57, 59, 61, 62, 66, 67, 73, 75, 80, 82, 84, 85, 92, 93, 101, 108, 110, 111, 112, 114, 117, 132, 133, 136, 138, 139, 143, 144, 145, 150, 153, 154, 155, 156, 157, 159, 161, 166, 182, 183, 184, 186, 200, 206, 209, 211, 216, 217, 219, 220, 226, 227, 228, 230, 233, 239, 240, 242, 245, 246, 253, 256, 259, 261, 262, 265, 266, 279, 284, 285, 286, 288, 290, 291, 295, 298, 299, 300, 305, 311, 312, 313, 316, 320, 321, 328, 329, 333, 334, 335, 340, 341, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 358, 359, 360, 361, 364, 365, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 429, 430, 434, 435, 436, 437, 438, 439, 440, 441, 447, 448, 449, 450, 452, 457, 459, 460, 461, 473, 474, 479, 488, 489, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 546, 547, 548, 549, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 597, 600, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 650, 652, 653, 654, 655, 656, 657, 664, 669, 670, 677, 680, 685, 690, 695, 700, 706, 720, 721, 722, 723, 746, 749, 750, 756, 759, 761, 762, 763, 766, 767, 768, 769, 774, 777, 781, 785, 787, 790, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 822, 823, 824, 826, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 851, 852, 854, 855, 856, 857, 858, 859, 861, 862, 863, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 886, 888, 890, 892, 903, 929, 943, 944, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 960, 961, 964, 966, 967, 968, 969, 970, 971, 973, 974, 977, 978, 979, 980, 983, 984, 986, 987, 988, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "appear": [0, 8, 43, 45, 104, 154, 157, 234, 236, 237, 265, 266, 274, 276, 280, 298, 312, 320, 321, 322, 341, 344, 346, 351, 360, 376, 379, 453, 454, 520, 532, 533, 544, 575, 592, 593, 595, 662, 665, 667, 677, 681, 683, 746, 753, 764, 781, 801, 802, 803, 804, 805, 868, 871, 905, 950, 956, 960, 995, 1003, 1007, 1008], "follow": [0, 4, 7, 19, 25, 26, 30, 34, 42, 51, 52, 54, 60, 64, 67, 68, 85, 87, 96, 101, 104, 114, 119, 131, 143, 149, 153, 154, 155, 156, 157, 161, 163, 166, 170, 171, 180, 182, 183, 197, 200, 210, 216, 217, 219, 231, 239, 246, 248, 249, 256, 279, 285, 286, 288, 289, 291, 292, 293, 305, 316, 320, 321, 322, 324, 328, 329, 333, 334, 340, 341, 343, 344, 345, 346, 348, 350, 351, 352, 353, 354, 355, 358, 359, 360, 361, 364, 365, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 389, 391, 393, 394, 395, 396, 397, 398, 406, 408, 410, 411, 412, 413, 414, 418, 426, 428, 429, 430, 433, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 480, 499, 503, 505, 506, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 535, 546, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 592, 593, 594, 595, 596, 598, 599, 611, 617, 623, 624, 635, 636, 645, 657, 659, 664, 670, 674, 678, 683, 752, 782, 803, 808, 809, 810, 812, 814, 816, 817, 818, 825, 829, 830, 831, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 855, 864, 866, 867, 871, 874, 875, 876, 877, 881, 882, 902, 922, 943, 944, 945, 946, 947, 948, 949, 950, 952, 953, 954, 956, 957, 958, 959, 960, 961, 962, 964, 965, 966, 967, 968, 969, 970, 972, 973, 974, 977, 979, 988, 992, 995, 998, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "3": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 26, 28, 29, 30, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 69, 70, 71, 73, 75, 76, 77, 79, 80, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 127, 131, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 154, 155, 156, 159, 160, 161, 162, 163, 164, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 196, 197, 198, 199, 200, 202, 203, 204, 205, 207, 209, 213, 214, 215, 216, 217, 219, 221, 223, 225, 226, 227, 229, 230, 231, 234, 237, 238, 239, 240, 241, 242, 243, 245, 247, 248, 249, 250, 251, 252, 256, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 295, 297, 298, 300, 301, 302, 304, 305, 307, 308, 311, 312, 313, 314, 315, 316, 317, 320, 321, 322, 325, 326, 328, 329, 334, 335, 340, 341, 343, 344, 346, 347, 348, 351, 352, 358, 359, 360, 364, 365, 366, 367, 371, 372, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 395, 396, 397, 398, 399, 402, 404, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 446, 447, 448, 449, 450, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 466, 467, 469, 470, 471, 472, 475, 477, 480, 481, 482, 483, 484, 486, 488, 490, 491, 493, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 542, 546, 547, 548, 549, 552, 553, 555, 556, 558, 559, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 582, 583, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 652, 653, 654, 655, 657, 658, 659, 661, 664, 665, 667, 668, 669, 670, 672, 674, 675, 678, 681, 682, 686, 687, 688, 689, 690, 692, 693, 694, 695, 697, 698, 699, 700, 701, 705, 707, 708, 709, 710, 712, 714, 715, 716, 717, 718, 720, 721, 732, 733, 739, 745, 746, 747, 748, 749, 750, 751, 752, 754, 755, 756, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 829, 830, 831, 832, 833, 837, 838, 839, 840, 841, 842, 844, 845, 846, 847, 854, 858, 859, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 886, 887, 888, 892, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 917, 918, 920, 921, 922, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 943, 944, 947, 948, 949, 950, 951, 952, 954, 955, 956, 957, 960, 961, 964, 965, 967, 969, 970, 972, 973, 975, 979, 980, 983, 984, 986, 987, 991, 993, 995, 996, 997, 998, 1000, 1001, 1002, 1005, 1007, 1008, 1010, 1012, 1013], "month": [0, 4, 13, 143, 155, 285, 341, 346, 350, 361, 995], "cycl": [0, 4, 39, 41, 47, 59, 87, 167, 226, 231, 246, 248, 291, 292, 346, 350, 365, 373, 379, 544, 545, 592, 766, 767, 882, 943, 944, 1003, 1004, 1005, 1007, 1008, 1009, 1010], "thrive": [0, 346], "intern": [0, 4, 25, 67, 77, 92, 107, 112, 115, 117, 127, 136, 139, 149, 151, 164, 182, 259, 261, 278, 285, 299, 322, 329, 334, 341, 343, 348, 352, 355, 358, 360, 365, 368, 370, 371, 374, 378, 379, 381, 382, 383, 384, 385, 402, 404, 409, 430, 433, 476, 499, 500, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 558, 559, 575, 576, 603, 605, 608, 611, 617, 633, 637, 641, 643, 661, 673, 695, 698, 722, 723, 747, 792, 806, 807, 822, 823, 824, 826, 827, 831, 845, 847, 861, 862, 864, 866, 867, 868, 871, 874, 875, 876, 877, 922, 950, 951, 952, 954, 957, 960, 964, 966, 969, 970, 975, 978, 995, 998, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "ha": [0, 4, 5, 8, 11, 12, 13, 16, 24, 28, 32, 34, 41, 47, 52, 53, 54, 57, 70, 75, 76, 80, 87, 99, 106, 110, 112, 114, 117, 119, 124, 135, 138, 143, 144, 145, 150, 154, 155, 156, 157, 159, 175, 179, 182, 183, 184, 188, 199, 200, 202, 209, 213, 215, 216, 219, 220, 223, 225, 226, 228, 230, 231, 234, 237, 238, 239, 242, 243, 245, 250, 251, 258, 262, 265, 266, 267, 269, 276, 279, 280, 282, 284, 288, 289, 290, 291, 292, 294, 297, 300, 308, 312, 313, 315, 320, 328, 329, 333, 334, 335, 340, 341, 343, 344, 345, 346, 347, 348, 350, 351, 354, 355, 358, 359, 360, 361, 364, 368, 371, 372, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 386, 399, 402, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 426, 427, 428, 429, 430, 434, 435, 436, 437, 438, 439, 440, 441, 443, 447, 448, 449, 450, 458, 459, 462, 463, 473, 474, 481, 491, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 546, 547, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 575, 576, 584, 592, 593, 594, 595, 597, 598, 599, 600, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 650, 652, 653, 654, 655, 656, 657, 660, 676, 678, 685, 705, 727, 738, 742, 743, 744, 757, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 772, 777, 781, 784, 785, 790, 791, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 822, 823, 824, 826, 829, 830, 831, 832, 833, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 858, 859, 861, 862, 863, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 881, 885, 886, 887, 905, 923, 939, 943, 944, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 964, 966, 967, 968, 969, 970, 974, 977, 978, 979, 983, 986, 988, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "been": [0, 4, 9, 16, 25, 41, 50, 57, 76, 92, 99, 101, 136, 138, 143, 145, 154, 206, 209, 211, 216, 217, 237, 239, 245, 288, 289, 290, 291, 292, 294, 295, 299, 320, 329, 334, 340, 341, 343, 344, 345, 346, 348, 350, 352, 354, 355, 358, 359, 360, 361, 365, 368, 371, 372, 374, 376, 378, 379, 381, 384, 399, 402, 434, 436, 437, 439, 443, 452, 488, 499, 501, 514, 515, 532, 533, 546, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 576, 598, 599, 623, 624, 631, 632, 633, 638, 640, 641, 642, 643, 685, 742, 743, 744, 757, 763, 766, 767, 769, 777, 785, 790, 791, 815, 863, 866, 944, 946, 947, 949, 950, 951, 954, 955, 957, 960, 964, 966, 968, 969, 974, 978, 979, 988, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "lead": [0, 7, 24, 26, 29, 34, 49, 52, 58, 68, 107, 111, 112, 114, 135, 136, 154, 155, 156, 161, 166, 171, 173, 182, 186, 214, 216, 219, 239, 240, 242, 246, 264, 265, 276, 279, 281, 284, 285, 290, 308, 316, 321, 324, 329, 333, 334, 340, 345, 354, 355, 359, 360, 368, 371, 372, 374, 376, 378, 379, 380, 381, 383, 417, 427, 430, 433, 461, 480, 492, 500, 503, 504, 505, 508, 512, 516, 522, 523, 524, 525, 528, 529, 530, 531, 571, 595, 611, 612, 615, 617, 618, 619, 625, 626, 627, 628, 644, 656, 660, 710, 761, 766, 767, 794, 806, 807, 811, 830, 837, 847, 858, 859, 864, 866, 874, 875, 876, 877, 943, 948, 950, 951, 953, 954, 955, 957, 958, 960, 962, 964, 967, 968, 970, 978, 979, 998, 1000, 1002, 1003, 1004, 1005, 1007, 1008, 1010, 1011, 1012], "The": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 25, 26, 28, 29, 30, 32, 34, 36, 37, 41, 42, 43, 44, 45, 47, 48, 49, 50, 52, 54, 55, 57, 58, 59, 60, 62, 64, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 81, 84, 85, 87, 90, 91, 92, 93, 94, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 125, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 155, 156, 157, 159, 161, 163, 164, 165, 166, 167, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 183, 184, 185, 186, 188, 190, 191, 199, 200, 201, 204, 205, 208, 209, 210, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 227, 228, 230, 231, 233, 234, 236, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 258, 259, 261, 263, 264, 265, 266, 267, 268, 269, 272, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 305, 306, 308, 312, 313, 314, 316, 317, 318, 320, 321, 322, 324, 326, 327, 328, 329, 333, 334, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 358, 359, 360, 361, 363, 364, 365, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 390, 396, 397, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 680, 681, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 699, 702, 703, 704, 705, 706, 707, 708, 709, 710, 712, 716, 717, 718, 719, 720, 721, 722, 723, 726, 728, 729, 730, 731, 734, 735, 738, 739, 740, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 893, 897, 898, 899, 900, 901, 902, 903, 905, 906, 910, 911, 914, 917, 919, 920, 921, 922, 923, 924, 925, 928, 936, 937, 938, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 955, 956, 957, 958, 959, 960, 961, 962, 964, 965, 967, 968, 969, 970, 971, 972, 973, 974, 975, 977, 978, 979, 980, 981, 983, 984, 985, 988, 990, 992, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "decis": [0, 4, 16, 24, 26, 29, 32, 38, 53, 55, 57, 91, 100, 103, 104, 105, 106, 112, 120, 121, 124, 125, 129, 136, 140, 142, 146, 154, 164, 165, 174, 191, 192, 195, 209, 210, 212, 217, 220, 242, 245, 256, 267, 270, 274, 279, 280, 281, 284, 296, 301, 304, 305, 306, 307, 308, 309, 310, 314, 317, 318, 320, 333, 342, 343, 346, 360, 372, 374, 381, 402, 434, 465, 469, 484, 501, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 534, 558, 559, 596, 597, 598, 609, 610, 611, 612, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 636, 637, 638, 639, 640, 641, 642, 663, 665, 667, 668, 672, 685, 690, 691, 699, 703, 704, 706, 720, 746, 752, 753, 758, 763, 766, 767, 777, 792, 794, 795, 797, 808, 862, 863, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 878, 879, 880, 948, 954, 955, 956, 957, 958, 960, 961, 962, 967, 968, 969, 973, 974, 975, 976, 978, 986, 990, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1008, 1009, 1011, 1012], "make": [0, 4, 7, 8, 11, 13, 15, 17, 20, 21, 24, 25, 26, 36, 37, 40, 41, 53, 58, 59, 64, 69, 92, 101, 107, 111, 114, 117, 120, 133, 136, 138, 143, 146, 153, 154, 155, 156, 161, 166, 168, 171, 174, 175, 176, 178, 182, 183, 184, 186, 188, 200, 203, 211, 213, 215, 216, 217, 219, 225, 227, 230, 231, 234, 239, 241, 242, 248, 249, 250, 258, 268, 276, 279, 280, 285, 292, 294, 308, 318, 320, 321, 322, 329, 333, 334, 335, 340, 341, 344, 345, 347, 348, 349, 351, 352, 354, 358, 360, 364, 365, 368, 371, 372, 374, 375, 376, 378, 379, 381, 382, 383, 386, 405, 406, 407, 408, 410, 412, 414, 416, 417, 418, 423, 424, 425, 427, 453, 468, 479, 480, 487, 488, 492, 497, 499, 506, 516, 517, 520, 521, 526, 527, 548, 549, 572, 573, 596, 614, 620, 621, 636, 656, 660, 694, 701, 706, 732, 733, 745, 761, 762, 763, 765, 768, 774, 778, 779, 782, 783, 788, 789, 796, 797, 800, 833, 842, 845, 846, 850, 854, 856, 857, 858, 859, 872, 880, 886, 887, 897, 903, 909, 915, 940, 943, 944, 946, 948, 950, 951, 953, 954, 955, 956, 957, 959, 960, 961, 962, 964, 967, 968, 969, 970, 972, 973, 974, 978, 979, 984, 986, 988, 992, 995, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "process": [0, 4, 5, 16, 19, 25, 28, 29, 32, 42, 43, 44, 45, 47, 54, 63, 66, 68, 70, 74, 76, 84, 88, 89, 91, 101, 110, 112, 114, 119, 120, 127, 128, 129, 153, 161, 164, 184, 186, 192, 194, 195, 215, 216, 217, 219, 225, 226, 231, 239, 241, 242, 251, 256, 274, 279, 282, 290, 294, 298, 302, 312, 314, 321, 322, 324, 333, 334, 335, 341, 345, 346, 348, 350, 352, 355, 358, 359, 360, 368, 374, 375, 376, 378, 379, 380, 381, 382, 383, 387, 413, 414, 440, 461, 469, 488, 499, 500, 501, 502, 503, 526, 527, 528, 553, 554, 556, 575, 576, 578, 579, 580, 582, 583, 584, 587, 588, 590, 592, 597, 598, 604, 608, 629, 637, 650, 651, 668, 687, 705, 745, 761, 763, 766, 767, 777, 787, 788, 789, 798, 799, 815, 829, 833, 835, 836, 837, 846, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 920, 922, 943, 946, 950, 954, 957, 964, 966, 968, 970, 972, 973, 974, 975, 976, 978, 979, 980, 987, 988, 990, 995, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1011, 1012], "structur": [0, 3, 9, 13, 14, 15, 17, 20, 21, 33, 37, 38, 40, 41, 43, 49, 50, 51, 52, 53, 59, 63, 77, 97, 118, 137, 151, 202, 203, 206, 211, 216, 231, 234, 245, 264, 284, 289, 292, 296, 308, 312, 323, 324, 325, 333, 341, 343, 346, 348, 351, 358, 360, 361, 364, 371, 374, 376, 377, 378, 379, 381, 382, 383, 384, 406, 407, 410, 411, 415, 416, 417, 418, 419, 422, 427, 428, 437, 461, 468, 469, 473, 476, 478, 479, 486, 495, 500, 506, 509, 528, 575, 576, 577, 581, 582, 583, 654, 661, 674, 678, 792, 814, 819, 846, 858, 859, 862, 874, 875, 876, 877, 880, 902, 903, 925, 928, 951, 953, 954, 957, 959, 960, 964, 967, 970, 973, 974, 975, 982, 987, 988, 995, 996, 998, 999, 1001, 1005], "i": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 32, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 70, 71, 73, 74, 75, 76, 77, 79, 80, 82, 83, 85, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 131, 132, 133, 135, 136, 138, 139, 140, 142, 143, 144, 145, 146, 147, 149, 150, 151, 153, 154, 155, 156, 157, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 258, 259, 261, 262, 263, 264, 265, 266, 268, 269, 271, 272, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 306, 307, 308, 312, 313, 314, 316, 317, 318, 320, 321, 322, 324, 325, 326, 327, 329, 333, 334, 335, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 359, 360, 361, 363, 364, 365, 368, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 473, 474, 475, 476, 477, 479, 480, 481, 482, 483, 484, 485, 486, 488, 489, 491, 492, 493, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 538, 540, 541, 542, 543, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 730, 731, 732, 733, 734, 735, 737, 738, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 884, 885, 886, 887, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 901, 902, 903, 905, 908, 909, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 923, 924, 925, 926, 928, 929, 935, 938, 939, 940, 941, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 977, 979, 981, 982, 983, 984, 985, 986, 987, 988, 991, 992, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "laid": [0, 153, 346], "out": [0, 3, 4, 7, 9, 10, 12, 13, 15, 17, 25, 28, 37, 47, 52, 66, 67, 94, 100, 105, 107, 108, 115, 116, 129, 151, 153, 156, 166, 182, 184, 186, 190, 200, 219, 225, 227, 237, 239, 242, 247, 251, 256, 258, 284, 285, 291, 300, 302, 304, 305, 308, 316, 320, 332, 341, 343, 344, 346, 348, 349, 350, 352, 358, 360, 374, 377, 379, 381, 382, 384, 390, 400, 401, 407, 408, 410, 411, 412, 414, 437, 447, 448, 449, 450, 464, 480, 481, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 512, 514, 520, 521, 522, 523, 524, 525, 526, 527, 529, 530, 553, 554, 556, 569, 572, 573, 599, 604, 605, 606, 607, 616, 620, 631, 633, 638, 640, 641, 653, 654, 657, 666, 691, 705, 706, 763, 765, 766, 767, 768, 770, 771, 772, 773, 777, 792, 801, 802, 803, 804, 805, 810, 815, 818, 822, 823, 824, 832, 836, 843, 855, 858, 859, 881, 916, 918, 923, 944, 948, 949, 953, 954, 955, 957, 962, 964, 974, 975, 976, 978, 983, 986, 988, 990, 995, 997, 999, 1001, 1003, 1004, 1007, 1008, 1011], "peopl": [0, 6, 66, 154, 218, 242, 320, 321, 334, 335, 341, 343, 345, 346, 350, 361, 380, 458, 459, 606, 803, 973, 984], "ar": [0, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 30, 32, 34, 36, 37, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 59, 61, 63, 66, 67, 68, 70, 71, 73, 74, 75, 76, 77, 79, 80, 83, 85, 87, 89, 92, 94, 97, 99, 101, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 120, 121, 122, 123, 124, 132, 133, 135, 136, 138, 142, 143, 144, 145, 146, 147, 149, 150, 153, 154, 155, 156, 157, 159, 161, 162, 163, 164, 165, 166, 170, 171, 173, 174, 175, 176, 177, 178, 179, 182, 183, 184, 186, 191, 193, 200, 202, 203, 204, 205, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 223, 226, 227, 228, 230, 233, 234, 236, 237, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 258, 259, 261, 264, 265, 269, 272, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 292, 293, 294, 295, 297, 299, 300, 301, 302, 306, 308, 310, 312, 316, 317, 320, 321, 322, 324, 328, 329, 333, 334, 335, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 359, 360, 361, 364, 365, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 390, 395, 398, 399, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 447, 448, 449, 450, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 473, 474, 475, 477, 480, 481, 482, 483, 484, 485, 488, 489, 491, 493, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 669, 670, 672, 674, 676, 677, 678, 680, 681, 682, 683, 685, 686, 687, 689, 690, 691, 692, 693, 694, 695, 698, 699, 700, 701, 702, 704, 705, 706, 707, 709, 710, 712, 714, 715, 717, 718, 720, 721, 725, 726, 727, 729, 731, 732, 733, 737, 738, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 761, 762, 763, 764, 765, 766, 767, 769, 770, 772, 775, 777, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 886, 887, 890, 891, 892, 895, 897, 902, 903, 904, 907, 908, 910, 911, 914, 917, 918, 920, 922, 925, 928, 929, 933, 934, 935, 938, 940, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 977, 978, 979, 980, 981, 982, 983, 985, 986, 987, 988, 993, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "current": [0, 8, 43, 101, 143, 154, 200, 279, 288, 334, 335, 341, 344, 346, 347, 348, 351, 355, 358, 360, 361, 370, 371, 373, 374, 378, 381, 382, 383, 384, 405, 411, 415, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 497, 500, 506, 518, 519, 522, 523, 524, 525, 527, 529, 530, 531, 541, 556, 558, 575, 582, 591, 592, 611, 623, 632, 636, 640, 641, 642, 643, 752, 761, 762, 811, 815, 823, 824, 842, 854, 864, 874, 875, 876, 877, 880, 921, 929, 943, 948, 950, 954, 957, 958, 964, 974, 977, 986, 1003, 1007, 1009, 1010, 1011], "": [0, 4, 5, 6, 7, 8, 10, 11, 12, 13, 16, 17, 19, 20, 23, 26, 32, 35, 36, 37, 39, 40, 41, 43, 44, 45, 49, 50, 52, 54, 55, 56, 57, 58, 59, 61, 62, 64, 66, 67, 73, 74, 77, 79, 83, 84, 85, 87, 88, 89, 92, 95, 96, 97, 99, 101, 103, 107, 108, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 123, 129, 131, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 150, 151, 154, 155, 157, 159, 162, 163, 164, 166, 168, 170, 171, 172, 173, 174, 180, 182, 184, 186, 188, 189, 191, 194, 195, 196, 197, 198, 199, 202, 203, 204, 205, 206, 207, 209, 210, 213, 215, 216, 217, 219, 225, 227, 228, 230, 234, 239, 240, 241, 242, 243, 246, 250, 252, 253, 259, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 277, 278, 279, 282, 285, 288, 290, 291, 292, 293, 294, 295, 298, 299, 305, 306, 307, 308, 309, 312, 313, 314, 315, 318, 320, 321, 322, 325, 326, 327, 328, 329, 333, 334, 335, 339, 340, 341, 343, 344, 345, 346, 347, 348, 350, 352, 353, 354, 355, 360, 361, 363, 364, 365, 368, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 382, 384, 386, 388, 395, 399, 402, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 422, 424, 425, 428, 429, 430, 434, 435, 436, 437, 438, 439, 440, 441, 447, 448, 449, 450, 454, 456, 461, 463, 465, 469, 475, 476, 484, 490, 491, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 537, 546, 547, 548, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 571, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 599, 600, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 650, 652, 653, 654, 655, 656, 657, 658, 665, 666, 667, 673, 676, 681, 685, 699, 705, 722, 723, 743, 744, 761, 762, 763, 765, 766, 767, 772, 777, 781, 782, 787, 788, 789, 791, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 858, 859, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 881, 884, 886, 887, 890, 903, 905, 911, 912, 914, 938, 942, 943, 945, 946, 948, 950, 951, 952, 955, 956, 957, 958, 959, 961, 962, 964, 966, 967, 968, 969, 970, 973, 974, 975, 978, 979, 983, 984, 986, 987, 988, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "mainten": [0, 346, 354, 358, 364, 367, 950, 974, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "j\u00e9r\u00e9mie": [0, 1, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "du": [0, 1, 2, 995, 996, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "boisberrang": [0, 1, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "jori": [0, 1, 1002, 1003, 1004, 1007, 1008], "van": [0, 1, 340, 376, 434, 439, 499, 592, 657, 661, 944, 951, 954, 960, 978, 996, 997, 998, 999, 1002, 1003, 1004, 1006, 1007, 1008, 1010, 1011], "den": [0, 1, 996, 997, 1002, 1003, 1004, 1007, 1008], "bossch": [0, 1, 1002, 1003, 1004, 1008], "lo\u00efc": [0, 1, 1003, 1006, 1008, 1009, 1010, 1011, 1012, 1013], "est\u00e8v": [0, 1, 1003, 1006, 1008, 1009, 1010, 1011, 1012, 1013], "thoma": [0, 1, 94, 209, 279, 334, 336, 361, 862, 950, 964, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "j": [0, 1, 11, 17, 34, 35, 37, 40, 58, 66, 74, 75, 76, 101, 104, 105, 116, 139, 150, 155, 194, 205, 218, 225, 238, 239, 244, 250, 263, 269, 272, 283, 293, 328, 334, 340, 341, 343, 350, 352, 358, 371, 372, 374, 376, 378, 379, 381, 382, 384, 385, 402, 405, 409, 411, 418, 419, 434, 439, 463, 478, 481, 482, 483, 485, 493, 496, 499, 501, 502, 503, 505, 506, 512, 518, 524, 525, 558, 559, 597, 598, 602, 609, 610, 613, 614, 631, 632, 634, 645, 653, 654, 655, 657, 658, 659, 661, 670, 673, 675, 679, 681, 683, 686, 687, 688, 690, 719, 720, 722, 723, 738, 742, 752, 753, 756, 757, 795, 796, 803, 808, 809, 810, 812, 814, 815, 816, 817, 818, 819, 820, 837, 846, 847, 874, 875, 943, 944, 948, 950, 951, 952, 954, 955, 956, 957, 958, 960, 961, 962, 964, 966, 968, 969, 970, 988, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "fan": [0, 1, 334, 361, 969, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "olivi": [0, 1, 15, 17, 34, 45, 58, 171, 182, 200, 203, 240, 242, 320, 321, 322, 361, 862, 967, 972, 974, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "grisel": [0, 1, 15, 17, 34, 45, 58, 171, 182, 200, 203, 240, 242, 320, 321, 322, 361, 972, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "yaroslav": [0, 1, 995, 996, 997, 998, 1001, 1002, 1003, 1004, 1011, 1012], "halchenko": [0, 1, 995, 996, 997, 998, 1001, 1002, 1003, 1004, 1011], "tim": [0, 1, 106, 121, 995, 1000, 1001, 1004, 1005, 1006, 1008, 1010, 1011, 1012], "head": [0, 1, 13, 25, 67, 106, 121, 143, 154, 170, 171, 200, 223, 230, 285, 288, 293, 346, 354, 379, 978, 1000, 1001, 1010, 1011, 1012], "nicola": [0, 1, 136, 283, 623, 950, 967, 995, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "hug": [0, 1, 136, 283, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "adrin": [0, 1, 62, 317, 361, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "jalali": [0, 1, 62, 317, 361, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "julien": [0, 1, 623, 950, 978, 995, 998, 1002, 1003, 1007, 1008, 1009, 1010, 1011, 1012], "jerphanion": [0, 1, 1007, 1008, 1009, 1010, 1011, 1012], "guillaum": [0, 1, 5, 7, 68, 71, 92, 122, 138, 143, 144, 145, 147, 170, 171, 184, 203, 279, 978, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "lemaitr": [0, 1, 5, 7, 68, 71, 92, 122, 138, 143, 144, 145, 147, 170, 171, 184, 203, 279, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "christian": [0, 1, 19, 182, 183, 184, 200, 320, 321, 341, 978, 988, 995, 996, 999, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "lorentzen": [0, 1, 182, 183, 184, 200, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "jan": [0, 1, 23, 24, 25, 26, 138, 139, 141, 142, 143, 144, 145, 147, 183, 215, 256, 845, 995, 998, 999, 1000, 1001, 1003, 1004, 1007, 1011], "hendrik": [0, 1, 23, 24, 25, 26, 138, 139, 141, 142, 143, 144, 145, 147, 215, 995, 998, 999, 1000, 1001], "metzen": [0, 1, 23, 24, 25, 26, 138, 139, 141, 142, 143, 144, 145, 147, 215, 995, 998, 999, 1000, 1001], "andrea": [0, 1, 29, 70, 92, 105, 173, 214, 280, 281, 299, 316, 317, 361, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "mueller": [0, 1, 70, 92, 105, 173, 214, 299, 316, 317, 978, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "vlad": [0, 1, 87, 217, 277, 995, 996, 997, 998, 999, 1000, 1002, 1003, 1004], "nicula": [0, 1, 87, 217, 277, 995, 996, 997, 998, 999, 1000, 1002, 1003, 1004], "joel": [0, 1, 68, 361, 382, 500, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1012], "nothman": [0, 1, 68, 361, 382, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1012], "hanmin": [0, 1, 280, 1002, 1003, 1004, 1005, 1006], "qin": [0, 1, 280, 343, 382, 1002, 1003, 1004, 1005, 1006], "omar": [0, 1, 1005, 1010, 1011, 1012, 1013], "salman": [0, 1, 1010, 1011, 1012, 1013], "bertrand": [0, 1, 995, 1001, 1002, 1007, 1008], "thirion": [0, 1, 995, 1001, 1002, 1008], "tom": [0, 1, 174, 190, 259, 261, 281, 282, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "dupr\u00e9": [0, 1, 281, 282, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "la": [0, 1, 174, 190, 259, 261, 281, 282, 285, 343, 978, 996, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "tour": [0, 1, 174, 190, 259, 261, 281, 282, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "nell": [0, 1, 36, 205, 212, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1007], "yao": [0, 1, 343, 357, 1001, 1002, 1003, 1004, 1011, 1012], "xiao": [0, 1, 357, 1003, 1005, 1008, 1009, 1010, 1011, 1012], "roman": [0, 1, 182, 200, 592, 880, 997, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1012], "yurchak": [0, 1, 182, 200, 382, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "meekail": [0, 1, 1009, 1010, 1011, 1012], "zain": [0, 1, 1009, 1010, 1011, 1012], "pleas": [0, 12, 17, 25, 67, 68, 106, 108, 109, 115, 118, 119, 122, 125, 133, 143, 154, 155, 156, 163, 186, 210, 211, 212, 214, 216, 219, 220, 221, 222, 223, 230, 237, 239, 240, 246, 251, 259, 269, 277, 285, 288, 289, 290, 291, 292, 293, 294, 295, 299, 312, 328, 334, 340, 341, 344, 346, 347, 348, 350, 354, 358, 359, 360, 364, 365, 368, 370, 373, 374, 381, 382, 388, 402, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 429, 430, 434, 435, 436, 437, 438, 439, 440, 441, 447, 448, 449, 450, 461, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 546, 547, 548, 553, 554, 555, 556, 557, 559, 560, 561, 562, 563, 564, 565, 568, 575, 576, 592, 593, 594, 595, 596, 597, 598, 600, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 653, 654, 655, 656, 657, 761, 762, 763, 764, 765, 766, 767, 768, 770, 771, 772, 773, 776, 777, 778, 779, 780, 781, 782, 783, 784, 789, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 822, 823, 824, 825, 826, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 855, 858, 859, 861, 862, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 943, 954, 958, 964, 968, 969, 973, 974, 977, 979, 986, 988, 995, 998, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "do": [0, 4, 10, 13, 24, 26, 39, 52, 58, 64, 70, 83, 91, 93, 96, 105, 108, 110, 114, 115, 117, 122, 133, 143, 149, 154, 155, 156, 179, 182, 186, 200, 202, 204, 216, 217, 219, 231, 234, 237, 240, 242, 258, 259, 261, 265, 291, 295, 302, 305, 308, 312, 313, 316, 320, 321, 322, 328, 329, 333, 334, 335, 341, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 360, 361, 372, 373, 374, 375, 376, 377, 378, 381, 382, 383, 393, 415, 426, 468, 501, 503, 507, 509, 517, 520, 546, 547, 553, 554, 556, 597, 598, 610, 611, 617, 620, 621, 624, 631, 633, 641, 701, 727, 742, 746, 780, 783, 798, 799, 803, 830, 831, 833, 840, 844, 846, 851, 852, 854, 855, 856, 857, 874, 875, 876, 877, 885, 928, 943, 946, 948, 950, 951, 954, 955, 957, 958, 962, 964, 969, 970, 973, 974, 977, 978, 979, 986, 987, 988, 995, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "email": [0, 320, 346, 358, 382, 801, 956, 978], "directli": [0, 6, 19, 26, 42, 43, 53, 67, 106, 111, 136, 146, 166, 170, 182, 188, 200, 210, 244, 277, 279, 292, 295, 322, 329, 333, 344, 346, 347, 348, 350, 352, 359, 360, 361, 370, 371, 372, 374, 375, 376, 377, 378, 382, 384, 407, 417, 427, 429, 434, 439, 492, 532, 533, 534, 535, 562, 576, 585, 597, 608, 611, 612, 617, 618, 625, 626, 627, 628, 629, 642, 646, 649, 655, 738, 742, 745, 756, 757, 763, 766, 767, 777, 809, 811, 825, 826, 827, 833, 843, 845, 848, 855, 922, 943, 950, 952, 957, 959, 961, 964, 969, 970, 974, 980, 983, 984, 995, 1003, 1004, 1006, 1007, 1008, 1011, 1012], "ask": [0, 149, 150, 239, 345, 346, 350, 351, 354, 360, 361, 383, 808, 809, 810, 812, 814, 816, 817, 818, 977, 1011], "assist": [0, 346, 358, 964, 977, 978], "report": [0, 4, 8, 13, 30, 66, 71, 133, 146, 170, 237, 247, 256, 288, 297, 329, 341, 345, 347, 348, 349, 352, 354, 358, 360, 364, 368, 374, 378, 576, 614, 623, 629, 650, 651, 665, 678, 693, 694, 702, 747, 748, 751, 795, 804, 823, 824, 861, 879, 897, 950, 957, 962, 973, 974, 977, 996, 999, 1002, 1003, 1005, 1006, 1008, 1010, 1011], "issu": [0, 4, 24, 74, 80, 182, 200, 244, 286, 334, 340, 344, 349, 350, 351, 354, 355, 358, 360, 361, 363, 364, 365, 368, 370, 374, 376, 377, 382, 414, 417, 427, 438, 447, 448, 449, 499, 504, 508, 538, 553, 554, 556, 576, 592, 656, 660, 733, 837, 842, 854, 893, 943, 944, 951, 962, 964, 969, 973, 974, 977, 987, 988, 995, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1010, 1012], "instead": [0, 4, 5, 6, 13, 20, 45, 50, 52, 53, 54, 67, 92, 104, 109, 117, 119, 133, 136, 138, 143, 182, 184, 197, 200, 206, 219, 231, 235, 236, 240, 241, 258, 264, 279, 288, 289, 290, 291, 292, 308, 310, 312, 320, 322, 328, 329, 333, 334, 340, 341, 344, 345, 346, 347, 348, 350, 351, 354, 355, 358, 359, 360, 365, 368, 370, 374, 375, 377, 378, 379, 380, 381, 382, 383, 385, 397, 402, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 421, 424, 430, 432, 434, 435, 436, 437, 438, 439, 440, 441, 447, 448, 449, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 474, 475, 498, 499, 500, 502, 503, 504, 505, 506, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 546, 547, 548, 553, 554, 555, 556, 559, 572, 573, 575, 576, 577, 578, 579, 580, 581, 584, 585, 586, 587, 588, 589, 590, 592, 595, 597, 600, 603, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 652, 655, 657, 659, 672, 674, 706, 710, 714, 715, 738, 742, 743, 744, 746, 747, 761, 762, 763, 764, 765, 767, 769, 770, 772, 775, 777, 781, 782, 783, 787, 788, 789, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 811, 813, 816, 817, 823, 824, 826, 827, 828, 829, 831, 832, 833, 838, 839, 844, 845, 846, 856, 857, 860, 861, 862, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 879, 880, 892, 898, 903, 911, 922, 929, 943, 944, 946, 950, 951, 953, 954, 955, 958, 959, 964, 968, 969, 970, 973, 984, 986, 988, 992, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "see": [0, 4, 5, 7, 13, 20, 23, 24, 26, 34, 41, 46, 47, 50, 52, 54, 55, 59, 61, 62, 64, 65, 75, 80, 82, 83, 87, 92, 93, 97, 101, 102, 103, 104, 107, 108, 109, 110, 111, 113, 114, 115, 117, 119, 122, 127, 132, 133, 134, 136, 138, 143, 144, 145, 149, 151, 154, 155, 157, 159, 161, 162, 163, 166, 173, 183, 184, 185, 186, 188, 199, 200, 202, 204, 211, 213, 216, 219, 220, 221, 223, 226, 227, 228, 233, 234, 236, 238, 239, 240, 241, 242, 246, 248, 249, 250, 253, 254, 256, 259, 265, 266, 268, 272, 279, 285, 286, 288, 289, 290, 291, 292, 293, 294, 299, 308, 312, 316, 320, 321, 322, 324, 325, 326, 327, 329, 333, 334, 335, 338, 339, 340, 341, 343, 344, 345, 346, 348, 350, 352, 353, 354, 358, 359, 360, 370, 372, 373, 374, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 398, 402, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 447, 448, 449, 450, 452, 453, 456, 457, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 546, 547, 548, 549, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 572, 573, 574, 575, 576, 579, 584, 587, 588, 592, 593, 594, 595, 597, 598, 599, 600, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 666, 671, 673, 676, 678, 707, 727, 738, 742, 743, 744, 745, 752, 756, 757, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 772, 774, 775, 777, 778, 779, 780, 781, 782, 783, 784, 785, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 864, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 902, 903, 923, 925, 928, 938, 943, 944, 946, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 960, 961, 962, 964, 965, 966, 967, 968, 969, 970, 971, 972, 974, 978, 979, 981, 986, 987, 988, 995, 996, 997, 998, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013], "what": [0, 4, 9, 12, 13, 37, 42, 49, 50, 80, 88, 92, 110, 153, 154, 171, 188, 190, 198, 211, 216, 223, 276, 320, 322, 324, 329, 334, 341, 344, 346, 347, 348, 350, 352, 354, 359, 360, 361, 363, 374, 380, 381, 382, 468, 501, 553, 554, 556, 611, 617, 661, 851, 852, 854, 855, 856, 857, 874, 875, 876, 877, 953, 954, 955, 957, 970, 974, 979, 995, 1002], "best": [0, 4, 6, 8, 12, 13, 14, 19, 23, 25, 26, 37, 43, 51, 52, 58, 66, 67, 68, 69, 73, 79, 87, 91, 94, 95, 96, 104, 107, 111, 113, 114, 115, 117, 122, 125, 136, 138, 139, 144, 149, 154, 161, 166, 170, 171, 178, 196, 197, 198, 202, 205, 209, 214, 215, 219, 226, 227, 231, 233, 237, 238, 239, 240, 243, 246, 247, 250, 251, 253, 258, 263, 268, 280, 285, 290, 291, 308, 311, 312, 320, 321, 322, 327, 333, 334, 340, 343, 345, 346, 349, 352, 359, 360, 364, 365, 371, 372, 374, 378, 379, 381, 382, 383, 384, 397, 408, 411, 412, 414, 416, 417, 418, 424, 427, 430, 437, 447, 448, 449, 503, 510, 511, 517, 519, 521, 522, 523, 524, 525, 527, 529, 530, 531, 533, 535, 558, 559, 562, 567, 575, 576, 600, 602, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 632, 634, 635, 636, 637, 638, 640, 641, 643, 644, 645, 653, 654, 655, 658, 659, 668, 673, 684, 685, 686, 687, 688, 692, 693, 703, 704, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 720, 747, 748, 749, 751, 754, 755, 756, 757, 758, 760, 761, 762, 763, 766, 767, 777, 789, 791, 794, 799, 800, 809, 817, 823, 824, 867, 869, 872, 874, 875, 876, 877, 943, 948, 949, 950, 951, 954, 957, 958, 960, 968, 970, 973, 974, 978, 979, 984, 988, 995, 998, 1001, 1003, 1004, 1005, 1008, 1009, 1010, 1011, 1012], "wai": [0, 4, 17, 26, 47, 57, 67, 70, 106, 113, 118, 120, 136, 145, 154, 156, 157, 183, 186, 187, 197, 200, 211, 212, 215, 216, 219, 220, 234, 239, 246, 248, 279, 280, 291, 293, 294, 329, 333, 334, 335, 340, 342, 345, 348, 349, 354, 355, 360, 361, 364, 365, 368, 371, 372, 373, 374, 375, 377, 378, 379, 381, 382, 383, 384, 385, 389, 408, 409, 416, 417, 418, 424, 425, 427, 428, 434, 461, 520, 521, 528, 537, 554, 564, 565, 576, 597, 631, 632, 641, 642, 643, 664, 669, 671, 682, 700, 701, 718, 719, 721, 727, 738, 742, 752, 759, 787, 795, 812, 833, 839, 844, 850, 876, 877, 925, 928, 943, 944, 948, 949, 950, 951, 952, 953, 954, 955, 957, 959, 960, 961, 962, 964, 966, 968, 969, 970, 973, 974, 977, 978, 979, 987, 988, 995, 997, 1003, 1008, 1009], "question": [0, 127, 153, 239, 316, 345, 346, 351, 354, 378, 381, 795, 868, 871, 950, 953, 954, 960, 978], "faq": [0, 354, 378, 657, 951, 964], "how": [0, 4, 5, 7, 8, 9, 10, 13, 20, 21, 24, 25, 26, 30, 31, 34, 47, 48, 49, 50, 54, 57, 65, 66, 67, 70, 73, 75, 80, 96, 101, 102, 105, 109, 110, 111, 112, 114, 115, 117, 120, 122, 133, 143, 145, 151, 154, 155, 156, 157, 159, 163, 171, 172, 178, 183, 184, 185, 186, 189, 190, 196, 200, 206, 207, 211, 214, 216, 218, 219, 220, 222, 231, 234, 235, 237, 239, 240, 241, 246, 248, 249, 251, 252, 253, 258, 259, 261, 262, 263, 265, 266, 276, 284, 286, 289, 290, 291, 294, 295, 305, 306, 308, 311, 312, 316, 320, 321, 324, 328, 333, 334, 335, 341, 344, 345, 347, 348, 349, 351, 354, 359, 360, 361, 365, 368, 370, 371, 372, 374, 375, 376, 378, 379, 380, 381, 382, 383, 384, 385, 388, 398, 402, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 447, 448, 449, 450, 469, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 546, 547, 548, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 575, 576, 587, 588, 592, 593, 594, 595, 600, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 653, 654, 655, 656, 657, 669, 685, 721, 756, 761, 762, 763, 764, 765, 766, 767, 768, 770, 771, 772, 773, 776, 777, 778, 779, 780, 781, 782, 783, 784, 789, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 822, 823, 824, 825, 826, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 858, 859, 861, 862, 864, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 938, 943, 944, 948, 949, 950, 951, 953, 954, 960, 961, 962, 964, 966, 967, 969, 970, 972, 974, 978, 979, 981, 983, 988, 990, 995, 997, 1000, 1006, 1009, 1010, 1011], "you": [0, 15, 16, 20, 23, 67, 83, 109, 110, 113, 115, 133, 136, 150, 155, 170, 183, 184, 186, 211, 216, 223, 228, 234, 239, 240, 246, 254, 265, 288, 289, 292, 294, 295, 298, 301, 320, 329, 333, 334, 335, 340, 341, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 359, 360, 364, 365, 368, 370, 372, 373, 374, 375, 376, 378, 381, 382, 383, 385, 386, 391, 402, 408, 409, 411, 412, 414, 429, 430, 432, 434, 435, 436, 437, 438, 439, 440, 441, 447, 448, 449, 465, 468, 469, 474, 475, 497, 498, 499, 501, 503, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 544, 545, 546, 547, 553, 554, 555, 556, 559, 572, 573, 575, 576, 592, 600, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 652, 655, 664, 665, 749, 762, 764, 765, 766, 767, 768, 770, 772, 778, 779, 781, 782, 783, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 810, 811, 812, 813, 814, 816, 817, 823, 824, 825, 826, 829, 830, 831, 832, 833, 838, 839, 840, 845, 846, 851, 852, 854, 855, 856, 857, 859, 861, 862, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 903, 920, 922, 943, 944, 949, 950, 954, 955, 958, 960, 961, 964, 965, 968, 969, 970, 972, 973, 977, 978, 979, 980, 983, 986, 988, 995, 998, 999, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "can": [0, 4, 5, 7, 8, 9, 10, 12, 13, 15, 16, 19, 20, 23, 24, 25, 26, 29, 30, 31, 34, 37, 39, 40, 43, 45, 46, 50, 52, 53, 54, 55, 57, 58, 59, 60, 62, 66, 67, 68, 69, 73, 74, 75, 76, 77, 80, 83, 88, 90, 91, 92, 94, 96, 97, 99, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 131, 132, 133, 135, 136, 138, 143, 144, 145, 149, 150, 151, 153, 154, 155, 156, 157, 159, 161, 162, 163, 166, 167, 170, 171, 173, 175, 177, 178, 180, 182, 183, 184, 185, 186, 187, 188, 190, 198, 199, 200, 202, 203, 204, 209, 210, 211, 212, 213, 215, 216, 219, 220, 223, 225, 226, 227, 228, 230, 231, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 246, 248, 250, 251, 253, 254, 256, 258, 259, 261, 263, 264, 265, 266, 268, 275, 276, 277, 279, 280, 281, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 298, 299, 301, 302, 305, 306, 308, 311, 312, 316, 320, 321, 322, 326, 327, 328, 329, 333, 334, 335, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 359, 360, 361, 363, 364, 365, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 397, 399, 402, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 419, 421, 422, 423, 424, 426, 427, 429, 430, 431, 432, 433, 437, 447, 448, 449, 452, 461, 464, 468, 473, 474, 477, 486, 489, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 544, 545, 546, 547, 548, 549, 553, 554, 556, 557, 559, 560, 561, 562, 563, 564, 565, 567, 568, 569, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 595, 597, 599, 600, 603, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 652, 654, 656, 657, 658, 659, 660, 663, 664, 665, 666, 667, 669, 672, 674, 676, 677, 683, 685, 686, 687, 688, 690, 691, 693, 694, 696, 697, 701, 702, 703, 704, 706, 707, 710, 716, 719, 720, 721, 722, 723, 727, 743, 744, 746, 747, 748, 749, 751, 752, 753, 758, 759, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 777, 778, 779, 781, 782, 783, 785, 786, 787, 788, 789, 790, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 814, 816, 817, 818, 823, 824, 825, 826, 829, 830, 831, 833, 834, 835, 839, 840, 841, 844, 845, 846, 851, 858, 859, 864, 866, 867, 868, 869, 871, 872, 874, 875, 876, 877, 878, 879, 882, 884, 886, 890, 892, 897, 900, 902, 903, 909, 911, 912, 914, 917, 920, 922, 924, 925, 928, 935, 938, 939, 943, 944, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 964, 965, 966, 967, 968, 969, 970, 971, 973, 974, 977, 978, 979, 980, 981, 983, 984, 985, 986, 987, 988, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "contribut": [0, 14, 20, 115, 143, 166, 186, 248, 284, 343, 344, 348, 349, 350, 354, 360, 361, 364, 379, 380, 381, 412, 414, 518, 519, 524, 525, 690, 693, 720, 948, 954, 957, 962, 969, 973, 974, 977, 978, 986, 995, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "help": [0, 4, 9, 11, 16, 52, 66, 70, 92, 97, 155, 166, 200, 202, 240, 242, 256, 277, 305, 308, 321, 322, 329, 333, 334, 344, 347, 348, 349, 350, 351, 352, 354, 355, 360, 361, 363, 368, 374, 375, 378, 382, 384, 398, 501, 542, 592, 615, 619, 630, 650, 651, 657, 679, 802, 874, 875, 876, 877, 944, 948, 949, 951, 953, 954, 956, 958, 964, 965, 970, 972, 973, 974, 977, 978, 988, 1001, 1002, 1003, 1006, 1009], "arturo": [0, 34, 54, 107, 117, 161, 166, 219, 240, 242, 284, 320, 321, 322, 357, 1009, 1010, 1011, 1012], "amor": [0, 34, 54, 107, 117, 161, 166, 219, 240, 242, 284, 320, 321, 322, 357, 1009, 1010, 1011, 1012], "luci": [0, 245, 336, 357, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "liu": [0, 245, 336, 357, 528, 690, 720, 954, 960, 998, 1001, 1002, 1003, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "activ": [0, 151, 190, 225, 231, 240, 296, 297, 322, 340, 341, 344, 346, 347, 352, 354, 358, 360, 361, 364, 365, 375, 461, 467, 491, 597, 600, 602, 615, 616, 618, 619, 620, 628, 629, 630, 647, 648, 649, 650, 651, 678, 683, 761, 822, 823, 824, 862, 920, 950, 951, 952, 953, 957, 958, 959, 967, 975, 977, 1006], "who": [0, 66, 334, 341, 346, 353, 361, 364, 808, 809, 810, 812, 814, 816, 817, 818, 973, 997, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "also": [0, 4, 7, 11, 13, 17, 19, 20, 23, 24, 25, 26, 30, 43, 45, 50, 54, 55, 57, 61, 66, 67, 73, 75, 79, 80, 87, 94, 96, 101, 104, 107, 109, 111, 112, 113, 114, 115, 117, 120, 122, 132, 133, 134, 136, 138, 140, 143, 150, 151, 154, 155, 156, 157, 159, 162, 163, 165, 171, 174, 175, 178, 182, 183, 184, 186, 187, 191, 199, 200, 202, 212, 214, 216, 219, 220, 231, 237, 239, 240, 241, 242, 245, 246, 248, 249, 250, 256, 258, 259, 267, 270, 272, 274, 279, 280, 281, 283, 284, 288, 289, 290, 291, 295, 302, 304, 305, 306, 308, 310, 312, 320, 321, 322, 324, 325, 328, 329, 333, 334, 335, 339, 340, 341, 343, 344, 345, 346, 348, 349, 352, 354, 355, 358, 359, 360, 361, 364, 368, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 402, 403, 404, 406, 407, 410, 411, 412, 413, 415, 417, 427, 428, 430, 432, 447, 449, 457, 461, 463, 468, 473, 497, 498, 500, 501, 506, 511, 514, 516, 518, 519, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 572, 573, 574, 575, 576, 587, 597, 598, 600, 608, 609, 610, 611, 612, 615, 617, 618, 619, 621, 623, 624, 625, 626, 627, 628, 629, 637, 641, 643, 646, 649, 652, 656, 659, 660, 664, 675, 678, 687, 693, 694, 702, 707, 727, 743, 744, 747, 748, 751, 761, 762, 763, 766, 767, 777, 780, 783, 788, 789, 790, 791, 792, 793, 795, 805, 808, 809, 810, 812, 813, 814, 816, 817, 818, 822, 823, 824, 826, 828, 829, 834, 835, 839, 843, 846, 851, 855, 868, 871, 874, 875, 876, 877, 886, 905, 911, 918, 922, 943, 944, 946, 948, 950, 951, 952, 953, 954, 955, 956, 957, 958, 960, 961, 964, 965, 967, 968, 969, 970, 973, 974, 978, 979, 984, 986, 987, 988, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "triag": [0, 346, 349, 361], "pr": [0, 124, 334, 346, 349, 354, 382, 705, 954, 977, 1005, 1007], "gener": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 19, 21, 24, 25, 26, 27, 28, 29, 30, 31, 34, 36, 37, 38, 39, 40, 41, 42, 43, 45, 47, 48, 49, 50, 51, 53, 55, 56, 57, 58, 59, 62, 66, 67, 68, 69, 70, 71, 74, 76, 79, 80, 81, 82, 83, 87, 91, 92, 93, 94, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 131, 133, 134, 136, 139, 140, 141, 142, 143, 146, 149, 150, 153, 154, 155, 156, 157, 159, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 231, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 258, 259, 261, 262, 263, 264, 265, 267, 268, 269, 270, 272, 274, 275, 276, 279, 280, 281, 282, 283, 284, 285, 286, 288, 290, 291, 292, 293, 294, 295, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 320, 321, 322, 324, 325, 326, 327, 328, 333, 334, 338, 339, 341, 343, 347, 348, 349, 350, 351, 352, 354, 355, 358, 359, 368, 371, 372, 374, 378, 380, 382, 383, 384, 386, 390, 395, 397, 402, 405, 408, 411, 412, 414, 417, 419, 423, 424, 425, 427, 429, 430, 432, 434, 437, 439, 447, 448, 449, 453, 456, 457, 460, 461, 462, 468, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 499, 501, 503, 505, 506, 508, 509, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 547, 548, 549, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 572, 573, 575, 576, 579, 580, 583, 584, 585, 587, 588, 592, 593, 594, 595, 597, 598, 599, 600, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 634, 635, 636, 637, 638, 640, 642, 643, 644, 645, 650, 651, 654, 655, 656, 657, 658, 659, 660, 666, 669, 671, 682, 686, 687, 688, 701, 707, 721, 742, 745, 749, 757, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 793, 796, 797, 798, 799, 800, 806, 807, 809, 811, 812, 814, 815, 816, 817, 818, 822, 823, 824, 825, 826, 829, 830, 831, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 851, 852, 854, 855, 856, 857, 858, 859, 866, 867, 868, 869, 871, 872, 875, 877, 878, 879, 880, 897, 898, 902, 903, 906, 907, 919, 923, 925, 928, 943, 944, 946, 948, 949, 951, 953, 954, 955, 957, 959, 960, 961, 962, 966, 967, 969, 970, 973, 975, 976, 977, 978, 979, 982, 986, 987, 990, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013], "juan": [0, 336, 995, 1006, 1007, 1008, 1009, 1010], "carlo": [0, 214, 336, 381, 384, 576, 606, 607, 946, 959, 995, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "alfaro": [0, 336, 1006, 1007, 1008, 1009, 1010], "jim\u00e9nez": [0, 336, 1003, 1006, 1007, 1008, 1009, 1010], "maxwel": [0, 336, 1005, 1008, 1009, 1010, 1011], "martin": [0, 336, 686, 687, 688, 950, 954, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1012], "loyola": [0, 336, 1008, 1009], "sylvain": [0, 336, 999, 1004, 1005, 1006, 1007, 1008, 1009], "mari\u00e9": [0, 336, 1004, 1005, 1006, 1007, 1008, 1009], "norbert": [0, 336, 997, 1007, 1008, 1009], "prein": [0, 336, 1007, 1008, 1009], "reshama": [0, 331, 336, 1003, 1004, 1006, 1007, 1008, 1009, 1010], "shaikh": [0, 331, 336, 1003, 1004, 1006, 1007, 1008, 1009, 1010], "albert": [0, 209, 336, 1002, 1003, 1004, 1007, 1008], "maren": [0, 336, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "westermann": [0, 336, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "around": [0, 4, 25, 34, 49, 79, 101, 104, 114, 144, 155, 159, 216, 219, 242, 277, 297, 299, 300, 308, 311, 312, 320, 321, 322, 329, 341, 343, 346, 352, 358, 374, 378, 379, 382, 436, 437, 480, 509, 585, 605, 614, 633, 669, 706, 761, 769, 785, 812, 814, 816, 817, 818, 846, 950, 951, 953, 954, 960, 964, 968, 973, 974, 977, 978, 986, 988, 999, 1000], "lauren": [0, 330, 657, 661, 951, 1007, 1010], "burk": [0, 330, 1010], "fran\u00e7oi": [0, 330, 998], "goupil": [0, 330], "longer": [0, 4, 32, 50, 104, 155, 167, 276, 291, 346, 348, 374, 378, 381, 382, 414, 501, 528, 949, 953, 954, 956, 959, 969, 977, 978, 988, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "mathieu": [0, 2, 23, 45, 92, 173, 183, 203, 217, 240, 320, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1008], "blondel": [0, 2, 23, 45, 92, 173, 183, 203, 217, 240, 320, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1008], "lar": [0, 2, 15, 90, 136, 151, 154, 160, 167, 168, 171, 175, 176, 187, 252, 320, 321, 322, 343, 436, 437, 443, 466, 496, 502, 504, 507, 508, 510, 511, 513, 616, 617, 618, 619, 620, 621, 628, 629, 630, 643, 647, 648, 649, 650, 651, 975, 976, 986, 990, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1006, 1008], "buitinck": [0, 2, 15, 320, 321, 322, 995, 996, 997, 998, 999, 1000, 1001, 1002], "noel": [0, 2, 101, 102, 103, 995, 996, 997, 998, 999, 1007], "daw": [0, 2, 101, 102, 103, 995, 996, 997, 998, 999], "dubourg": [0, 2, 141, 145, 978, 995, 999], "edouard": [0, 2, 995], "duchesnai": [0, 2, 995], "alexand": [0, 2, 374, 379, 500, 832, 997, 998, 999, 1001, 1002, 1003, 1007, 1008, 1009, 1012], "fabisch": [0, 2, 997, 998, 999, 1001], "virgil": [0, 2, 9, 995, 996, 998], "fritsch": [0, 2, 9, 995, 996, 998], "satrajit": [0, 2, 995, 996], "ghosh": [0, 2, 374, 995, 996, 1012], "angel": [0, 2], "soler": [0, 2], "gollonet": [0, 2], "chri": [0, 2, 995, 998, 1003, 1004, 1005, 1006, 1009], "gorgolewski": [0, 2, 995, 998], "jaqu": [0, 2, 29, 42, 48, 50, 69, 82, 83, 165, 178, 179, 180, 204, 313, 316, 995, 996, 997, 998], "grobler": [0, 2, 29, 42, 48, 50, 69, 82, 83, 165, 178, 179, 180, 204, 313, 316, 995, 996, 997, 998], "brian": [0, 2, 43, 673, 954, 995, 996, 998, 999, 1000, 1001, 1002, 1005, 1006, 1008, 1009], "holt": [0, 2, 995], "arnaud": [0, 2, 996, 997, 998, 999, 1000, 1001], "joli": [0, 2, 996, 997, 998, 999, 1000, 1001], "thoui": [0, 2, 995], "rai": [0, 2, 922, 954, 995, 1005, 1007, 1008], "jone": [0, 2, 341, 995], "kyle": [0, 2, 91, 996, 997, 998, 999, 1001, 1002, 1003, 1004, 1006, 1007], "kastner": [0, 2, 91, 997, 998, 999, 1006, 1007], "manoj": [0, 2, 39, 136, 164, 998, 999, 1000, 1001, 1002], "kumar": [0, 2, 39, 136, 164, 341, 374, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012], "robert": [0, 2, 45, 68, 136, 170, 256, 343, 379, 493, 500, 593, 621, 686, 687, 688, 699, 832, 944, 950, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1005, 1010], "layton": [0, 2, 45, 995, 996, 997, 998, 1000], "wei": [0, 2, 968, 995, 996, 999, 1000, 1001, 1002, 1004, 1008, 1011], "li": [0, 2, 300, 341, 604, 607, 661, 690, 720, 859, 943, 946, 954, 957, 964, 966, 969, 995, 996, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "paolo": [0, 2, 995, 999, 1005, 1013], "losi": [0, 2, 995], "gill": [0, 2, 104, 105, 995, 996, 997, 998, 999, 1000, 1001], "loupp": [0, 2, 104, 105, 381, 520, 521, 995, 996, 997, 998, 999, 1000, 1001], "jarrod": [0, 2, 1004, 1011, 1012], "millman": [0, 2, 1004, 1011, 1012], "passo": [0, 2, 995, 996], "peter": [0, 2, 11, 16, 60, 113, 115, 116, 240, 320, 321, 374, 413, 415, 422, 614, 756, 757, 950, 954, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1008, 1010, 1011, 1012], "prettenhof": [0, 2, 11, 16, 113, 115, 116, 240, 320, 321, 995, 996, 997, 998, 999, 1000], "venkat": [0, 2], "raghav": [0, 2, 243, 279, 999, 1000, 1001, 1002, 1003, 1007], "rajagopalan": [0, 2, 1003, 1007], "jacob": [0, 2, 1000, 1001, 1002], "schreiber": [0, 2, 1000, 1001, 1002], "\u675c\u4e16\u6a4b": [0, 2], "shiqiao": [0, 2, 995, 996], "jake": [0, 2, 11, 145, 183, 202, 228, 264, 272, 972, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1007, 1009], "vanderpla": [0, 2, 11, 145, 183, 202, 228, 264, 272, 972, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003], "ward": [0, 2, 14, 21, 33, 36, 37, 38, 41, 43, 49, 50, 51, 53, 59, 151, 157, 206, 382, 406, 410, 428, 495, 819, 975, 995, 998, 1000], "farlei": [0, 2, 995], "ron": [0, 2, 227, 995], "weiss": [0, 2, 227, 374, 656, 995], "respons": [0, 136, 155, 178, 182, 185, 216, 249, 320, 343, 352, 360, 373, 374, 375, 381, 411, 429, 447, 448, 449, 596, 597, 598, 639, 640, 663, 665, 667, 706, 761, 762, 955, 961, 979, 1012], "chiara": [0, 337, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "marmo": [0, 337, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "If": [0, 4, 11, 13, 16, 26, 30, 39, 46, 52, 67, 77, 90, 99, 109, 114, 117, 122, 147, 150, 154, 163, 182, 197, 199, 200, 216, 219, 239, 246, 254, 264, 272, 279, 284, 285, 308, 312, 316, 317, 320, 321, 322, 328, 329, 333, 334, 340, 341, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 358, 360, 361, 364, 365, 368, 371, 372, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 387, 388, 395, 398, 399, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 473, 474, 475, 477, 479, 480, 484, 487, 488, 489, 492, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 546, 547, 548, 549, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 672, 676, 677, 678, 679, 681, 682, 683, 690, 691, 692, 693, 694, 695, 696, 700, 702, 705, 706, 709, 710, 712, 714, 715, 717, 718, 719, 720, 721, 722, 723, 725, 727, 728, 730, 731, 732, 733, 735, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 751, 752, 753, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 769, 775, 777, 780, 783, 785, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 878, 879, 880, 881, 882, 884, 885, 886, 887, 889, 890, 891, 892, 895, 901, 903, 905, 907, 911, 913, 917, 920, 922, 923, 925, 928, 929, 935, 938, 939, 940, 941, 943, 944, 946, 948, 949, 950, 951, 952, 954, 957, 958, 960, 961, 964, 966, 968, 969, 970, 971, 973, 974, 977, 979, 980, 986, 987, 988, 995, 998, 999, 1000, 1001, 1004, 1005, 1007, 1008, 1009, 1011, 1013], "us": [0, 3, 4, 7, 8, 9, 11, 13, 14, 15, 16, 19, 20, 21, 23, 24, 25, 26, 28, 30, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 62, 63, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 80, 83, 84, 85, 86, 89, 91, 92, 94, 95, 96, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 121, 123, 124, 125, 127, 128, 129, 132, 133, 135, 137, 138, 139, 144, 145, 146, 147, 149, 150, 151, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 166, 167, 168, 170, 171, 172, 173, 175, 176, 178, 180, 181, 182, 183, 184, 186, 187, 188, 190, 191, 194, 197, 199, 200, 202, 203, 204, 205, 207, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 244, 245, 246, 247, 249, 250, 251, 252, 253, 256, 257, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 276, 277, 278, 279, 281, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 297, 298, 301, 303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 314, 316, 319, 322, 324, 326, 327, 332, 333, 334, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 349, 350, 353, 355, 359, 360, 361, 363, 364, 365, 368, 370, 371, 372, 374, 375, 376, 377, 380, 381, 384, 385, 386, 387, 390, 392, 393, 395, 396, 404, 421, 422, 424, 426, 428, 436, 443, 445, 446, 450, 458, 468, 473, 474, 481, 496, 510, 511, 512, 513, 520, 537, 539, 540, 542, 543, 548, 550, 551, 557, 560, 561, 563, 566, 568, 574, 581, 585, 586, 589, 594, 601, 603, 607, 615, 616, 619, 625, 626, 628, 632, 640, 648, 650, 651, 652, 659, 660, 661, 664, 676, 679, 680, 681, 686, 687, 688, 690, 692, 694, 700, 703, 707, 715, 720, 722, 723, 727, 728, 730, 731, 732, 733, 735, 738, 739, 740, 741, 744, 745, 747, 755, 758, 770, 771, 772, 774, 775, 776, 786, 798, 800, 802, 806, 807, 816, 817, 818, 820, 828, 829, 832, 834, 837, 848, 849, 851, 853, 854, 856, 857, 858, 861, 865, 867, 876, 877, 878, 879, 882, 885, 886, 887, 892, 893, 902, 903, 910, 917, 921, 922, 923, 925, 926, 930, 931, 932, 943, 944, 946, 947, 949, 952, 953, 955, 956, 957, 959, 960, 961, 962, 964, 965, 966, 967, 971, 972, 973, 974, 975, 976, 977, 979, 980, 982, 983, 984, 985, 987, 989, 990, 992, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "scientif": [0, 30, 127, 128, 129, 214, 340, 344, 358, 364, 374, 417, 427, 466, 978, 980], "we": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 20, 23, 24, 25, 26, 28, 30, 32, 34, 37, 38, 39, 41, 44, 46, 47, 50, 52, 53, 54, 55, 59, 61, 62, 63, 66, 67, 68, 69, 71, 73, 75, 76, 77, 80, 82, 83, 85, 87, 88, 89, 90, 92, 94, 95, 97, 101, 102, 104, 106, 107, 108, 109, 110, 111, 112, 114, 115, 117, 118, 119, 120, 122, 124, 125, 127, 131, 132, 133, 135, 136, 138, 140, 143, 144, 145, 146, 147, 149, 150, 153, 154, 155, 156, 157, 159, 161, 162, 163, 165, 166, 168, 170, 171, 173, 175, 177, 179, 182, 183, 184, 185, 186, 188, 190, 191, 194, 195, 196, 197, 198, 200, 202, 203, 206, 207, 209, 210, 212, 213, 214, 216, 217, 219, 220, 222, 223, 225, 226, 227, 228, 230, 231, 234, 235, 236, 237, 239, 240, 241, 242, 244, 245, 246, 248, 249, 250, 251, 253, 256, 258, 259, 261, 262, 264, 267, 268, 269, 270, 272, 274, 275, 276, 277, 279, 280, 281, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 302, 304, 305, 306, 308, 309, 310, 311, 312, 313, 316, 318, 320, 321, 322, 324, 325, 326, 327, 328, 329, 333, 334, 335, 340, 341, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 358, 359, 360, 361, 365, 370, 372, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 415, 434, 435, 436, 437, 438, 439, 440, 441, 466, 488, 496, 497, 499, 502, 510, 511, 514, 526, 527, 528, 534, 535, 547, 548, 554, 576, 582, 592, 597, 598, 603, 605, 616, 620, 623, 624, 631, 633, 638, 639, 640, 641, 642, 657, 676, 683, 685, 690, 710, 720, 728, 745, 769, 785, 787, 808, 809, 810, 812, 814, 815, 816, 817, 818, 829, 838, 839, 840, 846, 851, 852, 854, 855, 856, 857, 859, 862, 866, 870, 918, 920, 943, 944, 946, 948, 949, 950, 951, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 964, 966, 967, 968, 969, 970, 971, 972, 973, 974, 978, 979, 983, 984, 985, 986, 987, 988, 992, 999, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1011], "would": [0, 4, 6, 9, 13, 25, 26, 30, 42, 50, 52, 55, 66, 73, 75, 76, 80, 85, 92, 101, 114, 136, 138, 143, 144, 154, 155, 156, 157, 159, 166, 172, 182, 183, 184, 197, 200, 209, 216, 219, 227, 235, 239, 240, 245, 247, 249, 256, 259, 265, 276, 279, 280, 284, 285, 291, 294, 300, 308, 312, 316, 317, 320, 322, 328, 329, 333, 341, 342, 346, 347, 348, 352, 354, 355, 358, 359, 360, 361, 365, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 397, 411, 430, 433, 447, 448, 449, 454, 492, 497, 499, 501, 506, 509, 517, 519, 521, 522, 523, 524, 525, 526, 527, 529, 530, 531, 533, 535, 548, 549, 552, 554, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 576, 600, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 637, 638, 639, 640, 641, 643, 644, 665, 667, 673, 677, 678, 685, 720, 742, 746, 749, 753, 763, 765, 777, 791, 799, 800, 809, 817, 824, 851, 852, 854, 855, 856, 857, 858, 859, 864, 866, 867, 869, 872, 874, 875, 876, 877, 911, 914, 943, 944, 947, 950, 951, 952, 954, 955, 956, 957, 958, 959, 960, 962, 964, 969, 973, 974, 978, 979, 984, 986, 988, 992, 998, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "appreci": [0, 346], "citat": [0, 340, 343, 358], "paper": [0, 136, 159, 239, 343, 352, 358, 374, 376, 407, 414, 443, 469, 499, 506, 528, 606, 623, 631, 632, 636, 641, 644, 657, 752, 803, 812, 815, 858, 859, 950, 954, 957, 960, 969, 988, 995, 1002, 1003], "machin": [0, 4, 6, 8, 9, 13, 26, 60, 69, 79, 107, 128, 132, 133, 136, 138, 143, 152, 156, 172, 177, 194, 197, 222, 239, 242, 245, 256, 273, 279, 284, 286, 290, 293, 304, 309, 312, 316, 320, 322, 333, 334, 339, 340, 341, 343, 344, 346, 349, 352, 353, 358, 359, 360, 363, 368, 372, 374, 378, 379, 381, 382, 384, 402, 404, 413, 436, 437, 443, 467, 469, 475, 481, 482, 483, 495, 497, 499, 506, 509, 520, 521, 522, 523, 524, 525, 529, 530, 531, 558, 559, 575, 576, 579, 584, 587, 599, 603, 604, 606, 608, 609, 610, 615, 616, 619, 620, 621, 622, 623, 624, 641, 647, 648, 657, 673, 678, 689, 699, 705, 707, 749, 752, 761, 791, 792, 806, 807, 812, 815, 822, 823, 824, 826, 844, 846, 852, 866, 867, 868, 869, 871, 872, 876, 877, 922, 943, 944, 946, 947, 950, 951, 952, 954, 955, 957, 960, 961, 962, 964, 968, 970, 972, 973, 974, 975, 976, 977, 978, 980, 981, 982, 984, 988, 989, 990, 992, 995, 997, 1007, 1008, 1009, 1010, 1012], "python": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 153, 154, 155, 156, 157, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 324, 325, 326, 327, 328, 333, 335, 340, 344, 346, 347, 348, 349, 350, 351, 354, 355, 358, 360, 364, 375, 382, 461, 473, 474, 546, 664, 774, 840, 922, 954, 964, 969, 970, 974, 977, 978, 979, 980, 982, 988, 990, 995, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1012], "et": [0, 11, 73, 74, 101, 116, 170, 272, 341, 343, 371, 374, 376, 379, 381, 382, 383, 416, 463, 484, 485, 493, 500, 506, 509, 528, 647, 648, 684, 685, 801, 803, 823, 824, 859, 902, 903, 950, 951, 954, 960, 964, 966, 969, 970, 1003, 1011], "al": [0, 11, 73, 74, 101, 116, 170, 272, 341, 343, 371, 374, 376, 379, 381, 382, 383, 416, 463, 484, 485, 493, 500, 506, 509, 528, 647, 648, 684, 685, 801, 803, 823, 824, 859, 902, 903, 950, 951, 954, 960, 964, 966, 969, 970, 1003, 1008, 1011, 1012], "jmlr": [0, 374, 631, 632, 641, 669, 950, 969], "12": [0, 4, 6, 13, 20, 32, 37, 39, 40, 50, 52, 53, 54, 69, 70, 79, 85, 110, 111, 112, 115, 117, 136, 141, 142, 143, 150, 154, 155, 157, 162, 166, 168, 182, 190, 200, 202, 205, 206, 209, 210, 212, 220, 223, 227, 228, 238, 239, 241, 242, 245, 251, 262, 277, 283, 284, 285, 293, 316, 322, 343, 344, 351, 359, 361, 364, 366, 367, 374, 378, 382, 408, 412, 414, 422, 447, 448, 449, 450, 461, 497, 499, 506, 535, 611, 612, 617, 625, 626, 627, 629, 634, 636, 646, 650, 651, 654, 657, 658, 689, 694, 761, 762, 764, 781, 784, 797, 818, 834, 935, 943, 944, 946, 950, 952, 955, 964, 968, 969, 979, 984, 993, 996, 998, 1002, 1003, 1005, 1006, 1011, 1012], "pp": [0, 60, 136, 238, 343, 374, 376, 382, 385, 386, 409, 413, 417, 427, 476, 498, 499, 506, 555, 600, 608, 629, 650, 651, 685, 690, 694, 704, 720, 733, 747, 801, 803, 805, 822, 842, 854, 947, 954, 956, 957, 967], "2825": 0, "2830": 0, "2011": [0, 44, 155, 203, 352, 379, 382, 500, 503, 505, 506, 512, 555, 592, 603, 623, 694, 944, 958, 968, 972, 995], "bibtex": 0, "entri": [0, 16, 67, 71, 117, 122, 150, 154, 155, 235, 288, 321, 329, 350, 352, 354, 359, 360, 371, 372, 374, 379, 381, 384, 428, 437, 461, 496, 497, 502, 510, 511, 526, 527, 553, 556, 559, 576, 585, 597, 603, 605, 612, 616, 618, 620, 621, 624, 626, 628, 629, 630, 638, 640, 647, 648, 650, 651, 664, 669, 672, 674, 677, 680, 681, 683, 690, 693, 694, 695, 698, 699, 702, 707, 720, 722, 723, 747, 749, 752, 753, 756, 757, 776, 790, 806, 807, 814, 815, 816, 817, 818, 837, 843, 855, 940, 943, 944, 950, 954, 957, 964, 969, 974, 979, 1002, 1005, 1006, 1008, 1012], "articl": [0, 17, 66, 320, 341, 345, 346, 354, 378, 387, 440, 670, 950, 954, 988, 1008], "titl": [0, 4, 5, 6, 7, 8, 9, 11, 13, 14, 15, 20, 21, 23, 24, 25, 26, 28, 30, 34, 35, 36, 38, 41, 42, 43, 45, 46, 48, 49, 51, 52, 53, 54, 55, 56, 58, 59, 60, 73, 74, 76, 77, 79, 80, 83, 84, 87, 88, 89, 90, 91, 94, 95, 96, 102, 103, 104, 107, 109, 110, 111, 114, 115, 117, 118, 121, 124, 125, 129, 131, 132, 134, 135, 136, 138, 139, 140, 142, 143, 144, 145, 146, 154, 161, 162, 164, 166, 167, 169, 170, 171, 174, 175, 181, 182, 184, 186, 187, 188, 190, 191, 196, 199, 200, 202, 203, 204, 209, 213, 214, 215, 217, 218, 219, 225, 226, 227, 228, 229, 230, 231, 233, 234, 238, 239, 240, 242, 243, 244, 248, 249, 253, 261, 262, 265, 266, 267, 268, 270, 271, 272, 279, 283, 284, 285, 286, 299, 302, 304, 305, 306, 307, 308, 311, 312, 317, 318, 320, 325, 326, 327, 345, 346, 350, 354, 375, 954, 977, 984], "p": [0, 11, 14, 23, 25, 26, 38, 58, 75, 76, 79, 85, 94, 113, 132, 136, 141, 159, 194, 199, 200, 202, 204, 213, 228, 239, 245, 246, 272, 340, 341, 343, 344, 351, 354, 371, 372, 374, 376, 377, 379, 381, 383, 384, 385, 387, 407, 409, 411, 412, 415, 420, 421, 422, 434, 436, 439, 440, 443, 463, 493, 499, 503, 505, 506, 512, 514, 515, 516, 518, 520, 521, 522, 523, 524, 526, 529, 530, 531, 555, 557, 558, 559, 560, 561, 563, 564, 565, 569, 570, 571, 572, 573, 574, 580, 581, 592, 605, 608, 653, 655, 657, 659, 664, 670, 680, 688, 705, 716, 750, 752, 765, 771, 772, 773, 776, 791, 798, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 814, 816, 817, 818, 819, 820, 822, 826, 827, 842, 854, 860, 876, 877, 878, 947, 948, 950, 951, 952, 954, 956, 957, 958, 959, 960, 961, 964, 968, 969, 983, 986, 995, 996, 998, 1001, 1003, 1010, 1011, 1012], "ython": 0, "f": [0, 4, 5, 7, 11, 12, 13, 15, 16, 17, 20, 25, 28, 30, 34, 40, 44, 45, 46, 49, 50, 52, 55, 61, 64, 67, 71, 80, 90, 101, 104, 107, 108, 109, 111, 112, 114, 117, 122, 123, 128, 130, 132, 135, 136, 138, 144, 145, 147, 151, 153, 154, 155, 156, 157, 159, 166, 168, 171, 182, 183, 184, 186, 192, 196, 200, 203, 213, 215, 216, 219, 223, 230, 237, 239, 240, 241, 242, 245, 246, 248, 249, 251, 259, 262, 274, 275, 276, 281, 284, 285, 288, 290, 292, 294, 295, 297, 298, 307, 312, 316, 320, 321, 322, 329, 341, 346, 347, 348, 350, 352, 358, 372, 375, 379, 381, 382, 383, 384, 452, 473, 474, 496, 497, 502, 503, 531, 546, 547, 548, 552, 557, 560, 561, 563, 564, 565, 569, 570, 571, 572, 573, 574, 582, 592, 597, 600, 623, 661, 678, 687, 690, 693, 694, 720, 747, 748, 751, 752, 764, 765, 768, 770, 771, 772, 773, 776, 778, 779, 780, 781, 782, 783, 784, 790, 791, 793, 823, 824, 828, 837, 840, 841, 845, 846, 847, 873, 881, 886, 887, 938, 946, 949, 958, 961, 962, 964, 968, 975, 997, 1003, 1004, 1005, 1007, 1009], "g": [0, 4, 7, 8, 10, 12, 16, 23, 24, 25, 26, 30, 50, 52, 62, 66, 77, 80, 94, 101, 104, 105, 113, 114, 122, 138, 139, 140, 141, 143, 145, 146, 147, 150, 153, 164, 167, 182, 183, 184, 186, 200, 203, 207, 215, 216, 225, 239, 243, 244, 250, 258, 265, 279, 284, 300, 315, 316, 322, 329, 333, 338, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 358, 360, 365, 368, 370, 372, 373, 374, 376, 378, 379, 381, 382, 383, 384, 386, 402, 408, 409, 412, 414, 430, 434, 435, 436, 437, 438, 439, 440, 441, 447, 448, 449, 468, 493, 496, 498, 499, 502, 503, 506, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 546, 547, 553, 554, 555, 556, 558, 559, 562, 569, 575, 576, 582, 587, 588, 595, 598, 599, 600, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 651, 655, 657, 662, 685, 692, 702, 704, 727, 749, 752, 764, 765, 766, 767, 769, 770, 772, 781, 785, 787, 788, 789, 790, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 810, 811, 813, 815, 816, 817, 818, 822, 823, 824, 826, 829, 831, 832, 833, 836, 838, 839, 842, 844, 845, 846, 847, 849, 851, 852, 853, 854, 855, 856, 857, 861, 862, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 902, 903, 914, 922, 943, 944, 948, 950, 951, 952, 954, 955, 956, 957, 958, 959, 960, 961, 964, 968, 969, 970, 974, 977, 978, 983, 988, 995, 999, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012], "A": [0, 14, 16, 17, 18, 24, 26, 29, 33, 35, 36, 37, 38, 41, 42, 43, 45, 46, 50, 51, 53, 56, 57, 58, 59, 61, 64, 71, 73, 76, 80, 85, 88, 89, 90, 94, 102, 103, 108, 109, 111, 121, 125, 127, 128, 129, 133, 134, 135, 138, 141, 143, 145, 146, 147, 151, 154, 155, 166, 170, 183, 186, 192, 196, 197, 200, 203, 216, 219, 228, 239, 240, 242, 246, 253, 256, 274, 279, 281, 284, 288, 290, 293, 298, 299, 300, 302, 308, 313, 320, 321, 322, 326, 328, 329, 333, 335, 340, 341, 343, 344, 346, 348, 349, 351, 354, 358, 359, 360, 361, 363, 365, 369, 371, 372, 374, 375, 376, 377, 379, 380, 381, 382, 383, 385, 386, 387, 388, 397, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 422, 423, 427, 428, 429, 430, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 447, 448, 449, 450, 453, 455, 456, 457, 459, 462, 465, 466, 467, 468, 469, 473, 475, 476, 477, 478, 479, 485, 487, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 546, 547, 548, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 572, 573, 575, 576, 582, 585, 592, 593, 594, 595, 597, 598, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 669, 670, 675, 676, 677, 681, 682, 684, 686, 687, 688, 689, 690, 695, 700, 701, 704, 706, 707, 708, 711, 713, 714, 715, 716, 718, 719, 720, 721, 722, 723, 728, 730, 731, 738, 739, 740, 741, 742, 745, 752, 754, 755, 757, 759, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 787, 788, 789, 790, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 854, 855, 856, 857, 858, 859, 861, 862, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 901, 902, 903, 910, 911, 912, 913, 914, 939, 943, 944, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 964, 967, 968, 969, 970, 972, 973, 974, 975, 979, 980, 986, 987, 988, 990, 995, 997, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "v": [0, 4, 9, 13, 14, 16, 17, 19, 26, 28, 31, 32, 33, 34, 35, 36, 37, 38, 44, 46, 52, 55, 66, 71, 72, 75, 77, 78, 79, 87, 89, 90, 94, 105, 107, 108, 109, 114, 115, 116, 127, 132, 138, 151, 152, 157, 160, 171, 180, 181, 182, 183, 186, 187, 191, 197, 206, 213, 226, 227, 230, 231, 232, 235, 254, 256, 270, 286, 288, 305, 321, 329, 334, 338, 343, 344, 346, 352, 354, 360, 370, 371, 372, 373, 376, 377, 379, 382, 397, 406, 410, 417, 427, 428, 429, 430, 435, 438, 439, 440, 441, 442, 447, 448, 449, 461, 477, 489, 495, 496, 502, 506, 510, 511, 515, 517, 519, 521, 523, 525, 527, 529, 530, 533, 535, 546, 554, 558, 559, 565, 571, 576, 595, 596, 599, 600, 604, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 635, 637, 638, 641, 643, 644, 653, 660, 664, 666, 669, 682, 700, 701, 703, 718, 719, 721, 752, 759, 763, 768, 775, 777, 788, 792, 794, 795, 796, 799, 800, 801, 809, 817, 819, 822, 824, 826, 827, 830, 833, 839, 840, 841, 846, 847, 850, 860, 866, 867, 868, 869, 871, 872, 875, 877, 881, 948, 949, 950, 951, 954, 955, 956, 959, 962, 964, 968, 969, 971, 975, 990, 995, 998, 999, 1000, 1003, 1005, 1006, 1009, 1010], "b": [0, 8, 10, 23, 25, 56, 62, 75, 94, 103, 104, 110, 114, 115, 125, 127, 139, 140, 141, 146, 150, 164, 166, 167, 182, 183, 188, 200, 217, 219, 238, 242, 244, 249, 253, 258, 291, 300, 329, 341, 343, 346, 350, 351, 352, 371, 372, 374, 377, 378, 379, 382, 402, 447, 463, 465, 506, 531, 553, 554, 555, 556, 572, 573, 575, 576, 593, 611, 612, 613, 614, 623, 634, 637, 639, 641, 645, 652, 653, 670, 684, 694, 695, 756, 757, 774, 775, 813, 839, 840, 841, 842, 845, 846, 854, 881, 888, 903, 904, 917, 919, 944, 946, 950, 951, 952, 954, 957, 959, 964, 968, 969, 983, 995, 1003, 1006, 1008, 1009, 1010], "o": [0, 17, 19, 26, 28, 35, 46, 52, 57, 58, 60, 61, 77, 79, 84, 89, 119, 136, 146, 170, 175, 180, 182, 197, 215, 225, 239, 241, 248, 279, 280, 284, 289, 292, 295, 301, 312, 324, 333, 341, 343, 346, 364, 374, 376, 379, 381, 385, 387, 409, 412, 413, 415, 438, 440, 464, 499, 569, 592, 631, 632, 657, 794, 822, 837, 878, 922, 923, 946, 948, 950, 951, 954, 955, 957, 958, 968, 969, 970, 995, 998, 1001, 1003, 1004, 1007, 1008, 1010, 1011, 1012], "m": [0, 4, 8, 11, 19, 25, 26, 41, 55, 56, 60, 61, 62, 75, 76, 87, 101, 125, 143, 164, 182, 200, 239, 243, 272, 295, 301, 304, 315, 320, 333, 334, 340, 341, 343, 344, 350, 352, 360, 364, 371, 372, 374, 376, 379, 381, 383, 385, 409, 410, 411, 415, 422, 438, 439, 465, 478, 493, 497, 499, 501, 506, 604, 610, 614, 629, 636, 650, 651, 654, 658, 673, 681, 690, 705, 720, 722, 723, 761, 762, 812, 837, 903, 933, 934, 944, 946, 948, 950, 951, 952, 954, 955, 956, 957, 958, 962, 964, 968, 970, 978, 1003, 1004, 1005, 1006, 1009, 1010, 1011, 1012], "r": [0, 8, 10, 11, 12, 14, 16, 23, 24, 25, 26, 36, 40, 62, 71, 73, 74, 75, 76, 80, 87, 94, 97, 101, 104, 105, 110, 114, 115, 116, 125, 132, 139, 140, 141, 145, 146, 147, 149, 150, 154, 164, 166, 167, 171, 182, 189, 192, 200, 207, 212, 215, 225, 228, 231, 238, 239, 242, 244, 245, 246, 249, 252, 254, 258, 261, 262, 266, 270, 272, 285, 292, 310, 312, 322, 329, 341, 343, 347, 350, 358, 360, 371, 372, 374, 376, 377, 378, 379, 381, 382, 391, 397, 402, 411, 416, 418, 430, 434, 439, 443, 447, 448, 449, 463, 469, 478, 485, 499, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 530, 532, 533, 534, 535, 553, 554, 555, 556, 571, 574, 575, 576, 592, 600, 604, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 650, 651, 657, 661, 681, 686, 687, 688, 692, 694, 745, 749, 752, 763, 777, 780, 794, 795, 796, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 812, 813, 815, 816, 817, 823, 824, 837, 842, 854, 861, 862, 866, 867, 868, 869, 871, 872, 874, 875, 876, 877, 879, 920, 944, 946, 948, 950, 951, 954, 955, 956, 957, 958, 961, 962, 964, 968, 969, 970, 973, 988, 995, 999, 1002, 1005, 1006, 1007, 1008, 1010, 1012], "d": [0, 6, 7, 8, 10, 11, 12, 13, 15, 16, 17, 19, 29, 30, 34, 35, 39, 45, 46, 47, 57, 58, 60, 66, 67, 77, 82, 85, 87, 90, 94, 96, 138, 146, 182, 190, 198, 200, 207, 210, 212, 213, 214, 215, 228, 238, 239, 247, 258, 265, 266, 272, 276, 297, 298, 301, 308, 312, 313, 322, 340, 341, 343, 348, 352, 358, 372, 374, 376, 377, 379, 381, 382, 384, 385, 409, 411, 412, 417, 425, 428, 453, 458, 468, 491, 499, 501, 522, 523, 530, 531, 546, 547, 555, 579, 580, 584, 587, 588, 609, 610, 613, 634, 635, 636, 645, 653, 654, 657, 658, 662, 664, 670, 673, 686, 687, 688, 690, 720, 728, 742, 745, 752, 775, 801, 803, 805, 806, 807, 822, 833, 837, 839, 840, 842, 854, 859, 876, 877, 881, 946, 948, 950, 951, 952, 953, 954, 956, 962, 964, 966, 969, 970, 984, 985, 986, 998, 1000, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1011], "perrot": [0, 995], "e": [0, 4, 8, 10, 11, 13, 16, 24, 25, 26, 30, 32, 50, 52, 54, 58, 66, 73, 75, 76, 77, 79, 80, 83, 90, 92, 101, 104, 111, 113, 114, 117, 118, 127, 132, 135, 136, 146, 153, 154, 155, 159, 162, 166, 171, 172, 182, 183, 184, 186, 200, 202, 203, 215, 216, 235, 239, 240, 242, 244, 245, 253, 254, 256, 258, 265, 272, 281, 284, 288, 290, 316, 322, 326, 327, 328, 329, 333, 334, 335, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 358, 359, 360, 364, 365, 368, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 402, 404, 406, 408, 409, 410, 412, 414, 415, 419, 428, 430, 431, 434, 435, 436, 437, 438, 439, 440, 441, 447, 448, 449, 461, 463, 465, 466, 467, 468, 489, 498, 499, 500, 501, 502, 503, 504, 505, 506, 511, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 542, 546, 547, 553, 554, 555, 556, 558, 559, 562, 568, 569, 570, 571, 572, 573, 574, 575, 576, 582, 587, 588, 595, 598, 599, 600, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 652, 653, 655, 657, 659, 662, 664, 666, 669, 670, 673, 674, 692, 693, 694, 695, 702, 705, 706, 719, 727, 731, 749, 752, 761, 762, 763, 764, 765, 766, 767, 769, 770, 772, 776, 777, 781, 785, 787, 788, 789, 790, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 816, 817, 818, 822, 823, 824, 826, 829, 831, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 844, 845, 846, 847, 849, 851, 852, 853, 854, 855, 856, 857, 861, 862, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 881, 897, 902, 903, 905, 908, 909, 911, 914, 922, 929, 940, 943, 944, 946, 948, 949, 950, 951, 952, 953, 954, 956, 957, 958, 959, 960, 961, 962, 964, 965, 968, 969, 970, 974, 977, 978, 986, 987, 988, 995, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "journal": [0, 76, 155, 239, 245, 256, 340, 341, 343, 372, 374, 376, 381, 417, 427, 438, 499, 506, 592, 600, 610, 654, 657, 658, 670, 680, 695, 698, 699, 722, 723, 750, 791, 796, 842, 854, 943, 944, 948, 950, 951, 952, 955, 961, 966, 968, 969], "research": [0, 136, 153, 239, 245, 256, 341, 343, 358, 374, 466, 478, 600, 610, 657, 699, 791, 796, 943, 951, 955, 957, 969, 973, 974, 978], "volum": [0, 63, 74, 136, 143, 341, 343, 374, 376, 438, 499, 733, 950, 969, 978], "page": [0, 12, 17, 25, 67, 68, 106, 108, 109, 118, 119, 122, 125, 133, 136, 143, 154, 155, 156, 163, 202, 210, 211, 212, 216, 220, 221, 222, 223, 230, 237, 239, 240, 246, 251, 277, 285, 289, 290, 292, 293, 295, 299, 328, 333, 341, 343, 346, 348, 350, 352, 354, 361, 373, 374, 376, 438, 481, 482, 483, 593, 609, 796, 861, 903, 944, 950, 954, 955, 979, 988, 993, 995, 999, 1000], "want": [0, 4, 12, 20, 23, 24, 25, 52, 61, 67, 136, 150, 154, 182, 183, 184, 216, 219, 231, 239, 253, 256, 262, 276, 302, 305, 320, 329, 333, 334, 335, 344, 345, 347, 348, 350, 351, 352, 358, 359, 360, 361, 364, 365, 368, 372, 373, 374, 375, 376, 381, 382, 383, 465, 468, 469, 475, 500, 514, 619, 620, 621, 623, 624, 631, 633, 639, 640, 641, 728, 812, 815, 831, 838, 859, 866, 943, 950, 953, 954, 955, 958, 960, 964, 965, 969, 973, 974, 979, 987, 995, 1009], "its": [0, 4, 9, 12, 13, 14, 19, 25, 26, 32, 34, 52, 62, 63, 73, 75, 77, 80, 83, 84, 85, 92, 99, 101, 107, 110, 112, 114, 117, 127, 136, 138, 143, 145, 154, 155, 157, 159, 161, 171, 195, 199, 200, 204, 209, 216, 218, 219, 221, 223, 225, 230, 231, 238, 242, 244, 246, 248, 259, 261, 265, 266, 281, 291, 300, 305, 312, 318, 320, 321, 324, 328, 329, 334, 335, 339, 340, 341, 342, 346, 347, 348, 350, 351, 354, 358, 359, 360, 361, 364, 365, 368, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 390, 405, 407, 409, 411, 415, 419, 421, 425, 428, 429, 430, 432, 435, 436, 437, 438, 439, 440, 441, 447, 448, 449, 462, 468, 488, 496, 498, 499, 502, 503, 505, 506, 507, 509, 515, 518, 520, 521, 522, 523, 524, 525, 529, 530, 531, 548, 552, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 572, 573, 576, 577, 578, 579, 580, 581, 584, 585, 586, 587, 588, 589, 590, 592, 609, 610, 636, 637, 639, 650, 651, 652, 653, 657, 661, 664, 673, 689, 693, 694, 700, 701, 705, 742, 745, 747, 761, 762, 763, 787, 794, 795, 797, 808, 809, 810, 812, 813, 814, 816, 817, 818, 825, 826, 830, 835, 838, 839, 841, 858, 859, 862, 866, 867, 874, 876, 886, 887, 892, 898, 922, 924, 943, 946, 949, 950, 951, 953, 954, 955, 956, 957, 960, 961, 962, 967, 968, 969, 970, 973, 978, 979, 981, 983, 986, 987, 988, 997, 998, 999, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1013], "api": [0, 12, 47, 53, 98, 106, 151, 208, 210, 216, 220, 221, 236, 241, 248, 249, 259, 295, 321, 322, 335, 339, 340, 346, 347, 349, 350, 355, 356, 358, 359, 361, 364, 368, 379, 381, 382, 384, 388, 391, 392, 393, 396, 398, 403, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 429, 433, 434, 435, 436, 437, 438, 439, 440, 441, 447, 448, 449, 450, 461, 469, 473, 475, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 514, 528, 529, 531, 532, 533, 534, 535, 544, 545, 546, 547, 548, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 576, 592, 593, 594, 595, 600, 603, 604, 605, 606, 607, 623, 636, 642, 653, 654, 655, 656, 657, 667, 761, 762, 766, 767, 769, 785, 792, 810, 812, 814, 815, 818, 822, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 864, 870, 871, 920, 922, 938, 943, 952, 953, 954, 957, 964, 968, 973, 974, 975, 978, 979, 983, 985, 990, 992, 993, 994, 1003, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1013], "design": [0, 14, 20, 75, 101, 122, 141, 153, 154, 163, 230, 279, 285, 328, 335, 340, 346, 351, 358, 359, 360, 361, 363, 374, 381, 383, 480, 493, 597, 598, 613, 630, 634, 641, 645, 650, 763, 781, 782, 801, 803, 944, 950, 951, 954, 955, 964, 973, 974, 978, 981, 997, 1004], "mai": [0, 8, 19, 24, 36, 41, 43, 53, 67, 80, 87, 111, 112, 117, 136, 142, 144, 146, 154, 157, 159, 162, 166, 171, 186, 188, 207, 216, 219, 242, 244, 246, 247, 274, 284, 298, 308, 312, 316, 320, 321, 322, 329, 333, 334, 335, 338, 340, 341, 342, 343, 344, 345, 346, 348, 350, 351, 354, 358, 360, 361, 364, 365, 368, 371, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 397, 404, 405, 406, 408, 409, 410, 411, 412, 414, 416, 417, 418, 419, 424, 427, 430, 434, 437, 447, 448, 449, 452, 453, 454, 461, 473, 474, 480, 499, 500, 503, 505, 506, 509, 512, 513, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 537, 539, 546, 559, 562, 567, 575, 576, 582, 585, 599, 600, 602, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 637, 638, 639, 641, 642, 643, 644, 646, 649, 651, 653, 654, 656, 657, 658, 660, 662, 670, 676, 677, 680, 681, 683, 684, 686, 687, 688, 690, 702, 720, 727, 749, 750, 763, 765, 766, 767, 768, 777, 778, 779, 782, 783, 787, 791, 794, 799, 800, 801, 802, 803, 805, 808, 809, 810, 812, 814, 816, 817, 818, 824, 825, 826, 829, 831, 841, 843, 844, 845, 846, 847, 849, 855, 858, 859, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 879, 884, 906, 907, 922, 943, 944, 946, 948, 950, 951, 954, 955, 956, 957, 958, 960, 961, 962, 964, 965, 966, 967, 968, 969, 970, 971, 974, 979, 985, 986, 995, 997, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "consid": [0, 4, 12, 13, 14, 20, 24, 36, 52, 63, 67, 76, 83, 87, 91, 111, 114, 131, 135, 136, 150, 155, 182, 184, 216, 239, 242, 246, 250, 259, 262, 265, 266, 279, 290, 305, 312, 313, 316, 320, 329, 333, 334, 335, 338, 345, 346, 348, 352, 354, 358, 360, 361, 365, 370, 374, 379, 380, 381, 382, 383, 384, 385, 386, 403, 409, 411, 415, 422, 439, 473, 474, 486, 498, 506, 514, 515, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 550, 551, 553, 554, 556, 558, 572, 573, 585, 596, 597, 598, 611, 617, 623, 624, 625, 627, 636, 644, 653, 654, 655, 657, 658, 659, 661, 665, 667, 670, 672, 674, 680, 690, 694, 698, 720, 750, 752, 758, 808, 809, 810, 812, 814, 816, 817, 818, 821, 823, 824, 829, 839, 840, 847, 861, 862, 871, 872, 874, 875, 876, 877, 938, 943, 949, 950, 951, 952, 954, 955, 957, 960, 961, 962, 964, 968, 969, 970, 974, 979, 986, 998, 999, 1003, 1007, 1008, 1010, 1011, 1012], "softwar": [0, 136, 333, 343, 346, 354, 358, 360, 382, 592, 600, 623, 944, 978], "from": [0, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 82, 83, 84, 85, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 131, 132, 133, 134, 135, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 153, 154, 155, 157, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 286, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 324, 325, 326, 327, 328, 329, 333, 335, 338, 339, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 359, 360, 361, 363, 364, 365, 368, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 915, 916, 917, 918, 919, 921, 922, 923, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 946, 948, 949, 950, 951, 952, 953, 955, 956, 957, 958, 959, 960, 961, 962, 964, 965, 966, 967, 968, 969, 970, 972, 973, 974, 975, 978, 980, 982, 983, 984, 985, 990, 992, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "2013": [0, 159, 343, 374, 378, 379, 501, 690, 720, 946, 954, 972, 996, 997], "inproceed": 0, "sklearn_api": 0, "ga": 0, "l": [0, 7, 14, 16, 17, 37, 43, 44, 63, 64, 76, 104, 136, 156, 174, 177, 186, 191, 192, 244, 245, 246, 256, 275, 283, 316, 343, 344, 352, 354, 371, 372, 374, 378, 379, 381, 384, 439, 481, 482, 483, 503, 505, 512, 520, 521, 522, 523, 530, 531, 555, 572, 573, 575, 576, 580, 584, 587, 588, 599, 613, 614, 623, 634, 637, 639, 645, 652, 654, 657, 658, 670, 680, 689, 690, 695, 720, 750, 803, 837, 874, 875, 876, 877, 943, 948, 950, 951, 954, 956, 957, 958, 962, 966, 968, 970, 987, 998, 1003, 1007, 1008, 1009, 1010, 1012], "booktitl": 0, "ecml": 0, "pkdd": 0, "workshop": [0, 374, 382, 801, 956, 972], "languag": [0, 322, 351, 368, 379, 382, 968, 973, 974, 978, 980], "data": [0, 3, 6, 8, 11, 13, 14, 15, 16, 19, 21, 24, 26, 28, 29, 30, 31, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 45, 48, 49, 50, 51, 53, 56, 57, 58, 59, 62, 65, 67, 68, 70, 74, 76, 83, 85, 86, 87, 90, 91, 95, 97, 99, 101, 103, 104, 106, 107, 110, 111, 113, 114, 119, 120, 121, 123, 125, 127, 128, 129, 133, 137, 138, 139, 140, 142, 143, 145, 147, 149, 151, 154, 155, 160, 161, 164, 165, 166, 167, 171, 172, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 188, 190, 191, 195, 196, 198, 199, 200, 202, 203, 204, 205, 206, 209, 212, 213, 214, 216, 218, 219, 220, 223, 225, 226, 227, 228, 229, 231, 233, 237, 239, 241, 242, 243, 244, 247, 253, 256, 258, 259, 263, 265, 267, 268, 269, 270, 272, 275, 276, 278, 280, 281, 282, 286, 288, 290, 292, 293, 294, 298, 299, 301, 302, 304, 305, 307, 312, 313, 320, 325, 326, 327, 328, 332, 334, 338, 339, 340, 342, 343, 346, 348, 349, 352, 353, 354, 355, 359, 364, 365, 368, 370, 371, 372, 373, 376, 377, 379, 380, 381, 382, 384, 385, 386, 387, 388, 389, 391, 392, 393, 398, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 478, 479, 480, 485, 486, 487, 488, 489, 491, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 537, 538, 546, 547, 548, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 571, 572, 573, 574, 575, 576, 582, 583, 587, 590, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 661, 662, 663, 664, 665, 666, 667, 669, 670, 672, 673, 675, 676, 678, 682, 683, 685, 689, 691, 692, 693, 694, 695, 698, 700, 701, 702, 704, 705, 718, 719, 721, 725, 727, 728, 733, 747, 748, 749, 751, 752, 753, 757, 759, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 787, 788, 789, 790, 791, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 878, 879, 880, 882, 884, 885, 886, 887, 890, 891, 892, 900, 902, 903, 917, 920, 925, 926, 928, 929, 930, 931, 932, 933, 934, 935, 941, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 965, 966, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 981, 983, 984, 986, 990, 992, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "mine": [0, 239, 321, 341, 374, 385, 409, 476, 528, 685, 698, 704, 747, 950, 954, 960, 966], "108": [0, 8, 168, 996], "122": [0, 13, 85, 103, 143, 150, 155, 214, 352, 955, 975], "high": [0, 4, 9, 11, 12, 24, 26, 29, 34, 37, 41, 46, 52, 54, 59, 62, 66, 70, 75, 76, 89, 90, 104, 106, 107, 108, 109, 114, 115, 118, 120, 128, 129, 136, 138, 144, 150, 153, 155, 156, 157, 166, 177, 183, 184, 186, 196, 202, 203, 204, 209, 213, 225, 231, 237, 241, 245, 246, 254, 265, 266, 274, 276, 281, 283, 284, 285, 286, 294, 300, 305, 307, 308, 320, 321, 326, 327, 333, 341, 343, 346, 351, 354, 355, 358, 359, 371, 372, 373, 374, 378, 380, 381, 382, 383, 384, 409, 412, 414, 415, 417, 434, 447, 448, 449, 518, 519, 522, 523, 524, 525, 528, 529, 530, 531, 532, 533, 609, 635, 636, 644, 654, 657, 658, 690, 695, 706, 710, 720, 753, 756, 771, 773, 806, 807, 811, 840, 841, 845, 847, 868, 870, 871, 874, 875, 876, 877, 923, 943, 948, 949, 950, 951, 953, 954, 957, 958, 960, 962, 964, 966, 969, 970, 971, 973, 974, 979, 980, 982, 988, 995, 996, 998, 999, 1003, 1006, 1007, 1008, 1009, 1010], "qualiti": [0, 6, 20, 23, 34, 43, 45, 46, 55, 90, 110, 117, 154, 188, 233, 237, 246, 247, 248, 312, 346, 354, 358, 360, 368, 369, 373, 374, 376, 379, 417, 427, 434, 439, 522, 523, 524, 525, 529, 530, 707, 777, 858, 859, 874, 875, 876, 877, 903, 949, 951, 959, 966, 970, 973, 974, 978, 983, 984, 990], "png": [0, 30, 878], "svg": 0, "logo": [0, 378, 770], "avail": [0, 5, 11, 12, 14, 38, 53, 54, 90, 109, 113, 117, 136, 138, 143, 147, 153, 154, 155, 171, 182, 190, 200, 203, 216, 219, 236, 237, 242, 243, 246, 264, 265, 266, 272, 284, 288, 289, 290, 291, 293, 294, 300, 302, 329, 333, 340, 341, 343, 344, 345, 346, 347, 351, 355, 359, 360, 364, 368, 371, 373, 374, 375, 378, 379, 380, 381, 382, 383, 385, 412, 415, 416, 417, 418, 434, 435, 436, 437, 438, 439, 440, 441, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 473, 500, 514, 520, 521, 522, 523, 524, 525, 529, 530, 534, 535, 553, 556, 558, 559, 575, 576, 592, 597, 598, 612, 616, 618, 620, 622, 626, 628, 630, 633, 635, 636, 637, 638, 639, 640, 641, 654, 661, 664, 696, 697, 763, 766, 767, 777, 788, 789, 794, 795, 796, 797, 798, 799, 800, 812, 823, 824, 826, 833, 842, 845, 850, 854, 859, 910, 915, 922, 944, 948, 951, 953, 954, 955, 956, 957, 960, 964, 967, 968, 969, 972, 973, 974, 977, 978, 979, 983, 988, 990, 995, 1000, 1001, 1002, 1003, 1004, 1005, 1008, 1009, 1011], "doc": [0, 4, 8, 19, 320, 322, 334, 344, 346, 350, 351, 354, 360, 364, 367, 368, 382, 553, 554, 556, 742, 745, 756, 757, 789, 988, 995, 999, 1009], "sourc": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 153, 154, 155, 156, 157, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 324, 325, 326, 327, 328, 329, 340, 343, 345, 346, 347, 349, 350, 352, 354, 355, 358, 359, 364, 368, 371, 375, 379, 381, 382, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 938, 939, 940, 941, 942, 951, 964, 970, 973, 975, 978, 987, 988, 1005, 1009], "directori": [0, 8, 261, 340, 344, 346, 348, 352, 354, 360, 364, 375, 406, 410, 415, 451, 464, 826, 827, 1009], "driven": [0, 157, 978], "howev": [0, 4, 5, 7, 13, 14, 23, 24, 26, 34, 44, 46, 50, 52, 57, 68, 71, 73, 77, 79, 92, 94, 104, 106, 107, 111, 114, 115, 122, 133, 136, 138, 143, 144, 155, 156, 163, 171, 182, 186, 203, 206, 207, 209, 215, 216, 219, 239, 246, 253, 256, 258, 259, 264, 275, 279, 290, 312, 316, 320, 321, 329, 333, 334, 335, 340, 341, 343, 344, 345, 346, 348, 352, 354, 358, 360, 365, 368, 370, 371, 372, 374, 375, 376, 378, 379, 380, 381, 382, 383, 384, 405, 408, 412, 414, 416, 419, 424, 461, 473, 497, 516, 532, 546, 547, 548, 554, 571, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 595, 597, 598, 603, 608, 620, 621, 637, 652, 657, 660, 665, 727, 729, 763, 766, 767, 777, 789, 793, 794, 805, 823, 824, 829, 838, 839, 844, 868, 869, 871, 882, 923, 943, 944, 947, 948, 949, 950, 951, 953, 954, 955, 957, 958, 959, 961, 962, 964, 968, 969, 970, 979, 983, 986, 1004, 1005, 1007, 1008, 1011], "institut": [0, 343, 957], "privat": [0, 350, 360, 361, 882, 978, 995, 1003, 1005, 1006, 1008, 1009], "grant": [0, 219, 346], "assur": [0, 360, 761, 762, 1002, 1003, 1004, 1005, 1006, 1007, 1008], "sustain": 0, "like": [0, 4, 12, 13, 19, 49, 52, 55, 57, 66, 82, 85, 90, 94, 96, 99, 101, 103, 108, 114, 117, 118, 138, 144, 154, 162, 182, 231, 239, 242, 243, 246, 247, 253, 268, 277, 279, 284, 285, 288, 300, 308, 312, 320, 321, 329, 333, 335, 338, 340, 341, 344, 345, 346, 348, 350, 353, 354, 355, 358, 359, 360, 365, 368, 370, 372, 374, 375, 377, 378, 379, 381, 382, 383, 385, 386, 387, 389, 390, 391, 392, 393, 395, 396, 397, 398, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 423, 424, 425, 426, 427, 428, 429, 430, 432, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 477, 478, 480, 484, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 544, 546, 547, 548, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 698, 699, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 822, 823, 824, 825, 826, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 884, 891, 892, 905, 908, 917, 918, 922, 925, 926, 927, 939, 941, 943, 946, 948, 949, 950, 951, 954, 956, 957, 958, 960, 961, 964, 969, 970, 973, 974, 978, 979, 986, 988, 992, 995, 998, 999, 1002, 1003, 1005, 1006, 1007, 1009, 1010, 1011, 1012], "thank": [0, 4, 17, 24, 52, 80, 156, 159, 182, 248, 320, 321, 345, 354, 973, 978, 995, 999, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "funder": 0, "probabl": [0, 13, 16, 22, 26, 27, 32, 52, 71, 84, 85, 100, 117, 123, 131, 137, 138, 139, 140, 151, 154, 174, 194, 197, 198, 202, 206, 210, 212, 213, 239, 241, 242, 245, 246, 249, 277, 279, 283, 288, 290, 300, 302, 315, 316, 333, 341, 342, 348, 352, 358, 360, 374, 378, 379, 382, 383, 384, 400, 401, 402, 403, 404, 411, 412, 414, 469, 477, 480, 488, 492, 514, 515, 516, 518, 520, 522, 524, 526, 529, 532, 534, 535, 558, 559, 575, 578, 579, 587, 592, 596, 597, 598, 623, 624, 636, 641, 657, 663, 665, 667, 668, 671, 672, 674, 677, 681, 685, 690, 691, 693, 703, 704, 705, 706, 720, 746, 748, 751, 752, 753, 758, 761, 762, 763, 766, 767, 777, 791, 792, 795, 797, 798, 801, 802, 803, 804, 805, 808, 811, 816, 822, 823, 847, 859, 860, 861, 862, 863, 866, 868, 871, 874, 876, 948, 949, 950, 951, 952, 953, 954, 956, 957, 958, 959, 960, 961, 964, 966, 967, 968, 970, 974, 975, 976, 988, 990, 995, 997, 999, 1001, 1003, 1004, 1005, 1006, 1007, 1009], "stefani": [0, 1008, 1010, 1011, 1012, 1013], "senger": [0, 1011, 1012, 1013], "member": [0, 320, 321, 341, 346, 349, 361, 374, 389, 407, 411, 413, 416, 418, 457, 520, 521, 522, 523, 528, 529, 530, 531, 546, 623, 624, 631, 632, 633, 641, 642, 643, 669, 670, 680, 682, 695, 700, 701, 721, 750, 759, 763, 866, 950, 957, 979, 995, 1007, 1010], "consortium": [0, 978], "foundat": [0, 122, 346, 372, 957], "maintain": [0, 52, 187, 200, 202, 216, 239, 334, 345, 349, 352, 353, 354, 358, 360, 364, 374, 381, 405, 407, 835, 836, 842, 843, 846, 851, 854, 855, 857, 950, 951, 964, 973, 974, 979, 990, 1010], "improv": [0, 4, 23, 24, 31, 73, 74, 77, 92, 97, 101, 102, 107, 110, 112, 113, 114, 116, 117, 122, 132, 150, 154, 159, 168, 182, 190, 200, 240, 242, 256, 259, 262, 277, 284, 294, 311, 312, 321, 329, 334, 344, 349, 351, 352, 354, 355, 358, 360, 361, 368, 373, 379, 381, 383, 414, 415, 496, 497, 499, 502, 503, 504, 506, 507, 508, 511, 519, 522, 523, 524, 525, 526, 527, 529, 530, 575, 576, 608, 617, 629, 631, 632, 633, 637, 638, 639, 640, 641, 643, 650, 652, 657, 693, 694, 748, 751, 752, 815, 823, 824, 840, 842, 854, 874, 875, 877, 903, 948, 950, 951, 954, 957, 958, 968, 969, 970, 972, 973, 974, 978, 986, 995, 996, 997, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "through": [0, 7, 13, 32, 106, 136, 146, 154, 186, 202, 214, 216, 234, 239, 242, 264, 283, 284, 306, 313, 322, 328, 343, 344, 346, 348, 353, 355, 360, 361, 364, 365, 374, 377, 379, 381, 383, 384, 391, 397, 411, 429, 432, 437, 500, 506, 522, 523, 526, 529, 530, 531, 546, 558, 559, 562, 612, 616, 618, 620, 623, 624, 626, 628, 630, 633, 641, 642, 653, 656, 685, 769, 785, 842, 854, 858, 859, 874, 875, 876, 877, 909, 912, 943, 944, 951, 954, 956, 957, 958, 960, 962, 964, 968, 969, 970, 978, 979, 986, 988, 995, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1010, 1011, 1012], "financi": [0, 12, 374, 381, 950], "nvidia": [0, 358], "2022": [0, 334, 381, 670, 964, 1009, 1010], "microsoft": [0, 12, 344, 347, 364], "m\u00fcller": [0, 29, 280, 281, 361, 379, 500, 832, 958, 964, 968, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1009], "2020": [0, 341, 1005, 1006, 1007, 1008], "quansight": 0, "lab": [0, 341, 433, 501, 864, 978, 1006], "2023": [0, 358, 372, 1010, 1011], "2021": [0, 344, 346, 636, 1007, 1008], "columbia": 0, "univers": [0, 146, 320, 341, 343, 349, 374, 379, 382, 555, 752, 801, 805, 861, 950, 952, 954, 956], "2016": [0, 207, 340, 374, 943, 1000, 1001], "sydnei": 0, "2017": [0, 239, 340, 372, 374, 385, 409, 954, 1001, 1002], "receiv": [0, 19, 127, 151, 210, 216, 222, 232, 234, 236, 246, 300, 322, 329, 346, 348, 354, 360, 378, 381, 469, 623, 667, 671, 673, 691, 746, 752, 753, 782, 792, 794, 795, 833, 871, 955, 958, 959, 968, 975, 1005, 1006], "alfr": 0, "sloan": 0, "posit": [0, 4, 6, 8, 11, 12, 16, 23, 24, 26, 64, 97, 117, 119, 124, 153, 154, 166, 167, 177, 182, 183, 184, 186, 200, 205, 213, 219, 236, 239, 242, 246, 248, 249, 279, 289, 290, 294, 320, 328, 333, 341, 345, 346, 348, 353, 355, 360, 361, 372, 374, 375, 376, 378, 379, 380, 381, 382, 383, 386, 403, 404, 407, 411, 412, 414, 429, 432, 459, 463, 465, 469, 473, 474, 475, 490, 492, 494, 495, 496, 498, 500, 501, 502, 507, 510, 511, 513, 514, 515, 522, 526, 527, 528, 529, 557, 558, 559, 560, 561, 563, 564, 565, 571, 575, 576, 585, 596, 597, 608, 611, 612, 613, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 634, 637, 638, 639, 640, 642, 645, 646, 647, 648, 649, 652, 655, 663, 665, 667, 672, 674, 677, 678, 680, 681, 683, 685, 688, 691, 693, 694, 695, 699, 700, 702, 703, 704, 705, 706, 707, 708, 716, 718, 722, 730, 746, 747, 748, 751, 752, 753, 761, 762, 766, 767, 789, 806, 807, 808, 810, 812, 814, 816, 818, 819, 829, 830, 833, 839, 842, 845, 850, 854, 858, 859, 861, 862, 866, 867, 870, 871, 872, 874, 876, 883, 901, 903, 919, 921, 945, 946, 950, 952, 954, 955, 957, 958, 959, 961, 964, 969, 984, 986, 988, 996, 998, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "It": [0, 4, 7, 8, 9, 13, 16, 20, 24, 32, 34, 37, 50, 52, 55, 68, 73, 75, 77, 87, 90, 91, 96, 101, 104, 106, 107, 110, 112, 114, 117, 122, 136, 143, 144, 145, 149, 150, 154, 155, 156, 162, 166, 170, 171, 179, 182, 186, 196, 199, 200, 202, 203, 209, 214, 216, 219, 234, 235, 237, 239, 240, 242, 245, 246, 256, 259, 265, 266, 267, 269, 270, 272, 279, 283, 284, 286, 288, 294, 304, 308, 312, 316, 320, 321, 322, 329, 333, 334, 335, 339, 341, 343, 344, 346, 348, 350, 351, 352, 354, 355, 358, 359, 360, 364, 365, 368, 372, 373, 374, 375, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 399, 402, 403, 406, 407, 408, 409, 410, 412, 413, 414, 417, 424, 427, 432, 433, 434, 439, 443, 450, 452, 461, 473, 480, 489, 498, 500, 501, 503, 505, 506, 514, 515, 518, 519, 522, 523, 524, 525, 526, 527, 529, 530, 531, 532, 554, 561, 567, 571, 572, 573, 576, 579, 580, 584, 585, 587, 588, 592, 595, 596, 597, 598, 606, 607, 608, 611, 612, 615, 617, 618, 619, 620, 623, 625, 626, 627, 628, 631, 632, 633, 635, 636, 637, 639, 641, 642, 643, 646, 647, 648, 649, 652, 654, 656, 657, 658, 660, 661, 662, 663, 664, 665, 667, 669, 673, 674, 675, 681, 687, 698, 706, 707, 711, 722, 723, 726, 729, 745, 747, 752, 763, 765, 766, 767, 769, 775, 776, 777, 785, 787, 790, 793, 802, 803, 808, 809, 810, 812, 815, 816, 817, 818, 822, 823, 824, 828, 829, 830, 834, 835, 836, 840, 843, 845, 855, 858, 859, 863, 864, 866, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 879, 890, 903, 911, 912, 922, 925, 928, 930, 931, 932, 933, 934, 935, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 964, 965, 967, 968, 969, 970, 973, 978, 979, 985, 986, 987, 988, 995, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "provid": [0, 5, 8, 11, 13, 23, 26, 28, 32, 34, 39, 52, 57, 76, 87, 103, 108, 109, 117, 120, 122, 138, 144, 154, 155, 161, 168, 170, 171, 174, 183, 186, 191, 203, 207, 210, 211, 216, 230, 239, 240, 241, 245, 269, 272, 276, 279, 283, 288, 289, 291, 293, 306, 312, 313, 316, 320, 321, 324, 325, 328, 329, 333, 335, 338, 340, 341, 342, 344, 345, 346, 347, 348, 349, 352, 354, 355, 358, 359, 360, 363, 364, 365, 368, 370, 371, 373, 374, 375, 376, 378, 379, 381, 382, 383, 384, 385, 386, 388, 395, 402, 405, 407, 408, 409, 411, 412, 414, 415, 417, 424, 425, 430, 434, 435, 436, 437, 438, 439, 440, 441, 447, 448, 449, 458, 459, 461, 463, 466, 497, 498, 499, 500, 503, 505, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 546, 547, 553, 555, 556, 558, 559, 566, 570, 575, 576, 592, 597, 598, 599, 600, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 655, 659, 664, 676, 699, 705, 706, 728, 738, 742, 752, 756, 758, 762, 763, 764, 765, 766, 767, 768, 770, 771, 772, 773, 775, 776, 777, 781, 782, 783, 784, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 810, 811, 812, 813, 814, 816, 817, 818, 823, 824, 826, 829, 831, 832, 833, 836, 837, 838, 841, 843, 845, 846, 861, 862, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 881, 892, 897, 911, 913, 930, 931, 932, 943, 944, 946, 949, 950, 951, 953, 954, 955, 957, 958, 959, 960, 961, 962, 964, 967, 968, 969, 970, 971, 973, 974, 977, 978, 979, 983, 986, 988, 992, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "2012": [0, 76, 372, 381, 520, 521, 528, 604, 707, 943, 947, 954, 972, 995], "fulltime": [0, 3, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 17, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 153, 154, 155, 156, 157, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 321, 322, 324, 325, 326, 327, 328, 329, 333, 334, 335, 340, 341, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 358, 360, 361, 365, 370, 371, 372, 373, 374, 376, 377, 379, 381, 382, 385, 402, 406, 408, 409, 410, 411, 412, 415, 417, 420, 422, 423, 424, 426, 427, 428, 429, 430, 432, 433, 437, 461, 464, 466, 484, 488, 499, 501, 503, 505, 512, 527, 532, 533, 534, 535, 555, 575, 584, 592, 593, 594, 595, 599, 604, 605, 608, 611, 615, 617, 619, 625, 627, 629, 631, 632, 638, 641, 642, 643, 650, 651, 655, 657, 659, 666, 706, 709, 710, 712, 754, 758, 761, 762, 763, 765, 766, 767, 768, 770, 772, 777, 778, 779, 782, 784, 787, 788, 789, 790, 791, 792, 794, 796, 801, 802, 803, 804, 805, 806, 807, 814, 816, 817, 818, 822, 823, 824, 825, 826, 827, 828, 830, 831, 833, 836, 839, 841, 845, 850, 858, 859, 863, 864, 868, 871, 872, 880, 905, 920, 943, 944, 946, 947, 950, 951, 953, 954, 955, 956, 957, 958, 959, 961, 962, 964, 966, 967, 968, 969, 970, 973, 978, 979, 984, 986, 987, 988, 995, 997, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "host": [0, 107, 294, 320, 341, 346, 350, 354, 355, 859, 922, 988, 1011], "other": [0, 4, 8, 12, 13, 23, 26, 28, 29, 31, 34, 37, 41, 49, 54, 63, 65, 67, 68, 80, 89, 90, 92, 94, 104, 106, 107, 110, 111, 114, 115, 117, 118, 124, 131, 149, 150, 151, 153, 154, 155, 156, 159, 161, 175, 182, 186, 200, 202, 203, 204, 206, 209, 210, 211, 213, 215, 216, 219, 220, 227, 230, 234, 236, 239, 240, 241, 248, 249, 256, 264, 265, 266, 278, 279, 283, 284, 286, 288, 289, 291, 295, 297, 308, 312, 315, 318, 320, 321, 324, 328, 329, 333, 338, 339, 341, 342, 343, 344, 346, 348, 350, 351, 352, 354, 355, 359, 360, 361, 364, 365, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 402, 408, 409, 411, 412, 413, 414, 415, 417, 422, 429, 430, 434, 435, 436, 437, 438, 439, 440, 441, 447, 448, 449, 453, 461, 462, 468, 498, 499, 500, 503, 506, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 546, 547, 553, 554, 555, 556, 559, 562, 567, 575, 576, 577, 578, 585, 592, 593, 595, 600, 604, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 652, 655, 657, 661, 664, 669, 683, 727, 738, 742, 749, 756, 763, 764, 765, 766, 767, 768, 769, 770, 772, 777, 780, 781, 782, 785, 786, 787, 788, 789, 790, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 811, 813, 816, 817, 821, 823, 824, 826, 827, 829, 831, 832, 833, 835, 836, 838, 839, 840, 842, 843, 844, 845, 846, 847, 854, 861, 862, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 897, 911, 943, 944, 946, 947, 948, 950, 951, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 964, 967, 968, 969, 970, 974, 975, 976, 977, 978, 979, 983, 986, 987, 990, 996, 998, 999, 1001, 1002, 1003, 1004, 1008, 1009, 1010, 1011, 1012], "event": [0, 4, 16, 182, 200, 242, 372, 374, 553, 554, 601, 801, 891, 950, 955, 956, 973, 978, 1001], "pari": [0, 343, 375, 431, 728, 834, 965, 1009], "saclai": 0, "center": [0, 4, 7, 8, 9, 14, 23, 25, 31, 32, 34, 35, 37, 39, 40, 42, 45, 46, 47, 50, 52, 53, 56, 57, 58, 60, 61, 76, 84, 92, 93, 96, 112, 113, 114, 115, 136, 150, 155, 163, 174, 176, 182, 183, 193, 194, 205, 206, 209, 210, 219, 225, 228, 229, 234, 240, 250, 264, 267, 269, 275, 279, 281, 282, 292, 299, 306, 308, 309, 310, 315, 321, 322, 341, 342, 343, 351, 373, 374, 376, 377, 379, 380, 381, 387, 405, 407, 408, 411, 412, 413, 414, 417, 419, 424, 425, 426, 427, 428, 434, 435, 436, 437, 438, 439, 440, 441, 442, 444, 445, 447, 448, 449, 450, 466, 477, 489, 499, 500, 506, 509, 515, 571, 574, 575, 576, 597, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 625, 626, 627, 628, 629, 630, 631, 632, 633, 636, 637, 638, 639, 640, 641, 643, 655, 659, 661, 761, 831, 832, 835, 844, 846, 856, 857, 866, 867, 948, 950, 951, 953, 961, 996, 998, 999, 1000, 1001, 1002, 1003, 1006, 1007, 1008, 1009, 1012], "scienc": [0, 35, 75, 136, 146, 256, 340, 343, 358, 374, 405, 419, 503, 505, 512, 653, 654, 658, 813, 944, 946, 950, 951, 954, 957, 966, 974, 978, 982, 1003], "one": [0, 4, 8, 9, 10, 13, 15, 16, 17, 24, 25, 26, 30, 31, 32, 34, 37, 44, 50, 52, 54, 55, 57, 58, 61, 63, 67, 76, 82, 83, 84, 87, 90, 92, 96, 106, 107, 112, 114, 117, 118, 122, 125, 135, 136, 138, 145, 146, 149, 153, 154, 155, 156, 157, 159, 161, 162, 166, 171, 172, 174, 175, 176, 178, 182, 184, 191, 192, 197, 200, 204, 209, 216, 217, 219, 227, 230, 235, 236, 237, 239, 240, 242, 243, 246, 247, 248, 249, 256, 258, 259, 264, 277, 280, 281, 284, 285, 288, 290, 291, 292, 300, 307, 308, 317, 320, 321, 322, 324, 328, 329, 333, 334, 335, 340, 341, 342, 343, 345, 346, 348, 350, 351, 352, 353, 354, 355, 358, 360, 361, 363, 364, 365, 368, 371, 372, 373, 374, 375, 376, 378, 379, 380, 381, 382, 383, 384, 385, 409, 410, 411, 412, 414, 415, 416, 417, 418, 420, 421, 422, 425, 427, 429, 434, 439, 452, 453, 455, 456, 457, 458, 459, 460, 461, 465, 466, 467, 468, 469, 470, 473, 474, 475, 477, 479, 499, 504, 505, 506, 508, 512, 516, 522, 523, 524, 525, 526, 527, 529, 530, 531, 532, 534, 546, 548, 549, 553, 554, 555, 556, 575, 576, 580, 581, 585, 592, 595, 597, 598, 599, 600, 608, 612, 613, 614, 615, 619, 622, 623, 624, 626, 631, 633, 634, 636, 638, 639, 640, 641, 643, 645, 653, 657, 660, 664, 668, 674, 676, 685, 693, 694, 698, 702, 714, 715, 718, 727, 735, 738, 742, 743, 744, 745, 747, 748, 751, 752, 754, 755, 756, 757, 760, 761, 762, 763, 766, 767, 769, 770, 771, 773, 775, 777, 781, 782, 785, 787, 789, 790, 792, 793, 794, 795, 796, 798, 799, 806, 807, 808, 809, 810, 811, 812, 814, 815, 816, 817, 818, 822, 826, 829, 830, 831, 833, 834, 836, 837, 838, 839, 840, 845, 846, 847, 850, 852, 866, 868, 869, 870, 871, 872, 874, 875, 876, 877, 882, 892, 895, 905, 912, 925, 943, 944, 946, 948, 949, 951, 952, 953, 955, 956, 957, 958, 959, 960, 961, 962, 964, 965, 968, 969, 970, 971, 972, 973, 978, 979, 983, 985, 986, 987, 988, 992, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "2014": [0, 49, 340, 379, 381, 384, 495, 572, 573, 587, 588, 623, 657, 823, 824, 902, 903, 951, 958, 978, 998], "2015": [0, 155, 340, 673, 686, 687, 688, 823, 824, 954, 961, 978, 999, 1000], "50": [0, 4, 7, 10, 13, 15, 16, 23, 30, 31, 35, 39, 47, 49, 56, 57, 62, 63, 66, 67, 79, 85, 87, 90, 96, 101, 104, 107, 114, 117, 120, 121, 136, 139, 141, 142, 143, 144, 153, 154, 155, 162, 166, 177, 182, 185, 189, 190, 194, 196, 198, 200, 202, 206, 207, 212, 213, 215, 223, 234, 239, 241, 242, 252, 259, 277, 279, 283, 290, 292, 298, 300, 302, 306, 315, 321, 341, 343, 346, 351, 378, 381, 382, 383, 386, 407, 438, 444, 445, 465, 469, 486, 488, 491, 498, 504, 509, 518, 519, 534, 558, 559, 571, 573, 574, 580, 582, 623, 624, 631, 632, 633, 635, 641, 642, 643, 657, 678, 756, 763, 777, 795, 815, 866, 875, 949, 950, 954, 955, 957, 960, 964, 977, 995, 1012], "2018": [0, 182, 200, 382, 415, 943, 954, 978, 1002, 1003], "nyu": [0, 164, 815], "moor": [0, 699, 954, 978, 1012], "environ": [0, 12, 25, 67, 68, 106, 108, 109, 118, 119, 122, 125, 133, 143, 154, 155, 156, 163, 210, 211, 212, 216, 220, 221, 222, 223, 230, 237, 239, 240, 246, 251, 277, 285, 289, 290, 292, 293, 295, 299, 328, 333, 341, 343, 344, 346, 348, 352, 354, 358, 364, 368, 370, 373, 375, 464, 974, 978, 1002, 1003, 1012], "student": [0, 89, 239, 951, 974, 978], "t\u00e9l\u00e9com": 0, "paristech": [0, 23, 24, 39, 209], "rv": [0, 243, 279, 767, 775, 777, 943, 995, 996, 999, 1000, 1001, 1002, 1003], "thierri": [0, 225, 227, 978, 1001, 1002, 1009], "guillemot": [0, 225, 227, 1001, 1002], "labex": 0, "digicosm": 0, "goix": [0, 999, 1001, 1002, 1003, 1004], "mathurin": [0, 1006, 1008, 1009], "massia": [0, 1006, 1008, 1009], "2019": [0, 155, 344, 374, 417, 427, 657, 951, 954, 961, 964, 1003, 1004, 1005], "dure": [0, 4, 5, 12, 13, 47, 52, 55, 68, 71, 80, 92, 105, 111, 112, 117, 119, 133, 138, 143, 154, 155, 157, 171, 183, 190, 237, 241, 259, 290, 291, 312, 333, 335, 344, 346, 348, 351, 360, 361, 374, 375, 379, 381, 382, 384, 385, 402, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 424, 429, 430, 434, 435, 436, 437, 438, 439, 440, 441, 447, 448, 449, 450, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 546, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 575, 576, 578, 579, 580, 582, 584, 585, 587, 588, 590, 592, 593, 594, 595, 597, 600, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 653, 654, 655, 656, 657, 665, 753, 761, 762, 763, 766, 767, 777, 787, 788, 789, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 822, 823, 824, 825, 826, 829, 830, 831, 832, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 851, 857, 858, 859, 861, 862, 863, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 943, 944, 946, 950, 951, 957, 964, 966, 970, 983, 988, 990, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012], "phd": [0, 374, 381, 974, 978], "chan": [0, 804, 846], "zuckerberg": 0, "initi": [0, 7, 12, 17, 33, 39, 40, 42, 54, 55, 57, 60, 61, 76, 115, 123, 124, 125, 139, 144, 151, 154, 162, 175, 197, 202, 203, 207, 224, 226, 227, 239, 259, 290, 299, 308, 321, 329, 334, 341, 346, 348, 354, 355, 358, 360, 374, 379, 381, 383, 384, 386, 407, 408, 412, 413, 414, 415, 416, 417, 418, 424, 425, 426, 427, 443, 477, 480, 496, 497, 498, 502, 503, 505, 508, 510, 511, 512, 513, 518, 519, 524, 525, 558, 572, 573, 575, 576, 584, 585, 592, 605, 610, 611, 612, 613, 617, 618, 623, 625, 626, 627, 628, 631, 632, 633, 634, 636, 641, 642, 643, 645, 646, 649, 655, 656, 657, 659, 660, 761, 762, 796, 815, 822, 823, 824, 862, 889, 902, 903, 923, 928, 929, 946, 950, 951, 953, 958, 959, 960, 968, 970, 973, 975, 985, 987, 995, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "were": [0, 4, 30, 66, 67, 70, 75, 76, 107, 111, 114, 117, 133, 136, 143, 150, 182, 183, 186, 210, 219, 248, 250, 276, 277, 284, 289, 290, 292, 293, 294, 295, 300, 312, 320, 322, 328, 329, 340, 341, 343, 346, 347, 350, 358, 360, 365, 371, 375, 381, 382, 429, 432, 433, 461, 526, 527, 553, 556, 567, 766, 767, 782, 790, 863, 864, 943, 946, 954, 955, 970, 987, 988, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012], "program": [0, 47, 136, 321, 329, 334, 335, 343, 344, 346, 348, 352, 358, 473, 600, 635, 856, 857, 950, 969, 970, 973, 974, 977, 995, 997], "immanuel": [0, 995, 996, 1000], "bayer": [0, 995, 996, 1000], "kemal": [0, 20, 21, 997, 998], "eren": [0, 20, 21, 997, 998], "tr\u00e9segni": [0, 997], "hamzeh": [0, 998, 999], "alsalhi": [0, 998, 999], "issam": [0, 274, 1001], "laradji": [0, 274, 1001], "maheshakya": [0, 998, 999, 1000], "wijewardena": [0, 998, 999, 1000], "xue": [0, 999, 1000, 1001, 1003, 1004, 1007], "nelson": [0, 1001, 1002, 1007], "yenchen": [0, 1001], "lin": [0, 499, 623, 969, 1000, 1001, 1002, 1003], "neurodebian": 0, "debian": [0, 333, 344, 352], "packag": [0, 43, 50, 149, 216, 259, 334, 339, 340, 343, 344, 346, 347, 348, 350, 352, 355, 358, 360, 364, 373, 376, 381, 382, 417, 443, 611, 612, 944, 950, 953, 957, 964, 970, 978, 982, 995, 1001, 1003, 1004, 1005], "dr": [0, 136, 343, 374, 1009], "jame": [0, 343, 378, 796, 955, 995, 996, 997, 998, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1011, 1012], "haxbi": 0, "dartmouth": 0, "colleg": [0, 153], "organ": [0, 11, 13, 66, 75, 320, 340, 345, 346, 361, 814, 973], "kindli": 0, "axa": 0, "some": [0, 3, 4, 5, 8, 9, 13, 19, 23, 24, 26, 34, 41, 47, 50, 52, 53, 55, 59, 64, 67, 70, 73, 75, 76, 80, 87, 102, 103, 107, 111, 114, 115, 117, 118, 119, 122, 123, 132, 138, 140, 143, 144, 145, 146, 147, 149, 150, 151, 154, 155, 156, 157, 159, 161, 163, 165, 166, 170, 171, 172, 176, 177, 182, 183, 186, 190, 191, 196, 199, 200, 202, 204, 209, 213, 216, 219, 226, 227, 228, 233, 234, 239, 240, 241, 242, 245, 247, 256, 258, 262, 265, 270, 275, 276, 279, 284, 289, 290, 291, 292, 293, 294, 295, 304, 305, 307, 308, 316, 318, 320, 321, 322, 328, 329, 333, 334, 335, 339, 340, 341, 343, 344, 346, 347, 348, 350, 351, 352, 353, 354, 355, 358, 359, 360, 364, 365, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 397, 402, 408, 409, 412, 414, 416, 418, 424, 428, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 447, 448, 449, 461, 464, 473, 474, 480, 488, 489, 498, 499, 501, 503, 506, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 539, 546, 547, 553, 555, 556, 559, 571, 574, 575, 576, 597, 598, 600, 604, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 654, 655, 657, 658, 662, 663, 665, 666, 667, 672, 673, 680, 685, 690, 691, 702, 703, 704, 710, 718, 720, 721, 727, 746, 748, 751, 752, 753, 758, 761, 764, 765, 770, 772, 781, 782, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 811, 813, 816, 817, 823, 824, 826, 829, 831, 832, 833, 838, 845, 846, 861, 862, 864, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 886, 887, 911, 922, 943, 944, 946, 949, 950, 951, 953, 954, 955, 956, 957, 958, 960, 961, 964, 967, 968, 969, 970, 972, 973, 974, 977, 978, 979, 984, 986, 987, 988, 992, 995, 996, 997, 998, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "particip": [0, 345, 346, 361, 978], "could": [0, 4, 9, 13, 14, 26, 34, 39, 50, 67, 68, 87, 90, 102, 103, 111, 114, 117, 133, 138, 143, 150, 153, 154, 155, 182, 183, 186, 191, 200, 206, 214, 215, 216, 233, 239, 258, 267, 270, 291, 304, 305, 320, 324, 335, 346, 352, 354, 360, 364, 368, 372, 378, 381, 382, 386, 439, 498, 503, 572, 573, 594, 636, 765, 770, 772, 943, 944, 950, 951, 961, 962, 964, 969, 974, 987, 992, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012], "attend": 0, "psf": [0, 346], "dataia": 0, "possibl": [0, 4, 13, 17, 25, 26, 34, 46, 52, 67, 73, 87, 104, 107, 117, 119, 138, 154, 155, 156, 157, 182, 199, 200, 214, 216, 239, 240, 241, 242, 244, 245, 246, 248, 249, 258, 288, 308, 316, 320, 321, 329, 333, 334, 335, 339, 340, 341, 344, 346, 347, 348, 349, 350, 352, 354, 358, 359, 360, 364, 365, 368, 371, 372, 373, 374, 375, 377, 378, 379, 381, 382, 384, 386, 388, 397, 402, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 427, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 447, 448, 449, 450, 461, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 546, 547, 548, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 597, 598, 600, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 652, 653, 654, 655, 656, 657, 674, 686, 687, 688, 692, 706, 720, 742, 747, 749, 752, 761, 762, 763, 765, 766, 767, 769, 775, 776, 777, 781, 782, 785, 786, 787, 788, 789, 790, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 822, 823, 824, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 858, 859, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 884, 886, 887, 890, 895, 922, 925, 928, 943, 946, 949, 950, 951, 953, 954, 955, 956, 957, 962, 964, 969, 970, 974, 978, 979, 986, 987, 988, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1008, 1009, 1010, 1011], "tinyclu": 0, "french": [0, 200, 285], "associ": [0, 11, 23, 24, 75, 101, 138, 153, 154, 186, 228, 285, 297, 299, 320, 354, 374, 376, 378, 379, 381, 382, 392, 411, 414, 434, 435, 436, 437, 438, 439, 440, 441, 458, 459, 460, 489, 522, 526, 529, 570, 571, 595, 610, 623, 624, 631, 633, 639, 640, 641, 654, 660, 664, 695, 703, 789, 809, 817, 831, 843, 855, 863, 872, 874, 876, 892, 953, 954, 957, 964, 967, 978, 987, 995, 1007, 1011], "fond": [0, 978], "de": [0, 12, 23, 24, 25, 26, 70, 105, 122, 138, 139, 141, 142, 143, 144, 145, 147, 173, 214, 215, 285, 299, 316, 343, 600, 653, 728, 950, 951, 974, 996, 997, 998, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013], "recherch": 0, "scientifiqu": 0, "granada": 0, "interest": [0, 4, 6, 13, 39, 41, 47, 52, 59, 63, 68, 101, 109, 114, 122, 133, 136, 143, 149, 155, 156, 171, 182, 183, 184, 200, 203, 214, 233, 236, 239, 240, 242, 248, 256, 308, 316, 321, 328, 333, 341, 343, 346, 351, 352, 354, 358, 361, 374, 376, 379, 382, 384, 458, 459, 465, 469, 475, 611, 612, 866, 944, 950, 951, 954, 959, 960, 961, 974, 978, 984, 986, 987, 995, 1012], "our": [0, 4, 5, 7, 11, 12, 13, 39, 50, 53, 66, 67, 75, 76, 80, 87, 88, 101, 102, 108, 111, 112, 114, 115, 131, 136, 138, 143, 145, 151, 153, 154, 155, 156, 157, 182, 186, 200, 204, 206, 216, 233, 239, 242, 245, 246, 262, 276, 279, 285, 289, 291, 302, 305, 311, 313, 316, 320, 321, 322, 329, 334, 344, 345, 350, 351, 354, 358, 359, 360, 361, 365, 374, 378, 381, 382, 384, 385, 409, 415, 528, 609, 657, 673, 685, 690, 702, 720, 808, 809, 810, 812, 814, 816, 817, 818, 943, 944, 950, 951, 954, 960, 964, 967, 968, 969, 974, 977, 978, 979, 986, 987, 988, 1002, 1003, 1005, 1006, 1009, 1010, 1012], "via": [0, 4, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 324, 325, 326, 327, 328, 329, 333, 334, 338, 343, 344, 347, 348, 350, 354, 358, 359, 360, 361, 364, 365, 368, 371, 372, 374, 375, 377, 378, 379, 383, 384, 402, 466, 500, 504, 506, 508, 511, 524, 525, 562, 576, 581, 586, 589, 592, 603, 604, 605, 606, 621, 631, 633, 636, 638, 641, 652, 654, 657, 658, 674, 763, 786, 787, 788, 789, 794, 795, 796, 798, 804, 812, 823, 825, 826, 827, 846, 847, 943, 948, 950, 951, 953, 954, 955, 961, 962, 968, 969, 974, 975, 978, 979, 990, 995, 999, 1000, 1003, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "numfocu": 0, "all": [0, 4, 5, 7, 8, 11, 14, 16, 19, 23, 24, 26, 32, 35, 36, 37, 39, 40, 45, 49, 50, 51, 52, 57, 61, 71, 77, 84, 87, 89, 90, 99, 106, 107, 109, 110, 114, 117, 124, 125, 136, 143, 144, 146, 151, 153, 154, 155, 157, 161, 166, 168, 174, 175, 176, 182, 183, 184, 185, 186, 191, 193, 197, 199, 200, 202, 203, 209, 215, 216, 219, 220, 223, 226, 228, 230, 237, 240, 241, 242, 243, 245, 246, 247, 249, 251, 256, 259, 262, 264, 276, 279, 280, 284, 288, 289, 290, 291, 293, 294, 295, 297, 299, 300, 301, 305, 308, 312, 313, 316, 317, 320, 321, 322, 325, 328, 329, 333, 334, 335, 339, 341, 342, 343, 344, 346, 348, 350, 351, 352, 354, 355, 358, 359, 360, 361, 365, 370, 371, 372, 373, 374, 375, 378, 379, 381, 382, 383, 384, 385, 386, 388, 389, 391, 392, 393, 394, 396, 397, 398, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 468, 473, 474, 480, 492, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 548, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 652, 653, 654, 655, 656, 657, 658, 659, 662, 663, 664, 665, 666, 667, 670, 674, 678, 679, 680, 681, 682, 683, 685, 686, 687, 690, 692, 693, 694, 696, 697, 699, 700, 701, 702, 706, 709, 710, 712, 714, 715, 717, 720, 725, 733, 738, 742, 745, 746, 747, 748, 749, 750, 751, 752, 754, 755, 757, 758, 759, 761, 762, 763, 764, 765, 766, 767, 769, 770, 772, 773, 775, 777, 780, 781, 782, 783, 785, 786, 787, 788, 789, 790, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 858, 859, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 878, 879, 880, 881, 882, 884, 886, 887, 888, 892, 894, 895, 896, 897, 908, 911, 912, 917, 922, 929, 938, 943, 944, 946, 947, 948, 950, 951, 952, 953, 954, 955, 956, 957, 959, 961, 962, 964, 967, 968, 969, 970, 973, 974, 975, 977, 978, 979, 980, 982, 983, 985, 986, 987, 988, 993, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1013], "handl": [0, 4, 9, 67, 107, 111, 117, 118, 122, 159, 166, 215, 216, 241, 246, 248, 256, 258, 259, 266, 285, 288, 295, 320, 322, 328, 333, 338, 340, 344, 346, 347, 348, 355, 358, 360, 381, 382, 384, 461, 509, 542, 546, 547, 553, 554, 556, 575, 600, 611, 612, 617, 623, 624, 625, 626, 627, 633, 640, 641, 643, 646, 685, 752, 830, 839, 840, 866, 867, 871, 878, 904, 911, 914, 951, 954, 955, 956, 957, 960, 962, 969, 970, 973, 974, 978, 990, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "non": [0, 3, 5, 6, 9, 10, 11, 13, 14, 23, 24, 26, 31, 32, 34, 46, 54, 59, 67, 71, 75, 77, 88, 89, 90, 92, 103, 111, 119, 120, 122, 129, 132, 133, 135, 142, 144, 150, 151, 153, 154, 155, 156, 157, 160, 161, 166, 168, 172, 175, 176, 178, 181, 183, 184, 188, 192, 193, 195, 196, 197, 198, 200, 205, 206, 210, 211, 212, 213, 215, 219, 225, 227, 229, 231, 232, 233, 234, 239, 248, 256, 259, 263, 265, 272, 274, 277, 279, 281, 282, 283, 284, 289, 290, 291, 292, 294, 295, 301, 302, 303, 305, 308, 310, 311, 312, 313, 316, 317, 318, 320, 321, 322, 328, 329, 333, 334, 338, 341, 342, 346, 347, 348, 351, 352, 354, 355, 358, 360, 361, 372, 373, 374, 375, 378, 380, 381, 382, 383, 384, 386, 402, 406, 410, 411, 415, 417, 421, 427, 428, 429, 430, 432, 433, 453, 461, 462, 468, 469, 473, 491, 497, 500, 501, 503, 505, 509, 512, 514, 516, 517, 518, 522, 523, 524, 525, 526, 527, 529, 530, 531, 537, 553, 554, 556, 557, 560, 561, 562, 563, 564, 565, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 595, 596, 600, 603, 608, 615, 617, 622, 623, 624, 625, 629, 630, 631, 632, 633, 634, 637, 641, 642, 643, 650, 651, 652, 653, 654, 655, 656, 657, 659, 663, 664, 667, 671, 672, 677, 680, 682, 684, 685, 690, 691, 692, 699, 701, 703, 704, 709, 710, 711, 712, 713, 714, 715, 716, 717, 719, 720, 722, 723, 746, 749, 752, 753, 754, 755, 758, 761, 762, 763, 764, 768, 770, 771, 772, 773, 775, 781, 788, 792, 795, 814, 816, 817, 818, 821, 826, 827, 829, 830, 831, 834, 838, 839, 840, 841, 842, 843, 845, 846, 853, 854, 855, 856, 857, 859, 864, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 885, 886, 887, 901, 903, 907, 909, 917, 943, 944, 945, 946, 947, 951, 952, 953, 954, 955, 956, 957, 958, 960, 961, 962, 965, 966, 967, 968, 969, 970, 974, 975, 986, 987, 988, 989, 990, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "profit": [0, 1012], "which": [0, 4, 7, 10, 12, 13, 14, 15, 16, 17, 19, 20, 21, 24, 25, 26, 32, 34, 36, 37, 40, 41, 43, 46, 50, 52, 53, 54, 55, 62, 64, 66, 67, 68, 71, 73, 75, 76, 80, 83, 85, 89, 91, 92, 97, 101, 104, 105, 106, 107, 111, 113, 114, 117, 118, 120, 121, 122, 123, 124, 125, 127, 131, 133, 135, 136, 138, 139, 143, 144, 145, 149, 150, 153, 154, 155, 157, 159, 161, 162, 166, 171, 175, 182, 183, 184, 186, 188, 190, 196, 198, 199, 200, 202, 203, 204, 206, 209, 210, 213, 214, 215, 216, 217, 219, 220, 225, 226, 230, 231, 233, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 253, 254, 256, 258, 259, 264, 265, 266, 275, 279, 281, 282, 283, 284, 285, 286, 288, 290, 291, 292, 293, 294, 295, 297, 299, 300, 301, 308, 312, 316, 318, 320, 321, 322, 324, 328, 329, 333, 334, 335, 338, 340, 341, 343, 344, 346, 347, 348, 350, 351, 352, 353, 354, 355, 358, 359, 360, 361, 363, 364, 365, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 391, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 421, 422, 424, 425, 427, 428, 429, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 452, 488, 496, 497, 498, 499, 502, 503, 505, 506, 507, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 538, 539, 544, 547, 548, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 572, 573, 575, 576, 577, 578, 579, 580, 582, 584, 587, 592, 593, 594, 595, 597, 598, 599, 605, 607, 608, 609, 612, 613, 614, 616, 617, 618, 619, 620, 621, 623, 624, 626, 628, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 645, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 672, 674, 681, 682, 684, 685, 687, 689, 690, 698, 699, 700, 701, 706, 707, 710, 720, 722, 742, 743, 744, 745, 746, 747, 753, 761, 762, 763, 766, 767, 768, 769, 771, 773, 777, 781, 782, 783, 784, 785, 786, 787, 788, 790, 791, 793, 794, 795, 796, 797, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 814, 816, 817, 818, 819, 820, 823, 826, 830, 833, 837, 839, 840, 841, 844, 845, 846, 847, 848, 850, 858, 859, 861, 862, 863, 866, 868, 871, 872, 874, 875, 876, 877, 878, 882, 895, 898, 902, 903, 905, 910, 911, 912, 914, 922, 923, 926, 929, 935, 938, 943, 944, 945, 946, 947, 948, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 964, 966, 967, 968, 969, 970, 972, 973, 974, 978, 979, 981, 983, 986, 987, 988, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "manag": [0, 80, 223, 332, 340, 344, 347, 348, 350, 354, 358, 360, 361, 381, 415, 433, 591, 864, 922, 948, 970, 973, 974, 978, 988, 990, 1008, 1011], "board": 0, "scipi": [0, 6, 14, 17, 19, 38, 43, 44, 50, 51, 73, 74, 77, 88, 90, 94, 113, 138, 154, 157, 168, 172, 184, 226, 230, 231, 236, 239, 247, 251, 259, 264, 269, 277, 289, 290, 295, 297, 298, 333, 340, 341, 344, 346, 348, 352, 355, 358, 359, 360, 364, 367, 373, 374, 379, 382, 415, 416, 417, 418, 422, 427, 428, 461, 468, 473, 497, 499, 500, 506, 509, 546, 547, 550, 551, 553, 554, 575, 576, 613, 614, 618, 622, 623, 624, 628, 631, 632, 633, 634, 635, 637, 639, 641, 642, 643, 645, 649, 652, 656, 657, 660, 724, 727, 742, 743, 744, 745, 756, 757, 767, 775, 777, 792, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 823, 829, 838, 839, 844, 845, 846, 849, 853, 856, 857, 866, 868, 869, 871, 872, 900, 904, 905, 909, 925, 926, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 940, 943, 944, 950, 952, 955, 957, 958, 964, 968, 969, 972, 974, 982, 984, 987, 988, 997, 999, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1011], "mission": [0, 321, 978], "foster": [0, 1003], "comput": [0, 4, 6, 7, 11, 13, 14, 20, 25, 34, 36, 38, 39, 43, 49, 51, 54, 55, 57, 58, 66, 68, 74, 75, 76, 77, 88, 96, 104, 108, 109, 112, 113, 114, 115, 116, 117, 135, 136, 138, 143, 145, 146, 149, 154, 155, 156, 157, 159, 162, 163, 166, 167, 168, 169, 170, 171, 182, 184, 186, 190, 196, 199, 200, 203, 206, 210, 212, 213, 215, 219, 220, 222, 235, 237, 239, 240, 241, 242, 246, 248, 250, 259, 261, 263, 265, 266, 268, 269, 272, 279, 288, 292, 293, 298, 300, 308, 312, 316, 320, 321, 322, 328, 334, 335, 340, 341, 343, 346, 351, 352, 353, 355, 358, 359, 360, 363, 364, 368, 369, 370, 371, 372, 374, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 422, 424, 426, 427, 428, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 481, 496, 497, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 539, 547, 550, 551, 554, 555, 556, 558, 559, 564, 565, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 581, 584, 585, 586, 587, 588, 589, 590, 592, 594, 595, 596, 597, 598, 599, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 678, 680, 681, 682, 683, 684, 685, 689, 690, 691, 693, 694, 695, 698, 700, 702, 703, 704, 706, 707, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 750, 751, 752, 753, 756, 757, 758, 760, 761, 762, 763, 766, 767, 769, 777, 785, 787, 788, 789, 790, 791, 793, 794, 795, 796, 806, 807, 808, 809, 810, 811, 812, 813, 814, 816, 817, 818, 819, 820, 822, 823, 824, 831, 832, 835, 836, 841, 842, 843, 844, 845, 846, 850, 851, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 868, 871, 873, 874, 875, 876, 877, 900, 901, 902, 903, 919, 920, 927, 929, 935, 943, 946, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 962, 964, 966, 967, 968, 969, 970, 973, 974, 978, 983, 984, 987, 988, 990, 992, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "particular": [0, 4, 11, 14, 26, 34, 36, 37, 57, 67, 73, 85, 92, 95, 111, 114, 117, 118, 142, 149, 154, 155, 182, 184, 190, 214, 236, 240, 242, 248, 259, 268, 272, 279, 288, 289, 292, 321, 322, 329, 333, 334, 340, 341, 344, 345, 346, 348, 350, 351, 352, 354, 355, 359, 360, 364, 374, 375, 378, 379, 381, 382, 383, 384, 411, 434, 438, 461, 509, 528, 574, 618, 623, 628, 637, 639, 649, 652, 677, 692, 749, 798, 813, 885, 887, 944, 946, 948, 950, 954, 957, 958, 959, 960, 962, 964, 974, 978, 987, 995, 998, 1002, 1003, 1004, 1006, 1008, 1009, 1010, 1012], "As": [0, 4, 7, 20, 24, 28, 37, 40, 50, 52, 54, 55, 63, 77, 80, 92, 101, 102, 108, 111, 112, 113, 115, 117, 121, 131, 138, 143, 150, 154, 156, 157, 159, 161, 164, 166, 171, 173, 182, 186, 190, 200, 207, 216, 228, 234, 236, 237, 239, 240, 242, 252, 258, 264, 280, 291, 300, 308, 321, 322, 324, 326, 327, 329, 333, 334, 341, 344, 345, 346, 348, 350, 351, 358, 359, 360, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 411, 458, 519, 527, 531, 584, 597, 620, 621, 637, 639, 652, 699, 722, 728, 808, 809, 810, 812, 814, 845, 943, 948, 950, 951, 953, 954, 955, 957, 961, 964, 968, 969, 970, 973, 974, 978, 979, 983, 986, 988, 995, 1001, 1006, 1011], "fiscal": 0, "home": [0, 12, 103, 122, 142, 144, 146, 147, 174, 191, 226, 234, 277, 293, 313, 325, 341, 344, 354, 364, 373, 451, 464, 644, 978], "ensur": [0, 20, 38, 54, 77, 85, 101, 107, 108, 117, 157, 182, 203, 234, 242, 276, 328, 329, 333, 334, 346, 348, 350, 351, 352, 361, 364, 365, 372, 374, 375, 378, 386, 434, 498, 499, 506, 576, 592, 661, 670, 746, 752, 753, 787, 859, 886, 887, 903, 909, 920, 950, 951, 954, 964, 970, 983, 997, 999, 1000, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "monei": [0, 200, 978], "when": [0, 4, 9, 10, 11, 13, 20, 23, 24, 25, 26, 32, 36, 37, 40, 53, 57, 64, 66, 67, 68, 73, 75, 76, 80, 87, 90, 91, 92, 94, 104, 107, 110, 111, 112, 114, 117, 118, 122, 123, 124, 133, 138, 149, 153, 154, 155, 156, 157, 161, 162, 166, 171, 173, 175, 179, 182, 184, 186, 187, 198, 209, 210, 211, 215, 216, 223, 226, 228, 235, 238, 239, 240, 241, 242, 246, 248, 249, 256, 259, 261, 262, 265, 266, 267, 279, 281, 283, 284, 285, 286, 288, 289, 290, 291, 292, 295, 299, 300, 302, 308, 311, 312, 316, 320, 321, 322, 324, 329, 333, 334, 335, 340, 341, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 358, 359, 360, 364, 365, 368, 370, 371, 372, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 390, 397, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 422, 424, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 447, 448, 449, 450, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 473, 474, 475, 477, 480, 489, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 538, 540, 541, 543, 546, 547, 548, 549, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 571, 574, 575, 576, 577, 578, 579, 580, 581, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 663, 665, 666, 667, 669, 670, 672, 673, 677, 678, 681, 691, 692, 693, 694, 696, 698, 699, 702, 710, 712, 715, 718, 719, 721, 725, 727, 731, 732, 733, 735, 738, 742, 745, 746, 747, 748, 749, 751, 752, 753, 755, 756, 757, 759, 761, 762, 763, 766, 767, 768, 769, 777, 781, 782, 785, 787, 788, 789, 790, 791, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 852, 853, 858, 859, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 880, 882, 885, 886, 887, 893, 897, 901, 902, 903, 904, 906, 907, 912, 915, 922, 923, 943, 944, 946, 948, 950, 951, 952, 953, 954, 955, 957, 958, 959, 960, 961, 962, 964, 966, 967, 968, 969, 970, 974, 977, 978, 979, 985, 986, 987, 988, 993, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "need": [0, 4, 9, 12, 30, 43, 45, 50, 52, 54, 77, 89, 99, 107, 111, 113, 114, 115, 117, 122, 136, 138, 143, 149, 150, 154, 170, 184, 199, 200, 203, 209, 212, 214, 216, 219, 220, 225, 226, 230, 231, 237, 239, 241, 242, 244, 256, 258, 259, 261, 284, 288, 295, 300, 308, 320, 321, 329, 333, 334, 335, 340, 341, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 359, 360, 361, 363, 364, 365, 368, 370, 371, 372, 373, 374, 375, 377, 378, 379, 381, 382, 383, 384, 390, 402, 406, 410, 414, 430, 468, 506, 516, 537, 547, 548, 553, 554, 555, 556, 592, 600, 603, 604, 605, 607, 614, 631, 633, 636, 641, 644, 657, 685, 686, 687, 688, 745, 749, 761, 762, 763, 766, 767, 777, 778, 779, 787, 795, 798, 806, 807, 823, 826, 829, 833, 838, 839, 843, 861, 868, 871, 911, 943, 944, 946, 948, 949, 950, 951, 953, 954, 955, 956, 957, 958, 959, 960, 961, 964, 965, 967, 968, 969, 970, 974, 978, 985, 986, 987, 988, 995, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "keep": [0, 6, 13, 26, 39, 71, 90, 92, 107, 117, 135, 149, 153, 154, 155, 156, 157, 166, 182, 183, 184, 190, 200, 230, 234, 237, 283, 284, 291, 298, 308, 320, 321, 324, 329, 333, 334, 338, 346, 350, 359, 360, 372, 374, 375, 376, 377, 378, 379, 397, 415, 430, 447, 448, 449, 450, 458, 459, 499, 505, 506, 509, 512, 519, 521, 523, 525, 527, 530, 533, 535, 560, 563, 565, 568, 576, 599, 600, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 625, 626, 627, 628, 629, 630, 632, 635, 637, 638, 641, 642, 643, 644, 673, 781, 799, 800, 809, 817, 823, 824, 862, 867, 869, 872, 875, 877, 950, 955, 959, 962, 964, 974, 977, 978, 979, 984, 986, 988, 990, 995, 1000, 1003, 1004, 1008, 1009, 1011], "while": [0, 4, 7, 8, 10, 12, 17, 20, 23, 26, 32, 34, 36, 40, 41, 45, 52, 59, 63, 66, 69, 71, 85, 91, 92, 101, 104, 107, 108, 112, 117, 119, 122, 136, 139, 144, 146, 147, 149, 153, 154, 155, 156, 159, 161, 163, 166, 171, 176, 182, 184, 186, 198, 209, 212, 213, 216, 217, 226, 227, 231, 233, 234, 238, 239, 240, 242, 246, 247, 248, 249, 250, 252, 261, 279, 280, 281, 284, 285, 286, 288, 291, 294, 295, 305, 308, 320, 322, 328, 329, 334, 338, 339, 340, 341, 342, 344, 345, 346, 348, 350, 351, 352, 354, 355, 358, 360, 361, 368, 372, 373, 374, 377, 378, 379, 381, 382, 383, 384, 385, 386, 409, 429, 432, 433, 448, 450, 461, 486, 497, 517, 522, 523, 524, 525, 529, 530, 531, 532, 533, 534, 535, 540, 547, 553, 554, 555, 556, 559, 562, 567, 571, 599, 608, 611, 612, 614, 621, 622, 623, 624, 641, 642, 643, 644, 673, 694, 718, 738, 742, 752, 758, 761, 763, 764, 765, 768, 769, 770, 771, 772, 773, 777, 778, 779, 781, 785, 787, 788, 789, 790, 791, 793, 801, 812, 814, 816, 817, 818, 825, 826, 827, 828, 829, 842, 854, 859, 864, 866, 867, 874, 875, 876, 877, 882, 907, 943, 944, 946, 947, 948, 950, 951, 953, 954, 955, 956, 957, 960, 961, 964, 966, 969, 970, 973, 974, 979, 985, 986, 987, 988, 995, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "complianc": [0, 117], "tax": 0, "regul": 0, "mostli": [0, 43, 66, 182, 200, 284, 354, 358, 360, 379, 381, 382, 486, 743, 744, 969, 973, 978, 1003, 1004, 1005, 1011], "go": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 153, 154, 155, 156, 157, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 324, 325, 326, 327, 328, 341, 344, 346, 348, 350, 351, 355, 361, 364, 375, 379, 381, 383, 408, 526, 527, 685, 845, 906, 907, 964, 970, 973, 974, 979, 988, 1006], "toward": [0, 25, 26, 60, 77, 108, 114, 121, 138, 156, 161, 186, 187, 207, 219, 316, 346, 360, 374, 413, 417, 427, 641, 643, 660, 840, 953, 968, 970, 972, 974], "cover": [0, 49, 159, 182, 200, 329, 338, 341, 346, 359, 600, 685, 758, 954, 955, 972], "travel": 0, "expens": [0, 53, 107, 122, 138, 153, 155, 210, 236, 248, 308, 312, 320, 321, 322, 335, 352, 360, 374, 375, 378, 381, 382, 414, 433, 473, 763, 766, 767, 777, 789, 864, 866, 951, 953, 964, 969, 973, 978, 988, 999], "well": [0, 4, 9, 12, 20, 23, 24, 26, 32, 36, 45, 50, 54, 55, 59, 66, 73, 80, 101, 102, 104, 107, 112, 114, 120, 122, 136, 143, 145, 153, 154, 155, 156, 159, 166, 170, 180, 182, 183, 184, 186, 190, 202, 203, 204, 207, 209, 213, 216, 219, 227, 239, 246, 248, 250, 254, 256, 259, 262, 264, 265, 266, 286, 289, 290, 291, 292, 293, 294, 295, 312, 316, 320, 321, 322, 329, 341, 343, 345, 346, 350, 352, 354, 355, 358, 359, 360, 361, 372, 374, 376, 378, 379, 381, 383, 385, 388, 402, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 422, 424, 425, 429, 430, 432, 434, 435, 436, 437, 438, 439, 440, 441, 447, 448, 449, 450, 489, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 546, 547, 548, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 600, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 653, 654, 655, 656, 657, 665, 686, 687, 688, 749, 752, 756, 759, 761, 762, 763, 766, 767, 777, 791, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 822, 823, 824, 825, 826, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 858, 859, 861, 862, 863, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 901, 902, 922, 943, 944, 946, 948, 949, 950, 951, 953, 954, 955, 956, 957, 958, 959, 960, 964, 967, 968, 970, 971, 973, 974, 978, 987, 988, 995, 996, 999, 1001, 1002, 1003, 1006, 1013], "budget": [0, 111, 801, 802, 803, 804, 805, 943], "1": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 129, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 153, 154, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 324, 325, 326, 327, 328, 329, 333, 334, 335, 340, 341, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 359, 360, 361, 364, 365, 366, 367, 368, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 395, 396, 397, 398, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 469, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491, 492, 493, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 542, 546, 547, 548, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 892, 897, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 940, 941, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 954, 955, 956, 957, 958, 959, 960, 961, 962, 964, 965, 966, 967, 968, 969, 970, 973, 974, 975, 977, 978, 979, 980, 983, 984, 985, 986, 987, 991, 993, 997], "note": [0, 4, 5, 7, 8, 11, 12, 14, 19, 20, 25, 26, 30, 34, 50, 63, 67, 68, 75, 77, 79, 80, 85, 90, 104, 105, 107, 110, 114, 115, 119, 136, 138, 145, 149, 153, 154, 155, 156, 157, 159, 170, 171, 175, 182, 183, 184, 186, 190, 196, 198, 200, 202, 203, 204, 206, 209, 210, 212, 214, 215, 216, 217, 219, 226, 234, 235, 239, 242, 245, 246, 247, 258, 259, 261, 265, 266, 275, 279, 280, 283, 288, 289, 290, 291, 292, 293, 294, 295, 298, 300, 302, 308, 312, 320, 328, 333, 334, 340, 343, 344, 346, 347, 348, 350, 352, 353, 358, 359, 360, 364, 365, 369, 372, 373, 374, 376, 377, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 397, 399, 402, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 424, 425, 426, 427, 429, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 452, 455, 461, 463, 469, 474, 480, 484, 492, 495, 498, 499, 503, 504, 505, 506, 508, 509, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 546, 547, 548, 553, 554, 555, 556, 557, 558, 559, 562, 564, 565, 567, 568, 569, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 592, 594, 595, 597, 598, 600, 601, 603, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 664, 665, 668, 672, 673, 678, 680, 685, 686, 687, 688, 692, 693, 694, 696, 698, 702, 705, 710, 718, 719, 722, 727, 728, 732, 734, 738, 742, 746, 747, 748, 749, 751, 752, 753, 756, 757, 758, 760, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 777, 778, 779, 780, 781, 782, 783, 784, 787, 789, 790, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 816, 817, 818, 822, 823, 824, 825, 826, 829, 830, 831, 832, 833, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 864, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 879, 882, 892, 893, 902, 903, 914, 917, 922, 929, 943, 944, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 957, 958, 960, 961, 962, 964, 967, 968, 969, 970, 971, 972, 973, 974, 977, 979, 986, 987, 988, 990, 993, 995, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012], "regard": [0, 5, 7, 11, 13, 50, 52, 67, 83, 92, 128, 138, 143, 155, 156, 171, 179, 184, 204, 215, 219, 241, 248, 249, 262, 321, 341, 342, 346, 347, 351, 358, 360, 368, 373, 374, 379, 381, 382, 384, 408, 412, 417, 424, 427, 466, 579, 584, 621, 623, 666, 707, 762, 769, 785, 790, 808, 809, 947, 950, 954, 956, 957, 959, 961, 968, 969, 970, 981, 988, 1002, 1005], "might": [0, 4, 5, 13, 29, 39, 41, 57, 59, 66, 110, 120, 133, 144, 150, 154, 155, 156, 159, 182, 200, 209, 239, 241, 262, 275, 290, 312, 318, 329, 333, 334, 340, 344, 346, 347, 348, 350, 351, 352, 354, 358, 360, 361, 364, 368, 372, 375, 378, 379, 380, 381, 382, 384, 399, 408, 453, 461, 466, 468, 473, 480, 488, 501, 520, 521, 522, 526, 527, 529, 544, 545, 547, 575, 576, 592, 615, 619, 620, 621, 623, 624, 641, 643, 657, 721, 758, 766, 767, 790, 815, 831, 846, 859, 878, 880, 882, 886, 887, 903, 923, 943, 944, 946, 948, 950, 951, 953, 954, 956, 957, 961, 962, 964, 969, 970, 988, 996, 998, 1003, 1004, 1006, 1009, 1010, 1011, 1012], "pai": [0, 200, 346], "dn": [0, 957], "continu": [0, 13, 17, 19, 39, 85, 111, 138, 151, 155, 162, 183, 190, 200, 203, 206, 219, 220, 222, 226, 230, 231, 276, 278, 284, 285, 290, 291, 328, 334, 341, 344, 348, 349, 350, 351, 354, 358, 360, 361, 364, 374, 379, 381, 433, 457, 557, 560, 561, 564, 565, 572, 573, 574, 597, 611, 612, 617, 618, 622, 625, 626, 627, 628, 690, 706, 720, 775, 777, 829, 831, 833, 835, 836, 845, 846, 847, 863, 864, 875, 917, 943, 950, 951, 954, 955, 957, 958, 964, 970, 974, 975, 978, 979, 986, 992, 995, 997, 998, 1003, 1008, 1009, 1010, 1012], "integr": [0, 39, 67, 133, 146, 171, 276, 290, 334, 344, 348, 349, 350, 352, 354, 360, 364, 379, 384, 411, 680, 719, 750, 929, 953, 961, 978, 982, 996, 998, 999, 1007, 1008, 1012], "servic": [0, 4, 210, 219, 346, 350, 978, 1003], "azur": [0, 346], "cirru": [0, 346], "cl": [0, 8, 12, 16, 353, 360, 876], "circlecl": 0, "free": [0, 5, 26, 52, 143, 144, 150, 181, 230, 279, 340, 345, 346, 347, 354, 358, 364, 382, 417, 574, 636, 822, 872, 943, 946, 950, 954, 974, 1003], "cpu": [0, 58, 240, 259, 293, 333, 334, 344, 352, 360, 364, 370, 382, 461, 597, 612, 616, 618, 620, 623, 624, 626, 628, 630, 631, 633, 641, 644, 763, 777, 787, 788, 789, 810, 818, 859, 922, 954, 979, 983, 988, 1000, 1009, 1010, 1012], "server": [0, 136, 333, 343, 344, 461, 977, 1003], "anaconda": [0, 334, 344, 350], "inc": [0, 66, 238, 944, 966, 978], "storag": [0, 322, 360, 623, 624, 631, 632, 633, 641, 642, 643, 866, 957, 969, 998, 1003], "thei": [0, 4, 13, 25, 34, 47, 54, 77, 89, 99, 102, 108, 109, 111, 113, 115, 117, 118, 132, 135, 136, 138, 139, 143, 154, 155, 166, 168, 171, 177, 182, 183, 200, 203, 206, 209, 215, 216, 219, 233, 236, 239, 240, 242, 248, 256, 259, 261, 275, 279, 284, 290, 292, 312, 320, 321, 326, 327, 329, 333, 334, 335, 339, 341, 342, 343, 344, 345, 346, 347, 348, 350, 354, 355, 358, 359, 360, 361, 365, 371, 373, 374, 375, 376, 377, 379, 381, 383, 384, 386, 405, 407, 411, 418, 419, 432, 461, 473, 474, 498, 500, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 553, 556, 562, 575, 584, 594, 608, 611, 612, 617, 623, 624, 625, 626, 627, 635, 637, 641, 643, 646, 652, 726, 727, 729, 732, 738, 753, 763, 777, 795, 801, 802, 803, 804, 805, 823, 826, 828, 834, 845, 846, 868, 871, 874, 875, 876, 877, 881, 943, 944, 946, 948, 950, 953, 954, 955, 956, 957, 959, 960, 961, 962, 964, 965, 966, 968, 969, 970, 978, 979, 983, 985, 986, 988, 995, 996, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011], "stage": [0, 7, 25, 68, 101, 106, 112, 115, 344, 350, 360, 370, 374, 381, 413, 518, 519, 524, 525, 526, 527, 553, 554, 556, 567, 951, 964, 972, 1003, 1007], "nightli": [0, 334, 349, 350], "build": [0, 4, 7, 17, 30, 40, 52, 64, 70, 91, 101, 110, 112, 119, 125, 133, 135, 148, 149, 151, 154, 190, 244, 247, 256, 258, 259, 276, 277, 280, 285, 286, 322, 329, 333, 334, 335, 342, 348, 349, 350, 351, 352, 360, 364, 367, 373, 374, 378, 381, 382, 407, 455, 466, 468, 489, 518, 519, 520, 521, 522, 523, 524, 525, 528, 529, 530, 531, 550, 551, 553, 554, 556, 592, 593, 595, 656, 678, 679, 764, 768, 772, 781, 786, 788, 827, 844, 846, 874, 875, 876, 877, 879, 899, 943, 944, 951, 954, 958, 960, 964, 969, 970, 973, 974, 975, 977, 978, 980, 982, 986, 987, 995, 998, 1000, 1001, 1002, 1004, 1007], "applic": [3, 5, 19, 46, 52, 75, 151, 159, 182, 199, 204, 233, 242, 279, 333, 335, 341, 343, 346, 348, 352, 354, 355, 358, 360, 372, 374, 378, 379, 380, 381, 384, 386, 409, 411, 417, 461, 463, 497, 498, 499, 518, 519, 594, 653, 654, 655, 659, 677, 693, 694, 702, 747, 748, 751, 792, 943, 950, 951, 952, 953, 954, 958, 960, 966, 970, 973, 974, 975, 977, 978, 986, 988, 995, 996, 1001, 1003, 1006], "problem": [3, 4, 5, 6, 11, 13, 14, 15, 25, 34, 51, 52, 54, 63, 87, 101, 104, 107, 109, 114, 115, 138, 151, 156, 159, 161, 166, 168, 171, 175, 176, 182, 184, 186, 199, 200, 204, 209, 210, 217, 219, 222, 237, 239, 244, 248, 249, 253, 256, 258, 259, 264, 271, 283, 291, 295, 305, 308, 312, 316, 317, 320, 321, 328, 329, 333, 341, 342, 343, 344, 345, 347, 348, 351, 352, 355, 358, 360, 372, 373, 374, 376, 378, 380, 381, 382, 383, 384, 385, 386, 409, 412, 414, 415, 417, 422, 427, 430, 443, 468, 473, 474, 480, 481, 482, 483, 488, 489, 493, 496, 498, 502, 504, 507, 508, 509, 510, 511, 512, 513, 516, 517, 522, 526, 529, 532, 536, 538, 554, 575, 596, 608, 613, 615, 617, 619, 620, 621, 622, 623, 624, 629, 630, 631, 633, 634, 637, 638, 639, 640, 641, 642, 644, 645, 650, 651, 652, 653, 654, 656, 658, 660, 673, 681, 693, 694, 699, 702, 703, 747, 748, 751, 752, 761, 762, 764, 765, 766, 767, 768, 770, 771, 772, 773, 778, 779, 780, 781, 782, 783, 786, 794, 795, 796, 806, 807, 808, 809, 810, 811, 812, 814, 816, 817, 818, 832, 833, 839, 847, 850, 856, 857, 866, 867, 874, 876, 892, 903, 944, 945, 949, 950, 951, 953, 954, 955, 956, 957, 958, 962, 964, 968, 971, 974, 976, 978, 980, 981, 982, 988, 989, 990, 995, 996, 998, 1000, 1001, 1002, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012], "medium": [3, 151, 215, 254, 286, 308, 374, 608, 840, 947, 950], "size": [3, 4, 5, 6, 8, 11, 12, 13, 14, 23, 26, 29, 31, 34, 36, 37, 39, 41, 43, 44, 49, 51, 52, 54, 55, 57, 58, 59, 63, 64, 69, 73, 74, 75, 76, 77, 79, 80, 85, 87, 88, 89, 90, 91, 94, 96, 104, 113, 114, 117, 118, 119, 132, 138, 140, 141, 144, 145, 151, 153, 155, 156, 161, 162, 163, 164, 168, 172, 177, 180, 183, 184, 185, 188, 195, 196, 202, 207, 209, 212, 213, 214, 215, 216, 218, 219, 227, 233, 235, 237, 239, 241, 242, 244, 245, 246, 256, 265, 266, 267, 274, 277, 280, 281, 282, 283, 286, 289, 292, 294, 295, 298, 302, 304, 306, 307, 308, 316, 318, 320, 321, 322, 324, 333, 334, 335, 341, 342, 346, 351, 355, 358, 359, 360, 364, 365, 371, 372, 373, 374, 376, 378, 379, 382, 384, 385, 387, 409, 410, 411, 413, 414, 415, 422, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 458, 459, 460, 480, 492, 499, 501, 503, 505, 512, 522, 523, 524, 525, 526, 527, 529, 530, 548, 552, 553, 556, 559, 597, 598, 608, 622, 631, 632, 644, 648, 657, 660, 670, 684, 702, 704, 707, 745, 757, 765, 768, 769, 773, 780, 783, 784, 787, 790, 792, 801, 802, 803, 805, 808, 809, 810, 811, 812, 814, 816, 817, 818, 823, 824, 841, 843, 855, 860, 864, 868, 869, 870, 871, 872, 874, 875, 876, 877, 880, 902, 906, 907, 917, 918, 920, 923, 929, 944, 946, 947, 949, 950, 951, 953, 954, 955, 956, 957, 958, 961, 964, 966, 968, 969, 970, 977, 978, 982, 984, 986, 987, 998, 999, 1000, 1001, 1002, 1003, 1005, 1010, 1011], "interact": [3, 115, 117, 151, 182, 207, 211, 240, 289, 345, 347, 348, 350, 352, 358, 360, 361, 375, 524, 525, 526, 527, 597, 598, 841, 845, 943, 946, 950, 951, 952, 959, 961, 964, 972, 974, 997, 1002, 1009, 1010], "user": [3, 24, 26, 52, 65, 87, 107, 147, 151, 154, 170, 202, 216, 230, 236, 246, 248, 256, 259, 265, 266, 269, 285, 288, 289, 290, 291, 292, 293, 294, 295, 329, 333, 334, 340, 344, 345, 346, 348, 350, 352, 353, 354, 358, 359, 360, 364, 365, 368, 372, 373, 374, 375, 376, 378, 379, 381, 382, 383, 385, 386, 387, 388, 391, 397, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 422, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 539, 546, 547, 548, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 584, 586, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 662, 663, 664, 665, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 721, 722, 723, 724, 725, 726, 727, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 822, 823, 824, 825, 826, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 878, 880, 899, 903, 943, 944, 950, 951, 953, 954, 955, 957, 964, 968, 973, 974, 978, 981, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "interfac": [3, 101, 151, 339, 340, 347, 348, 355, 358, 360, 378, 384, 385, 406, 410, 415, 461, 518, 664, 763, 766, 767, 777, 826, 827, 852, 939, 943, 957, 969, 973, 974, 978, 995, 997, 1000, 1001, 1003, 1004, 1009, 1011], "compress": [3, 11, 17, 45, 63, 151, 256, 279, 341, 374, 379, 382, 383, 617, 637, 657, 796, 839, 925, 928, 940, 950, 964, 975, 987, 995, 1004], "sens": [3, 4, 13, 17, 24, 52, 63, 144, 151, 154, 159, 213, 216, 279, 285, 298, 308, 320, 329, 333, 346, 347, 360, 374, 376, 378, 383, 427, 434, 435, 436, 437, 438, 439, 440, 441, 617, 620, 621, 637, 764, 774, 863, 948, 950, 957, 958, 960, 964, 967, 975], "tomographi": [3, 17, 63, 151, 617, 637, 950, 975], "reconstruct": [3, 17, 20, 63, 87, 88, 92, 151, 181, 205, 206, 292, 379, 382, 447, 448, 449, 496, 498, 500, 502, 503, 504, 505, 507, 508, 510, 511, 513, 548, 552, 617, 637, 653, 654, 658, 858, 859, 950, 951, 975, 1009], "l1": [3, 7, 17, 28, 37, 63, 77, 79, 151, 153, 160, 161, 167, 168, 169, 170, 171, 176, 177, 186, 193, 197, 211, 240, 259, 276, 291, 355, 358, 373, 374, 376, 379, 406, 410, 415, 422, 429, 434, 435, 436, 437, 438, 439, 440, 441, 443, 461, 467, 469, 496, 502, 503, 504, 505, 507, 508, 512, 513, 523, 530, 554, 555, 556, 562, 609, 610, 611, 612, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 635, 637, 641, 642, 643, 644, 646, 653, 699, 726, 732, 737, 742, 743, 744, 749, 777, 784, 792, 808, 809, 810, 812, 814, 816, 817, 818, 819, 820, 838, 846, 853, 866, 867, 873, 875, 877, 889, 936, 950, 952, 954, 957, 964, 968, 969, 970, 975, 986, 1000, 1002, 1008, 1011], "prior": [3, 7, 17, 43, 44, 54, 62, 63, 64, 85, 137, 138, 144, 150, 151, 156, 161, 163, 166, 224, 226, 230, 231, 239, 250, 269, 346, 348, 350, 360, 364, 365, 374, 377, 379, 381, 384, 430, 488, 501, 513, 514, 515, 516, 524, 576, 578, 579, 580, 584, 587, 588, 595, 609, 610, 611, 612, 616, 617, 619, 620, 621, 625, 626, 627, 637, 643, 646, 681, 761, 801, 802, 803, 804, 805, 826, 827, 841, 868, 871, 921, 943, 946, 948, 950, 953, 954, 956, 962, 970, 971, 975, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1008, 1011], "lasso": [3, 17, 63, 96, 122, 127, 151, 154, 160, 163, 173, 175, 181, 187, 190, 213, 230, 252, 291, 295, 316, 333, 358, 376, 377, 379, 381, 382, 383, 436, 437, 443, 466, 489, 496, 502, 504, 507, 508, 510, 511, 513, 562, 611, 612, 614, 615, 616, 618, 619, 620, 621, 622, 625, 626, 627, 628, 629, 630, 635, 637, 643, 646, 647, 648, 649, 650, 651, 686, 687, 688, 787, 788, 789, 827, 846, 943, 954, 968, 975, 976, 983, 986, 990, 995, 999, 1000, 1001, 1003, 1004, 1006, 1008, 1009, 1013], "face": [3, 5, 15, 33, 50, 86, 90, 92, 94, 96, 109, 151, 159, 208, 339, 346, 350, 379, 381, 383, 414, 437, 458, 459, 460, 486, 497, 498, 502, 504, 505, 506, 508, 523, 549, 622, 638, 662, 678, 777, 792, 809, 846, 871, 889, 957, 970, 971, 975, 982, 987, 990, 995, 1003], "recognit": [3, 9, 15, 87, 151, 218, 277, 284, 339, 351, 379, 381, 383, 459, 467, 497, 499, 506, 662, 673, 678, 705, 733, 752, 753, 761, 777, 792, 846, 871, 946, 950, 954, 955, 959, 969, 971, 975, 979, 982, 990, 995], "eigenfac": [3, 15, 151, 218, 341, 379, 459, 506, 662, 678, 777, 792, 846, 871, 971, 975, 982, 995], "svm": [3, 7, 9, 10, 11, 15, 16, 24, 26, 28, 29, 30, 66, 68, 70, 87, 99, 110, 120, 123, 126, 130, 134, 135, 136, 140, 142, 146, 151, 160, 163, 165, 174, 175, 191, 192, 193, 194, 195, 209, 215, 217, 218, 221, 222, 229, 233, 236, 237, 238, 239, 241, 242, 244, 245, 246, 247, 249, 250, 253, 254, 256, 265, 270, 271, 272, 274, 281, 282, 288, 290, 296, 300, 301, 303, 306, 315, 316, 320, 333, 341, 348, 352, 360, 368, 375, 378, 379, 381, 383, 400, 401, 402, 459, 469, 477, 480, 506, 520, 521, 528, 532, 533, 542, 558, 559, 564, 565, 570, 596, 604, 608, 633, 641, 642, 643, 654, 662, 663, 665, 667, 678, 699, 706, 725, 763, 777, 783, 788, 789, 792, 794, 795, 812, 826, 827, 839, 841, 846, 862, 863, 942, 943, 946, 949, 951, 952, 954, 955, 959, 967, 969, 971, 975, 976, 979, 982, 983, 984, 988, 990, 992, 995, 996, 997, 999, 1000, 1001, 1002], "imag": [3, 6, 14, 20, 21, 30, 33, 36, 37, 38, 41, 43, 45, 48, 51, 53, 55, 59, 64, 66, 82, 86, 87, 92, 109, 134, 136, 142, 151, 173, 203, 211, 214, 218, 237, 268, 276, 277, 289, 297, 298, 320, 321, 338, 339, 341, 343, 346, 351, 354, 358, 360, 364, 367, 374, 379, 406, 410, 417, 427, 458, 459, 460, 461, 467, 468, 471, 472, 499, 500, 502, 506, 572, 573, 656, 662, 702, 792, 836, 950, 954, 955, 957, 959, 966, 970, 973, 975, 978, 979, 984, 985, 987, 988, 990, 995, 998, 1003, 1004, 1008, 1010, 1011], "denois": [3, 45, 47, 48, 50, 86, 92, 151, 379, 461, 500, 502, 506, 549, 552, 792, 836, 975], "kernel": [3, 6, 9, 10, 11, 16, 28, 29, 48, 54, 70, 80, 86, 88, 96, 99, 123, 129, 134, 137, 139, 140, 141, 142, 145, 149, 164, 165, 183, 191, 196, 208, 209, 217, 221, 233, 237, 239, 241, 244, 245, 249, 253, 254, 260, 265, 270, 284, 291, 299, 302, 303, 305, 306, 308, 309, 310, 311, 313, 314, 317, 329, 333, 338, 348, 358, 360, 372, 374, 375, 378, 381, 382, 397, 405, 413, 417, 426, 427, 430, 447, 448, 449, 456, 461, 463, 467, 469, 479, 498, 499, 500, 506, 509, 519, 521, 523, 525, 527, 530, 533, 535, 558, 559, 575, 576, 596, 600, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 625, 626, 627, 628, 629, 630, 632, 635, 637, 638, 641, 642, 643, 644, 653, 655, 656, 657, 660, 699, 722, 723, 725, 730, 731, 738, 739, 740, 741, 763, 769, 774, 777, 792, 794, 799, 800, 806, 807, 809, 811, 817, 824, 826, 827, 832, 836, 838, 839, 841, 846, 861, 862, 866, 867, 868, 869, 870, 871, 872, 875, 877, 943, 949, 950, 951, 954, 955, 957, 960, 967, 968, 975, 976, 979, 983, 984, 989, 990, 995, 996, 997, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "pca": [3, 6, 31, 42, 48, 65, 66, 68, 70, 71, 80, 86, 89, 96, 97, 128, 151, 179, 203, 205, 212, 214, 217, 221, 238, 247, 250, 259, 263, 268, 277, 291, 329, 338, 348, 360, 370, 373, 374, 375, 380, 390, 438, 441, 449, 461, 467, 469, 479, 497, 498, 499, 500, 504, 505, 508, 509, 514, 608, 623, 653, 655, 657, 661, 763, 788, 792, 815, 822, 825, 826, 828, 836, 844, 846, 946, 948, 951, 957, 964, 968, 970, 975, 984, 989, 990, 995, 997, 998, 999, 1001, 1002, 1003, 1006, 1008, 1009, 1010, 1012, 1013], "lag": [3, 4, 114, 117, 151, 182, 184, 200, 239, 461, 527, 666, 706, 709, 710, 712, 754, 784, 788, 789, 792, 975], "featur": [3, 5, 6, 7, 8, 10, 11, 15, 19, 20, 24, 25, 26, 28, 29, 30, 31, 33, 39, 42, 44, 47, 55, 57, 60, 65, 66, 67, 68, 69, 75, 76, 79, 80, 82, 83, 84, 85, 87, 89, 91, 93, 94, 95, 97, 100, 102, 105, 107, 110, 114, 116, 121, 122, 123, 125, 127, 128, 131, 133, 138, 139, 140, 143, 144, 146, 149, 150, 152, 153, 154, 155, 160, 162, 164, 165, 166, 168, 169, 171, 172, 178, 181, 182, 183, 184, 186, 187, 189, 190, 191, 197, 198, 199, 203, 208, 211, 213, 216, 218, 219, 222, 223, 232, 234, 236, 238, 239, 242, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 258, 262, 263, 264, 267, 268, 270, 273, 274, 276, 278, 279, 282, 286, 287, 289, 292, 293, 294, 295, 297, 298, 300, 301, 303, 304, 305, 308, 312, 316, 319, 322, 325, 327, 328, 329, 338, 339, 340, 341, 342, 343, 344, 348, 349, 351, 353, 354, 355, 358, 359, 360, 361, 363, 364, 368, 372, 374, 376, 377, 378, 379, 380, 384, 385, 386, 387, 388, 390, 395, 397, 402, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 422, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 473, 474, 475, 477, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491, 493, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 538, 544, 545, 546, 547, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 583, 584, 585, 587, 588, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 650, 651, 652, 653, 654, 655, 656, 657, 662, 666, 667, 668, 678, 686, 687, 688, 705, 706, 709, 710, 712, 722, 723, 727, 728, 730, 731, 732, 733, 734, 735, 737, 738, 739, 740, 741, 742, 745, 749, 752, 754, 756, 757, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 777, 778, 779, 780, 781, 782, 783, 784, 785, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 886, 887, 900, 919, 929, 930, 931, 935, 943, 946, 948, 949, 950, 951, 952, 954, 955, 956, 957, 958, 959, 960, 961, 965, 966, 967, 968, 969, 970, 972, 973, 974, 975, 976, 977, 978, 979, 980, 984, 985, 986, 990, 992, 993, 994, 995, 996, 997, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "seri": [3, 4, 12, 20, 77, 108, 114, 117, 151, 153, 156, 157, 164, 182, 184, 186, 200, 202, 223, 239, 244, 286, 292, 297, 338, 341, 351, 360, 374, 454, 455, 456, 457, 461, 465, 466, 467, 469, 470, 475, 506, 527, 655, 659, 666, 706, 709, 710, 712, 754, 784, 788, 789, 792, 882, 945, 950, 951, 955, 957, 968, 973, 975, 998, 1001, 1002, 1003, 1007, 1010, 1012], "forecast": [3, 4, 114, 117, 137, 144, 145, 151, 182, 184, 200, 239, 372, 384, 461, 527, 576, 580, 587, 588, 590, 666, 706, 709, 710, 712, 754, 784, 788, 789, 792, 954, 973, 975], "libsvm": [3, 151, 159, 306, 339, 352, 452, 473, 528, 866, 867, 868, 869, 870, 871, 872, 969, 975, 990, 995, 997, 1003, 1006, 1009], "gui": [3, 151, 452, 870, 871, 975, 986, 995, 996, 1006], "model": [3, 5, 6, 9, 10, 12, 14, 15, 16, 20, 21, 23, 24, 26, 32, 36, 37, 38, 45, 46, 51, 52, 53, 55, 58, 65, 67, 68, 69, 73, 77, 80, 86, 87, 96, 97, 100, 101, 102, 104, 106, 110, 113, 114, 116, 117, 119, 121, 122, 125, 127, 129, 130, 132, 133, 141, 142, 144, 145, 146, 147, 150, 152, 153, 157, 162, 164, 167, 168, 172, 173, 175, 177, 178, 179, 183, 184, 186, 187, 188, 190, 194, 195, 197, 198, 199, 209, 212, 217, 225, 227, 228, 229, 233, 234, 235, 237, 240, 242, 243, 244, 245, 247, 248, 252, 253, 256, 259, 261, 262, 263, 265, 268, 272, 280, 283, 285, 286, 288, 290, 292, 293, 294, 297, 298, 305, 307, 308, 309, 310, 311, 313, 314, 316, 318, 321, 322, 325, 326, 327, 329, 338, 340, 341, 349, 352, 360, 363, 365, 370, 371, 372, 374, 375, 377, 379, 380, 381, 382, 383, 384, 393, 397, 399, 402, 407, 414, 430, 432, 434, 435, 436, 437, 438, 439, 440, 441, 447, 448, 449, 450, 453, 454, 455, 461, 463, 465, 466, 467, 468, 474, 487, 489, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 513, 514, 515, 516, 517, 518, 519, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 553, 554, 556, 558, 559, 562, 567, 571, 574, 575, 576, 580, 592, 597, 598, 599, 600, 602, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 656, 666, 671, 676, 686, 687, 688, 698, 699, 705, 714, 717, 749, 752, 753, 756, 761, 762, 763, 766, 767, 768, 769, 777, 778, 779, 780, 784, 785, 788, 789, 790, 791, 792, 793, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 809, 811, 812, 813, 815, 817, 822, 823, 824, 826, 827, 829, 831, 833, 838, 839, 841, 842, 843, 845, 846, 847, 851, 852, 854, 855, 856, 857, 861, 862, 863, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 881, 938, 944, 946, 947, 948, 951, 952, 955, 957, 960, 961, 962, 964, 965, 966, 967, 968, 969, 970, 973, 974, 975, 976, 978, 980, 982, 984, 988, 989, 990, 995, 996, 997, 998, 999, 1000, 1013], "complex": [3, 9, 10, 15, 16, 20, 68, 107, 122, 135, 138, 143, 149, 151, 186, 196, 199, 208, 215, 216, 219, 232, 237, 240, 243, 248, 280, 288, 291, 292, 296, 308, 312, 322, 323, 328, 342, 346, 351, 358, 374, 375, 379, 381, 385, 405, 409, 412, 413, 415, 432, 454, 465, 466, 467, 479, 499, 506, 516, 522, 523, 524, 525, 527, 529, 530, 569, 595, 603, 621, 623, 641, 642, 698, 714, 763, 792, 794, 822, 826, 827, 831, 839, 846, 862, 866, 869, 872, 874, 875, 876, 877, 943, 944, 946, 947, 949, 951, 953, 955, 960, 964, 967, 974, 975, 976, 978, 990, 996, 998, 1004, 1005, 1008], "influenc": [3, 9, 13, 75, 76, 101, 151, 154, 164, 215, 225, 247, 279, 286, 308, 312, 316, 329, 335, 376, 379, 381, 397, 405, 419, 430, 447, 448, 449, 454, 466, 519, 521, 523, 525, 527, 530, 533, 535, 576, 593, 600, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 625, 626, 627, 628, 629, 630, 632, 635, 637, 638, 641, 643, 644, 698, 714, 792, 799, 800, 808, 809, 816, 817, 824, 843, 844, 855, 867, 869, 872, 875, 877, 886, 943, 948, 949, 950, 957, 960, 964, 968, 969, 975, 978, 998, 1003, 1004], "core": [3, 10, 46, 52, 62, 67, 101, 107, 109, 110, 151, 154, 155, 293, 332, 334, 344, 346, 349, 354, 360, 364, 374, 379, 381, 382, 385, 409, 411, 414, 415, 420, 422, 461, 464, 503, 554, 559, 623, 624, 631, 633, 641, 801, 802, 803, 804, 805, 810, 818, 950, 957, 960, 969, 974, 975, 976, 978, 986, 988, 990, 997, 999, 1000, 1002, 1005, 1009, 1010, 1011], "classif": [3, 6, 7, 10, 16, 19, 22, 23, 24, 26, 29, 32, 42, 67, 68, 69, 73, 74, 79, 81, 85, 90, 101, 103, 105, 107, 108, 109, 110, 115, 117, 118, 120, 124, 126, 129, 131, 132, 133, 134, 135, 136, 137, 143, 144, 145, 154, 155, 159, 160, 172, 173, 174, 175, 182, 190, 192, 194, 195, 197, 208, 210, 214, 215, 219, 222, 228, 232, 233, 236, 237, 238, 239, 240, 248, 253, 254, 256, 257, 260, 261, 267, 268, 269, 271, 272, 273, 274, 276, 281, 282, 283, 284, 297, 302, 303, 304, 308, 311, 314, 315, 316, 317, 319, 321, 322, 329, 333, 335, 339, 340, 341, 343, 348, 351, 355, 359, 360, 369, 372, 374, 375, 378, 379, 381, 382, 383, 391, 402, 434, 440, 447, 452, 453, 454, 456, 457, 458, 459, 460, 461, 462, 464, 465, 467, 468, 469, 475, 477, 479, 480, 484, 485, 487, 488, 506, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 529, 530, 531, 532, 534, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 569, 570, 571, 574, 575, 576, 578, 579, 587, 596, 597, 598, 608, 623, 624, 631, 633, 639, 640, 641, 662, 668, 670, 673, 677, 678, 680, 681, 683, 690, 691, 693, 694, 698, 699, 702, 705, 706, 707, 718, 720, 722, 723, 725, 746, 747, 748, 750, 751, 752, 753, 758, 760, 763, 764, 766, 767, 768, 769, 777, 781, 782, 785, 786, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 800, 801, 802, 803, 804, 805, 808, 813, 815, 816, 822, 823, 824, 826, 830, 833, 838, 839, 840, 841, 846, 847, 850, 852, 861, 862, 863, 866, 868, 869, 870, 871, 872, 874, 875, 876, 877, 878, 879, 880, 889, 892, 900, 943, 944, 946, 947, 948, 951, 952, 956, 959, 961, 962, 964, 965, 967, 972, 973, 975, 976, 977, 978, 979, 980, 984, 985, 990, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012], "text": [3, 6, 7, 10, 11, 12, 15, 16, 17, 19, 29, 30, 34, 37, 41, 50, 54, 55, 57, 58, 59, 61, 66, 75, 76, 107, 112, 157, 162, 176, 177, 209, 213, 220, 221, 225, 227, 232, 238, 243, 245, 246, 250, 264, 267, 269, 274, 281, 291, 296, 298, 315, 324, 333, 335, 338, 339, 340, 346, 351, 358, 360, 372, 374, 375, 377, 378, 379, 381, 384, 412, 414, 429, 433, 452, 453, 454, 464, 468, 473, 486, 501, 509, 529, 580, 590, 617, 623, 631, 633, 639, 641, 662, 668, 670, 672, 678, 682, 693, 694, 701, 757, 759, 763, 777, 792, 801, 803, 805, 808, 813, 826, 827, 829, 830, 838, 862, 863, 864, 866, 878, 879, 880, 900, 943, 946, 950, 952, 954, 955, 956, 958, 961, 964, 966, 968, 969, 972, 974, 975, 978, 980, 990, 995, 996, 997, 998, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "document": [3, 6, 10, 12, 15, 17, 18, 21, 25, 29, 34, 42, 48, 54, 55, 57, 58, 66, 67, 68, 69, 82, 83, 85, 87, 106, 108, 109, 118, 119, 122, 125, 133, 143, 154, 155, 156, 163, 165, 179, 180, 197, 210, 211, 212, 213, 216, 217, 219, 220, 221, 222, 223, 230, 237, 239, 240, 246, 251, 276, 277, 285, 289, 292, 293, 295, 299, 301, 313, 316, 322, 328, 333, 334, 335, 340, 341, 342, 344, 345, 347, 348, 349, 350, 351, 352, 354, 358, 360, 364, 365, 368, 371, 373, 374, 379, 382, 385, 409, 412, 413, 414, 415, 418, 422, 429, 453, 454, 464, 466, 476, 486, 488, 501, 509, 529, 553, 554, 555, 556, 559, 569, 596, 604, 608, 623, 624, 631, 633, 638, 639, 640, 641, 661, 662, 664, 668, 670, 682, 701, 722, 723, 733, 742, 743, 744, 757, 759, 763, 766, 767, 769, 777, 785, 788, 790, 793, 796, 803, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 816, 817, 818, 819, 820, 827, 838, 866, 871, 882, 885, 887, 900, 920, 943, 950, 952, 954, 955, 956, 957, 958, 962, 968, 971, 972, 975, 978, 981, 986, 988, 996, 997, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "outlier": [3, 32, 41, 51, 75, 76, 77, 114, 118, 138, 151, 160, 180, 184, 185, 186, 187, 188, 196, 208, 260, 278, 283, 286, 307, 318, 341, 360, 374, 376, 381, 396, 411, 429, 431, 434, 435, 438, 439, 440, 441, 455, 456, 457, 461, 475, 477, 487, 489, 528, 596, 604, 614, 635, 636, 637, 641, 642, 643, 644, 657, 667, 792, 812, 816, 827, 835, 836, 838, 839, 840, 842, 843, 844, 845, 846, 851, 852, 853, 854, 855, 856, 857, 869, 870, 872, 954, 968, 969, 973, 975, 976, 989, 990, 995, 1000, 1001, 1003], "detect": [3, 8, 10, 20, 32, 60, 62, 75, 76, 77, 108, 111, 118, 151, 163, 186, 196, 208, 222, 232, 239, 242, 248, 249, 260, 279, 285, 307, 341, 344, 346, 350, 358, 360, 372, 373, 374, 376, 378, 382, 396, 411, 414, 429, 431, 434, 435, 438, 439, 440, 441, 453, 454, 456, 457, 461, 475, 477, 480, 487, 502, 503, 504, 511, 528, 529, 553, 556, 561, 596, 604, 642, 663, 667, 691, 753, 792, 812, 816, 827, 836, 839, 840, 844, 845, 846, 866, 870, 946, 950, 973, 974, 975, 976, 978, 983, 988, 989, 990, 995, 998, 1001, 1002, 1003, 1005, 1007, 1008, 1010, 1011], "set": [3, 4, 5, 6, 7, 8, 11, 13, 14, 16, 20, 24, 25, 26, 28, 29, 32, 34, 38, 39, 41, 42, 43, 46, 47, 50, 51, 52, 54, 55, 57, 59, 61, 62, 63, 66, 67, 69, 75, 76, 77, 80, 83, 86, 87, 91, 92, 95, 99, 101, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 124, 127, 132, 133, 136, 138, 144, 145, 146, 147, 151, 153, 154, 155, 156, 157, 161, 166, 167, 170, 171, 173, 175, 177, 178, 179, 181, 182, 183, 184, 187, 190, 195, 196, 200, 202, 203, 204, 209, 210, 211, 212, 214, 215, 216, 219, 223, 225, 227, 229, 230, 233, 234, 237, 239, 240, 241, 242, 243, 244, 247, 248, 249, 250, 253, 256, 258, 261, 265, 266, 267, 268, 269, 272, 275, 276, 277, 279, 281, 283, 284, 285, 286, 288, 290, 291, 295, 297, 298, 301, 302, 305, 307, 310, 312, 316, 320, 321, 322, 326, 327, 328, 329, 333, 334, 335, 338, 339, 341, 343, 344, 346, 348, 350, 351, 353, 354, 359, 360, 361, 364, 365, 370, 371, 372, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 388, 391, 398, 399, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 447, 448, 449, 450, 453, 454, 458, 460, 461, 462, 464, 467, 468, 469, 473, 474, 475, 480, 488, 489, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 662, 663, 664, 665, 666, 667, 668, 678, 679, 684, 686, 687, 690, 691, 692, 693, 694, 695, 698, 702, 704, 705, 709, 710, 712, 714, 715, 717, 720, 743, 744, 746, 747, 748, 749, 751, 753, 754, 755, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 880, 881, 886, 887, 897, 898, 903, 907, 910, 911, 922, 923, 924, 925, 928, 929, 935, 938, 943, 944, 945, 946, 947, 948, 949, 951, 952, 953, 954, 955, 956, 957, 958, 960, 961, 962, 964, 965, 966, 967, 968, 969, 970, 971, 973, 974, 975, 980, 982, 983, 984, 987, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "predict": [3, 6, 7, 8, 11, 22, 24, 25, 26, 28, 30, 32, 34, 41, 45, 53, 54, 55, 59, 66, 67, 68, 69, 71, 79, 97, 99, 100, 101, 103, 104, 105, 107, 109, 110, 111, 112, 115, 117, 118, 119, 120, 121, 122, 123, 124, 128, 129, 133, 136, 137, 138, 140, 141, 143, 144, 145, 146, 147, 149, 150, 151, 154, 155, 156, 157, 159, 161, 164, 165, 166, 174, 177, 178, 179, 180, 183, 184, 185, 186, 188, 189, 190, 191, 196, 197, 199, 200, 209, 210, 212, 214, 216, 218, 226, 227, 228, 229, 230, 231, 232, 233, 237, 239, 241, 242, 245, 248, 249, 253, 256, 258, 262, 265, 266, 267, 270, 271, 277, 279, 280, 284, 285, 288, 289, 290, 291, 292, 294, 295, 298, 300, 301, 302, 304, 305, 307, 308, 312, 314, 315, 316, 317, 320, 321, 325, 326, 327, 328, 329, 332, 334, 338, 341, 343, 346, 348, 353, 355, 360, 363, 365, 368, 369, 370, 372, 373, 374, 375, 377, 379, 381, 382, 383, 388, 391, 396, 397, 402, 403, 404, 405, 407, 408, 409, 412, 413, 414, 430, 434, 447, 448, 449, 452, 466, 473, 489, 499, 506, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 542, 547, 558, 559, 567, 571, 575, 576, 578, 579, 580, 581, 587, 590, 592, 593, 595, 596, 597, 598, 599, 600, 602, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 662, 663, 665, 666, 667, 668, 670, 671, 672, 673, 674, 675, 677, 679, 680, 683, 686, 687, 688, 689, 690, 691, 692, 693, 694, 698, 699, 702, 705, 706, 707, 710, 712, 714, 716, 720, 746, 747, 748, 749, 750, 751, 752, 753, 757, 758, 760, 761, 762, 763, 766, 767, 769, 777, 785, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 812, 813, 816, 817, 823, 824, 826, 833, 846, 847, 861, 862, 863, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 928, 943, 944, 945, 946, 947, 948, 949, 950, 952, 953, 955, 956, 957, 958, 960, 961, 962, 964, 967, 968, 969, 970, 972, 973, 974, 975, 978, 980, 982, 983, 984, 988, 990, 992, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "latenc": [3, 7, 8, 151, 332, 489, 530, 637, 643, 792, 846, 872, 919, 928, 973, 975, 990, 998], "speci": [3, 83, 151, 219, 260, 320, 339, 380, 463, 671, 753, 811, 870, 881, 954, 960, 975, 990, 995], "distribut": [3, 4, 8, 9, 10, 13, 20, 26, 32, 34, 36, 41, 49, 50, 52, 54, 59, 71, 74, 75, 76, 80, 85, 101, 103, 114, 118, 131, 136, 138, 147, 151, 153, 154, 157, 159, 161, 182, 184, 186, 204, 206, 209, 213, 219, 225, 230, 231, 235, 239, 245, 247, 256, 260, 264, 278, 279, 281, 284, 294, 297, 298, 313, 316, 320, 333, 334, 339, 342, 343, 344, 346, 347, 350, 351, 352, 360, 368, 372, 373, 374, 376, 378, 379, 380, 386, 412, 414, 434, 435, 436, 437, 438, 439, 440, 441, 453, 463, 468, 480, 481, 482, 483, 484, 488, 497, 498, 501, 515, 516, 517, 528, 576, 590, 605, 607, 609, 610, 613, 623, 624, 634, 644, 645, 653, 654, 655, 657, 671, 673, 688, 716, 753, 761, 762, 767, 768, 775, 777, 781, 782, 792, 802, 805, 811, 815, 822, 829, 842, 843, 844, 845, 846, 854, 855, 856, 861, 862, 870, 881, 905, 922, 943, 948, 950, 952, 953, 954, 956, 957, 959, 960, 966, 967, 973, 974, 975, 979, 983, 987, 989, 990, 995, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1011], "relatengin": [3, 37, 106, 111, 117, 143, 151, 155, 183, 333, 340, 343, 374, 380, 382, 429, 461, 527, 604, 638, 666, 784, 789, 824, 825, 827, 830, 831, 836, 839, 841, 845, 944, 946, 954, 964, 975, 1001], "topic": [3, 6, 7, 8, 66, 151, 320, 321, 322, 341, 342, 378, 379, 382, 453, 462, 501, 503, 505, 512, 553, 556, 950, 955, 973, 974, 975, 988, 1000, 1002], "extract": [3, 4, 6, 8, 11, 12, 17, 47, 52, 65, 66, 67, 68, 79, 87, 107, 132, 136, 151, 197, 232, 238, 243, 244, 247, 277, 301, 311, 320, 322, 329, 338, 341, 343, 348, 352, 355, 358, 374, 375, 378, 379, 415, 417, 420, 421, 427, 429, 453, 454, 458, 459, 468, 469, 496, 499, 500, 501, 502, 503, 504, 505, 506, 508, 510, 511, 512, 548, 549, 553, 554, 556, 558, 559, 562, 564, 596, 683, 752, 763, 777, 803, 825, 826, 871, 903, 911, 918, 943, 951, 955, 959, 964, 968, 973, 975, 978, 980, 984, 985, 990, 995, 996, 1004, 1007], "neg": [3, 4, 6, 16, 23, 57, 71, 73, 80, 107, 113, 114, 119, 151, 153, 154, 160, 172, 178, 182, 200, 229, 230, 236, 239, 242, 246, 248, 249, 259, 279, 283, 292, 320, 352, 360, 361, 374, 378, 381, 382, 383, 385, 386, 397, 405, 409, 417, 430, 434, 447, 448, 449, 453, 496, 498, 500, 501, 502, 503, 505, 507, 509, 512, 517, 518, 519, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 535, 553, 556, 557, 560, 561, 563, 564, 565, 567, 569, 570, 571, 572, 573, 574, 576, 600, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 625, 626, 627, 628, 629, 630, 632, 634, 635, 637, 638, 642, 643, 644, 645, 652, 663, 664, 669, 670, 677, 678, 680, 681, 683, 684, 686, 687, 688, 691, 693, 694, 695, 699, 702, 705, 707, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 722, 723, 746, 747, 748, 749, 751, 754, 755, 757, 761, 762, 769, 785, 787, 792, 799, 800, 809, 812, 817, 824, 833, 842, 844, 845, 850, 854, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 901, 903, 922, 952, 954, 955, 957, 958, 959, 960, 968, 969, 975, 988, 989, 990, 995, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012], "matrix": [3, 6, 7, 9, 13, 14, 19, 20, 21, 30, 32, 36, 38, 41, 51, 59, 66, 74, 75, 76, 77, 79, 87, 88, 89, 97, 145, 151, 157, 160, 168, 183, 187, 210, 213, 214, 216, 230, 232, 246, 276, 292, 295, 297, 298, 312, 320, 321, 322, 328, 333, 341, 342, 343, 346, 348, 352, 355, 358, 359, 360, 371, 375, 376, 377, 382, 383, 384, 385, 386, 396, 397, 403, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 417, 419, 422, 424, 425, 427, 428, 429, 430, 432, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 447, 448, 449, 450, 452, 453, 454, 457, 461, 462, 465, 466, 467, 468, 469, 470, 473, 474, 475, 484, 486, 488, 489, 491, 492, 494, 496, 497, 498, 499, 500, 501, 502, 503, 505, 506, 509, 510, 511, 512, 513, 514, 515, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 530, 531, 532, 533, 534, 535, 546, 547, 548, 550, 551, 553, 554, 555, 556, 558, 559, 568, 569, 570, 571, 572, 573, 574, 576, 585, 594, 595, 596, 598, 600, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 664, 665, 666, 667, 668, 672, 677, 678, 679, 680, 681, 683, 693, 694, 695, 698, 702, 703, 704, 705, 718, 719, 722, 723, 724, 725, 727, 728, 730, 731, 732, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 751, 752, 756, 757, 760, 761, 762, 763, 766, 767, 777, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 808, 809, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 829, 830, 831, 832, 833, 835, 837, 838, 839, 841, 843, 844, 845, 846, 848, 849, 850, 851, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 882, 884, 885, 886, 887, 892, 900, 901, 902, 903, 904, 907, 908, 909, 917, 918, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 940, 944, 946, 948, 950, 951, 955, 956, 957, 958, 964, 965, 966, 967, 968, 969, 970, 971, 975, 987, 988, 989, 990, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "factor": [3, 6, 9, 25, 29, 41, 43, 50, 52, 59, 86, 92, 96, 120, 151, 154, 196, 207, 209, 219, 250, 251, 259, 260, 274, 275, 279, 281, 290, 292, 307, 333, 334, 346, 352, 355, 360, 371, 373, 374, 381, 382, 384, 405, 407, 419, 434, 436, 437, 438, 439, 441, 443, 453, 469, 479, 480, 492, 497, 500, 501, 503, 505, 506, 509, 510, 511, 512, 514, 515, 526, 527, 528, 553, 556, 562, 578, 614, 615, 616, 619, 620, 621, 647, 648, 657, 684, 747, 763, 766, 767, 788, 812, 846, 860, 862, 870, 902, 903, 943, 950, 951, 957, 964, 967, 971, 973, 975, 989, 990, 995, 996, 998, 999, 1001, 1009, 1011], "latent": [3, 6, 17, 97, 151, 277, 321, 377, 382, 384, 453, 497, 501, 503, 504, 505, 508, 509, 553, 556, 822, 953, 973, 975, 988, 989, 990, 997, 1000], "dirichlet": [3, 6, 151, 225, 226, 231, 234, 382, 453, 501, 503, 505, 553, 556, 761, 973, 975, 989, 990, 995, 1000, 1001], "alloc": [3, 6, 24, 58, 151, 251, 290, 342, 346, 347, 374, 382, 408, 412, 424, 453, 501, 503, 505, 549, 553, 556, 611, 617, 625, 627, 766, 767, 769, 785, 790, 793, 943, 964, 973, 975, 989, 990, 999, 1000, 1005, 1006, 1012], "visual": [3, 4, 9, 13, 16, 20, 24, 28, 30, 40, 43, 46, 49, 54, 57, 58, 75, 84, 86, 89, 91, 94, 96, 106, 107, 115, 117, 118, 120, 124, 125, 146, 150, 151, 155, 157, 166, 173, 182, 184, 200, 202, 203, 207, 208, 211, 214, 220, 221, 230, 232, 233, 235, 236, 240, 241, 244, 246, 248, 249, 264, 268, 269, 273, 275, 279, 283, 284, 288, 290, 298, 312, 338, 342, 344, 352, 353, 371, 376, 378, 379, 380, 381, 403, 406, 410, 411, 419, 437, 461, 467, 469, 472, 475, 479, 487, 497, 499, 506, 529, 531, 536, 596, 598, 623, 654, 657, 662, 663, 665, 666, 667, 683, 691, 746, 753, 764, 765, 768, 769, 780, 781, 782, 783, 784, 785, 792, 823, 827, 831, 835, 836, 838, 842, 843, 844, 846, 868, 871, 880, 899, 949, 951, 952, 957, 958, 960, 961, 964, 970, 973, 975, 979, 990, 998, 1005, 1006, 1007, 1009], "stock": [3, 43, 151, 202, 203, 374, 376, 419, 437, 654, 975, 982], "market": [3, 43, 117, 151, 202, 203, 374, 376, 419, 437, 654, 975, 978, 982], "wikipedia": [3, 23, 151, 354, 373, 374, 560, 572, 573, 601, 621, 633, 636, 647, 648, 660, 669, 670, 672, 674, 677, 681, 683, 690, 693, 694, 695, 698, 699, 702, 707, 720, 747, 749, 750, 752, 753, 756, 757, 808, 809, 814, 815, 816, 817, 844, 860, 874, 875, 946, 950, 954, 957, 966, 970, 975, 988, 995, 1002], "princip": [3, 78, 79, 83, 89, 91, 92, 93, 95, 120, 151, 202, 214, 217, 268, 284, 290, 338, 374, 377, 386, 449, 496, 497, 498, 499, 500, 502, 504, 505, 506, 507, 508, 509, 510, 511, 515, 622, 653, 654, 655, 657, 658, 792, 815, 827, 846, 902, 903, 951, 957, 975, 989, 990, 995], "eigenvector": [3, 43, 80, 83, 151, 225, 374, 417, 427, 499, 500, 506, 515, 653, 654, 656, 660, 951, 975, 995, 999, 1009], "end": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 153, 154, 155, 156, 157, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 324, 325, 326, 327, 328, 344, 346, 348, 350, 358, 360, 361, 364, 365, 371, 374, 375, 377, 381, 415, 421, 433, 453, 454, 473, 474, 502, 511, 522, 523, 524, 525, 529, 530, 531, 610, 611, 612, 615, 616, 617, 618, 619, 620, 625, 626, 627, 628, 646, 647, 648, 649, 763, 766, 767, 777, 784, 787, 824, 826, 864, 874, 875, 876, 877, 907, 908, 938, 943, 946, 950, 951, 953, 954, 964, 966, 968, 973, 978, 985, 988, 1000, 1002, 1005, 1008, 1009], "download": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 127, 128, 129, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 151, 153, 154, 155, 156, 157, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 324, 325, 326, 327, 328, 339, 341, 343, 344, 350, 351, 354, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 475, 970, 984, 986, 988, 990, 999, 1000, 1003, 1007, 1008, 1009], "exampl": [4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 333, 334, 343, 345, 346, 348, 349, 350, 352, 353, 354, 355, 356, 359, 360, 364, 367, 368, 373, 385, 386, 387, 389, 390, 392, 393, 395, 396, 399, 400, 401, 404, 421, 422, 424, 426, 428, 436, 443, 445, 446, 450, 451, 458, 462, 468, 470, 472, 473, 474, 481, 482, 483, 493, 494, 496, 510, 511, 512, 513, 520, 537, 538, 542, 548, 550, 551, 557, 560, 561, 563, 566, 568, 574, 577, 581, 585, 586, 589, 591, 594, 601, 602, 603, 607, 615, 616, 619, 625, 626, 628, 632, 640, 648, 650, 651, 652, 659, 660, 661, 664, 673, 675, 676, 679, 680, 681, 685, 686, 687, 688, 689, 690, 692, 694, 695, 697, 700, 703, 704, 707, 708, 711, 715, 718, 720, 722, 723, 724, 727, 728, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 744, 745, 747, 755, 758, 760, 770, 771, 772, 773, 774, 775, 776, 786, 798, 800, 802, 806, 807, 816, 817, 818, 820, 821, 828, 829, 832, 834, 837, 848, 849, 851, 853, 854, 856, 857, 858, 861, 865, 867, 876, 877, 878, 879, 882, 883, 884, 885, 886, 887, 888, 890, 891, 892, 893, 894, 895, 896, 897, 899, 901, 902, 903, 904, 905, 906, 908, 909, 916, 917, 918, 919, 922, 923, 925, 926, 927, 929, 930, 931, 932, 933, 934, 935, 936, 937, 939, 940, 941, 942, 944, 952, 974, 975, 976, 978, 980, 983, 984, 988, 990, 996, 997, 998, 999, 1001, 1002, 1003, 1005, 1008, 1010, 1011, 1012], "run": [4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 153, 154, 155, 156, 157, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 324, 325, 326, 327, 328, 329, 333, 334, 344, 346, 347, 348, 350, 351, 352, 353, 354, 358, 360, 361, 364, 370, 374, 376, 378, 381, 384, 385, 386, 402, 408, 409, 411, 412, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 427, 429, 432, 433, 436, 437, 496, 497, 498, 499, 500, 502, 504, 506, 507, 508, 510, 511, 513, 520, 521, 522, 523, 528, 529, 530, 531, 532, 533, 534, 535, 547, 557, 559, 560, 561, 563, 564, 565, 567, 575, 576, 595, 599, 605, 611, 612, 614, 616, 617, 618, 620, 621, 625, 626, 627, 628, 647, 648, 653, 654, 655, 656, 657, 658, 659, 745, 763, 766, 767, 769, 777, 785, 787, 788, 789, 790, 791, 793, 798, 799, 808, 809, 810, 812, 814, 816, 817, 818, 819, 820, 823, 824, 825, 828, 861, 862, 864, 866, 867, 868, 869, 870, 871, 872, 874, 875, 897, 898, 922, 925, 928, 943, 953, 955, 958, 967, 969, 970, 973, 974, 978, 979, 986, 988, 995, 998, 1000, 1002, 1003, 1004, 1005, 1009, 1010, 1011], "yourbrowser": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 153, 154, 155, 156, 157, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 324, 325, 326, 327, 328, 346, 354, 964, 1012], "jupyterlit": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 153, 154, 155, 156, 157, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 324, 325, 326, 327, 328], "binder": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 153, 154, 155, 156, 157, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 324, 325, 326, 327, 328], "notebook": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 153, 154, 155, 156, 157, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 324, 325, 326, 327, 328, 347, 348, 352, 375, 433, 864, 970, 972, 973, 974, 1006, 1009], "introduc": [4, 73, 75, 76, 92, 117, 135, 151, 156, 161, 166, 186, 208, 213, 216, 219, 221, 246, 293, 294, 322, 339, 342, 344, 346, 348, 350, 351, 354, 358, 360, 365, 372, 374, 376, 378, 379, 381, 382, 398, 406, 407, 408, 410, 412, 414, 424, 429, 433, 447, 448, 449, 450, 461, 469, 480, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 514, 520, 521, 531, 532, 533, 534, 535, 546, 547, 548, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 572, 573, 592, 593, 594, 595, 600, 603, 604, 605, 606, 607, 623, 629, 650, 651, 653, 654, 657, 792, 810, 815, 818, 822, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 858, 859, 860, 864, 948, 950, 953, 956, 957, 960, 964, 966, 968, 969, 975, 979, 986, 995, 996, 1001, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1011], "differ": [4, 5, 7, 10, 12, 14, 15, 16, 20, 23, 26, 28, 29, 32, 33, 34, 36, 38, 39, 40, 42, 43, 44, 46, 49, 50, 52, 53, 54, 55, 57, 61, 62, 63, 64, 66, 67, 68, 70, 75, 79, 80, 83, 84, 85, 87, 89, 90, 92, 94, 95, 96, 101, 104, 106, 107, 110, 111, 112, 114, 116, 117, 122, 123, 124, 125, 127, 129, 131, 136, 137, 138, 139, 140, 143, 144, 145, 149, 150, 151, 153, 154, 156, 159, 161, 162, 165, 168, 169, 170, 171, 173, 179, 182, 183, 184, 186, 187, 188, 189, 190, 199, 200, 202, 203, 204, 205, 207, 209, 211, 214, 215, 216, 219, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 253, 254, 256, 258, 259, 262, 265, 266, 268, 274, 275, 278, 280, 281, 283, 284, 288, 303, 304, 306, 307, 308, 310, 311, 316, 317, 320, 321, 322, 329, 333, 334, 335, 340, 341, 343, 344, 345, 346, 349, 351, 353, 355, 359, 360, 364, 368, 371, 372, 373, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 387, 399, 402, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 423, 424, 427, 429, 440, 443, 455, 458, 459, 461, 468, 469, 473, 474, 477, 479, 487, 502, 503, 504, 505, 511, 512, 514, 515, 520, 521, 528, 546, 547, 553, 554, 555, 556, 559, 576, 578, 579, 580, 584, 587, 588, 592, 596, 597, 598, 599, 603, 608, 609, 612, 614, 616, 618, 620, 623, 626, 631, 632, 633, 637, 639, 641, 642, 643, 645, 655, 657, 659, 663, 665, 666, 669, 670, 671, 672, 674, 680, 682, 683, 691, 692, 693, 694, 695, 698, 699, 701, 707, 721, 722, 723, 725, 742, 746, 747, 748, 750, 751, 753, 756, 757, 759, 762, 763, 765, 766, 767, 768, 769, 772, 777, 778, 779, 780, 781, 782, 783, 785, 787, 789, 790, 793, 801, 802, 803, 804, 805, 806, 807, 808, 809, 812, 816, 819, 822, 826, 831, 835, 836, 838, 839, 840, 841, 842, 843, 844, 846, 847, 851, 852, 853, 854, 855, 856, 857, 866, 867, 868, 871, 874, 875, 876, 877, 911, 918, 943, 944, 946, 947, 949, 951, 952, 953, 954, 955, 956, 957, 958, 960, 961, 962, 964, 967, 968, 969, 970, 971, 973, 974, 975, 978, 979, 981, 982, 983, 987, 988, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "strategi": [4, 13, 49, 51, 55, 58, 67, 111, 116, 122, 128, 133, 135, 149, 150, 151, 156, 166, 171, 182, 190, 200, 211, 219, 221, 232, 238, 240, 242, 243, 244, 246, 247, 248, 249, 251, 258, 273, 276, 278, 280, 281, 285, 286, 288, 289, 292, 322, 332, 348, 352, 359, 360, 378, 381, 382, 383, 386, 402, 403, 404, 412, 417, 427, 437, 467, 469, 477, 479, 487, 498, 503, 516, 517, 526, 527, 529, 530, 532, 533, 536, 553, 554, 556, 557, 559, 567, 592, 593, 595, 599, 610, 612, 616, 618, 620, 626, 628, 630, 638, 640, 656, 660, 669, 676, 678, 696, 719, 721, 759, 763, 766, 767, 769, 777, 780, 783, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 798, 799, 823, 824, 831, 836, 847, 861, 866, 868, 871, 874, 875, 876, 877, 925, 943, 944, 953, 955, 956, 957, 958, 960, 962, 964, 968, 969, 970, 973, 975, 983, 988, 990, 998, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1013], "leverag": [4, 8, 34, 46, 80, 200, 320, 321, 333, 334, 344, 360, 378, 381, 841, 943, 950, 979, 998, 1010], "task": [4, 7, 90, 108, 109, 115, 117, 134, 135, 146, 151, 160, 166, 168, 169, 171, 181, 182, 198, 202, 219, 236, 258, 312, 322, 333, 335, 341, 343, 344, 345, 346, 350, 351, 352, 355, 358, 359, 360, 379, 381, 382, 383, 384, 413, 426, 458, 470, 480, 557, 560, 561, 563, 564, 565, 569, 570, 571, 574, 597, 598, 611, 612, 617, 618, 625, 626, 627, 628, 639, 646, 649, 691, 693, 694, 718, 746, 748, 751, 753, 764, 768, 781, 786, 920, 921, 951, 954, 955, 956, 957, 965, 967, 969, 970, 972, 974, 975, 976, 977, 978, 979, 986, 987, 988, 990, 995, 1000, 1004, 1010], "highli": [4, 9, 26, 68, 75, 76, 89, 97, 118, 166, 177, 187, 239, 242, 248, 275, 312, 321, 333, 334, 346, 348, 352, 372, 374, 378, 381, 382, 417, 427, 461, 528, 636, 657, 775, 777, 822, 950, 954, 957, 958, 960, 968, 969, 972, 973], "depend": [4, 5, 7, 13, 26, 34, 50, 71, 91, 107, 111, 114, 115, 117, 119, 122, 131, 135, 144, 149, 151, 152, 154, 157, 159, 162, 166, 200, 203, 208, 209, 215, 219, 230, 239, 240, 244, 245, 246, 259, 275, 279, 284, 290, 293, 305, 312, 316, 321, 322, 329, 333, 334, 335, 339, 346, 348, 349, 354, 355, 358, 359, 360, 361, 363, 364, 367, 368, 370, 373, 374, 376, 378, 379, 381, 382, 383, 384, 385, 403, 404, 405, 409, 411, 412, 414, 415, 417, 419, 422, 424, 425, 427, 429, 434, 449, 454, 455, 456, 458, 461, 465, 466, 467, 469, 470, 475, 499, 500, 506, 509, 516, 524, 525, 527, 553, 554, 555, 556, 567, 569, 572, 573, 576, 592, 597, 598, 603, 605, 613, 623, 624, 634, 636, 638, 641, 642, 643, 645, 652, 655, 656, 659, 660, 676, 693, 694, 702, 705, 742, 745, 747, 748, 751, 756, 757, 761, 762, 782, 791, 808, 809, 810, 812, 814, 815, 816, 817, 818, 824, 825, 827, 839, 840, 843, 846, 860, 867, 868, 871, 875, 884, 943, 944, 946, 947, 948, 950, 951, 953, 954, 956, 957, 958, 959, 962, 966, 968, 969, 970, 975, 979, 986, 988, 990, 992, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1010, 1011, 1012], "busi": [4, 182, 239, 354, 358, 752, 950, 954, 978], "dai": [4, 12, 13, 117, 143, 155, 183, 334, 343, 346, 845, 978, 1001, 1002, 1009, 1010], "week": [4, 13, 117, 295, 345, 346, 361, 461, 978, 1009], "yearli": 4, "season": [4, 13, 143, 155, 183, 345], "perform": [4, 7, 13, 19, 23, 24, 25, 30, 33, 35, 45, 46, 50, 54, 55, 56, 57, 58, 59, 61, 63, 64, 66, 67, 70, 73, 80, 90, 96, 99, 101, 107, 109, 111, 112, 113, 115, 116, 117, 121, 122, 127, 131, 135, 136, 139, 147, 149, 150, 151, 154, 155, 156, 157, 159, 166, 171, 182, 184, 186, 188, 189, 190, 199, 200, 203, 204, 206, 209, 214, 217, 219, 226, 227, 230, 232, 234, 235, 236, 237, 239, 240, 241, 244, 245, 247, 248, 250, 252, 254, 256, 258, 259, 272, 277, 279, 281, 283, 285, 286, 288, 294, 295, 296, 298, 299, 308, 311, 312, 314, 316, 320, 322, 329, 332, 334, 335, 341, 343, 348, 349, 350, 352, 354, 355, 358, 359, 360, 363, 365, 368, 369, 370, 371, 372, 373, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 392, 396, 405, 407, 408, 409, 411, 412, 413, 415, 417, 419, 420, 424, 426, 433, 434, 447, 448, 449, 450, 459, 467, 477, 480, 496, 497, 498, 500, 502, 507, 508, 509, 510, 511, 513, 515, 516, 517, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 546, 547, 548, 553, 554, 555, 556, 559, 566, 567, 568, 575, 576, 592, 595, 596, 603, 605, 610, 616, 619, 620, 621, 623, 629, 630, 631, 632, 633, 635, 638, 640, 641, 642, 643, 647, 648, 650, 652, 654, 655, 658, 659, 662, 668, 669, 670, 672, 673, 677, 678, 690, 693, 694, 702, 704, 706, 719, 720, 721, 742, 747, 748, 750, 751, 752, 758, 759, 760, 761, 762, 763, 766, 767, 774, 775, 777, 781, 787, 788, 789, 791, 792, 795, 798, 799, 801, 802, 803, 804, 805, 806, 807, 813, 815, 821, 822, 823, 824, 826, 827, 829, 832, 833, 835, 836, 838, 839, 840, 842, 843, 846, 847, 849, 851, 852, 853, 855, 856, 857, 861, 862, 864, 868, 869, 870, 871, 872, 874, 875, 876, 877, 886, 887, 927, 938, 943, 944, 946, 948, 950, 951, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 964, 967, 968, 969, 970, 973, 974, 975, 978, 979, 980, 983, 986, 989, 990, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012], "sklearn": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 333, 334, 335, 339, 340, 341, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 358, 359, 360, 363, 364, 365, 368, 370, 372, 374, 375, 376, 378, 379, 380, 381, 382, 383, 384, 943, 944, 946, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 960, 961, 962, 964, 965, 966, 967, 968, 969, 970, 973, 974, 979, 983, 984, 985, 986, 987, 988, 992, 995, 996, 997, 998, 999, 1000, 1001, 1002], "preprocess": [4, 5, 6, 10, 26, 29, 39, 41, 46, 50, 52, 55, 59, 66, 67, 68, 69, 71, 80, 87, 97, 106, 111, 132, 136, 143, 147, 156, 159, 161, 163, 170, 171, 173, 182, 183, 188, 198, 200, 203, 210, 211, 220, 223, 236, 246, 248, 253, 262, 267, 268, 274, 275, 277, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 295, 301, 308, 311, 321, 335, 338, 340, 343, 346, 351, 359, 360, 370, 371, 374, 375, 378, 381, 382, 383, 429, 430, 431, 432, 454, 532, 546, 547, 553, 554, 556, 595, 623, 624, 637, 639, 641, 643, 652, 795, 826, 827, 866, 867, 868, 869, 871, 872, 944, 950, 955, 958, 965, 968, 969, 971, 973, 975, 977, 978, 979, 984, 985, 988, 990, 995, 996, 997, 998, 999, 1000, 1001, 1002], "splinetransform": [4, 183, 219, 291, 841, 964, 1008, 1010, 1011], "class": [4, 8, 9, 10, 11, 14, 16, 19, 22, 23, 24, 26, 28, 32, 37, 51, 52, 53, 55, 67, 68, 83, 84, 85, 92, 95, 97, 99, 100, 107, 109, 117, 118, 123, 136, 138, 139, 141, 142, 146, 147, 149, 151, 154, 155, 159, 160, 172, 173, 174, 190, 194, 197, 198, 203, 209, 216, 217, 219, 225, 226, 227, 232, 233, 234, 239, 241, 245, 249, 250, 256, 258, 259, 262, 264, 265, 267, 268, 269, 270, 284, 288, 292, 294, 295, 297, 299, 300, 303, 304, 306, 308, 309, 312, 317, 320, 321, 322, 325, 328, 335, 338, 340, 341, 342, 343, 346, 347, 348, 350, 351, 352, 353, 355, 358, 359, 364, 365, 370, 372, 374, 375, 377, 379, 383, 384, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 426, 429, 430, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 447, 448, 449, 450, 452, 453, 454, 456, 457, 458, 459, 460, 461, 462, 465, 467, 468, 469, 473, 474, 475, 477, 479, 480, 484, 487, 488, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 546, 547, 548, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 600, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 653, 654, 655, 656, 657, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 677, 678, 679, 680, 681, 682, 683, 685, 691, 693, 694, 695, 697, 699, 700, 701, 702, 703, 704, 705, 706, 707, 718, 719, 721, 746, 747, 748, 750, 751, 752, 753, 758, 759, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 787, 789, 790, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 858, 859, 861, 862, 863, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 878, 879, 880, 881, 891, 892, 893, 894, 895, 897, 898, 910, 911, 912, 915, 920, 922, 924, 925, 938, 940, 943, 944, 945, 946, 948, 949, 950, 951, 953, 955, 956, 958, 961, 962, 964, 965, 967, 970, 974, 975, 976, 978, 979, 983, 986, 988, 990, 992, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "extrapol": [4, 138, 161, 183, 212, 242, 845, 954, 964, 970, 1008, 1010], "option": [4, 28, 43, 49, 94, 107, 115, 144, 150, 163, 166, 183, 219, 242, 248, 289, 320, 324, 329, 335, 340, 341, 342, 344, 346, 347, 349, 351, 352, 354, 355, 358, 360, 361, 364, 368, 374, 375, 377, 378, 379, 381, 382, 385, 398, 402, 406, 407, 408, 409, 410, 411, 412, 413, 414, 417, 424, 426, 427, 428, 429, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 447, 448, 449, 450, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 546, 547, 548, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 575, 576, 577, 578, 579, 580, 581, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 597, 598, 599, 600, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 652, 653, 654, 655, 657, 659, 660, 676, 678, 682, 693, 694, 699, 700, 701, 721, 722, 723, 728, 730, 731, 735, 738, 739, 740, 741, 742, 745, 747, 748, 751, 756, 757, 759, 764, 765, 766, 767, 769, 770, 772, 781, 785, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 815, 816, 817, 818, 822, 823, 824, 825, 826, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 855, 858, 859, 861, 862, 864, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 878, 880, 893, 940, 943, 944, 950, 953, 954, 957, 964, 967, 969, 970, 974, 986, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "load": [4, 6, 11, 12, 13, 15, 25, 30, 43, 45, 50, 67, 68, 82, 87, 97, 106, 108, 110, 112, 118, 119, 122, 123, 125, 133, 134, 143, 154, 155, 159, 163, 178, 179, 182, 190, 198, 211, 212, 216, 218, 219, 220, 221, 223, 230, 235, 237, 239, 244, 246, 251, 256, 259, 263, 268, 275, 276, 277, 289, 290, 292, 293, 295, 299, 300, 301, 325, 328, 333, 338, 341, 343, 349, 352, 359, 368, 373, 377, 378, 379, 381, 447, 448, 449, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 497, 499, 508, 806, 807, 903, 964, 974, 980, 982, 984, 990, 995, 1000, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "openml": [4, 13, 67, 122, 143, 154, 182, 190, 198, 200, 210, 256, 258, 276, 339, 364, 461, 990, 1003, 1005, 1008], "repositori": [4, 8, 13, 159, 294, 339, 341, 343, 344, 346, 348, 350, 354, 361, 364, 469, 973, 977, 990], "import": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 131, 132, 133, 134, 135, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 324, 325, 326, 327, 328, 329, 333, 334, 335, 340, 341, 344, 345, 346, 348, 350, 351, 352, 353, 354, 355, 358, 359, 360, 363, 364, 365, 368, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 542, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 915, 916, 917, 918, 919, 922, 923, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 946, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 960, 961, 964, 965, 966, 967, 968, 969, 970, 974, 975, 978, 979, 982, 983, 984, 985, 986, 987, 988, 990, 992, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1010], "fetch_openml": [4, 5, 13, 67, 71, 111, 117, 122, 143, 154, 155, 156, 182, 190, 198, 200, 210, 219, 223, 256, 258, 259, 276, 285, 288, 292, 295, 340, 350, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "bike_shar": [4, 13], "bike_sharing_demand": [4, 13, 155], "version": [4, 13, 43, 50, 52, 67, 87, 92, 101, 117, 140, 150, 155, 156, 159, 166, 180, 183, 184, 190, 196, 198, 216, 219, 223, 258, 276, 284, 288, 289, 290, 291, 293, 294, 295, 308, 320, 333, 341, 345, 346, 347, 348, 349, 352, 354, 355, 358, 360, 361, 364, 365, 367, 368, 373, 374, 375, 377, 379, 381, 382, 384, 385, 386, 392, 396, 397, 398, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 469, 470, 473, 474, 475, 477, 479, 487, 488, 491, 492, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 546, 547, 548, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 665, 666, 667, 669, 672, 673, 674, 678, 679, 683, 686, 687, 688, 689, 691, 692, 693, 694, 695, 698, 703, 704, 705, 706, 707, 710, 714, 715, 717, 718, 721, 722, 723, 725, 730, 731, 733, 742, 746, 747, 748, 749, 751, 753, 754, 755, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 772, 776, 777, 781, 782, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 852, 854, 855, 856, 858, 859, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 878, 879, 880, 884, 886, 887, 897, 898, 902, 903, 910, 911, 912, 913, 914, 917, 920, 921, 922, 924, 929, 935, 940, 941, 943, 946, 948, 951, 954, 956, 958, 960, 962, 967, 968, 970, 973, 974, 977, 987, 991, 993], "2": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 36, 37, 39, 40, 41, 42, 43, 44, 45, 47, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 127, 129, 132, 133, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 153, 154, 155, 156, 157, 159, 160, 162, 163, 164, 165, 166, 167, 168, 170, 171, 173, 174, 175, 176, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 258, 259, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 294, 295, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 324, 325, 326, 327, 328, 329, 333, 334, 335, 340, 341, 343, 344, 346, 348, 350, 351, 352, 353, 355, 358, 359, 360, 364, 365, 366, 367, 371, 372, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 395, 396, 397, 398, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 433, 434, 436, 437, 438, 439, 440, 443, 444, 445, 447, 448, 449, 450, 458, 461, 465, 466, 469, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 542, 546, 547, 549, 550, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 566, 568, 569, 570, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 666, 668, 669, 670, 671, 672, 673, 676, 678, 679, 680, 681, 682, 683, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 720, 721, 722, 723, 727, 728, 731, 732, 733, 735, 737, 738, 739, 740, 742, 745, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 845, 846, 847, 849, 850, 851, 852, 853, 854, 856, 857, 859, 860, 862, 864, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 879, 881, 882, 883, 884, 886, 887, 888, 892, 895, 901, 902, 903, 904, 905, 906, 907, 908, 909, 915, 916, 917, 918, 919, 920, 922, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 940, 941, 943, 944, 945, 946, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 960, 961, 962, 964, 965, 966, 967, 968, 969, 970, 975, 979, 980, 983, 984, 985, 986, 987, 991, 992, 993, 995, 996, 997, 999, 1000], "as_fram": [4, 5, 13, 67, 71, 107, 111, 117, 122, 143, 154, 155, 156, 157, 170, 171, 182, 190, 198, 200, 219, 223, 256, 259, 262, 276, 284, 285, 288, 290, 292, 293, 340, 341, 454, 455, 456, 457, 461, 465, 466, 467, 469, 470, 475, 1005, 1006, 1007, 1008, 1011], "true": [4, 5, 6, 7, 8, 10, 11, 13, 15, 16, 17, 19, 25, 26, 28, 30, 32, 34, 41, 46, 47, 50, 51, 52, 54, 55, 57, 60, 66, 67, 68, 69, 71, 73, 74, 75, 76, 77, 79, 85, 87, 88, 89, 90, 92, 97, 99, 101, 105, 107, 111, 113, 114, 116, 117, 118, 119, 122, 123, 125, 127, 128, 132, 135, 138, 142, 143, 144, 145, 146, 147, 149, 150, 153, 154, 155, 156, 157, 159, 166, 167, 169, 170, 171, 173, 175, 177, 178, 179, 182, 184, 185, 186, 189, 190, 196, 197, 198, 200, 202, 205, 206, 209, 210, 213, 215, 216, 217, 218, 219, 222, 223, 225, 228, 230, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 258, 259, 261, 262, 264, 265, 268, 272, 274, 275, 276, 277, 280, 284, 285, 286, 288, 290, 292, 293, 294, 295, 298, 300, 301, 302, 311, 315, 316, 317, 320, 321, 322, 324, 325, 328, 329, 333, 334, 339, 341, 342, 344, 346, 347, 348, 351, 352, 353, 355, 359, 360, 363, 365, 368, 370, 371, 372, 374, 375, 376, 378, 379, 381, 382, 383, 384, 386, 387, 388, 389, 391, 393, 394, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 424, 426, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 473, 474, 475, 476, 477, 478, 479, 480, 484, 487, 488, 489, 491, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 546, 547, 548, 550, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 670, 672, 673, 674, 676, 677, 678, 679, 680, 683, 684, 685, 688, 690, 691, 692, 693, 694, 695, 697, 698, 699, 702, 703, 704, 705, 706, 707, 714, 715, 716, 718, 720, 725, 731, 733, 742, 746, 747, 748, 749, 750, 751, 752, 753, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 772, 774, 775, 777, 781, 782, 786, 787, 788, 789, 790, 791, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 884, 885, 886, 887, 897, 903, 904, 915, 916, 919, 920, 924, 925, 926, 927, 935, 940, 942, 943, 944, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 964, 966, 967, 968, 969, 970, 973, 979, 983, 984, 986, 987, 988, 992, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "df": [4, 13, 24, 26, 117, 122, 153, 155, 161, 166, 182, 200, 230, 239, 283, 285, 295, 321, 351, 382, 555, 556, 943, 944, 1012], "frame": [4, 13, 16, 67, 117, 143, 154, 155, 182, 285, 295, 341, 346, 358, 361, 454, 455, 456, 457, 461, 465, 466, 467, 469, 470, 475, 973, 984, 1007], "To": [4, 8, 16, 25, 26, 30, 43, 52, 54, 73, 75, 77, 80, 92, 101, 111, 114, 115, 124, 127, 136, 143, 144, 147, 149, 150, 153, 154, 159, 163, 166, 170, 182, 183, 184, 186, 190, 200, 213, 214, 216, 219, 221, 223, 230, 234, 236, 237, 239, 241, 242, 244, 246, 256, 258, 276, 279, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 318, 321, 324, 329, 333, 334, 339, 340, 344, 346, 347, 348, 350, 351, 352, 354, 358, 360, 361, 364, 368, 370, 371, 374, 375, 376, 377, 378, 379, 381, 382, 411, 413, 414, 415, 426, 429, 432, 457, 461, 467, 468, 472, 473, 474, 496, 502, 503, 504, 506, 508, 509, 510, 511, 522, 523, 524, 525, 529, 530, 534, 562, 576, 592, 597, 611, 612, 617, 618, 621, 623, 624, 625, 626, 627, 628, 649, 665, 677, 692, 727, 749, 757, 766, 767, 788, 795, 826, 837, 842, 856, 857, 866, 867, 871, 874, 875, 876, 877, 893, 903, 922, 941, 943, 944, 946, 949, 950, 951, 952, 954, 955, 956, 957, 960, 961, 964, 968, 969, 970, 978, 979, 983, 985, 986, 988, 995, 998, 1000, 1001, 1002, 1004, 1006], "get": [4, 5, 9, 12, 16, 17, 19, 34, 45, 49, 53, 88, 92, 114, 124, 133, 136, 138, 143, 144, 149, 154, 155, 156, 157, 175, 184, 197, 200, 202, 217, 237, 240, 241, 243, 247, 250, 256, 259, 264, 272, 280, 288, 295, 298, 301, 305, 308, 310, 313, 318, 320, 322, 324, 334, 339, 340, 341, 344, 346, 347, 348, 351, 352, 353, 354, 360, 364, 368, 370, 372, 373, 374, 375, 376, 378, 379, 381, 382, 383, 384, 388, 389, 390, 395, 397, 402, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 427, 429, 430, 434, 435, 436, 437, 438, 439, 440, 441, 447, 448, 449, 450, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 546, 547, 548, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 572, 573, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 599, 600, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 653, 654, 655, 656, 657, 660, 664, 686, 687, 688, 690, 696, 697, 706, 720, 727, 728, 733, 749, 752, 761, 762, 763, 764, 765, 766, 767, 768, 770, 771, 772, 773, 776, 777, 778, 779, 780, 781, 782, 783, 784, 787, 788, 789, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 822, 823, 824, 825, 826, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 858, 859, 861, 862, 863, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 881, 894, 895, 896, 902, 903, 913, 943, 949, 950, 951, 953, 954, 964, 967, 968, 969, 970, 974, 983, 986, 987, 988, 992, 995, 998, 1001, 1003, 1006, 1008, 1009, 1012], "quick": [4, 92, 222, 346, 348, 352, 364, 571, 792, 954, 955, 964, 978, 986, 992], "understand": [4, 9, 13, 38, 101, 143, 151, 155, 216, 234, 237, 290, 291, 305, 312, 320, 323, 324, 329, 344, 345, 346, 347, 352, 358, 363, 374, 381, 382, 469, 792, 823, 824, 874, 875, 876, 877, 880, 943, 944, 951, 953, 970, 972, 973, 975, 978, 995, 1009], "pattern": [4, 13, 16, 20, 60, 77, 83, 86, 94, 138, 149, 151, 155, 166, 186, 216, 219, 291, 320, 321, 322, 329, 343, 346, 348, 361, 371, 374, 375, 379, 381, 382, 413, 429, 431, 469, 497, 499, 506, 520, 521, 603, 673, 689, 705, 733, 752, 753, 761, 846, 946, 948, 950, 954, 955, 961, 969, 971, 974, 975, 978, 1007], "let": [4, 5, 13, 50, 52, 61, 67, 71, 83, 87, 92, 108, 111, 114, 115, 117, 119, 138, 144, 145, 150, 154, 155, 156, 163, 171, 182, 184, 200, 202, 206, 216, 223, 234, 239, 242, 246, 320, 322, 328, 329, 341, 346, 348, 352, 358, 371, 374, 378, 381, 382, 406, 410, 456, 465, 469, 475, 499, 611, 612, 615, 616, 617, 618, 619, 620, 621, 625, 626, 627, 628, 646, 649, 832, 839, 840, 950, 951, 952, 953, 954, 961, 962, 964, 969, 970, 978, 986, 987, 988, 1005], "u": [4, 10, 11, 12, 13, 16, 17, 32, 47, 49, 53, 83, 87, 94, 111, 112, 117, 138, 147, 153, 154, 155, 179, 183, 186, 190, 200, 203, 206, 213, 216, 222, 223, 226, 227, 231, 234, 239, 242, 246, 283, 285, 312, 320, 328, 334, 341, 346, 350, 352, 354, 358, 364, 365, 371, 374, 377, 379, 381, 382, 397, 428, 430, 447, 448, 449, 496, 502, 510, 511, 515, 517, 519, 521, 523, 525, 527, 530, 533, 535, 553, 554, 556, 576, 600, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 625, 626, 627, 628, 629, 630, 632, 635, 637, 638, 643, 644, 646, 649, 654, 658, 669, 685, 704, 719, 799, 800, 809, 817, 824, 846, 860, 867, 869, 872, 875, 877, 903, 946, 948, 953, 954, 961, 964, 978, 988, 992, 1005], "look": [4, 5, 26, 50, 52, 87, 90, 92, 114, 115, 138, 143, 144, 150, 154, 155, 184, 202, 206, 209, 216, 231, 234, 239, 241, 276, 295, 320, 321, 329, 334, 335, 340, 341, 344, 346, 348, 350, 352, 354, 358, 359, 374, 377, 379, 380, 381, 382, 413, 453, 454, 522, 523, 524, 525, 529, 530, 567, 568, 596, 624, 657, 846, 874, 875, 876, 877, 950, 951, 964, 968, 969, 971, 987, 988, 995, 1003, 1005], "averag": [4, 13, 24, 26, 34, 36, 37, 41, 49, 57, 59, 104, 105, 110, 114, 117, 118, 123, 124, 125, 136, 143, 155, 163, 171, 182, 189, 200, 219, 242, 244, 247, 249, 258, 279, 288, 294, 301, 320, 329, 333, 341, 343, 348, 358, 371, 372, 376, 378, 382, 383, 385, 386, 402, 403, 406, 409, 410, 411, 412, 414, 455, 458, 459, 488, 496, 497, 498, 502, 503, 505, 506, 510, 511, 512, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 534, 535, 552, 559, 597, 598, 613, 623, 624, 631, 632, 634, 637, 639, 641, 642, 643, 645, 652, 665, 668, 669, 671, 672, 673, 678, 685, 686, 687, 689, 690, 692, 693, 694, 698, 699, 700, 702, 703, 704, 707, 709, 710, 712, 714, 715, 717, 720, 728, 745, 746, 747, 748, 749, 751, 752, 754, 755, 759, 760, 761, 762, 790, 793, 812, 832, 847, 940, 944, 949, 950, 955, 958, 960, 961, 968, 969, 970, 986, 988, 995, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1009, 1010, 1011, 1012, 1013], "per": [4, 10, 20, 32, 45, 50, 61, 84, 106, 107, 111, 143, 145, 154, 155, 182, 197, 200, 219, 223, 226, 235, 246, 248, 279, 285, 290, 295, 316, 320, 322, 333, 341, 342, 346, 351, 352, 355, 358, 360, 372, 374, 378, 379, 380, 381, 382, 384, 411, 413, 415, 422, 426, 429, 433, 452, 461, 465, 467, 468, 469, 473, 475, 477, 480, 488, 497, 499, 500, 501, 504, 506, 508, 514, 515, 526, 527, 534, 548, 553, 556, 575, 576, 597, 598, 606, 607, 623, 624, 631, 632, 633, 636, 638, 639, 640, 641, 643, 657, 661, 678, 681, 685, 705, 718, 722, 723, 745, 747, 761, 762, 787, 794, 795, 796, 798, 799, 802, 804, 822, 825, 831, 833, 835, 836, 839, 840, 846, 847, 864, 866, 867, 868, 869, 870, 871, 872, 891, 892, 903, 929, 943, 946, 950, 953, 954, 955, 958, 961, 968, 969, 970, 973, 974, 986, 988, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1007, 1008, 1009, 1011, 1012], "hour": [4, 117, 154, 155, 295, 346, 352, 461, 951, 972], "sundai": 4, "weekend": [4, 117], "clearli": [4, 57, 90, 155, 214, 312, 345, 346, 358, 360, 379, 381, 955, 961], "distinguish": [4, 20, 37, 75, 85, 92, 184, 236, 256, 341, 348, 360, 361, 384, 943, 954, 957, 960], "commut": [4, 13], "morn": 4, "even": [4, 13, 14, 26, 37, 39, 49, 71, 80, 90, 107, 114, 144, 154, 155, 156, 171, 182, 183, 190, 200, 206, 207, 215, 226, 245, 256, 279, 281, 283, 284, 302, 316, 320, 321, 322, 329, 335, 341, 344, 345, 346, 347, 348, 350, 351, 354, 358, 360, 372, 373, 374, 375, 376, 378, 379, 381, 382, 384, 406, 408, 410, 411, 412, 413, 414, 424, 426, 497, 500, 522, 523, 524, 525, 529, 530, 547, 554, 559, 592, 593, 595, 604, 623, 624, 660, 665, 670, 677, 707, 725, 731, 738, 742, 745, 750, 752, 789, 826, 827, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 874, 875, 876, 877, 903, 923, 943, 944, 946, 948, 950, 953, 954, 957, 959, 960, 962, 964, 966, 968, 969, 970, 978, 988, 1002, 1003, 1004, 1007, 1009, 1012], "leisur": 4, "spread": [4, 37, 204, 240, 279, 297, 298, 299, 302, 316, 333, 346, 374, 417, 427, 480, 843, 855, 863, 954], "peak": [4, 13, 26, 155, 372, 378, 1009], "middl": [4, 23, 32, 57, 92, 166, 317, 343, 961, 964], "matplotlib": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 68, 69, 71, 73, 74, 75, 76, 77, 79, 80, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 129, 131, 132, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 153, 154, 155, 157, 159, 161, 162, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 209, 210, 212, 213, 214, 215, 217, 218, 219, 220, 222, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 238, 239, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 254, 256, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 292, 293, 295, 297, 298, 299, 300, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 324, 325, 326, 327, 328, 340, 349, 353, 364, 367, 403, 467, 596, 597, 662, 663, 665, 666, 667, 769, 785, 880, 949, 973, 982, 983, 984, 985, 986, 987, 992, 1004, 1007, 1008, 1009, 1010], "pyplot": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 68, 69, 71, 73, 74, 75, 76, 77, 79, 80, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 129, 131, 132, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 153, 154, 155, 157, 159, 161, 162, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 209, 210, 212, 213, 214, 215, 217, 218, 219, 220, 222, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 238, 239, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 254, 256, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 292, 293, 295, 297, 298, 299, 300, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 324, 325, 326, 327, 328, 346, 353, 403, 467, 596, 597, 662, 663, 665, 666, 667, 769, 785, 983, 984, 985, 986, 987, 992, 1009], "plt": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 68, 69, 71, 73, 74, 75, 76, 77, 79, 80, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 129, 131, 132, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 153, 154, 155, 157, 159, 161, 162, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 209, 210, 212, 213, 214, 215, 217, 218, 219, 220, 222, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 238, 239, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 254, 256, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 292, 293, 295, 297, 298, 299, 300, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 324, 325, 326, 327, 328, 353, 403, 467, 596, 597, 662, 663, 665, 666, 667, 769, 785, 880, 961, 983, 984, 985, 986, 987, 992], "fig": [4, 5, 7, 8, 9, 10, 13, 15, 24, 26, 28, 32, 39, 40, 42, 50, 52, 54, 57, 61, 63, 69, 73, 75, 80, 83, 87, 92, 93, 97, 101, 107, 108, 111, 112, 114, 115, 117, 119, 120, 122, 124, 141, 147, 149, 155, 157, 159, 162, 170, 173, 176, 177, 179, 180, 182, 183, 186, 190, 195, 197, 200, 202, 203, 204, 205, 206, 207, 210, 212, 219, 220, 230, 234, 235, 236, 239, 240, 241, 242, 245, 248, 249, 250, 258, 259, 261, 263, 264, 272, 275, 276, 279, 280, 281, 283, 284, 285, 288, 292, 293, 305, 312, 315, 316, 317, 318, 320, 321, 322, 324, 353, 984, 987], "ax": [4, 5, 7, 8, 9, 10, 12, 13, 15, 16, 24, 26, 28, 29, 30, 32, 37, 39, 40, 42, 50, 52, 53, 54, 61, 63, 68, 71, 75, 77, 80, 83, 85, 87, 93, 97, 101, 103, 106, 108, 111, 112, 117, 119, 120, 122, 123, 124, 141, 142, 147, 149, 153, 154, 155, 156, 157, 159, 161, 162, 165, 166, 171, 173, 174, 177, 179, 180, 182, 183, 184, 186, 187, 190, 191, 193, 195, 196, 197, 200, 202, 203, 204, 205, 206, 207, 210, 215, 219, 220, 222, 225, 227, 230, 234, 235, 236, 239, 241, 242, 243, 245, 246, 248, 249, 250, 251, 253, 256, 258, 259, 261, 262, 263, 264, 267, 269, 270, 274, 275, 276, 279, 281, 282, 283, 284, 285, 286, 288, 289, 292, 293, 295, 304, 305, 306, 307, 309, 310, 312, 315, 316, 317, 318, 320, 321, 322, 324, 325, 348, 349, 379, 384, 403, 499, 506, 515, 596, 597, 662, 663, 665, 666, 667, 683, 769, 785, 880, 954, 957, 961, 987, 992, 1005, 1011], "subplot": [4, 5, 6, 8, 9, 10, 11, 13, 14, 15, 28, 29, 30, 32, 36, 40, 41, 47, 48, 50, 51, 52, 53, 54, 57, 59, 62, 63, 69, 71, 74, 75, 76, 77, 79, 80, 83, 84, 85, 87, 88, 89, 90, 92, 96, 97, 101, 103, 104, 106, 107, 108, 110, 111, 112, 115, 117, 119, 120, 122, 123, 124, 131, 140, 142, 147, 149, 150, 154, 155, 157, 159, 162, 165, 173, 174, 176, 177, 180, 181, 182, 183, 184, 186, 190, 195, 196, 198, 200, 202, 203, 206, 207, 209, 210, 212, 214, 215, 217, 218, 219, 220, 225, 226, 227, 228, 230, 231, 234, 235, 236, 239, 241, 242, 244, 245, 246, 248, 249, 250, 252, 253, 258, 259, 261, 262, 263, 264, 267, 268, 270, 271, 272, 274, 275, 276, 277, 280, 281, 282, 283, 284, 285, 288, 292, 293, 300, 302, 305, 306, 307, 308, 312, 315, 316, 317, 318, 320, 321, 322, 324, 325, 353, 984], "figsiz": [4, 5, 6, 10, 12, 13, 14, 15, 24, 25, 26, 28, 29, 30, 32, 36, 37, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 59, 61, 62, 63, 69, 71, 75, 77, 79, 80, 82, 83, 84, 85, 87, 90, 91, 92, 93, 96, 97, 101, 103, 104, 111, 112, 113, 114, 115, 117, 120, 122, 123, 131, 140, 142, 146, 147, 149, 150, 154, 155, 157, 159, 161, 162, 165, 166, 172, 176, 179, 180, 181, 182, 183, 184, 186, 188, 190, 193, 196, 198, 200, 202, 203, 204, 206, 207, 209, 210, 212, 214, 217, 218, 219, 220, 225, 227, 228, 231, 234, 235, 236, 241, 242, 243, 246, 248, 249, 253, 258, 259, 261, 262, 274, 275, 277, 279, 280, 281, 282, 283, 284, 285, 292, 293, 297, 299, 306, 308, 312, 313, 315, 316, 317, 318, 320, 321, 322, 880, 984], "4": [4, 5, 6, 7, 8, 9, 10, 12, 13, 17, 19, 20, 24, 25, 26, 29, 30, 31, 32, 35, 36, 37, 39, 40, 41, 42, 43, 46, 47, 48, 49, 50, 52, 53, 55, 56, 57, 59, 61, 62, 63, 66, 67, 68, 69, 70, 76, 77, 79, 80, 83, 84, 85, 88, 89, 90, 91, 92, 93, 95, 96, 101, 102, 104, 107, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 127, 132, 136, 138, 140, 141, 143, 144, 146, 147, 149, 150, 151, 154, 155, 156, 157, 159, 161, 162, 163, 164, 165, 166, 170, 171, 172, 173, 174, 175, 179, 180, 181, 182, 183, 186, 188, 189, 190, 192, 195, 196, 200, 202, 209, 213, 214, 215, 216, 217, 218, 219, 221, 223, 225, 226, 227, 228, 230, 231, 234, 235, 236, 237, 239, 240, 241, 242, 244, 246, 247, 248, 250, 251, 253, 258, 259, 261, 263, 264, 265, 266, 269, 274, 276, 277, 279, 280, 282, 283, 285, 287, 288, 289, 290, 291, 293, 294, 297, 298, 299, 300, 301, 305, 307, 308, 311, 312, 313, 316, 317, 318, 320, 321, 322, 328, 329, 334, 340, 341, 343, 344, 346, 351, 352, 355, 358, 359, 360, 364, 365, 366, 367, 372, 374, 375, 376, 378, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 395, 396, 397, 398, 402, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 456, 461, 469, 477, 478, 481, 482, 483, 489, 491, 492, 493, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 511, 512, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 542, 546, 547, 548, 550, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 579, 582, 583, 584, 587, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 614, 616, 617, 618, 620, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 639, 641, 642, 644, 645, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 663, 664, 667, 671, 672, 680, 681, 689, 690, 691, 696, 698, 706, 707, 708, 710, 711, 712, 713, 714, 715, 716, 720, 732, 733, 745, 746, 752, 753, 754, 755, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 770, 771, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 787, 788, 789, 790, 792, 794, 795, 796, 797, 800, 801, 802, 803, 805, 810, 814, 815, 818, 822, 823, 824, 825, 826, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 853, 854, 858, 859, 860, 864, 866, 867, 870, 874, 875, 876, 877, 882, 883, 885, 886, 887, 888, 892, 902, 903, 904, 905, 907, 908, 909, 910, 911, 918, 922, 925, 926, 927, 929, 930, 931, 932, 935, 936, 937, 943, 944, 947, 948, 949, 950, 952, 954, 955, 956, 957, 964, 965, 968, 969, 975, 979, 983, 984, 985, 986, 988, 991, 993, 996, 997, 998, 1000, 1001, 1002, 1004, 1008, 1009, 1010, 1013], "average_week_demand": [4, 117], "groupbi": [4, 117, 155, 190, 200], "weekdai": [4, 13, 155], "count": [4, 13, 15, 24, 26, 38, 46, 50, 66, 67, 85, 123, 124, 154, 155, 182, 184, 200, 213, 223, 248, 256, 259, 289, 290, 321, 322, 328, 341, 343, 350, 355, 360, 361, 372, 373, 374, 379, 381, 382, 411, 414, 454, 461, 501, 509, 546, 553, 554, 555, 556, 559, 569, 582, 605, 662, 670, 680, 683, 693, 694, 702, 718, 747, 748, 750, 751, 801, 805, 806, 807, 815, 818, 829, 878, 880, 905, 919, 943, 946, 950, 954, 956, 957, 964, 970, 978, 988, 995, 998, 1000, 1003, 1004, 1006, 1007], "mean": [4, 5, 6, 8, 11, 13, 14, 15, 17, 19, 23, 24, 26, 32, 33, 34, 35, 37, 39, 41, 43, 46, 47, 50, 51, 52, 57, 67, 74, 75, 76, 77, 80, 83, 85, 87, 90, 91, 92, 93, 94, 101, 103, 104, 107, 110, 111, 114, 115, 117, 122, 123, 124, 135, 136, 138, 143, 145, 147, 149, 151, 154, 155, 162, 164, 171, 173, 175, 178, 179, 182, 184, 188, 189, 191, 197, 198, 199, 200, 205, 207, 209, 212, 213, 214, 215, 216, 217, 219, 220, 221, 223, 225, 226, 227, 228, 230, 231, 235, 236, 239, 240, 241, 242, 244, 246, 247, 248, 249, 250, 251, 253, 254, 256, 258, 259, 270, 279, 282, 284, 285, 286, 288, 291, 294, 300, 308, 311, 312, 316, 318, 319, 320, 322, 329, 333, 338, 340, 341, 343, 344, 346, 347, 348, 350, 351, 352, 354, 355, 358, 359, 360, 365, 371, 372, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 391, 397, 402, 403, 404, 405, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 422, 423, 424, 425, 426, 427, 429, 430, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 453, 466, 467, 469, 471, 477, 484, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 548, 553, 554, 555, 556, 559, 562, 567, 571, 572, 573, 574, 575, 576, 578, 587, 592, 593, 595, 597, 598, 599, 600, 604, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 649, 653, 654, 655, 656, 657, 658, 659, 660, 669, 670, 672, 674, 677, 678, 681, 682, 688, 690, 693, 694, 695, 700, 701, 702, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 717, 721, 738, 742, 743, 745, 747, 748, 749, 751, 752, 754, 755, 756, 757, 759, 761, 762, 763, 766, 767, 769, 777, 781, 785, 787, 788, 789, 790, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 810, 812, 813, 814, 816, 817, 819, 820, 822, 823, 824, 825, 827, 828, 830, 831, 835, 836, 838, 842, 844, 846, 847, 852, 854, 855, 857, 859, 861, 862, 866, 867, 868, 869, 871, 872, 874, 875, 876, 877, 882, 886, 887, 889, 928, 929, 935, 939, 943, 944, 945, 948, 950, 951, 953, 956, 957, 958, 959, 961, 962, 967, 968, 969, 970, 973, 975, 978, 983, 986, 988, 989, 990, 995, 996, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "plot": [4, 5, 6, 11, 12, 13, 15, 16, 24, 25, 26, 27, 29, 30, 31, 33, 34, 37, 39, 40, 42, 51, 52, 53, 55, 56, 57, 58, 59, 62, 68, 69, 70, 71, 74, 75, 76, 80, 81, 87, 90, 91, 94, 95, 96, 97, 100, 101, 103, 104, 105, 106, 108, 112, 113, 114, 116, 117, 119, 120, 121, 129, 131, 132, 134, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 151, 152, 153, 154, 156, 157, 159, 160, 164, 165, 167, 169, 170, 171, 172, 177, 178, 179, 180, 181, 182, 183, 184, 185, 188, 189, 190, 192, 194, 195, 197, 198, 199, 200, 204, 205, 206, 207, 208, 209, 212, 213, 215, 217, 218, 223, 225, 226, 227, 229, 231, 232, 233, 234, 239, 240, 242, 244, 245, 249, 250, 251, 253, 256, 259, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 274, 275, 276, 279, 280, 281, 282, 283, 284, 286, 289, 292, 293, 294, 295, 298, 299, 300, 302, 303, 304, 308, 309, 310, 313, 314, 315, 316, 317, 318, 321, 322, 323, 324, 326, 327, 328, 346, 349, 355, 358, 363, 364, 369, 372, 374, 376, 378, 380, 381, 403, 406, 411, 415, 421, 429, 436, 461, 466, 467, 469, 477, 480, 484, 488, 518, 522, 525, 527, 529, 530, 534, 535, 575, 587, 596, 597, 598, 622, 623, 637, 641, 662, 663, 665, 666, 667, 668, 683, 691, 699, 725, 746, 748, 751, 752, 753, 763, 769, 780, 785, 787, 788, 789, 790, 793, 804, 808, 824, 827, 839, 840, 841, 843, 846, 866, 868, 871, 874, 875, 880, 947, 948, 950, 951, 953, 954, 957, 958, 960, 968, 969, 970, 973, 974, 975, 983, 984, 986, 990, 996, 998, 999, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "_": [4, 5, 7, 8, 9, 11, 12, 13, 15, 20, 24, 25, 26, 28, 30, 31, 37, 40, 47, 50, 52, 55, 60, 64, 66, 77, 83, 85, 87, 92, 94, 96, 104, 105, 106, 117, 131, 138, 143, 144, 145, 153, 154, 155, 157, 159, 161, 165, 166, 167, 169, 170, 171, 174, 179, 180, 182, 184, 186, 195, 196, 199, 203, 206, 210, 215, 219, 223, 234, 239, 241, 242, 243, 245, 246, 248, 256, 262, 267, 270, 277, 281, 284, 285, 286, 289, 292, 293, 294, 298, 299, 307, 312, 316, 320, 322, 325, 348, 352, 360, 379, 381, 382, 386, 411, 443, 497, 498, 499, 500, 501, 503, 504, 505, 508, 510, 511, 512, 531, 562, 611, 612, 617, 618, 625, 626, 627, 628, 646, 647, 648, 649, 653, 654, 655, 656, 658, 660, 661, 663, 665, 675, 728, 763, 769, 777, 785, 810, 818, 839, 840, 847, 944, 950, 951, 954, 956, 957, 958, 961, 962, 964, 969, 970, 986, 987, 1002], "hourli": [4, 117, 154], "xtick": [4, 6, 8, 11, 28, 32, 37, 41, 43, 47, 48, 49, 55, 56, 59, 77, 79, 90, 111, 113, 117, 140, 141, 142, 146, 165, 172, 178, 195, 209, 217, 226, 227, 228, 231, 238, 239, 253, 263, 272, 277, 285, 297, 308, 311, 313, 314, 662, 984], "24": [4, 5, 13, 63, 117, 136, 151, 155, 159, 166, 207, 219, 251, 259, 287, 288, 289, 291, 294, 295, 297, 298, 350, 364, 374, 381, 382, 402, 405, 406, 407, 409, 410, 412, 413, 414, 415, 416, 417, 418, 425, 427, 429, 434, 435, 436, 437, 438, 439, 440, 441, 454, 455, 456, 457, 461, 469, 480, 481, 482, 483, 496, 497, 498, 499, 500, 501, 502, 504, 505, 506, 508, 509, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 534, 535, 546, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 575, 576, 578, 592, 593, 594, 595, 597, 598, 599, 600, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 653, 654, 655, 656, 657, 663, 664, 665, 667, 673, 679, 691, 710, 717, 761, 762, 763, 766, 767, 777, 784, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 822, 823, 824, 827, 829, 830, 831, 832, 835, 836, 838, 840, 841, 842, 843, 844, 846, 856, 858, 859, 861, 862, 863, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 897, 898, 902, 929, 935, 943, 961, 964, 975, 991, 993, 995, 1003, 1004, 1005, 1006, 1008], "rang": [4, 5, 6, 7, 8, 10, 12, 16, 17, 19, 20, 24, 25, 26, 30, 31, 34, 35, 37, 39, 43, 44, 45, 47, 48, 52, 57, 58, 60, 61, 62, 73, 74, 76, 77, 101, 103, 104, 105, 108, 114, 117, 121, 131, 135, 139, 154, 155, 159, 166, 171, 172, 176, 180, 182, 183, 186, 189, 190, 198, 200, 203, 205, 212, 213, 218, 219, 225, 227, 230, 231, 234, 238, 239, 240, 242, 243, 244, 246, 247, 248, 250, 251, 252, 253, 258, 263, 269, 272, 277, 279, 284, 285, 288, 292, 293, 298, 308, 316, 320, 321, 325, 328, 334, 340, 341, 343, 346, 348, 352, 355, 360, 368, 374, 378, 381, 384, 405, 426, 434, 436, 437, 438, 439, 440, 441, 443, 446, 456, 459, 460, 479, 492, 506, 518, 519, 524, 525, 528, 553, 554, 556, 594, 597, 603, 605, 613, 614, 634, 636, 641, 642, 643, 645, 657, 677, 695, 710, 752, 792, 798, 812, 814, 816, 817, 822, 836, 843, 844, 845, 851, 852, 855, 856, 859, 860, 902, 903, 922, 943, 950, 954, 958, 968, 974, 978, 982, 983, 984, 986, 1000, 1001, 1002, 1003, 1005, 1008, 1011], "7": [4, 5, 6, 8, 12, 13, 14, 15, 16, 19, 25, 28, 30, 31, 32, 36, 39, 41, 43, 50, 51, 52, 53, 57, 61, 62, 64, 67, 68, 70, 75, 77, 90, 101, 104, 114, 116, 117, 118, 122, 123, 136, 147, 153, 154, 155, 157, 159, 163, 164, 181, 182, 183, 184, 197, 200, 202, 209, 213, 214, 215, 221, 223, 225, 226, 229, 230, 234, 239, 243, 245, 246, 250, 252, 256, 258, 259, 261, 264, 265, 267, 276, 277, 279, 283, 288, 291, 292, 293, 295, 297, 298, 300, 301, 305, 312, 316, 317, 321, 322, 329, 341, 343, 344, 350, 351, 352, 364, 366, 367, 372, 378, 379, 381, 382, 383, 385, 386, 389, 404, 409, 413, 415, 416, 417, 418, 420, 421, 422, 423, 426, 427, 428, 436, 437, 456, 461, 463, 497, 498, 499, 500, 501, 503, 509, 526, 527, 553, 556, 565, 570, 571, 592, 593, 595, 602, 611, 612, 614, 617, 623, 625, 626, 627, 646, 647, 648, 657, 664, 672, 674, 686, 687, 688, 690, 692, 708, 709, 710, 714, 715, 717, 746, 749, 754, 755, 758, 761, 764, 765, 770, 773, 780, 781, 784, 789, 792, 796, 806, 807, 815, 824, 825, 838, 839, 861, 862, 902, 903, 906, 907, 909, 918, 923, 943, 944, 949, 950, 952, 954, 955, 957, 958, 960, 964, 968, 969, 979, 983, 986, 991, 993, 996, 997, 998, 1001, 1002, 1003, 1004, 1008, 1013], "xticklabel": [4, 10, 111, 117, 155, 285], "sun": [4, 117, 155, 1003, 1008, 1009], "mon": [4, 117, 155], "tue": [4, 117, 155, 1001], "wed": [4, 117, 155], "thu": [4, 5, 23, 24, 25, 26, 37, 50, 52, 57, 73, 77, 90, 92, 104, 106, 107, 109, 111, 117, 132, 138, 143, 144, 155, 166, 170, 171, 182, 184, 200, 209, 215, 220, 227, 237, 239, 244, 245, 246, 262, 286, 288, 291, 324, 329, 333, 334, 341, 348, 352, 358, 360, 365, 372, 374, 378, 379, 381, 382, 384, 385, 402, 404, 428, 480, 492, 518, 519, 520, 521, 522, 523, 528, 529, 530, 531, 568, 571, 575, 587, 592, 597, 598, 608, 610, 623, 642, 670, 683, 689, 752, 759, 765, 770, 772, 784, 797, 800, 835, 866, 945, 946, 947, 948, 949, 950, 951, 954, 955, 960, 961, 964, 966, 967, 968, 969, 974, 978, 995, 997, 1001, 1003, 1004, 1005, 1007, 1011], "fri": [4, 117, 155, 341], "sat": [4, 117, 155, 382], "xlabel": [4, 8, 9, 13, 23, 24, 25, 26, 31, 34, 38, 58, 73, 74, 76, 77, 79, 80, 83, 89, 94, 102, 103, 105, 111, 113, 114, 115, 116, 117, 121, 125, 127, 131, 132, 135, 138, 139, 140, 141, 143, 144, 145, 154, 161, 164, 165, 166, 167, 169, 170, 171, 172, 175, 176, 182, 184, 185, 187, 189, 191, 192, 196, 200, 213, 215, 217, 219, 234, 238, 239, 243, 244, 248, 249, 252, 253, 261, 262, 265, 266, 285, 286, 305, 307, 308, 311, 320, 325, 326, 327, 596, 983, 987], "ylabel": [4, 8, 9, 13, 23, 24, 25, 26, 31, 34, 58, 73, 74, 76, 77, 79, 80, 83, 89, 94, 102, 103, 105, 113, 114, 115, 116, 117, 121, 125, 127, 131, 132, 135, 138, 139, 140, 141, 143, 144, 145, 154, 161, 164, 165, 166, 167, 169, 170, 171, 172, 175, 176, 182, 184, 185, 187, 189, 191, 192, 200, 213, 215, 217, 234, 238, 239, 242, 243, 244, 248, 249, 252, 253, 262, 286, 305, 308, 311, 320, 325, 326, 327, 596, 983, 987], "number": [4, 5, 7, 8, 10, 12, 13, 14, 19, 20, 24, 25, 26, 30, 31, 33, 35, 36, 38, 40, 41, 43, 44, 45, 46, 47, 50, 51, 52, 54, 58, 59, 60, 64, 66, 67, 68, 69, 71, 77, 79, 80, 84, 85, 87, 89, 91, 92, 94, 101, 102, 104, 107, 109, 110, 112, 113, 114, 115, 118, 122, 124, 132, 133, 136, 146, 147, 150, 151, 154, 155, 159, 166, 171, 181, 182, 183, 184, 189, 190, 196, 197, 198, 199, 200, 202, 209, 213, 217, 219, 220, 225, 226, 228, 230, 231, 233, 234, 237, 238, 239, 240, 241, 244, 245, 246, 247, 248, 256, 259, 261, 265, 266, 279, 281, 282, 285, 288, 289, 290, 291, 292, 293, 294, 301, 308, 313, 316, 321, 322, 324, 328, 329, 334, 335, 338, 340, 341, 342, 343, 344, 346, 349, 350, 352, 353, 354, 355, 358, 359, 360, 371, 372, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 389, 390, 397, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 538, 546, 547, 548, 549, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 666, 668, 669, 670, 672, 677, 678, 679, 681, 683, 685, 688, 692, 693, 694, 695, 698, 699, 702, 704, 716, 719, 738, 742, 745, 746, 747, 748, 749, 750, 751, 752, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 855, 858, 859, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 886, 887, 890, 902, 903, 906, 907, 922, 923, 925, 928, 929, 946, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 964, 966, 968, 969, 970, 971, 973, 974, 975, 979, 986, 987, 988, 990, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "rental": [4, 13, 155, 961], "target": [4, 6, 13, 17, 19, 25, 28, 30, 31, 42, 49, 65, 67, 69, 70, 80, 83, 91, 93, 95, 102, 109, 110, 111, 112, 114, 115, 117, 119, 121, 122, 123, 125, 129, 131, 134, 136, 138, 140, 143, 144, 150, 151, 153, 154, 155, 156, 161, 164, 165, 166, 175, 178, 182, 184, 186, 187, 190, 191, 203, 210, 212, 213, 214, 215, 218, 219, 220, 227, 233, 235, 237, 240, 242, 244, 245, 248, 249, 256, 258, 259, 262, 267, 270, 271, 275, 278, 279, 289, 290, 292, 294, 297, 298, 301, 302, 304, 305, 308, 312, 314, 315, 320, 321, 325, 326, 327, 328, 329, 333, 335, 338, 339, 340, 341, 342, 343, 348, 350, 351, 354, 355, 359, 363, 374, 377, 378, 381, 384, 398, 402, 403, 404, 407, 410, 429, 430, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 465, 466, 467, 468, 469, 470, 473, 475, 485, 489, 496, 497, 499, 501, 502, 504, 507, 508, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 530, 532, 533, 534, 535, 538, 547, 548, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 592, 593, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 649, 650, 651, 652, 662, 663, 665, 666, 667, 672, 673, 674, 677, 678, 683, 685, 686, 687, 688, 690, 691, 692, 693, 694, 699, 702, 703, 704, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 720, 746, 747, 748, 749, 751, 752, 753, 754, 755, 758, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 777, 778, 779, 780, 781, 782, 783, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 813, 815, 816, 817, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 838, 839, 840, 841, 843, 844, 845, 846, 847, 850, 855, 858, 859, 861, 862, 863, 864, 866, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 886, 916, 917, 918, 945, 946, 947, 950, 951, 954, 958, 961, 962, 968, 969, 970, 974, 975, 977, 978, 979, 984, 986, 988, 990, 995, 996, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "absolut": [4, 13, 71, 91, 111, 136, 154, 182, 184, 188, 200, 348, 374, 376, 378, 379, 381, 382, 383, 384, 385, 409, 415, 421, 422, 496, 502, 507, 510, 511, 513, 514, 515, 523, 525, 526, 527, 530, 553, 555, 556, 558, 562, 567, 584, 592, 597, 611, 614, 615, 617, 619, 621, 636, 637, 639, 641, 643, 647, 648, 669, 682, 686, 700, 701, 709, 710, 712, 717, 719, 721, 759, 765, 769, 780, 783, 790, 792, 804, 806, 807, 811, 830, 835, 838, 851, 875, 877, 940, 950, 951, 964, 968, 970, 986, 987, 996, 1001, 1006, 1007, 1008, 1009, 1012], "basi": [4, 6, 14, 92, 138, 143, 145, 183, 276, 291, 308, 312, 338, 344, 347, 374, 379, 381, 417, 499, 587, 597, 604, 656, 845, 952, 964, 969, 976, 983, 984, 987, 990, 1003, 1005, 1008], "max": [4, 8, 10, 11, 12, 13, 17, 19, 24, 26, 29, 31, 37, 41, 49, 55, 59, 64, 68, 69, 72, 74, 77, 87, 90, 94, 97, 101, 103, 110, 116, 120, 127, 128, 129, 131, 132, 136, 140, 142, 143, 150, 151, 154, 164, 169, 170, 171, 175, 177, 184, 185, 188, 196, 198, 200, 205, 213, 217, 237, 238, 239, 250, 252, 258, 259, 261, 265, 266, 270, 272, 274, 276, 279, 281, 282, 284, 291, 300, 302, 314, 317, 333, 374, 376, 379, 434, 435, 436, 437, 438, 439, 440, 441, 442, 477, 501, 520, 521, 522, 523, 524, 525, 528, 529, 530, 571, 592, 596, 597, 613, 614, 634, 637, 639, 645, 656, 657, 661, 664, 669, 670, 705, 721, 756, 757, 763, 823, 824, 835, 836, 838, 845, 852, 853, 874, 875, 876, 877, 922, 950, 952, 957, 964, 968, 969, 975, 986, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "977": [4, 13, 378], "rescal": [4, 43, 44, 52, 92, 163, 170, 205, 219, 279, 318, 376, 386, 434, 435, 436, 437, 438, 439, 440, 441, 498, 503, 611, 614, 617, 838, 844, 868, 869, 870, 871, 872, 954, 964, 987, 999, 1000], "variabl": [4, 9, 11, 12, 13, 16, 34, 66, 104, 108, 111, 114, 115, 117, 128, 129, 131, 136, 145, 146, 149, 150, 155, 156, 159, 166, 171, 182, 186, 187, 200, 204, 219, 231, 239, 242, 249, 256, 258, 284, 285, 286, 329, 333, 335, 341, 343, 344, 346, 348, 350, 351, 354, 360, 365, 370, 374, 375, 376, 377, 379, 381, 382, 383, 415, 447, 448, 449, 452, 464, 466, 473, 480, 497, 499, 501, 506, 509, 518, 524, 525, 569, 571, 572, 573, 605, 615, 616, 619, 620, 626, 647, 648, 660, 674, 711, 764, 765, 768, 770, 771, 772, 773, 778, 779, 780, 781, 782, 783, 786, 787, 788, 789, 791, 794, 798, 799, 829, 840, 843, 847, 855, 867, 943, 944, 946, 950, 953, 954, 955, 956, 957, 959, 961, 962, 964, 968, 970, 973, 974, 979, 980, 982, 984, 995, 1000, 1003, 1005, 1008, 1010], "rel": [4, 6, 8, 17, 20, 26, 52, 58, 92, 108, 143, 157, 159, 162, 182, 200, 228, 265, 266, 280, 289, 292, 308, 312, 320, 321, 341, 345, 348, 354, 360, 372, 374, 378, 381, 382, 384, 405, 408, 412, 414, 424, 486, 489, 496, 499, 502, 506, 510, 511, 522, 523, 524, 525, 529, 530, 531, 569, 614, 623, 624, 636, 637, 639, 655, 659, 693, 711, 763, 766, 767, 769, 777, 785, 790, 793, 806, 807, 811, 823, 824, 835, 836, 846, 862, 866, 867, 868, 871, 873, 874, 875, 876, 877, 950, 951, 954, 956, 957, 958, 960, 984], "so": [4, 9, 12, 13, 16, 17, 26, 39, 45, 52, 53, 58, 62, 76, 107, 110, 111, 112, 113, 117, 121, 138, 143, 154, 156, 159, 162, 182, 183, 209, 216, 219, 239, 256, 259, 265, 266, 269, 275, 276, 280, 285, 286, 289, 300, 308, 320, 322, 328, 329, 333, 334, 335, 340, 341, 344, 345, 346, 348, 350, 351, 352, 354, 355, 360, 365, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 387, 388, 402, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 421, 430, 434, 435, 436, 437, 438, 439, 440, 441, 447, 448, 449, 450, 461, 473, 474, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 546, 547, 548, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 569, 572, 573, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 600, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 653, 654, 655, 656, 657, 660, 670, 673, 681, 690, 705, 720, 742, 752, 761, 762, 763, 766, 767, 769, 770, 777, 785, 787, 788, 789, 790, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 822, 823, 824, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 856, 858, 859, 861, 862, 863, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 903, 920, 929, 943, 944, 946, 948, 949, 950, 951, 953, 954, 955, 956, 957, 958, 960, 964, 966, 967, 968, 969, 973, 974, 978, 986, 987, 988, 995, 997, 998, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1011, 1012], "error": [4, 5, 7, 13, 14, 17, 26, 51, 71, 73, 74, 76, 91, 96, 100, 104, 107, 108, 111, 113, 115, 117, 136, 138, 149, 151, 154, 166, 171, 178, 181, 182, 184, 188, 189, 196, 200, 212, 215, 216, 222, 231, 232, 235, 239, 240, 244, 248, 249, 253, 256, 265, 266, 292, 295, 307, 316, 320, 321, 334, 343, 344, 346, 348, 349, 350, 351, 355, 358, 360, 365, 368, 372, 373, 374, 375, 376, 378, 379, 381, 382, 383, 402, 408, 409, 412, 414, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 447, 448, 449, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 468, 480, 489, 496, 498, 499, 502, 503, 507, 508, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 540, 546, 547, 553, 555, 556, 557, 559, 560, 561, 563, 564, 565, 571, 575, 576, 594, 597, 600, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 650, 653, 654, 655, 657, 658, 661, 663, 666, 667, 674, 676, 677, 685, 686, 687, 691, 704, 707, 708, 709, 710, 711, 712, 714, 715, 717, 728, 742, 746, 752, 753, 754, 755, 763, 764, 765, 766, 767, 769, 770, 772, 777, 781, 785, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 813, 814, 816, 817, 818, 821, 823, 824, 825, 826, 827, 829, 831, 832, 833, 838, 839, 840, 845, 846, 861, 862, 864, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 884, 885, 886, 887, 890, 917, 938, 941, 943, 944, 945, 947, 948, 949, 951, 955, 958, 962, 964, 968, 969, 970, 975, 976, 986, 990, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "easili": [4, 9, 29, 83, 133, 157, 185, 198, 214, 216, 220, 223, 239, 241, 248, 264, 281, 346, 348, 360, 361, 375, 381, 382, 384, 414, 948, 950, 951, 964, 968, 969, 970, 977, 980, 983, 988, 1001], "interpret": [4, 26, 117, 136, 145, 151, 152, 153, 155, 178, 182, 183, 187, 198, 200, 233, 239, 241, 242, 277, 280, 283, 290, 320, 322, 333, 344, 346, 347, 352, 354, 355, 360, 363, 372, 374, 375, 380, 382, 417, 429, 430, 432, 461, 506, 537, 576, 604, 608, 618, 637, 638, 656, 657, 660, 666, 693, 717, 722, 723, 747, 756, 757, 769, 778, 789, 790, 792, 795, 827, 839, 846, 922, 948, 950, 954, 955, 961, 962, 964, 970, 973, 975, 979, 987, 995, 996, 1000, 1003, 1008, 1009, 1010], "fraction": [4, 24, 26, 114, 117, 182, 190, 200, 316, 321, 372, 378, 381, 403, 404, 414, 415, 421, 422, 480, 492, 522, 523, 524, 525, 529, 530, 531, 555, 558, 567, 631, 632, 633, 636, 641, 642, 643, 668, 686, 687, 688, 698, 758, 760, 765, 769, 790, 791, 805, 833, 868, 869, 870, 874, 875, 876, 877, 920, 950, 954, 957, 961, 962, 964, 969, 970, 974, 996, 997, 998, 1009], "maximum": [4, 8, 11, 16, 26, 31, 34, 54, 73, 74, 75, 76, 77, 84, 89, 101, 103, 106, 107, 110, 117, 139, 141, 145, 151, 160, 170, 219, 249, 261, 265, 266, 272, 279, 303, 304, 306, 307, 310, 312, 321, 324, 326, 327, 333, 341, 351, 352, 359, 360, 371, 372, 374, 376, 377, 379, 381, 382, 384, 385, 386, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 419, 422, 424, 426, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 447, 448, 449, 463, 474, 476, 477, 478, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511, 512, 513, 517, 518, 519, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 548, 549, 562, 575, 592, 596, 597, 600, 602, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 636, 637, 639, 641, 642, 643, 644, 647, 648, 650, 651, 652, 653, 654, 655, 657, 658, 659, 681, 708, 745, 761, 763, 766, 767, 769, 777, 784, 790, 815, 822, 823, 824, 830, 831, 835, 836, 838, 841, 842, 843, 845, 854, 855, 860, 861, 862, 863, 866, 867, 871, 874, 875, 876, 877, 878, 880, 883, 890, 943, 949, 950, 951, 953, 954, 956, 957, 958, 960, 964, 968, 969, 970, 975, 987, 1002, 1003, 1005, 1006, 1009, 1010, 1012], "fit": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 19, 21, 23, 24, 26, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 58, 59, 60, 61, 62, 64, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 87, 89, 90, 91, 92, 93, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 107, 110, 111, 112, 113, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 144, 145, 146, 147, 151, 153, 154, 155, 156, 157, 159, 160, 164, 165, 166, 168, 170, 171, 172, 173, 174, 175, 177, 178, 180, 181, 182, 183, 185, 186, 187, 189, 190, 191, 194, 195, 196, 197, 198, 199, 200, 205, 209, 210, 212, 214, 215, 216, 217, 218, 219, 220, 222, 223, 225, 226, 227, 228, 229, 230, 231, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 247, 248, 249, 250, 251, 252, 253, 256, 259, 261, 262, 263, 264, 265, 267, 268, 269, 270, 272, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 316, 317, 318, 320, 321, 324, 325, 326, 327, 328, 333, 335, 338, 341, 343, 346, 349, 351, 352, 355, 358, 360, 368, 370, 371, 372, 373, 374, 375, 376, 378, 379, 380, 382, 383, 384, 385, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 422, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 447, 448, 449, 450, 466, 474, 475, 489, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 540, 542, 546, 547, 548, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 575, 576, 578, 579, 580, 581, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 652, 653, 654, 655, 656, 657, 659, 662, 663, 665, 666, 667, 675, 676, 687, 696, 699, 714, 752, 761, 762, 763, 766, 767, 769, 777, 785, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 850, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 895, 911, 912, 914, 922, 938, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 957, 958, 959, 961, 962, 964, 965, 966, 967, 968, 969, 970, 973, 974, 975, 976, 978, 983, 984, 985, 986, 987, 988, 990, 992, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "method": [4, 8, 12, 13, 17, 19, 20, 23, 24, 25, 26, 33, 34, 36, 37, 38, 41, 44, 46, 47, 49, 50, 51, 53, 54, 55, 56, 58, 62, 65, 68, 74, 75, 78, 80, 85, 87, 90, 92, 95, 96, 97, 99, 101, 106, 108, 109, 115, 122, 131, 132, 136, 149, 159, 169, 171, 183, 190, 199, 201, 203, 205, 206, 207, 209, 213, 215, 216, 217, 219, 223, 224, 227, 241, 244, 246, 247, 248, 256, 259, 265, 266, 268, 279, 283, 286, 288, 290, 291, 311, 320, 321, 322, 328, 329, 333, 334, 335, 338, 343, 344, 346, 347, 348, 352, 353, 355, 358, 359, 363, 365, 368, 370, 371, 372, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 388, 389, 390, 391, 392, 393, 395, 396, 397, 398, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 421, 422, 424, 427, 429, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 447, 448, 449, 450, 469, 477, 479, 487, 490, 493, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 546, 547, 548, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 670, 675, 676, 695, 696, 699, 700, 705, 706, 727, 732, 733, 738, 742, 747, 752, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 822, 823, 824, 825, 826, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 854, 855, 858, 859, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 881, 889, 903, 910, 911, 912, 913, 914, 915, 920, 923, 938, 939, 942, 943, 944, 948, 949, 950, 951, 953, 954, 955, 956, 957, 958, 959, 962, 964, 966, 967, 968, 969, 970, 971, 973, 975, 978, 979, 983, 985, 986, 988, 989, 990, 992, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "minim": [4, 12, 13, 26, 54, 63, 73, 74, 114, 138, 146, 161, 178, 180, 182, 184, 186, 190, 200, 202, 212, 213, 225, 230, 240, 248, 249, 279, 288, 291, 305, 312, 316, 324, 345, 346, 349, 354, 358, 360, 372, 374, 376, 379, 381, 405, 406, 410, 411, 415, 428, 503, 505, 512, 522, 523, 524, 525, 529, 530, 574, 575, 576, 606, 611, 614, 622, 623, 632, 636, 637, 639, 643, 644, 652, 657, 659, 660, 712, 744, 813, 815, 824, 842, 854, 860, 874, 875, 876, 877, 950, 951, 954, 957, 958, 964, 966, 967, 968, 969, 973, 976, 986, 987, 990, 999, 1004, 1005], "squar": [4, 5, 13, 58, 67, 74, 75, 76, 78, 79, 88, 89, 97, 104, 115, 117, 118, 136, 138, 143, 151, 153, 154, 160, 161, 163, 166, 171, 172, 178, 182, 184, 187, 192, 199, 200, 212, 213, 215, 228, 253, 283, 290, 291, 293, 305, 320, 338, 343, 346, 352, 355, 360, 374, 376, 377, 379, 380, 381, 385, 386, 397, 405, 407, 408, 409, 411, 412, 414, 415, 419, 422, 424, 425, 430, 434, 435, 436, 437, 438, 439, 440, 441, 447, 448, 449, 450, 466, 496, 502, 504, 506, 508, 510, 511, 512, 514, 517, 519, 521, 523, 524, 525, 527, 530, 533, 535, 555, 556, 557, 560, 561, 563, 564, 565, 569, 570, 571, 574, 576, 580, 587, 600, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 625, 626, 627, 628, 629, 630, 632, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 647, 648, 650, 651, 652, 653, 655, 657, 659, 661, 674, 686, 687, 688, 714, 715, 722, 723, 727, 733, 734, 749, 754, 755, 792, 799, 800, 808, 809, 812, 814, 816, 817, 824, 827, 846, 866, 867, 869, 871, 872, 873, 875, 877, 901, 927, 940, 945, 947, 948, 957, 958, 962, 968, 970, 975, 976, 986, 987, 990, 995, 998, 1000, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1011, 1012], "estim": [4, 6, 7, 8, 9, 10, 11, 12, 13, 23, 25, 26, 28, 31, 32, 34, 35, 41, 42, 46, 51, 52, 53, 54, 55, 58, 60, 67, 68, 69, 70, 79, 80, 87, 88, 89, 94, 96, 100, 101, 105, 106, 107, 108, 110, 112, 114, 115, 116, 117, 119, 122, 123, 124, 125, 127, 134, 135, 136, 137, 138, 139, 143, 145, 147, 148, 149, 153, 154, 160, 163, 166, 170, 171, 172, 177, 182, 184, 186, 187, 189, 190, 199, 200, 208, 209, 210, 215, 221, 223, 224, 225, 227, 228, 230, 231, 232, 233, 236, 237, 239, 240, 241, 242, 243, 244, 246, 248, 249, 250, 251, 252, 253, 255, 258, 259, 260, 266, 270, 279, 281, 291, 292, 294, 311, 312, 316, 321, 322, 325, 327, 333, 334, 335, 338, 344, 346, 349, 350, 353, 354, 355, 356, 364, 365, 368, 369, 372, 374, 377, 379, 382, 383, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 423, 426, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 455, 456, 457, 460, 461, 463, 466, 467, 489, 492, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 540, 541, 542, 544, 545, 546, 547, 548, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 649, 652, 653, 654, 655, 656, 657, 662, 663, 665, 666, 667, 672, 673, 676, 677, 678, 681, 683, 685, 686, 687, 688, 690, 691, 692, 693, 694, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 720, 746, 747, 748, 749, 751, 752, 753, 754, 755, 758, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 772, 774, 775, 777, 779, 781, 785, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 851, 852, 854, 855, 857, 858, 859, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 878, 879, 885, 886, 887, 889, 891, 892, 895, 897, 898, 899, 910, 911, 912, 914, 922, 938, 942, 949, 951, 953, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 970, 971, 974, 975, 976, 978, 979, 980, 982, 984, 986, 987, 988, 989, 990, 992, 995, 997, 998, 999, 1000, 1001, 1002, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "condit": [4, 12, 13, 24, 26, 77, 109, 114, 151, 152, 154, 171, 184, 187, 200, 216, 220, 242, 291, 328, 352, 358, 363, 371, 372, 374, 376, 379, 381, 383, 416, 429, 436, 437, 438, 443, 461, 478, 488, 489, 501, 504, 505, 506, 508, 510, 512, 514, 515, 527, 592, 597, 598, 608, 615, 616, 617, 619, 620, 621, 635, 637, 638, 639, 640, 647, 648, 652, 662, 677, 682, 683, 700, 701, 759, 801, 802, 803, 804, 805, 824, 827, 830, 839, 840, 843, 847, 903, 926, 948, 950, 951, 952, 954, 956, 957, 959, 964, 970, 973, 975, 986, 990, 996, 998, 999, 1000, 1002, 1003, 1005, 1007, 1009, 1010, 1011], "median": [4, 13, 34, 67, 71, 75, 76, 114, 149, 150, 154, 184, 188, 199, 211, 219, 279, 289, 291, 292, 341, 376, 381, 383, 405, 419, 423, 426, 439, 517, 519, 523, 530, 562, 592, 595, 600, 635, 636, 644, 686, 717, 813, 844, 856, 875, 877, 944, 964, 970, 998, 999], "nevertheless": [4, 157, 381], "measur": [4, 7, 8, 10, 11, 13, 19, 24, 34, 35, 46, 55, 57, 58, 88, 104, 105, 114, 118, 125, 136, 138, 143, 151, 153, 154, 155, 159, 171, 176, 181, 182, 186, 188, 200, 232, 237, 239, 245, 246, 252, 284, 312, 320, 321, 333, 341, 343, 348, 352, 360, 371, 373, 376, 378, 379, 380, 381, 382, 414, 417, 427, 463, 480, 503, 505, 512, 516, 522, 523, 524, 525, 528, 529, 530, 569, 572, 573, 576, 592, 596, 623, 655, 657, 663, 667, 669, 670, 672, 674, 677, 678, 681, 682, 685, 689, 690, 691, 693, 695, 700, 701, 703, 704, 707, 711, 719, 720, 721, 746, 747, 748, 750, 751, 752, 753, 756, 759, 787, 789, 792, 812, 843, 855, 874, 875, 876, 877, 944, 950, 952, 957, 959, 960, 962, 968, 970, 975, 983, 986, 995, 998, 1000, 1001, 1003, 1005], "test": [4, 6, 8, 10, 11, 13, 16, 23, 24, 25, 26, 29, 30, 31, 51, 66, 67, 79, 92, 101, 104, 106, 107, 108, 109, 113, 114, 115, 116, 117, 127, 129, 130, 132, 135, 138, 139, 151, 153, 154, 155, 156, 157, 159, 166, 171, 177, 178, 181, 182, 183, 184, 186, 189, 190, 197, 198, 200, 206, 210, 215, 216, 218, 227, 232, 233, 234, 237, 238, 239, 240, 241, 243, 244, 246, 247, 249, 250, 251, 258, 262, 267, 268, 274, 276, 281, 283, 284, 285, 286, 295, 301, 308, 316, 322, 329, 333, 334, 340, 341, 343, 349, 350, 351, 352, 358, 359, 360, 363, 364, 367, 369, 370, 372, 375, 376, 379, 381, 382, 383, 384, 391, 393, 397, 400, 401, 402, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 447, 448, 449, 453, 454, 458, 462, 463, 467, 469, 489, 496, 502, 504, 508, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 530, 532, 533, 534, 535, 557, 559, 560, 561, 563, 564, 565, 567, 569, 570, 571, 573, 574, 575, 576, 592, 593, 595, 600, 601, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 677, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 813, 816, 817, 823, 824, 826, 851, 852, 854, 855, 856, 857, 861, 862, 864, 866, 867, 868, 869, 871, 872, 874, 875, 876, 877, 885, 895, 897, 898, 949, 950, 953, 954, 957, 958, 962, 964, 968, 969, 970, 973, 974, 975, 977, 978, 980, 983, 984, 990, 995, 996, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011], "discuss": [4, 50, 55, 136, 154, 171, 202, 207, 242, 256, 320, 329, 335, 341, 343, 346, 351, 352, 354, 358, 360, 361, 374, 376, 380, 381, 384, 463, 647, 648, 808, 809, 814, 816, 817, 944, 948, 950, 951, 954, 957, 964, 971, 974, 977, 998], "choos": [4, 11, 12, 41, 43, 47, 50, 57, 59, 63, 73, 93, 110, 122, 127, 136, 154, 157, 175, 217, 234, 244, 251, 324, 329, 333, 334, 335, 348, 351, 354, 360, 374, 376, 378, 381, 382, 385, 408, 409, 412, 414, 424, 488, 497, 503, 524, 525, 547, 567, 623, 624, 637, 639, 644, 652, 653, 654, 658, 690, 720, 763, 766, 767, 777, 833, 866, 867, 874, 875, 876, 877, 944, 945, 949, 950, 951, 952, 953, 957, 964, 967, 968, 969, 980, 982, 986, 987, 997, 998, 1002, 1004, 1006], "focu": [4, 9, 87, 101, 138, 231, 269, 333, 351, 372, 381, 518, 519, 524, 526, 527, 643, 951, 957, 964, 973, 974, 977], "root": [4, 16, 75, 117, 136, 163, 328, 343, 346, 354, 374, 407, 466, 506, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 604, 714, 715, 754, 755, 874, 875, 876, 877, 878, 880, 954, 960, 970, 997, 1003, 1004, 1005, 1006, 1009, 1010], "becaus": [4, 5, 13, 19, 24, 26, 37, 44, 47, 67, 77, 80, 101, 106, 109, 114, 136, 139, 142, 145, 154, 155, 157, 162, 168, 175, 182, 186, 188, 190, 200, 215, 216, 226, 236, 239, 240, 245, 258, 259, 275, 276, 277, 279, 283, 284, 285, 286, 299, 308, 312, 320, 321, 322, 324, 328, 329, 333, 334, 341, 344, 348, 351, 354, 358, 359, 360, 365, 368, 371, 372, 374, 375, 378, 379, 380, 381, 382, 384, 387, 397, 412, 413, 426, 430, 440, 447, 448, 449, 499, 501, 517, 519, 521, 523, 525, 527, 530, 533, 535, 553, 556, 572, 573, 576, 597, 598, 600, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 637, 638, 641, 642, 643, 644, 645, 654, 664, 674, 677, 678, 686, 687, 688, 710, 727, 749, 752, 758, 763, 777, 790, 794, 799, 800, 809, 812, 814, 816, 817, 818, 824, 835, 836, 844, 846, 847, 851, 852, 854, 855, 856, 857, 867, 869, 872, 875, 877, 918, 944, 946, 947, 948, 949, 950, 951, 952, 954, 955, 957, 959, 961, 964, 969, 970, 978, 987, 1001, 1002, 1004, 1005, 1006, 1007, 1009, 1011], "intuit": [4, 13, 29, 41, 49, 59, 92, 101, 104, 111, 131, 138, 154, 155, 183, 184, 204, 209, 240, 256, 264, 281, 284, 305, 308, 312, 321, 346, 360, 372, 374, 376, 378, 380, 746, 747, 748, 751, 837, 868, 871, 946, 950, 951, 954, 955, 961, 964, 965, 969, 978, 986, 988, 995], "studi": [4, 26, 57, 114, 182, 200, 242, 245, 246, 320, 341, 343, 378, 383, 661, 673, 722, 723, 791, 952, 954, 968, 979], "metric": [4, 6, 7, 11, 13, 19, 20, 21, 23, 24, 25, 28, 30, 33, 35, 39, 41, 45, 46, 49, 55, 57, 61, 66, 71, 77, 101, 106, 112, 113, 115, 116, 117, 122, 133, 136, 139, 149, 151, 153, 154, 156, 166, 171, 177, 178, 182, 184, 186, 188, 200, 205, 210, 213, 214, 219, 222, 232, 233, 235, 236, 237, 239, 240, 242, 246, 248, 249, 258, 259, 261, 269, 272, 277, 279, 284, 288, 289, 291, 292, 293, 294, 295, 297, 298, 300, 301, 320, 321, 329, 333, 338, 341, 346, 348, 358, 359, 360, 363, 365, 369, 372, 379, 380, 381, 384, 385, 391, 402, 406, 409, 410, 411, 415, 419, 420, 421, 422, 427, 434, 485, 500, 514, 515, 516, 518, 520, 522, 523, 524, 526, 527, 529, 530, 532, 534, 543, 567, 575, 585, 593, 596, 599, 603, 604, 605, 606, 607, 608, 623, 624, 628, 631, 633, 639, 640, 641, 653, 655, 657, 659, 661, 763, 766, 767, 769, 777, 785, 787, 788, 789, 791, 794, 795, 796, 797, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 823, 832, 838, 861, 862, 866, 868, 871, 874, 876, 944, 946, 949, 951, 955, 957, 960, 962, 973, 974, 975, 983, 984, 988, 990, 992, 995, 996, 997, 998, 999, 1000, 1001, 1002], "ones": [4, 11, 32, 40, 52, 67, 76, 112, 118, 138, 159, 166, 186, 187, 209, 212, 216, 239, 247, 250, 266, 283, 298, 318, 333, 334, 346, 354, 360, 374, 376, 378, 381, 389, 392, 396, 415, 497, 531, 546, 575, 576, 583, 609, 610, 623, 624, 635, 641, 668, 760, 765, 770, 781, 808, 809, 810, 812, 814, 816, 817, 818, 819, 820, 841, 845, 908, 950, 954, 959, 960, 964, 969, 986, 995, 1003, 1004, 1005], "term": [4, 14, 15, 24, 30, 55, 92, 104, 107, 111, 114, 143, 153, 166, 170, 171, 182, 184, 186, 196, 199, 200, 219, 237, 241, 259, 274, 291, 312, 316, 320, 322, 335, 346, 348, 350, 358, 368, 372, 373, 374, 376, 378, 379, 381, 408, 412, 414, 417, 424, 427, 489, 500, 503, 505, 509, 512, 514, 553, 554, 555, 556, 569, 572, 573, 597, 598, 605, 607, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 633, 634, 635, 637, 638, 639, 640, 641, 643, 645, 652, 660, 694, 702, 747, 748, 751, 823, 824, 841, 845, 848, 866, 867, 868, 869, 870, 871, 872, 943, 945, 946, 948, 949, 950, 951, 954, 955, 956, 958, 959, 964, 968, 969, 979, 988, 1003, 1009, 1010, 1011], "y": [4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 16, 23, 24, 25, 26, 28, 29, 31, 32, 36, 37, 39, 40, 41, 42, 49, 51, 53, 54, 57, 58, 59, 62, 63, 67, 68, 70, 71, 76, 79, 80, 84, 85, 89, 91, 92, 93, 95, 96, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 129, 131, 132, 133, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 153, 154, 155, 156, 157, 159, 161, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 197, 198, 200, 202, 203, 204, 207, 210, 212, 213, 214, 215, 216, 217, 219, 220, 222, 223, 225, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 258, 259, 261, 262, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 279, 280, 281, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 324, 325, 326, 327, 328, 329, 338, 339, 340, 341, 344, 346, 348, 351, 353, 355, 359, 360, 365, 368, 372, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 429, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 447, 448, 449, 450, 452, 463, 465, 467, 470, 473, 474, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 488, 489, 491, 493, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 546, 547, 548, 550, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 662, 663, 664, 665, 666, 667, 671, 676, 690, 696, 699, 705, 706, 720, 722, 723, 724, 725, 727, 728, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 749, 752, 753, 756, 757, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 822, 823, 824, 825, 826, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 858, 859, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 879, 886, 891, 892, 914, 916, 917, 918, 922, 925, 928, 941, 943, 944, 945, 946, 948, 949, 950, 952, 954, 955, 956, 957, 958, 959, 961, 964, 968, 969, 970, 974, 979, 983, 984, 986, 987, 990, 992, 995, 996, 997, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "hist": [4, 24, 26, 50, 71, 103, 107, 182, 184, 213, 219, 245, 264, 279, 283, 285, 292, 295, 381], "bin": [4, 23, 24, 26, 50, 71, 103, 107, 182, 213, 219, 245, 264, 279, 280, 281, 282, 283, 285, 286, 344, 354, 364, 372, 380, 381, 403, 404, 413, 426, 526, 527, 829, 831, 845, 905, 987, 1003, 1004, 1005, 1009, 1013], "30": [4, 8, 10, 13, 15, 19, 32, 36, 37, 41, 51, 57, 67, 69, 73, 94, 101, 110, 114, 117, 121, 127, 136, 138, 139, 142, 144, 155, 159, 161, 176, 180, 182, 190, 200, 202, 203, 207, 214, 218, 219, 229, 239, 244, 253, 256, 259, 268, 269, 283, 284, 285, 293, 294, 297, 298, 302, 306, 309, 311, 314, 333, 341, 343, 351, 352, 378, 382, 385, 409, 415, 420, 421, 422, 465, 496, 500, 502, 503, 504, 506, 508, 510, 511, 535, 557, 560, 561, 563, 613, 657, 699, 747, 806, 807, 808, 809, 810, 812, 814, 816, 817, 818, 847, 862, 875, 932, 943, 948, 954, 955, 957, 962, 975, 984, 995, 996, 1002, 1003, 1004], "rent": 4, "fleet": 4, "input": [4, 6, 10, 26, 29, 31, 69, 87, 91, 110, 114, 115, 144, 145, 146, 154, 159, 161, 182, 185, 186, 190, 197, 200, 212, 213, 215, 216, 223, 234, 256, 263, 264, 276, 280, 281, 282, 283, 288, 291, 293, 308, 312, 314, 317, 322, 340, 343, 346, 349, 351, 355, 356, 358, 359, 360, 371, 372, 375, 378, 379, 380, 381, 382, 383, 384, 386, 392, 395, 396, 397, 398, 399, 402, 403, 404, 405, 406, 407, 410, 413, 414, 415, 419, 422, 423, 426, 429, 430, 432, 433, 434, 436, 437, 447, 448, 449, 454, 468, 474, 481, 482, 483, 485, 489, 493, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 547, 548, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 576, 585, 587, 592, 593, 594, 595, 596, 600, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 650, 651, 652, 653, 654, 655, 657, 658, 661, 662, 663, 664, 665, 666, 667, 686, 687, 688, 692, 709, 710, 712, 714, 715, 717, 718, 725, 731, 735, 736, 738, 742, 743, 744, 745, 749, 754, 755, 761, 762, 763, 766, 767, 769, 777, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 810, 812, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 829, 830, 831, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 853, 854, 858, 859, 861, 862, 864, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 878, 883, 884, 885, 886, 887, 888, 892, 897, 900, 902, 911, 913, 914, 918, 927, 929, 935, 936, 937, 940, 941, 944, 946, 948, 950, 951, 952, 953, 954, 956, 957, 958, 959, 961, 962, 966, 967, 968, 969, 970, 973, 974, 978, 979, 983, 984, 990, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "annot": [4, 9, 25, 124, 159, 203, 243, 246, 320, 346, 347, 348, 374, 681, 880, 954, 970, 1004], "log": [4, 20, 24, 25, 26, 73, 87, 101, 112, 114, 122, 132, 136, 139, 140, 142, 143, 144, 147, 167, 170, 171, 175, 182, 187, 192, 200, 213, 215, 229, 269, 284, 320, 341, 343, 344, 346, 350, 354, 355, 360, 371, 372, 374, 375, 376, 379, 381, 382, 384, 413, 416, 425, 430, 435, 436, 437, 438, 439, 440, 441, 497, 501, 506, 514, 515, 516, 518, 520, 522, 524, 527, 529, 555, 556, 558, 559, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 607, 610, 613, 623, 624, 634, 636, 641, 645, 705, 715, 719, 761, 762, 763, 766, 767, 777, 801, 802, 803, 804, 805, 806, 807, 811, 822, 823, 830, 831, 860, 863, 868, 871, 873, 874, 876, 901, 943, 946, 948, 950, 951, 956, 957, 959, 962, 964, 968, 970, 973, 974, 986, 997, 998, 999, 1004, 1005, 1006, 1009, 1012], "describ": [4, 13, 53, 122, 136, 154, 200, 214, 239, 248, 329, 333, 334, 339, 341, 343, 345, 346, 348, 351, 354, 360, 361, 371, 374, 376, 377, 378, 379, 381, 382, 427, 434, 438, 439, 456, 458, 460, 461, 462, 465, 466, 467, 468, 469, 470, 475, 481, 482, 483, 493, 572, 573, 610, 624, 633, 679, 761, 762, 801, 803, 841, 903, 943, 946, 949, 950, 953, 954, 956, 960, 968, 969, 970, 977, 979, 985, 986, 1003, 1005], "weather": [4, 13, 143, 155, 950, 954], "includ": [4, 30, 32, 52, 75, 107, 111, 112, 113, 153, 154, 156, 166, 182, 186, 200, 216, 240, 256, 259, 275, 279, 291, 292, 294, 308, 313, 320, 322, 329, 333, 334, 340, 342, 344, 346, 347, 348, 350, 351, 352, 354, 355, 360, 361, 364, 371, 373, 374, 375, 377, 378, 379, 381, 382, 383, 384, 385, 409, 411, 415, 421, 431, 434, 435, 436, 437, 438, 439, 440, 441, 454, 455, 456, 461, 465, 466, 467, 469, 470, 475, 499, 506, 522, 529, 539, 597, 603, 611, 612, 617, 625, 626, 627, 630, 646, 653, 654, 662, 678, 693, 694, 699, 701, 702, 735, 747, 748, 751, 759, 763, 765, 766, 767, 776, 777, 780, 783, 789, 792, 814, 816, 817, 818, 839, 840, 841, 845, 863, 866, 867, 874, 876, 878, 880, 886, 887, 890, 892, 895, 911, 943, 950, 953, 954, 955, 957, 958, 964, 968, 969, 970, 973, 974, 977, 978, 986, 988, 995, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "both": [4, 5, 7, 9, 10, 13, 15, 16, 20, 24, 25, 26, 32, 39, 51, 52, 61, 67, 73, 75, 79, 80, 92, 94, 99, 104, 107, 108, 111, 112, 117, 121, 122, 125, 131, 132, 136, 138, 145, 147, 153, 154, 155, 156, 161, 166, 168, 170, 171, 182, 183, 184, 186, 187, 188, 190, 200, 206, 215, 216, 217, 225, 226, 227, 228, 229, 230, 239, 240, 241, 242, 246, 248, 250, 254, 259, 271, 279, 283, 284, 288, 290, 294, 299, 300, 305, 310, 312, 320, 321, 322, 328, 329, 333, 334, 335, 339, 340, 341, 342, 344, 346, 348, 352, 353, 355, 358, 359, 360, 361, 364, 365, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 384, 387, 402, 411, 417, 427, 433, 440, 447, 448, 449, 450, 453, 454, 461, 462, 465, 467, 470, 472, 473, 474, 499, 503, 505, 512, 516, 520, 521, 522, 528, 529, 530, 531, 532, 542, 553, 554, 556, 562, 572, 573, 592, 597, 598, 608, 622, 623, 624, 637, 639, 641, 643, 652, 664, 669, 677, 681, 693, 694, 695, 700, 702, 721, 725, 731, 738, 742, 747, 748, 751, 752, 753, 759, 766, 767, 769, 785, 795, 823, 824, 838, 840, 842, 854, 859, 864, 866, 867, 874, 876, 890, 895, 904, 917, 929, 943, 944, 945, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 960, 961, 962, 964, 967, 968, 969, 970, 973, 974, 978, 983, 986, 987, 988, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "numer": [4, 13, 19, 63, 67, 71, 109, 111, 122, 136, 143, 146, 155, 156, 171, 182, 200, 219, 221, 223, 269, 285, 291, 295, 322, 340, 341, 343, 349, 351, 352, 358, 359, 360, 374, 376, 381, 382, 383, 384, 386, 387, 405, 408, 412, 424, 436, 437, 440, 443, 454, 455, 456, 461, 465, 466, 467, 469, 470, 475, 496, 498, 500, 505, 512, 526, 527, 532, 546, 555, 576, 582, 585, 592, 595, 597, 598, 611, 617, 619, 637, 652, 655, 659, 679, 752, 758, 763, 766, 767, 769, 777, 785, 788, 789, 790, 793, 801, 802, 803, 804, 805, 823, 824, 829, 834, 839, 840, 847, 878, 879, 880, 886, 887, 902, 903, 943, 944, 950, 951, 955, 962, 964, 965, 970, 977, 978, 979, 988, 995, 996, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "categor": [4, 67, 100, 106, 117, 122, 151, 154, 155, 156, 182, 200, 219, 221, 223, 286, 291, 293, 294, 335, 338, 340, 341, 348, 351, 360, 375, 382, 431, 432, 454, 455, 461, 470, 526, 527, 546, 547, 572, 573, 597, 598, 613, 623, 624, 634, 645, 674, 789, 801, 802, 803, 804, 805, 827, 829, 833, 834, 837, 839, 840, 847, 861, 862, 944, 950, 961, 962, 970, 973, 974, 975, 976, 977, 978, 988, 990, 995, 996, 999, 1000, 1003, 1005, 1007, 1010, 1011, 1012], "inform": [4, 5, 8, 11, 12, 14, 24, 26, 31, 32, 34, 35, 46, 50, 55, 63, 64, 66, 67, 80, 82, 83, 84, 93, 107, 108, 109, 130, 132, 133, 135, 136, 138, 143, 151, 154, 155, 157, 159, 160, 161, 162, 166, 183, 186, 197, 199, 200, 216, 220, 227, 228, 230, 234, 236, 239, 240, 241, 244, 246, 248, 262, 265, 266, 269, 286, 291, 295, 311, 316, 320, 321, 322, 325, 328, 329, 333, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 351, 352, 354, 358, 359, 360, 361, 365, 368, 371, 378, 379, 381, 382, 383, 384, 388, 402, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 427, 429, 434, 435, 436, 438, 439, 440, 441, 447, 448, 449, 450, 457, 459, 460, 461, 462, 465, 466, 467, 468, 469, 470, 475, 480, 489, 493, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 514, 515, 516, 517, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 534, 535, 546, 547, 548, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 568, 571, 572, 573, 574, 575, 576, 592, 593, 594, 595, 600, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 652, 653, 654, 655, 656, 657, 660, 662, 666, 669, 670, 680, 690, 694, 707, 719, 720, 721, 750, 752, 759, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 789, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 851, 852, 854, 855, 856, 857, 858, 859, 861, 862, 865, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 878, 880, 911, 944, 946, 951, 952, 953, 954, 955, 956, 957, 958, 960, 961, 964, 965, 968, 970, 974, 975, 977, 978, 985, 986, 987, 988, 995, 998, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "alreadi": [4, 6, 10, 16, 52, 55, 83, 92, 101, 117, 122, 136, 154, 210, 217, 219, 222, 240, 246, 259, 291, 294, 346, 347, 351, 358, 360, 372, 376, 378, 380, 381, 386, 402, 464, 488, 498, 532, 533, 599, 611, 614, 629, 630, 631, 632, 633, 639, 641, 642, 643, 650, 651, 732, 742, 801, 821, 829, 835, 836, 838, 843, 863, 866, 867, 889, 913, 943, 946, 960, 964, 965, 974, 979, 984, 988, 992, 996, 1000, 1003, 1007, 1008, 1009, 1010], "expand": [4, 16, 46, 62, 211, 285, 289, 329, 338, 381, 409, 415, 464, 522, 523, 524, 525, 529, 530, 531, 874, 875, 876, 877, 954, 996, 1003, 1004, 1011], "complementari": [4, 382], "column": [4, 8, 13, 20, 21, 57, 65, 68, 71, 83, 108, 110, 111, 114, 117, 119, 122, 136, 143, 149, 151, 153, 154, 155, 156, 157, 171, 182, 183, 186, 190, 200, 211, 218, 219, 220, 223, 230, 239, 240, 250, 251, 258, 276, 284, 285, 286, 290, 291, 292, 293, 295, 320, 321, 322, 333, 340, 341, 343, 346, 348, 352, 355, 358, 359, 360, 371, 374, 375, 377, 379, 381, 382, 383, 386, 389, 416, 418, 429, 431, 432, 436, 437, 443, 452, 453, 454, 455, 456, 457, 459, 461, 465, 466, 467, 469, 470, 473, 474, 475, 476, 478, 480, 491, 496, 499, 502, 506, 507, 513, 520, 522, 523, 526, 527, 529, 530, 531, 532, 546, 547, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 572, 573, 575, 592, 595, 597, 598, 599, 611, 613, 617, 623, 625, 627, 629, 630, 634, 645, 650, 651, 662, 678, 683, 684, 693, 694, 702, 718, 727, 732, 733, 734, 737, 747, 748, 751, 752, 763, 766, 767, 777, 787, 792, 797, 800, 801, 802, 803, 804, 805, 806, 807, 826, 830, 831, 832, 833, 839, 840, 841, 845, 846, 847, 848, 850, 851, 852, 856, 857, 866, 868, 871, 874, 876, 882, 886, 887, 892, 903, 917, 930, 931, 933, 941, 943, 944, 946, 950, 952, 954, 955, 962, 964, 969, 974, 975, 995, 997, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "x": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 23, 24, 25, 26, 28, 29, 31, 32, 35, 36, 37, 38, 39, 40, 41, 42, 44, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 67, 68, 70, 71, 74, 75, 76, 77, 79, 80, 84, 85, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 129, 131, 132, 133, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 153, 154, 155, 156, 157, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 200, 202, 203, 204, 207, 209, 210, 212, 213, 214, 215, 216, 217, 219, 220, 222, 223, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 258, 259, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 324, 325, 326, 327, 328, 329, 333, 339, 340, 341, 346, 347, 348, 350, 351, 352, 353, 354, 355, 358, 359, 360, 365, 368, 372, 374, 375, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 458, 459, 460, 463, 465, 466, 467, 470, 471, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 546, 547, 548, 550, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 671, 675, 676, 689, 696, 699, 706, 722, 723, 724, 725, 727, 728, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 752, 756, 757, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 882, 883, 884, 885, 886, 887, 890, 900, 902, 903, 904, 905, 914, 915, 922, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 943, 944, 945, 946, 948, 949, 950, 951, 952, 954, 955, 956, 957, 958, 959, 960, 961, 964, 966, 967, 968, 969, 970, 974, 979, 983, 984, 986, 987, 988, 992, 995, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012], "drop": [4, 5, 13, 67, 71, 80, 117, 143, 153, 154, 155, 157, 182, 186, 200, 219, 223, 249, 285, 290, 293, 295, 321, 350, 354, 375, 379, 381, 429, 432, 532, 533, 534, 535, 660, 665, 667, 746, 753, 825, 839, 845, 944, 950, 954, 964, 973, 995, 996, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "axi": [4, 5, 7, 11, 12, 13, 14, 15, 17, 19, 24, 25, 34, 36, 37, 44, 45, 47, 49, 50, 51, 52, 58, 67, 68, 71, 77, 80, 84, 85, 87, 88, 89, 90, 91, 96, 103, 104, 108, 110, 118, 121, 125, 129, 132, 142, 143, 147, 149, 153, 154, 163, 167, 169, 171, 174, 175, 176, 182, 187, 191, 194, 196, 197, 199, 200, 203, 204, 207, 209, 213, 214, 218, 225, 227, 229, 230, 235, 236, 240, 241, 246, 248, 249, 258, 259, 264, 265, 266, 269, 270, 271, 277, 279, 283, 286, 295, 298, 300, 302, 304, 307, 308, 311, 313, 314, 315, 316, 318, 320, 321, 325, 326, 327, 328, 341, 348, 355, 360, 372, 374, 382, 386, 403, 410, 429, 432, 496, 498, 501, 502, 504, 506, 508, 510, 511, 515, 550, 577, 596, 597, 650, 651, 666, 727, 743, 744, 745, 746, 769, 785, 794, 835, 836, 843, 844, 846, 851, 852, 853, 855, 856, 857, 880, 882, 886, 887, 905, 929, 935, 944, 954, 961, 964, 969, 985, 987, 1003, 1005, 1007, 1012], "holidai": [4, 155], "workingdai": [4, 155], "temp": [4, 13, 155], "feel_temp": [4, 13, 155], "humid": [4, 13, 155, 961], "windspe": [4, 13, 155], "0": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 151, 153, 154, 155, 156, 157, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 324, 325, 326, 327, 328, 329, 333, 334, 340, 341, 343, 344, 346, 347, 348, 350, 351, 352, 353, 355, 358, 359, 360, 364, 365, 366, 367, 368, 370, 371, 372, 374, 375, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 397, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 546, 547, 548, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 882, 883, 884, 886, 887, 891, 892, 894, 895, 896, 897, 898, 900, 902, 903, 905, 906, 907, 908, 915, 916, 917, 919, 920, 922, 923, 924, 925, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 940, 943, 944, 946, 947, 948, 949, 950, 951, 952, 954, 955, 956, 957, 958, 959, 960, 961, 962, 964, 965, 966, 967, 968, 969, 973, 974, 975, 976, 979, 983, 984, 985, 986, 987, 988, 990, 991, 992, 993], "spring": [4, 13, 155], "fals": [4, 5, 7, 8, 10, 11, 14, 15, 16, 20, 21, 23, 25, 26, 30, 31, 32, 36, 39, 41, 43, 44, 51, 52, 61, 64, 66, 67, 68, 74, 76, 85, 91, 95, 96, 101, 107, 108, 111, 114, 115, 117, 125, 127, 138, 143, 144, 145, 146, 154, 155, 156, 157, 161, 162, 166, 168, 182, 183, 187, 188, 190, 198, 200, 202, 205, 216, 217, 219, 223, 225, 236, 237, 239, 242, 243, 246, 247, 248, 249, 250, 251, 252, 253, 259, 263, 269, 272, 275, 276, 279, 280, 285, 286, 288, 290, 291, 292, 293, 295, 299, 308, 310, 316, 317, 320, 321, 340, 346, 347, 348, 351, 360, 365, 372, 374, 375, 376, 378, 379, 381, 382, 383, 384, 386, 387, 399, 400, 401, 402, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419, 424, 426, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 473, 474, 475, 477, 478, 480, 488, 489, 491, 492, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 546, 547, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 597, 600, 601, 602, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 655, 659, 660, 662, 663, 664, 665, 666, 667, 668, 673, 674, 676, 677, 678, 679, 680, 683, 684, 690, 691, 692, 693, 694, 695, 702, 706, 707, 714, 715, 718, 720, 725, 727, 731, 733, 738, 742, 746, 747, 748, 749, 751, 753, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 772, 774, 777, 781, 782, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 878, 879, 880, 884, 885, 886, 887, 897, 904, 915, 916, 919, 920, 924, 925, 926, 928, 935, 940, 941, 943, 944, 950, 954, 957, 964, 968, 969, 987, 988, 995, 996, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013], "6": [4, 8, 9, 10, 11, 12, 13, 16, 19, 25, 26, 29, 30, 37, 41, 43, 46, 47, 49, 53, 54, 57, 58, 59, 60, 61, 62, 64, 69, 70, 71, 73, 74, 75, 77, 83, 87, 89, 96, 102, 110, 114, 115, 117, 119, 121, 127, 131, 136, 138, 141, 143, 145, 146, 149, 150, 154, 155, 157, 159, 161, 162, 163, 166, 171, 175, 180, 182, 183, 184, 186, 196, 200, 202, 203, 206, 209, 212, 213, 217, 220, 221, 225, 226, 227, 228, 230, 231, 233, 234, 238, 239, 240, 241, 242, 248, 249, 250, 251, 254, 258, 261, 264, 272, 274, 276, 277, 279, 281, 283, 284, 286, 288, 291, 292, 293, 294, 295, 297, 298, 301, 302, 308, 309, 311, 313, 316, 318, 320, 321, 322, 327, 329, 340, 341, 343, 344, 346, 351, 352, 359, 364, 366, 367, 372, 374, 375, 378, 379, 381, 382, 383, 389, 406, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 426, 427, 428, 447, 448, 449, 450, 455, 461, 470, 482, 489, 492, 495, 502, 503, 504, 505, 506, 510, 511, 512, 518, 526, 527, 528, 534, 535, 558, 559, 569, 570, 571, 573, 576, 579, 580, 590, 592, 593, 595, 601, 602, 609, 610, 635, 641, 642, 654, 658, 664, 686, 692, 702, 706, 709, 710, 714, 715, 717, 733, 749, 752, 754, 761, 762, 764, 765, 770, 772, 773, 775, 780, 781, 784, 787, 788, 789, 790, 792, 801, 802, 803, 805, 806, 807, 814, 816, 817, 818, 833, 834, 836, 839, 841, 844, 845, 849, 850, 881, 882, 886, 887, 902, 903, 904, 906, 908, 909, 917, 929, 932, 940, 943, 944, 948, 950, 951, 954, 964, 965, 968, 969, 970, 979, 983, 984, 986, 991, 993, 996, 997, 998, 1001, 1003, 1008, 1012], "clear": [4, 16, 52, 57, 68, 154, 155, 284, 341, 345, 346, 348, 358, 359, 360, 372, 375, 380, 880, 881, 943, 948, 1006, 1007, 1008], "9": [4, 7, 9, 11, 12, 13, 14, 23, 25, 26, 29, 30, 32, 39, 41, 47, 52, 55, 59, 61, 70, 77, 84, 110, 111, 113, 114, 120, 122, 127, 128, 129, 136, 141, 145, 150, 153, 154, 155, 163, 164, 173, 182, 189, 195, 196, 198, 199, 200, 202, 205, 213, 214, 223, 225, 226, 227, 228, 233, 237, 242, 246, 248, 258, 261, 263, 264, 267, 268, 269, 274, 275, 277, 279, 281, 282, 283, 285, 286, 293, 294, 297, 298, 300, 301, 302, 308, 312, 318, 322, 329, 343, 344, 352, 359, 364, 366, 367, 372, 375, 376, 378, 381, 382, 404, 408, 415, 422, 428, 447, 448, 449, 450, 455, 461, 463, 481, 483, 485, 492, 499, 503, 504, 505, 512, 525, 532, 535, 548, 556, 569, 570, 572, 573, 592, 595, 599, 602, 604, 611, 612, 617, 623, 625, 626, 627, 646, 647, 648, 652, 657, 664, 674, 687, 690, 705, 712, 733, 742, 743, 744, 761, 764, 766, 767, 781, 784, 790, 792, 795, 803, 804, 808, 809, 814, 817, 823, 824, 832, 838, 841, 902, 903, 907, 927, 943, 949, 950, 954, 958, 964, 968, 969, 979, 983, 988, 991, 993, 996, 997, 998, 1000, 1009, 1011], "84": [4, 6, 66, 133, 173, 200, 281, 297, 329, 343, 381, 382, 752, 777, 954, 964, 984], "14": [4, 8, 11, 13, 35, 46, 57, 59, 60, 63, 70, 76, 92, 131, 155, 166, 171, 173, 200, 203, 204, 209, 214, 238, 244, 245, 253, 258, 259, 282, 283, 293, 315, 318, 334, 341, 343, 344, 359, 364, 366, 367, 374, 378, 461, 463, 475, 518, 519, 600, 608, 657, 777, 781, 832, 947, 950, 954, 964, 969, 975, 979, 993, 995, 996, 998, 999, 1003, 1008], "395": [4, 312, 975], "81": [4, 47, 223, 297, 298, 374, 664, 725, 752, 763, 777, 793, 954, 955, 957, 964], "0000": [4, 293], "02": [4, 12, 13, 28, 41, 47, 49, 55, 59, 61, 77, 79, 87, 90, 103, 110, 136, 140, 145, 153, 154, 163, 200, 209, 217, 219, 234, 240, 246, 264, 274, 277, 279, 281, 302, 304, 321, 325, 340, 343, 351, 378, 406, 410, 562, 570, 623, 641, 763, 777, 845, 861, 875, 950, 975], "13": [4, 6, 10, 11, 13, 15, 41, 70, 92, 96, 110, 113, 115, 149, 154, 159, 168, 191, 207, 219, 233, 240, 243, 245, 279, 283, 308, 320, 341, 343, 346, 352, 359, 378, 386, 461, 475, 478, 497, 498, 516, 517, 547, 571, 600, 604, 698, 723, 781, 810, 825, 832, 858, 859, 950, 954, 955, 960, 961, 964, 969, 975, 979, 993, 995, 997, 998, 1001, 1002, 1003, 1004, 1007], "635": [4, 581], "80": [4, 6, 11, 16, 26, 64, 76, 122, 129, 133, 155, 161, 217, 281, 285, 297, 311, 313, 320, 326, 329, 341, 343, 346, 372, 378, 383, 385, 409, 444, 475, 506, 678, 763, 777, 847, 860, 879, 943, 949, 950, 954, 961, 967, 970, 988], "75": [4, 6, 7, 8, 10, 13, 31, 41, 52, 77, 104, 133, 145, 146, 150, 154, 159, 161, 164, 173, 189, 200, 223, 227, 228, 239, 248, 252, 264, 279, 291, 318, 320, 329, 414, 466, 516, 602, 623, 659, 671, 677, 698, 703, 704, 709, 717, 720, 758, 763, 844, 852, 856, 863, 879, 891, 892, 935, 954, 956, 964, 970, 972, 984, 991, 997], "17374": [4, 13], "19": [4, 13, 117, 143, 154, 186, 204, 230, 283, 284, 298, 343, 344, 350, 360, 364, 366, 367, 374, 375, 382, 385, 409, 457, 481, 482, 483, 501, 505, 506, 512, 514, 515, 522, 523, 524, 525, 529, 530, 531, 547, 554, 572, 613, 623, 624, 631, 632, 633, 636, 637, 639, 641, 643, 652, 672, 745, 749, 763, 777, 789, 794, 795, 797, 798, 812, 813, 832, 843, 864, 868, 871, 874, 875, 876, 877, 943, 954, 964, 975, 991, 993, 995, 996, 997, 998, 1000, 1003, 1012], "misti": [4, 155], "10": [4, 5, 6, 7, 8, 10, 12, 13, 15, 16, 17, 20, 24, 25, 26, 28, 29, 30, 34, 36, 39, 40, 41, 42, 43, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 67, 68, 70, 73, 74, 75, 76, 77, 79, 80, 85, 89, 90, 91, 92, 96, 97, 101, 103, 104, 106, 107, 108, 110, 111, 112, 114, 115, 117, 119, 120, 123, 125, 129, 133, 136, 139, 140, 142, 144, 145, 147, 149, 150, 153, 154, 155, 156, 157, 159, 161, 166, 172, 173, 175, 176, 180, 182, 183, 184, 185, 186, 187, 188, 189, 193, 194, 195, 198, 199, 200, 203, 204, 209, 212, 213, 214, 215, 216, 218, 219, 220, 222, 228, 229, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 247, 250, 253, 256, 258, 264, 274, 275, 276, 277, 279, 280, 282, 283, 284, 288, 289, 290, 291, 292, 294, 295, 297, 298, 299, 301, 306, 307, 308, 310, 311, 313, 315, 316, 318, 320, 321, 329, 333, 340, 341, 342, 343, 346, 348, 351, 352, 358, 359, 360, 364, 365, 371, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 387, 403, 408, 412, 414, 416, 417, 418, 424, 425, 427, 440, 453, 457, 458, 461, 465, 466, 467, 469, 475, 476, 477, 478, 481, 485, 486, 489, 491, 493, 496, 500, 501, 502, 503, 504, 506, 507, 509, 510, 511, 513, 517, 520, 521, 522, 523, 526, 527, 529, 530, 531, 532, 533, 535, 547, 548, 552, 558, 559, 564, 565, 570, 572, 576, 582, 584, 592, 595, 597, 599, 600, 601, 602, 605, 607, 608, 609, 611, 612, 614, 617, 624, 625, 626, 627, 629, 630, 631, 632, 634, 635, 637, 638, 640, 641, 642, 643, 646, 650, 651, 656, 657, 660, 661, 664, 670, 680, 690, 706, 720, 733, 761, 762, 763, 764, 765, 766, 767, 774, 777, 778, 779, 780, 781, 783, 784, 785, 790, 792, 793, 794, 795, 801, 802, 803, 805, 806, 807, 813, 822, 823, 824, 826, 832, 836, 839, 840, 843, 855, 863, 869, 872, 874, 875, 879, 890, 900, 903, 907, 918, 922, 923, 924, 930, 931, 940, 943, 944, 949, 950, 951, 952, 954, 955, 957, 958, 960, 961, 964, 968, 969, 975, 979, 983, 984, 986, 987, 988, 992, 993, 996, 997, 998, 1003, 1005, 1006, 1007, 1009, 1010], "66": [4, 197, 206, 285, 343, 374, 391, 426, 497, 597, 677, 747, 748, 759, 845, 853, 936, 954, 966], "880": 4, "60": [4, 6, 16, 56, 69, 77, 85, 182, 194, 200, 202, 203, 223, 228, 247, 252, 298, 311, 320, 340, 374, 378, 415, 422, 678, 763, 954, 964, 984, 995, 998], "11": [4, 8, 13, 19, 70, 76, 89, 90, 136, 141, 154, 155, 166, 182, 183, 184, 187, 202, 213, 219, 236, 244, 245, 251, 262, 263, 265, 277, 283, 290, 293, 294, 307, 311, 316, 320, 322, 340, 343, 344, 352, 359, 374, 377, 378, 381, 415, 422, 447, 448, 449, 450, 461, 466, 482, 483, 577, 615, 621, 635, 680, 686, 687, 688, 742, 743, 744, 764, 767, 781, 784, 791, 818, 875, 904, 918, 946, 950, 952, 964, 968, 969, 975, 979, 986, 988, 993, 997, 1001, 1003, 1004, 1006, 1009, 1010], "0014": 4, "17375": [4, 13], "20": [4, 7, 8, 13, 15, 16, 19, 24, 25, 26, 31, 32, 36, 37, 39, 40, 43, 44, 47, 51, 52, 58, 64, 73, 77, 85, 87, 94, 96, 103, 107, 110, 111, 114, 118, 122, 123, 125, 129, 131, 132, 133, 136, 144, 153, 155, 156, 159, 164, 171, 172, 174, 178, 179, 181, 182, 183, 186, 191, 194, 195, 196, 197, 199, 205, 213, 219, 227, 229, 230, 239, 240, 242, 243, 245, 250, 251, 253, 256, 259, 263, 264, 265, 266, 267, 270, 277, 283, 284, 285, 289, 290, 291, 292, 294, 297, 298, 301, 305, 307, 311, 313, 318, 321, 322, 326, 327, 339, 343, 346, 348, 350, 351, 352, 364, 374, 381, 382, 406, 411, 412, 414, 429, 430, 434, 436, 437, 443, 453, 454, 455, 456, 457, 459, 461, 462, 465, 467, 469, 470, 476, 477, 480, 481, 488, 496, 501, 502, 507, 510, 511, 513, 517, 520, 521, 524, 525, 526, 527, 528, 534, 535, 547, 554, 555, 557, 559, 562, 564, 594, 595, 610, 614, 623, 631, 632, 633, 641, 643, 661, 669, 673, 678, 681, 689, 690, 703, 720, 721, 731, 756, 757, 761, 762, 763, 777, 788, 789, 790, 793, 795, 798, 799, 800, 803, 804, 811, 812, 823, 824, 825, 826, 828, 830, 831, 839, 840, 841, 842, 847, 861, 862, 864, 865, 870, 873, 878, 884, 886, 887, 890, 932, 943, 950, 954, 957, 960, 961, 964, 967, 975, 977, 978, 980, 986, 990, 991, 993, 995, 1001, 1004, 1007, 1009, 1010], "17376": [4, 13], "21": [4, 13, 69, 136, 154, 171, 183, 200, 207, 230, 259, 277, 281, 283, 294, 343, 344, 348, 350, 364, 371, 381, 382, 406, 410, 439, 443, 494, 497, 526, 527, 528, 534, 535, 553, 554, 556, 592, 634, 652, 718, 763, 765, 777, 789, 832, 839, 841, 847, 864, 880, 902, 946, 950, 955, 964, 991, 993, 995, 996, 998, 1002, 1003, 1005], "17377": [4, 13], "22": [4, 13, 19, 39, 99, 105, 106, 149, 150, 151, 154, 155, 156, 199, 207, 222, 230, 256, 261, 277, 279, 283, 287, 290, 293, 298, 316, 322, 346, 351, 364, 371, 402, 413, 437, 443, 453, 454, 460, 461, 469, 480, 489, 496, 502, 507, 510, 511, 522, 523, 524, 525, 526, 528, 529, 530, 531, 532, 533, 534, 535, 559, 574, 592, 593, 597, 599, 610, 612, 616, 618, 620, 623, 624, 626, 628, 630, 634, 653, 657, 667, 669, 678, 721, 733, 742, 747, 748, 752, 763, 764, 768, 777, 782, 784, 786, 787, 788, 789, 790, 791, 792, 793, 810, 812, 814, 816, 817, 818, 823, 824, 825, 827, 830, 846, 857, 866, 868, 869, 870, 871, 872, 874, 875, 876, 877, 897, 898, 946, 954, 964, 975, 991, 993, 995, 998, 1003, 1006, 1008], "56": [4, 13, 43, 191, 200, 204, 213, 352, 611, 612, 617, 625, 626, 627, 646, 678, 699, 954, 964, 991, 995], "8": [4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 19, 24, 25, 26, 29, 30, 32, 34, 40, 41, 42, 45, 47, 50, 52, 57, 59, 61, 62, 66, 68, 70, 71, 76, 79, 83, 84, 85, 87, 88, 90, 91, 92, 95, 97, 101, 104, 106, 107, 111, 113, 114, 116, 120, 123, 124, 127, 135, 136, 139, 141, 143, 144, 146, 147, 150, 153, 154, 155, 157, 159, 161, 162, 167, 168, 173, 176, 182, 183, 186, 190, 192, 198, 200, 202, 203, 204, 206, 207, 210, 214, 215, 217, 221, 222, 223, 225, 226, 227, 229, 230, 231, 234, 235, 237, 238, 239, 240, 242, 243, 244, 246, 249, 250, 256, 258, 261, 263, 267, 271, 274, 276, 277, 279, 281, 282, 283, 284, 285, 288, 293, 297, 298, 299, 301, 302, 305, 308, 312, 313, 315, 316, 317, 320, 321, 322, 327, 329, 334, 340, 341, 343, 344, 346, 351, 352, 364, 366, 367, 372, 374, 378, 379, 381, 382, 383, 385, 387, 404, 408, 409, 412, 414, 415, 417, 420, 421, 422, 427, 428, 434, 435, 436, 437, 438, 439, 440, 441, 444, 445, 446, 448, 449, 450, 452, 455, 461, 463, 467, 468, 479, 481, 496, 499, 503, 505, 508, 510, 512, 514, 515, 520, 521, 530, 535, 547, 553, 554, 555, 556, 569, 570, 593, 594, 601, 602, 613, 623, 635, 641, 654, 657, 658, 659, 660, 664, 667, 671, 672, 674, 675, 680, 686, 691, 692, 693, 705, 709, 710, 714, 715, 717, 746, 747, 749, 752, 753, 754, 755, 759, 761, 764, 765, 770, 773, 780, 781, 784, 785, 792, 793, 795, 804, 806, 807, 813, 823, 824, 825, 831, 838, 845, 847, 868, 871, 901, 902, 903, 907, 923, 929, 930, 931, 932, 933, 934, 935, 943, 944, 950, 951, 952, 954, 957, 962, 964, 968, 978, 979, 983, 984, 985, 986, 987, 991, 992, 993, 996, 997, 998, 1002, 1003, 1008, 1009, 1011], "9981": 4, "17378": [4, 13], "23": [4, 13, 19, 25, 32, 47, 90, 119, 136, 151, 182, 211, 221, 223, 230, 241, 277, 283, 285, 287, 290, 291, 292, 294, 295, 298, 301, 343, 344, 346, 352, 364, 366, 367, 381, 387, 397, 405, 412, 417, 419, 427, 430, 432, 433, 440, 443, 444, 445, 447, 448, 449, 455, 457, 465, 466, 467, 469, 470, 475, 477, 479, 487, 489, 503, 504, 505, 508, 512, 519, 521, 523, 525, 526, 527, 530, 533, 534, 535, 572, 573, 576, 592, 595, 597, 600, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 632, 634, 635, 637, 638, 640, 643, 644, 645, 646, 682, 694, 742, 792, 798, 799, 800, 809, 817, 824, 827, 839, 846, 854, 855, 864, 867, 869, 872, 875, 877, 884, 886, 887, 897, 898, 903, 954, 975, 991, 993, 995, 996, 1002, 1003, 1004, 1007], "65": [4, 31, 155, 182, 248, 285, 374, 404, 467, 482, 562, 664, 705, 756, 757, 961, 984, 995, 996, 997], "17379": [4, 13, 1007], "row": [4, 19, 20, 21, 24, 26, 32, 41, 57, 71, 83, 85, 107, 110, 120, 123, 149, 182, 183, 184, 210, 213, 219, 220, 281, 328, 333, 341, 348, 355, 359, 360, 371, 374, 377, 382, 389, 407, 408, 412, 414, 415, 416, 418, 421, 422, 424, 429, 433, 453, 455, 456, 457, 458, 459, 460, 465, 466, 467, 469, 470, 475, 476, 478, 499, 507, 513, 516, 555, 556, 585, 597, 608, 611, 612, 617, 618, 625, 626, 627, 628, 646, 649, 657, 661, 662, 675, 683, 684, 689, 722, 723, 727, 730, 732, 733, 734, 735, 737, 738, 740, 742, 743, 744, 745, 761, 762, 795, 801, 802, 803, 804, 805, 811, 814, 815, 816, 817, 818, 821, 832, 836, 838, 839, 841, 851, 852, 853, 856, 857, 860, 864, 882, 886, 887, 903, 925, 928, 932, 934, 936, 937, 940, 941, 943, 944, 946, 948, 950, 952, 954, 955, 957, 964, 965, 968, 969, 974, 1002, 1003, 1004, 1005, 1010], "onli": [4, 7, 11, 14, 15, 20, 23, 24, 25, 26, 28, 31, 32, 34, 36, 37, 42, 46, 50, 52, 55, 63, 66, 67, 68, 70, 71, 76, 83, 90, 91, 93, 97, 101, 103, 108, 109, 110, 111, 113, 121, 122, 131, 132, 133, 136, 138, 140, 143, 145, 147, 150, 151, 153, 154, 155, 159, 160, 165, 166, 171, 178, 182, 183, 185, 188, 190, 191, 200, 202, 203, 209, 211, 213, 215, 216, 220, 223, 225, 226, 227, 230, 231, 235, 237, 239, 241, 242, 245, 246, 247, 248, 250, 251, 256, 258, 259, 265, 267, 270, 272, 276, 279, 280, 284, 285, 290, 291, 297, 298, 300, 304, 305, 308, 312, 313, 316, 317, 320, 321, 322, 324, 325, 328, 329, 333, 334, 335, 339, 340, 341, 343, 344, 346, 348, 350, 351, 352, 353, 354, 355, 358, 360, 361, 364, 365, 368, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 389, 390, 402, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 424, 426, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 447, 448, 449, 450, 454, 455, 456, 457, 459, 461, 462, 465, 466, 467, 468, 469, 470, 473, 474, 475, 477, 481, 484, 488, 489, 493, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 546, 547, 548, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 600, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 664, 672, 674, 678, 690, 693, 694, 698, 700, 701, 702, 705, 706, 707, 720, 722, 724, 738, 742, 743, 744, 745, 747, 748, 751, 752, 756, 757, 758, 761, 762, 763, 764, 765, 766, 767, 769, 770, 772, 777, 781, 785, 787, 788, 789, 790, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 878, 879, 880, 882, 884, 885, 886, 887, 890, 892, 895, 903, 905, 908, 910, 915, 920, 943, 944, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 957, 958, 959, 960, 961, 962, 964, 965, 966, 968, 969, 970, 973, 974, 975, 978, 986, 987, 988, 992, 995, 996, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1007, 1009, 1010, 1011, 1012, 1013], "present": [4, 5, 13, 40, 46, 85, 87, 94, 106, 107, 114, 117, 118, 135, 136, 144, 147, 161, 164, 166, 171, 182, 209, 212, 216, 230, 237, 242, 245, 248, 249, 259, 279, 282, 284, 321, 343, 344, 348, 351, 358, 360, 365, 374, 376, 379, 381, 382, 392, 393, 396, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 429, 433, 434, 435, 436, 437, 438, 439, 440, 441, 454, 455, 456, 457, 461, 465, 466, 467, 468, 469, 470, 475, 496, 498, 499, 500, 501, 502, 503, 504, 505, 507, 508, 509, 514, 515, 526, 527, 528, 531, 534, 535, 546, 547, 548, 553, 554, 556, 582, 592, 593, 594, 595, 615, 619, 642, 653, 654, 655, 656, 677, 693, 694, 702, 733, 747, 748, 751, 761, 762, 763, 766, 767, 775, 777, 790, 808, 809, 810, 812, 814, 816, 817, 818, 825, 830, 838, 839, 840, 841, 842, 844, 847, 858, 859, 870, 878, 880, 881, 903, 938, 953, 954, 955, 956, 961, 964, 972, 974, 998, 1003, 1005, 1006, 1007, 1009, 1010, 1012], "date": [4, 66, 117, 136, 143, 155, 341, 343, 346, 350, 361, 375, 974], "datetim": [4, 17, 143, 155], "panda": [4, 12, 24, 66, 67, 68, 101, 107, 108, 111, 114, 117, 119, 143, 149, 153, 154, 155, 156, 157, 161, 166, 171, 182, 186, 190, 200, 219, 220, 223, 230, 237, 239, 240, 242, 250, 251, 256, 284, 285, 286, 288, 291, 292, 316, 320, 321, 340, 341, 344, 345, 346, 348, 349, 360, 364, 367, 375, 398, 407, 408, 410, 412, 414, 429, 431, 433, 447, 448, 449, 450, 454, 455, 456, 457, 461, 465, 466, 467, 469, 470, 475, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 514, 526, 527, 531, 532, 533, 534, 535, 546, 547, 548, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 592, 593, 594, 595, 597, 598, 600, 603, 604, 605, 606, 607, 653, 654, 657, 763, 766, 767, 777, 792, 810, 815, 818, 822, 825, 826, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 858, 859, 864, 882, 943, 944, 964, 973, 974, 988, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "http": [4, 6, 7, 8, 12, 17, 23, 67, 115, 122, 136, 147, 150, 159, 182, 190, 198, 200, 207, 210, 256, 258, 259, 276, 340, 341, 343, 344, 346, 350, 351, 352, 354, 358, 360, 364, 374, 378, 383, 407, 414, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 467, 473, 474, 475, 495, 496, 499, 502, 506, 560, 601, 606, 609, 614, 623, 629, 631, 632, 633, 636, 641, 644, 647, 648, 650, 651, 657, 660, 670, 686, 687, 688, 722, 723, 733, 801, 803, 804, 805, 808, 809, 814, 815, 816, 817, 822, 844, 859, 860, 861, 874, 875, 950, 952, 954, 967, 970, 984, 1005], "pydata": [4, 364, 367, 972, 978], "org": [4, 12, 14, 15, 17, 23, 25, 30, 34, 43, 45, 58, 63, 67, 68, 106, 108, 109, 118, 119, 122, 125, 133, 143, 147, 154, 155, 156, 159, 163, 173, 174, 182, 190, 198, 200, 203, 210, 211, 212, 214, 216, 220, 221, 222, 223, 230, 237, 239, 240, 242, 246, 251, 258, 276, 277, 285, 289, 290, 292, 293, 295, 297, 298, 299, 302, 320, 321, 322, 328, 334, 339, 344, 346, 349, 352, 354, 361, 378, 560, 601, 633, 636, 641, 660, 670, 733, 808, 809, 814, 815, 816, 817, 844, 860, 874, 875, 950, 954, 970, 990, 1003, 1007], "stabl": [4, 26, 147, 154, 176, 180, 184, 259, 289, 316, 321, 344, 346, 350, 352, 355, 360, 364, 378, 382, 386, 436, 437, 443, 498, 620, 637, 639, 652, 657, 688, 716, 902, 903, 950, 956, 957, 964, 974, 991, 995, 996, 1001, 1006, 1008, 1012], "user_guid": 4, "timeseri": 4, "html": [4, 8, 12, 25, 67, 68, 106, 108, 109, 118, 119, 122, 125, 133, 136, 143, 147, 154, 155, 156, 159, 163, 210, 212, 216, 220, 221, 222, 223, 230, 237, 239, 240, 246, 251, 277, 285, 289, 290, 292, 293, 295, 299, 328, 341, 343, 346, 347, 349, 350, 354, 375, 378, 382, 388, 452, 473, 474, 623, 801, 805, 899, 952, 973, 974, 1006, 1007, 1008, 1009, 1010, 1012], "compon": [4, 5, 17, 41, 55, 59, 66, 69, 78, 79, 83, 88, 89, 91, 92, 93, 94, 95, 97, 120, 128, 143, 150, 151, 153, 166, 202, 213, 214, 217, 225, 226, 229, 230, 231, 238, 240, 259, 260, 261, 262, 270, 271, 277, 284, 290, 333, 338, 341, 346, 348, 352, 355, 358, 370, 373, 374, 375, 377, 382, 384, 386, 388, 402, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 427, 428, 430, 434, 435, 436, 437, 438, 439, 440, 441, 447, 448, 449, 450, 467, 469, 480, 486, 491, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 538, 546, 547, 548, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 596, 600, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 653, 654, 655, 656, 657, 660, 761, 762, 763, 766, 767, 777, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 856, 857, 858, 859, 860, 861, 862, 863, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 902, 903, 946, 951, 953, 964, 966, 969, 973, 974, 975, 976, 978, 982, 988, 989, 990, 995, 997, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "now": [4, 5, 7, 13, 17, 20, 50, 54, 67, 80, 92, 101, 102, 106, 108, 110, 111, 114, 115, 122, 125, 136, 138, 143, 144, 145, 150, 153, 154, 155, 156, 159, 161, 163, 168, 170, 171, 183, 184, 186, 206, 214, 216, 235, 239, 242, 250, 251, 256, 262, 284, 289, 290, 292, 293, 294, 295, 299, 308, 320, 321, 322, 329, 333, 335, 341, 346, 347, 348, 352, 358, 359, 360, 364, 371, 374, 378, 379, 381, 382, 386, 458, 473, 474, 477, 501, 514, 544, 545, 547, 592, 595, 614, 618, 623, 628, 649, 690, 720, 761, 762, 766, 767, 798, 813, 825, 826, 929, 943, 944, 950, 954, 960, 963, 964, 969, 970, 972, 974, 979, 986, 988, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "introspect": [4, 6, 67, 352, 524, 525, 553, 554, 556, 964, 984], "value_count": [4, 13, 155, 256], "11413": 4, "4544": 4, "rain": [4, 13, 155, 950], "1419": 4, "heavy_rain": [4, 155], "name": [4, 6, 7, 9, 10, 11, 12, 13, 17, 19, 24, 26, 28, 29, 34, 41, 42, 55, 59, 67, 69, 71, 77, 88, 93, 104, 105, 106, 107, 111, 114, 117, 122, 154, 155, 156, 171, 180, 182, 184, 186, 188, 189, 197, 199, 200, 202, 203, 209, 215, 216, 218, 219, 223, 227, 234, 236, 237, 240, 242, 243, 246, 248, 249, 256, 259, 267, 268, 274, 275, 281, 283, 285, 292, 293, 301, 313, 320, 321, 322, 334, 335, 340, 341, 344, 346, 348, 350, 351, 353, 354, 360, 364, 365, 368, 371, 374, 378, 381, 382, 384, 388, 390, 395, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 422, 429, 430, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 447, 448, 449, 450, 453, 454, 455, 456, 457, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 475, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 541, 546, 547, 548, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 597, 598, 599, 600, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 652, 653, 654, 655, 656, 657, 662, 663, 664, 665, 667, 673, 674, 676, 678, 696, 697, 706, 743, 744, 761, 762, 763, 764, 765, 766, 767, 769, 770, 772, 775, 777, 781, 785, 789, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 858, 859, 861, 862, 863, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 878, 879, 880, 885, 886, 887, 890, 894, 895, 896, 898, 910, 911, 912, 914, 917, 924, 938, 942, 943, 948, 950, 954, 955, 961, 962, 964, 970, 974, 983, 984, 986, 988, 995, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "dtype": [4, 8, 10, 11, 13, 17, 45, 46, 50, 62, 66, 67, 111, 113, 115, 116, 118, 139, 140, 141, 150, 154, 155, 184, 200, 223, 225, 237, 243, 247, 256, 266, 272, 285, 291, 292, 294, 298, 328, 340, 341, 346, 348, 358, 360, 370, 375, 378, 381, 389, 390, 392, 395, 407, 408, 412, 413, 414, 415, 416, 418, 424, 429, 431, 432, 434, 437, 439, 453, 454, 455, 456, 461, 462, 463, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 479, 487, 507, 513, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 546, 547, 550, 551, 553, 554, 556, 558, 559, 566, 567, 571, 592, 593, 594, 595, 597, 598, 605, 606, 609, 610, 611, 617, 621, 622, 625, 626, 627, 628, 629, 630, 636, 638, 640, 662, 664, 670, 679, 680, 695, 702, 705, 719, 750, 769, 787, 789, 790, 802, 806, 807, 809, 817, 831, 837, 839, 840, 846, 847, 849, 851, 852, 853, 854, 855, 856, 857, 860, 868, 869, 870, 871, 872, 874, 875, 876, 877, 883, 884, 886, 887, 919, 929, 930, 931, 932, 935, 941, 944, 964, 967, 969, 979, 996, 998, 999, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "int64": [4, 13, 14, 51, 67, 154, 155, 256, 285, 295, 328, 360, 382, 392, 407, 413, 415, 461, 553, 605, 611, 612, 617, 618, 679, 680, 802, 831, 884, 940, 1003, 1006, 1008, 1010, 1011, 1012], "cannot": [4, 13, 37, 53, 71, 77, 87, 92, 109, 154, 155, 166, 182, 200, 216, 279, 308, 316, 335, 345, 347, 352, 358, 360, 361, 374, 375, 376, 378, 379, 381, 382, 384, 430, 486, 503, 504, 505, 508, 512, 575, 578, 579, 580, 582, 584, 585, 587, 588, 590, 616, 620, 647, 657, 676, 682, 742, 766, 767, 813, 814, 816, 817, 818, 826, 827, 836, 837, 848, 884, 886, 887, 943, 944, 948, 950, 951, 955, 960, 964, 969, 970, 974, 978, 983, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "train": [4, 5, 6, 7, 8, 10, 11, 13, 16, 23, 25, 26, 28, 29, 30, 31, 51, 53, 55, 61, 62, 66, 67, 71, 79, 80, 87, 90, 91, 92, 99, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 117, 119, 122, 123, 124, 127, 133, 138, 139, 140, 143, 144, 145, 146, 147, 151, 153, 154, 155, 156, 157, 159, 165, 166, 168, 170, 171, 173, 174, 175, 177, 178, 181, 182, 183, 184, 189, 190, 191, 194, 196, 197, 200, 209, 212, 214, 218, 227, 229, 232, 233, 234, 235, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 258, 259, 262, 265, 266, 267, 268, 270, 272, 274, 275, 276, 279, 281, 283, 284, 288, 291, 295, 296, 297, 298, 301, 302, 304, 305, 307, 315, 316, 322, 323, 326, 327, 329, 333, 334, 335, 338, 341, 343, 348, 351, 358, 359, 360, 368, 370, 372, 374, 375, 376, 377, 379, 381, 382, 383, 384, 386, 402, 405, 406, 408, 409, 412, 414, 416, 417, 418, 419, 424, 430, 434, 435, 437, 438, 439, 440, 441, 447, 448, 449, 450, 452, 453, 454, 458, 461, 462, 463, 465, 469, 489, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 575, 576, 592, 593, 595, 596, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 649, 652, 653, 654, 656, 657, 661, 668, 705, 752, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 822, 823, 824, 826, 831, 832, 835, 836, 839, 840, 844, 845, 846, 847, 851, 852, 854, 855, 856, 857, 858, 859, 861, 862, 863, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 880, 928, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 958, 959, 960, 961, 962, 964, 968, 969, 970, 973, 974, 975, 976, 978, 980, 983, 984, 990, 992, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "learn": [4, 6, 7, 8, 9, 10, 13, 15, 16, 17, 20, 24, 25, 26, 29, 30, 32, 33, 34, 45, 46, 49, 50, 52, 53, 64, 66, 67, 71, 76, 77, 86, 92, 96, 99, 101, 104, 105, 106, 107, 109, 110, 116, 117, 119, 120, 121, 122, 127, 128, 129, 133, 136, 138, 141, 143, 147, 149, 150, 152, 156, 157, 158, 168, 170, 171, 177, 182, 183, 184, 186, 196, 200, 205, 206, 207, 208, 209, 211, 213, 214, 217, 218, 219, 221, 222, 223, 232, 235, 236, 238, 239, 242, 244, 245, 247, 251, 253, 256, 259, 261, 263, 264, 265, 266, 267, 268, 272, 273, 276, 277, 279, 280, 284, 285, 286, 287, 296, 300, 302, 307, 312, 314, 316, 320, 321, 322, 324, 325, 326, 327, 329, 334, 338, 339, 340, 341, 343, 345, 349, 352, 353, 354, 355, 359, 360, 363, 365, 368, 369, 370, 371, 372, 374, 375, 376, 378, 380, 382, 383, 384, 388, 389, 391, 392, 393, 394, 396, 397, 398, 402, 403, 404, 407, 408, 411, 412, 414, 415, 422, 429, 430, 432, 433, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 467, 468, 469, 473, 474, 475, 477, 479, 480, 481, 482, 483, 485, 486, 487, 489, 490, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 514, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 530, 531, 532, 536, 541, 546, 547, 548, 549, 552, 553, 554, 555, 556, 558, 559, 564, 567, 568, 575, 576, 579, 584, 587, 591, 593, 595, 597, 599, 603, 605, 606, 608, 609, 610, 611, 613, 617, 622, 623, 633, 634, 641, 642, 643, 645, 653, 654, 655, 656, 657, 661, 665, 666, 667, 673, 678, 682, 683, 686, 687, 688, 690, 696, 699, 705, 706, 707, 712, 720, 742, 743, 744, 749, 752, 759, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 800, 801, 802, 803, 804, 805, 808, 810, 815, 822, 823, 824, 825, 826, 827, 829, 831, 833, 836, 838, 839, 840, 841, 844, 845, 846, 847, 850, 858, 859, 861, 862, 863, 864, 866, 867, 868, 871, 874, 875, 876, 877, 889, 897, 898, 920, 921, 922, 943, 944, 946, 947, 948, 950, 952, 953, 954, 955, 956, 957, 958, 960, 961, 962, 964, 965, 968, 969, 970, 971, 972, 975, 977, 981, 983, 984, 990, 992, 993, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "simplifi": [4, 67, 170, 308, 345, 347, 351, 374, 377, 480, 527, 825, 826, 954, 956, 964], "represent": [4, 12, 17, 20, 25, 50, 67, 68, 87, 90, 106, 108, 109, 118, 119, 120, 122, 125, 133, 143, 154, 156, 159, 163, 166, 202, 203, 204, 210, 212, 216, 220, 221, 222, 223, 230, 237, 239, 240, 246, 251, 256, 269, 277, 285, 290, 292, 293, 295, 299, 321, 322, 328, 329, 338, 340, 349, 360, 368, 374, 375, 379, 380, 381, 388, 428, 496, 500, 502, 505, 507, 513, 531, 553, 555, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 595, 608, 611, 617, 623, 624, 625, 627, 631, 632, 633, 641, 642, 643, 733, 761, 762, 769, 785, 822, 835, 839, 840, 844, 846, 859, 866, 878, 880, 883, 899, 920, 946, 951, 953, 955, 957, 958, 959, 961, 964, 969, 974, 979, 980, 982, 986, 988, 995, 996, 999, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "collaps": [4, 155, 219, 279, 308, 358], "those": [4, 7, 12, 17, 19, 52, 57, 67, 102, 114, 117, 136, 147, 153, 155, 156, 157, 182, 184, 186, 200, 207, 213, 216, 218, 219, 231, 233, 239, 242, 245, 256, 275, 279, 284, 305, 308, 320, 321, 322, 333, 334, 340, 346, 348, 350, 351, 352, 353, 358, 360, 361, 364, 371, 372, 374, 378, 379, 381, 382, 384, 413, 415, 426, 429, 433, 459, 460, 461, 468, 522, 523, 529, 530, 534, 535, 546, 657, 662, 677, 683, 700, 763, 766, 767, 775, 777, 784, 808, 809, 810, 812, 814, 815, 816, 817, 818, 866, 867, 868, 871, 874, 875, 876, 877, 914, 943, 946, 950, 953, 954, 956, 957, 958, 961, 964, 970, 972, 973, 978, 979, 988, 995, 998, 1001, 1002, 1003, 1008, 1009, 1010, 1011, 1012], "astyp": [4, 14, 34, 38, 41, 42, 50, 57, 59, 63, 76, 93, 111, 113, 129, 153, 155, 172, 173, 200, 205, 215, 219, 250, 259, 286, 382, 944, 950, 1002], "object": [4, 11, 14, 15, 19, 25, 26, 41, 47, 59, 63, 66, 67, 90, 99, 122, 127, 134, 135, 143, 151, 155, 166, 178, 182, 198, 200, 208, 216, 220, 222, 223, 237, 246, 248, 249, 251, 272, 285, 291, 292, 294, 295, 297, 321, 322, 329, 339, 340, 341, 346, 347, 349, 351, 352, 353, 355, 359, 360, 361, 365, 368, 374, 375, 376, 379, 382, 383, 384, 388, 390, 395, 397, 399, 400, 401, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 422, 429, 430, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 443, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 546, 547, 548, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 652, 653, 654, 655, 656, 657, 658, 659, 662, 663, 664, 665, 666, 667, 676, 683, 696, 697, 706, 722, 723, 745, 746, 753, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 858, 859, 861, 862, 863, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 878, 879, 881, 886, 887, 888, 889, 890, 893, 897, 899, 909, 910, 911, 912, 913, 914, 915, 917, 919, 920, 922, 939, 940, 942, 950, 951, 952, 953, 957, 960, 961, 964, 967, 968, 969, 973, 974, 975, 979, 980, 982, 983, 986, 988, 990, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "replac": [4, 24, 75, 91, 101, 117, 138, 145, 149, 155, 168, 183, 242, 259, 281, 286, 290, 310, 344, 346, 348, 350, 352, 355, 360, 368, 375, 378, 381, 382, 406, 410, 429, 468, 480, 520, 521, 528, 547, 553, 554, 555, 556, 572, 573, 592, 595, 599, 604, 606, 692, 749, 769, 775, 777, 785, 825, 826, 829, 849, 862, 869, 923, 925, 928, 943, 944, 946, 950, 954, 964, 969, 970, 973, 974, 995, 996, 997, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1010, 1011, 1012], "to_replac": [4, 155], "valu": [4, 5, 7, 11, 12, 13, 14, 16, 17, 19, 20, 21, 25, 26, 30, 34, 37, 39, 41, 43, 50, 52, 57, 58, 59, 63, 67, 69, 71, 73, 75, 77, 87, 90, 97, 99, 101, 103, 105, 106, 107, 108, 109, 111, 114, 115, 118, 119, 121, 122, 131, 132, 135, 138, 141, 142, 144, 146, 153, 154, 155, 156, 157, 159, 161, 162, 164, 166, 168, 170, 171, 172, 173, 175, 180, 182, 183, 184, 186, 188, 197, 200, 201, 204, 205, 209, 210, 211, 212, 213, 214, 215, 219, 222, 223, 225, 231, 233, 235, 237, 239, 240, 242, 244, 245, 246, 248, 250, 251, 252, 254, 259, 262, 272, 274, 275, 277, 279, 280, 281, 282, 283, 284, 285, 286, 290, 300, 308, 312, 313, 316, 320, 321, 322, 324, 329, 333, 334, 335, 338, 339, 340, 341, 343, 347, 348, 349, 351, 352, 353, 355, 358, 359, 360, 363, 364, 365, 371, 372, 373, 374, 375, 376, 377, 378, 382, 383, 384, 385, 386, 387, 388, 397, 398, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 447, 448, 449, 450, 452, 455, 456, 458, 461, 462, 463, 466, 473, 474, 476, 478, 479, 480, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 546, 547, 548, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 662, 663, 664, 665, 666, 667, 669, 670, 672, 673, 674, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 699, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 733, 735, 738, 742, 743, 744, 745, 746, 747, 748, 749, 751, 752, 753, 754, 755, 756, 757, 758, 759, 761, 762, 763, 764, 765, 766, 767, 768, 769, 772, 774, 775, 777, 780, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 880, 881, 883, 884, 885, 886, 887, 890, 891, 892, 893, 895, 903, 905, 911, 914, 915, 916, 917, 918, 922, 930, 931, 932, 943, 946, 947, 948, 949, 950, 951, 953, 955, 956, 957, 958, 959, 960, 961, 965, 967, 968, 969, 975, 976, 978, 979, 984, 986, 987, 988, 989, 990, 992, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "1422": 4, "expect": [4, 5, 10, 13, 23, 34, 41, 50, 80, 85, 92, 101, 104, 106, 108, 111, 114, 117, 133, 138, 144, 151, 152, 156, 168, 173, 182, 183, 184, 186, 190, 200, 213, 216, 219, 220, 226, 227, 230, 231, 246, 259, 284, 316, 320, 321, 329, 333, 334, 346, 348, 350, 351, 352, 353, 354, 355, 358, 359, 360, 361, 363, 365, 370, 372, 374, 375, 376, 378, 381, 382, 383, 397, 429, 430, 432, 433, 434, 447, 448, 449, 461, 488, 497, 501, 503, 506, 517, 519, 520, 521, 522, 523, 525, 527, 528, 529, 530, 531, 532, 533, 535, 537, 553, 554, 556, 560, 562, 571, 576, 592, 597, 598, 600, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 625, 626, 627, 628, 629, 630, 632, 635, 637, 638, 639, 640, 643, 644, 660, 669, 670, 681, 699, 752, 758, 799, 800, 801, 802, 803, 804, 805, 808, 809, 810, 812, 816, 817, 818, 819, 824, 827, 832, 839, 840, 843, 846, 847, 856, 857, 864, 866, 867, 868, 869, 870, 871, 872, 875, 877, 917, 943, 950, 953, 954, 956, 960, 964, 968, 969, 970, 975, 977, 984, 987, 988, 990, 995, 996, 997, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "balanc": [4, 6, 13, 26, 50, 63, 68, 101, 107, 112, 135, 151, 186, 187, 232, 237, 240, 242, 243, 279, 335, 358, 360, 372, 378, 379, 381, 467, 480, 499, 505, 506, 512, 522, 526, 529, 605, 623, 624, 631, 633, 639, 640, 641, 668, 673, 693, 707, 746, 751, 763, 764, 781, 826, 866, 868, 871, 874, 876, 891, 892, 943, 969, 970, 975, 984, 995, 997, 1000, 1001, 1004, 1005, 1009], "fall": [4, 13, 114, 117, 145, 238, 239, 346, 348, 373, 374, 382, 399, 411, 412, 473, 474, 691, 692, 758, 843, 855, 953, 954, 964, 979, 987, 1004], "4496": [4, 13], "4409": [4, 13], "4242": [4, 13], "winter": [4, 13], "4232": [4, 13], "order": [4, 14, 20, 23, 26, 44, 52, 61, 62, 68, 73, 82, 96, 109, 110, 111, 115, 117, 129, 143, 153, 154, 157, 159, 171, 175, 178, 182, 183, 188, 196, 200, 204, 213, 216, 219, 223, 227, 234, 237, 239, 246, 258, 277, 279, 284, 285, 286, 290, 291, 316, 320, 322, 329, 333, 334, 341, 346, 348, 351, 352, 355, 360, 364, 365, 368, 374, 375, 376, 378, 379, 380, 381, 382, 384, 386, 405, 408, 411, 412, 414, 415, 420, 421, 422, 424, 429, 453, 454, 455, 460, 462, 480, 499, 500, 504, 505, 506, 508, 512, 516, 518, 520, 521, 522, 523, 524, 528, 529, 530, 531, 532, 546, 553, 556, 558, 559, 562, 571, 572, 573, 575, 587, 592, 596, 605, 623, 624, 630, 641, 650, 651, 653, 654, 658, 662, 664, 665, 667, 669, 677, 678, 683, 690, 693, 694, 702, 704, 705, 706, 718, 720, 742, 746, 747, 748, 751, 752, 753, 758, 763, 764, 766, 767, 768, 770, 774, 777, 781, 782, 787, 794, 795, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 816, 823, 826, 837, 839, 840, 841, 845, 846, 847, 850, 851, 852, 854, 855, 856, 857, 868, 869, 870, 871, 872, 874, 875, 876, 877, 878, 879, 880, 881, 886, 887, 892, 903, 918, 923, 944, 950, 951, 954, 955, 957, 958, 964, 967, 968, 969, 970, 974, 983, 985, 986, 988, 995, 997, 998, 999, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "sensit": [4, 41, 52, 75, 76, 104, 114, 155, 184, 185, 186, 209, 219, 279, 308, 334, 335, 361, 376, 381, 417, 427, 657, 677, 678, 752, 846, 949, 950, 951, 953, 954, 958, 960, 968, 969, 979, 987, 999], "splitter": [4, 294, 295, 360, 365, 378, 402, 437, 529, 530, 532, 533, 559, 567, 612, 616, 618, 620, 624, 626, 628, 630, 638, 640, 763, 765, 766, 767, 768, 769, 777, 778, 779, 782, 783, 785, 786, 787, 788, 789, 790, 791, 793, 797, 800, 874, 875, 876, 877, 970, 974, 1001, 1002, 1003, 1004, 1011, 1012, 1013], "evalu": [4, 5, 6, 10, 11, 23, 30, 33, 35, 39, 40, 46, 52, 61, 67, 68, 90, 101, 107, 108, 109, 111, 112, 114, 117, 131, 132, 141, 151, 157, 159, 162, 171, 184, 189, 200, 208, 232, 233, 236, 237, 238, 239, 242, 244, 245, 246, 248, 250, 251, 253, 258, 266, 268, 272, 279, 284, 286, 290, 294, 295, 301, 308, 312, 320, 329, 339, 341, 348, 352, 360, 363, 373, 375, 382, 383, 384, 412, 414, 429, 431, 453, 456, 457, 458, 461, 474, 485, 501, 516, 526, 527, 528, 532, 533, 556, 559, 567, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 592, 596, 597, 598, 599, 612, 618, 624, 638, 640, 662, 664, 666, 667, 668, 669, 670, 676, 678, 679, 680, 682, 683, 690, 691, 700, 701, 706, 718, 719, 720, 721, 750, 759, 761, 762, 763, 766, 767, 769, 777, 785, 787, 788, 789, 790, 791, 792, 793, 797, 803, 806, 807, 812, 824, 826, 827, 833, 836, 839, 840, 844, 845, 846, 851, 852, 854, 855, 856, 857, 868, 871, 874, 889, 897, 928, 946, 950, 952, 956, 957, 960, 961, 962, 965, 968, 970, 973, 975, 978, 979, 980, 983, 984, 986, 989, 990, 995, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008], "realist": [4, 8, 241, 248, 249, 305, 341, 954], "gap": [4, 13, 117, 320, 341, 378, 436, 437, 443, 553, 611, 612, 617, 618, 625, 626, 627, 628, 646, 649, 784, 874, 875, 876, 877, 950, 951, 1003, 1007, 1009], "between": [4, 5, 8, 9, 11, 12, 13, 20, 32, 34, 35, 36, 37, 39, 40, 50, 57, 58, 63, 79, 83, 90, 92, 95, 101, 104, 107, 111, 112, 114, 117, 131, 138, 143, 144, 146, 151, 153, 154, 155, 156, 161, 166, 168, 173, 177, 178, 182, 183, 184, 186, 187, 190, 200, 202, 209, 214, 216, 219, 232, 235, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 251, 256, 258, 261, 265, 266, 268, 269, 279, 284, 286, 291, 300, 308, 312, 315, 316, 320, 321, 322, 328, 329, 333, 334, 341, 346, 348, 355, 358, 359, 360, 361, 365, 368, 371, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 395, 405, 406, 409, 410, 411, 412, 415, 417, 418, 419, 421, 422, 423, 428, 434, 435, 436, 437, 438, 439, 440, 441, 447, 448, 449, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 467, 479, 480, 486, 489, 492, 499, 501, 502, 503, 504, 505, 506, 511, 512, 514, 518, 519, 524, 525, 527, 528, 529, 530, 549, 553, 555, 556, 557, 558, 559, 560, 561, 563, 564, 565, 567, 569, 570, 571, 572, 573, 574, 576, 585, 592, 597, 598, 599, 604, 607, 610, 611, 612, 617, 618, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 635, 641, 643, 644, 646, 649, 653, 655, 657, 659, 660, 661, 664, 666, 668, 669, 670, 672, 674, 675, 679, 680, 681, 682, 684, 688, 689, 690, 693, 694, 695, 698, 700, 701, 707, 716, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 750, 751, 756, 757, 759, 760, 761, 762, 763, 764, 765, 766, 768, 772, 780, 781, 782, 783, 784, 791, 792, 794, 796, 808, 809, 810, 812, 813, 814, 816, 817, 818, 819, 820, 823, 824, 830, 833, 834, 836, 837, 839, 840, 843, 844, 845, 847, 852, 855, 856, 860, 866, 867, 871, 874, 875, 876, 877, 879, 900, 911, 912, 923, 943, 946, 948, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 964, 965, 966, 968, 969, 970, 971, 974, 975, 986, 987, 995, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "side": [4, 16, 26, 56, 114, 175, 186, 200, 204, 212, 279, 312, 320, 329, 341, 358, 372, 375, 378, 379, 382, 391, 397, 480, 950, 951, 954, 956, 969, 1004], "split": [4, 5, 6, 11, 13, 15, 17, 23, 25, 26, 29, 30, 66, 92, 101, 106, 107, 108, 110, 112, 113, 114, 115, 116, 117, 118, 127, 132, 136, 153, 154, 157, 166, 177, 178, 182, 185, 190, 200, 210, 216, 219, 226, 227, 233, 234, 237, 239, 244, 246, 249, 256, 262, 268, 274, 276, 280, 281, 286, 292, 294, 300, 308, 320, 322, 328, 341, 346, 353, 359, 360, 364, 365, 372, 374, 379, 381, 382, 383, 402, 407, 408, 437, 438, 444, 445, 462, 496, 502, 504, 507, 511, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 553, 554, 556, 559, 567, 612, 616, 618, 620, 626, 628, 630, 638, 640, 660, 669, 670, 682, 695, 701, 721, 759, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 797, 800, 806, 807, 823, 824, 847, 851, 852, 854, 855, 856, 857, 874, 875, 876, 877, 925, 943, 946, 950, 951, 957, 960, 961, 962, 964, 968, 970, 974, 979, 983, 984, 986, 987, 988, 990, 995, 998, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "limit": [4, 8, 17, 26, 34, 39, 54, 63, 77, 101, 108, 109, 115, 122, 149, 154, 155, 156, 161, 182, 183, 199, 213, 246, 281, 285, 291, 316, 322, 329, 334, 347, 348, 351, 358, 360, 361, 372, 374, 377, 379, 383, 411, 428, 433, 524, 525, 526, 527, 597, 615, 623, 624, 644, 647, 648, 653, 742, 784, 814, 816, 817, 818, 839, 840, 864, 868, 869, 870, 871, 872, 922, 943, 950, 951, 953, 954, 961, 962, 964, 974, 979, 990, 1003, 1005, 1008, 1009, 1012], "cv": [4, 12, 13, 23, 24, 25, 26, 51, 67, 68, 69, 70, 73, 94, 107, 111, 113, 117, 127, 135, 149, 150, 154, 171, 181, 184, 235, 237, 238, 239, 240, 241, 242, 244, 245, 249, 253, 256, 285, 293, 295, 308, 316, 359, 360, 365, 372, 378, 381, 383, 402, 437, 532, 533, 559, 567, 612, 616, 618, 620, 624, 626, 628, 630, 638, 640, 763, 765, 766, 767, 768, 769, 777, 778, 779, 782, 783, 785, 786, 787, 788, 789, 790, 791, 793, 797, 800, 847, 874, 875, 943, 946, 949, 950, 954, 964, 974, 983, 984, 988, 997, 1001, 1002, 1003, 1004, 1005, 1007, 1009, 1011, 1012, 1013], "fold": [4, 64, 70, 73, 107, 110, 113, 127, 135, 154, 171, 227, 234, 235, 237, 239, 240, 242, 249, 286, 300, 316, 329, 341, 346, 349, 350, 359, 360, 365, 374, 383, 402, 437, 458, 501, 532, 533, 559, 567, 612, 616, 618, 620, 624, 626, 628, 630, 638, 640, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 793, 797, 800, 847, 868, 871, 943, 950, 954, 964, 969, 983, 995, 997, 999, 1000, 1001, 1003, 1004, 1006, 1007, 1012], "1000": [4, 7, 8, 15, 25, 29, 34, 47, 68, 71, 79, 96, 104, 106, 108, 112, 113, 114, 119, 124, 128, 131, 144, 159, 168, 174, 185, 204, 212, 213, 215, 225, 229, 237, 239, 245, 248, 250, 264, 266, 280, 283, 289, 290, 292, 294, 295, 309, 310, 317, 320, 321, 351, 352, 359, 372, 382, 402, 438, 444, 445, 496, 497, 502, 504, 507, 508, 510, 511, 513, 518, 529, 597, 611, 612, 616, 617, 618, 620, 625, 626, 627, 628, 631, 632, 633, 637, 641, 642, 643, 652, 657, 663, 666, 728, 843, 855, 861, 866, 867, 943, 947, 969, 983, 986, 1002, 1004], "datapoint": [4, 39, 49, 53, 142, 145, 165, 214, 215, 219, 234, 239, 258, 314, 384, 411, 467, 522, 523, 524, 525, 529, 530, 531, 576, 874, 875, 876, 877, 947], "should": [4, 5, 6, 8, 9, 13, 15, 17, 24, 26, 29, 34, 50, 99, 101, 104, 107, 111, 114, 117, 136, 149, 154, 159, 161, 162, 166, 182, 184, 200, 209, 214, 215, 216, 219, 239, 242, 245, 246, 248, 256, 259, 280, 281, 286, 299, 308, 316, 321, 329, 333, 334, 335, 341, 344, 345, 346, 348, 350, 351, 353, 354, 355, 359, 360, 364, 365, 368, 370, 372, 374, 376, 378, 379, 381, 382, 383, 384, 385, 386, 388, 391, 397, 402, 405, 407, 408, 409, 410, 412, 414, 415, 417, 419, 422, 423, 424, 427, 428, 429, 430, 432, 434, 435, 436, 437, 438, 439, 440, 441, 447, 448, 449, 450, 452, 461, 468, 473, 474, 481, 486, 488, 489, 492, 497, 498, 499, 501, 503, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 546, 547, 553, 554, 555, 556, 558, 559, 562, 567, 572, 573, 575, 576, 585, 592, 593, 594, 596, 597, 598, 600, 603, 604, 605, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 649, 652, 654, 655, 656, 657, 658, 659, 660, 661, 666, 674, 691, 692, 706, 730, 735, 738, 742, 743, 744, 745, 746, 749, 752, 753, 756, 764, 765, 770, 771, 772, 773, 780, 781, 782, 783, 788, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 816, 817, 823, 824, 826, 829, 830, 831, 832, 833, 834, 835, 837, 838, 839, 840, 845, 846, 847, 849, 853, 856, 857, 858, 859, 860, 861, 862, 863, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 886, 890, 892, 895, 903, 911, 915, 920, 923, 925, 928, 929, 930, 931, 932, 933, 934, 935, 943, 944, 948, 949, 950, 951, 954, 955, 957, 959, 960, 961, 964, 967, 968, 969, 970, 974, 977, 978, 984, 988, 992, 995, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "enough": [4, 13, 26, 34, 41, 59, 107, 110, 117, 138, 149, 155, 156, 171, 182, 214, 217, 219, 283, 320, 322, 329, 344, 346, 350, 361, 372, 373, 374, 376, 378, 381, 532, 533, 554, 763, 766, 767, 769, 777, 790, 903, 943, 948, 951, 953, 960, 964, 969, 973, 978, 1001, 1011, 1012], "quantifi": [4, 34, 46, 73, 143, 200, 246, 348, 360, 369, 373, 538, 829, 949, 962, 964, 990], "repres": [4, 8, 10, 12, 13, 15, 20, 25, 30, 32, 41, 45, 46, 47, 50, 84, 87, 89, 95, 96, 108, 109, 118, 154, 161, 169, 174, 184, 186, 187, 191, 204, 206, 214, 219, 228, 233, 236, 239, 242, 246, 264, 281, 312, 320, 322, 328, 335, 338, 341, 343, 348, 358, 359, 360, 361, 368, 372, 374, 378, 379, 380, 381, 382, 383, 403, 407, 411, 417, 428, 435, 436, 437, 438, 439, 440, 441, 453, 455, 456, 457, 459, 461, 463, 465, 466, 467, 469, 470, 475, 492, 499, 501, 503, 505, 506, 512, 520, 528, 546, 553, 556, 594, 597, 599, 605, 641, 643, 662, 664, 666, 676, 694, 707, 753, 763, 765, 776, 777, 780, 783, 789, 791, 792, 795, 796, 802, 808, 809, 810, 812, 813, 814, 816, 817, 818, 823, 824, 833, 839, 840, 863, 866, 867, 886, 887, 907, 912, 944, 950, 951, 952, 953, 954, 955, 956, 957, 958, 960, 962, 964, 965, 967, 968, 970, 979, 984, 985, 987, 1001, 1003, 1006, 1007, 1010], "bit": [4, 13, 26, 45, 50, 73, 90, 180, 184, 256, 279, 308, 321, 329, 333, 341, 344, 360, 364, 381, 382, 547, 554, 623, 796, 886, 887, 951, 955, 972, 981, 988, 995, 998, 1001, 1003, 1004, 1007, 1008, 1009, 1012, 1013], "less": [4, 5, 8, 26, 49, 50, 57, 85, 87, 90, 97, 101, 108, 114, 115, 117, 138, 145, 154, 164, 166, 182, 184, 186, 215, 219, 226, 228, 239, 240, 248, 250, 253, 280, 283, 284, 285, 290, 292, 312, 320, 321, 329, 333, 335, 341, 346, 348, 358, 360, 374, 378, 379, 381, 382, 386, 404, 406, 408, 410, 413, 415, 417, 422, 425, 427, 428, 447, 448, 449, 461, 480, 496, 500, 502, 503, 505, 506, 507, 508, 509, 510, 511, 512, 513, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 555, 561, 584, 592, 599, 612, 626, 641, 643, 657, 666, 686, 687, 688, 689, 700, 716, 728, 743, 744, 749, 759, 761, 762, 765, 766, 767, 773, 790, 801, 802, 803, 805, 806, 807, 808, 809, 810, 812, 814, 815, 816, 817, 818, 829, 841, 843, 844, 846, 849, 855, 856, 866, 867, 874, 875, 876, 877, 892, 906, 943, 944, 946, 947, 948, 951, 953, 954, 957, 959, 964, 968, 969, 970, 973, 986, 988, 995, 996, 998, 999, 1001, 1002, 1003, 1005, 1009, 1010, 1012], "than": [4, 5, 7, 11, 12, 14, 19, 26, 28, 29, 37, 41, 44, 50, 52, 68, 71, 75, 77, 80, 85, 87, 90, 92, 94, 101, 103, 104, 106, 107, 108, 110, 111, 114, 117, 136, 138, 144, 147, 149, 154, 155, 156, 159, 161, 166, 168, 171, 182, 184, 188, 198, 199, 200, 206, 209, 215, 216, 217, 219, 226, 236, 237, 239, 240, 241, 242, 245, 248, 256, 258, 259, 265, 266, 277, 279, 283, 284, 285, 286, 290, 292, 294, 298, 312, 320, 321, 322, 329, 333, 334, 335, 340, 341, 342, 344, 345, 346, 348, 351, 352, 354, 360, 361, 368, 370, 371, 372, 373, 374, 376, 377, 378, 379, 381, 382, 383, 384, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 417, 419, 422, 425, 428, 429, 432, 434, 435, 436, 437, 438, 439, 440, 441, 447, 448, 449, 458, 459, 461, 474, 479, 480, 488, 496, 499, 500, 501, 502, 503, 505, 506, 507, 509, 512, 513, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 538, 546, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 575, 576, 592, 593, 595, 599, 605, 607, 608, 609, 610, 611, 612, 617, 618, 620, 623, 624, 625, 626, 627, 628, 631, 632, 633, 636, 637, 639, 641, 642, 643, 644, 647, 652, 657, 659, 661, 669, 670, 677, 685, 686, 687, 688, 699, 700, 703, 728, 743, 744, 745, 747, 749, 759, 761, 762, 763, 766, 767, 773, 777, 782, 784, 787, 788, 789, 790, 791, 794, 796, 797, 799, 800, 801, 802, 803, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 816, 817, 818, 820, 823, 824, 829, 839, 840, 841, 843, 844, 846, 849, 855, 856, 860, 863, 866, 867, 868, 871, 872, 874, 875, 876, 877, 878, 892, 903, 905, 906, 911, 917, 923, 925, 928, 943, 944, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 960, 961, 962, 964, 968, 969, 970, 973, 974, 977, 979, 983, 986, 987, 988, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "half": [4, 23, 90, 117, 214, 218, 237, 239, 251, 341, 342, 379, 428, 487, 527, 558, 562, 567, 734, 825, 833, 954, 957, 970], "contigu": [4, 21, 348, 358, 371, 378, 382, 408, 412, 414, 424, 611, 612, 617, 618, 625, 626, 627, 628, 646, 649, 745, 782, 806, 807, 866, 868, 869, 870, 871, 872, 969, 998, 1005, 1009], "model_select": [4, 5, 6, 7, 10, 13, 23, 24, 26, 29, 30, 51, 67, 68, 69, 70, 71, 73, 80, 92, 94, 101, 106, 107, 108, 111, 112, 113, 114, 115, 116, 117, 118, 121, 122, 127, 132, 133, 135, 138, 149, 150, 151, 153, 154, 156, 157, 159, 166, 177, 182, 184, 189, 190, 197, 198, 200, 210, 215, 219, 221, 222, 223, 227, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 258, 261, 262, 263, 267, 268, 274, 276, 277, 281, 283, 284, 285, 286, 288, 289, 290, 293, 295, 300, 301, 308, 311, 316, 324, 328, 329, 346, 348, 351, 359, 360, 365, 370, 375, 378, 381, 402, 403, 523, 525, 532, 533, 544, 624, 662, 663, 665, 667, 706, 794, 797, 815, 823, 824, 826, 874, 875, 876, 877, 922, 943, 944, 949, 954, 956, 957, 962, 964, 969, 974, 975, 983, 984, 988, 992, 999, 1001, 1002], "timeseriessplit": [4, 13, 117, 166, 234, 378, 1001, 1002, 1007], "ts_cv": [4, 13, 117], "n_split": [4, 13, 107, 113, 117, 149, 150, 154, 227, 234, 239, 241, 244, 249, 256, 295, 300, 308, 316, 329, 378, 764, 765, 766, 767, 768, 770, 771, 772, 773, 776, 778, 779, 780, 781, 782, 783, 784, 789, 983, 1001, 1003], "5": [4, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 19, 21, 23, 24, 25, 26, 29, 30, 32, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 59, 61, 62, 63, 64, 66, 67, 69, 70, 71, 74, 75, 76, 77, 79, 80, 85, 87, 88, 89, 90, 91, 93, 94, 96, 99, 103, 104, 105, 106, 107, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 124, 127, 129, 131, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 153, 154, 155, 156, 157, 159, 162, 163, 164, 165, 166, 168, 170, 171, 172, 173, 174, 176, 177, 179, 180, 182, 183, 184, 185, 188, 190, 193, 194, 195, 196, 197, 198, 200, 203, 204, 205, 207, 209, 212, 213, 214, 215, 217, 218, 219, 220, 221, 223, 225, 226, 227, 228, 229, 230, 231, 234, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 248, 250, 252, 253, 254, 256, 258, 259, 261, 262, 263, 264, 265, 266, 268, 269, 271, 272, 274, 275, 276, 277, 279, 281, 282, 283, 284, 286, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 300, 301, 302, 306, 307, 308, 309, 310, 312, 313, 315, 316, 317, 318, 320, 321, 324, 325, 326, 327, 328, 329, 341, 343, 344, 346, 348, 351, 352, 358, 359, 360, 364, 366, 367, 372, 374, 375, 378, 379, 381, 382, 383, 384, 385, 386, 389, 402, 403, 404, 405, 407, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 426, 427, 428, 429, 431, 434, 437, 443, 447, 448, 449, 450, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 469, 478, 479, 480, 481, 482, 483, 484, 485, 486, 488, 489, 491, 493, 496, 498, 499, 501, 502, 503, 504, 505, 508, 509, 510, 511, 512, 517, 520, 521, 522, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 547, 557, 558, 559, 562, 567, 569, 570, 571, 572, 573, 575, 578, 579, 580, 581, 584, 585, 587, 588, 590, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 606, 608, 609, 610, 611, 612, 616, 617, 618, 620, 621, 622, 624, 625, 626, 627, 628, 630, 631, 632, 633, 635, 636, 637, 638, 640, 641, 642, 643, 645, 646, 647, 648, 649, 653, 654, 656, 657, 658, 660, 661, 664, 668, 670, 672, 674, 677, 678, 685, 686, 687, 688, 690, 691, 692, 694, 696, 699, 702, 703, 704, 705, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 720, 733, 734, 745, 746, 748, 749, 751, 752, 753, 754, 755, 758, 760, 763, 764, 765, 766, 767, 768, 769, 770, 772, 773, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 795, 796, 797, 800, 801, 802, 803, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 823, 824, 825, 826, 831, 832, 833, 835, 836, 838, 839, 840, 841, 842, 843, 845, 846, 847, 849, 851, 852, 853, 854, 855, 856, 860, 866, 867, 868, 869, 870, 871, 872, 874, 876, 882, 883, 886, 887, 891, 892, 901, 902, 903, 904, 905, 907, 908, 909, 917, 918, 922, 923, 925, 926, 929, 930, 931, 932, 933, 934, 935, 943, 944, 946, 949, 950, 952, 953, 954, 955, 956, 957, 958, 960, 961, 962, 964, 966, 968, 969, 976, 977, 979, 983, 984, 986, 987, 988, 990, 991, 993, 996, 997, 998, 1000, 1002, 1003, 1005, 1009, 1010, 1011], "48": [4, 13, 42, 93, 117, 143, 223, 285, 343, 352, 374, 475, 562, 664, 710, 790, 801, 943, 956, 964, 991], "max_train_s": [4, 13, 378, 784, 1002], "10000": [4, 11, 13, 28, 40, 60, 68, 69, 115, 127, 168, 175, 182, 190, 198, 213, 215, 252, 290, 305, 307, 329, 335, 381, 382, 526, 527, 609, 644, 843, 872, 966, 984, 988], "test_siz": [4, 5, 6, 10, 13, 23, 24, 26, 29, 30, 67, 106, 112, 113, 115, 116, 117, 121, 153, 159, 166, 177, 182, 189, 190, 197, 198, 236, 237, 241, 246, 248, 252, 258, 267, 268, 274, 276, 277, 281, 283, 284, 290, 308, 316, 329, 351, 378, 663, 765, 780, 783, 784, 792, 794, 815, 944, 956, 957, 983, 984, 995, 996, 1001, 1002, 1007], "manual": [4, 43, 52, 154, 155, 157, 183, 193, 241, 259, 300, 306, 320, 322, 333, 334, 341, 346, 350, 351, 358, 359, 364, 374, 378, 379, 380, 402, 414, 532, 816, 839, 845, 943, 948, 949, 950, 953, 954, 957, 964, 974, 979, 980, 988, 1003, 1005, 1011], "inspect": [4, 9, 28, 29, 32, 53, 58, 103, 108, 115, 117, 118, 119, 123, 133, 138, 143, 144, 154, 155, 156, 157, 165, 174, 191, 196, 220, 239, 242, 251, 262, 267, 270, 284, 288, 289, 290, 291, 293, 295, 304, 305, 306, 307, 309, 310, 312, 320, 325, 334, 348, 360, 374, 375, 381, 382, 429, 518, 519, 522, 523, 524, 525, 529, 530, 531, 795, 826, 827, 874, 875, 876, 877, 942, 954, 955, 958, 961, 962, 969, 973, 975, 988, 990, 998], "variou": [4, 12, 33, 34, 36, 52, 53, 55, 57, 58, 59, 76, 79, 82, 90, 134, 151, 154, 160, 190, 192, 201, 202, 203, 204, 213, 256, 259, 275, 283, 289, 320, 322, 328, 329, 333, 340, 341, 342, 343, 346, 348, 351, 359, 361, 372, 373, 374, 376, 402, 406, 437, 467, 479, 480, 490, 522, 523, 524, 525, 526, 527, 529, 530, 532, 533, 534, 535, 559, 567, 612, 616, 618, 620, 623, 626, 628, 630, 631, 633, 638, 640, 641, 656, 657, 664, 763, 766, 767, 769, 777, 785, 786, 787, 788, 789, 790, 791, 792, 793, 826, 866, 867, 943, 944, 951, 954, 957, 961, 964, 968, 970, 973, 975, 977, 978, 987, 988, 995, 998, 999, 1012], "check": [4, 5, 8, 17, 43, 50, 53, 91, 99, 107, 122, 138, 151, 153, 155, 156, 168, 170, 171, 182, 203, 216, 226, 232, 248, 256, 291, 299, 328, 333, 334, 344, 345, 346, 347, 348, 349, 350, 352, 353, 355, 356, 358, 360, 364, 365, 368, 373, 375, 388, 402, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 429, 430, 434, 435, 436, 438, 439, 440, 441, 447, 448, 449, 450, 456, 467, 473, 474, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 534, 535, 546, 547, 548, 553, 554, 555, 556, 557, 560, 561, 562, 563, 564, 565, 568, 575, 576, 592, 593, 594, 595, 600, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 652, 653, 654, 655, 656, 657, 658, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 776, 777, 778, 779, 780, 781, 782, 783, 784, 790, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 822, 823, 824, 825, 826, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 858, 859, 861, 862, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 886, 887, 888, 897, 898, 909, 910, 911, 915, 916, 938, 939, 940, 942, 949, 950, 951, 954, 969, 970, 974, 975, 978, 990, 995, 996, 998, 1002, 1006, 1007, 1008, 1009, 1010, 1012], "all_split": [4, 13], "list": [4, 8, 10, 12, 13, 14, 16, 17, 19, 20, 24, 30, 37, 41, 46, 59, 66, 96, 97, 105, 107, 113, 122, 157, 186, 219, 220, 234, 237, 239, 240, 242, 243, 248, 252, 268, 281, 285, 288, 289, 290, 291, 292, 293, 294, 295, 301, 311, 321, 322, 335, 340, 341, 344, 345, 346, 348, 350, 351, 352, 353, 354, 355, 358, 359, 360, 361, 364, 365, 372, 374, 375, 378, 380, 381, 382, 397, 399, 402, 415, 421, 422, 429, 430, 431, 436, 437, 443, 447, 448, 449, 453, 454, 455, 456, 457, 458, 461, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 479, 480, 481, 482, 483, 484, 485, 488, 497, 515, 516, 518, 519, 520, 521, 522, 523, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 546, 547, 553, 554, 556, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 592, 597, 599, 600, 604, 605, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 635, 637, 638, 643, 644, 646, 649, 651, 652, 657, 661, 662, 664, 675, 676, 677, 678, 681, 683, 689, 697, 706, 710, 718, 742, 745, 747, 752, 758, 761, 762, 763, 766, 767, 769, 774, 775, 777, 785, 787, 788, 789, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 816, 817, 818, 819, 820, 823, 824, 825, 826, 827, 828, 830, 834, 837, 839, 840, 845, 847, 863, 867, 869, 872, 874, 875, 876, 877, 880, 882, 886, 887, 888, 892, 894, 895, 896, 898, 906, 907, 909, 920, 925, 928, 938, 943, 944, 950, 954, 956, 957, 958, 961, 962, 965, 970, 973, 974, 978, 979, 983, 985, 988, 991, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "train_0": 4, "test_0": 4, "iloc": [4, 13, 117, 122, 154, 155, 200, 239, 262], "12379": 4, "25": [4, 5, 6, 7, 9, 10, 11, 13, 19, 23, 25, 39, 42, 51, 52, 75, 79, 84, 94, 96, 105, 114, 122, 132, 133, 139, 149, 154, 162, 172, 182, 186, 207, 209, 227, 239, 240, 272, 274, 277, 279, 281, 293, 297, 298, 320, 327, 329, 333, 352, 378, 381, 382, 385, 409, 442, 446, 466, 469, 486, 535, 562, 583, 643, 698, 760, 780, 792, 818, 836, 841, 843, 844, 847, 855, 856, 858, 859, 900, 904, 935, 950, 954, 955, 957, 964, 975, 984, 995, 997, 1003, 1006], "760": [4, 117], "68": [4, 13, 147, 173, 277, 297, 374, 443, 500, 506, 555, 650, 651, 995], "27": [4, 6, 13, 19, 29, 44, 51, 90, 240, 297, 298, 317, 343, 374, 382, 482, 489, 570, 678, 752, 753, 847, 867, 954, 964, 975, 987, 995, 997], "9993": [4, 618, 620, 1003], "12380": 4, "32": [4, 5, 13, 48, 153, 156, 218, 292, 298, 340, 344, 351, 360, 371, 381, 382, 410, 529, 530, 547, 554, 599, 641, 845, 847, 886, 887, 919, 962, 964, 987, 995, 998, 1001, 1003, 1004, 1007, 1008, 1009, 1012], "000": [4, 5, 21, 24, 26, 39, 70, 139, 156, 159, 213, 237, 239, 241, 284, 291, 320, 321, 329, 341, 352, 381, 382, 455, 526, 527, 609, 642, 968, 975, 988, 1006], "77": [4, 6, 41, 136, 159, 248, 298, 340, 343, 499, 672, 700, 739], "0028": 4, "12381": 4, "72": [4, 6, 7, 13, 107, 141, 351, 790], "9995": 4, "12382": 4, "240": [4, 41, 962, 995], "82": [4, 19, 28, 50, 55, 110, 133, 185, 270, 297, 752, 763, 777, 902, 954, 957, 984, 995], "9980": [4, 1003], "12383": 4, "13374": 4, "34": [4, 114, 136, 138, 264, 277, 297, 298, 328, 343, 378, 485, 494, 535, 562, 614, 632, 681, 728, 984, 995], "44": [4, 143, 154, 155, 166, 256, 263, 444, 745, 847, 867, 870, 937, 954, 961, 975, 995], "40": [4, 13, 15, 51, 63, 73, 83, 85, 87, 118, 124, 138, 166, 173, 174, 176, 199, 204, 206, 217, 219, 229, 240, 265, 271, 276, 281, 297, 298, 306, 307, 309, 311, 313, 315, 328, 334, 341, 378, 411, 460, 482, 483, 806, 807, 811, 823, 824, 943, 955, 964, 995, 996], "150": [4, 6, 83, 85, 105, 114, 127, 203, 207, 209, 252, 295, 312, 316, 343, 378, 383, 469, 566, 567, 787, 788, 789, 954, 983, 984, 985], "53": [4, 50, 107, 219, 301, 374, 381, 500, 506, 511, 756, 757, 975], "15": [4, 6, 7, 8, 12, 13, 14, 15, 28, 29, 32, 37, 41, 50, 51, 52, 58, 59, 63, 69, 70, 75, 77, 85, 90, 96, 105, 107, 110, 111, 114, 117, 131, 133, 135, 136, 138, 142, 149, 153, 154, 155, 171, 179, 184, 196, 200, 204, 207, 209, 227, 228, 234, 242, 244, 247, 250, 251, 253, 263, 267, 274, 275, 279, 281, 283, 294, 298, 306, 308, 311, 315, 318, 325, 340, 341, 344, 346, 359, 364, 366, 367, 378, 381, 382, 405, 419, 455, 461, 462, 463, 496, 502, 510, 511, 520, 521, 563, 569, 574, 609, 617, 626, 628, 633, 641, 643, 657, 705, 781, 795, 818, 847, 943, 949, 950, 951, 954, 957, 958, 964, 969, 975, 979, 984, 991, 993, 997, 1007, 1009, 1010], "0013": 4, "13375": 4, "39": [4, 13, 136, 223, 341, 343, 344, 350, 374, 382, 460, 857, 875, 904], "49": [4, 13, 136, 186, 219, 340, 341, 343, 351, 374, 415, 422, 678, 690, 720, 728, 757, 761, 763, 847, 954, 964, 998], "13376": 4, "0012": [4, 659], "13377": 4, "36": [4, 6, 7, 13, 14, 89, 136, 144, 154, 200, 219, 311, 343, 352, 381, 382, 520, 521, 535, 699, 723, 954, 988, 995], "08": [4, 41, 47, 90, 154, 155, 166, 277, 343, 443, 496, 508, 510, 528, 606, 623, 763, 823, 824, 845, 960, 975], "910": 4, "42": [4, 5, 6, 13, 20, 23, 24, 25, 26, 29, 41, 43, 53, 73, 89, 94, 101, 108, 109, 111, 112, 114, 115, 117, 118, 122, 132, 133, 150, 154, 156, 157, 159, 161, 171, 174, 176, 177, 184, 188, 189, 190, 196, 197, 199, 202, 203, 204, 209, 214, 215, 216, 219, 222, 238, 240, 243, 259, 265, 266, 267, 274, 279, 280, 281, 282, 284, 286, 288, 290, 292, 300, 306, 308, 320, 321, 329, 334, 348, 351, 352, 360, 365, 374, 378, 381, 382, 385, 402, 409, 443, 453, 457, 476, 478, 479, 480, 481, 482, 483, 484, 485, 487, 488, 489, 492, 494, 496, 502, 509, 510, 511, 522, 523, 530, 531, 532, 533, 535, 570, 571, 572, 573, 574, 642, 659, 660, 661, 724, 756, 757, 761, 765, 790, 792, 806, 807, 811, 815, 818, 858, 859, 861, 862, 863, 873, 876, 877, 889, 902, 919, 923, 957, 964, 975, 984, 988, 991, 992, 995], "0015": 4, "13378": 4, "35": [4, 6, 7, 9, 11, 52, 67, 103, 124, 154, 155, 161, 170, 209, 256, 284, 297, 298, 509, 613, 614, 621, 667, 671, 672, 691, 705, 720, 746, 753, 799, 943, 950, 954, 960, 961, 964, 984, 988, 995, 997], "26": [4, 13, 43, 51, 75, 89, 143, 154, 207, 218, 252, 298, 352, 535, 613, 693, 747, 842, 854, 903, 954, 964, 995, 998, 999, 1007], "47": [4, 13, 79, 147, 174, 178, 341, 458, 459, 500, 506], "16": [4, 5, 13, 19, 26, 40, 47, 48, 51, 63, 70, 75, 87, 90, 131, 155, 175, 181, 182, 183, 200, 202, 203, 206, 207, 214, 218, 241, 242, 243, 263, 277, 279, 283, 288, 312, 320, 321, 326, 341, 343, 352, 359, 378, 379, 382, 407, 422, 424, 436, 437, 443, 444, 462, 463, 467, 481, 499, 500, 535, 554, 560, 561, 572, 573, 604, 615, 616, 619, 620, 621, 622, 647, 648, 776, 781, 792, 841, 867, 875, 930, 931, 932, 943, 950, 954, 964, 969, 975, 979, 988, 991, 993, 995, 996, 1000, 1001, 1003, 1004], "9979": 4, "2331": 4, "31": [4, 13, 66, 74, 200, 247, 264, 291, 297, 298, 371, 382, 465, 526, 527, 562, 614, 636, 644, 919, 955, 995], "060": [4, 56, 715, 975], "0032": 4, "2332": 4, "2333": 4, "78": [4, 50, 159, 200, 248, 281, 298, 458, 459, 611, 612, 617, 618, 620, 625, 626, 627, 629, 630, 646, 650, 651, 763, 769, 790, 954, 974, 984], "275": [4, 286, 298, 975, 998], "2334": 4, "96": [4, 8, 13, 30, 45, 59, 145, 209, 219, 237, 277, 281, 284, 285, 297, 298, 343, 378, 518, 647, 648, 676, 943, 949, 954, 964, 995], "515": 4, "64": [4, 13, 30, 45, 50, 55, 82, 87, 143, 154, 203, 213, 214, 218, 237, 248, 263, 268, 333, 334, 343, 344, 352, 360, 364, 379, 386, 460, 463, 467, 564, 565, 611, 623, 653, 654, 655, 656, 658, 867, 957, 985, 991, 995, 997, 1003, 1004, 1007, 1008, 1009, 1012], "2335": 4, "12326": 4, "12327": 4, "12328": [4, 1004], "12329": 4, "46": [4, 13, 50, 90, 182, 219, 329, 352, 558, 559, 647, 648, 681, 870, 875, 964, 991], "12330": [4, 1003], "52": [4, 136, 143, 182, 496, 598, 761, 902, 975, 995], "last": [4, 20, 41, 55, 82, 114, 154, 161, 182, 183, 190, 195, 209, 231, 242, 250, 251, 284, 290, 292, 300, 324, 333, 341, 344, 348, 350, 351, 354, 360, 364, 374, 375, 382, 386, 403, 407, 412, 424, 429, 433, 480, 498, 524, 525, 526, 527, 548, 549, 552, 558, 559, 562, 575, 647, 648, 650, 651, 662, 663, 665, 666, 667, 672, 746, 761, 762, 766, 767, 782, 806, 807, 811, 826, 827, 831, 839, 845, 881, 906, 929, 943, 949, 950, 951, 953, 955, 958, 968, 974, 979, 986, 995, 1001, 1002, 1003, 1004, 1009, 1011, 1012], "train_4": 4, "test_4": 4, "16379": 4, "94": [4, 30, 32, 51, 89, 110, 181, 217, 252, 281, 297, 298, 381, 628, 752, 949, 954, 955, 964, 988, 995], "665": 4, "16380": 4, "71": [4, 13, 136, 186, 200, 219, 343, 475, 694, 700, 730, 740, 954, 986, 991, 997], "16381": 4, "76": [4, 159, 182, 298, 320, 329, 343, 352, 741, 745, 826, 986], "16382": 4, "16383": 4, "18": [4, 7, 8, 13, 19, 37, 41, 46, 50, 57, 59, 70, 94, 114, 136, 147, 154, 193, 207, 209, 214, 239, 277, 283, 285, 298, 320, 321, 322, 346, 352, 375, 378, 379, 382, 412, 424, 457, 465, 466, 467, 469, 470, 475, 500, 501, 503, 505, 506, 522, 523, 524, 525, 528, 529, 530, 531, 534, 536, 537, 538, 539, 540, 542, 543, 554, 559, 564, 565, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 611, 614, 623, 624, 636, 679, 683, 695, 698, 699, 705, 707, 724, 734, 761, 762, 784, 799, 822, 823, 824, 830, 836, 844, 845, 856, 866, 867, 874, 875, 876, 877, 878, 902, 903, 943, 952, 954, 964, 975, 991, 993, 995, 996, 999, 1000, 1002, 1003, 1005, 1006], "940": 4, "6331": 4, "28": [4, 63, 114, 136, 154, 198, 248, 276, 297, 298, 343, 352, 374, 378, 415, 422, 964, 984, 995, 998, 1001], "790": [4, 66], "89": [4, 13, 30, 143, 173, 297, 298, 937, 949, 954, 964, 988, 995, 998, 1006], "6332": 4, "6333": 4, "88": [4, 6, 30, 85, 173, 186, 238, 277, 297, 298, 324, 341, 343, 346, 376, 438, 611, 612, 617, 625, 626, 627, 646, 826, 902, 984, 995], "820": [4, 806, 807], "79": [4, 6, 28, 30, 75, 76, 90, 136, 159, 277, 298, 343, 351, 376, 439, 489, 562, 659, 804, 995, 997], "6334": 4, "6335": 4, "70": [4, 6, 11, 13, 63, 67, 69, 101, 155, 219, 225, 239, 298, 341, 343, 378, 458, 459, 647, 648, 678, 690, 720, 763, 777, 853, 943, 964, 984], "33": [4, 13, 75, 182, 293, 298, 341, 343, 350, 351, 352, 374, 382, 426, 497, 602, 613, 677, 678, 693, 694, 702, 707, 747, 748, 751, 769, 790, 792, 794, 853, 877, 936, 950, 954, 964, 984, 995, 1003], "335": [4, 35, 975], "74": [4, 8, 13, 198, 219, 297, 298, 343, 555, 659, 763, 777, 845, 991], "16326": [4, 1007], "16327": 4, "16328": 4, "16329": 4, "16330": 4, "readi": [4, 7, 143, 183, 341, 350, 354], "tree": [4, 7, 13, 25, 26, 29, 38, 41, 52, 59, 91, 100, 103, 104, 105, 107, 111, 112, 113, 114, 115, 118, 119, 121, 122, 123, 125, 136, 146, 149, 155, 157, 165, 190, 191, 203, 216, 218, 219, 220, 236, 243, 245, 256, 258, 259, 262, 264, 272, 279, 280, 284, 289, 290, 292, 305, 329, 333, 341, 343, 352, 359, 360, 363, 372, 374, 380, 385, 402, 406, 407, 408, 409, 410, 411, 413, 415, 422, 428, 460, 461, 465, 469, 479, 480, 484, 509, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 596, 597, 598, 599, 623, 653, 657, 667, 668, 676, 706, 712, 752, 754, 769, 784, 789, 790, 792, 801, 806, 807, 808, 809, 810, 811, 812, 814, 816, 817, 818, 827, 830, 839, 898, 944, 951, 954, 955, 960, 961, 973, 974, 975, 976, 990, 995, 996, 997, 998, 999, 1000, 1001, 1002], "often": [4, 19, 23, 24, 26, 31, 66, 70, 107, 117, 120, 142, 149, 154, 155, 183, 200, 203, 219, 227, 241, 244, 279, 284, 308, 318, 320, 321, 322, 333, 334, 340, 341, 343, 346, 348, 351, 354, 358, 359, 360, 363, 368, 372, 374, 375, 376, 378, 379, 381, 382, 384, 386, 433, 486, 489, 498, 501, 597, 611, 612, 617, 618, 625, 626, 627, 628, 637, 639, 652, 692, 836, 844, 852, 864, 943, 944, 946, 949, 950, 951, 952, 953, 954, 956, 957, 959, 960, 961, 964, 967, 968, 970, 979, 981, 986, 987, 988, 996, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "flexibl": [4, 24, 111, 149, 182, 280, 305, 322, 348, 353, 358, 378, 384, 639, 866, 867, 943, 948, 950, 954, 958, 964, 973, 974, 978, 1004, 1008], "effici": [4, 5, 12, 14, 39, 43, 50, 52, 87, 102, 107, 112, 120, 159, 171, 175, 184, 190, 264, 320, 333, 338, 340, 346, 348, 349, 351, 352, 358, 360, 368, 371, 373, 374, 379, 380, 381, 384, 386, 407, 408, 411, 412, 414, 415, 417, 419, 422, 424, 426, 427, 461, 498, 499, 500, 503, 505, 506, 509, 528, 531, 539, 546, 547, 553, 554, 556, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 597, 598, 599, 603, 605, 620, 623, 624, 629, 631, 632, 633, 638, 640, 641, 642, 643, 644, 650, 651, 653, 690, 720, 727, 743, 744, 761, 762, 763, 777, 795, 806, 807, 808, 809, 810, 812, 814, 816, 817, 818, 831, 843, 855, 859, 866, 875, 877, 903, 922, 943, 946, 948, 950, 951, 953, 954, 955, 957, 958, 959, 960, 962, 964, 965, 966, 967, 968, 969, 973, 978, 979, 983, 986, 987, 988, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "heterogen": [4, 8, 9, 23, 52, 65, 67, 151, 155, 182, 223, 284, 288, 338, 340, 358, 429, 453, 506, 546, 556, 678, 826, 830, 866, 951, 961, 964, 973, 975, 990, 999, 1003, 1005, 1006], "tabular": [4, 13, 155, 348, 381, 962], "mix": [4, 59, 65, 66, 88, 89, 111, 151, 182, 211, 221, 223, 240, 279, 285, 340, 348, 358, 360, 375, 379, 386, 429, 431, 432, 461, 498, 503, 505, 512, 565, 569, 595, 611, 612, 617, 623, 624, 625, 626, 627, 628, 633, 641, 643, 646, 763, 777, 792, 826, 839, 840, 846, 847, 918, 925, 928, 950, 959, 975, 987, 1007, 1009, 1010], "long": [4, 11, 12, 41, 59, 114, 143, 150, 154, 156, 182, 216, 217, 219, 242, 272, 279, 289, 320, 321, 329, 334, 344, 346, 354, 358, 360, 361, 368, 373, 374, 418, 463, 503, 641, 642, 643, 766, 767, 801, 802, 803, 804, 805, 823, 824, 834, 954, 960, 964, 965, 967, 968, 972, 997, 1001, 1007, 1009], "sampl": [4, 5, 8, 11, 14, 23, 24, 25, 26, 30, 31, 32, 34, 36, 38, 39, 40, 43, 45, 46, 50, 53, 54, 55, 56, 57, 62, 75, 76, 77, 80, 83, 85, 87, 91, 92, 95, 96, 101, 102, 103, 104, 105, 106, 107, 110, 111, 113, 114, 115, 117, 118, 123, 124, 125, 133, 135, 136, 138, 142, 143, 144, 145, 147, 149, 151, 154, 155, 159, 160, 166, 168, 170, 171, 182, 184, 186, 189, 190, 192, 193, 194, 196, 198, 199, 200, 202, 209, 213, 214, 216, 217, 219, 225, 226, 228, 229, 230, 231, 232, 234, 238, 239, 241, 242, 243, 245, 247, 251, 253, 258, 259, 263, 264, 265, 266, 268, 269, 270, 277, 279, 281, 282, 283, 284, 286, 288, 290, 291, 293, 295, 297, 299, 300, 301, 302, 303, 304, 306, 308, 310, 312, 313, 314, 316, 317, 320, 321, 325, 328, 333, 339, 341, 342, 345, 346, 348, 349, 358, 359, 365, 371, 372, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 391, 392, 393, 396, 397, 398, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 419, 421, 422, 423, 426, 427, 428, 430, 434, 435, 436, 437, 438, 439, 440, 441, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 511, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 546, 547, 548, 549, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 575, 576, 592, 593, 594, 595, 597, 598, 599, 600, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 652, 653, 656, 657, 658, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 672, 673, 674, 675, 677, 678, 679, 680, 681, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 698, 699, 700, 701, 702, 703, 704, 705, 707, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 724, 725, 727, 728, 732, 733, 734, 735, 737, 738, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 829, 830, 831, 832, 835, 836, 837, 838, 839, 840, 841, 843, 844, 845, 846, 847, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 882, 886, 887, 891, 892, 903, 907, 923, 925, 928, 929, 932, 935, 943, 944, 946, 947, 948, 949, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 964, 965, 966, 967, 968, 969, 970, 973, 974, 975, 977, 979, 985, 986, 987, 988, 990, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "larg": [4, 12, 13, 14, 21, 25, 26, 34, 36, 40, 44, 46, 47, 49, 50, 52, 69, 71, 87, 91, 104, 106, 107, 114, 117, 118, 120, 132, 143, 144, 156, 157, 161, 162, 171, 173, 182, 184, 186, 187, 188, 200, 214, 219, 236, 242, 245, 248, 261, 268, 276, 279, 281, 291, 292, 295, 308, 313, 316, 321, 322, 333, 341, 346, 352, 355, 358, 359, 360, 364, 368, 373, 374, 376, 378, 379, 380, 381, 383, 385, 387, 407, 409, 411, 412, 415, 416, 417, 418, 423, 427, 438, 440, 464, 479, 499, 501, 503, 505, 509, 512, 514, 520, 521, 522, 523, 524, 525, 526, 527, 529, 530, 532, 533, 547, 553, 554, 556, 599, 606, 608, 611, 612, 615, 617, 618, 619, 622, 623, 624, 629, 636, 637, 639, 642, 644, 650, 652, 654, 656, 657, 658, 660, 710, 743, 744, 763, 771, 773, 777, 781, 791, 801, 802, 803, 804, 805, 806, 807, 812, 823, 824, 831, 835, 836, 844, 846, 858, 859, 866, 867, 871, 872, 874, 875, 876, 877, 902, 903, 943, 946, 948, 950, 951, 953, 956, 957, 958, 962, 964, 967, 968, 969, 970, 973, 974, 978, 984, 986, 987, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "here": [4, 8, 9, 12, 13, 14, 17, 23, 26, 54, 55, 63, 73, 77, 82, 83, 85, 89, 90, 92, 93, 94, 95, 97, 101, 104, 107, 111, 115, 117, 122, 133, 136, 138, 146, 147, 154, 155, 156, 159, 161, 166, 171, 175, 182, 186, 188, 197, 198, 200, 202, 204, 209, 214, 216, 219, 220, 226, 227, 228, 233, 236, 237, 239, 241, 242, 244, 248, 249, 251, 256, 259, 261, 268, 275, 276, 277, 281, 284, 290, 292, 295, 297, 299, 308, 312, 316, 318, 322, 324, 329, 333, 334, 335, 340, 341, 344, 345, 346, 347, 348, 350, 351, 352, 354, 358, 359, 365, 368, 370, 371, 374, 375, 377, 378, 379, 380, 381, 382, 385, 387, 402, 405, 406, 407, 408, 409, 410, 411, 412, 414, 417, 429, 437, 440, 501, 503, 504, 508, 509, 532, 533, 534, 535, 546, 547, 549, 553, 556, 559, 567, 593, 595, 612, 616, 618, 620, 626, 628, 630, 638, 640, 654, 656, 660, 664, 677, 690, 710, 720, 758, 763, 766, 767, 769, 777, 785, 786, 787, 788, 789, 790, 791, 793, 802, 806, 807, 830, 838, 841, 844, 847, 858, 859, 869, 920, 943, 946, 950, 951, 952, 953, 954, 957, 960, 964, 966, 967, 968, 969, 973, 974, 977, 978, 979, 980, 986, 995, 1003, 1008], "modern": [4, 117, 382, 433, 468, 555, 655, 659, 694, 864, 951, 973, 974, 1011], "histgradientboostingregressor": [4, 7, 13, 102, 107, 111, 114, 115, 117, 119, 122, 149, 155, 182, 285, 288, 289, 290, 291, 293, 294, 295, 350, 381, 525, 530, 597, 598, 600, 944, 961, 973, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "nativ": [4, 117, 121, 149, 334, 341, 360, 381, 461, 526, 527, 798, 799, 922, 950, 954, 973, 1005, 1007], "support": [4, 6, 7, 8, 9, 10, 16, 23, 28, 30, 43, 66, 67, 68, 100, 105, 121, 122, 132, 133, 155, 183, 192, 193, 194, 200, 214, 215, 216, 222, 233, 237, 244, 246, 256, 259, 277, 279, 283, 292, 297, 298, 301, 302, 304, 305, 308, 309, 310, 311, 312, 313, 316, 333, 334, 335, 340, 344, 346, 348, 350, 351, 352, 353, 355, 356, 359, 360, 361, 374, 378, 379, 382, 383, 384, 402, 405, 415, 417, 418, 429, 430, 431, 432, 434, 437, 439, 452, 461, 477, 503, 505, 509, 512, 514, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 546, 547, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 575, 576, 578, 579, 580, 582, 584, 585, 587, 588, 590, 592, 596, 597, 598, 608, 610, 622, 623, 624, 635, 636, 637, 639, 640, 641, 642, 643, 652, 655, 659, 664, 672, 678, 693, 694, 702, 707, 742, 743, 744, 747, 748, 751, 752, 763, 766, 767, 769, 777, 789, 790, 798, 799, 804, 806, 807, 810, 812, 813, 818, 826, 827, 831, 837, 839, 840, 842, 846, 854, 863, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 878, 879, 880, 882, 892, 897, 898, 942, 943, 944, 946, 947, 948, 950, 953, 954, 955, 956, 957, 958, 960, 961, 964, 965, 968, 973, 974, 975, 976, 978, 979, 982, 984, 988, 990, 992, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "therefor": [4, 9, 14, 20, 23, 26, 32, 34, 49, 50, 67, 68, 71, 75, 80, 92, 96, 101, 104, 106, 114, 120, 122, 135, 153, 156, 182, 186, 198, 199, 225, 230, 231, 240, 242, 256, 258, 262, 276, 279, 284, 297, 308, 316, 317, 320, 321, 328, 333, 340, 344, 351, 358, 365, 370, 374, 375, 376, 378, 379, 381, 382, 402, 500, 514, 516, 518, 519, 524, 525, 529, 530, 569, 571, 623, 624, 630, 633, 636, 641, 643, 644, 666, 677, 699, 721, 761, 826, 827, 839, 843, 847, 855, 944, 948, 950, 951, 954, 956, 957, 958, 959, 962, 964, 969, 970, 974, 979, 986, 987, 988, 1004, 1005, 1008, 1009, 1010, 1011, 1012], "categorical_featur": [4, 67, 111, 117, 155, 285, 290, 291, 292, 293, 295, 351, 381, 526, 527, 597, 598, 961, 1003, 1007, 1010, 1012], "from_dtyp": [4, 111, 295, 381, 526, 527, 1012], "For": [4, 8, 9, 12, 13, 14, 19, 26, 30, 34, 37, 41, 43, 45, 46, 50, 52, 54, 55, 57, 64, 69, 75, 80, 84, 88, 104, 106, 109, 114, 115, 117, 118, 120, 132, 133, 136, 138, 140, 145, 149, 150, 154, 155, 166, 170, 171, 182, 183, 186, 187, 190, 199, 200, 202, 204, 207, 209, 210, 212, 213, 214, 216, 223, 230, 236, 239, 240, 246, 254, 258, 259, 269, 274, 276, 277, 281, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 300, 302, 308, 310, 312, 316, 320, 321, 322, 324, 325, 328, 329, 333, 335, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 358, 359, 360, 361, 365, 368, 370, 371, 372, 373, 374, 375, 378, 379, 381, 382, 383, 384, 385, 390, 397, 402, 405, 407, 408, 409, 410, 411, 412, 414, 415, 416, 419, 421, 422, 423, 425, 426, 427, 429, 430, 431, 433, 437, 439, 447, 448, 449, 450, 454, 461, 463, 468, 477, 479, 480, 484, 488, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 512, 514, 515, 516, 518, 519, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 537, 538, 546, 547, 548, 549, 553, 554, 556, 557, 558, 559, 562, 567, 572, 573, 574, 575, 576, 579, 584, 587, 588, 592, 593, 594, 595, 596, 597, 598, 600, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 649, 652, 653, 654, 655, 657, 658, 660, 666, 669, 671, 672, 693, 694, 702, 705, 706, 727, 733, 742, 747, 748, 751, 752, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 777, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 793, 795, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 814, 815, 816, 817, 818, 819, 820, 822, 823, 824, 825, 826, 831, 832, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 851, 852, 853, 854, 855, 856, 857, 858, 859, 864, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 886, 892, 917, 938, 943, 944, 946, 947, 948, 949, 950, 951, 954, 955, 956, 957, 958, 959, 960, 961, 962, 964, 965, 968, 969, 970, 972, 977, 978, 979, 986, 987, 988, 995, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "refer": [4, 34, 35, 57, 60, 67, 83, 115, 117, 122, 136, 147, 200, 216, 219, 246, 262, 269, 279, 288, 289, 290, 291, 292, 293, 294, 295, 321, 334, 343, 344, 346, 347, 348, 350, 351, 352, 353, 354, 358, 359, 360, 361, 364, 365, 368, 375, 377, 378, 385, 386, 387, 402, 403, 404, 405, 407, 409, 411, 412, 413, 415, 416, 417, 418, 419, 422, 427, 428, 429, 430, 431, 432, 433, 434, 437, 438, 439, 440, 463, 468, 476, 478, 480, 481, 482, 483, 484, 485, 493, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 506, 509, 512, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 555, 558, 559, 560, 567, 572, 573, 575, 576, 579, 584, 587, 588, 592, 593, 596, 597, 599, 600, 601, 602, 603, 604, 607, 608, 609, 610, 612, 614, 616, 618, 620, 621, 623, 626, 628, 630, 631, 632, 633, 636, 638, 640, 641, 643, 644, 647, 648, 653, 654, 655, 656, 657, 658, 659, 660, 661, 666, 669, 670, 672, 673, 674, 675, 677, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 694, 695, 698, 699, 700, 701, 702, 704, 705, 707, 720, 722, 723, 733, 747, 749, 750, 752, 753, 756, 757, 759, 761, 762, 763, 764, 765, 766, 767, 768, 769, 777, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 793, 796, 797, 801, 802, 803, 805, 808, 811, 812, 813, 815, 822, 823, 824, 826, 831, 832, 833, 835, 836, 838, 839, 840, 842, 843, 844, 846, 847, 854, 859, 860, 861, 862, 863, 864, 866, 868, 869, 871, 872, 874, 875, 876, 877, 891, 903, 920, 956, 958, 965, 970, 974, 977, 979, 983, 987, 988, 995, 999, 1000, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "datafram": [4, 13, 24, 66, 67, 68, 101, 107, 111, 114, 119, 143, 149, 153, 154, 155, 156, 161, 166, 171, 186, 190, 200, 220, 223, 230, 237, 239, 240, 242, 250, 251, 256, 284, 285, 286, 291, 292, 293, 316, 320, 321, 340, 341, 346, 348, 351, 360, 375, 381, 398, 407, 408, 410, 412, 414, 429, 431, 432, 433, 447, 448, 449, 450, 454, 455, 456, 457, 461, 465, 466, 467, 469, 470, 475, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 514, 526, 527, 531, 532, 533, 534, 535, 546, 547, 548, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 592, 593, 594, 595, 596, 597, 598, 599, 600, 603, 604, 605, 606, 607, 653, 654, 657, 763, 766, 767, 777, 792, 810, 815, 818, 822, 825, 826, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 858, 859, 864, 882, 909, 925, 928, 943, 944, 974, 988, 998, 999, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "dedic": [4, 237, 318, 344, 350, 352, 358, 361, 370, 374, 549, 637, 639, 652, 943, 950, 973, 979, 1003, 1012], "rule": [4, 26, 107, 159, 325, 328, 329, 333, 343, 346, 347, 348, 358, 360, 361, 369, 372, 373, 374, 378, 379, 381, 383, 501, 514, 515, 516, 517, 518, 526, 527, 534, 535, 567, 599, 610, 623, 624, 631, 632, 633, 641, 642, 643, 671, 672, 676, 763, 766, 767, 769, 777, 785, 789, 791, 815, 866, 879, 943, 948, 956, 957, 968, 970, 974, 979, 986, 990, 997, 1000, 1007, 1012], "sake": [4, 26, 114, 117, 150, 154, 182, 284, 312, 320, 322, 354, 358, 635], "simplic": [4, 14, 29, 166, 312, 320, 322, 360, 380, 957, 958, 959, 969], "try": [4, 6, 11, 12, 13, 15, 16, 24, 25, 36, 50, 67, 68, 90, 101, 106, 107, 108, 109, 110, 117, 118, 119, 122, 125, 133, 138, 143, 150, 153, 154, 155, 156, 159, 161, 163, 171, 210, 211, 212, 216, 220, 221, 222, 223, 226, 227, 230, 237, 239, 240, 246, 251, 256, 259, 272, 277, 285, 289, 290, 292, 293, 295, 299, 310, 316, 320, 321, 328, 341, 344, 345, 346, 348, 351, 352, 354, 358, 360, 364, 365, 368, 374, 377, 378, 381, 382, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 468, 532, 542, 554, 623, 638, 640, 654, 658, 763, 766, 767, 775, 777, 787, 788, 789, 791, 844, 846, 849, 851, 852, 853, 854, 855, 856, 857, 866, 885, 938, 943, 950, 951, 960, 969, 970, 974, 977, 978, 979, 981, 984, 986, 987, 988, 997, 998, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012], "default": [4, 13, 15, 24, 28, 39, 42, 43, 45, 52, 56, 87, 107, 132, 138, 149, 155, 161, 162, 171, 182, 183, 200, 211, 213, 219, 221, 223, 228, 234, 242, 248, 258, 259, 279, 283, 286, 288, 289, 293, 295, 312, 316, 317, 320, 321, 322, 324, 329, 333, 334, 340, 341, 344, 348, 349, 350, 351, 352, 353, 355, 358, 359, 360, 364, 365, 368, 372, 374, 375, 378, 379, 381, 382, 383, 385, 386, 387, 388, 390, 391, 392, 393, 395, 396, 397, 398, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 546, 547, 548, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 672, 673, 674, 676, 677, 678, 679, 681, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 698, 699, 700, 702, 703, 704, 705, 706, 707, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 730, 731, 732, 733, 735, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 772, 774, 775, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 884, 885, 886, 887, 890, 892, 893, 895, 897, 902, 903, 904, 905, 906, 907, 908, 917, 919, 920, 922, 923, 924, 925, 927, 928, 929, 935, 938, 940, 941, 943, 944, 946, 948, 950, 953, 954, 955, 957, 958, 960, 961, 964, 966, 968, 969, 970, 979, 983, 986, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "hyper": [4, 26, 67, 107, 233, 239, 244, 277, 308, 329, 348, 358, 359, 360, 369, 378, 381, 383, 433, 609, 610, 767, 775, 777, 822, 864, 949, 950, 954, 957, 968, 969, 979, 990, 995, 1009], "paramet": [4, 5, 9, 10, 11, 14, 15, 16, 26, 32, 41, 51, 52, 55, 57, 58, 59, 67, 68, 69, 74, 76, 77, 85, 87, 99, 101, 103, 105, 107, 110, 111, 112, 115, 116, 117, 127, 133, 136, 138, 139, 142, 143, 144, 145, 146, 147, 149, 150, 151, 154, 155, 161, 162, 163, 164, 166, 167, 169, 170, 171, 173, 174, 182, 184, 186, 187, 190, 191, 199, 200, 206, 207, 209, 211, 214, 215, 216, 225, 226, 227, 228, 230, 231, 233, 234, 238, 239, 240, 241, 243, 244, 247, 250, 251, 252, 254, 256, 259, 261, 262, 265, 266, 272, 274, 275, 277, 279, 280, 281, 284, 288, 289, 291, 292, 293, 294, 301, 303, 305, 310, 312, 313, 315, 317, 318, 320, 321, 322, 324, 325, 326, 327, 329, 333, 334, 335, 338, 339, 341, 349, 351, 352, 353, 354, 355, 358, 365, 369, 372, 374, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 541, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 895, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 944, 945, 946, 947, 948, 949, 951, 953, 956, 957, 958, 959, 960, 961, 962, 964, 966, 967, 968, 970, 973, 974, 975, 980, 982, 984, 985, 986, 990, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "compos": [4, 5, 24, 65, 66, 67, 71, 80, 103, 111, 122, 151, 154, 155, 156, 182, 184, 200, 211, 219, 221, 223, 256, 285, 289, 291, 292, 293, 295, 359, 365, 374, 375, 378, 480, 577, 953, 975, 995], "columntransform": [4, 66, 67, 122, 154, 155, 156, 182, 200, 211, 219, 221, 223, 285, 289, 291, 292, 293, 295, 338, 340, 358, 359, 365, 431, 432, 594, 831, 943, 944, 974, 990, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "ensembl": [4, 7, 10, 13, 25, 26, 29, 53, 101, 102, 103, 104, 105, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 146, 149, 150, 155, 156, 157, 182, 203, 209, 218, 219, 221, 222, 236, 251, 256, 258, 281, 285, 288, 289, 290, 291, 293, 294, 295, 320, 325, 326, 329, 333, 350, 351, 359, 360, 365, 372, 374, 378, 383, 402, 469, 480, 597, 598, 600, 623, 667, 766, 767, 792, 796, 797, 827, 830, 839, 870, 874, 876, 877, 895, 943, 954, 955, 960, 961, 970, 973, 974, 975, 976, 990, 992, 995, 996, 997, 998, 999, 1000, 1001, 1002], "cross_valid": [4, 13, 111, 117, 122, 154, 184, 235, 242, 256, 285, 295, 346, 359, 365, 540, 787, 788, 954, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1010, 1011, 1012], "pipelin": [4, 29, 51, 55, 67, 70, 71, 80, 106, 107, 111, 128, 130, 132, 135, 136, 149, 150, 155, 156, 159, 161, 170, 171, 182, 183, 188, 196, 200, 203, 208, 209, 210, 212, 214, 219, 220, 223, 232, 236, 237, 238, 243, 246, 247, 250, 253, 259, 261, 262, 267, 268, 274, 277, 281, 284, 286, 288, 289, 290, 291, 292, 293, 294, 301, 320, 321, 329, 333, 338, 340, 341, 346, 349, 360, 365, 378, 382, 384, 388, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 429, 430, 432, 434, 435, 436, 437, 438, 439, 440, 441, 447, 448, 449, 450, 453, 467, 480, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 546, 547, 548, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 570, 572, 575, 576, 592, 593, 594, 595, 600, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 653, 654, 655, 656, 657, 662, 663, 665, 666, 667, 678, 761, 762, 763, 764, 765, 766, 767, 770, 772, 777, 781, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 822, 823, 824, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 943, 944, 946, 950, 957, 958, 963, 964, 968, 969, 973, 974, 975, 976, 978, 980, 982, 990, 995, 996, 998, 999, 1000, 1001, 1002, 1012], "make_pipelin": [4, 29, 55, 80, 106, 111, 122, 132, 133, 136, 149, 150, 154, 155, 159, 161, 170, 171, 182, 183, 188, 196, 200, 203, 209, 210, 211, 219, 220, 221, 223, 236, 246, 259, 268, 274, 281, 284, 285, 286, 288, 289, 290, 291, 292, 293, 321, 329, 359, 365, 375, 378, 532, 641, 643, 818, 826, 851, 852, 854, 855, 856, 857, 866, 867, 868, 869, 871, 872, 944, 957, 964, 968, 969, 998, 1005, 1008], "gbrt": [4, 13, 182, 381], "random_st": [4, 5, 6, 7, 10, 12, 13, 15, 19, 20, 21, 23, 24, 25, 26, 28, 29, 35, 39, 40, 41, 43, 45, 46, 47, 50, 52, 53, 54, 55, 56, 57, 58, 59, 66, 67, 71, 77, 80, 85, 87, 89, 92, 101, 102, 103, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 124, 125, 127, 132, 133, 135, 138, 147, 149, 150, 153, 154, 155, 156, 157, 159, 161, 163, 164, 168, 174, 181, 182, 185, 186, 188, 189, 190, 194, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 209, 210, 214, 217, 218, 219, 220, 222, 223, 225, 227, 228, 231, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 256, 258, 259, 262, 263, 267, 268, 269, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 300, 306, 308, 309, 310, 316, 317, 320, 321, 324, 328, 329, 348, 351, 355, 359, 360, 370, 374, 375, 378, 379, 381, 382, 386, 399, 402, 403, 405, 408, 412, 414, 416, 417, 418, 419, 423, 424, 425, 427, 434, 439, 443, 452, 453, 456, 457, 460, 462, 468, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 548, 549, 558, 559, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 590, 592, 597, 598, 599, 600, 603, 604, 605, 606, 607, 611, 612, 614, 615, 616, 617, 618, 619, 620, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 636, 637, 639, 641, 642, 643, 644, 646, 647, 648, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 675, 699, 752, 756, 757, 761, 762, 765, 766, 767, 768, 769, 775, 777, 778, 779, 780, 781, 782, 783, 785, 790, 791, 792, 793, 794, 796, 797, 798, 799, 800, 811, 815, 822, 823, 824, 826, 831, 843, 847, 855, 858, 859, 866, 867, 868, 871, 873, 874, 875, 876, 877, 879, 880, 900, 902, 903, 923, 925, 928, 943, 944, 946, 949, 954, 955, 956, 957, 958, 961, 962, 964, 969, 970, 979, 983, 984, 988, 992, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008], "categorical_column": [4, 111, 154, 156, 219, 432], "print": [4, 6, 7, 8, 10, 11, 12, 13, 15, 16, 17, 19, 20, 21, 23, 25, 28, 30, 35, 39, 40, 43, 44, 45, 46, 47, 49, 50, 55, 57, 58, 60, 64, 66, 67, 69, 70, 71, 75, 79, 80, 85, 87, 90, 94, 95, 97, 101, 104, 107, 108, 109, 110, 111, 113, 115, 117, 127, 128, 132, 133, 135, 136, 138, 139, 141, 143, 147, 153, 155, 156, 157, 159, 166, 167, 168, 169, 173, 174, 177, 178, 182, 184, 185, 186, 189, 190, 197, 198, 200, 203, 204, 207, 211, 213, 215, 216, 219, 223, 228, 233, 237, 238, 239, 240, 242, 244, 247, 248, 252, 259, 263, 270, 272, 275, 276, 277, 281, 284, 286, 288, 289, 290, 292, 294, 295, 297, 298, 301, 308, 320, 321, 322, 324, 328, 329, 333, 340, 341, 344, 347, 348, 354, 360, 365, 368, 375, 378, 381, 382, 384, 429, 432, 433, 437, 443, 455, 459, 467, 477, 478, 506, 509, 514, 515, 524, 525, 526, 527, 529, 530, 534, 535, 542, 548, 549, 550, 552, 553, 554, 556, 577, 582, 583, 595, 611, 612, 614, 615, 617, 618, 619, 621, 625, 626, 627, 628, 631, 632, 641, 642, 649, 661, 678, 682, 701, 759, 761, 762, 764, 765, 768, 770, 771, 772, 773, 776, 778, 779, 780, 781, 782, 783, 784, 788, 789, 790, 791, 793, 795, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 816, 817, 818, 823, 824, 825, 826, 827, 828, 836, 842, 846, 854, 864, 865, 866, 867, 868, 871, 873, 879, 885, 890, 915, 922, 938, 944, 954, 955, 956, 957, 962, 970, 979, 983, 984, 986, 987, 988, 995, 997, 1003, 1004, 1006, 1010], "tolist": [4, 113, 149, 238, 290, 341], "across": [4, 13, 52, 58, 64, 79, 83, 107, 127, 154, 171, 176, 203, 234, 236, 239, 259, 279, 284, 312, 347, 348, 355, 360, 368, 373, 374, 378, 382, 383, 386, 402, 405, 415, 417, 419, 422, 425, 427, 434, 437, 439, 453, 456, 457, 460, 462, 468, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 516, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 532, 533, 553, 556, 559, 567, 572, 573, 575, 576, 597, 598, 599, 604, 605, 606, 607, 611, 612, 615, 617, 618, 619, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 636, 641, 643, 644, 650, 651, 654, 655, 656, 657, 658, 659, 660, 669, 670, 682, 695, 721, 752, 757, 759, 761, 762, 763, 764, 765, 766, 767, 768, 769, 775, 777, 778, 779, 780, 781, 782, 783, 785, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 811, 815, 822, 823, 824, 831, 835, 836, 843, 844, 846, 847, 855, 858, 859, 861, 862, 866, 867, 868, 871, 874, 875, 902, 903, 922, 925, 928, 943, 950, 952, 954, 964, 968, 970, 974, 978, 988, 995, 998, 1001, 1002, 1003, 1004, 1005], "numpi": [4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 23, 24, 25, 26, 28, 29, 31, 32, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 71, 73, 74, 75, 76, 77, 79, 80, 83, 85, 87, 88, 89, 90, 91, 93, 94, 96, 97, 102, 103, 104, 108, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 127, 129, 131, 132, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 153, 154, 155, 156, 157, 161, 162, 163, 164, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 203, 204, 205, 207, 209, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 225, 226, 227, 228, 229, 230, 231, 233, 234, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 258, 259, 263, 264, 265, 266, 268, 269, 270, 271, 272, 274, 277, 279, 280, 281, 282, 283, 284, 286, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 304, 306, 307, 308, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 325, 326, 327, 328, 329, 333, 339, 340, 341, 344, 346, 347, 348, 349, 350, 352, 354, 355, 358, 359, 360, 364, 365, 367, 368, 370, 371, 374, 375, 378, 379, 380, 381, 382, 387, 388, 389, 390, 391, 392, 395, 396, 397, 398, 404, 405, 406, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 450, 455, 458, 459, 461, 468, 471, 473, 474, 486, 492, 496, 499, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 534, 535, 546, 547, 550, 551, 553, 554, 556, 566, 569, 583, 592, 593, 594, 595, 596, 597, 598, 608, 611, 612, 614, 617, 618, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 635, 637, 641, 642, 643, 649, 652, 653, 656, 657, 658, 659, 660, 664, 667, 668, 671, 672, 674, 677, 679, 690, 691, 693, 694, 696, 698, 699, 702, 703, 718, 720, 737, 743, 745, 746, 747, 748, 751, 752, 753, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 770, 771, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 789, 792, 793, 794, 795, 798, 799, 801, 802, 803, 804, 805, 806, 807, 811, 812, 813, 814, 815, 816, 817, 818, 822, 823, 824, 829, 830, 833, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 866, 868, 869, 871, 872, 874, 882, 883, 884, 885, 889, 891, 900, 901, 902, 903, 907, 908, 909, 916, 917, 923, 925, 928, 929, 930, 931, 932, 933, 934, 935, 940, 941, 943, 944, 949, 950, 952, 954, 955, 957, 960, 964, 966, 969, 970, 972, 974, 979, 982, 983, 984, 986, 987, 988, 995, 998, 999, 1001, 1002, 1003, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "np": [4, 5, 7, 8, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 23, 24, 25, 26, 28, 29, 31, 32, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 71, 73, 74, 75, 76, 77, 79, 80, 85, 88, 89, 90, 91, 93, 94, 96, 97, 102, 103, 104, 108, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 127, 129, 131, 132, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 153, 154, 155, 156, 157, 161, 162, 163, 164, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 203, 204, 205, 207, 209, 212, 213, 214, 215, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 233, 234, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 258, 259, 263, 264, 265, 266, 268, 269, 270, 271, 272, 274, 277, 279, 280, 281, 282, 283, 284, 286, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 304, 306, 307, 308, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 325, 326, 327, 328, 329, 333, 340, 341, 346, 348, 351, 352, 355, 358, 360, 365, 371, 374, 375, 378, 379, 380, 381, 382, 384, 387, 388, 389, 390, 391, 392, 395, 396, 397, 398, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 450, 461, 462, 473, 474, 485, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 522, 523, 524, 525, 526, 528, 529, 530, 531, 534, 535, 546, 547, 550, 551, 553, 554, 558, 559, 562, 566, 569, 571, 574, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 606, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 633, 635, 636, 637, 639, 640, 641, 642, 643, 646, 647, 648, 649, 652, 656, 657, 659, 660, 664, 667, 668, 671, 672, 674, 677, 678, 679, 680, 690, 691, 693, 694, 696, 698, 699, 702, 703, 705, 718, 720, 727, 733, 737, 742, 745, 746, 747, 748, 751, 752, 753, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 788, 789, 790, 792, 793, 794, 795, 798, 799, 801, 802, 803, 804, 805, 806, 807, 811, 812, 813, 814, 816, 817, 818, 822, 823, 830, 831, 833, 839, 840, 841, 842, 843, 845, 846, 847, 854, 855, 858, 859, 861, 862, 863, 866, 868, 869, 871, 872, 874, 875, 876, 877, 882, 883, 884, 885, 886, 887, 889, 891, 892, 901, 902, 903, 908, 909, 916, 917, 919, 923, 925, 928, 929, 930, 931, 932, 933, 934, 935, 940, 943, 944, 949, 950, 952, 954, 955, 957, 958, 960, 964, 965, 966, 968, 969, 970, 979, 983, 984, 986, 987, 988, 996, 998, 1001, 1003, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "def": [4, 5, 6, 7, 8, 10, 11, 13, 14, 15, 16, 17, 19, 24, 26, 31, 32, 34, 37, 38, 45, 49, 52, 53, 55, 58, 66, 71, 85, 87, 89, 90, 94, 96, 99, 101, 104, 106, 111, 113, 114, 117, 122, 141, 144, 146, 147, 150, 157, 162, 170, 171, 174, 179, 182, 183, 190, 191, 192, 200, 202, 203, 216, 217, 219, 225, 226, 227, 228, 230, 231, 234, 237, 238, 239, 240, 242, 247, 250, 253, 259, 264, 266, 269, 272, 275, 277, 279, 281, 284, 285, 288, 301, 304, 308, 312, 318, 320, 321, 322, 333, 341, 346, 348, 352, 353, 358, 375, 378, 382, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 473, 474, 498, 562, 566, 575, 576, 583, 745, 839, 893, 898, 915, 954, 961, 969, 984], "model_prop": 4, "none": [4, 8, 9, 10, 13, 16, 17, 25, 28, 31, 36, 38, 39, 41, 49, 51, 52, 53, 59, 89, 92, 96, 105, 110, 111, 113, 116, 117, 129, 136, 139, 145, 146, 157, 161, 182, 183, 190, 193, 200, 202, 215, 216, 217, 219, 233, 239, 240, 251, 264, 266, 270, 283, 286, 290, 291, 298, 301, 306, 308, 309, 312, 313, 315, 320, 321, 341, 343, 346, 348, 353, 355, 360, 365, 374, 378, 381, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 468, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 546, 547, 548, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 665, 666, 667, 668, 672, 673, 674, 676, 677, 678, 679, 681, 683, 685, 686, 687, 688, 690, 691, 692, 693, 694, 696, 698, 699, 702, 703, 704, 705, 706, 707, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 722, 723, 724, 725, 727, 728, 730, 731, 732, 733, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 751, 752, 753, 754, 755, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 855, 858, 859, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 878, 879, 880, 881, 883, 885, 886, 887, 889, 890, 891, 892, 895, 897, 902, 903, 906, 907, 908, 909, 913, 914, 917, 920, 922, 923, 925, 928, 929, 935, 938, 939, 941, 943, 950, 954, 964, 967, 970, 979, 983, 988, 990, 995, 996, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "model_step": 4, "cv_result": [4, 13, 67, 107, 117, 237, 238, 240, 242, 365, 777, 789, 954], "score": [4, 6, 8, 11, 13, 16, 20, 21, 23, 24, 25, 26, 29, 30, 31, 34, 55, 57, 66, 67, 68, 69, 70, 71, 73, 77, 80, 94, 99, 101, 103, 110, 111, 112, 113, 114, 117, 118, 121, 122, 128, 131, 132, 133, 136, 149, 151, 153, 154, 155, 156, 157, 159, 166, 173, 174, 177, 182, 184, 188, 190, 198, 200, 209, 214, 215, 216, 219, 223, 229, 232, 237, 239, 240, 241, 242, 243, 244, 247, 248, 250, 251, 252, 253, 254, 256, 258, 266, 267, 268, 274, 275, 276, 277, 281, 283, 284, 285, 286, 288, 289, 290, 291, 295, 297, 298, 300, 301, 308, 316, 320, 321, 324, 329, 341, 346, 348, 351, 359, 360, 368, 369, 371, 372, 373, 375, 377, 379, 381, 383, 391, 393, 397, 402, 408, 412, 414, 417, 430, 434, 435, 436, 437, 438, 439, 440, 441, 447, 448, 449, 467, 469, 497, 501, 506, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 532, 533, 534, 535, 557, 558, 559, 560, 561, 563, 564, 565, 567, 568, 569, 571, 574, 575, 576, 578, 579, 580, 581, 584, 585, 586, 587, 588, 589, 590, 599, 600, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 663, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 700, 701, 702, 703, 704, 706, 719, 720, 721, 746, 747, 748, 749, 750, 751, 752, 753, 758, 759, 760, 761, 762, 763, 766, 767, 769, 777, 782, 785, 787, 788, 789, 790, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 811, 812, 813, 815, 816, 817, 822, 823, 824, 826, 846, 861, 862, 863, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 905, 912, 943, 946, 950, 952, 957, 960, 962, 964, 968, 974, 975, 982, 984, 986, 988, 990, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "neg_mean_absolute_error": [4, 122, 184, 954], "neg_root_mean_squared_error": [4, 117, 285, 954], "return_estim": [4, 154, 295, 378, 789, 1003], "getattr": [4, 8, 279, 348, 360, 1011], "els": [4, 8, 11, 12, 13, 16, 19, 32, 38, 41, 46, 52, 53, 59, 77, 91, 104, 110, 111, 114, 117, 146, 154, 155, 171, 184, 200, 203, 209, 213, 215, 216, 217, 218, 219, 239, 240, 243, 250, 259, 264, 272, 274, 275, 281, 320, 321, 328, 346, 350, 352, 381, 382, 384, 386, 394, 402, 414, 473, 485, 498, 534, 583, 590, 609, 610, 611, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 635, 637, 638, 639, 641, 644, 646, 647, 648, 649, 668, 674, 752, 758, 760, 766, 767, 792, 830, 842, 845, 853, 866, 867, 881, 916, 918, 920, 941, 970], "mae": [4, 13, 122, 182, 184, 523, 530, 709, 875, 877, 954, 970, 1002, 1003, 1007, 1008], "test_neg_mean_absolute_error": [4, 184], "rmse": [4, 13, 76, 117, 285, 714, 954, 1006], "test_neg_root_mean_squared_error": 4, "3f": [4, 6, 8, 11, 13, 15, 17, 21, 23, 25, 35, 37, 44, 45, 46, 55, 67, 69, 71, 80, 101, 108, 109, 117, 132, 136, 138, 139, 140, 142, 147, 153, 155, 156, 162, 166, 168, 174, 182, 184, 188, 197, 198, 200, 203, 213, 215, 237, 239, 240, 242, 245, 247, 250, 259, 274, 301, 320, 321, 322, 791, 962, 984], "std": [4, 11, 12, 13, 34, 43, 47, 51, 58, 63, 74, 76, 77, 88, 89, 90, 108, 110, 111, 117, 122, 147, 149, 150, 154, 162, 167, 191, 213, 237, 238, 239, 241, 242, 244, 247, 249, 253, 285, 300, 311, 321, 329, 360, 374, 378, 381, 480, 571, 574, 791, 846, 857, 964, 983, 987, 1003, 1007], "n": [4, 5, 7, 8, 10, 11, 15, 17, 19, 30, 31, 34, 36, 37, 55, 66, 71, 75, 79, 85, 87, 90, 92, 94, 96, 97, 101, 103, 104, 108, 124, 131, 136, 138, 142, 147, 155, 157, 162, 166, 178, 182, 183, 186, 197, 199, 200, 202, 212, 213, 214, 217, 225, 227, 228, 237, 239, 242, 244, 245, 246, 248, 249, 259, 262, 264, 277, 281, 283, 284, 290, 293, 295, 298, 312, 316, 328, 333, 340, 343, 344, 346, 350, 352, 355, 360, 364, 365, 371, 372, 374, 377, 378, 379, 380, 381, 382, 384, 385, 409, 410, 412, 413, 415, 434, 436, 439, 443, 454, 480, 481, 482, 483, 488, 493, 503, 505, 506, 512, 522, 523, 524, 525, 528, 529, 530, 531, 553, 554, 555, 556, 572, 573, 579, 592, 614, 636, 644, 657, 661, 664, 671, 672, 719, 768, 771, 773, 778, 779, 782, 802, 806, 807, 811, 831, 858, 860, 874, 875, 876, 877, 883, 901, 906, 907, 929, 933, 934, 943, 946, 948, 950, 951, 954, 955, 956, 957, 958, 960, 961, 964, 966, 968, 969, 970, 979, 986, 988, 995, 997, 998, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1012], "n_iter_": [4, 90, 117, 190, 228, 360, 405, 412, 413, 414, 436, 437, 447, 448, 449, 496, 497, 498, 501, 502, 503, 504, 505, 508, 526, 527, 592, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 639, 641, 642, 643, 644, 645, 655, 657, 761, 762, 815, 823, 824, 861, 862, 863, 866, 867, 868, 869, 870, 871, 872, 999, 1002, 1003, 1005, 1008, 1009, 1011], "100": [4, 5, 7, 10, 12, 13, 16, 17, 19, 24, 26, 34, 39, 47, 50, 54, 58, 63, 67, 68, 71, 74, 75, 87, 89, 90, 96, 102, 107, 117, 118, 121, 124, 139, 143, 146, 147, 154, 155, 157, 159, 161, 162, 164, 166, 168, 172, 173, 174, 176, 181, 182, 183, 184, 186, 191, 192, 193, 195, 197, 198, 200, 204, 205, 207, 212, 213, 214, 215, 216, 220, 225, 227, 231, 234, 235, 237, 239, 242, 244, 249, 250, 253, 264, 265, 266, 277, 280, 281, 283, 285, 286, 291, 295, 301, 302, 306, 307, 309, 310, 311, 315, 316, 318, 320, 321, 324, 327, 328, 333, 335, 341, 343, 346, 348, 351, 352, 365, 371, 374, 375, 378, 379, 380, 381, 382, 402, 406, 410, 414, 436, 437, 443, 455, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 493, 495, 499, 501, 504, 509, 510, 511, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 570, 572, 575, 596, 597, 598, 604, 605, 606, 607, 611, 612, 613, 614, 617, 618, 623, 624, 625, 626, 627, 628, 630, 632, 634, 636, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 660, 661, 710, 761, 762, 765, 790, 791, 796, 801, 802, 803, 805, 806, 807, 811, 823, 824, 842, 844, 847, 856, 873, 943, 944, 947, 951, 954, 955, 961, 964, 966, 975, 979, 983, 987, 988, 1003, 1004, 1005, 1008, 1009], "044": [4, 150, 216, 237, 321, 715, 954, 975], "003": [4, 29, 975], "068": [4, 13, 128, 239, 975], "005": [4, 108, 239, 243, 264, 279, 321, 352], "max_it": [4, 8, 13, 15, 17, 24, 26, 28, 29, 68, 69, 87, 90, 106, 107, 111, 117, 124, 127, 128, 147, 149, 150, 154, 155, 161, 168, 174, 175, 189, 190, 191, 194, 195, 197, 202, 203, 204, 205, 207, 220, 221, 225, 226, 227, 228, 231, 252, 269, 274, 275, 276, 285, 290, 291, 292, 297, 298, 305, 320, 321, 352, 360, 381, 386, 405, 408, 412, 413, 414, 419, 424, 426, 436, 437, 443, 447, 448, 449, 496, 497, 498, 500, 501, 502, 503, 504, 505, 508, 510, 511, 512, 513, 526, 527, 592, 603, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 637, 639, 641, 642, 643, 644, 645, 647, 648, 652, 653, 654, 655, 657, 658, 659, 761, 762, 777, 815, 823, 824, 861, 862, 863, 866, 867, 868, 869, 870, 871, 872, 944, 946, 950, 957, 958, 967, 968, 984, 988, 996, 999, 1002, 1003, 1004, 1005, 1007, 1009, 1010, 1011, 1012, 1013], "earli": [4, 7, 15, 41, 59, 100, 101, 107, 110, 151, 160, 170, 283, 289, 360, 381, 406, 410, 414, 428, 455, 461, 501, 502, 503, 504, 511, 518, 519, 524, 525, 526, 527, 536, 592, 610, 621, 631, 632, 633, 641, 643, 657, 714, 792, 823, 824, 928, 951, 957, 964, 972, 974, 975, 978, 995, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1009, 1010, 1012], "stop": [4, 7, 12, 17, 41, 59, 100, 101, 107, 143, 145, 151, 155, 160, 170, 184, 283, 289, 346, 348, 354, 355, 360, 374, 379, 381, 383, 405, 406, 408, 410, 412, 414, 417, 419, 427, 428, 436, 437, 443, 447, 448, 449, 455, 461, 473, 474, 497, 501, 502, 503, 504, 505, 508, 510, 511, 512, 518, 519, 522, 523, 524, 525, 526, 527, 529, 530, 536, 553, 554, 556, 567, 582, 592, 609, 610, 611, 613, 614, 617, 621, 623, 624, 631, 632, 633, 634, 636, 641, 642, 643, 645, 656, 657, 660, 679, 714, 761, 762, 792, 823, 824, 863, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 908, 928, 943, 950, 958, 959, 969, 970, 974, 975, 976, 978, 990, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1009, 1010, 1011, 1012], "place": [4, 16, 57, 210, 220, 263, 333, 344, 346, 347, 348, 351, 353, 361, 372, 382, 384, 406, 410, 411, 447, 448, 449, 480, 546, 555, 593, 595, 596, 732, 745, 761, 849, 851, 852, 853, 854, 855, 856, 857, 933, 934, 973, 995, 1002, 1005, 1006, 1008, 1012, 1013], "an": [4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 21, 24, 25, 26, 31, 32, 33, 34, 36, 37, 38, 40, 41, 43, 45, 47, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 63, 64, 66, 67, 68, 69, 71, 73, 74, 75, 76, 82, 87, 88, 89, 90, 91, 92, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 114, 115, 117, 118, 119, 120, 121, 122, 125, 128, 129, 132, 136, 138, 139, 140, 143, 144, 145, 147, 148, 149, 151, 153, 154, 155, 156, 159, 160, 161, 162, 165, 166, 170, 177, 182, 183, 184, 186, 187, 189, 190, 196, 198, 199, 200, 202, 203, 204, 205, 207, 209, 210, 212, 213, 214, 215, 216, 217, 219, 223, 225, 226, 228, 230, 231, 233, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 248, 250, 252, 254, 258, 259, 262, 265, 266, 267, 270, 272, 279, 284, 285, 286, 289, 290, 291, 293, 294, 295, 298, 302, 304, 305, 307, 308, 310, 311, 312, 320, 321, 322, 324, 327, 328, 329, 333, 334, 335, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 359, 360, 361, 363, 364, 365, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 395, 398, 399, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 468, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 540, 541, 545, 546, 547, 548, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 571, 572, 573, 575, 576, 577, 584, 587, 588, 592, 593, 594, 595, 596, 597, 598, 599, 600, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 674, 676, 677, 683, 685, 686, 691, 693, 694, 698, 699, 701, 706, 707, 709, 710, 712, 714, 715, 717, 720, 722, 723, 727, 728, 730, 731, 732, 733, 734, 737, 739, 740, 741, 742, 745, 746, 747, 748, 751, 752, 753, 754, 755, 756, 757, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 772, 774, 775, 777, 778, 779, 780, 781, 782, 783, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 878, 879, 881, 883, 884, 886, 887, 889, 890, 893, 897, 898, 899, 901, 902, 903, 905, 907, 910, 911, 912, 913, 914, 915, 917, 918, 919, 922, 924, 925, 928, 929, 935, 938, 940, 941, 942, 944, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 961, 962, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 977, 978, 980, 982, 983, 987, 988, 990, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "quit": [4, 13, 26, 50, 54, 80, 104, 127, 136, 154, 155, 180, 200, 247, 256, 291, 320, 333, 351, 359, 374, 382, 949, 951, 956, 978, 1003], "good": [4, 9, 20, 24, 26, 37, 41, 43, 46, 49, 50, 52, 55, 70, 76, 80, 96, 107, 110, 113, 114, 117, 139, 143, 149, 154, 166, 171, 182, 183, 188, 197, 207, 209, 213, 216, 219, 226, 228, 233, 239, 245, 254, 277, 284, 285, 290, 297, 302, 308, 320, 321, 329, 333, 334, 335, 345, 347, 348, 349, 350, 352, 358, 360, 368, 371, 372, 374, 376, 378, 379, 381, 382, 383, 384, 402, 404, 409, 499, 524, 526, 527, 555, 595, 605, 612, 613, 621, 623, 624, 626, 634, 645, 655, 659, 687, 695, 706, 728, 791, 860, 903, 943, 949, 950, 951, 954, 955, 957, 958, 959, 961, 962, 964, 968, 969, 970, 974, 978, 979, 983, 986, 988, 1001], "trial": [4, 244, 412, 414, 425, 636, 761, 762, 950, 1001], "without": [4, 5, 13, 14, 23, 33, 39, 41, 44, 49, 52, 53, 59, 63, 64, 71, 92, 107, 112, 113, 116, 117, 119, 122, 128, 132, 136, 145, 151, 153, 154, 155, 166, 171, 190, 209, 213, 216, 217, 219, 220, 222, 233, 240, 244, 246, 256, 259, 260, 261, 262, 268, 269, 270, 271, 279, 280, 284, 286, 288, 312, 316, 321, 335, 341, 342, 344, 346, 347, 348, 350, 351, 352, 355, 358, 359, 360, 365, 368, 374, 375, 379, 381, 382, 383, 384, 399, 404, 406, 411, 423, 434, 439, 461, 469, 480, 497, 499, 520, 521, 528, 544, 545, 576, 592, 596, 599, 604, 624, 657, 665, 745, 766, 767, 768, 775, 777, 791, 792, 808, 815, 819, 825, 826, 829, 832, 835, 836, 838, 842, 843, 844, 846, 851, 866, 882, 923, 943, 944, 946, 948, 950, 951, 954, 957, 960, 964, 968, 969, 970, 973, 974, 975, 979, 980, 988, 992, 995, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1009, 1010, 1011, 1012, 1013], "ani": [4, 8, 9, 13, 14, 19, 41, 43, 52, 54, 64, 117, 119, 131, 136, 143, 144, 145, 153, 154, 155, 156, 157, 171, 182, 186, 200, 209, 212, 213, 216, 226, 230, 231, 239, 240, 242, 245, 248, 256, 272, 279, 280, 283, 288, 290, 291, 293, 308, 312, 322, 329, 333, 334, 335, 340, 341, 343, 344, 346, 348, 350, 351, 352, 354, 359, 360, 361, 364, 365, 370, 371, 372, 373, 374, 375, 378, 379, 380, 381, 382, 383, 399, 405, 411, 413, 414, 415, 417, 419, 421, 422, 426, 429, 432, 453, 454, 473, 474, 488, 499, 502, 504, 511, 516, 522, 523, 524, 525, 529, 530, 531, 532, 533, 534, 535, 544, 545, 547, 553, 554, 556, 558, 568, 575, 576, 585, 592, 597, 598, 610, 613, 623, 624, 631, 632, 633, 634, 641, 642, 643, 644, 645, 657, 661, 664, 665, 669, 681, 682, 684, 688, 700, 701, 716, 719, 721, 738, 742, 743, 744, 745, 756, 757, 759, 763, 766, 767, 775, 776, 795, 798, 806, 807, 812, 816, 825, 826, 830, 831, 835, 837, 839, 840, 847, 856, 857, 860, 863, 866, 867, 874, 875, 876, 877, 878, 880, 882, 886, 887, 924, 938, 943, 944, 946, 949, 950, 951, 954, 955, 956, 957, 960, 961, 962, 964, 966, 967, 968, 969, 970, 973, 977, 979, 981, 985, 986, 988, 996, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "tune": [4, 26, 41, 52, 67, 92, 101, 107, 117, 135, 138, 149, 155, 171, 186, 187, 199, 206, 219, 233, 244, 261, 280, 308, 312, 316, 320, 329, 333, 334, 335, 359, 360, 369, 372, 373, 374, 378, 381, 383, 384, 417, 427, 524, 525, 559, 578, 579, 580, 582, 584, 585, 587, 588, 590, 608, 624, 655, 659, 822, 871, 948, 949, 950, 951, 953, 954, 957, 958, 960, 968, 969, 980, 990, 995, 1009, 1011], "just": [4, 13, 29, 66, 80, 87, 107, 111, 117, 136, 172, 179, 203, 214, 239, 246, 250, 259, 274, 308, 320, 321, 328, 329, 341, 345, 346, 347, 348, 350, 351, 354, 358, 359, 360, 371, 374, 375, 378, 381, 383, 386, 433, 498, 500, 507, 511, 520, 521, 522, 523, 524, 525, 528, 529, 530, 531, 544, 549, 575, 576, 611, 617, 622, 623, 625, 627, 631, 632, 633, 641, 642, 643, 769, 785, 815, 823, 824, 943, 950, 953, 954, 955, 958, 962, 964, 968, 974, 986, 995, 999, 1001, 1003, 1007, 1011], "had": [4, 9, 44, 114, 117, 143, 216, 279, 285, 291, 329, 346, 347, 365, 382, 385, 409, 944, 954, 978, 979, 995, 996, 1002, 1003, 1004, 1005, 1006, 1010], "explicit": [4, 117, 151, 155, 159, 208, 216, 254, 312, 333, 334, 335, 345, 347, 358, 360, 361, 365, 375, 382, 388, 437, 464, 466, 467, 506, 516, 517, 596, 603, 604, 606, 641, 763, 764, 771, 810, 818, 826, 866, 871, 918, 922, 946, 948, 950, 954, 964, 970, 973, 975, 995, 999, 1004, 1005, 1008, 1012], "pass": [4, 7, 8, 20, 21, 32, 35, 107, 117, 119, 133, 163, 166, 183, 210, 212, 213, 216, 219, 220, 222, 230, 237, 240, 286, 288, 291, 313, 322, 329, 333, 334, 335, 341, 346, 347, 348, 351, 352, 353, 354, 355, 358, 360, 365, 368, 370, 374, 375, 378, 379, 381, 382, 384, 385, 386, 391, 392, 396, 397, 402, 403, 405, 407, 408, 409, 411, 412, 413, 414, 415, 417, 419, 422, 424, 425, 427, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 447, 448, 449, 453, 456, 457, 460, 461, 462, 468, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 546, 547, 553, 554, 555, 556, 558, 559, 562, 572, 573, 575, 576, 582, 585, 591, 596, 597, 599, 600, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 649, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 696, 697, 706, 727, 738, 742, 743, 744, 745, 752, 756, 757, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 772, 775, 777, 778, 779, 780, 781, 782, 783, 785, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 822, 823, 824, 825, 826, 829, 830, 831, 832, 833, 837, 838, 839, 840, 841, 843, 845, 846, 847, 855, 856, 857, 858, 859, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 885, 886, 887, 893, 897, 898, 902, 903, 905, 907, 909, 911, 914, 915, 922, 924, 925, 928, 943, 944, 950, 952, 954, 955, 956, 957, 958, 961, 964, 967, 968, 969, 974, 978, 979, 983, 992, 995, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "them": [4, 5, 8, 30, 36, 37, 46, 50, 52, 53, 57, 62, 63, 66, 67, 80, 87, 89, 92, 102, 118, 131, 136, 138, 149, 150, 154, 155, 156, 159, 161, 166, 177, 183, 184, 186, 200, 213, 216, 219, 220, 237, 239, 240, 242, 248, 256, 261, 279, 284, 286, 291, 301, 308, 322, 328, 333, 335, 341, 344, 346, 347, 348, 349, 350, 354, 358, 360, 361, 363, 365, 368, 372, 373, 374, 375, 378, 379, 381, 382, 384, 409, 412, 414, 415, 422, 429, 432, 458, 459, 473, 532, 533, 534, 535, 572, 573, 581, 585, 586, 589, 597, 604, 629, 657, 732, 735, 738, 742, 743, 744, 745, 753, 763, 777, 784, 791, 826, 830, 835, 836, 840, 844, 846, 847, 856, 857, 863, 874, 875, 911, 920, 943, 944, 950, 953, 954, 955, 957, 958, 959, 964, 969, 970, 972, 973, 977, 978, 979, 986, 987, 988, 995, 996, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "But": [4, 9, 50, 153, 183, 184, 239, 259, 279, 346, 358, 374, 377, 380, 381, 427, 710, 874, 875, 943, 954, 969, 974], "much": [4, 6, 7, 9, 13, 19, 24, 37, 52, 75, 77, 85, 90, 96, 106, 114, 115, 122, 123, 124, 138, 149, 150, 154, 155, 156, 157, 159, 179, 180, 184, 213, 216, 219, 239, 241, 242, 245, 250, 276, 280, 284, 285, 286, 290, 291, 293, 308, 313, 320, 321, 329, 333, 334, 335, 341, 346, 347, 348, 351, 354, 358, 359, 364, 372, 373, 376, 377, 378, 379, 380, 381, 382, 383, 412, 413, 461, 499, 500, 501, 503, 524, 525, 526, 527, 623, 624, 631, 632, 633, 641, 642, 643, 657, 743, 744, 766, 767, 781, 841, 859, 866, 943, 946, 949, 950, 951, 953, 954, 955, 957, 958, 960, 962, 966, 967, 969, 970, 974, 978, 983, 984, 986, 987, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "monoton": [4, 24, 100, 151, 155, 200, 212, 220, 289, 372, 522, 523, 526, 527, 529, 530, 597, 600, 601, 659, 671, 842, 854, 868, 871, 874, 875, 876, 877, 951, 955, 964, 969, 975, 1002, 1006, 1010, 1012], "relationship": [4, 13, 20, 101, 102, 117, 144, 153, 154, 161, 166, 182, 184, 185, 246, 258, 280, 286, 295, 360, 374, 376, 378, 427, 461, 601, 679, 951, 954, 956, 957, 961, 962, 986, 1000], "ordin": [4, 50, 67, 122, 219, 282, 285, 286, 290, 293, 340, 360, 381, 461, 532, 674, 831, 834, 839, 840, 847, 950, 951, 964, 974, 1003, 1009], "case": [4, 7, 8, 13, 24, 26, 32, 34, 46, 49, 52, 54, 58, 63, 67, 68, 76, 80, 92, 94, 104, 106, 107, 114, 115, 122, 133, 135, 136, 138, 145, 154, 155, 157, 166, 168, 171, 173, 182, 183, 184, 186, 187, 190, 196, 198, 199, 200, 209, 213, 214, 215, 216, 219, 220, 230, 233, 236, 238, 239, 240, 242, 245, 246, 248, 256, 259, 262, 266, 276, 279, 281, 284, 286, 288, 291, 312, 320, 321, 322, 328, 329, 333, 334, 335, 340, 341, 344, 346, 347, 348, 350, 351, 352, 353, 355, 358, 359, 360, 361, 364, 365, 368, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 402, 405, 408, 409, 411, 412, 416, 418, 428, 429, 430, 432, 439, 461, 473, 474, 480, 504, 506, 507, 508, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 546, 547, 553, 556, 558, 559, 562, 567, 571, 574, 575, 576, 590, 592, 593, 595, 597, 612, 613, 618, 621, 622, 623, 624, 626, 628, 631, 633, 634, 637, 639, 640, 641, 645, 647, 648, 649, 650, 651, 652, 664, 668, 673, 674, 677, 683, 685, 686, 687, 690, 692, 693, 694, 698, 699, 702, 706, 707, 709, 710, 712, 714, 717, 718, 720, 727, 742, 745, 747, 748, 749, 751, 752, 753, 754, 758, 760, 762, 763, 766, 767, 769, 777, 781, 785, 786, 787, 788, 789, 790, 791, 793, 795, 803, 806, 807, 808, 809, 810, 812, 814, 815, 816, 817, 818, 826, 833, 835, 836, 839, 840, 841, 844, 845, 846, 847, 850, 856, 857, 858, 859, 866, 868, 871, 874, 875, 881, 882, 892, 903, 904, 922, 943, 944, 946, 948, 949, 951, 952, 953, 955, 956, 957, 958, 960, 961, 964, 968, 969, 970, 973, 974, 978, 979, 988, 992, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "usual": [4, 13, 37, 73, 74, 76, 113, 114, 116, 122, 153, 155, 168, 182, 183, 233, 236, 239, 248, 249, 280, 291, 308, 329, 333, 334, 344, 346, 348, 354, 358, 359, 360, 364, 365, 371, 374, 375, 378, 379, 381, 382, 383, 415, 421, 503, 505, 507, 512, 524, 525, 572, 573, 595, 605, 623, 624, 631, 632, 633, 641, 642, 643, 657, 690, 722, 769, 790, 794, 866, 903, 943, 944, 946, 949, 950, 951, 953, 954, 955, 958, 959, 960, 961, 964, 968, 969, 970, 979, 985, 986, 1010], "hot": [4, 67, 106, 109, 122, 154, 182, 248, 280, 281, 285, 290, 308, 360, 381, 382, 516, 531, 546, 613, 623, 624, 634, 645, 829, 831, 833, 834, 837, 839, 840, 847, 950, 964, 1003, 1009, 1010], "encod": [4, 8, 11, 45, 52, 67, 87, 106, 117, 122, 151, 154, 155, 156, 164, 181, 182, 219, 248, 278, 280, 281, 282, 290, 292, 293, 308, 320, 322, 338, 340, 342, 348, 351, 358, 360, 375, 378, 379, 381, 382, 384, 429, 452, 461, 468, 491, 496, 502, 504, 505, 507, 509, 510, 511, 513, 516, 526, 527, 531, 532, 534, 546, 553, 554, 556, 595, 613, 623, 624, 634, 637, 645, 699, 765, 770, 772, 789, 792, 826, 827, 829, 831, 833, 834, 837, 839, 840, 847, 850, 864, 943, 944, 950, 951, 954, 956, 957, 959, 968, 973, 974, 975, 990, 996, 997, 1003, 1007, 1009, 1010, 1011, 1012], "consist": [4, 7, 25, 30, 34, 53, 54, 66, 75, 83, 85, 87, 107, 111, 117, 118, 125, 136, 141, 143, 146, 150, 157, 182, 200, 215, 219, 245, 248, 276, 284, 288, 291, 316, 321, 329, 333, 339, 341, 343, 346, 348, 352, 353, 354, 355, 359, 360, 361, 372, 374, 376, 380, 381, 382, 392, 393, 396, 397, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 428, 429, 430, 432, 434, 435, 436, 437, 438, 439, 440, 441, 447, 448, 449, 455, 462, 496, 498, 499, 500, 501, 502, 503, 504, 505, 507, 508, 509, 519, 521, 522, 523, 524, 525, 527, 528, 529, 530, 531, 532, 533, 534, 535, 546, 547, 548, 553, 554, 556, 576, 592, 593, 594, 595, 600, 603, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 625, 626, 627, 628, 629, 630, 632, 635, 637, 638, 639, 642, 643, 644, 652, 653, 654, 655, 656, 665, 699, 761, 762, 770, 794, 795, 796, 798, 799, 800, 801, 809, 810, 812, 814, 817, 818, 824, 829, 830, 831, 833, 837, 838, 841, 842, 844, 845, 847, 858, 859, 862, 866, 867, 869, 870, 872, 875, 877, 886, 888, 909, 925, 928, 943, 946, 947, 948, 950, 951, 953, 954, 955, 957, 958, 964, 967, 969, 970, 972, 974, 978, 979, 986, 995, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "scale": [4, 5, 12, 24, 26, 34, 37, 40, 43, 44, 53, 55, 58, 67, 68, 74, 77, 80, 89, 92, 112, 119, 136, 138, 139, 140, 143, 144, 145, 147, 151, 155, 159, 162, 163, 170, 173, 182, 184, 186, 196, 197, 198, 200, 201, 204, 209, 215, 219, 230, 236, 239, 240, 241, 242, 246, 262, 264, 275, 276, 277, 278, 279, 289, 292, 294, 295, 302, 303, 305, 308, 312, 329, 332, 333, 338, 339, 340, 343, 346, 351, 355, 358, 359, 360, 373, 374, 375, 379, 381, 382, 383, 384, 411, 412, 415, 416, 422, 429, 434, 435, 436, 437, 438, 439, 440, 441, 447, 448, 449, 450, 466, 475, 479, 480, 489, 499, 503, 505, 506, 512, 514, 515, 526, 527, 547, 555, 556, 562, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 592, 596, 597, 606, 609, 610, 611, 612, 614, 617, 623, 624, 625, 626, 627, 637, 639, 641, 642, 643, 646, 652, 653, 654, 655, 657, 659, 664, 668, 681, 705, 711, 721, 723, 733, 739, 741, 769, 777, 780, 792, 793, 794, 806, 807, 808, 823, 824, 827, 830, 835, 836, 838, 841, 843, 844, 846, 851, 852, 853, 855, 856, 858, 859, 866, 867, 868, 869, 870, 871, 872, 929, 930, 931, 932, 935, 943, 946, 947, 950, 954, 955, 956, 957, 958, 962, 968, 969, 974, 975, 978, 979, 986, 987, 989, 990, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "same": [4, 7, 8, 13, 16, 20, 25, 32, 34, 37, 41, 50, 52, 54, 55, 61, 66, 67, 68, 85, 87, 89, 92, 94, 96, 102, 104, 108, 111, 114, 115, 117, 120, 136, 138, 154, 155, 157, 168, 170, 171, 176, 182, 183, 184, 190, 200, 216, 220, 230, 234, 235, 236, 237, 239, 240, 242, 244, 245, 247, 252, 259, 262, 264, 276, 279, 280, 282, 284, 285, 288, 290, 300, 308, 320, 321, 322, 328, 329, 333, 334, 335, 340, 341, 343, 345, 346, 348, 350, 352, 355, 358, 359, 360, 361, 365, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 395, 399, 403, 404, 411, 415, 421, 430, 434, 435, 436, 437, 438, 439, 440, 441, 443, 458, 460, 461, 463, 469, 473, 474, 496, 497, 500, 501, 502, 503, 504, 505, 508, 512, 514, 516, 517, 518, 519, 522, 524, 525, 526, 527, 529, 530, 532, 533, 554, 555, 567, 568, 571, 575, 576, 578, 587, 592, 593, 594, 597, 598, 611, 614, 617, 618, 620, 623, 624, 628, 631, 632, 633, 637, 638, 639, 640, 641, 642, 643, 649, 652, 664, 669, 670, 677, 678, 680, 682, 690, 695, 696, 700, 706, 719, 720, 721, 742, 743, 744, 750, 752, 756, 758, 759, 761, 762, 763, 764, 766, 767, 769, 771, 772, 777, 781, 782, 785, 787, 788, 789, 790, 791, 792, 793, 808, 809, 810, 814, 816, 817, 818, 829, 830, 831, 835, 836, 838, 840, 841, 842, 843, 844, 845, 846, 848, 855, 866, 867, 874, 876, 888, 892, 903, 920, 925, 928, 929, 939, 943, 944, 946, 948, 950, 951, 952, 953, 954, 955, 957, 958, 959, 960, 961, 962, 964, 968, 969, 970, 973, 974, 983, 988, 995, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "minmaxscal": [4, 5, 68, 132, 159, 203, 219, 275, 290, 335, 370, 375, 429, 852, 944, 964, 997, 1000, 1003, 1005, 1006, 1007, 1011, 1012], "although": [4, 9, 24, 108, 122, 153, 179, 200, 209, 227, 258, 312, 329, 335, 348, 360, 374, 375, 379, 382, 461, 780, 783, 837, 953, 955, 956, 957, 960, 970, 979, 986, 987, 988, 995, 1003, 1010], "doe": [4, 7, 8, 9, 12, 13, 23, 24, 29, 32, 37, 43, 50, 52, 54, 66, 68, 69, 80, 97, 101, 106, 107, 110, 111, 112, 116, 117, 122, 136, 144, 154, 155, 166, 179, 182, 188, 200, 202, 203, 204, 207, 209, 212, 213, 214, 216, 217, 219, 227, 228, 234, 239, 241, 242, 246, 248, 249, 258, 259, 272, 279, 281, 283, 285, 286, 291, 292, 300, 301, 306, 308, 316, 318, 320, 321, 322, 333, 334, 340, 344, 346, 347, 348, 350, 354, 359, 360, 365, 368, 372, 373, 374, 375, 378, 379, 381, 382, 383, 384, 399, 405, 407, 411, 412, 414, 415, 419, 421, 430, 432, 437, 438, 444, 452, 464, 468, 473, 492, 500, 502, 503, 504, 509, 511, 514, 515, 518, 519, 522, 523, 524, 525, 526, 527, 529, 530, 532, 533, 546, 547, 548, 553, 554, 556, 558, 559, 562, 567, 571, 575, 597, 603, 614, 615, 616, 619, 620, 621, 624, 636, 647, 648, 663, 665, 667, 672, 692, 693, 694, 698, 700, 702, 707, 710, 742, 747, 748, 751, 752, 758, 763, 766, 767, 777, 823, 827, 828, 829, 831, 833, 835, 838, 839, 840, 843, 846, 847, 855, 858, 859, 863, 866, 867, 874, 875, 876, 877, 881, 886, 890, 903, 906, 907, 920, 922, 938, 943, 944, 946, 948, 949, 950, 951, 953, 954, 955, 956, 957, 958, 960, 962, 964, 968, 969, 970, 988, 995, 996, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012], "result": [4, 5, 6, 9, 13, 14, 19, 23, 24, 25, 28, 30, 32, 34, 37, 39, 40, 41, 43, 45, 50, 51, 52, 57, 59, 63, 67, 69, 71, 76, 80, 87, 90, 92, 93, 97, 104, 105, 106, 108, 111, 112, 114, 115, 118, 120, 121, 129, 135, 136, 138, 140, 142, 146, 149, 154, 155, 156, 157, 162, 167, 168, 171, 172, 177, 183, 184, 186, 190, 196, 197, 200, 202, 203, 206, 209, 212, 214, 220, 225, 230, 231, 233, 234, 237, 239, 240, 242, 245, 246, 247, 248, 250, 251, 254, 256, 259, 261, 265, 274, 275, 276, 279, 280, 281, 284, 288, 290, 292, 293, 294, 295, 297, 300, 302, 308, 312, 313, 316, 320, 322, 326, 327, 328, 333, 334, 335, 340, 341, 343, 346, 348, 350, 351, 352, 354, 358, 359, 360, 361, 368, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 399, 405, 406, 408, 410, 411, 412, 415, 416, 417, 418, 419, 420, 422, 424, 427, 429, 432, 434, 435, 436, 437, 438, 439, 440, 441, 444, 454, 473, 474, 476, 478, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 516, 517, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 534, 544, 545, 546, 547, 549, 553, 554, 556, 572, 573, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 595, 596, 597, 599, 601, 605, 608, 617, 618, 623, 629, 630, 631, 632, 641, 642, 643, 651, 654, 655, 656, 657, 658, 659, 660, 673, 675, 677, 682, 689, 690, 692, 693, 694, 695, 696, 700, 701, 702, 718, 720, 721, 728, 735, 738, 742, 743, 744, 745, 747, 748, 749, 751, 757, 758, 761, 762, 763, 765, 766, 767, 768, 773, 777, 778, 779, 782, 783, 787, 793, 794, 795, 797, 798, 799, 800, 806, 807, 808, 809, 810, 811, 812, 814, 815, 816, 817, 818, 819, 820, 822, 823, 824, 825, 826, 828, 830, 831, 839, 840, 843, 844, 847, 855, 859, 863, 866, 868, 871, 874, 875, 876, 877, 878, 879, 886, 887, 902, 903, 905, 909, 919, 925, 928, 944, 946, 948, 949, 950, 951, 953, 954, 955, 957, 958, 959, 960, 961, 962, 964, 966, 968, 969, 970, 973, 974, 977, 979, 983, 984, 986, 987, 988, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "compar": [4, 5, 9, 13, 19, 20, 23, 24, 26, 32, 33, 34, 36, 37, 38, 40, 44, 46, 49, 51, 52, 53, 54, 55, 61, 64, 67, 68, 69, 70, 75, 76, 78, 80, 84, 85, 90, 94, 96, 100, 101, 102, 104, 106, 110, 111, 112, 114, 116, 117, 118, 120, 122, 125, 128, 136, 142, 149, 150, 151, 154, 155, 156, 157, 160, 162, 164, 166, 170, 171, 177, 179, 182, 183, 185, 186, 188, 190, 192, 196, 199, 200, 202, 203, 206, 208, 211, 214, 217, 219, 220, 222, 227, 228, 232, 234, 236, 237, 238, 240, 242, 244, 246, 248, 250, 251, 253, 256, 259, 260, 261, 262, 264, 265, 266, 268, 269, 270, 271, 273, 276, 278, 280, 283, 284, 286, 290, 312, 320, 321, 322, 327, 328, 329, 335, 341, 343, 346, 348, 371, 372, 374, 376, 377, 378, 379, 381, 383, 384, 405, 406, 407, 409, 410, 411, 413, 414, 415, 417, 423, 428, 429, 434, 435, 436, 437, 438, 439, 440, 441, 447, 448, 449, 455, 461, 467, 469, 477, 479, 487, 489, 493, 496, 502, 504, 510, 511, 516, 517, 526, 527, 528, 529, 530, 536, 596, 604, 609, 610, 618, 620, 622, 623, 628, 631, 633, 641, 642, 649, 660, 670, 677, 680, 695, 702, 707, 750, 762, 763, 768, 777, 789, 792, 799, 808, 812, 815, 819, 823, 824, 826, 827, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 846, 847, 851, 852, 853, 854, 855, 856, 857, 866, 867, 868, 870, 871, 943, 946, 947, 948, 950, 951, 953, 954, 955, 956, 957, 958, 960, 964, 965, 968, 969, 970, 972, 973, 975, 986, 987, 995, 997, 1002, 1003, 1008], "linear_model": [4, 7, 8, 10, 14, 24, 26, 28, 51, 67, 69, 71, 80, 106, 122, 124, 125, 127, 128, 135, 136, 138, 149, 151, 153, 154, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 194, 195, 196, 197, 198, 199, 200, 209, 210, 211, 212, 216, 218, 221, 223, 235, 242, 247, 248, 252, 253, 258, 277, 280, 281, 284, 286, 288, 289, 290, 291, 292, 294, 295, 301, 320, 329, 333, 335, 345, 346, 348, 352, 354, 355, 359, 360, 365, 375, 381, 394, 399, 403, 430, 502, 504, 507, 508, 510, 511, 513, 532, 533, 534, 535, 562, 596, 597, 599, 600, 603, 605, 606, 607, 608, 665, 666, 752, 777, 785, 787, 788, 789, 791, 793, 797, 798, 799, 800, 824, 841, 845, 866, 867, 870, 873, 895, 897, 898, 899, 938, 946, 950, 954, 955, 960, 962, 964, 968, 975, 983, 984, 986, 988, 995, 996, 997, 998, 999, 1000, 1001, 1002], "ridgecv": [4, 71, 122, 136, 154, 218, 360, 365, 381, 533, 608, 637, 640, 950, 995, 997, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1013], "onehotencod": [4, 67, 106, 111, 122, 154, 155, 182, 200, 211, 219, 221, 223, 285, 289, 291, 294, 295, 340, 360, 375, 381, 431, 432, 531, 546, 547, 829, 833, 834, 837, 840, 847, 944, 964, 996, 999, 1003, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "one_hot_encod": [4, 111], "handle_unknown": [4, 67, 106, 111, 122, 155, 156, 211, 219, 221, 223, 285, 289, 292, 839, 840, 964, 999, 1003, 1007, 1008], "ignor": [4, 6, 8, 17, 41, 46, 52, 59, 67, 101, 103, 106, 111, 119, 122, 155, 170, 174, 182, 191, 197, 211, 216, 221, 223, 231, 234, 275, 276, 284, 285, 289, 292, 312, 313, 321, 325, 334, 346, 348, 350, 352, 360, 364, 374, 375, 381, 382, 392, 393, 396, 399, 402, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 425, 426, 429, 430, 432, 434, 435, 436, 437, 438, 439, 440, 441, 447, 448, 449, 453, 468, 473, 474, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 544, 546, 547, 548, 553, 554, 555, 556, 559, 562, 567, 568, 575, 576, 592, 593, 594, 595, 597, 598, 600, 604, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 653, 654, 655, 656, 657, 672, 678, 679, 690, 693, 694, 702, 719, 720, 727, 733, 738, 742, 747, 748, 751, 752, 761, 762, 764, 765, 766, 768, 770, 771, 772, 773, 776, 778, 779, 780, 781, 782, 783, 784, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 823, 824, 825, 826, 829, 830, 831, 832, 833, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 858, 859, 861, 862, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 878, 929, 950, 951, 954, 956, 960, 964, 969, 984, 995, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1012, 1013], "sparse_output": [4, 111, 223, 285, 292, 295, 531, 833, 837, 839, 845, 850, 964, 1010, 1011], "alpha": [4, 5, 7, 8, 10, 12, 13, 14, 16, 17, 23, 25, 29, 32, 34, 37, 39, 42, 49, 53, 57, 62, 71, 77, 80, 87, 89, 90, 92, 93, 95, 96, 101, 103, 104, 110, 114, 117, 118, 119, 121, 122, 123, 136, 138, 141, 143, 144, 145, 146, 147, 149, 150, 154, 161, 162, 163, 164, 166, 167, 168, 170, 171, 176, 177, 179, 180, 182, 183, 184, 186, 187, 191, 194, 195, 200, 202, 203, 206, 214, 215, 222, 225, 239, 240, 241, 242, 243, 246, 247, 249, 251, 252, 258, 259, 262, 264, 267, 269, 274, 276, 279, 280, 281, 282, 284, 286, 289, 291, 292, 295, 299, 301, 305, 306, 309, 310, 312, 313, 316, 317, 318, 320, 333, 341, 348, 352, 358, 376, 377, 379, 381, 383, 384, 386, 411, 436, 437, 443, 492, 496, 498, 500, 501, 502, 503, 504, 505, 507, 508, 510, 511, 512, 513, 525, 560, 561, 563, 576, 578, 580, 581, 588, 596, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 625, 626, 627, 628, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 652, 687, 712, 801, 802, 803, 805, 823, 824, 862, 874, 875, 876, 877, 943, 950, 954, 956, 958, 962, 967, 968, 969, 970, 983, 986, 988, 992, 995, 997, 998, 999, 1000, 1002, 1003, 1007, 1008, 1009, 1010, 1011, 1013], "logspac": [4, 12, 26, 69, 73, 94, 127, 136, 139, 144, 154, 175, 186, 187, 213, 215, 229, 240, 252, 254, 263, 274, 281, 284, 308, 316, 785, 793, 949, 950, 983, 984, 986], "naive_linear_pipelin": 4, "transform": [4, 5, 6, 8, 10, 14, 24, 41, 43, 44, 45, 48, 51, 54, 59, 65, 69, 70, 80, 82, 83, 89, 90, 92, 93, 95, 96, 100, 105, 107, 111, 121, 122, 133, 144, 150, 151, 154, 155, 156, 159, 174, 182, 183, 190, 196, 198, 200, 203, 206, 209, 211, 212, 214, 216, 217, 219, 223, 227, 235, 236, 237, 240, 248, 258, 259, 261, 267, 268, 269, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 293, 295, 308, 311, 312, 320, 322, 329, 340, 341, 342, 343, 346, 348, 351, 355, 360, 365, 370, 372, 373, 374, 376, 377, 378, 379, 381, 382, 383, 384, 390, 395, 398, 402, 406, 407, 408, 410, 412, 414, 417, 429, 430, 431, 432, 433, 447, 448, 449, 450, 453, 454, 461, 468, 473, 474, 479, 480, 489, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 512, 514, 515, 522, 524, 526, 529, 531, 532, 533, 534, 535, 546, 547, 548, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 600, 601, 603, 604, 605, 606, 607, 618, 623, 628, 638, 641, 649, 653, 654, 655, 656, 657, 659, 666, 667, 678, 717, 718, 749, 763, 766, 767, 777, 792, 795, 801, 810, 815, 818, 822, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 864, 866, 868, 871, 872, 895, 897, 912, 943, 944, 946, 948, 950, 951, 954, 955, 958, 968, 969, 971, 973, 974, 975, 976, 979, 984, 985, 988, 990, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "remaind": [4, 111, 154, 171, 182, 184, 200, 219, 293, 324, 375, 429, 432, 995, 1002, 1003, 1004, 1007, 1008, 1011], "alpha_": [4, 77, 127, 154, 162, 170, 171, 437, 576, 609, 610, 612, 616, 618, 620, 621, 626, 628, 638, 640, 950, 970, 983, 995, 1002], "7298221281347033": 4, "142": [4, 13, 44, 55, 155, 182, 222, 234, 299, 381, 975], "014": [4, 133, 247, 291, 321, 352, 975], "184": [4, 182, 277, 352, 986], "020": [4, 962], "affirm": 4, "select": [4, 7, 9, 10, 20, 32, 33, 41, 44, 52, 54, 59, 65, 67, 70, 77, 85, 86, 87, 96, 97, 101, 103, 109, 111, 114, 117, 122, 131, 133, 143, 145, 154, 155, 157, 159, 160, 162, 164, 166, 168, 169, 181, 186, 190, 197, 200, 203, 209, 213, 215, 219, 224, 225, 226, 227, 237, 238, 239, 240, 244, 252, 263, 279, 284, 285, 290, 294, 297, 298, 301, 303, 308, 316, 320, 321, 322, 329, 333, 334, 341, 343, 344, 346, 348, 354, 359, 360, 371, 374, 375, 376, 379, 381, 382, 384, 408, 410, 411, 412, 414, 416, 418, 423, 424, 425, 429, 431, 432, 437, 438, 441, 453, 454, 457, 458, 461, 462, 465, 466, 467, 469, 477, 480, 497, 499, 500, 505, 506, 509, 514, 516, 523, 524, 525, 528, 530, 546, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 592, 596, 597, 610, 611, 612, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 636, 638, 641, 643, 647, 648, 656, 657, 662, 677, 681, 683, 718, 752, 756, 757, 761, 762, 763, 766, 767, 768, 769, 777, 788, 789, 790, 792, 794, 808, 809, 810, 812, 814, 816, 817, 818, 826, 827, 831, 836, 842, 846, 863, 866, 867, 871, 874, 875, 876, 877, 882, 923, 924, 948, 949, 951, 953, 954, 955, 957, 958, 960, 964, 967, 968, 969, 970, 971, 973, 974, 975, 976, 978, 979, 980, 982, 986, 987, 988, 990, 995, 996, 997, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013], "specifi": [4, 20, 26, 52, 87, 111, 112, 117, 139, 142, 144, 145, 146, 171, 183, 190, 225, 247, 333, 334, 340, 344, 346, 348, 355, 359, 360, 365, 368, 372, 374, 375, 378, 379, 381, 383, 384, 386, 388, 394, 402, 406, 410, 415, 417, 428, 429, 432, 434, 435, 437, 438, 439, 440, 441, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 468, 480, 492, 496, 498, 502, 503, 505, 506, 511, 512, 517, 522, 524, 525, 526, 527, 529, 532, 533, 548, 549, 558, 559, 562, 567, 575, 576, 585, 596, 597, 598, 603, 608, 611, 612, 613, 616, 617, 618, 620, 621, 623, 624, 625, 626, 627, 628, 630, 633, 634, 637, 638, 639, 640, 641, 642, 645, 646, 647, 648, 649, 652, 656, 663, 665, 667, 674, 676, 693, 694, 702, 706, 718, 735, 743, 744, 747, 748, 751, 763, 765, 766, 767, 769, 770, 772, 776, 777, 780, 785, 786, 787, 788, 789, 790, 791, 793, 797, 800, 801, 802, 804, 805, 806, 807, 811, 816, 839, 840, 841, 844, 845, 847, 862, 866, 867, 868, 869, 870, 871, 872, 873, 874, 876, 898, 905, 938, 944, 950, 951, 953, 954, 957, 961, 962, 964, 967, 968, 969, 983, 987, 995, 1001, 1002, 1003, 1004, 1006, 1007, 1009, 1010, 1011, 1012, 1013], "three": [4, 7, 25, 32, 37, 38, 42, 43, 52, 55, 73, 83, 84, 101, 106, 108, 111, 112, 113, 123, 124, 125, 133, 136, 146, 154, 166, 174, 179, 182, 184, 191, 193, 215, 216, 225, 228, 258, 285, 286, 289, 334, 339, 343, 350, 364, 371, 374, 378, 379, 380, 382, 416, 427, 463, 674, 905, 947, 949, 950, 951, 954, 957, 964, 968, 969, 972, 979, 987, 995], "higher": [4, 13, 54, 75, 90, 94, 101, 104, 106, 107, 114, 118, 138, 140, 145, 146, 154, 155, 156, 159, 182, 183, 186, 200, 206, 207, 231, 233, 237, 239, 242, 253, 264, 284, 308, 312, 320, 321, 322, 329, 333, 341, 344, 348, 371, 374, 376, 381, 383, 384, 385, 409, 413, 414, 436, 443, 474, 497, 504, 508, 513, 518, 519, 522, 523, 524, 525, 526, 527, 529, 530, 531, 538, 553, 556, 572, 573, 584, 592, 596, 600, 602, 611, 612, 617, 618, 625, 626, 627, 628, 641, 643, 644, 669, 688, 692, 716, 749, 761, 763, 766, 767, 769, 777, 784, 785, 790, 793, 812, 815, 841, 858, 859, 860, 866, 867, 868, 869, 870, 871, 872, 879, 946, 950, 951, 953, 954, 957, 961, 964, 968, 969, 986, 988, 996, 1001, 1003, 1010, 1012], "suspect": 4, "origin": [4, 5, 14, 16, 20, 21, 43, 44, 45, 48, 53, 55, 70, 71, 83, 87, 89, 90, 96, 117, 120, 132, 133, 136, 138, 140, 142, 143, 149, 150, 155, 159, 170, 171, 186, 202, 203, 204, 206, 207, 213, 214, 215, 219, 231, 236, 242, 262, 267, 277, 280, 284, 294, 298, 312, 314, 320, 322, 329, 334, 341, 343, 345, 346, 348, 350, 351, 358, 360, 368, 371, 374, 375, 378, 379, 381, 382, 384, 385, 386, 387, 399, 402, 406, 408, 409, 410, 411, 412, 414, 415, 424, 428, 429, 430, 434, 435, 436, 437, 438, 439, 440, 441, 447, 448, 449, 458, 459, 460, 466, 484, 496, 498, 499, 500, 502, 503, 504, 505, 506, 508, 509, 510, 511, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 538, 541, 546, 547, 549, 553, 555, 556, 559, 572, 573, 575, 576, 579, 595, 597, 600, 603, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 655, 657, 661, 666, 692, 727, 733, 764, 765, 770, 772, 781, 791, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 811, 812, 813, 816, 817, 823, 824, 826, 829, 830, 831, 832, 833, 834, 835, 838, 839, 840, 842, 843, 844, 845, 846, 855, 858, 859, 860, 861, 862, 863, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 884, 886, 887, 891, 892, 913, 925, 928, 947, 948, 950, 951, 953, 954, 957, 960, 965, 966, 967, 968, 971, 973, 978, 979, 988, 998, 999, 1001, 1003, 1005, 1007, 1009, 1011], "mere": [4, 239, 360, 793, 968], "min": [4, 10, 11, 12, 13, 14, 24, 26, 29, 49, 55, 71, 87, 90, 101, 103, 110, 113, 114, 120, 129, 136, 140, 142, 143, 144, 150, 154, 164, 170, 171, 177, 184, 185, 188, 203, 213, 214, 217, 258, 265, 266, 272, 274, 276, 279, 281, 282, 284, 302, 314, 317, 355, 374, 377, 379, 447, 448, 449, 450, 477, 499, 500, 503, 505, 506, 514, 515, 528, 592, 596, 597, 619, 620, 621, 622, 647, 648, 669, 705, 721, 744, 766, 767, 815, 823, 824, 836, 845, 852, 903, 919, 945, 950, 954, 957, 964, 1001, 1004, 1006, 1007, 1010], "prevent": [4, 52, 112, 114, 133, 153, 183, 186, 279, 285, 286, 308, 320, 324, 329, 346, 348, 350, 358, 359, 374, 379, 382, 407, 414, 453, 454, 526, 527, 555, 556, 576, 692, 749, 823, 824, 851, 852, 854, 855, 856, 857, 954, 956, 959, 960, 964, 970, 986, 997, 998, 1000, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "properli": [4, 13, 24, 52, 119, 143, 234, 288, 335, 344, 346, 350, 354, 380, 866, 867, 868, 869, 870, 871, 872, 943, 998, 1000, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "automat": [4, 8, 12, 26, 43, 60, 62, 67, 94, 127, 135, 161, 185, 225, 226, 237, 240, 279, 286, 289, 293, 301, 310, 312, 334, 341, 344, 346, 348, 350, 354, 360, 364, 370, 374, 375, 376, 379, 381, 382, 383, 398, 415, 417, 421, 427, 429, 430, 432, 461, 464, 480, 503, 505, 506, 512, 514, 516, 522, 526, 529, 548, 553, 556, 559, 567, 608, 610, 611, 612, 617, 618, 623, 624, 625, 626, 627, 628, 631, 632, 633, 637, 639, 640, 641, 643, 646, 649, 652, 653, 656, 660, 765, 780, 783, 792, 802, 823, 824, 827, 828, 830, 839, 840, 847, 858, 859, 866, 867, 868, 871, 874, 876, 880, 892, 925, 928, 943, 945, 948, 953, 958, 964, 968, 970, 973, 974, 983, 995, 998, 999, 1000, 1006, 1009, 1010, 1011, 1012, 1013], "raw": [4, 12, 15, 34, 76, 89, 122, 143, 154, 159, 277, 286, 299, 322, 333, 341, 348, 354, 360, 372, 373, 374, 376, 379, 382, 434, 439, 466, 467, 468, 524, 525, 526, 528, 547, 553, 554, 555, 556, 599, 642, 655, 659, 670, 750, 812, 870, 951, 954, 958, 960, 961, 964, 967, 985, 987, 996, 1000, 1003, 1006, 1012], "recogn": [4, 5, 27, 48, 50, 80, 82, 90, 109, 134, 151, 183, 233, 263, 291, 297, 298, 352, 365, 374, 382, 467, 662, 678, 792, 871, 954, 975, 979, 1012], "increas": [4, 7, 15, 25, 34, 40, 52, 54, 55, 58, 71, 90, 101, 102, 104, 107, 110, 112, 117, 119, 132, 136, 138, 142, 143, 144, 147, 154, 155, 159, 162, 164, 173, 182, 183, 184, 186, 200, 207, 213, 226, 227, 239, 240, 241, 246, 252, 274, 280, 281, 284, 290, 298, 308, 316, 321, 322, 324, 333, 334, 335, 345, 354, 355, 360, 372, 374, 376, 379, 381, 382, 385, 405, 409, 411, 417, 428, 436, 437, 443, 497, 501, 518, 519, 522, 523, 524, 525, 526, 527, 529, 530, 532, 533, 553, 556, 592, 600, 601, 602, 610, 615, 616, 619, 620, 621, 623, 624, 631, 632, 633, 641, 642, 643, 647, 648, 650, 651, 657, 671, 672, 677, 742, 746, 753, 766, 767, 795, 814, 816, 817, 818, 821, 823, 824, 840, 866, 874, 875, 876, 877, 903, 943, 945, 949, 950, 951, 953, 954, 957, 964, 968, 969, 970, 978, 995, 997, 1000, 1004, 1006, 1007, 1010], "strong": [4, 13, 51, 138, 151, 153, 154, 160, 175, 179, 180, 186, 187, 188, 215, 258, 286, 316, 372, 373, 379, 381, 489, 614, 637, 947, 948, 950, 951, 953, 961, 969, 975, 986], "similar": [4, 5, 7, 12, 17, 20, 24, 25, 32, 34, 46, 48, 54, 57, 71, 80, 87, 91, 101, 114, 135, 138, 145, 153, 154, 155, 156, 166, 182, 184, 196, 202, 204, 205, 206, 209, 215, 216, 231, 236, 239, 242, 245, 246, 247, 256, 258, 259, 279, 291, 307, 312, 316, 321, 322, 329, 333, 338, 340, 342, 344, 345, 346, 348, 351, 352, 355, 358, 360, 368, 371, 372, 374, 377, 378, 379, 381, 382, 383, 384, 385, 405, 408, 409, 415, 417, 419, 420, 468, 473, 474, 501, 547, 554, 555, 556, 575, 642, 657, 660, 668, 670, 680, 684, 689, 692, 693, 695, 698, 702, 704, 719, 724, 725, 750, 756, 757, 760, 761, 762, 788, 793, 838, 859, 862, 866, 867, 868, 869, 887, 943, 946, 947, 949, 950, 951, 953, 955, 957, 958, 960, 961, 964, 966, 967, 968, 969, 970, 973, 974, 979, 987, 990, 995, 999, 1000, 1001, 1003, 1007, 1008], "magnitud": [4, 96, 103, 139, 150, 154, 199, 219, 244, 279, 284, 291, 333, 341, 352, 374, 381, 384, 578, 617, 669, 846, 950, 954, 958, 964, 968, 970, 997, 1004], "discret": [4, 29, 43, 85, 96, 101, 137, 151, 155, 162, 182, 189, 200, 220, 256, 274, 278, 282, 335, 338, 341, 342, 350, 359, 360, 374, 379, 382, 384, 403, 404, 413, 417, 425, 426, 427, 457, 479, 480, 487, 518, 524, 536, 553, 554, 557, 560, 561, 564, 565, 572, 573, 575, 576, 577, 581, 582, 583, 622, 623, 706, 763, 774, 792, 801, 802, 805, 827, 831, 839, 840, 843, 846, 855, 866, 871, 875, 917, 943, 950, 951, 952, 954, 955, 957, 970, 973, 975, 979, 990, 997, 1000, 1008, 1009, 1010], "manner": [4, 71, 87, 133, 155, 159, 227, 292, 293, 334, 346, 352, 374, 379, 381, 382, 674, 806, 807, 943, 954, 970, 998, 1005], "integ": [4, 17, 45, 50, 67, 154, 182, 200, 289, 290, 329, 333, 340, 341, 343, 348, 351, 355, 359, 360, 374, 375, 378, 379, 381, 382, 399, 402, 427, 429, 432, 437, 452, 461, 463, 466, 467, 468, 470, 473, 474, 477, 479, 480, 484, 487, 515, 524, 525, 526, 527, 528, 532, 533, 537, 547, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 592, 593, 594, 595, 597, 598, 609, 616, 620, 624, 630, 638, 640, 641, 643, 664, 679, 699, 763, 765, 766, 767, 768, 770, 772, 777, 778, 779, 782, 783, 786, 789, 797, 800, 802, 805, 806, 807, 831, 839, 840, 845, 846, 847, 850, 860, 862, 874, 875, 876, 877, 882, 917, 918, 919, 923, 944, 950, 955, 957, 964, 967, 969, 970, 979, 986, 988, 995, 997, 998, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012], "uniqu": [4, 16, 23, 28, 39, 44, 45, 54, 55, 60, 64, 69, 108, 109, 115, 116, 117, 154, 156, 166, 197, 200, 227, 248, 268, 285, 286, 294, 300, 320, 321, 322, 340, 348, 355, 360, 374, 375, 378, 381, 382, 405, 415, 419, 421, 429, 432, 461, 514, 515, 516, 518, 519, 522, 523, 524, 525, 526, 527, 529, 530, 531, 575, 598, 599, 600, 631, 633, 641, 662, 674, 676, 718, 746, 763, 765, 777, 789, 794, 795, 798, 804, 813, 816, 818, 823, 825, 837, 839, 840, 847, 850, 866, 868, 874, 875, 876, 877, 891, 903, 917, 918, 950, 955, 964, 978, 986, 1003, 1006, 1007, 1009, 1010, 1011, 1012, 1013], "decid": [4, 11, 54, 57, 67, 112, 117, 231, 236, 239, 246, 341, 346, 361, 382, 384, 415, 422, 524, 525, 576, 600, 611, 612, 615, 616, 617, 618, 619, 620, 621, 625, 626, 627, 628, 636, 646, 649, 761, 808, 809, 810, 812, 814, 816, 817, 818, 829, 953, 960, 978, 1008, 1011], "treat": [4, 6, 67, 111, 122, 149, 154, 182, 248, 285, 290, 295, 300, 329, 346, 358, 360, 371, 381, 382, 407, 526, 527, 553, 554, 556, 572, 573, 597, 603, 610, 636, 639, 693, 694, 702, 718, 747, 748, 751, 752, 835, 836, 842, 843, 846, 847, 851, 854, 855, 857, 866, 867, 911, 944, 946, 950, 954, 955, 961, 964, 968, 970, 984, 999, 1007, 1011, 1012], "therebi": [4, 154, 378, 381, 946, 1005], "assumpt": [4, 9, 13, 24, 26, 33, 40, 73, 74, 90, 143, 147, 151, 153, 182, 184, 209, 235, 258, 279, 352, 358, 359, 363, 372, 373, 374, 376, 378, 379, 382, 384, 412, 416, 418, 453, 468, 477, 497, 499, 506, 615, 619, 762, 763, 766, 767, 777, 803, 858, 859, 948, 950, 954, 955, 956, 957, 959, 960, 961, 964, 967, 970, 975, 1002, 1008], "impli": [4, 138, 320, 321, 322, 379, 381, 384, 439, 538, 547, 575, 576, 587, 699, 890, 950, 951, 988, 1006], "give": [4, 12, 13, 14, 23, 24, 36, 41, 46, 57, 59, 61, 66, 67, 71, 89, 113, 138, 143, 147, 149, 154, 155, 171, 173, 179, 182, 183, 184, 209, 231, 236, 241, 248, 261, 265, 268, 277, 291, 292, 301, 333, 335, 341, 343, 344, 345, 346, 348, 352, 354, 358, 359, 360, 361, 368, 371, 372, 373, 374, 375, 376, 379, 381, 382, 384, 386, 399, 411, 412, 414, 416, 424, 437, 461, 464, 468, 498, 503, 514, 515, 516, 517, 522, 523, 529, 530, 531, 558, 559, 562, 572, 573, 603, 612, 626, 630, 641, 685, 694, 700, 703, 758, 763, 766, 767, 777, 787, 788, 789, 791, 806, 807, 808, 809, 810, 812, 814, 816, 817, 818, 843, 844, 846, 847, 855, 950, 954, 957, 958, 959, 961, 962, 964, 968, 969, 970, 973, 978, 979, 981, 986, 987, 988, 995, 999, 1002, 1003, 1005, 1006, 1007, 1009, 1011], "lot": [4, 77, 154, 186, 341, 346, 347, 348, 354, 379, 381, 766, 767, 858, 859, 943, 966, 968, 969, 973, 974, 978, 987, 988, 995, 1000, 1002, 1003, 1004, 1005, 1007], "addit": [4, 5, 7, 12, 14, 15, 63, 67, 77, 83, 87, 90, 101, 105, 107, 108, 111, 112, 135, 143, 144, 145, 150, 154, 155, 161, 166, 171, 183, 184, 186, 206, 220, 241, 248, 253, 258, 279, 289, 290, 295, 299, 312, 322, 326, 329, 333, 334, 338, 339, 340, 341, 342, 344, 345, 346, 348, 351, 352, 354, 358, 359, 360, 361, 364, 368, 373, 374, 376, 378, 379, 382, 383, 384, 385, 398, 406, 407, 409, 410, 411, 415, 422, 434, 439, 461, 468, 497, 499, 501, 502, 504, 506, 507, 508, 514, 518, 519, 522, 523, 524, 525, 526, 527, 529, 530, 531, 532, 533, 534, 535, 547, 548, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 576, 577, 584, 593, 595, 596, 600, 603, 604, 605, 606, 607, 608, 609, 610, 635, 652, 653, 657, 663, 664, 667, 706, 722, 723, 752, 756, 761, 762, 769, 785, 795, 797, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 814, 815, 816, 817, 818, 819, 820, 822, 829, 830, 831, 832, 835, 836, 838, 839, 840, 841, 843, 844, 845, 846, 848, 858, 859, 866, 867, 897, 903, 943, 948, 950, 954, 955, 957, 958, 961, 964, 966, 967, 968, 969, 970, 973, 979, 990, 995, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "level": [4, 9, 11, 12, 16, 26, 32, 38, 50, 87, 106, 110, 129, 136, 137, 138, 139, 142, 145, 147, 151, 154, 155, 193, 194, 195, 196, 197, 200, 209, 213, 214, 229, 239, 242, 248, 249, 265, 272, 306, 307, 309, 310, 312, 314, 316, 321, 328, 333, 341, 343, 344, 346, 348, 352, 358, 360, 363, 364, 365, 372, 379, 382, 384, 388, 419, 433, 458, 459, 461, 468, 486, 496, 501, 502, 510, 511, 512, 526, 527, 532, 533, 576, 580, 587, 588, 590, 631, 632, 633, 641, 642, 643, 652, 655, 657, 659, 665, 667, 681, 687, 692, 749, 787, 788, 789, 791, 794, 795, 822, 823, 824, 864, 879, 943, 950, 954, 955, 957, 962, 968, 970, 973, 974, 975, 988, 998, 1006, 1009, 1010, 1011], "one_hot_linear_pipelin": 4, "one_hot_tim": 4, "099": [4, 38, 169, 975], "011": [4, 247, 259, 321, 352], "131": [4, 14, 53, 172, 229, 352, 954, 975, 996], "rate": [4, 101, 105, 111, 117, 131, 155, 182, 189, 200, 213, 219, 236, 239, 246, 248, 249, 275, 276, 277, 335, 346, 374, 375, 379, 383, 411, 431, 501, 518, 519, 524, 525, 526, 527, 557, 560, 561, 563, 564, 565, 571, 609, 610, 633, 641, 642, 643, 657, 663, 667, 691, 746, 753, 822, 823, 824, 860, 943, 950, 951, 954, 957, 958, 968, 970, 978, 999, 1003, 1004], "better": [4, 5, 9, 13, 19, 20, 23, 29, 47, 52, 70, 71, 73, 74, 75, 76, 80, 83, 87, 90, 104, 107, 112, 113, 114, 117, 122, 131, 142, 143, 144, 146, 149, 156, 162, 166, 168, 171, 182, 183, 184, 190, 197, 199, 200, 206, 214, 215, 216, 219, 230, 233, 239, 241, 242, 245, 248, 249, 256, 258, 277, 283, 284, 292, 293, 308, 316, 320, 321, 322, 324, 329, 333, 341, 345, 346, 347, 348, 350, 351, 352, 354, 360, 363, 368, 370, 372, 374, 376, 378, 379, 380, 381, 382, 384, 414, 415, 503, 505, 512, 524, 525, 526, 527, 572, 573, 595, 636, 642, 657, 674, 689, 698, 703, 706, 727, 762, 791, 801, 802, 803, 804, 805, 806, 807, 812, 823, 824, 843, 844, 847, 855, 858, 859, 866, 867, 943, 944, 946, 947, 948, 950, 951, 953, 954, 956, 957, 958, 962, 964, 967, 968, 970, 974, 978, 981, 983, 988, 995, 996, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012], "confirm": [4, 13, 80, 104, 111, 114, 117, 156, 182, 184, 242, 245, 248, 284, 322, 350, 943, 964, 1003], "benefit": [4, 43, 53, 70, 71, 101, 102, 112, 117, 154, 196, 206, 212, 214, 261, 292, 333, 346, 355, 360, 372, 374, 413, 426, 433, 473, 532, 533, 623, 624, 631, 632, 633, 641, 642, 643, 797, 864, 866, 943, 949, 957, 964, 974, 978, 995, 998, 999, 1000, 1007, 1008, 1009, 1010], "ad": [4, 14, 20, 71, 94, 96, 101, 107, 117, 132, 138, 144, 145, 161, 166, 184, 186, 206, 215, 216, 239, 240, 241, 279, 289, 290, 291, 292, 293, 294, 295, 301, 312, 321, 345, 346, 348, 350, 352, 358, 360, 361, 379, 381, 382, 383, 384, 398, 406, 407, 408, 410, 412, 414, 417, 424, 427, 429, 433, 447, 448, 449, 450, 479, 487, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 512, 514, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 546, 547, 548, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 572, 573, 576, 578, 592, 593, 594, 595, 600, 603, 604, 605, 606, 607, 613, 615, 619, 623, 624, 634, 641, 643, 645, 653, 654, 657, 660, 678, 679, 693, 694, 739, 741, 747, 748, 751, 753, 761, 762, 763, 777, 787, 794, 804, 810, 815, 818, 822, 823, 824, 825, 826, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 855, 858, 859, 863, 864, 866, 867, 874, 875, 876, 877, 893, 943, 947, 949, 950, 951, 955, 957, 958, 960, 974, 978, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "progress": [4, 7, 8, 87, 125, 136, 150, 175, 264, 292, 343, 346, 350, 351, 361, 365, 370, 374, 524, 525, 657, 795, 797, 800, 815, 823, 824, 978, 986, 988, 995, 997, 1004, 1009], "veri": [4, 13, 24, 26, 36, 37, 39, 41, 47, 49, 57, 59, 75, 76, 77, 79, 85, 90, 114, 120, 127, 143, 149, 154, 155, 156, 171, 182, 183, 184, 187, 190, 200, 206, 209, 215, 216, 219, 225, 241, 242, 245, 246, 248, 249, 254, 259, 276, 279, 291, 297, 300, 308, 312, 318, 320, 322, 329, 333, 341, 345, 346, 348, 351, 352, 354, 358, 359, 360, 368, 372, 374, 376, 378, 379, 380, 381, 382, 383, 384, 407, 412, 417, 427, 436, 437, 443, 465, 469, 475, 522, 523, 526, 527, 529, 530, 532, 533, 554, 555, 587, 615, 616, 619, 620, 621, 629, 647, 648, 650, 656, 657, 660, 670, 707, 710, 756, 761, 763, 771, 773, 777, 780, 783, 806, 807, 831, 835, 836, 837, 846, 858, 859, 868, 871, 874, 875, 876, 877, 903, 943, 946, 947, 949, 950, 951, 952, 953, 954, 957, 958, 960, 961, 962, 964, 966, 967, 968, 969, 970, 971, 972, 973, 974, 978, 986, 987, 995, 1000, 1001, 1003, 1006, 1008, 1010, 1011, 1012], "new": [4, 7, 8, 10, 47, 53, 55, 57, 66, 67, 83, 94, 101, 103, 105, 106, 107, 112, 114, 117, 121, 122, 133, 136, 138, 144, 150, 156, 157, 182, 188, 196, 209, 238, 241, 246, 258, 263, 265, 285, 289, 292, 295, 298, 301, 307, 312, 329, 334, 335, 340, 341, 343, 344, 345, 348, 349, 350, 352, 354, 355, 359, 360, 361, 364, 372, 374, 375, 378, 379, 380, 381, 382, 383, 384, 385, 386, 392, 396, 398, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 469, 470, 473, 474, 475, 477, 488, 491, 492, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 539, 546, 547, 548, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 665, 666, 667, 669, 673, 678, 679, 683, 686, 687, 688, 689, 691, 692, 693, 694, 695, 698, 703, 704, 705, 706, 707, 710, 717, 718, 721, 725, 730, 731, 733, 742, 746, 747, 748, 749, 751, 752, 753, 754, 755, 761, 762, 763, 764, 765, 766, 767, 769, 770, 772, 776, 777, 781, 784, 785, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 852, 854, 855, 856, 858, 859, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 878, 879, 880, 881, 884, 886, 887, 889, 897, 898, 902, 903, 910, 911, 912, 913, 914, 917, 920, 922, 924, 929, 935, 941, 943, 944, 946, 950, 954, 955, 957, 958, 959, 960, 964, 966, 967, 968, 969, 974, 978, 979, 980, 983, 986, 988, 993, 997, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "minut": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 153, 154, 155, 156, 157, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 258, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 324, 325, 326, 327, 328, 341, 346, 951, 972], "1440": 4, "caus": [4, 24, 26, 114, 139, 154, 180, 182, 186, 187, 200, 258, 286, 312, 322, 329, 344, 351, 372, 374, 379, 380, 382, 384, 408, 412, 414, 424, 474, 497, 547, 554, 575, 576, 742, 801, 802, 803, 805, 830, 839, 841, 844, 845, 886, 887, 943, 944, 950, 954, 962, 964, 967, 974, 979, 995, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1011, 1012], "signific": [4, 52, 107, 114, 131, 132, 151, 186, 200, 232, 239, 258, 259, 283, 320, 329, 340, 341, 358, 374, 377, 378, 381, 469, 497, 499, 514, 515, 592, 623, 624, 631, 632, 633, 641, 642, 643, 782, 791, 866, 868, 869, 870, 871, 872, 953, 954, 957, 975, 995, 997, 998, 999, 1003], "overfit": [4, 26, 106, 112, 114, 117, 151, 155, 156, 157, 161, 183, 186, 209, 227, 232, 234, 240, 244, 254, 274, 280, 281, 283, 284, 285, 286, 308, 316, 324, 326, 327, 341, 360, 372, 378, 381, 402, 453, 454, 526, 527, 532, 533, 622, 763, 766, 767, 777, 788, 789, 823, 824, 826, 841, 845, 949, 958, 960, 962, 964, 970, 975, 978, 986, 998], "avoid": [4, 7, 12, 13, 41, 54, 59, 68, 106, 107, 112, 117, 154, 155, 184, 186, 191, 200, 205, 216, 219, 234, 240, 244, 267, 269, 270, 283, 284, 295, 304, 305, 321, 334, 344, 346, 347, 348, 350, 351, 352, 358, 360, 361, 364, 368, 372, 374, 376, 378, 381, 382, 385, 405, 407, 409, 417, 427, 433, 458, 459, 460, 464, 473, 474, 499, 504, 508, 599, 611, 612, 617, 618, 625, 626, 627, 628, 646, 649, 654, 656, 658, 660, 677, 756, 763, 764, 768, 774, 777, 787, 788, 789, 826, 829, 835, 836, 838, 843, 844, 845, 846, 849, 851, 852, 853, 854, 855, 856, 857, 859, 864, 903, 948, 951, 953, 954, 957, 958, 960, 962, 964, 969, 970, 974, 977, 988, 990, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "kbinsdiscret": [4, 50, 85, 151, 162, 182, 200, 220, 278, 281, 286, 293, 477, 622, 829, 845, 875, 964, 975, 1003, 1007, 1008, 1009, 1011], "re": [4, 8, 14, 25, 26, 53, 66, 67, 101, 111, 141, 153, 200, 216, 226, 230, 242, 244, 248, 289, 320, 322, 334, 346, 347, 350, 354, 359, 361, 365, 372, 378, 382, 434, 435, 436, 437, 438, 439, 440, 441, 520, 521, 522, 523, 526, 527, 528, 529, 530, 531, 611, 617, 625, 627, 765, 780, 783, 874, 875, 876, 877, 950, 955, 957, 964, 969, 974, 978, 988, 995, 999, 1000, 1002, 1004], "fine": [4, 34, 110, 136, 186, 198, 231, 237, 312, 326, 327, 343, 350, 360, 382, 411, 903, 922, 957, 960, 969, 974, 1005], "grain": [4, 29, 34, 214, 231, 281, 352, 382, 411, 922, 974], "still": [4, 13, 26, 30, 41, 50, 52, 54, 59, 77, 83, 91, 109, 114, 117, 122, 138, 144, 153, 154, 156, 157, 161, 166, 182, 184, 200, 214, 242, 248, 279, 290, 291, 294, 320, 321, 329, 335, 340, 345, 346, 348, 350, 351, 352, 354, 358, 360, 374, 378, 381, 382, 385, 405, 409, 419, 439, 461, 592, 597, 600, 602, 682, 720, 742, 745, 756, 757, 766, 767, 780, 783, 844, 846, 866, 884, 943, 944, 948, 950, 953, 954, 957, 960, 962, 969, 970, 972, 974, 977, 978, 995, 997, 1000, 1001, 1003, 1004, 1005, 1008, 1009, 1010, 1011], "express": [4, 7, 12, 101, 107, 138, 143, 154, 239, 240, 285, 290, 305, 312, 322, 340, 341, 346, 347, 352, 358, 374, 379, 380, 382, 415, 421, 422, 553, 554, 556, 681, 752, 763, 769, 777, 785, 787, 788, 789, 790, 793, 813, 946, 950, 954, 958, 964, 965, 970, 1003], "advantag": [4, 5, 36, 52, 54, 87, 92, 115, 182, 183, 209, 226, 240, 258, 292, 329, 360, 372, 378, 379, 382, 384, 406, 410, 425, 499, 554, 614, 639, 640, 727, 794, 795, 796, 826, 827, 866, 867, 868, 869, 870, 871, 872, 943, 946, 949, 950, 951, 954, 955, 957, 958, 962, 964, 968, 969, 970, 998], "final": [4, 13, 25, 26, 32, 37, 39, 52, 66, 67, 75, 77, 80, 84, 92, 101, 102, 104, 106, 111, 112, 115, 122, 125, 133, 143, 150, 153, 155, 157, 159, 161, 166, 170, 171, 179, 182, 184, 199, 200, 203, 209, 223, 229, 237, 245, 256, 259, 285, 286, 288, 289, 308, 312, 333, 335, 341, 344, 346, 347, 348, 350, 359, 360, 371, 372, 374, 375, 378, 381, 382, 383, 402, 407, 412, 413, 417, 424, 427, 429, 501, 520, 521, 532, 533, 535, 559, 592, 612, 618, 624, 644, 655, 659, 684, 763, 794, 795, 826, 827, 863, 866, 943, 944, 946, 950, 951, 954, 957, 960, 961, 964, 967, 978, 986, 1000, 1003, 1004, 1005, 1006, 1008], "observ": [4, 5, 7, 9, 11, 13, 14, 16, 20, 23, 26, 32, 34, 37, 40, 50, 59, 67, 73, 75, 76, 77, 88, 89, 92, 94, 101, 104, 105, 107, 108, 114, 117, 118, 121, 128, 129, 136, 138, 141, 143, 144, 145, 147, 154, 155, 156, 161, 162, 177, 178, 180, 182, 183, 184, 186, 196, 200, 206, 207, 212, 213, 219, 235, 239, 241, 242, 246, 259, 262, 265, 272, 284, 294, 300, 307, 308, 312, 313, 320, 321, 322, 326, 327, 341, 343, 360, 364, 372, 374, 376, 377, 378, 379, 380, 383, 384, 406, 408, 410, 411, 412, 414, 424, 425, 434, 435, 436, 437, 438, 439, 440, 441, 489, 497, 516, 517, 528, 575, 576, 611, 617, 622, 666, 681, 683, 722, 784, 804, 812, 845, 847, 950, 953, 954, 958, 959, 960, 961, 962, 964, 967, 968, 969, 970, 977, 980, 982, 983, 985, 996, 1008, 1009, 1010, 1011], "complet": [4, 34, 35, 36, 41, 46, 49, 55, 59, 80, 117, 120, 131, 133, 136, 151, 156, 157, 188, 208, 209, 216, 219, 237, 284, 286, 288, 321, 329, 341, 346, 350, 351, 354, 358, 375, 378, 379, 381, 382, 406, 410, 414, 417, 427, 428, 429, 432, 460, 501, 502, 503, 504, 509, 511, 523, 534, 535, 546, 552, 553, 554, 556, 592, 593, 594, 595, 610, 614, 622, 636, 638, 669, 670, 680, 681, 682, 693, 695, 700, 701, 721, 750, 759, 794, 797, 800, 809, 825, 826, 827, 828, 889, 939, 943, 948, 950, 954, 955, 957, 969, 970, 975, 979, 988, 995, 998, 1002, 1003, 1004, 1005, 1006, 1007, 1008], "induct": [4, 33, 99, 114, 151, 360, 374, 381, 388, 406, 477, 529, 592, 596, 861, 862, 915, 938, 950, 967, 975, 997], "bia": [4, 26, 73, 89, 100, 108, 109, 114, 117, 151, 154, 156, 161, 162, 164, 244, 274, 312, 316, 329, 341, 348, 360, 372, 376, 380, 381, 384, 489, 521, 524, 525, 572, 573, 579, 607, 613, 614, 623, 624, 634, 635, 645, 823, 824, 839, 841, 845, 851, 852, 854, 855, 856, 857, 875, 949, 950, 953, 954, 958, 959, 962, 968, 975, 986], "preserv": [4, 45, 92, 206, 213, 234, 348, 349, 373, 378, 379, 382, 546, 553, 554, 556, 611, 617, 661, 706, 738, 742, 781, 782, 783, 850, 886, 887, 944, 950, 951, 964, 966, 973, 983, 987, 995, 998, 999, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1013], "smooth": [4, 43, 44, 51, 136, 143, 175, 183, 198, 285, 308, 343, 361, 374, 380, 384, 413, 414, 502, 503, 504, 511, 522, 523, 524, 525, 529, 530, 531, 555, 556, 584, 587, 641, 801, 802, 803, 805, 843, 847, 855, 874, 875, 876, 877, 950, 956, 964, 968, 969, 970, 988], "local": [4, 9, 12, 20, 36, 49, 54, 58, 87, 90, 106, 107, 119, 136, 143, 144, 151, 155, 183, 196, 201, 204, 206, 209, 213, 219, 260, 268, 269, 307, 326, 327, 334, 343, 344, 346, 350, 352, 354, 364, 374, 379, 381, 382, 384, 412, 417, 427, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 467, 503, 505, 509, 512, 514, 524, 525, 528, 531, 575, 576, 653, 654, 655, 656, 657, 658, 660, 661, 722, 723, 809, 812, 815, 817, 827, 836, 859, 862, 870, 920, 922, 952, 953, 957, 958, 970, 975, 977, 987, 989, 990, 999, 1003, 1007, 1010], "attempt": [4, 51, 155, 178, 188, 234, 320, 333, 345, 360, 374, 386, 411, 415, 422, 433, 596, 653, 654, 658, 781, 808, 809, 810, 812, 814, 816, 817, 818, 844, 846, 864, 886, 887, 950, 951, 957, 970, 979, 1002, 1007, 1012], "each": [4, 7, 8, 10, 11, 12, 15, 17, 20, 24, 25, 26, 30, 32, 34, 38, 40, 41, 44, 46, 50, 52, 55, 57, 58, 66, 67, 69, 70, 71, 79, 80, 82, 83, 84, 85, 87, 88, 92, 94, 95, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 115, 117, 118, 120, 121, 122, 123, 124, 125, 132, 134, 136, 140, 142, 147, 149, 150, 153, 154, 155, 157, 159, 161, 168, 169, 171, 176, 180, 182, 183, 184, 186, 187, 190, 197, 200, 203, 209, 210, 213, 214, 215, 216, 217, 219, 220, 221, 223, 225, 228, 230, 233, 234, 235, 237, 239, 240, 242, 244, 245, 248, 249, 256, 258, 259, 262, 264, 268, 270, 272, 274, 275, 277, 279, 280, 281, 282, 284, 285, 286, 288, 290, 291, 292, 294, 295, 297, 298, 299, 302, 308, 312, 314, 316, 321, 322, 324, 325, 328, 329, 333, 334, 335, 340, 341, 342, 343, 344, 346, 347, 348, 350, 351, 352, 354, 355, 358, 359, 360, 365, 371, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 391, 392, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 424, 425, 426, 428, 429, 430, 432, 434, 435, 436, 437, 438, 439, 440, 441, 443, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 469, 470, 473, 474, 475, 476, 477, 478, 479, 480, 484, 487, 488, 491, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 546, 547, 548, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 672, 673, 675, 678, 684, 689, 692, 693, 694, 702, 703, 709, 710, 712, 714, 715, 717, 718, 722, 723, 726, 727, 728, 729, 730, 732, 733, 734, 735, 737, 738, 740, 742, 743, 744, 745, 747, 748, 749, 751, 752, 754, 755, 756, 757, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 777, 778, 779, 781, 782, 783, 784, 785, 787, 788, 789, 790, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 855, 856, 857, 858, 859, 861, 862, 863, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 878, 879, 880, 892, 897, 898, 903, 905, 906, 910, 911, 922, 930, 931, 932, 935, 944, 946, 948, 950, 951, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 964, 965, 966, 967, 968, 969, 970, 978, 979, 983, 985, 986, 987, 988, 995, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "sine": [4, 138, 143, 144, 151, 176, 188, 224, 225, 226, 227, 229, 230, 326, 342, 580, 761, 762, 953, 970, 975], "cosin": [4, 37, 253, 259, 264, 338, 341, 360, 374, 379, 380, 406, 410, 415, 422, 500, 555, 556, 585, 661, 724, 725, 726, 729, 734, 735, 738, 742, 743, 744, 806, 807, 811, 838, 957, 970, 990, 1005], "match": [4, 20, 34, 87, 88, 90, 93, 96, 107, 151, 159, 160, 182, 204, 212, 219, 252, 312, 322, 341, 344, 348, 350, 374, 379, 381, 382, 395, 414, 429, 431, 473, 474, 480, 491, 496, 502, 507, 513, 516, 532, 533, 537, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 592, 593, 594, 595, 623, 629, 630, 650, 651, 664, 668, 669, 670, 678, 680, 684, 698, 742, 743, 744, 750, 806, 807, 811, 815, 829, 830, 831, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 866, 873, 879, 890, 922, 951, 953, 954, 956, 957, 975, 976, 979, 988, 990, 995, 1001, 1002, 1003, 1005, 1007, 1008, 1011], "togeth": [4, 12, 48, 57, 67, 110, 122, 138, 144, 154, 163, 203, 206, 219, 235, 285, 292, 311, 325, 329, 348, 350, 358, 359, 360, 368, 374, 381, 382, 383, 389, 416, 418, 532, 533, 559, 654, 680, 763, 777, 826, 827, 840, 950, 951, 955, 961, 964, 970, 971, 978, 980, 982, 1001, 1012], "equival": [4, 15, 32, 52, 54, 111, 118, 135, 138, 143, 154, 166, 200, 230, 248, 259, 284, 312, 322, 329, 333, 344, 352, 355, 359, 360, 374, 375, 376, 377, 378, 379, 381, 383, 384, 406, 408, 409, 410, 411, 412, 414, 415, 422, 429, 434, 439, 474, 499, 506, 523, 526, 527, 528, 529, 530, 553, 556, 578, 581, 584, 586, 589, 611, 612, 613, 617, 619, 623, 624, 631, 632, 633, 634, 637, 641, 642, 645, 648, 652, 653, 658, 673, 674, 687, 698, 705, 706, 711, 712, 713, 725, 734, 743, 744, 761, 762, 766, 767, 771, 773, 797, 800, 808, 809, 810, 812, 814, 816, 817, 818, 819, 820, 823, 829, 835, 836, 838, 841, 842, 843, 844, 846, 854, 856, 857, 890, 901, 940, 943, 948, 950, 951, 952, 954, 960, 964, 968, 969, 970, 1003, 1004, 1005, 1006, 1008, 1009, 1012], "importantli": [4, 14, 88, 155, 159, 279, 374], "jump": [4, 183, 279, 343, 346, 382, 845], "functiontransform": [4, 66, 106, 182, 200, 301, 429, 430, 964, 1000, 1001, 1003, 1008, 1009, 1010, 1012], "sin_transform": 4, "return": [4, 6, 7, 8, 10, 11, 13, 14, 16, 17, 19, 23, 24, 26, 31, 32, 34, 37, 45, 50, 53, 58, 66, 71, 85, 94, 96, 99, 101, 104, 106, 113, 114, 117, 118, 122, 136, 141, 144, 146, 150, 157, 161, 162, 170, 171, 174, 182, 183, 190, 191, 192, 200, 216, 219, 222, 223, 228, 230, 234, 235, 236, 237, 238, 239, 240, 242, 243, 246, 253, 259, 264, 269, 272, 277, 279, 281, 284, 288, 304, 308, 320, 322, 324, 328, 333, 339, 340, 341, 346, 347, 348, 352, 353, 355, 358, 360, 372, 373, 374, 375, 378, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 886, 887, 889, 890, 891, 892, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 920, 921, 923, 924, 925, 926, 927, 928, 929, 935, 938, 939, 940, 941, 942, 944, 954, 957, 961, 962, 969, 970, 974, 979, 984, 986, 988, 992, 995, 996, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "lambda": [4, 7, 8, 10, 13, 19, 53, 113, 162, 200, 239, 240, 283, 301, 370, 374, 379, 381, 382, 609, 610, 611, 612, 830, 842, 946, 950, 964, 983, 1003, 1009], "sin": [4, 14, 19, 36, 88, 102, 113, 114, 119, 121, 131, 138, 144, 145, 147, 161, 162, 166, 176, 183, 188, 204, 215, 231, 271, 280, 289, 295, 315, 326, 327, 384, 481, 580, 664, 728, 987], "pi": [4, 14, 32, 36, 37, 88, 96, 119, 121, 131, 138, 162, 166, 170, 176, 183, 204, 225, 226, 227, 230, 231, 253, 272, 289, 295, 327, 364, 380, 384, 481, 482, 483, 580, 607, 948, 949, 950, 956, 987], "cos_transform": 4, "co": [4, 12, 14, 18, 20, 36, 37, 66, 119, 121, 143, 151, 154, 183, 204, 239, 253, 292, 301, 320, 321, 322, 327, 350, 380, 382, 414, 416, 418, 453, 476, 556, 664, 684, 728, 759, 949, 964, 975, 978, 989, 990], "effect": [4, 6, 26, 34, 36, 37, 42, 43, 50, 54, 59, 62, 65, 69, 80, 90, 92, 101, 112, 114, 116, 119, 122, 135, 138, 139, 143, 145, 151, 152, 154, 155, 157, 166, 177, 182, 183, 184, 186, 187, 188, 199, 201, 204, 206, 212, 219, 223, 226, 230, 235, 239, 240, 241, 244, 247, 248, 259, 277, 278, 280, 283, 289, 296, 308, 312, 313, 316, 317, 318, 320, 321, 322, 329, 334, 346, 348, 351, 358, 360, 372, 374, 375, 379, 380, 381, 382, 384, 385, 402, 408, 409, 411, 412, 414, 415, 430, 434, 435, 436, 437, 438, 439, 440, 441, 443, 447, 448, 449, 455, 461, 465, 479, 489, 490, 498, 499, 503, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 546, 547, 553, 554, 555, 556, 559, 571, 574, 575, 576, 600, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 652, 655, 656, 657, 666, 668, 717, 749, 761, 764, 765, 768, 770, 772, 774, 781, 782, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 811, 812, 813, 816, 817, 823, 824, 826, 829, 830, 831, 832, 833, 835, 836, 838, 842, 843, 844, 845, 846, 847, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 886, 887, 903, 920, 928, 943, 948, 950, 951, 953, 954, 955, 957, 961, 962, 964, 967, 969, 970, 975, 984, 986, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "expans": [4, 149, 290, 415, 841, 1004], "synthet": [4, 14, 24, 26, 29, 32, 34, 39, 46, 108, 114, 120, 138, 143, 145, 155, 172, 184, 199, 274, 281, 316, 329, 333, 339, 349, 361, 374, 376, 383, 623, 624, 866, 867, 873, 948, 986, 987, 1001], "beyond": [4, 26, 183, 184, 333, 335, 345, 346, 358, 372, 381, 693, 694, 702, 747, 748, 751, 871, 951, 955, 964, 969, 974, 1003], "pd": [4, 12, 13, 24, 67, 68, 101, 107, 108, 114, 119, 143, 149, 153, 154, 155, 156, 157, 161, 166, 171, 182, 186, 190, 200, 220, 223, 230, 237, 239, 240, 242, 250, 251, 256, 284, 285, 286, 291, 292, 316, 320, 321, 351, 360, 375, 429, 431, 592, 593, 594, 595, 597, 742, 884, 886, 887, 943, 944, 961, 964, 1006, 1008, 1009, 1010, 1012], "hour_df": 4, "arang": [4, 11, 13, 14, 16, 37, 55, 57, 62, 69, 74, 75, 94, 97, 110, 111, 113, 115, 116, 120, 124, 132, 138, 140, 145, 146, 149, 150, 157, 166, 182, 185, 187, 191, 205, 212, 214, 234, 239, 242, 247, 250, 258, 259, 272, 274, 281, 291, 297, 298, 300, 302, 308, 315, 320, 322, 326, 327, 328, 329, 358, 371, 378, 382, 430, 509, 792, 841, 845, 949, 950, 958, 964, 968, 984], "reshap": [4, 5, 6, 14, 16, 23, 30, 43, 44, 45, 47, 48, 50, 51, 55, 68, 75, 79, 87, 90, 96, 104, 109, 110, 120, 129, 134, 138, 140, 141, 142, 143, 144, 145, 147, 161, 173, 179, 195, 196, 198, 199, 203, 205, 207, 209, 214, 218, 229, 237, 263, 265, 272, 274, 276, 277, 280, 281, 282, 286, 288, 291, 292, 294, 295, 302, 307, 308, 313, 314, 317, 318, 358, 371, 379, 381, 382, 410, 430, 549, 596, 696, 792, 841, 845, 950, 964, 970, 984, 987, 1000], "hour_sin": 4, "fit_transform": [4, 5, 6, 10, 12, 15, 19, 41, 46, 49, 50, 55, 59, 83, 88, 91, 97, 120, 159, 173, 198, 200, 202, 203, 204, 205, 206, 207, 212, 213, 216, 217, 223, 259, 263, 275, 279, 280, 284, 285, 286, 288, 291, 293, 294, 295, 308, 320, 321, 322, 329, 338, 341, 348, 351, 352, 360, 370, 375, 379, 382, 383, 390, 398, 407, 408, 410, 412, 414, 429, 431, 433, 447, 448, 449, 450, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 514, 531, 532, 533, 534, 535, 546, 547, 548, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 592, 593, 594, 595, 600, 603, 604, 605, 606, 607, 653, 654, 655, 656, 657, 661, 810, 815, 818, 822, 825, 826, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 858, 859, 864, 944, 946, 950, 955, 957, 964, 965, 966, 979, 984, 987, 988, 999, 1000, 1001, 1003, 1004, 1005, 1007, 1009, 1011, 1012, 1013], "hour_co": 4, "2d": [4, 31, 33, 36, 41, 44, 45, 46, 50, 53, 58, 59, 82, 83, 86, 88, 91, 97, 120, 134, 151, 176, 183, 188, 202, 203, 204, 207, 209, 212, 213, 268, 305, 308, 328, 340, 342, 346, 348, 355, 360, 374, 375, 379, 382, 384, 406, 417, 427, 429, 432, 446, 453, 455, 456, 457, 458, 459, 465, 466, 467, 469, 475, 479, 498, 506, 514, 549, 551, 600, 608, 622, 637, 656, 702, 743, 787, 791, 795, 833, 882, 886, 887, 902, 917, 940, 941, 948, 950, 951, 954, 961, 965, 970, 975, 979, 985, 995, 999, 1002, 1003, 1004, 1007, 1009], "scatter": [4, 9, 11, 12, 16, 23, 28, 29, 32, 35, 36, 39, 40, 41, 42, 46, 49, 53, 54, 55, 56, 57, 59, 64, 75, 80, 84, 85, 89, 91, 92, 93, 95, 102, 103, 107, 110, 118, 120, 121, 123, 129, 131, 138, 139, 140, 142, 144, 145, 146, 147, 153, 154, 159, 162, 165, 172, 174, 178, 179, 180, 183, 184, 185, 191, 194, 195, 196, 199, 202, 203, 204, 205, 206, 207, 209, 214, 215, 217, 225, 226, 227, 228, 229, 230, 231, 234, 240, 242, 253, 259, 262, 265, 266, 267, 268, 269, 270, 271, 274, 279, 281, 282, 284, 292, 299, 302, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 317, 318, 320, 325, 326, 327, 376, 596, 666, 922, 948, 950, 986, 987], "color": [4, 6, 7, 8, 9, 10, 11, 12, 13, 16, 20, 23, 24, 25, 26, 29, 31, 32, 33, 35, 37, 39, 41, 43, 44, 46, 50, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 73, 74, 75, 76, 77, 80, 83, 84, 85, 87, 88, 89, 90, 91, 93, 94, 95, 96, 101, 102, 107, 110, 111, 113, 116, 117, 118, 119, 120, 122, 124, 127, 129, 138, 140, 141, 142, 143, 144, 145, 146, 147, 150, 151, 154, 156, 157, 161, 162, 164, 165, 166, 167, 169, 170, 171, 172, 174, 176, 178, 180, 182, 183, 184, 185, 186, 187, 188, 191, 192, 193, 194, 196, 199, 200, 203, 204, 205, 207, 209, 213, 214, 215, 217, 220, 225, 226, 227, 228, 229, 230, 231, 234, 238, 240, 242, 243, 244, 245, 246, 248, 249, 250, 252, 258, 261, 264, 265, 266, 267, 270, 271, 272, 274, 279, 280, 281, 283, 284, 285, 289, 295, 299, 300, 302, 306, 307, 308, 309, 310, 312, 314, 315, 316, 317, 325, 326, 340, 341, 343, 354, 374, 381, 382, 412, 458, 459, 471, 548, 549, 743, 928, 968, 970, 975, 1000, 1005, 1007, 1012], "map": [4, 5, 10, 11, 17, 19, 25, 50, 80, 92, 105, 113, 116, 120, 138, 151, 159, 182, 202, 204, 208, 216, 219, 240, 243, 248, 254, 267, 270, 272, 278, 279, 301, 308, 312, 314, 321, 322, 340, 341, 347, 358, 360, 365, 372, 373, 374, 375, 378, 379, 381, 382, 388, 402, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 429, 430, 434, 435, 436, 437, 438, 439, 440, 441, 447, 448, 449, 450, 461, 463, 467, 474, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 546, 547, 548, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 600, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 653, 654, 655, 656, 657, 726, 729, 761, 762, 763, 766, 767, 774, 775, 777, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 822, 823, 824, 825, 826, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 854, 855, 858, 859, 861, 862, 863, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 908, 911, 912, 943, 946, 951, 954, 956, 966, 969, 970, 975, 983, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1012], "space": [4, 8, 10, 19, 29, 43, 45, 50, 54, 55, 57, 58, 60, 62, 66, 67, 70, 80, 87, 89, 95, 97, 106, 110, 114, 120, 133, 136, 138, 144, 159, 166, 183, 202, 203, 204, 206, 213, 214, 215, 219, 220, 226, 231, 247, 250, 251, 259, 268, 269, 281, 290, 312, 320, 321, 322, 328, 329, 333, 338, 341, 342, 343, 346, 353, 358, 359, 360, 371, 373, 374, 377, 379, 380, 381, 382, 384, 408, 412, 413, 414, 417, 427, 429, 430, 431, 432, 447, 448, 449, 453, 463, 497, 499, 500, 503, 504, 505, 506, 508, 509, 514, 538, 547, 553, 554, 556, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 597, 598, 603, 605, 606, 607, 608, 653, 654, 655, 657, 658, 659, 661, 664, 763, 766, 767, 769, 777, 785, 796, 806, 807, 814, 815, 816, 817, 826, 831, 832, 838, 843, 858, 859, 860, 879, 907, 946, 947, 948, 949, 950, 952, 954, 955, 957, 958, 959, 960, 964, 965, 966, 967, 968, 969, 970, 973, 974, 979, 986, 988, 989, 990, 995, 996, 998, 1003, 1004, 1005, 1009, 1010, 1011], "akin": [4, 183, 360], "sort": [4, 8, 10, 12, 19, 20, 23, 57, 66, 69, 99, 104, 111, 114, 121, 136, 161, 166, 182, 183, 200, 218, 239, 240, 243, 253, 271, 315, 320, 326, 327, 346, 350, 354, 355, 360, 378, 381, 382, 384, 499, 506, 520, 531, 546, 575, 582, 662, 677, 683, 693, 694, 702, 718, 747, 748, 751, 753, 763, 789, 801, 802, 803, 804, 805, 806, 807, 814, 816, 817, 818, 821, 831, 837, 839, 840, 843, 845, 847, 855, 868, 871, 903, 908, 950, 957, 960, 964, 978, 988, 995, 999, 1005, 1006, 1007, 1009, 1010, 1013], "analog": [4, 19, 116, 352, 381, 954, 955, 969, 1004], "clock": 4, "25th": [4, 219, 844], "back": [4, 92, 221, 334, 344, 346, 348, 360, 361, 368, 375, 382, 399, 408, 411, 412, 424, 447, 448, 449, 473, 474, 498, 499, 500, 503, 505, 506, 509, 546, 595, 623, 624, 631, 632, 633, 641, 642, 643, 692, 831, 833, 834, 835, 839, 840, 841, 843, 844, 846, 858, 859, 866, 950, 954, 958, 974, 979, 988, 998, 1003, 1005, 1006, 1009], "natur": [4, 26, 29, 107, 114, 145, 154, 155, 159, 166, 182, 183, 199, 200, 206, 219, 225, 231, 248, 258, 320, 346, 348, 360, 379, 381, 382, 385, 409, 415, 422, 516, 555, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 592, 657, 669, 705, 719, 721, 808, 809, 810, 812, 814, 816, 817, 818, 845, 901, 950, 951, 953, 954, 957, 959, 964, 968, 973, 995, 1003], "sp": [4, 154, 295, 944, 987], "c": [4, 6, 7, 8, 11, 12, 16, 19, 23, 24, 26, 28, 29, 32, 36, 37, 39, 40, 42, 49, 53, 54, 56, 57, 58, 62, 67, 68, 70, 80, 83, 84, 85, 92, 93, 101, 103, 104, 110, 111, 118, 120, 121, 123, 124, 129, 134, 136, 139, 140, 141, 142, 146, 159, 165, 167, 172, 173, 174, 175, 177, 179, 180, 189, 191, 193, 194, 195, 196, 198, 199, 202, 203, 204, 206, 207, 214, 215, 217, 221, 226, 228, 229, 230, 231, 233, 234, 236, 237, 238, 239, 242, 244, 248, 250, 259, 262, 264, 265, 267, 268, 269, 270, 271, 272, 274, 275, 277, 279, 280, 281, 284, 288, 289, 290, 291, 292, 293, 294, 295, 299, 302, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 320, 325, 326, 327, 333, 334, 340, 341, 343, 344, 346, 347, 348, 349, 351, 354, 355, 358, 364, 365, 371, 372, 374, 375, 376, 377, 378, 379, 381, 383, 387, 402, 407, 408, 411, 412, 414, 424, 433, 440, 488, 493, 499, 503, 505, 506, 512, 514, 515, 555, 572, 573, 575, 596, 604, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 635, 637, 638, 644, 650, 651, 653, 654, 657, 658, 673, 679, 680, 683, 695, 699, 705, 706, 722, 723, 763, 777, 785, 791, 793, 801, 802, 803, 804, 805, 806, 807, 813, 815, 822, 837, 839, 840, 841, 845, 847, 861, 864, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 877, 881, 886, 887, 917, 943, 946, 947, 949, 950, 951, 952, 954, 956, 957, 959, 961, 964, 966, 968, 969, 970, 973, 978, 979, 983, 984, 986, 987, 995, 996, 998, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1011], "colorbar": [4, 11, 28, 37, 87, 97, 109, 118, 134, 139, 141, 142, 144, 155, 202, 213, 229, 250, 279, 308, 662, 1007], "cyclic_cossin_transform": 4, "month_sin": 4, "month_co": 4, "weekday_sin": 4, "weekday_co": 4, "cyclic_cossin_linear_pipelin": 4, "125": [4, 13, 50, 75, 90, 175, 291, 499, 943, 954, 964, 975], "166": [4, 277, 352, 954, 995], "simpl": [4, 16, 26, 52, 67, 71, 73, 79, 80, 87, 107, 112, 145, 151, 155, 166, 183, 199, 222, 240, 256, 260, 263, 272, 292, 304, 320, 322, 325, 329, 344, 346, 348, 349, 350, 351, 353, 358, 359, 360, 361, 365, 371, 373, 374, 375, 376, 378, 379, 380, 381, 382, 383, 388, 395, 402, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 427, 430, 434, 435, 436, 437, 438, 439, 440, 441, 447, 448, 449, 450, 479, 487, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 546, 547, 548, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 600, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 653, 654, 655, 656, 657, 750, 752, 761, 762, 763, 766, 767, 777, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 822, 823, 824, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 858, 859, 861, 862, 863, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 910, 946, 948, 949, 950, 951, 953, 954, 957, 964, 966, 968, 970, 974, 975, 978, 979, 988, 992, 995], "wors": [4, 80, 101, 139, 155, 188, 239, 247, 258, 284, 329, 372, 374, 384, 397, 430, 447, 448, 449, 517, 519, 521, 523, 525, 527, 530, 533, 535, 575, 576, 600, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 625, 626, 627, 628, 629, 630, 632, 634, 635, 637, 638, 643, 644, 645, 670, 686, 687, 688, 692, 749, 799, 800, 809, 817, 824, 867, 869, 872, 875, 877, 954, 964, 1004], "further": [4, 24, 39, 67, 73, 80, 87, 104, 110, 112, 135, 138, 143, 154, 156, 161, 166, 202, 207, 216, 236, 239, 240, 246, 293, 308, 321, 328, 333, 346, 358, 360, 373, 374, 376, 379, 381, 382, 384, 409, 417, 427, 480, 497, 500, 547, 579, 587, 593, 623, 624, 631, 632, 633, 641, 642, 643, 656, 660, 701, 738, 742, 745, 756, 757, 802, 808, 809, 816, 817, 844, 846, 866, 868, 871, 903, 953, 954, 956, 957, 958, 960, 962, 964, 968, 969, 986, 988, 1004, 1008], "analyz": [4, 7, 17, 166, 241, 248, 293, 320, 322, 351, 352, 374, 382, 468, 553, 554, 556, 752, 951, 954, 961, 962, 970, 988, 995, 1004], "reason": [4, 8, 12, 26, 39, 50, 66, 114, 117, 136, 154, 155, 159, 182, 183, 190, 200, 209, 213, 214, 216, 219, 236, 239, 240, 245, 256, 259, 280, 284, 321, 322, 329, 333, 334, 335, 341, 345, 346, 348, 350, 354, 358, 359, 360, 361, 374, 375, 376, 379, 381, 382, 473, 497, 539, 603, 611, 617, 619, 637, 652, 657, 727, 763, 777, 810, 815, 822, 841, 863, 943, 944, 949, 950, 951, 954, 956, 957, 958, 960, 964, 968, 969, 978, 988, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "disappoint": 4, "outcom": [4, 107, 154, 360, 381, 534, 623, 674, 706, 758, 794, 861, 862, 863, 868, 871, 950, 954, 970, 977, 988, 999, 1003, 1005], "altern": [4, 25, 67, 80, 108, 109, 115, 117, 122, 156, 166, 182, 200, 210, 228, 231, 248, 288, 312, 320, 321, 322, 329, 341, 349, 350, 352, 358, 360, 361, 364, 369, 371, 372, 374, 375, 376, 378, 379, 381, 382, 384, 406, 407, 410, 411, 412, 417, 423, 428, 464, 503, 505, 506, 512, 518, 519, 522, 523, 524, 525, 529, 530, 531, 547, 553, 554, 556, 582, 585, 608, 657, 671, 673, 735, 738, 742, 745, 765, 795, 830, 836, 839, 852, 859, 861, 874, 875, 876, 877, 921, 922, 948, 950, 951, 953, 954, 957, 958, 962, 964, 966, 967, 969, 970, 974, 983, 988, 990, 1000, 1002, 1008, 1009], "larger": [4, 7, 26, 34, 36, 39, 44, 52, 75, 77, 85, 96, 104, 115, 117, 139, 144, 145, 150, 154, 155, 159, 162, 166, 197, 198, 199, 207, 213, 215, 225, 231, 240, 242, 248, 249, 256, 259, 261, 274, 275, 277, 279, 308, 312, 321, 322, 339, 341, 346, 352, 360, 371, 372, 374, 375, 376, 378, 379, 381, 382, 384, 405, 408, 414, 415, 417, 419, 421, 480, 492, 506, 509, 526, 527, 528, 532, 533, 547, 554, 608, 617, 637, 638, 639, 640, 644, 652, 657, 669, 684, 700, 761, 811, 812, 843, 845, 846, 847, 855, 860, 902, 903, 925, 928, 946, 947, 950, 951, 953, 954, 957, 958, 962, 964, 968, 969, 986, 988, 999, 1000, 1003, 1004, 1005, 1008, 1009, 1012], "periodic_spline_transform": 4, "n_spline": [4, 845], "degre": [4, 16, 32, 89, 103, 143, 149, 153, 155, 159, 161, 166, 170, 171, 183, 186, 215, 221, 225, 226, 227, 230, 231, 239, 253, 277, 290, 291, 305, 312, 315, 379, 383, 411, 417, 463, 500, 506, 604, 605, 608, 621, 739, 761, 763, 812, 841, 845, 868, 869, 870, 871, 872, 946, 947, 949, 950, 951, 952, 954, 955, 957, 960, 961, 964, 967, 969, 986, 998, 1004, 1008, 1009, 1012], "n_knot": [4, 183, 291, 845, 964, 1008], "include_bia": [4, 161, 253, 841, 845, 1009], "knot": [4, 183, 291, 845, 964, 1008], "linspac": [4, 8, 10, 11, 14, 23, 25, 34, 35, 37, 39, 46, 52, 75, 76, 88, 96, 102, 114, 138, 139, 141, 142, 143, 144, 145, 147, 155, 161, 162, 164, 166, 172, 176, 182, 183, 184, 188, 192, 193, 194, 195, 196, 200, 207, 209, 212, 213, 215, 217, 229, 239, 241, 242, 246, 247, 248, 249, 253, 264, 265, 271, 272, 280, 282, 292, 293, 307, 308, 311, 313, 314, 316, 317, 318, 596, 597, 769, 790, 806, 807, 987], "again": [4, 20, 64, 68, 114, 142, 144, 146, 154, 206, 240, 320, 329, 350, 355, 360, 361, 374, 375, 376, 381, 382, 437, 532, 533, 599, 612, 616, 618, 620, 626, 628, 630, 657, 943, 950, 954, 968, 992, 995, 1003, 1012], "splines_df": 4, "spline_": 4, "shape": [4, 5, 6, 8, 9, 10, 11, 13, 14, 16, 17, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 38, 43, 44, 45, 48, 49, 50, 51, 52, 55, 57, 58, 63, 66, 70, 71, 75, 87, 88, 90, 102, 107, 108, 109, 110, 111, 114, 115, 116, 117, 120, 121, 129, 132, 134, 139, 140, 142, 144, 145, 149, 150, 151, 155, 156, 170, 171, 182, 184, 189, 191, 194, 195, 196, 197, 198, 201, 203, 204, 205, 209, 212, 213, 214, 215, 216, 218, 219, 225, 227, 229, 230, 231, 237, 239, 241, 242, 245, 246, 248, 249, 259, 264, 265, 269, 272, 274, 276, 281, 282, 288, 290, 293, 294, 295, 299, 300, 302, 305, 308, 311, 312, 313, 314, 317, 318, 320, 321, 328, 333, 339, 340, 341, 346, 348, 360, 371, 372, 374, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 395, 396, 397, 398, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 883, 888, 891, 892, 897, 901, 903, 905, 908, 916, 918, 923, 925, 929, 930, 931, 932, 933, 934, 935, 936, 937, 944, 949, 950, 954, 955, 956, 957, 958, 960, 964, 965, 966, 967, 968, 969, 970, 975, 984, 985, 987, 988, 995, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1009, 1011, 1012], "concat": [4, 13, 149, 153, 171, 200, 839], "cmap": [4, 5, 6, 11, 12, 14, 16, 20, 21, 28, 29, 30, 32, 36, 37, 43, 44, 47, 48, 50, 51, 55, 75, 77, 82, 87, 90, 93, 97, 103, 109, 110, 129, 134, 141, 142, 155, 161, 165, 166, 173, 174, 191, 194, 195, 196, 198, 203, 204, 205, 213, 214, 218, 233, 234, 259, 263, 265, 267, 268, 270, 272, 274, 276, 277, 279, 281, 297, 298, 302, 304, 305, 306, 307, 308, 309, 310, 313, 314, 317, 318, 325, 662, 984, 985], "cm": [4, 6, 11, 12, 14, 16, 20, 21, 23, 28, 29, 30, 35, 36, 43, 44, 46, 47, 48, 49, 50, 51, 52, 55, 57, 58, 64, 75, 77, 82, 87, 90, 93, 103, 109, 110, 129, 134, 141, 142, 155, 165, 174, 191, 194, 195, 198, 203, 204, 205, 210, 213, 214, 218, 223, 233, 234, 259, 262, 263, 265, 269, 272, 274, 276, 277, 279, 281, 290, 293, 297, 298, 302, 304, 305, 306, 308, 309, 310, 314, 317, 318, 325, 343, 375, 662, 879, 954, 964, 970, 984, 985], "tab20b": 4, "stai": [4, 13, 25, 34, 96, 154, 321, 345, 346, 350, 360, 361, 959, 977, 1001], "midnight": 4, "fewer": [4, 14, 25, 52, 101, 110, 112, 182, 333, 347, 374, 383, 384, 413, 426, 518, 559, 661, 796, 907, 950, 955, 957, 1000, 1001, 1002], "most": [4, 6, 8, 12, 14, 19, 23, 26, 49, 50, 52, 59, 73, 79, 80, 95, 101, 107, 108, 115, 117, 122, 131, 132, 133, 135, 136, 143, 150, 153, 154, 155, 156, 157, 159, 166, 182, 183, 200, 216, 220, 225, 231, 236, 237, 242, 246, 247, 249, 256, 258, 268, 279, 285, 286, 288, 291, 294, 298, 308, 312, 320, 321, 322, 329, 333, 334, 335, 341, 342, 344, 346, 348, 350, 351, 352, 354, 358, 360, 361, 364, 365, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 408, 409, 411, 415, 421, 422, 425, 433, 461, 468, 486, 489, 497, 499, 504, 508, 514, 516, 526, 527, 531, 532, 553, 554, 556, 558, 569, 576, 592, 595, 614, 623, 637, 639, 641, 643, 652, 653, 657, 660, 689, 692, 710, 722, 723, 727, 749, 758, 761, 762, 766, 767, 782, 794, 795, 808, 809, 810, 812, 814, 815, 816, 817, 818, 841, 843, 851, 852, 854, 855, 856, 857, 864, 902, 903, 905, 917, 922, 943, 944, 948, 949, 950, 951, 952, 953, 954, 955, 957, 960, 961, 962, 967, 968, 969, 970, 972, 973, 974, 978, 984, 986, 987, 988, 997, 998, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1010, 1012], "cyclic_spline_transform": 4, "cyclic_month": 4, "cyclic_weekdai": 4, "cyclic_hour": 4, "cyclic_spline_linear_pipelin": 4, "097": [4, 136, 189, 343, 975], "132": [4, 8, 14, 53, 197, 307, 381, 975], "013": [4, 55, 190, 247, 321, 975], "successfulli": [4, 14, 283, 345, 350, 374, 382, 968], "reduc": [4, 7, 39, 42, 43, 44, 45, 50, 67, 68, 73, 104, 114, 116, 117, 120, 133, 154, 161, 162, 166, 180, 186, 187, 190, 211, 213, 216, 219, 240, 246, 256, 268, 281, 284, 285, 293, 321, 322, 329, 338, 340, 343, 346, 352, 358, 360, 372, 373, 374, 376, 378, 379, 381, 382, 383, 385, 409, 410, 415, 422, 425, 458, 499, 509, 514, 520, 521, 522, 523, 528, 529, 530, 531, 538, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 572, 573, 575, 592, 608, 617, 637, 638, 639, 640, 652, 657, 660, 745, 763, 766, 767, 769, 777, 785, 787, 788, 789, 790, 793, 835, 836, 843, 855, 858, 859, 866, 867, 874, 875, 876, 877, 943, 946, 948, 949, 950, 951, 954, 957, 966, 967, 969, 971, 979, 987, 995, 997, 998, 999, 1000, 1001, 1004, 1005, 1006, 1007, 1009, 1011], "choic": [4, 7, 26, 37, 43, 52, 62, 66, 73, 94, 117, 138, 139, 145, 149, 171, 183, 219, 233, 237, 239, 242, 264, 286, 290, 320, 321, 329, 333, 344, 348, 351, 360, 364, 374, 376, 378, 380, 381, 383, 384, 417, 427, 436, 437, 438, 439, 440, 441, 443, 503, 505, 506, 512, 524, 603, 612, 613, 621, 623, 624, 626, 634, 645, 657, 670, 706, 795, 808, 809, 814, 816, 817, 843, 846, 855, 857, 866, 867, 890, 943, 948, 950, 951, 952, 953, 954, 955, 957, 960, 962, 967, 968, 969, 970, 1002, 1005, 1006, 1010, 1011], "arbitrari": [4, 52, 80, 87, 88, 89, 106, 145, 161, 182, 199, 200, 237, 279, 283, 285, 290, 320, 328, 334, 346, 358, 360, 375, 378, 379, 381, 382, 386, 411, 415, 420, 422, 430, 497, 498, 524, 525, 546, 604, 613, 634, 645, 653, 706, 753, 764, 765, 770, 772, 806, 807, 808, 809, 810, 812, 814, 816, 817, 818, 819, 820, 830, 832, 845, 943, 945, 946, 950, 951, 954, 957, 964, 974, 988, 995, 996, 999, 1001, 1002, 1003, 1005, 1009, 1011], "held": [4, 8, 67, 94, 115, 156, 190, 227, 242, 247, 258, 378, 381, 524, 525, 526, 527, 666, 763, 766, 767, 777, 823, 824, 836, 943, 944, 953, 962, 988], "point": [4, 9, 11, 13, 14, 16, 25, 29, 34, 35, 37, 38, 45, 46, 49, 52, 55, 57, 61, 64, 75, 76, 79, 83, 84, 85, 86, 88, 90, 92, 101, 103, 107, 110, 111, 112, 117, 120, 136, 140, 145, 146, 151, 154, 155, 156, 161, 165, 171, 174, 176, 178, 180, 182, 183, 184, 186, 188, 191, 194, 195, 199, 200, 202, 203, 204, 205, 206, 209, 212, 214, 227, 231, 233, 236, 240, 241, 246, 248, 249, 258, 259, 262, 263, 264, 265, 266, 267, 268, 270, 272, 274, 280, 281, 283, 285, 297, 298, 302, 304, 308, 309, 310, 312, 313, 317, 318, 320, 321, 322, 325, 329, 333, 334, 335, 340, 341, 342, 343, 344, 345, 346, 348, 350, 351, 352, 354, 358, 360, 361, 373, 374, 379, 380, 381, 382, 385, 386, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 417, 419, 420, 421, 422, 423, 425, 426, 434, 437, 439, 463, 469, 477, 479, 480, 484, 487, 490, 495, 498, 500, 506, 517, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 575, 576, 593, 596, 597, 598, 602, 603, 604, 609, 610, 616, 620, 622, 635, 636, 638, 640, 641, 643, 644, 647, 648, 653, 654, 655, 656, 657, 658, 659, 666, 671, 672, 675, 678, 682, 687, 689, 695, 700, 701, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 728, 743, 744, 754, 755, 761, 762, 763, 777, 787, 796, 806, 807, 808, 809, 810, 811, 812, 813, 814, 816, 817, 818, 819, 820, 823, 824, 831, 836, 845, 860, 861, 862, 868, 869, 870, 871, 872, 874, 875, 876, 877, 878, 880, 884, 946, 948, 950, 951, 952, 953, 954, 955, 956, 957, 958, 960, 961, 964, 966, 967, 969, 970, 973, 974, 975, 983, 986, 987, 988, 995, 996, 997, 999, 1001, 1002, 1003, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "naive_linear_predict": 4, "one_hot_linear_predict": 4, "cyclic_cossin_linear_predict": 4, "cyclic_spline_linear_predict": 4, "zoom": [4, 106, 279], "insight": [4, 7, 154, 155, 183, 184, 200, 276, 279, 320, 328, 372, 763, 766, 767, 777, 789, 961, 970, 978], "last_hour": [4, 13], "slice": [4, 13, 17, 110, 117, 191, 204, 207, 214, 267, 270, 291, 292, 304, 341, 347, 348, 355, 375, 429, 432, 458, 459, 473, 511, 604, 738, 742, 745, 882, 906, 907, 925, 1007, 1009], "suptitl": [4, 5, 13, 15, 30, 31, 32, 36, 37, 47, 50, 54, 57, 64, 71, 87, 90, 97, 101, 110, 111, 119, 122, 147, 154, 155, 157, 176, 181, 197, 198, 202, 203, 204, 218, 228, 235, 277, 279, 281, 288, 290, 297, 298, 302, 315, 316, 325], "label": [4, 6, 7, 9, 11, 12, 13, 14, 16, 20, 23, 24, 25, 26, 28, 30, 31, 35, 37, 39, 40, 42, 43, 44, 45, 46, 48, 49, 52, 53, 55, 57, 60, 61, 62, 63, 64, 69, 71, 73, 74, 75, 76, 79, 80, 84, 85, 89, 91, 93, 94, 95, 96, 101, 102, 103, 104, 105, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 125, 132, 138, 139, 143, 144, 145, 146, 147, 149, 151, 154, 157, 159, 161, 162, 164, 165, 166, 170, 171, 172, 176, 182, 183, 184, 185, 188, 189, 190, 191, 192, 196, 197, 199, 200, 203, 204, 205, 209, 214, 215, 217, 219, 220, 227, 233, 234, 237, 238, 240, 241, 242, 243, 245, 248, 249, 250, 251, 252, 253, 258, 264, 266, 268, 271, 275, 277, 279, 280, 284, 288, 289, 292, 295, 296, 300, 301, 302, 310, 312, 315, 316, 320, 321, 324, 325, 326, 327, 335, 338, 339, 340, 345, 346, 348, 351, 355, 360, 361, 371, 372, 384, 385, 391, 392, 396, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 424, 426, 427, 430, 434, 452, 453, 454, 458, 459, 460, 461, 467, 468, 473, 474, 477, 479, 480, 484, 487, 488, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 532, 534, 535, 557, 558, 559, 560, 561, 563, 564, 565, 569, 570, 571, 574, 575, 596, 623, 624, 631, 632, 633, 638, 639, 640, 641, 642, 643, 662, 663, 665, 667, 668, 669, 670, 672, 674, 675, 677, 678, 679, 680, 681, 682, 683, 685, 689, 690, 691, 693, 694, 695, 698, 699, 700, 701, 702, 703, 704, 705, 707, 718, 719, 720, 721, 746, 747, 748, 750, 751, 752, 753, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 769, 770, 772, 777, 778, 779, 781, 782, 783, 785, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 812, 813, 815, 816, 823, 824, 826, 830, 833, 834, 837, 839, 840, 847, 850, 861, 862, 863, 866, 868, 869, 870, 871, 872, 874, 875, 876, 877, 878, 880, 886, 891, 892, 917, 918, 925, 943, 950, 951, 955, 956, 957, 958, 960, 961, 964, 968, 969, 970, 973, 975, 976, 979, 983, 984, 986, 987, 988, 990, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "actual": [4, 13, 26, 43, 57, 71, 80, 107, 117, 136, 159, 171, 182, 186, 190, 227, 235, 242, 322, 329, 333, 335, 343, 344, 346, 348, 351, 352, 358, 359, 360, 372, 374, 379, 382, 383, 399, 474, 480, 481, 492, 500, 503, 505, 512, 527, 528, 609, 610, 613, 623, 624, 631, 632, 633, 634, 635, 637, 639, 641, 642, 643, 645, 652, 656, 660, 666, 669, 674, 680, 686, 687, 688, 749, 761, 766, 767, 782, 783, 812, 843, 866, 872, 894, 895, 896, 929, 946, 953, 954, 957, 961, 962, 977, 1002, 1003, 1009, 1010, 1011], "black": [4, 9, 10, 11, 13, 25, 32, 41, 46, 52, 53, 75, 76, 85, 87, 110, 131, 138, 139, 143, 144, 147, 150, 154, 155, 161, 170, 171, 172, 174, 178, 182, 183, 184, 188, 191, 194, 195, 200, 209, 219, 225, 228, 264, 274, 275, 277, 302, 318, 325, 326, 327, 346, 364, 367, 374, 381, 384, 520, 521, 596, 960, 961, 970, 973, 979], "One": [4, 9, 12, 23, 28, 46, 52, 84, 92, 94, 109, 111, 114, 117, 118, 151, 154, 157, 160, 186, 191, 197, 209, 220, 230, 239, 246, 249, 256, 265, 268, 280, 295, 303, 305, 321, 333, 343, 346, 359, 360, 374, 377, 379, 380, 381, 382, 383, 385, 409, 414, 437, 439, 443, 477, 531, 596, 604, 623, 631, 633, 638, 640, 641, 642, 752, 770, 771, 794, 795, 796, 827, 828, 839, 870, 917, 944, 946, 950, 951, 952, 953, 954, 955, 957, 958, 961, 962, 964, 969, 975, 976, 990, 999, 1001, 1008, 1010], "legend": [4, 7, 8, 9, 11, 13, 23, 25, 31, 34, 37, 58, 68, 69, 71, 73, 74, 75, 76, 79, 80, 83, 89, 91, 94, 95, 96, 101, 102, 103, 104, 105, 107, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 124, 125, 132, 138, 139, 143, 144, 145, 146, 147, 154, 155, 159, 161, 162, 164, 167, 170, 171, 172, 176, 182, 183, 184, 185, 188, 189, 190, 191, 192, 195, 196, 197, 199, 200, 205, 212, 213, 214, 215, 217, 220, 227, 234, 236, 238, 239, 241, 242, 243, 244, 246, 249, 251, 252, 253, 256, 262, 264, 265, 266, 271, 275, 280, 284, 289, 292, 295, 299, 307, 310, 312, 315, 320, 324, 325, 326, 327, 665, 984, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "draw": [4, 7, 16, 57, 147, 154, 178, 220, 241, 246, 308, 353, 377, 379, 380, 381, 520, 521, 522, 523, 528, 529, 530, 531, 576, 599, 666, 769, 785, 878, 880, 953, 973, 982, 1008, 1009], "conclus": [4, 92, 154, 156, 182, 184, 239, 241, 329, 381, 982], "abov": [4, 24, 25, 26, 34, 41, 63, 66, 103, 106, 107, 114, 117, 125, 135, 136, 154, 155, 168, 182, 184, 188, 193, 213, 216, 217, 239, 245, 256, 264, 281, 284, 285, 289, 291, 295, 321, 322, 328, 329, 333, 334, 335, 340, 341, 343, 344, 345, 346, 348, 350, 352, 358, 360, 361, 372, 374, 375, 376, 378, 379, 380, 382, 384, 406, 410, 429, 432, 454, 460, 461, 462, 488, 555, 599, 669, 719, 763, 767, 775, 777, 787, 829, 830, 843, 849, 855, 863, 917, 943, 944, 946, 948, 950, 951, 954, 957, 959, 961, 964, 968, 969, 970, 974, 979, 980, 986, 987, 988, 1001], "problemat": [4, 235, 375, 944, 1003], "captur": [4, 9, 12, 13, 34, 36, 80, 114, 119, 131, 143, 154, 161, 166, 182, 186, 231, 258, 289, 308, 312, 354, 374, 381, 382, 383, 536, 553, 554, 556, 812, 921, 954, 959, 967, 971, 986, 1007], "big": [4, 41, 57, 59, 187, 203, 219, 231, 334, 346, 352, 361, 376, 382, 386, 503, 526, 527, 529, 530, 769, 790, 801, 802, 803, 804, 805, 974, 978, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "goe": [4, 34, 106, 328, 344, 346, 381, 436, 437, 443, 522, 523, 529, 530, 531, 874, 875, 876, 877, 964, 968], "artifact": [4, 14, 43, 44, 279, 335, 350], "discontinu": [4, 358], "fail": [4, 51, 63, 88, 94, 146, 147, 161, 166, 186, 216, 239, 288, 334, 344, 346, 348, 349, 354, 361, 364, 377, 378, 405, 437, 439, 641, 642, 643, 823, 824, 885, 897, 943, 951, 995, 996, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012], "intra": [4, 553, 556, 756, 757], "variat": [4, 7, 12, 34, 62, 85, 119, 136, 143, 144, 150, 151, 154, 187, 224, 226, 231, 236, 250, 258, 269, 289, 308, 343, 378, 379, 408, 412, 424, 501, 608, 637, 639, 640, 761, 762, 781, 782, 784, 943, 954, 964, 967, 970, 973, 975, 984, 986, 989, 990, 998, 1000, 1001], "harmon": [4, 34, 246, 321, 374, 500, 506, 693, 694, 700, 747, 759, 954], "phase": [4, 166, 176, 333, 592, 946, 951, 957, 978, 1003, 1005], "potenti": [4, 26, 52, 73, 117, 150, 153, 155, 161, 265, 266, 274, 294, 295, 312, 322, 333, 334, 344, 360, 364, 365, 374, 378, 381, 382, 433, 447, 448, 449, 450, 461, 489, 514, 522, 523, 526, 527, 529, 530, 538, 571, 576, 599, 727, 856, 857, 864, 874, 875, 876, 877, 960, 968, 970, 973, 988, 998, 1005, 1006, 1009, 1012], "fix": [4, 8, 20, 24, 32, 43, 67, 96, 106, 107, 110, 117, 138, 139, 143, 146, 154, 166, 184, 200, 219, 231, 242, 274, 288, 289, 290, 291, 292, 293, 294, 295, 321, 333, 334, 340, 342, 344, 345, 346, 348, 349, 354, 358, 360, 361, 365, 374, 375, 378, 379, 381, 382, 384, 417, 427, 437, 469, 477, 496, 502, 505, 507, 513, 514, 524, 525, 529, 530, 553, 556, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 592, 595, 618, 628, 633, 635, 649, 652, 656, 660, 672, 749, 761, 777, 784, 808, 809, 811, 814, 816, 817, 833, 836, 850, 874, 875, 903, 921, 943, 950, 953, 954, 957, 964, 974, 988, 993, 994, 996, 997, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013], "two": [4, 7, 9, 11, 15, 20, 23, 25, 28, 32, 34, 36, 37, 40, 52, 57, 61, 66, 67, 71, 75, 79, 80, 83, 84, 85, 87, 89, 90, 92, 95, 100, 101, 102, 109, 110, 111, 112, 114, 117, 118, 119, 120, 123, 133, 136, 138, 139, 140, 141, 144, 145, 149, 150, 151, 154, 155, 156, 161, 165, 166, 170, 171, 172, 173, 178, 182, 183, 184, 190, 191, 194, 199, 200, 204, 206, 207, 209, 214, 216, 217, 219, 225, 226, 227, 229, 230, 231, 234, 236, 240, 246, 256, 262, 264, 267, 268, 270, 272, 279, 281, 284, 288, 289, 291, 292, 299, 304, 305, 308, 309, 310, 312, 317, 320, 321, 322, 325, 329, 339, 340, 341, 342, 343, 344, 346, 348, 350, 352, 353, 354, 358, 360, 361, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 406, 407, 408, 409, 410, 412, 415, 416, 417, 418, 422, 424, 429, 434, 435, 436, 437, 438, 439, 440, 441, 453, 455, 456, 457, 458, 459, 461, 463, 465, 466, 467, 468, 469, 470, 472, 475, 479, 484, 487, 501, 503, 505, 509, 512, 514, 515, 518, 525, 535, 546, 549, 555, 556, 557, 560, 561, 563, 564, 565, 566, 567, 568, 571, 572, 573, 575, 576, 585, 586, 589, 593, 596, 597, 604, 608, 610, 635, 636, 638, 657, 664, 668, 669, 670, 677, 680, 681, 684, 686, 687, 688, 695, 696, 699, 700, 702, 705, 707, 718, 719, 721, 727, 728, 735, 738, 741, 742, 743, 744, 745, 749, 750, 758, 759, 760, 761, 795, 806, 807, 808, 809, 810, 812, 814, 816, 817, 818, 823, 824, 830, 831, 838, 839, 840, 841, 860, 861, 862, 866, 867, 874, 876, 877, 917, 933, 934, 940, 943, 944, 946, 948, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 964, 966, 967, 968, 969, 970, 971, 975, 979, 983, 986, 987, 988, 992, 995, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "onc": [4, 8, 47, 133, 136, 138, 203, 216, 219, 237, 240, 256, 259, 285, 288, 292, 320, 322, 328, 329, 333, 335, 340, 341, 344, 346, 350, 351, 352, 353, 354, 359, 360, 361, 374, 375, 377, 378, 379, 381, 382, 383, 384, 414, 416, 418, 437, 473, 474, 503, 509, 516, 524, 525, 555, 556, 562, 576, 584, 592, 612, 616, 618, 620, 626, 628, 630, 631, 632, 633, 641, 642, 643, 662, 677, 681, 683, 700, 745, 764, 768, 771, 781, 801, 802, 803, 804, 805, 878, 950, 951, 957, 964, 968, 969, 970, 979, 988, 992, 995, 1003, 1005, 1006, 1007, 1008, 1012], "specif": [4, 11, 12, 20, 26, 32, 41, 52, 59, 62, 66, 68, 107, 117, 122, 143, 146, 151, 154, 155, 159, 186, 200, 234, 239, 256, 279, 288, 289, 293, 312, 320, 321, 322, 329, 333, 334, 341, 346, 349, 351, 352, 354, 358, 360, 364, 370, 373, 374, 375, 378, 379, 381, 382, 383, 384, 398, 461, 468, 499, 516, 522, 529, 532, 533, 534, 535, 539, 553, 556, 558, 577, 578, 579, 580, 582, 583, 584, 585, 587, 588, 590, 605, 608, 611, 612, 617, 623, 637, 652, 662, 664, 677, 678, 710, 763, 764, 765, 770, 771, 772, 777, 789, 802, 895, 897, 898, 917, 930, 931, 932, 948, 950, 951, 953, 954, 956, 957, 959, 961, 962, 964, 968, 970, 971, 972, 977, 988, 990, 995, 999, 1003, 1004, 1005, 1006, 1009, 1010, 1012], "furthermor": [4, 13, 34, 107, 144, 155, 156, 219, 220, 222, 259, 320, 321, 333, 335, 353, 374, 379, 381, 382, 527, 555, 571, 584, 669, 700, 710, 719, 721, 759, 866, 950, 962, 998, 1002], "enforc": [4, 12, 32, 50, 87, 117, 143, 176, 268, 333, 346, 376, 379, 381, 391, 397, 473, 492, 496, 502, 504, 507, 508, 510, 511, 513, 522, 523, 526, 527, 529, 530, 830, 845, 874, 875, 876, 877, 886, 887, 944, 951, 997, 1003, 1005, 1007, 1011], "behav": [4, 12, 49, 54, 186, 234, 279, 290, 308, 329, 346, 352, 358, 359, 374, 375, 378, 846, 950, 964, 969, 971, 974, 988, 995, 1002, 1004, 1008, 1009], "similarli": [4, 12, 34, 52, 85, 118, 155, 157, 166, 171, 182, 210, 219, 239, 274, 279, 294, 308, 329, 334, 342, 344, 348, 351, 360, 371, 377, 378, 382, 693, 694, 702, 747, 748, 751, 949, 951, 952, 954, 961, 968, 969, 971, 979, 983, 1003, 1009, 1011], "spiki": 4, "instanc": [4, 8, 10, 13, 23, 25, 26, 50, 53, 55, 104, 117, 133, 136, 150, 155, 156, 165, 166, 211, 216, 219, 235, 237, 248, 250, 251, 270, 288, 295, 302, 304, 305, 311, 312, 320, 321, 322, 332, 333, 334, 340, 341, 343, 344, 345, 346, 348, 350, 351, 352, 354, 355, 358, 360, 364, 365, 371, 372, 374, 375, 378, 379, 381, 382, 383, 384, 385, 386, 388, 398, 399, 401, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 422, 423, 424, 425, 427, 429, 430, 434, 435, 436, 437, 438, 439, 440, 441, 447, 448, 449, 450, 453, 456, 457, 460, 461, 462, 468, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 542, 546, 547, 548, 549, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 572, 573, 575, 576, 585, 592, 593, 594, 595, 597, 599, 600, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 672, 685, 693, 694, 702, 735, 738, 742, 743, 744, 745, 747, 748, 751, 752, 753, 756, 757, 761, 762, 763, 765, 766, 767, 768, 769, 770, 772, 775, 777, 778, 779, 780, 781, 782, 783, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 855, 858, 859, 861, 862, 863, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 879, 886, 887, 889, 897, 898, 902, 903, 910, 911, 912, 913, 922, 923, 924, 925, 928, 938, 939, 943, 944, 950, 951, 954, 956, 957, 960, 962, 964, 968, 969, 970, 974, 979, 986, 987, 988, 990, 995, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "shorter": [4, 144, 228, 358, 374, 379, 415, 422, 528, 662, 956, 960, 988, 1006], "necessarili": [4, 29, 68, 90, 154, 182, 190, 200, 214, 215, 226, 281, 320, 321, 340, 350, 370, 372, 374, 381, 592, 814, 816, 817, 818, 948, 951, 953, 954], "59": [4, 13, 159, 166, 200, 313, 320, 343, 352, 374, 375, 475, 954, 991, 995], "37": [4, 43, 166, 242, 297, 328, 341, 381, 489, 681, 846, 857, 964, 995], "creat": [4, 5, 8, 11, 13, 16, 20, 21, 25, 26, 28, 30, 32, 34, 36, 38, 40, 41, 43, 46, 49, 55, 57, 59, 67, 68, 75, 80, 83, 89, 92, 103, 106, 110, 111, 112, 114, 118, 121, 134, 135, 138, 140, 143, 144, 145, 147, 150, 153, 155, 161, 163, 165, 168, 178, 183, 184, 194, 195, 204, 214, 216, 219, 220, 222, 230, 234, 235, 237, 239, 249, 267, 269, 270, 281, 283, 284, 288, 291, 292, 302, 304, 305, 309, 310, 313, 316, 317, 318, 322, 324, 326, 327, 329, 334, 341, 342, 344, 345, 346, 348, 350, 351, 352, 353, 354, 355, 359, 360, 364, 372, 374, 375, 378, 380, 381, 382, 384, 403, 416, 418, 430, 431, 464, 480, 481, 482, 483, 511, 518, 520, 521, 522, 523, 524, 525, 528, 529, 530, 531, 553, 554, 556, 562, 593, 595, 596, 597, 598, 662, 663, 665, 666, 667, 746, 753, 763, 765, 769, 773, 777, 781, 785, 787, 788, 796, 827, 839, 868, 871, 874, 875, 876, 877, 881, 884, 906, 907, 913, 922, 927, 939, 944, 950, 953, 954, 955, 957, 961, 964, 965, 966, 968, 969, 970, 973, 974, 978, 984, 986, 987, 992, 995, 996, 998, 1001, 1005, 1008, 1009, 1010, 1011, 1012, 1013], "turn": [4, 30, 73, 149, 150, 154, 166, 197, 198, 214, 239, 263, 322, 333, 334, 335, 341, 358, 360, 361, 373, 374, 375, 377, 379, 382, 383, 384, 546, 547, 554, 572, 573, 795, 799, 868, 871, 889, 944, 948, 956, 959, 964, 978, 988, 1000, 1002, 1003, 1008], "downstream": [4, 75, 286, 322, 382, 496, 499, 502, 506, 507, 571, 839, 964, 1005], "freedom": [4, 89, 143, 170, 171, 173, 239, 506, 621, 761, 950, 998], "underfit": [4, 32, 114, 138, 151, 156, 183, 186, 232, 254, 274, 285, 316, 381, 622, 763, 766, 767, 777, 788, 789, 826, 841, 949, 950, 975], "approxim": [4, 5, 26, 31, 43, 50, 75, 91, 92, 96, 105, 113, 114, 136, 139, 154, 162, 178, 182, 183, 196, 200, 204, 207, 208, 209, 212, 215, 231, 239, 244, 253, 254, 260, 261, 268, 279, 281, 282, 284, 288, 291, 320, 322, 326, 327, 329, 338, 343, 355, 358, 360, 371, 372, 375, 377, 378, 379, 381, 384, 386, 387, 388, 398, 414, 434, 435, 438, 439, 440, 441, 447, 448, 449, 456, 461, 467, 486, 489, 498, 499, 500, 501, 503, 504, 505, 506, 508, 509, 510, 511, 512, 524, 525, 547, 554, 575, 576, 584, 603, 604, 605, 606, 607, 622, 623, 624, 637, 639, 641, 642, 644, 652, 657, 722, 723, 728, 761, 764, 781, 787, 791, 792, 806, 807, 810, 814, 816, 817, 818, 822, 826, 827, 832, 836, 838, 839, 843, 855, 866, 871, 872, 902, 903, 928, 947, 948, 949, 950, 951, 953, 957, 958, 959, 960, 961, 962, 966, 968, 969, 970, 973, 974, 975, 988, 990, 995, 996, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009], "especi": [4, 8, 13, 52, 53, 111, 114, 117, 154, 182, 216, 285, 293, 321, 329, 334, 340, 346, 354, 358, 360, 372, 374, 382, 408, 414, 466, 503, 522, 523, 524, 525, 529, 530, 531, 611, 612, 613, 615, 617, 618, 619, 623, 624, 625, 626, 627, 628, 634, 645, 660, 670, 710, 801, 802, 803, 804, 805, 874, 875, 876, 877, 950, 956, 957, 964, 978, 998, 1003, 1007, 1008, 1009], "sharp": [4, 155, 961, 964], "rush": [4, 13, 346], "flatter": [4, 24], "accur": [4, 9, 13, 21, 24, 25, 75, 87, 116, 138, 145, 154, 155, 186, 197, 200, 239, 246, 250, 256, 292, 320, 321, 329, 345, 360, 372, 374, 376, 379, 381, 382, 383, 402, 408, 412, 416, 418, 424, 496, 503, 505, 507, 508, 510, 511, 512, 572, 573, 599, 766, 767, 806, 807, 902, 903, 946, 951, 954, 970, 1009], "tend": [4, 12, 26, 34, 36, 40, 49, 52, 54, 136, 154, 155, 171, 182, 187, 200, 219, 225, 228, 236, 240, 258, 277, 312, 322, 333, 335, 346, 348, 360, 372, 374, 376, 379, 381, 383, 402, 413, 618, 812, 843, 855, 903, 950, 951, 957, 970, 988], "under": [4, 7, 11, 23, 24, 26, 38, 64, 73, 74, 94, 111, 114, 155, 182, 209, 219, 239, 246, 248, 249, 280, 294, 340, 346, 348, 350, 352, 354, 360, 364, 368, 372, 374, 376, 378, 379, 382, 383, 411, 416, 418, 435, 436, 437, 438, 439, 440, 441, 497, 504, 506, 508, 619, 620, 621, 667, 671, 672, 673, 680, 706, 718, 752, 753, 761, 762, 811, 910, 950, 951, 952, 954, 957, 964, 968, 969, 970, 973, 974, 988, 995, 997, 998, 1000, 1003, 1007], "These": [4, 5, 7, 26, 48, 87, 89, 106, 110, 151, 155, 171, 182, 183, 184, 210, 246, 256, 259, 263, 277, 279, 286, 287, 292, 298, 300, 329, 333, 334, 339, 342, 343, 346, 348, 350, 353, 355, 358, 360, 364, 365, 368, 371, 372, 373, 374, 377, 379, 381, 382, 383, 384, 407, 411, 413, 463, 473, 474, 480, 503, 532, 533, 567, 568, 633, 641, 642, 664, 671, 697, 742, 758, 763, 766, 767, 769, 777, 785, 787, 788, 789, 790, 791, 793, 811, 812, 831, 943, 945, 948, 950, 951, 954, 955, 965, 967, 969, 973, 979, 983, 988, 995, 1001, 1003, 1004, 1005, 1008, 1012], "systemat": [4, 117, 239, 348, 677, 692, 954, 1010], "reveal": [4, 13, 154, 156, 320, 352, 371, 951, 1011], "form": [4, 9, 19, 30, 39, 57, 64, 87, 125, 145, 146, 151, 154, 215, 216, 231, 239, 297, 329, 340, 343, 346, 348, 350, 360, 361, 371, 373, 374, 377, 378, 379, 380, 381, 382, 384, 386, 388, 402, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 421, 424, 428, 429, 430, 432, 434, 435, 436, 437, 438, 439, 440, 441, 447, 448, 449, 450, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 535, 546, 547, 548, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 600, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 650, 652, 653, 654, 655, 656, 657, 658, 664, 761, 762, 763, 766, 767, 768, 771, 773, 777, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 822, 823, 824, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 858, 859, 861, 862, 863, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 892, 911, 914, 943, 945, 947, 948, 950, 951, 954, 955, 958, 959, 960, 964, 969, 973, 979, 986, 1001, 1005, 1007], "explain": [4, 5, 12, 26, 53, 69, 79, 80, 95, 114, 138, 143, 144, 155, 156, 182, 200, 209, 216, 231, 249, 252, 285, 320, 321, 334, 344, 346, 350, 358, 368, 370, 377, 379, 384, 458, 486, 489, 499, 506, 509, 514, 590, 613, 621, 634, 645, 686, 687, 688, 692, 749, 950, 957, 970, 972, 973, 984, 986, 987, 1006, 1008, 1009], "lack": [4, 26, 312, 346, 348, 358, 378, 791, 881, 969, 1009], "deriv": [4, 19, 96, 97, 113, 143, 146, 156, 170, 171, 175, 183, 334, 341, 348, 376, 378, 380, 381, 382, 384, 386, 406, 410, 411, 430, 498, 571, 582, 587, 613, 634, 641, 645, 823, 824, 839, 845, 866, 867, 948, 950, 951, 954, 958, 960, 969, 995, 996, 997, 1002, 1003, 1004, 1010], "address": [4, 45, 186, 320, 341, 346, 374, 382, 412, 622, 950, 951, 956, 957, 958, 959, 960, 964, 978, 986, 1003], "section": [4, 34, 87, 92, 104, 112, 117, 122, 127, 128, 129, 143, 147, 153, 154, 155, 157, 161, 166, 170, 171, 184, 206, 210, 216, 219, 221, 237, 239, 242, 248, 284, 285, 286, 290, 320, 321, 322, 329, 339, 341, 344, 346, 347, 348, 350, 351, 352, 353, 354, 361, 365, 368, 372, 373, 375, 377, 378, 379, 381, 382, 383, 384, 404, 408, 424, 499, 579, 584, 587, 602, 610, 752, 762, 868, 871, 943, 948, 950, 954, 955, 957, 958, 960, 961, 968, 969, 971, 972, 986, 988, 995, 997, 998, 999, 1002], "margin": [4, 12, 16, 24, 26, 84, 103, 139, 140, 141, 142, 143, 144, 151, 154, 155, 160, 193, 217, 219, 239, 256, 279, 285, 303, 304, 306, 307, 308, 310, 312, 317, 343, 372, 373, 379, 381, 384, 477, 575, 576, 596, 610, 641, 699, 795, 843, 855, 868, 871, 950, 954, 956, 960, 961, 964, 968, 969, 975, 986, 1002, 1004], "construct": [4, 11, 66, 68, 101, 103, 105, 109, 122, 136, 200, 210, 216, 221, 223, 272, 280, 282, 289, 292, 340, 343, 348, 355, 360, 374, 375, 378, 379, 381, 382, 385, 399, 406, 407, 409, 410, 415, 417, 422, 428, 430, 432, 484, 500, 506, 509, 520, 521, 546, 552, 604, 653, 655, 656, 777, 806, 807, 808, 809, 810, 812, 814, 816, 817, 818, 825, 826, 827, 828, 830, 871, 885, 887, 902, 903, 912, 913, 917, 943, 944, 946, 950, 951, 954, 955, 957, 964, 967, 969, 970, 974, 979, 983, 1000, 1002, 1003, 1006, 1009], "polynomialfeatur": [4, 161, 182, 183, 188, 221, 253, 290, 312, 845, 950, 964, 999, 1003, 1004, 1005, 1008, 1009, 1011, 1012], "coars": [4, 110, 352, 413, 426], "explicitli": [4, 43, 108, 138, 145, 149, 150, 183, 212, 216, 295, 312, 322, 329, 334, 340, 342, 346, 347, 348, 350, 358, 360, 365, 370, 378, 382, 384, 500, 514, 515, 544, 545, 562, 592, 613, 623, 624, 634, 645, 674, 691, 746, 752, 753, 766, 767, 797, 800, 806, 807, 832, 856, 857, 922, 943, 944, 946, 948, 950, 951, 954, 956, 957, 964, 978, 988, 995, 998, 999, 1000, 1001, 1002, 1003, 1004, 1007, 1008, 1009, 1013], "too": [4, 7, 12, 13, 17, 26, 41, 47, 52, 54, 59, 66, 70, 77, 91, 114, 149, 156, 166, 183, 186, 203, 213, 219, 226, 233, 237, 246, 254, 276, 285, 308, 320, 326, 327, 333, 343, 346, 352, 354, 358, 360, 372, 374, 376, 378, 381, 382, 383, 386, 402, 414, 503, 553, 556, 644, 657, 672, 801, 802, 803, 804, 805, 831, 844, 846, 949, 951, 953, 954, 956, 957, 961, 986, 996, 999, 1002, 1003, 1004, 1005, 1007], "mani": [4, 7, 10, 19, 52, 53, 70, 73, 77, 101, 107, 108, 109, 110, 115, 132, 136, 156, 182, 202, 213, 226, 233, 239, 246, 247, 251, 259, 279, 284, 285, 288, 289, 290, 291, 292, 294, 295, 320, 329, 333, 335, 341, 343, 345, 346, 359, 360, 361, 364, 371, 372, 374, 375, 376, 379, 381, 382, 383, 384, 386, 468, 518, 519, 522, 523, 524, 525, 529, 530, 531, 553, 556, 571, 574, 592, 604, 615, 619, 623, 624, 631, 632, 633, 641, 642, 643, 657, 660, 738, 742, 763, 767, 777, 823, 824, 839, 844, 846, 866, 874, 875, 876, 877, 943, 944, 946, 950, 951, 953, 954, 955, 956, 957, 960, 961, 964, 967, 969, 971, 972, 973, 974, 978, 986, 988, 995, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1009, 1010, 1011], "featureunion": [4, 70, 338, 360, 365, 373, 429, 594, 828, 944, 974, 978, 990, 996, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1013], "hour_workday_interact": 4, "interaction_onli": [4, 841, 950, 964], "combin": [4, 12, 13, 20, 24, 26, 58, 66, 67, 69, 70, 71, 83, 87, 95, 96, 100, 111, 112, 116, 117, 125, 138, 144, 149, 150, 151, 154, 166, 182, 186, 199, 200, 206, 209, 211, 214, 239, 240, 248, 250, 251, 268, 275, 285, 290, 291, 293, 311, 312, 322, 325, 333, 338, 342, 343, 346, 351, 359, 360, 371, 372, 373, 374, 375, 378, 379, 380, 381, 382, 383, 384, 386, 387, 410, 429, 431, 432, 438, 440, 441, 444, 445, 446, 454, 461, 473, 474, 480, 486, 489, 491, 496, 502, 503, 505, 507, 512, 514, 525, 527, 530, 532, 533, 575, 579, 581, 586, 589, 595, 599, 608, 611, 612, 617, 618, 623, 624, 625, 626, 627, 628, 631, 633, 637, 638, 639, 640, 641, 643, 644, 646, 649, 657, 666, 694, 752, 763, 766, 767, 774, 775, 787, 789, 793, 810, 825, 826, 827, 831, 839, 840, 841, 846, 866, 928, 943, 946, 947, 950, 954, 955, 957, 960, 964, 967, 968, 970, 971, 975, 978, 984, 986, 988, 995, 1000, 1003, 1006, 1007, 1008, 1010, 1011], "previou": [4, 40, 50, 67, 87, 104, 111, 112, 114, 122, 138, 143, 144, 153, 154, 155, 166, 168, 183, 213, 215, 216, 239, 242, 246, 279, 284, 292, 320, 321, 322, 329, 333, 341, 346, 348, 351, 352, 354, 358, 360, 361, 364, 374, 381, 382, 433, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 595, 611, 613, 617, 618, 623, 625, 627, 631, 632, 633, 634, 641, 642, 643, 645, 672, 782, 797, 800, 815, 823, 824, 863, 880, 950, 954, 958, 964, 974, 979, 988, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "nice": [4, 64, 183, 216, 279, 333, 379, 988], "cyclic_spline_interactions_pipelin": 4, "078": 4, "009": [4, 37, 352, 975], "104": [4, 13, 23], "highlight": [4, 13, 15, 52, 67, 75, 85, 99, 105, 106, 119, 136, 138, 139, 144, 149, 150, 155, 156, 159, 182, 183, 184, 200, 211, 216, 221, 222, 223, 234, 235, 251, 256, 261, 283, 285, 320, 322, 346, 350, 351, 354, 358, 384, 408, 411, 412, 429, 432, 455, 456, 461, 466, 467, 469, 477, 480, 486, 489, 503, 506, 526, 527, 529, 530, 532, 564, 567, 593, 595, 597, 599, 605, 611, 613, 617, 623, 634, 645, 653, 666, 667, 682, 696, 712, 752, 759, 763, 764, 766, 767, 769, 777, 785, 788, 789, 792, 808, 810, 827, 831, 836, 839, 840, 841, 845, 846, 847, 863, 864, 866, 871, 874, 875, 898, 951, 954, 962, 964, 969, 975, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "anoth": [4, 34, 87, 92, 101, 112, 116, 136, 138, 146, 150, 154, 171, 186, 190, 207, 209, 216, 220, 226, 239, 241, 242, 245, 249, 269, 320, 322, 324, 329, 333, 335, 340, 341, 344, 346, 348, 352, 358, 360, 368, 371, 374, 378, 379, 381, 382, 383, 385, 407, 409, 417, 420, 427, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 473, 503, 505, 512, 638, 641, 657, 674, 684, 769, 785, 825, 826, 847, 943, 944, 949, 950, 951, 954, 955, 957, 960, 964, 968, 969, 979, 986, 987, 988, 1004, 1005, 1012], "either": [4, 10, 26, 28, 67, 107, 110, 111, 117, 154, 170, 172, 210, 219, 234, 243, 248, 264, 316, 320, 328, 333, 334, 338, 341, 344, 346, 347, 348, 352, 360, 365, 368, 372, 374, 375, 377, 378, 379, 380, 381, 382, 383, 384, 386, 407, 412, 417, 452, 461, 477, 489, 498, 499, 501, 509, 520, 521, 522, 523, 524, 525, 526, 527, 529, 530, 531, 532, 533, 547, 548, 549, 553, 554, 555, 556, 558, 559, 562, 567, 572, 573, 575, 576, 587, 592, 595, 597, 598, 615, 619, 621, 629, 641, 643, 647, 648, 655, 662, 663, 667, 671, 672, 676, 677, 685, 688, 690, 691, 692, 693, 694, 699, 702, 703, 704, 706, 716, 720, 733, 738, 742, 746, 747, 748, 749, 751, 752, 753, 758, 763, 766, 767, 769, 777, 785, 786, 787, 788, 789, 790, 791, 793, 796, 826, 856, 857, 863, 866, 867, 874, 875, 876, 877, 881, 911, 915, 943, 950, 954, 955, 956, 957, 958, 959, 962, 964, 968, 969, 979, 987, 988, 995, 998, 1004, 1005, 1006, 1009], "after": [4, 17, 20, 21, 25, 43, 50, 52, 66, 67, 71, 76, 89, 101, 112, 117, 120, 122, 125, 132, 136, 143, 145, 147, 149, 154, 159, 175, 182, 219, 220, 223, 228, 239, 248, 258, 259, 267, 269, 279, 280, 283, 284, 320, 321, 335, 341, 343, 344, 345, 346, 348, 350, 352, 353, 354, 358, 360, 368, 370, 371, 372, 374, 375, 378, 379, 382, 383, 386, 407, 412, 415, 416, 417, 418, 421, 427, 480, 497, 501, 518, 519, 524, 525, 526, 527, 562, 592, 595, 623, 624, 631, 632, 633, 638, 640, 641, 642, 643, 657, 677, 690, 720, 758, 761, 762, 766, 767, 815, 822, 826, 839, 845, 866, 871, 872, 943, 944, 948, 950, 954, 958, 959, 964, 966, 968, 969, 970, 974, 979, 986, 988, 995, 998, 1002, 1003, 1006, 1007, 1010, 1013], "quadrat": [4, 9, 27, 31, 75, 76, 77, 143, 147, 151, 196, 219, 230, 241, 291, 373, 405, 423, 426, 514, 515, 588, 596, 613, 623, 624, 634, 641, 645, 681, 871, 872, 950, 951, 954, 957, 960, 964, 968, 969, 975, 976, 990, 996], "tractabl": [4, 378, 599, 973, 1008], "nystr\u00f6m": [4, 946], "latter": [4, 15, 230, 239, 248, 249, 267, 284, 316, 335, 343, 360, 378, 381, 382, 388, 402, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 430, 434, 435, 436, 437, 438, 439, 440, 441, 447, 448, 449, 450, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 546, 547, 548, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 600, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 653, 654, 655, 656, 657, 706, 761, 762, 763, 766, 767, 772, 777, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 822, 823, 824, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 858, 859, 861, 862, 863, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 921, 957, 962, 1004], "kernel_approxim": [4, 149, 151, 158, 159, 196, 209, 214, 290, 642, 722, 723, 832, 946, 975, 979, 996, 1002, 1012], "nystroem": [4, 149, 196, 209, 214, 338, 605, 606, 607, 642, 832, 871, 872, 990, 996, 1002, 1005, 1007, 1008, 1009], "cyclic_spline_poly_pipelin": 4, "poli": [4, 16, 129, 159, 239, 305, 312, 315, 417, 500, 585, 729, 738, 763, 841, 868, 869, 870, 871, 872, 950, 964, 986], "n_compon": [4, 5, 6, 12, 15, 41, 49, 54, 55, 56, 66, 69, 70, 79, 80, 83, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 120, 159, 181, 202, 203, 204, 205, 206, 207, 209, 213, 214, 217, 221, 225, 226, 227, 228, 229, 230, 231, 238, 263, 268, 277, 284, 290, 292, 295, 321, 348, 351, 352, 360, 377, 379, 386, 416, 417, 427, 429, 447, 448, 449, 450, 491, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 604, 605, 606, 607, 653, 654, 655, 656, 657, 658, 659, 660, 661, 761, 762, 815, 822, 825, 858, 859, 860, 903, 946, 948, 951, 953, 957, 984, 987, 996, 997, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1012], "300": [4, 20, 21, 32, 35, 47, 55, 90, 101, 102, 103, 107, 150, 172, 207, 209, 213, 229, 242, 269, 282, 290, 297, 314, 316, 348, 408, 412, 413, 424, 426, 478, 604, 609, 610, 644, 655, 657, 659, 823, 950, 1005], "053": [4, 136, 343, 352], "002": [4, 12, 136, 138, 213, 343, 975], "076": [4, 328, 854, 975], "004": [4, 321], "almost": [4, 32, 107, 113, 184, 190, 216, 219, 253, 284, 300, 329, 339, 341, 350, 352, 358, 359, 360, 365, 374, 378, 379, 435, 436, 437, 438, 440, 441, 442, 761, 943, 949, 950, 953, 954, 969, 987, 988, 1003, 1008], "rival": [4, 863, 967], "intermedi": [4, 7, 49, 52, 106, 114, 219, 308, 358, 382, 524, 525, 584, 826, 954, 1007], "compound": [4, 200, 382, 575, 577, 645, 688, 716, 950, 988], "one_hot_poly_pipelin": 4, "passthrough": [4, 68, 111, 154, 155, 182, 200, 219, 285, 293, 375, 429, 432, 532, 533, 825, 826, 964, 1004, 1006, 1009, 1010, 1012], "082": [4, 45, 93, 975], "006": [4, 247, 352], "111": [4, 7, 8, 16, 64, 83, 93, 179, 197, 206, 239, 259, 818, 987, 998], "competit": [4, 114, 320, 381, 609, 957], "low": [4, 11, 12, 34, 47, 76, 80, 89, 91, 94, 101, 104, 118, 136, 156, 175, 177, 182, 184, 186, 196, 202, 204, 209, 213, 219, 225, 226, 228, 231, 233, 239, 241, 245, 246, 254, 265, 266, 276, 283, 285, 286, 294, 300, 307, 308, 320, 328, 342, 343, 346, 351, 354, 358, 360, 364, 371, 372, 373, 378, 379, 382, 407, 409, 414, 433, 486, 489, 500, 547, 554, 568, 644, 657, 661, 670, 690, 706, 753, 811, 840, 847, 864, 903, 919, 922, 943, 949, 950, 951, 953, 954, 957, 959, 960, 961, 962, 964, 966, 969, 970, 976, 990, 996, 999, 1000, 1001, 1003, 1004, 1009, 1010], "rank": [4, 17, 24, 75, 91, 94, 108, 134, 156, 157, 200, 237, 239, 247, 342, 369, 371, 372, 376, 377, 379, 381, 382, 473, 474, 486, 489, 514, 515, 558, 559, 571, 613, 622, 634, 645, 661, 685, 690, 691, 703, 704, 720, 752, 758, 766, 767, 903, 943, 945, 946, 951, 962, 964, 978, 990, 996, 1001, 1004, 1005, 1009, 1010], "fact": [4, 11, 19, 24, 76, 80, 101, 112, 114, 156, 213, 223, 256, 258, 320, 340, 353, 358, 360, 377, 379, 380, 381, 382, 614, 633, 635, 669, 948, 950, 957, 964, 968, 969, 974, 978, 1009], "smoother": [4, 5, 114, 155, 276, 380], "allow": [4, 20, 53, 55, 70, 71, 83, 91, 92, 104, 105, 112, 120, 138, 143, 145, 147, 176, 182, 186, 200, 203, 210, 213, 220, 222, 223, 225, 239, 258, 288, 289, 290, 291, 293, 312, 313, 320, 328, 329, 333, 340, 341, 344, 346, 347, 348, 350, 353, 355, 358, 360, 361, 365, 372, 373, 374, 375, 377, 378, 379, 381, 382, 383, 384, 385, 402, 408, 409, 411, 412, 414, 429, 430, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 447, 448, 449, 461, 488, 489, 498, 499, 503, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 546, 547, 548, 553, 554, 555, 556, 558, 559, 562, 568, 575, 576, 580, 592, 593, 595, 599, 600, 603, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 653, 655, 657, 664, 706, 726, 729, 738, 742, 745, 756, 757, 761, 762, 763, 764, 765, 766, 767, 770, 772, 774, 777, 781, 784, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 811, 812, 813, 816, 817, 821, 823, 824, 826, 828, 829, 831, 832, 833, 838, 845, 846, 850, 859, 861, 862, 863, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 884, 886, 887, 897, 898, 918, 922, 943, 944, 946, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 964, 966, 967, 968, 969, 970, 973, 974, 978, 979, 992, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "find": [4, 5, 6, 12, 17, 26, 37, 43, 44, 45, 46, 49, 50, 52, 54, 62, 69, 75, 76, 87, 89, 91, 92, 97, 112, 122, 138, 142, 144, 146, 155, 166, 170, 171, 184, 190, 202, 204, 206, 207, 212, 219, 230, 238, 239, 240, 250, 262, 267, 268, 269, 284, 288, 294, 310, 311, 312, 316, 320, 321, 324, 334, 343, 344, 346, 347, 348, 351, 352, 355, 358, 359, 360, 361, 371, 374, 376, 377, 379, 381, 382, 383, 385, 406, 409, 410, 411, 415, 416, 417, 418, 427, 496, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 523, 530, 547, 554, 575, 576, 612, 615, 618, 619, 620, 621, 623, 624, 636, 653, 672, 693, 694, 702, 746, 747, 748, 751, 752, 758, 763, 777, 808, 809, 810, 812, 814, 816, 817, 818, 839, 840, 845, 858, 859, 860, 874, 875, 877, 883, 902, 903, 905, 943, 944, 946, 949, 950, 951, 953, 954, 955, 958, 960, 964, 968, 969, 970, 972, 974, 977, 978, 979, 981, 983, 984, 986, 987, 988, 995, 1002, 1003, 1004, 1005, 1007, 1009, 1010, 1013], "function": [4, 5, 6, 7, 8, 13, 15, 20, 21, 26, 34, 43, 50, 51, 52, 54, 56, 63, 66, 67, 68, 71, 87, 90, 92, 96, 99, 106, 107, 111, 112, 113, 114, 115, 116, 117, 127, 132, 138, 141, 142, 143, 144, 145, 146, 150, 151, 153, 154, 155, 157, 160, 161, 164, 166, 169, 175, 177, 178, 179, 180, 182, 183, 188, 189, 190, 195, 198, 199, 200, 202, 210, 212, 215, 216, 219, 220, 222, 223, 230, 237, 239, 240, 241, 242, 247, 248, 253, 256, 259, 274, 277, 279, 286, 288, 289, 291, 292, 294, 302, 305, 306, 307, 308, 309, 310, 312, 314, 316, 318, 320, 321, 325, 329, 333, 334, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 352, 358, 359, 360, 364, 365, 368, 372, 374, 375, 376, 377, 379, 380, 382, 383, 385, 386, 389, 391, 393, 394, 396, 397, 398, 402, 405, 408, 409, 410, 412, 413, 415, 417, 419, 422, 423, 424, 425, 426, 429, 430, 433, 434, 436, 437, 439, 443, 453, 454, 456, 457, 460, 462, 468, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 532, 537, 540, 546, 547, 553, 554, 556, 557, 558, 559, 560, 561, 563, 564, 565, 566, 567, 569, 572, 573, 574, 575, 576, 580, 582, 584, 585, 587, 588, 592, 593, 596, 597, 598, 599, 600, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 652, 653, 654, 655, 656, 657, 658, 659, 663, 664, 665, 667, 668, 669, 671, 676, 677, 681, 684, 686, 687, 688, 692, 696, 698, 699, 702, 704, 705, 706, 714, 719, 721, 725, 726, 727, 729, 732, 735, 738, 742, 743, 744, 745, 746, 747, 749, 753, 756, 757, 758, 760, 761, 762, 763, 765, 766, 767, 768, 769, 774, 775, 777, 778, 779, 780, 781, 782, 783, 785, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 800, 806, 807, 808, 809, 810, 811, 812, 814, 815, 816, 817, 818, 819, 820, 822, 823, 824, 825, 826, 829, 830, 831, 832, 833, 835, 836, 838, 842, 843, 844, 845, 846, 847, 850, 852, 855, 858, 859, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 881, 884, 893, 895, 896, 897, 902, 903, 913, 914, 920, 921, 922, 924, 925, 928, 929, 938, 943, 944, 945, 947, 949, 951, 952, 955, 957, 958, 959, 960, 961, 962, 964, 967, 968, 970, 973, 974, 975, 976, 979, 982, 983, 984, 988, 990, 992, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1013], "abl": [4, 5, 9, 23, 44, 52, 58, 77, 80, 91, 92, 117, 119, 144, 154, 157, 166, 171, 182, 198, 200, 206, 245, 250, 295, 308, 329, 333, 334, 335, 340, 344, 346, 348, 350, 351, 358, 374, 376, 378, 382, 450, 468, 499, 791, 838, 943, 944, 950, 953, 954, 955, 960, 964, 967, 970, 971, 974, 979, 987, 988, 1001, 1002, 1006], "gbrt_predict": 4, "one_hot_poly_predict": 4, "cyclic_spline_poly_predict": 4, "grow": [4, 13, 36, 159, 166, 261, 316, 322, 333, 358, 370, 376, 382, 522, 523, 524, 525, 529, 530, 531, 773, 806, 807, 874, 875, 876, 877, 943, 954, 957, 970, 978, 982, 986, 998, 999], "depth": [4, 106, 111, 115, 118, 123, 256, 324, 326, 327, 328, 333, 344, 346, 350, 359, 381, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 806, 807, 811, 874, 875, 876, 877, 878, 880, 908, 959, 960, 970, 997, 998, 1006], "accuraci": [4, 6, 7, 8, 16, 24, 28, 29, 30, 31, 66, 67, 68, 69, 101, 107, 108, 112, 113, 120, 132, 133, 135, 139, 157, 159, 182, 186, 190, 197, 198, 227, 237, 238, 239, 240, 241, 243, 245, 254, 256, 261, 267, 268, 269, 277, 281, 284, 294, 297, 298, 300, 308, 311, 312, 316, 329, 333, 348, 359, 360, 373, 374, 378, 381, 382, 383, 391, 402, 414, 434, 436, 437, 443, 497, 499, 506, 514, 515, 516, 518, 520, 522, 523, 524, 526, 529, 530, 532, 534, 575, 599, 623, 624, 631, 633, 636, 639, 640, 641, 657, 662, 668, 673, 676, 678, 683, 696, 697, 698, 702, 707, 718, 727, 751, 758, 760, 790, 793, 794, 795, 796, 797, 798, 801, 802, 803, 804, 805, 808, 813, 815, 816, 823, 861, 862, 866, 868, 871, 874, 876, 902, 903, 943, 948, 949, 950, 951, 955, 957, 958, 962, 966, 968, 970, 983, 988, 1003, 1004, 1012], "On": [4, 12, 13, 17, 25, 64, 67, 68, 79, 80, 92, 101, 104, 106, 108, 109, 114, 118, 119, 122, 125, 131, 133, 142, 143, 154, 155, 156, 163, 170, 171, 184, 186, 210, 211, 212, 213, 215, 216, 219, 220, 221, 222, 223, 225, 227, 230, 234, 235, 236, 237, 239, 240, 241, 242, 244, 246, 251, 277, 279, 281, 283, 284, 285, 289, 290, 292, 293, 295, 299, 308, 316, 328, 333, 344, 347, 348, 350, 358, 360, 368, 370, 372, 374, 378, 379, 381, 383, 384, 608, 621, 656, 699, 725, 831, 847, 943, 947, 950, 953, 954, 956, 960, 962, 967, 969, 983, 986], "contrari": [4, 14, 154, 203, 207, 219, 225, 242, 279, 320, 340, 374, 461, 509, 571, 780, 847, 950, 956, 960], "significantli": [4, 23, 24, 26, 34, 73, 74, 101, 107, 112, 114, 117, 136, 154, 155, 156, 182, 186, 190, 198, 200, 239, 259, 289, 290, 321, 322, 329, 334, 350, 374, 379, 381, 382, 387, 434, 439, 444, 445, 503, 505, 512, 523, 530, 611, 612, 617, 618, 625, 626, 627, 628, 649, 657, 806, 807, 946, 950, 951, 957, 962, 969, 995, 997, 998, 1002, 1003, 1008, 1009, 1010], "over": [4, 7, 8, 9, 16, 20, 23, 25, 26, 29, 34, 47, 52, 53, 68, 69, 70, 87, 104, 107, 112, 117, 118, 131, 135, 138, 146, 149, 153, 155, 164, 176, 182, 190, 200, 209, 219, 239, 240, 242, 244, 246, 247, 248, 251, 264, 272, 274, 275, 281, 291, 292, 294, 297, 320, 321, 333, 334, 335, 341, 342, 345, 346, 347, 348, 352, 359, 360, 370, 372, 373, 374, 375, 378, 379, 380, 381, 382, 386, 411, 414, 429, 437, 474, 498, 499, 501, 502, 503, 504, 511, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 546, 547, 553, 554, 556, 559, 567, 595, 597, 598, 599, 609, 610, 611, 612, 617, 618, 623, 625, 626, 627, 628, 630, 631, 632, 633, 641, 642, 643, 650, 651, 662, 681, 683, 703, 727, 752, 757, 761, 763, 766, 767, 769, 774, 775, 777, 785, 787, 788, 789, 790, 791, 793, 822, 823, 824, 825, 841, 845, 866, 874, 876, 883, 892, 922, 943, 950, 951, 954, 955, 956, 957, 958, 959, 960, 961, 962, 964, 967, 968, 969, 970, 973, 974, 978, 984, 987, 995, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1008], "compet": 4, "access": [4, 46, 73, 112, 219, 226, 231, 295, 320, 328, 333, 334, 346, 347, 348, 354, 358, 360, 361, 370, 374, 376, 377, 381, 382, 384, 415, 422, 429, 501, 532, 533, 534, 535, 582, 824, 825, 826, 881, 943, 950, 953, 954, 960, 961, 962, 968, 969, 974, 978, 979, 987, 988, 995, 997, 1001, 1002, 1003, 1004, 1007, 1009, 1010, 1011], "requir": [4, 7, 14, 24, 42, 43, 45, 50, 52, 54, 55, 64, 66, 83, 91, 93, 106, 107, 111, 112, 115, 117, 118, 122, 136, 155, 166, 171, 179, 182, 202, 204, 210, 213, 216, 219, 223, 240, 248, 250, 259, 261, 279, 284, 290, 291, 320, 321, 322, 340, 343, 344, 346, 348, 350, 352, 354, 358, 360, 361, 364, 365, 370, 373, 374, 375, 376, 378, 379, 381, 382, 383, 385, 391, 397, 402, 403, 404, 409, 411, 415, 417, 422, 427, 429, 432, 434, 447, 448, 449, 461, 473, 486, 489, 500, 506, 514, 515, 516, 518, 520, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 534, 537, 544, 545, 546, 575, 576, 584, 592, 597, 598, 599, 608, 611, 612, 617, 618, 623, 624, 631, 632, 633, 636, 639, 640, 641, 642, 643, 651, 654, 656, 657, 658, 660, 664, 688, 693, 694, 706, 711, 713, 716, 727, 748, 751, 763, 766, 767, 770, 772, 777, 789, 794, 795, 796, 797, 798, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 814, 816, 817, 818, 823, 826, 827, 828, 830, 840, 841, 842, 846, 854, 858, 859, 861, 862, 866, 867, 868, 871, 874, 875, 876, 877, 911, 914, 920, 940, 943, 948, 949, 950, 951, 954, 955, 956, 957, 958, 960, 961, 964, 968, 969, 970, 974, 979, 986, 988, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "geograph": [4, 11, 272, 341, 463], "repartit": 4, "immobil": 4, "quantit": [4, 5, 6, 13, 24, 58, 114, 117, 125, 136, 235, 253, 343, 984], "predictionerrordisplai": [4, 13, 71, 122, 154, 235, 293, 954, 1010, 1012], "nrow": [4, 5, 28, 30, 32, 54, 63, 69, 87, 117, 147, 155, 182, 184, 190, 200, 202, 203, 206, 219, 241, 242, 259, 281, 283, 284, 293, 298, 315, 316, 984], "ncol": [4, 5, 13, 28, 30, 32, 50, 54, 63, 87, 92, 97, 112, 155, 182, 183, 184, 190, 200, 202, 203, 212, 219, 235, 241, 242, 250, 259, 262, 275, 280, 281, 283, 284, 293, 315, 316, 321], "sharex": [4, 7, 15, 32, 69, 85, 92, 123, 147, 155, 184, 241, 264, 300, 984], "sharei": [4, 13, 32, 71, 85, 92, 97, 123, 147, 155, 182, 184, 190, 241, 250, 264, 280, 285, 315, 316, 321], "npolynomi": 4, "ntree": 4, "plot_kind": 4, "actual_vs_predict": [4, 71, 122, 154, 235, 293, 666], "residual_vs_predict": [4, 13, 71, 235, 293, 666], "axis_idx": 4, "kind": [4, 9, 12, 13, 23, 24, 71, 95, 107, 122, 131, 154, 155, 230, 233, 235, 248, 286, 290, 293, 305, 308, 320, 334, 335, 339, 341, 346, 348, 352, 358, 359, 372, 374, 377, 378, 379, 381, 382, 383, 453, 454, 468, 473, 474, 486, 489, 553, 597, 598, 666, 895, 950, 956, 961, 970, 998, 1007, 1009, 1010, 1011], "enumer": [4, 8, 10, 11, 12, 14, 15, 17, 19, 24, 26, 28, 29, 34, 36, 37, 38, 39, 40, 41, 42, 47, 52, 56, 57, 58, 59, 66, 74, 76, 77, 80, 88, 90, 96, 104, 107, 112, 113, 115, 116, 117, 127, 140, 142, 147, 157, 162, 164, 173, 182, 203, 204, 207, 209, 214, 218, 219, 225, 226, 227, 228, 230, 231, 234, 241, 242, 248, 249, 264, 268, 269, 271, 277, 281, 282, 297, 298, 300, 302, 306, 308, 315, 316, 320, 325, 341, 524, 525, 529, 530, 745, 764, 765, 768, 770, 771, 772, 773, 776, 778, 779, 780, 781, 782, 783, 784], "pred": [4, 7, 11, 13, 30, 317, 320, 341, 613, 634, 645, 662, 667, 671, 683, 693, 694, 702, 747, 748, 751, 752, 954], "zip": [4, 5, 8, 9, 12, 13, 23, 25, 29, 30, 32, 34, 35, 37, 39, 42, 46, 52, 60, 61, 62, 71, 80, 85, 87, 88, 91, 95, 96, 97, 103, 105, 112, 122, 123, 144, 149, 151, 154, 155, 156, 167, 173, 174, 182, 190, 191, 202, 213, 219, 226, 230, 231, 237, 241, 242, 243, 246, 248, 259, 262, 264, 267, 274, 275, 276, 281, 283, 284, 285, 301, 305, 316, 317, 325, 344, 381, 790, 964, 988, 991], "disp": [4, 28, 30, 103, 117, 118, 119, 233, 242, 254, 262, 284, 289, 295, 305, 310, 403, 596, 662, 665, 666, 815], "from_predict": [4, 13, 30, 71, 122, 154, 219, 235, 246, 248, 291, 297, 320, 353, 403, 596, 663, 683, 691, 746, 748, 751, 752, 753, 954, 992, 1008, 1009, 1010, 1011, 1012, 1013], "y_true": [4, 13, 19, 30, 56, 71, 101, 122, 141, 182, 192, 200, 219, 228, 300, 346, 397, 403, 404, 430, 447, 448, 449, 517, 519, 521, 522, 523, 525, 527, 529, 530, 533, 535, 576, 600, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 625, 626, 627, 628, 629, 630, 632, 635, 637, 638, 643, 644, 662, 663, 665, 666, 667, 668, 672, 673, 674, 677, 678, 683, 685, 686, 687, 688, 690, 691, 692, 693, 694, 698, 699, 700, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 720, 746, 747, 748, 749, 751, 752, 753, 754, 755, 758, 760, 799, 800, 809, 817, 824, 867, 869, 872, 875, 877, 954, 996, 1001, 1002, 1003, 1004, 1006, 1007, 1009, 1010, 1012], "y_pred": [4, 6, 7, 13, 24, 28, 30, 32, 41, 54, 59, 66, 71, 101, 114, 115, 117, 122, 133, 154, 182, 184, 189, 192, 197, 199, 200, 209, 210, 219, 235, 237, 242, 266, 270, 277, 284, 300, 301, 329, 346, 353, 360, 381, 397, 404, 430, 447, 448, 449, 514, 517, 519, 521, 522, 523, 525, 527, 529, 530, 532, 533, 535, 576, 596, 600, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 643, 644, 645, 662, 663, 665, 666, 667, 668, 673, 677, 678, 683, 686, 687, 688, 692, 693, 694, 698, 700, 702, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 747, 748, 749, 751, 752, 754, 755, 760, 763, 766, 767, 777, 787, 797, 799, 800, 809, 817, 824, 826, 866, 867, 868, 869, 870, 871, 872, 875, 877, 954, 956, 984, 1001, 1002, 1004, 1006, 1010, 1011, 1012], "scatter_kwarg": [4, 13, 71, 122, 154, 666], "set_xtick": [4, 8, 10, 16, 29, 40, 57, 61, 97, 120, 124, 155, 157, 173, 198, 214, 225, 250, 251, 258, 274, 276, 281, 282, 305], "num": [4, 12, 67, 136, 138, 143, 144, 145, 155, 156, 184, 246, 247, 292, 294, 295, 461, 597], "set_ytick": [4, 16, 29, 40, 57, 61, 97, 120, 149, 150, 157, 173, 198, 225, 250, 274, 276, 281, 282, 305, 322], "loc": [4, 7, 8, 9, 23, 25, 31, 37, 68, 71, 74, 75, 76, 79, 83, 89, 91, 94, 95, 96, 101, 103, 104, 105, 113, 114, 115, 116, 117, 119, 122, 124, 125, 132, 138, 139, 145, 147, 154, 155, 164, 167, 172, 176, 182, 183, 184, 185, 188, 189, 192, 195, 196, 199, 200, 205, 212, 213, 214, 215, 217, 219, 227, 228, 234, 237, 238, 239, 242, 243, 246, 249, 252, 253, 262, 264, 265, 275, 280, 283, 284, 289, 292, 295, 299, 307, 310, 312, 315, 316, 320, 325, 327, 777, 843, 855, 983], "upper": [4, 7, 9, 23, 68, 71, 74, 75, 76, 103, 104, 105, 113, 114, 115, 116, 122, 124, 132, 142, 144, 147, 154, 176, 182, 188, 189, 192, 196, 199, 200, 213, 217, 218, 238, 239, 240, 264, 265, 275, 284, 300, 307, 310, 312, 315, 374, 380, 428, 553, 554, 556, 560, 578, 579, 580, 582, 584, 585, 587, 588, 590, 597, 598, 600, 602, 615, 619, 642, 699, 752, 839, 840, 868, 869, 870, 890, 953, 954, 957, 964, 968, 969, 970, 1003], "bbox_to_anchor": [4, 34, 147, 244, 315], "set_aspect": [4, 141, 193, 227, 317], "equal": [4, 11, 12, 25, 32, 34, 36, 50, 57, 75, 80, 101, 114, 141, 154, 183, 184, 193, 199, 220, 227, 230, 233, 237, 239, 248, 269, 281, 285, 308, 310, 317, 321, 341, 342, 346, 348, 360, 371, 372, 374, 378, 379, 381, 382, 387, 402, 405, 406, 407, 408, 410, 412, 414, 419, 424, 425, 428, 434, 439, 444, 445, 468, 477, 480, 484, 497, 498, 499, 504, 506, 508, 509, 514, 515, 516, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 531, 532, 533, 534, 535, 553, 558, 559, 562, 564, 565, 572, 573, 590, 593, 594, 597, 598, 599, 600, 602, 606, 607, 610, 614, 623, 624, 636, 664, 668, 683, 685, 693, 747, 751, 752, 758, 760, 763, 764, 766, 767, 776, 777, 781, 787, 794, 798, 799, 806, 807, 808, 809, 814, 815, 816, 817, 818, 823, 824, 829, 830, 831, 838, 841, 844, 845, 846, 847, 849, 856, 863, 866, 867, 873, 874, 875, 876, 877, 892, 903, 929, 935, 948, 950, 954, 955, 957, 958, 960, 964, 968, 969, 970, 987, 988, 996, 999, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "adjust": [4, 9, 33, 35, 46, 55, 73, 101, 114, 131, 151, 186, 209, 214, 222, 240, 256, 288, 301, 316, 321, 353, 374, 375, 379, 381, 382, 489, 518, 519, 522, 524, 526, 527, 529, 623, 624, 631, 633, 639, 640, 641, 669, 670, 673, 679, 680, 719, 721, 750, 759, 801, 802, 804, 805, 836, 858, 859, 866, 867, 868, 871, 874, 876, 892, 953, 954, 958, 964, 975, 986, 992, 995, 1001, 1011], "box": [4, 10, 28, 52, 155, 156, 203, 256, 279, 283, 353, 379, 381, 477, 520, 521, 842, 854, 878, 880, 954, 955, 961, 964, 970, 973, 979, 1003, 1011], "show": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 129, 131, 132, 133, 134, 135, 136, 139, 140, 141, 142, 143, 144, 146, 149, 150, 153, 154, 155, 156, 157, 159, 161, 162, 163, 164, 165, 167, 168, 169, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 252, 253, 254, 256, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 295, 297, 298, 299, 300, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 324, 325, 326, 327, 328, 334, 335, 346, 352, 358, 359, 364, 365, 371, 372, 376, 378, 379, 380, 381, 383, 384, 403, 467, 524, 558, 559, 596, 597, 662, 663, 665, 666, 667, 678, 769, 785, 808, 826, 878, 879, 880, 943, 946, 948, 949, 951, 953, 954, 956, 957, 958, 960, 961, 962, 964, 968, 969, 974, 983, 984, 988, 997, 999, 1000, 1002, 1004, 1005, 1006, 1007, 1009, 1011, 1012], "seem": [4, 9, 13, 43, 52, 114, 117, 155, 182, 206, 209, 240, 256, 275, 283, 316, 320, 321, 345, 346, 351, 378, 466, 950, 954], "regim": [4, 360, 866, 867, 953], "overal": [4, 40, 45, 101, 104, 107, 112, 122, 143, 200, 236, 259, 284, 285, 321, 333, 345, 346, 352, 371, 372, 381, 412, 414, 429, 436, 437, 443, 514, 847, 951, 954, 970, 978, 1005], "closer": [4, 34, 90, 92, 121, 136, 138, 155, 161, 186, 312, 322, 372, 374, 379, 414, 518, 593, 677, 808, 809, 814, 816, 817, 818, 969, 1002], "diagon": [4, 24, 26, 37, 77, 79, 200, 219, 227, 230, 231, 233, 308, 371, 374, 376, 384, 418, 436, 437, 443, 446, 476, 478, 492, 497, 515, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 615, 616, 619, 620, 621, 647, 648, 666, 680, 756, 761, 762, 810, 818, 946, 948, 950, 953, 954, 957, 964, 1001, 1003, 1004, 1005], "obtain": [4, 7, 9, 12, 13, 20, 26, 45, 52, 54, 55, 67, 70, 71, 92, 94, 101, 111, 114, 115, 120, 127, 136, 140, 142, 154, 155, 166, 182, 184, 186, 196, 206, 219, 225, 226, 227, 235, 239, 240, 241, 245, 248, 262, 284, 291, 306, 312, 321, 322, 328, 329, 341, 343, 348, 358, 360, 368, 372, 374, 376, 377, 379, 381, 382, 383, 384, 402, 407, 434, 461, 497, 498, 520, 521, 522, 523, 524, 525, 528, 529, 530, 558, 571, 579, 610, 624, 626, 631, 633, 637, 639, 641, 642, 652, 673, 677, 690, 703, 720, 757, 769, 785, 791, 794, 795, 798, 812, 823, 843, 855, 868, 871, 874, 875, 903, 944, 946, 948, 950, 951, 953, 954, 955, 957, 958, 960, 961, 964, 968, 969, 1001, 1003, 1006, 1008, 1009, 1010, 1011, 1012], "slightli": [4, 24, 26, 61, 77, 104, 107, 111, 114, 118, 122, 136, 138, 139, 140, 156, 161, 182, 200, 205, 207, 216, 219, 247, 259, 288, 305, 322, 345, 346, 358, 372, 374, 381, 382, 384, 386, 411, 553, 554, 556, 603, 623, 766, 767, 866, 868, 871, 902, 903, 943, 950, 964, 968, 969, 1004, 1008, 1009, 1011], "cost": [4, 36, 90, 107, 117, 138, 151, 159, 202, 214, 241, 248, 288, 308, 321, 322, 323, 328, 346, 352, 354, 358, 374, 381, 443, 465, 502, 503, 504, 511, 522, 523, 524, 525, 529, 530, 567, 575, 584, 592, 611, 612, 617, 618, 625, 626, 627, 628, 633, 637, 639, 641, 643, 652, 653, 657, 792, 866, 867, 868, 871, 874, 875, 876, 877, 903, 946, 950, 951, 954, 957, 967, 968, 969, 975, 976, 990, 1001, 1004, 1005], "durat": [4, 8, 182, 200, 219, 261, 322, 334, 920, 921, 950], "regressor": [4, 71, 80, 115, 121, 122, 125, 138, 143, 150, 151, 154, 160, 162, 164, 166, 182, 183, 185, 188, 199, 200, 216, 242, 253, 264, 284, 289, 290, 333, 346, 348, 358, 360, 372, 375, 384, 397, 400, 401, 430, 447, 448, 449, 450, 489, 516, 517, 518, 519, 520, 521, 522, 523, 525, 527, 530, 531, 532, 533, 534, 535, 570, 571, 574, 576, 597, 598, 600, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 625, 626, 627, 628, 629, 630, 632, 634, 635, 637, 638, 643, 644, 666, 794, 795, 798, 799, 800, 809, 817, 822, 823, 824, 827, 833, 841, 846, 847, 867, 869, 872, 874, 875, 876, 877, 880, 895, 897, 943, 944, 950, 954, 955, 957, 962, 968, 973, 975, 976, 983, 990, 995, 996, 1000, 1001, 1002, 1004, 1005, 1008, 1009, 1010, 1012], "mlpregressor": [4, 155, 220, 335, 822, 823, 958, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "hidden": [4, 155, 276, 277, 346, 354, 371, 379, 822, 823, 824, 958, 959, 973, 995, 1006], "layer": [4, 29, 120, 129, 140, 151, 189, 198, 220, 273, 276, 277, 281, 282, 302, 313, 318, 333, 354, 381, 479, 480, 487, 532, 792, 822, 823, 824, 827, 846, 959, 975, 976, 990, 1001], "cyclic": [4, 611, 612, 617, 618, 625, 626, 627, 628, 1007], "within": [4, 20, 57, 106, 108, 109, 112, 117, 121, 133, 135, 136, 178, 183, 184, 194, 200, 220, 237, 238, 242, 252, 279, 280, 290, 306, 309, 312, 316, 322, 329, 333, 341, 346, 350, 355, 358, 360, 361, 365, 371, 372, 373, 374, 375, 378, 380, 381, 385, 409, 413, 426, 428, 429, 431, 434, 439, 480, 514, 532, 533, 534, 535, 558, 559, 597, 657, 661, 664, 675, 689, 745, 761, 762, 768, 769, 781, 782, 790, 791, 806, 807, 808, 809, 814, 816, 817, 818, 825, 826, 827, 839, 847, 851, 852, 854, 855, 856, 857, 868, 869, 870, 871, 872, 874, 875, 876, 877, 943, 948, 950, 951, 957, 960, 964, 967, 969, 970, 974, 978, 979, 983, 986, 988, 997, 998, 1002, 1003, 1008, 1009, 1011, 1012, 1013], "finer": [4, 13, 34, 261, 308, 334, 374, 378, 943, 957, 1005], "resolut": [4, 11, 17, 96, 155, 271, 272, 308, 361, 372, 979, 1005], "taken": [4, 7, 29, 39, 50, 52, 116, 136, 143, 154, 213, 214, 228, 245, 256, 281, 341, 343, 345, 346, 350, 360, 368, 373, 374, 378, 382, 386, 405, 498, 526, 527, 548, 549, 611, 612, 615, 617, 618, 619, 623, 624, 625, 626, 627, 628, 642, 644, 646, 649, 660, 839, 840, 860, 863, 869, 870, 913, 954, 956, 964, 966, 1001, 1004, 1007, 1008], "everi": [4, 87, 117, 149, 180, 183, 203, 215, 226, 231, 248, 291, 295, 329, 341, 344, 346, 348, 350, 354, 360, 374, 376, 378, 379, 382, 405, 419, 473, 496, 501, 504, 510, 522, 524, 525, 526, 527, 529, 555, 556, 568, 611, 612, 614, 617, 618, 624, 625, 626, 627, 628, 629, 630, 631, 633, 637, 638, 639, 640, 641, 650, 651, 652, 657, 661, 718, 735, 743, 744, 776, 815, 874, 876, 878, 880, 892, 947, 949, 954, 955, 956, 964, 970, 978, 983, 995, 999, 1001, 1004, 1008, 1012], "offer": [4, 107, 348, 354, 358, 359, 360, 364, 378, 379, 381, 382, 943, 944, 955, 958, 970, 973, 974, 978, 1001], "view": [4, 16, 39, 43, 73, 89, 117, 155, 179, 221, 333, 335, 346, 374, 382, 501, 610, 622, 806, 807, 881, 950, 951], "gaussian": [4, 5, 7, 9, 16, 26, 28, 29, 32, 41, 43, 44, 52, 54, 58, 62, 73, 74, 75, 76, 77, 84, 85, 88, 89, 90, 96, 102, 103, 110, 114, 118, 120, 129, 150, 161, 164, 166, 170, 172, 192, 194, 195, 209, 213, 215, 227, 228, 250, 264, 269, 272, 274, 282, 283, 302, 305, 312, 314, 338, 342, 348, 351, 360, 374, 376, 379, 380, 386, 417, 434, 435, 436, 437, 438, 439, 440, 441, 461, 469, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 489, 490, 495, 497, 509, 514, 515, 528, 575, 576, 578, 579, 580, 582, 583, 584, 587, 588, 590, 592, 608, 609, 637, 642, 645, 668, 688, 705, 716, 740, 761, 762, 763, 777, 801, 802, 803, 804, 805, 806, 807, 811, 842, 846, 854, 858, 859, 860, 948, 950, 951, 952, 960, 975, 976, 978, 987, 989, 990, 995, 996, 998, 999, 1001, 1002, 1003, 1005, 1007, 1009], "random": [4, 5, 6, 7, 11, 12, 13, 14, 20, 21, 23, 24, 25, 26, 29, 31, 32, 34, 36, 37, 41, 42, 45, 47, 49, 51, 52, 54, 55, 57, 58, 59, 61, 62, 63, 67, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 85, 88, 89, 90, 93, 94, 100, 102, 104, 106, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 122, 125, 129, 131, 132, 135, 138, 139, 142, 144, 145, 147, 149, 150, 151, 152, 153, 161, 162, 163, 164, 166, 171, 172, 176, 177, 180, 181, 182, 183, 184, 185, 188, 189, 191, 195, 196, 199, 200, 202, 203, 205, 206, 207, 208, 209, 214, 215, 216, 218, 219, 225, 226, 228, 229, 230, 231, 232, 234, 236, 237, 238, 239, 240, 242, 244, 246, 248, 249, 250, 251, 253, 258, 259, 264, 265, 266, 271, 274, 280, 282, 283, 286, 289, 290, 292, 294, 297, 298, 301, 302, 307, 308, 310, 311, 313, 314, 315, 318, 320, 321, 326, 327, 333, 334, 338, 342, 349, 351, 358, 359, 360, 365, 369, 370, 372, 374, 382, 383, 387, 399, 405, 408, 412, 414, 416, 417, 418, 419, 423, 424, 425, 427, 429, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 453, 454, 455, 456, 457, 460, 461, 462, 467, 468, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 500, 501, 503, 504, 505, 506, 509, 512, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 538, 547, 548, 549, 554, 572, 573, 575, 576, 592, 595, 597, 599, 604, 605, 606, 607, 608, 611, 612, 614, 615, 617, 618, 619, 623, 625, 626, 627, 628, 635, 636, 637, 641, 642, 643, 644, 652, 654, 655, 656, 657, 658, 659, 660, 666, 669, 670, 673, 695, 707, 745, 752, 757, 761, 762, 763, 765, 766, 767, 768, 775, 777, 778, 779, 780, 781, 782, 783, 784, 791, 792, 797, 799, 800, 801, 802, 803, 805, 806, 807, 811, 815, 822, 823, 824, 826, 829, 831, 840, 843, 847, 855, 858, 859, 860, 861, 862, 863, 866, 867, 868, 869, 871, 872, 874, 875, 876, 877, 889, 900, 902, 903, 925, 928, 944, 946, 949, 951, 953, 954, 958, 959, 960, 962, 964, 969, 970, 973, 974, 975, 976, 979, 983, 984, 986, 987, 990, 992, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "constant": [4, 96, 104, 117, 141, 145, 150, 154, 170, 183, 184, 186, 200, 211, 216, 221, 242, 271, 275, 277, 280, 282, 289, 316, 318, 329, 338, 348, 355, 360, 371, 381, 384, 397, 411, 430, 447, 448, 449, 476, 478, 499, 503, 505, 512, 514, 515, 516, 517, 519, 521, 523, 525, 527, 530, 533, 535, 555, 571, 574, 576, 578, 592, 595, 597, 598, 600, 605, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 641, 642, 643, 644, 645, 652, 654, 658, 660, 686, 687, 688, 692, 696, 739, 741, 749, 799, 800, 809, 817, 823, 824, 831, 842, 845, 854, 866, 867, 868, 869, 870, 871, 872, 873, 875, 877, 946, 948, 950, 951, 954, 956, 957, 964, 968, 970, 990, 998, 1003, 1005, 1007, 1008, 1009, 1011], "varianc": [4, 5, 13, 26, 41, 52, 54, 59, 69, 73, 75, 79, 80, 83, 87, 88, 89, 92, 94, 95, 97, 100, 116, 117, 145, 147, 151, 154, 160, 162, 166, 171, 178, 182, 184, 187, 200, 230, 236, 239, 242, 248, 249, 252, 268, 274, 279, 284, 321, 329, 338, 342, 355, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 386, 406, 410, 414, 428, 486, 489, 497, 498, 499, 506, 509, 514, 515, 520, 521, 523, 524, 525, 530, 568, 572, 573, 576, 590, 608, 609, 610, 617, 621, 622, 625, 627, 637, 638, 639, 640, 641, 652, 675, 692, 749, 761, 762, 804, 815, 830, 836, 842, 844, 846, 852, 854, 856, 857, 875, 877, 929, 930, 931, 935, 948, 949, 950, 952, 957, 958, 959, 962, 966, 968, 969, 970, 971, 975, 976, 984, 986, 987, 990, 995, 1003, 1005, 1006, 1007, 1008, 1009, 1010], "poisson": [4, 13, 151, 160, 217, 342, 381, 429, 430, 461, 488, 517, 523, 527, 530, 613, 634, 637, 645, 671, 688, 709, 713, 714, 716, 792, 826, 827, 830, 831, 839, 840, 841, 846, 875, 877, 907, 950, 970, 975, 1005, 1006, 1007, 1008, 1009, 1011, 1012], "gamma": [4, 5, 6, 7, 9, 11, 16, 29, 30, 92, 123, 129, 159, 196, 209, 214, 215, 237, 239, 241, 244, 250, 254, 290, 297, 298, 300, 302, 305, 307, 308, 311, 312, 314, 315, 318, 377, 379, 384, 417, 500, 527, 584, 585, 604, 605, 606, 608, 609, 610, 613, 645, 650, 656, 688, 711, 716, 723, 730, 739, 740, 741, 761, 774, 777, 861, 862, 863, 868, 869, 870, 871, 872, 943, 946, 949, 950, 952, 967, 969, 979, 983, 984, 986, 995, 996, 998, 999, 1000, 1002, 1003, 1005, 1006, 1009, 1010, 1011], "achiev": [4, 12, 17, 19, 26, 29, 90, 101, 110, 112, 117, 120, 146, 159, 182, 190, 236, 239, 246, 284, 300, 308, 311, 312, 316, 320, 329, 333, 335, 340, 341, 343, 348, 352, 358, 360, 371, 372, 374, 378, 379, 381, 382, 518, 523, 530, 605, 614, 641, 643, 672, 693, 694, 702, 704, 727, 747, 748, 751, 766, 767, 802, 846, 943, 944, 946, 950, 954, 964, 967, 969, 988, 1008], "gridsearchcv": [4, 51, 65, 67, 69, 70, 73, 94, 107, 151, 215, 221, 230, 232, 237, 238, 239, 240, 244, 247, 250, 256, 261, 263, 277, 281, 290, 294, 295, 308, 312, 329, 334, 348, 358, 360, 365, 375, 378, 381, 384, 388, 467, 485, 505, 506, 540, 564, 572, 618, 668, 706, 774, 777, 826, 836, 866, 874, 922, 943, 950, 954, 958, 968, 969, 973, 974, 975, 983, 984, 988, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1012, 1013], "tweedieregressor": [4, 289, 292, 613, 634, 950, 1006, 1009, 1010], "power": [4, 7, 17, 107, 112, 153, 183, 200, 231, 242, 247, 263, 279, 280, 283, 297, 305, 333, 334, 359, 372, 374, 377, 380, 381, 382, 385, 409, 447, 448, 449, 497, 500, 506, 509, 595, 645, 659, 688, 711, 713, 716, 808, 809, 816, 817, 819, 820, 841, 842, 843, 854, 855, 902, 903, 950, 951, 954, 962, 964, 968, 969, 978, 998, 1001, 1003, 1005, 1006, 1008, 1012], "param_grid": [4, 6, 67, 68, 69, 70, 107, 114, 215, 221, 230, 237, 238, 239, 243, 244, 247, 250, 256, 261, 281, 295, 308, 360, 365, 375, 381, 706, 763, 766, 774, 775, 922, 943, 954, 983, 984], "total": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 127, 128, 129, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 153, 154, 155, 156, 157, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 258, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 325, 326, 327, 328, 334, 340, 341, 343, 352, 360, 371, 374, 380, 382, 385, 397, 409, 430, 447, 448, 449, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 465, 466, 467, 469, 470, 475, 477, 479, 480, 484, 487, 488, 501, 509, 517, 518, 519, 521, 522, 523, 524, 525, 526, 527, 529, 530, 531, 533, 535, 548, 549, 555, 559, 561, 576, 600, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 625, 626, 627, 628, 629, 630, 631, 632, 635, 636, 637, 638, 641, 642, 643, 644, 662, 669, 670, 678, 693, 694, 695, 698, 702, 703, 721, 733, 747, 748, 751, 758, 759, 760, 763, 777, 787, 788, 789, 799, 800, 801, 802, 809, 811, 817, 824, 841, 845, 867, 869, 872, 874, 875, 876, 877, 903, 943, 950, 951, 954, 955, 956, 957, 964, 968, 969, 970, 975, 984, 988, 996, 1001, 1003, 1011], "script": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 153, 154, 155, 156, 157, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 258, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 324, 325, 326, 327, 328, 329, 334, 346, 347, 348, 349, 350, 352, 358, 360, 364, 382, 974, 977, 988], "930": [4, 975, 983], "second": [4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 153, 154, 155, 156, 157, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 258, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 324, 325, 326, 327, 328, 329, 333, 341, 348, 350, 352, 360, 371, 374, 378, 379, 381, 382, 384, 429, 432, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 467, 469, 475, 518, 548, 553, 554, 555, 556, 586, 589, 596, 597, 664, 677, 681, 722, 723, 727, 728, 730, 731, 738, 739, 740, 741, 742, 745, 763, 766, 767, 777, 790, 796, 797, 800, 803, 814, 816, 817, 818, 823, 824, 943, 944, 948, 949, 950, 951, 954, 955, 956, 957, 958, 961, 964, 965, 970, 979, 985, 987, 1010], "jupyt": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 153, 154, 155, 156, 157, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 324, 325, 326, 327, 328, 347, 348, 375, 433, 864, 970, 973, 974, 1006, 1009], "plot_cyclical_feature_engin": [4, 975], "ipynb": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 153, 154, 155, 156, 157, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 324, 325, 326, 327, 328], "py": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 153, 154, 155, 156, 157, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 324, 325, 326, 327, 328, 334, 344, 346, 347, 350, 352, 354, 360, 364, 382, 385, 405, 409, 419, 426, 463, 495, 609, 611, 612, 617, 618, 625, 626, 627, 628, 646, 649, 841, 845, 898, 954, 973, 975, 986, 988, 995, 997, 1001, 1005, 1009], "interpol": [4, 14, 30, 37, 47, 48, 51, 55, 77, 82, 87, 90, 142, 145, 151, 160, 161, 173, 198, 212, 218, 248, 253, 263, 264, 271, 277, 298, 308, 314, 384, 600, 610, 618, 628, 637, 649, 665, 672, 809, 817, 827, 841, 845, 945, 950, 954, 964, 975, 1002, 1007], "partial": [4, 8, 12, 47, 78, 79, 119, 151, 152, 200, 208, 290, 293, 343, 360, 363, 376, 377, 379, 381, 384, 429, 447, 448, 449, 450, 461, 466, 499, 501, 506, 527, 554, 597, 598, 622, 752, 792, 794, 795, 822, 823, 824, 827, 839, 840, 843, 846, 875, 951, 958, 968, 975, 988, 990, 992, 996, 1003, 1004, 1008, 1012], "individu": [4, 43, 57, 75, 100, 102, 104, 122, 131, 147, 151, 152, 157, 182, 200, 210, 219, 220, 242, 244, 258, 288, 295, 312, 316, 334, 347, 350, 353, 355, 360, 363, 365, 371, 375, 378, 381, 382, 402, 417, 427, 429, 461, 466, 468, 474, 520, 521, 524, 525, 527, 528, 530, 532, 533, 534, 535, 568, 574, 575, 597, 598, 608, 610, 622, 623, 624, 633, 636, 637, 638, 639, 640, 641, 642, 643, 652, 677, 684, 692, 698, 714, 715, 749, 754, 755, 763, 777, 794, 798, 799, 801, 802, 803, 804, 805, 824, 827, 835, 836, 838, 839, 840, 843, 845, 846, 851, 852, 853, 866, 867, 954, 955, 964, 969, 975, 983, 988, 990, 996, 999, 1001, 1007, 1009, 1011], "galleri": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 153, 154, 155, 156, 157, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 324, 325, 326, 327, 328, 341, 346, 348, 360, 364, 367, 975, 984, 995, 999, 1002], "sphinx": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 153, 154, 155, 156, 157, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 324, 325, 326, 327, 328, 334, 346, 350, 360, 364, 367, 988, 995, 1002], "kernelpca": [5, 375, 379, 498, 499, 506, 509, 653, 655, 657, 832, 964, 996, 997, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012], "short": [5, 83, 111, 118, 173, 237, 276, 320, 346, 354, 378, 382, 386, 950, 951, 957, 977, 1000, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "take": [5, 8, 13, 20, 28, 43, 50, 52, 54, 63, 71, 75, 85, 87, 101, 110, 138, 140, 143, 147, 154, 159, 165, 186, 190, 191, 206, 216, 227, 228, 234, 240, 244, 248, 249, 258, 259, 262, 265, 266, 267, 269, 270, 279, 292, 300, 304, 305, 308, 318, 321, 322, 325, 333, 334, 335, 340, 341, 344, 346, 348, 351, 352, 353, 354, 358, 360, 361, 365, 372, 374, 375, 377, 378, 379, 381, 382, 383, 384, 386, 402, 408, 411, 412, 414, 415, 417, 422, 423, 424, 426, 428, 434, 484, 498, 503, 504, 505, 511, 512, 546, 557, 560, 561, 563, 564, 565, 575, 576, 581, 585, 586, 589, 597, 608, 614, 636, 638, 639, 640, 641, 644, 656, 657, 664, 670, 672, 674, 684, 693, 694, 702, 706, 707, 720, 735, 738, 742, 743, 744, 745, 747, 748, 751, 752, 763, 764, 768, 769, 777, 781, 790, 808, 809, 810, 812, 814, 815, 816, 817, 818, 830, 840, 861, 862, 866, 867, 868, 869, 870, 871, 872, 890, 924, 943, 946, 950, 951, 953, 954, 955, 957, 959, 960, 961, 964, 969, 970, 978, 979, 983, 985, 992, 995, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012], "exact": [5, 7, 77, 92, 107, 143, 186, 214, 259, 295, 329, 333, 334, 340, 346, 348, 355, 358, 359, 360, 374, 381, 383, 399, 447, 448, 449, 453, 461, 499, 500, 506, 526, 527, 603, 607, 611, 657, 763, 777, 787, 788, 789, 868, 871, 943, 946, 950, 951, 960, 964, 968, 969, 1002, 1003, 1005], "usp": 5, "digit": [5, 12, 13, 27, 33, 36, 42, 45, 48, 50, 53, 56, 58, 59, 68, 69, 79, 81, 90, 106, 126, 134, 136, 151, 172, 173, 189, 197, 198, 201, 202, 204, 206, 213, 214, 228, 233, 237, 238, 241, 263, 268, 269, 273, 275, 276, 294, 296, 299, 321, 339, 346, 352, 374, 380, 381, 383, 406, 410, 412, 467, 506, 509, 514, 531, 623, 653, 654, 655, 656, 657, 662, 669, 670, 678, 682, 683, 701, 757, 759, 792, 808, 815, 822, 826, 827, 836, 846, 852, 859, 862, 871, 878, 879, 880, 943, 949, 951, 954, 957, 959, 967, 975, 979, 983, 986, 987, 990, 999], "reproduc": [5, 12, 57, 101, 154, 159, 170, 248, 256, 277, 334, 345, 346, 348, 349, 354, 358, 360, 368, 374, 378, 379, 382, 386, 405, 419, 425, 434, 439, 453, 456, 457, 460, 462, 468, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 516, 518, 519, 520, 521, 524, 525, 526, 527, 528, 572, 573, 575, 576, 599, 604, 605, 606, 607, 611, 612, 615, 617, 618, 619, 625, 626, 627, 628, 631, 632, 633, 636, 641, 643, 644, 654, 655, 657, 658, 659, 757, 761, 762, 765, 766, 767, 768, 769, 775, 777, 778, 779, 780, 781, 782, 783, 790, 791, 792, 796, 797, 800, 811, 815, 822, 823, 824, 831, 843, 847, 855, 858, 859, 866, 867, 868, 871, 902, 903, 925, 928, 946, 973, 977, 995, 1003, 1008, 1009], "sect": 5, "bak\u0131r": [5, 379, 500], "g\u00f6khan": [5, 379, 500], "h": [5, 6, 45, 55, 87, 88, 101, 102, 120, 136, 140, 154, 227, 264, 267, 274, 281, 292, 302, 304, 322, 343, 352, 372, 374, 376, 379, 380, 381, 382, 385, 409, 484, 497, 500, 503, 505, 512, 518, 532, 533, 547, 555, 572, 573, 654, 658, 669, 673, 721, 801, 805, 806, 807, 812, 822, 837, 846, 946, 948, 950, 951, 952, 954, 956, 958, 959, 968, 970, 984, 1001, 1006, 1010, 1011, 1012], "jason": [5, 379, 500, 862, 1001, 1003, 1007, 1010], "weston": [5, 379, 500, 558, 559, 862], "bernhard": [5, 379, 500, 797, 832, 862, 955, 960, 969, 1001], "sch\u00f6lkopf": [5, 379, 500, 832, 960, 964, 969], "pre": [5, 67, 154, 171, 279, 322, 344, 346, 360, 364, 376, 378, 379, 381, 382, 383, 385, 386, 408, 409, 412, 424, 498, 500, 655, 677, 727, 829, 871, 954, 959, 964, 969, 970, 973, 974, 990, 998, 1003, 1009, 1013], "advanc": [5, 119, 151, 155, 208, 210, 239, 258, 335, 349, 374, 379, 454, 466, 500, 597, 604, 747, 761, 815, 824, 827, 846, 875, 946, 954, 957, 964, 975, 978, 992, 997], "neural": [5, 6, 29, 239, 276, 360, 368, 378, 379, 381, 386, 498, 500, 503, 505, 512, 532, 533, 604, 610, 661, 705, 761, 815, 822, 823, 824, 832, 946, 950, 951, 952, 954, 957, 960, 964, 968, 970, 973, 976, 978, 984, 989, 990, 995, 1007], "system": [5, 92, 166, 239, 246, 329, 333, 334, 335, 341, 343, 346, 347, 348, 349, 354, 358, 364, 374, 379, 381, 385, 409, 436, 437, 443, 500, 504, 508, 515, 604, 610, 615, 616, 619, 620, 621, 647, 648, 690, 720, 733, 761, 815, 861, 862, 922, 950, 954, 957, 966, 973, 974, 978, 988, 995, 1003, 1004], "2004": [5, 136, 239, 256, 341, 343, 374, 376, 379, 438, 500, 572, 573, 654, 658, 670, 707, 747, 862, 948, 950, 951, 956, 969, 986], "449": [5, 187, 379, 500, 975], "456": [5, 155, 379, 500], "author": [5, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 20, 21, 23, 24, 25, 26, 28, 30, 34, 36, 37, 39, 43, 44, 45, 49, 50, 51, 53, 54, 58, 62, 63, 64, 66, 67, 68, 70, 71, 77, 87, 89, 91, 92, 94, 97, 99, 102, 103, 104, 105, 106, 107, 113, 115, 116, 117, 121, 122, 136, 138, 139, 141, 142, 143, 144, 145, 147, 150, 159, 161, 162, 164, 166, 167, 169, 170, 171, 173, 174, 175, 176, 182, 183, 184, 186, 187, 189, 190, 197, 198, 199, 200, 202, 203, 204, 205, 207, 209, 212, 214, 215, 217, 219, 225, 227, 228, 238, 240, 242, 243, 245, 252, 258, 259, 261, 264, 271, 272, 274, 277, 279, 280, 282, 283, 284, 297, 298, 299, 300, 302, 316, 320, 321, 322, 340, 346, 350, 354, 358, 360, 361, 378, 416, 499, 833, 946, 973, 998], "fr": [5, 7, 8, 9, 10, 23, 24, 28, 34, 39, 51, 54, 71, 77, 107, 117, 144, 161, 166, 167, 169, 173, 175, 176, 187, 203, 204, 209, 212, 219, 240, 242, 245, 252, 271, 284, 316, 320, 321, 322, 496, 502, 623, 629, 650, 651, 722, 723, 952, 954], "licenc": [5, 340], "bsd": [5, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 20, 21, 23, 24, 25, 26, 28, 29, 30, 34, 36, 37, 39, 42, 43, 44, 45, 48, 49, 50, 51, 54, 58, 62, 63, 64, 66, 67, 69, 70, 71, 77, 82, 83, 87, 89, 91, 92, 93, 94, 97, 99, 101, 102, 103, 104, 105, 106, 107, 112, 113, 115, 116, 117, 121, 122, 136, 138, 139, 141, 142, 143, 144, 145, 147, 150, 159, 164, 165, 167, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 182, 183, 184, 187, 189, 190, 198, 199, 200, 203, 204, 205, 207, 209, 212, 214, 215, 217, 219, 225, 227, 240, 243, 245, 252, 258, 259, 261, 267, 268, 269, 271, 272, 274, 277, 279, 280, 281, 282, 283, 284, 297, 298, 299, 300, 302, 312, 313, 316, 317, 320, 321, 322, 352], "claus": [5, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 20, 21, 24, 26, 28, 29, 30, 34, 36, 37, 39, 42, 43, 44, 45, 48, 49, 50, 51, 54, 58, 62, 63, 64, 66, 67, 69, 70, 71, 77, 82, 83, 87, 89, 91, 92, 93, 94, 97, 99, 101, 102, 103, 104, 105, 106, 107, 112, 113, 115, 116, 117, 121, 122, 136, 138, 139, 141, 142, 143, 144, 145, 147, 150, 159, 164, 165, 167, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 182, 183, 184, 187, 189, 190, 198, 199, 200, 203, 204, 209, 214, 215, 217, 219, 225, 227, 240, 245, 252, 258, 259, 261, 267, 268, 269, 271, 272, 274, 279, 280, 281, 282, 283, 284, 312, 313, 316, 317, 320, 321, 322], "normal": [5, 10, 12, 17, 19, 20, 25, 27, 32, 34, 37, 41, 43, 54, 58, 59, 63, 69, 71, 73, 74, 75, 79, 80, 88, 101, 102, 104, 107, 113, 114, 117, 118, 119, 131, 141, 144, 145, 150, 151, 153, 154, 160, 161, 162, 163, 164, 166, 172, 175, 177, 180, 184, 185, 186, 188, 196, 200, 205, 219, 225, 230, 231, 233, 236, 239, 245, 264, 265, 268, 278, 280, 284, 289, 292, 295, 300, 308, 321, 322, 329, 338, 341, 342, 343, 346, 351, 355, 359, 360, 370, 371, 372, 374, 375, 377, 380, 381, 382, 386, 405, 414, 416, 417, 418, 427, 429, 430, 440, 447, 448, 449, 454, 461, 477, 480, 484, 491, 492, 498, 501, 506, 507, 509, 513, 514, 517, 518, 519, 522, 523, 524, 525, 527, 528, 529, 530, 531, 544, 545, 547, 553, 554, 555, 556, 576, 590, 592, 604, 623, 624, 634, 637, 641, 645, 652, 656, 660, 662, 668, 669, 671, 683, 688, 690, 698, 700, 705, 709, 713, 714, 716, 719, 720, 721, 725, 734, 758, 759, 760, 766, 767, 792, 794, 803, 805, 811, 812, 815, 826, 827, 830, 831, 834, 836, 839, 840, 841, 842, 843, 844, 846, 851, 852, 854, 855, 856, 857, 861, 862, 874, 875, 876, 877, 902, 903, 907, 930, 931, 936, 937, 943, 946, 948, 950, 951, 952, 953, 956, 960, 965, 967, 969, 970, 975, 984, 986, 987, 988, 990, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "pixel": [5, 6, 14, 20, 30, 44, 45, 50, 87, 100, 108, 134, 151, 156, 157, 159, 213, 237, 276, 277, 343, 374, 379, 381, 382, 383, 458, 459, 460, 529, 550, 551, 572, 573, 599, 957, 959, 970, 975, 984, 987], "train_test_split": [5, 6, 7, 10, 13, 23, 24, 26, 29, 30, 67, 71, 80, 92, 101, 106, 108, 112, 113, 114, 115, 116, 117, 118, 121, 132, 133, 153, 154, 156, 157, 159, 166, 177, 182, 189, 190, 197, 198, 200, 210, 219, 222, 223, 233, 236, 237, 242, 246, 248, 252, 258, 262, 267, 268, 274, 276, 277, 281, 283, 284, 286, 288, 289, 290, 295, 301, 324, 328, 329, 351, 359, 370, 375, 378, 381, 402, 403, 523, 525, 532, 533, 662, 663, 665, 667, 763, 794, 797, 815, 823, 824, 826, 876, 877, 943, 944, 954, 956, 957, 962, 964, 969, 984, 992, 995, 996, 998, 999, 1000, 1001, 1002, 1004, 1008, 1012], "data_id": [5, 111, 143, 154, 182, 200, 210, 256, 285, 340, 461], "41082": 5, "return_x_i": [5, 7, 15, 55, 66, 67, 68, 69, 87, 107, 111, 125, 127, 128, 132, 149, 150, 156, 157, 159, 167, 169, 170, 171, 173, 178, 179, 189, 197, 198, 210, 218, 219, 222, 223, 235, 238, 241, 246, 247, 254, 256, 258, 261, 268, 275, 276, 277, 284, 288, 290, 292, 293, 294, 295, 300, 311, 322, 324, 339, 351, 352, 359, 368, 374, 375, 378, 381, 383, 386, 394, 411, 453, 454, 455, 456, 457, 459, 460, 461, 462, 465, 466, 467, 469, 470, 475, 497, 498, 499, 500, 523, 526, 527, 532, 533, 557, 560, 561, 563, 564, 565, 566, 567, 575, 584, 585, 587, 588, 603, 604, 623, 624, 633, 638, 639, 640, 653, 654, 655, 656, 658, 660, 666, 676, 752, 766, 767, 769, 794, 799, 810, 815, 818, 875, 876, 877, 944, 949, 954, 955, 956, 957, 964, 979, 983, 984, 986, 987, 992, 1001, 1003, 1005, 1008], "idea": [5, 50, 75, 76, 107, 136, 143, 154, 183, 202, 264, 308, 324, 333, 334, 346, 351, 352, 376, 377, 378, 379, 380, 381, 383, 572, 573, 950, 951, 954, 957, 960, 972, 978, 988], "noisi": [5, 31, 46, 52, 59, 88, 101, 132, 138, 144, 166, 181, 184, 205, 212, 231, 240, 246, 248, 249, 284, 326, 327, 329, 374, 382, 384, 385, 409, 411, 415, 486, 489, 903, 949, 951, 957, 969, 973], "nois": [5, 10, 14, 20, 21, 26, 29, 31, 37, 41, 46, 49, 51, 52, 58, 59, 64, 71, 80, 87, 88, 90, 92, 94, 102, 104, 114, 119, 120, 137, 138, 139, 143, 147, 151, 161, 163, 164, 166, 171, 172, 177, 180, 181, 184, 185, 186, 187, 199, 205, 207, 209, 211, 212, 215, 239, 247, 252, 253, 271, 274, 275, 281, 286, 289, 295, 315, 326, 327, 329, 342, 348, 351, 372, 374, 379, 381, 383, 384, 385, 409, 411, 417, 476, 478, 479, 480, 481, 482, 483, 487, 489, 490, 495, 497, 499, 506, 571, 572, 573, 574, 576, 578, 579, 580, 581, 582, 586, 587, 589, 590, 609, 610, 614, 615, 616, 618, 619, 620, 621, 628, 629, 630, 636, 644, 650, 651, 657, 843, 855, 861, 947, 949, 950, 951, 954, 957, 967, 975, 986, 987, 996, 1001, 1006, 1008, 1009], "approach": [5, 8, 55, 60, 63, 91, 136, 138, 149, 154, 157, 164, 170, 182, 184, 190, 200, 202, 256, 285, 312, 320, 321, 322, 335, 345, 346, 352, 355, 360, 364, 368, 372, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 402, 408, 411, 413, 417, 427, 485, 497, 547, 554, 576, 600, 623, 624, 639, 640, 795, 811, 903, 943, 944, 950, 951, 954, 955, 957, 958, 964, 968, 969, 972, 973, 978, 981, 986, 987, 999, 1011], "copi": [5, 12, 13, 17, 41, 59, 71, 90, 104, 117, 136, 149, 150, 154, 155, 156, 168, 175, 188, 198, 200, 203, 259, 297, 298, 300, 302, 321, 325, 334, 343, 344, 346, 348, 350, 351, 352, 358, 360, 399, 402, 405, 407, 408, 409, 411, 412, 414, 419, 424, 447, 448, 449, 450, 465, 467, 475, 497, 498, 499, 500, 506, 513, 518, 519, 524, 526, 527, 537, 555, 562, 572, 573, 575, 576, 593, 595, 609, 610, 611, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 630, 636, 637, 639, 644, 646, 649, 650, 651, 696, 733, 756, 763, 777, 806, 807, 821, 829, 832, 835, 836, 837, 838, 842, 843, 844, 846, 849, 851, 852, 853, 854, 855, 856, 857, 861, 862, 866, 868, 869, 870, 871, 872, 881, 884, 886, 887, 913, 925, 927, 928, 964, 969, 970, 974, 980, 983, 988, 995, 998, 1001, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "add": [5, 12, 16, 17, 20, 24, 25, 26, 30, 31, 37, 41, 51, 71, 75, 76, 80, 88, 110, 113, 132, 136, 138, 143, 144, 145, 149, 150, 164, 171, 177, 183, 185, 186, 197, 205, 209, 213, 215, 216, 246, 248, 249, 259, 271, 281, 283, 288, 290, 291, 311, 312, 315, 316, 321, 333, 344, 345, 346, 347, 348, 350, 352, 354, 360, 364, 370, 372, 378, 381, 382, 383, 480, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 567, 592, 593, 595, 597, 623, 624, 659, 662, 784, 806, 807, 863, 893, 911, 912, 922, 943, 944, 953, 960, 964, 967, 968, 974, 986, 987, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "corrupt": [5, 94, 166, 188, 199, 358, 822, 950, 962], "uncorrupt": 5, "base": [5, 12, 13, 14, 15, 17, 20, 24, 25, 26, 32, 46, 53, 54, 55, 64, 66, 67, 71, 75, 83, 87, 88, 99, 101, 102, 107, 112, 113, 114, 115, 117, 120, 122, 125, 130, 133, 138, 143, 144, 146, 153, 155, 156, 157, 160, 161, 167, 168, 170, 171, 176, 177, 182, 183, 190, 199, 200, 202, 209, 216, 217, 219, 236, 237, 242, 256, 258, 259, 272, 277, 279, 280, 282, 284, 290, 292, 302, 306, 312, 321, 324, 333, 334, 340, 341, 342, 343, 344, 347, 348, 349, 354, 358, 360, 361, 363, 372, 375, 379, 380, 382, 384, 385, 386, 402, 409, 411, 412, 413, 414, 415, 417, 421, 422, 426, 428, 429, 430, 431, 432, 452, 465, 466, 473, 474, 497, 498, 500, 501, 502, 503, 504, 506, 511, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 543, 553, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 571, 572, 573, 575, 576, 581, 582, 583, 586, 589, 597, 598, 600, 601, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 623, 629, 634, 636, 637, 638, 639, 640, 645, 647, 648, 650, 651, 652, 655, 657, 669, 682, 690, 699, 700, 701, 703, 705, 719, 720, 721, 749, 752, 759, 763, 765, 766, 767, 769, 770, 772, 777, 781, 782, 783, 784, 790, 792, 796, 797, 800, 808, 809, 810, 812, 814, 816, 817, 818, 823, 824, 827, 828, 831, 838, 839, 841, 845, 846, 847, 855, 858, 859, 862, 863, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 889, 897, 922, 923, 943, 945, 946, 948, 949, 951, 954, 955, 956, 957, 958, 959, 960, 961, 964, 966, 967, 968, 969, 970, 972, 973, 974, 975, 978, 983, 988, 990, 991, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1006], "solv": [5, 6, 63, 138, 171, 214, 239, 258, 345, 346, 347, 348, 351, 358, 374, 376, 378, 379, 384, 412, 418, 427, 443, 496, 502, 503, 504, 508, 510, 511, 512, 513, 600, 602, 611, 617, 619, 620, 629, 630, 635, 637, 639, 642, 650, 651, 652, 796, 866, 867, 870, 903, 945, 948, 950, 951, 954, 955, 968, 969, 970, 972, 973, 978, 981, 984, 988, 1001, 1005, 1008], "x_train": [5, 6, 7, 8, 10, 13, 23, 24, 25, 26, 29, 30, 66, 67, 71, 73, 79, 80, 92, 101, 104, 108, 112, 113, 114, 115, 116, 117, 118, 121, 128, 129, 132, 133, 144, 145, 146, 147, 153, 154, 155, 156, 157, 159, 162, 166, 177, 179, 180, 183, 189, 190, 196, 197, 198, 200, 210, 218, 222, 223, 227, 229, 233, 236, 237, 242, 246, 248, 252, 258, 262, 265, 267, 268, 274, 276, 277, 281, 283, 284, 286, 288, 289, 290, 295, 300, 301, 307, 320, 324, 328, 329, 333, 340, 348, 351, 359, 375, 378, 381, 402, 403, 474, 523, 524, 525, 532, 533, 662, 663, 665, 667, 792, 794, 797, 815, 823, 824, 826, 840, 876, 877, 944, 954, 956, 957, 958, 960, 962, 964, 968, 969, 983, 984, 992], "x_test": [5, 6, 7, 8, 10, 13, 23, 24, 25, 26, 29, 30, 66, 67, 71, 73, 79, 80, 92, 101, 104, 106, 108, 113, 114, 115, 116, 117, 118, 121, 128, 129, 132, 133, 143, 146, 153, 154, 155, 156, 157, 159, 162, 166, 172, 177, 179, 180, 188, 189, 190, 196, 197, 198, 200, 210, 212, 218, 222, 223, 227, 233, 236, 237, 242, 246, 248, 252, 253, 258, 262, 265, 267, 268, 274, 276, 277, 281, 283, 284, 286, 288, 289, 290, 295, 300, 301, 307, 320, 324, 326, 327, 328, 329, 333, 340, 348, 351, 359, 375, 378, 381, 403, 435, 436, 437, 438, 439, 440, 441, 474, 523, 524, 525, 532, 533, 662, 663, 665, 667, 792, 794, 797, 815, 823, 824, 826, 840, 876, 877, 944, 954, 956, 957, 958, 960, 964, 968, 969, 970, 983, 984, 986, 992, 995], "y_train": [5, 6, 7, 8, 10, 13, 23, 24, 25, 26, 29, 30, 66, 67, 71, 79, 80, 92, 101, 104, 108, 112, 113, 114, 115, 116, 117, 118, 121, 128, 129, 132, 133, 144, 145, 146, 147, 153, 154, 155, 156, 157, 159, 162, 166, 177, 179, 180, 183, 189, 190, 197, 198, 210, 218, 222, 223, 227, 233, 236, 237, 242, 246, 248, 252, 258, 262, 267, 268, 274, 276, 277, 281, 284, 286, 288, 289, 290, 295, 297, 298, 300, 301, 302, 320, 324, 328, 329, 333, 340, 348, 351, 359, 375, 378, 381, 402, 403, 474, 523, 524, 525, 532, 533, 662, 663, 665, 667, 792, 794, 797, 815, 823, 824, 826, 876, 877, 944, 954, 956, 957, 962, 964, 969, 983, 984, 992], "y_test": [5, 6, 7, 8, 10, 13, 23, 24, 25, 26, 29, 30, 66, 67, 71, 79, 80, 92, 101, 104, 106, 108, 113, 114, 115, 116, 117, 118, 121, 128, 129, 132, 133, 146, 153, 154, 155, 156, 157, 159, 166, 177, 179, 182, 188, 189, 190, 197, 198, 200, 210, 218, 222, 223, 227, 233, 236, 237, 242, 246, 248, 252, 258, 262, 267, 268, 274, 276, 277, 281, 284, 286, 288, 289, 290, 295, 300, 301, 320, 324, 328, 329, 340, 351, 359, 375, 378, 381, 403, 474, 523, 524, 525, 532, 533, 662, 663, 665, 667, 792, 794, 797, 815, 823, 824, 826, 876, 877, 954, 956, 957, 964, 969, 983, 984, 992, 995], "stratifi": [5, 92, 108, 118, 132, 156, 197, 210, 219, 223, 234, 239, 242, 248, 262, 267, 268, 288, 348, 360, 516, 524, 532, 533, 567, 624, 631, 633, 641, 763, 766, 767, 769, 777, 778, 779, 781, 782, 783, 785, 786, 787, 788, 789, 790, 791, 792, 793, 797, 800, 815, 823, 925, 954, 957, 983, 1000, 1001, 1002, 1004, 1005, 1008], "train_siz": [5, 7, 10, 101, 121, 139, 159, 198, 215, 219, 241, 252, 290, 293, 316, 765, 769, 780, 783, 790, 792, 949, 983, 995, 996, 1001, 1002], "1_000": [5, 26, 32, 45, 68, 92, 117, 138, 143, 145, 155, 213, 236, 316, 502, 504, 666, 785, 793], "rng": [5, 20, 21, 29, 32, 34, 41, 47, 59, 76, 80, 87, 89, 94, 102, 114, 117, 118, 119, 121, 138, 139, 142, 144, 145, 147, 149, 150, 153, 156, 161, 162, 163, 164, 166, 171, 176, 183, 184, 189, 196, 209, 215, 216, 218, 225, 234, 242, 245, 250, 251, 274, 283, 286, 289, 290, 292, 294, 295, 297, 298, 302, 311, 326, 327, 329, 334, 348, 351, 365, 387, 435, 439, 440, 441, 443, 444, 445, 446, 608, 614, 635, 637, 643, 652, 775, 801, 802, 803, 805, 806, 807, 811, 814, 816, 817, 818, 843, 855, 858, 859, 861, 862, 863, 872, 979], "randomst": [5, 14, 20, 21, 23, 29, 32, 34, 41, 47, 58, 59, 76, 77, 80, 87, 89, 94, 102, 113, 114, 117, 118, 119, 121, 132, 138, 139, 142, 144, 145, 147, 149, 150, 153, 156, 161, 162, 163, 164, 166, 171, 176, 183, 184, 189, 196, 205, 209, 215, 216, 225, 228, 234, 242, 245, 246, 248, 249, 250, 251, 274, 280, 282, 283, 286, 289, 290, 292, 294, 295, 297, 298, 302, 311, 326, 327, 348, 351, 355, 360, 365, 379, 386, 387, 405, 408, 412, 414, 416, 417, 418, 419, 423, 424, 425, 427, 434, 435, 439, 440, 441, 443, 444, 445, 446, 453, 456, 457, 460, 462, 468, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 548, 549, 572, 573, 575, 576, 592, 597, 599, 604, 605, 606, 607, 608, 611, 612, 614, 615, 617, 618, 619, 623, 624, 625, 626, 627, 628, 631, 632, 633, 635, 636, 637, 639, 641, 642, 643, 644, 652, 654, 655, 656, 657, 658, 659, 660, 666, 745, 757, 761, 762, 765, 766, 767, 768, 769, 775, 777, 778, 779, 780, 781, 782, 783, 790, 791, 792, 796, 797, 800, 801, 802, 803, 805, 806, 807, 811, 815, 822, 823, 824, 831, 843, 847, 855, 858, 859, 861, 862, 863, 866, 867, 868, 871, 872, 874, 875, 876, 877, 889, 902, 903, 923, 925, 928, 964, 979, 990], "x_test_noisi": 5, "x_train_noisi": 5, "helper": [5, 6, 90, 200, 250, 339, 348, 349, 359, 360, 378, 433, 540, 864, 983, 984, 995, 1002, 1003, 1004, 1008], "qualit": [5, 6, 50, 52, 58, 107, 114, 182, 293, 341, 374, 404, 666, 984, 1010], "assess": [5, 13, 34, 57, 101, 112, 114, 154, 182, 200, 219, 235, 236, 238, 242, 372, 381, 666, 707, 953, 954, 960, 974, 1010], "plot_digit": 5, "small": [5, 11, 13, 21, 26, 36, 45, 46, 50, 52, 66, 73, 77, 80, 84, 92, 102, 104, 111, 113, 114, 143, 145, 154, 155, 162, 168, 172, 173, 183, 186, 188, 197, 199, 200, 227, 239, 246, 251, 261, 272, 275, 277, 279, 281, 283, 290, 297, 302, 308, 313, 316, 320, 321, 335, 339, 341, 343, 346, 349, 355, 360, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 387, 406, 408, 410, 411, 412, 414, 423, 424, 428, 440, 461, 463, 503, 505, 512, 520, 521, 522, 526, 527, 529, 547, 554, 555, 567, 572, 573, 615, 619, 620, 621, 623, 624, 644, 647, 648, 710, 766, 767, 781, 791, 794, 823, 824, 831, 859, 868, 871, 903, 943, 948, 949, 950, 951, 953, 954, 955, 956, 957, 958, 959, 961, 962, 964, 966, 967, 970, 974, 978, 986, 987, 995, 996, 998, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1009, 1010, 1011, 1012], "img": [5, 47, 63, 471, 551], "ravel": [5, 14, 16, 17, 19, 25, 39, 50, 51, 55, 75, 96, 102, 104, 110, 114, 120, 121, 122, 129, 138, 140, 142, 143, 144, 145, 154, 161, 172, 173, 175, 182, 195, 196, 203, 207, 209, 213, 215, 219, 223, 227, 229, 242, 246, 248, 259, 264, 265, 271, 272, 274, 275, 276, 277, 281, 282, 292, 302, 308, 313, 314, 315, 317, 318, 320, 326, 327, 430, 458, 459, 460, 596, 683, 941, 954, 1011], "imshow": [5, 6, 14, 30, 37, 43, 44, 45, 47, 48, 50, 51, 55, 77, 82, 87, 90, 97, 140, 141, 142, 146, 157, 173, 198, 203, 218, 250, 263, 277, 297, 298, 308, 314, 317, 340, 597, 662, 984, 985, 1009], "grei": [5, 249, 279, 316, 341], "off": [5, 12, 14, 34, 36, 37, 44, 45, 49, 50, 73, 77, 79, 87, 107, 117, 186, 203, 214, 218, 233, 238, 240, 241, 279, 298, 302, 308, 318, 320, 341, 346, 348, 360, 374, 376, 383, 407, 518, 519, 524, 525, 553, 556, 599, 621, 657, 680, 761, 762, 763, 766, 767, 777, 789, 907, 953, 959, 969, 974, 995, 999, 1000, 1002], "fontsiz": [5, 8, 10, 15, 32, 47, 57, 84, 90, 110, 131, 141, 142, 144, 147, 155, 162, 172, 181, 193, 203, 204, 228, 234, 243, 244, 245, 250, 251, 277, 283, 315, 880], "mse": [5, 7, 73, 74, 112, 114, 115, 149, 150, 182, 184, 186, 188, 253, 295, 612, 618, 714, 954, 970, 1006, 1008], "nmse": [5, 253], "2f": [5, 8, 11, 13, 19, 29, 36, 39, 41, 43, 47, 49, 59, 61, 64, 79, 85, 90, 96, 114, 117, 121, 122, 131, 154, 155, 159, 162, 171, 173, 178, 182, 197, 198, 199, 200, 209, 213, 219, 238, 242, 243, 245, 247, 248, 249, 267, 268, 274, 281, 284, 292, 308, 320, 321, 329, 375, 378, 381, 661, 790, 793], "linear": [5, 9, 10, 11, 12, 13, 14, 16, 26, 27, 28, 29, 34, 49, 54, 70, 71, 73, 74, 75, 76, 77, 80, 83, 87, 92, 95, 104, 106, 120, 122, 125, 127, 129, 131, 134, 136, 142, 144, 149, 150, 152, 153, 155, 159, 162, 164, 166, 168, 170, 171, 172, 177, 179, 180, 183, 184, 186, 187, 190, 192, 193, 194, 195, 196, 198, 199, 200, 201, 204, 206, 212, 213, 215, 217, 218, 221, 229, 230, 233, 235, 236, 237, 239, 242, 244, 245, 246, 247, 248, 249, 253, 264, 265, 267, 268, 269, 272, 274, 277, 279, 280, 281, 282, 284, 286, 290, 291, 302, 303, 305, 308, 309, 310, 313, 316, 317, 318, 320, 326, 327, 334, 338, 342, 343, 344, 348, 349, 351, 360, 363, 372, 374, 377, 378, 379, 380, 381, 382, 383, 384, 386, 407, 409, 420, 430, 432, 440, 447, 448, 449, 461, 466, 467, 477, 480, 486, 489, 497, 498, 499, 500, 501, 504, 506, 508, 509, 513, 514, 515, 519, 531, 547, 554, 558, 559, 571, 574, 579, 585, 596, 600, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 649, 652, 653, 654, 655, 656, 657, 658, 666, 672, 681, 714, 717, 729, 731, 738, 749, 763, 774, 778, 789, 792, 806, 807, 811, 815, 822, 823, 824, 827, 831, 832, 833, 836, 839, 841, 843, 844, 845, 846, 855, 859, 866, 867, 868, 869, 870, 871, 872, 943, 945, 946, 947, 949, 954, 957, 958, 959, 960, 961, 962, 968, 969, 973, 975, 976, 978, 979, 982, 983, 988, 989, 990, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1006, 1007, 1008, 1009], "radial": [5, 92, 138, 143, 145, 308, 312, 338, 417, 587, 656, 952, 969, 990], "rbf": [5, 6, 7, 10, 11, 16, 28, 29, 92, 123, 129, 138, 139, 140, 142, 143, 144, 145, 146, 147, 151, 159, 196, 208, 209, 215, 237, 239, 241, 244, 254, 256, 265, 302, 303, 305, 314, 315, 338, 375, 379, 381, 417, 427, 467, 469, 500, 506, 575, 576, 577, 578, 581, 583, 584, 585, 586, 588, 589, 596, 604, 605, 606, 607, 608, 641, 656, 729, 738, 740, 763, 774, 777, 783, 826, 846, 861, 862, 866, 868, 869, 870, 871, 872, 943, 946, 947, 949, 951, 954, 960, 964, 967, 975, 979, 984, 990, 1001, 1006], "decomposit": [5, 6, 15, 17, 47, 55, 66, 68, 69, 70, 80, 83, 85, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 120, 159, 202, 203, 205, 214, 217, 218, 221, 238, 263, 268, 284, 292, 295, 321, 335, 339, 352, 355, 360, 370, 371, 372, 375, 381, 414, 416, 417, 418, 427, 447, 448, 449, 460, 514, 521, 576, 615, 616, 617, 618, 619, 620, 621, 628, 629, 630, 637, 638, 639, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 661, 761, 762, 815, 822, 825, 828, 844, 875, 902, 903, 950, 951, 954, 971, 973, 975, 976, 982, 984, 989, 990, 995, 996, 997, 998, 999, 1000, 1001, 1002], "kernel_pca": [5, 92, 375], "400": [5, 25, 47, 87, 116, 121, 138, 150, 188, 207, 251, 275, 321, 341, 379, 460, 988], "1e": [5, 6, 7, 10, 17, 25, 43, 87, 136, 138, 141, 143, 144, 145, 146, 147, 149, 154, 162, 175, 182, 183, 189, 196, 200, 205, 209, 215, 220, 225, 228, 231, 237, 247, 250, 276, 286, 291, 294, 301, 306, 308, 316, 320, 352, 386, 408, 412, 417, 424, 427, 436, 437, 443, 447, 448, 449, 496, 497, 498, 501, 502, 503, 504, 505, 507, 508, 510, 511, 512, 513, 524, 525, 526, 527, 557, 562, 571, 573, 574, 576, 578, 579, 580, 584, 585, 587, 588, 590, 592, 603, 605, 606, 607, 609, 610, 611, 612, 613, 614, 617, 618, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 649, 652, 654, 655, 656, 657, 658, 659, 660, 692, 705, 749, 761, 762, 777, 801, 802, 803, 804, 805, 806, 807, 815, 823, 824, 831, 861, 862, 866, 867, 868, 869, 870, 871, 872, 940, 943, 954, 958, 962, 964, 968, 984, 988, 1003, 1008, 1009, 1010], "fit_inverse_transform": [5, 92, 500, 1004], "5e": [5, 87, 167, 560, 561, 563], "inde": [5, 7, 24, 26, 32, 36, 37, 50, 52, 55, 77, 80, 92, 101, 104, 117, 135, 136, 138, 154, 156, 161, 166, 170, 171, 182, 184, 241, 242, 246, 248, 256, 259, 279, 284, 316, 321, 329, 333, 345, 351, 359, 360, 361, 374, 376, 381, 532, 533, 950, 964, 968, 1009], "least": [5, 13, 15, 75, 76, 78, 79, 89, 90, 104, 115, 136, 146, 151, 153, 160, 161, 166, 172, 175, 178, 182, 184, 186, 187, 190, 199, 200, 213, 219, 239, 256, 258, 284, 290, 291, 308, 321, 322, 333, 339, 341, 343, 345, 346, 350, 352, 354, 358, 360, 361, 365, 373, 374, 376, 377, 378, 379, 381, 382, 383, 384, 385, 409, 413, 415, 421, 422, 423, 426, 439, 446, 447, 448, 449, 450, 459, 481, 496, 502, 504, 506, 507, 508, 510, 511, 512, 513, 514, 522, 523, 524, 525, 527, 529, 530, 531, 558, 567, 600, 608, 611, 613, 615, 616, 617, 618, 619, 620, 621, 622, 628, 629, 630, 631, 632, 633, 634, 636, 637, 639, 641, 643, 644, 645, 647, 648, 649, 650, 651, 652, 657, 662, 677, 681, 683, 749, 764, 768, 769, 775, 777, 778, 779, 781, 782, 784, 787, 790, 791, 792, 823, 824, 827, 838, 846, 871, 874, 875, 876, 877, 895, 917, 944, 947, 951, 954, 957, 966, 968, 969, 970, 974, 975, 976, 978, 986, 990, 995, 997, 998, 1001, 1002, 1006], "hope": [5, 200, 360, 373, 1004], "remov": [5, 15, 16, 17, 51, 52, 66, 71, 136, 149, 150, 154, 157, 240, 279, 286, 288, 289, 290, 295, 320, 321, 324, 329, 338, 341, 345, 346, 347, 348, 350, 351, 355, 360, 364, 367, 374, 375, 378, 381, 382, 384, 385, 406, 407, 409, 410, 412, 414, 415, 422, 443, 453, 454, 491, 492, 499, 500, 502, 504, 506, 511, 518, 532, 533, 534, 535, 544, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 572, 573, 576, 595, 598, 603, 609, 610, 619, 620, 621, 641, 642, 657, 674, 705, 706, 714, 715, 742, 743, 744, 746, 769, 785, 787, 788, 789, 790, 813, 825, 826, 830, 831, 843, 844, 846, 855, 881, 897, 898, 944, 951, 957, 970, 976, 980, 990, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "think": [5, 34, 155, 320, 321, 346, 380, 953, 974, 978, 979], "happen": [5, 26, 106, 170, 279, 285, 321, 329, 333, 334, 344, 345, 346, 350, 351, 352, 358, 360, 361, 364, 374, 376, 378, 381, 402, 480, 537, 623, 749, 844, 846, 866, 950, 954, 955, 969, 974, 988, 1003, 1007, 1008, 1010, 1011, 1012], "ridg": [5, 10, 14, 51, 71, 88, 89, 104, 122, 127, 136, 137, 143, 145, 149, 151, 153, 154, 155, 160, 161, 166, 169, 175, 178, 182, 183, 208, 218, 280, 283, 315, 316, 320, 333, 358, 379, 381, 384, 489, 500, 504, 508, 576, 580, 587, 590, 608, 609, 610, 612, 614, 622, 626, 638, 639, 640, 643, 652, 666, 714, 763, 769, 777, 799, 872, 954, 962, 964, 968, 969, 975, 976, 986, 990, 995, 996, 997, 998, 999, 1000, 1002, 1004, 1005, 1008, 1009, 1010, 1011, 1013], "x_reconstructed_kernel_pca": [5, 92], "inverse_transform": [5, 48, 51, 92, 133, 216, 263, 321, 365, 379, 382, 410, 430, 447, 448, 449, 498, 499, 500, 503, 504, 505, 506, 508, 509, 546, 553, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 595, 763, 766, 767, 777, 826, 830, 831, 833, 834, 835, 836, 837, 839, 840, 842, 843, 844, 846, 858, 859, 964, 965, 966, 997, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "x_reconstructed_pca": [5, 92], "lower": [5, 13, 16, 25, 26, 29, 31, 55, 74, 80, 83, 87, 89, 94, 101, 104, 107, 110, 114, 117, 118, 138, 140, 142, 144, 146, 155, 156, 166, 167, 168, 172, 182, 183, 184, 185, 195, 202, 206, 212, 213, 218, 227, 231, 238, 239, 241, 242, 246, 247, 249, 252, 262, 263, 265, 266, 281, 284, 292, 300, 308, 314, 320, 321, 322, 325, 341, 346, 360, 372, 373, 374, 377, 378, 379, 380, 381, 382, 385, 409, 413, 429, 432, 463, 474, 497, 499, 506, 509, 518, 524, 525, 526, 527, 528, 553, 554, 556, 568, 576, 578, 579, 580, 582, 584, 585, 587, 588, 590, 597, 598, 600, 602, 642, 644, 677, 681, 689, 692, 698, 703, 761, 762, 812, 814, 816, 817, 818, 820, 847, 866, 867, 868, 869, 870, 873, 890, 949, 950, 951, 953, 954, 955, 957, 958, 959, 960, 961, 962, 966, 968, 969, 970, 986, 997, 998, 1003, 1010, 1012], "analysi": [5, 7, 9, 10, 20, 24, 27, 33, 54, 60, 62, 73, 74, 75, 76, 77, 83, 85, 86, 88, 89, 91, 92, 93, 95, 96, 111, 128, 150, 151, 154, 171, 203, 224, 226, 230, 231, 236, 239, 240, 244, 250, 259, 260, 261, 262, 270, 271, 279, 284, 316, 321, 338, 341, 343, 346, 348, 361, 371, 374, 376, 381, 382, 386, 404, 412, 413, 438, 440, 441, 447, 448, 450, 467, 469, 477, 480, 496, 497, 498, 499, 500, 502, 504, 505, 506, 507, 508, 509, 510, 511, 514, 515, 520, 521, 596, 603, 653, 655, 656, 657, 658, 675, 684, 689, 690, 720, 752, 753, 756, 757, 761, 763, 788, 792, 808, 815, 826, 827, 832, 842, 846, 854, 902, 903, 944, 950, 951, 953, 954, 964, 972, 973, 975, 976, 978, 980, 989, 990, 995, 996, 997, 999, 1004], "favor": [5, 77, 107, 225, 231, 358, 376, 381, 598, 694, 771, 773, 825, 943, 962, 997, 999, 1001, 1002, 1004, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "background": [5, 11, 44, 63, 118, 277, 281, 341, 344, 346, 354, 374, 458, 459, 951, 959, 968, 1005], "435": [5, 975], "plot_digits_denois": [5, 975], "agglomer": [5, 30, 33, 44, 47, 82, 132, 134, 151, 164, 181, 218, 252, 338, 374, 382, 410, 467, 565, 571, 610, 763, 768, 826, 975, 990], "hand": [5, 27, 48, 50, 80, 82, 89, 90, 92, 107, 114, 131, 134, 143, 151, 154, 155, 175, 186, 189, 206, 212, 213, 215, 216, 219, 233, 236, 241, 248, 263, 297, 298, 308, 333, 340, 341, 343, 346, 348, 352, 354, 359, 368, 379, 380, 381, 383, 391, 397, 467, 608, 662, 678, 752, 792, 847, 871, 943, 947, 950, 954, 956, 958, 962, 967, 969, 975, 978, 979, 982, 985, 986], "written": [5, 7, 27, 48, 50, 82, 90, 134, 151, 189, 233, 263, 291, 297, 298, 334, 343, 346, 347, 348, 352, 354, 358, 360, 373, 375, 380, 452, 467, 473, 662, 678, 792, 871, 878, 948, 950, 954, 958, 959, 968, 972, 975, 979, 980, 985, 988, 1004], "onlin": [5, 8, 15, 33, 87, 90, 151, 160, 190, 196, 218, 275, 335, 341, 345, 351, 360, 379, 382, 384, 407, 411, 412, 414, 460, 467, 496, 501, 502, 503, 504, 510, 511, 547, 549, 623, 631, 632, 633, 641, 643, 792, 801, 802, 803, 804, 805, 808, 809, 814, 816, 817, 835, 836, 846, 866, 867, 946, 950, 958, 960, 972, 975, 976, 978, 986, 990, 995, 999, 1000, 1002, 1010], "dictionari": [5, 7, 8, 33, 45, 50, 86, 88, 117, 119, 151, 181, 216, 218, 321, 322, 339, 340, 341, 348, 358, 360, 382, 414, 429, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 472, 475, 491, 496, 502, 503, 504, 505, 507, 508, 509, 510, 511, 513, 532, 533, 534, 535, 546, 547, 549, 552, 553, 554, 597, 598, 599, 629, 650, 651, 666, 676, 678, 763, 766, 767, 774, 775, 777, 789, 825, 830, 839, 874, 875, 876, 877, 881, 891, 911, 914, 943, 950, 954, 969, 975, 979, 988, 989, 990, 995, 1003, 1006, 1007, 1008, 1009, 1010], "dataset": [6, 7, 9, 10, 11, 14, 15, 16, 17, 19, 20, 21, 25, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 60, 61, 64, 67, 68, 69, 70, 71, 75, 76, 77, 80, 86, 89, 90, 91, 92, 93, 94, 96, 97, 100, 102, 103, 104, 105, 106, 108, 109, 112, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 128, 129, 132, 133, 134, 135, 136, 137, 139, 141, 144, 146, 149, 150, 156, 157, 159, 160, 163, 165, 167, 168, 169, 170, 172, 173, 174, 175, 178, 179, 180, 181, 185, 186, 187, 189, 190, 192, 194, 195, 196, 197, 198, 199, 204, 206, 207, 208, 210, 213, 215, 217, 218, 222, 223, 225, 227, 228, 229, 231, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 247, 248, 249, 250, 251, 252, 254, 259, 261, 262, 263, 265, 266, 267, 268, 269, 270, 272, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 303, 304, 306, 308, 309, 310, 311, 314, 316, 317, 318, 321, 322, 323, 324, 326, 327, 328, 329, 334, 335, 348, 349, 350, 352, 359, 360, 363, 364, 368, 370, 371, 372, 374, 375, 378, 379, 380, 381, 382, 383, 386, 389, 394, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 423, 424, 434, 435, 438, 439, 440, 441, 443, 446, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 510, 511, 514, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 548, 549, 552, 553, 554, 555, 557, 558, 559, 560, 561, 563, 564, 565, 566, 567, 568, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 590, 593, 596, 597, 598, 599, 600, 603, 604, 605, 608, 610, 611, 612, 614, 616, 617, 618, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 636, 637, 638, 639, 640, 641, 642, 644, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 665, 666, 667, 668, 669, 673, 675, 676, 693, 719, 721, 751, 752, 756, 757, 759, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 777, 778, 779, 780, 781, 782, 783, 785, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 801, 802, 803, 804, 805, 808, 809, 810, 812, 814, 815, 816, 817, 818, 819, 822, 823, 824, 826, 827, 830, 831, 839, 840, 844, 846, 848, 856, 857, 858, 859, 860, 861, 862, 863, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 886, 887, 891, 892, 943, 944, 946, 947, 948, 949, 950, 951, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 964, 966, 967, 968, 969, 970, 973, 974, 975, 978, 980, 982, 983, 984, 987, 990, 992, 995, 996, 997, 998, 999, 1000, 1001, 1002], "excerpt": [6, 966, 984], "wild": [6, 339, 458, 459, 473, 474, 984, 990, 995], "aka": [6, 274, 320, 358, 382, 417, 501, 503, 505, 509, 512, 546, 547, 580, 587, 616, 617, 619, 620, 621, 623, 624, 627, 631, 632, 633, 635, 641, 642, 643, 705, 833, 837, 839, 950, 958, 968, 979, 984, 997, 1009], "lfw": [6, 341, 458, 459, 984, 995], "vi": [6, 8, 341, 664, 984, 1003, 1006], "www": [6, 67, 159, 182, 198, 200, 210, 258, 276, 340, 341, 346, 354, 374, 378, 407, 414, 452, 473, 474, 496, 499, 502, 506, 609, 623, 629, 636, 650, 651, 815, 822, 874, 875, 950, 967, 984], "umass": [6, 19, 341, 984], "edu": [6, 8, 11, 17, 43, 136, 145, 159, 164, 202, 228, 238, 256, 264, 272, 283, 320, 340, 341, 343, 374, 414, 452, 465, 467, 473, 474, 475, 499, 606, 609, 614, 623, 631, 632, 641, 644, 647, 648, 801, 803, 804, 805, 815, 822, 859, 861, 874, 875, 950, 952, 984], "funnel": [6, 458, 459, 984], "tgz": [6, 984], "233mb": [6, 984], "stat": [6, 8, 10, 66, 75, 136, 138, 157, 236, 239, 247, 251, 264, 290, 297, 298, 343, 355, 359, 376, 439, 557, 560, 561, 563, 564, 565, 569, 570, 571, 574, 647, 648, 767, 775, 777, 874, 875, 905, 943, 950, 964, 984, 1002, 1004, 1008], "loguniform": [6, 138, 247, 943, 984, 1005], "fetch_lfw_peopl": [6, 341, 984, 1010, 1013], "confusionmatrixdisplai": [6, 30, 233, 291, 297, 320, 596, 683, 954, 984, 1005, 1006, 1008, 1009, 1010], "classification_report": [6, 30, 66, 133, 237, 277, 297, 298, 954, 984, 988, 997, 999, 1003, 1004, 1005, 1007, 1011, 1012], "randomizedsearchcv": [6, 67, 138, 240, 247, 290, 329, 359, 365, 540, 943, 954, 968, 973, 984, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1010, 1012], "standardscal": [6, 10, 29, 41, 46, 52, 55, 59, 67, 69, 80, 97, 122, 136, 154, 161, 170, 171, 173, 182, 198, 200, 210, 211, 219, 220, 221, 223, 236, 246, 262, 267, 268, 274, 281, 284, 288, 289, 291, 292, 293, 295, 308, 311, 329, 335, 346, 348, 351, 355, 359, 375, 378, 395, 431, 432, 532, 641, 643, 826, 827, 830, 843, 857, 866, 867, 868, 869, 871, 872, 944, 951, 958, 964, 968, 969, 971, 984, 997, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1011], "svc": [6, 16, 24, 26, 28, 29, 30, 66, 70, 112, 123, 129, 134, 139, 151, 159, 173, 186, 214, 217, 221, 233, 237, 239, 241, 244, 245, 246, 249, 250, 254, 281, 284, 288, 290, 300, 302, 303, 304, 305, 306, 308, 309, 310, 311, 313, 314, 317, 318, 320, 333, 348, 352, 360, 368, 372, 375, 378, 381, 400, 401, 402, 433, 480, 520, 662, 663, 665, 667, 763, 780, 793, 795, 826, 863, 864, 866, 868, 942, 943, 949, 952, 954, 955, 964, 975, 979, 983, 984, 986, 992, 995, 996, 997, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "disk": [6, 14, 341, 344, 346, 351, 360, 368, 984], "arrai": [6, 7, 8, 10, 11, 12, 13, 14, 16, 19, 30, 31, 32, 37, 41, 43, 45, 50, 51, 58, 59, 61, 66, 68, 76, 79, 85, 88, 89, 113, 115, 117, 118, 121, 124, 133, 136, 139, 140, 141, 146, 154, 161, 163, 166, 175, 176, 179, 182, 183, 189, 199, 203, 204, 209, 213, 216, 219, 220, 223, 225, 226, 227, 229, 230, 234, 235, 237, 239, 240, 243, 244, 248, 258, 272, 282, 288, 291, 292, 294, 295, 298, 304, 311, 312, 320, 327, 329, 333, 334, 339, 340, 341, 346, 347, 348, 349, 351, 352, 354, 356, 358, 359, 360, 368, 371, 374, 375, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 395, 396, 397, 398, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 455, 456, 457, 458, 459, 461, 462, 463, 465, 466, 467, 468, 469, 471, 473, 474, 475, 476, 477, 478, 480, 484, 488, 489, 492, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 546, 547, 548, 549, 551, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 882, 883, 884, 885, 886, 887, 888, 891, 892, 901, 902, 903, 904, 905, 907, 908, 909, 916, 917, 918, 923, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 940, 941, 944, 949, 950, 952, 954, 955, 957, 958, 960, 961, 964, 965, 966, 968, 969, 970, 972, 978, 983, 984, 985, 986, 987, 988, 990, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1013], "lfw_peopl": [6, 341, 459, 984], "min_faces_per_person": [6, 341, 459, 984], "resiz": [6, 43, 44, 220, 341, 458, 459, 984], "n_sampl": [6, 7, 10, 15, 23, 24, 25, 26, 30, 31, 32, 34, 35, 36, 38, 39, 40, 41, 45, 46, 49, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 64, 66, 71, 73, 74, 75, 76, 77, 80, 85, 87, 88, 92, 94, 101, 103, 104, 105, 106, 107, 108, 113, 114, 115, 116, 118, 119, 128, 129, 135, 136, 147, 149, 150, 153, 161, 163, 164, 166, 168, 170, 172, 174, 176, 177, 181, 182, 183, 185, 186, 190, 194, 197, 199, 200, 202, 203, 204, 205, 206, 207, 209, 213, 214, 216, 219, 226, 228, 229, 230, 231, 236, 237, 239, 242, 243, 246, 248, 249, 250, 251, 252, 253, 259, 269, 281, 282, 283, 286, 289, 290, 292, 294, 295, 299, 306, 309, 310, 316, 320, 321, 329, 339, 343, 346, 348, 351, 355, 358, 359, 360, 365, 374, 376, 377, 378, 379, 381, 385, 386, 387, 389, 391, 392, 393, 396, 397, 398, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 434, 435, 436, 437, 438, 439, 440, 441, 442, 444, 445, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 459, 466, 469, 473, 477, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 546, 547, 548, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 582, 583, 586, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 677, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 734, 735, 736, 737, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 787, 788, 789, 790, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 891, 892, 903, 905, 907, 916, 923, 925, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 943, 946, 950, 954, 955, 957, 958, 964, 965, 966, 968, 969, 970, 979, 984, 985, 986, 987, 988, 995, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "w": [6, 12, 14, 16, 28, 32, 37, 39, 42, 45, 55, 61, 93, 96, 136, 149, 181, 186, 199, 216, 217, 225, 226, 227, 230, 231, 250, 277, 291, 292, 312, 313, 316, 322, 329, 334, 341, 343, 352, 368, 374, 375, 379, 381, 382, 386, 391, 397, 402, 430, 434, 437, 439, 447, 448, 449, 488, 503, 505, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 530, 532, 533, 534, 535, 553, 554, 556, 575, 576, 600, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 658, 664, 689, 690, 720, 763, 777, 794, 795, 796, 797, 799, 800, 801, 802, 803, 804, 805, 808, 809, 812, 813, 816, 817, 823, 824, 859, 861, 862, 866, 867, 868, 869, 871, 872, 874, 875, 876, 877, 900, 905, 950, 954, 958, 959, 964, 966, 968, 969, 984, 988, 1005, 1009, 1010, 1011, 1012], "info": [6, 39, 67, 87, 154, 155, 216, 237, 343, 345, 350, 360, 382, 461, 910, 920, 984], "n_featur": [6, 8, 15, 24, 25, 26, 28, 29, 30, 31, 32, 37, 49, 55, 57, 58, 73, 74, 75, 76, 77, 84, 85, 87, 94, 101, 103, 105, 107, 108, 133, 135, 136, 149, 150, 159, 161, 164, 166, 168, 176, 177, 181, 185, 186, 197, 199, 203, 209, 213, 214, 216, 225, 230, 236, 242, 246, 248, 249, 251, 252, 269, 274, 281, 288, 289, 290, 292, 294, 295, 316, 320, 321, 322, 329, 333, 339, 340, 346, 348, 351, 358, 359, 360, 365, 374, 376, 377, 379, 381, 382, 385, 386, 387, 389, 391, 392, 393, 396, 397, 398, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 422, 423, 424, 425, 426, 428, 429, 430, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 454, 455, 456, 457, 459, 466, 469, 473, 474, 477, 480, 481, 484, 486, 488, 489, 491, 493, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 546, 547, 548, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 597, 598, 599, 600, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 661, 662, 663, 665, 666, 667, 675, 689, 722, 723, 724, 725, 727, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 756, 757, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 777, 778, 779, 780, 781, 782, 783, 784, 785, 787, 788, 789, 790, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 822, 823, 824, 826, 829, 830, 831, 832, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 903, 929, 930, 931, 932, 933, 934, 935, 936, 937, 946, 950, 955, 957, 958, 964, 968, 969, 970, 979, 984, 985, 987, 988, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "id": [6, 19, 200, 272, 328, 340, 341, 346, 354, 376, 378, 382, 388, 459, 460, 461, 878, 880, 898, 984, 988, 1003, 1004, 1007], "person": [6, 242, 341, 345, 378, 382, 458, 459, 460, 964, 984, 1003], "target_nam": [6, 19, 28, 49, 83, 91, 95, 153, 191, 203, 227, 233, 240, 248, 249, 262, 285, 301, 320, 325, 339, 341, 453, 454, 456, 457, 458, 459, 461, 462, 465, 467, 468, 469, 470, 475, 678, 954, 970, 979, 984, 988, 1005], "n_class": [6, 34, 84, 85, 101, 103, 108, 110, 133, 135, 197, 203, 214, 217, 227, 246, 247, 248, 268, 269, 288, 325, 328, 329, 346, 348, 360, 381, 402, 453, 454, 467, 480, 484, 488, 514, 515, 516, 518, 520, 522, 524, 526, 529, 532, 534, 558, 559, 569, 575, 599, 604, 623, 624, 631, 632, 633, 639, 640, 641, 642, 662, 672, 681, 683, 699, 702, 705, 718, 752, 758, 763, 766, 767, 777, 787, 794, 795, 796, 797, 798, 800, 801, 802, 803, 804, 805, 808, 813, 815, 816, 823, 826, 833, 834, 837, 840, 847, 850, 861, 862, 863, 866, 867, 868, 869, 870, 871, 872, 874, 876, 878, 879, 891, 892, 950, 954, 955, 958, 965, 968, 969, 984, 1000, 1001, 1002, 1004, 1005, 1006, 1012], "1288": [6, 341], "1850": [6, 341], "scaler": [6, 67, 69, 151, 198, 199, 214, 219, 221, 223, 262, 267, 278, 283, 284, 293, 308, 311, 329, 351, 375, 378, 455, 623, 624, 637, 639, 652, 826, 835, 836, 838, 842, 843, 844, 846, 851, 852, 853, 854, 855, 856, 857, 958, 964, 968, 975, 984, 995, 1000, 1003, 1008], "unlabel": [6, 217, 290, 297, 298, 299, 301, 302, 360, 373, 374, 861, 862, 863, 953, 979, 982, 984, 986, 1007], "unsupervis": [6, 12, 34, 46, 68, 69, 80, 87, 106, 120, 209, 217, 265, 266, 307, 320, 321, 329, 338, 341, 348, 359, 360, 373, 374, 377, 379, 380, 381, 382, 383, 398, 407, 410, 497, 499, 501, 502, 504, 507, 508, 514, 528, 531, 532, 534, 535, 547, 548, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 593, 595, 599, 600, 603, 604, 605, 606, 607, 642, 763, 766, 767, 769, 777, 785, 790, 793, 808, 809, 812, 814, 815, 816, 817, 822, 829, 830, 831, 832, 835, 836, 838, 839, 840, 841, 843, 844, 845, 846, 847, 858, 859, 863, 870, 951, 954, 960, 967, 976, 979, 980, 982, 984, 990, 995, 998, 1008, 1012], "dimension": [6, 9, 10, 19, 29, 37, 41, 51, 52, 54, 55, 59, 65, 67, 69, 70, 79, 80, 85, 87, 94, 95, 101, 106, 120, 128, 129, 136, 138, 140, 141, 145, 151, 166, 178, 183, 199, 201, 203, 204, 206, 209, 213, 214, 217, 226, 227, 260, 263, 267, 269, 281, 305, 312, 320, 329, 333, 338, 341, 342, 343, 346, 355, 360, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 410, 412, 414, 430, 434, 438, 447, 448, 449, 450, 453, 454, 455, 456, 457, 458, 459, 460, 462, 465, 466, 467, 469, 470, 475, 480, 484, 497, 499, 500, 503, 504, 505, 506, 509, 512, 514, 528, 531, 538, 564, 572, 596, 605, 606, 607, 617, 653, 654, 655, 656, 657, 658, 659, 661, 664, 675, 689, 761, 762, 763, 792, 806, 807, 808, 811, 814, 815, 822, 826, 827, 830, 836, 841, 846, 858, 859, 860, 866, 870, 903, 940, 945, 946, 949, 950, 955, 956, 960, 966, 967, 968, 969, 970, 975, 976, 978, 979, 980, 982, 984, 985, 987, 988, 989, 990, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1007, 1010, 1011], "reduct": [6, 19, 51, 54, 65, 69, 80, 87, 95, 104, 120, 151, 201, 203, 204, 207, 213, 217, 260, 267, 269, 292, 305, 329, 333, 338, 373, 374, 375, 377, 379, 381, 383, 433, 447, 448, 449, 450, 467, 495, 497, 499, 500, 503, 504, 505, 506, 509, 512, 514, 518, 519, 522, 523, 524, 525, 529, 530, 531, 564, 572, 623, 624, 653, 654, 655, 656, 657, 658, 745, 763, 792, 808, 815, 822, 826, 827, 836, 846, 864, 866, 874, 875, 876, 877, 946, 951, 966, 970, 974, 975, 976, 978, 984, 990, 996, 997, 998, 1001, 1009, 1010, 1011], "top": [6, 12, 14, 15, 16, 17, 32, 34, 36, 38, 39, 40, 41, 42, 48, 59, 61, 67, 84, 89, 99, 106, 107, 110, 117, 122, 125, 154, 182, 184, 193, 197, 209, 219, 220, 225, 227, 228, 231, 236, 240, 248, 249, 264, 279, 281, 285, 289, 295, 297, 298, 308, 312, 320, 329, 344, 346, 348, 352, 358, 371, 372, 374, 379, 380, 381, 452, 552, 553, 556, 564, 690, 720, 758, 878, 880, 943, 946, 950, 952, 962, 973, 978, 984, 987, 988, 1009], "t0": [6, 8, 11, 15, 17, 36, 39, 41, 43, 45, 47, 49, 55, 59, 61, 90, 166, 168, 197, 198, 199, 204, 207, 209, 213, 215, 240, 295, 320, 321, 322, 641, 642, 643, 984], "svd_solver": [6, 66, 87, 94, 295, 370, 379, 500, 506, 984, 1001, 1013], "whiten": [6, 87, 88, 89, 263, 379, 386, 498, 499, 506, 844, 846, 964, 984, 999, 1001, 1009, 1010], "done": [6, 8, 9, 11, 13, 15, 17, 19, 45, 47, 49, 50, 90, 117, 133, 136, 143, 154, 155, 159, 161, 166, 168, 186, 199, 215, 216, 230, 237, 240, 243, 248, 259, 282, 290, 320, 321, 322, 329, 334, 340, 344, 346, 348, 350, 353, 354, 355, 358, 360, 365, 374, 376, 378, 379, 381, 406, 407, 410, 415, 417, 437, 447, 448, 449, 450, 454, 500, 526, 527, 547, 571, 572, 573, 593, 595, 597, 599, 608, 609, 610, 624, 705, 761, 762, 763, 777, 782, 783, 830, 844, 939, 943, 944, 947, 950, 951, 954, 956, 957, 958, 964, 967, 968, 969, 970, 974, 979, 983, 984, 986, 988, 995, 997, 1002, 1005, 1007, 1011], "components_": [6, 15, 55, 80, 87, 89, 90, 97, 213, 214, 277, 284, 292, 360, 375, 379, 409, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 508, 509, 604, 815, 822, 858, 859, 946, 966, 984, 999, 1001, 1007, 1010], "project": [6, 8, 11, 14, 17, 31, 42, 52, 55, 64, 83, 86, 87, 89, 91, 93, 97, 103, 142, 144, 146, 147, 151, 155, 174, 179, 191, 202, 203, 204, 206, 208, 214, 217, 226, 234, 263, 268, 272, 277, 305, 313, 321, 325, 333, 338, 340, 344, 345, 351, 352, 355, 360, 361, 364, 371, 377, 379, 380, 386, 405, 411, 416, 417, 427, 439, 447, 448, 449, 450, 454, 467, 469, 496, 498, 499, 500, 502, 504, 506, 507, 508, 509, 513, 514, 538, 547, 554, 606, 607, 614, 637, 639, 653, 656, 660, 661, 796, 815, 843, 858, 859, 860, 902, 903, 948, 950, 951, 952, 955, 957, 958, 960, 967, 970, 975, 978, 979, 984, 987, 990, 995, 996, 998, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "orthonorm": [6, 355, 902, 946, 984], "x_train_pca": [6, 984], "x_test_pca": [6, 92, 984], "966": 6, "069": [6, 237], "007": [6, 225, 247, 259, 321], "classifi": [6, 7, 8, 9, 22, 25, 27, 28, 30, 32, 53, 66, 67, 68, 69, 70, 83, 92, 97, 101, 102, 103, 104, 105, 108, 109, 110, 113, 120, 123, 124, 129, 132, 133, 135, 140, 151, 156, 157, 159, 160, 172, 173, 174, 180, 182, 189, 191, 194, 197, 200, 209, 212, 214, 216, 217, 222, 233, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 254, 256, 257, 261, 267, 268, 270, 274, 277, 281, 290, 291, 295, 296, 297, 298, 300, 301, 303, 304, 306, 307, 309, 310, 311, 312, 317, 318, 322, 341, 343, 346, 348, 351, 358, 360, 365, 374, 375, 378, 382, 383, 384, 391, 399, 400, 401, 402, 403, 404, 453, 454, 461, 469, 477, 479, 480, 487, 496, 501, 502, 507, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 526, 528, 529, 531, 532, 533, 534, 535, 558, 559, 567, 571, 575, 587, 594, 596, 597, 598, 614, 623, 624, 631, 633, 636, 637, 638, 639, 640, 641, 662, 663, 665, 667, 668, 672, 673, 674, 676, 677, 678, 683, 685, 690, 691, 693, 694, 696, 698, 699, 702, 703, 704, 705, 706, 707, 718, 720, 746, 747, 748, 751, 752, 753, 758, 760, 763, 766, 767, 769, 777, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 813, 814, 816, 817, 822, 823, 824, 826, 827, 833, 846, 847, 861, 862, 863, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 880, 895, 897, 943, 944, 946, 949, 950, 951, 954, 955, 956, 959, 962, 964, 967, 968, 969, 970, 973, 974, 975, 976, 978, 979, 980, 982, 983, 984, 990, 992, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1012], "1e3": [6, 7, 10, 138, 144, 149, 215, 250, 294, 943, 984], "1e5": [6, 143, 163, 165, 172, 250, 578, 579, 580, 584, 585, 587, 588, 590, 855, 860, 966, 984, 986], "clf": [6, 10, 11, 12, 16, 23, 24, 25, 26, 29, 30, 35, 45, 48, 51, 55, 60, 67, 93, 105, 113, 116, 118, 123, 127, 129, 132, 133, 135, 140, 142, 157, 172, 174, 175, 179, 180, 186, 189, 191, 194, 195, 196, 198, 205, 210, 211, 214, 217, 223, 229, 236, 240, 244, 245, 247, 250, 251, 262, 265, 266, 267, 270, 274, 281, 284, 288, 289, 290, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 320, 324, 325, 328, 333, 341, 359, 360, 368, 375, 378, 381, 383, 403, 514, 515, 518, 520, 522, 524, 526, 528, 529, 532, 558, 559, 562, 597, 599, 603, 604, 605, 606, 607, 609, 610, 613, 617, 623, 624, 625, 626, 627, 631, 633, 634, 637, 638, 639, 640, 641, 642, 645, 662, 663, 665, 667, 752, 763, 766, 767, 777, 794, 795, 796, 798, 801, 802, 803, 804, 805, 812, 813, 823, 866, 868, 870, 871, 874, 878, 880, 944, 946, 950, 954, 955, 957, 958, 960, 961, 968, 969, 970, 979, 983, 984, 988], "class_weight": [6, 310, 360, 373, 522, 526, 529, 623, 624, 631, 633, 639, 640, 641, 642, 866, 868, 871, 873, 874, 876, 943, 968, 969, 984, 995, 996, 998, 999, 1000, 1001, 1003, 1009, 1010], "n_iter": [6, 17, 67, 117, 138, 190, 240, 247, 259, 277, 310, 348, 352, 359, 386, 419, 443, 497, 498, 509, 510, 511, 512, 609, 610, 611, 612, 617, 618, 625, 626, 627, 628, 646, 647, 648, 649, 650, 651, 652, 657, 659, 766, 767, 775, 777, 822, 824, 902, 903, 943, 968, 984, 996, 1001, 1002, 1003, 1007, 1009, 1010, 1011, 1013], "found": [6, 19, 20, 21, 97, 108, 135, 138, 142, 144, 146, 186, 217, 237, 240, 241, 242, 284, 288, 291, 293, 294, 308, 322, 333, 335, 340, 343, 345, 346, 348, 358, 360, 361, 371, 374, 377, 378, 379, 381, 382, 384, 399, 406, 409, 410, 424, 437, 522, 523, 524, 525, 529, 530, 553, 555, 575, 576, 593, 601, 612, 616, 618, 620, 626, 628, 630, 636, 637, 639, 641, 643, 652, 653, 677, 684, 763, 766, 767, 777, 803, 808, 809, 815, 837, 839, 840, 874, 875, 876, 877, 881, 883, 938, 942, 943, 946, 950, 951, 953, 955, 956, 957, 958, 964, 968, 969, 970, 974, 979, 984, 988, 995, 998, 999, 1002, 1003, 1005, 1009, 1012], "grid": [6, 8, 10, 11, 20, 24, 25, 26, 39, 51, 58, 67, 68, 69, 70, 73, 77, 110, 120, 131, 133, 135, 142, 151, 153, 154, 155, 171, 200, 207, 214, 215, 216, 220, 225, 230, 232, 236, 238, 240, 243, 244, 246, 251, 258, 261, 263, 264, 272, 277, 281, 282, 284, 305, 307, 308, 314, 315, 320, 341, 348, 353, 358, 360, 369, 375, 378, 380, 381, 382, 413, 426, 429, 437, 463, 467, 480, 487, 596, 597, 598, 612, 615, 618, 619, 621, 624, 626, 628, 641, 678, 692, 706, 749, 752, 763, 766, 767, 774, 777, 779, 792, 793, 826, 871, 947, 949, 954, 957, 961, 974, 975, 979, 980, 982, 984, 986, 990, 995, 998, 999, 1000, 1002, 1003, 1009, 1011, 1012], "search": [6, 26, 43, 51, 67, 68, 69, 70, 114, 131, 133, 135, 136, 138, 151, 200, 215, 216, 230, 232, 238, 240, 243, 244, 246, 251, 258, 259, 261, 263, 277, 281, 293, 308, 315, 320, 329, 343, 344, 346, 348, 358, 360, 369, 374, 375, 378, 381, 382, 383, 385, 408, 413, 415, 417, 422, 423, 426, 429, 436, 437, 443, 467, 480, 487, 522, 523, 524, 525, 529, 530, 531, 544, 564, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 593, 618, 641, 653, 654, 657, 658, 678, 692, 749, 752, 763, 766, 767, 774, 775, 777, 779, 792, 793, 806, 807, 808, 809, 810, 812, 814, 816, 817, 818, 819, 820, 826, 871, 874, 875, 876, 877, 908, 942, 947, 949, 951, 954, 957, 958, 968, 970, 973, 974, 975, 979, 980, 982, 984, 990, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1007, 1009, 1010, 1012], "best_estimator_": [6, 51, 69, 70, 73, 94, 215, 230, 240, 243, 263, 763, 766, 767, 777, 943, 983, 984, 1002], "153": [6, 191, 628, 975], "76823": 6, "03433306456": 6, "0034189458230957995": 6, "from_estim": [6, 9, 24, 26, 28, 29, 32, 53, 103, 106, 117, 118, 119, 123, 155, 165, 174, 191, 196, 215, 220, 222, 233, 236, 241, 242, 246, 249, 254, 262, 267, 270, 284, 288, 289, 290, 291, 293, 294, 295, 304, 305, 306, 307, 309, 310, 312, 325, 353, 372, 598, 683, 691, 746, 748, 751, 752, 753, 949, 954, 961, 984, 992, 1008, 1009, 1010, 1011, 1012, 1013], "display_label": [6, 233, 662, 984, 1007], "xticks_rot": [6, 662, 984], "vertic": [6, 17, 57, 113, 157, 171, 213, 214, 243, 258, 279, 282, 313, 315, 360, 371, 374, 379, 480, 662, 745, 984], "tight_layout": [6, 8, 24, 26, 29, 37, 49, 52, 62, 69, 71, 80, 87, 88, 89, 97, 101, 103, 108, 110, 112, 115, 120, 122, 124, 140, 142, 147, 149, 153, 154, 156, 157, 161, 162, 166, 172, 180, 182, 190, 193, 197, 200, 202, 214, 219, 234, 235, 251, 258, 259, 261, 271, 280, 281, 282, 283, 284, 288, 292, 306, 321, 324, 325, 984], "042": [6, 352], "precis": [6, 13, 24, 30, 66, 71, 77, 87, 133, 144, 145, 151, 159, 210, 232, 233, 237, 277, 279, 297, 298, 346, 348, 360, 371, 372, 373, 374, 376, 379, 381, 408, 434, 435, 436, 437, 438, 439, 440, 441, 443, 469, 488, 497, 499, 506, 509, 609, 610, 611, 613, 615, 616, 617, 619, 620, 621, 634, 637, 639, 645, 647, 648, 652, 664, 665, 671, 672, 673, 678, 691, 693, 694, 695, 703, 727, 746, 747, 748, 751, 752, 761, 762, 792, 795, 806, 807, 812, 827, 846, 850, 866, 871, 878, 880, 903, 948, 950, 957, 958, 969, 975, 984, 988, 995, 998, 999, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012], "recal": [6, 24, 30, 66, 77, 92, 133, 151, 210, 219, 232, 237, 256, 277, 297, 298, 346, 360, 374, 469, 569, 665, 671, 672, 673, 677, 678, 691, 693, 694, 695, 746, 747, 748, 751, 752, 792, 795, 827, 846, 850, 866, 950, 970, 975, 984, 988, 998, 999, 1002, 1004, 1005, 1007, 1008, 1009, 1011, 1012], "f1": [6, 24, 30, 66, 133, 237, 277, 297, 298, 301, 378, 678, 693, 694, 702, 747, 954, 955, 984, 988, 999, 1011], "ariel": [6, 341, 995, 1001], "sharon": [6, 341], "69": [6, 173, 284, 298, 374, 436, 437, 572, 573, 720, 954, 964, 986], "colin": [6, 341, 1001], "powel": [6, 341], "87": [6, 30, 66, 147, 237, 298, 562, 632, 741, 752, 763, 842, 854, 954, 988], "donald": [6, 341, 374, 689, 944], "rumsfeld": [6, 341], "63": [6, 325, 343, 381, 522, 523, 530, 531, 611, 612, 617, 625, 626, 627, 646, 664, 690, 763, 777, 876, 877, 954], "georg": [6, 341, 374, 1001, 1007, 1008, 1009, 1010], "bush": [6, 341], "95": [6, 13, 15, 30, 41, 49, 54, 64, 84, 93, 110, 114, 117, 145, 154, 161, 182, 184, 189, 200, 227, 228, 231, 239, 240, 264, 272, 281, 285, 292, 298, 308, 329, 381, 492, 597, 598, 601, 612, 626, 712, 863, 950, 954, 955, 967, 988, 998], "91": [6, 30, 48, 143, 277, 297, 298, 381, 949, 984, 988], "146": [6, 381], "gerhard": [6, 341], "schroeder": [6, 341], "hugo": [6, 341, 1001, 1006, 1007, 1008, 1009], "chavez": [6, 341], "90": [6, 10, 13, 15, 30, 70, 96, 97, 113, 114, 115, 117, 133, 143, 157, 162, 173, 179, 181, 184, 189, 200, 225, 248, 250, 281, 285, 294, 297, 298, 329, 333, 346, 352, 378, 528, 745, 763, 790, 795, 847, 949, 954, 984, 988, 1010, 1011], "toni": [6, 341, 528, 846, 960, 1008, 1009], "blair": [6, 341], "93": [6, 11, 13, 30, 90, 136, 182, 223, 237, 298, 320, 343, 611, 612, 617, 625, 626, 627, 646, 741, 752, 763, 790, 874, 949, 954, 984, 988], "83": [6, 28, 32, 36, 297, 343, 348, 659, 672, 750, 949, 954, 984, 988, 998], "322": [6, 84, 436, 437], "macro": [6, 30, 66, 133, 237, 277, 288, 297, 298, 341, 378, 672, 678, 693, 694, 702, 747, 748, 751, 752, 954, 988, 995, 1003, 1011], "avg": [6, 30, 66, 133, 237, 277, 297, 298, 534, 669, 678, 954, 984, 988, 1011], "weight": [6, 11, 13, 14, 15, 19, 23, 30, 51, 66, 97, 114, 123, 124, 132, 133, 142, 143, 150, 151, 154, 160, 166, 171, 173, 182, 186, 187, 189, 192, 193, 194, 196, 197, 198, 200, 216, 221, 225, 229, 237, 242, 246, 248, 262, 271, 273, 274, 275, 277, 284, 286, 288, 291, 295, 297, 298, 303, 308, 310, 312, 313, 314, 316, 317, 320, 321, 322, 328, 329, 342, 343, 355, 358, 360, 374, 376, 377, 379, 380, 383, 385, 391, 397, 402, 405, 408, 409, 411, 412, 414, 418, 424, 425, 428, 429, 430, 432, 434, 439, 447, 448, 449, 461, 480, 489, 503, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 551, 554, 555, 556, 558, 562, 567, 568, 575, 576, 593, 597, 598, 599, 600, 602, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 652, 654, 658, 662, 663, 665, 667, 668, 672, 673, 674, 677, 678, 681, 683, 685, 686, 687, 688, 690, 691, 692, 693, 694, 698, 699, 700, 702, 703, 704, 705, 707, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 720, 722, 723, 733, 746, 747, 748, 749, 751, 752, 753, 754, 755, 758, 759, 760, 761, 762, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 810, 811, 812, 813, 814, 816, 817, 818, 819, 820, 822, 823, 824, 825, 828, 831, 845, 846, 847, 861, 862, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 878, 879, 880, 891, 892, 905, 929, 935, 944, 945, 950, 951, 953, 954, 956, 957, 958, 959, 961, 964, 967, 968, 969, 970, 974, 975, 979, 986, 988, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "85": [6, 8, 16, 17, 30, 47, 52, 66, 90, 133, 197, 200, 250, 277, 298, 329, 381, 404, 463, 465, 520, 521, 562, 617, 623, 709, 717, 752, 763, 790, 954, 955, 984, 995], "plot_galleri": [6, 87, 984], "n_row": [6, 19, 87, 371, 389, 416, 418, 476, 478, 984], "n_col": [6, 19, 87, 218, 389, 416, 418, 476, 478, 597, 984], "portrait": [6, 379, 984], "figur": [6, 7, 8, 10, 12, 14, 16, 23, 24, 25, 26, 29, 34, 35, 36, 37, 39, 41, 42, 43, 44, 45, 47, 48, 49, 51, 53, 55, 56, 58, 59, 60, 61, 62, 64, 73, 77, 79, 82, 83, 84, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 101, 102, 103, 104, 113, 114, 115, 116, 117, 120, 121, 125, 127, 129, 131, 132, 135, 139, 140, 141, 142, 145, 146, 150, 154, 155, 156, 157, 161, 166, 167, 172, 175, 176, 179, 181, 183, 184, 188, 193, 197, 198, 199, 204, 205, 206, 209, 213, 214, 215, 217, 218, 220, 225, 227, 228, 231, 233, 238, 243, 244, 253, 264, 268, 269, 272, 274, 277, 279, 281, 282, 286, 288, 290, 297, 298, 299, 306, 308, 313, 325, 326, 327, 346, 374, 380, 381, 382, 384, 403, 596, 597, 662, 663, 665, 666, 667, 769, 785, 880, 943, 947, 950, 953, 954, 957, 958, 961, 962, 968, 969, 970, 983, 984, 986, 987, 1008], "subplots_adjust": [6, 7, 14, 15, 36, 39, 41, 42, 47, 48, 51, 59, 61, 75, 77, 84, 85, 89, 90, 96, 103, 104, 122, 154, 181, 182, 197, 200, 209, 217, 225, 227, 228, 231, 234, 250, 252, 264, 272, 274, 277, 281, 290, 298, 305, 308, 984], "bottom": [6, 8, 12, 14, 15, 32, 34, 36, 39, 41, 42, 48, 50, 59, 61, 84, 85, 112, 120, 125, 182, 193, 209, 225, 227, 228, 231, 236, 239, 250, 264, 279, 298, 300, 308, 346, 372, 374, 380, 552, 878, 948, 950, 954, 962, 974, 984, 987], "left": [6, 7, 12, 14, 15, 16, 23, 31, 32, 36, 39, 41, 42, 48, 52, 59, 61, 68, 71, 76, 77, 84, 85, 89, 90, 101, 104, 106, 107, 108, 111, 114, 117, 122, 124, 141, 147, 150, 154, 157, 167, 175, 182, 183, 184, 186, 193, 195, 196, 199, 200, 209, 213, 217, 219, 220, 225, 227, 228, 231, 235, 236, 237, 238, 240, 248, 249, 251, 262, 264, 265, 272, 274, 277, 279, 292, 294, 295, 298, 307, 308, 312, 328, 341, 346, 348, 350, 371, 374, 377, 378, 380, 381, 382, 384, 391, 397, 411, 437, 447, 448, 449, 450, 458, 463, 514, 520, 521, 522, 523, 524, 525, 526, 527, 529, 530, 531, 552, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 592, 600, 604, 608, 616, 620, 761, 762, 763, 766, 767, 770, 777, 839, 846, 874, 875, 876, 877, 878, 890, 903, 925, 928, 943, 946, 948, 950, 952, 954, 956, 961, 966, 968, 970, 983, 984, 986, 987, 1002, 1004, 1009], "01": [6, 8, 10, 13, 14, 16, 37, 41, 48, 59, 79, 87, 89, 90, 104, 113, 115, 117, 119, 120, 136, 143, 147, 154, 155, 163, 166, 173, 189, 194, 195, 200, 202, 203, 209, 213, 214, 215, 219, 220, 227, 231, 233, 238, 239, 240, 244, 246, 247, 248, 264, 275, 277, 279, 289, 295, 310, 321, 326, 327, 341, 343, 351, 374, 383, 414, 436, 480, 486, 497, 504, 508, 510, 560, 561, 563, 570, 607, 611, 619, 623, 643, 661, 680, 763, 777, 860, 923, 950, 954, 958, 964, 966, 968, 975, 984, 988], "right": [6, 7, 11, 12, 14, 15, 16, 29, 32, 36, 39, 40, 41, 42, 48, 50, 57, 59, 61, 74, 75, 77, 83, 84, 85, 89, 90, 92, 94, 96, 101, 103, 104, 105, 114, 115, 116, 117, 124, 132, 138, 141, 150, 157, 172, 183, 184, 185, 186, 188, 189, 192, 193, 209, 212, 213, 216, 225, 227, 228, 230, 231, 234, 235, 239, 242, 246, 249, 250, 252, 264, 272, 274, 277, 279, 281, 284, 294, 295, 298, 308, 310, 312, 316, 318, 320, 325, 328, 329, 346, 358, 361, 371, 374, 377, 379, 380, 381, 384, 429, 447, 448, 449, 450, 499, 506, 509, 522, 523, 524, 525, 526, 527, 529, 530, 531, 552, 577, 578, 579, 580, 581, 584, 585, 586, 587, 588, 589, 590, 592, 600, 641, 643, 831, 874, 875, 876, 877, 878, 890, 903, 943, 946, 948, 950, 952, 954, 956, 957, 961, 966, 968, 969, 970, 973, 974, 978, 980, 984, 986, 987, 997, 1003, 1009, 1011, 1012], "99": [6, 8, 13, 24, 30, 41, 48, 59, 87, 200, 209, 213, 219, 225, 227, 237, 240, 279, 298, 334, 339, 343, 350, 378, 381, 382, 457, 612, 626, 636, 647, 648, 752, 813, 923, 949, 954, 964, 968, 984, 990, 997], "hspace": [6, 14, 15, 41, 42, 59, 87, 200, 209, 225, 227, 228, 231, 264, 290, 298, 305, 984], "grai": [6, 14, 43, 44, 47, 48, 50, 87, 90, 116, 136, 180, 182, 200, 213, 217, 218, 246, 276, 343, 379, 458, 459, 467, 486, 984, 987, 1006], "ytick": [6, 11, 28, 32, 37, 41, 43, 47, 48, 49, 55, 56, 59, 77, 79, 90, 115, 132, 140, 141, 142, 146, 165, 172, 178, 195, 209, 217, 226, 227, 228, 231, 234, 253, 263, 272, 277, 297, 308, 313, 314, 320, 983, 984], "portion": [6, 8, 76, 112, 136, 248, 333, 341, 343, 346, 352, 360, 752, 787, 804, 943, 953, 957, 984, 988], "pred_nam": [6, 984], "rsplit": [6, 17, 240, 984], "true_nam": [6, 984], "ntrue": [6, 297, 298, 984], "prediction_titl": [6, 984], "signif": [6, 946, 984], "eigenface_titl": [6, 984], "convolut": [6, 146, 984], "network": [6, 219, 276, 333, 334, 335, 340, 341, 360, 361, 368, 374, 379, 381, 386, 461, 498, 500, 532, 533, 661, 705, 823, 824, 950, 952, 954, 968, 970, 973, 976, 984, 989, 990, 995, 1009, 1013], "famili": [6, 333, 335, 360, 374, 377, 379, 382, 383, 557, 560, 561, 563, 564, 565, 571, 823, 824, 842, 854, 950, 964, 968, 984, 986, 999, 1009], "outsid": [6, 9, 19, 110, 183, 184, 212, 223, 382, 411, 600, 845, 960, 984, 1003], "scope": [6, 19, 333, 335, 346, 358, 382, 973, 974, 984], "scikit": [6, 8, 10, 12, 13, 15, 16, 17, 29, 30, 47, 52, 66, 67, 99, 105, 106, 107, 117, 119, 122, 133, 136, 147, 149, 150, 151, 154, 155, 156, 157, 159, 170, 171, 182, 183, 184, 200, 208, 211, 219, 221, 222, 223, 232, 235, 236, 244, 251, 256, 259, 261, 264, 266, 285, 287, 312, 320, 321, 324, 325, 329, 334, 335, 338, 340, 341, 342, 343, 345, 346, 349, 352, 353, 354, 355, 359, 360, 365, 367, 368, 370, 371, 372, 374, 375, 376, 378, 379, 380, 381, 382, 383, 384, 388, 389, 391, 392, 393, 394, 396, 397, 398, 403, 408, 411, 412, 415, 422, 429, 430, 432, 433, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 467, 468, 469, 477, 480, 486, 489, 503, 506, 526, 527, 529, 530, 532, 541, 546, 547, 548, 554, 564, 567, 576, 591, 593, 595, 597, 599, 603, 605, 611, 613, 617, 623, 634, 645, 653, 665, 666, 667, 682, 696, 706, 712, 742, 743, 744, 752, 759, 763, 764, 765, 766, 767, 768, 769, 777, 780, 781, 782, 783, 784, 785, 788, 789, 792, 794, 795, 808, 810, 826, 827, 829, 831, 833, 836, 838, 839, 840, 841, 845, 846, 847, 850, 863, 864, 866, 871, 874, 875, 897, 898, 920, 921, 922, 943, 944, 950, 951, 953, 954, 955, 956, 957, 958, 959, 960, 964, 967, 968, 969, 970, 972, 975, 977, 982, 983, 984, 986, 987, 990, 992, 993, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "librari": [6, 239, 291, 293, 326, 329, 338, 340, 341, 344, 345, 346, 347, 352, 358, 359, 360, 364, 370, 623, 866, 867, 868, 869, 871, 872, 922, 950, 954, 969, 970, 973, 974, 978, 984, 988, 993, 998, 1002, 1003, 1004, 1005, 1006, 1008, 1012], "reader": [6, 39, 291, 335, 346, 984], "pytorch": [6, 358, 973, 974, 984, 1011, 1012], "tensorflow": [6, 358, 973, 984], "implement": [6, 7, 13, 14, 16, 17, 43, 53, 76, 87, 107, 117, 150, 157, 159, 166, 167, 171, 196, 200, 202, 209, 215, 216, 237, 239, 248, 256, 258, 259, 261, 264, 282, 288, 289, 290, 291, 292, 294, 320, 322, 333, 334, 335, 340, 341, 343, 344, 346, 347, 348, 351, 352, 354, 355, 360, 364, 365, 368, 370, 371, 373, 374, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 402, 407, 408, 409, 411, 412, 413, 414, 415, 440, 458, 461, 473, 497, 498, 499, 500, 501, 503, 506, 507, 508, 518, 519, 520, 522, 523, 526, 527, 528, 532, 537, 547, 553, 554, 556, 558, 562, 566, 575, 576, 597, 598, 605, 606, 610, 611, 618, 622, 623, 624, 628, 629, 633, 636, 637, 639, 640, 641, 642, 643, 649, 650, 651, 652, 653, 656, 657, 660, 672, 676, 685, 699, 702, 706, 742, 746, 752, 753, 761, 763, 766, 767, 769, 777, 781, 782, 785, 787, 788, 789, 790, 791, 793, 794, 795, 796, 797, 798, 799, 801, 802, 803, 804, 805, 808, 809, 811, 814, 816, 817, 822, 823, 824, 826, 848, 856, 857, 863, 866, 867, 868, 869, 870, 871, 872, 902, 903, 911, 914, 919, 922, 923, 925, 943, 944, 946, 948, 950, 951, 952, 953, 955, 956, 958, 959, 960, 964, 966, 967, 970, 971, 973, 974, 976, 978, 979, 984, 985, 986, 987, 988, 990, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "932": [6, 8, 975], "plot_face_recognit": [6, 975], "quantiz": [6, 33, 43, 55, 90, 151, 340, 341, 374, 408, 412, 414, 471, 743, 831, 928, 964, 975], "k": [6, 11, 12, 15, 16, 17, 19, 23, 25, 28, 29, 33, 34, 35, 39, 43, 46, 47, 50, 52, 53, 57, 60, 62, 70, 71, 75, 83, 84, 85, 87, 90, 93, 94, 101, 103, 110, 114, 118, 120, 121, 123, 124, 127, 129, 132, 133, 136, 139, 141, 142, 146, 147, 150, 151, 154, 155, 156, 157, 162, 164, 165, 167, 176, 179, 184, 186, 194, 196, 213, 215, 217, 218, 219, 225, 228, 235, 239, 242, 243, 248, 249, 252, 259, 261, 264, 265, 266, 267, 268, 270, 271, 272, 280, 281, 282, 283, 286, 288, 292, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 319, 320, 322, 328, 329, 334, 340, 341, 343, 346, 354, 355, 358, 360, 365, 370, 371, 372, 373, 375, 376, 377, 379, 380, 381, 382, 383, 384, 386, 405, 408, 411, 412, 413, 414, 415, 416, 417, 418, 424, 425, 427, 434, 437, 453, 467, 469, 471, 477, 488, 496, 502, 506, 509, 510, 511, 514, 515, 518, 520, 522, 523, 524, 546, 554, 555, 556, 557, 559, 560, 561, 563, 564, 565, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 596, 604, 605, 613, 615, 616, 618, 619, 620, 621, 623, 624, 628, 629, 630, 631, 632, 634, 644, 645, 647, 648, 649, 650, 651, 653, 656, 660, 661, 669, 670, 673, 682, 690, 701, 707, 720, 722, 723, 725, 730, 733, 738, 739, 740, 741, 743, 757, 758, 759, 761, 762, 764, 768, 770, 771, 772, 775, 778, 779, 781, 782, 784, 790, 801, 806, 807, 808, 809, 810, 811, 812, 814, 816, 817, 818, 819, 820, 827, 831, 832, 833, 837, 838, 839, 841, 842, 846, 854, 859, 873, 881, 889, 898, 903, 928, 943, 944, 946, 947, 948, 950, 951, 952, 953, 956, 958, 959, 960, 962, 967, 968, 969, 970, 973, 975, 983, 989, 990, 995, 996, 997, 998, 1001, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1012], "spars": [6, 7, 8, 12, 14, 17, 19, 28, 36, 37, 51, 52, 54, 66, 72, 73, 74, 86, 88, 106, 120, 151, 153, 160, 161, 167, 170, 171, 174, 176, 177, 181, 198, 213, 215, 240, 246, 259, 275, 277, 289, 293, 301, 319, 322, 328, 333, 338, 340, 341, 342, 346, 348, 349, 350, 351, 358, 359, 360, 374, 375, 381, 382, 384, 385, 389, 396, 403, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 422, 424, 425, 427, 428, 429, 430, 432, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 452, 453, 454, 461, 462, 468, 473, 488, 489, 491, 492, 493, 494, 496, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 516, 518, 519, 520, 521, 522, 523, 524, 525, 528, 529, 530, 531, 532, 533, 534, 535, 536, 546, 547, 550, 551, 553, 554, 555, 556, 558, 559, 568, 569, 570, 571, 572, 573, 574, 594, 595, 596, 598, 603, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 656, 657, 658, 660, 661, 662, 663, 665, 666, 667, 668, 677, 678, 679, 693, 694, 695, 698, 702, 703, 704, 718, 719, 724, 725, 727, 728, 730, 731, 732, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 751, 756, 757, 760, 763, 766, 767, 777, 784, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 808, 809, 810, 812, 813, 814, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 829, 830, 831, 833, 835, 836, 837, 838, 839, 841, 843, 844, 845, 846, 848, 849, 850, 851, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 882, 884, 885, 886, 887, 892, 900, 903, 904, 907, 908, 909, 917, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 940, 944, 947, 950, 951, 952, 954, 955, 957, 967, 969, 970, 974, 975, 976, 986, 987, 988, 989, 990, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1013], "demonstr": [7, 13, 19, 20, 21, 24, 30, 33, 37, 40, 52, 58, 66, 68, 101, 105, 112, 115, 133, 146, 147, 151, 157, 183, 184, 216, 222, 223, 227, 231, 232, 235, 242, 245, 248, 253, 261, 264, 271, 278, 280, 281, 283, 286, 290, 296, 298, 299, 302, 306, 312, 320, 321, 322, 329, 335, 341, 342, 346, 351, 358, 365, 370, 374, 378, 381, 412, 467, 477, 485, 662, 668, 678, 706, 762, 763, 831, 862, 874, 943, 944, 948, 954, 955, 956, 957, 964, 967, 970, 972, 975], "diabet": [7, 115, 125, 126, 135, 136, 150, 151, 169, 170, 171, 178, 179, 235, 252, 339, 381, 466, 617, 618, 763, 768, 787, 788, 789, 962, 975, 979, 983, 990], "regress": [7, 10, 14, 24, 26, 28, 51, 65, 67, 75, 76, 78, 83, 88, 89, 90, 97, 100, 101, 104, 106, 107, 108, 109, 112, 113, 116, 117, 121, 122, 128, 136, 137, 139, 147, 149, 150, 151, 153, 154, 155, 157, 160, 164, 166, 167, 168, 169, 172, 176, 177, 179, 183, 185, 186, 187, 188, 191, 193, 198, 205, 208, 210, 218, 219, 220, 223, 235, 247, 250, 252, 253, 258, 260, 262, 275, 276, 277, 279, 280, 283, 284, 290, 291, 292, 293, 295, 303, 304, 316, 320, 323, 324, 328, 334, 335, 338, 339, 341, 343, 346, 348, 351, 354, 355, 358, 359, 360, 369, 372, 376, 377, 378, 379, 381, 383, 397, 402, 429, 430, 439, 449, 454, 455, 457, 461, 466, 467, 469, 470, 477, 481, 482, 483, 489, 493, 496, 500, 502, 504, 506, 507, 508, 510, 511, 513, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 529, 530, 531, 532, 535, 536, 557, 558, 559, 560, 561, 562, 563, 564, 565, 569, 570, 571, 574, 575, 576, 579, 580, 587, 588, 590, 596, 597, 598, 599, 600, 602, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 659, 666, 671, 686, 687, 688, 692, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 717, 749, 754, 755, 763, 766, 767, 769, 777, 785, 789, 790, 792, 793, 797, 799, 800, 808, 809, 814, 816, 817, 823, 824, 826, 827, 830, 831, 833, 839, 840, 841, 843, 846, 847, 850, 855, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 880, 886, 889, 891, 907, 943, 944, 946, 949, 951, 961, 962, 964, 965, 973, 974, 975, 976, 977, 978, 979, 982, 985, 990, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012], "patient": [7, 125, 136, 150, 343, 354, 378, 950, 986], "diseas": [7, 125, 136, 150, 242, 343, 677, 954, 986], "newsgroup": [7, 15, 19, 213, 240, 301, 321, 322, 339, 371, 382, 453, 454, 980, 990], "post": [7, 15, 19, 66, 151, 292, 320, 321, 322, 323, 328, 333, 341, 345, 346, 350, 351, 359, 374, 413, 453, 454, 465, 677, 792, 874, 954, 970, 975, 977, 978, 988, 1006], "about": [7, 11, 27, 41, 50, 54, 59, 66, 80, 82, 110, 133, 147, 151, 153, 154, 157, 186, 199, 209, 216, 236, 237, 239, 241, 246, 258, 264, 284, 288, 290, 291, 292, 293, 294, 298, 320, 322, 328, 329, 333, 334, 339, 341, 344, 345, 346, 350, 351, 352, 359, 360, 361, 368, 373, 378, 379, 382, 384, 403, 457, 459, 460, 461, 462, 465, 466, 467, 469, 470, 475, 480, 526, 527, 558, 559, 572, 573, 579, 598, 605, 641, 643, 707, 763, 769, 777, 785, 795, 845, 887, 944, 950, 951, 953, 955, 957, 960, 961, 964, 965, 967, 969, 970, 973, 977, 978, 979, 980, 986, 988, 1000, 1001, 1011], "sgdclassifi": [7, 8, 189, 190, 191, 192, 193, 194, 195, 214, 247, 301, 310, 320, 329, 333, 335, 352, 360, 372, 373, 382, 603, 605, 606, 607, 611, 623, 631, 633, 866, 871, 946, 950, 955, 968, 969, 988, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1008, 1009, 1010, 1011, 1012, 1013], "stochast": [7, 55, 112, 113, 116, 128, 151, 159, 160, 170, 204, 206, 209, 214, 265, 267, 268, 273, 276, 291, 307, 374, 379, 381, 427, 453, 461, 467, 468, 469, 479, 487, 501, 509, 524, 525, 536, 569, 592, 596, 604, 623, 624, 633, 637, 639, 641, 642, 643, 644, 652, 653, 654, 655, 657, 792, 815, 822, 823, 824, 827, 836, 870, 902, 903, 928, 943, 957, 958, 960, 975, 976, 989, 990, 995, 996, 999, 1000, 1002, 1004, 1006], "gradient": [7, 13, 43, 63, 67, 100, 101, 102, 105, 106, 108, 109, 119, 122, 125, 143, 144, 151, 157, 160, 162, 170, 184, 205, 209, 214, 238, 240, 265, 275, 279, 283, 285, 292, 295, 307, 360, 373, 374, 384, 417, 427, 431, 432, 453, 455, 461, 466, 468, 485, 518, 519, 524, 525, 526, 527, 529, 530, 536, 551, 575, 576, 577, 578, 579, 580, 581, 584, 585, 586, 587, 588, 589, 590, 596, 597, 599, 600, 604, 613, 614, 623, 624, 633, 634, 637, 639, 641, 642, 643, 645, 652, 657, 659, 660, 705, 706, 712, 714, 754, 763, 766, 767, 768, 784, 789, 792, 822, 823, 824, 827, 839, 840, 870, 928, 951, 954, 957, 958, 959, 960, 973, 975, 976, 990, 995, 996, 998, 999, 1000, 1001, 1002, 1004, 1005, 1008, 1010, 1012], "descent": [7, 14, 112, 151, 160, 167, 170, 209, 214, 265, 291, 307, 379, 381, 436, 437, 443, 453, 461, 468, 496, 502, 503, 504, 505, 507, 508, 510, 511, 512, 513, 536, 596, 604, 611, 612, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 633, 637, 639, 641, 642, 643, 646, 647, 648, 649, 652, 659, 792, 823, 824, 827, 866, 870, 928, 951, 958, 960, 969, 975, 976, 986, 990, 995, 998, 999, 1000, 1002, 1004, 1006, 1008, 1009, 1010], "nusvr": [7, 333, 872, 969, 997, 1003, 1005, 1006, 1007, 1009, 1010], "nu": [7, 9, 11, 147, 196, 209, 307, 333, 381, 384, 584, 642, 868, 869, 870, 960, 968, 969, 1006, 1010], "vector": [7, 8, 9, 10, 12, 15, 16, 19, 20, 25, 28, 30, 33, 37, 45, 68, 82, 87, 89, 90, 132, 138, 146, 163, 169, 186, 187, 194, 198, 214, 215, 222, 237, 239, 240, 244, 265, 277, 279, 302, 304, 305, 308, 309, 310, 311, 312, 313, 316, 318, 321, 333, 335, 341, 351, 352, 355, 358, 360, 371, 372, 374, 376, 377, 378, 379, 381, 384, 385, 386, 402, 408, 409, 410, 412, 414, 415, 416, 418, 429, 430, 432, 433, 447, 448, 449, 450, 452, 454, 462, 474, 477, 486, 489, 496, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 514, 515, 516, 517, 532, 533, 534, 535, 546, 547, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 582, 583, 584, 585, 587, 588, 590, 596, 603, 605, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 637, 638, 639, 640, 641, 642, 643, 651, 652, 653, 654, 656, 657, 658, 660, 664, 684, 699, 727, 732, 733, 734, 735, 737, 738, 739, 741, 742, 763, 766, 767, 777, 790, 793, 794, 795, 801, 802, 803, 804, 805, 808, 809, 810, 812, 813, 814, 816, 817, 818, 823, 824, 831, 833, 838, 846, 850, 853, 864, 866, 867, 868, 869, 870, 871, 872, 873, 886, 900, 902, 903, 917, 923, 943, 946, 947, 948, 950, 951, 952, 954, 955, 956, 958, 959, 960, 964, 968, 970, 975, 976, 979, 982, 985, 988, 990, 992, 995, 996, 997, 998, 999, 1001, 1003, 1004, 1006, 1008, 1013], "gradientboostingregressor": [7, 112, 114, 115, 122, 125, 333, 351, 358, 519, 527, 597, 598, 950, 954, 955, 995, 996, 997, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1012], "forward": [7, 101, 136, 216, 290, 333, 346, 365, 383, 473, 474, 504, 508, 518, 524, 525, 567, 633, 650, 651, 826, 830, 950, 974, 1007], "wise": [7, 25, 45, 146, 183, 209, 249, 279, 321, 333, 360, 372, 374, 378, 379, 383, 423, 496, 499, 502, 506, 510, 511, 514, 515, 518, 520, 521, 524, 525, 557, 560, 561, 563, 564, 565, 571, 605, 617, 665, 718, 794, 843, 856, 857, 860, 927, 929, 930, 931, 932, 935, 946, 948, 950, 954, 955, 968, 974, 995, 1000, 1003, 1004, 1005], "fashion": [7, 106, 112, 190, 248, 334, 360, 371, 372, 374, 379, 381, 518, 522, 523, 524, 525, 529, 530, 531, 567, 592, 792, 815, 830, 833, 839, 850, 874, 875, 876, 877, 925, 944, 950, 954, 964, 1004], "notic": [7, 13, 24, 25, 32, 50, 54, 75, 104, 106, 107, 114, 117, 135, 161, 166, 209, 222, 236, 237, 239, 240, 242, 248, 249, 259, 284, 312, 320, 321, 322, 329, 351, 361, 378, 461, 528, 943, 953, 954, 960, 988, 992, 1008], "faster": [7, 19, 36, 61, 69, 87, 106, 107, 111, 112, 114, 117, 136, 155, 159, 168, 182, 184, 197, 198, 200, 215, 219, 259, 261, 276, 289, 291, 292, 320, 321, 322, 333, 340, 346, 354, 355, 360, 373, 374, 379, 383, 384, 386, 408, 412, 414, 416, 417, 418, 427, 473, 496, 497, 498, 501, 502, 503, 504, 505, 507, 508, 510, 511, 512, 513, 518, 524, 525, 526, 527, 608, 611, 612, 617, 618, 623, 624, 625, 626, 627, 628, 637, 639, 649, 652, 656, 660, 690, 720, 742, 743, 744, 806, 807, 811, 823, 824, 841, 843, 845, 855, 859, 903, 923, 943, 947, 950, 955, 957, 958, 961, 966, 968, 969, 970, 973, 984, 988, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "10_000": [7, 24, 71, 106, 114, 153, 159, 213, 242, 259, 524, 525, 529, 530, 843], "vari": [7, 13, 26, 29, 32, 41, 43, 52, 59, 62, 71, 107, 108, 110, 120, 129, 135, 140, 151, 154, 155, 171, 173, 176, 180, 189, 207, 214, 219, 230, 235, 239, 242, 273, 279, 281, 282, 284, 294, 296, 302, 308, 311, 313, 318, 329, 333, 335, 341, 360, 406, 410, 411, 465, 473, 479, 480, 487, 524, 525, 529, 530, 611, 612, 615, 616, 617, 618, 619, 620, 625, 626, 627, 628, 646, 649, 668, 727, 782, 785, 790, 792, 793, 823, 827, 831, 846, 863, 871, 874, 875, 928, 946, 949, 950, 954, 957, 958, 967, 970, 975, 978, 1002, 1003, 1011], "relev": [7, 9, 19, 72, 76, 134, 136, 151, 161, 176, 185, 239, 240, 246, 329, 333, 335, 341, 343, 345, 346, 348, 350, 351, 352, 360, 361, 365, 376, 377, 383, 384, 402, 408, 409, 412, 414, 430, 434, 435, 436, 437, 438, 439, 440, 441, 447, 448, 449, 498, 499, 503, 506, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 546, 547, 553, 555, 556, 559, 575, 576, 600, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 655, 690, 704, 720, 764, 765, 766, 767, 770, 772, 781, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 811, 813, 816, 817, 823, 824, 826, 829, 831, 832, 833, 838, 844, 845, 846, 861, 862, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 878, 879, 880, 954, 955, 960, 971, 974, 975, 998, 1003, 1009], "next": [7, 24, 57, 75, 110, 111, 115, 125, 145, 153, 157, 175, 179, 182, 210, 218, 222, 223, 227, 234, 245, 258, 284, 285, 286, 290, 298, 320, 324, 328, 329, 344, 346, 348, 350, 371, 374, 375, 378, 381, 473, 474, 575, 599, 657, 663, 665, 667, 745, 761, 762, 792, 920, 943, 947, 953, 954, 964, 978, 992, 995, 1008, 1009], "ham": [7, 415, 422, 546, 664, 668, 674, 698, 705, 742, 743, 744, 760, 957], "loss": [7, 13, 23, 24, 25, 26, 96, 107, 113, 114, 115, 116, 138, 139, 151, 160, 164, 172, 175, 184, 186, 187, 189, 190, 194, 200, 215, 247, 275, 276, 284, 291, 295, 301, 305, 306, 310, 312, 316, 320, 358, 360, 372, 373, 379, 384, 429, 430, 461, 473, 474, 497, 503, 504, 505, 508, 512, 517, 518, 519, 523, 524, 525, 526, 527, 530, 608, 611, 614, 623, 624, 631, 632, 633, 634, 635, 636, 637, 641, 642, 643, 644, 668, 671, 674, 687, 698, 699, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 717, 754, 755, 760, 763, 766, 767, 777, 788, 789, 792, 823, 824, 826, 827, 830, 831, 839, 840, 841, 846, 866, 867, 872, 873, 875, 877, 903, 907, 947, 950, 958, 962, 967, 968, 969, 970, 975, 988, 995, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "eustach": [7, 8, 10, 978, 997, 998], "diemert": [7, 8, 10, 978, 997, 998], "maria": [7, 115, 122, 136, 150, 374, 1006, 1007, 1008, 1009, 1010], "telenczuk": [7, 115, 122, 136, 150, 1004, 1007, 1008, 1010], "github": [7, 8, 12, 25, 67, 68, 106, 108, 109, 115, 118, 119, 122, 125, 133, 143, 150, 154, 155, 156, 163, 210, 211, 212, 216, 220, 221, 222, 223, 230, 237, 239, 240, 246, 251, 259, 277, 285, 289, 290, 292, 293, 295, 299, 328, 344, 345, 349, 350, 351, 352, 354, 358, 360, 361, 368, 370, 657, 972, 973, 977, 988, 1005], "com": [7, 8, 11, 12, 15, 16, 20, 21, 23, 39, 45, 54, 62, 66, 67, 99, 101, 102, 103, 104, 105, 106, 113, 115, 116, 121, 122, 138, 141, 143, 145, 147, 150, 162, 182, 184, 189, 199, 200, 203, 205, 207, 212, 225, 227, 228, 240, 243, 259, 279, 280, 283, 284, 320, 321, 341, 344, 346, 350, 351, 352, 354, 358, 374, 407, 499, 506, 636, 670, 1002, 1005], "maikia": [7, 115, 122, 150, 1003, 1004, 1006, 1007], "lemaitre58": [7, 122, 138, 143, 145, 147, 203, 279], "gmail": [7, 11, 15, 16, 23, 39, 45, 54, 62, 66, 67, 99, 101, 102, 103, 104, 105, 106, 113, 115, 116, 121, 122, 138, 141, 143, 145, 147, 162, 182, 184, 199, 200, 203, 205, 212, 225, 227, 228, 240, 243, 279, 284, 320, 321], "licens": [7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 20, 21, 23, 24, 25, 26, 28, 29, 30, 34, 36, 37, 39, 42, 43, 44, 45, 48, 49, 50, 51, 54, 58, 62, 63, 64, 66, 67, 69, 70, 71, 77, 82, 83, 87, 89, 91, 92, 93, 94, 97, 99, 101, 102, 103, 104, 105, 106, 107, 112, 113, 115, 116, 117, 121, 122, 136, 138, 139, 141, 142, 143, 144, 145, 147, 150, 159, 164, 165, 167, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 182, 183, 184, 187, 189, 190, 198, 199, 200, 203, 204, 205, 207, 209, 212, 214, 215, 217, 219, 225, 227, 240, 243, 245, 252, 258, 259, 261, 267, 268, 269, 271, 272, 274, 277, 279, 280, 281, 282, 283, 284, 297, 298, 299, 300, 302, 312, 313, 316, 317, 320, 321, 322, 340, 360, 368, 970, 978], "hamming_loss": [7, 668, 760, 954, 997, 1001, 1004], "mean_squared_error": [7, 112, 114, 115, 178, 182, 184, 186, 188, 200, 329, 381, 716, 954, 996, 998, 1005, 1006, 1012], "seed": [7, 11, 25, 26, 32, 36, 37, 41, 42, 49, 51, 54, 56, 57, 61, 62, 67, 73, 74, 75, 85, 88, 93, 104, 110, 129, 131, 156, 172, 177, 180, 185, 188, 191, 195, 199, 205, 226, 228, 229, 230, 231, 242, 245, 253, 264, 265, 266, 271, 313, 314, 318, 321, 329, 334, 348, 355, 358, 360, 374, 378, 379, 408, 412, 413, 415, 417, 422, 424, 425, 426, 427, 436, 437, 438, 501, 509, 518, 519, 520, 521, 524, 525, 592, 611, 612, 617, 618, 625, 626, 627, 628, 642, 654, 656, 658, 660, 761, 762, 767, 797, 800, 815, 869, 889, 902, 903, 919, 923, 943, 944, 949, 951, 986, 987, 999, 1000, 1004, 1005, 1011], "fetch_20newsgroups_vector": [7, 197, 213, 341, 995, 1005, 1007, 1012, 1013], "generate_data": [7, 31], "load_diabet": [7, 115, 125, 127, 136, 150, 167, 169, 170, 171, 178, 179, 220, 235, 293, 381, 523, 527, 533, 638, 666, 787, 788, 789, 875, 877, 962, 983, 986, 1001, 1006, 1009], "elif": [7, 8, 16, 162, 184, 217, 227, 264, 842], "subset": [7, 19, 20, 25, 26, 30, 66, 67, 75, 76, 108, 110, 111, 112, 127, 133, 136, 155, 157, 171, 183, 197, 198, 199, 200, 212, 214, 218, 219, 237, 240, 242, 248, 249, 251, 256, 284, 285, 290, 297, 301, 320, 321, 322, 329, 341, 346, 354, 358, 360, 371, 372, 374, 375, 378, 381, 382, 384, 391, 402, 414, 429, 431, 432, 434, 453, 454, 457, 458, 462, 473, 514, 515, 516, 518, 520, 521, 522, 523, 524, 526, 527, 528, 529, 530, 531, 532, 534, 567, 575, 594, 604, 605, 606, 607, 616, 620, 623, 631, 632, 633, 636, 639, 640, 641, 642, 643, 644, 662, 668, 669, 678, 681, 683, 695, 698, 719, 721, 757, 760, 765, 790, 792, 794, 795, 796, 797, 801, 802, 803, 804, 805, 808, 813, 816, 823, 832, 861, 862, 866, 868, 871, 874, 876, 882, 923, 943, 950, 954, 955, 965, 967, 969, 970, 988, 998, 1003, 1004, 1006, 1008, 1012], "regression_data": 7, "classification_data": 7, "calcul": [7, 25, 26, 31, 43, 56, 75, 99, 100, 101, 105, 123, 150, 151, 157, 178, 186, 187, 199, 214, 216, 238, 239, 245, 249, 253, 258, 306, 312, 313, 329, 333, 353, 360, 365, 371, 372, 374, 378, 379, 381, 385, 403, 408, 409, 411, 413, 415, 416, 418, 420, 421, 436, 437, 443, 446, 501, 512, 518, 529, 534, 562, 576, 585, 597, 598, 599, 609, 610, 611, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 637, 638, 639, 640, 644, 646, 649, 653, 655, 657, 659, 672, 681, 693, 694, 699, 700, 702, 708, 714, 715, 718, 728, 733, 735, 736, 737, 738, 742, 745, 747, 748, 751, 752, 753, 756, 757, 759, 770, 772, 787, 791, 804, 806, 807, 844, 845, 846, 852, 856, 866, 867, 892, 905, 946, 948, 950, 951, 952, 954, 956, 957, 958, 962, 964, 967, 969, 975, 983, 986, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "given": [7, 10, 11, 13, 26, 28, 34, 46, 55, 57, 73, 79, 88, 92, 107, 117, 118, 120, 122, 138, 145, 154, 155, 166, 182, 183, 186, 200, 203, 209, 213, 214, 216, 218, 219, 220, 235, 239, 240, 241, 242, 248, 262, 265, 266, 267, 281, 285, 291, 320, 321, 322, 327, 333, 335, 341, 345, 346, 348, 350, 352, 354, 355, 358, 360, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 391, 400, 401, 402, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 421, 423, 424, 425, 426, 428, 429, 430, 432, 434, 435, 436, 437, 438, 439, 440, 441, 443, 446, 447, 448, 449, 452, 461, 466, 468, 470, 488, 498, 499, 501, 503, 504, 505, 508, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 546, 547, 553, 554, 555, 556, 558, 559, 566, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 596, 597, 600, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 652, 653, 655, 656, 662, 663, 664, 665, 666, 667, 669, 670, 671, 677, 679, 682, 683, 685, 688, 690, 691, 698, 700, 701, 704, 716, 719, 720, 722, 723, 728, 738, 742, 745, 746, 748, 751, 752, 753, 758, 759, 761, 762, 763, 764, 765, 766, 767, 769, 770, 772, 775, 777, 781, 785, 787, 788, 789, 790, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 836, 837, 838, 839, 840, 841, 842, 843, 845, 846, 852, 853, 855, 858, 859, 860, 861, 862, 863, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 881, 890, 891, 892, 910, 911, 912, 913, 938, 942, 943, 946, 948, 950, 951, 952, 953, 954, 956, 957, 958, 959, 960, 961, 962, 964, 967, 968, 969, 970, 978, 979, 983, 984, 986, 987, 988, 995, 996, 997, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012], "round": [7, 9, 24, 79, 107, 117, 149, 150, 189, 200, 239, 245, 281, 283, 320, 360, 415, 421, 422, 529, 530, 558, 559, 562, 592, 657, 678, 765, 775, 831, 863, 878, 880, 944, 958, 970, 997, 999, 1001, 1003, 1004, 1006, 1008, 1009, 1011, 1012], "changing_param": 7, "collect": [7, 10, 12, 13, 16, 19, 24, 69, 105, 117, 118, 125, 136, 143, 150, 157, 170, 175, 205, 212, 242, 246, 321, 322, 333, 341, 343, 350, 364, 373, 378, 379, 381, 382, 411, 429, 518, 519, 520, 521, 522, 523, 524, 525, 528, 529, 530, 531, 534, 535, 546, 548, 549, 553, 554, 555, 556, 597, 693, 694, 702, 747, 748, 751, 765, 769, 770, 772, 785, 912, 925, 928, 943, 949, 950, 954, 960, 965, 974, 978, 983, 988, 997, 1007], "chang": [7, 16, 24, 25, 26, 87, 91, 92, 104, 107, 115, 139, 149, 153, 154, 157, 183, 184, 186, 187, 220, 221, 234, 239, 246, 249, 283, 288, 289, 290, 291, 292, 293, 294, 295, 298, 308, 312, 322, 328, 329, 333, 334, 335, 341, 344, 348, 349, 350, 351, 354, 358, 360, 365, 374, 378, 381, 382, 384, 386, 399, 402, 405, 408, 409, 412, 414, 417, 419, 424, 427, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 447, 448, 449, 458, 459, 461, 469, 473, 474, 477, 478, 479, 487, 491, 492, 496, 498, 499, 500, 501, 502, 503, 504, 505, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 542, 543, 544, 545, 546, 547, 553, 554, 555, 556, 558, 559, 562, 567, 575, 576, 578, 579, 580, 582, 584, 585, 587, 588, 590, 592, 600, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 652, 655, 657, 659, 665, 669, 672, 677, 681, 682, 693, 694, 700, 701, 705, 719, 721, 742, 748, 749, 751, 759, 761, 762, 763, 764, 765, 766, 767, 768, 770, 772, 777, 781, 782, 784, 786, 787, 788, 789, 790, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 813, 816, 817, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 838, 839, 845, 846, 847, 854, 855, 860, 861, 862, 864, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 878, 880, 884, 886, 887, 898, 903, 913, 920, 921, 922, 924, 943, 944, 945, 953, 954, 955, 957, 964, 967, 968, 969, 970, 974, 979, 986, 988, 993, 994, 1013], "affect": [7, 24, 75, 117, 145, 153, 154, 186, 206, 219, 220, 242, 249, 284, 294, 329, 333, 334, 335, 342, 360, 363, 372, 374, 377, 378, 380, 382, 385, 387, 409, 415, 422, 438, 440, 444, 514, 515, 534, 664, 677, 752, 763, 766, 767, 768, 777, 781, 782, 806, 807, 808, 809, 810, 812, 814, 816, 817, 818, 846, 847, 857, 871, 953, 957, 969, 995, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008], "complexity_comput": [7, 10], "benchmark_influ": 7, "conf": [7, 26, 350, 372, 378, 801, 956, 1009], "prediction_tim": [7, 8], "prediction_pow": 7, "param_valu": 7, "changing_param_valu": 7, "tuned_param": 7, "postfit_hook": 7, "append": [7, 8, 9, 12, 13, 16, 17, 24, 31, 34, 37, 41, 47, 58, 67, 94, 104, 105, 107, 112, 114, 117, 150, 157, 175, 186, 187, 189, 190, 197, 200, 214, 215, 239, 242, 248, 249, 252, 274, 275, 285, 300, 308, 311, 320, 321, 322, 324, 328, 352, 360, 375, 382, 623, 624, 866, 867, 873, 893, 964, 983], "start_tim": [7, 10, 19, 108, 109, 112, 122, 138, 171, 203], "elapsed_tim": [7, 36, 64, 108, 109, 122, 199], "float": [7, 10, 12, 13, 16, 19, 38, 42, 43, 44, 45, 50, 57, 58, 62, 63, 64, 67, 90, 93, 129, 146, 154, 168, 172, 205, 238, 239, 243, 247, 316, 322, 333, 340, 341, 346, 355, 360, 374, 375, 382, 383, 385, 386, 387, 391, 393, 397, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 419, 420, 421, 422, 423, 424, 426, 427, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 489, 490, 492, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 548, 549, 553, 556, 557, 558, 559, 560, 561, 562, 563, 567, 568, 575, 576, 578, 579, 580, 581, 582, 584, 585, 587, 588, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 678, 679, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 698, 699, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 719, 720, 721, 723, 730, 733, 739, 740, 741, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 769, 777, 780, 783, 787, 788, 789, 790, 791, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 822, 823, 824, 826, 829, 832, 833, 839, 840, 842, 844, 846, 847, 848, 849, 858, 859, 860, 861, 862, 863, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 880, 883, 884, 886, 887, 890, 900, 901, 917, 929, 935, 940, 944, 954, 955, 957, 958, 964, 969, 970, 995, 996, 997, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012], "pred_scor": 7, "prediction_performance_comput": 7, "4f": [7, 8, 19, 104, 113, 115, 197, 198, 200, 284, 873], "prediction_performance_label": 7, "necessari": [7, 14, 105, 166, 182, 187, 225, 239, 240, 246, 261, 312, 326, 333, 341, 344, 345, 346, 347, 348, 349, 350, 354, 358, 374, 376, 381, 417, 427, 453, 454, 456, 457, 458, 459, 460, 462, 499, 609, 610, 611, 617, 621, 622, 625, 626, 627, 628, 629, 630, 636, 638, 640, 641, 656, 660, 759, 829, 838, 849, 853, 859, 943, 946, 950, 953, 956, 964, 970, 988, 995, 1003], "defin": [7, 12, 26, 32, 50, 52, 54, 63, 66, 67, 69, 80, 87, 92, 99, 101, 102, 122, 136, 138, 145, 146, 147, 155, 156, 157, 161, 183, 190, 199, 200, 209, 213, 216, 220, 222, 225, 230, 239, 240, 242, 246, 248, 249, 250, 251, 256, 259, 277, 279, 289, 295, 308, 312, 316, 320, 321, 333, 342, 345, 346, 347, 348, 352, 353, 355, 358, 359, 360, 368, 369, 370, 371, 373, 374, 375, 376, 378, 379, 380, 381, 382, 384, 389, 390, 391, 393, 394, 395, 396, 397, 398, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 421, 424, 428, 429, 430, 434, 435, 436, 437, 438, 439, 440, 441, 447, 448, 449, 450, 454, 484, 485, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 571, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 587, 588, 592, 593, 594, 595, 597, 599, 600, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 653, 654, 655, 656, 657, 661, 662, 664, 673, 675, 676, 681, 686, 687, 688, 689, 692, 695, 702, 705, 709, 710, 712, 714, 715, 717, 718, 721, 724, 730, 745, 749, 754, 755, 756, 757, 761, 762, 763, 766, 767, 769, 777, 785, 789, 791, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 822, 823, 824, 826, 829, 830, 831, 832, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 853, 858, 859, 860, 861, 862, 863, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 890, 892, 895, 901, 912, 914, 938, 943, 944, 950, 951, 952, 953, 955, 956, 957, 959, 960, 961, 962, 964, 966, 968, 969, 970, 974, 984, 987, 990, 992, 997, 1001, 1002, 1003, 1005, 1006, 1007, 1009, 1010, 1011, 1012], "complexity_label": [7, 10], "type": [7, 16, 50, 51, 62, 65, 66, 76, 83, 85, 96, 110, 111, 113, 143, 150, 151, 153, 154, 155, 159, 166, 182, 184, 211, 216, 221, 223, 224, 226, 227, 230, 231, 234, 240, 245, 246, 248, 249, 250, 256, 269, 285, 295, 312, 320, 322, 328, 329, 334, 339, 340, 341, 343, 344, 346, 347, 349, 350, 351, 352, 358, 359, 364, 368, 370, 371, 375, 382, 398, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 461, 473, 474, 480, 532, 537, 546, 547, 553, 554, 556, 565, 569, 582, 592, 594, 595, 603, 621, 623, 637, 639, 644, 652, 654, 657, 658, 664, 666, 672, 679, 681, 693, 694, 697, 702, 705, 747, 748, 751, 752, 761, 762, 763, 769, 777, 785, 790, 792, 793, 808, 809, 810, 812, 813, 814, 816, 817, 818, 819, 820, 826, 827, 828, 831, 833, 839, 840, 846, 847, 864, 868, 869, 870, 871, 872, 882, 884, 886, 887, 890, 894, 895, 917, 918, 925, 928, 940, 941, 944, 946, 951, 953, 954, 955, 956, 957, 958, 964, 966, 970, 975, 977, 978, 981, 986, 987, 988, 995, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "_count_nonzero_coeffici": 7, "coef_": [7, 10, 14, 51, 79, 132, 133, 136, 153, 154, 161, 164, 166, 167, 168, 172, 173, 174, 175, 176, 177, 178, 181, 185, 186, 187, 191, 197, 198, 217, 223, 252, 286, 292, 306, 313, 317, 320, 329, 341, 348, 360, 377, 383, 430, 447, 448, 449, 514, 558, 559, 562, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 866, 867, 868, 869, 870, 871, 872, 938, 948, 950, 968, 969, 986, 995, 997, 1000, 1002, 1007, 1009, 1012], "toarrai": [7, 295, 301, 328, 375, 382, 531, 547, 553, 555, 808, 809, 810, 812, 814, 816, 817, 818, 819, 820, 839, 856, 857, 904, 925, 926, 928, 936, 937, 944, 957, 964, 1012], "count_nonzero": [7, 10, 333], "configur": [7, 10, 26, 67, 68, 155, 221, 223, 286, 320, 332, 344, 346, 348, 352, 354, 358, 360, 364, 365, 370, 373, 375, 382, 383, 398, 407, 408, 410, 412, 414, 417, 427, 429, 433, 447, 448, 449, 450, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 514, 531, 532, 533, 534, 535, 546, 547, 548, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 591, 592, 593, 594, 595, 597, 600, 603, 604, 605, 606, 607, 653, 654, 655, 656, 657, 659, 660, 752, 810, 815, 818, 822, 825, 826, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 858, 859, 864, 920, 921, 922, 951, 954, 964, 969, 973, 988, 990, 999, 1002, 1003, 1004, 1005, 1007, 1009, 1010, 1011, 1012], "penalti": [7, 10, 28, 77, 151, 160, 161, 166, 167, 171, 175, 182, 186, 197, 198, 211, 247, 274, 291, 301, 313, 320, 333, 354, 358, 373, 376, 379, 383, 436, 437, 438, 439, 440, 441, 443, 467, 496, 502, 503, 504, 505, 507, 508, 512, 513, 562, 608, 611, 612, 613, 614, 617, 618, 619, 622, 623, 624, 625, 626, 627, 633, 634, 635, 637, 641, 643, 645, 646, 652, 777, 846, 866, 867, 869, 871, 872, 873, 943, 950, 953, 958, 964, 968, 969, 975, 986, 988, 997, 1000, 1002, 1004, 1005, 1007, 1008, 1010, 1011], "elasticnet": [7, 10, 163, 173, 247, 252, 333, 352, 358, 379, 612, 617, 622, 623, 624, 625, 626, 627, 628, 633, 641, 643, 646, 950, 968, 995, 996, 999, 1000, 1001, 1003, 1004, 1006, 1007, 1008, 1009, 1013], "001": [7, 14, 30, 41, 59, 112, 136, 138, 154, 166, 191, 209, 219, 225, 237, 239, 241, 300, 321, 343, 352, 378, 501, 502, 504, 511, 592, 609, 610, 611, 612, 617, 618, 625, 626, 627, 628, 631, 632, 633, 641, 642, 643, 644, 646, 649, 654, 655, 658, 659, 761, 762, 823, 824, 861, 862, 868, 869, 870, 871, 872, 943, 979, 988], "modified_hub": [7, 641, 968], "fit_intercept": [7, 161, 162, 168, 187, 196, 209, 247, 286, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 652, 866, 867, 873, 950, 968, 999, 1003, 1004, 1005, 1007, 1008, 1009], "tol": [7, 10, 17, 69, 87, 112, 117, 136, 149, 162, 173, 175, 189, 190, 196, 198, 209, 220, 226, 228, 277, 291, 316, 320, 348, 352, 381, 386, 408, 412, 414, 417, 424, 427, 436, 437, 443, 447, 448, 449, 496, 497, 498, 500, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 514, 515, 524, 525, 526, 527, 567, 592, 603, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 637, 639, 641, 642, 643, 644, 645, 647, 648, 650, 651, 652, 653, 654, 656, 658, 660, 761, 762, 777, 815, 823, 824, 861, 862, 866, 867, 868, 869, 870, 871, 872, 940, 950, 968, 969, 984, 988, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1012, 1013], "n_iter_no_chang": [7, 107, 112, 117, 190, 291, 320, 351, 360, 381, 524, 525, 526, 527, 631, 632, 633, 641, 642, 643, 823, 824, 968, 1003, 1006], "l1_ratio": [7, 10, 15, 166, 167, 173, 247, 252, 333, 358, 379, 503, 505, 512, 611, 612, 617, 623, 624, 625, 626, 627, 628, 633, 641, 643, 646, 950, 968, 996, 998, 1000, 1007, 1009], "non_zero": [7, 12], "coeffici": [7, 10, 35, 46, 55, 57, 73, 74, 77, 87, 90, 127, 133, 138, 151, 152, 153, 160, 164, 166, 167, 168, 169, 173, 175, 176, 177, 178, 179, 180, 184, 185, 197, 200, 223, 276, 286, 290, 291, 292, 312, 316, 320, 321, 322, 333, 342, 346, 348, 360, 363, 373, 376, 377, 379, 383, 384, 387, 397, 417, 430, 432, 438, 440, 441, 443, 444, 445, 446, 447, 448, 449, 461, 489, 491, 492, 496, 500, 502, 504, 507, 508, 513, 517, 519, 521, 523, 525, 527, 530, 533, 535, 547, 554, 558, 562, 574, 576, 579, 592, 600, 601, 604, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 656, 666, 668, 681, 684, 693, 698, 702, 707, 714, 717, 739, 741, 749, 750, 752, 756, 757, 760, 778, 789, 792, 799, 800, 809, 817, 824, 827, 839, 846, 866, 867, 868, 869, 870, 871, 872, 875, 877, 945, 948, 950, 968, 969, 975, 986, 995, 999, 1000, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1012], "misclassif": [7, 101, 312, 760, 968, 969, 970, 996], "ratio": [7, 50, 63, 69, 95, 151, 213, 215, 228, 232, 333, 346, 374, 376, 378, 381, 415, 421, 458, 459, 480, 506, 514, 515, 516, 596, 623, 675, 677, 681, 689, 694, 700, 703, 746, 747, 748, 751, 759, 789, 792, 812, 859, 923, 948, 960, 970, 975, 984, 1010, 1012], "sparsifi": [7, 166, 333, 623, 624, 631, 632, 633, 641, 642, 643, 866, 938, 997], "05": [7, 8, 13, 15, 23, 25, 34, 41, 49, 57, 59, 61, 62, 64, 71, 84, 92, 104, 107, 114, 117, 120, 127, 132, 136, 143, 146, 147, 154, 162, 163, 181, 184, 196, 206, 207, 209, 219, 225, 227, 228, 231, 239, 240, 248, 250, 264, 267, 272, 279, 281, 288, 292, 298, 300, 313, 343, 383, 415, 421, 443, 490, 495, 496, 511, 557, 560, 561, 563, 578, 579, 580, 584, 585, 587, 588, 590, 597, 598, 614, 655, 659, 720, 763, 815, 866, 867, 950, 958, 964, 975], "n_support_vector": 7, "len": [7, 8, 10, 11, 16, 17, 19, 28, 29, 30, 34, 35, 38, 40, 41, 46, 47, 48, 52, 57, 58, 59, 60, 61, 62, 66, 68, 90, 96, 97, 99, 104, 107, 110, 111, 117, 128, 129, 134, 135, 138, 146, 150, 155, 157, 181, 182, 200, 205, 209, 212, 213, 214, 216, 218, 219, 225, 227, 228, 234, 237, 239, 240, 247, 248, 250, 253, 258, 259, 266, 268, 269, 274, 280, 281, 282, 285, 294, 297, 298, 301, 308, 315, 318, 320, 321, 322, 328, 358, 360, 384, 392, 396, 398, 402, 410, 415, 421, 429, 472, 480, 515, 534, 535, 547, 562, 597, 598, 746, 763, 777, 788, 792, 794, 796, 797, 847, 861, 862, 986, 987, 988, 1004, 1007], "support_vectors_": [7, 10, 16, 309, 312, 313, 868, 869, 870, 871, 872, 969], "squared_error": [7, 13, 96, 114, 115, 291, 381, 523, 524, 525, 527, 530, 636, 641, 643, 658, 875, 877, 968, 970, 1008, 1011, 1012], "learning_r": [7, 101, 112, 113, 114, 115, 116, 117, 207, 259, 275, 277, 289, 291, 381, 518, 519, 524, 525, 526, 527, 633, 641, 642, 643, 657, 822, 823, 824, 951, 961, 968, 996, 1004, 1008], "max_depth": [7, 29, 102, 103, 106, 110, 111, 112, 113, 114, 115, 116, 120, 121, 123, 149, 203, 236, 251, 256, 290, 291, 324, 326, 327, 328, 359, 360, 381, 518, 519, 522, 523, 524, 525, 526, 527, 529, 530, 531, 676, 766, 767, 790, 874, 875, 876, 877, 878, 879, 880, 943, 961, 970, 1004, 1006], "n_estim": [7, 10, 25, 29, 101, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 114, 115, 116, 120, 121, 124, 149, 157, 203, 218, 222, 227, 236, 251, 281, 288, 290, 333, 359, 360, 381, 383, 518, 519, 520, 521, 522, 523, 524, 525, 528, 529, 530, 531, 532, 533, 534, 535, 597, 766, 767, 943, 960, 961, 992, 1003, 1011], "n_tree": 7, "loop": [7, 8, 104, 114, 154, 234, 244, 320, 328, 333, 346, 347, 352, 374, 378, 383, 611, 612, 617, 618, 624, 625, 626, 627, 628, 943, 967, 968, 983, 998, 999, 1002, 1007, 1008, 1011, 1012], "previous": [7, 50, 54, 67, 101, 144, 154, 237, 246, 292, 341, 354, 358, 364, 374, 379, 382, 405, 408, 419, 489, 499, 506, 614, 623, 624, 631, 632, 633, 641, 642, 643, 866, 922, 950, 964, 973, 992, 995, 996, 997, 998, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "subsequ": [7, 30, 55, 71, 90, 101, 133, 170, 184, 241, 244, 259, 261, 308, 329, 346, 348, 352, 360, 374, 375, 381, 384, 402, 461, 473, 518, 519, 524, 526, 527, 631, 633, 641, 766, 767, 794, 795, 798, 801, 802, 803, 804, 805, 823, 841, 845, 944, 953, 955, 1004, 1005, 1009, 1011], "relax": [7, 374, 382, 418, 967, 1002], "sgd": [7, 8, 11, 16, 84, 96, 103, 113, 114, 123, 141, 142, 151, 160, 163, 167, 173, 174, 189, 196, 209, 216, 229, 247, 275, 276, 291, 304, 309, 310, 313, 314, 318, 320, 325, 329, 335, 469, 477, 596, 614, 631, 632, 633, 636, 641, 642, 643, 644, 823, 824, 943, 958, 975, 976, 990, 995, 998, 999, 1000, 1002, 1006, 1008], "svr": [7, 10, 151, 208, 288, 303, 333, 400, 401, 521, 532, 533, 558, 559, 608, 643, 763, 769, 867, 869, 871, 947, 975, 986, 995, 997, 999, 1000, 1003, 1005, 1006, 1007, 1008, 1009, 1010], "optim": [7, 14, 26, 50, 51, 54, 57, 68, 73, 74, 87, 112, 113, 115, 117, 135, 136, 138, 139, 142, 143, 144, 145, 146, 166, 170, 171, 175, 190, 198, 215, 219, 237, 244, 247, 252, 256, 258, 263, 277, 279, 284, 292, 300, 310, 316, 320, 321, 322, 329, 333, 340, 343, 346, 348, 349, 358, 360, 364, 369, 371, 374, 376, 378, 379, 381, 383, 384, 385, 409, 412, 413, 414, 415, 417, 422, 426, 427, 437, 438, 444, 496, 499, 500, 502, 504, 508, 522, 523, 524, 525, 539, 575, 576, 584, 585, 600, 603, 605, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 637, 638, 639, 641, 642, 643, 645, 646, 647, 648, 649, 652, 655, 657, 659, 660, 666, 687, 694, 763, 777, 808, 809, 810, 812, 814, 815, 816, 817, 818, 823, 824, 842, 854, 858, 859, 866, 867, 868, 869, 870, 871, 872, 946, 947, 948, 949, 950, 951, 954, 955, 956, 957, 958, 959, 968, 969, 970, 973, 978, 983, 990, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1009, 1010, 1011], "few": [7, 15, 19, 36, 43, 49, 91, 111, 117, 141, 144, 145, 171, 180, 182, 184, 200, 215, 216, 225, 241, 242, 246, 276, 279, 283, 288, 289, 290, 291, 292, 293, 294, 295, 297, 316, 322, 333, 341, 342, 343, 346, 348, 359, 361, 365, 368, 371, 372, 374, 378, 379, 381, 383, 384, 402, 414, 526, 527, 553, 556, 620, 657, 660, 859, 903, 922, 950, 951, 953, 954, 957, 958, 967, 969, 970, 978, 979, 986, 987, 988, 1001, 1011], "drawn": [7, 49, 75, 104, 135, 138, 147, 153, 220, 246, 263, 320, 342, 374, 380, 381, 384, 386, 434, 435, 436, 437, 438, 439, 440, 441, 480, 488, 498, 520, 521, 522, 523, 528, 529, 530, 531, 576, 592, 597, 606, 802, 858, 859, 876, 877, 950, 964, 966, 998], "boost": [7, 13, 67, 100, 101, 102, 105, 106, 108, 109, 119, 122, 125, 151, 157, 162, 184, 190, 205, 238, 240, 275, 283, 285, 292, 295, 352, 360, 373, 383, 413, 431, 432, 455, 461, 466, 485, 518, 519, 524, 525, 526, 527, 529, 530, 597, 598, 599, 600, 705, 706, 712, 714, 754, 763, 766, 767, 768, 784, 789, 792, 827, 839, 840, 950, 954, 973, 975, 976, 990, 995, 996, 998, 1000, 1001, 1002, 1004, 1008], "detriment": [7, 135, 334, 383, 950], "plot_influ": 7, "mse_valu": 7, "ax1": [7, 10, 54, 57, 62, 64, 69, 71, 75, 85, 111, 150, 157, 182, 210, 212, 220, 225, 242, 250, 280, 284, 285, 300, 320, 321, 984], "add_subplot": [7, 16, 24, 26, 39, 42, 61, 64, 83, 93, 155, 179, 197, 204, 206, 297, 298, 353, 987], "line1": [7, 12, 205], "tab": [7, 9, 32, 50, 75, 101, 117, 119, 122, 138, 143, 145, 170, 171, 289, 295, 375, 1002], "blue": [7, 9, 13, 20, 21, 25, 32, 75, 85, 87, 101, 104, 108, 116, 117, 119, 122, 124, 134, 143, 145, 159, 162, 170, 171, 178, 180, 205, 213, 233, 234, 239, 275, 284, 289, 295, 299, 343, 374, 379, 1012], "set_xlabel": [7, 10, 42, 50, 57, 68, 69, 71, 83, 85, 92, 112, 147, 149, 150, 153, 155, 156, 157, 159, 171, 177, 179, 180, 182, 184, 197, 198, 214, 239, 241, 245, 250, 251, 254, 256, 264, 279, 280, 284, 300, 321, 322, 324], "y1_label": 7, "set_ylabel": [7, 8, 10, 28, 32, 42, 50, 57, 62, 68, 69, 71, 75, 83, 85, 92, 97, 101, 108, 112, 147, 155, 159, 171, 173, 177, 179, 180, 182, 184, 186, 197, 214, 225, 239, 241, 245, 250, 251, 258, 264, 279, 280, 284, 288, 300, 316, 321, 324, 984], "spine": [7, 15, 32, 193, 279], "set_color": [7, 193], "get_color": 7, "yaxi": [7, 10, 42, 57, 83, 93, 107, 179, 202, 204, 207, 225, 259, 264, 320], "tick_param": [7, 15, 125, 225, 239, 283, 300], "ax2": [7, 54, 57, 62, 64, 75, 85, 111, 150, 157, 182, 210, 220, 225, 242, 250, 269, 280, 284, 285, 300, 320], "frameon": [7, 188], "line2": [7, 12, 205, 317], "orang": [7, 9, 50, 75, 85, 88, 89, 94, 101, 116, 117, 119, 145, 150, 170, 171, 192, 217, 228, 270, 289, 295, 327, 955, 1012], "tick_right": 7, "set_label_posit": 7, "y2_label": 7, "__name__": [7, 16, 24, 58, 149, 182, 184, 216, 219, 223, 234, 241, 281, 301, 320, 321, 322, 353, 358, 839], "prediction_perform": 7, "4948": 7, "2675": 7, "060915": 7, "1847": 7, "3264": 7, "042108": 7, "997": [7, 37, 136], "3383": 7, "034524": 7, "802": [7, 136, 343], "3582": 7, "031661": 7, "0517578125e": 7, "5558": 7, "7313": 7, "000198": [7, 154], "5289": 7, "8022": [7, 360, 438, 1004], "000261": 7, "5193": 7, "8353": 7, "000427": 7, "124": [7, 321, 381, 997], "5131": [7, 1000], "3279": 7, "000653": 7, "178": [7, 136, 343, 352, 475, 810], "5149": 7, "0779": 7, "000891": 7, "4066": 7, "4812": 7, "000171": 7, "3551": 7, "1723": 7, "3445": 7, "2171": 7, "000229": 7, "3433": 7, "0358": 7, "000268": 7, "3456": 7, "0602": 7, "000302": 7, "deduc": 7, "guarante": [7, 8, 26, 75, 76, 117, 154, 190, 213, 258, 259, 279, 321, 329, 335, 340, 354, 355, 374, 378, 379, 382, 411, 501, 610, 623, 624, 633, 637, 639, 641, 643, 652, 659, 780, 783, 806, 807, 844, 846, 849, 851, 852, 853, 854, 855, 856, 857, 859, 860, 873, 946, 950, 951, 953, 957, 962, 966, 970, 987, 1005], "aspect": [7, 55, 80, 87, 142, 155, 202, 209, 248, 268, 314, 333, 334, 335, 346, 360, 361, 374, 456, 623, 624, 970, 978, 1012], "876": [7, 975], "plot_model_complexity_influ": [7, 975], "concentr": [7, 9, 62, 85, 92, 101, 120, 143, 150, 151, 207, 224, 226, 231, 250, 269, 281, 299, 342, 346, 381, 408, 484, 761, 953, 960, 975], "bayesian": [7, 26, 51, 62, 85, 150, 151, 160, 166, 170, 183, 188, 224, 226, 230, 231, 242, 250, 253, 264, 269, 280, 283, 284, 379, 402, 489, 493, 497, 576, 609, 610, 621, 622, 761, 762, 827, 829, 841, 846, 943, 973, 975, 976, 989, 990, 1001, 1008], "mixtur": [7, 9, 32, 41, 52, 54, 62, 85, 150, 170, 227, 228, 250, 269, 295, 341, 342, 360, 374, 379, 380, 384, 588, 763, 973, 974, 975, 989, 990, 995, 999, 1000, 1001, 1002], "doesn": [8, 182, 216, 226, 258, 276, 308, 354, 360, 364, 374, 382, 383, 387, 399, 440, 597, 598, 631, 633, 641, 681, 790, 793, 798, 808, 809, 823, 835, 836, 953, 954, 970, 999, 1012], "t": [8, 11, 12, 16, 17, 25, 26, 32, 36, 37, 39, 40, 41, 49, 51, 55, 66, 68, 73, 74, 75, 77, 79, 85, 88, 89, 94, 96, 97, 101, 104, 105, 113, 114, 115, 116, 117, 121, 122, 136, 139, 141, 142, 143, 146, 147, 151, 154, 155, 156, 157, 161, 163, 166, 169, 176, 179, 180, 181, 182, 183, 200, 201, 203, 204, 205, 206, 216, 217, 226, 229, 231, 238, 239, 258, 259, 271, 272, 276, 288, 291, 292, 294, 297, 298, 300, 304, 305, 308, 309, 313, 320, 321, 322, 327, 328, 329, 333, 334, 340, 341, 343, 346, 348, 350, 352, 354, 359, 360, 364, 365, 372, 373, 374, 375, 377, 378, 379, 381, 382, 383, 387, 391, 397, 399, 402, 412, 413, 415, 421, 428, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 447, 448, 449, 460, 461, 478, 479, 480, 484, 485, 490, 495, 497, 499, 506, 509, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 530, 532, 533, 534, 535, 555, 556, 559, 572, 573, 575, 576, 592, 593, 595, 596, 597, 598, 600, 604, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 655, 657, 660, 661, 669, 675, 681, 682, 690, 700, 701, 719, 720, 721, 731, 752, 753, 758, 759, 763, 766, 767, 777, 790, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 812, 813, 816, 817, 822, 823, 824, 832, 835, 836, 837, 839, 840, 846, 847, 859, 861, 862, 866, 867, 868, 869, 871, 872, 874, 875, 876, 877, 903, 904, 918, 943, 946, 948, 950, 953, 954, 955, 956, 957, 958, 959, 960, 961, 964, 968, 969, 970, 975, 979, 986, 987, 988, 989, 990, 996, 998, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "memori": [8, 51, 67, 68, 91, 154, 155, 261, 285, 288, 290, 292, 293, 320, 321, 322, 334, 335, 340, 346, 349, 355, 358, 360, 374, 375, 378, 379, 382, 385, 386, 406, 407, 408, 409, 410, 411, 412, 414, 415, 419, 422, 424, 433, 438, 444, 461, 468, 473, 474, 498, 499, 500, 503, 520, 521, 522, 523, 528, 529, 530, 531, 546, 547, 553, 554, 556, 611, 612, 613, 617, 618, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 641, 642, 643, 644, 645, 646, 649, 742, 743, 744, 745, 763, 769, 777, 785, 787, 788, 789, 790, 793, 794, 795, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 814, 816, 817, 818, 826, 827, 844, 846, 856, 857, 859, 864, 866, 867, 874, 875, 876, 877, 887, 923, 939, 950, 956, 957, 964, 966, 967, 969, 970, 974, 978, 979, 988, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "partial_fit": [8, 47, 87, 216, 292, 335, 348, 360, 374, 379, 407, 414, 499, 501, 502, 503, 554, 562, 623, 624, 631, 632, 633, 641, 642, 643, 794, 795, 798, 799, 801, 802, 803, 804, 805, 822, 823, 824, 835, 836, 846, 866, 950, 956, 958, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1006, 1008, 1009, 1010, 1011, 1012], "fed": [8, 122, 329, 341, 382, 943, 959, 964, 1006], "batch": [8, 11, 61, 87, 91, 272, 292, 335, 355, 360, 382, 405, 407, 412, 414, 416, 418, 496, 498, 499, 501, 502, 503, 504, 505, 507, 508, 510, 511, 629, 650, 651, 768, 781, 782, 801, 802, 803, 804, 805, 823, 824, 835, 836, 846, 859, 906, 920, 958, 959, 968, 995, 999, 1000, 1003, 1004, 1005, 1006, 1008, 1010, 1011], "remain": [8, 24, 26, 67, 101, 108, 113, 115, 135, 154, 182, 186, 198, 225, 237, 241, 245, 248, 371, 374, 375, 376, 378, 382, 411, 429, 432, 480, 481, 486, 493, 499, 535, 575, 576, 727, 733, 765, 766, 767, 768, 771, 773, 801, 802, 803, 805, 907, 943, 944, 946, 953, 954, 958, 964, 970, 974, 997, 1003, 1009, 1012], "hashingvector": [8, 322, 335, 382, 454, 553, 555, 996, 1002, 1003, 1004, 1005, 1008], "where": [8, 11, 12, 14, 16, 17, 19, 20, 23, 24, 25, 30, 50, 52, 54, 75, 80, 85, 87, 90, 96, 97, 101, 103, 105, 107, 111, 112, 114, 117, 119, 133, 136, 138, 144, 147, 150, 154, 161, 166, 174, 183, 186, 191, 192, 193, 195, 199, 200, 202, 204, 205, 209, 210, 213, 216, 217, 219, 221, 231, 235, 236, 239, 241, 245, 246, 248, 250, 251, 256, 258, 277, 279, 281, 282, 283, 284, 285, 286, 288, 290, 291, 298, 299, 306, 312, 316, 317, 318, 320, 324, 325, 329, 333, 334, 335, 340, 342, 343, 345, 346, 348, 350, 352, 353, 354, 358, 359, 360, 361, 364, 365, 368, 371, 372, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 397, 402, 409, 412, 413, 417, 426, 428, 429, 430, 432, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 452, 461, 496, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 510, 511, 512, 514, 515, 516, 517, 518, 519, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 547, 548, 549, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 571, 574, 575, 576, 578, 580, 584, 587, 588, 590, 592, 593, 594, 595, 597, 598, 599, 600, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 649, 653, 656, 657, 658, 661, 672, 676, 677, 681, 689, 693, 694, 695, 703, 719, 727, 732, 733, 734, 737, 745, 746, 747, 748, 751, 752, 756, 758, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 777, 778, 779, 780, 781, 782, 783, 784, 785, 787, 789, 790, 791, 793, 794, 795, 798, 799, 800, 801, 802, 803, 804, 805, 809, 813, 814, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 829, 836, 839, 841, 842, 845, 846, 852, 854, 860, 861, 862, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 894, 895, 896, 897, 903, 911, 914, 939, 943, 945, 946, 947, 948, 949, 950, 951, 952, 954, 955, 956, 957, 958, 959, 960, 961, 964, 965, 966, 968, 969, 970, 974, 979, 980, 995, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "word": [8, 15, 19, 66, 138, 213, 217, 308, 321, 322, 333, 341, 342, 346, 348, 351, 360, 371, 374, 376, 377, 378, 379, 418, 476, 488, 499, 501, 506, 553, 554, 556, 661, 795, 805, 863, 948, 952, 956, 959, 964, 967, 968, 978, 986, 987, 995, 1003], "federicov": 8, "itertool": [8, 39, 41, 59, 123, 155, 167, 226, 231, 239, 246, 248, 381], "sy": [8, 12, 16, 19, 190, 213, 259, 301, 322, 341, 358, 582], "tarfil": 8, "hashlib": 8, "sha256": [8, 1010], "parser": [8, 13, 117, 288, 292, 461, 1010, 1011], "htmlparser": 8, "pathlib": [8, 1010, 1011], "path": [8, 16, 17, 151, 154, 160, 167, 168, 171, 176, 186, 198, 252, 316, 324, 340, 344, 346, 350, 354, 355, 360, 406, 410, 415, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 473, 474, 513, 522, 523, 528, 529, 530, 531, 558, 559, 562, 611, 612, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 646, 647, 648, 649, 650, 651, 653, 826, 827, 873, 874, 875, 876, 877, 908, 943, 950, 951, 960, 974, 975, 995, 996, 999, 1001, 1002, 1004, 1005, 1007, 1008, 1010, 1011], "urllib": [8, 17], "request": [8, 17, 43, 182, 200, 216, 291, 334, 340, 344, 345, 349, 360, 361, 365, 368, 379, 382, 383, 402, 408, 409, 412, 414, 430, 434, 435, 436, 437, 438, 439, 440, 441, 447, 448, 449, 498, 499, 503, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 546, 547, 553, 555, 556, 559, 564, 565, 575, 576, 597, 600, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 655, 664, 764, 765, 770, 772, 781, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 811, 813, 816, 817, 823, 824, 826, 829, 831, 832, 833, 838, 845, 846, 861, 862, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 910, 911, 913, 954, 957, 977, 988, 1001, 1002, 1003, 1012], "urlretriev": 8, "rcparam": [8, 209, 214, 286], "get_data_hom": 8, "feature_extract": [8, 15, 19, 43, 44, 47, 48, 51, 63, 66, 90, 151, 240, 301, 319, 320, 321, 322, 335, 341, 374, 375, 382, 429, 509, 839, 952, 987, 988, 995, 996, 997, 998, 1001, 1002], "passiveaggressiveclassifi": [8, 189, 333, 335, 950, 955, 996, 999, 1000, 1002, 1003, 1006, 1008, 1013], "perceptron": [8, 29, 120, 129, 140, 151, 189, 192, 198, 220, 273, 281, 282, 302, 313, 318, 335, 358, 382, 479, 480, 487, 631, 641, 792, 822, 823, 824, 827, 846, 952, 955, 959, 968, 975, 976, 990, 999, 1001, 1002, 1003, 1007], "naive_bay": [8, 23, 24, 26, 29, 120, 124, 240, 241, 320, 329, 335, 341, 381, 402, 534, 827, 948, 955, 956, 988, 996, 997, 999, 1000, 1001, 1002], "multinomialnb": [8, 335, 341, 382, 801, 802, 803, 804, 956, 988, 997, 999, 1002, 1003, 1007, 1008, 1010], "_not_in_sphinx": [8, 10], "hack": [8, 10], "whether": [8, 10, 13, 16, 67, 99, 118, 141, 144, 146, 154, 155, 182, 186, 200, 203, 210, 216, 237, 279, 328, 329, 334, 341, 344, 345, 346, 348, 350, 351, 352, 360, 365, 374, 375, 376, 378, 379, 381, 383, 386, 405, 407, 416, 418, 419, 424, 429, 430, 434, 435, 436, 437, 438, 439, 440, 441, 443, 447, 448, 449, 450, 452, 453, 456, 457, 461, 462, 468, 473, 474, 479, 487, 492, 496, 497, 502, 503, 504, 505, 507, 510, 511, 513, 517, 520, 521, 522, 523, 526, 527, 528, 529, 530, 531, 546, 553, 554, 555, 556, 562, 567, 571, 572, 573, 574, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 592, 594, 596, 597, 598, 600, 601, 602, 603, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 655, 659, 660, 662, 663, 665, 667, 669, 677, 706, 725, 731, 738, 742, 746, 753, 763, 766, 767, 768, 769, 777, 781, 782, 785, 786, 789, 790, 792, 795, 797, 800, 801, 802, 803, 805, 808, 809, 810, 812, 814, 816, 817, 818, 819, 820, 823, 824, 830, 847, 853, 866, 867, 868, 869, 870, 871, 872, 878, 880, 884, 886, 887, 888, 890, 902, 903, 910, 911, 927, 938, 942, 943, 944, 949, 950, 954, 959, 960, 966, 968, 969, 978, 1002, 1003, 1004, 1012], "builder": [8, 10, 316, 350], "__file__": [8, 10, 1008], "global": [8, 10, 39, 54, 87, 182, 202, 203, 223, 248, 276, 289, 329, 333, 334, 352, 358, 360, 373, 374, 384, 407, 417, 427, 433, 555, 591, 597, 653, 656, 657, 660, 672, 693, 694, 702, 747, 748, 751, 752, 781, 847, 862, 864, 922, 924, 943, 951, 954, 960, 964, 970, 978, 1003, 1010], "21578": [8, 1008], "uci": [8, 136, 284, 340, 343, 465, 467, 469, 475], "ml": [8, 136, 256, 340, 343, 351, 465, 467, 475, 950, 952, 973, 974, 978], "uncompress": [8, 473, 474, 988], "reuterspars": 8, "util": [8, 10, 11, 45, 52, 53, 58, 82, 99, 101, 122, 182, 184, 190, 198, 204, 212, 216, 218, 228, 245, 247, 259, 281, 288, 300, 308, 312, 320, 334, 340, 341, 344, 346, 347, 348, 349, 358, 359, 360, 370, 374, 375, 378, 379, 382, 402, 408, 409, 412, 414, 418, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 447, 448, 449, 498, 499, 503, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 542, 546, 547, 553, 555, 556, 559, 575, 576, 600, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 655, 763, 764, 765, 770, 772, 781, 786, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 811, 813, 816, 817, 823, 824, 826, 829, 831, 832, 833, 838, 845, 846, 861, 862, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 943, 949, 952, 954, 955, 964, 965, 973, 978, 980, 990, 995, 996, 998, 999, 1001, 1002], "pars": [8, 17, 333, 340, 341, 347, 473], "sgml": [8, 333], "file": [8, 12, 16, 30, 45, 320, 321, 333, 334, 335, 340, 341, 343, 344, 346, 350, 351, 352, 354, 358, 368, 375, 379, 452, 458, 459, 461, 468, 473, 474, 499, 544, 545, 553, 554, 556, 878, 957, 970, 975, 977, 980, 995, 996, 998, 1001, 1002, 1003, 1004, 1007, 1008, 1009, 1010, 1011], "yield": [8, 9, 24, 42, 52, 73, 74, 75, 76, 114, 166, 177, 182, 197, 200, 244, 258, 274, 279, 305, 310, 320, 321, 329, 333, 335, 340, 351, 360, 371, 374, 376, 378, 379, 381, 382, 383, 402, 414, 433, 437, 473, 474, 502, 503, 504, 506, 511, 518, 519, 524, 525, 526, 527, 532, 533, 559, 567, 612, 616, 617, 618, 620, 626, 628, 630, 638, 640, 651, 690, 745, 752, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 789, 790, 791, 793, 797, 800, 858, 859, 897, 904, 906, 907, 912, 946, 948, 950, 951, 954, 969, 970, 983, 1000, 1001, 1003, 1006, 1008], "__init__": [8, 16, 53, 99, 146, 216, 259, 308, 346, 348, 350, 351, 352, 353, 360, 382, 388, 391, 394, 397, 398, 583, 915, 996, 1001, 1003, 1008, 1009, 1010, 1011], "self": [8, 16, 19, 24, 26, 53, 62, 99, 146, 151, 216, 259, 296, 302, 308, 320, 340, 346, 347, 348, 351, 352, 353, 354, 374, 382, 384, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 402, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 429, 430, 434, 435, 436, 437, 438, 439, 440, 441, 447, 448, 449, 450, 465, 473, 474, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 546, 547, 548, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 600, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 653, 654, 655, 656, 657, 668, 761, 762, 763, 764, 765, 766, 767, 770, 772, 777, 781, 782, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 822, 823, 824, 825, 826, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 858, 859, 861, 862, 863, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 911, 912, 914, 915, 920, 928, 957, 974, 975, 976, 978, 990, 997, 1002, 1009], "latin": [8, 382], "_reset": 8, "handle_starttag": 8, "tag": [8, 46, 67, 209, 299, 340, 345, 349, 350, 354, 358, 360, 370, 382, 391, 397, 461, 794, 974, 977, 1000, 1004, 1005, 1006, 1009, 1010, 1011, 1012], "attr": [8, 53], "start_": 8, "handle_endtag": 8, "end_": 8, "in_titl": 8, "in_bodi": 8, "in_top": 8, "in_topic_d": 8, "bodi": [8, 66, 136, 220, 293, 343], "topic_d": 8, "fd": 8, "chunk": [8, 47, 333, 334, 374, 379, 385, 409, 414, 433, 503, 742, 745, 794, 795, 801, 802, 803, 804, 805, 864, 956, 1002, 1003, 1004, 1005, 1006], "feed": [8, 80, 183, 322, 341, 351, 358, 374, 382, 706, 839, 955], "decod": [8, 272, 341, 360, 468, 534, 553, 554, 556, 995, 996], "close": [8, 12, 17, 23, 24, 26, 35, 36, 43, 51, 57, 63, 73, 74, 77, 92, 104, 111, 114, 118, 122, 138, 139, 142, 143, 144, 145, 146, 154, 156, 166, 186, 188, 203, 209, 215, 219, 225, 231, 239, 240, 265, 266, 279, 288, 308, 312, 313, 321, 329, 341, 346, 348, 354, 358, 360, 361, 372, 373, 374, 377, 378, 381, 384, 415, 420, 437, 473, 474, 497, 528, 593, 608, 612, 626, 637, 639, 652, 670, 710, 761, 781, 782, 801, 802, 803, 805, 812, 887, 943, 947, 948, 950, 951, 953, 954, 955, 957, 960, 961, 964, 969, 973, 978, 986, 998, 1002, 1003, 1004], "handle_data": 8, "start_reut": 8, "attribut": [8, 24, 30, 46, 67, 95, 99, 101, 108, 109, 112, 132, 136, 182, 190, 216, 230, 237, 238, 243, 251, 268, 272, 291, 312, 322, 328, 335, 339, 340, 341, 343, 346, 349, 353, 358, 370, 371, 372, 374, 375, 376, 377, 379, 381, 382, 383, 384, 389, 390, 391, 392, 393, 396, 397, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 429, 430, 434, 435, 436, 437, 438, 439, 440, 441, 447, 448, 449, 450, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 472, 475, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 653, 654, 655, 656, 657, 662, 663, 665, 666, 667, 700, 759, 761, 762, 763, 766, 767, 769, 777, 785, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 858, 859, 861, 862, 863, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 878, 880, 881, 915, 938, 946, 948, 950, 955, 957, 958, 960, 964, 967, 968, 969, 970, 978, 979, 985, 988, 992, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "end_reut": 8, "sub": [8, 34, 45, 50, 52, 54, 57, 66, 96, 216, 218, 225, 290, 297, 298, 305, 308, 317, 341, 346, 348, 352, 360, 375, 381, 382, 402, 408, 409, 412, 414, 430, 434, 435, 436, 437, 438, 439, 440, 441, 447, 448, 449, 498, 499, 501, 503, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 546, 547, 553, 555, 556, 559, 562, 575, 576, 592, 600, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 655, 764, 765, 770, 772, 781, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 811, 813, 816, 817, 823, 824, 825, 826, 829, 831, 832, 833, 838, 845, 846, 861, 862, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 912, 950, 954, 968, 988, 1005, 1009, 1011, 1012], "start_titl": 8, "end_titl": 8, "start_bodi": 8, "end_bodi": 8, "start_top": 8, "end_top": 8, "start_d": 8, "end_d": 8, "stream_reuters_docu": 8, "data_path": 8, "iter": [8, 15, 17, 29, 43, 68, 77, 87, 90, 101, 104, 107, 110, 112, 113, 115, 116, 117, 136, 147, 149, 151, 161, 162, 190, 197, 227, 228, 232, 234, 247, 250, 274, 276, 277, 281, 290, 298, 300, 301, 308, 346, 348, 352, 354, 355, 359, 360, 369, 374, 377, 379, 381, 383, 386, 402, 405, 406, 408, 410, 412, 413, 414, 417, 419, 424, 426, 427, 428, 436, 437, 443, 447, 448, 449, 480, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 518, 519, 524, 525, 526, 527, 529, 532, 533, 546, 547, 553, 554, 556, 558, 559, 567, 575, 592, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 793, 794, 795, 797, 800, 815, 822, 823, 824, 825, 826, 830, 837, 839, 841, 861, 862, 863, 866, 867, 868, 869, 870, 871, 872, 881, 902, 903, 909, 910, 911, 912, 920, 944, 950, 951, 953, 954, 957, 958, 959, 967, 968, 969, 970, 974, 975, 978, 983, 987, 988, 990, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012], "archiv": [8, 256, 340, 341, 343, 344, 368, 374, 407, 465, 467, 475, 722, 723, 952, 969, 988], "exist": [8, 9, 13, 17, 19, 50, 200, 239, 276, 279, 312, 340, 345, 348, 349, 352, 358, 360, 361, 364, 368, 374, 378, 379, 381, 382, 389, 399, 402, 408, 409, 412, 414, 416, 418, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 447, 448, 449, 464, 498, 499, 503, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 546, 547, 550, 553, 554, 555, 556, 559, 562, 568, 575, 576, 597, 598, 600, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 655, 663, 665, 667, 726, 729, 733, 764, 765, 768, 770, 771, 772, 773, 776, 778, 779, 780, 781, 782, 783, 784, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 811, 813, 816, 817, 823, 824, 826, 829, 831, 832, 833, 838, 839, 840, 845, 846, 861, 862, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 938, 946, 951, 953, 954, 958, 960, 961, 964, 978, 987, 995, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "str": [8, 10, 16, 55, 57, 95, 97, 110, 200, 219, 239, 251, 259, 269, 306, 320, 340, 341, 355, 382, 385, 386, 390, 395, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 414, 415, 417, 422, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 492, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 541, 546, 547, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 575, 576, 582, 592, 593, 594, 595, 596, 597, 598, 599, 600, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 653, 654, 655, 657, 661, 662, 663, 664, 665, 667, 672, 674, 676, 678, 691, 693, 694, 696, 697, 702, 706, 735, 738, 742, 743, 744, 745, 746, 747, 748, 751, 753, 756, 757, 763, 764, 765, 766, 767, 769, 770, 772, 774, 775, 777, 781, 785, 787, 788, 789, 790, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 858, 859, 861, 862, 864, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 878, 879, 880, 882, 885, 886, 887, 890, 893, 895, 899, 910, 911, 912, 914, 917, 938, 939, 942, 1010], "kei": [8, 10, 13, 17, 19, 39, 107, 111, 122, 149, 153, 200, 216, 219, 222, 240, 242, 243, 289, 290, 291, 292, 293, 294, 295, 335, 339, 348, 351, 352, 353, 358, 360, 361, 364, 365, 374, 375, 378, 384, 429, 437, 526, 527, 532, 533, 534, 535, 553, 556, 559, 582, 591, 597, 598, 599, 624, 676, 763, 766, 767, 775, 777, 789, 825, 826, 881, 891, 919, 962, 974, 988, 992, 1001, 1007, 1008, 1010, 1011], "download_url": 8, "ic": [8, 256, 290, 340, 343, 363, 465, 467, 475, 597, 598, 990, 1007, 1008], "databas": [8, 136, 284, 333, 335, 341, 343, 374, 379, 381, 382, 385, 407, 409, 475, 520, 521, 859, 966], "reuters21578": 8, "mld": 8, "tar": [8, 350], "gz": [8, 350, 364, 473, 474], "archive_sha256": 8, "3bae43c9b14e387f76a61b6d82bf98a4fb5d3ef99ef7e7075ff2ccbcf59f9d30": 8, "archive_filenam": 8, "mkdir": [8, 352, 354], "parent": [8, 153, 216, 346, 350, 360, 374, 407, 428, 911, 912, 995, 1012], "exist_ok": 8, "blocknum": 8, "total_sz_mb": 8, "mb": [8, 213, 320, 322, 341, 352, 461, 868, 869, 870, 871, 872, 969, 975, 991], "1e6": [8, 10, 175, 213, 320, 322, 333, 501, 860, 954, 966], "current_sz_mb": 8, "stdout": [8, 87, 190, 795, 815, 823, 824], "write": [8, 17, 150, 216, 320, 333, 334, 340, 344, 345, 349, 350, 351, 352, 354, 355, 358, 360, 370, 375, 379, 382, 965, 974, 988, 996, 1008, 1012], "rdownload": 8, "archive_path": 8, "filenam": [8, 17, 301, 341, 352, 368, 453, 465, 468, 469, 472, 553, 554, 556, 988, 995, 1000, 1003, 1004], "reporthook": 8, "tamper": 8, "assert": [8, 17, 45, 88, 213, 239, 248, 334, 349, 974], "read_byt": 8, "hexdigest": 8, "untar": 8, "open": [8, 12, 17, 204, 340, 341, 344, 345, 346, 350, 352, 358, 359, 361, 368, 375, 382, 452, 461, 473, 474, 944, 973, 978, 982, 998, 1002, 1003, 1005, 1011], "fp": [8, 374, 677, 683, 693, 694, 695, 746, 747, 748, 751, 954], "extractal": 8, "filter": [8, 15, 43, 44, 69, 188, 200, 237, 239, 261, 320, 334, 341, 352, 355, 373, 374, 382, 413, 453, 454, 468, 553, 556, 560, 561, 562, 563, 564, 565, 738, 801, 895, 919, 956, 957, 985, 988, 1005], "glob": 8, "sgm": 8, "rb": 8, "decode_error": [8, 382, 468, 553, 554, 556, 997], "alternate_sign": [8, 382, 547, 554, 1002], "data_stream": 8, "binari": [8, 14, 24, 26, 105, 107, 118, 120, 133, 146, 154, 159, 173, 175, 182, 190, 203, 210, 219, 222, 236, 237, 242, 248, 254, 256, 263, 308, 312, 314, 328, 329, 340, 341, 342, 348, 350, 351, 360, 364, 368, 371, 372, 373, 374, 381, 382, 384, 402, 403, 404, 417, 452, 465, 473, 474, 485, 488, 514, 515, 518, 520, 524, 526, 531, 532, 533, 546, 553, 554, 556, 558, 559, 567, 575, 592, 593, 594, 595, 596, 597, 598, 623, 624, 631, 633, 638, 639, 640, 641, 665, 668, 672, 673, 674, 677, 678, 680, 683, 685, 691, 693, 694, 698, 699, 702, 703, 704, 705, 706, 707, 746, 747, 748, 751, 752, 753, 758, 760, 763, 764, 766, 767, 768, 769, 777, 781, 785, 786, 787, 788, 789, 790, 791, 793, 794, 795, 796, 797, 798, 801, 812, 822, 833, 837, 839, 847, 850, 866, 868, 871, 917, 944, 955, 956, 957, 958, 959, 961, 962, 964, 965, 966, 968, 969, 970, 979, 992, 996, 998, 999, 1000, 1002, 1003, 1004, 1005, 1009, 1010, 1012], "acq": 8, "chosen": [8, 20, 43, 69, 122, 139, 154, 155, 171, 183, 199, 217, 233, 234, 236, 242, 321, 329, 333, 358, 374, 376, 377, 381, 384, 405, 411, 414, 416, 418, 419, 425, 461, 488, 500, 522, 523, 524, 525, 526, 527, 529, 530, 612, 618, 621, 623, 624, 626, 628, 636, 641, 642, 643, 644, 645, 655, 659, 758, 761, 762, 763, 766, 767, 777, 796, 815, 866, 867, 874, 875, 876, 877, 903, 943, 946, 948, 950, 951, 953, 955, 960, 961, 968, 983, 984, 986, 987, 1003, 1011, 1012], "evenli": [8, 36, 49, 114, 157, 186, 234, 382, 907, 988], "care": [8, 52, 115, 256, 312, 333, 335, 350, 352, 358, 360, 361, 374, 376, 382, 402, 425, 434, 605, 623, 624, 631, 632, 633, 641, 642, 643, 660, 866, 951, 969, 978, 1011], "all_class": 8, "positive_class": [8, 677], "partial_fit_classifi": 8, "nb": [8, 94, 120, 329, 803, 956], "multinomi": [8, 28, 151, 160, 173, 191, 197, 217, 234, 248, 276, 341, 342, 346, 379, 381, 461, 477, 488, 516, 518, 524, 526, 534, 596, 623, 624, 705, 792, 800, 801, 802, 803, 804, 805, 846, 889, 954, 955, 970, 975, 976, 988, 990, 995, 999, 1001, 1002, 1003, 1008, 1009], "passiv": [8, 189, 631, 632, 976, 990, 996], "aggress": [8, 189, 631, 632, 766, 767, 976, 990, 996], "get_minibatch": 8, "doc_it": 8, "pos_class": 8, "minibatch": [8, 41, 374, 379, 414, 499, 641, 822, 823, 824, 973, 995], "tupl": [8, 13, 45, 46, 52, 96, 155, 200, 339, 340, 341, 348, 360, 378, 386, 399, 416, 418, 429, 432, 447, 448, 449, 450, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 465, 466, 467, 469, 470, 473, 475, 476, 477, 478, 479, 487, 498, 526, 527, 532, 533, 534, 535, 547, 548, 549, 552, 553, 554, 556, 592, 597, 598, 599, 676, 677, 684, 706, 745, 747, 761, 763, 777, 789, 806, 807, 825, 826, 836, 837, 841, 844, 852, 856, 868, 869, 870, 871, 872, 881, 887, 888, 890, 894, 895, 896, 897, 912, 921, 938, 961, 1001, 1002, 1006, 1007, 1008, 1013], "x_text": 8, "befor": [8, 12, 24, 39, 66, 68, 71, 80, 112, 117, 122, 132, 145, 147, 148, 149, 151, 154, 155, 157, 163, 166, 170, 171, 175, 216, 239, 246, 261, 262, 280, 283, 284, 286, 291, 311, 329, 333, 334, 341, 344, 346, 348, 349, 351, 352, 354, 355, 358, 360, 361, 363, 364, 368, 370, 372, 374, 375, 376, 378, 379, 383, 386, 387, 408, 412, 413, 414, 424, 426, 430, 434, 435, 436, 437, 438, 439, 440, 441, 442, 444, 445, 447, 448, 449, 450, 455, 466, 499, 502, 503, 504, 505, 506, 509, 511, 512, 526, 527, 530, 532, 534, 535, 542, 553, 554, 556, 576, 592, 593, 595, 610, 631, 632, 633, 636, 641, 643, 652, 657, 659, 761, 762, 768, 769, 781, 782, 784, 788, 790, 792, 806, 807, 814, 815, 816, 817, 818, 821, 826, 827, 830, 833, 840, 844, 845, 846, 847, 851, 852, 854, 855, 856, 857, 863, 874, 875, 903, 938, 944, 950, 951, 954, 960, 964, 968, 969, 970, 974, 975, 988, 995, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "exclud": [8, 13, 19, 153, 279, 346, 350, 360, 411, 429, 431, 693, 694, 702, 747, 748, 751, 776, 784, 841, 929, 954, 957, 1004, 1011], "invalid": [8, 182, 360, 411, 543, 636, 677, 738, 950, 954, 1001, 1003, 1005, 1006, 1008, 1009, 1011], "assign": [8, 17, 20, 32, 34, 43, 46, 54, 55, 57, 101, 106, 118, 120, 132, 140, 195, 200, 209, 214, 217, 274, 281, 286, 302, 316, 321, 341, 346, 348, 360, 371, 378, 379, 381, 382, 383, 384, 405, 406, 407, 408, 410, 411, 412, 413, 414, 417, 419, 421, 424, 425, 426, 427, 480, 501, 526, 527, 558, 559, 572, 573, 575, 623, 624, 631, 632, 633, 641, 642, 643, 669, 670, 680, 681, 682, 685, 693, 694, 695, 702, 703, 707, 719, 721, 747, 748, 750, 751, 757, 758, 759, 763, 766, 767, 769, 772, 777, 785, 787, 788, 789, 790, 793, 810, 816, 818, 819, 820, 833, 861, 862, 866, 867, 868, 869, 870, 871, 872, 948, 950, 953, 954, 955, 956, 957, 958, 959, 964, 967, 978, 979, 988, 995, 1000, 1002, 1003, 1012], "format": [8, 11, 12, 13, 19, 21, 45, 51, 55, 58, 66, 75, 87, 96, 104, 110, 113, 115, 127, 131, 132, 159, 162, 168, 173, 182, 200, 234, 244, 246, 247, 250, 253, 263, 264, 267, 268, 283, 288, 315, 324, 328, 333, 339, 345, 346, 348, 349, 354, 355, 359, 360, 375, 378, 381, 382, 398, 407, 408, 410, 412, 414, 415, 417, 424, 429, 433, 447, 448, 449, 450, 452, 454, 461, 462, 463, 473, 474, 475, 488, 492, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 514, 516, 522, 523, 529, 530, 531, 532, 533, 534, 535, 546, 547, 548, 549, 552, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 592, 593, 594, 595, 600, 603, 604, 605, 606, 607, 611, 617, 623, 624, 625, 627, 631, 632, 633, 641, 642, 643, 653, 654, 657, 662, 678, 685, 703, 704, 715, 732, 755, 756, 795, 808, 809, 810, 812, 814, 815, 816, 817, 818, 819, 820, 821, 822, 825, 826, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 853, 858, 859, 864, 866, 878, 886, 887, 908, 916, 920, 925, 928, 930, 931, 932, 933, 934, 935, 940, 944, 954, 957, 962, 964, 965, 968, 970, 973, 979, 980, 990, 995, 996, 997, 998, 1000, 1001, 1002, 1003, 1004, 1006, 1008, 1010, 1012, 1013], "islic": [8, 41, 59], "asarrai": [8, 17, 182, 200, 277, 299, 320, 321, 348, 360, 370, 690, 720, 814, 816, 817, 818, 964, 969, 1012], "int": [8, 10, 13, 14, 16, 17, 19, 34, 41, 59, 76, 104, 113, 117, 118, 128, 129, 139, 140, 141, 147, 150, 153, 163, 173, 175, 182, 200, 207, 209, 215, 219, 225, 234, 237, 238, 239, 259, 264, 266, 272, 286, 298, 322, 341, 346, 348, 358, 360, 372, 375, 378, 382, 385, 386, 389, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 447, 448, 449, 450, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 467, 468, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 546, 547, 548, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 572, 573, 575, 576, 582, 592, 593, 594, 595, 596, 597, 598, 599, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 665, 666, 667, 668, 669, 670, 672, 674, 678, 690, 691, 693, 694, 695, 698, 702, 720, 721, 733, 738, 742, 743, 744, 745, 746, 747, 748, 751, 753, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 878, 879, 880, 882, 886, 887, 889, 890, 902, 903, 905, 906, 907, 908, 919, 923, 925, 928, 933, 934, 950, 961, 995, 1001, 1005, 1006], "iter_minibatch": 8, "minibatch_s": [8, 335], "statist": [8, 13, 76, 101, 104, 105, 116, 127, 128, 129, 131, 135, 136, 151, 153, 154, 155, 156, 166, 170, 186, 232, 236, 238, 241, 248, 256, 258, 279, 285, 290, 329, 339, 341, 343, 346, 352, 360, 372, 374, 375, 376, 378, 379, 381, 383, 399, 434, 439, 458, 459, 481, 482, 483, 485, 487, 506, 518, 524, 525, 527, 569, 570, 571, 574, 592, 595, 599, 600, 609, 614, 621, 655, 659, 661, 675, 681, 686, 687, 688, 695, 707, 752, 763, 779, 796, 823, 824, 842, 843, 844, 846, 851, 854, 855, 857, 871, 874, 875, 929, 943, 944, 948, 950, 951, 953, 954, 955, 956, 961, 962, 964, 968, 969, 970, 971, 972, 975, 980, 986, 987, 1000, 1003, 1006, 1007, 1009, 1010], "test_stat": 8, "n_test": [8, 10, 31, 104, 239, 995, 998], "n_test_po": 8, "hold": [8, 13, 16, 25, 26, 182, 186, 240, 328, 339, 346, 347, 348, 360, 372, 374, 378, 381, 382, 384, 468, 522, 526, 529, 554, 597, 598, 599, 700, 763, 766, 767, 777, 802, 833, 834, 839, 840, 847, 850, 874, 876, 944, 948, 954, 958, 968, 969, 970, 979, 988, 1003, 1007], "n_test_docu": 8, "tick": [8, 40, 57, 141, 220, 250, 597, 790], "x_test_text": 8, "parsing_tim": 8, "vectorizing_tim": 8, "sum": [8, 17, 19, 25, 58, 76, 85, 90, 96, 113, 114, 132, 136, 146, 154, 163, 169, 178, 182, 186, 197, 200, 203, 205, 219, 248, 259, 266, 269, 292, 301, 312, 313, 316, 320, 321, 322, 328, 343, 352, 360, 371, 372, 373, 374, 376, 377, 379, 380, 381, 382, 384, 397, 407, 408, 412, 414, 424, 429, 430, 447, 448, 449, 480, 485, 488, 496, 499, 501, 502, 506, 509, 510, 511, 514, 515, 517, 519, 521, 522, 523, 524, 525, 526, 527, 529, 530, 531, 533, 534, 535, 555, 556, 576, 578, 588, 590, 600, 606, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 637, 638, 641, 642, 643, 644, 646, 649, 655, 659, 661, 664, 674, 675, 684, 690, 705, 720, 722, 723, 727, 752, 794, 795, 799, 800, 809, 813, 817, 824, 825, 845, 846, 866, 867, 869, 872, 874, 875, 876, 877, 905, 929, 935, 940, 950, 954, 955, 956, 957, 969, 970, 986, 998, 999, 1001, 1003, 1004, 1006, 1011, 1012], "cls_name": [8, 10], "string": [8, 67, 110, 146, 200, 211, 243, 291, 322, 333, 340, 341, 346, 347, 348, 352, 360, 368, 375, 378, 381, 382, 383, 385, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 422, 429, 430, 432, 434, 435, 436, 437, 438, 439, 440, 441, 447, 448, 449, 450, 452, 454, 455, 461, 470, 492, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 546, 547, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 575, 576, 582, 585, 592, 593, 594, 595, 596, 597, 598, 599, 600, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 653, 654, 655, 656, 657, 664, 674, 676, 684, 696, 726, 729, 735, 738, 742, 743, 744, 745, 756, 757, 761, 762, 763, 766, 767, 769, 777, 785, 789, 794, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 858, 859, 861, 862, 863, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 878, 884, 886, 887, 894, 895, 896, 912, 918, 922, 938, 939, 943, 944, 954, 967, 969, 979, 986, 995, 996, 997, 998, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "n_train": [8, 10, 31, 104, 239, 995, 998], "6d": 8, "n_train_po": 8, "5d": 8, "cls_stat": 8, "accuracy_histori": 8, "runtime_histori": 8, "total_fit_tim": 8, "discard": [8, 52, 163, 242, 333, 371, 376, 383, 473, 474, 514, 562, 592, 595, 609, 839, 843, 855, 944, 950, 1003, 1007], "mini": [8, 61, 87, 292, 335, 360, 382, 405, 407, 412, 414, 416, 418, 496, 498, 501, 502, 503, 504, 505, 507, 508, 510, 511, 958, 959, 995, 1006, 1008], "smaller": [8, 23, 37, 43, 52, 77, 101, 117, 136, 143, 144, 147, 149, 167, 171, 173, 186, 213, 256, 265, 266, 274, 279, 308, 316, 321, 346, 371, 373, 374, 376, 378, 379, 381, 383, 404, 405, 411, 415, 419, 421, 479, 499, 500, 522, 523, 524, 525, 526, 527, 529, 530, 558, 575, 584, 598, 611, 612, 614, 615, 617, 618, 619, 621, 623, 624, 625, 626, 627, 628, 637, 639, 647, 648, 657, 674, 761, 766, 767, 812, 815, 839, 840, 858, 859, 866, 874, 875, 876, 877, 903, 948, 950, 951, 953, 954, 955, 957, 958, 960, 964, 966, 968, 969, 970, 974, 988, 1003, 1008, 1012], "bigger": [8, 37, 57, 195, 239, 277, 312, 318, 321, 332, 334, 382, 403, 404, 473, 503, 812, 983, 990], "overhead": [8, 259, 334, 335, 346, 352, 355, 358, 360, 381, 406, 410, 414, 499, 664, 798, 799, 801, 802, 803, 804, 805, 806, 807, 922, 956, 957, 998, 1003, 1004, 1007], "stream": [8, 374, 379, 382, 427, 554, 835, 836, 846, 946, 973, 1003, 1006], "minibatch_iter": 8, "total_vect_tim": 8, "x_train_text": 8, "item": [8, 9, 10, 11, 12, 13, 17, 19, 28, 40, 52, 71, 105, 107, 111, 114, 122, 154, 180, 184, 190, 203, 215, 216, 218, 227, 236, 242, 292, 298, 321, 339, 346, 347, 348, 355, 375, 429, 491, 526, 527, 553, 554, 556, 597, 775, 839, 861, 862, 881, 882, 908, 946, 967, 974, 979], "updat": [8, 16, 41, 59, 101, 107, 116, 214, 288, 322, 344, 345, 346, 350, 354, 360, 374, 379, 381, 388, 402, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 428, 430, 434, 435, 436, 437, 438, 439, 440, 441, 443, 447, 448, 449, 450, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 546, 547, 548, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 600, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 653, 654, 655, 656, 657, 761, 762, 763, 764, 765, 766, 767, 770, 772, 777, 781, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 822, 823, 824, 826, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 858, 859, 861, 862, 863, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 881, 929, 950, 957, 958, 959, 968, 977, 978, 996, 1002, 1003, 1004, 1006, 1008, 1010, 1011, 1013], "accumul": [8, 47, 108, 109, 171, 350, 352, 374, 382, 954, 996, 1003], "acc_histori": 8, "run_histori": 8, "878": 8, "962": 8, "915": 8, "61": [8, 13, 76, 155, 200, 340, 343, 352, 375, 423, 506, 525, 611, 612, 617, 625, 626, 627, 646, 678, 904], "1575": 8, "855": 8, "1567": 8, "877": [8, 237], "62": [8, 13, 155, 159, 200, 233, 293, 298, 329, 341, 458, 459, 806, 807, 991, 998], "1547": 8, "933": [8, 70, 378], "1540": 8, "3911": 8, "517": [8, 51, 417, 427, 975, 986], "938": [8, 178, 749, 954, 983], "2245": 8, "936": [8, 402, 954], "2242": 8, "885": [8, 136, 343], "2232": 8, "941": 8, "2229": 8, "6821": 8, "891": 8, "952": [8, 46], "2392": 8, "2390": 8, "900": [8, 47, 70, 71], "86": [8, 13, 30, 66, 133, 173, 219, 234, 281, 297, 298, 752, 874, 954, 984], "2384": 8, "953": [8, 46], "2382": 8, "9759": 8, "1276": 8, "949": 8, "98": [8, 30, 39, 41, 51, 59, 61, 77, 90, 136, 209, 237, 274, 281, 298, 343, 350, 378, 381, 624, 801, 857, 949, 956, 983, 988], "2451": 8, "2449": [8, 352], "909": 8, "2444": 8, "958": 8, "2442": 8, "11680": 8, "1499": 8, "944": [8, 134, 975, 983], "2355": 8, "956": [8, 983], "2354": 8, "97": [8, 13, 30, 96, 136, 157, 217, 231, 298, 308, 343, 352, 359, 378, 611, 612, 617, 623, 625, 626, 627, 646, 647, 648, 949, 955, 964, 995], "2350": 8, "950": [8, 209, 975], "2349": 8, "14625": 8, "1865": 8, "965": [8, 954], "2397": 8, "903": 8, "2396": 8, "924": [8, 317, 975], "2393": 8, "957": [8, 692, 954], "17360": [8, 1006], "2179": 8, "2433": 8, "2432": 8, "2429": 8, "2428": 8, "curv": [8, 11, 22, 23, 25, 34, 71, 73, 104, 106, 107, 113, 118, 151, 160, 161, 172, 182, 200, 202, 204, 207, 208, 210, 212, 219, 220, 224, 225, 226, 227, 229, 230, 232, 239, 249, 275, 280, 283, 288, 308, 312, 326, 353, 369, 373, 378, 380, 402, 403, 404, 467, 475, 480, 486, 490, 529, 597, 610, 623, 663, 665, 667, 671, 672, 673, 674, 691, 693, 705, 706, 746, 748, 751, 752, 753, 761, 762, 769, 780, 785, 790, 792, 793, 804, 827, 846, 866, 871, 950, 951, 953, 954, 960, 970, 975, 976, 978, 990, 992, 997, 998, 1001, 1005, 1007, 1008, 1009, 1010, 1011], "evolut": [8, 10, 251, 333, 335], "cours": [8, 9, 159, 333, 346, 348, 379, 382, 383, 944, 949, 950, 978], "valid": [8, 13, 14, 25, 26, 51, 52, 53, 54, 67, 68, 70, 71, 73, 77, 94, 99, 105, 107, 110, 111, 112, 113, 114, 117, 118, 126, 130, 133, 134, 136, 146, 151, 154, 156, 160, 166, 168, 170, 176, 182, 184, 190, 200, 210, 216, 218, 222, 227, 230, 232, 236, 239, 240, 241, 243, 245, 246, 247, 248, 251, 252, 253, 256, 263, 277, 280, 285, 288, 290, 295, 300, 308, 316, 324, 334, 341, 346, 349, 358, 359, 360, 368, 369, 372, 374, 375, 376, 379, 380, 381, 382, 383, 388, 390, 402, 407, 408, 410, 411, 412, 414, 415, 422, 428, 429, 433, 436, 437, 438, 439, 440, 441, 443, 447, 448, 449, 450, 458, 466, 467, 469, 480, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 512, 514, 522, 523, 524, 525, 526, 527, 529, 530, 531, 532, 533, 534, 535, 537, 540, 542, 547, 548, 554, 558, 559, 562, 567, 597, 599, 603, 604, 605, 606, 607, 608, 611, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 653, 654, 657, 664, 666, 667, 671, 678, 692, 726, 729, 738, 742, 743, 744, 749, 756, 757, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 797, 800, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 822, 823, 824, 825, 826, 827, 829, 830, 832, 838, 846, 858, 859, 861, 862, 864, 866, 868, 871, 873, 874, 875, 876, 877, 886, 887, 888, 889, 890, 897, 909, 911, 914, 944, 953, 954, 955, 957, 958, 962, 964, 966, 968, 969, 970, 973, 974, 975, 978, 979, 982, 990, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "consumpt": [8, 333, 360, 374, 499, 522, 523, 529, 530, 763, 777, 787, 788, 789, 874, 875, 876, 877, 920, 979, 995, 997, 1001, 1003, 1004, 1009], "queue": [8, 957, 998], "up": [8, 11, 34, 41, 43, 44, 45, 49, 52, 54, 59, 66, 75, 76, 82, 85, 99, 106, 117, 150, 155, 161, 166, 175, 183, 198, 199, 227, 241, 244, 259, 272, 277, 280, 285, 292, 298, 305, 312, 316, 320, 322, 335, 340, 341, 346, 350, 352, 353, 354, 355, 358, 360, 361, 372, 374, 379, 381, 382, 408, 412, 413, 414, 415, 417, 421, 424, 425, 426, 473, 474, 501, 514, 515, 522, 523, 524, 525, 526, 527, 529, 530, 531, 575, 592, 597, 598, 604, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 625, 626, 627, 628, 629, 646, 647, 648, 649, 657, 670, 733, 761, 762, 765, 766, 767, 769, 790, 840, 841, 844, 856, 874, 875, 876, 877, 880, 903, 906, 907, 943, 946, 950, 951, 954, 957, 964, 968, 969, 974, 977, 978, 987, 988, 995, 996, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013], "amount": [8, 12, 42, 50, 63, 73, 76, 87, 91, 102, 104, 144, 154, 166, 186, 200, 214, 290, 297, 300, 302, 308, 316, 322, 333, 334, 335, 358, 373, 374, 376, 379, 381, 382, 383, 408, 419, 434, 503, 504, 506, 508, 528, 561, 611, 612, 615, 616, 617, 618, 619, 620, 621, 625, 626, 627, 628, 630, 646, 649, 657, 766, 767, 806, 807, 812, 847, 862, 863, 876, 877, 949, 950, 953, 956, 958, 964, 966, 967, 968, 969, 986, 987, 1008, 1012], "learner": [8, 102, 112, 122, 335, 522, 523, 524, 525, 526, 527, 529, 530, 531, 547, 554, 595, 808, 809, 814, 816, 817, 956, 959, 970, 973, 974, 988, 1011], "plot_accuraci": 8, "x_legend": 8, "n_exampl": 8, "gca": [8, 41, 59, 80, 141, 187, 191, 193, 209, 222, 243, 267, 269, 280, 304, 306, 309, 310, 961, 992], "set_ylim": [8, 10, 16, 29, 39, 57, 68, 85, 106, 119, 120, 147, 155, 162, 180, 182, 183, 214, 225, 243, 254, 258, 264, 274, 279, 281, 282, 284, 289, 295, 300, 317], "runtim": [8, 10, 55, 101, 168, 197, 199, 214, 277, 281, 334, 348, 349, 358, 360, 373, 374, 381, 415, 528, 644, 777, 866, 867, 868, 869, 870, 871, 872, 968, 969, 998, 1002, 1003, 1009, 1010, 1012, 1013], "gcf": [8, 961], "cls_runtim": 8, "bar_color": 8, "rectangl": 8, "bar": [8, 10, 15, 68, 107, 108, 111, 112, 115, 124, 132, 136, 146, 149, 155, 161, 225, 230, 238, 240, 244, 258, 284, 285, 292, 293, 321, 348, 377, 546, 597, 613, 634, 645, 954, 961, 968, 970, 1001, 1002, 1003, 1004], "width": [8, 10, 13, 16, 42, 50, 75, 83, 89, 90, 95, 96, 97, 104, 110, 111, 114, 124, 132, 140, 146, 165, 223, 225, 238, 262, 279, 281, 282, 285, 290, 293, 305, 343, 375, 403, 404, 417, 429, 458, 459, 471, 486, 551, 831, 879, 964, 968, 970, 985, 986, 1003], "set_xticklabel": [8, 10, 75, 97, 124, 141, 155, 157, 250, 251, 258], "ymax": [8, 10, 11, 73, 169, 171, 174, 175, 183, 191, 239, 272], "set_titl": [8, 10, 15, 24, 26, 28, 29, 30, 32, 39, 40, 42, 50, 52, 54, 57, 61, 62, 68, 71, 75, 83, 85, 92, 97, 101, 106, 108, 112, 118, 120, 122, 123, 147, 149, 150, 153, 154, 155, 156, 157, 161, 162, 171, 173, 180, 182, 183, 184, 190, 202, 203, 206, 207, 212, 214, 215, 219, 220, 225, 233, 234, 235, 236, 239, 241, 242, 246, 250, 251, 254, 256, 258, 259, 262, 263, 264, 269, 274, 275, 279, 280, 281, 282, 283, 284, 288, 292, 297, 298, 305, 312, 316, 317, 318, 320, 324], "autolabel": 8, "attach": [8, 320, 399, 811, 996, 1006], "rect": [8, 49, 161], "height": [8, 15, 50, 90, 111, 112, 136, 279, 285, 295, 320, 380, 411, 458, 459, 471, 551], "get_height": [8, 112], "get_x": [8, 112], "get_width": [8, 112], "va": [8, 112, 250, 267, 269, 315], "setp": [8, 10, 250, 253], "rotat": [8, 37, 86, 89, 92, 94, 113, 124, 151, 157, 205, 250, 251, 258, 308, 315, 377, 379, 384, 386, 469, 497, 506, 515, 579, 662, 846, 878, 950, 975, 1006, 1007], "read": [8, 13, 17, 87, 202, 246, 288, 289, 290, 292, 294, 333, 340, 344, 347, 348, 349, 350, 351, 353, 354, 358, 359, 360, 374, 385, 386, 387, 388, 391, 397, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 422, 424, 426, 427, 428, 429, 430, 432, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 546, 547, 548, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 569, 570, 571, 572, 573, 575, 576, 578, 579, 580, 581, 584, 586, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 662, 663, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 677, 678, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 721, 722, 723, 724, 725, 726, 727, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 817, 818, 819, 820, 822, 825, 826, 829, 830, 831, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 878, 880, 899, 943, 950, 954, 955, 973, 978, 988, 996, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1012], "feat": [8, 10, 350, 382], "extr": 8, "hash": [8, 100, 151, 321, 322, 333, 335, 338, 346, 349, 358, 381, 479, 509, 522, 531, 546, 547, 554, 605, 801, 919, 946, 975, 988, 990, 996, 999, 1002], "vect": [8, 66, 240, 301, 382, 988], "105": [8, 283, 975], "plot_out_of_core_classif": [8, 975], "featurehash": [8, 19, 66, 151, 319, 320, 321, 335, 341, 382, 453, 546, 553, 554, 555, 556, 839, 975, 996, 1001, 1002, 1003, 1009, 1010], "dictvector": [8, 19, 66, 151, 319, 320, 321, 341, 382, 453, 547, 553, 554, 555, 556, 839, 975, 995, 996, 999, 1005, 1007, 1008, 1011, 1012], "comparison": [8, 12, 14, 19, 22, 23, 24, 25, 27, 31, 33, 35, 39, 45, 47, 54, 55, 56, 57, 58, 60, 66, 74, 83, 86, 88, 89, 91, 97, 101, 104, 107, 114, 117, 120, 124, 125, 130, 137, 143, 145, 147, 151, 156, 164, 166, 168, 170, 173, 180, 182, 186, 197, 200, 201, 204, 205, 206, 207, 208, 212, 213, 227, 232, 234, 235, 236, 243, 251, 258, 268, 274, 281, 283, 284, 288, 290, 302, 305, 315, 319, 320, 321, 329, 341, 343, 360, 372, 374, 376, 377, 379, 383, 384, 402, 403, 408, 411, 412, 414, 447, 448, 449, 453, 469, 477, 479, 480, 487, 490, 506, 514, 515, 518, 529, 530, 546, 547, 553, 554, 555, 556, 571, 573, 575, 576, 580, 587, 590, 596, 604, 608, 624, 637, 653, 654, 655, 656, 657, 669, 702, 707, 743, 752, 763, 764, 765, 766, 768, 769, 777, 779, 780, 781, 782, 783, 784, 792, 801, 804, 808, 823, 824, 827, 839, 840, 844, 846, 847, 851, 852, 853, 854, 855, 856, 857, 866, 868, 869, 871, 872, 874, 943, 948, 951, 954, 956, 957, 960, 969, 975, 992], "illustr": [9, 22, 23, 25, 29, 31, 49, 53, 54, 66, 67, 70, 71, 73, 75, 80, 85, 89, 101, 104, 109, 116, 117, 119, 121, 122, 131, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 150, 151, 153, 155, 156, 159, 171, 178, 179, 182, 184, 186, 190, 192, 195, 196, 199, 200, 202, 203, 205, 207, 209, 211, 212, 214, 215, 216, 218, 239, 246, 251, 252, 260, 282, 284, 287, 288, 290, 300, 308, 309, 313, 314, 316, 317, 321, 322, 327, 329, 333, 343, 346, 351, 354, 359, 377, 379, 381, 382, 480, 575, 576, 578, 579, 580, 584, 587, 588, 815, 943, 950, 954, 957, 960, 966, 967, 968, 969, 975, 978, 979], "robust": [9, 32, 58, 60, 72, 74, 112, 114, 136, 150, 151, 154, 155, 160, 172, 184, 186, 199, 209, 219, 253, 279, 294, 335, 343, 348, 354, 374, 381, 382, 411, 413, 434, 435, 438, 439, 440, 441, 489, 499, 524, 525, 614, 622, 635, 636, 643, 644, 714, 796, 827, 841, 843, 844, 855, 861, 901, 954, 958, 960, 964, 967, 968, 973, 975, 976, 978, 989, 990, 995, 996, 998, 999, 1000, 1001, 1002, 1011], "covari": [9, 12, 27, 31, 74, 79, 94, 97, 116, 118, 138, 145, 185, 209, 224, 226, 228, 229, 230, 231, 246, 270, 295, 355, 360, 365, 374, 377, 379, 384, 447, 448, 449, 450, 469, 480, 484, 492, 497, 499, 506, 513, 514, 515, 528, 575, 576, 578, 587, 588, 596, 609, 610, 615, 619, 621, 647, 648, 651, 654, 658, 761, 762, 763, 782, 953, 960, 964, 975, 976, 989, 990, 995, 997, 998, 999, 1000, 1002, 1004], "wine": [9, 222, 284, 285, 339, 475, 990], "tool": [9, 11, 112, 154, 216, 237, 242, 329, 339, 340, 341, 344, 346, 348, 349, 350, 351, 352, 353, 354, 359, 360, 361, 363, 364, 365, 368, 374, 375, 376, 452, 657, 666, 943, 949, 950, 954, 960, 964, 969, 971, 973, 974, 978, 979, 988, 1002, 1005, 1008, 1009, 1010], "purpos": [9, 12, 16, 34, 80, 112, 117, 149, 196, 197, 198, 202, 204, 217, 228, 230, 235, 236, 308, 309, 316, 320, 321, 329, 341, 346, 348, 359, 360, 361, 364, 367, 371, 374, 375, 379, 381, 382, 383, 384, 603, 788, 789, 826, 951, 954, 955, 957, 960, 973, 979, 1007, 1009], "awar": [9, 15, 133, 147, 305, 320, 344, 346, 348, 358, 361, 378, 382, 532, 533, 613, 619, 620, 621, 623, 624, 634, 645, 812, 841, 960, 964, 970, 992, 995, 996, 1009], "thing": [9, 32, 203, 234, 320, 334, 335, 341, 345, 346, 348, 358, 361, 374, 376, 382, 524, 525, 950, 964, 978, 1001], "trivial": [9, 184, 324, 346, 374, 781, 868, 871, 951, 974, 995], "dimens": [9, 12, 13, 15, 34, 37, 50, 77, 79, 83, 87, 136, 140, 142, 144, 146, 155, 165, 166, 180, 204, 206, 209, 213, 214, 220, 226, 227, 263, 264, 268, 282, 312, 320, 321, 322, 341, 343, 347, 360, 373, 374, 379, 380, 384, 386, 407, 408, 410, 412, 413, 414, 417, 429, 430, 447, 448, 449, 458, 459, 480, 489, 490, 494, 495, 498, 506, 514, 547, 548, 549, 550, 552, 554, 562, 576, 584, 587, 606, 609, 624, 655, 656, 657, 659, 660, 664, 728, 787, 806, 807, 811, 825, 858, 859, 860, 868, 869, 870, 871, 872, 886, 887, 888, 917, 925, 928, 944, 946, 948, 950, 951, 952, 955, 957, 958, 960, 966, 969, 979, 986, 987, 1002, 1004, 1005, 1007], "below": [9, 13, 24, 25, 26, 30, 32, 52, 57, 66, 71, 75, 82, 83, 87, 99, 105, 108, 109, 114, 131, 153, 155, 165, 178, 179, 182, 184, 198, 199, 203, 207, 211, 216, 219, 221, 223, 234, 237, 242, 244, 245, 246, 279, 283, 288, 289, 290, 291, 292, 293, 294, 295, 313, 320, 328, 329, 334, 339, 340, 344, 346, 348, 350, 351, 355, 360, 361, 364, 374, 376, 377, 378, 379, 381, 382, 383, 384, 409, 411, 413, 436, 437, 443, 456, 457, 459, 460, 461, 462, 463, 465, 466, 467, 469, 470, 475, 496, 502, 507, 513, 547, 560, 561, 562, 563, 564, 565, 598, 611, 617, 623, 624, 632, 633, 638, 640, 657, 664, 670, 707, 727, 761, 762, 763, 774, 777, 795, 826, 829, 839, 840, 843, 849, 855, 943, 944, 948, 949, 950, 951, 953, 954, 955, 956, 957, 958, 960, 961, 962, 964, 968, 969, 970, 971, 973, 981, 988, 991, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008], "main": [9, 16, 30, 59, 80, 91, 111, 151, 209, 248, 258, 287, 316, 320, 333, 334, 335, 339, 344, 346, 348, 350, 352, 354, 358, 359, 360, 363, 364, 372, 373, 374, 379, 381, 382, 384, 468, 490, 495, 514, 515, 590, 678, 796, 866, 867, 943, 951, 953, 954, 961, 966, 974, 977, 985, 988, 995, 998, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "empir": [9, 13, 23, 24, 32, 33, 39, 40, 61, 72, 74, 75, 77, 117, 151, 162, 200, 245, 279, 372, 378, 381, 384, 412, 414, 425, 434, 435, 436, 439, 442, 443, 497, 499, 504, 506, 508, 514, 516, 530, 555, 568, 604, 614, 632, 636, 643, 644, 681, 686, 687, 688, 791, 801, 802, 803, 805, 824, 847, 889, 928, 946, 948, 954, 956, 958, 964, 966, 968, 975, 989, 990], "mode": [9, 10, 43, 44, 75, 182, 209, 259, 261, 277, 288, 346, 349, 354, 355, 358, 371, 377, 381, 385, 408, 409, 412, 414, 417, 424, 427, 436, 437, 443, 447, 452, 473, 474, 522, 526, 529, 557, 560, 561, 563, 564, 565, 575, 592, 609, 610, 623, 624, 631, 633, 638, 639, 640, 641, 644, 647, 648, 654, 658, 808, 809, 810, 812, 814, 816, 817, 818, 819, 820, 822, 866, 868, 871, 874, 876, 892, 902, 903, 905, 957, 960, 973, 979, 980, 987, 996, 1004, 1009, 1012], "stick": [9, 761, 953], "bias": [9, 77, 90, 114, 121, 153, 154, 156, 244, 341, 363, 372, 381, 489, 514, 822, 846, 857, 949, 953, 962, 968, 970], "yet": [9, 54, 166, 200, 230, 240, 322, 335, 341, 345, 350, 358, 363, 364, 365, 378, 379, 381, 382, 384, 413, 417, 426, 427, 430, 437, 518, 519, 532, 533, 542, 558, 559, 567, 742, 863, 938, 943, 950, 954, 960, 968, 974, 1004, 1012], "extent": [9, 55, 140, 141, 142, 213, 314, 317, 405, 500, 661, 761, 954], "assum": [9, 32, 52, 54, 145, 150, 153, 154, 171, 182, 200, 209, 212, 219, 231, 239, 248, 279, 316, 322, 334, 345, 346, 348, 350, 352, 358, 359, 360, 363, 368, 371, 372, 374, 376, 378, 379, 381, 382, 384, 385, 390, 395, 402, 404, 409, 411, 415, 422, 428, 434, 435, 436, 437, 438, 439, 440, 441, 468, 473, 474, 497, 507, 513, 514, 526, 527, 532, 533, 552, 553, 554, 556, 585, 597, 608, 609, 611, 612, 617, 623, 624, 625, 626, 627, 631, 632, 633, 636, 637, 641, 642, 643, 646, 650, 652, 653, 657, 674, 690, 699, 705, 720, 728, 733, 738, 742, 745, 763, 766, 767, 777, 802, 808, 809, 812, 813, 814, 816, 817, 822, 833, 846, 914, 930, 931, 932, 944, 948, 950, 952, 953, 954, 956, 957, 959, 960, 961, 964, 968, 970, 1001, 1007], "parametr": [9, 23, 24, 77, 212, 263, 283, 291, 372, 375, 380, 381, 402, 516, 518, 600, 650, 661, 842, 854, 897, 898, 950, 953, 956, 957, 964, 967, 970, 1003, 1005, 1008], "minimum": [9, 13, 52, 54, 75, 114, 115, 117, 135, 171, 192, 213, 219, 249, 265, 266, 348, 355, 364, 367, 371, 374, 381, 382, 406, 410, 411, 415, 419, 421, 434, 435, 438, 439, 440, 441, 476, 478, 506, 517, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 559, 592, 596, 597, 600, 602, 633, 636, 641, 643, 644, 647, 648, 657, 670, 689, 743, 744, 766, 767, 787, 802, 823, 824, 835, 836, 839, 840, 841, 845, 859, 860, 873, 874, 875, 876, 877, 883, 886, 887, 890, 906, 951, 954, 958, 960, 964, 966, 970, 995, 998, 1002, 1003, 1007, 1008, 1012], "determin": [9, 11, 14, 19, 43, 52, 75, 101, 103, 107, 117, 143, 154, 161, 162, 178, 185, 239, 279, 284, 312, 322, 328, 329, 345, 346, 348, 355, 359, 360, 371, 372, 374, 378, 379, 381, 382, 383, 384, 397, 402, 406, 407, 408, 410, 412, 414, 415, 421, 424, 425, 426, 430, 434, 435, 437, 438, 439, 440, 441, 447, 448, 449, 453, 456, 457, 460, 462, 468, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 502, 504, 507, 508, 517, 518, 519, 521, 523, 524, 525, 526, 527, 528, 530, 532, 533, 535, 547, 548, 549, 553, 556, 559, 567, 572, 573, 575, 576, 577, 578, 579, 580, 581, 584, 585, 586, 587, 588, 589, 590, 592, 600, 601, 605, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 637, 638, 639, 640, 641, 643, 644, 645, 652, 654, 655, 657, 658, 659, 672, 676, 687, 693, 694, 702, 747, 748, 749, 751, 752, 757, 763, 765, 766, 767, 769, 777, 785, 786, 787, 788, 789, 790, 791, 793, 797, 799, 800, 802, 809, 811, 812, 817, 822, 823, 824, 830, 831, 839, 840, 841, 843, 847, 855, 866, 867, 869, 872, 875, 877, 880, 901, 917, 923, 925, 928, 943, 946, 948, 953, 957, 959, 960, 962, 964, 967, 968, 970, 979, 995, 1000, 1003, 1004, 1006, 1007, 1008], "cluster": [9, 14, 15, 17, 18, 20, 23, 39, 40, 43, 45, 47, 48, 50, 51, 54, 56, 58, 59, 66, 75, 82, 83, 84, 93, 99, 103, 110, 118, 131, 134, 157, 179, 203, 205, 206, 207, 213, 219, 225, 226, 227, 228, 240, 265, 266, 268, 282, 289, 293, 299, 301, 310, 319, 320, 322, 328, 335, 339, 341, 343, 346, 348, 351, 358, 360, 369, 375, 380, 382, 388, 389, 392, 453, 467, 468, 469, 476, 477, 478, 479, 480, 487, 495, 506, 509, 529, 531, 554, 555, 556, 596, 656, 657, 660, 669, 670, 675, 682, 684, 689, 695, 700, 701, 719, 721, 742, 743, 750, 756, 757, 759, 761, 762, 818, 819, 827, 831, 838, 846, 895, 897, 915, 922, 938, 944, 951, 953, 957, 960, 962, 964, 967, 971, 973, 974, 975, 978, 979, 982, 985, 988, 989, 990, 995, 996, 997, 998, 999, 1000, 1001, 1002], "outli": [9, 75, 360, 434, 439, 950, 960], "skew": [9, 114, 185, 213, 219, 279, 294, 338, 378, 604, 605, 606, 607, 842, 854, 950, 964, 990, 998, 1002, 1011], "Of": [9, 24, 26, 149, 333, 348, 374, 382, 944], "screen": [9, 1008], "presenc": [9, 57, 59, 75, 76, 99, 153, 157, 166, 186, 219, 279, 344, 347, 360, 376, 379, 677, 690, 720, 733, 795, 829, 837, 839, 846, 938, 944, 950, 954, 955, 968, 977, 998, 999, 1001, 1005, 1007, 1009], "univari": [9, 10, 33, 44, 68, 70, 130, 131, 133, 151, 164, 181, 197, 252, 303, 338, 373, 374, 375, 382, 410, 469, 490, 495, 557, 560, 561, 563, 564, 565, 567, 570, 571, 572, 573, 574, 592, 593, 594, 595, 610, 763, 768, 788, 792, 826, 827, 836, 841, 845, 846, 866, 871, 950, 969, 971, 975, 976, 987, 990, 995, 1001], "appli": [9, 13, 15, 19, 24, 26, 30, 37, 41, 43, 44, 52, 53, 55, 59, 67, 71, 80, 83, 87, 88, 93, 95, 97, 106, 107, 112, 114, 132, 138, 154, 156, 166, 171, 186, 187, 196, 202, 203, 204, 209, 214, 216, 239, 240, 242, 251, 258, 268, 279, 283, 284, 289, 308, 312, 322, 328, 329, 333, 338, 346, 348, 354, 358, 359, 360, 365, 371, 372, 373, 374, 375, 376, 378, 379, 381, 382, 383, 384, 386, 405, 411, 417, 427, 429, 430, 432, 434, 439, 447, 448, 449, 450, 473, 474, 481, 482, 483, 489, 496, 497, 498, 499, 500, 502, 504, 506, 507, 508, 513, 514, 515, 518, 519, 522, 523, 524, 525, 529, 530, 531, 553, 554, 555, 556, 592, 597, 598, 603, 604, 606, 607, 623, 624, 633, 641, 642, 643, 656, 664, 666, 672, 690, 720, 722, 723, 745, 752, 756, 757, 763, 777, 792, 795, 801, 802, 803, 804, 805, 815, 825, 826, 835, 842, 843, 846, 851, 852, 854, 855, 856, 857, 862, 873, 874, 875, 876, 877, 886, 892, 895, 902, 903, 926, 944, 946, 950, 951, 952, 953, 954, 956, 958, 960, 962, 964, 968, 969, 970, 971, 972, 978, 996, 999, 1000, 1001, 1002, 1003, 1006, 1007, 1009], "ellipticenvelop": [9, 209, 435, 438, 439, 440, 441, 528, 960, 995, 998, 1002, 1003, 1008], "decisionboundarydisplai": [9, 28, 29, 32, 53, 103, 118, 123, 165, 174, 191, 196, 242, 262, 267, 270, 284, 304, 305, 306, 307, 309, 310, 312, 325, 1009, 1010, 1012], "oneclasssvm": [9, 11, 16, 196, 209, 291, 307, 528, 642, 812, 960, 968, 969, 997, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010], "support_fract": [9, 434, 439], "contamin": [9, 75, 76, 209, 219, 265, 266, 434, 528, 812, 960, 1003, 1011, 1012], "ocsvm": [9, 196], "line": [9, 11, 13, 16, 17, 37, 40, 57, 66, 75, 84, 87, 92, 101, 107, 113, 137, 149, 150, 151, 154, 155, 170, 171, 172, 174, 177, 178, 180, 183, 184, 185, 190, 191, 193, 194, 196, 209, 213, 214, 217, 219, 236, 243, 245, 246, 265, 269, 272, 280, 290, 307, 310, 312, 313, 317, 318, 320, 340, 341, 344, 346, 347, 348, 350, 351, 352, 353, 354, 358, 379, 380, 381, 403, 452, 453, 454, 473, 474, 507, 518, 519, 520, 521, 575, 578, 579, 597, 635, 651, 665, 666, 667, 769, 785, 922, 948, 954, 958, 961, 968, 973, 975, 977, 986, 988, 997, 1006, 1008, 1011, 1012], "mline": [9, 75, 196, 265, 307, 310], "load_win": [9, 222, 284, 810, 818, 992, 1006], "red": [9, 10, 11, 25, 31, 32, 57, 75, 85, 87, 88, 89, 104, 122, 125, 147, 159, 161, 162, 172, 180, 207, 220, 234, 245, 272, 275, 280, 284, 285, 299, 308, 327, 344, 360, 374, 379, 955], "frontier": [9, 196, 265, 307, 960, 986], "legend_lin": 9, "response_method": [9, 28, 32, 53, 103, 118, 123, 165, 174, 191, 196, 242, 262, 267, 270, 284, 304, 305, 307, 312, 325, 596, 597, 598, 663, 665, 667, 706, 954, 1012], "decision_funct": [9, 11, 16, 24, 26, 53, 103, 118, 129, 194, 195, 196, 210, 216, 219, 246, 265, 266, 274, 281, 295, 306, 307, 308, 312, 313, 314, 318, 348, 360, 372, 381, 402, 434, 514, 515, 518, 520, 524, 526, 528, 532, 558, 559, 596, 597, 598, 623, 624, 631, 633, 639, 640, 641, 642, 663, 665, 667, 672, 685, 690, 691, 699, 703, 704, 706, 720, 746, 752, 753, 758, 763, 766, 767, 777, 787, 794, 795, 796, 797, 812, 826, 833, 863, 866, 868, 870, 871, 950, 954, 960, 961, 968, 969, 986, 995, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1012], "plot_method": [9, 32, 165, 196, 262, 267, 304, 306, 307, 309, 310, 312, 596], "contour": [9, 11, 16, 32, 43, 44, 75, 110, 129, 136, 141, 142, 144, 193, 194, 195, 196, 209, 214, 229, 265, 272, 306, 307, 309, 310, 312, 313, 314, 343, 353, 596, 597, 960, 968], "line2d": [9, 75, 196, 265, 307, 310, 769, 785], "bbox_arg": 9, "dict": [9, 10, 11, 12, 17, 25, 36, 42, 66, 69, 70, 93, 107, 112, 114, 116, 180, 188, 209, 218, 227, 237, 238, 240, 243, 246, 248, 259, 263, 281, 285, 292, 301, 308, 321, 322, 335, 338, 340, 348, 358, 360, 375, 378, 385, 386, 388, 392, 396, 398, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 422, 429, 430, 434, 435, 436, 437, 438, 439, 440, 441, 447, 448, 449, 450, 461, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 546, 547, 548, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 653, 654, 655, 656, 657, 662, 663, 665, 666, 667, 676, 678, 726, 729, 735, 743, 744, 761, 762, 763, 766, 767, 769, 774, 775, 777, 785, 787, 788, 789, 790, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 822, 823, 824, 825, 826, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 858, 859, 861, 862, 863, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 881, 891, 892, 908, 911, 914, 943, 954, 964, 983, 984, 988, 990, 995, 1001, 1002, 1011, 1012, 1013], "boxstyl": [9, 281], "fc": [9, 264, 341], "arrow_arg": 9, "arrowstyl": 9, "xy": [9, 25, 46, 246, 272, 313, 364, 611, 612, 615, 616, 617, 618, 619, 620, 625, 626, 627, 628, 629, 646, 647, 648, 649, 651], "xycoord": [9, 25], "textcoord": [9, 159], "xytext": [9, 25, 159], "bbox": [9, 12, 32, 42, 93, 225, 226, 227, 230, 231, 281], "arrowprop": [9, 25], "ash": [9, 343, 998, 1001], "malic_acid": 9, "abil": [9, 13, 58, 75, 114, 137, 138, 139, 143, 145, 147, 149, 151, 153, 154, 156, 182, 186, 200, 209, 320, 335, 364, 381, 382, 384, 576, 587, 590, 746, 747, 748, 751, 752, 951, 954, 957, 960, 970, 974, 975, 995, 997, 1002, 1004, 1008, 1009], "locat": [9, 24, 50, 51, 68, 75, 76, 176, 272, 290, 308, 339, 341, 344, 346, 350, 351, 354, 355, 364, 374, 376, 380, 413, 425, 426, 434, 435, 436, 437, 438, 439, 440, 441, 453, 465, 466, 469, 470, 477, 480, 939, 944, 950, 955, 960, 964, 970, 1003], "hard": [9, 182, 209, 213, 239, 241, 335, 345, 358, 360, 374, 379, 382, 499, 506, 534, 641, 868, 869, 870, 871, 872, 950, 967, 969, 970, 974, 986, 987, 988, 1004, 1005], "due": [9, 13, 25, 26, 50, 52, 57, 71, 101, 104, 138, 154, 155, 161, 166, 173, 180, 182, 184, 199, 200, 213, 219, 226, 247, 248, 258, 259, 284, 285, 312, 316, 320, 321, 322, 344, 346, 352, 360, 364, 372, 374, 378, 379, 381, 384, 408, 411, 412, 424, 500, 504, 508, 509, 539, 636, 763, 766, 767, 771, 773, 777, 787, 788, 791, 794, 798, 799, 831, 835, 836, 846, 944, 950, 951, 953, 954, 955, 957, 961, 968, 969, 974, 987, 995, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "banana": [9, 954], "anywai": [9, 320, 348, 630, 650, 651], "rid": [9, 968], "difficulti": [9, 26, 200, 279, 335, 346, 372, 823, 824, 953, 957], "bandwidth": [9, 41, 60, 215, 263, 264, 272, 358, 360, 374, 380, 413, 423, 426, 806, 807, 811, 947, 960, 1006, 1010], "compromis": [9, 26, 155, 333, 346, 612, 644, 957, 998], "risk": [9, 52, 117, 182, 186, 200, 280, 316, 329, 345, 346, 360, 373, 378, 381, 532, 533, 851, 852, 854, 855, 856, 857, 950, 954, 978, 1002], "flavanoid": [9, 343], "color_intens": 9, "419": [9, 321, 581, 975], "plot_outlier_detection_win": [9, 975], "anomali": [9, 75, 118, 151, 196, 208, 219, 265, 266, 341, 373, 434, 477, 487, 528, 604, 642, 812, 827, 870, 960, 973, 975, 1001, 1002], "algorithm": [9, 14, 17, 18, 27, 29, 33, 34, 39, 40, 42, 43, 47, 53, 54, 55, 56, 57, 58, 59, 63, 64, 66, 74, 75, 79, 87, 89, 101, 102, 103, 107, 110, 118, 151, 159, 169, 171, 185, 196, 198, 204, 206, 208, 212, 213, 219, 226, 227, 228, 231, 236, 239, 248, 259, 265, 266, 268, 272, 279, 281, 284, 288, 289, 290, 293, 295, 299, 301, 307, 320, 321, 322, 329, 333, 335, 339, 340, 341, 342, 343, 346, 347, 348, 349, 354, 355, 359, 360, 363, 370, 371, 373, 374, 376, 377, 378, 379, 381, 382, 384, 385, 386, 387, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 434, 439, 440, 443, 447, 448, 449, 453, 468, 476, 477, 478, 479, 480, 487, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 509, 510, 511, 512, 513, 518, 519, 520, 521, 524, 525, 528, 556, 568, 569, 575, 576, 600, 602, 604, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 639, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 669, 670, 673, 682, 684, 699, 701, 707, 738, 742, 743, 757, 759, 761, 762, 794, 803, 804, 806, 807, 808, 809, 810, 811, 812, 814, 815, 816, 817, 818, 819, 822, 827, 831, 833, 846, 850, 862, 866, 867, 868, 869, 870, 871, 872, 874, 875, 886, 902, 903, 905, 919, 923, 929, 944, 946, 949, 951, 952, 953, 954, 956, 959, 960, 964, 967, 968, 969, 972, 973, 974, 975, 976, 978, 979, 982, 983, 985, 987, 988, 990, 995, 996, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "toi": [9, 33, 36, 37, 38, 39, 44, 46, 49, 50, 52, 53, 54, 64, 75, 80, 91, 104, 118, 123, 124, 151, 164, 172, 186, 196, 208, 219, 225, 265, 266, 275, 305, 315, 339, 352, 358, 381, 382, 405, 406, 407, 409, 411, 413, 414, 415, 417, 423, 434, 477, 479, 487, 528, 604, 642, 690, 720, 762, 812, 819, 827, 846, 870, 951, 953, 954, 960, 964, 975, 990], "lof": [9, 151, 196, 209, 219, 260, 307, 528, 812, 870, 960, 975], "discrimin": [9, 10, 27, 73, 74, 75, 76, 77, 95, 131, 133, 136, 151, 159, 197, 203, 217, 230, 268, 343, 372, 381, 440, 477, 514, 515, 531, 596, 747, 815, 943, 951, 954, 957, 968, 970, 975, 976, 986, 990, 998], "ellipsoid": [9, 27, 31, 75, 76, 77, 151, 224, 225, 227, 228, 229, 230, 231, 514, 515, 596, 761, 762, 948, 953, 975], "goal": [10, 17, 20, 26, 49, 54, 80, 117, 149, 155, 159, 182, 197, 200, 218, 219, 236, 237, 320, 334, 335, 341, 348, 351, 352, 360, 361, 363, 365, 379, 383, 507, 513, 555, 558, 703, 954, 957, 959, 960, 968, 969, 970, 978, 979, 982, 986, 988, 1003], "boxplot": [10, 75, 115, 154, 157, 288], "gc": 10, "defaultdict": [10, 13, 19, 24, 157, 242, 321, 322], "make_regress": [10, 71, 161, 163, 164, 168, 185, 186, 252, 289, 295, 329, 342, 348, 349, 359, 519, 521, 525, 530, 571, 573, 574, 600, 611, 612, 614, 616, 617, 618, 620, 625, 626, 627, 628, 629, 630, 632, 636, 644, 646, 647, 648, 650, 651, 652, 824, 867, 954, 955, 957], "randomforestregressor": [10, 107, 121, 122, 125, 149, 150, 290, 295, 359, 381, 522, 523, 525, 527, 531, 533, 535, 597, 598, 876, 944, 1000, 1001, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012], "sgdregressor": [10, 193, 333, 335, 358, 373, 611, 614, 632, 636, 641, 644, 824, 867, 872, 950, 968, 997, 999, 1001, 1002, 1003, 1006, 1008, 1009, 1010, 1011, 1013], "shuffl": [10, 13, 15, 20, 21, 23, 26, 30, 45, 57, 58, 87, 107, 108, 110, 117, 122, 150, 166, 190, 191, 196, 209, 240, 244, 245, 252, 259, 286, 297, 298, 299, 300, 310, 320, 321, 329, 341, 355, 360, 369, 434, 439, 453, 454, 456, 457, 460, 462, 468, 476, 477, 478, 479, 480, 484, 487, 489, 496, 502, 504, 505, 511, 512, 518, 519, 520, 521, 529, 530, 532, 533, 567, 570, 572, 623, 624, 631, 632, 633, 637, 639, 641, 642, 643, 652, 763, 765, 766, 767, 768, 769, 777, 780, 781, 782, 783, 784, 785, 787, 788, 789, 790, 791, 792, 793, 794, 796, 823, 824, 847, 866, 867, 868, 871, 902, 903, 923, 925, 949, 950, 955, 962, 968, 969, 983, 988, 990, 995, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006], "atomic_benchmark_estim": 10, "verbos": [10, 39, 47, 51, 61, 66, 68, 70, 122, 169, 240, 276, 277, 279, 291, 301, 320, 344, 350, 360, 368, 405, 408, 412, 414, 417, 419, 424, 427, 429, 432, 436, 437, 443, 496, 501, 502, 503, 504, 505, 508, 510, 511, 512, 513, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 558, 559, 592, 597, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 641, 642, 643, 644, 645, 646, 647, 648, 649, 652, 655, 657, 659, 729, 742, 761, 762, 763, 766, 767, 769, 777, 785, 787, 788, 789, 790, 791, 793, 795, 797, 800, 815, 822, 823, 824, 825, 826, 827, 828, 863, 866, 867, 868, 869, 870, 871, 872, 920, 974, 997, 998, 1000, 1002, 1003, 1004, 1006, 1007, 1009, 1010], "n_instanc": [10, 598], "zero": [10, 11, 14, 26, 32, 34, 37, 38, 49, 51, 74, 76, 77, 87, 90, 92, 103, 104, 113, 115, 116, 121, 133, 136, 150, 161, 166, 168, 173, 175, 176, 181, 182, 183, 186, 187, 188, 192, 197, 200, 213, 216, 217, 219, 225, 229, 231, 236, 239, 244, 248, 249, 264, 279, 289, 290, 312, 316, 321, 322, 324, 328, 333, 334, 341, 348, 352, 360, 372, 373, 374, 376, 379, 381, 382, 383, 384, 387, 411, 417, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 452, 462, 473, 474, 488, 491, 492, 496, 497, 500, 502, 503, 504, 505, 507, 508, 512, 513, 517, 522, 523, 524, 525, 526, 527, 529, 530, 531, 546, 550, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 572, 573, 576, 601, 604, 608, 609, 610, 615, 623, 624, 629, 630, 631, 632, 633, 636, 641, 642, 643, 650, 651, 668, 674, 677, 678, 680, 681, 689, 693, 694, 698, 702, 704, 710, 747, 748, 749, 751, 760, 761, 778, 779, 782, 783, 795, 806, 807, 808, 809, 810, 812, 814, 815, 816, 817, 818, 819, 820, 821, 822, 829, 836, 838, 839, 841, 842, 843, 845, 846, 852, 853, 854, 855, 859, 866, 874, 875, 876, 877, 901, 929, 940, 944, 950, 952, 953, 956, 957, 958, 964, 965, 966, 968, 969, 970, 979, 986, 988, 995, 997, 999, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "atomic_benchmark": 10, "percentil": [10, 13, 67, 114, 117, 219, 223, 279, 333, 557, 560, 561, 563, 564, 565, 568, 571, 597, 598, 712, 964, 1000, 1008], "bulk_benchmark_estim": 10, "n_bulk_repeat": 10, "whole": [10, 47, 70, 117, 125, 150, 183, 219, 236, 243, 308, 312, 324, 333, 344, 346, 358, 359, 375, 377, 381, 384, 414, 448, 503, 520, 521, 522, 523, 528, 529, 530, 531, 535, 650, 651, 763, 766, 767, 777, 790, 801, 802, 803, 804, 805, 943, 954, 964, 988, 1003, 1005], "bulk_benchmark": 10, "benchmark_estim": 10, "repeat": [10, 31, 63, 74, 76, 113, 136, 138, 144, 145, 155, 159, 184, 234, 239, 240, 251, 256, 298, 321, 322, 348, 355, 360, 361, 371, 372, 373, 374, 379, 382, 383, 553, 558, 572, 573, 580, 592, 599, 624, 768, 778, 779, 782, 892, 944, 953, 990, 1003, 1005], "atomic_runtim": 10, "bulk_runtim": 10, "pair": [10, 13, 34, 41, 55, 61, 92, 103, 105, 110, 114, 129, 142, 146, 162, 165, 174, 191, 194, 200, 213, 234, 239, 246, 248, 302, 304, 306, 308, 309, 310, 312, 314, 321, 325, 341, 358, 360, 371, 372, 375, 378, 382, 384, 402, 405, 406, 410, 415, 422, 428, 436, 437, 443, 458, 473, 474, 547, 557, 560, 561, 563, 564, 565, 575, 578, 579, 580, 582, 584, 585, 587, 588, 590, 592, 597, 598, 608, 657, 664, 665, 670, 671, 672, 680, 695, 704, 722, 723, 727, 730, 733, 734, 735, 736, 737, 738, 740, 742, 743, 744, 745, 746, 750, 794, 806, 807, 881, 954, 955, 956, 957, 964, 970, 995, 1007, 1008, 1010, 1011, 1012], "contain": [10, 13, 19, 23, 26, 31, 37, 46, 53, 55, 66, 67, 103, 105, 109, 117, 118, 144, 154, 155, 157, 159, 173, 186, 200, 209, 216, 219, 220, 223, 230, 237, 239, 245, 248, 249, 258, 265, 266, 268, 279, 291, 298, 301, 320, 321, 339, 340, 341, 343, 346, 348, 350, 351, 352, 353, 354, 355, 359, 360, 368, 372, 373, 374, 375, 377, 378, 379, 381, 382, 383, 384, 386, 388, 398, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 427, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 461, 465, 467, 468, 469, 473, 474, 475, 479, 480, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 546, 547, 548, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 600, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 650, 651, 653, 654, 655, 656, 657, 661, 662, 663, 665, 666, 667, 674, 677, 699, 700, 701, 736, 743, 744, 752, 758, 761, 762, 763, 766, 767, 769, 777, 781, 782, 785, 789, 790, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 822, 823, 824, 825, 826, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 858, 859, 861, 862, 863, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 878, 879, 880, 881, 882, 885, 886, 887, 906, 907, 909, 910, 917, 921, 923, 943, 944, 946, 952, 955, 958, 960, 962, 964, 965, 967, 970, 973, 977, 979, 988, 995, 997, 998, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012], "generate_dataset": 10, "coef": [10, 51, 96, 153, 154, 161, 166, 169, 173, 174, 176, 181, 185, 186, 187, 191, 198, 223, 252, 276, 294, 317, 489, 611, 612, 614, 617, 618, 624, 625, 626, 627, 628, 634, 637, 639, 645, 646, 647, 648, 649, 650, 651, 652, 958], "random_se": [10, 85, 110], "x_scaler": 10, "y_scaler": 10, "ok": [10, 346, 960], "boxplot_runtim": 10, "pred_typ": 10, "micro": [10, 272, 301, 333, 672, 678, 693, 694, 702, 747, 748, 751, 752, 954, 995, 1003, 1004, 1010, 1012], "bp": [10, 115, 136, 170, 171, 343, 962], "cls_info": 10, "estimator_conf": 10, "whisker": 10, "flier": 10, "marker": [10, 11, 17, 26, 28, 32, 34, 35, 39, 49, 52, 55, 56, 57, 60, 61, 79, 84, 85, 89, 107, 121, 145, 146, 159, 170, 175, 177, 179, 180, 182, 184, 185, 197, 199, 203, 225, 227, 228, 234, 239, 241, 242, 243, 266, 279, 284, 299, 324, 346, 350, 382, 1003, 1005, 1006, 1011], "linestyl": [10, 11, 16, 31, 57, 69, 75, 94, 96, 101, 113, 124, 127, 129, 138, 141, 143, 145, 147, 156, 157, 167, 169, 170, 171, 182, 183, 184, 188, 192, 194, 195, 200, 217, 219, 236, 238, 242, 243, 248, 264, 272, 275, 280, 306, 309, 310, 312, 313, 314, 316, 984], "major": [10, 15, 32, 107, 246, 279, 283, 288, 289, 290, 291, 292, 293, 294, 295, 312, 322, 333, 341, 345, 346, 349, 352, 358, 361, 374, 378, 380, 382, 516, 534, 535, 659, 878, 880, 954, 957, 968, 974, 978, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "lightgrei": 10, "set_axisbelow": 10, "capit": [10, 24, 295, 461, 769, 785], "clf_name": [10, 320], "n_feature_influ": 10, "nber": 10, "estimator_nam": [10, 190, 348, 353, 403, 541, 663, 665, 667, 885], "percentile_perf_in_u": 10, "plot_n_features_influ": 10, "il": [10, 629, 650, 651, 950, 954], "benchmark_throughput": 10, "duration_sec": 10, "estimator_config": 10, "n_predict": 10, "plot_benchmark_throughput": 10, "cls_valu": 10, "sec": [10, 190, 204, 207, 259], "1e2": [10, 138, 145, 215, 231, 308, 710], "randomforest": [10, 110, 333, 381, 874, 875, 1000], "0001": [10, 136, 190, 237, 348, 386, 408, 412, 424, 436, 437, 443, 498, 503, 505, 512, 514, 515, 524, 525, 611, 612, 613, 614, 617, 618, 623, 624, 625, 626, 627, 628, 633, 634, 637, 639, 641, 643, 645, 652, 654, 658, 823, 824, 866, 867, 943], "250": [10, 62, 114, 159, 181, 202, 312, 458, 657, 943, 966, 975, 1002], "500": [10, 41, 47, 54, 57, 58, 60, 79, 80, 94, 96, 105, 107, 115, 135, 138, 159, 195, 196, 203, 220, 221, 225, 226, 230, 239, 242, 252, 259, 265, 271, 283, 289, 294, 295, 314, 318, 333, 381, 387, 434, 435, 439, 440, 441, 446, 447, 448, 449, 576, 578, 579, 581, 586, 589, 590, 615, 616, 619, 620, 621, 645, 647, 648, 824, 943, 969], "17": [10, 13, 19, 36, 49, 70, 75, 85, 117, 139, 154, 181, 213, 242, 256, 274, 283, 341, 344, 351, 364, 366, 367, 374, 378, 409, 426, 452, 462, 463, 465, 488, 496, 501, 505, 512, 514, 515, 520, 524, 525, 534, 535, 562, 593, 614, 622, 623, 624, 631, 634, 637, 639, 652, 657, 693, 694, 704, 725, 730, 748, 751, 753, 781, 804, 815, 830, 835, 836, 844, 846, 852, 868, 871, 874, 875, 876, 877, 904, 943, 944, 955, 957, 964, 975, 991, 993, 995, 996, 997, 998, 1001, 1004, 1009], "735": [10, 975], "plot_prediction_lat": [10, 975], "anova": [10, 51, 70, 130, 132, 135, 136, 151, 237, 303, 375, 469, 480, 557, 560, 561, 563, 564, 565, 569, 570, 571, 574, 678, 788, 792, 826, 827, 846, 866, 871, 969, 975], "ledoit": [10, 27, 32, 72, 73, 76, 77, 151, 268, 438, 440, 444, 445, 477, 514, 948, 975], "wolf": [10, 27, 32, 72, 73, 76, 77, 151, 268, 438, 440, 444, 445, 477, 514, 948, 975, 1002], "oa": [10, 27, 32, 72, 76, 77, 94, 116, 151, 268, 270, 376, 434, 435, 438, 439, 441, 442, 477, 514, 763, 948, 975], "conserv": [11, 360, 547, 554, 858, 859, 953, 966], "biologi": 11, "south": [11, 117, 154, 272, 341, 380], "american": [11, 12, 66, 76, 341, 374, 376, 380, 381, 382, 434, 439, 695, 846], "mammal": 11, "past": [11, 13, 350, 351, 354, 358, 361, 378, 379, 381, 503, 520, 521, 643, 978, 980, 1011], "environment": [11, 166, 200], "unsuccess": 11, "cast": [11, 50, 182, 203, 340, 361, 382, 461, 609, 610, 611, 617, 621, 622, 625, 626, 627, 628, 629, 630, 638, 640, 919, 1002, 1003, 1004, 1005, 1008, 1010, 1012], "densiti": [11, 46, 52, 57, 62, 71, 96, 136, 151, 168, 182, 197, 200, 206, 209, 213, 224, 225, 231, 239, 245, 256, 260, 265, 266, 279, 308, 320, 341, 343, 355, 360, 374, 381, 385, 393, 409, 411, 413, 415, 417, 429, 432, 463, 467, 501, 506, 514, 515, 761, 762, 763, 806, 807, 811, 812, 859, 948, 950, 953, 957, 959, 960, 966, 973, 975, 976, 979, 989, 990, 997, 999, 1003, 1004, 1010, 1011], "phillip": [11, 272, 341, 463], "2006": [11, 272, 341, 381, 384, 427, 463, 522, 523, 530, 531, 575, 576, 579, 584, 587, 614, 631, 632, 705, 752, 753, 761, 801, 859, 876, 877, 950, 954, 956, 959, 966, 967], "basemap": [11, 272], "coast": [11, 272], "nation": [11, 75, 272, 341, 813], "boundari": [11, 14, 24, 25, 26, 29, 32, 55, 57, 100, 103, 110, 120, 124, 129, 139, 140, 142, 151, 155, 165, 183, 191, 209, 214, 217, 242, 253, 267, 269, 270, 272, 274, 279, 281, 284, 296, 301, 303, 305, 306, 307, 308, 310, 317, 318, 325, 342, 372, 381, 382, 384, 415, 421, 469, 501, 514, 515, 534, 553, 554, 556, 596, 699, 725, 763, 795, 808, 814, 816, 817, 818, 841, 845, 862, 863, 868, 870, 871, 874, 890, 948, 957, 960, 964, 967, 968, 969, 975, 995, 997, 999, 1008, 1009, 1010, 1012], "america": [11, 12, 75, 272, 341, 813, 964], "bradypu": [11, 272, 341, 463], "variegatu": [11, 272, 341, 463], "brown": [11, 85, 272, 341, 463, 593, 944, 1000, 1002, 1003, 1004, 1007], "throat": [11, 272, 341, 463], "sloth": [11, 272, 341, 463], "microryzomi": [11, 272, 341, 463], "minutu": [11, 272, 341, 463], "known": [11, 17, 24, 26, 36, 46, 54, 55, 76, 95, 96, 122, 143, 145, 150, 166, 182, 183, 200, 209, 239, 241, 248, 268, 272, 280, 291, 297, 305, 312, 321, 335, 341, 343, 344, 346, 349, 354, 358, 360, 370, 371, 372, 374, 375, 376, 377, 378, 379, 381, 382, 384, 403, 428, 447, 449, 463, 473, 474, 509, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 530, 531, 553, 554, 556, 559, 574, 587, 598, 623, 624, 637, 647, 648, 659, 669, 675, 678, 683, 693, 707, 719, 721, 759, 795, 801, 802, 803, 804, 805, 808, 813, 816, 822, 850, 874, 875, 876, 877, 944, 946, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 964, 969, 970, 979, 984, 986, 987], "forest": [11, 26, 29, 100, 106, 110, 112, 113, 115, 116, 117, 118, 120, 122, 125, 149, 151, 152, 159, 209, 236, 238, 240, 272, 290, 320, 327, 329, 339, 359, 360, 372, 373, 383, 428, 429, 455, 456, 460, 461, 463, 480, 520, 521, 522, 523, 525, 526, 527, 528, 529, 530, 531, 595, 599, 763, 768, 792, 799, 826, 840, 870, 874, 875, 876, 943, 944, 955, 962, 974, 975, 976, 990, 992, 995, 996, 998, 999, 1000, 1001, 1002, 1004, 1012], "rice": [11, 272, 341, 463, 1008], "rat": [11, 272, 341, 463], "rodent": [11, 272, 341, 463], "live": [11, 66, 154, 272, 341, 346, 374, 463, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 977], "peru": [11, 272, 341, 463], "colombia": [11, 272, 341, 463], "ecuador": [11, 272, 341, 463], "venezuela": [11, 272, 341, 463], "entropi": [11, 26, 221, 251, 272, 290, 297, 298, 329, 341, 374, 381, 386, 463, 498, 522, 529, 572, 573, 623, 682, 700, 701, 705, 759, 874, 876, 950, 951, 954, 958, 970, 997, 999, 1003, 1004, 1009, 1011, 1012], "anderson": [11, 272, 341, 463, 1001, 1007], "schapir": [11, 256, 272, 341, 381, 463, 518, 519], "ecolog": [11, 272, 341, 463], "190": [11, 113, 200, 248, 272, 341, 352, 463], "231": [11, 272, 341, 374, 385, 409, 463, 549], "259": [11, 204, 272, 341, 381, 463, 532, 533], "________________________________________________________________________________": [11, 51, 320], "coastlin": [11, 136, 272, 343], "coverag": [11, 13, 114, 117, 182, 200, 272, 341, 349, 370, 463, 592, 685], "area": [11, 13, 118, 136, 182, 200, 219, 236, 239, 246, 248, 249, 308, 312, 313, 317, 343, 346, 350, 358, 374, 382, 667, 671, 672, 673, 706, 752, 753, 951, 954, 957, 972, 997], "roc": [11, 24, 106, 136, 151, 208, 210, 219, 220, 232, 234, 241, 246, 295, 300, 353, 372, 378, 469, 475, 529, 623, 667, 671, 672, 673, 691, 706, 746, 752, 753, 782, 792, 795, 833, 871, 960, 975, 992, 997, 998, 1000, 1001, 1005, 1007, 1011], "868443": 11, "993919": 11, "elaps": [11, 44, 64, 107, 108, 109, 333, 429, 432, 534, 535, 825, 826, 827, 828], "astro": [11, 145, 202, 228], "washington": [11, 145, 202, 228, 264, 272], "fetch_species_distribut": [11, 272, 1004, 1013], "bunch": [11, 339, 340, 341, 429, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 472, 475, 532, 533, 534, 535, 597, 598, 599, 825, 826, 874, 875, 876, 877, 911, 914, 978, 988, 1000, 1002, 1005, 1007, 1011], "ll": [11, 52, 109, 234, 272, 346, 358, 497, 506, 946, 957, 970, 979], "otherwis": [11, 53, 59, 103, 147, 150, 163, 184, 190, 272, 312, 316, 329, 335, 344, 348, 350, 352, 360, 365, 374, 376, 378, 382, 384, 399, 400, 401, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 414, 416, 418, 419, 429, 430, 432, 434, 435, 436, 437, 438, 439, 440, 441, 447, 448, 449, 450, 461, 491, 492, 498, 499, 500, 501, 503, 505, 506, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 546, 547, 553, 555, 556, 559, 562, 567, 575, 576, 579, 596, 597, 598, 600, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 650, 651, 655, 657, 661, 662, 663, 665, 667, 668, 672, 674, 678, 679, 688, 690, 691, 692, 693, 694, 702, 705, 716, 718, 719, 720, 730, 738, 742, 745, 746, 747, 748, 749, 751, 752, 753, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 772, 777, 781, 782, 785, 790, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 821, 823, 824, 826, 829, 830, 831, 832, 833, 837, 838, 845, 846, 847, 848, 851, 852, 853, 855, 856, 857, 861, 862, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 879, 881, 887, 889, 902, 903, 913, 915, 938, 940, 949, 950, 951, 954, 957, 958, 960, 961, 964, 966, 968, 969, 973, 978, 979, 997, 1003, 1004, 1005, 1008, 1011], "improvis": [11, 272], "mpl_toolkit": [11, 42, 64, 83, 93, 155, 179, 202, 204, 272], "except": [11, 16, 41, 50, 90, 99, 107, 117, 143, 190, 197, 209, 216, 247, 259, 272, 275, 276, 279, 281, 293, 339, 346, 348, 349, 350, 351, 358, 360, 365, 368, 371, 375, 378, 379, 381, 382, 384, 397, 425, 430, 433, 447, 448, 449, 474, 519, 521, 522, 523, 525, 527, 529, 530, 533, 535, 576, 592, 595, 600, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 625, 626, 627, 628, 629, 630, 632, 635, 637, 638, 643, 644, 652, 676, 742, 770, 799, 800, 806, 807, 809, 812, 817, 823, 824, 830, 844, 846, 864, 867, 869, 872, 875, 877, 885, 907, 938, 940, 950, 954, 969, 979, 987, 988, 996, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1012], "importerror": [11, 16, 50, 90, 259, 272, 354], "construct_grid": [11, 272], "func": [11, 71, 106, 154, 162, 200, 272, 346, 375, 430, 664, 830, 964, 999, 1001, 1003, 1004, 1012, 1013], "xgrid": [11, 272], "ygrid": [11, 272], "correspond": [11, 13, 14, 16, 20, 25, 26, 30, 38, 50, 62, 73, 77, 89, 101, 104, 107, 108, 110, 118, 132, 135, 136, 139, 144, 147, 154, 171, 174, 182, 183, 186, 191, 200, 210, 215, 216, 223, 230, 238, 240, 242, 243, 248, 249, 272, 284, 290, 291, 292, 321, 324, 325, 329, 334, 340, 341, 342, 345, 346, 348, 350, 353, 354, 359, 360, 361, 371, 372, 374, 376, 377, 378, 379, 381, 382, 383, 384, 389, 395, 402, 404, 406, 410, 413, 416, 418, 424, 426, 428, 429, 437, 447, 448, 449, 455, 456, 457, 458, 459, 460, 461, 499, 506, 509, 510, 511, 514, 515, 517, 520, 522, 524, 525, 526, 529, 547, 549, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 575, 576, 582, 595, 597, 598, 600, 608, 611, 612, 613, 617, 623, 624, 625, 626, 627, 633, 634, 636, 637, 638, 639, 640, 641, 643, 645, 646, 647, 648, 652, 655, 656, 657, 659, 668, 675, 678, 688, 689, 698, 702, 706, 716, 718, 738, 742, 746, 752, 753, 758, 760, 761, 762, 763, 766, 767, 769, 777, 785, 787, 795, 797, 798, 801, 802, 803, 804, 805, 806, 807, 811, 812, 813, 815, 823, 824, 833, 836, 837, 839, 840, 843, 847, 855, 866, 867, 868, 871, 874, 875, 876, 877, 891, 897, 911, 914, 929, 943, 944, 946, 947, 948, 950, 951, 953, 954, 955, 957, 958, 959, 960, 961, 964, 965, 968, 969, 972, 979, 985, 988, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "coordin": [11, 12, 14, 51, 92, 121, 142, 167, 202, 240, 272, 333, 341, 379, 384, 408, 412, 413, 414, 426, 436, 437, 443, 496, 502, 503, 504, 505, 507, 508, 510, 511, 512, 513, 515, 579, 611, 612, 616, 617, 618, 619, 620, 621, 623, 625, 626, 627, 628, 646, 647, 648, 649, 653, 654, 655, 658, 659, 671, 728, 733, 866, 950, 951, 969, 986, 995, 998, 999, 1000, 1004, 1006, 1008, 1009, 1010], "corner": [11, 14, 25, 50, 153, 236, 240, 248, 249, 272, 295, 341, 346, 463, 878, 880, 954, 1009], "cell": [11, 12, 20, 25, 30, 67, 68, 106, 108, 109, 118, 119, 122, 125, 133, 136, 143, 154, 155, 156, 163, 210, 211, 212, 216, 220, 221, 222, 223, 230, 237, 239, 240, 246, 251, 272, 277, 285, 289, 290, 292, 293, 295, 299, 328, 343, 351, 657, 954, 955, 1001, 1009], "xmin": [11, 73, 172, 174, 191, 192, 272], "x_left_lower_corn": [11, 272, 341, 463], "grid_siz": [11, 58, 272, 341, 463], "xmax": [11, 73, 172, 174, 191, 192, 272], "nx": [11, 272, 341, 463], "ymin": [11, 73, 169, 171, 174, 175, 183, 191, 239, 272], "y_left_lower_corn": [11, 272, 341, 463], "ny": [11, 13, 238, 272, 341, 343, 463, 944, 966], "create_species_bunch": 11, "species_nam": [11, 272], "record": [11, 88, 105, 117, 156, 216, 285, 322, 333, 346, 374, 376, 415, 422, 463, 585, 608, 657, 735, 738, 742, 743, 744, 745, 789, 812, 1008, 1009], "join": [11, 12, 19, 52, 149, 200, 239, 281, 341, 361, 428, 977, 988, 995, 1003], "ascii": [11, 272, 382, 452, 553, 554, 556], "pt": [11, 341, 383, 842, 964], "desir": [11, 23, 103, 136, 150, 182, 184, 279, 283, 339, 346, 348, 350, 354, 368, 371, 374, 377, 378, 379, 383, 468, 503, 505, 509, 512, 532, 558, 567, 568, 629, 635, 650, 651, 664, 673, 700, 806, 807, 811, 826, 831, 833, 836, 837, 839, 840, 842, 843, 847, 850, 852, 854, 855, 890, 923, 946, 948, 951, 957, 964, 968, 969, 970, 979, 995, 1003, 1004, 1005, 1008], "pts_": 11, "ix": [11, 248, 315], "searchsort": 11, "dd": [11, 12, 120, 272, 463], "ii": [11, 88, 155, 189, 234, 343, 382, 547, 548, 554, 603, 631, 632, 829, 838, 950, 964, 972, 1012], "lat": [11, 272, 463, 728], "cov_": [11, 77], "plot_species_distribut": 11, "bradypus_variegatus_0": 11, "microryzomys_minutus_0": 11, "meshgrid": [11, 16, 25, 39, 55, 75, 110, 120, 139, 140, 141, 142, 144, 155, 193, 194, 195, 196, 207, 209, 229, 265, 272, 274, 281, 282, 302, 307, 308, 313, 314, 317, 318, 596], "bv_bunch": 11, "mm_bunch": 11, "background_point": 11, "c_": [11, 16, 24, 25, 26, 55, 75, 88, 110, 113, 119, 120, 129, 140, 180, 195, 198, 209, 265, 282, 284, 302, 308, 314, 317, 318, 374, 624, 679, 680, 683, 954, 983, 986, 987], "randint": [11, 34, 76, 85, 113, 150, 156, 205, 212, 216, 218, 251, 290, 295, 348, 351, 359, 365, 767, 784, 801, 802, 803, 805, 943, 944], "land": [11, 272, 361, 381], "water": 11, "land_refer": [11, 272], "standard": [11, 12, 13, 20, 25, 30, 32, 52, 58, 66, 67, 69, 75, 76, 80, 88, 101, 104, 106, 107, 108, 109, 110, 118, 122, 136, 138, 143, 145, 147, 154, 161, 167, 171, 180, 182, 191, 202, 203, 204, 214, 219, 230, 234, 237, 238, 239, 240, 242, 279, 284, 306, 320, 333, 334, 338, 339, 340, 342, 343, 344, 346, 348, 349, 351, 352, 355, 358, 360, 364, 368, 370, 374, 376, 377, 378, 382, 384, 411, 433, 437, 453, 461, 466, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 487, 489, 490, 495, 497, 500, 506, 517, 555, 559, 576, 599, 609, 610, 637, 638, 639, 640, 641, 643, 652, 654, 658, 752, 769, 784, 785, 803, 806, 807, 808, 809, 810, 812, 814, 815, 816, 817, 818, 819, 820, 830, 835, 836, 839, 842, 843, 844, 846, 854, 855, 856, 857, 864, 866, 867, 886, 943, 946, 950, 951, 954, 956, 957, 958, 960, 968, 969, 974, 978, 979, 984, 986, 987, 988, 990, 1001, 1002, 1003, 1004, 1006, 1007, 1008], "cov_train": 11, "train_cover_std": 11, "cyl": [11, 272], "llcrnrlat": [11, 272], "urcrnrlat": [11, 272], "llcrnrlon": [11, 272], "urcrnrlon": [11, 272], "drawcoastlin": [11, 272], "drawcountri": [11, 272], "9998": [11, 272], "solid": [11, 16, 29, 31, 113, 141, 194, 195, 209, 219, 272, 281, 978], "z": [11, 16, 55, 110, 129, 140, 142, 155, 192, 194, 195, 202, 204, 209, 214, 229, 265, 272, 274, 281, 284, 302, 308, 313, 314, 318, 343, 371, 379, 381, 518, 519, 550, 604, 629, 636, 650, 651, 654, 658, 664, 688, 749, 846, 950, 951, 958, 959, 987, 1010], "float64": [11, 14, 45, 50, 67, 113, 115, 116, 154, 155, 250, 292, 293, 334, 340, 346, 348, 360, 382, 436, 437, 443, 461, 462, 473, 474, 507, 513, 546, 547, 554, 556, 606, 623, 638, 640, 664, 702, 831, 839, 840, 868, 869, 871, 872, 875, 877, 884, 886, 925, 928, 930, 931, 932, 969, 979, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013], "idx": [11, 16, 19, 42, 52, 96, 103, 107, 110, 117, 123, 147, 155, 157, 166, 174, 181, 182, 191, 203, 325, 375, 378], "9999": [11, 200, 272, 300, 463, 592, 1003], "coverages_land": 11, "contourf": [11, 16, 110, 196, 214, 265, 272, 274, 281, 282, 302, 307, 313, 318, 596, 597], "pts_train": 11, "pts_test": 11, "auc": [11, 24, 136, 182, 200, 219, 236, 239, 243, 246, 248, 249, 295, 372, 667, 673, 752, 954, 1000, 1003, 1007], "pred_background": 11, "pred_test": 11, "cov_test": 11, "r_": [11, 96, 195, 196, 226, 246, 265, 266, 307, 313, 318, 374, 672, 954, 970], "fpr": [11, 210, 219, 236, 248, 249, 353, 557, 561, 663, 667, 671, 691, 753, 954, 992, 995, 1011], "tpr": [11, 210, 219, 236, 248, 249, 353, 667, 671, 753, 954, 992, 995, 1011], "threshold": [11, 24, 39, 62, 90, 96, 136, 151, 155, 157, 177, 210, 212, 236, 237, 238, 246, 258, 294, 295, 296, 325, 328, 360, 374, 379, 381, 383, 406, 407, 410, 411, 434, 465, 473, 474, 496, 502, 507, 513, 514, 515, 528, 553, 556, 558, 562, 567, 568, 609, 632, 636, 641, 643, 657, 663, 665, 667, 668, 671, 672, 685, 690, 691, 703, 704, 720, 746, 752, 753, 758, 761, 762, 782, 801, 812, 813, 829, 831, 833, 849, 861, 862, 863, 871, 878, 880, 928, 950, 954, 957, 958, 960, 964, 967, 969, 970, 974, 975, 995, 999, 1000, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1011, 1012, 1013], "roc_curv": [11, 210, 236, 248, 667, 671, 691, 746, 752, 954, 995, 996, 997, 1000, 1001, 1003, 1008, 1011, 1013], "roc_auc": [11, 136, 239, 243, 248, 249, 353, 599, 667, 697, 954, 992], "ntime": [11, 250], "103": [11, 109, 117, 258, 259, 341, 381, 462, 520, 521, 975, 995], "plot_species_distribution_model": [11, 463, 975], "multi": [11, 29, 84, 100, 102, 120, 123, 125, 129, 140, 151, 160, 166, 168, 169, 171, 174, 181, 189, 198, 201, 204, 208, 209, 217, 220, 232, 236, 248, 258, 273, 280, 281, 282, 288, 293, 302, 304, 313, 318, 320, 323, 324, 325, 326, 328, 334, 341, 343, 348, 349, 355, 360, 364, 374, 381, 382, 384, 391, 402, 417, 427, 434, 439, 460, 461, 469, 470, 475, 479, 480, 484, 485, 487, 506, 514, 515, 516, 518, 520, 522, 523, 524, 526, 529, 530, 532, 534, 575, 596, 598, 608, 611, 612, 617, 618, 622, 623, 625, 626, 627, 628, 631, 633, 637, 638, 639, 640, 641, 646, 649, 655, 668, 678, 685, 698, 704, 706, 747, 763, 777, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 813, 814, 816, 822, 823, 824, 827, 833, 846, 850, 861, 862, 866, 868, 871, 874, 875, 876, 878, 879, 880, 886, 889, 892, 943, 955, 957, 961, 964, 968, 973, 974, 975, 976, 979, 985, 989, 990, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1008, 1009, 1011, 1012, 1013], "iri": [11, 17, 28, 29, 31, 38, 42, 70, 81, 86, 89, 91, 97, 100, 101, 102, 103, 105, 120, 123, 129, 132, 137, 139, 142, 146, 151, 159, 160, 165, 174, 175, 179, 214, 217, 223, 227, 233, 244, 245, 248, 249, 254, 262, 268, 270, 274, 275, 281, 290, 296, 301, 303, 304, 306, 308, 310, 311, 312, 323, 324, 326, 327, 328, 339, 340, 359, 374, 375, 378, 379, 381, 412, 461, 469, 506, 514, 518, 522, 529, 575, 587, 596, 641, 763, 777, 861, 862, 863, 866, 871, 874, 878, 879, 880, 943, 944, 948, 953, 954, 957, 961, 964, 967, 968, 969, 970, 975, 979, 986, 987, 990, 1008], "emploi": [12, 138, 215, 360, 376, 382, 415, 443, 547, 554, 978, 987, 1001], "techniqu": [12, 18, 66, 68, 89, 97, 102, 112, 128, 135, 136, 150, 151, 153, 190, 204, 206, 244, 256, 263, 291, 298, 312, 324, 335, 343, 358, 360, 372, 373, 374, 378, 379, 380, 381, 382, 383, 412, 413, 414, 415, 499, 519, 642, 654, 658, 659, 690, 720, 946, 950, 951, 953, 954, 957, 960, 962, 966, 968, 970, 974, 978, 982, 987, 988, 1008], "histor": [12, 182, 974], "quot": [12, 15, 66, 240, 320, 321, 334, 340, 341, 344, 350, 364, 370, 373, 453, 454, 461, 954, 966, 969, 988, 1010], "quantiti": [12, 111, 239, 246, 290, 333, 360, 374, 381, 686, 687, 688, 749, 822, 943, 945, 948, 950, 1000], "daili": [12, 117, 978], "price": [12, 71, 111, 112, 117, 122, 219, 285, 944, 950, 978, 984], "link": [12, 17, 101, 154, 155, 161, 182, 186, 200, 225, 242, 269, 324, 334, 344, 345, 346, 347, 348, 350, 354, 360, 372, 374, 376, 379, 384, 526, 527, 575, 613, 634, 645, 653, 670, 885, 887, 950, 957, 970, 971, 973, 977, 982, 986, 988, 993, 995, 998, 999, 1002, 1003, 1006, 1012], "fluctuat": [12, 57, 117, 182, 246, 1003], "normalesup": [12, 30, 43, 63, 214], "2003": [12, 371, 374, 379, 382, 416, 417, 427, 478, 480, 654, 658, 801, 803, 950, 951, 956, 966, 1003], "2008": [12, 376, 378, 379, 443, 499, 528, 555, 610, 629, 650, 651, 657, 681, 690, 720, 796, 801, 805, 822, 948, 951, 952, 954, 955, 956, 959, 960, 969], "calm": 12, "ago": [12, 974], "tech": [12, 343, 804], "firm": [12, 374], "crash": [12, 346, 433, 856, 857, 864, 964, 999, 1003, 1011, 1012], "nasdaq": 12, "alphavantag": 12, "symbol_dict": 12, "tot": 12, "xom": 12, "exxon": 12, "cvx": 12, "chevron": 12, "cop": 12, "conocophillip": 12, "vlo": 12, "valero": 12, "energi": [12, 117, 354, 822, 959, 986], "msft": 12, "ibm": [12, 19, 301, 322, 341], "twx": 12, "warner": [12, 1010, 1011], "cmcsa": 12, "comcast": 12, "cvc": 12, "cablevis": 12, "yhoo": 12, "yahoo": 12, "dell": 12, "hpq": 12, "hp": [12, 988], "amzn": 12, "amazon": 12, "tm": [12, 957], "toyota": 12, "caj": 12, "canon": [12, 360, 372, 381, 447, 448, 450, 732, 974, 976, 990], "sne": [12, 151, 201, 202, 203, 204, 206, 259, 479, 490, 657, 975, 989, 990], "soni": [12, 1005, 1007], "ford": 12, "hmc": 12, "honda": 12, "nav": 12, "navistar": 12, "noc": 12, "northrop": 12, "grumman": 12, "ba": [12, 823, 824, 958], "boe": 12, "ko": [12, 25, 139], "coca": 12, "cola": 12, "mmm": 12, "3m": 12, "mcd": [12, 75, 76, 376, 434, 439], "mcdonald": 12, "pep": [12, 354, 995], "pepsi": 12, "kellogg": 12, "un": [12, 346, 372, 382, 386, 498, 554, 759, 829, 838, 849, 853, 1004], "unilev": 12, "mar": 12, "marriott": 12, "pg": [12, 352, 614, 950, 1000], "procter": 12, "gambl": 12, "colgat": [12, 17], "palmol": 12, "ge": [12, 945, 956, 1007], "electr": [12, 117, 343, 374], "wfc": 12, "fargo": 12, "jpm": 12, "jpmorgan": [12, 978], "chase": [12, 995], "aig": 12, "axp": 12, "bac": 12, "bank": [12, 19, 978], "goldman": 12, "sach": 12, "aapl": 12, "appl": [12, 333, 344, 358, 955], "sap": 12, "csco": 12, "cisco": 12, "txn": 12, "texa": [12, 66], "instrument": [12, 66, 88, 153], "xrx": 12, "xerox": 12, "wmt": 12, "wal": 12, "mart": [12, 1005], "hd": 12, "depot": 12, "gsk": 12, "glaxosmithklin": 12, "pfe": 12, "pfizer": 12, "sny": 12, "sanofi": 12, "aventi": 12, "nv": 12, "novarti": 12, "kmb": 12, "kimberli": 12, "clark": 12, "ryder": 12, "gd": [12, 125], "dynam": [12, 13, 155, 520, 521, 522, 523, 528, 529, 530, 531, 544, 545, 641, 642, 643, 970, 978, 1001, 1007, 1012], "rtn": 12, "raytheon": 12, "cat": [12, 67, 155, 156, 219, 291, 292, 293, 294, 295, 341, 382, 453, 547, 677, 683, 718, 747, 847, 954, 964, 1004, 1005, 1007], "caterpillar": 12, "dupont": 12, "nemour": 12, "symbol": [12, 322, 334, 348, 352, 376, 382, 464, 547, 553, 554, 556, 878, 880, 973], "fetch": [12, 17, 122, 154, 200, 339, 340, 341, 346, 350, 351, 354, 373, 379, 461, 520, 521, 522, 523, 528, 529, 530, 531, 553, 554, 556, 1003, 1011], "histori": [12, 524, 525, 995], "stderr": [12, 795], "url": [12, 17, 136, 340, 343, 348, 350], "githubusercont": 12, "master": [12, 16, 259, 293, 346, 350, 978], "csv": [12, 340, 343, 351, 1003, 1008], "read_csv": [12, 351, 461, 1010], "close_pric": 12, "vstack": [12, 25, 54, 62, 141, 142, 164, 225, 229, 259, 272, 313, 596, 955, 1003], "q": [12, 67, 79, 114, 182, 291, 371, 374, 379, 902, 950, 969], "open_pric": 12, "carri": [12, 29, 101, 150, 239, 242, 247, 275, 281, 322, 361, 368, 382, 522, 523, 524, 525, 529, 530, 531, 874, 875, 876, 877, 978, 987], "invers": [12, 51, 72, 73, 74, 101, 151, 230, 246, 248, 254, 262, 308, 321, 322, 338, 360, 373, 375, 377, 378, 379, 382, 386, 410, 430, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 492, 498, 499, 500, 504, 506, 508, 522, 526, 529, 554, 555, 556, 593, 609, 610, 623, 624, 631, 633, 639, 640, 641, 642, 643, 645, 688, 707, 716, 761, 762, 808, 809, 816, 817, 823, 824, 826, 830, 833, 839, 840, 842, 858, 859, 866, 867, 868, 871, 872, 874, 876, 892, 948, 950, 954, 957, 958, 964, 968, 969, 975, 986, 988, 989, 990, 995, 998, 1003, 1006, 1007, 1009, 1013], "correl": [12, 26, 77, 79, 80, 97, 108, 109, 119, 132, 135, 143, 151, 152, 153, 155, 156, 166, 171, 177, 200, 239, 245, 258, 285, 289, 290, 300, 339, 342, 343, 351, 360, 363, 371, 376, 378, 383, 415, 422, 447, 448, 450, 458, 459, 465, 489, 529, 571, 574, 592, 599, 600, 601, 647, 648, 707, 721, 742, 743, 744, 792, 806, 807, 843, 844, 846, 855, 945, 950, 955, 961, 964, 968, 970, 974, 975, 976, 990, 995, 996, 997, 1008, 1009], "condition": [12, 26, 182, 372, 376, 722, 948], "connect": [12, 36, 41, 44, 48, 51, 59, 63, 64, 344, 346, 355, 360, 376, 406, 410, 417, 427, 428, 550, 551, 660, 808, 809, 810, 812, 814, 816, 817, 818, 819, 820, 952, 957, 959, 967, 977, 999, 1008, 1012], "edge_model": 12, "graphicallassocv": [12, 77, 365, 376, 436, 438, 439, 440, 441, 443, 1003, 1007, 1009, 1011], "rather": [12, 26, 50, 77, 101, 104, 117, 149, 154, 182, 183, 196, 219, 283, 284, 320, 321, 329, 334, 342, 344, 346, 348, 351, 352, 354, 358, 359, 360, 361, 374, 378, 379, 381, 382, 384, 413, 426, 428, 530, 546, 553, 554, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 594, 611, 612, 617, 618, 625, 626, 627, 628, 745, 777, 797, 799, 800, 829, 866, 867, 878, 903, 948, 950, 951, 954, 956, 957, 961, 974, 983, 986, 995, 996, 997, 998, 1002, 1003, 1004, 1005, 1010, 1011], "former": [12, 322, 381, 382, 530, 765, 772, 781, 956, 995, 1001, 1004], "recoveri": [12, 77, 166, 181, 376, 383], "03162278": 12, "05994843": 12, "11364637": 12, "21544347": 12, "40842387": 12, "77426368": 12, "46779927": 12, "7825594": 12, "27499706": 12, "rerun": [12, 25, 39, 67, 68, 106, 108, 109, 118, 119, 122, 125, 133, 143, 154, 155, 156, 163, 210, 211, 212, 216, 220, 221, 222, 223, 230, 237, 239, 240, 246, 251, 277, 285, 289, 290, 292, 293, 295, 299, 328, 354], "trust": [12, 25, 67, 68, 76, 101, 106, 108, 109, 118, 119, 122, 125, 133, 143, 154, 155, 156, 157, 163, 210, 211, 212, 216, 220, 221, 222, 223, 230, 237, 239, 240, 246, 251, 277, 285, 289, 290, 292, 293, 295, 299, 328, 350, 361, 368, 372, 983, 1009], "unabl": [12, 25, 67, 68, 106, 108, 109, 118, 119, 122, 125, 133, 143, 153, 154, 155, 156, 163, 166, 182, 210, 211, 212, 216, 220, 221, 222, 223, 230, 237, 239, 240, 246, 251, 277, 285, 289, 290, 292, 293, 295, 299, 328, 335, 846, 964, 1004], "render": [12, 25, 50, 67, 68, 106, 108, 109, 118, 119, 122, 125, 133, 143, 154, 155, 156, 163, 177, 186, 210, 211, 212, 216, 220, 221, 222, 223, 230, 237, 239, 240, 246, 251, 277, 285, 289, 290, 292, 293, 295, 299, 328, 346, 348, 350, 351, 352, 360, 516, 554, 596, 665, 667, 843, 855, 878, 880, 953, 970, 1008, 1012], "nbviewer": [12, 25, 67, 68, 106, 108, 109, 118, 119, 122, 125, 133, 143, 154, 155, 156, 163, 210, 211, 212, 216, 220, 221, 222, 223, 230, 237, 239, 240, 246, 251, 277, 285, 289, 290, 292, 293, 295, 299, 328], "nbsp": [12, 13, 25, 67, 68, 106, 108, 109, 114, 118, 119, 122, 125, 133, 143, 154, 155, 156, 163, 171, 210, 211, 212, 216, 220, 221, 222, 223, 230, 237, 239, 240, 246, 251, 277, 285, 289, 290, 292, 293, 295, 299, 328], "graphicallassocvifittedgraphicallassocv": 12, "group": [12, 34, 37, 52, 55, 57, 124, 155, 157, 182, 203, 216, 231, 234, 285, 295, 299, 321, 328, 341, 351, 360, 361, 365, 374, 380, 381, 382, 399, 411, 460, 553, 554, 556, 559, 683, 752, 763, 764, 765, 768, 769, 770, 771, 772, 773, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 787, 788, 789, 790, 791, 793, 839, 840, 876, 877, 950, 951, 953, 954, 955, 964, 970, 971, 973, 979, 982, 983, 1001, 1002, 1003, 1004, 1007, 1008, 1009, 1011, 1012, 1013], "amongst": [12, 970], "indic": [12, 19, 20, 24, 25, 45, 56, 57, 63, 71, 80, 83, 87, 101, 106, 112, 143, 146, 150, 153, 155, 179, 204, 213, 216, 233, 241, 242, 245, 246, 259, 272, 297, 298, 301, 320, 321, 322, 328, 334, 341, 346, 347, 348, 350, 354, 355, 358, 360, 370, 371, 372, 374, 376, 378, 379, 381, 382, 385, 389, 402, 405, 409, 415, 416, 417, 418, 420, 421, 422, 425, 429, 432, 437, 452, 473, 474, 476, 477, 478, 488, 497, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 546, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 572, 573, 585, 592, 593, 594, 595, 597, 598, 604, 611, 612, 615, 616, 617, 618, 619, 620, 626, 628, 630, 638, 640, 647, 648, 655, 657, 659, 661, 668, 672, 677, 678, 683, 684, 685, 689, 692, 693, 694, 695, 698, 702, 703, 704, 705, 718, 735, 742, 743, 744, 745, 747, 748, 749, 751, 752, 756, 757, 758, 760, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 793, 794, 795, 797, 799, 800, 806, 807, 808, 809, 810, 812, 814, 816, 817, 818, 830, 833, 837, 839, 847, 868, 869, 870, 871, 872, 874, 875, 876, 877, 878, 880, 882, 886, 887, 892, 907, 917, 918, 929, 930, 931, 932, 933, 934, 935, 944, 949, 950, 951, 954, 955, 956, 957, 958, 961, 964, 965, 968, 969, 974, 979, 983, 986, 988, 995, 996, 997, 998, 999, 1000, 1003, 1005, 1006, 1008, 1010, 1011, 1012], "reflect": [12, 37, 43, 44, 75, 85, 88, 111, 155, 156, 182, 200, 248, 263, 321, 342, 345, 350, 360, 363, 371, 415, 421, 951, 954, 960, 962, 987, 996, 1004, 1012], "properti": [12, 24, 145, 146, 184, 199, 226, 261, 284, 328, 333, 339, 346, 348, 364, 371, 372, 374, 376, 379, 381, 383, 384, 389, 407, 410, 416, 417, 418, 429, 430, 507, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 556, 558, 559, 562, 575, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 597, 611, 617, 620, 625, 627, 639, 640, 664, 669, 670, 673, 763, 766, 767, 777, 794, 795, 825, 826, 839, 840, 841, 847, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 943, 946, 949, 950, 951, 954, 955, 957, 960, 964, 967, 969, 970, 971, 974, 979, 1000, 1004, 1005, 1008, 1009, 1012], "impact": [12, 13, 24, 33, 34, 39, 40, 61, 71, 101, 132, 151, 153, 154, 155, 162, 184, 186, 200, 219, 233, 256, 262, 284, 293, 316, 321, 329, 333, 334, 339, 358, 361, 372, 374, 379, 412, 414, 501, 505, 512, 555, 631, 632, 633, 637, 639, 641, 642, 643, 657, 758, 763, 766, 767, 777, 789, 806, 807, 808, 843, 855, 866, 867, 889, 903, 925, 928, 943, 953, 961, 969, 975, 1002, 1005, 1008], "affinity_propag": [12, 41], "covariance_": [12, 32, 75, 77, 434, 435, 436, 437, 438, 439, 440, 441, 514, 515, 948, 1002], "n_label": [12, 85, 217, 360, 452, 488, 678, 685, 690, 703, 704, 718, 720, 756, 757, 783, 954, 1001, 1003], "lai": [12, 284, 312, 960], "canva": [12, 16], "manifold": [12, 36, 49, 64, 106, 205, 206, 207, 213, 259, 268, 269, 288, 292, 293, 299, 339, 360, 374, 379, 381, 467, 490, 495, 509, 514, 531, 815, 827, 836, 859, 889, 957, 975, 989, 990, 995, 996, 998, 999, 1000, 1001, 1002, 1012], "dens": [12, 52, 151, 160, 166, 176, 292, 293, 301, 333, 355, 360, 374, 379, 381, 383, 408, 411, 412, 414, 429, 432, 461, 488, 489, 492, 499, 500, 509, 531, 572, 573, 594, 595, 617, 622, 623, 624, 631, 632, 633, 637, 638, 641, 642, 643, 652, 653, 654, 657, 658, 724, 725, 731, 743, 756, 823, 824, 831, 838, 839, 841, 843, 844, 845, 846, 855, 856, 857, 858, 859, 866, 867, 868, 869, 871, 872, 904, 925, 928, 944, 947, 950, 951, 954, 955, 957, 960, 964, 966, 967, 968, 969, 970, 975, 995, 997, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012], "eigen_solv": [12, 41, 43, 63, 202, 203, 379, 417, 427, 500, 653, 654, 656, 658, 660, 951, 996, 1005, 1008, 1009, 1010], "arpack": [12, 19, 41, 43, 63, 66, 203, 295, 379, 416, 417, 418, 427, 500, 506, 509, 653, 654, 656, 658, 660, 951, 1001, 1002, 1007, 1011, 1012, 1013], "don": [12, 26, 51, 66, 117, 154, 203, 216, 217, 239, 259, 300, 305, 309, 320, 321, 333, 340, 346, 348, 350, 352, 354, 359, 364, 365, 375, 382, 611, 617, 794, 874, 875, 876, 877, 918, 943, 950, 953, 955, 958, 960, 968, 988, 999, 1004, 1011, 1012, 1013], "control": [12, 16, 32, 58, 91, 92, 107, 127, 143, 145, 166, 183, 186, 190, 212, 213, 240, 242, 256, 261, 277, 289, 291, 312, 324, 326, 327, 333, 334, 339, 342, 346, 348, 351, 354, 358, 360, 364, 368, 373, 374, 377, 378, 379, 380, 383, 384, 399, 405, 414, 419, 436, 437, 443, 496, 501, 502, 503, 504, 505, 508, 510, 511, 512, 513, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 558, 559, 561, 579, 584, 590, 592, 597, 599, 604, 606, 607, 611, 612, 614, 615, 616, 617, 619, 620, 621, 637, 639, 641, 642, 647, 648, 652, 657, 666, 674, 761, 762, 763, 765, 766, 767, 768, 769, 777, 778, 779, 780, 781, 782, 783, 785, 787, 788, 789, 790, 792, 793, 796, 797, 800, 823, 824, 845, 847, 858, 859, 866, 867, 868, 869, 871, 872, 874, 875, 876, 877, 880, 920, 922, 941, 943, 950, 951, 953, 954, 955, 957, 960, 961, 964, 966, 968, 969, 970, 973, 974, 976, 986, 990, 995, 997, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "neighbor": [12, 29, 36, 41, 44, 57, 63, 68, 117, 118, 120, 123, 128, 149, 150, 203, 204, 206, 207, 209, 218, 219, 233, 242, 263, 264, 265, 266, 268, 269, 270, 272, 276, 290, 292, 293, 320, 338, 343, 355, 358, 360, 364, 374, 380, 381, 382, 385, 388, 398, 406, 409, 410, 413, 415, 417, 422, 423, 426, 428, 461, 467, 469, 528, 535, 567, 572, 573, 592, 593, 596, 653, 654, 655, 656, 657, 658, 660, 661, 745, 763, 792, 826, 827, 846, 862, 870, 928, 955, 960, 974, 975, 976, 982, 987, 989, 990, 995, 997, 998, 999, 1000, 1001, 1002], "node": [12, 38, 111, 115, 166, 288, 294, 295, 324, 328, 354, 355, 374, 376, 379, 381, 406, 407, 410, 428, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 615, 619, 621, 647, 648, 657, 806, 807, 874, 875, 876, 877, 878, 880, 908, 922, 957, 959, 960, 961, 970, 998, 999, 1000, 1001, 1002, 1004, 1007, 1008, 1009, 1010, 1012], "plane": [12, 136, 194, 214, 265, 310, 312, 313, 318, 343, 417, 427, 948, 950, 969, 986], "node_position_model": 12, "locallylinearembed": [12, 202, 203, 204, 292, 653, 655, 657, 951, 957, 1000, 1001, 1009, 1010, 1011], "n_neighbor": [12, 41, 59, 64, 123, 149, 202, 203, 204, 206, 209, 219, 259, 261, 262, 265, 266, 267, 268, 271, 284, 288, 290, 320, 381, 417, 567, 572, 573, 593, 653, 654, 656, 658, 660, 661, 808, 809, 810, 812, 814, 815, 819, 861, 862, 944, 951, 957, 960, 967, 1002, 1009, 1011, 1012], "output": [12, 15, 16, 24, 26, 34, 50, 56, 90, 100, 101, 102, 104, 110, 122, 125, 128, 129, 138, 146, 149, 150, 151, 154, 178, 208, 216, 220, 223, 228, 233, 237, 239, 242, 246, 248, 249, 256, 259, 280, 283, 285, 286, 288, 291, 292, 294, 321, 322, 323, 324, 326, 328, 339, 340, 341, 343, 344, 346, 348, 352, 354, 358, 359, 360, 372, 373, 374, 375, 377, 378, 381, 382, 383, 384, 390, 395, 398, 402, 406, 407, 408, 410, 411, 412, 414, 415, 417, 424, 425, 427, 428, 429, 430, 431, 432, 433, 447, 448, 449, 450, 453, 456, 457, 458, 459, 460, 461, 462, 468, 470, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 530, 531, 532, 533, 534, 535, 546, 547, 548, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 576, 592, 593, 594, 595, 596, 597, 598, 600, 603, 604, 605, 606, 607, 611, 612, 615, 617, 618, 619, 622, 623, 625, 626, 627, 628, 631, 632, 633, 636, 638, 639, 641, 643, 644, 646, 647, 648, 649, 653, 654, 655, 657, 659, 661, 664, 665, 678, 679, 686, 687, 688, 690, 692, 699, 709, 710, 712, 714, 715, 716, 717, 718, 720, 725, 731, 736, 749, 752, 754, 755, 761, 762, 765, 766, 767, 768, 769, 775, 777, 778, 779, 780, 781, 782, 783, 787, 790, 791, 792, 794, 795, 796, 797, 798, 799, 800, 809, 810, 811, 815, 816, 818, 822, 823, 824, 825, 826, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 854, 855, 858, 859, 863, 864, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 878, 879, 880, 881, 887, 889, 892, 903, 904, 910, 911, 913, 921, 941, 943, 944, 946, 948, 950, 951, 954, 955, 956, 957, 958, 961, 964, 969, 975, 976, 979, 980, 982, 990, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "edg": [12, 25, 43, 63, 90, 111, 205, 246, 354, 360, 371, 374, 376, 418, 526, 527, 550, 551, 553, 554, 556, 761, 803, 808, 809, 810, 812, 814, 816, 817, 818, 819, 820, 831, 879, 964, 967, 978, 1001, 1003, 1006, 1009], "displai": [12, 13, 24, 26, 32, 34, 43, 45, 57, 67, 76, 77, 79, 80, 82, 87, 107, 118, 119, 122, 149, 151, 154, 155, 167, 169, 200, 208, 209, 219, 223, 229, 236, 240, 241, 246, 248, 249, 253, 269, 285, 289, 290, 307, 325, 333, 346, 348, 349, 353, 355, 364, 373, 375, 379, 382, 383, 388, 403, 429, 432, 433, 461, 506, 529, 595, 596, 597, 623, 652, 662, 663, 665, 666, 667, 678, 683, 746, 753, 763, 769, 777, 785, 792, 826, 827, 839, 841, 846, 864, 871, 878, 879, 880, 894, 920, 941, 954, 958, 973, 975, 990, 1004, 1006, 1007, 1009, 1010], "strength": [12, 122, 145, 182, 186, 240, 288, 333, 377, 381, 411, 532, 533, 608, 613, 614, 617, 623, 624, 634, 637, 638, 639, 640, 641, 643, 645, 652, 747, 823, 824, 866, 867, 871, 872, 943, 950, 957, 960, 968, 969], "plan": [12, 340, 344, 346, 347, 361, 964, 998], "fair": [12, 26, 381, 655, 659, 795, 955, 978], "crucial": [12, 117, 153, 186, 234, 333, 345, 346, 360, 361, 374, 384, 969], "challeng": [12, 122, 138, 155, 161, 200, 209, 335, 341, 342, 374, 376, 427, 437, 954, 960, 978, 979], "overlap": [12, 13, 34, 52, 83, 115, 135, 205, 227, 321, 344, 371, 374, 378, 381, 382, 552, 756, 757, 764, 768, 770, 771, 772, 773, 781, 951, 964, 1001], "heurist": [12, 15, 113, 219, 320, 334, 374, 383, 414, 417, 426, 427, 473, 474, 502, 504, 511, 641, 642, 643, 656, 660, 766, 767, 868, 869, 870, 871, 872, 891, 951, 952, 957, 968, 970, 978, 986, 995, 996, 1000, 1004, 1007, 1008], "direct": [12, 79, 80, 87, 89, 95, 136, 188, 225, 231, 236, 268, 277, 284, 308, 313, 344, 346, 347, 350, 354, 361, 364, 374, 377, 379, 382, 383, 417, 427, 436, 437, 443, 499, 506, 514, 553, 554, 556, 567, 606, 653, 815, 948, 949, 950, 955, 957, 959, 974, 987, 995, 998], "nearest": [12, 14, 29, 30, 36, 37, 47, 48, 51, 55, 58, 63, 68, 73, 77, 82, 87, 90, 118, 128, 142, 150, 173, 194, 198, 204, 207, 218, 219, 233, 242, 263, 265, 268, 269, 276, 277, 284, 308, 313, 314, 318, 338, 343, 355, 358, 360, 374, 380, 381, 385, 388, 398, 409, 411, 413, 415, 417, 422, 426, 427, 461, 467, 469, 572, 573, 592, 593, 595, 596, 600, 653, 654, 656, 657, 661, 756, 757, 763, 792, 806, 807, 808, 809, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 826, 827, 831, 846, 928, 951, 960, 969, 974, 975, 976, 982, 990, 995, 997, 998, 999, 1000, 1002, 1004, 1005, 1007], "along": [12, 14, 53, 56, 63, 80, 108, 114, 117, 169, 182, 214, 216, 243, 288, 321, 322, 329, 341, 346, 350, 352, 354, 355, 360, 364, 365, 368, 371, 379, 381, 382, 383, 386, 498, 515, 552, 576, 577, 595, 611, 612, 615, 616, 617, 618, 619, 620, 621, 625, 626, 627, 628, 641, 643, 646, 647, 648, 649, 650, 651, 743, 744, 756, 763, 777, 835, 836, 839, 840, 843, 844, 845, 846, 851, 852, 853, 855, 856, 857, 882, 905, 929, 935, 943, 950, 957, 964, 967, 978, 995, 1000, 1001, 1003, 1007, 1008], "linecollect": [12, 205, 212, 597], "facecolor": [12, 16, 25, 32, 42, 57, 87, 93, 103, 129, 146, 202, 217, 239, 266, 281, 306, 309, 312, 313, 315], "partial_correl": 12, "precision_": [12, 77, 434, 435, 436, 437, 438, 439, 440, 441], "sqrt": [12, 75, 76, 77, 90, 96, 105, 127, 157, 161, 163, 205, 207, 221, 225, 226, 227, 230, 231, 239, 313, 316, 374, 381, 382, 384, 428, 434, 435, 436, 437, 438, 439, 440, 441, 503, 505, 512, 522, 523, 524, 525, 529, 530, 584, 611, 612, 617, 618, 625, 626, 627, 628, 646, 649, 664, 695, 727, 728, 733, 846, 859, 874, 875, 876, 877, 946, 950, 951, 954, 956, 966, 1009], "diag": [12, 77, 146, 227, 230, 379, 384, 497, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 761, 762, 950, 1010], "newaxi": [12, 14, 19, 23, 39, 77, 96, 102, 139, 163, 172, 178, 183, 184, 185, 187, 188, 199, 212, 214, 253, 264, 271, 326, 327, 371, 501, 950], "ab": [12, 17, 37, 71, 91, 97, 103, 111, 122, 132, 136, 157, 169, 173, 193, 195, 198, 200, 205, 239, 279, 306, 318, 374, 503, 505, 512, 592, 710, 806, 807, 841, 954], "triu": 12, "nipy_spectr": [12, 36, 43, 44, 48, 49, 57, 58, 93], "start_idx": [12, 205], "end_idx": [12, 205], "sequenc": [12, 101, 110, 170, 205, 348, 360, 375, 378, 379, 381, 382, 468, 477, 518, 526, 527, 534, 535, 546, 547, 553, 554, 556, 611, 763, 766, 774, 792, 826, 850, 906, 907, 917, 925, 928, 973, 995, 998, 1000, 1001], "line0": [12, 205], "linen": [12, 205], "x0": [12, 174, 191, 205, 279, 305, 360, 395, 429, 532, 533, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 592, 593, 594, 595, 829, 830, 831, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847], "y0": [12, 205], "x1": [12, 16, 79, 84, 103, 113, 141, 194, 205, 279, 305, 348, 360, 395, 429, 474, 532, 533, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 592, 593, 594, 595, 664, 829, 830, 831, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 987], "y1": [12, 84, 103, 205, 474, 681, 955, 956], "xm": [12, 205], "ym": [12, 205], "segment": [12, 14, 17, 21, 33, 44, 45, 151, 205, 212, 341, 354, 374, 382, 417, 427, 473, 474, 656, 822, 954, 973, 975, 978, 1003, 1005, 1007], "lc": [12, 205, 212], "zorder": [12, 55, 89, 119, 129, 139, 147, 172, 180, 203, 205, 212, 215, 225, 289, 295, 313], "hot_r": [12, 279], "norm": [12, 14, 15, 17, 28, 32, 37, 51, 90, 141, 144, 161, 166, 168, 173, 205, 225, 226, 227, 229, 231, 236, 240, 264, 279, 308, 321, 352, 355, 360, 374, 382, 383, 407, 408, 412, 424, 425, 429, 434, 435, 436, 437, 438, 439, 440, 441, 447, 448, 449, 454, 496, 499, 502, 503, 504, 505, 506, 507, 509, 510, 511, 512, 513, 554, 555, 556, 562, 608, 611, 612, 617, 618, 622, 623, 624, 625, 626, 627, 628, 629, 637, 639, 641, 643, 646, 649, 650, 651, 655, 657, 658, 659, 734, 803, 838, 853, 866, 868, 871, 936, 937, 947, 950, 952, 954, 964, 968, 998, 1000, 1002, 1006], "set_arrai": [12, 205, 212], "set_linewidth": [12, 205, 212], "add_collect": [12, 205, 212], "index": [12, 13, 15, 17, 34, 35, 36, 37, 38, 46, 47, 55, 67, 68, 101, 106, 108, 117, 133, 136, 143, 149, 153, 154, 155, 156, 157, 182, 186, 200, 220, 223, 226, 227, 231, 234, 237, 238, 239, 240, 242, 250, 251, 259, 279, 284, 285, 286, 292, 297, 298, 321, 322, 341, 343, 344, 346, 348, 350, 355, 358, 360, 371, 375, 378, 379, 381, 382, 389, 408, 412, 413, 414, 415, 416, 418, 419, 422, 424, 425, 429, 432, 468, 474, 522, 523, 524, 525, 529, 530, 531, 552, 553, 554, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 582, 597, 598, 605, 662, 669, 670, 677, 681, 683, 695, 702, 721, 743, 744, 750, 752, 758, 763, 764, 765, 766, 767, 768, 770, 771, 772, 773, 776, 777, 778, 779, 780, 781, 782, 783, 784, 792, 806, 807, 808, 809, 810, 812, 814, 816, 817, 818, 839, 874, 875, 876, 877, 907, 925, 928, 933, 934, 954, 956, 957, 958, 968, 970, 973, 986, 988, 995, 998, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "dx": [12, 14, 491, 664], "dy": [12, 664], "this_dx": 12, "argmin": [12, 113, 238, 348, 376, 496, 502, 510, 511, 650, 743, 744, 970], "this_di": 12, "horizontalalign": [12, 25, 29, 37, 41, 42, 59, 93, 209, 225, 274, 281], "verticalalign": [12, 25, 36, 37], "edgecolor": [12, 16, 23, 28, 29, 32, 39, 42, 53, 57, 64, 84, 85, 93, 103, 110, 118, 120, 121, 123, 124, 129, 131, 139, 140, 142, 146, 155, 165, 174, 184, 191, 194, 195, 196, 213, 214, 215, 217, 219, 225, 228, 239, 242, 253, 262, 265, 266, 267, 270, 274, 281, 282, 284, 302, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 318, 325, 326, 327, 596], "xlim": [12, 25, 41, 55, 59, 69, 73, 74, 75, 89, 103, 104, 105, 121, 127, 139, 140, 154, 161, 172, 174, 181, 188, 191, 196, 209, 217, 226, 231, 234, 248, 253, 265, 266, 307, 312, 313, 317, 327], "ptp": 12, "ylim": [12, 23, 25, 31, 34, 41, 55, 59, 73, 74, 75, 89, 103, 104, 111, 114, 121, 124, 139, 140, 154, 169, 171, 172, 174, 175, 176, 188, 191, 192, 196, 209, 217, 226, 231, 234, 238, 242, 248, 252, 253, 265, 266, 307, 312, 313, 317, 320, 327, 983], "03": [12, 49, 64, 75, 87, 117, 136, 143, 154, 163, 200, 213, 225, 231, 240, 298, 321, 343, 382, 712, 763, 950, 954, 975], "612": [12, 754, 975], "plot_stock_market": [12, 975], "handwritten": [12, 33, 42, 45, 49, 56, 58, 106, 151, 201, 202, 204, 206, 213, 228, 237, 268, 269, 276, 277, 297, 298, 321, 339, 374, 381, 412, 467, 506, 509, 514, 531, 653, 654, 655, 656, 657, 669, 670, 682, 701, 757, 759, 815, 827, 836, 846, 859, 951, 957, 975, 979, 990], "isomap": [12, 49, 106, 151, 201, 204, 206, 213, 268, 269, 288, 292, 381, 467, 509, 514, 531, 654, 655, 656, 657, 815, 827, 836, 859, 957, 975, 989, 990, 1003, 1005, 1008, 1009, 1010, 1011, 1012], "agglom": [12, 20, 33, 34, 39, 41, 44, 53, 57, 59, 63, 64, 82, 134, 151, 203, 205, 374, 406, 410, 467, 656, 742, 819, 975, 998], "pictur": [12, 17, 21, 33, 45, 63, 151, 213, 231, 341, 361, 374, 379, 382, 427, 458, 459, 486, 974, 975], "greek": [12, 17, 21, 33, 45, 63, 151, 374, 427, 975], "coin": [12, 14, 17, 21, 33, 36, 37, 38, 41, 45, 50, 51, 53, 59, 63, 64, 151, 374, 382, 406, 427, 966, 975, 987], "region": [12, 16, 17, 21, 24, 33, 44, 45, 46, 50, 53, 63, 123, 145, 151, 154, 182, 200, 209, 213, 214, 231, 282, 308, 316, 343, 353, 360, 374, 381, 384, 413, 415, 421, 427, 552, 951, 954, 957, 960, 964, 968, 970, 975, 987], "explor": [13, 34, 104, 105, 117, 157, 206, 207, 219, 240, 241, 247, 248, 256, 286, 290, 308, 321, 329, 340, 343, 345, 352, 368, 374, 381, 437, 763, 766, 774, 847, 943, 950, 951, 953, 959, 961, 964, 978, 982, 988, 1001], "demo": [13, 14, 18, 33, 34, 36, 37, 38, 41, 42, 43, 45, 50, 51, 53, 56, 57, 58, 59, 61, 64, 118, 151, 157, 166, 188, 213, 228, 230, 240, 248, 284, 299, 320, 321, 348, 371, 374, 382, 405, 406, 409, 411, 412, 413, 415, 416, 418, 420, 423, 467, 476, 477, 478, 506, 669, 670, 682, 684, 701, 757, 759, 827, 846, 847, 975], "period": [13, 117, 138, 143, 147, 350, 360, 361, 372, 384, 580, 784, 845, 1003, 1008, 1010], "summari": [13, 136, 292, 328, 329, 343, 358, 657, 678, 752, 879, 952, 955, 973, 988], "style": [13, 23, 25, 76, 114, 171, 190, 200, 243, 346, 353, 374, 382, 408, 412, 424, 665, 769, 785, 886, 887, 899, 995, 998, 1009], "background_gradi": 13, "set_table_attribut": 13, "inlin": [13, 193, 346, 347, 970], "set_capt": 13, "set_table_styl": 13, "selector": [13, 67, 132, 133, 219, 316, 354, 382, 383, 431, 546, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 997, 1005, 1007, 1011], "caption": [13, 66], "prop": [13, 69, 76, 188, 227, 265, 307, 328, 911, 914, 984], "font": [13, 114, 171, 196, 214, 878, 880], "16px": 13, "000000": [13, 41, 154, 171, 200, 239, 283, 701], "502561": 13, "537775": 13, "546752": 13, "003683": 13, "376474": 13, "788755": 13, "627229": 13, "736540": 13, "189": [13, 182, 352, 863, 967], "463088": 13, "500008": 13, "438776": 13, "914405": 13, "005771": 13, "894801": 13, "592511": 13, "192930": 13, "196795": 13, "181": [13, 256, 277, 352], "387599": 13, "820000": 13, "940000": [13, 275], "665000": 13, "480000": 13, "001500": 13, "500000": [13, 275], "240000": 13, "630000": 13, "998000": 13, "060000": 13, "780000": 13, "997900": 13, "281": 13, "41": [13, 68, 136, 182, 219, 328, 341, 343, 422, 434, 446, 457, 586, 589, 600, 611, 612, 617, 623, 625, 626, 627, 629, 646, 650, 651, 664, 745, 801, 956, 960, 975], "996900": 13, "sequenti": [13, 110, 130, 133, 151, 176, 240, 290, 344, 379, 381, 382, 465, 466, 499, 558, 562, 567, 568, 570, 571, 611, 612, 617, 618, 623, 625, 626, 627, 628, 638, 752, 826, 827, 846, 944, 962, 968, 973, 975, 976, 990, 995, 1004, 1007], "lagged_df": 13, "shift": [13, 33, 35, 41, 46, 61, 151, 161, 205, 230, 264, 277, 279, 312, 376, 380, 405, 413, 423, 426, 434, 477, 480, 654, 658, 812, 835, 964, 975, 989, 990, 995, 999, 1003], "renam": [13, 230, 240, 346, 350, 374, 411, 412, 424, 436, 437, 443, 492, 501, 518, 519, 520, 521, 522, 523, 528, 529, 530, 531, 839, 995, 996, 997, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "lagged_count_1h": 13, "lagged_count_2h": 13, "lagged_count_3h": 13, "lagged_count_1d": 13, "lagged_count_1d_1h": 13, "lagged_count_7d": 13, "lagged_count_7d_1h": 13, "roll": [13, 64, 151, 201, 202, 207, 349, 374, 495, 657, 658, 897, 975, 978, 1005, 1010], "lagged_mean_24h": 13, "lagged_max_24h": 13, "lagged_min_24h": 13, "lagged_mean_7d": 13, "lagged_max_7d": 13, "lagged_min_7d": 13, "tail": [13, 114, 150, 154, 182, 184, 239, 279, 486, 489, 950], "17369": 13, "247": [13, 140, 846, 975], "203": [13, 50], "224": [13, 50, 79, 120, 374, 689], "157": [13, 352], "160": [13, 217, 943, 986], "169": [13, 55, 277], "135": [13, 48, 136, 212, 293, 343, 975], "67": [13, 63, 154, 200, 343, 463, 481, 482, 483, 592, 632, 678, 777, 944, 954, 968, 991, 995], "732143": 13, "271": 13, "17370": 13, "315": [13, 220, 259, 343, 975], "138": [13, 141, 352, 381, 954, 975], "125000": 13, "785714": 13, "17371": 13, "214": [13, 139, 549], "133": [13, 14, 53], "386905": 13, "17372": 13, "164": [13, 249, 381, 975], "123": [13, 105, 124, 329, 381, 481, 482, 483, 520, 521, 799, 955, 962], "107": [13, 117, 293, 374, 861, 955, 997], "875000": 13, "464286": 13, "17373": 13, "109": [13, 15, 23, 50, 955, 975, 997], "583333": 13, "244048": 13, "119": [13, 215, 223, 948, 975, 998], "102": [13, 352, 986, 997], "458333": 13, "815476": 13, "110": [13, 50, 83, 161, 179, 189, 212, 285, 295, 402, 948, 949, 975], "166667": 13, "73": [13, 103, 243, 298, 359, 446, 700, 763, 777, 812, 875, 964, 984, 995, 997], "369048": 13, "791667": 13, "112": [13, 51, 104, 136, 341, 343, 975, 997], "666667": 13, "190476": 13, "113": [13, 256, 352, 998], "708333": 13, "422619": 13, "watch": [13, 334], "undefin": [13, 242, 360, 677, 693, 702, 705, 747, 923, 954, 1003, 1007, 1011], "own": [13, 32, 107, 200, 216, 230, 259, 261, 299, 321, 334, 340, 349, 350, 351, 354, 355, 364, 373, 374, 386, 390, 405, 419, 498, 522, 529, 611, 761, 762, 808, 809, 810, 812, 814, 816, 817, 818, 840, 874, 876, 892, 897, 922, 950, 956, 957, 960, 964, 969, 973, 978, 987, 988, 1002, 1003, 1005, 1012], "unknown": [13, 16, 53, 154, 216, 239, 297, 299, 335, 341, 360, 368, 371, 382, 833, 839, 840, 917, 953, 964, 979, 999, 1003, 1007, 1008], "nan": [13, 71, 111, 117, 149, 150, 154, 200, 219, 221, 223, 234, 242, 285, 288, 293, 294, 295, 333, 338, 348, 355, 360, 381, 411, 433, 461, 520, 521, 522, 526, 527, 529, 558, 559, 562, 568, 571, 574, 592, 593, 594, 595, 600, 677, 678, 679, 686, 687, 688, 692, 693, 694, 733, 742, 747, 748, 749, 751, 763, 766, 767, 769, 777, 785, 788, 789, 790, 793, 835, 836, 840, 842, 843, 846, 847, 851, 854, 855, 857, 884, 885, 886, 887, 929, 943, 954, 964, 970, 990, 998, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012], "separ": [13, 14, 16, 23, 24, 28, 29, 37, 52, 57, 59, 63, 69, 75, 84, 86, 87, 89, 92, 101, 103, 106, 109, 120, 136, 141, 150, 151, 155, 156, 159, 160, 181, 183, 203, 217, 227, 239, 242, 248, 249, 279, 281, 284, 290, 300, 303, 304, 306, 307, 308, 312, 313, 320, 329, 333, 342, 343, 348, 351, 354, 358, 360, 372, 374, 375, 376, 379, 381, 382, 384, 429, 477, 484, 498, 503, 505, 506, 512, 514, 546, 553, 554, 556, 575, 596, 603, 611, 612, 638, 641, 642, 655, 659, 689, 696, 709, 710, 712, 717, 756, 782, 798, 799, 825, 826, 868, 870, 871, 876, 877, 943, 944, 946, 948, 950, 951, 953, 960, 961, 964, 968, 969, 975, 984, 986, 987, 995, 998, 1000, 1001, 1005, 1007, 1008, 1011, 1012], "dropna": [13, 143], "17210": [13, 1006], "randomli": [13, 34, 45, 47, 58, 67, 79, 81, 103, 104, 117, 118, 141, 149, 151, 155, 194, 199, 213, 217, 230, 234, 245, 256, 258, 297, 300, 329, 334, 355, 358, 359, 374, 378, 381, 384, 414, 423, 477, 480, 484, 488, 496, 502, 510, 511, 516, 524, 525, 526, 527, 528, 529, 530, 575, 576, 636, 644, 655, 659, 681, 761, 762, 822, 860, 874, 875, 876, 877, 953, 955, 957, 960, 962, 966, 970, 975, 986, 988, 1006, 1010, 1012], "percentag": [13, 51, 95, 111, 173, 200, 234, 242, 245, 378, 383, 499, 506, 509, 514, 558, 559, 613, 634, 645, 668, 698, 710, 781, 782, 783, 796, 878, 880, 955, 970, 997, 1001, 1007, 1008], "mape": [13, 710, 954], "aim": [13, 20, 76, 117, 150, 186, 267, 299, 312, 335, 341, 344, 346, 360, 368, 374, 376, 382, 413, 950, 954, 957, 964, 969, 973, 979, 987, 1009], "futur": [13, 143, 183, 222, 291, 294, 344, 346, 348, 350, 360, 361, 368, 378, 382, 461, 499, 600, 924, 954, 955, 969, 970, 978, 992, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "ulterior": 13, "independ": [13, 24, 26, 34, 43, 88, 89, 91, 106, 110, 145, 155, 218, 219, 239, 242, 244, 248, 258, 279, 286, 288, 321, 329, 333, 334, 342, 348, 350, 359, 360, 364, 371, 372, 373, 374, 375, 376, 377, 378, 382, 386, 414, 429, 453, 468, 480, 481, 482, 483, 485, 497, 498, 500, 502, 504, 505, 511, 512, 516, 517, 569, 572, 573, 590, 605, 609, 610, 611, 612, 615, 616, 617, 618, 619, 620, 621, 622, 625, 626, 627, 628, 629, 630, 637, 638, 639, 640, 669, 670, 682, 700, 701, 719, 721, 759, 765, 791, 795, 797, 799, 800, 838, 842, 843, 844, 846, 850, 851, 852, 853, 855, 856, 857, 860, 868, 869, 870, 871, 872, 897, 943, 946, 948, 950, 951, 954, 955, 956, 959, 961, 964, 969, 970, 989, 990, 995, 996, 1001, 1003, 1005, 1010], "ident": [13, 19, 61, 113, 177, 182, 200, 209, 213, 302, 320, 341, 348, 360, 371, 374, 375, 376, 378, 384, 387, 403, 404, 417, 429, 430, 438, 440, 441, 444, 445, 446, 453, 468, 516, 524, 525, 529, 530, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 608, 644, 645, 664, 669, 670, 700, 749, 759, 765, 768, 778, 779, 782, 783, 808, 809, 815, 823, 824, 830, 831, 843, 855, 874, 875, 947, 948, 951, 954, 957, 958, 969, 999, 1003, 1004, 1005, 1009, 1013], "tempor": [13, 117, 166, 973, 974], "mean_absolute_percentage_error": [13, 111, 954, 1007, 1009], "3889873516666431": 13, "account": [13, 14, 52, 89, 95, 101, 117, 143, 149, 154, 200, 216, 239, 262, 268, 316, 318, 321, 333, 342, 346, 360, 361, 365, 368, 374, 377, 378, 379, 381, 382, 428, 526, 527, 532, 533, 592, 593, 595, 597, 598, 614, 638, 644, 669, 672, 692, 693, 694, 702, 707, 720, 747, 748, 751, 752, 764, 768, 781, 840, 946, 948, 952, 954, 955, 956, 957, 964, 968, 970, 1000, 1002, 1003, 1004, 1007, 1008, 1010, 1012], "cheat": [13, 308, 958, 968, 997], "fast": [13, 26, 59, 159, 166, 171, 197, 198, 214, 215, 280, 322, 333, 341, 346, 355, 374, 376, 378, 379, 381, 382, 386, 411, 412, 434, 439, 473, 497, 498, 500, 503, 505, 509, 512, 529, 530, 531, 553, 554, 556, 597, 598, 605, 623, 624, 637, 639, 652, 664, 763, 777, 787, 788, 798, 799, 806, 807, 811, 822, 903, 923, 946, 950, 953, 956, 957, 959, 960, 970, 973, 978, 988, 995, 996, 1001, 1002, 1005, 1006], "common": [13, 15, 17, 19, 90, 133, 136, 151, 152, 153, 178, 186, 187, 234, 246, 256, 290, 312, 320, 322, 328, 333, 340, 346, 348, 354, 356, 358, 359, 363, 364, 365, 371, 372, 373, 374, 375, 378, 380, 383, 384, 412, 430, 432, 461, 555, 597, 618, 637, 638, 666, 710, 717, 733, 764, 765, 768, 778, 780, 781, 782, 783, 784, 789, 792, 827, 829, 837, 838, 839, 844, 846, 851, 852, 854, 855, 856, 857, 905, 943, 944, 950, 957, 960, 964, 969, 970, 973, 974, 975, 978, 979, 990, 995, 1003, 1005, 1006, 1010], "laptop": [13, 354, 433, 864, 1009, 1010, 1011], "3000": [13, 61, 205, 858, 859], "train_idx": [13, 154, 360], "test_idx": [13, 360], "44300751539296973": 13, "optimist": [13, 171, 244, 320, 329, 672, 950, 954], "cross": [13, 14, 26, 32, 51, 54, 55, 67, 68, 70, 71, 73, 77, 80, 85, 94, 107, 110, 111, 113, 114, 117, 126, 130, 133, 134, 136, 154, 155, 160, 164, 166, 168, 170, 176, 182, 184, 190, 200, 210, 217, 222, 227, 228, 230, 232, 236, 239, 240, 241, 243, 245, 246, 247, 248, 251, 252, 253, 256, 263, 277, 278, 280, 285, 288, 290, 295, 300, 308, 316, 341, 346, 348, 355, 358, 359, 360, 368, 369, 372, 375, 376, 379, 381, 382, 383, 384, 402, 436, 437, 438, 439, 440, 441, 443, 447, 448, 449, 450, 458, 466, 467, 469, 480, 506, 532, 533, 540, 558, 559, 562, 567, 571, 574, 607, 608, 611, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 637, 638, 639, 640, 641, 643, 644, 646, 647, 648, 649, 650, 651, 666, 667, 671, 678, 692, 705, 749, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 797, 800, 826, 827, 831, 846, 847, 864, 866, 868, 871, 909, 953, 954, 957, 958, 962, 964, 969, 970, 973, 974, 975, 976, 978, 979, 982, 990, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1012], "cross_val_scor": [13, 94, 149, 150, 151, 232, 235, 244, 253, 294, 311, 329, 346, 348, 358, 365, 378, 381, 485, 540, 668, 706, 763, 787, 789, 874, 875, 943, 954, 975, 983, 995, 996, 997, 998, 999, 1002, 1003, 1004, 1007, 1008, 1011, 1012], "cv_mape_scor": 13, "neg_mean_absolute_percentage_error": [13, 111, 954, 962], "44300752": 13, "27772182": 13, "3697178": 13, "real": [13, 29, 32, 52, 54, 66, 70, 73, 75, 76, 77, 101, 117, 141, 154, 186, 206, 209, 219, 233, 245, 253, 263, 266, 280, 281, 307, 312, 322, 333, 339, 340, 343, 350, 352, 355, 358, 359, 360, 371, 372, 374, 376, 378, 379, 381, 382, 434, 454, 455, 458, 459, 460, 461, 462, 465, 466, 469, 475, 516, 517, 518, 520, 521, 522, 523, 524, 525, 529, 530, 557, 559, 560, 561, 562, 563, 564, 565, 596, 664, 669, 688, 692, 716, 719, 721, 749, 759, 791, 823, 824, 868, 869, 870, 871, 872, 875, 877, 944, 945, 946, 951, 954, 956, 958, 959, 960, 970, 972, 975, 990, 995, 1008, 1012], "life": [13, 117, 233, 354, 951], "advis": [13, 183, 216, 329, 344, 346, 374, 382, 402, 611, 617, 619, 625, 627, 637, 652, 922, 946, 950, 956, 958, 969, 1009], "deviat": [13, 20, 32, 58, 75, 104, 107, 108, 109, 110, 112, 136, 138, 143, 145, 147, 154, 161, 188, 219, 236, 237, 238, 239, 240, 242, 265, 266, 279, 284, 338, 342, 343, 351, 355, 360, 378, 381, 384, 415, 437, 466, 476, 477, 478, 479, 481, 482, 483, 487, 489, 490, 495, 517, 559, 576, 599, 609, 610, 636, 688, 716, 769, 785, 812, 835, 836, 846, 855, 856, 857, 950, 954, 960, 964, 986, 1001, 1002, 1003, 1006, 1007, 1008], "363": 13, "make_scor": [13, 114, 117, 243, 365, 378, 763, 788, 789, 954, 1004, 1012], "mean_absolute_error": [13, 182, 184, 200, 954, 996, 998], "mean_pinball_loss": [13, 114, 117, 291, 950, 954, 1008], "root_mean_squared_error": [13, 117, 714, 954, 1012], "consolidate_scor": 13, "1f": [13, 20, 47, 50, 90, 162, 182, 213, 225, 227, 246, 288, 295, 321, 322], "pinball_loss_05": 13, "pinball_loss_50": 13, "pinball_loss_95": 13, "loss_funct": 13, "absolute_error": [13, 381, 523, 525, 527, 530, 636, 875, 877, 1008], "loss_func": 13, "n_job": [13, 51, 68, 69, 107, 108, 109, 114, 115, 122, 135, 136, 149, 154, 155, 156, 157, 203, 205, 221, 238, 240, 241, 243, 254, 256, 259, 288, 289, 290, 293, 316, 334, 346, 360, 381, 385, 402, 409, 411, 413, 415, 417, 420, 421, 422, 423, 426, 429, 432, 437, 496, 500, 501, 502, 504, 507, 508, 510, 511, 513, 520, 521, 522, 523, 528, 529, 530, 531, 532, 533, 534, 535, 559, 567, 572, 573, 575, 597, 599, 604, 612, 616, 618, 620, 622, 623, 624, 626, 628, 630, 631, 633, 641, 644, 653, 654, 655, 656, 657, 658, 659, 738, 742, 745, 763, 766, 767, 769, 777, 785, 787, 788, 789, 790, 791, 793, 794, 795, 796, 798, 799, 808, 809, 810, 812, 814, 816, 817, 818, 819, 820, 825, 828, 861, 862, 920, 922, 943, 954, 955, 957, 983, 984, 988, 995, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1010, 1013], "fit_tim": [13, 55, 111, 171, 190, 241, 378, 789, 790], "startswith": [13, 66, 203, 272], "test_": [13, 122, 378], "x_i": [13, 75, 105, 131, 154, 183, 291, 316, 374, 379, 380, 381, 384, 579, 580, 584, 587, 588, 590, 801, 802, 805, 945, 946, 950, 956, 957, 958, 964, 968, 969, 970], "fulli": [13, 41, 52, 108, 114, 333, 340, 341, 360, 374, 380, 381, 383, 408, 412, 522, 523, 529, 530, 874, 875, 876, 877, 878, 880, 943, 944, 950, 959, 967, 973, 1008, 1009], "anticip": 13, "call": [13, 14, 17, 43, 45, 47, 51, 67, 85, 99, 106, 113, 133, 138, 142, 144, 146, 153, 155, 170, 182, 183, 186, 200, 216, 220, 222, 223, 239, 240, 248, 253, 254, 256, 259, 261, 284, 286, 290, 291, 320, 321, 322, 328, 333, 334, 335, 341, 344, 346, 347, 348, 350, 351, 352, 353, 354, 355, 358, 359, 360, 361, 364, 365, 372, 374, 375, 376, 377, 378, 379, 381, 382, 384, 386, 397, 405, 408, 411, 412, 414, 415, 416, 417, 418, 419, 422, 425, 427, 429, 430, 433, 434, 439, 447, 448, 449, 453, 456, 457, 460, 462, 468, 473, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 542, 547, 548, 553, 554, 556, 562, 567, 572, 573, 575, 576, 579, 582, 585, 592, 593, 594, 595, 596, 597, 599, 600, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 654, 655, 656, 657, 658, 659, 660, 662, 664, 665, 666, 669, 696, 706, 719, 735, 738, 742, 743, 744, 745, 757, 761, 762, 763, 765, 766, 767, 768, 769, 775, 777, 778, 779, 780, 781, 782, 783, 785, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 811, 812, 815, 817, 822, 823, 824, 825, 826, 829, 830, 831, 833, 835, 836, 838, 843, 846, 847, 850, 855, 856, 857, 858, 859, 863, 866, 867, 868, 869, 871, 872, 875, 877, 893, 897, 902, 903, 911, 912, 914, 920, 921, 922, 925, 928, 938, 943, 944, 946, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 960, 962, 964, 966, 967, 969, 970, 973, 978, 979, 983, 986, 987, 988, 990, 992, 995, 996, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "aleator": 13, "descript": [13, 136, 154, 285, 339, 340, 345, 346, 350, 351, 354, 360, 374, 382, 417, 427, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 465, 466, 467, 468, 469, 470, 472, 475, 509, 595, 641, 726, 729, 742, 954, 968, 969, 974, 977, 988, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "quantile_list": 13, "styled_df_copi": 13, "extract_numer": 13, "mean_valu": 13, "std_valu": 13, "convert": [13, 17, 32, 43, 45, 63, 67, 90, 143, 157, 182, 202, 219, 222, 226, 227, 230, 231, 272, 333, 340, 341, 355, 358, 360, 368, 382, 405, 408, 409, 412, 414, 415, 416, 417, 424, 429, 430, 461, 499, 506, 518, 519, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 537, 546, 547, 553, 554, 555, 556, 558, 559, 571, 592, 593, 594, 595, 611, 617, 623, 624, 625, 627, 631, 632, 633, 635, 639, 641, 642, 643, 657, 742, 821, 830, 831, 833, 837, 839, 840, 841, 843, 866, 874, 875, 876, 877, 884, 886, 887, 909, 939, 940, 943, 950, 951, 952, 954, 964, 965, 969, 970, 988, 995, 997, 998, 999, 1000, 1001, 1003, 1005, 1006, 1007, 1010, 1011, 1012], "cols_to_convert": 13, "col": [13, 19, 24, 26, 35, 39, 46, 52, 56, 60, 61, 66, 69, 107, 123, 202, 219, 317, 476, 478], "min_valu": [13, 592, 1006, 1007], "mask": [13, 14, 39, 63, 109, 182, 190, 219, 237, 238, 301, 355, 360, 375, 381, 434, 439, 526, 527, 546, 550, 551, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 572, 573, 594, 595, 597, 598, 614, 636, 763, 766, 767, 777, 926, 944, 961, 995, 998, 1000, 1001, 1003, 1005, 1013], "bold": [13, 57, 114, 171, 177, 346], "07": [13, 79, 96, 154, 178, 200, 248, 284, 329, 341, 374, 526, 527, 657, 659, 954, 968, 975], "06": [13, 49, 64, 79, 147, 154, 173, 181, 182, 219, 239, 240, 277, 281, 315, 352, 447, 448, 449, 609, 610, 654, 658, 761, 762, 763, 777, 875, 950, 964, 966, 975], "145": [13, 374], "92": [13, 30, 47, 90, 133, 159, 237, 277, 297, 298, 308, 341, 343, 503, 505, 512, 527, 562, 661, 763, 777, 949, 988], "00": [13, 30, 75, 90, 143, 154, 155, 173, 200, 213, 237, 240, 247, 277, 295, 297, 298, 321, 340, 343, 352, 374, 381, 382, 570, 571, 678, 680, 752, 763, 777, 790, 875, 950, 954, 964, 966, 968, 975, 987], "wherea": [13, 32, 45, 50, 64, 75, 118, 196, 219, 240, 241, 242, 248, 262, 284, 312, 316, 317, 335, 361, 378, 381, 409, 411, 530, 623, 624, 765, 781, 794, 946, 953, 955, 957, 964, 970, 1008, 1012], "That": [13, 26, 87, 101, 117, 136, 171, 209, 239, 243, 321, 322, 334, 340, 354, 360, 378, 383, 384, 408, 411, 412, 522, 529, 558, 781, 874, 875, 943, 951, 952, 954, 960, 970, 1004, 1005], "pinbal": [13, 114, 117, 291, 527, 635, 687, 712, 950, 1008, 1009], "5th": [13, 114, 117, 146, 374], "95th": [13, 114, 117, 712], "gbrt_mean_poisson": 13, "mean_predict": [13, 145], "gbrt_median": 13, "median_predict": 13, "gbrt_percentile_5": 13, "percentile_5_predict": 13, "gbrt_percentile_95": 13, "percentile_95_predict": 13, "fill_between": [13, 114, 117, 127, 138, 143, 145, 147, 161, 162, 200, 239, 241, 242, 243, 249, 769, 785], "interv": [13, 26, 100, 117, 145, 151, 166, 182, 183, 184, 200, 239, 341, 360, 372, 378, 381, 384, 403, 404, 481, 482, 483, 522, 523, 525, 527, 529, 530, 600, 601, 603, 642, 706, 712, 714, 767, 784, 792, 829, 831, 845, 868, 869, 870, 890, 946, 950, 954, 964, 970, 975, 1002, 1006], "At": [13, 71, 101, 187, 251, 256, 258, 297, 300, 333, 334, 350, 361, 365, 370, 377, 381, 402, 405, 430, 553, 554, 556, 567, 794, 796, 833, 918, 943, 950, 953, 955, 959, 968, 978], "night": 13, "band": [13, 242, 281, 964], "narrow": [13, 104, 114, 279, 281, 351, 806, 807], "certain": [13, 52, 112, 117, 154, 187, 199, 216, 239, 259, 283, 312, 329, 341, 342, 344, 350, 360, 363, 374, 379, 383, 603, 614, 618, 623, 628, 649, 826, 831, 866, 943, 946, 950, 951, 954, 955, 958, 964, 969, 973, 979, 983, 1000, 1004, 1007, 1010], "And": [13, 151, 201, 202, 207, 216, 239, 320, 354, 368, 374, 378, 382, 495, 553, 554, 556, 657, 658, 950, 954, 975, 1002], "correct": [13, 25, 26, 54, 76, 101, 112, 146, 154, 166, 171, 182, 200, 225, 233, 239, 246, 248, 256, 258, 308, 310, 320, 329, 343, 346, 348, 350, 361, 372, 373, 374, 378, 379, 381, 382, 391, 397, 415, 421, 434, 439, 453, 466, 468, 600, 632, 641, 643, 668, 669, 673, 677, 678, 683, 686, 687, 688, 692, 693, 694, 698, 702, 705, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 747, 748, 749, 751, 754, 755, 758, 760, 794, 795, 796, 803, 811, 837, 939, 950, 954, 955, 969, 979, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "wider": [13, 184, 382, 879, 950], "visibl": [13, 154, 155, 184, 318, 340, 346, 374, 822, 959, 1000, 1010], "lie": [13, 57, 79, 135, 154, 214, 279, 299, 306, 308, 379, 381, 571, 814, 816, 817, 818, 866, 867, 948, 951, 954, 964, 969], "span": [13, 52, 73, 114, 214, 236, 341, 374, 382, 514, 601, 763, 766, 954, 987], "underestim": [13, 114, 155, 182, 200, 239, 346], "calibr": [13, 28, 104, 117, 124, 200, 212, 239, 241, 360, 365, 477, 480, 529, 534, 623, 624, 641, 674, 693, 705, 748, 751, 752, 792, 804, 863, 866, 894, 943, 950, 954, 967, 969, 975, 976, 990, 992, 999, 1001], "confid": [13, 23, 24, 25, 26, 117, 143, 145, 226, 239, 242, 300, 361, 372, 384, 601, 623, 624, 631, 633, 636, 639, 640, 641, 663, 667, 672, 685, 690, 691, 703, 704, 720, 753, 794, 833, 866, 868, 871, 950, 953, 954, 955, 960, 967, 968, 969, 978, 988, 1005], "produc": [13, 14, 24, 25, 41, 54, 66, 90, 114, 115, 116, 118, 166, 245, 277, 300, 329, 334, 341, 342, 346, 348, 351, 360, 361, 374, 375, 378, 379, 381, 405, 408, 411, 417, 484, 501, 524, 528, 546, 553, 558, 559, 597, 598, 765, 766, 767, 775, 780, 783, 787, 831, 841, 868, 871, 945, 946, 950, 952, 953, 954, 957, 960, 961, 965, 967, 968, 969, 979, 997, 998, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "overli": [13, 24, 25, 171, 244, 329, 379, 954], "mapi": 13, "recent": [13, 184, 216, 344, 347, 351, 354, 360, 374, 433, 503, 530, 968, 978, 998, 1007], "conform": [13, 546, 593, 794, 795, 954, 973, 974, 1002, 1008], "epistem": 13, "sktime": [13, 973], "extend": [13, 52, 53, 64, 99, 183, 229, 246, 308, 343, 344, 358, 360, 372, 373, 374, 379, 381, 596, 685, 784, 795, 798, 799, 831, 833, 850, 866, 867, 881, 946, 954, 955, 969, 974, 976, 990, 1000, 1001, 1002, 1003, 1005, 1010], "recurs": [13, 30, 48, 82, 118, 127, 130, 133, 136, 151, 234, 238, 244, 263, 297, 298, 300, 324, 348, 373, 374, 378, 405, 406, 407, 410, 428, 467, 480, 528, 558, 559, 562, 567, 597, 598, 623, 782, 871, 954, 957, 960, 961, 970, 975, 976, 987, 990, 995, 1005, 1006], "enabl": [13, 28, 47, 68, 117, 155, 190, 204, 216, 281, 289, 291, 292, 294, 295, 317, 344, 346, 351, 354, 358, 360, 364, 365, 370, 373, 374, 375, 379, 381, 382, 414, 429, 433, 499, 500, 506, 524, 525, 526, 527, 528, 544, 545, 555, 556, 567, 575, 761, 762, 763, 766, 787, 788, 789, 826, 827, 839, 840, 863, 864, 866, 867, 868, 869, 870, 871, 872, 881, 914, 921, 944, 946, 951, 953, 954, 957, 964, 965, 968, 969, 974, 978, 995, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "520": [13, 593, 815, 944, 957, 975], "plot_time_series_lagged_featur": [13, 975], "histogram": [13, 24, 26, 50, 100, 102, 106, 111, 112, 114, 115, 119, 151, 182, 190, 213, 238, 240, 245, 264, 279, 290, 292, 294, 295, 372, 455, 461, 524, 525, 526, 527, 529, 530, 597, 607, 706, 712, 722, 723, 754, 763, 768, 784, 789, 792, 946, 952, 964, 975, 989, 990, 1007, 1010, 1012], "parallel": [14, 100, 105, 107, 108, 110, 151, 155, 156, 157, 184, 240, 289, 290, 292, 313, 328, 332, 338, 346, 347, 349, 350, 358, 360, 375, 383, 385, 386, 402, 409, 411, 413, 414, 415, 417, 422, 423, 426, 429, 432, 437, 460, 496, 498, 499, 500, 502, 504, 506, 507, 508, 510, 511, 513, 520, 521, 522, 523, 528, 529, 530, 531, 532, 533, 534, 535, 554, 559, 567, 572, 573, 575, 597, 599, 604, 623, 653, 654, 655, 656, 657, 658, 659, 738, 742, 745, 763, 766, 767, 769, 774, 777, 785, 787, 788, 789, 790, 791, 793, 794, 795, 796, 798, 799, 808, 809, 810, 812, 814, 816, 817, 818, 819, 820, 825, 828, 861, 862, 922, 924, 974, 975, 983, 988, 990, 995, 998, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1010, 1011], "acquir": [14, 109, 241, 1007], "angl": [14, 32, 90, 136, 225, 226, 227, 230, 231, 343, 379, 496, 502, 504, 507, 508, 510, 511, 513, 615, 616, 617, 618, 619, 620, 621, 628, 629, 630, 643, 647, 648, 649, 650, 651, 657, 951, 952, 976, 990, 995], "Such": [14, 118, 138, 143, 153, 161, 166, 171, 183, 242, 320, 360, 361, 378, 379, 381, 520, 521, 621, 944, 954, 957, 964, 970, 986, 1005, 1010, 1012], "ct": [14, 146, 223, 375, 429, 431, 432], "cellular": 14, "materi": [14, 295, 361, 546, 856, 857, 972], "haar": [14, 1012], "wavelet": [14, 96, 379], "sparsiti": [14, 28, 42, 77, 93, 151, 160, 166, 167, 175, 193, 197, 198, 215, 316, 321, 333, 360, 376, 379, 381, 383, 466, 467, 492, 496, 502, 503, 504, 505, 508, 510, 511, 512, 611, 617, 622, 623, 641, 643, 686, 687, 688, 835, 841, 846, 851, 947, 950, 957, 964, 975, 982, 987, 997], "oper": [14, 19, 136, 146, 151, 210, 215, 222, 232, 234, 236, 246, 300, 322, 333, 334, 343, 344, 346, 349, 352, 358, 360, 361, 364, 368, 370, 378, 379, 381, 382, 383, 387, 413, 426, 433, 440, 447, 448, 449, 450, 469, 498, 499, 506, 516, 517, 531, 537, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 581, 586, 589, 595, 600, 608, 623, 654, 658, 667, 671, 672, 673, 691, 738, 745, 746, 752, 753, 782, 792, 795, 806, 807, 829, 833, 838, 849, 850, 864, 871, 874, 905, 922, 927, 950, 957, 964, 969, 973, 975, 978, 986, 999, 1001, 1002, 1003, 1005, 1006, 1011], "fidel": 14, "penal": [14, 28, 77, 122, 166, 171, 175, 182, 186, 198, 200, 284, 316, 374, 376, 379, 383, 434, 435, 436, 437, 438, 439, 440, 441, 443, 612, 617, 618, 626, 628, 641, 670, 680, 698, 750, 759, 839, 866, 867, 873, 950, 954, 956, 958, 968, 969, 986], "computation": [14, 73, 87, 107, 113, 122, 138, 259, 312, 320, 332, 347, 358, 373, 374, 375, 378, 379, 381, 384, 503, 597, 598, 636, 727, 763, 765, 766, 767, 777, 789, 950, 951, 953, 961, 962, 966, 987, 990, 999], "l2": [14, 28, 37, 77, 79, 151, 153, 154, 160, 161, 166, 167, 173, 175, 178, 182, 187, 193, 197, 198, 200, 240, 259, 279, 286, 301, 320, 321, 348, 355, 358, 374, 376, 379, 382, 406, 410, 415, 422, 489, 503, 505, 512, 523, 526, 527, 530, 554, 555, 556, 608, 611, 612, 613, 614, 617, 622, 623, 624, 625, 626, 627, 628, 633, 634, 637, 641, 643, 645, 646, 651, 652, 653, 699, 714, 725, 726, 742, 743, 744, 777, 808, 809, 810, 812, 814, 816, 817, 818, 819, 820, 823, 824, 838, 846, 853, 866, 867, 871, 872, 873, 875, 877, 937, 943, 947, 950, 952, 957, 958, 964, 968, 970, 975, 986, 988, 997, 999, 1000, 1002, 1004], "circular": 14, "central": [14, 184, 341, 374, 960, 973], "emmanuel": [14, 63, 995, 1002, 1003, 1004, 1012], "gouillart": [14, 63, 995], "nsup": 14, "ndimag": [14, 43, 44, 51, 277, 987], "_weight": [14, 200], "orig": [14, 266], "floor_x": 14, "floor": 14, "hstack": [14, 31, 39, 124, 132, 207, 218, 234, 311, 378, 825], "_generate_center_coordin": 14, "l_x": 14, "mgrid": [14, 129], "build_projection_oper": 14, "n_dir": 14, "endpoint": [14, 280, 311, 600], "data_ind": 14, "camera_ind": 14, "data_unravel_indic": 14, "xrot": 14, "ind": [14, 39, 113, 124, 321, 806, 807], "logical_and": [14, 114], "proj_oper": 14, "coo_matrix": [14, 168, 417, 550, 551, 925, 928], "generate_synthetic_data": 14, "n_pt": 14, "ogrid": 14, "mask_out": 14, "rand": [14, 23, 34, 35, 36, 37, 41, 46, 55, 59, 94, 104, 119, 121, 131, 161, 166, 204, 205, 209, 215, 216, 253, 271, 289, 290, 295, 301, 302, 315, 321, 326, 327, 355, 365, 509, 669, 670, 680, 721, 745, 750, 858, 859, 861, 862, 863, 966, 979, 995, 1006, 1007], "gaussian_filt": [14, 43, 44, 51, 987], "sigma": [14, 43, 44, 51, 75, 94, 114, 237, 239, 371, 376, 379, 381, 579, 614, 948, 950, 952, 956, 959, 987], "logical_xor": [14, 142, 314], "binary_eros": 14, "128": [14, 15, 164, 182, 333, 501, 975], "proj": [14, 614], "randn": [14, 31, 32, 36, 51, 62, 63, 75, 76, 90, 94, 118, 131, 138, 142, 153, 156, 171, 176, 177, 181, 195, 196, 199, 226, 229, 230, 234, 246, 248, 249, 253, 265, 266, 286, 289, 290, 295, 307, 313, 314, 318, 348, 351, 608, 635, 637, 643, 652, 784, 869, 872], "rgr_ridg": 14, "rec_l2": 14, "lassocv": [14, 122, 127, 154, 166, 171, 365, 381, 383, 616, 617, 619, 620, 621, 628, 649, 950, 983, 995, 998, 1002, 1005, 1006, 1008, 1009, 1012, 1013], "rgr_lasso": 14, "rec_l1": 14, "wspace": [14, 15, 36, 41, 42, 59, 75, 87, 103, 182, 200, 209, 225, 227, 228, 231, 264, 272, 298, 305], "554": [14, 190, 198, 264, 276, 975], "plot_tomography_l1_reconstruct": [14, 975], "hierarch": [14, 21, 33, 36, 37, 41, 43, 49, 50, 51, 53, 54, 151, 157, 206, 292, 328, 360, 382, 406, 408, 410, 411, 469, 477, 479, 487, 495, 512, 695, 819, 846, 971, 974, 975, 989, 990, 995, 998, 999, 1011], "spectral": [14, 18, 33, 41, 43, 46, 52, 66, 151, 203, 204, 299, 301, 320, 321, 322, 346, 382, 414, 416, 417, 418, 427, 434, 435, 436, 437, 438, 439, 440, 441, 453, 476, 478, 556, 653, 654, 655, 656, 657, 660, 684, 759, 957, 967, 975, 989, 990, 995, 996], "signal": [14, 76, 87, 88, 89, 96, 112, 114, 138, 143, 144, 151, 153, 160, 161, 167, 168, 170, 171, 176, 177, 181, 183, 231, 291, 373, 374, 376, 382, 383, 384, 387, 440, 468, 486, 491, 496, 499, 502, 506, 510, 511, 590, 609, 610, 611, 612, 617, 618, 628, 629, 637, 649, 650, 651, 749, 784, 792, 840, 950, 954, 971, 975, 978, 982, 989, 990], "unstructur": [14, 33, 36, 37, 38, 44, 151, 206, 276, 374, 406, 410, 428, 468, 495, 819, 966, 975, 978, 999], "nmf": [15, 68, 352, 373, 382, 500, 503, 509, 512, 989, 990, 995, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012], "latentdirichletalloc": [15, 335, 351, 379, 973, 1000, 1002, 1009, 1010], "corpu": [15, 321, 322, 341, 379, 553, 554, 555, 556, 988, 996], "frobeniu": [15, 90, 408, 412, 424, 434, 435, 436, 437, 438, 439, 440, 441, 496, 502, 503, 505, 510, 511, 512, 950, 1002], "kullback": [15, 202, 379, 503, 505, 512, 657, 951, 1002], "leibler": [15, 202, 379, 503, 505, 512, 657, 951, 1002], "diverg": [15, 113, 202, 207, 264, 503, 505, 512, 657, 822, 951, 953, 954, 959, 961, 1002, 1003, 1008], "probabilist": [15, 26, 28, 77, 86, 87, 96, 97, 137, 138, 141, 144, 145, 151, 215, 320, 360, 372, 380, 381, 402, 438, 441, 497, 499, 500, 506, 524, 553, 554, 575, 587, 608, 610, 641, 668, 705, 763, 788, 833, 868, 869, 871, 872, 947, 948, 950, 953, 954, 959, 964, 969, 970, 973, 975, 978, 995, 998, 1002], "semant": [15, 320, 321, 360, 509, 988, 989, 990, 997], "runnabl": [15, 350, 351], "coupl": [15, 49, 50, 52, 203, 340, 341, 371, 372, 374, 383, 554, 872, 943, 969], "ten": [15, 19, 101, 107, 117, 136, 203, 231, 341, 343, 381, 485, 871, 1004], "polynomi": [15, 149, 151, 158, 160, 182, 188, 214, 221, 239, 253, 264, 290, 291, 305, 315, 338, 342, 417, 456, 585, 604, 605, 606, 608, 637, 729, 738, 739, 792, 827, 836, 838, 841, 845, 866, 868, 869, 870, 871, 872, 949, 969, 975, 976, 990, 1007, 1008], "lda": [15, 31, 83, 86, 89, 91, 97, 151, 268, 329, 343, 370, 469, 501, 506, 514, 515, 815, 973, 975, 976, 989, 990, 1000], "proport": [15, 25, 37, 117, 135, 168, 182, 189, 195, 209, 219, 242, 262, 266, 269, 316, 318, 333, 341, 372, 374, 376, 378, 379, 381, 382, 403, 404, 411, 434, 439, 480, 514, 515, 520, 522, 524, 525, 526, 527, 528, 529, 548, 549, 553, 556, 592, 597, 623, 624, 631, 632, 633, 639, 640, 641, 643, 661, 666, 677, 764, 765, 766, 767, 780, 783, 792, 812, 823, 824, 840, 866, 867, 868, 871, 872, 874, 876, 878, 880, 892, 943, 953, 954, 957, 960, 968, 969, 970, 1000, 1012], "256": [15, 39, 45, 50, 113, 285, 334, 341, 374, 381, 414, 433, 502, 511, 528, 822, 854, 864, 988, 1009], "tf": [15, 19, 213, 320, 321, 322, 341, 379, 486, 509, 553, 554, 555, 556, 805, 813, 838, 943, 952, 956, 964, 973, 988], "idf": [15, 19, 213, 320, 321, 322, 341, 379, 486, 509, 553, 554, 555, 556, 805, 813, 838, 943, 952, 956, 964, 988, 995], "274": [15, 476], "288": [15, 500, 506], "2000": [15, 25, 37, 47, 71, 88, 94, 159, 228, 231, 239, 256, 274, 292, 321, 341, 343, 374, 375, 381, 386, 417, 427, 498, 499, 524, 654, 656, 658, 707, 752, 761, 812, 842, 854, 951, 954, 960, 966, 979, 987], "091": [15, 221, 975], "561": [15, 218, 374, 975], "minibatchnmf": [15, 335, 379, 1009, 1011, 1012], "batch_siz": [15, 19, 39, 61, 87, 90, 91, 321, 379, 414, 499, 501, 502, 503, 504, 511, 822, 823, 824, 906, 907, 920, 996, 1003, 1006, 1008, 1009], "324": [15, 84, 176, 341, 975], "921": 15, "ensta": [15, 17, 34, 45, 58, 182, 200, 203, 240, 242, 320, 321, 322], "chyi": [15, 998, 999, 1000, 1001, 1002], "kwei": [15, 998, 999, 1000, 1001, 1002], "yau": [15, 998, 999, 1000, 1001, 1002], "chyikwei": 15, "fetch_20newsgroup": [15, 19, 66, 240, 301, 320, 321, 322, 341, 454, 988, 1000, 1005, 1013], "countvector": [15, 301, 322, 341, 351, 375, 379, 382, 429, 454, 501, 547, 554, 555, 556, 988, 995, 997, 1000, 1003, 1004, 1005, 1006, 1007, 1008], "tfidfvector": [15, 19, 66, 240, 320, 341, 379, 382, 454, 553, 554, 555, 988, 995, 997, 1003, 1004, 1005, 1008, 1009], "n_top_word": 15, "init": [15, 39, 42, 55, 56, 58, 61, 155, 162, 202, 203, 205, 206, 207, 226, 228, 259, 321, 349, 354, 374, 379, 381, 408, 412, 414, 416, 418, 424, 425, 503, 505, 512, 513, 524, 525, 597, 598, 655, 657, 659, 815, 951, 995, 1004, 1007, 1009, 1010, 1011], "nndsvda": [15, 379, 503, 505, 512, 1004, 1007], "plot_top_word": 15, "feature_nam": [15, 19, 83, 97, 108, 115, 119, 136, 154, 156, 191, 220, 262, 279, 288, 289, 290, 295, 305, 320, 325, 339, 341, 351, 375, 455, 456, 457, 461, 465, 466, 467, 469, 470, 475, 547, 596, 597, 598, 847, 878, 879, 880, 962, 970, 1011], "flatten": [15, 30, 205, 214, 237, 283, 305, 317, 352, 467, 534, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 815], "topic_idx": 15, "top_features_ind": 15, "argsort": [15, 17, 19, 20, 21, 113, 115, 156, 157, 182, 200, 288, 297, 298, 320, 321, 341, 962], "top_featur": 15, "barh": [15, 115, 149, 150, 153, 154, 156, 157, 223, 286, 320, 321, 322], "fontdict": [15, 36], "labels": [15, 283], "set_vis": [15, 32, 263, 269, 279], "useless": [15, 110, 242, 352, 383, 480, 493, 623, 677, 950, 964, 1004], "strip": [15, 200, 321, 333, 340, 341, 461], "header": [15, 66, 240, 320, 321, 341, 344, 382, 453, 454, 763, 766, 767, 777], "footer": [15, 66, 240, 320, 321, 341, 453, 454], "repli": [15, 320, 345, 346, 349], "english": [15, 19, 66, 320, 321, 322, 351, 382, 553, 554, 556, 973, 974, 988, 1008], "occur": [15, 66, 112, 182, 186, 200, 316, 329, 346, 348, 354, 361, 371, 374, 376, 378, 382, 409, 473, 474, 537, 546, 553, 555, 556, 592, 636, 762, 763, 766, 767, 769, 777, 785, 788, 789, 790, 793, 836, 891, 954, 956, 964, 988, 995, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "data_sampl": 15, "tfidf_vector": 15, "max_df": [15, 240, 301, 320, 321, 553, 556, 1006], "min_df": [15, 19, 66, 240, 301, 320, 321, 382, 553, 556, 995, 997, 1006], "max_featur": [15, 29, 105, 116, 218, 236, 251, 290, 381, 383, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 553, 556, 562, 874, 875, 876, 877, 943, 950, 995, 997, 998, 1002, 1003, 1006, 1009, 1012], "stop_word": [15, 19, 320, 321, 382, 553, 554, 556], "tfidf": [15, 66, 301, 382, 556, 988], "tf_vector": 15, "beta_loss": [15, 503, 505, 512, 1002], "alpha_w": [15, 379, 503, 505, 512, 1008], "00005": 15, "alpha_h": [15, 379, 503, 505, 512, 1008], "tfidf_feature_nam": 15, "get_feature_names_out": [15, 19, 154, 156, 291, 320, 321, 322, 341, 348, 360, 375, 382, 390, 395, 398, 407, 408, 410, 412, 414, 429, 432, 447, 448, 449, 450, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 514, 531, 532, 533, 534, 535, 546, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 592, 593, 594, 595, 600, 603, 604, 605, 606, 607, 653, 654, 657, 810, 815, 818, 822, 825, 826, 829, 830, 831, 832, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 858, 859, 964, 1008, 1009, 1010, 1011, 1012, 1013], "solver": [15, 28, 31, 32, 43, 63, 151, 160, 171, 173, 174, 175, 182, 184, 190, 197, 198, 200, 274, 275, 276, 277, 286, 295, 320, 352, 358, 360, 364, 370, 374, 386, 417, 427, 436, 437, 443, 467, 498, 500, 505, 506, 509, 512, 514, 611, 612, 613, 617, 618, 623, 624, 625, 626, 627, 628, 631, 633, 634, 635, 637, 639, 641, 645, 646, 649, 652, 653, 654, 656, 658, 660, 752, 777, 792, 797, 800, 823, 824, 868, 869, 870, 871, 872, 948, 951, 954, 958, 968, 969, 973, 975, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "mu": [15, 75, 76, 239, 379, 387, 438, 440, 441, 444, 445, 446, 505, 512, 948, 950, 1002, 1005], "mbnmf": 15, "learning_method": [15, 351, 501], "learning_offset": [15, 501], "tf_feature_nam": 15, "plot_topics_extraction_with_nmf_lda": [15, 975], "graphic": [16, 19, 76, 155, 301, 320, 321, 322, 341, 352, 373, 374, 376, 379, 756, 757, 761, 796, 878, 954, 955, 961, 973, 988], "frontend": [16, 352], "mainli": [16, 26, 50, 101, 104, 138, 248, 256, 333, 348, 372, 576, 956, 961], "intend": [16, 54, 55, 91, 183, 312, 320, 346, 347, 348, 353, 358, 360, 378, 433, 547, 638, 664, 835, 836, 846, 864, 949, 950, 954, 958, 965], "didact": [16, 346, 974], "induc": [16, 25, 53, 154, 166, 173, 175, 180, 183, 197, 215, 219, 316, 322, 371, 373, 379, 381, 411, 414, 504, 508, 518, 522, 523, 524, 525, 529, 530, 531, 608, 690, 720, 839, 874, 875, 876, 877, 947, 954, 968, 986], "mous": [16, 340], "button": [16, 346, 354, 986], "prettenho": 16, "tkagg": 16, "backend": [16, 334, 344, 360, 433, 864, 920, 922, 924, 954, 998, 1003, 1004, 1005, 1006, 1013], "backend_tkagg": 16, "figurecanvastkagg": 16, "navigationtoolbar2tk": 16, "navigationtoolbar2tkagg": 16, "deprec": [16, 291, 334, 349, 350, 355, 360, 365, 406, 410, 411, 412, 414, 415, 422, 424, 443, 491, 492, 501, 502, 503, 504, 505, 511, 518, 534, 535, 544, 545, 547, 592, 598, 603, 609, 610, 641, 642, 657, 674, 705, 706, 714, 715, 742, 743, 744, 746, 766, 767, 769, 787, 788, 789, 813, 825, 868, 871, 882, 897, 898, 943, 944, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "tkinter": 16, "tk": 16, "contourset": 16, "dump_svmlight_fil": [16, 995, 996, 1000, 1010, 1012], "y_min": [16, 29, 55, 103, 110, 120, 129, 140, 214, 274, 281, 302, 312, 313, 600, 602], "y_max": [16, 29, 55, 103, 110, 120, 129, 140, 200, 214, 274, 281, 302, 312, 313, 600, 602], "x_min": [16, 29, 49, 55, 103, 110, 114, 120, 129, 140, 171, 214, 274, 281, 302, 312, 313], "x_max": [16, 29, 49, 55, 103, 110, 120, 129, 140, 214, 274, 281, 302, 312, 313], "notifi": [16, 537, 538, 539, 993, 1005], "regist": [16, 166, 320, 352, 922, 924], "surfac": [16, 29, 91, 100, 101, 102, 103, 105, 123, 146, 151, 165, 174, 191, 245, 262, 304, 305, 323, 324, 326, 327, 328, 381, 469, 518, 522, 529, 596, 728, 874, 880, 948, 953, 968, 969, 970, 975], "surface_typ": 16, "add_observ": 16, "set_surfac": 16, "intvar": 16, "coef0": [16, 159, 312, 315, 417, 500, 604, 605, 608, 739, 741, 868, 869, 870, 871, 872, 952, 969], "kernel_map": 16, "hasattr": [16, 41, 53, 59, 77, 99, 110, 200, 213, 274, 281, 320, 360, 389, 393, 399, 915, 1005], "x2": [16, 79, 84, 103, 113, 141, 194, 348, 375, 553, 594, 664, 987], "decision_surfac": 16, "delta": [16, 377, 417], "clear_data": 16, "add_exampl": 16, "example_ad": 16, "refit": [16, 108, 127, 133, 135, 151, 232, 238, 240, 243, 246, 247, 251, 360, 378, 384, 467, 532, 592, 624, 630, 678, 763, 766, 767, 777, 792, 871, 943, 950, 954, 975, 1002, 1003, 1004], "docstr": [16, 346, 348, 352, 360, 413, 426, 437, 664, 666, 893, 943, 954, 957, 958, 968, 995, 1002, 1003, 1008, 1009, 1012], "set_xlim": [16, 29, 39, 57, 71, 75, 85, 106, 120, 150, 155, 180, 182, 187, 214, 225, 243, 245, 256, 264, 274, 279, 281, 282, 283, 284, 289, 295, 317], "attributeerror": [16, 375, 524, 542, 915, 987, 1004, 1005, 1007, 1011, 1012], "get_tk_widget": 16, "pack": [16, 355, 1003], "fill": [16, 32, 110, 127, 156, 234, 264, 325, 360, 375, 379, 480, 492, 503, 505, 512, 552, 595, 878, 880, 944, 957, 970, 1013], "_tkcanva": 16, "mpl_connect": 16, "button_press_ev": 16, "onclick": 16, "toolbar": 16, "controllbar": 16, "c_label": 16, "plot_kernel": 16, "exp": [16, 43, 51, 63, 96, 104, 114, 139, 166, 192, 264, 269, 272, 289, 290, 294, 312, 372, 374, 375, 380, 386, 417, 430, 486, 498, 501, 580, 581, 587, 606, 723, 730, 740, 823, 824, 842, 948, 950, 952, 956, 957, 958, 967, 968, 969, 986], "xdata": 16, "ydata": 16, "update_exampl": 16, "scalex": 16, "scalei": 16, "examples_load": 16, "remove_surfac": 16, "plot_support_vector": 16, "plot_decision_surfac": 16, "old": [16, 200, 346, 350, 352, 374, 433, 501, 611, 617, 864, 951, 974, 995, 1000, 1001, 1003, 1008, 1009, 1010], "isinst": [16, 32, 110, 200, 360], "lineset": 16, "support_vector": [16, 306], "circl": [16, 32, 57, 92, 120, 121, 129, 207, 217, 266, 269, 275, 279, 281, 299, 312, 327, 342, 350, 354, 374, 417, 427, 479, 487, 728, 969], "dash": [16, 31, 75, 101, 113, 124, 138, 141, 143, 154, 169, 174, 177, 183, 184, 191, 194, 195, 219, 239, 249, 310, 314, 968], "bone": [16, 195, 318], "rais": [16, 99, 183, 216, 217, 242, 283, 291, 346, 348, 350, 351, 352, 355, 358, 360, 365, 368, 375, 378, 402, 408, 409, 412, 414, 430, 434, 435, 436, 437, 438, 439, 440, 441, 447, 448, 449, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 474, 498, 499, 503, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 538, 541, 542, 546, 547, 553, 554, 555, 556, 558, 559, 567, 568, 575, 576, 582, 594, 597, 600, 601, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 655, 661, 663, 667, 674, 676, 677, 678, 679, 691, 693, 694, 702, 742, 746, 747, 748, 751, 752, 753, 761, 762, 763, 764, 765, 766, 767, 769, 770, 772, 777, 781, 785, 788, 789, 790, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 811, 813, 815, 816, 817, 821, 823, 824, 825, 826, 829, 830, 831, 832, 833, 838, 839, 840, 844, 845, 846, 853, 861, 862, 863, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 881, 884, 886, 887, 889, 890, 907, 911, 915, 938, 939, 940, 941, 954, 964, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "valueerror": [16, 143, 216, 217, 348, 352, 365, 433, 542, 568, 582, 600, 636, 679, 798, 816, 825, 831, 845, 885, 889, 890, 939, 940, 941, 964, 997, 998, 999, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1012], "fm": 16, "kernel_group": 16, "radiobutton": 16, "command": [16, 213, 333, 334, 344, 346, 350, 352, 354, 364, 382, 473, 973, 988, 997], "anchor": [16, 250], "valbox": 16, "stringvar": 16, "textvari": 16, "cmap_group": 16, "hyperplan": [16, 84, 103, 141, 151, 160, 174, 191, 217, 242, 303, 304, 305, 306, 307, 308, 312, 313, 477, 596, 623, 624, 631, 633, 639, 640, 641, 642, 866, 868, 870, 871, 968, 969, 975], "train_button": 16, "get_pars": 16, "optpars": 16, "optionpars": 16, "op": [16, 350, 393, 623, 624, 631, 632, 633, 641, 642, 643, 823, 824, 866, 964], "add_opt": 16, "action": [16, 291, 320, 345, 349, 350, 364, 964, 1005], "store": [16, 30, 50, 51, 66, 68, 76, 83, 133, 146, 159, 168, 171, 186, 203, 210, 220, 230, 244, 248, 297, 322, 328, 333, 340, 341, 346, 348, 353, 354, 355, 358, 360, 375, 377, 379, 381, 382, 384, 385, 403, 405, 409, 411, 415, 422, 434, 435, 438, 439, 440, 441, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 468, 473, 499, 500, 506, 514, 515, 520, 521, 522, 523, 528, 529, 530, 531, 534, 535, 554, 575, 576, 592, 596, 597, 600, 603, 614, 615, 619, 625, 626, 627, 628, 631, 632, 638, 640, 641, 642, 643, 653, 654, 655, 657, 662, 663, 665, 666, 667, 745, 761, 762, 763, 769, 777, 785, 806, 807, 808, 809, 810, 812, 814, 815, 816, 817, 818, 821, 837, 844, 846, 847, 861, 862, 863, 886, 887, 911, 912, 925, 928, 940, 944, 946, 950, 957, 966, 969, 970, 973, 979, 988, 992, 995, 996, 997, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "dest": [16, 293], "dump": [16, 17, 368, 452, 806, 807], "argv": [16, 213], "opt": [16, 344, 348], "arg": [16, 216, 275, 347, 360, 379, 381, 388, 536, 537, 538, 539, 540, 541, 542, 543, 582, 664, 830, 950, 956, 957], "parse_arg": 16, "wm_titl": 16, "mainloop": 16, "__main__": [16, 301, 358], "svm_gui": [16, 975, 986], "iso": [16, 84, 137, 151, 194, 204, 575, 578, 579, 975], "gpc": [16, 28, 84, 110, 120, 129, 137, 143, 144, 145, 146, 151, 192, 194, 195, 215, 274, 282, 302, 314, 469, 575, 576, 578, 579, 584, 585, 587, 588, 668, 705, 975, 976, 990, 1005], "exercis": [16, 69, 110, 120, 135, 140, 142, 192, 195, 252, 302, 313, 314, 317, 318, 335, 343, 346, 466, 467, 469, 470, 617, 618, 623, 763, 768, 808, 871, 975, 980, 998], "classic": [17, 177, 206, 225, 231, 343, 350, 376, 378, 379, 408, 412, 414, 424, 457, 465, 469, 475, 597, 598, 876, 877, 948, 950, 953, 956, 964, 973, 982, 995, 996, 1000, 1009], "graph": [17, 24, 36, 41, 43, 63, 64, 146, 202, 236, 259, 261, 300, 333, 346, 349, 360, 371, 376, 385, 406, 409, 410, 417, 418, 422, 427, 428, 436, 437, 443, 476, 550, 551, 653, 656, 657, 660, 746, 808, 809, 810, 812, 814, 816, 817, 818, 819, 820, 821, 862, 951, 954, 957, 959, 967, 970, 973, 978, 984, 987, 995, 1002, 1003, 1005, 1008, 1010], "vertex": [17, 25, 374, 418, 1008], "en": [17, 23, 354, 496, 502, 560, 601, 629, 633, 636, 650, 651, 660, 670, 808, 809, 814, 815, 816, 817, 844, 860, 874, 875, 950, 954, 969, 970], "wiki": [17, 23, 352, 354, 560, 601, 633, 636, 660, 670, 808, 809, 814, 815, 816, 817, 844, 860, 874, 875, 950, 970], "eigenvector_centr": 17, "webpag": [17, 159, 346], "pagerank": 17, "insid": [17, 19, 25, 155, 184, 216, 239, 299, 308, 335, 340, 341, 348, 352, 365, 374, 382, 402, 408, 409, 412, 414, 430, 434, 435, 436, 437, 438, 439, 440, 441, 447, 448, 449, 498, 499, 503, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 546, 547, 553, 554, 555, 556, 559, 575, 576, 600, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 655, 764, 765, 770, 772, 781, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 811, 813, 816, 817, 823, 824, 826, 829, 831, 832, 833, 838, 845, 846, 861, 862, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 911, 914, 922, 961, 978, 1012], "accord": [17, 23, 25, 34, 46, 73, 107, 113, 136, 139, 165, 182, 200, 213, 288, 312, 321, 329, 346, 348, 358, 359, 360, 361, 371, 372, 374, 376, 378, 379, 381, 382, 384, 402, 415, 417, 421, 425, 427, 430, 434, 469, 481, 482, 483, 490, 495, 497, 500, 501, 503, 505, 515, 518, 519, 526, 527, 528, 531, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 606, 607, 609, 610, 614, 623, 624, 635, 645, 656, 660, 699, 743, 744, 763, 764, 765, 766, 767, 770, 771, 772, 777, 787, 801, 802, 803, 804, 805, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 829, 836, 844, 856, 858, 859, 866, 867, 868, 869, 871, 872, 948, 950, 954, 956, 957, 964, 967, 968, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "tradit": [17, 52, 182, 197, 321, 335, 372, 381, 382, 597, 659, 950, 953, 964, 973, 978], "power_iter": 17, "martinsson": [17, 500, 506, 903], "dbpedia": 17, "content": [17, 284, 320, 322, 341, 346, 350, 352, 368, 373, 382, 451, 468, 473, 474, 553, 554, 556, 636, 880, 963, 978, 988, 996, 1005], "bz2": [17, 473, 474], "bz2file": 17, "pprint": [17, 114, 216, 240, 341, 898], "urlopen": 17, "randomized_svd": [17, 355, 416, 418, 497, 506, 509, 511, 995, 996, 1001, 1008, 1009, 1010], "redirects_url": 17, "redirects_en": 17, "nt": 17, "redirects_filenam": 17, "page_links_url": 17, "page_links_en": 17, "page_links_filenam": 17, "resourc": [17, 39, 114, 149, 182, 276, 290, 332, 349, 359, 360, 381, 766, 767, 955, 974, 978, 980, 990, 1003, 1008, 1009], "wait": [17, 344, 346, 350, 360, 631, 632, 633, 641, 643, 1007], "wb": 17, "index_map": 17, "setdefault": [17, 881], "dbpedia_resource_prefix_len": 17, "shortname_slic": 17, "short_nam": 17, "nt_uri": 17, "uri": 17, "prefix": [17, 66, 240, 261, 288, 346, 350, 352, 354, 384, 390, 407, 408, 410, 412, 414, 429, 432, 447, 448, 449, 450, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 514, 604, 605, 606, 607, 653, 654, 657, 769, 790, 810, 815, 818, 822, 825, 826, 832, 858, 859, 1001, 1002, 1008, 1010, 1013], "get_redirect": 17, "transit": [17, 316, 350, 1006], "malform": [17, 999], "1000000": [17, 501], "08d": 17, "isoformat": 17, "closur": 17, "transitive_target": 17, "seen": [17, 24, 37, 52, 63, 77, 90, 96, 108, 114, 154, 155, 178, 206, 212, 216, 275, 279, 308, 320, 341, 348, 350, 359, 360, 372, 374, 375, 376, 378, 379, 380, 381, 382, 383, 384, 390, 402, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 429, 430, 434, 435, 436, 437, 438, 439, 440, 441, 447, 448, 449, 450, 486, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 575, 576, 588, 592, 593, 594, 595, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 653, 654, 655, 656, 657, 761, 762, 763, 766, 767, 777, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 822, 823, 824, 825, 826, 829, 830, 831, 832, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 858, 859, 861, 862, 863, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 929, 935, 943, 949, 954, 957, 958, 964, 970, 978, 983, 984, 986, 987, 1007, 1008, 1009, 1010, 1011, 1012], "break": [17, 36, 43, 66, 76, 151, 171, 174, 188, 216, 227, 256, 291, 298, 303, 320, 322, 346, 348, 350, 352, 359, 374, 434, 477, 604, 738, 742, 745, 761, 839, 846, 851, 868, 871, 950, 953, 962, 964, 969, 974, 975, 995, 996, 1002, 1003, 1005, 1007, 1011], "get_adjacency_matrix": 17, "resolv": [17, 345, 346, 350, 354, 361, 382, 411, 417, 427, 656, 660, 903, 944, 954, 1002, 1004, 1005, 1008, 1012], "lil_matrix": 17, "float32": [17, 113, 205, 277, 293, 334, 341, 346, 348, 360, 370, 522, 523, 524, 525, 528, 529, 530, 531, 558, 559, 605, 606, 623, 664, 727, 831, 874, 875, 876, 877, 884, 930, 931, 932, 970, 979, 988, 998, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "del": [17, 352, 1007, 1008], "csr": [17, 322, 333, 340, 341, 355, 358, 360, 382, 385, 408, 411, 412, 414, 415, 424, 462, 473, 488, 492, 518, 519, 522, 523, 529, 530, 531, 555, 595, 623, 657, 679, 732, 756, 808, 809, 810, 812, 814, 816, 817, 818, 819, 820, 821, 829, 833, 835, 837, 838, 839, 841, 844, 845, 846, 849, 850, 851, 853, 856, 859, 874, 875, 876, 877, 882, 886, 887, 909, 917, 929, 930, 931, 932, 933, 934, 935, 936, 937, 957, 964, 968, 995, 996, 1001, 1003, 1004, 1010, 1011, 1012], "tocsr": 17, "convers": [17, 114, 173, 320, 329, 335, 340, 346, 348, 354, 358, 360, 368, 382, 537, 821, 830, 838, 886, 887, 940, 951, 974, 978, 1003, 1004, 1005, 1008, 1011], "5m": 17, "ram": [17, 50, 335, 381, 858, 859, 956, 969, 988, 1001, 1007, 1010, 1011], "5000000": 17, "strongest": [17, 175], "highest": [17, 19, 25, 77, 132, 136, 186, 237, 239, 250, 290, 320, 346, 358, 372, 374, 378, 381, 383, 402, 520, 522, 529, 557, 560, 561, 563, 564, 565, 568, 569, 571, 600, 602, 690, 720, 758, 761, 763, 766, 767, 777, 863, 874, 905, 943, 950, 954, 955, 958, 968, 970, 1007], "centrality_scor": 17, "networkx": [17, 355], "copyright": [17, 77], "aric": 17, "hagberg": 17, "lanl": 17, "gov": [17, 343], "dan": [17, 995, 999, 1000, 1001, 1003, 1004], "schult": 17, "dschult": 17, "pieter": [17, 1001, 1002, 1009], "swart": 17, "incoming_count": 17, "nonzero": [17, 19, 96, 181, 213, 243, 322, 371, 385, 409, 488, 489, 496, 502, 507, 513, 553, 556, 650, 651, 664, 808, 809, 812, 814, 816, 817, 954], "indptr": [17, 259, 328, 929, 930, 931, 932, 933, 934, 935, 1003, 1011], "dangl": 17, "isclos": 17, "guess": [17, 101, 110, 378, 381, 382, 443, 497, 503, 505, 506, 512, 752, 954, 968], "prev_scor": 17, "dot": [17, 30, 31, 41, 46, 51, 54, 59, 73, 74, 75, 77, 79, 80, 88, 89, 90, 94, 96, 101, 104, 138, 139, 145, 146, 154, 163, 166, 174, 176, 177, 189, 214, 226, 227, 229, 230, 243, 304, 306, 312, 333, 348, 352, 355, 360, 371, 379, 382, 498, 503, 505, 512, 555, 556, 579, 611, 612, 615, 617, 618, 619, 622, 625, 626, 627, 628, 646, 649, 652, 725, 727, 838, 878, 904, 952, 956, 964, 968, 969, 987, 1004], "converg": [17, 54, 58, 73, 74, 112, 114, 117, 138, 144, 147, 175, 184, 190, 198, 226, 228, 275, 276, 279, 284, 298, 335, 355, 360, 371, 374, 379, 382, 384, 386, 405, 408, 411, 412, 413, 414, 417, 419, 424, 425, 426, 427, 436, 437, 443, 447, 448, 449, 498, 500, 501, 502, 503, 504, 511, 518, 536, 575, 609, 610, 611, 612, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 633, 637, 639, 641, 643, 647, 648, 652, 653, 655, 656, 659, 660, 761, 762, 815, 823, 824, 861, 862, 868, 944, 949, 950, 951, 953, 958, 968, 995, 998, 999, 1000, 1002, 1003, 1006, 1008, 1009, 1010, 1011, 1012], "l_inf": 17, "scores_max": 17, "err": [17, 79, 91, 101], "6f": [17, 91, 244, 701, 759], "wikipedia_principal_eigenvector": [17, 975], "concern": [18, 33, 72, 78, 81, 86, 98, 100, 130, 137, 148, 151, 158, 160, 201, 224, 230, 255, 257, 260, 273, 278, 296, 303, 319, 323, 333, 348, 373, 951, 966], "twenti": [19, 213, 343, 371, 374, 988], "comp": [19, 79, 80, 90, 97, 277, 301, 320, 321, 322, 341, 988], "window": [19, 301, 341, 346, 348, 349, 382, 973, 995, 998, 1002, 1006, 1008, 1009], "misc": [19, 50, 90, 240, 301, 320, 321, 322, 341, 987], "categori": [19, 41, 59, 66, 67, 111, 122, 154, 155, 182, 190, 197, 219, 240, 275, 276, 281, 285, 286, 290, 293, 295, 301, 320, 321, 322, 340, 341, 355, 373, 374, 375, 381, 382, 384, 453, 461, 462, 468, 526, 527, 613, 623, 624, 634, 645, 707, 722, 723, 802, 839, 840, 847, 944, 950, 951, 952, 956, 962, 979, 988, 1001, 1003, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "noth": [19, 66, 320, 321, 351, 507, 679, 829, 838, 887, 964], "frequenc": [19, 26, 138, 155, 166, 176, 182, 213, 289, 290, 320, 321, 322, 341, 358, 372, 378, 379, 381, 382, 383, 516, 522, 524, 525, 526, 529, 553, 554, 555, 556, 569, 623, 624, 629, 631, 633, 639, 640, 641, 650, 651, 795, 830, 839, 840, 866, 868, 871, 874, 876, 892, 950, 951, 956, 964, 968, 970, 997, 999, 1000, 1006, 1013], "dhillon": [19, 371, 416, 418, 476], "cut": [19, 40, 43, 62, 63, 204, 350, 358, 371, 374, 411, 417, 418, 427, 553, 556, 656, 660, 964], "minibatchkmean": [19, 33, 35, 37, 40, 41, 47, 55, 56, 58, 60, 84, 151, 321, 335, 374, 379, 405, 407, 412, 477, 743, 975, 996, 1001, 1002, 1003, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "coclust": [19, 371, 416, 478], "4415": 19, "3015": 19, "talk": [19, 66, 240, 320, 321, 322, 341, 360, 368, 978, 980, 988], "polit": [19, 320, 341, 345, 950, 955], "mideast": [19, 341], "cosmo": 19, "angmar": 19, "alfalfa": 19, "alphalpha": 19, "prolin": [19, 284, 343], "benson": 19, "1948": 19, "4325": 19, "gun": [19, 341], "sci": [19, 66, 320, 321, 322, 341, 358, 453, 654, 658, 837, 951, 964, 988], "med": [19, 66, 248, 341, 964, 988], "geb": 19, "gordon": [19, 228, 1001, 1005, 1007, 1009], "clinton": 19, "pitt": 19, "cdt": 19, "surrend": 19, "veal": 19, "1259": 19, "3534": 19, "soc": [19, 341, 988], "religion": [19, 240, 320, 321, 322, 341, 955, 988], "alt": [19, 240, 301, 320, 321, 322, 341, 354, 453, 988], "atheism": [19, 240, 301, 320, 321, 322, 341, 453, 988], "god": [19, 320, 321, 988], "jesu": [19, 320, 321], "kent": 19, "belief": [19, 239, 822, 959], "christ": 19, "faith": [19, 144, 313], "moral": [19, 67, 320, 623, 1003, 1007, 1008], "775": 19, "1623": 19, "pc": [19, 301, 322, 341], "hardwar": [19, 301, 322, 333, 334, 341, 344, 358, 364, 370, 973, 1009, 1010], "scsi": 19, "nada": 19, "vga": 19, "esdi": 19, "isa": 19, "kth": [19, 784], "s3": [19, 88, 136, 170, 171, 343, 987], "vlb": 19, "bmug": 19, "2180": 19, "2802": 19, "mac": [19, 285, 301, 341, 346, 673, 954], "electron": [19, 136, 341, 343, 503, 505, 512, 592], "voltag": 19, "ship": [19, 122, 150, 325, 334, 344, 364, 382, 950, 995, 1004], "circuit": [19, 951], "mpce": 19, "kolstad": 19, "spectralcoclust": [19, 21, 371, 416, 997, 1002, 1006], "v_measure_scor": [19, 34, 35, 46, 55, 294, 321, 374, 682, 700, 701, 721, 954, 1004], "number_norm": 19, "token": [19, 322, 333, 341, 350, 382, 501, 553, 554, 555, 556, 995, 1003, 1007], "placehold": [19, 350, 592, 593, 594, 595, 778, 779, 782, 783, 944], "begin": [19, 99, 136, 138, 234, 241, 258, 291, 320, 329, 346, 351, 352, 360, 371, 374, 381, 518, 519, 524, 526, 527, 631, 632, 641, 642, 643, 943, 946, 950, 954, 964, 966, 968, 1003, 1009, 1010], "By": [19, 42, 87, 117, 118, 119, 161, 186, 216, 248, 256, 279, 288, 294, 295, 312, 320, 334, 346, 348, 352, 353, 360, 365, 374, 375, 377, 378, 379, 380, 381, 383, 403, 406, 410, 411, 415, 429, 432, 433, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 489, 491, 514, 515, 522, 523, 524, 525, 529, 530, 550, 551, 553, 554, 556, 571, 574, 597, 598, 636, 638, 640, 642, 655, 657, 659, 662, 664, 665, 667, 668, 683, 693, 694, 698, 702, 747, 748, 751, 758, 760, 766, 767, 812, 826, 827, 839, 840, 842, 844, 854, 856, 864, 869, 870, 874, 875, 876, 877, 886, 887, 922, 943, 944, 946, 950, 954, 961, 962, 964, 966, 970, 979, 983, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1005, 1007, 1009, 1012, 1013], "isdigit": [19, 382], "numbernormalizingvector": 19, "build_token": [19, 382, 553, 554, 556], "super": [19, 24, 26, 348, 382, 1003], "forsal": [19, 322, 341], "rec": [19, 322, 341, 606], "auto": [19, 24, 26, 31, 54, 55, 85, 132, 133, 136, 142, 159, 165, 202, 207, 214, 221, 236, 238, 246, 259, 262, 267, 281, 288, 289, 290, 291, 292, 293, 304, 305, 306, 311, 314, 315, 322, 340, 341, 348, 381, 383, 384, 385, 406, 409, 410, 411, 412, 414, 415, 417, 420, 421, 422, 424, 427, 461, 473, 474, 500, 503, 505, 506, 509, 512, 514, 522, 523, 526, 527, 528, 529, 530, 532, 533, 558, 559, 562, 567, 572, 573, 594, 596, 597, 598, 600, 604, 611, 612, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 637, 638, 639, 645, 646, 647, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 663, 665, 667, 699, 705, 766, 767, 794, 806, 807, 808, 809, 810, 811, 812, 814, 815, 816, 817, 818, 819, 820, 823, 824, 839, 840, 847, 858, 859, 863, 866, 867, 868, 869, 870, 871, 872, 876, 877, 902, 903, 920, 923, 945, 948, 950, 951, 954, 955, 957, 964, 969, 973, 997, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "motorcycl": [19, 341], "sport": [19, 341], "basebal": [19, 341], "hockei": [19, 341], "crypt": [19, 341], "n_cluster": [19, 20, 21, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 51, 53, 54, 55, 56, 57, 58, 59, 61, 63, 64, 87, 292, 321, 346, 360, 374, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 424, 425, 426, 427, 428, 476, 478, 675, 756, 757, 987, 995, 999, 1001, 1003, 1004, 1006, 1009], "svd_method": [19, 416, 418, 497, 998], "kmean": [19, 20, 33, 40, 42, 43, 45, 47, 50, 54, 55, 58, 151, 228, 231, 282, 292, 321, 355, 365, 374, 405, 408, 413, 414, 417, 427, 477, 675, 756, 757, 761, 762, 831, 957, 964, 974, 975, 987, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "20000": [19, 89], "n_init": [19, 39, 40, 42, 47, 54, 55, 58, 61, 202, 203, 204, 205, 289, 292, 321, 374, 408, 412, 414, 416, 417, 418, 424, 427, 655, 659, 761, 762, 987, 995, 1003, 1009, 1010, 1011], "y_coclust": 19, "row_labels_": [19, 20, 21, 371, 416, 418], "y_kmean": 19, "fit_predict": [19, 53, 54, 57, 209, 216, 219, 266, 348, 360, 374, 392, 396, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 434, 528, 642, 756, 757, 761, 762, 812, 818, 826, 870, 960, 1000, 1003, 1004, 1008, 1010, 1012], "document_nam": 19, "bicluster_ncut": 19, "get_indic": [19, 389, 416, 418], "float_info": 19, "row_compl": 19, "logical_not": [19, 61, 96, 185], "rows_": [19, 371, 389, 416, 418], "col_compl": 19, "columns_": [19, 371, 389, 416, 418], "most_common": 19, "counter": [19, 101, 246, 374, 641, 642, 643, 1008], "itemgett": 19, "revers": [19, 71, 136, 187, 239, 499, 506, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 576, 753, 826, 954, 995, 996, 1005, 1007, 1011], "best_idx": [19, 238], "get_shap": [19, 389, 416, 418], "cluster_doc": 19, "cluster_word": 19, "cat_str": 19, "0f": [19, 55], "out_of_cluster_doc": 19, "word_col": 19, "word_scor": 19, "important_word": 19, "394": [19, 66, 147, 975], "plot_bicluster_newsgroup": [19, 975], "semi": [19, 29, 110, 120, 129, 140, 214, 217, 281, 290, 305, 312, 322, 341, 360, 453, 469, 500, 553, 555, 641, 693, 792, 826, 830, 861, 862, 863, 871, 952, 957, 960, 975, 976, 990, 995, 1007, 1010], "supervis": [19, 24, 26, 29, 34, 46, 51, 55, 80, 95, 106, 110, 117, 120, 128, 129, 140, 203, 214, 217, 227, 239, 268, 281, 290, 300, 305, 312, 321, 322, 333, 341, 348, 359, 360, 372, 374, 377, 378, 379, 381, 382, 384, 402, 404, 429, 453, 468, 469, 518, 553, 555, 558, 559, 599, 641, 693, 764, 765, 768, 770, 771, 772, 773, 778, 779, 780, 781, 782, 783, 786, 787, 788, 789, 791, 792, 815, 825, 826, 830, 840, 847, 861, 862, 863, 871, 948, 951, 954, 956, 957, 960, 964, 965, 969, 970, 971, 973, 974, 975, 977, 979, 980, 982, 988, 990, 995, 1001, 1007], "checkerboard": [20, 371, 416, 418, 476, 478], "simultan": [20, 52, 88, 243, 247, 294, 316, 327, 338, 371, 374, 943, 954, 955, 970, 978, 1002], "identifi": [20, 83, 89, 95, 114, 115, 153, 154, 182, 185, 186, 228, 230, 237, 242, 248, 268, 286, 290, 312, 320, 321, 340, 341, 345, 346, 350, 351, 360, 374, 375, 378, 381, 382, 411, 415, 422, 452, 461, 473, 474, 520, 521, 522, 523, 528, 529, 530, 531, 571, 608, 614, 664, 677, 738, 791, 812, 831, 861, 862, 943, 950, 954, 960, 967, 978, 986, 1002, 1004, 1009, 1010], "particularli": [20, 29, 66, 67, 70, 96, 120, 183, 211, 239, 281, 289, 318, 329, 333, 346, 355, 360, 374, 375, 377, 380, 382, 461, 769, 785, 803, 903, 922, 923, 950, 951, 954, 956, 962, 974, 978, 987, 995, 1000, 1002, 1003, 1009], "suit": [20, 87, 120, 154, 182, 183, 209, 230, 291, 292, 294, 320, 334, 346, 348, 351, 352, 354, 358, 364, 377, 379, 381, 415, 417, 468, 642, 803, 847, 897, 943, 946, 951, 954, 956, 957, 968, 973, 974, 978, 981, 1002, 1009], "arrang": [20, 258, 597, 797, 798, 799, 800, 954], "genom": [20, 478], "rearrang": [20, 21, 371], "kemaleren": [20, 21], "make_checkerboard": [20, 476, 997], "uniform": [20, 29, 34, 50, 113, 114, 118, 132, 139, 144, 147, 161, 162, 196, 207, 209, 212, 247, 262, 265, 266, 271, 274, 280, 282, 283, 286, 292, 294, 307, 348, 351, 374, 403, 404, 516, 534, 535, 575, 576, 593, 604, 614, 615, 619, 633, 641, 642, 643, 664, 686, 687, 692, 709, 710, 712, 714, 715, 717, 749, 754, 755, 767, 775, 777, 801, 802, 805, 808, 809, 816, 817, 831, 843, 845, 855, 891, 905, 943, 944, 953, 954, 957, 1001, 1003, 1005, 1009, 1011], "matshow": [20, 21, 63, 109, 134, 276, 467], "afterward": [20, 350, 500, 506, 790], "row_idx_shuffl": 20, "permut": [20, 21, 34, 76, 109, 115, 129, 131, 151, 152, 198, 232, 239, 283, 286, 300, 363, 369, 374, 381, 429, 461, 465, 469, 524, 525, 529, 530, 592, 595, 599, 644, 669, 670, 682, 700, 701, 719, 721, 759, 780, 782, 791, 792, 826, 840, 871, 874, 875, 903, 923, 925, 928, 954, 968, 975, 983, 986, 990, 995, 1001, 1008, 1010], "col_idx_shuffl": 20, "redefin": [20, 114, 154], "lost": [20, 54, 77, 341, 347, 358, 951, 954], "ground": [20, 30, 37, 42, 46, 54, 55, 58, 73, 77, 80, 90, 118, 146, 166, 176, 182, 183, 219, 231, 242, 321, 360, 373, 374, 668, 669, 670, 673, 677, 678, 679, 680, 682, 683, 686, 687, 688, 692, 693, 694, 698, 700, 701, 702, 703, 705, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 721, 747, 748, 749, 750, 751, 754, 755, 759, 760, 954, 967, 979, 987, 1003], "truth": [20, 30, 37, 42, 46, 54, 55, 58, 73, 77, 80, 90, 94, 118, 146, 166, 176, 182, 183, 219, 231, 242, 321, 360, 373, 374, 668, 669, 670, 673, 677, 678, 679, 680, 682, 683, 686, 687, 688, 690, 692, 693, 694, 698, 700, 701, 702, 703, 705, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 747, 748, 749, 750, 751, 754, 755, 759, 760, 954, 979, 987, 1003, 1009], "consensus_scor": [20, 21, 371, 997], "biclusters_": [20, 21, 389, 416, 418], "consensu": [20, 21, 34, 345, 346, 361, 371, 374, 614, 636, 643, 644, 684, 954], "perfect": [20, 25, 34, 66, 76, 90, 92, 178, 182, 320, 321, 346, 350, 374, 378, 518, 519, 655, 659, 669, 670, 673, 682, 690, 692, 695, 701, 707, 720, 721, 749, 750, 759, 950, 954, 957, 969, 978, 986, 1009], "ascend": [20, 67, 156, 285, 381, 415, 421, 592, 600, 878, 879, 880, 968, 1005, 1011], "column_labels_": [20, 21, 371, 416, 418], "reorder": [20, 93, 360, 662, 683, 974, 1003], "reordered_row": 20, "reordered_data": 20, "step": [20, 25, 31, 39, 51, 52, 55, 64, 66, 67, 68, 69, 70, 76, 80, 90, 94, 101, 106, 110, 111, 112, 122, 133, 134, 135, 140, 143, 154, 156, 182, 190, 200, 210, 211, 214, 220, 223, 231, 237, 240, 246, 248, 259, 261, 262, 267, 274, 277, 281, 284, 285, 289, 292, 302, 304, 308, 321, 322, 324, 329, 333, 341, 344, 345, 346, 348, 350, 351, 354, 358, 360, 371, 372, 374, 376, 377, 379, 381, 382, 383, 407, 412, 414, 501, 502, 503, 504, 511, 528, 553, 554, 556, 558, 559, 562, 571, 592, 609, 613, 631, 632, 634, 641, 643, 644, 645, 659, 665, 761, 762, 763, 766, 767, 777, 797, 798, 799, 800, 822, 823, 824, 826, 827, 829, 866, 867, 868, 869, 871, 872, 902, 903, 925, 929, 944, 950, 953, 958, 959, 964, 968, 970, 971, 973, 977, 984, 988, 995, 999, 1000, 1002, 1003, 1004, 1006, 1007, 1008, 1011], "outer": [20, 92, 244, 299, 416, 479, 605, 615, 616, 619, 946, 996], "product": [20, 67, 87, 123, 138, 143, 155, 312, 329, 333, 348, 349, 352, 355, 368, 371, 379, 381, 416, 503, 505, 512, 547, 554, 555, 556, 578, 579, 598, 605, 629, 630, 650, 651, 725, 727, 739, 741, 838, 841, 858, 859, 904, 943, 946, 950, 952, 964, 966, 968, 969, 973, 978, 1003], "shade": [20, 50, 165, 262, 267, 304, 379], "470": [20, 975], "plot_spectral_biclust": [20, 975], "silhouett": [20, 33, 35, 46, 54, 55, 151, 321, 346, 412, 477, 756, 757, 975, 995, 999], "propag": [20, 30, 33, 34, 46, 60, 61, 151, 296, 341, 373, 405, 419, 467, 477, 479, 662, 669, 670, 678, 679, 682, 683, 701, 757, 759, 826, 840, 861, 862, 863, 920, 921, 958, 975, 976, 989, 990, 995, 1007, 1010], "biclust": [21, 66, 299, 301, 320, 321, 322, 382, 389, 414, 416, 418, 453, 476, 478, 556, 684, 759, 954, 975, 989, 990, 997, 1001], "make_biclust": [21, 478, 997], "implant": 21, "row_idx": [21, 182], "col_idx": 21, "fit_data": 21, "308": [21, 600, 975], "plot_spectral_coclust": [21, 975], "being": [23, 26, 32, 42, 49, 52, 77, 80, 83, 92, 101, 105, 117, 119, 138, 143, 154, 156, 159, 176, 216, 219, 233, 239, 277, 283, 284, 308, 312, 320, 322, 344, 345, 346, 348, 350, 351, 358, 360, 361, 368, 374, 376, 378, 381, 382, 383, 384, 385, 387, 406, 407, 409, 410, 415, 421, 434, 440, 458, 488, 534, 605, 614, 621, 637, 639, 652, 655, 659, 677, 683, 698, 700, 747, 753, 761, 806, 807, 812, 814, 816, 817, 818, 841, 859, 904, 943, 944, 950, 953, 954, 957, 960, 961, 964, 966, 968, 969, 970, 995, 996, 1001, 1002, 1003, 1004, 1006, 1007, 1009, 1010, 1011, 1012, 1013], "postprocess": [23, 372, 500, 506], "brier": [23, 24, 26, 372, 674], "brier_scor": 23, "sigmoid": [23, 24, 25, 26, 338, 381, 402, 417, 500, 526, 585, 604, 608, 729, 738, 741, 823, 824, 868, 869, 870, 871, 872, 959, 969, 990, 1008, 1012], "isoton": [23, 24, 71, 151, 208, 402, 622, 889, 975, 976, 990, 996, 997, 998, 999, 1001, 1008, 1011], "belong": [23, 26, 28, 52, 57, 219, 239, 288, 294, 299, 340, 341, 371, 372, 374, 375, 377, 378, 381, 389, 405, 408, 412, 413, 414, 416, 418, 488, 677, 695, 770, 776, 787, 813, 833, 847, 910, 911, 950, 953, 954, 956, 957, 958, 960, 969, 973, 979, 986], "mblondel": [23, 45, 173, 203, 240, 320, 340, 473], "telecom": [23, 24, 39, 209, 978], "balaz": [23, 999], "kegl": [23, 999], "jhm": [23, 24, 25, 26, 138, 139, 141, 142, 143, 144, 145, 147, 215], "informatik": [23, 24, 25, 26, 138, 139, 141, 142, 143, 144, 145, 147, 215, 954], "uni": [23, 24, 25, 26, 70, 105, 138, 139, 141, 142, 143, 144, 145, 147, 173, 214, 215, 299, 316], "bremen": [23, 24, 25, 26, 138, 139, 141, 142, 143, 144, 145, 147, 215], "make_blob": [23, 25, 31, 35, 39, 40, 41, 46, 52, 53, 54, 56, 57, 59, 60, 61, 84, 174, 194, 209, 228, 282, 289, 292, 306, 309, 310, 317, 342, 348, 349, 381, 480, 661, 675, 756, 757, 1003, 1006, 1009], "50000": 23, "n_bin": [23, 24, 26, 50, 182, 200, 280, 282, 286, 403, 404, 831, 964], "calibration_curv": [23, 372, 402, 403, 1004, 1009, 1013], "blob": [23, 31, 32, 39, 41, 54, 59, 61, 84, 374, 413, 477], "sample_weight": [23, 163, 182, 195, 200, 216, 289, 294, 295, 318, 346, 360, 365, 374, 381, 385, 391, 397, 402, 408, 409, 412, 414, 424, 425, 430, 434, 447, 448, 449, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 575, 576, 597, 598, 599, 600, 602, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 652, 662, 663, 665, 667, 668, 672, 673, 674, 677, 678, 681, 683, 685, 686, 687, 688, 690, 691, 692, 693, 694, 698, 699, 702, 703, 704, 705, 707, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 720, 746, 747, 748, 749, 751, 752, 753, 754, 755, 758, 760, 763, 777, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 811, 813, 816, 817, 823, 824, 826, 831, 845, 846, 861, 862, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 878, 880, 914, 942, 954, 968, 969, 970, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013], "sw_train": [23, 289], "sw_test": [23, 289], "calibratedclassifiercv": [23, 24, 25, 329, 360, 365, 372, 641, 943, 969, 974, 999, 1001, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012], "brier_score_loss": [23, 24, 372, 954, 1003, 1004, 1005, 1013], "gaussiannb": [23, 24, 26, 29, 124, 241, 329, 372, 381, 402, 534, 801, 802, 803, 805, 827, 948, 955, 956, 999, 1000, 1001, 1003, 1008, 1011], "With": [23, 32, 41, 64, 71, 83, 92, 117, 119, 132, 151, 155, 182, 184, 208, 210, 215, 217, 223, 239, 263, 333, 341, 346, 348, 360, 365, 374, 375, 378, 381, 383, 402, 404, 466, 506, 547, 597, 598, 623, 824, 827, 829, 840, 846, 847, 873, 875, 947, 950, 951, 954, 955, 957, 958, 961, 968, 970, 975, 979, 980, 987, 992, 998, 1002, 1003, 1005, 1007, 1009], "itself": [23, 26, 46, 52, 101, 114, 118, 155, 166, 180, 216, 222, 248, 259, 286, 308, 321, 333, 335, 345, 346, 348, 350, 360, 365, 372, 373, 374, 385, 405, 406, 409, 410, 411, 434, 435, 436, 437, 438, 439, 440, 441, 492, 496, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 516, 531, 534, 548, 557, 560, 561, 563, 564, 565, 567, 568, 604, 605, 606, 607, 608, 610, 620, 654, 656, 756, 757, 801, 802, 803, 804, 805, 806, 807, 811, 819, 820, 831, 832, 833, 861, 862, 911, 946, 950, 951, 953, 957, 958, 962, 973, 999, 1010], "prob_pos_clf": 23, "predict_proba": [23, 24, 25, 26, 28, 32, 120, 124, 136, 139, 140, 141, 142, 216, 248, 258, 274, 281, 284, 288, 290, 320, 348, 353, 360, 372, 373, 381, 402, 403, 514, 515, 516, 518, 520, 522, 524, 526, 529, 532, 534, 558, 559, 575, 584, 585, 587, 588, 596, 597, 598, 623, 624, 641, 663, 665, 667, 705, 706, 752, 761, 762, 763, 766, 767, 777, 787, 794, 795, 796, 797, 798, 801, 802, 803, 804, 805, 808, 816, 823, 826, 833, 861, 862, 863, 868, 871, 874, 876, 950, 954, 956, 958, 961, 967, 968, 969, 970, 995, 996, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013], "clf_isoton": 23, "prob_pos_isoton": 23, "clf_sigmoid": 23, "prob_pos_sigmoid": 23, "clf_score": 23, "No": [23, 103, 116, 166, 174, 188, 190, 191, 216, 298, 313, 316, 325, 343, 354, 364, 374, 439, 524, 525, 555, 556, 600, 610, 629, 641, 643, 650, 651, 761, 950, 1012], "clf_isotonic_scor": 23, "clf_sigmoid_scor": 23, "084": [23, 177, 204, 975], "y_uniqu": 23, "rainbow": [23, 204], "this_i": [23, 188], "this_x": [23, 180, 188, 986], "this_sw": 23, "lexsort": 23, "linewidth": [23, 31, 32, 34, 37, 55, 69, 73, 80, 85, 102, 114, 117, 119, 138, 142, 146, 171, 172, 176, 177, 178, 180, 183, 185, 188, 196, 199, 209, 217, 219, 248, 252, 265, 269, 280, 289, 295, 306, 307, 309, 314, 326, 984], "51": [23, 79, 143, 200, 256, 259, 374, 375, 730, 740, 745, 950, 991], "uncalibr": [23, 24, 25, 402], "gnb": [23, 24, 26, 124, 381, 534, 956], "316": [23, 143, 147, 576, 579, 590, 842, 975], "plot_calibr": [23, 975], "metadata": [23, 99, 151, 163, 208, 321, 340, 341, 368, 388, 391, 394, 397, 398, 402, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 429, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 447, 448, 449, 450, 453, 454, 461, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 546, 547, 548, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 575, 576, 592, 593, 594, 595, 600, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 653, 654, 655, 656, 657, 761, 762, 763, 764, 765, 766, 767, 768, 770, 771, 772, 773, 776, 777, 778, 779, 780, 781, 782, 783, 784, 787, 788, 789, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 822, 823, 824, 825, 826, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 858, 859, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 910, 911, 912, 913, 914, 938, 954, 973, 974, 975, 979, 990, 1011], "rout": [23, 99, 151, 163, 208, 388, 391, 394, 397, 398, 402, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 429, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 447, 448, 449, 450, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 546, 547, 548, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 575, 576, 592, 593, 594, 595, 600, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 653, 654, 655, 656, 657, 761, 762, 763, 764, 765, 766, 767, 768, 770, 771, 772, 773, 776, 777, 778, 779, 780, 781, 782, 783, 784, 787, 788, 789, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 822, 823, 824, 825, 826, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 858, 859, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 911, 912, 913, 914, 938, 975, 990, 1009, 1011], "reliabl": [24, 26, 372, 378, 403, 404, 611, 970, 978], "diagram": [24, 26, 67, 221, 289, 295, 348, 372, 374, 403, 404, 433, 864, 964, 1006, 1007, 1012], "redund": [24, 26, 97, 135, 226, 231, 295, 329, 342, 345, 346, 351, 360, 372, 480, 599, 974, 988, 1007], "uninform": [24, 26, 286, 342, 351, 382, 943, 950, 1003], "rest": [24, 28, 111, 115, 151, 160, 166, 191, 197, 216, 219, 228, 256, 288, 301, 305, 352, 360, 373, 384, 477, 575, 596, 609, 623, 624, 641, 718, 752, 794, 795, 796, 815, 866, 868, 871, 950, 954, 955, 958, 961, 969, 975, 978, 999, 1000, 1009, 1010, 1011, 1013], "make_classif": [24, 26, 29, 84, 105, 106, 108, 133, 135, 236, 242, 250, 251, 269, 274, 281, 288, 290, 294, 316, 329, 342, 349, 370, 402, 403, 452, 477, 518, 520, 522, 529, 570, 572, 631, 662, 663, 665, 667, 785, 790, 791, 793, 796, 823, 826, 866, 873, 943, 954, 955, 964, 969, 1001, 1002, 1003, 1005], "100_000": [24, 26, 154], "n_inform": [24, 26, 29, 84, 105, 108, 133, 135, 161, 166, 185, 186, 236, 242, 252, 269, 274, 281, 288, 316, 348, 351, 480, 489, 518, 519, 520, 521, 529, 530, 570, 571, 572, 573, 574, 611, 612, 617, 625, 626, 627, 630, 646, 647, 648, 796, 955, 1003], "n_redund": [24, 26, 29, 84, 108, 133, 135, 236, 242, 269, 274, 281, 351, 402, 480, 518, 520, 529, 796], "logisticregress": [24, 28, 67, 69, 106, 124, 128, 135, 136, 165, 172, 173, 174, 175, 189, 197, 198, 210, 211, 221, 223, 242, 248, 277, 281, 288, 289, 290, 291, 292, 294, 320, 333, 346, 348, 352, 354, 359, 365, 372, 375, 381, 383, 394, 399, 403, 532, 534, 562, 596, 599, 608, 617, 624, 637, 638, 639, 640, 641, 652, 665, 752, 777, 785, 791, 793, 797, 798, 800, 851, 852, 854, 855, 856, 857, 873, 897, 898, 899, 938, 950, 954, 955, 964, 968, 969, 984, 986, 995, 996, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "baselin": [24, 101, 111, 114, 125, 136, 157, 161, 200, 249, 258, 290, 321, 343, 374, 383, 516, 517, 599, 954, 957, 988, 1011], "regular": [24, 26, 29, 33, 54, 56, 57, 58, 67, 69, 74, 92, 100, 112, 113, 115, 120, 127, 129, 138, 139, 140, 145, 147, 149, 151, 153, 160, 161, 162, 164, 166, 167, 169, 170, 171, 173, 178, 180, 182, 189, 196, 198, 200, 215, 226, 233, 235, 240, 241, 243, 252, 264, 265, 273, 275, 276, 277, 281, 282, 284, 285, 286, 302, 303, 305, 307, 308, 309, 312, 313, 318, 320, 322, 324, 333, 346, 358, 359, 372, 374, 376, 377, 379, 380, 381, 384, 402, 408, 412, 436, 437, 441, 443, 444, 445, 446, 469, 477, 479, 480, 485, 487, 489, 493, 503, 504, 505, 508, 512, 513, 515, 524, 526, 527, 553, 554, 556, 603, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 652, 654, 658, 699, 705, 714, 761, 762, 780, 792, 793, 823, 824, 827, 846, 866, 867, 868, 869, 871, 872, 873, 943, 944, 946, 947, 948, 951, 953, 959, 960, 964, 967, 968, 969, 975, 976, 978, 983, 984, 986, 990, 995, 996, 997, 999, 1000, 1004, 1005, 1007, 1008], "logist": [24, 26, 28, 65, 67, 71, 83, 97, 106, 128, 151, 160, 167, 169, 177, 179, 180, 186, 188, 191, 193, 199, 210, 212, 223, 247, 250, 258, 275, 276, 277, 284, 292, 304, 316, 320, 360, 361, 372, 375, 381, 383, 384, 402, 454, 461, 467, 469, 477, 506, 524, 526, 536, 575, 596, 611, 622, 623, 624, 631, 633, 641, 705, 763, 777, 792, 822, 823, 824, 826, 846, 873, 889, 891, 954, 958, 959, 968, 969, 975, 976, 978, 984, 990, 999, 1002, 1003, 1005, 1006], "guid": [24, 26, 52, 65, 87, 107, 147, 151, 154, 155, 170, 202, 246, 265, 266, 269, 285, 288, 289, 290, 291, 292, 293, 294, 295, 344, 345, 346, 351, 352, 353, 359, 360, 361, 365, 373, 375, 381, 385, 386, 387, 388, 391, 397, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 422, 424, 426, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 546, 547, 548, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 584, 586, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 662, 663, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 677, 678, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 721, 722, 723, 724, 725, 726, 727, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 822, 823, 824, 825, 826, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 878, 880, 899, 954, 955, 981, 988, 995, 996, 997, 998, 1000, 1002, 1004, 1005, 1012, 1013], "gridspec": [24, 26, 62, 225, 353], "calibrationdisplai": [24, 26, 372, 894, 1008, 1009, 1013], "lr": [24, 26, 106, 124, 125, 185, 197, 211, 212, 235, 242, 359, 365, 381, 533, 534, 535, 677, 938], "gnb_isoton": 24, "gnb_sigmoid": 24, "clf_list": [24, 26], "get_cmap": [24, 26, 313], "dark2": [24, 26, 203], "ax_calibration_curv": [24, 26], "calibration_displai": [24, 26], "grid_posit": [24, 26], "y_prob": [24, 26, 141, 403, 404, 674, 797, 823, 954, 1009, 1013], "poorli": [24, 26, 59, 73, 80, 104, 116, 206, 334, 374, 381, 493, 595, 950, 951, 1001], "violat": [24, 308, 354, 358, 360, 600, 890, 961, 968, 970], "typic": [24, 26, 91, 99, 112, 159, 166, 182, 186, 200, 215, 241, 242, 246, 248, 249, 265, 266, 290, 308, 321, 333, 339, 340, 341, 344, 348, 349, 350, 355, 359, 360, 372, 373, 374, 375, 378, 379, 381, 382, 384, 408, 412, 414, 461, 516, 518, 520, 521, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 594, 603, 605, 608, 619, 620, 621, 636, 647, 648, 677, 833, 840, 844, 847, 902, 903, 911, 914, 939, 943, 947, 950, 951, 953, 954, 955, 956, 960, 962, 978, 988, 1004, 1008, 1011, 1012], "transpos": [24, 239, 386, 491, 503, 505, 512, 625, 626, 627, 628, 752, 903, 940, 946, 954, 966, 987, 995, 1009], "nearli": [24, 242, 341, 360, 373, 728, 954, 957, 966, 988], "albeit": 24, "strongli": [24, 26, 77, 80, 90, 111, 115, 154, 164, 197, 216, 245, 320, 346, 363, 364, 372, 381, 623, 700, 759, 950, 951, 990, 1004, 1011], "plenti": 24, "greater": [24, 85, 101, 103, 154, 199, 214, 219, 228, 245, 258, 265, 266, 324, 333, 342, 351, 360, 372, 374, 377, 381, 406, 410, 411, 414, 417, 428, 437, 501, 506, 522, 523, 524, 525, 526, 527, 529, 530, 531, 558, 559, 562, 575, 576, 593, 605, 607, 610, 629, 631, 632, 636, 641, 642, 643, 657, 674, 677, 685, 699, 700, 703, 706, 752, 759, 761, 762, 796, 808, 809, 816, 817, 823, 824, 829, 844, 856, 860, 863, 866, 867, 874, 875, 876, 877, 903, 923, 943, 949, 950, 951, 954, 955, 960, 964, 969, 970, 998, 1003, 1006, 1008, 1009, 1010, 1012], "exploit": [24, 258, 955, 974, 998], "f1_score": [24, 246, 301, 341, 702, 954, 995, 997, 998, 999, 1000, 1004, 1005, 1011, 1012], "log_loss": [24, 25, 113, 116, 139, 284, 301, 320, 360, 372, 381, 522, 524, 526, 529, 611, 623, 641, 874, 876, 943, 950, 954, 968, 970, 997, 999, 1001, 1009, 1010, 1011, 1012], "precision_scor": [24, 246, 673, 751, 954, 995, 997, 998, 999, 1000, 1005, 1011], "recall_scor": [24, 246, 378, 673, 748, 954, 995, 997, 998, 999, 1000, 1005, 1011], "roc_auc_scor": [24, 136, 239, 248, 288, 295, 667, 671, 672, 673, 753, 954, 997, 998, 1003, 1005, 1009, 1010], "score_nam": [24, 34, 215, 241, 254, 294, 321, 769, 785], "score_df": 24, "set_index": [24, 101, 114, 143, 171, 200, 239, 285, 321], "decim": [24, 144, 436, 437, 879, 1002, 1003], "098932": 24, "323200": 24, "937443": 24, "871965": 24, "851348": 24, "861533": 24, "117608": 24, "782755": 24, "940374": 24, "857400": 24, "875941": 24, "866571": 24, "098332": 24, "370738": 24, "938613": 24, "883065": 24, "836224": 24, "859007": 24, "108880": 24, "368896": 24, "940201": 24, "861106": 24, "871277": 24, "866161": 24, "refin": [24, 77, 437, 674, 954, 988], "alter": [24, 150, 348, 360, 693, 694, 702, 747, 748, 751, 1000, 1004, 1007], "uncertainti": [24, 117, 138, 145, 161, 241, 372, 374, 532, 533, 608, 826, 944, 966], "linearsvc": [24, 26, 66, 68, 132, 133, 151, 159, 214, 236, 238, 246, 281, 288, 303, 305, 309, 310, 316, 320, 333, 348, 352, 372, 382, 383, 402, 477, 532, 542, 596, 604, 608, 617, 637, 638, 639, 640, 641, 652, 699, 706, 789, 794, 867, 868, 871, 873, 950, 954, 955, 969, 975, 995, 996, 997, 1001, 1003, 1006, 1011], "naivelycalibratedlinearsvc": [24, 26], "df_min_": [24, 26], "df_max_": [24, 26], "calibrated_df": [24, 26], "proba_pos_class": [24, 26], "clip": [24, 26, 200, 212, 279, 308, 600, 641, 705, 836, 964, 999, 1006, 1007], "proba_neg_class": [24, 26], "proba": [24, 26, 124, 402, 874, 876], "dual": [24, 26, 66, 68, 132, 133, 159, 214, 236, 238, 246, 281, 288, 305, 306, 316, 320, 382, 383, 436, 437, 443, 532, 533, 576, 604, 611, 612, 617, 618, 623, 624, 625, 626, 627, 628, 646, 649, 699, 794, 806, 807, 866, 867, 868, 871, 954, 955, 969, 997, 1006, 1009, 1011], "svc_isoton": 24, "svc_sigmoid": 24, "opposit": [24, 50, 64, 92, 154, 155, 171, 246, 360, 372, 376, 378, 383, 408, 412, 414, 434, 503, 505, 512, 528, 677, 694, 812, 870, 995], "behavior": [24, 34, 36, 49, 149, 151, 154, 155, 182, 200, 216, 231, 232, 242, 244, 276, 277, 279, 281, 286, 308, 329, 334, 340, 343, 346, 348, 350, 354, 355, 360, 372, 374, 378, 382, 501, 516, 531, 631, 632, 633, 641, 642, 643, 664, 666, 693, 694, 747, 748, 751, 764, 765, 768, 780, 781, 782, 783, 784, 803, 839, 866, 867, 943, 950, 954, 955, 960, 964, 969, 975, 978, 979, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "hing": [24, 189, 192, 194, 247, 305, 306, 310, 312, 360, 631, 641, 699, 866, 873, 950, 968, 969, 988], "focus": [24, 73, 171, 256, 341, 358, 951, 964, 973], "far": [24, 57, 77, 111, 139, 145, 154, 182, 200, 308, 312, 320, 322, 346, 355, 384, 685, 846, 929, 959, 960, 969, 978, 986], "awai": [24, 25, 26, 57, 73, 110, 138, 139, 143, 185, 312, 313, 341, 372, 384, 593, 808, 809, 816, 817, 953, 954, 969, 986], "shown": [24, 45, 54, 82, 99, 103, 107, 114, 147, 153, 155, 166, 172, 180, 200, 207, 209, 214, 219, 227, 239, 242, 245, 248, 256, 264, 275, 276, 279, 280, 281, 297, 316, 320, 321, 346, 351, 361, 372, 374, 375, 378, 379, 380, 382, 384, 403, 425, 597, 663, 665, 666, 667, 678, 763, 777, 878, 880, 949, 950, 951, 954, 957, 964, 968, 969, 970, 988, 999, 1004, 1005, 1006, 1009], "varieti": [24, 149, 227, 285, 308, 354, 373, 374, 376, 382, 608, 957, 970, 973, 978, 997, 1010, 1011], "niculescu": [24, 26, 372, 402, 404], "mizil": [24, 26, 372, 402, 404], "caruana": [24, 26, 372, 402, 404], "144943": 24, "465660": 24, "937597": 24, "872186": 24, "851792": 24, "861868": 24, "099820": 24, "376999": 24, "936480": 24, "853174": 24, "877981": 24, "865400": 24, "098758": 24, "321301": 24, "937532": 24, "873724": 24, "848743": 24, "861053": 24, "deal": [24, 54, 67, 117, 149, 154, 166, 206, 256, 312, 322, 346, 351, 375, 382, 383, 384, 439, 461, 668, 673, 727, 751, 832, 903, 950, 978, 985, 998, 1010, 1011], "situat": [24, 41, 54, 68, 153, 154, 188, 209, 242, 346, 354, 376, 378, 379, 381, 433, 493, 499, 547, 839, 842, 854, 864, 948, 950, 956, 957, 967, 970, 1003], "icml": [24, 26, 372, 374, 382, 402, 404, 801, 803, 822, 954, 956, 968, 972], "2005": [24, 26, 76, 343, 372, 402, 404, 815, 950, 957, 967], "055": [24, 136, 343, 954, 975], "plot_calibration_curv": [24, 975], "simplex": [25, 635, 761, 841], "arrow": [25, 1009], "green": [25, 76, 85, 104, 119, 124, 138, 159, 207, 275, 280, 284, 289, 295, 360, 955, 1003, 1004, 1006, 1007], "600": [25, 47, 112, 121, 122, 341, 645], "x_train_valid": 25, "y_train_valid": 25, "cluster_std": [25, 35, 41, 46, 52, 53, 54, 56, 57, 59, 60, 61, 194, 209, 228, 282, 310, 477], "x_valid": 25, "y_valid": 25, "randomforestclassifi": [25, 26, 29, 53, 105, 106, 107, 108, 109, 110, 124, 156, 157, 221, 222, 236, 251, 288, 290, 295, 320, 329, 359, 360, 372, 381, 383, 522, 523, 524, 526, 531, 532, 534, 766, 767, 796, 876, 943, 944, 955, 962, 978, 992, 999, 1000, 1003, 1004, 1005, 1008, 1009, 1010, 1011, 1012], "concaten": [25, 32, 36, 47, 58, 65, 68, 76, 103, 118, 132, 146, 151, 161, 164, 196, 203, 209, 225, 229, 230, 235, 244, 246, 247, 248, 249, 264, 277, 283, 286, 298, 307, 311, 320, 375, 429, 432, 469, 474, 496, 502, 506, 507, 564, 745, 763, 825, 826, 828, 831, 839, 871, 955, 975, 983, 987, 996], "randomforestclassifierifittedrandomforestclassifi": [25, 108, 109, 295], "cal_clf": 25, "prefit": [25, 360, 372, 383, 402, 532, 533, 562, 974, 1007, 1008, 1009], "x27": [25, 67, 68, 106, 122, 125, 133, 154, 155, 156, 210, 211, 220, 221, 223, 230, 237, 239, 240, 246, 251, 277, 285, 289, 290, 292, 299], "calibratedclassifiercvifittedcalibratedclassifiercv": 25, "randomforestclassifierrandomforestclassifi": [25, 156, 221, 251], "clf_prob": 25, "cal_clf_prob": 25, "head_width": 25, "ro": 25, "bo": [25, 1007], "unit": [25, 66, 75, 154, 159, 182, 200, 264, 276, 279, 321, 341, 346, 347, 348, 352, 354, 355, 379, 382, 386, 429, 454, 455, 484, 489, 497, 498, 499, 506, 507, 554, 555, 556, 572, 573, 576, 623, 624, 641, 650, 664, 734, 813, 822, 823, 824, 830, 836, 838, 842, 844, 846, 852, 853, 854, 856, 857, 866, 867, 950, 952, 953, 954, 959, 964, 970, 973, 986, 999, 1003, 1009, 1010], "mid": [25, 308, 954, 956], "frac": [25, 75, 76, 101, 239, 246, 248, 291, 371, 372, 374, 376, 379, 380, 381, 382, 384, 397, 428, 430, 447, 448, 449, 519, 521, 523, 525, 527, 530, 533, 535, 576, 580, 584, 587, 588, 600, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 625, 626, 627, 628, 629, 630, 632, 634, 635, 637, 638, 643, 644, 645, 661, 693, 694, 719, 733, 799, 800, 809, 817, 824, 867, 869, 872, 875, 877, 946, 948, 949, 950, 951, 952, 954, 956, 957, 958, 959, 961, 962, 964, 966, 968, 969, 970, 986], "shrink": [25, 77, 87, 115, 155, 166, 177, 180, 186, 202, 229, 279, 316, 379, 524, 525, 641, 643, 813, 823, 824, 868, 869, 870, 871, 872, 957, 969, 986], "perfectli": [25, 26, 34, 242, 253, 312, 363, 374, 381, 403, 532, 571, 669, 670, 680, 682, 700, 701, 721, 750, 759, 839, 949, 951, 954, 969, 1008, 1009], "incur": [25, 584, 866, 969, 1003], "decreas": [25, 36, 43, 52, 55, 63, 71, 117, 119, 135, 136, 146, 154, 155, 157, 190, 212, 213, 241, 246, 252, 274, 281, 284, 288, 324, 333, 335, 346, 372, 374, 381, 406, 410, 428, 486, 499, 500, 506, 522, 523, 524, 525, 526, 527, 529, 530, 531, 567, 600, 601, 602, 641, 642, 643, 671, 677, 691, 746, 753, 823, 824, 874, 875, 876, 877, 943, 945, 946, 950, 951, 954, 957, 958, 961, 962, 968, 969, 978, 986, 997, 1002, 1005, 1008], "cal_scor": 25, "327": [25, 694, 986], "549": 25, "p1d": 25, "p0": 25, "p1": [25, 124], "p2": [25, 124, 200], "calibrated_classifi": 25, "calibrated_classifiers_": [25, 372, 402], "this_p": 25, "sure": [25, 53, 175, 188, 216, 217, 329, 333, 334, 340, 344, 345, 346, 347, 348, 350, 351, 354, 358, 364, 372, 375, 382, 458, 488, 614, 886, 887, 897, 940, 944, 951, 968, 973, 974, 1002, 1003, 1005, 1010], "renorm": 25, "multiclass": [25, 28, 107, 160, 174, 198, 210, 217, 219, 222, 232, 236, 244, 246, 249, 258, 275, 277, 305, 317, 341, 342, 348, 349, 351, 360, 365, 374, 381, 402, 417, 427, 454, 461, 469, 522, 524, 526, 529, 532, 533, 536, 559, 567, 575, 596, 597, 598, 623, 624, 631, 633, 638, 639, 640, 641, 667, 671, 673, 693, 694, 698, 699, 702, 707, 718, 747, 748, 751, 752, 753, 758, 763, 764, 766, 767, 768, 769, 777, 779, 781, 785, 786, 787, 788, 789, 790, 791, 792, 793, 833, 847, 866, 868, 871, 874, 876, 948, 950, 964, 965, 969, 970, 975, 976, 988, 990, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1005, 1010, 1011, 1012], "argmax": [25, 94, 238, 252, 348, 381, 534, 794, 874, 969, 1008], "345": [25, 136, 343, 975], "plot_calibration_multiclass": [25, 975], "votingclassifi": [25, 26, 100, 151, 191, 325, 365, 381, 469, 529, 535, 596, 623, 804, 808, 871, 874, 943, 944, 975, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1012, 1013], "gave": [26, 372, 763, 766, 767, 777, 833], "four": [26, 132, 146, 159, 164, 183, 227, 228, 298, 305, 342, 346, 360, 522, 529, 684, 874, 876, 892, 950, 952, 953, 954, 964, 972], "naiv": [26, 29, 120, 239, 241, 258, 320, 322, 341, 372, 381, 382, 402, 509, 801, 802, 803, 804, 805, 948, 949, 957, 962, 976, 990, 995, 996, 997, 998, 1003, 1005, 1008, 1010], "bay": [26, 29, 104, 120, 138, 171, 230, 241, 320, 341, 372, 379, 381, 382, 501, 514, 515, 621, 801, 802, 803, 804, 805, 847, 948, 949, 950, 964, 976, 988, 990, 995, 996, 997, 998, 1003, 1005, 1008, 1010], "unusu": [26, 371, 960, 964, 1003], "prone": [26, 182, 227, 283, 358, 372], "practic": [26, 50, 67, 75, 80, 90, 107, 111, 112, 117, 138, 153, 154, 159, 166, 184, 209, 215, 240, 247, 265, 266, 290, 308, 312, 334, 346, 348, 349, 352, 354, 359, 360, 374, 376, 378, 379, 380, 381, 382, 384, 412, 417, 427, 486, 489, 554, 597, 598, 635, 761, 805, 859, 866, 943, 944, 948, 950, 953, 954, 955, 956, 957, 960, 961, 964, 973, 974, 976, 978, 979, 988, 989, 990, 997, 1001, 1003, 1005, 1007], "complic": [26, 216, 274, 352, 384, 659, 957], "train_sampl": [26, 197, 198], "against": [26, 34, 80, 96, 104, 115, 131, 159, 173, 174, 191, 199, 216, 248, 285, 288, 308, 341, 346, 361, 372, 374, 378, 382, 403, 474, 507, 513, 516, 641, 643, 719, 721, 752, 765, 770, 772, 791, 795, 920, 946, 950, 954, 955, 957, 969, 972, 979], "logisticregressioncv": [26, 284, 360, 365, 623, 950, 955, 999, 1000, 1001, 1003, 1004, 1005, 1009, 1010, 1012], "variant": [26, 40, 87, 148, 150, 151, 239, 291, 292, 321, 322, 352, 374, 377, 379, 382, 384, 414, 425, 455, 458, 459, 477, 480, 508, 524, 525, 530, 580, 584, 587, 588, 592, 595, 603, 604, 606, 610, 637, 669, 764, 768, 770, 771, 772, 781, 788, 809, 827, 863, 944, 950, 951, 952, 953, 954, 956, 957, 968, 974, 975, 988, 995, 1003], "concis": [26, 182, 346, 351, 1006, 1008], "execut": [26, 149, 166, 171, 215, 244, 334, 346, 352, 368, 370, 374, 379, 385, 408, 426, 763, 769, 777, 785, 787, 788, 789, 790, 793, 811, 920, 921, 964, 967, 975, 980, 988, 997, 1000, 1003], "101": [26, 136, 256, 343, 812, 996], "neg_log_loss": [26, 954], "rfc": [26, 222, 288, 992], "despit": [26, 80, 180, 182, 200, 215, 268, 360, 365, 376, 592, 593, 595, 950, 957, 978, 1003, 1004], "closest": [26, 43, 61, 186, 348, 374, 405, 407, 408, 412, 413, 414, 424, 618, 743, 744, 796, 806, 807, 808, 809, 810, 812, 814, 816, 817, 818, 945, 948, 955, 957, 986], "among": [26, 146, 155, 157, 159, 182, 230, 258, 328, 335, 341, 348, 360, 361, 372, 373, 377, 412, 414, 477, 484, 758, 791, 809, 814, 816, 868, 871, 874, 875, 876, 877, 943, 946, 954, 955, 961, 964, 969, 995, 1001, 1002, 1005, 1012], "strictli": [26, 182, 200, 216, 279, 294, 321, 351, 360, 372, 377, 379, 382, 473, 474, 500, 506, 509, 526, 527, 553, 556, 607, 635, 636, 638, 640, 660, 665, 703, 730, 763, 766, 767, 773, 777, 789, 815, 842, 854, 858, 859, 861, 862, 866, 867, 871, 872, 901, 943, 945, 950, 954, 964, 968, 996, 1006, 1011], "proper": [26, 52, 171, 200, 335, 352, 372, 381, 414, 506, 518, 641, 903, 929, 949, 950, 951, 954, 969, 995, 1005, 1006, 1007, 1008, 1009, 1010, 1012], "infinit": [26, 183, 225, 242, 312, 333, 384, 411, 587, 588, 742, 761, 884, 886, 887, 946, 953, 964, 969, 1003, 1005, 1008, 1009, 1010, 1012], "hypothet": 26, "suffici": [26, 52, 122, 190, 253, 308, 333, 360, 374, 383, 497, 622, 647, 648, 782, 783, 955, 957, 974, 1004, 1010, 1011], "mi": [26, 34, 131, 374, 572, 573, 669, 719, 721, 944, 954, 968], "intention": 26, "kept": [26, 230, 259, 316, 340, 350, 368, 384, 461, 500, 503, 505, 506, 512, 562, 575, 576, 584, 585, 609, 660, 761, 762, 887, 964, 1003, 1004], "mitig": [26, 52, 117, 156, 286, 334, 335, 951, 970, 986, 987, 1007], "inner": [26, 92, 114, 117, 240, 244, 258, 299, 333, 382, 408, 479, 547, 554, 583, 613, 634, 645, 739, 741, 946, 954, 964, 969, 996, 999, 1009, 1012], "finit": [26, 225, 231, 333, 341, 360, 433, 503, 516, 547, 571, 574, 575, 576, 623, 692, 742, 749, 761, 787, 864, 884, 885, 886, 887, 950, 953, 954, 978, 979, 986, 1002, 1003, 1007, 1009, 1010], "push": [26, 346, 350, 372, 977], "equat": [26, 316, 346, 374, 379, 381, 522, 523, 524, 525, 529, 530, 531, 555, 592, 623, 624, 647, 648, 652, 727, 846, 874, 875, 876, 877, 944, 951, 954, 959, 1003], "twice": [26, 251, 320, 322, 348, 384, 584, 694, 696, 905, 1004, 1012], "wide": [26, 57, 58, 83, 104, 213, 280, 358, 374, 379, 382, 943, 950, 973, 978, 988, 995, 997, 1011], "wrapper": [26, 259, 352, 355, 378, 384, 509, 585, 633, 636, 706, 866, 950, 970, 973, 999, 1007], "approx": [26, 87, 214, 379, 381, 382, 954, 961, 968], "rare": [26, 155, 285, 329, 350, 358, 360, 363, 372, 374, 378, 554, 613, 623, 624, 634, 645, 866, 891, 922, 950, 964, 978, 1002, 1003, 1004, 1008, 1010], "explan": [26, 80, 216, 333, 345, 346, 372, 382, 943, 953, 955, 970, 978, 998], "bag": [26, 66, 89, 100, 105, 107, 115, 116, 151, 156, 256, 321, 322, 342, 372, 373, 481, 482, 483, 520, 521, 522, 523, 524, 525, 528, 529, 530, 531, 705, 768, 792, 875, 952, 955, 975, 976, 990, 995, 997, 998, 999, 1000, 1001, 1008, 1009, 1011], "underli": [26, 53, 75, 121, 136, 157, 183, 185, 186, 216, 244, 263, 264, 312, 327, 334, 346, 358, 360, 363, 365, 370, 372, 374, 376, 378, 379, 380, 381, 383, 384, 402, 416, 417, 418, 427, 429, 430, 436, 437, 443, 489, 520, 521, 529, 530, 532, 533, 534, 535, 558, 559, 562, 567, 623, 624, 630, 633, 638, 640, 645, 656, 660, 763, 766, 767, 777, 787, 788, 789, 794, 795, 796, 797, 798, 799, 800, 809, 811, 866, 874, 875, 876, 877, 919, 950, 951, 955, 960, 967, 969, 997, 999, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1011, 1012, 1013], "restrict": [26, 63, 64, 69, 79, 128, 149, 151, 172, 197, 199, 273, 348, 352, 358, 372, 374, 381, 382, 430, 458, 467, 497, 546, 575, 618, 619, 620, 621, 623, 647, 648, 678, 746, 752, 753, 792, 814, 816, 817, 818, 820, 822, 823, 824, 826, 852, 954, 970, 975, 989, 990, 995, 997, 1005, 1007, 1012], "move": [26, 110, 240, 277, 308, 345, 346, 350, 352, 372, 374, 514, 515, 536, 537, 538, 540, 542, 543, 921, 987, 995, 996, 1000, 1003, 1005, 1008, 1009], "themselv": [26, 154, 279, 342, 348, 354, 360, 365, 371, 374, 381, 382, 384, 411, 580, 756, 970, 988, 1005], "gini": [26, 157, 182, 200, 221, 251, 290, 518, 519, 522, 523, 524, 525, 529, 530, 531, 752, 874, 875, 876, 877, 943, 962, 970, 1003, 1004, 1011, 1012], "criterion": [26, 73, 74, 157, 170, 190, 230, 251, 289, 348, 355, 360, 374, 379, 406, 410, 414, 417, 424, 427, 497, 502, 504, 511, 518, 519, 522, 523, 524, 525, 529, 530, 531, 571, 592, 609, 610, 613, 621, 631, 632, 633, 634, 636, 637, 639, 641, 642, 643, 645, 656, 660, 675, 762, 863, 868, 869, 870, 871, 872, 874, 875, 876, 877, 950, 953, 954, 962, 967, 970, 976, 987, 990, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1011, 1012], "respect": [26, 52, 64, 83, 92, 101, 105, 107, 110, 119, 146, 159, 161, 166, 171, 184, 196, 199, 202, 204, 210, 213, 215, 219, 230, 248, 265, 266, 277, 284, 292, 305, 312, 333, 334, 341, 342, 346, 372, 374, 377, 379, 381, 382, 384, 411, 429, 432, 435, 436, 437, 438, 439, 440, 441, 499, 505, 506, 512, 518, 526, 527, 562, 575, 576, 577, 578, 579, 580, 581, 584, 585, 586, 587, 588, 589, 590, 601, 608, 636, 655, 659, 677, 692, 746, 749, 761, 762, 802, 812, 823, 824, 878, 880, 943, 947, 948, 950, 951, 954, 957, 958, 959, 960, 964, 969, 973, 977, 978, 998, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "why": [26, 34, 49, 87, 101, 107, 117, 154, 156, 159, 171, 236, 239, 256, 320, 321, 346, 354, 360, 374, 376, 379, 385, 409, 412, 416, 954, 956, 969, 983, 986, 998], "feel": [26, 150, 279, 345, 346, 354, 374, 411, 970], "miscalibr": 26, "bound": [26, 52, 142, 144, 146, 151, 184, 200, 208, 238, 344, 353, 374, 379, 382, 384, 385, 409, 454, 467, 477, 488, 501, 560, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 597, 600, 602, 615, 619, 623, 642, 670, 699, 752, 761, 762, 806, 807, 843, 855, 858, 859, 860, 868, 869, 870, 873, 890, 922, 950, 953, 954, 957, 966, 968, 969, 971, 975, 1003, 1006, 1007, 1009], "misspecifi": 26, "domingo": [26, 752, 954], "pazzani": 26, "proc": [26, 74, 372, 382, 415, 654, 658, 801, 943, 951, 956, 960], "13th": 26, "intl": [26, 378], "1996": [26, 117, 374, 381, 385, 409, 481, 482, 483, 520, 521, 964], "zadrozni": [26, 372, 402, 641], "bianca": 26, "charl": [26, 728, 995, 998, 1001, 1005, 1007, 1010], "elkan": [26, 289, 372, 402, 408, 412, 424, 641, 1001, 1005, 1006, 1008, 1009], "vol": [26, 146, 166, 245, 343, 374, 439, 524, 525, 593, 600, 610, 629, 650, 651, 761, 791, 803, 944, 956, 957], "2001": [26, 143, 156, 238, 371, 374, 381, 402, 416, 417, 418, 427, 476, 524, 525, 529, 530, 593, 599, 604, 610, 656, 661, 699, 752, 847, 859, 891, 944, 946, 950, 954, 960, 962, 964, 966, 969], "498": [26, 200, 975], "plot_compare_calibr": [26, 975], "built": [28, 80, 99, 101, 102, 110, 112, 156, 190, 242, 256, 272, 288, 325, 328, 333, 341, 344, 346, 347, 348, 350, 352, 354, 355, 358, 359, 360, 364, 368, 373, 374, 375, 378, 381, 383, 410, 468, 518, 519, 520, 521, 524, 525, 526, 527, 553, 554, 558, 562, 604, 605, 606, 607, 608, 611, 612, 617, 623, 625, 626, 627, 628, 637, 638, 639, 640, 646, 766, 767, 774, 797, 800, 806, 807, 876, 877, 938, 950, 954, 955, 967, 968, 970, 973, 978, 988, 995, 998, 999, 1001, 1007], "troubl": [28, 382], "ovr": [28, 174, 197, 256, 258, 288, 317, 623, 624, 752, 795, 866, 868, 871, 950, 954, 955, 969, 995, 1000, 1001, 1003, 1004, 1005, 1009, 1010], "gaussian_process": [28, 29, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 151, 360, 384, 608, 955, 975, 998, 1001, 1002], "gaussianprocessclassifi": [28, 29, 139, 140, 141, 142, 146, 360, 384, 576, 584, 585, 587, 588, 955, 1001, 1003, 1005, 1009], "accuracy_scor": [28, 101, 139, 243, 284, 300, 320, 329, 359, 365, 370, 391, 522, 529, 673, 693, 694, 698, 702, 747, 748, 751, 758, 760, 896, 943, 954, 996, 997, 998, 1007, 1012], "load_iri": [28, 38, 42, 70, 83, 91, 93, 95, 97, 110, 123, 129, 132, 140, 165, 175, 191, 223, 227, 233, 244, 245, 246, 248, 249, 262, 267, 270, 275, 288, 290, 293, 302, 304, 305, 308, 311, 325, 328, 359, 368, 374, 375, 378, 381, 383, 394, 526, 532, 566, 567, 575, 584, 585, 587, 588, 596, 623, 624, 676, 752, 763, 766, 767, 769, 777, 794, 815, 861, 862, 863, 874, 876, 878, 879, 880, 944, 949, 954, 955, 956, 957, 961, 964, 970, 979, 985, 986, 987, 1001, 1003, 1006], "saga": [28, 173, 197, 198, 623, 624, 637, 639, 652, 777, 950, 1002, 1004], "multi_class": [28, 174, 197, 248, 288, 534, 575, 623, 624, 752, 800, 866, 950, 955, 969, 995, 999, 1003, 1008, 1010], "n_classifi": [28, 534, 535], "classifier_idx": 28, "class_of_interest": [28, 248, 596, 1012], "vmin": [28, 37, 77, 87, 90, 97, 141, 144, 161, 166, 173, 198, 214, 229, 234, 276, 308], "vmax": [28, 48, 77, 87, 90, 97, 141, 144, 161, 166, 173, 198, 214, 229, 234, 276, 308], "mask_y_pr": 28, "04": [28, 37, 39, 51, 79, 89, 96, 136, 143, 154, 163, 181, 200, 217, 225, 231, 239, 240, 252, 272, 315, 343, 381, 383, 436, 437, 611, 612, 617, 625, 626, 627, 646, 752, 763, 777, 950, 954, 958, 968, 975], "scalarmapp": 28, "viridi": [28, 35, 259, 662], "cax": [28, 141, 250], "orient": [28, 87, 154, 202, 279, 360, 878, 951], "horizont": [28, 87, 202, 214, 279, 282, 351, 360, 429, 480, 662, 666], "381": [28, 975], "plot_classification_prob": [28, 975], "20newgroup": [28, 151, 160, 174, 198, 275, 277, 454, 536, 623, 792, 950, 975], "mnist": [28, 151, 160, 173, 190, 197, 259, 273, 275, 461, 536, 623, 792, 823, 846, 889, 950, 958, 975], "salt": [29, 214, 281, 1009], "convei": [29, 207, 281, 986], "linearli": [29, 92, 103, 136, 154, 161, 196, 203, 209, 248, 249, 281, 284, 312, 320, 333, 343, 358, 379, 381, 480, 607, 672, 835, 836, 954, 957, 960, 969, 986, 1002, 1011], "transpar": [29, 281, 939, 978], "ga\u00ebl": [29, 42, 48, 69, 82, 83, 93, 165, 179, 180, 281, 312, 313, 361, 978], "modifi": [29, 42, 48, 69, 71, 82, 83, 165, 166, 179, 180, 192, 202, 203, 204, 216, 219, 227, 294, 313, 318, 344, 346, 348, 350, 360, 374, 381, 384, 408, 412, 419, 424, 433, 447, 448, 449, 450, 460, 475, 546, 575, 576, 578, 584, 641, 643, 654, 658, 693, 694, 732, 747, 748, 751, 884, 936, 937, 950, 967, 968, 974, 985, 989, 990, 995, 997, 998, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1010], "listedcolormap": [29, 32, 110, 267, 270, 274, 281], "make_circl": [29, 41, 59, 92, 120, 207, 274, 275, 281, 299, 342, 996, 1003, 1006], "make_moon": [29, 41, 59, 209, 239, 274, 275, 281, 342, 943, 1002, 1006], "discriminant_analysi": [29, 31, 32, 95, 203, 268, 329, 370, 501, 815, 948, 955, 995, 998, 999, 1000, 1001, 1002], "quadraticdiscriminantanalysi": [29, 32, 514, 948, 955, 957, 995, 1000, 1002, 1010], "adaboostclassifi": [29, 103, 110, 365, 381, 519, 524, 526, 895, 997, 998, 1001, 1002, 1004, 1005, 1008, 1010, 1011, 1012], "kneighborsclassifi": [29, 123, 128, 261, 262, 267, 268, 284, 290, 292, 320, 381, 567, 809, 813, 814, 815, 816, 817, 955, 957, 986, 995, 1005, 1007, 1008, 1009, 1010, 1011, 1012], "neural_network": [29, 151, 155, 220, 273, 274, 275, 276, 277, 335, 358, 955, 958, 975, 997, 1012], "mlpclassifi": [29, 116, 128, 151, 273, 274, 276, 335, 467, 469, 479, 487, 536, 822, 824, 836, 955, 958, 975, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "decisiontreeclassifi": [29, 101, 103, 110, 123, 243, 256, 294, 324, 325, 328, 360, 381, 518, 520, 522, 524, 526, 529, 596, 676, 769, 790, 875, 876, 878, 879, 880, 944, 955, 970, 996, 997, 999, 1000, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "net": [29, 151, 160, 166, 169, 173, 193, 213, 216, 252, 352, 373, 378, 436, 437, 443, 466, 489, 522, 523, 524, 525, 529, 530, 531, 611, 612, 617, 622, 623, 624, 625, 626, 627, 628, 633, 641, 643, 646, 649, 822, 874, 875, 876, 877, 943, 954, 959, 968, 975, 976, 978, 990, 995, 1000, 1004, 1005, 1007], "adaboost": [29, 84, 100, 104, 110, 118, 121, 125, 141, 151, 325, 326, 327, 484, 516, 518, 519, 524, 596, 668, 792, 874, 875, 975, 976, 990, 997], "qda": [29, 343, 514, 515, 976, 990, 1000], "025": [29, 184, 219, 236, 655, 659], "samm": [29, 101, 103, 110, 381, 518, 1011, 1012], "n_clusters_per_class": [29, 84, 105, 133, 135, 236, 269, 274, 281, 351, 480, 570, 572], "linearly_separ": [29, 274], "ds_cnt": [29, 281, 282], "rdbu": [29, 32, 87, 198, 274, 308, 313], "cm_bright": [29, 274, 281], "ff0000": [29, 267, 274], "0000ff": [29, 267, 274], "ep": [29, 41, 43, 46, 52, 62, 165, 167, 205, 213, 358, 374, 385, 409, 415, 420, 436, 437, 443, 596, 611, 612, 615, 616, 617, 618, 619, 620, 621, 625, 626, 627, 628, 646, 647, 648, 649, 655, 659, 679, 705, 818, 858, 859, 860, 966, 1010, 1011], "lstrip": [29, 41, 59, 209, 274, 281], "plot_classifier_comparison": [29, 281, 975], "versu": [29, 89, 100, 110, 120, 122, 129, 140, 151, 154, 160, 191, 197, 209, 214, 215, 217, 228, 232, 234, 256, 265, 267, 281, 296, 301, 305, 307, 312, 374, 378, 381, 384, 469, 499, 521, 575, 596, 604, 623, 624, 631, 633, 639, 640, 641, 642, 747, 763, 768, 788, 798, 827, 862, 863, 870, 871, 875, 943, 950, 954, 955, 960, 967, 968, 969, 975, 986, 1003], "8x8": [30, 82, 173, 213, 268, 277, 343, 467, 985], "grayscal": 30, "imread": 30, "load_digit": [30, 48, 49, 55, 68, 69, 82, 128, 134, 173, 189, 203, 213, 214, 237, 238, 241, 247, 254, 261, 263, 268, 275, 277, 294, 297, 298, 352, 375, 386, 410, 411, 497, 498, 499, 500, 564, 565, 603, 604, 633, 653, 654, 655, 656, 658, 660, 979, 983, 984, 985, 986, 987, 1001, 1006], "set_axis_off": 30, "gray_r": [30, 82, 90, 141, 203, 277, 297, 298, 985], "entir": [30, 149, 182, 190, 277, 279, 289, 312, 328, 329, 340, 347, 348, 360, 368, 374, 378, 380, 382, 437, 457, 499, 553, 554, 555, 556, 612, 616, 618, 620, 623, 624, 626, 628, 630, 631, 633, 641, 647, 648, 698, 760, 794, 795, 798, 823, 825, 826, 839, 851, 852, 854, 855, 856, 857, 923, 943, 944, 954, 964, 968, 970, 986, 1004, 1005], "899": [30, 237], "confus": [30, 151, 210, 232, 248, 297, 298, 320, 360, 433, 469, 596, 617, 662, 678, 680, 683, 693, 694, 702, 718, 748, 751, 792, 864, 871, 975, 988, 995, 996, 1000, 1004, 1005, 1007, 1008, 1009, 1010], "figure_": [30, 155, 220, 288, 290, 353, 403, 596, 597, 662, 663, 665, 666, 667, 769, 785], "confusion_matrix": [30, 210, 233, 297, 298, 662, 678, 718, 789, 954, 988, 996, 1001, 1002, 1005, 1006, 1008, 1012], "gt": [30, 67, 68, 106, 122, 154, 230, 237, 251, 344, 346, 350], "rebuilt": [30, 806, 807], "397": [30, 32, 341, 975], "plot_digits_classif": [30, 975], "elimin": [30, 48, 82, 127, 130, 133, 136, 151, 234, 238, 244, 263, 297, 298, 300, 373, 374, 378, 413, 467, 480, 558, 559, 562, 567, 623, 766, 767, 782, 871, 940, 954, 975, 976, 978, 990, 995], "oracl": [31, 182, 200, 387, 434, 435, 438, 439, 440, 441, 948, 995], "shrinkag": [31, 72, 74, 77, 94, 116, 151, 270, 387, 434, 435, 438, 439, 440, 441, 442, 444, 445, 446, 504, 508, 514, 526, 527, 763, 950, 964, 975, 976, 990, 995, 999, 1000, 1002], "lineardiscriminantanalysi": [31, 32, 95, 203, 268, 329, 370, 501, 515, 815, 948, 955, 957, 995, 998, 999, 1000, 1001, 1002, 1004, 1007, 1009, 1010, 1011], "200": [31, 32, 41, 47, 51, 57, 71, 90, 103, 114, 121, 142, 168, 177, 183, 186, 187, 188, 194, 199, 203, 221, 225, 240, 246, 248, 249, 279, 282, 299, 307, 308, 327, 329, 341, 348, 358, 379, 381, 386, 405, 419, 433, 436, 437, 487, 498, 499, 500, 503, 504, 505, 508, 512, 549, 614, 616, 636, 644, 657, 777, 823, 824, 864, 868, 869, 870, 871, 872, 969], "n_averag": 31, "n_features_max": 31, "ish": 31, "acc_clf1": 31, "acc_clf2": 31, "acc_clf3": 31, "n_features_rang": 31, "score_clf1": 31, "score_clf2": 31, "score_clf3": 31, "clf1": [31, 123, 124, 381, 534], "lsqr": [31, 286, 514, 637, 639, 652, 948, 996, 1002, 1009], "clf2": [31, 123, 124, 348, 368, 381, 534], "store_precis": [31, 74, 434, 435, 438, 439, 440, 441], "assume_cent": [31, 74, 376, 387, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445], "clf3": [31, 123, 124, 348, 381, 534], "covariance_estim": [31, 514, 948, 1007], "features_samples_ratio": 31, "gold": [31, 176, 183, 185, 188, 192, 196, 199, 226, 231, 246, 265, 307, 352], "navi": [31, 66, 74, 91, 95, 96, 121, 161, 185, 193, 205, 226, 227, 228, 231, 246, 248, 264, 271, 299, 327], "242": [31, 846, 975, 995], "plot_lda": [31, 975], "ledoitwolf": [31, 72, 74, 77, 94, 116, 151, 270, 376, 434, 435, 439, 440, 441, 442, 763, 975, 999], "likelihood": [31, 54, 72, 74, 75, 76, 77, 94, 116, 138, 139, 140, 142, 143, 144, 145, 147, 151, 170, 200, 229, 232, 239, 245, 270, 277, 279, 348, 360, 372, 376, 379, 381, 384, 402, 434, 435, 436, 437, 438, 439, 440, 441, 442, 480, 497, 501, 506, 514, 515, 516, 575, 576, 596, 610, 623, 677, 705, 761, 762, 763, 789, 792, 811, 822, 842, 854, 868, 869, 871, 872, 950, 953, 956, 964, 969, 975, 998, 999, 1004, 1010], "doubl": [32, 107, 251, 346, 360, 379, 503, 505, 512, 806, 807, 817, 938, 944, 969, 970, 995, 1005, 1006], "dispers": [32, 374, 675, 689, 950], "cov_class_1": 32, "cov_class_2": 32, "matric": [32, 36, 37, 75, 77, 87, 187, 226, 227, 229, 230, 231, 259, 272, 289, 295, 301, 320, 321, 338, 340, 348, 349, 358, 359, 360, 374, 375, 376, 377, 379, 382, 383, 389, 415, 416, 418, 429, 438, 446, 447, 448, 449, 499, 500, 503, 505, 506, 509, 512, 514, 515, 520, 521, 528, 531, 546, 547, 554, 608, 611, 612, 617, 618, 623, 629, 637, 639, 652, 718, 724, 732, 738, 742, 743, 744, 745, 756, 761, 762, 792, 810, 813, 818, 829, 833, 835, 838, 841, 843, 844, 846, 849, 851, 853, 855, 856, 857, 858, 859, 868, 869, 871, 872, 882, 903, 909, 918, 925, 927, 928, 944, 946, 948, 951, 952, 953, 955, 957, 958, 966, 968, 969, 973, 988, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "make_data": [32, 58], "share": [32, 79, 120, 154, 230, 320, 328, 329, 333, 334, 348, 354, 374, 379, 382, 514, 633, 669, 673, 761, 762, 766, 767, 948, 961, 977, 995, 997, 1003, 1005, 1007, 1010], "spheric": [32, 54, 79, 118, 204, 227, 229, 230, 272, 342, 728, 761, 762, 950, 953, 957, 973], "isotrop": [32, 52, 54, 58, 92, 140, 142, 202, 204, 374, 376, 384, 477, 484, 497, 580, 584, 585, 587, 588], "third": [32, 110, 115, 131, 136, 146, 200, 209, 231, 256, 264, 281, 294, 334, 341, 345, 358, 361, 382, 499, 553, 554, 555, 556, 765, 766, 767, 772, 808, 809, 810, 812, 814, 844, 856, 922, 943, 965, 995, 1006, 1011, 1012], "x_isotropic_covari": 32, "y_isotropic_covari": 32, "x_shared_covari": 32, "y_shared_covari": 32, "x_different_covari": 32, "y_different_covari": 32, "piec": [32, 44, 183, 334, 953], "misclassifi": [32, 101, 233, 312, 320, 969], "mark": [32, 55, 85, 131, 150, 243, 250, 338, 346, 348, 350, 354, 355, 360, 374, 500, 572, 573, 576, 597, 623, 819, 820, 861, 862, 879, 893, 898, 903, 950, 978, 990, 995, 996, 1001, 1003, 1004, 1011, 1012, 1013], "star": [32, 85, 125, 346], "ellips": [32, 209, 225, 226, 227, 230, 231, 960], "mpl": [32, 225, 226, 227, 231, 279], "plot_ellips": [32, 225], "cov": [32, 77, 80, 103, 230, 346, 360, 364, 367, 377, 387, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 484, 497, 499, 506, 513], "linalg": [32, 51, 73, 74, 77, 94, 96, 168, 225, 226, 227, 230, 231, 295, 346, 352, 379, 416, 417, 418, 427, 486, 497, 500, 506, 509, 622, 637, 639, 652, 656, 660, 901], "eigh": [32, 225, 226, 227, 230, 231, 379, 386, 498, 500, 1010], "arctan": [32, 226, 231, 342, 483], "180": [32, 225, 226, 227, 230, 231, 268, 272, 352, 467], "ell": [32, 225, 226, 227, 231, 371], "patch": [32, 47, 219, 225, 226, 227, 230, 231, 234, 341, 350, 358, 379, 381, 520, 521, 548, 549, 552, 995, 1003], "set_clip_box": [32, 225, 226, 227, 230, 231], "set_alpha": [32, 225, 226, 227, 230, 231], "add_artist": [32, 203, 225, 226, 227, 230, 231], "plot_result": [32, 111, 225, 226, 231], "pcolormesh": [32, 120, 129, 165, 262, 267, 304, 308, 312, 596], "x_right": 32, "y_right": 32, "x_wrong": 32, "y_wrong": 32, "means_": [32, 225, 226, 227, 228, 230, 231, 514, 515, 761, 762], "yellow": [32, 85, 308, 955], "set_box_aspect": 32, "svd": [32, 94, 120, 203, 321, 355, 370, 377, 386, 416, 418, 447, 448, 450, 486, 497, 498, 499, 500, 504, 505, 506, 509, 511, 514, 515, 629, 637, 638, 639, 650, 651, 652, 825, 903, 948, 988, 997, 1001, 1002, 1008, 1010], "store_covari": [32, 514, 515, 1000, 1002], "ax_row": 32, "align": [32, 115, 117, 150, 202, 225, 250, 322, 360, 654, 658, 946, 957, 968, 989, 990, 1011, 1012], "perpendicular": [32, 313], "bisector": 32, "singl": [32, 36, 45, 49, 50, 52, 55, 58, 59, 68, 89, 100, 101, 102, 110, 111, 121, 136, 138, 144, 149, 151, 155, 157, 159, 166, 182, 184, 186, 220, 222, 230, 235, 248, 256, 276, 292, 294, 308, 320, 321, 322, 325, 327, 329, 333, 334, 340, 341, 346, 351, 353, 354, 355, 358, 359, 360, 365, 372, 373, 375, 377, 378, 379, 381, 382, 383, 399, 402, 405, 406, 410, 411, 412, 414, 419, 429, 431, 432, 458, 459, 461, 471, 474, 499, 518, 521, 522, 523, 524, 525, 526, 527, 529, 530, 531, 547, 557, 564, 565, 567, 571, 592, 597, 599, 608, 631, 632, 638, 641, 642, 643, 655, 657, 659, 675, 676, 686, 687, 688, 689, 700, 701, 702, 705, 738, 749, 761, 762, 763, 766, 767, 777, 784, 788, 789, 791, 792, 795, 803, 806, 807, 811, 823, 824, 825, 835, 836, 839, 840, 841, 846, 847, 861, 862, 874, 875, 876, 877, 882, 912, 918, 922, 941, 943, 949, 950, 951, 954, 955, 957, 959, 961, 962, 964, 968, 969, 970, 973, 975, 978, 979, 986, 988, 995, 996, 997, 999, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "plot_lda_qda": [32, 975], "modul": [33, 34, 46, 50, 72, 78, 81, 86, 87, 100, 130, 137, 147, 148, 151, 152, 158, 160, 197, 201, 202, 224, 232, 255, 256, 257, 260, 273, 275, 276, 278, 296, 303, 319, 323, 326, 340, 341, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 358, 360, 363, 364, 368, 372, 373, 374, 377, 381, 382, 383, 385, 409, 468, 500, 544, 545, 624, 895, 943, 948, 950, 952, 954, 955, 958, 960, 961, 964, 966, 968, 970, 971, 978, 982, 983, 988, 996, 997, 998, 1000, 1001, 1005, 1009], "chanc": [33, 35, 46, 101, 131, 151, 157, 182, 190, 197, 200, 239, 245, 248, 249, 285, 316, 321, 329, 345, 374, 378, 665, 667, 669, 670, 673, 681, 719, 721, 750, 759, 791, 954, 962, 970, 975, 1011], "bisect": [33, 54, 56, 57, 58, 147, 151, 235, 408, 412, 477, 975, 1009], "birch": [33, 37, 41, 61, 84, 151, 292, 335, 360, 411, 414, 477, 975, 989, 990, 999, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012], "linkag": [33, 36, 37, 38, 41, 44, 49, 52, 53, 54, 64, 151, 157, 405, 406, 410, 411, 428, 477, 479, 487, 846, 973, 975, 987, 998, 1003, 1006], "dbscan": [33, 34, 35, 41, 52, 57, 60, 62, 151, 294, 299, 358, 360, 411, 415, 417, 420, 477, 669, 670, 682, 701, 757, 759, 818, 846, 957, 975, 989, 990, 995, 997, 999, 1000, 1002, 1003, 1004, 1011, 1012], "hdbscan": [33, 41, 46, 62, 151, 213, 409, 477, 846, 944, 973, 975, 989, 990, 1011, 1012], "optic": [33, 41, 151, 292, 339, 385, 409, 411, 420, 421, 422, 467, 975, 989, 990, 1004, 1008, 1009, 1010, 1011, 1012, 1013], "affin": [33, 34, 41, 46, 60, 61, 151, 279, 299, 338, 348, 360, 373, 379, 405, 406, 417, 419, 427, 477, 500, 656, 660, 669, 670, 682, 701, 757, 759, 862, 948, 951, 954, 975, 989, 990, 995, 996, 999, 1005, 1006, 1008, 1010], "dendrogram": [33, 64, 151, 157, 328, 374, 406, 410, 469, 975, 1007], "embed": [33, 36, 41, 43, 52, 53, 59, 82, 106, 134, 138, 151, 201, 204, 206, 208, 259, 268, 352, 360, 373, 374, 406, 417, 427, 454, 467, 509, 514, 531, 547, 604, 653, 654, 655, 656, 657, 658, 659, 660, 661, 815, 827, 836, 858, 859, 860, 946, 957, 960, 966, 971, 973, 975, 989, 990, 995, 996, 1006, 1007, 1009], "uniformli": [34, 107, 114, 131, 209, 225, 288, 348, 481, 482, 483, 516, 607, 767, 775, 777, 845, 943, 944, 954, 957, 964, 999, 1004], "divid": [34, 40, 45, 84, 87, 133, 143, 182, 219, 225, 321, 329, 342, 343, 371, 374, 378, 379, 434, 435, 436, 437, 438, 439, 440, 441, 477, 484, 499, 506, 641, 642, 643, 684, 690, 698, 702, 720, 758, 760, 823, 824, 868, 871, 903, 906, 907, 943, 951, 953, 954, 957, 964, 968, 988, 995, 1002, 1003, 1006], "quiroz": [34, 54, 107, 117, 161, 166, 219, 240, 242, 284, 320, 321, 322], "fundament": [34, 46, 76, 321, 344, 358, 359, 377, 461, 503, 505, 512, 673, 950, 954], "homogen": [34, 35, 36, 41, 43, 46, 52, 55, 321, 341, 358, 360, 376, 381, 384, 411, 579, 669, 682, 695, 700, 701, 721, 759, 951, 952, 954, 1004], "frequent": [34, 101, 150, 242, 248, 249, 321, 343, 346, 382, 516, 555, 595, 816, 839, 840, 843, 855, 944, 946, 954, 968, 974], "ari": [34, 55, 321, 374, 670, 1000, 1006], "mutual": [34, 35, 46, 52, 55, 130, 151, 360, 381, 383, 411, 557, 560, 561, 564, 565, 571, 572, 573, 574, 669, 670, 680, 719, 721, 750, 759, 943, 950, 954, 955, 975, 995, 1001, 1011], "theoret": [34, 54, 138, 373, 374, 381, 518, 519, 604, 669, 690, 720, 866, 943, 950, 951, 953, 954, 956, 966, 968, 969, 978], "nmi": [34, 374, 682, 700, 701, 721], "ami": [34, 46, 55, 374, 669], "score_func": [34, 67, 68, 383, 557, 560, 561, 563, 564, 565, 706, 995, 997, 1012], "rand_scor": [34, 374, 680, 954, 1007], "adjusted_rand_scor": [34, 35, 46, 55, 321, 374, 669, 680, 697, 721, 750, 954, 1008], "mutual_info_scor": [34, 374, 669, 954, 1003, 1006, 1007], "normalized_mutual_info_scor": [34, 374, 700, 719, 759, 954, 1003, 1009], "adjusted_mutual_info_scor": [34, 35, 46, 55, 374, 670, 680, 697, 719, 721, 750, 954, 995, 1003, 1007, 1011], "random_label": 34, "labels_a": 34, "labels_b": 34, "fixed_classes_uniform_labelings_scor": 34, "n_clusters_rang": 34, "n_run": [34, 58, 159, 321], "seaborn": [34, 102, 117, 153, 154, 161, 166, 230, 239, 346, 364, 367, 973], "sn": [34, 102, 117, 153, 154, 161, 166, 230, 239], "color_palett": [34, 102, 117, 230], "colorblind": [34, 102, 117], "vx": 34, "errorbar": [34, 58, 69, 74, 76, 135, 144, 145, 261, 300, 311, 769, 785], "satur": [34, 154, 279], "uniform_labelings_scor": 34, "nwith": [34, 54, 58, 135, 321], "constantli": [34, 182, 978], "unbound": [34, 953, 1009], "cardin": [34, 108, 109, 115, 156, 157, 285, 286, 294, 374, 381, 428, 518, 519, 522, 523, 524, 525, 529, 530, 531, 644, 839, 840, 847, 874, 875, 876, 877, 954, 955, 962, 964, 1009, 1010], "chart": [34, 112, 244, 955, 981, 998], "henc": [34, 57, 68, 154, 186, 213, 248, 308, 320, 321, 333, 341, 348, 350, 352, 360, 364, 374, 378, 381, 382, 452, 473, 504, 506, 507, 508, 528, 555, 608, 611, 617, 625, 627, 637, 652, 669, 670, 674, 680, 695, 721, 750, 759, 782, 783, 801, 802, 803, 804, 805, 841, 911, 951, 953, 954, 955, 960, 961, 964, 974, 1002, 1003, 1006, 1007, 1009], "safe": [34, 154, 171, 216, 321, 346, 348, 374, 375, 399, 473, 474, 553, 556, 562, 738, 742, 825, 860, 920, 926, 957, 1001, 1002, 1003, 1008, 1009], "stabil": [34, 105, 112, 154, 203, 244, 279, 316, 321, 360, 371, 411, 615, 619, 635, 804, 823, 824, 842, 854, 902, 944, 950, 953, 964, 974, 979, 995, 999, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "mislead": [34, 108, 109, 115, 154, 347, 363, 381, 518, 519, 522, 523, 524, 525, 529, 530, 531, 874, 875, 876, 877, 990, 1008], "meaning": [34, 157, 207, 268, 322, 371, 378, 382, 383, 513, 693, 694, 702, 747, 748, 751, 815, 958, 968, 969, 995, 1011], "913": [34, 381, 524, 975], "plot_adjusted_for_chance_measur": [34, 975], "brendan": [35, 405, 419, 1011, 1012], "frei": [35, 405, 419, 1005], "delbert": [35, 405, 419], "dueck": [35, 405, 419], "messag": [35, 41, 59, 66, 87, 216, 320, 321, 341, 344, 345, 346, 350, 351, 354, 355, 374, 405, 419, 433, 504, 508, 513, 539, 592, 677, 763, 766, 767, 769, 777, 785, 790, 793, 795, 815, 823, 824, 864, 885, 886, 887, 890, 893, 917, 938, 954, 964, 995, 999, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "feb": [35, 405, 419], "affinitypropag": [35, 41, 292, 374, 995, 998, 999, 1003, 1006, 1008, 1009, 1010, 1011, 1012], "labels_tru": [35, 46, 52, 61, 374, 669, 670, 679, 680, 682, 695, 700, 701, 719, 721, 750, 759], "af": 35, "prefer": [35, 41, 52, 117, 231, 248, 279, 329, 333, 334, 335, 344, 346, 347, 348, 360, 374, 378, 379, 381, 382, 405, 419, 436, 437, 443, 452, 473, 474, 592, 597, 598, 619, 623, 624, 666, 690, 692, 706, 721, 722, 797, 815, 841, 866, 867, 908, 920, 943, 946, 948, 950, 954, 959, 969, 970, 973, 977, 986, 996, 1002, 1004, 1008, 1009, 1012], "cluster_centers_indic": [35, 419], "cluster_centers_indices_": [35, 405], "labels_": [35, 36, 37, 38, 39, 40, 41, 42, 44, 46, 48, 49, 52, 55, 58, 59, 60, 62, 64, 292, 294, 321, 346, 360, 374, 392, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 420, 675, 987, 1000], "n_clusters_": [35, 46, 52, 60, 406, 410], "homogeneity_scor": [35, 46, 55, 321, 374, 682, 700, 759, 954], "completeness_scor": [35, 46, 55, 289, 321, 374, 700, 701, 759, 954], "silhouette_scor": [35, 46, 55, 57, 321, 346, 374, 995, 999, 1001, 1003, 1005, 1009], "sqeuclidean": [35, 415, 422, 742, 743, 744], "872": [35, 962], "912": 35, "871": [35, 75, 76, 376, 439], "753": [35, 320], "cycler": 35, "class_memb": 35, "cluster_cent": [35, 58, 60, 61, 426], "plot_affinity_propag": [35, 405, 419, 975], "impos": [36, 54, 119, 176, 186, 285, 358, 374, 379, 381, 382, 492, 622, 950], "simpli": [36, 80, 120, 138, 146, 206, 217, 219, 248, 272, 290, 291, 333, 341, 346, 348, 351, 358, 360, 376, 377, 378, 379, 381, 382, 450, 660, 726, 729, 833, 905, 946, 954, 955, 956, 957, 968, 980, 988, 1002, 1003, 1004], "There": [36, 43, 107, 138, 200, 206, 216, 231, 234, 236, 239, 258, 320, 339, 341, 343, 346, 347, 348, 351, 358, 360, 361, 364, 371, 373, 374, 379, 381, 382, 383, 411, 417, 427, 499, 518, 519, 524, 525, 553, 554, 556, 571, 610, 944, 950, 951, 952, 953, 954, 957, 961, 964, 968, 969, 970, 972, 977, 987, 995, 1003], "unstabl": [36, 63, 154, 374, 376, 377, 654, 658, 902, 903, 970, 999, 1000, 1002, 1007, 1009, 1011], "quickli": [36, 220, 275, 288, 343, 346, 347, 378, 381, 657, 742, 950, 957, 958, 978, 988, 1006], "fight": [36, 186, 978], "percol": 36, "distanc": [36, 37, 52, 54, 57, 58, 62, 64, 72, 76, 92, 136, 149, 151, 157, 168, 183, 185, 202, 204, 207, 213, 219, 259, 261, 262, 267, 269, 271, 272, 279, 284, 288, 292, 293, 312, 320, 321, 333, 343, 355, 358, 360, 371, 374, 376, 379, 380, 384, 385, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 417, 420, 421, 422, 423, 424, 426, 427, 428, 433, 434, 435, 436, 437, 438, 439, 440, 441, 503, 505, 512, 572, 573, 580, 584, 585, 587, 588, 593, 623, 624, 631, 633, 639, 640, 641, 642, 643, 653, 654, 655, 657, 658, 659, 660, 661, 664, 668, 689, 698, 722, 724, 726, 727, 728, 729, 732, 733, 734, 735, 736, 737, 742, 743, 744, 745, 756, 757, 760, 795, 806, 807, 808, 809, 810, 811, 812, 813, 814, 816, 817, 818, 819, 820, 821, 845, 860, 864, 866, 868, 870, 871, 872, 874, 875, 876, 877, 944, 948, 951, 952, 954, 957, 960, 964, 966, 968, 969, 974, 975, 986, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "merg": [36, 38, 43, 48, 291, 344, 346, 349, 354, 358, 361, 374, 405, 406, 407, 410, 411, 428, 783, 987, 995, 1002], "exagger": [36, 154, 657, 951], "behaviour": [36, 92, 117, 183, 184, 200, 310, 346, 360, 374, 381, 524, 525, 529, 530, 567, 706, 764, 765, 768, 780, 781, 782, 783, 784, 864, 874, 875, 927, 943, 944, 954, 964, 1003, 1006, 1007, 1010, 1011], "shortest": [36, 351, 355, 653, 908, 951, 1008], "mechan": [36, 216, 317, 320, 334, 346, 348, 372, 374, 382, 388, 402, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 429, 430, 434, 435, 436, 437, 438, 439, 440, 441, 447, 448, 449, 450, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 546, 547, 548, 553, 554, 555, 556, 557, 559, 560, 561, 562, 563, 564, 565, 568, 575, 576, 592, 593, 594, 595, 600, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 653, 654, 655, 656, 657, 761, 762, 763, 764, 765, 766, 767, 768, 770, 771, 772, 773, 776, 777, 778, 779, 780, 781, 782, 783, 784, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 822, 823, 824, 825, 826, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 858, 859, 861, 862, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 952, 970, 978], "resembl": [36, 186], "brittl": [36, 374], "pronounc": [36, 37, 49, 143], "kneighbors_graph": [36, 41, 59, 64, 259, 360, 374, 406, 410, 660, 808, 809, 810, 812, 814, 816, 817, 818, 820, 957, 995, 999, 1004], "geometri": [36, 374, 951, 957], "instabl": [36, 154, 269, 384, 417, 500, 504, 508, 660, 1002, 1005, 1008], "agglomerativeclust": [36, 37, 38, 41, 44, 49, 53, 59, 64, 360, 374, 405, 407, 410, 987, 998, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1012], "1500": [36, 47, 54, 59, 64, 85, 202, 206, 225], "knn_graph": 36, "include_self": [36, 41, 64, 660, 819, 820, 999], "744": [36, 237, 259, 975], "plot_agglomerative_clust": [36, 975], "waveform": 37, "euclidean": [37, 54, 55, 168, 213, 219, 259, 262, 267, 288, 293, 312, 321, 371, 373, 374, 379, 380, 381, 382, 384, 405, 406, 409, 410, 411, 415, 417, 422, 425, 428, 496, 502, 510, 511, 554, 580, 584, 587, 588, 641, 643, 655, 657, 660, 661, 664, 726, 727, 733, 734, 735, 736, 742, 743, 744, 745, 756, 757, 806, 807, 808, 809, 810, 811, 812, 813, 814, 816, 817, 818, 819, 820, 860, 944, 948, 952, 955, 957, 966, 974, 999, 1002, 1003, 1004, 1005, 1011, 1012], "cityblock": [37, 41, 374, 415, 422, 726, 742, 743, 744, 957], "invari": [37, 343, 360, 374, 384, 579, 654, 711, 781, 782, 950, 951, 954, 969, 974, 1003, 1006, 1007, 1008], "ie": [37, 63, 88, 405, 669, 950, 964], "inter": [37, 108, 329, 381, 681, 909], "character": [37, 200, 324, 374, 378, 951], "ill": [37, 77, 187, 277, 436, 437, 443, 615, 616, 619, 620, 621, 647, 648, 950, 953, 987, 1005], "recov": [37, 62, 77, 88, 89, 94, 111, 138, 153, 166, 181, 182, 186, 202, 322, 376, 380, 383, 386, 425, 498, 524, 950, 951, 953, 974, 987, 1001], "put": [37, 55, 129, 138, 140, 214, 221, 225, 274, 281, 292, 302, 313, 318, 335, 348, 350, 351, 354, 384, 408, 412, 424, 480, 579, 612, 626, 761, 843, 847, 855, 868, 869, 870, 871, 872, 893, 944, 951, 953, 954, 955, 961, 964, 980, 982, 988], "cc": [37, 344], "patheffect": 37, "pairwise_dist": [37, 360, 374, 385, 409, 411, 415, 422, 653, 661, 726, 735, 743, 744, 756, 757, 810, 812, 814, 818, 952, 995, 999, 1001, 1003, 1004, 1006, 1007, 1012], "sqr": 37, "sign": [37, 74, 80, 88, 91, 103, 166, 230, 274, 316, 346, 374, 379, 382, 509, 547, 554, 571, 600, 601, 623, 624, 631, 633, 639, 640, 641, 642, 699, 706, 866, 870, 901, 903, 919, 950, 954, 959, 964, 968, 969, 987, 995, 999, 1004, 1008, 1010], "phi": [37, 379, 707, 832, 946, 954, 964, 969], "phase_nois": 37, "amplitude_nois": 37, "additional_nois": 37, "f7bd01": 37, "377eb8": [37, 41, 59, 60, 209], "f781bf": [37, 41, 59, 60], "set_label": [37, 141, 213], "tight": [37, 96, 103, 110, 129, 132, 167, 169, 174, 175, 176, 187, 191, 194, 199, 204, 207, 229, 259, 265, 266, 270, 271, 304, 308, 311, 313, 325, 547, 657, 1007], "avg_dist": [37, 745], "set_path_effect": 37, "withstrok": 37, "foreground": [37, 63], "cividi": 37, "45": [37, 61, 69, 79, 117, 132, 143, 156, 171, 182, 200, 246, 250, 251, 298, 308, 378, 381, 382, 529, 530, 592, 599, 611, 612, 617, 625, 626, 627, 646, 647, 648, 752, 761, 870, 944, 954, 962, 972, 984, 991, 995, 998], "interclass": 37, "plot_agglomerative_clustering_metr": [37, 975], "hierarchi": [38, 157, 346, 415, 421, 428, 959, 987], "plot_dendrogram": 38, "kwarg": [38, 90, 216, 348, 353, 388, 392, 396, 403, 407, 413, 415, 429, 434, 500, 503, 505, 528, 582, 596, 611, 612, 617, 618, 625, 626, 627, 628, 642, 646, 649, 663, 664, 665, 667, 706, 806, 807, 825, 826, 830, 870, 881, 914, 1002, 1006, 1008, 1012], "children_": [38, 406, 410, 428], "current_count": 38, "child_idx": 38, "leaf": [38, 106, 118, 120, 324, 328, 374, 381, 385, 406, 407, 408, 409, 410, 411, 415, 422, 428, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 806, 807, 808, 809, 810, 811, 812, 814, 816, 817, 818, 874, 875, 876, 877, 878, 879, 957, 970, 998, 1000, 1002, 1006, 1009], "linkage_matrix": 38, "column_stack": [38, 274, 281], "distances_": [38, 406, 410, 1007], "distance_threshold": [38, 406, 410, 1004, 1007], "truncate_mod": 38, "parenthesi": [38, 346], "plot_agglomerative_dendrogram": [38, 975], "scalabl": [39, 41, 59, 151, 158, 214, 232, 293, 321, 346, 374, 381, 382, 413, 456, 467, 554, 605, 769, 780, 790, 792, 804, 827, 836, 838, 866, 868, 871, 872, 946, 949, 951, 954, 967, 969, 975, 978, 995, 998, 999, 1005, 1006, 1009, 1010], "hundr": [39, 113, 203, 283, 341, 378, 381, 526, 527, 951, 1006], "thousand": [39, 107, 117, 213, 215, 283, 321, 341, 374, 381, 823, 824, 871, 951, 988, 1004, 1006], "million": [39, 53, 143, 159, 382, 657, 951, 969, 978, 1009, 1010], "chose": [39, 154, 983], "usag": [39, 50, 67, 70, 79, 91, 99, 133, 154, 155, 210, 214, 216, 233, 268, 270, 276, 304, 322, 333, 341, 345, 346, 348, 349, 353, 354, 356, 360, 361, 364, 373, 374, 378, 379, 384, 385, 409, 411, 415, 429, 454, 461, 477, 480, 484, 488, 499, 500, 506, 526, 527, 556, 574, 605, 613, 623, 624, 625, 631, 632, 633, 634, 641, 642, 643, 644, 645, 655, 742, 745, 756, 757, 822, 823, 825, 866, 874, 875, 876, 877, 903, 943, 944, 946, 953, 954, 955, 957, 969, 976, 977, 979, 983, 990, 996, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012], "enjoi": 39, "edit": [39, 343, 345, 346, 349, 350, 354, 358, 364, 495, 499, 796, 948, 950, 955, 961, 988], "158": [39, 46, 233, 381, 634, 975], "manojkumarsivaraj334": 39, "joblib": [39, 51, 68, 107, 259, 289, 341, 344, 346, 349, 355, 358, 360, 364, 367, 368, 373, 375, 385, 402, 406, 409, 410, 411, 413, 415, 417, 422, 423, 426, 429, 432, 437, 473, 474, 496, 500, 501, 502, 504, 507, 508, 510, 511, 513, 520, 521, 522, 523, 528, 529, 530, 531, 532, 533, 534, 535, 559, 567, 572, 573, 575, 597, 599, 604, 612, 616, 618, 620, 622, 623, 624, 626, 628, 630, 631, 633, 641, 644, 653, 654, 655, 656, 657, 658, 659, 738, 742, 745, 763, 766, 767, 769, 777, 785, 787, 788, 789, 790, 791, 793, 794, 795, 796, 798, 799, 808, 809, 812, 814, 816, 817, 819, 820, 825, 826, 827, 828, 861, 862, 920, 921, 922, 924, 939, 954, 974, 995, 996, 998, 1000, 1002, 1003, 1004, 1006, 1007, 1010, 1012], "cpu_count": [39, 107, 259, 922], "xx": [39, 55, 75, 110, 114, 120, 129, 140, 141, 142, 155, 169, 189, 192, 193, 194, 195, 196, 207, 209, 217, 229, 265, 274, 281, 282, 302, 307, 308, 313, 314, 317, 318, 350], "yy": [39, 55, 75, 110, 120, 129, 140, 142, 155, 189, 193, 194, 195, 196, 207, 209, 217, 265, 274, 281, 282, 302, 307, 308, 313, 314, 317, 318], "n_center": [39, 477], "25000": 39, "colors_": 39, "cname": 39, "birch_model": 39, "final_step": 39, "centroid": [39, 42, 54, 55, 73, 151, 260, 267, 282, 292, 321, 342, 365, 374, 407, 408, 411, 412, 413, 414, 417, 424, 425, 427, 469, 514, 596, 813, 975, 976, 990, 995, 999, 1002, 1007, 1011], "subcluster_centers_": [39, 407], "this_centroid": 39, "set_autoscaley_on": 39, "mbk": [39, 61], "max_no_improv": [39, 58, 61, 414, 502, 503, 504, 511, 1009, 1010], "t_mini_batch": [39, 61], "mbk_means_labels_uniqu": 39, "cluster_centers_": [39, 40, 45, 47, 55, 57, 58, 60, 61, 87, 292, 321, 405, 408, 412, 413, 414, 987], "366": [39, 975], "plot_birch_vs_minibatchkmean": [39, 975], "cloud": [40, 79, 86, 88, 151, 354, 379, 498, 506, 657, 954, 972, 973, 975, 987], "bisectingkmean": [40, 374, 1009, 1010, 1011], "__doc__": [40, 71, 143, 228, 360], "n_clusters_list": 40, "clustering_algorithm": [40, 41, 59], "algorithm_nam": 40, "algo": [40, 96], "hide": [40, 346, 354, 801, 802, 803, 804, 805, 998, 1003, 1011], "flat": [40, 87, 155, 202, 203, 204, 237, 374, 382, 405, 411, 413, 426, 474, 961, 987, 995, 996, 1011], "label_out": 40, "963": [40, 975, 983], "plot_bisect_kmean": [40, 975], "characterist": [41, 59, 136, 143, 151, 209, 210, 222, 232, 234, 236, 246, 279, 300, 329, 341, 343, 351, 372, 378, 381, 384, 468, 469, 588, 603, 623, 667, 671, 673, 691, 746, 752, 753, 782, 792, 795, 833, 871, 950, 975], "null": [41, 67, 154, 155, 156, 239, 245, 374, 378, 461, 613, 634, 645, 669, 695, 721, 759, 791, 950, 951, 954, 969, 1005], "mismatch": [41, 953, 1004], "warn": [41, 59, 68, 182, 197, 216, 242, 259, 275, 276, 283, 333, 334, 346, 349, 350, 351, 360, 368, 375, 382, 461, 503, 505, 512, 515, 518, 519, 522, 523, 524, 525, 526, 527, 529, 530, 531, 536, 537, 538, 539, 540, 541, 543, 567, 601, 658, 677, 678, 693, 694, 702, 747, 748, 751, 816, 830, 831, 866, 867, 869, 870, 871, 872, 874, 875, 876, 877, 886, 887, 893, 903, 911, 920, 924, 940, 941, 943, 954, 964, 986, 995, 997, 998, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "noisy_circl": [41, 59], "noisy_moon": [41, 59], "no_structur": [41, 59], "anisotropicli": [41, 59], "170": [41, 54, 55, 59, 205, 352, 975], "x_aniso": [41, 54, 59], "aniso": [41, 59], "plot_num": [41, 59, 209], "default_bas": [41, 59], "quantil": [41, 50, 60, 84, 101, 103, 151, 160, 279, 282, 283, 358, 381, 403, 404, 423, 484, 517, 525, 527, 622, 635, 687, 709, 712, 714, 789, 831, 843, 844, 845, 855, 856, 954, 964, 975, 976, 990, 995, 999, 1002, 1004, 1008, 1009, 1011], "damp": [41, 374, 405, 419], "min_sampl": [41, 46, 62, 358, 360, 374, 385, 409, 411, 415, 420, 421, 422, 636, 950, 1004, 1008], "xi": [41, 62, 343, 374, 377, 382, 415, 421, 474, 968, 1006], "min_cluster_s": [41, 62, 294, 374, 411, 415, 421, 1004], "allow_single_clust": [41, 411], "hdbscan_min_cluster_s": 41, "hdbscan_min_sampl": 41, "220": [41, 995], "i_dataset": [41, 59, 209], "algo_param": [41, 59], "param": [41, 52, 58, 59, 67, 112, 113, 115, 116, 202, 215, 216, 237, 239, 247, 251, 263, 275, 295, 346, 348, 360, 365, 381, 384, 388, 391, 397, 398, 402, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 429, 430, 434, 435, 436, 437, 438, 439, 440, 441, 447, 448, 449, 450, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 546, 547, 548, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 600, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 649, 653, 654, 655, 656, 657, 761, 762, 763, 766, 767, 775, 777, 787, 788, 789, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 822, 823, 824, 825, 826, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 858, 859, 861, 862, 863, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 910, 911, 943, 1001, 1005, 1006, 1008, 1009, 1012], "easier": [41, 59, 63, 77, 111, 161, 167, 211, 219, 236, 237, 279, 308, 320, 329, 341, 346, 348, 351, 354, 358, 364, 376, 378, 433, 480, 864, 897, 949, 954, 961, 970, 974, 978, 988, 1004, 1009], "estimate_bandwidth": [41, 60, 374, 413, 426], "symmetr": [41, 114, 157, 184, 360, 372, 374, 417, 427, 428, 439, 484, 492, 494, 655, 659, 660, 669, 670, 680, 681, 682, 688, 692, 700, 701, 719, 721, 727, 749, 759, 761, 762, 940, 943, 950, 954, 957, 1011], "meanshift": [41, 292, 374, 405, 998, 999, 1000, 1003, 1005, 1006, 1009, 1010, 1011], "bin_seed": [41, 60, 413, 426, 1006], "two_mean": 41, "spectralclust": [41, 292, 374, 405, 957, 995, 996, 1005, 1007, 1008, 1009, 1010, 1011, 1012], "nearest_neighbor": [41, 417, 656], "average_linkag": 41, "gmm": [41, 56, 151, 224, 226, 229, 230, 231, 469, 477, 762, 782, 953, 975, 995, 996, 999, 1000, 1001], "gaussianmixtur": [41, 54, 226, 227, 228, 229, 230, 231, 380, 761, 953, 1001, 1003, 1004, 1008, 1009, 1011, 1012], "covariance_typ": [41, 226, 227, 229, 230, 231, 761, 762, 1011], "nkmean": 41, "npropag": 41, "ncluster": 41, "nmixtur": 41, "catch": [41, 59, 276, 334, 354, 355], "catch_warn": [41, 59, 216, 275, 276], "filterwarn": [41, 59, 197, 275, 276, 346, 964], "userwarn": [41, 59, 103, 147, 174, 191, 234, 313, 325, 351, 677, 964, 1001, 1003, 1008], "t1": [41, 43, 59, 197, 204, 207, 209], "ff7f00": [41, 59, 209], "4daf4a": [41, 59], "a65628": [41, 59], "984ea3": [41, 59], "999999": [41, 59], "e41a1c": [41, 59], "dede00": [41, 59, 60], "transax": [41, 59, 206, 209, 227, 267, 281], "672": [41, 975], "plot_cluster_comparison": [41, 975], "deliv": [42, 333, 978], "bad": [42, 57, 58, 139, 154, 320, 329, 346, 374, 384, 657, 710, 943, 950, 951, 956, 962, 987, 995], "though": [42, 52, 107, 136, 159, 161, 219, 245, 264, 281, 283, 321, 322, 329, 333, 340, 343, 346, 348, 359, 360, 374, 379, 380, 381, 382, 383, 664, 770, 772, 866, 943, 944, 946, 951, 954, 957, 962, 964, 968, 988, 1003], "3d": [42, 45, 64, 83, 93, 179, 202, 204, 206, 328, 382, 471, 551, 917, 987, 1002, 1003, 1005], "mplot3d": [42, 64, 83, 93, 155, 179, 202, 204], "noqa": [42, 64, 83, 93, 114, 136, 149, 150, 155, 179, 202, 204, 250, 251, 290, 320, 350, 544, 545, 592, 766, 767, 943, 1004], "f401": [42, 64, 83, 93, 155, 179, 202, 204], "k_means_iris_8": 42, "k_means_iris_3": 42, "k_means_iris_bad_init": 42, "est": [42, 122, 154, 216, 218, 281, 290, 329, 368, 381, 527, 699, 831, 943, 954, 964, 968, 1006, 1007], "elev": [42, 64, 83, 93, 155, 179, 202, 206, 456], "azim": [42, 64, 83, 93, 155, 179, 202, 206], "134": [42, 50, 93, 113, 239, 998], "xaxi": [42, 83, 93, 107, 179, 202, 204, 207, 259, 264, 320], "set_ticklabel": [42, 83, 93, 179, 320], "zaxi": [42, 83, 93, 179, 202], "petal": [42, 83, 95, 97, 110, 223, 290, 293, 343, 375, 879, 970, 985, 986], "sepal": [42, 83, 95, 97, 110, 140, 165, 223, 262, 290, 293, 305, 343, 964, 985, 986], "length": [42, 66, 82, 83, 85, 95, 97, 110, 136, 138, 139, 140, 143, 144, 146, 159, 165, 216, 217, 220, 223, 262, 290, 293, 305, 322, 339, 343, 346, 354, 355, 360, 375, 379, 381, 382, 384, 410, 455, 473, 474, 477, 480, 488, 516, 528, 546, 547, 554, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 592, 597, 611, 612, 615, 616, 617, 618, 619, 621, 622, 625, 626, 627, 628, 646, 649, 745, 763, 766, 767, 777, 792, 794, 797, 798, 800, 808, 809, 810, 812, 814, 853, 879, 886, 888, 892, 908, 909, 925, 928, 953, 960, 964, 979, 985, 986, 995, 998, 999, 1001, 1002, 1003, 1004, 1006, 1007, 1011], "set_zlabel": [42, 83, 179], "setosa": [42, 83, 93, 95, 248, 249, 343, 469, 979, 986], "versicolour": [42, 83, 93, 95, 343, 986], "virginica": [42, 83, 93, 95, 248, 249, 343, 469, 954, 986], "text3d": [42, 93], "296": [42, 966, 975], "plot_cluster_iri": [42, 975], "voxel": [43, 63, 550], "multipl": [43, 65, 68, 85, 96, 101, 107, 109, 110, 112, 132, 151, 154, 176, 214, 239, 244, 247, 251, 256, 258, 261, 288, 294, 311, 333, 334, 335, 340, 342, 343, 346, 348, 349, 350, 351, 358, 360, 373, 374, 375, 376, 377, 379, 381, 382, 383, 384, 385, 386, 409, 425, 429, 431, 432, 434, 439, 453, 456, 457, 460, 461, 462, 468, 469, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 516, 518, 519, 520, 521, 524, 525, 526, 527, 528, 546, 564, 572, 573, 575, 576, 592, 597, 599, 604, 605, 606, 607, 611, 612, 615, 617, 618, 619, 622, 625, 626, 627, 628, 631, 632, 633, 636, 638, 641, 643, 644, 654, 655, 657, 658, 659, 676, 686, 687, 692, 709, 710, 712, 714, 715, 717, 749, 752, 754, 755, 757, 761, 762, 763, 765, 766, 767, 768, 769, 775, 777, 778, 779, 780, 781, 782, 783, 788, 789, 790, 792, 796, 797, 798, 799, 800, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 822, 823, 824, 825, 826, 828, 831, 843, 847, 855, 858, 859, 866, 867, 868, 871, 882, 897, 902, 903, 925, 928, 946, 949, 950, 951, 955, 956, 957, 961, 962, 967, 968, 970, 973, 974, 975, 979, 988, 995, 996, 998, 1001, 1002, 1005, 1006, 1007, 1008, 1010, 1011, 1012], "partli": [43, 733], "procedur": [43, 53, 107, 114, 136, 162, 170, 230, 241, 282, 286, 308, 320, 329, 346, 348, 358, 359, 360, 361, 372, 373, 376, 378, 379, 381, 383, 496, 502, 503, 505, 510, 511, 512, 518, 519, 520, 521, 524, 525, 558, 560, 567, 574, 609, 637, 639, 652, 692, 749, 823, 824, 843, 855, 925, 943, 950, 956, 964, 967, 968, 969, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "solut": [43, 161, 166, 171, 173, 187, 196, 209, 215, 291, 308, 344, 348, 360, 371, 374, 376, 378, 379, 382, 383, 414, 416, 418, 496, 502, 503, 504, 505, 507, 508, 510, 511, 512, 513, 514, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 575, 611, 613, 615, 617, 619, 620, 621, 623, 625, 627, 629, 630, 631, 632, 633, 634, 637, 639, 641, 642, 643, 644, 645, 647, 648, 650, 651, 652, 761, 762, 777, 815, 823, 824, 947, 948, 950, 951, 953, 958, 960, 968, 969, 972, 978, 983, 986, 988, 995, 998, 1008, 1009, 1010], "partit": [43, 63, 66, 118, 120, 239, 276, 360, 371, 372, 374, 378, 381, 414, 416, 418, 427, 476, 522, 523, 524, 525, 528, 529, 530, 669, 670, 680, 750, 814, 874, 875, 876, 877, 953, 957, 960, 964, 970, 988], "cluster_qr": [43, 374, 417, 427, 1009], "qr": [43, 184, 370, 499, 506, 509, 902, 903, 951, 1001, 1012], "pivot": [43, 250, 251], "cheung": [43, 996], "andrew": [43, 374, 427, 656, 660, 682, 701, 759, 841, 958, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "knyazev": [43, 374, 417, 427, 660, 1005, 1008, 1009], "ucdenv": 43, "skimag": [43, 44, 340, 987], "spectral_clust": [43, 63, 1003, 1005, 1007, 1008, 1009, 1010, 1012], "orig_coin": [43, 44], "speed": [43, 44, 54, 66, 90, 99, 107, 150, 155, 168, 171, 175, 219, 259, 290, 298, 320, 322, 335, 346, 349, 355, 358, 360, 370, 372, 374, 379, 381, 382, 385, 408, 409, 412, 413, 414, 415, 417, 422, 424, 425, 426, 427, 496, 497, 575, 592, 597, 598, 599, 604, 611, 612, 615, 616, 617, 618, 619, 620, 621, 625, 626, 627, 628, 629, 646, 649, 657, 761, 762, 769, 790, 806, 807, 808, 809, 810, 812, 814, 816, 817, 818, 841, 903, 943, 946, 951, 953, 955, 968, 978, 987, 988, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "down": [43, 44, 76, 101, 197, 198, 204, 213, 214, 216, 242, 256, 277, 279, 312, 329, 340, 349, 354, 360, 376, 379, 408, 415, 421, 555, 558, 559, 604, 614, 738, 742, 745, 835, 836, 841, 844, 845, 856, 868, 871, 878, 950, 979, 987, 1003, 1013], "alias": [43, 44, 216, 344, 346, 349, 365, 562, 995, 999, 1009], "smoothened_coin": [43, 44], "rescaled_coin": [43, 44, 987], "anti_alias": [43, 44, 987], "img_to_graph": [43, 63, 382, 998, 1008], "exponenti": [43, 71, 138, 143, 264, 269, 380, 381, 384, 414, 501, 519, 524, 579, 584, 587, 604, 608, 722, 723, 806, 807, 811, 823, 824, 841, 946, 950, 954, 969, 986, 1002, 1008], "beta": [43, 79, 153, 186, 352, 372, 374, 377, 501, 503, 505, 512, 609, 693, 694, 700, 706, 747, 759, 761, 954, 986, 997, 1000, 1002, 1004, 1005], "voronoi": [43, 63, 374], "n_region": 43, "extra": [43, 110, 117, 218, 259, 295, 322, 344, 345, 347, 350, 360, 381, 382, 403, 408, 412, 424, 429, 497, 522, 523, 531, 555, 556, 665, 666, 667, 787, 810, 876, 877, 893, 953, 954, 957, 995, 998, 1000, 1001, 1003, 1008, 1010], "n_regions_plu": 43, "lobpcg": [43, 417, 427, 653, 656, 660, 1005, 1008, 1009, 1010], "amg": [43, 63, 374, 417, 427, 656, 660, 1005, 1009, 1010], "pyamg": [43, 364, 367, 374, 417, 427, 656, 660], "toler": [43, 69, 149, 173, 175, 198, 199, 312, 322, 341, 348, 355, 374, 386, 408, 412, 417, 424, 427, 436, 437, 443, 447, 448, 449, 496, 497, 498, 500, 501, 505, 506, 507, 508, 509, 510, 512, 513, 524, 525, 526, 527, 592, 611, 612, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 641, 643, 644, 646, 647, 648, 649, 653, 654, 655, 656, 658, 659, 660, 806, 807, 811, 815, 823, 824, 861, 862, 866, 867, 868, 869, 870, 871, 872, 940, 950, 954, 968, 969, 984, 1007, 1008, 1009, 1010], "eigen_tol": [43, 417, 427, 656, 660, 996, 1009, 1010], "todo": [43, 213, 350, 354, 374, 1013], "21243": 43, "assign_label": [43, 374, 417, 427], "comment": [43, 320, 344, 345, 346, 347, 349, 350, 354, 452, 544, 954], "paus": 43, "21194": [43, 1008], "43": [43, 136, 145, 179, 213, 239, 259, 343, 351, 763, 777, 847], "742": [43, 975], "plot_coin_segment": [43, 975], "spatial": [44, 46, 52, 157, 166, 199, 276, 341, 360, 374, 385, 409, 411, 415, 417, 422, 644, 657, 724, 727, 742, 743, 744, 745, 756, 757, 806, 807, 808, 809, 810, 811, 812, 813, 814, 816, 817, 818, 819, 820, 950, 957, 964, 997, 1001, 1008, 1011], "constrain": [44, 87, 111, 117, 119, 155, 173, 274, 289, 295, 306, 308, 339, 360, 373, 374, 379, 381, 474, 526, 527, 600, 623, 624, 655, 659, 791, 950, 953, 999], "grid_to_graph": [44, 48, 51, 374, 382, 987, 1008], "st": [44, 64, 239, 293, 998, 1001, 1003], "4697": 44, "305": [44, 352, 975], "plot_coin_ward_segment": [44, 975], "vq": [45, 55], "palac": 45, "china": [45, 374, 471, 472, 549, 552], "615": [45, 265, 975], "literatur": [45, 143, 239, 256, 321, 343, 346, 352, 354, 358, 359, 374, 377, 379, 381, 408, 412, 414, 466, 501, 503, 505, 512, 520, 521, 553, 556, 673, 761, 943, 946, 950, 954, 1005], "codebook": [45, 256, 531, 796], "palett": [45, 154, 239], "byte": [45, 50, 382, 452, 468, 473, 474, 547, 553, 554, 556, 919, 986, 988, 995, 1002, 1003, 1010], "rgb": [45, 341, 382, 458, 459, 548, 549, 552], "gif": 45, "pick": [45, 52, 57, 157, 217, 247, 292, 297, 341, 346, 350, 374, 381, 408, 425, 488, 638, 876, 877, 943, 950, 951, 953, 968, 1006], "017": [45, 352, 436, 437], "036": [45, 155, 352, 437, 975], "robertlayton": 45, "load_sample_imag": [45, 548, 549, 552, 1004], "pairwise_distances_argmin": [45, 61, 292, 744, 1003, 1009, 1010, 1011, 1012], "n_color": 45, "photo": 45, "jpg": [45, 471, 549, 552], "255": [45, 90, 259, 276, 285, 291, 341, 458, 459, 526, 527], "original_shap": 45, "image_arrai": 45, "image_array_sampl": 45, "codebook_random": 45, "labels_random": 45, "recreate_imag": 45, "recreat": [45, 220], "book": [45, 66, 408, 412, 414, 796, 801, 805, 950, 951, 952, 955, 1007], "alongsid": [45, 346, 352, 360, 364, 383, 787, 788, 789, 954, 961, 973, 974], "503": [45, 975], "plot_color_quant": [45, 975], "750": [46, 52, 109, 239], "math": [46, 66, 117, 136, 219, 239, 240, 343, 364, 728], "db": [46, 52, 374], "n_noise_": 46, "come": [46, 64, 66, 75, 80, 92, 136, 138, 214, 288, 320, 321, 333, 335, 339, 343, 346, 347, 350, 354, 358, 360, 364, 374, 378, 381, 382, 404, 415, 421, 437, 515, 670, 759, 784, 868, 871, 943, 944, 948, 951, 953, 957, 960, 969, 979, 995, 1006, 1009, 1011], "handi": [46, 67, 321, 322, 347, 1011], "883": 46, "917": 46, "916": 46, "626": [46, 168], "unique_label": [46, 52, 321, 348, 355], "core_samples_mask": 46, "zeros_lik": [46, 184, 248], "bool": [46, 63, 76, 150, 200, 328, 346, 386, 387, 388, 389, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 424, 426, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 473, 474, 475, 476, 477, 478, 479, 480, 484, 487, 488, 489, 491, 492, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 546, 547, 548, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 662, 663, 665, 667, 668, 672, 673, 674, 676, 677, 678, 679, 690, 691, 692, 693, 694, 695, 702, 705, 706, 714, 715, 718, 720, 725, 727, 731, 733, 738, 742, 746, 747, 748, 749, 751, 753, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 772, 777, 781, 782, 785, 786, 789, 790, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 882, 884, 885, 886, 887, 897, 903, 904, 916, 919, 925, 927, 935, 940, 941, 942, 944, 1004, 1007, 1008], "core_sample_indices_": [46, 409], "class_member_mask": 46, "markerfacecolor": [46, 52, 58, 60, 61], "markeredgecolor": [46, 52, 58, 60, 61], "markers": [46, 52, 55, 58, 60, 61, 114, 141, 145, 212, 292], "plot_dbscan": [46, 385, 409, 975], "constitut": [47, 360, 378, 381, 415, 421, 553, 554, 556, 958], "standpoint": 47, "proce": [47, 133, 163, 344, 350, 377, 378, 381, 405, 950], "reassign": [47, 346, 412, 414, 996, 1000], "success": [47, 131, 151, 232, 243, 246, 247, 315, 329, 369, 374, 378, 379, 381, 480, 529, 544, 763, 766, 767, 784, 871, 957, 975, 978, 983, 987, 990, 1007], "becom": [47, 52, 54, 68, 75, 112, 184, 186, 216, 219, 241, 259, 280, 284, 308, 312, 320, 329, 340, 346, 348, 350, 354, 360, 361, 374, 376, 381, 382, 384, 405, 415, 419, 420, 422, 518, 546, 553, 554, 556, 584, 592, 623, 624, 641, 643, 840, 866, 867, 873, 949, 950, 951, 953, 957, 964, 969, 986, 988, 996, 1003, 1004, 1007, 1008, 1009, 1010, 1012], "fetch_olivetti_fac": [47, 87, 109, 218, 341, 1003, 1004, 1005, 1013], "extract_patches_2d": [47, 90, 382, 552, 1003], "patch_siz": [47, 90, 382, 548, 549, 552], "buffer": [47, 1008], "max_patch": [47, 382, 548, 549, 1003], "4i": 47, "dt": [47, 90, 123, 381, 382, 970], "2400": 47, "700": [47, 290], "800": [47, 291, 341, 549, 657], "1100": 47, "1200": [47, 113, 279, 381], "1300": 47, "1400": [47, 439], "1600": 47, "1700": 47, "1800": 47, "1900": 47, "2100": [47, 291], "2200": [47, 341, 458], "2300": [47, 171], "ntrain": 47, "263": [47, 975], "plot_dict_face_patch": [47, 975], "agglo": [48, 410, 987], "featureagglomer": [48, 51, 405, 406, 971, 987, 998, 1004, 1005, 1008, 1009, 1011, 1012], "x_reduc": [48, 83, 120, 410, 987], "x_restor": 48, "images_restor": 48, "plot_digits_agglomer": [48, 975], "rich": [49, 117, 354, 358, 374, 404, 978, 1006, 1009], "richer": [49, 96, 374], "uneven": [49, 234, 374, 378], "patholog": [49, 953, 1001], "clean": [49, 67, 181, 329, 338, 344, 380, 960, 964, 1005], "fring": [49, 374], "sensibl": [49, 149, 256, 321, 348, 950, 964], "resampl": [49, 114, 143, 154, 200, 263, 355, 358, 360, 520, 521, 928, 974, 1004, 1008], "plot_clust": 49, "x_red": 49, "spectralembed": [49, 202, 203, 204, 653, 654, 655, 657, 951, 996, 1001, 1005, 1009, 1010, 1012], "563": [49, 975], "plot_digits_linkag": [49, 975], "raccoon": [50, 90, 379], "addition": [50, 68, 103, 117, 154, 182, 200, 216, 289, 291, 321, 346, 358, 372, 382, 575, 576, 611, 617, 636, 843, 943, 944, 954, 962, 973, 1001, 1012], "adapt": [50, 52, 101, 113, 114, 141, 225, 226, 281, 312, 334, 344, 345, 346, 355, 374, 381, 384, 480, 481, 482, 483, 641, 642, 643, 823, 824, 950, 956, 958, 964, 968, 973, 974, 1003, 1004, 1011, 1012], "pooch": [50, 346, 364, 367], "instal": [50, 223, 259, 288, 289, 290, 291, 292, 293, 294, 295, 333, 334, 346, 347, 349, 350, 352, 354, 358, 359, 367, 370, 374, 382, 417, 427, 461, 656, 660, 970, 988, 1002, 1003, 1004, 1008, 1009], "raccoon_fac": [50, 90], "nbyte": [50, 213], "768": 50, "1024": [50, 96, 414, 433, 503, 864, 1008], "uint8": [50, 90, 340, 462, 471, 472, 1007], "786432": 50, "unsign": [50, 91, 341, 547, 919], "786": [50, 67], "kilobyt": 50, "behind": [50, 75, 101, 256, 344, 348, 350, 354, 373, 376, 381, 953, 957, 966, 1011], "simplest": [50, 349, 378, 951, 954, 986, 987], "know": [50, 63, 133, 136, 138, 147, 154, 200, 216, 217, 239, 256, 258, 292, 297, 316, 321, 333, 346, 358, 365, 368, 374, 377, 378, 379, 382, 465, 469, 475, 611, 617, 623, 624, 690, 720, 763, 777, 851, 852, 854, 855, 856, 857, 874, 875, 876, 877, 943, 953, 954, 955, 957, 966, 1001, 1002, 1005, 1007], "certainli": [50, 66, 321], "subsampl": [50, 96, 113, 116, 155, 182, 199, 200, 235, 282, 286, 290, 423, 524, 525, 526, 527, 528, 597, 644, 666, 766, 767, 792, 831, 843, 855, 882, 892, 946, 950, 974, 995, 1005, 1009, 1011, 1012, 1013], "200_000": [50, 282, 831, 1011], "compressed_raccoon_uniform": 50, "spot": [50, 211, 374], "leav": [50, 101, 106, 115, 155, 157, 200, 246, 284, 328, 329, 333, 343, 345, 351, 360, 374, 381, 406, 407, 410, 411, 428, 468, 522, 523, 524, 525, 526, 527, 529, 530, 531, 638, 640, 765, 770, 771, 772, 773, 781, 782, 806, 807, 874, 875, 876, 877, 943, 951, 957, 961, 970, 983, 986, 995, 1002, 1004, 1006, 1007, 1011], "bin_edg": 50, "bin_edges_": [50, 280, 831], "bin_cent": [50, 182], "625": [50, 182, 583, 673], "875": [50, 139, 634], "375": [50, 272, 414, 714, 954, 975], "140": [50, 52, 295, 381, 475, 481, 482, 483, 520, 521, 955, 975], "171": [50, 136, 343, 352, 752, 954], "234": [50, 213, 285, 327, 801, 805, 823, 824, 956, 975], "axvlin": [50, 57, 69, 77, 94, 113, 124, 154, 156, 157, 171, 245, 316, 984], "get_ybound": 50, "state": [50, 54, 66, 68, 75, 117, 184, 213, 221, 226, 245, 290, 329, 334, 335, 346, 348, 352, 354, 358, 360, 361, 373, 382, 387, 405, 408, 412, 414, 419, 424, 440, 509, 554, 644, 766, 767, 775, 777, 779, 806, 807, 813, 861, 862, 889, 943, 944, 950, 956, 959, 966, 973, 974, 978, 997, 999, 1001, 1003, 1005, 1008, 1011], "compressed_raccoon_kmean": 50, "90885631": 50, "34346583": 50, "64447187": 50, "28225276": 50, "70763101": 50, "159": [50, 341, 995], "78681467": 50, "185": [50, 136, 147, 253, 343, 352, 823, 824, 975], "17226834": 50, "02069427": 50, "save": [50, 66, 68, 219, 277, 345, 346, 350, 352, 353, 354, 360, 368, 378, 386, 433, 499, 500, 592, 806, 807, 864, 950, 954, 964, 970, 978, 988, 995, 998, 1002, 1005], "verifi": [50, 57, 99, 117, 154, 182, 346, 351, 370, 938, 957], "6291456": 50, "surpris": [50, 155, 344, 950, 973, 997], "x8": 50, "ndarrai": [50, 55, 83, 182, 223, 237, 238, 239, 346, 347, 348, 352, 353, 370, 382, 385, 386, 389, 390, 392, 395, 396, 398, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 428, 429, 430, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 453, 454, 455, 456, 457, 458, 459, 460, 462, 465, 466, 467, 468, 469, 470, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 665, 666, 667, 680, 683, 686, 687, 688, 691, 692, 702, 709, 710, 712, 714, 715, 717, 718, 722, 723, 724, 725, 727, 728, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 749, 753, 754, 755, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 787, 788, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 822, 823, 824, 825, 826, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 883, 884, 885, 886, 891, 892, 900, 902, 903, 904, 905, 909, 916, 918, 919, 923, 926, 927, 929, 930, 931, 932, 935, 940, 941, 954, 969, 974, 998, 1002, 1005, 1006, 1009, 1010, 1011, 1012], "gain": [50, 117, 204, 246, 259, 261, 295, 298, 320, 321, 328, 345, 352, 354, 381, 461, 497, 522, 526, 527, 529, 690, 720, 761, 762, 795, 874, 876, 955, 959, 967, 970, 998, 1002, 1005], "plot_face_compress": [50, 975], "bayesianridg": [51, 149, 161, 162, 166, 290, 592, 609, 950, 1002, 1003, 1004, 1005, 1008, 1009, 1011, 1012], "shutil": [51, 68, 375], "tempfil": [51, 261, 288, 375, 957], "feature_select": [51, 67, 68, 70, 130, 131, 132, 133, 134, 135, 136, 151, 223, 290, 292, 311, 329, 360, 365, 375, 383, 546, 943, 975, 995, 996, 998, 999, 1000, 1001, 1002], "kfold": [51, 107, 113, 127, 234, 244, 329, 378, 402, 437, 532, 533, 559, 567, 612, 616, 618, 620, 626, 628, 630, 638, 763, 766, 767, 769, 771, 773, 777, 782, 784, 785, 786, 787, 788, 789, 790, 791, 793, 797, 800, 847, 983, 996, 997, 998, 1000, 1001, 1003, 1005], "roi_siz": 51, "snr": 51, "noise_coef": 51, "gridsearch": [51, 73, 250, 973], "cachedir": [51, 68, 355, 375], "mkdtemp": [51, 375], "mem": [51, 352, 473, 474, 975], "n_x": [51, 550], "n_y": [51, 550, 956, 964], "parcel": [51, 64, 374], "ward__n_clust": 51, "coef_agglomeration_": 51, "_agglom": 51, "ward_tre": [51, 406, 410, 995, 999], "451933": 51, "675318": 51, "275706": 51, "085711": 51, "1600x1600": 51, "7840": 51, "element": [51, 87, 104, 105, 116, 211, 233, 238, 246, 248, 289, 321, 324, 328, 343, 345, 346, 348, 355, 361, 371, 373, 374, 378, 379, 381, 382, 385, 409, 411, 417, 429, 452, 473, 477, 479, 485, 487, 491, 492, 496, 502, 503, 505, 515, 522, 523, 524, 525, 529, 530, 531, 532, 533, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 582, 597, 623, 624, 631, 632, 633, 641, 642, 643, 672, 682, 691, 698, 700, 710, 727, 733, 742, 746, 752, 753, 796, 806, 807, 808, 809, 810, 812, 814, 816, 817, 821, 823, 824, 829, 845, 846, 849, 853, 866, 871, 874, 875, 876, 877, 905, 906, 907, 925, 927, 928, 940, 948, 950, 954, 955, 958, 961, 964, 965, 966, 970, 978, 979, 1000, 1001, 1003, 1005, 1006, 1007, 1009, 1011], "return_dist": [51, 428, 806, 807, 808, 809, 810, 812, 814, 816, 817, 818, 957, 999], "________________________________________________________ward_tre": 51, "0min": 51, "905206": 51, "161245": 51, "849835": 51, "091621": 51, "f_regress": [51, 131, 383, 557, 560, 561, 563, 564, 565, 569, 570, 574, 998, 1002, 1009, 1012], "cach": [51, 63, 151, 240, 259, 260, 262, 267, 271, 333, 334, 341, 360, 406, 410, 415, 433, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 467, 473, 474, 763, 808, 810, 826, 827, 864, 868, 869, 870, 871, 872, 939, 957, 969, 975, 998, 1002, 1003, 1004, 1005, 1007, 1008, 1010, 1011], "selectpercentil": [51, 67, 223, 311, 383, 557, 560, 561, 563, 564, 568, 571, 996, 1001, 1011, 1012], "anova__percentil": [51, 311], "coef_selection_": 51, "_univariate_select": 51, "267703": 51, "026711": 51, "_____________________________________________________f_regress": 51, "447268": 51, "638768": 51, "rdbu_r": [51, 77, 97, 308], "temporari": [51, 66, 68, 333, 433, 652, 745, 864, 957, 998, 999, 1002, 1008, 1009], "worri": [51, 951, 980], "rmtree": [51, 68, 375], "ignore_error": 51, "plot_feature_agglomeration_vs_univariate_select": [51, 975], "huberregressor": [51, 138, 151, 160, 180, 186, 187, 188, 286, 489, 635, 636, 637, 643, 644, 950, 975, 1001, 1002, 1003, 1004], "perspect": [52, 57, 182, 333, 341, 358, 361, 495, 608, 866, 947], "conveni": [52, 186, 219, 338, 354, 358, 375, 378, 382, 384, 389, 408, 412, 414, 416, 418, 429, 454, 576, 641, 643, 664, 692, 749, 825, 826, 928, 944, 946, 950, 951, 961, 978, 988, 995], "ground_truth": [52, 266], "proba_map": 52, "class_index": 52, "ci": [52, 334, 349, 350, 354, 956, 1001, 1003], "preambl": 52, "parameters_str": 52, "greatest": [52, 364, 374, 833, 1003], "remark": [52, 80, 136, 335, 346, 964], "unlik": [52, 53, 107, 154, 155, 202, 204, 230, 279, 306, 346, 348, 352, 358, 360, 365, 376, 378, 379, 382, 411, 415, 500, 615, 616, 619, 620, 621, 647, 648, 749, 784, 806, 807, 846, 857, 869, 950, 953, 954, 961, 969, 995, 1001], "bi": [52, 382], "worth": [52, 110, 155, 182, 344, 346, 354, 978], "rememb": [52, 348, 351, 364, 382, 957, 961, 970], "hardli": [52, 572, 573], "must": [52, 154, 155, 157, 163, 166, 199, 200, 209, 220, 234, 265, 280, 285, 320, 329, 341, 345, 346, 347, 348, 350, 352, 354, 360, 361, 365, 370, 372, 374, 375, 378, 379, 381, 382, 383, 384, 385, 395, 403, 406, 409, 410, 411, 412, 414, 415, 416, 420, 422, 424, 426, 427, 429, 431, 432, 434, 439, 452, 473, 474, 477, 488, 496, 502, 503, 504, 505, 506, 508, 509, 512, 518, 519, 524, 525, 526, 527, 532, 533, 546, 547, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 575, 576, 582, 585, 592, 593, 594, 595, 597, 598, 603, 607, 608, 613, 614, 617, 623, 624, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 647, 650, 651, 652, 653, 654, 657, 658, 659, 660, 661, 664, 668, 671, 674, 699, 710, 728, 735, 738, 742, 745, 752, 756, 757, 758, 760, 761, 762, 763, 764, 766, 767, 768, 770, 772, 773, 775, 777, 778, 779, 781, 782, 784, 787, 790, 792, 793, 801, 802, 803, 804, 805, 808, 809, 810, 812, 814, 815, 816, 817, 818, 821, 822, 823, 824, 826, 829, 830, 831, 833, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 850, 866, 867, 868, 869, 870, 871, 872, 873, 879, 922, 929, 938, 940, 943, 944, 950, 951, 952, 954, 957, 958, 960, 961, 968, 969, 970, 979, 988, 995, 998, 1002, 1006, 1008, 1009, 1012], "great": [52, 153, 154, 180, 329, 346, 358, 379, 728, 974, 978, 995, 1002], "appropri": [52, 54, 94, 143, 154, 186, 216, 248, 324, 329, 344, 346, 348, 354, 360, 372, 373, 374, 378, 380, 381, 385, 409, 415, 422, 454, 455, 456, 461, 465, 466, 467, 469, 470, 475, 542, 547, 556, 557, 560, 561, 563, 564, 565, 637, 639, 652, 674, 808, 809, 810, 812, 814, 816, 817, 818, 938, 950, 953, 954, 964, 999, 1002, 1008, 1011, 1013], "immedi": [52, 346, 358, 763, 777, 787, 788, 1003], "hdb": [52, 411], "probabilities_": [52, 411], "capabl": [52, 53, 80, 143, 186, 206, 348, 360, 364, 955, 958, 969, 970, 978, 995, 1004, 1012], "constraint": [52, 54, 64, 87, 100, 151, 177, 186, 219, 220, 234, 275, 276, 277, 289, 346, 358, 379, 382, 452, 473, 474, 522, 523, 526, 527, 529, 530, 597, 600, 781, 782, 874, 875, 876, 877, 923, 943, 945, 950, 951, 968, 975, 999, 1002, 1003, 1006, 1008, 1010, 1012], "difficult": [52, 101, 154, 190, 219, 346, 354, 372, 379, 381, 518, 519, 524, 526, 527, 949, 951, 953, 957, 959, 961, 970, 978, 995, 1009], "reachabl": [52, 62, 411, 415, 420, 421, 422, 812, 908], "fragment": [52, 90], "sparser": [52, 161, 173, 379, 436, 443, 504, 508, 950, 957, 968], "Not": [52, 127, 155, 333, 358, 374, 392, 393, 396, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 434, 435, 436, 437, 438, 439, 440, 441, 496, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 528, 531, 534, 535, 546, 547, 548, 553, 554, 556, 592, 593, 594, 595, 642, 653, 654, 655, 656, 658, 758, 761, 762, 763, 766, 767, 777, 803, 806, 807, 810, 811, 812, 814, 818, 830, 838, 841, 842, 844, 847, 858, 859, 870, 954, 960, 973, 1004], "mention": [52, 80, 101, 200, 289, 329, 333, 346, 350, 351, 358, 374, 661, 858, 859, 943, 948, 950, 974, 977, 978, 988, 1002, 1003, 1004], "until": [52, 136, 190, 251, 290, 292, 351, 360, 361, 371, 374, 378, 383, 473, 474, 522, 523, 524, 525, 529, 530, 531, 558, 611, 612, 617, 618, 623, 624, 625, 626, 627, 628, 631, 632, 633, 636, 641, 642, 643, 659, 761, 762, 766, 767, 823, 824, 863, 866, 874, 875, 876, 877, 929, 943, 950, 951, 959, 967, 970, 988, 998, 1002, 1003, 1009], "tradeoff": [52, 104, 151, 214, 222, 232, 246, 247, 248, 249, 320, 333, 346, 354, 380, 480, 529, 663, 667, 691, 753, 792, 827, 846, 866, 951, 975, 986, 1004, 1007], "comfort": [52, 381], "epsilon": [52, 62, 164, 205, 215, 294, 315, 379, 411, 420, 608, 614, 632, 641, 643, 710, 823, 824, 867, 869, 872, 947, 950, 954, 958, 968, 969, 986, 995], "incap": 52, "intervent": 52, "inaccess": 52, "ultim": [52, 206, 347], "world": [52, 66, 70, 154, 186, 206, 219, 320, 333, 339, 343, 374, 379, 382, 919, 944, 954, 956, 972, 974, 978, 982, 990, 995], "whose": [52, 74, 75, 76, 136, 143, 182, 306, 341, 354, 355, 360, 372, 374, 376, 381, 383, 384, 387, 402, 403, 404, 413, 426, 434, 435, 436, 437, 438, 439, 440, 441, 442, 444, 445, 480, 499, 503, 505, 506, 509, 512, 514, 537, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 605, 636, 660, 683, 763, 770, 777, 791, 812, 831, 858, 859, 902, 933, 934, 948, 955, 959, 960, 961, 969, 998, 1003, 1004, 1006, 1009], "neighborhood": [52, 77, 95, 128, 150, 151, 202, 259, 260, 261, 262, 270, 271, 343, 360, 374, 379, 385, 409, 411, 415, 422, 467, 469, 480, 506, 514, 593, 596, 661, 792, 808, 809, 812, 814, 815, 816, 817, 818, 820, 826, 827, 846, 951, 960, 975, 976, 990, 1004], "recomput": [52, 53, 220, 222, 261, 288, 434, 439, 950, 966, 1000, 1011], "cut_dist": [52, 411], "plot_hdbscan": [52, 975], "johnson": [52, 151, 208, 279, 283, 338, 373, 454, 467, 842, 854, 858, 859, 860, 964, 971, 975, 990, 1003, 1009, 1011], "lindenstrauss": [52, 151, 208, 338, 373, 454, 467, 858, 859, 860, 971, 975, 990], "intract": [53, 379, 951, 959], "inferenti": 53, "meta": [53, 66, 100, 125, 151, 182, 216, 244, 248, 255, 258, 294, 295, 327, 329, 340, 344, 348, 350, 358, 360, 365, 370, 372, 383, 384, 394, 402, 408, 409, 412, 414, 430, 434, 435, 436, 437, 438, 439, 440, 441, 447, 448, 449, 461, 498, 499, 503, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 540, 546, 547, 553, 555, 556, 559, 562, 568, 575, 576, 600, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 655, 763, 764, 765, 770, 772, 779, 781, 789, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 811, 813, 816, 817, 823, 824, 826, 829, 831, 832, 833, 838, 845, 846, 861, 862, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 914, 943, 955, 974, 975, 976, 990, 995, 998, 999, 1000, 1001, 1002, 1003, 1006, 1007, 1009, 1010, 1012], "chirag": 53, "nagpal": 53, "christo": [53, 1004, 1005, 1007, 1009, 1012], "arida": [53, 1004, 1005, 1007, 1009, 1012], "baseestim": [53, 99, 216, 259, 346, 359, 360, 384, 389, 391, 392, 396, 397, 398, 566, 597, 598, 895, 995, 1002, 1005, 1007, 1009, 1010], "clone": [53, 114, 146, 155, 216, 277, 295, 329, 344, 346, 349, 350, 352, 354, 360, 372, 375, 384, 402, 430, 534, 535, 562, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 769, 785, 790, 793, 797, 800, 826, 827, 863, 974, 995, 1001, 1003, 1007, 1011, 1012], "metaestim": [53, 348, 360, 373, 863, 999, 1008, 1009, 1012], "available_if": [53, 360, 1008, 1009, 1012], "check_is_fit": [53, 99, 216, 349, 355, 360, 1005, 1008, 1009], "5000": [53, 168, 197, 198, 200, 290, 847], "_classifier_ha": 53, "deleg": [53, 352, 398, 399, 879, 999, 1001, 1007], "unfit": [53, 375, 399, 429, 534, 535, 567, 576, 1003, 1005, 1012], "classifier_": [53, 216], "inductivecluster": 53, "clusterer_": 53, "plot_scatt": 53, "cluster_label": [53, 57], "x_new": [53, 375, 379, 383, 398, 407, 408, 410, 412, 414, 496, 497, 498, 499, 500, 501, 502, 504, 506, 507, 508, 509, 514, 532, 534, 535, 547, 548, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 593, 595, 600, 603, 604, 605, 606, 607, 653, 654, 655, 656, 657, 815, 822, 829, 830, 831, 832, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 858, 859, 966, 979], "y_new": 53, "declar": [53, 203, 216, 329, 346, 347, 348, 352, 360, 408, 411, 412, 424, 436, 437, 443, 655, 659, 1002, 1006], "membership": [53, 361, 371, 373, 374, 476, 477, 478, 479, 480, 484, 487, 969], "inductive_learn": 53, "probable_clust": 53, "485": [53, 661, 975], "plot_inductive_clust": [53, 975], "__sklearn_is_fitted__": [53, 98, 151, 348, 388, 391, 938, 975, 1008, 1009], "develop": [53, 200, 237, 239, 256, 288, 294, 320, 333, 341, 345, 346, 352, 358, 360, 361, 363, 365, 368, 371, 373, 376, 377, 381, 382, 388, 391, 398, 458, 763, 938, 950, 954, 957, 970, 973, 974, 975, 977, 978, 986, 995, 1003, 1004, 1005, 1010, 1013], "meant": [54, 117, 136, 219, 341, 348, 355, 439, 458, 642, 812, 920, 921, 944, 958, 960, 964, 996], "unintuit": 54, "possibli": [54, 80, 136, 182, 197, 312, 321, 343, 345, 354, 368, 374, 381, 382, 416, 418, 554, 801, 802, 803, 804, 805, 871, 872, 874, 875, 876, 877, 943, 946, 951, 957, 964, 1010], "undesir": [54, 139, 384], "phil": [54, 1000, 1011], "roth": [54, 1000, 1003, 1010], "mr": [54, 293, 996, 999, 1009], "anisotrop": [54, 140, 384, 582, 584, 587], "ellipt": [54, 950], "60834549": 54, "63667341": 54, "40887718": 54, "85253229": 54, "x_vari": 54, "y_vari": 54, "unequ": [54, 1003], "x_filter": 54, "unevenli": [54, 182, 234], "y_filter": 54, "set_i": 54, "scenario": [54, 66, 117, 138, 159, 186, 242, 329, 353, 364, 378, 381, 502, 508, 510, 511, 948, 954, 964, 1005], "criteria": [54, 107, 151, 160, 171, 190, 230, 239, 354, 374, 383, 431, 447, 448, 449, 466, 522, 523, 524, 525, 529, 530, 611, 617, 621, 623, 624, 636, 657, 827, 846, 866, 867, 874, 875, 876, 877, 944, 953, 958, 968, 975, 987, 998, 1003, 1006], "knowledg": [54, 109, 117, 154, 199, 219, 239, 341, 346, 349, 352, 359, 360, 374, 378, 381, 385, 409, 476, 520, 521, 528, 685, 700, 704, 747, 795, 954, 955, 966, 988], "consequ": [54, 94, 200, 239, 240, 279, 305, 329, 372, 379, 381, 526, 527, 531, 620, 621, 944, 950, 954, 962, 970, 1004, 1006, 1011], "inertia": [54, 55, 58, 321, 374, 408, 412, 414, 417, 424, 425, 427, 428, 1006], "common_param": [54, 114, 117, 155, 215, 241, 242, 312], "unexpect": [54, 216, 329, 346, 351, 354, 364, 368, 500, 661, 954, 969, 997, 1003, 1004, 1007, 1009, 1011], "suffic": [54, 55, 348, 988], "propos": [54, 73, 74, 259, 341, 346, 348, 358, 360, 374, 376, 381, 386, 387, 415, 440, 500, 572, 573, 641, 642, 643, 823, 824, 950, 953, 957, 968, 1002], "inflat": [54, 153, 154, 156, 374, 378, 954, 964], "allevi": [54, 117, 161, 166, 374, 956], "fastest": [54, 237, 322, 412, 635, 637, 639, 652, 902, 903, 953], "restart": [54, 349, 354, 412, 496, 502, 503, 508, 510, 511, 575, 576, 951, 1008], "212": [54, 113, 136, 244, 300, 343, 434, 465, 960, 975, 986], "plot_kmeans_assumpt": [54, 975], "posterior": [54, 137, 138, 139, 144, 151, 161, 239, 379, 384, 514, 515, 517, 575, 576, 578, 579, 580, 584, 587, 588, 592, 609, 610, 673, 761, 948, 973, 975, 1001, 1004], "judg": [55, 188, 374, 983], "definit": [55, 76, 170, 182, 246, 259, 321, 346, 347, 348, 360, 363, 374, 376, 377, 379, 492, 494, 500, 576, 593, 657, 673, 683, 692, 722, 761, 762, 943, 946, 948, 950, 952, 954, 957, 968, 972, 990, 999, 1003, 1010], "shorthand": [55, 360, 375, 432, 526, 527, 827, 828, 998], "homo": 55, "compl": 55, "mea": 55, "context": [55, 223, 259, 333, 334, 340, 345, 347, 359, 360, 374, 375, 380, 381, 382, 384, 385, 402, 409, 411, 413, 415, 417, 422, 423, 426, 429, 432, 433, 437, 496, 500, 501, 502, 504, 507, 508, 509, 510, 511, 513, 520, 521, 522, 523, 528, 529, 530, 531, 532, 533, 534, 535, 559, 567, 572, 573, 575, 591, 592, 595, 597, 599, 604, 612, 616, 618, 620, 622, 623, 624, 626, 628, 630, 631, 633, 641, 644, 653, 654, 655, 656, 657, 658, 659, 738, 742, 745, 763, 766, 767, 769, 777, 785, 787, 788, 789, 790, 791, 793, 794, 795, 796, 798, 799, 808, 809, 812, 814, 816, 817, 819, 820, 825, 828, 861, 862, 864, 866, 867, 868, 869, 870, 871, 872, 922, 944, 950, 954, 960, 964, 968, 974, 977, 978, 986, 995, 1002, 1003, 1008, 1011], "n_digit": 55, "1797": [55, 82, 237, 277, 297, 343, 386, 410, 467, 497, 498, 499, 500, 564, 565, 653, 654, 655, 656, 658, 957, 985], "bench_k_mean": 55, "tabl": [55, 200, 239, 346, 347, 350, 355, 374, 382, 547, 623, 645, 763, 777, 803, 919, 950, 954, 955, 960, 973, 996], "inertia_": [55, 58, 61, 408, 412, 414, 1006], "clustering_metr": 55, "sample_s": [55, 214, 321, 757], "formatter_result": 55, "determinist": [55, 114, 334, 342, 348, 360, 374, 408, 412, 414, 416, 417, 418, 423, 424, 427, 516, 524, 525, 529, 530, 548, 549, 656, 660, 774, 775, 822, 874, 875, 946, 950, 996, 999, 1001, 1003, 1004, 1007, 1010, 1011], "ttime": 55, "tinertia": 55, "thomo": 55, "tcompl": 55, "tv": 55, "tari": 55, "tami": 55, "tsilhouett": 55, "__________________________________________________________________________________": 55, "035": 55, "69545": 55, "598": [55, 94, 139, 248, 506, 975], "645": 55, "621": [55, 733], "469": 55, "617": [55, 242, 374, 733], "152": [55, 352], "043": [55, 295, 352, 975], "69735": 55, "681": [55, 352], "723": [55, 215], "701": 55, "574": [55, 499, 506], "698": 55, "72686": 55, "636": [55, 166, 352], "658": [55, 80], "647": [55, 155, 213, 322], "521": 55, "643": [55, 237], "reduced_data": 55, "mesh": [55, 110, 120, 140, 214, 267, 274, 281, 302, 304], "white": [55, 57, 87, 143, 154, 196, 202, 265, 277, 281, 302, 307, 379, 382, 590, 970, 995, 998, 1001, 1005, 1009], "749": [55, 975], "plot_kmeans_digit": [55, 975], "kmeans_plusplu": [56, 374, 1007, 1012], "4000": [56, 116, 228], "centers_init": 56, "4eacc5": [56, 61], "ff9c34": [56, 61], "4e9a06": [56, 61], "cluster_data": 56, "plot_kmeans_plusplu": [56, 975], "wrong": [57, 182, 265, 320, 329, 343, 346, 348, 382, 469, 690, 720, 757, 954, 960, 969, 998, 1000, 1002, 1003, 1004, 1005, 1008, 1012], "ambival": 57, "thick": [57, 269, 957], "ow": 57, "7049787496083262": 57, "5882004012129721": 57, "6505186632729437": 57, "561464362648773": 57, "4857596147013469": 57, "silhouette_sampl": [57, 757, 999, 1001, 1003, 1011], "distinct": [57, 239, 299, 320, 322, 341, 348, 351, 360, 361, 378, 381, 382, 554, 764, 773, 781, 840, 841, 861, 862, 943, 950, 957, 960, 988, 1003], "center_box": [57, 477], "range_n_clust": 57, "set_size_inch": [57, 127, 220], "insert": [57, 154, 182, 358, 374, 452, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 881], "blank": [57, 351, 944, 970], "demarc": 57, "silhouette_avg": 57, "sample_silhouette_valu": 57, "y_lower": [57, 114], "aggreg": [57, 105, 200, 242, 248, 292, 294, 374, 381, 383, 499, 520, 521, 559, 686, 687, 692, 709, 710, 712, 714, 715, 717, 749, 754, 755, 955, 957, 964, 1011], "ith_cluster_silhouette_valu": 57, "size_cluster_i": 57, "y_upper": [57, 114], "fill_betweenx": 57, "2nd": [57, 83, 146, 284, 374, 385, 409, 495, 964, 1010], "lw": [57, 73, 74, 76, 91, 95, 96, 176, 183, 185, 188, 192, 199, 205, 228, 234, 249, 264, 279, 299, 315], "fontweight": [57, 177], "086": [57, 975], "plot_kmeans_silhouette_analysi": [57, 975], "reach": [58, 107, 112, 136, 182, 184, 198, 200, 241, 292, 308, 328, 351, 361, 364, 374, 379, 383, 415, 422, 473, 474, 558, 559, 592, 609, 610, 611, 612, 617, 618, 619, 620, 621, 625, 626, 627, 628, 631, 632, 633, 641, 642, 643, 644, 646, 647, 648, 649, 693, 694, 747, 761, 762, 823, 824, 863, 943, 954, 958, 968, 970, 978, 1006, 1010, 1011, 1012], "optimum": [58, 144, 154, 159, 252, 379, 437, 950, 953], "stuck": [58, 657, 951], "check_random_st": [58, 198, 204, 212, 218, 348, 355, 360], "trade": [58, 73, 107, 117, 156, 186, 238, 240, 241, 308, 320, 360, 373, 374, 376, 518, 519, 524, 525, 599, 621, 657, 763, 766, 767, 777, 789, 951, 958, 966, 968, 969, 974], "n_init_rang": 58, "n_samples_per_cent": 58, "n_clusters_tru": 58, "init_s": [58, 321, 414], "factori": [58, 239, 382, 924, 954], "empti": [58, 66, 96, 194, 300, 333, 341, 348, 350, 374, 386, 448, 498, 526, 527, 596, 774, 831, 871, 873, 881, 886, 887, 893, 913, 914, 944, 969, 986, 997, 999, 1003, 1004, 1006, 1007, 1009, 1010, 1011], "run_id": 58, "km": [58, 292, 321], "fmt": [58, 193], "my_memb": [58, 60, 61], "376": [58, 962, 975], "plot_kmeans_stability_low_dim_dens": [58, 975], "globular": [59, 374], "cleanli": [59, 995], "882": [59, 239, 975], "plot_linkage_comparison": [59, 975], "dorin": [60, 413], "comaniciu": [60, 374, 413], "meer": [60, 374, 413], "ieee": [60, 74, 76, 343, 374, 376, 383, 387, 413, 440, 499, 528, 629, 650, 651, 689, 733, 950, 954, 960], "transact": [60, 343, 374, 376, 385, 387, 409, 413, 440, 499, 503, 505, 512, 528, 609, 629, 650, 651, 689, 690, 720, 733, 950, 954], "intellig": [60, 136, 320, 343, 374, 381, 413, 520, 521, 603, 661, 689, 796, 823, 824, 955, 966, 974, 978], "2002": [60, 372, 374, 381, 402, 413, 558, 559, 690, 720, 813, 861, 946, 954], "603": [60, 240, 413], "619": [60, 282, 413, 975], "labels_uniqu": 60, "386": [60, 70, 320, 842, 975], "plot_mean_shift": [60, 426, 975], "k_mean": [61, 355, 360, 987, 1003, 1011], "t_batch": 61, "pairwis": [61, 153, 154, 213, 219, 248, 288, 292, 293, 320, 333, 338, 348, 360, 374, 379, 384, 411, 419, 423, 426, 427, 433, 452, 473, 474, 500, 526, 527, 585, 603, 604, 605, 606, 607, 608, 653, 655, 657, 659, 661, 664, 742, 743, 744, 745, 752, 756, 757, 794, 810, 814, 818, 832, 864, 946, 954, 957, 966, 969, 990, 995, 996, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1009, 1010, 1011, 1012], "k_means_cluster_cent": 61, "mbk_means_cluster_cent": 61, "k_means_label": 61, "mbk_means_label": 61, "ninertia": 61, "bbbbbb": 61, "168": [61, 236, 975, 995], "plot_mini_batch_kmean": [61, 975], "shane": [62, 1004, 1007, 1010], "grigsbi": 62, "refug": 62, "rocktalu": 62, "cluster_optics_dbscan": [62, 374], "n_points_per_clust": 62, "c1": [62, 111, 146, 212, 285], "c2": [62, 111, 146, 212, 285], "c3": [62, 111, 285], "c4": [62, 285, 976, 990], "c5": [62, 976, 990], "c6": 62, "clust": [62, 415, 422], "labels_050": 62, "reachability_": [62, 374, 415, 420, 421, 422], "core_dist": [62, 420, 421, 422], "core_distances_": [62, 415, 420, 422], "ordering_": [62, 374, 415, 420, 421, 422], "labels_200": 62, "ax3": [62, 300], "ax4": 62, "klass": 62, "xk": [62, 515], "rk": 62, "full_lik": 62, "noptic": 62, "ndbscan": 62, "579": [62, 240, 489, 975], "plot_opt": [62, 975], "tri": [63, 95, 202, 268, 312, 334, 348, 351, 358, 361, 372, 414, 416, 418, 596, 597, 598, 635, 657, 663, 665, 667, 777, 922, 959, 979, 997, 1003, 1007], "intens": [63, 90, 259, 343, 347, 358, 360, 379, 408, 412, 424, 572, 573, 597, 598, 765, 943, 961, 978, 1003], "weakli": 63, "outlin": [63, 110, 346, 348, 360, 361, 363, 374, 943, 990], "center1": 63, "center2": 63, "center3": 63, "58": [63, 74, 343, 376, 387, 440, 572, 728, 964, 984], "center4": 63, "radius1": 63, "radius2": 63, "radius3": 63, "radius4": 63, "circle1": 63, "circle2": 63, "circle3": 63, "circle4": 63, "label_im": 63, "cleaner": 63, "504": [63, 301, 975], "plot_segmentation_toi": [63, 975], "swiss": [64, 151, 201, 202, 207, 374, 495, 657, 658, 975, 1009], "sole": [64, 358, 374], "oppos": [64, 216, 350, 370, 374, 862, 957, 969, 979, 995, 1013], "make_swiss_rol": [64, 206, 1009], "thinner": 64, "fig1": 64, "set_posit": [64, 93, 193, 279], "jet": 64, "fig2": 64, "121": [64, 103, 150, 166, 214, 583, 634, 964], "354": [64, 321, 975], "plot_ward_structured_vs_unstructur": [64, 975], "chain": [65, 71, 101, 128, 151, 212, 247, 250, 256, 257, 259, 262, 277, 329, 338, 358, 360, 373, 384, 461, 467, 506, 576, 592, 623, 702, 763, 792, 795, 797, 798, 799, 800, 826, 827, 846, 943, 944, 955, 959, 971, 973, 975, 978, 988, 990], "raster": 66, "serv": [66, 91, 101, 144, 242, 312, 375, 516, 603, 946, 1009], "matt": [66, 998, 999, 1000, 1005, 1006, 1010, 1011], "terri": [66, 999], "compris": [66, 114, 237, 320, 321, 322, 341, 358, 379, 381, 480, 770, 951], "subject": [66, 119, 231, 242, 320, 341, 346, 348, 350, 358, 360, 361, 372, 373, 376, 378, 379, 460, 623, 624, 650, 829, 924, 945, 950, 969, 972, 988, 1004, 1005, 1008, 1010], "mccall": 66, "mksol": 66, "dseg": 66, "ti": [66, 182, 227, 230, 237, 317, 333, 372, 374, 564, 565, 600, 685, 690, 720, 761, 762, 868, 871, 874, 953, 954, 969, 996, 998, 999, 1003, 1005, 1009, 1010, 1011], "fred": [66, 995, 1008], "575": [66, 182], "3539": 66, "1993apr6": 66, "131900": 66, "8407": 66, "perhap": [66, 110, 343, 345, 354, 360, 380, 974], "militari": 66, "slug": 66, "school": [66, 343, 374, 752, 954], "physic": [66, 107, 334, 470, 919, 950, 1011], "teacher": 66, "ex": [66, 344, 347, 364, 999, 1000], "fighter": 66, "jock": 66, "wasn": [66, 216, 1004], "poundal": 66, "flink": 66, "funni": 66, "propon": 66, "si": 66, "insist": 66, "safeti": [66, 358, 375, 920, 974, 1005], "ball": [66, 264, 272, 374, 380, 413, 657, 806, 807, 811, 814, 816, 817, 818, 995, 997, 1000, 1006], "mari": [66, 1003, 1004, 1005, 1006, 1009], "shafer": 66, "nasa": [66, 320, 321, 343], "am": [66, 71, 75, 122, 155, 320, 351, 376, 439, 458, 1002], "dryden": 66, "stateless": [66, 321, 335, 348, 360, 382, 547, 548, 554, 603, 829, 830, 838, 964, 1011], "subject_body_extractor": 66, "subject_body_transform": 66, "sentenc": [66, 320, 322, 341, 361, 382], "text_stat": 66, "num_sent": 66, "text_stats_transform": 66, "subjectbodyextractor": 66, "subjectbodi": 66, "union": [66, 154, 375, 702, 718, 825, 1002], "body_bow": 66, "pull": [66, 291, 334, 344, 349, 360, 361, 977, 1005], "body_stat": 66, "transformer_weight": [66, 429, 432, 825, 1000, 1007], "396": [66, 136, 343, 988], "471": [66, 343, 975], "plot_column_transform": [66, 975], "imput": [67, 117, 122, 156, 211, 221, 223, 289, 292, 338, 350, 359, 360, 365, 375, 381, 455, 466, 530, 545, 604, 610, 637, 788, 809, 827, 885, 887, 973, 974, 975, 990, 997, 998], "miss": [67, 122, 136, 156, 211, 221, 239, 259, 289, 293, 329, 333, 338, 341, 343, 345, 346, 348, 350, 351, 360, 370, 373, 374, 375, 376, 411, 437, 455, 461, 463, 466, 522, 523, 526, 527, 529, 530, 531, 592, 593, 594, 595, 604, 610, 637, 655, 659, 691, 733, 788, 809, 827, 835, 836, 840, 842, 843, 846, 847, 851, 854, 855, 857, 874, 875, 876, 877, 950, 951, 954, 973, 974, 975, 976, 978, 990, 997, 999, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "chi": [67, 75, 101, 283, 338, 383, 484, 557, 560, 561, 563, 564, 565, 569, 570, 571, 574, 603, 604, 605, 606, 607, 722, 723, 990, 995, 1000, 1001], "dispatch": [67, 360, 370, 433, 763, 777, 787, 788, 789, 864, 920, 921, 983, 990, 1010], "processor": [67, 122, 154, 385, 402, 409, 411, 413, 415, 417, 422, 423, 426, 429, 432, 437, 496, 500, 501, 502, 504, 507, 508, 510, 511, 513, 520, 521, 522, 523, 528, 529, 530, 531, 532, 533, 534, 535, 559, 567, 572, 573, 575, 597, 599, 604, 612, 616, 618, 620, 622, 623, 624, 626, 628, 630, 631, 633, 641, 644, 653, 654, 655, 656, 657, 658, 659, 738, 742, 745, 763, 766, 767, 769, 777, 785, 787, 788, 789, 790, 791, 793, 794, 795, 796, 808, 809, 812, 814, 816, 817, 819, 820, 825, 828, 861, 862], "pedro": [67, 996, 998, 999, 1003], "chi2": [67, 382, 383, 417, 546, 557, 560, 561, 563, 564, 565, 570, 571, 574, 585, 603, 604, 605, 606, 607, 608, 723, 729, 738, 995, 1002, 1009], "simpleimput": [67, 122, 149, 150, 156, 211, 221, 223, 289, 292, 329, 360, 592, 593, 594, 944, 964, 1003, 1004, 1006, 1007, 1009, 1010, 1011, 1012, 1013], "40945": 67, "titan": [67, 156, 223, 288, 292, 293, 962], "surviv": [67, 156, 943, 973], "ag": [67, 136, 154, 156, 170, 171, 182, 200, 220, 221, 223, 279, 291, 292, 293, 295, 341, 343, 461, 978, 979, 986], "fare": [67, 156, 223, 292, 293, 999, 1000], "embark": [67, 156, 223, 288, 292, 293], "sex": [67, 136, 154, 156, 170, 171, 223, 293, 295, 343, 461, 962, 986], "femal": [67, 154, 293, 351, 839, 840, 964], "male": [67, 154, 293, 351, 839, 840, 964], "pclass": [67, 156, 223, 288, 292, 293], "numeric_featur": [67, 292], "numeric_transform": [67, 292], "categorical_transform": 67, "preprocessor": [67, 122, 154, 182, 211, 219, 221, 285, 289, 291, 292, 293, 295, 375, 382, 553, 554, 556, 973, 988, 995, 998, 1003, 1005], "798": [67, 381], "lt": [67, 68, 106, 122, 154, 230, 237, 251, 344, 346], "0x7f7aa23ee790": 67, "pipelineifittedpipelin": [67, 106, 133, 154, 156, 210, 220, 223, 246, 292], "columntransformercolumntransform": [67, 122, 154, 156, 211, 221, 285, 289, 292], "simpleimputersimpleimput": [67, 122, 156, 211, 221, 289, 292], "standardscalerstandardscal": [67, 122, 154, 210, 211, 220, 221, 223, 246, 289, 292], "onehotencoderonehotencod": [67, 106, 122, 154, 155, 211, 221, 289, 292], "selectpercentileselectpercentil": [67, 223], "logisticregressionlogisticregress": [67, 106, 210, 211, 221, 223, 289, 292], "make_column_selector": [67, 111, 122, 219, 375, 429, 432, 1005], "subset_featur": 67, "Then": [67, 102, 106, 109, 117, 122, 125, 133, 154, 159, 166, 170, 182, 186, 206, 210, 216, 222, 241, 242, 256, 320, 340, 350, 352, 354, 364, 371, 372, 374, 377, 379, 382, 383, 535, 558, 684, 720, 763, 777, 866, 867, 944, 953, 954, 960, 969, 988, 1004], "1047": 67, "1118": 67, "684": [67, 75], "1045": 67, "841": 67, "1046": [67, 230], "kb": [67, 154, 155], "numerical_transform": 67, "yourself": [67, 344, 345, 346, 347, 351, 354, 958], "dtype_exclud": [67, 431], "dtype_includ": [67, 111, 122, 219, 375, 431], "_column_transform": [67, 122], "0x7f7a5b1c6280": 67, "0x7f7a5b1c60d0": 67, "exactli": [67, 101, 153, 161, 166, 175, 182, 186, 231, 247, 280, 316, 320, 346, 348, 371, 374, 378, 379, 382, 387, 411, 418, 434, 435, 436, 437, 438, 439, 440, 441, 442, 444, 445, 480, 491, 555, 556, 580, 641, 643, 668, 670, 727, 764, 781, 787, 946, 950, 951, 952, 954, 955, 970, 987, 988, 995, 1001, 1002, 1008], "hyperparamet": [67, 69, 70, 117, 138, 139, 145, 146, 149, 151, 155, 161, 166, 171, 196, 200, 209, 219, 232, 237, 242, 244, 250, 251, 261, 277, 320, 348, 360, 374, 378, 379, 381, 384, 467, 500, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 608, 618, 624, 630, 638, 641, 692, 749, 763, 777, 871, 943, 948, 949, 950, 953, 954, 956, 958, 960, 968, 974, 975, 988, 997, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1011], "cartesian": [67, 371, 598, 957, 1010], "preprocessor__num__imputer__strategi": 67, "preprocessor__cat__selector__percentil": 67, "classifier__c": 67, "search_cv": 67, "param_distribut": [67, 138, 240, 247, 251, 290, 359, 767, 775, 777, 1011], "randomizedsearchcvinot": 67, "fittedrandomizedsearchcv": 67, "pipelinepipelin": [67, 68, 221], "trigger": [67, 68, 350, 360, 375, 823, 824, 826, 827, 886, 887, 903, 950, 988, 1003, 1009, 1010], "best_params_": [67, 69, 114, 138, 215, 230, 237, 243, 290, 308, 359, 763, 766, 767, 777, 943, 984, 988], "best_score_": [67, 69, 215, 240, 243, 244, 308, 638, 640, 763, 766, 767, 777, 983, 984, 988, 1006], "cv_results_": [67, 68, 69, 77, 107, 127, 135, 230, 237, 238, 239, 240, 243, 247, 250, 251, 261, 308, 437, 559, 763, 766, 767, 777, 988, 1001, 1005, 1007, 1008, 1013], "sort_valu": [67, 156, 157, 223, 230, 239, 250, 285, 286], "mean_test_scor": [67, 68, 69, 77, 107, 127, 135, 230, 238, 239, 240, 247, 250, 251, 261, 308, 437, 559, 763, 777, 943, 1001, 1008], "std_test_scor": [67, 69, 107, 127, 135, 238, 239, 240, 247, 261, 437, 559, 763, 777, 1001, 1008], "param_preprocessor__num__imputer__strategi": 67, "param_preprocessor__cat__selector__percentil": 67, "param_classifier__c": 67, "786015": 67, "031020": 67, "785063": 67, "030498": 67, "783149": 67, "030462": 67, "087": [67, 320, 975], "plot_column_transformer_mixed_typ": [67, 975], "instanti": [68, 141, 291, 349, 365, 381, 415, 532, 533, 567, 595, 763, 766, 767, 769, 777, 785, 787, 788, 789, 790, 791, 793, 893, 960, 985, 995, 1003, 1007, 1011], "argument": [68, 183, 210, 213, 216, 334, 340, 341, 346, 347, 349, 351, 352, 354, 355, 358, 360, 374, 375, 378, 379, 381, 383, 385, 386, 388, 392, 396, 403, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 419, 422, 424, 426, 428, 433, 434, 458, 461, 468, 473, 498, 500, 501, 503, 505, 516, 524, 525, 528, 532, 533, 534, 535, 542, 546, 547, 553, 554, 556, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 596, 604, 608, 611, 612, 615, 616, 617, 618, 619, 620, 621, 625, 626, 627, 628, 631, 633, 641, 642, 646, 649, 653, 657, 661, 663, 664, 665, 666, 667, 679, 684, 699, 706, 727, 743, 744, 769, 785, 787, 788, 789, 794, 795, 798, 808, 809, 810, 812, 814, 815, 816, 817, 818, 819, 820, 823, 826, 830, 864, 870, 880, 884, 893, 898, 921, 922, 923, 924, 938, 943, 946, 950, 951, 952, 954, 957, 961, 962, 969, 970, 979, 983, 995, 998, 999, 1001, 1002, 1003, 1004, 1005, 1007, 1009, 1010, 1011, 1012, 1013], "memoiz": [68, 341, 360], "costli": [68, 73, 108, 149, 240, 317, 334, 347, 352, 374, 408, 592, 771, 773, 858, 859, 903, 954, 957, 966, 974], "mcgibbon": [68, 997, 998, 1001], "selectkbest": [68, 70, 132, 133, 292, 329, 346, 365, 375, 383, 546, 557, 560, 561, 563, 565, 571, 943, 996, 1001, 1011, 1012], "mutual_info_classif": [68, 383, 557, 560, 561, 564, 565, 1001, 1007, 1010, 1013], "pipe": [68, 69, 111, 221, 238, 285, 290, 291, 359, 365, 375, 382, 555, 826, 851, 852, 854, 855, 856, 857, 943, 964, 984], "reduce_dim": [68, 221, 238, 375], "popul": [68, 73, 75, 117, 154, 182, 219, 242, 279, 341, 355, 360, 376, 405, 455, 677, 683, 808, 809, 810, 812, 814, 816, 817, 818, 923, 954, 960, 964, 970], "n_features_opt": 68, "c_option": 68, "iterated_pow": [68, 497, 500, 506, 1001], "reduce_dim__n_compon": [68, 238, 375], "classify__c": 68, "reduce_dim__k": 68, "reducer_label": 68, "kbest": [68, 557], "0x7f7aa2979ca0": 68, "gridsearchcvifittedgridsearchcv": [68, 230, 237, 239], "minmaxscalerminmaxscal": 68, "passthroughpassthrough": [68, 154, 155, 285], "linearsvclinearsvc": [68, 133, 246], "mean_scor": [68, 248, 251, 321, 1008], "alphabet": [68, 360, 705], "eas": [68, 157, 230, 284, 346, 349, 352, 950, 968, 973, 974, 978, 1006, 1007, 1009], "sometim": [68, 122, 153, 239, 276, 321, 329, 334, 335, 346, 348, 350, 352, 359, 360, 374, 376, 379, 381, 382, 414, 499, 500, 503, 505, 506, 831, 832, 833, 881, 949, 950, 951, 954, 959, 964, 965, 969, 979, 987, 992, 996, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1011], "worthwhil": [68, 360], "slower": [68, 90, 107, 111, 149, 215, 248, 322, 360, 381, 382, 383, 411, 416, 418, 503, 505, 512, 520, 521, 522, 523, 528, 529, 530, 531, 553, 554, 556, 596, 597, 598, 608, 624, 637, 639, 652, 657, 669, 794, 798, 799, 947, 951, 952, 953, 955, 957, 970, 988, 999, 1006], "constructor": [68, 212, 334, 348, 360, 373, 375, 382, 429, 432, 514, 515, 520, 532, 533, 534, 535, 546, 547, 553, 554, 562, 633, 641, 642, 808, 809, 810, 812, 813, 814, 816, 817, 818, 825, 826, 827, 828, 922, 943, 955, 964, 969, 974, 979, 995, 996, 998, 999, 1000, 1002, 1005, 1006, 1007, 1008, 1009, 1010, 1012], "folder": [68, 341, 344, 346, 350, 354, 364, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 468, 957, 988], "cached_pip": [68, 375], "delet": [68, 298, 300, 350, 351, 434, 439, 451], "exit": [68, 259, 350, 354, 433], "benefici": [68, 70, 73, 87, 120, 279, 280, 344, 951], "370": [68, 180, 975], "plot_compare_reduct": [68, 975], "increment": [68, 86, 92, 93, 94, 95, 151, 242, 350, 352, 407, 412, 428, 469, 498, 499, 500, 501, 504, 506, 509, 567, 611, 623, 631, 769, 790, 798, 799, 801, 802, 803, 804, 805, 835, 836, 846, 866, 867, 929, 950, 956, 975, 998, 999], "874": [69, 752, 753, 954], "logistic__c": [69, 984], "54434690031882": 69, "pca__n_compon": [69, 984], "polar": [69, 364, 367, 398, 407, 408, 410, 412, 414, 429, 433, 447, 448, 449, 450, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 514, 526, 527, 531, 532, 533, 534, 535, 546, 547, 548, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 592, 593, 594, 595, 600, 603, 604, 605, 606, 607, 653, 654, 657, 810, 815, 818, 822, 826, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 858, 859, 864, 988, 1012], "pl": [69, 80, 186, 295, 343, 377, 447, 448, 449, 450, 1000], "truncat": [69, 120, 203, 355, 499, 500, 504, 505, 506, 509, 641, 643, 690, 720, 761, 815, 879, 903, 943, 953, 954, 968, 984, 988, 989, 990, 1001, 1003], "x_digit": [69, 128, 275, 375, 983, 984, 986], "y_digit": [69, 128, 275, 375, 983, 984, 986], "__": [69, 240, 360, 375, 388, 402, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 430, 434, 435, 436, 437, 438, 439, 440, 441, 447, 448, 449, 450, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 546, 547, 548, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 600, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 653, 654, 655, 656, 657, 761, 762, 763, 766, 767, 777, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 822, 823, 824, 825, 826, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 858, 859, 861, 862, 863, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 943, 984, 1003, 1004], "spectrum": [69, 489, 509, 660, 903, 978, 984, 1003], "ax0": [69, 71, 182, 212, 321, 984], "n_components_": [69, 94, 360, 406, 410, 499, 503, 504, 505, 506, 507, 508, 858, 859, 984, 1004, 1006], "explained_variance_ratio_": [69, 95, 321, 379, 499, 506, 509, 514, 984, 998, 1001], "named_step": [69, 80, 375, 558, 559, 562, 826, 827, 866, 867, 950, 984, 1002, 1004], "components_col": 69, "param_pca__n_compon": 69, "is_max_test_scor": 69, "best_clf": 69, "lazyfram": 69, "yerr": [69, 74, 76, 108, 111, 135, 261, 285, 300], "val": [69, 194, 239, 905], "536": [69, 143, 259, 975], "plot_digits_pip": [69, 975], "boltzmann": [69, 79, 128, 151, 172, 197, 273, 467, 623, 678, 792, 822, 823, 824, 826, 852, 975, 989, 990, 997], "candid": [70, 230, 237, 240, 247, 290, 335, 346, 350, 374, 381, 413, 415, 763, 766, 767, 775, 777, 950, 957, 970, 1001], "features__pca__n_compon": 70, "features__univ_select__k": 70, "svm__c": 70, "867": [70, 302, 975], "967": [70, 954, 958], "transformer_list": [70, 375, 825, 828, 944, 1006, 1007], "univ_select": 70, "amuel": [70, 105, 173, 214, 299, 316], "ai": [70, 105, 173, 214, 299, 316, 378], "bonn": [70, 105, 173, 214, 299, 316], "mayb": [70, 276, 360, 382, 969, 974], "combined_featur": 70, "x_featur": [70, 605, 606, 607, 946], "grid_search": [70, 107, 221, 230, 237, 247, 295, 375, 922, 997, 998, 999, 1000, 1001, 1002], "plot_feature_union": [70, 975], "overview": [71, 151, 244, 255, 258, 347, 349, 359, 360, 461, 698, 707, 763, 779, 789, 794, 795, 796, 874, 956, 968, 975, 989, 990], "transformedtargetregressor": [71, 154, 182, 358, 365, 375, 558, 559, 562, 1003, 1005, 1008, 1013], "hous": [71, 112, 122, 149, 150, 279, 290, 339, 455, 990], "translat": [71, 348, 384, 492, 579, 835, 836, 852, 951, 954, 978], "lowest": [71, 80, 155, 166, 230, 340, 374, 378, 600, 602, 766, 767, 770, 873, 874, 951, 954, 970, 1010], "logarithm": [71, 122, 154, 186, 213, 240, 308, 360, 383, 425, 555, 623, 624, 641, 669, 690, 705, 715, 719, 720, 721, 755, 769, 797, 806, 807, 901, 970, 983, 1002], "log1p": [71, 212, 830, 954, 964], "expm1": 71, "y_tran": 71, "meda": [71, 154, 954], "median_absolute_error": [71, 154, 954, 999, 1005, 1007], "r2_score": [71, 153, 166, 177, 178, 381, 397, 430, 447, 448, 449, 519, 521, 523, 525, 527, 530, 533, 535, 576, 600, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 625, 626, 627, 628, 629, 630, 632, 635, 637, 638, 643, 644, 688, 692, 799, 800, 809, 817, 824, 867, 869, 872, 875, 877, 943, 954, 996, 998, 1004, 1008, 1009], "compute_scor": [71, 94, 161, 162, 609, 610, 1004], "r2": [71, 102, 107, 122, 153, 155, 177, 215, 348, 375, 381, 519, 535, 638, 789, 824, 954, 962, 1004], "ridge_cv": 71, "y_pred_ridg": 71, "ridge_cv_with_trans_target": 71, "inverse_func": [71, 154, 375, 430, 830, 964, 1003, 1013], "y_pred_ridge_with_trans_target": 71, "sell": 71, "quantile_transform": [71, 843, 854, 964, 1002, 1003, 1004, 1013], "house_pric": [71, 122], "select_dtyp": [71, 111, 293, 431], "inf": [71, 141, 269, 355, 374, 384, 411, 415, 420, 421, 422, 426, 436, 437, 443, 518, 519, 524, 525, 558, 559, 562, 571, 572, 573, 584, 592, 600, 602, 613, 614, 615, 617, 634, 636, 637, 641, 642, 643, 645, 652, 692, 694, 710, 742, 749, 753, 822, 831, 838, 884, 885, 886, 887, 901, 954, 964, 1002, 1004, 1005, 1006, 1007, 1009, 1010, 1011], "lotfrontag": 71, "garageyrblt": 71, "masvnrarea": [71, 122], "to_fram": 71, "n_quantil": [71, 155, 283, 843, 855, 1004], "output_distribut": [71, 279, 283, 375, 842, 843, 854, 855, 964], "squeez": [71, 144, 145, 219, 259, 279, 987], "quantiletransform": [71, 155, 283, 375, 430, 842, 855, 944, 964, 1002, 1003, 1004, 1005, 1006, 1011, 1013], "weaker": [71, 526, 527], "residu": [71, 178, 184, 235, 397, 430, 447, 448, 449, 517, 519, 521, 523, 525, 527, 530, 533, 535, 576, 600, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 625, 626, 627, 628, 629, 630, 632, 635, 636, 637, 638, 639, 643, 644, 650, 651, 666, 708, 749, 799, 800, 809, 817, 824, 867, 869, 872, 875, 877, 950, 954, 986, 1007, 1008, 1010], "smile": [71, 341, 1009], "301": [71, 375, 968, 975], "plot_transformed_target": [71, 975], "predictor": [71, 100, 111, 125, 149, 151, 182, 200, 211, 348, 359, 360, 375, 377, 378, 381, 384, 431, 432, 447, 448, 449, 461, 481, 482, 483, 520, 521, 527, 530, 533, 567, 575, 595, 597, 598, 613, 618, 622, 634, 638, 645, 666, 787, 789, 798, 799, 826, 827, 839, 840, 846, 928, 950, 955, 975, 996, 1002, 1005], "stack": [71, 100, 111, 125, 149, 151, 211, 264, 328, 345, 354, 358, 360, 373, 380, 429, 431, 432, 461, 480, 527, 530, 532, 533, 577, 592, 593, 595, 618, 638, 666, 787, 789, 827, 831, 839, 840, 846, 928, 944, 973, 974, 975, 976, 977, 990, 995, 998, 1002, 1003, 1004, 1005, 1006], "mahalanobi": [72, 76, 151, 185, 374, 376, 415, 422, 434, 435, 436, 437, 438, 439, 440, 441, 664, 742, 743, 744, 813, 948, 957, 960, 975, 1003, 1006, 1007], "empiricalcovari": [73, 75, 76, 376, 434, 438, 439, 440, 441, 960], "unbias": [73, 372, 376, 379, 402, 515, 621, 637, 639, 652, 950, 983], "shrunk": [73, 94, 279, 286, 294, 387, 438, 440, 441, 444, 445, 446, 514, 847, 948, 968, 989, 990], "base_x_train": 73, "base_x_test": 73, "coloring_matrix": [73, 74], "shrunkcovari": [73, 94, 376, 434, 435, 438, 439, 440], "empirical_covari": [73, 376, 443, 444, 446, 1011], "log_likelihood": [73, 575, 576, 761, 762], "negative_loglik": 73, "real_cov": [73, 74, 387, 435, 438, 439, 440, 441, 444, 445, 446], "emp_cov": [73, 75, 77, 443, 446], "loglik_r": 73, "inv": [73, 77, 275], "formula": [73, 74, 246, 371, 374, 376, 387, 438, 440, 481, 482, 483, 555, 608, 611, 612, 615, 616, 617, 618, 619, 620, 621, 625, 626, 627, 628, 629, 641, 643, 669, 693, 694, 719, 728, 943, 948, 950, 954, 959, 960, 964, 968, 1000, 1002, 1004], "asymptot": [73, 74, 171, 333, 376, 439, 501, 694, 950, 953, 1005], "chen": [73, 74, 376, 381, 387, 440, 690, 720, 946, 954, 998, 1001, 1002, 1003, 1005, 1008, 1009, 1010, 1011], "Its": [73, 237, 241, 342, 348, 360, 379, 384, 503, 949, 950, 959, 962, 968, 973, 978, 998, 1012], "tuned_paramet": [73, 127, 237], "loglik_lw": 73, "loglik_oa": 73, "unseen": [73, 112, 133, 171, 186, 190, 252, 265, 312, 335, 338, 348, 359, 360, 374, 378, 812, 843, 855, 945, 954, 960, 962, 964, 970, 979, 998, 1003, 1007], "loglog": [73, 213], "lik_max": 73, "amax": 73, "lik_min": 73, "amin": 73, "vline": [73, 89, 169, 170, 171, 183, 239, 252, 280], "shrinkage_": [73, 74, 438, 440], "magenta": [73, 116], "purpl": [73, 85, 206], "cyan": [73, 104, 154, 270], "realli": [73, 156, 171, 350, 351, 352, 954, 960, 978, 1009], "interestingli": [73, 136, 964], "outperform": [73, 80, 117, 122, 256, 284, 358, 378, 381, 417, 427, 956, 964], "415": [73, 321, 975], "plot_covariance_estim": [73, 975], "inspir": [74, 119, 155, 200, 346, 358, 381, 526, 527, 891, 944, 973, 1004], "mmse": [74, 376, 387, 440], "tran": 74, "octob": [74, 341, 995, 1002, 1008, 1009, 1011], "choleski": [74, 182, 200, 355, 436, 437, 443, 492, 576, 613, 615, 616, 619, 620, 621, 623, 624, 634, 637, 639, 645, 647, 648, 652, 761, 762, 950, 998, 1002, 1004, 1007, 1010, 1011], "toeplitz": 74, "simul": [74, 89, 117, 154, 176, 217, 239, 978], "n_samples_rang": [74, 213], "lw_mse": 74, "oa_ms": 74, "lw_shrinkag": 74, "oa_shrinkag": 74, "error_norm": [74, 76, 434, 435, 436, 437, 438, 439, 440, 441], "darkorang": [74, 91, 95, 96, 183, 193, 205, 226, 227, 228, 231, 246, 248, 264, 270, 271, 299, 326], "304": [74, 136, 283, 343, 975], "plot_lw_vs_oa": [74, 975], "d_": [75, 374, 379, 613, 634, 645, 742, 951, 956], "mle": [75, 94, 506, 1003, 1006], "resist": [75, 76, 346], "erron": [75, 76, 379, 950, 996, 1003, 1007], "breakdown": [75, 76, 199, 644, 950], "n_": [75, 76, 157, 239, 291, 374, 379, 381, 611, 617, 650, 661, 946, 950, 954, 956, 957, 961, 964, 966, 969, 970], "smallest": [75, 76, 182, 259, 324, 341, 374, 376, 383, 492, 506, 595, 619, 620, 621, 647, 648, 655, 659, 660, 763, 766, 767, 777, 782, 836, 883, 970, 1008], "pure": [75, 76, 80, 166, 182, 360, 374, 438, 444, 461, 522, 523, 524, 525, 529, 530, 531, 670, 680, 750, 759, 874, 875, 876, 877, 964], "rousseuw": [75, 76], "rousseeuw": [75, 76, 374, 376, 434, 439, 756, 757, 960], "ass": [75, 76, 376, 439], "1984": [75, 76, 376, 439, 874, 875, 970], "wilson": [75, 343, 995, 998], "hilferti": 75, "1931": 75, "proceed": [75, 136, 341, 343, 374, 385, 404, 409, 476, 661, 673, 690, 720, 813, 863, 954, 966, 967, 968], "academi": [75, 813], "688": 75, "n_outlier": [75, 76, 118, 185, 209, 266], "gen_cov": 75, "ey": [75, 76, 227, 231, 308, 341, 499, 506, 515], "outliers_cov": 75, "mincovdet": [75, 76, 376, 434, 435, 438, 440, 441, 960, 995, 1002], "robust_cov": 75, "nmcd": 75, "nmle": 75, "26253567e": 75, "06695631e": 75, "22747343e": 75, "23773583": 75, "24640578": 75, "51963999": 75, "inlier": [75, 118, 185, 209, 219, 279, 360, 376, 396, 434, 528, 636, 642, 812, 843, 855, 869, 870, 872, 950, 960, 1002, 1003, 1008], "inlier_plot": 75, "outlier_plot": 75, "get_xlim": [75, 177, 187, 279], "zz": 75, "mahal_emp_cov": 75, "emp_cov_contour": 75, "pubu_r": 75, "mahal_robust_cov": 75, "robust_contour": 75, "ylorbr_r": 75, "dist": [75, 203, 213, 350, 434, 435, 436, 437, 438, 439, 440, 441, 664, 727, 733, 806, 807], "borderaxespad": 75, "cubic": [75, 384], "suggest": [75, 90, 104, 108, 154, 157, 239, 308, 333, 345, 346, 353, 360, 378, 379, 381, 434, 439, 530, 610, 791, 948, 950, 951, 959, 962, 969, 988, 999, 1006, 1009, 1012], "emp_mah": 75, "markeredgewidth": [75, 243], "rm": [75, 141, 350, 354, 376], "mahal": 75, "robust_mah": 75, "location_": [75, 76, 434, 435, 436, 437, 438, 439, 440, 441], "267": [75, 96, 975, 995], "plot_mahalanobis_dist": [75, 975], "compens": [76, 153, 155, 159, 182, 200, 240, 376, 379], "soon": [76, 360, 986], "5n_": 76, "johanna": 76, "hardin": 76, "rock": 76, "decemb": [76, 117, 143, 341, 629, 650, 651, 995, 1003, 1005, 1007, 1008, 1010], "928": [76, 402], "946": 76, "zoubir": 76, "koivunen": 76, "chakhchoukh": 76, "muma": 76, "tutori": [76, 127, 128, 129, 171, 184, 200, 239, 346, 347, 352, 354, 359, 368, 374, 417, 427, 656, 969, 986, 998], "treatment": [76, 153, 340, 379, 434, 439], "concept": [76, 107, 112, 216, 248, 346, 358, 373, 374, 380, 382, 946, 954, 957, 970, 978], "magazin": [76, 383], "29": [76, 85, 139, 143, 173, 182, 186, 199, 293, 298, 343, 381, 524, 525, 655, 659, 745, 761, 818, 950, 951, 968], "font_manag": [76, 265, 307], "range_n_outli": 76, "err_loc_mcd": 76, "err_cov_mcd": 76, "err_loc_emp_ful": 76, "err_cov_emp_ful": 76, "err_loc_emp_pur": 76, "err_cov_emp_pur": 76, "outliers_index": 76, "outliers_offset": 76, "inliers_mask": 76, "pure_x": 76, "pure_loc": 76, "pure_emp_cov": 76, "font_prop": 76, "fontproperti": [76, 265, 307], "hat": [76, 96, 235, 239, 264, 291, 344, 372, 376, 380, 381, 945, 950, 951, 954, 956, 958], "_2": [76, 143, 312, 379, 382, 496, 502, 510, 511, 611, 617, 950, 958, 968, 969], "x_size": 76, "663": [76, 147, 860, 962, 966, 975], "plot_robust_vs_empirical_covari": [76, 975], "graphicallasso": [77, 376, 434, 435, 437, 438, 439, 440, 441, 443, 1003, 1011], "largest": [77, 89, 107, 136, 184, 343, 374, 376, 379, 408, 492, 506, 522, 523, 524, 525, 529, 530, 553, 674, 761, 762, 782, 804, 836, 874, 875, 876, 877, 903, 951, 954, 964, 969, 970], "invert": [77, 92, 133, 203, 321, 322, 358, 376, 382, 595, 654, 658, 964, 1004], "fairli": [77, 113, 204, 254, 275, 354, 374, 524, 525, 664, 955, 986], "tweak": [77, 216, 378, 920, 953, 988, 1006], "readabl": [77, 240, 291, 351, 352, 354, 368, 499, 1004, 1007, 1008, 1009, 1010], "make_sparse_spd_matrix": [77, 443, 494, 1012], "prng": [77, 987], "prec": [77, 210, 492, 954], "smallest_coef": [77, 492], "largest_coef": [77, 492], "multivariate_norm": [77, 80, 225, 387, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446], "ledoit_wolf": [77, 376, 1008], "prec_": 77, "lw_cov_": 77, "lw_prec_": 77, "this_cov": 77, "this_prec": 77, "ma": [77, 285, 308, 950, 1001, 1006], "masked_equ": 77, "set_facecolor": [77, 225], "set_axis_bgcolor": 77, "506": [77, 206, 975], "plot_sparse_cov": [77, 975], "cross_decomposit": [78, 79, 80, 151, 217, 975, 999, 1000, 1002, 1003, 1004], "plscanon": [79, 447, 449, 450, 976, 990, 999, 1003, 1005, 1007, 1009], "plsregress": [79, 80, 976, 990, 1002, 1005, 1007, 1009, 1011], "appar": [79, 956, 978], "scatterplot": [79, 161, 239], "maxim": [79, 80, 83, 87, 97, 114, 161, 230, 231, 240, 244, 248, 249, 269, 284, 290, 308, 312, 324, 328, 343, 360, 371, 374, 377, 379, 383, 384, 514, 559, 575, 576, 609, 610, 613, 634, 644, 645, 685, 763, 766, 767, 777, 835, 841, 851, 948, 950, 953, 954, 957, 959, 969, 983, 986, 998, 1000, 1005, 1008, 1010], "weak": [79, 112, 115, 186, 200, 245, 378, 522, 523, 524, 529, 530, 531, 595, 957, 978, 1011], "var": [79, 80, 104, 136, 162, 239, 343, 347, 383, 606, 610, 868, 869, 870, 871, 872, 954, 1003], "corr": [79, 157, 239], "corrcoef": [79, 97], "plsca": [79, 448], "x_train_r": 79, "y_train_r": 79, "x_test_r": 79, "y_test_r": 79, "221": [79, 120, 320, 998], "222": [79, 120, 969], "223": [79, 120, 136, 146, 174, 343, 975], "yj": [79, 283], "noiz": 79, "xb": [79, 845], "95213778": 79, "10988205": 79, "08029173": 79, "80414253": 79, "81422502": 79, "83199463": 79, "92896897": 79, "76438188": 79, "8798454": 79, "47804127": 79, "59007842": 79, "58442585": 79, "73908648": 79, "87282488": 79, "85481267": 79, "16714557": 79, "99951652": 79, "09671339": 79, "exce": [79, 258, 289, 384, 407, 480, 567, 614, 623, 1004, 1007, 1009], "205": [79, 975], "plot_compare_cross_decomposit": [79, 975], "multilabel": [79, 81, 151, 208, 246, 256, 257, 300, 341, 348, 349, 360, 369, 447, 452, 461, 462, 473, 474, 480, 488, 506, 522, 529, 532, 623, 639, 640, 668, 672, 678, 690, 693, 694, 698, 699, 702, 703, 718, 720, 747, 748, 751, 752, 758, 760, 792, 795, 797, 799, 823, 830, 833, 837, 839, 850, 871, 874, 876, 892, 916, 917, 918, 965, 975, 976, 988, 990, 997, 998, 999, 1000, 1002, 1003, 1004, 1005, 1008, 1009, 1010, 1011, 1012], "pcr": [80, 377], "greedili": [80, 136, 374, 378, 383, 425], "suffer": [80, 109, 156, 259, 279, 321, 333, 374, 381, 509, 727, 949, 950, 954, 957, 987, 1004], "dive": [80, 346, 352], "explained_variance_": [80, 499, 506, 509, 987, 1002], "onto": [80, 203, 204, 214, 279, 358, 379, 382, 386, 411, 413, 426, 498, 504, 508, 592, 593, 595, 653, 948, 952, 957], "recommend": [80, 109, 149, 199, 210, 216, 235, 248, 283, 290, 312, 333, 334, 340, 344, 346, 348, 352, 354, 358, 364, 377, 378, 379, 381, 383, 403, 412, 414, 416, 425, 461, 473, 500, 503, 509, 514, 526, 527, 534, 547, 548, 554, 571, 576, 596, 597, 603, 635, 641, 657, 662, 663, 665, 667, 769, 775, 777, 785, 822, 829, 831, 838, 845, 846, 851, 852, 854, 855, 856, 857, 859, 868, 871, 903, 922, 943, 951, 954, 956, 958, 961, 964, 966, 968, 969, 970, 972, 978, 990, 997, 998, 1004, 1005, 1006, 1007, 1009, 1011], "linearregress": [80, 125, 153, 161, 172, 177, 178, 179, 180, 185, 188, 199, 212, 216, 218, 235, 253, 280, 329, 346, 358, 359, 375, 381, 430, 535, 597, 600, 611, 614, 617, 619, 636, 637, 652, 950, 954, 964, 986, 999, 1000, 1004, 1007, 1008, 1009, 1011], "retriev": [80, 154, 186, 246, 321, 328, 350, 360, 379, 382, 383, 433, 461, 555, 558, 559, 591, 618, 628, 649, 664, 690, 694, 696, 697, 720, 745, 801, 805, 838, 864, 950, 952, 954, 956, 973, 974, 987, 1000, 1005, 1007, 1009, 1012], "026": [80, 211, 975], "predit": 80, "pca_2": 80, "673": [80, 321, 352], "511": [80, 975], "plot_pcr_vs_pl": [80, 975], "051": [82, 204, 321, 437, 975], "plot_digits_last_imag": [82, 975], "iris": [83, 245, 246, 985], "150x4": 83, "legend_el": [83, 118, 195, 242, 262, 312], "flower": [83, 95, 248, 471, 472, 954, 973], "versicolor": [83, 248, 249, 469], "differenti": [83, 246, 381, 384, 524, 525, 584, 587], "unus": [83, 93, 155, 179, 202, 204, 428, 544, 727, 735, 943, 951, 995, 1003, 1005, 1006, 1008, 1010], "3rd": [83, 146, 801, 844, 956, 964], "eigenvalu": [83, 230, 295, 371, 374, 376, 417, 427, 434, 435, 436, 437, 438, 439, 440, 441, 500, 506, 514, 638, 653, 654, 656, 658, 660, 832, 946, 951, 964, 997, 1001, 1004, 1005, 1006, 1007], "174": [83, 113, 277, 352, 549, 975], "plot_iris_dataset": [83, 975], "easi": [84, 155, 190, 200, 228, 237, 239, 308, 320, 329, 341, 352, 354, 358, 359, 374, 381, 465, 469, 475, 833, 943, 949, 953, 961, 964, 973, 974, 978, 988, 1005, 1010, 1011], "make_gaussian_quantil": [84, 101, 103, 342, 435, 439, 440, 441, 446, 485], "321": [84, 110, 975], "323": [84, 213], "y2": [84, 103, 681, 955], "325": 84, "326": [84, 321], "287": [84, 114, 155, 966, 975], "plot_random_dataset": [84, 975], "make_multilabel_classif": [85, 217, 342, 480, 501, 752, 797, 798, 954, 997, 998, 1000, 1006], "degener": [85, 226, 386, 405, 419, 498, 685, 950, 954, 1004, 1008, 1009], "vocabulari": [85, 197, 320, 321, 358, 382, 553, 554, 555, 556, 956, 979, 988, 995, 997, 1000, 1003, 1006, 1008], "353": [85, 321, 988], "w0": 85, "w1": [85, 381, 622], "54": [85, 90, 136, 159, 166, 182, 185, 219, 341, 343, 374, 456, 996, 997], "make_ml_clf": 85, "ff3333": 85, "0198e1": 85, "bf5fff": 85, "fcd116": 85, "ff7216": 85, "4dbd33": 85, "87421f": 85, "plot_2d": [85, 202], "p_c": [85, 488], "p_w_c": [85, 488], "allow_unlabel": [85, 217, 488], "return_distribut": [85, 488], "sep": [85, 248], "p_w": 85, "plot_random_multilabel_dataset": [85, 975], "blind": [86, 89, 151, 181, 320, 379, 498, 506, 975], "fastica": [86, 151, 181, 379, 497, 500, 506, 975, 987, 995, 997, 1003, 1009, 1010], "fa": [86, 96, 97, 151, 352, 379, 438, 441, 497, 506, 763, 788, 975], "precomput": [86, 87, 88, 151, 160, 205, 216, 259, 261, 348, 355, 358, 360, 374, 382, 385, 397, 405, 406, 409, 410, 411, 415, 417, 422, 430, 436, 447, 448, 449, 489, 496, 500, 502, 505, 507, 513, 519, 521, 523, 525, 527, 530, 533, 535, 575, 576, 585, 600, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 625, 626, 627, 628, 629, 630, 632, 635, 637, 638, 643, 644, 646, 647, 649, 650, 653, 655, 656, 657, 661, 738, 742, 745, 756, 757, 799, 800, 808, 809, 810, 812, 813, 814, 816, 817, 818, 824, 867, 868, 869, 870, 871, 872, 875, 877, 930, 931, 932, 946, 952, 957, 969, 974, 975, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013], "olivetti": [87, 109, 339, 379, 460, 990, 995, 1003], "chapter": [87, 329, 348, 374, 379, 381, 384, 495, 497, 499, 579, 584, 587, 608, 944, 947, 950, 969, 970], "decompos": [87, 91, 104, 281, 373, 499, 503, 674, 787, 903, 949, 950, 954, 971, 989, 990], "basicconfig": 87, "asctim": 87, "levelnam": 87, "faces_cent": 87, "image_shap": [87, 218], "constrained_layout": [87, 155, 202, 285, 286, 293], "set_constrained_layout_pad": 87, "w_pad": [87, 110, 325], "h_pad": [87, 110, 325], "set_edgecolor": 87, "vec": [87, 382, 503, 505, 512], "im": [87, 97, 250, 263], "pad": [87, 110, 149, 155, 202, 219, 320, 325, 382, 553, 554, 556], "initialis": [87, 503, 505, 512, 995, 1003, 1004], "mathbb": [87, 104, 141, 377, 954, 961, 969], "4096": [87, 341, 379, 460], "human": [87, 155, 320, 368, 374, 379, 823, 824, 954, 961, 1004], "friendli": [87, 334, 346, 354, 379, 859, 966, 967, 973, 974], "visualis": [87, 90, 97, 217, 509, 764, 765, 768, 780, 781, 782, 783, 784, 957, 974], "64x64": [87, 341, 379], "singular": [87, 355, 371, 374, 377, 416, 418, 447, 448, 449, 450, 486, 489, 499, 503, 505, 506, 509, 512, 514, 515, 622, 637, 638, 639, 652, 903, 950, 951, 953, 989, 990, 1001, 1002], "scalar": [87, 291, 352, 360, 375, 384, 386, 429, 432, 489, 498, 580, 581, 582, 587, 588, 592, 593, 595, 702, 706, 882, 890, 946, 958, 960, 964, 968, 973, 1005, 1006, 1009, 1011], "noise_variance_": [87, 170, 497, 499, 506, 621, 1002, 1009], "pixelwis": 87, "pca_estim": 87, "nmf_estim": 87, "multivari": [87, 154, 338, 376, 379, 382, 438, 481, 482, 483, 592, 593, 594, 595, 614, 636, 643, 644, 801, 802, 803, 804, 805, 948, 950, 953, 956, 973, 979, 987, 990], "subcompon": [87, 379], "ica_estim": 87, "15e": 87, "sparsepca": [87, 496, 498, 499, 500, 502, 504, 505, 506, 507, 510, 511, 995, 1002, 1003, 1005, 1006, 1008, 1009, 1010], "batch_pca_estim": 87, "minibatchdictionarylearn": [87, 90, 335, 379, 496, 503, 507, 510, 511, 996, 998, 1005, 1006, 1008, 1009, 1010, 1011, 1012], "batch_dict_estim": 87, "enhanc": [87, 186, 345, 346, 350, 358, 360, 374, 954, 993, 994, 995, 996, 997, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "consum": [87, 329, 340, 348, 360, 365, 374, 378, 381, 414, 766, 767, 826, 827, 910, 911, 950, 978, 1000, 1012], "kmeans_estim": 87, "factoranalysi": [87, 94, 97, 379, 509, 996, 998, 1007, 1009], "heteroscedast": [87, 94, 114, 184, 379, 842, 854], "fa_estim": 87, "wrap": [87, 106, 114, 259, 340, 348, 360, 398, 473, 622, 641, 792, 850, 944, 954, 957, 969, 973, 995, 1000, 1003, 1005, 1006, 1008, 1010], "colormap": [87, 103, 146, 174, 191, 308, 313, 325, 662, 1008], "uv": [87, 379], "x_1": [87, 131, 141, 179, 183, 377, 379, 381, 384, 578, 590, 622, 839, 866, 867, 950, 956, 958, 964, 968], "x_n": [87, 379, 866, 867, 956, 958, 968], "dict_pos_dict_estim": 87, "positive_dict": [87, 496, 502, 510, 511], "dict_pos_code_estim": 87, "fit_algorithm": [87, 496, 502, 1010, 1011], "cd": [87, 136, 343, 344, 346, 350, 352, 379, 436, 437, 443, 496, 502, 504, 505, 508, 510, 511, 512, 950, 988, 1000, 1010], "positive_cod": [87, 496, 502, 507, 510, 511], "dict_pos_estim": 87, "510": [87, 975, 986], "plot_faces_decomposit": [87, 975], "imagin": [88, 138, 216, 312, 378, 379, 382, 950], "plai": [88, 115, 140, 165, 191, 233, 270, 304, 305, 333, 988], "microphon": 88, "s1": [88, 136, 146, 170, 171, 343, 987], "sinusoid": [88, 102, 114, 166, 215, 947, 987], "s2": [88, 136, 146, 170, 171, 343, 515, 987], "sawtooth": [88, 987], "saw": [88, 183, 186, 987], "tooth": [88, 987], "s_": [88, 243, 951, 962, 964, 987], "a_": [88, 371, 374, 503, 505, 512, 950, 987], "mixing_": [88, 89, 498, 987], "prove": [88, 978], "revert": [88, 595, 597, 598, 1002, 1007, 1012], "unmix": [88, 386, 498], "allclos": [88, 119, 966, 987], "mean_": [88, 243, 497, 498, 499, 504, 506, 508, 846, 964, 987, 1003], "orthogon": [88, 89, 90, 96, 151, 160, 252, 373, 379, 491, 496, 502, 504, 507, 508, 513, 629, 630, 650, 651, 966, 975, 976, 990, 995], "steelblu": [88, 89, 124], "sig": 88, "346": [88, 381, 466, 520, 521, 975], "plot_ica_blind_source_separ": [88, 975], "pursuit": [88, 90, 96, 151, 160, 252, 379, 439, 491, 496, 502, 507, 513, 629, 630, 650, 651, 975, 976, 990, 995], "ica": [89, 373, 386, 970, 989, 990], "geometr": [89, 374, 653, 669, 695, 721, 951, 1003], "standard_t": 89, "s_pca_": 89, "s_ica_": 89, "plot_sampl": [89, 231], "axis_list": 89, "x_axi": [89, 190, 243], "y_axi": [89, 190], "quiver": 89, "hline": 89, "set_zord": 89, "09": [89, 90, 96, 154, 213, 217, 252, 374, 494, 572, 699, 804, 954, 964, 968, 975], "361": [89, 341, 381, 520, 521, 975], "plot_ica_vs_pca": [89, 975], "ordinari": [89, 104, 151, 160, 161, 166, 178, 184, 185, 187, 199, 291, 600, 611, 617, 619, 620, 621, 622, 637, 643, 647, 648, 652, 968, 975, 976, 990], "firstli": [90, 333, 358, 622, 988], "undistort": 90, "noiseless": [90, 952], "omp": [90, 96, 181, 379, 496, 502, 507, 513, 629, 630, 650, 651, 976, 990, 995, 1003], "promin": [90, 360], "reminisc": 90, "downsampl": 90, "075": 90, "show_with_diff": 90, "puor": 90, "22692": 90, "dico": 90, "n_steps_": [90, 414, 502, 503, 1008], "reconstruct_from_patches_2d": [90, 382, 548], "intercept": [90, 174, 191, 199, 317, 360, 447, 448, 449, 514, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 652, 841, 845, 848, 866, 867, 873, 950, 952, 954, 959, 968, 969, 998, 1000, 1004, 1005], "transform_algorithm": [90, 96, 496, 502, 507, 1011], "n1": 90, "atom": [90, 96, 379, 496, 502, 504, 507, 508, 510, 511, 618, 628, 649, 950, 995, 1008], "transform_n_nonzero_coef": [90, 96, 496, 502, 507], "n2": 90, "n4": 90, "transform_alpha": [90, 96, 496, 502, 507, 1008], "set_param": [90, 97, 105, 111, 114, 155, 156, 162, 170, 171, 175, 186, 190, 214, 219, 252, 262, 288, 311, 321, 349, 360, 374, 375, 381, 384, 388, 402, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 429, 430, 434, 435, 436, 437, 438, 439, 440, 441, 447, 448, 449, 450, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 546, 547, 548, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 600, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 653, 654, 655, 656, 657, 761, 762, 763, 766, 767, 777, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 822, 823, 824, 825, 826, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 858, 859, 861, 862, 863, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 944, 960, 979, 986, 987, 995, 1001, 1002, 1003, 1008, 1009], "341": [90, 975], "plot_image_denois": [90, 975], "ipca": [91, 498, 499], "flip": [91, 547, 706, 903, 956, 999, 1008], "incrementalpca": [91, 335, 379, 498, 500, 504, 506, 509, 999, 1002, 1003, 1005, 1006, 1009], "x_ipca": 91, "x_pca": 91, "turquois": [91, 95, 96, 116, 188, 199, 205, 227, 228, 246], "x_transform": [91, 120, 216, 450, 496, 497, 498, 499, 500, 502, 504, 508, 531, 603, 604, 653, 654, 655, 656], "nmean": 91, "shadow": [91, 95, 96, 205, 299, 315, 322, 382], "scatterpoint": [91, 95, 205, 227, 299], "230": [91, 549, 975], "plot_incremental_pca": [91, 975], "nest": [92, 101, 151, 171, 216, 232, 234, 256, 295, 334, 352, 360, 364, 374, 378, 384, 388, 402, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 421, 427, 430, 434, 435, 436, 437, 438, 439, 440, 441, 447, 448, 449, 450, 469, 484, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 546, 547, 548, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 600, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 653, 654, 655, 656, 657, 761, 762, 763, 766, 767, 768, 777, 788, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 822, 823, 824, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 858, 859, 861, 862, 863, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 943, 954, 957, 975, 995, 996, 999, 1001, 1002, 1003, 1009], "train_ax": 92, "test_ax": 92, "straight": [92, 172, 178, 180, 236, 312, 333], "x_test_kernel_pca": 92, "orig_data_ax": 92, "pca_proj_ax": 92, "kernel_pca_proj_ax": 92, "unfold": [92, 349, 951], "untangl": 92, "mind": [92, 117, 153, 154, 155, 200, 283, 284, 320, 321, 329, 346, 368, 376, 378, 381, 611, 612, 669, 950, 969, 973, 979, 986], "investig": [92, 97, 101, 150, 316, 346, 950], "pca_back_proj_ax": 92, "kernel_pca_back_proj_ax": 92, "reli": [92, 107, 111, 117, 136, 157, 170, 171, 256, 259, 289, 293, 320, 333, 334, 348, 351, 354, 355, 358, 360, 370, 371, 374, 379, 381, 382, 514, 558, 562, 572, 573, 742, 790, 793, 831, 920, 943, 946, 948, 950, 954, 957, 962, 964, 969, 978, 1003, 1004, 1005, 1009, 1011, 1012], "analyt": [92, 379, 384, 497, 585, 673, 944, 948, 954, 972, 978], "kernelridg": [92, 138, 215, 637, 947, 999, 1012], "kernal": 92, "relianc": [92, 186], "547": [92, 276, 975], "plot_kernel_pca": [92, 975], "cla": 93, "plot_pca_iri": [93, 975], "homoscedast": [94, 212, 283, 954, 1003], "succe": [94, 117, 166], "subspac": [94, 377, 381, 417, 480, 520, 521, 656, 660, 903, 948, 957, 960, 966, 978, 987], "overestim": [94, 329, 378], "circumst": [94, 200, 957, 973], "nip": [94, 343, 480, 506, 531, 606, 954], "604": [94, 506], "minka": [94, 506, 950], "deni": [94, 997, 998, 1002, 1003, 1004, 1010, 1011], "engemann": [94, 997, 998, 1002], "x_homo": 94, "x_hetero": 94, "pca_scor": 94, "fa_scor": 94, "shrunk_cov_scor": 94, "lw_score": 94, "n_components_pca": 94, "n_components_fa": 94, "n_components_pca_ml": 94, "axhlin": [94, 127, 172, 238, 242], "violet": [94, 1011], "120": [94, 118, 203, 295, 383, 555, 975, 995], "plot_pca_vs_fa_model_select": [94, 975], "contrast": [95, 155, 184, 215, 219, 239, 241, 268, 284, 321, 360, 372, 374, 377, 381, 384, 414, 417, 427, 584, 608, 777, 822, 944, 947, 949, 950, 954, 957, 959, 962, 964, 967, 968, 970, 1005], "92461872": 95, "05306648": 95, "x_r": [95, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568], "x_r2": 95, "194": [95, 277, 975], "plot_pca_vs_lda": [95, 975], "ricker": 96, "sparsecod": [96, 379, 496, 502, 505, 513, 1002, 1003, 1005, 1007, 1009], "mexican": 96, "piecewis": [96, 291, 371, 945, 950, 964, 970], "matter": [96, 231, 312, 329, 374, 375, 381, 532, 633, 641, 643, 950, 999], "motiv": [96, 346, 348, 360, 946, 954, 964, 978, 1008], "heavier": [96, 376, 950], "ricker_funct": 96, "ricker_matrix": 96, "d_fix": 96, "d_multi": 96, "first_quart": 96, "transform_n_nozero_coef": 96, "lasso_lar": [96, 496, 502, 507, 513, 1005], "n_nonzero": 96, "coder": [96, 507, 681], "flatnonzero": [96, 170, 238, 247, 248, 745], "soft": [96, 123, 124, 346, 360, 534, 535, 862, 870, 968, 978, 1000], "debias": 96, "lstsq": [96, 346, 622, 635], "rcond": 96, "plot_sparse_cod": [96, 975], "convex": [96, 113, 114, 151, 160, 189, 202, 317, 321, 374, 376, 379, 387, 411, 417, 427, 438, 440, 441, 444, 445, 446, 623, 641, 657, 950, 951, 957, 958, 968, 975, 1008], "uncov": [97, 660], "inher": [97, 177, 329, 374, 379, 944, 946, 948, 949, 951, 955], "varimax": [97, 379, 497, 1007], "jona": [97, 1007, 1012], "sassenhagen": [97, 1007, 1012], "set_yticklabel": [97, 141, 149, 150, 157, 250, 322], "n_comp": [97, 159], "unrot": 97, "52106591": 97, "37741762": 97, "26934744": 97, "92329566": 97, "5804131": 97, "02449161": 97, "56485654": 97, "06694199": 97, "88096009": 97, "4472869": 97, "41691605": 97, "55390036": 97, "99918858": 97, "01915283": 97, "96228895": 97, "05840206": 97, "98633022": 97, "05752333": 97, "16052385": 97, "67443065": 97, "90809432": 97, "41726413": 97, "85857475": 97, "43847489": 97, "398": [97, 612, 975, 988], "plot_varimax_fa": [97, 975], "custom": [98, 133, 135, 151, 165, 191, 220, 232, 238, 240, 243, 246, 247, 251, 261, 266, 270, 288, 303, 305, 306, 308, 309, 311, 320, 322, 338, 341, 344, 348, 353, 354, 355, 358, 359, 360, 365, 373, 374, 375, 378, 384, 433, 454, 458, 459, 467, 469, 503, 505, 512, 514, 522, 523, 529, 530, 536, 538, 567, 595, 596, 655, 664, 678, 763, 792, 830, 864, 871, 938, 943, 948, 954, 957, 973, 974, 975, 978, 988, 990, 995, 999, 1000, 1002, 1003, 1005, 1006, 1007, 1010, 1011, 1012, 1013], "convent": [99, 117, 239, 346, 348, 349, 350, 352, 360, 392, 393, 396, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 434, 435, 436, 437, 438, 439, 440, 441, 473, 474, 496, 498, 499, 500, 501, 502, 503, 504, 505, 507, 508, 509, 512, 528, 531, 534, 535, 546, 547, 548, 553, 554, 556, 592, 593, 594, 595, 642, 653, 654, 655, 656, 683, 761, 762, 794, 795, 810, 812, 814, 818, 830, 838, 841, 842, 844, 847, 858, 859, 870, 897, 898, 954, 980, 995, 1002, 1003, 1006, 1008, 1009, 1011, 1012], "subclass": [99, 348, 384, 539, 920, 1000, 1003, 1008, 1012], "showcas": [99, 102, 107, 111, 114, 115, 117, 151, 348], "statu": [99, 147, 295, 340, 350, 364, 461, 806, 807, 1012], "_is_fit": 99, "snippet": [99, 329, 346, 351, 354, 358, 370, 381, 382, 383, 944, 964, 977, 1008], "customestim": 99, "classifiermixin": [99, 216, 346, 348, 360, 378, 1006], "kushan": [99, 1012], "kushansharma1": 99, "classes_": [99, 174, 191, 210, 216, 248, 297, 298, 346, 348, 360, 399, 402, 403, 514, 515, 516, 518, 520, 522, 524, 526, 529, 532, 534, 558, 559, 575, 596, 623, 624, 631, 633, 639, 640, 641, 662, 665, 667, 752, 763, 766, 767, 777, 794, 795, 796, 797, 798, 801, 802, 803, 804, 805, 808, 813, 816, 823, 826, 833, 834, 837, 847, 861, 862, 863, 866, 868, 871, 874, 876, 879, 954, 965, 968, 996, 999, 1000, 1002, 1005, 1007], "track": [99, 105, 113, 298, 346, 349, 350, 370, 499, 923, 955, 973, 974, 1002, 1005], "notfittederror": [99, 360, 815, 938, 999, 1001, 1004, 1005, 1011, 1012], "logic": [99, 334, 347, 348, 353, 370, 381, 970, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "boolean": [99, 328, 341, 346, 348, 355, 375, 381, 382, 383, 429, 526, 527, 546, 547, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 572, 573, 594, 597, 598, 601, 614, 636, 664, 795, 801, 822, 829, 849, 882, 938, 944, 950, 956, 961, 964, 970, 995, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010], "sklearn_is_fit": [99, 975], "isolationforest": [100, 151, 185, 209, 219, 254, 596, 792, 870, 960, 975, 1001, 1002, 1003, 1004, 1006, 1008, 1009, 1010, 1011, 1012], "oob": [100, 113, 151, 381, 480, 529, 974, 975, 997, 1008, 1012], "vote": [100, 102, 107, 122, 123, 124, 151, 258, 312, 360, 361, 373, 466, 520, 521, 522, 525, 529, 530, 534, 535, 622, 794, 808, 809, 814, 816, 955, 957, 975, 976, 986, 990, 995, 998, 1000, 1005], "experi": [101, 141, 145, 153, 154, 155, 156, 159, 184, 256, 284, 316, 321, 322, 334, 340, 346, 349, 373, 378, 480, 692, 749, 950, 955, 966, 972, 973, 978, 986, 988], "depict": [101, 241, 381, 953], "zhu": [101, 381, 484, 518, 623, 861], "principl": [101, 145, 264, 322, 346, 358, 360, 361, 378, 381, 903, 943, 953, 957, 968, 1002], "repeatedli": [101, 292, 329, 360, 374, 381, 384, 473, 511, 631, 632, 641, 642, 643, 745, 944, 958, 983], "zou": [101, 170, 381, 484, 518, 621, 950, 968], "rosset": [101, 381, 484, 518], "hasti": [101, 104, 105, 116, 136, 170, 238, 343, 378, 381, 484, 485, 518, 524, 525, 593, 621, 686, 687, 688, 796, 813, 859, 874, 875, 944, 948, 950, 955, 961, 966, 968, 970], "2009": [101, 104, 105, 116, 166, 374, 378, 379, 381, 382, 484, 485, 493, 496, 502, 503, 505, 506, 509, 512, 518, 524, 525, 600, 636, 644, 661, 797, 874, 875, 902, 903, 950, 954, 955, 961, 970], "349": [101, 352, 518], "360": [101, 108, 321, 518], "sphere": [101, 151, 201, 202, 205, 206, 207, 259, 321, 380, 484, 554, 653, 654, 655, 656, 657, 728, 889, 948, 952, 957, 975], "roughli": [101, 114, 171, 231, 249, 259, 284, 333, 360, 379, 382, 484, 951, 995], "2_000": 101, "percent": [101, 457, 565, 967], "predecessor": [101, 415, 420, 421, 422, 1012], "mistak": [101, 133, 298, 329, 374, 378, 699, 837, 851, 852, 854, 855, 856, 857, 950, 955], "incorrect": [101, 153, 246, 300, 329, 346, 374, 572, 573, 597, 598, 698, 995, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008], "consecut": [101, 112, 183, 358, 372, 378, 382, 408, 412, 414, 415, 417, 421, 424, 427, 502, 503, 504, 511, 567, 610, 631, 632, 633, 641, 642, 643, 761, 762, 768, 801, 802, 803, 804, 805, 823, 824, 943, 964, 988, 1003], "weak_learn": 101, "max_leaf_nod": [101, 107, 116, 182, 291, 328, 381, 522, 523, 524, 525, 526, 527, 529, 530, 531, 874, 875, 876, 877, 998, 1004, 1006], "adaboost_clf": 101, "misclassification_error": 101, "dummyclassifi": [101, 242, 517, 696, 954, 996, 998, 999, 1000, 1002, 1003, 1004, 1005, 1013], "preval": [101, 288, 360, 665, 677, 954], "dummi": [101, 102, 182, 200, 216, 242, 348, 351, 369, 696, 839, 848, 964, 970, 990, 996, 998, 999, 1000, 1002], "dummy_clf": [101, 516], "weak_learners_misclassification_error": 101, "dummy_classifiers_misclassification_error": 101, "475": [101, 318, 975], "692": 101, "surpass": [101, 312, 823, 824], "staged_predict": [101, 112, 115, 381, 518, 519, 524, 525, 526, 527, 995, 1007], "conclud": [101, 154, 162, 200, 239, 322, 329, 361, 826], "boosting_error": 101, "missclassif": 101, "jitter": [101, 615, 619, 1006], "stagewis": 101, "estimator_errors_": [101, 518, 519], "estimator_weights_": [101, 518, 519], "weak_learners_info": 101, "layout": [101, 279, 358, 866, 867, 868, 871, 887, 969, 998, 1000, 1012], "get_figur": 101, "reweight": [101, 321, 360, 376, 381, 555, 556, 613, 634, 645], "formul": [101, 138, 147, 186, 248, 346, 374, 376, 379, 382, 384, 387, 440, 514, 515, 522, 529, 615, 616, 619, 620, 621, 623, 624, 630, 635, 727, 733, 762, 868, 871, 874, 876, 950, 954, 955, 958, 964, 976, 990, 1012], "mathemat": [101, 154, 170, 199, 242, 338, 343, 346, 360, 363, 374, 376, 379, 380, 384, 514, 515, 522, 529, 600, 611, 621, 756, 757, 762, 824, 868, 871, 874, 876, 950, 954, 958, 964, 966, 976, 978, 986, 990, 1009], "th": [101, 219, 291, 328, 359, 374, 378, 381, 389, 406, 410, 416, 418, 424, 428, 437, 522, 523, 524, 525, 526, 527, 529, 530, 531, 558, 559, 597, 613, 614, 634, 636, 645, 661, 683, 744, 784, 847, 891, 944, 950, 954, 958, 961, 968, 969, 1010], "boil": [101, 349, 360, 376], "forc": [101, 138, 167, 186, 259, 283, 320, 340, 344, 350, 369, 378, 381, 415, 422, 461, 571, 574, 611, 612, 617, 618, 622, 625, 626, 627, 628, 637, 638, 639, 646, 649, 652, 718, 742, 745, 806, 807, 808, 809, 810, 812, 814, 816, 817, 818, 868, 869, 870, 871, 872, 884, 886, 887, 964, 990, 1000, 1003, 1004, 1005, 1007, 1008, 1009, 1011], "143": [101, 136, 170, 269, 343, 436, 437, 966, 975, 995, 996], "plot_adaboost_multiclass": [101, 975], "1d": [102, 104, 151, 155, 183, 213, 260, 263, 272, 315, 326, 346, 353, 355, 359, 360, 375, 380, 429, 432, 582, 595, 598, 618, 622, 625, 628, 649, 668, 677, 678, 684, 693, 694, 698, 702, 706, 747, 748, 751, 760, 808, 809, 810, 811, 812, 814, 816, 817, 818, 831, 882, 886, 887, 917, 941, 955, 975, 979, 986, 995, 1000, 1001, 1002, 1004, 1008, 1009], "299": [102, 193, 645, 975], "drucker": [102, 381, 519], "1997": [102, 341, 379, 381, 500, 519, 655, 659, 950, 951, 954], "decisiontreeregressor": [102, 104, 220, 280, 288, 294, 326, 327, 351, 519, 521, 523, 524, 525, 527, 529, 530, 597, 598, 874, 877, 879, 898, 944, 970, 996, 997, 1000, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "adaboostregressor": [102, 365, 381, 518, 527, 895, 997, 998, 1001, 1004, 1005, 1008, 1010, 1011], "regr_1": [102, 326, 327], "regr_2": [102, 326, 327], "y_1": [102, 326, 327, 377, 954, 958, 968], "y_2": [102, 326, 327, 958], "438": [102, 154, 962, 975], "plot_adaboost_regress": [102, 975], "stump": [103, 381, 524, 1006], "puriti": [103, 878, 880], "circleci": [103, 142, 144, 146, 147, 174, 191, 226, 234, 277, 313, 325, 346], "plot_adaboost_twoclass": [103, 975], "bdt": 103, "plot_color": [103, 325], "br": 103, "plot_step": [103, 110, 325], "class_nam": [103, 233, 847, 878, 879, 880, 970, 1011], "xx0": [103, 596], "xx1": [103, 596], "twoclass_output": 103, "plot_rang": 103, "633": [103, 173, 975], "irreduc": [104, 954], "dark": [104, 154, 308, 341, 1012], "light": [104, 341], "beam": [104, 995], "pointwis": [104, 145, 385, 409], "offset": [104, 159, 358, 376, 379, 434, 473, 474, 528, 597, 598, 606, 607, 609, 610, 642, 692, 739, 741, 812, 870, 954, 968, 986, 1003], "bootstrap": [104, 105, 113, 149, 242, 251, 290, 378, 381, 519, 520, 521, 522, 523, 528, 529, 530, 892, 925, 950, 995, 996, 998, 1000, 1003, 1005, 1008], "stem": [104, 112, 156, 181, 231, 378, 382, 946, 956], "tibshirani": [104, 105, 116, 136, 170, 238, 343, 378, 381, 485, 524, 525, 593, 621, 686, 687, 688, 796, 813, 874, 875, 944, 948, 950, 955, 961, 970], "friedman": [104, 105, 116, 238, 376, 378, 381, 443, 481, 482, 483, 485, 523, 524, 525, 530, 558, 559, 796, 874, 875, 877, 948, 950, 955, 961, 970], "springer": [104, 105, 116, 238, 372, 374, 378, 379, 381, 485, 500, 524, 525, 655, 659, 661, 670, 685, 690, 704, 705, 720, 761, 874, 875, 951, 954, 955, 961, 970], "0255": 104, "0003": 104, "0152": 104, "0098": 104, "0196": 104, "0004": [104, 284, 569], "0092": 104, "baggingregressor": [104, 365, 381, 520, 877, 944, 998, 1001, 1003, 1006, 1010, 1011, 1013], "n_repeat": [104, 108, 115, 135, 154, 156, 157, 239, 256, 288, 378, 480, 599, 778, 779, 962], "knn": [104, 123, 128, 149, 262, 267, 268, 271, 284, 290, 299, 320, 381, 567, 815, 861, 862, 957, 967, 986, 1001], "y_predict": [104, 348, 995], "y_error": [104, 188], "y_nois": 104, "y_bia": 104, "y_var": 104, "plot_bias_vari": [104, 975], "z_i": [105, 958], "y_i": [105, 291, 316, 372, 381, 945, 946, 950, 954, 958, 968, 969, 970], "whilst": [105, 204], "practition": [105, 186], "suitabl": [105, 114, 166, 168, 186, 275, 322, 340, 341, 352, 355, 374, 379, 382, 417, 427, 433, 452, 470, 473, 592, 600, 801, 802, 805, 840, 841, 864, 919, 923, 948, 950, 953, 964, 966, 968, 973, 988, 1009, 1010], "ed": [105, 116, 374, 381, 485, 524, 525, 966, 995, 1002], "p592": 105, "593": 105, "kian": [105, 1000, 1010, 1011, 1012], "ho": [105, 381, 520, 521, 954, 1000, 1003, 1004, 1009], "hui": [105, 170, 503, 505, 512, 621, 950], "ordereddict": 105, "warm_start": [105, 142, 175, 291, 348, 352, 360, 381, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 575, 611, 613, 614, 617, 623, 625, 627, 631, 632, 633, 634, 641, 642, 643, 645, 761, 762, 815, 823, 824, 960, 976, 990, 995, 998, 999, 1000, 1003, 1004, 1005, 1006, 1009, 1011], "disabl": [105, 286, 295, 320, 344, 346, 365, 382, 414, 425, 433, 502, 503, 504, 511, 524, 525, 526, 527, 825, 843, 855, 864, 886, 887, 964, 1001, 1004, 1008, 1010, 1013], "trajectori": 105, "ensemble_clf": 105, "oob_scor": [105, 381, 520, 521, 522, 523, 529, 530, 1000, 1002], "log2": [105, 192, 221, 522, 523, 524, 525, 529, 530, 874, 875, 876, 877, 955], "error_r": 105, "min_estim": 105, "max_estim": 105, "oob_error": 105, "oob_score_": [105, 520, 521, 522, 523, 524, 525, 529, 530, 997, 1011], "clf_err": 105, "464": [105, 975], "plot_ensemble_oob": [105, 975], "betatim": [106, 121, 1010], "leak": [106, 244, 320, 329, 375, 378, 826, 851, 852, 854, 855, 856, 857, 964, 995, 1002, 1005, 1011, 1012], "80_000": 106, "x_full_train": 106, "y_full_train": 106, "x_train_ensembl": 106, "x_train_linear": 106, "y_train_ensembl": 106, "y_train_linear": 106, "gradientboostingclassifi": [106, 113, 116, 281, 329, 358, 518, 526, 597, 598, 955, 961, 995, 996, 997, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012], "random_forest": 106, "gradient_boost": [106, 997, 998, 1004], "histgradientboostingclassifi": [106, 107, 288, 289, 290, 291, 293, 295, 334, 524, 529, 597, 598, 944, 973, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "randomtreesembed": [106, 120, 203, 381, 876, 996, 1003, 1004, 1008, 1009, 1010], "random_tree_embed": 106, "rt_model": 106, "randomtreesembeddingrandomtreesembed": 106, "rf_appli": 106, "rf_leaves_yield": 106, "kw_arg": [106, 830, 964, 1001], "rf_model": 106, "0x7f7a7c5c7430": 106, "functiontransformerfunctiontransform": 106, "gbdt_appli": 106, "gbdt_leaves_yield": 106, "gbdt_model": 106, "0x7f7a7dd1a700": 106, "roccurvedisplai": [106, 219, 222, 236, 248, 249, 288, 353, 752, 753, 960, 992, 1005, 1011, 1012, 1013], "rt": 106, "rf": [106, 107, 121, 124, 125, 156, 288, 329, 381, 532, 534, 535], "gbdt": [106, 155, 288, 289, 294, 351, 381], "model_displai": 106, "670": [106, 184, 975], "plot_feature_transform": [106, 975], "hgbt": [107, 117, 381], "fetch_california_h": [107, 112, 149, 150, 279, 290, 341, 359, 375, 1004, 1006, 1013], "20640": [107, 150, 341, 455], "n_core": 107, "only_physical_cor": 107, "unnecessari": [107, 225, 351, 408, 611, 612, 617, 618, 625, 626, 627, 628, 646, 649, 670, 957, 964, 974, 978, 998, 1000, 1005, 1006, 1008, 1011], "min_samples_leaf": [107, 113, 114, 156, 288, 291, 324, 381, 522, 523, 524, 525, 526, 527, 529, 530, 531, 874, 875, 876, 877, 970, 1001], "early_stop": [107, 117, 155, 190, 274, 291, 320, 360, 381, 526, 527, 631, 632, 633, 641, 642, 643, 823, 824, 968, 1003, 1006, 1009, 1010], "return_train_scor": [107, 243, 285, 378, 763, 766, 767, 777, 789, 1001, 1002, 1004], "wast": [107, 352, 378, 379, 943], "plotli": [107, 240, 346, 364, 367], "cursor": [107, 240], "px": [107, 240], "make_subplot": 107, "shared_yax": 107, "subplot_titl": 107, "model_nam": [107, 219, 258], "colors_list": 107, "param_nam": [107, 240, 254, 294, 316, 365, 785, 793, 949, 988], "param_": 107, "scatter_fig": 107, "mean_fit_tim": [107, 261, 763, 777], "error_x": [107, 240], "std_fit_tim": [107, 261, 763, 777], "error_i": [107, 240], "hover_data": [107, 240], "line_fig": 107, "scatter_trac": 107, "line_trac": 107, "add_trac": 107, "mean_score_tim": [107, 237, 240, 763, 777], "std_score_tim": [107, 240, 763, 777], "update_layout": [107, 240], "xaxis2": 107, "traceord": 107, "borderwidth": 107, "plateau": [107, 112, 135, 237, 241], "earlier": [107, 155, 186, 340, 346, 377, 797, 800, 964, 993, 996, 1008, 1010], "never": [107, 217, 329, 346, 355, 358, 368, 374, 375, 377, 378, 415, 422, 488, 520, 521, 522, 529, 826, 827, 946, 964, 1005, 1008], "hgbdt": 107, "domin": [107, 150, 157, 182, 187, 219, 248, 284, 341, 352, 372, 846, 956, 964, 970, 1011], "ever": [107, 121, 355, 381, 978], "disput": 107, "alwai": [107, 111, 114, 161, 182, 200, 207, 213, 242, 245, 249, 286, 305, 312, 316, 321, 329, 333, 334, 340, 344, 346, 347, 348, 352, 359, 360, 364, 372, 374, 375, 378, 381, 382, 383, 384, 391, 397, 408, 414, 429, 430, 432, 434, 447, 448, 449, 453, 461, 473, 474, 509, 514, 516, 517, 519, 521, 523, 524, 525, 526, 527, 529, 530, 533, 535, 546, 553, 554, 556, 559, 576, 592, 593, 595, 597, 598, 600, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 625, 626, 627, 628, 629, 630, 632, 635, 636, 637, 638, 641, 643, 644, 660, 670, 674, 680, 686, 687, 688, 696, 698, 699, 703, 746, 749, 750, 761, 763, 764, 765, 766, 767, 768, 770, 771, 772, 773, 776, 777, 778, 779, 780, 781, 782, 783, 784, 799, 800, 809, 810, 817, 818, 824, 831, 839, 844, 846, 849, 851, 852, 853, 854, 855, 856, 857, 859, 867, 868, 869, 871, 872, 874, 875, 877, 904, 913, 914, 943, 944, 946, 948, 950, 953, 954, 957, 960, 962, 966, 967, 969, 970, 978, 979, 986, 995, 997, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1012, 1013], "thumb": [107, 159, 333, 346, 347, 358, 374, 623, 624, 631, 632, 633, 641, 642, 643, 866, 954], "613": [107, 228, 975], "plot_forest_hist_grad_boosting_comparison": [107, 975], "artifici": [108, 111, 119, 136, 150, 186, 202, 215, 277, 320, 341, 342, 343, 351, 371, 373, 374, 378, 379, 500, 661, 796, 823, 824, 947, 951, 953, 955, 961, 966, 970, 974, 978, 995], "feature_importances_": [108, 109, 115, 136, 156, 157, 360, 381, 383, 518, 519, 522, 523, 524, 525, 529, 530, 531, 558, 559, 562, 874, 875, 876, 877, 997, 1000, 1004], "estimators_": [108, 110, 217, 288, 360, 518, 519, 520, 521, 522, 523, 524, 525, 528, 529, 530, 531, 532, 533, 534, 535, 794, 795, 796, 797, 798, 799, 800, 996, 1002, 1009], "forest_import": 108, "mdi": [108, 115, 151, 152, 157, 381, 429, 461, 529, 595, 599, 792, 826, 840, 962, 975], "overcom": [108, 186, 333, 382], "permutation_import": [108, 109, 115, 156, 157, 288, 381, 518, 519, 522, 523, 524, 525, 529, 530, 531, 874, 875, 876, 877, 962, 1005, 1007, 1008, 1012], "importances_mean": [108, 115, 156, 157, 288, 599, 962], "importances_std": [108, 599, 962], "omit": [108, 153, 154, 302, 351, 387, 440, 499, 631, 633, 641, 770, 772, 794, 795, 798, 801, 802, 803, 804, 805, 823, 952, 959], "838": [108, 975], "plot_forest_import": [108, 975], "multicollinear": [108, 109, 151, 152, 156, 245, 300, 377, 465, 529, 599, 620, 792, 950, 962, 975], "hotter": 109, "job": [109, 117, 228, 346, 350, 354, 381, 385, 402, 409, 411, 413, 415, 417, 422, 423, 426, 429, 432, 433, 437, 496, 500, 501, 502, 504, 507, 508, 510, 511, 513, 520, 521, 522, 523, 528, 529, 530, 531, 532, 533, 534, 535, 567, 572, 573, 575, 599, 604, 622, 653, 654, 655, 656, 657, 658, 659, 738, 742, 745, 763, 766, 767, 769, 777, 785, 787, 788, 789, 790, 791, 793, 794, 795, 796, 798, 799, 808, 809, 810, 812, 814, 816, 817, 818, 819, 820, 825, 828, 861, 862, 864, 920, 978, 981], "five": [109, 117, 226, 298, 301, 341, 496, 504, 510, 951, 957, 969, 978, 995], "drawback": [109, 199, 946, 949], "img_shap": 109, "imp_reshap": 109, "093": [109, 204, 321, 436], "met": [109, 216, 348, 383, 499, 506, 592, 636, 950, 954, 1003], "plot_forest_importances_fac": [109, 975], "fourth": [110, 979], "descend": [110, 592, 1005], "extratreesclassifi": [110, 120, 381, 383, 523, 529, 531, 876, 877, 955, 998, 999, 1003, 1004, 1005, 1008, 1009, 1010, 1011, 1012], "decisiontre": [110, 518, 1000], "consol": [110, 344, 980], "extratre": [110, 120, 333, 998], "9266666666666666": 110, "9933333333333333": 110, "9866666666666667": 110, "rdylbu": [110, 325], "plot_step_coars": 110, "plot_idx": 110, "model_titl": 110, "model_detail": 110, "blend": [110, 122, 285, 360, 378, 973], "estimator_alpha": 110, "coarser": [110, 114], "regularli": [110, 256, 358, 956], "xx_coarser": 110, "yy_coars": 110, "z_points_coars": 110, "cs_point": 110, "plot_forest_iri": [110, 975], "ordinalencod": [111, 122, 155, 156, 182, 219, 285, 293, 340, 360, 546, 802, 834, 839, 847, 944, 956, 964, 1003, 1004, 1007, 1008, 1009, 1010, 1011, 1012], "equidist": [111, 657], "iowa": [111, 122, 219], "sale": [111, 219, 239, 954, 978], "42165": 111, "categorical_columns_subset": 111, "bldgtype": 111, "garagefinish": 111, "lotconfig": 111, "masvnrtyp": [111, 122], "housestyl": [111, 122], "fireplacequ": 111, "extercond": 111, "exterqu": [111, 122], "poolqc": 111, "numerical_columns_subset": 111, "3ssnporch": 111, "fireplac": 111, "bsmthalfbath": 111, "halfbath": 111, "garagecar": [111, 122], "totrmsabvgrd": 111, "bsmtfinsf1": [111, 122], "bsmtfinsf2": 111, "grlivarea": 111, "screenporch": 111, "n_categorical_featur": [111, 526, 527, 597, 598], "n_numerical_featur": 111, "1460": [111, 122], "make_column_transform": [111, 122, 154, 211, 289, 375, 429, 431, 1003], "dropper": 111, "hist_drop": 111, "hist_one_hot": 111, "etc": [111, 182, 200, 234, 243, 244, 329, 333, 335, 346, 348, 350, 351, 358, 359, 360, 365, 371, 375, 378, 382, 454, 468, 492, 522, 523, 529, 530, 633, 641, 657, 683, 735, 763, 777, 797, 800, 830, 841, 874, 875, 876, 877, 878, 880, 886, 887, 897, 912, 943, 944, 948, 954, 957, 973, 974, 978, 995, 1002, 1004, 1005], "ordinal_encod": [111, 219], "use_encoded_valu": [111, 122, 156, 219, 285, 840, 964, 1007], "unknown_valu": [111, 122, 156, 219, 285, 840, 964, 1007, 1009, 1010], "verbose_feature_names_out": [111, 154, 155, 156, 223, 285, 291, 292, 293, 295, 375, 429, 432, 825, 1008, 1012, 1013], "hist_ordin": 111, "hist_n": 111, "n_cv_fold": [111, 285, 769, 785, 790, 793], "dropped_result": 111, "one_hot_result": 111, "ordinal_result": 111, "native_result": 111, "figure_titl": 111, "plot_info": 111, "test_scor": [111, 113, 115, 117, 190, 238, 241, 256, 285, 316, 324, 359, 378, 769, 785, 789, 790, 793], "y_limit": 111, "mape_cv_mean": 111, "mape_cv_std": 111, "c0": [111, 212, 285], "slowest": [111, 902, 903], "theori": [111, 215, 230, 316, 343, 373, 374, 378, 381, 655, 659, 690, 720, 858, 859, 903, 943, 950, 951, 953, 954, 955, 969, 970], "poorer": [111, 329, 379], "slight": [111, 187, 290, 381, 414, 1005], "acf": 111, "bde": 111, "isol": [111, 118, 209, 219, 321, 344, 346, 352, 364, 528, 812, 870, 1004, 1005], "bcde": 111, "histgradientboostingregressor__max_depth": 111, "histgradientboostingregressor__max_it": 111, "altogeth": [111, 352, 1003], "428": [111, 975], "plot_gradient_boosting_categor": [111, 975], "asid": [112, 190, 368, 524, 525, 526, 527, 631, 632, 633, 641, 643, 823, 824], "validation_fract": [112, 117, 190, 291, 381, 524, 525, 526, 527, 631, 632, 633, 641, 643, 823, 824, 968, 1003, 1009], "monitor": [112, 166, 190, 349, 360, 518, 519, 524, 525, 526, 527, 958, 977, 998, 1003, 1005, 1007], "worsen": 112, "n_estimators_": [112, 524, 525], "valuabl": [112, 346, 944, 978], "strike": [112, 155, 186], "california": [112, 146, 149, 150, 279, 285, 290, 339, 343, 455, 990], "x_val": [112, 962], "y_val": [112, 962], "gbm_full": 112, "gbm_early_stop": 112, "training_time_ful": 112, "n_estimators_ful": 112, "training_time_early_stop": 112, "estimators_early_stop": 112, "train_errors_without": 112, "val_errors_without": 112, "train_errors_with": 112, "val_errors_with": 112, "train_pr": 112, "val_pr": 112, "set_yscal": [112, 182, 769], "training_tim": [112, 320], "196": [112, 139, 863, 967, 975], "plot_gradient_boosting_early_stop": [112, 975], "fly": [113, 351, 354, 473, 474, 547, 995, 997, 1004], "pessimist": [113, 381], "cumul": [113, 182, 200, 374, 690, 699, 720, 843, 855, 964, 968, 1002, 1004, 1005], "demand": [113, 117, 360, 382, 763, 777, 787, 788], "6860": 113, "special": [113, 154, 172, 200, 256, 269, 285, 308, 340, 342, 348, 352, 358, 360, 374, 377, 379, 429, 432, 518, 520, 524, 787, 878, 943, 948, 950, 952, 953, 954, 955, 957, 970, 1002, 1005, 1007, 1009], "expit": [113, 172, 381, 526, 950, 1002], "ridgewai": [113, 381], "gbm": [113, 381, 998], "x3": [113, 375, 987], "binomi": [113, 116, 381, 518, 524, 526, 950, 1009, 1012], "acc": 113, "heldout_scor": 113, "devianc": [113, 116, 182, 200, 294, 381, 518, 523, 524, 526, 527, 530, 613, 634, 645, 686, 687, 688, 711, 713, 716, 875, 877, 950, 970, 996, 1005, 1006, 1008, 1009, 1011], "y_proba": [113, 116, 284, 360, 674, 826, 1013], "staged_predict_proba": [113, 116, 518, 524, 526, 995], "cv_estim": 113, "cv_clf": 113, "val_scor": 113, "cv_score": 113, "cumsum": [113, 182, 200, 1002], "oob_improvement_": [113, 381, 524, 525, 997], "oob_best_it": 113, "test_best_it": 113, "cv_best_it": 113, "brew": [113, 344, 364], "oob_color": 113, "test_color": 113, "127": [113, 995], "201": [113, 136, 343, 549], "cv_color": 113, "253": [113, 499], "192": [113, 352, 995], "oob_lin": 113, "test_lin": 113, "cv_line": 113, "dashdot": [113, 138, 141, 219], "xticks_po": 113, "xticks_label": 113, "836": [113, 975], "plot_gradient_boosting_oob": [113, 975], "atleast_2d": [114, 348], "expected_i": 114, "amplitud": [114, 143, 145, 176, 950], "lognorm": [114, 144, 163, 229, 283, 964], "imposs": [114, 322, 974], "all_model": 114, "min_samples_split": [114, 115, 116, 243, 251, 280, 290, 381, 522, 523, 524, 525, 529, 530, 531, 766, 767, 874, 875, 876, 877, 943, 970, 1001], "gbr": 114, "gbr_l": 114, "y_med": 114, "unfortun": [114, 153, 154, 200, 354, 358, 381, 473, 474], "sinoisoid": 114, "highlight_min": [114, 171], "pbl": 114, "715413": 114, "750348": 114, "127128": 114, "253445": 114, "379763": 114, "933253": 114, "305438": 114, "622811": 114, "940184": 114, "827917": 114, "909909": 114, "145957": 114, "382005": 114, "667219": 114, "asymmetr": [114, 184, 360, 1000], "nor": [114, 242, 320, 329, 333, 351, 358, 372, 382, 402, 411, 559, 890, 958, 970, 1006], "917281": 114, "767498": 114, "617715": 114, "692901": 114, "144204": 114, "245961": 114, "347717": 114, "648026": 114, "412021": 114, "607752": 114, "803483": 114, "874771": 114, "354394": 114, "355445": 114, "356497": 114, "852774": 114, "extrem": [114, 182, 184, 218, 219, 279, 286, 300, 321, 346, 349, 374, 379, 522, 523, 529, 530, 531, 597, 598, 644, 688, 716, 876, 877, 878, 880, 954, 956], "coverage_fract": 114, "y_low": 114, "y_high": 114, "868": [114, 132], "hypothesi": [114, 239, 245, 378, 655, 659, 791, 951], "experiment": [114, 149, 150, 182, 250, 251, 290, 291, 344, 346, 348, 349, 356, 358, 360, 365, 378, 461, 514, 592, 661, 766, 767, 924, 943, 944, 950, 953, 954, 973, 974, 982, 990, 1003, 1004, 1007, 1008, 1009, 1010, 1012], "enable_halving_search_cv": [114, 250, 251, 290, 350, 766, 767, 943], "halvingrandomsearchcv": [114, 251, 290, 365, 544, 766, 943, 1007, 1009, 1010, 1011, 1012], "neg_mean_pinball_loss_05p_scor": 114, "greater_is_bett": [114, 706, 954], "search_05p": 114, "max_resourc": [114, 766, 767, 943], "min_resourc": [114, 766, 767], "neg_mean_pinball_loss_95p_scor": 114, "search_95p": 114, "estimator__alpha": 114, "did": [114, 138, 154, 157, 182, 190, 200, 226, 286, 341, 592, 677, 782, 868, 987, 996, 997, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1010], "untun": 114, "joint": [114, 151, 155, 160, 166, 168, 169, 171, 181, 202, 375, 576, 617, 627, 657, 801, 802, 803, 804, 805, 866, 950, 951, 955, 959, 961, 965, 975, 995], "9026666666666666": 114, "796": 114, "sadli": 114, "plot_gradient_boosting_quantil": [114, 975], "basic": [114, 137, 138, 143, 144, 146, 147, 150, 151, 180, 286, 313, 333, 335, 346, 348, 350, 358, 360, 374, 378, 379, 381, 576, 587, 862, 874, 875, 876, 877, 943, 944, 957, 968, 972, 973, 974, 975, 978, 986], "introductori": [114, 137, 138, 143, 144, 146, 147, 151, 208, 384, 576, 587, 975, 978], "tackl": [115, 239, 334, 346, 374, 803, 956, 978, 982], "katrina": [115, 1006], "ni": [115, 1001, 1006], "nilichen": 115, "reg": [115, 154, 162, 216, 280, 289, 313, 381, 523, 525, 533, 615, 616, 618, 619, 620, 621, 622, 628, 629, 630, 635, 636, 643, 644, 654, 658, 877, 950, 1000], "3044": 115, "4733": 115, "train_score_": [115, 381, 524, 525, 526, 527], "impur": [115, 157, 328, 363, 381, 383, 518, 519, 522, 523, 524, 525, 529, 530, 531, 874, 875, 876, 877, 878, 880, 970, 990, 1000, 1001, 1002, 1003], "feature_import": 115, "sorted_idx": [115, 288], "po": [115, 205, 382], "vert": [115, 156, 157, 288, 968], "314": [115, 124, 975], "plot_gradient_boosting_regress": [115, 975], "consider": [116, 117, 139, 142, 219, 234, 240, 246, 346, 384, 584, 763, 777, 943, 950, 956, 960, 968, 978, 1012], "make_hastie_10_2": [116, 243, 342, 381, 524, 961], "return_invers": [116, 348], "original_param": 116, "test_devi": 116, "702": [116, 975], "plot_gradient_boosting_regular": [116, 975], "lightgbm": [117, 381, 526, 527, 973, 1004, 1011], "xgboost": [117, 119, 381, 973], "usabl": [117, 340, 346, 348, 360, 368, 382, 763, 922, 995, 1002, 1009, 1010], "australian": [117, 364], "wale": 117, "suppli": [117, 358, 374, 611, 886, 887, 957, 978, 999, 1001, 1003, 1008], "transfer": [117, 365, 370, 950, 974], "victoria": 117, "elec2": 117, "312": [117, 998], "1998": [117, 239, 341, 343, 379, 381, 520, 521, 796, 801, 832, 955, 956, 958, 964, 968], "nswprice": 117, "nswdemand": 117, "vicpric": 117, "vicdemand": 117, "schedul": [117, 275, 334, 641, 642, 643, 823, 824, 968, 978, 1002], "stepwis": [117, 600, 619, 620, 621, 647, 648, 950], "17_760": 117, "414912": 117, "500526": 117, "pointplot": 117, "lineplot": [117, 239], "hue": [117, 230, 239, 284, 343], "labl": 117, "get_legend_handles_label": [117, 215, 241, 246], "capac": [117, 138, 156], "16531": 117, "11021": 117, "max_iter_list": 117, "prediction_df": 117, "average_pr": 117, "anymor": [117, 156, 182, 241, 288, 289, 308, 329, 350, 375, 635, 1001, 1004, 1007, 1008, 1009, 1011, 1012], "alon": [117, 154, 186, 245, 308, 360, 368, 372, 613, 634, 645, 706, 1002, 1004], "degrad": [117, 155, 209, 279, 316, 321, 380, 742, 962], "hbgt": 117, "validation_score_": [117, 526, 527], "overwrit": [117, 411, 461, 596, 979, 995, 1006, 1011, 1012], "ceil": [117, 219, 522, 523, 524, 525, 528, 529, 530, 531, 559, 636, 766, 767, 874, 875, 876, 877, 968], "grower": [117, 381, 526, 527], "child": [117, 216, 320, 328, 334, 358, 360, 365, 374, 381, 407, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 874, 875, 876, 877, 911, 912, 914, 922, 970, 1002], "sent": [117, 374, 795], "accordingli": [117, 155, 219, 312, 346, 350, 351, 1002, 1003, 1010], "mcar": 117, "missing": [117, 381, 592, 593, 595, 1004], "unobserv": [117, 153, 154, 379], "first_week": 117, "336": [117, 352, 964], "missing_fraction_list": 117, "generate_missing_valu": 117, "missing_fract": 117, "total_cel": 117, "num_missing_cel": 117, "row_indic": 117, "col_indic": 117, "x_miss": [117, 149, 150], "x_train_miss": 117, "x_test_miss": 117, "hgbt_quantil": 117, "tendenc": [117, 207, 950, 951, 953, 956, 959], "domain": [117, 182, 285, 360, 363, 378, 600, 686, 687, 688, 764, 765, 770, 771, 772, 950, 974], "regulatori": 117, "ethic": 117, "polici": [117, 153, 154, 182, 200, 360, 500, 506, 950, 1010], "partialdependencedisplai": [117, 119, 155, 220, 289, 290, 291, 293, 295, 353, 598, 961, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "monotonic_cst": [117, 119, 289, 291, 295, 381, 522, 523, 526, 527, 529, 530, 874, 875, 876, 877, 1010], "hgbt_no_cst": 117, "hgbt_cst": 117, "line_kw": [117, 119, 220, 241, 289, 295, 597, 769, 785], "unconstrain": [117, 119, 155, 289, 295, 341, 968], "axes_": [117, 119, 220, 289, 295, 353, 597], "overconstrain": 117, "scorer": [117, 122, 200, 243, 295, 348, 360, 365, 378, 381, 383, 526, 527, 559, 567, 599, 624, 638, 640, 676, 696, 697, 706, 763, 766, 767, 769, 777, 785, 788, 789, 790, 793, 912, 943, 950, 954, 962, 974, 999, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "030": [117, 321], "034": [117, 321, 436], "said": [117, 154, 209, 240, 341, 346, 756, 952, 960, 979, 986], "317": [117, 143, 321, 975], "plot_hgbt_regress": [117, 975], "deform": [118, 230, 318], "notat": [118, 360, 375, 379, 382, 555, 677, 950, 954, 979, 1004, 1011], "cluster_1": 118, "cluster_2": 118, "nuniformli": 118, "max_sampl": [118, 149, 381, 520, 521, 522, 523, 528, 529, 530, 599, 1005, 1008, 1011], "isolationforestifittedisolationforest": 118, "ax_": [118, 233, 242, 246, 248, 254, 262, 284, 288, 353, 403, 596, 662, 663, 665, 666, 667, 769, 785], "nof": 118, "411": [118, 154, 376, 386, 438, 498, 975], "plot_isolation_forest": [118, 975], "trend": [119, 143, 155, 212, 275, 978, 1002], "f_0": 119, "f_1": [119, 246, 954], "gbdt_no_cst": [119, 289], "histgradientboostingregressorifittedhistgradientboostingregressor": [119, 293], "gbdt_with_monotonic_cst": 119, "f_idx": 119, "oscil": [119, 155, 187, 374, 405], "x_df": 119, "gbdt_with_monotonic_cst_df": 119, "552": [119, 975], "plot_monotonic_constraint": [119, 975], "excel": [120, 340, 346, 381, 655, 659, 950, 978], "bernoullinb": [120, 335, 802, 803, 804, 805, 955, 956, 996, 997, 999, 1002, 1007, 1008, 1010], "truncatedsvd": [120, 203, 321, 379, 499, 500, 504, 505, 506, 657, 825, 828, 997, 1002, 1006, 1007, 1009], "hasher": [120, 322, 382], "transformed_grid": 120, "y_grid_pr": 120, "330": [120, 298, 975], "plot_random_forest_embed": [120, 975], "multioutput": [121, 248, 258, 348, 360, 365, 397, 430, 447, 448, 449, 516, 519, 521, 522, 523, 525, 527, 529, 530, 533, 535, 576, 597, 598, 600, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 625, 626, 627, 628, 629, 630, 632, 635, 637, 638, 643, 644, 686, 687, 692, 709, 710, 712, 714, 715, 717, 749, 752, 754, 755, 787, 795, 809, 817, 824, 833, 867, 869, 872, 874, 875, 876, 877, 892, 917, 918, 954, 975, 976, 990, 995, 996, 997, 1001, 1002, 1008, 1009], "multioutputregressor": [121, 365, 397, 430, 447, 448, 449, 519, 521, 523, 525, 527, 530, 533, 535, 576, 600, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 625, 626, 627, 628, 629, 630, 632, 635, 637, 638, 643, 644, 798, 800, 809, 817, 824, 867, 869, 872, 875, 877, 1001, 1002, 1004, 1006, 1007, 1011, 1012], "centr": 121, "regr_multirf": 121, "regr_rf": 121, "y_multirf": 121, "y_rf": 121, "cornflowerblu": [121, 176, 185, 192, 226, 228, 231, 246, 248, 264, 270, 326, 327], "499": [121, 136, 343, 352, 975], "plot_random_forest_regression_multioutput": [121, 975], "compil": [122, 259, 322, 333, 334, 346, 347, 348, 349, 354, 355, 358, 973, 995], "dean": [122, 1003, 1009, 1011], "cock": [122, 1004], "becam": [122, 361, 1003], "kaggl": [122, 359], "residenti": 122, "won": [122, 276, 321, 350, 374, 433, 461, 592, 593, 595, 652, 669, 682, 700, 701, 719, 721, 759, 953, 964, 1000, 1001, 1006], "load_ames_h": 122, "yrsold": 122, "heatingqc": 122, "street": [122, 136, 343], "yearremodadd": 122, "heat": [122, 308, 374, 417, 427, 660], "bsmtunfsf": 122, "mssubclass": 122, "condition2": 122, "garagetyp": 122, "overallqu": 122, "totalbsmtsf": 122, "miscfeatur": 122, "mosold": 122, "cat_selector": 122, "num_selector": 122, "besid": [122, 212, 346, 351, 554, 943, 1003], "cat_tree_processor": 122, "encoded_missing_valu": [122, 156, 840, 964, 1009, 1010], "num_tree_processor": 122, "add_ind": [122, 150, 592, 593, 595, 944, 1004, 1007, 1011], "tree_preprocessor": [122, 182], "0x7f7a7dad2730": 122, "0x7f7a7dad2f10": 122, "columntransformerinot": [122, 155], "fittedcolumntransform": [122, 155], "ordinalencoderordinalencod": [122, 155, 156, 285], "cat_linear_processor": 122, "num_linear_processor": 122, "linear_preprocessor": 122, "tediou": 122, "wrote": [122, 341], "lasso_pipelin": 122, "pipelineinot": [122, 211, 221, 240, 285, 289], "fittedpipelin": [122, 211, 221, 240, 285, 289], "lassocvlassocv": 122, "rf_pipelin": 122, "randomforestregressorrandomforestregressor": [122, 125], "gbdt_pipelin": 122, "histgradientboostingregressorhistgradientboostingregressor": [122, 285], "stackingregressor": [122, 288, 360, 365, 381, 532, 944, 1005, 1006, 1007, 1008, 1009, 1012], "stacking_regressor": 122, "final_estim": [122, 288, 381, 532, 533], "unknown_v": 122, "stackingregressorinot": 122, "fittedstackingregressor": 122, "ridgecvridgecv": [122, 154], "cross_val_predict": [122, 235, 288, 365, 372, 378, 381, 402, 532, 533, 788, 789, 999, 1000, 1001, 1002, 1004, 1006, 1008, 1012], "line_kwarg": [122, 666], "nevalu": 122, "905": [122, 237, 975], "plot_stack_predictor": [122, 975], "exemplari": [123, 124], "eclf": [123, 124, 381], "axarr": [123, 279], "tt": [123, 234, 430], "637": [123, 975], "plot_voting_decision_region": [123, 975], "class1_1": 124, "class2_1": 124, "lightgreen": [124, 188, 199], "p3": 124, "p4": 124, "nweight": 124, "plot_voting_proba": [124, 975], "votingregressor": [125, 365, 381, 534, 944, 1004, 1005, 1006, 1009, 1012, 1013], "cohort": 125, "reg1": [125, 381], "reg2": [125, 381], "reg3": [125, 381], "ereg": [125, 381], "gb": [125, 381, 518, 598], "votingregressorifittedvotingregressor": 125, "gradientboostingregressorgradientboostingregressor": 125, "linearregressionlinearregress": 125, "xt": [125, 259, 360, 410, 503, 505, 592, 594, 763, 766, 767, 777, 810, 818, 826, 831, 836, 843, 855, 884, 1011], "pred1": 125, "pred2": 125, "pred3": 125, "pred4": 125, "labelbottom": [125, 239], "926": [125, 975], "plot_voting_regressor": [125, 975], "n_fold": [127, 612, 616, 618, 620, 624, 626, 628, 996, 997, 1001], "scores_std": [127, 983], "semilogx": [127, 171, 252, 983], "std_error": 127, "transluc": 127, "999999999999999e": 127, "31622776601683794": 127, "answer": [127, 153, 239, 346, 358, 690, 720, 954, 978], "extern": [127, 138, 335, 339, 343, 346, 348, 351, 358, 360, 371, 374, 382, 383, 384, 558, 575, 576, 682, 701, 759, 950, 953, 954, 957, 970, 974, 980, 986, 990, 1003, 1007], "lasso_cv": 127, "k_fold": [127, 983], "maximis": [127, 226, 267, 948, 957], "5f": [127, 292], "moreov": [127, 144, 281, 292, 329, 350, 374, 378, 384, 859, 924, 954, 962, 978, 1003, 1009, 1010], "substanti": [127, 261, 265, 266, 280, 346, 812, 960, 999, 1002], "05968": 127, "54209": 127, "04520": 127, "15521": 127, "07880": 127, "45192": 127, "519": [127, 975], "plot_cv_diabet": [127, 975], "aic": [127, 151, 160, 166, 168, 170, 176, 190, 230, 466, 616, 618, 619, 620, 621, 762, 827, 846, 943, 975, 995, 1002, 1008, 1009], "bic": [127, 151, 160, 166, 168, 170, 176, 190, 383, 466, 616, 618, 619, 620, 621, 762, 827, 846, 943, 953, 975, 995, 1002, 1008, 1009], "961111": 128, "933333": [128, 815], "plot_digits_classification_exercis": [128, 975], "200j": 129, "265": [129, 699, 801, 805, 956, 975], "plot_iris_exercis": [129, 975], "x_2": [131, 141, 179, 379, 381, 382, 384, 578, 590, 950, 958, 964], "x_3": [131, 964], "irrelev": [131, 166, 329, 352, 376, 381, 383, 569, 704, 954], "agre": [131, 354, 361, 373, 374, 750, 979], "percept": [131, 155, 961], "correctli": [131, 135, 182, 200, 216, 246, 248, 253, 269, 286, 299, 308, 346, 355, 379, 381, 391, 402, 434, 458, 514, 515, 516, 518, 520, 522, 524, 526, 529, 532, 534, 575, 623, 631, 633, 639, 640, 641, 668, 758, 760, 794, 795, 796, 797, 801, 802, 803, 804, 805, 808, 813, 816, 823, 846, 861, 862, 866, 868, 869, 870, 871, 872, 874, 876, 904, 951, 954, 957, 958, 964, 969, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "mutual_info_regress": [131, 292, 383, 557, 560, 561, 564, 565, 574, 1001, 1002, 1007, 1009, 1010, 1011, 1013], "f_test": 131, "x_": [131, 139, 231, 239, 288, 348, 374, 377, 379, 592, 600, 728, 821, 861, 862, 950, 956, 961, 1001], "227": [131, 239, 251, 374, 689, 975], "plot_f_test_vs_mi": [131, 975], "halv": [131, 151, 232, 243, 247, 315, 369, 480, 529, 544, 763, 766, 767, 871, 975, 990, 1007], "examin": [132, 352, 354, 374, 815], "f_classif": [132, 133, 311, 383, 557, 560, 561, 563, 564, 565, 569, 571, 574], "log10": [132, 144, 154, 167, 175, 240, 308], "pvalues_": [132, 557, 560, 561, 563, 564, 565, 995], "x_indic": 132, "p_": [132, 954, 957, 970], "svm_weight": 132, "789": [132, 381], "clf_select": 132, "svm_weights_select": 132, "get_support": [132, 136, 290, 546, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 997], "193": [132, 352, 381, 680, 750, 967, 975], "plot_feature_select": [132, 975], "anova_filt": 133, "anova_svm": 133, "selectkbestselectkbest": [133, 292], "Be": [133, 147, 320, 346, 376, 532, 533, 613, 619, 620, 621, 623, 624, 634, 645, 669, 781, 782, 841, 964, 992, 996], "75788833": 133, "27161955": 133, "26113448": 133, "plot_feature_selection_pipelin": [133, 975], "rfe": [134, 135, 365, 383, 559, 562, 567, 995, 999, 1005, 1006, 1007, 1008, 1009, 1011, 1012], "n_features_to_select": [134, 136, 290, 383, 558, 567, 1007, 1009], "ranking_": [134, 558, 559], "plot_rfe_digit": [134, 975], "introduct": [135, 200, 237, 346, 378, 379, 382, 555, 752, 753, 801, 805, 950, 952, 954, 956, 972, 980, 986, 989, 990], "class_sep": [135, 269, 480], "rfecv": [135, 365, 383, 558, 562, 567, 999, 1001, 1003, 1005, 1006, 1007, 1008, 1011, 1012], "stratifiedkfold": [135, 227, 234, 245, 249, 300, 378, 402, 532, 533, 559, 567, 624, 638, 763, 764, 766, 767, 768, 769, 771, 773, 777, 781, 783, 785, 786, 787, 788, 789, 790, 791, 793, 847, 983, 996, 997, 998, 1001, 1002, 1003, 1004, 1005, 1008], "min_features_to_select": [135, 559, 1003], "n_features_": [135, 558, 559, 1008, 1010], "n_score": 135, "525": [135, 404, 593, 944, 975], "plot_rfe_with_cross_valid": [135, 975], "selectfrommodel": [136, 360, 365, 558, 567, 568, 976, 990, 1000, 1001, 1002, 1003, 1005, 1007, 1008, 1009, 1011, 1012], "sequentialfeatureselector": [136, 365, 383, 558, 562, 568, 1007, 1008, 1009, 1010, 1011], "greedi": [136, 381, 383, 412, 414, 425, 524, 525, 567, 950, 970], "442": [136, 150, 343, 466, 986], "descr": [136, 339, 340, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 465, 466, 467, 468, 469, 470, 472, 475, 985, 1003], "_diabetes_dataset": 136, "mass": [136, 220, 343, 411, 761, 950, 961], "blood": [136, 210, 343, 986], "pressur": [136, 343, 986], "six": [136, 183, 203, 283, 343, 1004], "serum": [136, 343], "bmi": [136, 170, 171, 220, 343, 962], "tc": [136, 343, 361], "cholesterol": [136, 343], "ldl": [136, 343], "lipoprotein": [136, 343], "hdl": [136, 343], "s4": [136, 170, 171, 343], "tch": [136, 343], "s5": [136, 170, 171, 343, 962], "ltg": [136, 343, 466], "triglycerid": [136, 343], "s6": [136, 170, 171, 343], "glu": [136, 343], "sugar": [136, 343], "www4": [136, 343], "ncsu": [136, 343], "boo": [136, 343], "bradlei": [136, 343, 950], "efron": [136, 343, 647, 648, 950], "trevor": [136, 170, 293, 343, 593, 621, 686, 687, 688, 944, 950, 966, 999, 1000, 1003, 1004, 1005, 1007], "iain": [136, 343, 950], "johnston": [136, 343, 950, 1004], "annal": [136, 166, 170, 343, 381, 439, 481, 482, 483, 524, 525, 621, 950], "407": [136, 343], "web": [136, 340, 341, 343, 346, 349, 354, 374, 382, 486, 859, 954, 964, 991, 995], "stanford": [136, 343, 614, 647, 648, 801, 804, 805, 859, 952], "leastangle_2002": [136, 343], "pdf": [136, 239, 264, 279, 343, 346, 374, 383, 407, 414, 496, 499, 502, 506, 606, 609, 614, 623, 629, 631, 632, 636, 641, 644, 647, 648, 650, 651, 657, 803, 804, 815, 822, 859, 861, 950, 967, 970, 977, 991, 995], "pitfal": [136, 151, 152, 153, 156, 178, 186, 187, 290, 359, 360, 363, 378, 430, 432, 461, 618, 637, 638, 666, 717, 778, 789, 792, 827, 839, 846, 950, 975, 990], "e501": [136, 320], "accept": [136, 138, 216, 236, 288, 308, 320, 322, 329, 333, 334, 340, 346, 348, 355, 358, 359, 360, 361, 365, 368, 370, 374, 382, 402, 406, 409, 410, 413, 426, 429, 432, 473, 474, 520, 521, 526, 527, 534, 535, 546, 547, 558, 559, 562, 593, 600, 604, 608, 611, 612, 617, 618, 644, 691, 706, 742, 761, 762, 766, 767, 808, 809, 816, 817, 826, 830, 884, 886, 887, 890, 950, 952, 954, 957, 962, 964, 969, 973, 974, 983, 995, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "tic": [136, 155, 219, 250, 956], "sfm": 136, "toc": [136, 219], "sf": [136, 239, 290, 341, 383, 457, 567], "backward": [136, 216, 290, 349, 360, 383, 461, 542, 567, 579, 580, 583, 584, 585, 587, 588, 879, 882, 954, 958, 974, 995, 998, 1003, 1004, 1005, 1007, 1009, 1011], "tic_fwd": 136, "sfs_forward": 136, "toc_fwd": 136, "tic_bwd": 136, "sfs_backward": 136, "toc_bwd": 136, "502": 136, "isn": [136, 288, 320, 322, 329, 334, 346, 354, 480, 526, 527, 559, 758, 766, 767, 839, 957, 969, 1005], "sound": [136, 329], "finish": [136, 228, 951], "expos": [136, 216, 256, 291, 293, 334, 339, 343, 360, 365, 372, 375, 381, 383, 384, 402, 429, 518, 519, 526, 527, 532, 533, 534, 535, 558, 559, 567, 576, 763, 766, 767, 777, 795, 796, 797, 798, 799, 800, 881, 922, 950, 954, 956, 983, 985, 987, 992, 995, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "breast": [136, 339, 465, 962, 990, 1000], "cancer": [136, 339, 465, 558, 559, 813, 962, 990, 1000], "569": [136, 300, 343, 465, 557, 560, 561, 563], "load_breast_canc": [136, 157, 300, 324, 351, 557, 560, 561, 563, 639, 640, 752, 954, 1000, 1001, 1006], "breast_cancer_data": 136, "_breast_cancer_dataset": 136, "wisconsin": [136, 157, 339, 465, 962, 990, 1000], "diagnost": [136, 157, 242, 339, 360, 465, 677, 788, 789, 954, 962, 973, 974, 990], "radiu": [136, 254, 266, 308, 343, 374, 407, 415, 653, 728, 745, 806, 807, 808, 809, 810, 814, 816, 817, 818, 820, 957, 997, 999, 1009, 1012], "perimet": [136, 343], "textur": [136, 343, 722, 723, 952], "compact": [136, 159, 279, 333, 343, 806, 807, 970, 997], "concav": [136, 343], "symmetri": [136, 343, 664, 839, 842, 854, 952], "fractal": [136, 343], "worst": [136, 182, 285, 343, 374, 409, 412, 673, 693, 694, 747, 748, 751, 756, 757, 791, 954, 978, 995, 1008], "field": [136, 200, 343, 371, 374, 375, 382, 463, 466, 582, 950, 952, 961, 969, 973, 977, 988, 996], "se": [136, 204, 343, 364], "wdbc": [136, 343], "malign": [136, 343, 465], "benign": [136, 343, 465], "981": [136, 343, 954], "188": [136, 143, 305, 343, 352, 549, 975], "2501": [136, 343], "163": [136, 256, 343, 962], "019": [136, 343, 352, 436], "427": [136, 343, 471, 472, 548, 549, 552], "106": [136, 223, 343, 842, 948, 996], "873": [136, 343], "757": [136, 237, 259, 343], "542": [136, 166, 343], "031": [136, 138, 343], "008": [136, 321, 343, 352], "079": [136, 343], "251": [136, 204, 343], "4254": [136, 343], "071": [136, 194, 343, 402, 975], "027": [136, 343], "058": [136, 237, 343], "252": [136, 204, 343, 499, 842, 854], "291": [136, 321, 341, 343], "156": [136, 154, 343], "664": [136, 343], "208": [136, 179, 197, 259, 300, 343, 975], "357": [136, 343, 465, 867], "creator": [136, 340, 343], "william": [136, 341, 343, 384, 575, 576, 579, 584, 587, 604, 946, 954, 958, 1002, 1003, 1004, 1005, 1010, 1011], "wolberg": [136, 343], "nick": [136, 343, 995, 1001, 1002, 1003, 1004], "olvi": [136, 343], "mangasarian": [136, 343], "donor": [136, 343], "novemb": [136, 182, 200, 343, 1000, 1001, 1003], "1995": [136, 239, 343, 372, 381, 518, 519, 796, 863, 955], "goo": [136, 343], "gl": [136, 343], "u2uwz2": [136, 343], "needl": [136, 343], "aspir": [136, 343, 346], "fna": [136, 343], "nuclei": [136, 343], "multisurfac": [136, 343], "msm": [136, 343], "bennett": [136, 343, 954], "4th": [136, 146, 343], "midwest": [136, 343], "cognit": [136, 343], "societi": [136, 343, 374, 376, 434, 439, 506, 592, 842, 854, 950, 968], "1992": [136, 341, 343, 378, 381, 532, 533, 610, 950], "exhaust": [136, 240, 288, 289, 290, 291, 292, 293, 294, 295, 333, 343, 351, 359, 369, 374, 381, 763, 766, 767, 777, 856, 857, 859, 950, 988, 990], "insepar": [136, 343], "uw": [136, 343, 1007], "ftp": [136, 343, 647, 648], "wisc": [136, 343, 861], "prog": [136, 343], "cpo": [136, 343], "nuclear": [136, 343], "tumor": [136, 343], "diagnosi": [136, 242, 343, 813], "spie": [136, 343], "1993": [136, 343, 439, 629, 650, 651, 970], "symposium": [136, 343, 374, 425], "technologi": [136, 343, 374, 973, 978], "1905": [136, 343], "861": [136, 215, 343, 752, 753, 954, 975], "870": [136, 343], "san": [136, 343, 382, 966], "jose": [136, 343, 623, 954, 1003, 1005], "ca": [136, 343, 374, 407, 874, 875, 966, 970], "prognosi": [136, 343], "570": [136, 202, 343, 975, 986], "577": [136, 343], "juli": [136, 343, 383, 698, 847, 964, 998, 1002, 1003, 1004], "august": [136, 343, 374, 476, 499, 969, 995, 997, 998, 1002, 1009], "diagnos": [136, 242, 343, 354, 363, 375], "letter": [136, 146, 341, 343, 350, 382, 752, 753, 769, 785, 954], "1994": [136, 341, 343, 609], "feature_selector": 136, "ntol": 136, "975": [136, 153, 969], "033": [136, 962], "083": [136, 237, 326, 975], "998": [136, 958], "537": 136, "431": [136, 343, 975], "plot_select_from_model_diabet": [136, 975], "gpr": [137, 138, 139, 145, 147, 151, 461, 575, 576, 578, 579, 580, 581, 586, 587, 588, 589, 590, 975, 976, 990, 1005], "co2": [137, 144, 145, 151, 384, 461, 576, 580, 587, 588, 590, 975, 1002], "mona": [137, 144, 145, 151, 384, 461, 576, 580, 587, 588, 590, 975], "loa": [137, 144, 145, 151, 384, 461, 576, 580, 587, 588, 590, 975], "xor": [137, 139, 140, 141, 143, 145, 151, 192, 195, 282, 314, 575, 579, 587, 950, 970, 975, 1002], "trick": [138, 215, 269, 312, 322, 332, 335, 349, 358, 375, 547, 554, 608, 637, 946, 947, 958, 968, 969, 986, 987, 990, 996, 1004, 1012], "drastic": [138, 213, 247, 374, 378, 957, 967], "theorem": [138, 316, 373, 956], "reus": [138, 175, 240, 288, 322, 348, 360, 374, 375, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 599, 611, 613, 614, 617, 623, 625, 627, 631, 632, 633, 634, 641, 642, 643, 645, 823, 824, 962, 966, 978, 1002, 1012], "training_sample_indic": 138, "training_data": 138, "training_noisy_target": 138, "newer": [138, 345, 364, 379], "expsinesquar": [138, 143, 147, 384], "emb": [138, 203, 213, 268, 339, 340, 427, 660, 951], "kernel_ridg": [138, 215, 999], "length_scal": [138, 139, 142, 143, 144, 145, 147, 384, 577, 580, 583, 584, 586, 587, 588, 589], "tell": [138, 154, 155, 216, 239, 308, 313, 334, 341, 374, 382, 528, 544, 943, 948, 961, 988], "1e0": [138, 215, 231, 247, 943], "kernel__length_scal": 138, "kernel__period": 138, "1e1": [138, 144, 182, 215, 308], "kernel_ridge_tun": 138, "923": 138, "9915849773450223": 138, "7986499491396727": 138, "607275806426107": 138, "predictions_kr": 138, "gaussianprocessregressor": [138, 143, 144, 145, 146, 147, 384, 575, 578, 579, 580, 581, 582, 586, 589, 590, 608, 998, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "whitekernel": [138, 143, 144, 384, 576, 577, 579, 1006], "periodicity_bound": [138, 143, 147, 580], "kernel_": [138, 139, 140, 141, 142, 143, 144, 145, 147, 575, 576], "675": 138, "57": [138, 154, 198, 248, 277, 343, 344, 364, 366, 367, 375, 670, 725, 745, 799, 954, 964, 995], "noise_level": [138, 143, 144, 577, 590], "182": [138, 168, 277, 352, 381], "mean_predictions_gpr": 138, "std_predictions_gpr": 138, "return_std": [138, 143, 144, 145, 147, 161, 162, 360, 517, 532, 533, 576, 578, 579, 580, 581, 590, 592, 609, 610, 826, 1002, 1003, 1007, 1012], "length_scale_bound": [138, 144, 145, 147, 384, 576, 580, 584, 587, 588], "attenu": 138, "627": [138, 975], "plot_compare_gpr_krr": [138, 975], "arbitrarili": [139, 226, 231, 320, 360, 384, 397, 430, 447, 448, 449, 517, 519, 521, 523, 525, 527, 530, 533, 535, 576, 600, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 625, 626, 627, 628, 629, 630, 632, 634, 635, 637, 638, 643, 644, 645, 686, 687, 688, 710, 749, 753, 799, 800, 809, 817, 824, 847, 867, 869, 872, 875, 877, 954, 957, 964, 970], "lml": [139, 140, 144, 384], "exhibit": [139, 187, 312, 320, 363, 378, 379, 381, 384, 962], "steep": [139, 155, 248, 249, 374, 378, 384, 415, 421], "laplac": [139, 384, 575, 576, 801, 802, 803, 805, 956], "319": [139, 988], "gp_fix": 139, "gp_opt": 139, "log_marginal_likelihood": [139, 140, 142, 144, 147, 384, 575, 576, 1005], "theta": [139, 140, 142, 144, 146, 147, 217, 379, 384, 488, 501, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 657, 956, 970], "landscap": 139, "theta0": 139, "theta1": 139, "pcolor": 139, "xscale": [139, 144, 215, 769], "yscale": [139, 144, 182, 215, 320, 769], "plot_gpc": [139, 975], "gpc_rbf_isotrop": 140, "gpc_rbf_anisotrop": 140, "m_max": 140, "plot_gpc_iri": [140, 975], "0256": [141, 320], "dotproduct": [141, 142, 147, 384, 576, 590], "sigma_0": [141, 142, 147, 384, 579], "constantkernel": [141, 147, 384, 576, 582, 586, 589], "lim": [141, 499], "61611719": 141, "00099547": 141, "10469096": 141, "32782448": 141, "00000000": 141, "50000000": 141, "17289014": 141, "6984743": 141, "3109306": 141, "93271427": 141, "03823144": 141, "10584743": 141, "87600388": 141, "74310541": 141, "21301203": 141, "26386883": 141, "gp": [141, 146, 384, 575, 576, 587, 1001], "cb": [141, 213, 229], "widehat": 141, "mathbf": [141, 312, 379, 950, 954, 958, 959, 968], "leq": [141, 379, 381, 950, 954, 957, 968, 969, 970], "clim": 141, "666": [141, 301, 374, 808, 944], "clabel": [141, 193], "334": 141, "plot_gpc_isoprob": [141, 975], "stationari": [142, 384, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590], "coincid": [142, 184, 384], "455": [142, 144, 285], "convergencewarn": [142, 144, 146, 147, 190, 197, 226, 275, 276, 281, 355, 360, 761, 762, 1003, 1004, 1007], "k1__constant_valu": 142, "100000": [142, 215, 225, 346, 578, 579, 580, 584, 585, 587, 588, 590, 855, 947, 986, 988], "puor_r": [142, 314], "497": [142, 975], "plot_gpc_xor": [142, 975], "rw2006": [143, 384, 575, 576], "ascent": [143, 384], "monthli": [143, 361, 954], "atmospher": 143, "ppm": 143, "mauna": 143, "observatori": 143, "hawaii": 143, "1958": [143, 379, 381, 497], "air": [143, 728], "41187": 143, "flag": [143, 219, 295, 344, 346, 347, 349, 365, 370, 429, 575, 576, 592, 638, 640, 692, 749, 969, 1001, 1005, 1006, 1008, 1009, 1010, 1011], "station": 143, "mlo": 143, "co2_data": 143, "to_datetim": 143, "timestamp": 143, "march": [143, 690, 720, 954, 995, 999, 1003, 1005, 1010], "co2_data_resampled_monthli": 143, "me": [143, 320], "nfrom": 143, "upcom": [143, 344], "to_numpi": 143, "rise": 143, "irregular": [143, 312, 374, 957], "long_term_trend_kernel": 143, "decai": [143, 509, 823, 824, 903, 954, 968, 999], "seasonal_kernel": 143, "ration": [143, 588, 952], "diffus": 143, "accommod": [143, 1003], "rationalquadrat": [143, 147, 384, 581], "irregularities_kernel": 143, "shall": 143, "phenomena": 143, "noise_kernel": 143, "noise_level_bound": [143, 144, 590], "co2_kernel": 143, "subtract": [143, 154, 219, 377, 379, 408, 412, 424, 499, 609, 610, 1002, 1012], "normalize_i": [143, 384, 576, 1009], "y_mean": [143, 144, 147, 576, 609, 610], "gaussianprocessregressorifittedgaussianprocessregressor": 143, "todai": [143, 988], "current_month": 143, "mean_y_pr": 143, "std_y_pr": 143, "968": [143, 153, 237, 321, 975], "0367": 143, "6ppm": 143, "901": [143, 975], "plot_gpr_co2": [143, 975], "target_gener": 144, "add_nois": 144, "minima": [144, 170, 379, 412, 657, 951, 987, 1003], "y_std": [144, 147, 517, 576, 609, 610, 1008], "k1__k2__length_scal": [144, 384], "noptimum": 144, "nlog": 144, "length_scale_grid": 144, "noise_level_grid": 144, "newshap": 144, "668": [144, 155, 975], "plot_gpr_noisi": [144, 975], "tikhonov": [145, 384, 637], "training_indic": 145, "n_restarts_optim": [145, 384, 575, 576], "std_predict": 145, "whenev": [145, 153, 329, 340, 354, 360, 364, 372, 447, 448, 449, 461, 593, 595, 945, 953, 974, 1005], "noise_std": 145, "y_train_noisi": 145, "694": [145, 975], "plot_gpr_noisy_target": [145, 975], "gene": [146, 340, 371, 416, 478, 558, 559, 813, 846], "brighter": 146, "6th": 146, "haussler": 146, "1999": [146, 341, 372, 374, 376, 379, 381, 402, 415, 422, 434, 439, 499, 506, 520, 521, 524, 525, 687, 860, 868, 869, 871, 872, 960, 966], "646": [146, 166, 322, 975], "technic": [146, 183, 203, 292, 341, 343, 346, 360, 381, 617, 629, 650, 651, 861, 950, 951, 957], "depart": [146, 374], "santa": [146, 1010], "cruz": 146, "generickernelmixin": [146, 1005], "sequencekernel": 146, "baseline_similar": 146, "baseline_similarity_bound": 146, "hyperparameter_baseline_similar": 146, "_f": [146, 950], "_g": 146, "__call__": [146, 308, 360, 382, 384, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 1002], "eval_gradi": [146, 384, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590], "is_stationari": [146, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590], "clone_with_theta": [146, 384, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590], "agct": 146, "agc": 146, "aact": 146, "taa": 146, "aaa": 146, "gaaca": 146, "training_idx": 146, "cga": 146, "taac": 146, "tcg": 146, "cttt": 146, "tgct": 146, "atag": 146, "ctc": 146, "445": [146, 962], "plot_gpr_on_structured_data": [146, 975], "plot_gpr_sampl": 147, "gpr_model": 147, "y_sampl": [147, 576], "sample_i": [147, 384, 576, 1009], "single_prior": 147, "pm": [147, 155, 249, 381, 954], "dev": [147, 154, 200, 244, 249, 344, 346, 350, 352, 354, 954, 978, 991, 1002, 1007, 1010, 1011], "594": [147, 182], "279": [147, 950], "067": 147, "alpha_bound": [147, 588], "1e15": 147, "05e": 147, "799": [147, 321], "791": 147, "sigma_0_bound": [147, 579], "_gpr": 147, "lbfg": [147, 274, 348, 613, 614, 623, 624, 634, 637, 639, 645, 652, 797, 800, 823, 824, 950, 958, 999, 1000, 1002, 1003, 1008, 1009, 1010, 1012], "abnormal_termination_in_lnsrch": 147, "479": [147, 183, 975], "7337046907": 147, "481": 147, "matern": [147, 384, 1006, 1010], "609": [147, 352], "484": 147, "695": [147, 237, 975], "plot_gpr_prior_posterior": [147, 975], "iterativeimput": [148, 150, 151, 365, 455, 530, 545, 593, 594, 595, 604, 610, 637, 788, 809, 827, 975, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013], "robin": [149, 150, 592, 944, 1001, 1004, 1009, 1010], "kneighborsregressor": [149, 218, 271, 292, 381, 535, 808, 814, 816, 817, 957, 995, 997, 999, 1005, 1007, 1008, 1009, 1010, 1011, 1012], "mimic": [149, 182, 320, 781], "missforest": [149, 944], "popular": [149, 206, 341, 344, 351, 354, 358, 360, 373, 380, 381, 382, 384, 417, 427, 944, 946, 950, 952, 959, 968, 974, 983, 988], "enable_iterative_imput": [149, 150, 350, 592, 944, 1004], "x_full": [149, 150, 279], "y_full": [149, 150, 279], "2k": 149, "br_estim": 149, "score_full_data": 149, "neg_mean_squared_error": [149, 150, 184, 215, 253, 295, 789, 954, 962, 1001], "y_miss": [149, 150], "missing_sampl": [149, 150], "missing_featur": [149, 150], "score_simple_imput": 149, "missing_valu": [149, 150, 221, 360, 592, 593, 594, 595, 733, 944, 1003, 1004], "score_iterative_imput": 149, "stricter": 149, "impute_estim": 149, "__class__": [149, 182, 184, 216, 219, 241, 281, 320, 321, 322, 353], "xerr": [149, 150, 321], "895": [149, 975], "plot_iterative_imputer_variants_comparison": [149, 975], "ness": [150, 200], "auxiliari": [150, 344, 373, 978, 1010], "district": [150, 341], "neither": [150, 154, 288, 320, 329, 358, 372, 402, 559, 593, 890, 957, 970], "x_diabet": [150, 983], "y_diabet": [150, 983], "x_california": 150, "y_california": 150, "add_missing_valu": 150, "missing_r": 150, "n_missing_sampl": 150, "x_miss_california": 150, "y_miss_california": 150, "x_miss_diabet": 150, "y_miss_diabet": 150, "knnimput": [150, 288, 592, 595, 944, 1005, 1006, 1009, 1010, 1011, 1012], "get_scores_for_imput": 150, "impute_scor": 150, "x_label": 150, "mses_california": 150, "stds_california": 150, "mses_diabet": 150, "stds_diabet": 150, "get_full_scor": 150, "full_scor": 150, "get_impute_zero_scor": 150, "fill_valu": [150, 211, 221, 289, 388, 391, 397, 398, 592, 595, 964, 1003, 1011, 1012], "zero_impute_scor": 150, "unweight": [150, 195, 428, 612, 618, 643, 672, 678, 693, 694, 702, 747, 748, 751, 752, 801, 802, 803, 804, 805, 944], "get_impute_knn_scor": 150, "knn_impute_scor": 150, "get_impute_mean": 150, "mean_impute_scor": 150, "obvious": [150, 333, 988], "get_impute_it": 150, "n_nearest_featur": [150, 592], "sample_posterior": [150, 592, 944], "iterative_impute_scor": 150, "n_bar": 150, "xval": 150, "invert_yaxi": [150, 322], "plot_missing_valu": [150, 975], "prune": [151, 323, 328, 383, 465, 522, 523, 524, 525, 529, 530, 558, 609, 792, 874, 875, 876, 877, 957, 975, 976, 990, 995, 998, 1005, 1006], "elast": [151, 160, 166, 169, 173, 193, 213, 216, 252, 373, 436, 437, 443, 466, 489, 611, 612, 617, 622, 623, 624, 625, 626, 627, 628, 633, 641, 643, 646, 649, 943, 954, 968, 975, 976, 990, 995, 1000, 1004, 1005], "gram": [151, 160, 216, 348, 379, 382, 454, 489, 513, 553, 554, 555, 556, 611, 612, 615, 616, 617, 618, 619, 620, 621, 625, 626, 627, 628, 629, 630, 646, 647, 648, 649, 650, 651, 731, 943, 964, 969, 975, 988, 995, 997, 998, 999, 1000, 1002, 1003, 1004, 1006, 1008, 1009], "spline": [151, 160, 161, 253, 264, 481, 482, 483, 637, 827, 841, 845, 973, 975, 1008], "ransac": [151, 160, 188, 199, 489, 614, 622, 636, 643, 644, 975], "theil": [151, 160, 185, 188, 279, 614, 622, 636, 643, 644, 975], "sen": [151, 160, 185, 188, 279, 614, 622, 636, 643, 644, 975], "tweedi": [151, 160, 182, 429, 461, 517, 613, 634, 645, 671, 688, 709, 711, 713, 714, 716, 792, 827, 830, 831, 839, 846, 950, 975, 1005, 1006, 1008], "insur": [151, 160, 182, 429, 461, 517, 613, 634, 645, 671, 709, 714, 716, 792, 827, 830, 831, 839, 846, 950, 975], "claim": [151, 160, 346, 429, 461, 517, 613, 634, 645, 671, 709, 714, 716, 792, 827, 830, 831, 839, 846, 950, 975], "failur": [151, 152, 154, 177, 346, 354, 364, 622, 749, 792, 886, 887, 975, 977, 978, 1008, 1009, 1013], "infer": [151, 152, 154, 177, 226, 230, 231, 239, 325, 340, 348, 358, 373, 378, 379, 461, 473, 474, 480, 499, 501, 503, 505, 512, 514, 515, 518, 524, 525, 597, 600, 622, 674, 687, 705, 749, 761, 762, 769, 785, 792, 802, 840, 847, 861, 862, 874, 875, 876, 877, 917, 944, 950, 953, 954, 959, 964, 967, 970, 973, 974, 975, 982, 996, 1000, 1001, 1006, 1009, 1012], "causal": [151, 152, 177, 622, 749, 792, 975], "hole": [151, 201, 202, 207, 495, 657, 658, 975, 1009], "perplex": [151, 201, 202, 204, 206, 259, 479, 490, 501, 657, 951, 975, 1000, 1002, 1009], "set_output": [151, 155, 208, 221, 284, 285, 349, 398, 407, 408, 410, 412, 414, 429, 433, 447, 448, 449, 450, 461, 469, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 514, 531, 532, 533, 534, 535, 546, 547, 548, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 592, 593, 594, 595, 600, 603, 604, 605, 606, 607, 623, 653, 654, 657, 792, 810, 815, 818, 822, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 858, 859, 864, 975, 1010, 1011, 1012], "det": [151, 222, 232, 248, 249, 346, 376, 480, 529, 663, 667, 691, 753, 792, 827, 846, 866, 901, 975, 1007], "tsne": [151, 202, 203, 204, 206, 207, 260, 261, 292, 360, 388, 398, 461, 653, 654, 655, 810, 814, 827, 928, 951, 957, 975, 998, 1000, 1001, 1002, 1003, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "novelti": [151, 196, 209, 219, 260, 266, 307, 812, 975, 976, 989, 990, 995, 1003], "mlp": [151, 155, 220, 273, 275, 461, 536, 792, 823, 824, 958, 975], "semi_supervis": [151, 290, 292, 296, 297, 298, 299, 300, 301, 302, 365, 955, 967, 975, 996, 1001, 1002, 1009, 1010], "tie": [151, 174, 303, 358, 381, 477, 794, 871, 955, 969, 970, 975, 996, 1011], "unbalanc": [151, 242, 303, 306, 309, 378, 477, 596, 871, 891, 892, 943, 968, 975], "auto_examples_python": 151, "auto_examples_jupyt": 151, "unless": [153, 216, 226, 231, 346, 348, 349, 358, 360, 372, 374, 377, 385, 402, 409, 411, 413, 415, 417, 422, 423, 426, 429, 432, 437, 454, 461, 473, 474, 496, 500, 501, 502, 504, 507, 508, 510, 511, 512, 513, 520, 521, 522, 523, 524, 525, 528, 529, 530, 531, 532, 533, 534, 535, 559, 567, 572, 573, 575, 576, 597, 599, 604, 611, 612, 616, 617, 618, 620, 622, 623, 624, 626, 628, 630, 631, 633, 641, 644, 653, 654, 655, 656, 657, 658, 659, 674, 679, 738, 742, 745, 763, 766, 767, 769, 777, 785, 787, 788, 789, 790, 791, 793, 794, 795, 796, 798, 799, 808, 809, 812, 814, 816, 817, 819, 820, 823, 824, 825, 828, 847, 851, 852, 854, 855, 856, 857, 861, 862, 874, 875, 876, 877, 882, 886, 887, 903, 922, 950, 953, 955, 995, 997, 1001, 1003, 1006, 1007, 1012], "willing": [153, 236], "econom": [153, 154, 239], "educ": [153, 154, 295, 346, 461, 681, 955], "earn": [153, 154, 361], "maker": [153, 154], "ovb": [153, 154], "parent_hourly_wag": 153, "college_degre": 153, "true_coef": [153, 166, 177, 611, 612, 617, 625, 626, 627, 646, 647, 648], "hourly_wag": 153, "stori": [153, 239, 256, 341, 953, 1013], "pairplot": [153, 154], "diag_kind": [153, 154], "kde": [153, 154, 256, 263, 264, 272, 380, 811], "features_nam": [153, 1002], "regressor_with_": 153, "y_pred_with_": 153, "r2_with_abl": 153, "model_coef": 153, "intellectu": 153, "proxi": [153, 154, 379, 822, 983, 1000], "inadvert": [153, 360], "iq": 153, "regressor_without_": 153, "y_pred_without_": 153, "r2_without_": 153, "brought": [153, 518, 519, 522, 523, 524, 525, 529, 530, 531, 874, 875, 876, 877], "confound": [153, 154], "conduct": [153, 239, 384, 977, 1009], "prohibit": [153, 219, 378, 381, 592, 959, 967, 1002], "uneth": 153, "iv": [153, 954], "532": [153, 975], "plot_causal_interpret": [153, 975], "hint": [154, 333, 347, 351, 365, 368, 413, 954, 986], "aris": [154, 242, 316, 334, 351, 374, 680, 950, 951, 1007], "survei": [154, 377], "1985": [154, 374, 670, 680, 750], "534": 154, "race": [154, 295, 341, 461, 998], "occup": [154, 279, 295, 461], "sector": 154, "marr": 154, "not_memb": 154, "marri": 154, "freq": [154, 166, 322], "378": [154, 381, 988, 995], "289": 154, "440": 154, "350": [154, 320], "018727": 154, "822097": 154, "833333": 154, "615373": 154, "379710": 154, "726573": 154, "55": [154, 159, 177, 182, 197, 200, 204, 298, 351, 374, 378, 456, 562, 763, 769, 777, 790, 954, 995], "thereaft": [154, 161], "hispan": 154, "manufactur": [154, 381], "unmarri": 154, "dollar": [154, 341], "exploratori": [154, 978], "emul": [154, 354], "train_dataset": [154, 340], "rangeindex": [154, 461], "533": 154, "normalis": [154, 576, 752, 988], "numerical_column": [154, 156, 432], "if_binari": [154, 223, 839, 964, 1006], "prepend": [154, 995], "exp10": 154, "ufunc": [154, 1012], "transformedtargetregressortransformedtargetregressor": 154, "ridgeridg": 154, "mae_train": 154, "mae_test": 154, "learnt": [154, 286, 329, 360, 378, 847, 943, 964], "obviou": [154, 312, 329, 333, 371, 379], "regressor_": [154, 430, 558, 559, 562], "race_hispan": 154, "013519": 154, "race_oth": 154, "009075": 154, "race_whit": 154, "022594": 154, "occupation_cler": 154, "000045": 154, "occupation_manag": 154, "090528": 154, "occupation_oth": 154, "025102": 154, "occupation_profession": 154, "071964": 154, "occupation_sal": 154, "046636": 154, "occupation_servic": 154, "091053": 154, "sector_construct": 154, "sector_manufactur": 154, "031255": 154, "sector_oth": 154, "031025": 154, "marr_unmarri": 154, "032405": 154, "union_not_memb": 154, "117154": 154, "sex_mal": 154, "090808": 154, "south_y": 154, "033823": 154, "054699": 154, "035005": 154, "030867": 154, "adimension": 154, "Their": [154, 341, 343, 361, 374, 609, 995], "gaug": 154, "decad": [154, 974], "x_train_preprocess": 154, "multipli": [154, 186, 200, 239, 333, 355, 360, 379, 381, 382, 387, 429, 440, 480, 503, 505, 506, 512, 522, 526, 529, 611, 613, 617, 619, 623, 624, 625, 627, 633, 634, 635, 637, 641, 642, 643, 645, 651, 652, 654, 658, 728, 868, 871, 874, 876, 892, 930, 931, 932, 943, 946, 950, 954, 968, 1006], "coef_i": 154, "std_i": 154, "emphas": [154, 318, 352, 379, 954], "perturb": [154, 199, 277, 379, 381, 953], "caution": [154, 350, 405, 419, 1003], "repeatedkfold": [154, 378, 768, 779, 1002], "cv_model": 154, "stripplot": 154, "whi": [154, 156], "collinear": [154, 157, 187, 200, 381, 532, 613, 634, 645, 839, 950, 995], "teas": 154, "apart": [154, 291, 308, 358, 360, 365, 375, 377, 383, 689, 969, 978, 1003], "vice": [154, 236, 320, 374, 384, 407, 572, 573, 795, 999], "versa": [154, 236, 320, 374, 384, 407, 572, 573, 795, 999], "column_to_drop": 154, "unchang": [154, 200, 246, 381, 398, 402, 407, 408, 409, 410, 411, 412, 414, 429, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 447, 448, 449, 450, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 546, 547, 548, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 575, 576, 592, 593, 594, 595, 600, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 653, 654, 655, 657, 727, 764, 765, 770, 772, 781, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 810, 811, 813, 815, 816, 817, 818, 822, 823, 824, 825, 826, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 858, 859, 861, 862, 864, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 957, 979, 1003, 1009, 1011], "neglig": [154, 957, 998, 1012], "littl": [154, 155, 156, 157, 209, 341, 382, 427, 609, 763, 777, 903, 944, 951, 953, 969, 970, 986, 996, 1007, 1012], "suppress": [154, 333, 354, 657, 957, 1002], "bring": [154, 279, 379, 641, 643, 951, 973, 978], "entic": 154, "pursu": 154, "tempt": 154, "deflat": [154, 377, 386, 498], "presum": [154, 258, 374, 382, 801], "respond": [154, 346, 374], "825": [154, 714, 975], "plot_linear_model_coefficient_interpret": [154, 975], "complement": [155, 249, 320, 597, 598, 765, 780, 783, 792, 801, 802, 803, 804, 805, 961, 976, 990, 1003], "molnar": [155, 961], "christoph": [155, 379, 384, 497, 575, 576, 579, 584, 587, 761, 950, 955, 996, 1000, 1003, 1006, 1007, 1008, 1009, 1010], "goldstein": [155, 961], "kapeln": [155, 961], "bleich": [155, 961], "pitkin": [155, 961], "peek": [155, 346, 961], "settingwithcopywarn": 155, "2284": 155, "904": [155, 237, 301, 375], "1747": 155, "1729": 155, "mask_train": [155, 200], "8640": 155, "115": [155, 962], "nomin": [155, 340, 360, 361, 381, 382, 546, 547, 681, 964, 974], "numerical_featur": [155, 285], "xtick_start": 155, "xtick_period": 155, "average_bike_rent": 155, "numeric_onli": 155, "decor": [155, 288, 346, 347, 348, 355, 769, 785, 893, 897, 898, 915, 921, 1005, 1008, 1011], "mlp_preprocessor": 155, "quantiletransformerquantiletransform": 155, "catindex": 155, "hgbdt_preprocessor": 155, "sparse_threshold": [155, 429, 432, 1003], "mlp_model": 155, "hidden_layer_s": [155, 220, 274, 276, 823, 824, 958], "learning_rate_init": [155, 275, 276, 823, 824], "forget": [155, 329, 334, 340, 350, 358, 379, 951], "poor": [155, 159, 245, 254, 300, 372, 378, 379, 655, 659, 702, 803, 806, 807, 948, 949, 951, 956, 974, 979, 1002, 1003, 1004, 1006, 1008], "grid_resolut": [155, 290, 306, 596, 597, 598], "features_info": 155, "858": [155, 316, 975], "hgbdt_model": 155, "114": [155, 293, 675, 995], "cheaper": [155, 374, 384, 638, 946, 950], "074": [155, 237], "temperatur": [155, 382, 961], "wind": [155, 955], "meaningless": [155, 382, 868, 871, 998], "celsiu": [155, 961], "interaction_cst": [155, 293, 381, 526, 527, 1010], "hgbdt_model_without_interact": 155, "histgradientboostingregressor__interaction_cst": 155, "38": [155, 173, 181, 186, 233, 248, 264, 294, 381, 597, 847, 902, 954, 964, 995, 996, 997], "heatmap": [155, 157, 161, 166, 250, 293, 308, 597, 961], "slope": [155, 180, 184, 199, 374, 456, 687, 712, 952, 954], "dry": 155, "wetter": 155, "437": 155, "spike": 155, "somehow": 155, "forbidden": [155, 381], "noisili": 155, "partial_depend": [155, 597, 961, 996, 1004, 1005, 1006, 1007, 1010, 1011], "grid_valu": [155, 598, 1011], "add_ax": [155, 206, 250], "surf": 155, "plot_surfac": [155, 179], "rstride": 155, "cstride": 155, "bupu": 155, "nthe": [155, 237, 328], "pretti": [155, 206, 237, 320, 333, 346, 358, 823, 824, 958, 1004], "view_init": [155, 202, 204, 206], "clb": 155, "ndepend": 155, "plot_partial_depend": [155, 288, 289, 290, 975, 1000, 1004, 1005, 1006, 1007, 1008, 1009], "breiman": [156, 378, 381, 481, 482, 483, 520, 521, 529, 530, 599, 874, 875, 962, 970], "random_num": [156, 962], "random_cat": [156, 962], "sibsp": [156, 293], "parch": [156, 293], "categorical_encod": 156, "numerical_pip": 156, "memor": 156, "814": [156, 986], "mdi_import": [156, 157], "sorted_importances_idx": 156, "retri": [156, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 1003, 1009, 1013], "classifier__min_samples_leaf": 156, "810": [156, 791], "832": [156, 325, 381, 520, 521, 975], "train_result": 156, "test_result": 156, "train_import": 156, "test_import": 156, "072": [156, 402, 613, 975], "plot_permutation_import": [156, 157, 975], "contradict": [157, 974], "spearman": [157, 600, 601, 945], "perm_sorted_idx": 157, "tree_importance_sorted_idx": 157, "tree_indic": 157, "dilut": [157, 343], "012": [157, 159], "squareform": 157, "spearmanr": 157, "fill_diagon": [157, 205], "distance_matrix": 157, "dist_linkag": 157, "dendro": 157, "to_list": 157, "leaf_rot": 157, "dendro_idx": 157, "ivl": 157, "cluster_id": [157, 321], "fcluster": 157, "cluster_id_to_feature_id": 157, "selected_featur": 157, "selected_features_nam": 157, "x_train_sel": 157, "x_test_sel": 157, "clf_sel": 157, "063": [157, 237, 239, 402, 975], "plot_permutation_importance_multicollinear": [157, 975], "polynomialcountsketch": [159, 604, 606, 946, 1007, 1009, 1012], "covtyp": 159, "tensor": [159, 338, 370, 379, 503, 505, 512, 604, 605, 606, 990, 1007], "sketch": [159, 335, 338, 355, 373, 604, 605, 606, 919, 990, 1007], "daniel": [159, 293, 333, 847, 964, 978, 995, 996, 997, 998, 1000, 1001, 1002, 1003, 1005, 1007, 1009, 1012], "lopez": 159, "sanchez": [159, 1003, 1004], "lope": 159, "usal": 159, "581": 159, "cartograph": 159, "remot": [159, 298, 346, 349], "fetch_covtyp": [159, 219, 290, 341, 1004, 1007, 1009, 1013], "5_000": 159, "mm": 159, "lsvm": 159, "lsvm_time": 159, "lsvm_score": 159, "condens": [159, 411], "ps_lsvm_time": 159, "ps_lsvm_score": 159, "ksvm": 159, "ksvm_time": 159, "ksvm_score": 159, "pham": [159, 946, 1002], "ninh": 159, "rasmu": [159, 1002], "pagh": [159, 946], "kdd": [159, 341, 372, 402, 966], "doi": [159, 182, 200, 346, 374, 641], "1145": [159, 374, 641], "2487575": 159, "2487591": 159, "csie": [159, 340, 452, 473, 474, 623], "ntu": [159, 340, 452, 473, 474, 623], "tw": [159, 340, 452, 473, 474, 623, 969], "cjlin": [159, 340, 452, 473, 474, 623, 998], "libsvmtool": [159, 340, 452, 473, 474], "226": [159, 374, 385, 409, 975], "plot_scalable_poly_kernel": [159, 975], "ard": [161, 609, 610], "ol": [161, 172, 177, 179, 180, 188, 199, 291, 621, 950], "true_weight": 161, "ardregress": [161, 166, 610, 895, 950, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1011, 1012], "olr": 161, "brr": 161, "symlognorm": [161, 166], "linthresh": [161, 166], "10e": [161, 166], "cbar_kw": [161, 166], "seismic_r": [161, 166], "stabilis": 161, "retain": [161, 360, 374, 377, 378, 382, 402, 408, 409, 412, 414, 430, 434, 435, 436, 437, 438, 439, 440, 441, 447, 448, 449, 459, 498, 499, 503, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 546, 547, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 575, 576, 600, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 655, 660, 661, 764, 765, 770, 772, 781, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 811, 813, 816, 817, 823, 824, 826, 829, 831, 832, 833, 838, 839, 845, 846, 861, 862, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 943, 967, 995], "ard_scor": 161, "scores_": [161, 162, 557, 560, 561, 563, 564, 565, 609, 610, 624, 995, 1005], "brr_score": 161, "cutoff": [161, 908, 964, 1004], "full_data": 161, "input_featur": [161, 348, 360, 390, 395, 407, 408, 410, 412, 414, 429, 447, 448, 449, 450, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 514, 531, 532, 533, 534, 535, 546, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 592, 593, 594, 595, 600, 603, 604, 605, 606, 607, 653, 654, 657, 810, 815, 818, 822, 825, 826, 829, 830, 831, 832, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 858, 859, 1011], "x_plot": [161, 183, 188, 215, 242, 264, 284], "y_plot": [161, 183, 188, 242], "ard_poli": 161, "brr_poli": 161, "y_ard": 161, "y_ard_std": 161, "y_brr": 161, "y_brr_std": 161, "queri": [161, 262, 272, 333, 380, 385, 409, 411, 415, 422, 517, 575, 576, 593, 609, 610, 690, 720, 806, 807, 808, 809, 810, 811, 812, 814, 816, 817, 818, 954, 957, 970, 973, 977, 997, 999, 1000, 1003], "lambda_init": [161, 162, 610, 950, 1005], "intrins": [161, 360, 379, 381, 957, 962, 968, 1007], "685": [161, 685, 704, 954, 975], "plot_ard": [161, 609, 975], "alpha_init": [162, 610, 950, 1005], "yoshihiro": [162, 1005], "uchida": [162, 1005], "nimbus1after2a1sun7show": 162, "1234": [162, 228, 242, 346], "n_order": 162, "vander": 162, "ymean": 162, "ystd": 162, "pink": 162, "_init": 162, "lambda_": [162, 609, 610, 842, 950, 1002], "410": [162, 975], "plot_bayesian_ridge_curvefit": [162, 975], "normalized_weight": 163, "x_offset": 163, "x_center": 163, "x_scale": [163, 836, 852, 964], "uncent": 163, "incorrectli": [163, 381, 382, 518, 524, 526, 698, 704, 954, 996, 1001, 1003, 1004, 1006, 1011], "lm": 163, "98809919e": 163, "48938813e": 163, "03237920e": 163, "25349312e": 163, "53959628e": 163, "67451144e": 163, "00768662e": 163, "19112072e": 163, "07963978e": 163, "47987268e": 163, "76195467e": 163, "00393284e": 163, "07582983e": 163, "66670169e": 163, "65799352e": 163, "99891212e": 163, "58195950e": 163, "58667835e": 163, "98350372e": 163, "60836363e": 163, "00911944e": 163, "elasticnetifittedelasticnet": 163, "209": [163, 705, 842, 975], "plot_elastic_net_precomputed_gram_matrix_with_weighted_sampl": [163, 975], "huber": [164, 192, 373, 381, 525, 614, 641, 643, 968, 995, 997, 998, 1007], "mks542": 164, "x_outlier": [164, 196, 265, 266, 307], "y_outlier": 164, "epsilon_valu": 164, "intercept_": [164, 172, 174, 191, 217, 306, 313, 317, 348, 360, 447, 448, 449, 514, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 866, 867, 868, 869, 870, 871, 872, 948, 950, 968, 969, 995, 1002, 1007, 1009, 1012], "coef_ridg": 164, "plot_huber_vs_ridg": [164, 975], "logreg": [165, 800], "048": [165, 178, 962, 975], "plot_iris_logist": [165, 975], "underdetermin": 166, "time_step": [166, 824], "anti": [166, 329, 571, 801, 956], "9502547": 166, "8059798": 166, "63394388": 166, "70359377": 166, "62241605": 166, "84077985": 166, "30506066": 166, "63327171": 166, "74495357": 166, "02456369": 166, "random_sampl": [166, 806, 807, 811], "sensor": 166, "superposit": 166, "y_pred_lasso": 166, "r2_score_lasso": 166, "480": [166, 321], "y_pred_ard": 166, "r2_score_ard": 166, "elasticnetcv": [166, 360, 365, 611, 617, 625, 626, 627, 628, 646, 950, 995, 998, 1006, 1008, 1009, 1012, 1013], "enet": [166, 252], "y_pred_enet": 166, "r2_score_enet": 166, "nlasso": 166, "meinshausen": 166, "yu": [166, 374, 417, 427, 623, 950, 958, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "246": [166, 962, 995], "270": [166, 226, 298], "plot_lasso_and_elasticnet": [166, 975], "penalis": [167, 180, 197, 661], "enet_path": [167, 360, 611, 612, 617, 625, 626, 627, 997, 999, 1008], "lasso_path": [167, 616, 617, 618, 619, 620, 621, 628, 647, 648, 950, 995, 997, 999, 1008], "alphas_lasso": 167, "coefs_lasso": 167, "alphas_positive_lasso": 167, "coefs_positive_lasso": 167, "alphas_enet": 167, "coefs_enet": 167, "alphas_positive_enet": 167, "coefs_positive_enet": 167, "neg_log_alphas_lasso": 167, "neg_log_alphas_enet": 167, "coef_l": 167, "neg_log_alphas_positive_lasso": 167, "coef_pl": 167, "neg_log_alphas_positive_enet": 167, "coef_p": 167, "340": [167, 215, 297, 975], "plot_lasso_coordinate_descent_path": [167, 611, 612, 617, 618, 625, 626, 627, 628, 646, 649, 975], "sai": [168, 209, 316, 320, 321, 346, 372, 374, 375, 379, 381, 382, 411, 412, 465, 469, 475, 642, 943, 960, 967, 978, 985, 986, 988, 1012], "x_sp": 168, "sparse_lasso": 168, "dense_lasso": 168, "coeff_diff": 168, "2e": [168, 253], "039": [168, 237, 321, 715, 745, 954], "01e": 168, "xs_sp": 168, "tocsc": 168, "nnz": [168, 321, 341, 664], "865": 168, "65e": 168, "268": [168, 213, 975], "plot_lasso_dense_vs_sparse_data": [168, 975], "lars_path": [169, 355, 496, 502, 504, 507, 508, 510, 511, 513, 615, 616, 617, 618, 619, 620, 621, 628, 629, 630, 648, 649, 650, 651, 950, 995, 997, 1000, 1004, 1006], "plot_lasso_lar": [169, 975], "zht2007": 170, "lassolars": [170, 171, 383, 616, 619, 620, 950, 995, 1002, 1004, 1008, 1009], "2173": [170, 621, 950], "2192": [170, 621, 950], "038076": [170, 171], "050680": [170, 171], "061696": [170, 171], "021872": [170, 171], "044223": [170, 171], "034821": [170, 171], "043401": [170, 171], "002592": [170, 171], "019907": [170, 171], "017646": [170, 171], "001882": [170, 171], "044642": [170, 171], "051474": [170, 171], "026328": [170, 171], "008449": [170, 171], "019163": [170, 171], "074412": [170, 171], "039493": [170, 171], "068332": [170, 171], "092204": [170, 171], "085299": [170, 171], "044451": [170, 171], "005670": [170, 171], "045599": [170, 171], "034194": [170, 171], "032356": [170, 171], "002861": [170, 171], "025930": [170, 171], "089063": [170, 171], "011595": [170, 171], "036656": [170, 171], "012191": [170, 171], "024991": [170, 171], "036038": [170, 171], "034309": [170, 171], "022688": [170, 171], "009362": [170, 171], "005383": [170, 171], "036385": [170, 171], "003935": [170, 171], "015596": [170, 171], "008142": [170, 171], "031988": [170, 171], "046641": [170, 171], "akaik": [170, 171, 230, 621, 762, 943, 950], "lasso_lars_": [170, 171], "zou_et_al_criterion_resc": 170, "noise_vari": [170, 497, 621, 950, 1009], "aic_criterion": 170, "criterion_": [170, 171, 621], "index_alpha_path_a": 170, "alphas_": [170, 171, 612, 615, 616, 618, 619, 620, 621, 626, 628, 647, 648, 995, 998, 1008], "lassolarsic__criterion": [170, 171], "bic_criterion": 170, "index_alpha_path_b": 170, "plot_lasso_lars_": [170, 975], "n_random_featur": 171, "x_random": 171, "random_": 171, "02d": 171, "random_02": 171, "random_05": 171, "random_08": 171, "random_11": 171, "647689": 171, "234137": 171, "469474": 171, "465730": 171, "012831": 171, "412304": 171, "067528": 171, "110923": 171, "601707": 171, "057711": 171, "208864": 171, "196861": 171, "478522": 171, "057122": 171, "324084": 171, "611676": 171, "331263": 171, "185659": 171, "812526": 171, "003533": 171, "alpha_a": 171, "alpha_b": 171, "160030": 171, "5244": 171, "764779": 171, "300343": 171, "5208": 171, "250639": 171, "5212": 171, "341949": 171, "542052": 171, "4928": 171, "018900": 171, "4936": 171, "201520": 171, "034077": 171, "4869": 171, "678359": 171, "4881": [171, 1000], "952289": 171, "189631": 171, "4815": 171, "437362": 171, "4831": [171, 620], "802601": 171, "329616": 171, "4810": 171, "423641": 171, "4830": 171, "880191": 171, "306012": 171, "4803": 171, "573491": 171, "4828": 171, "121351": 171, "124225": 171, "4804": 171, "126502": 171, "4832": 171, "765671": 171, "820705": 171, "621645": 171, "4836": 171, "352124": 171, "750389": 171, "4805": 171, "012521": 171, "4841": 171, "834310": 171, "570655": 171, "290075": 171, "4846": 171, "203174": 171, "550213": 171, "4807": 171, "075887": 171, "4852": 171, "080295": 171, "358295": 171, "4806": 171, "878051": 171, "4855": 171, "973770": 171, "259297": 171, "706026": 171, "4860": 171, "893055": 171, "237703": 171, "4809": [171, 242], "440409": 171, "4866": 171, "718747": 171, "850031": 171, "989341": 171, "4867": 171, "358990": 171, "384338": 171, "4801": 171, "702266": 171, "163224": 171, "296575": 171, "4802": 171, "594754": 171, "4872": 171, "147022": 171, "031555": 171, "236720": 171, "4874": 171, "880298": 171, "618263": 171, "4798": 171, "484109": 171, "4876": 171, "218997": 171, "526599": 171, "4799": 171, "543841": 171, "370039": 171, "586798": 171, "4794": 171, "238744": 171, "4880": 171, "156252": 171, "445978": 171, "4795": 171, "589715": 171, "4885": 171, "598533": 171, "259031": 171, "4796": 171, "966981": 171, "4891": 171, "067109": 171, "032179": 171, "662409": 171, "4894": 171, "853846": 171, "019069": 171, "652739": 171, "4888": 171, "752867": 171, "626286": 171, "817724": 171, "set_xscal": [171, 187, 769], "badli": [171, 182, 320, 335, 846, 950, 964], "lassolarscv": [171, 365, 383, 617, 618, 619, 621, 628, 630, 647, 648, 649, 950, 995, 1002, 1008, 1012], "3800": 171, "mse_path_": [171, 612, 616, 618, 620, 626, 628], "cv_alphas_": [171, 616, 620, 1007], "kink": 171, "heavili": [171, 333, 334, 346, 354, 614, 620, 742, 971], "efficaci": 171, "094": [171, 225, 437, 975], "plot_lasso_model_select": [171, 612, 618, 975], "plot_logist": [172, 975], "axes_row": 173, "clf_l1_lr": 173, "clf_l2_lr": 173, "clf_en_lr": 173, "coef_l1_lr": 173, "coef_l2_lr": 173, "coef_en_lr": 173, "sparsity_l1_lr": 173, "sparsity_l2_lr": 173, "sparsity_en_lr": 173, "nl1_ratio": 173, "plot_logistic_l1_l2_spars": [173, 975], "995": 174, "plot_logistic_multinomi": [174, 975], "976": [174, 247], "dupr": [174, 190, 259, 261, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1011], "m4x": [174, 198], "sag": [174, 189, 623, 624, 637, 639, 652, 950, 968, 973, 1000, 1001, 1002, 1004, 1005], "bry": [174, 191], "plot_hyperplan": [174, 191, 217], "looser": 175, "liblinear": [175, 306, 352, 623, 624, 752, 866, 867, 868, 871, 872, 950, 954, 969, 995, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1011], "l1_min_c": [175, 950, 969, 995], "intercept_sc": [175, 623, 624, 866, 867, 873, 950, 969], "coefs_": [175, 276, 823, 824, 958, 1000], "plot_logistic_path": [175, 975], "jointli": [176, 246, 373, 374, 379, 950], "instant": 176, "wave": [176, 346, 953], "n_task": [176, 950], "n_relevant_featur": 176, "multitasklasso": [176, 617, 625, 628, 950, 995, 1003, 1006, 1008], "coef_lasso_": 176, "coef_multi_task_lasso_": 176, "spy": 176, "feature_to_plot": 176, "seagreen": 176, "plot_multi_task_lasso_support": [176, 975], "reg_nnl": 177, "y_pred_nnl": 177, "r2_score_nnl": 177, "nnl": [177, 622], "8225220806196525": 177, "reg_ol": 177, "y_pred_ol": 177, "r2_score_ol": 177, "7436926291700353": 177, "low_x": 177, "high_x": 177, "low_i": 177, "high_i": 177, "get_ylim": [177, 279, 280], "847222222222214": 177, "plot_nnl": [177, 975], "23786125": 178, "2548": 178, "diabetes_x": [178, 986], "diabetes_i": [178, 986], "diabetes_x_train": [178, 986], "diabetes_x_test": [178, 986], "diabetes_y_train": [178, 986], "diabetes_y_test": [178, 986], "regr": [178, 375, 519, 521, 530, 611, 612, 632, 799, 824, 867, 869, 872, 969, 986], "diabetes_y_pr": 178, "plot_ol": [178, 975], "plot_fig": 179, "fig_num": 179, "plot_ols_3d": [179, 975], "greatli": [180, 214, 293, 346, 354, 417, 957, 970, 1001, 1009], "plot_ols_ridge_vari": [180, 975], "make_sparse_coded_sign": [181, 496, 502, 510, 511, 1009, 1011], "orthogonalmatchingpursuit": [181, 630, 650, 651, 950, 995, 997, 1000, 1003, 1008, 1013], "orthogonalmatchingpursuitcv": [181, 365, 629, 997, 1008, 1012], "512": 181, "n_nonzero_coef": [181, 491, 496, 502, 507, 510, 511, 513, 615, 629, 650, 651, 1013], "xw": [181, 291, 611, 612, 614, 617, 618, 619, 620, 621, 625, 626, 627, 628, 637, 646, 647, 648, 649, 950], "_0": [181, 650, 950, 954, 969], "distort": [181, 213, 343, 372, 373, 843, 855, 860, 951, 964, 966], "y_noisi": 181, "idx_r": 181, "omp_cv": 181, "plot_omp": [181, 975], "contract": [182, 200, 312, 334, 360, 974], "compani": [182, 200, 374, 978], "policyhold": [182, 200, 950], "vehicl": [182, 200], "driver": [182, 200, 1010], "exposur": [182, 200, 950], "car": 182, "accid": [182, 200], "noll": [182, 200], "salzmann": [182, 200], "wuthrich": [182, 200], "2139": [182, 200], "ssrn": [182, 200], "3164764": [182, 200], "ch": [182, 184, 200, 300, 302], "rth": [182, 200], "41214": [182, 200], "idpol": [182, 200], "claimnb": [182, 200], "vehpow": [182, 200], "vehag": [182, 200], "drivag": [182, 200], "bonusmalu": [182, 200], "vehbrand": [182, 200], "vehga": [182, 200], "b12": [182, 200], "1217": 182, "r82": 182, "77000": 182, "75000": 182, "diesel": [182, 200], "r22": 182, "09000": 182, "r72": 182, "84000": 182, "678008": 182, "6114326": 182, "00274": 182, "3317": 182, "r93": 182, "678009": 182, "6114327": 182, "9850": 182, "r11": [182, 200], "678010": 182, "6114328": 182, "1323": 182, "678011": 182, "6114329": 182, "r26": 182, "678012": 182, "6114330": 182, "678013": [182, 200], "10070308464041304": 182, "log_scale_transform": [182, 200], "linear_model_preprocessor": 182, "passthrough_numer": [182, 200], "binned_numer": [182, 200], "2e5": [182, 200], "log_scaled_numer": [182, 200], "onehot_categor": [182, 200], "imbalanc": [182, 242, 246, 248, 321, 358, 372, 378, 668, 673, 751, 764, 768, 803, 954, 956, 962, 973], "simplist": [182, 382], "pertin": 182, "dummyregressor": [182, 200, 516, 954, 996, 998, 999, 1002, 1003, 1005, 1008, 1009, 1013], "df_train": [182, 200], "df_test": [182, 200], "regressor__sample_weight": 182, "mean_poisson_devi": [182, 954, 1005], "score_estim": [182, 200], "n_mask": 182, "564": [182, 198, 975], "commonli": [182, 236, 312, 339, 360, 374, 375, 384, 579, 722, 723, 761, 795, 838, 951, 952, 954, 955, 957, 1011], "ridge_glm": 182, "560": [182, 482, 483], "186": [182, 277, 301, 352, 752, 954], "595": [182, 268, 975], "223745": 182, "597": 182, "glm": [182, 200, 289, 613, 634, 645, 950, 995, 1006], "vanilla": [182, 370, 374, 412, 414, 425, 594], "poissonregressor": [182, 200, 289, 292, 613, 645, 950, 1006, 1009, 1010], "poisson_glm": 182, "newton": [182, 200, 277, 575, 613, 623, 624, 634, 645, 823, 824, 950, 999, 1000, 1002, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "deep": [182, 348, 360, 381, 388, 399, 402, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 429, 430, 434, 435, 436, 437, 438, 439, 440, 441, 447, 448, 449, 450, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 546, 547, 548, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 600, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 653, 654, 655, 656, 657, 733, 761, 762, 763, 766, 767, 777, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 822, 823, 824, 825, 826, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 858, 859, 861, 862, 863, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 958, 959, 973, 974, 978, 1000, 1006, 1007, 1009], "implicit": [182, 360, 381, 382, 537, 647, 648, 948, 953, 973, 1004], "poisson_gbrt": 182, "566": [182, 322], "5e5": 182, "realiz": [182, 978], "priori": [182, 199, 248, 258, 279, 360, 374, 381, 553, 559, 953, 1011], "wrongli": [182, 308], "gen_even_slic": [182, 355, 906], "_mean_frequency_by_risk_group": 182, "y_true_bin": 182, "y_pred_bin": 182, "idx_sort": 182, "sl": 182, "y_true_seg": 182, "y_pred_seg": 182, "11935": 182, "11933": 182, "11932": 182, "12196": 182, "11931": 182, "portfolio": [182, 200, 948], "riskiest": [182, 200], "safest": [182, 200, 329, 340], "irrespect": [182, 213, 248, 259, 571], "lorenz": [182, 200, 1000, 1012], "summar": [182, 231, 246, 248, 322, 346, 348, 363, 381, 486, 623, 659, 671, 672, 950, 951, 954, 960], "lorenz_curv": [182, 200], "ranked_frequ": 182, "ranked_exposur": [182, 200], "cumulated_claim": 182, "cumulated_exposur": 182, "cum_exposur": 182, "cum_claim": [182, 200], "0x7f7ab1ce4220": 182, "occurr": [182, 285, 321, 322, 341, 346, 374, 382, 534, 535, 546, 554, 555, 582, 592, 593, 594, 595, 747, 801, 829, 956, 996, 1001], "circumstanti": 182, "extractor": [182, 277, 335, 341, 360, 382, 468, 546, 547, 553, 554, 556, 943, 995], "discrim": 182, "profil": [182, 333, 346, 349, 486, 489, 950, 978], "ideal": [182, 184, 200, 236, 239, 246, 248, 249, 329, 345, 346, 350, 351, 354, 358, 360, 372, 690, 720, 943, 953, 968, 969, 974, 977], "meaningfulli": [182, 954], "plot_poisson_regression_non_normal_loss": [182, 975], "monomi": 183, "vandermond": [183, 964], "x_0": [183, 622], "pseudo": [183, 277, 348, 378, 386, 405, 417, 419, 427, 434, 435, 436, 438, 439, 440, 441, 498, 526, 527, 528, 592, 599, 604, 606, 607, 611, 612, 617, 618, 625, 626, 627, 628, 642, 656, 660, 766, 767, 775, 777, 815, 822, 858, 859, 863, 866, 867, 868, 871, 902, 903, 950, 966, 1000, 1009], "basis_1": 183, "basis_2": 183, "malt": [183, 1008, 1009, 1010, 1012], "londschien": [183, 1008, 1012], "prepar": [183, 216, 320, 333, 348, 349, 352, 354, 970, 978, 1003, 1011], "set_prop_cycl": 183, "teal": [183, 192, 246], "yellowgreen": [183, 185, 192, 326], "tomato": 183, "unwant": [183, 320], "oscillatori": [183, 964], "danger": [183, 378], "pft": 183, "splt": 183, "bsplines_": [183, 845], "refrain": [183, 346], "dec": [183, 256, 642, 845, 870, 969], "31st": [183, 845], "x_plot_ext": 183, "y_plot_ext": 183, "plot_polynomial_interpol": [183, 841, 845, 975], "pareto": 184, "dale": [184, 1008], "mail": [184, 284, 341, 346, 350, 354, 358, 361, 1003, 1004], "ru": 184, "glemaitre58": 184, "y_true_mean": 184, "y_normal": 184, "y_pareto": 184, "huge": [184, 187, 333, 352, 592, 998], "heavi": [184, 358, 371, 974], "parse_vers": [184, 635], "sp_version": [184, 635], "incompat": [184, 350, 461, 944, 1003, 1004], "older": [184, 216, 345, 350, 977, 993, 998, 1005, 1007], "interior": [184, 635, 950, 1010], "out_bounds_predict": 184, "bool_": 184, "logical_or": [184, 190, 248, 352], "hit": [184, 352], "asymmetri": [184, 320], "linger": 184, "linear_regress": [184, 253], "quantile_regress": 184, "y_pred_lr": 184, "y_pred_qr": 184, "805": 184, "486": 184, "cv_results_lr": 184, "cv_results_qr": 184, "test_neg_mean_squared_error": [184, 789], "732": [184, 243, 975], "690": 184, "679": [184, 866], "129": [184, 984, 995], "699": [184, 975], "plot_quantile_regress": [184, 975], "robustli": [185, 373], "faulti": [185, 995], "1903908407869": 185, "17236387": 185, "08533159": 185, "ransacregressor": [185, 188, 199, 365, 614, 643, 644, 950, 998, 1000, 1001, 1002, 1003, 1006, 1008, 1009, 1013], "inlier_mask": 185, "inlier_mask_": [185, 636], "outlier_mask": 185, "line_x": [185, 199], "line_i": 185, "line_y_ransac": 185, "estimator_": [185, 216, 394, 518, 519, 520, 521, 522, 523, 528, 529, 530, 531, 558, 559, 562, 636, 938, 1010], "095": [185, 975], "plot_ransac": [185, 975], "mathcal": [186, 316, 379, 381, 592, 661, 946, 948, 950, 954, 968, 1008], "discourag": [186, 358, 364, 654], "beta_": [186, 379], "excess": [186, 411, 964, 1002], "encourag": [186, 274, 308, 345, 346, 358, 969, 973], "kornel": [186, 1001], "kielczewski": [186, 1001], "plusnet": 186, "32634568": 186, "49665188": 186, "75747153": 186, "08699432": 186, "44381023": 186, "69892343": 186, "28808734": 186, "75949622": 186, "errors_coef": 186, "regularis": [186, 387, 438, 440], "logx": [186, 316], "gradual": [186, 823, 824, 968], "formerli": [186, 996, 999, 1001, 1002], "intric": [186, 477], "rapidli": [186, 241, 969, 978, 982], "influenti": [186, 321, 978], "pose": [186, 247, 950, 987], "lose": [186, 199, 322, 341, 360, 377, 382, 384, 902, 903, 944, 950, 988], "concret": [186, 347, 361, 383, 633, 639, 640, 641, 642, 858, 859, 950, 968, 973], "729": [186, 975], "plot_ridge_coeff": [186, 975], "practis": 187, "10x10": 187, "hilbert": [187, 832, 946, 964], "n_alpha": [187, 437, 611, 612, 615, 616, 617, 618, 619, 620, 621, 625, 626, 627, 628, 638, 640, 646, 647, 648, 649, 998], "plot_ridge_path": [187, 975], "theilsen": 188, "lessen": [188, 623, 624], "theilsenregressor": [188, 199, 614, 636, 643, 950, 999, 1007, 1009], "x_error": 188, "y_errors_larg": 188, "x_errors_larg": 188, "deviant": [188, 960], "legend_titl": 188, "nabsolut": 188, "nto": [188, 248], "859": [188, 975], "plot_robust_fit": [188, 975], "asgd": [189, 968], "rob": [189, 995, 996, 997, 999, 1000, 1001, 1002, 1003, 1007, 1010], "zinkov": [189, 995, 996, 997, 999, 1000], "heldout": 189, "squared_hing": [189, 316, 631, 641, 866, 873, 950, 969], "0e4": 189, "yy_": 189, "plot_sgd_comparison": [189, 975], "_test": [190, 281, 334, 348, 1008], "ignore_warn": [190, 281, 1001], "load_mnist": [190, 259], "class_0": [190, 343, 475], "class_1": [190, 343, 475], "mnist_784": [190, 198, 259, 276], "fit_and_scor": 190, "train_scor": [190, 285, 316, 324, 769, 785, 789, 790, 793, 949], "estimator_dict": 190, "flush": 190, "results_df": [190, 239, 285], "group_df": 190, "plot_sgd_early_stop": [190, 975], "ova": [191, 631, 633, 641, 968], "plot_sgd_iri": [191, 975], "ugli": [191, 267, 270, 304], "dim": [191, 213, 267, 268, 270, 304, 305, 492, 664, 1012], "modified_huber_loss": 192, "darkorchid": 192, "130": [192, 352, 975], "plot_sgd_loss_funct": [192, 975], "l1_color": 193, "l2_color": 193, "elastic_net_color": 193, "1001": [193, 223], "rho": [193, 379, 642, 950, 968, 996], "elastic_net": 193, "dpi": [193, 880, 1008], "elastic_net_contour": 193, "l2_contour": 193, "l1_contour": 193, "plot_sgd_penalti": [193, 975], "ndenumer": 194, "plot_sgd_separating_hyperplan": [194, 975], "no_weight": 195, "samples_weight": 195, "no_weights_handl": 195, "weights_handl": 195, "plot_sgd_weighted_sampl": [195, 975], "sgdoneclasssvm": [196, 209, 291, 870, 960, 968, 1008, 1010, 1011, 1012, 1013], "rc": [196, 350], "novel": [196, 265, 307, 329, 372, 943], "abnorm": [196, 209, 265, 307, 341, 457, 528, 812, 960, 1003], "y_pred_train": [196, 307], "y_pred_test": [196, 265, 307], "y_pred_outli": [196, 265, 307], "n_error_train": [196, 307], "n_error_test": [196, 265, 307], "n_error_outli": [196, 265, 307], "clf_sgd": 196, "pipe_sgd": 196, "y_pred_train_sgd": 196, "y_pred_test_sgd": 196, "y_pred_outliers_sgd": 196, "n_error_train_sgd": 196, "n_error_test_sgd": 196, "n_error_outliers_sgd": 196, "pubu": [196, 213, 265, 307], "darkr": [196, 265, 307], "palevioletr": [196, 265, 307], "b1": [196, 265, 307], "b2": [196, 265, 307], "blueviolet": [196, 265, 307], "522": [196, 867, 975], "plot_sgdocsvm_vs_ocsvm": [196, 975], "newgroups20": 197, "trim": [197, 374, 806, 807], "20newsgroup": [197, 339, 995], "4500": 197, "130107": [197, 213, 454], "epoch": [197, 360, 501, 631, 632, 633, 641, 642, 643, 823, 824, 968, 1002, 1003, 1008], "5960": 197, "26593496": 197, "43348936": 197, "26362917": 197, "31973683": 197, "37815029": 197, "2928359": 197, "27054655": 197, "62717609": 197, "19522393": 197, "30897646": 197, "34586917": 197, "28207552": 197, "34125758": 197, "29898468": 197, "34279478": 197, "59489497": 197, "38353048": 197, "35278655": 197, "19829832": 197, "14603365": 197, "6440": 197, "36047253": 197, "1268187": 197, "10606655": 197, "17985197": 197, "5395559": 197, "07993421": 197, "06686804": 197, "21443888": 197, "11528972": 197, "2075215": 197, "10914094": 197, "11144673": 197, "13988486": 197, "09684337": 197, "26286057": 197, "11682692": 197, "55800226": 197, "17370318": 197, "11452112": 197, "arthur": [197, 198, 374, 412, 425, 1000, 1001, 1002, 1003, 1004, 1007, 1009], "mensch": [197, 198, 1000, 1001, 1002, 1003], "timeit": [197, 228, 352], "default_tim": [197, 228], "model_param": 197, "this_max_it": 197, "train_tim": [197, 215, 320, 321], "ndataset": [197, 281], "run_tim": [197, 198], "plot_sparse_logistic_regression_20newsgroup": [197, 975], "8253": 198, "493": [198, 608, 866, 947], "l1_plot": 198, "plot_sparse_logistic_regression_mnist": [198, 975], "subpopul": [199, 644, 950], "residual_threshold": [199, 636, 950, 1008], "remedi": 199, "max_subpopul": [199, 644, 1009], "florian": [199, 978, 995, 999, 1001, 1005, 1012], "wilhelm": [199, 999, 1001, 1005], "indigo": 199, "632": [199, 285, 975], "plot_theilsen": [199, 975], "motor": 200, "parti": [200, 256, 294, 334, 345, 358, 765, 772, 922, 995, 1006, 1011, 1012], "liabil": 200, "functool": 200, "mean_tweedie_devi": [200, 954, 1005], "load_mtpl2": 200, "fremtpl2freq": 200, "df_freq": 200, "inplac": [200, 219, 251, 419, 447, 448, 449, 450, 821, 829, 832, 835, 836, 838, 842, 843, 844, 846, 927, 930, 931, 932, 936, 937, 1004], "fremtpl2sev": 200, "41215": 200, "df_sev": 200, "claimamount": 200, "fillna": [200, 219], "unquot": 200, "column_nam": 200, "plot_obs_pr": 200, "y_label": 200, "fill_legend": 200, "df_": 200, "tweedie_pow": 200, "d\u00b2": 200, "subset_label": 200, "score_label": [200, 245], "est_freq": 200, "est_sev": 200, "unstack": [200, 242], "fremtpl2": 200, "unreason": [200, 378], "exception": 200, "200000": 200, "column_tran": [200, 375], "purepremium": 200, "indirectli": [200, 312], "avgclaimamount": 200, "fmax": 200, "option_context": 200, "max_column": 200, "139": [200, 259, 352, 381, 417, 427, 656, 660, 955], "414": [200, 375, 690, 720, 842, 854, 954], "424": 200, "463": [200, 256], "27000": 200, "303": [200, 297, 600, 975], "404": 200, "333333": 200, "r25": 200, "1981": [200, 950], "14156": 200, "142857": 200, "4792": 200, "1456": 200, "10403": 200, "928571": 200, "10834": 200, "17474": 200, "193548": 200, "225806": 200, "r73": 200, "3986": 200, "12860": [200, 1004], "5417": 200, "seemingli": [200, 329, 358], "169504": 200, "6237": 200, "upon": [200, 207, 272, 341, 346, 358, 360, 368, 526, 527, 592, 595, 636, 753, 761, 762, 806, 807, 943, 950, 970, 979, 988, 1009], "glm_freq": 200, "0448": 200, "0427": [200, 434, 439], "1379": 200, "1378": 200, "2441": 200, "2246": 200, "surprisingli": [200, 341, 382], "bonu": [200, 344, 346, 983, 988], "malu": 200, "younger": 200, "infti": [200, 384, 584, 950, 964, 1002], "gammaregressor": [200, 289, 292, 645, 950, 1006, 1009, 1010], "mask_test": 200, "glm_sev": 200, "900000e": 200, "400000e": 200, "756746e": 200, "744042e": 200, "801770e": 200, "030677e": 200, "dummy_sev": 200, "000000e": 200, "756687e": 200, "744497e": 200, "803882e": 200, "033764e": 200, "avgclaim": 200, "nbclaim": 200, "1951": 200, "1940": 200, "1978": [200, 950], "apriori": 200, "regardless": [200, 240, 241, 242, 334, 346, 374, 500, 597, 598, 623, 669, 680, 954, 966, 1003, 1010, 1011], "glm_pure_premium": 200, "999": [200, 239, 350, 381, 682, 823, 824], "scores_product_model": 200, "scores_glm_pure_premium": 200, "expand_frame_repr": 200, "640000e": 200, "370000e": 200, "669930e": 200, "617050e": 200, "640770e": 200, "640880e": 200, "7000": 200, "695740e": 200, "683980e": 200, "682880e": 200, "692270e": 200, "8000": [200, 242, 243], "046010e": 200, "040530e": 200, "037600e": 200, "045390e": 200, "9000": 200, "387580e": 200, "385000e": 200, "382120e": 200, "387830e": 200, "9900": 200, "015716e": 200, "015414e": 200, "015347e": 200, "015587e": 200, "9990": 200, "914573e": 200, "914370e": 200, "914538e": 200, "914387e": 200, "904751e": 200, "904556e": 200, "904747e": 200, "904558e": 200, "730119e": 200, "722128e": 200, "739865e": 200, "731249e": 200, "295040e": 200, "212197e": 200, "295505e": 200, "213056e": 200, "917618e": 200, "299546e": 200, "916555e": 200, "313276e": 200, "951751e": 200, "325198e": 200, "riski": 200, "operation": [200, 978], "simpler": [200, 308, 333, 345, 374, 379, 950, 955, 986, 1000], "ranked_pure_premium": 200, "cumulated_claim_amount": 200, "cumulated_sampl": 200, "y_pred_product": 200, "y_pred_tot": 200, "ordered_sampl": 200, "plot_tweedie_regression_insurance_claim": [200, 975], "md": [202, 203, 204, 205, 350, 653, 657, 659, 989, 990, 995, 1007, 1010], "seek": [202, 204, 206, 345, 346, 358, 361, 473, 474, 951, 980, 982], "ticker": [202, 204, 207, 259], "s_point": 202, "s_color": 202, "make_s_curv": [202, 207], "plot_3d": 202, "points_color": 202, "subplot_kw": [202, 263], "set_major_loc": [202, 264], "multipleloc": [202, 264], "add_2d_scatt": 202, "set_major_formatt": [202, 204, 207, 259, 264], "nullformatt": [202, 204, 207, 259], "lle": [202, 203, 204, 206, 495, 654, 658, 951, 1007], "thought": [202, 264, 360, 374, 411, 951, 955], "analys": [202, 328, 379, 766, 767, 951, 973, 978], "lle_standard": 202, "s_standard": 202, "lle_ltsa": 202, "ltsa": [202, 203, 204, 654, 658, 951], "s_ltsa": 202, "lle_hessian": 202, "hessian": [202, 203, 204, 381, 613, 623, 624, 634, 645, 654, 658, 950, 958, 989, 990, 1010], "s_hessian": 202, "lle_mod": 202, "s_mod": 202, "lle_method": 202, "tangent": [202, 312, 654, 658, 952, 989, 990], "eigenmap": [202, 654, 656, 658, 660, 989, 990, 996], "isometr": [202, 653, 655, 656, 657, 951], "geodes": [202, 653, 951], "s_isomap": 202, "md_scale": 202, "normalized_stress": [202, 655, 659, 951, 1010], "s_scale": 202, "laplacian": [202, 338, 371, 405, 417, 427, 585, 604, 608, 656, 660, 729, 730, 738, 862, 950, 951, 967, 990, 996, 1001], "s_spectral": 202, "t_sne": [202, 1003], "s_t_sne": 202, "plot_compare_method": [202, 975], "offsetbox": 203, "plot_embed": 203, "425": [203, 580], "shown_imag": 203, "someth": [203, 216, 256, 320, 346, 348, 349, 350, 354, 382, 954, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "4e": 203, "imagebox": 203, "annotationbbox": 203, "offsetimag": 203, "neighborhoodcomponentsanalysi": [203, 267, 268, 269, 957, 1004, 1009, 1012], "random_project": [203, 213, 966, 971, 996, 1001, 1011, 1012], "sparserandomproject": [203, 213, 858, 966, 996, 1001, 1009, 1011, 1012], "n_iter_without_progress": [203, 657, 1000, 1001], "nca": [203, 267, 268, 269, 815, 957], "676": [203, 634, 975], "plot_lle_digit": [203, 975], "pole": 204, "thin": [204, 585], "earth": [204, 321, 728, 973], "041": 204, "sphere_data": 204, "trans_data": 204, "2g": [204, 207, 662, 1006], "257": [204, 237], "258": 204, "191": [204, 352, 955, 975], "plot_manifold_spher": [204, 975], "euclidean_dist": [205, 213, 348, 415, 419, 422, 653, 659, 726, 808, 809, 810, 812, 814, 816, 817, 818, 819, 820, 995, 1000, 1003, 1004, 1012], "finfo": [205, 436, 437, 443, 571, 615, 616, 619, 620, 621, 647, 648, 705, 1010], "x_true": 205, "dissimilar": [205, 312, 360, 371, 417, 655, 659, 951, 1001, 1011], "embedding_": [205, 360, 653, 654, 655, 656, 657], "nmd": 205, "npo": 205, "plot_md": [205, 975], "sr_point": 206, "sr_color": 206, "ambient": 206, "text2d": 206, "unrol": 206, "unnecessarili": [206, 1002, 1005], "clump": 206, "sr_lle": 206, "sr_err": 206, "locally_linear_embed": [206, 951], "sr_tsne": 206, "stretch": [206, 229], "byproduct": 206, "sh_point": 206, "sh_color": 206, "topologi": [206, 207], "sh_lle": 206, "sh_err": 206, "sh_tsne": 206, "plot_swissrol": [206, 975], "clearer": [207, 969], "distil": 207, "pub": [207, 804, 861], "misread": 207, "narin": [207, 1002, 1003], "kokhlikyan": [207, 1002, 1003], "898": [207, 975], "plot_t_sne_perplex": [207, 975], "cope": [209, 335, 341, 950], "multimod": 209, "inli": [209, 950, 960], "unimod": [209, 439], "localoutlierfactor": [209, 219, 265, 266, 292, 360, 528, 870, 960, 1002, 1003, 1005, 1009, 1010, 1011, 1012], "modal": [209, 439, 905], "hypercub": [209, 480], "decent": [209, 238, 341, 956], "handpick": 209, "absenc": [209, 242, 360, 677, 829, 953, 954], "negative_linestyl": 209, "outliers_fract": 209, "n_inlier": 209, "anomaly_algorithm": 209, "blobs_param": 209, "plot_anomaly_comparison": [209, 975], "transfus": 210, "1464": 210, "donat": 210, "cm_displai": 210, "y_score": [210, 246, 248, 360, 447, 448, 449, 672, 685, 690, 691, 703, 704, 720, 746, 752, 753, 758, 763, 766, 767, 777, 826, 954, 1001, 1009, 1011, 1013], "pos_label": [210, 219, 360, 403, 404, 663, 665, 667, 671, 672, 674, 691, 693, 694, 702, 746, 747, 748, 751, 753, 833, 850, 954, 1003, 1007, 1009, 1013], "roc_displai": 210, "previs": 210, "precision_recall_curv": [210, 246, 665, 671, 672, 691, 954, 996, 997, 1001, 1008, 1009, 1011, 1013], "pr_displai": 210, "easlii": 210, "302": [210, 239, 592, 975], "plot_display_object_visu": [210, 975], "summaris": [211, 289], "composit": [211, 289, 338, 378, 623, 752, 944, 950, 963, 990, 996], "num_proc": [211, 289], "cat_proc": [211, 289], "feat1": [211, 289, 382], "feat3": [211, 289, 382], "feat0": [211, 289], "feat2": [211, 289, 382], "plot_estimator_represent": [211, 975], "isotonicregress": [212, 945, 996, 997, 998, 999, 1001, 1003, 1004, 1005, 1007, 1009, 1010, 1011], "ir": [212, 379, 555, 690, 720, 801, 805, 952, 954], "out_of_bound": [212, 600], "y_": [212, 226, 230, 231, 271, 348, 377, 379, 602, 613, 634, 645, 693, 694, 702, 728, 747, 748, 751, 950, 954, 1001], "linearregressionifittedlinearregress": 212, "x_thresholds_": [212, 600, 1007], "y_thresholds_": [212, 600, 1007], "plot_isotonic_regress": [212, 975], "lemma": [213, 338, 373, 499, 506, 514, 858, 859, 860, 948, 990, 998], "johnson_lindenstrauss_min_dim": [213, 966, 996], "achliopta": [213, 859, 860, 966], "_compon": [213, 501], "geq": [213, 372, 379, 381, 950, 954, 964, 968, 969], "_sampl": [213, 379, 503, 505, 512], "admiss": [213, 334], "eps_rang": 213, "min_n_compon": 213, "nn_sampl": [213, 251], "semilogi": 213, "nn_compon": [213, 214], "100k": 213, "n_components_rang": 213, "rp": 213, "projected_data": 213, "n_byte": 213, "projected_dist": 213, "min_dist": 213, "max_dist": 213, "hexbin": 213, "gridsiz": 213, "293": [213, 311, 975], "781": 213, "jl": [213, 859], "436": [213, 219, 321, 975], "plot_johnson_lindenstrauss_bound": [213, 975], "rbfsampler": [214, 604, 605, 607, 946, 979, 999, 1009, 1010], "mont": [214, 384, 576, 606, 607, 946, 959], "fourier": [214, 373, 603, 604, 605, 606, 607, 722, 723, 946], "acceler": [214, 293, 333, 358, 370, 374, 433, 657, 864, 951, 973, 978, 1004, 1008, 1010, 1012], "data_train": [214, 240, 320, 474], "targets_train": 214, "data_test": [214, 240, 320, 474], "targets_test": 214, "kernel_svm": 214, "linear_svm": 214, "feature_map_fouri": 214, "feature_map_nystroem": [214, 604], "fourier_approx_svm": 214, "feature_map": [214, 279], "nystroem_approx_svm": 214, "kernel_svm_tim": 214, "kernel_svm_scor": 214, "linear_svm_tim": 214, "linear_svm_scor": 214, "fourier_scor": 214, "nystroem_scor": 214, "fourier_tim": 214, "nystroem_tim": 214, "feature_map__n_compon": 214, "timescal": 214, "ly": [214, 814, 816, 817, 818, 999], "flat_grid": 214, "lv_ep": 214, "tab10": [214, 230], "601": [214, 975], "plot_kernel_approxim": [214, 975], "krr": [215, 608, 947], "insensit": [215, 608, 641, 643, 752, 867, 947, 968, 969, 995], "fifth": [215, 947, 979], "kr": [215, 239, 1009], "svr_fit": 215, "kr_fit": 215, "sv_ratio": 215, "support_": [215, 315, 434, 439, 558, 559, 567, 868, 869, 870, 871, 872, 969], "y_svr": 215, "svr_predict": 215, "y_kr": 215, "kr_predict": 215, "09999999999999999": [215, 247, 308], "737": [215, 489], "478": 215, "177": [215, 352], "092": 215, "sv_ind": 215, "arithmet": [215, 352, 354, 374, 516, 613, 634, 645, 669, 682, 700, 701, 721, 759, 954, 1003], "test_tim": [215, 320], "train_test_s": 215, "learningcurvedisplai": [215, 241, 293, 949, 1010, 1011], "negate_scor": [215, 769, 785], "score_typ": [215, 241, 254, 294, 769, 785, 1011], "std_display_styl": [215, 241, 769, 785], "plot_kernel_ridge_regress": [215, 975], "set_config": [216, 221, 223, 286, 289, 295, 333, 334, 365, 375, 402, 408, 409, 412, 414, 429, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 447, 448, 449, 498, 499, 503, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 546, 547, 553, 555, 556, 559, 562, 575, 576, 591, 592, 600, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 655, 764, 765, 770, 772, 781, 787, 788, 789, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 811, 813, 816, 817, 823, 824, 826, 829, 831, 832, 833, 838, 845, 846, 861, 862, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 1004, 1006, 1009, 1011], "metaestimatormixin": 216, "regressormixin": [216, 348, 360, 430, 1006], "transformermixin": [216, 259, 348, 360, 430, 1003, 1010, 1011, 1012], "metadata_rout": [216, 373, 402, 408, 409, 412, 414, 430, 434, 435, 436, 437, 438, 439, 440, 441, 447, 448, 449, 498, 499, 503, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 546, 547, 553, 555, 556, 559, 575, 576, 600, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 655, 764, 765, 770, 772, 781, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 811, 813, 816, 817, 823, 824, 826, 829, 831, 832, 833, 838, 845, 846, 861, 862, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877], "metadatarout": [216, 402, 429, 520, 521, 528, 534, 535, 562, 592, 612, 616, 618, 620, 624, 626, 628, 630, 636, 638, 640, 763, 766, 767, 777, 794, 795, 796, 797, 798, 799, 800, 825, 826, 913, 1012], "methodmap": [216, 911], "get_routing_for_object": [216, 911], "process_rout": [216, 1012], "my_group": [216, 365], "my_weight": [216, 365], "my_other_weight": [216, 365], "enable_metadata_rout": [216, 295, 365, 402, 408, 409, 412, 414, 429, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 447, 448, 449, 498, 499, 503, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 546, 547, 553, 555, 556, 559, 562, 575, 576, 592, 600, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 655, 763, 764, 765, 766, 767, 770, 772, 777, 781, 787, 788, 789, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 811, 813, 816, 817, 823, 824, 825, 826, 829, 831, 832, 833, 838, 845, 846, 861, 862, 864, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 1011], "check_metadata": 216, "obj": [216, 368, 532, 533, 911, 912, 913, 914, 915, 920], "print_rout": 216, "get_metadata_rout": [216, 388, 402, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 429, 430, 434, 435, 436, 437, 438, 439, 440, 441, 447, 448, 449, 450, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 546, 547, 548, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 575, 576, 592, 593, 594, 595, 600, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 653, 654, 655, 656, 657, 761, 762, 763, 764, 765, 766, 767, 768, 770, 771, 772, 773, 776, 777, 778, 779, 780, 781, 782, 783, 784, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 822, 823, 824, 825, 826, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 858, 859, 861, 862, 863, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 910, 911, 912, 913, 914, 954, 1012], "_serial": 216, "exampleclassifi": 216, "smart": [216, 408, 424, 425, 555], "accomplish": [216, 348, 372, 511, 951, 955, 957, 978, 1012], "magic": [216, 347, 352, 384, 581, 586, 589], "set_fit_request": [216, 295, 365, 402, 408, 409, 412, 414, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 553, 556, 559, 600, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 655, 798, 799, 801, 802, 803, 804, 805, 811, 831, 832, 845, 846, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877], "set_predict_request": [216, 408, 412, 414, 447, 448, 449, 517, 576, 600, 609, 610, 874, 875, 876, 877], "set_score_request": [216, 295, 365, 402, 408, 412, 414, 430, 434, 435, 436, 437, 438, 439, 440, 441, 447, 448, 449, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 530, 532, 533, 534, 535, 575, 576, 600, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 643, 644, 645, 794, 795, 796, 797, 799, 800, 801, 802, 803, 804, 805, 808, 809, 813, 816, 817, 823, 824, 826, 861, 862, 866, 867, 868, 869, 871, 872, 874, 875, 876, 877, 954], "inherit": [216, 346, 348, 359, 360, 388, 542, 641, 895, 897, 950, 995, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1010, 1011, 1012], "metaclassifi": [216, 217], "owner": [216, 341, 343, 910, 911], "method_map": [216, 911], "fit_param": [216, 360, 398, 402, 407, 410, 430, 497, 499, 501, 502, 504, 507, 508, 514, 520, 521, 532, 534, 535, 547, 548, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 592, 593, 595, 600, 603, 604, 605, 606, 607, 630, 636, 769, 785, 787, 788, 789, 790, 791, 793, 794, 795, 796, 797, 798, 799, 800, 810, 815, 818, 822, 825, 829, 830, 831, 832, 835, 836, 838, 839, 840, 841, 843, 844, 845, 846, 858, 859, 914, 1002, 1005, 1006, 1007, 1009, 1011, 1012, 1013], "metadatarequest": [216, 388, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 434, 435, 436, 438, 439, 440, 441, 447, 448, 449, 450, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 514, 515, 516, 517, 522, 523, 524, 525, 526, 527, 529, 530, 531, 546, 547, 548, 553, 554, 555, 556, 557, 560, 561, 563, 564, 565, 568, 575, 576, 593, 594, 595, 600, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 617, 619, 621, 622, 623, 625, 627, 629, 631, 632, 633, 634, 635, 637, 639, 641, 642, 643, 644, 645, 653, 654, 655, 656, 657, 761, 762, 764, 765, 768, 770, 771, 772, 773, 776, 778, 779, 780, 781, 782, 783, 784, 801, 802, 803, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 822, 823, 824, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 858, 859, 861, 862, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 911, 913, 1012], "request_rout": 216, "validate_metadata": [216, 911], "routed_param": [216, 914], "route_param": [216, 911], "caller": [216, 375, 611, 612, 617, 625, 626, 627, 646, 856, 857, 911, 912, 922, 930, 931, 932, 1004], "predict_param": [216, 430, 532, 533, 1008], "object_nam": [216, 911, 914], "method_nam": [216, 911, 914], "silent": [216, 382, 546, 822, 964, 1000, 1001, 1003, 1004, 1008, 1009], "bug": [216, 288, 289, 290, 291, 292, 293, 294, 295, 344, 348, 349, 351, 354, 358, 360, 974, 995, 996, 997, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "notabl": [216, 279, 340, 360, 461, 692, 839, 951, 953, 957, 999, 1002, 1009], "metaclassifierifittedmetaclassifi": 216, "exampleclassifierexampleclassifi": 216, "typeerror": [216, 291, 351, 676, 890, 911, 938, 1002, 1003, 1006, 1008, 1012], "got": [216, 246, 329, 351, 516, 614, 630, 1008, 1010, 1012], "sample_weight1": 216, "sample_weight2": 216, "aliased_sample_weight": 216, "alia": [216, 347, 350, 354, 360, 365, 402, 408, 409, 412, 414, 430, 434, 435, 436, 437, 438, 439, 440, 441, 447, 448, 449, 498, 499, 503, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 546, 547, 553, 555, 556, 559, 575, 576, 582, 600, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 655, 764, 765, 770, 772, 781, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 811, 813, 816, 817, 823, 824, 826, 829, 831, 832, 833, 838, 845, 846, 861, 862, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 928, 960, 974, 995, 1009], "calle": [216, 912], "predict_log_proba": [216, 348, 360, 514, 515, 516, 518, 520, 522, 524, 529, 558, 559, 623, 624, 641, 763, 766, 767, 777, 787, 797, 801, 802, 803, 804, 805, 823, 826, 863, 868, 871, 874, 876, 969, 995, 1008, 1012], "meta_est": 216, "routerconsumerclassifi": 216, "add_self_request": [216, 911], "self_request": 216, "clf_sample_weight": 216, "meta_clf_sample_weight": 216, "routerconsumerclassifierifittedrouterconsumerclassifi": 216, "simplepipelin": 216, "_required_paramet": [216, 348, 394], "transformer_": [216, 430], "boilerpl": [216, 348, 978, 988], "exampletransform": 216, "set_transform_request": [216, 447, 448, 449, 498, 547, 553, 555, 556, 600, 829, 832, 838, 846], "metaregressor": 216, "weightedmetaregressor": 216, "__metadata_request__fit": 216, "compat": [216, 242, 259, 289, 340, 349, 355, 356, 358, 360, 364, 365, 382, 428, 434, 473, 531, 542, 554, 568, 579, 580, 583, 584, 585, 587, 588, 597, 598, 599, 623, 624, 638, 640, 738, 742, 764, 765, 768, 770, 771, 772, 773, 776, 778, 779, 780, 781, 782, 783, 784, 810, 811, 826, 831, 839, 840, 878, 879, 882, 917, 951, 954, 957, 959, 973, 974, 978, 990, 995, 998, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "silenc": 216, "exampleregressor": 216, "commun": [216, 339, 345, 349, 351, 354, 360, 374, 381, 503, 505, 512, 657, 675, 838, 944, 951, 957, 964, 968, 973, 977, 978, 1003, 1004], "vendor": [216, 1000, 1003, 1004], "NOT": [216, 265, 343, 349, 773, 806, 807], "signatur": [216, 320, 321, 341, 453, 454, 522, 523, 529, 530, 559, 575, 576, 624, 638, 640, 676, 706, 769, 785, 788, 790, 793, 839, 914, 943, 1002, 1008, 1012], "plot_metadata_rout": [216, 975], "theta_c": [217, 488], "reject": [217, 360, 361, 488, 636, 691, 886, 887, 950, 954, 1003], "likewis": [217, 374, 488], "surround": [217, 346, 812, 960], "cca": [217, 377, 448, 450, 999, 1003, 1004, 1005, 1007, 1009], "onevsrestclassifi": [217, 246, 248, 256, 365, 372, 794, 796, 866, 979, 996, 997, 999, 1001, 1002, 1008, 1009, 1012], "min_x": 217, "max_x": 217, "plot_subfigur": 217, "min_i": 217, "max_i": [217, 956], "zero_class": 217, "one_class": 217, "nfor": 217, "175": [217, 352, 964, 975], "plot_multilabel": [217, 975], "extratreesregressor": [218, 381, 522, 530, 531, 876, 877, 998, 1001, 1003, 1004, 1005, 1008, 1009, 1010, 1011, 1012], "n_face": 218, "face_id": 218, "n_pixel": [218, 237], "nn": [218, 382, 660, 986], "y_test_predict": 218, "true_fac": 218, "completed_fac": 218, "plot_multioutput_face_complet": [218, 975], "iforest": 219, "pharuj": 219, "rajborirug": 219, "ra": 219, "kmitl": 219, "ac": [219, 495, 629, 650, 651, 950, 967, 988], "robustscal": [219, 843, 856, 944, 964, 1000, 1001, 1003, 1005, 1006, 1007, 1011], "make_estim": 219, "iforest_kw": 219, "lof_kw": 219, "outlier_detector": [219, 396], "perf_count": 219, "negative_outlier_factor_": [219, 266, 812, 960], "expected_n_anomali": 219, "expected_anomaly_fract": 219, "kddcup": [219, 339, 457, 990], "inject": [219, 341, 381], "attack": [219, 341], "fetch_kddcup99": [219, 341, 1002, 1003, 1004, 1007, 1008, 1013], "percent10": [219, 457], "int32": [219, 259, 286, 346, 360, 408, 412, 414, 416, 418, 424, 868, 869, 870, 871, 872, 919, 969, 1004, 1010, 1011, 1012], "anomaly_frac": 219, "10065": 219, "338": 219, "protocol_typ": 219, "cat_column": 219, "wilderness_area": 219, "soil_typ": 219, "x_forestcov": 219, "14302": 219, "137": [219, 352, 996], "forestcov": 219, "usd": 219, "sqft": 219, "ames_h": 219, "div": [219, 899], "lot_area": 219, "misc_featur": 219, "add_categori": 219, "noinfo": 219, "mas_vnr_typ": 219, "2714": 219, "categorical_columns_selector": 219, "fetal": 219, "cardiotocogram": 219, "heart": 219, "fhr": 219, "minor": [219, 242, 246, 341, 349, 361, 461, 954, 995, 997, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "x_cardiotocographi": 219, "2126": 219, "datasets_nam": 219, "dataset_nam": [219, 259], "model_idx": 219, "plot_chance_level": [219, 246, 248, 249, 665, 667, 1011], "chance_level_kw": [219, 665, 667, 1011], "privileg": [219, 354], "n_neighbors_list": [219, 261], "localoutlierfactor__n_neighbor": 219, "preprocessor_list": 219, "interquartil": [219, 844, 856], "iqr": [219, 844, 856], "75th": [219, 844], "squash": [219, 350, 384, 496, 502, 507, 513], "plot_outlier_detection_bench": [219, 975], "recalcul": [220, 222, 374, 992, 995], "mlpregressormlpregressor": 220, "tree_disp": 220, "mlp_disp": 220, "0x7f7ab1a24f70": 220, "plot_partial_dependence_visualization_api": [220, 975], "deactiv": [221, 340, 347, 352, 364, 375, 766, 767, 1009], "standard_scal": 221, "polynomialfeaturespolynomialfeatur": 221, "pcapca": 221, "svcsvc": [221, 237, 239, 290], "numeric_preprocessor": 221, "imputation_mean": 221, "categorical_preprocessor": [221, 285], "imputation_const": 221, "onehot": [221, 280, 281, 375, 831, 964], "gender": [221, 839, 964], "classifier__n_estim": 221, "classifier__max_featur": 221, "classifier__max_depth": 221, "classifier__criterion": 221, "gridsearchcvinot": 221, "fittedgridsearchcv": 221, "plot_pipeline_displai": [221, 975], "svcifittedsvc": 222, "svc_disp": [222, 288, 992], "rfc_disp": [222, 288, 992], "plot_roc_curve_visualization_api": [222, 975], "transform_output": [223, 286, 433, 864, 1010, 1011], "slep018": [223, 348, 1010], "x_test_scal": 223, "894264": 223, "798301": 223, "271411": 223, "327605": 223, "244466": 223, "086944": 223, "327407": 223, "459074": 223, "660797": 223, "462234": 223, "576989": 223, "159419": 223, "933197": 223, "427329": 223, "414810": 223, "039497": 223, "275851": 223, "scaler2": 223, "x_test_np": 223, "x_test_df": 223, "feature_names_in_": [223, 286, 291, 360, 395, 402, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 429, 430, 434, 435, 436, 437, 438, 439, 440, 441, 447, 448, 449, 450, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 575, 576, 592, 593, 594, 595, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 653, 654, 655, 656, 657, 761, 762, 763, 766, 767, 777, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 822, 823, 824, 825, 826, 829, 830, 831, 832, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 858, 859, 861, 862, 863, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 1008, 1009, 1010, 1011, 1013], "num_pip": 223, "num_col": 223, "7621951219512195": 223, "log_reg": [223, 292], "config_context": [223, 333, 334, 370, 591, 864, 1002, 1008, 1011], "reset": [223, 329, 354, 499, 641, 642, 643, 806, 807, 835, 836, 846, 997], "standardscalerifittedstandardscal": 223, "1088": 223, "151101": 223, "479229": 223, "188153": 223, "660": 223, "393297": 223, "263234": 223, "657": [223, 239], "975455": 223, "285": [223, 298, 688], "532843": 223, "546068": 223, "1511007": 223, "47922861": 223, "18815268": 223, "39329747": 223, "26323428": 223, "97545464": 223, "53284267": 223, "54606834": 223, "plot_set_output": [223, 975], "bayesiangaussianmixtur": [225, 226, 231, 762, 953, 1001, 1003, 1004, 1008, 1009, 1012], "weight_concentration_prior_typ": [225, 231, 761, 953, 1001], "dirichlet_distribut": [225, 761, 953, 1001], "dirichlet_process": [225, 231, 761, 953, 1001], "weight_concentration_prior": [225, 231, 761, 953], "covar": [225, 226, 231], "eig_val": 225, "eig_vec": 225, "unit_eig_vec": 225, "arctan2": [225, 227, 230], "56b4e9": 225, "plot_titl": 225, "weights_": [225, 761, 762, 1009], "covariances_": [225, 226, 227, 230, 231, 761, 762, 1002], "get_xaxi": [225, 269, 279], "set_tick_param": 225, "labelleft": 225, "0072b2": 225, "f0e442": 225, "d55e00": 225, "mean_precision_prior": [225, 231, 761], "nprior": 225, "gamma_0": [225, 231], "reg_covar": [225, 761, 762], "init_param": [225, 228, 231, 761, 762], "concentrations_prior": 225, "plot_concentration_prior": [225, 975], "_base": [226, 348], "color_it": [226, 230, 231], "splot": [226, 231], "dp": [226, 231], "shouldn": [226, 231, 346], "em": [226, 227, 231, 408, 412, 424, 501, 761, 762, 953, 1009], "dpgmm": [226, 231, 995, 999, 1001], "207": [226, 277, 280, 975, 995], "plot_gmm": [226, 975], "ronweiss": 227, "make_ellips": 227, "datalim": 227, "skf": [227, 378, 782], "train_index": [227, 300, 378, 764, 765, 768, 770, 771, 772, 773, 776, 778, 779, 780, 781, 782, 783, 784], "test_index": [227, 300, 378, 764, 765, 768, 770, 771, 772, 773, 776, 778, 779, 780, 781, 782, 783, 784], "cov_typ": [227, 456], "means_init": [227, 228, 762], "y_train_pr": 227, "train_accuraci": 227, "y_test_pr": 227, "test_accuraci": [227, 240], "218": [227, 343, 436, 680, 750, 975], "plot_gmm_covari": [227, 975], "random_from_data": [228, 761, 762, 953], "diamond": 228, "colour": [228, 343, 382, 552, 955], "eventu": [228, 373, 374, 383, 558, 978], "walsh": [228, 1007, 1009], "timer": [228, 352], "_samples_gener": 228, "extmath": [228, 320, 355, 373, 418, 995, 996, 1001, 1002, 1005, 1009, 1010, 1012], "row_norm": 228, "x_squared_norm": [228, 425], "get_initial_mean": 228, "times_init": 228, "relative_tim": 228, "ini": 228, "init_tim": 228, "2fx": 228, "plot_gmm_init": [228, 975], "shifted_gaussian": 229, "stretched_gaussian": 229, "score_sampl": [229, 264, 265, 266, 272, 360, 380, 434, 497, 506, 528, 642, 761, 762, 763, 766, 767, 777, 811, 812, 822, 826, 870, 960, 998, 1003, 1005, 1007], "plot_gmm_pdf": [229, 975], "component_1": 230, "component_2": 230, "best_parameters_": 230, "gmm_bic_scor": 230, "callabl": [230, 243, 360, 378, 381, 382, 383, 385, 386, 406, 408, 409, 410, 411, 412, 414, 415, 417, 422, 424, 425, 429, 430, 431, 432, 496, 498, 500, 502, 504, 510, 511, 522, 523, 524, 525, 526, 527, 529, 530, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 575, 576, 585, 593, 595, 599, 604, 608, 624, 631, 636, 638, 640, 653, 656, 657, 661, 676, 684, 696, 706, 735, 738, 742, 743, 744, 745, 756, 757, 763, 766, 767, 769, 777, 785, 788, 789, 790, 791, 793, 806, 807, 808, 809, 810, 812, 813, 814, 815, 816, 817, 818, 830, 839, 861, 862, 868, 869, 870, 871, 872, 915, 921, 924, 938, 943, 954, 964, 995, 999, 1002, 1003, 1004, 1005, 1007, 1009, 1011], "0x7f7a7d9d9280": 230, "gaussianmixturegaussianmixtur": 230, "param_n_compon": 230, "param_covariance_typ": 230, "829429": 230, "1084": 230, "038689": 230, "1114": 230, "517272": 230, "1148": 230, "512281": 230, "1179": 230, "977890": 230, "catplot": 230, "358": [230, 975], "plot_gmm_select": [230, 975], "loos": [231, 236, 969, 1003], "liberti": 231, "judgment": [231, 954], "panel": [231, 264, 279, 380, 973], "primarili": [231, 244, 346, 360, 370, 374, 912, 978, 1004, 1005], "covariance_prior": [231, 761], "432": [231, 239, 376, 975], "plot_gmm_sin": [231, 975], "mislabel": [233, 381, 956], "imbal": [233, 242, 378, 672, 693, 694, 702, 747, 748, 751, 752, 954], "set_printopt": 233, "titles_opt": 233, "plot_confusion_matrix": [233, 288, 975, 1005, 1006, 1007, 1008], "groupkfold": [234, 244, 295, 365, 378, 559, 768, 769, 770, 771, 772, 781, 785, 787, 788, 789, 790, 793, 983, 1001, 1008], "groupshufflesplit": [234, 378, 983, 1001], "shufflesplit": [234, 241, 316, 378, 765, 771, 773, 783, 792, 983, 995, 996, 998, 1000, 1001], "stratifiedgroupkfold": [234, 1008], "stratifiedshufflesplit": [234, 308, 378, 983, 995, 996, 1001, 1002, 1008], "1338": 234, "cmap_data": 234, "cmap_cv": 234, "coolwarm": [234, 305], "n_point": [234, 806, 807], "percentiles_class": 234, "perc": 234, "group_prior": 234, "visualize_group": 234, "yticklabel": [234, 320], "ngroup": 234, "nclass": 234, "plot_cv_indic": [234, 975], "tr": [234, 343, 350, 374, 376, 434, 435, 436, 437, 438, 439, 440, 441, 804], "_split": 234, "843": 234, "this_cv": 234, "2317": 234, "1206": 234, "172": [235, 306, 352, 458, 459, 614, 950, 975], "plot_cv_predict": [235, 975], "fnr": [236, 663, 691], "det_curv": [236, 663, 746, 753, 954, 1007, 1008, 1013], "detcurvedisplai": [236, 291, 691, 1007, 1008, 1012, 1013], "ax_roc": 236, "ax_det": 236, "feedback": [236, 345, 346, 347, 361, 973, 977, 1003], "aid": [236, 374, 756, 757, 951, 978, 995, 1007], "plot_det": [236, 975], "n_imag": 237, "print_datafram": 237, "filtered_cv_result": 237, "mean_precis": 237, "std_precis": 237, "mean_recal": 237, "std_recal": 237, "mean_test_precis": [237, 243], "std_test_precis": 237, "mean_test_recal": 237, "std_test_recal": 237, "03f": 237, "refit_strategi": 237, "best_index": [237, 243], "precision_threshold": 237, "high_precision_cv_result": 237, "rank_test_recal": 237, "rank_test_precis": [237, 243], "best_recall_std": 237, "best_recal": 237, "best_recall_threshold": 237, "high_recall_cv_result": 237, "fastest_top_recall_high_precision_index": 237, "idxmin": 237, "854": 237, "061": 237, "780": 237, "889": [237, 402], "890": 237, "073": [237, 436, 437], "743": [237, 986], "065": [237, 313, 352, 975], "066": [237, 613], "611": [237, 239, 506], "028": [237, 321], "618": 237, "00481": 237, "877206": 237, "069196": 237, "0x7f7a7cb8bd30": 237, "807": [237, 239], "462": [237, 975], "plot_grid_search_digit": [237, 975], "minimis": [238, 374, 378, 623, 624, 970], "219": 238, "260": [238, 1008], "york": [238, 752, 761, 944, 954, 966], "usa": [238, 341, 863, 944, 951, 966, 967], "best_index_": [238, 243, 763, 766, 767, 777], "wenhao": [238, 1003, 1004], "zhang": [238, 374, 407, 629, 644, 650, 651, 654, 658, 722, 723, 950, 951, 952, 956, 968, 999, 1000, 1002, 1003, 1004, 1005, 1007, 1011, 1012, 1013], "wenhaoz": 238, "ucla": [238, 950], "lower_bound": 238, "best_score_idx": 238, "best_low_complex": 238, "fewest": [238, 592], "candidate_idx": 238, "param_reduce_dim__n_compon": 238, "199": [238, 612, 755, 969, 975], "plot_grid_search_refit_cal": [238, 975], "moon": [239, 275, 281, 320, 321, 487], "moder": [239, 346, 384, 419, 960], "352": [239, 352], "repeatedstratifiedkfold": [239, 256, 378, 778, 782, 1002], "repetit": [239, 256, 351, 378, 778, 779, 962, 1009], "rank_test_scor": [239, 247, 763, 777, 1001], "rename_axi": 239, "9400": 239, "079297": 239, "9300": 239, "077846": 239, "3_poli": 239, "9044": [239, 1002], "098776": 239, "2_poli": 239, "6852": 239, "169106": 239, "certainti": [239, 348, 706, 954], "repreat": 239, "model_scor": [239, 258], "regex": [239, 322, 429, 431], "_test_scor": [239, 437, 559, 1008], "set1": [239, 268, 269], "labelpad": 239, "882561": 239, "783392": 239, "351390": 239, "746492": 239, "298688": 239, "355440": 239, "nadeau": [239, 1003], "bengio": [239, 823, 824, 943, 967], "framework": [239, 333, 348, 358, 360, 368, 374, 602, 653, 761, 950, 951, 958, 974, 978, 995, 1001], "diebold": 239, "mariano": 239, "proven": [239, 948, 952, 978], "replic": [239, 345, 348], "cdot": [239, 312, 371, 374, 379, 380, 384, 579, 580, 584, 587, 588, 832, 946, 948, 954, 958, 964], "sum_": [239, 248, 316, 371, 372, 374, 379, 380, 381, 503, 505, 512, 661, 719, 948, 950, 951, 954, 956, 958, 959, 961, 962, 964, 968, 969, 970], "ij": [239, 269, 371, 374, 379, 503, 505, 512, 611, 612, 617, 618, 625, 626, 627, 628, 646, 649, 950, 951, 954, 956, 959, 964, 969], "corrected_std": 239, "crossvalid": [239, 253], "corrected_var": 239, "ddof": [239, 846, 857], "compute_corrected_ttest": 239, "t_stat": 239, "p_val": 239, "model_1_scor": 239, "model_2_scor": 239, "ncorrect": 239, "uncorrect": [239, 560, 563], "t_stat_uncorrect": 239, "p_val_uncorrect": 239, "benavoli": 239, "colleagu": 239, "conjug": [239, 417, 427, 637, 639, 652, 660, 950], "overlin": [239, 371], "t_post": 239, "ppf": 239, "infin": [239, 316, 506, 647, 648, 677, 787, 873, 885, 957], "minu": [239, 724, 954], "better_prob": 239, "cdf": 239, "773": [239, 293, 613, 804, 975], "essenti": [239, 293, 344, 348, 374, 378, 379, 474, 954, 957, 974, 978, 1003], "rope": 239, "rope_interv": 239, "rope_prob": 239, "x_rope": 239, "uncertain": [239, 298, 345], "credibl": 239, "cred_interv": 239, "cred_int_df": 239, "000977": 239, "019023": 239, "005422": 239, "025422": 239, "016445": 239, "036445": 239, "bonferroni": 239, "n_comparison": 239, "pairwise_t_test": 239, "model_i": 239, "model_k": 239, "model_i_scor": 239, "model_k_scor": 239, "pairwise_comp_df": 239, "model_1": 239, "model_2": 239, "565": [239, 322], "276": 239, "851": 239, "pairwise_bayesian": 239, "worse_prob": 239, "pairwise_bayesian_df": 239, "018": [239, 321, 437], "187": [239, 352, 549, 955, 986, 997], "dietterich": [239, 796, 955], "bouckaert": 239, "frank": [239, 797, 955, 1000, 1004, 1005], "pacif": 239, "asia": [239, 964], "confer": [239, 341, 374, 379, 385, 404, 409, 415, 476, 500, 528, 661, 673, 690, 720, 822, 823, 824, 954, 960, 966, 970], "discoveri": [239, 341, 352, 355, 374, 381, 383, 385, 409, 476, 520, 521, 528, 557, 560, 561, 563, 564, 565, 571, 685, 704, 747, 954, 966, 978, 1009, 1010], "corani": 239, "dem\u0161ar": 239, "zaffalon": 239, "accompani": [239, 1003], "144": [239, 352, 995], "409": [239, 975], "plot_grid_search_stat": [239, 975], "loader": [240, 301, 320, 339, 340, 341, 463, 464, 473, 974, 988, 995, 1000, 1002, 1003, 1006], "857": [240, 321], "complementnb": [240, 320, 801, 802, 804, 805, 956, 1003, 1007, 1008, 1010], "tfidfvectorizertfidfvector": 240, "complementnbcomplementnb": 240, "vect__": 240, "clf__": 240, "parameter_grid": 240, "vect__max_df": 240, "vect__min_df": 240, "vect__ngram_rang": [240, 988], "unigram": [240, 341, 382, 553, 554, 556, 1002], "bigram": [240, 382, 553, 554, 556, 988], "vect__norm": 240, "clf__alpha": [240, 988], "parallelis": [240, 433, 864, 1002], "random_search": [240, 247], "best_paramet": 240, "get_param": [240, 349, 360, 384, 388, 402, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 429, 430, 434, 435, 436, 437, 438, 439, 440, 441, 447, 448, 449, 450, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 546, 547, 548, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 600, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 653, 654, 655, 656, 657, 761, 762, 763, 766, 767, 777, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 822, 823, 824, 825, 826, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 858, 859, 861, 862, 863, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 943, 1005, 1006, 1007, 1009, 1010], "816": [240, 436, 437], "709": 240, "ambigu": [240, 351, 382, 537, 677, 903, 957, 1004, 1006, 1008], "shorten_param": 240, "xanchor": 240, "yanchor": 240, "autom": [240, 350, 364, 657, 943, 950, 951, 954, 973, 978], "parallel_coordin": 240, "understood": [240, 346, 374, 911, 985], "column_result": 240, "transform_func": 240, "fromkei": [240, 881], "ngram_rang": [240, 301, 382, 553, 554, 556], "color_continuous_scal": 240, "viridis_r": 240, "slide": [240, 609, 950, 972, 973], "intersect": [240, 305, 371, 374, 702], "undo": [240, 836, 999], "stronger": [240, 608, 617, 623, 624, 637, 638, 639, 640, 641, 643, 652], "plot_grid_search_text_feature_extract": [240, 975], "ax_idx": 241, "resort": [241, 341, 520, 1005], "learning_curv": [241, 293, 365, 769, 949, 998, 1001, 1002, 1003, 1004, 1005, 1007, 1009, 1010, 1012], "return_tim": [241, 790, 1005], "test_scores_nb": 241, "fit_times_nb": 241, "score_times_nb": 241, "test_scores_svm": 241, "fit_times_svm": 241, "score_times_svm": 241, "score_tim": [241, 378, 789, 790], "inflect": 241, "762": [241, 320, 975], "plot_learning_curv": [241, 975], "class_likelihood_ratio": [242, 954, 1010], "medicin": [242, 677, 954], "medic": [242, 378, 677, 950, 978], "truli": [242, 246, 335, 677, 954], "odd": [242, 381, 479, 677, 954, 1002, 1003], "suppos": [242, 297, 333, 334, 348, 352, 376, 381, 382, 383, 522, 526, 529, 623, 624, 631, 633, 639, 640, 641, 706, 812, 866, 868, 871, 874, 876, 892, 958, 1004, 1006, 1012], "physiolog": [242, 343, 986], "hopefulli": [242, 354, 995], "indirect": [242, 347, 360], "bio": 242, "pos_lr": 242, "neg_lr": 242, "raise_warn": [242, 677, 940], "positive_likelihood_ratio": [242, 677], "negative_likelihood_ratio": [242, 677], "extract_scor": 242, "test_positive_likelihood_ratio": 242, "test_negative_likelihood_ratio": 242, "661086": 242, "724702": 242, "383973": 242, "054045": 242, "108843": 242, "986989": 242, "268147": 242, "034278": 242, "most_frequ": [242, 516, 592, 595, 816, 944, 954, 1003, 1005, 1007], "373333": 242, "5557": 242, "235430": 242, "stand": [242, 322, 350, 358, 379, 496, 502, 510, 511, 561, 574, 643, 670, 682, 700, 701, 721, 750, 752, 759, 953, 954, 960], "lr_base": 242, "pos_lr_bas": 242, "pos_lr_base_std": 242, "neg_lr_bas": 242, "neg_lr_base_std": 242, "plot_indic": 242, "scoring_on_bootstrap": 242, "n_bootstrap": [242, 996], "results_for_preval": 242, "bootstrap_indic": 242, "default_rng": 242, "2039": 242, "507943": 242, "113516": 242, "207667": 242, "009778": 242, "3419": 242, "443238": 242, "125140": 242, "198766": 242, "008915": 242, "421087": 242, "123828": 242, "192913": 242, "006360": 242, "6196": [242, 1000], "409717": 242, "164009": 242, "193949": 242, "005861": 242, "7578": [242, 1002], "334795": 242, "175298": 242, "189267": 242, "005840": 242, "8963": 242, "197666": 242, "238955": 242, "185654": 242, "005027": 242, "024": [242, 288, 321, 975], "plot_likelihood_ratio": [242, 975], "scorer_nam": [243, 763, 777], "rvraghav93": [243, 279], "predefin": [243, 776, 943, 957, 983, 1010, 1012], "403": [243, 321], "402": 243, "maskedarrai": [243, 1001], "param_min_samples_split": 243, "sample_score_mean": 243, "sample_score_std": 243, "std_": [243, 1000], "rank_test_": 243, "best_scor": 243, "mean_test_": 243, "plot_multi_metric_evalu": [243, 975], "cawlei": [244, 954], "talbot": 244, "mach": [244, 372, 378, 558, 559], "2079": 244, "2107": 244, "007581": 244, "007833": 244, "num_trial": 244, "x_iri": [244, 987], "y_iri": [244, 987], "p_grid": 244, "non_nested_scor": 244, "nested_scor": 244, "leaveoneout": [244, 378, 983], "leaveonegroupout": [244, 378, 764, 771, 772, 983, 1001], "inner_cv": [244, 295], "outer_cv": [244, 295], "non_nest": 244, "score_differ": 244, "211": [244, 293, 300, 321, 842, 854], "non_nested_scores_lin": 244, "nested_lin": 244, "difference_plot": 244, "730": [244, 975], "plot_nested_cross_validation_iri": [244, 975], "permutation_test_scor": [245, 365, 378, 995, 1002, 1007], "plant": [245, 248, 249, 339, 954, 990], "uncorrel": [245, 342, 493, 499, 506, 954, 986], "n_uncorrelated_featur": 245, "x_rand": 245, "undergo": 245, "score_iri": 245, "perm_scores_iri": 245, "pvalue_iri": 245, "n_permut": [245, 378, 791], "score_rand": 245, "perm_scores_rand": 245, "pvalue_rand": 245, "evid": [245, 320, 354, 374, 378, 379, 381, 609, 761, 953], "ndata": 245, "destroi": [245, 382, 759, 835, 964], "ojala": [245, 378, 791], "garriga": [245, 378, 791], "040": [245, 975], "plot_permutation_tests_for_classif": [245, 975], "t_p": 246, "plu": [246, 343, 351, 644, 797, 800, 955, 968], "f_p": 246, "f_n": 246, "2t_p": 246, "denomin": [246, 382, 387, 440, 555, 669, 721, 948], "stairstep": 246, "ap": [246, 672, 673, 954], "sum_n": [246, 672, 954], "r_n": [246, 672, 954], "p_n": [246, 672, 954], "nth": [246, 672, 954], "r_k": 246, "p_k": [246, 954], "trapezoid": [246, 671, 672, 954], "binar": [246, 248, 249, 338, 340, 373, 718, 801, 830, 831, 833, 837, 839, 847, 850, 954, 956, 979, 990, 1009, 1011], "average_precision_scor": [246, 665, 671, 673, 746, 752, 954, 995, 998, 1002, 1003, 1009, 1011], "mt19937": [246, 251, 889, 1006], "0x7f7a7e9f8640": 246, "precisionrecalldisplai": [246, 291, 746, 748, 751, 954, 1005, 1008, 1011, 1012, 1013], "label_binar": [246, 248, 833, 999], "average_precis": [246, 665, 672, 706, 954], "prevalence_pos_label": [246, 665], "setup": [246, 248, 333, 344, 348, 352, 354, 957, 980], "f_score": 246, "extens": [246, 248, 264, 333, 334, 340, 341, 344, 347, 349, 350, 354, 355, 358, 368, 374, 379, 461, 468, 499, 705, 897, 905, 951, 953, 954, 972, 973, 978, 995, 1001, 1008, 1009, 1011, 1012], "356": [246, 962, 975], "plot_precision_recal": [246, 975], "deem": [247, 248, 499, 962, 1008], "991": [247, 954], "05063247886572012": 247, "13822072286080167": 247, "987": [247, 321], "010877306503748912": 247, "9226260871125187": 247, "023": [247, 867, 962], "7271482064048191": 247, "25183501383331797": 247, "993": [247, 321], "1111111111111111": 247, "5555555555555556": 247, "n_top": 247, "param_dist": [247, 251, 290], "n_iter_search": 247, "320": [247, 341, 943, 968, 975, 995], "plot_randomized_search": [247, 975], "unambigu": [248, 955, 1001], "notion": [248, 312, 321, 335, 358, 374, 379, 381, 950, 954], "scheme": [248, 264, 285, 286, 341, 360, 374, 378, 380, 382, 531, 555, 623, 624, 670, 776, 833, 834, 837, 839, 843, 847, 850, 855, 866, 871, 943, 950, 964, 968, 995, 1003, 1006, 1007, 1012], "harder": [248, 249, 283, 341, 345, 348, 354, 358, 374, 480, 526, 527], "bulk": [248, 385, 409], "scrutin": 248, "labelbinar": [248, 360, 705, 795, 830, 839, 847, 850, 955, 979, 998, 999, 1000, 1004, 1009], "y_onehot_test": 248, "class_id": [248, 249], "nvirginica": 248, "tp_c": 248, "fn_c": 248, "fp_c": 248, "tn_c": 248, "briefli": [248, 345, 359, 381, 943, 1005], "nreceiv": 248, "micro_roc_auc_ovr": 248, "mcclish": [248, 752], "deci": 248, "1989": [248, 600, 752, 823, 824, 950, 957], "jul": 248, "fpr_grid": 248, "mean_tpr": [248, 249], "interp": [248, 249, 308], "macro_roc_auc_ovr": 248, "deeppink": 248, "aqua": 248, "role": [248, 333, 345, 379], "pair_list": 248, "pair_scor": 248, "label_a": 248, "label_b": 248, "a_mask": 248, "b_mask": 248, "ab_mask": 248, "a_tru": 248, "b_true": 248, "idx_a": 248, "idx_b": 248, "fpr_a": 248, "tpr_a": 248, "fpr_b": 248, "tpr_b": 248, "macro_roc_auc_ovo": 248, "ovo_tpr": 248, "pool": [248, 358, 410, 600, 923, 974, 1006], "plot_roc": [248, 975], "mean_fpr": 249, "viz": [249, 353], "interp_tpr": 249, "mean_auc": 249, "std_auc": 249, "std_tpr": 249, "tprs_upper": 249, "tprs_lower": 249, "plot_roc_crossv": [249, 975], "halvinggridsearchcv": [250, 251, 290, 365, 544, 767, 943, 1007, 1009, 1010, 1012], "1e4": [250, 624, 644, 860, 966], "gsh": 250, "gsh_time": 250, "gs_time": 250, "make_heatmap": 250, "is_sh": 250, "make_cbar": 250, "param_c": [250, 763], "param_gamma": [250, 763, 777], "sh": [250, 350, 354, 943], "scores_matrix": 250, "pivot_t": 250, "aggfunc": 250, "0e": [250, 514, 515], "get_xticklabel": 250, "rotation_mod": 250, "cbar_ax": 250, "896": [250, 613, 975], "plot_successive_halving_heatmap": [250, 975], "rsh": [251, 290], "0x7f7a7d469440": 251, "_distn_infrastructur": 251, "rv_discrete_frozen": 251, "0x7f7ab1a2c880": 251, "0x7f7a7ebf3070": 251, "halvingrandomsearchcvifittedhalvingrandomsearchcv": 251, "params_str": 251, "drop_dupl": 251, "n_resources_": [251, 766, 767, 943], "nn_candid": 251, "n_candidates_": [251, 766, 767, 943], "n_iterations_": [251, 766, 767], "multialign": 251, "plot_successive_halving_iter": [251, 975], "n_samples_train": [252, 868, 869, 870, 871, 872], "n_samples_test": [252, 868, 869, 870, 871, 872, 957, 964], "train_error": 252, "test_error": 252, "i_alpha_optim": 252, "alpha_optim": 252, "00020991037201085544": 252, "683": [252, 975], "plot_train_error_vs_test_error": [252, 975], "nonlinear": [253, 291, 609, 653, 654, 658, 661, 832, 950, 951, 959, 964], "true_fun": 253, "polynomial_featur": 253, "plot_underfitting_overfit": [253, 975], "validationcurvedisplai": [254, 949, 1011], "subset_mask": 254, "isin": [254, 298], "param_rang": [254, 294, 316, 785, 793, 949, 1011], "507": [254, 375, 975], "plot_validation_curv": [254, 975], "ovo": [256, 288, 752, 794, 868, 871, 954, 955, 969], "onevsoneclassifi": [256, 365, 795, 796, 996, 998, 999, 1001, 1002, 1004, 1007, 1009, 1012], "review": [256, 285, 333, 341, 348, 349, 350, 351, 352, 358, 361, 378, 379, 500, 506, 954, 964, 980], "sort_index": 256, "class_protein_loc": 256, "cyt": 256, "erl": 256, "exc": [256, 938], "me1": 256, "me2": 256, "me3": 256, "mit": [256, 341, 352, 374, 384, 575, 576, 579, 584, 587, 608, 631, 632, 641, 803, 947], "244": [256, 549], "nuc": 256, "429": 256, "pox": 256, "vac": 256, "outputcodeclassifi": [256, 365, 794, 795, 1002, 1007, 1011, 1012], "code_s": [256, 796, 955], "ovo_tre": 256, "ovr_tre": 256, "ecoc": 256, "cv_results_tre": 256, "cv_results_ovo": 256, "cv_results_ovr": 256, "cv_results_ecoc": 256, "glanc": [256, 345], "tree_optim": 256, "unifi": [256, 347, 355, 358, 359, 381, 602, 973, 995], "allwein": 256, "erin": [256, 1007], "yoram": [256, 699], "singer": [256, 631, 632, 699, 950, 954, 968, 969], "141": [256, 466, 499, 866, 955], "defens": 256, "298": [256, 962, 975], "plot_multiclass_overview": [256, 975], "classifierchain": [258, 360, 365, 798, 800, 1002, 1007, 1010, 1012, 1013], "assembl": [258, 286, 322, 826], "multitask": [258, 382, 955], "jaccard": [258, 371, 415, 422, 664, 668, 684, 693, 698, 702, 742, 743, 744, 760, 957, 1003, 1004], "adam": [258, 275, 823, 824, 958, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "kleczewski": [258, 1002, 1003], "yeast": [258, 797], "417": 258, "40597": 258, "jaccard_scor": [258, 668, 693, 698, 760, 954, 1004, 1007], "base_lr": [258, 797], "y_pred_ovr": 258, "ovr_jaccard_scor": 258, "y_pred_chain": 258, "chain_jaccard_scor": 258, "y_pred_ensembl": 258, "ensemble_jaccard_scor": 258, "x_po": 258, "takeawai": 258, "571": [258, 975], "plot_classifier_chain_yeast": [258, 975], "kneighborstransform": [259, 261, 288, 657, 818, 957, 1005, 1009, 1010], "nmslib": 259, "pynndesc": 259, "pip": [259, 288, 289, 290, 291, 292, 293, 294, 295, 334, 344, 346, 350, 352, 364, 370, 970], "pynndescenttransform": 259, "csr_matrix": [259, 289, 405, 409, 417, 461, 499, 509, 522, 523, 524, 525, 528, 529, 530, 531, 553, 558, 559, 679, 792, 821, 839, 841, 868, 869, 871, 872, 874, 875, 876, 877, 904, 909, 926, 929, 930, 931, 932, 933, 934, 935, 936, 937, 940, 955, 964, 968, 969, 970, 1010], "nmslibtransform": 259, "sw": 259, "n_samples_fit_": [259, 808, 809, 810, 812, 814, 816, 817, 818], "cosinesimil": 259, "nmslib_": 259, "adddatapointbatch": 259, "createindex": 259, "n_samples_transform": [259, 810, 818], "thread": [259, 289, 292, 344, 358, 360, 374, 381, 798, 799, 920, 921, 922, 998, 1000, 1002, 1003, 1004, 1005, 1006, 1008, 1010, 1011, 1012], "num_thread": 259, "knnquerybatch": 259, "benchmark": [259, 290, 321, 322, 333, 339, 341, 346, 358, 364, 367, 372, 433, 480, 864], "mnist_10000": 259, "mnist_20000": 259, "20_000": 259, "tsne_param": 259, "barnes_hut": [259, 657, 1002, 1003], "parallel_batch_queri": 259, "msg": [259, 938], "transformer_nam": 259, "longest": 259, "fit_dur": 259, "transform_dur": 259, "823": 259, "884": 259, "769": 259, "733": 259, "077": [259, 266, 321, 975], "448": 259, "759": 259, "numba": [259, 974], "cold": 259, "nearestneighbor": [259, 292, 364, 374, 385, 409, 411, 413, 426, 653, 654, 658, 808, 809, 810, 812, 816, 817, 818, 957, 995, 999, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012], "i_ax": 259, "828": 259, "955": [259, 378, 619], "994": 259, "brute": [259, 358, 369, 378, 385, 409, 411, 415, 422, 597, 598, 653, 654, 806, 807, 808, 809, 810, 812, 814, 816, 817, 818, 961, 990, 999, 1003, 1007, 1010, 1011, 1012], "spent": [259, 285, 347, 352, 790, 1010], "approximate_nearest_neighbor": [259, 975], "slow": [261, 279, 320, 333, 340, 344, 346, 379, 382, 412, 664, 840, 841, 845, 868, 871, 903, 951, 957, 974, 987, 1002], "temporarydirectori": [261, 288], "graph_model": 261, "classifier_model": 261, "sklearn_graph_cache_": 261, "tmpdir": [261, 288], "full_model": 261, "classifier__n_neighbor": 261, "grid_model": 261, "213": [261, 975], "plot_caching_nearest_neighbor": [261, 975], "beforehand": [262, 970], "entitl": [262, 412, 576, 808, 946], "knn__weight": 262, "unifom": 262, "513": [262, 815, 957, 975], "plot_classif": [262, 975], "79269019073225": 263, "kerneldens": [263, 264, 272, 380, 997, 1003, 1004, 1008, 1009, 1010], "new_data": [263, 348], "4x11": 263, "real_data": 263, "set_clim": 263, "117": [263, 975, 996], "plot_digits_kde_sampl": [263, 975], "block": [264, 279, 292, 341, 343, 346, 351, 354, 360, 371, 374, 377, 380, 417, 418, 427, 438, 444, 445, 453, 454, 476, 478, 660, 922, 957, 959], "wildli": [264, 953], "kd": [264, 374, 380, 957, 1003, 1004, 1005], "jakevdp": [264, 272], "aaaaff": [264, 267], "tophat": [264, 380, 806, 807, 811], "log_den": 264, "x_src": 264, "format_func": 264, "ih": 264, "epanechnikov": [264, 380, 806, 807, 811], "funcformatt": 264, "nullloc": 264, "true_den": 264, "plot_kde_1d": [264, 975], "plot_lof_novelty_detect": [265, 975], "x_inlier": 266, "n_error": 266, "x_score": [266, 447, 448, 449, 450], "legend_handl": 266, "handlerpathcollect": 266, "update_legend_marker_s": 266, "update_from": 266, "set_siz": 266, "handler_map": 266, "update_func": 266, "plot_lof_outlier_detect": [266, 975], "cmap_light": [267, 270], "ffaaaa": 267, "aaffaa": 267, "cmap_bold": [267, 270], "00ff00": 267, "756": [267, 975], "plot_nca_classif": [267, 975], "neighborhoodcomponentanalysi": 268, "dim_reduction_method": 268, "acc_knn": 268, "x_embed": [268, 269, 657, 661, 815, 957], "ntest": 268, "plot_nca_dim_reduct": [268, 975], "logsumexp": [269, 1002], "get_yaxi": [269, 279], "link_thickness_i": 269, "diff_embed": 269, "dist_embed": 269, "einsum": 269, "exp_dist_embed": 269, "relate_point": 269, "pt_i": 269, "pt_j": 269, "plot_nca_illustr": [269, 975], "8133333333333334": 270, "nearestcentroid": [270, 320, 955, 957, 995, 999, 1002, 1007, 1010], "darkblu": 270, "shrink_threshold": [270, 813, 957, 995, 1007], "149": [270, 955, 975, 995], "plot_nearest_centroid": [270, 975], "barycent": [271, 995], "202": [271, 975], "plot_regress": [271, 975], "geospati": [272, 380], "haversin": [272, 380, 664, 726, 728, 957, 1004, 1007], "latitud": [272, 279, 341, 463, 664, 728], "longitud": [272, 279, 341, 463, 664, 728], "xtrain": 272, "ytrain": 272, "radian": [272, 664, 728], "land_mask": 272, "ball_tre": [272, 385, 409, 411, 415, 422, 653, 654, 808, 809, 810, 811, 812, 814, 816, 817, 818, 957, 995, 1012], "ocean": 272, "plot_species_kd": [272, 975], "combat": [274, 379], "lesser": [274, 360, 407, 506, 950], "curvatur": 274, "779": [274, 320, 975], "plot_mlp_alpha": [274, 975], "bfg": [275, 575, 576, 613, 614, 623, 634, 637, 639, 645, 652, 957, 958, 1010], "980000": 275, "096950": 275, "momentum": [275, 823, 824, 958], "049530": 275, "nesterov": [275, 823, 824, 958, 1011, 1012], "049540": 275, "360000": 275, "978444": 275, "860000": 275, "504185": 275, "503452": 275, "045311": 275, "956038": 275, "243802": 275, "992766": 275, "041297": 275, "993879": 275, "042898": 275, "638843": 275, "855465": 275, "909293": 275, "318387": 275, "912632": 275, "290584": 275, "991653": 275, "045934": 275, "840000": 275, "601052": 275, "157334": 275, "154453": 275, "692470": 275, "689751": 275, "689143": 275, "150527": 275, "850000": 275, "341523": 275, "336188": 275, "335919": 275, "689015": 275, "830000": 275, "513034": 275, "512595": 275, "930000": 275, "170087": 275, "nesterovs_momentum": [275, 823, 824], "invscal": [275, 641, 642, 643, 823, 824, 968], "plot_arg": 275, "plot_on_dataset": 275, "nlearn": 275, "loss_": [275, 823, 824, 958, 1009], "loss_curve_": [275, 823, 824], "data_set": 275, "get_lin": 275, "686": [275, 308, 975], "plot_mlp_training_curv": [275, 975], "28x28": 276, "784": 276, "throw": [276, 355, 885, 999, 1002, 1003, 1004, 1005, 1009], "infrastructur": [276, 294, 973, 974], "44139186": 276, "19174891": 276, "13983521": 276, "11378556": 276, "09443967": 276, "07846529": 276, "06506307": 276, "05534985": 276, "986429": 276, "953061": 276, "plot_mnist_filt": [276, 975], "greyscal": 277, "bernoulli": [277, 382, 383, 801, 802, 803, 804, 805, 822, 823, 824, 829, 950, 964, 976, 990, 995], "bernoullirbm": [277, 823, 824, 959, 964, 997, 998, 1007, 1009, 1012], "yann": [277, 995, 997], "dauphin": [277, 997], "gabriel": [277, 1003, 1004, 1005, 1008, 1009], "synnaev": 277, "convolv": 277, "minmax_scal": [277, 279, 836, 1000, 1003], "nudge_dataset": 277, "1px": 277, "direction_vector": 277, "apply_along_axi": 277, "feature_rang": [277, 836, 852, 964, 997, 1007], "cg": [277, 623, 624, 637, 639, 652, 950, 999, 1000, 1002, 1006, 1008, 1009, 1012], "rbm": [277, 822, 823, 824, 959], "rbm_features_classifi": 277, "6000": [277, 592], "raw_pixel_classifi": 277, "logisticregressionifittedlogisticregress": 277, "_classif": 277, "1515": 277, "undefinedmetricwarn": [277, 693, 694, 747, 748, 751, 1004], "zero_divis": [277, 678, 693, 694, 702, 747, 748, 751, 954, 1005, 1007, 1011], "154": [277, 281, 616, 955, 975], "541": [277, 289, 417, 427, 975], "plot_rbm_logistic_classif": [277, 975], "incom": [279, 341, 405], "unscal": [279, 284, 950, 954, 1003, 1009], "unterthin": [279, 998, 999, 1000], "medinc": [279, 290, 341, 455], "houseag": [279, 290, 341, 455], "averoom": [279, 290, 341, 455], "room": [279, 341, 351, 374, 977], "avebedrm": [279, 341, 455], "bedroom": [279, 341], "aveoccup": [279, 290, 341, 455], "features_idx": 279, "quantile_rang": [279, 844, 856, 1001], "yeo": [279, 283, 842, 854, 964, 1003, 1009, 1011], "cox": [279, 283, 842, 854, 964, 1003, 1011], "plasma": 279, "plasma_r": 279, "create_ax": 279, "bottom_h": 279, "left_h": 279, "rect_scatt": 279, "rect_histx": 279, "rect_histi": 279, "ax_scatt": 279, "ax_histx": 279, "ax_histi": 279, "ax_scatter_zoom": 279, "ax_histx_zoom": 279, "ax_histy_zoom": 279, "rect_colorbar": 279, "ax_colorbar": 279, "plot_distribut": 279, "hist_nbin": 279, "x0_label": 279, "x1_label": 279, "hist_x1": 279, "hist_x0": 279, "aesthet": [279, 970, 1000], "tick_bottom": 279, "tick_left": 279, "outward": 279, "ec": [279, 495], "make_plot": 279, "item_idx": 279, "ax_zoom_out": 279, "ax_zoom_in": 279, "zoom_in_percentile_rang": 279, "cutoffs_x0": 279, "cutoffs_x1": 279, "non_outliers_mask": 279, "colorbarbas": 279, "OR": [279, 374, 385, 409, 1006], "indistinguish": 279, "quadrant": 279, "765": [279, 975], "plot_all_sc": [279, 975], "straightforward": [280, 345, 379, 978], "anywher": 280, "qinhanmin2005": 280, "sina": [280, 1008], "rnd": 280, "enc": [280, 282, 292, 294, 839, 840, 964], "x_bin": 280, "line_bin": 280, "plot_discret": [280, 975], "get_nam": 281, "broader": [281, 950, 977], "logisticregression__c": 281, "linearsvc__c": 281, "kbinsdiscretizer__n_bin": 281, "gradientboostingclassifier__learning_r": 281, "svc__c": [281, 826], "cm_piyg": 281, "piyg": 281, "b30065": 281, "178000": 281, "est_idx": 281, "plot_discretization_classif": [281, 975], "centers_0": 282, "centers_1": 282, "x_list": 282, "grid_encod": 282, "stripe": 282, "plot_discretization_strategi": [282, 975], "powertransform": [283, 843, 854, 944, 964, 1003, 1006, 1009, 1011], "johnwon": 283, "weibul": 283, "bimod": [283, 380], "ineffect": [283, 964, 1003, 1004], "eric": [283, 998, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "ericchang2017": 283, "northwestern": [283, 623], "contact": [283, 358, 973], "font_siz": 283, "bc": 283, "qt": [283, 843], "x_lognorm": [283, 964], "x_chisq": 283, "chisquar": 283, "x_weibul": 283, "x_gaussian": 283, "x_uniform": 283, "loc_a": 283, "loc_b": 283, "x_a": 283, "x_b": 283, "x_bimod": 283, "d81b60": 283, "0188ff": 283, "ffc107": 283, "b7a2ff": 283, "2ec5ac": 283, "figaspect": 283, "axes_idx": 283, "axes_list": 283, "x_trans_bc": 283, "lmbda_bc": 283, "lambdas_": [283, 842, 1008, 1011], "x_trans_yj": 283, "lmbda_yj": 283, "x_trans_qt": 283, "ax_origin": 283, "ax_bc": 283, "ax_yj": 283, "ax_qt": 283, "x_tran": [283, 294, 348, 370, 407, 429, 842, 847, 854, 964], "meth_nam": 283, "lmbda": 283, "879": [283, 975], "plot_map_data_to_norm": [283, 975], "involv": [284, 286, 288, 308, 312, 333, 335, 341, 344, 346, 350, 360, 361, 377, 384, 664, 794, 795, 951, 955, 957, 961, 962, 969, 973, 978, 986, 1003], "kneighbor": [284, 292, 808, 809, 810, 812, 814, 957, 999, 1004, 1008, 1009, 1010, 1011], "obatin": 284, "tyler": [284, 1002, 1008, 1009, 1010], "lanigan": [284, 1002], "tylerlanigan": 284, "sebastian": [284, 996, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1012], "raschka": [284, 1000, 1001, 1002, 1003, 1004, 1007], "sebastianraschka": 284, "alcohol": [284, 343], "malic": [284, 343], "acid": [284, 343], "scaled_x_train": 284, "x_plot_scal": 284, "fit_and_plot_model": 284, "scaled_pca": 284, "x_train_transform": [284, 329, 378], "x_train_std_transform": 284, "first_pca_compon": 284, "target_class": 284, "repercuss": 284, "unscaled_clf": 284, "scaled_clf": 284, "y_pred_scal": 284, "y_proba_sc": 284, "0825": 284, "vastli": 284, "644": [284, 975], "plot_scaling_import": [284, 975], "targetencod": [285, 286, 360, 839, 840, 944, 964, 973, 1011, 1012], "wine_review": 285, "42074": 285, "countri": [285, 295, 461, 951], "provinc": 285, "region_1": 285, "region_2": 285, "wineri": 285, "tremend": [285, 381], "variet": 285, "hail": 285, "martha": 285, "vineyard": 285, "235": 285, "napa": 285, "vallei": 285, "cabernet": 285, "sauvignon": 285, "heitz": 285, "spain": 285, "ripe": 285, "aroma": 285, "blackberri": 285, "cassi": 285, "carodorum": 285, "selecci\u00f3n": 285, "reserva": 285, "northern": 285, "toro": 285, "tinta": 285, "bodega": 285, "carmen": 285, "rodr\u00edguez": 285, "watson": [285, 375], "honor": 285, "late": [285, 335], "harvest": 285, "knight": 285, "sonoma": 285, "blanc": 285, "macaulei": 285, "oak": 285, "reserv": [285, 526, 527, 978, 979], "oregon": 285, "willamett": 285, "pinot": 285, "noir": 285, "ponzi": 285, "franc": [285, 728], "b\u00e9gude": 285, "aft": [285, 998], "br\u00fblade": 285, "provenc": 285, "bandol": 285, "one_hot": 285, "max_categori": [285, 292, 294, 839, 840, 964, 1009, 1011], "target_typ": [285, 847, 890, 917, 1012], "evaluate_model_and_stor": 285, "rmse_test_scor": 285, "rmse_train_scor": 285, "rmse_test_mean": 285, "rmse_test_std": 285, "rmse_train_mean": 285, "rmse_train_std": 285, "n_unique_categori": 285, "nuniqu": 285, "14810": 285, "1236": 285, "workaround": [285, 346, 763, 777], "high_cardinality_featur": 285, "low_cardinality_featur": 285, "mixed_encoded_preprocessor": 285, "high_cardin": 285, "low_cardin": 285, "mixed_pip": 285, "high_cardinalityindex": 285, "targetencodertargetencod": 285, "low_cardinalityindex": 285, "mixed_target": 285, "name_to_color": 285, "rmse_": 285, "_mean": 285, "_std": 285, "explod": 285, "unrel": [285, 334, 351, 354, 382, 480], "plot_target_encod": [285, 975], "near_uniqu": 286, "50_000": [286, 321], "n_categori": [286, 802, 840, 964], "kbin": [286, 293], "x_inform": 286, "permuted_categori": 286, "x_shuffl": 286, "catastroph": [286, 727, 974], "x_near_unique_categori": 286, "raw_model": 286, "0049896314219657345": 286, "00457762158159003": 286, "model_with_cf": 286, "cf": [286, 374, 377, 407, 665, 950, 964, 974], "8000184677460285": 286, "7927845601690948": 286, "coefs_cf": 286, "target_encod": 286, "x_train_no_cf_encod": 286, "x_test_no_cf_encod": 286, "model_no_cf": 286, "858486250088675": 286, "6338211367110066": 286, "coefs_no_cf": 286, "plot_target_encoder_cross_v": [286, 975], "announc": [288, 289, 290, 291, 292, 293, 294, 295, 350], "latest": [288, 289, 290, 291, 292, 293, 294, 295, 344, 346, 350, 352, 354, 970, 1009], "upgrad": [288, 289, 290, 291, 292, 293, 294, 295, 364, 974, 995, 1000, 1003], "conda": [288, 289, 290, 291, 292, 293, 294, 295, 334, 346, 347, 349, 350, 352, 354, 364, 367, 970], "forg": [288, 289, 290, 291, 292, 293, 294, 295, 334, 347, 349, 350, 354, 364], "plot_roc_curv": [288, 1005, 1007], "plot_precision_recall_curv": [288, 1005, 1007, 1008], "stackingclassifi": [288, 329, 360, 365, 381, 533, 944, 1005, 1006, 1007, 1008, 1009, 1010, 1012], "9473684210526315": 288, "radiusneighborstransform": [288, 810, 957, 1005, 1007, 1009, 1010], "sklearn_cache_": 288, "isomap__n_neighbor": 288, "nan_euclidean_dist": [288, 726, 944, 1005], "ccp_alpha": [288, 324, 522, 523, 524, 525, 529, 530, 874, 875, 876, 877, 970, 1005], "tree_": [288, 324, 328, 811, 874, 875, 876, 877], "node_count": [288, 324, 328, 874, 875, 876, 877], "check_estim": [288, 348, 360, 898, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010], "pytest": [288, 334, 344, 346, 348, 349, 364, 367, 370, 897, 898, 1005, 1008], "estimator_check": [288, 348, 360, 373, 1002, 1003, 1005, 1006, 1009, 1010, 1011], "parametrize_with_check": [288, 348, 897, 1005, 1006], "test_sklearn_compatible_estim": [288, 898], "decision_function_shap": [288, 317, 868, 871, 969, 1000, 1001, 1004, 1005], "9895999999999999": 288, "plot_release_highlights_0_22_0": [288, 975], "await": 289, "lam": [289, 290, 1006, 1013], "35776189065725783": 289, "42425183539869404": 289, "openmp": [289, 344, 349, 358, 360, 374, 381, 922, 1006, 1008, 1011], "608013148566445": 289, "10k": [289, 412], "monotoinc": 289, "usecas": [289, 292, 294, 374, 527], "gbdt_cst": 289, "999791942438998": 289, "plot_release_highlights_0_23_0": [289, 975], "art": [290, 352, 614, 657, 973, 978], "footprint": [290, 293, 333, 335, 374, 379, 520, 521, 522, 523, 528, 529, 530, 531, 997, 1000, 1001, 1006, 1007, 1010], "yarowski": [290, 863, 967], "selftrainingclassifi": [290, 300, 301, 302, 365, 967, 1007, 1012], "random_unlabeled_point": [290, 861, 862, 863], "self_training_model": [290, 863], "base_estim": [290, 348, 372, 518, 519, 520, 521, 797, 800, 863, 943, 1006, 1008, 1009, 1010, 1011], "selftrainingclassifierifittedselftrainingclassifi": 290, "7315": 290, "linear_baselin": 290, "714": 290, "decisiontreeregressorifitteddecisiontreeregressor": 290, "effort": [290, 346, 352, 973, 978, 1006, 1008], "523": [290, 489, 975], "plot_release_highlights_0_24_0": [290, 975], "l2_regular": [291, 381, 526, 527], "max_bin": [291, 292, 381, 526, 527, 1012], "quantileregressor": [291, 950, 954, 1008, 1009, 1010], "min_": [291, 374, 381, 836, 950, 964, 968, 969, 970], "sum_i": [291, 611, 612, 617, 618, 625, 626, 627, 628, 646, 649, 945, 946, 950, 952, 954, 959], "pb_q": [291, 950], "_1": [291, 312, 376, 379, 382, 496, 502, 503, 505, 510, 511, 512, 611, 612, 617, 618, 619, 620, 621, 625, 626, 627, 628, 646, 647, 648, 649, 730, 950, 952, 954, 969], "get_feature_nam": [291, 1003, 1004, 1006, 1007, 1008], "pet": [291, 295, 752, 954], "dog": [291, 292, 294, 295, 547, 747, 847, 964], "fish": 291, "pet_cat": 291, "pet_dog": 291, "pet_fish": 291, "plot_": [291, 364], "plot_release_highlights_1_0_0": [291, 975], "x_1d": 292, "hist_quantil": 292, "log_reg_input_featur": 292, "gather": [292, 294, 354, 361, 373, 374, 964, 978], "min_frequ": [292, 294, 839, 840, 964, 1009, 1011], "rabbit": [292, 294, 964], "snake": [292, 294, 547, 847, 964], "infrequent_categories_": [292, 294, 839, 840, 847, 964], "x0_cat": [292, 964], "x0_rabbit": [292, 964], "x0_infrequent_sklearn": [292, 964], "refactor": [292, 995, 997, 998, 999, 1005, 1008, 1009, 1010], "radius_neighbor": [292, 814, 816, 817, 818, 999, 1004, 1005, 1007, 1008, 1009, 1010], "pairwise_distances_argmin_min": [292, 743, 998, 1003, 1009, 1010, 1011, 1012], "radiusneighborsclassifi": [292, 808, 809, 814, 817, 955, 957, 995, 997, 1001, 1003, 1005, 1007, 1008, 1009, 1010, 1011, 1012], "radiusneighborsregressor": [292, 808, 809, 814, 816, 957, 995, 997, 1003, 1005, 1007, 1008, 1009, 1010, 1011, 1012], "trustworthi": [292, 1003, 1004, 1009, 1010, 1011, 1012], "labelpropag": [292, 299, 862, 863, 955, 967, 996, 1001, 1002, 1005, 1006, 1007, 1009, 1010, 1011], "labelspread": [292, 297, 298, 299, 301, 302, 861, 863, 955, 967, 996, 1001, 1002, 1005, 1006, 1009, 1010, 1011], "blog": [292, 333, 346, 352, 354, 361, 1006], "cython": [292, 333, 334, 344, 346, 349, 355, 358, 364, 367, 370, 373, 374, 381, 473, 964, 965, 968, 969, 973, 974, 995, 998, 999, 1001, 1007, 1010, 1011, 1012], "readili": [292, 379, 970, 978], "true_w": 292, "true_h": 292, "x_reconstruct": [292, 447, 448, 449, 548], "00364": 292, "divis": [292, 374, 382, 555, 556, 559, 677, 678, 693, 694, 702, 710, 747, 748, 751, 954, 987, 999, 1003, 1004, 1007, 1011, 1012], "bisect_km": 292, "864": [292, 975], "plot_release_highlights_1_1_0": [292, 975], "video": [293, 340, 349, 468, 955, 978, 980], "sepal_col": 293, "petal_col": 293, "x_out": [293, 830, 839, 840], "052506": 293, "592373": 293, "189830": 293, "973554": 293, "416010": 293, "630382": 293, "765012": 293, "362176": 293, "021849": 293, "788808": 293, "hist_no_interact": 293, "v1": [293, 340, 364, 526, 527, 761, 762, 1007, 1010, 1011, 1012], "liac": [293, 340, 346, 461, 1010, 1011], "arff": [293, 346, 461, 1007, 1010, 1011], "ticket": [293, 346], "cabin": 293, "boat": 293, "allen": [293, 998, 1000, 1002, 1005], "elisabeth": [293, 1012], "walton": 293, "24160": 293, "3375": 293, "b5": 293, "loui": [293, 1000, 1001, 1005, 1007, 1009, 1011, 1012], "mo": [293, 1006], "allison": 293, "hudson": 293, "9167": 293, "113781": 293, "151": [293, 352, 381, 466, 966], "5500": [293, 653, 951], "c22": 293, "c26": 293, "montreal": 293, "pq": 293, "chestervil": 293, "ON": 293, "helen": 293, "lorain": 293, "joshua": [293, 341, 997, 998, 1000, 1001, 1007, 1010, 1011], "creighton": 293, "bessi": 293, "waldo": 293, "compliant": [293, 346], "cupi": [293, 358, 370, 1012], "gpu": [293, 370, 958, 974, 988, 1012], "changelog": [293, 350, 360, 993], "plot_release_highlights_1_2_0": [293, 975], "throughout": [294, 329, 360, 592, 764, 823, 824, 979, 998, 1003], "codebas": [294, 329, 346, 347, 348, 382, 995, 1001], "ongo": [294, 347, 361], "incorpor": [294, 346, 375, 381, 953, 973, 978], "contrib": [294, 346, 348, 354, 358, 360, 374, 411, 973, 974, 1011], "adpot": 294, "true_label": [294, 297, 298], "non_noisy_label": 294, "9694149248180188": 294, "encodings_": [294, 847, 964], "validation_curv": [294, 316, 365, 785, 949, 1002, 1003, 1004, 1007, 1011], "geomspac": 294, "make_low_rank_matrix": [294, 489], "46858513287221654": 294, "297": [294, 321, 341, 975], "plot_release_highlights_1_3_0": [294, 975], "x_adult": 295, "y_adult": 295, "adult": [295, 461, 964], "fnlwgt": [295, 461], "workclass": [295, 461], "marit": [295, 461], "y_decis": [295, 797], "9283168699365594": 295, "df_out": 295, "heightpet_catpet_dogf64f64f64": 295, "2156660": 295, "8626621": 295, "4018260": 295, "7548291": 295, "2939931": 295, "rf_no_cst": 295, "rf_cst": 295, "icon": [295, 348], "hover": 295, "randomforestclassifierinot": 295, "fittedrandomforestclassifi": 295, "routin": [295, 335, 340, 343, 346, 347, 348, 349, 354, 358, 360, 383, 637, 639, 652, 809, 868, 869, 870, 871, 872, 951, 957, 964, 965, 968, 973, 978, 995, 1009, 1010, 1011], "get_scor": [295, 360, 697, 1002, 1011], "hyperparameter_grid": 295, "scoring_inner_cv": 295, "test_ms": 295, "interfer": [295, 1005], "27713977": 295, "37512985": 295, "7097597": 295, "36721751": 295, "39698642": 295, "levarag": 295, "linearoper": [295, 652], "x_spars": [295, 499, 925, 928], "x_dens": [295, 509], "time_spars": 295, "time_dens": 295, "speedup": [295, 333, 379, 381, 615, 619, 622, 995, 996, 997, 998, 1010], "2x": [295, 995], "plot_release_highlights_1_4_0": [295, 975], "semisupervis": [297, 360], "clai": [297, 298, 299, 302, 995], "woolam": [297, 298, 299, 302, 995], "n_total_sampl": [297, 298], "n_labeled_point": [297, 298], "unlabeled_set": 297, "everyth": [297, 329, 350, 352, 358, 429, 909, 973, 974, 995], "lp_model": [297, 298], "predicted_label": [297, 298], "transduction_": [297, 298, 299, 861, 862, 863], "_plot": 297, "0x7f7a6a5e0a30": 297, "pred_entropi": [297, 298], "label_distributions_": [297, 298, 861, 862, 1006], "uncertainty_index": [297, 298], "image_index": [297, 298], "plot_label_propagation_digit": [297, 975], "max_iter": 298, "______________________________________________________________________": 298, "290": [298, 653, 654, 658, 951], "280": 298, "unlabeled_indic": 298, "transduc": 298, "delete_indic": 298, "183": [298, 352, 955, 995], "nfit": 298, "delete_index": 298, "461": [298, 352, 975], "plot_label_propagation_digits_active_learn": [298, 975], "label_spread": 299, "labelspreadingifittedlabelspread": 299, "output_label": 299, "output_label_arrai": 299, "outer_numb": 299, "inner_numb": 299, "plot_label_propagation_structur": [299, 975], "breast_canc": 300, "augment": [300, 595, 848, 962, 978], "oliv": [300, 302, 1003, 1004, 1006, 1007, 1008], "rausch": [300, 302, 1003, 1004, 1007], "rauscho": [300, 302], "ethz": [300, 302], "total_sampl": [300, 501], "base_classifi": [300, 302, 967], "x_valu": 300, "99999": 300, "amount_label": 300, "amount_iter": 300, "self_training_clf": 300, "skfold": 300, "y_test_tru": 300, "labeled_iter_": [300, 863], "return_count": [300, 321, 818], "capsiz": 300, "twinx": 300, "plot_self_training_varying_threshold": [300, 975], "2823": 301, "2117": 301, "441": [301, 321], "758": 301, "1676": 301, "1108": 301, "847": 301, "tfidftransform": [301, 321, 322, 382, 454, 556, 988, 1002, 1003, 1009, 1011, 1012, 1013], "sdg_param": 301, "vectorizer_param": 301, "selftrain": 301, "st_pipelin": 301, "ls_pipelin": 301, "eval_and_print_metr": 301, "y_mask": 301, "x_20": 301, "y_20": 301, "plot_semi_supervised_newsgroup": [301, 975], "y_rand": 302, "y_30": 302, "y_50": 302, "ls30": 302, "ls50": 302, "ls100": 302, "st30": 302, "st50": 302, "rbf_svc": [302, 969], "color_map": 302, "plot_semi_supervised_versus_svm_iri": [302, 975], "my_kernel": [304, 969], "088": [304, 634, 962, 975], "plot_custom_kernel": [304, 975], "2x2": [305, 374, 718], "plot_iris_svc": [305, 975], "convention": [306, 360, 862], "support_vector_indic": 306, "plot_linearsvc_support_vector": [306, 975], "plot_oneclass": [307, 975], "midpoint": 308, "blink": 308, "act": [308, 320, 346, 359, 380, 381, 678, 693, 694, 702, 747, 748, 751, 841, 845, 951, 954, 957, 969, 1003], "spuriou": [308, 354, 964, 1008, 1009, 1010], "c_rang": 308, "gamma_rang": 308, "midpointnorm": 308, "masked_arrai": [308, 763, 777], "x_2d": 308, "y_2d": 308, "c_2d_rang": 308, "gamma_2d_rang": 308, "bright": 308, "brutal": 308, "plot_rbf_paramet": [308, 975], "064": [309, 352, 962, 975], "plot_separating_hyperplan": [309, 975], "plain": [310, 384, 622, 968], "n_samples_1": [310, 969], "n_samples_2": [310, 969], "clusters_std": 310, "wclf": 310, "wdisp": 310, "162": [310, 343, 975], "plot_separating_hyperplane_unbalanc": [310, 975], "blown": 311, "score_mean": 311, "score_std": 311, "this_scor": [311, 983], "plot_svm_anova": [311, 975], "outermost": 312, "hinge_loss": [312, 954, 999, 1007, 1008], "enrich": 312, "plot_training_data_with_decision_boundari": 312, "cosine_similar": [312, 724, 729, 952, 1000], "untransform": [312, 429, 432, 965], "bend": 312, "tanh": [312, 741, 823, 824, 952, 969], "hyperbol": [312, 607, 823, 824, 952, 958], "generaliz": [312, 381], "comprehens": [312, 382, 722, 723, 952, 978, 1003], "plot_svm_kernel": [312, 975], "plot_svm_margin": [313, 975], "fignum": 313, "unreg": 313, "yy_down": 313, "yy_up": 313, "nusvc": [314, 333, 402, 869, 955, 969, 995, 996, 997, 1000, 1003, 1005, 1006, 1007, 1009], "460": [314, 975], "plot_svm_nonlinear": [314, 975], "svr_rbf": 315, "svr_lin": 315, "svr_poli": 315, "kernel_label": 315, "model_color": 315, "setdiff1d": 315, "fancybox": 315, "399": [315, 975], "plot_svm_regress": [315, 975], "omega": [316, 377, 948], "dependen": 316, "reparametr": 316, "model_l1": 316, "shuffle_param": 316, "best_c": 316, "idxmax": 316, "train_size_idx": 316, "results_sc": 316, "c_scale": 316, "best_c_scal": 316, "somewhat": [316, 329, 335, 346, 348, 379, 381, 868, 871, 950, 969, 970], "dantzig": 316, "model_l2": 316, "plot_svm_scale_c": [316, 975], "break_ti": [317, 868, 871, 969, 1005], "accent": [317, 553, 554, 556, 1005], "plot_svm_tie_break": [317, 975], "emphasi": [318, 377, 868, 869, 870, 871, 872, 961, 973], "subtl": [318, 329, 953, 974], "plot_decision_funct": 318, "sample_weight_last_ten": 318, "sample_weight_const": 318, "clf_no_weight": 318, "clf_weight": 318, "plot_weighted_sampl": [318, 975], "size_mb": 320, "utf": [320, 322, 382, 452, 468, 547, 553, 554, 556], "load_dataset": 320, "sublinear_tf": [320, 379, 382, 555, 556], "duration_train": 320, "duration_test": 320, "data_train_size_mb": 320, "data_test_size_mb": 320, "2034": [320, 341], "98mb": 320, "1353": 320, "87mb": 320, "376mb": 320, "7831": 320, "000mb": 320, "ridgeclassifi": [320, 333, 637, 638, 640, 950, 955, 1000, 1004, 1008, 1009, 1010, 1013], "sparse_cg": [320, 637, 639, 652, 950, 996, 1002, 1004, 1005, 1009, 1011], "rarer": [320, 322, 382], "deeper": [320, 970], "plot_feature_effect": 320, "average_feature_effect": 320, "top5": 320, "top_indic": 320, "predictive_word": 320, "bar_siz": 320, "y_loc": 320, "keyword": [320, 340, 346, 348, 351, 353, 360, 374, 385, 388, 403, 409, 410, 415, 417, 422, 429, 432, 461, 468, 500, 503, 505, 524, 525, 532, 533, 534, 535, 585, 593, 596, 597, 604, 608, 611, 612, 617, 618, 625, 626, 627, 628, 646, 649, 653, 657, 662, 663, 664, 665, 666, 667, 738, 742, 743, 744, 745, 756, 757, 769, 785, 806, 807, 808, 809, 810, 812, 814, 816, 817, 818, 819, 820, 826, 830, 898, 921, 943, 951, 954, 957, 967, 995, 999, 1001, 1002, 1003, 1005, 1007, 1009, 1010, 1011, 1012, 1013], "keith": [320, 995, 1000], "atheist": 320, "orbit": [320, 321], "caltech": 320, "expectedli": 320, "pollut": [320, 692, 749, 954, 960], "sender": [320, 341], "livesei": 320, "solntz": 320, "wpd": 320, "sgi": 320, "jon": [320, 1002, 1005, 1006, 1008, 1009, 1012], "nntp": [320, 341, 988], "1qlettinn8oi": 320, "cco": 320, "allan": [320, 372, 1007], "schneider": [320, 1008], "instinct": 320, "happi": [320, 358, 361, 781, 782], "listen": 320, "murder": 320, "voluntari": 320, "disregard": [320, 360, 382, 397, 430, 447, 448, 449, 517, 519, 521, 523, 525, 527, 530, 533, 535, 576, 600, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 625, 626, 627, 628, 629, 630, 632, 635, 637, 638, 643, 644, 686, 687, 688, 749, 799, 800, 809, 817, 824, 835, 836, 842, 843, 846, 851, 854, 855, 857, 867, 869, 872, 875, 877, 954, 1003], "beings": 320, "bahavior": 320, "theirs": 320, "mimicri": 320, "imit": 320, "parrot": 320, "polli": 320, "pulchritud": 320, "anim": [320, 382], "kill": [320, 358], "Or": [320, 328, 378, 379, 839, 954, 960, 968], "sigh": 320, "wonder": [320, 344], "bahaviour": 320, "believ": [320, 321, 354, 358, 978], "primat": 320, "arbitarili": 320, "poster": [320, 345, 346, 987], "weren": [320, 840, 1004], "slai": 320, "mate": 320, "ritual": 320, "whatnot": 320, "aren": [320, 341, 350, 364, 373, 690, 720, 959, 1005, 1007], "ye": [320, 354, 360, 833, 850, 950], "gorilla": 320, "dolphin": 320, "platypu": 320, "writer": 320, "launch": [320, 321, 364, 978], "custom_nam": 320, "clf_descr": 320, "rocchio": [320, 813], "000601": 320, "772": [320, 687], "5316": 320, "0301": 320, "000514": 320, "000654": 320, "0513": 320, "704": 320, "0298": 320, "000605": 320, "752": 320, "000633": 320, "00249": 320, "00128": 320, "748": [320, 352], "00166": 320, "000503": 320, "txt": [320, 340, 458, 468], "curs": [320, 321, 374, 380, 956, 957, 982, 987], "harm": [320, 348, 382, 759], "plot_document_classification_20newsgroup": [320, 975], "discov": [321, 373, 374, 379, 382, 385, 409, 413, 979, 1010], "category_s": 321, "true_k": 321, "3387": 321, "evaluations_std": 321, "fit_and_evalu": 321, "evaluation_std": 321, "score_valu": 321, "std_score": [321, 1008], "collis": [321, 322, 382, 547, 554], "x_tfidf": 321, "367": [321, 381, 995], "7929": [321, 1002], "prod": [321, 586], "phenomenon": [321, 964], "cluster_s": 321, "1638": 321, "309": 321, "447": 321, "1689": 321, "638": [321, 352], "580": [321, 806, 807], "3384": 321, "1887": 321, "311": 321, "332": [321, 854], "1771": 321, "652": 321, "973": [321, 378], "628": 321, "377": 321, "016": 321, "redo": 321, "x_lsa": 321, "explained_vari": [321, 954], "329": [321, 415], "015": [321, 324, 962], "310": 321, "029": [321, 962], "minibatch_kmean": 321, "342": 321, "371": 321, "original_space_centroid": 321, "order_centroid": 321, "ve": [321, 346, 382, 978, 988, 1002], "shuttl": 321, "bibl": 321, "sparciti": 321, "lsa_vector": 321, "x_hashed_lsa": 321, "572": 321, "393": 321, "351": 321, "355": 321, "037": [321, 674], "df_std": 321, "speak": [321, 333, 346, 968], "safer": [321, 329, 344, 374, 378, 995], "plot_document_clust": [321, 975], "18000": [322, 341], "raw_data": 322, "data_size_mb": 322, "3803": 322, "245mb": 322, "anyth": [322, 350, 352, 360, 365, 375, 378, 914, 918, 1009], "unicod": [322, 382, 452, 468, 547, 553, 554, 556, 919, 995, 1003, 1007], "charact": [322, 346, 351, 360, 382, 468, 473, 474, 553, 554, 556, 878, 959, 988, 995, 1008, 1010], "underscor": [322, 348, 360, 938, 985, 995, 1005, 1008], "tok": [322, 382], "findal": 322, "token_freq": 322, "dict_count_vector": 322, "021": 322, "47928": 322, "vocabulary_": [322, 382, 546, 553, 556, 988, 995], "19145": 322, "n_nonzero_column": 322, "43873": 322, "inact": [322, 340, 346], "47668": 322, "input_typ": [322, 382, 547], "531": 322, "y_po": 322, "downsid": 322, "featureheash": 322, "implicitli": [322, 355, 381, 562, 597, 598, 845, 944, 946, 961, 964, 969], "token_pattern": [322, 382, 553, 554, 556], "47885": 322, "492": [322, 608, 947, 986], "937": [322, 975], "plot_hashing_vs_dict_vector": [322, 975], "parameter": [324, 384, 579, 580, 587, 588, 761, 762, 950, 951, 959, 964, 970], "weakest": [324, 970], "cost_complexity_pruning_path": [324, 874, 875, 876, 877], "drawstyl": [324, 665], "3272984419327777": 324, "444": [324, 975], "plot_cost_complexity_prun": [324, 975], "ryb": 325, "pairidx": 325, "borderpad": 325, "handletextpad": 325, "plot_iris_dtc": [325, 975], "plot_tre": [325, 328, 970, 1004, 1006, 1007, 1008, 1010, 1011], "plot_tree_regress": [326, 975], "regr_3": 327, "y_3": 327, "plot_tree_regression_multioutput": [327, 975], "decision_path": [328, 522, 523, 529, 530, 531, 874, 875, 876, 877, 1001, 1006], "decisiontreeclassifierifitteddecisiontreeclassifi": 328, "compute_node_depth": 328, "children_left": 328, "children_right": 328, "n_node_sampl": 328, "weighted_n_node_sampl": 328, "travers": [328, 957, 961], "n_node": [328, 406, 410, 428, 522, 523, 529, 530, 531, 874, 875, 876, 877, 908], "node_depth": 328, "is_leav": 328, "pop": [328, 358, 881, 983, 1003], "visit": [328, 346, 961, 977], "node_id": [328, 878, 880], "is_split_nod": 328, "children": [328, 374, 381, 406, 410, 428, 531, 999, 1012], "33035714": 328, "30357143": 328, "36607143": 328, "800000011920929": 328, "45333333": 328, "54666667": 328, "950000047683716": 328, "91666667": 328, "08333333": 328, "02564103": 328, "97435897": 328, "n_output": [328, 360, 381, 391, 397, 398, 402, 407, 410, 430, 434, 447, 448, 449, 497, 499, 501, 502, 504, 507, 508, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 530, 532, 533, 534, 535, 547, 548, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 575, 576, 593, 595, 598, 600, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 637, 638, 639, 640, 641, 643, 644, 686, 687, 692, 709, 710, 712, 714, 715, 717, 718, 749, 752, 754, 755, 763, 766, 767, 769, 777, 785, 787, 788, 789, 790, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 813, 815, 816, 817, 822, 823, 824, 825, 829, 830, 831, 832, 835, 836, 838, 839, 840, 841, 843, 844, 845, 846, 858, 859, 861, 862, 866, 867, 868, 869, 871, 872, 874, 875, 876, 877, 892, 925, 954, 955, 970, 1002, 1005], "node_index": 328, "node_ind": 328, "leaf_id": 328, "sample_id": [328, 341, 462], "threshold_sign": 328, "inequ": [328, 360, 374, 408, 412, 424, 664, 951, 952, 957], "common_nod": 328, "common_node_id": 328, "plot_unveil_tree_structur": [328, 975], "x_test_transform": [329, 378], "tip": [329, 332, 346, 349, 352, 369, 382, 499, 506, 610, 657, 950, 976, 977, 989, 990, 998], "standard_norm": [329, 652], "unfair": 329, "x_select": 329, "gbc": 329, "x_train_select": 329, "x_test_select": 329, "glossari": [329, 346, 348, 352, 373, 385, 386, 402, 405, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 422, 423, 424, 425, 426, 427, 429, 432, 434, 437, 439, 453, 456, 457, 460, 462, 468, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 548, 549, 559, 567, 572, 573, 575, 576, 592, 597, 599, 604, 605, 606, 607, 611, 612, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 652, 653, 654, 655, 656, 657, 658, 659, 660, 666, 738, 742, 745, 757, 761, 762, 763, 765, 766, 767, 768, 769, 775, 777, 778, 779, 780, 781, 782, 783, 785, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 808, 809, 811, 812, 814, 815, 816, 817, 819, 820, 822, 823, 824, 825, 828, 831, 843, 847, 855, 858, 859, 861, 862, 866, 867, 868, 871, 874, 875, 876, 877, 902, 903, 925, 928, 943, 944, 950, 979, 1003], "mtrand": 329, "_rand": 329, "85418642": 329, "79084103": 329, "13077794": 329, "11915045": 329, "56479934": 329, "70814003": 329, "25291366": 329, "55212743": 329, "18197458": 329, "37845099": 329, "mutat": [329, 1003], "debug": [329, 334, 347, 349, 352, 360, 363, 592, 865, 920, 973, 988, 1003, 1007], "govern": [329, 333, 346, 360, 978], "implic": [329, 346], "rf_123": 329, "rf_inst": 329, "didn": [329, 360, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "strict": [329, 344, 360, 379, 468, 500, 553, 554, 556, 950, 995, 1004, 1007], "pervas": [329, 346], "unlucki": 329, "lucki": 329, "fairer": 329, "temptat": [329, 346], "throughput": [332, 973, 990, 998], "switch": [332, 643, 669, 682, 701, 719, 721, 759, 806, 807, 902, 903, 954, 957, 990, 995], "offlin": [333, 346], "bottleneck": [333, 352, 381, 413, 823, 824], "hurt": [333, 499, 1003], "toolkit": [333, 973, 978], "branch": [333, 344, 346, 349, 350, 374, 381, 407, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 874, 875, 876, 877, 879, 957, 961, 970], "sklearn_assume_finit": 333, "assume_finit": [333, 334, 433, 864], "assert_all_finit": [333, 355, 433], "nm": 333, "csc": [333, 358, 360, 382, 492, 516, 518, 519, 635, 657, 833, 835, 841, 846, 849, 851, 857, 882, 886, 887, 917, 929, 930, 932, 933, 934, 935, 957, 964, 1003, 1004, 1006, 1009], "32bit": [333, 919], "multithread": [333, 374, 742, 866, 867, 868, 869, 870, 871, 872], "bla": [333, 334, 344, 347, 352, 742, 995, 1003, 1004, 1006, 1007], "sparsity_ratio": 333, "gbt": 333, "speedi": 333, "packet": 333, "reuter": [333, 341], "carefulli": [333, 379, 969], "spawn": [333, 358, 763, 777, 787, 788, 789, 1006], "gil": [333, 334, 347, 922, 998, 1003, 1004, 1007, 1008, 1012], "ought": 333, "lapack": [333, 334, 344, 497, 500, 506, 653, 1010], "dgemm": 333, "show_vers": [333, 344, 346, 354, 364, 1003], "atla": [333, 344], "rebuild": [333, 368, 382, 407], "openbla": [333, 334, 344, 358, 922, 1008, 1012], "mkl": [333, 334, 344, 358, 922, 995], "veclib": [333, 358], "osx": 333, "nouri": [333, 996, 998], "instruct": [333, 346, 347, 348, 349, 350, 351, 354, 358, 359, 360, 468, 553, 554, 556, 977, 979, 988, 995], "ubuntu": [333, 344, 352, 354], "1gb": 333, "mib": [333, 433, 864], "working_memori": [333, 334, 433, 745, 864, 1003], "adher": [333, 348, 360, 897, 898, 995, 996], "pairwise_distances_chunk": [333, 742, 1003, 1006, 1012], "facilit": [333, 360, 368, 973, 974, 1001, 1004], "moment": [333, 379, 384, 405, 580, 588, 823, 824, 918, 958, 959], "000024": 333, "027400": 333, "mileag": 333, "deploi": [333, 363, 368, 974, 978], "upstream": [333, 346, 350, 354, 358, 964, 1004], "lighter": [333, 665, 667, 746, 753, 1011], "threadpoolctl": [334, 344, 364, 367], "subsect": [334, 346, 373], "worker": [334, 360, 382, 920, 921, 922, 1010], "14228": 334, "loki": [334, 922, 954, 1003, 1006], "duplic": [334, 345, 346, 360, 374, 385, 409, 413, 414, 480, 600, 611, 612, 617, 618, 625, 626, 627, 628, 646, 649, 790, 837, 940, 957, 995, 998, 1007, 1009, 1011, 1012], "memmap": [334, 341, 360, 379, 473, 499, 1003, 1012], "1mb": [334, 1000], "parallel_backend": [334, 385, 402, 409, 411, 413, 415, 417, 422, 423, 426, 429, 432, 437, 496, 500, 501, 502, 504, 507, 508, 510, 511, 513, 520, 521, 522, 523, 528, 529, 530, 531, 532, 533, 534, 535, 559, 567, 572, 573, 575, 597, 599, 604, 612, 616, 618, 620, 622, 623, 624, 626, 628, 630, 631, 633, 641, 644, 653, 654, 655, 656, 657, 658, 659, 738, 742, 745, 763, 766, 767, 769, 777, 785, 787, 788, 789, 790, 791, 793, 794, 795, 796, 798, 799, 808, 809, 812, 814, 816, 817, 819, 820, 825, 828, 861, 862, 1003], "exclus": [334, 358, 360, 379, 381, 592, 593, 595, 943, 950, 954, 955, 978, 1002, 1006], "omp_num_thread": 334, "my_script": 334, "algebra": [334, 344, 349, 358, 379, 382, 427, 832, 964], "bli": [334, 344, 358], "mkl_num_thread": 334, "openblas_num_thread": 334, "blis_num_thread": 334, "bash": [334, 354], "zsh": 334, "termin": [334, 351, 352, 354, 364, 374, 388, 413, 426, 518, 519, 523, 524, 525, 528, 530, 631, 632, 633, 641, 643, 823, 824, 875, 877, 960, 970], "pypi": [334, 344, 346, 348, 350, 352, 364, 970, 1003, 1007, 1009, 1010, 1012], "channel": [334, 341, 344, 364, 382, 458, 459, 548, 549, 551, 552, 977], "subscript": [334, 1008], "max_thread": [334, 347], "n_cpu": [334, 360], "preced": [334, 346, 452, 954, 995], "lib": [334, 344, 364, 973], "_num_thread": 334, "singleton": [334, 771, 889, 1008, 1011], "aforement": [334, 955], "global_random_se": 334, "fixtur": [334, 346], "build_numb": 334, "disrupt": 334, "config": [334, 344, 346, 347, 354, 591, 1003], "contributor": [334, 349, 350, 351, 354, 358, 360, 954, 974, 996, 997, 998, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "encount": [334, 344, 364, 368, 374, 381, 382, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 526, 527, 546, 801, 802, 803, 805, 839, 929, 964, 968, 973, 977, 978, 988, 1003, 1006], "annoi": 334, "test_your_test_nam": 334, "skip": [334, 346, 348, 355, 370, 382, 433, 533, 611, 612, 617, 625, 626, 627, 636, 646, 864, 988, 999, 1002, 1005, 1007, 1009, 1011], "global_dtyp": 334, "boundscheck": [334, 347], "segfault": [334, 347, 995, 1003, 1008], "posix": [334, 358], "pairwisedistancesreduct": 334, "adequ": [334, 352, 532, 979, 1008], "unset": [334, 360, 1003], "_get_warnings_filters_info_list": 334, "sklearn_warning_as_error": 334, "syntax": [334, 346, 351, 354, 375, 433, 825, 826, 864, 943, 979, 1006, 1008], "rst": [334, 346, 350, 354, 988, 995], "drive": [335, 379, 380, 514, 968, 978, 988], "passiveaggressiveregressor": [335, 950, 996, 999, 1002, 1003, 1006, 1008, 1013], "maxabsscal": [335, 370, 830, 851, 944, 964, 1000, 1003, 1004, 1005, 1006, 1011, 1012], "passiveaggress": [335, 382], "fledg": [335, 382], "naivebay": 335, "dramat": 335, "fetcher": [339, 1000, 1002, 1011], "miscellan": [339, 340, 975, 1001, 1002, 1009, 1010, 1012, 1013], "linnerrud": [339, 990], "covertyp": [339, 456, 990], "rcv1": [339, 462, 990, 1000], "svmlight": [339, 452, 473, 474, 990, 995, 996, 1002, 1004], "jpeg": [340, 341, 458, 459], "publish": [340, 341, 348, 350, 354, 360, 966, 974, 1007], "creativ": 340, "spare": [340, 639, 640], "pyplpt": 340, "load_svmlight_fil": [340, 995, 996, 1001, 1002, 1003, 1010], "test_dataset": 340, "everybodi": [340, 346], "upload": [340, 344, 350, 358, 636], "mice": [340, 592, 944], "brain": 340, "miceprotein": 340, "1080": [340, 374], "sc": [340, 374], "clara": [340, 1007], "higuera": 340, "katheleen": 340, "gardin": 340, "krzysztof": 340, "cio": 340, "protein": 340, "cite": [340, 374], "kj": [340, 956], "critic": [340, 346, 359, 368, 381, 657, 951, 954, 962, 969, 978, 1006], "syndrom": 340, "plo": [340, 572, 573], "ONE": [340, 572, 573], "e0129126": 340, "40966": 340, "upload_d": 340, "08t16": 340, "17928620": 340, "file_id": 340, "default_target_attribut": 340, "row_id_attribut": 340, "mouseid": 340, "ignore_attribut": 340, "genotyp": 340, "cc18": 340, "study_135": 340, "study_98": 340, "study_99": 340, "md5_checksum": 340, "3c479a6885bfa0438971388283a1ce32": 340, "websit": [340, 341, 343, 346, 361, 364, 958, 968, 977, 978, 988, 996, 997, 998], "4550": 340, "17t14": 340, "1804243": 340, "pone": 340, "0129126": 340, "openml100": 340, "study_14": 340, "study_34": 340, "earliest": [340, 951], "iris_61": 340, "iris_969": 340, "969": 340, "iris_version_3": 340, "vanschoren": [340, 1007], "rijn": [340, 1003], "bischl": 340, "torgo": 340, "acm": [340, 341, 374, 385, 409, 415, 422, 425, 476, 528, 641, 690, 720, 812, 954, 957, 960, 966], "sigkdd": [340, 341, 476, 641, 847, 964, 966], "newslett": 340, "legaci": [340, 350, 360, 922, 995, 1002, 1007], "my": [340, 346, 351, 354, 461], "columnar": [340, 429, 973], "io": [340, 343, 344, 346, 350, 352, 354, 360, 368, 657, 973, 993], "json": [340, 346, 364], "sql": 340, "smoothli": 340, "manipul": [340, 370, 472, 922, 973, 1001], "mat": [340, 382], "load_fil": [340, 341, 988, 997, 1009], "audio": [340, 468], "wish": [340, 346, 353, 355, 364, 374, 903, 980, 988, 1002], "imageio": 340, "wavfil": 340, "wav": 340, "hdf5": 340, "h5py": 340, "pytabl": 340, "april": [341, 629, 650, 651, 999, 1007], "AT": [341, 460], "laboratori": [341, 973], "cambridg": [341, 379, 555, 801, 805, 950, 952, 956], "facial": 341, "glass": 341, "upright": 341, "frontal": 341, "movement": 341, "credit": [341, 354, 381, 950, 978], "18846": [341, 453, 454], "scikit_learn_data": [341, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464], "20news_hom": 341, "newsgroups_train": [341, 453], "11314": 341, "1073": [341, 453], "20new": [341, 988], "34118": 341, "30000": 341, "01327": 341, "newsgroups_test": 341, "vectors_test": 341, "class_prior": [341, 801, 802, 803, 805, 996, 999], "fit_prior": [341, 801, 802, 803, 805], "88213": 341, "suspici": 341, "show_top10": 341, "top10": 341, "affili": 341, "abund": 341, "clue": [341, 354, 951], "bare": [341, 951, 988], "quotat": 341, "77310": 341, "76995": 341, "cleveland": 341, "indian": 341, "leagu": 341, "team": [341, 349, 358, 360, 973, 978, 995], "ohio": 341, "spark": [341, 974], "death": 341, "floyd": [341, 653, 951], "reckon": 341, "coloni": 341, "paul": [341, 998, 1001, 1002, 1003, 1004, 1008, 1009], "dolan": 341, "nicknam": 341, "tribe": 341, "theme": [341, 364, 367, 995], "mlb": [341, 837], "inappropri": [341, 378, 384, 674, 784], "nlp": [341, 379, 382, 801, 805, 952, 978], "cultur": 341, "inflammatori": 341, "famou": [341, 343, 381, 969], "internet": [341, 351, 964, 986], "offici": [341, 348, 360, 364, 458, 462, 973, 988, 1003, 1004, 1007], "verif": [341, 954, 978], "identif": [341, 346, 374, 462, 943, 980], "viola": [341, 1003], "opencv": 341, "detector": [341, 360, 812], "5749": [341, 458, 459], "13233": [341, 458, 459], "5828": [341, 458, 459], "200m": 341, "lfw_home": 341, "rectangular": [341, 360, 903, 974], "1140": 341, "fetch_lfw_pair": [341, 1000, 1010, 1013], "lfw_pairs_train": [341, 458], "subdivid": [341, 384], "10_fold": [341, 458], "gari": [341, 1002], "huang": [341, 623, 1001, 1006], "manu": 341, "ramesh": [341, 978, 998, 1001, 1005], "tamara": [341, 1012], "berg": [341, 996, 997, 1007, 1012], "erik": [341, 978, 998], "miller": [341, 1003, 1004, 1008], "massachusett": 341, "amherst": 341, "30m": 341, "seven": [341, 947], "homepag": [341, 495, 970], "581012": [341, 456], "newswir": 341, "ltd": [341, 978], "804414": [341, 462], "47236": [341, 462], "fetch_rcv1": [341, 1000, 1004, 1013], "v2": [341, 462, 629, 650, 651, 950], "chronolog": [341, 462], "23149": [341, 462, 1009], "781265": [341, 462], "lyrl2004": [341, 462], "2286": 341, "810596": 341, "2287": 341, "2288": 341, "uint32": [341, 462], "gmil": 341, "381327": 341, "ccat": 341, "e11": 341, "ecat": 341, "m11": 341, "656": 341, "lewi": [341, 1002, 1006], "yang": [341, 374, 379, 499, 604, 1001, 1002, 1005, 1007, 1008, 1009, 1011, 1012], "rose": 341, "cup": [341, 954], "tcpdump": 341, "darpa": 341, "intrus": 341, "lincoln": 341, "unrealist": 341, "sa": [341, 457], "logged_in": 341, "smtp": [341, 457], "resp": [341, 381, 562, 761, 762, 968, 1003], "4898431": [341, 457], "976158": 341, "699691": 341, "619052": 341, "95373": 341, "kddcup99": [341, 457], "richard": [341, 383, 623, 996, 1005, 1007, 1009, 1010], "lippmann": 341, "hain": 341, "jonathan": [341, 999, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1011], "korba": 341, "da": [341, 1010, 1011], "yamanishi": 341, "takeuchi": 341, "miln": 341, "discount": [341, 374, 690, 720, 1002, 1005], "sixth": 341, "press": [341, 374, 379, 384, 385, 409, 555, 575, 576, 579, 584, 587, 608, 801, 805, 947, 950, 952, 956], "household": 341, "statlib": 341, "dcc": 341, "ltorgo": 341, "cal_hous": 341, "1990": 341, "censu": 341, "bureau": 341, "resid": 341, "vacat": 341, "pace": 341, "kellei": [341, 997, 998], "ronald": [341, 958, 998, 1008], "barri": [341, 1003], "autoregress": 341, "hyperspher": [342, 973], "interleav": [342, 358, 487], "simplif": [342, 345, 351, 995, 1001], "realiti": 342, "make_sparse_uncorrel": 342, "make_friedman1": [342, 381, 504, 508, 558, 559, 597], "make_friedman2": [342, 576, 578, 579, 580, 581, 582, 586, 589, 590], "reciproc": [342, 954], "make_friedman3": 342, "7826": 343, "4194": 343, "9490": 343, "9565": 343, "fisher": [343, 381, 469, 601, 973], "michael": [343, 372, 374, 415, 593, 602, 656, 761, 944, 950, 978, 988, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1006, 1007, 1009, 1010, 1012], "marshal": 343, "arc": [343, 381], "1988": 343, "sir": 343, "referenc": [343, 346, 348, 354, 360, 858, 859, 957, 1002, 1008], "duda": [343, 948], "hart": [343, 948, 1003], "taxonom": 343, "annual": [343, 374, 690, 720, 863, 954, 967], "eugen": [343, 996, 1001], "179": [343, 352, 381, 995], "1936": 343, "john": [343, 382, 501, 673, 699, 733, 841, 868, 869, 871, 872, 944, 950, 954, 995, 996, 997, 998, 1000, 1001, 1002, 1003, 1004, 1008, 1010, 1011, 1012], "wilei": [343, 944], "1950": [343, 954], "1973": [343, 372], "scene": [343, 344, 957, 959, 1008], "q327": 343, "d83": 343, "son": [343, 944], "isbn": [343, 374, 950], "22361": 343, "dasarathi": 343, "1980": 343, "nose": [343, 998, 1002], "pami": [343, 374, 689], "gate": [343, 1008], "1972": 343, "433": 343, "mlc": 343, "cheeseman": 343, "autoclass": 343, "conceptu": [343, 381, 952], "alpaydin": 343, "boun": 343, "nist": [343, 954], "bitmap": 343, "preprint": 343, "32x32": 343, "nonoverlap": 343, "4x4": [343, 379, 382], "garri": 343, "candela": 343, "dimmick": 343, "geist": 343, "grother": 343, "janet": 343, "handprint": 343, "nistir": 343, "5469": 343, "kaynak": 343, "msc": 343, "graduat": 343, "bogazici": 343, "cascad": 343, "kybernetika": 343, "ken": [343, 988, 997, 1004], "tang": [343, 1005, 1006, 1007], "ponnuthurai": 343, "suganthan": 343, "kai": [343, 528, 960, 1002], "dimensionalityreduct": 343, "nanyang": 343, "technolog": 343, "claudio": [343, 1009, 1010, 1012], "gentil": [343, 1007], "linnerud": [343, 470], "men": 343, "club": 343, "waist": 343, "puls": 343, "chin": [343, 999], "situp": 343, "tenenhau": 343, "pratiqu": 343, "alcalin": 343, "magnesium": 343, "phenol": 343, "nonflavanoid": 343, "proanthocyanin": 343, "od280": 343, "od315": 343, "class_2": [343, 475], "278": [343, 806, 807], "1680": 343, "746": 343, "chemic": 343, "grown": [343, 381, 518, 519, 520, 521, 522, 523, 529, 530, 874, 875, 876, 877, 970], "itali": 343, "cultiv": 343, "thirteen": 343, "constitu": 343, "forina": 343, "parvu": 343, "pharmaceut": 343, "food": 343, "brigata": 343, "salerno": 343, "16147": 343, "genoa": 343, "lichman": 343, "irvin": 343, "aeberhard": 343, "cooman": 343, "vel": 343, "rep": 343, "dept": 343, "cook": [343, 459, 995, 1001], "north": [343, 374], "queensland": 343, "submit": [343, 344, 345, 348, 349, 350, 351, 354, 360, 361, 364], "technometr": [343, 376, 434, 439, 960], "rda": 343, "1nn": 343, "THE": 343, "OF": 343, "chemometr": 343, "wheel": [344, 346, 350, 364, 1005, 1007, 1009], "quickest": 344, "registri": [344, 364, 973], "uninstal": 344, "git": [344, 348, 350, 352, 354, 977, 991, 995, 1011], "fork": [344, 346, 350, 354, 358], "miniforge3": [344, 354], "miniforg": [344, 354, 364], "env": [344, 354, 364], "prompt": [344, 346, 364, 367, 382, 979], "newli": [344, 359, 381, 428, 961, 1001, 1002, 1010], "virtualenv": [344, 346], "python3": [344, 364], "venv": [344, 364], "pep517": [344, 346], "dev0": [344, 350, 977, 991], "pyx": [344, 346, 347, 352, 354], "pxd": [344, 346], "sklearn_fail_no_openmp": 344, "checkout": [344, 346, 350, 354], "cumbersom": 344, "reinstal": [344, 364], "setuptool": 344, "unix": [344, 382], "makefil": 344, "ninja": [344, 978], "recompil": [344, 347, 352, 364], "pyproject": [344, 350], "toml": [344, 350], "mesonpi": 344, "spin": 344, "studio": [344, 978], "vs_buildtool": 344, "desktop": 344, "screenshot": 344, "secondli": [344, 358, 374, 381, 622, 950, 988], "architectur": [344, 348, 354, 358, 364, 368, 433, 864, 958, 978, 995, 1012], "cmd": 344, "powershel": 344, "struct": [344, 360, 998], "calcsiz": 344, "distutils_use_sdk": 344, "x86": 344, "buildtool": 344, "vc": 344, "vcvarsal": 344, "bat": 344, "x64": 344, "clang": [344, 347], "confusingli": 344, "usr": 344, "gcc": [344, 347, 352, 358], "libomp": [344, 1007], "silicon": 344, "m1": [344, 370], "januari": [344, 346, 995, 996, 1005, 1007, 1010, 1012], "arm64": [344, 349], "llvm": 344, "toolchain": 344, "xcode": 344, "conflict": [344, 346, 350, 354, 364, 1002, 1003], "condarc": 344, "channel_prior": 344, "echo": [344, 350], "cxx": 344, "cflag": 344, "cxxflag": 344, "ldflag": 344, "subfold": [344, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 468, 1008], "fopenmp": [344, 347], "export": [344, 347, 348, 364, 368, 878, 879, 970, 973, 1004], "cppflag": 344, "xpreprocessor": 344, "wl": 344, "rpath": 344, "lomp": 344, "sudo": [344, 364], "apt": [344, 354, 364], "pip3": [344, 364], "pythonx": 344, "site": [344, 346, 349, 354, 364, 381, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 978, 1003], "precompil": 344, "arm": [344, 346, 354, 943], "cython3": 344, "cento": 344, "yum": 344, "devel": 344, "gnu": 344, "port": [344, 364, 1005], "pkg": 344, "build_ext": [344, 352], "build_clib": 344, "linker": [344, 347], "sysconfig": 344, "counterpart": [344, 943, 951, 969, 983], "get_config_var": 344, "sklearn_build_parallel": 344, "tracker": [345, 349, 354, 358, 361, 364, 368, 974], "prioriti": [345, 597, 794, 795, 974, 998], "guidelin": [345, 349, 351, 352, 354, 373, 374, 381], "reformul": 345, "xyz": 345, "someestim": 345, "welcom": [345, 346, 354, 361, 974], "relabel": [345, 781, 782, 863], "stall": [345, 349], "sprint": [345, 346, 995], "unfinish": [345, 346], "supersed": [345, 1000], "overflow": [345, 354, 358, 977, 998, 1002, 1003, 1004, 1005, 1006, 1008], "submitt": 345, "strive": [345, 361, 978], "expertis": [345, 346, 358], "unclear": [345, 346, 466], "pleasant": [345, 978], "chime": 345, "permiss": [345, 350, 361, 364, 978, 1010], "matthew": [345, 351, 501, 707, 995, 998, 1002, 1004, 1008, 1009], "rocklin": [345, 351], "acknowledg": [345, 574, 1012], "struggl": [345, 361, 374], "everyon": [346, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "underrepres": 346, "merit": [346, 350, 361], "teach": 346, "priceless": 346, "abid": 346, "codeofconduct": 346, "hesit": 346, "typo": [346, 361, 365, 995], "send": [346, 374, 386, 498], "burden": [346, 838, 974], "slep": [346, 360], "templat": [346, 350, 351, 360, 361, 522, 523, 528, 529, 530, 531, 973], "ecosystem": [346, 944, 972, 978], "numpydoc": [346, 360, 364, 367], "compli": [346, 360, 897, 974], "fulfil": [346, 374, 381, 763, 766, 767, 777, 826, 830, 950], "anyon": [346, 361, 977, 978], "gist": [346, 354, 977], "repo": [346, 350, 974, 977], "feasibl": [346, 835, 836, 846], "traceback": [346, 351, 354, 358, 433, 977, 1012], "curat": [346, 349, 350], "doubt": [346, 347, 350, 950, 960, 973], "companion": [346, 964], "transcript": 346, "inclus": [346, 348, 354, 415, 421, 718, 750, 954, 955, 995, 1009], "yourlogin": 346, "ruff": [346, 364, 367], "mypi": [346, 350, 364, 367, 1006], "synchron": [346, 382], "my_featur": 346, "commit": [346, 350, 354, 977, 995, 996, 997, 998], "modified_fil": 346, "committ": [346, 995], "modif": [346, 377, 381, 382, 411, 967, 1012, 1013], "approv": [346, 361, 381], "mrg": [346, 354], "incomplet": [346, 364, 370, 374, 670, 759, 944, 951, 988, 999, 1001], "wip": [346, 354, 364], "matur": [346, 973, 974], "broad": [346, 360, 973], "collabor": 346, "_logist": 346, "doctest": [346, 360, 980, 995], "test_logist": [346, 354], "test_common": [346, 354], "caught": [346, 354, 368], "submodul": [346, 350, 352, 373, 946, 952, 995], "intricaci": 346, "narr": [346, 360, 623, 866, 871, 995, 996], "unittest": 346, "tests_for_packag": 346, "static": [346, 348, 352, 354, 611, 612, 617, 618, 625, 626, 627, 628], "astropi": 346, "linux": [346, 348, 349, 354, 973, 995], "gh": 346, "lint": [346, 354], "nogil": [346, 347], "cpython": [346, 347, 352, 1010], "pyodid": [346, 922], "sklearn_run_float32_test": 346, "lengthi": [346, 358], "etiquett": 346, "she": [346, 856, 857, 1005], "he": [346, 690, 720, 823, 824, 856, 857, 954, 988, 1002, 1009, 1010], "shorten": [346, 969, 1008], "leader": [346, 978], "grab": 346, "familiar": [346, 380, 1003], "acquaint": 346, "experienc": 346, "abandon": 346, "someon": [346, 350, 360, 995], "glad": 346, "restructuredtext": 346, "some_param": 346, "hello": [346, 354, 915, 919], "goodby": 346, "liter": [346, 350, 978], "array_paramet": 346, "list_param": 346, "typed_ndarrai": 346, "multioutput_arrai": 346, "bracket": [346, 950], "delimit": [346, 960, 1010], "colon": 346, "selectfpr": [346, 383, 557, 560, 563, 564, 565, 571, 1011], "defer": 346, "backtick": [346, 351], "nowadai": 346, "dropdown": 346, "pragmat": 346, "bibliograph": 346, "arxiv": [346, 427], "_my": 346, "ref": [346, 354, 944, 1001], "currentmodul": 346, "succeed": 346, "editor": [346, 354, 358], "_build": 346, "viewabl": 346, "pillow": [346, 364, 367], "sphinxext": [346, 364, 367], "opengraph": [346, 364, 367], "copybutton": [346, 364, 367], "vast": 346, "examples_pattern": 346, "your_regex_goes_her": 346, "no_mathjax": 346, "latexpdf": 346, "stone": [346, 874, 875, 970], "subdirectori": 346, "subpackag": [346, 350, 999, 1004], "cleanup": [346, 995], "charg": 346, "test_requiring_mpl_fixtur": 346, "hang": [346, 1005, 1006], "fruit": [346, 955], "asv": 346, "asv_benchmark": 346, "airspe": 346, "veloc": 346, "publicli": [346, 1005], "zero_on": [346, 996], "zero_one_loss": [346, 370, 668, 698, 954, 996, 997, 998, 1012], "futurewarn": [346, 354, 1002, 1003, 1004, 1006, 1008, 1011, 1012], "example_funct": 346, "exampleestim": 346, "_n_cluster": 346, "versionchang": 346, "meet": [346, 358, 361, 383, 537, 568, 823, 824, 863, 954, 967, 978, 1003, 1004, 1005], "nit": 346, "retract": 346, "grammar": 346, "disambigu": [346, 794, 863, 967, 1010], "Will": [346, 462, 499, 592, 609, 610, 611, 617, 621, 622, 625, 626, 627, 628, 629, 630, 638, 640, 672, 679, 752, 831, 835, 845, 846, 998, 999, 1001, 1003], "clariti": [346, 354], "unhelp": 346, "extran": 346, "rewritten": [346, 614, 997, 999], "generos": 346, "reward": 346, "heard": 346, "enemi": 346, "courtesi": 346, "justifi": [346, 352, 372, 530], "occas": 346, "deserv": [346, 352], "digest": [346, 1010], "overwhelm": 346, "sheer": [346, 978], "myself": 346, "trickiest": 346, "buri": 346, "mixin": [346, 360, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 566, 897, 997, 1006, 1010], "grep": 346, "delai": [346, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 763, 777, 787, 788, 922, 1009, 1010, 1013], "some_funct": [346, 893], "some_iter": 346, "flavor": [346, 957], "pointer": [346, 354, 407, 1004], "mandatori": [346, 382, 394, 596], "favorit": [346, 358, 978], "Being": [346, 360, 361, 368, 950, 957], "killer": [346, 978], "blame": 346, "migrat": [346, 995], "ignorerevsfil": 346, "rev": [346, 572, 573], "ruin": 346, "maco": [347, 349, 364, 370, 1003, 1007, 1009], "sklearn_enable_debug_cython_direct": 347, "scratch": [347, 407, 954, 997], "gdb": [347, 349, 977], "entrypoint_to_bug_reproduc": 347, "cdef": 347, "state_to_print": 347, "test_val": 347, "fuse": [347, 1001, 1011], "shell": [347, 354, 358, 979, 988], "cythonx": 347, "language_level": 347, "wraparound": 347, "initializedcheck": 347, "nonecheck": 347, "cdivis": 347, "pep073": 347, "pathwai": 347, "memoryview": 347, "cnp": 347, "lightweight": [347, 763, 777, 787, 788, 973], "virtual": [347, 364, 378, 978], "enter": [347, 350, 374, 407, 961], "prang": 347, "void": 347, "my_func": [347, 352], "st\u00e9fan": 347, "benhel": 347, "_cython_bla": 347, "protect": [347, 350, 920], "_openmp_help": 347, "cimport": [347, 355, 1003], "omp_get_max_thread": 347, "prolifer": 348, "adopt": [348, 358, 360, 862, 954, 968, 1003, 1010, 1012], "predomin": [348, 996], "overrid": [348, 382, 411, 415, 422, 507, 513, 553, 554, 556, 558, 559, 562, 621, 629, 650, 651, 769, 785, 808, 809, 810, 812, 814, 816, 817, 818, 995, 1003, 1005, 1009, 1011], "creation": [348, 476, 477, 478, 480, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 621, 806, 807, 978, 1002, 1003, 1004, 1008], "optimis": [348, 374, 957, 998, 1008, 1010], "param1": [348, 985], "param2": [348, 985], "param3": 348, "postpon": [348, 350], "requisit": 348, "liner": [348, 792], "ipython": [348, 351, 352, 354, 980, 988], "session": [348, 352, 358, 364, 972, 978, 988], "trainabl": 348, "trail": [348, 938], "overridden": [348, 360, 384, 507, 513, 581, 586, 589, 659, 1003, 1004, 1011], "n_features_in_": [348, 360, 395, 402, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 429, 430, 434, 435, 436, 437, 438, 439, 440, 441, 447, 448, 449, 450, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 575, 576, 592, 593, 594, 595, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 653, 654, 655, 656, 657, 761, 762, 763, 766, 767, 777, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 822, 823, 824, 825, 826, 829, 830, 831, 832, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 858, 859, 861, 862, 863, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 1006, 1008, 1010, 1013], "slep010": [348, 1006], "duck": [348, 360, 1005], "check_x_i": [348, 355, 999, 1003, 1004, 1009], "check_arrai": [348, 355, 433, 499, 864, 999, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "templateclassifi": 348, "demo_param": 348, "myestim": [348, 388, 390, 391, 393, 394, 395, 396, 397], "subestim": 348, "my_extra_param": 348, "my_estim": [348, 375], "subestimator__c": 348, "subestimator__class_weight": 348, "subestimator__du": 348, "subestimator__fit_intercept": 348, "subestimator__intercept_sc": 348, "subestimator__l1_ratio": 348, "subestimator__max_it": 348, "subestimator__multi_class": 348, "subestimator__n_job": 348, "subestimator__penalti": 348, "subestimator__random_st": 348, "subestimator__solv": 348, "subestimator__tol": 348, "subestimator__verbos": 348, "subestimator__warm_start": 348, "__c": 348, "__class_weight": 348, "unpack": 348, "easiest": [348, 354, 375, 951], "__repr__": [348, 974, 1004], "setattr": 348, "deepcopi": 348, "__sklearn_clone__": [348, 399, 1011], "frozen": 348, "frozentransform": 348, "fitted_transform": [348, 429], "__getattr__": 348, "_estimator_typ": [348, 360, 391, 392, 393, 396, 397, 1000], "clustermixin": [348, 1012], "is_classifi": [348, 360], "programmat": [348, 464, 1004], "_get_tag": [348, 1006], "allow_nan": [348, 885, 887, 1011], "array_api_support": [348, 370], "binary_onli": [348, 1005, 1006], "multioutput_onli": 348, "no_valid": 348, "non_determinist": [348, 1009], "primari": [348, 360, 379, 480, 961, 977, 978], "_safe_split": 348, "preserves_dtyp": 348, "poor_scor": 348, "requires_fit": 348, "requires_positive_x": [348, 1005, 1010], "requires_i": [348, 391, 397, 1006], "requires_positive_i": 348, "_skip_test": 348, "_xfail_check": 348, "check_nam": 348, "xfail": [348, 354], "skiptestwarn": 348, "x_type": 348, "2darrai": 348, "signifi": [348, 374, 546, 774, 959], "1dlabel": 348, "2dlabel": 348, "_more_tag": 348, "mymultioutputestim": 348, "ridgeregress": 348, "idiosyncrat": 348, "onetoonefeaturemixin": [348, 398], "classnameprefixfeaturesoutmixin": [348, 398, 1010], "auto_wrap_output_kei": 348, "mytransform": [348, 398], "__init_subclass__": 348, "invok": [348, 496, 502, 504, 510, 511, 532, 534, 535, 787, 863, 1007, 1012], "estimator_html_repr": [348, 375, 1006, 1007, 1008, 1009, 1012], "_doc_link_modul": 348, "_doc_link_templ": 348, "_doc_link_url_param_gener": 348, "estimator_modul": 348, "ownership": 348, "pep8": [348, 350, 354], "indent": [348, 920], "nsampl": [348, 761, 762], "statement": [348, 351, 354, 358, 360, 379, 988], "flow": 348, "client": [348, 922], "corollari": 348, "foo": [348, 546, 958], "baz": [348, 546], "pyflak": 348, "asanyarrai": 348, "hadamard": 348, "choose_random_sampl": 348, "freestand": 348, "unmodifi": [348, 360], "random_state_": [348, 501, 592, 815, 1009], "gaussiannois": 348, "quasi": [348, 823, 824, 950], "assert_allclos": 348, "rtol": [348, 806, 807, 811], "atol": [348, 637, 639, 806, 807, 811], "checklist": 349, "unclaim": 349, "workflow": [349, 350, 359, 378, 977], "craft": 349, "markdown": 349, "saniti": [349, 830, 954, 995, 996], "outdat": 349, "diff": [349, 954], "valgrind": 349, "platform": [349, 360, 361, 368, 973, 977, 978, 1000, 1003, 1004, 1006, 1008, 1009, 1012], "x86_64": [349, 364], "yep": 349, "gperftool": 349, "debugg": [349, 354], "gprof": 349, "callgrind": 349, "kcachegrind": 349, "warm": [349, 360, 496, 502, 508, 510, 511, 575, 618, 624, 631, 632, 633, 641, 642, 643, 950, 974, 1005, 1007, 1009], "meson": 349, "homebrew": [349, 364], "freebsd": 349, "rrrcn": 350, "pep101": 350, "build_tool": 350, "blocker": 350, "mileston": 350, "maint_tool": 350, "sort_whats_new": 350, "whats_miss": 350, "fixm": [350, 360], "feedstock": 350, "recip": [350, 951, 978], "yaml": 350, "whats_new": [350, 354], "v0": [350, 436, 437, 443, 477, 553, 554, 556, 763, 777, 825, 828, 996, 1003, 1004, 1005], "freez": [350, 364, 368, 974, 978, 1003], "0rc1": 350, "__version__": 350, "draft": [350, 361], "rebas": 350, "bugfix": [350, 995, 1009], "backport": [350, 355, 1002], "maint": 350, "enh": 350, "blindli": 350, "invit": 350, "cherri": 350, "shortlog": 350, "f2": [350, 955], "sed": [350, 995], "front": [350, 1002], "rc1": 350, "suffix": [350, 364, 789, 954, 1005], "brows": 350, "oldest": [350, 461], "abi": 350, "acronym": 350, "deliveri": 350, "whl": 350, "went": [350, 954], "bot": [350, 959, 1009, 1012], "sync": 350, "testpypi": 350, "tarbal": [350, 1010], "wheelhouse_upload": 350, "twine": 350, "rrr": 350, "symlink": 350, "latestst": 350, "tmp": 350, "ln": [350, 950, 958, 964], "versionwarn": 350, "secur": [350, 360, 973, 974, 978, 990], "twitter": 350, "linkedin": 350, "authorship": 350, "permalink": 350, "_hist_gradient_boost": 350, "_iter": 350, "pickl": [350, 360, 368, 382, 553, 554, 556, 806, 807, 973, 974, 997, 1000, 1001, 1002, 1003, 1004, 1005, 1008, 1009, 1010, 1011, 1012], "checker": [350, 786], "type_check": 350, "test_enable_hist_gradient_boost": 350, "enable_hist_gradient_boost": [350, 1004], "enable_my_experimental_featur": 350, "indefinit": 350, "incentiv": 350, "workabl": 351, "stackoverflow": [351, 354, 358], "blogpost": 351, "mcve": [351, 358], "my_data": 351, "with_mean": [351, 846, 857, 964, 1003, 1008], "default_scor": 351, "other_scor": 351, "scrollbar": 351, "tripl": 351, "fenc": 351, "qualifi": 351, "a674e682c281": 351, "lda_featur": 351, "lda_model": 351, "n_topic": [351, 501, 1002], "minimalist": [351, 382, 977], "continuous_featur": 351, "positive_featur": 351, "invest": [352, 978], "idiom": 352, "crunch": 352, "performancetip": 352, "reimplement": [352, 358, 360, 1001, 1005], "spottabl": 352, "amen": [352, 358, 384, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 943], "cpp": 352, "engag": [352, 361], "tent": 352, "somewher": [352, 954, 988], "prun": 352, "14496": [352, 1004], "682": 352, "ncall": 352, "tottim": 352, "percal": 352, "cumtim": 352, "lineno": 352, "_nls_subproblem": 352, "1263": 352, "_po": 352, "057": [352, 791], "047": 352, "_initialize_nmf": 352, "010": [352, 791, 962], "_spars": 352, "_neg": 352, "337": 352, "hotspot": 352, "16159": [352, 1006], "840": 352, "2833": 352, "653": [352, 576, 579, 590], "_dotbla": 352, "651": 352, "1397": 352, "2780": 352, "167": [352, 995], "1542": 352, "2734": 352, "fromnumer": 352, "1185": 352, "lapack_lit": 352, "dgesdd": 352, "rewrit": [352, 358, 970, 987, 995], "shallow": [352, 381, 526, 527, 881], "4x": [352, 1010], "line_profil": 352, "wire": [352, 499, 506], "profile_default": 352, "ipython_config": 352, "terminalipythonapp": 352, "interactiveshellapp": 352, "lprun": 352, "qtconsol": 352, "_nmf": 352, "73153": 352, "h_init": 352, "5863": 352, "nl": 352, "173": [352, 549], "112141": 352, "2336": 352, "wtv": 352, "176": [352, 799, 955, 962], "16144": 352, "wtw": 352, "1880": 352, "195133": 352, "grad": [352, 978], "495761": 352, "777": 352, "proj_gradi": 352, "1474": 352, "4474": 352, "inner_it": 352, "83833": 352, "hn": 352, "194239": 352, "48858": 352, "150407": 352, "gradd": 352, "515390": 352, "dqd": 352, "pin": 352, "memory_profil": [352, 364, 367], "memit": 352, "mprun": 352, "1e7": 352, "402344": 352, "standalon": [352, 623, 866], "bianp": 352, "reactiv": 352, "conda_prefix": 352, "pydebug": 352, "extra_cflag": 352, "dpy_debug": 352, "num_cor": 352, "dbg": 352, "fortun": [352, 381, 988, 1008, 1009], "my_fil": 352, "callgrin": 352, "prof": 352, "encapsul": [353, 375, 388, 402, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 429, 434, 435, 436, 438, 439, 440, 441, 447, 448, 449, 450, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 514, 515, 516, 517, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 534, 535, 546, 547, 548, 553, 554, 555, 556, 557, 560, 561, 562, 563, 564, 565, 568, 575, 576, 592, 593, 594, 595, 600, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 653, 654, 655, 656, 657, 761, 762, 763, 764, 765, 766, 767, 768, 770, 771, 772, 773, 776, 777, 778, 779, 780, 781, 782, 783, 784, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 822, 823, 824, 825, 826, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 858, 859, 861, 862, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877], "artist": [353, 403, 597, 663, 665, 666, 667, 769, 785, 880], "classmethod": [353, 403, 596, 597, 662, 663, 664, 665, 666, 667, 769, 785, 912], "line_": [353, 403, 663, 665, 666, 667, 769, 785], "gridspecfromsubplotspec": 353, "subplot_spec": 353, "get_subplotspec": 353, "ax_top_left": 353, "ax_top_right": 353, "ax_bottom": 353, "bounding_ax_": [353, 597], "lines_": [353, 597, 769, 785], "contours_": [353, 597], "advic": [354, 384, 587, 588], "forth": 354, "userscript": 354, "tampermonkei": 354, "greasemonkei": 354, "shortcut": [354, 384], "pr_number": 354, "navig": [354, 997], "overlai": [354, 597], "codecov": 354, "test_sparsifi": 354, "pdb": 354, "ipdb": [354, 988], "pdbcl": 354, "terminalpdb": 354, "lf": 354, "ff": 354, "tb": [354, 536, 537, 538, 539, 540, 541, 542, 543], "runxfail": 354, "werror": 354, "mailman": 354, "listinfo": 354, "crowd": [354, 361, 951, 974], "imped": 354, "attent": [354, 572, 573, 968], "minimal_reproduc": 354, "pytb": 354, "stdin": [354, 988], "perman": 354, "25163598": 354, "issuenumb": 354, "1506": 354, "volunt": 354, "establish": [354, 358, 361, 944], "clarifi": [354, 361, 757], "regression_test": 354, "0008": 354, "patienc": [354, 360], "crop": [354, 1010], "manifest": [354, 951, 957], "fault": [354, 1003, 1005, 1007], "glibc": 354, "uniniti": 354, "trace": [354, 374, 387, 438, 440, 441, 444, 445, 446, 654, 658, 951, 1006], "supp": 354, "readm": [354, 382, 458], "my_test_script": 354, "mobil": 354, "deploy": [354, 973, 974, 978], "scalewai": 354, "aw": 354, "graviton": 354, "workstat": 354, "qemu": 354, "docker": [354, 368, 1008, 1009], "multiarch": 354, "ppc64le": 354, "filesystem": [354, 364, 1008], "pushd": 354, "wget": 354, "aarch64": 354, "arm64v8": 354, "mount": 354, "pwd": 354, "reinit": 354, "bashrc": 354, "ephemer": 354, "persist": [354, 358, 379, 411, 575, 576, 822, 959, 973, 990, 1001, 1004], "evolv": [355, 1010], "as_float_arrai": 355, "column_or_1d": [355, 1006, 1010], "multitarget": 355, "multi_output": [355, 886], "safe_index": [355, 1005], "check_memori": [355, 360, 1002], "denot": [355, 360, 364, 372, 374, 378, 381, 553, 554, 556, 763, 769, 777, 785, 839, 840, 939, 943, 946, 950, 952, 954, 955, 964, 967, 979, 1012], "5488135": 355, "71518937": 355, "60276338": 355, "54488318": 355, "has_fit_paramet": 355, "randomized_range_find": [355, 996, 1001], "arrayfunc": [355, 373], "cholesky_delet": 355, "min_po": 355, "least_angl": 355, "fast_logdet": 355, "safe_sparse_dot": [355, 1005], "weighted_mod": 355, "sample_without_replac": [355, 1001], "n_popul": [355, 923], "sparsefunc": [355, 373, 1008], "mean_variance_axi": [355, 1001, 1008], "sparsefuncs_fast": [355, 373], "inplace_csr_row_normalize_l1": 355, "inplace_csr_row_normalize_l2": 355, "inplace_csr_column_scal": 355, "sort_graph_by_row_valu": [355, 1010], "single_source_shortest_path_length": 355, "dijkstra": [355, 653, 951], "graph_shortest_path": [355, 1008], "all_estim": [355, 1005, 1006, 1010], "all_displai": [355, 1010], "all_funct": [355, 1010], "is_multilabel": [355, 1012], "dict_learn": [355, 496, 502, 511, 996, 1003, 1005, 1008, 1009, 1011], "gen_batch": [355, 907], "safe_mask": 355, "safe_sqr": 355, "murmurhash3_32": 355, "murmurhash3_x86_32": [355, 919], "cryptograph": 355, "lookup": [355, 919, 1004], "bloom": [355, 919], "384616559": 355, "3910350737": 355, "murmurhash": 355, "graphical_lasso": [355, 436, 437, 1003, 1011], "kit": 358, "toolbox": [358, 973, 978], "multilay": [358, 952], "kera": [358, 973], "forese": 358, "redesign": [358, 995], "pystruct": [358, 973], "ssvm": 358, "seqlearn": 358, "harwar": 358, "fusion": 358, "22438": 358, "4143": 358, "meanwhil": [358, 969], "pipegraph": 358, "squared_loss": [358, 1008], "undertak": 358, "slowli": [358, 360, 509, 903], "ordinarili": [358, 360], "corrobor": 358, "proof": [358, 381, 860, 966], "road": 358, "bridg": [358, 951, 973], "reproduct": [358, 950], "guidanc": [358, 384], "value_kei": [358, 881], "levenshtein": 358, "dna": [358, 593, 944], "rna": 358, "pain": 358, "leven": 358, "acctcctagaag": 358, "acctactagaagtt": 358, "gaatattaggccga": 358, "lev_metr": 358, "multiprocess": [358, 360, 920, 922, 957, 995, 1003, 1009], "exec": 358, "cuda": [358, 370], "reiniti": 358, "culprit": 358, "refus": [358, 856, 857], "forkserv": 358, "joblib_start_method": 358, "set_start_method": 358, "dozen": [359, 384], "leakag": [359, 360, 375, 990], "disclos": 359, "entail": [359, 844, 846, 968], "r_squar": 359, "searchcv": [359, 1010], "tacit": 360, "inconsist": [360, 368, 382, 473, 474, 541, 868, 871, 890, 960, 969, 990, 995, 1000, 1001, 1002, 1003, 1005, 1008, 1010, 1011, 1012], "elsewher": [360, 427, 428, 436, 437, 443], "formal": [360, 361, 374, 381, 806, 807, 951, 954, 955, 958], "thereof": 360, "transduct": [360, 374, 861, 862, 974], "position": 360, "serial": [360, 388, 910, 973, 974, 990, 995, 1003, 1007, 1012], "unpickl": [360, 368, 541, 806, 807, 1001, 1007, 1011], "pep257": 360, "promis": [360, 974], "simd": [360, 1010], "negat": [360, 769, 785, 954], "unexpectedli": [360, 1003], "nuanc": 360, "flaw": [360, 381], "terminologi": [360, 1003], "est1": [360, 597], "est2": [360, 597], "exemplifi": 360, "_score": [360, 763, 777, 789, 954, 995, 1008], "_loss": [360, 954], "divers": [360, 381], "abstract": [360, 379, 384, 583, 733, 973, 995], "descriptor": [360, 473, 474], "hoc": 360, "spectral_embed": [360, 951, 996, 999, 1001, 1003, 1005, 1008, 1009, 1010, 1012], "maxabs_scal": [360, 835, 1003], "astrai": 360, "readthedoc": 360, "entireti": 360, "shield": 360, "n_target": [360, 377, 447, 448, 449, 450, 489, 521, 576, 608, 611, 612, 615, 616, 617, 618, 619, 621, 622, 625, 626, 627, 628, 629, 630, 636, 637, 638, 639, 640, 646, 649, 650, 651, 652, 955, 1007, 1009, 1011], "synonym": [360, 808, 809, 810, 816, 817, 818], "themat": 360, "alphanumer": [360, 553, 554, 556], "statistician": [360, 846], "prescrib": 360, "baggingclassifi": [360, 365, 381, 521, 876, 895, 944, 998, 1001, 1002, 1003, 1006, 1010, 1011, 1013], "estimator__max_depth": [360, 943], "improp": [360, 1002], "pairwise_kernel": [360, 384, 417, 427, 608, 729, 832, 952, 995, 1002, 1012], "redundantli": 360, "distancemetr": [360, 380, 809, 957, 1003, 1007, 1008, 1009, 1012], "di": [360, 374, 379, 496, 502, 629, 650, 651, 859, 999, 1008], "vectori": [360, 1005], "noun": 360, "venu": 360, "broadli": [360, 374], "consolid": [360, 361, 995], "coo": [360, 518, 519, 657, 833, 882, 886, 887, 957, 996, 1012], "lil": [360, 518, 519, 833, 882, 908, 957], "csgraph": [360, 1008], "absent": [360, 382, 693, 718, 787], "densifi": [360, 623, 624, 631, 632, 633, 641, 642, 643, 866, 944, 997], "lossili": 360, "unnorm": [360, 501, 951, 1001, 1002], "encompass": [360, 415, 421, 520, 521, 951], "is_regressor": 360, "get_n_split": [360, 764, 765, 768, 770, 771, 772, 773, 776, 778, 779, 780, 781, 782, 783, 784], "estimatorcv": [360, 974], "loo": [360, 771, 1006], "router": [360, 365, 911, 912, 913, 914], "lexicograph": [360, 532, 752, 758, 808, 816], "type_of_target": [360, 833, 847, 955, 1009, 1010, 1012], "hashabl": [360, 834, 837, 965], "labelencod": [360, 534, 840, 965, 995, 1003, 1010, 1011], "canonic": 360, "xxx": 360, "everywher": 360, "multilabelbinar": [360, 795, 830, 839, 955, 979, 998, 1000, 1001, 1003, 1004], "nonetheless": [360, 954], "wherein": 360, "amber": 360, "return_cov": [360, 532, 533, 576, 826], "_idx": 360, "label1": 360, "label2": 360, "class_label": [360, 522, 526, 529, 623, 624, 631, 633, 639, 640, 641, 874, 876, 892, 969], "bincount": [360, 378, 522, 526, 529, 623, 624, 631, 633, 639, 640, 641, 866, 868, 871, 874, 876, 891, 892, 1002], "rebalanc": 360, "compute_class_weight": [360, 998, 1009], "check_cv": [360, 1000], "obei": [360, 952], "triangl": [360, 379, 408, 412, 424, 664, 952, 957], "concurr": [360, 382, 920, 1007, 1009], "check_scor": [360, 1013], "uppercas": [360, 1008], "unavail": [360, 623, 624, 915, 1002, 1008], "deadlock": 361, "meritocrat": 361, "somebodi": 361, "unanim": 361, "emeritu": 361, "recant": 361, "outreach": 361, "brand": [361, 364], "social": [361, 374, 978], "authorit": 361, "strateg": 361, "entiti": [361, 690, 720], "duti": 361, "resign": 361, "occasion": [361, 691, 1004], "escal": 361, "fallback": [361, 364, 794, 795, 954], "hereaft": 361, "lazi": [361, 382, 968, 999], "opinion": 361, "slep020": 361, "veto": 361, "appeal": 361, "revis": [361, 635], "slep000": 361, "insuffici": [363, 953, 987], "afraid": 364, "packg": 364, "miniconda": 364, "administr": 364, "dnf": 364, "pacman": 364, "raspberri": 364, "pyarrow": [364, 367], "sphinxcontrib": [364, 367], "sass": [364, 367], "toctre": [364, 367], "lock": [364, 367, 920, 922], "py3": 364, "apk": 364, "bind": [364, 973, 995, 1002, 1003], "pkgsrc": 364, "py39": 364, "intelex": [364, 973], "oned": 364, "sklearnex": 364, "plugin": 364, "appdata": 364, "usernam": 364, "windowsapp": 364, "oserror": [364, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463], "errno": 364, "pythonsoftwarefound": 364, "7_qbz5n2kfra8p0": 364, "localcach": 364, "python37": 364, "292": [364, 381, 699, 975], "data_nam": 364, "data_vers": 364, "lift": 364, "regedit": 364, "menu": 364, "hkey_local_machin": 364, "currentcontrolset": 364, "longpathsen": 364, "broken": [364, 378, 564, 565, 600, 685, 882, 954, 970, 998, 1002, 1003, 1004, 1006, 1009], "unsupport": [365, 368, 458, 1003, 1008], "conjunct": [365, 374, 559, 769, 785, 787, 788, 789, 790, 793, 921, 944, 950, 1010], "set_": 365, "_request": 365, "substitut": [365, 938, 974, 1001], "weighted_acc": 365, "unsetmetadatapassederror": 365, "sel": [365, 383], "scoring_weight": 365, "fitting_weight": 365, "hasn": 365, "larscv": [365, 615, 630, 647, 648, 1002, 1008, 1012], "multitaskelasticnetcv": [365, 611, 612, 617, 625, 627, 628, 646, 950, 998, 1005, 1006, 1008, 1012], "multitasklassocv": [365, 626, 627, 998, 1005, 1006, 1008, 1012], "ridgeclassifiercv": [365, 638, 639, 752, 950, 954, 955, 1003, 1005, 1006, 1008, 1009, 1013], "multioutputclassifi": [365, 752, 795, 797, 799, 954, 1002, 1004, 1005, 1006, 1007, 1011, 1012], "regressorchain": [365, 797, 799, 1003, 1006, 1010], "retrain": [368, 974, 1011], "inconsistentversionwarn": [368, 1011], "simplefilt": 368, "model_from_prevision_vers": 368, "original_sklearn_vers": [368, 541], "untrust": 368, "malici": 368, "inadvis": 368, "immut": 368, "snapshot": [368, 524, 525, 974], "portabl": [368, 973], "alex": [368, 382, 969, 995, 998, 1003, 1005, 1006, 1007, 1009, 1010, 1011, 1012], "gaynor": 368, "sio": 368, "get_untrusted_typ": 368, "unknown_typ": 368, "exchang": [368, 977], "markup": 368, "pmml": [368, 973], "onnx": [368, 973, 974], "xml": 368, "sklearn2pmml": [368, 973], "affero": 368, "gplv3": 368, "datastructur": [370, 1003, 1007], "namespac": 370, "array_api": 370, "x_np": 370, "y_np": 370, "x_cu": 370, "y_cu": 370, "array_api_dispatch": [370, 433, 864], "_estimator_with_converted_arrai": 370, "_array_api": 370, "cupy_to_ndarrai": 370, "lda_np": 370, "torch": 370, "x_torch": 370, "y_torch": 370, "power_iteration_norm": [370, 506, 509, 902, 903, 1009], "kernelcenter": [370, 964, 1005, 1009, 1011, 1012], "array_api_compat": 370, "metal": 370, "shader": 370, "m2": 370, "chip": [370, 978], "77764": 370, "pytorch_enable_mps_fallback": 370, "submatrix": [371, 389, 416, 418], "submatric": 371, "bipartit": [371, 418, 476, 959], "subgraph": 371, "a_n": 371, "lceil": [371, 960], "log_2": [371, 528, 960], "rceil": [371, 960], "bmatrix": [371, 946], "u_2": [371, 946], "u_": [371, 447, 448, 449], "n_column": [371, 416, 418], "inderjit": [371, 418], "spectralbiclust": [371, 418, 997, 1001, 1002, 1006], "blockwis": [371, 950], "bistochast": [371, 416], "l_": [371, 576, 617, 705, 954], "k_": [371, 384, 581, 584, 586, 589, 738, 946, 964], "u_1": [371, 946], "v_1": 371, "v_2": 371, "v_": [371, 382], "kluger": [371, 416, 478], "yuval": [371, 416], "microarrai": [371, 416, 478, 593, 944], "cap": [371, 374, 719, 954, 1004], "hochreit": [371, 684], "hungarian": [371, 684], "bodenhof": [371, 684], "fabia": [371, 684], "acquisit": [371, 684], "murphi": [372, 608, 947], "discriminatori": 372, "wilk": 372, "tricki": [372, 951], "logit": [372, 384, 623, 624, 950], "unpen": [372, 613, 634, 645, 950], "f_i": 372, "train_set": 372, "test_set": 372, "disjoint": [372, 374, 375, 402, 669, 695, 719, 721, 951], "platt": [372, 402, 868, 869, 871, 872, 969], "_i": [372, 381, 945, 950, 954, 958, 969], "_j": [372, 945], "f_j": [372, 962], "meteorologi": 372, "climatologi": 372, "precipit": 372, "wea": 372, "640": [372, 455, 471, 472, 548, 549, 552, 943], "650": 372, "1990a": 372, "menon": 372, "ak": [372, 1009, 1010], "jiang": [372, 999, 1006], "xj": 372, "vembu": 372, "ohno": 372, "machado": [372, 687], "703": [372, 478], "710": 372, "kull": [372, 954], "silva": [372, 653, 951, 1006, 1008], "filho": 372, "flach": [372, 954], "mario": [372, 999, 1001, 1009, 1010, 1011], "w\u00fcthrich": 372, "merz": 372, "actuari": 372, "refurbish": 373, "rough": [373, 960, 981], "uniti": 373, "lipschitz": [373, 966], "mod": 373, "mu_j": 374, "coher": 374, "elong": 374, "lloyd": [374, 408, 412, 414, 424, 1009, 1010], "distant": [374, 657, 674, 957], "comapar": 374, "sergei": [374, 997, 1001, 1002, 1003, 1004, 1005], "vassilvitskii": [374, 412, 425], "eighteenth": 374, "siam": [374, 378, 417, 425, 427, 500, 506], "industri": [374, 973], "predetermin": [374, 951], "scullei": 374, "19th": 374, "exemplar": [374, 405, 419, 987], "leftarrow": [374, 958, 968], "foral": [374, 384, 578], "neq": [374, 954, 956, 964], "notin": 374, "hill": [374, 413, 426, 1005], "climb": [374, 413, 426], "maxima": 374, "x_j": [374, 384, 579, 580, 584, 587, 588, 590, 945, 946, 950, 957, 969, 970], "dictat": 374, "solvabl": 374, "stella": [374, 417, 427], "jianbo": [374, 417, 427, 656], "shi": [374, 417, 427, 656], "anil": [374, 417, 427], "daml": [374, 417, 427], "victor": [374, 417, 427, 1002, 1005], "minden": [374, 417, 427], "lex": [374, 417, 427], "ying": [374, 417, 427, 1009], "adjac": [374, 379, 417, 427, 550, 551, 600, 656, 660, 908, 951, 957, 987], "adjacency_matrix": 374, "ulrik": [374, 417, 427, 656], "von": [374, 417, 427, 656, 973, 1002, 1003], "luxburg": [374, 417, 427, 656], "jitendra": [374, 417, 427, 656], "malik": [374, 417, 427, 656], "walk": [374, 380, 998], "marina": 374, "meila": 374, "ng": [374, 379, 656, 812, 958, 960, 1006], "jordan": [374, 379, 656, 761, 1005, 1006, 1009, 1010], "yair": [374, 656], "precondit": [374, 417, 427, 660, 970, 1011], "zhuzhunashvili": [374, 427], "forbid": [374, 381], "macroscop": 374, "occupi": [374, 954], "manhattan": [374, 406, 410, 415, 422, 664, 726, 735, 742, 743, 744, 813, 952, 957, 999, 1004, 1011], "bisecting_strategi": [374, 408], "largest_clust": [374, 408], "biggest_inertia": [374, 408], "biggest": [374, 377, 379, 408], "steinbach": [374, 1010, 1012], "karypi": 374, "vipin": 374, "egin": 374, "minnesota": 374, "june": [374, 951, 1001, 1011], "weblog": 374, "abirami": 374, "mayilvahanan": 374, "emerg": [374, 978], "ijet": 374, "jian": 374, "xinyu": 374, "gou": 374, "baod": 374, "hebei": 374, "knee": 374, "triangular": [374, 428, 576, 951], "whichev": [374, 381, 411, 509, 526, 527, 598, 615, 619, 621, 629, 647, 648, 662], "extract_dbscan": 374, "radius_neighbors_graph": [374, 385, 409, 808, 809, 810, 812, 814, 816, 817, 818, 819, 957, 999, 1004, 1007], "ester": [374, 385, 409], "kriegel": [374, 385, 409, 415, 422, 812, 960], "sander": [374, 385, 409, 411, 415, 422, 812, 960, 1004, 1005], "xu": [374, 377, 385, 409, 968, 1008, 1009, 1012], "portland": [374, 385, 409], "aaai": [374, 385, 409, 801, 956], "revisit": [374, 385, 409], "schubert": [374, 385, 409, 415, 999, 1000, 1003, 1004, 1006, 1007, 1008, 1009], "tod": [374, 385, 409], "lj2017": 374, "d_c": 374, "x_p": [374, 950], "d_m": 374, "x_q": 374, "g_": 374, "varepsilon": [374, 968, 969], "cm2013": 374, "mst": 374, "minimum_cluster_s": 374, "campello": [374, 411], "moulavi": [374, 411], "pei": [374, 1002], "tseng": 374, "cao": 374, "motoda": 374, "pakdd": 374, "lectur": [374, 609, 946, 972], "7819": [374, 1002], "berlin": [374, 379, 500, 661, 690, 720, 954], "heidelberg": [374, 379, 500, 661, 690, 720, 954], "mcinn": [374, 1001, 1002, 1003, 1005, 1006, 1011], "heali": 374, "icdmw": 374, "max_ep": [374, 415, 420, 421, 422], "nearbi": [374, 957], "cluster_hierarchy_": [374, 415], "planar": 374, "peripheri": 374, "wall": 374, "ankerst": [374, 415, 422], "mihael": [374, 415, 422], "marku": [374, 415, 422, 1003, 1005, 1006, 1007], "breunig": [374, 415, 422, 812, 960], "han": [374, 407, 415, 422, 995, 1003, 1004, 1008], "j\u00f6rg": [374, 415, 422, 1003], "sigmod": [374, 415, 422, 812, 960], "cft": 374, "lossi": 374, "subclust": [374, 407], "till": [374, 407, 752, 954], "temporarili": [374, 1000], "farthest": 374, "brc": [374, 407], "tian": [374, 407, 1000, 1001, 1002], "raghu": [374, 407], "ramakrishnan": [374, 407], "maron": [374, 407], "livni": [374, 407], "sfu": [374, 407], "coursecentr": [374, 407], "459": [374, 407], "zhang96": [374, 407], "roberto": [374, 407], "perdisci": [374, 407], "jbirch": [374, 407], "java": [374, 407, 973], "satisfi": [374, 615, 619, 664, 682, 700, 701, 806, 807], "labels_pr": [374, 669, 670, 679, 680, 682, 695, 700, 701, 719, 721, 750, 759], "unadjust": [374, 954, 1007], "swap": [374, 379, 681, 700, 933, 934, 995], "ri": [374, 670, 750], "c_2": [374, 951], "unord": [374, 381, 964], "esp": [374, 995], "hubert": [374, 670, 680, 750], "arabi": [374, 670, 680, 750], "steinlei": [374, 670], "psycholog": [374, 670, 681], "agreement": [374, 669, 681, 719, 721, 759, 954], "22504": 374, "10526": 374, "u_i": [374, 447, 448, 449, 719], "v_j": [374, 719, 959], "veb2009": 374, "a_i": 374, "b_j": 374, "yat2016": 374, "average_method": [374, 669, 721, 1003], "vinh": [374, 669], "veb2010": 374, "strehl": 374, "joydeep": 374, "583": [374, 986], "1162": 374, "153244303321897735": 374, "epp": [374, 669], "bailei": [374, 669], "26th": [374, 690, 720, 954], "1553374": 374, "1553511": 374, "9781605585161": 374, "csail": [374, 631, 632, 641, 803], "volume11": 374, "vinh10a": 374, "algesheim": 374, "tesson": 374, "30750": 374, "1038": 374, "srep30750": 374, "rosenberg": [374, 682, 701, 759], "hirschberg": [374, 682, 701, 759], "b2011": 374, "homogeneity_completeness_v_measur": [374, 1004], "n_k": [374, 515], "n_c": [374, 624], "julia": [374, 682, 701, 759], "media": [374, 978], "hila": 374, "becker": [374, 978, 998, 1007], "fowlkes_mallows_scor": [374, 954, 1001, 1003], "fmi": [374, 695], "tp": [374, 677, 683, 693, 694, 695, 746, 747, 748, 751, 878, 954], "fn": [374, 677, 683, 693, 694, 695, 746, 747, 748, 751, 954, 955], "47140": 374, "fowkl": [374, 695], "1983": [374, 695, 846], "tandfonlin": 374, "01621459": 374, "10478008": 374, "kmeans_model": 374, "1987": [374, 572, 573, 756, 757], "calinski_harabasz_scor": [374, 1003], "n_e": 374, "mathrm": [374, 376, 379, 383, 950, 970], "b_k": 374, "w_k": [374, 950], "c_q": 374, "n_q": 374, "c_e": 374, "cali\u0144ski": 374, "1974": [374, 382, 675], "dendrit": [374, 675], "davies_bouldin_scor": [374, 1003], "bould": 374, "c_i": [374, 957], "c_j": [374, 959], "s_i": [374, 950, 964], "diamet": 374, "nonneg": [374, 379, 418, 503, 505, 512, 843], "s_j": 374, "max_": [374, 954], "1979": [374, 689, 733], "halkidi": 374, "batistaki": 374, "yanni": 374, "vazirgianni": 374, "michali": 374, "contingency_matrix": [374, 719, 1003], "pair_confusion_matrix": [374, 1007], "permit": [375, 432, 553, 554, 556, 763, 766, 767, 777, 788, 827, 828, 954, 955, 956, 1001], "clf__c": 375, "pca1": [375, 390], "svm1": 375, "77484909e": 375, "07058917e": 375, "pca2": [375, 390], "svm2": 375, "raw_target_regr": 375, "bypass": [375, 564, 611, 617, 874, 875, 876, 877, 1011], "check_invers": [375, 430, 830, 964, 1003, 1009, 1010], "linear_pca": 375, "make_union": [375, 825, 998, 1002], "unreli": 375, "citi": [375, 382, 431, 988], "london": [375, 382, 431], "sallisaw": [375, 431], "bow": 375, "moveabl": 375, "feast": 375, "grape": 375, "wrath": 375, "expert_r": 375, "user_r": 375, "city_categori": 375, "title_bow": 375, "city_london": 375, "city_pari": 375, "city_sallisaw": 375, "ignored_new_col": 375, "shrunk_covari": [376, 1012], "sigma_": [376, 609, 610, 1008, 1012], "365": [376, 438], "wiesel": [376, 387, 440], "eldar": [376, 387, 440], "hero": [376, 387, 440], "5016": [376, 387, 440], "5029": [376, 387, 440], "_k": [376, 948, 950], "glasso": [376, 443], "biostatist": [376, 443], "uncommon": [376, 623, 866, 969], "downweight": [376, 501], "driessen": [376, 434, 439, 960], "fastmcd": [376, 434, 439], "raw_location_": [376, 434, 439], "raw_covariance_": [376, 434, 439], "multidimension": [377, 653, 655, 657, 659, 951, 957], "plsw2a": 377, "u_k": [377, 379], "v_k": [377, 379, 496, 502, 510, 511], "x_k": [377, 379, 948, 957], "y_k": [377, 964], "xi_k": 377, "omega_k": [377, 948], "gamma_k": 377, "delta_k": 377, "nipal": [377, 448, 449], "xp": [377, 841], "x_rotations_": [377, 447, 448, 449], "y_rotations_": [377, 447, 448, 449], "ty": 377, "x_weights_": [377, 447, 448, 449, 450], "y_weights_": [377, 447, 448, 449, 450], "yv": 377, "tx": 377, "pls1": [377, 449], "pls2": [377, 449], "tx_k": [377, 948], "ty_k": 377, "ja": [377, 1002], "wegelin": 377, "methodolog": [378, 977], "academ": [378, 978], "commerci": [378, 978], "flowchart": [378, 981], "f1_macro": [378, 954, 999], "custom_cv_2fold": 378, "custom_cv": 378, "9333": 378, "scorer1_nam": 378, "scorer2_nam": 378, "return_indic": [378, 789, 1011], "precision_macro": [378, 983], "recall_macro": [378, 954], "test_precision_macro": 378, "test_recall_macro": 378, "prec_macro": 378, "rec_macro": 378, "test_prec_macro": 378, "test_rec_macro": 378, "train_prec_macro": 378, "train_rec_macro": 378, "undistinguish": 378, "devic": [378, 547, 973], "kf": [378, 768], "12883823": 378, "rkf": [378, 778], "weigh": [378, 1002], "caveat": [378, 384], "part3": 378, "spector": 378, "submodel": 378, "kohavi": 378, "jnt": 378, "bharat": [378, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012], "rao": [378, 1007, 1010], "fung": 378, "rosal": 378, "witten": 378, "leavepout": [378, 771, 983], "ss": 378, "predefinedsplit": [378, 983, 999], "test_fold": [378, 776], "gkf": 378, "sgkf": [378, 781], "suboptim": [378, 665, 667, 746, 753, 957, 1003, 1011], "leavepgroupsout": [378, 765, 983, 1001], "n_group": [378, 772, 983, 1001], "lpgo": [378, 772], "gss": [378, 765], "withheld": 378, "train_indx": 378, "test_indx": 378, "autocorrel": 378, "superset": [378, 784, 954], "surplu": 378, "tscv": [378, 784], "inbuilt": 378, "some_integ": 378, "n_cv": [378, 402], "isotropi": 379, "alik": [379, 952], "halko": [379, 500, 506, 509, 902, 903], "szlam": [379, 902, 903], "disadvantag": [379, 384, 950, 951, 958, 968, 969, 970], "parsimoni": [379, 964], "jen09": 379, "mrl09": 379, "ell_1": [379, 950], "underset": [379, 950, 957, 970], "operatornam": [379, 705, 950, 954, 970], "fro": [379, 503, 505, 512, 658, 950], "gentli": 379, "spirit": 379, "mairal": [379, 496, 502], "bach": [379, 496, 501, 502, 503, 623, 950], "ponc": [379, 496, 502], "sapiro": [379, 496, 502], "jenatton": 379, "obozinski": 379, "scholkopf1997": 379, "bakir2003": 379, "smola": [379, 382, 500, 832, 964, 969], "klau": [379, 500, 832], "eigendecompos": 379, "eigensolv": [379, 417, 427, 500, 509, 660, 951], "eigsh": [379, 500, 1001, 1002], "lehoucq": 379, "sorensen": 379, "columnwis": 379, "lsa": [379, 509, 997], "synonymi": 379, "polysemi": 379, "lsi": 379, "sigma_k": [379, 948], "sublinear": [379, 555, 556], "use_idf": [379, 382, 555, 556, 988], "textual": [379, 388, 970, 1004], "man": [379, 555, 733, 801, 805, 952, 954, 956], "prabhakar": 379, "raghavan": [379, 555, 801, 805, 952, 954, 956], "hinrich": 379, "sch\u00fctze": [379, 555, 952, 954, 956], "transform_method": 379, "split_cod": 379, "dictionarylearn": [379, 502, 504, 505, 507, 508, 509, 510, 511, 996, 1000, 1002, 1005, 1008, 1009, 1010, 1011], "overcomplet": 379, "mammalian": 379, "cortex": 379, "inpaint": 379, "h_i": [379, 959], "psi": 379, "sim": [379, 986], "wh_i": 379, "ww": 379, "superflu": 379, "psi_1": 379, "psi_2": 379, "psi_n": 379, "superimpos": 379, "plug": [379, 950, 978, 988], "wh": [379, 503, 505, 512], "hoyer": [379, 998], "nndsvd": [379, 503, 505, 512, 1004, 1007], "nndsvdar": [379, 503, 505, 512, 1004], "elementwis": [379, 503, 505, 512], "_featur": [379, 503, 505, 512], "kl": [379, 951, 1003], "itakura": [379, 503, 505, 512, 1002], "saito": [379, 503, 505, 512, 1002], "w_new": 379, "forget_factor": [379, 503], "lee": [379, 995, 996, 999, 1001, 1002, 1003, 1004, 1006, 1007, 1010], "seung": 379, "boutsidi": 379, "gallopoulo": 379, "cichocki": [379, 503, 505, 512], "phan": 379, "fevott": [379, 503, 505, 512], "idier": [379, 503, 505, 512], "lefevr": [379, 503], "corpora": 379, "hoffman": [379, 501, 1000, 1007], "unshad": 379, "beta_k": 379, "eta": [379, 501, 641, 642, 643, 958, 968, 1000], "topic_word_prior": [379, 501], "theta_d": 379, "doc_topic_prior": [379, 501], "z_": 379, "w_": [379, 611, 612, 617, 618, 625, 626, 627, 628, 646, 649, 950, 954, 956, 959], "elbo": 379, "overset": [379, 961], "e_": 379, "blei": [379, 501, 761], "wang": [379, 501, 644, 654, 658, 690, 720, 950, 951, 954, 998, 1000, 1001, 1002, 1003, 1007, 1010, 1011], "paislei": [379, 501], "kaiser": [379, 497], "talli": 380, "disproportion": 380, "41075698": 380, "41076071": 380, "rho_k": 380, "unsmooth": 380, "scott": [380, 811, 995, 996, 1001, 1003, 1004, 1005, 1010, 1011], "silvermann": 380, "propto": [380, 956], "2h": 380, "angular": [380, 657, 728], "contin": [380, 679, 964], "semin": 381, "friedman2001": 381, "8965": 381, "fisher1958": 381, "loan": [381, 499, 950, 978], "mayer2022": 381, "mayer": [381, 1007, 1009, 1012], "bourassa": 381, "hoesli": 381, "scognamiglio": 381, "valuat": 381, "tianqi": 381, "guestrin": 381, "ke": [381, 1006, 1007], "boostingdecis": 381, "nr": 381, "f_m": 381, "h_m": 381, "f_": [381, 600, 694, 954], "l_m": 381, "taylor": [381, 1003, 1005, 1006, 1009], "g_i": [381, 614], "sum_m": 381, "softmax": [381, 526, 623, 624, 950, 957, 958], "superior": 381, "ineffici": [381, 408, 539, 794, 795, 957, 959], "htf": 381, "r2007": 381, "friedman2002": 381, "1189": 381, "1232": 381, "b1998": 381, "decoupl": [381, 956], "cancel": [381, 382, 727], "b2001": 381, "bear": [381, 973], "geurt": [381, 520, 521, 522, 523, 530, 531, 876, 877], "ernst": [381, 522, 523, 530, 531, 876, 877], "wehenkel": [381, 522, 523, 530, 531, 876, 877], "l2014": 381, "lieg": 381, "flavour": 381, "b1999": 381, "b1996": 381, "h1998": 381, "lg2012": 381, "bootstrap_featur": [381, 520, 521], "844": [381, 520, 521], "w2": 381, "w3": 381, "lr__c": 381, "rf__n_estim": 381, "w1992": 381, "knr": 381, "stack_method": [381, 532], "286": 381, "225": 381, "126": 381, "stack_method_": [381, 532, 533], "final_layer_rfr": 381, "final_layer_gbr": 381, "final_lay": 381, "multi_layer_regressor": 381, "wolpert": [381, 532, 533], "241": [381, 532, 533], "freund": [381, 518, 519], "fs1995": 381, "w_1": [381, 950, 958], "w_2": [381, 950, 958], "w_n": 381, "w_i": [381, 945, 954], "reappli": 381, "zzrh2009": 381, "d1997": 381, "dubai": 382, "francisco": [382, 966], "movi": [382, 980], "movie_entri": 382, "thriller": [382, 837], "drama": 382, "000e": 382, "003e": 382, "011e": 382, "974e": 382, "unseen_featur": [382, 546], "speech": [382, 954], "chunker": 382, "pos_window": 382, "pos_vector": 382, "1x6": 382, "part_of_speech": 382, "token_featur": 382, "isupp": 382, "uppercase_initi": 382, "all_uppercas": 382, "raw_x": [382, 547], "pos_tagg": 382, "murmurhash3": [382, 547, 554, 919], "weinberg": 382, "modulo": [382, 1006], "kilian": [382, 1010, 1011], "anirban": 382, "dasgupta": [382, 411, 860, 966], "langford": [382, 653, 951], "josh": [382, 1002], "attenberg": 382, "punctuat": [382, 553, 554, 556], "diminish": 382, "4x9": 382, "build_analyz": [382, 553, 554, 556, 1005], "interrog": 382, "bigram_vector": 382, "cool": [382, 995], "feature_index": 382, "him": 382, "constru": 382, "nqy18": 382, "smooth_idf": [382, 555, 556], "_n": [382, 954], "textbook": [382, 555], "6x3": 382, "81940995": 382, "57320793": 382, "47330339": 382, "88089948": 382, "58149261": 382, "81355169": 382, "term1": 382, "term2": 382, "term3": 382, "0986": [382, 830], "819": 382, "573": 382, "8473": 382, "8515": [382, 1002], "5243": 382, "85151335": 382, "52433293": 382, "55422893": 382, "83236428": 382, "63035731": 382, "77630514": 382, "idf_": [382, 555, 556, 1003], "western": 382, "europ": [382, 964], "koi8": 382, "russian": 382, "unicodedecodeerror": [382, 553, 554, 556], "told": 382, "troubleshoot": 382, "chardet": 382, "chardetect": 382, "damag": 382, "sloppili": 382, "ftfy": 382, "mish": 382, "mash": 382, "text1": 382, "sei": 382, "mir": 382, "gegr": 382, "xc3": 382, "xbc": 382, "x9ft": 382, "mein": 382, "sauerkraut": 382, "text2": 382, "holdselig": 382, "sind": 382, "dein": 382, "ger": 382, "xfcche": 382, "text3": 382, "xff": 382, "xfea": 382, "x00u": 382, "x00f": 382, "x00": 382, "x00l": 382, "xfc": 382, "x00g": 382, "x00e": 382, "x00n": 382, "x00d": 382, "x00a": 382, "x00h": 382, "x00r": 382, "x00z": 382, "x00i": 382, "x00b": 382, "x00c": 382, "x00t": 382, "x00o": 382, "spolski": 382, "nnmf": [382, 989, 990, 995], "phrase": 382, "misspel": 382, "rescu": 382, "resili": 382, "wprd": 382, "ngram_vector": 382, "char_wb": [382, 553, 554, 556], "rd": 382, "wo": 382, "wp": [382, 622, 636], "char": [382, 553, 554, 556, 995], "jumpi": 382, "fox": [382, 1011], "1x4": 382, "umpi": 382, "1x5": 382, "mpy": 382, "fo": 382, "paragraph": [382, 468, 988], "barrier": 382, "hv": 382, "4x10": 382, "discrep": [382, 988, 999], "4x1048576": 382, "collid": 382, "ingest": 382, "spend": 382, "my_token": 382, "lowercas": [382, 390, 407, 408, 410, 412, 414, 447, 448, 449, 450, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 514, 553, 554, 556, 604, 605, 606, 607, 653, 654, 657, 810, 815, 818, 822, 827, 832, 858, 859, 1008], "lucen": 382, "build_preprocessor": [382, 553, 554, 556, 1005], "whitespac": 382, "fanci": 382, "lemmat": 382, "nltk": [382, 972, 973], "word_token": 382, "wordnetlemmat": 382, "lemmatoken": 382, "wnl": 382, "british": 382, "spell": 382, "to_british": 382, "1or": 382, "bt": 382, "1er": 382, "ing": 382, "ation": 382, "1z": 382, "ogu": 382, "og": 382, "customvector": 382, "asian": 382, "one_imag": [382, 549, 552], "fake": 382, "assert_array_equ": 382, "patchextractor": [382, 1011], "five_imag": 382, "variancethreshold": [383, 831, 944, 998, 1005, 1008, 1011], "selectfdr": [383, 557, 561, 563, 564, 565, 571, 999, 1001, 1002, 1011], "selectfw": [383, 557, 560, 561, 564, 565, 571, 1011], "genericunivariateselect": [383, 560, 561, 563, 564, 565, 567, 1009, 1011, 1012], "r_regress": [383, 571, 1008, 1009, 1012], "nonparametr": [383, 384, 572, 573], "bewar": 383, "importance_gett": [383, 558, 559, 562, 1007], "unimport": [383, 962], "lsvc": 383, "baraniuk": 383, "isr": 383, "ist": 383, "utl": 383, "aguiar": 383, "cs_note": 383, "ferri": [383, 954], "versatil": [384, 969, 978], "optima": 384, "markov": [384, 576, 959, 973, 995], "nuisanc": 384, "one_vs_on": [384, 575, 955], "ingredi": 384, "duv2014": 384, "theta_l": 384, "x_bound": [384, 582], "operand": 384, "k1__": 384, "k2__": 384, "constant_valu": [384, 578, 582], "constant_value_bound": [384, 576, 578, 582], "k1__k1__constant_valu": 384, "value_typ": [384, 582], "n_element": [384, 582], "k2__length_scal": 384, "k1": [384, 586, 589], "k1__k1": 384, "k1__k1__constant_value_bound": 384, "k1__k2": 384, "k1__k2__length_scale_bound": 384, "k2": [384, 586, 589], "k2__length_scale_bound": 384, "69314718": [384, 577, 964], "30258509": 384, "interoper": [384, 974, 990], "pairwisekernel": 384, "_valu": [384, 578], "_level": [384, 590], "k_1": [384, 586, 589], "k_2": [384, 586, 589], "__add__": [384, 589], "__mul___": 384, "__pow__": [384, 581], "2l": [384, 587], "bigg": [384, 584], "bessel": [384, 584], "rightarrow": [384, 584, 958], "quad": [384, 957, 968], "tfrac": 384, "3l": 384, "pp84": 384, "x_d": [384, 579], "inhomogen": [384, 579], "expon": [384, 581, 641, 642, 643, 775, 823, 824, 841, 943], "carl": [384, 575, 576, 579, 584, 587], "rasmussen": [384, 575, 576, 579, 584, 587], "duvenaud": [384, 587, 588], "cookbook": [384, 587, 588], "minkowski": [385, 409, 415, 420, 421, 422, 653, 664, 742, 743, 744, 806, 807, 808, 809, 810, 812, 814, 816, 817, 818, 819, 820, 957, 995, 998, 1009, 1010, 1011], "metric_param": [385, 409, 411, 415, 420, 421, 422, 653, 657, 808, 809, 810, 811, 812, 814, 816, 817, 818, 819, 820, 999, 1002, 1009], "leaf_siz": [385, 409, 411, 415, 420, 421, 422, 806, 807, 808, 809, 810, 811, 812, 814, 816, 817, 818, 957], "kd_tree": [385, 409, 411, 415, 422, 653, 654, 808, 809, 810, 811, 812, 814, 816, 817, 818, 957, 1008, 1012], "balltre": [385, 409, 411, 415, 422, 653, 654, 664, 808, 809, 810, 811, 812, 814, 816, 817, 818, 951, 995, 997, 999, 1003, 1008, 1011, 1012], "ckdtree": [385, 409, 997], "inhibit": [385, 409], "core_sampl": 385, "n_core_sampl": [385, 409], "attract": [385, 409, 948, 957, 973], "fun": [386, 498, 978], "logcosh": [386, 498], "fun_arg": [386, 498], "w_init": [386, 498], "whiten_solv": [386, 498, 1010], "return_x_mean": 386, "compute_sourc": 386, "return_n_it": [386, 419, 424, 443, 510, 511, 611, 612, 617, 618, 625, 626, 627, 628, 646, 647, 648, 649, 650, 651, 652, 659, 1009], "cube": [386, 498], "my_g": [386, 498], "x_mean": 386, "AS": 386, "fortran": [386, 506, 611, 612, 617, 618, 625, 626, 627, 628, 630, 646, 649, 650, 651, 886, 887, 995, 998, 999, 1003], "hyvarinen": [386, 498], "oja": [386, 498], "430": [386, 498], "shrunk_cov": [387, 444, 446], "eq": [387, 440, 686, 687, 688], "7533": [387, 440, 1002], "2763": [387, 440], "3964": [387, 440], "0195": [387, 440], "friend": [388, 999], "is_fitted_": [388, 391, 393, 396, 397], "subobject": [388, 402, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 429, 430, 434, 435, 436, 437, 438, 439, 440, 441, 447, 448, 449, 450, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 546, 547, 548, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 600, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 653, 654, 655, 656, 657, 761, 762, 763, 766, 767, 777, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 822, 823, 824, 825, 826, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 858, 859, 861, 862, 863, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877], "get_submatrix": [389, 416, 418], "dummybiclust": 389, "row_ind": [389, 416, 418], "intp": [389, 416, 418], "col_ind": [389, 416, 418], "pca0": 390, "_n_features_out": 390, "myestimator0": 390, "myestimator1": 390, "class_name0": [390, 407, 408, 410, 412, 414, 447, 448, 449, 450, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 514, 604, 605, 606, 607, 653, 654, 657, 810, 815, 818, 822, 832, 858, 859], "class_name1": [390, 407, 408, 410, 412, 414, 447, 448, 449, 450, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 514, 604, 605, 606, 607, 653, 654, 657, 810, 815, 818, 822, 832, 858, 859], "class_name2": [390, 407, 408, 410, 412, 414, 447, 448, 449, 450, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 514, 604, 605, 606, 607, 653, 654, 657, 810, 815, 818, 822, 832, 858, 859], "feature_names_out": [390, 395, 407, 408, 410, 412, 414, 429, 447, 448, 449, 450, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 514, 531, 532, 533, 534, 535, 546, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 592, 593, 594, 595, 600, 603, 604, 605, 606, 607, 653, 654, 657, 810, 815, 818, 822, 825, 826, 829, 830, 831, 832, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 858, 859, 1009, 1012], "mro": [391, 397, 1005, 1006], "harsh": [391, 402, 434, 514, 515, 516, 518, 520, 522, 524, 526, 529, 532, 534, 575, 623, 631, 633, 639, 640, 641, 794, 795, 796, 797, 801, 802, 803, 804, 805, 808, 813, 816, 823, 861, 862, 866, 868, 871, 874, 876, 1005, 1007, 1010], "mycluster": 392, "densityestim": 393, "n_samples_fit": [397, 430, 447, 448, 449, 519, 521, 523, 525, 527, 530, 533, 535, 576, 600, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 625, 626, 627, 628, 629, 630, 632, 635, 637, 638, 643, 644, 653, 799, 800, 808, 809, 810, 812, 814, 816, 817, 818, 824, 867, 869, 872, 875, 877], "uniform_averag": [397, 430, 447, 448, 449, 519, 521, 523, 525, 527, 530, 533, 535, 576, 600, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 625, 626, 627, 628, 629, 630, 632, 635, 637, 638, 643, 644, 686, 687, 692, 709, 710, 712, 714, 715, 717, 749, 754, 755, 799, 800, 809, 817, 824, 867, 869, 872, 875, 877, 954, 1004], "n_features_new": [398, 407, 410, 497, 499, 501, 502, 504, 507, 508, 514, 532, 534, 535, 547, 548, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 593, 595, 600, 603, 604, 605, 606, 607, 815, 822, 829, 830, 831, 832, 835, 836, 838, 839, 840, 841, 843, 844, 845, 846, 858, 859], "cloned_classifi": 399, "base_clf": 402, "calibrated_clf": 402, "927": 402, "x_calib": 402, "y_calib": 402, "prob_tru": [403, 404], "prob_pr": [403, 404], "ref_lin": 403, "alexandru": 404, "22nd": 404, "convergence_it": [405, 419], "hardcod": [405, 419, 1003], "affinity_matrix_": [405, 417, 656], "cluster_center_indic": [405, 419], "compute_full_tre": [406, 410, 999], "compute_dist": [406, 410, 1007], "inferior": [406, 410, 1006], "n_leaves_": [406, 410], "n_connected_components_": [406, 410, 1004], "branching_factor": 407, "compute_label": [407, 414], "promot": [407, 673, 973, 1006, 1008, 1012], "redistribut": 407, "overwritten": [407, 497, 498, 499, 501, 506, 513, 572, 573, 609, 610, 611, 612, 615, 616, 617, 618, 619, 620, 621, 622, 625, 626, 627, 628, 637, 639, 644, 646, 647, 648, 649, 651, 922, 924, 1008], "root_": 407, "_cfnode": 407, "cftree": 407, "dummy_leaf_": 407, "subcluster_labels_": 407, "centroids_": [407, 411, 813], "copy_x": [408, 412, 424, 500, 609, 610, 611, 612, 615, 616, 617, 618, 619, 620, 621, 622, 625, 626, 627, 628, 637, 639, 644, 646, 647, 648, 649, 650, 997, 1003, 1004], "k_init": [408, 424], "sse": 408, "bisect_mean": 408, "denser": 409, "pooling_func": [410, 1003], "xred": [410, 1011], "cluster_selection_epsilon": 411, "max_cluster_s": 411, "cluster_selection_method": 411, "eom": 411, "store_cent": [411, 1012], "kdtree": [411, 415, 422, 653, 654, 806, 808, 809, 810, 811, 812, 814, 816, 817, 818, 997, 999, 1003, 1007, 1008, 1011, 1012], "neighbour": [411, 427, 657, 959], "medoid": 411, "medoids_": 411, "zimek": 411, "chaudhuri": 411, "jaskowiak": 411, "malzer": 411, "baum": 411, "hybrid": [411, 614, 973], "dbscan_clust": 411, "border": [411, 1005], "unclust": 411, "socg2006": 412, "min_bin_freq": [413, 426], "cluster_al": [413, 426], "get_bin_se": 413, "orphan": [413, 426, 995], "reassignment_ratio": 414, "eec": [414, 606], "tuft": 414, "dscullei": 414, "fastkmean": 414, "55102041": 414, "48979592": 414, "06896552": 414, "set_partial_fit_request": [414, 499, 503, 631, 632, 633, 641, 642, 643, 794, 795, 798, 799, 801, 802, 803, 804, 805, 823, 846], "cluster_method": 415, "predecessor_correct": [415, 421], "unprocess": [415, 553, 554, 556], "heap": 415, "braycurti": [415, 422, 664, 742, 743, 744, 957], "canberra": [415, 422, 664, 742, 743, 744, 957], "chebyshev": [415, 422, 664, 742, 743, 744, 957], "dice": [415, 422, 664, 742, 743, 744, 957], "kulsinski": [415, 422, 664, 742, 743, 744], "rogerstanimoto": [415, 422, 664, 742, 743, 744, 957], "russellrao": [415, 422, 664, 742, 743, 744, 957], "seuclidean": [415, 422, 664, 742, 743, 744, 813, 957, 1003, 1006, 1007], "sokalmichen": [415, 422, 664, 742, 743, 744, 957], "sokalsneath": [415, 422, 664, 742, 743, 744, 957], "yule": [415, 422, 742, 743, 744], "manhattan_dist": [415, 422, 653, 726, 808, 809, 810, 812, 814, 816, 817, 818, 819, 820, 995, 1005, 1010, 1011], "minkowski_dist": [415, 422, 653, 808, 809, 810, 812, 814, 816, 817, 818, 819, 820], "l_p": [415, 422, 653, 808, 809, 810, 812, 814, 816, 817, 818, 819, 820], "upward": [415, 421], "successor": [415, 421, 970, 973], "predecessor_": [415, 422], "erich": [415, 999, 1000, 1003, 1004, 1006, 1007, 1008, 1009], "gertz": 415, "lernen": 415, "wissen": 415, "daten": [415, 1003, 1004], "analysen": 415, "lwda": 415, "318": 415, "n_best": 416, "n_svd_vec": [416, 418], "mini_batch": [416, 418], "n_row_clust": [416, 418, 478], "n_column_clust": [416, 418, 478], "ncv": [416, 418], "n_oversampl": [416, 418, 506, 509, 903, 1009], "kernel_param": [417, 500, 604, 608], "precomputed_nearest_neighbor": [417, 656], "eigen": [417, 514, 638, 656, 660, 948, 1001, 1004], "dist_matrix": 417, "csc_matrix": [417, 522, 523, 528, 529, 530, 531, 843, 874, 875, 876, 877, 944, 964, 970, 1000], "compute_optics_graph": [420, 421, 1012], "best_n_it": 424, "n_local_tri": 425, "n_seed": 426, "multigrid": 427, "eigendecomposit": [427, 638, 656, 660, 832, 946], "multiscal": 427, "preliminari": 427, "heapq": 428, "topolog": [428, 973], "n_connected_compon": 428, "n_leav": [428, 874, 875, 876, 877], "transformers_": [429, 1012], "remaining_column": 429, "named_transformers_": 429, "sparse_output_": [429, 516], "output_indices_": [429, 1008], "datatyp": [429, 431, 1002, 1005], "norm1": 429, "norm2": 429, "text_preprocess": 429, "num_preprocess": 429, "x_t": [429, 592, 825], "sum_n_compon": [429, 825], "notimplementederror": [430, 437, 518, 519, 532, 533, 558, 559, 567, 853, 863, 1002, 1012], "y_hat": 430, "90453403": 431, "50755672": 431, "30151134": 431, "print_changed_onli": [433, 864, 1004, 1006, 1007], "pairwise_dist_chunk_s": [433, 864], "enable_cython_pairwise_dist": [433, 864], "skip_parameter_valid": [433, 864, 1011], "cache_s": [433, 864, 868, 869, 870, 871, 872, 969], "get_config": [433, 745, 864, 921, 1010], "offset_": [434, 528, 642, 812, 870, 1003], "raw_support_": [434, 439], "dist_": [434, 439], "true_cov": [434, 436, 437, 443], "7411": [434, 439, 1001], "2535": [434, 439], "3053": [434, 439], "0813": [434, 439], "correct_covari": [434, 439], "rvd": [434, 439], "covariance_correct": [434, 439], "comp_cov": [434, 435, 436, 437, 438, 439, 440, 441], "get_precis": [434, 435, 436, 437, 438, 439, 440, 441, 497, 499, 506], "getter": [434, 435, 436, 437, 438, 439, 440, 441, 558, 559, 562], "is_inli": [434, 528, 812], "reweight_covari": [434, 439], "rvdriessen": [434, 439], "location_reweight": [434, 439], "covariance_reweight": [434, 439], "support_reweight": [434, 439], "negative_mahal_dist": 434, "7569": 435, "2818": 435, "3928": 435, "0622": [435, 441], "0193": [435, 441], "enet_tol": [436, 437, 443, 1000], "220446049250313e": [436, 437, 443, 615, 616, 619, 620, 621, 647, 648], "graphlasso": [436, 1000, 1003], "costs_": [436, 437, 1011], "dual_gap": [436, 437, 443, 611, 612, 617, 618, 625, 626, 627, 628, 646, 649], "return_cost": [436, 437, 443], "049": 436, "364": [436, 437, 996], "038": [436, 437, 823], "n_refin": 437, "graphlassocv": [437, 997, 1003], "dualiti": [437, 950], "block_siz": [438, 444, 445, 999], "4406": 438, "1616": 438, "0595": 438, "0075": [438, 506], "rouseeuw1984": 439, "butlerdavi": 439, "butler": [439, 998, 1006, 1007], "davi": [439, 689, 954, 999], "jhun": 439, "1385": 439, "7833": 440, "2431": 440, "3889": 440, "7387": 441, "2536": 441, "4110": 441, "cov_init": [443, 1011], "graph_lasso": [443, 1003], "n_dim": [443, 492, 494, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 1012], "shrinkage_coeffici": 445, "x_loadings_": [447, 448, 449], "y_loadings_": [447, 448, 449], "plssvd": [447, 448, 976, 990, 1007, 1009], "x_c": [447, 448, 450, 961], "y_c": [447, 448, 450], "y_reconstruct": [447, 448, 449], "x_scores_": [449, 1007], "y_scores_": [449, 1007], "y_transform": 450, "data_hom": [451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 1002, 1011], "zero_bas": [452, 473, 474], "query_id": [452, 473, 474], "grok": 452, "qid": [452, 473, 474, 996, 1001], "output_fil": 452, "my_dataset": 452, "download_if_miss": [453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 1002], "n_retri": [453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 1009, 1013], "stopword": [454, 988], "target_column": [454, 455, 461], "newsgroups_vector": 454, "7532": 454, "horizontal_distance_to_hydrologi": 456, "494021": 457, "slice_": [458, 459, 1010], "195": [458, 459], "unrestrict": 458, "2914": 459, "5748": 459, "aj": [459, 1009], "lama": 459, "aaron": [459, 950, 998, 999, 1000, 1005], "eckhart": 459, "guiel": 459, "patterson": [459, 1000], "olivetti_fac": 460, "pathlik": [461, 1011], "read_csv_kwarg": [461, 1011], "timeout": [461, 920, 1009], "412": [461, 950], "ith": [461, 738, 742, 802, 823, 824, 839, 840], "48842": 461, "48841": 461, "46043": 461, "46033": 461, "47985": 461, "1592": 463, "1212": 463, "1624": 463, "620": 463, "microryzomys_minutu": 463, "8333": 463, "3333": 463, "8833": 463, "2667": 463, "9833": 463, "s22": 463, "f4": 463, "data_home_path": 464, "data_filenam": [466, 470], "target_filenam": [466, 470], "container_path": 468, "load_cont": 468, "allowed_extens": 468, "container_fold": 468, "category_1_fold": 468, "file_1": 468, "file_2": 468, "file_42": 468, "category_2_fold": 468, "file_43": 468, "file_44": 468, "image_nam": 471, "first_img_data": 472, "backup": [473, 995], "instantan": 473, "mycach": [473, 474], "get_data": [473, 474], "mysvmlightfil": 473, "xn": 474, "yn": [474, 955, 956], "q1": 474, "qn": 474, "yi": [474, 956, 999, 1003, 1004, 1007], "qi": [474, 1007], "triplet": 474, "target_train": 474, "target_test": 474, "svmlight_file_train": 474, "svmlight_file_test": 474, "minval": [476, 478], "maxval": [476, 478], "seventh": [476, 966], "269": 476, "return_cent": [477, 1006], "basri": 478, "gerstein": 478, "716": 478, "flip_i": 480, "interdepend": 480, "polytop": 480, "guyon": [480, 558, 559, 954], "madelon": 480, "1991": [481, 482, 483], "1229": 482, "12000": 485, "24000": 485, "effective_rank": [486, 489], "tail_strength": [486, 489], "bell": [486, 1003, 1005, 1007, 1008], "fat": [486, 489], "crawl": [486, 895], "return_ind": 488, "4967": 489, "1382": 489, "6476": 489, "2341": 489, "4694": 489, "5425": 489, "7674": [489, 1002], "4017": 489, "data_transpos": [491, 1009, 1011], "norm_diag": 492, "sparse_format": [492, 1012], "make_spd_matrix": 492, "celeux": 493, "el": [493, 1008, 1010, 1011], "anbari": 493, "marin": 493, "frequentist": 493, "marsland": 495, "vuw": 495, "nz": 495, "marslast": 495, "ch6": 495, "code_init": [496, 510], "dict_init": [496, 502, 510, 511], "callback": [496, 502, 504, 510, 511, 815, 920, 974, 1011], "split_sign": [496, 502, 507], "transform_max_it": [496, 502, 503, 507, 1005], "_fro": [496, 502, 510, 511, 611, 612, 617, 625, 626, 627, 646], "lasso_cd": [496, 502, 507, 513], "error_": [496, 508], "minibatchsparsepca": [496, 498, 502, 505, 507, 508, 510, 511, 995, 996, 1006, 1008, 1009, 1010, 1011, 1012], "sierra": [496, 502], "icml09": [496, 502], "x_hat": [496, 502, 510, 511], "noise_variance_init": 497, "quartimax": [497, 1007], "loglike_": 497, "barber": 497, "bishop": [497, 499, 506, 705, 761, 950, 955, 969], "get_covari": [497, 499, 506], "unmixing_matrix": 498, "whitening_": 498, "kpca": [498, 499, 500, 989, 990, 995], "set_inverse_transform_request": [498, 546, 833, 846], "unsaf": 499, "singular_values_": [499, 506, 509, 1002], "var_": [499, 804, 846, 1008], "miketip": [499, 506], "mppca": [499, 506], "n_samples_seen_": [499, 835, 836, 846, 1003], "batch_size_": 499, "ross": [499, 572, 573, 970, 1009, 1010], "vision": [499, 722, 723, 946, 950, 952, 970, 973, 978, 996], "toronto": [499, 609, 822], "dross": 499, "ivt": 499, "rosslimlinyang_ijcv": 499, "karhunen": 499, "loev": 499, "levi": [499, 1002], "lindenbaum": 499, "1371": 499, "1374": 499, "abstain": 499, "holub": 499, "opportun": [499, 968], "golub": [499, 804, 846], "sigma2": [499, 506], "x_origin": [499, 504, 506, 508, 509, 595, 858, 859], "check_input": [499, 513, 611, 612, 617, 625, 626, 627, 646, 652, 874, 875, 876, 877, 1003], "remove_zero_eig": [500, 997, 1004], "x_fit_": [500, 608], "eigenvalues_": [500, 1008], "eigenvectors_": [500, 1008], "dual_coef_": [500, 608, 868, 869, 870, 871, 872, 969, 999], "x_transformed_fit_": 500, "gamma_": [500, 1011], "nathan": [500, 1003, 1007, 1010], "gunnar": [500, 903], "tropp": [500, 506], "217": [500, 506], "vladimir": [500, 903, 950, 1005, 1009, 1012], "rokhlin": [500, 506, 903], "tygert": [500, 506, 903], "learning_decai": 501, "evaluate_everi": 501, "perp_tol": 501, "mean_change_tol": 501, "max_doc_update_it": 501, "kappa": [501, 681], "tau_0": 501, "pseudocount": [501, 1003], "exp_dirichlet_component_": 501, "n_batch_iter_": 501, "bound_": 501, "doc_topic_prior_": 501, "topic_word_prior_": 501, "franci": [501, 623, 950, 1001], "onlineldavb": 501, "chong": 501, "00360392": 501, "25499205": 501, "0036211": 501, "64236448": 501, "09541846": 501, "15297572": 501, "00362644": 501, "44412786": 501, "39568399": 501, "003586": 501, "vb": 501, "sub_sampl": 501, "doc_topic_distr": [501, 1002], "052": 502, "fresh_restart": 503, "fresh_restarts_max_it": 503, "_w": [503, 505, 512], "_ratio": [503, 505, 512], "_h": [503, 505, 512], "fresh": [503, 974, 1005], "reconstruction_err_": [503, 505], "andrzej": [503, 505, 512], "anh": [503, 505, 512], "ieic": [503, 505, 512], "708": [503, 505, 512, 714], "721": [503, 505, 512], "waspa": 503, "ridge_alpha": [504, 508, 1002], "500x500": 506, "lu": [506, 509, 902, 903, 1001, 1002, 1003, 1004, 1011, 1012], "n_samples_": 506, "royal": [506, 592, 842, 854, 968], "methodologi": [506, 839, 944, 954, 978], "622": 506, "9924": 506, "30061": 506, "54980": 506, "00755": 506, "99244": 506, "ascontiguousarrai": 506, "sparse_encod": [507, 615, 616, 617, 618, 619, 620, 621, 628, 629, 630, 647, 648, 649, 650, 651, 995, 1002, 1003, 1005, 1009], "u_init": 508, "v_init": 508, "9666": 508, "oversampl": [509, 995], "indeterminaci": 509, "0157": 509, "0512": 509, "0499": 509, "0479": 509, "0453": 509, "2102": 509, "2410": 509, "5981": 509, "5420": 509, "4486": 509, "3288": 509, "method_max_it": [510, 511, 1005], "dict_learning_onlin": [510, 996, 1005, 1008, 1009, 1012], "return_cod": 511, "update_h": 512, "_n_compon": 512, "hal": [512, 623, 722, 723, 952], "copy_cov": 513, "orthogonal_mp": [513, 629, 630, 651, 950], "sum_k": [514, 970], "prior_k": 514, "c_k": 514, "priors_": [514, 515], "scalings_": [514, 515], "xbar_": 514, "reg_param": 515, "scaling_": 515, "colinear": 515, "rotations_": 515, "vt": 515, "n_classes_": [516, 518, 520, 522, 524, 529, 575, 794, 795, 874, 876, 996, 1005, 1007], "class_prior_": [516, 804], "n_outputs_": [516, 517, 522, 523, 529, 530, 531, 823, 824, 874, 875, 876, 877], "constant_": 517, "dummy_regr": 517, "base_estimator_": [518, 519, 520, 521, 522, 523, 528, 529, 530, 531, 575, 863, 1010], "weaklearn": 518, "dok": [518, 519, 833, 1008], "staged_decision_funct": [518, 524, 526], "staged_scor": [518, 519], "7972": 519, "9771": 519, "estimators_samples_": [520, 521, 522, 523, 528, 529, 530, 531, 1001, 1003, 1006, 1012], "estimators_features_": [520, 521, 528], "oob_decision_function_": [520, 522, 529], "oob_prediction_": [521, 523, 530], "8720": [521, 1003], "min_weight_fraction_leaf": [522, 523, 524, 525, 529, 530, 531, 874, 875, 876, 877, 970, 998, 1001, 1002], "min_impurity_decreas": [522, 523, 524, 525, 529, 530, 531, 874, 875, 876, 877, 970, 1002], "shannon": [522, 529, 874, 876, 951, 970], "unlimit": [522, 523, 524, 525, 529, 530, 531, 874, 875, 876, 877], "n_t": [522, 523, 524, 525, 529, 530, 531, 874, 875, 876, 877], "n_t_r": [522, 523, 524, 525, 529, 530, 531, 874, 875, 876, 877], "right_impur": [522, 523, 524, 525, 529, 530, 531, 874, 875, 876, 877], "n_t_l": [522, 523, 524, 525, 529, 530, 531, 874, 875, 876, 877], "left_impur": [522, 523, 524, 525, 529, 530, 531, 874, 875, 876, 877], "balanced_subsampl": [522, 529, 1003], "subtre": [522, 523, 524, 525, 529, 530, 874, 875, 876, 877, 970], "extratreeclassifi": [522, 531, 877, 955, 999, 1004, 1005, 1006, 1008, 1009, 1010, 1012], "unprun": [522, 523, 529, 530, 874, 875, 876, 877], "x_leav": [522, 523, 524, 525, 529, 530, 531, 874, 875, 876, 877], "n_nodes_ptr": [522, 523, 529, 530, 531], "friedman_ms": [523, 524, 525, 530, 875, 877, 970, 1011, 1012], "extratreeregressor": [523, 528, 531, 876, 960, 1004, 1005, 1006, 1008, 1009, 1010, 1012], "2727": 523, "dummyestim": [524, 525], "eras": [524, 525, 611, 617, 623, 625, 627, 631, 632, 633, 641, 642, 643, 823, 824], "n_trees_per_iteration_": [524, 525, 526, 527], "oob_scores_": [524, 525, 1011], "init_": [524, 525], "max_features_": [524, 525, 562, 874, 875, 876, 877, 1009], "_fit_stag": [524, 525], "crossentropi": 526, "deepest": [526, 527, 1006], "__dataframe__": [526, 527], "no_interact": [526, 527, 1010], "do_early_stopping_": [526, 527], "is_categorical_": [526, 527], "n_trees_per_iter": 526, "max_samples_": 528, "fei": [528, 960], "ting": [528, 960, 1003, 1004], "ming": [528, 960, 999, 1003, 1004, 1005, 1009], "zhou": [528, 604, 862, 960, 1003, 1011, 1012], "zhi": [528, 960], "hua": [528, 960], "icdm": [528, 960], "eighth": [528, 960], "tkdd": 528, "n_left": 528, "32987858": 530, "n_out": 531, "one_hot_encoder_": 531, "moosmann": 531, "trigg": 531, "juri": 531, "random_tre": 531, "x_sparse_embed": 531, "randomtreesembedding_": 531, "final_estimator_": [532, 533], "named_estimators_": [532, 533, 534, 535, 1003, 1005], "named_estim": [532, 533, 534, 535], "parameter_nam": [532, 533, 534, 535], "new_valu": [532, 533, 534, 535], "linearsvr": [533, 872, 969, 999, 1001, 1006, 1011], "flatten_transform": [534, 1002], "le_": 534, "eclf1": 534, "array_equ": [534, 1002], "eclf2": 534, "eclf3": 534, "maj": 534, "probabilities_or_label": 534, "n_regressor": 535, "r1": 535, "r3": 535, "er": 535, "with_traceback": [536, 537, 538, 539, 540, 541, 542, 543], "__traceback__": [536, 537, 538, 539, 540, 541, 542, 543], "current_sklearn_vers": 541, "repr": [542, 1006, 1007, 1009], "linter": 544, "flake8": 544, "spam": [546, 674, 705, 801, 954, 956, 978], "feature_names_": 546, "xa": 546, "dict_typ": 546, "1048576": [547, 554], "non_neg": [547, 1002], "eleph": 547, "bird": [547, 683, 718, 954], "patch_height": [548, 549, 552], "patch_width": [548, 549, 552], "img_height": 548, "img_width": 548, "pe": 548, "pe_tran": 548, "263758": [548, 552], "image_height": [548, 549, 552], "image_width": [548, 549, 552], "n_channel": [548, 549, 552], "n_patch": [548, 549, 552], "272214": 549, "243": 549, "215": 549, "n_z": 550, "return_a": [550, 551, 920, 998], "_coo": [550, 551], "shape_img": 550, "image_s": 552, "image_patch": 552, "image_reconstruct": 552, "strip_acc": [553, 554, 556], "nfkd": [553, 554, 556, 1005], "unicodedata": [553, 554, 556], "regexp": [553, 554, 556], "min_n": [553, 554, 556, 995], "max_n": [553, 554, 556, 995], "fixed_vocabulary_": [553, 556], "stop_words_": [553, 556], "delattr": [553, 556, 1007], "vectorizer2": 553, "raw_docu": [553, 556], "get_stop_word": [553, 554, 556], "x_inv": [553, 556], "con": 554, "yates2011": 555, "baeza": [555, 694, 998], "yate": [555, 694], "ribeiro": [555, 694, 1008], "neto": [555, 694, 1013], "addison": [555, 694], "weslei": [555, 694], "mrs2008": 555, "118": 555, "tfid": 555, "22314355": 555, "51082562": 555, "91629073": 555, "_check_stop_list": 556, "pvalu": [557, 560, 561, 563, 564, 565, 791], "k_best": [557, 863, 967, 1012], "fdr": 557, "fwe": 557, "iff": [557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 837], "retent": [557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568], "n_selected_featur": [557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568], "n_original_featur": [557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568], "attrgett": [558, 562], "barnhil": [558, 559], "vapnik": [558, 559], "389": [558, 559, 988], "422": [558, 559, 690, 720, 954], "n_subsets_of_featur": 559, "narrai": 559, "benjamini": [560, 1001, 1002], "hochberg": [560, 1001, 1002], "false_discovery_r": 560, "norm_ord": [562, 1002], "threshold_": [562, 1002], "3252": 562, "8345": 562, "4976": 562, "55249": 562, "half_cal": 562, "half_selector": 562, "partial_fit_param": [562, 794, 795, 798, 799], "unspecifi": [564, 565, 765, 951], "_get_support_mask": 566, "featureselector": 566, "n_features_to_select_": 567, "variances_": 568, "weed": 569, "p_valu": [569, 570, 571], "chi2_stat": 569, "0387": 569, "0116": 569, "f_statist": [570, 571], "force_finit": [571, 574, 692, 749, 954, 1009], "pearson": [571, 574, 1008], "discrete_featur": [572, 573], "nat": [572, 573, 669, 719, 721, 1009], "essenc": [572, 573, 707, 951, 954], "kraskov": [572, 573], "stogbauer": [572, 573], "grassberg": [572, 573], "phy": [572, 573], "kozachenko": [572, 573], "leonenko": [572, 573], "probl": [572, 573], "peredachi": [572, 573], "correlation_coeffici": 574, "fmin_l_bfgs_b": [575, 576], "max_iter_predict": 575, "copy_x_train": [575, 576], "one_vs_rest": [575, 955], "compoundkernel": [575, 1009], "obj_func": [575, 576], "initial_theta": [575, 576], "theta_opt": [575, 576], "func_min": [575, 576], "_posterior_mod": 575, "log_marginal_likelihood_value_": [575, 576], "9866": [575, 584, 587], "83548752": 575, "03228706": 575, "13222543": 575, "79064206": 575, "06525643": 575, "14410151": 575, "clone_kernel": [575, 576, 1005], "n_kernel_param": [575, 576], "log_likelihood_gradi": [575, 576], "x_train_": 576, "y_train_": 576, "3680": [576, 579, 590], "592": [576, 579, 590, 961], "y_cov": 576, "n_samples_x": [576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 722, 723, 724, 725, 727, 728, 730, 731, 732, 733, 738, 739, 740, 741, 742, 743, 744, 745], "requires_vector_input": [577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590], "51292546": 577, "09861229": [577, 964], "n_samples_i": [577, 578, 579, 580, 581, 584, 585, 586, 587, 588, 589, 590, 722, 723, 724, 725, 727, 728, 730, 731, 732, 733, 738, 739, 740, 741, 742, 743, 744, 745], "n_kernel": 577, "k_gradient": [577, 578, 579, 580, 581, 584, 585, 586, 587, 588, 589, 590], "k_diag": [577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590], "hyperparameter_constant_valu": 578, "3696": 578, "606": [578, 796, 955], "hyperparameter_sigma_0": 579, "edward": [579, 584, 587, 998, 1003, 1004, 1005, 1006, 1010], "hyperparameter_length_scal": [580, 584, 587, 588], "hyperparameter_period": 580, "0144": 580, "457": 580, "3894": 580, "3467": 580, "559": 581, "namedtupl": [582, 912, 1011], "maxsiz": 582, "customkernel": 583, "mat\u00e9rn": 584, "appr": 584, "8513": 584, "0368": 584, "1117": 584, "8086": [584, 1002], "0693": 584, "1220": 584, "gamma_bound": 585, "pairwise_kernels_kwarg": 585, "additive_chi2": [585, 603, 729, 738], "pairwise_kernel_funct": [585, 608, 738], "hyperparameter_gamma": 585, "9733": [585, 588], "8880": 585, "05663": 585, "05532": 585, "8676": [585, 1002], "07073": 585, "06165": 585, "__mul__": 586, "8354": [587, 1002], "03228": 587, "1322": 587, "7906": [587, 614], "0652": 587, "1441": 587, "hyperparameter_alpha": 588, "8881": 588, "0566": 588, "05518": 588, "8678": 588, "0707": 588, "0614": 588, "hyperparameter_noise_level": 590, "dict_kei": 591, "initial_strategi": 592, "imputation_ord": [592, 1005], "skip_complet": 592, "max_valu": [592, 1006, 1007], "keep_empty_featur": [592, 593, 595, 944, 1010], "nullabl": [592, 593, 594, 595, 1006, 1010], "na": [592, 593, 594, 595, 733, 742, 884, 886, 887, 1005, 1006, 1009, 1010, 1011, 1012], "known_val": 592, "Nearness": 592, "arab": 592, "broadcast": 592, "missingind": [592, 593, 595, 944, 1003, 1004, 1005, 1009, 1011], "initial_imputer_": 592, "imputation_sequence_": 592, "feat_idx": 592, "neighbor_feat_idx": 592, "n_features_with_missing_": 592, "indicator_": [592, 593, 595], "knp": 592, "stef": [592, 944], "buuren": [592, 944], "karin": [592, 944], "groothui": [592, 944], "oudshoorn": [592, 944], "buck": 592, "1960": [592, 681], "306": 592, "imp_mean": [592, 595], "9584": [592, 1002], "nan_euclidean": [593, 726, 742], "_pairwise_cal": 593, "kwd": [593, 735, 738, 742, 745, 756, 757], "olga": [593, 944], "troyanskaya": [593, 944], "cantor": [593, 944], "gavin": [593, 944], "sherlock": [593, 944], "pat": [593, 944], "botstein": [593, 944], "russ": [593, 944], "altman": [593, 944], "bioinformat": [593, 944], "n_output_featur": 593, "error_on_new": 594, "features_": [594, 944], "n_missing_featur": 594, "x2_tr": 594, "n_features_with_miss": 594, "statistics_": 595, "n_features_missing_ind": 595, "x_imput": 595, "n_features_out": 595, "surface_": 596, "quadcontourset": 596, "quadmesh": 596, "feature_1": [596, 879], "feature_2": 596, "nicer": 596, "pd_result": 597, "target_idx": 597, "decil": [597, 1006], "is_categor": 597, "pdp": [597, 961, 1009], "nonexist": 597, "deciles_vlines_": 597, "vlines_": 597, "deciles_hlines_": 597, "bars_": 597, "heatmaps_": 597, "pdp_lim": 597, "ice_lines_kw": 597, "pd_line_kw": 597, "contour_kw": 597, "disp1": 597, "disp2": 597, "pdp_line_kw": 597, "bar_kw": 597, "heatmap_kw": 597, "seq": 598, "n_values_feature_j": 598, "bre": [599, 970], "4666": 599, "2211": 599, "x_min_": 600, "x_max_": 600, "n_threshold": [600, 691, 746, 753], "increasing_": 600, "isotonic_regress": [600, 1008], "secondari": [600, 999], "leeuw": 600, "1977": 600, "nilotp": [600, 602], "chakravarti": [600, 602], "pava": 600, "hornik": 600, "mair": 600, "kruskal": [600, 655, 659, 951], "psychometrica": 600, "iso_reg": 600, "8628": 600, "7256": 600, "isotonicregression0": 600, "increasing_bool": 601, "fisher_transform": 601, "sample_step": 603, "sample_interv": 603, "sample_interval_": [603, 1011], "skewedchi2sampl": [603, 604, 605, 606, 946, 1002, 1009, 1010], "chi2_kernel": [603, 607, 722, 729, 952, 996], "additive_chi2_kernel": [603, 723, 729, 946], "vedaldi": [603, 946], "zisserman": [603, 946, 954], "chi2sampl": 603, "9499": 603, "component_indices_": [604, 1008], "normalization_": [604, 946], "additivechi2sampl": [604, 605, 606, 607, 722, 723, 946, 1009, 1011], "kernel_metr": [604, 605, 606, 607], "seeger": [604, 946], "mahdavi": 604, "jin": [604, 1006, 1007], "data_transform": 604, "9987": 604, "fft": 605, "indexhash": 605, "bithash": 605, "indexhash_": 605, "bithash_": 605, "kitchen": [606, 946], "sink": [606, 946], "random_offset_": [606, 607], "random_weights_": [606, 607], "rahimi": [606, 946], "benjamin": [606, 997, 998, 1006, 1007, 1008, 1009, 1010, 1011, 1013], "recht": [606, 946], "berkelei": [606, 874, 875], "brecht": 606, "rah": 606, "rbf_featur": [606, 946], "skewed": [607, 1002], "secant": 607, "fuxin": 607, "catalin": 607, "ionescu": [607, 946, 1005], "cristian": 607, "sminchisescu": [607, 946], "chi2_featur": 607, "2c": [608, 617, 637, 638, 639, 640, 652, 946], "kevin": [608, 997, 999, 1001, 1002, 1005, 1006, 1007, 1009, 1010, 1012], "alpha_1": [609, 610, 950], "alpha_2": [609, 610, 950], "lambda_1": [609, 610, 950], "lambda_2": [609, 610, 950], "threshold_lambda": 609, "x_offset_": [609, 610, 1007], "x_scale_": [609, 610, 1007], "mackai": [609, 610, 950], "ashra": 609, "salakhutdinov": [609, 815, 957], "utstat": 609, "rsalakhu": 609, "sta4273": 609, "lecture2": 609, "computed_scor": 610, "appendix": [610, 641, 950, 964], "wipf": [610, 950], "nagarajan": [610, 950], "2_2": [611, 612, 617, 618, 619, 620, 621, 625, 626, 627, 628, 637, 646, 647, 648, 649], "glmnet": [611, 612, 995], "sparse_coef_": [611, 617, 625, 627, 995], "dual_gap_": [611, 612, 617, 618, 625, 626, 627, 628, 1008], "max_j": [611, 617], "w_j": [611, 617, 954, 968], "ext": 611, "83816048": 611, "55968825": 611, "451": 611, "coef_init": [611, 612, 617, 618, 625, 626, 627, 628, 631, 632, 633, 641, 642, 643, 646, 649], "mono": [611, 612, 617, 618, 625, 626, 627, 628, 646, 649], "_21": [611, 612, 617, 618, 625, 626, 627, 628, 646, 649], "sum_j": [611, 612, 617, 618, 625, 626, 627, 628, 646, 649, 950, 954, 959], "alpha_min": [611, 612, 615, 617, 618, 619, 621, 625, 626, 627, 628, 646, 647, 648, 649], "alpha_max": [611, 612, 617, 618, 625, 626, 627, 628, 646, 649], "ndim": [611, 612, 617, 618, 625, 626, 627, 628, 646, 649, 886, 887], "multitaskelasticnet": [611, 612, 617, 626, 627, 628, 646, 950, 995, 1002, 1003, 1006, 1008], "estimated_coef": [611, 612, 617, 625, 626, 627, 646, 647, 648], "l1_ratio_": [612, 624, 626], "n_l1_ratio": [612, 624, 626, 998], "raphson": [613, 634, 645], "g_j": [613, 634, 645], "483": 613, "795": 613, "pg_i": 614, "scale_": [614, 835, 836, 844, 846, 856, 964, 1000], "outliers_": 614, "elvezio": [614, 950], "ronchetti": [614, 950], "concomit": [614, 950], "owen": [614, 1004, 1005], "statweb": [614, 647, 648], "hhu": [614, 1004], "284": 614, "806": 614, "7200": 614, "4923": 614, "1698": 614, "0106": 614, "9221": 614, "0226": 614, "fit_path": [615, 619, 620, 621, 647, 648], "coef_path_": [615, 616, 619, 620, 950], "active_": [615, 616, 619, 620], "1111": [615, 621], "max_n_alpha": [616, 620], "n_cv_alpha": [616, 620], "cv_alpha": [616, 620], "lassolar": [616, 617, 618, 620, 621, 628, 629, 630, 647, 648, 649, 950, 986, 995, 996, 998, 1002, 1005, 1006, 1008], "9996": 616, "2961": 616, "3996": 616, "2_f": 617, "_11": 617, "4951": 618, "2_fro": [618, 627, 628, 649], "coef_path": [618, 628, 649], "46874778": [618, 628, 649], "2159048": [618, 628, 649], "4425765": [618, 628, 649], "23689075": [618, 628, 649], "coef_path_lar": [618, 628, 649], "coef_path_continu": [618, 628, 649], "interp1d": [618, 628, 649], "46915237": [618, 628, 649], "23668876": [618, 628, 649], "congruenc": [619, 620, 621, 647, 648], "fragil": 620, "3972": 620, "2222": 621, "rank_": 622, "singular_": 622, "maxent": [623, 624, 950], "primal": [623, 624, 642, 866, 867, 968, 969], "synthetic_feature_weight": [623, 624], "ciyou": 623, "byrd": 623, "jorg": [623, 998, 1007, 1009], "noced": 623, "lui": [623, 996, 998, 999, 1003, 1012], "iem": 623, "lbfgsb": 623, "schmidt": [623, 950, 998], "le": [623, 834, 945, 950, 957, 965, 967, 1003, 1007, 1008, 1012], "roux": [623, 950, 967], "00860051": 623, "defazio": [623, 950], "lacost": [623, 950], "hsiang": [623, 999], "fu": [623, 999], "fang": [623, 1002, 1003], "lan": [623, 1010, 1011], "chih": [623, 1000], "jen": [623, 1003], "maxent_du": 623, "cs_": 624, "l1_ratios_": 624, "coefs_paths_": [624, 1005], "coefs_path": 624, "n_l1_ratios_": 624, "score_param": [624, 1012], "w_ij": 625, "eps_": [625, 627], "45663524": 625, "45612256": 625, "0872422": 625, "fro_2": [626, 628], "52875032": 626, "46958558": 626, "00166409": 626, "60809415": 627, "94592424": 627, "41888636": 627, "87382323": 627, "9994": 628, "5713": 628, "7971": 628, "9015": [628, 1003], "n_nonzero_coefs_": [629, 630, 1013], "orthogonal_mp_gram": [629, 630, 650, 1009], "mallat": [629, 650, 651, 950], "3397": [629, 650, 651], "3415": [629, 650, 651], "papier": [629, 650, 651], "mallatpursuit93": [629, 650, 651], "rubinstein": [629, 650, 651], "zibulevski": [629, 650, 651], "elad": [629, 650, 651], "technion": [629, 650, 651, 950], "ronrubin": [629, 650, 651, 950], "ksvd": [629, 650, 651, 950], "9991": [629, 630, 1003], "3854": [629, 630], "previous_loss": [631, 632, 633, 642], "pa": [631, 632, 863, 950, 954, 967], "preset": [631, 633, 641, 958], "t_": [631, 632, 633, 641, 642, 643, 823, 824, 968], "loss_function_": [631, 633, 641, 642, 1012], "volume7": [631, 632], "crammer06a": [631, 632], "crammer": [631, 632, 699, 950, 954, 969], "dekel": [631, 632, 950], "keshat": [631, 632, 950], "shalev": [631, 632, 950, 968], "shwartz": [631, 632, 950, 968], "26642044": 631, "45070924": 631, "67251877": 631, "64185414": 631, "84127814": 631, "intercept_init": [631, 632, 633, 641, 643], "y_all": [631, 633, 641, 794, 795, 823], "epsilon_insensit": [632, 641, 643, 867, 950, 968], "squared_epsilon_insensit": [632, 641, 643, 867, 950, 1001], "48736655": 632, "18818427": 632, "59122734": 632, "94731329": 632, "02306214": 632, "eta0": [633, 641, 642, 643, 968], "lossfunct": [633, 641, 642, 1004], "therein": 633, "939": [633, 983], "990": [634, 954], "solver_opt": 635, "ipm": 635, "linprog": [635, 950], "is_data_valid": [636, 950], "is_model_valid": [636, 950], "max_trial": [636, 950], "max_skip": 636, "stop_n_inli": [636, 950], "stop_scor": [636, 950], "stop_prob": 636, "mad": [636, 1001], "costlier": 636, "n_trials_": 636, "n_skips_no_inliers_": 636, "n_skips_invalid_data_": 636, "n_skips_invalid_model_": 636, "sri": [636, 950, 1002, 1003], "bmva": 636, "bmvc": [636, 950], "paper355": 636, "9885": 636, "9417": 636, "15000": [637, 652, 823, 824], "btol": [637, 639], "gcv_mode": [638, 997], "store_cv_valu": [638, 640, 1003, 1006], "alpha_per_target": [638, 1007], "cv_values_": [638, 640], "5166": 638, "gcv": [638, 640], "9595": 639, "9630": 640, "power_t": [641, 642, 643, 823, 824, 968], "best_loss": [641, 643], "leon": [641, 642, 643, 995], "bottou": [641, 642, 643, 958, 968], "pow": [641, 642, 643, 823, 824], "dl": 641, "775047": 641, "775151": 641, "justif": 641, "volume2": 641, "zhang02c": 641, "offset_init": 642, "unshifft": 642, "n_subsampl": [644, 892], "breakdown_": 644, "n_subpopulation_": 644, "xin": [644, 950, 1003], "dang": [644, 950, 1013], "hanxiang": [644, 950], "peng": [644, 950, 1001, 1002, 1003, 1005, 1007], "xueqin": [644, 950], "hepe": [644, 950], "olemiss": 644, "xdang": 644, "mtse": 644, "9884": 644, "5871": 644, "coeff": 645, "839": 645, "599": 645, "copy_gram": [647, 648, 651], "return_path": [647, 648, 650, 651], "lars_path_gram": [647, 950, 1004], "tib": [647, 648], "xgamma": 650, "norms_squar": 651, "copy_xi": 651, "return_intercept": [652, 1004], "_preprocess_data": 652, "path_method": [653, 951], "neighbors_algorithm": [653, 654], "arnoldi": [653, 654, 658], "fw": 653, "warshal": [653, 951], "kernel_pca_": 653, "nbrs_": [653, 654], "dist_matrix_": 653, "tenenbaum": [653, 951], "reconstruction_error": 653, "frobenius_norm": 653, "d_fit": 653, "x_fit": 653, "n_queri": [653, 808, 809, 810, 812, 814, 816, 817, 818], "hessian_tol": [654, 658], "modified_tol": [654, 658], "reconstruction_error_": 654, "rowei": [654, 658, 815, 951, 957], "saul": [654, 658, 951, 1002, 1003, 1005], "2323": [654, 658, 951], "donoho": [654, 658, 951], "grime": [654, 658, 951], "natl": [654, 658, 951], "acad": [654, 658, 951], "5591": [654, 658, 951], "mlle": [654, 658, 951], "zha": [654, 658, 951], "shanghai": [654, 658, 951], "univ": [654, 658, 951], "406": [654, 658, 951], "immers": [655, 659], "nonmetr": [655, 659, 951], "smacof": [655, 1010], "stress": [655, 659, 951, 1010], "stress_": 655, "dispar": [655, 659, 951], "dissimilarity_matrix_": 655, "psychometrika": [655, 659, 951], "1964": [655, 659, 842, 854, 951], "borg": [655, 659, 951], "groenen": [655, 659, 951], "affinity_matrix": [656, 660], "n_neighbors_": [656, 812], "early_exagger": 657, "min_grad_norm": [657, 1001], "der": [657, 661, 951, 998, 999, 1003], "maaten": [657, 661, 951], "bhtsne": [657, 1002], "opentsn": 657, "abort": 657, "pdist": [657, 742, 745], "pairwise_distance_funct": [657, 661, 742, 745, 957], "barn": [657, 951, 1000, 1002, 1005], "hut": [657, 951, 1000, 1002, 1005], "nlogn": 657, "kl_divergence_": [657, 1002], "learning_rate_": [657, 824], "hinton": [657, 815, 822, 823, 824, 951, 957, 958, 959], "2579": 657, "2605": 657, "lvdmaaten": [657, 1002], "oct": [657, 733, 951, 957], "3221": [657, 951], "3245": [657, 951], "jmlr_2014": 657, "belkina": [657, 951], "ciccolella": [657, 951], "anno": [657, 951], "halpert": [657, 951], "spidlen": [657, 951], "snyder": [657, 951], "cappion": [657, 951], "kobak": [657, 1008], "beren": 657, "transcriptom": 657, "guttman": 659, "mds_result": 659, "norm_laplacian": 660, "drop_first": 660, "nk": 661, "2n": [661, 946, 958], "3k": 661, "cosine_dist": [661, 726, 957, 1001], "jarkko": 661, "venna": 661, "samuel": [661, 978, 998, 999, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1012], "kaski": 661, "icann": 661, "verlag": 661, "491": 661, "twelfth": 661, "pmlr": 661, "384": [661, 867], "391": 661, "im_": 662, "axesimag": 662, "text_": 662, "include_valu": 662, "values_format": [662, 1005], "im_kw": [662, 1009], "text_kw": [662, 1010], "get_metr": 664, "euclideandist": 664, "manhattandist": 664, "chebyshevdist": 664, "minkowskidist": [664, 1008], "seuclideandist": 664, "mahalanobisdist": 664, "haversinedist": 664, "arcsin": [664, 728], "hammingdist": 664, "n_unequ": 664, "n_tot": 664, "canberradist": 664, "braycurtisdist": 664, "abbrevi": 664, "ntt": 664, "ntf": 664, "nft": 664, "nff": 664, "nneq": 664, "jaccarddist": 664, "matchingdist": 664, "dicedist": 664, "kulsinskidist": [664, 1011], "rogerstanimotodist": 664, "russellraodist": 664, "sokalmichenerdist": 664, "sokalsneathdist": 664, "pyfunc": [664, 957], "pyfuncdist": 664, "metric_obj": 664, "chance_level_": [665, 667, 1011], "drop_intermedi": [665, 667, 746, 753, 1011], "errors_lines_": 666, "with_error": 666, "scatter_": 666, "balanced_accuracy_scor": [668, 751, 954, 1003], "imperfectli": [668, 698, 954], "label_tru": [669, 682, 701, 719, 721, 759], "upperlimit": 669, "expected_ri": 670, "discord": [670, 977], "hubert1985": 670, "1007": 670, "2fbf01908075": 670, "steinley2004": 670, "wk": 670, "rand_index": 670, "adjusted_rand_index": 670, "chacon": 670, "chac\u00f3n": 670, "rastrojo": 670, "balanced_accuraci": [673, 954, 1003], "brodersen": 673, "ong": 673, "stephan": [673, 998, 1004, 1005, 1007], "buhmann": 673, "20th": 673, "3121": 673, "kelleh": [673, 954], "aoif": [673, 954], "arci": [673, 954], "y_true_categor": [674, 954], "calinski": [675, 1001], "harabasz": 675, "allow_non": 676, "thrown": [676, 1004, 1005], "tn": [677, 683, 954], "negative_class": 677, "zebra": 677, "output_dict": [678, 1003, 1007], "precision_recall_fscore_support": [678, 693, 694, 748, 751, 954, 999, 1003, 1005, 1011], "multilabel_confusion_matrix": [678, 693, 694, 702, 748, 751, 954, 1004], "conting": [679, 680, 695, 719, 1001], "n_classes_tru": [679, 719], "n_classes_pr": [679, 719], "cohen": [681, 1003], "p_o": 681, "p_e": 681, "artstein": 681, "poesio": 681, "linguist": [681, 863, 967], "555": 681, "596": 681, "neutral": 681, "6875": 681, "label_pr": [682, 700, 701, 719, 721, 759], "ant": [683, 718, 954], "a_row": 684, "a_column": 684, "b_row": 684, "b_column": 684, "tsoumaka": [685, 698, 704, 954], "kataki": [685, 698, 704, 954], "vlahava": [685, 704, 954], "handbook": [685, 704, 954], "667": [685, 704, 954], "raw_valu": [686, 687, 692, 709, 710, 712, 714, 715, 717, 749, 754, 755, 954, 1003, 1006], "wainwright": [686, 687, 688], "su": [686, 687, 688], "statlearnspars": [686, 687, 688], "764": [686, 954], "691": 686, "8125": 686, "57142857": 686, "d2": 687, "d2_absolute_error_scor": [687, 954, 1009], "koenker": [687, 950], "roger": [687, 1002, 1003, 1007], "jos\u00e9": [687, 998, 1008], "045": 687, "487": 688, "630": 688, "bouldin": 689, "farther": 689, "log_bas": 690, "ignore_ti": [690, 720], "ndcg": [690, 720, 954, 1002], "ndcg_score": [690, 954, 1002, 1005, 1010, 1011], "sharper": 690, "discounted_cumulative_gain": 690, "dcg": [690, 720, 954, 1002], "jarvelin": [690, 720, 954], "kekalainen": [690, 720, 954], "446": [690, 720, 954], "colt": [690, 720, 954], "mcsherri": [690, 720, 954], "najork": [690, 720, 954], "european": [690, 720, 954], "421": [690, 720, 954], "groud": [690, 720], "true_relev": [690, 720], "imperfect": [692, 749, 954, 997], "variance_weight": [692, 749, 954], "983": 692, "n_unique_label": [693, 694, 702, 747, 748, 751, 918], "fbeta_scor": [693, 706, 747, 954, 997, 998, 999, 1000, 1005, 1011], "y_true_empti": 693, "y_pred_empti": [693, 694], "66666667": [693, 746, 816, 964], "328": 694, "fowlk": [695, 1001], "mallow": [695, 1001], "get_scorer_nam": [696, 954, 1009, 1012], "all_scor": 697, "forgiv": 698, "upperbound": 698, "grigorio": 698, "ioanni": 698, "wareh": 698, "septemb": [698, 954, 995, 998, 1001, 1003, 1008, 1011], "pred_decis": [699, 954, 1008], "disagre": [699, 961], "kobi": 699, "AND": 699, "denero": 699, "v_measur": [700, 759], "6666": [702, 954, 1001], "5833": [702, 954], "lrap": [703, 954], "416": [703, 954], "21616": 705, "needs_proba": [706, 1004, 1012], "needs_threshold": [706, 1012], "ftwo_scor": [706, 954], "mcc": [707, 954, 1009], "baldi": 707, "brunak": 707, "chauvin": 707, "andersen": [707, 1009], "nielsen": [707, 1003], "gorodkin": 707, "jurman": 707, "riccadonna": 707, "furlanello": 707, "cen": 707, "3273": 710, "5515": 710, "6198": 710, "112589990684262": 710, "0568": 711, "4260": [713, 716], "41666667": 714, "msle": [715, 954], "rmsle": [715, 954], "root_mean_squared_log_error": [715, 954, 1012], "00462428": 715, "08377444": 715, "samplewis": [718, 954], "mcm": [718, 954], "mcm_": 718, "multi_confus": 718, "056": [719, 962], "normalized_discounted_cumulative_gain": 720, "dcg_score": [720, 954, 1002, 1005], "marszalek": [722, 723, 952], "lazebnik": [722, 723, 952], "schmid": [722, 723, 952], "ouvert": [722, 723, 952], "00171412": [722, 723, 952], "dense_output": [725, 731, 859, 904, 1003], "linear_kernel": [725, 729, 952, 1003], "haversine_dist": [726, 1004], "y_norm_squar": 727, "x_norm_squar": [727, 1000, 1012], "paired_dist": [727, 733, 742, 999], "41421356": [727, 733, 957], "lon": 728, "ezeiza": 728, "airport": 728, "bueno": 728, "argentina": 728, "gaull": 728, "bsa": 728, "83333": 728, "5166646": 728, "0083899664": 728, "53844117956": 728, "bsas_in_radian": 728, "paris_in_radian": 728, "6371000": 728, "kilomet": 728, "11099": 728, "54035582": 728, "polynomial_kernel": [729, 952, 1012], "rbf_kernel": [729, 952, 999], "laplacian_kernel": [729, 952, 1000], "sigmoid_kernel": [729, 952], "sq": 733, "dixon": [733, 1005, 1006], "cybernet": 733, "ieeexplor": 733, "4310090": 733, "filter_param": 738, "jth": [738, 742], "force_all_finit": [742, 884, 886, 887, 1006, 1009], "distance_metr": [742, 806, 807, 808, 809, 810, 811, 812, 813, 814, 816, 817, 818, 819, 820], "oversubscript": [742, 922, 1009], "metric_kwarg": [743, 744], "reduce_func": [745, 1006], "d_chunk": 745, "sought": 745, "neigh": [745, 808, 809, 810, 812, 814, 816, 817, 818], "gen": 745, "probas_pr": [746, 1013], "warn_for": 747, "shantanu": 747, "godbol": 747, "sunita": 747, "sarawagi": 747, "pig": 747, "948": [749, 954], "max_fpr": [752, 954, 1003], "provost": [752, 954], "ceder": [752, 954], "stern": [752, 954], "fawcett": [752, 753, 954], "generalis": [752, 954, 974], "822": 754, "n_samples_a": [756, 757], "favour": [756, 951, 953, 1004], "mean_prior": 761, "degrees_of_freedom_prior": 761, "verbose_interv": [761, 762], "wishart": 761, "emipr": 761, "precisions_": [761, 762], "precisions_cholesky_": [761, 762, 1009], "converged_": [761, 762, 1012], "lower_bound_": [761, 762, 1003], "weight_concentration_prior_": 761, "weight_concentration_": 761, "mean_precision_prior_": 761, "mean_precision_": 761, "mean_prior_": 761, "degrees_of_freedom_prior_": 761, "degrees_of_freedom_": 761, "covariance_prior_": 761, "hagai": 761, "attia": 761, "bgm": 761, "n_dimens": [761, 762], "log_prob": [761, 762], "weights_init": 762, "precisions_init": [762, 1009, 1011], "gm": 762, "pre_dispatch": [763, 769, 777, 785, 787, 788, 789, 790, 793, 920, 998], "error_scor": [763, 766, 767, 769, 777, 785, 788, 789, 790, 793, 943, 999, 1003, 1007, 1010], "explos": [763, 777, 787, 788, 789], "fitfailedwarn": [763, 766, 767, 769, 777, 785, 788, 789, 790, 793], "param_kernel": [763, 777], "param_degre": 763, "split0_test_scor": [763, 777, 1001], "rank_t": 763, "split1_test_scor": [763, 777], "split0_train_scor": [763, 777, 1001], "split1_train_scor": [763, 777], "mean_train_scor": [763, 777, 1001], "std_train_scor": [763, 777, 1001], "split0_test_precis": [763, 777], "mean_train_precis": [763, 777], "best_estim": [763, 766, 767, 777], "scorer_": [763, 766, 767, 777], "n_splits_": [763, 766, 767, 777], "refit_time_": [763, 766, 767, 777, 1003], "multimetric_": [763, 766, 767, 777], "parametergrid": [763, 997, 1003], "split2_test_scor": 763, "num_sampl": [763, 777, 1010], "versionad": [763, 766, 767, 777], "stratif": [764, 765, 771, 772, 781, 782, 783, 925, 1004], "group_kfold": 764, "set_split_request": [764, 765, 770, 772, 781], "aggressive_elimin": [766, 767, 943], "r0": [766, 767], "replai": [766, 767], "n_remaining_candidates_": [766, 767], "n_candid": [766, 767, 943], "max_resources_": [766, 767], "min_resources_": [766, 767], "n_required_iterations_": [766, 767], "n_possible_iterations_": [766, 767], "exceed": [766, 767, 1001], "n_unique_tick": [769, 790], "n_tick": [769, 785, 790, 793], "neg_": [769, 785, 1001], "errorbar_": [769, 785], "errorbarcontain": [769, 785], "fill_between_": [769, 785], "polycollect": [769, 785], "exploit_incremental_learn": [769, 790], "log_scal": [769, 1011], "fill_between_kw": [769, 785], "errorbar_kw": [769, 785], "predispatch": [769, 785, 790, 793], "combinator": 773, "lpo": 773, "param_list": 775, "rounded_list": 775, "89856": 775, "923223": 775, "878964": 775, "038159": 775, "parametersampl": [777, 997, 1003, 1007], "2652124": 778, "rskf": 779, "36851234": 779, "sizeabl": [780, 783], "sad": [781, 782], "sss": 783, "logistic_regress": [785, 793], "n_valu": [785, 793, 1003], "checked_cv": 786, "3315057": [788, 789], "08022103": [788, 789], "03531816": [788, 789], "test_r2": 789, "test_auc": 789, "train_r2": 789, "train_auc": 789, "3635": 789, "3573": 789, "6114": 789, "28009951": 789, "3908844": 789, "22784907": 789, "train_sizes_ab": 790, "train_size_ab": 790, "cv_train_scor": 790, "cv_test_scor": 790, "permutation_scor": 791, "505": 791, "pairwise_indices_": 794, "label_binarizer_": 795, "multilabel_": [795, 1000], "code_book_": 796, "bakiri": [796, 955], "pict": [796, 955], "chain_method": [797, 1013], "order_": [797, 800], "chain_method_": 797, "jess": [797, 955, 1008], "pfahring": [797, 955], "geoff": [797, 955], "holm": [797, 955, 1012], "eib": [797, 955], "8387": 797, "9431": 797, "4576": 797, "8878": 797, "3684": 797, "2640": 797, "0321": 797, "9935": 797, "0626": 797, "y_log_prob": 797, "load_linnerud": [799, 1001, 1006], "force_alpha": [801, 802, 803, 805, 1010], "lidston": [801, 802, 803, 805, 956], "class_count_": [801, 802, 803, 804, 805], "class_log_prior_": [801, 802, 803, 805], "feature_count_": [801, 803, 805], "feature_log_prob_": [801, 802, 803, 805], "categoricalnb": [801, 803, 804, 805, 956, 1005, 1006, 1007, 1008, 1010], "renni": [801, 803, 956, 1003], "schuetz": [801, 805], "htmledit": [801, 805, 952], "mccallum": [801, 956], "nigam": [801, 956], "metsi": [801, 956], "androutsopoulo": [801, 956], "palioura": [801, 956], "cea": [801, 956], "predict_joint_log_proba": [801, 802, 803, 804, 805, 1010], "min_categori": [802, 1007], "category_count_": 802, "n_categories_": 802, "mirror": [803, 943], "mahout": 803, "weka": 803, "feature_all_": 803, "shih": [803, 956], "teevan": [803, 956], "karger": [803, 956], "616": [803, 956, 964], "623": [803, 956], "jrenni": 803, "icml03": 803, "var_smooth": [804, 1003], "stan": [804, 1012], "levequ": [804, 846], "cstr": 804, "epsilon_": 804, "theta_": [804, 956], "clf_pf": 804, "distancemetric64": [806, 807], "valid_metr": [806, 807, 957, 1011], "19662693": [806, 807], "29473397": [806, 807], "tree_copi": [806, 807], "query_radiu": [806, 807], "count_onli": [806, 807], "kernel_dens": [806, 807], "94114649": [806, 807], "83281226": [806, 807], "2071716": [806, 807], "two_point_correl": [806, 807], "get_arrai": [806, 807], "get_n_cal": [806, 807], "n_call": [806, 807], "get_tree_stat": [806, 807], "tree_stat": [806, 807], "breadth_first": [806, 807, 811], "return_log": [806, 807], "k_true": [806, 807], "k_ret": [806, 807], "breadth": [806, 807, 811, 978, 997], "dualtre": [806, 807], "sort_result": [806, 807, 814, 816, 817, 818, 1007], "radii": [806, 807], "reset_n_cal": [806, 807], "effective_metric_": [808, 809, 810, 812, 814, 816, 817, 818, 957], "callbl": 808, "effective_metric_params_": [808, 809, 810, 812, 814, 816, 817, 818], "outputs_2d_": [808, 816, 1005], "nearest_neighbor_algorithm": [808, 816, 817], "333": 808, "n_index": [808, 809, 810, 812, 814, 816, 817], "neigh_dist": [808, 809, 810, 812, 814, 816, 817, 818], "neigh_ind": [808, 809, 810, 812, 814, 816, 817, 818], "nearest_neighbors_algorithm": [809, 814], "nearer": [810, 818, 957], "x_dist_graph": 810, "silverman": [811, 1010], "binarytre": [811, 999, 1003, 1007], "bandwidth_": 811, "log_dens": 811, "52955942": 811, "51462041": 811, "60244657": 811, "logprob": 811, "negative_outlier_factor": 812, "9821": 812, "0370": 812, "3697": 812, "shifted_opposite_lof_scor": 812, "opposite_lof_scor": 812, "wminkowski": [813, 1007, 1009], "narasimhan": 813, "chu": [813, 1011], "shrunken": [813, 995], "6567": 813, "6572": 813, "nbr": [814, 957], "neighborsclassifi": [814, 816, 817, 818, 995], "n_features_a": 815, "n_features_b": 815, "goldberg": [815, 957], "neighbourhood": [815, 957], "ncanip": 815, "neighbourhood_components_analysi": 815, "961904": 815, "outlier_label": [816, 1005], "outlier_label_": 816, "33333333": [816, 964], "x_cluster": 818, "warn_when_not_sort": 821, "efficiencywarn": [821, 1010], "sml": [822, 959], "pcd": [822, 959], "sweep": 822, "gibb": [822, 959, 973], "intercept_hidden_": 822, "intercept_visible_": 822, "h_samples_": 822, "osindero": [822, 959], "teh": [822, 959], "1527": 822, "1554": 822, "absp": 822, "fastnc": 822, "tieleman": [822, 959], "v_new": 822, "pseudo_likelihood": 822, "relu": [823, 824], "beta_1": [823, 824], "beta_2": [823, 824], "max_fun": [823, 824, 1005], "n_layer": [823, 824], "neuron": [823, 824, 952, 958], "tan": [823, 824, 958, 1002], "rectifi": [823, 824], "kingma": [823, 824, 958], "diederik": [823, 824, 958, 1010], "jimmi": [823, 824, 958, 1001, 1003], "effective_learning_r": [823, 824], "best_loss_": [823, 824, 1010], "best_validation_score_": [823, 824, 1010], "validation_scores_": [823, 824, 1010], "intercepts_": [823, 824, 958], "n_layers_": [823, 824], "out_activation_": [823, 824], "geoffrei": [823, 824, 958, 1006, 1007, 1008, 1009, 1011], "connectionist": [823, 824], "glorot": [823, 824], "xavier": [823, 824, 1003, 1004, 1005, 1007, 1008], "yoshua": [823, 824, 967], "feedforward": [823, 824], "kaim": [823, 824], "delv": [823, 824], "imagenet": [823, 824], "961": 823, "log_y_prob": 823, "named_transform": [825, 1010], "svd__n_compon": 825, "transform_list": 825, "s__p": 826, "n_transformed_featur": 826, "y_log_proba": 826, "analyst": 829, "x_tr": [829, 835, 838, 839, 840, 844, 846, 849, 851, 852, 856, 857], "accept_spars": [830, 886, 887, 1002, 1012], "inv_kw_arg": 830, "pickleabl": [830, 1001], "6931": 830, "3862": 830, "n_bins_": 831, "regener": 831, "xinv": 831, "tild": [832, 962, 964], "k_fit_rows_": 832, "k_fit_all_": 832, "1299": [832, 964], "1319": [832, 964], "n_samples1": 832, "n_samples2": 832, "k_new": 832, "neg_label": [833, 850], "y_type_": 833, "sparse_input_": 833, "lb": [833, 965], "tokyo": [834, 965], "amsterdam": [834, 965], "max_abs_": 835, "x_std": [836, 852, 964], "data_min_": [836, 1000], "data_max_": [836, 1000], "data_range_": [836, 1000], "unwieldi": 837, "fi": 837, "comedi": 837, "y_indic": 837, "yt": 837, "ands": 837, "feature_name_combin": [839, 1011], "categories_": [839, 840, 847, 964, 1003, 1010], "unregular": [839, 862, 986, 1004], "intact": [839, 988], "infrequ": [839, 840, 847, 954, 995, 1009, 1010, 1011], "infrequent_if_exist": [839, 964], "x_6": 839, "x_7": 839, "drop_idx_": [839, 1006, 1010], "drop_idx": 839, "gender_femal": 839, "gender_mal": 839, "group_1": 839, "group_2": 839, "group_3": 839, "drop_enc": [839, 964], "drop_binary_enc": 839, "custom_combin": 839, "custom_fnames_enc": 839, "x0_str_femal": 839, "x0_str_male": 839, "x1_int_1": 839, "x1_int_2": 839, "x1_int_3": 839, "oh": [839, 1005], "infrequent_sklearn": [839, 964], "n_encoded_featur": [839, 840], "_csr": 839, "onward": [840, 999], "bpo": 840, "43475": 840, "lenient": [840, 974, 1012], "min_degre": [841, 1008], "max_degre": [841, 1008], "powers_": 841, "n_output_features_": 841, "nystrom": [841, 1004, 1005], "hugh": [841, 997, 1008], "featurewis": 842, "power_transform": [842, 855, 1003], "biometrika": [842, 854], "954": [842, 854], "959": [842, 854], "707": [842, 854], "ignore_implicit_zero": [843, 855], "landmark": [843, 855, 964], "n_quantiles_": 843, "quantiles_": [843, 964, 1005], "references_": 843, "with_cent": [844, 856], "with_scal": [844, 856], "unit_vari": [844, 856, 1007], "quartil": 844, "q_min": [844, 856], "q_max": [844, 856], "center_": 844, "robust_scal": [844, 855, 1003], "interquartile_rang": 844, "bspline": 845, "n_features_out_": 845, "with_std": [846, 857, 964, 1003], "n_samples_seen": 846, "5a": 846, "randal": [846, 999, 1009], "mic": [847, 964], "target_mean_": [847, 964], "target_type_": 847, "f0_c0": 847, "f0_c1": 847, "f0_c2": 847, "f1_c0": 847, "f1_c1": 847, "f1_c2": 847, "micci": [847, 964], "barreca": [847, 964], "newsl": [847, 964], "enc_auto": 847, "enc_high_smooth": 847, "enc_low_smooth": 847, "type_of_target_": 847, "ahead": 850, "return_norm": [853, 1002], "compute_inverse_compon": [858, 859, 966], "inverse_components_": [858, 859, 966, 1009], "2759": [858, 859], "afor": [858, 859], "baserandomproject": [858, 859], "ping": [859, 966, 1001, 1002], "density_": 859, "gaussianrandomproject": [859, 966, 996, 1009, 1011, 1012], "church": [859, 966], "kdd06_rp": 859, "cgi": 859, "uoa": 859, "gr": 859, "opta": 859, "0182": 859, "e2": [860, 950], "93lindenstrauss_lemma": 860, "sanjoi": [860, 966], "anupam": [860, 966, 1010], "gupta": [860, 966, 1002, 1003, 1006, 1007, 1008, 1009, 1011, 1012], "elementari": [860, 966], "11841": [860, 966], "1112658": [860, 966], "7894": [860, 966], "9868": [860, 966], "steadi": [861, 862], "xiaojin": 861, "zoubin": 861, "ghahramani": 861, "cmu": 861, "cald": 861, "carnegi": 861, "mellon": 861, "jerryzhu": 861, "label_prop_model": [861, 862], "clamp": [862, 967], "dengyong": 862, "bousquet": 862, "navin": 862, "lal": 862, "schoelkopf": 862, "termination_condition_": 863, "no_chang": 863, "all_label": 863, "33rd": [863, 967], "acl": [863, 967, 968], "stroudsburg": [863, 967], "crammer_sing": [866, 955, 969, 995], "seldom": 866, "w_x_1": [866, 867], "w_x_n": [866, 867], "w_intercept": [866, 867], "readonli": [866, 867, 1008, 1010, 1011], "raw_coef_": [866, 867], "smo": [866, 867], "526": 866, "1693": 866, "unsur": 867, "582": 867, "class_weight_": [868, 871, 1010], "n_sv": [868, 869, 870, 871, 872, 969, 1005], "fit_status_": [868, 869, 870, 871, 872], "n_support_": [868, 869, 870, 871, 872, 969, 1005], "proba_": [868, 871, 1006], "probb_": [868, 871, 1006], "shape_fit_": [868, 869, 870, 871, 872], "n_dimensions_of_x": [868, 869, 870, 871, 872], "7798": 870, "0547": 870, "0556": 870, "0561": 870, "7332": 870, "unshift": 870, "impract": 871, "tube": [872, 969], "0044": 873, "_tree": [874, 875, 876, 877, 996, 998], "decision_tree_learn": [874, 875, 970], "olshen": [874, 875, 970], "wadsworth": [874, 875, 970], "belmont": [874, 875, 970], "cutler": [874, 875], "cc_home": [874, 875], "htm": [874, 875], "ccp_path": [874, 875, 876, 877], "get_depth": [874, 875, 876, 877, 1004], "get_n_leav": [874, 875, 876, 877, 1004], "set_predict_proba_request": [874, 876], "extra_tre": [876, 877], "8947": 876, "decision_tre": [878, 879, 880, 970], "out_fil": [878, 970], "leaves_parallel": 878, "special_charact": [878, 970], "fontnam": [878, 1008], "helvetica": [878, 880], "graphviz": [878, 970], "postscript": 878, "tpng": 878, "paint": [878, 880], "dot_data": [878, 970], "digraph": 878, "show_weight": 879, "feature_0": 879, "unrepresent": 881, "keyerror": [881, 1005], "popitem": 881, "lifo": 881, "min_val": [883, 890], "input_nam": [885, 887, 917, 1009], "accept_large_spars": [886, 887, 1003], "ensure_2d": [886, 887], "allow_nd": [886, 887], "ensure_min_sampl": [886, 887], "ensure_min_featur": [886, 887], "y_numer": 886, "bsr": [886, 887, 1008], "x_convert": 886, "y_convert": 886, "array_convert": 887, "x_check": 887, "0x": 889, "max_val": 890, "include_boundari": [890, 1009], "y_org": 891, "class_weight_vect": 891, "king": 891, "zen": 891, "sample_weight_vect": 892, "parenthes": 893, "type_filt": 895, "_bay": 895, "_weight_boost": 895, "_bag": 895, "generate_onli": [897, 1005], "checks_gener": 897, "test_check_estim": 898, "check_estimators_fit_returns_self": 898, "_estimator_html_repr": 899, "array_lik": 901, "logdet": 901, "slogdet": 901, "6375861597263857": 901, "flip_sign": 903, "svd_lapack_driv": 903, "gesdd": 903, "p5": 903, "transposit": 903, "gesvd": 903, "conquer": 903, "unitari": 903, "vh": 903, "dot_product": 904, "deweight": 905, "min_batch_s": 906, "n_pack": [906, 907], "path_length": 908, "sliceabl": 909, "3x1": 909, "methodmetadatarequest": 910, "routemappingpair": 911, "routing_info": 911, "from_str": [911, 912], "methodpair": 912, "_obj": 914, "_method": 914, "any_method": 914, "truthi": 915, "helloifeven": 915, "_x_is_even": 915, "say_hello": 915, "3565178": 919, "temp_fold": 920, "max_nbyt": 920, "1m": 920, "mmap_mod": 920, "dispatch_next": 920, "dispatch_one_batch": 920, "unprotect": 920, "prefetch": 920, "print_progress": 920, "inner_max_num_thread": 922, "backend_param": 922, "parallel_config": 922, "register_parallel_backend": [922, 1003], "dask": [922, 974, 1003], "localclust": 922, "workload": [922, 973], "register_rai": 922, "backend_nam": 922, "threadpool": 922, "effective_n_job": 922, "tracking_select": 923, "reservoir_sampl": 923, "reservoir": 923, "make_default": 924, "parallelbackendbas": 924, "resampled_arrai": 925, "3x2": [925, 928], "shuffled_arrai": 928, "last_mean": 929, "last_var": 929, "last_n": 929, "todens": [929, 930, 931, 932, 933, 934, 935], "return_sum_weight": 935, "sum_weight": 935, "1875": 935, "csr_arrai": 936, "all_or_ani": [938, 1005], "is_fit": 938, "eg": 938, "caching_dir": 939, "raise_except": 940, "array_sym": 940, "symmetric_arrai": 940, "sparse_symmetric_arrai": 940, "3x3": 940, "is_paramet": 942, "enclos": 943, "set_stat": 943, "bergstra": [943, 995, 996], "tournament": 943, "dispos": [943, 988], "n_resources_i": 943, "n_resources_0": 943, "n_candidates_i": 943, "n_candidates_0": 943, "r_0": 943, "n_resourc": 943, "983667": 943, "951958": 943, "947958": 943, "961009": 943, "955989": 943, "jamieson": 943, "talwalkar": 943, "desalvo": 943, "rostamizadeh": 943, "hyperband": 943, "bandit": 943, "multimetr": [943, 1005, 1010], "calibrated_forest": 943, "select__k": 943, "model__estimator__max_depth": 943, "imp": 944, "sophist": [944, 956], "14338": 944, "13286": 944, "15611": 944, "amelia": 944, "scientist": [944, 978], "roderick": 944, "rubin": 944, "1986": [944, 970], "ol2001": 944, "mask_missing_values_onli": 944, "mask_al": 944, "3_": 946, "2_": 946, "ws2001": 946, "unsampl": 946, "equiv": [946, 969], "elucid": 946, "frac12": 946, "rr2007": 946, "2x_iy_i": 946, "vz2010": 946, "vvz2010": 946, "prod_i": 946, "ls2010": 946, "c_0": [946, 952], "tensorsketch": 946, "pp2013": 946, "wikic": 946, "ccf2002": 946, "mercer": 946, "langl": [946, 954, 968, 969], "rangl": [946, 954, 968, 969], "y_j": [946, 954, 956, 964, 969], "obviat": 946, "dagm": 946, "vempati": 946, "jawahar": 946, "charikar": 946, "farach": 946, "colton": 946, "m2012": 947, "mu_k": 948, "cst": 948, "omega_": 948, "k0": 948, "h_l": 948, "extrema": 948, "honei": 948, "stork": 948, "dilemma": 949, "valid_scor": 949, "w_0": 950, "w_p": 950, "34545455": 950, "13636": [950, 1004], "rl2007": 950, "rifkin": 950, "lippert": 950, "2n_": 950, "softw": 950, "kim": [950, 1003, 1004, 1005, 1009], "koh": [950, 978], "lustig": 950, "boyd": 950, "gorinevski": 950, "c_p": 950, "cherkasski": 950, "yunqian": 950, "1691": 950, "1714": 950, "ell_2": 950, "equiangular": 950, "weisberg": 950, "ell_0": [950, 954], "nonzero_coef": 950, "mp": 950, "ell_": 950, "posteriori": [950, 956], "radford": 950, "neal": [950, 1008], "50000013": 950, "49999993": 950, "lambda_i": [950, 964], "srikantan": 950, "tristan": 950, "fletcher": [950, 995, 999], "nomenclatur": [950, 1001], "deliber": 950, "overparameter": 950, "ldot": [950, 954, 956, 958, 968], "w_l": 950, "min_w": 950, "iverson": 950, "hood": [950, 969], "broyden": 950, "goldfarb": 950, "shanno": 950, "shortcom": 950, "simon": [950, 978, 998, 999, 1008, 1009, 1010, 1011], "93fletcher": 950, "93goldfarb": 950, "93shanno_algorithm": 950, "noah": 950, "multirespons": 950, "statsmodel": [950, 973], "edm": 950, "agricultur": 950, "rainfal": 950, "paid": 950, "fraud": [950, 978], "cash": 950, "fraudul": [950, 978], "interrupt": 950, "drug": 950, "cure": 950, "entertain": 950, "mccullagh": 950, "nelder": 950, "boca": 950, "raton": 950, "chapman": 950, "hall": [950, 1002, 1006], "crc": 950, "31760": 950, "j\u00f8rgensen": [950, 1012], "monografia": 950, "matem\u00e1tica": 950, "2463": 950, "4337": 950, "7638": 950, "disappear": [950, 995], "photogrammetr": 950, "hypothes": 950, "paradigm": 950, "cartographi": 950, "fischler": 950, "boll": 950, "sunglok": 950, "choi": 950, "taemin": 950, "wonpil": 950, "binom": 950, "infeas": [950, 957, 959], "k\u00e4rkk\u00e4inen": 950, "\u00e4yr\u00e4m\u00f6": 950, "h_": 950, "oarc": 950, "dae": 950, "bassett": 950, "jr": 950, "econometrica": 950, "econometr": 950, "portnoi": [950, 1012], "hare": 950, "tortois": 950, "paraboloid": 950, "w_3": 950, "w_4": 950, "w_5": 950, "z_1": 950, "z_2": 950, "z_3": 950, "z_4": 950, "z_5": 950, "streamlin": 950, "gotten": [950, 964], "necess": [951, 957], "strife": 951, "mother": 951, "baloo": 951, "song": 951, "jungl": 951, "rubric": 951, "defici": [951, 968], "hlle": 951, "revolv": 951, "belkin": 951, "niyogi": 951, "1373": 951, "1396": 951, "molecul": 951, "jk": 951, "delta_": 951, "c_1": 951, "disentangl": 951, "legitim": 951, "die": 951, "noisier": 951, "5415": 951, "brief": 952, "num_featur": [952, 1010], "quantum": 952, "nutshel": 952, "36787944": 952, "89483932": 952, "58364548": 952, "51341712": 952, "83822343": 952, "7768366": 952, "facil": 953, "equi": 953, "agnost": [953, 962], "cue": 953, "came": 953, "quicker": 953, "unpract": 953, "analogi": [953, 954], "top_k_accuraci": 954, "top_k_accuracy_scor": [954, 1007, 1009], "neg_brier_scor": [954, 1005], "f1_micro": [954, 999], "f1_weight": [954, 999], "f1_sampl": 954, "roc_auc_ovr": [954, 1005], "roc_auc_ovo": [954, 1005], "roc_auc_ovr_weight": [954, 1005], "roc_auc_ovo_weight": [954, 1005], "explained_variance_scor": [954, 998, 1002, 1009], "max_error": [954, 1004], "neg_mean_squared_log_error": 954, "mean_squared_log_error": [954, 1002, 1008, 1012], "neg_root_mean_squared_log_error": 954, "neg_median_absolute_error": 954, "neg_mean_poisson_devi": 954, "neg_mean_gamma_devi": 954, "mean_gamma_devi": [954, 1005], "d2_pinball_scor": [954, 1009], "d2_tweedie_scor": [954, 1008], "invalidparametererror": 954, "_error": 954, "my_custom_loss_func": 954, "693": 954, "protocol": [954, 998, 1011, 1012], "custom_scoring_funct": 954, "custom_scorer_modul": 954, "confusion_matrix_scor": 954, "test_tp": 954, "test_fn": 954, "untru": 954, "dividend": 954, "divisor": 954, "quotient": 954, "texttt": 954, "_class": 954, "youden": 954, "informed": 954, "mosley2013": 954, "kelleher2015": 954, "guyon2015": 954, "urbanowicz2015": 954, "escalant": 954, "escalera": 954, "maci\u00e0": [954, 1008, 1010], "saeed": 954, "statnikov": 954, "viega": 954, "chalearn": 954, "automl": [954, 973], "ijcnn": 954, "moslei": 954, "ijcv": 954, "urbanowicz": 954, "exstrac": 954, "evol": 954, "intel": [954, 973], "cohen_kappa_scor": [954, 1000, 1002], "4285714285714286": 954, "manning2008": 954, "everingham2010": 954, "davis2006": 954, "flach2015": 954, "everingham": 954, "gool": 954, "winn": 954, "pascal": 954, "voc": 954, "goadrich": 954, "ob2019": 954, "y_l": 954, "_l": 954, "emptyset": 954, "f_beta": 954, "opitz": 954, "burst": 954, "ne": [954, 957], "1738": 954, "matthews_corrcoef": [954, 995, 1001, 1002, 1009], "t_k": [954, 970], "ik": 954, "ki": 954, "kk": 954, "auroc": 954, "ht2001": 954, "fc2009": 954, "pd2000": 954, "f2006": 954, "f2001": 954, "inner_clf": 954, "c\u00e8sar": 954, "hernandez": 954, "orallo": 954, "modroiu": 954, "wikipediadet2017": 954, "martin1997": 954, "navratil2007": 954, "consult": 954, "encyclopedia": 954, "utc": 954, "php": [954, 973], "detection_error_tradeoff": 954, "oldid": 954, "798982054": 954, "doddington": 954, "kamm": 954, "ordowski": 954, "przybocki": 954, "navractil": 954, "klusacek": 954, "acoust": 954, "icassp": 954, "honolulu": 954, "229": 954, "232": 954, "brier1950": 954, "p_i": [954, 957], "bella2012": 954, "flach2008": 954, "bella": 954, "hern\u00e1ndez": 954, "ram\u00edrez": 954, "quintana": 954, "khosrow": 954, "pour": 954, "hershei": 954, "edson": [954, 1000], "matsubara": 954, "dagstuhl": 954, "seminar": 954, "schloss": 954, "leibniz": 954, "zentrum": 954, "lr_": 954, "brenner": 954, "gefel": 954, "coverage_error": [954, 999, 1009], "label_ranking_average_precision_scor": [954, 999, 1003, 1004, 1010], "label_ranking_loss": [954, 1000], "grade": 954, "unalt": 954, "epsilon_i": 954, "908": 954, "925": [954, 983], "7083": 954, "rsme": 954, "log_": 954, "growth": [954, 1000, 1001], "commod": 954, "mapd": 954, "2e6": 954, "2666": 954, "y_n": [954, 958, 968], "elicit": 954, "2500": 954, "mean_pinball_loss_95p": 954, "skill": 954, "mcfadden": 954, "d2_tweedie_score_15": 954, "d2_pinball_score_08": 954, "heteroschedast": 954, "homoschedast": 954, "pear": 955, "y_dens": 955, "y_spars": 955, "advoc": 955, "elabor": 955, "financ": 955, "f3": 955, "y3": 955, "multi_target_forest": 955, "75474165": 955, "147": 955, "03498585": 955, "03812219": 955, "12165031": 955, "12914884": 955, "46081961": 955, "8948621": 955, "44373091": 955, "88978285": 955, "62745778": 955, "02891072": 955, "48204257": 955, "03260883": 955, "165": 955, "34867495": 955, "52003279": 955, "92529176": 955, "25719016": 955, "84253": 955, "25193977": 955, "16443186": 955, "12274212": 955, "170388": 955, "80956739": 955, "16979946": 955, "72667194": 955, "50941682": 955, "50447799": 955, "37967282": 955, "15699552": 955, "72850319": 955, "prod_": 956, "downarrow": 956, "spite": 956, "famous": 956, "serious": 956, "flair": 956, "2_y": 956, "mu_i": 956, "sigma_i": [956, 964], "theta_i": 956, "cnb": 956, "mnb": 956, "inventor": 956, "alpha_i": [956, 969], "cj": [956, 998, 999, 1000, 1001, 1002], "summat": [956, 958], "min_c": 956, "t_i": 956, "poorest": 956, "n_i": [956, 964], "satellit": 957, "kdt": 957, "farawai": 957, "invent": 957, "orthotrop": 957, "bentlei": 957, "1975": 957, "omohundro": 957, "characteris": 957, "unaffect": 957, "amort": 957, "cache_path": 957, "gettempdir": 957, "unsort": [957, 996, 999, 1003], "5807": 957, "nca_pip": 957, "96190476": 957, "limits_": 957, "lx": 957, "x_m": 958, "leftmost": 958, "w_1x_1": 958, "w_2x_2": 958, "w_mx_m": 958, "backpropag": 958, "b_1": 958, "b_2": 958, "z_l": 958, "dfrac": [958, 964], "nabla": 958, "deduct": 958, "rumelhart": 958, "jiquan": 958, "ngiam": 958, "chuan": 958, "yifan": 958, "carolin": 958, "suen": 958, "backprop": [958, 968], "lecun": [958, 968], "orr": [958, 968], "strai": 959, "v_ih_j": 959, "b_iv_i": 959, "c_jh_j": 959, "h_j": 959, "v_i": 959, "b_i": 959, "sum_h": 959, "fantasi": 959, "particl": 959, "thoroughli": 959, "hereund": 960, "1443": 960, "1471": 960, "outlying": 960, "h2009": 961, "g2015": 961, "absurd": 961, "m2019": 961, "bike": 961, "mc_clf": 961, "466": 961, "624": 961, "overlaid": 961, "obscur": [961, 1011], "cice": [961, 1009], "pd_": 961, "dx_c": 961, "footnot": [961, 973], "opaqu": 962, "categr": 962, "probe": 962, "204": [962, 967], "050": 962, "r_multi": 962, "081": 962, "1013": 962, "866": 962, "726": 962, "022": 962, "277": [962, 997], "i_j": 962, "min_max_scal": 964, "x_train_minmax": 964, "x_test_minmax": 964, "max_abs_scal": 964, "x_train_maxab": 964, "x_test_maxab": 964, "unintention": 964, "semidefinit": [964, 969], "scholkopf1998": 964, "1_": 964, "x_train_tran": 964, "x_test_tran": 964, "8pt": 964, "x_normal": 964, "firefox": 964, "chrome": 964, "safari": 964, "africa": 964, "dragon": 964, "lexicon": 964, "par": 964, "tau": 964, "iy_j": 964, "l_i": 964, "pargent": 964, "pfister": 964, "2671": 964, "2692": 964, "infant": 964, "kid": 964, "teen": 964, "senior": [964, 978], "citizen": 964, "retbin": 964, "x_1x_2": 964, "x_1x_3": 964, "x_2x_3": 964, "x_1x_2x_3": 964, "rung": 964, "eiler": 964, "marx": 964, "perperogl": 964, "sauerbrei": 964, "abrahamowicz": 964, "bmc": 964, "methodol": 964, "38629436": 964, "sixteenth": 966, "uai": 966, "craig": [966, 998, 1003], "boutili": 966, "mois\u00e9": 966, "goldszmidt": 966, "morgan": [966, 970], "kaufmann": [966, 970, 1007], "ella": 966, "bingham": 966, "heikki": 966, "mannila": 966, "245": [966, 997], "explic": 966, "3947": 966, "671": 966, "687": 966, "kenneth": [966, 995, 996, 1001, 1002, 1009, 1010], "12th": 966, "x_new_invers": 966, "x_new_again": 966, "delalleau": 967, "216": 967, "aistat": 967, "gatsbi": 967, "ucl": 967, "uk": [967, 988], "fullpap": 967, "xi_i": 968, "slack": 968, "t_0": 968, "l\u00e9on": [968, 1009, 1010, 1011], "_init_t": 968, "basesgd": 968, "eta_0": 968, "_t": 968, "svmsgd": 968, "pegaso": 968, "srebro": 968, "tsuruoka": 968, "tsujii": 968, "ananiad": 968, "afnlp": 968, "lin_clf": 969, "grasp": [969, 974], "sv": 969, "builtin": 969, "qp": 969, "linear_svc": 969, "gram_train": 969, "gram_test": 969, "zeta": 969, "zeta_i": 969, "textrm": [969, 986], "q_": 969, "reparameter": 969, "wu": [969, 999, 1007], "weng": 969, "1005": 969, "rong": 969, "aug": 969, "1871": 969, "1874": 969, "ofmulticlass": 969, "fitter": 970, "pariti": 970, "multiplex": 970, "export_graphviz": [970, 1000, 1002, 1008, 1010, 1011], "export_text": [970, 1004, 1011], "dumont": 970, "subwindow": 970, "dichotomis": 970, "quinlan": 970, "multiwai": 970, "proprietari": 970, "ruleset": 970, "q_m": 970, "n_m": 970, "t_m": 970, "setminu": 970, "mk": 970, "_m": 970, "ge0": 970, "widetild": 970, "tradition": 970, "t_t": 970, "eff": 970, "predictive_analyt": 970, "foot": 972, "gear": 972, "neuroimag": [972, 978], "astronom": 972, "pycon": 972, "thirti": 972, "nyc": [972, 978], "sister": 973, "sklearn_panda": 973, "sklearn_xarrai": 973, "xarrai": 973, "autoviml": 973, "tpot": 973, "featuretool": 973, "neuraxl": 973, "neat": [973, 995], "checkpoint": 973, "funki": 973, "saver": 973, "evalml": 973, "mlflow": 973, "lifecycl": [973, 974], "neptun": 973, "mlop": 973, "sacr": 973, "dtreeviz": 973, "eli5": 973, "yellowbrick": 973, "deap": 973, "evolutionari": 973, "interchang": [973, 1012], "skop": [973, 990], "jpmml": 973, "porter": 973, "transpil": 973, "javascript": 973, "m2cgen": 973, "dart": 973, "haskel": 973, "rust": 973, "treelit": 973, "micromlgen": 973, "microml": 973, "microcontrol": 973, "emlearn": 973, "c99": 973, "arima": 973, "skforecast": 973, "tslearn": 973, "hmmlearn": 973, "pomegran": 973, "crfsuit": 973, "skorch": 973, "scikera": 973, "scikit_learn": 973, "feder": 973, "privaci": 973, "homomorph": 973, "encrypt": 973, "mlxtend": 973, "lego": 973, "subsembl": 973, "lightn": 973, "sdca": 973, "adagrad": 973, "svrg": 973, "gplearn": 973, "genet": 973, "multilearn": 973, "seglearn": 973, "fastfm": 973, "kmode": 973, "sphereclust": 973, "mise": 973, "giotto": 973, "tda": 973, "pymc": 973, "censor": 973, "lightfm": 973, "openrec": 973, "gensim": 973, "nilearn": 973, "neuro": 973, "astroml": 973, "astronomi": 973, "dissemin": 973, "chines": 973, "persian": 973, "spanish": 973, "korean": 973, "disclaim": 973, "eleven": 974, "incept": 974, "scala": 974, "reinforc": 974, "era": 974, "7242": 974, "12147": 974, "5523": 974, "10733": 974, "13902": [974, 1005], "12800": 974, "12866": 974, "15550": 974, "5853": 974, "11805": 974, "15319": 974, "11977": 974, "12852": [974, 1005], "13911": [974, 1005], "amput": 974, "6284": 974, "beginn": 974, "priorit": [974, 1002], "4497": 974, "7646": 974, "6425": 974, "6424": 974, "8480": 974, "6231": 974, "8100": 974, "6599": 974, "6715": 974, "14582": 974, "3855": 974, "13227": 974, "6323": 974, "14180": [974, 1006], "9173": 974, "13146": [974, 1005], "8614": 974, "7608": 974, "5082": 974, "8243": 974, "searchgrid": 974, "6929": 974, "__array_function__": [974, 1005], "etl": [974, 978], "8370": 974, "6451": 974, "8157": 974, "7382": 974, "drift": 974, "11047": [974, 1005], "9326": 974, "slep011": 974, "1626": 974, "10463": 974, "548": 975, "release_highlight": 975, "developing_estim": 975, "id3": [976, 990], "cart": [976, 990], "printabl": 977, "indispens": 978, "stephen": [978, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1008], "simmon": 978, "vp": 978, "athena": 978, "music": 978, "bernhardsson": 978, "pariet": [978, 995], "lear": 978, "visag": 978, "fantast": 978, "startup": 978, "bitli": 978, "chartbeat": 978, "digg": [978, 1002], "poncho": 978, "gilad": 978, "lotan": 978, "chief": 978, "chat": 978, "bread": 978, "butter": 978, "chaumond": [978, 1003], "offic": 978, "ayzenshtat": [978, 1003], "undergrad": 978, "professor": 978, "hotel": 978, "destin": 978, "agent": 978, "melani": [978, 1002, 1003], "awesom": 978, "stuff": 978, "randomizedpca": [978, 995, 997, 998, 1000, 1001, 1002], "boston": 978, "mdbecker": 978, "pydata_2013": 978, "thorough": 978, "notch": 978, "production": 978, "greg": [978, 1001, 1002, 1004, 1005], "lamp": 978, "founder": 978, "prototyp": 978, "jurgen": 978, "director": 978, "commerc": 978, "inventori": 978, "bertin": 978, "mahieux": 978, "invalu": 978, "vijai": [978, 998], "surrog": 978, "traine": 978, "impress": 978, "traffic": 978, "tenur": 978, "matchmak": 978, "weitzenfeld": 978, "tweet": 978, "ferenc": 978, "huszar": 978, "shop": 978, "ourselv": 978, "jeremi": [978, 1000, 1001, 1002, 1003, 1006, 1007], "achin": 978, "ceo": 978, "marketplac": 978, "frid": [978, 998], "radar": 978, "partnership": 978, "lebourgeoi": 978, "charron": [978, 998, 999, 1006, 1007, 1008], "cornerston": 978, "sheep": 978, "featureforg": 978, "rafael": [978, 996, 997, 999, 1002], "carrascosa": [978, 999], "law": 978, "semiconductor": 978, "fab": [978, 1005, 1006], "bleed": 978, "smartphon": 978, "automobil": 978, "trent": [978, 1001], "mcconaghi": 978, "rapid": 978, "immens": 978, "thorsten": 978, "kranz": 978, "coma": 978, "dss": 978, "douetteau": 978, "b2c": 978, "retail": 978, "palladium": 978, "rammig": [978, 1001], "peer": 978, "lend": 978, "billion": 978, "gbp": 978, "grate": 978, "vlasio": [978, 1002], "vasilei": [978, 1002], "petfood": 978, "cocoa": 978, "worldwid": 978, "toolset": 978, "equip": 978, "fitzk": 978, "sr": 978, "fondat": 978, "s\u00e9bastien": [978, 1001, 1003], "conort": 978, "salmon": 979, "nine": 979, "sentiment": 980, "cli": 980, "doctest_mod": 980, "hardest": 981, "tightli": 982, "knit": 982, "x_fold": 983, "array_split": 983, "y_fold": 983, "934": 983, "train_indic": 983, "test_indic": 983, "922": 983, "96388889": 983, "92222222": 983, "9637883": 983, "93036212": 983, "96578289": 983, "92708922": 983, "96681476": 983, "96362897": 983, "93192644": 983, "0077": 983, "943": 983, "00375": 983, "lfw_": 984, "_lfw": 984, "gerhard_schroed": 984, "donald_rumsfeld": 984, "tony_blair": 984, "colin_powel": 984, "george_w_bush": 984, "282": [984, 995], "estimated_param_": 985, "iris_x": 986, "iris_i": 986, "iris_x_train": 986, "iris_y_train": 986, "iris_x_test": 986, "iris_y_test": 986, "pave": 986, "paltri": 986, "exabyt": 986, "30349955": 986, "237": 986, "63931533": 986, "53060544": 986, "73698041": 986, "13170937": 986, "81458798": 986, "84845219": 986, "60648906": 986, "51961675": 986, "09517222": 986, "585": 986, "5854": 986, "5855": 986, "occam": 986, "razor": 986, "best_alpha": [986, 995], "025118864315095794": 986, "313": 986, "508": 986, "knew": 987, "taxonomist": 987, "face_compress": 987, "x_approx": 987, "images_approx": 987, "zlabel": 987, "18565811e": 987, "19346747e": 987, "43026679e": 987, "text_analyt": 988, "skeleton": [988, 998], "sklearn_tut_workspac": 988, "cp": 988, "work_directori": 988, "tutorial_hom": 988, "fetch_data": 988, "lang": 988, "newsweed": 988, "netnew": 988, "bydat": 988, "twenty_train": 988, "holder": 988, "2257": 988, "sd345": 988, "collier": 988, "laserjet": 988, "iii": [988, 1009, 1012], "hampton": 988, "4gb": 988, "count_vect": 988, "x_train_count": 988, "35788": 988, "4690": 988, "downscal": 988, "tf_transform": 988, "x_train_tf": 988, "tfidf_transform": 988, "x_train_tfidf": 988, "na\u00efv": 988, "docs_new": 988, "love": 988, "opengl": 988, "x_new_count": 988, "x_new_tfidf": 988, "text_clf": 988, "twenty_test": 988, "docs_test": 988, "8348": 988, "9101": [988, 1003], "1502": 988, "380": 988, "tfidf__use_idf": 988, "searcher": 988, "eight": 988, "gs_clf": 988, "workspac": 988, "fear": 988, "fire": 988, "exercise_xx_script": 988, "arg1": 988, "arg2": 988, "arg3": 988, "mortem": 988, "exercise_01_language_train_model": 988, "exercise_02_senti": 988, "movie_review": 988, "txt_sentoken": 988, "cpickl": 988, "subtleti": 990, "subscrib": 993, "post1": 993, "64bit": 995, "gzip": 995, "bzip2": 995, "decompress": 995, "auc_scor": [995, 997], "kernc": [995, 1009, 1010], "led": 995, "probabilisticpca": [995, 998], "hmm": [995, 996, 997, 998, 1000], "gaussianhmm": 995, "multinomialhmm": 995, "n_gram_rang": 995, "alexi": [995, 998, 999, 1002, 1012], "mignon": [995, 998, 999, 1002], "subhodeep": [995, 996, 997], "moitra": [995, 996, 997], "yannick": [995, 997], "schwartz": [995, 997, 1009], "duckworth": 995, "benediktsson": [995, 996, 997], "marko": [995, 1004, 1005, 1011], "burjek": 995, "pinto": 995, "abraham": [995, 996, 1001, 1005], "hoenig": 995, "flyingimmidev": 995, "francoi": [995, 1008], "savard": 995, "hann": 995, "schulz": 995, "welind": 995, "companioni": 995, "brandyn": 995, "bussonni": [995, 1007], "matthia": [995, 997, 998, 1001, 1002, 1003, 1007, 1010], "pierr": [995, 1003, 1004, 1006, 1008, 1010, 1012, 1013], "astolfi": 995, "huiginn": 995, "goodman": [995, 1000], "ludwig": 995, "schwardt": 995, "hervieu": 995, "sergio": [995, 997, 998, 1007, 1010], "medina": [995, 997], "sheerman": 995, "buguen": 995, "seq_dataset": [995, 1005], "weight_vector": [995, 1005], "reuben": 995, "costin": 995, "_basehmm": 995, "neighborsregressor": 995, "gone": [995, 996], "vbgmm": [995, 999, 1001], "_pvalu": 995, "charset": [995, 997], "test_fract": 995, "train_fract": 995, "239": 995, "198": 995, "marek": [995, 1012], "fcostin": 995, "adrien": 995, "gaidon": 995, "joona": 995, "sillanp\u00e4\u00e4": 995, "mccarthi": [995, 1003], "roi": [995, 1009], "hyunjin": 995, "ibay": 995, "scheidegg": 995, "clair": 995, "revillet": 995, "conrad": [995, 996, 1010], "meng": [995, 996, 999, 1001, 1002], "xinfan": [995, 996, 999], "udi": 995, "weinsberg": 995, "janso": 995, "palafox": 995, "overwrite_": 995, "copy_": 995, "buffer_mb": 995, "sparse_encode_parallel": 995, "accident": [995, 999, 1004], "basedictionarylearn": 995, "sparsecodingmixin": 995, "fast_svd": 995, "arnold": [995, 996], "bala": [995, 998], "subrahmanyam": [995, 998], "varanasi": [995, 998], "draxu": 995, "eickenberg": [995, 997, 998, 999, 1000], "bogdan": 995, "trach": 995, "f\u00e9lix": [995, 997, 998, 999, 1003], "antoin": [995, 997, 998, 999, 1002], "fortin": [995, 997, 998, 999], "manuel": [995, 999, 1003, 1004, 1007, 1008], "caicedo": 995, "carvaj": 995, "tiziano": 995, "zito": [995, 1008], "jean": [995, 998, 999, 1000, 1001, 1002, 1008], "kossaifi": [995, 999, 1000], "thumbnail": 995, "mldata": [995, 1003], "pietro": [995, 998, 1012], "berk": 995, "macosx": 995, "xarg": 995, "bscikit": 995, "cross_val": 995, "bcross_val": 995, "lurk": 995, "l1_distanc": 995, "sum_over_featur": [995, 1010], "387": 995, "andi": [995, 1002], "amit": [995, 1009, 1010], "salvator": [995, 1009, 1010, 1012], "masecchia": 995, "schut": 995, "metaireau": [995, 998], "bryan": [995, 998, 1004, 1005, 1008], "silverthorn": 995, "minwoo": 995, "luca": [995, 1005, 1006, 1007, 1008], "wiman": 995, "schl\u00fcter": [995, 1003], "malet": 995, "miott": [995, 998], "feth": 995, "arezki": 995, "yamin": 995, "notes_neighbor": 995, "netbsd": 995, "kamel": 995, "ibn": 995, "hassen": 995, "derouich": 995, "virgilefritsch": 995, "example_gaussian_process_plot_gp_regress": 995, "example_gaussian_process_plot_gp_probabilistic_classification_after_regress": 995, "tast": 995, "10x": 995, "200x": 995, "ann": [995, 1007, 1009], "laur": 995, "fouqu": 995, "ronan": [995, 998, 1003], "amicel": [995, 998], "osendorf": [995, 996], "gmmhmm": [995, 996], "latex": 995, "mlcomp": 995, "sphx_glr_auto_examples_mlcomp_sparse_document_classif": 995, "pybrain": 995, "262": 995, "116": 995, "rokem": [995, 1001], "100x": [995, 998, 1012], "obsolet": [995, 1011], "attrselect": 995, "unmaintain": 995, "lite": 995, "filo": [995, 998], "mailhot": 995, "huard": 995, "dave": [995, 1002, 1003, 1009, 1011], "morril": 995, "schofield": 995, "travi": [995, 1003], "oliph": 995, "pearu": 995, "peterson": [995, 997], "0d": 996, "marchman": [996, 997], "hrishikesh": [996, 997], "huilgolkar": [996, 997], "bastiaan": [996, 997], "diego": [996, 997], "molla": [996, 997], "cunha": [996, 997], "almeida": [996, 997, 1008], "rolando": [996, 997], "espinoza": [996, 997], "fuent": [996, 997], "beauchamp": [996, 999], "longstand": [996, 1002], "shaun": 996, "jackman": 996, "winterman": 996, "seberg": 996, "n_atom": 996, "label_propag": 996, "learn_rat": 996, "basegradientboost": 996, "mean_square_error": 996, "gmm_": 996, "eig_tol": 996, "chunk_siz": 996, "zero_one_scor": 996, "aymer": 996, "masurel": 996, "syhw": [996, 997], "corei": [996, 1003, 1004], "lynch": [996, 1002], "shu": [996, 999, 1003], "tadej": [996, 997], "jane\u017e": [996, 997], "caje": 996, "tiago": [996, 1000], "nune": 996, "cow": 996, "anz": 996, "jauvin": 996, "jacqu": [996, 998], "kvam": [996, 998], "doug": [996, 997, 1007], "coleman": [996, 997], "dickerson": 996, "approximateident": 996, "veronda": 996, "matti": [996, 999, 1000], "lyra": [996, 999, 1000], "mikhail": [996, 997, 998, 1001, 1002, 1010, 1011], "korobov": [996, 997, 998, 1001, 1002], "alejandro": [996, 1001, 1012], "weinstein": 996, "deil": [996, 1006, 1007], "nizhibitski": 996, "coelho": [996, 998, 999, 1003], "miroslav": [996, 997, 1000], "batchkarov": [996, 1000], "pavel": [996, 1004], "bob": [996, 1002], "dengemann": 996, "emanuel": 996, "x006": 996, "justin": [997, 1003, 1007], "stochastic_gradi": [997, 998, 1004], "crombach": 997, "sheet": 997, "jaccard_similarity_scor": [997, 999, 1004], "jochen": 997, "wersd\u00f6rfer": 997, "sinayev": 997, "unpleas": 997, "novic": 997, "tini": [997, 1010, 1013], "hyperlink": 997, "luessi": 997, "philipp": [997, 998, 1001, 1010], "gervai": [997, 998], "cleverless": 997, "nosetest": 997, "compute_import": 997, "return_model": [997, 999], "itergrid": 997, "tacitli": 997, "charset_error": 997, "precompute_gram": 997, "2224": 997, "jim": 997, "holmstr\u00f6m": 997, "steven": [997, 998, 1000, 1002, 1003, 1008, 1010, 1011], "gryze": [997, 1000], "sergeyf": 997, "ben": [997, 998, 999, 1002, 1003, 1004, 1007, 1012], "speer": 997, "federico": [997, 998, 1003, 1004, 1009], "vaggi": [997, 998], "raul": [997, 998], "garreta": [997, 998], "gei": 997, "flaxman": [997, 999], "denton": 997, "cockburn": 997, "dougal": [997, 999, 1000, 1002, 1003, 1004, 1005], "sutherland": [997, 999, 1000, 1002, 1003, 1004, 1005], "ian": [997, 999, 1004, 1005, 1007, 1010, 1011], "ozsvald": 997, "johann": [997, 998, 1003, 1005, 1006, 1009], "sch\u00f6nberger": [997, 998], "szabo": [997, 998], "roland": [997, 998], "imran": [997, 998, 999], "haqu": [997, 998, 999], "karayev": 997, "jamestwebb": [997, 998], "abhijeet": 997, "kolh": 997, "velkov": 997, "fazlul": 997, "shahriar": 997, "felix": [997, 1002, 1003, 1005, 1007, 1008, 1009], "brockherd": 997, "harikrishnan": 997, "jack": [997, 1000, 1008, 1009, 1010, 1011], "hale": [997, 1009], "jakemick": 997, "mcdermott": [997, 1012], "zwinck": 997, "vredevoogd": [997, 998], "pati": 997, "ekman": [997, 1001], "shubernetskii": 997, "naoki": [997, 1007], "orii": 997, "seamu": 997, "absher": 997, "feldman": [997, 1002, 1003, 1004, 1005], "stefano": 997, "lattarini": 997, "steve": [997, 999, 1003, 1008, 1010], "koch": [997, 1003, 1004, 1006, 1007], "sturla": 997, "molden": 997, "jarosch": 997, "nikolai": [998, 999, 1000, 1001, 1003, 1004, 1009, 1011], "mayorov": [998, 999, 1000, 1001], "msvc": 998, "mingw": 998, "resourcewarn": 998, "calvin": [998, 999], "gile": [998, 999], "billing": [998, 999, 1000], "safe_realloc": 998, "bradshaw": [998, 999, 1002], "pico": [998, 999], "restor": [998, 1003, 1004, 1005, 1006, 1010], "raff": 998, "__array__": [998, 1005], "jeffrei": [998, 1001], "blackburn": [998, 1001], "danni": [998, 999, 1000], "sullivan": [998, 999, 1000], "wignal": [998, 999, 1005, 1006], "grid_tograph": 998, "gracefulli": [998, 999], "novak": 998, "tulloch": [998, 999], "wardagglomer": 998, "wardclust": 998, "mean_l1_ratio": 998, "phlypo": 998, "148": 998, "bommarito": [998, 999], "brook": [998, 999, 1007], "osborn": [998, 999], "eltermann": 998, "bwignal": 998, "ankit": [998, 1005, 1007, 1009], "agraw": [998, 1003, 1009, 1010], "carei": [998, 999, 1000, 1001, 1002], "ugurthemast": [998, 999], "schumach": [998, 999, 1000], "baptist": [998, 1006], "lagard": 998, "rajat": [998, 1005], "khanduja": 998, "pascual": 998, "ignacio": 998, "rossi": 998, "s\u00e4ger": [998, 1001], "ilambharathi": [998, 999], "kanniah": [998, 999], "sdenton4": 998, "alyssa": [998, 1002], "amo": 998, "waterland": 998, "murad": 998, "maud": 998, "karol": 998, "pysniak": 998, "cgohlk": [998, 999], "jacobsen": 998, "collin": 998, "kaushik94": 998, "erwin": 998, "marsi": 998, "csytraci": 998, "lk": 998, "laurent": [998, 999, 1002, 1003, 1010, 1011], "direr": [998, 999, 1002, 1003], "shilt": 998, "yoshiki": [998, 1001], "v\u00e1zquez": 998, "yung": [998, 1001], "siang": 998, "liau": 998, "abhishek": [998, 999, 1005, 1009, 1011, 1012], "thakur": [998, 999], "rohit": [998, 999, 1003, 1004], "sivaprasad": [998, 999], "amormachin": 998, "oscar": [998, 1002], "carlsson": 998, "nanta": 998, "nardelli": 998, "jess010": 998, "kowalski87": 998, "clegg": 998, "ralf": [998, 1001, 1002, 1010, 1011], "gommer": [998, 1001, 1002, 1010, 1011], "rupesh": 998, "srivastava": [998, 1010], "ryan": [998, 1001, 1003, 1004], "skipper": [998, 1000, 1001], "seabold": [998, 1000, 1001], "stefan": [998, 999, 1003, 1005], "walt": [998, 999, 1003], "riddel": [998, 1000, 1002], "valentin": [998, 1000, 1010, 1011], "haenel": 998, "myer": [998, 1002], "yoni": 998, "meshulam": 998, "yuri": [998, 1000], "zaytsev": 998, "adrinjalali": [998, 1007], "ai8rahim": 998, "alemagnani": 998, "chalmerlow": 998, "dziki": 998, "dro\u017cd\u017c": 998, "matrixorz": 998, "popo": 998, "samuela": 998, "boulogn": 998, "ethan": [998, 1001], "guilherm": 998, "trein": 998, "heuer": 998, "ivicajov": 998, "rouli": 998, "eduardo": [998, 1000, 1008, 1009], "ari\u00f1o": 998, "rubia": 998, "jell": 998, "zijlstra": 998, "eddi": [998, 1012], "jansson": [998, 1010], "ca\u00f1ardo": 998, "alastuei": 998, "joseph": [998, 999, 1000, 1001, 1007, 1009, 1010], "perla": 998, "ricardo": [998, 1008, 1009, 1012], "kenta": 998, "sato": 998, "medri": 998, "luce": 998, "pierron": 998, "danielweitzenfeld": 998, "thompson": [998, 1010, 1011], "brett": [998, 1000, 1001, 1002, 1003, 1010], "feurer": [998, 1003], "earl": 998, "hank": 998, "orr\u00f9": 998, "lunt": 998, "kearn": 998, "pawe\u0142": [998, 1002, 1007, 1008], "mandera": 998, "zambelli": 998, "staubda": 998, "dedupl": 999, "heilman": [999, 1000], "precompute_dist": [999, 1006], "lshforest": [999, 1002], "qiang": 999, "luo": 999, "clemen": 999, "brunner": 999, "matteo": [999, 1001, 1009], "visconti": 999, "oleggio": 999, "castello": 999, "linkage_tre": 999, "jatin": [999, 1001], "shah": [999, 1000, 1001, 1007], "saurabh": [999, 1000, 1001, 1002, 1003, 1007], "jha": [999, 1005, 1009], "blanchard": [999, 1000], "michal": [999, 1002, 1008, 1009], "romaniuk": 999, "gilmor": 999, "stapl": 999, "hedyati": 999, "antoni": [999, 1001, 1007, 1010], "parel": 999, "herv\u00e9": 999, "bredin": 999, "hasil": 999, "sharma": [999, 1001, 1003, 1004, 1006, 1007, 1009, 1012], "ducktyp": [999, 1012], "download_20newsgroup": 999, "cathi": [999, 1005], "deng": [999, 1000, 1001], "dawson": 999, "garret": 999, "hanna": [999, 1000, 1006], "wallach": [999, 1000], "yan": [999, 1007], "artem": [999, 1002, 1012], "sobolev": 999, "fit_ovr": 999, "predict_ovr": 999, "predict_proba_ovr": 999, "fit_ovo": 999, "predict_ovo": 999, "fit_ecoc": 999, "predict_ecoc": 999, "lamond": 999, "outweigh": 999, "thresh": 999, "akshai": [999, 1002, 1007], "akshayah3": 999, "aldrian": 999, "obaja": 999, "ander": [999, 1005], "aagaard": 999, "cranenburgh": 999, "walker": 999, "banilo": [999, 1000], "barmalei": [999, 1000], "benedikt": 999, "koehler": 999, "bhsu": 999, "bori": [999, 1007, 1011], "feld": [999, 1011], "borja": 999, "ayerdi": 999, "boyuan": [999, 1000, 1001], "brent": [999, 1003, 1004], "pedersen": [999, 1011], "celeo": 999, "chebee7i": 999, "stade": 999, "schuldt": 999, "christof": [999, 1000], "angermuel": [999, 1000], "daiki": 999, "aminaka": 999, "danfrankj": 999, "dmitrij": 999, "milajev": 999, "floydsoft": 999, "garrett": 999, "gpassino": 999, "gwulf": [999, 1000], "hampu": 999, "bengtsson": 999, "harri": [999, 1001, 1007, 1008], "mavroforaki": [999, 1001], "helder": [999, 1008, 1009], "herv": 999, "hugu": 999, "salamin": 999, "ism": 999, "dlabal": 999, "javier": 999, "l\u00f3pez": [999, 1003, 1004, 1007], "pe\u00f1a": 999, "jdcaballero": 999, "jeff": [999, 1001, 1008, 1009], "hammerbach": 999, "helmu": 999, "kaicheng": 999, "markham": [999, 1006, 1007], "lagacheri": 999, "leepei": 999, "loic": [999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012], "estev": [999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012], "luka": [999, 1006, 1012], "michelbach": 999, "krell": [999, 1001], "ku": [999, 1000], "mateusz": [999, 1006, 1007, 1012], "susik": 999, "mehdi": [999, 1008], "cherti": 999, "mlg": 999, "montecchio": 999, "okal": 999, "billi": 999, "\u00f3scar": [999, 1000, 1001, 1002], "n\u00e1jera": [999, 1000, 1001, 1002], "puggioni": 999, "pratap": [999, 1002, 1009], "vardhan": 999, "pvnguyen": 999, "queqichao": 999, "rahiel": 999, "kasim": 999, "mason": 999, "saket": [999, 1000, 1007], "choudhari": [999, 1000, 1009, 1011], "sam": [999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010], "nichol": 999, "sethdandridg": 999, "sinhrk": [999, 1000], "snuderl": 999, "ott": 999, "tjoa": 999, "swu": 999, "zimmer": [999, 1009], "tejesh95": 999, "terrycojon": 999, "delteil": 999, "toma": 999, "kazmar": 999, "trevorstephen": [999, 1001], "tttthomasssss": 999, "tzu": 999, "kuo": 999, "ugurcaliskan": 999, "vinayak": [999, 1000, 1001, 1003, 1004, 1010, 1011], "mehta": [999, 1000, 1001, 1003, 1004, 1005, 1006, 1010, 1011], "vjacheslav": 999, "murashkin": 999, "wadawson": 999, "x0l": 999, "6147": 1000, "presort": [1000, 1005], "5857": 1000, "mcculloh": [1000, 1001], "6258": 1000, "giorgio": [1000, 1001, 1002], "patrini": [1000, 1001, 1002], "joe": 1000, "jevnik": 1000, "labelkfold": [1000, 1001], "labelshufflesplit": [1000, 1001], "mcfee": [1000, 1001], "3659": 1000, "4738": 1000, "projectedgradientnmf": 1000, "nls_max_it": 1000, "erick": 1000, "moodi": 1000, "4025": 1000, "mean_shift": [1000, 1003], "martino": 1000, "sorbaro": 1000, "cori": 1000, "konstantin": [1000, 1001, 1002], "shmelkov": 1000, "backlink": 1000, "jaidev": 1000, "deshpand": [1000, 1001], "dictlearn": 1000, "kashif": 1000, "rasul": [1000, 1002, 1003], "galvez": 1000, "sonni": 1000, "hu": [1000, 1003, 1005], "santi": [1000, 1002, 1003], "villalba": [1000, 1003, 1007], "5186": 1000, "stolbunov": 1000, "booster": 1000, "graham": [1000, 1001], "clenaghan": [1000, 1001], "clyde": 1000, "subproblem": 1000, "forestclassifi": 1000, "ankur": [1000, 1011], "ankan": 1000, "henri": [1000, 1001, 1002, 1003, 1005, 1006, 1007, 1009, 1010], "5431": 1000, "buddha": 1000, "prakash": [1000, 1002, 1008], "5182": 1000, "lamb": [1000, 1008], "5282": 1000, "5355": 1000, "5360": 1000, "4478": 1000, "5337": 1000, "4362": 1000, "5495": 1000, "elvi": [1000, 1001, 1002], "dohmatob": [1000, 1001, 1002], "data_min": 1000, "data_max": 1000, "data_rang": 1000, "vighnesh": [1000, 1001, 1003], "birodkar": [1000, 1001, 1003], "_learntselectormixin": 1000, "gradientboost": 1000, "metatransfom": 1000, "load_lfw_pair": 1000, "wardagglom": 1000, "residues_": 1000, "indicator_matrix_": 1000, "adithya": 1000, "ganesh": [1000, 1012], "akitti": 1000, "alexei": 1000, "grigorev": 1000, "ali": [1000, 1003, 1004, 1007, 1008, 1010, 1011, 1012], "baharev": 1000, "ando": 1000, "saaba": 1000, "anish": [1000, 1001], "anthoni": [1000, 1002, 1003], "erling": 1000, "rouvinen": 1000, "rachez": [1000, 1001], "benjaminirv": 1000, "naul": [1000, 1001], "gohlk": 1000, "bourguignat": 1000, "cindi": [1000, 1008, 1012], "sridharan": 1000, "kronovet": 1000, "data1010": 1000, "dotson": 1000, "djipei": [1000, 1001], "dmitri": [1000, 1002, 1003, 1004, 1008, 1011, 1012], "spikhalskii": 1000, "donn": 1000, "duart": [1000, 1008, 1010], "caro": 1000, "larson": [1000, 1004, 1005, 1007, 1009], "fernando": [1000, 1007], "carrillo": 1000, "eckert": 1000, "zalkow": 1000, "ganiev": [1000, 1001, 1002], "ibraim": [1000, 1001, 1002], "giorgiop": 1000, "gryllo": [1000, 1003], "prokopi": [1000, 1003], "hsuan": 1000, "tien": 1000, "ishank": [1000, 1001, 1002], "gulati": [1000, 1001, 1002], "jeffrey04": [1000, 1001], "jfraj": 1000, "jiali": 1000, "mei": [1000, 1005], "kirkham": [1000, 1001, 1003], "wittenau": 1000, "loyal": 1000, "jungkook": 1000, "park": [1000, 1005, 1007, 1010, 1011], "kamalakerdadi": [1000, 1001], "kyler": 1000, "lilian": [1000, 1001, 1012], "besson": [1000, 1001], "tiao": [1000, 1001], "marktab": 1000, "spacek": 1000, "martinbpr": [1000, 1001], "martinosorb": 1000, "maryanmorel": [1000, 1001], "masafumi": 1000, "oyamada": 1000, "krump": 1000, "kolganov": 1000, "mbilling": 1000, "mhg": 1000, "omer": 1000, "katz": [1000, 1007, 1008], "pauli": 1000, "virtanen": 1000, "fischer": [1000, 1001], "pianomania": 1000, "preston": [1000, 1001, 1002], "parri": [1000, 1001, 1002], "rohan": [1000, 1001, 1003, 1004, 1008], "ramanath": 1000, "bansod": [1000, 1001, 1002], "scls19fr": 1000, "saeger": [1000, 1001, 1002], "shivan": 1000, "sornarajah": 1000, "simonpl": 1000, "sseg": 1000, "hoover": [1000, 1001, 1002, 1004], "seguin": 1000, "theodor": 1000, "vasiloudi": 1000, "freita": [1000, 1002, 1003], "pereira": [1000, 1003, 1004], "timothi": [1000, 1008], "hopper": 1000, "tokoroten": 1000, "vstolbunov": 1000, "wangz10": 1000, "yucheng": 1000, "zhauniarovich": 1000, "zac": 1000, "stewart": [1000, 1005, 1008, 1010], "zhai_pro": 1000, "zichen": 1000, "7946": 1001, "8355": 1001, "9010": 1001, "8040": 1001, "9149": 1001, "aman": [1001, 1002, 1003, 1009, 1010], "dalmia": [1001, 1002, 1003], "nate": [1001, 1002, 1008], "guerin": [1001, 1002], "lebedev": [1001, 1002], "utilis": 1001, "6497": 1001, "7724": 1001, "bing": [1001, 1002], "explained_variance_ratio": 1001, "7632": 1001, "jpfrancoia": [1001, 1002], "7676": 1001, "moham": [1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1012], "affan": 1001, "7756": 1001, "7786": 1001, "srivatsan": [1001, 1002, 1005], "7799": 1001, "7490": [1001, 1002], "6282": 1001, "7301": 1001, "6178": 1001, "7680": 1001, "n_iters_": 1001, "7553": 1001, "ekaterina": [1001, 1002, 1003, 1004, 1006, 1011], "krivich": [1001, 1002, 1004], "5874": 1001, "7593": 1001, "7594": 1001, "7660": 1001, "7750": 1001, "7732": 1001, "artsion": 1001, "lieu": [1001, 1002], "grid_scores_": [1001, 1007, 1008], "leaveonelabelout": 1001, "leaveplabelout": 1001, "plural": 1001, "mean_tim": 1001, "std_time": 1001, "3204": 1001, "5291": 1001, "sounder": 1001, "7295": 1001, "5299": 1001, "bravi": 1001, "fouchet": 1001, "calinski_harabaz_scor": [1001, 1003], "harabaz": 1001, "6586": 1001, "4294": 1001, "6667": 1001, "6954": 1001, "unveil": 1001, "yelit": 1001, "basebag": [1001, 1003], "staub": 1001, "5805": 1001, "5251": 1001, "imacul": 1001, "1000x": 1001, "arfa": 1001, "6691": 1001, "6913": 1001, "5762": 1001, "utkarsh": [1001, 1002, 1003, 1004], "upadhyai": [1001, 1002, 1003, 1004], "6846": 1001, "5929": 1001, "podshumok": [1001, 1002], "6173": 1001, "ryad": 1001, "zenin": 1001, "devashish": 1001, "asish": [1001, 1002], "dowl": 1001, "6697": 1001, "ori": 1001, "ziv": 1001, "sear": 1001, "merritt": 1001, "7325": 1001, "7239": 1001, "hong": [1001, 1003, 1007, 1008, 1009, 1011], "guangguo": 1001, "jensen": [1001, 1007], "7419": 1001, "gregori": [1001, 1005, 1006, 1007, 1008], "stupp": [1001, 1002], "bernardo": 1001, "stein": 1001, "sparse_func": [1001, 1007], "incr_mean_variance_axi": [1001, 1007], "7049": 1001, "7152": 1001, "load_boston": [1001, 1003, 1008], "7154": 1001, "manvendra": [1001, 1002], "singh": [1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012], "5540": 1001, "7248": 1001, "6764": 1001, "wenhua": 1001, "6817": 1001, "6902": 1001, "leonieborn": 1001, "5141": 1001, "4995": 1001, "5012": 1001, "_transform_select": 1001, "7194": 1001, "caio": [1001, 1003, 1005], "oliveira": [1001, 1003, 1005, 1009], "6182": 1001, "6121": 1001, "6472": 1001, "7350": 1001, "russel": [1001, 1002], "smith": [1001, 1002, 1003, 1004, 1005, 1007], "7159": 1001, "yichuan": [1001, 1002], "5460": 1001, "document_clust": 1001, "7353": 1001, "_search": 1001, "_check_param_grid": 1001, "xrang": 1001, "7323": 1001, "viacheslav": 1001, "kovalevskyi": 1001, "7101": 1001, "residual_metr": 1001, "6651": 1001, "reorgan": 1001, "7187": 1001, "7260": 1001, "sebasti\u00e1n": 1001, "vanrel": 1001, "leaveplabelsout": 1001, "6660": 1001, "unprefix": 1001, "7261": 1001, "aditya": [1001, 1003, 1004, 1005, 1009, 1010], "joshi": [1001, 1003, 1009, 1012], "loginov": 1001, "minyushkin": 1001, "rudi": 1001, "abadi": [1001, 1002], "saint": 1001, "alexfield": 1001, "alvaro": [1001, 1003], "ulloa": 1001, "alyssaq": 1001, "amlan": 1001, "kar": 1001, "giessel": 1001, "jackson": [1001, 1002, 1004], "murrai": [1001, 1002], "arafat": 1001, "archit": 1001, "asnt": 1001, "b0noi": 1001, "behzad": 1001, "tabibian": 1001, "kratzwald": 1001, "bhargav": 1001, "mangipudi": 1001, "blakeflei": 1001, "brandon": [1001, 1002, 1009, 1010], "carter": [1001, 1002, 1010], "camilo": 1001, "lamu": 1001, "carol": [1001, 1002], "Willing": [1001, 1002], "cass": 1001, "ceshin": 1001, "truong": 1001, "codevig": 1001, "shiebler": 1001, "hnyk": [1001, 1002], "elli": [1001, 1004], "nicholson": [1001, 1002, 1003], "thaler": 1001, "warshaw": 1001, "lasagna": 1001, "deborah": [1001, 1002, 1012], "definitelyuncertain": 1001, "didi": [1001, 1002, 1003, 1004], "zev": [1001, 1002, 1003, 1004], "dsquareindia": 1001, "edwinensa": 1001, "elia": 1001, "kuth": 1001, "fabio": 1001, "ticconi": 1001, "fisach": 1001, "donovan": 1001, "ghg": 1001, "giovanni": [1001, 1003], "cherubin": 1001, "lanzani": 1001, "glenn": 1001, "qian": [1001, 1006], "mohr": 1001, "govin": 1001, "vatsan": 1001, "reda": 1001, "gustav": 1001, "m\u00f6rtberg": 1001, "halwai": 1001, "harizo": [1001, 1002], "rajaona": [1001, 1002], "hashcode55": 1001, "hdmetor": 1001, "hobson": 1001, "lane": 1001, "bown": 1001, "igor": [1001, 1002, 1008], "andriushchenko": [1001, 1002], "inki": 1001, "hwang": 1001, "isaac": [1001, 1002, 1004, 1005, 1012], "sijaranamu": 1001, "iver": 1001, "jordal": 1001, "jackmartin": 1001, "fiedler": 1001, "routlei": 1001, "zike": 1001, "janna": 1001, "brettingen": 1001, "jarfa": 1001, "laska": 1001, "jblackburn": 1001, "levesqu": 1001, "hintz": 1001, "jeremynixon": 1001, "jeroen": 1001, "jessica": 1001, "jill": 1001, "j\u00eann": 1001, "vie": 1001, "jia": 1001, "jiyuan": 1001, "johannah": 1001, "boersma": 1001, "moeller": 1001, "striebel": [1001, 1002], "joncral": 1001, "jordi": 1001, "munoz": [1001, 1007], "jrfiedler": 1001, "juliankahnert": 1001, "juliathebrav": 1001, "kaichogami": 1001, "lyon": [1001, 1002], "kingjr": 1001, "kjell": 1001, "krishna": [1001, 1002, 1003, 1004, 1005, 1006, 1009, 1010], "kalyan": 1001, "krishnakalyan3": 1001, "kvle": 1001, "putnam": 1001, "ldavid": 1001, "leig": 1001, "leightonzhang": 1001, "leland": [1001, 1002, 1003, 1005, 1006, 1011], "liang": [1001, 1006, 1007, 1012], "hsieh": 1001, "lizsz": 1001, "l\u00e9oni": 1001, "born": 1001, "maniteja": [1001, 1002, 1003], "nandana": [1001, 1002, 1003], "marco": [1001, 1003, 1004, 1008, 1009, 1010, 1013], "bao": [1001, 1009], "szepieniec": 1001, "madsen": [1001, 1003], "massil": 1001, "matheu": 1001, "duboi": [1001, 1003], "moroz": 1001, "scherer": 1001, "michiaki": 1001, "ariga": 1001, "moussa": 1001, "taifi": 1001, "mrandrewandrad": 1001, "mridul": 1001, "seth": 1001, "nadya": 1001, "naoya": [1001, 1002, 1003, 1004], "kanai": [1001, 1002, 1003], "nickledav": 1001, "nico": [1001, 1008], "ningchi": 1001, "nlathia": 1001, "okbalefthand": 1001, "okhlopkov": [1001, 1002], "pano": 1001, "lourida": 1001, "strickland": 1001, "perrin": 1001, "letelli": 1001, "pestrickland": 1001, "practicalswift": 1001, "qimu": 1001, "zheng": [1001, 1002, 1007], "rachit": [1001, 1007, 1010], "kansal": 1001, "ramana": [1001, 1002], "randi": 1001, "olson": 1001, "lutz": [1001, 1005, 1008, 1012], "schucker": 1001, "jain": [1001, 1002, 1003, 1007, 1009, 1010], "ruifeng": [1001, 1002, 1007], "r\u00e9my": 1001, "l\u00e9one": 1001, "saihttam": 1001, "saiw": 1001, "yeung": 1001, "shleifer": [1001, 1002], "sartaj": 1001, "sasank": 1001, "chilamkurthi": 1001, "seal": 1001, "shagun": 1001, "sodhani": 1001, "shanmuga": 1001, "shashank": [1001, 1007], "shekhar": 1001, "shawpan": 1001, "shengxiduan": 1001, "shota": 1001, "shuckle16": 1001, "smedbergm": 1001, "srvanrel": 1001, "leriqu": [1001, 1003], "taranjeet": 1001, "themrmax": [1001, 1002], "hallock": 1001, "moreau": [1001, 1002, 1003, 1004, 1005], "tkammi": 1001, "toastedcornflak": [1001, 1002], "tomdlt": 1001, "toshihiro": [1001, 1002, 1008], "kamishima": [1001, 1002], "tracer0tong": 1001, "hauck": 1001, "vo": [1001, 1009], "varun": [1001, 1002, 1003, 1009, 1010], "jewalikar": 1001, "vikram": [1001, 1010, 1011], "villu": 1001, "ruusmann": 1001, "walter": 1001, "waterponei": [1001, 1002], "wenjian": 1001, "welch": 1001, "wyseguy7": 1001, "xyguo": [1001, 1003], "yanlend": 1001, "yen": [1001, 1002], "yenchenlin": 1001, "yoav": 1001, "zivori": 1001, "10723": [1002, 1003], "9623": 1002, "undocu": 1002, "deleteri": 1002, "9677": 1002, "ashutosh": [1002, 1003, 1005, 1007], "correlation_model": 1002, "regression_model": 1002, "belatedli": 1002, "9717": 1002, "9693": 1002, "steingold": [1002, 1003], "9711": 1002, "goncalo": [1002, 1003], "rodrigu": [1002, 1003, 1008], "9641": 1002, "bourbeau": [1002, 1003, 1004], "9865": 1002, "sachin": [1002, 1003, 1009], "kelkar": [1002, 1003, 1005], "9922": 1002, "charli": [1002, 1003, 1011], "brummitt": [1002, 1003], "9945": 1002, "9830": 1002, "9600": 1002, "kerimov": [1002, 1003], "9593": 1002, "reiichiro": [1002, 1003], "nakano": [1002, 1003], "9604": 1002, "interim": 1002, "9558": 1002, "9847": 1002, "joan": [1002, 1003, 1004, 1005], "massich": [1002, 1003, 1004, 1005], "oli": 1002, "blum": 1002, "9697": 1002, "9750": 1002, "9788": 1002, "9815": 1002, "9802": 1002, "vrishank": [1002, 1003], "bhardwaj": [1002, 1003], "nagarjuna": [1002, 1003], "nathaniel": [1002, 1003, 1005], "diegodlh": [1002, 1003], "jkleint": [1002, 1003], "oliblum90": [1002, 1003], "pasbi": [1002, 1003], "gitter": [1002, 1003], "lawson": [1002, 1003, 1004], "nielsenmarkus11": [1002, 1003], "excit": 1002, "cautiou": 1002, "min_impurity_split": 1002, "7823": [1002, 1003], "8446": 1002, "5279": 1002, "8363": 1002, "5295": 1002, "7388": 1002, "userguid": 1002, "7655": 1002, "karan": [1002, 1003, 1004], "desai": [1002, 1004, 1007, 1008, 1010, 1011], "7739": 1002, "gasquez": 1002, "8120": 1002, "neeraj": 1002, "gangwar": 1002, "7548": 1002, "9206": 1002, "7441": 1002, "6101": 1002, "8698": 1002, "7794": 1002, "herilalaina": [1002, 1003, 1005], "rakotoarison": [1002, 1003, 1005], "5036": 1002, "4939": 1002, "esuli": [1002, 1007], "n_skips_": 1002, "7914": 1002, "horrel": 1002, "8591": 1002, "hadrien": [1002, 1005], "7838": 1002, "8835": 1002, "8061": 1002, "cordier": 1002, "6288": 1002, "9145": 1002, "reddi": [1002, 1003, 1004, 1009, 1012], "chinthala": 1002, "7721": 1002, "crall": [1002, 1008], "7685": 1002, "tommi": [1002, 1003, 1004], "l\u00f6fstedt": 1002, "9277": 1002, "hongkahjun": 1002, "7089": 1002, "randomized_svd_low_rank": 1002, "9067": 1002, "6181": 1002, "wendling": 1002, "8065": 1002, "lejeun": 1002, "7567": 1002, "jay": 1002, "doepk": 1002, "7573": 1002, "romain": [1002, 1007], "brault": 1002, "5229": 1002, "7990": 1002, "8586": 1002, "7723": 1002, "8028": 1002, "booth": 1002, "8005": 1002, "7863": 1002, "7506": 1002, "5991": 1002, "8845": 1002, "8053": 1002, "8282": 1002, "8117": 1002, "9259": 1002, "8094": 1002, "8335": 1002, "poughon": 1002, "7880": 1002, "karnofski": 1002, "935": 1002, "8931": 1002, "attractador": [1002, 1003], "8002": 1002, "8549": 1002, "zerodivisionerror": [1002, 1005, 1011], "7501": 1002, "dominik": [1002, 1011], "krzeminski": 1002, "7970": 1002, "8006": 1002, "p\u00f6lsterl": [1002, 1005, 1008], "8936": 1002, "8672": 1002, "mike": 1002, "benfield": 1002, "broke": 1002, "8068": 1002, "5732": 1002, "ytrue": 1002, "ypred": 1002, "8087": 1002, "7983": 1002, "8512": 1002, "8251": 1002, "aivision2020": 1002, "5814": 1002, "7849": 1002, "jair": 1002, "montoya": 1002, "martinez": 1002, "randomizedlasso": 1002, "5359": 1002, "9302": 1002, "8160": 1002, "8224": 1002, "gedeck": 1002, "vathsala": [1002, 1003, 1004, 1005], "achar": [1002, 1003, 1004, 1005], "9022": 1002, "mehmet": [1002, 1008], "basbug": 1002, "9024": 1002, "8973": 1002, "paulo": [1002, 1008, 1010], "haddad": 1002, "unmeaning": 1002, "6573": 1002, "quazi": [1002, 1003], "marufur": 1002, "rahman": [1002, 1003, 1007], "baselabelpropag": 1002, "9239": 1002, "andr": [1002, 1009], "ambrosio": 1002, "boechat": 1002, "early_exager": 1002, "assertionerror": 1002, "8992": 1002, "7954": 1002, "foreman": 1002, "9105": 1002, "9108": 1002, "8306": 1002, "7872": 1002, "_c_step": 1002, "3367": 1002, "steward": 1002, "8768": 1002, "detomaso": 1002, "6507": 1002, "jayzed82": 1002, "6126": 1002, "7814": 1002, "7702": 1002, "9219": 1002, "7771": 1002, "ang": 1002, "randomizedlogisticregress": 1002, "8259": 1002, "mandatorili": 1002, "7565": 1002, "8181": 1002, "basesearchcv": [1002, 1003], "8344": 1002, "eriksson": 1002, "7661": 1002, "8295": 1002, "batula": 1002, "dylan": [1002, 1005], "werner": [1002, 1007], "meier": 1002, "7365": 1002, "aleksandr": 1002, "sandrovskii": 1002, "5697": 1002, "stijn": 1002, "tonk": 1002, "6250": 1002, "8093": 1002, "bull": 1002, "9507": 1002, "7356": 1002, "dingwal": 1002, "_check_target": 1002, "8377": 1002, "5211": 1002, "rhinehart": 1002, "8159": 1002, "8198": 1002, "fetch_": 1002, "7944": 1002, "7825": 1002, "kathleen": 1002, "7376": 1002, "7331": 1002, "yangarbit": 1002, "__getstate__": [1002, 1010], "obstruct": 1002, "8316": 1002, "holger": 1002, "8010": 1002, "7986": 1002, "najera": 1002, "9289": 1002, "makedir": 1002, "9284": 1002, "sebastin": [1002, 1003], "alert": 1002, "lgtm": 1002, "9278": 1002, "heli": 1002, "8449": 1002, "9078": 1002, "purport": 1002, "sergul": [1002, 1003, 1006], "aydor": [1002, 1003, 1006], "8922": 1002, "8137": 1002, "8139": 1002, "8995": 1002, "2879": 1002, "7459": 1002, "7812": 1002, "9100": 1002, "8481": 1002, "8174": 1002, "tahar": 1002, "zanouda": 1002, "8854": 1002, "8874": 1002, "7998": 1002, "jiacheng": 1002, "argpartit": 1002, "frombuffer_empti": 1002, "in1d": 1002, "rankdata": 1002, "safe_copi": 1002, "eig": 1002, "fast_dot": 1002, "pinvh": [1002, 1004], "graph_laplacian": 1002, "sparsetool": 1002, "connected_compon": 1002, "check_decision_proba_consist": 1002, "shubham": [1002, 1005], "9019": 1002, "baseensembl": [1002, 1005], "7464": 1002, "rishikesh": 1002, "taehoon": [1002, 1003], "aashil": 1002, "balakumaran": [1002, 1003], "manoharan": [1002, 1003], "petrov": [1002, 1003, 1011], "minghui": [1002, 1003], "jc": [1002, 1003], "alexandercbooth": 1002, "chkoar": 1002, "aarshai": [1002, 1003], "gilliam": 1002, "subramanyam": 1002, "clement": [1002, 1003, 1007], "joudet": [1002, 1003], "robl": 1002, "kati": 1002, "luangkot": 1002, "lacchia": 1002, "akshay0724": 1002, "omtcyfz": 1002, "rickiepark": 1002, "jbdelafoss": 1002, "vivek": [1002, 1003, 1004, 1012], "elliott": 1002, "ldirer": 1002, "sid": 1002, "kapur": 1002, "midina": 1002, "mikebenfield": 1002, "sourav": [1002, 1005], "aseem": 1002, "bansal": 1002, "aishwaryark": 1002, "howel": 1002, "dokato": 1002, "kathi": [1002, 1005], "ferria": 1002, "nikita": [1002, 1003, 1005, 1008, 1009, 1010], "basil": 1002, "beirouti": 1002, "possa": 1002, "bednar": 1002, "janin": 1002, "harper": 1002, "artsiom": 1002, "ligo": 1002, "rahn": [1002, 1005], "seanpwilliam": 1002, "julian": [1002, 1003], "kuhlmann": [1002, 1003], "aubert": 1002, "j\u00f6rn": 1002, "hee": [1002, 1005], "shivamgargsya": [1002, 1006, 1008], "kat": 1002, "hempstalk": 1002, "kaushik": [1002, 1009, 1010, 1011], "lakshmikanth": 1002, "kennedi": [1002, 1005, 1012], "yap": 1002, "kiril": [1002, 1003, 1005, 1007], "bobyrev": 1002, "imbert": [1002, 1004, 1007, 1009, 1012], "lera": 1002, "douillard": 1002, "mainak": 1002, "tobychees": [1002, 1003], "manraj": 1002, "marc": [1002, 1004, 1005, 1011], "meketon": 1002, "marcofalk": 1002, "gilch": 1002, "mehul": 1002, "ahuja": [1002, 1009, 1010], "goetz": [1002, 1003], "dezub": 1002, "baumgartn": 1002, "vibrantabhi19": 1002, "golubin": 1002, "milen": 1002, "paskov": 1002, "antonin": 1002, "carett": 1002, "morikko": 1002, "mrmjauh": 1002, "nalepa": 1002, "namiya": 1002, "narinek": [1002, 1003], "angu": [1002, 1003, 1009], "nicol": 1002, "vavrova": 1002, "nitish": 1002, "pandei": [1002, 1007], "daniil": 1002, "olegovich": 1002, "craze": 1002, "om": 1002, "parmind": 1002, "patrick": [1002, 1003, 1008, 1009, 1012], "carlson": 1002, "ganssl": 1002, "lorek": 1002, "pete": [1002, 1006, 1007], "bachant": 1002, "csizsek": 1002, "jong": 1002, "puneet": 1002, "mathur": [1002, 1004, 1005, 1010, 1011], "quentin": [1002, 1003, 1004, 1011, 1012], "hibon": 1002, "1kastner": 1002, "rameshwar": [1002, 1003], "bhaskaran": [1002, 1003], "rebecca": 1002, "bilbro": 1002, "remi": 1002, "rampin": 1002, "pratik": 1002, "agarw": [1002, 1003, 1005], "sailesh": [1002, 1003], "choyal": [1002, 1003], "samson": 1002, "samu\u00ebl": 1002, "weber": 1002, "sarah": [1002, 1004, 1007], "abhyudai": 1002, "sharan": [1002, 1003], "yalburgi": [1002, 1003], "willduan": 1002, "siddharth": [1002, 1006], "almer": 1002, "theofilo": 1002, "papapanagiot": 1002, "alison": 1002, "boucher": 1002, "folkman": 1002, "jung": [1002, 1006, 1010], "shenoi": 1002, "vilhelm": [1002, 1003], "ehrenheim": [1002, 1003], "alan": [1002, 1003, 1006, 1008, 1009], "yee": [1002, 1003], "warut": [1002, 1003], "vijitbenjaronk": [1002, 1003], "yuichi": 1002, "fujikawa": 1002, "affanv14": 1002, "andreh7": 1002, "bradi": 1002, "salz": 1002, "campustrampu": 1002, "agamemnon": [1002, 1003, 1004, 1005, 1007, 1008], "krasouli": [1002, 1003, 1004, 1005, 1007, 1008], "ditenberg": 1002, "elena": 1002, "sharova": 1002, "filipj8": [1002, 1003], "fukatani": 1002, "guiniol": 1002, "guoci": 1002, "hakaa1": [1002, 1003], "xhy": 1002, "jakirkham": [1002, 1003, 1004, 1010, 1011], "jaroslaw": 1002, "jeroko": 1002, "jmontoyam": 1002, "josephsalmon": [1002, 1003, 1004], "jschendel": [1002, 1003], "leereev": 1002, "hahn": [1002, 1003], "mathurinm": [1002, 1003, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "mehak": 1002, "sachdeva": 1002, "mlewis1729": 1002, "mlliou112": 1002, "mthorrel": [1002, 1005], "ndingwal": 1002, "nuff": 1002, "plagre": 1002, "pldtc325": 1002, "breno": [1002, 1003], "olsen": 1002, "alfano": 1002, "burn": [1002, 1003], "polmauri": 1002, "charlton": 1002, "austin": 1002, "chayant": 1002, "t15h": 1002, "chinmaya": 1002, "pancholi": 1002, "danielsen": 1002, "chung": [1002, 1003], "pravarmahajan": [1002, 1003], "dariu": [1002, 1003], "morawiec": [1002, 1003], "haberth\u00fcr": 1002, "heryanto": 1002, "kirkbi": [1002, 1003], "rashchedrin": 1002, "gertrud": 1002, "devansh": [1002, 1003], "dickson": 1002, "baxlei": 1002, "don86": 1002, "klarup": 1002, "elizabeth": [1002, 1004, 1007], "ferriss": 1002, "ellen": 1002, "egli": [1002, 1012], "chieh": [1002, 1003], "chou": [1002, 1003], "grzegorz": [1002, 1005], "szpak": [1002, 1005], "zxcvbniu": 1002, "icyblad": 1002, "ilya": 1002, "laughlin": 1002, "iv\u00e1n": [1002, 1008], "vall\u00e9": 1002, "aur\u00e9lien": [1002, 1003, 1004, 1008, 1009], "bellet": [1002, 1003, 1004], "mahapatra": 1002, "couldn": [1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "bundl": [1003, 1004], "indexerror": [1003, 1004], "11756": [1003, 1004], "14237": [1003, 1004], "schuder": [1003, 1004, 1005], "13903": [1003, 1004], "13124": [1003, 1004], "13772": [1003, 1004], "vya": [1003, 1004, 1005], "12949": 1003, "prabakaran": [1003, 1004, 1007, 1009, 1010], "kumaresshan": [1003, 1004, 1007], "12946": 1003, "tallott": 1003, "13276": 1003, "13005": 1003, "13312": 1003, "11295": 1003, "vacaliuc": [1003, 1004], "13046": 1003, "12360": 1003, "aakanksha": 1003, "13134": 1003, "sandro": [1003, 1010], "casagrand": [1003, 1004], "12881": 1003, "13165": 1003, "13221": 1003, "bertrandhaut": [1003, 1004], "raghunathan": [1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012], "dowon": [1003, 1004], "aria": [1003, 1004, 1010], "fibins": [1003, 1004], "finn": [1003, 1004], "shea": [1003, 1004], "joaak": [1003, 1004], "m\u00e9hault": [1003, 1004], "kms15": [1003, 1004], "kossori": [1003, 1004], "aruku": [1003, 1004], "lakshya": [1003, 1004, 1005], "ib\u00e1\u00f1ez": [1003, 1004, 1007], "gorelli": [1003, 1004, 1008, 1010, 1013], "marcogorelli": [1003, 1004], "mferrari3": [1003, 1004], "micka\u00ebl": [1003, 1004], "schoentgen": [1003, 1004], "pavlo": [1003, 1004], "kalli": [1003, 1004], "glaser": [1003, 1004], "pierretallott": [1003, 1004, 1005], "kapoor": [1003, 1004], "sandrocasagrand": [1003, 1004], "tashai": [1003, 1004], "vishaal": [1003, 1004], "zhuyi": [1003, 1004], "ziji": [1003, 1004], "zj": [1003, 1004], "poh": [1003, 1004], "12704": 1003, "12701": 1003, "12685": 1003, "12699": 1003, "adanhawth": [1003, 1004], "stine": [1003, 1004], "feda": [1003, 1004], "curic": [1003, 1004], "jeremiedbb": [1003, 1004, 1005], "katrin": [1003, 1004], "leinweb": [1003, 1004], "muhammad": [1003, 1004, 1008], "hassaan": [1003, 1004], "rafiqu": [1003, 1004], "paczuski": [1003, 1004], "waterburi": [1003, 1004], "shivam": [1003, 1004, 1005], "kotwalia": [1003, 1004], "12159": 1003, "12105": 1003, "11912": 1003, "12304": 1003, "12339": 1003, "12246": 1003, "10811": 1003, "feldbauer": [1003, 1004, 1005, 1006, 1009], "12441": 1003, "12517": 1003, "12234": 1003, "12165": 1003, "12388": 1003, "connor": [1003, 1008, 1012], "tann": [1003, 1008], "12393": 1003, "12122": 1003, "sharedmem": 1003, "12518": 1003, "12481": 1003, "12612": 1003, "12211": 1003, "lisa": [1003, 1004, 1006, 1007, 1009, 1010], "hannel": [1003, 1004], "melissa": 1003, "ferrari": 1003, "12451": 1003, "12171": 1003, "12365": 1003, "_encod": 1003, "12514": 1003, "12522": 1003, "12471": 1003, "marzinotto": [1003, 1004], "12317": 1003, "12338": 1003, "bauk": [1003, 1004], "12625": 1003, "sklearn_site_joblib": 1003, "12350": 1003, "12467": 1003, "unvendor": 1003, "12345": 1003, "navarret": [1003, 1004, 1005], "benjastudio": [1003, 1004], "cheuk": [1003, 1004], "connossor": [1003, 1004], "levinson": [1003, 1004], "kieker": [1003, 1004], "kataev": [1003, 1004], "dillon": [1003, 1004, 1005], "gardner": [1003, 1004], "vukolov": [1003, 1004], "caselli": [1003, 1004], "gauravahlawat": [1003, 1004], "gustavo": [1003, 1004, 1009], "haroldfox": [1003, 1004], "jacklangerman": [1003, 1004], "jacopo": [1003, 1004], "notarstefano": [1003, 1004], "janvanrijn": [1003, 1004], "jdethuren": [1003, 1004], "koen": [1003, 1004], "kushal": [1003, 1004], "chauhan": [1003, 1004, 1010, 1011], "jie": [1003, 1004, 1007], "lili": [1003, 1004], "xiong": [1003, 1004, 1009], "liam": [1003, 1004], "melsyt": [1003, 1004], "nichola": [1003, 1004, 1006], "shebanov": [1003, 1004], "oleksandr": [1003, 1004, 1005, 1006, 1009], "pavlyk": [1003, 1004, 1005, 1006], "hausamann": [1003, 1004], "pulkit": [1003, 1004, 1006], "maloo": [1003, 1004], "batista": [1003, 1004, 1008], "radostin": [1003, 1004], "stoyanov": [1003, 1004], "ramil": [1003, 1004], "nugmanov": [1003, 1004], "rebekah": [1003, 1004, 1005], "roopam": [1003, 1004], "tiernei": [1003, 1004, 1005], "sylvainlan": [1003, 1004, 1005, 1006, 1007], "takingitcasu": [1003, 1004], "tulio": [1003, 1004], "xing": [1003, 1004], "zach": [1003, 1004, 1009], "mountain": 1003, "sorri": 1003, "basemultilayerperceptron": [1003, 1005], "11924": 1003, "macbook": 1003, "9354": 1003, "9372": 1003, "astel": 1003, "10933": 1003, "hansen": 1003, "10471": 1003, "gaurav": [1003, 1004, 1005, 1006, 1007, 1009], "dhingra": [1003, 1004, 1007, 1012], "8003": 1003, "jo\u00ebl": 1003, "billaud": 1003, "10059": 1003, "braun": 1003, "9612": 1003, "jonatan": 1003, "samoocha": 1003, "8129": 1003, "margeta": 1003, "k_means_elkan": 1003, "11353": 1003, "11901": 1003, "9875": 1003, "9012": 1003, "11315": 1003, "9041": 1003, "9858": 1003, "artiem": 1003, "krinitsyn": 1003, "9908": 1003, "8617": 1003, "maskani": [1003, 1005, 1006, 1007], "filali": 1003, "konstantino": [1003, 1012], "katriopla": 1003, "10774": 1003, "catalfo": 1003, "10795": 1003, "takeshi": [1003, 1008, 1009, 1010], "yoshizawa": 1003, "11082": 1003, "sadhana": 1003, "srinivasan": [1003, 1006], "9731": 1003, "10045": 1003, "fetch_mldata": 1003, "11466": 1003, "6374": 1003, "normalize_compon": [1003, 1005], "11585": 1003, "ivan": [1003, 1004, 1007, 1010], "panico": [1003, 1007], "11420": 1003, "6452": 1003, "walli": 1003, "gauz": 1003, "9492": 1003, "8484": 1003, "9886": 1003, "underflow": [1003, 1008], "10142": 1003, "5956": 1003, "_class_mean": 1003, "_class_cov": 1003, "10898": 1003, "nanxin": 1003, "9832": 1003, "11951": 1003, "r\u00fcdiger": [1003, 1004, 1006], "busch": [1003, 1004, 1006], "9707": 1003, "wan": 1003, "7071": 1003, "9157": 1003, "11176": 1003, "forsyth": 1003, "11542": 1003, "anna": 1003, "9524": 1003, "9723": 1003, "10908": 1003, "10899": 1003, "melderi": 1003, "10101": 1003, "10\u2079": 1003, "9147": 1003, "clae": 1003, "fredrik": 1003, "mannbi": 1003, "10441": 1003, "mayur": 1003, "kulkarni": 1003, "6689": 1003, "nihar": 1003, "sheth": 1003, "11293": 1003, "9656": 1003, "greenhal": 1003, "n_features_to_comput": 1003, "9222": 1003, "hoh": 1003, "9234": 1003, "andrewww": 1003, "8075": 1003, "11211": 1003, "9484": 1003, "dalla": 1003, "card": 1003, "9043": 1003, "10112": 1003, "logistic_regression_path": [1003, 1004], "11724": 1003, "9939": 1003, "westov": 1003, "10998": 1003, "vazelh": [1003, 1004, 1005], "10071": 1003, "10153": 1003, "d\u00f6pfert": 1003, "10095": 1003, "cv_valu": 1003, "10297": 1003, "mabel": [1003, 1007], "10581": 1003, "yacin": 1003, "mazari": 1003, "10687": 1003, "10836": 1003, "aishwarya": 1003, "10397": 1003, "10992": 1003, "11327": 1003, "11905": 1003, "9837": 1003, "10593": 1003, "10610": 1003, "8554": 1003, "9775": 1003, "10827": 1003, "osa": 1003, "8066": 1003, "10587": 1003, "3840": 1003, "niederb\u00fchl": 1003, "9521": 1003, "11124": 1003, "arya": 1003, "11160": 1003, "barkhorn": 1003, "11679": 1003, "pacha": 1003, "10845": 1003, "perez": [1003, 1010], "parra": 1003, "toledano": 1003, "10999": 1003, "memoryerror": [1003, 1007], "11135": 1003, "10377": 1003, "9786": 1003, "10093": 1003, "alexryndin": 1003, "9772": 1003, "9515": 1003, "liddel": 1003, "manh": 1003, "dao": 1003, "9851": 1003, "10280": 1003, "10336": 1003, "haoran": 1003, "basemixtur": [1003, 1004], "10740": 1003, "10869": 1003, "g\u00e9ron": 1003, "9686": 1003, "11310": 1003, "_fit_and_scor": 1003, "11576": 1003, "ronsin": [1003, 1004, 1012], "_run_search": 1003, "9599": 1003, "11006": 1003, "11557": 1003, "boucaud": 1003, "iid": 1003, "9085": 1003, "10677": 1003, "zhdanovich": 1003, "10982": 1003, "juliet": 1003, "lawton": 1003, "10928": 1003, "solutu": 1003, "immensu": 1003, "9257": 1003, "8190": 1003, "alcorn": 1003, "9681": 1003, "mottl": [1003, 1004], "10005": 1003, "10346": 1003, "tobia": [1003, 1008, 1010], "10887": 1003, "11136": 1003, "4394": 1003, "9579": 1003, "kober": 1003, "9655": 1003, "bjerr": 1003, "11556": 1003, "11774": 1003, "9456": 1003, "9304": 1003, "11144": [1003, 1004], "9151": 1003, "10521": 1003, "7668": 1003, "9647": 1003, "10195": 1003, "10192": 1003, "11272": 1003, "11467": 1003, "11505": 1003, "giusepp": [1003, 1004], "costa": [1003, 1008], "10210": 1003, "11520": 1003, "11011": 1003, "11005": 1003, "11308": 1003, "11206": 1003, "11306": 1003, "10437": 1003, "lucija": 1003, "gregov": 1003, "10452": 1003, "10181": 1003, "nirvan": [1003, 1007], "anjirbag": 1003, "9399": 1003, "10913": 1003, "rodrigo": 1003, "agundez": 1003, "10458": 1003, "9816": 1003, "newei": 1003, "11042": 1003, "11235": 1003, "active_features_": 1003, "feature_indices_": 1003, "n_values_": 1003, "9726": 1003, "10829": 1003, "gilberto": 1003, "olimpio": 1003, "10655": 1003, "python2": 1003, "10412": 1003, "jiongyan": 1003, "9497": 1003, "8361": 1003, "neo": 1003, "_criterion": 1003, "classificationcriterion": 1003, "regressioncriterion": 1003, "10325": 1003, "camil": [1003, 1011, 1012], "stap": 1003, "basedecisiontre": [1003, 1004, 1007], "10536": 1003, "ohayon": [1003, 1004, 1011], "11464": 1003, "stott": 1003, "10663": 1003, "10229": 1003, "11553": 1003, "10881": 1003, "sevin": 1003, "ridge_regress": [1003, 1004, 1010], "10306": 1003, "siebert": 1003, "11741": 1003, "11166": 1003, "pypy3": 1003, "v5": 1003, "11010": 1003, "lami": 1003, "11596": 1003, "marcu": [1003, 1012], "voss": 1003, "9569": 1003, "12462": 1003, "zachariah": 1003, "10474": 1003, "10500": 1003, "9701": 1003, "9378": 1003, "check_set_param": 1003, "7738": 1003, "alvin": 1003, "chiang": 1003, "8102": 1003, "ankita": 1003, "sinha": [1003, 1012], "check_methods_subset_invari": [1003, 1009], "10428": 1003, "check_sample_weights_pandas_seri": 1003, "11558": 1003, "211217613": 1003, "absolutelynowarranti": 1003, "richi": 1003, "halford": [1003, 1010, 1011], "adelr": 1003, "adityadaflapurkar": 1003, "aidan": 1003, "fitzgerald": 1003, "aishgrt1": 1003, "akash": 1003, "shivram": 1003, "lenail": [1003, 1007], "egg": 1003, "diaz": 1003, "amanda": [1003, 1006, 1007, 1008, 1009], "aniruddha": 1003, "annaayzenshtat": 1003, "antonio": [1003, 1005], "quinonez": 1003, "anubhav": 1003, "marwaha": 1003, "arik": 1003, "pamnani": 1003, "ozga": 1003, "arunava": 1003, "geron": [1003, 1008, 1009], "ayush": [1003, 1008], "bangda": 1003, "bastian": 1003, "venthur": 1003, "benn": 1003, "koonc": 1003, "cclauss": 1003, "chadi": 1003, "kamar": 1003, "holdgraf": 1003, "hirsch": 1003, "hogan": 1003, "cnx": 1003, "cwitt": 1003, "ferreira": [1003, 1008, 1009], "gomez": [1003, 1010, 1012], "klevebr": 1003, "shwed": 1003, "mohn": [1003, 1007], "danil": 1003, "baibak": [1003, 1004], "beach": 1003, "pickup": 1003, "derek": 1003, "niederhut": [1003, 1005], "dilutedsauc": 1003, "dlovel": 1003, "dor": 1003, "dougla": 1003, "duhaim": 1003, "tuzova": 1003, "eunji": 1003, "farahsae": 1003, "raimundo": 1003, "fenx": 1003, "frankhui": 1003, "franz": 1003, "wompner": 1003, "freija": 1003, "descamp": 1003, "frsi": 1003, "calvo": [1003, 1004], "georgi": [1003, 1006], "peev": [1003, 1006], "gkevinyen5418": 1003, "vermeil": 1003, "hongh": 1003, "hossein": [1003, 1004, 1005], "pourbozorg": [1003, 1004, 1005], "hristo": [1003, 1010], "hunan": 1003, "rostomyan": 1003, "iampat": 1003, "jaewon": 1003, "malcolm": 1003, "jami": 1003, "wolosonovich": 1003, "jeb": 1003, "bearer": 1003, "jinkun": 1003, "jjabl": 1003, "johnstott": 1003, "jotasi": 1003, "julietcl": 1003, "shenk": 1003, "karl": 1003, "kasper": 1003, "primdal": 1003, "lauritzen": 1003, "ksemb": 1003, "kuai": [1003, 1004], "kyeongpil": 1003, "kang": [1003, 1005], "kye": 1003, "kyledrogo": 1003, "l\u00e9o": 1003, "liutong": 1003, "lizao": 1003, "lkjcalc": 1003, "louib": [1003, 1004], "luciano": [1003, 1010], "luke": 1003, "persola": 1003, "markiwanchyshyn": 1003, "marsgui": 1003, "gubri": [1003, 1004], "koko": [1003, 1009, 1010], "copeland": [1003, 1004], "meghann": [1003, 1005], "minh": 1003, "jamaoui": [1003, 1004, 1007], "mohammad": [1003, 1004], "shahebaz": 1003, "muayyad": 1003, "alsadi": 1003, "nabarun": 1003, "pal": [1003, 1009], "narendran": 1003, "santhanam": 1003, "suh": 1003, "eng": 1003, "av": 1003, "nicolau": 1003, "werneck": 1003, "titov": [1003, 1005, 1008, 1009], "nilesh": 1003, "kevlani": 1003, "notmatthancock": [1003, 1005], "nzw": 1003, "oren": 1003, "milman": 1003, "osaid": 1003, "rehman": 1003, "nasir": 1003, "fernand": [1003, 1009, 1010], "olden": 1003, "pierreablin": 1003, "pietruh": 1003, "pinaki": 1003, "nath": 1003, "chowdhuri": [1003, 1009], "piotr": [1003, 1004], "szyma\u0144ski": [1003, 1004], "pradeep": [1003, 1004], "raamana": [1003, 1004], "pravar": 1003, "mahajan": [1003, 1005, 1012], "qingi": 1003, "rajendra": 1003, "arora": [1003, 1010], "rankylau": 1003, "kosobrodov": 1003, "rragundez": 1003, "sagnik": 1003, "bhattacharya": 1003, "radhakrishnan": 1003, "saqib": 1003, "nizam": 1003, "shamsi": 1003, "satish": 1003, "gigant": [1003, 1005, 1010, 1011], "flennerhag": 1003, "sebastien": 1003, "shalil": 1003, "awalei": 1003, "shangwu": [1003, 1004], "sharad": 1003, "vijalapuram": 1003, "shenhanc78": 1003, "rastogi": 1003, "siftikha": 1003, "sinclert": 1003, "p\u00e9rez": 1003, "solutusimmensu": 1003, "somya": 1003, "anand": [1003, 1007], "srajan": 1003, "paliw": 1003, "sriharsha": [1003, 1004], "hatwar": [1003, 1004], "mcdowel": 1003, "syonekura": 1003, "takanori": 1003, "hayashi": 1003, "tarcusx": 1003, "theriley106": 1003, "heavei": 1003, "augspurg": [1003, 1005], "trishnendu": 1003, "ghorai": 1003, "twosigmajab": 1003, "umar": [1003, 1004], "farouk": [1003, 1004], "urvang": [1003, 1005], "patel": [1003, 1005, 1006, 1007, 1009], "vadim": [1003, 1007, 1008], "markovtsev": 1003, "vinit": 1003, "vinod": 1003, "viraj": 1003, "mavani": 1003, "navkal": 1003, "vqean3": [1003, 1004], "vufg": 1003, "wallygauz": 1003, "wdevazelh": 1003, "barnett": 1003, "rosenfeld": 1003, "yime": 1003, "ymazari": 1003, "yufeng": 1003, "griffith": [1003, 1004], "z\u00e9": 1003, "vin\u00edciu": 1003, "zhenq": 1003, "zhiqe": 1003, "12955": 1004, "klopfer": 1004, "14197": 1004, "14024": 1004, "nicolashug": 1004, "13974": 1004, "hoang": [1004, 1005], "fhoang7": 1004, "14393": 1004, "guillem": [1004, 1005, 1010], "subi": [1004, 1005, 1010], "14087": 1004, "14067": 1004, "stalei": [1004, 1005], "14092": 1004, "14053": 1004, "13947": 1004, "instanci": 1004, "13910": 1004, "13894": 1004, "myatt": [1004, 1005], "min_max_axi": 1004, "13741": 1004, "roddi": [1004, 1005], "macsween": [1004, 1005], "14309": 1004, "13864": 1004, "paresh": [1004, 1005], "13877": 1004, "_sag": 1004, "sag_solv": 1004, "3591": 1004, "13317": 1004, "13157": 1004, "13086": 1004, "cole": 1004, "13485": 1004, "assia": 1004, "benbihi": 1004, "13651": 1004, "reloc": 1004, "13486": 1004, "13427": 1004, "couvreur": [1004, 1005], "9069": 1004, "13835": 1004, "10727": 1004, "wood": 1004, "13250": 1004, "13241": 1004, "12143": 1004, "11650": 1004, "non_negative_factor": [1004, 1006, 1007, 1008, 1012], "12988": 1004, "8769": 1004, "11000": 1004, "thibault": 1004, "sejourn": 1004, "changedbehaviourwarn": 1004, "11526": 1004, "6848": 1004, "glemaitr": [1004, 1005, 1007], "11727": 1004, "13266": 1004, "13545": 1004, "sorro": 1004, "12807": 1004, "12513": 1004, "12543": 1004, "storch": 1004, "13260": 1004, "13283": 1004, "13524": 1004, "13174": 1004, "13496": 1004, "13620": 1004, "12436": 1004, "12983": 1004, "13251": 1004, "joshuakennethjon": 1004, "12715": 1004, "13164": 1004, "12834": 1004, "leastsquareserror": 1004, "update_terminal_region": 1004, "6463": 1004, "movelikeriv": 1004, "13193": 1004, "12599": 1004, "13779": 1004, "13780": 1004, "12916": 1004, "13641": 1004, "8478": 1004, "12177": 1004, "12583": 1004, "13601": 1004, "danylo": 1004, "densif": 1004, "13240": 1004, "bartosz": 1004, "13562": 1004, "11646": 1004, "11699": 1004, "make_dataset": 1004, "13336": 1004, "toleranbc": 1004, "11754": 1004, "13397": 1004, "fagan": 1004, "12174": 1004, "12972": 1004, "lucio": 1004, "fernandez": 1004, "arjona": 1004, "coeffeci": 1004, "13279": 1004, "13328": 1004, "13389": 1004, "basesgdclassifi": 1004, "13422": 1004, "cl\u00e9ment": [1004, 1008, 1010], "doumouro": 1004, "unhandl": 1004, "13363": 1004, "12821": 1004, "13350": 1004, "j\u00e9r\u00f4me": [1004, 1005, 1006, 1012], "dock\u00e8": [1004, 1005, 1006, 1012], "9907": 1004, "12232": 1004, "sangeeth": 1004, "11179": 1004, "13151": 1004, "12568": 1004, "8216": 1004, "romuald": 1004, "menuet": 1004, "12732": 1004, "12334": 1004, "13607": 1004, "12855": 1004, "pawel": 1004, "sendyk": 1004, "13628": 1004, "13447": 1004, "10580": 1004, "sandra": [1004, 1010], "mitrov": 1004, "13554": 1004, "celelibi": 1004, "13142": 1004, "11354": 1004, "12613": 1004, "12669": 1004, "torrella": [1004, 1005, 1011], "12861": 1004, "8773": 1004, "13366": 1004, "fournier": 1004, "10440": 1004, "12222": 1004, "10058": 1004, "chiotelli": 1004, "12279": 1004, "12582": 1004, "my_pipelin": 1004, "2568": 1004, "make_": 1004, "11364": 1004, "baze": 1004, "petrushev": 1004, "__len__": 1004, "13439": 1004, "12908": 1004, "drew": 1004, "13253": 1004, "12116": 1004, "12197": 1004, "12251": 1004, "float16": 1004, "13007": 1004, "raffaello": 1004, "baluyot": 1004, "13333": 1004, "13459": 1004, "hunter": 1004, "mcgushion": 1004, "8508": 1004, "6261": 1004, "vettigli": 1004, "justglow": 1004, "12300": 1004, "11458": 1004, "mitar": 1004, "milutinov": 1004, "12344": 1004, "13549": 1004, "warn_on_dtyp": 1004, "check_pairwise_arrai": 1004, "13382": 1004, "prathmesh": 1004, "saval": 1004, "11705": 1004, "11973": 1004, "our_rand_r": 1004, "madhura": [1004, 1006, 1007, 1010, 1011], "parikh": [1004, 1009, 1010, 1011, 1012], "13531": 1004, "check_fit_idempot": 1004, "alberto": [1004, 1008, 1009], "torr": 1004, "amourav": 1004, "assiaben": 1004, "micha\u0142owski": 1004, "brentfagan": 1004, "chenal": [1004, 1005, 1007], "choe": 1004, "drewmjohnston": 1004, "dror": 1004, "atariah": 1004, "esvhd": 1004, "falak": 1004, "gandenberg": 1004, "luqi": 1004, "jf": 1004, "kulbear": 1004, "leandro": [1004, 1008], "hermida": [1004, 1008], "luk": 1004, "manimaran": [1004, 1006, 1007, 1008, 1009], "gaido": 1004, "marinelm": 1004, "masstran": 1004, "roeschk": 1004, "aftab": 1004, "abdela": 1004, "ibraheem": 1004, "mwestt": 1004, "iijima": 1004, "oresti": 1004, "osman": [1004, 1010], "flanagan": [1004, 1005], "soriano": 1004, "peai": 1004, "pim": 1004, "haan": 1004, "raf": 1004, "rajdeep": 1004, "dua": 1004, "ra\u00fal": 1004, "garc\u00eda": [1004, 1005, 1010], "lekhwani": 1004, "varma": 1004, "shiyu": 1004, "duan": [1004, 1006], "smari": [1004, 1005, 1006], "st\u00e9phane": [1004, 1005, 1009, 1010], "surgan12": 1004, "thibsej": 1004, "xhan": 1004, "xinyuliu12": 1004, "zayd": 1004, "hammoudeh": 1004, "16397": [1005, 1006], "16500": 1005, "16505": 1005, "16076": 1005, "shack": [1005, 1006, 1007], "15930": 1005, "inder128": 1005, "15810": 1005, "15898": 1005, "gargsya": 1005, "15933": 1005, "15760": 1005, "15888": 1005, "15936": 1005, "dizietasahi": 1005, "15879": 1005, "bibhash": [1005, 1006], "chandra": [1005, 1006, 1009], "mitra": [1005, 1006, 1010], "15937": 1005, "blyston": [1005, 1006], "15863": 1005, "abstractmethod": 1005, "_check_x": 1005, "basenb": 1005, "15996": 1005, "brigitta": [1005, 1006, 1007, 1011], "sip\u0151cz": [1005, 1006, 1007, 1011], "15751": 1005, "tirth": [1005, 1006], "15868": 1005, "nikla": [1005, 1006], "smedemark": 1005, "marguli": 1005, "15797": 1005, "15947": 1005, "revamp": 1005, "14849": 1005, "_name_estim": 1005, "_gb": 1005, "facto": 1005, "_birch": 1005, "9250": 1005, "12927": 1005, "deprecationwarn": 1005, "hinder": 1005, "15080": 1005, "14464": 1005, "13575": 1005, "10482": 1005, "13726": 1005, "shuzh": 1005, "9288": 1005, "15057": 1005, "korolev": 1005, "15120": 1005, "7943": 1005, "12303": 1005, "14510": 1005, "14890": 1005, "miguel": 1005, "cabrera": 1005, "14544": 1005, "15304": 1005, "jaim": 1005, "ferrando": 1005, "huerta": 1005, "12068": 1005, "12145": 1005, "13609": 1005, "camila": 1005, "williamson": 1005, "15661": 1005, "15160": 1005, "14259": 1005, "14764": 1005, "14740": 1005, "st\u00e9phan": 1005, "tulken": 1005, "14623": 1005, "sarra": 1005, "habchi": 1005, "15257": 1005, "willocx": 1005, "12650": 1005, "13960": 1005, "multiouput": 1005, "14908": 1005, "martina": [1005, 1007], "vila": [1005, 1007], "15382": 1005, "14933": 1005, "15138": 1005, "cusick": 1005, "14406": 1005, "14012": 1005, "faouzi": [1005, 1006], "13769": 1005, "14194": 1005, "least_absolute_devi": [1005, 1007, 1008], "13896": 1005, "13933": 1005, "14710": 1005, "categorical_crossentropi": [1005, 1009], "14869": 1005, "14682": 1005, "hancock": 1005, "5963": 1005, "pablo": [1005, 1008, 1009], "dubou": 1005, "14287": 1005, "15375": 1005, "14305": 1005, "14114": 1005, "15084": 1005, "14294": 1005, "14907": 1005, "14602": 1005, "chawla": 1005, "vectorizermixin": 1005, "14430": 1005, "strip_accents_unicod": 1005, "15100": 1005, "gradi": 1005, "overflowerror": 1005, "15463": 1005, "norvan": 1005, "sahin": 1005, "14520": 1005, "11635": 1005, "alec": 1005, "13704": 1005, "15557": 1005, "14378": 1005, "masashi": [1005, 1007], "shibata": 1005, "ashim": 1005, "bhattarai": 1005, "15010": 1005, "skip_comput": 1005, "13773": 1005, "14356": 1005, "15393": 1005, "venkatachalam": [1005, 1006, 1007, 1008, 1009, 1012], "14646": 1005, "14028": 1005, "15429": 1005, "14706": 1005, "14108": 1005, "14170": 1005, "14296": 1005, "13618": 1005, "13995": 1005, "14458": 1005, "14591": 1005, "14864": 1005, "15044": 1005, "15086": 1005, "15038": 1005, "15082": 1005, "13213": 1005, "14647": 1005, "linalgerror": 1005, "13393": 1005, "13707": 1005, "training_data_": 1005, "14357": 1005, "14900": 1005, "socastro": [1005, 1011], "9951": 1005, "14936": 1005, "15083": 1005, "12789": 1005, "15274": 1005, "13938": 1005, "15049": 1005, "toccac": 1005, "ptocca": 1005, "13231": 1005, "dong": 1005, "13467": 1005, "14595": 1005, "14865": 1005, "l\u00e9onard": [1005, 1010], "binet": [1005, 1010], "14732": 1005, "14417": 1005, "15625": 1005, "12258": 1005, "14898": 1005, "matcovici": 1005, "14593": 1005, "reboul": 1005, "14549": 1005, "14704": 1005, "15096": 1005, "14629": 1005, "15488": 1005, "15490": 1005, "12569": 1005, "bicker": 1005, "9597": 1005, "wenbo": [1005, 1007], "zhao": [1005, 1007, 1008, 1009, 1010], "14336": 1005, "dexter": 1005, "9274": 1005, "perri": 1005, "13806": 1005, "ana\u00ebl": 1005, "beaugnon": 1005, "15119": 1005, "15053": 1005, "13290": 1005, "13987": 1005, "_pairwis": [1005, 1007], "13925": 1005, "robson": 1005, "15524": 1005, "xun": [1005, 1007], "12557": 1005, "14286": 1005, "15099": 1005, "baselibsvm": 1005, "_sparse_fit": 1005, "14894": 1005, "danna": 1005, "naser": 1005, "12887": 1005, "15028": 1005, "guan": 1005, "14381": 1005, "11232": 1005, "sievert": 1005, "10815": 1005, "14035": 1005, "14475": 1005, "14538": 1005, "14872": 1005, "upcast": [1005, 1009], "15094": 1005, "choose_check_classifiers_label": 1005, "enforce_estimator_tags_i": 1005, "mock": 1005, "mockdatafram": 1005, "checkingclassifi": 1005, "newton_cg": 1005, "random_choice_csc": 1005, "fast_dict": 1005, "parallel_help": 1005, "14902": 1005, "14971": 1005, "nep": 1005, "14702": 1005, "13013": 1005, "13875": 1005, "14680": 1005, "check_classifier_multioutput": 1005, "check_regressor_multioutput": 1005, "13392": 1005, "rok": 1005, "mihevc": 1005, "check_transformer_data_not_an_arrai": 1005, "14884": 1005, "alphonsu": 1005, "abbi": [1005, 1006], "popa": [1005, 1006], "abdur": 1005, "rahmaan": 1005, "janhang": 1005, "abenbihi": 1005, "abhinav": [1005, 1008], "sagar": 1005, "jana": 1005, "lagat": 1005, "alessandro": [1005, 1007, 1010], "surac": 1005, "siqueira": 1005, "alexgoryainov": 1005, "itk": [1005, 1006, 1007], "alexshack": [1005, 1006, 1007], "akinkunl": 1005, "kaseorg": 1005, "maldonado": [1005, 1008], "angela": [1005, 1006, 1010], "ambroz": [1005, 1006], "anisha": 1005, "keshavan": 1005, "gutierrez": 1005, "anuja": 1005, "archana": [1005, 1007], "alva": 1005, "arnaudstiegl": 1005, "arpanchowdhri": 1005, "ashimb9": 1005, "ayomid": 1005, "bamidel": 1005, "baran": 1005, "buluttekin": 1005, "barrycg": 1005, "bill": [1005, 1006], "mill": 1005, "biswadip": 1005, "mandal": 1005, "blackd0t": 1005, "barklei": 1005, "c56poni": 1005, "camilaagw": 1005, "cartman_nabana": 1005, "catajara": 1005, "cgsavard": [1005, 1006], "vesteghem": 1005, "dakota": 1005, "grusak": 1005, "datenbergwerk": 1005, "dormagen": 1005, "deeplook": 1005, "drgfreeman": 1005, "cashman": 1005, "edvardlindelof": 1005, "ndirangu": [1005, 1009], "eunseop": 1005, "jeong": 1005, "fanni": 1005, "federicopisanu": 1005, "divo": 1005, "flaviomorelli": 1005, "francidona": 1005, "franco": 1005, "luqu": 1005, "freder": 1005, "haas": 1005, "g0g0gadget": 1005, "altai": 1005, "vale": 1005, "rio": [1005, 1007, 1008, 1009], "ganevgv": 1005, "gdex1": 1005, "getgaurav2": 1005, "gideon": 1005, "sonoiya": 1005, "gpapadok": [1005, 1009], "mogavero": 1005, "h4dr1en": 1005, "hadshirt": 1005, "hailei": [1005, 1006], "nguyen": [1005, 1006, 1009, 1010], "hannah": [1005, 1007, 1009], "bruce": [1005, 1006], "macdonald": [1005, 1006], "honglu": 1005, "ingrid": 1005, "spielman": 1005, "a16": [1005, 1006], "jaehong": 1005, "jai": [1005, 1009], "jeromedock": 1005, "jesper": 1005, "dramsch": 1005, "joanna": 1005, "ortiz": [1005, 1011], "kanika": 1005, "sabharw": 1005, "katarina": [1005, 1007], "slama": [1005, 1007], "kellycarmodi": 1005, "eth": 1005, "kensuk": 1005, "arai": 1005, "kesshi": [1005, 1006], "kevad": 1005, "lofti": [1005, 1006], "winata": [1005, 1007], "sheng": 1005, "dolmatov": 1005, "kirthi": 1005, "shankar": 1005, "sivamani": 1005, "katyal": 1005, "lakshmi": 1005, "krishnan": 1005, "lalliacqua": [1005, 1008], "lbfin": 1005, "loopym": 1005, "lostcoast": 1005, "huynh": [1005, 1007], "lrjball": [1005, 1006], "roeder": 1005, "maggiecheg": [1005, 1009], "maithreyi": 1005, "venkatesh": 1005, "maltimor": 1005, "maocx": 1005, "douriez": [1005, 1006], "oywa": 1005, "aladago": 1005, "mbillingr": 1005, "clare": 1005, "micah": 1005, "miguelbarao": 1005, "mina": [1005, 1006], "naghshhnejad": [1005, 1006], "motmoti": 1005, "mschaffenroth": 1005, "natasha": 1005, "nezar": 1005, "nidhin": 1005, "pattaniyil": 1005, "nishan": 1005, "mann": 1005, "nitya": 1005, "mandyam": 1005, "novaya": [1005, 1008], "nxorabl": 1005, "oleg": 1005, "stikhin": 1005, "saleem": 1005, "panpiort8": [1005, 1007], "paula": [1005, 1006], "poorna": [1005, 1007], "pspachtholz": [1005, 1006, 1007], "qdeffens": [1005, 1008], "garg": [1005, 1006], "rapha\u00ebl": 1005, "bournhonesqu": 1005, "reza": 1005, "gharibi": 1005, "payn": 1005, "rlm": 1005, "juergen": [1005, 1010], "sanjabi": 1005, "ruchitagard": 1005, "ruth": 1005, "waithera": 1005, "sackei": 1005, "samesh": [1005, 1006], "lakhotia": [1005, 1006], "sewook": 1005, "dare": 1005, "shreya": 1005, "simoncw": 1005, "smujjiga": 1005, "s\u00f6nke": 1005, "behrend": 1005, "soumirai": 1005, "steinfurt": [1005, 1007], "cowlei": 1005, "th0rwa": [1005, 1006], "theoptip": [1005, 1006], "theotheo": 1005, "thierno": 1005, "ibrahima": 1005, "diop": 1005, "schmitt": [1005, 1006], "tilen": 1005, "kusterl": 1005, "timsaur": 1005, "tola": 1005, "topisan": 1005, "ttang131": 1005, "veerlosar": 1005, "luzgin": 1005, "jeanselm": 1005, "lostanlen": 1005, "vnherdeiro": 1005, "wendi": 1005, "willdarnel": 1005, "wolframalpha": 1005, "xcjason": 1005, "martian": 1005, "xsat": 1005, "yinglr": 1005, "yokasr": 1005, "maxin": [1005, 1006], "yulia": 1005, "zamrii": 1005, "feng": [1005, 1007, 1008, 1009], "17959": 1006, "17848": 1006, "17742": 1006, "17995": 1006, "thomaz": 1006, "santana": [1006, 1009], "dsouza": [1006, 1007, 1008, 1009], "17433": 1006, "17985": 1006, "multinomialdevi": 1006, "logloss": 1006, "17694": 1006, "rempfler": 1006, "tsutomu": 1006, "kusanagi": [1006, 1008], "17357": 1006, "18016": 1006, "x_copi": 1006, "17914": 1006, "15730": 1006, "forrest": [1006, 1007], "17309": 1006, "swier": [1006, 1007], "heer": 1006, "17812": 1006, "bruno": [1006, 1007, 1008], "idl": 1006, "17235": 1006, "17204": 1006, "changed_onli": 1006, "17205": 1006, "15005": [1006, 1008], "slep009": [1006, 1008, 1009], "estimator_samples_": 1006, "16149": 1006, "11950": 1006, "11514": 1006, "16075": 1006, "16484": 1006, "16257": 1006, "simona": [1006, 1007, 1008], "maggio": [1006, 1007, 1008], "16801": 1006, "rcwoolston": 1006, "16431": 1006, "14048": 1006, "15963": 1006, "16084": 1006, "15950": 1006, "stephani": 1006, "15980": 1006, "wconnel": 1006, "15709": 1006, "15707": 1006, "maciej": 1006, "mikulski": 1006, "16006": 1006, "rushabh": 1006, "vasani": 1006, "streamhandl": 1006, "logger": 1006, "handler": 1006, "16451": 1006, "16280": 1006, "16837": 1006, "wornbb": 1006, "15669": 1006, "chaitanya": 1006, "16224": 1006, "schwetlick": [1006, 1007], "gelavizh": 1006, "ahmadi": 1006, "marija": [1006, 1007], "vlajic": [1006, 1007], "wheeler": [1006, 1007], "16841": 1006, "16655": 1006, "16718": 1006, "miotto": 1006, "16981": 1006, "g\u00f3rski": [1006, 1007], "14696": 1006, "14516": 1006, "15582": 1006, "16069": 1006, "bail": 1006, "16183": 1006, "16182": 1006, "santhosh": 1006, "16437": 1006, "hwan": 1006, "cho": 1006, "16539": 1006, "deros": 1006, "16692": 1006, "16663": 1006, "15834": 1006, "santiago": 1006, "mola": [1006, 1012], "16103": 1006, "divyaprabha": 1006, "selectormixin": 1006, "16132": 1006, "trimeta": 1006, "15503": 1006, "15782": 1006, "plgreenliru": 1006, "16403": 1006, "narendra": [1006, 1012], "mukherje": 1006, "16508": 1006, "15864": 1006, "14300": 1006, "15436": 1006, "15652": 1006, "15179": 1006, "angelaambroz": 1006, "15773": 1006, "15655": 1006, "14848": 1006, "absgrad": 1006, "_newton_cg": 1006, "16266": 1006, "standard_coef_": 1006, "standard_intercept_": 1006, "average_coef_": 1006, "average_intercept_": 1006, "16261": 1006, "brandt": 1006, "16849": 1006, "14264": 1006, "17021": 1006, "16323": 1006, "16362": 1006, "16442": 1006, "parson": [1006, 1008], "rick": 1006, "mackenbach": 1006, "16993": 1006, "emit": 1006, "15622": 1006, "mors": 1006, "15918": 1006, "kubin": 1006, "fit_grid_point": 1006, "16401": 1006, "pratama": 1006, "sutiono": 1006, "15953": 1006, "15959": 1006, "16111": 1006, "16090": 1006, "jayaratn": [1006, 1007, 1010, 1011], "14075": 1006, "meyer89": 1006, "16117": 1006, "15785": 1006, "16245": 1006, "16585": 1006, "15762": 1006, "16466": 1006, "16632": 1006, "maura": 1006, "pintor": 1006, "battista": 1006, "biggio": 1006, "15946": 1006, "ngshya": 1006, "32767": 1006, "mersenn": 1006, "twister": 1006, "31bit": 1006, "63bit": 1006, "crude": 1006, "postprocessor": 1006, "lemir": 1006, "13511": 1006, "kennel": 1006, "11296": 1006, "15558": 1006, "15806": 1006, "16331": 1006, "batiss": 1006, "15926": 1006, "16021": 1006, "sparsearrai": 1006, "16728": 1006, "uint": 1006, "17032": 1006, "_safe_tag": 1006, "16950": 1006, "15380": 1006, "16726": 1006, "16112": 1006, "16622": 1006, "17061": 1006, "aleksandra": 1006, "kocot": 1006, "alonso": [1006, 1008], "allend": [1006, 1008], "ana": [1006, 1008], "casado": 1006, "ankit810": 1006, "arunav": 1006, "konwar": 1006, "maingret": 1006, "beier": 1006, "berni": 1006, "bharathi": 1006, "brigi": [1006, 1007], "castachick": 1006, "castor": 1006, "corri": 1006, "bartelheim": 1006, "dani\u00ebl": 1006, "gelder": 1006, "daphn": 1006, "breuer": 1006, "cort": [1006, 1007, 1010, 1011], "dbauer9": 1006, "borovikova": 1006, "eln": 1006, "emili": [1006, 1007], "leung": 1006, "evgeni": 1006, "chasnovski": 1006, "fabiana": 1006, "facundo": [1006, 1009], "ferr\u00edn": 1006, "franziska": 1006, "boenisch": 1006, "bolmier": [1006, 1007, 1011], "gholdman1": 1006, "gonthier": 1006, "hao": [1006, 1007, 1009, 1010], "chun": [1006, 1007, 1009, 1010, 1011], "haoyin": [1006, 1008, 1009], "h\u00e9lion": 1006, "bourboux": 1006, "himanshu": [1006, 1009], "hirofumi": [1006, 1007], "suzuki": [1006, 1007], "huangk10": 1006, "kemenad": 1006, "hye": 1006, "sung": 1006, "indecisiveus": [1006, 1007], "inderjeet": 1006, "jjmistri": 1006, "haitz": [1006, 1008, 1009], "legarreta": [1006, 1008, 1009], "gorro\u00f1o": [1006, 1008, 1009], "judithabk6": 1006, "jumon": 1006, "kathryn": 1006, "krishnachaitanya9": 1006, "gia": 1006, "thuan": 1006, "lkubin": 1006, "lopusz": 1006, "lucgiffon": 1006, "lucyleeow": 1006, "kemk": 1006, "magda": 1006, "zielinska": 1006, "mandi": [1006, 1009], "gu": [1006, 1007, 1009], "manish": 1006, "aradwad": 1006, "mariana": 1006, "meirel": 1006, "mariel": 1006, "mc4229": 1006, "shoemak": 1006, "micha\u0142": 1006, "s\u0142apek": 1006, "mojca": 1006, "bertoncelj": 1006, "narendramukherje": 1006, "nicolasservel": 1006, "nkish": 1006, "noa": [1006, 1012], "tamir": [1006, 1009], "olicairn": 1006, "ur": 1006, "lenz": [1006, 1010], "delanou": 1006, "qizhi": 1006, "quang": 1006, "rachelcjordan": 1006, "raduspaimoc": 1006, "riccardo": [1006, 1012], "folloni": 1006, "ritchi": 1006, "rori": 1006, "hartong": 1006, "redden": 1006, "sambhav": 1006, "kothari": 1006, "santhoshbala18": 1006, "sarat": 1006, "addep": 1006, "scibol": 1006, "kie\u00dfl": 1006, "sergiodsr": 1006, "shiki": 1006, "shubh": 1006, "chatterje": 1006, "simonamaggio": [1006, 1007, 1008], "snowhit": 1006, "stareh": 1006, "marsh": 1006, "sunmi": 1006, "yoon": 1006, "talgatomarov": 1006, "tamirlan1": 1006, "nonner": 1006, "vink": [1006, 1008], "tiphain": 1006, "viard": 1006, "titu": 1006, "vachan": 1006, "vandana": 1006, "iyer": 1006, "waelbenamara": 1006, "wderos": 1006, "wenliwyan": 1006, "windber": 1006, "19579": 1007, "19646": 1007, "stopiter": 1007, "19922": 1007, "19732": 1007, "ishikawa": [1007, 1008], "19407": 1007, "ushtanit": [1007, 1008], "19982": 1007, "19939": 1007, "halvic": 1007, "19703": 1007, "sobkevich": 1007, "villaz\u00f3n": 1007, "terraza": 1007, "fonari": [1007, 1008], "19182": 1007, "yosuk": [1007, 1008], "kobayashi": [1007, 1008], "19721": 1007, "19659": 1007, "19211": 1007, "19847": 1007, "xiaoyu": 1007, "chai": [1007, 1010, 1011], "19308": 1007, "19234": 1007, "19727": 1007, "delong": [1007, 1008], "19888": 1007, "19924": 1007, "19271": 1007, "zhaowei": 1007, "19580": 1007, "brice": [1007, 1008], "adamson": 1007, "wil": 1007, "yegelwel": 1007, "css": 1007, "19417": 1007, "19179": 1007, "19126": 1007, "17448": 1007, "17107": 1007, "17546": 1007, "17856": 1007, "17984": 1007, "riedmann": 1007, "francesco": [1007, 1010], "casalegno": 1007, "18052": 1007, "sean": [1007, 1008, 1010], "stallei": 1007, "17937": 1007, "counts_": 1007, "init_size_": 1007, "17864": 1007, "17616": 1007, "18167": 1007, "18256": 1007, "jayratn": 1007, "16392": 1007, "17095": 1007, "18746": 1007, "norm_y_weight": 1007, "x_mean_": 1007, "y_mean_": 1007, "x_std_": 1007, "y_std_": 1007, "18768": 1007, "18302": 1007, "md5": 1007, "checksum": 1007, "14800": 1007, "17396": 1007, "jiaxiang": 1007, "17491": 1007, "18280": 1007, "17499": 1007, "17610": 1007, "18525": 1007, "11064": 1007, "17414": 1007, "18149": 1007, "17679": 1007, "18528": 1007, "villanova": [1007, 1008], "14446": 1007, "18394": 1007, "16985": 1007, "garbag": 1007, "18334": 1007, "multicor": [1007, 1008], "18341": 1007, "egor": 1007, "smirnov": 1007, "18410": 1007, "17702": 1007, "18326": 1007, "changedbehaviorwarn": 1007, "nonblasdotwarn": 1007, "17804": 1007, "17367": 1007, "15427": 1007, "gangesh": 1007, "gudmalwar": 1007, "6545": 1007, "17159": 1007, "15361": 1007, "17878": 1007, "17090": 1007, "_check_bounds_param": 1007, "12638": 1007, "lannuzel": 1007, "17526": 1007, "ayako": 1007, "yagi": 1007, "17612": 1007, "srimukh": 1007, "sripada": 1007, "16493": 1007, "darshan": 1007, "15636": 1007, "18987": 1007, "16619": 1007, "16906": 1007, "roei": 1007, "kahni": 1007, "18293": 1007, "16289": 1007, "kishimoto": 1007, "18639": 1007, "13003": 1007, "s\u00e1nchez": 1007, "18545": 1007, "laurenz": 1007, "reitsam": 1007, "17578": 1007, "knox": 1007, "6624": 1007, "marijn": 1007, "vliet": 1007, "18121": 1007, "18607": 1007, "fhaselbeck": 1007, "18622": 1007, "haesun": [1007, 1010, 1011], "10493": 1007, "17997": 1007, "maisonneuv": 1007, "square_dist": 1007, "17662": 1007, "18278": 1007, "17412": 1007, "16625": 1007, "10591": 1007, "karnowski": 1007, "plot_det_curv": [1007, 1008], "18176": 1007, "10708": 1007, "15007": 1007, "hathidara": 1007, "10711": 1007, "17192": 1007, "avi": [1007, 1008], "17225": 1007, "17569": 1007, "17651": 1007, "mato": 1007, "17777": 1007, "shubhanshu": 1007, "mishra": [1007, 1008], "17826": 1007, "decal": 1007, "willard": 1007, "17935": 1007, "cari": 1007, "goltermann": 1007, "18114": 1007, "18405": 1007, "yakov": 1007, "pchelintsev": 1007, "13900": 1007, "17478": 1007, "teon": 1007, "13204": 1007, "kosic": 1007, "18527": 1007, "18343": 1007, "devi": 1007, "sandeep": 1007, "18595": 1007, "18222": 1007, "18266": 1007, "subrat": 1007, "sahu": 1007, "15126": 1007, "17987": 1007, "17233": 1007, "zolisa": 1007, "bleki": 1007, "histgradientboost": 1007, "18124": 1007, "brocchini": 1007, "armstrong": 1007, "17427": 1007, "17038": 1007, "neighborsbas": [1007, 1010], "17148": 1007, "18691": 1007, "18370": 1007, "18612": 1007, "17603": 1007, "17604": 1007, "17606": 1007, "17608": 1007, "17609": 1007, "17633": 1007, "17661": 1007, "17932": 1007, "16352": 1007, "17759": 1007, "18269": 1007, "17876": 1007, "18429": 1007, "biernat": 1007, "17317": 1007, "17406": 1007, "wick": 1007, "18406": 1007, "17833": 1007, "yashika": 1007, "18510": 1007, "18447": 1007, "16066": 1007, "18682": 1007, "16935": 1007, "17193": 1007, "16335": 1007, "14982": 1007, "11682": 1007, "patric": [1007, 1008], "15763": 1007, "16530": 1007, "shuhua": 1007, "17386": 1007, "17187": 1007, "x_idx_sort": 1007, "17614": 1007, "check_methods_sample_order_invari": [1007, 1009], "17598": 1007, "ngo": 1007, "17992": 1007, "endian": 1007, "17644": 1007, "18508": 1007, "abo7atm": 1007, "spannbauer": 1007, "deodhar": 1007, "alexandracraciun": 1007, "amy12xx": 1007, "tiwari": 1007, "choraria": 1007, "subramaniyan": 1007, "kushwaha": 1007, "atsushi": [1007, 1008], "nukariya": [1007, 1008], "aura": 1007, "autoviz": 1007, "auto_viml": 1007, "avinash": 1007, "anak": 1007, "barankaraku": 1007, "barberogaston": 1007, "beatrizsmg": 1007, "mainy": 1007, "bossan": [1007, 1009, 1010, 1011, 1013], "pedigo": [1007, 1008], "bhavika": 1007, "devnani": 1007, "biprateep": 1007, "dei": 1007, "bmaisonn": 1007, "byron": 1007, "ceethinwa": [1007, 1008], "chaitanyamog": 1007, "clmbst": 1007, "coelhudo": 1007, "crispinlogan": [1007, 1010, 1011], "cristina": 1007, "mula": 1007, "darioka": [1007, 1009, 1010], "declan": 1007, "neill": 1007, "deeksha": 1007, "madan": 1007, "fiegel": [1007, 1008, 1010], "khoo": 1007, "eschibli": 1007, "fran": [1007, 1008, 1009], "larsson": [1007, 1008, 1009], "sheni": 1007, "genvalen": [1007, 1008, 1009, 1010, 1011], "kiragu": 1007, "gesa": 1007, "stupperich": 1007, "ghislain": 1007, "vaillant": 1007, "gim": 1007, "seng": 1007, "chevali": 1007, "bohl": [1007, 1009], "schole": 1007, "hitesh": 1007, "somani": 1007, "hoda1394": 1007, "moin": 1007, "hugorichard": 1007, "isuru": 1007, "wiryadi": 1007, "j0rd1smit": 1007, "jaehyun": 1007, "ahn": 1007, "tae": 1007, "hoctor": 1007, "vese": 1007, "jeevan": 1007, "jeroenpeterbo": 1007, "jhay": 1007, "jigna": 1007, "panchal": 1007, "jim0421": 1007, "joaquin": 1007, "gorb": 1007, "moya": 1007, "kartik": 1007, "chugh": 1007, "kaylani2": 1007, "kendrick": 1007, "cetina": 1007, "kenni": 1007, "isakov": 1007, "koki": 1007, "nishihara": 1007, "krum": [1007, 1009], "arnaudov": [1007, 1009], "oldja": 1007, "guitton": 1007, "mariam": 1007, "l\u00f6ning": 1007, "scheubrein": 1007, "megasari": 1007, "mathschi": 1007, "giudic": 1007, "milan": 1007, "straka": 1007, "muoki": 1007, "caleb": 1007, "haiat": 1007, "nadia": 1007, "tahiri": 1007, "ph": 1007, "hamada": 1007, "neil": 1007, "botelho": 1007, "nil": 1007, "noelano": 1007, "oj_lappi": 1007, "oleh": [1007, 1009], "kozynet": [1007, 1009], "pankaj": 1007, "jindal": 1007, "pardeep": 1007, "parthiv": 1007, "chigurupati": 1007, "pgithub": 1007, "probinette4": 1007, "pwalchessen": 1007, "rachel": [1007, 1010], "fischoff": 1007, "toshniw": 1007, "rafei": 1007, "iqbal": 1007, "rahul": [1007, 1012], "jakhar": 1007, "rachum": 1007, "ramyanp": [1007, 1008], "rauwuckl": 1007, "ravi": [1007, 1010], "kiran": 1007, "boggavarapu": 1007, "rishi": 1007, "advani": 1007, "rithvik": 1007, "romijnd": 1007, "tavenard": 1007, "rubi": 1007, "werman": 1007, "ryotaro": 1007, "tsukada": 1007, "sadak": 1007, "khandelw": 1007, "ezebunandu": 1007, "kimbinyi": 1007, "shail": 1007, "keller": 1007, "shao": [1007, 1008, 1009], "shooter23": [1007, 1008], "soledad": 1007, "galli": 1007, "subrat93": 1007, "sunitha": 1007, "selvan": 1007, "kusanagi2": 1007, "terenc": [1007, 1008], "honl": [1007, 1008], "thij": [1007, 1010, 1011], "thomas9292": 1007, "thorben": 1007, "tijanajovanov": 1007, "timo": 1007, "tnwei": 1007, "ufmay": 1007, "umberto": 1007, "lupo": 1007, "vika": [1007, 1009], "viniciu": [1007, 1008], "fuck": [1007, 1008], "violeta": 1007, "watchtheblur": 1007, "willpeppo": 1007, "xethan": 1007, "qianm": 1007, "yue": 1007, "yutaro": 1007, "ikeda": 1007, "zacchari": 1007, "ramzi": 1007, "zoj613": 1007, "21271": 1008, "21833": 1008, "siavash": 1008, "rezazadeh": 1008, "19210": 1008, "21295": 1008, "22050": 1008, "21991": 1008, "19869": 1008, "21481": [1008, 1009], "andr\u00e9": [1008, 1009, 1011], "babino": [1008, 1009], "disconnect": 1008, "21915": 1008, "21694": 1008, "minknowski": 1008, "cdist": 1008, "21741": 1008, "21871": 1008, "21845": 1008, "21517": 1008, "21917": 1008, "21552": 1008, "escap": [1008, 1010], "21493": 1008, "21199": 1008, "20638": 1008, "bohn\u00e9": 1008, "21179": 1008, "21195": 1008, "21130": 1008, "20761": 1008, "21251": 1008, "min_idf": 1008, "max_idf": 1008, "20752": 1008, "alek": [1008, 1009], "lefebvr": [1008, 1009], "21340": 1008, "21093": 1008, "21351": 1008, "cve": 1008, "28975": 1008, "21336": 1008, "_check_sample_weight": 1008, "only_non_neg": 1008, "20880": 1008, "andr\u00e1": [1008, 1009, 1010, 1011], "if_delegate_has_method": [1008, 1009], "21145": 1008, "zahlii": 1008, "21389": 1008, "20002": 1008, "19310": 1008, "least_squar": 1008, "19733": 1008, "lad": 1008, "absolute_loss": 1008, "20165": 1008, "18444": 1008, "18010": 1008, "threadsaf": 1008, "18736": 1008, "17443": 1008, "19641": 1008, "20087": 1008, "fauchereau": 1008, "19002": 1008, "19052": 1008, "yusuk": 1008, "nagasaka": 1008, "17622": 1008, "19024": 1008, "franki": 1008, "robertson": 1008, "20117": 1008, "natchiappan": [1008, 1009], "19883": 1008, "20597": 1008, "20899": 1008, "20200": 1008, "fit_": 1008, "partial_fit_": 1008, "19297": 1008, "20560": 1008, "18393": 1008, "bittarello": 1008, "19263": 1008, "19244": 1008, "18459": 1008, "nd": [1008, 1012], "18898": 1008, "ora": 1008, "phongpanagnam": 1008, "21080": 1008, "ledoit_wolf_shrinkag": 1008, "20416": 1008, "defoi": 1008, "20583": 1008, "19365": 1008, "ateif": 1008, "sara": 1008, "19669": 1008, "importlib": 1008, "pyoxid": 1008, "20297": 1008, "20209": 1008, "19011": 1008, "20729": 1008, "12069": 1008, "19046": 1008, "surya": [1008, 1009], "18433": 1008, "19198": 1008, "19159": 1008, "beno\u00eet": 1008, "mal\u00e9zieux": 1008, "19908": 1008, "20512": 1008, "20960": 1008, "cgroup": [1008, 1009], "quota": [1008, 1009], "20477": 1008, "19799": 1008, "19564": 1008, "19836": 1008, "19162": 1008, "10096": 1008, "fenil": 1008, "suchak": 1008, "20159": 1008, "murata": [1008, 1009], "20534": 1008, "19296": 1008, "19035": 1008, "19520": 1008, "18964": 1008, "19401": 1008, "relova": 1008, "17169": 1008, "dmytro": 1008, "lituiev": 1008, "20380": 1008, "pulido": 1008, "felip": [1008, 1009, 1010, 1011], "bidu": [1008, 1009], "rutter": 1008, "20515": 1008, "carsten": 1008, "allefeld": 1008, "19568": 1008, "shyam": 1008, "20207": 1008, "tomohiro": 1008, "endo": 1008, "20161": 1008, "shuhei": 1008, "kayawari": 1008, "arka204": [1008, 1010], "20431": 1008, "pfaffel": 1008, "19428": 1008, "hamoumi": 1008, "19411": 1008, "20959": 1008, "20554": 1008, "xiangyin": 1008, "kong": 1008, "9978": 1008, "10027": 1008, "16449": 1008, "20231": 1008, "naka": 1008, "19571": 1008, "20155": 1008, "oura": [1008, 1009, 1010], "19004": 1008, "midvidi": 1008, "19055": 1008, "19172": 1008, "19426": 1008, "19499": 1008, "strubel": 1008, "19616": 1008, "19391": 1008, "19390": 1008, "linearmodel": 1008, "17743": 1008, "17772": 1008, "17746": 1008, "17785": 1008, "17750": 1008, "17769": 1008, "20683": 1008, "19491": 1008, "19472": 1008, "shortest_path": 1008, "20531": 1008, "19415": 1008, "17036": 1008, "20326": 1008, "uttam": 1008, "9843": 1008, "19643": 1008, "attard": 1008, "19784": 1008, "18328": 1008, "20312": 1008, "divyanshu": 1008, "deoli": 1008, "18543": 1008, "20552": 1008, "19278": 1008, "20030": 1008, "tingshan": 1008, "18649": 1008, "rodion": 1008, "martynov": 1008, "20619": 1008, "baseshufflesplit": 1008, "20056": 1008, "pabloduque0": 1008, "prematur": 1008, "20904": 1008, "tomasz": 1008, "jakubek": [1008, 1009], "18925": 1008, "poznik": [1008, 1009, 1010], "18842": 1008, "19473": 1008, "jiefangxuanyan": 1008, "20072": 1008, "20842": 1008, "mart\u00edn": [1008, 1009], "19631": 1008, "19790": 1008, "flynn": [1008, 1010], "18368": 1008, "19483": 1008, "20526": 1008, "19069": 1008, "19041": 1008, "20250": 1008, "20652": 1008, "19934": 1008, "gleb": [1008, 1010, 1011, 1012], "levitskii": 1008, "19734": 1008, "robinson": 1008, "19752": 1008, "zhehao": [1008, 1009, 1010, 1011, 1013], "19527": 1008, "19788": 1008, "19356": 1008, "makoeppel": 1008, "19879": 1008, "19906": 1008, "20727": 1008, "20961": 1008, "n_input_features_": 1008, "20240": 1008, "20843": 1008, "18959": 1008, "wstate": 1008, "20023": 1008, "19336": 1008, "20272": 1008, "19459": 1008, "bezuidenhout": 1008, "clifford": 1008, "akai": 1008, "nettei": 1008, "19948": 1008, "20657": 1008, "19766": 1008, "20385": 1008, "_weighted_percentil": 1008, "huberlossfunct": 1008, "20528": 1008, "_safe_index": [1008, 1012], "20673": 1008, "is_scalar_nan": 1008, "assert_warn": 1008, "assert_warns_messag": 1008, "20521": 1008, "abdulelah": 1008, "mesfer": 1008, "adrian": [1008, 1009, 1010], "garcia": 1008, "badaracco": 1008, "sad\u0142ocha": 1008, "rubial": 1008, "alessia": 1008, "marcolini": 1008, "alihan": 1008, "zihna": 1008, "alin": 1008, "amol": 1008, "deshmukh": 1008, "pessoa": 1008, "anavelyz": 1008, "ashish": [1008, 1011], "ashvith": 1008, "shetti": 1008, "baam": [1008, 1009], "baptbillard": 1008, "bmalezieux": 1008, "bumblebe": 1008, "caherrera": 1008, "meli": [1008, 1009, 1010], "chrissobel": 1008, "yeh": 1008, "chuliang": 1008, "cliffordemmanuel": 1008, "conner": 1008, "shen": 1008, "dimitri": [1008, 1009, 1010, 1011, 1012], "papadopoulo": [1008, 1009, 1010, 1011, 1012], "orfano": [1008, 1009, 1010, 1011, 1012], "dmallia17": 1008, "ds_ana": 1008, "jardim": 1008, "edwinwenink": 1008, "eleni": 1008, "markou": 1008, "ericellwang": [1008, 1009], "ezri": 1008, "mudd": 1008, "fato": 1008, "morina": 1008, "hafner": 1008, "flyingdutchman23": 1008, "uwha": [1008, 1009], "bereng": 1008, "frederick": 1008, "frellwan": 1008, "vicent": [1008, 1009, 1010], "geroldcsend": 1008, "glen": 1008, "gl\u00f2ria": [1008, 1010], "mu\u00f1oz": [1008, 1010], "gregorystrubel": 1008, "groceryheist": 1008, "guiweb": 1008, "haidar": [1008, 1009], "almubarak": [1008, 1009], "moritz": [1008, 1010], "g\u00fcnther": [1008, 1012], "mirza": 1008, "harutaka": 1008, "kawamura": 1008, "hassan": 1008, "alsawadi": 1008, "geovan": [1008, 1009], "gome": [1008, 1009], "lima": [1008, 1009], "ilic": 1008, "ikko": 1008, "ashimin": 1008, "isaack": 1008, "mungui": 1008, "ishaan": 1008, "bhat": [1008, 1010, 1011, 1012], "ishan": [1008, 1009], "iwhalv": 1008, "preiss": 1008, "budarz": 1008, "jannik": 1008, "jennif": 1008, "jianzhu": 1008, "guo": 1008, "jnboehm": 1008, "johanwork": 1008, "paton": 1008, "n\u00e1pole": 1008, "julio": 1008, "julyrashchenko": 1008, "jvm": 1008, "kadatatlu": 1008, "kishor": 1008, "karen": 1008, "palacio": 1008, "kmatt10": 1008, "kobaski": 1008, "kot271828": 1008, "kunj": 1008, "kurumeyuta": 1008, "kxytim": 1008, "lacrosse91": 1008, "laveen": 1008, "bagai": 1008, "leonardo": 1008, "rocco": [1008, 1009, 1010], "uieda": 1008, "leopoldo": 1008, "corona": 1008, "lsturtew": 1008, "lucca": 1008, "quadro": 1008, "ly648499246": 1008, "mabu": 1008, "manaileng": 1008, "mariangela": 1008, "marielaraj": 1008, "hirzel": 1008, "mateo": 1008, "nore\u00f1a": 1008, "mathi": 1008, "batoul": 1008, "calcot": 1008, "prieur": 1008, "\u00f6zer": 1008, "miao": 1008, "cai": 1008, "karbownik": 1008, "michalkrawczyk": [1008, 1009], "mitzi": [1008, 1009], "mlondschien": 1008, "haseeb": [1008, 1009], "khoual": 1008, "jarir": 1008, "kanji": 1008, "nadim": 1008, "kawwa": 1008, "nanshan": 1008, "naozin555": 1008, "fultz": 1008, "nic": 1008, "annau": 1008, "nigel": 1008, "bosch": 1008, "nodar": 1008, "okroshiashvili": 1008, "ogbonna": 1008, "chibuik": 1008, "ogordon100": 1008, "phongpanangam": 1008, "duqu": 1008, "ibieta": 1008, "jimenez": [1008, 1009], "lacouth": 1008, "olszewski": 1008, "dye": 1008, "pierreattard": [1008, 1009], "yve": 1008, "borgn": 1008, "pranayanchuri": 1008, "princ": 1008, "canuma": 1008, "putschblo": 1008, "ranjanikrishnan": 1008, "rene": 1008, "corneil": 1008, "ricardojnf": 1008, "richardscottoz": 1008, "sandi": 1008, "khosasi": 1008, "benhur": 1008, "flore": 1008, "shinehid": 1008, "shinnar": 1008, "tootoonian": 1008, "solosil": 1008, "kolawol": 1008, "stagg": 1008, "swpeas": 1008, "tfifi": 1008, "caswel": [1008, 1011], "timotheemathieu": 1008, "wolodzko": 1008, "tliu68": 1008, "uhmann": 1008, "tom1092": 1008, "tom\u00e1": [1008, 1009], "moreyra": 1008, "tommaso": 1008, "noto": 1008, "tsuga": 1008, "vang": 1008, "gkiasta": 1008, "vil\u00e9m": 1008, "zouhar": 1008, "vlasovet": 1008, "waijean": 1008, "whidou": 1008, "xiaoyuchai": 1008, "yasmeen": 1008, "alsaedi": 1008, "yoch": 1008, "yusukenagasaka": 1008, "yzhenman": 1008, "zeyusun": 1008, "zhaoweiwang": 1008, "msvcp140": 1009, "dll": 1009, "24631": 1009, "24446": 1009, "10805": 1009, "mathia": 1009, "23471": 1009, "24015": 1009, "23990": 1009, "23833": 1009, "24017": 1009, "sorski": [1009, 1010], "23395": 1009, "23636": 1009, "22063": 1009, "22059": 1009, "kurz": [1009, 1010], "23608": 1009, "23548": 1009, "24087": 1009, "23273": 1009, "23194": 1009, "23198": 1009, "lise": 1009, "kleiber": 1009, "23358": 1009, "23264": 1009, "feature_names_in": 1009, "23299": 1009, "23214": 1009, "collot": [1009, 1010], "baak": 1009, "23370": 1009, "23410": 1009, "compute_sample_weight": 1009, "23115": 1009, "22868": 1009, "multiindex": 1009, "22410": 1009, "23271": 1009, "21987": 1009, "22064": 1009, "22065": 1009, "22288": 1009, "22320": 1009, "21219": 1009, "21542": 1009, "23098": 1009, "22318": 1009, "23036": 1009, "binary_crossentropi": 1009, "23040": 1009, "23046": 1009, "22856": 1009, "21032": 1009, "18170": 1009, "21038": 1009, "14975": 1009, "22526": 1009, "23095": 1009, "silk": 1009, "20031": 1009, "krawczyk": 1009, "21148": 1009, "22255": 1009, "21881": 1009, "vassard": 1009, "22217": 1009, "21735": 1009, "22154": 1009, "22537": 1009, "iofal": 1009, "arisa": [1009, 1010], "22775": 1009, "22913": 1009, "randomgeek78": 1009, "22493": 1009, "19680": 1009, "thibaut": 1009, "22119": 1009, "22016": 1009, "22015": 1009, "19747": 1009, "attalla": 1009, "22498": 1009, "21482": 1009, "pujalt": 1009, "22412": 1009, "16605": 1009, "21901": 1009, "rileran": 1009, "23113": 1009, "ilion": 1009, "beyst": 1009, "21425": 1009, "stefanini": 1009, "16948": 1009, "patricio": 1009, "cerda": 1009, "22002": 1009, "21109": 1009, "iter_offset": 1009, "return_inner_stat": 1009, "inner_stat": 1009, "inner_stats_": 1009, "iter_offset_": 1009, "18975": 1009, "22111": 1009, "22181": 1009, "21334": 1009, "21705": 1009, "stanlei": [1009, 1010, 1011], "21432": 1009, "22806": 1009, "jihan": 1009, "benni": 1009, "21713": 1009, "haya": 1009, "21567": 1009, "maggi": 1009, "chege": 1009, "22300": 1009, "15948": 1009, "sysuresh": 1009, "22553": 1009, "19490": 1009, "ferrin": 1009, "22120": 1009, "15984": 1009, "okon": 1009, "22696": 1009, "22486": 1009, "21800": 1009, "20567": 1009, "22159": 1009, "20811": 1009, "21814": 1009, "16748": 1009, "siqi": 1009, "22215": 1009, "23047": 1009, "22695": 1009, "22697": 1009, "21762": 1009, "22106": 1009, "gijsber": 1009, "21632": 1009, "genesi": [1009, 1011], "valencia": [1009, 1011], "22566": 1009, "22908": 1009, "23097": 1009, "23079": 1009, "20803": 1009, "23023": 1009, "21573": 1009, "21832": 1009, "20145": 1009, "22356": 1009, "18482": 1009, "gameiro": 1009, "kharsa": 1009, "22370": 1009, "17819": 1009, "22235": 1009, "21837": 1009, "wagner": 1009, "22199": 1009, "aidar": 1009, "shakerimoff": 1009, "tenavi": 1009, "nakamura": 1009, "22223": 1009, "marcom": 1009, "21617": 1009, "ritter": [1009, 1010], "21114": 1009, "21078": 1009, "21448": 1009, "16061": 1009, "19438": 1009, "18310": 1009, "elfner": 1009, "22249": 1009, "22137": 1009, "22694": 1009, "22808": 1009, "22950": 1009, "21086": 1009, "22206": 1009, "21808": 1009, "22548": 1009, "22062": 1009, "trujillo": [1009, 1010], "22148": 1009, "22240": 1009, "9087": 1009, "22525": 1009, "19689": 1009, "21606": 1009, "21341": 1009, "preservs": 1009, "21767": 1009, "21724": 1009, "yar": 1009, "khine": 1009, "phyo": 1009, "21998": 1009, "22891": 1009, "22899": 1009, "23256": 1009, "19794": 1009, "21534": 1009, "22254": 1009, "21805": 1009, "jeann": 1009, "dionisi": 1009, "22685": 1009, "n_neighbour": 1009, "18832": 1009, "23033": 1009, "21565": 1009, "17266": 1009, "22118": 1009, "ohad": 1009, "22284": 1009, "19158": 1009, "nicki": 1009, "skaft": 1009, "20753": 1009, "22108": 1009, "22635": 1009, "19085": 1009, "22866": 1009, "21576": 1009, "emil": 1009, "dugnat": 1009, "21873": 1009, "21177": 1009, "20408": 1009, "ceballo": 1009, "22058": 1009, "23034": 1009, "22203": 1009, "21026": 1009, "21880": 1009, "mrinal": 1009, "tyagi": 1009, "22982": 1009, "22508": 1009, "comb": 1009, "22604": 1009, "22212": 1009, "21430": 1009, "desislava": 1009, "vasileva": 1009, "22687": 1009, "22150": 1009, "22248": 1009, "20860": 1009, "shubhraneel": 1009, "21888": 1009, "21954": 1009, "22953": 1009, "16018": 1009, "21445": 1009, "21988": 1009, "get_output_feature_nam": 1009, "21569": 1009, "21079": 1009, "20653": 1009, "21434": 1009, "19916": 1009, "22735": 1009, "compute_inverse_transform": 1009, "21701": 1009, "22114": 1009, "21330": 1009, "21408": 1009, "22149": 1009, "21436": 1009, "22191": 1009, "22476": 1009, "21278": 1009, "21316": 1009, "clickabl": 1009, "21298": 1009, "22237": 1009, "check_scalar": 1009, "22218": 1009, "validationerror": 1009, "check_requires_y_non": 1009, "22578": 1009, "arcidiacono": [1009, 1010, 1012], "22595": 1009, "21310": 1009, "22027": 1009, "lanterni": 1009, "23077": 1009, "22188": 1009, "22830": 1009, "2357juan": [1009, 1010, 1011], "adamgonzo": 1009, "adijohar": 1009, "kumawat": 1009, "raghuwanshi": 1009, "duron": 1009, "ahmadjubair33": 1009, "druck": 1009, "peixinho": 1009, "arroyo": 1009, "alexanmv": 1009, "almeidayoel": 1009, "amar": [1009, 1010, 1011], "amrcod": 1009, "griva": [1009, 1010], "andrii": 1009, "herrou": 1009, "ducout": 1009, "arth": 1009, "arthurmello": 1009, "arturoamor": 1009, "atharva": 1009, "patil": [1009, 1012], "aufarkari": 1009, "avm19": [1009, 1010, 1012], "ayan": 1009, "bardiya": [1009, 1010], "behrouz": 1009, "ben3940": 1009, "bijil": 1009, "subhash": 1009, "bmreinig": 1009, "brenden": 1009, "kadota": 1009, "cdrig": 1009, "chalmer": 1009, "chitteti": 1009, "srinath": [1009, 1010], "chloe": 1009, "agath": 1009, "azencott": 1009, "christopherlim98": 1009, "weidemann": 1009, "combsccod": 1009, "daniela": [1009, 1010], "darren": [1009, 1010], "eargl": 1009, "gilbertson": [1009, 1010], "dea": [1009, 1010, 1011], "mar\u00eda": [1009, 1010, 1011], "denni": 1009, "osei": 1009, "dessyvv": 1009, "dev514": 1009, "diwakar": 1009, "ries": 1009, "drskd": 1009, "emiko": 1009, "sano": 1009, "emmanouil": 1009, "gionanidi": 1009, "ermolaevpa": [1009, 1010], "estefania": 1009, "barreto": 1009, "ojeda": 1009, "eyast": 1009, "fatima": [1009, 1012], "gasmi": 1009, "luna": 1009, "glushchenkov": 1009, "fkaren27": 1009, "fpgawesom": 1009, "francoisgoupil": 1009, "ftorres16": [1009, 1010], "gabor": 1009, "berei": 1009, "kertesz": 1009, "gauthier": 1009, "giancarlo": 1009, "glennfrutiz": 1009, "guillermo": 1009, "fern\u00e1ndez": 1009, "hansin": [1009, 1010], "henrymooresc": [1009, 1010], "hideaki": 1009, "imamura": 1009, "hind": 1009, "hmasdev": 1009, "hvassard": 1009, "aki": [1009, 1010, 1011], "iasoon": 1009, "ingela": 1009, "cowton": 1009, "jalexand3r": 1009, "jauhar": 1009, "jaya": 1009, "kommireddi": 1009, "je": 1009, "jelfner": 1009, "jenni": 1009, "jirka": 1009, "borovec": 1009, "cipri\u00e1n": 1009, "loayza": 1009, "chazalon": 1009, "mess": 1009, "jovan": [1009, 1010], "stojanov": [1009, 1010], "jschuerz": 1009, "katotten": 1009, "ken4git": 1009, "doucet": 1009, "kimayoung": 1009, "koushik": 1009, "kranthi": 1009, "sedamaki": 1009, "krumetoft": 1009, "lesne": 1009, "casino": [1009, 1010], "logan": [1009, 1010, 1011], "lucieclair": 1009, "luiz": 1009, "magali": 1009, "mandjev": 1009, "wurp": [1009, 1010], "boerner": 1009, "wimld": 1009, "martel": 1009, "corentin": 1009, "mat\u00eda": 1009, "matjansen": 1009, "francia": 1009, "megabyt": 1009, "mehrdad": 1009, "moradizadeh": 1009, "melemo2": 1009, "micky774": [1009, 1010], "milana2": 1009, "millawel": 1009, "miwojc": 1009, "mizuki": 1009, "mlant": 1009, "mohit": [1009, 1012], "moonkyung94": 1009, "mpoemsl": 1009, "mrinaltyagi": 1009, "leu": 1009, "msabati": 1009, "nadirhan": 1009, "\u015fahin": 1009, "naipawat": [1009, 1010], "poolsawat": [1009, 1010], "nartayxd": 1009, "nastegiano": 1009, "nathansquan": 1009, "detlefsen": 1009, "niket": 1009, "nikhil": 1009, "suresh": 1009, "kondratyev": 1009, "husak": 1009, "partev": [1009, 1010, 1011, 1012], "pelennor": 1009, "piet": [1009, 1010], "br\u00f6mmel": [1009, 1010], "pinki": 1009, "poloso": 1009, "pramod": 1009, "anantharam": 1009, "puhuk": [1009, 1010], "purna": 1009, "mansingh": 1009, "quadv": 1009, "rahil": [1009, 1010, 1011, 1012], "boy": 1009, "raz": 1009, "hoshia": 1009, "rishabh": 1009, "barnowski": [1009, 1010], "rsnegrin": 1009, "yadav": 1009, "sakinaouisrani": 1009, "sanjai": 1009, "marreddi": 1009, "seel": 1009, "sele": [1009, 1010], "seyedsaman": 1009, "emami": 1009, "shandeng123": 1009, "sharmadharmp": 1009, "shaymernaturalint": 1009, "shuangchi": [1009, 1010], "siavrez": 1009, "slishak": 1009, "spikebh": 1009, "sply88": 1009, "kailasa": [1009, 1010], "sultan": 1009, "orazbayev": 1009, "sumit": 1009, "saha": 1009, "sven": [1009, 1010], "eschlbeck": 1009, "stehl": [1009, 1010], "swapnil": 1009, "teunp": 1009, "ferr\u00e9": 1009, "hjortkj\u00e6r": 1009, "thiruvenkadam": 1009, "toastedyeast": [1009, 1010], "mctiernan": [1009, 1010], "udit": 1009, "ugo": 1009, "marchand": 1009, "vera": [1009, 1010], "komey": [1009, 1010], "victoireloui": 1009, "vishwakarma": 1009, "vikrant": 1009, "khedkar": 1009, "chernyi": 1009, "weijiadu": 1009, "yuan": [1009, 1010, 1011, 1012], "yiyangq": 1009, "yosshi999": 1009, "yuki": 1009, "koyama": 1009, "zeel": 1009, "zempleni": 1009, "zhenfish": 1009, "\u8d75\u4e30": 1009, "25747": 1010, "base_estimator__": 1010, "25477": 1010, "25563": 1010, "25570": 1010, "25664": 1010, "25774": 1010, "25500": 1010, "25589": 1010, "25704": 1010, "min_sample_split": 1010, "25744": 1010, "25619": 1010, "25638": 1010, "25354": 1010, "25174": 1010, "25089": 1010, "25129": 1010, "25363": 1010, "25188": 1010, "25295": 1010, "spec": [1010, 1011], "25312": 1010, "backslash": 1010, "25511": 1010, "25172": 1010, "25341": 1010, "25094": 1010, "25250": 1010, "25370": 1010, "23101": 1010, "24873": 1010, "25694": 1010, "25274": 1010, "25296": 1010, "25147": 1010, "23619": 1010, "24354": 1010, "safiuddin": 1010, "khaja": 1010, "gsiisg": 1010, "23935": 1010, "22527": 1010, "_sgd_fast": 1010, "_plain_sgd": 1010, "oversc": 1010, "23798": 1010, "24543": 1010, "24465": 1010, "23734": 1010, "24699": 1010, "23865": 1010, "primit": 1010, "23446": 1010, "23197": 1010, "23604": 1010, "23585": 1010, "24556": 1010, "maladi\u00e8r": [1010, 1011], "24617": 1010, "sim4n6": 1010, "24688": 1010, "22054": 1010, "roic": 1010, "24264": 1010, "maladier": 1010, "14736": 1010, "hunt": 1010, "zhan": 1010, "20802": 1010, "pokorni": 1010, "22965": 1010, "22968": 1010, "23038": 1010, "23210": 1010, "24258": 1010, "23470": 1010, "21938": 1010, "23127": 1010, "19075": 1010, "ramo": 1010, "carre\u00f1o": 1010, "24951": 1010, "22268": 1010, "mohamedbsh": 1010, "23905": 1010, "11860": 1010, "ablin": 1010, "24528": 1010, "23726": 1010, "24421": 1010, "kshitij": [1010, 1011], "22554": 1010, "24218": 1010, "molin": 1010, "21020": 1010, "24856": 1010, "22014": 1010, "23252": 1010, "24538": 1010, "24889": 1010, "24146": 1010, "peretti": 1010, "nestor": 1010, "navarro": 1010, "nati": 1010, "tomatti": 1010, "24855": 1010, "24849": 1010, "20415": 1010, "24283": 1010, "24894": 1010, "23819": [1010, 1011], "edoardo": [1010, 1012], "abati": [1010, 1012], "24747": 1010, "24245": 1010, "24405": 1010, "16695": 1010, "vitor": 1010, "rosa": 1010, "18298": 1010, "25077": 1010, "24317": 1010, "24350": 1010, "24755": 1010, "levitski": [1010, 1011, 1012], "24637": 1010, "24767": 1010, "23275": 1010, "maxwelllzh": 1010, "24433": 1010, "yogendrasingh": 1010, "23637": 1010, "23877": 1010, "10168": 1010, "\u0142ukasz": 1010, "borchmann": 1010, "12285": 1010, "miltenberg": 1010, "13042": 1010, "parizi": 1010, "18094": 1010, "22562": 1010, "24714": 1010, "23834": 1010, "24051": 1010, "22518": 1010, "18020": 1010, "24338": 1010, "23442": 1010, "atukorala": 1010, "22710": 1010, "conroi": 1010, "trinh": 1010, "23461": 1010, "24365": 1010, "24630": 1010, "rushil": [1010, 1011], "24084": 1010, "iinfo": 1010, "24141": 1010, "24539": 1010, "23977": 1010, "23683": 1010, "andrei": [1010, 1012, 1013], "melnik": 1010, "16747": 1010, "18805": 1010, "hongshaoyang": 1010, "22269": 1010, "23139": 1010, "24645": 1010, "10468": 1010, "ruben": 1010, "22993": 1010, "24750": 1010, "rudresh": 1010, "veerkhar": 1010, "23874": 1010, "24075": 1010, "22665": 1010, "24683": 1010, "24058": 1010, "perdok": 1010, "20331": 1010, "23993": 1010, "22629": 1010, "24412": 1010, "22898": 1010, "23480": 1010, "21469": 1010, "lapack_svd_driv": 1010, "20617": 1010, "25067": 1010, "14862": 1010, "24512": 1010, "24667": 1010, "25080": 1010, "24523": 1010, "mia": 1010, "bajic": 1010, "3llobo": 1010, "kania": [1010, 1011], "anulekh": 1010, "admir": [1010, 1011], "demiraj": [1010, 1011], "adoublet": [1010, 1011], "ahmedbgh": [1010, 1011], "aiko": 1010, "akshita": 1010, "prasanth": 1010, "ala": [1010, 1011], "miola": 1010, "lebel": 1010, "buzenet": [1010, 1011], "kassa": [1010, 1011], "bera": 1010, "maennel": 1010, "aniket": [1010, 1012], "shirsat": 1010, "anthony22": [1010, 1011], "apostolo": 1010, "tsetogl": 1010, "aravindh": 1010, "artur": [1010, 1011], "hermano": [1010, 1011], "ashah002": [1010, 1011, 1012], "ashwin": [1010, 1011], "azaria": [1010, 1011], "gebremichael": [1010, 1011], "b0rxington": 1010, "badr": 1010, "moufad": 1010, "bart\u0142omiej": 1010, "go\u0144da": 1010, "bdegraaff": 1010, "berkecanrizai": 1010, "bernd": 1010, "fritzk": 1010, "bhoomika": 1010, "biswaroop": 1010, "cannon": 1010, "bsh": 1010, "ceh": 1010, "chalulu": 1010, "changyao": [1010, 1011], "zablit": 1010, "veenhui": [1010, 1011, 1012], "christianwaldmann": 1010, "christin": [1010, 1011], "verrier": 1010, "dangonite57": [1010, 1011], "danielgaerb": 1010, "davidblnc": [1010, 1011], "dayn": [1010, 1011], "khant": 1010, "dhanshre": 1010, "diadochokinet": 1010, "diederikwp": 1010, "litsidi": [1010, 1011], "drewhogg": 1010, "oc": 1010, "dwight": 1010, "lindquist": 1010, "eden": 1010, "brekk": 1010, "edern": [1010, 1011], "eleanor": 1010, "eliaschiavon": 1010, "emir": [1010, 1011], "fabrizio": 1010, "damicelli": 1010, "fcharra": 1010, "siola": [1010, 1011], "tuveri": 1010, "franck": [1010, 1012], "charra": [1010, 1012], "geevarghes": 1010, "georgiamaydai": 1010, "gianr": 1010, "lazz": 1010, "guitar": 1010, "gunesbayir": [1010, 1011], "harshit5674": 1010, "hasan": 1010, "yaman": 1010, "vrigazov": 1010, "htsedebenham": 1010, "humahn": 1010, "ido": [1010, 1011], "iglesi": 1010, "iliya": 1010, "zhechev": 1010, "iren": [1010, 1011], "ivanllt": 1010, "sedykh": 1010, "mcivor": [1010, 1011], "janfidor": [1010, 1011], "jiten": 1010, "sidhpura": 1010, "jkarolczak": 1010, "jo\u00e3o": 1010, "johnathanpi": [1010, 1011], "koumenti": 1010, "panga": [1010, 1011], "johnthagen": 1010, "fleme": 1010, "choo": [1010, 1011], "yun": [1010, 1011], "keat": [1010, 1011], "juanfe88": 1010, "juliaschoepp": [1010, 1011], "jygerardi": [1010, 1011], "ka00ri": [1010, 1011], "kanishk": 1010, "sachdev": 1010, "kanissh": 1010, "kendal": 1010, "kento": [1010, 1011], "nozawa": [1010, 1011], "eliasi": [1010, 1011, 1012], "kluge": [1010, 1011], "lieret": 1010, "kirandevraj": 1010, "kraig": 1010, "vamsi": 1010, "kapadni": 1010, "lingyi1110": 1010, "mantovani": 1010, "maascha": 1010, "madinak": 1010, "maksym": 1010, "mansi": 1010, "kostelac": [1010, 1011], "marvin": [1010, 1011], "krawutschk": [1010, 1011], "masanori": [1010, 1011], "kanazu": [1010, 1011], "haberland": [1010, 1011], "mauroantonioserrano": 1010, "maxi": 1010, "marufo": 1010, "maximesaur": [1010, 1011], "smolskii": 1010, "bou": [1010, 1011], "mehgarg": 1010, "mehmetcanakbai": 1010, "baji\u0107": 1010, "flak": 1010, "hornstein": 1010, "ruiter": 1010, "paradi": 1010, "iljin": [1010, 1011], "misa": 1010, "ogura": 1010, "wilksch": 1010, "mrastgoo": [1010, 1012], "naois": [1010, 1012], "holohan": [1010, 1012], "nass": 1010, "jacobi": 1010, "nawazish": [1010, 1011], "alam": [1010, 1011], "nguy\u1ec5n": 1010, "v\u0103n": 1010, "di\u1ec5n": 1010, "fanelli": [1010, 1011], "nihal": 1010, "thukarama": 1010, "jare": 1010, "nima10khodaveisi": 1010, "nima": 1010, "sarajpoor": 1010, "nitinramvelraj": 1010, "nnlnr": [1010, 1011], "npach": [1010, 1011], "nwanna": 1010, "nymark": 1010, "kho": 1010, "holman": 1010, "oll": 1010, "lukowski": 1010, "hassoun": 1010, "tamer": 1010, "ouss1508": [1010, 1011], "oyindamola": 1010, "olatunji": 1010, "pab": [1010, 1011], "pandata": [1010, 1011], "soar": 1010, "petar": 1010, "mlinari\u0107": 1010, "pooja": [1010, 1011, 1012], "subramaniam": [1010, 1011, 1012], "priyam": 1010, "kakati": 1010, "freeland": 1010, "keerti": 1010, "rafal": [1010, 1011], "wojdyla": [1010, 1011], "raghuv": [1010, 1011], "makhija": 1010, "rehan": 1010, "guha": 1010, "klima": 1010, "crockett": 1010, "homm": 1010, "roman4oo": 1010, "rowan": 1010, "mankoo": 1010, "sabri": 1010, "monaf": 1010, "safikh": 1010, "salahuddin": 1010, "yojana": 1010, "menes": 1010, "ephrem": 1010, "sangam": 1010, "sangamswadik": 1010, "sanjai_3": [1010, 1011], "sarahremu": 1010, "sashka": [1010, 1011], "savkomax": 1010, "gustafson": [1010, 1011], "sec65": 1010, "seljak": 1010, "shadi": [1010, 1011], "gewili": [1010, 1011], "shellyfung": 1010, "shinsuk": 1010, "mori": 1010, "shiva": [1010, 1011], "shoaib": 1010, "khan": [1010, 1011], "shogo": [1010, 1011], "hida": [1010, 1011], "shrankhla": 1010, "sonniv": [1010, 1011], "sortofamudkip": [1010, 1011], "stanislav": [1010, 1011], "modrak": [1010, 1011], "stellalin7": 1010, "vaerenbergh": [1010, 1011], "schmerler": 1010, "tabea": [1010, 1011], "kossen": [1010, 1011], "thedevpanda": 1010, "syd": 1010, "sre": 1010, "weezel": [1010, 1011], "bonald": 1010, "germer": [1010, 1011], "ion": 1010, "timofei": 1010, "kornev": 1010, "pitter": 1010, "tomiock": [1010, 1011], "mathew": 1010, "tspeng": [1010, 1011], "egashira": 1010, "rey": 1010, "puerta": 1010, "vishal": 1010, "vyom": [1010, 1011], "pathak": [1010, 1011], "wattai": 1010, "wchathura": 1010, "wen": 1010, "x110": 1010, "xuniu": 1010, "yanhong": 1010, "ef": 1010, "yusuf": [1010, 1011], "raji": [1010, 1011], "adil": 1010, "khwaja": 1010, "zeeshan": [1010, 1011], "lone": [1010, 1011], "27468": 1011, "27583": 1011, "paralel": 1011, "27573": 1011, "27580": 1011, "18488": 1011, "26814": 1011, "27044": 1011, "26913": 1011, "27167": 1011, "27243": 1011, "26602": 1011, "26521": 1011, "26748": 1011, "26600": 1011, "shreesha": [1011, 1012], "27002": 1011, "26416": 1011, "tao": [1011, 1012], "26772": 1011, "reintroduc": 1011, "26754": 1011, "26893": 1011, "26760": 1011, "26940": 1011, "26931": 1011, "26903": 1011, "roehr": [1011, 1012], "27292": 1011, "25196": 1011, "24871": 1011, "25752": 1011, "25438": 1011, "yotam": 1011, "avidar": 1011, "constantini": 1011, "26337": 1011, "25120": 1011, "27311": 1011, "25294": 1011, "25308": 1011, "25291": 1011, "25367": 1011, "25402": 1011, "25044": 1011, "smt": 1011, "26082": 1011, "24027": 1011, "25815": 1011, "24568": 1011, "26121": 1011, "25805": 1011, "26385": 1011, "26657": 1011, "binesh": [1011, 1012], "bannerje": [1011, 1012], "25251": 1011, "26503": 1011, "26286": 1011, "26323": 1011, "26033": 1011, "26108": 1011, "barth\u00e9lemi": [1011, 1012], "26433": 1011, "26386": 1011, "26551": 1011, "26579": 1011, "25784": 1011, "25490": 1011, "25956": 1011, "22409": 1011, "25177": 1011, "24882": 1011, "25186": 1011, "breve": 1011, "26318": 1011, "25506": 1011, "25601": 1011, "fidor": 1011, "25931": 1011, "25629": 1011, "26242": 1011, "toplak": 1011, "sckit": 1011, "25297": 1011, "24230": 1011, "25102": 1011, "25973": 1011, "25232": 1011, "26454": 1011, "25209": 1011, "26644": 1011, "lemo": [1011, 1012], "21809": 1011, "25732": 1011, "25190": 1011, "26207": 1011, "25587": 1011, "25697": 1011, "25214": 1011, "26653": 1011, "25531": 1011, "17388": 1011, "24769": 1011, "25713": 1011, "18723": 1011, "sahil": 1011, "24677": 1011, "24668": 1011, "dberenbaum": 1011, "25987": 1011, "26019": 1011, "25432": 1011, "25672": 1011, "lene": 1011, "preuss": 1011, "25299": 1011, "omarmanzoor": 1011, "26194": 1011, "26264": 1011, "barata": 1011, "onggo": 1011, "23099": 1011, "26021": 1011, "jiawei": [1011, 1012, 1013], "25659": 1011, "26333": 1011, "24140": 1011, "24076": 1011, "25417": 1011, "24083": 1011, "25443": 1011, "feature_union": 1011, "25093": 1011, "25220": 1011, "26325": 1011, "25334": 1011, "25677": 1011, "20524": 1011, "niuk": 1011, "23731": 1011, "24145": 1011, "22506": 1011, "24935": 1011, "seladu": 1011, "25257": 1011, "26424": 1011, "26400": 1011, "26566": 1011, "26093": 1011, "23595": 1011, "26376": 1011, "25387": 1011, "26289": 1011, "25813": 1011, "26106": 1011, "25814": 1011, "check_transformers_unfitted_stateless": 1011, "25733": 1011, "19664": 1011, "environmenterror": 1011, "ioerror": 1011, "windowserror": 1011, "26466": 1011, "kushwah": [1011, 1012], "handk": 1011, "adien": 1011, "mansouri": 1011, "alexl": [1011, 1012], "amai": 1011, "annegnx": 1011, "ansam": 1011, "zedan": 1011, "dutt": 1011, "aymericbasset": 1011, "tripramudya": 1011, "benedek": 1011, "harsanyi": 1011, "brevin": [1011, 1012], "kund": [1011, 1012], "troillard": [1011, 1012], "carla": 1011, "berenbaum": 1011, "proding": 1011, "butyugina": 1011, "elabonga": [1011, 1012], "atuo": [1011, 1012], "farhan": 1011, "hujiahong726": 1011, "ili": [1011, 1012], "jb": [1011, 1012], "mountford": [1011, 1012], "jessicakk0711": 1011, "joei": 1011, "hedlund": 1011, "linu": [1011, 1012], "fouquet": [1011, 1012], "harfouch": 1011, "mdarii": 1011, "murezzda": 1011, "nightwalkx": 1011, "nishu": 1011, "piontek": 1011, "pnucci": 1011, "sadra": 1011, "barikbin": 1011, "searchforpass": 1011, "seoeun": 1011, "th\u00e9ophil": 1011, "barang": 1011, "veghit": 1011, "vignesh": 1011, "vijeth": [1011, 1012], "moudgalya": [1011, 1012], "windiana42": 1011, "yuchen": [1011, 1012], "tba": 1012, "2024": 1012, "28435": 1012, "28399": 1012, "vineet": 1012, "26837": 1012, "krsto": 1012, "prorokovi\u0107": 1012, "28306": 1012, "28521": 1012, "28188": 1012, "28256": 1012, "28240": 1012, "28195": 1012, "28191": 1012, "28235": 1012, "28262": 1012, "rerais": 1012, "28167": 1012, "28247": 1012, "28121": 1012, "peterlongo": 1012, "28165": 1012, "int64dtyp": 1012, "28385": 1012, "27702": 1012, "same_kind": 1012, "28365": 1012, "leo": 1012, "grinsztajn": 1012, "28184": 1012, "28377": 1012, "bergman": 1012, "28241": 1012, "28263": 1012, "28233": 1012, "hopfensperg": 1012, "28295": 1012, "28327": 1012, "28198": 1012, "28222": 1012, "sooner": 1012, "26721": 1012, "27670": 1012, "27315": 1012, "26464": 1012, "26616": 1012, "cappuzzo": 1012, "Ines": 1012, "ibnukhsein": 1012, "boulard": 1012, "26648": 1012, "27538": 1012, "27308": 1012, "26789": 1012, "26896": 1012, "27058": 1012, "27005": 1012, "26525": 1012, "27490": 1012, "27500": 1012, "27478": 1012, "27389": 1012, "27104": 1012, "27250": 1012, "27179": 1012, "nurseit": 1012, "kamchyev": 1012, "27100": 1012, "virshup": 1012, "27239": 1012, "korobko": 1012, "27240": 1012, "27274": 1012, "27161": 1012, "27219": 1012, "27277": 1012, "27301": 1012, "lohit": 1012, "sundaramahalingam": 1012, "27252": 1012, "27166": 1012, "27314": 1012, "jax": 1012, "27137": 1012, "26855": 1012, "27601": 1012, "26315": 1012, "27098": 1012, "27431": 1012, "sok\u00f3\u0142": 1012, "27556": 1012, "27110": 1012, "26243": 1012, "27558": 1012, "28048": 1012, "outliermixin": 1012, "26506": 1012, "correspondingli": 1012, "26831": 1012, "26786": 1012, "26909": 1012, "27185": 1012, "27668": 1012, "nolan": 1012, "mcmahon": 1012, "depedend": 1012, "26459": 1012, "haoi": 1012, "27678": 1012, "tata": 1012, "27651": 1012, "27898": 1012, "26744": 1012, "27828": 1012, "26683": 1012, "27734": 1012, "25275": 1012, "27204": 1012, "27438": 1012, "28111": 1012, "27718": 1012, "sparrai": 1012, "spmatrix": 1012, "70x": 1012, "tarashanski": 1012, "scanpi": 1012, "18689": 1012, "26634": 1012, "landeau": 1012, "vigni": 1012, "27834": 1012, "26391": 1012, "26411": 1012, "27835": 1012, "27139": 1012, "13649": 1012, "reilli": 1012, "dealloc": 1012, "27865": 1012, "26278": 1012, "28095": 1012, "26957": 1012, "26163": 1012, "26736": 1012, "27645": 1012, "27817": 1012, "ongari": 1012, "27710": 1012, "28074": 1012, "26830": 1012, "24838": 1012, "hertel": 1012, "27721": 1012, "27841": 1012, "21807": 1012, "27291": 1012, "27675": 1012, "cant": 1012, "27417": 1012, "27899": 1012, "27979": 1012, "5x": 1012, "26765": 1012, "27006": 1012, "26366": 1012, "mojdeh": 1012, "rastgoo": 1012, "neg_root_mean_squared_log_error_scor": 1012, "26734": 1012, "27650": 1012, "27624": 1012, "27577": 1012, "26840": 1012, "26299": 1012, "27720": 1012, "27018": 1012, "26828": 1012, "23317": 1012, "26410": 1012, "26267": 1012, "27017": 1012, "xuefeng": 1012, "27760": 1012, "26944": 1012, "26674": 1012, "27309": 1012, "27328": 1012, "27801": 1012, "27821": 1012, "26862": 1012, "goh": 1012, "yisheng": 1012, "dia": 1012, "datastuctur": 1012, "27372": 1012, "may_share_memori": 1012, "27336": 1012, "check_estimators_pickl": 1012, "readonly_memmap": 1012, "misdetect": 1012, "27614": 1012, "27757": 1012, "28090": 1012, "furrer": 1012, "log_logist": 1012, "logaddexp": 1012, "27544": 1012, "101alexmartin": 1012, "adarsh": 1012, "wase": 1012, "advik": 1012, "feghali": 1012, "anam": 1012, "andyscanzio": 1012, "kislovskii": 1012, "mare": 1012, "benoit": 1012, "chevalli": 1012, "mame": 1012, "chad": 1012, "parmet": 1012, "clauss": 1012, "boyl": 1012, "cynthias13w": 1012, "damink": 1012, "schmitz": 1012, "tinoco": 1012, "brochart": 1012, "devanshkyada27": 1012, "duong": 1012, "eitan": 1012, "heme": 1012, "emma": 1012, "carbal": 1012, "ferdman": 1012, "epimorph": 1012, "erwan": 1012, "floch": 1012, "filip": [1012, 1013], "karlo": [1012, 1013], "do\u0161ilovi\u0107": [1012, 1013], "idelberg": 1012, "harmanan": 1012, "kohli": 1012, "ioangatop": 1012, "isaactrost": 1012, "iwona": 1012, "zdzieblo": 1012, "jakub": 1012, "kaczmarzyk": 1012, "nordbi": 1012, "waweru": 1012, "kishan": 1012, "ved": 1012, "pita": 1012, "koustav": 1012, "ldwy4": 1012, "silvestrin": 1012, "luk\u00e1\u0161": 1012, "folwarczn\u00fd": 1012, "geiger": 1012, "fraa\u00df": 1012, "hanu\u0161": 1012, "elliot": [1012, 1013], "larrald": 1012, "mecopur": 1012, "higgin": 1012, "miki": 1012, "watanab": 1012, "milton": 1012, "mn193": 1012, "hamdi": 1012, "naman": 1012, "dangi": 1012, "malem": 1012, "shinitski": 1012, "oleksii": 1012, "kachaiev": 1012, "hull": 1012, "fr\u00e9minvil": [1012, 1013], "puneeth": 1012, "qmarcou": 1012, "raj": 1012, "pulapakura": 1012, "raphael": 1012, "pere": 1012, "salim": 1012, "dohri": 1012, "sandip": 1012, "dutta": 1012, "qaiser": 1012, "scaja": 1012, "shubhal": 1012, "s\u00f8ren": 1012, "fugled": 1012, "tanjina": 1012, "afroj": 1012, "tharak": 1012, "hegd": 1012, "thebabush": 1012, "tialo": 1012, "tongyu": 1012, "fokow": 1012, "yuusuk": 1012, "hiramatsu": 1012, "28040": 1013, "settl": 1013, "28187": 1013, "28432": 1013, "27560": 1013, "28261": 1013, "27584": 1013, "28205": 1013, "28491": 1013, "thanh": 1013, "__getitem__": 1013, "27990": 1013, "28483": 1013, "28160": 1013, "28498": 1013, "27937": 1013, "vd": 1013, "boom": 1013, "27844": 1013, "28102": 1013, "18843": 1013, "montesel": 1013, "28136": 1013, "28085": 1013, "menoci": 1013, "florin": 1013, "28053": 1013, "27576": 1013, "28425": 1013, "28557": 1013, "28582": 1013, "28471": 1013, "28051": 1013, "28360": 1013, "28092": 1013, "28210": 1013, "28352": 1013, "27700": 1013, "25991": 1013, "27636": 1013, "ralph": 1013, "urlu": 1013}, "objects": {"": [[373, 0, 0, "-", "sklearn"]], "sklearn": [[373, 0, 0, "-", "base"], [373, 0, 0, "-", "calibration"], [373, 0, 0, "-", "cluster"], [373, 0, 0, "-", "compose"], [433, 4, 1, "", "config_context"], [373, 0, 0, "-", "covariance"], [373, 0, 0, "-", "cross_decomposition"], [373, 0, 0, "-", "datasets"], [373, 0, 0, "-", "decomposition"], [373, 0, 0, "-", "discriminant_analysis"], [373, 0, 0, "-", "dummy"], [373, 0, 0, "-", "ensemble"], [373, 0, 0, "-", "exceptions"], [373, 0, 0, "-", "experimental"], [373, 0, 0, "-", "feature_extraction"], [373, 0, 0, "-", "feature_selection"], [373, 0, 0, "-", "gaussian_process"], [591, 4, 1, "", "get_config"], [373, 0, 0, "-", "impute"], [373, 0, 0, "-", "inspection"], [373, 0, 0, "-", "isotonic"], [373, 0, 0, "-", "kernel_approximation"], [373, 0, 0, "-", "kernel_ridge"], [373, 0, 0, "-", "linear_model"], [373, 0, 0, "-", "manifold"], [373, 0, 0, "-", "metrics"], [373, 0, 0, "-", "mixture"], [373, 0, 0, "-", "model_selection"], [373, 0, 0, "-", "multiclass"], [373, 0, 0, "-", "multioutput"], [373, 0, 0, "-", "naive_bayes"], [373, 0, 0, "-", "neighbors"], [373, 0, 0, "-", "neural_network"], [373, 0, 0, "-", "pipeline"], [373, 0, 0, "-", "preprocessing"], [373, 0, 0, "-", "random_projection"], [373, 0, 0, "-", "semi_supervised"], [864, 4, 1, "", "set_config"], [865, 4, 1, "", "show_versions"], [373, 0, 0, "-", "svm"], [373, 0, 0, "-", "tree"], [373, 0, 0, "-", "utils"]], "sklearn.base": [[388, 1, 1, "", "BaseEstimator"], [389, 1, 1, "", "BiclusterMixin"], [390, 1, 1, "", "ClassNamePrefixFeaturesOutMixin"], [391, 1, 1, "", "ClassifierMixin"], [392, 1, 1, "", "ClusterMixin"], [393, 1, 1, "", "DensityMixin"], [394, 1, 1, "", "MetaEstimatorMixin"], [395, 1, 1, "", "OneToOneFeatureMixin"], [396, 1, 1, "", "OutlierMixin"], [397, 1, 1, "", "RegressorMixin"], [398, 1, 1, "", "TransformerMixin"], [399, 4, 1, "", "clone"], [400, 4, 1, "", "is_classifier"], [401, 4, 1, "", "is_regressor"]], "sklearn.base.BaseEstimator": [[388, 2, 1, "", "get_metadata_routing"], [388, 2, 1, "", "get_params"], [388, 2, 1, "", "set_params"]], "sklearn.base.BiclusterMixin": [[389, 3, 1, "", "biclusters_"], [389, 2, 1, "", "get_indices"], [389, 2, 1, "", "get_shape"], [389, 2, 1, "", "get_submatrix"]], "sklearn.base.ClassNamePrefixFeaturesOutMixin": [[390, 2, 1, "", "get_feature_names_out"]], "sklearn.base.ClassifierMixin": [[391, 2, 1, "", "score"]], "sklearn.base.ClusterMixin": [[392, 2, 1, "", "fit_predict"]], "sklearn.base.DensityMixin": [[393, 2, 1, "", "score"]], "sklearn.base.OneToOneFeatureMixin": [[395, 2, 1, "", "get_feature_names_out"]], "sklearn.base.OutlierMixin": [[396, 2, 1, "", "fit_predict"]], "sklearn.base.RegressorMixin": [[397, 2, 1, "", "score"]], "sklearn.base.TransformerMixin": [[398, 2, 1, "", "fit_transform"], [398, 2, 1, "", "set_output"]], "sklearn.calibration": [[402, 1, 1, "", "CalibratedClassifierCV"], [403, 1, 1, "", "CalibrationDisplay"], [404, 4, 1, "", "calibration_curve"]], "sklearn.calibration.CalibratedClassifierCV": [[402, 2, 1, "", "fit"], [402, 2, 1, "", "get_metadata_routing"], [402, 2, 1, "", "get_params"], [402, 2, 1, "", "predict"], [402, 2, 1, "", "predict_proba"], [402, 2, 1, "", "score"], [402, 2, 1, "", "set_fit_request"], [402, 2, 1, "", "set_params"], [402, 2, 1, "", "set_score_request"]], "sklearn.calibration.CalibrationDisplay": [[403, 2, 1, "", "from_estimator"], [403, 2, 1, "", "from_predictions"], [403, 2, 1, "", "plot"]], "sklearn.cluster": [[405, 1, 1, "", "AffinityPropagation"], [406, 1, 1, "", "AgglomerativeClustering"], [407, 1, 1, "", "Birch"], [408, 1, 1, "", "BisectingKMeans"], [409, 1, 1, "", "DBSCAN"], [410, 1, 1, "", "FeatureAgglomeration"], [411, 1, 1, "", "HDBSCAN"], [412, 1, 1, "", "KMeans"], [413, 1, 1, "", "MeanShift"], [414, 1, 1, "", "MiniBatchKMeans"], [415, 1, 1, "", "OPTICS"], [416, 1, 1, "", "SpectralBiclustering"], [417, 1, 1, "", "SpectralClustering"], [418, 1, 1, "", "SpectralCoclustering"], [419, 4, 1, "", "affinity_propagation"], [420, 4, 1, "", "cluster_optics_dbscan"], [421, 4, 1, "", "cluster_optics_xi"], [422, 4, 1, "", "compute_optics_graph"], [385, 4, 1, "", "dbscan"], [423, 4, 1, "", "estimate_bandwidth"], [424, 4, 1, "", "k_means"], [425, 4, 1, "", "kmeans_plusplus"], [426, 4, 1, "", "mean_shift"], [427, 4, 1, "", "spectral_clustering"], [428, 4, 1, "", "ward_tree"]], "sklearn.cluster.AffinityPropagation": [[405, 2, 1, "", "fit"], [405, 2, 1, "", "fit_predict"], [405, 2, 1, "", "get_metadata_routing"], [405, 2, 1, "", "get_params"], [405, 2, 1, "", "predict"], [405, 2, 1, "", "set_params"]], "sklearn.cluster.AgglomerativeClustering": [[406, 2, 1, "", "fit"], [406, 2, 1, "", "fit_predict"], [406, 2, 1, "", "get_metadata_routing"], [406, 2, 1, "", "get_params"], [406, 2, 1, "", "set_params"]], "sklearn.cluster.Birch": [[407, 2, 1, "", "fit"], [407, 2, 1, "", "fit_predict"], [407, 2, 1, "", "fit_transform"], [407, 2, 1, "", "get_feature_names_out"], [407, 2, 1, "", "get_metadata_routing"], [407, 2, 1, "", "get_params"], [407, 2, 1, "", "partial_fit"], [407, 2, 1, "", "predict"], [407, 2, 1, "", "set_output"], [407, 2, 1, "", "set_params"], [407, 2, 1, "", "transform"]], "sklearn.cluster.BisectingKMeans": [[408, 2, 1, "", "fit"], [408, 2, 1, "", "fit_predict"], [408, 2, 1, "", "fit_transform"], [408, 2, 1, "", "get_feature_names_out"], [408, 2, 1, "", "get_metadata_routing"], [408, 2, 1, "", "get_params"], [408, 2, 1, "", "predict"], [408, 2, 1, "", "score"], [408, 2, 1, "", "set_fit_request"], [408, 2, 1, "", "set_output"], [408, 2, 1, "", "set_params"], [408, 2, 1, "", "set_predict_request"], [408, 2, 1, "", "set_score_request"], [408, 2, 1, "", "transform"]], "sklearn.cluster.DBSCAN": [[409, 2, 1, "", "fit"], [409, 2, 1, "", "fit_predict"], [409, 2, 1, "", "get_metadata_routing"], [409, 2, 1, "", "get_params"], [409, 2, 1, "", "set_fit_request"], [409, 2, 1, "", "set_params"]], "sklearn.cluster.FeatureAgglomeration": [[410, 2, 1, "", "fit"], [410, 3, 1, "", "fit_predict"], [410, 2, 1, "", "fit_transform"], [410, 2, 1, "", "get_feature_names_out"], [410, 2, 1, "", "get_metadata_routing"], [410, 2, 1, "", "get_params"], [410, 2, 1, "", "inverse_transform"], [410, 2, 1, "", "set_output"], [410, 2, 1, "", "set_params"], [410, 2, 1, "", "transform"]], "sklearn.cluster.HDBSCAN": [[411, 2, 1, "", "dbscan_clustering"], [411, 2, 1, "", "fit"], [411, 2, 1, "", "fit_predict"], [411, 2, 1, "", "get_metadata_routing"], [411, 2, 1, "", "get_params"], [411, 2, 1, "", "set_params"]], "sklearn.cluster.KMeans": [[412, 2, 1, "", "fit"], [412, 2, 1, "", "fit_predict"], [412, 2, 1, "", "fit_transform"], [412, 2, 1, "", "get_feature_names_out"], [412, 2, 1, "", "get_metadata_routing"], [412, 2, 1, "", "get_params"], [412, 2, 1, "", "predict"], [412, 2, 1, "", "score"], [412, 2, 1, "", "set_fit_request"], [412, 2, 1, "", "set_output"], [412, 2, 1, "", "set_params"], [412, 2, 1, "", "set_predict_request"], [412, 2, 1, "", "set_score_request"], [412, 2, 1, "", "transform"]], "sklearn.cluster.MeanShift": [[413, 2, 1, "", "fit"], [413, 2, 1, "", "fit_predict"], [413, 2, 1, "", "get_metadata_routing"], [413, 2, 1, "", "get_params"], [413, 2, 1, "", "predict"], [413, 2, 1, "", "set_params"]], "sklearn.cluster.MiniBatchKMeans": [[414, 2, 1, "", "fit"], [414, 2, 1, "", "fit_predict"], [414, 2, 1, "", "fit_transform"], [414, 2, 1, "", "get_feature_names_out"], [414, 2, 1, "", "get_metadata_routing"], [414, 2, 1, "", "get_params"], [414, 2, 1, "", "partial_fit"], [414, 2, 1, "", "predict"], [414, 2, 1, "", "score"], [414, 2, 1, "", "set_fit_request"], [414, 2, 1, "", "set_output"], [414, 2, 1, "", "set_params"], [414, 2, 1, "", "set_partial_fit_request"], [414, 2, 1, "", "set_predict_request"], [414, 2, 1, "", "set_score_request"], [414, 2, 1, "", "transform"]], "sklearn.cluster.OPTICS": [[415, 2, 1, "", "fit"], [415, 2, 1, "", "fit_predict"], [415, 2, 1, "", "get_metadata_routing"], [415, 2, 1, "", "get_params"], [415, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralBiclustering": [[416, 3, 1, "", "biclusters_"], [416, 2, 1, "", "fit"], [416, 2, 1, "", "get_indices"], [416, 2, 1, "", "get_metadata_routing"], [416, 2, 1, "", "get_params"], [416, 2, 1, "", "get_shape"], [416, 2, 1, "", "get_submatrix"], [416, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralClustering": [[417, 2, 1, "", "fit"], [417, 2, 1, "", "fit_predict"], [417, 2, 1, "", "get_metadata_routing"], [417, 2, 1, "", "get_params"], [417, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralCoclustering": [[418, 3, 1, "", "biclusters_"], [418, 2, 1, "", "fit"], [418, 2, 1, "", "get_indices"], [418, 2, 1, "", "get_metadata_routing"], [418, 2, 1, "", "get_params"], [418, 2, 1, "", "get_shape"], [418, 2, 1, "", "get_submatrix"], [418, 2, 1, "", "set_params"]], "sklearn.compose": [[429, 1, 1, "", "ColumnTransformer"], [430, 1, 1, "", "TransformedTargetRegressor"], [431, 4, 1, "", "make_column_selector"], [432, 4, 1, "", "make_column_transformer"]], "sklearn.compose.ColumnTransformer": [[429, 2, 1, "", "fit"], [429, 2, 1, "", "fit_transform"], [429, 2, 1, "", "get_feature_names_out"], [429, 2, 1, "", "get_metadata_routing"], [429, 2, 1, "", "get_params"], [429, 3, 1, "", "named_transformers_"], [429, 2, 1, "", "set_output"], [429, 2, 1, "", "set_params"], [429, 2, 1, "", "transform"]], "sklearn.compose.TransformedTargetRegressor": [[430, 2, 1, "", "fit"], [430, 2, 1, "", "get_metadata_routing"], [430, 2, 1, "", "get_params"], [430, 3, 1, "", "n_features_in_"], [430, 2, 1, "", "predict"], [430, 2, 1, "", "score"], [430, 2, 1, "", "set_params"], [430, 2, 1, "", "set_score_request"]], "sklearn.covariance": [[434, 1, 1, "", "EllipticEnvelope"], [435, 1, 1, "", "EmpiricalCovariance"], [436, 1, 1, "", "GraphicalLasso"], [437, 1, 1, "", "GraphicalLassoCV"], [438, 1, 1, "", "LedoitWolf"], [439, 1, 1, "", "MinCovDet"], [440, 1, 1, "", "OAS"], [441, 1, 1, "", "ShrunkCovariance"], [442, 4, 1, "", "empirical_covariance"], [443, 4, 1, "", "graphical_lasso"], [444, 4, 1, "", "ledoit_wolf"], [445, 4, 1, "", "ledoit_wolf_shrinkage"], [387, 4, 1, "", "oas"], [446, 4, 1, "", "shrunk_covariance"]], "sklearn.covariance.EllipticEnvelope": [[434, 2, 1, "", "correct_covariance"], [434, 2, 1, "", "decision_function"], [434, 2, 1, "", "error_norm"], [434, 2, 1, "", "fit"], [434, 2, 1, "", "fit_predict"], [434, 2, 1, "", "get_metadata_routing"], [434, 2, 1, "", "get_params"], [434, 2, 1, "", "get_precision"], [434, 2, 1, "", "mahalanobis"], [434, 2, 1, "", "predict"], [434, 2, 1, "", "reweight_covariance"], [434, 2, 1, "", "score"], [434, 2, 1, "", "score_samples"], [434, 2, 1, "", "set_params"], [434, 2, 1, "", "set_score_request"]], "sklearn.covariance.EmpiricalCovariance": [[435, 2, 1, "", "error_norm"], [435, 2, 1, "", "fit"], [435, 2, 1, "", "get_metadata_routing"], [435, 2, 1, "", "get_params"], [435, 2, 1, "", "get_precision"], [435, 2, 1, "", "mahalanobis"], [435, 2, 1, "", "score"], [435, 2, 1, "", "set_params"], [435, 2, 1, "", "set_score_request"]], "sklearn.covariance.GraphicalLasso": [[436, 2, 1, "", "error_norm"], [436, 2, 1, "", "fit"], [436, 2, 1, "", "get_metadata_routing"], [436, 2, 1, "", "get_params"], [436, 2, 1, "", "get_precision"], [436, 2, 1, "", "mahalanobis"], [436, 2, 1, "", "score"], [436, 2, 1, "", "set_params"], [436, 2, 1, "", "set_score_request"]], "sklearn.covariance.GraphicalLassoCV": [[437, 2, 1, "", "error_norm"], [437, 2, 1, "", "fit"], [437, 2, 1, "", "get_metadata_routing"], [437, 2, 1, "", "get_params"], [437, 2, 1, "", "get_precision"], [437, 2, 1, "", "mahalanobis"], [437, 2, 1, "", "score"], [437, 2, 1, "", "set_params"], [437, 2, 1, "", "set_score_request"]], "sklearn.covariance.LedoitWolf": [[438, 2, 1, "", "error_norm"], [438, 2, 1, "", "fit"], [438, 2, 1, "", "get_metadata_routing"], [438, 2, 1, "", "get_params"], [438, 2, 1, "", "get_precision"], [438, 2, 1, "", "mahalanobis"], [438, 2, 1, "", "score"], [438, 2, 1, "", "set_params"], [438, 2, 1, "", "set_score_request"]], "sklearn.covariance.MinCovDet": [[439, 2, 1, "", "correct_covariance"], [439, 2, 1, "", "error_norm"], [439, 2, 1, "", "fit"], [439, 2, 1, "", "get_metadata_routing"], [439, 2, 1, "", "get_params"], [439, 2, 1, "", "get_precision"], [439, 2, 1, "", "mahalanobis"], [439, 2, 1, "", "reweight_covariance"], [439, 2, 1, "", "score"], [439, 2, 1, "", "set_params"], [439, 2, 1, "", "set_score_request"]], "sklearn.covariance.OAS": [[440, 2, 1, "", "error_norm"], [440, 2, 1, "", "fit"], [440, 2, 1, "", "get_metadata_routing"], [440, 2, 1, "", "get_params"], [440, 2, 1, "", "get_precision"], [440, 2, 1, "", "mahalanobis"], [440, 2, 1, "", "score"], [440, 2, 1, "", "set_params"], [440, 2, 1, "", "set_score_request"]], "sklearn.covariance.ShrunkCovariance": [[441, 2, 1, "", "error_norm"], [441, 2, 1, "", "fit"], [441, 2, 1, "", "get_metadata_routing"], [441, 2, 1, "", "get_params"], [441, 2, 1, "", "get_precision"], [441, 2, 1, "", "mahalanobis"], [441, 2, 1, "", "score"], [441, 2, 1, "", "set_params"], [441, 2, 1, "", "set_score_request"]], "sklearn.cross_decomposition": [[447, 1, 1, "", "CCA"], [448, 1, 1, "", "PLSCanonical"], [449, 1, 1, "", "PLSRegression"], [450, 1, 1, "", "PLSSVD"]], "sklearn.cross_decomposition.CCA": [[447, 2, 1, "", "fit"], [447, 2, 1, "", "fit_transform"], [447, 2, 1, "", "get_feature_names_out"], [447, 2, 1, "", "get_metadata_routing"], [447, 2, 1, "", "get_params"], [447, 2, 1, "", "inverse_transform"], [447, 2, 1, "", "predict"], [447, 2, 1, "", "score"], [447, 2, 1, "", "set_output"], [447, 2, 1, "", "set_params"], [447, 2, 1, "", "set_predict_request"], [447, 2, 1, "", "set_score_request"], [447, 2, 1, "", "set_transform_request"], [447, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSCanonical": [[448, 2, 1, "", "fit"], [448, 2, 1, "", "fit_transform"], [448, 2, 1, "", "get_feature_names_out"], [448, 2, 1, "", "get_metadata_routing"], [448, 2, 1, "", "get_params"], [448, 2, 1, "", "inverse_transform"], [448, 2, 1, "", "predict"], [448, 2, 1, "", "score"], [448, 2, 1, "", "set_output"], [448, 2, 1, "", "set_params"], [448, 2, 1, "", "set_predict_request"], [448, 2, 1, "", "set_score_request"], [448, 2, 1, "", "set_transform_request"], [448, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSRegression": [[449, 2, 1, "", "fit"], [449, 2, 1, "", "fit_transform"], [449, 2, 1, "", "get_feature_names_out"], [449, 2, 1, "", "get_metadata_routing"], [449, 2, 1, "", "get_params"], [449, 2, 1, "", "inverse_transform"], [449, 2, 1, "", "predict"], [449, 2, 1, "", "score"], [449, 2, 1, "", "set_output"], [449, 2, 1, "", "set_params"], [449, 2, 1, "", "set_predict_request"], [449, 2, 1, "", "set_score_request"], [449, 2, 1, "", "set_transform_request"], [449, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSSVD": [[450, 2, 1, "", "fit"], [450, 2, 1, "", "fit_transform"], [450, 2, 1, "", "get_feature_names_out"], [450, 2, 1, "", "get_metadata_routing"], [450, 2, 1, "", "get_params"], [450, 2, 1, "", "set_output"], [450, 2, 1, "", "set_params"], [450, 2, 1, "", "transform"]], "sklearn.datasets": [[451, 4, 1, "", "clear_data_home"], [452, 4, 1, "", "dump_svmlight_file"], [453, 4, 1, "", "fetch_20newsgroups"], [454, 4, 1, "", "fetch_20newsgroups_vectorized"], [455, 4, 1, "", "fetch_california_housing"], [456, 4, 1, "", "fetch_covtype"], [457, 4, 1, "", "fetch_kddcup99"], [458, 4, 1, "", "fetch_lfw_pairs"], [459, 4, 1, "", "fetch_lfw_people"], [460, 4, 1, "", "fetch_olivetti_faces"], [461, 4, 1, "", "fetch_openml"], [462, 4, 1, "", "fetch_rcv1"], [463, 4, 1, "", "fetch_species_distributions"], [464, 4, 1, "", "get_data_home"], [465, 4, 1, "", "load_breast_cancer"], [466, 4, 1, "", "load_diabetes"], [467, 4, 1, "", "load_digits"], [468, 4, 1, "", "load_files"], [469, 4, 1, "", "load_iris"], [470, 4, 1, "", "load_linnerud"], [471, 4, 1, "", "load_sample_image"], [472, 4, 1, "", "load_sample_images"], [473, 4, 1, "", "load_svmlight_file"], [474, 4, 1, "", "load_svmlight_files"], [475, 4, 1, "", "load_wine"], [476, 4, 1, "", "make_biclusters"], [477, 4, 1, "", "make_blobs"], [478, 4, 1, "", "make_checkerboard"], [479, 4, 1, "", "make_circles"], [480, 4, 1, "", "make_classification"], [481, 4, 1, "", "make_friedman1"], [482, 4, 1, "", "make_friedman2"], [483, 4, 1, "", "make_friedman3"], [484, 4, 1, "", "make_gaussian_quantiles"], [485, 4, 1, "", "make_hastie_10_2"], [486, 4, 1, "", "make_low_rank_matrix"], [487, 4, 1, "", "make_moons"], [488, 4, 1, "", "make_multilabel_classification"], [489, 4, 1, "", "make_regression"], [490, 4, 1, "", "make_s_curve"], [491, 4, 1, "", "make_sparse_coded_signal"], [492, 4, 1, "", "make_sparse_spd_matrix"], [493, 4, 1, "", "make_sparse_uncorrelated"], [494, 4, 1, "", "make_spd_matrix"], [495, 4, 1, "", "make_swiss_roll"]], "sklearn.decomposition": [[496, 1, 1, "", "DictionaryLearning"], [497, 1, 1, "", "FactorAnalysis"], [498, 1, 1, "", "FastICA"], [499, 1, 1, "", "IncrementalPCA"], [500, 1, 1, "", "KernelPCA"], [501, 1, 1, "", "LatentDirichletAllocation"], [502, 1, 1, "", "MiniBatchDictionaryLearning"], [503, 1, 1, "", "MiniBatchNMF"], [504, 1, 1, "", "MiniBatchSparsePCA"], [505, 1, 1, "", "NMF"], [506, 1, 1, "", "PCA"], [507, 1, 1, "", "SparseCoder"], [508, 1, 1, "", "SparsePCA"], [509, 1, 1, "", "TruncatedSVD"], [510, 4, 1, "", "dict_learning"], [511, 4, 1, "", "dict_learning_online"], [386, 4, 1, "", "fastica"], [512, 4, 1, "", "non_negative_factorization"], [513, 4, 1, "", "sparse_encode"]], "sklearn.decomposition.DictionaryLearning": [[496, 2, 1, "", "fit"], [496, 2, 1, "", "fit_transform"], [496, 2, 1, "", "get_feature_names_out"], [496, 2, 1, "", "get_metadata_routing"], [496, 2, 1, "", "get_params"], [496, 2, 1, "", "set_output"], [496, 2, 1, "", "set_params"], [496, 2, 1, "", "transform"]], "sklearn.decomposition.FactorAnalysis": [[497, 2, 1, "", "fit"], [497, 2, 1, "", "fit_transform"], [497, 2, 1, "", "get_covariance"], [497, 2, 1, "", "get_feature_names_out"], [497, 2, 1, "", "get_metadata_routing"], [497, 2, 1, "", "get_params"], [497, 2, 1, "", "get_precision"], [497, 2, 1, "", "score"], [497, 2, 1, "", "score_samples"], [497, 2, 1, "", "set_output"], [497, 2, 1, "", "set_params"], [497, 2, 1, "", "transform"]], "sklearn.decomposition.FastICA": [[498, 2, 1, "", "fit"], [498, 2, 1, "", "fit_transform"], [498, 2, 1, "", "get_feature_names_out"], [498, 2, 1, "", "get_metadata_routing"], [498, 2, 1, "", "get_params"], [498, 2, 1, "", "inverse_transform"], [498, 2, 1, "", "set_inverse_transform_request"], [498, 2, 1, "", "set_output"], [498, 2, 1, "", "set_params"], [498, 2, 1, "", "set_transform_request"], [498, 2, 1, "", "transform"]], "sklearn.decomposition.IncrementalPCA": [[499, 2, 1, "", "fit"], [499, 2, 1, "", "fit_transform"], [499, 2, 1, "", "get_covariance"], [499, 2, 1, "", "get_feature_names_out"], [499, 2, 1, "", "get_metadata_routing"], [499, 2, 1, "", "get_params"], [499, 2, 1, "", "get_precision"], [499, 2, 1, "", "inverse_transform"], [499, 2, 1, "", "partial_fit"], [499, 2, 1, "", "set_output"], [499, 2, 1, "", "set_params"], [499, 2, 1, "", "set_partial_fit_request"], [499, 2, 1, "", "transform"]], "sklearn.decomposition.KernelPCA": [[500, 2, 1, "", "fit"], [500, 2, 1, "", "fit_transform"], [500, 2, 1, "", "get_feature_names_out"], [500, 2, 1, "", "get_metadata_routing"], [500, 2, 1, "", "get_params"], [500, 2, 1, "", "inverse_transform"], [500, 2, 1, "", "set_output"], [500, 2, 1, "", "set_params"], [500, 2, 1, "", "transform"]], "sklearn.decomposition.LatentDirichletAllocation": [[501, 2, 1, "", "fit"], [501, 2, 1, "", "fit_transform"], [501, 2, 1, "", "get_feature_names_out"], [501, 2, 1, "", "get_metadata_routing"], [501, 2, 1, "", "get_params"], [501, 2, 1, "", "partial_fit"], [501, 2, 1, "", "perplexity"], [501, 2, 1, "", "score"], [501, 2, 1, "", "set_output"], [501, 2, 1, "", "set_params"], [501, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchDictionaryLearning": [[502, 2, 1, "", "fit"], [502, 2, 1, "", "fit_transform"], [502, 2, 1, "", "get_feature_names_out"], [502, 2, 1, "", "get_metadata_routing"], [502, 2, 1, "", "get_params"], [502, 2, 1, "", "partial_fit"], [502, 2, 1, "", "set_output"], [502, 2, 1, "", "set_params"], [502, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchNMF": [[503, 2, 1, "", "fit"], [503, 2, 1, "", "fit_transform"], [503, 2, 1, "", "get_feature_names_out"], [503, 2, 1, "", "get_metadata_routing"], [503, 2, 1, "", "get_params"], [503, 2, 1, "", "inverse_transform"], [503, 2, 1, "", "partial_fit"], [503, 2, 1, "", "set_output"], [503, 2, 1, "", "set_params"], [503, 2, 1, "", "set_partial_fit_request"], [503, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchSparsePCA": [[504, 2, 1, "", "fit"], [504, 2, 1, "", "fit_transform"], [504, 2, 1, "", "get_feature_names_out"], [504, 2, 1, "", "get_metadata_routing"], [504, 2, 1, "", "get_params"], [504, 2, 1, "", "inverse_transform"], [504, 2, 1, "", "set_output"], [504, 2, 1, "", "set_params"], [504, 2, 1, "", "transform"]], "sklearn.decomposition.NMF": [[505, 2, 1, "", "fit"], [505, 2, 1, "", "fit_transform"], [505, 2, 1, "", "get_feature_names_out"], [505, 2, 1, "", "get_metadata_routing"], [505, 2, 1, "", "get_params"], [505, 2, 1, "", "inverse_transform"], [505, 2, 1, "", "set_output"], [505, 2, 1, "", "set_params"], [505, 2, 1, "", "transform"]], "sklearn.decomposition.PCA": [[506, 2, 1, "", "fit"], [506, 2, 1, "", "fit_transform"], [506, 2, 1, "", "get_covariance"], [506, 2, 1, "", "get_feature_names_out"], [506, 2, 1, "", "get_metadata_routing"], [506, 2, 1, "", "get_params"], [506, 2, 1, "", "get_precision"], [506, 2, 1, "", "inverse_transform"], [506, 2, 1, "", "score"], [506, 2, 1, "", "score_samples"], [506, 2, 1, "", "set_output"], [506, 2, 1, "", "set_params"], [506, 2, 1, "", "transform"]], "sklearn.decomposition.SparseCoder": [[507, 2, 1, "", "fit"], [507, 2, 1, "", "fit_transform"], [507, 2, 1, "", "get_feature_names_out"], [507, 2, 1, "", "get_metadata_routing"], [507, 2, 1, "", "get_params"], [507, 3, 1, "", "n_components_"], [507, 3, 1, "", "n_features_in_"], [507, 2, 1, "", "set_output"], [507, 2, 1, "", "set_params"], [507, 2, 1, "", "transform"]], "sklearn.decomposition.SparsePCA": [[508, 2, 1, "", "fit"], [508, 2, 1, "", "fit_transform"], [508, 2, 1, "", "get_feature_names_out"], [508, 2, 1, "", "get_metadata_routing"], [508, 2, 1, "", "get_params"], [508, 2, 1, "", "inverse_transform"], [508, 2, 1, "", "set_output"], [508, 2, 1, "", "set_params"], [508, 2, 1, "", "transform"]], "sklearn.decomposition.TruncatedSVD": [[509, 2, 1, "", "fit"], [509, 2, 1, "", "fit_transform"], [509, 2, 1, "", "get_feature_names_out"], [509, 2, 1, "", "get_metadata_routing"], [509, 2, 1, "", "get_params"], [509, 2, 1, "", "inverse_transform"], [509, 2, 1, "", "set_output"], [509, 2, 1, "", "set_params"], [509, 2, 1, "", "transform"]], "sklearn.discriminant_analysis": [[514, 1, 1, "", "LinearDiscriminantAnalysis"], [515, 1, 1, "", "QuadraticDiscriminantAnalysis"]], "sklearn.discriminant_analysis.LinearDiscriminantAnalysis": [[514, 2, 1, "", "decision_function"], [514, 2, 1, "", "fit"], [514, 2, 1, "", "fit_transform"], [514, 2, 1, "", "get_feature_names_out"], [514, 2, 1, "", "get_metadata_routing"], [514, 2, 1, "", "get_params"], [514, 2, 1, "", "predict"], [514, 2, 1, "", "predict_log_proba"], [514, 2, 1, "", "predict_proba"], [514, 2, 1, "", "score"], [514, 2, 1, "", "set_output"], [514, 2, 1, "", "set_params"], [514, 2, 1, "", "set_score_request"], [514, 2, 1, "", "transform"]], "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis": [[515, 2, 1, "", "decision_function"], [515, 2, 1, "", "fit"], [515, 2, 1, "", "get_metadata_routing"], [515, 2, 1, "", "get_params"], [515, 2, 1, "", "predict"], [515, 2, 1, "", "predict_log_proba"], [515, 2, 1, "", "predict_proba"], [515, 2, 1, "", "score"], [515, 2, 1, "", "set_params"], [515, 2, 1, "", "set_score_request"]], "sklearn.dummy": [[516, 1, 1, "", "DummyClassifier"], [517, 1, 1, "", "DummyRegressor"]], "sklearn.dummy.DummyClassifier": [[516, 2, 1, "", "fit"], [516, 2, 1, "", "get_metadata_routing"], [516, 2, 1, "", "get_params"], [516, 2, 1, "", "predict"], [516, 2, 1, "", "predict_log_proba"], [516, 2, 1, "", "predict_proba"], [516, 2, 1, "", "score"], [516, 2, 1, "", "set_fit_request"], [516, 2, 1, "", "set_params"], [516, 2, 1, "", "set_score_request"]], "sklearn.dummy.DummyRegressor": [[517, 2, 1, "", "fit"], [517, 2, 1, "", "get_metadata_routing"], [517, 2, 1, "", "get_params"], [517, 2, 1, "", "predict"], [517, 2, 1, "", "score"], [517, 2, 1, "", "set_fit_request"], [517, 2, 1, "", "set_params"], [517, 2, 1, "", "set_predict_request"], [517, 2, 1, "", "set_score_request"]], "sklearn.ensemble": [[518, 1, 1, "", "AdaBoostClassifier"], [519, 1, 1, "", "AdaBoostRegressor"], [520, 1, 1, "", "BaggingClassifier"], [521, 1, 1, "", "BaggingRegressor"], [522, 1, 1, "", "ExtraTreesClassifier"], [523, 1, 1, "", "ExtraTreesRegressor"], [524, 1, 1, "", "GradientBoostingClassifier"], [525, 1, 1, "", "GradientBoostingRegressor"], [526, 1, 1, "", "HistGradientBoostingClassifier"], [527, 1, 1, "", "HistGradientBoostingRegressor"], [528, 1, 1, "", "IsolationForest"], [529, 1, 1, "", "RandomForestClassifier"], [530, 1, 1, "", "RandomForestRegressor"], [531, 1, 1, "", "RandomTreesEmbedding"], [532, 1, 1, "", "StackingClassifier"], [533, 1, 1, "", "StackingRegressor"], [534, 1, 1, "", "VotingClassifier"], [535, 1, 1, "", "VotingRegressor"]], "sklearn.ensemble.AdaBoostClassifier": [[518, 2, 1, "", "decision_function"], [518, 3, 1, "", "feature_importances_"], [518, 2, 1, "", "fit"], [518, 2, 1, "", "get_metadata_routing"], [518, 2, 1, "", "get_params"], [518, 2, 1, "", "predict"], [518, 2, 1, "", "predict_log_proba"], [518, 2, 1, "", "predict_proba"], [518, 2, 1, "", "score"], [518, 2, 1, "", "set_fit_request"], [518, 2, 1, "", "set_params"], [518, 2, 1, "", "set_score_request"], [518, 2, 1, "", "staged_decision_function"], [518, 2, 1, "", "staged_predict"], [518, 2, 1, "", "staged_predict_proba"], [518, 2, 1, "", "staged_score"]], "sklearn.ensemble.AdaBoostRegressor": [[519, 3, 1, "", "feature_importances_"], [519, 2, 1, "", "fit"], [519, 2, 1, "", "get_metadata_routing"], [519, 2, 1, "", "get_params"], [519, 2, 1, "", "predict"], [519, 2, 1, "", "score"], [519, 2, 1, "", "set_fit_request"], [519, 2, 1, "", "set_params"], [519, 2, 1, "", "set_score_request"], [519, 2, 1, "", "staged_predict"], [519, 2, 1, "", "staged_score"]], "sklearn.ensemble.BaggingClassifier": [[520, 2, 1, "", "decision_function"], [520, 3, 1, "", "estimators_samples_"], [520, 2, 1, "", "fit"], [520, 2, 1, "", "get_metadata_routing"], [520, 2, 1, "", "get_params"], [520, 2, 1, "", "predict"], [520, 2, 1, "", "predict_log_proba"], [520, 2, 1, "", "predict_proba"], [520, 2, 1, "", "score"], [520, 2, 1, "", "set_fit_request"], [520, 2, 1, "", "set_params"], [520, 2, 1, "", "set_score_request"]], "sklearn.ensemble.BaggingRegressor": [[521, 3, 1, "", "estimators_samples_"], [521, 2, 1, "", "fit"], [521, 2, 1, "", "get_metadata_routing"], [521, 2, 1, "", "get_params"], [521, 2, 1, "", "predict"], [521, 2, 1, "", "score"], [521, 2, 1, "", "set_fit_request"], [521, 2, 1, "", "set_params"], [521, 2, 1, "", "set_score_request"]], "sklearn.ensemble.ExtraTreesClassifier": [[522, 2, 1, "", "apply"], [522, 2, 1, "", "decision_path"], [522, 3, 1, "", "estimators_samples_"], [522, 3, 1, "", "feature_importances_"], [522, 2, 1, "", "fit"], [522, 2, 1, "", "get_metadata_routing"], [522, 2, 1, "", "get_params"], [522, 2, 1, "", "predict"], [522, 2, 1, "", "predict_log_proba"], [522, 2, 1, "", "predict_proba"], [522, 2, 1, "", "score"], [522, 2, 1, "", "set_fit_request"], [522, 2, 1, "", "set_params"], [522, 2, 1, "", "set_score_request"]], "sklearn.ensemble.ExtraTreesRegressor": [[523, 2, 1, "", "apply"], [523, 2, 1, "", "decision_path"], [523, 3, 1, "", "estimators_samples_"], [523, 3, 1, "", "feature_importances_"], [523, 2, 1, "", "fit"], [523, 2, 1, "", "get_metadata_routing"], [523, 2, 1, "", "get_params"], [523, 2, 1, "", "predict"], [523, 2, 1, "", "score"], [523, 2, 1, "", "set_fit_request"], [523, 2, 1, "", "set_params"], [523, 2, 1, "", "set_score_request"]], "sklearn.ensemble.GradientBoostingClassifier": [[524, 2, 1, "", "apply"], [524, 2, 1, "", "decision_function"], [524, 3, 1, "", "feature_importances_"], [524, 2, 1, "", "fit"], [524, 2, 1, "", "get_metadata_routing"], [524, 2, 1, "", "get_params"], [524, 2, 1, "", "predict"], [524, 2, 1, "", "predict_log_proba"], [524, 2, 1, "", "predict_proba"], [524, 2, 1, "", "score"], [524, 2, 1, "", "set_fit_request"], [524, 2, 1, "", "set_params"], [524, 2, 1, "", "set_score_request"], [524, 2, 1, "", "staged_decision_function"], [524, 2, 1, "", "staged_predict"], [524, 2, 1, "", "staged_predict_proba"]], "sklearn.ensemble.GradientBoostingRegressor": [[525, 2, 1, "", "apply"], [525, 3, 1, "", "feature_importances_"], [525, 2, 1, "", "fit"], [525, 2, 1, "", "get_metadata_routing"], [525, 2, 1, "", "get_params"], [525, 2, 1, "", "predict"], [525, 2, 1, "", "score"], [525, 2, 1, "", "set_fit_request"], [525, 2, 1, "", "set_params"], [525, 2, 1, "", "set_score_request"], [525, 2, 1, "", "staged_predict"]], "sklearn.ensemble.HistGradientBoostingClassifier": [[526, 2, 1, "", "decision_function"], [526, 2, 1, "", "fit"], [526, 2, 1, "", "get_metadata_routing"], [526, 2, 1, "", "get_params"], [526, 3, 1, "", "n_iter_"], [526, 2, 1, "", "predict"], [526, 2, 1, "", "predict_proba"], [526, 2, 1, "", "score"], [526, 2, 1, "", "set_fit_request"], [526, 2, 1, "", "set_params"], [526, 2, 1, "", "set_score_request"], [526, 2, 1, "", "staged_decision_function"], [526, 2, 1, "", "staged_predict"], [526, 2, 1, "", "staged_predict_proba"]], "sklearn.ensemble.HistGradientBoostingRegressor": [[527, 2, 1, "", "fit"], [527, 2, 1, "", "get_metadata_routing"], [527, 2, 1, "", "get_params"], [527, 3, 1, "", "n_iter_"], [527, 2, 1, "", "predict"], [527, 2, 1, "", "score"], [527, 2, 1, "", "set_fit_request"], [527, 2, 1, "", "set_params"], [527, 2, 1, "", "set_score_request"], [527, 2, 1, "", "staged_predict"]], "sklearn.ensemble.IsolationForest": [[528, 2, 1, "", "decision_function"], [528, 3, 1, "", "estimators_samples_"], [528, 2, 1, "", "fit"], [528, 2, 1, "", "fit_predict"], [528, 2, 1, "", "get_metadata_routing"], [528, 2, 1, "", "get_params"], [528, 2, 1, "", "predict"], [528, 2, 1, "", "score_samples"], [528, 2, 1, "", "set_fit_request"], [528, 2, 1, "", "set_params"]], "sklearn.ensemble.RandomForestClassifier": [[529, 2, 1, "", "apply"], [529, 2, 1, "", "decision_path"], [529, 3, 1, "", "estimators_samples_"], [529, 3, 1, "", "feature_importances_"], [529, 2, 1, "", "fit"], [529, 2, 1, "", "get_metadata_routing"], [529, 2, 1, "", "get_params"], [529, 2, 1, "", "predict"], [529, 2, 1, "", "predict_log_proba"], [529, 2, 1, "", "predict_proba"], [529, 2, 1, "", "score"], [529, 2, 1, "", "set_fit_request"], [529, 2, 1, "", "set_params"], [529, 2, 1, "", "set_score_request"]], "sklearn.ensemble.RandomForestRegressor": [[530, 2, 1, "", "apply"], [530, 2, 1, "", "decision_path"], [530, 3, 1, "", "estimators_samples_"], [530, 3, 1, "", "feature_importances_"], [530, 2, 1, "", "fit"], [530, 2, 1, "", "get_metadata_routing"], [530, 2, 1, "", "get_params"], [530, 2, 1, "", "predict"], [530, 2, 1, "", "score"], [530, 2, 1, "", "set_fit_request"], [530, 2, 1, "", "set_params"], [530, 2, 1, "", "set_score_request"]], "sklearn.ensemble.RandomTreesEmbedding": [[531, 2, 1, "", "apply"], [531, 2, 1, "", "decision_path"], [531, 3, 1, "", "estimators_samples_"], [531, 3, 1, "", "feature_importances_"], [531, 2, 1, "", "fit"], [531, 2, 1, "", "fit_transform"], [531, 2, 1, "", "get_feature_names_out"], [531, 2, 1, "", "get_metadata_routing"], [531, 2, 1, "", "get_params"], [531, 2, 1, "", "set_fit_request"], [531, 2, 1, "", "set_output"], [531, 2, 1, "", "set_params"], [531, 2, 1, "", "transform"]], "sklearn.ensemble.StackingClassifier": [[532, 2, 1, "", "decision_function"], [532, 2, 1, "", "fit"], [532, 2, 1, "", "fit_transform"], [532, 2, 1, "", "get_feature_names_out"], [532, 2, 1, "", "get_metadata_routing"], [532, 2, 1, "", "get_params"], [532, 3, 1, "", "n_features_in_"], [532, 3, 1, "", "named_estimators"], [532, 2, 1, "", "predict"], [532, 2, 1, "", "predict_proba"], [532, 2, 1, "", "score"], [532, 2, 1, "", "set_fit_request"], [532, 2, 1, "", "set_output"], [532, 2, 1, "", "set_params"], [532, 2, 1, "", "set_score_request"], [532, 2, 1, "", "transform"]], "sklearn.ensemble.StackingRegressor": [[533, 2, 1, "", "fit"], [533, 2, 1, "", "fit_transform"], [533, 2, 1, "", "get_feature_names_out"], [533, 2, 1, "", "get_metadata_routing"], [533, 2, 1, "", "get_params"], [533, 3, 1, "", "n_features_in_"], [533, 3, 1, "", "named_estimators"], [533, 2, 1, "", "predict"], [533, 2, 1, "", "score"], [533, 2, 1, "", "set_fit_request"], [533, 2, 1, "", "set_output"], [533, 2, 1, "", "set_params"], [533, 2, 1, "", "set_score_request"], [533, 2, 1, "", "transform"]], "sklearn.ensemble.VotingClassifier": [[534, 2, 1, "", "fit"], [534, 2, 1, "", "fit_transform"], [534, 2, 1, "", "get_feature_names_out"], [534, 2, 1, "", "get_metadata_routing"], [534, 2, 1, "", "get_params"], [534, 3, 1, "", "n_features_in_"], [534, 3, 1, "", "named_estimators"], [534, 2, 1, "", "predict"], [534, 2, 1, "", "predict_proba"], [534, 2, 1, "", "score"], [534, 2, 1, "", "set_fit_request"], [534, 2, 1, "", "set_output"], [534, 2, 1, "", "set_params"], [534, 2, 1, "", "set_score_request"], [534, 2, 1, "", "transform"]], "sklearn.ensemble.VotingRegressor": [[535, 2, 1, "", "fit"], [535, 2, 1, "", "fit_transform"], [535, 2, 1, "", "get_feature_names_out"], [535, 2, 1, "", "get_metadata_routing"], [535, 2, 1, "", "get_params"], [535, 3, 1, "", "n_features_in_"], [535, 3, 1, "", "named_estimators"], [535, 2, 1, "", "predict"], [535, 2, 1, "", "score"], [535, 2, 1, "", "set_fit_request"], [535, 2, 1, "", "set_output"], [535, 2, 1, "", "set_params"], [535, 2, 1, "", "set_score_request"], [535, 2, 1, "", "transform"]], "sklearn.exceptions": [[536, 1, 1, "", "ConvergenceWarning"], [537, 1, 1, "", "DataConversionWarning"], [538, 1, 1, "", "DataDimensionalityWarning"], [539, 1, 1, "", "EfficiencyWarning"], [540, 1, 1, "", "FitFailedWarning"], [541, 1, 1, "", "InconsistentVersionWarning"], [542, 1, 1, "", "NotFittedError"], [543, 1, 1, "", "UndefinedMetricWarning"]], "sklearn.exceptions.ConvergenceWarning": [[536, 2, 1, "", "with_traceback"]], "sklearn.exceptions.DataConversionWarning": [[537, 2, 1, "", "with_traceback"]], "sklearn.exceptions.DataDimensionalityWarning": [[538, 2, 1, "", "with_traceback"]], "sklearn.exceptions.EfficiencyWarning": [[539, 2, 1, "", "with_traceback"]], "sklearn.exceptions.FitFailedWarning": [[540, 2, 1, "", "with_traceback"]], "sklearn.exceptions.InconsistentVersionWarning": [[541, 2, 1, "", "with_traceback"]], "sklearn.exceptions.NotFittedError": [[542, 2, 1, "", "with_traceback"]], "sklearn.exceptions.UndefinedMetricWarning": [[543, 2, 1, "", "with_traceback"]], "sklearn.experimental": [[544, 0, 0, "-", "enable_halving_search_cv"], [545, 0, 0, "-", "enable_iterative_imputer"]], "sklearn.feature_extraction": [[546, 1, 1, "", "DictVectorizer"], [547, 1, 1, "", "FeatureHasher"], [373, 0, 0, "-", "image"], [373, 0, 0, "-", "text"]], "sklearn.feature_extraction.DictVectorizer": [[546, 2, 1, "", "fit"], [546, 2, 1, "", "fit_transform"], [546, 2, 1, "", "get_feature_names_out"], [546, 2, 1, "", "get_metadata_routing"], [546, 2, 1, "", "get_params"], [546, 2, 1, "", "inverse_transform"], [546, 2, 1, "", "restrict"], [546, 2, 1, "", "set_inverse_transform_request"], [546, 2, 1, "", "set_output"], [546, 2, 1, "", "set_params"], [546, 2, 1, "", "transform"]], "sklearn.feature_extraction.FeatureHasher": [[547, 2, 1, "", "fit"], [547, 2, 1, "", "fit_transform"], [547, 2, 1, "", "get_metadata_routing"], [547, 2, 1, "", "get_params"], [547, 2, 1, "", "set_output"], [547, 2, 1, "", "set_params"], [547, 2, 1, "", "set_transform_request"], [547, 2, 1, "", "transform"]], "sklearn.feature_extraction.image": [[548, 1, 1, "", "PatchExtractor"], [549, 4, 1, "", "extract_patches_2d"], [550, 4, 1, "", "grid_to_graph"], [551, 4, 1, "", "img_to_graph"], [552, 4, 1, "", "reconstruct_from_patches_2d"]], "sklearn.feature_extraction.image.PatchExtractor": [[548, 2, 1, "", "fit"], [548, 2, 1, "", "fit_transform"], [548, 2, 1, "", "get_metadata_routing"], [548, 2, 1, "", "get_params"], [548, 2, 1, "", "set_output"], [548, 2, 1, "", "set_params"], [548, 2, 1, "", "transform"]], "sklearn.feature_extraction.text": [[553, 1, 1, "", "CountVectorizer"], [554, 1, 1, "", "HashingVectorizer"], [555, 1, 1, "", "TfidfTransformer"], [556, 1, 1, "", "TfidfVectorizer"]], "sklearn.feature_extraction.text.CountVectorizer": [[553, 2, 1, "", "build_analyzer"], [553, 2, 1, "", "build_preprocessor"], [553, 2, 1, "", "build_tokenizer"], [553, 2, 1, "", "decode"], [553, 2, 1, "", "fit"], [553, 2, 1, "", "fit_transform"], [553, 2, 1, "", "get_feature_names_out"], [553, 2, 1, "", "get_metadata_routing"], [553, 2, 1, "", "get_params"], [553, 2, 1, "", "get_stop_words"], [553, 2, 1, "", "inverse_transform"], [553, 2, 1, "", "set_fit_request"], [553, 2, 1, "", "set_params"], [553, 2, 1, "", "set_transform_request"], [553, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.HashingVectorizer": [[554, 2, 1, "", "build_analyzer"], [554, 2, 1, "", "build_preprocessor"], [554, 2, 1, "", "build_tokenizer"], [554, 2, 1, "", "decode"], [554, 2, 1, "", "fit"], [554, 2, 1, "", "fit_transform"], [554, 2, 1, "", "get_metadata_routing"], [554, 2, 1, "", "get_params"], [554, 2, 1, "", "get_stop_words"], [554, 2, 1, "", "partial_fit"], [554, 2, 1, "", "set_output"], [554, 2, 1, "", "set_params"], [554, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.TfidfTransformer": [[555, 2, 1, "", "fit"], [555, 2, 1, "", "fit_transform"], [555, 2, 1, "", "get_feature_names_out"], [555, 2, 1, "", "get_metadata_routing"], [555, 2, 1, "", "get_params"], [555, 2, 1, "", "set_output"], [555, 2, 1, "", "set_params"], [555, 2, 1, "", "set_transform_request"], [555, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.TfidfVectorizer": [[556, 2, 1, "", "build_analyzer"], [556, 2, 1, "", "build_preprocessor"], [556, 2, 1, "", "build_tokenizer"], [556, 2, 1, "", "decode"], [556, 2, 1, "", "fit"], [556, 2, 1, "", "fit_transform"], [556, 2, 1, "", "get_feature_names_out"], [556, 2, 1, "", "get_metadata_routing"], [556, 2, 1, "", "get_params"], [556, 2, 1, "", "get_stop_words"], [556, 3, 1, "", "idf_"], [556, 2, 1, "", "inverse_transform"], [556, 2, 1, "", "set_fit_request"], [556, 2, 1, "", "set_params"], [556, 2, 1, "", "set_transform_request"], [556, 2, 1, "", "transform"]], "sklearn.feature_selection": [[557, 1, 1, "", "GenericUnivariateSelect"], [558, 1, 1, "", "RFE"], [559, 1, 1, "", "RFECV"], [560, 1, 1, "", "SelectFdr"], [561, 1, 1, "", "SelectFpr"], [562, 1, 1, "", "SelectFromModel"], [563, 1, 1, "", "SelectFwe"], [564, 1, 1, "", "SelectKBest"], [565, 1, 1, "", "SelectPercentile"], [566, 1, 1, "", "SelectorMixin"], [567, 1, 1, "", "SequentialFeatureSelector"], [568, 1, 1, "", "VarianceThreshold"], [569, 4, 1, "", "chi2"], [570, 4, 1, "", "f_classif"], [571, 4, 1, "", "f_regression"], [572, 4, 1, "", "mutual_info_classif"], [573, 4, 1, "", "mutual_info_regression"], [574, 4, 1, "", "r_regression"]], "sklearn.feature_selection.GenericUnivariateSelect": [[557, 2, 1, "", "fit"], [557, 2, 1, "", "fit_transform"], [557, 2, 1, "", "get_feature_names_out"], [557, 2, 1, "", "get_metadata_routing"], [557, 2, 1, "", "get_params"], [557, 2, 1, "", "get_support"], [557, 2, 1, "", "inverse_transform"], [557, 2, 1, "", "set_output"], [557, 2, 1, "", "set_params"], [557, 2, 1, "", "transform"]], "sklearn.feature_selection.RFE": [[558, 3, 1, "", "classes_"], [558, 2, 1, "", "decision_function"], [558, 2, 1, "", "fit"], [558, 2, 1, "", "fit_transform"], [558, 2, 1, "", "get_feature_names_out"], [558, 2, 1, "", "get_metadata_routing"], [558, 2, 1, "", "get_params"], [558, 2, 1, "", "get_support"], [558, 2, 1, "", "inverse_transform"], [558, 2, 1, "", "predict"], [558, 2, 1, "", "predict_log_proba"], [558, 2, 1, "", "predict_proba"], [558, 2, 1, "", "score"], [558, 2, 1, "", "set_output"], [558, 2, 1, "", "set_params"], [558, 2, 1, "", "transform"]], "sklearn.feature_selection.RFECV": [[559, 3, 1, "", "classes_"], [559, 2, 1, "", "decision_function"], [559, 2, 1, "", "fit"], [559, 2, 1, "", "fit_transform"], [559, 2, 1, "", "get_feature_names_out"], [559, 2, 1, "", "get_metadata_routing"], [559, 2, 1, "", "get_params"], [559, 2, 1, "", "get_support"], [559, 2, 1, "", "inverse_transform"], [559, 2, 1, "", "predict"], [559, 2, 1, "", "predict_log_proba"], [559, 2, 1, "", "predict_proba"], [559, 2, 1, "", "score"], [559, 2, 1, "", "set_fit_request"], [559, 2, 1, "", "set_output"], [559, 2, 1, "", "set_params"], [559, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFdr": [[560, 2, 1, "", "fit"], [560, 2, 1, "", "fit_transform"], [560, 2, 1, "", "get_feature_names_out"], [560, 2, 1, "", "get_metadata_routing"], [560, 2, 1, "", "get_params"], [560, 2, 1, "", "get_support"], [560, 2, 1, "", "inverse_transform"], [560, 2, 1, "", "set_output"], [560, 2, 1, "", "set_params"], [560, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFpr": [[561, 2, 1, "", "fit"], [561, 2, 1, "", "fit_transform"], [561, 2, 1, "", "get_feature_names_out"], [561, 2, 1, "", "get_metadata_routing"], [561, 2, 1, "", "get_params"], [561, 2, 1, "", "get_support"], [561, 2, 1, "", "inverse_transform"], [561, 2, 1, "", "set_output"], [561, 2, 1, "", "set_params"], [561, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFromModel": [[562, 2, 1, "", "fit"], [562, 2, 1, "", "fit_transform"], [562, 2, 1, "", "get_feature_names_out"], [562, 2, 1, "", "get_metadata_routing"], [562, 2, 1, "", "get_params"], [562, 2, 1, "", "get_support"], [562, 2, 1, "", "inverse_transform"], [562, 3, 1, "", "n_features_in_"], [562, 2, 1, "", "partial_fit"], [562, 2, 1, "", "set_output"], [562, 2, 1, "", "set_params"], [562, 3, 1, "", "threshold_"], [562, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFwe": [[563, 2, 1, "", "fit"], [563, 2, 1, "", "fit_transform"], [563, 2, 1, "", "get_feature_names_out"], [563, 2, 1, "", "get_metadata_routing"], [563, 2, 1, "", "get_params"], [563, 2, 1, "", "get_support"], [563, 2, 1, "", "inverse_transform"], [563, 2, 1, "", "set_output"], [563, 2, 1, "", "set_params"], [563, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectKBest": [[564, 2, 1, "", "fit"], [564, 2, 1, "", "fit_transform"], [564, 2, 1, "", "get_feature_names_out"], [564, 2, 1, "", "get_metadata_routing"], [564, 2, 1, "", "get_params"], [564, 2, 1, "", "get_support"], [564, 2, 1, "", "inverse_transform"], [564, 2, 1, "", "set_output"], [564, 2, 1, "", "set_params"], [564, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectPercentile": [[565, 2, 1, "", "fit"], [565, 2, 1, "", "fit_transform"], [565, 2, 1, "", "get_feature_names_out"], [565, 2, 1, "", "get_metadata_routing"], [565, 2, 1, "", "get_params"], [565, 2, 1, "", "get_support"], [565, 2, 1, "", "inverse_transform"], [565, 2, 1, "", "set_output"], [565, 2, 1, "", "set_params"], [565, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectorMixin": [[566, 2, 1, "", "fit_transform"], [566, 2, 1, "", "get_feature_names_out"], [566, 2, 1, "", "get_support"], [566, 2, 1, "", "inverse_transform"], [566, 2, 1, "", "set_output"], [566, 2, 1, "", "transform"]], "sklearn.feature_selection.SequentialFeatureSelector": [[567, 2, 1, "", "fit"], [567, 2, 1, "", "fit_transform"], [567, 2, 1, "", "get_feature_names_out"], [567, 2, 1, "", "get_metadata_routing"], [567, 2, 1, "", "get_params"], [567, 2, 1, "", "get_support"], [567, 2, 1, "", "inverse_transform"], [567, 2, 1, "", "set_output"], [567, 2, 1, "", "set_params"], [567, 2, 1, "", "transform"]], "sklearn.feature_selection.VarianceThreshold": [[568, 2, 1, "", "fit"], [568, 2, 1, "", "fit_transform"], [568, 2, 1, "", "get_feature_names_out"], [568, 2, 1, "", "get_metadata_routing"], [568, 2, 1, "", "get_params"], [568, 2, 1, "", "get_support"], [568, 2, 1, "", "inverse_transform"], [568, 2, 1, "", "set_output"], [568, 2, 1, "", "set_params"], [568, 2, 1, "", "transform"]], "sklearn.gaussian_process": [[575, 1, 1, "", "GaussianProcessClassifier"], [576, 1, 1, "", "GaussianProcessRegressor"], [373, 0, 0, "-", "kernels"]], "sklearn.gaussian_process.GaussianProcessClassifier": [[575, 2, 1, "", "fit"], [575, 2, 1, "", "get_metadata_routing"], [575, 2, 1, "", "get_params"], [575, 3, 1, "", "kernel_"], [575, 2, 1, "", "log_marginal_likelihood"], [575, 2, 1, "", "predict"], [575, 2, 1, "", "predict_proba"], [575, 2, 1, "", "score"], [575, 2, 1, "", "set_params"], [575, 2, 1, "", "set_score_request"]], "sklearn.gaussian_process.GaussianProcessRegressor": [[576, 2, 1, "", "fit"], [576, 2, 1, "", "get_metadata_routing"], [576, 2, 1, "", "get_params"], [576, 2, 1, "", "log_marginal_likelihood"], [576, 2, 1, "", "predict"], [576, 2, 1, "", "sample_y"], [576, 2, 1, "", "score"], [576, 2, 1, "", "set_params"], [576, 2, 1, "", "set_predict_request"], [576, 2, 1, "", "set_score_request"]], "sklearn.gaussian_process.kernels": [[577, 1, 1, "", "CompoundKernel"], [578, 1, 1, "", "ConstantKernel"], [579, 1, 1, "", "DotProduct"], [580, 1, 1, "", "ExpSineSquared"], [581, 1, 1, "", "Exponentiation"], [582, 1, 1, "", "Hyperparameter"], [583, 1, 1, "", "Kernel"], [584, 1, 1, "", "Matern"], [585, 1, 1, "", "PairwiseKernel"], [586, 1, 1, "", "Product"], [587, 1, 1, "", "RBF"], [588, 1, 1, "", "RationalQuadratic"], [589, 1, 1, "", "Sum"], [590, 1, 1, "", "WhiteKernel"]], "sklearn.gaussian_process.kernels.CompoundKernel": [[577, 2, 1, "", "__call__"], [577, 3, 1, "", "bounds"], [577, 2, 1, "", "clone_with_theta"], [577, 2, 1, "", "diag"], [577, 2, 1, "", "get_params"], [577, 3, 1, "", "hyperparameters"], [577, 2, 1, "", "is_stationary"], [577, 3, 1, "", "n_dims"], [577, 3, 1, "", "requires_vector_input"], [577, 2, 1, "", "set_params"], [577, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.ConstantKernel": [[578, 2, 1, "", "__call__"], [578, 3, 1, "", "bounds"], [578, 2, 1, "", "clone_with_theta"], [578, 2, 1, "", "diag"], [578, 2, 1, "", "get_params"], [578, 3, 1, "", "hyperparameters"], [578, 2, 1, "", "is_stationary"], [578, 3, 1, "", "n_dims"], [578, 3, 1, "", "requires_vector_input"], [578, 2, 1, "", "set_params"], [578, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.DotProduct": [[579, 2, 1, "", "__call__"], [579, 3, 1, "", "bounds"], [579, 2, 1, "", "clone_with_theta"], [579, 2, 1, "", "diag"], [579, 2, 1, "", "get_params"], [579, 3, 1, "", "hyperparameters"], [579, 2, 1, "", "is_stationary"], [579, 3, 1, "", "n_dims"], [579, 3, 1, "", "requires_vector_input"], [579, 2, 1, "", "set_params"], [579, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.ExpSineSquared": [[580, 2, 1, "", "__call__"], [580, 3, 1, "", "bounds"], [580, 2, 1, "", "clone_with_theta"], [580, 2, 1, "", "diag"], [580, 2, 1, "", "get_params"], [580, 3, 1, "", "hyperparameter_length_scale"], [580, 3, 1, "", "hyperparameters"], [580, 2, 1, "", "is_stationary"], [580, 3, 1, "", "n_dims"], [580, 3, 1, "", "requires_vector_input"], [580, 2, 1, "", "set_params"], [580, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Exponentiation": [[581, 2, 1, "", "__call__"], [581, 3, 1, "", "bounds"], [581, 2, 1, "", "clone_with_theta"], [581, 2, 1, "", "diag"], [581, 2, 1, "", "get_params"], [581, 3, 1, "", "hyperparameters"], [581, 2, 1, "", "is_stationary"], [581, 3, 1, "", "n_dims"], [581, 3, 1, "", "requires_vector_input"], [581, 2, 1, "", "set_params"], [581, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Hyperparameter": [[582, 2, 1, "", "__call__"], [582, 5, 1, "", "bounds"], [582, 2, 1, "", "count"], [582, 5, 1, "", "fixed"], [582, 2, 1, "", "index"], [582, 5, 1, "", "n_elements"], [582, 5, 1, "", "name"], [582, 5, 1, "", "value_type"]], "sklearn.gaussian_process.kernels.Kernel": [[583, 2, 1, "", "__call__"], [583, 3, 1, "", "bounds"], [583, 2, 1, "", "clone_with_theta"], [583, 2, 1, "", "diag"], [583, 2, 1, "", "get_params"], [583, 3, 1, "", "hyperparameters"], [583, 2, 1, "", "is_stationary"], [583, 3, 1, "", "n_dims"], [583, 3, 1, "", "requires_vector_input"], [583, 2, 1, "", "set_params"], [583, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Matern": [[584, 2, 1, "", "__call__"], [584, 3, 1, "", "bounds"], [584, 2, 1, "", "clone_with_theta"], [584, 2, 1, "", "diag"], [584, 2, 1, "", "get_params"], [584, 3, 1, "", "hyperparameters"], [584, 2, 1, "", "is_stationary"], [584, 3, 1, "", "n_dims"], [584, 3, 1, "", "requires_vector_input"], [584, 2, 1, "", "set_params"], [584, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.PairwiseKernel": [[585, 2, 1, "", "__call__"], [585, 3, 1, "", "bounds"], [585, 2, 1, "", "clone_with_theta"], [585, 2, 1, "", "diag"], [585, 2, 1, "", "get_params"], [585, 3, 1, "", "hyperparameters"], [585, 2, 1, "", "is_stationary"], [585, 3, 1, "", "n_dims"], [585, 3, 1, "", "requires_vector_input"], [585, 2, 1, "", "set_params"], [585, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Product": [[586, 2, 1, "", "__call__"], [586, 3, 1, "", "bounds"], [586, 2, 1, "", "clone_with_theta"], [586, 2, 1, "", "diag"], [586, 2, 1, "", "get_params"], [586, 3, 1, "", "hyperparameters"], [586, 2, 1, "", "is_stationary"], [586, 3, 1, "", "n_dims"], [586, 3, 1, "", "requires_vector_input"], [586, 2, 1, "", "set_params"], [586, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.RBF": [[587, 2, 1, "", "__call__"], [587, 3, 1, "", "bounds"], [587, 2, 1, "", "clone_with_theta"], [587, 2, 1, "", "diag"], [587, 2, 1, "", "get_params"], [587, 3, 1, "", "hyperparameters"], [587, 2, 1, "", "is_stationary"], [587, 3, 1, "", "n_dims"], [587, 3, 1, "", "requires_vector_input"], [587, 2, 1, "", "set_params"], [587, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.RationalQuadratic": [[588, 2, 1, "", "__call__"], [588, 3, 1, "", "bounds"], [588, 2, 1, "", "clone_with_theta"], [588, 2, 1, "", "diag"], [588, 2, 1, "", "get_params"], [588, 3, 1, "", "hyperparameters"], [588, 2, 1, "", "is_stationary"], [588, 3, 1, "", "n_dims"], [588, 3, 1, "", "requires_vector_input"], [588, 2, 1, "", "set_params"], [588, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Sum": [[589, 2, 1, "", "__call__"], [589, 3, 1, "", "bounds"], [589, 2, 1, "", "clone_with_theta"], [589, 2, 1, "", "diag"], [589, 2, 1, "", "get_params"], [589, 3, 1, "", "hyperparameters"], [589, 2, 1, "", "is_stationary"], [589, 3, 1, "", "n_dims"], [589, 3, 1, "", "requires_vector_input"], [589, 2, 1, "", "set_params"], [589, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.WhiteKernel": [[590, 2, 1, "", "__call__"], [590, 3, 1, "", "bounds"], [590, 2, 1, "", "clone_with_theta"], [590, 2, 1, "", "diag"], [590, 2, 1, "", "get_params"], [590, 3, 1, "", "hyperparameters"], [590, 2, 1, "", "is_stationary"], [590, 3, 1, "", "n_dims"], [590, 3, 1, "", "requires_vector_input"], [590, 2, 1, "", "set_params"], [590, 3, 1, "", "theta"]], "sklearn.impute": [[592, 1, 1, "", "IterativeImputer"], [593, 1, 1, "", "KNNImputer"], [594, 1, 1, "", "MissingIndicator"], [595, 1, 1, "", "SimpleImputer"]], "sklearn.impute.IterativeImputer": [[592, 2, 1, "", "fit"], [592, 2, 1, "", "fit_transform"], [592, 2, 1, "", "get_feature_names_out"], [592, 2, 1, "", "get_metadata_routing"], [592, 2, 1, "", "get_params"], [592, 2, 1, "", "set_output"], [592, 2, 1, "", "set_params"], [592, 2, 1, "", "transform"]], "sklearn.impute.KNNImputer": [[593, 2, 1, "", "fit"], [593, 2, 1, "", "fit_transform"], [593, 2, 1, "", "get_feature_names_out"], [593, 2, 1, "", "get_metadata_routing"], [593, 2, 1, "", "get_params"], [593, 2, 1, "", "set_output"], [593, 2, 1, "", "set_params"], [593, 2, 1, "", "transform"]], "sklearn.impute.MissingIndicator": [[594, 2, 1, "", "fit"], [594, 2, 1, "", "fit_transform"], [594, 2, 1, "", "get_feature_names_out"], [594, 2, 1, "", "get_metadata_routing"], [594, 2, 1, "", "get_params"], [594, 2, 1, "", "set_output"], [594, 2, 1, "", "set_params"], [594, 2, 1, "", "transform"]], "sklearn.impute.SimpleImputer": [[595, 2, 1, "", "fit"], [595, 2, 1, "", "fit_transform"], [595, 2, 1, "", "get_feature_names_out"], [595, 2, 1, "", "get_metadata_routing"], [595, 2, 1, "", "get_params"], [595, 2, 1, "", "inverse_transform"], [595, 2, 1, "", "set_output"], [595, 2, 1, "", "set_params"], [595, 2, 1, "", "transform"]], "sklearn.inspection": [[596, 1, 1, "", "DecisionBoundaryDisplay"], [597, 1, 1, "", "PartialDependenceDisplay"], [598, 4, 1, "", "partial_dependence"], [599, 4, 1, "", "permutation_importance"]], "sklearn.inspection.DecisionBoundaryDisplay": [[596, 2, 1, "", "from_estimator"], [596, 2, 1, "", "plot"]], "sklearn.inspection.PartialDependenceDisplay": [[597, 2, 1, "", "from_estimator"], [597, 2, 1, "", "plot"]], "sklearn.isotonic": [[600, 1, 1, "", "IsotonicRegression"], [601, 4, 1, "", "check_increasing"], [602, 4, 1, "", "isotonic_regression"]], "sklearn.isotonic.IsotonicRegression": [[600, 2, 1, "", "fit"], [600, 2, 1, "", "fit_transform"], [600, 2, 1, "", "get_feature_names_out"], [600, 2, 1, "", "get_metadata_routing"], [600, 2, 1, "", "get_params"], [600, 2, 1, "", "predict"], [600, 2, 1, "", "score"], [600, 2, 1, "", "set_fit_request"], [600, 2, 1, "", "set_output"], [600, 2, 1, "", "set_params"], [600, 2, 1, "", "set_predict_request"], [600, 2, 1, "", "set_score_request"], [600, 2, 1, "", "set_transform_request"], [600, 2, 1, "", "transform"]], "sklearn.kernel_approximation": [[603, 1, 1, "", "AdditiveChi2Sampler"], [604, 1, 1, "", "Nystroem"], [605, 1, 1, "", "PolynomialCountSketch"], [606, 1, 1, "", "RBFSampler"], [607, 1, 1, "", "SkewedChi2Sampler"]], "sklearn.kernel_approximation.AdditiveChi2Sampler": [[603, 2, 1, "", "fit"], [603, 2, 1, "", "fit_transform"], [603, 2, 1, "", "get_feature_names_out"], [603, 2, 1, "", "get_metadata_routing"], [603, 2, 1, "", "get_params"], [603, 2, 1, "", "set_output"], [603, 2, 1, "", "set_params"], [603, 2, 1, "", "transform"]], "sklearn.kernel_approximation.Nystroem": [[604, 2, 1, "", "fit"], [604, 2, 1, "", "fit_transform"], [604, 2, 1, "", "get_feature_names_out"], [604, 2, 1, "", "get_metadata_routing"], [604, 2, 1, "", "get_params"], [604, 2, 1, "", "set_output"], [604, 2, 1, "", "set_params"], [604, 2, 1, "", "transform"]], "sklearn.kernel_approximation.PolynomialCountSketch": [[605, 2, 1, "", "fit"], [605, 2, 1, "", "fit_transform"], [605, 2, 1, "", "get_feature_names_out"], [605, 2, 1, "", "get_metadata_routing"], [605, 2, 1, "", "get_params"], [605, 2, 1, "", "set_output"], [605, 2, 1, "", "set_params"], [605, 2, 1, "", "transform"]], "sklearn.kernel_approximation.RBFSampler": [[606, 2, 1, "", "fit"], [606, 2, 1, "", "fit_transform"], [606, 2, 1, "", "get_feature_names_out"], [606, 2, 1, "", "get_metadata_routing"], [606, 2, 1, "", "get_params"], [606, 2, 1, "", "set_output"], [606, 2, 1, "", "set_params"], [606, 2, 1, "", "transform"]], "sklearn.kernel_approximation.SkewedChi2Sampler": [[607, 2, 1, "", "fit"], [607, 2, 1, "", "fit_transform"], [607, 2, 1, "", "get_feature_names_out"], [607, 2, 1, "", "get_metadata_routing"], [607, 2, 1, "", "get_params"], [607, 2, 1, "", "set_output"], [607, 2, 1, "", "set_params"], [607, 2, 1, "", "transform"]], "sklearn.kernel_ridge": [[608, 1, 1, "", "KernelRidge"]], "sklearn.kernel_ridge.KernelRidge": [[608, 2, 1, "", "fit"], [608, 2, 1, "", "get_metadata_routing"], [608, 2, 1, "", "get_params"], [608, 2, 1, "", "predict"], [608, 2, 1, "", "score"], [608, 2, 1, "", "set_fit_request"], [608, 2, 1, "", "set_params"], [608, 2, 1, "", "set_score_request"]], "sklearn.linear_model": [[609, 1, 1, "", "ARDRegression"], [610, 1, 1, "", "BayesianRidge"], [611, 1, 1, "", "ElasticNet"], [612, 1, 1, "", "ElasticNetCV"], [613, 1, 1, "", "GammaRegressor"], [614, 1, 1, "", "HuberRegressor"], [615, 1, 1, "", "Lars"], [616, 1, 1, "", "LarsCV"], [617, 1, 1, "", "Lasso"], [618, 1, 1, "", "LassoCV"], [619, 1, 1, "", "LassoLars"], [620, 1, 1, "", "LassoLarsCV"], [621, 1, 1, "", "LassoLarsIC"], [622, 1, 1, "", "LinearRegression"], [623, 1, 1, "", "LogisticRegression"], [624, 1, 1, "", "LogisticRegressionCV"], [625, 1, 1, "", "MultiTaskElasticNet"], [626, 1, 1, "", "MultiTaskElasticNetCV"], [627, 1, 1, "", "MultiTaskLasso"], [628, 1, 1, "", "MultiTaskLassoCV"], [629, 1, 1, "", "OrthogonalMatchingPursuit"], [630, 1, 1, "", "OrthogonalMatchingPursuitCV"], [631, 1, 1, "", "PassiveAggressiveClassifier"], [632, 1, 1, "", "PassiveAggressiveRegressor"], [633, 1, 1, "", "Perceptron"], [634, 1, 1, "", "PoissonRegressor"], [635, 1, 1, "", "QuantileRegressor"], [636, 1, 1, "", "RANSACRegressor"], [637, 1, 1, "", "Ridge"], [638, 1, 1, "", "RidgeCV"], [639, 1, 1, "", "RidgeClassifier"], [640, 1, 1, "", "RidgeClassifierCV"], [641, 1, 1, "", "SGDClassifier"], [642, 1, 1, "", "SGDOneClassSVM"], [643, 1, 1, "", "SGDRegressor"], [644, 1, 1, "", "TheilSenRegressor"], [645, 1, 1, "", "TweedieRegressor"], [646, 4, 1, "", "enet_path"], [647, 4, 1, "", "lars_path"], [648, 4, 1, "", "lars_path_gram"], [649, 4, 1, "", "lasso_path"], [650, 4, 1, "", "orthogonal_mp"], [651, 4, 1, "", "orthogonal_mp_gram"], [652, 4, 1, "", "ridge_regression"]], "sklearn.linear_model.ARDRegression": [[609, 2, 1, "", "fit"], [609, 2, 1, "", "get_metadata_routing"], [609, 2, 1, "", "get_params"], [609, 2, 1, "", "predict"], [609, 2, 1, "", "score"], [609, 2, 1, "", "set_params"], [609, 2, 1, "", "set_predict_request"], [609, 2, 1, "", "set_score_request"]], "sklearn.linear_model.BayesianRidge": [[610, 2, 1, "", "fit"], [610, 2, 1, "", "get_metadata_routing"], [610, 2, 1, "", "get_params"], [610, 2, 1, "", "predict"], [610, 2, 1, "", "score"], [610, 2, 1, "", "set_fit_request"], [610, 2, 1, "", "set_params"], [610, 2, 1, "", "set_predict_request"], [610, 2, 1, "", "set_score_request"]], "sklearn.linear_model.ElasticNet": [[611, 2, 1, "", "fit"], [611, 2, 1, "", "get_metadata_routing"], [611, 2, 1, "", "get_params"], [611, 2, 1, "", "path"], [611, 2, 1, "", "predict"], [611, 2, 1, "", "score"], [611, 2, 1, "", "set_fit_request"], [611, 2, 1, "", "set_params"], [611, 2, 1, "", "set_score_request"], [611, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.ElasticNetCV": [[612, 2, 1, "", "fit"], [612, 2, 1, "", "get_metadata_routing"], [612, 2, 1, "", "get_params"], [612, 2, 1, "", "path"], [612, 2, 1, "", "predict"], [612, 2, 1, "", "score"], [612, 2, 1, "", "set_fit_request"], [612, 2, 1, "", "set_params"], [612, 2, 1, "", "set_score_request"]], "sklearn.linear_model.GammaRegressor": [[613, 2, 1, "", "fit"], [613, 2, 1, "", "get_metadata_routing"], [613, 2, 1, "", "get_params"], [613, 2, 1, "", "predict"], [613, 2, 1, "", "score"], [613, 2, 1, "", "set_fit_request"], [613, 2, 1, "", "set_params"], [613, 2, 1, "", "set_score_request"]], "sklearn.linear_model.HuberRegressor": [[614, 2, 1, "", "fit"], [614, 2, 1, "", "get_metadata_routing"], [614, 2, 1, "", "get_params"], [614, 2, 1, "", "predict"], [614, 2, 1, "", "score"], [614, 2, 1, "", "set_fit_request"], [614, 2, 1, "", "set_params"], [614, 2, 1, "", "set_score_request"]], "sklearn.linear_model.Lars": [[615, 2, 1, "", "fit"], [615, 2, 1, "", "get_metadata_routing"], [615, 2, 1, "", "get_params"], [615, 2, 1, "", "predict"], [615, 2, 1, "", "score"], [615, 2, 1, "", "set_fit_request"], [615, 2, 1, "", "set_params"], [615, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LarsCV": [[616, 2, 1, "", "fit"], [616, 2, 1, "", "get_metadata_routing"], [616, 2, 1, "", "get_params"], [616, 2, 1, "", "predict"], [616, 2, 1, "", "score"], [616, 2, 1, "", "set_fit_request"], [616, 2, 1, "", "set_params"], [616, 2, 1, "", "set_score_request"]], "sklearn.linear_model.Lasso": [[617, 2, 1, "", "fit"], [617, 2, 1, "", "get_metadata_routing"], [617, 2, 1, "", "get_params"], [617, 2, 1, "", "path"], [617, 2, 1, "", "predict"], [617, 2, 1, "", "score"], [617, 2, 1, "", "set_fit_request"], [617, 2, 1, "", "set_params"], [617, 2, 1, "", "set_score_request"], [617, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.LassoCV": [[618, 2, 1, "", "fit"], [618, 2, 1, "", "get_metadata_routing"], [618, 2, 1, "", "get_params"], [618, 2, 1, "", "path"], [618, 2, 1, "", "predict"], [618, 2, 1, "", "score"], [618, 2, 1, "", "set_fit_request"], [618, 2, 1, "", "set_params"], [618, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LassoLars": [[619, 2, 1, "", "fit"], [619, 2, 1, "", "get_metadata_routing"], [619, 2, 1, "", "get_params"], [619, 2, 1, "", "predict"], [619, 2, 1, "", "score"], [619, 2, 1, "", "set_fit_request"], [619, 2, 1, "", "set_params"], [619, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LassoLarsCV": [[620, 2, 1, "", "fit"], [620, 2, 1, "", "get_metadata_routing"], [620, 2, 1, "", "get_params"], [620, 2, 1, "", "predict"], [620, 2, 1, "", "score"], [620, 2, 1, "", "set_fit_request"], [620, 2, 1, "", "set_params"], [620, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LassoLarsIC": [[621, 2, 1, "", "fit"], [621, 2, 1, "", "get_metadata_routing"], [621, 2, 1, "", "get_params"], [621, 2, 1, "", "predict"], [621, 2, 1, "", "score"], [621, 2, 1, "", "set_fit_request"], [621, 2, 1, "", "set_params"], [621, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LinearRegression": [[622, 2, 1, "", "fit"], [622, 2, 1, "", "get_metadata_routing"], [622, 2, 1, "", "get_params"], [622, 2, 1, "", "predict"], [622, 2, 1, "", "score"], [622, 2, 1, "", "set_fit_request"], [622, 2, 1, "", "set_params"], [622, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LogisticRegression": [[623, 2, 1, "", "decision_function"], [623, 2, 1, "", "densify"], [623, 2, 1, "", "fit"], [623, 2, 1, "", "get_metadata_routing"], [623, 2, 1, "", "get_params"], [623, 2, 1, "", "predict"], [623, 2, 1, "", "predict_log_proba"], [623, 2, 1, "", "predict_proba"], [623, 2, 1, "", "score"], [623, 2, 1, "", "set_fit_request"], [623, 2, 1, "", "set_params"], [623, 2, 1, "", "set_score_request"], [623, 2, 1, "", "sparsify"]], "sklearn.linear_model.LogisticRegressionCV": [[624, 2, 1, "", "decision_function"], [624, 2, 1, "", "densify"], [624, 2, 1, "", "fit"], [624, 2, 1, "", "get_metadata_routing"], [624, 2, 1, "", "get_params"], [624, 2, 1, "", "predict"], [624, 2, 1, "", "predict_log_proba"], [624, 2, 1, "", "predict_proba"], [624, 2, 1, "", "score"], [624, 2, 1, "", "set_fit_request"], [624, 2, 1, "", "set_params"], [624, 2, 1, "", "set_score_request"], [624, 2, 1, "", "sparsify"]], "sklearn.linear_model.MultiTaskElasticNet": [[625, 2, 1, "", "fit"], [625, 2, 1, "", "get_metadata_routing"], [625, 2, 1, "", "get_params"], [625, 2, 1, "", "path"], [625, 2, 1, "", "predict"], [625, 2, 1, "", "score"], [625, 2, 1, "", "set_fit_request"], [625, 2, 1, "", "set_params"], [625, 2, 1, "", "set_score_request"], [625, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.MultiTaskElasticNetCV": [[626, 2, 1, "", "fit"], [626, 2, 1, "", "get_metadata_routing"], [626, 2, 1, "", "get_params"], [626, 2, 1, "", "path"], [626, 2, 1, "", "predict"], [626, 2, 1, "", "score"], [626, 2, 1, "", "set_fit_request"], [626, 2, 1, "", "set_params"], [626, 2, 1, "", "set_score_request"]], "sklearn.linear_model.MultiTaskLasso": [[627, 2, 1, "", "fit"], [627, 2, 1, "", "get_metadata_routing"], [627, 2, 1, "", "get_params"], [627, 2, 1, "", "path"], [627, 2, 1, "", "predict"], [627, 2, 1, "", "score"], [627, 2, 1, "", "set_fit_request"], [627, 2, 1, "", "set_params"], [627, 2, 1, "", "set_score_request"], [627, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.MultiTaskLassoCV": [[628, 2, 1, "", "fit"], [628, 2, 1, "", "get_metadata_routing"], [628, 2, 1, "", "get_params"], [628, 2, 1, "", "path"], [628, 2, 1, "", "predict"], [628, 2, 1, "", "score"], [628, 2, 1, "", "set_fit_request"], [628, 2, 1, "", "set_params"], [628, 2, 1, "", "set_score_request"]], "sklearn.linear_model.OrthogonalMatchingPursuit": [[629, 2, 1, "", "fit"], [629, 2, 1, "", "get_metadata_routing"], [629, 2, 1, "", "get_params"], [629, 2, 1, "", "predict"], [629, 2, 1, "", "score"], [629, 2, 1, "", "set_params"], [629, 2, 1, "", "set_score_request"]], "sklearn.linear_model.OrthogonalMatchingPursuitCV": [[630, 2, 1, "", "fit"], [630, 2, 1, "", "get_metadata_routing"], [630, 2, 1, "", "get_params"], [630, 2, 1, "", "predict"], [630, 2, 1, "", "score"], [630, 2, 1, "", "set_params"], [630, 2, 1, "", "set_score_request"]], "sklearn.linear_model.PassiveAggressiveClassifier": [[631, 2, 1, "", "decision_function"], [631, 2, 1, "", "densify"], [631, 2, 1, "", "fit"], [631, 2, 1, "", "get_metadata_routing"], [631, 2, 1, "", "get_params"], [631, 2, 1, "", "partial_fit"], [631, 2, 1, "", "predict"], [631, 2, 1, "", "score"], [631, 2, 1, "", "set_fit_request"], [631, 2, 1, "", "set_params"], [631, 2, 1, "", "set_partial_fit_request"], [631, 2, 1, "", "set_score_request"], [631, 2, 1, "", "sparsify"]], "sklearn.linear_model.PassiveAggressiveRegressor": [[632, 2, 1, "", "densify"], [632, 2, 1, "", "fit"], [632, 2, 1, "", "get_metadata_routing"], [632, 2, 1, "", "get_params"], [632, 2, 1, "", "partial_fit"], [632, 2, 1, "", "predict"], [632, 2, 1, "", "score"], [632, 2, 1, "", "set_fit_request"], [632, 2, 1, "", "set_params"], [632, 2, 1, "", "set_partial_fit_request"], [632, 2, 1, "", "set_score_request"], [632, 2, 1, "", "sparsify"]], "sklearn.linear_model.Perceptron": [[633, 2, 1, "", "decision_function"], [633, 2, 1, "", "densify"], [633, 2, 1, "", "fit"], [633, 2, 1, "", "get_metadata_routing"], [633, 2, 1, "", "get_params"], [633, 2, 1, "", "partial_fit"], [633, 2, 1, "", "predict"], [633, 2, 1, "", "score"], [633, 2, 1, "", "set_fit_request"], [633, 2, 1, "", "set_params"], [633, 2, 1, "", "set_partial_fit_request"], [633, 2, 1, "", "set_score_request"], [633, 2, 1, "", "sparsify"]], "sklearn.linear_model.PoissonRegressor": [[634, 2, 1, "", "fit"], [634, 2, 1, "", "get_metadata_routing"], [634, 2, 1, "", "get_params"], [634, 2, 1, "", "predict"], [634, 2, 1, "", "score"], [634, 2, 1, "", "set_fit_request"], [634, 2, 1, "", "set_params"], [634, 2, 1, "", "set_score_request"]], "sklearn.linear_model.QuantileRegressor": [[635, 2, 1, "", "fit"], [635, 2, 1, "", "get_metadata_routing"], [635, 2, 1, "", "get_params"], [635, 2, 1, "", "predict"], [635, 2, 1, "", "score"], [635, 2, 1, "", "set_fit_request"], [635, 2, 1, "", "set_params"], [635, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RANSACRegressor": [[636, 2, 1, "", "fit"], [636, 2, 1, "", "get_metadata_routing"], [636, 2, 1, "", "get_params"], [636, 2, 1, "", "predict"], [636, 2, 1, "", "score"], [636, 2, 1, "", "set_fit_request"], [636, 2, 1, "", "set_params"]], "sklearn.linear_model.Ridge": [[637, 2, 1, "", "fit"], [637, 2, 1, "", "get_metadata_routing"], [637, 2, 1, "", "get_params"], [637, 2, 1, "", "predict"], [637, 2, 1, "", "score"], [637, 2, 1, "", "set_fit_request"], [637, 2, 1, "", "set_params"], [637, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RidgeCV": [[638, 2, 1, "", "fit"], [638, 2, 1, "", "get_metadata_routing"], [638, 2, 1, "", "get_params"], [638, 2, 1, "", "predict"], [638, 2, 1, "", "score"], [638, 2, 1, "", "set_fit_request"], [638, 2, 1, "", "set_params"], [638, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RidgeClassifier": [[639, 3, 1, "", "classes_"], [639, 2, 1, "", "decision_function"], [639, 2, 1, "", "fit"], [639, 2, 1, "", "get_metadata_routing"], [639, 2, 1, "", "get_params"], [639, 2, 1, "", "predict"], [639, 2, 1, "", "score"], [639, 2, 1, "", "set_fit_request"], [639, 2, 1, "", "set_params"], [639, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RidgeClassifierCV": [[640, 3, 1, "", "classes_"], [640, 2, 1, "", "decision_function"], [640, 2, 1, "", "fit"], [640, 2, 1, "", "get_metadata_routing"], [640, 2, 1, "", "get_params"], [640, 2, 1, "", "predict"], [640, 2, 1, "", "score"], [640, 2, 1, "", "set_fit_request"], [640, 2, 1, "", "set_params"], [640, 2, 1, "", "set_score_request"]], "sklearn.linear_model.SGDClassifier": [[641, 2, 1, "", "decision_function"], [641, 2, 1, "", "densify"], [641, 2, 1, "", "fit"], [641, 2, 1, "", "get_metadata_routing"], [641, 2, 1, "", "get_params"], [641, 2, 1, "", "partial_fit"], [641, 2, 1, "", "predict"], [641, 2, 1, "", "predict_log_proba"], [641, 2, 1, "", "predict_proba"], [641, 2, 1, "", "score"], [641, 2, 1, "", "set_fit_request"], [641, 2, 1, "", "set_params"], [641, 2, 1, "", "set_partial_fit_request"], [641, 2, 1, "", "set_score_request"], [641, 2, 1, "", "sparsify"]], "sklearn.linear_model.SGDOneClassSVM": [[642, 2, 1, "", "decision_function"], [642, 2, 1, "", "densify"], [642, 2, 1, "", "fit"], [642, 2, 1, "", "fit_predict"], [642, 2, 1, "", "get_metadata_routing"], [642, 2, 1, "", "get_params"], [642, 2, 1, "", "partial_fit"], [642, 2, 1, "", "predict"], [642, 2, 1, "", "score_samples"], [642, 2, 1, "", "set_fit_request"], [642, 2, 1, "", "set_params"], [642, 2, 1, "", "set_partial_fit_request"], [642, 2, 1, "", "sparsify"]], "sklearn.linear_model.SGDRegressor": [[643, 2, 1, "", "densify"], [643, 2, 1, "", "fit"], [643, 2, 1, "", "get_metadata_routing"], [643, 2, 1, "", "get_params"], [643, 2, 1, "", "partial_fit"], [643, 2, 1, "", "predict"], [643, 2, 1, "", "score"], [643, 2, 1, "", "set_fit_request"], [643, 2, 1, "", "set_params"], [643, 2, 1, "", "set_partial_fit_request"], [643, 2, 1, "", "set_score_request"], [643, 2, 1, "", "sparsify"]], "sklearn.linear_model.TheilSenRegressor": [[644, 2, 1, "", "fit"], [644, 2, 1, "", "get_metadata_routing"], [644, 2, 1, "", "get_params"], [644, 2, 1, "", "predict"], [644, 2, 1, "", "score"], [644, 2, 1, "", "set_params"], [644, 2, 1, "", "set_score_request"]], "sklearn.linear_model.TweedieRegressor": [[645, 2, 1, "", "fit"], [645, 2, 1, "", "get_metadata_routing"], [645, 2, 1, "", "get_params"], [645, 2, 1, "", "predict"], [645, 2, 1, "", "score"], [645, 2, 1, "", "set_fit_request"], [645, 2, 1, "", "set_params"], [645, 2, 1, "", "set_score_request"]], "sklearn.manifold": [[653, 1, 1, "", "Isomap"], [654, 1, 1, "", "LocallyLinearEmbedding"], [655, 1, 1, "", "MDS"], [656, 1, 1, "", "SpectralEmbedding"], [657, 1, 1, "", "TSNE"], [658, 4, 1, "", "locally_linear_embedding"], [659, 4, 1, "", "smacof"], [660, 4, 1, "", "spectral_embedding"], [661, 4, 1, "", "trustworthiness"]], "sklearn.manifold.Isomap": [[653, 2, 1, "", "fit"], [653, 2, 1, "", "fit_transform"], [653, 2, 1, "", "get_feature_names_out"], [653, 2, 1, "", "get_metadata_routing"], [653, 2, 1, "", "get_params"], [653, 2, 1, "", "reconstruction_error"], [653, 2, 1, "", "set_output"], [653, 2, 1, "", "set_params"], [653, 2, 1, "", "transform"]], "sklearn.manifold.LocallyLinearEmbedding": [[654, 2, 1, "", "fit"], [654, 2, 1, "", "fit_transform"], [654, 2, 1, "", "get_feature_names_out"], [654, 2, 1, "", "get_metadata_routing"], [654, 2, 1, "", "get_params"], [654, 2, 1, "", "set_output"], [654, 2, 1, "", "set_params"], [654, 2, 1, "", "transform"]], "sklearn.manifold.MDS": [[655, 2, 1, "", "fit"], [655, 2, 1, "", "fit_transform"], [655, 2, 1, "", "get_metadata_routing"], [655, 2, 1, "", "get_params"], [655, 2, 1, "", "set_fit_request"], [655, 2, 1, "", "set_params"]], "sklearn.manifold.SpectralEmbedding": [[656, 2, 1, "", "fit"], [656, 2, 1, "", "fit_transform"], [656, 2, 1, "", "get_metadata_routing"], [656, 2, 1, "", "get_params"], [656, 2, 1, "", "set_params"]], "sklearn.manifold.TSNE": [[657, 2, 1, "", "fit"], [657, 2, 1, "", "fit_transform"], [657, 2, 1, "", "get_feature_names_out"], [657, 2, 1, "", "get_metadata_routing"], [657, 2, 1, "", "get_params"], [657, 2, 1, "", "set_output"], [657, 2, 1, "", "set_params"]], "sklearn.metrics": [[662, 1, 1, "", "ConfusionMatrixDisplay"], [663, 1, 1, "", "DetCurveDisplay"], [664, 1, 1, "", "DistanceMetric"], [665, 1, 1, "", "PrecisionRecallDisplay"], [666, 1, 1, "", "PredictionErrorDisplay"], [667, 1, 1, "", "RocCurveDisplay"], [668, 4, 1, "", "accuracy_score"], [669, 4, 1, "", "adjusted_mutual_info_score"], [670, 4, 1, "", "adjusted_rand_score"], [671, 4, 1, "", "auc"], [672, 4, 1, "", "average_precision_score"], [673, 4, 1, "", "balanced_accuracy_score"], [674, 4, 1, "", "brier_score_loss"], [675, 4, 1, "", "calinski_harabasz_score"], [676, 4, 1, "", "check_scoring"], [677, 4, 1, "", "class_likelihood_ratios"], [678, 4, 1, "", "classification_report"], [373, 0, 0, "-", "cluster"], [681, 4, 1, "", "cohen_kappa_score"], [682, 4, 1, "", "completeness_score"], [683, 4, 1, "", "confusion_matrix"], [684, 4, 1, "", "consensus_score"], [685, 4, 1, "", "coverage_error"], [686, 4, 1, "", "d2_absolute_error_score"], [687, 4, 1, "", "d2_pinball_score"], [688, 4, 1, "", "d2_tweedie_score"], [689, 4, 1, "", "davies_bouldin_score"], [690, 4, 1, "", "dcg_score"], [691, 4, 1, "", "det_curve"], [692, 4, 1, "", "explained_variance_score"], [693, 4, 1, "", "f1_score"], [694, 4, 1, "", "fbeta_score"], [695, 4, 1, "", "fowlkes_mallows_score"], [696, 4, 1, "", "get_scorer"], [697, 4, 1, "", "get_scorer_names"], [698, 4, 1, "", "hamming_loss"], [699, 4, 1, "", "hinge_loss"], [700, 4, 1, "", "homogeneity_completeness_v_measure"], [701, 4, 1, "", "homogeneity_score"], [702, 4, 1, "", "jaccard_score"], [703, 4, 1, "", "label_ranking_average_precision_score"], [704, 4, 1, "", "label_ranking_loss"], [705, 4, 1, "", "log_loss"], [706, 4, 1, "", "make_scorer"], [707, 4, 1, "", "matthews_corrcoef"], [708, 4, 1, "", "max_error"], [709, 4, 1, "", "mean_absolute_error"], [710, 4, 1, "", "mean_absolute_percentage_error"], [711, 4, 1, "", "mean_gamma_deviance"], [712, 4, 1, "", "mean_pinball_loss"], [713, 4, 1, "", "mean_poisson_deviance"], [714, 4, 1, "", "mean_squared_error"], [715, 4, 1, "", "mean_squared_log_error"], [716, 4, 1, "", "mean_tweedie_deviance"], [717, 4, 1, "", "median_absolute_error"], [718, 4, 1, "", "multilabel_confusion_matrix"], [719, 4, 1, "", "mutual_info_score"], [720, 4, 1, "", "ndcg_score"], [721, 4, 1, "", "normalized_mutual_info_score"], [373, 0, 0, "-", "pairwise"], [742, 4, 1, "", "pairwise_distances"], [743, 4, 1, "", "pairwise_distances_argmin"], [744, 4, 1, "", "pairwise_distances_argmin_min"], [745, 4, 1, "", "pairwise_distances_chunked"], [746, 4, 1, "", "precision_recall_curve"], [747, 4, 1, "", "precision_recall_fscore_support"], [748, 4, 1, "", "precision_score"], [749, 4, 1, "", "r2_score"], [750, 4, 1, "", "rand_score"], [751, 4, 1, "", "recall_score"], [752, 4, 1, "", "roc_auc_score"], [753, 4, 1, "", "roc_curve"], [754, 4, 1, "", "root_mean_squared_error"], [755, 4, 1, "", "root_mean_squared_log_error"], [756, 4, 1, "", "silhouette_samples"], [757, 4, 1, "", "silhouette_score"], [758, 4, 1, "", "top_k_accuracy_score"], [759, 4, 1, "", "v_measure_score"], [760, 4, 1, "", "zero_one_loss"]], "sklearn.metrics.ConfusionMatrixDisplay": [[662, 2, 1, "", "from_estimator"], [662, 2, 1, "", "from_predictions"], [662, 2, 1, "", "plot"]], "sklearn.metrics.DetCurveDisplay": [[663, 2, 1, "", "from_estimator"], [663, 2, 1, "", "from_predictions"], [663, 2, 1, "", "plot"]], "sklearn.metrics.DistanceMetric": [[664, 2, 1, "", "get_metric"]], "sklearn.metrics.PrecisionRecallDisplay": [[665, 2, 1, "", "from_estimator"], [665, 2, 1, "", "from_predictions"], [665, 2, 1, "", "plot"]], "sklearn.metrics.PredictionErrorDisplay": [[666, 2, 1, "", "from_estimator"], [666, 2, 1, "", "from_predictions"], [666, 2, 1, "", "plot"]], "sklearn.metrics.RocCurveDisplay": [[667, 2, 1, "", "from_estimator"], [667, 2, 1, "", "from_predictions"], [667, 2, 1, "", "plot"]], "sklearn.metrics.cluster": [[679, 4, 1, "", "contingency_matrix"], [680, 4, 1, "", "pair_confusion_matrix"]], "sklearn.metrics.pairwise": [[722, 4, 1, "", "additive_chi2_kernel"], [723, 4, 1, "", "chi2_kernel"], [724, 4, 1, "", "cosine_distances"], [725, 4, 1, "", "cosine_similarity"], [726, 4, 1, "", "distance_metrics"], [727, 4, 1, "", "euclidean_distances"], [728, 4, 1, "", "haversine_distances"], [729, 4, 1, "", "kernel_metrics"], [730, 4, 1, "", "laplacian_kernel"], [731, 4, 1, "", "linear_kernel"], [732, 4, 1, "", "manhattan_distances"], [733, 4, 1, "", "nan_euclidean_distances"], [734, 4, 1, "", "paired_cosine_distances"], [735, 4, 1, "", "paired_distances"], [736, 4, 1, "", "paired_euclidean_distances"], [737, 4, 1, "", "paired_manhattan_distances"], [738, 4, 1, "", "pairwise_kernels"], [739, 4, 1, "", "polynomial_kernel"], [740, 4, 1, "", "rbf_kernel"], [741, 4, 1, "", "sigmoid_kernel"]], "sklearn.mixture": [[761, 1, 1, "", "BayesianGaussianMixture"], [762, 1, 1, "", "GaussianMixture"]], "sklearn.mixture.BayesianGaussianMixture": [[761, 2, 1, "", "fit"], [761, 2, 1, "", "fit_predict"], [761, 2, 1, "", "get_metadata_routing"], [761, 2, 1, "", "get_params"], [761, 2, 1, "", "predict"], [761, 2, 1, "", "predict_proba"], [761, 2, 1, "", "sample"], [761, 2, 1, "", "score"], [761, 2, 1, "", "score_samples"], [761, 2, 1, "", "set_params"]], "sklearn.mixture.GaussianMixture": [[762, 2, 1, "", "aic"], [762, 2, 1, "", "bic"], [762, 2, 1, "", "fit"], [762, 2, 1, "", "fit_predict"], [762, 2, 1, "", "get_metadata_routing"], [762, 2, 1, "", "get_params"], [762, 2, 1, "", "predict"], [762, 2, 1, "", "predict_proba"], [762, 2, 1, "", "sample"], [762, 2, 1, "", "score"], [762, 2, 1, "", "score_samples"], [762, 2, 1, "", "set_params"]], "sklearn.model_selection": [[763, 1, 1, "", "GridSearchCV"], [764, 1, 1, "", "GroupKFold"], [765, 1, 1, "", "GroupShuffleSplit"], [766, 1, 1, "", "HalvingGridSearchCV"], [767, 1, 1, "", "HalvingRandomSearchCV"], [768, 1, 1, "", "KFold"], [769, 1, 1, "", "LearningCurveDisplay"], [770, 1, 1, "", "LeaveOneGroupOut"], [771, 1, 1, "", "LeaveOneOut"], [772, 1, 1, "", "LeavePGroupsOut"], [773, 1, 1, "", "LeavePOut"], [774, 1, 1, "", "ParameterGrid"], [775, 1, 1, "", "ParameterSampler"], [776, 1, 1, "", "PredefinedSplit"], [777, 1, 1, "", "RandomizedSearchCV"], [778, 1, 1, "", "RepeatedKFold"], [779, 1, 1, "", "RepeatedStratifiedKFold"], [780, 1, 1, "", "ShuffleSplit"], [781, 1, 1, "", "StratifiedGroupKFold"], [782, 1, 1, "", "StratifiedKFold"], [783, 1, 1, "", "StratifiedShuffleSplit"], [784, 1, 1, "", "TimeSeriesSplit"], [785, 1, 1, "", "ValidationCurveDisplay"], [786, 4, 1, "", "check_cv"], [787, 4, 1, "", "cross_val_predict"], [788, 4, 1, "", "cross_val_score"], [789, 4, 1, "", "cross_validate"], [790, 4, 1, "", "learning_curve"], [791, 4, 1, "", "permutation_test_score"], [792, 4, 1, "", "train_test_split"], [793, 4, 1, "", "validation_curve"]], "sklearn.model_selection.GridSearchCV": [[763, 3, 1, "", "classes_"], [763, 2, 1, "", "decision_function"], [763, 2, 1, "", "fit"], [763, 2, 1, "", "get_metadata_routing"], [763, 2, 1, "", "get_params"], [763, 2, 1, "", "inverse_transform"], [763, 3, 1, "", "n_features_in_"], [763, 2, 1, "", "predict"], [763, 2, 1, "", "predict_log_proba"], [763, 2, 1, "", "predict_proba"], [763, 2, 1, "", "score"], [763, 2, 1, "", "score_samples"], [763, 2, 1, "", "set_params"], [763, 2, 1, "", "transform"]], "sklearn.model_selection.GroupKFold": [[764, 2, 1, "", "get_metadata_routing"], [764, 2, 1, "", "get_n_splits"], [764, 2, 1, "", "set_split_request"], [764, 2, 1, "", "split"]], "sklearn.model_selection.GroupShuffleSplit": [[765, 2, 1, "", "get_metadata_routing"], [765, 2, 1, "", "get_n_splits"], [765, 2, 1, "", "set_split_request"], [765, 2, 1, "", "split"]], "sklearn.model_selection.HalvingGridSearchCV": [[766, 3, 1, "", "classes_"], [766, 2, 1, "", "decision_function"], [766, 2, 1, "", "fit"], [766, 2, 1, "", "get_metadata_routing"], [766, 2, 1, "", "get_params"], [766, 2, 1, "", "inverse_transform"], [766, 3, 1, "", "n_features_in_"], [766, 2, 1, "", "predict"], [766, 2, 1, "", "predict_log_proba"], [766, 2, 1, "", "predict_proba"], [766, 2, 1, "", "score"], [766, 2, 1, "", "score_samples"], [766, 2, 1, "", "set_params"], [766, 2, 1, "", "transform"]], "sklearn.model_selection.HalvingRandomSearchCV": [[767, 3, 1, "", "classes_"], [767, 2, 1, "", "decision_function"], [767, 2, 1, "", "fit"], [767, 2, 1, "", "get_metadata_routing"], [767, 2, 1, "", "get_params"], [767, 2, 1, "", "inverse_transform"], [767, 3, 1, "", "n_features_in_"], [767, 2, 1, "", "predict"], [767, 2, 1, "", "predict_log_proba"], [767, 2, 1, "", "predict_proba"], [767, 2, 1, "", "score"], [767, 2, 1, "", "score_samples"], [767, 2, 1, "", "set_params"], [767, 2, 1, "", "transform"]], "sklearn.model_selection.KFold": [[768, 2, 1, "", "get_metadata_routing"], [768, 2, 1, "", "get_n_splits"], [768, 2, 1, "", "split"]], "sklearn.model_selection.LearningCurveDisplay": [[769, 2, 1, "", "from_estimator"], [769, 2, 1, "", "plot"]], "sklearn.model_selection.LeaveOneGroupOut": [[770, 2, 1, "", "get_metadata_routing"], [770, 2, 1, "", "get_n_splits"], [770, 2, 1, "", "set_split_request"], [770, 2, 1, "", "split"]], "sklearn.model_selection.LeaveOneOut": [[771, 2, 1, "", "get_metadata_routing"], [771, 2, 1, "", "get_n_splits"], [771, 2, 1, "", "split"]], "sklearn.model_selection.LeavePGroupsOut": [[772, 2, 1, "", "get_metadata_routing"], [772, 2, 1, "", "get_n_splits"], [772, 2, 1, "", "set_split_request"], [772, 2, 1, "", "split"]], "sklearn.model_selection.LeavePOut": [[773, 2, 1, "", "get_metadata_routing"], [773, 2, 1, "", "get_n_splits"], [773, 2, 1, "", "split"]], "sklearn.model_selection.PredefinedSplit": [[776, 2, 1, "", "get_metadata_routing"], [776, 2, 1, "", "get_n_splits"], [776, 2, 1, "", "split"]], "sklearn.model_selection.RandomizedSearchCV": [[777, 3, 1, "", "classes_"], [777, 2, 1, "", "decision_function"], [777, 2, 1, "", "fit"], [777, 2, 1, "", "get_metadata_routing"], [777, 2, 1, "", "get_params"], [777, 2, 1, "", "inverse_transform"], [777, 3, 1, "", "n_features_in_"], [777, 2, 1, "", "predict"], [777, 2, 1, "", "predict_log_proba"], [777, 2, 1, "", "predict_proba"], [777, 2, 1, "", "score"], [777, 2, 1, "", "score_samples"], [777, 2, 1, "", "set_params"], [777, 2, 1, "", "transform"]], "sklearn.model_selection.RepeatedKFold": [[778, 2, 1, "", "get_metadata_routing"], [778, 2, 1, "", "get_n_splits"], [778, 2, 1, "", "split"]], "sklearn.model_selection.RepeatedStratifiedKFold": [[779, 2, 1, "", "get_metadata_routing"], [779, 2, 1, "", "get_n_splits"], [779, 2, 1, "", "split"]], "sklearn.model_selection.ShuffleSplit": [[780, 2, 1, "", "get_metadata_routing"], [780, 2, 1, "", "get_n_splits"], [780, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedGroupKFold": [[781, 2, 1, "", "get_metadata_routing"], [781, 2, 1, "", "get_n_splits"], [781, 2, 1, "", "set_split_request"], [781, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedKFold": [[782, 2, 1, "", "get_metadata_routing"], [782, 2, 1, "", "get_n_splits"], [782, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedShuffleSplit": [[783, 2, 1, "", "get_metadata_routing"], [783, 2, 1, "", "get_n_splits"], [783, 2, 1, "", "split"]], "sklearn.model_selection.TimeSeriesSplit": [[784, 2, 1, "", "get_metadata_routing"], [784, 2, 1, "", "get_n_splits"], [784, 2, 1, "", "split"]], "sklearn.model_selection.ValidationCurveDisplay": [[785, 2, 1, "", "from_estimator"], [785, 2, 1, "", "plot"]], "sklearn.multiclass": [[794, 1, 1, "", "OneVsOneClassifier"], [795, 1, 1, "", "OneVsRestClassifier"], [796, 1, 1, "", "OutputCodeClassifier"]], "sklearn.multiclass.OneVsOneClassifier": [[794, 2, 1, "", "decision_function"], [794, 2, 1, "", "fit"], [794, 2, 1, "", "get_metadata_routing"], [794, 2, 1, "", "get_params"], [794, 3, 1, "", "n_classes_"], [794, 2, 1, "", "partial_fit"], [794, 2, 1, "", "predict"], [794, 2, 1, "", "score"], [794, 2, 1, "", "set_params"], [794, 2, 1, "", "set_partial_fit_request"], [794, 2, 1, "", "set_score_request"]], "sklearn.multiclass.OneVsRestClassifier": [[795, 2, 1, "", "decision_function"], [795, 2, 1, "", "fit"], [795, 2, 1, "", "get_metadata_routing"], [795, 2, 1, "", "get_params"], [795, 3, 1, "", "multilabel_"], [795, 3, 1, "", "n_classes_"], [795, 2, 1, "", "partial_fit"], [795, 2, 1, "", "predict"], [795, 2, 1, "", "predict_proba"], [795, 2, 1, "", "score"], [795, 2, 1, "", "set_params"], [795, 2, 1, "", "set_partial_fit_request"], [795, 2, 1, "", "set_score_request"]], "sklearn.multiclass.OutputCodeClassifier": [[796, 2, 1, "", "fit"], [796, 2, 1, "", "get_metadata_routing"], [796, 2, 1, "", "get_params"], [796, 2, 1, "", "predict"], [796, 2, 1, "", "score"], [796, 2, 1, "", "set_params"], [796, 2, 1, "", "set_score_request"]], "sklearn.multioutput": [[797, 1, 1, "", "ClassifierChain"], [798, 1, 1, "", "MultiOutputClassifier"], [799, 1, 1, "", "MultiOutputRegressor"], [800, 1, 1, "", "RegressorChain"]], "sklearn.multioutput.ClassifierChain": [[797, 2, 1, "", "decision_function"], [797, 2, 1, "", "fit"], [797, 2, 1, "", "get_metadata_routing"], [797, 2, 1, "", "get_params"], [797, 2, 1, "", "predict"], [797, 2, 1, "", "predict_log_proba"], [797, 2, 1, "", "predict_proba"], [797, 2, 1, "", "score"], [797, 2, 1, "", "set_params"], [797, 2, 1, "", "set_score_request"]], "sklearn.multioutput.MultiOutputClassifier": [[798, 2, 1, "", "fit"], [798, 2, 1, "", "get_metadata_routing"], [798, 2, 1, "", "get_params"], [798, 2, 1, "", "partial_fit"], [798, 2, 1, "", "predict"], [798, 2, 1, "", "predict_proba"], [798, 2, 1, "", "score"], [798, 2, 1, "", "set_fit_request"], [798, 2, 1, "", "set_params"], [798, 2, 1, "", "set_partial_fit_request"]], "sklearn.multioutput.MultiOutputRegressor": [[799, 2, 1, "", "fit"], [799, 2, 1, "", "get_metadata_routing"], [799, 2, 1, "", "get_params"], [799, 2, 1, "", "partial_fit"], [799, 2, 1, "", "predict"], [799, 2, 1, "", "score"], [799, 2, 1, "", "set_fit_request"], [799, 2, 1, "", "set_params"], [799, 2, 1, "", "set_partial_fit_request"], [799, 2, 1, "", "set_score_request"]], "sklearn.multioutput.RegressorChain": [[800, 2, 1, "", "fit"], [800, 2, 1, "", "get_metadata_routing"], [800, 2, 1, "", "get_params"], [800, 2, 1, "", "predict"], [800, 2, 1, "", "score"], [800, 2, 1, "", "set_params"], [800, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes": [[801, 1, 1, "", "BernoulliNB"], [802, 1, 1, "", "CategoricalNB"], [803, 1, 1, "", "ComplementNB"], [804, 1, 1, "", "GaussianNB"], [805, 1, 1, "", "MultinomialNB"]], "sklearn.naive_bayes.BernoulliNB": [[801, 2, 1, "", "fit"], [801, 2, 1, "", "get_metadata_routing"], [801, 2, 1, "", "get_params"], [801, 2, 1, "", "partial_fit"], [801, 2, 1, "", "predict"], [801, 2, 1, "", "predict_joint_log_proba"], [801, 2, 1, "", "predict_log_proba"], [801, 2, 1, "", "predict_proba"], [801, 2, 1, "", "score"], [801, 2, 1, "", "set_fit_request"], [801, 2, 1, "", "set_params"], [801, 2, 1, "", "set_partial_fit_request"], [801, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.CategoricalNB": [[802, 2, 1, "", "fit"], [802, 2, 1, "", "get_metadata_routing"], [802, 2, 1, "", "get_params"], [802, 2, 1, "", "partial_fit"], [802, 2, 1, "", "predict"], [802, 2, 1, "", "predict_joint_log_proba"], [802, 2, 1, "", "predict_log_proba"], [802, 2, 1, "", "predict_proba"], [802, 2, 1, "", "score"], [802, 2, 1, "", "set_fit_request"], [802, 2, 1, "", "set_params"], [802, 2, 1, "", "set_partial_fit_request"], [802, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.ComplementNB": [[803, 2, 1, "", "fit"], [803, 2, 1, "", "get_metadata_routing"], [803, 2, 1, "", "get_params"], [803, 2, 1, "", "partial_fit"], [803, 2, 1, "", "predict"], [803, 2, 1, "", "predict_joint_log_proba"], [803, 2, 1, "", "predict_log_proba"], [803, 2, 1, "", "predict_proba"], [803, 2, 1, "", "score"], [803, 2, 1, "", "set_fit_request"], [803, 2, 1, "", "set_params"], [803, 2, 1, "", "set_partial_fit_request"], [803, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.GaussianNB": [[804, 2, 1, "", "fit"], [804, 2, 1, "", "get_metadata_routing"], [804, 2, 1, "", "get_params"], [804, 2, 1, "", "partial_fit"], [804, 2, 1, "", "predict"], [804, 2, 1, "", "predict_joint_log_proba"], [804, 2, 1, "", "predict_log_proba"], [804, 2, 1, "", "predict_proba"], [804, 2, 1, "", "score"], [804, 2, 1, "", "set_fit_request"], [804, 2, 1, "", "set_params"], [804, 2, 1, "", "set_partial_fit_request"], [804, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.MultinomialNB": [[805, 2, 1, "", "fit"], [805, 2, 1, "", "get_metadata_routing"], [805, 2, 1, "", "get_params"], [805, 2, 1, "", "partial_fit"], [805, 2, 1, "", "predict"], [805, 2, 1, "", "predict_joint_log_proba"], [805, 2, 1, "", "predict_log_proba"], [805, 2, 1, "", "predict_proba"], [805, 2, 1, "", "score"], [805, 2, 1, "", "set_fit_request"], [805, 2, 1, "", "set_params"], [805, 2, 1, "", "set_partial_fit_request"], [805, 2, 1, "", "set_score_request"]], "sklearn.neighbors": [[806, 1, 1, "", "BallTree"], [807, 1, 1, "", "KDTree"], [808, 1, 1, "", "KNeighborsClassifier"], [809, 1, 1, "", "KNeighborsRegressor"], [810, 1, 1, "", "KNeighborsTransformer"], [811, 1, 1, "", "KernelDensity"], [812, 1, 1, "", "LocalOutlierFactor"], [813, 1, 1, "", "NearestCentroid"], [814, 1, 1, "", "NearestNeighbors"], [815, 1, 1, "", "NeighborhoodComponentsAnalysis"], [816, 1, 1, "", "RadiusNeighborsClassifier"], [817, 1, 1, "", "RadiusNeighborsRegressor"], [818, 1, 1, "", "RadiusNeighborsTransformer"], [819, 4, 1, "", "kneighbors_graph"], [820, 4, 1, "", "radius_neighbors_graph"], [821, 4, 1, "", "sort_graph_by_row_values"]], "sklearn.neighbors.BallTree": [[806, 2, 1, "", "get_arrays"], [806, 2, 1, "", "get_n_calls"], [806, 2, 1, "", "get_tree_stats"], [806, 2, 1, "", "kernel_density"], [806, 2, 1, "", "query"], [806, 2, 1, "", "query_radius"], [806, 2, 1, "", "reset_n_calls"], [806, 2, 1, "", "two_point_correlation"]], "sklearn.neighbors.KDTree": [[807, 2, 1, "", "get_arrays"], [807, 2, 1, "", "get_n_calls"], [807, 2, 1, "", "get_tree_stats"], [807, 2, 1, "", "kernel_density"], [807, 2, 1, "", "query"], [807, 2, 1, "", "query_radius"], [807, 2, 1, "", "reset_n_calls"], [807, 2, 1, "", "two_point_correlation"]], "sklearn.neighbors.KNeighborsClassifier": [[808, 2, 1, "", "fit"], [808, 2, 1, "", "get_metadata_routing"], [808, 2, 1, "", "get_params"], [808, 2, 1, "", "kneighbors"], [808, 2, 1, "", "kneighbors_graph"], [808, 2, 1, "", "predict"], [808, 2, 1, "", "predict_proba"], [808, 2, 1, "", "score"], [808, 2, 1, "", "set_params"], [808, 2, 1, "", "set_score_request"]], "sklearn.neighbors.KNeighborsRegressor": [[809, 2, 1, "", "fit"], [809, 2, 1, "", "get_metadata_routing"], [809, 2, 1, "", "get_params"], [809, 2, 1, "", "kneighbors"], [809, 2, 1, "", "kneighbors_graph"], [809, 2, 1, "", "predict"], [809, 2, 1, "", "score"], [809, 2, 1, "", "set_params"], [809, 2, 1, "", "set_score_request"]], "sklearn.neighbors.KNeighborsTransformer": [[810, 2, 1, "", "fit"], [810, 2, 1, "", "fit_transform"], [810, 2, 1, "", "get_feature_names_out"], [810, 2, 1, "", "get_metadata_routing"], [810, 2, 1, "", "get_params"], [810, 2, 1, "", "kneighbors"], [810, 2, 1, "", "kneighbors_graph"], [810, 2, 1, "", "set_output"], [810, 2, 1, "", "set_params"], [810, 2, 1, "", "transform"]], "sklearn.neighbors.KernelDensity": [[811, 2, 1, "", "fit"], [811, 2, 1, "", "get_metadata_routing"], [811, 2, 1, "", "get_params"], [811, 2, 1, "", "sample"], [811, 2, 1, "", "score"], [811, 2, 1, "", "score_samples"], [811, 2, 1, "", "set_fit_request"], [811, 2, 1, "", "set_params"]], "sklearn.neighbors.LocalOutlierFactor": [[812, 2, 1, "", "decision_function"], [812, 2, 1, "", "fit"], [812, 2, 1, "", "fit_predict"], [812, 2, 1, "", "get_metadata_routing"], [812, 2, 1, "", "get_params"], [812, 2, 1, "", "kneighbors"], [812, 2, 1, "", "kneighbors_graph"], [812, 2, 1, "", "predict"], [812, 2, 1, "", "score_samples"], [812, 2, 1, "", "set_params"]], "sklearn.neighbors.NearestCentroid": [[813, 2, 1, "", "fit"], [813, 2, 1, "", "get_metadata_routing"], [813, 2, 1, "", "get_params"], [813, 2, 1, "", "predict"], [813, 2, 1, "", "score"], [813, 2, 1, "", "set_params"], [813, 2, 1, "", "set_score_request"]], "sklearn.neighbors.NearestNeighbors": [[814, 2, 1, "", "fit"], [814, 2, 1, "", "get_metadata_routing"], [814, 2, 1, "", "get_params"], [814, 2, 1, "", "kneighbors"], [814, 2, 1, "", "kneighbors_graph"], [814, 2, 1, "", "radius_neighbors"], [814, 2, 1, "", "radius_neighbors_graph"], [814, 2, 1, "", "set_params"]], "sklearn.neighbors.NeighborhoodComponentsAnalysis": [[815, 2, 1, "", "fit"], [815, 2, 1, "", "fit_transform"], [815, 2, 1, "", "get_feature_names_out"], [815, 2, 1, "", "get_metadata_routing"], [815, 2, 1, "", "get_params"], [815, 2, 1, "", "set_output"], [815, 2, 1, "", "set_params"], [815, 2, 1, "", "transform"]], "sklearn.neighbors.RadiusNeighborsClassifier": [[816, 2, 1, "", "fit"], [816, 2, 1, "", "get_metadata_routing"], [816, 2, 1, "", "get_params"], [816, 2, 1, "", "predict"], [816, 2, 1, "", "predict_proba"], [816, 2, 1, "", "radius_neighbors"], [816, 2, 1, "", "radius_neighbors_graph"], [816, 2, 1, "", "score"], [816, 2, 1, "", "set_params"], [816, 2, 1, "", "set_score_request"]], "sklearn.neighbors.RadiusNeighborsRegressor": [[817, 2, 1, "", "fit"], [817, 2, 1, "", "get_metadata_routing"], [817, 2, 1, "", "get_params"], [817, 2, 1, "", "predict"], [817, 2, 1, "", "radius_neighbors"], [817, 2, 1, "", "radius_neighbors_graph"], [817, 2, 1, "", "score"], [817, 2, 1, "", "set_params"], [817, 2, 1, "", "set_score_request"]], "sklearn.neighbors.RadiusNeighborsTransformer": [[818, 2, 1, "", "fit"], [818, 2, 1, "", "fit_transform"], [818, 2, 1, "", "get_feature_names_out"], [818, 2, 1, "", "get_metadata_routing"], [818, 2, 1, "", "get_params"], [818, 2, 1, "", "radius_neighbors"], [818, 2, 1, "", "radius_neighbors_graph"], [818, 2, 1, "", "set_output"], [818, 2, 1, "", "set_params"], [818, 2, 1, "", "transform"]], "sklearn.neural_network": [[822, 1, 1, "", "BernoulliRBM"], [823, 1, 1, "", "MLPClassifier"], [824, 1, 1, "", "MLPRegressor"]], "sklearn.neural_network.BernoulliRBM": [[822, 2, 1, "", "fit"], [822, 2, 1, "", "fit_transform"], [822, 2, 1, "", "get_feature_names_out"], [822, 2, 1, "", "get_metadata_routing"], [822, 2, 1, "", "get_params"], [822, 2, 1, "", "gibbs"], [822, 2, 1, "", "partial_fit"], [822, 2, 1, "", "score_samples"], [822, 2, 1, "", "set_output"], [822, 2, 1, "", "set_params"], [822, 2, 1, "", "transform"]], "sklearn.neural_network.MLPClassifier": [[823, 2, 1, "", "fit"], [823, 2, 1, "", "get_metadata_routing"], [823, 2, 1, "", "get_params"], [823, 2, 1, "", "partial_fit"], [823, 2, 1, "", "predict"], [823, 2, 1, "", "predict_log_proba"], [823, 2, 1, "", "predict_proba"], [823, 2, 1, "", "score"], [823, 2, 1, "", "set_params"], [823, 2, 1, "", "set_partial_fit_request"], [823, 2, 1, "", "set_score_request"]], "sklearn.neural_network.MLPRegressor": [[824, 2, 1, "", "fit"], [824, 2, 1, "", "get_metadata_routing"], [824, 2, 1, "", "get_params"], [824, 2, 1, "", "partial_fit"], [824, 2, 1, "", "predict"], [824, 2, 1, "", "score"], [824, 2, 1, "", "set_params"], [824, 2, 1, "", "set_score_request"]], "sklearn.pipeline": [[825, 1, 1, "", "FeatureUnion"], [826, 1, 1, "", "Pipeline"], [827, 4, 1, "", "make_pipeline"], [828, 4, 1, "", "make_union"]], "sklearn.pipeline.FeatureUnion": [[825, 3, 1, "", "feature_names_in_"], [825, 2, 1, "", "fit"], [825, 2, 1, "", "fit_transform"], [825, 2, 1, "", "get_feature_names_out"], [825, 2, 1, "", "get_metadata_routing"], [825, 2, 1, "", "get_params"], [825, 3, 1, "", "n_features_in_"], [825, 2, 1, "", "set_output"], [825, 2, 1, "", "set_params"], [825, 2, 1, "", "transform"]], "sklearn.pipeline.Pipeline": [[826, 3, 1, "", "classes_"], [826, 2, 1, "", "decision_function"], [826, 3, 1, "", "feature_names_in_"], [826, 2, 1, "", "fit"], [826, 2, 1, "", "fit_predict"], [826, 2, 1, "", "fit_transform"], [826, 2, 1, "", "get_feature_names_out"], [826, 2, 1, "", "get_metadata_routing"], [826, 2, 1, "", "get_params"], [826, 2, 1, "", "inverse_transform"], [826, 3, 1, "", "n_features_in_"], [826, 3, 1, "", "named_steps"], [826, 2, 1, "", "predict"], [826, 2, 1, "", "predict_log_proba"], [826, 2, 1, "", "predict_proba"], [826, 2, 1, "", "score"], [826, 2, 1, "", "score_samples"], [826, 2, 1, "", "set_output"], [826, 2, 1, "", "set_params"], [826, 2, 1, "", "set_score_request"], [826, 2, 1, "", "transform"]], "sklearn.preprocessing": [[829, 1, 1, "", "Binarizer"], [830, 1, 1, "", "FunctionTransformer"], [831, 1, 1, "", "KBinsDiscretizer"], [832, 1, 1, "", "KernelCenterer"], [833, 1, 1, "", "LabelBinarizer"], [834, 1, 1, "", "LabelEncoder"], [835, 1, 1, "", "MaxAbsScaler"], [836, 1, 1, "", "MinMaxScaler"], [837, 1, 1, "", "MultiLabelBinarizer"], [838, 1, 1, "", "Normalizer"], [839, 1, 1, "", "OneHotEncoder"], [840, 1, 1, "", "OrdinalEncoder"], [841, 1, 1, "", "PolynomialFeatures"], [842, 1, 1, "", "PowerTransformer"], [843, 1, 1, "", "QuantileTransformer"], [844, 1, 1, "", "RobustScaler"], [845, 1, 1, "", "SplineTransformer"], [846, 1, 1, "", "StandardScaler"], [847, 1, 1, "", "TargetEncoder"], [848, 4, 1, "", "add_dummy_feature"], [849, 4, 1, "", "binarize"], [850, 4, 1, "", "label_binarize"], [851, 4, 1, "", "maxabs_scale"], [852, 4, 1, "", "minmax_scale"], [853, 4, 1, "", "normalize"], [854, 4, 1, "", "power_transform"], [855, 4, 1, "", "quantile_transform"], [856, 4, 1, "", "robust_scale"], [857, 4, 1, "", "scale"]], "sklearn.preprocessing.Binarizer": [[829, 2, 1, "", "fit"], [829, 2, 1, "", "fit_transform"], [829, 2, 1, "", "get_feature_names_out"], [829, 2, 1, "", "get_metadata_routing"], [829, 2, 1, "", "get_params"], [829, 2, 1, "", "set_output"], [829, 2, 1, "", "set_params"], [829, 2, 1, "", "set_transform_request"], [829, 2, 1, "", "transform"]], "sklearn.preprocessing.FunctionTransformer": [[830, 2, 1, "", "fit"], [830, 2, 1, "", "fit_transform"], [830, 2, 1, "", "get_feature_names_out"], [830, 2, 1, "", "get_metadata_routing"], [830, 2, 1, "", "get_params"], [830, 2, 1, "", "inverse_transform"], [830, 2, 1, "", "set_output"], [830, 2, 1, "", "set_params"], [830, 2, 1, "", "transform"]], "sklearn.preprocessing.KBinsDiscretizer": [[831, 2, 1, "", "fit"], [831, 2, 1, "", "fit_transform"], [831, 2, 1, "", "get_feature_names_out"], [831, 2, 1, "", "get_metadata_routing"], [831, 2, 1, "", "get_params"], [831, 2, 1, "", "inverse_transform"], [831, 2, 1, "", "set_fit_request"], [831, 2, 1, "", "set_output"], [831, 2, 1, "", "set_params"], [831, 2, 1, "", "transform"]], "sklearn.preprocessing.KernelCenterer": [[832, 2, 1, "", "fit"], [832, 2, 1, "", "fit_transform"], [832, 2, 1, "", "get_feature_names_out"], [832, 2, 1, "", "get_metadata_routing"], [832, 2, 1, "", "get_params"], [832, 2, 1, "", "set_fit_request"], [832, 2, 1, "", "set_output"], [832, 2, 1, "", "set_params"], [832, 2, 1, "", "set_transform_request"], [832, 2, 1, "", "transform"]], "sklearn.preprocessing.LabelBinarizer": [[833, 2, 1, "", "fit"], [833, 2, 1, "", "fit_transform"], [833, 2, 1, "", "get_metadata_routing"], [833, 2, 1, "", "get_params"], [833, 2, 1, "", "inverse_transform"], [833, 2, 1, "", "set_inverse_transform_request"], [833, 2, 1, "", "set_output"], [833, 2, 1, "", "set_params"], [833, 2, 1, "", "transform"]], "sklearn.preprocessing.LabelEncoder": [[834, 2, 1, "", "fit"], [834, 2, 1, "", "fit_transform"], [834, 2, 1, "", "get_metadata_routing"], [834, 2, 1, "", "get_params"], [834, 2, 1, "", "inverse_transform"], [834, 2, 1, "", "set_output"], [834, 2, 1, "", "set_params"], [834, 2, 1, "", "transform"]], "sklearn.preprocessing.MaxAbsScaler": [[835, 2, 1, "", "fit"], [835, 2, 1, "", "fit_transform"], [835, 2, 1, "", "get_feature_names_out"], [835, 2, 1, "", "get_metadata_routing"], [835, 2, 1, "", "get_params"], [835, 2, 1, "", "inverse_transform"], [835, 2, 1, "", "partial_fit"], [835, 2, 1, "", "set_output"], [835, 2, 1, "", "set_params"], [835, 2, 1, "", "transform"]], "sklearn.preprocessing.MinMaxScaler": [[836, 2, 1, "", "fit"], [836, 2, 1, "", "fit_transform"], [836, 2, 1, "", "get_feature_names_out"], [836, 2, 1, "", "get_metadata_routing"], [836, 2, 1, "", "get_params"], [836, 2, 1, "", "inverse_transform"], [836, 2, 1, "", "partial_fit"], [836, 2, 1, "", "set_output"], [836, 2, 1, "", "set_params"], [836, 2, 1, "", "transform"]], "sklearn.preprocessing.MultiLabelBinarizer": [[837, 2, 1, "", "fit"], [837, 2, 1, "", "fit_transform"], [837, 2, 1, "", "get_metadata_routing"], [837, 2, 1, "", "get_params"], [837, 2, 1, "", "inverse_transform"], [837, 2, 1, "", "set_output"], [837, 2, 1, "", "set_params"], [837, 2, 1, "", "transform"]], "sklearn.preprocessing.Normalizer": [[838, 2, 1, "", "fit"], [838, 2, 1, "", "fit_transform"], [838, 2, 1, "", "get_feature_names_out"], [838, 2, 1, "", "get_metadata_routing"], [838, 2, 1, "", "get_params"], [838, 2, 1, "", "set_output"], [838, 2, 1, "", "set_params"], [838, 2, 1, "", "set_transform_request"], [838, 2, 1, "", "transform"]], "sklearn.preprocessing.OneHotEncoder": [[839, 2, 1, "", "fit"], [839, 2, 1, "", "fit_transform"], [839, 2, 1, "", "get_feature_names_out"], [839, 2, 1, "", "get_metadata_routing"], [839, 2, 1, "", "get_params"], [839, 3, 1, "", "infrequent_categories_"], [839, 2, 1, "", "inverse_transform"], [839, 2, 1, "", "set_output"], [839, 2, 1, "", "set_params"], [839, 2, 1, "", "transform"]], "sklearn.preprocessing.OrdinalEncoder": [[840, 2, 1, "", "fit"], [840, 2, 1, "", "fit_transform"], [840, 2, 1, "", "get_feature_names_out"], [840, 2, 1, "", "get_metadata_routing"], [840, 2, 1, "", "get_params"], [840, 3, 1, "", "infrequent_categories_"], [840, 2, 1, "", "inverse_transform"], [840, 2, 1, "", "set_output"], [840, 2, 1, "", "set_params"], [840, 2, 1, "", "transform"]], "sklearn.preprocessing.PolynomialFeatures": [[841, 2, 1, "", "fit"], [841, 2, 1, "", "fit_transform"], [841, 2, 1, "", "get_feature_names_out"], [841, 2, 1, "", "get_metadata_routing"], [841, 2, 1, "", "get_params"], [841, 3, 1, "", "powers_"], [841, 2, 1, "", "set_output"], [841, 2, 1, "", "set_params"], [841, 2, 1, "", "transform"]], "sklearn.preprocessing.PowerTransformer": [[842, 2, 1, "", "fit"], [842, 2, 1, "", "fit_transform"], [842, 2, 1, "", "get_feature_names_out"], [842, 2, 1, "", "get_metadata_routing"], [842, 2, 1, "", "get_params"], [842, 2, 1, "", "inverse_transform"], [842, 2, 1, "", "set_output"], [842, 2, 1, "", "set_params"], [842, 2, 1, "", "transform"]], "sklearn.preprocessing.QuantileTransformer": [[843, 2, 1, "", "fit"], [843, 2, 1, "", "fit_transform"], [843, 2, 1, "", "get_feature_names_out"], [843, 2, 1, "", "get_metadata_routing"], [843, 2, 1, "", "get_params"], [843, 2, 1, "", "inverse_transform"], [843, 2, 1, "", "set_output"], [843, 2, 1, "", "set_params"], [843, 2, 1, "", "transform"]], "sklearn.preprocessing.RobustScaler": [[844, 2, 1, "", "fit"], [844, 2, 1, "", "fit_transform"], [844, 2, 1, "", "get_feature_names_out"], [844, 2, 1, "", "get_metadata_routing"], [844, 2, 1, "", "get_params"], [844, 2, 1, "", "inverse_transform"], [844, 2, 1, "", "set_output"], [844, 2, 1, "", "set_params"], [844, 2, 1, "", "transform"]], "sklearn.preprocessing.SplineTransformer": [[845, 2, 1, "", "fit"], [845, 2, 1, "", "fit_transform"], [845, 2, 1, "", "get_feature_names_out"], [845, 2, 1, "", "get_metadata_routing"], [845, 2, 1, "", "get_params"], [845, 2, 1, "", "set_fit_request"], [845, 2, 1, "", "set_output"], [845, 2, 1, "", "set_params"], [845, 2, 1, "", "transform"]], "sklearn.preprocessing.StandardScaler": [[846, 2, 1, "", "fit"], [846, 2, 1, "", "fit_transform"], [846, 2, 1, "", "get_feature_names_out"], [846, 2, 1, "", "get_metadata_routing"], [846, 2, 1, "", "get_params"], [846, 2, 1, "", "inverse_transform"], [846, 2, 1, "", "partial_fit"], [846, 2, 1, "", "set_fit_request"], [846, 2, 1, "", "set_inverse_transform_request"], [846, 2, 1, "", "set_output"], [846, 2, 1, "", "set_params"], [846, 2, 1, "", "set_partial_fit_request"], [846, 2, 1, "", "set_transform_request"], [846, 2, 1, "", "transform"]], "sklearn.preprocessing.TargetEncoder": [[847, 2, 1, "", "fit"], [847, 2, 1, "", "fit_transform"], [847, 2, 1, "", "get_feature_names_out"], [847, 2, 1, "", "get_metadata_routing"], [847, 2, 1, "", "get_params"], [847, 3, 1, "", "infrequent_categories_"], [847, 2, 1, "", "set_output"], [847, 2, 1, "", "set_params"], [847, 2, 1, "", "transform"]], "sklearn.random_projection": [[858, 1, 1, "", "GaussianRandomProjection"], [859, 1, 1, "", "SparseRandomProjection"], [860, 4, 1, "", "johnson_lindenstrauss_min_dim"]], "sklearn.random_projection.GaussianRandomProjection": [[858, 2, 1, "", "fit"], [858, 2, 1, "", "fit_transform"], [858, 2, 1, "", "get_feature_names_out"], [858, 2, 1, "", "get_metadata_routing"], [858, 2, 1, "", "get_params"], [858, 2, 1, "", "inverse_transform"], [858, 2, 1, "", "set_output"], [858, 2, 1, "", "set_params"], [858, 2, 1, "", "transform"]], "sklearn.random_projection.SparseRandomProjection": [[859, 2, 1, "", "fit"], [859, 2, 1, "", "fit_transform"], [859, 2, 1, "", "get_feature_names_out"], [859, 2, 1, "", "get_metadata_routing"], [859, 2, 1, "", "get_params"], [859, 2, 1, "", "inverse_transform"], [859, 2, 1, "", "set_output"], [859, 2, 1, "", "set_params"], [859, 2, 1, "", "transform"]], "sklearn.semi_supervised": [[861, 1, 1, "", "LabelPropagation"], [862, 1, 1, "", "LabelSpreading"], [863, 1, 1, "", "SelfTrainingClassifier"]], "sklearn.semi_supervised.LabelPropagation": [[861, 2, 1, "", "fit"], [861, 2, 1, "", "get_metadata_routing"], [861, 2, 1, "", "get_params"], [861, 2, 1, "", "predict"], [861, 2, 1, "", "predict_proba"], [861, 2, 1, "", "score"], [861, 2, 1, "", "set_params"], [861, 2, 1, "", "set_score_request"]], "sklearn.semi_supervised.LabelSpreading": [[862, 2, 1, "", "fit"], [862, 2, 1, "", "get_metadata_routing"], [862, 2, 1, "", "get_params"], [862, 2, 1, "", "predict"], [862, 2, 1, "", "predict_proba"], [862, 2, 1, "", "score"], [862, 2, 1, "", "set_params"], [862, 2, 1, "", "set_score_request"]], "sklearn.semi_supervised.SelfTrainingClassifier": [[863, 2, 1, "", "decision_function"], [863, 2, 1, "", "fit"], [863, 2, 1, "", "get_metadata_routing"], [863, 2, 1, "", "get_params"], [863, 2, 1, "", "predict"], [863, 2, 1, "", "predict_log_proba"], [863, 2, 1, "", "predict_proba"], [863, 2, 1, "", "score"], [863, 2, 1, "", "set_params"]], "sklearn.svm": [[866, 1, 1, "", "LinearSVC"], [867, 1, 1, "", "LinearSVR"], [868, 1, 1, "", "NuSVC"], [869, 1, 1, "", "NuSVR"], [870, 1, 1, "", "OneClassSVM"], [871, 1, 1, "", "SVC"], [872, 1, 1, "", "SVR"], [873, 4, 1, "", "l1_min_c"]], "sklearn.svm.LinearSVC": [[866, 2, 1, "", "decision_function"], [866, 2, 1, "", "densify"], [866, 2, 1, "", "fit"], [866, 2, 1, "", "get_metadata_routing"], [866, 2, 1, "", "get_params"], [866, 2, 1, "", "predict"], [866, 2, 1, "", "score"], [866, 2, 1, "", "set_fit_request"], [866, 2, 1, "", "set_params"], [866, 2, 1, "", "set_score_request"], [866, 2, 1, "", "sparsify"]], "sklearn.svm.LinearSVR": [[867, 2, 1, "", "fit"], [867, 2, 1, "", "get_metadata_routing"], [867, 2, 1, "", "get_params"], [867, 2, 1, "", "predict"], [867, 2, 1, "", "score"], [867, 2, 1, "", "set_fit_request"], [867, 2, 1, "", "set_params"], [867, 2, 1, "", "set_score_request"]], "sklearn.svm.NuSVC": [[868, 3, 1, "", "coef_"], [868, 2, 1, "", "decision_function"], [868, 2, 1, "", "fit"], [868, 2, 1, "", "get_metadata_routing"], [868, 2, 1, "", "get_params"], [868, 3, 1, "", "n_support_"], [868, 2, 1, "", "predict"], [868, 2, 1, "", "predict_log_proba"], [868, 2, 1, "", "predict_proba"], [868, 3, 1, "", "probA_"], [868, 3, 1, "", "probB_"], [868, 2, 1, "", "score"], [868, 2, 1, "", "set_fit_request"], [868, 2, 1, "", "set_params"], [868, 2, 1, "", "set_score_request"]], "sklearn.svm.NuSVR": [[869, 3, 1, "", "coef_"], [869, 2, 1, "", "fit"], [869, 2, 1, "", "get_metadata_routing"], [869, 2, 1, "", "get_params"], [869, 3, 1, "", "n_support_"], [869, 2, 1, "", "predict"], [869, 2, 1, "", "score"], [869, 2, 1, "", "set_fit_request"], [869, 2, 1, "", "set_params"], [869, 2, 1, "", "set_score_request"]], "sklearn.svm.OneClassSVM": [[870, 3, 1, "", "coef_"], [870, 2, 1, "", "decision_function"], [870, 2, 1, "", "fit"], [870, 2, 1, "", "fit_predict"], [870, 2, 1, "", "get_metadata_routing"], [870, 2, 1, "", "get_params"], [870, 3, 1, "", "n_support_"], [870, 2, 1, "", "predict"], [870, 2, 1, "", "score_samples"], [870, 2, 1, "", "set_fit_request"], [870, 2, 1, "", "set_params"]], "sklearn.svm.SVC": [[871, 3, 1, "", "coef_"], [871, 2, 1, "", "decision_function"], [871, 2, 1, "", "fit"], [871, 2, 1, "", "get_metadata_routing"], [871, 2, 1, "", "get_params"], [871, 3, 1, "", "n_support_"], [871, 2, 1, "", "predict"], [871, 2, 1, "", "predict_log_proba"], [871, 2, 1, "", "predict_proba"], [871, 3, 1, "", "probA_"], [871, 3, 1, "", "probB_"], [871, 2, 1, "", "score"], [871, 2, 1, "", "set_fit_request"], [871, 2, 1, "", "set_params"], [871, 2, 1, "", "set_score_request"]], "sklearn.svm.SVR": [[872, 3, 1, "", "coef_"], [872, 2, 1, "", "fit"], [872, 2, 1, "", "get_metadata_routing"], [872, 2, 1, "", "get_params"], [872, 3, 1, "", "n_support_"], [872, 2, 1, "", "predict"], [872, 2, 1, "", "score"], [872, 2, 1, "", "set_fit_request"], [872, 2, 1, "", "set_params"], [872, 2, 1, "", "set_score_request"]], "sklearn.tree": [[874, 1, 1, "", "DecisionTreeClassifier"], [875, 1, 1, "", "DecisionTreeRegressor"], [876, 1, 1, "", "ExtraTreeClassifier"], [877, 1, 1, "", "ExtraTreeRegressor"], [878, 4, 1, "", "export_graphviz"], [879, 4, 1, "", "export_text"], [880, 4, 1, "", "plot_tree"]], "sklearn.tree.DecisionTreeClassifier": [[874, 2, 1, "", "apply"], [874, 2, 1, "", "cost_complexity_pruning_path"], [874, 2, 1, "", "decision_path"], [874, 3, 1, "", "feature_importances_"], [874, 2, 1, "", "fit"], [874, 2, 1, "", "get_depth"], [874, 2, 1, "", "get_metadata_routing"], [874, 2, 1, "", "get_n_leaves"], [874, 2, 1, "", "get_params"], [874, 2, 1, "", "predict"], [874, 2, 1, "", "predict_log_proba"], [874, 2, 1, "", "predict_proba"], [874, 2, 1, "", "score"], [874, 2, 1, "", "set_fit_request"], [874, 2, 1, "", "set_params"], [874, 2, 1, "", "set_predict_proba_request"], [874, 2, 1, "", "set_predict_request"], [874, 2, 1, "", "set_score_request"]], "sklearn.tree.DecisionTreeRegressor": [[875, 2, 1, "", "apply"], [875, 2, 1, "", "cost_complexity_pruning_path"], [875, 2, 1, "", "decision_path"], [875, 3, 1, "", "feature_importances_"], [875, 2, 1, "", "fit"], [875, 2, 1, "", "get_depth"], [875, 2, 1, "", "get_metadata_routing"], [875, 2, 1, "", "get_n_leaves"], [875, 2, 1, "", "get_params"], [875, 2, 1, "", "predict"], [875, 2, 1, "", "score"], [875, 2, 1, "", "set_fit_request"], [875, 2, 1, "", "set_params"], [875, 2, 1, "", "set_predict_request"], [875, 2, 1, "", "set_score_request"]], "sklearn.tree.ExtraTreeClassifier": [[876, 2, 1, "", "apply"], [876, 2, 1, "", "cost_complexity_pruning_path"], [876, 2, 1, "", "decision_path"], [876, 3, 1, "", "feature_importances_"], [876, 2, 1, "", "fit"], [876, 2, 1, "", "get_depth"], [876, 2, 1, "", "get_metadata_routing"], [876, 2, 1, "", "get_n_leaves"], [876, 2, 1, "", "get_params"], [876, 2, 1, "", "predict"], [876, 2, 1, "", "predict_log_proba"], [876, 2, 1, "", "predict_proba"], [876, 2, 1, "", "score"], [876, 2, 1, "", "set_fit_request"], [876, 2, 1, "", "set_params"], [876, 2, 1, "", "set_predict_proba_request"], [876, 2, 1, "", "set_predict_request"], [876, 2, 1, "", "set_score_request"]], "sklearn.tree.ExtraTreeRegressor": [[877, 2, 1, "", "apply"], [877, 2, 1, "", "cost_complexity_pruning_path"], [877, 2, 1, "", "decision_path"], [877, 3, 1, "", "feature_importances_"], [877, 2, 1, "", "fit"], [877, 2, 1, "", "get_depth"], [877, 2, 1, "", "get_metadata_routing"], [877, 2, 1, "", "get_n_leaves"], [877, 2, 1, "", "get_params"], [877, 2, 1, "", "predict"], [877, 2, 1, "", "score"], [877, 2, 1, "", "set_fit_request"], [877, 2, 1, "", "set_params"], [877, 2, 1, "", "set_predict_request"], [877, 2, 1, "", "set_score_request"]], "sklearn.utils": [[881, 1, 1, "", "Bunch"], [882, 4, 1, "", "_safe_indexing"], [373, 0, 0, "-", "arrayfuncs"], [884, 4, 1, "", "as_float_array"], [885, 4, 1, "", "assert_all_finite"], [886, 4, 1, "", "check_X_y"], [887, 4, 1, "", "check_array"], [888, 4, 1, "", "check_consistent_length"], [889, 4, 1, "", "check_random_state"], [890, 4, 1, "", "check_scalar"], [373, 0, 0, "-", "class_weight"], [893, 4, 1, "", "deprecated"], [373, 0, 0, "-", "discovery"], [373, 0, 0, "-", "estimator_checks"], [899, 4, 1, "", "estimator_html_repr"], [373, 0, 0, "-", "extmath"], [906, 4, 1, "", "gen_batches"], [907, 4, 1, "", "gen_even_slices"], [373, 0, 0, "-", "graph"], [909, 4, 1, "", "indexable"], [373, 0, 0, "-", "metadata_routing"], [373, 0, 0, "-", "metaestimators"], [373, 0, 0, "-", "multiclass"], [919, 4, 1, "", "murmurhash3_32"], [373, 0, 0, "-", "parallel"], [922, 4, 1, "", "parallel_backend"], [373, 0, 0, "-", "random"], [924, 4, 1, "", "register_parallel_backend"], [925, 4, 1, "", "resample"], [926, 4, 1, "", "safe_mask"], [927, 4, 1, "", "safe_sqr"], [928, 4, 1, "", "shuffle"], [373, 0, 0, "-", "sparsefuncs"], [373, 0, 0, "-", "sparsefuncs_fast"], [373, 0, 0, "-", "validation"]], "sklearn.utils.Bunch": [[881, 2, 1, "", "clear"], [881, 2, 1, "", "copy"], [881, 2, 1, "", "fromkeys"], [881, 2, 1, "", "get"], [881, 2, 1, "", "items"], [881, 2, 1, "", "keys"], [881, 2, 1, "", "pop"], [881, 2, 1, "", "popitem"], [881, 2, 1, "", "setdefault"], [881, 2, 1, "", "update"], [881, 2, 1, "", "values"]], "sklearn.utils.arrayfuncs": [[883, 4, 1, "", "min_pos"]], "sklearn.utils.class_weight": [[891, 4, 1, "", "compute_class_weight"], [892, 4, 1, "", "compute_sample_weight"]], "sklearn.utils.discovery": [[894, 4, 1, "", "all_displays"], [895, 4, 1, "", "all_estimators"], [896, 4, 1, "", "all_functions"]], "sklearn.utils.estimator_checks": [[897, 4, 1, "", "check_estimator"], [898, 4, 1, "", "parametrize_with_checks"]], "sklearn.utils.extmath": [[900, 4, 1, "", "density"], [901, 4, 1, "", "fast_logdet"], [902, 4, 1, "", "randomized_range_finder"], [903, 4, 1, "", "randomized_svd"], [904, 4, 1, "", "safe_sparse_dot"], [905, 4, 1, "", "weighted_mode"]], "sklearn.utils.graph": [[908, 4, 1, "", "single_source_shortest_path_length"]], "sklearn.utils.metadata_routing": [[910, 1, 1, "", "MetadataRequest"], [911, 1, 1, "", "MetadataRouter"], [912, 1, 1, "", "MethodMapping"], [913, 4, 1, "", "get_routing_for_object"], [914, 4, 1, "", "process_routing"]], "sklearn.utils.metadata_routing.MetadataRequest": [[910, 2, 1, "", "consumes"]], "sklearn.utils.metadata_routing.MetadataRouter": [[911, 2, 1, "", "add"], [911, 2, 1, "", "add_self_request"], [911, 2, 1, "", "consumes"], [911, 2, 1, "", "route_params"], [911, 2, 1, "", "validate_metadata"]], "sklearn.utils.metadata_routing.MethodMapping": [[912, 2, 1, "", "add"], [912, 2, 1, "", "from_str"]], "sklearn.utils.metaestimators": [[915, 4, 1, "", "available_if"]], "sklearn.utils.multiclass": [[916, 4, 1, "", "is_multilabel"], [917, 4, 1, "", "type_of_target"], [918, 4, 1, "", "unique_labels"]], "sklearn.utils.parallel": [[920, 1, 1, "", "Parallel"], [921, 4, 1, "", "delayed"]], "sklearn.utils.parallel.Parallel": [[920, 2, 1, "", "dispatch_next"], [920, 2, 1, "", "dispatch_one_batch"], [920, 2, 1, "", "format"], [920, 2, 1, "", "print_progress"]], "sklearn.utils.random": [[923, 4, 1, "", "sample_without_replacement"]], "sklearn.utils.sparsefuncs": [[929, 4, 1, "", "incr_mean_variance_axis"], [930, 4, 1, "", "inplace_column_scale"], [931, 4, 1, "", "inplace_csr_column_scale"], [932, 4, 1, "", "inplace_row_scale"], [933, 4, 1, "", "inplace_swap_column"], [934, 4, 1, "", "inplace_swap_row"], [935, 4, 1, "", "mean_variance_axis"]], "sklearn.utils.sparsefuncs_fast": [[936, 4, 1, "", "inplace_csr_row_normalize_l1"], [937, 4, 1, "", "inplace_csr_row_normalize_l2"]], "sklearn.utils.validation": [[938, 4, 1, "", "check_is_fitted"], [939, 4, 1, "", "check_memory"], [940, 4, 1, "", "check_symmetric"], [941, 4, 1, "", "column_or_1d"], [942, 4, 1, "", "has_fit_parameter"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:function", "5": "py:attribute"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "function", "Python function"], "5": ["py", "attribute", "Python attribute"]}, "titleterms": {"about": [0, 358], "u": 0, "histori": [0, 993], "govern": [0, 361], "author": [0, 995], "document": [0, 8, 19, 151, 290, 291, 319, 320, 321, 346, 361, 973, 974, 977, 991, 995, 998, 999, 1002, 1003], "team": [0, 345, 361], "contributor": [0, 345, 346, 361, 999, 1000, 1001, 1002, 1003], "experi": [0, 34, 345, 361], "commun": [0, 346, 361], "emeritu": 0, "core": [0, 8, 335, 345, 350, 352, 358, 361, 956], "develop": [0, 98, 99, 151, 216, 344, 347, 348, 349, 350, 353, 354, 355, 943, 990, 1011], "cite": 0, "scikit": [0, 216, 234, 288, 289, 290, 291, 292, 293, 294, 295, 332, 333, 344, 347, 348, 350, 351, 358, 361, 364, 373, 973, 974, 978, 979, 980, 985, 988, 991], "learn": [0, 5, 12, 47, 87, 90, 137, 151, 153, 154, 155, 159, 201, 202, 203, 204, 215, 216, 234, 241, 269, 275, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 332, 333, 335, 342, 344, 346, 347, 348, 350, 351, 358, 361, 364, 373, 379, 381, 949, 951, 959, 967, 973, 974, 976, 978, 979, 980, 982, 985, 986, 987, 988, 989, 991], "artwork": 0, "fund": 0, "past": 0, "sponsor": 0, "sprint": 0, "donat": 0, "project": [0, 80, 92, 95, 213, 346, 348, 358, 373, 966, 971, 973], "infrastructur": 0, "support": [0, 24, 111, 117, 151, 176, 285, 288, 289, 290, 291, 293, 294, 295, 303, 306, 315, 358, 364, 365, 370, 372, 373, 381, 969, 970, 977, 986, 1012, 1013], "exampl": [3, 6, 9, 50, 56, 71, 81, 93, 99, 118, 145, 151, 178, 179, 186, 313, 317, 335, 340, 341, 351, 358, 363, 365, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 388, 391, 394, 397, 398, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 423, 425, 427, 429, 430, 431, 432, 433, 434, 435, 437, 438, 439, 440, 441, 442, 444, 447, 448, 449, 452, 453, 454, 455, 456, 457, 459, 460, 461, 463, 464, 465, 466, 467, 469, 471, 475, 476, 477, 478, 479, 480, 484, 485, 486, 487, 488, 489, 490, 491, 492, 495, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 514, 515, 516, 517, 518, 519, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 546, 547, 549, 552, 553, 554, 555, 556, 558, 559, 562, 564, 565, 567, 569, 570, 571, 572, 573, 575, 576, 578, 579, 580, 582, 583, 584, 587, 588, 590, 592, 593, 595, 596, 597, 598, 599, 600, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 617, 618, 620, 621, 622, 623, 624, 627, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 649, 653, 654, 655, 656, 657, 658, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 674, 677, 678, 682, 683, 684, 691, 693, 696, 698, 699, 701, 702, 705, 706, 709, 710, 712, 713, 714, 716, 717, 719, 721, 725, 742, 743, 746, 748, 749, 750, 751, 752, 753, 754, 756, 757, 759, 761, 762, 763, 764, 765, 766, 767, 768, 769, 777, 778, 779, 780, 781, 782, 783, 784, 785, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 799, 801, 803, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 819, 822, 823, 824, 825, 826, 827, 830, 831, 833, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 852, 855, 859, 860, 862, 863, 864, 866, 868, 869, 870, 871, 872, 873, 874, 875, 880, 881, 889, 898, 900, 907, 911, 912, 913, 914, 915, 928, 938, 943, 946, 948, 949, 950, 951, 953, 954, 955, 957, 958, 959, 960, 961, 962, 964, 966, 967, 968, 969, 970, 971, 979, 985, 986, 987, 992, 995], "base": [3, 4, 79, 108, 109, 136, 151, 166, 215, 288, 289, 291, 293, 294, 295, 346, 373, 374, 378, 381, 383, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 950, 962, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012], "real": [3, 9, 71, 151, 341], "world": [3, 71, 151, 341], "dataset": [3, 4, 5, 8, 13, 23, 24, 26, 30, 41, 55, 59, 66, 79, 81, 82, 83, 84, 85, 87, 95, 101, 107, 110, 111, 122, 127, 138, 140, 142, 143, 145, 147, 151, 153, 154, 155, 161, 164, 166, 171, 182, 184, 191, 200, 202, 203, 209, 214, 219, 220, 237, 245, 246, 256, 258, 286, 301, 302, 305, 312, 320, 325, 338, 339, 340, 341, 342, 343, 351, 358, 373, 384, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 979, 985, 986, 988, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "time": [4, 13, 107, 176, 214, 215, 320, 378, 975], "relat": [4, 8, 340, 346, 962, 973, 1002], "featur": [4, 13, 48, 51, 70, 92, 106, 108, 109, 111, 115, 117, 119, 120, 130, 132, 134, 135, 136, 151, 156, 157, 159, 161, 176, 179, 200, 214, 220, 240, 277, 280, 281, 284, 285, 288, 290, 291, 311, 320, 321, 333, 335, 346, 350, 365, 373, 375, 381, 382, 383, 944, 962, 964, 971, 987, 988, 998, 999, 1000, 1001, 1002], "engin": [4, 13, 156, 973, 978], "data": [4, 7, 9, 12, 17, 20, 23, 25, 32, 35, 44, 46, 47, 52, 54, 55, 60, 61, 63, 64, 66, 71, 73, 75, 77, 79, 80, 88, 89, 92, 93, 94, 102, 108, 109, 112, 115, 117, 118, 122, 132, 135, 136, 144, 146, 150, 153, 156, 157, 159, 162, 168, 175, 176, 186, 210, 215, 222, 230, 234, 236, 240, 245, 246, 248, 249, 252, 262, 266, 271, 277, 279, 283, 284, 285, 295, 297, 308, 311, 315, 316, 321, 322, 329, 333, 335, 341, 351, 358, 360, 374, 375, 378, 383, 964, 968, 978, 979, 982, 985, 987, 988], "explor": 4, "bike": [4, 13, 155], "share": [4, 13, 155], "demand": [4, 13], "cross": [4, 78, 79, 127, 135, 151, 171, 234, 235, 237, 238, 242, 244, 249, 286, 311, 329, 373, 377, 378, 943, 950, 983], "valid": [4, 127, 135, 171, 213, 234, 235, 237, 238, 242, 244, 249, 254, 311, 329, 333, 348, 355, 373, 378, 938, 939, 940, 941, 942, 943, 949, 950, 983], "gradient": [4, 107, 111, 112, 113, 114, 115, 116, 117, 155, 182, 190, 196, 288, 289, 291, 293, 294, 381, 950, 968], "boost": [4, 107, 111, 112, 113, 114, 115, 116, 117, 155, 182, 288, 289, 291, 293, 294, 381], "naiv": [4, 13, 23, 24, 373, 956], "linear": [4, 24, 31, 32, 114, 138, 151, 154, 160, 161, 178, 182, 185, 188, 202, 203, 214, 289, 307, 312, 314, 315, 333, 355, 358, 373, 948, 950, 951, 952, 964, 986], "regress": [4, 13, 69, 71, 79, 80, 102, 114, 115, 125, 138, 143, 144, 145, 146, 161, 162, 165, 171, 173, 174, 175, 178, 180, 182, 184, 197, 199, 200, 212, 215, 271, 315, 326, 327, 342, 373, 375, 384, 945, 947, 950, 954, 955, 957, 958, 968, 969, 970, 986], "step": [4, 221, 359, 375], "categori": [4, 292, 294, 964], "trigonometr": 4, "period": [4, 183], "spline": [4, 183, 291, 964], "qualit": [4, 13], "analysi": [4, 26, 31, 32, 57, 87, 94, 97, 101, 114, 155, 166, 225, 241, 242, 249, 267, 268, 269, 320, 373, 377, 379, 948, 957, 971, 987, 988], "impact": [4, 58, 1010, 1011, 1012], "model": [4, 7, 11, 13, 54, 71, 79, 88, 94, 107, 108, 109, 111, 112, 115, 118, 135, 136, 138, 143, 151, 154, 155, 156, 159, 160, 161, 166, 170, 171, 176, 182, 185, 200, 210, 215, 219, 220, 224, 226, 230, 231, 232, 238, 239, 241, 246, 258, 266, 271, 277, 284, 289, 291, 295, 312, 315, 320, 333, 348, 358, 359, 361, 368, 369, 373, 378, 943, 949, 950, 953, 954, 956, 958, 959, 979, 983, 986, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "predict": [4, 10, 13, 23, 80, 102, 114, 125, 139, 153, 162, 182, 215, 235, 246, 297, 333, 358, 359, 378, 384, 954, 965, 979, 986], "pairwis": [4, 239, 373, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 952], "interact": [4, 155, 293, 381, 986], "polynomi": [4, 159, 161, 162, 183, 312, 946, 950, 952, 964, 986], "non": [4, 15, 87, 114, 177, 182, 186, 202, 244, 307, 314, 315, 379, 950, 964], "kernel": [4, 5, 92, 138, 143, 144, 146, 147, 151, 158, 159, 214, 215, 263, 264, 272, 290, 304, 307, 312, 315, 373, 379, 380, 384, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 946, 947, 952, 964, 969, 986], "conclud": [4, 206], "remark": [4, 54, 206, 213], "imag": [5, 44, 47, 50, 63, 90, 340, 373, 382, 548, 549, 550, 551, 552], "denois": [5, 90], "us": [5, 6, 12, 17, 45, 87, 88, 90, 119, 120, 122, 136, 143, 169, 185, 196, 198, 239, 243, 248, 258, 280, 315, 320, 321, 328, 329, 335, 347, 351, 352, 354, 358, 373, 378, 379, 382, 383, 388, 391, 394, 397, 398, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 423, 425, 427, 429, 430, 431, 432, 433, 434, 435, 437, 438, 439, 440, 441, 442, 444, 447, 448, 449, 452, 453, 454, 455, 456, 457, 459, 460, 461, 463, 464, 465, 466, 467, 469, 471, 475, 476, 477, 478, 479, 480, 484, 485, 486, 487, 488, 489, 490, 491, 492, 495, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 514, 515, 516, 517, 518, 519, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 546, 547, 549, 552, 553, 554, 555, 556, 558, 559, 562, 564, 565, 567, 569, 570, 571, 572, 573, 575, 576, 578, 579, 580, 582, 583, 584, 587, 588, 590, 592, 593, 595, 596, 597, 598, 599, 600, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 617, 618, 620, 621, 622, 623, 624, 627, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 649, 653, 654, 655, 656, 657, 658, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 674, 677, 678, 682, 683, 684, 691, 693, 696, 698, 699, 701, 702, 705, 706, 709, 710, 712, 713, 714, 716, 717, 719, 721, 725, 742, 743, 746, 748, 749, 750, 751, 752, 753, 754, 756, 757, 759, 761, 762, 763, 764, 765, 766, 767, 768, 769, 777, 778, 779, 780, 781, 782, 783, 784, 785, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 799, 801, 803, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 819, 822, 823, 824, 825, 826, 827, 830, 831, 833, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 852, 855, 859, 860, 862, 863, 864, 866, 868, 869, 870, 871, 872, 873, 874, 875, 880, 881, 889, 898, 900, 907, 911, 912, 913, 914, 915, 928, 938, 948, 950, 951, 954, 958, 968, 969, 970, 978, 986, 988, 1005], "pca": [5, 55, 69, 83, 87, 88, 91, 92, 93, 94, 95, 284, 295, 379, 506, 971, 987], "refer": [5, 11, 24, 26, 75, 76, 90, 101, 104, 156, 159, 166, 170, 239, 244, 245, 256, 272, 340, 341, 371, 372, 373, 374, 376, 379, 381, 382, 383, 384, 943, 944, 946, 947, 948, 950, 951, 952, 954, 955, 957, 959, 960, 961, 962, 964, 966, 967, 968, 969], "load": [5, 7, 17, 47, 55, 83, 107, 109, 111, 115, 127, 136, 156, 175, 200, 203, 210, 214, 222, 240, 248, 249, 258, 262, 284, 285, 308, 311, 320, 321, 322, 339, 340, 351, 358, 382, 979, 987, 988], "via": [5, 13, 50, 170, 171, 200, 381, 946], "openml": [5, 285, 288, 340], "basi": [5, 147, 384, 946, 950, 986], "reconstruct": [5, 14, 90], "test": [5, 73, 131, 242, 245, 252, 320, 324, 344, 346, 348, 354, 355, 378, 979, 986, 988], "face": [6, 47, 87, 218, 341, 978, 984], "recognit": [6, 341, 343, 984], "eigenfac": [6, 87, 984], "svm": [6, 129, 132, 133, 159, 196, 214, 291, 302, 304, 305, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 373, 866, 867, 868, 869, 870, 871, 872, 873, 950, 960, 968, 986, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "complex": [7, 211, 221, 238, 241, 299, 324, 333, 950, 957, 958, 968, 969, 970], "influenc": [7, 10, 333], "benchmark": [7, 10, 55, 320], "choos": [7, 943, 979, 981, 983], "paramet": [7, 73, 114, 237, 290, 308, 316, 346, 348, 359, 360, 373, 375, 381, 943, 950, 954, 969, 979, 983, 988], "run": [7, 55, 243], "code": [7, 87, 96, 346, 348, 351, 352, 354, 379, 999, 1000, 1001, 1002, 1003], "plot": [7, 8, 10, 20, 23, 28, 32, 35, 38, 44, 46, 47, 54, 60, 61, 63, 64, 73, 77, 79, 83, 84, 85, 88, 89, 102, 107, 110, 115, 118, 122, 123, 124, 125, 127, 135, 150, 155, 161, 162, 166, 174, 175, 176, 186, 187, 191, 203, 210, 214, 219, 220, 222, 230, 235, 236, 241, 243, 246, 248, 252, 254, 258, 266, 277, 285, 288, 290, 291, 297, 305, 306, 311, 312, 320, 325, 353, 373, 949, 961, 992], "result": [7, 8, 20, 26, 35, 44, 46, 47, 54, 55, 60, 61, 64, 73, 75, 77, 88, 89, 102, 107, 122, 125, 150, 159, 166, 187, 215, 219, 243, 252, 258, 266, 285, 315, 321, 329, 943], "conclus": [7, 13, 138, 166, 171, 256, 262, 286, 312], "out": [8, 113, 335, 354, 378, 943, 950, 956], "classif": [8, 25, 27, 28, 30, 31, 66, 84, 128, 139, 140, 141, 142, 146, 151, 198, 217, 242, 245, 246, 249, 258, 262, 270, 277, 288, 296, 301, 312, 320, 342, 373, 384, 950, 954, 955, 957, 958, 968, 969, 970, 986, 988], "text": [8, 151, 211, 240, 301, 319, 320, 321, 322, 341, 373, 382, 553, 554, 555, 556, 988], "reuter": 8, "routin": [8, 334, 355], "main": [8, 182], "outlier": [9, 164, 199, 209, 219, 265, 266, 279, 373, 950, 960, 964], "detect": [9, 209, 219, 236, 265, 266, 954, 960, 969], "set": [9, 71, 73, 93, 122, 150, 186, 246, 308, 324, 358, 373, 378, 950, 979, 985, 986, 988], "first": [9, 34, 346], "second": [9, 34], "latenc": [10, 333], "helper": [10, 147, 203, 355], "function": [10, 32, 147, 172, 186, 187, 192, 203, 234, 252, 290, 311, 322, 355, 373, 378, 381, 384, 946, 950, 954, 969, 986, 1012], "bulk": [10, 333], "atom": [10, 333], "speed": [10, 352], "variou": [10, 49, 189, 207], "regressor": [10, 102, 114, 161, 186, 286, 288, 291, 373, 381], "n_featur": 10, "throughput": [10, 333], "speci": [11, 272, 341], "distribut": [11, 200, 202, 272, 283, 341, 364, 951, 964], "visual": [12, 55, 97, 112, 210, 215, 222, 234, 276, 289, 308, 373, 374, 375, 954, 992], "stock": [12, 984], "market": [12, 984], "structur": [12, 36, 44, 64, 146, 299, 328, 984], "retriev": [12, 288], "from": [12, 90, 136, 156, 285, 288, 334, 340, 344, 358, 373, 382, 954, 979, 986, 987, 988, 1005], "internet": 12, "graph": [12, 288, 355, 358, 373, 374, 382, 908], "cluster": [12, 19, 21, 33, 34, 35, 36, 37, 38, 41, 42, 44, 46, 49, 52, 53, 55, 57, 60, 61, 62, 63, 64, 87, 151, 292, 294, 321, 342, 371, 373, 374, 379, 385, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 679, 680, 954, 987, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "affin": [12, 35, 374, 952], "propag": [12, 35, 297, 298, 299, 374, 967], "embed": [12, 49, 202, 203, 213, 269, 381, 951], "2d": [12, 49, 89, 95, 155], "space": [12, 92, 375, 943, 951], "lag": 13, "seri": [13, 176, 378], "forecast": [13, 143], "analyz": [13, 943], "gener": [13, 20, 23, 32, 35, 44, 46, 52, 54, 60, 61, 63, 64, 73, 75, 77, 84, 85, 88, 89, 90, 108, 118, 132, 135, 138, 144, 145, 147, 151, 160, 161, 162, 166, 176, 182, 184, 215, 230, 236, 252, 266, 271, 277, 289, 297, 315, 316, 329, 342, 346, 360, 373, 379, 381, 950, 964, 974, 983], "panda": [13, 293, 351, 358], "evalu": [13, 34, 55, 58, 76, 182, 219, 240, 243, 277, 285, 321, 359, 369, 371, 374, 378, 381, 943, 949, 954, 988], "next": [13, 359], "hour": 13, "proper": [13, 143], "uncertainti": 13, "quantil": [13, 114, 117, 184, 291, 292, 950], "A": [13, 20, 21, 44, 55, 60, 182, 291, 345, 352, 368, 378, 982, 985], "look": [13, 215, 315], "compress": [14, 50, 333], "sens": 14, "tomographi": 14, "l1": [14, 166, 173, 175, 198, 316, 383], "prior": [14, 147, 225], "lasso": [14, 166, 167, 168, 169, 170, 171, 176, 289, 617, 950], "topic": 15, "extract": [15, 70, 90, 200, 240, 321, 333, 335, 373, 382, 988], "neg": [15, 87, 136, 177, 379, 950], "matrix": [15, 17, 146, 163, 233, 373, 374, 379, 954], "factor": [15, 87, 94, 97, 265, 266, 379, 960], "latent": [15, 79, 379], "dirichlet": [15, 379, 953], "alloc": [15, 379], "libsvm": [16, 340], "gui": 16, "wikipedia": 17, "princip": [17, 80, 379, 971, 987], "eigenvector": 17, "download": [17, 122, 150, 340], "alreadi": 17, "disk": 17, "redirect": 17, "file": [17, 364, 382, 988], "comput": [17, 35, 44, 46, 60, 61, 64, 73, 107, 175, 187, 252, 332, 333, 373, 375, 378, 961, 975], "adjac": 17, "singular": [17, 379], "vector": [17, 24, 50, 151, 303, 306, 315, 320, 322, 373, 382, 969, 986, 987], "random": [17, 87, 105, 107, 120, 121, 156, 157, 213, 222, 245, 247, 295, 329, 348, 355, 373, 378, 379, 381, 923, 943, 950, 966, 971], "svd": [17, 87, 379], "central": 17, "score": [17, 79, 107, 127, 135, 150, 161, 230, 238, 245, 246, 311, 365, 374, 378, 949, 954, 969, 983], "biclust": [18, 19, 20, 151, 342, 371, 373], "spectral": [19, 20, 21, 63, 202, 371, 374, 951], "co": [19, 21, 371], "algorithm": [19, 20, 21, 35, 41, 46, 52, 60, 61, 62, 202, 209, 352, 358, 948, 950, 955, 957, 958, 962, 970, 986], "demo": [20, 21, 35, 44, 46, 52, 55, 60, 62], "sampl": [20, 35, 52, 60, 73, 88, 89, 132, 163, 195, 215, 240, 252, 271, 289, 315, 318, 340, 355, 360, 373, 381, 950], "fit": [20, 25, 54, 88, 94, 108, 109, 114, 115, 143, 161, 162, 163, 176, 179, 184, 188, 246, 258, 266, 271, 286, 315, 329, 348, 359, 365, 381, 956, 960, 979], "spectralbiclust": [20, 416], "calibr": [22, 23, 24, 25, 26, 114, 151, 182, 372, 373, 402, 403, 404, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012], "probabl": [23, 24, 25, 28, 124, 141, 372, 373, 381, 969], "classifi": [23, 24, 26, 29, 99, 125, 165, 221, 236, 258, 262, 288, 302, 305, 308, 320, 328, 372, 373, 381, 948, 957, 986, 988], "synthet": [23, 71, 161, 166, 236, 286, 351], "gaussian": [23, 24, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 151, 224, 225, 226, 229, 230, 231, 279, 373, 384, 953, 956, 964, 966], "bay": [23, 24, 373, 956], "curv": [24, 26, 162, 215, 222, 231, 236, 241, 246, 248, 254, 372, 949], "summari": [24, 112, 171, 321, 322, 995, 996, 997, 998, 999, 1000, 1001, 1002], "3": [25, 165, 294, 988, 1003, 1004, 1009, 1011], "class": [25, 34, 101, 103, 124, 165, 191, 196, 242, 246, 248, 291, 307, 310, 360, 373, 378, 381, 382, 954, 957, 960, 968, 969, 995, 996], "compar": [25, 39, 41, 59, 73, 79, 107, 121, 132, 159, 161, 168, 184, 189, 209, 215, 239, 247, 267, 275, 279, 285, 358], "comparison": [26, 29, 32, 40, 61, 75, 95, 111, 112, 131, 138, 202, 203, 215, 239, 250, 256, 322, 950], "recogn": 30, "hand": 30, "written": 30, "digit": [30, 49, 55, 82, 128, 203, 277, 297, 298, 343, 985], "normal": [31, 159, 182, 279, 283, 373, 838, 853, 954, 964], "ledoit": [31, 74, 376], "wolf": [31, 74, 376], "oa": [31, 73, 74, 387, 440], "discrimin": [31, 32, 373, 948], "quadrat": [32, 384, 948], "covari": [32, 72, 73, 75, 76, 77, 151, 227, 373, 376, 387, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 948, 1003, 1007, 1008, 1009, 1011, 1012], "ellipsoid": [32, 226], "lda": [32, 95, 379, 948], "qda": [32, 948], "adjust": 34, "chanc": 34, "perform": [34, 40, 242, 284, 290, 292, 297, 321, 333, 346, 347, 374, 378, 988], "defin": [34, 44, 55, 64, 202, 234, 236, 237, 322, 954], "list": [34, 977], "metric": [34, 37, 114, 243, 370, 373, 374, 378, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 943, 952, 954, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "fix": [34, 350, 995, 998, 999, 1000, 1001, 1002, 1008], "ground": [34, 161], "truth": [34, 161], "label": [34, 246, 297, 298, 299, 341, 342, 373, 374, 378, 381, 954, 965, 967], "grow": 34, "number": [34, 57, 111, 117, 135, 251, 333, 348, 943, 944], "vari": [34, 274, 300, 374], "agglom": [36, 37, 49, 987], "without": [36, 267, 320], "differ": [37, 41, 59, 73, 147, 155, 279, 282, 285, 305, 312, 348, 358, 365, 374, 950, 986], "hierarch": [38, 44, 59, 64, 294, 374, 987], "dendrogram": 38, "birch": [39, 374, 407], "minibatchkmean": [39, 61, 87, 414], "bisect": [40, 374], "k": [40, 42, 45, 54, 55, 56, 58, 61, 64, 79, 262, 284, 321, 374, 378, 954, 957, 964, 986, 987], "mean": [40, 42, 45, 54, 55, 56, 58, 60, 61, 108, 109, 150, 156, 186, 321, 374, 954, 964, 987], "regular": [40, 73, 116, 154, 175, 186, 187, 274, 316, 950, 958], "toi": [41, 59, 209, 343], "segment": [43, 63], "pictur": 43, "greek": 43, "coin": [43, 44], "region": [43, 239], "ward": [44, 64, 374, 987], "an": [44, 56, 99, 150, 163, 171, 269, 288, 292, 358, 382, 943, 960, 979, 985, 986], "color": 45, "quantiz": [45, 50, 987], "dbscan": [46, 374, 385, 409], "onlin": [47, 189, 291, 292, 968], "dictionari": [47, 87, 90, 96, 379], "part": [47, 383], "agglomer": [48, 51, 971, 987], "origin": [50, 92, 245, 269, 279], "encod": [50, 111, 285, 286, 294, 964, 965], "strategi": [50, 237, 256, 275, 282, 294, 335, 373, 374, 954], "memori": [50, 295, 333, 352, 354], "footprint": 50, "v": [51, 64, 73, 74, 76, 80, 92, 135, 155, 156, 164, 174, 200, 242, 248, 252, 253, 324, 374, 381, 944, 979], "univari": [51, 79, 132, 311, 383, 944], "select": [51, 57, 68, 94, 127, 130, 132, 135, 136, 151, 170, 171, 176, 230, 232, 311, 358, 365, 369, 373, 378, 383, 943, 950, 983, 1001], "hdbscan": [52, 294, 374, 411], "scale": [52, 154, 202, 205, 284, 316, 335, 857, 951, 960, 964, 971], "invari": [52, 242], "multi": [52, 101, 121, 155, 176, 191, 205, 218, 243, 246, 274, 327, 352, 373, 950, 951, 954, 958, 969, 970], "hyperparamet": [52, 143, 144, 240, 247, 256, 582], "robust": [52, 75, 76, 161, 185, 188, 329, 373, 376, 943, 950], "min_cluster_s": 52, "min_sampl": 52, "dbscan_clust": 52, "induct": 53, "demonstr": [54, 243, 282, 297], "assumpt": 54, "possibl": [54, 351], "solut": 54, "final": [54, 138], "handwritten": [55, 203, 343], "our": [55, 234, 237, 346], "reduc": [55, 333], "initi": [56, 58, 228], "silhouett": [57, 374], "kmean": [57, 61, 289, 412], "empir": [58, 76, 213, 376], "linkag": [59, 374], "method": [59, 70, 79, 100, 138, 151, 202, 204, 228, 255, 257, 360, 373, 374, 946, 960, 961, 987], "shift": [60, 374], "meanshift": [60, 413], "establish": [61, 159], "pariti": 61, "between": [61, 250, 950], "optic": [62, 343, 374, 415], "four": 63, "circl": 63, "two": [63, 103, 168, 220, 239], "unstructur": 64, "we": 64, "ar": [64, 291, 358], "nearest": [64, 151, 259, 260, 261, 262, 267, 270, 271, 288, 373, 944, 957, 986], "neighbor": [64, 151, 202, 259, 260, 261, 262, 267, 271, 284, 288, 373, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 944, 951, 957, 986, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012], "10": [64, 995], "pipelin": [65, 66, 68, 69, 122, 133, 151, 154, 211, 216, 221, 240, 285, 311, 348, 358, 359, 373, 375, 383, 825, 826, 827, 828, 971, 984, 988, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1013], "composit": [65, 151, 373, 375, 943], "estim": [65, 72, 73, 74, 75, 76, 77, 98, 99, 104, 111, 113, 121, 144, 150, 151, 161, 185, 188, 211, 216, 218, 219, 229, 247, 256, 263, 264, 272, 288, 289, 290, 293, 295, 329, 348, 358, 359, 360, 370, 373, 375, 376, 378, 380, 381, 943, 944, 948, 950, 954, 969, 973, 981, 983, 985, 996, 1003, 1004, 1005], "column": [66, 67, 221], "transform": [66, 67, 68, 71, 79, 106, 120, 221, 290, 291, 292, 338, 358, 359, 375, 957, 964, 965, 966, 987], "heterogen": [66, 375], "sourc": [66, 88, 344], "20": [66, 320, 341, 988, 1003], "newsgroup": [66, 320, 341, 988], "creat": [66, 94, 101, 186, 210, 246, 286, 311, 312, 358], "mix": 67, "type": [67, 225, 348, 360, 374, 979], "dimension": [68, 202, 205, 221, 268, 284, 321, 948, 951, 957, 971, 986], "reduct": [68, 202, 206, 221, 268, 284, 321, 948, 957, 971], "gridsearchcv": [68, 127, 243, 763], "illustr": [68, 142, 147, 269, 384], "cach": [68, 261, 375], "within": 68, "chain": [69, 221, 258, 359, 375], "logist": [69, 165, 172, 173, 174, 175, 197, 198, 950, 986], "concaten": 70, "multipl": [70, 221, 243, 329, 353, 378, 943, 944, 954, 1003, 1004], "effect": [71, 117, 153, 207, 279, 284, 300, 324], "target": [71, 145, 200, 285, 286, 358, 360, 373, 375, 955, 964, 965], "shrinkag": [73, 376, 381, 948, 986], "ledoitwolf": [73, 438], "max": [73, 954], "likelihood": [73, 161, 162, 242, 954, 959], "approach": [73, 171, 239], "mahalanobi": 75, "distanc": [75, 373], "relev": [75, 166, 950], "minimum": [76, 376], "determin": [76, 166, 376, 950, 954], "spars": [77, 87, 96, 154, 166, 168, 197, 288, 295, 320, 321, 355, 373, 376, 379, 383, 964, 966, 968, 1012], "invers": [77, 376, 966], "decomposit": [78, 79, 86, 87, 104, 151, 342, 373, 377, 379, 386, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 987, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "variabl": [79, 153, 154, 334, 358, 373, 986], "canon": [79, 377], "symmetr": 79, "pl": 79, "scatter": [79, 83], "multivari": [79, 944], "respons": [79, 361], "pls2": 79, "pls1": 79, "cca": [79, 447], "mode": [79, 333, 344], "b": 79, "deflat": 79, "compon": [80, 87, 267, 268, 269, 379, 957, 971, 987], "partial": [80, 153, 155, 220, 961], "least": [80, 114, 171, 177, 180, 950], "squar": [80, 114, 147, 177, 180, 186, 384, 946, 950, 952, 954], "The": [80, 82, 83, 153, 154, 182, 207, 213, 237, 246, 256, 341, 350, 378, 382, 953, 954, 966, 986, 987], "one": [80, 111, 220, 950, 954], "power": [80, 182], "iri": [83, 93, 95, 110, 140, 191, 302, 305, 325, 343, 384, 985], "represent": [83, 155, 211, 289, 333, 348, 382, 987], "randomli": [84, 85], "multilabel": [85, 217, 258, 342, 355, 373, 954, 955, 979], "prepar": [87, 102, 112, 117, 159, 202, 248, 249, 284, 308, 350], "nmf": [87, 292, 379, 505], "independ": [87, 379, 987], "fastica": [87, 88, 89, 386, 498], "minibatchsparsepca": [87, 379, 504], "center": [87, 964], "fa": [87, 94], "posit": [87, 291], "blind": 88, "separ": [88, 194, 309, 310], "ica": [88, 379, 987], "point": [89, 269], "cloud": 89, "distort": 90, "displai": [90, 187, 210, 211, 221, 293, 294, 295, 354, 992, 1011], "patch": [90, 382], "noisi": [90, 145, 186], "them": [90, 345], "increment": [91, 335, 379], "kernelpca": [92, 500], "probabilist": [94, 139, 379, 384], "precomput": [96, 163, 288, 379], "rotat": 97, "pattern": 97, "__sklearn_is_fitted__": 99, "api": [99, 222, 223, 288, 291, 293, 334, 348, 353, 360, 365, 370, 373, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1005, 1012], "custom": [99, 237, 304, 382, 964, 969], "implement": [99, 168, 358, 954, 957, 968, 969], "simpl": [99, 138, 216, 264, 352, 985], "ensembl": [100, 106, 110, 151, 292, 373, 381, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "adaboost": [101, 102, 103, 381], "decis": [101, 102, 110, 118, 123, 151, 214, 262, 294, 302, 312, 323, 324, 325, 326, 327, 328, 358, 361, 373, 970], "tree": [101, 102, 106, 108, 109, 110, 117, 120, 151, 156, 182, 288, 293, 294, 295, 323, 324, 325, 326, 327, 328, 358, 373, 381, 383, 874, 875, 876, 877, 878, 879, 880, 957, 962, 970, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "train": [101, 102, 112, 115, 118, 125, 135, 186, 210, 215, 219, 220, 222, 230, 252, 256, 277, 285, 286, 290, 300, 308, 312, 320, 324, 325, 328, 378, 957, 967, 979, 986, 988], "adaboostclassifi": [101, 518], "converg": 101, "error": [101, 105, 112, 114, 127, 161, 186, 236, 252, 354, 364, 950, 954], "weight": [101, 161, 163, 195, 276, 289, 318, 365, 373, 381, 382], "weak": [101, 381], "learner": [101, 381], "decisiontre": 102, "singl": [104, 122, 200, 210, 342, 374, 944], "versu": [104, 196, 244, 302, 333], "bag": [104, 113, 320, 381, 382, 943, 988], "bia": 104, "varianc": [104, 180, 383, 954, 964], "oob": 105, "forest": [105, 107, 108, 109, 121, 156, 157, 219, 222, 295, 341, 381, 960], "histogram": [107, 117, 289, 291, 293, 380, 381], "import": [108, 109, 115, 136, 156, 157, 214, 256, 284, 288, 381, 962], "decreas": [108, 109, 156], "impur": [108, 109, 156, 324, 962], "permut": [108, 156, 157, 245, 288, 378, 962], "pixel": 109, "parallel": [109, 334, 344, 352, 373, 374, 381, 920, 921, 943], "mdi": [109, 156], "surfac": [110, 214, 325], "categor": [111, 285, 290, 295, 358, 381, 956, 964], "am": [111, 219], "hous": [111, 219, 341], "drop": 111, "hot": 111, "ordin": 111, "nativ": [111, 285, 288, 290, 295], "limit": [111, 138, 333, 364, 368, 382], "split": [111, 290, 329, 378], "earli": [112, 117, 190], "stop": [112, 117, 190, 382, 968], "calcul": [112, 124], "interv": 114, "confid": 114, "tune": [114, 237, 240, 290, 943, 988], "hyper": [114, 237, 290, 373, 943], "preprocess": [115, 122, 151, 154, 155, 219, 221, 278, 294, 322, 329, 358, 373, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 964, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "devianc": [115, 954], "miss": [117, 148, 149, 150, 151, 288, 294, 295, 381, 944, 964, 970], "valu": [117, 136, 148, 149, 150, 151, 207, 216, 288, 294, 295, 328, 346, 379, 381, 944, 954, 962, 964, 970], "loss": [117, 182, 192, 289, 292, 294, 381, 954, 1012], "monoton": [117, 119, 295, 381], "constraint": [117, 119, 293, 295, 374, 381], "isolationforest": [118, 528], "discret": [118, 146, 280, 281, 964], "boundari": [118, 123, 262, 302, 312], "path": [118, 169, 175, 187, 328, 364], "length": [118, 364], "name": [119, 291, 358, 375], "specifi": [119, 358, 943], "hash": [120, 355, 382], "total": [120, 324, 381], "output": [121, 218, 279, 293, 295, 327, 970, 986], "meta": [121, 256, 290, 373, 381], "combin": [122, 210], "predictor": 122, "stack": [122, 288, 381], "make": [122, 125, 150, 346, 350, 361], "measur": [122, 242, 374, 954], "votingclassifi": [123, 124, 534], "individu": [125, 155, 290, 961], "vote": [125, 381], "tutori": [126, 151, 972, 980, 982, 988], "exercis": [126, 127, 128, 129, 151, 983, 986, 988], "diabet": [127, 220, 343, 986], "appli": 127, "line": [127, 141], "show": [127, 248], "std": [127, 161], "bonu": 127, "how": [127, 329, 346, 352, 358], "much": 127, "can": [127, 358], "you": [127, 358], "trust": 127, "alpha": [127, 324], "f": [131, 954], "mutual": [131, 374], "inform": [131, 150, 170, 171, 350, 373, 374, 943, 950], "anova": [133, 311], "recurs": [134, 135, 383], "elimin": [134, 135, 383, 943], "sequenti": [136, 383], "coeffici": [136, 154, 161, 186, 187, 374, 954], "toler": 136, "process": [137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 151, 154, 329, 361, 373, 384, 953, 982], "machin": [137, 151, 153, 154, 155, 277, 303, 354, 373, 959, 969, 979, 986], "ridg": [138, 162, 164, 180, 186, 187, 215, 286, 373, 637, 947, 950], "gpc": [139, 140, 141, 142, 384], "iso": [141, 246], "xor": [142, 384], "co2": 143, "level": [143, 144, 334, 374, 381], "mona": 143, "loa": 143, "gpr": [143, 144, 384], "build": [143, 150, 344, 346, 354, 375, 988, 1013], "design": 143, "extrapol": 143, "interpret": [143, 154, 186, 219, 258, 379, 381], "abil": 144, "nois": [144, 145, 162], "optimis": 144, "basic": [145, 200, 359, 376, 384], "introductori": 145, "free": 145, "sequenc": [146, 358], "similar": [146, 952, 954], "under": [146, 358, 990, 1011], "posterior": 147, "cookbook": 147, "radial": [147, 384, 946, 986], "ration": [147, 384], "quadradt": 147, "exp": [147, 384], "sine": [147, 231, 384], "dot": [147, 384], "product": [147, 200, 354, 358, 384, 586], "mat\u00e9rn": [147, 384], "imput": [148, 149, 150, 151, 288, 373, 592, 593, 594, 595, 944, 964, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "variant": 149, "iterativeimput": [149, 592, 944], "befor": [150, 350], "replac": 150, "0": [150, 288, 289, 290, 291, 970, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "knn": [150, 288], "iter": [150, 251, 378, 943], "releas": [151, 287, 288, 289, 290, 291, 292, 293, 294, 295, 350, 364, 993], "highlight": [151, 287, 288, 289, 290, 291, 292, 293, 294, 295, 995, 998, 999, 1002, 1003], "mixtur": [151, 224, 225, 226, 229, 230, 231, 373, 761, 762, 953, 1003, 1004, 1008, 1009, 1011, 1012], "inspect": [151, 152, 363, 373, 596, 597, 598, 599, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "approxim": [151, 158, 159, 214, 259, 290, 373, 376, 946], "manifold": [151, 201, 202, 203, 204, 342, 373, 653, 654, 655, 656, 657, 658, 659, 660, 661, 951, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1013], "miscellan": [151, 208, 373, 1003, 1004, 1005, 1006, 1007, 1008, 1011], "multiclass": [151, 197, 248, 255, 256, 288, 355, 372, 373, 794, 795, 796, 916, 917, 918, 954, 955, 979, 986, 1004, 1007, 1008, 1009], "multioutput": [151, 257, 373, 797, 798, 799, 800, 955, 1003, 1004, 1005, 1006, 1007, 1010, 1011, 1012, 1013], "neural": [151, 155, 273, 373, 958, 959], "network": [151, 155, 273, 373, 958, 959], "semi": [151, 296, 297, 301, 302, 373, 967], "supervis": [151, 296, 297, 301, 302, 373, 958, 967, 976, 986], "work": [151, 319, 333, 345, 358, 373, 988], "failur": [153, 943], "infer": 153, "causal": [153, 154], "simul": 153, "hourli": 153, "wage": [153, 154], "descript": 153, "incom": 153, "fulli": 153, "observ": [153, 986, 987], "lesson": [153, 154], "common": [154, 329, 360, 370, 382, 954], "pitfal": [154, 329], "matter": 154, "check": [154, 241, 288, 354, 370, 1003, 1004, 1005], "problem": [154, 379, 969, 970, 979, 984, 986, 987], "correl": [154, 157, 377, 954, 962], "numer": [154, 334, 348], "wrong": [154, 358], "depend": [155, 216, 220, 344, 961, 995, 1008, 1009], "condit": [155, 290, 961], "expect": [155, 290, 961], "preprocessor": 155, "1": [155, 179, 291, 292, 293, 294, 295, 358, 988, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "wai": [155, 344, 346, 358], "layer": [155, 274, 958], "perceptron": [155, 274, 633, 950, 958], "ic": [155, 961], "pdp": 155, "3d": 155, "accuraci": [156, 214, 320, 324, 954], "": [156, 284, 286, 349, 358, 381, 954], "multicollinear": 157, "breast": [157, 343], "cancer": [157, 343], "handl": [157, 373, 944], "scalabl": [159, 241, 289], "partit": 159, "baselin": [159, 182], "bayesian": [161, 162, 225, 239, 373, 950, 953], "recov": 161, "true": [161, 162], "margin": [161, 162, 194, 309, 313], "log": [161, 162, 954], "expans": 161, "sinusoid": 162, "cubic": 162, "l": 162, "elast": [163, 167, 950], "net": [163, 167, 950], "gram": 163, "huberregressor": [164, 614], "strong": 164, "signal": [166, 379, 987], "automat": [166, 359, 950], "ard": [166, 950], "elasticnet": [166, 289, 611], "dens": 168, "lar": [169, 615, 950], "criteria": [170, 358, 950, 970], "aic": [171, 950], "bic": [171, 230, 950], "criterion": [171, 290, 943, 968], "coordin": 171, "descent": [171, 190, 196, 950, 968], "angl": [171, 950], "penalti": [173, 193, 316], "sparsiti": [173, 179, 382, 986], "multinomi": [174, 198, 950, 956], "One": [174, 196, 248, 291, 307, 378, 960, 968], "rest": [174, 248], "joint": 176, "task": [176, 373, 950, 973], "onli": [179, 199, 1006, 1008], "2": [179, 293, 988, 998, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "ordinari": [180, 950], "orthogon": [181, 950], "match": [181, 950], "pursuit": [181, 950], "poisson": [182, 200, 289, 290, 954], "french": 182, "motor": 182, "third": [182, 216, 364], "parti": [182, 216, 364], "liabil": 182, "claim": [182, 200], "constant": [182, 944], "rank": [182, 373, 954], "takeawai": 182, "interpol": 183, "quantileregressor": [184, 635], "linearregress": [184, 622], "ransac": [185, 950], "l2": [186, 316], "purpos": [186, 322, 974], "thi": [186, 974], "solver": [189, 379, 950], "stochast": [190, 196, 202, 275, 950, 951, 959, 968], "sgd": [191, 192, 193, 194, 195, 950, 968], "convex": 192, "maximum": [194, 309, 959], "hyperplan": [194, 309, 310], "20newgroup": 197, "mnist": [198, 276], "theil": [199, 950], "sen": [199, 950], "y": [199, 358, 965, 967], "direct": 199, "x": 199, "tweedi": [200, 954], "insur": 200, "definit": [200, 277, 961, 1005], "frequenc": [200, 988], "sever": [200, 204], "gamma": [200, 294, 954], "pure": 200, "premium": 200, "tweedieregressor": [200, 645], "local": [202, 203, 265, 266, 951, 960], "isomap": [202, 203, 653, 951], "multidimension": 202, "t": [202, 207, 951], "techniqu": 203, "sphere": 204, "swiss": 206, "roll": [206, 348], "And": [206, 361], "hole": 206, "sne": [207, 951], "perplex": 207, "shape": [207, 979], "anomali": 209, "object": [210, 234, 348, 358, 373, 943, 954, 985, 992], "confusionmatrixdisplai": [210, 662], "roccurvedisplai": [210, 667], "precisionrecalldisplai": [210, 665], "compact": 211, "rich": [211, 289], "html": [211, 348], "isoton": [212, 372, 373, 600, 601, 602, 945, 1003, 1004, 1005, 1007, 1009, 1010], "johnson": [213, 966], "lindenstrauss": [213, 966], "bound": 213, "theoret": 213, "explicit": 214, "map": [214, 283, 964], "rbf": [214, 307, 308, 312, 384, 587, 952, 969, 986], "python": [214, 334, 352, 368, 972, 973], "packag": [214, 973, 1007], "svr": [215, 315, 872, 969], "construct": 215, "metadata": [216, 294, 295, 320, 360, 365, 373, 1012, 1013], "rout": [216, 294, 295, 360, 365, 373, 1012, 1013], "router": 216, "consum": 216, "deprec": [216, 346, 373, 893, 1005], "default": [216, 266, 346], "chang": [216, 346, 361, 978, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "complet": [218, 374], "kddcup99": 219, "sa": 219, "covertyp": [219, 341], "cardiotocographi": 219, "ablat": 219, "studi": 219, "advanc": [220, 344], "With": [220, 988], "togeth": [220, 248, 984, 987], "grid": [221, 237, 239, 247, 250, 943, 983, 988], "search": [221, 237, 239, 247, 250, 256, 359, 943, 983, 988], "over": 221, "roc": [222, 236, 248, 249, 288, 954], "svc": [222, 312, 316, 871, 969], "introduc": 223, "set_output": [223, 293, 295, 348], "concentr": 225, "variat": [225, 953], "gmm": [227, 228], "densiti": [229, 263, 264, 272, 294, 380, 900, 969], "best": [230, 347, 358], "confus": [233, 374, 954], "behavior": 234, "indic": 234, "mani": [234, 293, 334, 358, 1012], "cv": [234, 329], "tradeoff": [236, 954], "det": [236, 954], "refit": [237, 979], "balanc": [238, 954], "statist": [239, 973, 982, 985], "frequentist": 239, "practic": [239, 329, 347, 351, 951, 958, 968, 969, 970], "equival": 239, "all": [239, 248, 292, 364, 984, 1010, 1011, 1012], "take": 239, "home": 239, "messag": 239, "ratio": [242, 954], "pre": [242, 329, 359], "post": [242, 324], "respect": 242, "preval": 242, "cross_val_scor": [243, 788], "nest": [244, 375, 983], "see": [244, 375], "also": [244, 350, 375], "signific": 245, "precis": [246, 954], "recal": [246, 954], "In": 246, "binari": [246, 258, 950, 954], "averag": [246, 248, 374, 381, 954], "micro": [246, 248], "each": [246, 251, 320, 943], "f1": 246, "receiv": [248, 249, 954], "oper": [248, 249, 345, 355, 373, 384, 954], "characterist": [248, 249, 954], "specif": [248, 344, 348, 368, 943, 973, 974], "ovr": 248, "macro": 248, "ovo": 248, "success": [250, 251, 290, 943], "halv": [250, 251, 290, 943], "candid": [251, 943], "amount": [251, 943], "resourc": [251, 334, 346, 943, 972, 977], "underfit": 253, "overfit": 253, "overview": [256, 353, 374, 960], "yeast": 256, "uci": 256, "logisticregress": [258, 623], "wrap": 258, "onevsrestclassifi": [258, 795, 955], "tsne": [259, 657], "1d": 264, "novelti": [265, 960, 969], "lof": [265, 266], "neighborhood": [267, 268, 269, 957], "centroid": [270, 957], "mlpclassifi": [275, 823], "mlp": 276, "restrict": [277, 959], "boltzmann": [277, 959], "scaler": 279, "standardscal": [279, 846], "minmaxscal": [279, 836], "maxabsscal": [279, 835], "robustscal": [279, 844], "powertransform": [279, 842], "quantiletransform": [279, 843], "uniform": [279, 964], "kbinsdiscret": [280, 282, 831], "continu": [280, 346], "rescal": 284, "other": [285, 340, 358, 381, 973, 995], "intern": 286, "22": [288, 1005], "new": [288, 290, 291, 293, 294, 346, 358, 972, 995, 996, 998, 999, 1000, 1001, 1002], "prune": [288, 324, 970], "datafram": [288, 295, 358, 1012], "compat": [288, 346, 348, 370, 373], "auc": [288, 671], "now": [288, 291, 1005], "23": [289, 1006], "stabil": 289, "improv": [289, 290, 291, 292, 293, 295, 345, 346, 998, 999], "24": [290, 1007], "histgradientboost": [290, 295], "self": [290, 300, 967], "sequentialfeatureselector": [290, 567], "polynomialcountsketch": [290, 605], "decisiontreeregressor": [290, 875], "keyword": [291, 1006, 1008], "argument": [291, 348, 1006, 1008], "more": [291, 344, 358, 368, 958], "flexibl": [291, 944], "stabl": 291, "histgradientboostingregressor": [292, 527], "get_feature_names_out": 292, "avail": [292, 943, 991, 992], "group": [292, 294, 378, 978, 987], "infrequ": [292, 294, 964], "onehotencod": [292, 839], "minibatchnmf": [292, 503], "version": [292, 340, 344, 350, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "bisectingkmean": [292, 408], "divid": 292, "enhanc": [293, 361, 973, 998, 999, 1000, 1001, 1002], "faster": [293, 381], "parser": [293, 340], "fetch_openml": [293, 461], "experiment": [293, 350, 370, 373, 544, 545, 1011], "arrai": [293, 328, 355, 370, 373, 979, 1012], "lineardiscriminantanalysi": [293, 514], "effici": [293, 295, 355], "targetencod": [294, 847], "model_select": [294, 373, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "validationcurvedisplai": [294, 785], "ordinalencod": [294, 840], "4": [295, 995, 1003, 1012], "dtype": 295, "polar": 295, "add": [295, 358], "enrich": 295, "runtim": [295, 344], "most": 297, "uncertain": 297, "activ": 298, "threshold": 300, "linearsvc": [306, 866], "unbalanc": [310, 969], "some": 311, "plai": 311, "percentil": 311, "sigmoid": [312, 372, 952, 986], "case": [316, 950, 954], "tie": 317, "break": 317, "word": [320, 382, 988], "strip": 320, "quantifi": [321, 954], "qualiti": [321, 954], "tfidfvector": [321, 322, 556], "lsa": 321, "top": [321, 954], "term": [321, 360, 382], "per": 321, "hashingvector": [321, 554], "featurehash": [322, 547], "dictvector": [322, 546], "special": 322, "cost": [324, 970], "leav": [324, 378, 950], "understand": 328, "what": [328, 358], "i": [328, 351, 358, 378, 978], "here": [328, 988], "recommend": [329, 341, 973], "inconsist": 329, "leakag": 329, "avoid": [329, 375], "dure": 329, "control": [329, 381, 958], "none": 329, "randomst": 329, "instanc": [329, 335], "repeat": [329, 375, 378], "call": [329, 345], "splitter": [329, 373], "subtleti": 329, "get": [329, 358, 359], "reproduc": [329, 351], "across": 329, "execut": [329, 358], "configur": [333, 334], "overhead": 333, "input": [333, 348, 370, 373, 374, 964], "tip": [333, 347, 354, 943, 951, 958, 968, 969, 970], "trick": [333, 352, 354, 382], "algebra": [333, 355], "librari": [333, 334], "reshap": [333, 985], "link": [333, 340, 954], "manag": [334, 364], "higher": 334, "joblib": [334, 352], "lower": 334, "openmp": [334, 347], "numpi": [334, 351], "scipi": [334, 1012], "oversubscript": 334, "spawn": 334, "too": 334, "thread": 334, "switch": 334, "environ": 334, "sklearn_assume_finit": 334, "sklearn_working_memori": 334, "sklearn_se": 334, "sklearn_tests_global_random_se": 334, "sklearn_skip_network_test": 334, "sklearn_run_float32_test": 334, "sklearn_enable_debug_cython_direct": 334, "sklearn_build_enable_debug_symbol": 334, "sklearn_pairwise_dist_chunk_s": 334, "sklearn_warnings_as_error": 334, "computation": 335, "bigger": 335, "stream": 335, "note": [335, 370, 378], "util": [339, 351, 355, 373, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 988, 992, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012], "svmlight": 340, "format": [340, 351, 358, 368, 955], "org": [340, 350, 978], "repositori": 340, "arff": 340, "extern": [340, 972, 979, 995, 1004], "olivetti": 341, "consider": 341, "wild": 341, "rcv1": 341, "kddcup": 341, "99": 341, "california": 341, "plant": 343, "linnerrud": 343, "wine": 343, "wisconsin": 343, "diagnost": 343, "instal": [344, 364], "nightli": 344, "tag": [344, 346, 348], "edit": 344, "meson": [344, 1013], "simplest": 344, "platform": [344, 354, 364], "instruct": 344, "window": [344, 364], "maco": 344, "compil": [344, 352], "conda": 344, "forg": 344, "homebrew": 344, "linux": [344, 358, 364], "system": 344, "freebsd": 344, "altern": [344, 943], "bug": [345, 346, 350, 977, 998, 999, 1000, 1001, 1002, 1003, 1004], "triag": 345, "issu": [345, 346], "curat": 345, "fruit": 345, "discuss": 345, "pr": [345, 350], "help": [345, 346, 358], "review": [345, 346, 354, 988], "member": 345, "close": 345, "tough": 345, "typic": 345, "workflow": [345, 346], "contribut": [346, 358], "submit": 346, "report": [346, 351, 954], "request": [346, 350, 354, 358], "good": [346, 351], "video": [346, 972], "git": 346, "pull": [346, 350, 354, 358], "checklist": [346, 350], "integr": 346, "ci": 346, "stall": 346, "unclaim": 346, "easi": 346, "want": 346, "github": 346, "action": 346, "coverag": [346, 354, 954], "write": 346, "matplotlib": 346, "monitor": 346, "tracker": [346, 977], "maintain": [346, 350, 361, 368], "backward": 346, "guidelin": [346, 348], "read": 346, "exist": 346, "cython": [347, 352, 354], "convent": [347, 979], "knowledg": 347, "eas": 347, "instanti": 348, "attribut": [348, 360, 943], "option": 348, "univers": 348, "your": [348, 351, 954], "own": [348, 358, 954], "templat": 348, "baseestim": [348, 388], "mixin": 348, "get_param": 348, "set_param": 348, "init": 348, "clone": [348, 399], "check_is_fit": [348, 938], "assert": 348, "guid": [349, 990], "major": [350, 381, 1003, 1004], "minor": 350, "known": [350, 1003, 1004], "merg": 350, "web": 350, "site": 350, "craft": 351, "minim": [351, 970, 1008, 1009], "provid": 351, "fail": 351, "comment": 351, "boil": 351, "down": 351, "script": 351, "someth": 351, "small": 351, "do": [351, 358], "NOT": 351, "unless": 351, "extrem": [351, 381], "necessari": 351, "markdown": 351, "make_regress": [351, 489], "make_classif": [351, 480], "make_blob": [351, 477], "optim": [352, 373, 943], "c": 352, "profil": 352, "usag": [352, 358, 365, 370, 372, 375, 381, 382, 950], "extens": [352, 364], "yep": 352, "gperftool": 352, "debugg": 352, "gdb": 352, "gprof": 352, "valgrind": [352, 354], "callgrind": 352, "kcachegrind": 352, "warm": 352, "restart": 352, "ax": 353, "saniti": 354, "preserv": 354, "fold": [354, 378], "unfold": 354, "outdat": 354, "diff": 354, "remot": 354, "track": [354, 375], "branch": 354, "pytest": 354, "alias": 354, "flag": 354, "standard": [354, 964], "repli": 354, "debug": 354, "arm64": 354, "x86_64": 354, "tool": [355, 358, 370, 373], "matric": [355, 373, 964], "warn": [355, 373], "except": [355, 373, 536, 537, 538, 539, 540, 541, 542, 543, 1007, 1011], "dispatch": 356, "frequent": 358, "ask": 358, "question": [358, 977], "tabl": 358, "content": [358, 979], "lot": 358, "peopl": [358, 995, 996, 997, 998], "pronounc": 358, "why": [358, 381], "pypi": 358, "deep": 358, "reinforc": 358, "Will": 358, "futur": 358, "graphic": [358, 959], "did": 358, "remov": [358, 383, 964, 995], "hmm": 358, "gpu": 358, "need": 358, "doe": 358, "directli": 358, "plan": 358, "so": 358, "my": 358, "ani": 358, "attent": 358, "inclus": 358, "includ": 358, "should": 358, "save": 358, "export": 358, "deploi": 358, "bunch": [358, 881], "usabl": 358, "deal": [358, 373], "string": 358, "sometim": 358, "crash": 358, "freez": 358, "n_job": 358, "osx": [358, 364], "job": 358, "than": 358, "random_st": 358, "entir": 358, "start": 359, "processor": 359, "glossari": 360, "element": 360, "concept": [360, 950], "properti": 360, "role": 361, "technic": 361, "committe": 361, "propos": 361, "slep": 361, "latest": 364, "alpin": 364, "arch": 364, "debian": 364, "ubuntu": 364, "fedora": 364, "netbsd": 364, "macport": 364, "mac": 364, "anaconda": 364, "enthought": 364, "deploy": 364, "intel": 364, "winpython": 364, "troubleshoot": 364, "caus": 364, "unweight": 365, "interfac": [365, 373], "statu": 365, "persist": 368, "serial": 368, "secur": 368, "skop": 368, "interoper": [368, 973], "pytorch": 370, "mp": 370, "devic": 370, "mathemat": [371, 373, 381, 946, 948, 957, 961, 968, 969, 970], "formul": [371, 381, 948, 957, 968, 969, 970], "sklearn": [373, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "compos": [373, 429, 430, 431, 432, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "cross_decomposit": [373, 447, 448, 449, 450, 1005, 1007, 1009, 1011], "loader": 373, "discriminant_analysi": [373, 514, 515, 1003, 1004, 1007, 1009, 1010, 1011], "dummi": [373, 516, 517, 954, 1003, 1004, 1005, 1008, 1009, 1013], "feature_extract": [373, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "feature_select": [373, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "gaussian_process": [373, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "kernel_approxim": [373, 603, 604, 605, 606, 607, 1005, 1007, 1008, 1009, 1010, 1011], "kernel_ridg": [373, 608, 1012], "linear_model": [373, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "classic": 373, "glm": 373, "naive_bay": [373, 801, 802, 803, 804, 805, 1003, 1005, 1006, 1007, 1008, 1010, 1011], "neural_network": [373, 822, 823, 824, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "random_project": [373, 858, 859, 860, 1009], "semi_supervis": [373, 861, 862, 863, 1005, 1006, 1007, 1011], "discoveri": [373, 894, 895, 896], "checker": 373, "recent": 373, "low": [374, 381, 383], "mini": [374, 379], "batch": [374, 379], "assign": 374, "featureagglomer": [374, 410], "hierarchi": 374, "ad": 374, "connect": [374, 382, 987], "reachabl": 374, "rand": 374, "index": [374, 909], "advantag": 374, "drawback": 374, "homogen": 374, "fowlk": 374, "mallow": 374, "calinski": 374, "harabasz": 374, "davi": 374, "bouldin": 374, "conting": 374, "pair": 374, "access": 375, "featureunion": [375, 825], "columntransform": [375, 429], "shrunk": 376, "oracl": 376, "plscanon": [377, 448], "plssvd": [377, 450], "plsregress": [377, 449], "cross_valid": [378, 789], "obtain": 378, "d": [378, 957], "loo": 378, "p": [378, 978], "lpo": 378, "shuffl": [378, 928], "stratif": 378, "stratifi": 378, "predefin": [378, 954], "stratifiedgroupkfold": [378, 781], "decompos": 379, "exact": 379, "sparsepca": [379, 508], "kpca": 379, "choic": 379, "truncat": 379, "semant": 379, "nnmf": 379, "frobeniu": 379, "norm": 379, "beta": 379, "diverg": 379, "gradientboostingclassifi": [381, 524], "histgradientboostingclassifi": [381, 526], "gradientboostingregressor": [381, 525], "addit": [381, 946], "size": 381, "rate": 381, "subsampl": 381, "hard": 381, "soft": 381, "dict": 382, "tf": 382, "idf": 382, "decod": 382, "applic": [382, 987], "larg": 382, "corpu": 382, "selectfrommodel": [383, 562], "biclustermixin": 389, "classnameprefixfeaturesoutmixin": 390, "classifiermixin": 391, "clustermixin": 392, "densitymixin": 393, "metaestimatormixin": 394, "onetoonefeaturemixin": 395, "outliermixin": 396, "regressormixin": 397, "transformermixin": 398, "is_classifi": 400, "is_regressor": 401, "calibratedclassifiercv": 402, "calibrationdisplai": 403, "from_estim": [403, 596, 597, 662, 663, 665, 666, 667, 769, 785], "calibration_curv": 404, "affinitypropag": 405, "agglomerativeclust": 406, "spectralclust": 417, "spectralcoclust": 418, "affinity_propag": 419, "cluster_optics_dbscan": 420, "cluster_optics_xi": 421, "compute_optics_graph": 422, "estimate_bandwidth": 423, "k_mean": 424, "kmeans_plusplu": 425, "mean_shift": 426, "spectral_clust": 427, "ward_tre": 428, "transformedtargetregressor": 430, "make_column_selector": 431, "make_column_transform": 432, "config_context": 433, "ellipticenvelop": 434, "empiricalcovari": 435, "graphicallasso": 436, "graphicallassocv": 437, "mincovdet": 439, "shrunkcovari": 441, "empirical_covari": 442, "graphical_lasso": 443, "ledoit_wolf": 444, "ledoit_wolf_shrinkag": 445, "shrunk_covari": 446, "clear_data_hom": 451, "dump_svmlight_fil": 452, "fetch_20newsgroup": 453, "fetch_20newsgroups_vector": 454, "fetch_california_h": 455, "fetch_covtyp": 456, "fetch_kddcup99": 457, "fetch_lfw_pair": 458, "fetch_lfw_peopl": 459, "fetch_olivetti_fac": 460, "fetch_rcv1": 462, "fetch_species_distribut": 463, "get_data_hom": 464, "load_breast_canc": 465, "load_diabet": 466, "load_digit": 467, "load_fil": 468, "load_iri": 469, "load_linnerud": 470, "load_sample_imag": [471, 472], "load_svmlight_fil": [473, 474], "load_win": 475, "make_biclust": 476, "make_checkerboard": 478, "make_circl": 479, "make_friedman1": 481, "make_friedman2": 482, "make_friedman3": 483, "make_gaussian_quantil": 484, "make_hastie_10_2": 485, "make_low_rank_matrix": 486, "make_moon": 487, "make_multilabel_classif": 488, "make_s_curv": 490, "make_sparse_coded_sign": 491, "make_sparse_spd_matrix": 492, "make_sparse_uncorrel": 493, "make_spd_matrix": 494, "make_swiss_rol": 495, "dictionarylearn": 496, "factoranalysi": 497, "incrementalpca": 499, "latentdirichletalloc": 501, "minibatchdictionarylearn": 502, "sparsecod": 507, "truncatedsvd": 509, "dict_learn": 510, "dict_learning_onlin": 511, "non_negative_factor": 512, "sparse_encod": 513, "quadraticdiscriminantanalysi": 515, "dummyclassifi": 516, "dummyregressor": 517, "adaboostregressor": 519, "baggingclassifi": 520, "baggingregressor": 521, "extratreesclassifi": 522, "extratreesregressor": 523, "randomforestclassifi": 529, "randomforestregressor": 530, "randomtreesembed": 531, "stackingclassifi": 532, "stackingregressor": 533, "votingregressor": 535, "convergencewarn": 536, "dataconversionwarn": 537, "datadimensionalitywarn": 538, "efficiencywarn": 539, "fitfailedwarn": 540, "inconsistentversionwarn": 541, "notfittederror": 542, "undefinedmetricwarn": 543, "enable_halving_search_cv": 544, "enable_iterative_imput": 545, "patchextractor": 548, "extract_patches_2d": 549, "grid_to_graph": 550, "img_to_graph": 551, "reconstruct_from_patches_2d": 552, "countvector": 553, "tfidftransform": 555, "genericunivariateselect": 557, "rfe": 558, "rfecv": 559, "selectfdr": 560, "selectfpr": 561, "selectfw": 563, "selectkbest": 564, "selectpercentil": 565, "selectormixin": 566, "variancethreshold": 568, "chi2": 569, "f_classif": 570, "f_regress": 571, "mutual_info_classif": 572, "mutual_info_regress": 573, "r_regress": 574, "gaussianprocessclassifi": 575, "gaussianprocessregressor": 576, "compoundkernel": 577, "constantkernel": 578, "dotproduct": 579, "expsinesquar": 580, "exponenti": 581, "matern": 584, "pairwisekernel": 585, "rationalquadrat": 588, "sum": 589, "whitekernel": 590, "get_config": 591, "knnimput": 593, "missingind": 594, "simpleimput": 595, "decisionboundarydisplai": 596, "partialdependencedisplai": 597, "partial_depend": 598, "permutation_import": 599, "isotonicregress": 600, "check_increas": 601, "isotonic_regress": 602, "additivechi2sampl": 603, "nystroem": [604, 946], "rbfsampler": 606, "skewedchi2sampl": 607, "kernelridg": 608, "ardregress": 609, "bayesianridg": 610, "elasticnetcv": 612, "gammaregressor": 613, "larscv": 616, "lassocv": 618, "lassolar": 619, "lassolarscv": 620, "lassolars": 621, "logisticregressioncv": 624, "multitaskelasticnet": 625, "multitaskelasticnetcv": 626, "multitasklasso": 627, "multitasklassocv": 628, "orthogonalmatchingpursuit": 629, "orthogonalmatchingpursuitcv": 630, "passiveaggressiveclassifi": 631, "passiveaggressiveregressor": 632, "poissonregressor": 634, "ransacregressor": 636, "ridgecv": 638, "ridgeclassifi": 639, "ridgeclassifiercv": 640, "sgdclassifi": 641, "sgdoneclasssvm": 642, "sgdregressor": 643, "theilsenregressor": 644, "enet_path": 646, "lars_path": 647, "lars_path_gram": 648, "lasso_path": 649, "orthogonal_mp": 650, "orthogonal_mp_gram": 651, "ridge_regress": 652, "locallylinearembed": 654, "md": [655, 951], "spectralembed": 656, "locally_linear_embed": 658, "smacof": 659, "spectral_embed": 660, "trustworthi": 661, "from_predict": [662, 665, 666, 667], "detcurvedisplai": 663, "distancemetr": 664, "predictionerrordisplai": 666, "accuracy_scor": 668, "adjusted_mutual_info_scor": 669, "adjusted_rand_scor": 670, "average_precision_scor": 672, "balanced_accuracy_scor": 673, "brier_score_loss": 674, "calinski_harabasz_scor": 675, "check_scor": 676, "class_likelihood_ratio": 677, "classification_report": 678, "contingency_matrix": 679, "pair_confusion_matrix": 680, "cohen_kappa_scor": 681, "completeness_scor": 682, "confusion_matrix": 683, "consensus_scor": 684, "coverage_error": 685, "d2_absolute_error_scor": 686, "d2_pinball_scor": 687, "d2_tweedie_scor": 688, "davies_bouldin_scor": 689, "dcg_score": 690, "det_curv": 691, "explained_variance_scor": 692, "f1_score": 693, "fbeta_scor": 694, "fowlkes_mallows_scor": 695, "get_scor": 696, "get_scorer_nam": 697, "hamming_loss": 698, "hinge_loss": 699, "homogeneity_completeness_v_measur": 700, "homogeneity_scor": 701, "jaccard_scor": 702, "label_ranking_average_precision_scor": 703, "label_ranking_loss": 704, "log_loss": 705, "make_scor": 706, "matthews_corrcoef": 707, "max_error": 708, "mean_absolute_error": 709, "mean_absolute_percentage_error": 710, "mean_gamma_devi": 711, "mean_pinball_loss": 712, "mean_poisson_devi": 713, "mean_squared_error": 714, "mean_squared_log_error": 715, "mean_tweedie_devi": 716, "median_absolute_error": 717, "multilabel_confusion_matrix": 718, "mutual_info_scor": 719, "ndcg_score": 720, "normalized_mutual_info_scor": 721, "additive_chi2_kernel": 722, "chi2_kernel": 723, "cosine_dist": 724, "cosine_similar": 725, "distance_metr": 726, "euclidean_dist": 727, "haversine_dist": 728, "kernel_metr": 729, "laplacian_kernel": 730, "linear_kernel": 731, "manhattan_dist": 732, "nan_euclidean_dist": 733, "paired_cosine_dist": 734, "paired_dist": 735, "paired_euclidean_dist": 736, "paired_manhattan_dist": 737, "pairwise_kernel": 738, "polynomial_kernel": 739, "rbf_kernel": 740, "sigmoid_kernel": 741, "pairwise_dist": 742, "pairwise_distances_argmin": 743, "pairwise_distances_argmin_min": 744, "pairwise_distances_chunk": 745, "precision_recall_curv": 746, "precision_recall_fscore_support": 747, "precision_scor": 748, "r2_score": 749, "rand_scor": 750, "recall_scor": 751, "roc_auc_scor": 752, "roc_curv": 753, "root_mean_squared_error": 754, "root_mean_squared_log_error": 755, "silhouette_sampl": 756, "silhouette_scor": 757, "top_k_accuracy_scor": 758, "v_measure_scor": 759, "zero_one_loss": 760, "bayesiangaussianmixtur": 761, "gaussianmixtur": 762, "groupkfold": 764, "groupshufflesplit": 765, "halvinggridsearchcv": 766, "halvingrandomsearchcv": 767, "kfold": 768, "learningcurvedisplai": 769, "leaveonegroupout": 770, "leaveoneout": 771, "leavepgroupsout": 772, "leavepout": 773, "parametergrid": 774, "parametersampl": 775, "predefinedsplit": 776, "randomizedsearchcv": 777, "repeatedkfold": 778, "repeatedstratifiedkfold": 779, "shufflesplit": 780, "stratifiedkfold": 782, "stratifiedshufflesplit": 783, "timeseriessplit": 784, "check_cv": 786, "cross_val_predict": 787, "learning_curv": 790, "permutation_test_scor": 791, "train_test_split": 792, "validation_curv": 793, "onevsoneclassifi": [794, 955], "outputcodeclassifi": [796, 955], "classifierchain": [797, 955], "multioutputclassifi": [798, 955], "multioutputregressor": [799, 955], "regressorchain": [800, 955], "bernoullinb": 801, "categoricalnb": 802, "complementnb": 803, "gaussiannb": 804, "multinomialnb": 805, "balltre": [806, 957], "kdtree": [807, 957], "kneighborsclassifi": 808, "kneighborsregressor": 809, "kneighborstransform": 810, "kerneldens": 811, "localoutlierfactor": 812, "nearestcentroid": 813, "nearestneighbor": 814, "neighborhoodcomponentsanalysi": 815, "radiusneighborsclassifi": 816, "radiusneighborsregressor": 817, "radiusneighborstransform": 818, "kneighbors_graph": 819, "radius_neighbors_graph": 820, "sort_graph_by_row_valu": 821, "bernoullirbm": 822, "mlpregressor": 824, "make_pipelin": 827, "make_union": 828, "binar": [829, 849, 964, 965], "functiontransform": 830, "kernelcenter": 832, "labelbinar": [833, 965], "labelencod": 834, "multilabelbinar": [837, 965], "polynomialfeatur": 841, "splinetransform": 845, "add_dummy_featur": 848, "label_binar": 850, "maxabs_scal": 851, "minmax_scal": 852, "power_transform": 854, "quantile_transform": 855, "robust_scal": 856, "gaussianrandomproject": 858, "sparserandomproject": 859, "johnson_lindenstrauss_min_dim": 860, "labelpropag": 861, "labelspread": 862, "selftrainingclassifi": 863, "set_config": 864, "show_vers": 865, "linearsvr": 867, "nusvc": 868, "nusvr": 869, "oneclasssvm": 870, "l1_min_c": 873, "decisiontreeclassifi": 874, "extratreeclassifi": 876, "extratreeregressor": 877, "export_graphviz": 878, "export_text": 879, "plot_tre": 880, "_safe_index": 882, "arrayfunc": 883, "min_po": 883, "as_float_arrai": 884, "assert_all_finit": 885, "check_x_i": 886, "check_arrai": 887, "check_consistent_length": 888, "check_random_st": 889, "check_scalar": 890, "class_weight": [891, 892], "compute_class_weight": 891, "compute_sample_weight": 892, "all_displai": 894, "all_estim": 895, "all_funct": 896, "estimator_check": [897, 898], "check_estim": 897, "parametrize_with_check": 898, "estimator_html_repr": 899, "extmath": [900, 901, 902, 903, 904, 905], "fast_logdet": 901, "randomized_range_find": 902, "randomized_svd": 903, "safe_sparse_dot": 904, "weighted_mod": 905, "gen_batch": 906, "gen_even_slic": 907, "single_source_shortest_path_length": 908, "metadata_rout": [910, 911, 912, 913, 914], "metadatarequest": 910, "metadatarout": 911, "methodmap": 912, "get_routing_for_object": 913, "process_rout": 914, "metaestim": 915, "available_if": 915, "is_multilabel": 916, "type_of_target": 917, "unique_label": 918, "murmurhash3_32": 919, "delai": 921, "parallel_backend": 922, "sample_without_replac": 923, "register_parallel_backend": 924, "resampl": 925, "safe_mask": 926, "safe_sqr": 927, "sparsefunc": [929, 930, 931, 932, 933, 934, 935, 1004], "incr_mean_variance_axi": 929, "inplace_column_scal": 930, "inplace_csr_column_scal": 931, "inplace_row_scal": 932, "inplace_swap_column": 933, "inplace_swap_row": 934, "mean_variance_axi": 935, "sparsefuncs_fast": [936, 937], "inplace_csr_row_normalize_l1": 936, "inplace_csr_row_normalize_l2": 937, "check_memori": 939, "check_symmetr": 940, "column_or_1d": 941, "has_fit_paramet": 942, "exhaust": 943, "min_resourc": 943, "aggress": [943, 950], "cv_results_": 943, "brute": [943, 957], "forc": [943, 957], "keep": 944, "mark": 944, "nan": 944, "chi": [946, 952], "skew": 946, "tensor": 946, "sketch": 946, "detail": [946, 968, 969], "omp": 950, "passiv": 950, "scenario": 950, "trade": 950, "off": 950, "which": 950, "consensu": 950, "median": [950, 954], "huber": 950, "extend": 950, "introduct": [951, 979], "modifi": 951, "hessian": 951, "eigenmap": 951, "tangent": 951, "align": 951, "cosin": 952, "laplacian": 952, "pro": 953, "con": 953, "rule": 954, "cohen": 954, "kappa": 954, "ham": 954, "jaccard": 954, "hing": 954, "matthew": 954, "zero": 954, "brier": 954, "discount": 954, "cumul": 954, "gain": 954, "r\u00b2": 954, "absolut": 954, "logarithm": 954, "percentag": 954, "explain": 954, "pinbal": 954, "d\u00b2": 954, "complement": 956, "bernoulli": [956, 959], "unsupervis": [957, 959, 971, 987, 989], "find": 957, "ball": 957, "shrunken": 957, "warm_start": 958, "parametr": 959, "up": 960, "ellipt": 960, "envelop": 960, "isol": 960, "outlin": 962, "mislead": 962, "strongli": 962, "rang": 964, "bin": 964, "lemma": 966, "unlabel": 967, "entri": 967, "id3": 970, "c4": 970, "5": [970, 995, 1013], "c5": 970, "cart": 970, "talk": 972, "scientif": [972, 982], "framework": 973, "domain": 973, "translat": 973, "roadmap": 974, "statement": 974, "2018": 974, "architectur": 974, "goal": 974, "subpackag": 974, "mail": 977, "user": [977, 990], "social": 977, "media": 977, "gitter": 977, "who": 978, "j": 978, "morgan": 978, "spotifi": 978, "inria": 978, "betawork": 978, "hug": 978, "evernot": 978, "t\u00e9l\u00e9com": 978, "paristech": 978, "book": 978, "com": 978, "aweb": 978, "yhat": 978, "rangespan": 978, "birchbox": 978, "bestofmedia": 978, "phimeca": 978, "howaboutw": 978, "peerindex": 978, "datarobot": 978, "okcupid": 978, "love": 978, "publica": 978, "machinali": 978, "solido": 978, "infonea": 978, "dataiku": 978, "otto": 978, "zopa": 978, "mar": 978, "bnp": 978, "pariba": 978, "cardif": 978, "section": 979, "cast": 979, "updat": [979, 1005], "right": 981, "put": 984, "open": 984, "ship": 985, "would": 985, "high": 986, "solv": [986, 987], "vocabulari": 986, "curs": 986, "iris": 986, "same": 986, "seek": 987, "constrain": 987, "inverse_transform": 987, "setup": 988, "token": 988, "occurr": 988, "languag": 988, "identif": 988, "sentiment": 988, "movi": 988, "cli": 988, "where": 988, "older": 995, "12": 995, "changelog": [995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013], "11": 995, "9": 995, "8": 995, "7": 995, "6": 995, "modul": [995, 1003, 1004, 1010, 1011, 1012], "misc": 995, "earlier": 995, "13": 996, "14": 997, "15": 998, "16": 999, "17": 1000, "18": 1001, "19": 1002, "21": 1004, "post1": 1005, "websit": 1005, "clear": 1005, "public": 1005, "futurewarn": 1005, "enforc": [1006, 1008], "privat": 1012}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 60}, "alltitles": {"About us": [[0, "about-us"]], "History": [[0, "history"]], "Governance": [[0, "governance"]], "Authors": [[0, "authors"], [995, "authors"], [995, "id20"]], "Documentation Team": [[0, "documentation-team"]], "Contributor Experience Team": [[0, "contributor-experience-team"], [361, "contributor-experience-team"]], "Communication Team": [[0, "communication-team"]], "Emeritus Core Developers": [[0, "emeritus-core-developers"]], "Emeritus Communication Team": [[0, "emeritus-communication-team"]], "Emeritus Contributor Experience Team": [[0, "emeritus-contributor-experience-team"]], "Citing scikit-learn": [[0, "citing-scikit-learn"]], "Artwork": [[0, "artwork"]], "Funding": [[0, "funding"]], "Past Sponsors": [[0, "past-sponsors"]], "Sprints": [[0, "sprints"]], "Donating to the project": [[0, "donating-to-the-project"]], "Infrastructure support": [[0, "infrastructure-support"]], "Examples based on real world datasets": [[3, "examples-based-on-real-world-datasets"], [151, "examples-based-on-real-world-datasets"]], "Time-related feature engineering": [[4, "time-related-feature-engineering"]], "Data exploration on the Bike Sharing Demand dataset": [[4, "data-exploration-on-the-bike-sharing-demand-dataset"]], "Time-based cross-validation": [[4, "time-based-cross-validation"]], "Gradient Boosting": [[4, "gradient-boosting"]], "Naive linear regression": [[4, "naive-linear-regression"]], "Time-steps as categories": [[4, "time-steps-as-categories"]], "Trigonometric features": [[4, "trigonometric-features"]], "Periodic spline features": [[4, "periodic-spline-features"]], "Qualitative analysis of the impact of features on linear model predictions": [[4, "qualitative-analysis-of-the-impact-of-features-on-linear-model-predictions"]], "Modeling pairwise interactions with splines and polynomial features": [[4, "modeling-pairwise-interactions-with-splines-and-polynomial-features"]], "Modeling non-linear feature interactions with kernels": [[4, "modeling-non-linear-feature-interactions-with-kernels"]], "Concluding remarks": [[4, "concluding-remarks"], [206, "concluding-remarks"]], "Image denoising using kernel PCA": [[5, "image-denoising-using-kernel-pca"]], "References": [[5, null], [11, "references"], [24, "references"], [26, "references"], [76, "references"], [104, "references"], [159, "references"], [166, "references"], [170, null], [239, null], [256, "references"], [272, "references"], [341, null], [341, null], [341, null], [341, null], [381, null], [381, null], [381, null], [381, null], [381, null], [381, null], [381, null], [381, null], [382, null], [384, "references"], [944, "references"], [944, null], [961, null], [964, null], [964, null], [967, null], [967, null]], "Load the dataset via OpenML": [[5, "load-the-dataset-via-openml"]], "Learn the PCA basis": [[5, "learn-the-pca-basis"]], "Reconstruct and denoise test images": [[5, "reconstruct-and-denoise-test-images"]], "Faces recognition example using eigenfaces and SVMs": [[6, "faces-recognition-example-using-eigenfaces-and-svms"]], "Model Complexity Influence": [[7, "model-complexity-influence"]], "Load the data": [[7, "load-the-data"], [47, "load-the-data"], [115, "load-the-data"], [262, "load-the-data"]], "Benchmark influence": [[7, "benchmark-influence"]], "Choose parameters": [[7, "choose-parameters"]], "Run the code and plot the results": [[7, "run-the-code-and-plot-the-results"]], "Conclusion": [[7, "conclusion"], [13, "conclusion"], [171, "conclusion"], [256, "conclusion"], [262, "conclusion"], [286, "conclusion"], [312, "conclusion"]], "Out-of-core classification of text documents": [[8, "out-of-core-classification-of-text-documents"]], "Reuters Dataset related routines": [[8, "reuters-dataset-related-routines"]], "Main": [[8, "main"]], "Plot results": [[8, "plot-results"], [46, "plot-results"], [73, "plot-results"], [88, "plot-results"], [89, "plot-results"], [107, "plot-results"], [258, "plot-results"], [266, "plot-results"]], "Outlier detection on a real data set": [[9, "outlier-detection-on-a-real-data-set"]], "First example": [[9, "first-example"]], "Second example": [[9, "second-example"]], "Prediction Latency": [[10, "prediction-latency"], [333, "prediction-latency"]], "Benchmark and plot helper functions": [[10, "benchmark-and-plot-helper-functions"]], "Benchmark bulk/atomic prediction speed for various regressors": [[10, "benchmark-bulk-atomic-prediction-speed-for-various-regressors"]], "Benchmark n_features influence on prediction speed": [[10, "benchmark-n-features-influence-on-prediction-speed"]], "Benchmark throughput": [[10, "benchmark-throughput"]], "Species distribution modeling": [[11, "species-distribution-modeling"]], "Visualizing the stock market structure": [[12, "visualizing-the-stock-market-structure"]], "Retrieve the data from Internet": [[12, "retrieve-the-data-from-internet"]], "Learning a graph structure": [[12, "learning-a-graph-structure"]], "Clustering using affinity propagation": [[12, "clustering-using-affinity-propagation"]], "Embedding in 2D space": [[12, "embedding-in-2d-space"]], "Visualization": [[12, "visualization"], [308, "visualization"], [373, "visualization"]], "Lagged features for time series forecasting": [[13, "lagged-features-for-time-series-forecasting"]], "Analyzing the Bike Sharing Demand dataset": [[13, "analyzing-the-bike-sharing-demand-dataset"]], "Generating pandas-engineered lagged features": [[13, "generating-pandas-engineered-lagged-features"]], "Naive evaluation of the next hour bike demand regression": [[13, "naive-evaluation-of-the-next-hour-bike-demand-regression"]], "Proper next hour forecasting evaluation": [[13, "proper-next-hour-forecasting-evaluation"]], "Modeling predictive uncertainty via quantile regression": [[13, "modeling-predictive-uncertainty-via-quantile-regression"]], "A qualitative look at the predictions": [[13, "a-qualitative-look-at-the-predictions"]], "Compressive sensing: tomography reconstruction with L1 prior (Lasso)": [[14, "compressive-sensing-tomography-reconstruction-with-l1-prior-lasso"]], "Topic extraction with Non-negative Matrix Factorization and Latent Dirichlet Allocation": [[15, "topic-extraction-with-non-negative-matrix-factorization-and-latent-dirichlet-allocation"]], "Libsvm GUI": [[16, "libsvm-gui"]], "Wikipedia principal eigenvector": [[17, "wikipedia-principal-eigenvector"]], "Download data, if not already on disk": [[17, "download-data-if-not-already-on-disk"]], "Loading the redirect files": [[17, "loading-the-redirect-files"]], "Computing the Adjacency matrix": [[17, "computing-the-adjacency-matrix"]], "Computing Principal Singular Vector using Randomized SVD": [[17, "computing-principal-singular-vector-using-randomized-svd"]], "Computing Centrality scores": [[17, "computing-centrality-scores"]], "Biclustering": [[18, "biclustering"], [151, "biclustering"], [342, "biclustering"], [371, "biclustering"]], "Biclustering documents with the Spectral Co-clustering algorithm": [[19, "biclustering-documents-with-the-spectral-co-clustering-algorithm"]], "A demo of the Spectral Biclustering algorithm": [[20, "a-demo-of-the-spectral-biclustering-algorithm"]], "Generate sample data": [[20, "generate-sample-data"], [35, "generate-sample-data"], [52, "generate-sample-data"], [60, "generate-sample-data"], [73, "generate-sample-data"], [88, "generate-sample-data"], [89, "generate-sample-data"], [132, "generate-sample-data"], [215, "generate-sample-data"], [252, "generate-sample-data"], [271, "generate-sample-data"], [315, "generate-sample-data"]], "Fitting SpectralBiclustering": [[20, "fitting-spectralbiclustering"]], "Plotting results": [[20, "plotting-results"]], "A demo of the Spectral Co-Clustering algorithm": [[21, "a-demo-of-the-spectral-co-clustering-algorithm"]], "Calibration": [[22, "calibration"], [151, "calibration"]], "Probability calibration of classifiers": [[23, "probability-calibration-of-classifiers"]], "Generate synthetic dataset": [[23, "generate-synthetic-dataset"], [161, "generate-synthetic-dataset"], [161, "id1"], [166, "generate-synthetic-dataset"]], "Gaussian Naive-Bayes": [[23, "gaussian-naive-bayes"]], "Plot data and the predicted probabilities": [[23, "plot-data-and-the-predicted-probabilities"]], "Probability Calibration curves": [[24, "probability-calibration-curves"]], "Dataset": [[24, "dataset"], [26, "dataset"], [171, "dataset"], [245, "dataset"]], "Calibration curves": [[24, "calibration-curves"], [26, "calibration-curves"], [372, "calibration-curves"]], "Gaussian Naive Bayes": [[24, "gaussian-naive-bayes"], [956, "gaussian-naive-bayes"]], "Linear support vector classifier": [[24, "linear-support-vector-classifier"]], "Summary": [[24, "summary"], [112, "summary"], [322, "summary"]], "Probability Calibration for 3-class classification": [[25, "probability-calibration-for-3-class-classification"]], "Data": [[25, "data"]], "Fitting and calibration": [[25, "fitting-and-calibration"]], "Compare probabilities": [[25, "compare-probabilities"]], "Comparison of Calibration of Classifiers": [[26, "comparison-of-calibration-of-classifiers"]], "Analysis of the results": [[26, "analysis-of-the-results"]], "Classification": [[27, "classification"], [30, "classification"], [146, "classification"], [151, "classification"], [950, "classification"], [957, "id4"], [958, "classification"], [968, "classification"], [969, "classification"], [970, "classification"], [986, "classification"]], "Plot classification probability": [[28, "plot-classification-probability"]], "Classifier comparison": [[29, "classifier-comparison"]], "Recognizing hand-written digits": [[30, "recognizing-hand-written-digits"]], "Digits dataset": [[30, "digits-dataset"]], "Normal, Ledoit-Wolf and OAS Linear Discriminant Analysis for classification": [[31, "normal-ledoit-wolf-and-oas-linear-discriminant-analysis-for-classification"]], "Linear and Quadratic Discriminant Analysis with covariance ellipsoid": [[32, "linear-and-quadratic-discriminant-analysis-with-covariance-ellipsoid"]], "Data generation": [[32, "data-generation"], [46, "data-generation"], [54, "data-generation"], [118, "data-generation"], [135, "data-generation"], [144, "data-generation"], [230, "data-generation"], [297, "data-generation"], [316, "data-generation"]], "Plotting Functions": [[32, "plotting-functions"]], "Comparison of LDA and QDA": [[32, "comparison-of-lda-and-qda"]], "Clustering": [[33, "clustering"], [151, "clustering"], [374, "clustering"]], "Adjustment for chance in clustering performance evaluation": [[34, "adjustment-for-chance-in-clustering-performance-evaluation"]], "Defining the list of metrics to evaluate": [[34, "defining-the-list-of-metrics-to-evaluate"]], "First experiment: fixed ground truth labels and growing number of clusters": [[34, "first-experiment-fixed-ground-truth-labels-and-growing-number-of-clusters"]], "Second experiment: varying number of classes and clusters": [[34, "second-experiment-varying-number-of-classes-and-clusters"]], "Demo of affinity propagation clustering algorithm": [[35, "demo-of-affinity-propagation-clustering-algorithm"]], "Compute Affinity Propagation": [[35, "compute-affinity-propagation"]], "Plot result": [[35, "plot-result"], [60, "plot-result"], [64, "plot-result"], [64, "id2"]], "Agglomerative clustering with and without structure": [[36, "agglomerative-clustering-with-and-without-structure"]], "Agglomerative clustering with different metrics": [[37, "agglomerative-clustering-with-different-metrics"]], "Plot Hierarchical Clustering Dendrogram": [[38, "plot-hierarchical-clustering-dendrogram"]], "Compare BIRCH and MiniBatchKMeans": [[39, "compare-birch-and-minibatchkmeans"]], "Bisecting K-Means and Regular K-Means Performance Comparison": [[40, "bisecting-k-means-and-regular-k-means-performance-comparison"]], "Comparing different clustering algorithms on toy datasets": [[41, "comparing-different-clustering-algorithms-on-toy-datasets"]], "K-means Clustering": [[42, "k-means-clustering"]], "Segmenting the picture of greek coins in regions": [[43, "segmenting-the-picture-of-greek-coins-in-regions"]], "A demo of structured Ward hierarchical clustering on an image of coins": [[44, "a-demo-of-structured-ward-hierarchical-clustering-on-an-image-of-coins"]], "Generate data": [[44, "generate-data"], [64, "generate-data"], [75, "generate-data"], [176, "generate-data"], [277, "generate-data"]], "Define structure of the data": [[44, "define-structure-of-the-data"]], "Compute clustering": [[44, "compute-clustering"], [64, "compute-clustering"], [64, "id1"]], "Plot the results on an image": [[44, "plot-the-results-on-an-image"]], "Color Quantization using K-Means": [[45, "color-quantization-using-k-means"]], "Demo of DBSCAN clustering algorithm": [[46, "demo-of-dbscan-clustering-algorithm"]], "Compute DBSCAN": [[46, "compute-dbscan"]], "Online learning of a dictionary of parts of faces": [[47, "online-learning-of-a-dictionary-of-parts-of-faces"]], "Learn the dictionary of images": [[47, "learn-the-dictionary-of-images"]], "Plot the results": [[47, "plot-the-results"], [77, "plot-the-results"], [125, "plot-the-results"], [150, "plot-the-results"]], "Feature agglomeration": [[48, "feature-agglomeration"], [971, "feature-agglomeration"], [987, "feature-agglomeration"]], "Various Agglomerative Clustering on a 2D embedding of digits": [[49, "various-agglomerative-clustering-on-a-2d-embedding-of-digits"]], "Vector Quantization Example": [[50, "vector-quantization-example"]], "Original image": [[50, "original-image"]], "Compression via vector quantization": [[50, "compression-via-vector-quantization"]], "Encoding strategy": [[50, "encoding-strategy"]], "Memory footprint": [[50, "memory-footprint"]], "Feature agglomeration vs. univariate selection": [[51, "feature-agglomeration-vs-univariate-selection"]], "Demo of HDBSCAN clustering algorithm": [[52, "demo-of-hdbscan-clustering-algorithm"]], "Scale Invariance": [[52, "scale-invariance"]], "Multi-Scale Clustering": [[52, "multi-scale-clustering"]], "Hyperparameter Robustness": [[52, "hyperparameter-robustness"]], "min_cluster_size": [[52, "min-cluster-size"]], "min_samples": [[52, "min-samples"]], "dbscan_clustering": [[52, "dbscan-clustering"]], "Inductive Clustering": [[53, "inductive-clustering"]], "Demonstration of k-means assumptions": [[54, "demonstration-of-k-means-assumptions"]], "Fit models and plot results": [[54, "fit-models-and-plot-results"]], "Possible solutions": [[54, "possible-solutions"]], "Final remarks": [[54, "final-remarks"]], "A demo of K-Means clustering on the handwritten digits data": [[55, "a-demo-of-k-means-clustering-on-the-handwritten-digits-data"]], "Load the dataset": [[55, "load-the-dataset"]], "Define our evaluation benchmark": [[55, "define-our-evaluation-benchmark"]], "Run the benchmark": [[55, "run-the-benchmark"]], "Visualize the results on PCA-reduced data": [[55, "visualize-the-results-on-pca-reduced-data"]], "An example of K-Means++ initialization": [[56, "an-example-of-k-means-initialization"]], "Selecting the number of clusters with silhouette analysis on KMeans clustering": [[57, "selecting-the-number-of-clusters-with-silhouette-analysis-on-kmeans-clustering"]], "Empirical evaluation of the impact of k-means initialization": [[58, "empirical-evaluation-of-the-impact-of-k-means-initialization"]], "Comparing different hierarchical linkage methods on toy datasets": [[59, "comparing-different-hierarchical-linkage-methods-on-toy-datasets"]], "A demo of the mean-shift clustering algorithm": [[60, "a-demo-of-the-mean-shift-clustering-algorithm"]], "Compute clustering with MeanShift": [[60, "compute-clustering-with-meanshift"]], "Comparison of the K-Means and MiniBatchKMeans clustering algorithms": [[61, "comparison-of-the-k-means-and-minibatchkmeans-clustering-algorithms"]], "Generate the data": [[61, "generate-the-data"], [63, "generate-the-data"], [77, "generate-the-data"]], "Compute clustering with KMeans": [[61, "compute-clustering-with-kmeans"]], "Compute clustering with MiniBatchKMeans": [[61, "compute-clustering-with-minibatchkmeans"]], "Establishing parity between clusters": [[61, "establishing-parity-between-clusters"]], "Plotting the results": [[61, "plotting-the-results"], [102, "plotting-the-results"]], "Demo of OPTICS clustering algorithm": [[62, "demo-of-optics-clustering-algorithm"]], "Spectral clustering for image segmentation": [[63, "spectral-clustering-for-image-segmentation"]], "Plotting four circles": [[63, "plotting-four-circles"]], "Plotting two circles": [[63, "plotting-two-circles"]], "Hierarchical clustering: structured vs unstructured ward": [[64, "hierarchical-clustering-structured-vs-unstructured-ward"]], "We are defining k-Nearest Neighbors with 10 neighbors": [[64, "we-are-defining-k-nearest-neighbors-with-10-neighbors"]], "Pipelines and composite estimators": [[65, "pipelines-and-composite-estimators"], [151, "pipelines-and-composite-estimators"], [375, "pipelines-and-composite-estimators"]], "Column Transformer with Heterogeneous Data Sources": [[66, "column-transformer-with-heterogeneous-data-sources"]], "20 newsgroups dataset": [[66, "newsgroups-dataset"]], "Creating transformers": [[66, "creating-transformers"]], "Classification pipeline": [[66, "classification-pipeline"]], "Column Transformer with Mixed Types": [[67, "column-transformer-with-mixed-types"]], "Selecting dimensionality reduction with Pipeline and GridSearchCV": [[68, "selecting-dimensionality-reduction-with-pipeline-and-gridsearchcv"]], "Illustration of Pipeline and GridSearchCV": [[68, "illustration-of-pipeline-and-gridsearchcv"]], "Caching transformers within a Pipeline": [[68, "caching-transformers-within-a-pipeline"]], "Pipelining: chaining a PCA and a logistic regression": [[69, "pipelining-chaining-a-pca-and-a-logistic-regression"]], "Concatenating multiple feature extraction methods": [[70, "concatenating-multiple-feature-extraction-methods"]], "Effect of transforming the targets in regression model": [[71, "effect-of-transforming-the-targets-in-regression-model"]], "Synthetic example": [[71, "synthetic-example"]], "Real-world data set": [[71, "real-world-data-set"]], "Covariance estimation": [[72, "covariance-estimation"], [151, "covariance-estimation"], [376, "covariance-estimation"]], "Shrinkage covariance estimation: LedoitWolf vs OAS and max-likelihood": [[73, "shrinkage-covariance-estimation-ledoitwolf-vs-oas-and-max-likelihood"]], "Compute the likelihood on test data": [[73, "compute-the-likelihood-on-test-data"]], "Compare different approaches to setting the regularization parameter": [[73, "compare-different-approaches-to-setting-the-regularization-parameter"]], "Ledoit-Wolf vs OAS estimation": [[74, "ledoit-wolf-vs-oas-estimation"]], "Robust covariance estimation and Mahalanobis distances relevance": [[75, "robust-covariance-estimation-and-mahalanobis-distances-relevance"]], "References:": [[75, null], [101, null], [156, null], [244, null], [245, null], [340, null], [341, null], [371, null], [371, null], [371, null], [372, null], [374, null], [374, null], [374, null], [376, null], [376, null], [376, null], [376, null], [379, null], [379, null], [379, null], [379, null], [379, null], [379, null], [379, null], [379, null], [382, null], [382, null], [943, null], [943, null], [946, null], [947, null], [948, null], [950, null], [950, null], [950, null], [950, null], [950, null], [950, null], [950, null], [950, null], [951, null], [951, null], [951, null], [951, null], [951, null], [951, null], [951, null], [951, null], [952, null], [952, null], [954, null], [954, null], [954, null], [954, null], [954, null], [954, null], [955, null], [955, null], [955, null], [957, null], [959, null], [960, null], [960, null], [960, null], [960, null], [962, null], [966, null], [966, null], [966, null], [968, null], [968, null], [969, null]], "Comparison of results": [[75, "comparison-of-results"]], "Robust vs Empirical covariance estimate": [[76, "robust-vs-empirical-covariance-estimate"]], "Minimum Covariance Determinant Estimator": [[76, "minimum-covariance-determinant-estimator"]], "Evaluation": [[76, "evaluation"], [277, "evaluation"]], "Sparse inverse covariance estimation": [[77, "sparse-inverse-covariance-estimation"]], "Estimate the covariance": [[77, "estimate-the-covariance"]], "Cross decomposition": [[78, "cross-decomposition"], [151, "cross-decomposition"], [377, "cross-decomposition"]], "Compare cross decomposition methods": [[79, "compare-cross-decomposition-methods"]], "Dataset based latent variables model": [[79, "dataset-based-latent-variables-model"]], "Canonical (symmetric) PLS": [[79, "canonical-symmetric-pls"]], "Transform data": [[79, "transform-data"]], "Scatter plot of scores": [[79, "scatter-plot-of-scores"]], "PLS regression, with multivariate response, a.k.a. PLS2": [[79, "pls-regression-with-multivariate-response-a-k-a-pls2"]], "PLS regression, with univariate response, a.k.a. PLS1": [[79, "pls-regression-with-univariate-response-a-k-a-pls1"]], "CCA (PLS mode B with symmetric deflation)": [[79, "cca-pls-mode-b-with-symmetric-deflation"]], "Principal Component Regression vs Partial Least Squares Regression": [[80, "principal-component-regression-vs-partial-least-squares-regression"]], "The data": [[80, "the-data"]], "Projection on one component and predictive power": [[80, "projection-on-one-component-and-predictive-power"]], "Dataset examples": [[81, "dataset-examples"], [151, "dataset-examples"]], "The Digit Dataset": [[82, "the-digit-dataset"]], "The Iris Dataset": [[83, "the-iris-dataset"]], "Loading the iris dataset": [[83, "loading-the-iris-dataset"]], "Scatter Plot of the Iris dataset": [[83, "scatter-plot-of-the-iris-dataset"]], "Plot a PCA representation": [[83, "plot-a-pca-representation"]], "Plot randomly generated classification dataset": [[84, "plot-randomly-generated-classification-dataset"]], "Plot randomly generated multilabel dataset": [[85, "plot-randomly-generated-multilabel-dataset"]], "Decomposition": [[86, "decomposition"], [87, "decomposition"], [151, "decomposition"]], "Faces dataset decompositions": [[87, "faces-dataset-decompositions"]], "Dataset preparation": [[87, "dataset-preparation"], [202, "dataset-preparation"]], "Eigenfaces - PCA using randomized SVD": [[87, "eigenfaces-pca-using-randomized-svd"]], "Non-negative components - NMF": [[87, "non-negative-components-nmf"]], "Independent components - FastICA": [[87, "independent-components-fastica"]], "Sparse components - MiniBatchSparsePCA": [[87, "sparse-components-minibatchsparsepca"]], "Dictionary learning": [[87, "dictionary-learning"]], "Cluster centers - MiniBatchKMeans": [[87, "cluster-centers-minibatchkmeans"]], "Factor Analysis components - FA": [[87, "factor-analysis-components-fa"]], "Decomposition: Dictionary learning": [[87, "decomposition-dictionary-learning"]], "Dictionary learning - positive dictionary": [[87, "dictionary-learning-positive-dictionary"]], "Dictionary learning - positive code": [[87, "dictionary-learning-positive-code"]], "Dictionary learning - positive dictionary & code": [[87, "dictionary-learning-positive-dictionary-code"]], "Blind source separation using FastICA": [[88, "blind-source-separation-using-fastica"]], "Fit ICA and PCA models": [[88, "fit-ica-and-pca-models"]], "FastICA on 2D point clouds": [[89, "fastica-on-2d-point-clouds"]], "Image denoising using dictionary learning": [[90, "image-denoising-using-dictionary-learning"]], "Generate distorted image": [[90, "generate-distorted-image"]], "Display the distorted image": [[90, "display-the-distorted-image"]], "Extract reference patches": [[90, "extract-reference-patches"]], "Learn the dictionary from reference patches": [[90, "learn-the-dictionary-from-reference-patches"]], "Extract noisy patches and reconstruct them using the dictionary": [[90, "extract-noisy-patches-and-reconstruct-them-using-the-dictionary"]], "Incremental PCA": [[91, "incremental-pca"], [379, "incremental-pca"]], "Kernel PCA": [[92, "kernel-pca"]], "Projecting data: PCA vs. KernelPCA": [[92, "projecting-data-pca-vs-kernelpca"]], "Projecting into the original feature space": [[92, "projecting-into-the-original-feature-space"]], "PCA example with Iris Data-set": [[93, "pca-example-with-iris-data-set"]], "Model selection with Probabilistic PCA and Factor Analysis (FA)": [[94, "model-selection-with-probabilistic-pca-and-factor-analysis-fa"]], "Create the data": [[94, "create-the-data"]], "Fit the models": [[94, "fit-the-models"]], "Comparison of LDA and PCA 2D projection of Iris dataset": [[95, "comparison-of-lda-and-pca-2d-projection-of-iris-dataset"]], "Sparse coding with a precomputed dictionary": [[96, "sparse-coding-with-a-precomputed-dictionary"], [379, "sparse-coding-with-a-precomputed-dictionary"]], "Factor Analysis (with rotation) to visualize patterns": [[97, "factor-analysis-with-rotation-to-visualize-patterns"]], "Developing Estimators": [[98, "developing-estimators"], [151, "developing-estimators"]], "__sklearn_is_fitted__ as Developer API": [[99, "sklearn-is-fitted-as-developer-api"]], "An example custom estimator implementing a simple classifier": [[99, "an-example-custom-estimator-implementing-a-simple-classifier"]], "Ensemble methods": [[100, "ensemble-methods"], [151, "ensemble-methods"]], "Multi-class AdaBoosted Decision Trees": [[101, "multi-class-adaboosted-decision-trees"]], "Creating the dataset": [[101, "creating-the-dataset"]], "Training the AdaBoostClassifier": [[101, "training-the-adaboostclassifier"]], "Analysis": [[101, "analysis"]], "Convergence of the AdaBoostClassifier": [[101, "convergence-of-the-adaboostclassifier"]], "Errors and weights of the Weak Learners": [[101, "errors-and-weights-of-the-weak-learners"]], "Decision Tree Regression with AdaBoost": [[102, "decision-tree-regression-with-adaboost"]], "Preparing the data": [[102, "preparing-the-data"], [117, "preparing-the-data"], [159, "preparing-the-data"]], "Training and prediction with DecisionTree and AdaBoost Regressors": [[102, "training-and-prediction-with-decisiontree-and-adaboost-regressors"]], "Two-class AdaBoost": [[103, "two-class-adaboost"]], "Single estimator versus bagging: bias-variance decomposition": [[104, "single-estimator-versus-bagging-bias-variance-decomposition"]], "OOB Errors for Random Forests": [[105, "oob-errors-for-random-forests"]], "Feature transformations with ensembles of trees": [[106, "feature-transformations-with-ensembles-of-trees"]], "Comparing Random Forests and Histogram Gradient Boosting models": [[107, "comparing-random-forests-and-histogram-gradient-boosting-models"]], "Load dataset": [[107, "load-dataset"]], "Compute score and computation times": [[107, "compute-score-and-computation-times"]], "Feature importances with a forest of trees": [[108, "feature-importances-with-a-forest-of-trees"]], "Data generation and model fitting": [[108, "data-generation-and-model-fitting"]], "Feature importance based on mean decrease in impurity": [[108, "feature-importance-based-on-mean-decrease-in-impurity"]], "Feature importance based on feature permutation": [[108, "feature-importance-based-on-feature-permutation"]], "Pixel importances with a parallel forest of trees": [[109, "pixel-importances-with-a-parallel-forest-of-trees"]], "Loading the data and model fitting": [[109, "loading-the-data-and-model-fitting"]], "Feature importance based on mean decrease in impurity (MDI)": [[109, "feature-importance-based-on-mean-decrease-in-impurity-mdi"]], "Plot the decision surfaces of ensembles of trees on the iris dataset": [[110, "plot-the-decision-surfaces-of-ensembles-of-trees-on-the-iris-dataset"]], "Categorical Feature Support in Gradient Boosting": [[111, "categorical-feature-support-in-gradient-boosting"]], "Load Ames Housing dataset": [[111, "load-ames-housing-dataset"]], "Gradient boosting estimator with dropped categorical features": [[111, "gradient-boosting-estimator-with-dropped-categorical-features"]], "Gradient boosting estimator with one-hot encoding": [[111, "gradient-boosting-estimator-with-one-hot-encoding"]], "Gradient boosting estimator with ordinal encoding": [[111, "gradient-boosting-estimator-with-ordinal-encoding"]], "Gradient boosting estimator with native categorical support": [[111, "gradient-boosting-estimator-with-native-categorical-support"]], "Model comparison": [[111, "model-comparison"]], "Limiting the number of splits": [[111, "limiting-the-number-of-splits"]], "Early stopping in Gradient Boosting": [[112, "early-stopping-in-gradient-boosting"]], "Data Preparation": [[112, "data-preparation"]], "Model Training and Comparison": [[112, "model-training-and-comparison"]], "Error Calculation": [[112, "error-calculation"]], "Visualize Comparison": [[112, "visualize-comparison"]], "Gradient Boosting Out-of-Bag estimates": [[113, "gradient-boosting-out-of-bag-estimates"]], "Prediction Intervals for Gradient Boosting Regression": [[114, "prediction-intervals-for-gradient-boosting-regression"]], "Fitting non-linear quantile and least squares regressors": [[114, "fitting-non-linear-quantile-and-least-squares-regressors"]], "Analysis of the error metrics": [[114, "analysis-of-the-error-metrics"]], "Calibration of the confidence interval": [[114, "calibration-of-the-confidence-interval"]], "Tuning the hyper-parameters of the quantile regressors": [[114, "tuning-the-hyper-parameters-of-the-quantile-regressors"]], "Gradient Boosting regression": [[115, "gradient-boosting-regression"]], "Data preprocessing": [[115, "data-preprocessing"]], "Fit regression model": [[115, "fit-regression-model"], [271, "fit-regression-model"], [315, "fit-regression-model"]], "Plot training deviance": [[115, "plot-training-deviance"]], "Plot feature importance": [[115, "plot-feature-importance"]], "Gradient Boosting regularization": [[116, "gradient-boosting-regularization"]], "Features in Histogram Gradient Boosting Trees": [[117, "features-in-histogram-gradient-boosting-trees"]], "Effect of number of trees and early stopping": [[117, "effect-of-number-of-trees-and-early-stopping"]], "Support for missing values": [[117, "support-for-missing-values"]], "Support for quantile loss": [[117, "support-for-quantile-loss"]], "Monotonic constraints": [[117, "monotonic-constraints"]], "IsolationForest example": [[118, "isolationforest-example"]], "Training of the model": [[118, "training-of-the-model"]], "Plot discrete decision boundary": [[118, "plot-discrete-decision-boundary"]], "Plot path length decision boundary": [[118, "plot-path-length-decision-boundary"]], "Monotonic Constraints": [[119, "monotonic-constraints"], [381, "monotonic-constraints"]], "Using feature names to specify monotonic constraints": [[119, "using-feature-names-to-specify-monotonic-constraints"]], "Hashing feature transformation using Totally Random Trees": [[120, "hashing-feature-transformation-using-totally-random-trees"]], "Comparing random forests and the multi-output meta estimator": [[121, "comparing-random-forests-and-the-multi-output-meta-estimator"]], "Combine predictors using stacking": [[122, "combine-predictors-using-stacking"]], "Download the dataset": [[122, "download-the-dataset"]], "Make pipeline to preprocess the data": [[122, "make-pipeline-to-preprocess-the-data"]], "Stack of predictors on a single data set": [[122, "stack-of-predictors-on-a-single-data-set"]], "Measure and plot the results": [[122, "measure-and-plot-the-results"]], "Plot the decision boundaries of a VotingClassifier": [[123, "plot-the-decision-boundaries-of-a-votingclassifier"]], "Plot class probabilities calculated by the VotingClassifier": [[124, "plot-class-probabilities-calculated-by-the-votingclassifier"]], "Plot individual and voting regression predictions": [[125, "plot-individual-and-voting-regression-predictions"]], "Training classifiers": [[125, "training-classifiers"]], "Making predictions": [[125, "making-predictions"]], "Tutorial exercises": [[126, "tutorial-exercises"], [151, "tutorial-exercises"]], "Cross-validation on diabetes Dataset Exercise": [[127, "cross-validation-on-diabetes-dataset-exercise"]], "Load dataset and apply GridSearchCV": [[127, "load-dataset-and-apply-gridsearchcv"]], "Plot error lines showing +/- std. errors of the scores": [[127, "plot-error-lines-showing-std-errors-of-the-scores"]], "Bonus: how much can you trust the selection of alpha?": [[127, "bonus-how-much-can-you-trust-the-selection-of-alpha"]], "Digits Classification Exercise": [[128, "digits-classification-exercise"]], "SVM Exercise": [[129, "svm-exercise"]], "Feature Selection": [[130, "feature-selection"], [151, "feature-selection"]], "Comparison of F-test and mutual information": [[131, "comparison-of-f-test-and-mutual-information"]], "Univariate Feature Selection": [[132, "univariate-feature-selection"]], "Univariate feature selection": [[132, "id1"], [383, "univariate-feature-selection"]], "Compare with SVMs": [[132, "compare-with-svms"]], "Pipeline ANOVA SVM": [[133, "pipeline-anova-svm"]], "Recursive feature elimination": [[134, "recursive-feature-elimination"], [383, "recursive-feature-elimination"]], "Recursive feature elimination with cross-validation": [[135, "recursive-feature-elimination-with-cross-validation"]], "Model training and selection": [[135, "model-training-and-selection"], [230, "model-training-and-selection"]], "Plot number of features VS. cross-validation scores": [[135, "plot-number-of-features-vs-cross-validation-scores"]], "Model-based and sequential feature selection": [[136, "model-based-and-sequential-feature-selection"]], "Loading the data": [[136, "loading-the-data"]], "Feature importance from coefficients": [[136, "feature-importance-from-coefficients"]], "Selecting features based on importance": [[136, "selecting-features-based-on-importance"]], "Selecting features with Sequential Feature Selection": [[136, "selecting-features-with-sequential-feature-selection"]], "Using negative tolerance values": [[136, "using-negative-tolerance-values"]], "Gaussian Process for Machine Learning": [[137, "gaussian-process-for-machine-learning"], [151, "gaussian-process-for-machine-learning"]], "Comparison of kernel ridge and Gaussian process regression": [[138, "comparison-of-kernel-ridge-and-gaussian-process-regression"]], "Generating a dataset": [[138, "generating-a-dataset"]], "Limitations of a simple linear model": [[138, "limitations-of-a-simple-linear-model"]], "Kernel methods: kernel ridge and Gaussian process": [[138, "kernel-methods-kernel-ridge-and-gaussian-process"]], "Kernel ridge": [[138, "kernel-ridge"]], "Gaussian process regression": [[138, "gaussian-process-regression"]], "Final conclusion": [[138, "final-conclusion"]], "Probabilistic predictions with Gaussian process classification (GPC)": [[139, "probabilistic-predictions-with-gaussian-process-classification-gpc"]], "Gaussian process classification (GPC) on iris dataset": [[140, "gaussian-process-classification-gpc-on-iris-dataset"], [384, "gaussian-process-classification-gpc-on-iris-dataset"]], "Iso-probability lines for Gaussian Processes classification (GPC)": [[141, "iso-probability-lines-for-gaussian-processes-classification-gpc"]], "Illustration of Gaussian process classification (GPC) on the XOR dataset": [[142, "illustration-of-gaussian-process-classification-gpc-on-the-xor-dataset"]], "Forecasting of CO2 level on Mona Loa dataset using Gaussian process regression (GPR)": [[143, "forecasting-of-co2-level-on-mona-loa-dataset-using-gaussian-process-regression-gpr"]], "Build the dataset": [[143, "build-the-dataset"]], "Design the proper kernel": [[143, "design-the-proper-kernel"]], "Model fitting and extrapolation": [[143, "model-fitting-and-extrapolation"]], "Interpretation of kernel hyperparameters": [[143, "interpretation-of-kernel-hyperparameters"]], "Ability of Gaussian process regression (GPR) to estimate data noise-level": [[144, "ability-of-gaussian-process-regression-gpr-to-estimate-data-noise-level"]], "Optimisation of kernel hyperparameters in GPR": [[144, "optimisation-of-kernel-hyperparameters-in-gpr"]], "Gaussian Processes regression: basic introductory example": [[145, "gaussian-processes-regression-basic-introductory-example"]], "Dataset generation": [[145, "dataset-generation"], [184, "dataset-generation"]], "Example with noise-free target": [[145, "example-with-noise-free-target"]], "Example with noisy targets": [[145, "example-with-noisy-targets"]], "Gaussian processes on discrete data structures": [[146, "gaussian-processes-on-discrete-data-structures"]], "Sequence similarity matrix under the kernel": [[146, "sequence-similarity-matrix-under-the-kernel"]], "Regression": [[146, "regression"], [950, "regression"], [958, "regression"], [968, "regression"], [969, "regression"], [970, "regression"]], "Illustration of prior and posterior Gaussian process for different kernels": [[147, "illustration-of-prior-and-posterior-gaussian-process-for-different-kernels"]], "Helper function": [[147, "helper-function"]], "Dataset and Gaussian process generation": [[147, "dataset-and-gaussian-process-generation"]], "Kernel cookbook": [[147, "kernel-cookbook"]], "Radial Basis Function kernel": [[147, "radial-basis-function-kernel"]], "Rational Quadradtic kernel": [[147, "rational-quadradtic-kernel"]], "Exp-Sine-Squared kernel": [[147, "exp-sine-squared-kernel"], [384, "exp-sine-squared-kernel"]], "Dot-product kernel": [[147, "dot-product-kernel"]], "Mat\u00e9rn kernel": [[147, "matern-kernel"], [384, "matern-kernel"]], "Missing Value Imputation": [[148, "missing-value-imputation"], [151, "missing-value-imputation"]], "Imputing missing values with variants of IterativeImputer": [[149, "imputing-missing-values-with-variants-of-iterativeimputer"]], "Imputing missing values before building an estimator": [[150, "imputing-missing-values-before-building-an-estimator"]], "Download the data and make missing values sets": [[150, "download-the-data-and-make-missing-values-sets"]], "Impute the missing data and score": [[150, "impute-the-missing-data-and-score"]], "Missing information": [[150, "missing-information"]], "Estimate the score": [[150, "estimate-the-score"]], "Replace missing values by 0": [[150, "replace-missing-values-by-0"]], "kNN-imputation of the missing values": [[150, "knn-imputation-of-the-missing-values"]], "Impute missing values with mean": [[150, "impute-missing-values-with-mean"]], "Iterative imputation of the missing values": [[150, "iterative-imputation-of-the-missing-values"]], "Examples": [[151, "examples"], [335, "examples"], [341, null], [378, null], [378, null], [383, null], [383, null], [384, null], [950, null], [950, null], [950, null], [967, null], [967, null], [971, null], [971, null], [971, null], [995, "examples"]], "Release Highlights": [[151, "release-highlights"], [287, "release-highlights"]], "Decision Trees": [[151, "decision-trees"], [323, "decision-trees"], [970, "decision-trees"]], "Gaussian Mixture Models": [[151, "gaussian-mixture-models"], [224, "gaussian-mixture-models"]], "Generalized Linear Models": [[151, "generalized-linear-models"], [160, "generalized-linear-models"], [950, "generalized-linear-models"]], "Inspection": [[151, "inspection"], [152, "inspection"], [363, "inspection"]], "Kernel Approximation": [[151, "kernel-approximation"], [158, "kernel-approximation"], [946, "kernel-approximation"]], "Manifold learning": [[151, "manifold-learning"], [201, "manifold-learning"], [951, "manifold-learning"]], "Miscellaneous": [[151, "miscellaneous"], [208, "miscellaneous"], [373, "miscellaneous"], [1003, "miscellaneous"], [1003, "id40"], [1004, "miscellaneous"], [1005, "miscellaneous"], [1006, "miscellaneous"], [1006, "id13"], [1007, "miscellaneous"], [1008, "miscellaneous"], [1011, "miscellaneous"]], "Model Selection": [[151, "model-selection"], [232, "model-selection"]], "Multiclass methods": [[151, "multiclass-methods"], [255, "multiclass-methods"]], "Multioutput methods": [[151, "multioutput-methods"], [257, "multioutput-methods"]], "Nearest Neighbors": [[151, "nearest-neighbors"], [260, "nearest-neighbors"], [957, "nearest-neighbors"]], "Neural Networks": [[151, "neural-networks"], [273, "neural-networks"]], "Preprocessing": [[151, "preprocessing"], [278, "preprocessing"]], "Semi Supervised Classification": [[151, "semi-supervised-classification"], [296, "semi-supervised-classification"]], "Support Vector Machines": [[151, "support-vector-machines"], [303, "support-vector-machines"], [969, "support-vector-machines"]], "Working with text documents": [[151, "working-with-text-documents"], [319, "working-with-text-documents"]], "Failure of Machine Learning to infer causal effects": [[153, "failure-of-machine-learning-to-infer-causal-effects"]], "The dataset: simulated hourly wages": [[153, "the-dataset-simulated-hourly-wages"]], "Description of the simulated data": [[153, "description-of-the-simulated-data"]], "Income prediction with fully observed variables": [[153, "income-prediction-with-fully-observed-variables"]], "Income prediction with partial observations": [[153, "income-prediction-with-partial-observations"]], "Lessons learned": [[153, "lessons-learned"], [154, "lessons-learned"]], "Common pitfalls in the interpretation of coefficients of linear models": [[154, "common-pitfalls-in-the-interpretation-of-coefficients-of-linear-models"]], "The dataset: wages": [[154, "the-dataset-wages"]], "The machine-learning pipeline": [[154, "the-machine-learning-pipeline"]], "Processing the dataset": [[154, "processing-the-dataset"]], "Interpreting coefficients: scale matters": [[154, "interpreting-coefficients-scale-matters"]], "Checking the variability of the coefficients": [[154, "checking-the-variability-of-the-coefficients"]], "The problem of correlated variables": [[154, "the-problem-of-correlated-variables"]], "Preprocessing numerical variables": [[154, "preprocessing-numerical-variables"]], "Linear models with regularization": [[154, "linear-models-with-regularization"]], "Linear models with sparse coefficients": [[154, "linear-models-with-sparse-coefficients"]], "Wrong causal interpretation": [[154, "wrong-causal-interpretation"]], "Partial Dependence and Individual Conditional Expectation Plots": [[155, "partial-dependence-and-individual-conditional-expectation-plots"]], "Bike sharing dataset preprocessing": [[155, "bike-sharing-dataset-preprocessing"]], "Preprocessor for machine-learning models": [[155, "preprocessor-for-machine-learning-models"]], "Preprocessor for the neural network model": [[155, "preprocessor-for-the-neural-network-model"]], "Preprocessor for the gradient boosting model": [[155, "preprocessor-for-the-gradient-boosting-model"]], "1-way partial dependence with different models": [[155, "way-partial-dependence-with-different-models"]], "Multi-layer perceptron": [[155, "multi-layer-perceptron"]], "Gradient boosting": [[155, "gradient-boosting"]], "Analysis of the plots": [[155, "analysis-of-the-plots"]], "ICE vs. PDP": [[155, "ice-vs-pdp"]], "2D interaction plots": [[155, "d-interaction-plots"]], "3D representation": [[155, "d-representation"]], "Permutation Importance vs Random Forest Feature Importance (MDI)": [[156, "permutation-importance-vs-random-forest-feature-importance-mdi"]], "Data Loading and Feature Engineering": [[156, "data-loading-and-feature-engineering"]], "Accuracy of the Model": [[156, "accuracy-of-the-model"]], "Tree\u2019s Feature Importance from Mean Decrease in Impurity (MDI)": [[156, "tree-s-feature-importance-from-mean-decrease-in-impurity-mdi"]], "Permutation Importance with Multicollinear or Correlated Features": [[157, "permutation-importance-with-multicollinear-or-correlated-features"]], "Random Forest Feature Importance on Breast Cancer Data": [[157, "random-forest-feature-importance-on-breast-cancer-data"]], "Handling Multicollinear Features": [[157, "handling-multicollinear-features"]], "Scalable learning with polynomial kernel approximation": [[159, "scalable-learning-with-polynomial-kernel-approximation"]], "Partitioning the data": [[159, "partitioning-the-data"]], "Feature normalization": [[159, "feature-normalization"]], "Establishing a baseline model": [[159, "establishing-a-baseline-model"]], "Establishing the kernel approximation model": [[159, "establishing-the-kernel-approximation-model"]], "Establishing the kernelized SVM model": [[159, "establishing-the-kernelized-svm-model"]], "Comparing the results": [[159, "comparing-the-results"]], "Comparing Linear Bayesian Regressors": [[161, "comparing-linear-bayesian-regressors"]], "Models robustness to recover the ground truth weights": [[161, "models-robustness-to-recover-the-ground-truth-weights"]], "Fit the regressors": [[161, "fit-the-regressors"], [161, "id2"]], "Plot the true and estimated coefficients": [[161, "plot-the-true-and-estimated-coefficients"]], "Plot the marginal log-likelihood": [[161, "plot-the-marginal-log-likelihood"]], "Bayesian regressions with polynomial feature expansion": [[161, "bayesian-regressions-with-polynomial-feature-expansion"]], "Plotting polynomial regressions with std errors of the scores": [[161, "plotting-polynomial-regressions-with-std-errors-of-the-scores"]], "Curve Fitting with Bayesian Ridge Regression": [[162, "curve-fitting-with-bayesian-ridge-regression"]], "Generate sinusoidal data with noise": [[162, "generate-sinusoidal-data-with-noise"]], "Fit by cubic polynomial": [[162, "fit-by-cubic-polynomial"]], "Plot the true and predicted curves with log marginal likelihood (L)": [[162, "plot-the-true-and-predicted-curves-with-log-marginal-likelihood-l"]], "Fitting an Elastic Net with a precomputed Gram Matrix and Weighted Samples": [[163, "fitting-an-elastic-net-with-a-precomputed-gram-matrix-and-weighted-samples"]], "HuberRegressor vs Ridge on dataset with strong outliers": [[164, "huberregressor-vs-ridge-on-dataset-with-strong-outliers"]], "Logistic Regression 3-class Classifier": [[165, "logistic-regression-3-class-classifier"]], "L1-based models for Sparse Signals": [[166, "l1-based-models-for-sparse-signals"]], "Lasso": [[166, "lasso"], [950, "lasso"]], "Automatic Relevance Determination (ARD)": [[166, "automatic-relevance-determination-ard"]], "ElasticNet": [[166, "elasticnet"]], "Plot and analysis of the results": [[166, "plot-and-analysis-of-the-results"]], "Conclusions": [[166, "conclusions"]], "Lasso and Elastic Net": [[167, "lasso-and-elastic-net"]], "Lasso on dense and sparse data": [[168, "lasso-on-dense-and-sparse-data"]], "Comparing the two Lasso implementations on Dense data": [[168, "comparing-the-two-lasso-implementations-on-dense-data"]], "Comparing the two Lasso implementations on Sparse data": [[168, "comparing-the-two-lasso-implementations-on-sparse-data"]], "Lasso path using LARS": [[169, "lasso-path-using-lars"]], "Lasso model selection via information criteria": [[170, "lasso-model-selection-via-information-criteria"]], "Lasso model selection: AIC-BIC / cross-validation": [[171, "lasso-model-selection-aic-bic-cross-validation"]], "Selecting Lasso via an information criterion": [[171, "selecting-lasso-via-an-information-criterion"]], "Selecting Lasso via cross-validation": [[171, "selecting-lasso-via-cross-validation"]], "Lasso via coordinate descent": [[171, "lasso-via-coordinate-descent"]], "Lasso via least angle regression": [[171, "lasso-via-least-angle-regression"]], "Summary of cross-validation approach": [[171, "summary-of-cross-validation-approach"]], "Logistic function": [[172, "logistic-function"]], "L1 Penalty and Sparsity in Logistic Regression": [[173, "l1-penalty-and-sparsity-in-logistic-regression"]], "Plot multinomial and One-vs-Rest Logistic Regression": [[174, "plot-multinomial-and-one-vs-rest-logistic-regression"]], "Regularization path of L1- Logistic Regression": [[175, "regularization-path-of-l1-logistic-regression"]], "Load data": [[175, "load-data"]], "Compute regularization path": [[175, "compute-regularization-path"]], "Plot regularization path": [[175, "plot-regularization-path"]], "Joint feature selection with multi-task Lasso": [[176, "joint-feature-selection-with-multi-task-lasso"]], "Fit models": [[176, "fit-models"], [258, "fit-models"]], "Plot support and time series": [[176, "plot-support-and-time-series"]], "Non-negative least squares": [[177, "non-negative-least-squares"]], "Linear Regression Example": [[178, "linear-regression-example"]], "Sparsity Example: Fitting only features 1  and 2": [[179, "sparsity-example-fitting-only-features-1-and-2"]], "Ordinary Least Squares and Ridge Regression Variance": [[180, "ordinary-least-squares-and-ridge-regression-variance"]], "Orthogonal Matching Pursuit": [[181, "orthogonal-matching-pursuit"]], "Poisson regression and non-normal loss": [[182, "poisson-regression-and-non-normal-loss"]], "The French Motor Third-Party Liability Claims dataset": [[182, "the-french-motor-third-party-liability-claims-dataset"]], "A constant prediction baseline": [[182, "a-constant-prediction-baseline"]], "(Generalized) linear models": [[182, "generalized-linear-models"]], "Gradient Boosting Regression Trees for Poisson regression": [[182, "gradient-boosting-regression-trees-for-poisson-regression"]], "Evaluation of the calibration of predictions": [[182, "evaluation-of-the-calibration-of-predictions"]], "Evaluation of the ranking power": [[182, "evaluation-of-the-ranking-power"]], "Main takeaways": [[182, "main-takeaways"]], "Polynomial and Spline interpolation": [[183, "polynomial-and-spline-interpolation"]], "Periodic Splines": [[183, "periodic-splines"]], "Quantile regression": [[184, "quantile-regression"]], "Fitting a QuantileRegressor": [[184, "fitting-a-quantileregressor"]], "Comparing QuantileRegressor and LinearRegression": [[184, "comparing-quantileregressor-and-linearregression"]], "Robust linear model estimation using RANSAC": [[185, "robust-linear-model-estimation-using-ransac"]], "Ridge coefficients as a function of the L2 Regularization": [[186, "ridge-coefficients-as-a-function-of-the-l2-regularization"]], "Purpose of this example": [[186, "purpose-of-this-example"]], "Creating a non-noisy data set": [[186, "creating-a-non-noisy-data-set"]], "Training the Ridge Regressor": [[186, "training-the-ridge-regressor"]], "Plotting trained Coefficients and Mean Squared Errors": [[186, "plotting-trained-coefficients-and-mean-squared-errors"]], "Interpreting the plots": [[186, "interpreting-the-plots"]], "Plot Ridge coefficients as a function of the regularization": [[187, "plot-ridge-coefficients-as-a-function-of-the-regularization"]], "Compute paths": [[187, "compute-paths"]], "Display results": [[187, "display-results"]], "Robust linear estimator fitting": [[188, "robust-linear-estimator-fitting"]], "Comparing various online solvers": [[189, "comparing-various-online-solvers"]], "Early stopping of Stochastic Gradient Descent": [[190, "early-stopping-of-stochastic-gradient-descent"]], "Plot multi-class SGD on the iris dataset": [[191, "plot-multi-class-sgd-on-the-iris-dataset"]], "SGD: convex loss functions": [[192, "sgd-convex-loss-functions"]], "SGD: Penalties": [[193, "sgd-penalties"]], "SGD: Maximum margin separating hyperplane": [[194, "sgd-maximum-margin-separating-hyperplane"]], "SGD: Weighted samples": [[195, "sgd-weighted-samples"]], "One-Class SVM versus One-Class SVM using Stochastic Gradient Descent": [[196, "one-class-svm-versus-one-class-svm-using-stochastic-gradient-descent"]], "Multiclass sparse logistic regression on 20newgroups": [[197, "multiclass-sparse-logistic-regression-on-20newgroups"]], "MNIST classification using multinomial logistic + L1": [[198, "mnist-classification-using-multinomial-logistic-l1"]], "Theil-Sen Regression": [[199, "theil-sen-regression"]], "Outliers only in the y direction": [[199, "outliers-only-in-the-y-direction"]], "Outliers in the X direction": [[199, "outliers-in-the-x-direction"]], "Tweedie regression on insurance claims": [[200, "tweedie-regression-on-insurance-claims"]], "Loading datasets, basic feature extraction and target definitions": [[200, "loading-datasets-basic-feature-extraction-and-target-definitions"]], "Frequency model \u2013 Poisson distribution": [[200, "frequency-model-poisson-distribution"]], "Severity Model -  Gamma distribution": [[200, "severity-model-gamma-distribution"]], "Pure Premium Modeling via a Product Model vs single TweedieRegressor": [[200, "pure-premium-modeling-via-a-product-model-vs-single-tweedieregressor"]], "Comparison of Manifold Learning methods": [[202, "comparison-of-manifold-learning-methods"]], "Define algorithms for the manifold learning": [[202, "define-algorithms-for-the-manifold-learning"]], "Locally Linear Embeddings": [[202, "locally-linear-embeddings"]], "Isomap Embedding": [[202, "isomap-embedding"]], "Multidimensional scaling": [[202, "multidimensional-scaling"]], "Spectral embedding for non-linear dimensionality reduction": [[202, "spectral-embedding-for-non-linear-dimensionality-reduction"]], "T-distributed Stochastic Neighbor Embedding": [[202, "t-distributed-stochastic-neighbor-embedding"]], "Manifold learning on handwritten digits: Locally Linear Embedding, Isomap\u2026": [[203, "manifold-learning-on-handwritten-digits-locally-linear-embedding-isomap"]], "Load digits dataset": [[203, "load-digits-dataset"]], "Helper function to plot embedding": [[203, "helper-function-to-plot-embedding"]], "Embedding techniques comparison": [[203, "embedding-techniques-comparison"]], "Manifold Learning methods on a severed sphere": [[204, "manifold-learning-methods-on-a-severed-sphere"]], "Multi-dimensional scaling": [[205, "multi-dimensional-scaling"]], "Swiss Roll And Swiss-Hole Reduction": [[206, "swiss-roll-and-swiss-hole-reduction"]], "Swiss Roll": [[206, "swiss-roll"]], "Swiss-Hole": [[206, "swiss-hole"]], "t-SNE: The effect of various perplexity values on the shape": [[207, "t-sne-the-effect-of-various-perplexity-values-on-the-shape"]], "Comparing anomaly detection algorithms for outlier detection on toy datasets": [[209, "comparing-anomaly-detection-algorithms-for-outlier-detection-on-toy-datasets"]], "Visualizations with Display Objects": [[210, "visualizations-with-display-objects"]], "Load Data and train model": [[210, "load-data-and-train-model"]], "Create ConfusionMatrixDisplay": [[210, "create-confusionmatrixdisplay"]], "Create RocCurveDisplay": [[210, "create-roccurvedisplay"]], "Create PrecisionRecallDisplay": [[210, "create-precisionrecalldisplay"]], "Combining the display objects into a single plot": [[210, "combining-the-display-objects-into-a-single-plot"]], "Displaying estimators and complex pipelines": [[211, "displaying-estimators-and-complex-pipelines"]], "Compact text representation": [[211, "compact-text-representation"]], "Rich HTML representation": [[211, "rich-html-representation"]], "Isotonic Regression": [[212, "isotonic-regression"]], "The Johnson-Lindenstrauss bound for embedding with random projections": [[213, "the-johnson-lindenstrauss-bound-for-embedding-with-random-projections"]], "Theoretical bounds": [[213, "theoretical-bounds"]], "Empirical validation": [[213, "empirical-validation"]], "Remarks": [[213, "remarks"]], "Explicit feature map approximation for RBF kernels": [[214, "explicit-feature-map-approximation-for-rbf-kernels"]], "Python package and dataset imports, load dataset": [[214, "python-package-and-dataset-imports-load-dataset"]], "Timing and accuracy plots": [[214, "timing-and-accuracy-plots"]], "Decision Surfaces of RBF Kernel SVM and Linear SVM": [[214, "decision-surfaces-of-rbf-kernel-svm-and-linear-svm"]], "Comparison of kernel ridge regression and SVR": [[215, "comparison-of-kernel-ridge-regression-and-svr"]], "Construct the kernel-based regression models": [[215, "construct-the-kernel-based-regression-models"]], "Compare times of SVR and Kernel Ridge Regression": [[215, "compare-times-of-svr-and-kernel-ridge-regression"]], "Look at the results": [[215, "look-at-the-results"], [315, "look-at-the-results"]], "Visualize training and prediction times": [[215, "visualize-training-and-prediction-times"]], "Visualize the learning curves": [[215, "visualize-the-learning-curves"]], "Metadata Routing": [[216, "metadata-routing"], [294, "metadata-routing"], [360, "metadata-routing"], [365, "metadata-routing"], [1012, "metadata-routing"], [1012, "id1"], [1012, "id4"], [1013, "metadata-routing"], [1013, "id1"]], "Estimators": [[216, "estimators"], [329, "estimators"], [329, "id2"], [348, "estimators"], [370, "estimators"], [373, "estimators"]], "Router and Consumer": [[216, "router-and-consumer"]], "Simple Pipeline": [[216, "simple-pipeline"]], "Deprecation / Default Value Change": [[216, "deprecation-default-value-change"]], "Third Party Development and scikit-learn Dependency": [[216, "third-party-development-and-scikit-learn-dependency"]], "Multilabel classification": [[217, "multilabel-classification"], [955, "multilabel-classification"]], "Face completion with a multi-output estimators": [[218, "face-completion-with-a-multi-output-estimators"]], "Evaluation of outlier detection estimators": [[219, "evaluation-of-outlier-detection-estimators"]], "Dataset preprocessing and model training": [[219, "dataset-preprocessing-and-model-training"]], "KDDCup99 - SA dataset": [[219, "kddcup99-sa-dataset"]], "Forest covertypes dataset": [[219, "forest-covertypes-dataset"]], "Ames Housing dataset": [[219, "ames-housing-dataset"]], "Cardiotocography dataset": [[219, "cardiotocography-dataset"]], "Plot and interpret results": [[219, "plot-and-interpret-results"]], "Ablation study": [[219, "ablation-study"]], "Advanced Plotting With Partial Dependence": [[220, "advanced-plotting-with-partial-dependence"]], "Train models on the diabetes dataset": [[220, "train-models-on-the-diabetes-dataset"]], "Plotting partial dependence for two features": [[220, "plotting-partial-dependence-for-two-features"]], "Plotting partial dependence of the two models together": [[220, "plotting-partial-dependence-of-the-two-models-together"]], "Plotting partial dependence for one feature": [[220, "plotting-partial-dependence-for-one-feature"]], "Displaying Pipelines": [[221, "displaying-pipelines"]], "Displaying a Pipeline with a Preprocessing Step and Classifier": [[221, "displaying-a-pipeline-with-a-preprocessing-step-and-classifier"]], "Displaying a Pipeline Chaining Multiple Preprocessing Steps & Classifier": [[221, "displaying-a-pipeline-chaining-multiple-preprocessing-steps-classifier"]], "Displaying a Pipeline and Dimensionality Reduction and Classifier": [[221, "displaying-a-pipeline-and-dimensionality-reduction-and-classifier"]], "Displaying a Complex Pipeline Chaining a Column Transformer": [[221, "displaying-a-complex-pipeline-chaining-a-column-transformer"]], "Displaying a Grid Search over a Pipeline with a Classifier": [[221, "displaying-a-grid-search-over-a-pipeline-with-a-classifier"]], "ROC Curve with Visualization API": [[222, "roc-curve-with-visualization-api"]], "Load Data and Train a SVC": [[222, "load-data-and-train-a-svc"]], "Plotting the ROC Curve": [[222, "plotting-the-roc-curve"]], "Training a Random Forest and Plotting the ROC Curve": [[222, "training-a-random-forest-and-plotting-the-roc-curve"]], "Introducing the set_output API": [[223, "introducing-the-set-output-api"]], "Concentration Prior Type Analysis of Variation Bayesian Gaussian Mixture": [[225, "concentration-prior-type-analysis-of-variation-bayesian-gaussian-mixture"]], "Gaussian Mixture Model Ellipsoids": [[226, "gaussian-mixture-model-ellipsoids"]], "GMM covariances": [[227, "gmm-covariances"]], "GMM Initialization Methods": [[228, "gmm-initialization-methods"]], "Density Estimation for a Gaussian mixture": [[229, "density-estimation-for-a-gaussian-mixture"]], "Gaussian Mixture Model Selection": [[230, "gaussian-mixture-model-selection"]], "Plot the BIC scores": [[230, "plot-the-bic-scores"]], "Plot the best model": [[230, "plot-the-best-model"]], "Gaussian Mixture Model Sine Curve": [[231, "gaussian-mixture-model-sine-curve"]], "Confusion matrix": [[233, "confusion-matrix"], [954, "confusion-matrix"]], "Visualizing cross-validation behavior in scikit-learn": [[234, "visualizing-cross-validation-behavior-in-scikit-learn"]], "Visualize our data": [[234, "visualize-our-data"]], "Define a function to visualize cross-validation behavior": [[234, "define-a-function-to-visualize-cross-validation-behavior"]], "Visualize cross-validation indices for many CV objects": [[234, "visualize-cross-validation-indices-for-many-cv-objects"]], "Plotting Cross-Validated Predictions": [[235, "plotting-cross-validated-predictions"]], "Detection error tradeoff (DET) curve": [[236, "detection-error-tradeoff-det-curve"]], "Generate synthetic data": [[236, "generate-synthetic-data"]], "Define the classifiers": [[236, "define-the-classifiers"]], "Plot ROC and DET curves": [[236, "plot-roc-and-det-curves"]], "Custom refit strategy of a grid search with cross-validation": [[237, "custom-refit-strategy-of-a-grid-search-with-cross-validation"]], "The dataset": [[237, "the-dataset"]], "Define our grid-search strategy": [[237, "define-our-grid-search-strategy"]], "Tuning hyper-parameters": [[237, "tuning-hyper-parameters"]], "Balance model complexity and cross-validated score": [[238, "balance-model-complexity-and-cross-validated-score"]], "Statistical comparison of models using grid search": [[239, "statistical-comparison-of-models-using-grid-search"]], "Comparing two models: frequentist approach": [[239, "comparing-two-models-frequentist-approach"]], "Comparing two models: Bayesian approach": [[239, "comparing-two-models-bayesian-approach"]], "Region of Practical Equivalence": [[239, "region-of-practical-equivalence"]], "Pairwise comparison of all models: frequentist approach": [[239, "pairwise-comparison-of-all-models-frequentist-approach"]], "Pairwise comparison of all models: Bayesian approach": [[239, "pairwise-comparison-of-all-models-bayesian-approach"]], "Take-home messages": [[239, "take-home-messages"]], "Sample pipeline for text feature extraction and evaluation": [[240, "sample-pipeline-for-text-feature-extraction-and-evaluation"]], "Data loading": [[240, "data-loading"]], "Pipeline with hyperparameter tuning": [[240, "pipeline-with-hyperparameter-tuning"]], "Plotting Learning Curves and Checking Models\u2019 Scalability": [[241, "plotting-learning-curves-and-checking-models-scalability"]], "Learning Curve": [[241, "learning-curve"]], "Complexity analysis": [[241, "complexity-analysis"]], "Class Likelihood Ratios to measure classification performance": [[242, "class-likelihood-ratios-to-measure-classification-performance"]], "Pre-test vs. post-test analysis": [[242, "pre-test-vs-post-test-analysis"]], "Cross-validation of likelihood ratios": [[242, "cross-validation-of-likelihood-ratios"]], "Invariance with respect to prevalence": [[242, "invariance-with-respect-to-prevalence"]], "Demonstration of multi-metric evaluation on cross_val_score and GridSearchCV": [[243, "demonstration-of-multi-metric-evaluation-on-cross-val-score-and-gridsearchcv"]], "Running GridSearchCV using multiple evaluation metrics": [[243, "running-gridsearchcv-using-multiple-evaluation-metrics"]], "Plotting the result": [[243, "plotting-the-result"]], "Nested versus non-nested cross-validation": [[244, "nested-versus-non-nested-cross-validation"]], "See Also:": [[244, null], [375, null]], "Test with permutations the significance of a classification score": [[245, "test-with-permutations-the-significance-of-a-classification-score"]], "Permutation test score": [[245, "permutation-test-score"], [378, "permutation-test-score"]], "Original data": [[245, "original-data"], [279, "original-data"]], "Random data": [[245, "random-data"]], "Precision-Recall": [[246, "precision-recall"]], "In binary classification settings": [[246, "in-binary-classification-settings"]], "Dataset and model": [[246, "dataset-and-model"]], "Plot the Precision-Recall curve": [[246, "plot-the-precision-recall-curve"]], "In multi-label settings": [[246, "in-multi-label-settings"]], "Create multi-label data, fit, and predict": [[246, "create-multi-label-data-fit-and-predict"]], "The average precision score in multi-label settings": [[246, "the-average-precision-score-in-multi-label-settings"]], "Plot the micro-averaged Precision-Recall curve": [[246, "plot-the-micro-averaged-precision-recall-curve"]], "Plot Precision-Recall curve for each class and iso-f1 curves": [[246, "plot-precision-recall-curve-for-each-class-and-iso-f1-curves"]], "Comparing randomized search and grid search for hyperparameter estimation": [[247, "comparing-randomized-search-and-grid-search-for-hyperparameter-estimation"]], "Multiclass Receiver Operating Characteristic (ROC)": [[248, "multiclass-receiver-operating-characteristic-roc"]], "Load and prepare data": [[248, "load-and-prepare-data"], [249, "load-and-prepare-data"], [284, "load-and-prepare-data"]], "One-vs-Rest multiclass ROC": [[248, "one-vs-rest-multiclass-roc"]], "ROC curve showing a specific class": [[248, "roc-curve-showing-a-specific-class"]], "ROC curve using micro-averaged OvR": [[248, "roc-curve-using-micro-averaged-ovr"]], "ROC curve using the OvR macro-average": [[248, "roc-curve-using-the-ovr-macro-average"]], "Plot all OvR ROC curves together": [[248, "plot-all-ovr-roc-curves-together"]], "One-vs-One multiclass ROC": [[248, "one-vs-one-multiclass-roc"]], "ROC curve using the OvO macro-average": [[248, "roc-curve-using-the-ovo-macro-average"]], "Plot all OvO ROC curves together": [[248, "plot-all-ovo-roc-curves-together"]], "Receiver Operating Characteristic (ROC) with cross validation": [[249, "receiver-operating-characteristic-roc-with-cross-validation"]], "Classification and ROC analysis": [[249, "classification-and-roc-analysis"]], "Comparison between grid search and successive halving": [[250, "comparison-between-grid-search-and-successive-halving"]], "Successive Halving Iterations": [[251, "successive-halving-iterations"]], "Number of candidates and amount of resource at each iteration": [[251, "number-of-candidates-and-amount-of-resource-at-each-iteration"]], "Train error vs Test error": [[252, "train-error-vs-test-error"]], "Compute train and test errors": [[252, "compute-train-and-test-errors"]], "Plot results functions": [[252, "plot-results-functions"]], "Underfitting vs. Overfitting": [[253, "underfitting-vs-overfitting"]], "Plotting Validation Curves": [[254, "plotting-validation-curves"]], "Overview of multiclass training meta-estimators": [[256, "overview-of-multiclass-training-meta-estimators"]], "The Yeast UCI dataset": [[256, "the-yeast-uci-dataset"]], "Strategies comparison": [[256, "strategies-comparison"]], "The importance of hyperparameters search": [[256, "the-importance-of-hyperparameters-search"]], "Multilabel classification using a classifier chain": [[258, "multilabel-classification-using-a-classifier-chain"]], "Loading a dataset": [[258, "loading-a-dataset"]], "LogisticRegression wrapped by OneVsRestClassifier": [[258, "logisticregression-wrapped-by-onevsrestclassifier"]], "Chain of binary classifiers": [[258, "chain-of-binary-classifiers"]], "Results interpretation": [[258, "results-interpretation"]], "Approximate nearest neighbors in TSNE": [[259, "approximate-nearest-neighbors-in-tsne"]], "Caching nearest neighbors": [[261, "caching-nearest-neighbors"]], "Nearest Neighbors Classification": [[262, "nearest-neighbors-classification"], [957, "nearest-neighbors-classification"]], "K-nearest neighbors classifier": [[262, "k-nearest-neighbors-classifier"]], "Decision boundary": [[262, "decision-boundary"]], "Kernel Density Estimation": [[263, "kernel-density-estimation"], [380, "kernel-density-estimation"]], "Simple 1D Kernel Density Estimation": [[264, "simple-1d-kernel-density-estimation"]], "Novelty detection with Local Outlier Factor (LOF)": [[265, "novelty-detection-with-local-outlier-factor-lof"]], "Outlier detection with Local Outlier Factor (LOF)": [[266, "outlier-detection-with-local-outlier-factor-lof"]], "Generate data with outliers": [[266, "generate-data-with-outliers"]], "Fit the model for outlier detection (default)": [[266, "fit-the-model-for-outlier-detection-default"]], "Comparing Nearest Neighbors with and without Neighborhood Components Analysis": [[267, "comparing-nearest-neighbors-with-and-without-neighborhood-components-analysis"]], "Dimensionality Reduction with Neighborhood Components Analysis": [[268, "dimensionality-reduction-with-neighborhood-components-analysis"]], "Neighborhood Components Analysis Illustration": [[269, "neighborhood-components-analysis-illustration"]], "Original points": [[269, "original-points"]], "Learning an embedding": [[269, "learning-an-embedding"]], "Nearest Centroid Classification": [[270, "nearest-centroid-classification"]], "Nearest Neighbors regression": [[271, "nearest-neighbors-regression"]], "Kernel Density Estimate of Species Distributions": [[272, "kernel-density-estimate-of-species-distributions"]], "Varying regularization in Multi-layer Perceptron": [[274, "varying-regularization-in-multi-layer-perceptron"]], "Compare Stochastic learning strategies for MLPClassifier": [[275, "compare-stochastic-learning-strategies-for-mlpclassifier"]], "Visualization of MLP weights on MNIST": [[276, "visualization-of-mlp-weights-on-mnist"]], "Restricted Boltzmann Machine features for digit classification": [[277, "restricted-boltzmann-machine-features-for-digit-classification"]], "Models definition": [[277, "models-definition"]], "Training": [[277, "training"], [957, "training"]], "Plotting": [[277, "plotting"], [373, "plotting"], [373, "id7"], [373, "id9"]], "Compare the effect of different scalers on data with outliers": [[279, "compare-the-effect-of-different-scalers-on-data-with-outliers"]], "StandardScaler": [[279, "standardscaler"]], "MinMaxScaler": [[279, "minmaxscaler"]], "MaxAbsScaler": [[279, "maxabsscaler"]], "RobustScaler": [[279, "robustscaler"]], "PowerTransformer": [[279, "powertransformer"]], "QuantileTransformer (uniform output)": [[279, "quantiletransformer-uniform-output"]], "QuantileTransformer (Gaussian output)": [[279, "quantiletransformer-gaussian-output"]], "Normalizer": [[279, "normalizer"]], "Using KBinsDiscretizer to discretize continuous features": [[280, "using-kbinsdiscretizer-to-discretize-continuous-features"]], "Feature discretization": [[281, "feature-discretization"]], "Demonstrating the different strategies of KBinsDiscretizer": [[282, "demonstrating-the-different-strategies-of-kbinsdiscretizer"]], "Map data to a normal distribution": [[283, "map-data-to-a-normal-distribution"]], "Importance of Feature Scaling": [[284, "importance-of-feature-scaling"]], "Effect of rescaling on a k-neighbors models": [[284, "effect-of-rescaling-on-a-k-neighbors-models"]], "Effect of rescaling on a PCA dimensional reduction": [[284, "effect-of-rescaling-on-a-pca-dimensional-reduction"]], "Effect of rescaling on model\u2019s performance": [[284, "effect-of-rescaling-on-model-s-performance"]], "Comparing Target Encoder with Other Encoders": [[285, "comparing-target-encoder-with-other-encoders"]], "Loading Data from OpenML": [[285, "loading-data-from-openml"]], "Training and Evaluating Pipelines with Different Encoders": [[285, "training-and-evaluating-pipelines-with-different-encoders"]], "Native Categorical Feature Support": [[285, "native-categorical-feature-support"]], "Plotting the Results": [[285, "plotting-the-results"]], "Target Encoder\u2019s Internal Cross fitting": [[286, "target-encoder-s-internal-cross-fitting"]], "Create Synthetic Dataset": [[286, "create-synthetic-dataset"]], "Training a Ridge Regressor": [[286, "training-a-ridge-regressor"]], "Release Highlights for scikit-learn 0.22": [[288, "release-highlights-for-scikit-learn-0-22"]], "New plotting API": [[288, "new-plotting-api"]], "Stacking Classifier and Regressor": [[288, "stacking-classifier-and-regressor"]], "Permutation-based feature importance": [[288, "permutation-based-feature-importance"]], "Native support for missing values for gradient boosting": [[288, "native-support-for-missing-values-for-gradient-boosting"]], "Precomputed sparse nearest neighbors graph": [[288, "precomputed-sparse-nearest-neighbors-graph"]], "KNN Based Imputation": [[288, "knn-based-imputation"]], "Tree pruning": [[288, "tree-pruning"]], "Retrieve dataframes from OpenML": [[288, "retrieve-dataframes-from-openml"]], "Checking scikit-learn compatibility of an estimator": [[288, "checking-scikit-learn-compatibility-of-an-estimator"]], "ROC AUC now supports multiclass classification": [[288, "roc-auc-now-supports-multiclass-classification"]], "Release Highlights for scikit-learn 0.23": [[289, "release-highlights-for-scikit-learn-0-23"]], "Generalized Linear Models, and Poisson loss for gradient boosting": [[289, "generalized-linear-models-and-poisson-loss-for-gradient-boosting"]], "Rich visual representation of estimators": [[289, "rich-visual-representation-of-estimators"]], "Scalability and stability improvements to KMeans": [[289, "scalability-and-stability-improvements-to-kmeans"]], "Improvements to the histogram-based Gradient Boosting estimators": [[289, "improvements-to-the-histogram-based-gradient-boosting-estimators"]], "Sample-weight support for Lasso and ElasticNet": [[289, "sample-weight-support-for-lasso-and-elasticnet"]], "Release Highlights for scikit-learn 0.24": [[290, "release-highlights-for-scikit-learn-0-24"]], "Successive Halving estimators for tuning hyper-parameters": [[290, "successive-halving-estimators-for-tuning-hyper-parameters"]], "Native support for categorical features in HistGradientBoosting estimators": [[290, "native-support-for-categorical-features-in-histgradientboosting-estimators"]], "Improved performances of HistGradientBoosting estimators": [[290, "improved-performances-of-histgradientboosting-estimators"]], "New self-training meta-estimator": [[290, "new-self-training-meta-estimator"]], "New SequentialFeatureSelector transformer": [[290, "new-sequentialfeatureselector-transformer"]], "New PolynomialCountSketch kernel approximation function": [[290, "new-polynomialcountsketch-kernel-approximation-function"]], "Individual Conditional Expectation plots": [[290, "individual-conditional-expectation-plots"]], "New Poisson splitting criterion for DecisionTreeRegressor": [[290, "new-poisson-splitting-criterion-for-decisiontreeregressor"]], "New documentation improvements": [[290, "new-documentation-improvements"], [291, "new-documentation-improvements"]], "Release Highlights for scikit-learn 1.0": [[291, "release-highlights-for-scikit-learn-1-0"]], "Keyword and positional arguments": [[291, "keyword-and-positional-arguments"]], "Spline Transformers": [[291, "spline-transformers"]], "Quantile Regressor": [[291, "quantile-regressor"]], "Feature Names Support": [[291, "feature-names-support"]], "A more flexible plotting API": [[291, "a-more-flexible-plotting-api"]], "Online One-Class SVM": [[291, "online-one-class-svm"], [968, "online-one-class-svm"]], "Histogram-based Gradient Boosting Models are now stable": [[291, "histogram-based-gradient-boosting-models-are-now-stable"]], "Release Highlights for scikit-learn 1.1": [[292, "release-highlights-for-scikit-learn-1-1"]], "Quantile loss in ensemble.HistGradientBoostingRegressor": [[292, "quantile-loss-in-ensemble-histgradientboostingregressor"]], "get_feature_names_out Available in all Transformers": [[292, "get-feature-names-out-available-in-all-transformers"]], "Grouping infrequent categories in OneHotEncoder": [[292, "grouping-infrequent-categories-in-onehotencoder"]], "Performance improvements": [[292, "performance-improvements"]], "MiniBatchNMF: an online version of NMF": [[292, "minibatchnmf-an-online-version-of-nmf"]], "BisectingKMeans: divide and cluster": [[292, "bisectingkmeans-divide-and-cluster"]], "Release Highlights for scikit-learn 1.2": [[293, "release-highlights-for-scikit-learn-1-2"]], "Pandas output with set_output API": [[293, "pandas-output-with-set-output-api"]], "Interaction constraints in Histogram-based Gradient Boosting Trees": [[293, "interaction-constraints-in-histogram-based-gradient-boosting-trees"]], "New and enhanced displays": [[293, "new-and-enhanced-displays"]], "Faster parser in fetch_openml": [[293, "faster-parser-in-fetch-openml"]], "Experimental Array API support in LinearDiscriminantAnalysis": [[293, "experimental-array-api-support-in-lineardiscriminantanalysis"]], "Improved efficiency of many estimators": [[293, "improved-efficiency-of-many-estimators"]], "Release Highlights for scikit-learn 1.3": [[294, "release-highlights-for-scikit-learn-1-3"]], "HDBSCAN: hierarchical density-based clustering": [[294, "hdbscan-hierarchical-density-based-clustering"]], "TargetEncoder: a new category encoding strategy": [[294, "targetencoder-a-new-category-encoding-strategy"]], "Missing values support in decision trees": [[294, "missing-values-support-in-decision-trees"]], "New display model_selection.ValidationCurveDisplay": [[294, "new-display-model-selection-validationcurvedisplay"]], "Gamma loss for gradient boosting": [[294, "gamma-loss-for-gradient-boosting"]], "Grouping infrequent categories in preprocessing.OrdinalEncoder": [[294, "grouping-infrequent-categories-in-preprocessing-ordinalencoder"]], "Release Highlights for scikit-learn 1.4": [[295, "release-highlights-for-scikit-learn-1-4"]], "HistGradientBoosting Natively Supports Categorical DTypes in DataFrames": [[295, "histgradientboosting-natively-supports-categorical-dtypes-in-dataframes"]], "Polars output in set_output": [[295, "polars-output-in-set-output"]], "Missing value support for Random Forest": [[295, "missing-value-support-for-random-forest"]], "Add support for monotonic constraints in tree-based models": [[295, "add-support-for-monotonic-constraints-in-tree-based-models"]], "Enriched estimator displays": [[295, "enriched-estimator-displays"]], "Metadata Routing Support": [[295, "metadata-routing-support"]], "Improved memory and runtime efficiency for PCA on sparse data": [[295, "improved-memory-and-runtime-efficiency-for-pca-on-sparse-data"]], "Label Propagation digits: Demonstrating performance": [[297, "label-propagation-digits-demonstrating-performance"]], "Semi-supervised learning": [[297, "semi-supervised-learning"], [967, "semi-supervised-learning"]], "Plot the most uncertain predictions": [[297, "plot-the-most-uncertain-predictions"]], "Label Propagation digits active learning": [[298, "label-propagation-digits-active-learning"]], "Label Propagation learning a complex structure": [[299, "label-propagation-learning-a-complex-structure"]], "Effect of varying threshold for self-training": [[300, "effect-of-varying-threshold-for-self-training"]], "Semi-supervised Classification on a Text Dataset": [[301, "semi-supervised-classification-on-a-text-dataset"]], "Decision boundary of semi-supervised classifiers versus SVM on the Iris dataset": [[302, "decision-boundary-of-semi-supervised-classifiers-versus-svm-on-the-iris-dataset"]], "SVM with custom kernel": [[304, "svm-with-custom-kernel"]], "Plot different SVM classifiers in the iris dataset": [[305, "plot-different-svm-classifiers-in-the-iris-dataset"]], "Plot the support vectors in LinearSVC": [[306, "plot-the-support-vectors-in-linearsvc"]], "One-class SVM with non-linear kernel (RBF)": [[307, "one-class-svm-with-non-linear-kernel-rbf"]], "RBF SVM parameters": [[308, "rbf-svm-parameters"]], "Load and prepare data set": [[308, "load-and-prepare-data-set"]], "Train classifiers": [[308, "train-classifiers"]], "SVM: Maximum margin separating hyperplane": [[309, "svm-maximum-margin-separating-hyperplane"]], "SVM: Separating hyperplane for unbalanced classes": [[310, "svm-separating-hyperplane-for-unbalanced-classes"]], "SVM-Anova: SVM with univariate feature selection": [[311, "svm-anova-svm-with-univariate-feature-selection"]], "Load some data to play with": [[311, "load-some-data-to-play-with"]], "Create the pipeline": [[311, "create-the-pipeline"]], "Plot the cross-validation score as a function of percentile of features": [[311, "plot-the-cross-validation-score-as-a-function-of-percentile-of-features"]], "Plot classification boundaries with different SVM Kernels": [[312, "plot-classification-boundaries-with-different-svm-kernels"]], "Creating a dataset": [[312, "creating-a-dataset"]], "Training SVC model and plotting decision boundaries": [[312, "training-svc-model-and-plotting-decision-boundaries"]], "Linear kernel": [[312, "linear-kernel"], [952, "linear-kernel"], [986, "linear-kernel"]], "Polynomial kernel": [[312, "polynomial-kernel"], [952, "polynomial-kernel"], [986, "polynomial-kernel"]], "RBF kernel": [[312, "rbf-kernel"], [952, "rbf-kernel"]], "Sigmoid kernel": [[312, "sigmoid-kernel"], [952, "sigmoid-kernel"], [986, "sigmoid-kernel"]], "SVM Margins Example": [[313, "svm-margins-example"]], "Non-linear SVM": [[314, "non-linear-svm"]], "Support Vector Regression (SVR) using linear and non-linear kernels": [[315, "support-vector-regression-svr-using-linear-and-non-linear-kernels"]], "Scaling the regularization parameter for SVCs": [[316, "scaling-the-regularization-parameter-for-svcs"]], "L1-penalty case": [[316, "l1-penalty-case"]], "L2-penalty case": [[316, "l2-penalty-case"]], "SVM Tie Breaking Example": [[317, "svm-tie-breaking-example"]], "SVM: Weighted samples": [[318, "svm-weighted-samples"]], "Classification of text documents using sparse features": [[320, "classification-of-text-documents-using-sparse-features"]], "Loading and vectorizing the 20 newsgroups text dataset": [[320, "loading-and-vectorizing-the-20-newsgroups-text-dataset"]], "Analysis of a bag-of-words document classifier": [[320, "analysis-of-a-bag-of-words-document-classifier"]], "Model without metadata stripping": [[320, "model-without-metadata-stripping"]], "Model with metadata stripping": [[320, "model-with-metadata-stripping"]], "Benchmarking classifiers": [[320, "benchmarking-classifiers"]], "Plot accuracy, training and test time of each classifier": [[320, "plot-accuracy-training-and-test-time-of-each-classifier"]], "Clustering text documents using k-means": [[321, "clustering-text-documents-using-k-means"]], "Loading text data": [[321, "loading-text-data"]], "Quantifying the quality of clustering results": [[321, "quantifying-the-quality-of-clustering-results"]], "K-means clustering on text features": [[321, "k-means-clustering-on-text-features"]], "Feature Extraction using TfidfVectorizer": [[321, "feature-extraction-using-tfidfvectorizer"]], "Clustering sparse data with k-means": [[321, "clustering-sparse-data-with-k-means"]], "Performing dimensionality reduction using LSA": [[321, "performing-dimensionality-reduction-using-lsa"]], "Top terms per cluster": [[321, "top-terms-per-cluster"]], "HashingVectorizer": [[321, "hashingvectorizer"]], "Clustering evaluation summary": [[321, "clustering-evaluation-summary"]], "FeatureHasher and DictVectorizer Comparison": [[322, "featurehasher-and-dictvectorizer-comparison"]], "Load Data": [[322, "load-data"]], "Define preprocessing functions": [[322, "define-preprocessing-functions"]], "DictVectorizer": [[322, "dictvectorizer"]], "FeatureHasher": [[322, "featurehasher"]], "Comparison with special purpose text vectorizers": [[322, "comparison-with-special-purpose-text-vectorizers"]], "TfidfVectorizer": [[322, "tfidfvectorizer"]], "Post pruning decision trees with cost complexity pruning": [[324, "post-pruning-decision-trees-with-cost-complexity-pruning"]], "Total impurity of leaves vs effective alphas of pruned tree": [[324, "total-impurity-of-leaves-vs-effective-alphas-of-pruned-tree"]], "Accuracy vs alpha for training and testing sets": [[324, "accuracy-vs-alpha-for-training-and-testing-sets"]], "Plot the decision surface of decision trees trained on the iris dataset": [[325, "plot-the-decision-surface-of-decision-trees-trained-on-the-iris-dataset"]], "Decision Tree Regression": [[326, "decision-tree-regression"]], "Multi-output Decision Tree Regression": [[327, "multi-output-decision-tree-regression"]], "Understanding the decision tree structure": [[328, "understanding-the-decision-tree-structure"]], "Train tree classifier": [[328, "train-tree-classifier"]], "Tree structure": [[328, "tree-structure"]], "What is the values array used here?": [[328, "what-is-the-values-array-used-here"]], "Decision path": [[328, "decision-path"]], "Common pitfalls and recommended practices": [[329, "common-pitfalls-and-recommended-practices"]], "Inconsistent preprocessing": [[329, "inconsistent-preprocessing"]], "Data leakage": [[329, "data-leakage"]], "How to avoid data leakage": [[329, "how-to-avoid-data-leakage"]], "Data leakage during pre-processing": [[329, "data-leakage-during-pre-processing"]], "Controlling randomness": [[329, "controlling-randomness"]], "Using None or RandomState instances, and repeated calls to fit and split": [[329, "using-none-or-randomstate-instances-and-repeated-calls-to-fit-and-split"]], "CV splitters": [[329, "cv-splitters"], [329, "id3"]], "Common pitfalls and subtleties": [[329, "common-pitfalls-and-subtleties"]], "General recommendations": [[329, "general-recommendations"]], "Getting reproducible results across multiple executions": [[329, "getting-reproducible-results-across-multiple-executions"]], "Robustness of cross-validation results": [[329, "robustness-of-cross-validation-results"]], "Computing with scikit-learn": [[332, "computing-with-scikit-learn"]], "Computational Performance": [[333, "computational-performance"]], "Bulk versus Atomic mode": [[333, "bulk-versus-atomic-mode"]], "Configuring Scikit-learn for reduced validation overhead": [[333, "configuring-scikit-learn-for-reduced-validation-overhead"]], "Influence of the Number of Features": [[333, "influence-of-the-number-of-features"]], "Influence of the Input Data Representation": [[333, "influence-of-the-input-data-representation"]], "Influence of the Model Complexity": [[333, "influence-of-the-model-complexity"]], "Feature Extraction Latency": [[333, "feature-extraction-latency"]], "Prediction Throughput": [[333, "prediction-throughput"]], "Tips and Tricks": [[333, "tips-and-tricks"]], "Linear algebra libraries": [[333, "linear-algebra-libraries"]], "Limiting Working Memory": [[333, "limiting-working-memory"]], "Model Compression": [[333, "model-compression"]], "Model Reshaping": [[333, "model-reshaping"]], "Links": [[333, "links"]], "Parallelism, resource management, and configuration": [[334, "parallelism-resource-management-and-configuration"]], "Parallelism": [[334, "parallelism"], [943, "parallelism"]], "Higher-level parallelism with joblib": [[334, "higher-level-parallelism-with-joblib"]], "Lower-level parallelism with OpenMP": [[334, "lower-level-parallelism-with-openmp"]], "Parallel NumPy and SciPy routines from numerical libraries": [[334, "parallel-numpy-and-scipy-routines-from-numerical-libraries"]], "Oversubscription: spawning too many threads": [[334, "oversubscription-spawning-too-many-threads"]], "Configuration switches": [[334, "configuration-switches"]], "Python API": [[334, "python-api"]], "Environment variables": [[334, "environment-variables"]], "SKLEARN_ASSUME_FINITE": [[334, "sklearn-assume-finite"]], "SKLEARN_WORKING_MEMORY": [[334, "sklearn-working-memory"]], "SKLEARN_SEED": [[334, "sklearn-seed"]], "SKLEARN_TESTS_GLOBAL_RANDOM_SEED": [[334, "sklearn-tests-global-random-seed"]], "SKLEARN_SKIP_NETWORK_TESTS": [[334, "sklearn-skip-network-tests"]], "SKLEARN_RUN_FLOAT32_TESTS": [[334, "sklearn-run-float32-tests"]], "SKLEARN_ENABLE_DEBUG_CYTHON_DIRECTIVES": [[334, "sklearn-enable-debug-cython-directives"]], "SKLEARN_BUILD_ENABLE_DEBUG_SYMBOLS": [[334, "sklearn-build-enable-debug-symbols"]], "SKLEARN_PAIRWISE_DIST_CHUNK_SIZE": [[334, "sklearn-pairwise-dist-chunk-size"]], "SKLEARN_WARNINGS_AS_ERRORS": [[334, "sklearn-warnings-as-errors"]], "Strategies to scale computationally: bigger data": [[335, "strategies-to-scale-computationally-bigger-data"]], "Scaling with instances using out-of-core learning": [[335, "scaling-with-instances-using-out-of-core-learning"]], "Streaming instances": [[335, "streaming-instances"]], "Extracting features": [[335, "extracting-features"]], "Incremental learning": [[335, "incremental-learning"]], "Notes": [[335, "notes"]], "Dataset transformations": [[338, "dataset-transformations"]], "Dataset loading utilities": [[339, "dataset-loading-utilities"], [351, "dataset-loading-utilities"]], "Loading other datasets": [[340, "loading-other-datasets"]], "Sample images": [[340, "sample-images"]], "Examples:": [[340, null], [341, null], [363, null], [371, null], [371, null], [372, null], [374, null], [374, null], [374, null], [374, null], [374, null], [374, null], [374, null], [374, null], [374, null], [374, null], [374, null], [374, null], [374, null], [374, null], [374, null], [375, null], [375, null], [375, null], [375, null], [375, null], [376, null], [376, null], [376, null], [376, null], [376, null], [376, null], [377, null], [379, null], [379, null], [379, null], [379, null], [379, null], [379, null], [379, null], [379, null], [379, null], [379, null], [379, null], [379, null], [380, null], [381, null], [381, null], [381, null], [381, null], [381, null], [381, null], [381, null], [381, null], [381, null], [381, null], [381, null], [381, null], [381, null], [381, null], [381, null], [383, null], [383, null], [383, null], [383, null], [943, null], [943, null], [943, null], [946, null], [946, null], [946, null], [948, null], [948, null], [948, null], [949, null], [950, null], [950, null], [950, null], [950, null], [950, null], [950, null], [950, null], [950, null], [950, null], [950, null], [950, null], [950, null], [950, null], [950, null], [951, null], [953, null], [953, null], [953, null], [953, null], [954, null], [954, null], [954, null], [954, null], [954, null], [955, null], [957, null], [957, null], [957, null], [957, null], [957, null], [958, null], [958, null], [959, null], [960, null], [960, null], [960, null], [960, null], [960, null], [960, null], [961, null], [962, null], [964, null], [964, null], [964, null], [968, null], [968, null], [969, null], [969, null], [969, null], [969, null], [969, null], [969, null], [970, null], [970, null], [970, null], [970, null], [992, null]], "Datasets in svmlight / libsvm format": [[340, "datasets-in-svmlight-libsvm-format"]], "Related links:": [[340, null]], "Downloading datasets from the openml.org repository": [[340, "downloading-datasets-from-the-openml-org-repository"]], "Dataset Versions": [[340, "dataset-versions"]], "ARFF parser": [[340, "arff-parser"]], "Loading from external datasets": [[340, "loading-from-external-datasets"], [979, null]], "Real world datasets": [[341, "real-world-datasets"]], "The Olivetti faces dataset": [[341, "the-olivetti-faces-dataset"]], "The 20 newsgroups text dataset": [[341, "the-20-newsgroups-text-dataset"]], "Data Considerations": [[341, null]], "Recommendation": [[341, null]], "The Labeled Faces in the Wild face recognition dataset": [[341, "the-labeled-faces-in-the-wild-face-recognition-dataset"]], "Forest covertypes": [[341, "forest-covertypes"]], "RCV1 dataset": [[341, "rcv1-dataset"]], "Kddcup 99 dataset": [[341, "kddcup-99-dataset"]], "California Housing dataset": [[341, "california-housing-dataset"]], "Species distribution dataset": [[341, "species-distribution-dataset"]], "Generated datasets": [[342, "generated-datasets"]], "Generators for classification and clustering": [[342, "generators-for-classification-and-clustering"]], "Single label": [[342, "single-label"]], "Multilabel": [[342, "multilabel"]], "Generators for regression": [[342, "generators-for-regression"]], "Generators for manifold learning": [[342, "generators-for-manifold-learning"]], "Generators for decomposition": [[342, "generators-for-decomposition"]], "Toy datasets": [[343, "toy-datasets"]], "Iris plants dataset": [[343, "iris-plants-dataset"]], "Diabetes dataset": [[343, "diabetes-dataset"], [986, null]], "Optical recognition of handwritten digits dataset": [[343, "optical-recognition-of-handwritten-digits-dataset"]], "Linnerrud dataset": [[343, "linnerrud-dataset"]], "Wine recognition dataset": [[343, "wine-recognition-dataset"]], "Breast cancer wisconsin (diagnostic) dataset": [[343, "breast-cancer-wisconsin-diagnostic-dataset"]], "Installing the development version of scikit-learn": [[344, "installing-the-development-version-of-scikit-learn"]], "Installing nightly builds": [[344, "installing-nightly-builds"]], "Building from source": [[344, "building-from-source"]], "Dependencies": [[344, "dependencies"]], "Runtime dependencies": [[344, "runtime-dependencies"]], "Build dependencies": [[344, "build-dependencies"]], "Test dependencies": [[344, "test-dependencies"]], "Building a specific version from a tag": [[344, "building-a-specific-version-from-a-tag"]], "Editable mode": [[344, "editable-mode"]], "Building with Meson": [[344, "building-with-meson"]], "Simplest way to build with Meson": [[344, "simplest-way-to-build-with-meson"]], "More advanced way to build with Meson": [[344, "more-advanced-way-to-build-with-meson"]], "Platform-specific instructions": [[344, "platform-specific-instructions"]], "Windows": [[344, "windows"]], "macOS": [[344, "macos"]], "macOS compilers from conda-forge": [[344, "macos-compilers-from-conda-forge"]], "macOS compilers from Homebrew": [[344, "macos-compilers-from-homebrew"]], "Linux": [[344, "linux"]], "Linux compilers from the system": [[344, "linux-compilers-from-the-system"]], "Linux compilers from conda-forge": [[344, "linux-compilers-from-conda-forge"]], "FreeBSD": [[344, "freebsd"]], "Alternative compilers": [[344, "alternative-compilers"]], "Parallel builds": [[344, "parallel-builds"]], "Bug triaging and issue curation": [[345, "bug-triaging-and-issue-curation"]], "Working on issues to improve them": [[345, "working-on-issues-to-improve-them"]], "Fruitful discussions": [[345, null]], "Working on PRs to help review": [[345, "working-on-prs-to-help-review"]], "Triaging operations for members of the core and contributor experience teams": [[345, "triaging-operations-for-members-of-the-core-and-contributor-experience-teams"]], "Closing issues: a tough call": [[345, null]], "A typical workflow for triaging issues": [[345, "a-typical-workflow-for-triaging-issues"]], "Contributing": [[346, "contributing"], [358, "contributing"]], "Our community, our values": [[346, null]], "Ways to contribute": [[346, "ways-to-contribute"]], "Contributing to related projects": [[346, null]], "Submitting a bug report or a feature request": [[346, "submitting-a-bug-report-or-a-feature-request"]], "How to make a good bug report": [[346, "how-to-make-a-good-bug-report"]], "Contributing code": [[346, "contributing-code"]], "Video resources": [[346, "video-resources"]], "How to contribute": [[346, "how-to-contribute"]], "Learning git:": [[346, null]], "Pull request checklist": [[346, "pull-request-checklist"]], "Continuous Integration (CI)": [[346, "continuous-integration-ci"]], "Stalled pull requests": [[346, "stalled-pull-requests"]], "Stalled and Unclaimed Issues": [[346, "stalled-and-unclaimed-issues"]], "Issues for New Contributors": [[346, "issues-for-new-contributors"]], "good first issue tag": [[346, null]], "Easy tag": [[346, null]], "help wanted tag": [[346, null]], "Documentation": [[346, "documentation"], [995, "documentation"]], "Building the documentation": [[346, "building-the-documentation"]], "Generated documentation on GitHub Actions": [[346, "generated-documentation-on-github-actions"]], "Testing and improving test coverage": [[346, "testing-and-improving-test-coverage"]], "Writing matplotlib related tests": [[346, "writing-matplotlib-related-tests"]], "Workflow to improve test coverage": [[346, "workflow-to-improve-test-coverage"]], "Monitoring performance": [[346, "monitoring-performance"]], "Issue Tracker Tags": [[346, "issue-tracker-tags"]], "Maintaining backwards compatibility": [[346, "maintaining-backwards-compatibility"]], "Deprecation": [[346, "deprecation"]], "Change the default value of a parameter": [[346, "change-the-default-value-of-a-parameter"]], "Code Review Guidelines": [[346, "code-review-guidelines"]], "Communication Guidelines": [[346, "communication-guidelines"]], "Reading the existing code base": [[346, "reading-the-existing-code-base"]], "Cython Best Practices, Conventions and Knowledge": [[347, "cython-best-practices-conventions-and-knowledge"]], "Tips for developing with Cython in scikit-learn": [[347, "tips-for-developing-with-cython-in-scikit-learn"]], "Tips to ease development": [[347, "tips-to-ease-development"]], "Tips for performance": [[347, "tips-for-performance"]], "Using OpenMP": [[347, "using-openmp"]], "Developing scikit-learn estimators": [[348, "developing-scikit-learn-estimators"]], "APIs of scikit-learn objects": [[348, "apis-of-scikit-learn-objects"]], "Different objects": [[348, "different-objects"]], "Instantiation": [[348, "instantiation"]], "Fitting": [[348, "fitting"]], "Estimated Attributes": [[348, "estimated-attributes"]], "Optional Arguments": [[348, "optional-arguments"]], "Universal attributes": [[348, "universal-attributes"]], "Rolling your own estimator": [[348, "rolling-your-own-estimator"]], "Project template:": [[348, null]], "BaseEstimator and mixins:": [[348, null]], "get_params and set_params": [[348, "get-params-and-set-params"]], "Parameters and init": [[348, "parameters-and-init"]], "Cloning": [[348, "cloning"]], "Pipeline compatibility": [[348, "pipeline-compatibility"]], "Estimator types": [[348, "estimator-types"]], "Specific models": [[348, "specific-models"]], "Estimator Tags": [[348, "estimator-tags"]], "Developer API for set_output": [[348, "developer-api-for-set-output"]], "Developer API for check_is_fitted": [[348, "developer-api-for-check-is-fitted"]], "Developer API for HTML representation": [[348, "developer-api-for-html-representation"]], "Coding guidelines": [[348, "coding-guidelines"]], "Input validation": [[348, "input-validation"]], "Random Numbers": [[348, "random-numbers"]], "Numerical assertions in tests": [[348, "numerical-assertions-in-tests"]], "Developer\u2019s Guide": [[349, "developer-s-guide"]], "Maintainer / core-developer information": [[350, "maintainer-core-developer-information"]], "Releasing": [[350, "releasing"]], "Before a release": [[350, "before-a-release"]], "Preparing a release PR": [[350, "preparing-a-release-pr"]], "Major version release": [[350, "major-version-release"]], "Minor version release (also known as bug-fix release)": [[350, "minor-version-release-also-known-as-bug-fix-release"]], "Making a release": [[350, "making-a-release"]], "Release checklist": [[350, "release-checklist"]], "Merging Pull Requests": [[350, "merging-pull-requests"]], "The scikit-learn.org web site": [[350, "the-scikit-learn-org-web-site"]], "Experimental features": [[350, "experimental-features"]], "Crafting a minimal reproducer for scikit-learn": [[351, "crafting-a-minimal-reproducer-for-scikit-learn"]], "Good practices": [[351, "good-practices"]], "Provide a failing code example with minimal comments": [[351, "provide-a-failing-code-example-with-minimal-comments"]], "Boil down your script to something as small as possible": [[351, "boil-down-your-script-to-something-as-small-as-possible"]], "DO NOT report your data unless it is extremely necessary": [[351, "do-not-report-your-data-unless-it-is-extremely-necessary"]], "Use markdown formatting": [[351, "use-markdown-formatting"]], "Synthetic dataset": [[351, "synthetic-dataset"]], "NumPy": [[351, "numpy"]], "Pandas": [[351, "pandas"]], "make_regression": [[351, "make-regression"]], "make_classification": [[351, "make-classification"]], "make_blobs": [[351, "make-blobs"]], "How to optimize for speed": [[352, "how-to-optimize-for-speed"]], "Python, Cython or C/C++?": [[352, "python-cython-or-c-c"]], "Profiling Python code": [[352, "profiling-python-code"]], "Memory usage profiling": [[352, "memory-usage-profiling"]], "Using Cython": [[352, "using-cython"]], "Profiling compiled extensions": [[352, "profiling-compiled-extensions"]], "Using yep and gperftools": [[352, "using-yep-and-gperftools"]], "Using a debugger, gdb": [[352, "using-a-debugger-gdb"]], "Using gprof": [[352, "using-gprof"]], "Using valgrind / callgrind / kcachegrind": [[352, "using-valgrind-callgrind-kcachegrind"]], "kcachegrind": [[352, "kcachegrind"]], "Multi-core parallelism using joblib.Parallel": [[352, "multi-core-parallelism-using-joblib-parallel"]], "A simple algorithmic trick: warm restarts": [[352, "a-simple-algorithmic-trick-warm-restarts"]], "Developing with the Plotting API": [[353, "developing-with-the-plotting-api"]], "Plotting API Overview": [[353, "plotting-api-overview"]], "Plotting with Multiple Axes": [[353, "plotting-with-multiple-axes"]], "Developers\u2019 Tips and Tricks": [[354, "developers-tips-and-tricks"]], "Productivity and sanity-preserving tips": [[354, "productivity-and-sanity-preserving-tips"]], "Folding and unfolding outdated diffs on pull requests": [[354, "folding-and-unfolding-outdated-diffs-on-pull-requests"]], "Checking out pull requests as remote-tracking branches": [[354, "checking-out-pull-requests-as-remote-tracking-branches"]], "Display code coverage in pull requests": [[354, "display-code-coverage-in-pull-requests"]], "Useful pytest aliases and flags": [[354, "useful-pytest-aliases-and-flags"]], "Standard replies for reviewing": [[354, "standard-replies-for-reviewing"]], "Debugging memory errors in Cython with valgrind": [[354, "debugging-memory-errors-in-cython-with-valgrind"]], "Building and testing for the ARM64 platform on a x86_64 machine": [[354, "building-and-testing-for-the-arm64-platform-on-a-x86-64-machine"]], "Utilities for Developers": [[355, "utilities-for-developers"]], "Validation Tools": [[355, "validation-tools"]], "Efficient Linear Algebra & Array Operations": [[355, "efficient-linear-algebra-array-operations"]], "Efficient Random Sampling": [[355, "efficient-random-sampling"]], "Efficient Routines for Sparse Matrices": [[355, "efficient-routines-for-sparse-matrices"]], "Graph Routines": [[355, "graph-routines"]], "Testing Functions": [[355, "testing-functions"]], "Multiclass and multilabel utility function": [[355, "multiclass-and-multilabel-utility-function"]], "Helper Functions": [[355, "helper-functions"]], "Hash Functions": [[355, "hash-functions"]], "Warnings and Exceptions": [[355, "warnings-and-exceptions"]], "Dispatching": [[356, "dispatching"]], "Frequently Asked Questions": [[358, "frequently-asked-questions"]], "Table of Contents": [[358, "table-of-contents"]], "About the project": [[358, "about-the-project"]], "What is the project name (a lot of people get it wrong)?": [[358, "what-is-the-project-name-a-lot-of-people-get-it-wrong"]], "How do you pronounce the project name?": [[358, "how-do-you-pronounce-the-project-name"]], "Why scikit?": [[358, "why-scikit"]], "Do you support PyPy?": [[358, "do-you-support-pypy"]], "Implementation decisions": [[358, "implementation-decisions"]], "Why is there no support for deep or reinforcement learning? Will there be such support in the future?": [[358, "why-is-there-no-support-for-deep-or-reinforcement-learning-will-there-be-such-support-in-the-future"]], "Will you add graphical models or sequence prediction to scikit-learn?": [[358, "will-you-add-graphical-models-or-sequence-prediction-to-scikit-learn"]], "Why did you remove HMMs from scikit-learn?": [[358, "why-did-you-remove-hmms-from-scikit-learn"]], "Will you add GPU support?": [[358, "will-you-add-gpu-support"]], "Why do categorical variables need preprocessing in scikit-learn, compared to other tools?": [[358, "why-do-categorical-variables-need-preprocessing-in-scikit-learn-compared-to-other-tools"]], "Why does scikit-learn not directly work with, for example, pandas.DataFrame?": [[358, "why-does-scikit-learn-not-directly-work-with-for-example-pandas-dataframe"]], "Do you plan to implement transform for target y in a pipeline?": [[358, "do-you-plan-to-implement-transform-for-target-y-in-a-pipeline"]], "Why are there so many different estimators for linear models?": [[358, "why-are-there-so-many-different-estimators-for-linear-models"]], "How can I contribute to scikit-learn?": [[358, "how-can-i-contribute-to-scikit-learn"]], "Why is my pull request not getting any attention?": [[358, "why-is-my-pull-request-not-getting-any-attention"]], "What are the inclusion criteria for new algorithms?": [[358, "what-are-the-inclusion-criteria-for-new-algorithms"]], "Why are you so selective on what algorithms you include in scikit-learn?": [[358, "why-are-you-so-selective-on-what-algorithms-you-include-in-scikit-learn"]], "Using scikit-learn": [[358, "using-scikit-learn"]], "What\u2019s the best way to get help on scikit-learn usage?": [[358, "what-s-the-best-way-to-get-help-on-scikit-learn-usage"]], "How should I save, export or deploy estimators for production?": [[358, "how-should-i-save-export-or-deploy-estimators-for-production"]], "How can I create a bunch object?": [[358, "how-can-i-create-a-bunch-object"]], "How can I load my own datasets into a format usable by scikit-learn?": [[358, "how-can-i-load-my-own-datasets-into-a-format-usable-by-scikit-learn"]], "How do I deal with string data (or trees, graphs\u2026)?": [[358, "how-do-i-deal-with-string-data-or-trees-graphs"]], "Why do I sometimes get a crash/freeze with n_jobs > 1 under OSX or Linux?": [[358, "why-do-i-sometimes-get-a-crash-freeze-with-n-jobs-1-under-osx-or-linux"]], "Why does my job use more cores than specified with n_jobs?": [[358, "why-does-my-job-use-more-cores-than-specified-with-n-jobs"]], "How do I set a random_state for an entire execution?": [[358, "how-do-i-set-a-random-state-for-an-entire-execution"]], "Getting Started": [[359, "getting-started"]], "Fitting and predicting: estimator basics": [[359, "fitting-and-predicting-estimator-basics"]], "Transformers and pre-processors": [[359, "transformers-and-pre-processors"]], "Pipelines: chaining pre-processors and estimators": [[359, "pipelines-chaining-pre-processors-and-estimators"]], "Model evaluation": [[359, "model-evaluation"]], "Automatic parameter searches": [[359, "automatic-parameter-searches"]], "Next steps": [[359, "next-steps"]], "Glossary of Common Terms and API Elements": [[360, "glossary-of-common-terms-and-api-elements"]], "General Concepts": [[360, "general-concepts"]], "Class APIs and Estimator Types": [[360, "class-apis-and-estimator-types"]], "Target Types": [[360, "target-types"]], "Methods": [[360, "methods"]], "Parameters": [[360, "parameters"], [381, "parameters"]], "Attributes": [[360, "attributes"]], "Data and sample properties": [[360, "data-and-sample-properties"]], "Scikit-learn governance and decision-making": [[361, "scikit-learn-governance-and-decision-making"]], "Roles And Responsibilities": [[361, "roles-and-responsibilities"]], "Contributors": [[361, "contributors"]], "Core Contributors": [[361, "core-contributors"]], "Communication team": [[361, "communication-team"]], "Documentation team": [[361, "documentation-team"]], "Maintainers": [[361, "maintainers"]], "Technical Committee": [[361, "technical-committee"]], "Decision Making Process": [[361, "decision-making-process"]], "Governance Model Changes": [[361, "governance-model-changes"]], "Enhancement proposals (SLEPs)": [[361, "enhancement-proposals-sleps"]], "Installing scikit-learn": [[364, "installing-scikit-learn"]], "Installing the latest release": [[364, "installing-the-latest-release"]], "Third party distributions of scikit-learn": [[364, "third-party-distributions-of-scikit-learn"]], "Alpine Linux": [[364, "alpine-linux"]], "Arch Linux": [[364, "arch-linux"]], "Debian/Ubuntu": [[364, "debian-ubuntu"]], "Fedora": [[364, "fedora"]], "NetBSD": [[364, "netbsd"]], "MacPorts for Mac OSX": [[364, "macports-for-mac-osx"]], "Anaconda and Enthought Deployment Manager for all supported platforms": [[364, "anaconda-and-enthought-deployment-manager-for-all-supported-platforms"]], "Intel Extension for Scikit-learn": [[364, "intel-extension-for-scikit-learn"]], "WinPython for Windows": [[364, "winpython-for-windows"]], "Troubleshooting": [[364, "troubleshooting"]], "Error caused by file path length limit on Windows": [[364, "error-caused-by-file-path-length-limit-on-windows"]], "Usage Examples": [[365, "usage-examples"]], "Weighted scoring and fitting": [[365, "weighted-scoring-and-fitting"]], "Weighted scoring and unweighted fitting": [[365, "weighted-scoring-and-unweighted-fitting"]], "Unweighted feature selection": [[365, "unweighted-feature-selection"]], "Different scoring and fitting weights": [[365, "different-scoring-and-fitting-weights"]], "API Interface": [[365, "api-interface"]], "Metadata Routing Support Status": [[365, "metadata-routing-support-status"]], "Model persistence": [[368, "model-persistence"]], "Python specific serialization": [[368, "python-specific-serialization"]], "Security & maintainability limitations": [[368, "security-maintainability-limitations"]], "A more secure format: skops": [[368, "a-more-secure-format-skops"]], "Interoperable formats": [[368, "interoperable-formats"]], "Model selection and evaluation": [[369, "model-selection-and-evaluation"]], "Array API support (experimental)": [[370, "array-api-support-experimental"]], "Example usage": [[370, "example-usage"]], "PyTorch Support": [[370, "pytorch-support"]], "Support for Array API-compatible inputs": [[370, "support-for-array-api-compatible-inputs"]], "Metrics": [[370, "metrics"]], "Tools": [[370, "tools"]], "Common estimator checks": [[370, "common-estimator-checks"]], "Note on MPS device support": [[370, "note-on-mps-device-support"]], "Spectral Co-Clustering": [[371, "spectral-co-clustering"]], "Mathematical formulation": [[371, "mathematical-formulation"], [371, "id3"], [381, "mathematical-formulation"], [957, "mathematical-formulation"], [968, "mathematical-formulation"], [969, "mathematical-formulation"], [970, "mathematical-formulation"]], "Spectral Biclustering": [[371, "spectral-biclustering"]], "Biclustering evaluation": [[371, "biclustering-evaluation"]], "Probability calibration": [[372, "probability-calibration"]], "Calibrating a classifier": [[372, "calibrating-a-classifier"]], "Usage": [[372, "usage"], [375, "usage"], [375, "id1"], [381, "usage"], [381, "id22"], [381, "id23"], [381, "id25"], [381, "id33"], [950, "usage"]], "Sigmoid": [[372, "sigmoid"]], "Isotonic": [[372, "isotonic"]], "Multiclass support": [[372, "multiclass-support"]], "API Reference": [[373, "api-reference"]], "sklearn: Settings and information tools": [[373, "module-sklearn"]], "sklearn.base: Base classes and utility functions": [[373, "module-sklearn.base"]], "Base classes": [[373, "base-classes"]], "Functions": [[373, "functions"], [373, "id1"]], "sklearn.calibration: Probability Calibration": [[373, "module-sklearn.calibration"]], "sklearn.cluster: Clustering": [[373, "module-sklearn.cluster"]], "Classes": [[373, "classes"]], "sklearn.compose: Composite Estimators": [[373, "module-sklearn.compose"]], "sklearn.covariance: Covariance Estimators": [[373, "module-sklearn.covariance"]], "sklearn.cross_decomposition: Cross decomposition": [[373, "module-sklearn.cross_decomposition"]], "sklearn.datasets: Datasets": [[373, "module-sklearn.datasets"]], "Loaders": [[373, "loaders"]], "Samples generator": [[373, "samples-generator"]], "sklearn.decomposition: Matrix Decomposition": [[373, "module-sklearn.decomposition"]], "sklearn.discriminant_analysis: Discriminant Analysis": [[373, "module-sklearn.discriminant_analysis"]], "sklearn.dummy: Dummy estimators": [[373, "module-sklearn.dummy"]], "sklearn.ensemble: Ensemble Methods": [[373, "module-sklearn.ensemble"]], "sklearn.exceptions: Exceptions and warnings": [[373, "module-sklearn.exceptions"]], "sklearn.experimental: Experimental": [[373, "module-sklearn.experimental"]], "sklearn.feature_extraction: Feature Extraction": [[373, "module-sklearn.feature_extraction"]], "From images": [[373, "module-sklearn.feature_extraction.image"]], "From text": [[373, "module-sklearn.feature_extraction.text"]], "sklearn.feature_selection: Feature Selection": [[373, "module-sklearn.feature_selection"]], "sklearn.gaussian_process: Gaussian Processes": [[373, "module-sklearn.gaussian_process"]], "Kernels": [[373, "module-sklearn.gaussian_process.kernels"]], "sklearn.impute: Impute": [[373, "module-sklearn.impute"]], "sklearn.inspection: Inspection": [[373, "module-sklearn.inspection"]], "sklearn.isotonic: Isotonic regression": [[373, "module-sklearn.isotonic"]], "sklearn.kernel_approximation: Kernel Approximation": [[373, "module-sklearn.kernel_approximation"]], "sklearn.kernel_ridge: Kernel Ridge Regression": [[373, "module-sklearn.kernel_ridge"]], "sklearn.linear_model: Linear Models": [[373, "module-sklearn.linear_model"]], "Linear classifiers": [[373, "linear-classifiers"]], "Classical linear regressors": [[373, "classical-linear-regressors"]], "Regressors with variable selection": [[373, "regressors-with-variable-selection"]], "Bayesian regressors": [[373, "bayesian-regressors"]], "Multi-task linear regressors with variable selection": [[373, "multi-task-linear-regressors-with-variable-selection"]], "Outlier-robust regressors": [[373, "outlier-robust-regressors"]], "Generalized linear models (GLM) for regression": [[373, "generalized-linear-models-glm-for-regression"]], "sklearn.manifold: Manifold Learning": [[373, "module-sklearn.manifold"]], "sklearn.metrics: Metrics": [[373, "sklearn-metrics-metrics"]], "Model Selection Interface": [[373, "model-selection-interface"]], "Classification metrics": [[373, "classification-metrics"], [954, "classification-metrics"]], "Regression metrics": [[373, "regression-metrics"], [954, "regression-metrics"]], "Multilabel ranking metrics": [[373, "multilabel-ranking-metrics"], [954, "multilabel-ranking-metrics"]], "Clustering metrics": [[373, "clustering-metrics"], [954, "clustering-metrics"]], "Biclustering metrics": [[373, "biclustering-metrics"]], "Distance metrics": [[373, "distance-metrics"]], "Pairwise metrics": [[373, "pairwise-metrics"]], "sklearn.mixture: Gaussian Mixture Models": [[373, "module-sklearn.mixture"]], "sklearn.model_selection: Model Selection": [[373, "module-sklearn.model_selection"]], "Splitter Classes": [[373, "splitter-classes"]], "Splitter Functions": [[373, "splitter-functions"]], "Hyper-parameter optimizers": [[373, "hyper-parameter-optimizers"]], "Model validation": [[373, "model-validation"]], "sklearn.multiclass: Multiclass classification": [[373, "module-sklearn.multiclass"]], "Multiclass classification strategies": [[373, "multiclass-classification-strategies"]], "sklearn.multioutput: Multioutput regression and classification": [[373, "module-sklearn.multioutput"]], "sklearn.naive_bayes: Naive Bayes": [[373, "module-sklearn.naive_bayes"]], "sklearn.neighbors: Nearest Neighbors": [[373, "module-sklearn.neighbors"]], "sklearn.neural_network: Neural network models": [[373, "module-sklearn.neural_network"]], "sklearn.pipeline: Pipeline": [[373, "module-sklearn.pipeline"]], "sklearn.preprocessing: Preprocessing and Normalization": [[373, "module-sklearn.preprocessing"]], "sklearn.random_projection: Random projection": [[373, "module-sklearn.random_projection"]], "sklearn.semi_supervised: Semi-Supervised Learning": [[373, "module-sklearn.semi_supervised"]], "sklearn.svm: Support Vector Machines": [[373, "module-sklearn.svm"]], "sklearn.tree: Decision Trees": [[373, "module-sklearn.tree"]], "sklearn.utils: Utilities": [[373, "module-sklearn.utils"]], "Input and parameter validation": [[373, "module-sklearn.utils.validation"]], "Utilities used in meta-estimators": [[373, "module-sklearn.utils.metaestimators"]], "Utilities to handle weights based on class labels": [[373, "module-sklearn.utils.class_weight"]], "Utilities to deal with multiclass target in classifiers": [[373, "module-sklearn.utils.multiclass"]], "Utilities for optimal mathematical operations": [[373, "module-sklearn.utils.extmath"]], "Utilities to work with sparse matrices and arrays": [[373, "module-sklearn.utils.sparsefuncs"]], "Utilities to work with graphs": [[373, "module-sklearn.utils.graph"]], "Utilities for random sampling": [[373, "module-sklearn.utils.random"]], "Utilities to operate on arrays": [[373, "module-sklearn.utils.arrayfuncs"]], "Metadata routing": [[373, "module-sklearn.utils.metadata_routing"]], "Scikit-learn object discovery": [[373, "module-sklearn.utils.discovery"]], "Scikit-learn compatibility checker": [[373, "module-sklearn.utils.estimator_checks"]], "Utilities for parallel computing": [[373, "module-sklearn.utils.parallel"]], "Recently deprecated": [[373, "recently-deprecated"]], "Input data": [[374, null]], "Overview of clustering methods": [[374, "overview-of-clustering-methods"]], "K-means": [[374, "k-means"]], "Low-level parallelism": [[374, "low-level-parallelism"], [381, "low-level-parallelism"]], "Mini Batch K-Means": [[374, "mini-batch-k-means"]], "Affinity Propagation": [[374, "affinity-propagation"]], "Mean Shift": [[374, "mean-shift"]], "Spectral clustering": [[374, "spectral-clustering"]], "Different label assignment strategies": [[374, "different-label-assignment-strategies"]], "Spectral Clustering Graphs": [[374, "spectral-clustering-graphs"]], "Hierarchical clustering": [[374, "hierarchical-clustering"]], "FeatureAgglomeration": [[374, null]], "Different linkage type: Ward, complete, average, and single linkage": [[374, "different-linkage-type-ward-complete-average-and-single-linkage"]], "Visualization of cluster hierarchy": [[374, "visualization-of-cluster-hierarchy"]], "Adding connectivity constraints": [[374, "adding-connectivity-constraints"]], "Varying the metric": [[374, "varying-the-metric"]], "Bisecting K-Means": [[374, "bisecting-k-means"]], "DBSCAN": [[374, "dbscan"]], "HDBSCAN": [[374, "hdbscan"]], "Mutual Reachability Graph": [[374, "mutual-reachability-graph"]], "Hierarchical Clustering": [[374, "id11"]], "OPTICS": [[374, "optics"]], "BIRCH": [[374, "birch"]], "Clustering performance evaluation": [[374, "clustering-performance-evaluation"]], "Rand index": [[374, "rand-index"]], "Advantages:": [[374, null], [374, null], [374, null], [374, null], [374, null], [374, null], [374, null], [374, null]], "Drawbacks:": [[374, null], [374, null], [374, null], [374, null], [374, null], [374, null], [374, null], [374, null]], "Mutual Information based scores": [[374, "mutual-information-based-scores"]], "Homogeneity, completeness and V-measure": [[374, "homogeneity-completeness-and-v-measure"]], "Fowlkes-Mallows scores": [[374, "fowlkes-mallows-scores"]], "Silhouette Coefficient": [[374, "silhouette-coefficient"]], "Calinski-Harabasz Index": [[374, "calinski-harabasz-index"]], "Davies-Bouldin Index": [[374, "davies-bouldin-index"]], "Contingency Matrix": [[374, "contingency-matrix"]], "Pair Confusion Matrix": [[374, "pair-confusion-matrix"]], "Pipeline: chaining estimators": [[375, "pipeline-chaining-estimators"]], "Build a pipeline": [[375, "build-a-pipeline"]], "Access pipeline steps": [[375, "access-pipeline-steps"]], "Tracking feature names in a pipeline": [[375, "tracking-feature-names-in-a-pipeline"]], "Access to nested parameters": [[375, "access-to-nested-parameters"]], "Caching transformers: avoid repeated computation": [[375, "caching-transformers-avoid-repeated-computation"]], "Transforming target in regression": [[375, "transforming-target-in-regression"]], "FeatureUnion: composite feature spaces": [[375, "featureunion-composite-feature-spaces"]], "ColumnTransformer for heterogeneous data": [[375, "columntransformer-for-heterogeneous-data"]], "Visualizing Composite Estimators": [[375, "visualizing-composite-estimators"]], "Empirical covariance": [[376, "empirical-covariance"]], "Shrunk Covariance": [[376, "shrunk-covariance"]], "Basic shrinkage": [[376, "basic-shrinkage"]], "Ledoit-Wolf shrinkage": [[376, "ledoit-wolf-shrinkage"]], "Oracle Approximating Shrinkage": [[376, "oracle-approximating-shrinkage"]], "Sparse inverse covariance": [[376, "sparse-inverse-covariance"]], "Robust Covariance Estimation": [[376, "robust-covariance-estimation"]], "Minimum Covariance Determinant": [[376, "minimum-covariance-determinant"]], "PLSCanonical": [[377, "plscanonical"]], "PLSSVD": [[377, "plssvd"]], "PLSRegression": [[377, "plsregression"]], "Canonical Correlation Analysis": [[377, "canonical-correlation-analysis"]], "Cross-validation: evaluating estimator performance": [[378, "cross-validation-evaluating-estimator-performance"]], "Computing cross-validated metrics": [[378, "computing-cross-validated-metrics"]], "The cross_validate function and multiple metric evaluation": [[378, "the-cross-validate-function-and-multiple-metric-evaluation"]], "Obtaining predictions by cross-validation": [[378, "obtaining-predictions-by-cross-validation"]], "Cross validation iterators": [[378, "cross-validation-iterators"]], "Cross-validation iterators for i.i.d. data": [[378, "cross-validation-iterators-for-i-i-d-data"]], "K-fold": [[378, "k-fold"]], "Repeated K-Fold": [[378, "repeated-k-fold"]], "Leave One Out (LOO)": [[378, "leave-one-out-loo"]], "Leave P Out (LPO)": [[378, "leave-p-out-lpo"]], "Random permutations cross-validation a.k.a. Shuffle & Split": [[378, "random-permutations-cross-validation-a-k-a-shuffle-split"]], "Cross-validation iterators with stratification based on class labels": [[378, "cross-validation-iterators-with-stratification-based-on-class-labels"]], "Stratified k-fold": [[378, "stratified-k-fold"]], "Stratified Shuffle Split": [[378, "stratified-shuffle-split"]], "Predefined fold-splits / Validation-sets": [[378, "predefined-fold-splits-validation-sets"]], "Cross-validation iterators for grouped data": [[378, "cross-validation-iterators-for-grouped-data"]], "Group k-fold": [[378, "group-k-fold"]], "StratifiedGroupKFold": [[378, "stratifiedgroupkfold"]], "Leave One Group Out": [[378, "leave-one-group-out"]], "Leave P Groups Out": [[378, "leave-p-groups-out"]], "Group Shuffle Split": [[378, "group-shuffle-split"]], "Using cross-validation iterators to split train and test": [[378, "using-cross-validation-iterators-to-split-train-and-test"]], "Cross validation of time series data": [[378, "cross-validation-of-time-series-data"]], "Time Series Split": [[378, "time-series-split"]], "A note on shuffling": [[378, "a-note-on-shuffling"]], "Cross validation and model selection": [[378, "cross-validation-and-model-selection"]], "Decomposing signals in components (matrix factorization problems)": [[379, "decomposing-signals-in-components-matrix-factorization-problems"]], "Principal component analysis (PCA)": [[379, "principal-component-analysis-pca"]], "Exact PCA and probabilistic interpretation": [[379, "exact-pca-and-probabilistic-interpretation"]], "PCA using randomized SVD": [[379, "pca-using-randomized-svd"]], "Sparse principal components analysis (SparsePCA and MiniBatchSparsePCA)": [[379, "sparse-principal-components-analysis-sparsepca-and-minibatchsparsepca"]], "Kernel Principal Component Analysis (kPCA)": [[379, "kernel-principal-component-analysis-kpca"]], "Exact Kernel PCA": [[379, "exact-kernel-pca"]], "Choice of solver for Kernel PCA": [[379, "choice-of-solver-for-kernel-pca"]], "Truncated singular value decomposition and latent semantic analysis": [[379, "truncated-singular-value-decomposition-and-latent-semantic-analysis"]], "Dictionary Learning": [[379, "dictionary-learning"]], "Generic dictionary learning": [[379, "generic-dictionary-learning"]], "Mini-batch dictionary learning": [[379, "mini-batch-dictionary-learning"]], "Clustering for dictionary learning": [[379, null]], "Factor Analysis": [[379, "factor-analysis"]], "Independent component analysis (ICA)": [[379, "independent-component-analysis-ica"]], "Non-negative matrix factorization (NMF or NNMF)": [[379, "non-negative-matrix-factorization-nmf-or-nnmf"]], "NMF with the Frobenius norm": [[379, "nmf-with-the-frobenius-norm"]], "NMF with a beta-divergence": [[379, "nmf-with-a-beta-divergence"]], "Mini-batch Non Negative Matrix Factorization": [[379, "mini-batch-non-negative-matrix-factorization"]], "Latent Dirichlet Allocation (LDA)": [[379, "latent-dirichlet-allocation-lda"]], "Density Estimation": [[380, "density-estimation"]], "Density Estimation: Histograms": [[380, "density-estimation-histograms"]], "Ensembles: Gradient boosting, random forests, bagging, voting, stacking": [[381, "ensembles-gradient-boosting-random-forests-bagging-voting-stacking"]], "Gradient-boosted trees": [[381, "gradient-boosted-trees"]], "GradientBoostingClassifier vs HistGradientBoostingClassifier": [[381, null]], "Histogram-Based Gradient Boosting": [[381, "histogram-based-gradient-boosting"]], "Missing values support": [[381, "missing-values-support"]], "Sample weight support": [[381, "sample-weight-support"]], "Categorical Features Support": [[381, "categorical-features-support"]], "Interaction constraints": [[381, "interaction-constraints"]], "Why it\u2019s faster": [[381, "why-it-s-faster"]], "GradientBoostingClassifier and GradientBoostingRegressor": [[381, "gradientboostingclassifier-and-gradientboostingregressor"]], "Fitting additional weak-learners": [[381, "fitting-additional-weak-learners"]], "Controlling the tree size": [[381, "controlling-the-tree-size"]], "Loss Functions": [[381, "loss-functions"]], "Shrinkage via learning rate": [[381, "shrinkage-via-learning-rate"]], "Subsampling": [[381, "subsampling"]], "Interpretation with feature importance": [[381, "interpretation-with-feature-importance"]], "Random forests and other randomized tree ensembles": [[381, "random-forests-and-other-randomized-tree-ensembles"]], "Random Forests": [[381, "random-forests"]], "Extremely Randomized Trees": [[381, "extremely-randomized-trees"]], "Parallelization": [[381, "parallelization"]], "Feature importance evaluation": [[381, "feature-importance-evaluation"]], "Totally Random Trees Embedding": [[381, "totally-random-trees-embedding"]], "Bagging meta-estimator": [[381, "bagging-meta-estimator"]], "Voting Classifier": [[381, "voting-classifier"]], "Majority Class Labels (Majority/Hard Voting)": [[381, "majority-class-labels-majority-hard-voting"]], "Weighted Average Probabilities (Soft Voting)": [[381, "weighted-average-probabilities-soft-voting"]], "Voting Regressor": [[381, "voting-regressor"]], "Stacked generalization": [[381, "stacked-generalization"]], "AdaBoost": [[381, "adaboost"]], "Feature extraction": [[382, "feature-extraction"]], "Loading features from dicts": [[382, "loading-features-from-dicts"]], "Feature hashing": [[382, "feature-hashing"]], "Text feature extraction": [[382, "text-feature-extraction"]], "The Bag of Words representation": [[382, "the-bag-of-words-representation"]], "Sparsity": [[382, "sparsity"], [986, "sparsity"]], "Common Vectorizer usage": [[382, "common-vectorizer-usage"]], "Using stop words": [[382, "using-stop-words"]], "Tf\u2013idf term weighting": [[382, "tfidf-term-weighting"]], "Decoding text files": [[382, "decoding-text-files"]], "Applications and examples": [[382, "applications-and-examples"]], "Limitations of the Bag of Words representation": [[382, "limitations-of-the-bag-of-words-representation"]], "Vectorizing a large text corpus with the hashing trick": [[382, "vectorizing-a-large-text-corpus-with-the-hashing-trick"]], "Customizing the vectorizer classes": [[382, "customizing-the-vectorizer-classes"]], "Image feature extraction": [[382, "image-feature-extraction"]], "Patch extraction": [[382, "patch-extraction"]], "Connectivity graph of an image": [[382, "connectivity-graph-of-an-image"]], "Feature selection": [[383, "feature-selection"]], "Removing features with low variance": [[383, "removing-features-with-low-variance"]], "Feature selection with sparse data": [[383, null]], "Feature selection using SelectFromModel": [[383, "feature-selection-using-selectfrommodel"]], "L1-based feature selection": [[383, "l1-based-feature-selection"]], "Reference": [[383, null], [383, null]], "Tree-based feature selection": [[383, "tree-based-feature-selection"]], "Sequential Feature Selection": [[383, "sequential-feature-selection"]], "Feature selection as part of a pipeline": [[383, "feature-selection-as-part-of-a-pipeline"]], "Gaussian Processes": [[384, "gaussian-processes"]], "Gaussian Process Regression (GPR)": [[384, "gaussian-process-regression-gpr"]], "Gaussian Process Classification (GPC)": [[384, "gaussian-process-classification-gpc"]], "GPC examples": [[384, "gpc-examples"]], "Probabilistic predictions with GPC": [[384, "probabilistic-predictions-with-gpc"]], "Illustration of GPC on the XOR dataset": [[384, "illustration-of-gpc-on-the-xor-dataset"]], "Kernels for Gaussian Processes": [[384, "kernels-for-gaussian-processes"]], "Basic kernels": [[384, "basic-kernels"]], "Kernel operators": [[384, "kernel-operators"]], "Radial basis function (RBF) kernel": [[384, "radial-basis-function-rbf-kernel"]], "Rational quadratic kernel": [[384, "rational-quadratic-kernel"]], "Dot-Product kernel": [[384, "dot-product-kernel"]], "sklearn.cluster.dbscan": [[385, "sklearn-cluster-dbscan"]], "sklearn.decomposition.fastica": [[386, "sklearn-decomposition-fastica"]], "sklearn.covariance.oas": [[387, "sklearn-covariance-oas"]], "sklearn.base.BaseEstimator": [[388, "sklearn-base-baseestimator"]], "Examples using sklearn.base.BaseEstimator": [[388, "examples-using-sklearn-base-baseestimator"]], "sklearn.base.BiclusterMixin": [[389, "sklearn-base-biclustermixin"]], "sklearn.base.ClassNamePrefixFeaturesOutMixin": [[390, "sklearn-base-classnameprefixfeaturesoutmixin"]], "sklearn.base.ClassifierMixin": [[391, "sklearn-base-classifiermixin"]], "Examples using sklearn.base.ClassifierMixin": [[391, "examples-using-sklearn-base-classifiermixin"]], "sklearn.base.ClusterMixin": [[392, "sklearn-base-clustermixin"]], "sklearn.base.DensityMixin": [[393, "sklearn-base-densitymixin"]], "sklearn.base.MetaEstimatorMixin": [[394, "sklearn-base-metaestimatormixin"]], "Examples using sklearn.base.MetaEstimatorMixin": [[394, "examples-using-sklearn-base-metaestimatormixin"]], "sklearn.base.OneToOneFeatureMixin": [[395, "sklearn-base-onetoonefeaturemixin"]], "sklearn.base.OutlierMixin": [[396, "sklearn-base-outliermixin"]], "sklearn.base.RegressorMixin": [[397, "sklearn-base-regressormixin"]], "Examples using sklearn.base.RegressorMixin": [[397, "examples-using-sklearn-base-regressormixin"]], "sklearn.base.TransformerMixin": [[398, "sklearn-base-transformermixin"]], "Examples using sklearn.base.TransformerMixin": [[398, "examples-using-sklearn-base-transformermixin"]], "sklearn.base.clone": [[399, "sklearn-base-clone"]], "sklearn.base.is_classifier": [[400, "sklearn-base-is-classifier"]], "sklearn.base.is_regressor": [[401, "sklearn-base-is-regressor"]], "sklearn.calibration.CalibratedClassifierCV": [[402, "sklearn-calibration-calibratedclassifiercv"]], "Examples using sklearn.calibration.CalibratedClassifierCV": [[402, "examples-using-sklearn-calibration-calibratedclassifiercv"]], "sklearn.calibration.CalibrationDisplay": [[403, "sklearn-calibration-calibrationdisplay"]], "Examples using sklearn.calibration.CalibrationDisplay.from_estimator": [[403, "examples-using-sklearn-calibration-calibrationdisplay-from-estimator"]], "sklearn.calibration.calibration_curve": [[404, "sklearn-calibration-calibration-curve"]], "sklearn.cluster.AffinityPropagation": [[405, "sklearn-cluster-affinitypropagation"]], "Examples using sklearn.cluster.AffinityPropagation": [[405, "examples-using-sklearn-cluster-affinitypropagation"]], "sklearn.cluster.AgglomerativeClustering": [[406, "sklearn-cluster-agglomerativeclustering"]], "Examples using sklearn.cluster.AgglomerativeClustering": [[406, "examples-using-sklearn-cluster-agglomerativeclustering"]], "sklearn.cluster.Birch": [[407, "sklearn-cluster-birch"]], "Examples using sklearn.cluster.Birch": [[407, "examples-using-sklearn-cluster-birch"]], "sklearn.cluster.BisectingKMeans": [[408, "sklearn-cluster-bisectingkmeans"]], "Examples using sklearn.cluster.BisectingKMeans": [[408, "examples-using-sklearn-cluster-bisectingkmeans"]], "sklearn.cluster.DBSCAN": [[409, "sklearn-cluster-dbscan"]], "Examples using sklearn.cluster.DBSCAN": [[409, "examples-using-sklearn-cluster-dbscan"]], "sklearn.cluster.FeatureAgglomeration": [[410, "sklearn-cluster-featureagglomeration"]], "Examples using sklearn.cluster.FeatureAgglomeration": [[410, "examples-using-sklearn-cluster-featureagglomeration"]], "sklearn.cluster.HDBSCAN": [[411, "sklearn-cluster-hdbscan"]], "Examples using sklearn.cluster.HDBSCAN": [[411, "examples-using-sklearn-cluster-hdbscan"]], "sklearn.cluster.KMeans": [[412, "sklearn-cluster-kmeans"]], "Examples using sklearn.cluster.KMeans": [[412, "examples-using-sklearn-cluster-kmeans"]], "sklearn.cluster.MeanShift": [[413, "sklearn-cluster-meanshift"]], "Examples using sklearn.cluster.MeanShift": [[413, "examples-using-sklearn-cluster-meanshift"]], "sklearn.cluster.MiniBatchKMeans": [[414, "sklearn-cluster-minibatchkmeans"]], "Examples using sklearn.cluster.MiniBatchKMeans": [[414, "examples-using-sklearn-cluster-minibatchkmeans"]], "sklearn.cluster.OPTICS": [[415, "sklearn-cluster-optics"]], "Examples using sklearn.cluster.OPTICS": [[415, "examples-using-sklearn-cluster-optics"]], "sklearn.cluster.SpectralBiclustering": [[416, "sklearn-cluster-spectralbiclustering"]], "Examples using sklearn.cluster.SpectralBiclustering": [[416, "examples-using-sklearn-cluster-spectralbiclustering"]], "sklearn.cluster.SpectralClustering": [[417, "sklearn-cluster-spectralclustering"]], "Examples using sklearn.cluster.SpectralClustering": [[417, "examples-using-sklearn-cluster-spectralclustering"]], "sklearn.cluster.SpectralCoclustering": [[418, "sklearn-cluster-spectralcoclustering"]], "Examples using sklearn.cluster.SpectralCoclustering": [[418, "examples-using-sklearn-cluster-spectralcoclustering"]], "sklearn.cluster.affinity_propagation": [[419, "sklearn-cluster-affinity-propagation"]], "Examples using sklearn.cluster.affinity_propagation": [[419, "examples-using-sklearn-cluster-affinity-propagation"]], "sklearn.cluster.cluster_optics_dbscan": [[420, "sklearn-cluster-cluster-optics-dbscan"]], "Examples using sklearn.cluster.cluster_optics_dbscan": [[420, "examples-using-sklearn-cluster-cluster-optics-dbscan"]], "sklearn.cluster.cluster_optics_xi": [[421, "sklearn-cluster-cluster-optics-xi"]], "sklearn.cluster.compute_optics_graph": [[422, "sklearn-cluster-compute-optics-graph"]], "sklearn.cluster.estimate_bandwidth": [[423, "sklearn-cluster-estimate-bandwidth"]], "Examples using sklearn.cluster.estimate_bandwidth": [[423, "examples-using-sklearn-cluster-estimate-bandwidth"]], "sklearn.cluster.k_means": [[424, "sklearn-cluster-k-means"]], "sklearn.cluster.kmeans_plusplus": [[425, "sklearn-cluster-kmeans-plusplus"]], "Examples using sklearn.cluster.kmeans_plusplus": [[425, "examples-using-sklearn-cluster-kmeans-plusplus"]], "sklearn.cluster.mean_shift": [[426, "sklearn-cluster-mean-shift"]], "sklearn.cluster.spectral_clustering": [[427, "sklearn-cluster-spectral-clustering"]], "Examples using sklearn.cluster.spectral_clustering": [[427, "examples-using-sklearn-cluster-spectral-clustering"]], "sklearn.cluster.ward_tree": [[428, "sklearn-cluster-ward-tree"]], "sklearn.compose.ColumnTransformer": [[429, "sklearn-compose-columntransformer"]], "Examples using sklearn.compose.ColumnTransformer": [[429, "examples-using-sklearn-compose-columntransformer"]], "sklearn.compose.TransformedTargetRegressor": [[430, "sklearn-compose-transformedtargetregressor"]], "Examples using sklearn.compose.TransformedTargetRegressor": [[430, "examples-using-sklearn-compose-transformedtargetregressor"]], "sklearn.compose.make_column_selector": [[431, "sklearn-compose-make-column-selector"]], "Examples using sklearn.compose.make_column_selector": [[431, "examples-using-sklearn-compose-make-column-selector"]], "sklearn.compose.make_column_transformer": [[432, "sklearn-compose-make-column-transformer"]], "Examples using sklearn.compose.make_column_transformer": [[432, "examples-using-sklearn-compose-make-column-transformer"]], "sklearn.config_context": [[433, "sklearn-config-context"]], "Examples using sklearn.config_context": [[433, "examples-using-sklearn-config-context"]], "sklearn.covariance.EllipticEnvelope": [[434, "sklearn-covariance-ellipticenvelope"]], "Examples using sklearn.covariance.EllipticEnvelope": [[434, "examples-using-sklearn-covariance-ellipticenvelope"]], "sklearn.covariance.EmpiricalCovariance": [[435, "sklearn-covariance-empiricalcovariance"]], "Examples using sklearn.covariance.EmpiricalCovariance": [[435, "examples-using-sklearn-covariance-empiricalcovariance"]], "sklearn.covariance.GraphicalLasso": [[436, "sklearn-covariance-graphicallasso"]], "sklearn.covariance.GraphicalLassoCV": [[437, "sklearn-covariance-graphicallassocv"]], "Examples using sklearn.covariance.GraphicalLassoCV": [[437, "examples-using-sklearn-covariance-graphicallassocv"]], "sklearn.covariance.LedoitWolf": [[438, "sklearn-covariance-ledoitwolf"]], "Examples using sklearn.covariance.LedoitWolf": [[438, "examples-using-sklearn-covariance-ledoitwolf"]], "sklearn.covariance.MinCovDet": [[439, "sklearn-covariance-mincovdet"]], "Examples using sklearn.covariance.MinCovDet": [[439, "examples-using-sklearn-covariance-mincovdet"]], "sklearn.covariance.OAS": [[440, "sklearn-covariance-oas"]], "Examples using sklearn.covariance.OAS": [[440, "examples-using-sklearn-covariance-oas"]], "sklearn.covariance.ShrunkCovariance": [[441, "sklearn-covariance-shrunkcovariance"]], "Examples using sklearn.covariance.ShrunkCovariance": [[441, "examples-using-sklearn-covariance-shrunkcovariance"]], "sklearn.covariance.empirical_covariance": [[442, "sklearn-covariance-empirical-covariance"]], "Examples using sklearn.covariance.empirical_covariance": [[442, "examples-using-sklearn-covariance-empirical-covariance"]], "sklearn.covariance.graphical_lasso": [[443, "sklearn-covariance-graphical-lasso"]], "sklearn.covariance.ledoit_wolf": [[444, "sklearn-covariance-ledoit-wolf"]], "Examples using sklearn.covariance.ledoit_wolf": [[444, "examples-using-sklearn-covariance-ledoit-wolf"]], "sklearn.covariance.ledoit_wolf_shrinkage": [[445, "sklearn-covariance-ledoit-wolf-shrinkage"]], "sklearn.covariance.shrunk_covariance": [[446, "sklearn-covariance-shrunk-covariance"]], "sklearn.cross_decomposition.CCA": [[447, "sklearn-cross-decomposition-cca"]], "Examples using sklearn.cross_decomposition.CCA": [[447, "examples-using-sklearn-cross-decomposition-cca"]], "sklearn.cross_decomposition.PLSCanonical": [[448, "sklearn-cross-decomposition-plscanonical"]], "Examples using sklearn.cross_decomposition.PLSCanonical": [[448, "examples-using-sklearn-cross-decomposition-plscanonical"]], "sklearn.cross_decomposition.PLSRegression": [[449, "sklearn-cross-decomposition-plsregression"]], "Examples using sklearn.cross_decomposition.PLSRegression": [[449, "examples-using-sklearn-cross-decomposition-plsregression"]], "sklearn.cross_decomposition.PLSSVD": [[450, "sklearn-cross-decomposition-plssvd"]], "sklearn.datasets.clear_data_home": [[451, "sklearn-datasets-clear-data-home"]], "sklearn.datasets.dump_svmlight_file": [[452, "sklearn-datasets-dump-svmlight-file"]], "Examples using sklearn.datasets.dump_svmlight_file": [[452, "examples-using-sklearn-datasets-dump-svmlight-file"]], "sklearn.datasets.fetch_20newsgroups": [[453, "sklearn-datasets-fetch-20newsgroups"]], "Examples using sklearn.datasets.fetch_20newsgroups": [[453, "examples-using-sklearn-datasets-fetch-20newsgroups"]], "sklearn.datasets.fetch_20newsgroups_vectorized": [[454, "sklearn-datasets-fetch-20newsgroups-vectorized"]], "Examples using sklearn.datasets.fetch_20newsgroups_vectorized": [[454, "examples-using-sklearn-datasets-fetch-20newsgroups-vectorized"]], "sklearn.datasets.fetch_california_housing": [[455, "sklearn-datasets-fetch-california-housing"]], "Examples using sklearn.datasets.fetch_california_housing": [[455, "examples-using-sklearn-datasets-fetch-california-housing"]], "sklearn.datasets.fetch_covtype": [[456, "sklearn-datasets-fetch-covtype"]], "Examples using sklearn.datasets.fetch_covtype": [[456, "examples-using-sklearn-datasets-fetch-covtype"]], "sklearn.datasets.fetch_kddcup99": [[457, "sklearn-datasets-fetch-kddcup99"]], "Examples using sklearn.datasets.fetch_kddcup99": [[457, "examples-using-sklearn-datasets-fetch-kddcup99"]], "sklearn.datasets.fetch_lfw_pairs": [[458, "sklearn-datasets-fetch-lfw-pairs"]], "sklearn.datasets.fetch_lfw_people": [[459, "sklearn-datasets-fetch-lfw-people"]], "Examples using sklearn.datasets.fetch_lfw_people": [[459, "examples-using-sklearn-datasets-fetch-lfw-people"]], "sklearn.datasets.fetch_olivetti_faces": [[460, "sklearn-datasets-fetch-olivetti-faces"]], "Examples using sklearn.datasets.fetch_olivetti_faces": [[460, "examples-using-sklearn-datasets-fetch-olivetti-faces"]], "sklearn.datasets.fetch_openml": [[461, "sklearn-datasets-fetch-openml"]], "Examples using sklearn.datasets.fetch_openml": [[461, "examples-using-sklearn-datasets-fetch-openml"]], "sklearn.datasets.fetch_rcv1": [[462, "sklearn-datasets-fetch-rcv1"]], "sklearn.datasets.fetch_species_distributions": [[463, "sklearn-datasets-fetch-species-distributions"]], "Examples using sklearn.datasets.fetch_species_distributions": [[463, "examples-using-sklearn-datasets-fetch-species-distributions"]], "sklearn.datasets.get_data_home": [[464, "sklearn-datasets-get-data-home"]], "Examples using sklearn.datasets.get_data_home": [[464, "examples-using-sklearn-datasets-get-data-home"]], "sklearn.datasets.load_breast_cancer": [[465, "sklearn-datasets-load-breast-cancer"]], "Examples using sklearn.datasets.load_breast_cancer": [[465, "examples-using-sklearn-datasets-load-breast-cancer"]], "sklearn.datasets.load_diabetes": [[466, "sklearn-datasets-load-diabetes"]], "Examples using sklearn.datasets.load_diabetes": [[466, "examples-using-sklearn-datasets-load-diabetes"]], "sklearn.datasets.load_digits": [[467, "sklearn-datasets-load-digits"]], "Examples using sklearn.datasets.load_digits": [[467, "examples-using-sklearn-datasets-load-digits"]], "sklearn.datasets.load_files": [[468, "sklearn-datasets-load-files"]], "sklearn.datasets.load_iris": [[469, "sklearn-datasets-load-iris"]], "Examples using sklearn.datasets.load_iris": [[469, "examples-using-sklearn-datasets-load-iris"]], "sklearn.datasets.load_linnerud": [[470, "sklearn-datasets-load-linnerud"]], "sklearn.datasets.load_sample_image": [[471, "sklearn-datasets-load-sample-image"]], "Examples using sklearn.datasets.load_sample_image": [[471, "examples-using-sklearn-datasets-load-sample-image"]], "sklearn.datasets.load_sample_images": [[472, "sklearn-datasets-load-sample-images"]], "sklearn.datasets.load_svmlight_file": [[473, "sklearn-datasets-load-svmlight-file"]], "sklearn.datasets.load_svmlight_files": [[474, "sklearn-datasets-load-svmlight-files"]], "sklearn.datasets.load_wine": [[475, "sklearn-datasets-load-wine"]], "Examples using sklearn.datasets.load_wine": [[475, "examples-using-sklearn-datasets-load-wine"]], "sklearn.datasets.make_biclusters": [[476, "sklearn-datasets-make-biclusters"]], "Examples using sklearn.datasets.make_biclusters": [[476, "examples-using-sklearn-datasets-make-biclusters"]], "sklearn.datasets.make_blobs": [[477, "sklearn-datasets-make-blobs"]], "Examples using sklearn.datasets.make_blobs": [[477, "examples-using-sklearn-datasets-make-blobs"]], "sklearn.datasets.make_checkerboard": [[478, "sklearn-datasets-make-checkerboard"]], "Examples using sklearn.datasets.make_checkerboard": [[478, "examples-using-sklearn-datasets-make-checkerboard"]], "sklearn.datasets.make_circles": [[479, "sklearn-datasets-make-circles"]], "Examples using sklearn.datasets.make_circles": [[479, "examples-using-sklearn-datasets-make-circles"]], "sklearn.datasets.make_classification": [[480, "sklearn-datasets-make-classification"]], "Examples using sklearn.datasets.make_classification": [[480, "examples-using-sklearn-datasets-make-classification"]], "sklearn.datasets.make_friedman1": [[481, "sklearn-datasets-make-friedman1"]], "sklearn.datasets.make_friedman2": [[482, "sklearn-datasets-make-friedman2"]], "sklearn.datasets.make_friedman3": [[483, "sklearn-datasets-make-friedman3"]], "sklearn.datasets.make_gaussian_quantiles": [[484, "sklearn-datasets-make-gaussian-quantiles"]], "Examples using sklearn.datasets.make_gaussian_quantiles": [[484, "examples-using-sklearn-datasets-make-gaussian-quantiles"]], "sklearn.datasets.make_hastie_10_2": [[485, "sklearn-datasets-make-hastie-10-2"]], "Examples using sklearn.datasets.make_hastie_10_2": [[485, "examples-using-sklearn-datasets-make-hastie-10-2"]], "sklearn.datasets.make_low_rank_matrix": [[486, "sklearn-datasets-make-low-rank-matrix"]], "Examples using sklearn.datasets.make_low_rank_matrix": [[486, "examples-using-sklearn-datasets-make-low-rank-matrix"]], "sklearn.datasets.make_moons": [[487, "sklearn-datasets-make-moons"]], "Examples using sklearn.datasets.make_moons": [[487, "examples-using-sklearn-datasets-make-moons"]], "sklearn.datasets.make_multilabel_classification": [[488, "sklearn-datasets-make-multilabel-classification"]], "Examples using sklearn.datasets.make_multilabel_classification": [[488, "examples-using-sklearn-datasets-make-multilabel-classification"]], "sklearn.datasets.make_regression": [[489, "sklearn-datasets-make-regression"]], "Examples using sklearn.datasets.make_regression": [[489, "examples-using-sklearn-datasets-make-regression"]], "sklearn.datasets.make_s_curve": [[490, "sklearn-datasets-make-s-curve"]], "Examples using sklearn.datasets.make_s_curve": [[490, "examples-using-sklearn-datasets-make-s-curve"]], "sklearn.datasets.make_sparse_coded_signal": [[491, "sklearn-datasets-make-sparse-coded-signal"]], "Examples using sklearn.datasets.make_sparse_coded_signal": [[491, "examples-using-sklearn-datasets-make-sparse-coded-signal"]], "sklearn.datasets.make_sparse_spd_matrix": [[492, "sklearn-datasets-make-sparse-spd-matrix"]], "Examples using sklearn.datasets.make_sparse_spd_matrix": [[492, "examples-using-sklearn-datasets-make-sparse-spd-matrix"]], "sklearn.datasets.make_sparse_uncorrelated": [[493, "sklearn-datasets-make-sparse-uncorrelated"]], "sklearn.datasets.make_spd_matrix": [[494, "sklearn-datasets-make-spd-matrix"]], "sklearn.datasets.make_swiss_roll": [[495, "sklearn-datasets-make-swiss-roll"]], "Examples using sklearn.datasets.make_swiss_roll": [[495, "examples-using-sklearn-datasets-make-swiss-roll"]], "sklearn.decomposition.DictionaryLearning": [[496, "sklearn-decomposition-dictionarylearning"]], "sklearn.decomposition.FactorAnalysis": [[497, "sklearn-decomposition-factoranalysis"]], "Examples using sklearn.decomposition.FactorAnalysis": [[497, "examples-using-sklearn-decomposition-factoranalysis"]], "sklearn.decomposition.FastICA": [[498, "sklearn-decomposition-fastica"]], "Examples using sklearn.decomposition.FastICA": [[498, "examples-using-sklearn-decomposition-fastica"]], "sklearn.decomposition.IncrementalPCA": [[499, "sklearn-decomposition-incrementalpca"]], "Examples using sklearn.decomposition.IncrementalPCA": [[499, "examples-using-sklearn-decomposition-incrementalpca"]], "sklearn.decomposition.KernelPCA": [[500, "sklearn-decomposition-kernelpca"]], "Examples using sklearn.decomposition.KernelPCA": [[500, "examples-using-sklearn-decomposition-kernelpca"]], "sklearn.decomposition.LatentDirichletAllocation": [[501, "sklearn-decomposition-latentdirichletallocation"]], "Examples using sklearn.decomposition.LatentDirichletAllocation": [[501, "examples-using-sklearn-decomposition-latentdirichletallocation"]], "sklearn.decomposition.MiniBatchDictionaryLearning": [[502, "sklearn-decomposition-minibatchdictionarylearning"]], "Examples using sklearn.decomposition.MiniBatchDictionaryLearning": [[502, "examples-using-sklearn-decomposition-minibatchdictionarylearning"]], "sklearn.decomposition.MiniBatchNMF": [[503, "sklearn-decomposition-minibatchnmf"]], "Examples using sklearn.decomposition.MiniBatchNMF": [[503, "examples-using-sklearn-decomposition-minibatchnmf"]], "sklearn.decomposition.MiniBatchSparsePCA": [[504, "sklearn-decomposition-minibatchsparsepca"]], "Examples using sklearn.decomposition.MiniBatchSparsePCA": [[504, "examples-using-sklearn-decomposition-minibatchsparsepca"]], "sklearn.decomposition.NMF": [[505, "sklearn-decomposition-nmf"]], "Examples using sklearn.decomposition.NMF": [[505, "examples-using-sklearn-decomposition-nmf"]], "sklearn.decomposition.PCA": [[506, "sklearn-decomposition-pca"]], "Examples using sklearn.decomposition.PCA": [[506, "examples-using-sklearn-decomposition-pca"]], "sklearn.decomposition.SparseCoder": [[507, "sklearn-decomposition-sparsecoder"]], "Examples using sklearn.decomposition.SparseCoder": [[507, "examples-using-sklearn-decomposition-sparsecoder"]], "sklearn.decomposition.SparsePCA": [[508, "sklearn-decomposition-sparsepca"]], "Examples using sklearn.decomposition.SparsePCA": [[508, "examples-using-sklearn-decomposition-sparsepca"]], "sklearn.decomposition.TruncatedSVD": [[509, "sklearn-decomposition-truncatedsvd"]], "Examples using sklearn.decomposition.TruncatedSVD": [[509, "examples-using-sklearn-decomposition-truncatedsvd"]], "sklearn.decomposition.dict_learning": [[510, "sklearn-decomposition-dict-learning"]], "sklearn.decomposition.dict_learning_online": [[511, "sklearn-decomposition-dict-learning-online"]], "sklearn.decomposition.non_negative_factorization": [[512, "sklearn-decomposition-non-negative-factorization"]], "sklearn.decomposition.sparse_encode": [[513, "sklearn-decomposition-sparse-encode"]], "sklearn.discriminant_analysis.LinearDiscriminantAnalysis": [[514, "sklearn-discriminant-analysis-lineardiscriminantanalysis"]], "Examples using sklearn.discriminant_analysis.LinearDiscriminantAnalysis": [[514, "examples-using-sklearn-discriminant-analysis-lineardiscriminantanalysis"]], "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis": [[515, "sklearn-discriminant-analysis-quadraticdiscriminantanalysis"]], "Examples using sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis": [[515, "examples-using-sklearn-discriminant-analysis-quadraticdiscriminantanalysis"]], "sklearn.dummy.DummyClassifier": [[516, "sklearn-dummy-dummyclassifier"]], "Examples using sklearn.dummy.DummyClassifier": [[516, "examples-using-sklearn-dummy-dummyclassifier"]], "sklearn.dummy.DummyRegressor": [[517, "sklearn-dummy-dummyregressor"]], "Examples using sklearn.dummy.DummyRegressor": [[517, "examples-using-sklearn-dummy-dummyregressor"]], "sklearn.ensemble.AdaBoostClassifier": [[518, "sklearn-ensemble-adaboostclassifier"]], "Examples using sklearn.ensemble.AdaBoostClassifier": [[518, "examples-using-sklearn-ensemble-adaboostclassifier"]], "sklearn.ensemble.AdaBoostRegressor": [[519, "sklearn-ensemble-adaboostregressor"]], "Examples using sklearn.ensemble.AdaBoostRegressor": [[519, "examples-using-sklearn-ensemble-adaboostregressor"]], "sklearn.ensemble.BaggingClassifier": [[520, "sklearn-ensemble-baggingclassifier"]], "sklearn.ensemble.BaggingRegressor": [[521, "sklearn-ensemble-baggingregressor"]], "Examples using sklearn.ensemble.BaggingRegressor": [[521, "examples-using-sklearn-ensemble-baggingregressor"]], "sklearn.ensemble.ExtraTreesClassifier": [[522, "sklearn-ensemble-extratreesclassifier"]], "Examples using sklearn.ensemble.ExtraTreesClassifier": [[522, "examples-using-sklearn-ensemble-extratreesclassifier"]], "sklearn.ensemble.ExtraTreesRegressor": [[523, "sklearn-ensemble-extratreesregressor"]], "Examples using sklearn.ensemble.ExtraTreesRegressor": [[523, "examples-using-sklearn-ensemble-extratreesregressor"]], "sklearn.ensemble.GradientBoostingClassifier": [[524, "sklearn-ensemble-gradientboostingclassifier"]], "Examples using sklearn.ensemble.GradientBoostingClassifier": [[524, "examples-using-sklearn-ensemble-gradientboostingclassifier"]], "sklearn.ensemble.GradientBoostingRegressor": [[525, "sklearn-ensemble-gradientboostingregressor"]], "Examples using sklearn.ensemble.GradientBoostingRegressor": [[525, "examples-using-sklearn-ensemble-gradientboostingregressor"]], "sklearn.ensemble.HistGradientBoostingClassifier": [[526, "sklearn-ensemble-histgradientboostingclassifier"]], "Examples using sklearn.ensemble.HistGradientBoostingClassifier": [[526, "examples-using-sklearn-ensemble-histgradientboostingclassifier"]], "sklearn.ensemble.HistGradientBoostingRegressor": [[527, "sklearn-ensemble-histgradientboostingregressor"]], "Examples using sklearn.ensemble.HistGradientBoostingRegressor": [[527, "examples-using-sklearn-ensemble-histgradientboostingregressor"]], "sklearn.ensemble.IsolationForest": [[528, "sklearn-ensemble-isolationforest"]], "Examples using sklearn.ensemble.IsolationForest": [[528, "examples-using-sklearn-ensemble-isolationforest"]], "sklearn.ensemble.RandomForestClassifier": [[529, "sklearn-ensemble-randomforestclassifier"]], "Examples using sklearn.ensemble.RandomForestClassifier": [[529, "examples-using-sklearn-ensemble-randomforestclassifier"]], "sklearn.ensemble.RandomForestRegressor": [[530, "sklearn-ensemble-randomforestregressor"]], "Examples using sklearn.ensemble.RandomForestRegressor": [[530, "examples-using-sklearn-ensemble-randomforestregressor"]], "sklearn.ensemble.RandomTreesEmbedding": [[531, "sklearn-ensemble-randomtreesembedding"]], "Examples using sklearn.ensemble.RandomTreesEmbedding": [[531, "examples-using-sklearn-ensemble-randomtreesembedding"]], "sklearn.ensemble.StackingClassifier": [[532, "sklearn-ensemble-stackingclassifier"]], "Examples using sklearn.ensemble.StackingClassifier": [[532, "examples-using-sklearn-ensemble-stackingclassifier"]], "sklearn.ensemble.StackingRegressor": [[533, "sklearn-ensemble-stackingregressor"]], "Examples using sklearn.ensemble.StackingRegressor": [[533, "examples-using-sklearn-ensemble-stackingregressor"]], "sklearn.ensemble.VotingClassifier": [[534, "sklearn-ensemble-votingclassifier"]], "Examples using sklearn.ensemble.VotingClassifier": [[534, "examples-using-sklearn-ensemble-votingclassifier"]], "sklearn.ensemble.VotingRegressor": [[535, "sklearn-ensemble-votingregressor"]], "Examples using sklearn.ensemble.VotingRegressor": [[535, "examples-using-sklearn-ensemble-votingregressor"]], "sklearn.exceptions.ConvergenceWarning": [[536, "sklearn-exceptions-convergencewarning"]], "Examples using sklearn.exceptions.ConvergenceWarning": [[536, "examples-using-sklearn-exceptions-convergencewarning"]], "sklearn.exceptions.DataConversionWarning": [[537, "sklearn-exceptions-dataconversionwarning"]], "sklearn.exceptions.DataDimensionalityWarning": [[538, "sklearn-exceptions-datadimensionalitywarning"]], "sklearn.exceptions.EfficiencyWarning": [[539, "sklearn-exceptions-efficiencywarning"]], "sklearn.exceptions.FitFailedWarning": [[540, "sklearn-exceptions-fitfailedwarning"]], "sklearn.exceptions.InconsistentVersionWarning": [[541, "sklearn-exceptions-inconsistentversionwarning"]], "sklearn.exceptions.NotFittedError": [[542, "sklearn-exceptions-notfittederror"]], "sklearn.exceptions.UndefinedMetricWarning": [[543, "sklearn-exceptions-undefinedmetricwarning"]], "sklearn.experimental.enable_halving_search_cv": [[544, "module-sklearn.experimental.enable_halving_search_cv"]], "sklearn.experimental.enable_iterative_imputer": [[545, "module-sklearn.experimental.enable_iterative_imputer"]], "sklearn.feature_extraction.DictVectorizer": [[546, "sklearn-feature-extraction-dictvectorizer"]], "Examples using sklearn.feature_extraction.DictVectorizer": [[546, "examples-using-sklearn-feature-extraction-dictvectorizer"]], "sklearn.feature_extraction.FeatureHasher": [[547, "sklearn-feature-extraction-featurehasher"]], "Examples using sklearn.feature_extraction.FeatureHasher": [[547, "examples-using-sklearn-feature-extraction-featurehasher"]], "sklearn.feature_extraction.image.PatchExtractor": [[548, "sklearn-feature-extraction-image-patchextractor"]], "sklearn.feature_extraction.image.extract_patches_2d": [[549, "sklearn-feature-extraction-image-extract-patches-2d"]], "Examples using sklearn.feature_extraction.image.extract_patches_2d": [[549, "examples-using-sklearn-feature-extraction-image-extract-patches-2d"]], "sklearn.feature_extraction.image.grid_to_graph": [[550, "sklearn-feature-extraction-image-grid-to-graph"]], "sklearn.feature_extraction.image.img_to_graph": [[551, "sklearn-feature-extraction-image-img-to-graph"]], "sklearn.feature_extraction.image.reconstruct_from_patches_2d": [[552, "sklearn-feature-extraction-image-reconstruct-from-patches-2d"]], "Examples using sklearn.feature_extraction.image.reconstruct_from_patches_2d": [[552, "examples-using-sklearn-feature-extraction-image-reconstruct-from-patches-2d"]], "sklearn.feature_extraction.text.CountVectorizer": [[553, "sklearn-feature-extraction-text-countvectorizer"]], "Examples using sklearn.feature_extraction.text.CountVectorizer": [[553, "examples-using-sklearn-feature-extraction-text-countvectorizer"]], "sklearn.feature_extraction.text.HashingVectorizer": [[554, "sklearn-feature-extraction-text-hashingvectorizer"]], "Examples using sklearn.feature_extraction.text.HashingVectorizer": [[554, "examples-using-sklearn-feature-extraction-text-hashingvectorizer"]], "sklearn.feature_extraction.text.TfidfTransformer": [[555, "sklearn-feature-extraction-text-tfidftransformer"]], "Examples using sklearn.feature_extraction.text.TfidfTransformer": [[555, "examples-using-sklearn-feature-extraction-text-tfidftransformer"]], "sklearn.feature_extraction.text.TfidfVectorizer": [[556, "sklearn-feature-extraction-text-tfidfvectorizer"]], "Examples using sklearn.feature_extraction.text.TfidfVectorizer": [[556, "examples-using-sklearn-feature-extraction-text-tfidfvectorizer"]], "sklearn.feature_selection.GenericUnivariateSelect": [[557, "sklearn-feature-selection-genericunivariateselect"]], "sklearn.feature_selection.RFE": [[558, "sklearn-feature-selection-rfe"]], "Examples using sklearn.feature_selection.RFE": [[558, "examples-using-sklearn-feature-selection-rfe"]], "sklearn.feature_selection.RFECV": [[559, "sklearn-feature-selection-rfecv"]], "Examples using sklearn.feature_selection.RFECV": [[559, "examples-using-sklearn-feature-selection-rfecv"]], "sklearn.feature_selection.SelectFdr": [[560, "sklearn-feature-selection-selectfdr"]], "sklearn.feature_selection.SelectFpr": [[561, "sklearn-feature-selection-selectfpr"]], "sklearn.feature_selection.SelectFromModel": [[562, "sklearn-feature-selection-selectfrommodel"]], "Examples using sklearn.feature_selection.SelectFromModel": [[562, "examples-using-sklearn-feature-selection-selectfrommodel"]], "sklearn.feature_selection.SelectFwe": [[563, "sklearn-feature-selection-selectfwe"]], "sklearn.feature_selection.SelectKBest": [[564, "sklearn-feature-selection-selectkbest"]], "Examples using sklearn.feature_selection.SelectKBest": [[564, "examples-using-sklearn-feature-selection-selectkbest"]], "sklearn.feature_selection.SelectPercentile": [[565, "sklearn-feature-selection-selectpercentile"]], "Examples using sklearn.feature_selection.SelectPercentile": [[565, "examples-using-sklearn-feature-selection-selectpercentile"]], "sklearn.feature_selection.SelectorMixin": [[566, "sklearn-feature-selection-selectormixin"]], "sklearn.feature_selection.SequentialFeatureSelector": [[567, "sklearn-feature-selection-sequentialfeatureselector"]], "Examples using sklearn.feature_selection.SequentialFeatureSelector": [[567, "examples-using-sklearn-feature-selection-sequentialfeatureselector"]], "sklearn.feature_selection.VarianceThreshold": [[568, "sklearn-feature-selection-variancethreshold"]], "sklearn.feature_selection.chi2": [[569, "sklearn-feature-selection-chi2"]], "Examples using sklearn.feature_selection.chi2": [[569, "examples-using-sklearn-feature-selection-chi2"]], "sklearn.feature_selection.f_classif": [[570, "sklearn-feature-selection-f-classif"]], "Examples using sklearn.feature_selection.f_classif": [[570, "examples-using-sklearn-feature-selection-f-classif"]], "sklearn.feature_selection.f_regression": [[571, "sklearn-feature-selection-f-regression"]], "Examples using sklearn.feature_selection.f_regression": [[571, "examples-using-sklearn-feature-selection-f-regression"]], "sklearn.feature_selection.mutual_info_classif": [[572, "sklearn-feature-selection-mutual-info-classif"]], "Examples using sklearn.feature_selection.mutual_info_classif": [[572, "examples-using-sklearn-feature-selection-mutual-info-classif"]], "sklearn.feature_selection.mutual_info_regression": [[573, "sklearn-feature-selection-mutual-info-regression"]], "Examples using sklearn.feature_selection.mutual_info_regression": [[573, "examples-using-sklearn-feature-selection-mutual-info-regression"]], "sklearn.feature_selection.r_regression": [[574, "sklearn-feature-selection-r-regression"]], "sklearn.gaussian_process.GaussianProcessClassifier": [[575, "sklearn-gaussian-process-gaussianprocessclassifier"]], "Examples using sklearn.gaussian_process.GaussianProcessClassifier": [[575, "examples-using-sklearn-gaussian-process-gaussianprocessclassifier"]], "sklearn.gaussian_process.GaussianProcessRegressor": [[576, "sklearn-gaussian-process-gaussianprocessregressor"]], "Examples using sklearn.gaussian_process.GaussianProcessRegressor": [[576, "examples-using-sklearn-gaussian-process-gaussianprocessregressor"]], "sklearn.gaussian_process.kernels.CompoundKernel": [[577, "sklearn-gaussian-process-kernels-compoundkernel"]], "sklearn.gaussian_process.kernels.ConstantKernel": [[578, "sklearn-gaussian-process-kernels-constantkernel"]], "Examples using sklearn.gaussian_process.kernels.ConstantKernel": [[578, "examples-using-sklearn-gaussian-process-kernels-constantkernel"]], "sklearn.gaussian_process.kernels.DotProduct": [[579, "sklearn-gaussian-process-kernels-dotproduct"]], "Examples using sklearn.gaussian_process.kernels.DotProduct": [[579, "examples-using-sklearn-gaussian-process-kernels-dotproduct"]], "sklearn.gaussian_process.kernels.ExpSineSquared": [[580, "sklearn-gaussian-process-kernels-expsinesquared"]], "Examples using sklearn.gaussian_process.kernels.ExpSineSquared": [[580, "examples-using-sklearn-gaussian-process-kernels-expsinesquared"]], "sklearn.gaussian_process.kernels.Exponentiation": [[581, "sklearn-gaussian-process-kernels-exponentiation"]], "sklearn.gaussian_process.kernels.Hyperparameter": [[582, "sklearn-gaussian-process-kernels-hyperparameter"]], "Examples using sklearn.gaussian_process.kernels.Hyperparameter": [[582, "examples-using-sklearn-gaussian-process-kernels-hyperparameter"]], "sklearn.gaussian_process.kernels.Kernel": [[583, "sklearn-gaussian-process-kernels-kernel"]], "Examples using sklearn.gaussian_process.kernels.Kernel": [[583, "examples-using-sklearn-gaussian-process-kernels-kernel"]], "sklearn.gaussian_process.kernels.Matern": [[584, "sklearn-gaussian-process-kernels-matern"]], "Examples using sklearn.gaussian_process.kernels.Matern": [[584, "examples-using-sklearn-gaussian-process-kernels-matern"]], "sklearn.gaussian_process.kernels.PairwiseKernel": [[585, "sklearn-gaussian-process-kernels-pairwisekernel"]], "sklearn.gaussian_process.kernels.Product": [[586, "sklearn-gaussian-process-kernels-product"]], "sklearn.gaussian_process.kernels.RBF": [[587, "sklearn-gaussian-process-kernels-rbf"]], "Examples using sklearn.gaussian_process.kernels.RBF": [[587, "examples-using-sklearn-gaussian-process-kernels-rbf"]], "sklearn.gaussian_process.kernels.RationalQuadratic": [[588, "sklearn-gaussian-process-kernels-rationalquadratic"]], "Examples using sklearn.gaussian_process.kernels.RationalQuadratic": [[588, "examples-using-sklearn-gaussian-process-kernels-rationalquadratic"]], "sklearn.gaussian_process.kernels.Sum": [[589, "sklearn-gaussian-process-kernels-sum"]], "sklearn.gaussian_process.kernels.WhiteKernel": [[590, "sklearn-gaussian-process-kernels-whitekernel"]], "Examples using sklearn.gaussian_process.kernels.WhiteKernel": [[590, "examples-using-sklearn-gaussian-process-kernels-whitekernel"]], "sklearn.get_config": [[591, "sklearn-get-config"]], "sklearn.impute.IterativeImputer": [[592, "sklearn-impute-iterativeimputer"]], "Examples using sklearn.impute.IterativeImputer": [[592, "examples-using-sklearn-impute-iterativeimputer"]], "sklearn.impute.KNNImputer": [[593, "sklearn-impute-knnimputer"]], "Examples using sklearn.impute.KNNImputer": [[593, "examples-using-sklearn-impute-knnimputer"]], "sklearn.impute.MissingIndicator": [[594, "sklearn-impute-missingindicator"]], "sklearn.impute.SimpleImputer": [[595, "sklearn-impute-simpleimputer"]], "Examples using sklearn.impute.SimpleImputer": [[595, "examples-using-sklearn-impute-simpleimputer"]], "sklearn.inspection.DecisionBoundaryDisplay": [[596, "sklearn-inspection-decisionboundarydisplay"]], "Examples using sklearn.inspection.DecisionBoundaryDisplay": [[596, "examples-using-sklearn-inspection-decisionboundarydisplay"]], "Examples using sklearn.inspection.DecisionBoundaryDisplay.from_estimator": [[596, "examples-using-sklearn-inspection-decisionboundarydisplay-from-estimator"]], "sklearn.inspection.PartialDependenceDisplay": [[597, "sklearn-inspection-partialdependencedisplay"]], "Examples using sklearn.inspection.PartialDependenceDisplay": [[597, "examples-using-sklearn-inspection-partialdependencedisplay"]], "Examples using sklearn.inspection.PartialDependenceDisplay.from_estimator": [[597, "examples-using-sklearn-inspection-partialdependencedisplay-from-estimator"]], "sklearn.inspection.partial_dependence": [[598, "sklearn-inspection-partial-dependence"]], "Examples using sklearn.inspection.partial_dependence": [[598, "examples-using-sklearn-inspection-partial-dependence"]], "sklearn.inspection.permutation_importance": [[599, "sklearn-inspection-permutation-importance"]], "Examples using sklearn.inspection.permutation_importance": [[599, "examples-using-sklearn-inspection-permutation-importance"]], "sklearn.isotonic.IsotonicRegression": [[600, "sklearn-isotonic-isotonicregression"]], "Examples using sklearn.isotonic.IsotonicRegression": [[600, "examples-using-sklearn-isotonic-isotonicregression"]], "sklearn.isotonic.check_increasing": [[601, "sklearn-isotonic-check-increasing"]], "sklearn.isotonic.isotonic_regression": [[602, "sklearn-isotonic-isotonic-regression"]], "sklearn.kernel_approximation.AdditiveChi2Sampler": [[603, "sklearn-kernel-approximation-additivechi2sampler"]], "sklearn.kernel_approximation.Nystroem": [[604, "sklearn-kernel-approximation-nystroem"]], "Examples using sklearn.kernel_approximation.Nystroem": [[604, "examples-using-sklearn-kernel-approximation-nystroem"]], "sklearn.kernel_approximation.PolynomialCountSketch": [[605, "sklearn-kernel-approximation-polynomialcountsketch"]], "Examples using sklearn.kernel_approximation.PolynomialCountSketch": [[605, "examples-using-sklearn-kernel-approximation-polynomialcountsketch"]], "sklearn.kernel_approximation.RBFSampler": [[606, "sklearn-kernel-approximation-rbfsampler"]], "Examples using sklearn.kernel_approximation.RBFSampler": [[606, "examples-using-sklearn-kernel-approximation-rbfsampler"]], "sklearn.kernel_approximation.SkewedChi2Sampler": [[607, "sklearn-kernel-approximation-skewedchi2sampler"]], "sklearn.kernel_ridge.KernelRidge": [[608, "sklearn-kernel-ridge-kernelridge"]], "Examples using sklearn.kernel_ridge.KernelRidge": [[608, "examples-using-sklearn-kernel-ridge-kernelridge"]], "sklearn.linear_model.ARDRegression": [[609, "sklearn-linear-model-ardregression"]], "Examples using sklearn.linear_model.ARDRegression": [[609, "examples-using-sklearn-linear-model-ardregression"]], "sklearn.linear_model.BayesianRidge": [[610, "sklearn-linear-model-bayesianridge"]], "Examples using sklearn.linear_model.BayesianRidge": [[610, "examples-using-sklearn-linear-model-bayesianridge"]], "sklearn.linear_model.ElasticNet": [[611, "sklearn-linear-model-elasticnet"]], "Examples using sklearn.linear_model.ElasticNet": [[611, "examples-using-sklearn-linear-model-elasticnet"]], "sklearn.linear_model.ElasticNetCV": [[612, "sklearn-linear-model-elasticnetcv"]], "Examples using sklearn.linear_model.ElasticNetCV": [[612, "examples-using-sklearn-linear-model-elasticnetcv"]], "sklearn.linear_model.GammaRegressor": [[613, "sklearn-linear-model-gammaregressor"]], "Examples using sklearn.linear_model.GammaRegressor": [[613, "examples-using-sklearn-linear-model-gammaregressor"]], "sklearn.linear_model.HuberRegressor": [[614, "sklearn-linear-model-huberregressor"]], "Examples using sklearn.linear_model.HuberRegressor": [[614, "examples-using-sklearn-linear-model-huberregressor"]], "sklearn.linear_model.Lars": [[615, "sklearn-linear-model-lars"]], "sklearn.linear_model.LarsCV": [[616, "sklearn-linear-model-larscv"]], "sklearn.linear_model.Lasso": [[617, "sklearn-linear-model-lasso"]], "Examples using sklearn.linear_model.Lasso": [[617, "examples-using-sklearn-linear-model-lasso"]], "sklearn.linear_model.LassoCV": [[618, "sklearn-linear-model-lassocv"]], "Examples using sklearn.linear_model.LassoCV": [[618, "examples-using-sklearn-linear-model-lassocv"]], "sklearn.linear_model.LassoLars": [[619, "sklearn-linear-model-lassolars"]], "sklearn.linear_model.LassoLarsCV": [[620, "sklearn-linear-model-lassolarscv"]], "Examples using sklearn.linear_model.LassoLarsCV": [[620, "examples-using-sklearn-linear-model-lassolarscv"]], "sklearn.linear_model.LassoLarsIC": [[621, "sklearn-linear-model-lassolarsic"]], "Examples using sklearn.linear_model.LassoLarsIC": [[621, "examples-using-sklearn-linear-model-lassolarsic"]], "sklearn.linear_model.LinearRegression": [[622, "sklearn-linear-model-linearregression"]], "Examples using sklearn.linear_model.LinearRegression": [[622, "examples-using-sklearn-linear-model-linearregression"]], "sklearn.linear_model.LogisticRegression": [[623, "sklearn-linear-model-logisticregression"]], "Examples using sklearn.linear_model.LogisticRegression": [[623, "examples-using-sklearn-linear-model-logisticregression"]], "sklearn.linear_model.LogisticRegressionCV": [[624, "sklearn-linear-model-logisticregressioncv"]], "Examples using sklearn.linear_model.LogisticRegressionCV": [[624, "examples-using-sklearn-linear-model-logisticregressioncv"]], "sklearn.linear_model.MultiTaskElasticNet": [[625, "sklearn-linear-model-multitaskelasticnet"]], "sklearn.linear_model.MultiTaskElasticNetCV": [[626, "sklearn-linear-model-multitaskelasticnetcv"]], "sklearn.linear_model.MultiTaskLasso": [[627, "sklearn-linear-model-multitasklasso"]], "Examples using sklearn.linear_model.MultiTaskLasso": [[627, "examples-using-sklearn-linear-model-multitasklasso"]], "sklearn.linear_model.MultiTaskLassoCV": [[628, "sklearn-linear-model-multitasklassocv"]], "sklearn.linear_model.OrthogonalMatchingPursuit": [[629, "sklearn-linear-model-orthogonalmatchingpursuit"]], "Examples using sklearn.linear_model.OrthogonalMatchingPursuit": [[629, "examples-using-sklearn-linear-model-orthogonalmatchingpursuit"]], "sklearn.linear_model.OrthogonalMatchingPursuitCV": [[630, "sklearn-linear-model-orthogonalmatchingpursuitcv"]], "Examples using sklearn.linear_model.OrthogonalMatchingPursuitCV": [[630, "examples-using-sklearn-linear-model-orthogonalmatchingpursuitcv"]], "sklearn.linear_model.PassiveAggressiveClassifier": [[631, "sklearn-linear-model-passiveaggressiveclassifier"]], "Examples using sklearn.linear_model.PassiveAggressiveClassifier": [[631, "examples-using-sklearn-linear-model-passiveaggressiveclassifier"]], "sklearn.linear_model.PassiveAggressiveRegressor": [[632, "sklearn-linear-model-passiveaggressiveregressor"]], "sklearn.linear_model.Perceptron": [[633, "sklearn-linear-model-perceptron"]], "Examples using sklearn.linear_model.Perceptron": [[633, "examples-using-sklearn-linear-model-perceptron"]], "sklearn.linear_model.PoissonRegressor": [[634, "sklearn-linear-model-poissonregressor"]], "Examples using sklearn.linear_model.PoissonRegressor": [[634, "examples-using-sklearn-linear-model-poissonregressor"]], "sklearn.linear_model.QuantileRegressor": [[635, "sklearn-linear-model-quantileregressor"]], "Examples using sklearn.linear_model.QuantileRegressor": [[635, "examples-using-sklearn-linear-model-quantileregressor"]], "sklearn.linear_model.RANSACRegressor": [[636, "sklearn-linear-model-ransacregressor"]], "Examples using sklearn.linear_model.RANSACRegressor": [[636, "examples-using-sklearn-linear-model-ransacregressor"]], "sklearn.linear_model.Ridge": [[637, "sklearn-linear-model-ridge"]], "Examples using sklearn.linear_model.Ridge": [[637, "examples-using-sklearn-linear-model-ridge"]], "sklearn.linear_model.RidgeCV": [[638, "sklearn-linear-model-ridgecv"]], "Examples using sklearn.linear_model.RidgeCV": [[638, "examples-using-sklearn-linear-model-ridgecv"]], "sklearn.linear_model.RidgeClassifier": [[639, "sklearn-linear-model-ridgeclassifier"]], "Examples using sklearn.linear_model.RidgeClassifier": [[639, "examples-using-sklearn-linear-model-ridgeclassifier"]], "sklearn.linear_model.RidgeClassifierCV": [[640, "sklearn-linear-model-ridgeclassifiercv"]], "sklearn.linear_model.SGDClassifier": [[641, "sklearn-linear-model-sgdclassifier"]], "Examples using sklearn.linear_model.SGDClassifier": [[641, "examples-using-sklearn-linear-model-sgdclassifier"]], "sklearn.linear_model.SGDOneClassSVM": [[642, "sklearn-linear-model-sgdoneclasssvm"]], "Examples using sklearn.linear_model.SGDOneClassSVM": [[642, "examples-using-sklearn-linear-model-sgdoneclasssvm"]], "sklearn.linear_model.SGDRegressor": [[643, "sklearn-linear-model-sgdregressor"]], "Examples using sklearn.linear_model.SGDRegressor": [[643, "examples-using-sklearn-linear-model-sgdregressor"]], "sklearn.linear_model.TheilSenRegressor": [[644, "sklearn-linear-model-theilsenregressor"]], "Examples using sklearn.linear_model.TheilSenRegressor": [[644, "examples-using-sklearn-linear-model-theilsenregressor"]], "sklearn.linear_model.TweedieRegressor": [[645, "sklearn-linear-model-tweedieregressor"]], "Examples using sklearn.linear_model.TweedieRegressor": [[645, "examples-using-sklearn-linear-model-tweedieregressor"]], "sklearn.linear_model.enet_path": [[646, "sklearn-linear-model-enet-path"]], "Examples using sklearn.linear_model.enet_path": [[646, "examples-using-sklearn-linear-model-enet-path"]], "sklearn.linear_model.lars_path": [[647, "sklearn-linear-model-lars-path"]], "Examples using sklearn.linear_model.lars_path": [[647, "examples-using-sklearn-linear-model-lars-path"]], "sklearn.linear_model.lars_path_gram": [[648, "sklearn-linear-model-lars-path-gram"]], "sklearn.linear_model.lasso_path": [[649, "sklearn-linear-model-lasso-path"]], "Examples using sklearn.linear_model.lasso_path": [[649, "examples-using-sklearn-linear-model-lasso-path"]], "sklearn.linear_model.orthogonal_mp": [[650, "sklearn-linear-model-orthogonal-mp"]], "sklearn.linear_model.orthogonal_mp_gram": [[651, "sklearn-linear-model-orthogonal-mp-gram"]], "sklearn.linear_model.ridge_regression": [[652, "sklearn-linear-model-ridge-regression"]], "sklearn.manifold.Isomap": [[653, "sklearn-manifold-isomap"]], "Examples using sklearn.manifold.Isomap": [[653, "examples-using-sklearn-manifold-isomap"]], "sklearn.manifold.LocallyLinearEmbedding": [[654, "sklearn-manifold-locallylinearembedding"]], "Examples using sklearn.manifold.LocallyLinearEmbedding": [[654, "examples-using-sklearn-manifold-locallylinearembedding"]], "sklearn.manifold.MDS": [[655, "sklearn-manifold-mds"]], "Examples using sklearn.manifold.MDS": [[655, "examples-using-sklearn-manifold-mds"]], "sklearn.manifold.SpectralEmbedding": [[656, "sklearn-manifold-spectralembedding"]], "Examples using sklearn.manifold.SpectralEmbedding": [[656, "examples-using-sklearn-manifold-spectralembedding"]], "sklearn.manifold.TSNE": [[657, "sklearn-manifold-tsne"]], "Examples using sklearn.manifold.TSNE": [[657, "examples-using-sklearn-manifold-tsne"]], "sklearn.manifold.locally_linear_embedding": [[658, "sklearn-manifold-locally-linear-embedding"]], "Examples using sklearn.manifold.locally_linear_embedding": [[658, "examples-using-sklearn-manifold-locally-linear-embedding"]], "sklearn.manifold.smacof": [[659, "sklearn-manifold-smacof"]], "sklearn.manifold.spectral_embedding": [[660, "sklearn-manifold-spectral-embedding"]], "sklearn.manifold.trustworthiness": [[661, "sklearn-manifold-trustworthiness"]], "sklearn.metrics.ConfusionMatrixDisplay": [[662, "sklearn-metrics-confusionmatrixdisplay"]], "Examples using sklearn.metrics.ConfusionMatrixDisplay": [[662, "examples-using-sklearn-metrics-confusionmatrixdisplay"]], "Examples using sklearn.metrics.ConfusionMatrixDisplay.from_estimator": [[662, "examples-using-sklearn-metrics-confusionmatrixdisplay-from-estimator"]], "Examples using sklearn.metrics.ConfusionMatrixDisplay.from_predictions": [[662, "examples-using-sklearn-metrics-confusionmatrixdisplay-from-predictions"]], "sklearn.metrics.DetCurveDisplay": [[663, "sklearn-metrics-detcurvedisplay"]], "Examples using sklearn.metrics.DetCurveDisplay.from_estimator": [[663, "examples-using-sklearn-metrics-detcurvedisplay-from-estimator"]], "sklearn.metrics.DistanceMetric": [[664, "sklearn-metrics-distancemetric"]], "sklearn.metrics.PrecisionRecallDisplay": [[665, "sklearn-metrics-precisionrecalldisplay"]], "Examples using sklearn.metrics.PrecisionRecallDisplay": [[665, "examples-using-sklearn-metrics-precisionrecalldisplay"]], "Examples using sklearn.metrics.PrecisionRecallDisplay.from_estimator": [[665, "examples-using-sklearn-metrics-precisionrecalldisplay-from-estimator"]], "Examples using sklearn.metrics.PrecisionRecallDisplay.from_predictions": [[665, "examples-using-sklearn-metrics-precisionrecalldisplay-from-predictions"]], "sklearn.metrics.PredictionErrorDisplay": [[666, "sklearn-metrics-predictionerrordisplay"]], "Examples using sklearn.metrics.PredictionErrorDisplay": [[666, "examples-using-sklearn-metrics-predictionerrordisplay"]], "Examples using sklearn.metrics.PredictionErrorDisplay.from_estimator": [[666, "examples-using-sklearn-metrics-predictionerrordisplay-from-estimator"]], "Examples using sklearn.metrics.PredictionErrorDisplay.from_predictions": [[666, "examples-using-sklearn-metrics-predictionerrordisplay-from-predictions"]], "sklearn.metrics.RocCurveDisplay": [[667, "sklearn-metrics-roccurvedisplay"]], "Examples using sklearn.metrics.RocCurveDisplay": [[667, "examples-using-sklearn-metrics-roccurvedisplay"]], "Examples using sklearn.metrics.RocCurveDisplay.from_estimator": [[667, "examples-using-sklearn-metrics-roccurvedisplay-from-estimator"]], "Examples using sklearn.metrics.RocCurveDisplay.from_predictions": [[667, "examples-using-sklearn-metrics-roccurvedisplay-from-predictions"]], "sklearn.metrics.accuracy_score": [[668, "sklearn-metrics-accuracy-score"]], "Examples using sklearn.metrics.accuracy_score": [[668, "examples-using-sklearn-metrics-accuracy-score"]], "sklearn.metrics.adjusted_mutual_info_score": [[669, "sklearn-metrics-adjusted-mutual-info-score"]], "Examples using sklearn.metrics.adjusted_mutual_info_score": [[669, "examples-using-sklearn-metrics-adjusted-mutual-info-score"]], "sklearn.metrics.adjusted_rand_score": [[670, "sklearn-metrics-adjusted-rand-score"]], "Examples using sklearn.metrics.adjusted_rand_score": [[670, "examples-using-sklearn-metrics-adjusted-rand-score"]], "sklearn.metrics.auc": [[671, "sklearn-metrics-auc"]], "Examples using sklearn.metrics.auc": [[671, "examples-using-sklearn-metrics-auc"]], "sklearn.metrics.average_precision_score": [[672, "sklearn-metrics-average-precision-score"]], "Examples using sklearn.metrics.average_precision_score": [[672, "examples-using-sklearn-metrics-average-precision-score"]], "sklearn.metrics.balanced_accuracy_score": [[673, "sklearn-metrics-balanced-accuracy-score"]], "sklearn.metrics.brier_score_loss": [[674, "sklearn-metrics-brier-score-loss"]], "Examples using sklearn.metrics.brier_score_loss": [[674, "examples-using-sklearn-metrics-brier-score-loss"]], "sklearn.metrics.calinski_harabasz_score": [[675, "sklearn-metrics-calinski-harabasz-score"]], "sklearn.metrics.check_scoring": [[676, "sklearn-metrics-check-scoring"]], "sklearn.metrics.class_likelihood_ratios": [[677, "sklearn-metrics-class-likelihood-ratios"]], "Examples using sklearn.metrics.class_likelihood_ratios": [[677, "examples-using-sklearn-metrics-class-likelihood-ratios"]], "sklearn.metrics.classification_report": [[678, "sklearn-metrics-classification-report"]], "Examples using sklearn.metrics.classification_report": [[678, "examples-using-sklearn-metrics-classification-report"]], "sklearn.metrics.cluster.contingency_matrix": [[679, "sklearn-metrics-cluster-contingency-matrix"]], "sklearn.metrics.cluster.pair_confusion_matrix": [[680, "sklearn-metrics-cluster-pair-confusion-matrix"]], "sklearn.metrics.cohen_kappa_score": [[681, "sklearn-metrics-cohen-kappa-score"]], "sklearn.metrics.completeness_score": [[682, "sklearn-metrics-completeness-score"]], "Examples using sklearn.metrics.completeness_score": [[682, "examples-using-sklearn-metrics-completeness-score"]], "sklearn.metrics.confusion_matrix": [[683, "sklearn-metrics-confusion-matrix"]], "Examples using sklearn.metrics.confusion_matrix": [[683, "examples-using-sklearn-metrics-confusion-matrix"]], "sklearn.metrics.consensus_score": [[684, "sklearn-metrics-consensus-score"]], "Examples using sklearn.metrics.consensus_score": [[684, "examples-using-sklearn-metrics-consensus-score"]], "sklearn.metrics.coverage_error": [[685, "sklearn-metrics-coverage-error"]], "sklearn.metrics.d2_absolute_error_score": [[686, "sklearn-metrics-d2-absolute-error-score"]], "sklearn.metrics.d2_pinball_score": [[687, "sklearn-metrics-d2-pinball-score"]], "sklearn.metrics.d2_tweedie_score": [[688, "sklearn-metrics-d2-tweedie-score"]], "sklearn.metrics.davies_bouldin_score": [[689, "sklearn-metrics-davies-bouldin-score"]], "sklearn.metrics.dcg_score": [[690, "sklearn-metrics-dcg-score"]], "sklearn.metrics.det_curve": [[691, "sklearn-metrics-det-curve"]], "Examples using sklearn.metrics.det_curve": [[691, "examples-using-sklearn-metrics-det-curve"]], "sklearn.metrics.explained_variance_score": [[692, "sklearn-metrics-explained-variance-score"]], "sklearn.metrics.f1_score": [[693, "sklearn-metrics-f1-score"]], "Examples using sklearn.metrics.f1_score": [[693, "examples-using-sklearn-metrics-f1-score"]], "sklearn.metrics.fbeta_score": [[694, "sklearn-metrics-fbeta-score"]], "sklearn.metrics.fowlkes_mallows_score": [[695, "sklearn-metrics-fowlkes-mallows-score"]], "sklearn.metrics.get_scorer": [[696, "sklearn-metrics-get-scorer"]], "Examples using sklearn.metrics.get_scorer": [[696, "examples-using-sklearn-metrics-get-scorer"]], "sklearn.metrics.get_scorer_names": [[697, "sklearn-metrics-get-scorer-names"]], "sklearn.metrics.hamming_loss": [[698, "sklearn-metrics-hamming-loss"]], "Examples using sklearn.metrics.hamming_loss": [[698, "examples-using-sklearn-metrics-hamming-loss"]], "sklearn.metrics.hinge_loss": [[699, "sklearn-metrics-hinge-loss"]], "Examples using sklearn.metrics.hinge_loss": [[699, "examples-using-sklearn-metrics-hinge-loss"]], "sklearn.metrics.homogeneity_completeness_v_measure": [[700, "sklearn-metrics-homogeneity-completeness-v-measure"]], "sklearn.metrics.homogeneity_score": [[701, "sklearn-metrics-homogeneity-score"]], "Examples using sklearn.metrics.homogeneity_score": [[701, "examples-using-sklearn-metrics-homogeneity-score"]], "sklearn.metrics.jaccard_score": [[702, "sklearn-metrics-jaccard-score"]], "Examples using sklearn.metrics.jaccard_score": [[702, "examples-using-sklearn-metrics-jaccard-score"]], "sklearn.metrics.label_ranking_average_precision_score": [[703, "sklearn-metrics-label-ranking-average-precision-score"]], "sklearn.metrics.label_ranking_loss": [[704, "sklearn-metrics-label-ranking-loss"]], "sklearn.metrics.log_loss": [[705, "sklearn-metrics-log-loss"]], "Examples using sklearn.metrics.log_loss": [[705, "examples-using-sklearn-metrics-log-loss"]], "sklearn.metrics.make_scorer": [[706, "sklearn-metrics-make-scorer"]], "Examples using sklearn.metrics.make_scorer": [[706, "examples-using-sklearn-metrics-make-scorer"]], "sklearn.metrics.matthews_corrcoef": [[707, "sklearn-metrics-matthews-corrcoef"]], "sklearn.metrics.max_error": [[708, "sklearn-metrics-max-error"]], "sklearn.metrics.mean_absolute_error": [[709, "sklearn-metrics-mean-absolute-error"]], "Examples using sklearn.metrics.mean_absolute_error": [[709, "examples-using-sklearn-metrics-mean-absolute-error"]], "sklearn.metrics.mean_absolute_percentage_error": [[710, "sklearn-metrics-mean-absolute-percentage-error"]], "Examples using sklearn.metrics.mean_absolute_percentage_error": [[710, "examples-using-sklearn-metrics-mean-absolute-percentage-error"]], "sklearn.metrics.mean_gamma_deviance": [[711, "sklearn-metrics-mean-gamma-deviance"]], "sklearn.metrics.mean_pinball_loss": [[712, "sklearn-metrics-mean-pinball-loss"]], "Examples using sklearn.metrics.mean_pinball_loss": [[712, "examples-using-sklearn-metrics-mean-pinball-loss"]], "sklearn.metrics.mean_poisson_deviance": [[713, "sklearn-metrics-mean-poisson-deviance"]], "Examples using sklearn.metrics.mean_poisson_deviance": [[713, "examples-using-sklearn-metrics-mean-poisson-deviance"]], "sklearn.metrics.mean_squared_error": [[714, "sklearn-metrics-mean-squared-error"]], "Examples using sklearn.metrics.mean_squared_error": [[714, "examples-using-sklearn-metrics-mean-squared-error"]], "sklearn.metrics.mean_squared_log_error": [[715, "sklearn-metrics-mean-squared-log-error"]], "sklearn.metrics.mean_tweedie_deviance": [[716, "sklearn-metrics-mean-tweedie-deviance"]], "Examples using sklearn.metrics.mean_tweedie_deviance": [[716, "examples-using-sklearn-metrics-mean-tweedie-deviance"]], "sklearn.metrics.median_absolute_error": [[717, "sklearn-metrics-median-absolute-error"]], "Examples using sklearn.metrics.median_absolute_error": [[717, "examples-using-sklearn-metrics-median-absolute-error"]], "sklearn.metrics.multilabel_confusion_matrix": [[718, "sklearn-metrics-multilabel-confusion-matrix"]], "sklearn.metrics.mutual_info_score": [[719, "sklearn-metrics-mutual-info-score"]], "Examples using sklearn.metrics.mutual_info_score": [[719, "examples-using-sklearn-metrics-mutual-info-score"]], "sklearn.metrics.ndcg_score": [[720, "sklearn-metrics-ndcg-score"]], "sklearn.metrics.normalized_mutual_info_score": [[721, "sklearn-metrics-normalized-mutual-info-score"]], "Examples using sklearn.metrics.normalized_mutual_info_score": [[721, "examples-using-sklearn-metrics-normalized-mutual-info-score"]], "sklearn.metrics.pairwise.additive_chi2_kernel": [[722, "sklearn-metrics-pairwise-additive-chi2-kernel"]], "sklearn.metrics.pairwise.chi2_kernel": [[723, "sklearn-metrics-pairwise-chi2-kernel"]], "sklearn.metrics.pairwise.cosine_distances": [[724, "sklearn-metrics-pairwise-cosine-distances"]], "sklearn.metrics.pairwise.cosine_similarity": [[725, "sklearn-metrics-pairwise-cosine-similarity"]], "Examples using sklearn.metrics.pairwise.cosine_similarity": [[725, "examples-using-sklearn-metrics-pairwise-cosine-similarity"]], "sklearn.metrics.pairwise.distance_metrics": [[726, "sklearn-metrics-pairwise-distance-metrics"]], "sklearn.metrics.pairwise.euclidean_distances": [[727, "sklearn-metrics-pairwise-euclidean-distances"]], "sklearn.metrics.pairwise.haversine_distances": [[728, "sklearn-metrics-pairwise-haversine-distances"]], "sklearn.metrics.pairwise.kernel_metrics": [[729, "sklearn-metrics-pairwise-kernel-metrics"]], "sklearn.metrics.pairwise.laplacian_kernel": [[730, "sklearn-metrics-pairwise-laplacian-kernel"]], "sklearn.metrics.pairwise.linear_kernel": [[731, "sklearn-metrics-pairwise-linear-kernel"]], "sklearn.metrics.pairwise.manhattan_distances": [[732, "sklearn-metrics-pairwise-manhattan-distances"]], "sklearn.metrics.pairwise.nan_euclidean_distances": [[733, "sklearn-metrics-pairwise-nan-euclidean-distances"]], "sklearn.metrics.pairwise.paired_cosine_distances": [[734, "sklearn-metrics-pairwise-paired-cosine-distances"]], "sklearn.metrics.pairwise.paired_distances": [[735, "sklearn-metrics-pairwise-paired-distances"]], "sklearn.metrics.pairwise.paired_euclidean_distances": [[736, "sklearn-metrics-pairwise-paired-euclidean-distances"]], "sklearn.metrics.pairwise.paired_manhattan_distances": [[737, "sklearn-metrics-pairwise-paired-manhattan-distances"]], "sklearn.metrics.pairwise.pairwise_kernels": [[738, "sklearn-metrics-pairwise-pairwise-kernels"]], "sklearn.metrics.pairwise.polynomial_kernel": [[739, "sklearn-metrics-pairwise-polynomial-kernel"]], "sklearn.metrics.pairwise.rbf_kernel": [[740, "sklearn-metrics-pairwise-rbf-kernel"]], "sklearn.metrics.pairwise.sigmoid_kernel": [[741, "sklearn-metrics-pairwise-sigmoid-kernel"]], "sklearn.metrics.pairwise_distances": [[742, "sklearn-metrics-pairwise-distances"]], "Examples using sklearn.metrics.pairwise_distances": [[742, "examples-using-sklearn-metrics-pairwise-distances"]], "sklearn.metrics.pairwise_distances_argmin": [[743, "sklearn-metrics-pairwise-distances-argmin"]], "Examples using sklearn.metrics.pairwise_distances_argmin": [[743, "examples-using-sklearn-metrics-pairwise-distances-argmin"]], "sklearn.metrics.pairwise_distances_argmin_min": [[744, "sklearn-metrics-pairwise-distances-argmin-min"]], "sklearn.metrics.pairwise_distances_chunked": [[745, "sklearn-metrics-pairwise-distances-chunked"]], "sklearn.metrics.precision_recall_curve": [[746, "sklearn-metrics-precision-recall-curve"]], "Examples using sklearn.metrics.precision_recall_curve": [[746, "examples-using-sklearn-metrics-precision-recall-curve"]], "sklearn.metrics.precision_recall_fscore_support": [[747, "sklearn-metrics-precision-recall-fscore-support"]], "sklearn.metrics.precision_score": [[748, "sklearn-metrics-precision-score"]], "Examples using sklearn.metrics.precision_score": [[748, "examples-using-sklearn-metrics-precision-score"]], "sklearn.metrics.r2_score": [[749, "sklearn-metrics-r2-score"]], "Examples using sklearn.metrics.r2_score": [[749, "examples-using-sklearn-metrics-r2-score"]], "sklearn.metrics.rand_score": [[750, "sklearn-metrics-rand-score"]], "Examples using sklearn.metrics.rand_score": [[750, "examples-using-sklearn-metrics-rand-score"]], "sklearn.metrics.recall_score": [[751, "sklearn-metrics-recall-score"]], "Examples using sklearn.metrics.recall_score": [[751, "examples-using-sklearn-metrics-recall-score"]], "sklearn.metrics.roc_auc_score": [[752, "sklearn-metrics-roc-auc-score"]], "Examples using sklearn.metrics.roc_auc_score": [[752, "examples-using-sklearn-metrics-roc-auc-score"]], "sklearn.metrics.roc_curve": [[753, "sklearn-metrics-roc-curve"]], "Examples using sklearn.metrics.roc_curve": [[753, "examples-using-sklearn-metrics-roc-curve"]], "sklearn.metrics.root_mean_squared_error": [[754, "sklearn-metrics-root-mean-squared-error"]], "Examples using sklearn.metrics.root_mean_squared_error": [[754, "examples-using-sklearn-metrics-root-mean-squared-error"]], "sklearn.metrics.root_mean_squared_log_error": [[755, "sklearn-metrics-root-mean-squared-log-error"]], "sklearn.metrics.silhouette_samples": [[756, "sklearn-metrics-silhouette-samples"]], "Examples using sklearn.metrics.silhouette_samples": [[756, "examples-using-sklearn-metrics-silhouette-samples"]], "sklearn.metrics.silhouette_score": [[757, "sklearn-metrics-silhouette-score"]], "Examples using sklearn.metrics.silhouette_score": [[757, "examples-using-sklearn-metrics-silhouette-score"]], "sklearn.metrics.top_k_accuracy_score": [[758, "sklearn-metrics-top-k-accuracy-score"]], "sklearn.metrics.v_measure_score": [[759, "sklearn-metrics-v-measure-score"]], "Examples using sklearn.metrics.v_measure_score": [[759, "examples-using-sklearn-metrics-v-measure-score"]], "sklearn.metrics.zero_one_loss": [[760, "sklearn-metrics-zero-one-loss"]], "sklearn.mixture.BayesianGaussianMixture": [[761, "sklearn-mixture-bayesiangaussianmixture"]], "Examples using sklearn.mixture.BayesianGaussianMixture": [[761, "examples-using-sklearn-mixture-bayesiangaussianmixture"]], "sklearn.mixture.GaussianMixture": [[762, "sklearn-mixture-gaussianmixture"]], "Examples using sklearn.mixture.GaussianMixture": [[762, "examples-using-sklearn-mixture-gaussianmixture"]], "sklearn.model_selection.GridSearchCV": [[763, "sklearn-model-selection-gridsearchcv"]], "Examples using sklearn.model_selection.GridSearchCV": [[763, "examples-using-sklearn-model-selection-gridsearchcv"]], "sklearn.model_selection.GroupKFold": [[764, "sklearn-model-selection-groupkfold"]], "Examples using sklearn.model_selection.GroupKFold": [[764, "examples-using-sklearn-model-selection-groupkfold"]], "sklearn.model_selection.GroupShuffleSplit": [[765, "sklearn-model-selection-groupshufflesplit"]], "Examples using sklearn.model_selection.GroupShuffleSplit": [[765, "examples-using-sklearn-model-selection-groupshufflesplit"]], "sklearn.model_selection.HalvingGridSearchCV": [[766, "sklearn-model-selection-halvinggridsearchcv"]], "Examples using sklearn.model_selection.HalvingGridSearchCV": [[766, "examples-using-sklearn-model-selection-halvinggridsearchcv"]], "sklearn.model_selection.HalvingRandomSearchCV": [[767, "sklearn-model-selection-halvingrandomsearchcv"]], "Examples using sklearn.model_selection.HalvingRandomSearchCV": [[767, "examples-using-sklearn-model-selection-halvingrandomsearchcv"]], "sklearn.model_selection.KFold": [[768, "sklearn-model-selection-kfold"]], "Examples using sklearn.model_selection.KFold": [[768, "examples-using-sklearn-model-selection-kfold"]], "sklearn.model_selection.LearningCurveDisplay": [[769, "sklearn-model-selection-learningcurvedisplay"]], "Examples using sklearn.model_selection.LearningCurveDisplay": [[769, "examples-using-sklearn-model-selection-learningcurvedisplay"]], "Examples using sklearn.model_selection.LearningCurveDisplay.from_estimator": [[769, "examples-using-sklearn-model-selection-learningcurvedisplay-from-estimator"]], "sklearn.model_selection.LeaveOneGroupOut": [[770, "sklearn-model-selection-leaveonegroupout"]], "sklearn.model_selection.LeaveOneOut": [[771, "sklearn-model-selection-leaveoneout"]], "sklearn.model_selection.LeavePGroupsOut": [[772, "sklearn-model-selection-leavepgroupsout"]], "sklearn.model_selection.LeavePOut": [[773, "sklearn-model-selection-leavepout"]], "sklearn.model_selection.ParameterGrid": [[774, "sklearn-model-selection-parametergrid"]], "sklearn.model_selection.ParameterSampler": [[775, "sklearn-model-selection-parametersampler"]], "sklearn.model_selection.PredefinedSplit": [[776, "sklearn-model-selection-predefinedsplit"]], "sklearn.model_selection.RandomizedSearchCV": [[777, "sklearn-model-selection-randomizedsearchcv"]], "Examples using sklearn.model_selection.RandomizedSearchCV": [[777, "examples-using-sklearn-model-selection-randomizedsearchcv"]], "sklearn.model_selection.RepeatedKFold": [[778, "sklearn-model-selection-repeatedkfold"]], "Examples using sklearn.model_selection.RepeatedKFold": [[778, "examples-using-sklearn-model-selection-repeatedkfold"]], "sklearn.model_selection.RepeatedStratifiedKFold": [[779, "sklearn-model-selection-repeatedstratifiedkfold"]], "Examples using sklearn.model_selection.RepeatedStratifiedKFold": [[779, "examples-using-sklearn-model-selection-repeatedstratifiedkfold"]], "sklearn.model_selection.ShuffleSplit": [[780, "sklearn-model-selection-shufflesplit"]], "Examples using sklearn.model_selection.ShuffleSplit": [[780, "examples-using-sklearn-model-selection-shufflesplit"]], "sklearn.model_selection.StratifiedGroupKFold": [[781, "sklearn-model-selection-stratifiedgroupkfold"]], "Examples using sklearn.model_selection.StratifiedGroupKFold": [[781, "examples-using-sklearn-model-selection-stratifiedgroupkfold"]], "sklearn.model_selection.StratifiedKFold": [[782, "sklearn-model-selection-stratifiedkfold"]], "Examples using sklearn.model_selection.StratifiedKFold": [[782, "examples-using-sklearn-model-selection-stratifiedkfold"]], "sklearn.model_selection.StratifiedShuffleSplit": [[783, "sklearn-model-selection-stratifiedshufflesplit"]], "Examples using sklearn.model_selection.StratifiedShuffleSplit": [[783, "examples-using-sklearn-model-selection-stratifiedshufflesplit"]], "sklearn.model_selection.TimeSeriesSplit": [[784, "sklearn-model-selection-timeseriessplit"]], "Examples using sklearn.model_selection.TimeSeriesSplit": [[784, "examples-using-sklearn-model-selection-timeseriessplit"]], "sklearn.model_selection.ValidationCurveDisplay": [[785, "sklearn-model-selection-validationcurvedisplay"]], "Examples using sklearn.model_selection.ValidationCurveDisplay.from_estimator": [[785, "examples-using-sklearn-model-selection-validationcurvedisplay-from-estimator"]], "sklearn.model_selection.check_cv": [[786, "sklearn-model-selection-check-cv"]], "sklearn.model_selection.cross_val_predict": [[787, "sklearn-model-selection-cross-val-predict"]], "Examples using sklearn.model_selection.cross_val_predict": [[787, "examples-using-sklearn-model-selection-cross-val-predict"]], "sklearn.model_selection.cross_val_score": [[788, "sklearn-model-selection-cross-val-score"]], "Examples using sklearn.model_selection.cross_val_score": [[788, "examples-using-sklearn-model-selection-cross-val-score"]], "sklearn.model_selection.cross_validate": [[789, "sklearn-model-selection-cross-validate"]], "Examples using sklearn.model_selection.cross_validate": [[789, "examples-using-sklearn-model-selection-cross-validate"]], "sklearn.model_selection.learning_curve": [[790, "sklearn-model-selection-learning-curve"]], "Examples using sklearn.model_selection.learning_curve": [[790, "examples-using-sklearn-model-selection-learning-curve"]], "sklearn.model_selection.permutation_test_score": [[791, "sklearn-model-selection-permutation-test-score"]], "Examples using sklearn.model_selection.permutation_test_score": [[791, "examples-using-sklearn-model-selection-permutation-test-score"]], "sklearn.model_selection.train_test_split": [[792, "sklearn-model-selection-train-test-split"]], "Examples using sklearn.model_selection.train_test_split": [[792, "examples-using-sklearn-model-selection-train-test-split"]], "sklearn.model_selection.validation_curve": [[793, "sklearn-model-selection-validation-curve"]], "Examples using sklearn.model_selection.validation_curve": [[793, "examples-using-sklearn-model-selection-validation-curve"]], "sklearn.multiclass.OneVsOneClassifier": [[794, "sklearn-multiclass-onevsoneclassifier"]], "Examples using sklearn.multiclass.OneVsOneClassifier": [[794, "examples-using-sklearn-multiclass-onevsoneclassifier"]], "sklearn.multiclass.OneVsRestClassifier": [[795, "sklearn-multiclass-onevsrestclassifier"]], "Examples using sklearn.multiclass.OneVsRestClassifier": [[795, "examples-using-sklearn-multiclass-onevsrestclassifier"]], "sklearn.multiclass.OutputCodeClassifier": [[796, "sklearn-multiclass-outputcodeclassifier"]], "Examples using sklearn.multiclass.OutputCodeClassifier": [[796, "examples-using-sklearn-multiclass-outputcodeclassifier"]], "sklearn.multioutput.ClassifierChain": [[797, "sklearn-multioutput-classifierchain"]], "Examples using sklearn.multioutput.ClassifierChain": [[797, "examples-using-sklearn-multioutput-classifierchain"]], "sklearn.multioutput.MultiOutputClassifier": [[798, "sklearn-multioutput-multioutputclassifier"]], "sklearn.multioutput.MultiOutputRegressor": [[799, "sklearn-multioutput-multioutputregressor"]], "Examples using sklearn.multioutput.MultiOutputRegressor": [[799, "examples-using-sklearn-multioutput-multioutputregressor"]], "sklearn.multioutput.RegressorChain": [[800, "sklearn-multioutput-regressorchain"]], "sklearn.naive_bayes.BernoulliNB": [[801, "sklearn-naive-bayes-bernoullinb"]], "Examples using sklearn.naive_bayes.BernoulliNB": [[801, "examples-using-sklearn-naive-bayes-bernoullinb"]], "sklearn.naive_bayes.CategoricalNB": [[802, "sklearn-naive-bayes-categoricalnb"]], "sklearn.naive_bayes.ComplementNB": [[803, "sklearn-naive-bayes-complementnb"]], "Examples using sklearn.naive_bayes.ComplementNB": [[803, "examples-using-sklearn-naive-bayes-complementnb"]], "sklearn.naive_bayes.GaussianNB": [[804, "sklearn-naive-bayes-gaussiannb"]], "Examples using sklearn.naive_bayes.GaussianNB": [[804, "examples-using-sklearn-naive-bayes-gaussiannb"]], "sklearn.naive_bayes.MultinomialNB": [[805, "sklearn-naive-bayes-multinomialnb"]], "Examples using sklearn.naive_bayes.MultinomialNB": [[805, "examples-using-sklearn-naive-bayes-multinomialnb"]], "sklearn.neighbors.BallTree": [[806, "sklearn-neighbors-balltree"]], "sklearn.neighbors.KDTree": [[807, "sklearn-neighbors-kdtree"]], "sklearn.neighbors.KNeighborsClassifier": [[808, "sklearn-neighbors-kneighborsclassifier"]], "Examples using sklearn.neighbors.KNeighborsClassifier": [[808, "examples-using-sklearn-neighbors-kneighborsclassifier"]], "sklearn.neighbors.KNeighborsRegressor": [[809, "sklearn-neighbors-kneighborsregressor"]], "Examples using sklearn.neighbors.KNeighborsRegressor": [[809, "examples-using-sklearn-neighbors-kneighborsregressor"]], "sklearn.neighbors.KNeighborsTransformer": [[810, "sklearn-neighbors-kneighborstransformer"]], "Examples using sklearn.neighbors.KNeighborsTransformer": [[810, "examples-using-sklearn-neighbors-kneighborstransformer"]], "sklearn.neighbors.KernelDensity": [[811, "sklearn-neighbors-kerneldensity"]], "Examples using sklearn.neighbors.KernelDensity": [[811, "examples-using-sklearn-neighbors-kerneldensity"]], "sklearn.neighbors.LocalOutlierFactor": [[812, "sklearn-neighbors-localoutlierfactor"]], "Examples using sklearn.neighbors.LocalOutlierFactor": [[812, "examples-using-sklearn-neighbors-localoutlierfactor"]], "sklearn.neighbors.NearestCentroid": [[813, "sklearn-neighbors-nearestcentroid"]], "Examples using sklearn.neighbors.NearestCentroid": [[813, "examples-using-sklearn-neighbors-nearestcentroid"]], "sklearn.neighbors.NearestNeighbors": [[814, "sklearn-neighbors-nearestneighbors"]], "Examples using sklearn.neighbors.NearestNeighbors": [[814, "examples-using-sklearn-neighbors-nearestneighbors"]], "sklearn.neighbors.NeighborhoodComponentsAnalysis": [[815, "sklearn-neighbors-neighborhoodcomponentsanalysis"]], "Examples using sklearn.neighbors.NeighborhoodComponentsAnalysis": [[815, "examples-using-sklearn-neighbors-neighborhoodcomponentsanalysis"]], "sklearn.neighbors.RadiusNeighborsClassifier": [[816, "sklearn-neighbors-radiusneighborsclassifier"]], "sklearn.neighbors.RadiusNeighborsRegressor": [[817, "sklearn-neighbors-radiusneighborsregressor"]], "sklearn.neighbors.RadiusNeighborsTransformer": [[818, "sklearn-neighbors-radiusneighborstransformer"]], "sklearn.neighbors.kneighbors_graph": [[819, "sklearn-neighbors-kneighbors-graph"]], "Examples using sklearn.neighbors.kneighbors_graph": [[819, "examples-using-sklearn-neighbors-kneighbors-graph"]], "sklearn.neighbors.radius_neighbors_graph": [[820, "sklearn-neighbors-radius-neighbors-graph"]], "sklearn.neighbors.sort_graph_by_row_values": [[821, "sklearn-neighbors-sort-graph-by-row-values"]], "sklearn.neural_network.BernoulliRBM": [[822, "sklearn-neural-network-bernoullirbm"]], "Examples using sklearn.neural_network.BernoulliRBM": [[822, "examples-using-sklearn-neural-network-bernoullirbm"]], "sklearn.neural_network.MLPClassifier": [[823, "sklearn-neural-network-mlpclassifier"]], "Examples using sklearn.neural_network.MLPClassifier": [[823, "examples-using-sklearn-neural-network-mlpclassifier"]], "sklearn.neural_network.MLPRegressor": [[824, "sklearn-neural-network-mlpregressor"]], "Examples using sklearn.neural_network.MLPRegressor": [[824, "examples-using-sklearn-neural-network-mlpregressor"]], "sklearn.pipeline.FeatureUnion": [[825, "sklearn-pipeline-featureunion"]], "Examples using sklearn.pipeline.FeatureUnion": [[825, "examples-using-sklearn-pipeline-featureunion"]], "sklearn.pipeline.Pipeline": [[826, "sklearn-pipeline-pipeline"]], "Examples using sklearn.pipeline.Pipeline": [[826, "examples-using-sklearn-pipeline-pipeline"]], "sklearn.pipeline.make_pipeline": [[827, "sklearn-pipeline-make-pipeline"]], "Examples using sklearn.pipeline.make_pipeline": [[827, "examples-using-sklearn-pipeline-make-pipeline"]], "sklearn.pipeline.make_union": [[828, "sklearn-pipeline-make-union"]], "sklearn.preprocessing.Binarizer": [[829, "sklearn-preprocessing-binarizer"]], "sklearn.preprocessing.FunctionTransformer": [[830, "sklearn-preprocessing-functiontransformer"]], "Examples using sklearn.preprocessing.FunctionTransformer": [[830, "examples-using-sklearn-preprocessing-functiontransformer"]], "sklearn.preprocessing.KBinsDiscretizer": [[831, "sklearn-preprocessing-kbinsdiscretizer"]], "Examples using sklearn.preprocessing.KBinsDiscretizer": [[831, "examples-using-sklearn-preprocessing-kbinsdiscretizer"]], "sklearn.preprocessing.KernelCenterer": [[832, "sklearn-preprocessing-kernelcenterer"]], "sklearn.preprocessing.LabelBinarizer": [[833, "sklearn-preprocessing-labelbinarizer"]], "Examples using sklearn.preprocessing.LabelBinarizer": [[833, "examples-using-sklearn-preprocessing-labelbinarizer"]], "sklearn.preprocessing.LabelEncoder": [[834, "sklearn-preprocessing-labelencoder"]], "sklearn.preprocessing.MaxAbsScaler": [[835, "sklearn-preprocessing-maxabsscaler"]], "Examples using sklearn.preprocessing.MaxAbsScaler": [[835, "examples-using-sklearn-preprocessing-maxabsscaler"]], "sklearn.preprocessing.MinMaxScaler": [[836, "sklearn-preprocessing-minmaxscaler"]], "Examples using sklearn.preprocessing.MinMaxScaler": [[836, "examples-using-sklearn-preprocessing-minmaxscaler"]], "sklearn.preprocessing.MultiLabelBinarizer": [[837, "sklearn-preprocessing-multilabelbinarizer"]], "sklearn.preprocessing.Normalizer": [[838, "sklearn-preprocessing-normalizer"]], "Examples using sklearn.preprocessing.Normalizer": [[838, "examples-using-sklearn-preprocessing-normalizer"]], "sklearn.preprocessing.OneHotEncoder": [[839, "sklearn-preprocessing-onehotencoder"]], "Examples using sklearn.preprocessing.OneHotEncoder": [[839, "examples-using-sklearn-preprocessing-onehotencoder"]], "sklearn.preprocessing.OrdinalEncoder": [[840, "sklearn-preprocessing-ordinalencoder"]], "Examples using sklearn.preprocessing.OrdinalEncoder": [[840, "examples-using-sklearn-preprocessing-ordinalencoder"]], "sklearn.preprocessing.PolynomialFeatures": [[841, "sklearn-preprocessing-polynomialfeatures"]], "Examples using sklearn.preprocessing.PolynomialFeatures": [[841, "examples-using-sklearn-preprocessing-polynomialfeatures"]], "sklearn.preprocessing.PowerTransformer": [[842, "sklearn-preprocessing-powertransformer"]], "Examples using sklearn.preprocessing.PowerTransformer": [[842, "examples-using-sklearn-preprocessing-powertransformer"]], "sklearn.preprocessing.QuantileTransformer": [[843, "sklearn-preprocessing-quantiletransformer"]], "Examples using sklearn.preprocessing.QuantileTransformer": [[843, "examples-using-sklearn-preprocessing-quantiletransformer"]], "sklearn.preprocessing.RobustScaler": [[844, "sklearn-preprocessing-robustscaler"]], "Examples using sklearn.preprocessing.RobustScaler": [[844, "examples-using-sklearn-preprocessing-robustscaler"]], "sklearn.preprocessing.SplineTransformer": [[845, "sklearn-preprocessing-splinetransformer"]], "Examples using sklearn.preprocessing.SplineTransformer": [[845, "examples-using-sklearn-preprocessing-splinetransformer"]], "sklearn.preprocessing.StandardScaler": [[846, "sklearn-preprocessing-standardscaler"]], "Examples using sklearn.preprocessing.StandardScaler": [[846, "examples-using-sklearn-preprocessing-standardscaler"]], "sklearn.preprocessing.TargetEncoder": [[847, "sklearn-preprocessing-targetencoder"]], "Examples using sklearn.preprocessing.TargetEncoder": [[847, "examples-using-sklearn-preprocessing-targetencoder"]], "sklearn.preprocessing.add_dummy_feature": [[848, "sklearn-preprocessing-add-dummy-feature"]], "sklearn.preprocessing.binarize": [[849, "sklearn-preprocessing-binarize"]], "sklearn.preprocessing.label_binarize": [[850, "sklearn-preprocessing-label-binarize"]], "Examples using sklearn.preprocessing.label_binarize": [[850, "examples-using-sklearn-preprocessing-label-binarize"]], "sklearn.preprocessing.maxabs_scale": [[851, "sklearn-preprocessing-maxabs-scale"]], "sklearn.preprocessing.minmax_scale": [[852, "sklearn-preprocessing-minmax-scale"]], "Examples using sklearn.preprocessing.minmax_scale": [[852, "examples-using-sklearn-preprocessing-minmax-scale"]], "sklearn.preprocessing.normalize": [[853, "sklearn-preprocessing-normalize"]], "sklearn.preprocessing.power_transform": [[854, "sklearn-preprocessing-power-transform"]], "sklearn.preprocessing.quantile_transform": [[855, "sklearn-preprocessing-quantile-transform"]], "Examples using sklearn.preprocessing.quantile_transform": [[855, "examples-using-sklearn-preprocessing-quantile-transform"]], "sklearn.preprocessing.robust_scale": [[856, "sklearn-preprocessing-robust-scale"]], "sklearn.preprocessing.scale": [[857, "sklearn-preprocessing-scale"]], "sklearn.random_projection.GaussianRandomProjection": [[858, "sklearn-random-projection-gaussianrandomprojection"]], "sklearn.random_projection.SparseRandomProjection": [[859, "sklearn-random-projection-sparserandomprojection"]], "Examples using sklearn.random_projection.SparseRandomProjection": [[859, "examples-using-sklearn-random-projection-sparserandomprojection"]], "sklearn.random_projection.johnson_lindenstrauss_min_dim": [[860, "sklearn-random-projection-johnson-lindenstrauss-min-dim"]], "Examples using sklearn.random_projection.johnson_lindenstrauss_min_dim": [[860, "examples-using-sklearn-random-projection-johnson-lindenstrauss-min-dim"]], "sklearn.semi_supervised.LabelPropagation": [[861, "sklearn-semi-supervised-labelpropagation"]], "sklearn.semi_supervised.LabelSpreading": [[862, "sklearn-semi-supervised-labelspreading"]], "Examples using sklearn.semi_supervised.LabelSpreading": [[862, "examples-using-sklearn-semi-supervised-labelspreading"]], "sklearn.semi_supervised.SelfTrainingClassifier": [[863, "sklearn-semi-supervised-selftrainingclassifier"]], "Examples using sklearn.semi_supervised.SelfTrainingClassifier": [[863, "examples-using-sklearn-semi-supervised-selftrainingclassifier"]], "sklearn.set_config": [[864, "sklearn-set-config"]], "Examples using sklearn.set_config": [[864, "examples-using-sklearn-set-config"]], "sklearn.show_versions": [[865, "sklearn-show-versions"]], "sklearn.svm.LinearSVC": [[866, "sklearn-svm-linearsvc"]], "Examples using sklearn.svm.LinearSVC": [[866, "examples-using-sklearn-svm-linearsvc"]], "sklearn.svm.LinearSVR": [[867, "sklearn-svm-linearsvr"]], "sklearn.svm.NuSVC": [[868, "sklearn-svm-nusvc"]], "Examples using sklearn.svm.NuSVC": [[868, "examples-using-sklearn-svm-nusvc"]], "sklearn.svm.NuSVR": [[869, "sklearn-svm-nusvr"]], "Examples using sklearn.svm.NuSVR": [[869, "examples-using-sklearn-svm-nusvr"]], "sklearn.svm.OneClassSVM": [[870, "sklearn-svm-oneclasssvm"]], "Examples using sklearn.svm.OneClassSVM": [[870, "examples-using-sklearn-svm-oneclasssvm"]], "sklearn.svm.SVC": [[871, "sklearn-svm-svc"]], "Examples using sklearn.svm.SVC": [[871, "examples-using-sklearn-svm-svc"]], "sklearn.svm.SVR": [[872, "sklearn-svm-svr"]], "Examples using sklearn.svm.SVR": [[872, "examples-using-sklearn-svm-svr"]], "sklearn.svm.l1_min_c": [[873, "sklearn-svm-l1-min-c"]], "Examples using sklearn.svm.l1_min_c": [[873, "examples-using-sklearn-svm-l1-min-c"]], "sklearn.tree.DecisionTreeClassifier": [[874, "sklearn-tree-decisiontreeclassifier"]], "Examples using sklearn.tree.DecisionTreeClassifier": [[874, "examples-using-sklearn-tree-decisiontreeclassifier"]], "sklearn.tree.DecisionTreeRegressor": [[875, "sklearn-tree-decisiontreeregressor"]], "Examples using sklearn.tree.DecisionTreeRegressor": [[875, "examples-using-sklearn-tree-decisiontreeregressor"]], "sklearn.tree.ExtraTreeClassifier": [[876, "sklearn-tree-extratreeclassifier"]], "sklearn.tree.ExtraTreeRegressor": [[877, "sklearn-tree-extratreeregressor"]], "sklearn.tree.export_graphviz": [[878, "sklearn-tree-export-graphviz"]], "sklearn.tree.export_text": [[879, "sklearn-tree-export-text"]], "sklearn.tree.plot_tree": [[880, "sklearn-tree-plot-tree"]], "Examples using sklearn.tree.plot_tree": [[880, "examples-using-sklearn-tree-plot-tree"]], "sklearn.utils.Bunch": [[881, "sklearn-utils-bunch"]], "Examples using sklearn.utils.Bunch": [[881, "examples-using-sklearn-utils-bunch"]], "sklearn.utils._safe_indexing": [[882, "sklearn-utils-safe-indexing"]], "sklearn.utils.arrayfuncs.min_pos": [[883, "sklearn-utils-arrayfuncs-min-pos"]], "sklearn.utils.as_float_array": [[884, "sklearn-utils-as-float-array"]], "sklearn.utils.assert_all_finite": [[885, "sklearn-utils-assert-all-finite"]], "sklearn.utils.check_X_y": [[886, "sklearn-utils-check-x-y"]], "sklearn.utils.check_array": [[887, "sklearn-utils-check-array"]], "sklearn.utils.check_consistent_length": [[888, "sklearn-utils-check-consistent-length"]], "sklearn.utils.check_random_state": [[889, "sklearn-utils-check-random-state"]], "Examples using sklearn.utils.check_random_state": [[889, "examples-using-sklearn-utils-check-random-state"]], "sklearn.utils.check_scalar": [[890, "sklearn-utils-check-scalar"]], "sklearn.utils.class_weight.compute_class_weight": [[891, "sklearn-utils-class-weight-compute-class-weight"]], "sklearn.utils.class_weight.compute_sample_weight": [[892, "sklearn-utils-class-weight-compute-sample-weight"]], "sklearn.utils.deprecated": [[893, "sklearn-utils-deprecated"]], "sklearn.utils.discovery.all_displays": [[894, "sklearn-utils-discovery-all-displays"]], "sklearn.utils.discovery.all_estimators": [[895, "sklearn-utils-discovery-all-estimators"]], "sklearn.utils.discovery.all_functions": [[896, "sklearn-utils-discovery-all-functions"]], "sklearn.utils.estimator_checks.check_estimator": [[897, "sklearn-utils-estimator-checks-check-estimator"]], "sklearn.utils.estimator_checks.parametrize_with_checks": [[898, "sklearn-utils-estimator-checks-parametrize-with-checks"]], "Examples using sklearn.utils.estimator_checks.parametrize_with_checks": [[898, "examples-using-sklearn-utils-estimator-checks-parametrize-with-checks"]], "sklearn.utils.estimator_html_repr": [[899, "sklearn-utils-estimator-html-repr"]], "sklearn.utils.extmath.density": [[900, "sklearn-utils-extmath-density"]], "Examples using sklearn.utils.extmath.density": [[900, "examples-using-sklearn-utils-extmath-density"]], "sklearn.utils.extmath.fast_logdet": [[901, "sklearn-utils-extmath-fast-logdet"]], "sklearn.utils.extmath.randomized_range_finder": [[902, "sklearn-utils-extmath-randomized-range-finder"]], "sklearn.utils.extmath.randomized_svd": [[903, "sklearn-utils-extmath-randomized-svd"]], "sklearn.utils.extmath.safe_sparse_dot": [[904, "sklearn-utils-extmath-safe-sparse-dot"]], "sklearn.utils.extmath.weighted_mode": [[905, "sklearn-utils-extmath-weighted-mode"]], "sklearn.utils.gen_batches": [[906, "sklearn-utils-gen-batches"]], "sklearn.utils.gen_even_slices": [[907, "sklearn-utils-gen-even-slices"]], "Examples using sklearn.utils.gen_even_slices": [[907, "examples-using-sklearn-utils-gen-even-slices"]], "sklearn.utils.graph.single_source_shortest_path_length": [[908, "sklearn-utils-graph-single-source-shortest-path-length"]], "sklearn.utils.indexable": [[909, "sklearn-utils-indexable"]], "sklearn.utils.metadata_routing.MetadataRequest": [[910, "sklearn-utils-metadata-routing-metadatarequest"]], "sklearn.utils.metadata_routing.MetadataRouter": [[911, "sklearn-utils-metadata-routing-metadatarouter"]], "Examples using sklearn.utils.metadata_routing.MetadataRouter": [[911, "examples-using-sklearn-utils-metadata-routing-metadatarouter"]], "sklearn.utils.metadata_routing.MethodMapping": [[912, "sklearn-utils-metadata-routing-methodmapping"]], "Examples using sklearn.utils.metadata_routing.MethodMapping": [[912, "examples-using-sklearn-utils-metadata-routing-methodmapping"]], "sklearn.utils.metadata_routing.get_routing_for_object": [[913, "sklearn-utils-metadata-routing-get-routing-for-object"]], "Examples using sklearn.utils.metadata_routing.get_routing_for_object": [[913, "examples-using-sklearn-utils-metadata-routing-get-routing-for-object"]], "sklearn.utils.metadata_routing.process_routing": [[914, "sklearn-utils-metadata-routing-process-routing"]], "Examples using sklearn.utils.metadata_routing.process_routing": [[914, "examples-using-sklearn-utils-metadata-routing-process-routing"]], "sklearn.utils.metaestimators.available_if": [[915, "sklearn-utils-metaestimators-available-if"]], "Examples using sklearn.utils.metaestimators.available_if": [[915, "examples-using-sklearn-utils-metaestimators-available-if"]], "sklearn.utils.multiclass.is_multilabel": [[916, "sklearn-utils-multiclass-is-multilabel"]], "sklearn.utils.multiclass.type_of_target": [[917, "sklearn-utils-multiclass-type-of-target"]], "sklearn.utils.multiclass.unique_labels": [[918, "sklearn-utils-multiclass-unique-labels"]], "sklearn.utils.murmurhash3_32": [[919, "sklearn-utils-murmurhash3-32"]], "sklearn.utils.parallel.Parallel": [[920, "sklearn-utils-parallel-parallel"]], "sklearn.utils.parallel.delayed": [[921, "sklearn-utils-parallel-delayed"]], "sklearn.utils.parallel_backend": [[922, "sklearn-utils-parallel-backend"]], "sklearn.utils.random.sample_without_replacement": [[923, "sklearn-utils-random-sample-without-replacement"]], "sklearn.utils.register_parallel_backend": [[924, "sklearn-utils-register-parallel-backend"]], "sklearn.utils.resample": [[925, "sklearn-utils-resample"]], "sklearn.utils.safe_mask": [[926, "sklearn-utils-safe-mask"]], "sklearn.utils.safe_sqr": [[927, "sklearn-utils-safe-sqr"]], "sklearn.utils.shuffle": [[928, "sklearn-utils-shuffle"]], "Examples using sklearn.utils.shuffle": [[928, "examples-using-sklearn-utils-shuffle"]], "sklearn.utils.sparsefuncs.incr_mean_variance_axis": [[929, "sklearn-utils-sparsefuncs-incr-mean-variance-axis"]], "sklearn.utils.sparsefuncs.inplace_column_scale": [[930, "sklearn-utils-sparsefuncs-inplace-column-scale"]], "sklearn.utils.sparsefuncs.inplace_csr_column_scale": [[931, "sklearn-utils-sparsefuncs-inplace-csr-column-scale"]], "sklearn.utils.sparsefuncs.inplace_row_scale": [[932, "sklearn-utils-sparsefuncs-inplace-row-scale"]], "sklearn.utils.sparsefuncs.inplace_swap_column": [[933, "sklearn-utils-sparsefuncs-inplace-swap-column"]], "sklearn.utils.sparsefuncs.inplace_swap_row": [[934, "sklearn-utils-sparsefuncs-inplace-swap-row"]], "sklearn.utils.sparsefuncs.mean_variance_axis": [[935, "sklearn-utils-sparsefuncs-mean-variance-axis"]], "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1": [[936, "sklearn-utils-sparsefuncs-fast-inplace-csr-row-normalize-l1"]], "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2": [[937, "sklearn-utils-sparsefuncs-fast-inplace-csr-row-normalize-l2"]], "sklearn.utils.validation.check_is_fitted": [[938, "sklearn-utils-validation-check-is-fitted"]], "Examples using sklearn.utils.validation.check_is_fitted": [[938, "examples-using-sklearn-utils-validation-check-is-fitted"]], "sklearn.utils.validation.check_memory": [[939, "sklearn-utils-validation-check-memory"]], "sklearn.utils.validation.check_symmetric": [[940, "sklearn-utils-validation-check-symmetric"]], "sklearn.utils.validation.column_or_1d": [[941, "sklearn-utils-validation-column-or-1d"]], "sklearn.utils.validation.has_fit_parameter": [[942, "sklearn-utils-validation-has-fit-parameter"]], "Tuning the hyper-parameters of an estimator": [[943, "tuning-the-hyper-parameters-of-an-estimator"]], "Exhaustive Grid Search": [[943, "exhaustive-grid-search"]], "Randomized Parameter Optimization": [[943, "randomized-parameter-optimization"]], "Searching for optimal parameters with successive halving": [[943, "searching-for-optimal-parameters-with-successive-halving"]], "Choosing min_resources and the number of candidates": [[943, "choosing-min-resources-and-the-number-of-candidates"]], "Amount of resource and number of candidates at each iteration": [[943, "amount-of-resource-and-number-of-candidates-at-each-iteration"]], "Choosing a resource": [[943, "choosing-a-resource"]], "Exhausting the available resources": [[943, "exhausting-the-available-resources"]], "Aggressive elimination of candidates": [[943, "aggressive-elimination-of-candidates"]], "Analyzing results with the cv_results_ attribute": [[943, "analyzing-results-with-the-cv-results-attribute"]], "Tips for parameter search": [[943, "tips-for-parameter-search"]], "Specifying an objective metric": [[943, "specifying-an-objective-metric"]], "Specifying multiple metrics for evaluation": [[943, "specifying-multiple-metrics-for-evaluation"]], "Composite estimators and parameter spaces": [[943, "composite-estimators-and-parameter-spaces"]], "Model selection: development and evaluation": [[943, "model-selection-development-and-evaluation"]], "Robustness to failure": [[943, "robustness-to-failure"]], "Alternatives to brute force parameter search": [[943, "alternatives-to-brute-force-parameter-search"]], "Model specific cross-validation": [[943, "model-specific-cross-validation"]], "Information Criterion": [[943, "information-criterion"]], "Out of Bag Estimates": [[943, "out-of-bag-estimates"]], "Imputation of missing values": [[944, "imputation-of-missing-values"], [964, "imputation-of-missing-values"]], "Univariate vs. Multivariate Imputation": [[944, "univariate-vs-multivariate-imputation"]], "Univariate feature imputation": [[944, "univariate-feature-imputation"]], "Multivariate feature imputation": [[944, "multivariate-feature-imputation"]], "Flexibility of IterativeImputer": [[944, "flexibility-of-iterativeimputer"]], "Multiple vs. Single Imputation": [[944, "multiple-vs-single-imputation"]], "Nearest neighbors imputation": [[944, "nearest-neighbors-imputation"]], "Keeping the number of features constant": [[944, "keeping-the-number-of-features-constant"]], "Marking imputed values": [[944, "marking-imputed-values"]], "Estimators that handle NaN values": [[944, "estimators-that-handle-nan-values"]], "Isotonic regression": [[945, "isotonic-regression"]], "Nystroem Method for Kernel Approximation": [[946, "nystroem-method-for-kernel-approximation"]], "Radial Basis Function Kernel": [[946, "radial-basis-function-kernel"]], "Additive Chi Squared Kernel": [[946, "additive-chi-squared-kernel"]], "Skewed Chi Squared Kernel": [[946, "skewed-chi-squared-kernel"]], "Polynomial Kernel Approximation via Tensor Sketch": [[946, "polynomial-kernel-approximation-via-tensor-sketch"]], "Mathematical Details": [[946, "mathematical-details"]], "Kernel ridge regression": [[947, "kernel-ridge-regression"]], "Linear and Quadratic Discriminant Analysis": [[948, "linear-and-quadratic-discriminant-analysis"]], "Dimensionality reduction using Linear Discriminant Analysis": [[948, "dimensionality-reduction-using-linear-discriminant-analysis"]], "Mathematical formulation of the LDA and QDA classifiers": [[948, "mathematical-formulation-of-the-lda-and-qda-classifiers"]], "QDA": [[948, "qda"]], "LDA": [[948, "lda"]], "Mathematical formulation of LDA dimensionality reduction": [[948, "mathematical-formulation-of-lda-dimensionality-reduction"]], "Shrinkage and Covariance Estimator": [[948, "shrinkage-and-covariance-estimator"]], "Estimation algorithms": [[948, "estimation-algorithms"]], "Validation curves: plotting scores to evaluate models": [[949, "validation-curves-plotting-scores-to-evaluate-models"]], "Validation curve": [[949, "validation-curve"]], "Learning curve": [[949, "learning-curve"]], "Linear Models": [[950, "linear-models"]], "Ordinary Least Squares": [[950, "ordinary-least-squares"]], "Non-Negative Least Squares": [[950, "non-negative-least-squares"]], "Ordinary Least Squares Complexity": [[950, "ordinary-least-squares-complexity"]], "Ridge regression and classification": [[950, "ridge-regression-and-classification"]], "Ridge Complexity": [[950, "ridge-complexity"]], "Setting the regularization parameter: leave-one-out Cross-Validation": [[950, "setting-the-regularization-parameter-leave-one-out-cross-validation"]], "Setting regularization parameter": [[950, "setting-regularization-parameter"]], "Using cross-validation": [[950, "using-cross-validation"]], "Information-criteria based model selection": [[950, "information-criteria-based-model-selection"]], "AIC and BIC criteria": [[950, "aic-and-bic-criteria"]], "Comparison with the regularization parameter of SVM": [[950, "comparison-with-the-regularization-parameter-of-svm"]], "Multi-task Lasso": [[950, "multi-task-lasso"]], "Elastic-Net": [[950, "elastic-net"]], "Multi-task Elastic-Net": [[950, "multi-task-elastic-net"]], "Least Angle Regression": [[950, "least-angle-regression"]], "LARS Lasso": [[950, "lars-lasso"]], "Orthogonal Matching Pursuit (OMP)": [[950, "orthogonal-matching-pursuit-omp"]], "Bayesian Regression": [[950, "bayesian-regression"]], "Bayesian Ridge Regression": [[950, "bayesian-ridge-regression"]], "Automatic Relevance Determination - ARD": [[950, "automatic-relevance-determination-ard"]], "Logistic regression": [[950, "logistic-regression"]], "Binary Case": [[950, "binary-case"]], "Multinomial Case": [[950, "multinomial-case"]], "Solvers": [[950, "solvers"]], "Differences between solvers": [[950, "differences-between-solvers"]], "Stochastic Gradient Descent - SGD": [[950, "stochastic-gradient-descent-sgd"]], "Perceptron": [[950, "perceptron"]], "Passive Aggressive Algorithms": [[950, "passive-aggressive-algorithms"]], "Robustness regression: outliers and modeling errors": [[950, "robustness-regression-outliers-and-modeling-errors"]], "Different scenario and useful concepts": [[950, "different-scenario-and-useful-concepts"]], "Trade-offs: which estimator ?": [[950, null]], "RANSAC: RANdom SAmple Consensus": [[950, "ransac-random-sample-consensus"]], "Theil-Sen estimator: generalized-median-based estimator": [[950, "theil-sen-estimator-generalized-median-based-estimator"]], "Huber Regression": [[950, "huber-regression"]], "Quantile Regression": [[950, "quantile-regression"]], "Polynomial regression: extending linear models with basis functions": [[950, "polynomial-regression-extending-linear-models-with-basis-functions"]], "Introduction": [[951, "introduction"]], "Isomap": [[951, "isomap"]], "Locally Linear Embedding": [[951, "locally-linear-embedding"]], "Modified Locally Linear Embedding": [[951, "modified-locally-linear-embedding"]], "Hessian Eigenmapping": [[951, "hessian-eigenmapping"]], "Spectral Embedding": [[951, "spectral-embedding"]], "Local Tangent Space Alignment": [[951, "local-tangent-space-alignment"]], "Multi-dimensional Scaling (MDS)": [[951, "multi-dimensional-scaling-mds"]], "t-distributed Stochastic Neighbor Embedding (t-SNE)": [[951, "t-distributed-stochastic-neighbor-embedding-t-sne"]], "Tips on practical use": [[951, "tips-on-practical-use"], [970, "tips-on-practical-use"]], "Pairwise metrics, Affinities and Kernels": [[952, "pairwise-metrics-affinities-and-kernels"]], "Cosine similarity": [[952, "cosine-similarity"]], "Laplacian kernel": [[952, "laplacian-kernel"]], "Chi-squared kernel": [[952, "chi-squared-kernel"]], "Gaussian mixture models": [[953, "gaussian-mixture-models"]], "Gaussian Mixture": [[953, "gaussian-mixture"]], "Pros:": [[953, null], [953, null]], "Cons:": [[953, null], [953, null]], "Variational Bayesian Gaussian Mixture": [[953, "variational-bayesian-gaussian-mixture"]], "The Dirichlet Process": [[953, "the-dirichlet-process"]], "Metrics and scoring: quantifying the quality of predictions": [[954, "metrics-and-scoring-quantifying-the-quality-of-predictions"]], "The scoring parameter: defining model evaluation rules": [[954, "the-scoring-parameter-defining-model-evaluation-rules"]], "Common cases: predefined values": [[954, "common-cases-predefined-values"]], "Defining your scoring strategy from metric functions": [[954, "defining-your-scoring-strategy-from-metric-functions"]], "Implementing your own scoring object": [[954, "implementing-your-own-scoring-object"]], "Using multiple metric evaluation": [[954, "using-multiple-metric-evaluation"]], "From binary to multiclass and multilabel": [[954, "from-binary-to-multiclass-and-multilabel"]], "Accuracy score": [[954, "accuracy-score"]], "Example:": [[954, null], [954, null], [954, null], [954, null], [954, null], [954, null], [954, null], [954, null], [966, null], [986, null]], "Top-k accuracy score": [[954, "top-k-accuracy-score"]], "Balanced accuracy score": [[954, "balanced-accuracy-score"]], "Cohen\u2019s kappa": [[954, "cohen-s-kappa"]], "Classification report": [[954, "classification-report"]], "Hamming loss": [[954, "hamming-loss"]], "Precision, recall and F-measures": [[954, "precision-recall-and-f-measures"]], "Binary classification": [[954, "binary-classification"]], "Multiclass and multilabel classification": [[954, "multiclass-and-multilabel-classification"]], "Jaccard similarity coefficient score": [[954, "jaccard-similarity-coefficient-score"]], "Hinge loss": [[954, "hinge-loss"]], "Log loss": [[954, "log-loss"]], "Matthews correlation coefficient": [[954, "matthews-correlation-coefficient"]], "Multi-label confusion matrix": [[954, "multi-label-confusion-matrix"]], "Receiver operating characteristic (ROC)": [[954, "receiver-operating-characteristic-roc"]], "Binary case": [[954, "binary-case"]], "Multi-class case": [[954, "multi-class-case"]], "Multi-label case": [[954, "multi-label-case"]], "Detection error tradeoff (DET)": [[954, "detection-error-tradeoff-det"]], "Zero one loss": [[954, "zero-one-loss"]], "Brier score loss": [[954, "brier-score-loss"]], "Class likelihood ratios": [[954, "class-likelihood-ratios"]], "Coverage error": [[954, "coverage-error"]], "Label ranking average precision": [[954, "label-ranking-average-precision"]], "Ranking loss": [[954, "ranking-loss"]], "Normalized Discounted Cumulative Gain": [[954, "normalized-discounted-cumulative-gain"]], "R\u00b2 score, the coefficient of determination": [[954, "r2-score-the-coefficient-of-determination"]], "Mean absolute error": [[954, "mean-absolute-error"]], "Mean squared error": [[954, "mean-squared-error"]], "Mean squared logarithmic error": [[954, "mean-squared-logarithmic-error"]], "Mean absolute percentage error": [[954, "mean-absolute-percentage-error"]], "Median absolute error": [[954, "median-absolute-error"]], "Max error": [[954, "max-error"]], "Explained variance score": [[954, "explained-variance-score"]], "Link to R\u00b2 score, the coefficient of determination": [[954, null]], "Mean Poisson, Gamma, and Tweedie deviances": [[954, "mean-poisson-gamma-and-tweedie-deviances"]], "Pinball loss": [[954, "pinball-loss"]], "D\u00b2 score": [[954, "d2-score"]], "Visual evaluation of regression models": [[954, "visual-evaluation-of-regression-models"]], "Dummy estimators": [[954, "dummy-estimators"]], "Multiclass and multioutput algorithms": [[955, "multiclass-and-multioutput-algorithms"]], "Multiclass classification": [[955, "multiclass-classification"], [986, null]], "Target format": [[955, "target-format"], [955, "id5"], [955, "id8"], [955, "id10"]], "OneVsRestClassifier": [[955, "onevsrestclassifier"]], "OneVsOneClassifier": [[955, "onevsoneclassifier"]], "OutputCodeClassifier": [[955, "outputcodeclassifier"]], "MultiOutputClassifier": [[955, "multioutputclassifier"]], "ClassifierChain": [[955, "classifierchain"]], "Multiclass-multioutput classification": [[955, "multiclass-multioutput-classification"]], "Multioutput regression": [[955, "multioutput-regression"]], "MultiOutputRegressor": [[955, "multioutputregressor"]], "RegressorChain": [[955, "regressorchain"]], "Naive Bayes": [[956, "naive-bayes"]], "Multinomial Naive Bayes": [[956, "multinomial-naive-bayes"]], "Complement Naive Bayes": [[956, "complement-naive-bayes"]], "Bernoulli Naive Bayes": [[956, "bernoulli-naive-bayes"]], "Categorical Naive Bayes": [[956, "categorical-naive-bayes"]], "Out-of-core naive Bayes model fitting": [[956, "out-of-core-naive-bayes-model-fitting"]], "Unsupervised Nearest Neighbors": [[957, "unsupervised-nearest-neighbors"]], "Finding the Nearest Neighbors": [[957, "finding-the-nearest-neighbors"]], "KDTree and BallTree Classes": [[957, "kdtree-and-balltree-classes"]], "Nearest Neighbors Regression": [[957, "nearest-neighbors-regression"]], "Nearest Neighbor Algorithms": [[957, "nearest-neighbor-algorithms"]], "Brute Force": [[957, "brute-force"]], "K-D Tree": [[957, "k-d-tree"]], "Ball Tree": [[957, "ball-tree"]], "Nearest Centroid Classifier": [[957, "nearest-centroid-classifier"]], "Nearest Shrunken Centroid": [[957, "nearest-shrunken-centroid"]], "Nearest Neighbors Transformer": [[957, "nearest-neighbors-transformer"]], "Neighborhood Components Analysis": [[957, "neighborhood-components-analysis"]], "Dimensionality reduction": [[957, "dimensionality-reduction"]], "Implementation": [[957, "implementation"]], "Complexity": [[957, "complexity"], [958, "complexity"], [968, "complexity"], [969, "complexity"], [970, "complexity"]], "Transform": [[957, "transform"]], "Neural network models (supervised)": [[958, "neural-network-models-supervised"]], "Multi-layer Perceptron": [[958, "multi-layer-perceptron"]], "Regularization": [[958, "regularization"]], "Algorithms": [[958, "algorithms"]], "Tips on Practical Use": [[958, "tips-on-practical-use"], [968, "tips-on-practical-use"], [969, "tips-on-practical-use"]], "More control with warm_start": [[958, "more-control-with-warm-start"]], "Neural network models (unsupervised)": [[959, "neural-network-models-unsupervised"]], "Restricted Boltzmann machines": [[959, "restricted-boltzmann-machines"]], "Graphical model and parametrization": [[959, "graphical-model-and-parametrization"]], "Bernoulli Restricted Boltzmann machines": [[959, "bernoulli-restricted-boltzmann-machines"]], "Stochastic Maximum Likelihood learning": [[959, "stochastic-maximum-likelihood-learning"]], "Novelty and Outlier Detection": [[960, "novelty-and-outlier-detection"]], "Overview of outlier detection methods": [[960, "overview-of-outlier-detection-methods"]], "Novelty Detection": [[960, "novelty-detection"]], "Scaling up the One-Class SVM": [[960, "scaling-up-the-one-class-svm"]], "Outlier Detection": [[960, "id1"]], "Fitting an elliptic envelope": [[960, "fitting-an-elliptic-envelope"]], "Isolation Forest": [[960, "isolation-forest"]], "Local Outlier Factor": [[960, "local-outlier-factor"]], "Novelty detection with Local Outlier Factor": [[960, "novelty-detection-with-local-outlier-factor"]], "Partial Dependence and Individual Conditional Expectation plots": [[961, "partial-dependence-and-individual-conditional-expectation-plots"]], "Partial dependence plots": [[961, "partial-dependence-plots"]], "Individual conditional expectation (ICE) plot": [[961, "individual-conditional-expectation-ice-plot"]], "Mathematical Definition": [[961, "mathematical-definition"]], "Computation methods": [[961, "computation-methods"]], "Permutation feature importance": [[962, "permutation-feature-importance"]], "Outline of the permutation importance algorithm": [[962, "outline-of-the-permutation-importance-algorithm"]], "Relation to impurity-based importance in trees": [[962, "relation-to-impurity-based-importance-in-trees"]], "Misleading values on strongly correlated features": [[962, "misleading-values-on-strongly-correlated-features"]], "Preprocessing data": [[964, "preprocessing-data"]], "Standardization, or mean removal and variance scaling": [[964, "standardization-or-mean-removal-and-variance-scaling"]], "Scaling features to a range": [[964, "scaling-features-to-a-range"]], "Scaling sparse data": [[964, "scaling-sparse-data"]], "Scaling data with outliers": [[964, "scaling-data-with-outliers"]], "Centering kernel matrices": [[964, "centering-kernel-matrices"]], "Non-linear transformation": [[964, "non-linear-transformation"]], "Mapping to a Uniform distribution": [[964, "mapping-to-a-uniform-distribution"]], "Mapping to a Gaussian distribution": [[964, "mapping-to-a-gaussian-distribution"]], "Normalization": [[964, "normalization"]], "Encoding categorical features": [[964, "encoding-categorical-features"]], "Infrequent categories": [[964, "infrequent-categories"]], "Target Encoder": [[964, "target-encoder"]], "Discretization": [[964, "discretization"]], "K-bins discretization": [[964, "k-bins-discretization"]], "Feature binarization": [[964, "feature-binarization"]], "Sparse input": [[964, null]], "Generating polynomial features": [[964, "generating-polynomial-features"]], "Polynomial features": [[964, "polynomial-features"]], "Spline transformer": [[964, "spline-transformer"]], "Custom transformers": [[964, "custom-transformers"]], "Transforming the prediction target (y)": [[965, "transforming-the-prediction-target-y"]], "Label binarization": [[965, "label-binarization"]], "LabelBinarizer": [[965, "labelbinarizer"]], "MultiLabelBinarizer": [[965, "multilabelbinarizer"]], "Label encoding": [[965, "label-encoding"]], "Random Projection": [[966, "random-projection"]], "The Johnson-Lindenstrauss lemma": [[966, "the-johnson-lindenstrauss-lemma"]], "Gaussian random projection": [[966, "gaussian-random-projection"]], "Sparse random projection": [[966, "sparse-random-projection"]], "Inverse Transform": [[966, "inverse-transform"]], "Unlabeled entries in y": [[967, null]], "Self Training": [[967, "self-training"]], "Label Propagation": [[967, "label-propagation"]], "Stochastic Gradient Descent": [[968, "stochastic-gradient-descent"]], "Stochastic Gradient Descent for sparse data": [[968, "stochastic-gradient-descent-for-sparse-data"]], "Stopping criterion": [[968, "stopping-criterion"]], "SGD": [[968, "id5"]], "Implementation details": [[968, "implementation-details"], [969, "implementation-details"]], "Multi-class classification": [[969, "multi-class-classification"]], "Scores and probabilities": [[969, "scores-and-probabilities"]], "Unbalanced problems": [[969, "unbalanced-problems"]], "Density estimation, novelty detection": [[969, "density-estimation-novelty-detection"]], "Kernel functions": [[969, "kernel-functions"]], "Parameters of the RBF Kernel": [[969, "parameters-of-the-rbf-kernel"]], "Custom Kernels": [[969, "custom-kernels"]], "SVC": [[969, "svc"]], "SVR": [[969, "svr"]], "Multi-output problems": [[970, "multi-output-problems"]], "Tree algorithms: ID3, C4.5, C5.0 and CART": [[970, "tree-algorithms-id3-c4-5-c5-0-and-cart"]], "Classification criteria": [[970, "classification-criteria"]], "Regression criteria": [[970, "regression-criteria"]], "Missing Values Support": [[970, "missing-values-support"]], "Minimal Cost-Complexity Pruning": [[970, "minimal-cost-complexity-pruning"]], "Unsupervised dimensionality reduction": [[971, "unsupervised-dimensionality-reduction"]], "Pipelining": [[971, null], [984, "pipelining"]], "PCA: principal component analysis": [[971, "pca-principal-component-analysis"]], "Random projections": [[971, "random-projections"]], "Feature scaling": [[971, null]], "External Resources, Videos and Talks": [[972, "external-resources-videos-and-talks"]], "New to Scientific Python?": [[972, "new-to-scientific-python"]], "External Tutorials": [[972, "external-tutorials"]], "Videos": [[972, "videos"]], "Related Projects": [[973, "related-projects"]], "Interoperability and framework enhancements": [[973, "interoperability-and-framework-enhancements"]], "Other estimators and tasks": [[973, "other-estimators-and-tasks"]], "Statistical learning with Python": [[973, "statistical-learning-with-python"]], "Recommendation Engine packages": [[973, "recommendation-engine-packages"]], "Domain specific packages": [[973, "domain-specific-packages"]], "Translations of scikit-learn documentation": [[973, "translations-of-scikit-learn-documentation"]], "Roadmap": [[974, "roadmap"]], "Purpose of this document": [[974, "purpose-of-this-document"]], "Statement of purpose: Scikit-learn in 2018": [[974, "statement-of-purpose-scikit-learn-in-2018"]], "Architectural / general goals": [[974, "architectural-general-goals"]], "Subpackage-specific goals": [[974, "subpackage-specific-goals"]], "Computation times": [[975, "computation-times"]], "Supervised learning": [[976, "supervised-learning"]], "Support": [[977, "support"]], "Mailing Lists": [[977, "mailing-lists"]], "User Questions": [[977, "user-questions"]], "Bug Tracker": [[977, "bug-tracker"]], "Social Media": [[977, "social-media"]], "Gitter": [[977, "gitter"]], "Documentation Resources": [[977, "documentation-resources"]], "Who is using scikit-learn?": [[978, "who-is-using-scikit-learn"]], "J.P.Morgan": [[978, "id1"]], "Spotify": [[978, "id2"]], "Inria": [[978, "id3"]], "betaworks": [[978, "id4"]], "Hugging Face": [[978, "id5"]], "Evernote": [[978, "id6"]], "T\u00e9l\u00e9com ParisTech": [[978, "id7"]], "Booking.com": [[978, "id8"]], "AWeber": [[978, "id9"]], "Yhat": [[978, "id10"]], "Rangespan": [[978, "id11"]], "Birchbox": [[978, "id12"]], "Bestofmedia Group": [[978, "id13"]], "Change.org": [[978, "id14"]], "PHIMECA Engineering": [[978, "id15"]], "HowAboutWe": [[978, "id16"]], "PeerIndex": [[978, "id17"]], "DataRobot": [[978, "id18"]], "OkCupid": [[978, "id19"]], "Lovely": [[978, "id20"]], "Data Publica": [[978, "id21"]], "Machinalis": [[978, "id22"]], "solido": [[978, "id23"]], "INFONEA": [[978, "id24"]], "Dataiku": [[978, "id25"]], "Otto Group": [[978, "id26"]], "Zopa": [[978, "id27"]], "MARS": [[978, "id28"]], "BNP Paribas Cardif": [[978, "id29"]], "An introduction to machine learning with scikit-learn": [[979, "an-introduction-to-machine-learning-with-scikit-learn"]], "Section contents": [[979, null]], "Machine learning: the problem setting": [[979, "machine-learning-the-problem-setting"]], "Training set and testing set": [[979, null], [986, null]], "Loading an example dataset": [[979, "loading-an-example-dataset"]], "Shape of the data arrays": [[979, null]], "Learning and predicting": [[979, "learning-and-predicting"]], "Choosing the parameters of the model": [[979, null]], "Conventions": [[979, "conventions"]], "Type casting": [[979, "type-casting"]], "Refitting and updating parameters": [[979, "refitting-and-updating-parameters"]], "Multiclass vs. multilabel fitting": [[979, "multiclass-vs-multilabel-fitting"]], "scikit-learn Tutorials": [[980, "scikit-learn-tutorials"]], "Choosing the right estimator": [[981, "choosing-the-right-estimator"]], "A tutorial on statistical-learning for scientific data processing": [[982, "a-tutorial-on-statistical-learning-for-scientific-data-processing"]], "Statistical learning": [[982, null]], "Model selection: choosing estimators and their parameters": [[983, "model-selection-choosing-estimators-and-their-parameters"]], "Score, and cross-validated scores": [[983, "score-and-cross-validated-scores"]], "Cross-validation generators": [[983, "cross-validation-generators"]], "Exercise": [[983, null], [983, null], [986, null], [986, null]], "Grid-search and cross-validated estimators": [[983, "grid-search-and-cross-validated-estimators"]], "Grid-search": [[983, "grid-search"]], "Nested cross-validation": [[983, null]], "Cross-validated estimators": [[983, "cross-validated-estimators"]], "Putting it all together": [[984, "putting-it-all-together"]], "Face recognition with eigenfaces": [[984, "face-recognition-with-eigenfaces"]], "Open problem: Stock Market Structure": [[984, "open-problem-stock-market-structure"]], "Statistical learning: the setting and the estimator object in scikit-learn": [[985, "statistical-learning-the-setting-and-the-estimator-object-in-scikit-learn"]], "Datasets": [[985, "datasets"]], "A simple example shipped with scikit-learn: iris dataset": [[985, null]], "An example of reshaping data would be the digits dataset": [[985, null]], "Estimators objects": [[985, "estimators-objects"]], "Supervised learning: predicting an output variable from high-dimensional observations": [[986, "supervised-learning-predicting-an-output-variable-from-high-dimensional-observations"]], "The problem solved in supervised learning": [[986, null]], "Vocabulary: classification and regression": [[986, null]], "Nearest neighbor and the curse of dimensionality": [[986, "nearest-neighbor-and-the-curse-of-dimensionality"]], "Classifying irises:": [[986, null]], "k-Nearest neighbors classifier": [[986, "k-nearest-neighbors-classifier"]], "The curse of dimensionality": [[986, "the-curse-of-dimensionality"]], "Linear model: from regression to sparsity": [[986, "linear-model-from-regression-to-sparsity"]], "Linear regression": [[986, "linear-regression"]], "Shrinkage": [[986, "shrinkage"]], "Different algorithms for the same problem": [[986, null]], "Shrinkage and sparsity with logistic regression": [[986, null]], "Support vector machines (SVMs)": [[986, "support-vector-machines-svms"]], "Linear SVMs": [[986, "linear-svms"]], "Using kernels": [[986, "using-kernels"]], "RBF kernel (Radial Basis Function)": [[986, "rbf-kernel-radial-basis-function"]], "Interactive example": [[986, null]], "Unsupervised learning: seeking representations of the data": [[987, "unsupervised-learning-seeking-representations-of-the-data"]], "Clustering: grouping observations together": [[987, "clustering-grouping-observations-together"]], "The problem solved in clustering": [[987, null]], "K-means clustering": [[987, "k-means-clustering"]], "Application example: vector quantization": [[987, null]], "Hierarchical agglomerative clustering: Ward": [[987, "hierarchical-agglomerative-clustering-ward"]], "Connectivity-constrained clustering": [[987, "connectivity-constrained-clustering"]], "transform and inverse_transform methods": [[987, null]], "Decompositions: from a signal to components and loadings": [[987, "decompositions-from-a-signal-to-components-and-loadings"]], "Components and loadings": [[987, null]], "Principal component analysis: PCA": [[987, "principal-component-analysis-pca"]], "Independent Component Analysis: ICA": [[987, "independent-component-analysis-ica"]], "Working With Text Data": [[988, "working-with-text-data"]], "Tutorial setup": [[988, "tutorial-setup"]], "Loading the 20 newsgroups dataset": [[988, "loading-the-20-newsgroups-dataset"]], "Extracting features from text files": [[988, "extracting-features-from-text-files"]], "Bags of words": [[988, "bags-of-words"]], "Tokenizing text with scikit-learn": [[988, "tokenizing-text-with-scikit-learn"]], "From occurrences to frequencies": [[988, "from-occurrences-to-frequencies"]], "Training a classifier": [[988, "training-a-classifier"]], "Building a pipeline": [[988, "building-a-pipeline"]], "Evaluation of the performance on the test set": [[988, "evaluation-of-the-performance-on-the-test-set"]], "Parameter tuning using grid search": [[988, "parameter-tuning-using-grid-search"]], "Exercises": [[988, "exercises"]], "Exercise 1: Language identification": [[988, "exercise-1-language-identification"]], "Exercise 2: Sentiment Analysis on movie reviews": [[988, "exercise-2-sentiment-analysis-on-movie-reviews"]], "Exercise 3: CLI text classification utility": [[988, "exercise-3-cli-text-classification-utility"]], "Where to from here": [[988, "where-to-from-here"]], "Unsupervised learning": [[989, "unsupervised-learning"]], "User Guide": [[990, "user-guide"]], "Under Development": [[990, "under-development"]], "Available documentation for scikit-learn": [[991, "available-documentation-for-scikit-learn"]], "Visualizations": [[992, "visualizations"]], "Available Plotting Utilities": [[992, "available-plotting-utilities"]], "Display Objects": [[992, "display-objects"]], "Release History": [[993, "release-history"]], "Older Versions": [[995, "older-versions"]], "Version 0.12.1": [[995, "version-0-12-1"]], "Changelog": [[995, "changelog"], [995, "id1"], [995, "id3"], [995, "id6"], [995, "id9"], [995, "id12"], [995, "id14"], [995, "id16"], [995, "id18"], [995, "id19"], [996, "changelog"], [996, "id2"], [997, "changelog"], [998, "changelog"], [999, "changelog"], [999, "id2"], [1000, "changelog"], [1000, "id2"], [1001, "changelog"], [1001, "id1"], [1001, "id3"], [1002, "changelog"], [1002, "id2"], [1003, "changelog"], [1003, "id1"], [1003, "id5"], [1003, "id10"], [1003, "id23"], [1004, "changelog"], [1004, "id1"], [1004, "id2"], [1004, "id7"], [1005, "changelog"], [1005, "id1"], [1005, "id4"], [1006, "changelog"], [1006, "id1"], [1006, "id4"], [1007, "changelog"], [1007, "id1"], [1007, "id4"], [1008, "changelog"], [1008, "id6"], [1009, "changelog"], [1009, "id1"], [1009, "id7"], [1010, "changelog"], [1010, "id1"], [1010, "id9"], [1011, "changelog"], [1011, "id1"], [1011, "id6"], [1012, "changelog"], [1012, "id2"], [1012, "id5"], [1013, "changelog"]], "People": [[995, "people"], [995, "id2"], [995, "id5"], [995, "id8"], [995, "id11"], [995, "id13"], [995, "id15"], [995, "id17"], [996, "people"], [996, "id3"], [997, "people"], [998, "people"]], "Version 0.12": [[995, "version-0-12"]], "API changes summary": [[995, "api-changes-summary"], [995, "id4"], [995, "id7"], [995, "id10"], [996, "api-changes-summary"], [997, "api-changes-summary"], [998, "api-changes-summary"], [999, "api-changes-summary"], [1000, "api-changes-summary"], [1001, "api-changes-summary"], [1001, "id6"], [1002, "api-changes-summary"]], "Version 0.11": [[995, "version-0-11"]], "Highlights": [[995, "highlights"], [998, "highlights"], [999, "highlights"], [1002, "highlights"], [1003, "highlights"]], "Other changes": [[995, "other-changes"]], "Version 0.10": [[995, "version-0-10"]], "Version 0.9": [[995, "version-0-9"]], "Version 0.8": [[995, "version-0-8"]], "Version 0.7": [[995, "version-0-7"]], "Version 0.6": [[995, "version-0-6"]], "Version 0.5": [[995, "version-0-5"]], "New classes": [[995, "new-classes"]], "Fixes": [[995, "fixes"]], "External dependencies": [[995, "external-dependencies"]], "Removed modules": [[995, "removed-modules"]], "Misc": [[995, "misc"]], "Version 0.4": [[995, "version-0-4"]], "Earlier versions": [[995, "earlier-versions"]], "Version 0.13": [[996, "version-0-13"], [996, "changes-0-13"]], "Version 0.13.1": [[996, "version-0-13-1"]], "New Estimator Classes": [[996, "new-estimator-classes"]], "Version 0.14": [[997, "version-0-14"], [997, "changes-0-14"]], "Version 0.15": [[998, "version-0-15"], [998, "changes-0-15"]], "Version 0.15.2": [[998, "version-0-15-2"]], "Bug fixes": [[998, "bug-fixes"], [998, "id1"], [998, "id3"], [999, "bug-fixes"], [999, "id3"], [1000, "bug-fixes"], [1000, "id3"], [1001, "bug-fixes"], [1001, "id5"], [1002, "bug-fixes"], [1002, "id4"]], "Version 0.15.1": [[998, "version-0-15-1"]], "New features": [[998, "new-features"], [999, "new-features"], [1000, "new-features"], [1001, "new-features"], [1002, "new-features"]], "Enhancements": [[998, "enhancements"], [999, "enhancements"], [1000, "enhancements"], [1001, "enhancements"], [1001, "id4"], [1002, "enhancements"], [1002, "id3"]], "Documentation improvements": [[998, "documentation-improvements"], [999, "documentation-improvements"]], "Version 0.16": [[999, "version-0-16"], [999, "changes-0-16"]], "Version 0.16.1": [[999, "version-0-16-1"]], "Code Contributors": [[999, "code-contributors"], [1000, "code-contributors"], [1001, "code-contributors"], [1001, "id7"]], "Version 0.17": [[1000, "version-0-17"], [1000, "changes-0-17"]], "Version 0.17.1": [[1000, "version-0-17-1"]], "Version 0.18": [[1001, "version-0-18"], [1001, "changes-0-18"]], "Version 0.18.2": [[1001, "version-0-18-2"]], "Version 0.18.1": [[1001, "version-0-18-1"]], "Model Selection Enhancements and API Changes": [[1001, "model-selection-enhancements-and-api-changes"]], "Version 0.19": [[1002, "version-0-19"], [1002, "id1"]], "Version 0.19.2": [[1002, "version-0-19-2"]], "Related changes": [[1002, "related-changes"]], "Version 0.19.1": [[1002, "version-0-19-1"]], "API changes": [[1002, "api-changes"]], "Code and Documentation Contributors": [[1002, "code-and-documentation-contributors"], [1002, "id10"], [1003, "code-and-documentation-contributors"], [1003, "id8"], [1003, "id21"], [1003, "id41"]], "Changed models": [[1002, "changed-models"], [1003, "changed-models"], [1003, "id9"], [1003, "id22"], [1004, "changed-models"], [1004, "id6"], [1005, "changed-models"], [1006, "changed-models"], [1006, "id3"], [1007, "changed-models"], [1008, "changed-models"], [1009, "changed-models"], [1009, "id6"], [1010, "changed-models"], [1010, "id7"], [1011, "changed-models"], [1011, "id4"], [1012, "changed-models"]], "Version 0.20": [[1003, "version-0-20"]], "Version 0.20.4": [[1003, "version-0-20-4"]], "sklearn.cluster": [[1003, "sklearn-cluster"], [1003, "id2"], [1003, "id11"], [1003, "id24"], [1004, "sklearn-cluster"], [1004, "id8"], [1005, "sklearn-cluster"], [1005, "id5"], [1006, "sklearn-cluster"], [1006, "id2"], [1006, "id5"], [1007, "sklearn-cluster"], [1008, "sklearn-cluster"], [1008, "id1"], [1008, "id8"], [1009, "sklearn-cluster"], [1009, "id8"], [1010, "sklearn-cluster"], [1010, "id12"], [1011, "sklearn-cluster"], [1011, "id8"], [1012, "sklearn-cluster"], [1012, "id7"], [1013, "sklearn-cluster"]], "sklearn.compose": [[1003, "sklearn-compose"], [1003, "id3"], [1003, "id6"], [1003, "id12"], [1003, "id25"], [1004, "sklearn-compose"], [1004, "id9"], [1005, "sklearn-compose"], [1006, "sklearn-compose"], [1007, "sklearn-compose"], [1007, "id5"], [1008, "sklearn-compose"], [1009, "sklearn-compose"], [1010, "sklearn-compose"], [1011, "sklearn-compose"], [1012, "sklearn-compose"], [1012, "id8"], [1013, "sklearn-compose"]], "sklearn.decomposition": [[1003, "sklearn-decomposition"], [1003, "id4"], [1003, "id14"], [1003, "id28"], [1004, "sklearn-decomposition"], [1004, "id11"], [1005, "sklearn-decomposition"], [1006, "sklearn-decomposition"], [1006, "id6"], [1007, "sklearn-decomposition"], [1007, "id7"], [1008, "sklearn-decomposition"], [1008, "id10"], [1009, "sklearn-decomposition"], [1009, "id10"], [1010, "sklearn-decomposition"], [1010, "id14"], [1011, "sklearn-decomposition"], [1011, "id10"], [1012, "sklearn-decomposition"], [1013, "sklearn-decomposition"]], "sklearn.model_selection": [[1003, "sklearn-model-selection"], [1003, "id35"], [1004, "sklearn-model-selection"], [1005, "sklearn-model-selection"], [1005, "id9"], [1005, "id13"], [1006, "sklearn-model-selection"], [1007, "sklearn-model-selection"], [1007, "id13"], [1008, "sklearn-model-selection"], [1009, "sklearn-model-selection"], [1010, "sklearn-model-selection"], [1010, "id20"], [1011, "sklearn-model-selection"], [1012, "sklearn-model-selection"], [1013, "sklearn-model-selection"]], "sklearn.neighbors": [[1003, "sklearn-neighbors"], [1003, "id7"], [1003, "id18"], [1003, "id36"], [1004, "sklearn-neighbors"], [1004, "id5"], [1004, "id17"], [1005, "sklearn-neighbors"], [1005, "id11"], [1007, "sklearn-neighbors"], [1008, "sklearn-neighbors"], [1008, "id4"], [1008, "id17"], [1009, "sklearn-neighbors"], [1010, "sklearn-neighbors"], [1011, "sklearn-neighbors"], [1011, "id16"], [1012, "sklearn-neighbors"], [1012, "id13"]], "Version 0.20.3": [[1003, "version-0-20-3"]], "sklearn.covariance": [[1003, "sklearn-covariance"], [1003, "id26"], [1007, "sklearn-covariance"], [1008, "sklearn-covariance"], [1009, "sklearn-covariance"], [1011, "sklearn-covariance"], [1012, "sklearn-covariance"]], "sklearn.datasets": [[1003, "sklearn-datasets"], [1003, "id13"], [1003, "id27"], [1004, "sklearn-datasets"], [1004, "id10"], [1005, "sklearn-datasets"], [1006, "sklearn-datasets"], [1007, "sklearn-datasets"], [1008, "sklearn-datasets"], [1008, "id9"], [1009, "sklearn-datasets"], [1009, "id9"], [1010, "sklearn-datasets"], [1010, "id13"], [1011, "sklearn-datasets"], [1011, "id9"], [1012, "sklearn-datasets"], [1013, "sklearn-datasets"]], "sklearn.feature_extraction": [[1003, "sklearn-feature-extraction"], [1003, "id15"], [1003, "id30"], [1004, "sklearn-feature-extraction"], [1005, "sklearn-feature-extraction"], [1006, "sklearn-feature-extraction"], [1006, "id8"], [1007, "sklearn-feature-extraction"], [1007, "id9"], [1008, "sklearn-feature-extraction"], [1008, "id12"], [1009, "sklearn-feature-extraction"], [1010, "sklearn-feature-extraction"], [1011, "sklearn-feature-extraction"], [1012, "sklearn-feature-extraction"], [1013, "sklearn-feature-extraction"]], "sklearn.impute": [[1003, "sklearn-impute"], [1003, "id31"], [1004, "sklearn-impute"], [1004, "id13"], [1005, "sklearn-impute"], [1005, "id6"], [1006, "sklearn-impute"], [1007, "sklearn-impute"], [1008, "sklearn-impute"], [1009, "sklearn-impute"], [1009, "id12"], [1010, "sklearn-impute"], [1011, "sklearn-impute"], [1011, "id13"], [1012, "sklearn-impute"], [1013, "sklearn-impute"]], "sklearn.linear_model": [[1003, "sklearn-linear-model"], [1003, "id16"], [1003, "id32"], [1004, "sklearn-linear-model"], [1004, "id15"], [1005, "sklearn-linear-model"], [1006, "sklearn-linear-model"], [1006, "id9"], [1007, "sklearn-linear-model"], [1007, "id11"], [1008, "sklearn-linear-model"], [1008, "id3"], [1008, "id14"], [1009, "sklearn-linear-model"], [1009, "id13"], [1010, "sklearn-linear-model"], [1010, "id18"], [1011, "sklearn-linear-model"], [1012, "sklearn-linear-model"], [1012, "id11"], [1013, "sklearn-linear-model"]], "sklearn.preprocessing": [[1003, "sklearn-preprocessing"], [1003, "id19"], [1003, "id37"], [1004, "sklearn-preprocessing"], [1004, "id18"], [1005, "sklearn-preprocessing"], [1005, "id12"], [1006, "sklearn-preprocessing"], [1007, "sklearn-preprocessing"], [1007, "id15"], [1008, "sklearn-preprocessing"], [1008, "id19"], [1009, "sklearn-preprocessing"], [1009, "id4"], [1009, "id16"], [1010, "sklearn-preprocessing"], [1010, "id4"], [1010, "id22"], [1011, "sklearn-preprocessing"], [1011, "id17"], [1012, "sklearn-preprocessing"], [1012, "id14"], [1013, "sklearn-preprocessing"]], "sklearn.svm": [[1003, "sklearn-svm"], [1003, "id38"], [1004, "sklearn-svm"], [1005, "sklearn-svm"], [1006, "sklearn-svm"], [1007, "sklearn-svm"], [1008, "sklearn-svm"], [1008, "id20"], [1009, "sklearn-svm"], [1010, "sklearn-svm"], [1011, "sklearn-svm"]], "Version 0.20.2": [[1003, "version-0-20-2"]], "sklearn.metrics": [[1003, "sklearn-metrics"], [1003, "id17"], [1003, "id33"], [1004, "sklearn-metrics"], [1004, "id4"], [1004, "id16"], [1005, "sklearn-metrics"], [1005, "id2"], [1005, "id8"], [1006, "sklearn-metrics"], [1006, "id10"], [1007, "sklearn-metrics"], [1007, "id2"], [1007, "id12"], [1008, "sklearn-metrics"], [1008, "id16"], [1009, "sklearn-metrics"], [1009, "id3"], [1009, "id15"], [1010, "sklearn-metrics"], [1011, "sklearn-metrics"], [1011, "id2"], [1011, "id14"], [1012, "sklearn-metrics"], [1012, "id12"], [1013, "sklearn-metrics"]], "sklearn.utils": [[1003, "sklearn-utils"], [1003, "id20"], [1003, "id39"], [1004, "sklearn-utils"], [1005, "sklearn-utils"], [1005, "id14"], [1006, "sklearn-utils"], [1006, "id12"], [1007, "sklearn-utils"], [1007, "id18"], [1008, "sklearn-utils"], [1008, "id5"], [1008, "id22"], [1009, "sklearn-utils"], [1009, "id18"], [1010, "sklearn-utils"], [1010, "id6"], [1010, "id24"], [1011, "sklearn-utils"], [1012, "sklearn-utils"], [1012, "id3"], [1012, "id16"]], "Version 0.20.1": [[1003, "version-0-20-1"]], "sklearn.ensemble": [[1003, "sklearn-ensemble"], [1003, "id29"], [1004, "sklearn-ensemble"], [1004, "id12"], [1005, "sklearn-ensemble"], [1006, "sklearn-ensemble"], [1006, "id7"], [1007, "sklearn-ensemble"], [1007, "id8"], [1008, "sklearn-ensemble"], [1008, "id2"], [1008, "id11"], [1009, "sklearn-ensemble"], [1010, "sklearn-ensemble"], [1010, "id3"], [1010, "id15"], [1011, "sklearn-ensemble"], [1011, "id11"], [1012, "sklearn-ensemble"], [1012, "id9"], [1013, "sklearn-ensemble"]], "sklearn.mixture": [[1003, "sklearn-mixture"], [1003, "id34"], [1004, "sklearn-mixture"], [1008, "sklearn-mixture"], [1009, "sklearn-mixture"], [1011, "sklearn-mixture"], [1011, "id15"], [1012, "sklearn-mixture"]], "Version 0.20.0": [[1003, "version-0-20-0"]], "Known Major Bugs": [[1003, "known-major-bugs"], [1004, "known-major-bugs"]], "sklearn.discriminant_analysis": [[1003, "sklearn-discriminant-analysis"], [1004, "sklearn-discriminant-analysis"], [1007, "sklearn-discriminant-analysis"], [1009, "sklearn-discriminant-analysis"], [1010, "sklearn-discriminant-analysis"], [1011, "sklearn-discriminant-analysis"]], "sklearn.dummy": [[1003, "sklearn-dummy"], [1004, "sklearn-dummy"], [1005, "sklearn-dummy"], [1008, "sklearn-dummy"], [1009, "sklearn-dummy"], [1013, "sklearn-dummy"]], "sklearn.feature_selection": [[1003, "sklearn-feature-selection"], [1005, "sklearn-feature-selection"], [1006, "sklearn-feature-selection"], [1007, "sklearn-feature-selection"], [1008, "sklearn-feature-selection"], [1008, "id13"], [1009, "sklearn-feature-selection"], [1009, "id2"], [1009, "id11"], [1010, "sklearn-feature-selection"], [1010, "id16"], [1011, "sklearn-feature-selection"], [1011, "id12"], [1012, "sklearn-feature-selection"], [1013, "sklearn-feature-selection"]], "sklearn.gaussian_process": [[1003, "sklearn-gaussian-process"], [1005, "sklearn-gaussian-process"], [1006, "sklearn-gaussian-process"], [1007, "sklearn-gaussian-process"], [1007, "id10"], [1008, "sklearn-gaussian-process"], [1009, "sklearn-gaussian-process"], [1010, "sklearn-gaussian-process"], [1011, "sklearn-gaussian-process"]], "sklearn.isotonic": [[1003, "sklearn-isotonic"], [1004, "sklearn-isotonic"], [1005, "sklearn-isotonic"], [1007, "sklearn-isotonic"], [1009, "sklearn-isotonic"], [1010, "sklearn-isotonic"]], "sklearn.manifold": [[1003, "sklearn-manifold"], [1004, "sklearn-manifold"], [1005, "sklearn-manifold"], [1006, "sklearn-manifold"], [1007, "sklearn-manifold"], [1008, "sklearn-manifold"], [1008, "id15"], [1009, "sklearn-manifold"], [1009, "id14"], [1010, "sklearn-manifold"], [1010, "id19"], [1011, "sklearn-manifold"], [1013, "sklearn-manifold"]], "sklearn.multioutput": [[1003, "sklearn-multioutput"], [1004, "sklearn-multioutput"], [1005, "sklearn-multioutput"], [1006, "sklearn-multioutput"], [1007, "sklearn-multioutput"], [1007, "id14"], [1010, "sklearn-multioutput"], [1011, "sklearn-multioutput"], [1012, "sklearn-multioutput"], [1013, "sklearn-multioutput"]], "sklearn.naive_bayes": [[1003, "sklearn-naive-bayes"], [1005, "sklearn-naive-bayes"], [1005, "id10"], [1006, "sklearn-naive-bayes"], [1007, "sklearn-naive-bayes"], [1008, "sklearn-naive-bayes"], [1010, "sklearn-naive-bayes"], [1011, "sklearn-naive-bayes"]], "sklearn.neural_network": [[1003, "sklearn-neural-network"], [1004, "sklearn-neural-network"], [1005, "sklearn-neural-network"], [1006, "sklearn-neural-network"], [1007, "sklearn-neural-network"], [1008, "sklearn-neural-network"], [1009, "sklearn-neural-network"], [1010, "sklearn-neural-network"], [1010, "id21"], [1011, "sklearn-neural-network"]], "sklearn.pipeline": [[1003, "sklearn-pipeline"], [1004, "sklearn-pipeline"], [1005, "sklearn-pipeline"], [1006, "sklearn-pipeline"], [1007, "sklearn-pipeline"], [1008, "sklearn-pipeline"], [1008, "id18"], [1009, "sklearn-pipeline"], [1010, "sklearn-pipeline"], [1011, "sklearn-pipeline"], [1013, "sklearn-pipeline"]], "sklearn.tree": [[1003, "sklearn-tree"], [1004, "sklearn-tree"], [1004, "id19"], [1005, "sklearn-tree"], [1006, "sklearn-tree"], [1007, "sklearn-tree"], [1007, "id17"], [1008, "sklearn-tree"], [1008, "id21"], [1009, "sklearn-tree"], [1009, "id5"], [1009, "id17"], [1010, "sklearn-tree"], [1010, "id5"], [1010, "id23"], [1011, "sklearn-tree"], [1011, "id3"], [1011, "id18"], [1012, "sklearn-tree"], [1012, "id15"]], "Multiple modules": [[1003, "multiple-modules"], [1004, "multiple-modules"]], "Changes to estimator checks": [[1003, "changes-to-estimator-checks"], [1004, "changes-to-estimator-checks"], [1005, "changes-to-estimator-checks"]], "Version 0.21": [[1004, "version-0-21"]], "Version 0.21.3": [[1004, "version-0-21-3"]], "sklearn.inspection": [[1004, "sklearn-inspection"], [1004, "id3"], [1004, "id14"], [1005, "sklearn-inspection"], [1005, "id7"], [1006, "sklearn-inspection"], [1006, "id11"], [1007, "sklearn-inspection"], [1008, "sklearn-inspection"], [1009, "sklearn-inspection"], [1010, "sklearn-inspection"], [1010, "id17"], [1011, "sklearn-inspection"], [1012, "sklearn-inspection"], [1012, "id10"]], "Version 0.21.2": [[1004, "version-0-21-2"]], "sklearn.utils.sparsefuncs": [[1004, "sklearn-utils-sparsefuncs"]], "Version 0.21.1": [[1004, "version-0-21-1"]], "Version 0.21.0": [[1004, "version-0-21-0"]], "sklearn.base": [[1004, "sklearn-base"], [1005, "sklearn-base"], [1007, "sklearn-base"], [1008, "sklearn-base"], [1009, "sklearn-base"], [1010, "sklearn-base"], [1010, "id2"], [1010, "id10"], [1011, "sklearn-base"], [1012, "sklearn-base"]], "sklearn.calibration": [[1004, "sklearn-calibration"], [1005, "sklearn-calibration"], [1007, "sklearn-calibration"], [1008, "sklearn-calibration"], [1008, "id7"], [1009, "sklearn-calibration"], [1010, "sklearn-calibration"], [1010, "id11"], [1011, "sklearn-calibration"], [1011, "id7"], [1012, "sklearn-calibration"], [1012, "id6"]], "sklearn.externals": [[1004, "sklearn-externals"]], "sklearn.multiclass": [[1004, "sklearn-multiclass"], [1007, "sklearn-multiclass"], [1008, "sklearn-multiclass"], [1009, "sklearn-multiclass"]], "Version 0.22": [[1005, "version-0-22"]], "Version 0.22.2.post1": [[1005, "version-0-22-2-post1"]], "Version 0.22.1": [[1005, "version-0-22-1"]], "sklearn.semi_supervised": [[1005, "sklearn-semi-supervised"], [1006, "sklearn-semi-supervised"], [1007, "sklearn-semi-supervised"], [1007, "id3"], [1007, "id16"], [1011, "sklearn-semi-supervised"]], "Version 0.22.0": [[1005, "version-0-22-0"]], "Website update": [[1005, "website-update"]], "Clear definition of the public API": [[1005, "clear-definition-of-the-public-api"]], "Deprecations: using FutureWarning from now on": [[1005, "deprecations-using-futurewarning-from-now-on"]], "sklearn.cross_decomposition": [[1005, "sklearn-cross-decomposition"], [1007, "sklearn-cross-decomposition"], [1007, "id6"], [1009, "sklearn-cross-decomposition"], [1011, "sklearn-cross-decomposition"]], "sklearn.kernel_approximation": [[1005, "sklearn-kernel-approximation"], [1007, "sklearn-kernel-approximation"], [1008, "sklearn-kernel-approximation"], [1009, "sklearn-kernel-approximation"], [1010, "sklearn-kernel-approximation"], [1011, "sklearn-kernel-approximation"]], "Version 0.23": [[1006, "version-0-23"]], "Version 0.23.2": [[1006, "version-0-23-2"]], "Version 0.23.1": [[1006, "version-0-23-1"]], "Version 0.23.0": [[1006, "version-0-23-0"]], "Enforcing keyword-only arguments": [[1006, "enforcing-keyword-only-arguments"], [1008, "enforcing-keyword-only-arguments"]], "Version 0.24": [[1007, "version-0-24"]], "Version 0.24.2": [[1007, "version-0-24-2"]], "Version 0.24.1": [[1007, "version-0-24-1"]], "Packaging": [[1007, "packaging"]], "Version 0.24.0": [[1007, "version-0-24-0"]], "sklearn.exceptions": [[1007, "sklearn-exceptions"], [1011, "sklearn-exceptions"]], "Version 1.0": [[1008, "version-1-0"]], "Version 1.0.2": [[1008, "version-1-0-2"]], "Version 1.0.1": [[1008, "version-1-0-1"]], "Fixed models": [[1008, "fixed-models"]], "Version 1.0.0": [[1008, "version-1-0-0"]], "Minimal dependencies": [[1008, "minimal-dependencies"], [1009, "minimal-dependencies"]], "Version 1.1": [[1009, "version-1-1"]], "Version 1.1.3": [[1009, "version-1-1-3"]], "Version 1.1.2": [[1009, "version-1-1-2"]], "Version 1.1.1": [[1009, "version-1-1-1"]], "Version 1.1.0": [[1009, "version-1-1-0"]], "sklearn.random_projection": [[1009, "sklearn-random-projection"]], "Version 1.2": [[1010, "version-1-2"]], "Version 1.2.2": [[1010, "version-1-2-2"]], "Version 1.2.1": [[1010, "version-1-2-1"]], "Changes impacting all modules": [[1010, "changes-impacting-all-modules"], [1010, "id8"], [1011, "changes-impacting-all-modules"], [1011, "id5"], [1012, "changes-impacting-all-modules"]], "Version 1.2.0": [[1010, "version-1-2-0"]], "Version 1.3": [[1011, "version-1-3"]], "Version 1.3.2": [[1011, "version-1-3-2"]], "Version 1.3.1": [[1011, "version-1-3-1"]], "Version 1.3.0": [[1011, "version-1-3-0"]], "Changed displays": [[1011, "changed-displays"]], "Experimental / Under Development": [[1011, "experimental-under-development"]], "sklearn": [[1011, "sklearn"]], "Version 1.4": [[1012, "version-1-4"]], "Version 1.4.2": [[1012, "version-1-4-2"]], "Version 1.4.1": [[1012, "version-1-4-1"]], "DataFrame Support": [[1012, "dataframe-support"]], "Changes impacting many modules": [[1012, "changes-impacting-many-modules"]], "Version 1.4.0": [[1012, "version-1-4-0"]], "Support for SciPy sparse arrays": [[1012, "support-for-scipy-sparse-arrays"]], "Support for Array API": [[1012, "support-for-array-api"]], "Private Loss Function Module": [[1012, "private-loss-function-module"]], "sklearn.kernel_ridge": [[1012, "sklearn-kernel-ridge"]], "Version 1.5": [[1013, "version-1-5"]], "Version 1.5.0": [[1013, "version-1-5-0"]], "Support for building with Meson": [[1013, "support-for-building-with-meson"]]}, "indexentries": {"1d": [[360, "term-1d"]], "1d array": [[360, "term-1d-array"]], "2d": [[360, "term-2d"]], "2d array": [[360, "term-2d-array"]], "api": [[360, "term-API"]], "cv splitter": [[360, "term-CV-splitter"]], "slep": [[360, "term-SLEP"]], "sleps": [[360, "term-SLEPs"]], "x": [[360, "term-X"]], "xt": [[360, "term-Xt"]], "y": [[360, "term-Y"], [360, "term-y"]], "_estimator_type": [[360, "term-_estimator_type"]], "array-like": [[360, "term-array-like"]], "attribute": [[360, "term-attribute"]], "attributes": [[360, "term-attributes"]], "backwards compatibility": [[360, "term-backwards-compatibility"]], "binary": [[360, "term-binary"]], "callable": [[360, "term-callable"]], "categorical feature": [[360, "term-categorical-feature"]], "class_weight": [[360, "term-class_weight"]], "classes_": [[360, "term-classes_"]], "classifier": [[360, "term-classifier"]], "classifiers": [[360, "term-classifiers"]], "clone": [[360, "term-clone"]], "cloned": [[360, "term-cloned"]], "clusterer": [[360, "term-clusterer"]], "clusterers": [[360, "term-clusterers"]], "coef_": [[360, "term-coef_"]], "common tests": [[360, "term-common-tests"]], "components_": [[360, "term-components_"]], "consumer": [[360, "term-consumer"]], "continuous": [[360, "term-continuous"]], "continuous multi-output": [[360, "term-continuous-multi-output"]], "continuous multioutput": [[360, "term-continuous-multioutput"]], "cross fitting": [[360, "term-0"]], "cross validation": [[360, "term-1"]], "cross-fitting": [[360, "term-cross-fitting"]], "cross-validation": [[360, "term-cross-validation"]], "cross-validation estimator": [[360, "term-cross-validation-estimator"]], "cross-validation generator": [[360, "term-cross-validation-generator"]], "cross-validation splitter": [[360, "term-cross-validation-splitter"]], "cv": [[360, "term-cv"]], "data leakage": [[360, "term-data-leakage"]], "data type": [[360, "term-data-type"]], "decision_function": [[360, "term-decision_function"]], "density estimator": [[360, "term-density-estimator"]], "deprecation": [[360, "term-deprecation"]], "dimensionality": [[360, "term-dimensionality"]], "docstring": [[360, "term-docstring"]], "double underscore": [[360, "term-double-underscore"]], "double underscore notation": [[360, "term-double-underscore-notation"]], "dtype": [[360, "term-dtype"]], "duck typing": [[360, "term-duck-typing"]], "early stopping": [[360, "term-early-stopping"]], "embedding_": [[360, "term-embedding_"]], "estimator": [[360, "term-estimator"]], "estimator instance": [[360, "term-estimator-instance"]], "estimator tags": [[360, "term-estimator-tags"]], "estimators": [[360, "term-estimators"]], "evaluation metric": [[360, "term-evaluation-metric"]], "evaluation metrics": [[360, "term-evaluation-metrics"]], "examples": [[360, "term-examples"]], "experimental": [[360, "term-experimental"]], "feature": [[360, "term-feature"]], "feature extractor": [[360, "term-feature-extractor"]], "feature extractors": [[360, "term-feature-extractors"]], "feature vector": [[360, "term-feature-vector"]], "feature_importances_": [[360, "term-feature_importances_"]], "features": [[360, "term-features"]], "fit": [[360, "term-fit"]], "fit_predict": [[360, "term-fit_predict"]], "fit_transform": [[360, "term-fit_transform"]], "fitted": [[360, "term-fitted"]], "fitting": [[360, "term-fitting"]], "function": [[360, "term-function"]], "gallery": [[360, "term-gallery"]], "get_feature_names_out": [[360, "term-get_feature_names_out"]], "get_n_splits": [[360, "term-get_n_splits"]], "get_params": [[360, "term-get_params"]], "groups": [[360, "term-groups"]], "hyper-parameter": [[360, "term-hyper-parameter"]], "hyperparameter": [[360, "term-hyperparameter"]], "imputation": [[360, "term-imputation"]], "impute": [[360, "term-impute"]], "indexable": [[360, "term-indexable"]], "induction": [[360, "term-induction"]], "inductive": [[360, "term-inductive"]], "joblib": [[360, "term-joblib"]], "kernel": [[360, "term-kernel"]], "label indicator matrix": [[360, "term-label-indicator-matrix"]], "labels_": [[360, "term-labels_"]], "leakage": [[360, "term-leakage"]], "max_iter": [[360, "term-max_iter"]], "memmapping": [[360, "term-memmapping"]], "memory": [[360, "term-memory"]], "memory map": [[360, "term-memory-map"]], "memory mapping": [[360, "term-memory-mapping"]], "meta-estimator": [[360, "term-meta-estimator"]], "meta-estimators": [[360, "term-meta-estimators"]], "metadata": [[360, "term-metadata"]], "metaestimator": [[360, "term-metaestimator"]], "metaestimators": [[360, "term-metaestimators"]], "metric": [[360, "term-metric"]], "missing values": [[360, "term-missing-values"]], "multi-class": [[360, "term-multi-class"]], "multi-class multi-output": [[360, "term-multi-class-multi-output"]], "multi-label": [[360, "term-multi-label"]], "multi-output": [[360, "term-multi-output"]], "multi-output continuous": [[360, "term-multi-output-continuous"]], "multi-output multi-class": [[360, "term-multi-output-multi-class"]], "multiclass": [[360, "term-multiclass"]], "multiclass multioutput": [[360, "term-multiclass-multioutput"]], "multilabel": [[360, "term-multilabel"]], "multilabel indicator matrices": [[360, "term-multilabel-indicator-matrices"]], "multilabel indicator matrix": [[360, "term-multilabel-indicator-matrix"]], "multioutput": [[360, "term-multioutput"]], "multioutput continuous": [[360, "term-multioutput-continuous"]], "multioutput multiclass": [[360, "term-multioutput-multiclass"]], "n_components": [[360, "term-n_components"]], "n_features": [[360, "term-n_features"]], "n_iter_": [[360, "term-n_iter_"]], "n_iter_no_change": [[360, "term-n_iter_no_change"]], "n_jobs": [[360, "term-n_jobs"]], "n_outputs": [[360, "term-n_outputs"]], "n_samples": [[360, "term-n_samples"]], "n_targets": [[360, "term-n_targets"]], "narrative docs": [[360, "term-narrative-docs"]], "narrative documentation": [[360, "term-narrative-documentation"]], "np": [[360, "term-np"]], "online learning": [[360, "term-online-learning"]], "out-of-core": [[360, "term-out-of-core"]], "outlier detector": [[360, "term-outlier-detector"]], "outlier detectors": [[360, "term-outlier-detectors"]], "outputs": [[360, "term-outputs"]], "pair": [[360, "term-pair"]], "pairwise metric": [[360, "term-pairwise-metric"]], "pairwise metrics": [[360, "term-pairwise-metrics"]], "param": [[360, "term-param"]], "parameter": [[360, "term-parameter"]], "parameters": [[360, "term-parameters"]], "params": [[360, "term-params"]], "partial_fit": [[360, "term-partial_fit"]], "pd": [[360, "term-pd"]], "pos_label": [[360, "term-pos_label"]], "precomputed": [[360, "term-precomputed"]], "predict": [[360, "term-predict"]], "predict_log_proba": [[360, "term-predict_log_proba"]], "predict_proba": [[360, "term-predict_proba"]], "predictor": [[360, "term-predictor"]], "predictors": [[360, "term-predictors"]], "random_state": [[360, "term-random_state"]], "rectangular": [[360, "term-rectangular"]], "regressor": [[360, "term-regressor"]], "regressors": [[360, "term-regressors"]], "router": [[360, "term-router"]], "sample": [[360, "term-sample"]], "sample properties": [[360, "term-sample-properties"]], "sample property": [[360, "term-sample-property"]], "sample_weight": [[360, "term-sample_weight"]], "samples": [[360, "term-samples"]], "scikit-learn enhancement proposals": [[360, "term-scikit-learn-enhancement-proposals"]], "scikit-learn-contrib": [[360, "term-scikit-learn-contrib"]], "score": [[360, "term-score"]], "score_samples": [[360, "term-score_samples"]], "scorer": [[360, "term-scorer"]], "scoring": [[360, "term-scoring"]], "semi-supervised": [[360, "term-semi-supervised"]], "semi-supervised learning": [[360, "term-semi-supervised-learning"]], "semisupervised": [[360, "term-semisupervised"]], "set_params": [[360, "term-set_params"]], "sparse graph": [[360, "term-sparse-graph"]], "sparse matrix": [[360, "term-sparse-matrix"]], "split": [[360, "term-split"]], "stateless": [[360, "term-stateless"]], "supervised": [[360, "term-supervised"]], "supervised learning": [[360, "term-supervised-learning"]], "target": [[360, "term-target"]], "targets": [[360, "term-targets"]], "transduction": [[360, "term-transduction"]], "transductive": [[360, "term-transductive"]], "transform": [[360, "term-transform"]], "transformer": [[360, "term-transformer"]], "transformers": [[360, "term-transformers"]], "unlabeled": [[360, "term-unlabeled"]], "unlabeled data": [[360, "term-unlabeled-data"]], "unsupervised": [[360, "term-unsupervised"]], "unsupervised learning": [[360, "term-unsupervised-learning"]], "vectorizer": [[360, "term-vectorizer"]], "vectorizers": [[360, "term-vectorizers"]], "verbose": [[360, "term-verbose"]], "warm_start": [[360, "term-warm_start"]], "module": [[373, "module-sklearn"], [373, "module-sklearn.base"], [373, "module-sklearn.calibration"], [373, "module-sklearn.cluster"], [373, "module-sklearn.compose"], [373, "module-sklearn.covariance"], [373, "module-sklearn.cross_decomposition"], [373, "module-sklearn.datasets"], [373, "module-sklearn.decomposition"], [373, "module-sklearn.discriminant_analysis"], [373, "module-sklearn.dummy"], [373, "module-sklearn.ensemble"], [373, "module-sklearn.exceptions"], [373, "module-sklearn.experimental"], [373, "module-sklearn.feature_extraction"], [373, "module-sklearn.feature_extraction.image"], [373, "module-sklearn.feature_extraction.text"], [373, "module-sklearn.feature_selection"], [373, "module-sklearn.gaussian_process"], [373, "module-sklearn.gaussian_process.kernels"], [373, "module-sklearn.impute"], [373, "module-sklearn.inspection"], [373, "module-sklearn.isotonic"], [373, "module-sklearn.kernel_approximation"], [373, "module-sklearn.kernel_ridge"], [373, "module-sklearn.linear_model"], [373, "module-sklearn.manifold"], [373, "module-sklearn.metrics"], [373, "module-sklearn.metrics.cluster"], [373, "module-sklearn.metrics.pairwise"], [373, "module-sklearn.mixture"], [373, "module-sklearn.model_selection"], [373, "module-sklearn.multiclass"], [373, "module-sklearn.multioutput"], [373, "module-sklearn.naive_bayes"], [373, "module-sklearn.neighbors"], [373, "module-sklearn.neural_network"], [373, "module-sklearn.pipeline"], [373, "module-sklearn.preprocessing"], [373, "module-sklearn.random_projection"], [373, "module-sklearn.semi_supervised"], [373, "module-sklearn.svm"], [373, "module-sklearn.tree"], [373, "module-sklearn.utils"], [373, "module-sklearn.utils.arrayfuncs"], [373, "module-sklearn.utils.class_weight"], [373, "module-sklearn.utils.discovery"], [373, "module-sklearn.utils.estimator_checks"], [373, "module-sklearn.utils.extmath"], [373, "module-sklearn.utils.graph"], [373, "module-sklearn.utils.metadata_routing"], [373, "module-sklearn.utils.metaestimators"], [373, "module-sklearn.utils.multiclass"], [373, "module-sklearn.utils.parallel"], [373, "module-sklearn.utils.random"], [373, "module-sklearn.utils.sparsefuncs"], [373, "module-sklearn.utils.sparsefuncs_fast"], [373, "module-sklearn.utils.validation"], [544, "module-sklearn.experimental.enable_halving_search_cv"], [545, "module-sklearn.experimental.enable_iterative_imputer"]], "sklearn": [[373, "module-sklearn"]], "sklearn.base": [[373, "module-sklearn.base"]], "sklearn.calibration": [[373, "module-sklearn.calibration"]], "sklearn.cluster": [[373, "module-sklearn.cluster"]], "sklearn.compose": [[373, "module-sklearn.compose"]], "sklearn.covariance": [[373, "module-sklearn.covariance"]], "sklearn.cross_decomposition": [[373, "module-sklearn.cross_decomposition"]], "sklearn.datasets": [[373, "module-sklearn.datasets"]], "sklearn.decomposition": [[373, "module-sklearn.decomposition"]], "sklearn.discriminant_analysis": [[373, "module-sklearn.discriminant_analysis"]], "sklearn.dummy": [[373, "module-sklearn.dummy"]], "sklearn.ensemble": [[373, "module-sklearn.ensemble"]], "sklearn.exceptions": [[373, "module-sklearn.exceptions"]], "sklearn.experimental": [[373, "module-sklearn.experimental"]], "sklearn.feature_extraction": [[373, "module-sklearn.feature_extraction"]], "sklearn.feature_extraction.image": [[373, "module-sklearn.feature_extraction.image"]], "sklearn.feature_extraction.text": [[373, "module-sklearn.feature_extraction.text"]], "sklearn.feature_selection": [[373, "module-sklearn.feature_selection"]], "sklearn.gaussian_process": [[373, "module-sklearn.gaussian_process"]], "sklearn.gaussian_process.kernels": [[373, "module-sklearn.gaussian_process.kernels"]], "sklearn.impute": [[373, "module-sklearn.impute"]], "sklearn.inspection": [[373, "module-sklearn.inspection"]], "sklearn.isotonic": [[373, "module-sklearn.isotonic"]], "sklearn.kernel_approximation": [[373, "module-sklearn.kernel_approximation"]], "sklearn.kernel_ridge": [[373, "module-sklearn.kernel_ridge"]], "sklearn.linear_model": [[373, "module-sklearn.linear_model"]], "sklearn.manifold": [[373, "module-sklearn.manifold"]], "sklearn.metrics": [[373, "module-sklearn.metrics"]], "sklearn.metrics.cluster": [[373, "module-sklearn.metrics.cluster"]], "sklearn.metrics.pairwise": [[373, "module-sklearn.metrics.pairwise"]], "sklearn.mixture": [[373, "module-sklearn.mixture"]], "sklearn.model_selection": [[373, "module-sklearn.model_selection"]], "sklearn.multiclass": [[373, "module-sklearn.multiclass"]], "sklearn.multioutput": [[373, "module-sklearn.multioutput"]], "sklearn.naive_bayes": [[373, "module-sklearn.naive_bayes"]], "sklearn.neighbors": [[373, "module-sklearn.neighbors"]], "sklearn.neural_network": [[373, "module-sklearn.neural_network"]], "sklearn.pipeline": [[373, "module-sklearn.pipeline"]], "sklearn.preprocessing": [[373, "module-sklearn.preprocessing"]], "sklearn.random_projection": [[373, "module-sklearn.random_projection"]], "sklearn.semi_supervised": [[373, "module-sklearn.semi_supervised"]], "sklearn.svm": [[373, "module-sklearn.svm"]], "sklearn.tree": [[373, "module-sklearn.tree"]], "sklearn.utils": [[373, "module-sklearn.utils"]], "sklearn.utils.arrayfuncs": [[373, "module-sklearn.utils.arrayfuncs"]], "sklearn.utils.class_weight": [[373, "module-sklearn.utils.class_weight"]], "sklearn.utils.discovery": [[373, "module-sklearn.utils.discovery"]], "sklearn.utils.estimator_checks": [[373, "module-sklearn.utils.estimator_checks"]], "sklearn.utils.extmath": [[373, "module-sklearn.utils.extmath"]], "sklearn.utils.graph": [[373, "module-sklearn.utils.graph"]], "sklearn.utils.metadata_routing": [[373, "module-sklearn.utils.metadata_routing"]], "sklearn.utils.metaestimators": [[373, "module-sklearn.utils.metaestimators"]], "sklearn.utils.multiclass": [[373, "module-sklearn.utils.multiclass"]], "sklearn.utils.parallel": [[373, "module-sklearn.utils.parallel"]], "sklearn.utils.random": [[373, "module-sklearn.utils.random"]], "sklearn.utils.sparsefuncs": [[373, "module-sklearn.utils.sparsefuncs"]], "sklearn.utils.sparsefuncs_fast": [[373, "module-sklearn.utils.sparsefuncs_fast"]], "sklearn.utils.validation": [[373, "module-sklearn.utils.validation"]], "dbscan() (in module sklearn.cluster)": [[385, "sklearn.cluster.dbscan"]], "fastica() (in module sklearn.decomposition)": [[386, "sklearn.decomposition.fastica"]], "oas() (in module sklearn.covariance)": [[387, "sklearn.covariance.oas"]], "baseestimator (class in sklearn.base)": [[388, "sklearn.base.BaseEstimator"]], "get_metadata_routing() (sklearn.base.baseestimator method)": [[388, "sklearn.base.BaseEstimator.get_metadata_routing"]], "get_params() (sklearn.base.baseestimator method)": [[388, "sklearn.base.BaseEstimator.get_params"]], "set_params() (sklearn.base.baseestimator method)": [[388, "sklearn.base.BaseEstimator.set_params"]], "biclustermixin (class in sklearn.base)": [[389, "sklearn.base.BiclusterMixin"]], "biclusters_ (sklearn.base.biclustermixin property)": [[389, "sklearn.base.BiclusterMixin.biclusters_"]], "get_indices() (sklearn.base.biclustermixin method)": [[389, "sklearn.base.BiclusterMixin.get_indices"]], "get_shape() (sklearn.base.biclustermixin method)": [[389, "sklearn.base.BiclusterMixin.get_shape"]], "get_submatrix() (sklearn.base.biclustermixin method)": [[389, "sklearn.base.BiclusterMixin.get_submatrix"]], "classnameprefixfeaturesoutmixin (class in sklearn.base)": [[390, "sklearn.base.ClassNamePrefixFeaturesOutMixin"]], "get_feature_names_out() (sklearn.base.classnameprefixfeaturesoutmixin method)": [[390, "sklearn.base.ClassNamePrefixFeaturesOutMixin.get_feature_names_out"]], "classifiermixin (class in sklearn.base)": [[391, "sklearn.base.ClassifierMixin"]], "score() (sklearn.base.classifiermixin method)": [[391, "sklearn.base.ClassifierMixin.score"]], "clustermixin (class in sklearn.base)": [[392, "sklearn.base.ClusterMixin"]], "fit_predict() (sklearn.base.clustermixin method)": [[392, "sklearn.base.ClusterMixin.fit_predict"]], "densitymixin (class in sklearn.base)": [[393, "sklearn.base.DensityMixin"]], "score() (sklearn.base.densitymixin method)": [[393, "sklearn.base.DensityMixin.score"]], "metaestimatormixin (class in sklearn.base)": [[394, "sklearn.base.MetaEstimatorMixin"]], "onetoonefeaturemixin (class in sklearn.base)": [[395, "sklearn.base.OneToOneFeatureMixin"]], "get_feature_names_out() (sklearn.base.onetoonefeaturemixin method)": [[395, "sklearn.base.OneToOneFeatureMixin.get_feature_names_out"]], "outliermixin (class in sklearn.base)": [[396, "sklearn.base.OutlierMixin"]], "fit_predict() (sklearn.base.outliermixin method)": [[396, "sklearn.base.OutlierMixin.fit_predict"]], "regressormixin (class in sklearn.base)": [[397, "sklearn.base.RegressorMixin"]], "score() (sklearn.base.regressormixin method)": [[397, "sklearn.base.RegressorMixin.score"]], "transformermixin (class in sklearn.base)": [[398, "sklearn.base.TransformerMixin"]], "fit_transform() (sklearn.base.transformermixin method)": [[398, "sklearn.base.TransformerMixin.fit_transform"]], "set_output() (sklearn.base.transformermixin method)": [[398, "sklearn.base.TransformerMixin.set_output"]], "clone() (in module sklearn.base)": [[399, "sklearn.base.clone"]], "is_classifier() (in module sklearn.base)": [[400, "sklearn.base.is_classifier"]], "is_regressor() (in module sklearn.base)": [[401, "sklearn.base.is_regressor"]], "calibratedclassifiercv (class in sklearn.calibration)": [[402, "sklearn.calibration.CalibratedClassifierCV"]], "fit() (sklearn.calibration.calibratedclassifiercv method)": [[402, "sklearn.calibration.CalibratedClassifierCV.fit"]], "get_metadata_routing() (sklearn.calibration.calibratedclassifiercv method)": [[402, "sklearn.calibration.CalibratedClassifierCV.get_metadata_routing"]], "get_params() (sklearn.calibration.calibratedclassifiercv method)": [[402, "sklearn.calibration.CalibratedClassifierCV.get_params"]], "predict() (sklearn.calibration.calibratedclassifiercv method)": [[402, "sklearn.calibration.CalibratedClassifierCV.predict"]], "predict_proba() (sklearn.calibration.calibratedclassifiercv method)": [[402, "sklearn.calibration.CalibratedClassifierCV.predict_proba"]], "score() (sklearn.calibration.calibratedclassifiercv method)": [[402, "sklearn.calibration.CalibratedClassifierCV.score"]], "set_fit_request() (sklearn.calibration.calibratedclassifiercv method)": [[402, "sklearn.calibration.CalibratedClassifierCV.set_fit_request"]], "set_params() (sklearn.calibration.calibratedclassifiercv method)": [[402, "sklearn.calibration.CalibratedClassifierCV.set_params"]], "set_score_request() (sklearn.calibration.calibratedclassifiercv method)": [[402, "sklearn.calibration.CalibratedClassifierCV.set_score_request"]], "calibrationdisplay (class in sklearn.calibration)": [[403, "sklearn.calibration.CalibrationDisplay"]], "from_estimator() (sklearn.calibration.calibrationdisplay class method)": [[403, "sklearn.calibration.CalibrationDisplay.from_estimator"]], "from_predictions() (sklearn.calibration.calibrationdisplay class method)": [[403, "sklearn.calibration.CalibrationDisplay.from_predictions"]], "plot() (sklearn.calibration.calibrationdisplay method)": [[403, "sklearn.calibration.CalibrationDisplay.plot"]], "calibration_curve() (in module sklearn.calibration)": [[404, "sklearn.calibration.calibration_curve"]], "affinitypropagation (class in sklearn.cluster)": [[405, "sklearn.cluster.AffinityPropagation"]], "fit() (sklearn.cluster.affinitypropagation method)": [[405, "sklearn.cluster.AffinityPropagation.fit"]], "fit_predict() (sklearn.cluster.affinitypropagation method)": [[405, "sklearn.cluster.AffinityPropagation.fit_predict"]], "get_metadata_routing() (sklearn.cluster.affinitypropagation method)": [[405, "sklearn.cluster.AffinityPropagation.get_metadata_routing"]], "get_params() (sklearn.cluster.affinitypropagation method)": [[405, "sklearn.cluster.AffinityPropagation.get_params"]], "predict() (sklearn.cluster.affinitypropagation method)": [[405, "sklearn.cluster.AffinityPropagation.predict"]], "set_params() (sklearn.cluster.affinitypropagation method)": [[405, "sklearn.cluster.AffinityPropagation.set_params"]], "agglomerativeclustering (class in sklearn.cluster)": [[406, "sklearn.cluster.AgglomerativeClustering"]], "fit() (sklearn.cluster.agglomerativeclustering method)": [[406, "sklearn.cluster.AgglomerativeClustering.fit"]], "fit_predict() (sklearn.cluster.agglomerativeclustering method)": [[406, "sklearn.cluster.AgglomerativeClustering.fit_predict"]], "get_metadata_routing() (sklearn.cluster.agglomerativeclustering method)": [[406, "sklearn.cluster.AgglomerativeClustering.get_metadata_routing"]], "get_params() (sklearn.cluster.agglomerativeclustering method)": [[406, "sklearn.cluster.AgglomerativeClustering.get_params"]], "set_params() (sklearn.cluster.agglomerativeclustering method)": [[406, "sklearn.cluster.AgglomerativeClustering.set_params"]], "birch (class in sklearn.cluster)": [[407, "sklearn.cluster.Birch"]], "fit() (sklearn.cluster.birch method)": [[407, "sklearn.cluster.Birch.fit"]], "fit_predict() (sklearn.cluster.birch method)": [[407, "sklearn.cluster.Birch.fit_predict"]], "fit_transform() (sklearn.cluster.birch method)": [[407, "sklearn.cluster.Birch.fit_transform"]], "get_feature_names_out() (sklearn.cluster.birch method)": [[407, "sklearn.cluster.Birch.get_feature_names_out"]], "get_metadata_routing() (sklearn.cluster.birch method)": [[407, "sklearn.cluster.Birch.get_metadata_routing"]], "get_params() (sklearn.cluster.birch method)": [[407, "sklearn.cluster.Birch.get_params"]], "partial_fit() (sklearn.cluster.birch method)": [[407, "sklearn.cluster.Birch.partial_fit"]], "predict() (sklearn.cluster.birch method)": [[407, "sklearn.cluster.Birch.predict"]], "set_output() (sklearn.cluster.birch method)": [[407, "sklearn.cluster.Birch.set_output"]], "set_params() (sklearn.cluster.birch method)": [[407, "sklearn.cluster.Birch.set_params"]], "transform() (sklearn.cluster.birch method)": [[407, "sklearn.cluster.Birch.transform"]], "bisectingkmeans (class in sklearn.cluster)": [[408, "sklearn.cluster.BisectingKMeans"]], "fit() (sklearn.cluster.bisectingkmeans method)": [[408, "sklearn.cluster.BisectingKMeans.fit"]], "fit_predict() (sklearn.cluster.bisectingkmeans method)": [[408, "sklearn.cluster.BisectingKMeans.fit_predict"]], "fit_transform() (sklearn.cluster.bisectingkmeans method)": [[408, "sklearn.cluster.BisectingKMeans.fit_transform"]], "get_feature_names_out() (sklearn.cluster.bisectingkmeans method)": [[408, "sklearn.cluster.BisectingKMeans.get_feature_names_out"]], "get_metadata_routing() (sklearn.cluster.bisectingkmeans method)": [[408, "sklearn.cluster.BisectingKMeans.get_metadata_routing"]], "get_params() (sklearn.cluster.bisectingkmeans method)": [[408, "sklearn.cluster.BisectingKMeans.get_params"]], "predict() (sklearn.cluster.bisectingkmeans method)": [[408, "sklearn.cluster.BisectingKMeans.predict"]], "score() (sklearn.cluster.bisectingkmeans method)": [[408, "sklearn.cluster.BisectingKMeans.score"]], "set_fit_request() (sklearn.cluster.bisectingkmeans method)": [[408, "sklearn.cluster.BisectingKMeans.set_fit_request"]], "set_output() (sklearn.cluster.bisectingkmeans method)": [[408, "sklearn.cluster.BisectingKMeans.set_output"]], "set_params() (sklearn.cluster.bisectingkmeans method)": [[408, "sklearn.cluster.BisectingKMeans.set_params"]], "set_predict_request() (sklearn.cluster.bisectingkmeans method)": [[408, "sklearn.cluster.BisectingKMeans.set_predict_request"]], "set_score_request() (sklearn.cluster.bisectingkmeans method)": [[408, "sklearn.cluster.BisectingKMeans.set_score_request"]], "transform() (sklearn.cluster.bisectingkmeans method)": [[408, "sklearn.cluster.BisectingKMeans.transform"]], "dbscan (class in sklearn.cluster)": [[409, "sklearn.cluster.DBSCAN"]], "fit() (sklearn.cluster.dbscan method)": [[409, "sklearn.cluster.DBSCAN.fit"]], "fit_predict() (sklearn.cluster.dbscan method)": [[409, "sklearn.cluster.DBSCAN.fit_predict"]], "get_metadata_routing() (sklearn.cluster.dbscan method)": [[409, "sklearn.cluster.DBSCAN.get_metadata_routing"]], "get_params() (sklearn.cluster.dbscan method)": [[409, "sklearn.cluster.DBSCAN.get_params"]], "set_fit_request() (sklearn.cluster.dbscan method)": [[409, "sklearn.cluster.DBSCAN.set_fit_request"]], "set_params() (sklearn.cluster.dbscan method)": [[409, "sklearn.cluster.DBSCAN.set_params"]], "featureagglomeration (class in sklearn.cluster)": [[410, "sklearn.cluster.FeatureAgglomeration"]], "fit() (sklearn.cluster.featureagglomeration method)": [[410, "sklearn.cluster.FeatureAgglomeration.fit"]], "fit_predict (sklearn.cluster.featureagglomeration property)": [[410, "sklearn.cluster.FeatureAgglomeration.fit_predict"]], "fit_transform() (sklearn.cluster.featureagglomeration method)": [[410, "sklearn.cluster.FeatureAgglomeration.fit_transform"]], "get_feature_names_out() (sklearn.cluster.featureagglomeration method)": [[410, "sklearn.cluster.FeatureAgglomeration.get_feature_names_out"]], "get_metadata_routing() (sklearn.cluster.featureagglomeration method)": [[410, "sklearn.cluster.FeatureAgglomeration.get_metadata_routing"]], "get_params() (sklearn.cluster.featureagglomeration method)": [[410, "sklearn.cluster.FeatureAgglomeration.get_params"]], "inverse_transform() (sklearn.cluster.featureagglomeration method)": [[410, "sklearn.cluster.FeatureAgglomeration.inverse_transform"]], "set_output() (sklearn.cluster.featureagglomeration method)": [[410, "sklearn.cluster.FeatureAgglomeration.set_output"]], "set_params() (sklearn.cluster.featureagglomeration method)": [[410, "sklearn.cluster.FeatureAgglomeration.set_params"]], "transform() (sklearn.cluster.featureagglomeration method)": [[410, "sklearn.cluster.FeatureAgglomeration.transform"]], "hdbscan (class in sklearn.cluster)": [[411, "sklearn.cluster.HDBSCAN"]], "dbscan_clustering() (sklearn.cluster.hdbscan method)": [[411, "sklearn.cluster.HDBSCAN.dbscan_clustering"]], "fit() (sklearn.cluster.hdbscan method)": [[411, "sklearn.cluster.HDBSCAN.fit"]], "fit_predict() (sklearn.cluster.hdbscan method)": [[411, "sklearn.cluster.HDBSCAN.fit_predict"]], "get_metadata_routing() (sklearn.cluster.hdbscan method)": [[411, "sklearn.cluster.HDBSCAN.get_metadata_routing"]], "get_params() (sklearn.cluster.hdbscan method)": [[411, "sklearn.cluster.HDBSCAN.get_params"]], "set_params() (sklearn.cluster.hdbscan method)": [[411, "sklearn.cluster.HDBSCAN.set_params"]], "kmeans (class in sklearn.cluster)": [[412, "sklearn.cluster.KMeans"]], "fit() (sklearn.cluster.kmeans method)": [[412, "sklearn.cluster.KMeans.fit"]], "fit_predict() (sklearn.cluster.kmeans method)": [[412, "sklearn.cluster.KMeans.fit_predict"]], "fit_transform() (sklearn.cluster.kmeans method)": [[412, "sklearn.cluster.KMeans.fit_transform"]], "get_feature_names_out() (sklearn.cluster.kmeans method)": [[412, "sklearn.cluster.KMeans.get_feature_names_out"]], "get_metadata_routing() (sklearn.cluster.kmeans method)": [[412, "sklearn.cluster.KMeans.get_metadata_routing"]], "get_params() (sklearn.cluster.kmeans method)": [[412, "sklearn.cluster.KMeans.get_params"]], "predict() (sklearn.cluster.kmeans method)": [[412, "sklearn.cluster.KMeans.predict"]], "score() (sklearn.cluster.kmeans method)": [[412, "sklearn.cluster.KMeans.score"]], "set_fit_request() (sklearn.cluster.kmeans method)": [[412, "sklearn.cluster.KMeans.set_fit_request"]], "set_output() (sklearn.cluster.kmeans method)": [[412, "sklearn.cluster.KMeans.set_output"]], "set_params() (sklearn.cluster.kmeans method)": [[412, "sklearn.cluster.KMeans.set_params"]], "set_predict_request() (sklearn.cluster.kmeans method)": [[412, "sklearn.cluster.KMeans.set_predict_request"]], "set_score_request() (sklearn.cluster.kmeans method)": [[412, "sklearn.cluster.KMeans.set_score_request"]], "transform() (sklearn.cluster.kmeans method)": [[412, "sklearn.cluster.KMeans.transform"]], "meanshift (class in sklearn.cluster)": [[413, "sklearn.cluster.MeanShift"]], "fit() (sklearn.cluster.meanshift method)": [[413, "sklearn.cluster.MeanShift.fit"]], "fit_predict() (sklearn.cluster.meanshift method)": [[413, "sklearn.cluster.MeanShift.fit_predict"]], "get_metadata_routing() (sklearn.cluster.meanshift method)": [[413, "sklearn.cluster.MeanShift.get_metadata_routing"]], "get_params() (sklearn.cluster.meanshift method)": [[413, "sklearn.cluster.MeanShift.get_params"]], "predict() (sklearn.cluster.meanshift method)": [[413, "sklearn.cluster.MeanShift.predict"]], "set_params() (sklearn.cluster.meanshift method)": [[413, "sklearn.cluster.MeanShift.set_params"]], "minibatchkmeans (class in sklearn.cluster)": [[414, "sklearn.cluster.MiniBatchKMeans"]], "fit() (sklearn.cluster.minibatchkmeans method)": [[414, "sklearn.cluster.MiniBatchKMeans.fit"]], "fit_predict() (sklearn.cluster.minibatchkmeans method)": [[414, "sklearn.cluster.MiniBatchKMeans.fit_predict"]], "fit_transform() (sklearn.cluster.minibatchkmeans method)": [[414, "sklearn.cluster.MiniBatchKMeans.fit_transform"]], "get_feature_names_out() (sklearn.cluster.minibatchkmeans method)": [[414, "sklearn.cluster.MiniBatchKMeans.get_feature_names_out"]], "get_metadata_routing() (sklearn.cluster.minibatchkmeans method)": [[414, "sklearn.cluster.MiniBatchKMeans.get_metadata_routing"]], "get_params() (sklearn.cluster.minibatchkmeans method)": [[414, "sklearn.cluster.MiniBatchKMeans.get_params"]], "partial_fit() (sklearn.cluster.minibatchkmeans method)": [[414, "sklearn.cluster.MiniBatchKMeans.partial_fit"]], "predict() (sklearn.cluster.minibatchkmeans method)": [[414, "sklearn.cluster.MiniBatchKMeans.predict"]], "score() (sklearn.cluster.minibatchkmeans method)": [[414, "sklearn.cluster.MiniBatchKMeans.score"]], "set_fit_request() (sklearn.cluster.minibatchkmeans method)": [[414, "sklearn.cluster.MiniBatchKMeans.set_fit_request"]], "set_output() (sklearn.cluster.minibatchkmeans method)": [[414, "sklearn.cluster.MiniBatchKMeans.set_output"]], "set_params() (sklearn.cluster.minibatchkmeans method)": [[414, "sklearn.cluster.MiniBatchKMeans.set_params"]], "set_partial_fit_request() (sklearn.cluster.minibatchkmeans method)": [[414, "sklearn.cluster.MiniBatchKMeans.set_partial_fit_request"]], "set_predict_request() (sklearn.cluster.minibatchkmeans method)": [[414, "sklearn.cluster.MiniBatchKMeans.set_predict_request"]], "set_score_request() (sklearn.cluster.minibatchkmeans method)": [[414, "sklearn.cluster.MiniBatchKMeans.set_score_request"]], "transform() (sklearn.cluster.minibatchkmeans method)": [[414, "sklearn.cluster.MiniBatchKMeans.transform"]], "optics (class in sklearn.cluster)": [[415, "sklearn.cluster.OPTICS"]], "fit() (sklearn.cluster.optics method)": [[415, "sklearn.cluster.OPTICS.fit"]], "fit_predict() (sklearn.cluster.optics method)": [[415, "sklearn.cluster.OPTICS.fit_predict"]], "get_metadata_routing() (sklearn.cluster.optics method)": [[415, "sklearn.cluster.OPTICS.get_metadata_routing"]], "get_params() (sklearn.cluster.optics method)": [[415, "sklearn.cluster.OPTICS.get_params"]], "set_params() (sklearn.cluster.optics method)": [[415, "sklearn.cluster.OPTICS.set_params"]], "spectralbiclustering (class in sklearn.cluster)": [[416, "sklearn.cluster.SpectralBiclustering"]], "biclusters_ (sklearn.cluster.spectralbiclustering property)": [[416, "sklearn.cluster.SpectralBiclustering.biclusters_"]], "fit() (sklearn.cluster.spectralbiclustering method)": [[416, "sklearn.cluster.SpectralBiclustering.fit"]], "get_indices() (sklearn.cluster.spectralbiclustering method)": [[416, "sklearn.cluster.SpectralBiclustering.get_indices"]], "get_metadata_routing() (sklearn.cluster.spectralbiclustering method)": [[416, "sklearn.cluster.SpectralBiclustering.get_metadata_routing"]], "get_params() (sklearn.cluster.spectralbiclustering method)": [[416, "sklearn.cluster.SpectralBiclustering.get_params"]], "get_shape() (sklearn.cluster.spectralbiclustering method)": [[416, "sklearn.cluster.SpectralBiclustering.get_shape"]], "get_submatrix() (sklearn.cluster.spectralbiclustering method)": [[416, "sklearn.cluster.SpectralBiclustering.get_submatrix"]], "set_params() (sklearn.cluster.spectralbiclustering method)": [[416, "sklearn.cluster.SpectralBiclustering.set_params"]], "spectralclustering (class in sklearn.cluster)": [[417, "sklearn.cluster.SpectralClustering"]], "fit() (sklearn.cluster.spectralclustering method)": [[417, "sklearn.cluster.SpectralClustering.fit"]], "fit_predict() (sklearn.cluster.spectralclustering method)": [[417, "sklearn.cluster.SpectralClustering.fit_predict"]], "get_metadata_routing() (sklearn.cluster.spectralclustering method)": [[417, "sklearn.cluster.SpectralClustering.get_metadata_routing"]], "get_params() (sklearn.cluster.spectralclustering method)": [[417, "sklearn.cluster.SpectralClustering.get_params"]], "set_params() (sklearn.cluster.spectralclustering method)": [[417, "sklearn.cluster.SpectralClustering.set_params"]], "spectralcoclustering (class in sklearn.cluster)": [[418, "sklearn.cluster.SpectralCoclustering"]], "biclusters_ (sklearn.cluster.spectralcoclustering property)": [[418, "sklearn.cluster.SpectralCoclustering.biclusters_"]], "fit() (sklearn.cluster.spectralcoclustering method)": [[418, "sklearn.cluster.SpectralCoclustering.fit"]], "get_indices() (sklearn.cluster.spectralcoclustering method)": [[418, "sklearn.cluster.SpectralCoclustering.get_indices"]], "get_metadata_routing() (sklearn.cluster.spectralcoclustering method)": [[418, "sklearn.cluster.SpectralCoclustering.get_metadata_routing"]], "get_params() (sklearn.cluster.spectralcoclustering method)": [[418, "sklearn.cluster.SpectralCoclustering.get_params"]], "get_shape() (sklearn.cluster.spectralcoclustering method)": [[418, "sklearn.cluster.SpectralCoclustering.get_shape"]], "get_submatrix() (sklearn.cluster.spectralcoclustering method)": [[418, "sklearn.cluster.SpectralCoclustering.get_submatrix"]], "set_params() (sklearn.cluster.spectralcoclustering method)": [[418, "sklearn.cluster.SpectralCoclustering.set_params"]], "affinity_propagation() (in module sklearn.cluster)": [[419, "sklearn.cluster.affinity_propagation"]], "cluster_optics_dbscan() (in module sklearn.cluster)": [[420, "sklearn.cluster.cluster_optics_dbscan"]], "cluster_optics_xi() (in module sklearn.cluster)": [[421, "sklearn.cluster.cluster_optics_xi"]], "compute_optics_graph() (in module sklearn.cluster)": [[422, "sklearn.cluster.compute_optics_graph"]], "estimate_bandwidth() (in module sklearn.cluster)": [[423, "sklearn.cluster.estimate_bandwidth"]], "k_means() (in module sklearn.cluster)": [[424, "sklearn.cluster.k_means"]], "kmeans_plusplus() (in module sklearn.cluster)": [[425, "sklearn.cluster.kmeans_plusplus"]], "mean_shift() (in module sklearn.cluster)": [[426, "sklearn.cluster.mean_shift"]], "spectral_clustering() (in module sklearn.cluster)": [[427, "sklearn.cluster.spectral_clustering"]], "ward_tree() (in module sklearn.cluster)": [[428, "sklearn.cluster.ward_tree"]], "columntransformer (class in sklearn.compose)": [[429, "sklearn.compose.ColumnTransformer"]], "fit() (sklearn.compose.columntransformer method)": [[429, "sklearn.compose.ColumnTransformer.fit"]], "fit_transform() (sklearn.compose.columntransformer method)": [[429, "sklearn.compose.ColumnTransformer.fit_transform"]], "get_feature_names_out() (sklearn.compose.columntransformer method)": [[429, "sklearn.compose.ColumnTransformer.get_feature_names_out"]], "get_metadata_routing() (sklearn.compose.columntransformer method)": [[429, "sklearn.compose.ColumnTransformer.get_metadata_routing"]], "get_params() (sklearn.compose.columntransformer method)": [[429, "sklearn.compose.ColumnTransformer.get_params"]], "named_transformers_ (sklearn.compose.columntransformer property)": [[429, "sklearn.compose.ColumnTransformer.named_transformers_"]], "set_output() (sklearn.compose.columntransformer method)": [[429, "sklearn.compose.ColumnTransformer.set_output"]], "set_params() (sklearn.compose.columntransformer method)": [[429, "sklearn.compose.ColumnTransformer.set_params"]], "transform() (sklearn.compose.columntransformer method)": [[429, "sklearn.compose.ColumnTransformer.transform"]], "transformedtargetregressor (class in sklearn.compose)": [[430, "sklearn.compose.TransformedTargetRegressor"]], "fit() (sklearn.compose.transformedtargetregressor method)": [[430, "sklearn.compose.TransformedTargetRegressor.fit"]], "get_metadata_routing() (sklearn.compose.transformedtargetregressor method)": [[430, "sklearn.compose.TransformedTargetRegressor.get_metadata_routing"]], "get_params() (sklearn.compose.transformedtargetregressor method)": [[430, "sklearn.compose.TransformedTargetRegressor.get_params"]], "n_features_in_ (sklearn.compose.transformedtargetregressor property)": [[430, "sklearn.compose.TransformedTargetRegressor.n_features_in_"]], "predict() (sklearn.compose.transformedtargetregressor method)": [[430, "sklearn.compose.TransformedTargetRegressor.predict"]], "score() (sklearn.compose.transformedtargetregressor method)": [[430, "sklearn.compose.TransformedTargetRegressor.score"]], "set_params() (sklearn.compose.transformedtargetregressor method)": [[430, "sklearn.compose.TransformedTargetRegressor.set_params"]], "set_score_request() (sklearn.compose.transformedtargetregressor method)": [[430, "sklearn.compose.TransformedTargetRegressor.set_score_request"]], "make_column_selector() (in module sklearn.compose)": [[431, "sklearn.compose.make_column_selector"]], "make_column_transformer() (in module sklearn.compose)": [[432, "sklearn.compose.make_column_transformer"]], "config_context() (in module sklearn)": [[433, "sklearn.config_context"]], "ellipticenvelope (class in sklearn.covariance)": [[434, "sklearn.covariance.EllipticEnvelope"]], "correct_covariance() (sklearn.covariance.ellipticenvelope method)": [[434, "sklearn.covariance.EllipticEnvelope.correct_covariance"]], "decision_function() (sklearn.covariance.ellipticenvelope method)": [[434, "sklearn.covariance.EllipticEnvelope.decision_function"]], "error_norm() (sklearn.covariance.ellipticenvelope method)": [[434, "sklearn.covariance.EllipticEnvelope.error_norm"]], "fit() (sklearn.covariance.ellipticenvelope method)": [[434, "sklearn.covariance.EllipticEnvelope.fit"]], "fit_predict() (sklearn.covariance.ellipticenvelope method)": [[434, "sklearn.covariance.EllipticEnvelope.fit_predict"]], "get_metadata_routing() (sklearn.covariance.ellipticenvelope method)": [[434, "sklearn.covariance.EllipticEnvelope.get_metadata_routing"]], "get_params() (sklearn.covariance.ellipticenvelope method)": [[434, "sklearn.covariance.EllipticEnvelope.get_params"]], "get_precision() (sklearn.covariance.ellipticenvelope method)": [[434, "sklearn.covariance.EllipticEnvelope.get_precision"]], "mahalanobis() (sklearn.covariance.ellipticenvelope method)": [[434, "sklearn.covariance.EllipticEnvelope.mahalanobis"]], "predict() (sklearn.covariance.ellipticenvelope method)": [[434, "sklearn.covariance.EllipticEnvelope.predict"]], "reweight_covariance() (sklearn.covariance.ellipticenvelope method)": [[434, "sklearn.covariance.EllipticEnvelope.reweight_covariance"]], "score() (sklearn.covariance.ellipticenvelope method)": [[434, "sklearn.covariance.EllipticEnvelope.score"]], "score_samples() (sklearn.covariance.ellipticenvelope method)": [[434, "sklearn.covariance.EllipticEnvelope.score_samples"]], "set_params() (sklearn.covariance.ellipticenvelope method)": [[434, "sklearn.covariance.EllipticEnvelope.set_params"]], "set_score_request() (sklearn.covariance.ellipticenvelope method)": [[434, "sklearn.covariance.EllipticEnvelope.set_score_request"]], "empiricalcovariance (class in sklearn.covariance)": [[435, "sklearn.covariance.EmpiricalCovariance"]], "error_norm() (sklearn.covariance.empiricalcovariance method)": [[435, "sklearn.covariance.EmpiricalCovariance.error_norm"]], "fit() (sklearn.covariance.empiricalcovariance method)": [[435, "sklearn.covariance.EmpiricalCovariance.fit"]], "get_metadata_routing() (sklearn.covariance.empiricalcovariance method)": [[435, "sklearn.covariance.EmpiricalCovariance.get_metadata_routing"]], "get_params() (sklearn.covariance.empiricalcovariance method)": [[435, "sklearn.covariance.EmpiricalCovariance.get_params"]], "get_precision() (sklearn.covariance.empiricalcovariance method)": [[435, "sklearn.covariance.EmpiricalCovariance.get_precision"]], "mahalanobis() (sklearn.covariance.empiricalcovariance method)": [[435, "sklearn.covariance.EmpiricalCovariance.mahalanobis"]], "score() (sklearn.covariance.empiricalcovariance method)": [[435, "sklearn.covariance.EmpiricalCovariance.score"]], "set_params() (sklearn.covariance.empiricalcovariance method)": [[435, "sklearn.covariance.EmpiricalCovariance.set_params"]], "set_score_request() (sklearn.covariance.empiricalcovariance method)": [[435, "sklearn.covariance.EmpiricalCovariance.set_score_request"]], "graphicallasso (class in sklearn.covariance)": [[436, "sklearn.covariance.GraphicalLasso"]], "error_norm() (sklearn.covariance.graphicallasso method)": [[436, "sklearn.covariance.GraphicalLasso.error_norm"]], "fit() (sklearn.covariance.graphicallasso method)": [[436, "sklearn.covariance.GraphicalLasso.fit"]], "get_metadata_routing() (sklearn.covariance.graphicallasso method)": [[436, "sklearn.covariance.GraphicalLasso.get_metadata_routing"]], "get_params() (sklearn.covariance.graphicallasso method)": [[436, "sklearn.covariance.GraphicalLasso.get_params"]], "get_precision() (sklearn.covariance.graphicallasso method)": [[436, "sklearn.covariance.GraphicalLasso.get_precision"]], "mahalanobis() (sklearn.covariance.graphicallasso method)": [[436, "sklearn.covariance.GraphicalLasso.mahalanobis"]], "score() (sklearn.covariance.graphicallasso method)": [[436, "sklearn.covariance.GraphicalLasso.score"]], "set_params() (sklearn.covariance.graphicallasso method)": [[436, "sklearn.covariance.GraphicalLasso.set_params"]], "set_score_request() (sklearn.covariance.graphicallasso method)": [[436, "sklearn.covariance.GraphicalLasso.set_score_request"]], "graphicallassocv (class in sklearn.covariance)": [[437, "sklearn.covariance.GraphicalLassoCV"]], "error_norm() (sklearn.covariance.graphicallassocv method)": [[437, "sklearn.covariance.GraphicalLassoCV.error_norm"]], "fit() (sklearn.covariance.graphicallassocv method)": [[437, "sklearn.covariance.GraphicalLassoCV.fit"]], "get_metadata_routing() (sklearn.covariance.graphicallassocv method)": [[437, "sklearn.covariance.GraphicalLassoCV.get_metadata_routing"]], "get_params() (sklearn.covariance.graphicallassocv method)": [[437, "sklearn.covariance.GraphicalLassoCV.get_params"]], "get_precision() (sklearn.covariance.graphicallassocv method)": [[437, "sklearn.covariance.GraphicalLassoCV.get_precision"]], "mahalanobis() (sklearn.covariance.graphicallassocv method)": [[437, "sklearn.covariance.GraphicalLassoCV.mahalanobis"]], "score() (sklearn.covariance.graphicallassocv method)": [[437, "sklearn.covariance.GraphicalLassoCV.score"]], "set_params() (sklearn.covariance.graphicallassocv method)": [[437, "sklearn.covariance.GraphicalLassoCV.set_params"]], "set_score_request() (sklearn.covariance.graphicallassocv method)": [[437, "sklearn.covariance.GraphicalLassoCV.set_score_request"]], "ledoitwolf (class in sklearn.covariance)": [[438, "sklearn.covariance.LedoitWolf"]], "error_norm() (sklearn.covariance.ledoitwolf method)": [[438, "sklearn.covariance.LedoitWolf.error_norm"]], "fit() (sklearn.covariance.ledoitwolf method)": [[438, "sklearn.covariance.LedoitWolf.fit"]], "get_metadata_routing() (sklearn.covariance.ledoitwolf method)": [[438, "sklearn.covariance.LedoitWolf.get_metadata_routing"]], "get_params() (sklearn.covariance.ledoitwolf method)": [[438, "sklearn.covariance.LedoitWolf.get_params"]], "get_precision() (sklearn.covariance.ledoitwolf method)": [[438, "sklearn.covariance.LedoitWolf.get_precision"]], "mahalanobis() (sklearn.covariance.ledoitwolf method)": [[438, "sklearn.covariance.LedoitWolf.mahalanobis"]], "score() (sklearn.covariance.ledoitwolf method)": [[438, "sklearn.covariance.LedoitWolf.score"]], "set_params() (sklearn.covariance.ledoitwolf method)": [[438, "sklearn.covariance.LedoitWolf.set_params"]], "set_score_request() (sklearn.covariance.ledoitwolf method)": [[438, "sklearn.covariance.LedoitWolf.set_score_request"]], "mincovdet (class in sklearn.covariance)": [[439, "sklearn.covariance.MinCovDet"]], "correct_covariance() (sklearn.covariance.mincovdet method)": [[439, "sklearn.covariance.MinCovDet.correct_covariance"]], "error_norm() (sklearn.covariance.mincovdet method)": [[439, "sklearn.covariance.MinCovDet.error_norm"]], "fit() (sklearn.covariance.mincovdet method)": [[439, "sklearn.covariance.MinCovDet.fit"]], "get_metadata_routing() (sklearn.covariance.mincovdet method)": [[439, "sklearn.covariance.MinCovDet.get_metadata_routing"]], "get_params() (sklearn.covariance.mincovdet method)": [[439, "sklearn.covariance.MinCovDet.get_params"]], "get_precision() (sklearn.covariance.mincovdet method)": [[439, "sklearn.covariance.MinCovDet.get_precision"]], "mahalanobis() (sklearn.covariance.mincovdet method)": [[439, "sklearn.covariance.MinCovDet.mahalanobis"]], "reweight_covariance() (sklearn.covariance.mincovdet method)": [[439, "sklearn.covariance.MinCovDet.reweight_covariance"]], "score() (sklearn.covariance.mincovdet method)": [[439, "sklearn.covariance.MinCovDet.score"]], "set_params() (sklearn.covariance.mincovdet method)": [[439, "sklearn.covariance.MinCovDet.set_params"]], "set_score_request() (sklearn.covariance.mincovdet method)": [[439, "sklearn.covariance.MinCovDet.set_score_request"]], "oas (class in sklearn.covariance)": [[440, "sklearn.covariance.OAS"]], "error_norm() (sklearn.covariance.oas method)": [[440, "sklearn.covariance.OAS.error_norm"]], "fit() (sklearn.covariance.oas method)": [[440, "sklearn.covariance.OAS.fit"]], "get_metadata_routing() (sklearn.covariance.oas method)": [[440, "sklearn.covariance.OAS.get_metadata_routing"]], "get_params() (sklearn.covariance.oas method)": [[440, "sklearn.covariance.OAS.get_params"]], "get_precision() (sklearn.covariance.oas method)": [[440, "sklearn.covariance.OAS.get_precision"]], "mahalanobis() (sklearn.covariance.oas method)": [[440, "sklearn.covariance.OAS.mahalanobis"]], "score() (sklearn.covariance.oas method)": [[440, "sklearn.covariance.OAS.score"]], "set_params() (sklearn.covariance.oas method)": [[440, "sklearn.covariance.OAS.set_params"]], "set_score_request() (sklearn.covariance.oas method)": [[440, "sklearn.covariance.OAS.set_score_request"]], "shrunkcovariance (class in sklearn.covariance)": [[441, "sklearn.covariance.ShrunkCovariance"]], "error_norm() (sklearn.covariance.shrunkcovariance method)": [[441, "sklearn.covariance.ShrunkCovariance.error_norm"]], "fit() (sklearn.covariance.shrunkcovariance method)": [[441, "sklearn.covariance.ShrunkCovariance.fit"]], "get_metadata_routing() (sklearn.covariance.shrunkcovariance method)": [[441, "sklearn.covariance.ShrunkCovariance.get_metadata_routing"]], "get_params() (sklearn.covariance.shrunkcovariance method)": [[441, "sklearn.covariance.ShrunkCovariance.get_params"]], "get_precision() (sklearn.covariance.shrunkcovariance method)": [[441, "sklearn.covariance.ShrunkCovariance.get_precision"]], "mahalanobis() (sklearn.covariance.shrunkcovariance method)": [[441, "sklearn.covariance.ShrunkCovariance.mahalanobis"]], "score() (sklearn.covariance.shrunkcovariance method)": [[441, "sklearn.covariance.ShrunkCovariance.score"]], "set_params() (sklearn.covariance.shrunkcovariance method)": [[441, "sklearn.covariance.ShrunkCovariance.set_params"]], "set_score_request() (sklearn.covariance.shrunkcovariance method)": [[441, "sklearn.covariance.ShrunkCovariance.set_score_request"]], "empirical_covariance() (in module sklearn.covariance)": [[442, "sklearn.covariance.empirical_covariance"]], "graphical_lasso() (in module sklearn.covariance)": [[443, "sklearn.covariance.graphical_lasso"]], "ledoit_wolf() (in module sklearn.covariance)": [[444, "sklearn.covariance.ledoit_wolf"]], "ledoit_wolf_shrinkage() (in module sklearn.covariance)": [[445, "sklearn.covariance.ledoit_wolf_shrinkage"]], "shrunk_covariance() (in module sklearn.covariance)": [[446, "sklearn.covariance.shrunk_covariance"]], "cca (class in sklearn.cross_decomposition)": [[447, "sklearn.cross_decomposition.CCA"]], "fit() (sklearn.cross_decomposition.cca method)": [[447, "sklearn.cross_decomposition.CCA.fit"]], "fit_transform() (sklearn.cross_decomposition.cca method)": [[447, "sklearn.cross_decomposition.CCA.fit_transform"]], "get_feature_names_out() (sklearn.cross_decomposition.cca method)": [[447, "sklearn.cross_decomposition.CCA.get_feature_names_out"]], "get_metadata_routing() (sklearn.cross_decomposition.cca method)": [[447, "sklearn.cross_decomposition.CCA.get_metadata_routing"]], "get_params() (sklearn.cross_decomposition.cca method)": [[447, "sklearn.cross_decomposition.CCA.get_params"]], "inverse_transform() (sklearn.cross_decomposition.cca method)": [[447, "sklearn.cross_decomposition.CCA.inverse_transform"]], "predict() (sklearn.cross_decomposition.cca method)": [[447, "sklearn.cross_decomposition.CCA.predict"]], "score() (sklearn.cross_decomposition.cca method)": [[447, "sklearn.cross_decomposition.CCA.score"]], "set_output() (sklearn.cross_decomposition.cca method)": [[447, "sklearn.cross_decomposition.CCA.set_output"]], "set_params() (sklearn.cross_decomposition.cca method)": [[447, "sklearn.cross_decomposition.CCA.set_params"]], "set_predict_request() (sklearn.cross_decomposition.cca method)": [[447, "sklearn.cross_decomposition.CCA.set_predict_request"]], "set_score_request() (sklearn.cross_decomposition.cca method)": [[447, "sklearn.cross_decomposition.CCA.set_score_request"]], "set_transform_request() (sklearn.cross_decomposition.cca method)": [[447, "sklearn.cross_decomposition.CCA.set_transform_request"]], "transform() (sklearn.cross_decomposition.cca method)": [[447, "sklearn.cross_decomposition.CCA.transform"]], "plscanonical (class in sklearn.cross_decomposition)": [[448, "sklearn.cross_decomposition.PLSCanonical"]], "fit() (sklearn.cross_decomposition.plscanonical method)": [[448, "sklearn.cross_decomposition.PLSCanonical.fit"]], "fit_transform() (sklearn.cross_decomposition.plscanonical method)": [[448, "sklearn.cross_decomposition.PLSCanonical.fit_transform"]], "get_feature_names_out() (sklearn.cross_decomposition.plscanonical method)": [[448, "sklearn.cross_decomposition.PLSCanonical.get_feature_names_out"]], "get_metadata_routing() (sklearn.cross_decomposition.plscanonical method)": [[448, "sklearn.cross_decomposition.PLSCanonical.get_metadata_routing"]], "get_params() (sklearn.cross_decomposition.plscanonical method)": [[448, "sklearn.cross_decomposition.PLSCanonical.get_params"]], "inverse_transform() (sklearn.cross_decomposition.plscanonical method)": [[448, "sklearn.cross_decomposition.PLSCanonical.inverse_transform"]], "predict() (sklearn.cross_decomposition.plscanonical method)": [[448, "sklearn.cross_decomposition.PLSCanonical.predict"]], "score() (sklearn.cross_decomposition.plscanonical method)": [[448, "sklearn.cross_decomposition.PLSCanonical.score"]], "set_output() (sklearn.cross_decomposition.plscanonical method)": [[448, "sklearn.cross_decomposition.PLSCanonical.set_output"]], "set_params() (sklearn.cross_decomposition.plscanonical method)": [[448, "sklearn.cross_decomposition.PLSCanonical.set_params"]], "set_predict_request() (sklearn.cross_decomposition.plscanonical method)": [[448, "sklearn.cross_decomposition.PLSCanonical.set_predict_request"]], "set_score_request() (sklearn.cross_decomposition.plscanonical method)": [[448, "sklearn.cross_decomposition.PLSCanonical.set_score_request"]], "set_transform_request() (sklearn.cross_decomposition.plscanonical method)": [[448, "sklearn.cross_decomposition.PLSCanonical.set_transform_request"]], "transform() (sklearn.cross_decomposition.plscanonical method)": [[448, "sklearn.cross_decomposition.PLSCanonical.transform"]], "plsregression (class in sklearn.cross_decomposition)": [[449, "sklearn.cross_decomposition.PLSRegression"]], "fit() (sklearn.cross_decomposition.plsregression method)": [[449, "sklearn.cross_decomposition.PLSRegression.fit"]], "fit_transform() (sklearn.cross_decomposition.plsregression method)": [[449, "sklearn.cross_decomposition.PLSRegression.fit_transform"]], "get_feature_names_out() (sklearn.cross_decomposition.plsregression method)": [[449, "sklearn.cross_decomposition.PLSRegression.get_feature_names_out"]], "get_metadata_routing() (sklearn.cross_decomposition.plsregression method)": [[449, "sklearn.cross_decomposition.PLSRegression.get_metadata_routing"]], "get_params() (sklearn.cross_decomposition.plsregression method)": [[449, "sklearn.cross_decomposition.PLSRegression.get_params"]], "inverse_transform() (sklearn.cross_decomposition.plsregression method)": [[449, "sklearn.cross_decomposition.PLSRegression.inverse_transform"]], "predict() (sklearn.cross_decomposition.plsregression method)": [[449, "sklearn.cross_decomposition.PLSRegression.predict"]], "score() (sklearn.cross_decomposition.plsregression method)": [[449, "sklearn.cross_decomposition.PLSRegression.score"]], "set_output() (sklearn.cross_decomposition.plsregression method)": [[449, "sklearn.cross_decomposition.PLSRegression.set_output"]], "set_params() (sklearn.cross_decomposition.plsregression method)": [[449, "sklearn.cross_decomposition.PLSRegression.set_params"]], "set_predict_request() (sklearn.cross_decomposition.plsregression method)": [[449, "sklearn.cross_decomposition.PLSRegression.set_predict_request"]], "set_score_request() (sklearn.cross_decomposition.plsregression method)": [[449, "sklearn.cross_decomposition.PLSRegression.set_score_request"]], "set_transform_request() (sklearn.cross_decomposition.plsregression method)": [[449, "sklearn.cross_decomposition.PLSRegression.set_transform_request"]], "transform() (sklearn.cross_decomposition.plsregression method)": [[449, "sklearn.cross_decomposition.PLSRegression.transform"]], "plssvd (class in sklearn.cross_decomposition)": [[450, "sklearn.cross_decomposition.PLSSVD"]], "fit() (sklearn.cross_decomposition.plssvd method)": [[450, "sklearn.cross_decomposition.PLSSVD.fit"]], "fit_transform() (sklearn.cross_decomposition.plssvd method)": [[450, "sklearn.cross_decomposition.PLSSVD.fit_transform"]], "get_feature_names_out() (sklearn.cross_decomposition.plssvd method)": [[450, "sklearn.cross_decomposition.PLSSVD.get_feature_names_out"]], "get_metadata_routing() (sklearn.cross_decomposition.plssvd method)": [[450, "sklearn.cross_decomposition.PLSSVD.get_metadata_routing"]], "get_params() (sklearn.cross_decomposition.plssvd method)": [[450, "sklearn.cross_decomposition.PLSSVD.get_params"]], "set_output() (sklearn.cross_decomposition.plssvd method)": [[450, "sklearn.cross_decomposition.PLSSVD.set_output"]], "set_params() (sklearn.cross_decomposition.plssvd method)": [[450, "sklearn.cross_decomposition.PLSSVD.set_params"]], "transform() (sklearn.cross_decomposition.plssvd method)": [[450, "sklearn.cross_decomposition.PLSSVD.transform"]], "clear_data_home() (in module sklearn.datasets)": [[451, "sklearn.datasets.clear_data_home"]], "dump_svmlight_file() (in module sklearn.datasets)": [[452, "sklearn.datasets.dump_svmlight_file"]], "fetch_20newsgroups() (in module sklearn.datasets)": [[453, "sklearn.datasets.fetch_20newsgroups"]], "fetch_20newsgroups_vectorized() (in module sklearn.datasets)": [[454, "sklearn.datasets.fetch_20newsgroups_vectorized"]], "fetch_california_housing() (in module sklearn.datasets)": [[455, "sklearn.datasets.fetch_california_housing"]], "fetch_covtype() (in module sklearn.datasets)": [[456, "sklearn.datasets.fetch_covtype"]], "fetch_kddcup99() (in module sklearn.datasets)": [[457, "sklearn.datasets.fetch_kddcup99"]], "fetch_lfw_pairs() (in module sklearn.datasets)": [[458, "sklearn.datasets.fetch_lfw_pairs"]], "fetch_lfw_people() (in module sklearn.datasets)": [[459, "sklearn.datasets.fetch_lfw_people"]], "fetch_olivetti_faces() (in module sklearn.datasets)": [[460, "sklearn.datasets.fetch_olivetti_faces"]], "fetch_openml() (in module sklearn.datasets)": [[461, "sklearn.datasets.fetch_openml"]], "fetch_rcv1() (in module sklearn.datasets)": [[462, "sklearn.datasets.fetch_rcv1"]], "fetch_species_distributions() (in module sklearn.datasets)": [[463, "sklearn.datasets.fetch_species_distributions"]], "get_data_home() (in module sklearn.datasets)": [[464, "sklearn.datasets.get_data_home"]], "load_breast_cancer() (in module sklearn.datasets)": [[465, "sklearn.datasets.load_breast_cancer"]], "load_diabetes() (in module sklearn.datasets)": [[466, "sklearn.datasets.load_diabetes"]], "load_digits() (in module sklearn.datasets)": [[467, "sklearn.datasets.load_digits"]], "load_files() (in module sklearn.datasets)": [[468, "sklearn.datasets.load_files"]], "load_iris() (in module sklearn.datasets)": [[469, "sklearn.datasets.load_iris"]], "load_linnerud() (in module sklearn.datasets)": [[470, "sklearn.datasets.load_linnerud"]], "load_sample_image() (in module sklearn.datasets)": [[471, "sklearn.datasets.load_sample_image"]], "load_sample_images() (in module sklearn.datasets)": [[472, "sklearn.datasets.load_sample_images"]], "load_svmlight_file() (in module sklearn.datasets)": [[473, "sklearn.datasets.load_svmlight_file"]], "load_svmlight_files() (in module sklearn.datasets)": [[474, "sklearn.datasets.load_svmlight_files"]], "load_wine() (in module sklearn.datasets)": [[475, "sklearn.datasets.load_wine"]], "make_biclusters() (in module sklearn.datasets)": [[476, "sklearn.datasets.make_biclusters"]], "make_blobs() (in module sklearn.datasets)": [[477, "sklearn.datasets.make_blobs"]], "make_checkerboard() (in module sklearn.datasets)": [[478, "sklearn.datasets.make_checkerboard"]], "make_circles() (in module sklearn.datasets)": [[479, "sklearn.datasets.make_circles"]], "make_classification() (in module sklearn.datasets)": [[480, "sklearn.datasets.make_classification"]], "make_friedman1() (in module sklearn.datasets)": [[481, "sklearn.datasets.make_friedman1"]], "make_friedman2() (in module sklearn.datasets)": [[482, "sklearn.datasets.make_friedman2"]], "make_friedman3() (in module sklearn.datasets)": [[483, "sklearn.datasets.make_friedman3"]], "make_gaussian_quantiles() (in module sklearn.datasets)": [[484, "sklearn.datasets.make_gaussian_quantiles"]], "make_hastie_10_2() (in module sklearn.datasets)": [[485, "sklearn.datasets.make_hastie_10_2"]], "make_low_rank_matrix() (in module sklearn.datasets)": [[486, "sklearn.datasets.make_low_rank_matrix"]], "make_moons() (in module sklearn.datasets)": [[487, "sklearn.datasets.make_moons"]], "make_multilabel_classification() (in module sklearn.datasets)": [[488, "sklearn.datasets.make_multilabel_classification"]], "make_regression() (in module sklearn.datasets)": [[489, "sklearn.datasets.make_regression"]], "make_s_curve() (in module sklearn.datasets)": [[490, "sklearn.datasets.make_s_curve"]], "make_sparse_coded_signal() (in module sklearn.datasets)": [[491, "sklearn.datasets.make_sparse_coded_signal"]], "make_sparse_spd_matrix() (in module sklearn.datasets)": [[492, "sklearn.datasets.make_sparse_spd_matrix"]], "make_sparse_uncorrelated() (in module sklearn.datasets)": [[493, "sklearn.datasets.make_sparse_uncorrelated"]], "make_spd_matrix() (in module sklearn.datasets)": [[494, "sklearn.datasets.make_spd_matrix"]], "make_swiss_roll() (in module sklearn.datasets)": [[495, "sklearn.datasets.make_swiss_roll"]], "dictionarylearning (class in sklearn.decomposition)": [[496, "sklearn.decomposition.DictionaryLearning"]], "fit() (sklearn.decomposition.dictionarylearning method)": [[496, "sklearn.decomposition.DictionaryLearning.fit"]], "fit_transform() (sklearn.decomposition.dictionarylearning method)": [[496, "sklearn.decomposition.DictionaryLearning.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.dictionarylearning method)": [[496, "sklearn.decomposition.DictionaryLearning.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.dictionarylearning method)": [[496, "sklearn.decomposition.DictionaryLearning.get_metadata_routing"]], "get_params() (sklearn.decomposition.dictionarylearning method)": [[496, "sklearn.decomposition.DictionaryLearning.get_params"]], "set_output() (sklearn.decomposition.dictionarylearning method)": [[496, "sklearn.decomposition.DictionaryLearning.set_output"]], "set_params() (sklearn.decomposition.dictionarylearning method)": [[496, "sklearn.decomposition.DictionaryLearning.set_params"]], "transform() (sklearn.decomposition.dictionarylearning method)": [[496, "sklearn.decomposition.DictionaryLearning.transform"]], "factoranalysis (class in sklearn.decomposition)": [[497, "sklearn.decomposition.FactorAnalysis"]], "fit() (sklearn.decomposition.factoranalysis method)": [[497, "sklearn.decomposition.FactorAnalysis.fit"]], "fit_transform() (sklearn.decomposition.factoranalysis method)": [[497, "sklearn.decomposition.FactorAnalysis.fit_transform"]], "get_covariance() (sklearn.decomposition.factoranalysis method)": [[497, "sklearn.decomposition.FactorAnalysis.get_covariance"]], "get_feature_names_out() (sklearn.decomposition.factoranalysis method)": [[497, "sklearn.decomposition.FactorAnalysis.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.factoranalysis method)": [[497, "sklearn.decomposition.FactorAnalysis.get_metadata_routing"]], "get_params() (sklearn.decomposition.factoranalysis method)": [[497, "sklearn.decomposition.FactorAnalysis.get_params"]], "get_precision() (sklearn.decomposition.factoranalysis method)": [[497, "sklearn.decomposition.FactorAnalysis.get_precision"]], "score() (sklearn.decomposition.factoranalysis method)": [[497, "sklearn.decomposition.FactorAnalysis.score"]], "score_samples() (sklearn.decomposition.factoranalysis method)": [[497, "sklearn.decomposition.FactorAnalysis.score_samples"]], "set_output() (sklearn.decomposition.factoranalysis method)": [[497, "sklearn.decomposition.FactorAnalysis.set_output"]], "set_params() (sklearn.decomposition.factoranalysis method)": [[497, "sklearn.decomposition.FactorAnalysis.set_params"]], "transform() (sklearn.decomposition.factoranalysis method)": [[497, "sklearn.decomposition.FactorAnalysis.transform"]], "fastica (class in sklearn.decomposition)": [[498, "sklearn.decomposition.FastICA"]], "fit() (sklearn.decomposition.fastica method)": [[498, "sklearn.decomposition.FastICA.fit"]], "fit_transform() (sklearn.decomposition.fastica method)": [[498, "sklearn.decomposition.FastICA.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.fastica method)": [[498, "sklearn.decomposition.FastICA.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.fastica method)": [[498, "sklearn.decomposition.FastICA.get_metadata_routing"]], "get_params() (sklearn.decomposition.fastica method)": [[498, "sklearn.decomposition.FastICA.get_params"]], "inverse_transform() (sklearn.decomposition.fastica method)": [[498, "sklearn.decomposition.FastICA.inverse_transform"]], "set_inverse_transform_request() (sklearn.decomposition.fastica method)": [[498, "sklearn.decomposition.FastICA.set_inverse_transform_request"]], "set_output() (sklearn.decomposition.fastica method)": [[498, "sklearn.decomposition.FastICA.set_output"]], "set_params() (sklearn.decomposition.fastica method)": [[498, "sklearn.decomposition.FastICA.set_params"]], "set_transform_request() (sklearn.decomposition.fastica method)": [[498, "sklearn.decomposition.FastICA.set_transform_request"]], "transform() (sklearn.decomposition.fastica method)": [[498, "sklearn.decomposition.FastICA.transform"]], "incrementalpca (class in sklearn.decomposition)": [[499, "sklearn.decomposition.IncrementalPCA"]], "fit() (sklearn.decomposition.incrementalpca method)": [[499, "sklearn.decomposition.IncrementalPCA.fit"]], "fit_transform() (sklearn.decomposition.incrementalpca method)": [[499, "sklearn.decomposition.IncrementalPCA.fit_transform"]], "get_covariance() (sklearn.decomposition.incrementalpca method)": [[499, "sklearn.decomposition.IncrementalPCA.get_covariance"]], "get_feature_names_out() (sklearn.decomposition.incrementalpca method)": [[499, "sklearn.decomposition.IncrementalPCA.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.incrementalpca method)": [[499, "sklearn.decomposition.IncrementalPCA.get_metadata_routing"]], "get_params() (sklearn.decomposition.incrementalpca method)": [[499, "sklearn.decomposition.IncrementalPCA.get_params"]], "get_precision() (sklearn.decomposition.incrementalpca method)": [[499, "sklearn.decomposition.IncrementalPCA.get_precision"]], "inverse_transform() (sklearn.decomposition.incrementalpca method)": [[499, "sklearn.decomposition.IncrementalPCA.inverse_transform"]], "partial_fit() (sklearn.decomposition.incrementalpca method)": [[499, "sklearn.decomposition.IncrementalPCA.partial_fit"]], "set_output() (sklearn.decomposition.incrementalpca method)": [[499, "sklearn.decomposition.IncrementalPCA.set_output"]], "set_params() (sklearn.decomposition.incrementalpca method)": [[499, "sklearn.decomposition.IncrementalPCA.set_params"]], "set_partial_fit_request() (sklearn.decomposition.incrementalpca method)": [[499, "sklearn.decomposition.IncrementalPCA.set_partial_fit_request"]], "transform() (sklearn.decomposition.incrementalpca method)": [[499, "sklearn.decomposition.IncrementalPCA.transform"]], "kernelpca (class in sklearn.decomposition)": [[500, "sklearn.decomposition.KernelPCA"]], "fit() (sklearn.decomposition.kernelpca method)": [[500, "sklearn.decomposition.KernelPCA.fit"]], "fit_transform() (sklearn.decomposition.kernelpca method)": [[500, "sklearn.decomposition.KernelPCA.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.kernelpca method)": [[500, "sklearn.decomposition.KernelPCA.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.kernelpca method)": [[500, "sklearn.decomposition.KernelPCA.get_metadata_routing"]], "get_params() (sklearn.decomposition.kernelpca method)": [[500, "sklearn.decomposition.KernelPCA.get_params"]], "inverse_transform() (sklearn.decomposition.kernelpca method)": [[500, "sklearn.decomposition.KernelPCA.inverse_transform"]], "set_output() (sklearn.decomposition.kernelpca method)": [[500, "sklearn.decomposition.KernelPCA.set_output"]], "set_params() (sklearn.decomposition.kernelpca method)": [[500, "sklearn.decomposition.KernelPCA.set_params"]], "transform() (sklearn.decomposition.kernelpca method)": [[500, "sklearn.decomposition.KernelPCA.transform"]], "latentdirichletallocation (class in sklearn.decomposition)": [[501, "sklearn.decomposition.LatentDirichletAllocation"]], "fit() (sklearn.decomposition.latentdirichletallocation method)": [[501, "sklearn.decomposition.LatentDirichletAllocation.fit"]], "fit_transform() (sklearn.decomposition.latentdirichletallocation method)": [[501, "sklearn.decomposition.LatentDirichletAllocation.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.latentdirichletallocation method)": [[501, "sklearn.decomposition.LatentDirichletAllocation.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.latentdirichletallocation method)": [[501, "sklearn.decomposition.LatentDirichletAllocation.get_metadata_routing"]], "get_params() (sklearn.decomposition.latentdirichletallocation method)": [[501, "sklearn.decomposition.LatentDirichletAllocation.get_params"]], "partial_fit() (sklearn.decomposition.latentdirichletallocation method)": [[501, "sklearn.decomposition.LatentDirichletAllocation.partial_fit"]], "perplexity() (sklearn.decomposition.latentdirichletallocation method)": [[501, "sklearn.decomposition.LatentDirichletAllocation.perplexity"]], "score() (sklearn.decomposition.latentdirichletallocation method)": [[501, "sklearn.decomposition.LatentDirichletAllocation.score"]], "set_output() (sklearn.decomposition.latentdirichletallocation method)": [[501, "sklearn.decomposition.LatentDirichletAllocation.set_output"]], "set_params() (sklearn.decomposition.latentdirichletallocation method)": [[501, "sklearn.decomposition.LatentDirichletAllocation.set_params"]], "transform() (sklearn.decomposition.latentdirichletallocation method)": [[501, "sklearn.decomposition.LatentDirichletAllocation.transform"]], "minibatchdictionarylearning (class in sklearn.decomposition)": [[502, "sklearn.decomposition.MiniBatchDictionaryLearning"]], "fit() (sklearn.decomposition.minibatchdictionarylearning method)": [[502, "sklearn.decomposition.MiniBatchDictionaryLearning.fit"]], "fit_transform() (sklearn.decomposition.minibatchdictionarylearning method)": [[502, "sklearn.decomposition.MiniBatchDictionaryLearning.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.minibatchdictionarylearning method)": [[502, "sklearn.decomposition.MiniBatchDictionaryLearning.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.minibatchdictionarylearning method)": [[502, "sklearn.decomposition.MiniBatchDictionaryLearning.get_metadata_routing"]], "get_params() (sklearn.decomposition.minibatchdictionarylearning method)": [[502, "sklearn.decomposition.MiniBatchDictionaryLearning.get_params"]], "partial_fit() (sklearn.decomposition.minibatchdictionarylearning method)": [[502, "sklearn.decomposition.MiniBatchDictionaryLearning.partial_fit"]], "set_output() (sklearn.decomposition.minibatchdictionarylearning method)": [[502, "sklearn.decomposition.MiniBatchDictionaryLearning.set_output"]], "set_params() (sklearn.decomposition.minibatchdictionarylearning method)": [[502, "sklearn.decomposition.MiniBatchDictionaryLearning.set_params"]], "transform() (sklearn.decomposition.minibatchdictionarylearning method)": [[502, "sklearn.decomposition.MiniBatchDictionaryLearning.transform"]], "minibatchnmf (class in sklearn.decomposition)": [[503, "sklearn.decomposition.MiniBatchNMF"]], "fit() (sklearn.decomposition.minibatchnmf method)": [[503, "sklearn.decomposition.MiniBatchNMF.fit"]], "fit_transform() (sklearn.decomposition.minibatchnmf method)": [[503, "sklearn.decomposition.MiniBatchNMF.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.minibatchnmf method)": [[503, "sklearn.decomposition.MiniBatchNMF.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.minibatchnmf method)": [[503, "sklearn.decomposition.MiniBatchNMF.get_metadata_routing"]], "get_params() (sklearn.decomposition.minibatchnmf method)": [[503, "sklearn.decomposition.MiniBatchNMF.get_params"]], "inverse_transform() (sklearn.decomposition.minibatchnmf method)": [[503, "sklearn.decomposition.MiniBatchNMF.inverse_transform"]], "partial_fit() (sklearn.decomposition.minibatchnmf method)": [[503, "sklearn.decomposition.MiniBatchNMF.partial_fit"]], "set_output() (sklearn.decomposition.minibatchnmf method)": [[503, "sklearn.decomposition.MiniBatchNMF.set_output"]], "set_params() (sklearn.decomposition.minibatchnmf method)": [[503, "sklearn.decomposition.MiniBatchNMF.set_params"]], "set_partial_fit_request() (sklearn.decomposition.minibatchnmf method)": [[503, "sklearn.decomposition.MiniBatchNMF.set_partial_fit_request"]], "transform() (sklearn.decomposition.minibatchnmf method)": [[503, "sklearn.decomposition.MiniBatchNMF.transform"]], "minibatchsparsepca (class in sklearn.decomposition)": [[504, "sklearn.decomposition.MiniBatchSparsePCA"]], "fit() (sklearn.decomposition.minibatchsparsepca method)": [[504, "sklearn.decomposition.MiniBatchSparsePCA.fit"]], "fit_transform() (sklearn.decomposition.minibatchsparsepca method)": [[504, "sklearn.decomposition.MiniBatchSparsePCA.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.minibatchsparsepca method)": [[504, "sklearn.decomposition.MiniBatchSparsePCA.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.minibatchsparsepca method)": [[504, "sklearn.decomposition.MiniBatchSparsePCA.get_metadata_routing"]], "get_params() (sklearn.decomposition.minibatchsparsepca method)": [[504, "sklearn.decomposition.MiniBatchSparsePCA.get_params"]], "inverse_transform() (sklearn.decomposition.minibatchsparsepca method)": [[504, "sklearn.decomposition.MiniBatchSparsePCA.inverse_transform"]], "set_output() (sklearn.decomposition.minibatchsparsepca method)": [[504, "sklearn.decomposition.MiniBatchSparsePCA.set_output"]], "set_params() (sklearn.decomposition.minibatchsparsepca method)": [[504, "sklearn.decomposition.MiniBatchSparsePCA.set_params"]], "transform() (sklearn.decomposition.minibatchsparsepca method)": [[504, "sklearn.decomposition.MiniBatchSparsePCA.transform"]], "nmf (class in sklearn.decomposition)": [[505, "sklearn.decomposition.NMF"]], "fit() (sklearn.decomposition.nmf method)": [[505, "sklearn.decomposition.NMF.fit"]], "fit_transform() (sklearn.decomposition.nmf method)": [[505, "sklearn.decomposition.NMF.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.nmf method)": [[505, "sklearn.decomposition.NMF.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.nmf method)": [[505, "sklearn.decomposition.NMF.get_metadata_routing"]], "get_params() (sklearn.decomposition.nmf method)": [[505, "sklearn.decomposition.NMF.get_params"]], "inverse_transform() (sklearn.decomposition.nmf method)": [[505, "sklearn.decomposition.NMF.inverse_transform"]], "set_output() (sklearn.decomposition.nmf method)": [[505, "sklearn.decomposition.NMF.set_output"]], "set_params() (sklearn.decomposition.nmf method)": [[505, "sklearn.decomposition.NMF.set_params"]], "transform() (sklearn.decomposition.nmf method)": [[505, "sklearn.decomposition.NMF.transform"]], "pca (class in sklearn.decomposition)": [[506, "sklearn.decomposition.PCA"]], "fit() (sklearn.decomposition.pca method)": [[506, "sklearn.decomposition.PCA.fit"]], "fit_transform() (sklearn.decomposition.pca method)": [[506, "sklearn.decomposition.PCA.fit_transform"]], "get_covariance() (sklearn.decomposition.pca method)": [[506, "sklearn.decomposition.PCA.get_covariance"]], "get_feature_names_out() (sklearn.decomposition.pca method)": [[506, "sklearn.decomposition.PCA.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.pca method)": [[506, "sklearn.decomposition.PCA.get_metadata_routing"]], "get_params() (sklearn.decomposition.pca method)": [[506, "sklearn.decomposition.PCA.get_params"]], "get_precision() (sklearn.decomposition.pca method)": [[506, "sklearn.decomposition.PCA.get_precision"]], "inverse_transform() (sklearn.decomposition.pca method)": [[506, "sklearn.decomposition.PCA.inverse_transform"]], "score() (sklearn.decomposition.pca method)": [[506, "sklearn.decomposition.PCA.score"]], "score_samples() (sklearn.decomposition.pca method)": [[506, "sklearn.decomposition.PCA.score_samples"]], "set_output() (sklearn.decomposition.pca method)": [[506, "sklearn.decomposition.PCA.set_output"]], "set_params() (sklearn.decomposition.pca method)": [[506, "sklearn.decomposition.PCA.set_params"]], "transform() (sklearn.decomposition.pca method)": [[506, "sklearn.decomposition.PCA.transform"]], "sparsecoder (class in sklearn.decomposition)": [[507, "sklearn.decomposition.SparseCoder"]], "fit() (sklearn.decomposition.sparsecoder method)": [[507, "sklearn.decomposition.SparseCoder.fit"]], "fit_transform() (sklearn.decomposition.sparsecoder method)": [[507, "sklearn.decomposition.SparseCoder.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.sparsecoder method)": [[507, "sklearn.decomposition.SparseCoder.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.sparsecoder method)": [[507, "sklearn.decomposition.SparseCoder.get_metadata_routing"]], "get_params() (sklearn.decomposition.sparsecoder method)": [[507, "sklearn.decomposition.SparseCoder.get_params"]], "n_components_ (sklearn.decomposition.sparsecoder property)": [[507, "sklearn.decomposition.SparseCoder.n_components_"]], "n_features_in_ (sklearn.decomposition.sparsecoder property)": [[507, "sklearn.decomposition.SparseCoder.n_features_in_"]], "set_output() (sklearn.decomposition.sparsecoder method)": [[507, "sklearn.decomposition.SparseCoder.set_output"]], "set_params() (sklearn.decomposition.sparsecoder method)": [[507, "sklearn.decomposition.SparseCoder.set_params"]], "transform() (sklearn.decomposition.sparsecoder method)": [[507, "sklearn.decomposition.SparseCoder.transform"]], "sparsepca (class in sklearn.decomposition)": [[508, "sklearn.decomposition.SparsePCA"]], "fit() (sklearn.decomposition.sparsepca method)": [[508, "sklearn.decomposition.SparsePCA.fit"]], "fit_transform() (sklearn.decomposition.sparsepca method)": [[508, "sklearn.decomposition.SparsePCA.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.sparsepca method)": [[508, "sklearn.decomposition.SparsePCA.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.sparsepca method)": [[508, "sklearn.decomposition.SparsePCA.get_metadata_routing"]], "get_params() (sklearn.decomposition.sparsepca method)": [[508, "sklearn.decomposition.SparsePCA.get_params"]], "inverse_transform() (sklearn.decomposition.sparsepca method)": [[508, "sklearn.decomposition.SparsePCA.inverse_transform"]], "set_output() (sklearn.decomposition.sparsepca method)": [[508, "sklearn.decomposition.SparsePCA.set_output"]], "set_params() (sklearn.decomposition.sparsepca method)": [[508, "sklearn.decomposition.SparsePCA.set_params"]], "transform() (sklearn.decomposition.sparsepca method)": [[508, "sklearn.decomposition.SparsePCA.transform"]], "truncatedsvd (class in sklearn.decomposition)": [[509, "sklearn.decomposition.TruncatedSVD"]], "fit() (sklearn.decomposition.truncatedsvd method)": [[509, "sklearn.decomposition.TruncatedSVD.fit"]], "fit_transform() (sklearn.decomposition.truncatedsvd method)": [[509, "sklearn.decomposition.TruncatedSVD.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.truncatedsvd method)": [[509, "sklearn.decomposition.TruncatedSVD.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.truncatedsvd method)": [[509, "sklearn.decomposition.TruncatedSVD.get_metadata_routing"]], "get_params() (sklearn.decomposition.truncatedsvd method)": [[509, "sklearn.decomposition.TruncatedSVD.get_params"]], "inverse_transform() (sklearn.decomposition.truncatedsvd method)": [[509, "sklearn.decomposition.TruncatedSVD.inverse_transform"]], "set_output() (sklearn.decomposition.truncatedsvd method)": [[509, "sklearn.decomposition.TruncatedSVD.set_output"]], "set_params() (sklearn.decomposition.truncatedsvd method)": [[509, "sklearn.decomposition.TruncatedSVD.set_params"]], "transform() (sklearn.decomposition.truncatedsvd method)": [[509, "sklearn.decomposition.TruncatedSVD.transform"]], "dict_learning() (in module sklearn.decomposition)": [[510, "sklearn.decomposition.dict_learning"]], "dict_learning_online() (in module sklearn.decomposition)": [[511, "sklearn.decomposition.dict_learning_online"]], "non_negative_factorization() (in module sklearn.decomposition)": [[512, "sklearn.decomposition.non_negative_factorization"]], "sparse_encode() (in module sklearn.decomposition)": [[513, "sklearn.decomposition.sparse_encode"]], "lineardiscriminantanalysis (class in sklearn.discriminant_analysis)": [[514, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis"]], "decision_function() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[514, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.decision_function"]], "fit() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[514, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit"]], "fit_transform() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[514, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit_transform"]], "get_feature_names_out() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[514, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_feature_names_out"]], "get_metadata_routing() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[514, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_metadata_routing"]], "get_params() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[514, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_params"]], "predict() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[514, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict"]], "predict_log_proba() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[514, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_log_proba"]], "predict_proba() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[514, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_proba"]], "score() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[514, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.score"]], "set_output() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[514, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_output"]], "set_params() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[514, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_params"]], "set_score_request() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[514, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_score_request"]], "transform() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[514, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.transform"]], "quadraticdiscriminantanalysis (class in sklearn.discriminant_analysis)": [[515, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis"]], "decision_function() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[515, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.decision_function"]], "fit() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[515, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.fit"]], "get_metadata_routing() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[515, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.get_metadata_routing"]], "get_params() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[515, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.get_params"]], "predict() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[515, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict"]], "predict_log_proba() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[515, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_log_proba"]], "predict_proba() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[515, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_proba"]], "score() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[515, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.score"]], "set_params() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[515, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.set_params"]], "set_score_request() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[515, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.set_score_request"]], "dummyclassifier (class in sklearn.dummy)": [[516, "sklearn.dummy.DummyClassifier"]], "fit() (sklearn.dummy.dummyclassifier method)": [[516, "sklearn.dummy.DummyClassifier.fit"]], "get_metadata_routing() (sklearn.dummy.dummyclassifier method)": [[516, "sklearn.dummy.DummyClassifier.get_metadata_routing"]], "get_params() (sklearn.dummy.dummyclassifier method)": [[516, "sklearn.dummy.DummyClassifier.get_params"]], "predict() (sklearn.dummy.dummyclassifier method)": [[516, "sklearn.dummy.DummyClassifier.predict"]], "predict_log_proba() (sklearn.dummy.dummyclassifier method)": [[516, "sklearn.dummy.DummyClassifier.predict_log_proba"]], "predict_proba() (sklearn.dummy.dummyclassifier method)": [[516, "sklearn.dummy.DummyClassifier.predict_proba"]], "score() (sklearn.dummy.dummyclassifier method)": [[516, "sklearn.dummy.DummyClassifier.score"]], "set_fit_request() (sklearn.dummy.dummyclassifier method)": [[516, "sklearn.dummy.DummyClassifier.set_fit_request"]], "set_params() (sklearn.dummy.dummyclassifier method)": [[516, "sklearn.dummy.DummyClassifier.set_params"]], "set_score_request() (sklearn.dummy.dummyclassifier method)": [[516, "sklearn.dummy.DummyClassifier.set_score_request"]], "dummyregressor (class in sklearn.dummy)": [[517, "sklearn.dummy.DummyRegressor"]], "fit() (sklearn.dummy.dummyregressor method)": [[517, "sklearn.dummy.DummyRegressor.fit"]], "get_metadata_routing() (sklearn.dummy.dummyregressor method)": [[517, "sklearn.dummy.DummyRegressor.get_metadata_routing"]], "get_params() (sklearn.dummy.dummyregressor method)": [[517, "sklearn.dummy.DummyRegressor.get_params"]], "predict() (sklearn.dummy.dummyregressor method)": [[517, "sklearn.dummy.DummyRegressor.predict"]], "score() (sklearn.dummy.dummyregressor method)": [[517, "sklearn.dummy.DummyRegressor.score"]], "set_fit_request() (sklearn.dummy.dummyregressor method)": [[517, "sklearn.dummy.DummyRegressor.set_fit_request"]], "set_params() (sklearn.dummy.dummyregressor method)": [[517, "sklearn.dummy.DummyRegressor.set_params"]], "set_predict_request() (sklearn.dummy.dummyregressor method)": [[517, "sklearn.dummy.DummyRegressor.set_predict_request"]], "set_score_request() (sklearn.dummy.dummyregressor method)": [[517, "sklearn.dummy.DummyRegressor.set_score_request"]], "adaboostclassifier (class in sklearn.ensemble)": [[518, "sklearn.ensemble.AdaBoostClassifier"]], "decision_function() (sklearn.ensemble.adaboostclassifier method)": [[518, "sklearn.ensemble.AdaBoostClassifier.decision_function"]], "feature_importances_ (sklearn.ensemble.adaboostclassifier property)": [[518, "sklearn.ensemble.AdaBoostClassifier.feature_importances_"]], "fit() (sklearn.ensemble.adaboostclassifier method)": [[518, "sklearn.ensemble.AdaBoostClassifier.fit"]], "get_metadata_routing() (sklearn.ensemble.adaboostclassifier method)": [[518, "sklearn.ensemble.AdaBoostClassifier.get_metadata_routing"]], "get_params() (sklearn.ensemble.adaboostclassifier method)": [[518, "sklearn.ensemble.AdaBoostClassifier.get_params"]], "predict() (sklearn.ensemble.adaboostclassifier method)": [[518, "sklearn.ensemble.AdaBoostClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.adaboostclassifier method)": [[518, "sklearn.ensemble.AdaBoostClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.adaboostclassifier method)": [[518, "sklearn.ensemble.AdaBoostClassifier.predict_proba"]], "score() (sklearn.ensemble.adaboostclassifier method)": [[518, "sklearn.ensemble.AdaBoostClassifier.score"]], "set_fit_request() (sklearn.ensemble.adaboostclassifier method)": [[518, "sklearn.ensemble.AdaBoostClassifier.set_fit_request"]], "set_params() (sklearn.ensemble.adaboostclassifier method)": [[518, "sklearn.ensemble.AdaBoostClassifier.set_params"]], "set_score_request() (sklearn.ensemble.adaboostclassifier method)": [[518, "sklearn.ensemble.AdaBoostClassifier.set_score_request"]], "staged_decision_function() (sklearn.ensemble.adaboostclassifier method)": [[518, "sklearn.ensemble.AdaBoostClassifier.staged_decision_function"]], "staged_predict() (sklearn.ensemble.adaboostclassifier method)": [[518, "sklearn.ensemble.AdaBoostClassifier.staged_predict"]], "staged_predict_proba() (sklearn.ensemble.adaboostclassifier method)": [[518, "sklearn.ensemble.AdaBoostClassifier.staged_predict_proba"]], "staged_score() (sklearn.ensemble.adaboostclassifier method)": [[518, "sklearn.ensemble.AdaBoostClassifier.staged_score"]], "adaboostregressor (class in sklearn.ensemble)": [[519, "sklearn.ensemble.AdaBoostRegressor"]], "feature_importances_ (sklearn.ensemble.adaboostregressor property)": [[519, "sklearn.ensemble.AdaBoostRegressor.feature_importances_"]], "fit() (sklearn.ensemble.adaboostregressor method)": [[519, "sklearn.ensemble.AdaBoostRegressor.fit"]], "get_metadata_routing() (sklearn.ensemble.adaboostregressor method)": [[519, "sklearn.ensemble.AdaBoostRegressor.get_metadata_routing"]], "get_params() (sklearn.ensemble.adaboostregressor method)": [[519, "sklearn.ensemble.AdaBoostRegressor.get_params"]], "predict() (sklearn.ensemble.adaboostregressor method)": [[519, "sklearn.ensemble.AdaBoostRegressor.predict"]], "score() (sklearn.ensemble.adaboostregressor method)": [[519, "sklearn.ensemble.AdaBoostRegressor.score"]], "set_fit_request() (sklearn.ensemble.adaboostregressor method)": [[519, "sklearn.ensemble.AdaBoostRegressor.set_fit_request"]], "set_params() (sklearn.ensemble.adaboostregressor method)": [[519, "sklearn.ensemble.AdaBoostRegressor.set_params"]], "set_score_request() (sklearn.ensemble.adaboostregressor method)": [[519, "sklearn.ensemble.AdaBoostRegressor.set_score_request"]], "staged_predict() (sklearn.ensemble.adaboostregressor method)": [[519, "sklearn.ensemble.AdaBoostRegressor.staged_predict"]], "staged_score() (sklearn.ensemble.adaboostregressor method)": [[519, "sklearn.ensemble.AdaBoostRegressor.staged_score"]], "baggingclassifier (class in sklearn.ensemble)": [[520, "sklearn.ensemble.BaggingClassifier"]], "decision_function() (sklearn.ensemble.baggingclassifier method)": [[520, "sklearn.ensemble.BaggingClassifier.decision_function"]], "estimators_samples_ (sklearn.ensemble.baggingclassifier property)": [[520, "sklearn.ensemble.BaggingClassifier.estimators_samples_"]], "fit() (sklearn.ensemble.baggingclassifier method)": [[520, "sklearn.ensemble.BaggingClassifier.fit"]], "get_metadata_routing() (sklearn.ensemble.baggingclassifier method)": [[520, "sklearn.ensemble.BaggingClassifier.get_metadata_routing"]], "get_params() (sklearn.ensemble.baggingclassifier method)": [[520, "sklearn.ensemble.BaggingClassifier.get_params"]], "predict() (sklearn.ensemble.baggingclassifier method)": [[520, "sklearn.ensemble.BaggingClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.baggingclassifier method)": [[520, "sklearn.ensemble.BaggingClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.baggingclassifier method)": [[520, "sklearn.ensemble.BaggingClassifier.predict_proba"]], "score() (sklearn.ensemble.baggingclassifier method)": [[520, "sklearn.ensemble.BaggingClassifier.score"]], "set_fit_request() (sklearn.ensemble.baggingclassifier method)": [[520, "sklearn.ensemble.BaggingClassifier.set_fit_request"]], "set_params() (sklearn.ensemble.baggingclassifier method)": [[520, "sklearn.ensemble.BaggingClassifier.set_params"]], "set_score_request() (sklearn.ensemble.baggingclassifier method)": [[520, "sklearn.ensemble.BaggingClassifier.set_score_request"]], "baggingregressor (class in sklearn.ensemble)": [[521, "sklearn.ensemble.BaggingRegressor"]], "estimators_samples_ (sklearn.ensemble.baggingregressor property)": [[521, "sklearn.ensemble.BaggingRegressor.estimators_samples_"]], "fit() (sklearn.ensemble.baggingregressor method)": [[521, "sklearn.ensemble.BaggingRegressor.fit"]], "get_metadata_routing() (sklearn.ensemble.baggingregressor method)": [[521, "sklearn.ensemble.BaggingRegressor.get_metadata_routing"]], "get_params() (sklearn.ensemble.baggingregressor method)": [[521, "sklearn.ensemble.BaggingRegressor.get_params"]], "predict() (sklearn.ensemble.baggingregressor method)": [[521, "sklearn.ensemble.BaggingRegressor.predict"]], "score() (sklearn.ensemble.baggingregressor method)": [[521, "sklearn.ensemble.BaggingRegressor.score"]], "set_fit_request() (sklearn.ensemble.baggingregressor method)": [[521, "sklearn.ensemble.BaggingRegressor.set_fit_request"]], "set_params() (sklearn.ensemble.baggingregressor method)": [[521, "sklearn.ensemble.BaggingRegressor.set_params"]], "set_score_request() (sklearn.ensemble.baggingregressor method)": [[521, "sklearn.ensemble.BaggingRegressor.set_score_request"]], "extratreesclassifier (class in sklearn.ensemble)": [[522, "sklearn.ensemble.ExtraTreesClassifier"]], "apply() (sklearn.ensemble.extratreesclassifier method)": [[522, "sklearn.ensemble.ExtraTreesClassifier.apply"]], "decision_path() (sklearn.ensemble.extratreesclassifier method)": [[522, "sklearn.ensemble.ExtraTreesClassifier.decision_path"]], "estimators_samples_ (sklearn.ensemble.extratreesclassifier property)": [[522, "sklearn.ensemble.ExtraTreesClassifier.estimators_samples_"]], "feature_importances_ (sklearn.ensemble.extratreesclassifier property)": [[522, "sklearn.ensemble.ExtraTreesClassifier.feature_importances_"]], "fit() (sklearn.ensemble.extratreesclassifier method)": [[522, "sklearn.ensemble.ExtraTreesClassifier.fit"]], "get_metadata_routing() (sklearn.ensemble.extratreesclassifier method)": [[522, "sklearn.ensemble.ExtraTreesClassifier.get_metadata_routing"]], "get_params() (sklearn.ensemble.extratreesclassifier method)": [[522, "sklearn.ensemble.ExtraTreesClassifier.get_params"]], "predict() (sklearn.ensemble.extratreesclassifier method)": [[522, "sklearn.ensemble.ExtraTreesClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.extratreesclassifier method)": [[522, "sklearn.ensemble.ExtraTreesClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.extratreesclassifier method)": [[522, "sklearn.ensemble.ExtraTreesClassifier.predict_proba"]], "score() (sklearn.ensemble.extratreesclassifier method)": [[522, "sklearn.ensemble.ExtraTreesClassifier.score"]], "set_fit_request() (sklearn.ensemble.extratreesclassifier method)": [[522, "sklearn.ensemble.ExtraTreesClassifier.set_fit_request"]], "set_params() (sklearn.ensemble.extratreesclassifier method)": [[522, "sklearn.ensemble.ExtraTreesClassifier.set_params"]], "set_score_request() (sklearn.ensemble.extratreesclassifier method)": [[522, "sklearn.ensemble.ExtraTreesClassifier.set_score_request"]], "extratreesregressor (class in sklearn.ensemble)": [[523, "sklearn.ensemble.ExtraTreesRegressor"]], "apply() (sklearn.ensemble.extratreesregressor method)": [[523, "sklearn.ensemble.ExtraTreesRegressor.apply"]], "decision_path() (sklearn.ensemble.extratreesregressor method)": [[523, "sklearn.ensemble.ExtraTreesRegressor.decision_path"]], "estimators_samples_ (sklearn.ensemble.extratreesregressor property)": [[523, "sklearn.ensemble.ExtraTreesRegressor.estimators_samples_"]], "feature_importances_ (sklearn.ensemble.extratreesregressor property)": [[523, "sklearn.ensemble.ExtraTreesRegressor.feature_importances_"]], "fit() (sklearn.ensemble.extratreesregressor method)": [[523, "sklearn.ensemble.ExtraTreesRegressor.fit"]], "get_metadata_routing() (sklearn.ensemble.extratreesregressor method)": [[523, "sklearn.ensemble.ExtraTreesRegressor.get_metadata_routing"]], "get_params() (sklearn.ensemble.extratreesregressor method)": [[523, "sklearn.ensemble.ExtraTreesRegressor.get_params"]], "predict() (sklearn.ensemble.extratreesregressor method)": [[523, "sklearn.ensemble.ExtraTreesRegressor.predict"]], "score() (sklearn.ensemble.extratreesregressor method)": [[523, "sklearn.ensemble.ExtraTreesRegressor.score"]], "set_fit_request() (sklearn.ensemble.extratreesregressor method)": [[523, "sklearn.ensemble.ExtraTreesRegressor.set_fit_request"]], "set_params() (sklearn.ensemble.extratreesregressor method)": [[523, "sklearn.ensemble.ExtraTreesRegressor.set_params"]], "set_score_request() (sklearn.ensemble.extratreesregressor method)": [[523, "sklearn.ensemble.ExtraTreesRegressor.set_score_request"]], "gradientboostingclassifier (class in sklearn.ensemble)": [[524, "sklearn.ensemble.GradientBoostingClassifier"]], "apply() (sklearn.ensemble.gradientboostingclassifier method)": [[524, "sklearn.ensemble.GradientBoostingClassifier.apply"]], "decision_function() (sklearn.ensemble.gradientboostingclassifier method)": [[524, "sklearn.ensemble.GradientBoostingClassifier.decision_function"]], "feature_importances_ (sklearn.ensemble.gradientboostingclassifier property)": [[524, "sklearn.ensemble.GradientBoostingClassifier.feature_importances_"]], "fit() (sklearn.ensemble.gradientboostingclassifier method)": [[524, "sklearn.ensemble.GradientBoostingClassifier.fit"]], "get_metadata_routing() (sklearn.ensemble.gradientboostingclassifier method)": [[524, "sklearn.ensemble.GradientBoostingClassifier.get_metadata_routing"]], "get_params() (sklearn.ensemble.gradientboostingclassifier method)": [[524, "sklearn.ensemble.GradientBoostingClassifier.get_params"]], "predict() (sklearn.ensemble.gradientboostingclassifier method)": [[524, "sklearn.ensemble.GradientBoostingClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[524, "sklearn.ensemble.GradientBoostingClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[524, "sklearn.ensemble.GradientBoostingClassifier.predict_proba"]], "score() (sklearn.ensemble.gradientboostingclassifier method)": [[524, "sklearn.ensemble.GradientBoostingClassifier.score"]], "set_fit_request() (sklearn.ensemble.gradientboostingclassifier method)": [[524, "sklearn.ensemble.GradientBoostingClassifier.set_fit_request"]], "set_params() (sklearn.ensemble.gradientboostingclassifier method)": [[524, "sklearn.ensemble.GradientBoostingClassifier.set_params"]], "set_score_request() (sklearn.ensemble.gradientboostingclassifier method)": [[524, "sklearn.ensemble.GradientBoostingClassifier.set_score_request"]], "staged_decision_function() (sklearn.ensemble.gradientboostingclassifier method)": [[524, "sklearn.ensemble.GradientBoostingClassifier.staged_decision_function"]], "staged_predict() (sklearn.ensemble.gradientboostingclassifier method)": [[524, "sklearn.ensemble.GradientBoostingClassifier.staged_predict"]], "staged_predict_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[524, "sklearn.ensemble.GradientBoostingClassifier.staged_predict_proba"]], "gradientboostingregressor (class in sklearn.ensemble)": [[525, "sklearn.ensemble.GradientBoostingRegressor"]], "apply() (sklearn.ensemble.gradientboostingregressor method)": [[525, "sklearn.ensemble.GradientBoostingRegressor.apply"]], "feature_importances_ (sklearn.ensemble.gradientboostingregressor property)": [[525, "sklearn.ensemble.GradientBoostingRegressor.feature_importances_"]], "fit() (sklearn.ensemble.gradientboostingregressor method)": [[525, "sklearn.ensemble.GradientBoostingRegressor.fit"]], "get_metadata_routing() (sklearn.ensemble.gradientboostingregressor method)": [[525, "sklearn.ensemble.GradientBoostingRegressor.get_metadata_routing"]], "get_params() (sklearn.ensemble.gradientboostingregressor method)": [[525, "sklearn.ensemble.GradientBoostingRegressor.get_params"]], "predict() (sklearn.ensemble.gradientboostingregressor method)": [[525, "sklearn.ensemble.GradientBoostingRegressor.predict"]], "score() (sklearn.ensemble.gradientboostingregressor method)": [[525, "sklearn.ensemble.GradientBoostingRegressor.score"]], "set_fit_request() (sklearn.ensemble.gradientboostingregressor method)": [[525, "sklearn.ensemble.GradientBoostingRegressor.set_fit_request"]], "set_params() (sklearn.ensemble.gradientboostingregressor method)": [[525, "sklearn.ensemble.GradientBoostingRegressor.set_params"]], "set_score_request() (sklearn.ensemble.gradientboostingregressor method)": [[525, "sklearn.ensemble.GradientBoostingRegressor.set_score_request"]], "staged_predict() (sklearn.ensemble.gradientboostingregressor method)": [[525, "sklearn.ensemble.GradientBoostingRegressor.staged_predict"]], "histgradientboostingclassifier (class in sklearn.ensemble)": [[526, "sklearn.ensemble.HistGradientBoostingClassifier"]], "decision_function() (sklearn.ensemble.histgradientboostingclassifier method)": [[526, "sklearn.ensemble.HistGradientBoostingClassifier.decision_function"]], "fit() (sklearn.ensemble.histgradientboostingclassifier method)": [[526, "sklearn.ensemble.HistGradientBoostingClassifier.fit"]], "get_metadata_routing() (sklearn.ensemble.histgradientboostingclassifier method)": [[526, "sklearn.ensemble.HistGradientBoostingClassifier.get_metadata_routing"]], "get_params() (sklearn.ensemble.histgradientboostingclassifier method)": [[526, "sklearn.ensemble.HistGradientBoostingClassifier.get_params"]], "n_iter_ (sklearn.ensemble.histgradientboostingclassifier property)": [[526, "sklearn.ensemble.HistGradientBoostingClassifier.n_iter_"]], "predict() (sklearn.ensemble.histgradientboostingclassifier method)": [[526, "sklearn.ensemble.HistGradientBoostingClassifier.predict"]], "predict_proba() (sklearn.ensemble.histgradientboostingclassifier method)": [[526, "sklearn.ensemble.HistGradientBoostingClassifier.predict_proba"]], "score() (sklearn.ensemble.histgradientboostingclassifier method)": [[526, "sklearn.ensemble.HistGradientBoostingClassifier.score"]], "set_fit_request() (sklearn.ensemble.histgradientboostingclassifier method)": [[526, "sklearn.ensemble.HistGradientBoostingClassifier.set_fit_request"]], "set_params() (sklearn.ensemble.histgradientboostingclassifier method)": [[526, "sklearn.ensemble.HistGradientBoostingClassifier.set_params"]], "set_score_request() (sklearn.ensemble.histgradientboostingclassifier method)": [[526, "sklearn.ensemble.HistGradientBoostingClassifier.set_score_request"]], "staged_decision_function() (sklearn.ensemble.histgradientboostingclassifier method)": [[526, "sklearn.ensemble.HistGradientBoostingClassifier.staged_decision_function"]], "staged_predict() (sklearn.ensemble.histgradientboostingclassifier method)": [[526, "sklearn.ensemble.HistGradientBoostingClassifier.staged_predict"]], "staged_predict_proba() (sklearn.ensemble.histgradientboostingclassifier method)": [[526, "sklearn.ensemble.HistGradientBoostingClassifier.staged_predict_proba"]], "histgradientboostingregressor (class in sklearn.ensemble)": [[527, "sklearn.ensemble.HistGradientBoostingRegressor"]], "fit() (sklearn.ensemble.histgradientboostingregressor method)": [[527, "sklearn.ensemble.HistGradientBoostingRegressor.fit"]], "get_metadata_routing() (sklearn.ensemble.histgradientboostingregressor method)": [[527, "sklearn.ensemble.HistGradientBoostingRegressor.get_metadata_routing"]], "get_params() (sklearn.ensemble.histgradientboostingregressor method)": [[527, "sklearn.ensemble.HistGradientBoostingRegressor.get_params"]], "n_iter_ (sklearn.ensemble.histgradientboostingregressor property)": [[527, "sklearn.ensemble.HistGradientBoostingRegressor.n_iter_"]], "predict() (sklearn.ensemble.histgradientboostingregressor method)": [[527, "sklearn.ensemble.HistGradientBoostingRegressor.predict"]], "score() (sklearn.ensemble.histgradientboostingregressor method)": [[527, "sklearn.ensemble.HistGradientBoostingRegressor.score"]], "set_fit_request() (sklearn.ensemble.histgradientboostingregressor method)": [[527, "sklearn.ensemble.HistGradientBoostingRegressor.set_fit_request"]], "set_params() (sklearn.ensemble.histgradientboostingregressor method)": [[527, "sklearn.ensemble.HistGradientBoostingRegressor.set_params"]], "set_score_request() (sklearn.ensemble.histgradientboostingregressor method)": [[527, "sklearn.ensemble.HistGradientBoostingRegressor.set_score_request"]], "staged_predict() (sklearn.ensemble.histgradientboostingregressor method)": [[527, "sklearn.ensemble.HistGradientBoostingRegressor.staged_predict"]], "isolationforest (class in sklearn.ensemble)": [[528, "sklearn.ensemble.IsolationForest"]], "decision_function() (sklearn.ensemble.isolationforest method)": [[528, "sklearn.ensemble.IsolationForest.decision_function"]], "estimators_samples_ (sklearn.ensemble.isolationforest property)": [[528, "sklearn.ensemble.IsolationForest.estimators_samples_"]], "fit() (sklearn.ensemble.isolationforest method)": [[528, "sklearn.ensemble.IsolationForest.fit"]], "fit_predict() (sklearn.ensemble.isolationforest method)": [[528, "sklearn.ensemble.IsolationForest.fit_predict"]], "get_metadata_routing() (sklearn.ensemble.isolationforest method)": [[528, "sklearn.ensemble.IsolationForest.get_metadata_routing"]], "get_params() (sklearn.ensemble.isolationforest method)": [[528, "sklearn.ensemble.IsolationForest.get_params"]], "predict() (sklearn.ensemble.isolationforest method)": [[528, "sklearn.ensemble.IsolationForest.predict"]], "score_samples() (sklearn.ensemble.isolationforest method)": [[528, "sklearn.ensemble.IsolationForest.score_samples"]], "set_fit_request() (sklearn.ensemble.isolationforest method)": [[528, "sklearn.ensemble.IsolationForest.set_fit_request"]], "set_params() (sklearn.ensemble.isolationforest method)": [[528, "sklearn.ensemble.IsolationForest.set_params"]], "randomforestclassifier (class in sklearn.ensemble)": [[529, "sklearn.ensemble.RandomForestClassifier"]], "apply() (sklearn.ensemble.randomforestclassifier method)": [[529, "sklearn.ensemble.RandomForestClassifier.apply"]], "decision_path() (sklearn.ensemble.randomforestclassifier method)": [[529, "sklearn.ensemble.RandomForestClassifier.decision_path"]], "estimators_samples_ (sklearn.ensemble.randomforestclassifier property)": [[529, "sklearn.ensemble.RandomForestClassifier.estimators_samples_"]], "feature_importances_ (sklearn.ensemble.randomforestclassifier property)": [[529, "sklearn.ensemble.RandomForestClassifier.feature_importances_"]], "fit() (sklearn.ensemble.randomforestclassifier method)": [[529, "sklearn.ensemble.RandomForestClassifier.fit"]], "get_metadata_routing() (sklearn.ensemble.randomforestclassifier method)": [[529, "sklearn.ensemble.RandomForestClassifier.get_metadata_routing"]], "get_params() (sklearn.ensemble.randomforestclassifier method)": [[529, "sklearn.ensemble.RandomForestClassifier.get_params"]], "predict() (sklearn.ensemble.randomforestclassifier method)": [[529, "sklearn.ensemble.RandomForestClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.randomforestclassifier method)": [[529, "sklearn.ensemble.RandomForestClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.randomforestclassifier method)": [[529, "sklearn.ensemble.RandomForestClassifier.predict_proba"]], "score() (sklearn.ensemble.randomforestclassifier method)": [[529, "sklearn.ensemble.RandomForestClassifier.score"]], "set_fit_request() (sklearn.ensemble.randomforestclassifier method)": [[529, "sklearn.ensemble.RandomForestClassifier.set_fit_request"]], "set_params() (sklearn.ensemble.randomforestclassifier method)": [[529, "sklearn.ensemble.RandomForestClassifier.set_params"]], "set_score_request() (sklearn.ensemble.randomforestclassifier method)": [[529, "sklearn.ensemble.RandomForestClassifier.set_score_request"]], "randomforestregressor (class in sklearn.ensemble)": [[530, "sklearn.ensemble.RandomForestRegressor"]], "apply() (sklearn.ensemble.randomforestregressor method)": [[530, "sklearn.ensemble.RandomForestRegressor.apply"]], "decision_path() (sklearn.ensemble.randomforestregressor method)": [[530, "sklearn.ensemble.RandomForestRegressor.decision_path"]], "estimators_samples_ (sklearn.ensemble.randomforestregressor property)": [[530, "sklearn.ensemble.RandomForestRegressor.estimators_samples_"]], "feature_importances_ (sklearn.ensemble.randomforestregressor property)": [[530, "sklearn.ensemble.RandomForestRegressor.feature_importances_"]], "fit() (sklearn.ensemble.randomforestregressor method)": [[530, "sklearn.ensemble.RandomForestRegressor.fit"]], "get_metadata_routing() (sklearn.ensemble.randomforestregressor method)": [[530, "sklearn.ensemble.RandomForestRegressor.get_metadata_routing"]], "get_params() (sklearn.ensemble.randomforestregressor method)": [[530, "sklearn.ensemble.RandomForestRegressor.get_params"]], "predict() (sklearn.ensemble.randomforestregressor method)": [[530, "sklearn.ensemble.RandomForestRegressor.predict"]], "score() (sklearn.ensemble.randomforestregressor method)": [[530, "sklearn.ensemble.RandomForestRegressor.score"]], "set_fit_request() (sklearn.ensemble.randomforestregressor method)": [[530, "sklearn.ensemble.RandomForestRegressor.set_fit_request"]], "set_params() (sklearn.ensemble.randomforestregressor method)": [[530, "sklearn.ensemble.RandomForestRegressor.set_params"]], "set_score_request() (sklearn.ensemble.randomforestregressor method)": [[530, "sklearn.ensemble.RandomForestRegressor.set_score_request"]], "randomtreesembedding (class in sklearn.ensemble)": [[531, "sklearn.ensemble.RandomTreesEmbedding"]], "apply() (sklearn.ensemble.randomtreesembedding method)": [[531, "sklearn.ensemble.RandomTreesEmbedding.apply"]], "decision_path() (sklearn.ensemble.randomtreesembedding method)": [[531, "sklearn.ensemble.RandomTreesEmbedding.decision_path"]], "estimators_samples_ (sklearn.ensemble.randomtreesembedding property)": [[531, "sklearn.ensemble.RandomTreesEmbedding.estimators_samples_"]], "feature_importances_ (sklearn.ensemble.randomtreesembedding property)": [[531, "sklearn.ensemble.RandomTreesEmbedding.feature_importances_"]], "fit() (sklearn.ensemble.randomtreesembedding method)": [[531, "sklearn.ensemble.RandomTreesEmbedding.fit"]], "fit_transform() (sklearn.ensemble.randomtreesembedding method)": [[531, "sklearn.ensemble.RandomTreesEmbedding.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.randomtreesembedding method)": [[531, "sklearn.ensemble.RandomTreesEmbedding.get_feature_names_out"]], "get_metadata_routing() (sklearn.ensemble.randomtreesembedding method)": [[531, "sklearn.ensemble.RandomTreesEmbedding.get_metadata_routing"]], "get_params() (sklearn.ensemble.randomtreesembedding method)": [[531, "sklearn.ensemble.RandomTreesEmbedding.get_params"]], "set_fit_request() (sklearn.ensemble.randomtreesembedding method)": [[531, "sklearn.ensemble.RandomTreesEmbedding.set_fit_request"]], "set_output() (sklearn.ensemble.randomtreesembedding method)": [[531, "sklearn.ensemble.RandomTreesEmbedding.set_output"]], "set_params() (sklearn.ensemble.randomtreesembedding method)": [[531, "sklearn.ensemble.RandomTreesEmbedding.set_params"]], "transform() (sklearn.ensemble.randomtreesembedding method)": [[531, "sklearn.ensemble.RandomTreesEmbedding.transform"]], "stackingclassifier (class in sklearn.ensemble)": [[532, "sklearn.ensemble.StackingClassifier"]], "decision_function() (sklearn.ensemble.stackingclassifier method)": [[532, "sklearn.ensemble.StackingClassifier.decision_function"]], "fit() (sklearn.ensemble.stackingclassifier method)": [[532, "sklearn.ensemble.StackingClassifier.fit"]], "fit_transform() (sklearn.ensemble.stackingclassifier method)": [[532, "sklearn.ensemble.StackingClassifier.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.stackingclassifier method)": [[532, "sklearn.ensemble.StackingClassifier.get_feature_names_out"]], "get_metadata_routing() (sklearn.ensemble.stackingclassifier method)": [[532, "sklearn.ensemble.StackingClassifier.get_metadata_routing"]], "get_params() (sklearn.ensemble.stackingclassifier method)": [[532, "sklearn.ensemble.StackingClassifier.get_params"]], "n_features_in_ (sklearn.ensemble.stackingclassifier property)": [[532, "sklearn.ensemble.StackingClassifier.n_features_in_"]], "named_estimators (sklearn.ensemble.stackingclassifier property)": [[532, "sklearn.ensemble.StackingClassifier.named_estimators"]], "predict() (sklearn.ensemble.stackingclassifier method)": [[532, "sklearn.ensemble.StackingClassifier.predict"]], "predict_proba() (sklearn.ensemble.stackingclassifier method)": [[532, "sklearn.ensemble.StackingClassifier.predict_proba"]], "score() (sklearn.ensemble.stackingclassifier method)": [[532, "sklearn.ensemble.StackingClassifier.score"]], "set_fit_request() (sklearn.ensemble.stackingclassifier method)": [[532, "sklearn.ensemble.StackingClassifier.set_fit_request"]], "set_output() (sklearn.ensemble.stackingclassifier method)": [[532, "sklearn.ensemble.StackingClassifier.set_output"]], "set_params() (sklearn.ensemble.stackingclassifier method)": [[532, "sklearn.ensemble.StackingClassifier.set_params"]], "set_score_request() (sklearn.ensemble.stackingclassifier method)": [[532, "sklearn.ensemble.StackingClassifier.set_score_request"]], "transform() (sklearn.ensemble.stackingclassifier method)": [[532, "sklearn.ensemble.StackingClassifier.transform"]], "stackingregressor (class in sklearn.ensemble)": [[533, "sklearn.ensemble.StackingRegressor"]], "fit() (sklearn.ensemble.stackingregressor method)": [[533, "sklearn.ensemble.StackingRegressor.fit"]], "fit_transform() (sklearn.ensemble.stackingregressor method)": [[533, "sklearn.ensemble.StackingRegressor.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.stackingregressor method)": [[533, "sklearn.ensemble.StackingRegressor.get_feature_names_out"]], "get_metadata_routing() (sklearn.ensemble.stackingregressor method)": [[533, "sklearn.ensemble.StackingRegressor.get_metadata_routing"]], "get_params() (sklearn.ensemble.stackingregressor method)": [[533, "sklearn.ensemble.StackingRegressor.get_params"]], "n_features_in_ (sklearn.ensemble.stackingregressor property)": [[533, "sklearn.ensemble.StackingRegressor.n_features_in_"]], "named_estimators (sklearn.ensemble.stackingregressor property)": [[533, "sklearn.ensemble.StackingRegressor.named_estimators"]], "predict() (sklearn.ensemble.stackingregressor method)": [[533, "sklearn.ensemble.StackingRegressor.predict"]], "score() (sklearn.ensemble.stackingregressor method)": [[533, "sklearn.ensemble.StackingRegressor.score"]], "set_fit_request() (sklearn.ensemble.stackingregressor method)": [[533, "sklearn.ensemble.StackingRegressor.set_fit_request"]], "set_output() (sklearn.ensemble.stackingregressor method)": [[533, "sklearn.ensemble.StackingRegressor.set_output"]], "set_params() (sklearn.ensemble.stackingregressor method)": [[533, "sklearn.ensemble.StackingRegressor.set_params"]], "set_score_request() (sklearn.ensemble.stackingregressor method)": [[533, "sklearn.ensemble.StackingRegressor.set_score_request"]], "transform() (sklearn.ensemble.stackingregressor method)": [[533, "sklearn.ensemble.StackingRegressor.transform"]], "votingclassifier (class in sklearn.ensemble)": [[534, "sklearn.ensemble.VotingClassifier"]], "fit() (sklearn.ensemble.votingclassifier method)": [[534, "sklearn.ensemble.VotingClassifier.fit"]], "fit_transform() (sklearn.ensemble.votingclassifier method)": [[534, "sklearn.ensemble.VotingClassifier.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.votingclassifier method)": [[534, "sklearn.ensemble.VotingClassifier.get_feature_names_out"]], "get_metadata_routing() (sklearn.ensemble.votingclassifier method)": [[534, "sklearn.ensemble.VotingClassifier.get_metadata_routing"]], "get_params() (sklearn.ensemble.votingclassifier method)": [[534, "sklearn.ensemble.VotingClassifier.get_params"]], "n_features_in_ (sklearn.ensemble.votingclassifier property)": [[534, "sklearn.ensemble.VotingClassifier.n_features_in_"]], "named_estimators (sklearn.ensemble.votingclassifier property)": [[534, "sklearn.ensemble.VotingClassifier.named_estimators"]], "predict() (sklearn.ensemble.votingclassifier method)": [[534, "sklearn.ensemble.VotingClassifier.predict"]], "predict_proba() (sklearn.ensemble.votingclassifier method)": [[534, "sklearn.ensemble.VotingClassifier.predict_proba"]], "score() (sklearn.ensemble.votingclassifier method)": [[534, "sklearn.ensemble.VotingClassifier.score"]], "set_fit_request() (sklearn.ensemble.votingclassifier method)": [[534, "sklearn.ensemble.VotingClassifier.set_fit_request"]], "set_output() (sklearn.ensemble.votingclassifier method)": [[534, "sklearn.ensemble.VotingClassifier.set_output"]], "set_params() (sklearn.ensemble.votingclassifier method)": [[534, "sklearn.ensemble.VotingClassifier.set_params"]], "set_score_request() (sklearn.ensemble.votingclassifier method)": [[534, "sklearn.ensemble.VotingClassifier.set_score_request"]], "transform() (sklearn.ensemble.votingclassifier method)": [[534, "sklearn.ensemble.VotingClassifier.transform"]], "votingregressor (class in sklearn.ensemble)": [[535, "sklearn.ensemble.VotingRegressor"]], "fit() (sklearn.ensemble.votingregressor method)": [[535, "sklearn.ensemble.VotingRegressor.fit"]], "fit_transform() (sklearn.ensemble.votingregressor method)": [[535, "sklearn.ensemble.VotingRegressor.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.votingregressor method)": [[535, "sklearn.ensemble.VotingRegressor.get_feature_names_out"]], "get_metadata_routing() (sklearn.ensemble.votingregressor method)": [[535, "sklearn.ensemble.VotingRegressor.get_metadata_routing"]], "get_params() (sklearn.ensemble.votingregressor method)": [[535, "sklearn.ensemble.VotingRegressor.get_params"]], "n_features_in_ (sklearn.ensemble.votingregressor property)": [[535, "sklearn.ensemble.VotingRegressor.n_features_in_"]], "named_estimators (sklearn.ensemble.votingregressor property)": [[535, "sklearn.ensemble.VotingRegressor.named_estimators"]], "predict() (sklearn.ensemble.votingregressor method)": [[535, "sklearn.ensemble.VotingRegressor.predict"]], "score() (sklearn.ensemble.votingregressor method)": [[535, "sklearn.ensemble.VotingRegressor.score"]], "set_fit_request() (sklearn.ensemble.votingregressor method)": [[535, "sklearn.ensemble.VotingRegressor.set_fit_request"]], "set_output() (sklearn.ensemble.votingregressor method)": [[535, "sklearn.ensemble.VotingRegressor.set_output"]], "set_params() (sklearn.ensemble.votingregressor method)": [[535, "sklearn.ensemble.VotingRegressor.set_params"]], "set_score_request() (sklearn.ensemble.votingregressor method)": [[535, "sklearn.ensemble.VotingRegressor.set_score_request"]], "transform() (sklearn.ensemble.votingregressor method)": [[535, "sklearn.ensemble.VotingRegressor.transform"]], "convergencewarning (class in sklearn.exceptions)": [[536, "sklearn.exceptions.ConvergenceWarning"]], "with_traceback() (sklearn.exceptions.convergencewarning method)": [[536, "sklearn.exceptions.ConvergenceWarning.with_traceback"]], "dataconversionwarning (class in sklearn.exceptions)": [[537, "sklearn.exceptions.DataConversionWarning"]], "with_traceback() (sklearn.exceptions.dataconversionwarning method)": [[537, "sklearn.exceptions.DataConversionWarning.with_traceback"]], "datadimensionalitywarning (class in sklearn.exceptions)": [[538, "sklearn.exceptions.DataDimensionalityWarning"]], "with_traceback() (sklearn.exceptions.datadimensionalitywarning method)": [[538, "sklearn.exceptions.DataDimensionalityWarning.with_traceback"]], "efficiencywarning (class in sklearn.exceptions)": [[539, "sklearn.exceptions.EfficiencyWarning"]], "with_traceback() (sklearn.exceptions.efficiencywarning method)": [[539, "sklearn.exceptions.EfficiencyWarning.with_traceback"]], "fitfailedwarning (class in sklearn.exceptions)": [[540, "sklearn.exceptions.FitFailedWarning"]], "with_traceback() (sklearn.exceptions.fitfailedwarning method)": [[540, "sklearn.exceptions.FitFailedWarning.with_traceback"]], "inconsistentversionwarning (class in sklearn.exceptions)": [[541, "sklearn.exceptions.InconsistentVersionWarning"]], "with_traceback() (sklearn.exceptions.inconsistentversionwarning method)": [[541, "sklearn.exceptions.InconsistentVersionWarning.with_traceback"]], "notfittederror (class in sklearn.exceptions)": [[542, "sklearn.exceptions.NotFittedError"]], "with_traceback() (sklearn.exceptions.notfittederror method)": [[542, "sklearn.exceptions.NotFittedError.with_traceback"]], "undefinedmetricwarning (class in sklearn.exceptions)": [[543, "sklearn.exceptions.UndefinedMetricWarning"]], "with_traceback() (sklearn.exceptions.undefinedmetricwarning method)": [[543, "sklearn.exceptions.UndefinedMetricWarning.with_traceback"]], "sklearn.experimental.enable_halving_search_cv": [[544, "module-sklearn.experimental.enable_halving_search_cv"]], "sklearn.experimental.enable_iterative_imputer": [[545, "module-sklearn.experimental.enable_iterative_imputer"]], "dictvectorizer (class in sklearn.feature_extraction)": [[546, "sklearn.feature_extraction.DictVectorizer"]], "fit() (sklearn.feature_extraction.dictvectorizer method)": [[546, "sklearn.feature_extraction.DictVectorizer.fit"]], "fit_transform() (sklearn.feature_extraction.dictvectorizer method)": [[546, "sklearn.feature_extraction.DictVectorizer.fit_transform"]], "get_feature_names_out() (sklearn.feature_extraction.dictvectorizer method)": [[546, "sklearn.feature_extraction.DictVectorizer.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_extraction.dictvectorizer method)": [[546, "sklearn.feature_extraction.DictVectorizer.get_metadata_routing"]], "get_params() (sklearn.feature_extraction.dictvectorizer method)": [[546, "sklearn.feature_extraction.DictVectorizer.get_params"]], "inverse_transform() (sklearn.feature_extraction.dictvectorizer method)": [[546, "sklearn.feature_extraction.DictVectorizer.inverse_transform"]], "restrict() (sklearn.feature_extraction.dictvectorizer method)": [[546, "sklearn.feature_extraction.DictVectorizer.restrict"]], "set_inverse_transform_request() (sklearn.feature_extraction.dictvectorizer method)": [[546, "sklearn.feature_extraction.DictVectorizer.set_inverse_transform_request"]], "set_output() (sklearn.feature_extraction.dictvectorizer method)": [[546, "sklearn.feature_extraction.DictVectorizer.set_output"]], "set_params() (sklearn.feature_extraction.dictvectorizer method)": [[546, "sklearn.feature_extraction.DictVectorizer.set_params"]], "transform() (sklearn.feature_extraction.dictvectorizer method)": [[546, "sklearn.feature_extraction.DictVectorizer.transform"]], "featurehasher (class in sklearn.feature_extraction)": [[547, "sklearn.feature_extraction.FeatureHasher"]], "fit() (sklearn.feature_extraction.featurehasher method)": [[547, "sklearn.feature_extraction.FeatureHasher.fit"]], "fit_transform() (sklearn.feature_extraction.featurehasher method)": [[547, "sklearn.feature_extraction.FeatureHasher.fit_transform"]], "get_metadata_routing() (sklearn.feature_extraction.featurehasher method)": [[547, "sklearn.feature_extraction.FeatureHasher.get_metadata_routing"]], "get_params() (sklearn.feature_extraction.featurehasher method)": [[547, "sklearn.feature_extraction.FeatureHasher.get_params"]], "set_output() (sklearn.feature_extraction.featurehasher method)": [[547, "sklearn.feature_extraction.FeatureHasher.set_output"]], "set_params() (sklearn.feature_extraction.featurehasher method)": [[547, "sklearn.feature_extraction.FeatureHasher.set_params"]], "set_transform_request() (sklearn.feature_extraction.featurehasher method)": [[547, "sklearn.feature_extraction.FeatureHasher.set_transform_request"]], "transform() (sklearn.feature_extraction.featurehasher method)": [[547, "sklearn.feature_extraction.FeatureHasher.transform"]], "patchextractor (class in sklearn.feature_extraction.image)": [[548, "sklearn.feature_extraction.image.PatchExtractor"]], "fit() (sklearn.feature_extraction.image.patchextractor method)": [[548, "sklearn.feature_extraction.image.PatchExtractor.fit"]], "fit_transform() (sklearn.feature_extraction.image.patchextractor method)": [[548, "sklearn.feature_extraction.image.PatchExtractor.fit_transform"]], "get_metadata_routing() (sklearn.feature_extraction.image.patchextractor method)": [[548, "sklearn.feature_extraction.image.PatchExtractor.get_metadata_routing"]], "get_params() (sklearn.feature_extraction.image.patchextractor method)": [[548, "sklearn.feature_extraction.image.PatchExtractor.get_params"]], "set_output() (sklearn.feature_extraction.image.patchextractor method)": [[548, "sklearn.feature_extraction.image.PatchExtractor.set_output"]], "set_params() (sklearn.feature_extraction.image.patchextractor method)": [[548, "sklearn.feature_extraction.image.PatchExtractor.set_params"]], "transform() (sklearn.feature_extraction.image.patchextractor method)": [[548, "sklearn.feature_extraction.image.PatchExtractor.transform"]], "extract_patches_2d() (in module sklearn.feature_extraction.image)": [[549, "sklearn.feature_extraction.image.extract_patches_2d"]], "grid_to_graph() (in module sklearn.feature_extraction.image)": [[550, "sklearn.feature_extraction.image.grid_to_graph"]], "img_to_graph() (in module sklearn.feature_extraction.image)": [[551, "sklearn.feature_extraction.image.img_to_graph"]], "reconstruct_from_patches_2d() (in module sklearn.feature_extraction.image)": [[552, "sklearn.feature_extraction.image.reconstruct_from_patches_2d"]], "countvectorizer (class in sklearn.feature_extraction.text)": [[553, "sklearn.feature_extraction.text.CountVectorizer"]], "build_analyzer() (sklearn.feature_extraction.text.countvectorizer method)": [[553, "sklearn.feature_extraction.text.CountVectorizer.build_analyzer"]], "build_preprocessor() (sklearn.feature_extraction.text.countvectorizer method)": [[553, "sklearn.feature_extraction.text.CountVectorizer.build_preprocessor"]], "build_tokenizer() (sklearn.feature_extraction.text.countvectorizer method)": [[553, "sklearn.feature_extraction.text.CountVectorizer.build_tokenizer"]], "decode() (sklearn.feature_extraction.text.countvectorizer method)": [[553, "sklearn.feature_extraction.text.CountVectorizer.decode"]], "fit() (sklearn.feature_extraction.text.countvectorizer method)": [[553, "sklearn.feature_extraction.text.CountVectorizer.fit"]], "fit_transform() (sklearn.feature_extraction.text.countvectorizer method)": [[553, "sklearn.feature_extraction.text.CountVectorizer.fit_transform"]], "get_feature_names_out() (sklearn.feature_extraction.text.countvectorizer method)": [[553, "sklearn.feature_extraction.text.CountVectorizer.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_extraction.text.countvectorizer method)": [[553, "sklearn.feature_extraction.text.CountVectorizer.get_metadata_routing"]], "get_params() (sklearn.feature_extraction.text.countvectorizer method)": [[553, "sklearn.feature_extraction.text.CountVectorizer.get_params"]], "get_stop_words() (sklearn.feature_extraction.text.countvectorizer method)": [[553, "sklearn.feature_extraction.text.CountVectorizer.get_stop_words"]], "inverse_transform() (sklearn.feature_extraction.text.countvectorizer method)": [[553, "sklearn.feature_extraction.text.CountVectorizer.inverse_transform"]], "set_fit_request() (sklearn.feature_extraction.text.countvectorizer method)": [[553, "sklearn.feature_extraction.text.CountVectorizer.set_fit_request"]], "set_params() (sklearn.feature_extraction.text.countvectorizer method)": [[553, "sklearn.feature_extraction.text.CountVectorizer.set_params"]], "set_transform_request() (sklearn.feature_extraction.text.countvectorizer method)": [[553, "sklearn.feature_extraction.text.CountVectorizer.set_transform_request"]], "transform() (sklearn.feature_extraction.text.countvectorizer method)": [[553, "sklearn.feature_extraction.text.CountVectorizer.transform"]], "hashingvectorizer (class in sklearn.feature_extraction.text)": [[554, "sklearn.feature_extraction.text.HashingVectorizer"]], "build_analyzer() (sklearn.feature_extraction.text.hashingvectorizer method)": [[554, "sklearn.feature_extraction.text.HashingVectorizer.build_analyzer"]], "build_preprocessor() (sklearn.feature_extraction.text.hashingvectorizer method)": [[554, "sklearn.feature_extraction.text.HashingVectorizer.build_preprocessor"]], "build_tokenizer() (sklearn.feature_extraction.text.hashingvectorizer method)": [[554, "sklearn.feature_extraction.text.HashingVectorizer.build_tokenizer"]], "decode() (sklearn.feature_extraction.text.hashingvectorizer method)": [[554, "sklearn.feature_extraction.text.HashingVectorizer.decode"]], "fit() (sklearn.feature_extraction.text.hashingvectorizer method)": [[554, "sklearn.feature_extraction.text.HashingVectorizer.fit"]], "fit_transform() (sklearn.feature_extraction.text.hashingvectorizer method)": [[554, "sklearn.feature_extraction.text.HashingVectorizer.fit_transform"]], "get_metadata_routing() (sklearn.feature_extraction.text.hashingvectorizer method)": [[554, "sklearn.feature_extraction.text.HashingVectorizer.get_metadata_routing"]], "get_params() (sklearn.feature_extraction.text.hashingvectorizer method)": [[554, "sklearn.feature_extraction.text.HashingVectorizer.get_params"]], "get_stop_words() (sklearn.feature_extraction.text.hashingvectorizer method)": [[554, "sklearn.feature_extraction.text.HashingVectorizer.get_stop_words"]], "partial_fit() (sklearn.feature_extraction.text.hashingvectorizer method)": [[554, "sklearn.feature_extraction.text.HashingVectorizer.partial_fit"]], "set_output() (sklearn.feature_extraction.text.hashingvectorizer method)": [[554, "sklearn.feature_extraction.text.HashingVectorizer.set_output"]], "set_params() (sklearn.feature_extraction.text.hashingvectorizer method)": [[554, "sklearn.feature_extraction.text.HashingVectorizer.set_params"]], "transform() (sklearn.feature_extraction.text.hashingvectorizer method)": [[554, "sklearn.feature_extraction.text.HashingVectorizer.transform"]], "tfidftransformer (class in sklearn.feature_extraction.text)": [[555, "sklearn.feature_extraction.text.TfidfTransformer"]], "fit() (sklearn.feature_extraction.text.tfidftransformer method)": [[555, "sklearn.feature_extraction.text.TfidfTransformer.fit"]], "fit_transform() (sklearn.feature_extraction.text.tfidftransformer method)": [[555, "sklearn.feature_extraction.text.TfidfTransformer.fit_transform"]], "get_feature_names_out() (sklearn.feature_extraction.text.tfidftransformer method)": [[555, "sklearn.feature_extraction.text.TfidfTransformer.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_extraction.text.tfidftransformer method)": [[555, "sklearn.feature_extraction.text.TfidfTransformer.get_metadata_routing"]], "get_params() (sklearn.feature_extraction.text.tfidftransformer method)": [[555, "sklearn.feature_extraction.text.TfidfTransformer.get_params"]], "set_output() (sklearn.feature_extraction.text.tfidftransformer method)": [[555, "sklearn.feature_extraction.text.TfidfTransformer.set_output"]], "set_params() (sklearn.feature_extraction.text.tfidftransformer method)": [[555, "sklearn.feature_extraction.text.TfidfTransformer.set_params"]], "set_transform_request() (sklearn.feature_extraction.text.tfidftransformer method)": [[555, "sklearn.feature_extraction.text.TfidfTransformer.set_transform_request"]], "transform() (sklearn.feature_extraction.text.tfidftransformer method)": [[555, "sklearn.feature_extraction.text.TfidfTransformer.transform"]], "tfidfvectorizer (class in sklearn.feature_extraction.text)": [[556, "sklearn.feature_extraction.text.TfidfVectorizer"]], "build_analyzer() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[556, "sklearn.feature_extraction.text.TfidfVectorizer.build_analyzer"]], "build_preprocessor() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[556, "sklearn.feature_extraction.text.TfidfVectorizer.build_preprocessor"]], "build_tokenizer() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[556, "sklearn.feature_extraction.text.TfidfVectorizer.build_tokenizer"]], "decode() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[556, "sklearn.feature_extraction.text.TfidfVectorizer.decode"]], "fit() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[556, "sklearn.feature_extraction.text.TfidfVectorizer.fit"]], "fit_transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[556, "sklearn.feature_extraction.text.TfidfVectorizer.fit_transform"]], "get_feature_names_out() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[556, "sklearn.feature_extraction.text.TfidfVectorizer.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[556, "sklearn.feature_extraction.text.TfidfVectorizer.get_metadata_routing"]], "get_params() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[556, "sklearn.feature_extraction.text.TfidfVectorizer.get_params"]], "get_stop_words() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[556, "sklearn.feature_extraction.text.TfidfVectorizer.get_stop_words"]], "idf_ (sklearn.feature_extraction.text.tfidfvectorizer property)": [[556, "sklearn.feature_extraction.text.TfidfVectorizer.idf_"]], "inverse_transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[556, "sklearn.feature_extraction.text.TfidfVectorizer.inverse_transform"]], "set_fit_request() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[556, "sklearn.feature_extraction.text.TfidfVectorizer.set_fit_request"]], "set_params() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[556, "sklearn.feature_extraction.text.TfidfVectorizer.set_params"]], "set_transform_request() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[556, "sklearn.feature_extraction.text.TfidfVectorizer.set_transform_request"]], "transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[556, "sklearn.feature_extraction.text.TfidfVectorizer.transform"]], "genericunivariateselect (class in sklearn.feature_selection)": [[557, "sklearn.feature_selection.GenericUnivariateSelect"]], "fit() (sklearn.feature_selection.genericunivariateselect method)": [[557, "sklearn.feature_selection.GenericUnivariateSelect.fit"]], "fit_transform() (sklearn.feature_selection.genericunivariateselect method)": [[557, "sklearn.feature_selection.GenericUnivariateSelect.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.genericunivariateselect method)": [[557, "sklearn.feature_selection.GenericUnivariateSelect.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.genericunivariateselect method)": [[557, "sklearn.feature_selection.GenericUnivariateSelect.get_metadata_routing"]], "get_params() (sklearn.feature_selection.genericunivariateselect method)": [[557, "sklearn.feature_selection.GenericUnivariateSelect.get_params"]], "get_support() (sklearn.feature_selection.genericunivariateselect method)": [[557, "sklearn.feature_selection.GenericUnivariateSelect.get_support"]], "inverse_transform() (sklearn.feature_selection.genericunivariateselect method)": [[557, "sklearn.feature_selection.GenericUnivariateSelect.inverse_transform"]], "set_output() (sklearn.feature_selection.genericunivariateselect method)": [[557, "sklearn.feature_selection.GenericUnivariateSelect.set_output"]], "set_params() (sklearn.feature_selection.genericunivariateselect method)": [[557, "sklearn.feature_selection.GenericUnivariateSelect.set_params"]], "transform() (sklearn.feature_selection.genericunivariateselect method)": [[557, "sklearn.feature_selection.GenericUnivariateSelect.transform"]], "rfe (class in sklearn.feature_selection)": [[558, "sklearn.feature_selection.RFE"]], "classes_ (sklearn.feature_selection.rfe property)": [[558, "sklearn.feature_selection.RFE.classes_"]], "decision_function() (sklearn.feature_selection.rfe method)": [[558, "sklearn.feature_selection.RFE.decision_function"]], "fit() (sklearn.feature_selection.rfe method)": [[558, "sklearn.feature_selection.RFE.fit"]], "fit_transform() (sklearn.feature_selection.rfe method)": [[558, "sklearn.feature_selection.RFE.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.rfe method)": [[558, "sklearn.feature_selection.RFE.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.rfe method)": [[558, "sklearn.feature_selection.RFE.get_metadata_routing"]], "get_params() (sklearn.feature_selection.rfe method)": [[558, "sklearn.feature_selection.RFE.get_params"]], "get_support() (sklearn.feature_selection.rfe method)": [[558, "sklearn.feature_selection.RFE.get_support"]], "inverse_transform() (sklearn.feature_selection.rfe method)": [[558, "sklearn.feature_selection.RFE.inverse_transform"]], "predict() (sklearn.feature_selection.rfe method)": [[558, "sklearn.feature_selection.RFE.predict"]], "predict_log_proba() (sklearn.feature_selection.rfe method)": [[558, "sklearn.feature_selection.RFE.predict_log_proba"]], "predict_proba() (sklearn.feature_selection.rfe method)": [[558, "sklearn.feature_selection.RFE.predict_proba"]], "score() (sklearn.feature_selection.rfe method)": [[558, "sklearn.feature_selection.RFE.score"]], "set_output() (sklearn.feature_selection.rfe method)": [[558, "sklearn.feature_selection.RFE.set_output"]], "set_params() (sklearn.feature_selection.rfe method)": [[558, "sklearn.feature_selection.RFE.set_params"]], "transform() (sklearn.feature_selection.rfe method)": [[558, "sklearn.feature_selection.RFE.transform"]], "rfecv (class in sklearn.feature_selection)": [[559, "sklearn.feature_selection.RFECV"]], "classes_ (sklearn.feature_selection.rfecv property)": [[559, "sklearn.feature_selection.RFECV.classes_"]], "decision_function() (sklearn.feature_selection.rfecv method)": [[559, "sklearn.feature_selection.RFECV.decision_function"]], "fit() (sklearn.feature_selection.rfecv method)": [[559, "sklearn.feature_selection.RFECV.fit"]], "fit_transform() (sklearn.feature_selection.rfecv method)": [[559, "sklearn.feature_selection.RFECV.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.rfecv method)": [[559, "sklearn.feature_selection.RFECV.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.rfecv method)": [[559, "sklearn.feature_selection.RFECV.get_metadata_routing"]], "get_params() (sklearn.feature_selection.rfecv method)": [[559, "sklearn.feature_selection.RFECV.get_params"]], "get_support() (sklearn.feature_selection.rfecv method)": [[559, "sklearn.feature_selection.RFECV.get_support"]], "inverse_transform() (sklearn.feature_selection.rfecv method)": [[559, "sklearn.feature_selection.RFECV.inverse_transform"]], "predict() (sklearn.feature_selection.rfecv method)": [[559, "sklearn.feature_selection.RFECV.predict"]], "predict_log_proba() (sklearn.feature_selection.rfecv method)": [[559, "sklearn.feature_selection.RFECV.predict_log_proba"]], "predict_proba() (sklearn.feature_selection.rfecv method)": [[559, "sklearn.feature_selection.RFECV.predict_proba"]], "score() (sklearn.feature_selection.rfecv method)": [[559, "sklearn.feature_selection.RFECV.score"]], "set_fit_request() (sklearn.feature_selection.rfecv method)": [[559, "sklearn.feature_selection.RFECV.set_fit_request"]], "set_output() (sklearn.feature_selection.rfecv method)": [[559, "sklearn.feature_selection.RFECV.set_output"]], "set_params() (sklearn.feature_selection.rfecv method)": [[559, "sklearn.feature_selection.RFECV.set_params"]], "transform() (sklearn.feature_selection.rfecv method)": [[559, "sklearn.feature_selection.RFECV.transform"]], "selectfdr (class in sklearn.feature_selection)": [[560, "sklearn.feature_selection.SelectFdr"]], "fit() (sklearn.feature_selection.selectfdr method)": [[560, "sklearn.feature_selection.SelectFdr.fit"]], "fit_transform() (sklearn.feature_selection.selectfdr method)": [[560, "sklearn.feature_selection.SelectFdr.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectfdr method)": [[560, "sklearn.feature_selection.SelectFdr.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.selectfdr method)": [[560, "sklearn.feature_selection.SelectFdr.get_metadata_routing"]], "get_params() (sklearn.feature_selection.selectfdr method)": [[560, "sklearn.feature_selection.SelectFdr.get_params"]], "get_support() (sklearn.feature_selection.selectfdr method)": [[560, "sklearn.feature_selection.SelectFdr.get_support"]], "inverse_transform() (sklearn.feature_selection.selectfdr method)": [[560, "sklearn.feature_selection.SelectFdr.inverse_transform"]], "set_output() (sklearn.feature_selection.selectfdr method)": [[560, "sklearn.feature_selection.SelectFdr.set_output"]], "set_params() (sklearn.feature_selection.selectfdr method)": [[560, "sklearn.feature_selection.SelectFdr.set_params"]], "transform() (sklearn.feature_selection.selectfdr method)": [[560, "sklearn.feature_selection.SelectFdr.transform"]], "selectfpr (class in sklearn.feature_selection)": [[561, "sklearn.feature_selection.SelectFpr"]], "fit() (sklearn.feature_selection.selectfpr method)": [[561, "sklearn.feature_selection.SelectFpr.fit"]], "fit_transform() (sklearn.feature_selection.selectfpr method)": [[561, "sklearn.feature_selection.SelectFpr.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectfpr method)": [[561, "sklearn.feature_selection.SelectFpr.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.selectfpr method)": [[561, "sklearn.feature_selection.SelectFpr.get_metadata_routing"]], "get_params() (sklearn.feature_selection.selectfpr method)": [[561, "sklearn.feature_selection.SelectFpr.get_params"]], "get_support() (sklearn.feature_selection.selectfpr method)": [[561, "sklearn.feature_selection.SelectFpr.get_support"]], "inverse_transform() (sklearn.feature_selection.selectfpr method)": [[561, "sklearn.feature_selection.SelectFpr.inverse_transform"]], "set_output() (sklearn.feature_selection.selectfpr method)": [[561, "sklearn.feature_selection.SelectFpr.set_output"]], "set_params() (sklearn.feature_selection.selectfpr method)": [[561, "sklearn.feature_selection.SelectFpr.set_params"]], "transform() (sklearn.feature_selection.selectfpr method)": [[561, "sklearn.feature_selection.SelectFpr.transform"]], "selectfrommodel (class in sklearn.feature_selection)": [[562, "sklearn.feature_selection.SelectFromModel"]], "fit() (sklearn.feature_selection.selectfrommodel method)": [[562, "sklearn.feature_selection.SelectFromModel.fit"]], "fit_transform() (sklearn.feature_selection.selectfrommodel method)": [[562, "sklearn.feature_selection.SelectFromModel.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectfrommodel method)": [[562, "sklearn.feature_selection.SelectFromModel.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.selectfrommodel method)": [[562, "sklearn.feature_selection.SelectFromModel.get_metadata_routing"]], "get_params() (sklearn.feature_selection.selectfrommodel method)": [[562, "sklearn.feature_selection.SelectFromModel.get_params"]], "get_support() (sklearn.feature_selection.selectfrommodel method)": [[562, "sklearn.feature_selection.SelectFromModel.get_support"]], "inverse_transform() (sklearn.feature_selection.selectfrommodel method)": [[562, "sklearn.feature_selection.SelectFromModel.inverse_transform"]], "n_features_in_ (sklearn.feature_selection.selectfrommodel property)": [[562, "sklearn.feature_selection.SelectFromModel.n_features_in_"]], "partial_fit() (sklearn.feature_selection.selectfrommodel method)": [[562, "sklearn.feature_selection.SelectFromModel.partial_fit"]], "set_output() (sklearn.feature_selection.selectfrommodel method)": [[562, "sklearn.feature_selection.SelectFromModel.set_output"]], "set_params() (sklearn.feature_selection.selectfrommodel method)": [[562, "sklearn.feature_selection.SelectFromModel.set_params"]], "threshold_ (sklearn.feature_selection.selectfrommodel property)": [[562, "sklearn.feature_selection.SelectFromModel.threshold_"]], "transform() (sklearn.feature_selection.selectfrommodel method)": [[562, "sklearn.feature_selection.SelectFromModel.transform"]], "selectfwe (class in sklearn.feature_selection)": [[563, "sklearn.feature_selection.SelectFwe"]], "fit() (sklearn.feature_selection.selectfwe method)": [[563, "sklearn.feature_selection.SelectFwe.fit"]], "fit_transform() (sklearn.feature_selection.selectfwe method)": [[563, "sklearn.feature_selection.SelectFwe.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectfwe method)": [[563, "sklearn.feature_selection.SelectFwe.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.selectfwe method)": [[563, "sklearn.feature_selection.SelectFwe.get_metadata_routing"]], "get_params() (sklearn.feature_selection.selectfwe method)": [[563, "sklearn.feature_selection.SelectFwe.get_params"]], "get_support() (sklearn.feature_selection.selectfwe method)": [[563, "sklearn.feature_selection.SelectFwe.get_support"]], "inverse_transform() (sklearn.feature_selection.selectfwe method)": [[563, "sklearn.feature_selection.SelectFwe.inverse_transform"]], "set_output() (sklearn.feature_selection.selectfwe method)": [[563, "sklearn.feature_selection.SelectFwe.set_output"]], "set_params() (sklearn.feature_selection.selectfwe method)": [[563, "sklearn.feature_selection.SelectFwe.set_params"]], "transform() (sklearn.feature_selection.selectfwe method)": [[563, "sklearn.feature_selection.SelectFwe.transform"]], "selectkbest (class in sklearn.feature_selection)": [[564, "sklearn.feature_selection.SelectKBest"]], "fit() (sklearn.feature_selection.selectkbest method)": [[564, "sklearn.feature_selection.SelectKBest.fit"]], "fit_transform() (sklearn.feature_selection.selectkbest method)": [[564, "sklearn.feature_selection.SelectKBest.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectkbest method)": [[564, "sklearn.feature_selection.SelectKBest.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.selectkbest method)": [[564, "sklearn.feature_selection.SelectKBest.get_metadata_routing"]], "get_params() (sklearn.feature_selection.selectkbest method)": [[564, "sklearn.feature_selection.SelectKBest.get_params"]], "get_support() (sklearn.feature_selection.selectkbest method)": [[564, "sklearn.feature_selection.SelectKBest.get_support"]], "inverse_transform() (sklearn.feature_selection.selectkbest method)": [[564, "sklearn.feature_selection.SelectKBest.inverse_transform"]], "set_output() (sklearn.feature_selection.selectkbest method)": [[564, "sklearn.feature_selection.SelectKBest.set_output"]], "set_params() (sklearn.feature_selection.selectkbest method)": [[564, "sklearn.feature_selection.SelectKBest.set_params"]], "transform() (sklearn.feature_selection.selectkbest method)": [[564, "sklearn.feature_selection.SelectKBest.transform"]], "selectpercentile (class in sklearn.feature_selection)": [[565, "sklearn.feature_selection.SelectPercentile"]], "fit() (sklearn.feature_selection.selectpercentile method)": [[565, "sklearn.feature_selection.SelectPercentile.fit"]], "fit_transform() (sklearn.feature_selection.selectpercentile method)": [[565, "sklearn.feature_selection.SelectPercentile.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectpercentile method)": [[565, "sklearn.feature_selection.SelectPercentile.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.selectpercentile method)": [[565, "sklearn.feature_selection.SelectPercentile.get_metadata_routing"]], "get_params() (sklearn.feature_selection.selectpercentile method)": [[565, "sklearn.feature_selection.SelectPercentile.get_params"]], "get_support() (sklearn.feature_selection.selectpercentile method)": [[565, "sklearn.feature_selection.SelectPercentile.get_support"]], "inverse_transform() (sklearn.feature_selection.selectpercentile method)": [[565, "sklearn.feature_selection.SelectPercentile.inverse_transform"]], "set_output() (sklearn.feature_selection.selectpercentile method)": [[565, "sklearn.feature_selection.SelectPercentile.set_output"]], "set_params() (sklearn.feature_selection.selectpercentile method)": [[565, "sklearn.feature_selection.SelectPercentile.set_params"]], "transform() (sklearn.feature_selection.selectpercentile method)": [[565, "sklearn.feature_selection.SelectPercentile.transform"]], "selectormixin (class in sklearn.feature_selection)": [[566, "sklearn.feature_selection.SelectorMixin"]], "fit_transform() (sklearn.feature_selection.selectormixin method)": [[566, "sklearn.feature_selection.SelectorMixin.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectormixin method)": [[566, "sklearn.feature_selection.SelectorMixin.get_feature_names_out"]], "get_support() (sklearn.feature_selection.selectormixin method)": [[566, "sklearn.feature_selection.SelectorMixin.get_support"]], "inverse_transform() (sklearn.feature_selection.selectormixin method)": [[566, "sklearn.feature_selection.SelectorMixin.inverse_transform"]], "set_output() (sklearn.feature_selection.selectormixin method)": [[566, "sklearn.feature_selection.SelectorMixin.set_output"]], "transform() (sklearn.feature_selection.selectormixin method)": [[566, "sklearn.feature_selection.SelectorMixin.transform"]], "sequentialfeatureselector (class in sklearn.feature_selection)": [[567, "sklearn.feature_selection.SequentialFeatureSelector"]], "fit() (sklearn.feature_selection.sequentialfeatureselector method)": [[567, "sklearn.feature_selection.SequentialFeatureSelector.fit"]], "fit_transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[567, "sklearn.feature_selection.SequentialFeatureSelector.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.sequentialfeatureselector method)": [[567, "sklearn.feature_selection.SequentialFeatureSelector.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.sequentialfeatureselector method)": [[567, "sklearn.feature_selection.SequentialFeatureSelector.get_metadata_routing"]], "get_params() (sklearn.feature_selection.sequentialfeatureselector method)": [[567, "sklearn.feature_selection.SequentialFeatureSelector.get_params"]], "get_support() (sklearn.feature_selection.sequentialfeatureselector method)": [[567, "sklearn.feature_selection.SequentialFeatureSelector.get_support"]], "inverse_transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[567, "sklearn.feature_selection.SequentialFeatureSelector.inverse_transform"]], "set_output() (sklearn.feature_selection.sequentialfeatureselector method)": [[567, "sklearn.feature_selection.SequentialFeatureSelector.set_output"]], "set_params() (sklearn.feature_selection.sequentialfeatureselector method)": [[567, "sklearn.feature_selection.SequentialFeatureSelector.set_params"]], "transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[567, "sklearn.feature_selection.SequentialFeatureSelector.transform"]], "variancethreshold (class in sklearn.feature_selection)": [[568, "sklearn.feature_selection.VarianceThreshold"]], "fit() (sklearn.feature_selection.variancethreshold method)": [[568, "sklearn.feature_selection.VarianceThreshold.fit"]], "fit_transform() (sklearn.feature_selection.variancethreshold method)": [[568, "sklearn.feature_selection.VarianceThreshold.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.variancethreshold method)": [[568, "sklearn.feature_selection.VarianceThreshold.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.variancethreshold method)": [[568, "sklearn.feature_selection.VarianceThreshold.get_metadata_routing"]], "get_params() (sklearn.feature_selection.variancethreshold method)": [[568, "sklearn.feature_selection.VarianceThreshold.get_params"]], "get_support() (sklearn.feature_selection.variancethreshold method)": [[568, "sklearn.feature_selection.VarianceThreshold.get_support"]], "inverse_transform() (sklearn.feature_selection.variancethreshold method)": [[568, "sklearn.feature_selection.VarianceThreshold.inverse_transform"]], "set_output() (sklearn.feature_selection.variancethreshold method)": [[568, "sklearn.feature_selection.VarianceThreshold.set_output"]], "set_params() (sklearn.feature_selection.variancethreshold method)": [[568, "sklearn.feature_selection.VarianceThreshold.set_params"]], "transform() (sklearn.feature_selection.variancethreshold method)": [[568, "sklearn.feature_selection.VarianceThreshold.transform"]], "chi2() (in module sklearn.feature_selection)": [[569, "sklearn.feature_selection.chi2"]], "f_classif() (in module sklearn.feature_selection)": [[570, "sklearn.feature_selection.f_classif"]], "f_regression() (in module sklearn.feature_selection)": [[571, "sklearn.feature_selection.f_regression"]], "mutual_info_classif() (in module sklearn.feature_selection)": [[572, "sklearn.feature_selection.mutual_info_classif"]], "mutual_info_regression() (in module sklearn.feature_selection)": [[573, "sklearn.feature_selection.mutual_info_regression"]], "r_regression() (in module sklearn.feature_selection)": [[574, "sklearn.feature_selection.r_regression"]], "gaussianprocessclassifier (class in sklearn.gaussian_process)": [[575, "sklearn.gaussian_process.GaussianProcessClassifier"]], "fit() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[575, "sklearn.gaussian_process.GaussianProcessClassifier.fit"]], "get_metadata_routing() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[575, "sklearn.gaussian_process.GaussianProcessClassifier.get_metadata_routing"]], "get_params() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[575, "sklearn.gaussian_process.GaussianProcessClassifier.get_params"]], "kernel_ (sklearn.gaussian_process.gaussianprocessclassifier property)": [[575, "sklearn.gaussian_process.GaussianProcessClassifier.kernel_"]], "log_marginal_likelihood() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[575, "sklearn.gaussian_process.GaussianProcessClassifier.log_marginal_likelihood"]], "predict() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[575, "sklearn.gaussian_process.GaussianProcessClassifier.predict"]], "predict_proba() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[575, "sklearn.gaussian_process.GaussianProcessClassifier.predict_proba"]], "score() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[575, "sklearn.gaussian_process.GaussianProcessClassifier.score"]], "set_params() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[575, "sklearn.gaussian_process.GaussianProcessClassifier.set_params"]], "set_score_request() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[575, "sklearn.gaussian_process.GaussianProcessClassifier.set_score_request"]], "gaussianprocessregressor (class in sklearn.gaussian_process)": [[576, "sklearn.gaussian_process.GaussianProcessRegressor"]], "fit() (sklearn.gaussian_process.gaussianprocessregressor method)": [[576, "sklearn.gaussian_process.GaussianProcessRegressor.fit"]], "get_metadata_routing() (sklearn.gaussian_process.gaussianprocessregressor method)": [[576, "sklearn.gaussian_process.GaussianProcessRegressor.get_metadata_routing"]], "get_params() (sklearn.gaussian_process.gaussianprocessregressor method)": [[576, "sklearn.gaussian_process.GaussianProcessRegressor.get_params"]], "log_marginal_likelihood() (sklearn.gaussian_process.gaussianprocessregressor method)": [[576, "sklearn.gaussian_process.GaussianProcessRegressor.log_marginal_likelihood"]], "predict() (sklearn.gaussian_process.gaussianprocessregressor method)": [[576, "sklearn.gaussian_process.GaussianProcessRegressor.predict"]], "sample_y() (sklearn.gaussian_process.gaussianprocessregressor method)": [[576, "sklearn.gaussian_process.GaussianProcessRegressor.sample_y"]], "score() (sklearn.gaussian_process.gaussianprocessregressor method)": [[576, "sklearn.gaussian_process.GaussianProcessRegressor.score"]], "set_params() (sklearn.gaussian_process.gaussianprocessregressor method)": [[576, "sklearn.gaussian_process.GaussianProcessRegressor.set_params"]], "set_predict_request() (sklearn.gaussian_process.gaussianprocessregressor method)": [[576, "sklearn.gaussian_process.GaussianProcessRegressor.set_predict_request"]], "set_score_request() (sklearn.gaussian_process.gaussianprocessregressor method)": [[576, "sklearn.gaussian_process.GaussianProcessRegressor.set_score_request"]], "compoundkernel (class in sklearn.gaussian_process.kernels)": [[577, "sklearn.gaussian_process.kernels.CompoundKernel"]], "__call__() (sklearn.gaussian_process.kernels.compoundkernel method)": [[577, "sklearn.gaussian_process.kernels.CompoundKernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.compoundkernel property)": [[577, "sklearn.gaussian_process.kernels.CompoundKernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.compoundkernel method)": [[577, "sklearn.gaussian_process.kernels.CompoundKernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.compoundkernel method)": [[577, "sklearn.gaussian_process.kernels.CompoundKernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.compoundkernel method)": [[577, "sklearn.gaussian_process.kernels.CompoundKernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.compoundkernel property)": [[577, "sklearn.gaussian_process.kernels.CompoundKernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.compoundkernel method)": [[577, "sklearn.gaussian_process.kernels.CompoundKernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.compoundkernel property)": [[577, "sklearn.gaussian_process.kernels.CompoundKernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.compoundkernel property)": [[577, "sklearn.gaussian_process.kernels.CompoundKernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.compoundkernel method)": [[577, "sklearn.gaussian_process.kernels.CompoundKernel.set_params"]], "theta (sklearn.gaussian_process.kernels.compoundkernel property)": [[577, "sklearn.gaussian_process.kernels.CompoundKernel.theta"]], "constantkernel (class in sklearn.gaussian_process.kernels)": [[578, "sklearn.gaussian_process.kernels.ConstantKernel"]], "__call__() (sklearn.gaussian_process.kernels.constantkernel method)": [[578, "sklearn.gaussian_process.kernels.ConstantKernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.constantkernel property)": [[578, "sklearn.gaussian_process.kernels.ConstantKernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.constantkernel method)": [[578, "sklearn.gaussian_process.kernels.ConstantKernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.constantkernel method)": [[578, "sklearn.gaussian_process.kernels.ConstantKernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.constantkernel method)": [[578, "sklearn.gaussian_process.kernels.ConstantKernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.constantkernel property)": [[578, "sklearn.gaussian_process.kernels.ConstantKernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.constantkernel method)": [[578, "sklearn.gaussian_process.kernels.ConstantKernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.constantkernel property)": [[578, "sklearn.gaussian_process.kernels.ConstantKernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.constantkernel property)": [[578, "sklearn.gaussian_process.kernels.ConstantKernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.constantkernel method)": [[578, "sklearn.gaussian_process.kernels.ConstantKernel.set_params"]], "theta (sklearn.gaussian_process.kernels.constantkernel property)": [[578, "sklearn.gaussian_process.kernels.ConstantKernel.theta"]], "dotproduct (class in sklearn.gaussian_process.kernels)": [[579, "sklearn.gaussian_process.kernels.DotProduct"]], "__call__() (sklearn.gaussian_process.kernels.dotproduct method)": [[579, "sklearn.gaussian_process.kernels.DotProduct.__call__"]], "bounds (sklearn.gaussian_process.kernels.dotproduct property)": [[579, "sklearn.gaussian_process.kernels.DotProduct.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.dotproduct method)": [[579, "sklearn.gaussian_process.kernels.DotProduct.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.dotproduct method)": [[579, "sklearn.gaussian_process.kernels.DotProduct.diag"]], "get_params() (sklearn.gaussian_process.kernels.dotproduct method)": [[579, "sklearn.gaussian_process.kernels.DotProduct.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.dotproduct property)": [[579, "sklearn.gaussian_process.kernels.DotProduct.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.dotproduct method)": [[579, "sklearn.gaussian_process.kernels.DotProduct.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.dotproduct property)": [[579, "sklearn.gaussian_process.kernels.DotProduct.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.dotproduct property)": [[579, "sklearn.gaussian_process.kernels.DotProduct.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.dotproduct method)": [[579, "sklearn.gaussian_process.kernels.DotProduct.set_params"]], "theta (sklearn.gaussian_process.kernels.dotproduct property)": [[579, "sklearn.gaussian_process.kernels.DotProduct.theta"]], "expsinesquared (class in sklearn.gaussian_process.kernels)": [[580, "sklearn.gaussian_process.kernels.ExpSineSquared"]], "__call__() (sklearn.gaussian_process.kernels.expsinesquared method)": [[580, "sklearn.gaussian_process.kernels.ExpSineSquared.__call__"]], "bounds (sklearn.gaussian_process.kernels.expsinesquared property)": [[580, "sklearn.gaussian_process.kernels.ExpSineSquared.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.expsinesquared method)": [[580, "sklearn.gaussian_process.kernels.ExpSineSquared.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.expsinesquared method)": [[580, "sklearn.gaussian_process.kernels.ExpSineSquared.diag"]], "get_params() (sklearn.gaussian_process.kernels.expsinesquared method)": [[580, "sklearn.gaussian_process.kernels.ExpSineSquared.get_params"]], "hyperparameter_length_scale (sklearn.gaussian_process.kernels.expsinesquared property)": [[580, "sklearn.gaussian_process.kernels.ExpSineSquared.hyperparameter_length_scale"]], "hyperparameters (sklearn.gaussian_process.kernels.expsinesquared property)": [[580, "sklearn.gaussian_process.kernels.ExpSineSquared.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.expsinesquared method)": [[580, "sklearn.gaussian_process.kernels.ExpSineSquared.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.expsinesquared property)": [[580, "sklearn.gaussian_process.kernels.ExpSineSquared.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.expsinesquared property)": [[580, "sklearn.gaussian_process.kernels.ExpSineSquared.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.expsinesquared method)": [[580, "sklearn.gaussian_process.kernels.ExpSineSquared.set_params"]], "theta (sklearn.gaussian_process.kernels.expsinesquared property)": [[580, "sklearn.gaussian_process.kernels.ExpSineSquared.theta"]], "exponentiation (class in sklearn.gaussian_process.kernels)": [[581, "sklearn.gaussian_process.kernels.Exponentiation"]], "__call__() (sklearn.gaussian_process.kernels.exponentiation method)": [[581, "sklearn.gaussian_process.kernels.Exponentiation.__call__"]], "bounds (sklearn.gaussian_process.kernels.exponentiation property)": [[581, "sklearn.gaussian_process.kernels.Exponentiation.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.exponentiation method)": [[581, "sklearn.gaussian_process.kernels.Exponentiation.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.exponentiation method)": [[581, "sklearn.gaussian_process.kernels.Exponentiation.diag"]], "get_params() (sklearn.gaussian_process.kernels.exponentiation method)": [[581, "sklearn.gaussian_process.kernels.Exponentiation.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.exponentiation property)": [[581, "sklearn.gaussian_process.kernels.Exponentiation.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.exponentiation method)": [[581, "sklearn.gaussian_process.kernels.Exponentiation.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.exponentiation property)": [[581, "sklearn.gaussian_process.kernels.Exponentiation.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.exponentiation property)": [[581, "sklearn.gaussian_process.kernels.Exponentiation.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.exponentiation method)": [[581, "sklearn.gaussian_process.kernels.Exponentiation.set_params"]], "theta (sklearn.gaussian_process.kernels.exponentiation property)": [[581, "sklearn.gaussian_process.kernels.Exponentiation.theta"]], "hyperparameter (class in sklearn.gaussian_process.kernels)": [[582, "sklearn.gaussian_process.kernels.Hyperparameter"]], "__call__() (sklearn.gaussian_process.kernels.hyperparameter method)": [[582, "sklearn.gaussian_process.kernels.Hyperparameter.__call__"]], "bounds (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[582, "sklearn.gaussian_process.kernels.Hyperparameter.bounds"]], "count() (sklearn.gaussian_process.kernels.hyperparameter method)": [[582, "sklearn.gaussian_process.kernels.Hyperparameter.count"]], "fixed (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[582, "sklearn.gaussian_process.kernels.Hyperparameter.fixed"]], "index() (sklearn.gaussian_process.kernels.hyperparameter method)": [[582, "sklearn.gaussian_process.kernels.Hyperparameter.index"]], "n_elements (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[582, "sklearn.gaussian_process.kernels.Hyperparameter.n_elements"]], "name (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[582, "sklearn.gaussian_process.kernels.Hyperparameter.name"]], "value_type (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[582, "sklearn.gaussian_process.kernels.Hyperparameter.value_type"]], "kernel (class in sklearn.gaussian_process.kernels)": [[583, "sklearn.gaussian_process.kernels.Kernel"]], "__call__() (sklearn.gaussian_process.kernels.kernel method)": [[583, "sklearn.gaussian_process.kernels.Kernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.kernel property)": [[583, "sklearn.gaussian_process.kernels.Kernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.kernel method)": [[583, "sklearn.gaussian_process.kernels.Kernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.kernel method)": [[583, "sklearn.gaussian_process.kernels.Kernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.kernel method)": [[583, "sklearn.gaussian_process.kernels.Kernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.kernel property)": [[583, "sklearn.gaussian_process.kernels.Kernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.kernel method)": [[583, "sklearn.gaussian_process.kernels.Kernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.kernel property)": [[583, "sklearn.gaussian_process.kernels.Kernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.kernel property)": [[583, "sklearn.gaussian_process.kernels.Kernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.kernel method)": [[583, "sklearn.gaussian_process.kernels.Kernel.set_params"]], "theta (sklearn.gaussian_process.kernels.kernel property)": [[583, "sklearn.gaussian_process.kernels.Kernel.theta"]], "matern (class in sklearn.gaussian_process.kernels)": [[584, "sklearn.gaussian_process.kernels.Matern"]], "__call__() (sklearn.gaussian_process.kernels.matern method)": [[584, "sklearn.gaussian_process.kernels.Matern.__call__"]], "bounds (sklearn.gaussian_process.kernels.matern property)": [[584, "sklearn.gaussian_process.kernels.Matern.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.matern method)": [[584, "sklearn.gaussian_process.kernels.Matern.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.matern method)": [[584, "sklearn.gaussian_process.kernels.Matern.diag"]], "get_params() (sklearn.gaussian_process.kernels.matern method)": [[584, "sklearn.gaussian_process.kernels.Matern.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.matern property)": [[584, "sklearn.gaussian_process.kernels.Matern.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.matern method)": [[584, "sklearn.gaussian_process.kernels.Matern.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.matern property)": [[584, "sklearn.gaussian_process.kernels.Matern.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.matern property)": [[584, "sklearn.gaussian_process.kernels.Matern.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.matern method)": [[584, "sklearn.gaussian_process.kernels.Matern.set_params"]], "theta (sklearn.gaussian_process.kernels.matern property)": [[584, "sklearn.gaussian_process.kernels.Matern.theta"]], "pairwisekernel (class in sklearn.gaussian_process.kernels)": [[585, "sklearn.gaussian_process.kernels.PairwiseKernel"]], "__call__() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[585, "sklearn.gaussian_process.kernels.PairwiseKernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.pairwisekernel property)": [[585, "sklearn.gaussian_process.kernels.PairwiseKernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[585, "sklearn.gaussian_process.kernels.PairwiseKernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[585, "sklearn.gaussian_process.kernels.PairwiseKernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[585, "sklearn.gaussian_process.kernels.PairwiseKernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.pairwisekernel property)": [[585, "sklearn.gaussian_process.kernels.PairwiseKernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[585, "sklearn.gaussian_process.kernels.PairwiseKernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.pairwisekernel property)": [[585, "sklearn.gaussian_process.kernels.PairwiseKernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.pairwisekernel property)": [[585, "sklearn.gaussian_process.kernels.PairwiseKernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[585, "sklearn.gaussian_process.kernels.PairwiseKernel.set_params"]], "theta (sklearn.gaussian_process.kernels.pairwisekernel property)": [[585, "sklearn.gaussian_process.kernels.PairwiseKernel.theta"]], "product (class in sklearn.gaussian_process.kernels)": [[586, "sklearn.gaussian_process.kernels.Product"]], "__call__() (sklearn.gaussian_process.kernels.product method)": [[586, "sklearn.gaussian_process.kernels.Product.__call__"]], "bounds (sklearn.gaussian_process.kernels.product property)": [[586, "sklearn.gaussian_process.kernels.Product.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.product method)": [[586, "sklearn.gaussian_process.kernels.Product.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.product method)": [[586, "sklearn.gaussian_process.kernels.Product.diag"]], "get_params() (sklearn.gaussian_process.kernels.product method)": [[586, "sklearn.gaussian_process.kernels.Product.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.product property)": [[586, "sklearn.gaussian_process.kernels.Product.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.product method)": [[586, "sklearn.gaussian_process.kernels.Product.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.product property)": [[586, "sklearn.gaussian_process.kernels.Product.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.product property)": [[586, "sklearn.gaussian_process.kernels.Product.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.product method)": [[586, "sklearn.gaussian_process.kernels.Product.set_params"]], "theta (sklearn.gaussian_process.kernels.product property)": [[586, "sklearn.gaussian_process.kernels.Product.theta"]], "rbf (class in sklearn.gaussian_process.kernels)": [[587, "sklearn.gaussian_process.kernels.RBF"]], "__call__() (sklearn.gaussian_process.kernels.rbf method)": [[587, "sklearn.gaussian_process.kernels.RBF.__call__"]], "bounds (sklearn.gaussian_process.kernels.rbf property)": [[587, "sklearn.gaussian_process.kernels.RBF.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.rbf method)": [[587, "sklearn.gaussian_process.kernels.RBF.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.rbf method)": [[587, "sklearn.gaussian_process.kernels.RBF.diag"]], "get_params() (sklearn.gaussian_process.kernels.rbf method)": [[587, "sklearn.gaussian_process.kernels.RBF.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.rbf property)": [[587, "sklearn.gaussian_process.kernels.RBF.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.rbf method)": [[587, "sklearn.gaussian_process.kernels.RBF.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.rbf property)": [[587, "sklearn.gaussian_process.kernels.RBF.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.rbf property)": [[587, "sklearn.gaussian_process.kernels.RBF.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.rbf method)": [[587, "sklearn.gaussian_process.kernels.RBF.set_params"]], "theta (sklearn.gaussian_process.kernels.rbf property)": [[587, "sklearn.gaussian_process.kernels.RBF.theta"]], "rationalquadratic (class in sklearn.gaussian_process.kernels)": [[588, "sklearn.gaussian_process.kernels.RationalQuadratic"]], "__call__() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[588, "sklearn.gaussian_process.kernels.RationalQuadratic.__call__"]], "bounds (sklearn.gaussian_process.kernels.rationalquadratic property)": [[588, "sklearn.gaussian_process.kernels.RationalQuadratic.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[588, "sklearn.gaussian_process.kernels.RationalQuadratic.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[588, "sklearn.gaussian_process.kernels.RationalQuadratic.diag"]], "get_params() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[588, "sklearn.gaussian_process.kernels.RationalQuadratic.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.rationalquadratic property)": [[588, "sklearn.gaussian_process.kernels.RationalQuadratic.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[588, "sklearn.gaussian_process.kernels.RationalQuadratic.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.rationalquadratic property)": [[588, "sklearn.gaussian_process.kernels.RationalQuadratic.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.rationalquadratic property)": [[588, "sklearn.gaussian_process.kernels.RationalQuadratic.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[588, "sklearn.gaussian_process.kernels.RationalQuadratic.set_params"]], "theta (sklearn.gaussian_process.kernels.rationalquadratic property)": [[588, "sklearn.gaussian_process.kernels.RationalQuadratic.theta"]], "sum (class in sklearn.gaussian_process.kernels)": [[589, "sklearn.gaussian_process.kernels.Sum"]], "__call__() (sklearn.gaussian_process.kernels.sum method)": [[589, "sklearn.gaussian_process.kernels.Sum.__call__"]], "bounds (sklearn.gaussian_process.kernels.sum property)": [[589, "sklearn.gaussian_process.kernels.Sum.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.sum method)": [[589, "sklearn.gaussian_process.kernels.Sum.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.sum method)": [[589, "sklearn.gaussian_process.kernels.Sum.diag"]], "get_params() (sklearn.gaussian_process.kernels.sum method)": [[589, "sklearn.gaussian_process.kernels.Sum.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.sum property)": [[589, "sklearn.gaussian_process.kernels.Sum.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.sum method)": [[589, "sklearn.gaussian_process.kernels.Sum.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.sum property)": [[589, "sklearn.gaussian_process.kernels.Sum.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.sum property)": [[589, "sklearn.gaussian_process.kernels.Sum.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.sum method)": [[589, "sklearn.gaussian_process.kernels.Sum.set_params"]], "theta (sklearn.gaussian_process.kernels.sum property)": [[589, "sklearn.gaussian_process.kernels.Sum.theta"]], "whitekernel (class in sklearn.gaussian_process.kernels)": [[590, "sklearn.gaussian_process.kernels.WhiteKernel"]], "__call__() (sklearn.gaussian_process.kernels.whitekernel method)": [[590, "sklearn.gaussian_process.kernels.WhiteKernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.whitekernel property)": [[590, "sklearn.gaussian_process.kernels.WhiteKernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.whitekernel method)": [[590, "sklearn.gaussian_process.kernels.WhiteKernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.whitekernel method)": [[590, "sklearn.gaussian_process.kernels.WhiteKernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.whitekernel method)": [[590, "sklearn.gaussian_process.kernels.WhiteKernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.whitekernel property)": [[590, "sklearn.gaussian_process.kernels.WhiteKernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.whitekernel method)": [[590, "sklearn.gaussian_process.kernels.WhiteKernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.whitekernel property)": [[590, "sklearn.gaussian_process.kernels.WhiteKernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.whitekernel property)": [[590, "sklearn.gaussian_process.kernels.WhiteKernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.whitekernel method)": [[590, "sklearn.gaussian_process.kernels.WhiteKernel.set_params"]], "theta (sklearn.gaussian_process.kernels.whitekernel property)": [[590, "sklearn.gaussian_process.kernels.WhiteKernel.theta"]], "get_config() (in module sklearn)": [[591, "sklearn.get_config"]], "iterativeimputer (class in sklearn.impute)": [[592, "sklearn.impute.IterativeImputer"]], "fit() (sklearn.impute.iterativeimputer method)": [[592, "sklearn.impute.IterativeImputer.fit"]], "fit_transform() (sklearn.impute.iterativeimputer method)": [[592, "sklearn.impute.IterativeImputer.fit_transform"]], "get_feature_names_out() (sklearn.impute.iterativeimputer method)": [[592, "sklearn.impute.IterativeImputer.get_feature_names_out"]], "get_metadata_routing() (sklearn.impute.iterativeimputer method)": [[592, "sklearn.impute.IterativeImputer.get_metadata_routing"]], "get_params() (sklearn.impute.iterativeimputer method)": [[592, "sklearn.impute.IterativeImputer.get_params"]], "set_output() (sklearn.impute.iterativeimputer method)": [[592, "sklearn.impute.IterativeImputer.set_output"]], "set_params() (sklearn.impute.iterativeimputer method)": [[592, "sklearn.impute.IterativeImputer.set_params"]], "transform() (sklearn.impute.iterativeimputer method)": [[592, "sklearn.impute.IterativeImputer.transform"]], "knnimputer (class in sklearn.impute)": [[593, "sklearn.impute.KNNImputer"]], "fit() (sklearn.impute.knnimputer method)": [[593, "sklearn.impute.KNNImputer.fit"]], "fit_transform() (sklearn.impute.knnimputer method)": [[593, "sklearn.impute.KNNImputer.fit_transform"]], "get_feature_names_out() (sklearn.impute.knnimputer method)": [[593, "sklearn.impute.KNNImputer.get_feature_names_out"]], "get_metadata_routing() (sklearn.impute.knnimputer method)": [[593, "sklearn.impute.KNNImputer.get_metadata_routing"]], "get_params() (sklearn.impute.knnimputer method)": [[593, "sklearn.impute.KNNImputer.get_params"]], "set_output() (sklearn.impute.knnimputer method)": [[593, "sklearn.impute.KNNImputer.set_output"]], "set_params() (sklearn.impute.knnimputer method)": [[593, "sklearn.impute.KNNImputer.set_params"]], "transform() (sklearn.impute.knnimputer method)": [[593, "sklearn.impute.KNNImputer.transform"]], "missingindicator (class in sklearn.impute)": [[594, "sklearn.impute.MissingIndicator"]], "fit() (sklearn.impute.missingindicator method)": [[594, "sklearn.impute.MissingIndicator.fit"]], "fit_transform() (sklearn.impute.missingindicator method)": [[594, "sklearn.impute.MissingIndicator.fit_transform"]], "get_feature_names_out() (sklearn.impute.missingindicator method)": [[594, "sklearn.impute.MissingIndicator.get_feature_names_out"]], "get_metadata_routing() (sklearn.impute.missingindicator method)": [[594, "sklearn.impute.MissingIndicator.get_metadata_routing"]], "get_params() (sklearn.impute.missingindicator method)": [[594, "sklearn.impute.MissingIndicator.get_params"]], "set_output() (sklearn.impute.missingindicator method)": [[594, "sklearn.impute.MissingIndicator.set_output"]], "set_params() (sklearn.impute.missingindicator method)": [[594, "sklearn.impute.MissingIndicator.set_params"]], "transform() (sklearn.impute.missingindicator method)": [[594, "sklearn.impute.MissingIndicator.transform"]], "simpleimputer (class in sklearn.impute)": [[595, "sklearn.impute.SimpleImputer"]], "fit() (sklearn.impute.simpleimputer method)": [[595, "sklearn.impute.SimpleImputer.fit"]], "fit_transform() (sklearn.impute.simpleimputer method)": [[595, "sklearn.impute.SimpleImputer.fit_transform"]], "get_feature_names_out() (sklearn.impute.simpleimputer method)": [[595, "sklearn.impute.SimpleImputer.get_feature_names_out"]], "get_metadata_routing() (sklearn.impute.simpleimputer method)": [[595, "sklearn.impute.SimpleImputer.get_metadata_routing"]], "get_params() (sklearn.impute.simpleimputer method)": [[595, "sklearn.impute.SimpleImputer.get_params"]], "inverse_transform() (sklearn.impute.simpleimputer method)": [[595, "sklearn.impute.SimpleImputer.inverse_transform"]], "set_output() (sklearn.impute.simpleimputer method)": [[595, "sklearn.impute.SimpleImputer.set_output"]], "set_params() (sklearn.impute.simpleimputer method)": [[595, "sklearn.impute.SimpleImputer.set_params"]], "transform() (sklearn.impute.simpleimputer method)": [[595, "sklearn.impute.SimpleImputer.transform"]], "decisionboundarydisplay (class in sklearn.inspection)": [[596, "sklearn.inspection.DecisionBoundaryDisplay"]], "from_estimator() (sklearn.inspection.decisionboundarydisplay class method)": [[596, "sklearn.inspection.DecisionBoundaryDisplay.from_estimator"]], "plot() (sklearn.inspection.decisionboundarydisplay method)": [[596, "sklearn.inspection.DecisionBoundaryDisplay.plot"]], "partialdependencedisplay (class in sklearn.inspection)": [[597, "sklearn.inspection.PartialDependenceDisplay"]], "from_estimator() (sklearn.inspection.partialdependencedisplay class method)": [[597, "sklearn.inspection.PartialDependenceDisplay.from_estimator"]], "plot() (sklearn.inspection.partialdependencedisplay method)": [[597, "sklearn.inspection.PartialDependenceDisplay.plot"]], "partial_dependence() (in module sklearn.inspection)": [[598, "sklearn.inspection.partial_dependence"]], "permutation_importance() (in module sklearn.inspection)": [[599, "sklearn.inspection.permutation_importance"]], "isotonicregression (class in sklearn.isotonic)": [[600, "sklearn.isotonic.IsotonicRegression"]], "fit() (sklearn.isotonic.isotonicregression method)": [[600, "sklearn.isotonic.IsotonicRegression.fit"]], "fit_transform() (sklearn.isotonic.isotonicregression method)": [[600, "sklearn.isotonic.IsotonicRegression.fit_transform"]], "get_feature_names_out() (sklearn.isotonic.isotonicregression method)": [[600, "sklearn.isotonic.IsotonicRegression.get_feature_names_out"]], "get_metadata_routing() (sklearn.isotonic.isotonicregression method)": [[600, "sklearn.isotonic.IsotonicRegression.get_metadata_routing"]], "get_params() (sklearn.isotonic.isotonicregression method)": [[600, "sklearn.isotonic.IsotonicRegression.get_params"]], "predict() (sklearn.isotonic.isotonicregression method)": [[600, "sklearn.isotonic.IsotonicRegression.predict"]], "score() (sklearn.isotonic.isotonicregression method)": [[600, "sklearn.isotonic.IsotonicRegression.score"]], "set_fit_request() (sklearn.isotonic.isotonicregression method)": [[600, "sklearn.isotonic.IsotonicRegression.set_fit_request"]], "set_output() (sklearn.isotonic.isotonicregression method)": [[600, "sklearn.isotonic.IsotonicRegression.set_output"]], "set_params() (sklearn.isotonic.isotonicregression method)": [[600, "sklearn.isotonic.IsotonicRegression.set_params"]], "set_predict_request() (sklearn.isotonic.isotonicregression method)": [[600, "sklearn.isotonic.IsotonicRegression.set_predict_request"]], "set_score_request() (sklearn.isotonic.isotonicregression method)": [[600, "sklearn.isotonic.IsotonicRegression.set_score_request"]], "set_transform_request() (sklearn.isotonic.isotonicregression method)": [[600, "sklearn.isotonic.IsotonicRegression.set_transform_request"]], "transform() (sklearn.isotonic.isotonicregression method)": [[600, "sklearn.isotonic.IsotonicRegression.transform"]], "check_increasing() (in module sklearn.isotonic)": [[601, "sklearn.isotonic.check_increasing"]], "isotonic_regression() (in module sklearn.isotonic)": [[602, "sklearn.isotonic.isotonic_regression"]], "additivechi2sampler (class in sklearn.kernel_approximation)": [[603, "sklearn.kernel_approximation.AdditiveChi2Sampler"]], "fit() (sklearn.kernel_approximation.additivechi2sampler method)": [[603, "sklearn.kernel_approximation.AdditiveChi2Sampler.fit"]], "fit_transform() (sklearn.kernel_approximation.additivechi2sampler method)": [[603, "sklearn.kernel_approximation.AdditiveChi2Sampler.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.additivechi2sampler method)": [[603, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_feature_names_out"]], "get_metadata_routing() (sklearn.kernel_approximation.additivechi2sampler method)": [[603, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_metadata_routing"]], "get_params() (sklearn.kernel_approximation.additivechi2sampler method)": [[603, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_params"]], "set_output() (sklearn.kernel_approximation.additivechi2sampler method)": [[603, "sklearn.kernel_approximation.AdditiveChi2Sampler.set_output"]], "set_params() (sklearn.kernel_approximation.additivechi2sampler method)": [[603, "sklearn.kernel_approximation.AdditiveChi2Sampler.set_params"]], "transform() (sklearn.kernel_approximation.additivechi2sampler method)": [[603, "sklearn.kernel_approximation.AdditiveChi2Sampler.transform"]], "nystroem (class in sklearn.kernel_approximation)": [[604, "sklearn.kernel_approximation.Nystroem"]], "fit() (sklearn.kernel_approximation.nystroem method)": [[604, "sklearn.kernel_approximation.Nystroem.fit"]], "fit_transform() (sklearn.kernel_approximation.nystroem method)": [[604, "sklearn.kernel_approximation.Nystroem.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.nystroem method)": [[604, "sklearn.kernel_approximation.Nystroem.get_feature_names_out"]], "get_metadata_routing() (sklearn.kernel_approximation.nystroem method)": [[604, "sklearn.kernel_approximation.Nystroem.get_metadata_routing"]], "get_params() (sklearn.kernel_approximation.nystroem method)": [[604, "sklearn.kernel_approximation.Nystroem.get_params"]], "set_output() (sklearn.kernel_approximation.nystroem method)": [[604, "sklearn.kernel_approximation.Nystroem.set_output"]], "set_params() (sklearn.kernel_approximation.nystroem method)": [[604, "sklearn.kernel_approximation.Nystroem.set_params"]], "transform() (sklearn.kernel_approximation.nystroem method)": [[604, "sklearn.kernel_approximation.Nystroem.transform"]], "polynomialcountsketch (class in sklearn.kernel_approximation)": [[605, "sklearn.kernel_approximation.PolynomialCountSketch"]], "fit() (sklearn.kernel_approximation.polynomialcountsketch method)": [[605, "sklearn.kernel_approximation.PolynomialCountSketch.fit"]], "fit_transform() (sklearn.kernel_approximation.polynomialcountsketch method)": [[605, "sklearn.kernel_approximation.PolynomialCountSketch.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.polynomialcountsketch method)": [[605, "sklearn.kernel_approximation.PolynomialCountSketch.get_feature_names_out"]], "get_metadata_routing() (sklearn.kernel_approximation.polynomialcountsketch method)": [[605, "sklearn.kernel_approximation.PolynomialCountSketch.get_metadata_routing"]], "get_params() (sklearn.kernel_approximation.polynomialcountsketch method)": [[605, "sklearn.kernel_approximation.PolynomialCountSketch.get_params"]], "set_output() (sklearn.kernel_approximation.polynomialcountsketch method)": [[605, "sklearn.kernel_approximation.PolynomialCountSketch.set_output"]], "set_params() (sklearn.kernel_approximation.polynomialcountsketch method)": [[605, "sklearn.kernel_approximation.PolynomialCountSketch.set_params"]], "transform() (sklearn.kernel_approximation.polynomialcountsketch method)": [[605, "sklearn.kernel_approximation.PolynomialCountSketch.transform"]], "rbfsampler (class in sklearn.kernel_approximation)": [[606, "sklearn.kernel_approximation.RBFSampler"]], "fit() (sklearn.kernel_approximation.rbfsampler method)": [[606, "sklearn.kernel_approximation.RBFSampler.fit"]], "fit_transform() (sklearn.kernel_approximation.rbfsampler method)": [[606, "sklearn.kernel_approximation.RBFSampler.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.rbfsampler method)": [[606, "sklearn.kernel_approximation.RBFSampler.get_feature_names_out"]], "get_metadata_routing() (sklearn.kernel_approximation.rbfsampler method)": [[606, "sklearn.kernel_approximation.RBFSampler.get_metadata_routing"]], "get_params() (sklearn.kernel_approximation.rbfsampler method)": [[606, "sklearn.kernel_approximation.RBFSampler.get_params"]], "set_output() (sklearn.kernel_approximation.rbfsampler method)": [[606, "sklearn.kernel_approximation.RBFSampler.set_output"]], "set_params() (sklearn.kernel_approximation.rbfsampler method)": [[606, "sklearn.kernel_approximation.RBFSampler.set_params"]], "transform() (sklearn.kernel_approximation.rbfsampler method)": [[606, "sklearn.kernel_approximation.RBFSampler.transform"]], "skewedchi2sampler (class in sklearn.kernel_approximation)": [[607, "sklearn.kernel_approximation.SkewedChi2Sampler"]], "fit() (sklearn.kernel_approximation.skewedchi2sampler method)": [[607, "sklearn.kernel_approximation.SkewedChi2Sampler.fit"]], "fit_transform() (sklearn.kernel_approximation.skewedchi2sampler method)": [[607, "sklearn.kernel_approximation.SkewedChi2Sampler.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.skewedchi2sampler method)": [[607, "sklearn.kernel_approximation.SkewedChi2Sampler.get_feature_names_out"]], "get_metadata_routing() (sklearn.kernel_approximation.skewedchi2sampler method)": [[607, "sklearn.kernel_approximation.SkewedChi2Sampler.get_metadata_routing"]], "get_params() (sklearn.kernel_approximation.skewedchi2sampler method)": [[607, "sklearn.kernel_approximation.SkewedChi2Sampler.get_params"]], "set_output() (sklearn.kernel_approximation.skewedchi2sampler method)": [[607, "sklearn.kernel_approximation.SkewedChi2Sampler.set_output"]], "set_params() (sklearn.kernel_approximation.skewedchi2sampler method)": [[607, "sklearn.kernel_approximation.SkewedChi2Sampler.set_params"]], "transform() (sklearn.kernel_approximation.skewedchi2sampler method)": [[607, "sklearn.kernel_approximation.SkewedChi2Sampler.transform"]], "kernelridge (class in sklearn.kernel_ridge)": [[608, "sklearn.kernel_ridge.KernelRidge"]], "fit() (sklearn.kernel_ridge.kernelridge method)": [[608, "sklearn.kernel_ridge.KernelRidge.fit"]], "get_metadata_routing() (sklearn.kernel_ridge.kernelridge method)": [[608, "sklearn.kernel_ridge.KernelRidge.get_metadata_routing"]], "get_params() (sklearn.kernel_ridge.kernelridge method)": [[608, "sklearn.kernel_ridge.KernelRidge.get_params"]], "predict() (sklearn.kernel_ridge.kernelridge method)": [[608, "sklearn.kernel_ridge.KernelRidge.predict"]], "score() (sklearn.kernel_ridge.kernelridge method)": [[608, "sklearn.kernel_ridge.KernelRidge.score"]], "set_fit_request() (sklearn.kernel_ridge.kernelridge method)": [[608, "sklearn.kernel_ridge.KernelRidge.set_fit_request"]], "set_params() (sklearn.kernel_ridge.kernelridge method)": [[608, "sklearn.kernel_ridge.KernelRidge.set_params"]], "set_score_request() (sklearn.kernel_ridge.kernelridge method)": [[608, "sklearn.kernel_ridge.KernelRidge.set_score_request"]], "ardregression (class in sklearn.linear_model)": [[609, "sklearn.linear_model.ARDRegression"]], "fit() (sklearn.linear_model.ardregression method)": [[609, "sklearn.linear_model.ARDRegression.fit"]], "get_metadata_routing() (sklearn.linear_model.ardregression method)": [[609, "sklearn.linear_model.ARDRegression.get_metadata_routing"]], "get_params() (sklearn.linear_model.ardregression method)": [[609, "sklearn.linear_model.ARDRegression.get_params"]], "predict() (sklearn.linear_model.ardregression method)": [[609, "sklearn.linear_model.ARDRegression.predict"]], "score() (sklearn.linear_model.ardregression method)": [[609, "sklearn.linear_model.ARDRegression.score"]], "set_params() (sklearn.linear_model.ardregression method)": [[609, "sklearn.linear_model.ARDRegression.set_params"]], "set_predict_request() (sklearn.linear_model.ardregression method)": [[609, "sklearn.linear_model.ARDRegression.set_predict_request"]], "set_score_request() (sklearn.linear_model.ardregression method)": [[609, "sklearn.linear_model.ARDRegression.set_score_request"]], "bayesianridge (class in sklearn.linear_model)": [[610, "sklearn.linear_model.BayesianRidge"]], "fit() (sklearn.linear_model.bayesianridge method)": [[610, "sklearn.linear_model.BayesianRidge.fit"]], "get_metadata_routing() (sklearn.linear_model.bayesianridge method)": [[610, "sklearn.linear_model.BayesianRidge.get_metadata_routing"]], "get_params() (sklearn.linear_model.bayesianridge method)": [[610, "sklearn.linear_model.BayesianRidge.get_params"]], "predict() (sklearn.linear_model.bayesianridge method)": [[610, "sklearn.linear_model.BayesianRidge.predict"]], "score() (sklearn.linear_model.bayesianridge method)": [[610, "sklearn.linear_model.BayesianRidge.score"]], "set_fit_request() (sklearn.linear_model.bayesianridge method)": [[610, "sklearn.linear_model.BayesianRidge.set_fit_request"]], "set_params() (sklearn.linear_model.bayesianridge method)": [[610, "sklearn.linear_model.BayesianRidge.set_params"]], "set_predict_request() (sklearn.linear_model.bayesianridge method)": [[610, "sklearn.linear_model.BayesianRidge.set_predict_request"]], "set_score_request() (sklearn.linear_model.bayesianridge method)": [[610, "sklearn.linear_model.BayesianRidge.set_score_request"]], "elasticnet (class in sklearn.linear_model)": [[611, "sklearn.linear_model.ElasticNet"]], "fit() (sklearn.linear_model.elasticnet method)": [[611, "sklearn.linear_model.ElasticNet.fit"]], "get_metadata_routing() (sklearn.linear_model.elasticnet method)": [[611, "sklearn.linear_model.ElasticNet.get_metadata_routing"]], "get_params() (sklearn.linear_model.elasticnet method)": [[611, "sklearn.linear_model.ElasticNet.get_params"]], "path() (sklearn.linear_model.elasticnet static method)": [[611, "sklearn.linear_model.ElasticNet.path"]], "predict() (sklearn.linear_model.elasticnet method)": [[611, "sklearn.linear_model.ElasticNet.predict"]], "score() (sklearn.linear_model.elasticnet method)": [[611, "sklearn.linear_model.ElasticNet.score"]], "set_fit_request() (sklearn.linear_model.elasticnet method)": [[611, "sklearn.linear_model.ElasticNet.set_fit_request"]], "set_params() (sklearn.linear_model.elasticnet method)": [[611, "sklearn.linear_model.ElasticNet.set_params"]], "set_score_request() (sklearn.linear_model.elasticnet method)": [[611, "sklearn.linear_model.ElasticNet.set_score_request"]], "sparse_coef_ (sklearn.linear_model.elasticnet property)": [[611, "sklearn.linear_model.ElasticNet.sparse_coef_"]], "elasticnetcv (class in sklearn.linear_model)": [[612, "sklearn.linear_model.ElasticNetCV"]], "fit() (sklearn.linear_model.elasticnetcv method)": [[612, "sklearn.linear_model.ElasticNetCV.fit"]], "get_metadata_routing() (sklearn.linear_model.elasticnetcv method)": [[612, "sklearn.linear_model.ElasticNetCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.elasticnetcv method)": [[612, "sklearn.linear_model.ElasticNetCV.get_params"]], "path() (sklearn.linear_model.elasticnetcv static method)": [[612, "sklearn.linear_model.ElasticNetCV.path"]], "predict() (sklearn.linear_model.elasticnetcv method)": [[612, "sklearn.linear_model.ElasticNetCV.predict"]], "score() (sklearn.linear_model.elasticnetcv method)": [[612, "sklearn.linear_model.ElasticNetCV.score"]], "set_fit_request() (sklearn.linear_model.elasticnetcv method)": [[612, "sklearn.linear_model.ElasticNetCV.set_fit_request"]], "set_params() (sklearn.linear_model.elasticnetcv method)": [[612, "sklearn.linear_model.ElasticNetCV.set_params"]], "set_score_request() (sklearn.linear_model.elasticnetcv method)": [[612, "sklearn.linear_model.ElasticNetCV.set_score_request"]], "gammaregressor (class in sklearn.linear_model)": [[613, "sklearn.linear_model.GammaRegressor"]], "fit() (sklearn.linear_model.gammaregressor method)": [[613, "sklearn.linear_model.GammaRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.gammaregressor method)": [[613, "sklearn.linear_model.GammaRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.gammaregressor method)": [[613, "sklearn.linear_model.GammaRegressor.get_params"]], "predict() (sklearn.linear_model.gammaregressor method)": [[613, "sklearn.linear_model.GammaRegressor.predict"]], "score() (sklearn.linear_model.gammaregressor method)": [[613, "sklearn.linear_model.GammaRegressor.score"]], "set_fit_request() (sklearn.linear_model.gammaregressor method)": [[613, "sklearn.linear_model.GammaRegressor.set_fit_request"]], "set_params() (sklearn.linear_model.gammaregressor method)": [[613, "sklearn.linear_model.GammaRegressor.set_params"]], "set_score_request() (sklearn.linear_model.gammaregressor method)": [[613, "sklearn.linear_model.GammaRegressor.set_score_request"]], "huberregressor (class in sklearn.linear_model)": [[614, "sklearn.linear_model.HuberRegressor"]], "fit() (sklearn.linear_model.huberregressor method)": [[614, "sklearn.linear_model.HuberRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.huberregressor method)": [[614, "sklearn.linear_model.HuberRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.huberregressor method)": [[614, "sklearn.linear_model.HuberRegressor.get_params"]], "predict() (sklearn.linear_model.huberregressor method)": [[614, "sklearn.linear_model.HuberRegressor.predict"]], "score() (sklearn.linear_model.huberregressor method)": [[614, "sklearn.linear_model.HuberRegressor.score"]], "set_fit_request() (sklearn.linear_model.huberregressor method)": [[614, "sklearn.linear_model.HuberRegressor.set_fit_request"]], "set_params() (sklearn.linear_model.huberregressor method)": [[614, "sklearn.linear_model.HuberRegressor.set_params"]], "set_score_request() (sklearn.linear_model.huberregressor method)": [[614, "sklearn.linear_model.HuberRegressor.set_score_request"]], "lars (class in sklearn.linear_model)": [[615, "sklearn.linear_model.Lars"]], "fit() (sklearn.linear_model.lars method)": [[615, "sklearn.linear_model.Lars.fit"]], "get_metadata_routing() (sklearn.linear_model.lars method)": [[615, "sklearn.linear_model.Lars.get_metadata_routing"]], "get_params() (sklearn.linear_model.lars method)": [[615, "sklearn.linear_model.Lars.get_params"]], "predict() (sklearn.linear_model.lars method)": [[615, "sklearn.linear_model.Lars.predict"]], "score() (sklearn.linear_model.lars method)": [[615, "sklearn.linear_model.Lars.score"]], "set_fit_request() (sklearn.linear_model.lars method)": [[615, "sklearn.linear_model.Lars.set_fit_request"]], "set_params() (sklearn.linear_model.lars method)": [[615, "sklearn.linear_model.Lars.set_params"]], "set_score_request() (sklearn.linear_model.lars method)": [[615, "sklearn.linear_model.Lars.set_score_request"]], "larscv (class in sklearn.linear_model)": [[616, "sklearn.linear_model.LarsCV"]], "fit() (sklearn.linear_model.larscv method)": [[616, "sklearn.linear_model.LarsCV.fit"]], "get_metadata_routing() (sklearn.linear_model.larscv method)": [[616, "sklearn.linear_model.LarsCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.larscv method)": [[616, "sklearn.linear_model.LarsCV.get_params"]], "predict() (sklearn.linear_model.larscv method)": [[616, "sklearn.linear_model.LarsCV.predict"]], "score() (sklearn.linear_model.larscv method)": [[616, "sklearn.linear_model.LarsCV.score"]], "set_fit_request() (sklearn.linear_model.larscv method)": [[616, "sklearn.linear_model.LarsCV.set_fit_request"]], "set_params() (sklearn.linear_model.larscv method)": [[616, "sklearn.linear_model.LarsCV.set_params"]], "set_score_request() (sklearn.linear_model.larscv method)": [[616, "sklearn.linear_model.LarsCV.set_score_request"]], "lasso (class in sklearn.linear_model)": [[617, "sklearn.linear_model.Lasso"]], "fit() (sklearn.linear_model.lasso method)": [[617, "sklearn.linear_model.Lasso.fit"]], "get_metadata_routing() (sklearn.linear_model.lasso method)": [[617, "sklearn.linear_model.Lasso.get_metadata_routing"]], "get_params() (sklearn.linear_model.lasso method)": [[617, "sklearn.linear_model.Lasso.get_params"]], "path() (sklearn.linear_model.lasso static method)": [[617, "sklearn.linear_model.Lasso.path"]], "predict() (sklearn.linear_model.lasso method)": [[617, "sklearn.linear_model.Lasso.predict"]], "score() (sklearn.linear_model.lasso method)": [[617, "sklearn.linear_model.Lasso.score"]], "set_fit_request() (sklearn.linear_model.lasso method)": [[617, "sklearn.linear_model.Lasso.set_fit_request"]], "set_params() (sklearn.linear_model.lasso method)": [[617, "sklearn.linear_model.Lasso.set_params"]], "set_score_request() (sklearn.linear_model.lasso method)": [[617, "sklearn.linear_model.Lasso.set_score_request"]], "sparse_coef_ (sklearn.linear_model.lasso property)": [[617, "sklearn.linear_model.Lasso.sparse_coef_"]], "lassocv (class in sklearn.linear_model)": [[618, "sklearn.linear_model.LassoCV"]], "fit() (sklearn.linear_model.lassocv method)": [[618, "sklearn.linear_model.LassoCV.fit"]], "get_metadata_routing() (sklearn.linear_model.lassocv method)": [[618, "sklearn.linear_model.LassoCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.lassocv method)": [[618, "sklearn.linear_model.LassoCV.get_params"]], "path() (sklearn.linear_model.lassocv static method)": [[618, "sklearn.linear_model.LassoCV.path"]], "predict() (sklearn.linear_model.lassocv method)": [[618, "sklearn.linear_model.LassoCV.predict"]], "score() (sklearn.linear_model.lassocv method)": [[618, "sklearn.linear_model.LassoCV.score"]], "set_fit_request() (sklearn.linear_model.lassocv method)": [[618, "sklearn.linear_model.LassoCV.set_fit_request"]], "set_params() (sklearn.linear_model.lassocv method)": [[618, "sklearn.linear_model.LassoCV.set_params"]], "set_score_request() (sklearn.linear_model.lassocv method)": [[618, "sklearn.linear_model.LassoCV.set_score_request"]], "lassolars (class in sklearn.linear_model)": [[619, "sklearn.linear_model.LassoLars"]], "fit() (sklearn.linear_model.lassolars method)": [[619, "sklearn.linear_model.LassoLars.fit"]], "get_metadata_routing() (sklearn.linear_model.lassolars method)": [[619, "sklearn.linear_model.LassoLars.get_metadata_routing"]], "get_params() (sklearn.linear_model.lassolars method)": [[619, "sklearn.linear_model.LassoLars.get_params"]], "predict() (sklearn.linear_model.lassolars method)": [[619, "sklearn.linear_model.LassoLars.predict"]], "score() (sklearn.linear_model.lassolars method)": [[619, "sklearn.linear_model.LassoLars.score"]], "set_fit_request() (sklearn.linear_model.lassolars method)": [[619, "sklearn.linear_model.LassoLars.set_fit_request"]], "set_params() (sklearn.linear_model.lassolars method)": [[619, "sklearn.linear_model.LassoLars.set_params"]], "set_score_request() (sklearn.linear_model.lassolars method)": [[619, "sklearn.linear_model.LassoLars.set_score_request"]], "lassolarscv (class in sklearn.linear_model)": [[620, "sklearn.linear_model.LassoLarsCV"]], "fit() (sklearn.linear_model.lassolarscv method)": [[620, "sklearn.linear_model.LassoLarsCV.fit"]], "get_metadata_routing() (sklearn.linear_model.lassolarscv method)": [[620, "sklearn.linear_model.LassoLarsCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.lassolarscv method)": [[620, "sklearn.linear_model.LassoLarsCV.get_params"]], "predict() (sklearn.linear_model.lassolarscv method)": [[620, "sklearn.linear_model.LassoLarsCV.predict"]], "score() (sklearn.linear_model.lassolarscv method)": [[620, "sklearn.linear_model.LassoLarsCV.score"]], "set_fit_request() (sklearn.linear_model.lassolarscv method)": [[620, "sklearn.linear_model.LassoLarsCV.set_fit_request"]], "set_params() (sklearn.linear_model.lassolarscv method)": [[620, "sklearn.linear_model.LassoLarsCV.set_params"]], "set_score_request() (sklearn.linear_model.lassolarscv method)": [[620, "sklearn.linear_model.LassoLarsCV.set_score_request"]], "lassolarsic (class in sklearn.linear_model)": [[621, "sklearn.linear_model.LassoLarsIC"]], "fit() (sklearn.linear_model.lassolarsic method)": [[621, "sklearn.linear_model.LassoLarsIC.fit"]], "get_metadata_routing() (sklearn.linear_model.lassolarsic method)": [[621, "sklearn.linear_model.LassoLarsIC.get_metadata_routing"]], "get_params() (sklearn.linear_model.lassolarsic method)": [[621, "sklearn.linear_model.LassoLarsIC.get_params"]], "predict() (sklearn.linear_model.lassolarsic method)": [[621, "sklearn.linear_model.LassoLarsIC.predict"]], "score() (sklearn.linear_model.lassolarsic method)": [[621, "sklearn.linear_model.LassoLarsIC.score"]], "set_fit_request() (sklearn.linear_model.lassolarsic method)": [[621, "sklearn.linear_model.LassoLarsIC.set_fit_request"]], "set_params() (sklearn.linear_model.lassolarsic method)": [[621, "sklearn.linear_model.LassoLarsIC.set_params"]], "set_score_request() (sklearn.linear_model.lassolarsic method)": [[621, "sklearn.linear_model.LassoLarsIC.set_score_request"]], "linearregression (class in sklearn.linear_model)": [[622, "sklearn.linear_model.LinearRegression"]], "fit() (sklearn.linear_model.linearregression method)": [[622, "sklearn.linear_model.LinearRegression.fit"]], "get_metadata_routing() (sklearn.linear_model.linearregression method)": [[622, "sklearn.linear_model.LinearRegression.get_metadata_routing"]], "get_params() (sklearn.linear_model.linearregression method)": [[622, "sklearn.linear_model.LinearRegression.get_params"]], "predict() (sklearn.linear_model.linearregression method)": [[622, "sklearn.linear_model.LinearRegression.predict"]], "score() (sklearn.linear_model.linearregression method)": [[622, "sklearn.linear_model.LinearRegression.score"]], "set_fit_request() (sklearn.linear_model.linearregression method)": [[622, "sklearn.linear_model.LinearRegression.set_fit_request"]], "set_params() (sklearn.linear_model.linearregression method)": [[622, "sklearn.linear_model.LinearRegression.set_params"]], "set_score_request() (sklearn.linear_model.linearregression method)": [[622, "sklearn.linear_model.LinearRegression.set_score_request"]], "logisticregression (class in sklearn.linear_model)": [[623, "sklearn.linear_model.LogisticRegression"]], "decision_function() (sklearn.linear_model.logisticregression method)": [[623, "sklearn.linear_model.LogisticRegression.decision_function"]], "densify() (sklearn.linear_model.logisticregression method)": [[623, "sklearn.linear_model.LogisticRegression.densify"]], "fit() (sklearn.linear_model.logisticregression method)": [[623, "sklearn.linear_model.LogisticRegression.fit"]], "get_metadata_routing() (sklearn.linear_model.logisticregression method)": [[623, "sklearn.linear_model.LogisticRegression.get_metadata_routing"]], "get_params() (sklearn.linear_model.logisticregression method)": [[623, "sklearn.linear_model.LogisticRegression.get_params"]], "predict() (sklearn.linear_model.logisticregression method)": [[623, "sklearn.linear_model.LogisticRegression.predict"]], "predict_log_proba() (sklearn.linear_model.logisticregression method)": [[623, "sklearn.linear_model.LogisticRegression.predict_log_proba"]], "predict_proba() (sklearn.linear_model.logisticregression method)": [[623, "sklearn.linear_model.LogisticRegression.predict_proba"]], "score() (sklearn.linear_model.logisticregression method)": [[623, "sklearn.linear_model.LogisticRegression.score"]], "set_fit_request() (sklearn.linear_model.logisticregression method)": [[623, "sklearn.linear_model.LogisticRegression.set_fit_request"]], "set_params() (sklearn.linear_model.logisticregression method)": [[623, "sklearn.linear_model.LogisticRegression.set_params"]], "set_score_request() (sklearn.linear_model.logisticregression method)": [[623, "sklearn.linear_model.LogisticRegression.set_score_request"]], "sparsify() (sklearn.linear_model.logisticregression method)": [[623, "sklearn.linear_model.LogisticRegression.sparsify"]], "logisticregressioncv (class in sklearn.linear_model)": [[624, "sklearn.linear_model.LogisticRegressionCV"]], "decision_function() (sklearn.linear_model.logisticregressioncv method)": [[624, "sklearn.linear_model.LogisticRegressionCV.decision_function"]], "densify() (sklearn.linear_model.logisticregressioncv method)": [[624, "sklearn.linear_model.LogisticRegressionCV.densify"]], "fit() (sklearn.linear_model.logisticregressioncv method)": [[624, "sklearn.linear_model.LogisticRegressionCV.fit"]], "get_metadata_routing() (sklearn.linear_model.logisticregressioncv method)": [[624, "sklearn.linear_model.LogisticRegressionCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.logisticregressioncv method)": [[624, "sklearn.linear_model.LogisticRegressionCV.get_params"]], "predict() (sklearn.linear_model.logisticregressioncv method)": [[624, "sklearn.linear_model.LogisticRegressionCV.predict"]], "predict_log_proba() (sklearn.linear_model.logisticregressioncv method)": [[624, "sklearn.linear_model.LogisticRegressionCV.predict_log_proba"]], "predict_proba() (sklearn.linear_model.logisticregressioncv method)": [[624, "sklearn.linear_model.LogisticRegressionCV.predict_proba"]], "score() (sklearn.linear_model.logisticregressioncv method)": [[624, "sklearn.linear_model.LogisticRegressionCV.score"]], "set_fit_request() (sklearn.linear_model.logisticregressioncv method)": [[624, "sklearn.linear_model.LogisticRegressionCV.set_fit_request"]], "set_params() (sklearn.linear_model.logisticregressioncv method)": [[624, "sklearn.linear_model.LogisticRegressionCV.set_params"]], "set_score_request() (sklearn.linear_model.logisticregressioncv method)": [[624, "sklearn.linear_model.LogisticRegressionCV.set_score_request"]], "sparsify() (sklearn.linear_model.logisticregressioncv method)": [[624, "sklearn.linear_model.LogisticRegressionCV.sparsify"]], "multitaskelasticnet (class in sklearn.linear_model)": [[625, "sklearn.linear_model.MultiTaskElasticNet"]], "fit() (sklearn.linear_model.multitaskelasticnet method)": [[625, "sklearn.linear_model.MultiTaskElasticNet.fit"]], "get_metadata_routing() (sklearn.linear_model.multitaskelasticnet method)": [[625, "sklearn.linear_model.MultiTaskElasticNet.get_metadata_routing"]], "get_params() (sklearn.linear_model.multitaskelasticnet method)": [[625, "sklearn.linear_model.MultiTaskElasticNet.get_params"]], "path() (sklearn.linear_model.multitaskelasticnet static method)": [[625, "sklearn.linear_model.MultiTaskElasticNet.path"]], "predict() (sklearn.linear_model.multitaskelasticnet method)": [[625, "sklearn.linear_model.MultiTaskElasticNet.predict"]], "score() (sklearn.linear_model.multitaskelasticnet method)": [[625, "sklearn.linear_model.MultiTaskElasticNet.score"]], "set_fit_request() (sklearn.linear_model.multitaskelasticnet method)": [[625, "sklearn.linear_model.MultiTaskElasticNet.set_fit_request"]], "set_params() (sklearn.linear_model.multitaskelasticnet method)": [[625, "sklearn.linear_model.MultiTaskElasticNet.set_params"]], "set_score_request() (sklearn.linear_model.multitaskelasticnet method)": [[625, "sklearn.linear_model.MultiTaskElasticNet.set_score_request"]], "sparse_coef_ (sklearn.linear_model.multitaskelasticnet property)": [[625, "sklearn.linear_model.MultiTaskElasticNet.sparse_coef_"]], "multitaskelasticnetcv (class in sklearn.linear_model)": [[626, "sklearn.linear_model.MultiTaskElasticNetCV"]], "fit() (sklearn.linear_model.multitaskelasticnetcv method)": [[626, "sklearn.linear_model.MultiTaskElasticNetCV.fit"]], "get_metadata_routing() (sklearn.linear_model.multitaskelasticnetcv method)": [[626, "sklearn.linear_model.MultiTaskElasticNetCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.multitaskelasticnetcv method)": [[626, "sklearn.linear_model.MultiTaskElasticNetCV.get_params"]], "path() (sklearn.linear_model.multitaskelasticnetcv static method)": [[626, "sklearn.linear_model.MultiTaskElasticNetCV.path"]], "predict() (sklearn.linear_model.multitaskelasticnetcv method)": [[626, "sklearn.linear_model.MultiTaskElasticNetCV.predict"]], "score() (sklearn.linear_model.multitaskelasticnetcv method)": [[626, "sklearn.linear_model.MultiTaskElasticNetCV.score"]], "set_fit_request() (sklearn.linear_model.multitaskelasticnetcv method)": [[626, "sklearn.linear_model.MultiTaskElasticNetCV.set_fit_request"]], "set_params() (sklearn.linear_model.multitaskelasticnetcv method)": [[626, "sklearn.linear_model.MultiTaskElasticNetCV.set_params"]], "set_score_request() (sklearn.linear_model.multitaskelasticnetcv method)": [[626, "sklearn.linear_model.MultiTaskElasticNetCV.set_score_request"]], "multitasklasso (class in sklearn.linear_model)": [[627, "sklearn.linear_model.MultiTaskLasso"]], "fit() (sklearn.linear_model.multitasklasso method)": [[627, "sklearn.linear_model.MultiTaskLasso.fit"]], "get_metadata_routing() (sklearn.linear_model.multitasklasso method)": [[627, "sklearn.linear_model.MultiTaskLasso.get_metadata_routing"]], "get_params() (sklearn.linear_model.multitasklasso method)": [[627, "sklearn.linear_model.MultiTaskLasso.get_params"]], "path() (sklearn.linear_model.multitasklasso static method)": [[627, "sklearn.linear_model.MultiTaskLasso.path"]], "predict() (sklearn.linear_model.multitasklasso method)": [[627, "sklearn.linear_model.MultiTaskLasso.predict"]], "score() (sklearn.linear_model.multitasklasso method)": [[627, "sklearn.linear_model.MultiTaskLasso.score"]], "set_fit_request() (sklearn.linear_model.multitasklasso method)": [[627, "sklearn.linear_model.MultiTaskLasso.set_fit_request"]], "set_params() (sklearn.linear_model.multitasklasso method)": [[627, "sklearn.linear_model.MultiTaskLasso.set_params"]], "set_score_request() (sklearn.linear_model.multitasklasso method)": [[627, "sklearn.linear_model.MultiTaskLasso.set_score_request"]], "sparse_coef_ (sklearn.linear_model.multitasklasso property)": [[627, "sklearn.linear_model.MultiTaskLasso.sparse_coef_"]], "multitasklassocv (class in sklearn.linear_model)": [[628, "sklearn.linear_model.MultiTaskLassoCV"]], "fit() (sklearn.linear_model.multitasklassocv method)": [[628, "sklearn.linear_model.MultiTaskLassoCV.fit"]], "get_metadata_routing() (sklearn.linear_model.multitasklassocv method)": [[628, "sklearn.linear_model.MultiTaskLassoCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.multitasklassocv method)": [[628, "sklearn.linear_model.MultiTaskLassoCV.get_params"]], "path() (sklearn.linear_model.multitasklassocv static method)": [[628, "sklearn.linear_model.MultiTaskLassoCV.path"]], "predict() (sklearn.linear_model.multitasklassocv method)": [[628, "sklearn.linear_model.MultiTaskLassoCV.predict"]], "score() (sklearn.linear_model.multitasklassocv method)": [[628, "sklearn.linear_model.MultiTaskLassoCV.score"]], "set_fit_request() (sklearn.linear_model.multitasklassocv method)": [[628, "sklearn.linear_model.MultiTaskLassoCV.set_fit_request"]], "set_params() (sklearn.linear_model.multitasklassocv method)": [[628, "sklearn.linear_model.MultiTaskLassoCV.set_params"]], "set_score_request() (sklearn.linear_model.multitasklassocv method)": [[628, "sklearn.linear_model.MultiTaskLassoCV.set_score_request"]], "orthogonalmatchingpursuit (class in sklearn.linear_model)": [[629, "sklearn.linear_model.OrthogonalMatchingPursuit"]], "fit() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[629, "sklearn.linear_model.OrthogonalMatchingPursuit.fit"]], "get_metadata_routing() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[629, "sklearn.linear_model.OrthogonalMatchingPursuit.get_metadata_routing"]], "get_params() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[629, "sklearn.linear_model.OrthogonalMatchingPursuit.get_params"]], "predict() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[629, "sklearn.linear_model.OrthogonalMatchingPursuit.predict"]], "score() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[629, "sklearn.linear_model.OrthogonalMatchingPursuit.score"]], "set_params() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[629, "sklearn.linear_model.OrthogonalMatchingPursuit.set_params"]], "set_score_request() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[629, "sklearn.linear_model.OrthogonalMatchingPursuit.set_score_request"]], "orthogonalmatchingpursuitcv (class in sklearn.linear_model)": [[630, "sklearn.linear_model.OrthogonalMatchingPursuitCV"]], "fit() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[630, "sklearn.linear_model.OrthogonalMatchingPursuitCV.fit"]], "get_metadata_routing() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[630, "sklearn.linear_model.OrthogonalMatchingPursuitCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[630, "sklearn.linear_model.OrthogonalMatchingPursuitCV.get_params"]], "predict() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[630, "sklearn.linear_model.OrthogonalMatchingPursuitCV.predict"]], "score() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[630, "sklearn.linear_model.OrthogonalMatchingPursuitCV.score"]], "set_params() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[630, "sklearn.linear_model.OrthogonalMatchingPursuitCV.set_params"]], "set_score_request() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[630, "sklearn.linear_model.OrthogonalMatchingPursuitCV.set_score_request"]], "passiveaggressiveclassifier (class in sklearn.linear_model)": [[631, "sklearn.linear_model.PassiveAggressiveClassifier"]], "decision_function() (sklearn.linear_model.passiveaggressiveclassifier method)": [[631, "sklearn.linear_model.PassiveAggressiveClassifier.decision_function"]], "densify() (sklearn.linear_model.passiveaggressiveclassifier method)": [[631, "sklearn.linear_model.PassiveAggressiveClassifier.densify"]], "fit() (sklearn.linear_model.passiveaggressiveclassifier method)": [[631, "sklearn.linear_model.PassiveAggressiveClassifier.fit"]], "get_metadata_routing() (sklearn.linear_model.passiveaggressiveclassifier method)": [[631, "sklearn.linear_model.PassiveAggressiveClassifier.get_metadata_routing"]], "get_params() (sklearn.linear_model.passiveaggressiveclassifier method)": [[631, "sklearn.linear_model.PassiveAggressiveClassifier.get_params"]], "partial_fit() (sklearn.linear_model.passiveaggressiveclassifier method)": [[631, "sklearn.linear_model.PassiveAggressiveClassifier.partial_fit"]], "predict() (sklearn.linear_model.passiveaggressiveclassifier method)": [[631, "sklearn.linear_model.PassiveAggressiveClassifier.predict"]], "score() (sklearn.linear_model.passiveaggressiveclassifier method)": [[631, "sklearn.linear_model.PassiveAggressiveClassifier.score"]], "set_fit_request() (sklearn.linear_model.passiveaggressiveclassifier method)": [[631, "sklearn.linear_model.PassiveAggressiveClassifier.set_fit_request"]], "set_params() (sklearn.linear_model.passiveaggressiveclassifier method)": [[631, "sklearn.linear_model.PassiveAggressiveClassifier.set_params"]], "set_partial_fit_request() (sklearn.linear_model.passiveaggressiveclassifier method)": [[631, "sklearn.linear_model.PassiveAggressiveClassifier.set_partial_fit_request"]], "set_score_request() (sklearn.linear_model.passiveaggressiveclassifier method)": [[631, "sklearn.linear_model.PassiveAggressiveClassifier.set_score_request"]], "sparsify() (sklearn.linear_model.passiveaggressiveclassifier method)": [[631, "sklearn.linear_model.PassiveAggressiveClassifier.sparsify"]], "passiveaggressiveregressor (class in sklearn.linear_model)": [[632, "sklearn.linear_model.PassiveAggressiveRegressor"]], "densify() (sklearn.linear_model.passiveaggressiveregressor method)": [[632, "sklearn.linear_model.PassiveAggressiveRegressor.densify"]], "fit() (sklearn.linear_model.passiveaggressiveregressor method)": [[632, "sklearn.linear_model.PassiveAggressiveRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.passiveaggressiveregressor method)": [[632, "sklearn.linear_model.PassiveAggressiveRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.passiveaggressiveregressor method)": [[632, "sklearn.linear_model.PassiveAggressiveRegressor.get_params"]], "partial_fit() (sklearn.linear_model.passiveaggressiveregressor method)": [[632, "sklearn.linear_model.PassiveAggressiveRegressor.partial_fit"]], "predict() (sklearn.linear_model.passiveaggressiveregressor method)": [[632, "sklearn.linear_model.PassiveAggressiveRegressor.predict"]], "score() (sklearn.linear_model.passiveaggressiveregressor method)": [[632, "sklearn.linear_model.PassiveAggressiveRegressor.score"]], "set_fit_request() (sklearn.linear_model.passiveaggressiveregressor method)": [[632, "sklearn.linear_model.PassiveAggressiveRegressor.set_fit_request"]], "set_params() (sklearn.linear_model.passiveaggressiveregressor method)": [[632, "sklearn.linear_model.PassiveAggressiveRegressor.set_params"]], "set_partial_fit_request() (sklearn.linear_model.passiveaggressiveregressor method)": [[632, "sklearn.linear_model.PassiveAggressiveRegressor.set_partial_fit_request"]], "set_score_request() (sklearn.linear_model.passiveaggressiveregressor method)": [[632, "sklearn.linear_model.PassiveAggressiveRegressor.set_score_request"]], "sparsify() (sklearn.linear_model.passiveaggressiveregressor method)": [[632, "sklearn.linear_model.PassiveAggressiveRegressor.sparsify"]], "perceptron (class in sklearn.linear_model)": [[633, "sklearn.linear_model.Perceptron"]], "decision_function() (sklearn.linear_model.perceptron method)": [[633, "sklearn.linear_model.Perceptron.decision_function"]], "densify() (sklearn.linear_model.perceptron method)": [[633, "sklearn.linear_model.Perceptron.densify"]], "fit() (sklearn.linear_model.perceptron method)": [[633, "sklearn.linear_model.Perceptron.fit"]], "get_metadata_routing() (sklearn.linear_model.perceptron method)": [[633, "sklearn.linear_model.Perceptron.get_metadata_routing"]], "get_params() (sklearn.linear_model.perceptron method)": [[633, "sklearn.linear_model.Perceptron.get_params"]], "partial_fit() (sklearn.linear_model.perceptron method)": [[633, "sklearn.linear_model.Perceptron.partial_fit"]], "predict() (sklearn.linear_model.perceptron method)": [[633, "sklearn.linear_model.Perceptron.predict"]], "score() (sklearn.linear_model.perceptron method)": [[633, "sklearn.linear_model.Perceptron.score"]], "set_fit_request() (sklearn.linear_model.perceptron method)": [[633, "sklearn.linear_model.Perceptron.set_fit_request"]], "set_params() (sklearn.linear_model.perceptron method)": [[633, "sklearn.linear_model.Perceptron.set_params"]], "set_partial_fit_request() (sklearn.linear_model.perceptron method)": [[633, "sklearn.linear_model.Perceptron.set_partial_fit_request"]], "set_score_request() (sklearn.linear_model.perceptron method)": [[633, "sklearn.linear_model.Perceptron.set_score_request"]], "sparsify() (sklearn.linear_model.perceptron method)": [[633, "sklearn.linear_model.Perceptron.sparsify"]], "poissonregressor (class in sklearn.linear_model)": [[634, "sklearn.linear_model.PoissonRegressor"]], "fit() (sklearn.linear_model.poissonregressor method)": [[634, "sklearn.linear_model.PoissonRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.poissonregressor method)": [[634, "sklearn.linear_model.PoissonRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.poissonregressor method)": [[634, "sklearn.linear_model.PoissonRegressor.get_params"]], "predict() (sklearn.linear_model.poissonregressor method)": [[634, "sklearn.linear_model.PoissonRegressor.predict"]], "score() (sklearn.linear_model.poissonregressor method)": [[634, "sklearn.linear_model.PoissonRegressor.score"]], "set_fit_request() (sklearn.linear_model.poissonregressor method)": [[634, "sklearn.linear_model.PoissonRegressor.set_fit_request"]], "set_params() (sklearn.linear_model.poissonregressor method)": [[634, "sklearn.linear_model.PoissonRegressor.set_params"]], "set_score_request() (sklearn.linear_model.poissonregressor method)": [[634, "sklearn.linear_model.PoissonRegressor.set_score_request"]], "quantileregressor (class in sklearn.linear_model)": [[635, "sklearn.linear_model.QuantileRegressor"]], "fit() (sklearn.linear_model.quantileregressor method)": [[635, "sklearn.linear_model.QuantileRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.quantileregressor method)": [[635, "sklearn.linear_model.QuantileRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.quantileregressor method)": [[635, "sklearn.linear_model.QuantileRegressor.get_params"]], "predict() (sklearn.linear_model.quantileregressor method)": [[635, "sklearn.linear_model.QuantileRegressor.predict"]], "score() (sklearn.linear_model.quantileregressor method)": [[635, "sklearn.linear_model.QuantileRegressor.score"]], "set_fit_request() (sklearn.linear_model.quantileregressor method)": [[635, "sklearn.linear_model.QuantileRegressor.set_fit_request"]], "set_params() (sklearn.linear_model.quantileregressor method)": [[635, "sklearn.linear_model.QuantileRegressor.set_params"]], "set_score_request() (sklearn.linear_model.quantileregressor method)": [[635, "sklearn.linear_model.QuantileRegressor.set_score_request"]], "ransacregressor (class in sklearn.linear_model)": [[636, "sklearn.linear_model.RANSACRegressor"]], "fit() (sklearn.linear_model.ransacregressor method)": [[636, "sklearn.linear_model.RANSACRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.ransacregressor method)": [[636, "sklearn.linear_model.RANSACRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.ransacregressor method)": [[636, "sklearn.linear_model.RANSACRegressor.get_params"]], "predict() (sklearn.linear_model.ransacregressor method)": [[636, "sklearn.linear_model.RANSACRegressor.predict"]], "score() (sklearn.linear_model.ransacregressor method)": [[636, "sklearn.linear_model.RANSACRegressor.score"]], "set_fit_request() (sklearn.linear_model.ransacregressor method)": [[636, "sklearn.linear_model.RANSACRegressor.set_fit_request"]], "set_params() (sklearn.linear_model.ransacregressor method)": [[636, "sklearn.linear_model.RANSACRegressor.set_params"]], "ridge (class in sklearn.linear_model)": [[637, "sklearn.linear_model.Ridge"]], "fit() (sklearn.linear_model.ridge method)": [[637, "sklearn.linear_model.Ridge.fit"]], "get_metadata_routing() (sklearn.linear_model.ridge method)": [[637, "sklearn.linear_model.Ridge.get_metadata_routing"]], "get_params() (sklearn.linear_model.ridge method)": [[637, "sklearn.linear_model.Ridge.get_params"]], "predict() (sklearn.linear_model.ridge method)": [[637, "sklearn.linear_model.Ridge.predict"]], "score() (sklearn.linear_model.ridge method)": [[637, "sklearn.linear_model.Ridge.score"]], "set_fit_request() (sklearn.linear_model.ridge method)": [[637, "sklearn.linear_model.Ridge.set_fit_request"]], "set_params() (sklearn.linear_model.ridge method)": [[637, "sklearn.linear_model.Ridge.set_params"]], "set_score_request() (sklearn.linear_model.ridge method)": [[637, "sklearn.linear_model.Ridge.set_score_request"]], "ridgecv (class in sklearn.linear_model)": [[638, "sklearn.linear_model.RidgeCV"]], "fit() (sklearn.linear_model.ridgecv method)": [[638, "sklearn.linear_model.RidgeCV.fit"]], "get_metadata_routing() (sklearn.linear_model.ridgecv method)": [[638, "sklearn.linear_model.RidgeCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.ridgecv method)": [[638, "sklearn.linear_model.RidgeCV.get_params"]], "predict() (sklearn.linear_model.ridgecv method)": [[638, "sklearn.linear_model.RidgeCV.predict"]], "score() (sklearn.linear_model.ridgecv method)": [[638, "sklearn.linear_model.RidgeCV.score"]], "set_fit_request() (sklearn.linear_model.ridgecv method)": [[638, "sklearn.linear_model.RidgeCV.set_fit_request"]], "set_params() (sklearn.linear_model.ridgecv method)": [[638, "sklearn.linear_model.RidgeCV.set_params"]], "set_score_request() (sklearn.linear_model.ridgecv method)": [[638, "sklearn.linear_model.RidgeCV.set_score_request"]], "ridgeclassifier (class in sklearn.linear_model)": [[639, "sklearn.linear_model.RidgeClassifier"]], "classes_ (sklearn.linear_model.ridgeclassifier property)": [[639, "sklearn.linear_model.RidgeClassifier.classes_"]], "decision_function() (sklearn.linear_model.ridgeclassifier method)": [[639, "sklearn.linear_model.RidgeClassifier.decision_function"]], "fit() (sklearn.linear_model.ridgeclassifier method)": [[639, "sklearn.linear_model.RidgeClassifier.fit"]], "get_metadata_routing() (sklearn.linear_model.ridgeclassifier method)": [[639, "sklearn.linear_model.RidgeClassifier.get_metadata_routing"]], "get_params() (sklearn.linear_model.ridgeclassifier method)": [[639, "sklearn.linear_model.RidgeClassifier.get_params"]], "predict() (sklearn.linear_model.ridgeclassifier method)": [[639, "sklearn.linear_model.RidgeClassifier.predict"]], "score() (sklearn.linear_model.ridgeclassifier method)": [[639, "sklearn.linear_model.RidgeClassifier.score"]], "set_fit_request() (sklearn.linear_model.ridgeclassifier method)": [[639, "sklearn.linear_model.RidgeClassifier.set_fit_request"]], "set_params() (sklearn.linear_model.ridgeclassifier method)": [[639, "sklearn.linear_model.RidgeClassifier.set_params"]], "set_score_request() (sklearn.linear_model.ridgeclassifier method)": [[639, "sklearn.linear_model.RidgeClassifier.set_score_request"]], "ridgeclassifiercv (class in sklearn.linear_model)": [[640, "sklearn.linear_model.RidgeClassifierCV"]], "classes_ (sklearn.linear_model.ridgeclassifiercv property)": [[640, "sklearn.linear_model.RidgeClassifierCV.classes_"]], "decision_function() (sklearn.linear_model.ridgeclassifiercv method)": [[640, "sklearn.linear_model.RidgeClassifierCV.decision_function"]], "fit() (sklearn.linear_model.ridgeclassifiercv method)": [[640, "sklearn.linear_model.RidgeClassifierCV.fit"]], "get_metadata_routing() (sklearn.linear_model.ridgeclassifiercv method)": [[640, "sklearn.linear_model.RidgeClassifierCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.ridgeclassifiercv method)": [[640, "sklearn.linear_model.RidgeClassifierCV.get_params"]], "predict() (sklearn.linear_model.ridgeclassifiercv method)": [[640, "sklearn.linear_model.RidgeClassifierCV.predict"]], "score() (sklearn.linear_model.ridgeclassifiercv method)": [[640, "sklearn.linear_model.RidgeClassifierCV.score"]], "set_fit_request() (sklearn.linear_model.ridgeclassifiercv method)": [[640, "sklearn.linear_model.RidgeClassifierCV.set_fit_request"]], "set_params() (sklearn.linear_model.ridgeclassifiercv method)": [[640, "sklearn.linear_model.RidgeClassifierCV.set_params"]], "set_score_request() (sklearn.linear_model.ridgeclassifiercv method)": [[640, "sklearn.linear_model.RidgeClassifierCV.set_score_request"]], "sgdclassifier (class in sklearn.linear_model)": [[641, "sklearn.linear_model.SGDClassifier"]], "decision_function() (sklearn.linear_model.sgdclassifier method)": [[641, "sklearn.linear_model.SGDClassifier.decision_function"]], "densify() (sklearn.linear_model.sgdclassifier method)": [[641, "sklearn.linear_model.SGDClassifier.densify"]], "fit() (sklearn.linear_model.sgdclassifier method)": [[641, "sklearn.linear_model.SGDClassifier.fit"]], "get_metadata_routing() (sklearn.linear_model.sgdclassifier method)": [[641, "sklearn.linear_model.SGDClassifier.get_metadata_routing"]], "get_params() (sklearn.linear_model.sgdclassifier method)": [[641, "sklearn.linear_model.SGDClassifier.get_params"]], "partial_fit() (sklearn.linear_model.sgdclassifier method)": [[641, "sklearn.linear_model.SGDClassifier.partial_fit"]], "predict() (sklearn.linear_model.sgdclassifier method)": [[641, "sklearn.linear_model.SGDClassifier.predict"]], "predict_log_proba() (sklearn.linear_model.sgdclassifier method)": [[641, "sklearn.linear_model.SGDClassifier.predict_log_proba"]], "predict_proba() (sklearn.linear_model.sgdclassifier method)": [[641, "sklearn.linear_model.SGDClassifier.predict_proba"]], "score() (sklearn.linear_model.sgdclassifier method)": [[641, "sklearn.linear_model.SGDClassifier.score"]], "set_fit_request() (sklearn.linear_model.sgdclassifier method)": [[641, "sklearn.linear_model.SGDClassifier.set_fit_request"]], "set_params() (sklearn.linear_model.sgdclassifier method)": [[641, "sklearn.linear_model.SGDClassifier.set_params"]], "set_partial_fit_request() (sklearn.linear_model.sgdclassifier method)": [[641, "sklearn.linear_model.SGDClassifier.set_partial_fit_request"]], "set_score_request() (sklearn.linear_model.sgdclassifier method)": [[641, "sklearn.linear_model.SGDClassifier.set_score_request"]], "sparsify() (sklearn.linear_model.sgdclassifier method)": [[641, "sklearn.linear_model.SGDClassifier.sparsify"]], "sgdoneclasssvm (class in sklearn.linear_model)": [[642, "sklearn.linear_model.SGDOneClassSVM"]], "decision_function() (sklearn.linear_model.sgdoneclasssvm method)": [[642, "sklearn.linear_model.SGDOneClassSVM.decision_function"]], "densify() (sklearn.linear_model.sgdoneclasssvm method)": [[642, "sklearn.linear_model.SGDOneClassSVM.densify"]], "fit() (sklearn.linear_model.sgdoneclasssvm method)": [[642, "sklearn.linear_model.SGDOneClassSVM.fit"]], "fit_predict() (sklearn.linear_model.sgdoneclasssvm method)": [[642, "sklearn.linear_model.SGDOneClassSVM.fit_predict"]], "get_metadata_routing() (sklearn.linear_model.sgdoneclasssvm method)": [[642, "sklearn.linear_model.SGDOneClassSVM.get_metadata_routing"]], "get_params() (sklearn.linear_model.sgdoneclasssvm method)": [[642, "sklearn.linear_model.SGDOneClassSVM.get_params"]], "partial_fit() (sklearn.linear_model.sgdoneclasssvm method)": [[642, "sklearn.linear_model.SGDOneClassSVM.partial_fit"]], "predict() (sklearn.linear_model.sgdoneclasssvm method)": [[642, "sklearn.linear_model.SGDOneClassSVM.predict"]], "score_samples() (sklearn.linear_model.sgdoneclasssvm method)": [[642, "sklearn.linear_model.SGDOneClassSVM.score_samples"]], "set_fit_request() (sklearn.linear_model.sgdoneclasssvm method)": [[642, "sklearn.linear_model.SGDOneClassSVM.set_fit_request"]], "set_params() (sklearn.linear_model.sgdoneclasssvm method)": [[642, "sklearn.linear_model.SGDOneClassSVM.set_params"]], "set_partial_fit_request() (sklearn.linear_model.sgdoneclasssvm method)": [[642, "sklearn.linear_model.SGDOneClassSVM.set_partial_fit_request"]], "sparsify() (sklearn.linear_model.sgdoneclasssvm method)": [[642, "sklearn.linear_model.SGDOneClassSVM.sparsify"]], "sgdregressor (class in sklearn.linear_model)": [[643, "sklearn.linear_model.SGDRegressor"]], "densify() (sklearn.linear_model.sgdregressor method)": [[643, "sklearn.linear_model.SGDRegressor.densify"]], "fit() (sklearn.linear_model.sgdregressor method)": [[643, "sklearn.linear_model.SGDRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.sgdregressor method)": [[643, "sklearn.linear_model.SGDRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.sgdregressor method)": [[643, "sklearn.linear_model.SGDRegressor.get_params"]], "partial_fit() (sklearn.linear_model.sgdregressor method)": [[643, "sklearn.linear_model.SGDRegressor.partial_fit"]], "predict() (sklearn.linear_model.sgdregressor method)": [[643, "sklearn.linear_model.SGDRegressor.predict"]], "score() (sklearn.linear_model.sgdregressor method)": [[643, "sklearn.linear_model.SGDRegressor.score"]], "set_fit_request() (sklearn.linear_model.sgdregressor method)": [[643, "sklearn.linear_model.SGDRegressor.set_fit_request"]], "set_params() (sklearn.linear_model.sgdregressor method)": [[643, "sklearn.linear_model.SGDRegressor.set_params"]], "set_partial_fit_request() (sklearn.linear_model.sgdregressor method)": [[643, "sklearn.linear_model.SGDRegressor.set_partial_fit_request"]], "set_score_request() (sklearn.linear_model.sgdregressor method)": [[643, "sklearn.linear_model.SGDRegressor.set_score_request"]], "sparsify() (sklearn.linear_model.sgdregressor method)": [[643, "sklearn.linear_model.SGDRegressor.sparsify"]], "theilsenregressor (class in sklearn.linear_model)": [[644, "sklearn.linear_model.TheilSenRegressor"]], "fit() (sklearn.linear_model.theilsenregressor method)": [[644, "sklearn.linear_model.TheilSenRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.theilsenregressor method)": [[644, "sklearn.linear_model.TheilSenRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.theilsenregressor method)": [[644, "sklearn.linear_model.TheilSenRegressor.get_params"]], "predict() (sklearn.linear_model.theilsenregressor method)": [[644, "sklearn.linear_model.TheilSenRegressor.predict"]], "score() (sklearn.linear_model.theilsenregressor method)": [[644, "sklearn.linear_model.TheilSenRegressor.score"]], "set_params() (sklearn.linear_model.theilsenregressor method)": [[644, "sklearn.linear_model.TheilSenRegressor.set_params"]], "set_score_request() (sklearn.linear_model.theilsenregressor method)": [[644, "sklearn.linear_model.TheilSenRegressor.set_score_request"]], "tweedieregressor (class in sklearn.linear_model)": [[645, "sklearn.linear_model.TweedieRegressor"]], "fit() (sklearn.linear_model.tweedieregressor method)": [[645, "sklearn.linear_model.TweedieRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.tweedieregressor method)": [[645, "sklearn.linear_model.TweedieRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.tweedieregressor method)": [[645, "sklearn.linear_model.TweedieRegressor.get_params"]], "predict() (sklearn.linear_model.tweedieregressor method)": [[645, "sklearn.linear_model.TweedieRegressor.predict"]], "score() (sklearn.linear_model.tweedieregressor method)": [[645, "sklearn.linear_model.TweedieRegressor.score"]], "set_fit_request() (sklearn.linear_model.tweedieregressor method)": [[645, "sklearn.linear_model.TweedieRegressor.set_fit_request"]], "set_params() (sklearn.linear_model.tweedieregressor method)": [[645, "sklearn.linear_model.TweedieRegressor.set_params"]], "set_score_request() (sklearn.linear_model.tweedieregressor method)": [[645, "sklearn.linear_model.TweedieRegressor.set_score_request"]], "enet_path() (in module sklearn.linear_model)": [[646, "sklearn.linear_model.enet_path"]], "lars_path() (in module sklearn.linear_model)": [[647, "sklearn.linear_model.lars_path"]], "lars_path_gram() (in module sklearn.linear_model)": [[648, "sklearn.linear_model.lars_path_gram"]], "lasso_path() (in module sklearn.linear_model)": [[649, "sklearn.linear_model.lasso_path"]], "orthogonal_mp() (in module sklearn.linear_model)": [[650, "sklearn.linear_model.orthogonal_mp"]], "orthogonal_mp_gram() (in module sklearn.linear_model)": [[651, "sklearn.linear_model.orthogonal_mp_gram"]], "ridge_regression() (in module sklearn.linear_model)": [[652, "sklearn.linear_model.ridge_regression"]], "isomap (class in sklearn.manifold)": [[653, "sklearn.manifold.Isomap"]], "fit() (sklearn.manifold.isomap method)": [[653, "sklearn.manifold.Isomap.fit"]], "fit_transform() (sklearn.manifold.isomap method)": [[653, "sklearn.manifold.Isomap.fit_transform"]], "get_feature_names_out() (sklearn.manifold.isomap method)": [[653, "sklearn.manifold.Isomap.get_feature_names_out"]], "get_metadata_routing() (sklearn.manifold.isomap method)": [[653, "sklearn.manifold.Isomap.get_metadata_routing"]], "get_params() (sklearn.manifold.isomap method)": [[653, "sklearn.manifold.Isomap.get_params"]], "reconstruction_error() (sklearn.manifold.isomap method)": [[653, "sklearn.manifold.Isomap.reconstruction_error"]], "set_output() (sklearn.manifold.isomap method)": [[653, "sklearn.manifold.Isomap.set_output"]], "set_params() (sklearn.manifold.isomap method)": [[653, "sklearn.manifold.Isomap.set_params"]], "transform() (sklearn.manifold.isomap method)": [[653, "sklearn.manifold.Isomap.transform"]], "locallylinearembedding (class in sklearn.manifold)": [[654, "sklearn.manifold.LocallyLinearEmbedding"]], "fit() (sklearn.manifold.locallylinearembedding method)": [[654, "sklearn.manifold.LocallyLinearEmbedding.fit"]], "fit_transform() (sklearn.manifold.locallylinearembedding method)": [[654, "sklearn.manifold.LocallyLinearEmbedding.fit_transform"]], "get_feature_names_out() (sklearn.manifold.locallylinearembedding method)": [[654, "sklearn.manifold.LocallyLinearEmbedding.get_feature_names_out"]], "get_metadata_routing() (sklearn.manifold.locallylinearembedding method)": [[654, "sklearn.manifold.LocallyLinearEmbedding.get_metadata_routing"]], "get_params() (sklearn.manifold.locallylinearembedding method)": [[654, "sklearn.manifold.LocallyLinearEmbedding.get_params"]], "set_output() (sklearn.manifold.locallylinearembedding method)": [[654, "sklearn.manifold.LocallyLinearEmbedding.set_output"]], "set_params() (sklearn.manifold.locallylinearembedding method)": [[654, "sklearn.manifold.LocallyLinearEmbedding.set_params"]], "transform() (sklearn.manifold.locallylinearembedding method)": [[654, "sklearn.manifold.LocallyLinearEmbedding.transform"]], "mds (class in sklearn.manifold)": [[655, "sklearn.manifold.MDS"]], "fit() (sklearn.manifold.mds method)": [[655, "sklearn.manifold.MDS.fit"]], "fit_transform() (sklearn.manifold.mds method)": [[655, "sklearn.manifold.MDS.fit_transform"]], "get_metadata_routing() (sklearn.manifold.mds method)": [[655, "sklearn.manifold.MDS.get_metadata_routing"]], "get_params() (sklearn.manifold.mds method)": [[655, "sklearn.manifold.MDS.get_params"]], "set_fit_request() (sklearn.manifold.mds method)": [[655, "sklearn.manifold.MDS.set_fit_request"]], "set_params() (sklearn.manifold.mds method)": [[655, "sklearn.manifold.MDS.set_params"]], "spectralembedding (class in sklearn.manifold)": [[656, "sklearn.manifold.SpectralEmbedding"]], "fit() (sklearn.manifold.spectralembedding method)": [[656, "sklearn.manifold.SpectralEmbedding.fit"]], "fit_transform() (sklearn.manifold.spectralembedding method)": [[656, "sklearn.manifold.SpectralEmbedding.fit_transform"]], "get_metadata_routing() (sklearn.manifold.spectralembedding method)": [[656, "sklearn.manifold.SpectralEmbedding.get_metadata_routing"]], "get_params() (sklearn.manifold.spectralembedding method)": [[656, "sklearn.manifold.SpectralEmbedding.get_params"]], "set_params() (sklearn.manifold.spectralembedding method)": [[656, "sklearn.manifold.SpectralEmbedding.set_params"]], "tsne (class in sklearn.manifold)": [[657, "sklearn.manifold.TSNE"]], "fit() (sklearn.manifold.tsne method)": [[657, "sklearn.manifold.TSNE.fit"]], "fit_transform() (sklearn.manifold.tsne method)": [[657, "sklearn.manifold.TSNE.fit_transform"]], "get_feature_names_out() (sklearn.manifold.tsne method)": [[657, "sklearn.manifold.TSNE.get_feature_names_out"]], "get_metadata_routing() (sklearn.manifold.tsne method)": [[657, "sklearn.manifold.TSNE.get_metadata_routing"]], "get_params() (sklearn.manifold.tsne method)": [[657, "sklearn.manifold.TSNE.get_params"]], "set_output() (sklearn.manifold.tsne method)": [[657, "sklearn.manifold.TSNE.set_output"]], "set_params() (sklearn.manifold.tsne method)": [[657, "sklearn.manifold.TSNE.set_params"]], "locally_linear_embedding() (in module sklearn.manifold)": [[658, "sklearn.manifold.locally_linear_embedding"]], "smacof() (in module sklearn.manifold)": [[659, "sklearn.manifold.smacof"]], "spectral_embedding() (in module sklearn.manifold)": [[660, "sklearn.manifold.spectral_embedding"]], "trustworthiness() (in module sklearn.manifold)": [[661, "sklearn.manifold.trustworthiness"]], "confusionmatrixdisplay (class in sklearn.metrics)": [[662, "sklearn.metrics.ConfusionMatrixDisplay"]], "from_estimator() (sklearn.metrics.confusionmatrixdisplay class method)": [[662, "sklearn.metrics.ConfusionMatrixDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.confusionmatrixdisplay class method)": [[662, "sklearn.metrics.ConfusionMatrixDisplay.from_predictions"]], "plot() (sklearn.metrics.confusionmatrixdisplay method)": [[662, "sklearn.metrics.ConfusionMatrixDisplay.plot"]], "detcurvedisplay (class in sklearn.metrics)": [[663, "sklearn.metrics.DetCurveDisplay"]], "from_estimator() (sklearn.metrics.detcurvedisplay class method)": [[663, "sklearn.metrics.DetCurveDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.detcurvedisplay class method)": [[663, "sklearn.metrics.DetCurveDisplay.from_predictions"]], "plot() (sklearn.metrics.detcurvedisplay method)": [[663, "sklearn.metrics.DetCurveDisplay.plot"]], "distancemetric (class in sklearn.metrics)": [[664, "sklearn.metrics.DistanceMetric"]], "get_metric() (sklearn.metrics.distancemetric class method)": [[664, "sklearn.metrics.DistanceMetric.get_metric"]], "precisionrecalldisplay (class in sklearn.metrics)": [[665, "sklearn.metrics.PrecisionRecallDisplay"]], "from_estimator() (sklearn.metrics.precisionrecalldisplay class method)": [[665, "sklearn.metrics.PrecisionRecallDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.precisionrecalldisplay class method)": [[665, "sklearn.metrics.PrecisionRecallDisplay.from_predictions"]], "plot() (sklearn.metrics.precisionrecalldisplay method)": [[665, "sklearn.metrics.PrecisionRecallDisplay.plot"]], "predictionerrordisplay (class in sklearn.metrics)": [[666, "sklearn.metrics.PredictionErrorDisplay"]], "from_estimator() (sklearn.metrics.predictionerrordisplay class method)": [[666, "sklearn.metrics.PredictionErrorDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.predictionerrordisplay class method)": [[666, "sklearn.metrics.PredictionErrorDisplay.from_predictions"]], "plot() (sklearn.metrics.predictionerrordisplay method)": [[666, "sklearn.metrics.PredictionErrorDisplay.plot"]], "roccurvedisplay (class in sklearn.metrics)": [[667, "sklearn.metrics.RocCurveDisplay"]], "from_estimator() (sklearn.metrics.roccurvedisplay class method)": [[667, "sklearn.metrics.RocCurveDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.roccurvedisplay class method)": [[667, "sklearn.metrics.RocCurveDisplay.from_predictions"]], "plot() (sklearn.metrics.roccurvedisplay method)": [[667, "sklearn.metrics.RocCurveDisplay.plot"]], "accuracy_score() (in module sklearn.metrics)": [[668, "sklearn.metrics.accuracy_score"]], "adjusted_mutual_info_score() (in module sklearn.metrics)": [[669, "sklearn.metrics.adjusted_mutual_info_score"]], "adjusted_rand_score() (in module sklearn.metrics)": [[670, "sklearn.metrics.adjusted_rand_score"]], "auc() (in module sklearn.metrics)": [[671, "sklearn.metrics.auc"]], "average_precision_score() (in module sklearn.metrics)": [[672, "sklearn.metrics.average_precision_score"]], "balanced_accuracy_score() (in module sklearn.metrics)": [[673, "sklearn.metrics.balanced_accuracy_score"]], "brier_score_loss() (in module sklearn.metrics)": [[674, "sklearn.metrics.brier_score_loss"]], "calinski_harabasz_score() (in module sklearn.metrics)": [[675, "sklearn.metrics.calinski_harabasz_score"]], "check_scoring() (in module sklearn.metrics)": [[676, "sklearn.metrics.check_scoring"]], "class_likelihood_ratios() (in module sklearn.metrics)": [[677, "sklearn.metrics.class_likelihood_ratios"]], "classification_report() (in module sklearn.metrics)": [[678, "sklearn.metrics.classification_report"]], "contingency_matrix() (in module sklearn.metrics.cluster)": [[679, "sklearn.metrics.cluster.contingency_matrix"]], "pair_confusion_matrix() (in module sklearn.metrics.cluster)": [[680, "sklearn.metrics.cluster.pair_confusion_matrix"]], "cohen_kappa_score() (in module sklearn.metrics)": [[681, "sklearn.metrics.cohen_kappa_score"]], "completeness_score() (in module sklearn.metrics)": [[682, "sklearn.metrics.completeness_score"]], "confusion_matrix() (in module sklearn.metrics)": [[683, "sklearn.metrics.confusion_matrix"]], "consensus_score() (in module sklearn.metrics)": [[684, "sklearn.metrics.consensus_score"]], "coverage_error() (in module sklearn.metrics)": [[685, "sklearn.metrics.coverage_error"]], "d2_absolute_error_score() (in module sklearn.metrics)": [[686, "sklearn.metrics.d2_absolute_error_score"]], "d2_pinball_score() (in module sklearn.metrics)": [[687, "sklearn.metrics.d2_pinball_score"]], "d2_tweedie_score() (in module sklearn.metrics)": [[688, "sklearn.metrics.d2_tweedie_score"]], "davies_bouldin_score() (in module sklearn.metrics)": [[689, "sklearn.metrics.davies_bouldin_score"]], "dcg_score() (in module sklearn.metrics)": [[690, "sklearn.metrics.dcg_score"]], "det_curve() (in module sklearn.metrics)": [[691, "sklearn.metrics.det_curve"]], "explained_variance_score() (in module sklearn.metrics)": [[692, "sklearn.metrics.explained_variance_score"]], "f1_score() (in module sklearn.metrics)": [[693, "sklearn.metrics.f1_score"]], "fbeta_score() (in module sklearn.metrics)": [[694, "sklearn.metrics.fbeta_score"]], "fowlkes_mallows_score() (in module sklearn.metrics)": [[695, "sklearn.metrics.fowlkes_mallows_score"]], "get_scorer() (in module sklearn.metrics)": [[696, "sklearn.metrics.get_scorer"]], "get_scorer_names() (in module sklearn.metrics)": [[697, "sklearn.metrics.get_scorer_names"]], "hamming_loss() (in module sklearn.metrics)": [[698, "sklearn.metrics.hamming_loss"]], "hinge_loss() (in module sklearn.metrics)": [[699, "sklearn.metrics.hinge_loss"]], "homogeneity_completeness_v_measure() (in module sklearn.metrics)": [[700, "sklearn.metrics.homogeneity_completeness_v_measure"]], "homogeneity_score() (in module sklearn.metrics)": [[701, "sklearn.metrics.homogeneity_score"]], "jaccard_score() (in module sklearn.metrics)": [[702, "sklearn.metrics.jaccard_score"]], "label_ranking_average_precision_score() (in module sklearn.metrics)": [[703, "sklearn.metrics.label_ranking_average_precision_score"]], "label_ranking_loss() (in module sklearn.metrics)": [[704, "sklearn.metrics.label_ranking_loss"]], "log_loss() (in module sklearn.metrics)": [[705, "sklearn.metrics.log_loss"]], "make_scorer() (in module sklearn.metrics)": [[706, "sklearn.metrics.make_scorer"]], "matthews_corrcoef() (in module sklearn.metrics)": [[707, "sklearn.metrics.matthews_corrcoef"]], "max_error() (in module sklearn.metrics)": [[708, "sklearn.metrics.max_error"]], "mean_absolute_error() (in module sklearn.metrics)": [[709, "sklearn.metrics.mean_absolute_error"]], "mean_absolute_percentage_error() (in module sklearn.metrics)": [[710, "sklearn.metrics.mean_absolute_percentage_error"]], "mean_gamma_deviance() (in module sklearn.metrics)": [[711, "sklearn.metrics.mean_gamma_deviance"]], "mean_pinball_loss() (in module sklearn.metrics)": [[712, "sklearn.metrics.mean_pinball_loss"]], "mean_poisson_deviance() (in module sklearn.metrics)": [[713, "sklearn.metrics.mean_poisson_deviance"]], "mean_squared_error() (in module sklearn.metrics)": [[714, "sklearn.metrics.mean_squared_error"]], "mean_squared_log_error() (in module sklearn.metrics)": [[715, "sklearn.metrics.mean_squared_log_error"]], "mean_tweedie_deviance() (in module sklearn.metrics)": [[716, "sklearn.metrics.mean_tweedie_deviance"]], "median_absolute_error() (in module sklearn.metrics)": [[717, "sklearn.metrics.median_absolute_error"]], "multilabel_confusion_matrix() (in module sklearn.metrics)": [[718, "sklearn.metrics.multilabel_confusion_matrix"]], "mutual_info_score() (in module sklearn.metrics)": [[719, "sklearn.metrics.mutual_info_score"]], "ndcg_score() (in module sklearn.metrics)": [[720, "sklearn.metrics.ndcg_score"]], "normalized_mutual_info_score() (in module sklearn.metrics)": [[721, "sklearn.metrics.normalized_mutual_info_score"]], "additive_chi2_kernel() (in module sklearn.metrics.pairwise)": [[722, "sklearn.metrics.pairwise.additive_chi2_kernel"]], "chi2_kernel() (in module sklearn.metrics.pairwise)": [[723, "sklearn.metrics.pairwise.chi2_kernel"]], "cosine_distances() (in module sklearn.metrics.pairwise)": [[724, "sklearn.metrics.pairwise.cosine_distances"]], "cosine_similarity() (in module sklearn.metrics.pairwise)": [[725, "sklearn.metrics.pairwise.cosine_similarity"]], "distance_metrics() (in module sklearn.metrics.pairwise)": [[726, "sklearn.metrics.pairwise.distance_metrics"]], "euclidean_distances() (in module sklearn.metrics.pairwise)": [[727, "sklearn.metrics.pairwise.euclidean_distances"]], "haversine_distances() (in module sklearn.metrics.pairwise)": [[728, "sklearn.metrics.pairwise.haversine_distances"]], "kernel_metrics() (in module sklearn.metrics.pairwise)": [[729, "sklearn.metrics.pairwise.kernel_metrics"]], "laplacian_kernel() (in module sklearn.metrics.pairwise)": [[730, "sklearn.metrics.pairwise.laplacian_kernel"]], "linear_kernel() (in module sklearn.metrics.pairwise)": [[731, "sklearn.metrics.pairwise.linear_kernel"]], "manhattan_distances() (in module sklearn.metrics.pairwise)": [[732, "sklearn.metrics.pairwise.manhattan_distances"]], "nan_euclidean_distances() (in module sklearn.metrics.pairwise)": [[733, "sklearn.metrics.pairwise.nan_euclidean_distances"]], "paired_cosine_distances() (in module sklearn.metrics.pairwise)": [[734, "sklearn.metrics.pairwise.paired_cosine_distances"]], "paired_distances() (in module sklearn.metrics.pairwise)": [[735, "sklearn.metrics.pairwise.paired_distances"]], "paired_euclidean_distances() (in module sklearn.metrics.pairwise)": [[736, "sklearn.metrics.pairwise.paired_euclidean_distances"]], "paired_manhattan_distances() (in module sklearn.metrics.pairwise)": [[737, "sklearn.metrics.pairwise.paired_manhattan_distances"]], "pairwise_kernels() (in module sklearn.metrics.pairwise)": [[738, "sklearn.metrics.pairwise.pairwise_kernels"]], "polynomial_kernel() (in module sklearn.metrics.pairwise)": [[739, "sklearn.metrics.pairwise.polynomial_kernel"]], "rbf_kernel() (in module sklearn.metrics.pairwise)": [[740, "sklearn.metrics.pairwise.rbf_kernel"]], "sigmoid_kernel() (in module sklearn.metrics.pairwise)": [[741, "sklearn.metrics.pairwise.sigmoid_kernel"]], "pairwise_distances() (in module sklearn.metrics)": [[742, "sklearn.metrics.pairwise_distances"]], "pairwise_distances_argmin() (in module sklearn.metrics)": [[743, "sklearn.metrics.pairwise_distances_argmin"]], "pairwise_distances_argmin_min() (in module sklearn.metrics)": [[744, "sklearn.metrics.pairwise_distances_argmin_min"]], "pairwise_distances_chunked() (in module sklearn.metrics)": [[745, "sklearn.metrics.pairwise_distances_chunked"]], "precision_recall_curve() (in module sklearn.metrics)": [[746, "sklearn.metrics.precision_recall_curve"]], "precision_recall_fscore_support() (in module sklearn.metrics)": [[747, "sklearn.metrics.precision_recall_fscore_support"]], "precision_score() (in module sklearn.metrics)": [[748, "sklearn.metrics.precision_score"]], "r2_score() (in module sklearn.metrics)": [[749, "sklearn.metrics.r2_score"]], "rand_score() (in module sklearn.metrics)": [[750, "sklearn.metrics.rand_score"]], "recall_score() (in module sklearn.metrics)": [[751, "sklearn.metrics.recall_score"]], "roc_auc_score() (in module sklearn.metrics)": [[752, "sklearn.metrics.roc_auc_score"]], "roc_curve() (in module sklearn.metrics)": [[753, "sklearn.metrics.roc_curve"]], "root_mean_squared_error() (in module sklearn.metrics)": [[754, "sklearn.metrics.root_mean_squared_error"]], "root_mean_squared_log_error() (in module sklearn.metrics)": [[755, "sklearn.metrics.root_mean_squared_log_error"]], "silhouette_samples() (in module sklearn.metrics)": [[756, "sklearn.metrics.silhouette_samples"]], "silhouette_score() (in module sklearn.metrics)": [[757, "sklearn.metrics.silhouette_score"]], "top_k_accuracy_score() (in module sklearn.metrics)": [[758, "sklearn.metrics.top_k_accuracy_score"]], "v_measure_score() (in module sklearn.metrics)": [[759, "sklearn.metrics.v_measure_score"]], "zero_one_loss() (in module sklearn.metrics)": [[760, "sklearn.metrics.zero_one_loss"]], "bayesiangaussianmixture (class in sklearn.mixture)": [[761, "sklearn.mixture.BayesianGaussianMixture"]], "fit() (sklearn.mixture.bayesiangaussianmixture method)": [[761, "sklearn.mixture.BayesianGaussianMixture.fit"]], "fit_predict() (sklearn.mixture.bayesiangaussianmixture method)": [[761, "sklearn.mixture.BayesianGaussianMixture.fit_predict"]], "get_metadata_routing() (sklearn.mixture.bayesiangaussianmixture method)": [[761, "sklearn.mixture.BayesianGaussianMixture.get_metadata_routing"]], "get_params() (sklearn.mixture.bayesiangaussianmixture method)": [[761, "sklearn.mixture.BayesianGaussianMixture.get_params"]], "predict() (sklearn.mixture.bayesiangaussianmixture method)": [[761, "sklearn.mixture.BayesianGaussianMixture.predict"]], "predict_proba() (sklearn.mixture.bayesiangaussianmixture method)": [[761, "sklearn.mixture.BayesianGaussianMixture.predict_proba"]], "sample() (sklearn.mixture.bayesiangaussianmixture method)": [[761, "sklearn.mixture.BayesianGaussianMixture.sample"]], "score() (sklearn.mixture.bayesiangaussianmixture method)": [[761, "sklearn.mixture.BayesianGaussianMixture.score"]], "score_samples() (sklearn.mixture.bayesiangaussianmixture method)": [[761, "sklearn.mixture.BayesianGaussianMixture.score_samples"]], "set_params() (sklearn.mixture.bayesiangaussianmixture method)": [[761, "sklearn.mixture.BayesianGaussianMixture.set_params"]], "gaussianmixture (class in sklearn.mixture)": [[762, "sklearn.mixture.GaussianMixture"]], "aic() (sklearn.mixture.gaussianmixture method)": [[762, "sklearn.mixture.GaussianMixture.aic"]], "bic() (sklearn.mixture.gaussianmixture method)": [[762, "sklearn.mixture.GaussianMixture.bic"]], "fit() (sklearn.mixture.gaussianmixture method)": [[762, "sklearn.mixture.GaussianMixture.fit"]], "fit_predict() (sklearn.mixture.gaussianmixture method)": [[762, "sklearn.mixture.GaussianMixture.fit_predict"]], "get_metadata_routing() (sklearn.mixture.gaussianmixture method)": [[762, "sklearn.mixture.GaussianMixture.get_metadata_routing"]], "get_params() (sklearn.mixture.gaussianmixture method)": [[762, "sklearn.mixture.GaussianMixture.get_params"]], "predict() (sklearn.mixture.gaussianmixture method)": [[762, "sklearn.mixture.GaussianMixture.predict"]], "predict_proba() (sklearn.mixture.gaussianmixture method)": [[762, "sklearn.mixture.GaussianMixture.predict_proba"]], "sample() (sklearn.mixture.gaussianmixture method)": [[762, "sklearn.mixture.GaussianMixture.sample"]], "score() (sklearn.mixture.gaussianmixture method)": [[762, "sklearn.mixture.GaussianMixture.score"]], "score_samples() (sklearn.mixture.gaussianmixture method)": [[762, "sklearn.mixture.GaussianMixture.score_samples"]], "set_params() (sklearn.mixture.gaussianmixture method)": [[762, "sklearn.mixture.GaussianMixture.set_params"]], "gridsearchcv (class in sklearn.model_selection)": [[763, "sklearn.model_selection.GridSearchCV"]], "classes_ (sklearn.model_selection.gridsearchcv property)": [[763, "sklearn.model_selection.GridSearchCV.classes_"]], "decision_function() (sklearn.model_selection.gridsearchcv method)": [[763, "sklearn.model_selection.GridSearchCV.decision_function"]], "fit() (sklearn.model_selection.gridsearchcv method)": [[763, "sklearn.model_selection.GridSearchCV.fit"]], "get_metadata_routing() (sklearn.model_selection.gridsearchcv method)": [[763, "sklearn.model_selection.GridSearchCV.get_metadata_routing"]], "get_params() (sklearn.model_selection.gridsearchcv method)": [[763, "sklearn.model_selection.GridSearchCV.get_params"]], "inverse_transform() (sklearn.model_selection.gridsearchcv method)": [[763, "sklearn.model_selection.GridSearchCV.inverse_transform"]], "n_features_in_ (sklearn.model_selection.gridsearchcv property)": [[763, "sklearn.model_selection.GridSearchCV.n_features_in_"]], "predict() (sklearn.model_selection.gridsearchcv method)": [[763, "sklearn.model_selection.GridSearchCV.predict"]], "predict_log_proba() (sklearn.model_selection.gridsearchcv method)": [[763, "sklearn.model_selection.GridSearchCV.predict_log_proba"]], "predict_proba() (sklearn.model_selection.gridsearchcv method)": [[763, "sklearn.model_selection.GridSearchCV.predict_proba"]], "score() (sklearn.model_selection.gridsearchcv method)": [[763, "sklearn.model_selection.GridSearchCV.score"]], "score_samples() (sklearn.model_selection.gridsearchcv method)": [[763, "sklearn.model_selection.GridSearchCV.score_samples"]], "set_params() (sklearn.model_selection.gridsearchcv method)": [[763, "sklearn.model_selection.GridSearchCV.set_params"]], "transform() (sklearn.model_selection.gridsearchcv method)": [[763, "sklearn.model_selection.GridSearchCV.transform"]], "groupkfold (class in sklearn.model_selection)": [[764, "sklearn.model_selection.GroupKFold"]], "get_metadata_routing() (sklearn.model_selection.groupkfold method)": [[764, "sklearn.model_selection.GroupKFold.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.groupkfold method)": [[764, "sklearn.model_selection.GroupKFold.get_n_splits"]], "set_split_request() (sklearn.model_selection.groupkfold method)": [[764, "sklearn.model_selection.GroupKFold.set_split_request"]], "split() (sklearn.model_selection.groupkfold method)": [[764, "sklearn.model_selection.GroupKFold.split"]], "groupshufflesplit (class in sklearn.model_selection)": [[765, "sklearn.model_selection.GroupShuffleSplit"]], "get_metadata_routing() (sklearn.model_selection.groupshufflesplit method)": [[765, "sklearn.model_selection.GroupShuffleSplit.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.groupshufflesplit method)": [[765, "sklearn.model_selection.GroupShuffleSplit.get_n_splits"]], "set_split_request() (sklearn.model_selection.groupshufflesplit method)": [[765, "sklearn.model_selection.GroupShuffleSplit.set_split_request"]], "split() (sklearn.model_selection.groupshufflesplit method)": [[765, "sklearn.model_selection.GroupShuffleSplit.split"]], "halvinggridsearchcv (class in sklearn.model_selection)": [[766, "sklearn.model_selection.HalvingGridSearchCV"]], "classes_ (sklearn.model_selection.halvinggridsearchcv property)": [[766, "sklearn.model_selection.HalvingGridSearchCV.classes_"]], "decision_function() (sklearn.model_selection.halvinggridsearchcv method)": [[766, "sklearn.model_selection.HalvingGridSearchCV.decision_function"]], "fit() (sklearn.model_selection.halvinggridsearchcv method)": [[766, "sklearn.model_selection.HalvingGridSearchCV.fit"]], "get_metadata_routing() (sklearn.model_selection.halvinggridsearchcv method)": [[766, "sklearn.model_selection.HalvingGridSearchCV.get_metadata_routing"]], "get_params() (sklearn.model_selection.halvinggridsearchcv method)": [[766, "sklearn.model_selection.HalvingGridSearchCV.get_params"]], "inverse_transform() (sklearn.model_selection.halvinggridsearchcv method)": [[766, "sklearn.model_selection.HalvingGridSearchCV.inverse_transform"]], "n_features_in_ (sklearn.model_selection.halvinggridsearchcv property)": [[766, "sklearn.model_selection.HalvingGridSearchCV.n_features_in_"]], "predict() (sklearn.model_selection.halvinggridsearchcv method)": [[766, "sklearn.model_selection.HalvingGridSearchCV.predict"]], "predict_log_proba() (sklearn.model_selection.halvinggridsearchcv method)": [[766, "sklearn.model_selection.HalvingGridSearchCV.predict_log_proba"]], "predict_proba() (sklearn.model_selection.halvinggridsearchcv method)": [[766, "sklearn.model_selection.HalvingGridSearchCV.predict_proba"]], "score() (sklearn.model_selection.halvinggridsearchcv method)": [[766, "sklearn.model_selection.HalvingGridSearchCV.score"]], "score_samples() (sklearn.model_selection.halvinggridsearchcv method)": [[766, "sklearn.model_selection.HalvingGridSearchCV.score_samples"]], "set_params() (sklearn.model_selection.halvinggridsearchcv method)": [[766, "sklearn.model_selection.HalvingGridSearchCV.set_params"]], "transform() (sklearn.model_selection.halvinggridsearchcv method)": [[766, "sklearn.model_selection.HalvingGridSearchCV.transform"]], "halvingrandomsearchcv (class in sklearn.model_selection)": [[767, "sklearn.model_selection.HalvingRandomSearchCV"]], "classes_ (sklearn.model_selection.halvingrandomsearchcv property)": [[767, "sklearn.model_selection.HalvingRandomSearchCV.classes_"]], "decision_function() (sklearn.model_selection.halvingrandomsearchcv method)": [[767, "sklearn.model_selection.HalvingRandomSearchCV.decision_function"]], "fit() (sklearn.model_selection.halvingrandomsearchcv method)": [[767, "sklearn.model_selection.HalvingRandomSearchCV.fit"]], "get_metadata_routing() (sklearn.model_selection.halvingrandomsearchcv method)": [[767, "sklearn.model_selection.HalvingRandomSearchCV.get_metadata_routing"]], "get_params() (sklearn.model_selection.halvingrandomsearchcv method)": [[767, "sklearn.model_selection.HalvingRandomSearchCV.get_params"]], "inverse_transform() (sklearn.model_selection.halvingrandomsearchcv method)": [[767, "sklearn.model_selection.HalvingRandomSearchCV.inverse_transform"]], "n_features_in_ (sklearn.model_selection.halvingrandomsearchcv property)": [[767, "sklearn.model_selection.HalvingRandomSearchCV.n_features_in_"]], "predict() (sklearn.model_selection.halvingrandomsearchcv method)": [[767, "sklearn.model_selection.HalvingRandomSearchCV.predict"]], "predict_log_proba() (sklearn.model_selection.halvingrandomsearchcv method)": [[767, "sklearn.model_selection.HalvingRandomSearchCV.predict_log_proba"]], "predict_proba() (sklearn.model_selection.halvingrandomsearchcv method)": [[767, "sklearn.model_selection.HalvingRandomSearchCV.predict_proba"]], "score() (sklearn.model_selection.halvingrandomsearchcv method)": [[767, "sklearn.model_selection.HalvingRandomSearchCV.score"]], "score_samples() (sklearn.model_selection.halvingrandomsearchcv method)": [[767, "sklearn.model_selection.HalvingRandomSearchCV.score_samples"]], "set_params() (sklearn.model_selection.halvingrandomsearchcv method)": [[767, "sklearn.model_selection.HalvingRandomSearchCV.set_params"]], "transform() (sklearn.model_selection.halvingrandomsearchcv method)": [[767, "sklearn.model_selection.HalvingRandomSearchCV.transform"]], "kfold (class in sklearn.model_selection)": [[768, "sklearn.model_selection.KFold"]], "get_metadata_routing() (sklearn.model_selection.kfold method)": [[768, "sklearn.model_selection.KFold.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.kfold method)": [[768, "sklearn.model_selection.KFold.get_n_splits"]], "split() (sklearn.model_selection.kfold method)": [[768, "sklearn.model_selection.KFold.split"]], "learningcurvedisplay (class in sklearn.model_selection)": [[769, "sklearn.model_selection.LearningCurveDisplay"]], "from_estimator() (sklearn.model_selection.learningcurvedisplay class method)": [[769, "sklearn.model_selection.LearningCurveDisplay.from_estimator"]], "plot() (sklearn.model_selection.learningcurvedisplay method)": [[769, "sklearn.model_selection.LearningCurveDisplay.plot"]], "leaveonegroupout (class in sklearn.model_selection)": [[770, "sklearn.model_selection.LeaveOneGroupOut"]], "get_metadata_routing() (sklearn.model_selection.leaveonegroupout method)": [[770, "sklearn.model_selection.LeaveOneGroupOut.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.leaveonegroupout method)": [[770, "sklearn.model_selection.LeaveOneGroupOut.get_n_splits"]], "set_split_request() (sklearn.model_selection.leaveonegroupout method)": [[770, "sklearn.model_selection.LeaveOneGroupOut.set_split_request"]], "split() (sklearn.model_selection.leaveonegroupout method)": [[770, "sklearn.model_selection.LeaveOneGroupOut.split"]], "leaveoneout (class in sklearn.model_selection)": [[771, "sklearn.model_selection.LeaveOneOut"]], "get_metadata_routing() (sklearn.model_selection.leaveoneout method)": [[771, "sklearn.model_selection.LeaveOneOut.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.leaveoneout method)": [[771, "sklearn.model_selection.LeaveOneOut.get_n_splits"]], "split() (sklearn.model_selection.leaveoneout method)": [[771, "sklearn.model_selection.LeaveOneOut.split"]], "leavepgroupsout (class in sklearn.model_selection)": [[772, "sklearn.model_selection.LeavePGroupsOut"]], "get_metadata_routing() (sklearn.model_selection.leavepgroupsout method)": [[772, "sklearn.model_selection.LeavePGroupsOut.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.leavepgroupsout method)": [[772, "sklearn.model_selection.LeavePGroupsOut.get_n_splits"]], "set_split_request() (sklearn.model_selection.leavepgroupsout method)": [[772, "sklearn.model_selection.LeavePGroupsOut.set_split_request"]], "split() (sklearn.model_selection.leavepgroupsout method)": [[772, "sklearn.model_selection.LeavePGroupsOut.split"]], "leavepout (class in sklearn.model_selection)": [[773, "sklearn.model_selection.LeavePOut"]], "get_metadata_routing() (sklearn.model_selection.leavepout method)": [[773, "sklearn.model_selection.LeavePOut.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.leavepout method)": [[773, "sklearn.model_selection.LeavePOut.get_n_splits"]], "split() (sklearn.model_selection.leavepout method)": [[773, "sklearn.model_selection.LeavePOut.split"]], "parametergrid (class in sklearn.model_selection)": [[774, "sklearn.model_selection.ParameterGrid"]], "parametersampler (class in sklearn.model_selection)": [[775, "sklearn.model_selection.ParameterSampler"]], "predefinedsplit (class in sklearn.model_selection)": [[776, "sklearn.model_selection.PredefinedSplit"]], "get_metadata_routing() (sklearn.model_selection.predefinedsplit method)": [[776, "sklearn.model_selection.PredefinedSplit.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.predefinedsplit method)": [[776, "sklearn.model_selection.PredefinedSplit.get_n_splits"]], "split() (sklearn.model_selection.predefinedsplit method)": [[776, "sklearn.model_selection.PredefinedSplit.split"]], "randomizedsearchcv (class in sklearn.model_selection)": [[777, "sklearn.model_selection.RandomizedSearchCV"]], "classes_ (sklearn.model_selection.randomizedsearchcv property)": [[777, "sklearn.model_selection.RandomizedSearchCV.classes_"]], "decision_function() (sklearn.model_selection.randomizedsearchcv method)": [[777, "sklearn.model_selection.RandomizedSearchCV.decision_function"]], "fit() (sklearn.model_selection.randomizedsearchcv method)": [[777, "sklearn.model_selection.RandomizedSearchCV.fit"]], "get_metadata_routing() (sklearn.model_selection.randomizedsearchcv method)": [[777, "sklearn.model_selection.RandomizedSearchCV.get_metadata_routing"]], "get_params() (sklearn.model_selection.randomizedsearchcv method)": [[777, "sklearn.model_selection.RandomizedSearchCV.get_params"]], "inverse_transform() (sklearn.model_selection.randomizedsearchcv method)": [[777, "sklearn.model_selection.RandomizedSearchCV.inverse_transform"]], "n_features_in_ (sklearn.model_selection.randomizedsearchcv property)": [[777, "sklearn.model_selection.RandomizedSearchCV.n_features_in_"]], "predict() (sklearn.model_selection.randomizedsearchcv method)": [[777, "sklearn.model_selection.RandomizedSearchCV.predict"]], "predict_log_proba() (sklearn.model_selection.randomizedsearchcv method)": [[777, "sklearn.model_selection.RandomizedSearchCV.predict_log_proba"]], "predict_proba() (sklearn.model_selection.randomizedsearchcv method)": [[777, "sklearn.model_selection.RandomizedSearchCV.predict_proba"]], "score() (sklearn.model_selection.randomizedsearchcv method)": [[777, "sklearn.model_selection.RandomizedSearchCV.score"]], "score_samples() (sklearn.model_selection.randomizedsearchcv method)": [[777, "sklearn.model_selection.RandomizedSearchCV.score_samples"]], "set_params() (sklearn.model_selection.randomizedsearchcv method)": [[777, "sklearn.model_selection.RandomizedSearchCV.set_params"]], "transform() (sklearn.model_selection.randomizedsearchcv method)": [[777, "sklearn.model_selection.RandomizedSearchCV.transform"]], "repeatedkfold (class in sklearn.model_selection)": [[778, "sklearn.model_selection.RepeatedKFold"]], "get_metadata_routing() (sklearn.model_selection.repeatedkfold method)": [[778, "sklearn.model_selection.RepeatedKFold.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.repeatedkfold method)": [[778, "sklearn.model_selection.RepeatedKFold.get_n_splits"]], "split() (sklearn.model_selection.repeatedkfold method)": [[778, "sklearn.model_selection.RepeatedKFold.split"]], "repeatedstratifiedkfold (class in sklearn.model_selection)": [[779, "sklearn.model_selection.RepeatedStratifiedKFold"]], "get_metadata_routing() (sklearn.model_selection.repeatedstratifiedkfold method)": [[779, "sklearn.model_selection.RepeatedStratifiedKFold.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.repeatedstratifiedkfold method)": [[779, "sklearn.model_selection.RepeatedStratifiedKFold.get_n_splits"]], "split() (sklearn.model_selection.repeatedstratifiedkfold method)": [[779, "sklearn.model_selection.RepeatedStratifiedKFold.split"]], "shufflesplit (class in sklearn.model_selection)": [[780, "sklearn.model_selection.ShuffleSplit"]], "get_metadata_routing() (sklearn.model_selection.shufflesplit method)": [[780, "sklearn.model_selection.ShuffleSplit.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.shufflesplit method)": [[780, "sklearn.model_selection.ShuffleSplit.get_n_splits"]], "split() (sklearn.model_selection.shufflesplit method)": [[780, "sklearn.model_selection.ShuffleSplit.split"]], "stratifiedgroupkfold (class in sklearn.model_selection)": [[781, "sklearn.model_selection.StratifiedGroupKFold"]], "get_metadata_routing() (sklearn.model_selection.stratifiedgroupkfold method)": [[781, "sklearn.model_selection.StratifiedGroupKFold.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.stratifiedgroupkfold method)": [[781, "sklearn.model_selection.StratifiedGroupKFold.get_n_splits"]], "set_split_request() (sklearn.model_selection.stratifiedgroupkfold method)": [[781, "sklearn.model_selection.StratifiedGroupKFold.set_split_request"]], "split() (sklearn.model_selection.stratifiedgroupkfold method)": [[781, "sklearn.model_selection.StratifiedGroupKFold.split"]], "stratifiedkfold (class in sklearn.model_selection)": [[782, "sklearn.model_selection.StratifiedKFold"]], "get_metadata_routing() (sklearn.model_selection.stratifiedkfold method)": [[782, "sklearn.model_selection.StratifiedKFold.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.stratifiedkfold method)": [[782, "sklearn.model_selection.StratifiedKFold.get_n_splits"]], "split() (sklearn.model_selection.stratifiedkfold method)": [[782, "sklearn.model_selection.StratifiedKFold.split"]], "stratifiedshufflesplit (class in sklearn.model_selection)": [[783, "sklearn.model_selection.StratifiedShuffleSplit"]], "get_metadata_routing() (sklearn.model_selection.stratifiedshufflesplit method)": [[783, "sklearn.model_selection.StratifiedShuffleSplit.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.stratifiedshufflesplit method)": [[783, "sklearn.model_selection.StratifiedShuffleSplit.get_n_splits"]], "split() (sklearn.model_selection.stratifiedshufflesplit method)": [[783, "sklearn.model_selection.StratifiedShuffleSplit.split"]], "timeseriessplit (class in sklearn.model_selection)": [[784, "sklearn.model_selection.TimeSeriesSplit"]], "get_metadata_routing() (sklearn.model_selection.timeseriessplit method)": [[784, "sklearn.model_selection.TimeSeriesSplit.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.timeseriessplit method)": [[784, "sklearn.model_selection.TimeSeriesSplit.get_n_splits"]], "split() (sklearn.model_selection.timeseriessplit method)": [[784, "sklearn.model_selection.TimeSeriesSplit.split"]], "validationcurvedisplay (class in sklearn.model_selection)": [[785, "sklearn.model_selection.ValidationCurveDisplay"]], "from_estimator() (sklearn.model_selection.validationcurvedisplay class method)": [[785, "sklearn.model_selection.ValidationCurveDisplay.from_estimator"]], "plot() (sklearn.model_selection.validationcurvedisplay method)": [[785, "sklearn.model_selection.ValidationCurveDisplay.plot"]], "check_cv() (in module sklearn.model_selection)": [[786, "sklearn.model_selection.check_cv"]], "cross_val_predict() (in module sklearn.model_selection)": [[787, "sklearn.model_selection.cross_val_predict"]], "cross_val_score() (in module sklearn.model_selection)": [[788, "sklearn.model_selection.cross_val_score"]], "cross_validate() (in module sklearn.model_selection)": [[789, "sklearn.model_selection.cross_validate"]], "learning_curve() (in module sklearn.model_selection)": [[790, "sklearn.model_selection.learning_curve"]], "permutation_test_score() (in module sklearn.model_selection)": [[791, "sklearn.model_selection.permutation_test_score"]], "train_test_split() (in module sklearn.model_selection)": [[792, "sklearn.model_selection.train_test_split"]], "validation_curve() (in module sklearn.model_selection)": [[793, "sklearn.model_selection.validation_curve"]], "onevsoneclassifier (class in sklearn.multiclass)": [[794, "sklearn.multiclass.OneVsOneClassifier"]], "decision_function() (sklearn.multiclass.onevsoneclassifier method)": [[794, "sklearn.multiclass.OneVsOneClassifier.decision_function"]], "fit() (sklearn.multiclass.onevsoneclassifier method)": [[794, "sklearn.multiclass.OneVsOneClassifier.fit"]], "get_metadata_routing() (sklearn.multiclass.onevsoneclassifier method)": [[794, "sklearn.multiclass.OneVsOneClassifier.get_metadata_routing"]], "get_params() (sklearn.multiclass.onevsoneclassifier method)": [[794, "sklearn.multiclass.OneVsOneClassifier.get_params"]], "n_classes_ (sklearn.multiclass.onevsoneclassifier property)": [[794, "sklearn.multiclass.OneVsOneClassifier.n_classes_"]], "partial_fit() (sklearn.multiclass.onevsoneclassifier method)": [[794, "sklearn.multiclass.OneVsOneClassifier.partial_fit"]], "predict() (sklearn.multiclass.onevsoneclassifier method)": [[794, "sklearn.multiclass.OneVsOneClassifier.predict"]], "score() (sklearn.multiclass.onevsoneclassifier method)": [[794, "sklearn.multiclass.OneVsOneClassifier.score"]], "set_params() (sklearn.multiclass.onevsoneclassifier method)": [[794, "sklearn.multiclass.OneVsOneClassifier.set_params"]], "set_partial_fit_request() (sklearn.multiclass.onevsoneclassifier method)": [[794, "sklearn.multiclass.OneVsOneClassifier.set_partial_fit_request"]], "set_score_request() (sklearn.multiclass.onevsoneclassifier method)": [[794, "sklearn.multiclass.OneVsOneClassifier.set_score_request"]], "onevsrestclassifier (class in sklearn.multiclass)": [[795, "sklearn.multiclass.OneVsRestClassifier"]], "decision_function() (sklearn.multiclass.onevsrestclassifier method)": [[795, "sklearn.multiclass.OneVsRestClassifier.decision_function"]], "fit() (sklearn.multiclass.onevsrestclassifier method)": [[795, "sklearn.multiclass.OneVsRestClassifier.fit"]], "get_metadata_routing() (sklearn.multiclass.onevsrestclassifier method)": [[795, "sklearn.multiclass.OneVsRestClassifier.get_metadata_routing"]], "get_params() (sklearn.multiclass.onevsrestclassifier method)": [[795, "sklearn.multiclass.OneVsRestClassifier.get_params"]], "multilabel_ (sklearn.multiclass.onevsrestclassifier property)": [[795, "sklearn.multiclass.OneVsRestClassifier.multilabel_"]], "n_classes_ (sklearn.multiclass.onevsrestclassifier property)": [[795, "sklearn.multiclass.OneVsRestClassifier.n_classes_"]], "partial_fit() (sklearn.multiclass.onevsrestclassifier method)": [[795, "sklearn.multiclass.OneVsRestClassifier.partial_fit"]], "predict() (sklearn.multiclass.onevsrestclassifier method)": [[795, "sklearn.multiclass.OneVsRestClassifier.predict"]], "predict_proba() (sklearn.multiclass.onevsrestclassifier method)": [[795, "sklearn.multiclass.OneVsRestClassifier.predict_proba"]], "score() (sklearn.multiclass.onevsrestclassifier method)": [[795, "sklearn.multiclass.OneVsRestClassifier.score"]], "set_params() (sklearn.multiclass.onevsrestclassifier method)": [[795, "sklearn.multiclass.OneVsRestClassifier.set_params"]], "set_partial_fit_request() (sklearn.multiclass.onevsrestclassifier method)": [[795, "sklearn.multiclass.OneVsRestClassifier.set_partial_fit_request"]], "set_score_request() (sklearn.multiclass.onevsrestclassifier method)": [[795, "sklearn.multiclass.OneVsRestClassifier.set_score_request"]], "outputcodeclassifier (class in sklearn.multiclass)": [[796, "sklearn.multiclass.OutputCodeClassifier"]], "fit() (sklearn.multiclass.outputcodeclassifier method)": [[796, "sklearn.multiclass.OutputCodeClassifier.fit"]], "get_metadata_routing() (sklearn.multiclass.outputcodeclassifier method)": [[796, "sklearn.multiclass.OutputCodeClassifier.get_metadata_routing"]], "get_params() (sklearn.multiclass.outputcodeclassifier method)": [[796, "sklearn.multiclass.OutputCodeClassifier.get_params"]], "predict() (sklearn.multiclass.outputcodeclassifier method)": [[796, "sklearn.multiclass.OutputCodeClassifier.predict"]], "score() (sklearn.multiclass.outputcodeclassifier method)": [[796, "sklearn.multiclass.OutputCodeClassifier.score"]], "set_params() (sklearn.multiclass.outputcodeclassifier method)": [[796, "sklearn.multiclass.OutputCodeClassifier.set_params"]], "set_score_request() (sklearn.multiclass.outputcodeclassifier method)": [[796, "sklearn.multiclass.OutputCodeClassifier.set_score_request"]], "classifierchain (class in sklearn.multioutput)": [[797, "sklearn.multioutput.ClassifierChain"]], "decision_function() (sklearn.multioutput.classifierchain method)": [[797, "sklearn.multioutput.ClassifierChain.decision_function"]], "fit() (sklearn.multioutput.classifierchain method)": [[797, "sklearn.multioutput.ClassifierChain.fit"]], "get_metadata_routing() (sklearn.multioutput.classifierchain method)": [[797, "sklearn.multioutput.ClassifierChain.get_metadata_routing"]], "get_params() (sklearn.multioutput.classifierchain method)": [[797, "sklearn.multioutput.ClassifierChain.get_params"]], "predict() (sklearn.multioutput.classifierchain method)": [[797, "sklearn.multioutput.ClassifierChain.predict"]], "predict_log_proba() (sklearn.multioutput.classifierchain method)": [[797, "sklearn.multioutput.ClassifierChain.predict_log_proba"]], "predict_proba() (sklearn.multioutput.classifierchain method)": [[797, "sklearn.multioutput.ClassifierChain.predict_proba"]], "score() (sklearn.multioutput.classifierchain method)": [[797, "sklearn.multioutput.ClassifierChain.score"]], "set_params() (sklearn.multioutput.classifierchain method)": [[797, "sklearn.multioutput.ClassifierChain.set_params"]], "set_score_request() (sklearn.multioutput.classifierchain method)": [[797, "sklearn.multioutput.ClassifierChain.set_score_request"]], "multioutputclassifier (class in sklearn.multioutput)": [[798, "sklearn.multioutput.MultiOutputClassifier"]], "fit() (sklearn.multioutput.multioutputclassifier method)": [[798, "sklearn.multioutput.MultiOutputClassifier.fit"]], "get_metadata_routing() (sklearn.multioutput.multioutputclassifier method)": [[798, "sklearn.multioutput.MultiOutputClassifier.get_metadata_routing"]], "get_params() (sklearn.multioutput.multioutputclassifier method)": [[798, "sklearn.multioutput.MultiOutputClassifier.get_params"]], "partial_fit() (sklearn.multioutput.multioutputclassifier method)": [[798, "sklearn.multioutput.MultiOutputClassifier.partial_fit"]], "predict() (sklearn.multioutput.multioutputclassifier method)": [[798, "sklearn.multioutput.MultiOutputClassifier.predict"]], "predict_proba() (sklearn.multioutput.multioutputclassifier method)": [[798, "sklearn.multioutput.MultiOutputClassifier.predict_proba"]], "score() (sklearn.multioutput.multioutputclassifier method)": [[798, "sklearn.multioutput.MultiOutputClassifier.score"]], "set_fit_request() (sklearn.multioutput.multioutputclassifier method)": [[798, "sklearn.multioutput.MultiOutputClassifier.set_fit_request"]], "set_params() (sklearn.multioutput.multioutputclassifier method)": [[798, "sklearn.multioutput.MultiOutputClassifier.set_params"]], "set_partial_fit_request() (sklearn.multioutput.multioutputclassifier method)": [[798, "sklearn.multioutput.MultiOutputClassifier.set_partial_fit_request"]], "multioutputregressor (class in sklearn.multioutput)": [[799, "sklearn.multioutput.MultiOutputRegressor"]], "fit() (sklearn.multioutput.multioutputregressor method)": [[799, "sklearn.multioutput.MultiOutputRegressor.fit"]], "get_metadata_routing() (sklearn.multioutput.multioutputregressor method)": [[799, "sklearn.multioutput.MultiOutputRegressor.get_metadata_routing"]], "get_params() (sklearn.multioutput.multioutputregressor method)": [[799, "sklearn.multioutput.MultiOutputRegressor.get_params"]], "partial_fit() (sklearn.multioutput.multioutputregressor method)": [[799, "sklearn.multioutput.MultiOutputRegressor.partial_fit"]], "predict() (sklearn.multioutput.multioutputregressor method)": [[799, "sklearn.multioutput.MultiOutputRegressor.predict"]], "score() (sklearn.multioutput.multioutputregressor method)": [[799, "sklearn.multioutput.MultiOutputRegressor.score"]], "set_fit_request() (sklearn.multioutput.multioutputregressor method)": [[799, "sklearn.multioutput.MultiOutputRegressor.set_fit_request"]], "set_params() (sklearn.multioutput.multioutputregressor method)": [[799, "sklearn.multioutput.MultiOutputRegressor.set_params"]], "set_partial_fit_request() (sklearn.multioutput.multioutputregressor method)": [[799, "sklearn.multioutput.MultiOutputRegressor.set_partial_fit_request"]], "set_score_request() (sklearn.multioutput.multioutputregressor method)": [[799, "sklearn.multioutput.MultiOutputRegressor.set_score_request"]], "regressorchain (class in sklearn.multioutput)": [[800, "sklearn.multioutput.RegressorChain"]], "fit() (sklearn.multioutput.regressorchain method)": [[800, "sklearn.multioutput.RegressorChain.fit"]], "get_metadata_routing() (sklearn.multioutput.regressorchain method)": [[800, "sklearn.multioutput.RegressorChain.get_metadata_routing"]], "get_params() (sklearn.multioutput.regressorchain method)": [[800, "sklearn.multioutput.RegressorChain.get_params"]], "predict() (sklearn.multioutput.regressorchain method)": [[800, "sklearn.multioutput.RegressorChain.predict"]], "score() (sklearn.multioutput.regressorchain method)": [[800, "sklearn.multioutput.RegressorChain.score"]], "set_params() (sklearn.multioutput.regressorchain method)": [[800, "sklearn.multioutput.RegressorChain.set_params"]], "set_score_request() (sklearn.multioutput.regressorchain method)": [[800, "sklearn.multioutput.RegressorChain.set_score_request"]], "bernoullinb (class in sklearn.naive_bayes)": [[801, "sklearn.naive_bayes.BernoulliNB"]], "fit() (sklearn.naive_bayes.bernoullinb method)": [[801, "sklearn.naive_bayes.BernoulliNB.fit"]], "get_metadata_routing() (sklearn.naive_bayes.bernoullinb method)": [[801, "sklearn.naive_bayes.BernoulliNB.get_metadata_routing"]], "get_params() (sklearn.naive_bayes.bernoullinb method)": [[801, "sklearn.naive_bayes.BernoulliNB.get_params"]], "partial_fit() (sklearn.naive_bayes.bernoullinb method)": [[801, "sklearn.naive_bayes.BernoulliNB.partial_fit"]], "predict() (sklearn.naive_bayes.bernoullinb method)": [[801, "sklearn.naive_bayes.BernoulliNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.bernoullinb method)": [[801, "sklearn.naive_bayes.BernoulliNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.bernoullinb method)": [[801, "sklearn.naive_bayes.BernoulliNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.bernoullinb method)": [[801, "sklearn.naive_bayes.BernoulliNB.predict_proba"]], "score() (sklearn.naive_bayes.bernoullinb method)": [[801, "sklearn.naive_bayes.BernoulliNB.score"]], "set_fit_request() (sklearn.naive_bayes.bernoullinb method)": [[801, "sklearn.naive_bayes.BernoulliNB.set_fit_request"]], "set_params() (sklearn.naive_bayes.bernoullinb method)": [[801, "sklearn.naive_bayes.BernoulliNB.set_params"]], "set_partial_fit_request() (sklearn.naive_bayes.bernoullinb method)": [[801, "sklearn.naive_bayes.BernoulliNB.set_partial_fit_request"]], "set_score_request() (sklearn.naive_bayes.bernoullinb method)": [[801, "sklearn.naive_bayes.BernoulliNB.set_score_request"]], "categoricalnb (class in sklearn.naive_bayes)": [[802, "sklearn.naive_bayes.CategoricalNB"]], "fit() (sklearn.naive_bayes.categoricalnb method)": [[802, "sklearn.naive_bayes.CategoricalNB.fit"]], "get_metadata_routing() (sklearn.naive_bayes.categoricalnb method)": [[802, "sklearn.naive_bayes.CategoricalNB.get_metadata_routing"]], "get_params() (sklearn.naive_bayes.categoricalnb method)": [[802, "sklearn.naive_bayes.CategoricalNB.get_params"]], "partial_fit() (sklearn.naive_bayes.categoricalnb method)": [[802, "sklearn.naive_bayes.CategoricalNB.partial_fit"]], "predict() (sklearn.naive_bayes.categoricalnb method)": [[802, "sklearn.naive_bayes.CategoricalNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.categoricalnb method)": [[802, "sklearn.naive_bayes.CategoricalNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.categoricalnb method)": [[802, "sklearn.naive_bayes.CategoricalNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.categoricalnb method)": [[802, "sklearn.naive_bayes.CategoricalNB.predict_proba"]], "score() (sklearn.naive_bayes.categoricalnb method)": [[802, "sklearn.naive_bayes.CategoricalNB.score"]], "set_fit_request() (sklearn.naive_bayes.categoricalnb method)": [[802, "sklearn.naive_bayes.CategoricalNB.set_fit_request"]], "set_params() (sklearn.naive_bayes.categoricalnb method)": [[802, "sklearn.naive_bayes.CategoricalNB.set_params"]], "set_partial_fit_request() (sklearn.naive_bayes.categoricalnb method)": [[802, "sklearn.naive_bayes.CategoricalNB.set_partial_fit_request"]], "set_score_request() (sklearn.naive_bayes.categoricalnb method)": [[802, "sklearn.naive_bayes.CategoricalNB.set_score_request"]], "complementnb (class in sklearn.naive_bayes)": [[803, "sklearn.naive_bayes.ComplementNB"]], "fit() (sklearn.naive_bayes.complementnb method)": [[803, "sklearn.naive_bayes.ComplementNB.fit"]], "get_metadata_routing() (sklearn.naive_bayes.complementnb method)": [[803, "sklearn.naive_bayes.ComplementNB.get_metadata_routing"]], "get_params() (sklearn.naive_bayes.complementnb method)": [[803, "sklearn.naive_bayes.ComplementNB.get_params"]], "partial_fit() (sklearn.naive_bayes.complementnb method)": [[803, "sklearn.naive_bayes.ComplementNB.partial_fit"]], "predict() (sklearn.naive_bayes.complementnb method)": [[803, "sklearn.naive_bayes.ComplementNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.complementnb method)": [[803, "sklearn.naive_bayes.ComplementNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.complementnb method)": [[803, "sklearn.naive_bayes.ComplementNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.complementnb method)": [[803, "sklearn.naive_bayes.ComplementNB.predict_proba"]], "score() (sklearn.naive_bayes.complementnb method)": [[803, "sklearn.naive_bayes.ComplementNB.score"]], "set_fit_request() (sklearn.naive_bayes.complementnb method)": [[803, "sklearn.naive_bayes.ComplementNB.set_fit_request"]], "set_params() (sklearn.naive_bayes.complementnb method)": [[803, "sklearn.naive_bayes.ComplementNB.set_params"]], "set_partial_fit_request() (sklearn.naive_bayes.complementnb method)": [[803, "sklearn.naive_bayes.ComplementNB.set_partial_fit_request"]], "set_score_request() (sklearn.naive_bayes.complementnb method)": [[803, "sklearn.naive_bayes.ComplementNB.set_score_request"]], "gaussiannb (class in sklearn.naive_bayes)": [[804, "sklearn.naive_bayes.GaussianNB"]], "fit() (sklearn.naive_bayes.gaussiannb method)": [[804, "sklearn.naive_bayes.GaussianNB.fit"]], "get_metadata_routing() (sklearn.naive_bayes.gaussiannb method)": [[804, "sklearn.naive_bayes.GaussianNB.get_metadata_routing"]], "get_params() (sklearn.naive_bayes.gaussiannb method)": [[804, "sklearn.naive_bayes.GaussianNB.get_params"]], "partial_fit() (sklearn.naive_bayes.gaussiannb method)": [[804, "sklearn.naive_bayes.GaussianNB.partial_fit"]], "predict() (sklearn.naive_bayes.gaussiannb method)": [[804, "sklearn.naive_bayes.GaussianNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.gaussiannb method)": [[804, "sklearn.naive_bayes.GaussianNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.gaussiannb method)": [[804, "sklearn.naive_bayes.GaussianNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.gaussiannb method)": [[804, "sklearn.naive_bayes.GaussianNB.predict_proba"]], "score() (sklearn.naive_bayes.gaussiannb method)": [[804, "sklearn.naive_bayes.GaussianNB.score"]], "set_fit_request() (sklearn.naive_bayes.gaussiannb method)": [[804, "sklearn.naive_bayes.GaussianNB.set_fit_request"]], "set_params() (sklearn.naive_bayes.gaussiannb method)": [[804, "sklearn.naive_bayes.GaussianNB.set_params"]], "set_partial_fit_request() (sklearn.naive_bayes.gaussiannb method)": [[804, "sklearn.naive_bayes.GaussianNB.set_partial_fit_request"]], "set_score_request() (sklearn.naive_bayes.gaussiannb method)": [[804, "sklearn.naive_bayes.GaussianNB.set_score_request"]], "multinomialnb (class in sklearn.naive_bayes)": [[805, "sklearn.naive_bayes.MultinomialNB"]], "fit() (sklearn.naive_bayes.multinomialnb method)": [[805, "sklearn.naive_bayes.MultinomialNB.fit"]], "get_metadata_routing() (sklearn.naive_bayes.multinomialnb method)": [[805, "sklearn.naive_bayes.MultinomialNB.get_metadata_routing"]], "get_params() (sklearn.naive_bayes.multinomialnb method)": [[805, "sklearn.naive_bayes.MultinomialNB.get_params"]], "partial_fit() (sklearn.naive_bayes.multinomialnb method)": [[805, "sklearn.naive_bayes.MultinomialNB.partial_fit"]], "predict() (sklearn.naive_bayes.multinomialnb method)": [[805, "sklearn.naive_bayes.MultinomialNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.multinomialnb method)": [[805, "sklearn.naive_bayes.MultinomialNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.multinomialnb method)": [[805, "sklearn.naive_bayes.MultinomialNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.multinomialnb method)": [[805, "sklearn.naive_bayes.MultinomialNB.predict_proba"]], "score() (sklearn.naive_bayes.multinomialnb method)": [[805, "sklearn.naive_bayes.MultinomialNB.score"]], "set_fit_request() (sklearn.naive_bayes.multinomialnb method)": [[805, "sklearn.naive_bayes.MultinomialNB.set_fit_request"]], "set_params() (sklearn.naive_bayes.multinomialnb method)": [[805, "sklearn.naive_bayes.MultinomialNB.set_params"]], "set_partial_fit_request() (sklearn.naive_bayes.multinomialnb method)": [[805, "sklearn.naive_bayes.MultinomialNB.set_partial_fit_request"]], "set_score_request() (sklearn.naive_bayes.multinomialnb method)": [[805, "sklearn.naive_bayes.MultinomialNB.set_score_request"]], "balltree (class in sklearn.neighbors)": [[806, "sklearn.neighbors.BallTree"]], "get_arrays() (sklearn.neighbors.balltree method)": [[806, "sklearn.neighbors.BallTree.get_arrays"]], "get_n_calls() (sklearn.neighbors.balltree method)": [[806, "sklearn.neighbors.BallTree.get_n_calls"]], "get_tree_stats() (sklearn.neighbors.balltree method)": [[806, "sklearn.neighbors.BallTree.get_tree_stats"]], "kernel_density() (sklearn.neighbors.balltree method)": [[806, "sklearn.neighbors.BallTree.kernel_density"]], "query() (sklearn.neighbors.balltree method)": [[806, "sklearn.neighbors.BallTree.query"]], "query_radius() (sklearn.neighbors.balltree method)": [[806, "sklearn.neighbors.BallTree.query_radius"]], "reset_n_calls() (sklearn.neighbors.balltree method)": [[806, "sklearn.neighbors.BallTree.reset_n_calls"]], "two_point_correlation() (sklearn.neighbors.balltree method)": [[806, "sklearn.neighbors.BallTree.two_point_correlation"]], "kdtree (class in sklearn.neighbors)": [[807, "sklearn.neighbors.KDTree"]], "get_arrays() (sklearn.neighbors.kdtree method)": [[807, "sklearn.neighbors.KDTree.get_arrays"]], "get_n_calls() (sklearn.neighbors.kdtree method)": [[807, "sklearn.neighbors.KDTree.get_n_calls"]], "get_tree_stats() (sklearn.neighbors.kdtree method)": [[807, "sklearn.neighbors.KDTree.get_tree_stats"]], "kernel_density() (sklearn.neighbors.kdtree method)": [[807, "sklearn.neighbors.KDTree.kernel_density"]], "query() (sklearn.neighbors.kdtree method)": [[807, "sklearn.neighbors.KDTree.query"]], "query_radius() (sklearn.neighbors.kdtree method)": [[807, "sklearn.neighbors.KDTree.query_radius"]], "reset_n_calls() (sklearn.neighbors.kdtree method)": [[807, "sklearn.neighbors.KDTree.reset_n_calls"]], "two_point_correlation() (sklearn.neighbors.kdtree method)": [[807, "sklearn.neighbors.KDTree.two_point_correlation"]], "kneighborsclassifier (class in sklearn.neighbors)": [[808, "sklearn.neighbors.KNeighborsClassifier"]], "fit() (sklearn.neighbors.kneighborsclassifier method)": [[808, "sklearn.neighbors.KNeighborsClassifier.fit"]], "get_metadata_routing() (sklearn.neighbors.kneighborsclassifier method)": [[808, "sklearn.neighbors.KNeighborsClassifier.get_metadata_routing"]], "get_params() (sklearn.neighbors.kneighborsclassifier method)": [[808, "sklearn.neighbors.KNeighborsClassifier.get_params"]], "kneighbors() (sklearn.neighbors.kneighborsclassifier method)": [[808, "sklearn.neighbors.KNeighborsClassifier.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.kneighborsclassifier method)": [[808, "sklearn.neighbors.KNeighborsClassifier.kneighbors_graph"]], "predict() (sklearn.neighbors.kneighborsclassifier method)": [[808, "sklearn.neighbors.KNeighborsClassifier.predict"]], "predict_proba() (sklearn.neighbors.kneighborsclassifier method)": [[808, "sklearn.neighbors.KNeighborsClassifier.predict_proba"]], "score() (sklearn.neighbors.kneighborsclassifier method)": [[808, "sklearn.neighbors.KNeighborsClassifier.score"]], "set_params() (sklearn.neighbors.kneighborsclassifier method)": [[808, "sklearn.neighbors.KNeighborsClassifier.set_params"]], "set_score_request() (sklearn.neighbors.kneighborsclassifier method)": [[808, "sklearn.neighbors.KNeighborsClassifier.set_score_request"]], "kneighborsregressor (class in sklearn.neighbors)": [[809, "sklearn.neighbors.KNeighborsRegressor"]], "fit() (sklearn.neighbors.kneighborsregressor method)": [[809, "sklearn.neighbors.KNeighborsRegressor.fit"]], "get_metadata_routing() (sklearn.neighbors.kneighborsregressor method)": [[809, "sklearn.neighbors.KNeighborsRegressor.get_metadata_routing"]], "get_params() (sklearn.neighbors.kneighborsregressor method)": [[809, "sklearn.neighbors.KNeighborsRegressor.get_params"]], "kneighbors() (sklearn.neighbors.kneighborsregressor method)": [[809, "sklearn.neighbors.KNeighborsRegressor.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.kneighborsregressor method)": [[809, "sklearn.neighbors.KNeighborsRegressor.kneighbors_graph"]], "predict() (sklearn.neighbors.kneighborsregressor method)": [[809, "sklearn.neighbors.KNeighborsRegressor.predict"]], "score() (sklearn.neighbors.kneighborsregressor method)": [[809, "sklearn.neighbors.KNeighborsRegressor.score"]], "set_params() (sklearn.neighbors.kneighborsregressor method)": [[809, "sklearn.neighbors.KNeighborsRegressor.set_params"]], "set_score_request() (sklearn.neighbors.kneighborsregressor method)": [[809, "sklearn.neighbors.KNeighborsRegressor.set_score_request"]], "kneighborstransformer (class in sklearn.neighbors)": [[810, "sklearn.neighbors.KNeighborsTransformer"]], "fit() (sklearn.neighbors.kneighborstransformer method)": [[810, "sklearn.neighbors.KNeighborsTransformer.fit"]], "fit_transform() (sklearn.neighbors.kneighborstransformer method)": [[810, "sklearn.neighbors.KNeighborsTransformer.fit_transform"]], "get_feature_names_out() (sklearn.neighbors.kneighborstransformer method)": [[810, "sklearn.neighbors.KNeighborsTransformer.get_feature_names_out"]], "get_metadata_routing() (sklearn.neighbors.kneighborstransformer method)": [[810, "sklearn.neighbors.KNeighborsTransformer.get_metadata_routing"]], "get_params() (sklearn.neighbors.kneighborstransformer method)": [[810, "sklearn.neighbors.KNeighborsTransformer.get_params"]], "kneighbors() (sklearn.neighbors.kneighborstransformer method)": [[810, "sklearn.neighbors.KNeighborsTransformer.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.kneighborstransformer method)": [[810, "sklearn.neighbors.KNeighborsTransformer.kneighbors_graph"]], "set_output() (sklearn.neighbors.kneighborstransformer method)": [[810, "sklearn.neighbors.KNeighborsTransformer.set_output"]], "set_params() (sklearn.neighbors.kneighborstransformer method)": [[810, "sklearn.neighbors.KNeighborsTransformer.set_params"]], "transform() (sklearn.neighbors.kneighborstransformer method)": [[810, "sklearn.neighbors.KNeighborsTransformer.transform"]], "kerneldensity (class in sklearn.neighbors)": [[811, "sklearn.neighbors.KernelDensity"]], "fit() (sklearn.neighbors.kerneldensity method)": [[811, "sklearn.neighbors.KernelDensity.fit"]], "get_metadata_routing() (sklearn.neighbors.kerneldensity method)": [[811, "sklearn.neighbors.KernelDensity.get_metadata_routing"]], "get_params() (sklearn.neighbors.kerneldensity method)": [[811, "sklearn.neighbors.KernelDensity.get_params"]], "sample() (sklearn.neighbors.kerneldensity method)": [[811, "sklearn.neighbors.KernelDensity.sample"]], "score() (sklearn.neighbors.kerneldensity method)": [[811, "sklearn.neighbors.KernelDensity.score"]], "score_samples() (sklearn.neighbors.kerneldensity method)": [[811, "sklearn.neighbors.KernelDensity.score_samples"]], "set_fit_request() (sklearn.neighbors.kerneldensity method)": [[811, "sklearn.neighbors.KernelDensity.set_fit_request"]], "set_params() (sklearn.neighbors.kerneldensity method)": [[811, "sklearn.neighbors.KernelDensity.set_params"]], "localoutlierfactor (class in sklearn.neighbors)": [[812, "sklearn.neighbors.LocalOutlierFactor"]], "decision_function() (sklearn.neighbors.localoutlierfactor method)": [[812, "sklearn.neighbors.LocalOutlierFactor.decision_function"]], "fit() (sklearn.neighbors.localoutlierfactor method)": [[812, "sklearn.neighbors.LocalOutlierFactor.fit"]], "fit_predict() (sklearn.neighbors.localoutlierfactor method)": [[812, "sklearn.neighbors.LocalOutlierFactor.fit_predict"]], "get_metadata_routing() (sklearn.neighbors.localoutlierfactor method)": [[812, "sklearn.neighbors.LocalOutlierFactor.get_metadata_routing"]], "get_params() (sklearn.neighbors.localoutlierfactor method)": [[812, "sklearn.neighbors.LocalOutlierFactor.get_params"]], "kneighbors() (sklearn.neighbors.localoutlierfactor method)": [[812, "sklearn.neighbors.LocalOutlierFactor.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.localoutlierfactor method)": [[812, "sklearn.neighbors.LocalOutlierFactor.kneighbors_graph"]], "predict() (sklearn.neighbors.localoutlierfactor method)": [[812, "sklearn.neighbors.LocalOutlierFactor.predict"]], "score_samples() (sklearn.neighbors.localoutlierfactor method)": [[812, "sklearn.neighbors.LocalOutlierFactor.score_samples"]], "set_params() (sklearn.neighbors.localoutlierfactor method)": [[812, "sklearn.neighbors.LocalOutlierFactor.set_params"]], "nearestcentroid (class in sklearn.neighbors)": [[813, "sklearn.neighbors.NearestCentroid"]], "fit() (sklearn.neighbors.nearestcentroid method)": [[813, "sklearn.neighbors.NearestCentroid.fit"]], "get_metadata_routing() (sklearn.neighbors.nearestcentroid method)": [[813, "sklearn.neighbors.NearestCentroid.get_metadata_routing"]], "get_params() (sklearn.neighbors.nearestcentroid method)": [[813, "sklearn.neighbors.NearestCentroid.get_params"]], "predict() (sklearn.neighbors.nearestcentroid method)": [[813, "sklearn.neighbors.NearestCentroid.predict"]], "score() (sklearn.neighbors.nearestcentroid method)": [[813, "sklearn.neighbors.NearestCentroid.score"]], "set_params() (sklearn.neighbors.nearestcentroid method)": [[813, "sklearn.neighbors.NearestCentroid.set_params"]], "set_score_request() (sklearn.neighbors.nearestcentroid method)": [[813, "sklearn.neighbors.NearestCentroid.set_score_request"]], "nearestneighbors (class in sklearn.neighbors)": [[814, "sklearn.neighbors.NearestNeighbors"]], "fit() (sklearn.neighbors.nearestneighbors method)": [[814, "sklearn.neighbors.NearestNeighbors.fit"]], "get_metadata_routing() (sklearn.neighbors.nearestneighbors method)": [[814, "sklearn.neighbors.NearestNeighbors.get_metadata_routing"]], "get_params() (sklearn.neighbors.nearestneighbors method)": [[814, "sklearn.neighbors.NearestNeighbors.get_params"]], "kneighbors() (sklearn.neighbors.nearestneighbors method)": [[814, "sklearn.neighbors.NearestNeighbors.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.nearestneighbors method)": [[814, "sklearn.neighbors.NearestNeighbors.kneighbors_graph"]], "radius_neighbors() (sklearn.neighbors.nearestneighbors method)": [[814, "sklearn.neighbors.NearestNeighbors.radius_neighbors"]], "radius_neighbors_graph() (sklearn.neighbors.nearestneighbors method)": [[814, "sklearn.neighbors.NearestNeighbors.radius_neighbors_graph"]], "set_params() (sklearn.neighbors.nearestneighbors method)": [[814, "sklearn.neighbors.NearestNeighbors.set_params"]], "neighborhoodcomponentsanalysis (class in sklearn.neighbors)": [[815, "sklearn.neighbors.NeighborhoodComponentsAnalysis"]], "fit() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[815, "sklearn.neighbors.NeighborhoodComponentsAnalysis.fit"]], "fit_transform() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[815, "sklearn.neighbors.NeighborhoodComponentsAnalysis.fit_transform"]], "get_feature_names_out() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[815, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_feature_names_out"]], "get_metadata_routing() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[815, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_metadata_routing"]], "get_params() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[815, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_params"]], "set_output() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[815, "sklearn.neighbors.NeighborhoodComponentsAnalysis.set_output"]], "set_params() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[815, "sklearn.neighbors.NeighborhoodComponentsAnalysis.set_params"]], "transform() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[815, "sklearn.neighbors.NeighborhoodComponentsAnalysis.transform"]], "radiusneighborsclassifier (class in sklearn.neighbors)": [[816, "sklearn.neighbors.RadiusNeighborsClassifier"]], "fit() (sklearn.neighbors.radiusneighborsclassifier method)": [[816, "sklearn.neighbors.RadiusNeighborsClassifier.fit"]], "get_metadata_routing() (sklearn.neighbors.radiusneighborsclassifier method)": [[816, "sklearn.neighbors.RadiusNeighborsClassifier.get_metadata_routing"]], "get_params() (sklearn.neighbors.radiusneighborsclassifier method)": [[816, "sklearn.neighbors.RadiusNeighborsClassifier.get_params"]], "predict() (sklearn.neighbors.radiusneighborsclassifier method)": [[816, "sklearn.neighbors.RadiusNeighborsClassifier.predict"]], "predict_proba() (sklearn.neighbors.radiusneighborsclassifier method)": [[816, "sklearn.neighbors.RadiusNeighborsClassifier.predict_proba"]], "radius_neighbors() (sklearn.neighbors.radiusneighborsclassifier method)": [[816, "sklearn.neighbors.RadiusNeighborsClassifier.radius_neighbors"]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborsclassifier method)": [[816, "sklearn.neighbors.RadiusNeighborsClassifier.radius_neighbors_graph"]], "score() (sklearn.neighbors.radiusneighborsclassifier method)": [[816, "sklearn.neighbors.RadiusNeighborsClassifier.score"]], "set_params() (sklearn.neighbors.radiusneighborsclassifier method)": [[816, "sklearn.neighbors.RadiusNeighborsClassifier.set_params"]], "set_score_request() (sklearn.neighbors.radiusneighborsclassifier method)": [[816, "sklearn.neighbors.RadiusNeighborsClassifier.set_score_request"]], "radiusneighborsregressor (class in sklearn.neighbors)": [[817, "sklearn.neighbors.RadiusNeighborsRegressor"]], "fit() (sklearn.neighbors.radiusneighborsregressor method)": [[817, "sklearn.neighbors.RadiusNeighborsRegressor.fit"]], "get_metadata_routing() (sklearn.neighbors.radiusneighborsregressor method)": [[817, "sklearn.neighbors.RadiusNeighborsRegressor.get_metadata_routing"]], "get_params() (sklearn.neighbors.radiusneighborsregressor method)": [[817, "sklearn.neighbors.RadiusNeighborsRegressor.get_params"]], "predict() (sklearn.neighbors.radiusneighborsregressor method)": [[817, "sklearn.neighbors.RadiusNeighborsRegressor.predict"]], "radius_neighbors() (sklearn.neighbors.radiusneighborsregressor method)": [[817, "sklearn.neighbors.RadiusNeighborsRegressor.radius_neighbors"]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborsregressor method)": [[817, "sklearn.neighbors.RadiusNeighborsRegressor.radius_neighbors_graph"]], "score() (sklearn.neighbors.radiusneighborsregressor method)": [[817, "sklearn.neighbors.RadiusNeighborsRegressor.score"]], "set_params() (sklearn.neighbors.radiusneighborsregressor method)": [[817, "sklearn.neighbors.RadiusNeighborsRegressor.set_params"]], "set_score_request() (sklearn.neighbors.radiusneighborsregressor method)": [[817, "sklearn.neighbors.RadiusNeighborsRegressor.set_score_request"]], "radiusneighborstransformer (class in sklearn.neighbors)": [[818, "sklearn.neighbors.RadiusNeighborsTransformer"]], "fit() (sklearn.neighbors.radiusneighborstransformer method)": [[818, "sklearn.neighbors.RadiusNeighborsTransformer.fit"]], "fit_transform() (sklearn.neighbors.radiusneighborstransformer method)": [[818, "sklearn.neighbors.RadiusNeighborsTransformer.fit_transform"]], "get_feature_names_out() (sklearn.neighbors.radiusneighborstransformer method)": [[818, "sklearn.neighbors.RadiusNeighborsTransformer.get_feature_names_out"]], "get_metadata_routing() (sklearn.neighbors.radiusneighborstransformer method)": [[818, "sklearn.neighbors.RadiusNeighborsTransformer.get_metadata_routing"]], "get_params() (sklearn.neighbors.radiusneighborstransformer method)": [[818, "sklearn.neighbors.RadiusNeighborsTransformer.get_params"]], "radius_neighbors() (sklearn.neighbors.radiusneighborstransformer method)": [[818, "sklearn.neighbors.RadiusNeighborsTransformer.radius_neighbors"]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborstransformer method)": [[818, "sklearn.neighbors.RadiusNeighborsTransformer.radius_neighbors_graph"]], "set_output() (sklearn.neighbors.radiusneighborstransformer method)": [[818, "sklearn.neighbors.RadiusNeighborsTransformer.set_output"]], "set_params() (sklearn.neighbors.radiusneighborstransformer method)": [[818, "sklearn.neighbors.RadiusNeighborsTransformer.set_params"]], "transform() (sklearn.neighbors.radiusneighborstransformer method)": [[818, "sklearn.neighbors.RadiusNeighborsTransformer.transform"]], "kneighbors_graph() (in module sklearn.neighbors)": [[819, "sklearn.neighbors.kneighbors_graph"]], "radius_neighbors_graph() (in module sklearn.neighbors)": [[820, "sklearn.neighbors.radius_neighbors_graph"]], "sort_graph_by_row_values() (in module sklearn.neighbors)": [[821, "sklearn.neighbors.sort_graph_by_row_values"]], "bernoullirbm (class in sklearn.neural_network)": [[822, "sklearn.neural_network.BernoulliRBM"]], "fit() (sklearn.neural_network.bernoullirbm method)": [[822, "sklearn.neural_network.BernoulliRBM.fit"]], "fit_transform() (sklearn.neural_network.bernoullirbm method)": [[822, "sklearn.neural_network.BernoulliRBM.fit_transform"]], "get_feature_names_out() (sklearn.neural_network.bernoullirbm method)": [[822, "sklearn.neural_network.BernoulliRBM.get_feature_names_out"]], "get_metadata_routing() (sklearn.neural_network.bernoullirbm method)": [[822, "sklearn.neural_network.BernoulliRBM.get_metadata_routing"]], "get_params() (sklearn.neural_network.bernoullirbm method)": [[822, "sklearn.neural_network.BernoulliRBM.get_params"]], "gibbs() (sklearn.neural_network.bernoullirbm method)": [[822, "sklearn.neural_network.BernoulliRBM.gibbs"]], "partial_fit() (sklearn.neural_network.bernoullirbm method)": [[822, "sklearn.neural_network.BernoulliRBM.partial_fit"]], "score_samples() (sklearn.neural_network.bernoullirbm method)": [[822, "sklearn.neural_network.BernoulliRBM.score_samples"]], "set_output() (sklearn.neural_network.bernoullirbm method)": [[822, "sklearn.neural_network.BernoulliRBM.set_output"]], "set_params() (sklearn.neural_network.bernoullirbm method)": [[822, "sklearn.neural_network.BernoulliRBM.set_params"]], "transform() (sklearn.neural_network.bernoullirbm method)": [[822, "sklearn.neural_network.BernoulliRBM.transform"]], "mlpclassifier (class in sklearn.neural_network)": [[823, "sklearn.neural_network.MLPClassifier"]], "fit() (sklearn.neural_network.mlpclassifier method)": [[823, "sklearn.neural_network.MLPClassifier.fit"]], "get_metadata_routing() (sklearn.neural_network.mlpclassifier method)": [[823, "sklearn.neural_network.MLPClassifier.get_metadata_routing"]], "get_params() (sklearn.neural_network.mlpclassifier method)": [[823, "sklearn.neural_network.MLPClassifier.get_params"]], "partial_fit() (sklearn.neural_network.mlpclassifier method)": [[823, "sklearn.neural_network.MLPClassifier.partial_fit"]], "predict() (sklearn.neural_network.mlpclassifier method)": [[823, "sklearn.neural_network.MLPClassifier.predict"]], "predict_log_proba() (sklearn.neural_network.mlpclassifier method)": [[823, "sklearn.neural_network.MLPClassifier.predict_log_proba"]], "predict_proba() (sklearn.neural_network.mlpclassifier method)": [[823, "sklearn.neural_network.MLPClassifier.predict_proba"]], "score() (sklearn.neural_network.mlpclassifier method)": [[823, "sklearn.neural_network.MLPClassifier.score"]], "set_params() (sklearn.neural_network.mlpclassifier method)": [[823, "sklearn.neural_network.MLPClassifier.set_params"]], "set_partial_fit_request() (sklearn.neural_network.mlpclassifier method)": [[823, "sklearn.neural_network.MLPClassifier.set_partial_fit_request"]], "set_score_request() (sklearn.neural_network.mlpclassifier method)": [[823, "sklearn.neural_network.MLPClassifier.set_score_request"]], "mlpregressor (class in sklearn.neural_network)": [[824, "sklearn.neural_network.MLPRegressor"]], "fit() (sklearn.neural_network.mlpregressor method)": [[824, "sklearn.neural_network.MLPRegressor.fit"]], "get_metadata_routing() (sklearn.neural_network.mlpregressor method)": [[824, "sklearn.neural_network.MLPRegressor.get_metadata_routing"]], "get_params() (sklearn.neural_network.mlpregressor method)": [[824, "sklearn.neural_network.MLPRegressor.get_params"]], "partial_fit() (sklearn.neural_network.mlpregressor method)": [[824, "sklearn.neural_network.MLPRegressor.partial_fit"]], "predict() (sklearn.neural_network.mlpregressor method)": [[824, "sklearn.neural_network.MLPRegressor.predict"]], "score() (sklearn.neural_network.mlpregressor method)": [[824, "sklearn.neural_network.MLPRegressor.score"]], "set_params() (sklearn.neural_network.mlpregressor method)": [[824, "sklearn.neural_network.MLPRegressor.set_params"]], "set_score_request() (sklearn.neural_network.mlpregressor method)": [[824, "sklearn.neural_network.MLPRegressor.set_score_request"]], "featureunion (class in sklearn.pipeline)": [[825, "sklearn.pipeline.FeatureUnion"]], "feature_names_in_ (sklearn.pipeline.featureunion property)": [[825, "sklearn.pipeline.FeatureUnion.feature_names_in_"]], "fit() (sklearn.pipeline.featureunion method)": [[825, "sklearn.pipeline.FeatureUnion.fit"]], "fit_transform() (sklearn.pipeline.featureunion method)": [[825, "sklearn.pipeline.FeatureUnion.fit_transform"]], "get_feature_names_out() (sklearn.pipeline.featureunion method)": [[825, "sklearn.pipeline.FeatureUnion.get_feature_names_out"]], "get_metadata_routing() (sklearn.pipeline.featureunion method)": [[825, "sklearn.pipeline.FeatureUnion.get_metadata_routing"]], "get_params() (sklearn.pipeline.featureunion method)": [[825, "sklearn.pipeline.FeatureUnion.get_params"]], "n_features_in_ (sklearn.pipeline.featureunion property)": [[825, "sklearn.pipeline.FeatureUnion.n_features_in_"]], "set_output() (sklearn.pipeline.featureunion method)": [[825, "sklearn.pipeline.FeatureUnion.set_output"]], "set_params() (sklearn.pipeline.featureunion method)": [[825, "sklearn.pipeline.FeatureUnion.set_params"]], "transform() (sklearn.pipeline.featureunion method)": [[825, "sklearn.pipeline.FeatureUnion.transform"]], "pipeline (class in sklearn.pipeline)": [[826, "sklearn.pipeline.Pipeline"]], "classes_ (sklearn.pipeline.pipeline property)": [[826, "sklearn.pipeline.Pipeline.classes_"]], "decision_function() (sklearn.pipeline.pipeline method)": [[826, "sklearn.pipeline.Pipeline.decision_function"]], "feature_names_in_ (sklearn.pipeline.pipeline property)": [[826, "sklearn.pipeline.Pipeline.feature_names_in_"]], "fit() (sklearn.pipeline.pipeline method)": [[826, "sklearn.pipeline.Pipeline.fit"]], "fit_predict() (sklearn.pipeline.pipeline method)": [[826, "sklearn.pipeline.Pipeline.fit_predict"]], "fit_transform() (sklearn.pipeline.pipeline method)": [[826, "sklearn.pipeline.Pipeline.fit_transform"]], "get_feature_names_out() (sklearn.pipeline.pipeline method)": [[826, "sklearn.pipeline.Pipeline.get_feature_names_out"]], "get_metadata_routing() (sklearn.pipeline.pipeline method)": [[826, "sklearn.pipeline.Pipeline.get_metadata_routing"]], "get_params() (sklearn.pipeline.pipeline method)": [[826, "sklearn.pipeline.Pipeline.get_params"]], "inverse_transform() (sklearn.pipeline.pipeline method)": [[826, "sklearn.pipeline.Pipeline.inverse_transform"]], "n_features_in_ (sklearn.pipeline.pipeline property)": [[826, "sklearn.pipeline.Pipeline.n_features_in_"]], "named_steps (sklearn.pipeline.pipeline property)": [[826, "sklearn.pipeline.Pipeline.named_steps"]], "predict() (sklearn.pipeline.pipeline method)": [[826, "sklearn.pipeline.Pipeline.predict"]], "predict_log_proba() (sklearn.pipeline.pipeline method)": [[826, "sklearn.pipeline.Pipeline.predict_log_proba"]], "predict_proba() (sklearn.pipeline.pipeline method)": [[826, "sklearn.pipeline.Pipeline.predict_proba"]], "score() (sklearn.pipeline.pipeline method)": [[826, "sklearn.pipeline.Pipeline.score"]], "score_samples() (sklearn.pipeline.pipeline method)": [[826, "sklearn.pipeline.Pipeline.score_samples"]], "set_output() (sklearn.pipeline.pipeline method)": [[826, "sklearn.pipeline.Pipeline.set_output"]], "set_params() (sklearn.pipeline.pipeline method)": [[826, "sklearn.pipeline.Pipeline.set_params"]], "set_score_request() (sklearn.pipeline.pipeline method)": [[826, "sklearn.pipeline.Pipeline.set_score_request"]], "transform() (sklearn.pipeline.pipeline method)": [[826, "sklearn.pipeline.Pipeline.transform"]], "make_pipeline() (in module sklearn.pipeline)": [[827, "sklearn.pipeline.make_pipeline"]], "make_union() (in module sklearn.pipeline)": [[828, "sklearn.pipeline.make_union"]], "binarizer (class in sklearn.preprocessing)": [[829, "sklearn.preprocessing.Binarizer"]], "fit() (sklearn.preprocessing.binarizer method)": [[829, "sklearn.preprocessing.Binarizer.fit"]], "fit_transform() (sklearn.preprocessing.binarizer method)": [[829, "sklearn.preprocessing.Binarizer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.binarizer method)": [[829, "sklearn.preprocessing.Binarizer.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.binarizer method)": [[829, "sklearn.preprocessing.Binarizer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.binarizer method)": [[829, "sklearn.preprocessing.Binarizer.get_params"]], "set_output() (sklearn.preprocessing.binarizer method)": [[829, "sklearn.preprocessing.Binarizer.set_output"]], "set_params() (sklearn.preprocessing.binarizer method)": [[829, "sklearn.preprocessing.Binarizer.set_params"]], "set_transform_request() (sklearn.preprocessing.binarizer method)": [[829, "sklearn.preprocessing.Binarizer.set_transform_request"]], "transform() (sklearn.preprocessing.binarizer method)": [[829, "sklearn.preprocessing.Binarizer.transform"]], "functiontransformer (class in sklearn.preprocessing)": [[830, "sklearn.preprocessing.FunctionTransformer"]], "fit() (sklearn.preprocessing.functiontransformer method)": [[830, "sklearn.preprocessing.FunctionTransformer.fit"]], "fit_transform() (sklearn.preprocessing.functiontransformer method)": [[830, "sklearn.preprocessing.FunctionTransformer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.functiontransformer method)": [[830, "sklearn.preprocessing.FunctionTransformer.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.functiontransformer method)": [[830, "sklearn.preprocessing.FunctionTransformer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.functiontransformer method)": [[830, "sklearn.preprocessing.FunctionTransformer.get_params"]], "inverse_transform() (sklearn.preprocessing.functiontransformer method)": [[830, "sklearn.preprocessing.FunctionTransformer.inverse_transform"]], "set_output() (sklearn.preprocessing.functiontransformer method)": [[830, "sklearn.preprocessing.FunctionTransformer.set_output"]], "set_params() (sklearn.preprocessing.functiontransformer method)": [[830, "sklearn.preprocessing.FunctionTransformer.set_params"]], "transform() (sklearn.preprocessing.functiontransformer method)": [[830, "sklearn.preprocessing.FunctionTransformer.transform"]], "kbinsdiscretizer (class in sklearn.preprocessing)": [[831, "sklearn.preprocessing.KBinsDiscretizer"]], "fit() (sklearn.preprocessing.kbinsdiscretizer method)": [[831, "sklearn.preprocessing.KBinsDiscretizer.fit"]], "fit_transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[831, "sklearn.preprocessing.KBinsDiscretizer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.kbinsdiscretizer method)": [[831, "sklearn.preprocessing.KBinsDiscretizer.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.kbinsdiscretizer method)": [[831, "sklearn.preprocessing.KBinsDiscretizer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.kbinsdiscretizer method)": [[831, "sklearn.preprocessing.KBinsDiscretizer.get_params"]], "inverse_transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[831, "sklearn.preprocessing.KBinsDiscretizer.inverse_transform"]], "set_fit_request() (sklearn.preprocessing.kbinsdiscretizer method)": [[831, "sklearn.preprocessing.KBinsDiscretizer.set_fit_request"]], "set_output() (sklearn.preprocessing.kbinsdiscretizer method)": [[831, "sklearn.preprocessing.KBinsDiscretizer.set_output"]], "set_params() (sklearn.preprocessing.kbinsdiscretizer method)": [[831, "sklearn.preprocessing.KBinsDiscretizer.set_params"]], "transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[831, "sklearn.preprocessing.KBinsDiscretizer.transform"]], "kernelcenterer (class in sklearn.preprocessing)": [[832, "sklearn.preprocessing.KernelCenterer"]], "fit() (sklearn.preprocessing.kernelcenterer method)": [[832, "sklearn.preprocessing.KernelCenterer.fit"]], "fit_transform() (sklearn.preprocessing.kernelcenterer method)": [[832, "sklearn.preprocessing.KernelCenterer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.kernelcenterer method)": [[832, "sklearn.preprocessing.KernelCenterer.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.kernelcenterer method)": [[832, "sklearn.preprocessing.KernelCenterer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.kernelcenterer method)": [[832, "sklearn.preprocessing.KernelCenterer.get_params"]], "set_fit_request() (sklearn.preprocessing.kernelcenterer method)": [[832, "sklearn.preprocessing.KernelCenterer.set_fit_request"]], "set_output() (sklearn.preprocessing.kernelcenterer method)": [[832, "sklearn.preprocessing.KernelCenterer.set_output"]], "set_params() (sklearn.preprocessing.kernelcenterer method)": [[832, "sklearn.preprocessing.KernelCenterer.set_params"]], "set_transform_request() (sklearn.preprocessing.kernelcenterer method)": [[832, "sklearn.preprocessing.KernelCenterer.set_transform_request"]], "transform() (sklearn.preprocessing.kernelcenterer method)": [[832, "sklearn.preprocessing.KernelCenterer.transform"]], "labelbinarizer (class in sklearn.preprocessing)": [[833, "sklearn.preprocessing.LabelBinarizer"]], "fit() (sklearn.preprocessing.labelbinarizer method)": [[833, "sklearn.preprocessing.LabelBinarizer.fit"]], "fit_transform() (sklearn.preprocessing.labelbinarizer method)": [[833, "sklearn.preprocessing.LabelBinarizer.fit_transform"]], "get_metadata_routing() (sklearn.preprocessing.labelbinarizer method)": [[833, "sklearn.preprocessing.LabelBinarizer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.labelbinarizer method)": [[833, "sklearn.preprocessing.LabelBinarizer.get_params"]], "inverse_transform() (sklearn.preprocessing.labelbinarizer method)": [[833, "sklearn.preprocessing.LabelBinarizer.inverse_transform"]], "set_inverse_transform_request() (sklearn.preprocessing.labelbinarizer method)": [[833, "sklearn.preprocessing.LabelBinarizer.set_inverse_transform_request"]], "set_output() (sklearn.preprocessing.labelbinarizer method)": [[833, "sklearn.preprocessing.LabelBinarizer.set_output"]], "set_params() (sklearn.preprocessing.labelbinarizer method)": [[833, "sklearn.preprocessing.LabelBinarizer.set_params"]], "transform() (sklearn.preprocessing.labelbinarizer method)": [[833, "sklearn.preprocessing.LabelBinarizer.transform"]], "labelencoder (class in sklearn.preprocessing)": [[834, "sklearn.preprocessing.LabelEncoder"]], "fit() (sklearn.preprocessing.labelencoder method)": [[834, "sklearn.preprocessing.LabelEncoder.fit"]], "fit_transform() (sklearn.preprocessing.labelencoder method)": [[834, "sklearn.preprocessing.LabelEncoder.fit_transform"]], "get_metadata_routing() (sklearn.preprocessing.labelencoder method)": [[834, "sklearn.preprocessing.LabelEncoder.get_metadata_routing"]], "get_params() (sklearn.preprocessing.labelencoder method)": [[834, "sklearn.preprocessing.LabelEncoder.get_params"]], "inverse_transform() (sklearn.preprocessing.labelencoder method)": [[834, "sklearn.preprocessing.LabelEncoder.inverse_transform"]], "set_output() (sklearn.preprocessing.labelencoder method)": [[834, "sklearn.preprocessing.LabelEncoder.set_output"]], "set_params() (sklearn.preprocessing.labelencoder method)": [[834, "sklearn.preprocessing.LabelEncoder.set_params"]], "transform() (sklearn.preprocessing.labelencoder method)": [[834, "sklearn.preprocessing.LabelEncoder.transform"]], "maxabsscaler (class in sklearn.preprocessing)": [[835, "sklearn.preprocessing.MaxAbsScaler"]], "fit() (sklearn.preprocessing.maxabsscaler method)": [[835, "sklearn.preprocessing.MaxAbsScaler.fit"]], "fit_transform() (sklearn.preprocessing.maxabsscaler method)": [[835, "sklearn.preprocessing.MaxAbsScaler.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.maxabsscaler method)": [[835, "sklearn.preprocessing.MaxAbsScaler.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.maxabsscaler method)": [[835, "sklearn.preprocessing.MaxAbsScaler.get_metadata_routing"]], "get_params() (sklearn.preprocessing.maxabsscaler method)": [[835, "sklearn.preprocessing.MaxAbsScaler.get_params"]], "inverse_transform() (sklearn.preprocessing.maxabsscaler method)": [[835, "sklearn.preprocessing.MaxAbsScaler.inverse_transform"]], "partial_fit() (sklearn.preprocessing.maxabsscaler method)": [[835, "sklearn.preprocessing.MaxAbsScaler.partial_fit"]], "set_output() (sklearn.preprocessing.maxabsscaler method)": [[835, "sklearn.preprocessing.MaxAbsScaler.set_output"]], "set_params() (sklearn.preprocessing.maxabsscaler method)": [[835, "sklearn.preprocessing.MaxAbsScaler.set_params"]], "transform() (sklearn.preprocessing.maxabsscaler method)": [[835, "sklearn.preprocessing.MaxAbsScaler.transform"]], "minmaxscaler (class in sklearn.preprocessing)": [[836, "sklearn.preprocessing.MinMaxScaler"]], "fit() (sklearn.preprocessing.minmaxscaler method)": [[836, "sklearn.preprocessing.MinMaxScaler.fit"]], "fit_transform() (sklearn.preprocessing.minmaxscaler method)": [[836, "sklearn.preprocessing.MinMaxScaler.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.minmaxscaler method)": [[836, "sklearn.preprocessing.MinMaxScaler.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.minmaxscaler method)": [[836, "sklearn.preprocessing.MinMaxScaler.get_metadata_routing"]], "get_params() (sklearn.preprocessing.minmaxscaler method)": [[836, "sklearn.preprocessing.MinMaxScaler.get_params"]], "inverse_transform() (sklearn.preprocessing.minmaxscaler method)": [[836, "sklearn.preprocessing.MinMaxScaler.inverse_transform"]], "partial_fit() (sklearn.preprocessing.minmaxscaler method)": [[836, "sklearn.preprocessing.MinMaxScaler.partial_fit"]], "set_output() (sklearn.preprocessing.minmaxscaler method)": [[836, "sklearn.preprocessing.MinMaxScaler.set_output"]], "set_params() (sklearn.preprocessing.minmaxscaler method)": [[836, "sklearn.preprocessing.MinMaxScaler.set_params"]], "transform() (sklearn.preprocessing.minmaxscaler method)": [[836, "sklearn.preprocessing.MinMaxScaler.transform"]], "multilabelbinarizer (class in sklearn.preprocessing)": [[837, "sklearn.preprocessing.MultiLabelBinarizer"]], "fit() (sklearn.preprocessing.multilabelbinarizer method)": [[837, "sklearn.preprocessing.MultiLabelBinarizer.fit"]], "fit_transform() (sklearn.preprocessing.multilabelbinarizer method)": [[837, "sklearn.preprocessing.MultiLabelBinarizer.fit_transform"]], "get_metadata_routing() (sklearn.preprocessing.multilabelbinarizer method)": [[837, "sklearn.preprocessing.MultiLabelBinarizer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.multilabelbinarizer method)": [[837, "sklearn.preprocessing.MultiLabelBinarizer.get_params"]], "inverse_transform() (sklearn.preprocessing.multilabelbinarizer method)": [[837, "sklearn.preprocessing.MultiLabelBinarizer.inverse_transform"]], "set_output() (sklearn.preprocessing.multilabelbinarizer method)": [[837, "sklearn.preprocessing.MultiLabelBinarizer.set_output"]], "set_params() (sklearn.preprocessing.multilabelbinarizer method)": [[837, "sklearn.preprocessing.MultiLabelBinarizer.set_params"]], "transform() (sklearn.preprocessing.multilabelbinarizer method)": [[837, "sklearn.preprocessing.MultiLabelBinarizer.transform"]], "normalizer (class in sklearn.preprocessing)": [[838, "sklearn.preprocessing.Normalizer"]], "fit() (sklearn.preprocessing.normalizer method)": [[838, "sklearn.preprocessing.Normalizer.fit"]], "fit_transform() (sklearn.preprocessing.normalizer method)": [[838, "sklearn.preprocessing.Normalizer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.normalizer method)": [[838, "sklearn.preprocessing.Normalizer.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.normalizer method)": [[838, "sklearn.preprocessing.Normalizer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.normalizer method)": [[838, "sklearn.preprocessing.Normalizer.get_params"]], "set_output() (sklearn.preprocessing.normalizer method)": [[838, "sklearn.preprocessing.Normalizer.set_output"]], "set_params() (sklearn.preprocessing.normalizer method)": [[838, "sklearn.preprocessing.Normalizer.set_params"]], "set_transform_request() (sklearn.preprocessing.normalizer method)": [[838, "sklearn.preprocessing.Normalizer.set_transform_request"]], "transform() (sklearn.preprocessing.normalizer method)": [[838, "sklearn.preprocessing.Normalizer.transform"]], "onehotencoder (class in sklearn.preprocessing)": [[839, "sklearn.preprocessing.OneHotEncoder"]], "fit() (sklearn.preprocessing.onehotencoder method)": [[839, "sklearn.preprocessing.OneHotEncoder.fit"]], "fit_transform() (sklearn.preprocessing.onehotencoder method)": [[839, "sklearn.preprocessing.OneHotEncoder.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.onehotencoder method)": [[839, "sklearn.preprocessing.OneHotEncoder.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.onehotencoder method)": [[839, "sklearn.preprocessing.OneHotEncoder.get_metadata_routing"]], "get_params() (sklearn.preprocessing.onehotencoder method)": [[839, "sklearn.preprocessing.OneHotEncoder.get_params"]], "infrequent_categories_ (sklearn.preprocessing.onehotencoder property)": [[839, "sklearn.preprocessing.OneHotEncoder.infrequent_categories_"]], "inverse_transform() (sklearn.preprocessing.onehotencoder method)": [[839, "sklearn.preprocessing.OneHotEncoder.inverse_transform"]], "set_output() (sklearn.preprocessing.onehotencoder method)": [[839, "sklearn.preprocessing.OneHotEncoder.set_output"]], "set_params() (sklearn.preprocessing.onehotencoder method)": [[839, "sklearn.preprocessing.OneHotEncoder.set_params"]], "transform() (sklearn.preprocessing.onehotencoder method)": [[839, "sklearn.preprocessing.OneHotEncoder.transform"]], "ordinalencoder (class in sklearn.preprocessing)": [[840, "sklearn.preprocessing.OrdinalEncoder"]], "fit() (sklearn.preprocessing.ordinalencoder method)": [[840, "sklearn.preprocessing.OrdinalEncoder.fit"]], "fit_transform() (sklearn.preprocessing.ordinalencoder method)": [[840, "sklearn.preprocessing.OrdinalEncoder.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.ordinalencoder method)": [[840, "sklearn.preprocessing.OrdinalEncoder.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.ordinalencoder method)": [[840, "sklearn.preprocessing.OrdinalEncoder.get_metadata_routing"]], "get_params() (sklearn.preprocessing.ordinalencoder method)": [[840, "sklearn.preprocessing.OrdinalEncoder.get_params"]], "infrequent_categories_ (sklearn.preprocessing.ordinalencoder property)": [[840, "sklearn.preprocessing.OrdinalEncoder.infrequent_categories_"]], "inverse_transform() (sklearn.preprocessing.ordinalencoder method)": [[840, "sklearn.preprocessing.OrdinalEncoder.inverse_transform"]], "set_output() (sklearn.preprocessing.ordinalencoder method)": [[840, "sklearn.preprocessing.OrdinalEncoder.set_output"]], "set_params() (sklearn.preprocessing.ordinalencoder method)": [[840, "sklearn.preprocessing.OrdinalEncoder.set_params"]], "transform() (sklearn.preprocessing.ordinalencoder method)": [[840, "sklearn.preprocessing.OrdinalEncoder.transform"]], "polynomialfeatures (class in sklearn.preprocessing)": [[841, "sklearn.preprocessing.PolynomialFeatures"]], "fit() (sklearn.preprocessing.polynomialfeatures method)": [[841, "sklearn.preprocessing.PolynomialFeatures.fit"]], "fit_transform() (sklearn.preprocessing.polynomialfeatures method)": [[841, "sklearn.preprocessing.PolynomialFeatures.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.polynomialfeatures method)": [[841, "sklearn.preprocessing.PolynomialFeatures.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.polynomialfeatures method)": [[841, "sklearn.preprocessing.PolynomialFeatures.get_metadata_routing"]], "get_params() (sklearn.preprocessing.polynomialfeatures method)": [[841, "sklearn.preprocessing.PolynomialFeatures.get_params"]], "powers_ (sklearn.preprocessing.polynomialfeatures property)": [[841, "sklearn.preprocessing.PolynomialFeatures.powers_"]], "set_output() (sklearn.preprocessing.polynomialfeatures method)": [[841, "sklearn.preprocessing.PolynomialFeatures.set_output"]], "set_params() (sklearn.preprocessing.polynomialfeatures method)": [[841, "sklearn.preprocessing.PolynomialFeatures.set_params"]], "transform() (sklearn.preprocessing.polynomialfeatures method)": [[841, "sklearn.preprocessing.PolynomialFeatures.transform"]], "powertransformer (class in sklearn.preprocessing)": [[842, "sklearn.preprocessing.PowerTransformer"]], "fit() (sklearn.preprocessing.powertransformer method)": [[842, "sklearn.preprocessing.PowerTransformer.fit"]], "fit_transform() (sklearn.preprocessing.powertransformer method)": [[842, "sklearn.preprocessing.PowerTransformer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.powertransformer method)": [[842, "sklearn.preprocessing.PowerTransformer.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.powertransformer method)": [[842, "sklearn.preprocessing.PowerTransformer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.powertransformer method)": [[842, "sklearn.preprocessing.PowerTransformer.get_params"]], "inverse_transform() (sklearn.preprocessing.powertransformer method)": [[842, "sklearn.preprocessing.PowerTransformer.inverse_transform"]], "set_output() (sklearn.preprocessing.powertransformer method)": [[842, "sklearn.preprocessing.PowerTransformer.set_output"]], "set_params() (sklearn.preprocessing.powertransformer method)": [[842, "sklearn.preprocessing.PowerTransformer.set_params"]], "transform() (sklearn.preprocessing.powertransformer method)": [[842, "sklearn.preprocessing.PowerTransformer.transform"]], "quantiletransformer (class in sklearn.preprocessing)": [[843, "sklearn.preprocessing.QuantileTransformer"]], "fit() (sklearn.preprocessing.quantiletransformer method)": [[843, "sklearn.preprocessing.QuantileTransformer.fit"]], "fit_transform() (sklearn.preprocessing.quantiletransformer method)": [[843, "sklearn.preprocessing.QuantileTransformer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.quantiletransformer method)": [[843, "sklearn.preprocessing.QuantileTransformer.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.quantiletransformer method)": [[843, "sklearn.preprocessing.QuantileTransformer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.quantiletransformer method)": [[843, "sklearn.preprocessing.QuantileTransformer.get_params"]], "inverse_transform() (sklearn.preprocessing.quantiletransformer method)": [[843, "sklearn.preprocessing.QuantileTransformer.inverse_transform"]], "set_output() (sklearn.preprocessing.quantiletransformer method)": [[843, "sklearn.preprocessing.QuantileTransformer.set_output"]], "set_params() (sklearn.preprocessing.quantiletransformer method)": [[843, "sklearn.preprocessing.QuantileTransformer.set_params"]], "transform() (sklearn.preprocessing.quantiletransformer method)": [[843, "sklearn.preprocessing.QuantileTransformer.transform"]], "robustscaler (class in sklearn.preprocessing)": [[844, "sklearn.preprocessing.RobustScaler"]], "fit() (sklearn.preprocessing.robustscaler method)": [[844, "sklearn.preprocessing.RobustScaler.fit"]], "fit_transform() (sklearn.preprocessing.robustscaler method)": [[844, "sklearn.preprocessing.RobustScaler.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.robustscaler method)": [[844, "sklearn.preprocessing.RobustScaler.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.robustscaler method)": [[844, "sklearn.preprocessing.RobustScaler.get_metadata_routing"]], "get_params() (sklearn.preprocessing.robustscaler method)": [[844, "sklearn.preprocessing.RobustScaler.get_params"]], "inverse_transform() (sklearn.preprocessing.robustscaler method)": [[844, "sklearn.preprocessing.RobustScaler.inverse_transform"]], "set_output() (sklearn.preprocessing.robustscaler method)": [[844, "sklearn.preprocessing.RobustScaler.set_output"]], "set_params() (sklearn.preprocessing.robustscaler method)": [[844, "sklearn.preprocessing.RobustScaler.set_params"]], "transform() (sklearn.preprocessing.robustscaler method)": [[844, "sklearn.preprocessing.RobustScaler.transform"]], "splinetransformer (class in sklearn.preprocessing)": [[845, "sklearn.preprocessing.SplineTransformer"]], "fit() (sklearn.preprocessing.splinetransformer method)": [[845, "sklearn.preprocessing.SplineTransformer.fit"]], "fit_transform() (sklearn.preprocessing.splinetransformer method)": [[845, "sklearn.preprocessing.SplineTransformer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.splinetransformer method)": [[845, "sklearn.preprocessing.SplineTransformer.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.splinetransformer method)": [[845, "sklearn.preprocessing.SplineTransformer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.splinetransformer method)": [[845, "sklearn.preprocessing.SplineTransformer.get_params"]], "set_fit_request() (sklearn.preprocessing.splinetransformer method)": [[845, "sklearn.preprocessing.SplineTransformer.set_fit_request"]], "set_output() (sklearn.preprocessing.splinetransformer method)": [[845, "sklearn.preprocessing.SplineTransformer.set_output"]], "set_params() (sklearn.preprocessing.splinetransformer method)": [[845, "sklearn.preprocessing.SplineTransformer.set_params"]], "transform() (sklearn.preprocessing.splinetransformer method)": [[845, "sklearn.preprocessing.SplineTransformer.transform"]], "standardscaler (class in sklearn.preprocessing)": [[846, "sklearn.preprocessing.StandardScaler"]], "fit() (sklearn.preprocessing.standardscaler method)": [[846, "sklearn.preprocessing.StandardScaler.fit"]], "fit_transform() (sklearn.preprocessing.standardscaler method)": [[846, "sklearn.preprocessing.StandardScaler.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.standardscaler method)": [[846, "sklearn.preprocessing.StandardScaler.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.standardscaler method)": [[846, "sklearn.preprocessing.StandardScaler.get_metadata_routing"]], "get_params() (sklearn.preprocessing.standardscaler method)": [[846, "sklearn.preprocessing.StandardScaler.get_params"]], "inverse_transform() (sklearn.preprocessing.standardscaler method)": [[846, "sklearn.preprocessing.StandardScaler.inverse_transform"]], "partial_fit() (sklearn.preprocessing.standardscaler method)": [[846, "sklearn.preprocessing.StandardScaler.partial_fit"]], "set_fit_request() (sklearn.preprocessing.standardscaler method)": [[846, "sklearn.preprocessing.StandardScaler.set_fit_request"]], "set_inverse_transform_request() (sklearn.preprocessing.standardscaler method)": [[846, "sklearn.preprocessing.StandardScaler.set_inverse_transform_request"]], "set_output() (sklearn.preprocessing.standardscaler method)": [[846, "sklearn.preprocessing.StandardScaler.set_output"]], "set_params() (sklearn.preprocessing.standardscaler method)": [[846, "sklearn.preprocessing.StandardScaler.set_params"]], "set_partial_fit_request() (sklearn.preprocessing.standardscaler method)": [[846, "sklearn.preprocessing.StandardScaler.set_partial_fit_request"]], "set_transform_request() (sklearn.preprocessing.standardscaler method)": [[846, "sklearn.preprocessing.StandardScaler.set_transform_request"]], "transform() (sklearn.preprocessing.standardscaler method)": [[846, "sklearn.preprocessing.StandardScaler.transform"]], "targetencoder (class in sklearn.preprocessing)": [[847, "sklearn.preprocessing.TargetEncoder"]], "fit() (sklearn.preprocessing.targetencoder method)": [[847, "sklearn.preprocessing.TargetEncoder.fit"]], "fit_transform() (sklearn.preprocessing.targetencoder method)": [[847, "sklearn.preprocessing.TargetEncoder.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.targetencoder method)": [[847, "sklearn.preprocessing.TargetEncoder.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.targetencoder method)": [[847, "sklearn.preprocessing.TargetEncoder.get_metadata_routing"]], "get_params() (sklearn.preprocessing.targetencoder method)": [[847, "sklearn.preprocessing.TargetEncoder.get_params"]], "infrequent_categories_ (sklearn.preprocessing.targetencoder property)": [[847, "sklearn.preprocessing.TargetEncoder.infrequent_categories_"]], "set_output() (sklearn.preprocessing.targetencoder method)": [[847, "sklearn.preprocessing.TargetEncoder.set_output"]], "set_params() (sklearn.preprocessing.targetencoder method)": [[847, "sklearn.preprocessing.TargetEncoder.set_params"]], "transform() (sklearn.preprocessing.targetencoder method)": [[847, "sklearn.preprocessing.TargetEncoder.transform"]], "add_dummy_feature() (in module sklearn.preprocessing)": [[848, "sklearn.preprocessing.add_dummy_feature"]], "binarize() (in module sklearn.preprocessing)": [[849, "sklearn.preprocessing.binarize"]], "label_binarize() (in module sklearn.preprocessing)": [[850, "sklearn.preprocessing.label_binarize"]], "maxabs_scale() (in module sklearn.preprocessing)": [[851, "sklearn.preprocessing.maxabs_scale"]], "minmax_scale() (in module sklearn.preprocessing)": [[852, "sklearn.preprocessing.minmax_scale"]], "normalize() (in module sklearn.preprocessing)": [[853, "sklearn.preprocessing.normalize"]], "power_transform() (in module sklearn.preprocessing)": [[854, "sklearn.preprocessing.power_transform"]], "quantile_transform() (in module sklearn.preprocessing)": [[855, "sklearn.preprocessing.quantile_transform"]], "robust_scale() (in module sklearn.preprocessing)": [[856, "sklearn.preprocessing.robust_scale"]], "scale() (in module sklearn.preprocessing)": [[857, "sklearn.preprocessing.scale"]], "gaussianrandomprojection (class in sklearn.random_projection)": [[858, "sklearn.random_projection.GaussianRandomProjection"]], "fit() (sklearn.random_projection.gaussianrandomprojection method)": [[858, "sklearn.random_projection.GaussianRandomProjection.fit"]], "fit_transform() (sklearn.random_projection.gaussianrandomprojection method)": [[858, "sklearn.random_projection.GaussianRandomProjection.fit_transform"]], "get_feature_names_out() (sklearn.random_projection.gaussianrandomprojection method)": [[858, "sklearn.random_projection.GaussianRandomProjection.get_feature_names_out"]], "get_metadata_routing() (sklearn.random_projection.gaussianrandomprojection method)": [[858, "sklearn.random_projection.GaussianRandomProjection.get_metadata_routing"]], "get_params() (sklearn.random_projection.gaussianrandomprojection method)": [[858, "sklearn.random_projection.GaussianRandomProjection.get_params"]], "inverse_transform() (sklearn.random_projection.gaussianrandomprojection method)": [[858, "sklearn.random_projection.GaussianRandomProjection.inverse_transform"]], "set_output() (sklearn.random_projection.gaussianrandomprojection method)": [[858, "sklearn.random_projection.GaussianRandomProjection.set_output"]], "set_params() (sklearn.random_projection.gaussianrandomprojection method)": [[858, "sklearn.random_projection.GaussianRandomProjection.set_params"]], "transform() (sklearn.random_projection.gaussianrandomprojection method)": [[858, "sklearn.random_projection.GaussianRandomProjection.transform"]], "sparserandomprojection (class in sklearn.random_projection)": [[859, "sklearn.random_projection.SparseRandomProjection"]], "fit() (sklearn.random_projection.sparserandomprojection method)": [[859, "sklearn.random_projection.SparseRandomProjection.fit"]], "fit_transform() (sklearn.random_projection.sparserandomprojection method)": [[859, "sklearn.random_projection.SparseRandomProjection.fit_transform"]], "get_feature_names_out() (sklearn.random_projection.sparserandomprojection method)": [[859, "sklearn.random_projection.SparseRandomProjection.get_feature_names_out"]], "get_metadata_routing() (sklearn.random_projection.sparserandomprojection method)": [[859, "sklearn.random_projection.SparseRandomProjection.get_metadata_routing"]], "get_params() (sklearn.random_projection.sparserandomprojection method)": [[859, "sklearn.random_projection.SparseRandomProjection.get_params"]], "inverse_transform() (sklearn.random_projection.sparserandomprojection method)": [[859, "sklearn.random_projection.SparseRandomProjection.inverse_transform"]], "set_output() (sklearn.random_projection.sparserandomprojection method)": [[859, "sklearn.random_projection.SparseRandomProjection.set_output"]], "set_params() (sklearn.random_projection.sparserandomprojection method)": [[859, "sklearn.random_projection.SparseRandomProjection.set_params"]], "transform() (sklearn.random_projection.sparserandomprojection method)": [[859, "sklearn.random_projection.SparseRandomProjection.transform"]], "johnson_lindenstrauss_min_dim() (in module sklearn.random_projection)": [[860, "sklearn.random_projection.johnson_lindenstrauss_min_dim"]], "labelpropagation (class in sklearn.semi_supervised)": [[861, "sklearn.semi_supervised.LabelPropagation"]], "fit() (sklearn.semi_supervised.labelpropagation method)": [[861, "sklearn.semi_supervised.LabelPropagation.fit"]], "get_metadata_routing() (sklearn.semi_supervised.labelpropagation method)": [[861, "sklearn.semi_supervised.LabelPropagation.get_metadata_routing"]], "get_params() (sklearn.semi_supervised.labelpropagation method)": [[861, "sklearn.semi_supervised.LabelPropagation.get_params"]], "predict() (sklearn.semi_supervised.labelpropagation method)": [[861, "sklearn.semi_supervised.LabelPropagation.predict"]], "predict_proba() (sklearn.semi_supervised.labelpropagation method)": [[861, "sklearn.semi_supervised.LabelPropagation.predict_proba"]], "score() (sklearn.semi_supervised.labelpropagation method)": [[861, "sklearn.semi_supervised.LabelPropagation.score"]], "set_params() (sklearn.semi_supervised.labelpropagation method)": [[861, "sklearn.semi_supervised.LabelPropagation.set_params"]], "set_score_request() (sklearn.semi_supervised.labelpropagation method)": [[861, "sklearn.semi_supervised.LabelPropagation.set_score_request"]], "labelspreading (class in sklearn.semi_supervised)": [[862, "sklearn.semi_supervised.LabelSpreading"]], "fit() (sklearn.semi_supervised.labelspreading method)": [[862, "sklearn.semi_supervised.LabelSpreading.fit"]], "get_metadata_routing() (sklearn.semi_supervised.labelspreading method)": [[862, "sklearn.semi_supervised.LabelSpreading.get_metadata_routing"]], "get_params() (sklearn.semi_supervised.labelspreading method)": [[862, "sklearn.semi_supervised.LabelSpreading.get_params"]], "predict() (sklearn.semi_supervised.labelspreading method)": [[862, "sklearn.semi_supervised.LabelSpreading.predict"]], "predict_proba() (sklearn.semi_supervised.labelspreading method)": [[862, "sklearn.semi_supervised.LabelSpreading.predict_proba"]], "score() (sklearn.semi_supervised.labelspreading method)": [[862, "sklearn.semi_supervised.LabelSpreading.score"]], "set_params() (sklearn.semi_supervised.labelspreading method)": [[862, "sklearn.semi_supervised.LabelSpreading.set_params"]], "set_score_request() (sklearn.semi_supervised.labelspreading method)": [[862, "sklearn.semi_supervised.LabelSpreading.set_score_request"]], "selftrainingclassifier (class in sklearn.semi_supervised)": [[863, "sklearn.semi_supervised.SelfTrainingClassifier"]], "decision_function() (sklearn.semi_supervised.selftrainingclassifier method)": [[863, "sklearn.semi_supervised.SelfTrainingClassifier.decision_function"]], "fit() (sklearn.semi_supervised.selftrainingclassifier method)": [[863, "sklearn.semi_supervised.SelfTrainingClassifier.fit"]], "get_metadata_routing() (sklearn.semi_supervised.selftrainingclassifier method)": [[863, "sklearn.semi_supervised.SelfTrainingClassifier.get_metadata_routing"]], "get_params() (sklearn.semi_supervised.selftrainingclassifier method)": [[863, "sklearn.semi_supervised.SelfTrainingClassifier.get_params"]], "predict() (sklearn.semi_supervised.selftrainingclassifier method)": [[863, "sklearn.semi_supervised.SelfTrainingClassifier.predict"]], "predict_log_proba() (sklearn.semi_supervised.selftrainingclassifier method)": [[863, "sklearn.semi_supervised.SelfTrainingClassifier.predict_log_proba"]], "predict_proba() (sklearn.semi_supervised.selftrainingclassifier method)": [[863, "sklearn.semi_supervised.SelfTrainingClassifier.predict_proba"]], "score() (sklearn.semi_supervised.selftrainingclassifier method)": [[863, "sklearn.semi_supervised.SelfTrainingClassifier.score"]], "set_params() (sklearn.semi_supervised.selftrainingclassifier method)": [[863, "sklearn.semi_supervised.SelfTrainingClassifier.set_params"]], "set_config() (in module sklearn)": [[864, "sklearn.set_config"]], "show_versions() (in module sklearn)": [[865, "sklearn.show_versions"]], "linearsvc (class in sklearn.svm)": [[866, "sklearn.svm.LinearSVC"]], "decision_function() (sklearn.svm.linearsvc method)": [[866, "sklearn.svm.LinearSVC.decision_function"]], "densify() (sklearn.svm.linearsvc method)": [[866, "sklearn.svm.LinearSVC.densify"]], "fit() (sklearn.svm.linearsvc method)": [[866, "sklearn.svm.LinearSVC.fit"]], "get_metadata_routing() (sklearn.svm.linearsvc method)": [[866, "sklearn.svm.LinearSVC.get_metadata_routing"]], "get_params() (sklearn.svm.linearsvc method)": [[866, "sklearn.svm.LinearSVC.get_params"]], "predict() (sklearn.svm.linearsvc method)": [[866, "sklearn.svm.LinearSVC.predict"]], "score() (sklearn.svm.linearsvc method)": [[866, "sklearn.svm.LinearSVC.score"]], "set_fit_request() (sklearn.svm.linearsvc method)": [[866, "sklearn.svm.LinearSVC.set_fit_request"]], "set_params() (sklearn.svm.linearsvc method)": [[866, "sklearn.svm.LinearSVC.set_params"]], "set_score_request() (sklearn.svm.linearsvc method)": [[866, "sklearn.svm.LinearSVC.set_score_request"]], "sparsify() (sklearn.svm.linearsvc method)": [[866, "sklearn.svm.LinearSVC.sparsify"]], "linearsvr (class in sklearn.svm)": [[867, "sklearn.svm.LinearSVR"]], "fit() (sklearn.svm.linearsvr method)": [[867, "sklearn.svm.LinearSVR.fit"]], "get_metadata_routing() (sklearn.svm.linearsvr method)": [[867, "sklearn.svm.LinearSVR.get_metadata_routing"]], "get_params() (sklearn.svm.linearsvr method)": [[867, "sklearn.svm.LinearSVR.get_params"]], "predict() (sklearn.svm.linearsvr method)": [[867, "sklearn.svm.LinearSVR.predict"]], "score() (sklearn.svm.linearsvr method)": [[867, "sklearn.svm.LinearSVR.score"]], "set_fit_request() (sklearn.svm.linearsvr method)": [[867, "sklearn.svm.LinearSVR.set_fit_request"]], "set_params() (sklearn.svm.linearsvr method)": [[867, "sklearn.svm.LinearSVR.set_params"]], "set_score_request() (sklearn.svm.linearsvr method)": [[867, "sklearn.svm.LinearSVR.set_score_request"]], "nusvc (class in sklearn.svm)": [[868, "sklearn.svm.NuSVC"]], "coef_ (sklearn.svm.nusvc property)": [[868, "sklearn.svm.NuSVC.coef_"]], "decision_function() (sklearn.svm.nusvc method)": [[868, "sklearn.svm.NuSVC.decision_function"]], "fit() (sklearn.svm.nusvc method)": [[868, "sklearn.svm.NuSVC.fit"]], "get_metadata_routing() (sklearn.svm.nusvc method)": [[868, "sklearn.svm.NuSVC.get_metadata_routing"]], "get_params() (sklearn.svm.nusvc method)": [[868, "sklearn.svm.NuSVC.get_params"]], "n_support_ (sklearn.svm.nusvc property)": [[868, "sklearn.svm.NuSVC.n_support_"]], "predict() (sklearn.svm.nusvc method)": [[868, "sklearn.svm.NuSVC.predict"]], "predict_log_proba() (sklearn.svm.nusvc method)": [[868, "sklearn.svm.NuSVC.predict_log_proba"]], "predict_proba() (sklearn.svm.nusvc method)": [[868, "sklearn.svm.NuSVC.predict_proba"]], "proba_ (sklearn.svm.nusvc property)": [[868, "sklearn.svm.NuSVC.probA_"]], "probb_ (sklearn.svm.nusvc property)": [[868, "sklearn.svm.NuSVC.probB_"]], "score() (sklearn.svm.nusvc method)": [[868, "sklearn.svm.NuSVC.score"]], "set_fit_request() (sklearn.svm.nusvc method)": [[868, "sklearn.svm.NuSVC.set_fit_request"]], "set_params() (sklearn.svm.nusvc method)": [[868, "sklearn.svm.NuSVC.set_params"]], "set_score_request() (sklearn.svm.nusvc method)": [[868, "sklearn.svm.NuSVC.set_score_request"]], "nusvr (class in sklearn.svm)": [[869, "sklearn.svm.NuSVR"]], "coef_ (sklearn.svm.nusvr property)": [[869, "sklearn.svm.NuSVR.coef_"]], "fit() (sklearn.svm.nusvr method)": [[869, "sklearn.svm.NuSVR.fit"]], "get_metadata_routing() (sklearn.svm.nusvr method)": [[869, "sklearn.svm.NuSVR.get_metadata_routing"]], "get_params() (sklearn.svm.nusvr method)": [[869, "sklearn.svm.NuSVR.get_params"]], "n_support_ (sklearn.svm.nusvr property)": [[869, "sklearn.svm.NuSVR.n_support_"]], "predict() (sklearn.svm.nusvr method)": [[869, "sklearn.svm.NuSVR.predict"]], "score() (sklearn.svm.nusvr method)": [[869, "sklearn.svm.NuSVR.score"]], "set_fit_request() (sklearn.svm.nusvr method)": [[869, "sklearn.svm.NuSVR.set_fit_request"]], "set_params() (sklearn.svm.nusvr method)": [[869, "sklearn.svm.NuSVR.set_params"]], "set_score_request() (sklearn.svm.nusvr method)": [[869, "sklearn.svm.NuSVR.set_score_request"]], "oneclasssvm (class in sklearn.svm)": [[870, "sklearn.svm.OneClassSVM"]], "coef_ (sklearn.svm.oneclasssvm property)": [[870, "sklearn.svm.OneClassSVM.coef_"]], "decision_function() (sklearn.svm.oneclasssvm method)": [[870, "sklearn.svm.OneClassSVM.decision_function"]], "fit() (sklearn.svm.oneclasssvm method)": [[870, "sklearn.svm.OneClassSVM.fit"]], "fit_predict() (sklearn.svm.oneclasssvm method)": [[870, "sklearn.svm.OneClassSVM.fit_predict"]], "get_metadata_routing() (sklearn.svm.oneclasssvm method)": [[870, "sklearn.svm.OneClassSVM.get_metadata_routing"]], "get_params() (sklearn.svm.oneclasssvm method)": [[870, "sklearn.svm.OneClassSVM.get_params"]], "n_support_ (sklearn.svm.oneclasssvm property)": [[870, "sklearn.svm.OneClassSVM.n_support_"]], "predict() (sklearn.svm.oneclasssvm method)": [[870, "sklearn.svm.OneClassSVM.predict"]], "score_samples() (sklearn.svm.oneclasssvm method)": [[870, "sklearn.svm.OneClassSVM.score_samples"]], "set_fit_request() (sklearn.svm.oneclasssvm method)": [[870, "sklearn.svm.OneClassSVM.set_fit_request"]], "set_params() (sklearn.svm.oneclasssvm method)": [[870, "sklearn.svm.OneClassSVM.set_params"]], "svc (class in sklearn.svm)": [[871, "sklearn.svm.SVC"]], "coef_ (sklearn.svm.svc property)": [[871, "sklearn.svm.SVC.coef_"]], "decision_function() (sklearn.svm.svc method)": [[871, "sklearn.svm.SVC.decision_function"]], "fit() (sklearn.svm.svc method)": [[871, "sklearn.svm.SVC.fit"]], "get_metadata_routing() (sklearn.svm.svc method)": [[871, "sklearn.svm.SVC.get_metadata_routing"]], "get_params() (sklearn.svm.svc method)": [[871, "sklearn.svm.SVC.get_params"]], "n_support_ (sklearn.svm.svc property)": [[871, "sklearn.svm.SVC.n_support_"]], "predict() (sklearn.svm.svc method)": [[871, "sklearn.svm.SVC.predict"]], "predict_log_proba() (sklearn.svm.svc method)": [[871, "sklearn.svm.SVC.predict_log_proba"]], "predict_proba() (sklearn.svm.svc method)": [[871, "sklearn.svm.SVC.predict_proba"]], "proba_ (sklearn.svm.svc property)": [[871, "sklearn.svm.SVC.probA_"]], "probb_ (sklearn.svm.svc property)": [[871, "sklearn.svm.SVC.probB_"]], "score() (sklearn.svm.svc method)": [[871, "sklearn.svm.SVC.score"]], "set_fit_request() (sklearn.svm.svc method)": [[871, "sklearn.svm.SVC.set_fit_request"]], "set_params() (sklearn.svm.svc method)": [[871, "sklearn.svm.SVC.set_params"]], "set_score_request() (sklearn.svm.svc method)": [[871, "sklearn.svm.SVC.set_score_request"]], "svr (class in sklearn.svm)": [[872, "sklearn.svm.SVR"]], "coef_ (sklearn.svm.svr property)": [[872, "sklearn.svm.SVR.coef_"]], "fit() (sklearn.svm.svr method)": [[872, "sklearn.svm.SVR.fit"]], "get_metadata_routing() (sklearn.svm.svr method)": [[872, "sklearn.svm.SVR.get_metadata_routing"]], "get_params() (sklearn.svm.svr method)": [[872, "sklearn.svm.SVR.get_params"]], "n_support_ (sklearn.svm.svr property)": [[872, "sklearn.svm.SVR.n_support_"]], "predict() (sklearn.svm.svr method)": [[872, "sklearn.svm.SVR.predict"]], "score() (sklearn.svm.svr method)": [[872, "sklearn.svm.SVR.score"]], "set_fit_request() (sklearn.svm.svr method)": [[872, "sklearn.svm.SVR.set_fit_request"]], "set_params() (sklearn.svm.svr method)": [[872, "sklearn.svm.SVR.set_params"]], "set_score_request() (sklearn.svm.svr method)": [[872, "sklearn.svm.SVR.set_score_request"]], "l1_min_c() (in module sklearn.svm)": [[873, "sklearn.svm.l1_min_c"]], "decisiontreeclassifier (class in sklearn.tree)": [[874, "sklearn.tree.DecisionTreeClassifier"]], "apply() (sklearn.tree.decisiontreeclassifier method)": [[874, "sklearn.tree.DecisionTreeClassifier.apply"]], "cost_complexity_pruning_path() (sklearn.tree.decisiontreeclassifier method)": [[874, "sklearn.tree.DecisionTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sklearn.tree.decisiontreeclassifier method)": [[874, "sklearn.tree.DecisionTreeClassifier.decision_path"]], "feature_importances_ (sklearn.tree.decisiontreeclassifier property)": [[874, "sklearn.tree.DecisionTreeClassifier.feature_importances_"]], "fit() (sklearn.tree.decisiontreeclassifier method)": [[874, "sklearn.tree.DecisionTreeClassifier.fit"]], "get_depth() (sklearn.tree.decisiontreeclassifier method)": [[874, "sklearn.tree.DecisionTreeClassifier.get_depth"]], "get_metadata_routing() (sklearn.tree.decisiontreeclassifier method)": [[874, "sklearn.tree.DecisionTreeClassifier.get_metadata_routing"]], "get_n_leaves() (sklearn.tree.decisiontreeclassifier method)": [[874, "sklearn.tree.DecisionTreeClassifier.get_n_leaves"]], "get_params() (sklearn.tree.decisiontreeclassifier method)": [[874, "sklearn.tree.DecisionTreeClassifier.get_params"]], "predict() (sklearn.tree.decisiontreeclassifier method)": [[874, "sklearn.tree.DecisionTreeClassifier.predict"]], "predict_log_proba() (sklearn.tree.decisiontreeclassifier method)": [[874, "sklearn.tree.DecisionTreeClassifier.predict_log_proba"]], "predict_proba() (sklearn.tree.decisiontreeclassifier method)": [[874, "sklearn.tree.DecisionTreeClassifier.predict_proba"]], "score() (sklearn.tree.decisiontreeclassifier method)": [[874, "sklearn.tree.DecisionTreeClassifier.score"]], "set_fit_request() (sklearn.tree.decisiontreeclassifier method)": [[874, "sklearn.tree.DecisionTreeClassifier.set_fit_request"]], "set_params() (sklearn.tree.decisiontreeclassifier method)": [[874, "sklearn.tree.DecisionTreeClassifier.set_params"]], "set_predict_proba_request() (sklearn.tree.decisiontreeclassifier method)": [[874, "sklearn.tree.DecisionTreeClassifier.set_predict_proba_request"]], "set_predict_request() (sklearn.tree.decisiontreeclassifier method)": [[874, "sklearn.tree.DecisionTreeClassifier.set_predict_request"]], "set_score_request() (sklearn.tree.decisiontreeclassifier method)": [[874, "sklearn.tree.DecisionTreeClassifier.set_score_request"]], "decisiontreeregressor (class in sklearn.tree)": [[875, "sklearn.tree.DecisionTreeRegressor"]], "apply() (sklearn.tree.decisiontreeregressor method)": [[875, "sklearn.tree.DecisionTreeRegressor.apply"]], "cost_complexity_pruning_path() (sklearn.tree.decisiontreeregressor method)": [[875, "sklearn.tree.DecisionTreeRegressor.cost_complexity_pruning_path"]], "decision_path() (sklearn.tree.decisiontreeregressor method)": [[875, "sklearn.tree.DecisionTreeRegressor.decision_path"]], "feature_importances_ (sklearn.tree.decisiontreeregressor property)": [[875, "sklearn.tree.DecisionTreeRegressor.feature_importances_"]], "fit() (sklearn.tree.decisiontreeregressor method)": [[875, "sklearn.tree.DecisionTreeRegressor.fit"]], "get_depth() (sklearn.tree.decisiontreeregressor method)": [[875, "sklearn.tree.DecisionTreeRegressor.get_depth"]], "get_metadata_routing() (sklearn.tree.decisiontreeregressor method)": [[875, "sklearn.tree.DecisionTreeRegressor.get_metadata_routing"]], "get_n_leaves() (sklearn.tree.decisiontreeregressor method)": [[875, "sklearn.tree.DecisionTreeRegressor.get_n_leaves"]], "get_params() (sklearn.tree.decisiontreeregressor method)": [[875, "sklearn.tree.DecisionTreeRegressor.get_params"]], "predict() (sklearn.tree.decisiontreeregressor method)": [[875, "sklearn.tree.DecisionTreeRegressor.predict"]], "score() (sklearn.tree.decisiontreeregressor method)": [[875, "sklearn.tree.DecisionTreeRegressor.score"]], "set_fit_request() (sklearn.tree.decisiontreeregressor method)": [[875, "sklearn.tree.DecisionTreeRegressor.set_fit_request"]], "set_params() (sklearn.tree.decisiontreeregressor method)": [[875, "sklearn.tree.DecisionTreeRegressor.set_params"]], "set_predict_request() (sklearn.tree.decisiontreeregressor method)": [[875, "sklearn.tree.DecisionTreeRegressor.set_predict_request"]], "set_score_request() (sklearn.tree.decisiontreeregressor method)": [[875, "sklearn.tree.DecisionTreeRegressor.set_score_request"]], "extratreeclassifier (class in sklearn.tree)": [[876, "sklearn.tree.ExtraTreeClassifier"]], "apply() (sklearn.tree.extratreeclassifier method)": [[876, "sklearn.tree.ExtraTreeClassifier.apply"]], "cost_complexity_pruning_path() (sklearn.tree.extratreeclassifier method)": [[876, "sklearn.tree.ExtraTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sklearn.tree.extratreeclassifier method)": [[876, "sklearn.tree.ExtraTreeClassifier.decision_path"]], "feature_importances_ (sklearn.tree.extratreeclassifier property)": [[876, "sklearn.tree.ExtraTreeClassifier.feature_importances_"]], "fit() (sklearn.tree.extratreeclassifier method)": [[876, "sklearn.tree.ExtraTreeClassifier.fit"]], "get_depth() (sklearn.tree.extratreeclassifier method)": [[876, "sklearn.tree.ExtraTreeClassifier.get_depth"]], "get_metadata_routing() (sklearn.tree.extratreeclassifier method)": [[876, "sklearn.tree.ExtraTreeClassifier.get_metadata_routing"]], "get_n_leaves() (sklearn.tree.extratreeclassifier method)": [[876, "sklearn.tree.ExtraTreeClassifier.get_n_leaves"]], "get_params() (sklearn.tree.extratreeclassifier method)": [[876, "sklearn.tree.ExtraTreeClassifier.get_params"]], "predict() (sklearn.tree.extratreeclassifier method)": [[876, "sklearn.tree.ExtraTreeClassifier.predict"]], "predict_log_proba() (sklearn.tree.extratreeclassifier method)": [[876, "sklearn.tree.ExtraTreeClassifier.predict_log_proba"]], "predict_proba() (sklearn.tree.extratreeclassifier method)": [[876, "sklearn.tree.ExtraTreeClassifier.predict_proba"]], "score() (sklearn.tree.extratreeclassifier method)": [[876, "sklearn.tree.ExtraTreeClassifier.score"]], "set_fit_request() (sklearn.tree.extratreeclassifier method)": [[876, "sklearn.tree.ExtraTreeClassifier.set_fit_request"]], "set_params() (sklearn.tree.extratreeclassifier method)": [[876, "sklearn.tree.ExtraTreeClassifier.set_params"]], "set_predict_proba_request() (sklearn.tree.extratreeclassifier method)": [[876, "sklearn.tree.ExtraTreeClassifier.set_predict_proba_request"]], "set_predict_request() (sklearn.tree.extratreeclassifier method)": [[876, "sklearn.tree.ExtraTreeClassifier.set_predict_request"]], "set_score_request() (sklearn.tree.extratreeclassifier method)": [[876, "sklearn.tree.ExtraTreeClassifier.set_score_request"]], "extratreeregressor (class in sklearn.tree)": [[877, "sklearn.tree.ExtraTreeRegressor"]], "apply() (sklearn.tree.extratreeregressor method)": [[877, "sklearn.tree.ExtraTreeRegressor.apply"]], "cost_complexity_pruning_path() (sklearn.tree.extratreeregressor method)": [[877, "sklearn.tree.ExtraTreeRegressor.cost_complexity_pruning_path"]], "decision_path() (sklearn.tree.extratreeregressor method)": [[877, "sklearn.tree.ExtraTreeRegressor.decision_path"]], "feature_importances_ (sklearn.tree.extratreeregressor property)": [[877, "sklearn.tree.ExtraTreeRegressor.feature_importances_"]], "fit() (sklearn.tree.extratreeregressor method)": [[877, "sklearn.tree.ExtraTreeRegressor.fit"]], "get_depth() (sklearn.tree.extratreeregressor method)": [[877, "sklearn.tree.ExtraTreeRegressor.get_depth"]], "get_metadata_routing() (sklearn.tree.extratreeregressor method)": [[877, "sklearn.tree.ExtraTreeRegressor.get_metadata_routing"]], "get_n_leaves() (sklearn.tree.extratreeregressor method)": [[877, "sklearn.tree.ExtraTreeRegressor.get_n_leaves"]], "get_params() (sklearn.tree.extratreeregressor method)": [[877, "sklearn.tree.ExtraTreeRegressor.get_params"]], "predict() (sklearn.tree.extratreeregressor method)": [[877, "sklearn.tree.ExtraTreeRegressor.predict"]], "score() (sklearn.tree.extratreeregressor method)": [[877, "sklearn.tree.ExtraTreeRegressor.score"]], "set_fit_request() (sklearn.tree.extratreeregressor method)": [[877, "sklearn.tree.ExtraTreeRegressor.set_fit_request"]], "set_params() (sklearn.tree.extratreeregressor method)": [[877, "sklearn.tree.ExtraTreeRegressor.set_params"]], "set_predict_request() (sklearn.tree.extratreeregressor method)": [[877, "sklearn.tree.ExtraTreeRegressor.set_predict_request"]], "set_score_request() (sklearn.tree.extratreeregressor method)": [[877, "sklearn.tree.ExtraTreeRegressor.set_score_request"]], "export_graphviz() (in module sklearn.tree)": [[878, "sklearn.tree.export_graphviz"]], "export_text() (in module sklearn.tree)": [[879, "sklearn.tree.export_text"]], "plot_tree() (in module sklearn.tree)": [[880, "sklearn.tree.plot_tree"]], "bunch (class in sklearn.utils)": [[881, "sklearn.utils.Bunch"]], "clear() (sklearn.utils.bunch method)": [[881, "sklearn.utils.Bunch.clear"]], "copy() (sklearn.utils.bunch method)": [[881, "sklearn.utils.Bunch.copy"]], "fromkeys() (sklearn.utils.bunch method)": [[881, "sklearn.utils.Bunch.fromkeys"]], "get() (sklearn.utils.bunch method)": [[881, "sklearn.utils.Bunch.get"]], "items() (sklearn.utils.bunch method)": [[881, "sklearn.utils.Bunch.items"]], "keys() (sklearn.utils.bunch method)": [[881, "sklearn.utils.Bunch.keys"]], "pop() (sklearn.utils.bunch method)": [[881, "sklearn.utils.Bunch.pop"]], "popitem() (sklearn.utils.bunch method)": [[881, "sklearn.utils.Bunch.popitem"]], "setdefault() (sklearn.utils.bunch method)": [[881, "sklearn.utils.Bunch.setdefault"]], "update() (sklearn.utils.bunch method)": [[881, "sklearn.utils.Bunch.update"]], "values() (sklearn.utils.bunch method)": [[881, "sklearn.utils.Bunch.values"]], "_safe_indexing() (in module sklearn.utils)": [[882, "sklearn.utils._safe_indexing"]], "min_pos() (in module sklearn.utils.arrayfuncs)": [[883, "sklearn.utils.arrayfuncs.min_pos"]], "as_float_array() (in module sklearn.utils)": [[884, "sklearn.utils.as_float_array"]], "assert_all_finite() (in module sklearn.utils)": [[885, "sklearn.utils.assert_all_finite"]], "check_x_y() (in module sklearn.utils)": [[886, "sklearn.utils.check_X_y"]], "check_array() (in module sklearn.utils)": [[887, "sklearn.utils.check_array"]], "check_consistent_length() (in module sklearn.utils)": [[888, "sklearn.utils.check_consistent_length"]], "check_random_state() (in module sklearn.utils)": [[889, "sklearn.utils.check_random_state"]], "check_scalar() (in module sklearn.utils)": [[890, "sklearn.utils.check_scalar"]], "compute_class_weight() (in module sklearn.utils.class_weight)": [[891, "sklearn.utils.class_weight.compute_class_weight"]], "compute_sample_weight() (in module sklearn.utils.class_weight)": [[892, "sklearn.utils.class_weight.compute_sample_weight"]], "deprecated() (in module sklearn.utils)": [[893, "sklearn.utils.deprecated"]], "all_displays() (in module sklearn.utils.discovery)": [[894, "sklearn.utils.discovery.all_displays"]], "all_estimators() (in module sklearn.utils.discovery)": [[895, "sklearn.utils.discovery.all_estimators"]], "all_functions() (in module sklearn.utils.discovery)": [[896, "sklearn.utils.discovery.all_functions"]], "check_estimator() (in module sklearn.utils.estimator_checks)": [[897, "sklearn.utils.estimator_checks.check_estimator"]], "parametrize_with_checks() (in module sklearn.utils.estimator_checks)": [[898, "sklearn.utils.estimator_checks.parametrize_with_checks"]], "estimator_html_repr() (in module sklearn.utils)": [[899, "sklearn.utils.estimator_html_repr"]], "density() (in module sklearn.utils.extmath)": [[900, "sklearn.utils.extmath.density"]], "fast_logdet() (in module sklearn.utils.extmath)": [[901, "sklearn.utils.extmath.fast_logdet"]], "randomized_range_finder() (in module sklearn.utils.extmath)": [[902, "sklearn.utils.extmath.randomized_range_finder"]], "randomized_svd() (in module sklearn.utils.extmath)": [[903, "sklearn.utils.extmath.randomized_svd"]], "safe_sparse_dot() (in module sklearn.utils.extmath)": [[904, "sklearn.utils.extmath.safe_sparse_dot"]], "weighted_mode() (in module sklearn.utils.extmath)": [[905, "sklearn.utils.extmath.weighted_mode"]], "gen_batches() (in module sklearn.utils)": [[906, "sklearn.utils.gen_batches"]], "gen_even_slices() (in module sklearn.utils)": [[907, "sklearn.utils.gen_even_slices"]], "single_source_shortest_path_length() (in module sklearn.utils.graph)": [[908, "sklearn.utils.graph.single_source_shortest_path_length"]], "indexable() (in module sklearn.utils)": [[909, "sklearn.utils.indexable"]], "metadatarequest (class in sklearn.utils.metadata_routing)": [[910, "sklearn.utils.metadata_routing.MetadataRequest"]], "consumes() (sklearn.utils.metadata_routing.metadatarequest method)": [[910, "sklearn.utils.metadata_routing.MetadataRequest.consumes"]], "metadatarouter (class in sklearn.utils.metadata_routing)": [[911, "sklearn.utils.metadata_routing.MetadataRouter"]], "add() (sklearn.utils.metadata_routing.metadatarouter method)": [[911, "sklearn.utils.metadata_routing.MetadataRouter.add"]], "add_self_request() (sklearn.utils.metadata_routing.metadatarouter method)": [[911, "sklearn.utils.metadata_routing.MetadataRouter.add_self_request"]], "consumes() (sklearn.utils.metadata_routing.metadatarouter method)": [[911, "sklearn.utils.metadata_routing.MetadataRouter.consumes"]], "route_params() (sklearn.utils.metadata_routing.metadatarouter method)": [[911, "sklearn.utils.metadata_routing.MetadataRouter.route_params"]], "validate_metadata() (sklearn.utils.metadata_routing.metadatarouter method)": [[911, "sklearn.utils.metadata_routing.MetadataRouter.validate_metadata"]], "methodmapping (class in sklearn.utils.metadata_routing)": [[912, "sklearn.utils.metadata_routing.MethodMapping"]], "add() (sklearn.utils.metadata_routing.methodmapping method)": [[912, "sklearn.utils.metadata_routing.MethodMapping.add"]], "from_str() (sklearn.utils.metadata_routing.methodmapping class method)": [[912, "sklearn.utils.metadata_routing.MethodMapping.from_str"]], "get_routing_for_object() (in module sklearn.utils.metadata_routing)": [[913, "sklearn.utils.metadata_routing.get_routing_for_object"]], "process_routing() (in module sklearn.utils.metadata_routing)": [[914, "sklearn.utils.metadata_routing.process_routing"]], "available_if() (in module sklearn.utils.metaestimators)": [[915, "sklearn.utils.metaestimators.available_if"]], "is_multilabel() (in module sklearn.utils.multiclass)": [[916, "sklearn.utils.multiclass.is_multilabel"]], "type_of_target() (in module sklearn.utils.multiclass)": [[917, "sklearn.utils.multiclass.type_of_target"]], "unique_labels() (in module sklearn.utils.multiclass)": [[918, "sklearn.utils.multiclass.unique_labels"]], "murmurhash3_32() (in module sklearn.utils)": [[919, "sklearn.utils.murmurhash3_32"]], "parallel (class in sklearn.utils.parallel)": [[920, "sklearn.utils.parallel.Parallel"]], "dispatch_next() (sklearn.utils.parallel.parallel method)": [[920, "sklearn.utils.parallel.Parallel.dispatch_next"]], "dispatch_one_batch() (sklearn.utils.parallel.parallel method)": [[920, "sklearn.utils.parallel.Parallel.dispatch_one_batch"]], "format() (sklearn.utils.parallel.parallel method)": [[920, "sklearn.utils.parallel.Parallel.format"]], "print_progress() (sklearn.utils.parallel.parallel method)": [[920, "sklearn.utils.parallel.Parallel.print_progress"]], "delayed() (in module sklearn.utils.parallel)": [[921, "sklearn.utils.parallel.delayed"]], "parallel_backend() (in module sklearn.utils)": [[922, "sklearn.utils.parallel_backend"]], "sample_without_replacement() (in module sklearn.utils.random)": [[923, "sklearn.utils.random.sample_without_replacement"]], "register_parallel_backend() (in module sklearn.utils)": [[924, "sklearn.utils.register_parallel_backend"]], "resample() (in module sklearn.utils)": [[925, "sklearn.utils.resample"]], "safe_mask() (in module sklearn.utils)": [[926, "sklearn.utils.safe_mask"]], "safe_sqr() (in module sklearn.utils)": [[927, "sklearn.utils.safe_sqr"]], "shuffle() (in module sklearn.utils)": [[928, "sklearn.utils.shuffle"]], "incr_mean_variance_axis() (in module sklearn.utils.sparsefuncs)": [[929, "sklearn.utils.sparsefuncs.incr_mean_variance_axis"]], "inplace_column_scale() (in module sklearn.utils.sparsefuncs)": [[930, "sklearn.utils.sparsefuncs.inplace_column_scale"]], "inplace_csr_column_scale() (in module sklearn.utils.sparsefuncs)": [[931, "sklearn.utils.sparsefuncs.inplace_csr_column_scale"]], "inplace_row_scale() (in module sklearn.utils.sparsefuncs)": [[932, "sklearn.utils.sparsefuncs.inplace_row_scale"]], "inplace_swap_column() (in module sklearn.utils.sparsefuncs)": [[933, "sklearn.utils.sparsefuncs.inplace_swap_column"]], "inplace_swap_row() (in module sklearn.utils.sparsefuncs)": [[934, "sklearn.utils.sparsefuncs.inplace_swap_row"]], "mean_variance_axis() (in module sklearn.utils.sparsefuncs)": [[935, "sklearn.utils.sparsefuncs.mean_variance_axis"]], "inplace_csr_row_normalize_l1() (in module sklearn.utils.sparsefuncs_fast)": [[936, "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1"]], "inplace_csr_row_normalize_l2() (in module sklearn.utils.sparsefuncs_fast)": [[937, "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2"]], "check_is_fitted() (in module sklearn.utils.validation)": [[938, "sklearn.utils.validation.check_is_fitted"]], "check_memory() (in module sklearn.utils.validation)": [[939, "sklearn.utils.validation.check_memory"]], "check_symmetric() (in module sklearn.utils.validation)": [[940, "sklearn.utils.validation.check_symmetric"]], "column_or_1d() (in module sklearn.utils.validation)": [[941, "sklearn.utils.validation.column_or_1d"]], "has_fit_parameter() (in module sklearn.utils.validation)": [[942, "sklearn.utils.validation.has_fit_parameter"]]}})