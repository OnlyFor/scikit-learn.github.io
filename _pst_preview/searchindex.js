Search.setIndex({"docnames": ["about", "authors", "authors_emeritus", "auto_examples/applications/index", "auto_examples/applications/plot_cyclical_feature_engineering", "auto_examples/applications/plot_digits_denoising", "auto_examples/applications/plot_face_recognition", "auto_examples/applications/plot_model_complexity_influence", "auto_examples/applications/plot_out_of_core_classification", "auto_examples/applications/plot_outlier_detection_wine", "auto_examples/applications/plot_prediction_latency", "auto_examples/applications/plot_species_distribution_modeling", "auto_examples/applications/plot_stock_market", "auto_examples/applications/plot_time_series_lagged_features", "auto_examples/applications/plot_tomography_l1_reconstruction", "auto_examples/applications/plot_topics_extraction_with_nmf_lda", "auto_examples/applications/svm_gui", "auto_examples/applications/wikipedia_principal_eigenvector", "auto_examples/bicluster/index", "auto_examples/bicluster/plot_bicluster_newsgroups", "auto_examples/bicluster/plot_spectral_biclustering", "auto_examples/bicluster/plot_spectral_coclustering", "auto_examples/calibration/index", "auto_examples/calibration/plot_calibration", "auto_examples/calibration/plot_calibration_curve", "auto_examples/calibration/plot_calibration_multiclass", "auto_examples/calibration/plot_compare_calibration", "auto_examples/classification/index", "auto_examples/classification/plot_classification_probability", "auto_examples/classification/plot_classifier_comparison", "auto_examples/classification/plot_digits_classification", "auto_examples/classification/plot_lda", "auto_examples/classification/plot_lda_qda", "auto_examples/cluster/index", "auto_examples/cluster/plot_adjusted_for_chance_measures", "auto_examples/cluster/plot_affinity_propagation", "auto_examples/cluster/plot_agglomerative_clustering", "auto_examples/cluster/plot_agglomerative_clustering_metrics", "auto_examples/cluster/plot_agglomerative_dendrogram", "auto_examples/cluster/plot_birch_vs_minibatchkmeans", "auto_examples/cluster/plot_bisect_kmeans", "auto_examples/cluster/plot_cluster_comparison", "auto_examples/cluster/plot_cluster_iris", "auto_examples/cluster/plot_coin_segmentation", "auto_examples/cluster/plot_coin_ward_segmentation", "auto_examples/cluster/plot_color_quantization", "auto_examples/cluster/plot_dbscan", "auto_examples/cluster/plot_dict_face_patches", "auto_examples/cluster/plot_digits_agglomeration", "auto_examples/cluster/plot_digits_linkage", "auto_examples/cluster/plot_face_compress", "auto_examples/cluster/plot_feature_agglomeration_vs_univariate_selection", "auto_examples/cluster/plot_hdbscan", "auto_examples/cluster/plot_inductive_clustering", "auto_examples/cluster/plot_kmeans_assumptions", "auto_examples/cluster/plot_kmeans_digits", "auto_examples/cluster/plot_kmeans_plusplus", "auto_examples/cluster/plot_kmeans_silhouette_analysis", "auto_examples/cluster/plot_kmeans_stability_low_dim_dense", "auto_examples/cluster/plot_linkage_comparison", "auto_examples/cluster/plot_mean_shift", "auto_examples/cluster/plot_mini_batch_kmeans", "auto_examples/cluster/plot_optics", "auto_examples/cluster/plot_segmentation_toy", "auto_examples/cluster/plot_ward_structured_vs_unstructured", "auto_examples/compose/index", "auto_examples/compose/plot_column_transformer", "auto_examples/compose/plot_column_transformer_mixed_types", "auto_examples/compose/plot_compare_reduction", "auto_examples/compose/plot_digits_pipe", "auto_examples/compose/plot_feature_union", "auto_examples/compose/plot_transformed_target", "auto_examples/covariance/index", "auto_examples/covariance/plot_covariance_estimation", "auto_examples/covariance/plot_lw_vs_oas", "auto_examples/covariance/plot_mahalanobis_distances", "auto_examples/covariance/plot_robust_vs_empirical_covariance", "auto_examples/covariance/plot_sparse_cov", "auto_examples/cross_decomposition/index", "auto_examples/cross_decomposition/plot_compare_cross_decomposition", "auto_examples/cross_decomposition/plot_pcr_vs_pls", "auto_examples/datasets/index", "auto_examples/datasets/plot_digits_last_image", "auto_examples/datasets/plot_iris_dataset", "auto_examples/datasets/plot_random_dataset", "auto_examples/datasets/plot_random_multilabel_dataset", "auto_examples/decomposition/index", "auto_examples/decomposition/plot_faces_decomposition", "auto_examples/decomposition/plot_ica_blind_source_separation", "auto_examples/decomposition/plot_ica_vs_pca", "auto_examples/decomposition/plot_image_denoising", "auto_examples/decomposition/plot_incremental_pca", "auto_examples/decomposition/plot_kernel_pca", "auto_examples/decomposition/plot_pca_iris", "auto_examples/decomposition/plot_pca_vs_fa_model_selection", "auto_examples/decomposition/plot_pca_vs_lda", "auto_examples/decomposition/plot_sparse_coding", "auto_examples/decomposition/plot_varimax_fa", "auto_examples/developing_estimators/index", "auto_examples/developing_estimators/sklearn_is_fitted", "auto_examples/ensemble/index", "auto_examples/ensemble/plot_adaboost_multiclass", "auto_examples/ensemble/plot_adaboost_regression", "auto_examples/ensemble/plot_adaboost_twoclass", "auto_examples/ensemble/plot_bias_variance", "auto_examples/ensemble/plot_ensemble_oob", "auto_examples/ensemble/plot_feature_transformation", "auto_examples/ensemble/plot_forest_hist_grad_boosting_comparison", "auto_examples/ensemble/plot_forest_importances", "auto_examples/ensemble/plot_forest_importances_faces", "auto_examples/ensemble/plot_forest_iris", "auto_examples/ensemble/plot_gradient_boosting_categorical", "auto_examples/ensemble/plot_gradient_boosting_early_stopping", "auto_examples/ensemble/plot_gradient_boosting_oob", "auto_examples/ensemble/plot_gradient_boosting_quantile", "auto_examples/ensemble/plot_gradient_boosting_regression", "auto_examples/ensemble/plot_gradient_boosting_regularization", "auto_examples/ensemble/plot_isolation_forest", "auto_examples/ensemble/plot_monotonic_constraints", "auto_examples/ensemble/plot_random_forest_embedding", "auto_examples/ensemble/plot_random_forest_regression_multioutput", "auto_examples/ensemble/plot_stack_predictors", "auto_examples/ensemble/plot_voting_decision_regions", "auto_examples/ensemble/plot_voting_probas", "auto_examples/ensemble/plot_voting_regressor", "auto_examples/exercises/index", "auto_examples/exercises/plot_cv_diabetes", "auto_examples/exercises/plot_digits_classification_exercise", "auto_examples/exercises/plot_iris_exercise", "auto_examples/feature_selection/index", "auto_examples/feature_selection/plot_f_test_vs_mi", "auto_examples/feature_selection/plot_feature_selection", "auto_examples/feature_selection/plot_feature_selection_pipeline", "auto_examples/feature_selection/plot_rfe_digits", "auto_examples/feature_selection/plot_rfe_with_cross_validation", "auto_examples/feature_selection/plot_select_from_model_diabetes", "auto_examples/gaussian_process/index", "auto_examples/gaussian_process/plot_compare_gpr_krr", "auto_examples/gaussian_process/plot_gpc", "auto_examples/gaussian_process/plot_gpc_iris", "auto_examples/gaussian_process/plot_gpc_isoprobability", "auto_examples/gaussian_process/plot_gpc_xor", "auto_examples/gaussian_process/plot_gpr_co2", "auto_examples/gaussian_process/plot_gpr_noisy", "auto_examples/gaussian_process/plot_gpr_noisy_targets", "auto_examples/gaussian_process/plot_gpr_on_structured_data", "auto_examples/gaussian_process/plot_gpr_prior_posterior", "auto_examples/impute/index", "auto_examples/impute/plot_iterative_imputer_variants_comparison", "auto_examples/impute/plot_missing_values", "auto_examples/index", "auto_examples/inspection/index", "auto_examples/inspection/plot_causal_interpretation", "auto_examples/inspection/plot_linear_model_coefficient_interpretation", "auto_examples/inspection/plot_partial_dependence", "auto_examples/inspection/plot_permutation_importance", "auto_examples/inspection/plot_permutation_importance_multicollinear", "auto_examples/kernel_approximation/index", "auto_examples/kernel_approximation/plot_scalable_poly_kernels", "auto_examples/linear_model/index", "auto_examples/linear_model/plot_ard", "auto_examples/linear_model/plot_bayesian_ridge_curvefit", "auto_examples/linear_model/plot_elastic_net_precomputed_gram_matrix_with_weighted_samples", "auto_examples/linear_model/plot_huber_vs_ridge", "auto_examples/linear_model/plot_iris_logistic", "auto_examples/linear_model/plot_lasso_and_elasticnet", "auto_examples/linear_model/plot_lasso_coordinate_descent_path", "auto_examples/linear_model/plot_lasso_dense_vs_sparse_data", "auto_examples/linear_model/plot_lasso_lars", "auto_examples/linear_model/plot_lasso_lars_ic", "auto_examples/linear_model/plot_lasso_model_selection", "auto_examples/linear_model/plot_logistic", "auto_examples/linear_model/plot_logistic_l1_l2_sparsity", "auto_examples/linear_model/plot_logistic_multinomial", "auto_examples/linear_model/plot_logistic_path", "auto_examples/linear_model/plot_multi_task_lasso_support", "auto_examples/linear_model/plot_nnls", "auto_examples/linear_model/plot_ols", "auto_examples/linear_model/plot_ols_3d", "auto_examples/linear_model/plot_ols_ridge_variance", "auto_examples/linear_model/plot_omp", "auto_examples/linear_model/plot_poisson_regression_non_normal_loss", "auto_examples/linear_model/plot_polynomial_interpolation", "auto_examples/linear_model/plot_quantile_regression", "auto_examples/linear_model/plot_ransac", "auto_examples/linear_model/plot_ridge_coeffs", "auto_examples/linear_model/plot_ridge_path", "auto_examples/linear_model/plot_robust_fit", "auto_examples/linear_model/plot_sgd_comparison", "auto_examples/linear_model/plot_sgd_early_stopping", "auto_examples/linear_model/plot_sgd_iris", "auto_examples/linear_model/plot_sgd_loss_functions", "auto_examples/linear_model/plot_sgd_penalties", "auto_examples/linear_model/plot_sgd_separating_hyperplane", "auto_examples/linear_model/plot_sgd_weighted_samples", "auto_examples/linear_model/plot_sgdocsvm_vs_ocsvm", "auto_examples/linear_model/plot_sparse_logistic_regression_20newsgroups", "auto_examples/linear_model/plot_sparse_logistic_regression_mnist", "auto_examples/linear_model/plot_theilsen", "auto_examples/linear_model/plot_tweedie_regression_insurance_claims", "auto_examples/manifold/index", "auto_examples/manifold/plot_compare_methods", "auto_examples/manifold/plot_lle_digits", "auto_examples/manifold/plot_manifold_sphere", "auto_examples/manifold/plot_mds", "auto_examples/manifold/plot_swissroll", "auto_examples/manifold/plot_t_sne_perplexity", "auto_examples/miscellaneous/index", "auto_examples/miscellaneous/plot_anomaly_comparison", "auto_examples/miscellaneous/plot_display_object_visualization", "auto_examples/miscellaneous/plot_estimator_representation", "auto_examples/miscellaneous/plot_isotonic_regression", "auto_examples/miscellaneous/plot_johnson_lindenstrauss_bound", "auto_examples/miscellaneous/plot_kernel_approximation", "auto_examples/miscellaneous/plot_kernel_ridge_regression", "auto_examples/miscellaneous/plot_metadata_routing", "auto_examples/miscellaneous/plot_multilabel", "auto_examples/miscellaneous/plot_multioutput_face_completion", "auto_examples/miscellaneous/plot_outlier_detection_bench", "auto_examples/miscellaneous/plot_partial_dependence_visualization_api", "auto_examples/miscellaneous/plot_pipeline_display", "auto_examples/miscellaneous/plot_roc_curve_visualization_api", "auto_examples/miscellaneous/plot_set_output", "auto_examples/mixture/index", "auto_examples/mixture/plot_concentration_prior", "auto_examples/mixture/plot_gmm", "auto_examples/mixture/plot_gmm_covariances", "auto_examples/mixture/plot_gmm_init", "auto_examples/mixture/plot_gmm_pdf", "auto_examples/mixture/plot_gmm_selection", "auto_examples/mixture/plot_gmm_sin", "auto_examples/model_selection/index", "auto_examples/model_selection/plot_confusion_matrix", "auto_examples/model_selection/plot_cv_indices", "auto_examples/model_selection/plot_cv_predict", "auto_examples/model_selection/plot_det", "auto_examples/model_selection/plot_grid_search_digits", "auto_examples/model_selection/plot_grid_search_refit_callable", "auto_examples/model_selection/plot_grid_search_stats", "auto_examples/model_selection/plot_grid_search_text_feature_extraction", "auto_examples/model_selection/plot_learning_curve", "auto_examples/model_selection/plot_likelihood_ratios", "auto_examples/model_selection/plot_multi_metric_evaluation", "auto_examples/model_selection/plot_nested_cross_validation_iris", "auto_examples/model_selection/plot_permutation_tests_for_classification", "auto_examples/model_selection/plot_precision_recall", "auto_examples/model_selection/plot_randomized_search", "auto_examples/model_selection/plot_roc", "auto_examples/model_selection/plot_roc_crossval", "auto_examples/model_selection/plot_successive_halving_heatmap", "auto_examples/model_selection/plot_successive_halving_iterations", "auto_examples/model_selection/plot_train_error_vs_test_error", "auto_examples/model_selection/plot_underfitting_overfitting", "auto_examples/model_selection/plot_validation_curve", "auto_examples/multiclass/index", "auto_examples/multiclass/plot_multiclass_overview", "auto_examples/multioutput/index", "auto_examples/multioutput/plot_classifier_chain_yeast", "auto_examples/neighbors/approximate_nearest_neighbors", "auto_examples/neighbors/index", "auto_examples/neighbors/plot_caching_nearest_neighbors", "auto_examples/neighbors/plot_classification", "auto_examples/neighbors/plot_digits_kde_sampling", "auto_examples/neighbors/plot_kde_1d", "auto_examples/neighbors/plot_lof_novelty_detection", "auto_examples/neighbors/plot_lof_outlier_detection", "auto_examples/neighbors/plot_nca_classification", "auto_examples/neighbors/plot_nca_dim_reduction", "auto_examples/neighbors/plot_nca_illustration", "auto_examples/neighbors/plot_nearest_centroid", "auto_examples/neighbors/plot_regression", "auto_examples/neighbors/plot_species_kde", "auto_examples/neural_networks/index", "auto_examples/neural_networks/plot_mlp_alpha", "auto_examples/neural_networks/plot_mlp_training_curves", "auto_examples/neural_networks/plot_mnist_filters", "auto_examples/neural_networks/plot_rbm_logistic_classification", "auto_examples/preprocessing/index", "auto_examples/preprocessing/plot_all_scaling", "auto_examples/preprocessing/plot_discretization", "auto_examples/preprocessing/plot_discretization_classification", "auto_examples/preprocessing/plot_discretization_strategies", "auto_examples/preprocessing/plot_map_data_to_normal", "auto_examples/preprocessing/plot_scaling_importance", "auto_examples/preprocessing/plot_target_encoder", "auto_examples/preprocessing/plot_target_encoder_cross_val", "auto_examples/release_highlights/index", "auto_examples/release_highlights/plot_release_highlights_0_22_0", "auto_examples/release_highlights/plot_release_highlights_0_23_0", "auto_examples/release_highlights/plot_release_highlights_0_24_0", "auto_examples/release_highlights/plot_release_highlights_1_0_0", "auto_examples/release_highlights/plot_release_highlights_1_1_0", "auto_examples/release_highlights/plot_release_highlights_1_2_0", "auto_examples/release_highlights/plot_release_highlights_1_3_0", "auto_examples/release_highlights/plot_release_highlights_1_4_0", "auto_examples/semi_supervised/index", "auto_examples/semi_supervised/plot_label_propagation_digits", "auto_examples/semi_supervised/plot_label_propagation_digits_active_learning", "auto_examples/semi_supervised/plot_label_propagation_structure", "auto_examples/semi_supervised/plot_self_training_varying_threshold", "auto_examples/semi_supervised/plot_semi_supervised_newsgroups", "auto_examples/semi_supervised/plot_semi_supervised_versus_svm_iris", "auto_examples/svm/index", "auto_examples/svm/plot_custom_kernel", "auto_examples/svm/plot_iris_svc", "auto_examples/svm/plot_linearsvc_support_vectors", "auto_examples/svm/plot_oneclass", "auto_examples/svm/plot_rbf_parameters", "auto_examples/svm/plot_separating_hyperplane", "auto_examples/svm/plot_separating_hyperplane_unbalanced", "auto_examples/svm/plot_svm_anova", "auto_examples/svm/plot_svm_kernels", "auto_examples/svm/plot_svm_margin", "auto_examples/svm/plot_svm_nonlinear", "auto_examples/svm/plot_svm_regression", "auto_examples/svm/plot_svm_scale_c", "auto_examples/svm/plot_svm_tie_breaking", "auto_examples/svm/plot_weighted_samples", "auto_examples/text/index", "auto_examples/text/plot_document_classification_20newsgroups", "auto_examples/text/plot_document_clustering", "auto_examples/text/plot_hashing_vs_dict_vectorizer", "auto_examples/tree/index", "auto_examples/tree/plot_cost_complexity_pruning", "auto_examples/tree/plot_iris_dtc", "auto_examples/tree/plot_tree_regression", "auto_examples/tree/plot_tree_regression_multioutput", "auto_examples/tree/plot_unveil_tree_structure", "common_pitfalls", "communication_team", "communication_team_emeritus", "computing", "computing/computational_performance", "computing/parallelism", "computing/scaling_strategies", "contributor_experience_team", "contributor_experience_team_emeritus", "data_transforms", "datasets", "datasets/loading_other_datasets", "datasets/real_world", "datasets/sample_generators", "datasets/toy_dataset", "developers/advanced_installation", "developers/bug_triaging", "developers/contributing", "developers/cython", "developers/develop", "developers/index", "developers/maintainer", "developers/minimal_reproducer", "developers/performance", "developers/plotting", "developers/tips", "developers/utilities", "dispatching", "documentation_team", "faq", "getting_started", "glossary", "governance", "index", "inspection", "install", "metadata_routing", "min_dependency_substitutions", "min_dependency_table", "model_persistence", "model_selection", "modules/array_api", "modules/biclustering", "modules/calibration", "modules/classes", "modules/clustering", "modules/compose", "modules/covariance", "modules/cross_decomposition", "modules/cross_validation", "modules/decomposition", "modules/density", "modules/ensemble", "modules/feature_extraction", "modules/feature_selection", "modules/gaussian_process", "modules/generated/dbscan-function", "modules/generated/fastica-function", "modules/generated/oas-function", "modules/generated/sklearn.base.BaseEstimator", "modules/generated/sklearn.base.BiclusterMixin", "modules/generated/sklearn.base.ClassNamePrefixFeaturesOutMixin", "modules/generated/sklearn.base.ClassifierMixin", "modules/generated/sklearn.base.ClusterMixin", "modules/generated/sklearn.base.DensityMixin", "modules/generated/sklearn.base.MetaEstimatorMixin", "modules/generated/sklearn.base.OneToOneFeatureMixin", "modules/generated/sklearn.base.OutlierMixin", "modules/generated/sklearn.base.RegressorMixin", "modules/generated/sklearn.base.TransformerMixin", "modules/generated/sklearn.base.clone", "modules/generated/sklearn.base.is_classifier", "modules/generated/sklearn.base.is_regressor", "modules/generated/sklearn.calibration.CalibratedClassifierCV", "modules/generated/sklearn.calibration.CalibrationDisplay", "modules/generated/sklearn.calibration.calibration_curve", "modules/generated/sklearn.cluster.AffinityPropagation", "modules/generated/sklearn.cluster.AgglomerativeClustering", "modules/generated/sklearn.cluster.Birch", "modules/generated/sklearn.cluster.BisectingKMeans", "modules/generated/sklearn.cluster.DBSCAN", "modules/generated/sklearn.cluster.FeatureAgglomeration", "modules/generated/sklearn.cluster.HDBSCAN", "modules/generated/sklearn.cluster.KMeans", "modules/generated/sklearn.cluster.MeanShift", "modules/generated/sklearn.cluster.MiniBatchKMeans", "modules/generated/sklearn.cluster.OPTICS", "modules/generated/sklearn.cluster.SpectralBiclustering", "modules/generated/sklearn.cluster.SpectralClustering", "modules/generated/sklearn.cluster.SpectralCoclustering", "modules/generated/sklearn.cluster.affinity_propagation", "modules/generated/sklearn.cluster.cluster_optics_dbscan", "modules/generated/sklearn.cluster.cluster_optics_xi", "modules/generated/sklearn.cluster.compute_optics_graph", "modules/generated/sklearn.cluster.estimate_bandwidth", "modules/generated/sklearn.cluster.k_means", "modules/generated/sklearn.cluster.kmeans_plusplus", "modules/generated/sklearn.cluster.mean_shift", "modules/generated/sklearn.cluster.spectral_clustering", "modules/generated/sklearn.cluster.ward_tree", "modules/generated/sklearn.compose.ColumnTransformer", "modules/generated/sklearn.compose.TransformedTargetRegressor", "modules/generated/sklearn.compose.make_column_selector", "modules/generated/sklearn.compose.make_column_transformer", "modules/generated/sklearn.config_context", "modules/generated/sklearn.covariance.EllipticEnvelope", "modules/generated/sklearn.covariance.EmpiricalCovariance", "modules/generated/sklearn.covariance.GraphicalLasso", "modules/generated/sklearn.covariance.GraphicalLassoCV", "modules/generated/sklearn.covariance.LedoitWolf", "modules/generated/sklearn.covariance.MinCovDet", "modules/generated/sklearn.covariance.OAS", "modules/generated/sklearn.covariance.ShrunkCovariance", "modules/generated/sklearn.covariance.empirical_covariance", "modules/generated/sklearn.covariance.graphical_lasso", "modules/generated/sklearn.covariance.ledoit_wolf", "modules/generated/sklearn.covariance.ledoit_wolf_shrinkage", "modules/generated/sklearn.covariance.shrunk_covariance", "modules/generated/sklearn.cross_decomposition.CCA", "modules/generated/sklearn.cross_decomposition.PLSCanonical", "modules/generated/sklearn.cross_decomposition.PLSRegression", "modules/generated/sklearn.cross_decomposition.PLSSVD", "modules/generated/sklearn.datasets.clear_data_home", "modules/generated/sklearn.datasets.dump_svmlight_file", "modules/generated/sklearn.datasets.fetch_20newsgroups", "modules/generated/sklearn.datasets.fetch_20newsgroups_vectorized", "modules/generated/sklearn.datasets.fetch_california_housing", "modules/generated/sklearn.datasets.fetch_covtype", "modules/generated/sklearn.datasets.fetch_kddcup99", "modules/generated/sklearn.datasets.fetch_lfw_pairs", "modules/generated/sklearn.datasets.fetch_lfw_people", "modules/generated/sklearn.datasets.fetch_olivetti_faces", "modules/generated/sklearn.datasets.fetch_openml", "modules/generated/sklearn.datasets.fetch_rcv1", "modules/generated/sklearn.datasets.fetch_species_distributions", "modules/generated/sklearn.datasets.get_data_home", "modules/generated/sklearn.datasets.load_breast_cancer", "modules/generated/sklearn.datasets.load_diabetes", "modules/generated/sklearn.datasets.load_digits", "modules/generated/sklearn.datasets.load_files", "modules/generated/sklearn.datasets.load_iris", "modules/generated/sklearn.datasets.load_linnerud", "modules/generated/sklearn.datasets.load_sample_image", "modules/generated/sklearn.datasets.load_sample_images", "modules/generated/sklearn.datasets.load_svmlight_file", "modules/generated/sklearn.datasets.load_svmlight_files", "modules/generated/sklearn.datasets.load_wine", "modules/generated/sklearn.datasets.make_biclusters", "modules/generated/sklearn.datasets.make_blobs", "modules/generated/sklearn.datasets.make_checkerboard", "modules/generated/sklearn.datasets.make_circles", "modules/generated/sklearn.datasets.make_classification", "modules/generated/sklearn.datasets.make_friedman1", "modules/generated/sklearn.datasets.make_friedman2", "modules/generated/sklearn.datasets.make_friedman3", "modules/generated/sklearn.datasets.make_gaussian_quantiles", "modules/generated/sklearn.datasets.make_hastie_10_2", "modules/generated/sklearn.datasets.make_low_rank_matrix", "modules/generated/sklearn.datasets.make_moons", "modules/generated/sklearn.datasets.make_multilabel_classification", "modules/generated/sklearn.datasets.make_regression", "modules/generated/sklearn.datasets.make_s_curve", "modules/generated/sklearn.datasets.make_sparse_coded_signal", "modules/generated/sklearn.datasets.make_sparse_spd_matrix", "modules/generated/sklearn.datasets.make_sparse_uncorrelated", "modules/generated/sklearn.datasets.make_spd_matrix", "modules/generated/sklearn.datasets.make_swiss_roll", "modules/generated/sklearn.decomposition.DictionaryLearning", "modules/generated/sklearn.decomposition.FactorAnalysis", "modules/generated/sklearn.decomposition.FastICA", "modules/generated/sklearn.decomposition.IncrementalPCA", "modules/generated/sklearn.decomposition.KernelPCA", "modules/generated/sklearn.decomposition.LatentDirichletAllocation", "modules/generated/sklearn.decomposition.MiniBatchDictionaryLearning", "modules/generated/sklearn.decomposition.MiniBatchNMF", "modules/generated/sklearn.decomposition.MiniBatchSparsePCA", "modules/generated/sklearn.decomposition.NMF", "modules/generated/sklearn.decomposition.PCA", "modules/generated/sklearn.decomposition.SparseCoder", "modules/generated/sklearn.decomposition.SparsePCA", "modules/generated/sklearn.decomposition.TruncatedSVD", "modules/generated/sklearn.decomposition.dict_learning", "modules/generated/sklearn.decomposition.dict_learning_online", "modules/generated/sklearn.decomposition.non_negative_factorization", "modules/generated/sklearn.decomposition.sparse_encode", "modules/generated/sklearn.discriminant_analysis.LinearDiscriminantAnalysis", "modules/generated/sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis", "modules/generated/sklearn.dummy.DummyClassifier", "modules/generated/sklearn.dummy.DummyRegressor", "modules/generated/sklearn.ensemble.AdaBoostClassifier", "modules/generated/sklearn.ensemble.AdaBoostRegressor", "modules/generated/sklearn.ensemble.BaggingClassifier", "modules/generated/sklearn.ensemble.BaggingRegressor", "modules/generated/sklearn.ensemble.ExtraTreesClassifier", "modules/generated/sklearn.ensemble.ExtraTreesRegressor", "modules/generated/sklearn.ensemble.GradientBoostingClassifier", "modules/generated/sklearn.ensemble.GradientBoostingRegressor", "modules/generated/sklearn.ensemble.HistGradientBoostingClassifier", "modules/generated/sklearn.ensemble.HistGradientBoostingRegressor", "modules/generated/sklearn.ensemble.IsolationForest", "modules/generated/sklearn.ensemble.RandomForestClassifier", "modules/generated/sklearn.ensemble.RandomForestRegressor", "modules/generated/sklearn.ensemble.RandomTreesEmbedding", "modules/generated/sklearn.ensemble.StackingClassifier", "modules/generated/sklearn.ensemble.StackingRegressor", "modules/generated/sklearn.ensemble.VotingClassifier", "modules/generated/sklearn.ensemble.VotingRegressor", "modules/generated/sklearn.exceptions.ConvergenceWarning", "modules/generated/sklearn.exceptions.DataConversionWarning", "modules/generated/sklearn.exceptions.DataDimensionalityWarning", "modules/generated/sklearn.exceptions.EfficiencyWarning", "modules/generated/sklearn.exceptions.FitFailedWarning", "modules/generated/sklearn.exceptions.InconsistentVersionWarning", "modules/generated/sklearn.exceptions.NotFittedError", "modules/generated/sklearn.exceptions.UndefinedMetricWarning", "modules/generated/sklearn.experimental.enable_halving_search_cv", "modules/generated/sklearn.experimental.enable_iterative_imputer", "modules/generated/sklearn.feature_extraction.DictVectorizer", "modules/generated/sklearn.feature_extraction.FeatureHasher", "modules/generated/sklearn.feature_extraction.image.PatchExtractor", "modules/generated/sklearn.feature_extraction.image.extract_patches_2d", "modules/generated/sklearn.feature_extraction.image.grid_to_graph", "modules/generated/sklearn.feature_extraction.image.img_to_graph", "modules/generated/sklearn.feature_extraction.image.reconstruct_from_patches_2d", "modules/generated/sklearn.feature_extraction.text.CountVectorizer", "modules/generated/sklearn.feature_extraction.text.HashingVectorizer", "modules/generated/sklearn.feature_extraction.text.TfidfTransformer", "modules/generated/sklearn.feature_extraction.text.TfidfVectorizer", "modules/generated/sklearn.feature_selection.GenericUnivariateSelect", "modules/generated/sklearn.feature_selection.RFE", "modules/generated/sklearn.feature_selection.RFECV", "modules/generated/sklearn.feature_selection.SelectFdr", "modules/generated/sklearn.feature_selection.SelectFpr", "modules/generated/sklearn.feature_selection.SelectFromModel", "modules/generated/sklearn.feature_selection.SelectFwe", "modules/generated/sklearn.feature_selection.SelectKBest", "modules/generated/sklearn.feature_selection.SelectPercentile", "modules/generated/sklearn.feature_selection.SelectorMixin", "modules/generated/sklearn.feature_selection.SequentialFeatureSelector", "modules/generated/sklearn.feature_selection.VarianceThreshold", "modules/generated/sklearn.feature_selection.chi2", "modules/generated/sklearn.feature_selection.f_classif", "modules/generated/sklearn.feature_selection.f_regression", "modules/generated/sklearn.feature_selection.mutual_info_classif", "modules/generated/sklearn.feature_selection.mutual_info_regression", "modules/generated/sklearn.feature_selection.r_regression", "modules/generated/sklearn.gaussian_process.GaussianProcessClassifier", "modules/generated/sklearn.gaussian_process.GaussianProcessRegressor", "modules/generated/sklearn.gaussian_process.kernels.CompoundKernel", "modules/generated/sklearn.gaussian_process.kernels.ConstantKernel", "modules/generated/sklearn.gaussian_process.kernels.DotProduct", "modules/generated/sklearn.gaussian_process.kernels.ExpSineSquared", "modules/generated/sklearn.gaussian_process.kernels.Exponentiation", "modules/generated/sklearn.gaussian_process.kernels.Hyperparameter", "modules/generated/sklearn.gaussian_process.kernels.Kernel", "modules/generated/sklearn.gaussian_process.kernels.Matern", "modules/generated/sklearn.gaussian_process.kernels.PairwiseKernel", "modules/generated/sklearn.gaussian_process.kernels.Product", "modules/generated/sklearn.gaussian_process.kernels.RBF", "modules/generated/sklearn.gaussian_process.kernels.RationalQuadratic", "modules/generated/sklearn.gaussian_process.kernels.Sum", "modules/generated/sklearn.gaussian_process.kernels.WhiteKernel", "modules/generated/sklearn.get_config", "modules/generated/sklearn.impute.IterativeImputer", "modules/generated/sklearn.impute.KNNImputer", "modules/generated/sklearn.impute.MissingIndicator", "modules/generated/sklearn.impute.SimpleImputer", "modules/generated/sklearn.inspection.DecisionBoundaryDisplay", "modules/generated/sklearn.inspection.PartialDependenceDisplay", "modules/generated/sklearn.inspection.partial_dependence", "modules/generated/sklearn.inspection.permutation_importance", "modules/generated/sklearn.isotonic.IsotonicRegression", "modules/generated/sklearn.isotonic.check_increasing", "modules/generated/sklearn.isotonic.isotonic_regression", "modules/generated/sklearn.kernel_approximation.AdditiveChi2Sampler", "modules/generated/sklearn.kernel_approximation.Nystroem", "modules/generated/sklearn.kernel_approximation.PolynomialCountSketch", "modules/generated/sklearn.kernel_approximation.RBFSampler", "modules/generated/sklearn.kernel_approximation.SkewedChi2Sampler", "modules/generated/sklearn.kernel_ridge.KernelRidge", "modules/generated/sklearn.linear_model.ARDRegression", "modules/generated/sklearn.linear_model.BayesianRidge", "modules/generated/sklearn.linear_model.ElasticNet", "modules/generated/sklearn.linear_model.ElasticNetCV", "modules/generated/sklearn.linear_model.GammaRegressor", "modules/generated/sklearn.linear_model.HuberRegressor", "modules/generated/sklearn.linear_model.Lars", "modules/generated/sklearn.linear_model.LarsCV", "modules/generated/sklearn.linear_model.Lasso", "modules/generated/sklearn.linear_model.LassoCV", "modules/generated/sklearn.linear_model.LassoLars", "modules/generated/sklearn.linear_model.LassoLarsCV", "modules/generated/sklearn.linear_model.LassoLarsIC", "modules/generated/sklearn.linear_model.LinearRegression", "modules/generated/sklearn.linear_model.LogisticRegression", "modules/generated/sklearn.linear_model.LogisticRegressionCV", "modules/generated/sklearn.linear_model.MultiTaskElasticNet", "modules/generated/sklearn.linear_model.MultiTaskElasticNetCV", "modules/generated/sklearn.linear_model.MultiTaskLasso", "modules/generated/sklearn.linear_model.MultiTaskLassoCV", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuit", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuitCV", "modules/generated/sklearn.linear_model.PassiveAggressiveClassifier", "modules/generated/sklearn.linear_model.PassiveAggressiveRegressor", "modules/generated/sklearn.linear_model.Perceptron", "modules/generated/sklearn.linear_model.PoissonRegressor", "modules/generated/sklearn.linear_model.QuantileRegressor", "modules/generated/sklearn.linear_model.RANSACRegressor", "modules/generated/sklearn.linear_model.Ridge", "modules/generated/sklearn.linear_model.RidgeCV", "modules/generated/sklearn.linear_model.RidgeClassifier", "modules/generated/sklearn.linear_model.RidgeClassifierCV", "modules/generated/sklearn.linear_model.SGDClassifier", "modules/generated/sklearn.linear_model.SGDOneClassSVM", "modules/generated/sklearn.linear_model.SGDRegressor", "modules/generated/sklearn.linear_model.TheilSenRegressor", "modules/generated/sklearn.linear_model.TweedieRegressor", "modules/generated/sklearn.linear_model.enet_path", "modules/generated/sklearn.linear_model.lars_path", "modules/generated/sklearn.linear_model.lars_path_gram", "modules/generated/sklearn.linear_model.lasso_path", "modules/generated/sklearn.linear_model.orthogonal_mp", "modules/generated/sklearn.linear_model.orthogonal_mp_gram", "modules/generated/sklearn.linear_model.ridge_regression", "modules/generated/sklearn.manifold.Isomap", "modules/generated/sklearn.manifold.LocallyLinearEmbedding", "modules/generated/sklearn.manifold.MDS", "modules/generated/sklearn.manifold.SpectralEmbedding", "modules/generated/sklearn.manifold.TSNE", "modules/generated/sklearn.manifold.locally_linear_embedding", "modules/generated/sklearn.manifold.smacof", "modules/generated/sklearn.manifold.spectral_embedding", "modules/generated/sklearn.manifold.trustworthiness", "modules/generated/sklearn.metrics.ConfusionMatrixDisplay", "modules/generated/sklearn.metrics.DetCurveDisplay", "modules/generated/sklearn.metrics.DistanceMetric", "modules/generated/sklearn.metrics.PrecisionRecallDisplay", "modules/generated/sklearn.metrics.PredictionErrorDisplay", "modules/generated/sklearn.metrics.RocCurveDisplay", "modules/generated/sklearn.metrics.accuracy_score", "modules/generated/sklearn.metrics.adjusted_mutual_info_score", "modules/generated/sklearn.metrics.adjusted_rand_score", "modules/generated/sklearn.metrics.auc", "modules/generated/sklearn.metrics.average_precision_score", "modules/generated/sklearn.metrics.balanced_accuracy_score", "modules/generated/sklearn.metrics.brier_score_loss", "modules/generated/sklearn.metrics.calinski_harabasz_score", "modules/generated/sklearn.metrics.check_scoring", "modules/generated/sklearn.metrics.class_likelihood_ratios", "modules/generated/sklearn.metrics.classification_report", "modules/generated/sklearn.metrics.cluster.contingency_matrix", "modules/generated/sklearn.metrics.cluster.pair_confusion_matrix", "modules/generated/sklearn.metrics.cohen_kappa_score", "modules/generated/sklearn.metrics.completeness_score", "modules/generated/sklearn.metrics.confusion_matrix", "modules/generated/sklearn.metrics.consensus_score", "modules/generated/sklearn.metrics.coverage_error", "modules/generated/sklearn.metrics.d2_absolute_error_score", "modules/generated/sklearn.metrics.d2_pinball_score", "modules/generated/sklearn.metrics.d2_tweedie_score", "modules/generated/sklearn.metrics.davies_bouldin_score", "modules/generated/sklearn.metrics.dcg_score", "modules/generated/sklearn.metrics.det_curve", "modules/generated/sklearn.metrics.explained_variance_score", "modules/generated/sklearn.metrics.f1_score", "modules/generated/sklearn.metrics.fbeta_score", "modules/generated/sklearn.metrics.fowlkes_mallows_score", "modules/generated/sklearn.metrics.get_scorer", "modules/generated/sklearn.metrics.get_scorer_names", "modules/generated/sklearn.metrics.hamming_loss", "modules/generated/sklearn.metrics.hinge_loss", "modules/generated/sklearn.metrics.homogeneity_completeness_v_measure", "modules/generated/sklearn.metrics.homogeneity_score", "modules/generated/sklearn.metrics.jaccard_score", "modules/generated/sklearn.metrics.label_ranking_average_precision_score", "modules/generated/sklearn.metrics.label_ranking_loss", "modules/generated/sklearn.metrics.log_loss", "modules/generated/sklearn.metrics.make_scorer", "modules/generated/sklearn.metrics.matthews_corrcoef", "modules/generated/sklearn.metrics.max_error", "modules/generated/sklearn.metrics.mean_absolute_error", "modules/generated/sklearn.metrics.mean_absolute_percentage_error", "modules/generated/sklearn.metrics.mean_gamma_deviance", "modules/generated/sklearn.metrics.mean_pinball_loss", "modules/generated/sklearn.metrics.mean_poisson_deviance", "modules/generated/sklearn.metrics.mean_squared_error", "modules/generated/sklearn.metrics.mean_squared_log_error", "modules/generated/sklearn.metrics.mean_tweedie_deviance", "modules/generated/sklearn.metrics.median_absolute_error", "modules/generated/sklearn.metrics.multilabel_confusion_matrix", "modules/generated/sklearn.metrics.mutual_info_score", "modules/generated/sklearn.metrics.ndcg_score", "modules/generated/sklearn.metrics.normalized_mutual_info_score", "modules/generated/sklearn.metrics.pairwise.additive_chi2_kernel", "modules/generated/sklearn.metrics.pairwise.chi2_kernel", "modules/generated/sklearn.metrics.pairwise.cosine_distances", "modules/generated/sklearn.metrics.pairwise.cosine_similarity", "modules/generated/sklearn.metrics.pairwise.distance_metrics", "modules/generated/sklearn.metrics.pairwise.euclidean_distances", "modules/generated/sklearn.metrics.pairwise.haversine_distances", "modules/generated/sklearn.metrics.pairwise.kernel_metrics", "modules/generated/sklearn.metrics.pairwise.laplacian_kernel", "modules/generated/sklearn.metrics.pairwise.linear_kernel", "modules/generated/sklearn.metrics.pairwise.manhattan_distances", "modules/generated/sklearn.metrics.pairwise.nan_euclidean_distances", "modules/generated/sklearn.metrics.pairwise.paired_cosine_distances", "modules/generated/sklearn.metrics.pairwise.paired_distances", "modules/generated/sklearn.metrics.pairwise.paired_euclidean_distances", "modules/generated/sklearn.metrics.pairwise.paired_manhattan_distances", "modules/generated/sklearn.metrics.pairwise.pairwise_kernels", "modules/generated/sklearn.metrics.pairwise.polynomial_kernel", "modules/generated/sklearn.metrics.pairwise.rbf_kernel", "modules/generated/sklearn.metrics.pairwise.sigmoid_kernel", "modules/generated/sklearn.metrics.pairwise_distances", "modules/generated/sklearn.metrics.pairwise_distances_argmin", "modules/generated/sklearn.metrics.pairwise_distances_argmin_min", "modules/generated/sklearn.metrics.pairwise_distances_chunked", "modules/generated/sklearn.metrics.precision_recall_curve", "modules/generated/sklearn.metrics.precision_recall_fscore_support", "modules/generated/sklearn.metrics.precision_score", "modules/generated/sklearn.metrics.r2_score", "modules/generated/sklearn.metrics.rand_score", "modules/generated/sklearn.metrics.recall_score", "modules/generated/sklearn.metrics.roc_auc_score", "modules/generated/sklearn.metrics.roc_curve", "modules/generated/sklearn.metrics.root_mean_squared_error", "modules/generated/sklearn.metrics.root_mean_squared_log_error", "modules/generated/sklearn.metrics.silhouette_samples", "modules/generated/sklearn.metrics.silhouette_score", "modules/generated/sklearn.metrics.top_k_accuracy_score", "modules/generated/sklearn.metrics.v_measure_score", "modules/generated/sklearn.metrics.zero_one_loss", "modules/generated/sklearn.mixture.BayesianGaussianMixture", "modules/generated/sklearn.mixture.GaussianMixture", "modules/generated/sklearn.model_selection.GridSearchCV", "modules/generated/sklearn.model_selection.GroupKFold", "modules/generated/sklearn.model_selection.GroupShuffleSplit", "modules/generated/sklearn.model_selection.HalvingGridSearchCV", "modules/generated/sklearn.model_selection.HalvingRandomSearchCV", "modules/generated/sklearn.model_selection.KFold", "modules/generated/sklearn.model_selection.LearningCurveDisplay", "modules/generated/sklearn.model_selection.LeaveOneGroupOut", "modules/generated/sklearn.model_selection.LeaveOneOut", "modules/generated/sklearn.model_selection.LeavePGroupsOut", "modules/generated/sklearn.model_selection.LeavePOut", "modules/generated/sklearn.model_selection.ParameterGrid", "modules/generated/sklearn.model_selection.ParameterSampler", "modules/generated/sklearn.model_selection.PredefinedSplit", "modules/generated/sklearn.model_selection.RandomizedSearchCV", "modules/generated/sklearn.model_selection.RepeatedKFold", "modules/generated/sklearn.model_selection.RepeatedStratifiedKFold", "modules/generated/sklearn.model_selection.ShuffleSplit", "modules/generated/sklearn.model_selection.StratifiedGroupKFold", "modules/generated/sklearn.model_selection.StratifiedKFold", "modules/generated/sklearn.model_selection.StratifiedShuffleSplit", "modules/generated/sklearn.model_selection.TimeSeriesSplit", "modules/generated/sklearn.model_selection.ValidationCurveDisplay", "modules/generated/sklearn.model_selection.check_cv", "modules/generated/sklearn.model_selection.cross_val_predict", "modules/generated/sklearn.model_selection.cross_val_score", "modules/generated/sklearn.model_selection.cross_validate", "modules/generated/sklearn.model_selection.learning_curve", "modules/generated/sklearn.model_selection.permutation_test_score", "modules/generated/sklearn.model_selection.train_test_split", "modules/generated/sklearn.model_selection.validation_curve", "modules/generated/sklearn.multiclass.OneVsOneClassifier", "modules/generated/sklearn.multiclass.OneVsRestClassifier", "modules/generated/sklearn.multiclass.OutputCodeClassifier", "modules/generated/sklearn.multioutput.ClassifierChain", "modules/generated/sklearn.multioutput.MultiOutputClassifier", "modules/generated/sklearn.multioutput.MultiOutputRegressor", "modules/generated/sklearn.multioutput.RegressorChain", "modules/generated/sklearn.naive_bayes.BernoulliNB", "modules/generated/sklearn.naive_bayes.CategoricalNB", "modules/generated/sklearn.naive_bayes.ComplementNB", "modules/generated/sklearn.naive_bayes.GaussianNB", "modules/generated/sklearn.naive_bayes.MultinomialNB", "modules/generated/sklearn.neighbors.BallTree", "modules/generated/sklearn.neighbors.KDTree", "modules/generated/sklearn.neighbors.KNeighborsClassifier", "modules/generated/sklearn.neighbors.KNeighborsRegressor", "modules/generated/sklearn.neighbors.KNeighborsTransformer", "modules/generated/sklearn.neighbors.KernelDensity", "modules/generated/sklearn.neighbors.LocalOutlierFactor", "modules/generated/sklearn.neighbors.NearestCentroid", "modules/generated/sklearn.neighbors.NearestNeighbors", "modules/generated/sklearn.neighbors.NeighborhoodComponentsAnalysis", "modules/generated/sklearn.neighbors.RadiusNeighborsClassifier", "modules/generated/sklearn.neighbors.RadiusNeighborsRegressor", "modules/generated/sklearn.neighbors.RadiusNeighborsTransformer", "modules/generated/sklearn.neighbors.kneighbors_graph", "modules/generated/sklearn.neighbors.radius_neighbors_graph", "modules/generated/sklearn.neighbors.sort_graph_by_row_values", "modules/generated/sklearn.neural_network.BernoulliRBM", "modules/generated/sklearn.neural_network.MLPClassifier", "modules/generated/sklearn.neural_network.MLPRegressor", "modules/generated/sklearn.pipeline.FeatureUnion", "modules/generated/sklearn.pipeline.Pipeline", "modules/generated/sklearn.pipeline.make_pipeline", "modules/generated/sklearn.pipeline.make_union", "modules/generated/sklearn.preprocessing.Binarizer", "modules/generated/sklearn.preprocessing.FunctionTransformer", "modules/generated/sklearn.preprocessing.KBinsDiscretizer", "modules/generated/sklearn.preprocessing.KernelCenterer", "modules/generated/sklearn.preprocessing.LabelBinarizer", "modules/generated/sklearn.preprocessing.LabelEncoder", "modules/generated/sklearn.preprocessing.MaxAbsScaler", "modules/generated/sklearn.preprocessing.MinMaxScaler", "modules/generated/sklearn.preprocessing.MultiLabelBinarizer", "modules/generated/sklearn.preprocessing.Normalizer", "modules/generated/sklearn.preprocessing.OneHotEncoder", "modules/generated/sklearn.preprocessing.OrdinalEncoder", "modules/generated/sklearn.preprocessing.PolynomialFeatures", "modules/generated/sklearn.preprocessing.PowerTransformer", "modules/generated/sklearn.preprocessing.QuantileTransformer", "modules/generated/sklearn.preprocessing.RobustScaler", "modules/generated/sklearn.preprocessing.SplineTransformer", "modules/generated/sklearn.preprocessing.StandardScaler", "modules/generated/sklearn.preprocessing.TargetEncoder", "modules/generated/sklearn.preprocessing.add_dummy_feature", "modules/generated/sklearn.preprocessing.binarize", "modules/generated/sklearn.preprocessing.label_binarize", "modules/generated/sklearn.preprocessing.maxabs_scale", "modules/generated/sklearn.preprocessing.minmax_scale", "modules/generated/sklearn.preprocessing.normalize", "modules/generated/sklearn.preprocessing.power_transform", "modules/generated/sklearn.preprocessing.quantile_transform", "modules/generated/sklearn.preprocessing.robust_scale", "modules/generated/sklearn.preprocessing.scale", "modules/generated/sklearn.random_projection.GaussianRandomProjection", "modules/generated/sklearn.random_projection.SparseRandomProjection", "modules/generated/sklearn.random_projection.johnson_lindenstrauss_min_dim", "modules/generated/sklearn.semi_supervised.LabelPropagation", "modules/generated/sklearn.semi_supervised.LabelSpreading", "modules/generated/sklearn.semi_supervised.SelfTrainingClassifier", "modules/generated/sklearn.set_config", "modules/generated/sklearn.show_versions", "modules/generated/sklearn.svm.LinearSVC", "modules/generated/sklearn.svm.LinearSVR", "modules/generated/sklearn.svm.NuSVC", "modules/generated/sklearn.svm.NuSVR", "modules/generated/sklearn.svm.OneClassSVM", "modules/generated/sklearn.svm.SVC", "modules/generated/sklearn.svm.SVR", "modules/generated/sklearn.svm.l1_min_c", "modules/generated/sklearn.tree.DecisionTreeClassifier", "modules/generated/sklearn.tree.DecisionTreeRegressor", "modules/generated/sklearn.tree.ExtraTreeClassifier", "modules/generated/sklearn.tree.ExtraTreeRegressor", "modules/generated/sklearn.tree.export_graphviz", "modules/generated/sklearn.tree.export_text", "modules/generated/sklearn.tree.plot_tree", "modules/generated/sklearn.utils.Bunch", "modules/generated/sklearn.utils._safe_indexing", "modules/generated/sklearn.utils.arrayfuncs.min_pos", "modules/generated/sklearn.utils.as_float_array", "modules/generated/sklearn.utils.assert_all_finite", "modules/generated/sklearn.utils.check_X_y", "modules/generated/sklearn.utils.check_array", "modules/generated/sklearn.utils.check_consistent_length", "modules/generated/sklearn.utils.check_random_state", "modules/generated/sklearn.utils.check_scalar", "modules/generated/sklearn.utils.class_weight.compute_class_weight", "modules/generated/sklearn.utils.class_weight.compute_sample_weight", "modules/generated/sklearn.utils.deprecated", "modules/generated/sklearn.utils.discovery.all_displays", "modules/generated/sklearn.utils.discovery.all_estimators", "modules/generated/sklearn.utils.discovery.all_functions", "modules/generated/sklearn.utils.estimator_checks.check_estimator", "modules/generated/sklearn.utils.estimator_checks.parametrize_with_checks", "modules/generated/sklearn.utils.estimator_html_repr", "modules/generated/sklearn.utils.extmath.density", "modules/generated/sklearn.utils.extmath.fast_logdet", "modules/generated/sklearn.utils.extmath.randomized_range_finder", "modules/generated/sklearn.utils.extmath.randomized_svd", "modules/generated/sklearn.utils.extmath.safe_sparse_dot", "modules/generated/sklearn.utils.extmath.weighted_mode", "modules/generated/sklearn.utils.gen_batches", "modules/generated/sklearn.utils.gen_even_slices", "modules/generated/sklearn.utils.graph.single_source_shortest_path_length", "modules/generated/sklearn.utils.indexable", "modules/generated/sklearn.utils.metadata_routing.MetadataRequest", "modules/generated/sklearn.utils.metadata_routing.MetadataRouter", "modules/generated/sklearn.utils.metadata_routing.MethodMapping", "modules/generated/sklearn.utils.metadata_routing.get_routing_for_object", "modules/generated/sklearn.utils.metadata_routing.process_routing", "modules/generated/sklearn.utils.metaestimators.available_if", "modules/generated/sklearn.utils.multiclass.is_multilabel", "modules/generated/sklearn.utils.multiclass.type_of_target", "modules/generated/sklearn.utils.multiclass.unique_labels", "modules/generated/sklearn.utils.murmurhash3_32", "modules/generated/sklearn.utils.parallel.Parallel", "modules/generated/sklearn.utils.parallel.delayed", "modules/generated/sklearn.utils.parallel_backend", "modules/generated/sklearn.utils.random.sample_without_replacement", "modules/generated/sklearn.utils.register_parallel_backend", "modules/generated/sklearn.utils.resample", "modules/generated/sklearn.utils.safe_mask", "modules/generated/sklearn.utils.safe_sqr", "modules/generated/sklearn.utils.shuffle", "modules/generated/sklearn.utils.sparsefuncs.incr_mean_variance_axis", "modules/generated/sklearn.utils.sparsefuncs.inplace_column_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_csr_column_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_row_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_column", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_row", "modules/generated/sklearn.utils.sparsefuncs.mean_variance_axis", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2", "modules/generated/sklearn.utils.validation.check_is_fitted", "modules/generated/sklearn.utils.validation.check_memory", "modules/generated/sklearn.utils.validation.check_symmetric", "modules/generated/sklearn.utils.validation.column_or_1d", "modules/generated/sklearn.utils.validation.has_fit_parameter", "modules/grid_search", "modules/impute", "modules/isotonic", "modules/kernel_approximation", "modules/kernel_ridge", "modules/lda_qda", "modules/learning_curve", "modules/linear_model", "modules/manifold", "modules/metrics", "modules/mixture", "modules/model_evaluation", "modules/multiclass", "modules/naive_bayes", "modules/neighbors", "modules/neural_networks_supervised", "modules/neural_networks_unsupervised", "modules/outlier_detection", "modules/partial_dependence", "modules/permutation_importance", "modules/pipeline", "modules/preprocessing", "modules/preprocessing_targets", "modules/random_projection", "modules/semi_supervised", "modules/sgd", "modules/svm", "modules/tree", "modules/unsupervised_reduction", "presentations", "related_projects", "roadmap", "sg_execution_times", "supervised_learning", "support", "testimonials/testimonials", "tutorial/basic/tutorial", "tutorial/index", "tutorial/machine_learning_map/index", "tutorial/statistical_inference/index", "tutorial/statistical_inference/model_selection", "tutorial/statistical_inference/putting_together", "tutorial/statistical_inference/settings", "tutorial/statistical_inference/supervised_learning", "tutorial/statistical_inference/unsupervised_learning", "tutorial/text_analytics/working_with_text_data", "unsupervised_learning", "user_guide", "visualizations", "whats_new", "whats_new/_contributors", "whats_new/older_versions", "whats_new/v0.13", "whats_new/v0.14", "whats_new/v0.15", "whats_new/v0.16", "whats_new/v0.17", "whats_new/v0.18", "whats_new/v0.19", "whats_new/v0.20", "whats_new/v0.21", "whats_new/v0.22", "whats_new/v0.23", "whats_new/v0.24", "whats_new/v1.0", "whats_new/v1.1", "whats_new/v1.2", "whats_new/v1.3", "whats_new/v1.4", "whats_new/v1.5"], "filenames": ["about.rst", "authors.rst", "authors_emeritus.rst", "auto_examples/applications/index.rst", "auto_examples/applications/plot_cyclical_feature_engineering.rst", "auto_examples/applications/plot_digits_denoising.rst", "auto_examples/applications/plot_face_recognition.rst", "auto_examples/applications/plot_model_complexity_influence.rst", "auto_examples/applications/plot_out_of_core_classification.rst", "auto_examples/applications/plot_outlier_detection_wine.rst", "auto_examples/applications/plot_prediction_latency.rst", "auto_examples/applications/plot_species_distribution_modeling.rst", "auto_examples/applications/plot_stock_market.rst", "auto_examples/applications/plot_time_series_lagged_features.rst", "auto_examples/applications/plot_tomography_l1_reconstruction.rst", "auto_examples/applications/plot_topics_extraction_with_nmf_lda.rst", "auto_examples/applications/svm_gui.rst", "auto_examples/applications/wikipedia_principal_eigenvector.rst", "auto_examples/bicluster/index.rst", "auto_examples/bicluster/plot_bicluster_newsgroups.rst", "auto_examples/bicluster/plot_spectral_biclustering.rst", "auto_examples/bicluster/plot_spectral_coclustering.rst", "auto_examples/calibration/index.rst", "auto_examples/calibration/plot_calibration.rst", "auto_examples/calibration/plot_calibration_curve.rst", "auto_examples/calibration/plot_calibration_multiclass.rst", "auto_examples/calibration/plot_compare_calibration.rst", "auto_examples/classification/index.rst", "auto_examples/classification/plot_classification_probability.rst", "auto_examples/classification/plot_classifier_comparison.rst", "auto_examples/classification/plot_digits_classification.rst", "auto_examples/classification/plot_lda.rst", "auto_examples/classification/plot_lda_qda.rst", "auto_examples/cluster/index.rst", "auto_examples/cluster/plot_adjusted_for_chance_measures.rst", "auto_examples/cluster/plot_affinity_propagation.rst", "auto_examples/cluster/plot_agglomerative_clustering.rst", "auto_examples/cluster/plot_agglomerative_clustering_metrics.rst", "auto_examples/cluster/plot_agglomerative_dendrogram.rst", "auto_examples/cluster/plot_birch_vs_minibatchkmeans.rst", "auto_examples/cluster/plot_bisect_kmeans.rst", "auto_examples/cluster/plot_cluster_comparison.rst", "auto_examples/cluster/plot_cluster_iris.rst", "auto_examples/cluster/plot_coin_segmentation.rst", "auto_examples/cluster/plot_coin_ward_segmentation.rst", "auto_examples/cluster/plot_color_quantization.rst", "auto_examples/cluster/plot_dbscan.rst", "auto_examples/cluster/plot_dict_face_patches.rst", "auto_examples/cluster/plot_digits_agglomeration.rst", "auto_examples/cluster/plot_digits_linkage.rst", "auto_examples/cluster/plot_face_compress.rst", "auto_examples/cluster/plot_feature_agglomeration_vs_univariate_selection.rst", "auto_examples/cluster/plot_hdbscan.rst", "auto_examples/cluster/plot_inductive_clustering.rst", "auto_examples/cluster/plot_kmeans_assumptions.rst", "auto_examples/cluster/plot_kmeans_digits.rst", "auto_examples/cluster/plot_kmeans_plusplus.rst", "auto_examples/cluster/plot_kmeans_silhouette_analysis.rst", "auto_examples/cluster/plot_kmeans_stability_low_dim_dense.rst", "auto_examples/cluster/plot_linkage_comparison.rst", "auto_examples/cluster/plot_mean_shift.rst", "auto_examples/cluster/plot_mini_batch_kmeans.rst", "auto_examples/cluster/plot_optics.rst", "auto_examples/cluster/plot_segmentation_toy.rst", "auto_examples/cluster/plot_ward_structured_vs_unstructured.rst", "auto_examples/compose/index.rst", "auto_examples/compose/plot_column_transformer.rst", "auto_examples/compose/plot_column_transformer_mixed_types.rst", "auto_examples/compose/plot_compare_reduction.rst", "auto_examples/compose/plot_digits_pipe.rst", "auto_examples/compose/plot_feature_union.rst", "auto_examples/compose/plot_transformed_target.rst", "auto_examples/covariance/index.rst", "auto_examples/covariance/plot_covariance_estimation.rst", "auto_examples/covariance/plot_lw_vs_oas.rst", "auto_examples/covariance/plot_mahalanobis_distances.rst", "auto_examples/covariance/plot_robust_vs_empirical_covariance.rst", "auto_examples/covariance/plot_sparse_cov.rst", "auto_examples/cross_decomposition/index.rst", "auto_examples/cross_decomposition/plot_compare_cross_decomposition.rst", "auto_examples/cross_decomposition/plot_pcr_vs_pls.rst", "auto_examples/datasets/index.rst", "auto_examples/datasets/plot_digits_last_image.rst", "auto_examples/datasets/plot_iris_dataset.rst", "auto_examples/datasets/plot_random_dataset.rst", "auto_examples/datasets/plot_random_multilabel_dataset.rst", "auto_examples/decomposition/index.rst", "auto_examples/decomposition/plot_faces_decomposition.rst", "auto_examples/decomposition/plot_ica_blind_source_separation.rst", "auto_examples/decomposition/plot_ica_vs_pca.rst", "auto_examples/decomposition/plot_image_denoising.rst", "auto_examples/decomposition/plot_incremental_pca.rst", "auto_examples/decomposition/plot_kernel_pca.rst", "auto_examples/decomposition/plot_pca_iris.rst", "auto_examples/decomposition/plot_pca_vs_fa_model_selection.rst", "auto_examples/decomposition/plot_pca_vs_lda.rst", "auto_examples/decomposition/plot_sparse_coding.rst", "auto_examples/decomposition/plot_varimax_fa.rst", "auto_examples/developing_estimators/index.rst", "auto_examples/developing_estimators/sklearn_is_fitted.rst", "auto_examples/ensemble/index.rst", "auto_examples/ensemble/plot_adaboost_multiclass.rst", "auto_examples/ensemble/plot_adaboost_regression.rst", "auto_examples/ensemble/plot_adaboost_twoclass.rst", "auto_examples/ensemble/plot_bias_variance.rst", "auto_examples/ensemble/plot_ensemble_oob.rst", "auto_examples/ensemble/plot_feature_transformation.rst", "auto_examples/ensemble/plot_forest_hist_grad_boosting_comparison.rst", "auto_examples/ensemble/plot_forest_importances.rst", "auto_examples/ensemble/plot_forest_importances_faces.rst", "auto_examples/ensemble/plot_forest_iris.rst", "auto_examples/ensemble/plot_gradient_boosting_categorical.rst", "auto_examples/ensemble/plot_gradient_boosting_early_stopping.rst", "auto_examples/ensemble/plot_gradient_boosting_oob.rst", "auto_examples/ensemble/plot_gradient_boosting_quantile.rst", "auto_examples/ensemble/plot_gradient_boosting_regression.rst", "auto_examples/ensemble/plot_gradient_boosting_regularization.rst", "auto_examples/ensemble/plot_isolation_forest.rst", "auto_examples/ensemble/plot_monotonic_constraints.rst", "auto_examples/ensemble/plot_random_forest_embedding.rst", "auto_examples/ensemble/plot_random_forest_regression_multioutput.rst", "auto_examples/ensemble/plot_stack_predictors.rst", "auto_examples/ensemble/plot_voting_decision_regions.rst", "auto_examples/ensemble/plot_voting_probas.rst", "auto_examples/ensemble/plot_voting_regressor.rst", "auto_examples/exercises/index.rst", "auto_examples/exercises/plot_cv_diabetes.rst", "auto_examples/exercises/plot_digits_classification_exercise.rst", "auto_examples/exercises/plot_iris_exercise.rst", "auto_examples/feature_selection/index.rst", "auto_examples/feature_selection/plot_f_test_vs_mi.rst", "auto_examples/feature_selection/plot_feature_selection.rst", "auto_examples/feature_selection/plot_feature_selection_pipeline.rst", "auto_examples/feature_selection/plot_rfe_digits.rst", "auto_examples/feature_selection/plot_rfe_with_cross_validation.rst", "auto_examples/feature_selection/plot_select_from_model_diabetes.rst", "auto_examples/gaussian_process/index.rst", "auto_examples/gaussian_process/plot_compare_gpr_krr.rst", "auto_examples/gaussian_process/plot_gpc.rst", "auto_examples/gaussian_process/plot_gpc_iris.rst", "auto_examples/gaussian_process/plot_gpc_isoprobability.rst", "auto_examples/gaussian_process/plot_gpc_xor.rst", "auto_examples/gaussian_process/plot_gpr_co2.rst", "auto_examples/gaussian_process/plot_gpr_noisy.rst", "auto_examples/gaussian_process/plot_gpr_noisy_targets.rst", "auto_examples/gaussian_process/plot_gpr_on_structured_data.rst", "auto_examples/gaussian_process/plot_gpr_prior_posterior.rst", "auto_examples/impute/index.rst", "auto_examples/impute/plot_iterative_imputer_variants_comparison.rst", "auto_examples/impute/plot_missing_values.rst", "auto_examples/index.rst", "auto_examples/inspection/index.rst", "auto_examples/inspection/plot_causal_interpretation.rst", "auto_examples/inspection/plot_linear_model_coefficient_interpretation.rst", "auto_examples/inspection/plot_partial_dependence.rst", "auto_examples/inspection/plot_permutation_importance.rst", "auto_examples/inspection/plot_permutation_importance_multicollinear.rst", "auto_examples/kernel_approximation/index.rst", "auto_examples/kernel_approximation/plot_scalable_poly_kernels.rst", "auto_examples/linear_model/index.rst", "auto_examples/linear_model/plot_ard.rst", "auto_examples/linear_model/plot_bayesian_ridge_curvefit.rst", "auto_examples/linear_model/plot_elastic_net_precomputed_gram_matrix_with_weighted_samples.rst", "auto_examples/linear_model/plot_huber_vs_ridge.rst", "auto_examples/linear_model/plot_iris_logistic.rst", "auto_examples/linear_model/plot_lasso_and_elasticnet.rst", "auto_examples/linear_model/plot_lasso_coordinate_descent_path.rst", "auto_examples/linear_model/plot_lasso_dense_vs_sparse_data.rst", "auto_examples/linear_model/plot_lasso_lars.rst", "auto_examples/linear_model/plot_lasso_lars_ic.rst", "auto_examples/linear_model/plot_lasso_model_selection.rst", "auto_examples/linear_model/plot_logistic.rst", "auto_examples/linear_model/plot_logistic_l1_l2_sparsity.rst", "auto_examples/linear_model/plot_logistic_multinomial.rst", "auto_examples/linear_model/plot_logistic_path.rst", "auto_examples/linear_model/plot_multi_task_lasso_support.rst", "auto_examples/linear_model/plot_nnls.rst", "auto_examples/linear_model/plot_ols.rst", "auto_examples/linear_model/plot_ols_3d.rst", "auto_examples/linear_model/plot_ols_ridge_variance.rst", "auto_examples/linear_model/plot_omp.rst", "auto_examples/linear_model/plot_poisson_regression_non_normal_loss.rst", "auto_examples/linear_model/plot_polynomial_interpolation.rst", "auto_examples/linear_model/plot_quantile_regression.rst", "auto_examples/linear_model/plot_ransac.rst", "auto_examples/linear_model/plot_ridge_coeffs.rst", "auto_examples/linear_model/plot_ridge_path.rst", "auto_examples/linear_model/plot_robust_fit.rst", "auto_examples/linear_model/plot_sgd_comparison.rst", "auto_examples/linear_model/plot_sgd_early_stopping.rst", "auto_examples/linear_model/plot_sgd_iris.rst", "auto_examples/linear_model/plot_sgd_loss_functions.rst", "auto_examples/linear_model/plot_sgd_penalties.rst", "auto_examples/linear_model/plot_sgd_separating_hyperplane.rst", "auto_examples/linear_model/plot_sgd_weighted_samples.rst", "auto_examples/linear_model/plot_sgdocsvm_vs_ocsvm.rst", "auto_examples/linear_model/plot_sparse_logistic_regression_20newsgroups.rst", "auto_examples/linear_model/plot_sparse_logistic_regression_mnist.rst", "auto_examples/linear_model/plot_theilsen.rst", "auto_examples/linear_model/plot_tweedie_regression_insurance_claims.rst", "auto_examples/manifold/index.rst", "auto_examples/manifold/plot_compare_methods.rst", "auto_examples/manifold/plot_lle_digits.rst", "auto_examples/manifold/plot_manifold_sphere.rst", "auto_examples/manifold/plot_mds.rst", "auto_examples/manifold/plot_swissroll.rst", "auto_examples/manifold/plot_t_sne_perplexity.rst", "auto_examples/miscellaneous/index.rst", "auto_examples/miscellaneous/plot_anomaly_comparison.rst", "auto_examples/miscellaneous/plot_display_object_visualization.rst", "auto_examples/miscellaneous/plot_estimator_representation.rst", "auto_examples/miscellaneous/plot_isotonic_regression.rst", "auto_examples/miscellaneous/plot_johnson_lindenstrauss_bound.rst", "auto_examples/miscellaneous/plot_kernel_approximation.rst", "auto_examples/miscellaneous/plot_kernel_ridge_regression.rst", "auto_examples/miscellaneous/plot_metadata_routing.rst", "auto_examples/miscellaneous/plot_multilabel.rst", "auto_examples/miscellaneous/plot_multioutput_face_completion.rst", "auto_examples/miscellaneous/plot_outlier_detection_bench.rst", "auto_examples/miscellaneous/plot_partial_dependence_visualization_api.rst", "auto_examples/miscellaneous/plot_pipeline_display.rst", "auto_examples/miscellaneous/plot_roc_curve_visualization_api.rst", "auto_examples/miscellaneous/plot_set_output.rst", "auto_examples/mixture/index.rst", "auto_examples/mixture/plot_concentration_prior.rst", "auto_examples/mixture/plot_gmm.rst", "auto_examples/mixture/plot_gmm_covariances.rst", "auto_examples/mixture/plot_gmm_init.rst", "auto_examples/mixture/plot_gmm_pdf.rst", "auto_examples/mixture/plot_gmm_selection.rst", "auto_examples/mixture/plot_gmm_sin.rst", "auto_examples/model_selection/index.rst", "auto_examples/model_selection/plot_confusion_matrix.rst", "auto_examples/model_selection/plot_cv_indices.rst", "auto_examples/model_selection/plot_cv_predict.rst", "auto_examples/model_selection/plot_det.rst", "auto_examples/model_selection/plot_grid_search_digits.rst", "auto_examples/model_selection/plot_grid_search_refit_callable.rst", "auto_examples/model_selection/plot_grid_search_stats.rst", "auto_examples/model_selection/plot_grid_search_text_feature_extraction.rst", "auto_examples/model_selection/plot_learning_curve.rst", "auto_examples/model_selection/plot_likelihood_ratios.rst", "auto_examples/model_selection/plot_multi_metric_evaluation.rst", "auto_examples/model_selection/plot_nested_cross_validation_iris.rst", "auto_examples/model_selection/plot_permutation_tests_for_classification.rst", "auto_examples/model_selection/plot_precision_recall.rst", "auto_examples/model_selection/plot_randomized_search.rst", "auto_examples/model_selection/plot_roc.rst", "auto_examples/model_selection/plot_roc_crossval.rst", "auto_examples/model_selection/plot_successive_halving_heatmap.rst", "auto_examples/model_selection/plot_successive_halving_iterations.rst", "auto_examples/model_selection/plot_train_error_vs_test_error.rst", "auto_examples/model_selection/plot_underfitting_overfitting.rst", "auto_examples/model_selection/plot_validation_curve.rst", "auto_examples/multiclass/index.rst", "auto_examples/multiclass/plot_multiclass_overview.rst", "auto_examples/multioutput/index.rst", "auto_examples/multioutput/plot_classifier_chain_yeast.rst", "auto_examples/neighbors/approximate_nearest_neighbors.rst", "auto_examples/neighbors/index.rst", "auto_examples/neighbors/plot_caching_nearest_neighbors.rst", "auto_examples/neighbors/plot_classification.rst", "auto_examples/neighbors/plot_digits_kde_sampling.rst", "auto_examples/neighbors/plot_kde_1d.rst", "auto_examples/neighbors/plot_lof_novelty_detection.rst", "auto_examples/neighbors/plot_lof_outlier_detection.rst", "auto_examples/neighbors/plot_nca_classification.rst", "auto_examples/neighbors/plot_nca_dim_reduction.rst", "auto_examples/neighbors/plot_nca_illustration.rst", "auto_examples/neighbors/plot_nearest_centroid.rst", "auto_examples/neighbors/plot_regression.rst", "auto_examples/neighbors/plot_species_kde.rst", "auto_examples/neural_networks/index.rst", "auto_examples/neural_networks/plot_mlp_alpha.rst", "auto_examples/neural_networks/plot_mlp_training_curves.rst", "auto_examples/neural_networks/plot_mnist_filters.rst", "auto_examples/neural_networks/plot_rbm_logistic_classification.rst", "auto_examples/preprocessing/index.rst", "auto_examples/preprocessing/plot_all_scaling.rst", "auto_examples/preprocessing/plot_discretization.rst", "auto_examples/preprocessing/plot_discretization_classification.rst", "auto_examples/preprocessing/plot_discretization_strategies.rst", "auto_examples/preprocessing/plot_map_data_to_normal.rst", "auto_examples/preprocessing/plot_scaling_importance.rst", "auto_examples/preprocessing/plot_target_encoder.rst", "auto_examples/preprocessing/plot_target_encoder_cross_val.rst", "auto_examples/release_highlights/index.rst", "auto_examples/release_highlights/plot_release_highlights_0_22_0.rst", "auto_examples/release_highlights/plot_release_highlights_0_23_0.rst", "auto_examples/release_highlights/plot_release_highlights_0_24_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_0_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_1_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_2_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_3_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_4_0.rst", "auto_examples/semi_supervised/index.rst", "auto_examples/semi_supervised/plot_label_propagation_digits.rst", "auto_examples/semi_supervised/plot_label_propagation_digits_active_learning.rst", "auto_examples/semi_supervised/plot_label_propagation_structure.rst", "auto_examples/semi_supervised/plot_self_training_varying_threshold.rst", "auto_examples/semi_supervised/plot_semi_supervised_newsgroups.rst", "auto_examples/semi_supervised/plot_semi_supervised_versus_svm_iris.rst", "auto_examples/svm/index.rst", "auto_examples/svm/plot_custom_kernel.rst", "auto_examples/svm/plot_iris_svc.rst", "auto_examples/svm/plot_linearsvc_support_vectors.rst", "auto_examples/svm/plot_oneclass.rst", "auto_examples/svm/plot_rbf_parameters.rst", "auto_examples/svm/plot_separating_hyperplane.rst", "auto_examples/svm/plot_separating_hyperplane_unbalanced.rst", "auto_examples/svm/plot_svm_anova.rst", "auto_examples/svm/plot_svm_kernels.rst", "auto_examples/svm/plot_svm_margin.rst", "auto_examples/svm/plot_svm_nonlinear.rst", "auto_examples/svm/plot_svm_regression.rst", "auto_examples/svm/plot_svm_scale_c.rst", "auto_examples/svm/plot_svm_tie_breaking.rst", "auto_examples/svm/plot_weighted_samples.rst", "auto_examples/text/index.rst", "auto_examples/text/plot_document_classification_20newsgroups.rst", "auto_examples/text/plot_document_clustering.rst", "auto_examples/text/plot_hashing_vs_dict_vectorizer.rst", "auto_examples/tree/index.rst", "auto_examples/tree/plot_cost_complexity_pruning.rst", "auto_examples/tree/plot_iris_dtc.rst", "auto_examples/tree/plot_tree_regression.rst", "auto_examples/tree/plot_tree_regression_multioutput.rst", "auto_examples/tree/plot_unveil_tree_structure.rst", "common_pitfalls.rst", "communication_team.rst", "communication_team_emeritus.rst", "computing.rst", "computing/computational_performance.rst", "computing/parallelism.rst", "computing/scaling_strategies.rst", "contributor_experience_team.rst", "contributor_experience_team_emeritus.rst", "data_transforms.rst", "datasets.rst", "datasets/loading_other_datasets.rst", "datasets/real_world.rst", "datasets/sample_generators.rst", "datasets/toy_dataset.rst", "developers/advanced_installation.rst", "developers/bug_triaging.rst", "developers/contributing.rst", "developers/cython.rst", "developers/develop.rst", "developers/index.rst", "developers/maintainer.rst", "developers/minimal_reproducer.rst", "developers/performance.rst", "developers/plotting.rst", "developers/tips.rst", "developers/utilities.rst", "dispatching.rst", "documentation_team.rst", "faq.rst", "getting_started.rst", "glossary.rst", "governance.rst", "index.rst", "inspection.rst", "install.rst", "metadata_routing.rst", "min_dependency_substitutions.rst", "min_dependency_table.rst", "model_persistence.rst", "model_selection.rst", "modules/array_api.rst", "modules/biclustering.rst", "modules/calibration.rst", "modules/classes.rst", "modules/clustering.rst", "modules/compose.rst", "modules/covariance.rst", "modules/cross_decomposition.rst", "modules/cross_validation.rst", "modules/decomposition.rst", "modules/density.rst", "modules/ensemble.rst", "modules/feature_extraction.rst", "modules/feature_selection.rst", "modules/gaussian_process.rst", "modules/generated/dbscan-function.rst", "modules/generated/fastica-function.rst", "modules/generated/oas-function.rst", "modules/generated/sklearn.base.BaseEstimator.rst", "modules/generated/sklearn.base.BiclusterMixin.rst", "modules/generated/sklearn.base.ClassNamePrefixFeaturesOutMixin.rst", "modules/generated/sklearn.base.ClassifierMixin.rst", "modules/generated/sklearn.base.ClusterMixin.rst", "modules/generated/sklearn.base.DensityMixin.rst", "modules/generated/sklearn.base.MetaEstimatorMixin.rst", "modules/generated/sklearn.base.OneToOneFeatureMixin.rst", "modules/generated/sklearn.base.OutlierMixin.rst", "modules/generated/sklearn.base.RegressorMixin.rst", "modules/generated/sklearn.base.TransformerMixin.rst", "modules/generated/sklearn.base.clone.rst", "modules/generated/sklearn.base.is_classifier.rst", "modules/generated/sklearn.base.is_regressor.rst", "modules/generated/sklearn.calibration.CalibratedClassifierCV.rst", "modules/generated/sklearn.calibration.CalibrationDisplay.rst", "modules/generated/sklearn.calibration.calibration_curve.rst", "modules/generated/sklearn.cluster.AffinityPropagation.rst", "modules/generated/sklearn.cluster.AgglomerativeClustering.rst", "modules/generated/sklearn.cluster.Birch.rst", "modules/generated/sklearn.cluster.BisectingKMeans.rst", "modules/generated/sklearn.cluster.DBSCAN.rst", "modules/generated/sklearn.cluster.FeatureAgglomeration.rst", "modules/generated/sklearn.cluster.HDBSCAN.rst", "modules/generated/sklearn.cluster.KMeans.rst", "modules/generated/sklearn.cluster.MeanShift.rst", "modules/generated/sklearn.cluster.MiniBatchKMeans.rst", "modules/generated/sklearn.cluster.OPTICS.rst", "modules/generated/sklearn.cluster.SpectralBiclustering.rst", "modules/generated/sklearn.cluster.SpectralClustering.rst", "modules/generated/sklearn.cluster.SpectralCoclustering.rst", "modules/generated/sklearn.cluster.affinity_propagation.rst", "modules/generated/sklearn.cluster.cluster_optics_dbscan.rst", "modules/generated/sklearn.cluster.cluster_optics_xi.rst", "modules/generated/sklearn.cluster.compute_optics_graph.rst", "modules/generated/sklearn.cluster.estimate_bandwidth.rst", "modules/generated/sklearn.cluster.k_means.rst", "modules/generated/sklearn.cluster.kmeans_plusplus.rst", "modules/generated/sklearn.cluster.mean_shift.rst", "modules/generated/sklearn.cluster.spectral_clustering.rst", "modules/generated/sklearn.cluster.ward_tree.rst", "modules/generated/sklearn.compose.ColumnTransformer.rst", "modules/generated/sklearn.compose.TransformedTargetRegressor.rst", "modules/generated/sklearn.compose.make_column_selector.rst", "modules/generated/sklearn.compose.make_column_transformer.rst", "modules/generated/sklearn.config_context.rst", "modules/generated/sklearn.covariance.EllipticEnvelope.rst", "modules/generated/sklearn.covariance.EmpiricalCovariance.rst", "modules/generated/sklearn.covariance.GraphicalLasso.rst", "modules/generated/sklearn.covariance.GraphicalLassoCV.rst", "modules/generated/sklearn.covariance.LedoitWolf.rst", "modules/generated/sklearn.covariance.MinCovDet.rst", "modules/generated/sklearn.covariance.OAS.rst", "modules/generated/sklearn.covariance.ShrunkCovariance.rst", "modules/generated/sklearn.covariance.empirical_covariance.rst", "modules/generated/sklearn.covariance.graphical_lasso.rst", "modules/generated/sklearn.covariance.ledoit_wolf.rst", "modules/generated/sklearn.covariance.ledoit_wolf_shrinkage.rst", "modules/generated/sklearn.covariance.shrunk_covariance.rst", "modules/generated/sklearn.cross_decomposition.CCA.rst", "modules/generated/sklearn.cross_decomposition.PLSCanonical.rst", "modules/generated/sklearn.cross_decomposition.PLSRegression.rst", "modules/generated/sklearn.cross_decomposition.PLSSVD.rst", "modules/generated/sklearn.datasets.clear_data_home.rst", "modules/generated/sklearn.datasets.dump_svmlight_file.rst", "modules/generated/sklearn.datasets.fetch_20newsgroups.rst", "modules/generated/sklearn.datasets.fetch_20newsgroups_vectorized.rst", "modules/generated/sklearn.datasets.fetch_california_housing.rst", "modules/generated/sklearn.datasets.fetch_covtype.rst", "modules/generated/sklearn.datasets.fetch_kddcup99.rst", "modules/generated/sklearn.datasets.fetch_lfw_pairs.rst", "modules/generated/sklearn.datasets.fetch_lfw_people.rst", "modules/generated/sklearn.datasets.fetch_olivetti_faces.rst", "modules/generated/sklearn.datasets.fetch_openml.rst", "modules/generated/sklearn.datasets.fetch_rcv1.rst", "modules/generated/sklearn.datasets.fetch_species_distributions.rst", "modules/generated/sklearn.datasets.get_data_home.rst", "modules/generated/sklearn.datasets.load_breast_cancer.rst", "modules/generated/sklearn.datasets.load_diabetes.rst", "modules/generated/sklearn.datasets.load_digits.rst", "modules/generated/sklearn.datasets.load_files.rst", "modules/generated/sklearn.datasets.load_iris.rst", "modules/generated/sklearn.datasets.load_linnerud.rst", "modules/generated/sklearn.datasets.load_sample_image.rst", "modules/generated/sklearn.datasets.load_sample_images.rst", "modules/generated/sklearn.datasets.load_svmlight_file.rst", "modules/generated/sklearn.datasets.load_svmlight_files.rst", "modules/generated/sklearn.datasets.load_wine.rst", "modules/generated/sklearn.datasets.make_biclusters.rst", "modules/generated/sklearn.datasets.make_blobs.rst", "modules/generated/sklearn.datasets.make_checkerboard.rst", "modules/generated/sklearn.datasets.make_circles.rst", "modules/generated/sklearn.datasets.make_classification.rst", "modules/generated/sklearn.datasets.make_friedman1.rst", "modules/generated/sklearn.datasets.make_friedman2.rst", "modules/generated/sklearn.datasets.make_friedman3.rst", "modules/generated/sklearn.datasets.make_gaussian_quantiles.rst", "modules/generated/sklearn.datasets.make_hastie_10_2.rst", "modules/generated/sklearn.datasets.make_low_rank_matrix.rst", "modules/generated/sklearn.datasets.make_moons.rst", "modules/generated/sklearn.datasets.make_multilabel_classification.rst", "modules/generated/sklearn.datasets.make_regression.rst", "modules/generated/sklearn.datasets.make_s_curve.rst", "modules/generated/sklearn.datasets.make_sparse_coded_signal.rst", "modules/generated/sklearn.datasets.make_sparse_spd_matrix.rst", "modules/generated/sklearn.datasets.make_sparse_uncorrelated.rst", "modules/generated/sklearn.datasets.make_spd_matrix.rst", "modules/generated/sklearn.datasets.make_swiss_roll.rst", "modules/generated/sklearn.decomposition.DictionaryLearning.rst", "modules/generated/sklearn.decomposition.FactorAnalysis.rst", "modules/generated/sklearn.decomposition.FastICA.rst", "modules/generated/sklearn.decomposition.IncrementalPCA.rst", "modules/generated/sklearn.decomposition.KernelPCA.rst", "modules/generated/sklearn.decomposition.LatentDirichletAllocation.rst", "modules/generated/sklearn.decomposition.MiniBatchDictionaryLearning.rst", "modules/generated/sklearn.decomposition.MiniBatchNMF.rst", "modules/generated/sklearn.decomposition.MiniBatchSparsePCA.rst", "modules/generated/sklearn.decomposition.NMF.rst", "modules/generated/sklearn.decomposition.PCA.rst", "modules/generated/sklearn.decomposition.SparseCoder.rst", "modules/generated/sklearn.decomposition.SparsePCA.rst", "modules/generated/sklearn.decomposition.TruncatedSVD.rst", "modules/generated/sklearn.decomposition.dict_learning.rst", "modules/generated/sklearn.decomposition.dict_learning_online.rst", "modules/generated/sklearn.decomposition.non_negative_factorization.rst", "modules/generated/sklearn.decomposition.sparse_encode.rst", "modules/generated/sklearn.discriminant_analysis.LinearDiscriminantAnalysis.rst", "modules/generated/sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.rst", "modules/generated/sklearn.dummy.DummyClassifier.rst", "modules/generated/sklearn.dummy.DummyRegressor.rst", "modules/generated/sklearn.ensemble.AdaBoostClassifier.rst", "modules/generated/sklearn.ensemble.AdaBoostRegressor.rst", "modules/generated/sklearn.ensemble.BaggingClassifier.rst", "modules/generated/sklearn.ensemble.BaggingRegressor.rst", "modules/generated/sklearn.ensemble.ExtraTreesClassifier.rst", "modules/generated/sklearn.ensemble.ExtraTreesRegressor.rst", "modules/generated/sklearn.ensemble.GradientBoostingClassifier.rst", "modules/generated/sklearn.ensemble.GradientBoostingRegressor.rst", "modules/generated/sklearn.ensemble.HistGradientBoostingClassifier.rst", "modules/generated/sklearn.ensemble.HistGradientBoostingRegressor.rst", "modules/generated/sklearn.ensemble.IsolationForest.rst", "modules/generated/sklearn.ensemble.RandomForestClassifier.rst", "modules/generated/sklearn.ensemble.RandomForestRegressor.rst", "modules/generated/sklearn.ensemble.RandomTreesEmbedding.rst", "modules/generated/sklearn.ensemble.StackingClassifier.rst", "modules/generated/sklearn.ensemble.StackingRegressor.rst", "modules/generated/sklearn.ensemble.VotingClassifier.rst", "modules/generated/sklearn.ensemble.VotingRegressor.rst", "modules/generated/sklearn.exceptions.ConvergenceWarning.rst", "modules/generated/sklearn.exceptions.DataConversionWarning.rst", "modules/generated/sklearn.exceptions.DataDimensionalityWarning.rst", "modules/generated/sklearn.exceptions.EfficiencyWarning.rst", "modules/generated/sklearn.exceptions.FitFailedWarning.rst", "modules/generated/sklearn.exceptions.InconsistentVersionWarning.rst", "modules/generated/sklearn.exceptions.NotFittedError.rst", "modules/generated/sklearn.exceptions.UndefinedMetricWarning.rst", "modules/generated/sklearn.experimental.enable_halving_search_cv.rst", "modules/generated/sklearn.experimental.enable_iterative_imputer.rst", "modules/generated/sklearn.feature_extraction.DictVectorizer.rst", "modules/generated/sklearn.feature_extraction.FeatureHasher.rst", "modules/generated/sklearn.feature_extraction.image.PatchExtractor.rst", "modules/generated/sklearn.feature_extraction.image.extract_patches_2d.rst", "modules/generated/sklearn.feature_extraction.image.grid_to_graph.rst", "modules/generated/sklearn.feature_extraction.image.img_to_graph.rst", "modules/generated/sklearn.feature_extraction.image.reconstruct_from_patches_2d.rst", "modules/generated/sklearn.feature_extraction.text.CountVectorizer.rst", "modules/generated/sklearn.feature_extraction.text.HashingVectorizer.rst", "modules/generated/sklearn.feature_extraction.text.TfidfTransformer.rst", "modules/generated/sklearn.feature_extraction.text.TfidfVectorizer.rst", "modules/generated/sklearn.feature_selection.GenericUnivariateSelect.rst", "modules/generated/sklearn.feature_selection.RFE.rst", "modules/generated/sklearn.feature_selection.RFECV.rst", "modules/generated/sklearn.feature_selection.SelectFdr.rst", "modules/generated/sklearn.feature_selection.SelectFpr.rst", "modules/generated/sklearn.feature_selection.SelectFromModel.rst", "modules/generated/sklearn.feature_selection.SelectFwe.rst", "modules/generated/sklearn.feature_selection.SelectKBest.rst", "modules/generated/sklearn.feature_selection.SelectPercentile.rst", "modules/generated/sklearn.feature_selection.SelectorMixin.rst", "modules/generated/sklearn.feature_selection.SequentialFeatureSelector.rst", "modules/generated/sklearn.feature_selection.VarianceThreshold.rst", "modules/generated/sklearn.feature_selection.chi2.rst", "modules/generated/sklearn.feature_selection.f_classif.rst", "modules/generated/sklearn.feature_selection.f_regression.rst", "modules/generated/sklearn.feature_selection.mutual_info_classif.rst", "modules/generated/sklearn.feature_selection.mutual_info_regression.rst", "modules/generated/sklearn.feature_selection.r_regression.rst", "modules/generated/sklearn.gaussian_process.GaussianProcessClassifier.rst", "modules/generated/sklearn.gaussian_process.GaussianProcessRegressor.rst", "modules/generated/sklearn.gaussian_process.kernels.CompoundKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.ConstantKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.DotProduct.rst", "modules/generated/sklearn.gaussian_process.kernels.ExpSineSquared.rst", "modules/generated/sklearn.gaussian_process.kernels.Exponentiation.rst", "modules/generated/sklearn.gaussian_process.kernels.Hyperparameter.rst", "modules/generated/sklearn.gaussian_process.kernels.Kernel.rst", "modules/generated/sklearn.gaussian_process.kernels.Matern.rst", "modules/generated/sklearn.gaussian_process.kernels.PairwiseKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.Product.rst", "modules/generated/sklearn.gaussian_process.kernels.RBF.rst", "modules/generated/sklearn.gaussian_process.kernels.RationalQuadratic.rst", "modules/generated/sklearn.gaussian_process.kernels.Sum.rst", "modules/generated/sklearn.gaussian_process.kernels.WhiteKernel.rst", "modules/generated/sklearn.get_config.rst", "modules/generated/sklearn.impute.IterativeImputer.rst", "modules/generated/sklearn.impute.KNNImputer.rst", "modules/generated/sklearn.impute.MissingIndicator.rst", "modules/generated/sklearn.impute.SimpleImputer.rst", "modules/generated/sklearn.inspection.DecisionBoundaryDisplay.rst", "modules/generated/sklearn.inspection.PartialDependenceDisplay.rst", "modules/generated/sklearn.inspection.partial_dependence.rst", "modules/generated/sklearn.inspection.permutation_importance.rst", "modules/generated/sklearn.isotonic.IsotonicRegression.rst", "modules/generated/sklearn.isotonic.check_increasing.rst", "modules/generated/sklearn.isotonic.isotonic_regression.rst", "modules/generated/sklearn.kernel_approximation.AdditiveChi2Sampler.rst", "modules/generated/sklearn.kernel_approximation.Nystroem.rst", "modules/generated/sklearn.kernel_approximation.PolynomialCountSketch.rst", "modules/generated/sklearn.kernel_approximation.RBFSampler.rst", "modules/generated/sklearn.kernel_approximation.SkewedChi2Sampler.rst", "modules/generated/sklearn.kernel_ridge.KernelRidge.rst", "modules/generated/sklearn.linear_model.ARDRegression.rst", "modules/generated/sklearn.linear_model.BayesianRidge.rst", "modules/generated/sklearn.linear_model.ElasticNet.rst", "modules/generated/sklearn.linear_model.ElasticNetCV.rst", "modules/generated/sklearn.linear_model.GammaRegressor.rst", "modules/generated/sklearn.linear_model.HuberRegressor.rst", "modules/generated/sklearn.linear_model.Lars.rst", "modules/generated/sklearn.linear_model.LarsCV.rst", "modules/generated/sklearn.linear_model.Lasso.rst", "modules/generated/sklearn.linear_model.LassoCV.rst", "modules/generated/sklearn.linear_model.LassoLars.rst", "modules/generated/sklearn.linear_model.LassoLarsCV.rst", "modules/generated/sklearn.linear_model.LassoLarsIC.rst", "modules/generated/sklearn.linear_model.LinearRegression.rst", "modules/generated/sklearn.linear_model.LogisticRegression.rst", "modules/generated/sklearn.linear_model.LogisticRegressionCV.rst", "modules/generated/sklearn.linear_model.MultiTaskElasticNet.rst", "modules/generated/sklearn.linear_model.MultiTaskElasticNetCV.rst", "modules/generated/sklearn.linear_model.MultiTaskLasso.rst", "modules/generated/sklearn.linear_model.MultiTaskLassoCV.rst", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuit.rst", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuitCV.rst", "modules/generated/sklearn.linear_model.PassiveAggressiveClassifier.rst", "modules/generated/sklearn.linear_model.PassiveAggressiveRegressor.rst", "modules/generated/sklearn.linear_model.Perceptron.rst", "modules/generated/sklearn.linear_model.PoissonRegressor.rst", "modules/generated/sklearn.linear_model.QuantileRegressor.rst", "modules/generated/sklearn.linear_model.RANSACRegressor.rst", "modules/generated/sklearn.linear_model.Ridge.rst", "modules/generated/sklearn.linear_model.RidgeCV.rst", "modules/generated/sklearn.linear_model.RidgeClassifier.rst", "modules/generated/sklearn.linear_model.RidgeClassifierCV.rst", "modules/generated/sklearn.linear_model.SGDClassifier.rst", "modules/generated/sklearn.linear_model.SGDOneClassSVM.rst", "modules/generated/sklearn.linear_model.SGDRegressor.rst", "modules/generated/sklearn.linear_model.TheilSenRegressor.rst", "modules/generated/sklearn.linear_model.TweedieRegressor.rst", "modules/generated/sklearn.linear_model.enet_path.rst", "modules/generated/sklearn.linear_model.lars_path.rst", "modules/generated/sklearn.linear_model.lars_path_gram.rst", "modules/generated/sklearn.linear_model.lasso_path.rst", "modules/generated/sklearn.linear_model.orthogonal_mp.rst", "modules/generated/sklearn.linear_model.orthogonal_mp_gram.rst", "modules/generated/sklearn.linear_model.ridge_regression.rst", "modules/generated/sklearn.manifold.Isomap.rst", "modules/generated/sklearn.manifold.LocallyLinearEmbedding.rst", "modules/generated/sklearn.manifold.MDS.rst", "modules/generated/sklearn.manifold.SpectralEmbedding.rst", "modules/generated/sklearn.manifold.TSNE.rst", "modules/generated/sklearn.manifold.locally_linear_embedding.rst", "modules/generated/sklearn.manifold.smacof.rst", "modules/generated/sklearn.manifold.spectral_embedding.rst", "modules/generated/sklearn.manifold.trustworthiness.rst", "modules/generated/sklearn.metrics.ConfusionMatrixDisplay.rst", "modules/generated/sklearn.metrics.DetCurveDisplay.rst", "modules/generated/sklearn.metrics.DistanceMetric.rst", "modules/generated/sklearn.metrics.PrecisionRecallDisplay.rst", "modules/generated/sklearn.metrics.PredictionErrorDisplay.rst", "modules/generated/sklearn.metrics.RocCurveDisplay.rst", "modules/generated/sklearn.metrics.accuracy_score.rst", "modules/generated/sklearn.metrics.adjusted_mutual_info_score.rst", "modules/generated/sklearn.metrics.adjusted_rand_score.rst", "modules/generated/sklearn.metrics.auc.rst", "modules/generated/sklearn.metrics.average_precision_score.rst", "modules/generated/sklearn.metrics.balanced_accuracy_score.rst", "modules/generated/sklearn.metrics.brier_score_loss.rst", "modules/generated/sklearn.metrics.calinski_harabasz_score.rst", "modules/generated/sklearn.metrics.check_scoring.rst", "modules/generated/sklearn.metrics.class_likelihood_ratios.rst", "modules/generated/sklearn.metrics.classification_report.rst", "modules/generated/sklearn.metrics.cluster.contingency_matrix.rst", "modules/generated/sklearn.metrics.cluster.pair_confusion_matrix.rst", "modules/generated/sklearn.metrics.cohen_kappa_score.rst", "modules/generated/sklearn.metrics.completeness_score.rst", "modules/generated/sklearn.metrics.confusion_matrix.rst", "modules/generated/sklearn.metrics.consensus_score.rst", "modules/generated/sklearn.metrics.coverage_error.rst", "modules/generated/sklearn.metrics.d2_absolute_error_score.rst", "modules/generated/sklearn.metrics.d2_pinball_score.rst", "modules/generated/sklearn.metrics.d2_tweedie_score.rst", "modules/generated/sklearn.metrics.davies_bouldin_score.rst", "modules/generated/sklearn.metrics.dcg_score.rst", "modules/generated/sklearn.metrics.det_curve.rst", "modules/generated/sklearn.metrics.explained_variance_score.rst", "modules/generated/sklearn.metrics.f1_score.rst", "modules/generated/sklearn.metrics.fbeta_score.rst", "modules/generated/sklearn.metrics.fowlkes_mallows_score.rst", "modules/generated/sklearn.metrics.get_scorer.rst", "modules/generated/sklearn.metrics.get_scorer_names.rst", "modules/generated/sklearn.metrics.hamming_loss.rst", "modules/generated/sklearn.metrics.hinge_loss.rst", "modules/generated/sklearn.metrics.homogeneity_completeness_v_measure.rst", "modules/generated/sklearn.metrics.homogeneity_score.rst", "modules/generated/sklearn.metrics.jaccard_score.rst", "modules/generated/sklearn.metrics.label_ranking_average_precision_score.rst", "modules/generated/sklearn.metrics.label_ranking_loss.rst", "modules/generated/sklearn.metrics.log_loss.rst", "modules/generated/sklearn.metrics.make_scorer.rst", "modules/generated/sklearn.metrics.matthews_corrcoef.rst", "modules/generated/sklearn.metrics.max_error.rst", "modules/generated/sklearn.metrics.mean_absolute_error.rst", "modules/generated/sklearn.metrics.mean_absolute_percentage_error.rst", "modules/generated/sklearn.metrics.mean_gamma_deviance.rst", "modules/generated/sklearn.metrics.mean_pinball_loss.rst", "modules/generated/sklearn.metrics.mean_poisson_deviance.rst", "modules/generated/sklearn.metrics.mean_squared_error.rst", "modules/generated/sklearn.metrics.mean_squared_log_error.rst", "modules/generated/sklearn.metrics.mean_tweedie_deviance.rst", "modules/generated/sklearn.metrics.median_absolute_error.rst", "modules/generated/sklearn.metrics.multilabel_confusion_matrix.rst", "modules/generated/sklearn.metrics.mutual_info_score.rst", "modules/generated/sklearn.metrics.ndcg_score.rst", "modules/generated/sklearn.metrics.normalized_mutual_info_score.rst", "modules/generated/sklearn.metrics.pairwise.additive_chi2_kernel.rst", "modules/generated/sklearn.metrics.pairwise.chi2_kernel.rst", "modules/generated/sklearn.metrics.pairwise.cosine_distances.rst", "modules/generated/sklearn.metrics.pairwise.cosine_similarity.rst", "modules/generated/sklearn.metrics.pairwise.distance_metrics.rst", "modules/generated/sklearn.metrics.pairwise.euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.haversine_distances.rst", "modules/generated/sklearn.metrics.pairwise.kernel_metrics.rst", "modules/generated/sklearn.metrics.pairwise.laplacian_kernel.rst", "modules/generated/sklearn.metrics.pairwise.linear_kernel.rst", "modules/generated/sklearn.metrics.pairwise.manhattan_distances.rst", "modules/generated/sklearn.metrics.pairwise.nan_euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_cosine_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_manhattan_distances.rst", "modules/generated/sklearn.metrics.pairwise.pairwise_kernels.rst", "modules/generated/sklearn.metrics.pairwise.polynomial_kernel.rst", "modules/generated/sklearn.metrics.pairwise.rbf_kernel.rst", "modules/generated/sklearn.metrics.pairwise.sigmoid_kernel.rst", "modules/generated/sklearn.metrics.pairwise_distances.rst", "modules/generated/sklearn.metrics.pairwise_distances_argmin.rst", "modules/generated/sklearn.metrics.pairwise_distances_argmin_min.rst", "modules/generated/sklearn.metrics.pairwise_distances_chunked.rst", "modules/generated/sklearn.metrics.precision_recall_curve.rst", "modules/generated/sklearn.metrics.precision_recall_fscore_support.rst", "modules/generated/sklearn.metrics.precision_score.rst", "modules/generated/sklearn.metrics.r2_score.rst", "modules/generated/sklearn.metrics.rand_score.rst", "modules/generated/sklearn.metrics.recall_score.rst", "modules/generated/sklearn.metrics.roc_auc_score.rst", "modules/generated/sklearn.metrics.roc_curve.rst", "modules/generated/sklearn.metrics.root_mean_squared_error.rst", "modules/generated/sklearn.metrics.root_mean_squared_log_error.rst", "modules/generated/sklearn.metrics.silhouette_samples.rst", "modules/generated/sklearn.metrics.silhouette_score.rst", "modules/generated/sklearn.metrics.top_k_accuracy_score.rst", "modules/generated/sklearn.metrics.v_measure_score.rst", "modules/generated/sklearn.metrics.zero_one_loss.rst", "modules/generated/sklearn.mixture.BayesianGaussianMixture.rst", "modules/generated/sklearn.mixture.GaussianMixture.rst", "modules/generated/sklearn.model_selection.GridSearchCV.rst", "modules/generated/sklearn.model_selection.GroupKFold.rst", "modules/generated/sklearn.model_selection.GroupShuffleSplit.rst", "modules/generated/sklearn.model_selection.HalvingGridSearchCV.rst", "modules/generated/sklearn.model_selection.HalvingRandomSearchCV.rst", "modules/generated/sklearn.model_selection.KFold.rst", "modules/generated/sklearn.model_selection.LearningCurveDisplay.rst", "modules/generated/sklearn.model_selection.LeaveOneGroupOut.rst", "modules/generated/sklearn.model_selection.LeaveOneOut.rst", "modules/generated/sklearn.model_selection.LeavePGroupsOut.rst", "modules/generated/sklearn.model_selection.LeavePOut.rst", "modules/generated/sklearn.model_selection.ParameterGrid.rst", "modules/generated/sklearn.model_selection.ParameterSampler.rst", "modules/generated/sklearn.model_selection.PredefinedSplit.rst", "modules/generated/sklearn.model_selection.RandomizedSearchCV.rst", "modules/generated/sklearn.model_selection.RepeatedKFold.rst", "modules/generated/sklearn.model_selection.RepeatedStratifiedKFold.rst", "modules/generated/sklearn.model_selection.ShuffleSplit.rst", "modules/generated/sklearn.model_selection.StratifiedGroupKFold.rst", "modules/generated/sklearn.model_selection.StratifiedKFold.rst", "modules/generated/sklearn.model_selection.StratifiedShuffleSplit.rst", "modules/generated/sklearn.model_selection.TimeSeriesSplit.rst", "modules/generated/sklearn.model_selection.ValidationCurveDisplay.rst", "modules/generated/sklearn.model_selection.check_cv.rst", "modules/generated/sklearn.model_selection.cross_val_predict.rst", "modules/generated/sklearn.model_selection.cross_val_score.rst", "modules/generated/sklearn.model_selection.cross_validate.rst", "modules/generated/sklearn.model_selection.learning_curve.rst", "modules/generated/sklearn.model_selection.permutation_test_score.rst", "modules/generated/sklearn.model_selection.train_test_split.rst", "modules/generated/sklearn.model_selection.validation_curve.rst", "modules/generated/sklearn.multiclass.OneVsOneClassifier.rst", "modules/generated/sklearn.multiclass.OneVsRestClassifier.rst", "modules/generated/sklearn.multiclass.OutputCodeClassifier.rst", "modules/generated/sklearn.multioutput.ClassifierChain.rst", "modules/generated/sklearn.multioutput.MultiOutputClassifier.rst", "modules/generated/sklearn.multioutput.MultiOutputRegressor.rst", "modules/generated/sklearn.multioutput.RegressorChain.rst", "modules/generated/sklearn.naive_bayes.BernoulliNB.rst", "modules/generated/sklearn.naive_bayes.CategoricalNB.rst", "modules/generated/sklearn.naive_bayes.ComplementNB.rst", "modules/generated/sklearn.naive_bayes.GaussianNB.rst", "modules/generated/sklearn.naive_bayes.MultinomialNB.rst", "modules/generated/sklearn.neighbors.BallTree.rst", "modules/generated/sklearn.neighbors.KDTree.rst", "modules/generated/sklearn.neighbors.KNeighborsClassifier.rst", "modules/generated/sklearn.neighbors.KNeighborsRegressor.rst", "modules/generated/sklearn.neighbors.KNeighborsTransformer.rst", "modules/generated/sklearn.neighbors.KernelDensity.rst", "modules/generated/sklearn.neighbors.LocalOutlierFactor.rst", "modules/generated/sklearn.neighbors.NearestCentroid.rst", "modules/generated/sklearn.neighbors.NearestNeighbors.rst", "modules/generated/sklearn.neighbors.NeighborhoodComponentsAnalysis.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsClassifier.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsRegressor.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsTransformer.rst", "modules/generated/sklearn.neighbors.kneighbors_graph.rst", "modules/generated/sklearn.neighbors.radius_neighbors_graph.rst", "modules/generated/sklearn.neighbors.sort_graph_by_row_values.rst", "modules/generated/sklearn.neural_network.BernoulliRBM.rst", "modules/generated/sklearn.neural_network.MLPClassifier.rst", "modules/generated/sklearn.neural_network.MLPRegressor.rst", "modules/generated/sklearn.pipeline.FeatureUnion.rst", "modules/generated/sklearn.pipeline.Pipeline.rst", "modules/generated/sklearn.pipeline.make_pipeline.rst", "modules/generated/sklearn.pipeline.make_union.rst", "modules/generated/sklearn.preprocessing.Binarizer.rst", "modules/generated/sklearn.preprocessing.FunctionTransformer.rst", "modules/generated/sklearn.preprocessing.KBinsDiscretizer.rst", "modules/generated/sklearn.preprocessing.KernelCenterer.rst", "modules/generated/sklearn.preprocessing.LabelBinarizer.rst", "modules/generated/sklearn.preprocessing.LabelEncoder.rst", "modules/generated/sklearn.preprocessing.MaxAbsScaler.rst", "modules/generated/sklearn.preprocessing.MinMaxScaler.rst", "modules/generated/sklearn.preprocessing.MultiLabelBinarizer.rst", "modules/generated/sklearn.preprocessing.Normalizer.rst", "modules/generated/sklearn.preprocessing.OneHotEncoder.rst", "modules/generated/sklearn.preprocessing.OrdinalEncoder.rst", "modules/generated/sklearn.preprocessing.PolynomialFeatures.rst", "modules/generated/sklearn.preprocessing.PowerTransformer.rst", "modules/generated/sklearn.preprocessing.QuantileTransformer.rst", "modules/generated/sklearn.preprocessing.RobustScaler.rst", "modules/generated/sklearn.preprocessing.SplineTransformer.rst", "modules/generated/sklearn.preprocessing.StandardScaler.rst", "modules/generated/sklearn.preprocessing.TargetEncoder.rst", "modules/generated/sklearn.preprocessing.add_dummy_feature.rst", "modules/generated/sklearn.preprocessing.binarize.rst", "modules/generated/sklearn.preprocessing.label_binarize.rst", "modules/generated/sklearn.preprocessing.maxabs_scale.rst", "modules/generated/sklearn.preprocessing.minmax_scale.rst", "modules/generated/sklearn.preprocessing.normalize.rst", "modules/generated/sklearn.preprocessing.power_transform.rst", "modules/generated/sklearn.preprocessing.quantile_transform.rst", "modules/generated/sklearn.preprocessing.robust_scale.rst", "modules/generated/sklearn.preprocessing.scale.rst", "modules/generated/sklearn.random_projection.GaussianRandomProjection.rst", "modules/generated/sklearn.random_projection.SparseRandomProjection.rst", "modules/generated/sklearn.random_projection.johnson_lindenstrauss_min_dim.rst", "modules/generated/sklearn.semi_supervised.LabelPropagation.rst", "modules/generated/sklearn.semi_supervised.LabelSpreading.rst", "modules/generated/sklearn.semi_supervised.SelfTrainingClassifier.rst", "modules/generated/sklearn.set_config.rst", "modules/generated/sklearn.show_versions.rst", "modules/generated/sklearn.svm.LinearSVC.rst", "modules/generated/sklearn.svm.LinearSVR.rst", "modules/generated/sklearn.svm.NuSVC.rst", "modules/generated/sklearn.svm.NuSVR.rst", "modules/generated/sklearn.svm.OneClassSVM.rst", "modules/generated/sklearn.svm.SVC.rst", "modules/generated/sklearn.svm.SVR.rst", "modules/generated/sklearn.svm.l1_min_c.rst", "modules/generated/sklearn.tree.DecisionTreeClassifier.rst", "modules/generated/sklearn.tree.DecisionTreeRegressor.rst", "modules/generated/sklearn.tree.ExtraTreeClassifier.rst", "modules/generated/sklearn.tree.ExtraTreeRegressor.rst", "modules/generated/sklearn.tree.export_graphviz.rst", "modules/generated/sklearn.tree.export_text.rst", "modules/generated/sklearn.tree.plot_tree.rst", "modules/generated/sklearn.utils.Bunch.rst", "modules/generated/sklearn.utils._safe_indexing.rst", "modules/generated/sklearn.utils.arrayfuncs.min_pos.rst", "modules/generated/sklearn.utils.as_float_array.rst", "modules/generated/sklearn.utils.assert_all_finite.rst", "modules/generated/sklearn.utils.check_X_y.rst", "modules/generated/sklearn.utils.check_array.rst", "modules/generated/sklearn.utils.check_consistent_length.rst", "modules/generated/sklearn.utils.check_random_state.rst", "modules/generated/sklearn.utils.check_scalar.rst", "modules/generated/sklearn.utils.class_weight.compute_class_weight.rst", "modules/generated/sklearn.utils.class_weight.compute_sample_weight.rst", "modules/generated/sklearn.utils.deprecated.rst", "modules/generated/sklearn.utils.discovery.all_displays.rst", "modules/generated/sklearn.utils.discovery.all_estimators.rst", "modules/generated/sklearn.utils.discovery.all_functions.rst", "modules/generated/sklearn.utils.estimator_checks.check_estimator.rst", "modules/generated/sklearn.utils.estimator_checks.parametrize_with_checks.rst", "modules/generated/sklearn.utils.estimator_html_repr.rst", "modules/generated/sklearn.utils.extmath.density.rst", "modules/generated/sklearn.utils.extmath.fast_logdet.rst", "modules/generated/sklearn.utils.extmath.randomized_range_finder.rst", "modules/generated/sklearn.utils.extmath.randomized_svd.rst", "modules/generated/sklearn.utils.extmath.safe_sparse_dot.rst", "modules/generated/sklearn.utils.extmath.weighted_mode.rst", "modules/generated/sklearn.utils.gen_batches.rst", "modules/generated/sklearn.utils.gen_even_slices.rst", "modules/generated/sklearn.utils.graph.single_source_shortest_path_length.rst", "modules/generated/sklearn.utils.indexable.rst", "modules/generated/sklearn.utils.metadata_routing.MetadataRequest.rst", "modules/generated/sklearn.utils.metadata_routing.MetadataRouter.rst", "modules/generated/sklearn.utils.metadata_routing.MethodMapping.rst", "modules/generated/sklearn.utils.metadata_routing.get_routing_for_object.rst", "modules/generated/sklearn.utils.metadata_routing.process_routing.rst", "modules/generated/sklearn.utils.metaestimators.available_if.rst", "modules/generated/sklearn.utils.multiclass.is_multilabel.rst", "modules/generated/sklearn.utils.multiclass.type_of_target.rst", "modules/generated/sklearn.utils.multiclass.unique_labels.rst", "modules/generated/sklearn.utils.murmurhash3_32.rst", "modules/generated/sklearn.utils.parallel.Parallel.rst", "modules/generated/sklearn.utils.parallel.delayed.rst", "modules/generated/sklearn.utils.parallel_backend.rst", "modules/generated/sklearn.utils.random.sample_without_replacement.rst", "modules/generated/sklearn.utils.register_parallel_backend.rst", "modules/generated/sklearn.utils.resample.rst", "modules/generated/sklearn.utils.safe_mask.rst", "modules/generated/sklearn.utils.safe_sqr.rst", "modules/generated/sklearn.utils.shuffle.rst", "modules/generated/sklearn.utils.sparsefuncs.incr_mean_variance_axis.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_column_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_csr_column_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_row_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_column.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_row.rst", "modules/generated/sklearn.utils.sparsefuncs.mean_variance_axis.rst", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1.rst", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2.rst", "modules/generated/sklearn.utils.validation.check_is_fitted.rst", "modules/generated/sklearn.utils.validation.check_memory.rst", "modules/generated/sklearn.utils.validation.check_symmetric.rst", "modules/generated/sklearn.utils.validation.column_or_1d.rst", "modules/generated/sklearn.utils.validation.has_fit_parameter.rst", "modules/grid_search.rst", "modules/impute.rst", "modules/isotonic.rst", "modules/kernel_approximation.rst", "modules/kernel_ridge.rst", "modules/lda_qda.rst", "modules/learning_curve.rst", "modules/linear_model.rst", "modules/manifold.rst", "modules/metrics.rst", "modules/mixture.rst", "modules/model_evaluation.rst", "modules/multiclass.rst", "modules/naive_bayes.rst", "modules/neighbors.rst", "modules/neural_networks_supervised.rst", "modules/neural_networks_unsupervised.rst", "modules/outlier_detection.rst", "modules/partial_dependence.rst", "modules/permutation_importance.rst", "modules/pipeline.rst", "modules/preprocessing.rst", "modules/preprocessing_targets.rst", "modules/random_projection.rst", "modules/semi_supervised.rst", "modules/sgd.rst", "modules/svm.rst", "modules/tree.rst", "modules/unsupervised_reduction.rst", "presentations.rst", "related_projects.rst", "roadmap.rst", "sg_execution_times.rst", "supervised_learning.rst", "support.rst", "testimonials/testimonials.rst", "tutorial/basic/tutorial.rst", "tutorial/index.rst", "tutorial/machine_learning_map/index.rst", "tutorial/statistical_inference/index.rst", "tutorial/statistical_inference/model_selection.rst", "tutorial/statistical_inference/putting_together.rst", "tutorial/statistical_inference/settings.rst", "tutorial/statistical_inference/supervised_learning.rst", "tutorial/statistical_inference/unsupervised_learning.rst", "tutorial/text_analytics/working_with_text_data.rst", "unsupervised_learning.rst", "user_guide.rst", "visualizations.rst", "whats_new.rst", "whats_new/_contributors.rst", "whats_new/older_versions.rst", "whats_new/v0.13.rst", "whats_new/v0.14.rst", "whats_new/v0.15.rst", "whats_new/v0.16.rst", "whats_new/v0.17.rst", "whats_new/v0.18.rst", "whats_new/v0.19.rst", "whats_new/v0.20.rst", "whats_new/v0.21.rst", "whats_new/v0.22.rst", "whats_new/v0.23.rst", "whats_new/v0.24.rst", "whats_new/v1.0.rst", "whats_new/v1.1.rst", "whats_new/v1.2.rst", "whats_new/v1.3.rst", "whats_new/v1.4.rst", "whats_new/v1.5.rst"], "titles": ["About us", "&lt;no title&gt;", "&lt;no title&gt;", "Examples based on real world datasets", "Time-related feature engineering", "Image denoising using kernel PCA", "Faces recognition example using eigenfaces and SVMs", "Model Complexity Influence", "Out-of-core classification of text documents", "Outlier detection on a real data set", "Prediction Latency", "Species distribution modeling", "Visualizing the stock market structure", "Lagged features for time series forecasting", "Compressive sensing: tomography reconstruction with L1 prior (Lasso)", "Topic extraction with Non-negative Matrix Factorization and Latent Dirichlet Allocation", "Libsvm GUI", "Wikipedia principal eigenvector", "Biclustering", "Biclustering documents with the Spectral Co-clustering algorithm", "A demo of the Spectral Biclustering algorithm", "A demo of the Spectral Co-Clustering algorithm", "Calibration", "Probability calibration of classifiers", "Probability Calibration curves", "Probability Calibration for 3-class classification", "Comparison of Calibration of Classifiers", "Classification", "Plot classification probability", "Classifier comparison", "Recognizing hand-written digits", "Normal, Ledoit-Wolf and OAS Linear Discriminant Analysis for classification", "Linear and Quadratic Discriminant Analysis with covariance ellipsoid", "Clustering", "Adjustment for chance in clustering performance evaluation", "Demo of affinity propagation clustering algorithm", "Agglomerative clustering with and without structure", "Agglomerative clustering with different metrics", "Plot Hierarchical Clustering Dendrogram", "Compare BIRCH and MiniBatchKMeans", "Bisecting K-Means and Regular K-Means Performance Comparison", "Comparing different clustering algorithms on toy datasets", "K-means Clustering", "Segmenting the picture of greek coins in regions", "A demo of structured Ward hierarchical clustering on an image of coins", "Color Quantization using K-Means", "Demo of DBSCAN clustering algorithm", "Online learning of a dictionary of parts of faces", "Feature agglomeration", "Various Agglomerative Clustering on a 2D embedding of digits", "Vector Quantization Example", "Feature agglomeration vs. univariate selection", "Demo of HDBSCAN clustering algorithm", "Inductive Clustering", "Demonstration of k-means assumptions", "A demo of K-Means clustering on the handwritten digits data", "An example of K-Means++ initialization", "Selecting the number of clusters with silhouette analysis on KMeans clustering", "Empirical evaluation of the impact of k-means initialization", "Comparing different hierarchical linkage methods on toy datasets", "A demo of the mean-shift clustering algorithm", "Comparison of the K-Means and MiniBatchKMeans clustering algorithms", "Demo of OPTICS clustering algorithm", "Spectral clustering for image segmentation", "Hierarchical clustering: structured vs unstructured ward", "Pipelines and composite estimators", "Column Transformer with Heterogeneous Data Sources", "Column Transformer with Mixed Types", "Selecting dimensionality reduction with Pipeline and GridSearchCV", "Pipelining: chaining a PCA and a logistic regression", "Concatenating multiple feature extraction methods", "Effect of transforming the targets in regression model", "Covariance estimation", "Shrinkage covariance estimation: LedoitWolf vs OAS and max-likelihood", "Ledoit-Wolf vs OAS estimation", "Robust covariance estimation and Mahalanobis distances relevance", "Robust vs Empirical covariance estimate", "Sparse inverse covariance estimation", "Cross decomposition", "Compare cross decomposition methods", "Principal Component Regression vs Partial Least Squares Regression", "Dataset examples", "The Digit Dataset", "The Iris Dataset", "Plot randomly generated classification dataset", "Plot randomly generated multilabel dataset", "Decomposition", "Faces dataset decompositions", "Blind source separation using FastICA", "FastICA on 2D point clouds", "Image denoising using dictionary learning", "Incremental PCA", "Kernel PCA", "PCA example with Iris Data-set", "Model selection with Probabilistic PCA and Factor Analysis (FA)", "Comparison of LDA and PCA 2D projection of Iris dataset", "Sparse coding with a precomputed dictionary", "Factor Analysis (with rotation) to visualize patterns", "Developing Estimators", "<code class=\"docutils literal notranslate\"><span class=\"pre\">__sklearn_is_fitted__</span></code> as Developer API", "Ensemble methods", "Multi-class AdaBoosted Decision Trees", "Decision Tree Regression with AdaBoost", "Two-class AdaBoost", "Single estimator versus bagging: bias-variance decomposition", "OOB Errors for Random Forests", "Feature transformations with ensembles of trees", "Comparing Random Forests and Histogram Gradient Boosting models", "Feature importances with a forest of trees", "Pixel importances with a parallel forest of trees", "Plot the decision surfaces of ensembles of trees on the iris dataset", "Categorical Feature Support in Gradient Boosting", "Early stopping in Gradient Boosting", "Gradient Boosting Out-of-Bag estimates", "Prediction Intervals for Gradient Boosting Regression", "Gradient Boosting regression", "Gradient Boosting regularization", "IsolationForest example", "Monotonic Constraints", "Hashing feature transformation using Totally Random Trees", "Comparing random forests and the multi-output meta estimator", "Combine predictors using stacking", "Plot the decision boundaries of a VotingClassifier", "Plot class probabilities calculated by the VotingClassifier", "Plot individual and voting regression predictions", "Tutorial exercises", "Cross-validation on diabetes Dataset Exercise", "Digits Classification Exercise", "SVM Exercise", "Feature Selection", "Comparison of F-test and mutual information", "Univariate Feature Selection", "Pipeline ANOVA SVM", "Recursive feature elimination", "Recursive feature elimination with cross-validation", "Model-based and sequential feature selection", "Gaussian Process for Machine Learning", "Comparison of kernel ridge and Gaussian process regression", "Probabilistic predictions with Gaussian process classification (GPC)", "Gaussian process classification (GPC) on iris dataset", "Iso-probability lines for Gaussian Processes classification (GPC)", "Illustration of Gaussian process classification (GPC) on the XOR dataset", "Forecasting of CO2 level on Mona Loa dataset using Gaussian process regression (GPR)", "Ability of Gaussian process regression (GPR) to estimate data noise-level", "Gaussian Processes regression: basic introductory example", "Gaussian processes on discrete data structures", "Illustration of prior and posterior Gaussian process for different kernels", "Missing Value Imputation", "Imputing missing values with variants of IterativeImputer", "Imputing missing values before building an estimator", "Examples", "Inspection", "Failure of Machine Learning to infer causal effects", "Common pitfalls in the interpretation of coefficients of linear models", "Partial Dependence and Individual Conditional Expectation Plots", "Permutation Importance vs Random Forest Feature Importance (MDI)", "Permutation Importance with Multicollinear or Correlated Features", "Kernel Approximation", "Scalable learning with polynomial kernel approximation", "Generalized Linear Models", "Comparing Linear Bayesian Regressors", "Curve Fitting with Bayesian Ridge Regression", "Fitting an Elastic Net with a precomputed Gram Matrix and Weighted Samples", "HuberRegressor vs Ridge on dataset with strong outliers", "Logistic Regression 3-class Classifier", "L1-based models for Sparse Signals", "Lasso and Elastic Net", "Lasso on dense and sparse data", "Lasso path using LARS", "Lasso model selection via information criteria", "Lasso model selection: AIC-BIC / cross-validation", "Logistic function", "L1 Penalty and Sparsity in Logistic Regression", "Plot multinomial and One-vs-Rest Logistic Regression", "Regularization path of L1- Logistic Regression", "Joint feature selection with multi-task Lasso", "Non-negative least squares", "Linear Regression Example", "Sparsity Example: Fitting only features 1  and 2", "Ordinary Least Squares and Ridge Regression Variance", "Orthogonal Matching Pursuit", "Poisson regression and non-normal loss", "Polynomial and Spline interpolation", "Quantile regression", "Robust linear model estimation using RANSAC", "Ridge coefficients as a function of the L2 Regularization", "Plot Ridge coefficients as a function of the regularization", "Robust linear estimator fitting", "Comparing various online solvers", "Early stopping of Stochastic Gradient Descent", "Plot multi-class SGD on the iris dataset", "SGD: convex loss functions", "SGD: Penalties", "SGD: Maximum margin separating hyperplane", "SGD: Weighted samples", "One-Class SVM versus One-Class SVM using Stochastic Gradient Descent", "Multiclass sparse logistic regression on 20newgroups", "MNIST classification using multinomial logistic + L1", "Theil-Sen Regression", "Tweedie regression on insurance claims", "Manifold learning", "Comparison of Manifold Learning methods", "Manifold learning on handwritten digits: Locally Linear Embedding, Isomap\u2026", "Manifold Learning methods on a severed sphere", "Multi-dimensional scaling", "Swiss Roll And Swiss-Hole Reduction", "t-SNE: The effect of various perplexity values on the shape", "Miscellaneous", "Comparing anomaly detection algorithms for outlier detection on toy datasets", "Visualizations with Display Objects", "Displaying estimators and complex pipelines", "Isotonic Regression", "The Johnson-Lindenstrauss bound for embedding with random projections", "Explicit feature map approximation for RBF kernels", "Comparison of kernel ridge regression and SVR", "Metadata Routing", "Multilabel classification", "Face completion with a multi-output estimators", "Evaluation of outlier detection estimators", "Advanced Plotting With Partial Dependence", "Displaying Pipelines", "ROC Curve with Visualization API", "Introducing the <code class=\"docutils literal notranslate\"><span class=\"pre\">set_output</span></code> API", "Gaussian Mixture Models", "Concentration Prior Type Analysis of Variation Bayesian Gaussian Mixture", "Gaussian Mixture Model Ellipsoids", "GMM covariances", "GMM Initialization Methods", "Density Estimation for a Gaussian mixture", "Gaussian Mixture Model Selection", "Gaussian Mixture Model Sine Curve", "Model Selection", "Confusion matrix", "Visualizing cross-validation behavior in scikit-learn", "Plotting Cross-Validated Predictions", "Detection error tradeoff (DET) curve", "Custom refit strategy of a grid search with cross-validation", "Balance model complexity and cross-validated score", "Statistical comparison of models using grid search", "Sample pipeline for text feature extraction and evaluation", "Plotting Learning Curves and Checking Models\u2019 Scalability", "Class Likelihood Ratios to measure classification performance", "Demonstration of multi-metric evaluation on cross_val_score and GridSearchCV", "Nested versus non-nested cross-validation", "Test with permutations the significance of a classification score", "Precision-Recall", "Comparing randomized search and grid search for hyperparameter estimation", "Multiclass Receiver Operating Characteristic (ROC)", "Receiver Operating Characteristic (ROC) with cross validation", "Comparison between grid search and successive halving", "Successive Halving Iterations", "Train error vs Test error", "Underfitting vs. Overfitting", "Plotting Validation Curves", "Multiclass methods", "Overview of multiclass training meta-estimators", "Multioutput methods", "Multilabel classification using a classifier chain", "Approximate nearest neighbors in TSNE", "Nearest Neighbors", "Caching nearest neighbors", "Nearest Neighbors Classification", "Kernel Density Estimation", "Simple 1D Kernel Density Estimation", "Novelty detection with Local Outlier Factor (LOF)", "Outlier detection with Local Outlier Factor (LOF)", "Comparing Nearest Neighbors with and without Neighborhood Components Analysis", "Dimensionality Reduction with Neighborhood Components Analysis", "Neighborhood Components Analysis Illustration", "Nearest Centroid Classification", "Nearest Neighbors regression", "Kernel Density Estimate of Species Distributions", "Neural Networks", "Varying regularization in Multi-layer Perceptron", "Compare Stochastic learning strategies for MLPClassifier", "Visualization of MLP weights on MNIST", "Restricted Boltzmann Machine features for digit classification", "Preprocessing", "Compare the effect of different scalers on data with outliers", "Using KBinsDiscretizer to discretize continuous features", "Feature discretization", "Demonstrating the different strategies of KBinsDiscretizer", "Map data to a normal distribution", "Importance of Feature Scaling", "Comparing Target Encoder with Other Encoders", "Target Encoder\u2019s Internal Cross fitting", "Release Highlights", "Release Highlights for scikit-learn 0.22", "Release Highlights for scikit-learn 0.23", "Release Highlights for scikit-learn 0.24", "Release Highlights for scikit-learn 1.0", "Release Highlights for scikit-learn 1.1", "Release Highlights for scikit-learn 1.2", "Release Highlights for scikit-learn 1.3", "Release Highlights for scikit-learn 1.4", "Semi Supervised Classification", "Label Propagation digits: Demonstrating performance", "Label Propagation digits active learning", "Label Propagation learning a complex structure", "Effect of varying threshold for self-training", "Semi-supervised Classification on a Text Dataset", "Decision boundary of semi-supervised classifiers versus SVM on the Iris dataset", "Support Vector Machines", "SVM with custom kernel", "Plot different SVM classifiers in the iris dataset", "Plot the support vectors in LinearSVC", "One-class SVM with non-linear kernel (RBF)", "RBF SVM parameters", "SVM: Maximum margin separating hyperplane", "SVM: Separating hyperplane for unbalanced classes", "SVM-Anova: SVM with univariate feature selection", "Plot classification boundaries with different SVM Kernels", "SVM Margins Example", "Non-linear SVM", "Support Vector Regression (SVR) using linear and non-linear kernels", "Scaling the regularization parameter for SVCs", "SVM Tie Breaking Example", "SVM: Weighted samples", "Working with text documents", "Classification of text documents using sparse features", "Clustering text documents using k-means", "FeatureHasher and DictVectorizer Comparison", "Decision Trees", "Post pruning decision trees with cost complexity pruning", "Plot the decision surface of decision trees trained on the iris dataset", "Decision Tree Regression", "Multi-output Decision Tree Regression", "Understanding the decision tree structure", "<span class=\"section-number\">10. </span>Common pitfalls and recommended practices", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">8. </span>Computing with scikit-learn", "<span class=\"section-number\">8.2. </span>Computational Performance", "<span class=\"section-number\">8.3. </span>Parallelism, resource management, and configuration", "<span class=\"section-number\">8.1. </span>Strategies to scale computationally: bigger data", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">6. </span>Dataset transformations", "<span class=\"section-number\">7. </span>Dataset loading utilities", "<span class=\"section-number\">7.4. </span>Loading other datasets", "<span class=\"section-number\">7.2. </span>Real world datasets", "<span class=\"section-number\">7.3. </span>Generated datasets", "<span class=\"section-number\">7.1. </span>Toy datasets", "Installing the development version of scikit-learn", "Bug triaging and issue curation", "Contributing", "Cython Best Practices, Conventions and Knowledge", "Developing scikit-learn estimators", "Developer\u2019s Guide", "Maintainer / core-developer information", "Crafting a minimal reproducer for scikit-learn", "How to optimize for speed", "Developing with the Plotting API", "Developers\u2019 Tips and Tricks", "Utilities for Developers", "<span class=\"section-number\">11. </span>Dispatching", "&lt;no title&gt;", "Frequently Asked Questions", "Getting Started", "Glossary of Common Terms and API Elements", "Scikit-learn governance and decision-making", "Index", "<span class=\"section-number\">4. </span>Inspection", "Installing scikit-learn", "<span class=\"section-number\">1. </span>Metadata Routing", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">9. </span>Model persistence", "<span class=\"section-number\">3. </span>Model selection and evaluation", "<span class=\"section-number\">11.1. </span>Array API support (experimental)", "<span class=\"section-number\">2.4. </span>Biclustering", "<span class=\"section-number\">1.16. </span>Probability calibration", "API Reference", "<span class=\"section-number\">2.3. </span>Clustering", "<span class=\"section-number\">6.1. </span>Pipelines and composite estimators", "<span class=\"section-number\">2.6. </span>Covariance estimation", "<span class=\"section-number\">1.8. </span>Cross decomposition", "<span class=\"section-number\">3.1. </span>Cross-validation: evaluating estimator performance", "<span class=\"section-number\">2.5. </span>Decomposing signals in components (matrix factorization problems)", "<span class=\"section-number\">2.8. </span>Density Estimation", "<span class=\"section-number\">1.11. </span>Ensembles: Gradient boosting, random forests, bagging, voting, stacking", "<span class=\"section-number\">6.2. </span>Feature extraction", "<span class=\"section-number\">1.13. </span>Feature selection", "<span class=\"section-number\">1.7. </span>Gaussian Processes", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.dbscan", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.fastica", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.oas", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.BaseEstimator", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.BiclusterMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.ClassNamePrefixFeaturesOutMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.ClassifierMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.ClusterMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.DensityMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.MetaEstimatorMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.OneToOneFeatureMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.OutlierMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.RegressorMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.TransformerMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.clone", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.is_classifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.is_regressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.calibration</span></code>.CalibratedClassifierCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.calibration</span></code>.CalibrationDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.calibration</span></code>.calibration_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.AffinityPropagation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.AgglomerativeClustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.Birch", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.BisectingKMeans", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.DBSCAN", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.FeatureAgglomeration", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.HDBSCAN", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.KMeans", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.MeanShift", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.MiniBatchKMeans", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.OPTICS", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.SpectralBiclustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.SpectralClustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.SpectralCoclustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.affinity_propagation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.cluster_optics_dbscan", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.cluster_optics_xi", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.compute_optics_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.estimate_bandwidth", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.k_means", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.kmeans_plusplus", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.mean_shift", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.spectral_clustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.ward_tree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.compose</span></code>.ColumnTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.compose</span></code>.TransformedTargetRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.compose</span></code>.make_column_selector", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.compose</span></code>.make_column_transformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn</span></code>.config_context", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.EllipticEnvelope", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.EmpiricalCovariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.GraphicalLasso", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.GraphicalLassoCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.LedoitWolf", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.MinCovDet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.OAS", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.ShrunkCovariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.empirical_covariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.graphical_lasso", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.ledoit_wolf", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.ledoit_wolf_shrinkage", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.shrunk_covariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cross_decomposition</span></code>.CCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cross_decomposition</span></code>.PLSCanonical", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cross_decomposition</span></code>.PLSRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cross_decomposition</span></code>.PLSSVD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.clear_data_home", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.dump_svmlight_file", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_20newsgroups", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_20newsgroups_vectorized", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_california_housing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_covtype", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_kddcup99", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_lfw_pairs", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_lfw_people", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_olivetti_faces", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_openml", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_rcv1", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_species_distributions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.get_data_home", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_breast_cancer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_diabetes", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_digits", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_files", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_iris", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_linnerud", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_sample_image", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_sample_images", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_svmlight_file", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_svmlight_files", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_wine", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_biclusters", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_blobs", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_checkerboard", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_circles", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_classification", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_friedman1", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_friedman2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_friedman3", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_gaussian_quantiles", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_hastie_10_2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_low_rank_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_moons", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_multilabel_classification", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_s_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_sparse_coded_signal", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_sparse_spd_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_sparse_uncorrelated", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_spd_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_swiss_roll", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.DictionaryLearning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.FactorAnalysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.FastICA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.IncrementalPCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.KernelPCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.LatentDirichletAllocation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.MiniBatchDictionaryLearning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.MiniBatchNMF", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.MiniBatchSparsePCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.NMF", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.PCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.SparseCoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.SparsePCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.TruncatedSVD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.dict_learning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.dict_learning_online", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.non_negative_factorization", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.sparse_encode", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.discriminant_analysis</span></code>.LinearDiscriminantAnalysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.discriminant_analysis</span></code>.QuadraticDiscriminantAnalysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.dummy</span></code>.DummyClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.dummy</span></code>.DummyRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.AdaBoostClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.AdaBoostRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.BaggingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.BaggingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.ExtraTreesClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.ExtraTreesRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.GradientBoostingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.GradientBoostingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.HistGradientBoostingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.HistGradientBoostingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.IsolationForest", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.RandomForestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.RandomForestRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.RandomTreesEmbedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.StackingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.StackingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.VotingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.VotingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.ConvergenceWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.DataConversionWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.DataDimensionalityWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.EfficiencyWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.FitFailedWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.InconsistentVersionWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.NotFittedError", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.UndefinedMetricWarning", "sklearn.experimental.enable_halving_search_cv", "sklearn.experimental.enable_iterative_imputer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction</span></code>.DictVectorizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction</span></code>.FeatureHasher", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.PatchExtractor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.extract_patches_2d", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.grid_to_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.img_to_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.reconstruct_from_patches_2d", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.text</span></code>.CountVectorizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.text</span></code>.HashingVectorizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.text</span></code>.TfidfTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.text</span></code>.TfidfVectorizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.GenericUnivariateSelect", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.RFE", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.RFECV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectFdr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectFpr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectFromModel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectFwe", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectKBest", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectPercentile", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectorMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SequentialFeatureSelector", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.VarianceThreshold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.chi2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.f_classif", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.f_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.mutual_info_classif", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.mutual_info_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.r_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process</span></code>.GaussianProcessClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process</span></code>.GaussianProcessRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.CompoundKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.ConstantKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.DotProduct", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.ExpSineSquared", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Exponentiation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Hyperparameter", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Matern", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.PairwiseKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Product", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.RBF", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.RationalQuadratic", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Sum", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.WhiteKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn</span></code>.get_config", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.impute</span></code>.IterativeImputer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.impute</span></code>.KNNImputer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.impute</span></code>.MissingIndicator", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.impute</span></code>.SimpleImputer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.inspection</span></code>.DecisionBoundaryDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.inspection</span></code>.PartialDependenceDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.inspection</span></code>.partial_dependence", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.inspection</span></code>.permutation_importance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.isotonic</span></code>.IsotonicRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.isotonic</span></code>.check_increasing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.isotonic</span></code>.isotonic_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.AdditiveChi2Sampler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.Nystroem", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.PolynomialCountSketch", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.RBFSampler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.SkewedChi2Sampler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_ridge</span></code>.KernelRidge", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.ARDRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.BayesianRidge", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.ElasticNet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.ElasticNetCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.GammaRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.HuberRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.Lars", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LarsCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.Lasso", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LassoCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LassoLars", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LassoLarsCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LassoLarsIC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LinearRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LogisticRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LogisticRegressionCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.MultiTaskElasticNet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.MultiTaskElasticNetCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.MultiTaskLasso", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.MultiTaskLassoCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.OrthogonalMatchingPursuit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.OrthogonalMatchingPursuitCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.PassiveAggressiveClassifier", "sklearn.linear_model.PassiveAggressiveRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.Perceptron", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.PoissonRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.QuantileRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.RANSACRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.Ridge", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.RidgeCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.RidgeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.RidgeClassifierCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.SGDClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.SGDOneClassSVM", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.SGDRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.TheilSenRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.TweedieRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.enet_path", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.lars_path", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.lars_path_gram", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.lasso_path", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.orthogonal_mp", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.orthogonal_mp_gram", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.ridge_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.Isomap", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.LocallyLinearEmbedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.MDS", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.SpectralEmbedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.TSNE", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.locally_linear_embedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.smacof", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.spectral_embedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.trustworthiness", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.ConfusionMatrixDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.DetCurveDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.DistanceMetric", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.PrecisionRecallDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.PredictionErrorDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.RocCurveDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.accuracy_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.adjusted_mutual_info_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.adjusted_rand_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.auc", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.average_precision_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.balanced_accuracy_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.brier_score_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.calinski_harabasz_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.check_scoring", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.class_likelihood_ratios", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.classification_report", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.cluster</span></code>.contingency_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.cluster</span></code>.pair_confusion_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.cohen_kappa_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.completeness_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.confusion_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.consensus_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.coverage_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.d2_absolute_error_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.d2_pinball_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.d2_tweedie_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.davies_bouldin_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.dcg_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.det_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.explained_variance_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.f1_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.fbeta_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.fowlkes_mallows_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.get_scorer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.get_scorer_names", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.hamming_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.hinge_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.homogeneity_completeness_v_measure", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.homogeneity_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.jaccard_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.label_ranking_average_precision_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.label_ranking_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.log_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.make_scorer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.matthews_corrcoef", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.max_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_absolute_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_absolute_percentage_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_gamma_deviance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_pinball_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_poisson_deviance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_squared_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_squared_log_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_tweedie_deviance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.median_absolute_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.multilabel_confusion_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mutual_info_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.ndcg_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.normalized_mutual_info_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.additive_chi2_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.chi2_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.cosine_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.cosine_similarity", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.distance_metrics", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.euclidean_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.haversine_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.kernel_metrics", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.laplacian_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.linear_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.manhattan_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.nan_euclidean_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.paired_cosine_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.paired_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.paired_euclidean_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.paired_manhattan_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.pairwise_kernels", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.polynomial_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.rbf_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.sigmoid_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.pairwise_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.pairwise_distances_argmin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.pairwise_distances_argmin_min", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.pairwise_distances_chunked", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.precision_recall_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.precision_recall_fscore_support", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.precision_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.r2_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.rand_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.recall_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.roc_auc_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.roc_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.root_mean_squared_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.root_mean_squared_log_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.silhouette_samples", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.silhouette_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.top_k_accuracy_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.v_measure_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.zero_one_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.mixture</span></code>.BayesianGaussianMixture", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.mixture</span></code>.GaussianMixture", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.GridSearchCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.GroupKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.GroupShuffleSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.HalvingGridSearchCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.HalvingRandomSearchCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.KFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LearningCurveDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LeaveOneGroupOut", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LeaveOneOut", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LeavePGroupsOut", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LeavePOut", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.ParameterGrid", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.ParameterSampler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.PredefinedSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.RandomizedSearchCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.RepeatedKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.RepeatedStratifiedKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.ShuffleSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.StratifiedGroupKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.StratifiedKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.StratifiedShuffleSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.TimeSeriesSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.ValidationCurveDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.check_cv", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.cross_val_predict", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.cross_val_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.cross_validate", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.learning_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.permutation_test_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.train_test_split", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.validation_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multiclass</span></code>.OneVsOneClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multiclass</span></code>.OneVsRestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multiclass</span></code>.OutputCodeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multioutput</span></code>.ClassifierChain", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multioutput</span></code>.MultiOutputClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multioutput</span></code>.MultiOutputRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multioutput</span></code>.RegressorChain", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.BernoulliNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.CategoricalNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.ComplementNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.GaussianNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.MultinomialNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.BallTree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KDTree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KNeighborsClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KNeighborsRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KNeighborsTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KernelDensity", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.LocalOutlierFactor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.NearestCentroid", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.NearestNeighbors", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.NeighborhoodComponentsAnalysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.RadiusNeighborsClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.RadiusNeighborsRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.RadiusNeighborsTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.kneighbors_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.radius_neighbors_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.sort_graph_by_row_values", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neural_network</span></code>.BernoulliRBM", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neural_network</span></code>.MLPClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neural_network</span></code>.MLPRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.pipeline</span></code>.FeatureUnion", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.pipeline</span></code>.Pipeline", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.pipeline</span></code>.make_pipeline", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.pipeline</span></code>.make_union", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.Binarizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.FunctionTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.KBinsDiscretizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.KernelCenterer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.LabelBinarizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.LabelEncoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.MaxAbsScaler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.MinMaxScaler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.MultiLabelBinarizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.Normalizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.OneHotEncoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.OrdinalEncoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.PolynomialFeatures", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.PowerTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.QuantileTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.RobustScaler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.SplineTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.StandardScaler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.TargetEncoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.add_dummy_feature", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.binarize", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.label_binarize", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.maxabs_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.minmax_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.normalize", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.power_transform", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.quantile_transform", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.robust_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.random_projection</span></code>.GaussianRandomProjection", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.random_projection</span></code>.SparseRandomProjection", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.random_projection</span></code>.johnson_lindenstrauss_min_dim", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.semi_supervised</span></code>.LabelPropagation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.semi_supervised</span></code>.LabelSpreading", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.semi_supervised</span></code>.SelfTrainingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn</span></code>.set_config", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn</span></code>.show_versions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.LinearSVC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.LinearSVR", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.NuSVC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.NuSVR", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.OneClassSVM", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.SVC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.SVR", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.l1_min_c", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.DecisionTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.DecisionTreeRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.ExtraTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.ExtraTreeRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.export_graphviz", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.export_text", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.plot_tree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.Bunch", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>._safe_indexing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.arrayfuncs</span></code>.min_pos", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.as_float_array", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.assert_all_finite", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_X_y", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_array", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_consistent_length", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_random_state", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_scalar", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.class_weight</span></code>.compute_class_weight", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.class_weight</span></code>.compute_sample_weight", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.deprecated", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.discovery</span></code>.all_displays", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.discovery</span></code>.all_estimators", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.discovery</span></code>.all_functions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.estimator_checks</span></code>.check_estimator", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.estimator_checks</span></code>.parametrize_with_checks", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.estimator_html_repr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.density", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.fast_logdet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.randomized_range_finder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.randomized_svd", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.safe_sparse_dot", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.weighted_mode", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.gen_batches", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.gen_even_slices", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.graph</span></code>.single_source_shortest_path_length", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.indexable", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metadata_routing</span></code>.MetadataRequest", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metadata_routing</span></code>.MetadataRouter", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metadata_routing</span></code>.MethodMapping", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metadata_routing</span></code>.get_routing_for_object", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metadata_routing</span></code>.process_routing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metaestimators</span></code>.available_if", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.multiclass</span></code>.is_multilabel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.multiclass</span></code>.type_of_target", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.multiclass</span></code>.unique_labels", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.murmurhash3_32", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.parallel</span></code>.Parallel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.parallel</span></code>.delayed", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.parallel_backend", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.random</span></code>.sample_without_replacement", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.register_parallel_backend", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.resample", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.safe_mask", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.safe_sqr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.shuffle", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.incr_mean_variance_axis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_column_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_csr_column_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_row_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_swap_column", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_swap_row", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.mean_variance_axis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs_fast</span></code>.inplace_csr_row_normalize_l1", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs_fast</span></code>.inplace_csr_row_normalize_l2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.check_is_fitted", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.check_memory", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.check_symmetric", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.column_or_1d", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.has_fit_parameter", "<span class=\"section-number\">3.2. </span>Tuning the hyper-parameters of an estimator", "<span class=\"section-number\">6.4. </span>Imputation of missing values", "<span class=\"section-number\">1.15. </span>Isotonic regression", "<span class=\"section-number\">6.7. </span>Kernel Approximation", "<span class=\"section-number\">1.3. </span>Kernel ridge regression", "<span class=\"section-number\">1.2. </span>Linear and Quadratic Discriminant Analysis", "<span class=\"section-number\">3.4. </span>Validation curves: plotting scores to evaluate models", "<span class=\"section-number\">1.1. </span>Linear Models", "<span class=\"section-number\">2.2. </span>Manifold learning", "<span class=\"section-number\">6.8. </span>Pairwise metrics, Affinities and Kernels", "<span class=\"section-number\">2.1. </span>Gaussian mixture models", "<span class=\"section-number\">3.3. </span>Metrics and scoring: quantifying the quality of predictions", "<span class=\"section-number\">1.12. </span>Multiclass and multioutput algorithms", "<span class=\"section-number\">1.9. </span>Naive Bayes", "<span class=\"section-number\">1.6. </span>Nearest Neighbors", "<span class=\"section-number\">1.17. </span>Neural network models (supervised)", "<span class=\"section-number\">2.9. </span>Neural network models (unsupervised)", "<span class=\"section-number\">2.7. </span>Novelty and Outlier Detection", "<span class=\"section-number\">4.1. </span>Partial Dependence and Individual Conditional Expectation plots", "<span class=\"section-number\">4.2. </span>Permutation feature importance", "&lt;no title&gt;", "<span class=\"section-number\">6.3. </span>Preprocessing data", "<span class=\"section-number\">6.9. </span>Transforming the prediction target (<code class=\"docutils literal notranslate\"><span class=\"pre\">y</span></code>)", "<span class=\"section-number\">6.6. </span>Random Projection", "<span class=\"section-number\">1.14. </span>Semi-supervised learning", "<span class=\"section-number\">1.5. </span>Stochastic Gradient Descent", "<span class=\"section-number\">1.4. </span>Support Vector Machines", "<span class=\"section-number\">1.10. </span>Decision Trees", "<span class=\"section-number\">6.5. </span>Unsupervised dimensionality reduction", "External Resources, Videos and Talks", "Related Projects", "Roadmap", "Computation times", "<span class=\"section-number\">1. </span>Supervised learning", "Support", "Who is using scikit-learn?", "An introduction to machine learning with scikit-learn", "scikit-learn Tutorials", "Choosing the right estimator", "A tutorial on statistical-learning for scientific data processing", "Model selection: choosing estimators and their parameters", "Putting it all together", "Statistical learning: the setting and the estimator object in scikit-learn", "Supervised learning: predicting an output variable from high-dimensional observations", "Unsupervised learning: seeking representations of the data", "Working With Text Data", "<span class=\"section-number\">2. </span>Unsupervised learning", "User Guide", "<span class=\"section-number\">5. </span>Visualizations", "Release History", "&lt;no title&gt;", "Older Versions", "Version 0.13", "Version 0.14", "Version 0.15", "Version 0.16", "Version 0.17", "Version 0.18", "Version 0.19", "Version 0.20", "Version 0.21", "Version 0.22", "Version 0.23", "Version 0.24", "Version 1.0", "Version 1.1", "Version 1.2", "Version 1.3", "Version 1.4", "Version 1.5"], "terms": {"click": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "more": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "detail": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "thi": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 152, 153, 154, 155, 156, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 323, 324, 325, 326, 327, 328, 332, 333, 334, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 357, 358, 359, 360, 362, 363, 364, 367, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392, 393, 394, 395, 396, 397, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 446, 447, 448, 449, 451, 453, 454, 457, 460, 461, 462, 463, 465, 466, 467, 469, 472, 473, 479, 480, 481, 482, 483, 484, 485, 487, 488, 490, 491, 492, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 538, 539, 541, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 596, 597, 598, 599, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 663, 664, 665, 666, 667, 668, 670, 671, 673, 676, 677, 678, 680, 681, 682, 684, 685, 686, 687, 689, 690, 691, 692, 693, 695, 699, 700, 701, 702, 703, 704, 705, 706, 711, 717, 718, 719, 720, 721, 722, 724, 725, 726, 728, 731, 732, 737, 741, 742, 743, 744, 745, 746, 747, 748, 750, 751, 752, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 880, 881, 885, 886, 891, 892, 894, 896, 897, 902, 904, 909, 910, 911, 912, 913, 914, 916, 919, 920, 921, 923, 924, 927, 928, 937, 942, 943, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 976, 977, 978, 981, 982, 983, 984, 985, 986, 987, 990, 991, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "wa": [0, 4, 8, 14, 16, 37, 66, 67, 75, 80, 85, 118, 121, 135, 146, 153, 158, 185, 205, 218, 230, 232, 234, 236, 238, 244, 245, 255, 275, 283, 287, 288, 292, 298, 299, 319, 321, 327, 328, 332, 340, 342, 343, 345, 349, 350, 359, 363, 364, 367, 369, 370, 373, 376, 377, 381, 385, 397, 404, 405, 406, 407, 409, 410, 411, 413, 414, 418, 421, 424, 428, 432, 433, 438, 446, 447, 448, 449, 479, 487, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 513, 517, 518, 519, 520, 521, 522, 527, 528, 529, 530, 531, 532, 533, 534, 545, 546, 547, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 591, 592, 593, 594, 599, 602, 603, 604, 605, 606, 628, 640, 641, 649, 650, 652, 653, 656, 677, 692, 693, 746, 747, 750, 760, 761, 762, 765, 766, 776, 788, 790, 802, 809, 812, 814, 817, 821, 825, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 857, 858, 862, 863, 896, 897, 920, 941, 942, 943, 952, 953, 956, 959, 963, 966, 969, 972, 978, 986, 987, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "start": [0, 4, 7, 10, 12, 13, 20, 25, 50, 55, 61, 64, 70, 80, 90, 106, 112, 114, 132, 135, 142, 144, 154, 158, 161, 162, 170, 181, 182, 183, 189, 199, 201, 205, 213, 215, 227, 238, 246, 258, 291, 293, 297, 319, 327, 328, 332, 333, 334, 338, 345, 346, 347, 349, 350, 351, 357, 359, 363, 370, 373, 377, 378, 382, 383, 404, 406, 414, 418, 420, 502, 574, 581, 596, 609, 617, 623, 630, 631, 632, 640, 641, 642, 654, 658, 744, 745, 752, 760, 761, 762, 765, 766, 776, 807, 808, 809, 811, 813, 821, 907, 937, 942, 949, 952, 957, 958, 967, 973, 977, 978, 986, 987, 996, 998, 1001, 1003, 1005, 1006, 1007, 1008, 1009], "2007": [0, 35, 169, 340, 373, 382, 404, 416, 418, 424, 426, 530, 620, 655, 681, 697, 700, 721, 722, 758, 945, 949, 951, 953], "googl": [0, 17, 357, 373, 406, 971, 983, 993], "summer": [0, 4, 13, 45, 993], "code": [0, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 152, 153, 154, 155, 156, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 323, 324, 325, 326, 327, 328, 332, 333, 339, 343, 344, 346, 348, 349, 354, 357, 359, 360, 363, 364, 367, 369, 372, 373, 380, 381, 406, 407, 411, 413, 423, 460, 490, 494, 495, 501, 502, 506, 507, 509, 510, 512, 530, 536, 545, 546, 549, 550, 610, 611, 614, 615, 616, 617, 618, 619, 620, 624, 625, 626, 627, 628, 629, 646, 647, 649, 650, 793, 794, 795, 832, 839, 921, 950, 954, 963, 965, 967, 968, 972, 973, 974, 976, 977, 979, 987, 993, 995, 996, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "david": [0, 2, 34, 54, 76, 107, 160, 165, 183, 218, 239, 241, 283, 319, 320, 321, 340, 373, 380, 383, 426, 496, 500, 531, 532, 586, 587, 592, 688, 760, 862, 943, 949, 957, 966, 977, 993, 996, 997, 998, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "cournapeau": [0, 2, 993, 996], "later": [0, 11, 50, 101, 106, 115, 137, 154, 158, 160, 218, 255, 271, 321, 328, 351, 357, 358, 363, 367, 811, 834, 835, 843, 845, 945, 963, 982, 987, 996, 999, 1001, 1005], "year": [0, 4, 13, 124, 135, 142, 152, 153, 154, 181, 182, 199, 342, 344, 349, 357, 377, 381, 764, 769, 771, 844, 949, 953, 973, 977, 985], "matthieu": [0, 2, 993, 997, 1008], "brucher": [0, 2, 993], "work": [0, 4, 9, 13, 17, 30, 41, 42, 45, 49, 64, 73, 104, 111, 124, 135, 143, 144, 152, 153, 154, 170, 185, 198, 215, 224, 226, 236, 255, 264, 265, 284, 288, 290, 291, 293, 309, 320, 321, 328, 333, 334, 339, 340, 343, 345, 346, 347, 348, 349, 350, 351, 353, 358, 359, 360, 369, 370, 371, 373, 374, 375, 378, 380, 381, 382, 385, 386, 387, 388, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 421, 424, 428, 429, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 446, 447, 448, 449, 468, 472, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 545, 546, 547, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 574, 575, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 599, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 652, 653, 654, 655, 656, 659, 672, 705, 737, 741, 742, 743, 744, 751, 760, 761, 762, 763, 764, 765, 766, 767, 769, 770, 771, 772, 775, 776, 777, 778, 779, 780, 781, 782, 783, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 821, 822, 823, 825, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 902, 906, 921, 942, 943, 945, 947, 948, 949, 950, 952, 953, 955, 956, 959, 960, 963, 966, 967, 972, 973, 977, 978, 979, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "part": [0, 5, 13, 29, 33, 58, 67, 77, 87, 90, 104, 107, 110, 114, 119, 126, 127, 128, 132, 142, 150, 160, 215, 217, 227, 233, 235, 252, 273, 280, 283, 285, 321, 334, 340, 342, 345, 347, 351, 353, 358, 359, 363, 369, 371, 373, 377, 378, 380, 381, 383, 410, 413, 457, 458, 459, 485, 495, 501, 506, 538, 548, 549, 550, 577, 589, 756, 830, 848, 850, 851, 852, 853, 854, 855, 856, 942, 943, 945, 950, 954, 971, 972, 973, 974, 975, 977, 980, 987, 989, 993, 1001, 1002, 1004, 1006, 1008], "hi": [0, 374, 953, 987], "thesi": [0, 342, 373, 380], "In": [0, 4, 5, 7, 9, 11, 12, 13, 14, 15, 24, 25, 26, 32, 34, 36, 45, 46, 50, 52, 54, 55, 57, 63, 64, 67, 68, 70, 71, 73, 75, 76, 77, 80, 82, 83, 87, 89, 92, 94, 95, 99, 101, 104, 106, 107, 108, 109, 110, 111, 112, 114, 116, 117, 118, 119, 121, 124, 131, 132, 134, 135, 137, 141, 142, 144, 145, 146, 148, 149, 152, 153, 154, 155, 156, 158, 160, 161, 162, 165, 169, 170, 172, 176, 181, 182, 183, 184, 185, 186, 189, 198, 199, 208, 209, 210, 211, 213, 214, 215, 216, 218, 219, 220, 221, 222, 227, 229, 232, 235, 236, 238, 239, 240, 241, 243, 244, 247, 248, 250, 252, 253, 255, 258, 261, 264, 265, 267, 276, 278, 279, 280, 283, 284, 285, 287, 288, 289, 291, 292, 294, 298, 300, 307, 311, 315, 319, 320, 321, 323, 327, 328, 332, 333, 334, 338, 339, 340, 341, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 357, 358, 359, 360, 362, 363, 364, 367, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 390, 401, 404, 405, 406, 407, 408, 411, 412, 413, 416, 426, 427, 428, 433, 436, 439, 457, 460, 467, 472, 473, 475, 487, 498, 500, 502, 504, 505, 506, 508, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 545, 546, 552, 555, 566, 570, 573, 574, 575, 594, 596, 597, 598, 600, 607, 608, 609, 611, 612, 613, 615, 617, 619, 622, 623, 625, 627, 629, 630, 632, 633, 638, 639, 640, 643, 644, 648, 649, 650, 660, 663, 667, 676, 682, 684, 689, 691, 692, 697, 698, 701, 703, 705, 717, 719, 720, 744, 746, 748, 751, 757, 759, 760, 761, 762, 765, 766, 768, 776, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 799, 800, 801, 802, 803, 804, 807, 808, 809, 811, 812, 813, 815, 816, 817, 822, 830, 832, 838, 839, 843, 844, 846, 850, 851, 853, 854, 855, 856, 857, 858, 860, 861, 862, 865, 866, 867, 870, 873, 875, 880, 884, 886, 902, 942, 943, 945, 946, 947, 948, 949, 950, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 963, 964, 965, 966, 967, 968, 969, 973, 977, 978, 985, 986, 987, 990, 993, 994, 996, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "2010": [0, 44, 64, 74, 154, 243, 244, 370, 373, 375, 377, 378, 386, 439, 500, 668, 672, 683, 684, 703, 790, 822, 823, 945, 949, 953, 957, 967, 971, 993], "fabian": [0, 2, 168, 186, 202, 270, 993, 994, 995, 996, 997, 999, 1000, 1002, 1010], "pedregosa": [0, 2, 168, 186, 202, 270, 993, 994, 995, 996, 997, 999], "gael": [0, 1, 12, 30, 36, 37, 43, 49, 50, 63, 64, 77, 89, 170, 171, 202, 213, 226, 971, 973, 977, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "varoquaux": [0, 1, 12, 29, 30, 36, 37, 42, 43, 48, 49, 50, 63, 64, 69, 77, 82, 83, 89, 93, 164, 170, 171, 178, 179, 202, 204, 211, 213, 226, 280, 311, 312, 360, 971, 977, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "alexandr": [0, 1, 2, 23, 24, 28, 39, 44, 51, 64, 87, 89, 94, 166, 168, 169, 170, 172, 174, 175, 208, 211, 244, 251, 270, 360, 977, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010], "gramfort": [0, 1, 23, 24, 28, 39, 44, 51, 64, 87, 89, 94, 166, 168, 169, 170, 172, 174, 175, 208, 211, 244, 251, 270, 360, 977, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007], "vincent": [0, 2, 44, 64, 140, 144, 977, 993, 995, 997, 998, 1000, 1003, 1008, 1009, 1010], "michel": [0, 2, 44, 64, 993, 995, 996, 998, 1000, 1007, 1008], "inria": [0, 5, 9, 28, 34, 49, 51, 54, 71, 77, 107, 143, 160, 165, 166, 168, 172, 174, 175, 186, 202, 203, 208, 211, 218, 239, 241, 244, 251, 270, 283, 315, 319, 320, 321, 622, 993], "took": [0, 4, 39, 246], "leadership": 0, "made": [0, 13, 66, 76, 82, 92, 101, 107, 124, 144, 153, 154, 181, 199, 218, 230, 242, 284, 288, 307, 324, 332, 340, 342, 345, 349, 359, 360, 373, 380, 381, 385, 407, 410, 411, 413, 423, 460, 467, 552, 553, 555, 594, 595, 620, 629, 649, 650, 698, 746, 762, 765, 766, 776, 780, 781, 782, 802, 805, 806, 954, 959, 969, 972, 977, 984, 986, 993, 994, 995, 996, 997, 1000, 1002, 1003, 1006, 1007], "first": [0, 4, 5, 7, 8, 11, 13, 17, 20, 24, 25, 28, 29, 30, 32, 36, 52, 53, 55, 58, 61, 62, 63, 64, 66, 67, 68, 71, 75, 79, 80, 82, 83, 84, 92, 95, 101, 102, 106, 108, 109, 110, 111, 112, 113, 115, 118, 121, 122, 123, 124, 131, 132, 135, 137, 138, 139, 142, 143, 144, 145, 149, 152, 153, 154, 156, 158, 160, 162, 164, 170, 177, 178, 179, 182, 183, 189, 190, 195, 202, 205, 212, 213, 215, 216, 217, 219, 221, 222, 226, 230, 233, 238, 240, 241, 245, 247, 249, 250, 255, 257, 258, 260, 263, 267, 268, 269, 273, 275, 278, 280, 283, 284, 285, 288, 289, 297, 300, 303, 304, 307, 309, 319, 320, 321, 323, 324, 327, 328, 333, 334, 339, 340, 342, 343, 344, 347, 349, 350, 351, 353, 357, 359, 370, 371, 373, 376, 377, 378, 380, 381, 382, 383, 385, 407, 410, 411, 414, 423, 424, 428, 436, 447, 451, 452, 454, 455, 456, 458, 461, 464, 466, 468, 472, 473, 474, 492, 497, 498, 502, 505, 517, 521, 522, 523, 524, 525, 526, 528, 529, 530, 531, 546, 548, 552, 553, 554, 555, 557, 565, 574, 575, 581, 585, 588, 595, 596, 597, 598, 610, 616, 623, 630, 632, 638, 640, 652, 659, 662, 663, 664, 666, 676, 680, 699, 705, 726, 727, 745, 757, 760, 761, 765, 766, 767, 768, 769, 774, 776, 783, 784, 793, 794, 796, 797, 799, 800, 801, 802, 803, 804, 805, 806, 810, 813, 814, 815, 816, 817, 818, 819, 822, 823, 824, 825, 830, 838, 842, 843, 844, 846, 847, 854, 855, 867, 870, 873, 874, 875, 876, 878, 880, 881, 885, 886, 887, 904, 906, 920, 924, 927, 939, 942, 943, 947, 948, 949, 950, 952, 953, 954, 955, 956, 960, 963, 964, 967, 968, 969, 977, 978, 984, 985, 986, 987, 993, 994, 995, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1010], "public": [0, 74, 339, 345, 347, 349, 350, 357, 358, 359, 360, 377, 380, 432, 628, 635, 649, 650, 656, 863, 949, 957, 993, 998, 999, 1004, 1005, 1006, 1009], "releas": [0, 13, 15, 52, 67, 99, 105, 106, 118, 135, 148, 149, 154, 155, 158, 181, 182, 183, 210, 215, 220, 221, 222, 233, 250, 255, 260, 284, 333, 343, 345, 346, 348, 353, 357, 359, 381, 407, 410, 411, 428, 431, 454, 455, 460, 465, 466, 468, 476, 479, 485, 488, 502, 505, 525, 526, 528, 529, 531, 563, 566, 592, 594, 596, 598, 604, 610, 612, 616, 622, 633, 644, 652, 665, 666, 681, 695, 711, 751, 758, 762, 763, 765, 766, 768, 776, 784, 787, 788, 791, 807, 809, 826, 830, 835, 838, 839, 840, 844, 845, 846, 862, 863, 865, 870, 873, 874, 897, 921, 969, 974, 993, 994, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "februari": [0, 375, 437, 953, 994, 998], "1st": [0, 4, 57, 83, 145, 182, 283, 843, 844], "sinc": [0, 4, 5, 11, 13, 24, 26, 32, 34, 46, 50, 52, 63, 66, 67, 68, 88, 111, 126, 132, 135, 137, 142, 153, 154, 156, 158, 163, 181, 183, 185, 198, 209, 213, 214, 215, 226, 229, 234, 238, 240, 241, 247, 248, 255, 257, 258, 260, 261, 284, 290, 291, 301, 304, 307, 315, 319, 320, 321, 328, 333, 340, 343, 345, 346, 347, 349, 350, 353, 357, 358, 359, 363, 364, 371, 373, 374, 375, 376, 377, 378, 380, 381, 383, 390, 401, 405, 409, 410, 411, 413, 414, 417, 420, 433, 442, 460, 490, 491, 500, 501, 502, 503, 504, 510, 511, 513, 514, 515, 516, 517, 519, 521, 523, 525, 526, 527, 528, 531, 533, 552, 553, 555, 574, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 596, 597, 602, 608, 609, 615, 619, 622, 623, 630, 632, 638, 639, 640, 641, 643, 671, 673, 698, 704, 705, 713, 714, 752, 765, 766, 768, 786, 787, 788, 793, 794, 795, 796, 800, 801, 802, 803, 804, 807, 812, 815, 822, 823, 830, 855, 856, 860, 861, 865, 867, 870, 873, 875, 902, 910, 942, 945, 946, 947, 949, 950, 954, 955, 956, 957, 959, 961, 963, 967, 968, 969, 977, 978, 987, 993, 994, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "sever": [0, 4, 9, 12, 13, 24, 29, 32, 34, 52, 53, 54, 58, 70, 84, 104, 119, 121, 124, 132, 135, 137, 142, 143, 150, 153, 158, 165, 170, 181, 185, 200, 201, 204, 205, 206, 212, 226, 233, 238, 243, 258, 260, 274, 278, 290, 315, 319, 320, 332, 339, 340, 342, 345, 347, 350, 357, 359, 370, 372, 373, 374, 377, 379, 380, 381, 383, 411, 413, 428, 451, 463, 472, 473, 502, 519, 520, 523, 524, 527, 528, 529, 534, 552, 553, 555, 574, 609, 610, 616, 652, 653, 654, 655, 656, 657, 760, 761, 762, 765, 766, 776, 793, 794, 800, 801, 802, 803, 804, 824, 825, 832, 849, 873, 874, 875, 876, 888, 942, 945, 950, 953, 954, 956, 961, 963, 967, 969, 970, 971, 972, 974, 977, 978, 985, 986, 987, 993, 994, 995, 996, 997, 998, 1000, 1001, 1002, 1006, 1009, 1010], "have": [0, 4, 5, 7, 8, 9, 11, 12, 13, 14, 23, 24, 25, 26, 34, 36, 39, 40, 43, 44, 47, 50, 52, 54, 57, 59, 61, 62, 66, 67, 73, 75, 80, 82, 84, 85, 92, 93, 101, 108, 110, 111, 112, 114, 131, 132, 135, 137, 138, 142, 143, 144, 149, 152, 153, 154, 155, 156, 158, 160, 165, 181, 182, 183, 185, 199, 205, 208, 210, 215, 216, 218, 219, 225, 226, 227, 229, 232, 238, 239, 241, 244, 245, 252, 255, 258, 260, 261, 264, 265, 278, 283, 284, 285, 287, 289, 290, 294, 297, 298, 299, 304, 310, 311, 312, 315, 319, 320, 327, 328, 332, 333, 334, 339, 340, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 357, 358, 359, 360, 363, 367, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 398, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 421, 428, 429, 433, 434, 435, 436, 437, 438, 439, 440, 446, 447, 448, 449, 451, 456, 458, 459, 460, 472, 473, 478, 487, 488, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 545, 546, 547, 548, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 596, 599, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 649, 651, 652, 653, 654, 655, 656, 663, 668, 669, 676, 679, 684, 689, 694, 699, 705, 719, 720, 721, 722, 745, 748, 749, 755, 758, 760, 761, 762, 765, 766, 767, 768, 773, 776, 780, 784, 786, 789, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 821, 822, 823, 825, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 850, 851, 853, 854, 855, 856, 857, 858, 860, 861, 862, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 885, 887, 889, 891, 902, 928, 942, 943, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 959, 960, 963, 965, 966, 967, 968, 969, 970, 972, 973, 977, 978, 979, 982, 983, 985, 986, 987, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "appear": [0, 8, 43, 45, 104, 153, 156, 233, 235, 236, 264, 265, 273, 275, 279, 297, 311, 319, 320, 321, 340, 343, 345, 350, 359, 375, 378, 452, 453, 519, 531, 532, 543, 574, 591, 592, 594, 661, 664, 666, 676, 680, 682, 745, 752, 763, 780, 800, 801, 802, 803, 804, 867, 870, 904, 949, 955, 959, 993, 1001, 1005, 1006], "follow": [0, 4, 7, 19, 25, 30, 34, 42, 51, 52, 54, 60, 64, 67, 68, 85, 87, 96, 101, 104, 114, 118, 130, 142, 148, 152, 153, 154, 155, 156, 160, 162, 165, 169, 170, 179, 181, 182, 196, 199, 209, 215, 216, 218, 230, 238, 245, 247, 248, 255, 278, 284, 285, 287, 288, 290, 291, 292, 304, 315, 319, 320, 321, 323, 327, 328, 332, 333, 339, 340, 342, 343, 344, 345, 347, 349, 350, 351, 352, 353, 354, 357, 358, 359, 360, 363, 364, 367, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 388, 390, 392, 393, 394, 395, 396, 397, 405, 407, 409, 410, 411, 412, 413, 417, 425, 427, 428, 429, 432, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 479, 498, 502, 504, 505, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 534, 545, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 591, 592, 593, 594, 595, 597, 598, 610, 616, 622, 623, 634, 635, 644, 656, 658, 663, 669, 673, 677, 682, 751, 781, 802, 807, 808, 809, 811, 813, 815, 816, 817, 824, 828, 829, 830, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 854, 863, 865, 866, 870, 873, 874, 875, 876, 880, 881, 901, 921, 942, 943, 944, 945, 946, 947, 948, 949, 951, 952, 953, 955, 956, 957, 958, 959, 960, 961, 963, 964, 965, 966, 967, 968, 969, 971, 972, 973, 976, 978, 987, 990, 993, 996, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "3": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 26, 28, 29, 30, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 69, 70, 71, 73, 75, 76, 77, 79, 80, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 126, 130, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 195, 196, 197, 198, 199, 201, 202, 203, 204, 206, 208, 212, 213, 214, 215, 216, 218, 220, 222, 224, 225, 226, 228, 229, 230, 233, 236, 237, 238, 239, 240, 241, 242, 244, 246, 247, 248, 249, 250, 251, 255, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 294, 296, 297, 299, 300, 301, 303, 304, 306, 307, 310, 311, 312, 313, 314, 315, 316, 319, 320, 321, 324, 325, 327, 328, 333, 334, 339, 340, 342, 343, 345, 346, 347, 350, 351, 357, 358, 359, 363, 365, 366, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 394, 395, 396, 397, 398, 401, 403, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 445, 446, 447, 448, 449, 457, 458, 460, 461, 462, 465, 466, 468, 469, 470, 471, 474, 476, 479, 480, 481, 482, 483, 485, 487, 489, 490, 492, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 541, 545, 546, 547, 548, 551, 552, 554, 555, 557, 558, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 581, 582, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 651, 652, 653, 654, 656, 657, 658, 660, 663, 664, 666, 667, 668, 669, 671, 673, 674, 677, 680, 681, 685, 686, 687, 688, 689, 691, 692, 693, 694, 696, 697, 698, 699, 700, 704, 706, 707, 708, 709, 711, 713, 714, 715, 716, 717, 719, 720, 731, 732, 738, 744, 745, 746, 747, 748, 749, 750, 751, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 828, 829, 830, 831, 832, 836, 837, 838, 839, 840, 841, 843, 844, 845, 846, 853, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 885, 886, 887, 891, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 916, 917, 919, 920, 921, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 937, 942, 943, 946, 947, 948, 949, 950, 951, 953, 954, 955, 956, 959, 960, 963, 964, 966, 968, 969, 971, 972, 974, 978, 979, 982, 983, 985, 986, 991, 993, 994, 995, 996, 998, 999, 1000, 1003, 1005, 1006, 1008, 1010], "month": [0, 4, 13, 142, 154, 284, 340, 345, 349, 360, 993], "cycl": [0, 4, 39, 41, 47, 59, 87, 166, 225, 230, 245, 247, 290, 291, 345, 349, 364, 372, 378, 543, 544, 591, 765, 766, 881, 942, 943, 1001, 1002, 1003, 1005, 1006, 1007, 1008], "thrive": [0, 345], "intern": [0, 4, 25, 67, 77, 92, 107, 112, 115, 126, 135, 138, 148, 150, 163, 181, 258, 260, 277, 284, 298, 321, 328, 333, 340, 342, 347, 351, 354, 357, 359, 364, 367, 369, 370, 373, 377, 378, 380, 381, 382, 383, 384, 401, 403, 408, 429, 432, 475, 498, 499, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 557, 558, 574, 575, 602, 604, 607, 610, 616, 632, 636, 640, 642, 660, 672, 694, 697, 721, 722, 746, 791, 805, 806, 821, 822, 823, 825, 826, 830, 844, 846, 860, 861, 863, 865, 866, 867, 870, 873, 874, 875, 876, 921, 949, 950, 951, 953, 956, 959, 963, 965, 968, 969, 974, 977, 993, 996, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "ha": [0, 4, 5, 8, 11, 12, 13, 16, 24, 28, 32, 34, 41, 47, 52, 53, 54, 57, 70, 75, 76, 80, 87, 99, 106, 110, 112, 114, 118, 123, 134, 137, 142, 143, 144, 149, 153, 154, 155, 156, 158, 174, 178, 181, 182, 183, 187, 198, 199, 201, 208, 212, 214, 215, 218, 219, 222, 224, 225, 227, 229, 230, 233, 236, 237, 238, 241, 242, 244, 249, 250, 257, 261, 264, 265, 266, 268, 275, 278, 279, 281, 283, 287, 288, 289, 290, 291, 293, 296, 299, 307, 311, 312, 314, 319, 327, 328, 332, 333, 334, 339, 340, 342, 343, 344, 345, 346, 347, 349, 350, 353, 354, 357, 358, 359, 360, 363, 364, 367, 370, 371, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 385, 398, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 425, 426, 427, 428, 429, 433, 434, 435, 436, 437, 438, 439, 440, 442, 446, 447, 448, 449, 457, 458, 461, 462, 472, 473, 480, 490, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 545, 546, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 574, 575, 583, 591, 592, 593, 594, 596, 597, 598, 599, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 649, 651, 652, 653, 654, 655, 656, 659, 675, 677, 684, 704, 726, 737, 741, 742, 743, 756, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 776, 780, 783, 784, 789, 790, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 821, 822, 823, 825, 828, 829, 830, 831, 832, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 857, 858, 860, 861, 862, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 880, 884, 885, 886, 904, 922, 938, 942, 943, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 963, 965, 966, 967, 968, 969, 973, 977, 978, 982, 985, 987, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "been": [0, 4, 9, 16, 25, 41, 50, 57, 76, 92, 99, 101, 135, 137, 142, 144, 153, 205, 208, 210, 215, 216, 236, 238, 244, 287, 288, 289, 290, 291, 293, 294, 298, 319, 328, 333, 339, 340, 342, 343, 344, 345, 347, 349, 351, 353, 354, 357, 358, 359, 360, 364, 367, 370, 371, 373, 375, 377, 378, 380, 383, 398, 401, 433, 435, 436, 438, 442, 451, 487, 498, 500, 513, 514, 531, 532, 545, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 575, 597, 598, 622, 623, 630, 631, 632, 637, 639, 640, 641, 642, 684, 741, 742, 743, 756, 762, 765, 766, 768, 776, 784, 789, 790, 814, 862, 865, 943, 945, 946, 948, 949, 950, 953, 954, 956, 959, 963, 965, 967, 968, 973, 977, 978, 987, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "lead": [0, 7, 24, 29, 34, 49, 52, 58, 68, 107, 111, 112, 114, 134, 135, 153, 154, 155, 160, 165, 170, 172, 181, 185, 213, 215, 218, 238, 239, 241, 245, 263, 264, 275, 278, 280, 283, 284, 289, 307, 315, 320, 323, 328, 332, 333, 339, 344, 353, 354, 358, 359, 367, 370, 371, 373, 375, 377, 378, 379, 380, 382, 416, 426, 429, 432, 460, 479, 491, 499, 502, 503, 504, 507, 511, 515, 521, 522, 523, 524, 527, 528, 529, 530, 570, 594, 610, 611, 614, 616, 617, 618, 624, 625, 626, 627, 643, 655, 659, 709, 760, 765, 766, 793, 805, 806, 810, 829, 836, 846, 857, 858, 863, 865, 873, 874, 875, 876, 942, 947, 949, 950, 952, 953, 954, 956, 957, 959, 961, 963, 966, 967, 969, 977, 978, 996, 998, 1000, 1001, 1002, 1003, 1005, 1006, 1008, 1009, 1010], "The": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 25, 28, 29, 30, 32, 34, 36, 37, 41, 42, 43, 44, 45, 47, 48, 49, 50, 52, 54, 55, 57, 58, 59, 60, 62, 64, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 81, 84, 85, 87, 90, 91, 92, 93, 94, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 124, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 154, 155, 156, 158, 160, 162, 163, 164, 165, 166, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 182, 183, 184, 185, 187, 189, 190, 198, 199, 200, 203, 204, 207, 208, 209, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 226, 227, 229, 230, 232, 233, 235, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 257, 258, 260, 262, 263, 264, 265, 266, 267, 268, 271, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 304, 305, 307, 311, 312, 313, 315, 316, 317, 319, 320, 321, 323, 325, 326, 327, 328, 332, 333, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 357, 358, 359, 360, 362, 363, 364, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 389, 395, 396, 398, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 672, 673, 674, 675, 676, 677, 679, 680, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 701, 702, 703, 704, 705, 706, 707, 708, 709, 711, 715, 716, 717, 718, 719, 720, 721, 722, 725, 727, 728, 729, 730, 733, 734, 737, 738, 739, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 881, 882, 883, 884, 885, 886, 888, 889, 890, 891, 892, 896, 897, 898, 899, 900, 901, 902, 904, 905, 909, 910, 913, 916, 918, 919, 920, 921, 922, 923, 924, 927, 937, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 954, 955, 956, 957, 958, 959, 960, 961, 963, 964, 966, 967, 968, 969, 970, 971, 972, 973, 974, 976, 977, 978, 979, 980, 982, 983, 984, 987, 989, 990, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "decis": [0, 4, 16, 24, 26, 29, 32, 38, 53, 55, 57, 91, 100, 103, 104, 105, 106, 112, 119, 120, 123, 124, 128, 135, 139, 141, 145, 153, 163, 164, 173, 190, 191, 194, 208, 209, 211, 216, 219, 241, 244, 255, 266, 269, 273, 278, 279, 280, 283, 295, 300, 303, 304, 305, 306, 307, 308, 309, 313, 316, 317, 319, 332, 341, 342, 345, 359, 371, 373, 380, 401, 433, 464, 468, 483, 500, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 557, 558, 595, 596, 597, 608, 609, 610, 611, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 635, 636, 637, 638, 639, 640, 641, 662, 664, 666, 667, 671, 684, 689, 690, 698, 702, 703, 705, 719, 745, 751, 752, 757, 762, 765, 766, 776, 791, 793, 794, 796, 807, 861, 862, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 878, 879, 947, 953, 954, 955, 956, 957, 959, 960, 961, 966, 967, 968, 972, 973, 974, 975, 977, 985, 989, 993, 994, 995, 996, 997, 998, 999, 1000, 1002, 1003, 1006, 1007, 1009, 1010], "make": [0, 4, 7, 8, 11, 13, 15, 17, 20, 21, 24, 25, 26, 36, 37, 40, 41, 53, 58, 59, 64, 69, 92, 101, 107, 111, 114, 119, 132, 135, 137, 142, 145, 152, 153, 154, 155, 160, 165, 167, 170, 173, 174, 175, 177, 181, 182, 183, 185, 187, 199, 202, 210, 212, 214, 215, 216, 218, 224, 226, 229, 230, 233, 238, 240, 241, 247, 248, 249, 257, 267, 275, 278, 279, 284, 291, 293, 307, 317, 319, 320, 321, 328, 332, 333, 334, 339, 340, 343, 344, 346, 347, 348, 350, 351, 353, 357, 359, 363, 367, 370, 371, 373, 374, 375, 377, 378, 380, 381, 382, 385, 404, 405, 406, 407, 409, 411, 413, 415, 416, 417, 422, 423, 424, 426, 452, 467, 478, 479, 486, 487, 491, 496, 498, 505, 515, 516, 519, 520, 525, 526, 547, 548, 571, 572, 595, 613, 619, 620, 635, 655, 659, 693, 700, 705, 731, 732, 744, 760, 761, 762, 764, 767, 773, 777, 778, 781, 782, 787, 788, 795, 796, 799, 832, 841, 844, 845, 849, 853, 855, 856, 857, 858, 871, 879, 885, 886, 896, 902, 908, 914, 939, 942, 943, 945, 947, 949, 950, 952, 953, 954, 955, 956, 958, 959, 960, 961, 963, 966, 967, 968, 969, 971, 972, 973, 977, 978, 983, 985, 987, 990, 993, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010], "process": [0, 4, 5, 16, 19, 25, 28, 29, 32, 42, 43, 44, 45, 47, 54, 63, 66, 68, 70, 74, 76, 84, 88, 89, 91, 101, 110, 112, 114, 118, 119, 126, 127, 128, 152, 160, 163, 183, 185, 191, 193, 194, 214, 215, 216, 218, 224, 225, 230, 238, 240, 241, 250, 255, 273, 278, 281, 289, 293, 297, 301, 311, 313, 320, 321, 323, 332, 333, 334, 340, 344, 345, 347, 349, 351, 354, 357, 358, 359, 367, 373, 374, 375, 377, 378, 379, 380, 381, 382, 386, 412, 413, 439, 460, 468, 487, 498, 499, 500, 501, 502, 525, 526, 527, 552, 553, 555, 574, 575, 577, 578, 579, 581, 582, 583, 586, 587, 589, 591, 596, 597, 603, 607, 628, 636, 649, 650, 667, 686, 704, 744, 760, 762, 765, 766, 776, 786, 787, 788, 797, 798, 814, 828, 832, 834, 835, 836, 845, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 919, 921, 942, 945, 949, 953, 956, 963, 965, 967, 969, 971, 972, 973, 974, 975, 977, 978, 979, 986, 987, 989, 993, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1009, 1010], "structur": [0, 3, 9, 13, 14, 15, 17, 20, 21, 33, 37, 38, 40, 41, 43, 49, 50, 51, 52, 53, 59, 63, 77, 97, 117, 136, 150, 201, 202, 205, 210, 215, 230, 233, 244, 263, 283, 288, 291, 295, 307, 311, 322, 323, 324, 332, 340, 342, 345, 347, 350, 357, 359, 360, 363, 370, 373, 375, 376, 377, 378, 380, 381, 382, 383, 405, 406, 409, 410, 414, 415, 416, 417, 418, 421, 426, 427, 436, 460, 467, 468, 472, 475, 477, 478, 485, 494, 499, 505, 508, 527, 574, 575, 576, 580, 581, 582, 653, 660, 673, 677, 791, 813, 818, 845, 857, 858, 861, 873, 874, 875, 876, 879, 901, 902, 924, 927, 950, 952, 953, 956, 958, 959, 963, 966, 969, 972, 973, 974, 981, 986, 987, 993, 994, 996, 997, 999, 1003], "i": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 32, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 70, 71, 73, 74, 75, 76, 77, 79, 80, 82, 83, 85, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 130, 131, 132, 134, 135, 137, 138, 139, 141, 142, 143, 144, 145, 146, 148, 149, 150, 152, 153, 154, 155, 156, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 257, 258, 260, 261, 262, 263, 264, 265, 267, 268, 270, 271, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 305, 306, 307, 311, 312, 313, 315, 316, 317, 319, 320, 321, 323, 324, 325, 326, 328, 332, 333, 334, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 358, 359, 360, 362, 363, 364, 367, 369, 370, 371, 372, 373, 374, 375, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 390, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485, 487, 488, 490, 491, 492, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 539, 540, 541, 542, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 726, 727, 729, 730, 731, 732, 733, 734, 736, 737, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 900, 901, 902, 904, 907, 908, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 922, 923, 924, 925, 927, 928, 934, 937, 938, 939, 940, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 976, 978, 980, 981, 982, 983, 984, 985, 986, 987, 990, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "laid": [0, 152, 345], "out": [0, 3, 4, 7, 9, 10, 12, 13, 15, 17, 25, 28, 37, 47, 52, 66, 67, 94, 100, 105, 107, 108, 115, 116, 128, 150, 152, 155, 165, 181, 183, 185, 189, 199, 218, 224, 226, 236, 238, 241, 246, 250, 255, 257, 283, 284, 290, 299, 301, 303, 304, 307, 315, 319, 331, 340, 342, 343, 345, 347, 348, 349, 351, 357, 359, 373, 376, 378, 380, 381, 383, 389, 399, 400, 406, 407, 409, 410, 411, 413, 436, 446, 447, 448, 449, 463, 479, 480, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 511, 513, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 552, 553, 555, 568, 571, 572, 598, 603, 604, 605, 606, 615, 619, 630, 632, 637, 639, 640, 652, 653, 656, 665, 690, 704, 705, 762, 764, 765, 766, 767, 769, 770, 771, 772, 776, 791, 800, 801, 802, 803, 804, 809, 814, 817, 821, 822, 823, 831, 835, 842, 854, 857, 858, 880, 915, 917, 922, 943, 947, 948, 952, 953, 954, 956, 961, 963, 973, 974, 975, 977, 982, 985, 987, 989, 993, 995, 997, 999, 1001, 1002, 1005, 1006, 1009], "peopl": [0, 6, 66, 153, 217, 241, 319, 320, 333, 334, 340, 342, 344, 345, 349, 360, 379, 457, 458, 605, 802, 972, 983], "ar": [0, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 30, 32, 34, 36, 37, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 59, 61, 63, 66, 67, 68, 70, 71, 73, 74, 75, 76, 77, 79, 80, 83, 85, 87, 89, 92, 94, 97, 99, 101, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 119, 120, 121, 122, 123, 131, 132, 134, 135, 137, 141, 142, 143, 144, 145, 146, 148, 149, 152, 153, 154, 155, 156, 158, 160, 161, 162, 163, 164, 165, 169, 170, 172, 173, 174, 175, 176, 177, 178, 181, 182, 183, 185, 190, 192, 199, 201, 202, 203, 204, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 222, 225, 226, 227, 229, 232, 233, 235, 236, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 257, 258, 260, 263, 264, 268, 271, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 291, 292, 293, 294, 296, 298, 299, 300, 301, 305, 307, 309, 311, 315, 316, 319, 320, 321, 323, 327, 328, 332, 333, 334, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 358, 359, 360, 363, 364, 367, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 389, 394, 397, 398, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 446, 447, 448, 449, 452, 453, 457, 459, 460, 462, 464, 465, 466, 467, 468, 472, 473, 474, 476, 479, 480, 481, 482, 483, 484, 487, 488, 490, 492, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 664, 665, 666, 668, 669, 671, 673, 676, 677, 679, 680, 681, 682, 684, 685, 686, 688, 689, 690, 691, 692, 693, 694, 697, 698, 699, 700, 701, 703, 704, 705, 706, 708, 709, 711, 713, 714, 716, 717, 719, 720, 724, 725, 726, 728, 730, 731, 732, 736, 737, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 768, 769, 771, 774, 776, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 849, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 885, 886, 889, 890, 891, 894, 896, 901, 902, 903, 906, 907, 909, 910, 913, 916, 917, 919, 921, 924, 927, 928, 932, 933, 934, 937, 939, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 976, 977, 978, 979, 980, 981, 982, 984, 985, 986, 987, 991, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "current": [0, 8, 43, 101, 142, 153, 199, 278, 287, 333, 334, 340, 343, 345, 346, 347, 350, 354, 357, 359, 360, 369, 370, 372, 373, 377, 380, 381, 382, 383, 404, 410, 414, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 496, 499, 505, 517, 518, 521, 522, 523, 524, 526, 528, 529, 530, 540, 555, 557, 574, 581, 590, 591, 610, 622, 631, 635, 639, 640, 641, 642, 751, 760, 761, 810, 814, 822, 823, 841, 853, 863, 873, 874, 875, 876, 879, 920, 928, 942, 947, 949, 953, 956, 957, 963, 973, 985, 1001, 1005, 1007, 1008, 1009], "": [0, 4, 5, 6, 7, 8, 10, 11, 12, 13, 16, 17, 19, 20, 23, 26, 32, 35, 36, 37, 39, 40, 41, 43, 44, 45, 49, 50, 52, 54, 55, 56, 57, 58, 59, 61, 62, 64, 66, 67, 73, 74, 77, 79, 83, 84, 85, 87, 88, 89, 92, 95, 96, 97, 99, 101, 103, 107, 108, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 122, 128, 130, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 149, 150, 153, 154, 156, 158, 161, 162, 163, 165, 167, 169, 170, 171, 172, 173, 179, 181, 183, 185, 187, 188, 190, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 205, 206, 208, 209, 212, 214, 215, 216, 218, 224, 226, 227, 229, 233, 238, 239, 240, 241, 242, 245, 249, 251, 252, 258, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 276, 277, 278, 281, 284, 287, 289, 290, 291, 292, 293, 294, 297, 298, 304, 305, 306, 307, 308, 311, 312, 313, 314, 317, 319, 320, 321, 324, 325, 326, 327, 328, 332, 333, 334, 338, 339, 340, 342, 343, 344, 345, 346, 347, 349, 351, 352, 353, 354, 359, 360, 362, 363, 364, 367, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 381, 383, 385, 387, 394, 398, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 421, 423, 424, 427, 428, 429, 433, 434, 435, 436, 437, 438, 439, 440, 446, 447, 448, 449, 453, 455, 460, 462, 464, 468, 474, 475, 483, 489, 490, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 536, 545, 546, 547, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 570, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 598, 599, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 649, 651, 652, 653, 654, 655, 656, 657, 664, 665, 666, 672, 675, 680, 684, 698, 704, 721, 722, 742, 743, 760, 761, 762, 764, 765, 766, 771, 776, 780, 781, 786, 787, 788, 790, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 857, 858, 860, 861, 862, 863, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 880, 883, 885, 886, 889, 902, 904, 910, 911, 913, 937, 941, 942, 944, 945, 947, 949, 950, 951, 954, 955, 956, 957, 958, 960, 961, 963, 965, 966, 967, 968, 969, 972, 973, 974, 977, 978, 982, 983, 985, 986, 987, 993, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "mainten": [0, 345, 353, 357, 363, 366, 949, 973, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "j\u00e9r\u00e9mie": [0, 1, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "du": [0, 1, 2, 993, 994, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "boisberrang": [0, 1, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "jori": [0, 1, 1000, 1001, 1002, 1005, 1006], "van": [0, 1, 339, 375, 433, 438, 498, 591, 656, 660, 943, 950, 953, 959, 977, 994, 995, 996, 997, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009], "den": [0, 1, 994, 995, 1000, 1001, 1002, 1005, 1006], "bossch": [0, 1, 1000, 1001, 1002, 1006], "lo\u00efc": [0, 1, 1001, 1004, 1006, 1007, 1008, 1009, 1010, 1011], "est\u00e8v": [0, 1, 1001, 1004, 1006, 1007, 1008, 1009, 1010, 1011], "thoma": [0, 1, 94, 208, 278, 333, 335, 360, 861, 949, 963, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "j": [0, 1, 11, 17, 34, 35, 37, 40, 58, 66, 74, 75, 76, 101, 104, 105, 116, 138, 149, 154, 193, 204, 217, 224, 237, 238, 243, 249, 262, 268, 271, 282, 292, 327, 333, 339, 340, 342, 349, 351, 357, 370, 371, 373, 375, 377, 378, 380, 381, 383, 384, 401, 404, 408, 410, 417, 418, 433, 438, 462, 477, 480, 481, 482, 484, 492, 495, 498, 500, 501, 502, 504, 505, 511, 517, 523, 524, 557, 558, 596, 597, 601, 608, 609, 612, 613, 630, 631, 633, 644, 652, 653, 654, 656, 657, 658, 660, 669, 672, 674, 678, 680, 682, 685, 686, 687, 689, 718, 719, 721, 722, 737, 741, 751, 752, 755, 756, 794, 795, 802, 807, 808, 809, 811, 813, 814, 815, 816, 817, 818, 819, 836, 845, 846, 873, 874, 942, 943, 947, 949, 950, 951, 953, 954, 955, 956, 957, 959, 960, 961, 963, 965, 967, 968, 969, 987, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "fan": [0, 1, 333, 360, 968, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "olivi": [0, 1, 15, 17, 34, 45, 58, 170, 181, 199, 202, 239, 241, 319, 320, 321, 360, 861, 966, 971, 973, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "grisel": [0, 1, 15, 17, 34, 45, 58, 170, 181, 199, 202, 239, 241, 319, 320, 321, 360, 971, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "yaroslav": [0, 1, 993, 994, 995, 996, 999, 1000, 1001, 1002, 1009, 1010], "halchenko": [0, 1, 993, 994, 995, 996, 999, 1000, 1001, 1002, 1009], "tim": [0, 1, 106, 120, 993, 998, 999, 1002, 1003, 1004, 1006, 1008, 1009, 1010], "head": [0, 1, 13, 25, 67, 106, 120, 142, 153, 169, 170, 199, 222, 229, 284, 287, 292, 345, 353, 378, 977, 998, 999, 1008, 1009, 1010], "nicola": [0, 1, 135, 282, 622, 949, 966, 993, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "hug": [0, 1, 135, 282, 1001, 1002, 1003, 1004, 1005, 1006, 1007], "adrin": [0, 1, 62, 316, 360, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "jalali": [0, 1, 62, 316, 360, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "julien": [0, 1, 622, 949, 977, 993, 996, 1000, 1001, 1005, 1006, 1007, 1008, 1009, 1010], "jerphanion": [0, 1, 1005, 1006, 1007, 1008, 1009, 1010], "guillaum": [0, 1, 5, 7, 68, 71, 92, 121, 137, 142, 143, 144, 146, 169, 170, 183, 202, 278, 977, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "lemaitr": [0, 1, 5, 7, 68, 71, 92, 121, 137, 142, 143, 144, 146, 169, 170, 183, 202, 278, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "christian": [0, 1, 19, 181, 182, 183, 199, 319, 320, 340, 977, 987, 993, 994, 997, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "lorentzen": [0, 1, 181, 182, 183, 199, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "jan": [0, 1, 23, 24, 25, 26, 137, 138, 140, 141, 142, 143, 144, 146, 182, 214, 255, 844, 993, 996, 997, 998, 999, 1001, 1002, 1005, 1009], "hendrik": [0, 1, 23, 24, 25, 26, 137, 138, 140, 141, 142, 143, 144, 146, 214, 993, 996, 997, 998, 999], "metzen": [0, 1, 23, 24, 25, 26, 137, 138, 140, 141, 142, 143, 144, 146, 214, 993, 996, 997, 998, 999], "andrea": [0, 1, 29, 70, 92, 105, 172, 213, 279, 280, 298, 315, 316, 360, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008], "mueller": [0, 1, 70, 92, 105, 172, 213, 298, 315, 316, 977, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008], "vlad": [0, 1, 87, 216, 276, 993, 994, 995, 996, 997, 998, 1000, 1001, 1002], "nicula": [0, 1, 87, 216, 276, 993, 994, 995, 996, 997, 998, 1000, 1001, 1002], "joel": [0, 1, 68, 360, 381, 499, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1010], "nothman": [0, 1, 68, 360, 381, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1010], "hanmin": [0, 1, 279, 1000, 1001, 1002, 1003, 1004], "qin": [0, 1, 279, 342, 381, 1000, 1001, 1002, 1003, 1004], "omar": [0, 1, 1003, 1008, 1009, 1010], "salman": [0, 1, 1008, 1009, 1010], "bertrand": [0, 1, 993, 999, 1000, 1005, 1006], "thirion": [0, 1, 993, 999, 1000, 1006], "tom": [0, 1, 173, 189, 258, 260, 280, 281, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "dupr\u00e9": [0, 1, 280, 281, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "la": [0, 1, 173, 189, 258, 260, 280, 281, 284, 342, 977, 994, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "tour": [0, 1, 173, 189, 258, 260, 280, 281, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "nell": [0, 1, 36, 204, 211, 993, 994, 995, 996, 997, 998, 999, 1000, 1002, 1005], "roman": [0, 1, 181, 199, 591, 879, 995, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1010], "yurchak": [0, 1, 181, 199, 381, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007], "meekail": [0, 1, 1007, 1008, 1009, 1010], "zain": [0, 1, 1007, 1008, 1009, 1010], "pleas": [0, 12, 17, 25, 67, 68, 106, 108, 109, 115, 117, 118, 121, 124, 132, 142, 153, 154, 155, 162, 185, 209, 210, 211, 213, 215, 218, 219, 220, 221, 222, 229, 236, 238, 239, 245, 250, 258, 268, 276, 284, 287, 288, 289, 290, 291, 292, 293, 294, 298, 311, 327, 333, 339, 340, 343, 345, 346, 347, 349, 353, 357, 358, 359, 363, 364, 367, 369, 372, 373, 380, 381, 387, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 428, 429, 433, 434, 435, 436, 437, 438, 439, 440, 446, 447, 448, 449, 460, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 545, 546, 547, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 567, 574, 575, 591, 592, 593, 594, 595, 596, 597, 599, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 652, 653, 654, 655, 656, 760, 761, 762, 763, 764, 765, 766, 767, 769, 770, 771, 772, 775, 776, 777, 778, 779, 780, 781, 782, 783, 788, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 821, 822, 823, 825, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 854, 857, 858, 860, 861, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 942, 953, 957, 963, 967, 968, 972, 973, 976, 978, 985, 987, 993, 996, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "do": [0, 4, 10, 13, 24, 39, 52, 58, 64, 70, 83, 91, 93, 96, 105, 108, 110, 114, 115, 121, 132, 142, 148, 153, 154, 155, 178, 181, 185, 199, 201, 203, 215, 216, 218, 230, 233, 236, 239, 241, 257, 258, 260, 264, 290, 294, 301, 304, 307, 311, 312, 315, 319, 320, 321, 327, 328, 332, 333, 334, 340, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 359, 360, 371, 372, 373, 374, 375, 376, 377, 380, 381, 382, 392, 414, 425, 467, 500, 502, 506, 508, 516, 519, 545, 546, 552, 553, 555, 596, 597, 609, 610, 616, 619, 620, 623, 630, 632, 640, 700, 726, 741, 745, 779, 782, 797, 798, 802, 829, 830, 832, 839, 843, 845, 850, 851, 853, 854, 855, 856, 873, 874, 875, 876, 884, 927, 942, 945, 947, 949, 950, 953, 954, 956, 957, 961, 963, 968, 969, 972, 973, 977, 978, 985, 986, 987, 993, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "email": [0, 319, 345, 357, 381, 800, 955, 977], "directli": [0, 6, 19, 26, 42, 43, 53, 67, 106, 111, 135, 145, 165, 169, 181, 187, 199, 209, 243, 276, 278, 291, 294, 321, 328, 332, 343, 345, 346, 347, 349, 351, 358, 359, 360, 369, 370, 371, 373, 374, 375, 376, 377, 381, 383, 406, 416, 426, 428, 433, 438, 491, 531, 532, 533, 534, 561, 575, 584, 596, 607, 610, 611, 616, 617, 624, 625, 626, 627, 628, 641, 645, 648, 654, 737, 741, 744, 755, 756, 762, 765, 766, 776, 808, 810, 824, 825, 826, 832, 842, 844, 847, 854, 921, 942, 949, 951, 956, 958, 960, 963, 968, 969, 973, 979, 982, 983, 993, 1001, 1002, 1004, 1005, 1006, 1009, 1010], "ask": [0, 148, 149, 238, 344, 345, 349, 350, 353, 359, 360, 382, 807, 808, 809, 811, 813, 815, 816, 817, 976, 1009], "assist": [0, 345, 357, 963, 976, 977], "report": [0, 4, 8, 13, 30, 66, 71, 132, 145, 169, 236, 246, 255, 287, 296, 328, 340, 344, 346, 347, 348, 351, 353, 357, 359, 363, 367, 373, 377, 575, 613, 622, 628, 649, 650, 664, 677, 692, 693, 701, 746, 747, 750, 794, 803, 822, 823, 860, 878, 896, 949, 956, 961, 972, 973, 976, 994, 997, 1000, 1001, 1003, 1004, 1006, 1008, 1009], "issu": [0, 4, 24, 74, 80, 181, 199, 243, 285, 333, 339, 343, 348, 349, 350, 353, 354, 357, 359, 360, 362, 363, 364, 367, 369, 373, 375, 376, 381, 413, 416, 426, 437, 446, 447, 448, 498, 503, 507, 537, 549, 550, 552, 553, 555, 575, 591, 655, 659, 732, 836, 841, 853, 892, 942, 943, 950, 961, 963, 968, 972, 973, 976, 986, 987, 993, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1008, 1010], "instead": [0, 4, 5, 6, 13, 20, 45, 50, 52, 53, 54, 67, 92, 104, 109, 118, 132, 135, 137, 142, 181, 183, 196, 199, 205, 218, 230, 234, 235, 239, 240, 257, 263, 278, 287, 288, 289, 290, 291, 307, 309, 311, 319, 321, 327, 328, 332, 333, 339, 340, 343, 344, 345, 346, 347, 349, 350, 353, 354, 357, 358, 359, 367, 369, 373, 374, 376, 377, 378, 379, 380, 381, 382, 384, 396, 401, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 420, 423, 429, 431, 433, 434, 435, 436, 437, 438, 439, 440, 446, 447, 448, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 473, 474, 497, 498, 499, 501, 502, 503, 504, 505, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 545, 546, 547, 552, 553, 554, 555, 558, 571, 572, 574, 575, 576, 577, 578, 579, 580, 583, 584, 585, 586, 587, 588, 589, 591, 594, 596, 599, 602, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 651, 654, 658, 671, 705, 709, 713, 714, 737, 741, 742, 743, 746, 760, 761, 762, 763, 764, 766, 768, 769, 771, 774, 776, 780, 781, 782, 786, 787, 788, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 810, 812, 815, 816, 822, 823, 825, 826, 827, 828, 830, 831, 832, 837, 838, 843, 844, 845, 855, 856, 859, 860, 861, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 878, 879, 891, 897, 902, 910, 921, 928, 942, 943, 945, 949, 950, 952, 953, 954, 957, 958, 963, 967, 968, 969, 972, 983, 985, 987, 990, 993, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "see": [0, 4, 5, 7, 13, 20, 23, 24, 26, 34, 41, 46, 47, 50, 52, 54, 55, 59, 61, 62, 64, 65, 75, 80, 82, 83, 87, 92, 93, 97, 101, 102, 103, 104, 107, 108, 109, 110, 111, 113, 115, 118, 121, 126, 131, 132, 133, 135, 137, 142, 143, 144, 148, 150, 153, 154, 156, 158, 160, 161, 162, 165, 172, 182, 183, 184, 185, 187, 198, 199, 201, 203, 210, 212, 215, 218, 219, 220, 222, 225, 226, 227, 232, 233, 235, 237, 238, 239, 240, 241, 245, 247, 248, 249, 252, 253, 255, 258, 264, 265, 267, 271, 278, 284, 285, 287, 288, 289, 290, 291, 292, 293, 298, 307, 311, 315, 319, 320, 321, 323, 324, 325, 326, 328, 332, 333, 334, 337, 338, 339, 340, 342, 343, 344, 345, 347, 349, 351, 352, 353, 357, 358, 359, 369, 371, 372, 373, 375, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 397, 401, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 446, 447, 448, 449, 451, 452, 455, 456, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 545, 546, 547, 548, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 571, 572, 573, 574, 575, 578, 583, 586, 587, 591, 592, 593, 594, 596, 597, 598, 599, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 663, 665, 670, 672, 675, 677, 706, 726, 737, 741, 742, 743, 744, 751, 755, 756, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 773, 774, 776, 777, 778, 779, 780, 781, 782, 783, 784, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 863, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 901, 902, 922, 924, 927, 937, 942, 943, 945, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 959, 960, 961, 963, 964, 965, 966, 967, 968, 969, 970, 971, 973, 977, 978, 980, 985, 986, 987, 993, 994, 995, 996, 997, 998, 999, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1010, 1011], "what": [0, 4, 9, 12, 13, 37, 42, 49, 50, 80, 88, 92, 110, 152, 153, 170, 187, 189, 197, 210, 215, 222, 275, 319, 321, 323, 328, 333, 340, 343, 345, 346, 347, 349, 351, 353, 358, 359, 360, 362, 364, 373, 379, 380, 381, 467, 500, 552, 553, 555, 610, 616, 660, 850, 851, 853, 854, 855, 856, 873, 874, 875, 876, 952, 953, 954, 956, 969, 973, 978, 993, 1000], "best": [0, 4, 6, 8, 12, 13, 14, 19, 23, 25, 37, 43, 51, 52, 58, 66, 67, 68, 69, 73, 79, 87, 91, 94, 95, 96, 104, 107, 111, 113, 114, 115, 121, 124, 135, 137, 138, 143, 148, 153, 160, 165, 169, 170, 177, 195, 196, 197, 201, 204, 208, 213, 214, 218, 226, 230, 232, 236, 237, 238, 239, 242, 245, 246, 249, 250, 252, 257, 262, 267, 279, 284, 289, 290, 307, 310, 311, 319, 320, 321, 326, 332, 333, 339, 342, 344, 345, 348, 351, 358, 359, 363, 364, 370, 371, 373, 377, 378, 380, 381, 382, 383, 396, 407, 410, 411, 413, 415, 416, 417, 423, 426, 429, 436, 446, 447, 448, 502, 509, 510, 516, 518, 520, 521, 522, 523, 524, 526, 528, 529, 530, 532, 534, 557, 558, 561, 566, 574, 575, 599, 601, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 631, 633, 634, 635, 636, 637, 639, 640, 642, 643, 644, 652, 653, 654, 657, 658, 667, 672, 683, 684, 685, 686, 687, 691, 692, 702, 703, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 719, 746, 747, 748, 750, 753, 754, 755, 756, 757, 759, 760, 761, 762, 765, 766, 776, 788, 790, 793, 798, 799, 808, 816, 822, 823, 866, 868, 871, 873, 874, 875, 876, 942, 947, 948, 949, 950, 953, 956, 957, 959, 967, 969, 972, 973, 977, 978, 983, 987, 993, 996, 999, 1001, 1002, 1003, 1006, 1007, 1008, 1009], "wai": [0, 4, 17, 26, 47, 57, 67, 70, 106, 113, 117, 119, 135, 144, 153, 155, 156, 182, 185, 186, 196, 199, 210, 211, 214, 215, 218, 219, 233, 238, 245, 247, 278, 279, 290, 292, 293, 328, 332, 333, 334, 339, 341, 344, 347, 348, 353, 354, 359, 360, 363, 364, 367, 370, 371, 372, 373, 374, 376, 377, 378, 380, 381, 382, 383, 384, 388, 407, 408, 415, 416, 417, 423, 424, 426, 427, 433, 460, 519, 520, 527, 536, 553, 563, 564, 575, 596, 630, 631, 640, 641, 642, 663, 668, 670, 681, 699, 700, 717, 718, 720, 726, 737, 741, 751, 758, 786, 794, 811, 832, 838, 843, 849, 875, 876, 924, 927, 942, 943, 947, 948, 949, 950, 951, 952, 953, 954, 956, 958, 959, 960, 961, 963, 965, 967, 968, 969, 972, 973, 976, 977, 978, 986, 987, 993, 995, 1001, 1006, 1007], "question": [0, 126, 152, 238, 315, 344, 345, 350, 353, 377, 380, 794, 867, 870, 949, 952, 953, 959, 977], "faq": [0, 353, 377, 656, 950, 963], "how": [0, 4, 5, 7, 8, 9, 10, 13, 20, 21, 24, 25, 30, 31, 34, 47, 48, 49, 50, 54, 57, 65, 66, 67, 70, 73, 75, 80, 96, 101, 102, 105, 109, 110, 111, 112, 114, 115, 119, 121, 132, 142, 144, 150, 153, 154, 155, 156, 158, 162, 170, 171, 177, 182, 183, 184, 185, 188, 189, 195, 199, 205, 206, 210, 213, 215, 217, 218, 219, 221, 230, 233, 234, 236, 238, 239, 240, 245, 247, 248, 250, 251, 252, 257, 258, 260, 261, 262, 264, 265, 275, 283, 285, 288, 289, 290, 293, 294, 304, 305, 307, 310, 311, 315, 319, 320, 323, 327, 332, 333, 334, 340, 343, 344, 346, 347, 348, 350, 353, 358, 359, 360, 364, 367, 369, 370, 371, 373, 374, 375, 377, 378, 379, 380, 381, 382, 383, 384, 387, 397, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 446, 447, 448, 449, 468, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 545, 546, 547, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 574, 575, 586, 587, 591, 592, 593, 594, 599, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 652, 653, 654, 655, 656, 668, 684, 720, 755, 760, 761, 762, 763, 764, 765, 766, 767, 769, 770, 771, 772, 775, 776, 777, 778, 779, 780, 781, 782, 783, 788, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 821, 822, 823, 825, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 857, 858, 860, 861, 863, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 937, 942, 943, 947, 948, 949, 950, 952, 953, 959, 960, 961, 963, 965, 966, 968, 969, 971, 973, 977, 978, 980, 982, 987, 989, 993, 995, 998, 1004, 1007, 1008, 1009], "you": [0, 15, 16, 20, 23, 67, 83, 109, 110, 113, 115, 132, 135, 149, 154, 169, 182, 183, 185, 210, 215, 222, 227, 233, 238, 239, 245, 253, 264, 287, 288, 291, 293, 294, 297, 300, 319, 328, 332, 333, 334, 339, 340, 343, 344, 345, 346, 347, 349, 350, 351, 353, 354, 358, 359, 363, 364, 367, 369, 371, 372, 373, 374, 375, 377, 380, 381, 382, 384, 385, 390, 401, 407, 408, 410, 411, 413, 428, 429, 431, 433, 434, 435, 436, 437, 438, 439, 440, 446, 447, 448, 464, 467, 468, 473, 474, 496, 497, 498, 500, 502, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 543, 544, 545, 546, 552, 553, 554, 555, 558, 571, 572, 574, 575, 591, 599, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 651, 654, 663, 664, 748, 761, 763, 764, 765, 766, 767, 769, 771, 777, 778, 780, 781, 782, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 809, 810, 811, 812, 813, 815, 816, 822, 823, 824, 825, 828, 829, 830, 831, 832, 837, 838, 839, 844, 845, 850, 851, 853, 854, 855, 856, 858, 860, 861, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 902, 919, 921, 942, 943, 948, 949, 953, 954, 957, 959, 960, 963, 964, 967, 968, 969, 971, 972, 976, 977, 978, 979, 982, 985, 987, 993, 996, 997, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "can": [0, 4, 5, 7, 8, 9, 10, 12, 13, 15, 16, 19, 20, 23, 24, 25, 26, 29, 30, 31, 34, 37, 39, 40, 43, 45, 46, 50, 52, 53, 54, 55, 57, 58, 59, 60, 62, 66, 67, 68, 69, 73, 74, 75, 76, 77, 80, 83, 88, 90, 91, 92, 94, 96, 97, 99, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 130, 131, 132, 134, 135, 137, 142, 143, 144, 148, 149, 150, 152, 153, 154, 155, 156, 158, 160, 161, 162, 165, 166, 169, 170, 172, 174, 176, 177, 179, 181, 182, 183, 184, 185, 186, 187, 189, 197, 198, 199, 201, 202, 203, 208, 209, 210, 211, 212, 214, 215, 218, 219, 222, 224, 225, 226, 227, 229, 230, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 245, 247, 249, 250, 252, 253, 255, 257, 258, 260, 262, 263, 264, 265, 267, 274, 275, 276, 278, 279, 280, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 297, 298, 300, 301, 304, 305, 307, 310, 311, 315, 319, 320, 321, 325, 326, 327, 328, 332, 333, 334, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 353, 354, 358, 359, 360, 362, 363, 364, 367, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 396, 398, 401, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 416, 418, 420, 421, 422, 423, 425, 426, 428, 429, 430, 431, 432, 436, 446, 447, 448, 451, 460, 463, 467, 472, 473, 476, 485, 488, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 543, 544, 545, 546, 547, 548, 552, 553, 555, 556, 558, 559, 560, 561, 562, 563, 564, 566, 567, 568, 570, 571, 572, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 594, 596, 598, 599, 602, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 648, 651, 653, 655, 656, 657, 658, 659, 662, 663, 664, 665, 666, 668, 671, 673, 675, 676, 682, 684, 685, 686, 687, 689, 690, 692, 693, 695, 696, 700, 701, 702, 703, 705, 706, 709, 715, 718, 719, 720, 721, 722, 726, 742, 743, 745, 746, 747, 748, 750, 751, 752, 757, 758, 760, 761, 762, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 776, 777, 778, 780, 781, 782, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 813, 815, 816, 817, 822, 823, 824, 825, 828, 829, 830, 832, 833, 834, 838, 839, 840, 843, 844, 845, 850, 857, 858, 863, 865, 866, 867, 868, 870, 871, 873, 874, 875, 876, 877, 878, 881, 883, 885, 889, 891, 896, 899, 901, 902, 908, 910, 911, 913, 916, 919, 921, 923, 924, 927, 934, 937, 938, 942, 943, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 976, 977, 978, 979, 980, 982, 983, 984, 985, 986, 987, 993, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "contribut": [0, 14, 20, 115, 142, 165, 185, 247, 283, 342, 343, 347, 348, 349, 353, 359, 360, 363, 378, 379, 380, 411, 413, 517, 518, 523, 524, 689, 692, 719, 947, 953, 956, 961, 968, 972, 973, 976, 977, 985, 993, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "help": [0, 4, 9, 11, 16, 52, 66, 70, 92, 97, 154, 165, 199, 201, 239, 241, 255, 276, 304, 307, 320, 321, 328, 332, 333, 343, 346, 347, 348, 349, 350, 351, 353, 354, 359, 360, 362, 367, 373, 374, 377, 381, 383, 397, 500, 541, 591, 614, 618, 629, 649, 650, 656, 678, 801, 873, 874, 875, 876, 943, 947, 948, 950, 952, 953, 955, 957, 963, 964, 969, 971, 972, 973, 976, 977, 987, 999, 1000, 1001, 1004, 1007], "arturo": [0, 34, 54, 107, 160, 165, 218, 239, 241, 283, 319, 320, 321, 356, 1007, 1008, 1009, 1010], "amor": [0, 34, 54, 107, 160, 165, 218, 239, 241, 283, 319, 320, 321, 356, 1007, 1008, 1009, 1010], "luci": [0, 244, 335, 356, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "liu": [0, 244, 335, 356, 527, 689, 719, 953, 959, 996, 999, 1000, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "activ": [0, 150, 189, 224, 230, 239, 295, 296, 321, 339, 340, 343, 345, 346, 351, 353, 357, 359, 360, 363, 374, 460, 466, 490, 596, 599, 601, 614, 615, 617, 618, 619, 627, 628, 629, 646, 647, 648, 649, 650, 677, 682, 760, 821, 822, 823, 861, 919, 949, 950, 951, 952, 956, 957, 958, 966, 974, 976, 1004], "who": [0, 66, 333, 340, 345, 352, 360, 363, 807, 808, 809, 811, 813, 815, 816, 817, 972, 995, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "also": [0, 4, 7, 11, 13, 17, 19, 20, 23, 24, 25, 26, 30, 43, 45, 50, 54, 55, 57, 61, 66, 67, 73, 75, 79, 80, 87, 94, 96, 101, 104, 107, 109, 111, 112, 113, 114, 115, 119, 121, 131, 132, 133, 135, 137, 139, 142, 149, 150, 153, 154, 155, 156, 158, 161, 162, 164, 170, 173, 174, 177, 181, 182, 183, 185, 186, 190, 198, 199, 201, 211, 213, 215, 218, 219, 230, 236, 238, 239, 240, 241, 244, 245, 247, 248, 249, 255, 257, 258, 266, 269, 271, 273, 278, 279, 280, 282, 283, 287, 288, 289, 290, 294, 301, 303, 304, 305, 307, 309, 311, 319, 320, 321, 323, 324, 327, 328, 332, 333, 334, 338, 339, 340, 342, 343, 344, 345, 347, 348, 351, 353, 354, 357, 358, 359, 360, 363, 367, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 401, 402, 403, 405, 406, 409, 410, 411, 412, 414, 416, 426, 427, 429, 431, 446, 448, 456, 460, 462, 467, 472, 496, 497, 499, 500, 505, 510, 513, 515, 517, 518, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 552, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 571, 572, 573, 574, 575, 586, 596, 597, 599, 607, 608, 609, 610, 611, 614, 616, 617, 618, 620, 622, 623, 624, 625, 626, 627, 636, 640, 642, 645, 648, 651, 655, 658, 659, 663, 674, 677, 686, 692, 693, 701, 706, 726, 742, 743, 746, 747, 750, 760, 761, 762, 765, 766, 776, 779, 782, 787, 788, 789, 790, 791, 792, 794, 804, 807, 808, 809, 811, 812, 813, 815, 816, 817, 821, 822, 823, 825, 827, 828, 833, 834, 838, 842, 845, 850, 854, 867, 870, 873, 874, 875, 876, 885, 904, 910, 917, 921, 942, 943, 945, 947, 949, 950, 951, 952, 953, 954, 955, 956, 957, 959, 960, 963, 964, 966, 967, 968, 969, 972, 973, 977, 978, 983, 985, 986, 987, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "triag": [0, 345, 348, 360], "pr": [0, 123, 333, 345, 348, 353, 381, 704, 953, 1003, 1005], "gener": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 19, 21, 24, 25, 26, 27, 28, 29, 30, 31, 34, 36, 37, 38, 39, 40, 41, 42, 43, 45, 47, 48, 49, 50, 51, 53, 55, 56, 57, 58, 59, 62, 66, 67, 68, 69, 70, 71, 74, 76, 79, 80, 81, 82, 83, 87, 91, 92, 93, 94, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 130, 132, 133, 135, 138, 139, 140, 141, 142, 145, 148, 149, 152, 153, 154, 155, 156, 158, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 230, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 257, 258, 260, 261, 262, 263, 264, 266, 267, 268, 269, 271, 273, 274, 275, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 291, 292, 293, 294, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 316, 317, 319, 320, 321, 323, 324, 325, 326, 327, 332, 333, 337, 338, 340, 342, 346, 347, 348, 349, 350, 351, 353, 354, 357, 358, 367, 370, 371, 373, 377, 379, 381, 382, 383, 385, 389, 394, 396, 401, 404, 407, 410, 411, 413, 416, 418, 422, 423, 424, 426, 428, 429, 431, 433, 436, 438, 446, 447, 448, 452, 455, 456, 459, 460, 461, 467, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 497, 498, 500, 502, 504, 505, 507, 508, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 534, 546, 547, 548, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 571, 572, 574, 575, 578, 579, 582, 583, 584, 586, 587, 591, 592, 593, 594, 596, 597, 598, 599, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 633, 634, 635, 636, 637, 639, 641, 642, 643, 644, 649, 650, 653, 654, 655, 656, 657, 658, 659, 665, 668, 670, 681, 685, 686, 687, 700, 706, 720, 741, 744, 748, 756, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 795, 796, 797, 798, 799, 805, 806, 808, 810, 811, 813, 814, 815, 816, 817, 821, 822, 823, 825, 828, 829, 830, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 850, 851, 853, 854, 855, 856, 857, 858, 865, 866, 867, 868, 870, 871, 874, 876, 877, 878, 879, 896, 897, 901, 902, 905, 906, 918, 922, 924, 927, 942, 943, 945, 947, 948, 950, 952, 953, 954, 956, 958, 959, 960, 961, 965, 966, 968, 969, 972, 974, 975, 976, 977, 978, 981, 985, 986, 989, 993, 995, 996, 997, 998, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1009, 1010], "juan": [0, 335, 993, 1004, 1005, 1006, 1007, 1008], "carlo": [0, 213, 335, 380, 383, 575, 605, 606, 945, 958, 993, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "alfaro": [0, 335, 1004, 1005, 1006, 1007, 1008], "jim\u00e9nez": [0, 335, 1001, 1004, 1005, 1006, 1007, 1008], "maxwel": [0, 335, 1003, 1006, 1007, 1008, 1009], "martin": [0, 335, 685, 686, 687, 949, 953, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1010], "loyola": [0, 335, 1006, 1007], "sylvain": [0, 335, 997, 1002, 1003, 1004, 1005, 1006, 1007], "mari\u00e9": [0, 335, 1002, 1003, 1004, 1005, 1006, 1007], "norbert": [0, 335, 995, 1005, 1006, 1007], "prein": [0, 335, 1005, 1006, 1007], "reshama": [0, 330, 335, 1001, 1002, 1004, 1005, 1006, 1007, 1008], "shaikh": [0, 330, 335, 1001, 1002, 1004, 1005, 1006, 1007, 1008], "albert": [0, 208, 335, 1000, 1001, 1002, 1005, 1006], "maren": [0, 335, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "westermann": [0, 335, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "around": [0, 4, 25, 34, 49, 79, 101, 104, 114, 143, 154, 158, 215, 218, 241, 276, 296, 298, 299, 307, 310, 311, 319, 320, 321, 328, 340, 342, 345, 351, 357, 364, 373, 377, 378, 381, 435, 436, 479, 508, 584, 604, 613, 632, 668, 705, 760, 768, 784, 811, 813, 815, 816, 817, 845, 949, 950, 952, 953, 959, 963, 967, 972, 973, 976, 977, 985, 987, 997, 998], "lauren": [0, 329, 656, 660, 950, 1005, 1008], "burk": [0, 329, 1008], "francoisgoupil": [0, 329, 1007], "longer": [0, 4, 32, 50, 104, 154, 166, 275, 290, 345, 347, 373, 377, 380, 381, 413, 500, 527, 948, 952, 953, 955, 958, 968, 976, 977, 987, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "mathieu": [0, 2, 23, 45, 92, 172, 182, 202, 216, 239, 319, 993, 994, 995, 996, 997, 998, 999, 1000, 1006], "blondel": [0, 2, 23, 45, 92, 172, 182, 202, 216, 239, 319, 993, 994, 995, 996, 997, 998, 999, 1000, 1006], "lar": [0, 2, 15, 90, 135, 150, 159, 166, 167, 170, 174, 175, 186, 251, 319, 320, 321, 342, 435, 436, 442, 465, 495, 501, 503, 506, 507, 509, 510, 512, 615, 616, 617, 618, 619, 620, 627, 628, 629, 642, 646, 647, 648, 649, 650, 974, 975, 985, 989, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1004, 1006], "buitinck": [0, 2, 15, 319, 320, 321, 993, 994, 995, 996, 997, 998, 999, 1000], "noel": [0, 2, 101, 102, 103, 993, 994, 995, 996, 997, 1005], "daw": [0, 2, 101, 102, 103, 993, 994, 995, 996, 997], "dubourg": [0, 2, 140, 144, 977, 993, 997], "edouard": [0, 2, 993], "duchesnai": [0, 2, 993], "alexand": [0, 2, 373, 378, 499, 831, 995, 996, 997, 999, 1000, 1001, 1005, 1006, 1007, 1010], "fabisch": [0, 2, 995, 996, 997, 999], "virgil": [0, 2, 9, 993, 994, 996], "fritsch": [0, 2, 9, 993, 994, 996], "satrajit": [0, 2, 993, 994], "ghosh": [0, 2, 373, 993, 994, 1010], "angel": [0, 2], "soler": [0, 2], "gollonet": [0, 2], "chri": [0, 2, 993, 996, 1001, 1002, 1003, 1004, 1007], "gorgolewski": [0, 2, 993, 996], "jaqu": [0, 2, 29, 42, 48, 50, 69, 82, 83, 164, 177, 178, 179, 203, 312, 315, 993, 994, 995, 996], "grobler": [0, 2, 29, 42, 48, 50, 69, 82, 83, 164, 177, 178, 179, 203, 312, 315, 993, 994, 995, 996], "brian": [0, 2, 43, 672, 953, 993, 994, 996, 997, 998, 999, 1000, 1003, 1004, 1006, 1007], "holt": [0, 2, 993], "arnaud": [0, 2, 994, 995, 996, 997, 998, 999], "joli": [0, 2, 994, 995, 996, 997, 998, 999], "thoui": [0, 2, 993], "rai": [0, 2, 921, 953, 993, 1003, 1005, 1006], "jone": [0, 2, 340, 993], "kyle": [0, 2, 91, 994, 995, 996, 997, 999, 1000, 1001, 1002, 1004, 1005], "kastner": [0, 2, 91, 995, 996, 997, 1004, 1005], "manoj": [0, 2, 39, 135, 163, 996, 997, 998, 999, 1000], "kumar": [0, 2, 39, 135, 163, 340, 373, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010], "robert": [0, 2, 45, 68, 135, 169, 255, 342, 378, 492, 499, 592, 620, 685, 686, 687, 698, 831, 943, 949, 993, 994, 995, 996, 997, 998, 999, 1000, 1003, 1008], "layton": [0, 2, 45, 993, 994, 995, 996, 998], "wei": [0, 2, 967, 993, 994, 997, 998, 999, 1000, 1002, 1006, 1009], "li": [0, 2, 299, 340, 603, 606, 660, 689, 719, 858, 942, 945, 953, 956, 963, 965, 968, 993, 994, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "paolo": [0, 2, 993, 997, 1003, 1011], "losi": [0, 2, 993], "gill": [0, 2, 104, 105, 993, 994, 995, 996, 997, 998, 999], "loupp": [0, 2, 104, 105, 380, 519, 520, 993, 994, 995, 996, 997, 998, 999], "jarrod": [0, 2, 1002, 1009, 1010], "millman": [0, 2, 1002, 1009, 1010], "passo": [0, 2, 993, 994], "peter": [0, 2, 11, 16, 60, 113, 115, 116, 239, 319, 320, 373, 412, 414, 421, 613, 755, 756, 949, 953, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1006, 1008, 1009, 1010], "prettenhof": [0, 2, 11, 16, 113, 115, 116, 239, 319, 320, 993, 994, 995, 996, 997, 998], "venkat": [0, 2], "raghav": [0, 2, 242, 278, 997, 998, 999, 1000, 1001, 1005], "rajagopalan": [0, 2, 1001, 1005], "jacob": [0, 2, 998, 999, 1000], "schreiber": [0, 2, 998, 999, 1000], "\u675c\u4e16\u6a4b": [0, 2], "shiqiao": [0, 2, 993, 994], "jake": [0, 2, 11, 144, 182, 201, 227, 263, 271, 971, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1005, 1007], "vanderpla": [0, 2, 11, 144, 182, 201, 227, 263, 271, 971, 993, 994, 995, 996, 997, 998, 999, 1000, 1001], "ward": [0, 2, 14, 21, 33, 36, 37, 38, 41, 43, 49, 50, 51, 53, 59, 150, 156, 205, 381, 405, 409, 427, 494, 818, 974, 993, 996, 998], "farlei": [0, 2, 993], "ron": [0, 2, 226, 993], "weiss": [0, 2, 226, 373, 655, 993], "respons": [0, 135, 154, 177, 181, 184, 215, 248, 319, 342, 351, 359, 372, 373, 374, 380, 410, 428, 446, 447, 448, 595, 596, 597, 638, 639, 662, 664, 666, 705, 760, 761, 954, 960, 978, 1010], "chiara": [0, 336, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "marmo": [0, 336, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "If": [0, 4, 11, 13, 16, 26, 30, 39, 46, 52, 67, 77, 90, 99, 109, 114, 121, 146, 149, 153, 162, 181, 196, 198, 199, 215, 218, 238, 245, 253, 263, 271, 278, 283, 284, 307, 311, 315, 316, 319, 320, 321, 327, 328, 332, 333, 339, 340, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 357, 359, 360, 363, 364, 367, 370, 371, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 394, 397, 398, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 476, 478, 479, 483, 486, 487, 488, 491, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 545, 546, 547, 548, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 571, 572, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 664, 665, 666, 667, 668, 669, 671, 675, 676, 677, 678, 680, 681, 682, 689, 690, 691, 692, 693, 694, 695, 699, 701, 704, 705, 708, 709, 711, 713, 714, 716, 717, 718, 719, 720, 721, 722, 724, 726, 727, 729, 730, 731, 732, 734, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 750, 751, 752, 755, 756, 757, 758, 759, 760, 761, 762, 764, 765, 766, 768, 774, 776, 779, 782, 784, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 888, 889, 890, 891, 894, 900, 902, 904, 906, 910, 912, 916, 919, 921, 922, 924, 927, 928, 934, 937, 938, 939, 940, 942, 943, 945, 947, 948, 949, 950, 951, 953, 956, 957, 959, 960, 963, 965, 967, 968, 969, 970, 972, 973, 976, 978, 979, 985, 986, 987, 993, 996, 997, 998, 999, 1002, 1003, 1005, 1006, 1007, 1009], "us": [0, 3, 4, 7, 8, 9, 11, 13, 14, 15, 16, 19, 20, 21, 23, 24, 25, 26, 28, 30, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 62, 63, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 80, 83, 84, 85, 86, 89, 91, 92, 94, 95, 96, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 120, 122, 123, 124, 126, 127, 128, 131, 132, 134, 136, 137, 138, 143, 144, 145, 146, 148, 149, 150, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 165, 166, 167, 169, 170, 171, 172, 174, 175, 177, 179, 180, 181, 182, 183, 185, 186, 187, 189, 190, 193, 196, 198, 199, 201, 202, 203, 204, 206, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 252, 255, 256, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 275, 276, 277, 278, 280, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 296, 297, 300, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 313, 315, 318, 321, 323, 325, 326, 331, 332, 333, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 352, 354, 358, 359, 360, 362, 363, 364, 367, 369, 370, 371, 373, 374, 375, 376, 379, 383, 384, 385, 386, 389, 391, 392, 394, 395, 403, 420, 421, 423, 425, 427, 435, 442, 444, 445, 449, 457, 467, 472, 473, 480, 495, 509, 510, 511, 512, 519, 536, 538, 539, 541, 542, 547, 549, 550, 556, 559, 560, 562, 565, 567, 573, 580, 584, 585, 588, 593, 600, 602, 606, 614, 615, 618, 624, 625, 627, 631, 639, 647, 649, 650, 651, 658, 659, 660, 663, 675, 678, 679, 680, 685, 686, 687, 689, 691, 693, 699, 702, 706, 714, 719, 721, 722, 726, 727, 729, 730, 731, 732, 734, 737, 738, 739, 740, 743, 744, 746, 754, 757, 769, 770, 771, 773, 774, 775, 785, 797, 799, 801, 805, 806, 815, 816, 817, 819, 827, 828, 831, 833, 836, 847, 848, 850, 852, 853, 855, 856, 857, 860, 864, 866, 875, 876, 877, 878, 881, 884, 885, 886, 891, 892, 901, 902, 909, 916, 920, 921, 922, 924, 925, 929, 930, 931, 935, 936, 942, 943, 945, 946, 948, 951, 952, 954, 955, 956, 958, 959, 960, 961, 963, 964, 965, 966, 970, 971, 972, 973, 974, 975, 976, 978, 979, 981, 982, 983, 984, 986, 988, 989, 990, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "scientif": [0, 30, 126, 127, 128, 213, 339, 343, 357, 363, 373, 416, 426, 465, 977, 979], "we": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 20, 23, 24, 25, 26, 28, 30, 32, 34, 37, 38, 39, 41, 44, 46, 47, 50, 52, 53, 54, 55, 59, 61, 62, 63, 66, 67, 68, 69, 71, 73, 75, 76, 77, 80, 82, 83, 85, 87, 88, 89, 90, 92, 94, 95, 97, 101, 102, 104, 106, 107, 108, 109, 110, 111, 112, 114, 115, 117, 118, 119, 121, 123, 124, 126, 130, 131, 132, 134, 135, 137, 139, 142, 143, 144, 145, 146, 148, 149, 152, 153, 154, 155, 156, 158, 160, 161, 162, 164, 165, 167, 169, 170, 172, 174, 176, 178, 181, 182, 183, 184, 185, 187, 189, 190, 193, 194, 195, 196, 197, 199, 201, 202, 205, 206, 208, 209, 211, 212, 213, 215, 216, 218, 219, 221, 222, 224, 225, 226, 227, 229, 230, 233, 234, 235, 236, 238, 239, 240, 241, 243, 244, 245, 247, 248, 249, 250, 252, 255, 257, 258, 260, 261, 263, 266, 267, 268, 269, 271, 273, 274, 275, 276, 278, 279, 280, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 301, 303, 304, 305, 307, 308, 309, 310, 311, 312, 315, 317, 319, 320, 321, 323, 324, 325, 326, 327, 328, 332, 333, 334, 339, 340, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 357, 358, 359, 360, 364, 369, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 414, 433, 434, 435, 436, 437, 438, 439, 440, 465, 487, 495, 496, 498, 501, 509, 510, 513, 525, 526, 527, 533, 534, 546, 547, 553, 575, 581, 591, 596, 597, 602, 604, 615, 619, 622, 623, 630, 632, 637, 638, 639, 640, 641, 656, 675, 682, 684, 689, 709, 719, 727, 744, 768, 784, 786, 807, 808, 809, 811, 813, 814, 815, 816, 817, 828, 837, 838, 839, 845, 850, 851, 853, 854, 855, 856, 858, 861, 865, 869, 917, 919, 942, 943, 945, 947, 948, 949, 950, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 963, 965, 966, 967, 968, 969, 970, 971, 972, 973, 977, 978, 982, 983, 984, 985, 986, 987, 990, 997, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1009], "would": [0, 4, 6, 9, 13, 25, 30, 42, 50, 52, 55, 66, 73, 75, 76, 80, 85, 92, 101, 114, 135, 137, 142, 143, 153, 154, 155, 156, 158, 165, 171, 181, 182, 183, 196, 199, 208, 215, 218, 226, 234, 238, 239, 244, 246, 248, 255, 258, 264, 275, 278, 279, 283, 284, 290, 293, 299, 307, 311, 315, 316, 319, 321, 327, 328, 332, 340, 341, 345, 346, 347, 351, 353, 354, 357, 358, 359, 360, 364, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 396, 410, 429, 432, 446, 447, 448, 453, 491, 496, 498, 500, 505, 508, 516, 518, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 532, 534, 547, 548, 551, 553, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 575, 599, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 636, 637, 638, 639, 640, 642, 643, 664, 666, 672, 676, 677, 684, 719, 745, 748, 752, 762, 764, 776, 790, 798, 799, 808, 816, 823, 850, 851, 853, 854, 855, 856, 857, 858, 863, 865, 866, 868, 871, 873, 874, 875, 876, 910, 913, 942, 943, 946, 949, 950, 951, 953, 954, 955, 956, 957, 958, 959, 961, 963, 968, 972, 973, 977, 978, 983, 985, 987, 990, 996, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "appreci": [0, 345], "citat": [0, 339, 342, 357], "paper": [0, 135, 158, 238, 342, 351, 357, 373, 375, 406, 413, 442, 468, 498, 505, 527, 605, 622, 630, 631, 635, 640, 643, 656, 751, 802, 811, 814, 857, 858, 949, 953, 956, 959, 968, 987, 993, 1000, 1001], "machin": [0, 4, 6, 8, 9, 13, 26, 60, 69, 79, 107, 131, 132, 135, 137, 142, 151, 155, 171, 176, 193, 196, 221, 238, 241, 244, 255, 272, 278, 283, 285, 289, 292, 303, 308, 311, 315, 319, 321, 332, 333, 338, 339, 340, 342, 343, 345, 348, 351, 352, 357, 358, 359, 362, 367, 371, 373, 377, 378, 380, 381, 383, 401, 403, 412, 435, 436, 442, 466, 468, 474, 480, 481, 482, 494, 496, 498, 505, 508, 519, 520, 521, 522, 523, 524, 528, 529, 530, 557, 558, 574, 575, 578, 583, 586, 598, 602, 603, 605, 607, 608, 609, 614, 615, 618, 619, 620, 621, 622, 623, 640, 646, 647, 656, 672, 677, 688, 698, 704, 706, 748, 751, 760, 790, 791, 805, 806, 811, 814, 821, 822, 823, 825, 843, 845, 851, 865, 866, 867, 868, 870, 871, 875, 876, 921, 942, 943, 945, 946, 949, 950, 951, 953, 954, 956, 959, 960, 961, 963, 967, 969, 971, 972, 973, 974, 975, 976, 977, 979, 980, 981, 983, 987, 988, 989, 990, 993, 995, 1005, 1006, 1007, 1008, 1010], "python": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 152, 153, 154, 155, 156, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 323, 324, 325, 326, 327, 332, 334, 339, 343, 345, 346, 347, 348, 349, 350, 353, 354, 357, 359, 363, 374, 381, 460, 472, 473, 545, 663, 773, 839, 921, 953, 963, 968, 969, 973, 976, 977, 978, 979, 981, 987, 989, 993, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1010], "et": [0, 11, 73, 74, 101, 116, 169, 271, 340, 342, 370, 373, 375, 378, 380, 381, 382, 415, 462, 483, 484, 492, 499, 505, 508, 527, 646, 647, 683, 684, 800, 802, 822, 823, 858, 901, 902, 949, 950, 953, 959, 963, 965, 968, 969, 1001, 1009], "al": [0, 11, 73, 74, 101, 116, 169, 271, 340, 342, 370, 373, 375, 378, 380, 381, 382, 415, 462, 483, 484, 492, 499, 505, 508, 527, 646, 647, 683, 684, 800, 802, 822, 823, 858, 901, 902, 949, 950, 953, 959, 963, 965, 968, 969, 1001, 1006, 1009, 1010], "jmlr": [0, 373, 630, 631, 640, 668, 949, 968], "12": [0, 4, 6, 13, 20, 32, 37, 39, 40, 50, 52, 53, 54, 69, 70, 79, 85, 110, 111, 112, 115, 135, 140, 141, 142, 149, 153, 154, 156, 161, 165, 167, 181, 189, 196, 199, 201, 204, 205, 208, 209, 211, 212, 219, 222, 226, 227, 237, 238, 240, 241, 244, 250, 261, 276, 282, 283, 284, 289, 292, 315, 319, 321, 342, 343, 350, 358, 360, 363, 365, 366, 373, 377, 381, 407, 411, 413, 421, 446, 447, 448, 449, 460, 496, 498, 505, 534, 628, 633, 635, 649, 650, 653, 656, 657, 688, 693, 760, 761, 763, 780, 783, 796, 817, 833, 934, 942, 943, 945, 949, 951, 954, 963, 967, 968, 974, 978, 983, 991, 994, 996, 1000, 1001, 1003, 1004, 1009, 1010], "pp": [0, 60, 135, 237, 342, 373, 375, 381, 384, 385, 408, 412, 416, 426, 475, 497, 498, 505, 554, 599, 607, 628, 649, 650, 684, 689, 693, 703, 719, 732, 746, 800, 802, 804, 821, 841, 853, 946, 953, 955, 956, 966], "2825": 0, "2830": 0, "2011": [0, 44, 154, 202, 351, 378, 381, 499, 502, 504, 505, 511, 554, 591, 602, 622, 693, 943, 957, 967, 971, 993], "bibtex": 0, "entri": [0, 16, 67, 71, 121, 149, 153, 154, 234, 287, 320, 328, 349, 351, 353, 358, 359, 370, 371, 373, 378, 380, 383, 427, 436, 460, 495, 496, 501, 509, 510, 525, 526, 552, 555, 558, 575, 584, 596, 602, 604, 611, 615, 617, 619, 620, 623, 625, 627, 628, 629, 637, 639, 646, 647, 649, 650, 663, 668, 671, 673, 676, 679, 680, 682, 689, 692, 693, 694, 697, 698, 701, 706, 719, 721, 722, 746, 748, 751, 752, 755, 756, 775, 789, 805, 806, 813, 814, 815, 816, 817, 836, 842, 854, 939, 942, 943, 949, 953, 956, 963, 968, 973, 978, 1000, 1003, 1004, 1006, 1010], "articl": [0, 17, 66, 319, 340, 344, 345, 353, 377, 386, 439, 669, 949, 953, 987, 1006], "titl": [0, 4, 5, 6, 7, 8, 9, 11, 13, 14, 15, 20, 21, 23, 24, 25, 26, 28, 30, 34, 35, 36, 38, 41, 42, 43, 45, 46, 48, 49, 51, 52, 53, 54, 55, 56, 58, 59, 60, 73, 74, 76, 77, 79, 80, 83, 84, 87, 88, 89, 90, 91, 94, 95, 96, 102, 103, 104, 107, 109, 110, 111, 114, 115, 117, 120, 123, 124, 128, 130, 131, 133, 134, 135, 137, 138, 139, 141, 142, 143, 144, 145, 153, 160, 161, 163, 165, 166, 168, 169, 170, 173, 174, 180, 181, 183, 185, 186, 187, 189, 190, 195, 198, 199, 201, 202, 203, 208, 212, 213, 214, 216, 217, 218, 224, 225, 226, 227, 228, 229, 230, 232, 233, 237, 238, 239, 241, 242, 243, 247, 248, 252, 260, 261, 264, 265, 266, 267, 269, 270, 271, 278, 282, 283, 284, 285, 298, 301, 303, 304, 305, 306, 307, 310, 311, 316, 317, 319, 324, 325, 326, 344, 345, 349, 353, 374, 953, 976, 983], "p": [0, 11, 14, 23, 25, 26, 38, 58, 75, 76, 79, 85, 94, 113, 131, 135, 140, 158, 193, 198, 199, 201, 203, 212, 227, 238, 244, 245, 271, 339, 340, 342, 343, 350, 353, 370, 371, 373, 375, 376, 378, 380, 382, 383, 384, 386, 406, 408, 410, 411, 414, 419, 420, 421, 433, 435, 438, 439, 442, 462, 492, 498, 502, 504, 505, 511, 513, 514, 515, 517, 519, 520, 521, 522, 523, 525, 528, 529, 530, 554, 556, 557, 558, 559, 560, 562, 563, 564, 568, 569, 570, 571, 572, 573, 579, 580, 591, 604, 607, 652, 654, 656, 658, 663, 669, 679, 687, 704, 715, 749, 751, 764, 770, 771, 772, 775, 790, 797, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 813, 815, 816, 817, 818, 819, 821, 825, 826, 841, 853, 859, 875, 876, 877, 946, 947, 949, 950, 951, 953, 955, 956, 957, 958, 959, 960, 963, 967, 968, 982, 985, 993, 994, 996, 999, 1001, 1008, 1009, 1010], "ython": 0, "f": [0, 4, 5, 7, 11, 12, 13, 15, 16, 17, 20, 25, 28, 30, 34, 40, 44, 45, 46, 49, 50, 52, 55, 61, 64, 67, 71, 80, 90, 101, 104, 107, 108, 109, 111, 112, 114, 121, 122, 127, 129, 131, 134, 135, 137, 143, 144, 146, 150, 152, 153, 154, 155, 156, 158, 165, 167, 170, 181, 182, 183, 185, 191, 195, 199, 202, 212, 214, 215, 218, 222, 229, 236, 238, 239, 240, 241, 244, 245, 247, 248, 250, 258, 261, 273, 274, 275, 280, 283, 284, 287, 289, 291, 293, 294, 296, 297, 306, 311, 315, 319, 320, 321, 328, 340, 345, 346, 347, 349, 351, 357, 371, 374, 378, 380, 381, 382, 383, 451, 472, 473, 495, 496, 501, 502, 530, 545, 546, 547, 556, 559, 560, 562, 563, 564, 568, 569, 570, 571, 572, 573, 581, 591, 596, 599, 622, 660, 677, 686, 689, 692, 693, 719, 746, 747, 750, 751, 763, 764, 767, 769, 770, 771, 772, 775, 777, 778, 779, 780, 781, 782, 783, 789, 790, 792, 822, 823, 827, 836, 839, 840, 844, 845, 846, 872, 880, 885, 886, 937, 945, 948, 957, 960, 961, 963, 967, 974, 995, 1001, 1002, 1003, 1005, 1007], "g": [0, 4, 7, 8, 10, 12, 16, 23, 24, 25, 26, 30, 50, 52, 62, 66, 69, 77, 80, 94, 101, 104, 105, 113, 114, 121, 137, 138, 139, 140, 142, 144, 145, 146, 149, 152, 163, 166, 181, 182, 183, 185, 199, 202, 206, 214, 215, 224, 238, 242, 243, 249, 257, 264, 278, 283, 299, 314, 315, 321, 328, 332, 337, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 357, 359, 364, 367, 369, 371, 372, 373, 375, 377, 378, 380, 381, 382, 383, 385, 401, 407, 408, 411, 413, 429, 433, 434, 435, 436, 437, 438, 439, 440, 446, 447, 448, 467, 492, 495, 497, 498, 501, 502, 505, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 545, 546, 552, 553, 554, 555, 557, 558, 561, 568, 574, 575, 581, 586, 587, 594, 597, 598, 599, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 650, 654, 656, 661, 684, 691, 701, 703, 726, 748, 751, 763, 764, 765, 766, 768, 769, 771, 780, 784, 786, 787, 788, 789, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 809, 810, 812, 814, 815, 816, 817, 821, 822, 823, 825, 828, 830, 831, 832, 835, 837, 838, 841, 843, 844, 845, 846, 848, 850, 851, 852, 853, 854, 855, 856, 860, 861, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 901, 902, 913, 921, 942, 943, 947, 949, 950, 951, 953, 954, 955, 956, 957, 958, 959, 960, 963, 967, 968, 969, 973, 976, 977, 982, 987, 993, 997, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010], "A": [0, 14, 16, 17, 18, 24, 26, 29, 33, 35, 36, 37, 38, 41, 42, 43, 45, 46, 50, 51, 53, 56, 57, 58, 59, 61, 64, 71, 73, 76, 80, 85, 88, 89, 90, 94, 102, 103, 108, 109, 111, 120, 124, 126, 127, 128, 132, 133, 134, 137, 140, 142, 144, 145, 146, 150, 153, 154, 165, 169, 182, 185, 191, 195, 196, 199, 202, 215, 218, 227, 238, 239, 241, 245, 252, 255, 273, 278, 280, 283, 287, 289, 292, 297, 298, 299, 301, 307, 312, 319, 320, 321, 325, 327, 328, 332, 334, 339, 340, 342, 343, 345, 347, 348, 350, 353, 357, 358, 359, 360, 362, 364, 368, 370, 371, 373, 374, 375, 376, 378, 379, 380, 381, 382, 384, 385, 386, 387, 396, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 421, 422, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 446, 447, 448, 449, 452, 454, 455, 456, 458, 461, 464, 465, 466, 467, 468, 472, 474, 475, 476, 477, 478, 484, 486, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 534, 545, 546, 547, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 571, 572, 574, 575, 581, 584, 591, 592, 593, 594, 596, 597, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 668, 669, 674, 675, 676, 680, 681, 683, 685, 686, 687, 688, 689, 694, 699, 700, 703, 705, 706, 707, 710, 712, 713, 714, 715, 717, 718, 719, 720, 721, 722, 727, 729, 730, 737, 738, 739, 740, 741, 744, 751, 753, 754, 756, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 853, 854, 855, 856, 857, 858, 860, 861, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 900, 901, 902, 909, 910, 911, 912, 913, 938, 942, 943, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 963, 966, 967, 968, 969, 971, 972, 973, 974, 978, 979, 985, 986, 987, 989, 993, 995, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "v": [0, 4, 9, 13, 14, 16, 17, 19, 26, 28, 31, 32, 33, 34, 35, 36, 37, 38, 44, 46, 52, 55, 66, 71, 72, 75, 77, 78, 79, 87, 89, 90, 94, 105, 107, 108, 109, 114, 115, 116, 126, 131, 137, 150, 151, 156, 159, 170, 179, 180, 181, 182, 185, 186, 190, 196, 205, 212, 225, 226, 229, 230, 231, 234, 253, 255, 269, 285, 287, 304, 320, 328, 333, 337, 342, 343, 345, 351, 353, 359, 369, 370, 371, 372, 375, 376, 378, 381, 396, 405, 409, 416, 426, 427, 428, 429, 434, 437, 438, 439, 440, 441, 446, 447, 448, 460, 476, 488, 494, 495, 501, 505, 509, 510, 514, 516, 518, 520, 522, 524, 526, 528, 529, 532, 534, 545, 553, 557, 558, 564, 570, 575, 594, 595, 598, 599, 603, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 634, 636, 637, 640, 642, 643, 652, 659, 663, 665, 668, 681, 699, 700, 702, 717, 718, 720, 751, 758, 762, 767, 774, 776, 787, 791, 793, 794, 795, 798, 799, 800, 808, 816, 818, 821, 823, 825, 826, 829, 832, 838, 839, 840, 845, 846, 849, 859, 865, 866, 867, 868, 870, 871, 874, 876, 880, 947, 948, 949, 950, 953, 954, 955, 958, 961, 967, 968, 970, 974, 989, 993, 996, 997, 998, 1001, 1003, 1004, 1007, 1008], "b": [0, 8, 10, 23, 25, 56, 62, 75, 94, 103, 104, 110, 114, 115, 124, 126, 138, 139, 140, 145, 149, 163, 165, 166, 181, 182, 187, 199, 216, 218, 237, 241, 243, 248, 252, 257, 290, 299, 328, 340, 342, 345, 349, 350, 351, 370, 371, 373, 376, 377, 378, 381, 401, 446, 462, 464, 505, 530, 552, 553, 554, 555, 571, 572, 574, 575, 592, 610, 611, 612, 613, 622, 633, 636, 638, 640, 644, 651, 652, 669, 683, 693, 694, 755, 756, 773, 774, 812, 838, 839, 840, 841, 844, 845, 853, 880, 887, 902, 903, 916, 918, 943, 945, 949, 950, 951, 953, 956, 958, 963, 967, 968, 982, 993, 1001, 1004, 1006, 1007, 1008], "o": [0, 17, 19, 26, 28, 35, 46, 52, 57, 58, 60, 61, 77, 79, 84, 89, 118, 135, 145, 169, 174, 179, 181, 196, 214, 224, 238, 240, 247, 278, 279, 283, 288, 291, 294, 300, 311, 323, 332, 340, 342, 345, 363, 373, 375, 378, 380, 384, 386, 408, 411, 412, 414, 437, 439, 498, 568, 591, 630, 631, 656, 793, 821, 836, 877, 921, 922, 945, 947, 949, 950, 953, 954, 956, 957, 967, 968, 969, 993, 996, 999, 1001, 1002, 1005, 1006, 1008, 1009, 1010], "m": [0, 4, 8, 11, 19, 25, 26, 41, 55, 56, 60, 61, 62, 75, 76, 87, 101, 124, 142, 163, 181, 199, 238, 242, 271, 294, 300, 303, 314, 319, 332, 333, 339, 340, 342, 343, 349, 351, 359, 363, 370, 371, 373, 375, 378, 380, 382, 384, 408, 409, 410, 414, 421, 437, 438, 464, 477, 492, 496, 498, 500, 505, 603, 609, 613, 628, 635, 649, 650, 653, 657, 672, 680, 689, 704, 719, 721, 722, 760, 761, 811, 836, 902, 932, 933, 943, 945, 947, 949, 950, 951, 953, 954, 955, 956, 957, 961, 963, 967, 969, 977, 1001, 1002, 1003, 1004, 1007, 1008, 1009, 1010], "r": [0, 8, 10, 11, 12, 14, 16, 23, 24, 25, 26, 36, 40, 62, 71, 73, 74, 75, 76, 80, 87, 94, 97, 101, 104, 105, 110, 114, 115, 116, 124, 131, 138, 139, 140, 144, 145, 146, 148, 149, 153, 163, 165, 166, 170, 181, 188, 191, 199, 206, 211, 214, 224, 227, 230, 237, 238, 241, 243, 244, 245, 248, 251, 253, 257, 260, 261, 265, 269, 271, 284, 291, 309, 311, 321, 328, 340, 342, 346, 349, 357, 359, 370, 371, 373, 375, 376, 377, 378, 380, 381, 390, 396, 401, 410, 415, 417, 429, 433, 438, 442, 446, 447, 448, 462, 468, 477, 484, 498, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 531, 532, 533, 534, 552, 553, 554, 555, 570, 573, 574, 575, 591, 599, 603, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 643, 644, 649, 650, 656, 660, 680, 685, 686, 687, 691, 693, 744, 748, 751, 762, 776, 779, 793, 794, 795, 796, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 811, 812, 814, 815, 816, 822, 823, 836, 841, 853, 860, 861, 865, 866, 867, 868, 870, 871, 873, 874, 875, 876, 878, 919, 943, 945, 947, 949, 950, 953, 954, 955, 956, 957, 960, 961, 963, 967, 968, 969, 972, 987, 993, 997, 1000, 1003, 1004, 1005, 1006, 1008, 1010], "d": [0, 6, 7, 8, 10, 11, 12, 13, 15, 16, 17, 19, 29, 30, 34, 35, 39, 45, 46, 47, 57, 58, 60, 66, 67, 77, 82, 85, 87, 90, 94, 96, 137, 145, 181, 189, 197, 199, 206, 209, 211, 212, 213, 214, 227, 237, 238, 246, 257, 264, 265, 271, 275, 296, 297, 300, 307, 311, 312, 321, 339, 340, 342, 347, 351, 357, 371, 373, 375, 376, 378, 380, 381, 383, 384, 408, 410, 411, 416, 424, 427, 452, 457, 467, 490, 498, 500, 521, 522, 529, 530, 545, 546, 554, 578, 579, 583, 586, 587, 608, 609, 612, 633, 634, 635, 644, 652, 653, 656, 657, 661, 663, 669, 672, 685, 686, 687, 689, 719, 727, 741, 744, 751, 774, 800, 802, 804, 805, 806, 821, 832, 836, 838, 839, 841, 853, 858, 875, 876, 880, 945, 947, 949, 950, 951, 952, 953, 955, 961, 963, 965, 968, 969, 983, 984, 985, 996, 998, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1009], "perrot": [0, 993], "e": [0, 4, 8, 10, 11, 13, 16, 24, 25, 30, 32, 50, 52, 54, 58, 66, 73, 75, 76, 77, 79, 80, 83, 90, 92, 101, 104, 111, 113, 114, 117, 126, 131, 134, 135, 145, 152, 153, 154, 158, 161, 165, 170, 171, 181, 182, 183, 185, 199, 201, 202, 214, 215, 234, 238, 239, 241, 243, 244, 252, 253, 255, 257, 264, 271, 280, 283, 287, 289, 315, 321, 325, 326, 327, 328, 332, 333, 334, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 357, 358, 359, 363, 364, 367, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 401, 403, 405, 407, 408, 409, 411, 413, 414, 418, 427, 429, 430, 433, 434, 435, 436, 437, 438, 439, 440, 446, 447, 448, 460, 462, 464, 465, 466, 467, 488, 497, 498, 499, 500, 501, 502, 503, 504, 505, 510, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 541, 545, 546, 552, 553, 554, 555, 557, 558, 561, 567, 568, 569, 570, 571, 572, 573, 574, 575, 581, 586, 587, 594, 597, 598, 599, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 648, 651, 652, 654, 656, 658, 661, 663, 665, 668, 669, 672, 673, 691, 692, 693, 694, 701, 704, 705, 718, 726, 730, 748, 751, 760, 761, 762, 763, 764, 765, 766, 768, 769, 771, 775, 776, 780, 784, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 815, 816, 817, 821, 822, 823, 825, 828, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 843, 844, 845, 846, 848, 850, 851, 852, 853, 854, 855, 856, 860, 861, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 880, 896, 901, 902, 904, 907, 908, 910, 913, 921, 928, 939, 942, 943, 945, 947, 948, 949, 950, 951, 952, 953, 955, 956, 957, 958, 959, 960, 961, 963, 964, 967, 968, 969, 973, 976, 977, 985, 986, 987, 993, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "journal": [0, 76, 154, 238, 244, 255, 339, 340, 342, 371, 373, 375, 380, 416, 426, 437, 498, 505, 591, 599, 609, 653, 656, 657, 669, 679, 694, 697, 698, 721, 722, 749, 790, 795, 841, 853, 942, 943, 947, 949, 950, 951, 954, 960, 965, 967, 968], "research": [0, 135, 152, 238, 244, 255, 340, 342, 357, 373, 465, 477, 599, 609, 656, 698, 790, 795, 942, 950, 954, 956, 968, 972, 973, 977], "volum": [0, 63, 74, 135, 142, 340, 342, 373, 375, 437, 498, 732, 949, 968, 977], "page": [0, 12, 17, 25, 67, 68, 106, 108, 109, 117, 118, 121, 124, 132, 135, 142, 153, 154, 155, 162, 201, 209, 210, 211, 215, 219, 220, 221, 222, 229, 236, 238, 239, 245, 250, 276, 284, 288, 289, 291, 292, 294, 298, 327, 332, 340, 342, 345, 347, 349, 351, 353, 360, 372, 373, 375, 437, 480, 481, 482, 592, 608, 795, 860, 902, 943, 949, 953, 954, 978, 987, 991, 993, 997, 998], "want": [0, 4, 12, 20, 23, 24, 25, 52, 61, 67, 135, 149, 153, 181, 182, 183, 215, 218, 230, 238, 252, 255, 261, 275, 301, 304, 319, 328, 332, 333, 334, 343, 344, 346, 347, 349, 350, 351, 357, 358, 359, 360, 363, 364, 367, 371, 372, 373, 374, 375, 380, 381, 382, 464, 467, 468, 474, 499, 513, 618, 619, 620, 622, 623, 630, 632, 638, 639, 640, 727, 811, 814, 830, 837, 858, 865, 942, 949, 952, 953, 954, 957, 959, 963, 964, 968, 972, 973, 978, 986, 993, 1007], "its": [0, 4, 9, 12, 13, 14, 19, 25, 32, 34, 52, 62, 63, 73, 75, 77, 80, 83, 84, 85, 92, 99, 101, 107, 110, 112, 114, 126, 135, 137, 142, 144, 153, 154, 156, 158, 160, 170, 194, 198, 199, 203, 208, 215, 217, 218, 220, 222, 224, 229, 230, 237, 241, 243, 245, 247, 258, 260, 264, 265, 280, 290, 299, 304, 311, 317, 319, 320, 323, 327, 328, 333, 334, 338, 339, 340, 341, 345, 346, 347, 349, 350, 353, 357, 358, 359, 360, 363, 364, 367, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 389, 404, 406, 408, 410, 414, 418, 420, 424, 427, 428, 429, 431, 434, 435, 436, 437, 438, 439, 440, 446, 447, 448, 461, 467, 487, 495, 497, 498, 501, 502, 504, 505, 506, 508, 514, 517, 519, 520, 521, 522, 523, 524, 528, 529, 530, 547, 549, 550, 551, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 571, 572, 575, 576, 577, 578, 579, 580, 583, 584, 585, 586, 587, 588, 589, 591, 608, 609, 635, 636, 638, 649, 650, 651, 652, 656, 660, 663, 672, 688, 692, 693, 699, 700, 704, 741, 744, 746, 760, 761, 762, 786, 793, 794, 796, 807, 808, 809, 811, 812, 813, 815, 816, 817, 824, 825, 829, 834, 837, 838, 840, 857, 858, 861, 865, 866, 873, 875, 885, 886, 891, 897, 921, 923, 942, 945, 948, 949, 950, 952, 953, 954, 955, 956, 959, 960, 961, 966, 967, 968, 969, 972, 977, 978, 980, 982, 985, 986, 987, 995, 996, 997, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011], "api": [0, 12, 47, 53, 98, 106, 150, 207, 209, 215, 219, 220, 235, 240, 247, 248, 258, 294, 320, 321, 334, 338, 339, 345, 346, 348, 349, 354, 355, 357, 358, 360, 363, 367, 378, 380, 381, 383, 387, 390, 391, 392, 395, 397, 402, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 428, 432, 433, 434, 435, 436, 437, 438, 439, 440, 446, 447, 448, 449, 460, 468, 472, 474, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 513, 527, 528, 530, 531, 532, 533, 534, 543, 544, 545, 546, 547, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 575, 591, 592, 593, 594, 599, 602, 603, 604, 605, 606, 622, 641, 652, 653, 654, 655, 656, 666, 760, 761, 765, 766, 768, 784, 791, 809, 811, 813, 814, 817, 821, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 850, 851, 852, 853, 854, 855, 856, 857, 858, 863, 869, 870, 919, 921, 937, 942, 951, 952, 953, 956, 963, 967, 972, 973, 974, 977, 978, 982, 984, 989, 990, 991, 992, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1011], "design": [0, 14, 20, 75, 101, 121, 140, 152, 153, 162, 229, 278, 284, 327, 334, 339, 345, 350, 357, 358, 359, 360, 362, 373, 380, 382, 479, 492, 596, 597, 612, 629, 633, 640, 644, 649, 762, 780, 781, 800, 802, 943, 949, 950, 953, 954, 963, 972, 973, 977, 980, 995, 1002], "mai": [0, 8, 19, 24, 36, 41, 43, 53, 67, 80, 87, 111, 112, 135, 141, 143, 145, 153, 156, 158, 161, 165, 170, 185, 187, 206, 215, 218, 241, 243, 245, 246, 273, 283, 297, 307, 311, 315, 319, 320, 321, 328, 332, 333, 334, 337, 339, 340, 341, 342, 343, 344, 345, 347, 349, 350, 353, 357, 359, 360, 363, 364, 367, 370, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 396, 403, 404, 405, 407, 408, 409, 410, 411, 413, 415, 416, 417, 418, 423, 426, 429, 433, 436, 446, 447, 448, 451, 452, 453, 460, 472, 473, 479, 498, 499, 502, 504, 508, 511, 512, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 534, 536, 538, 545, 558, 561, 566, 574, 575, 581, 584, 598, 599, 601, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 636, 637, 638, 640, 641, 642, 643, 645, 648, 650, 652, 653, 655, 656, 657, 659, 661, 669, 676, 679, 680, 682, 683, 685, 686, 687, 689, 701, 719, 726, 748, 749, 762, 764, 765, 766, 767, 776, 777, 778, 781, 782, 786, 790, 793, 798, 799, 800, 801, 802, 804, 807, 808, 809, 811, 813, 815, 816, 817, 823, 824, 825, 828, 830, 840, 842, 843, 844, 845, 846, 848, 854, 857, 858, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 878, 883, 905, 906, 921, 942, 943, 945, 947, 949, 950, 953, 954, 955, 956, 957, 959, 960, 961, 963, 964, 965, 966, 967, 968, 969, 970, 973, 978, 984, 985, 993, 995, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "consid": [0, 4, 12, 13, 14, 20, 24, 36, 52, 63, 67, 76, 83, 87, 91, 111, 114, 130, 134, 135, 149, 154, 181, 183, 215, 238, 241, 245, 249, 258, 261, 264, 265, 278, 289, 304, 311, 312, 315, 319, 328, 332, 333, 334, 337, 344, 345, 347, 351, 353, 357, 359, 360, 369, 373, 378, 379, 380, 381, 382, 383, 384, 385, 402, 408, 410, 414, 421, 438, 472, 473, 485, 497, 513, 514, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 549, 550, 552, 553, 555, 557, 571, 572, 584, 595, 596, 597, 610, 616, 622, 623, 624, 626, 635, 643, 652, 653, 654, 656, 657, 658, 660, 664, 666, 669, 671, 673, 679, 689, 693, 697, 719, 749, 751, 757, 807, 808, 809, 811, 813, 815, 816, 817, 820, 822, 823, 828, 838, 839, 846, 860, 861, 870, 871, 873, 874, 875, 876, 937, 942, 948, 949, 950, 951, 953, 954, 956, 959, 960, 961, 963, 967, 968, 969, 973, 978, 985, 996, 997, 1001, 1005, 1006, 1008, 1009, 1010], "softwar": [0, 135, 332, 342, 345, 353, 357, 359, 381, 591, 599, 622, 943, 977], "from": [0, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 82, 83, 84, 85, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 130, 131, 132, 133, 134, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 152, 153, 154, 156, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 285, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 323, 324, 325, 326, 327, 328, 332, 334, 337, 338, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 358, 359, 360, 362, 363, 364, 367, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 476, 478, 479, 480, 481, 482, 483, 485, 487, 488, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 648, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 726, 727, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 910, 911, 912, 914, 915, 916, 917, 918, 920, 921, 922, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 937, 938, 939, 940, 941, 942, 943, 945, 947, 948, 949, 950, 951, 952, 954, 955, 956, 957, 958, 959, 960, 961, 963, 964, 965, 966, 967, 968, 969, 971, 972, 973, 974, 977, 979, 981, 982, 983, 984, 989, 990, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "2013": [0, 158, 342, 373, 377, 378, 500, 689, 719, 945, 953, 971, 994, 995], "inproceed": 0, "sklearn_api": 0, "ga": 0, "l": [0, 7, 14, 16, 17, 37, 43, 44, 63, 64, 76, 104, 135, 155, 173, 176, 185, 190, 191, 243, 244, 245, 255, 274, 282, 315, 342, 343, 351, 353, 370, 371, 373, 377, 378, 380, 383, 438, 480, 481, 482, 502, 504, 511, 519, 520, 521, 522, 529, 530, 554, 571, 572, 574, 575, 579, 583, 586, 587, 598, 612, 613, 622, 633, 636, 638, 644, 651, 653, 656, 657, 669, 679, 688, 689, 694, 719, 749, 802, 836, 873, 874, 875, 876, 942, 947, 949, 950, 953, 955, 956, 957, 961, 965, 967, 969, 986, 996, 1001, 1005, 1006, 1007, 1008, 1010], "booktitl": 0, "ecml": 0, "pkdd": 0, "workshop": [0, 373, 381, 800, 955, 971], "languag": [0, 321, 350, 367, 378, 381, 967, 972, 973, 977, 979], "data": [0, 3, 6, 8, 11, 13, 14, 15, 16, 19, 21, 24, 28, 29, 30, 31, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 45, 48, 49, 50, 51, 53, 56, 57, 58, 59, 62, 65, 67, 68, 70, 74, 76, 83, 85, 86, 87, 90, 91, 95, 97, 99, 101, 103, 104, 106, 107, 110, 111, 113, 114, 118, 119, 120, 122, 124, 126, 127, 128, 132, 136, 137, 138, 139, 141, 142, 144, 146, 148, 150, 153, 154, 159, 160, 163, 164, 165, 166, 170, 171, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 187, 189, 190, 194, 195, 197, 198, 199, 201, 202, 203, 204, 205, 208, 211, 212, 213, 215, 217, 218, 219, 222, 224, 225, 226, 227, 228, 230, 232, 236, 238, 240, 241, 242, 243, 246, 252, 255, 257, 258, 262, 264, 266, 267, 268, 269, 271, 274, 275, 277, 279, 280, 281, 285, 287, 289, 291, 292, 293, 297, 298, 300, 301, 303, 304, 306, 311, 312, 319, 324, 325, 326, 327, 331, 333, 337, 338, 339, 341, 342, 345, 347, 348, 351, 352, 353, 354, 358, 363, 364, 367, 369, 370, 371, 372, 375, 376, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 390, 391, 392, 397, 398, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 477, 478, 479, 484, 485, 486, 487, 488, 490, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 536, 537, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 570, 571, 572, 573, 574, 575, 581, 582, 586, 589, 591, 592, 593, 594, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 666, 668, 669, 671, 672, 674, 675, 677, 681, 682, 684, 688, 690, 691, 692, 693, 694, 697, 699, 700, 701, 703, 704, 717, 718, 720, 724, 726, 727, 732, 746, 747, 748, 750, 751, 752, 756, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 786, 787, 788, 789, 790, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 878, 879, 881, 883, 884, 885, 886, 889, 890, 891, 899, 901, 902, 916, 919, 924, 925, 927, 928, 929, 930, 931, 932, 933, 934, 940, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 964, 965, 966, 968, 969, 970, 971, 972, 973, 974, 975, 976, 979, 980, 982, 983, 985, 989, 990, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "mine": [0, 238, 320, 340, 373, 384, 408, 475, 527, 684, 697, 703, 746, 949, 953, 959, 965], "108": [0, 8, 174, 190, 974, 994], "122": [0, 13, 103, 104, 142, 149, 154, 213, 320, 351, 954, 974], "high": [0, 4, 9, 11, 12, 24, 26, 29, 34, 37, 41, 46, 52, 54, 59, 62, 66, 70, 75, 76, 89, 90, 104, 106, 107, 108, 109, 114, 115, 117, 119, 127, 128, 135, 137, 143, 149, 152, 154, 155, 156, 165, 176, 182, 183, 185, 195, 201, 202, 203, 208, 212, 224, 230, 236, 240, 244, 245, 253, 264, 265, 273, 275, 280, 282, 283, 284, 285, 293, 299, 304, 306, 307, 319, 320, 325, 326, 332, 340, 342, 345, 350, 353, 354, 357, 358, 370, 371, 372, 373, 377, 379, 380, 381, 382, 383, 408, 411, 413, 414, 416, 433, 446, 447, 448, 517, 518, 521, 522, 523, 524, 527, 528, 529, 530, 531, 532, 608, 634, 635, 643, 653, 656, 657, 689, 694, 705, 709, 719, 752, 755, 770, 772, 805, 806, 810, 839, 840, 844, 846, 867, 869, 870, 873, 874, 875, 876, 922, 942, 947, 948, 949, 950, 952, 953, 956, 957, 959, 961, 963, 965, 968, 969, 970, 972, 973, 978, 979, 981, 987, 993, 994, 996, 997, 1001, 1004, 1005, 1006, 1007, 1008], "qualiti": [0, 6, 20, 23, 34, 43, 45, 46, 55, 90, 110, 153, 187, 232, 236, 245, 246, 247, 311, 345, 353, 357, 359, 367, 368, 372, 373, 375, 378, 416, 426, 433, 438, 521, 522, 523, 524, 528, 529, 706, 776, 857, 858, 873, 874, 875, 876, 902, 948, 950, 958, 965, 969, 972, 973, 977, 982, 983, 989], "png": [0, 30, 877], "svg": 0, "logo": [0, 377, 769], "avail": [0, 5, 11, 12, 14, 38, 53, 54, 90, 109, 113, 135, 137, 142, 146, 152, 153, 154, 170, 181, 189, 199, 202, 215, 218, 235, 236, 241, 242, 245, 263, 264, 265, 271, 283, 287, 288, 289, 290, 292, 293, 299, 301, 328, 332, 339, 340, 342, 343, 344, 345, 346, 350, 354, 358, 359, 363, 367, 370, 372, 373, 374, 377, 378, 379, 380, 381, 382, 384, 411, 414, 415, 416, 417, 433, 434, 435, 436, 437, 438, 439, 440, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 472, 499, 513, 519, 520, 521, 522, 523, 524, 528, 529, 552, 555, 557, 558, 574, 575, 591, 596, 597, 611, 615, 617, 619, 621, 625, 627, 629, 632, 634, 636, 637, 638, 640, 653, 660, 663, 695, 696, 762, 765, 766, 776, 787, 788, 793, 794, 795, 796, 797, 798, 799, 811, 822, 823, 825, 832, 841, 844, 849, 853, 858, 909, 914, 921, 943, 947, 950, 952, 953, 954, 955, 956, 959, 963, 966, 967, 968, 971, 972, 973, 976, 977, 978, 982, 987, 989, 993, 998, 999, 1000, 1001, 1002, 1003, 1006, 1007, 1009], "doc": [0, 4, 8, 19, 319, 321, 333, 343, 345, 349, 350, 353, 359, 363, 366, 367, 381, 552, 553, 555, 741, 744, 755, 756, 788, 987, 993, 997, 1007], "sourc": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 152, 153, 154, 155, 156, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 323, 324, 325, 326, 327, 328, 339, 342, 344, 345, 346, 348, 349, 351, 353, 354, 357, 358, 363, 367, 370, 374, 378, 380, 381, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 937, 938, 939, 940, 941, 950, 963, 969, 972, 974, 977, 986, 987, 1003, 1007], "directori": [0, 8, 260, 339, 343, 345, 347, 351, 353, 359, 363, 374, 405, 409, 414, 450, 463, 825, 826, 1007], "driven": [0, 156, 977], "howev": [0, 4, 5, 7, 13, 14, 23, 24, 26, 34, 44, 46, 50, 52, 57, 68, 71, 73, 77, 79, 92, 94, 104, 106, 107, 111, 114, 115, 121, 132, 135, 137, 142, 143, 154, 155, 162, 170, 181, 185, 202, 205, 206, 208, 214, 215, 238, 245, 252, 255, 257, 258, 263, 274, 278, 289, 311, 315, 319, 320, 328, 332, 333, 334, 339, 340, 342, 343, 344, 345, 347, 351, 353, 357, 359, 364, 367, 369, 370, 371, 373, 374, 375, 377, 378, 379, 380, 381, 382, 383, 404, 407, 411, 413, 415, 418, 423, 460, 472, 496, 515, 531, 545, 546, 547, 553, 570, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 594, 596, 597, 602, 607, 619, 620, 636, 651, 656, 659, 664, 726, 728, 762, 765, 766, 776, 788, 792, 793, 804, 822, 823, 828, 837, 838, 843, 867, 868, 870, 881, 922, 942, 943, 946, 947, 948, 949, 950, 952, 953, 954, 956, 957, 958, 960, 961, 963, 967, 968, 969, 978, 982, 985, 1002, 1003, 1005, 1006, 1009], "institut": [0, 342, 956], "privat": [0, 349, 359, 360, 881, 977, 993, 1001, 1003, 1004, 1006, 1007], "grant": [0, 218, 345], "assur": [0, 359, 760, 761, 1000, 1001, 1002, 1003, 1004, 1005, 1006], "sustain": 0, "like": [0, 4, 12, 13, 19, 49, 52, 55, 57, 66, 82, 85, 90, 94, 96, 99, 101, 103, 108, 114, 117, 137, 143, 153, 161, 181, 230, 238, 241, 242, 245, 246, 252, 267, 276, 278, 283, 284, 287, 299, 307, 311, 319, 320, 328, 332, 334, 337, 339, 340, 343, 344, 345, 347, 349, 352, 353, 354, 357, 358, 359, 367, 369, 371, 373, 374, 376, 377, 378, 380, 381, 382, 384, 385, 386, 388, 389, 390, 391, 392, 394, 395, 396, 397, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 422, 423, 424, 425, 426, 427, 428, 429, 431, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 476, 477, 479, 483, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 543, 545, 546, 547, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 697, 698, 699, 700, 701, 702, 703, 704, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 726, 727, 729, 730, 731, 732, 733, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 828, 829, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 883, 890, 891, 904, 907, 916, 917, 921, 924, 925, 926, 938, 940, 942, 945, 947, 948, 949, 950, 953, 955, 956, 957, 959, 960, 963, 968, 969, 972, 973, 977, 978, 985, 987, 990, 993, 996, 997, 1000, 1001, 1003, 1004, 1005, 1007, 1008, 1009, 1010], "thank": [0, 4, 17, 24, 52, 80, 155, 158, 181, 247, 319, 320, 344, 353, 972, 977, 993, 997, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "funder": 0, "member": [0, 319, 320, 340, 345, 348, 360, 373, 388, 406, 410, 412, 415, 417, 456, 519, 520, 521, 522, 527, 528, 529, 530, 545, 622, 623, 630, 631, 632, 640, 641, 642, 668, 669, 679, 681, 694, 699, 700, 720, 749, 758, 762, 865, 949, 956, 978, 993, 1005, 1008], "consortium": [0, 977], "foundat": [0, 121, 345, 371, 956], "fran\u00e7oi": [0, 996], "goupil": 0, "nvidia": [0, 357], "2022": [0, 333, 380, 669, 963, 1007, 1008], "face": [0, 3, 5, 15, 33, 50, 86, 90, 92, 94, 96, 109, 150, 158, 207, 338, 345, 349, 373, 378, 380, 382, 413, 436, 457, 458, 459, 485, 496, 497, 501, 503, 504, 505, 507, 522, 548, 621, 637, 661, 677, 776, 791, 808, 845, 870, 888, 956, 969, 970, 974, 981, 986, 989, 993, 1001], "2023": [0, 357, 371, 1008, 1009], "microsoft": [0, 12, 343, 346, 363], "m\u00fcller": [0, 29, 279, 280, 360, 378, 499, 831, 957, 963, 967, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1005, 1007], "2020": [0, 340, 1003, 1004, 1005, 1006], "quansight": 0, "lab": [0, 340, 432, 500, 863, 977, 1004], "2021": [0, 343, 345, 635, 1005, 1006], "columbia": 0, "univers": [0, 145, 319, 340, 342, 348, 373, 378, 381, 554, 751, 800, 804, 860, 949, 951, 953, 955], "2016": [0, 206, 339, 373, 942, 998, 999], "sydnei": 0, "2017": [0, 238, 339, 371, 373, 384, 408, 953, 999, 1000], "receiv": [0, 19, 126, 150, 209, 215, 221, 231, 233, 235, 299, 321, 328, 345, 347, 353, 359, 377, 380, 468, 622, 666, 670, 672, 690, 745, 751, 752, 781, 791, 793, 794, 832, 870, 954, 957, 958, 967, 974, 1003, 1004], "improv": [0, 4, 23, 24, 31, 73, 74, 77, 92, 97, 101, 102, 107, 110, 112, 113, 114, 116, 121, 131, 149, 153, 158, 167, 181, 189, 199, 239, 241, 255, 258, 261, 276, 283, 293, 310, 311, 320, 328, 333, 343, 348, 350, 351, 353, 354, 357, 359, 360, 367, 372, 378, 380, 382, 413, 414, 495, 496, 498, 501, 502, 503, 505, 506, 507, 510, 518, 521, 522, 523, 524, 525, 526, 528, 529, 574, 575, 607, 616, 628, 630, 631, 632, 636, 637, 638, 639, 640, 642, 649, 651, 656, 692, 693, 747, 750, 751, 814, 822, 823, 839, 841, 853, 873, 874, 876, 902, 947, 949, 950, 953, 956, 957, 967, 968, 969, 971, 972, 973, 977, 985, 993, 994, 995, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "alfr": 0, "sloan": 0, "posit": [0, 4, 6, 8, 11, 12, 16, 23, 24, 26, 64, 97, 118, 123, 152, 153, 165, 166, 176, 181, 182, 183, 185, 199, 204, 212, 218, 235, 238, 241, 245, 247, 248, 278, 288, 289, 293, 319, 327, 332, 340, 344, 345, 347, 352, 354, 359, 360, 371, 373, 374, 375, 377, 378, 379, 380, 381, 382, 385, 402, 403, 406, 410, 411, 413, 428, 431, 458, 462, 464, 468, 472, 473, 474, 489, 491, 493, 494, 495, 497, 499, 500, 501, 506, 509, 510, 512, 513, 514, 521, 525, 526, 527, 528, 556, 557, 558, 559, 560, 562, 563, 564, 570, 574, 575, 584, 595, 596, 607, 610, 611, 612, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 633, 636, 637, 638, 639, 641, 644, 645, 646, 647, 648, 651, 654, 662, 664, 666, 671, 673, 676, 677, 679, 680, 682, 684, 687, 690, 692, 693, 694, 698, 699, 701, 702, 703, 704, 705, 706, 707, 715, 717, 721, 729, 745, 746, 747, 750, 751, 752, 760, 761, 765, 766, 788, 805, 806, 807, 809, 811, 813, 815, 817, 818, 828, 829, 832, 838, 841, 844, 849, 853, 857, 858, 860, 861, 865, 866, 869, 870, 871, 873, 875, 882, 900, 902, 918, 920, 944, 945, 949, 951, 953, 954, 956, 957, 958, 960, 963, 968, 983, 985, 987, 994, 996, 997, 998, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "It": [0, 4, 7, 8, 9, 13, 16, 20, 24, 32, 34, 37, 50, 52, 55, 68, 73, 75, 77, 87, 90, 91, 96, 101, 104, 106, 107, 110, 112, 114, 121, 135, 142, 143, 144, 148, 149, 153, 154, 155, 161, 165, 169, 170, 178, 181, 185, 195, 198, 199, 201, 202, 208, 213, 215, 218, 233, 234, 236, 238, 239, 241, 244, 245, 255, 258, 264, 265, 266, 268, 269, 271, 278, 282, 283, 285, 287, 293, 303, 307, 311, 315, 319, 320, 321, 328, 332, 333, 334, 338, 340, 342, 343, 345, 347, 349, 350, 351, 353, 354, 357, 358, 359, 363, 364, 367, 371, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 383, 384, 385, 398, 401, 402, 405, 406, 407, 408, 409, 411, 412, 413, 416, 423, 426, 431, 432, 433, 438, 442, 449, 451, 460, 472, 479, 488, 497, 499, 500, 502, 504, 505, 513, 514, 517, 518, 521, 522, 523, 524, 525, 526, 528, 529, 530, 531, 553, 560, 566, 570, 571, 572, 575, 578, 579, 583, 584, 586, 587, 591, 594, 595, 596, 597, 605, 606, 607, 610, 611, 614, 616, 617, 618, 619, 622, 624, 625, 626, 627, 630, 631, 632, 634, 635, 636, 638, 640, 641, 642, 645, 646, 647, 648, 651, 653, 655, 656, 657, 659, 660, 661, 662, 663, 664, 666, 668, 672, 673, 674, 680, 686, 697, 705, 706, 710, 721, 722, 725, 728, 744, 746, 751, 762, 764, 765, 766, 768, 774, 775, 776, 784, 786, 789, 792, 801, 802, 807, 808, 809, 811, 814, 815, 816, 817, 821, 822, 823, 827, 828, 829, 833, 834, 835, 839, 842, 844, 854, 857, 858, 862, 863, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 878, 889, 902, 910, 911, 921, 924, 927, 929, 930, 931, 932, 933, 934, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 963, 964, 966, 967, 968, 969, 972, 977, 978, 984, 985, 986, 987, 993, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "provid": [0, 5, 8, 11, 13, 23, 26, 28, 32, 34, 39, 52, 57, 76, 87, 103, 108, 109, 119, 121, 137, 143, 153, 154, 160, 167, 169, 170, 173, 182, 185, 190, 202, 206, 209, 210, 215, 229, 238, 239, 240, 244, 268, 271, 275, 278, 282, 287, 288, 290, 292, 305, 311, 312, 315, 319, 320, 323, 324, 327, 328, 332, 334, 337, 339, 340, 341, 343, 344, 345, 346, 347, 348, 351, 353, 354, 357, 358, 359, 362, 363, 364, 367, 369, 370, 372, 373, 374, 375, 377, 378, 380, 381, 382, 383, 384, 385, 387, 394, 401, 404, 406, 407, 408, 410, 411, 413, 414, 416, 423, 424, 429, 433, 434, 435, 436, 437, 438, 439, 440, 446, 447, 448, 457, 458, 460, 462, 465, 496, 497, 498, 499, 502, 504, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 545, 546, 552, 554, 555, 557, 558, 565, 569, 574, 575, 591, 596, 597, 598, 599, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 654, 658, 663, 675, 698, 704, 705, 727, 737, 741, 751, 755, 757, 761, 762, 763, 764, 765, 766, 767, 769, 770, 771, 772, 774, 775, 776, 780, 781, 782, 783, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 822, 823, 825, 828, 830, 831, 832, 835, 836, 837, 840, 842, 844, 845, 860, 861, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 880, 891, 896, 910, 912, 929, 930, 931, 942, 943, 945, 948, 949, 950, 952, 953, 954, 956, 957, 958, 959, 960, 961, 963, 966, 967, 968, 969, 970, 972, 973, 976, 977, 978, 982, 985, 987, 990, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "2012": [0, 76, 371, 380, 519, 520, 527, 603, 706, 942, 946, 953, 971, 993], "fulltime": [0, 3, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 17, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 152, 153, 154, 155, 156, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 320, 321, 323, 324, 325, 326, 327, 328, 332, 333, 334, 339, 340, 342, 343, 344, 345, 346, 347, 349, 350, 351, 353, 357, 359, 360, 364, 369, 370, 371, 372, 373, 375, 376, 378, 380, 381, 384, 401, 405, 407, 408, 409, 410, 411, 414, 416, 419, 421, 422, 423, 425, 426, 427, 428, 429, 431, 432, 436, 460, 463, 465, 483, 487, 498, 500, 502, 504, 511, 526, 531, 532, 533, 534, 554, 574, 583, 591, 592, 593, 594, 598, 603, 604, 607, 610, 614, 616, 618, 624, 626, 628, 630, 631, 637, 640, 641, 642, 649, 650, 654, 656, 658, 665, 705, 708, 709, 711, 753, 757, 760, 761, 762, 764, 765, 766, 767, 769, 771, 776, 777, 778, 781, 783, 786, 787, 788, 789, 790, 791, 793, 795, 800, 801, 802, 803, 804, 805, 806, 813, 815, 816, 817, 821, 822, 823, 824, 825, 826, 827, 829, 830, 832, 835, 838, 840, 844, 849, 857, 858, 862, 863, 867, 870, 871, 879, 904, 919, 942, 943, 945, 946, 949, 950, 952, 953, 954, 955, 956, 957, 958, 960, 961, 963, 965, 966, 967, 968, 969, 972, 977, 978, 983, 985, 986, 987, 993, 995, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "host": [0, 107, 293, 319, 340, 345, 349, 353, 354, 858, 921, 987, 1009], "other": [0, 4, 8, 12, 13, 23, 26, 28, 29, 31, 34, 37, 41, 49, 54, 63, 65, 67, 68, 80, 89, 90, 92, 94, 104, 106, 107, 110, 111, 115, 117, 123, 130, 148, 149, 150, 152, 153, 154, 155, 158, 160, 174, 181, 185, 199, 201, 202, 203, 205, 208, 209, 210, 212, 214, 215, 218, 219, 226, 229, 233, 235, 238, 239, 240, 247, 248, 255, 263, 264, 265, 277, 278, 282, 283, 285, 287, 288, 290, 294, 296, 307, 311, 314, 317, 319, 320, 323, 327, 328, 332, 337, 338, 340, 341, 342, 343, 345, 347, 349, 350, 351, 353, 354, 358, 359, 360, 363, 364, 367, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 401, 407, 408, 410, 411, 412, 413, 414, 416, 421, 428, 429, 433, 434, 435, 436, 437, 438, 439, 440, 446, 447, 448, 452, 460, 461, 467, 497, 498, 499, 502, 505, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 545, 546, 552, 553, 554, 555, 558, 561, 566, 574, 575, 576, 577, 584, 591, 592, 594, 599, 603, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 651, 654, 656, 660, 663, 668, 682, 726, 737, 741, 748, 755, 762, 763, 764, 765, 766, 767, 768, 769, 771, 776, 779, 780, 781, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 810, 812, 815, 816, 820, 822, 823, 825, 826, 828, 830, 831, 832, 834, 835, 837, 838, 839, 841, 842, 843, 844, 845, 846, 853, 860, 861, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 896, 910, 942, 943, 945, 946, 947, 949, 950, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 963, 966, 967, 968, 969, 973, 974, 975, 976, 977, 978, 982, 985, 986, 989, 994, 996, 997, 999, 1000, 1001, 1002, 1006, 1007, 1008, 1009, 1010], "event": [0, 4, 16, 181, 199, 241, 371, 373, 552, 553, 600, 800, 890, 949, 954, 955, 972, 977, 999], "pari": [0, 342, 374, 430, 727, 833, 964, 1007], "saclai": 0, "center": [0, 4, 7, 8, 9, 14, 23, 25, 31, 32, 34, 35, 37, 39, 40, 42, 45, 46, 47, 50, 52, 53, 56, 57, 58, 60, 61, 76, 84, 92, 93, 96, 112, 113, 114, 115, 135, 149, 154, 162, 173, 175, 181, 182, 192, 193, 204, 205, 208, 209, 218, 224, 227, 228, 233, 239, 249, 263, 266, 268, 274, 278, 280, 281, 291, 298, 305, 307, 308, 309, 314, 320, 321, 340, 341, 342, 350, 372, 373, 375, 376, 378, 379, 380, 386, 404, 406, 407, 410, 411, 412, 413, 416, 418, 423, 424, 425, 426, 427, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 446, 447, 448, 449, 465, 476, 488, 498, 499, 505, 508, 514, 570, 573, 574, 575, 596, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 624, 625, 626, 627, 628, 629, 630, 631, 632, 635, 636, 637, 638, 639, 640, 642, 654, 658, 660, 760, 830, 831, 834, 843, 845, 855, 856, 865, 866, 947, 949, 950, 952, 960, 994, 996, 997, 998, 999, 1000, 1001, 1004, 1005, 1006, 1007, 1010], "scienc": [0, 35, 75, 135, 145, 255, 339, 342, 357, 373, 404, 418, 502, 504, 511, 652, 653, 657, 812, 943, 945, 949, 950, 953, 956, 965, 973, 977, 981, 1001], "one": [0, 4, 8, 9, 10, 13, 15, 16, 17, 24, 25, 26, 30, 31, 32, 34, 37, 44, 50, 52, 54, 55, 57, 58, 61, 63, 67, 76, 82, 83, 84, 87, 90, 92, 96, 106, 107, 112, 114, 117, 121, 124, 134, 135, 137, 144, 145, 148, 152, 153, 154, 155, 156, 158, 160, 161, 165, 170, 171, 173, 174, 175, 177, 181, 183, 190, 191, 196, 199, 203, 208, 215, 216, 218, 226, 229, 234, 235, 236, 238, 239, 241, 242, 245, 246, 247, 248, 255, 257, 258, 263, 276, 279, 280, 283, 284, 287, 289, 290, 291, 299, 306, 307, 316, 319, 320, 321, 323, 327, 328, 332, 333, 334, 339, 340, 341, 342, 344, 345, 347, 349, 350, 351, 352, 353, 354, 357, 359, 360, 362, 363, 364, 367, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 383, 384, 408, 409, 410, 411, 413, 414, 415, 416, 417, 419, 420, 421, 424, 426, 428, 433, 438, 451, 452, 454, 455, 456, 457, 458, 459, 460, 464, 465, 466, 467, 468, 469, 472, 473, 474, 476, 478, 498, 503, 504, 507, 511, 515, 521, 522, 523, 524, 525, 526, 528, 529, 530, 531, 533, 545, 547, 548, 552, 553, 554, 555, 574, 575, 579, 580, 584, 591, 594, 596, 597, 598, 599, 607, 611, 612, 613, 614, 618, 621, 622, 623, 625, 630, 632, 633, 635, 637, 638, 639, 640, 642, 644, 652, 656, 659, 663, 667, 673, 684, 692, 693, 697, 701, 713, 714, 717, 726, 734, 737, 741, 742, 743, 744, 746, 747, 750, 751, 753, 754, 755, 756, 759, 760, 761, 762, 765, 766, 768, 769, 770, 772, 774, 776, 780, 781, 784, 786, 788, 789, 791, 792, 793, 794, 795, 797, 798, 805, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 817, 821, 825, 828, 829, 830, 832, 833, 835, 836, 837, 838, 839, 844, 845, 846, 849, 851, 865, 867, 868, 869, 870, 871, 873, 874, 875, 876, 881, 891, 894, 904, 911, 924, 942, 943, 945, 947, 948, 950, 951, 952, 954, 955, 956, 957, 958, 959, 960, 961, 963, 964, 967, 968, 969, 970, 971, 972, 977, 978, 982, 984, 985, 986, 987, 990, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "2014": [0, 49, 339, 378, 380, 383, 494, 571, 572, 586, 587, 622, 656, 822, 823, 901, 902, 950, 957, 977, 996], "2015": [0, 154, 339, 672, 685, 686, 687, 822, 823, 953, 960, 977, 997, 998], "50": [0, 4, 7, 10, 13, 15, 16, 23, 30, 31, 35, 47, 49, 56, 57, 62, 63, 66, 67, 79, 85, 87, 90, 96, 101, 104, 107, 114, 119, 120, 135, 138, 140, 141, 142, 143, 152, 153, 154, 161, 165, 176, 181, 184, 188, 189, 193, 195, 197, 199, 201, 205, 206, 211, 212, 214, 222, 233, 238, 240, 241, 251, 258, 276, 278, 282, 289, 291, 297, 299, 301, 305, 314, 320, 340, 342, 345, 350, 377, 380, 381, 382, 385, 406, 437, 443, 444, 464, 468, 487, 497, 503, 508, 517, 518, 533, 557, 558, 570, 572, 573, 579, 581, 622, 623, 630, 631, 632, 634, 640, 641, 642, 656, 677, 755, 762, 776, 794, 814, 865, 874, 948, 949, 953, 954, 956, 959, 963, 976, 993, 1010], "2018": [0, 181, 199, 381, 414, 942, 953, 977, 1000, 1001], "nyu": [0, 163, 814], "moor": [0, 698, 953, 977, 1010], "environ": [0, 12, 25, 67, 68, 106, 108, 109, 117, 118, 121, 124, 132, 142, 153, 154, 155, 162, 209, 210, 211, 215, 219, 220, 221, 222, 229, 236, 238, 239, 245, 250, 276, 284, 288, 289, 291, 292, 294, 298, 327, 332, 340, 342, 343, 345, 347, 351, 353, 357, 363, 367, 369, 372, 374, 463, 973, 977, 1000, 1001, 1010], "student": [0, 89, 238, 950, 973, 977], "t\u00e9l\u00e9com": 0, "paristech": [0, 23, 24, 39, 208], "rv": [0, 242, 278, 766, 774, 776, 942, 993, 994, 997, 998, 999, 1000, 1001], "thierri": [0, 224, 226, 977, 999, 1000, 1007], "guillemot": [0, 224, 226, 999, 1000], "labex": 0, "digicosm": 0, "goix": [0, 997, 999, 1000, 1001, 1002], "mathurin": [0, 1004, 1006, 1007], "massia": [0, 1004, 1006, 1007], "2019": [0, 154, 343, 373, 416, 426, 656, 950, 960, 963, 1001, 1002, 1003], "dure": [0, 4, 5, 12, 13, 47, 52, 55, 68, 71, 80, 92, 105, 111, 112, 118, 132, 137, 142, 153, 154, 156, 170, 182, 189, 236, 240, 258, 289, 290, 311, 332, 334, 343, 345, 347, 350, 359, 360, 373, 374, 378, 380, 381, 383, 384, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 423, 428, 429, 433, 434, 435, 436, 437, 438, 439, 440, 446, 447, 448, 449, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 545, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 574, 575, 577, 578, 579, 581, 583, 584, 586, 587, 589, 591, 592, 593, 594, 596, 599, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 652, 653, 654, 655, 656, 664, 752, 760, 761, 762, 765, 766, 776, 786, 787, 788, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 821, 822, 823, 824, 825, 828, 829, 830, 831, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 850, 856, 857, 858, 860, 861, 862, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 942, 943, 945, 949, 950, 956, 963, 965, 969, 982, 987, 989, 993, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010], "phd": [0, 373, 380, 973, 977], "chan": [0, 803, 845], "zuckerberg": 0, "initi": [0, 7, 12, 17, 33, 39, 40, 42, 54, 55, 57, 60, 61, 76, 115, 122, 123, 124, 138, 143, 150, 153, 161, 174, 196, 201, 202, 206, 223, 225, 226, 238, 258, 289, 298, 307, 320, 328, 333, 340, 345, 347, 353, 354, 357, 359, 373, 378, 380, 382, 383, 385, 406, 407, 411, 412, 413, 414, 415, 416, 417, 423, 424, 425, 426, 442, 476, 479, 495, 496, 497, 501, 502, 504, 507, 509, 510, 511, 512, 517, 518, 523, 524, 557, 571, 572, 574, 575, 583, 584, 591, 604, 609, 610, 611, 612, 616, 617, 622, 624, 625, 626, 627, 630, 631, 632, 633, 635, 640, 641, 642, 644, 645, 648, 654, 655, 656, 658, 659, 760, 761, 795, 814, 821, 822, 823, 861, 888, 901, 902, 922, 927, 928, 945, 949, 950, 952, 957, 958, 959, 967, 969, 972, 974, 984, 986, 993, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "were": [0, 4, 30, 66, 67, 70, 75, 76, 107, 111, 114, 132, 135, 142, 149, 181, 182, 185, 209, 218, 247, 249, 275, 276, 283, 288, 289, 291, 292, 293, 294, 299, 311, 319, 321, 327, 328, 339, 340, 342, 345, 346, 349, 357, 359, 364, 370, 374, 380, 381, 428, 431, 432, 460, 525, 526, 552, 555, 566, 765, 766, 781, 789, 862, 863, 942, 945, 953, 954, 969, 986, 987, 993, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010], "through": [0, 7, 13, 32, 106, 135, 145, 153, 185, 201, 213, 215, 233, 238, 241, 263, 282, 283, 305, 312, 321, 327, 342, 343, 345, 347, 352, 354, 359, 360, 363, 364, 373, 376, 378, 380, 382, 383, 390, 396, 410, 428, 431, 436, 499, 521, 522, 525, 528, 529, 530, 545, 557, 558, 561, 611, 615, 617, 619, 622, 623, 625, 627, 629, 632, 640, 641, 652, 655, 684, 768, 784, 841, 853, 857, 858, 873, 874, 875, 876, 908, 911, 942, 943, 950, 953, 955, 956, 957, 959, 961, 963, 967, 968, 969, 976, 977, 978, 985, 987, 993, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010], "program": [0, 47, 135, 320, 328, 333, 334, 342, 343, 345, 347, 351, 357, 472, 599, 634, 855, 856, 949, 968, 969, 972, 973, 993, 995], "immanuel": [0, 993, 994, 998], "bayer": [0, 993, 994, 998], "kemal": [0, 20, 21, 995, 996], "eren": [0, 20, 21, 995, 996], "tr\u00e9segni": [0, 995], "hamzeh": [0, 996, 997], "alsalhi": [0, 996, 997], "issam": [0, 273, 999], "laradji": [0, 273, 999], "maheshakya": [0, 996, 997, 998], "wijewardena": [0, 996, 997, 998], "xue": [0, 997, 998, 999, 1001, 1002, 1005], "nelson": [0, 999, 1000, 1005], "yenchen": [0, 999], "lin": [0, 498, 622, 968, 998, 999, 1000, 1001], "neurodebian": 0, "debian": [0, 332, 343, 351], "packag": [0, 43, 50, 148, 215, 258, 333, 338, 339, 342, 343, 345, 346, 347, 349, 351, 354, 357, 359, 363, 372, 375, 380, 381, 416, 442, 610, 611, 943, 949, 952, 956, 963, 969, 977, 981, 993, 999, 1001, 1002, 1003], "dr": [0, 135, 342, 373, 1007], "jame": [0, 342, 377, 795, 954, 993, 994, 995, 996, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1009, 1010], "haxbi": 0, "dartmouth": 0, "colleg": [0, 152], "organ": [0, 11, 13, 66, 75, 319, 339, 344, 345, 360, 813, 972], "kindli": 0, "axa": 0, "some": [0, 3, 4, 5, 8, 9, 13, 19, 23, 24, 26, 34, 41, 47, 50, 52, 53, 55, 59, 64, 67, 70, 73, 75, 76, 80, 87, 102, 103, 114, 117, 118, 121, 122, 131, 137, 139, 142, 143, 144, 145, 146, 148, 149, 150, 153, 154, 155, 156, 158, 160, 162, 164, 165, 169, 170, 171, 175, 176, 181, 182, 185, 189, 190, 195, 198, 199, 201, 203, 208, 212, 215, 218, 225, 226, 227, 232, 233, 238, 239, 240, 241, 244, 246, 255, 257, 261, 264, 269, 274, 275, 278, 283, 288, 289, 290, 291, 292, 293, 294, 303, 304, 306, 307, 315, 317, 319, 320, 321, 327, 328, 332, 333, 334, 338, 339, 340, 342, 343, 345, 346, 347, 349, 350, 351, 352, 353, 354, 357, 358, 359, 363, 364, 367, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 396, 401, 407, 408, 411, 413, 415, 417, 423, 427, 429, 432, 433, 434, 435, 436, 437, 438, 439, 440, 446, 447, 448, 460, 463, 472, 473, 479, 487, 488, 497, 498, 500, 502, 505, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 538, 545, 546, 552, 554, 555, 558, 570, 573, 574, 575, 596, 597, 599, 603, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 653, 654, 656, 657, 661, 662, 664, 665, 666, 671, 672, 679, 684, 689, 690, 701, 702, 703, 709, 717, 719, 720, 726, 745, 747, 750, 751, 752, 757, 760, 763, 764, 769, 771, 780, 781, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 810, 812, 815, 816, 822, 823, 825, 828, 830, 831, 832, 837, 844, 845, 860, 861, 863, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 885, 886, 910, 921, 942, 943, 945, 948, 949, 950, 952, 953, 954, 955, 956, 957, 959, 960, 963, 966, 967, 968, 969, 971, 972, 973, 976, 977, 978, 983, 985, 986, 987, 990, 993, 994, 995, 996, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "particip": [0, 344, 345, 360, 977], "could": [0, 4, 9, 13, 14, 26, 34, 39, 50, 67, 68, 87, 90, 102, 103, 111, 114, 132, 137, 142, 149, 152, 153, 154, 181, 182, 185, 190, 199, 205, 213, 214, 215, 232, 238, 257, 266, 269, 290, 303, 304, 319, 323, 334, 345, 351, 353, 359, 363, 367, 371, 377, 380, 381, 385, 438, 497, 502, 571, 572, 593, 635, 764, 769, 771, 942, 943, 949, 950, 960, 961, 963, 968, 973, 986, 990, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010], "attend": 0, "psf": [0, 345], "dataia": 0, "possibl": [0, 4, 13, 17, 25, 34, 46, 52, 67, 73, 87, 104, 107, 118, 137, 153, 154, 155, 156, 181, 198, 199, 213, 215, 238, 239, 240, 241, 243, 244, 245, 247, 248, 257, 287, 307, 315, 319, 320, 328, 332, 333, 334, 338, 339, 340, 343, 345, 346, 347, 348, 349, 351, 353, 357, 358, 359, 363, 367, 370, 371, 372, 373, 374, 376, 377, 378, 380, 381, 383, 385, 387, 396, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 426, 429, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 446, 447, 448, 449, 460, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 545, 546, 547, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 574, 575, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 596, 597, 599, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 651, 652, 653, 654, 655, 656, 673, 685, 686, 687, 691, 705, 719, 741, 746, 748, 751, 760, 761, 762, 764, 765, 766, 768, 774, 775, 776, 780, 781, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 821, 822, 823, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 857, 858, 860, 861, 862, 863, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 883, 885, 886, 889, 894, 921, 924, 927, 942, 945, 948, 949, 950, 952, 953, 954, 955, 956, 961, 963, 968, 969, 973, 977, 978, 985, 986, 987, 993, 994, 996, 997, 998, 999, 1000, 1001, 1003, 1004, 1006, 1007, 1008, 1009], "tinyclu": 0, "french": [0, 199, 284], "associ": [0, 11, 23, 24, 75, 101, 137, 152, 153, 185, 227, 284, 296, 298, 319, 353, 373, 375, 377, 378, 380, 381, 391, 410, 413, 433, 434, 435, 436, 437, 438, 439, 440, 457, 458, 459, 488, 521, 525, 528, 569, 570, 594, 609, 622, 623, 630, 632, 638, 639, 640, 653, 659, 663, 694, 702, 788, 808, 816, 830, 842, 854, 862, 871, 873, 875, 891, 952, 953, 956, 963, 966, 977, 986, 993, 1005, 1009], "fond": [0, 977], "de": [0, 12, 23, 24, 25, 26, 70, 105, 121, 137, 138, 140, 141, 142, 143, 144, 146, 172, 213, 214, 284, 298, 315, 342, 599, 652, 727, 949, 950, 973, 994, 995, 996, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011], "recherch": 0, "scientifiqu": 0, "granada": 0, "interest": [0, 4, 6, 13, 39, 41, 47, 52, 59, 63, 68, 101, 109, 114, 121, 132, 135, 142, 148, 154, 155, 170, 181, 182, 183, 199, 202, 213, 232, 235, 238, 239, 241, 247, 255, 307, 315, 320, 327, 332, 340, 342, 345, 350, 351, 353, 357, 360, 373, 375, 378, 381, 383, 457, 458, 464, 468, 474, 610, 611, 865, 943, 949, 950, 953, 958, 959, 960, 973, 977, 983, 985, 986, 993, 1010], "our": [0, 4, 5, 7, 11, 12, 13, 39, 50, 53, 66, 67, 75, 76, 80, 87, 88, 101, 102, 108, 111, 112, 114, 115, 130, 135, 137, 142, 144, 150, 152, 153, 154, 155, 156, 181, 185, 199, 203, 205, 215, 232, 238, 241, 244, 245, 261, 275, 278, 284, 288, 290, 301, 304, 310, 312, 315, 319, 320, 321, 328, 333, 343, 344, 349, 350, 353, 357, 358, 359, 360, 364, 373, 377, 380, 381, 383, 384, 408, 414, 527, 608, 656, 672, 684, 689, 701, 719, 807, 808, 809, 811, 813, 815, 816, 817, 942, 943, 949, 950, 953, 959, 963, 966, 967, 968, 973, 976, 977, 978, 985, 986, 987, 1000, 1001, 1003, 1004, 1007, 1008, 1010], "vianumfocu": 0, "all": [0, 4, 5, 7, 8, 11, 14, 16, 19, 23, 24, 26, 32, 35, 36, 37, 39, 40, 45, 49, 50, 51, 52, 57, 61, 71, 77, 84, 87, 89, 90, 99, 106, 107, 109, 110, 114, 123, 124, 135, 142, 143, 145, 150, 152, 153, 154, 156, 160, 165, 167, 173, 174, 175, 181, 182, 183, 184, 185, 190, 192, 196, 198, 199, 201, 202, 208, 214, 215, 218, 219, 222, 225, 227, 229, 236, 239, 240, 241, 242, 244, 245, 246, 248, 250, 255, 258, 261, 263, 275, 278, 279, 283, 287, 288, 289, 290, 292, 293, 294, 296, 298, 299, 300, 304, 307, 311, 312, 315, 316, 319, 320, 321, 324, 327, 328, 332, 333, 334, 338, 340, 341, 342, 343, 345, 347, 349, 350, 351, 353, 354, 357, 358, 359, 360, 364, 369, 370, 371, 372, 373, 374, 377, 378, 380, 381, 382, 383, 384, 385, 387, 388, 390, 391, 392, 393, 395, 396, 397, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 467, 472, 473, 479, 491, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 547, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 570, 571, 572, 574, 575, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 651, 652, 653, 654, 655, 656, 657, 658, 661, 662, 663, 664, 665, 666, 669, 673, 677, 678, 679, 680, 681, 682, 684, 685, 686, 689, 691, 692, 693, 695, 696, 698, 699, 700, 701, 705, 708, 709, 711, 713, 714, 716, 719, 724, 732, 737, 741, 744, 745, 746, 747, 748, 749, 750, 751, 753, 754, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 768, 769, 771, 772, 774, 776, 779, 780, 781, 782, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 857, 858, 860, 861, 862, 863, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 883, 885, 886, 887, 891, 893, 894, 895, 896, 907, 910, 911, 916, 921, 928, 937, 942, 943, 945, 946, 947, 949, 950, 951, 952, 953, 954, 955, 956, 958, 960, 961, 963, 966, 967, 968, 969, 972, 973, 974, 977, 978, 979, 981, 982, 984, 985, 986, 987, 991, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007], "handl": [0, 4, 9, 67, 107, 111, 117, 121, 158, 165, 214, 215, 240, 245, 247, 255, 257, 258, 265, 284, 287, 294, 319, 321, 327, 332, 337, 339, 343, 345, 346, 347, 354, 357, 359, 364, 380, 381, 383, 460, 508, 541, 545, 546, 549, 550, 552, 553, 555, 574, 599, 610, 611, 616, 622, 623, 624, 625, 626, 632, 639, 640, 642, 645, 684, 751, 829, 838, 839, 865, 866, 870, 877, 903, 910, 913, 950, 953, 954, 955, 956, 959, 961, 968, 969, 972, 973, 977, 989, 993, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "non": [0, 3, 5, 6, 9, 10, 11, 13, 14, 23, 24, 31, 32, 34, 46, 54, 59, 67, 71, 75, 77, 88, 89, 90, 92, 103, 111, 118, 119, 121, 128, 131, 132, 134, 141, 143, 149, 150, 152, 153, 154, 155, 156, 159, 160, 165, 167, 171, 174, 175, 177, 180, 182, 183, 187, 191, 192, 194, 195, 196, 197, 199, 204, 205, 209, 210, 211, 212, 214, 218, 224, 226, 228, 230, 231, 232, 233, 238, 247, 255, 258, 262, 264, 271, 273, 276, 278, 280, 281, 282, 283, 288, 289, 290, 291, 293, 294, 300, 301, 302, 304, 307, 309, 310, 311, 312, 315, 316, 317, 319, 320, 321, 327, 328, 332, 333, 337, 340, 341, 345, 346, 347, 350, 351, 353, 354, 357, 359, 360, 371, 372, 373, 374, 377, 379, 380, 381, 382, 383, 385, 401, 405, 409, 410, 414, 416, 420, 426, 427, 428, 429, 431, 432, 452, 460, 461, 467, 468, 472, 490, 496, 499, 500, 502, 504, 508, 511, 513, 515, 516, 517, 521, 522, 523, 524, 525, 526, 528, 529, 530, 536, 552, 553, 555, 556, 559, 560, 561, 562, 563, 564, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 594, 595, 599, 602, 607, 614, 616, 621, 622, 623, 624, 628, 629, 630, 631, 632, 633, 636, 640, 641, 642, 649, 650, 651, 652, 653, 654, 655, 656, 658, 662, 663, 666, 670, 671, 676, 679, 681, 683, 684, 689, 690, 691, 698, 700, 702, 703, 708, 709, 710, 711, 712, 713, 714, 715, 716, 718, 719, 721, 722, 745, 748, 751, 752, 753, 754, 757, 760, 761, 762, 763, 767, 769, 770, 771, 772, 774, 780, 787, 791, 794, 813, 815, 816, 817, 820, 825, 826, 828, 829, 830, 833, 837, 838, 839, 840, 841, 842, 844, 845, 852, 853, 854, 855, 856, 858, 863, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 884, 885, 886, 900, 902, 906, 908, 916, 942, 943, 944, 945, 946, 950, 951, 952, 953, 954, 955, 956, 957, 959, 960, 961, 964, 965, 966, 967, 968, 969, 973, 974, 985, 986, 987, 988, 989, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "profit": [0, 1010], "which": [0, 4, 7, 10, 12, 13, 14, 15, 16, 17, 19, 20, 21, 24, 25, 26, 32, 34, 36, 37, 40, 41, 43, 46, 50, 52, 53, 54, 55, 62, 64, 66, 67, 68, 71, 73, 75, 76, 80, 83, 85, 89, 91, 92, 97, 101, 104, 105, 106, 107, 111, 113, 114, 117, 119, 120, 121, 122, 123, 124, 126, 130, 132, 134, 135, 137, 138, 142, 143, 144, 148, 149, 152, 153, 154, 156, 158, 160, 161, 165, 170, 174, 181, 182, 183, 185, 187, 189, 195, 197, 198, 199, 201, 202, 203, 205, 208, 209, 212, 213, 214, 215, 216, 218, 219, 224, 225, 229, 230, 232, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 252, 253, 255, 257, 258, 263, 264, 265, 274, 278, 280, 281, 282, 283, 284, 285, 287, 289, 290, 291, 292, 293, 294, 296, 298, 299, 300, 307, 311, 315, 317, 319, 320, 321, 323, 327, 328, 332, 333, 334, 337, 339, 340, 342, 343, 345, 346, 347, 349, 350, 351, 352, 353, 354, 357, 358, 359, 360, 362, 363, 364, 367, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 390, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 423, 424, 426, 427, 428, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 448, 451, 487, 495, 496, 497, 498, 501, 502, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 536, 537, 538, 543, 546, 547, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 571, 572, 574, 575, 576, 577, 578, 579, 581, 583, 586, 591, 592, 593, 594, 596, 597, 598, 604, 606, 607, 608, 611, 612, 613, 615, 616, 617, 618, 619, 620, 622, 623, 625, 627, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 644, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 671, 673, 680, 681, 683, 684, 686, 688, 689, 697, 698, 699, 700, 705, 706, 709, 719, 721, 741, 742, 743, 744, 745, 746, 752, 760, 761, 762, 765, 766, 767, 768, 770, 772, 776, 780, 781, 782, 783, 784, 785, 786, 787, 789, 790, 792, 793, 794, 795, 796, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 813, 815, 816, 817, 818, 819, 822, 825, 829, 832, 836, 838, 839, 840, 843, 844, 845, 846, 847, 849, 857, 858, 860, 861, 862, 865, 867, 870, 871, 873, 874, 875, 876, 877, 881, 894, 897, 901, 902, 904, 909, 910, 911, 913, 921, 922, 925, 928, 934, 937, 942, 943, 944, 945, 946, 947, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 963, 965, 966, 967, 968, 969, 971, 972, 973, 977, 978, 980, 982, 985, 986, 987, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "manag": [0, 80, 222, 331, 339, 343, 346, 347, 349, 353, 357, 359, 360, 380, 414, 432, 590, 863, 921, 947, 969, 972, 973, 977, 987, 989, 1006, 1009], "board": 0, "scipi": [0, 6, 14, 17, 19, 38, 43, 44, 50, 51, 73, 74, 77, 88, 90, 94, 113, 137, 153, 156, 167, 171, 183, 225, 229, 230, 235, 238, 246, 250, 258, 263, 268, 276, 288, 289, 294, 296, 297, 332, 339, 340, 343, 345, 347, 351, 354, 357, 358, 359, 363, 366, 372, 373, 378, 381, 414, 415, 416, 417, 421, 426, 427, 460, 467, 472, 496, 498, 499, 505, 508, 545, 546, 549, 550, 552, 553, 574, 575, 612, 613, 617, 621, 622, 623, 627, 630, 631, 632, 633, 634, 636, 638, 640, 641, 642, 644, 648, 651, 655, 656, 659, 723, 726, 741, 742, 743, 744, 755, 756, 766, 774, 776, 791, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 822, 828, 837, 838, 843, 844, 845, 848, 852, 855, 856, 865, 867, 868, 870, 871, 899, 903, 904, 908, 924, 925, 927, 928, 929, 930, 931, 932, 933, 934, 939, 942, 943, 949, 951, 954, 956, 957, 963, 967, 968, 971, 973, 981, 983, 986, 987, 995, 997, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009], "mission": [0, 320, 977], "foster": [0, 1001], "comput": [0, 4, 6, 7, 11, 13, 14, 20, 25, 34, 36, 38, 39, 43, 49, 51, 54, 55, 57, 58, 66, 68, 74, 75, 76, 77, 88, 96, 104, 108, 109, 112, 113, 114, 115, 116, 134, 135, 137, 142, 144, 145, 148, 153, 154, 155, 156, 158, 161, 162, 165, 166, 167, 168, 169, 170, 181, 183, 185, 189, 195, 198, 199, 202, 205, 209, 211, 212, 214, 218, 219, 221, 234, 236, 238, 239, 240, 241, 245, 247, 249, 258, 260, 262, 264, 265, 267, 268, 271, 278, 287, 291, 292, 297, 299, 307, 311, 315, 319, 320, 321, 327, 333, 334, 339, 340, 342, 345, 350, 351, 352, 354, 357, 358, 359, 362, 363, 367, 368, 369, 370, 371, 375, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 401, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 416, 421, 423, 425, 426, 427, 429, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 480, 495, 496, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 538, 546, 549, 550, 553, 554, 555, 557, 558, 563, 564, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 579, 580, 583, 584, 585, 586, 587, 588, 589, 591, 593, 594, 595, 596, 597, 598, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 677, 679, 680, 681, 682, 683, 684, 688, 689, 690, 692, 693, 694, 697, 699, 701, 702, 703, 705, 706, 717, 718, 719, 720, 721, 722, 723, 724, 726, 727, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 749, 750, 751, 752, 755, 756, 757, 759, 760, 761, 762, 765, 766, 768, 776, 784, 786, 787, 788, 789, 790, 792, 793, 794, 795, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 830, 831, 834, 835, 840, 841, 842, 843, 844, 845, 849, 850, 852, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 867, 870, 872, 873, 874, 875, 876, 899, 900, 901, 902, 918, 919, 926, 928, 934, 942, 945, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 961, 963, 965, 966, 967, 968, 969, 972, 973, 977, 982, 983, 986, 987, 989, 990, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "particular": [0, 4, 11, 14, 34, 36, 37, 57, 67, 73, 85, 92, 95, 111, 114, 117, 141, 148, 153, 154, 181, 183, 189, 213, 235, 239, 241, 247, 258, 267, 271, 278, 287, 288, 291, 320, 321, 328, 332, 333, 339, 340, 343, 344, 345, 347, 349, 350, 351, 353, 354, 358, 359, 363, 373, 374, 377, 378, 380, 381, 382, 383, 410, 433, 437, 460, 508, 527, 573, 617, 622, 627, 636, 638, 648, 651, 676, 691, 748, 797, 812, 884, 886, 943, 945, 947, 949, 953, 956, 957, 958, 959, 961, 963, 973, 977, 986, 993, 996, 1000, 1001, 1002, 1004, 1006, 1007, 1008, 1010], "As": [0, 4, 7, 20, 24, 26, 28, 37, 40, 50, 52, 54, 55, 63, 77, 80, 92, 101, 102, 108, 111, 112, 113, 115, 120, 130, 137, 142, 149, 153, 155, 156, 158, 160, 163, 165, 170, 172, 181, 185, 189, 199, 206, 215, 227, 233, 235, 236, 238, 239, 241, 251, 257, 263, 279, 290, 299, 307, 320, 321, 323, 325, 326, 328, 332, 333, 340, 343, 344, 345, 347, 349, 350, 357, 358, 359, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 410, 457, 518, 526, 530, 583, 596, 619, 620, 636, 638, 651, 698, 721, 727, 807, 808, 809, 811, 813, 844, 942, 947, 949, 950, 952, 953, 954, 956, 960, 963, 967, 968, 969, 972, 973, 977, 978, 982, 985, 987, 993, 999, 1004, 1009], "fiscal": 0, "home": [0, 12, 103, 121, 141, 143, 145, 146, 173, 190, 225, 233, 276, 292, 312, 324, 340, 343, 353, 363, 372, 450, 463, 643, 977], "ensur": [0, 20, 38, 54, 77, 85, 101, 107, 108, 156, 181, 202, 233, 241, 275, 327, 328, 332, 333, 345, 347, 349, 350, 351, 360, 363, 364, 371, 373, 374, 377, 385, 433, 497, 498, 505, 575, 591, 660, 669, 745, 751, 752, 786, 858, 885, 886, 902, 908, 919, 949, 950, 953, 963, 969, 982, 995, 997, 998, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "monei": [0, 199, 977], "when": [0, 4, 9, 10, 11, 13, 20, 23, 24, 25, 26, 32, 36, 37, 40, 53, 57, 64, 66, 67, 68, 73, 75, 76, 80, 87, 90, 91, 92, 94, 104, 107, 110, 111, 112, 114, 117, 121, 122, 123, 132, 137, 148, 152, 153, 154, 155, 156, 160, 161, 165, 170, 172, 174, 178, 181, 183, 185, 186, 197, 208, 209, 210, 214, 215, 222, 225, 227, 234, 237, 238, 239, 240, 241, 245, 247, 248, 255, 258, 260, 261, 264, 265, 266, 278, 280, 282, 283, 284, 285, 287, 288, 289, 290, 291, 294, 298, 299, 301, 307, 310, 311, 315, 319, 320, 321, 323, 328, 332, 333, 334, 339, 340, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 357, 358, 359, 363, 364, 367, 369, 370, 371, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 389, 396, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 421, 423, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 446, 447, 448, 449, 453, 454, 455, 456, 460, 464, 465, 466, 467, 468, 469, 472, 473, 474, 476, 479, 488, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 539, 540, 542, 545, 546, 547, 548, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 570, 573, 574, 575, 576, 577, 578, 579, 580, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 662, 664, 665, 666, 668, 669, 671, 672, 676, 677, 680, 690, 691, 692, 693, 695, 697, 698, 701, 709, 711, 714, 717, 718, 720, 724, 726, 730, 731, 732, 734, 737, 741, 744, 745, 746, 747, 748, 750, 751, 752, 754, 755, 756, 758, 760, 761, 762, 765, 766, 767, 768, 776, 780, 781, 784, 786, 787, 788, 789, 790, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 851, 852, 857, 858, 860, 861, 862, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 879, 881, 884, 885, 886, 892, 896, 900, 901, 902, 903, 905, 906, 911, 914, 921, 922, 942, 943, 945, 947, 949, 950, 951, 952, 953, 954, 956, 957, 958, 959, 960, 961, 963, 965, 966, 967, 968, 969, 973, 976, 977, 978, 984, 985, 986, 987, 991, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "need": [0, 4, 9, 12, 30, 43, 45, 50, 52, 54, 77, 89, 99, 107, 111, 113, 114, 115, 121, 135, 137, 142, 148, 149, 153, 169, 183, 198, 199, 202, 208, 211, 213, 215, 219, 224, 225, 229, 230, 236, 238, 240, 241, 243, 255, 257, 258, 260, 283, 287, 294, 299, 307, 319, 320, 328, 332, 333, 334, 339, 340, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 358, 359, 360, 362, 363, 364, 367, 369, 370, 371, 372, 373, 374, 376, 377, 378, 380, 381, 382, 383, 389, 401, 405, 409, 413, 429, 467, 505, 515, 536, 546, 547, 552, 553, 554, 555, 591, 599, 602, 603, 604, 606, 613, 630, 632, 635, 640, 643, 656, 684, 685, 686, 687, 744, 748, 760, 761, 762, 765, 766, 776, 777, 778, 786, 794, 797, 805, 806, 822, 825, 828, 832, 837, 838, 842, 860, 867, 870, 910, 942, 943, 945, 947, 948, 949, 950, 952, 953, 954, 955, 956, 957, 958, 959, 960, 963, 964, 966, 967, 968, 969, 973, 977, 984, 985, 986, 987, 993, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "keep": [0, 6, 13, 39, 71, 90, 92, 107, 134, 148, 152, 153, 154, 155, 156, 165, 181, 182, 183, 189, 199, 229, 233, 236, 282, 283, 290, 297, 307, 319, 320, 323, 328, 332, 333, 337, 345, 349, 358, 359, 371, 373, 374, 375, 376, 377, 378, 396, 414, 429, 446, 447, 448, 449, 457, 458, 498, 504, 505, 508, 511, 518, 520, 522, 524, 526, 529, 532, 534, 559, 562, 564, 567, 575, 598, 599, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 624, 625, 626, 627, 628, 629, 631, 634, 636, 637, 640, 641, 642, 643, 672, 780, 798, 799, 808, 816, 822, 823, 861, 866, 868, 871, 874, 876, 949, 954, 958, 961, 963, 973, 976, 977, 978, 983, 985, 987, 989, 993, 998, 1001, 1002, 1006, 1007, 1009], "while": [0, 4, 7, 8, 10, 12, 17, 20, 23, 26, 32, 34, 36, 40, 41, 45, 52, 59, 63, 66, 69, 71, 85, 91, 92, 101, 104, 107, 108, 112, 118, 121, 135, 138, 143, 145, 146, 148, 152, 153, 154, 155, 158, 160, 162, 165, 170, 175, 181, 183, 185, 197, 208, 211, 212, 215, 216, 225, 226, 230, 232, 233, 237, 238, 239, 241, 245, 246, 247, 248, 249, 251, 260, 278, 279, 280, 283, 284, 285, 287, 290, 293, 294, 304, 307, 319, 321, 327, 328, 333, 337, 338, 339, 340, 341, 343, 344, 345, 347, 349, 350, 351, 353, 354, 357, 359, 360, 367, 371, 372, 373, 376, 377, 378, 380, 381, 382, 383, 384, 385, 408, 428, 431, 432, 447, 449, 460, 485, 496, 516, 521, 522, 523, 524, 528, 529, 530, 531, 532, 533, 534, 539, 546, 552, 553, 554, 555, 558, 561, 566, 570, 598, 607, 610, 611, 613, 620, 621, 622, 623, 640, 641, 642, 643, 672, 693, 717, 737, 741, 751, 757, 760, 762, 763, 764, 767, 768, 769, 770, 771, 772, 776, 777, 778, 780, 784, 786, 787, 788, 789, 790, 792, 800, 811, 813, 815, 816, 817, 824, 825, 826, 827, 828, 841, 853, 858, 863, 865, 866, 873, 874, 875, 876, 881, 906, 942, 943, 945, 946, 947, 949, 950, 952, 953, 954, 955, 956, 959, 960, 963, 965, 968, 969, 972, 973, 978, 984, 985, 986, 987, 993, 996, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "complianc": 0, "tax": 0, "regul": 0, "mostli": [0, 43, 66, 181, 199, 283, 353, 357, 359, 378, 380, 381, 485, 742, 743, 968, 972, 977, 1001, 1002, 1003, 1009], "go": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 152, 153, 154, 155, 156, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 323, 324, 325, 326, 327, 340, 343, 345, 347, 349, 350, 354, 360, 363, 374, 378, 380, 382, 407, 525, 526, 549, 550, 684, 844, 905, 906, 963, 969, 972, 973, 978, 987, 1004], "toward": [0, 25, 26, 60, 77, 108, 114, 120, 137, 155, 160, 185, 186, 206, 218, 315, 345, 359, 373, 412, 416, 426, 640, 642, 659, 839, 952, 967, 969, 971, 973], "cover": [0, 49, 158, 181, 199, 328, 337, 340, 345, 358, 599, 684, 757, 953, 954, 971], "travel": 0, "expens": [0, 53, 107, 121, 137, 152, 154, 209, 235, 247, 307, 311, 319, 320, 321, 334, 351, 359, 373, 374, 377, 380, 381, 413, 432, 472, 762, 765, 766, 776, 788, 863, 865, 950, 952, 963, 968, 972, 977, 987, 997], "well": [0, 4, 9, 12, 20, 23, 24, 26, 32, 36, 45, 50, 54, 55, 59, 66, 73, 80, 101, 102, 104, 107, 112, 114, 119, 121, 135, 142, 144, 152, 153, 154, 155, 158, 165, 169, 179, 181, 182, 183, 185, 189, 201, 202, 203, 206, 208, 212, 215, 218, 226, 238, 245, 247, 249, 253, 255, 258, 261, 263, 264, 265, 285, 288, 289, 290, 291, 292, 293, 294, 311, 315, 319, 320, 321, 328, 340, 342, 344, 345, 349, 351, 353, 354, 357, 358, 359, 360, 371, 373, 375, 377, 378, 380, 382, 384, 387, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 421, 423, 424, 428, 429, 431, 433, 434, 435, 436, 437, 438, 439, 440, 446, 447, 448, 449, 488, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 545, 546, 547, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 574, 575, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 599, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 652, 653, 654, 655, 656, 664, 685, 686, 687, 748, 751, 755, 758, 760, 761, 762, 765, 766, 776, 790, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 821, 822, 823, 824, 825, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 857, 858, 860, 861, 862, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 900, 901, 921, 942, 943, 945, 947, 948, 949, 950, 952, 953, 954, 955, 956, 957, 958, 959, 963, 966, 967, 969, 970, 972, 973, 977, 986, 987, 993, 994, 997, 999, 1000, 1001, 1004], "budget": [0, 111, 800, 801, 802, 803, 804, 942], "1": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 128, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 152, 153, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 323, 324, 325, 326, 327, 328, 332, 333, 334, 339, 340, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 358, 359, 360, 363, 364, 365, 366, 367, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 394, 395, 396, 397, 398, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 452, 453, 455, 457, 459, 460, 461, 464, 465, 466, 468, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 541, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 726, 727, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 896, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 937, 939, 940, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 953, 954, 955, 956, 957, 958, 959, 960, 961, 963, 964, 965, 966, 967, 968, 969, 972, 973, 974, 976, 977, 978, 979, 982, 983, 984, 985, 986, 991, 995], "note": [0, 4, 5, 7, 8, 11, 12, 14, 19, 20, 25, 30, 34, 50, 63, 67, 68, 75, 77, 79, 80, 85, 90, 104, 105, 107, 110, 114, 115, 118, 135, 137, 144, 148, 152, 153, 154, 155, 156, 158, 169, 170, 174, 181, 182, 183, 185, 189, 195, 197, 199, 201, 202, 203, 205, 208, 209, 211, 213, 214, 215, 216, 218, 225, 233, 234, 238, 241, 244, 245, 246, 257, 258, 260, 264, 265, 274, 278, 279, 282, 287, 288, 289, 290, 291, 292, 293, 294, 297, 299, 301, 307, 311, 319, 327, 332, 333, 339, 342, 343, 345, 346, 347, 349, 351, 352, 357, 358, 359, 363, 364, 368, 371, 372, 373, 375, 376, 378, 380, 381, 382, 383, 384, 385, 386, 387, 388, 396, 398, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 423, 424, 425, 426, 428, 429, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 451, 454, 460, 462, 468, 473, 479, 483, 491, 494, 497, 498, 502, 503, 504, 505, 507, 508, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 545, 546, 547, 549, 550, 552, 553, 554, 555, 556, 557, 558, 561, 563, 564, 566, 567, 568, 570, 571, 572, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 593, 594, 596, 597, 599, 600, 602, 605, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 659, 660, 663, 664, 667, 671, 672, 677, 679, 684, 685, 686, 687, 691, 692, 693, 695, 697, 701, 704, 709, 717, 718, 721, 726, 727, 731, 733, 737, 741, 745, 746, 747, 748, 750, 751, 752, 755, 756, 757, 759, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 776, 777, 778, 779, 780, 781, 782, 783, 786, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 821, 822, 823, 824, 825, 828, 829, 830, 831, 832, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 878, 881, 891, 892, 901, 902, 913, 916, 921, 928, 942, 943, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 956, 957, 959, 960, 961, 963, 966, 967, 968, 969, 970, 971, 972, 973, 976, 978, 985, 986, 987, 989, 991, 993, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1010], "regard": [0, 5, 7, 11, 13, 50, 52, 67, 83, 92, 127, 137, 142, 154, 155, 170, 178, 183, 203, 214, 218, 240, 247, 248, 261, 320, 340, 341, 345, 346, 350, 357, 359, 367, 372, 373, 378, 380, 381, 383, 407, 411, 416, 423, 426, 465, 578, 583, 620, 622, 665, 706, 761, 768, 784, 789, 807, 808, 946, 949, 953, 955, 956, 958, 960, 967, 968, 969, 980, 987, 1000, 1003], "might": [0, 4, 5, 13, 29, 39, 41, 57, 59, 66, 110, 119, 132, 143, 149, 153, 154, 155, 158, 181, 199, 208, 238, 240, 261, 274, 289, 311, 317, 328, 332, 333, 339, 343, 345, 346, 347, 349, 350, 351, 353, 357, 359, 360, 363, 367, 371, 374, 377, 378, 379, 380, 381, 383, 398, 407, 452, 460, 465, 467, 472, 479, 487, 500, 519, 520, 521, 525, 526, 528, 543, 544, 546, 574, 575, 591, 614, 618, 619, 620, 622, 623, 640, 642, 656, 720, 757, 765, 766, 789, 814, 830, 845, 858, 877, 879, 881, 885, 886, 902, 922, 942, 943, 945, 947, 949, 950, 952, 953, 955, 956, 960, 961, 963, 968, 969, 987, 994, 996, 1001, 1002, 1004, 1007, 1008, 1009, 1010], "pai": [0, 199, 345], "dn": [0, 956], "continu": [0, 13, 17, 19, 39, 85, 111, 137, 150, 154, 161, 182, 189, 199, 202, 205, 218, 219, 221, 225, 229, 230, 275, 277, 283, 284, 289, 290, 327, 333, 340, 343, 347, 348, 349, 350, 353, 357, 359, 360, 363, 373, 378, 380, 432, 456, 556, 559, 560, 563, 564, 571, 572, 573, 596, 610, 611, 616, 617, 621, 624, 625, 626, 627, 689, 705, 719, 774, 776, 828, 830, 832, 834, 835, 844, 845, 846, 862, 863, 874, 916, 942, 949, 950, 953, 954, 956, 957, 963, 969, 973, 974, 977, 978, 985, 990, 993, 995, 996, 1001, 1006, 1007, 1008, 1010], "integr": [0, 39, 67, 132, 145, 170, 275, 289, 333, 343, 347, 348, 349, 351, 353, 359, 363, 378, 383, 410, 679, 718, 749, 928, 952, 960, 977, 981, 994, 996, 997, 1005, 1006, 1010], "servic": [0, 4, 209, 218, 345, 349, 977, 1001], "azur": [0, 345], "cirru": [0, 345], "cl": [0, 8, 12, 16, 352, 359, 875], "circlecl": 0, "free": [0, 5, 52, 142, 143, 149, 180, 229, 278, 339, 344, 345, 346, 353, 357, 363, 381, 416, 573, 635, 821, 871, 942, 945, 949, 953, 973, 1001], "cpu": [0, 58, 239, 258, 292, 332, 333, 343, 351, 359, 363, 369, 381, 460, 596, 611, 615, 617, 619, 622, 623, 625, 627, 629, 630, 632, 640, 643, 762, 776, 786, 787, 788, 809, 817, 858, 921, 953, 978, 982, 987, 998, 1007, 1008, 1010], "server": [0, 135, 332, 342, 343, 460, 1001], "anaconda": [0, 333, 343, 349], "inc": [0, 66, 237, 943, 965, 977], "storag": [0, 321, 359, 622, 623, 630, 631, 632, 640, 641, 642, 865, 956, 968, 996, 1001], "thei": [0, 4, 13, 25, 26, 34, 47, 54, 77, 89, 99, 102, 108, 109, 111, 113, 115, 117, 131, 134, 135, 137, 138, 142, 153, 154, 165, 167, 170, 176, 181, 182, 199, 202, 205, 208, 214, 215, 218, 232, 235, 238, 239, 241, 247, 255, 258, 260, 274, 278, 283, 289, 291, 311, 319, 320, 325, 326, 328, 332, 333, 334, 338, 340, 341, 342, 343, 344, 345, 346, 347, 349, 353, 354, 357, 358, 359, 360, 364, 370, 372, 373, 374, 375, 376, 378, 380, 382, 383, 385, 404, 406, 410, 417, 418, 431, 460, 472, 473, 497, 499, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 552, 555, 561, 574, 583, 593, 607, 610, 611, 616, 622, 623, 624, 625, 626, 634, 636, 640, 642, 645, 651, 725, 726, 728, 731, 737, 752, 762, 776, 794, 800, 801, 802, 803, 804, 822, 825, 827, 833, 844, 845, 867, 870, 873, 874, 875, 876, 880, 942, 943, 945, 947, 949, 952, 953, 954, 955, 956, 958, 959, 960, 961, 963, 964, 965, 967, 968, 969, 977, 978, 982, 984, 985, 987, 993, 994, 995, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009], "stage": [0, 7, 25, 68, 101, 106, 112, 115, 343, 349, 359, 369, 373, 380, 412, 517, 518, 523, 524, 525, 526, 552, 553, 555, 566, 950, 963, 971, 1001, 1005], "nightli": [0, 333, 348, 349], "build": [0, 4, 7, 17, 30, 40, 52, 64, 70, 91, 101, 110, 112, 118, 124, 132, 134, 147, 148, 150, 153, 189, 243, 246, 255, 257, 258, 275, 276, 279, 284, 285, 321, 328, 332, 333, 334, 341, 347, 348, 349, 350, 351, 359, 363, 366, 372, 373, 377, 380, 381, 406, 454, 465, 467, 488, 517, 518, 519, 520, 521, 522, 523, 524, 527, 528, 529, 530, 549, 550, 552, 553, 555, 591, 592, 594, 655, 677, 678, 763, 767, 771, 780, 785, 787, 826, 843, 845, 873, 874, 875, 876, 878, 898, 942, 943, 950, 953, 957, 959, 963, 968, 969, 972, 973, 974, 976, 977, 979, 981, 985, 986, 993, 996, 998, 999, 1000, 1002, 1005], "applic": [3, 5, 19, 46, 52, 75, 150, 158, 181, 198, 203, 232, 241, 278, 332, 334, 340, 342, 345, 347, 351, 353, 354, 357, 359, 371, 373, 377, 378, 379, 380, 383, 385, 408, 410, 416, 460, 462, 496, 497, 498, 517, 518, 593, 652, 653, 654, 658, 676, 692, 693, 701, 746, 747, 750, 791, 942, 949, 950, 951, 952, 953, 957, 959, 965, 969, 972, 973, 974, 976, 977, 985, 987, 993, 994, 999, 1001, 1004], "problem": [3, 4, 5, 6, 11, 13, 14, 15, 25, 34, 51, 52, 54, 63, 87, 101, 104, 107, 109, 114, 115, 137, 150, 155, 158, 160, 165, 167, 170, 174, 175, 181, 183, 185, 198, 199, 203, 208, 209, 216, 218, 221, 236, 238, 243, 247, 248, 252, 255, 257, 258, 263, 270, 282, 290, 294, 304, 307, 311, 315, 316, 319, 320, 327, 328, 332, 340, 341, 342, 343, 344, 346, 347, 350, 351, 354, 357, 359, 371, 372, 373, 375, 377, 379, 380, 381, 382, 383, 384, 385, 408, 411, 413, 414, 416, 421, 426, 429, 442, 467, 472, 473, 479, 480, 481, 482, 487, 488, 492, 495, 497, 501, 503, 506, 507, 508, 509, 510, 511, 512, 515, 516, 521, 525, 528, 531, 535, 537, 553, 574, 595, 607, 612, 614, 616, 618, 619, 620, 621, 622, 623, 628, 629, 630, 632, 633, 636, 637, 638, 639, 640, 641, 643, 644, 649, 650, 651, 652, 653, 655, 657, 659, 672, 680, 692, 693, 698, 701, 702, 746, 747, 750, 751, 760, 761, 763, 764, 765, 766, 767, 769, 770, 771, 772, 777, 778, 779, 780, 781, 782, 785, 793, 794, 795, 805, 806, 807, 808, 809, 810, 811, 813, 815, 816, 817, 831, 832, 838, 846, 849, 855, 856, 865, 866, 873, 875, 891, 902, 943, 944, 948, 949, 950, 952, 953, 954, 955, 956, 957, 961, 963, 967, 970, 973, 975, 977, 979, 980, 981, 987, 988, 989, 993, 994, 996, 998, 999, 1000, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010], "medium": [3, 150, 214, 253, 285, 307, 373, 607, 839, 946, 949], "size": [3, 4, 5, 6, 8, 11, 12, 13, 14, 23, 29, 31, 34, 36, 37, 39, 41, 43, 44, 49, 51, 52, 54, 55, 57, 58, 59, 63, 64, 69, 73, 74, 75, 76, 77, 79, 80, 85, 87, 88, 89, 90, 91, 94, 96, 104, 113, 114, 117, 118, 131, 137, 139, 140, 143, 144, 150, 152, 154, 155, 160, 161, 162, 163, 167, 171, 176, 179, 182, 183, 184, 187, 194, 195, 201, 206, 208, 211, 212, 213, 214, 215, 217, 218, 226, 232, 234, 236, 238, 240, 241, 243, 244, 245, 255, 264, 265, 266, 273, 276, 279, 280, 281, 282, 285, 288, 291, 293, 294, 297, 301, 303, 305, 306, 307, 315, 317, 319, 320, 321, 323, 332, 333, 334, 340, 341, 345, 350, 354, 357, 358, 359, 363, 364, 370, 371, 372, 375, 377, 378, 381, 383, 384, 386, 408, 409, 410, 412, 413, 414, 421, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 457, 458, 459, 479, 491, 498, 500, 502, 504, 511, 521, 522, 523, 524, 525, 526, 528, 529, 547, 551, 552, 555, 558, 596, 597, 607, 621, 630, 631, 643, 647, 656, 659, 669, 683, 701, 703, 706, 744, 756, 764, 767, 768, 772, 779, 782, 783, 786, 789, 791, 800, 801, 802, 804, 807, 808, 809, 810, 811, 813, 815, 816, 817, 822, 823, 840, 842, 854, 859, 863, 867, 868, 869, 870, 871, 873, 874, 875, 876, 879, 901, 905, 906, 916, 917, 919, 922, 928, 943, 945, 946, 948, 949, 950, 952, 953, 954, 955, 956, 957, 960, 963, 965, 967, 968, 969, 976, 977, 981, 983, 985, 986, 996, 997, 998, 999, 1000, 1001, 1003, 1008, 1009], "interact": [3, 115, 150, 181, 206, 210, 239, 288, 344, 346, 347, 349, 351, 357, 359, 360, 374, 523, 524, 525, 526, 596, 597, 840, 844, 942, 945, 949, 950, 951, 958, 960, 963, 971, 973, 995, 1000, 1007, 1008], "user": [3, 24, 52, 65, 87, 107, 146, 150, 153, 169, 201, 215, 229, 235, 245, 247, 255, 258, 264, 265, 268, 284, 287, 288, 289, 290, 291, 292, 293, 294, 328, 332, 333, 339, 343, 344, 345, 347, 349, 351, 352, 353, 357, 358, 359, 363, 364, 367, 371, 372, 373, 374, 375, 377, 378, 380, 381, 382, 384, 385, 386, 387, 390, 396, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 421, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 538, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 583, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 661, 662, 663, 664, 666, 667, 668, 669, 671, 672, 673, 674, 675, 676, 677, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 720, 721, 722, 723, 724, 725, 726, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 879, 898, 902, 942, 943, 949, 950, 952, 953, 954, 956, 963, 967, 972, 973, 977, 980, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "interfac": [3, 101, 150, 338, 339, 346, 347, 354, 357, 359, 377, 383, 384, 405, 409, 414, 460, 517, 663, 762, 765, 766, 776, 825, 826, 851, 938, 942, 956, 968, 972, 973, 977, 993, 995, 998, 999, 1001, 1002, 1007, 1009], "compress": [3, 11, 17, 45, 63, 150, 255, 278, 340, 373, 378, 381, 382, 616, 636, 656, 795, 838, 924, 927, 939, 949, 963, 974, 986, 993, 1002], "sens": [3, 4, 13, 17, 24, 52, 63, 143, 150, 153, 158, 212, 215, 278, 284, 297, 307, 319, 328, 332, 345, 346, 359, 373, 375, 377, 382, 426, 433, 434, 435, 436, 437, 438, 439, 440, 616, 619, 620, 636, 763, 773, 862, 947, 949, 956, 957, 959, 963, 966, 974], "tomographi": [3, 17, 63, 150, 616, 636, 949, 974], "reconstruct": [3, 17, 20, 63, 87, 88, 92, 150, 180, 204, 205, 291, 378, 381, 446, 447, 448, 495, 497, 499, 501, 502, 503, 504, 506, 507, 509, 510, 512, 547, 551, 616, 636, 652, 653, 657, 857, 858, 949, 950, 974, 1007], "l1": [3, 7, 17, 28, 37, 63, 77, 79, 150, 152, 159, 160, 166, 167, 168, 169, 170, 175, 176, 185, 192, 196, 210, 239, 258, 275, 290, 354, 357, 372, 373, 375, 378, 405, 409, 414, 421, 428, 433, 434, 435, 436, 437, 438, 439, 440, 442, 460, 466, 468, 495, 501, 502, 503, 504, 506, 507, 511, 512, 522, 529, 553, 554, 555, 561, 608, 609, 610, 611, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 630, 631, 632, 634, 636, 640, 641, 642, 643, 645, 652, 698, 725, 731, 736, 741, 742, 743, 748, 776, 783, 791, 807, 808, 809, 811, 813, 815, 816, 817, 818, 819, 837, 845, 852, 865, 866, 872, 874, 876, 888, 935, 949, 951, 953, 956, 963, 967, 968, 969, 974, 985, 998, 1000, 1006, 1009], "prior": [3, 7, 17, 43, 44, 54, 62, 63, 64, 85, 136, 137, 143, 149, 150, 155, 160, 162, 165, 223, 225, 229, 230, 238, 249, 268, 345, 347, 349, 359, 363, 373, 376, 378, 380, 383, 429, 487, 500, 512, 513, 514, 515, 523, 549, 550, 575, 577, 578, 579, 583, 586, 587, 594, 608, 609, 610, 611, 615, 616, 618, 619, 620, 624, 625, 626, 636, 642, 645, 680, 760, 800, 801, 802, 803, 804, 825, 826, 840, 867, 870, 920, 942, 945, 947, 949, 952, 953, 955, 961, 969, 970, 974, 996, 998, 999, 1000, 1001, 1002, 1003, 1006, 1009], "lasso": [3, 17, 63, 96, 121, 126, 150, 153, 159, 162, 172, 174, 180, 186, 189, 212, 229, 251, 290, 294, 315, 332, 357, 375, 376, 378, 380, 381, 382, 435, 436, 442, 465, 488, 495, 501, 503, 506, 507, 509, 510, 512, 561, 610, 611, 613, 614, 615, 617, 618, 619, 620, 621, 624, 625, 626, 627, 628, 629, 634, 636, 642, 645, 646, 647, 648, 649, 650, 685, 686, 687, 786, 787, 788, 826, 845, 942, 953, 967, 974, 975, 982, 985, 989, 993, 997, 998, 999, 1001, 1002, 1004, 1006, 1007], "recognit": [3, 9, 15, 87, 150, 217, 276, 283, 338, 350, 378, 380, 382, 458, 466, 496, 498, 505, 661, 672, 677, 704, 732, 751, 752, 760, 776, 791, 845, 870, 945, 949, 953, 954, 958, 968, 970, 974, 978, 981, 989, 993], "eigenfac": [3, 15, 150, 217, 340, 378, 458, 505, 661, 677, 776, 791, 845, 870, 970, 974, 981, 993], "svm": [3, 7, 9, 10, 11, 15, 16, 24, 26, 28, 29, 30, 66, 68, 70, 87, 99, 110, 119, 122, 125, 127, 129, 133, 134, 135, 139, 141, 145, 150, 159, 162, 164, 173, 174, 190, 191, 192, 193, 194, 208, 214, 216, 217, 220, 221, 228, 232, 235, 236, 237, 238, 240, 241, 243, 244, 245, 246, 248, 249, 252, 253, 264, 269, 270, 271, 273, 280, 281, 287, 289, 295, 299, 300, 302, 305, 314, 315, 319, 332, 340, 347, 351, 359, 367, 374, 377, 378, 380, 382, 399, 400, 401, 458, 468, 476, 479, 505, 519, 520, 527, 531, 532, 541, 557, 558, 563, 564, 569, 595, 603, 607, 632, 640, 641, 642, 653, 661, 662, 664, 666, 677, 698, 705, 724, 762, 776, 782, 787, 788, 791, 793, 794, 811, 825, 826, 838, 840, 845, 861, 862, 941, 942, 945, 948, 950, 951, 953, 954, 958, 966, 968, 970, 974, 975, 978, 981, 982, 983, 987, 989, 990, 993, 994, 995, 997, 998, 999, 1000], "imag": [3, 6, 14, 20, 21, 30, 33, 36, 37, 38, 41, 43, 45, 48, 51, 53, 55, 59, 64, 66, 82, 86, 87, 92, 109, 133, 135, 141, 150, 172, 202, 210, 213, 217, 236, 267, 275, 276, 288, 296, 297, 319, 320, 337, 338, 340, 342, 345, 350, 353, 357, 359, 363, 366, 373, 378, 405, 409, 416, 426, 457, 458, 459, 460, 466, 467, 470, 471, 498, 499, 501, 505, 571, 572, 655, 661, 701, 791, 835, 949, 953, 954, 956, 958, 965, 969, 972, 974, 977, 978, 983, 984, 986, 987, 989, 993, 996, 1001, 1002, 1006, 1008, 1009], "denois": [3, 45, 47, 48, 50, 86, 92, 150, 378, 460, 499, 501, 505, 548, 551, 791, 835, 974], "kernel": [3, 6, 9, 10, 11, 16, 28, 29, 48, 54, 70, 80, 86, 88, 96, 99, 122, 128, 133, 136, 138, 139, 140, 141, 144, 148, 163, 164, 182, 190, 195, 207, 208, 216, 220, 232, 236, 238, 240, 243, 244, 248, 252, 253, 259, 264, 269, 283, 290, 298, 301, 302, 304, 305, 307, 308, 309, 310, 312, 313, 316, 328, 332, 337, 347, 357, 359, 371, 373, 374, 377, 380, 381, 396, 404, 412, 416, 425, 426, 429, 446, 447, 448, 455, 460, 462, 466, 468, 478, 497, 498, 499, 505, 508, 518, 520, 522, 524, 526, 529, 532, 534, 557, 558, 574, 575, 595, 599, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 624, 625, 626, 627, 628, 629, 631, 634, 636, 637, 640, 641, 642, 643, 652, 654, 655, 656, 659, 698, 721, 722, 724, 729, 730, 737, 738, 739, 740, 762, 768, 773, 776, 791, 793, 798, 799, 805, 806, 808, 810, 816, 823, 825, 826, 831, 835, 837, 838, 840, 845, 860, 861, 865, 866, 867, 868, 869, 870, 871, 874, 876, 942, 948, 949, 950, 953, 954, 956, 959, 966, 967, 974, 975, 978, 982, 983, 988, 989, 993, 994, 995, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "pca": [3, 6, 31, 42, 48, 65, 66, 68, 70, 71, 80, 86, 89, 96, 97, 127, 150, 178, 202, 204, 211, 213, 216, 220, 237, 246, 249, 258, 262, 267, 276, 290, 328, 337, 347, 359, 369, 372, 373, 374, 379, 389, 437, 440, 448, 460, 466, 468, 478, 496, 497, 498, 499, 503, 504, 507, 508, 513, 607, 622, 652, 654, 656, 660, 762, 787, 791, 814, 821, 824, 825, 827, 835, 843, 845, 945, 947, 950, 956, 963, 967, 969, 974, 983, 988, 989, 993, 995, 996, 997, 999, 1000, 1001, 1004, 1006, 1007, 1008, 1010], "lag": [3, 4, 114, 150, 181, 183, 199, 238, 460, 526, 665, 705, 708, 709, 711, 753, 783, 787, 788, 791, 974], "featur": [3, 5, 6, 7, 8, 10, 11, 15, 19, 20, 24, 25, 26, 28, 29, 30, 31, 33, 39, 42, 44, 47, 55, 57, 60, 65, 66, 67, 68, 69, 75, 76, 79, 80, 82, 83, 84, 85, 87, 89, 91, 93, 94, 95, 97, 100, 105, 107, 110, 114, 116, 120, 121, 122, 124, 126, 130, 132, 137, 138, 139, 142, 143, 145, 148, 149, 151, 152, 153, 154, 159, 161, 163, 164, 165, 167, 168, 170, 171, 177, 180, 181, 182, 183, 185, 186, 188, 190, 196, 197, 198, 202, 207, 210, 212, 215, 217, 218, 221, 222, 231, 233, 235, 237, 238, 241, 242, 243, 244, 245, 246, 247, 248, 251, 252, 255, 257, 261, 262, 263, 266, 267, 269, 272, 273, 275, 277, 278, 281, 285, 286, 288, 291, 292, 293, 294, 296, 297, 299, 300, 302, 303, 304, 307, 311, 315, 318, 321, 324, 326, 327, 328, 337, 338, 339, 340, 341, 342, 343, 347, 348, 350, 352, 353, 354, 357, 358, 359, 360, 362, 363, 367, 371, 373, 375, 376, 377, 378, 379, 383, 384, 385, 386, 387, 389, 394, 396, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 421, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 446, 447, 448, 449, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 472, 473, 474, 476, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 492, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 543, 544, 545, 546, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 582, 583, 584, 586, 587, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 649, 650, 651, 652, 653, 654, 655, 656, 661, 665, 666, 667, 677, 685, 686, 687, 704, 705, 708, 709, 711, 721, 722, 726, 727, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 744, 748, 751, 753, 755, 756, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 776, 777, 778, 779, 780, 781, 782, 783, 784, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 850, 851, 852, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 885, 886, 899, 918, 928, 929, 930, 934, 942, 945, 947, 948, 949, 950, 951, 953, 954, 955, 956, 957, 958, 959, 960, 964, 965, 966, 967, 968, 969, 971, 972, 973, 974, 975, 976, 977, 978, 979, 983, 984, 985, 989, 990, 991, 992, 993, 994, 995, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "seri": [3, 4, 12, 20, 77, 108, 114, 150, 152, 155, 156, 163, 181, 183, 185, 199, 201, 222, 238, 243, 285, 291, 296, 337, 340, 350, 359, 373, 453, 454, 455, 456, 460, 464, 465, 466, 468, 469, 474, 505, 526, 654, 658, 665, 705, 708, 709, 711, 753, 783, 787, 788, 791, 881, 944, 949, 950, 954, 956, 967, 972, 974, 996, 999, 1000, 1001, 1005, 1008, 1010], "forecast": [3, 4, 114, 136, 143, 144, 150, 181, 183, 199, 238, 371, 383, 460, 526, 575, 579, 586, 587, 589, 665, 705, 708, 709, 711, 753, 783, 787, 788, 791, 953, 972, 974], "libsvm": [3, 150, 158, 305, 338, 351, 451, 472, 527, 865, 866, 867, 868, 869, 870, 871, 968, 974, 989, 993, 995, 1001, 1004, 1007], "gui": [3, 150, 451, 869, 870, 974, 985, 993, 994, 1004], "model": [3, 5, 6, 9, 10, 12, 14, 15, 16, 20, 21, 23, 24, 26, 32, 36, 37, 38, 45, 46, 51, 52, 53, 55, 58, 65, 67, 68, 69, 73, 77, 80, 86, 87, 96, 97, 100, 101, 104, 106, 110, 113, 114, 116, 118, 120, 121, 124, 126, 128, 129, 131, 132, 140, 141, 143, 144, 145, 146, 149, 151, 152, 156, 161, 163, 166, 167, 171, 172, 174, 176, 177, 178, 182, 183, 185, 186, 187, 189, 193, 194, 196, 197, 198, 208, 211, 216, 224, 226, 227, 228, 232, 233, 234, 236, 239, 241, 242, 243, 244, 246, 247, 251, 252, 255, 258, 260, 261, 262, 264, 267, 271, 279, 282, 284, 285, 287, 289, 291, 292, 293, 296, 297, 304, 306, 307, 308, 309, 310, 312, 313, 315, 317, 320, 321, 324, 325, 326, 328, 337, 339, 340, 348, 351, 359, 362, 364, 369, 370, 371, 373, 374, 376, 378, 379, 380, 381, 382, 383, 392, 396, 398, 401, 406, 413, 429, 431, 433, 434, 435, 436, 437, 438, 439, 440, 446, 447, 448, 449, 452, 453, 454, 460, 462, 464, 465, 466, 467, 473, 486, 488, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 507, 508, 512, 513, 514, 515, 516, 517, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 534, 552, 553, 555, 557, 558, 561, 566, 570, 573, 574, 575, 579, 591, 596, 597, 598, 599, 601, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 655, 665, 670, 675, 685, 686, 687, 697, 698, 704, 713, 716, 748, 751, 752, 755, 760, 761, 762, 765, 766, 767, 768, 776, 777, 778, 779, 783, 784, 787, 788, 789, 790, 791, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 808, 810, 811, 812, 814, 816, 821, 822, 823, 825, 826, 828, 830, 832, 837, 838, 840, 841, 842, 844, 845, 846, 850, 851, 853, 854, 855, 856, 860, 861, 862, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 880, 937, 943, 945, 946, 947, 950, 951, 954, 956, 959, 960, 961, 963, 964, 965, 966, 967, 968, 969, 972, 973, 974, 975, 977, 979, 981, 983, 987, 988, 989, 993, 994, 995, 996, 997, 998, 1011], "complex": [3, 9, 10, 15, 16, 20, 68, 107, 121, 134, 137, 142, 148, 150, 185, 195, 198, 207, 214, 215, 231, 236, 239, 242, 247, 279, 287, 290, 291, 295, 307, 311, 321, 322, 327, 341, 345, 350, 357, 374, 378, 380, 384, 404, 408, 411, 412, 414, 431, 453, 464, 465, 466, 478, 498, 505, 515, 521, 522, 523, 524, 526, 528, 529, 568, 594, 602, 620, 622, 640, 641, 697, 713, 762, 791, 793, 821, 825, 826, 830, 838, 845, 861, 865, 868, 871, 873, 874, 875, 876, 942, 943, 945, 946, 948, 950, 952, 954, 959, 963, 966, 973, 974, 975, 977, 989, 994, 996, 1002, 1003, 1006], "influenc": [3, 9, 13, 75, 76, 101, 150, 153, 163, 214, 224, 246, 278, 285, 307, 311, 315, 328, 334, 375, 378, 380, 396, 404, 418, 429, 446, 447, 448, 453, 465, 518, 520, 522, 524, 526, 529, 532, 534, 575, 592, 599, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 624, 625, 626, 627, 628, 629, 631, 634, 636, 637, 640, 642, 643, 697, 713, 791, 798, 799, 807, 808, 815, 816, 823, 842, 843, 854, 866, 868, 871, 874, 876, 885, 942, 947, 948, 949, 956, 959, 963, 967, 968, 974, 977, 996, 1001, 1002], "core": [3, 10, 46, 52, 62, 67, 101, 107, 109, 110, 150, 153, 154, 292, 331, 333, 343, 345, 348, 353, 359, 363, 373, 378, 380, 381, 384, 408, 410, 413, 414, 419, 421, 460, 463, 502, 553, 558, 622, 623, 630, 632, 640, 800, 801, 802, 803, 804, 809, 817, 949, 956, 959, 968, 973, 974, 975, 977, 985, 987, 989, 995, 997, 998, 1000, 1003, 1007, 1008, 1009], "classif": [3, 6, 7, 10, 16, 19, 22, 23, 24, 26, 29, 32, 42, 67, 68, 69, 73, 74, 79, 81, 85, 90, 101, 103, 105, 107, 108, 109, 110, 115, 117, 119, 123, 125, 128, 130, 131, 132, 133, 134, 135, 136, 142, 143, 153, 154, 158, 159, 171, 172, 173, 174, 181, 189, 191, 193, 194, 196, 207, 209, 213, 214, 218, 221, 227, 231, 232, 235, 236, 237, 238, 239, 247, 252, 253, 255, 256, 259, 260, 266, 267, 268, 270, 271, 272, 273, 275, 280, 281, 282, 283, 296, 301, 302, 303, 307, 310, 313, 314, 315, 316, 318, 320, 321, 328, 332, 334, 338, 339, 340, 342, 347, 350, 354, 358, 359, 368, 371, 373, 374, 377, 378, 381, 382, 390, 401, 433, 439, 446, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 463, 464, 466, 467, 468, 474, 476, 478, 479, 483, 484, 486, 487, 505, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 528, 529, 530, 531, 533, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 568, 569, 570, 573, 574, 575, 577, 578, 586, 595, 596, 597, 607, 622, 623, 630, 632, 638, 639, 640, 661, 667, 669, 672, 676, 677, 679, 680, 682, 689, 690, 692, 693, 697, 698, 701, 704, 705, 706, 717, 719, 721, 722, 724, 745, 746, 747, 749, 750, 751, 752, 757, 759, 762, 763, 765, 766, 767, 768, 776, 780, 781, 784, 785, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 799, 800, 801, 802, 803, 804, 807, 812, 814, 815, 821, 822, 823, 825, 829, 832, 837, 838, 839, 840, 845, 846, 849, 851, 860, 861, 862, 865, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 878, 879, 888, 891, 899, 942, 943, 945, 946, 947, 950, 951, 955, 958, 960, 961, 963, 964, 966, 971, 972, 974, 975, 976, 977, 978, 979, 983, 984, 989, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010], "text": [3, 6, 7, 10, 11, 12, 15, 16, 17, 19, 29, 30, 34, 37, 41, 50, 54, 55, 57, 58, 59, 61, 66, 75, 76, 107, 112, 156, 161, 175, 176, 208, 212, 219, 220, 224, 226, 231, 237, 242, 244, 245, 249, 263, 266, 268, 273, 280, 290, 295, 297, 314, 323, 332, 334, 337, 338, 339, 345, 350, 357, 359, 371, 373, 374, 376, 377, 378, 380, 383, 411, 413, 428, 432, 451, 452, 453, 463, 467, 472, 485, 500, 508, 528, 579, 589, 616, 622, 630, 632, 638, 640, 661, 667, 669, 671, 677, 681, 692, 693, 700, 756, 758, 762, 776, 791, 800, 802, 804, 807, 812, 825, 826, 828, 829, 837, 861, 862, 863, 865, 877, 878, 879, 899, 942, 945, 949, 951, 953, 954, 955, 957, 960, 963, 965, 967, 968, 971, 973, 974, 977, 979, 989, 993, 994, 995, 996, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "document": [3, 6, 7, 10, 12, 15, 17, 18, 21, 25, 29, 34, 42, 48, 54, 55, 57, 58, 66, 67, 68, 69, 82, 83, 85, 87, 106, 108, 109, 117, 118, 121, 124, 132, 142, 153, 154, 155, 162, 164, 178, 179, 196, 209, 210, 211, 212, 215, 216, 218, 219, 220, 221, 222, 229, 236, 238, 239, 245, 250, 275, 276, 284, 288, 291, 292, 294, 298, 300, 312, 315, 321, 327, 332, 333, 334, 339, 340, 341, 343, 344, 346, 347, 348, 349, 350, 351, 353, 357, 359, 363, 364, 367, 370, 372, 373, 378, 381, 384, 408, 411, 412, 413, 414, 417, 421, 428, 452, 453, 463, 465, 475, 485, 487, 500, 508, 528, 552, 553, 554, 555, 558, 568, 595, 603, 607, 622, 623, 630, 632, 637, 638, 639, 640, 660, 661, 663, 667, 669, 675, 681, 700, 721, 722, 732, 741, 742, 743, 756, 758, 762, 765, 766, 768, 776, 784, 787, 789, 792, 795, 802, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 826, 837, 865, 870, 881, 884, 886, 899, 919, 942, 949, 951, 953, 954, 955, 956, 957, 961, 967, 970, 971, 974, 977, 980, 985, 987, 994, 995, 999, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "outlier": [3, 32, 41, 51, 75, 76, 77, 114, 117, 137, 150, 159, 179, 183, 184, 185, 186, 187, 195, 207, 259, 277, 282, 285, 306, 317, 340, 359, 373, 375, 380, 395, 410, 428, 430, 433, 434, 437, 438, 439, 440, 454, 455, 456, 460, 474, 476, 486, 488, 527, 595, 603, 613, 634, 635, 636, 640, 641, 642, 643, 656, 666, 791, 811, 815, 826, 834, 835, 837, 838, 839, 841, 842, 843, 844, 845, 850, 851, 852, 853, 854, 855, 856, 868, 869, 871, 953, 967, 968, 972, 974, 975, 988, 989, 993, 998, 999, 1001], "detect": [3, 8, 10, 20, 32, 60, 62, 75, 76, 77, 108, 111, 117, 150, 162, 185, 195, 207, 221, 231, 238, 241, 247, 248, 259, 278, 284, 306, 340, 343, 345, 349, 357, 359, 371, 372, 373, 375, 377, 381, 395, 410, 413, 428, 430, 433, 434, 437, 438, 439, 440, 452, 453, 455, 456, 460, 474, 476, 479, 486, 501, 502, 503, 510, 527, 528, 552, 555, 560, 595, 603, 641, 662, 666, 690, 752, 791, 811, 815, 826, 835, 838, 839, 843, 844, 845, 865, 869, 945, 949, 972, 973, 974, 975, 977, 982, 987, 988, 989, 993, 996, 999, 1000, 1001, 1003, 1005, 1006, 1008, 1009], "set": [3, 4, 5, 6, 7, 8, 11, 13, 14, 16, 20, 24, 25, 26, 28, 29, 32, 34, 38, 39, 41, 42, 43, 46, 47, 50, 51, 52, 54, 55, 57, 59, 61, 62, 63, 66, 67, 69, 75, 76, 77, 80, 83, 86, 87, 91, 92, 95, 99, 101, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 123, 126, 131, 132, 135, 137, 143, 144, 145, 146, 150, 152, 153, 154, 155, 156, 160, 165, 166, 169, 170, 172, 174, 176, 177, 178, 180, 181, 182, 183, 186, 189, 194, 195, 199, 201, 202, 203, 208, 209, 210, 211, 213, 214, 215, 218, 222, 224, 226, 228, 229, 232, 233, 236, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 252, 255, 257, 260, 264, 265, 266, 267, 268, 271, 274, 275, 276, 278, 280, 282, 283, 284, 285, 287, 289, 290, 294, 296, 297, 300, 301, 304, 306, 309, 311, 315, 319, 320, 321, 325, 326, 328, 332, 333, 334, 337, 338, 340, 342, 343, 345, 347, 349, 350, 352, 353, 358, 359, 360, 363, 364, 369, 370, 371, 373, 374, 375, 376, 378, 379, 380, 381, 382, 383, 384, 385, 387, 390, 397, 398, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 446, 447, 448, 449, 452, 453, 457, 459, 460, 461, 463, 466, 467, 468, 472, 473, 474, 479, 487, 488, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 574, 575, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 661, 662, 663, 664, 665, 666, 667, 677, 678, 683, 685, 686, 689, 690, 691, 692, 693, 694, 697, 701, 703, 704, 708, 709, 711, 713, 714, 716, 719, 742, 743, 745, 746, 747, 748, 750, 752, 753, 754, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 879, 880, 885, 886, 896, 897, 902, 906, 909, 910, 921, 922, 923, 924, 927, 928, 934, 937, 942, 943, 944, 945, 946, 947, 948, 950, 951, 952, 953, 954, 955, 956, 957, 959, 960, 961, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 974, 979, 981, 982, 983, 986, 993, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "predict": [3, 6, 7, 8, 11, 22, 24, 25, 26, 28, 30, 32, 34, 41, 45, 53, 54, 55, 59, 66, 67, 68, 69, 71, 79, 97, 99, 100, 101, 103, 104, 105, 107, 109, 110, 111, 112, 115, 117, 118, 119, 120, 121, 122, 123, 127, 128, 132, 135, 136, 137, 139, 140, 142, 143, 144, 145, 146, 148, 149, 150, 153, 154, 155, 156, 158, 160, 163, 164, 165, 173, 176, 177, 178, 179, 182, 183, 184, 185, 187, 188, 189, 190, 195, 196, 198, 199, 208, 209, 211, 213, 215, 217, 225, 226, 227, 228, 229, 230, 231, 232, 236, 238, 240, 241, 244, 247, 248, 252, 255, 257, 261, 264, 265, 266, 269, 270, 276, 278, 279, 283, 284, 287, 288, 289, 290, 291, 293, 294, 297, 299, 300, 301, 303, 304, 306, 307, 311, 313, 314, 315, 316, 319, 320, 324, 325, 326, 327, 328, 331, 333, 337, 340, 342, 345, 347, 352, 354, 359, 362, 364, 367, 368, 369, 371, 372, 373, 374, 376, 378, 380, 381, 382, 387, 390, 395, 396, 401, 402, 403, 404, 406, 407, 408, 411, 412, 413, 429, 433, 446, 447, 448, 451, 465, 472, 488, 498, 505, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 541, 546, 557, 558, 566, 570, 574, 575, 577, 578, 579, 580, 586, 589, 591, 592, 594, 595, 596, 597, 598, 599, 601, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 661, 662, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 676, 678, 679, 682, 685, 686, 687, 688, 689, 690, 691, 692, 693, 697, 698, 701, 704, 705, 706, 709, 711, 713, 715, 719, 745, 746, 747, 748, 749, 750, 751, 752, 756, 757, 759, 760, 761, 762, 765, 766, 768, 776, 784, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 811, 812, 815, 816, 822, 823, 825, 832, 845, 846, 860, 861, 862, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 927, 942, 943, 944, 945, 946, 947, 948, 949, 951, 952, 954, 955, 956, 957, 959, 960, 961, 963, 966, 967, 968, 969, 971, 972, 973, 974, 977, 979, 981, 982, 983, 987, 989, 990, 993, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "latenc": [3, 7, 8, 150, 331, 488, 529, 636, 642, 791, 845, 871, 918, 927, 972, 974, 989, 996], "speci": [3, 83, 150, 218, 259, 319, 338, 379, 462, 670, 752, 810, 869, 880, 953, 959, 974, 989, 993], "distribut": [3, 4, 8, 9, 10, 13, 20, 26, 32, 34, 36, 41, 49, 50, 52, 54, 59, 71, 74, 75, 76, 80, 85, 101, 103, 114, 117, 130, 135, 137, 146, 150, 152, 153, 156, 158, 160, 181, 183, 185, 203, 205, 208, 212, 218, 224, 229, 230, 234, 238, 244, 246, 255, 259, 263, 277, 278, 280, 283, 293, 296, 297, 312, 315, 319, 332, 333, 338, 341, 342, 343, 345, 346, 349, 350, 351, 359, 367, 371, 372, 373, 375, 377, 378, 379, 385, 411, 413, 433, 434, 435, 436, 437, 438, 439, 440, 452, 462, 467, 479, 480, 481, 482, 483, 487, 496, 497, 500, 514, 515, 516, 527, 575, 589, 604, 606, 608, 609, 612, 622, 623, 633, 643, 644, 652, 653, 654, 656, 670, 672, 687, 715, 752, 760, 761, 766, 767, 774, 776, 780, 781, 791, 801, 804, 810, 814, 821, 828, 841, 842, 843, 844, 845, 853, 854, 855, 860, 861, 869, 880, 904, 921, 942, 947, 949, 951, 952, 953, 955, 956, 958, 959, 965, 966, 972, 973, 974, 978, 982, 986, 988, 989, 993, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1009], "relat": [3, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 323, 324, 325, 326, 327, 340, 341, 344, 348, 349, 350, 352, 353, 354, 357, 359, 360, 362, 364, 367, 372, 373, 374, 375, 376, 377, 378, 380, 383, 414, 428, 433, 460, 513, 514, 526, 527, 603, 637, 641, 656, 665, 686, 706, 783, 788, 823, 824, 826, 829, 830, 835, 838, 840, 841, 844, 853, 869, 942, 945, 947, 953, 954, 956, 957, 960, 963, 968, 969, 970, 973, 974, 989, 993, 997, 998, 999, 1001, 1002, 1005, 1006, 1009], "engin": [3, 37, 106, 111, 142, 150, 153, 154, 182, 332, 339, 342, 373, 379, 381, 428, 460, 526, 603, 637, 665, 783, 788, 823, 824, 826, 829, 830, 835, 838, 840, 844, 943, 945, 953, 963, 974, 999], "topic": [3, 6, 7, 8, 66, 150, 319, 320, 321, 340, 341, 377, 378, 381, 452, 461, 500, 502, 504, 511, 552, 555, 949, 954, 972, 973, 974, 987, 998, 1000], "extract": [3, 4, 6, 8, 11, 12, 17, 47, 52, 65, 66, 67, 79, 87, 107, 131, 135, 150, 196, 231, 237, 242, 246, 276, 300, 310, 319, 321, 328, 337, 340, 342, 347, 351, 354, 357, 373, 374, 377, 378, 414, 416, 419, 420, 426, 428, 452, 453, 457, 458, 467, 468, 495, 498, 499, 500, 501, 502, 503, 504, 505, 507, 509, 510, 511, 547, 548, 552, 553, 555, 557, 558, 561, 563, 595, 682, 751, 762, 776, 802, 824, 825, 870, 902, 910, 917, 942, 950, 954, 958, 963, 967, 972, 974, 977, 979, 983, 984, 989, 993, 994, 1002, 1005], "neg": [3, 4, 6, 16, 23, 57, 71, 73, 80, 107, 113, 114, 118, 150, 152, 153, 159, 171, 177, 181, 199, 228, 229, 235, 238, 241, 245, 247, 248, 258, 278, 282, 291, 319, 351, 359, 360, 373, 377, 380, 381, 382, 384, 385, 396, 404, 408, 416, 429, 433, 446, 447, 448, 452, 495, 497, 499, 500, 501, 502, 504, 506, 508, 511, 516, 517, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 532, 534, 552, 555, 556, 559, 560, 562, 563, 564, 566, 568, 569, 570, 571, 572, 573, 575, 599, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 624, 625, 626, 627, 628, 629, 631, 633, 634, 636, 637, 641, 642, 643, 644, 651, 662, 663, 668, 669, 676, 677, 679, 680, 682, 683, 685, 686, 687, 690, 692, 693, 694, 698, 701, 704, 706, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 721, 722, 745, 746, 747, 748, 750, 753, 754, 756, 760, 761, 768, 784, 786, 791, 798, 799, 808, 811, 816, 823, 832, 841, 843, 844, 849, 853, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 900, 902, 921, 951, 953, 954, 956, 957, 958, 959, 967, 968, 974, 987, 988, 989, 993, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1010], "matrix": [3, 6, 7, 9, 13, 14, 19, 20, 21, 30, 32, 36, 38, 41, 51, 59, 66, 74, 75, 76, 77, 79, 87, 88, 89, 97, 144, 150, 156, 159, 167, 182, 186, 209, 212, 213, 215, 229, 231, 245, 275, 291, 294, 296, 297, 311, 319, 320, 321, 327, 332, 340, 341, 342, 345, 347, 351, 354, 357, 358, 359, 370, 374, 375, 376, 381, 382, 383, 384, 385, 395, 396, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 416, 418, 421, 423, 424, 426, 427, 428, 429, 431, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 444, 446, 447, 448, 449, 451, 452, 453, 456, 460, 461, 464, 465, 466, 467, 468, 469, 472, 473, 474, 483, 485, 487, 488, 490, 491, 493, 495, 496, 497, 498, 499, 500, 501, 502, 504, 505, 508, 509, 510, 511, 512, 513, 514, 517, 518, 519, 520, 521, 522, 523, 524, 526, 527, 528, 529, 530, 531, 532, 533, 534, 545, 546, 547, 549, 550, 552, 553, 554, 555, 557, 558, 567, 568, 569, 570, 571, 572, 573, 575, 584, 593, 594, 595, 597, 599, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 671, 676, 677, 678, 679, 680, 682, 692, 693, 694, 697, 701, 702, 703, 704, 717, 718, 721, 722, 723, 724, 726, 727, 729, 730, 731, 733, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 746, 747, 750, 751, 755, 756, 759, 760, 761, 762, 765, 766, 776, 786, 787, 788, 789, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 807, 808, 809, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 828, 829, 830, 831, 832, 834, 836, 837, 838, 840, 842, 843, 844, 845, 847, 848, 849, 850, 852, 854, 855, 856, 857, 858, 859, 860, 861, 862, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 881, 883, 884, 885, 886, 891, 899, 900, 901, 902, 903, 906, 907, 908, 916, 917, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 939, 943, 945, 947, 949, 950, 954, 955, 956, 957, 963, 964, 965, 966, 967, 968, 969, 970, 974, 986, 987, 988, 989, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "factor": [3, 6, 9, 25, 29, 41, 43, 50, 52, 59, 86, 92, 96, 119, 150, 153, 195, 206, 208, 218, 249, 250, 258, 259, 273, 274, 278, 280, 289, 291, 306, 332, 333, 345, 351, 354, 359, 370, 372, 373, 380, 381, 383, 404, 406, 418, 433, 435, 436, 437, 438, 440, 442, 452, 468, 478, 479, 491, 496, 499, 500, 502, 504, 505, 508, 509, 510, 511, 513, 514, 525, 526, 527, 552, 555, 561, 577, 613, 614, 615, 618, 619, 620, 646, 647, 656, 683, 746, 762, 765, 766, 787, 811, 845, 859, 861, 869, 901, 902, 942, 949, 950, 956, 963, 966, 970, 972, 974, 988, 989, 993, 994, 996, 997, 999, 1007, 1009], "latent": [3, 6, 17, 97, 150, 276, 320, 376, 381, 383, 452, 496, 500, 502, 503, 504, 507, 508, 552, 555, 821, 952, 972, 974, 987, 988, 989, 995, 998], "dirichlet": [3, 6, 150, 224, 225, 230, 233, 381, 452, 500, 502, 504, 552, 555, 760, 972, 974, 988, 989, 993, 998, 999], "alloc": [3, 6, 24, 58, 150, 250, 289, 341, 345, 346, 373, 381, 407, 411, 423, 452, 500, 502, 504, 548, 552, 555, 610, 616, 624, 626, 765, 766, 768, 784, 789, 792, 942, 963, 972, 974, 988, 989, 997, 998, 1003, 1004, 1010], "visual": [3, 4, 9, 13, 16, 20, 24, 28, 30, 40, 43, 46, 49, 54, 57, 58, 75, 84, 86, 89, 91, 94, 96, 106, 107, 115, 117, 119, 123, 124, 145, 149, 150, 154, 156, 165, 172, 181, 183, 199, 201, 202, 206, 207, 210, 213, 219, 220, 229, 231, 232, 234, 235, 239, 240, 243, 245, 247, 248, 263, 267, 268, 272, 274, 278, 282, 283, 287, 289, 297, 311, 337, 341, 343, 351, 352, 370, 375, 377, 378, 379, 380, 402, 405, 409, 410, 418, 436, 460, 466, 468, 471, 474, 478, 486, 496, 498, 505, 528, 530, 535, 595, 597, 622, 653, 656, 661, 662, 664, 665, 666, 682, 690, 745, 752, 763, 764, 767, 768, 779, 780, 781, 782, 783, 784, 791, 822, 826, 830, 834, 835, 837, 841, 842, 843, 845, 867, 870, 879, 898, 948, 950, 951, 956, 957, 959, 960, 963, 969, 972, 974, 978, 989, 996, 1003, 1004, 1005, 1007], "stock": [3, 43, 150, 201, 202, 373, 375, 418, 436, 653, 974, 981], "market": [3, 43, 150, 201, 202, 373, 375, 418, 436, 653, 974, 977, 981], "wikipedia": [3, 23, 150, 353, 372, 373, 559, 571, 572, 600, 620, 632, 635, 646, 647, 659, 668, 669, 671, 673, 676, 680, 682, 689, 692, 693, 694, 697, 698, 701, 706, 719, 746, 748, 749, 751, 752, 755, 756, 807, 808, 813, 814, 815, 816, 843, 859, 873, 874, 945, 949, 953, 956, 965, 969, 974, 987, 993, 1000], "princip": [3, 78, 79, 83, 89, 91, 92, 93, 95, 119, 150, 201, 213, 216, 267, 283, 289, 337, 373, 376, 385, 448, 495, 496, 497, 498, 499, 501, 503, 504, 505, 506, 507, 508, 509, 510, 514, 621, 652, 653, 654, 656, 657, 791, 814, 826, 845, 901, 902, 950, 956, 974, 988, 989, 993], "eigenvector": [3, 43, 80, 83, 150, 224, 373, 416, 426, 498, 499, 505, 514, 652, 653, 655, 659, 950, 974, 993, 997, 1007], "end": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 152, 153, 154, 155, 156, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 323, 324, 325, 326, 327, 343, 345, 347, 349, 357, 359, 360, 363, 364, 370, 373, 374, 376, 380, 414, 420, 432, 452, 453, 472, 473, 501, 510, 521, 522, 523, 524, 528, 529, 530, 609, 610, 611, 614, 615, 616, 617, 618, 619, 624, 625, 626, 627, 645, 646, 647, 648, 762, 765, 766, 776, 783, 786, 823, 825, 863, 873, 874, 875, 876, 906, 907, 937, 942, 945, 949, 950, 952, 953, 963, 965, 967, 972, 977, 984, 987, 998, 1000, 1003, 1006, 1007], "download": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 126, 127, 128, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 150, 152, 153, 154, 155, 156, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 323, 324, 325, 326, 327, 338, 340, 342, 343, 349, 350, 353, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 474, 969, 983, 985, 987, 989, 997, 998, 1001, 1005, 1006, 1007], "exampl": [4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 332, 333, 342, 344, 345, 347, 348, 349, 351, 352, 353, 354, 355, 358, 359, 363, 366, 367, 372, 384, 385, 386, 388, 389, 391, 392, 394, 395, 398, 399, 400, 403, 420, 421, 423, 425, 427, 435, 442, 444, 445, 449, 450, 467, 471, 472, 480, 481, 482, 493, 495, 509, 510, 511, 512, 519, 536, 537, 541, 547, 549, 556, 559, 560, 562, 565, 567, 573, 576, 580, 584, 585, 588, 590, 593, 600, 601, 602, 606, 614, 615, 618, 624, 625, 627, 631, 639, 651, 658, 659, 660, 663, 672, 674, 675, 678, 679, 680, 684, 685, 686, 687, 688, 689, 691, 693, 694, 696, 699, 702, 703, 706, 707, 710, 714, 717, 719, 721, 722, 723, 726, 727, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 743, 744, 746, 754, 757, 759, 769, 770, 771, 772, 773, 774, 775, 785, 797, 799, 801, 805, 806, 815, 816, 817, 819, 820, 827, 828, 831, 833, 836, 847, 848, 850, 852, 853, 855, 856, 857, 860, 864, 866, 875, 876, 877, 878, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 893, 894, 895, 896, 898, 900, 901, 902, 903, 904, 905, 907, 908, 915, 916, 917, 918, 921, 922, 924, 925, 926, 928, 929, 930, 931, 932, 933, 934, 938, 939, 940, 941, 943, 951, 973, 974, 975, 977, 979, 982, 983, 987, 989, 994, 995, 996, 997, 999, 1000, 1001, 1003, 1006, 1008, 1009, 1010], "run": [4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 152, 153, 154, 155, 156, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 323, 324, 325, 326, 327, 328, 332, 333, 343, 345, 346, 347, 349, 350, 351, 352, 353, 357, 359, 360, 363, 369, 373, 375, 377, 380, 383, 384, 385, 401, 407, 408, 410, 411, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 426, 428, 431, 432, 435, 436, 495, 496, 497, 498, 499, 501, 503, 505, 506, 507, 509, 510, 512, 519, 520, 521, 522, 527, 528, 529, 530, 531, 532, 533, 534, 546, 556, 558, 559, 560, 562, 563, 564, 566, 574, 575, 594, 598, 604, 610, 611, 613, 615, 616, 617, 619, 620, 624, 625, 626, 627, 646, 647, 652, 653, 654, 655, 656, 657, 658, 744, 762, 765, 766, 768, 776, 784, 786, 787, 788, 789, 790, 792, 797, 798, 807, 808, 809, 811, 813, 815, 816, 817, 818, 819, 822, 823, 824, 827, 860, 861, 863, 865, 866, 867, 868, 869, 870, 871, 873, 874, 896, 897, 921, 924, 927, 942, 952, 954, 957, 966, 968, 969, 972, 973, 977, 978, 985, 987, 993, 996, 998, 1000, 1001, 1002, 1003, 1007, 1008, 1009], "yourbrowser": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 152, 153, 154, 155, 156, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 323, 324, 325, 326, 327, 345, 353, 963, 1010], "jupyterlit": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 152, 153, 154, 155, 156, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 323, 324, 325, 326, 327], "binder": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 152, 153, 154, 155, 156, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 323, 324, 325, 326, 327], "notebook": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 152, 153, 154, 155, 156, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 323, 324, 325, 326, 327, 346, 347, 351, 374, 432, 863, 969, 971, 972, 973, 1004, 1007], "introduc": [4, 73, 75, 76, 92, 134, 150, 155, 160, 165, 185, 207, 212, 215, 218, 220, 245, 292, 293, 321, 338, 341, 343, 345, 347, 349, 350, 353, 357, 359, 364, 371, 373, 375, 377, 378, 380, 381, 397, 405, 406, 407, 409, 411, 413, 423, 428, 432, 446, 447, 448, 449, 460, 468, 479, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 513, 519, 520, 530, 531, 532, 533, 534, 545, 546, 547, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 571, 572, 591, 592, 593, 594, 599, 602, 603, 604, 605, 606, 622, 628, 649, 650, 652, 653, 656, 791, 809, 814, 817, 821, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 857, 858, 859, 863, 947, 949, 952, 955, 956, 959, 963, 965, 967, 968, 974, 978, 985, 993, 994, 999, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009], "differ": [4, 5, 7, 10, 12, 14, 15, 16, 20, 23, 26, 28, 29, 32, 33, 34, 36, 38, 39, 40, 42, 43, 44, 46, 49, 50, 52, 53, 54, 55, 57, 61, 62, 63, 64, 66, 67, 68, 70, 75, 79, 80, 83, 84, 85, 87, 89, 90, 92, 94, 95, 96, 101, 104, 106, 107, 110, 111, 112, 114, 116, 121, 122, 123, 124, 126, 128, 130, 135, 136, 137, 138, 139, 142, 143, 144, 148, 149, 150, 152, 153, 155, 158, 160, 161, 164, 167, 168, 169, 170, 172, 178, 181, 182, 183, 185, 186, 187, 188, 189, 198, 199, 201, 202, 203, 204, 206, 208, 210, 213, 214, 215, 218, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 252, 253, 255, 257, 258, 261, 264, 265, 267, 273, 274, 277, 279, 280, 282, 283, 287, 302, 303, 305, 306, 307, 309, 310, 315, 316, 319, 320, 321, 328, 332, 333, 334, 339, 340, 342, 343, 344, 345, 348, 350, 352, 354, 358, 359, 363, 367, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 386, 398, 401, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 422, 423, 426, 428, 439, 442, 454, 457, 458, 460, 467, 468, 472, 473, 476, 478, 486, 501, 502, 503, 504, 510, 511, 513, 514, 519, 520, 527, 545, 546, 552, 553, 554, 555, 558, 575, 577, 578, 579, 583, 586, 587, 591, 595, 596, 597, 598, 602, 607, 608, 611, 613, 615, 617, 619, 622, 625, 630, 631, 632, 636, 638, 640, 641, 642, 644, 654, 656, 658, 662, 664, 665, 668, 669, 670, 671, 673, 679, 681, 682, 690, 691, 692, 693, 694, 697, 698, 700, 706, 720, 721, 722, 724, 741, 745, 746, 747, 749, 750, 752, 755, 756, 758, 761, 762, 764, 765, 766, 767, 768, 771, 776, 777, 778, 779, 780, 781, 782, 784, 786, 788, 789, 792, 800, 801, 802, 803, 804, 805, 806, 807, 808, 811, 815, 818, 821, 825, 830, 834, 835, 837, 838, 839, 840, 841, 842, 843, 845, 846, 850, 851, 852, 853, 854, 855, 856, 865, 866, 867, 870, 873, 874, 875, 876, 910, 917, 942, 943, 945, 946, 948, 950, 951, 952, 953, 954, 955, 956, 957, 959, 960, 961, 963, 966, 967, 968, 969, 970, 972, 973, 974, 977, 978, 980, 981, 982, 986, 987, 993, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "strategi": [4, 13, 49, 51, 55, 58, 67, 111, 116, 121, 127, 132, 134, 148, 149, 150, 155, 165, 170, 181, 189, 199, 210, 218, 220, 231, 237, 239, 241, 242, 243, 245, 246, 247, 248, 250, 257, 272, 275, 277, 279, 280, 284, 285, 287, 288, 291, 321, 331, 347, 351, 358, 359, 377, 380, 381, 382, 385, 401, 402, 403, 411, 416, 426, 436, 466, 468, 476, 478, 486, 497, 502, 515, 516, 525, 526, 528, 529, 531, 532, 535, 552, 553, 555, 556, 558, 566, 591, 592, 594, 598, 609, 611, 615, 617, 619, 625, 627, 629, 637, 639, 655, 659, 668, 677, 695, 718, 720, 758, 762, 765, 766, 768, 776, 779, 782, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 797, 798, 822, 830, 835, 846, 860, 865, 867, 870, 873, 874, 875, 876, 924, 942, 943, 952, 954, 955, 956, 957, 959, 961, 963, 967, 968, 969, 972, 974, 982, 987, 989, 996, 997, 998, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1011], "leverag": [4, 8, 34, 46, 80, 199, 319, 320, 332, 333, 343, 377, 380, 840, 942, 949, 978, 996, 1008], "task": [4, 7, 90, 108, 109, 115, 133, 134, 145, 150, 159, 165, 167, 168, 170, 180, 181, 197, 201, 218, 235, 257, 311, 321, 332, 334, 340, 342, 343, 344, 345, 349, 350, 351, 354, 357, 358, 359, 378, 380, 381, 382, 383, 412, 425, 457, 469, 479, 556, 559, 560, 562, 563, 564, 568, 569, 570, 573, 596, 597, 610, 611, 616, 617, 624, 625, 626, 627, 638, 645, 648, 690, 692, 693, 717, 745, 747, 750, 752, 763, 767, 780, 785, 919, 920, 950, 953, 954, 955, 956, 964, 966, 968, 969, 971, 973, 974, 975, 976, 977, 978, 985, 986, 987, 989, 993, 998, 1002, 1008], "highli": [4, 9, 68, 75, 76, 89, 97, 117, 165, 176, 186, 238, 241, 247, 274, 311, 320, 332, 333, 345, 347, 351, 371, 373, 377, 380, 381, 416, 426, 460, 527, 635, 656, 774, 776, 821, 949, 953, 956, 957, 959, 967, 968, 971, 972], "depend": [4, 5, 7, 13, 34, 50, 71, 91, 107, 111, 114, 115, 118, 121, 130, 134, 143, 148, 150, 151, 153, 156, 158, 161, 165, 199, 202, 207, 208, 214, 218, 229, 238, 239, 243, 244, 245, 258, 274, 278, 283, 289, 292, 304, 311, 315, 320, 321, 328, 332, 333, 334, 338, 345, 347, 348, 353, 354, 357, 358, 359, 360, 362, 363, 366, 367, 369, 372, 373, 375, 377, 378, 380, 381, 382, 383, 384, 402, 403, 404, 408, 410, 411, 413, 414, 416, 418, 421, 423, 424, 426, 428, 433, 448, 453, 454, 455, 457, 460, 464, 465, 466, 468, 469, 474, 498, 499, 505, 508, 515, 523, 524, 526, 552, 553, 554, 555, 566, 568, 571, 572, 575, 591, 596, 597, 602, 604, 612, 622, 623, 633, 635, 637, 640, 641, 642, 644, 651, 654, 655, 658, 659, 692, 693, 701, 704, 741, 744, 746, 747, 750, 755, 756, 760, 761, 781, 790, 807, 808, 809, 811, 813, 814, 815, 816, 817, 823, 824, 826, 838, 839, 842, 845, 859, 866, 867, 870, 874, 883, 942, 943, 945, 946, 947, 949, 950, 952, 953, 955, 956, 957, 958, 961, 965, 967, 968, 969, 974, 978, 985, 987, 989, 990, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1008, 1009, 1010], "busi": [4, 181, 238, 353, 357, 751, 949, 953, 977], "dai": [4, 12, 13, 142, 154, 182, 333, 342, 345, 844, 977, 999, 1000, 1007, 1008], "week": [4, 13, 294, 344, 345, 360, 460, 977, 1007], "yearli": 4, "season": [4, 13, 142, 154, 182, 344], "perform": [4, 7, 13, 19, 23, 24, 25, 26, 30, 33, 35, 45, 46, 50, 54, 55, 56, 57, 58, 59, 61, 63, 64, 66, 67, 70, 73, 80, 90, 96, 99, 101, 107, 109, 111, 112, 113, 115, 116, 120, 121, 126, 130, 134, 135, 138, 146, 148, 149, 150, 153, 154, 155, 156, 158, 165, 170, 181, 183, 185, 187, 188, 189, 198, 199, 202, 203, 205, 208, 213, 216, 218, 226, 229, 231, 233, 234, 235, 236, 238, 239, 240, 243, 244, 246, 247, 249, 251, 253, 255, 257, 258, 271, 276, 278, 280, 282, 284, 285, 287, 293, 294, 295, 297, 298, 307, 310, 311, 313, 315, 319, 321, 328, 331, 333, 334, 340, 342, 347, 348, 349, 351, 353, 354, 357, 358, 359, 362, 364, 367, 368, 369, 370, 371, 372, 374, 375, 376, 378, 379, 380, 381, 382, 383, 384, 385, 391, 395, 404, 406, 407, 408, 410, 411, 412, 414, 416, 418, 419, 423, 425, 432, 433, 446, 447, 448, 449, 458, 466, 476, 479, 495, 496, 497, 499, 501, 506, 507, 508, 509, 510, 512, 514, 515, 516, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 545, 546, 547, 552, 553, 554, 555, 558, 565, 566, 567, 574, 575, 591, 594, 595, 602, 604, 609, 615, 618, 619, 620, 622, 628, 629, 630, 631, 632, 634, 637, 639, 640, 641, 642, 646, 647, 649, 651, 653, 654, 657, 658, 661, 667, 668, 669, 671, 672, 676, 677, 689, 692, 693, 701, 703, 705, 718, 719, 720, 741, 746, 747, 749, 750, 751, 757, 758, 759, 760, 761, 762, 765, 766, 773, 774, 776, 780, 786, 787, 788, 790, 791, 794, 797, 798, 800, 801, 802, 803, 804, 805, 806, 812, 814, 820, 821, 822, 823, 825, 826, 828, 831, 832, 834, 835, 837, 838, 839, 841, 842, 845, 846, 848, 850, 851, 852, 854, 855, 856, 860, 861, 863, 867, 868, 869, 870, 871, 873, 874, 875, 876, 885, 886, 926, 937, 942, 943, 945, 947, 949, 950, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 963, 966, 967, 968, 969, 972, 973, 974, 977, 978, 979, 982, 985, 988, 989, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1010], "sklearn": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 332, 333, 334, 338, 339, 340, 343, 344, 345, 346, 347, 349, 350, 351, 353, 354, 357, 358, 359, 362, 363, 364, 367, 369, 371, 373, 374, 375, 377, 378, 379, 380, 381, 382, 383, 942, 943, 945, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 959, 960, 961, 963, 964, 965, 966, 967, 968, 969, 972, 973, 978, 982, 983, 984, 985, 986, 987, 990, 993, 994, 995, 996, 997, 998, 999, 1000], "preprocess": [4, 5, 6, 10, 29, 39, 41, 46, 50, 52, 55, 59, 66, 67, 68, 69, 71, 80, 87, 97, 106, 111, 131, 135, 142, 146, 155, 158, 160, 162, 169, 170, 172, 181, 182, 187, 197, 199, 202, 209, 210, 219, 222, 235, 245, 247, 252, 261, 266, 267, 273, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 294, 300, 307, 310, 320, 334, 337, 339, 342, 345, 350, 358, 359, 369, 370, 373, 374, 377, 380, 381, 382, 428, 429, 430, 431, 453, 531, 545, 546, 552, 553, 555, 594, 622, 623, 636, 638, 640, 642, 651, 794, 825, 826, 865, 866, 867, 868, 870, 871, 943, 949, 954, 957, 964, 967, 968, 970, 972, 974, 976, 977, 978, 983, 984, 987, 989, 993, 994, 995, 996, 997, 998, 999, 1000], "splinetransform": [4, 182, 218, 290, 840, 963, 1006, 1008, 1009], "class": [4, 8, 9, 10, 11, 14, 16, 19, 22, 23, 24, 26, 28, 32, 37, 51, 52, 53, 55, 67, 68, 83, 84, 85, 92, 95, 97, 99, 100, 107, 109, 117, 122, 135, 137, 138, 140, 141, 145, 146, 148, 150, 153, 154, 158, 159, 171, 172, 173, 189, 193, 196, 197, 202, 208, 215, 216, 218, 224, 225, 226, 231, 232, 233, 238, 240, 244, 248, 249, 255, 257, 258, 261, 263, 264, 266, 267, 268, 269, 283, 287, 291, 293, 294, 296, 298, 299, 302, 303, 305, 307, 308, 311, 316, 319, 320, 321, 324, 327, 334, 337, 339, 340, 341, 342, 345, 346, 347, 349, 350, 351, 352, 354, 357, 358, 363, 369, 371, 373, 374, 376, 378, 382, 383, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 425, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 446, 447, 448, 449, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 464, 466, 467, 468, 472, 473, 474, 476, 478, 479, 483, 486, 487, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 545, 546, 547, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 599, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 652, 653, 654, 655, 656, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 672, 673, 676, 677, 678, 679, 680, 681, 682, 684, 690, 692, 693, 694, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 717, 718, 720, 745, 746, 747, 749, 750, 751, 752, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 786, 788, 789, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 857, 858, 860, 861, 862, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 890, 891, 892, 893, 894, 896, 897, 909, 910, 911, 914, 919, 921, 923, 924, 937, 939, 942, 943, 944, 945, 947, 948, 949, 950, 952, 954, 955, 957, 960, 961, 963, 964, 966, 969, 973, 974, 975, 977, 978, 982, 985, 987, 989, 990, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "extrapol": [4, 137, 160, 182, 211, 241, 844, 953, 963, 969, 1006, 1008], "option": [4, 28, 43, 49, 94, 107, 115, 143, 149, 162, 165, 182, 218, 241, 247, 288, 319, 323, 328, 334, 339, 340, 341, 343, 345, 346, 348, 350, 351, 353, 354, 357, 359, 360, 363, 367, 373, 374, 376, 377, 378, 380, 381, 384, 397, 401, 405, 406, 407, 408, 409, 410, 411, 412, 413, 416, 423, 425, 426, 427, 428, 429, 432, 433, 434, 435, 436, 437, 438, 439, 440, 446, 447, 448, 449, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 545, 546, 547, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 574, 575, 576, 577, 578, 579, 580, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 596, 597, 598, 599, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 651, 652, 653, 654, 656, 658, 659, 675, 677, 681, 692, 693, 698, 699, 700, 720, 721, 722, 727, 729, 730, 734, 737, 738, 739, 740, 741, 744, 746, 747, 750, 755, 756, 758, 763, 764, 765, 766, 768, 769, 771, 780, 784, 789, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 814, 815, 816, 817, 821, 822, 823, 824, 825, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 857, 858, 860, 861, 863, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 879, 892, 939, 942, 943, 949, 952, 953, 956, 963, 966, 968, 969, 973, 985, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "load": [4, 6, 11, 12, 13, 15, 25, 30, 43, 45, 50, 67, 68, 82, 87, 97, 106, 108, 110, 112, 117, 118, 121, 122, 124, 132, 133, 142, 153, 154, 158, 162, 177, 178, 181, 189, 197, 210, 211, 215, 217, 218, 219, 220, 222, 229, 234, 236, 238, 243, 245, 250, 255, 258, 262, 267, 274, 275, 276, 288, 289, 291, 292, 294, 298, 299, 300, 324, 327, 332, 337, 340, 342, 348, 351, 358, 367, 372, 376, 377, 378, 380, 446, 447, 448, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 496, 498, 507, 805, 806, 902, 963, 973, 979, 981, 983, 989, 993, 998, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "openml": [4, 13, 67, 121, 142, 153, 181, 189, 197, 199, 209, 255, 257, 275, 338, 363, 460, 989, 1001, 1003, 1006], "repositori": [4, 8, 13, 158, 293, 338, 340, 342, 343, 345, 347, 349, 353, 360, 363, 468, 972, 976, 989], "import": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 130, 131, 132, 133, 134, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 323, 324, 325, 326, 327, 328, 332, 333, 334, 339, 340, 343, 344, 345, 347, 349, 350, 351, 352, 353, 354, 357, 358, 359, 362, 363, 364, 367, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 459, 460, 462, 464, 465, 466, 467, 468, 470, 471, 472, 474, 476, 478, 479, 480, 481, 482, 483, 485, 487, 488, 491, 493, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 541, 543, 544, 545, 546, 547, 548, 549, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 648, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 726, 727, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 914, 915, 916, 917, 918, 921, 922, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 937, 938, 939, 940, 941, 942, 943, 945, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 959, 960, 963, 964, 965, 966, 967, 968, 969, 973, 974, 977, 978, 981, 982, 983, 984, 985, 986, 987, 989, 990, 993, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1008], "fetch_openml": [4, 5, 13, 67, 71, 111, 121, 142, 153, 154, 155, 181, 189, 197, 199, 209, 218, 222, 255, 257, 258, 275, 284, 287, 291, 294, 339, 349, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "bike_shar": [4, 13], "bike_sharing_demand": [4, 13, 154], "version": [4, 13, 43, 50, 52, 67, 87, 92, 101, 139, 149, 154, 155, 158, 165, 179, 182, 183, 189, 195, 197, 215, 218, 222, 257, 275, 283, 287, 288, 289, 290, 292, 293, 294, 307, 319, 332, 340, 344, 345, 346, 347, 348, 351, 353, 354, 357, 359, 360, 363, 366, 367, 372, 373, 374, 376, 378, 380, 381, 383, 384, 385, 391, 395, 396, 397, 398, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 446, 447, 448, 449, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 464, 465, 466, 468, 469, 472, 473, 474, 476, 478, 486, 487, 490, 491, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 545, 546, 547, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 664, 665, 666, 668, 671, 672, 677, 678, 682, 685, 686, 687, 688, 690, 691, 692, 693, 694, 697, 702, 703, 704, 705, 706, 709, 713, 714, 716, 717, 720, 721, 722, 724, 729, 730, 732, 741, 745, 746, 747, 748, 750, 752, 753, 754, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 775, 776, 780, 781, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 851, 853, 854, 855, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 878, 879, 883, 885, 886, 896, 897, 901, 902, 909, 910, 911, 912, 913, 916, 919, 920, 921, 923, 928, 934, 939, 940, 942, 945, 947, 950, 953, 955, 957, 959, 961, 966, 967, 969, 972, 973, 976, 986, 991], "2": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 36, 37, 39, 40, 41, 42, 43, 44, 45, 47, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 126, 128, 131, 132, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 152, 153, 154, 155, 156, 158, 159, 161, 162, 163, 164, 165, 166, 167, 169, 170, 172, 173, 174, 175, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 257, 258, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 293, 294, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 323, 324, 325, 326, 327, 328, 332, 333, 334, 339, 340, 342, 343, 345, 347, 349, 350, 351, 352, 354, 357, 358, 359, 363, 364, 365, 366, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 394, 395, 396, 397, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 432, 433, 435, 436, 437, 438, 439, 442, 443, 444, 446, 447, 448, 449, 457, 460, 464, 465, 468, 471, 472, 473, 474, 476, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 492, 493, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 541, 545, 546, 548, 549, 552, 553, 554, 555, 557, 558, 559, 560, 561, 562, 565, 567, 568, 569, 570, 571, 572, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 665, 667, 668, 669, 670, 671, 672, 675, 677, 678, 679, 680, 681, 682, 685, 686, 687, 688, 689, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 719, 720, 721, 722, 726, 727, 730, 731, 732, 734, 736, 737, 738, 739, 741, 744, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 786, 787, 788, 789, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 843, 844, 845, 846, 848, 849, 850, 851, 852, 853, 855, 856, 858, 859, 861, 863, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 878, 880, 881, 882, 883, 885, 886, 887, 891, 894, 900, 901, 902, 903, 904, 905, 906, 907, 908, 914, 915, 916, 917, 918, 919, 921, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 937, 939, 940, 942, 943, 944, 945, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 959, 960, 961, 963, 964, 965, 966, 967, 968, 969, 974, 978, 979, 982, 983, 984, 985, 986, 990, 991, 993, 994, 995, 997, 998, 1010], "as_fram": [4, 5, 13, 67, 71, 107, 111, 121, 142, 153, 154, 155, 156, 169, 170, 181, 189, 197, 199, 218, 222, 255, 258, 261, 275, 283, 284, 287, 289, 291, 292, 339, 340, 453, 454, 455, 456, 460, 464, 465, 466, 468, 469, 474, 1003, 1004, 1005, 1006, 1009], "true": [4, 5, 6, 7, 8, 10, 11, 13, 15, 16, 17, 19, 25, 28, 30, 32, 34, 41, 46, 47, 50, 51, 52, 54, 55, 57, 60, 66, 67, 68, 69, 71, 73, 74, 75, 76, 77, 79, 85, 87, 88, 89, 90, 92, 97, 99, 101, 105, 107, 111, 113, 114, 116, 117, 118, 121, 122, 124, 126, 127, 131, 134, 137, 141, 142, 143, 144, 145, 146, 148, 149, 152, 153, 154, 155, 156, 158, 165, 166, 168, 169, 170, 172, 174, 176, 177, 178, 181, 183, 184, 185, 188, 189, 195, 196, 197, 199, 201, 204, 205, 208, 209, 212, 214, 215, 216, 217, 218, 221, 222, 224, 227, 229, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 257, 258, 260, 261, 263, 264, 267, 271, 273, 274, 275, 276, 279, 283, 284, 285, 287, 289, 291, 292, 293, 294, 297, 299, 300, 301, 310, 314, 315, 316, 319, 320, 321, 323, 324, 327, 328, 332, 333, 338, 340, 341, 343, 345, 346, 347, 350, 351, 352, 354, 358, 359, 362, 364, 367, 369, 370, 371, 373, 374, 375, 377, 378, 380, 381, 382, 383, 385, 386, 387, 388, 390, 392, 393, 395, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 423, 425, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 483, 486, 487, 488, 490, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 545, 546, 547, 549, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 669, 671, 672, 673, 675, 676, 677, 678, 679, 682, 683, 684, 687, 689, 690, 691, 692, 693, 694, 696, 697, 698, 701, 702, 703, 704, 705, 706, 713, 714, 715, 717, 719, 724, 730, 732, 741, 745, 746, 747, 748, 749, 750, 751, 752, 757, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 773, 774, 776, 780, 781, 785, 786, 787, 788, 789, 790, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 883, 884, 885, 886, 896, 902, 903, 914, 915, 918, 919, 923, 924, 925, 926, 934, 939, 941, 942, 943, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 963, 965, 966, 967, 968, 969, 972, 978, 982, 983, 985, 986, 987, 990, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "df": [4, 13, 24, 26, 121, 152, 154, 160, 165, 181, 199, 229, 238, 282, 284, 294, 320, 350, 381, 554, 555, 942, 943, 1010], "frame": [4, 13, 16, 67, 142, 153, 154, 181, 284, 294, 340, 345, 357, 360, 453, 454, 455, 456, 460, 464, 465, 466, 468, 469, 474, 972, 983, 1005], "To": [4, 8, 16, 25, 26, 30, 43, 52, 54, 73, 75, 77, 80, 92, 101, 111, 114, 115, 123, 126, 135, 142, 143, 146, 148, 149, 152, 153, 158, 162, 165, 169, 181, 182, 183, 185, 189, 199, 212, 213, 215, 218, 220, 222, 229, 233, 235, 236, 238, 240, 241, 243, 245, 255, 257, 275, 278, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 317, 320, 323, 328, 332, 333, 338, 339, 343, 345, 346, 347, 349, 350, 351, 353, 357, 359, 360, 363, 364, 367, 369, 370, 373, 374, 375, 376, 377, 378, 380, 381, 410, 412, 413, 414, 425, 428, 431, 456, 460, 466, 467, 471, 472, 495, 501, 502, 503, 505, 507, 508, 509, 510, 521, 522, 523, 524, 528, 529, 533, 561, 575, 591, 596, 610, 611, 616, 617, 620, 622, 623, 624, 625, 626, 627, 648, 664, 676, 691, 726, 748, 756, 765, 766, 787, 794, 825, 836, 841, 855, 856, 865, 866, 870, 873, 874, 875, 876, 892, 902, 921, 940, 942, 943, 945, 948, 949, 950, 951, 953, 954, 955, 956, 959, 960, 963, 967, 968, 969, 977, 978, 982, 984, 985, 987, 993, 996, 998, 999, 1000, 1002, 1004], "get": [4, 5, 9, 12, 16, 17, 19, 34, 45, 49, 53, 88, 92, 114, 123, 132, 135, 137, 142, 143, 148, 153, 154, 155, 156, 174, 183, 196, 199, 201, 216, 236, 239, 240, 242, 246, 249, 255, 258, 263, 271, 279, 287, 294, 297, 300, 304, 307, 309, 312, 317, 319, 321, 323, 333, 338, 339, 340, 343, 345, 346, 347, 350, 351, 352, 353, 359, 363, 367, 369, 371, 372, 373, 374, 375, 377, 378, 380, 381, 382, 383, 387, 388, 389, 394, 396, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 426, 428, 429, 433, 434, 435, 436, 437, 438, 439, 440, 446, 447, 448, 449, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 545, 546, 547, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 571, 572, 574, 575, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 598, 599, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 652, 653, 654, 655, 656, 659, 663, 685, 686, 687, 689, 695, 696, 705, 719, 726, 727, 732, 748, 751, 760, 761, 762, 763, 764, 765, 766, 767, 769, 770, 771, 772, 775, 776, 777, 778, 779, 780, 781, 782, 783, 786, 787, 788, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 821, 822, 823, 824, 825, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 857, 858, 860, 861, 862, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 880, 893, 894, 895, 901, 902, 912, 942, 948, 949, 950, 952, 953, 963, 966, 967, 968, 969, 973, 982, 985, 986, 987, 990, 993, 996, 999, 1001, 1004, 1006, 1007, 1010], "quick": [4, 92, 221, 345, 347, 351, 363, 570, 791, 953, 954, 963, 977, 985, 990], "understand": [4, 9, 13, 38, 101, 142, 150, 154, 215, 233, 236, 289, 290, 304, 311, 319, 322, 323, 328, 343, 344, 345, 346, 351, 357, 362, 373, 380, 381, 468, 791, 822, 823, 873, 874, 875, 876, 879, 942, 943, 950, 952, 969, 971, 972, 974, 977, 993, 1007], "pattern": [4, 13, 16, 20, 60, 77, 83, 86, 94, 137, 148, 150, 154, 165, 185, 215, 218, 290, 319, 320, 321, 328, 342, 345, 347, 360, 370, 373, 374, 378, 380, 381, 412, 428, 430, 468, 496, 498, 505, 519, 520, 602, 672, 688, 704, 732, 751, 752, 760, 845, 945, 947, 949, 953, 954, 960, 968, 970, 973, 974, 977, 1005], "let": [4, 5, 13, 50, 52, 61, 67, 71, 83, 87, 92, 108, 111, 114, 115, 118, 137, 143, 144, 149, 153, 154, 155, 162, 170, 181, 183, 199, 201, 205, 215, 222, 233, 238, 241, 245, 319, 321, 327, 328, 340, 345, 347, 351, 357, 370, 373, 377, 380, 381, 405, 409, 455, 464, 468, 474, 498, 610, 611, 614, 615, 616, 617, 618, 619, 620, 624, 625, 626, 627, 645, 648, 831, 838, 839, 949, 950, 951, 952, 953, 960, 961, 963, 968, 969, 977, 985, 986, 987, 1003], "u": [4, 10, 11, 12, 13, 16, 17, 32, 47, 49, 53, 83, 87, 94, 111, 112, 137, 146, 152, 153, 154, 178, 182, 185, 189, 199, 202, 205, 212, 215, 221, 222, 225, 226, 230, 233, 238, 241, 245, 282, 284, 311, 319, 327, 333, 340, 345, 349, 351, 353, 357, 363, 370, 373, 376, 378, 380, 381, 396, 427, 429, 446, 447, 448, 495, 501, 509, 510, 514, 516, 518, 520, 522, 524, 526, 529, 532, 534, 552, 553, 555, 575, 599, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 624, 625, 626, 627, 628, 629, 631, 634, 636, 637, 642, 643, 645, 648, 653, 657, 668, 684, 703, 718, 798, 799, 808, 816, 823, 845, 859, 866, 868, 871, 874, 876, 902, 945, 947, 952, 953, 960, 963, 977, 987, 990, 1003], "look": [4, 5, 50, 52, 87, 90, 92, 114, 115, 137, 142, 143, 149, 153, 154, 183, 201, 205, 208, 215, 230, 233, 238, 240, 275, 294, 319, 320, 328, 333, 334, 339, 340, 343, 345, 347, 349, 351, 353, 357, 358, 373, 376, 378, 379, 380, 381, 412, 452, 453, 521, 522, 523, 524, 528, 529, 566, 567, 595, 623, 656, 845, 873, 874, 875, 876, 949, 950, 963, 967, 968, 970, 986, 987, 993, 1001, 1003], "averag": [4, 13, 24, 26, 34, 36, 37, 41, 49, 57, 59, 104, 105, 110, 114, 117, 122, 123, 124, 135, 142, 154, 162, 170, 181, 188, 199, 218, 241, 243, 246, 248, 257, 278, 287, 293, 300, 319, 328, 332, 340, 342, 347, 357, 370, 371, 375, 377, 381, 382, 384, 385, 401, 402, 405, 408, 409, 410, 411, 413, 454, 457, 458, 487, 495, 496, 497, 501, 502, 504, 505, 509, 510, 511, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 533, 534, 551, 558, 596, 597, 612, 622, 623, 630, 631, 633, 636, 638, 640, 641, 642, 644, 651, 664, 667, 668, 670, 671, 672, 677, 684, 685, 686, 688, 689, 691, 692, 693, 697, 698, 699, 701, 702, 703, 706, 708, 709, 711, 713, 714, 716, 719, 727, 744, 745, 746, 747, 748, 750, 751, 753, 754, 758, 759, 760, 761, 789, 792, 811, 831, 846, 939, 943, 948, 949, 954, 957, 959, 960, 967, 968, 969, 985, 987, 993, 996, 997, 998, 1000, 1001, 1002, 1003, 1004, 1007, 1008, 1009, 1010], "per": [4, 10, 20, 32, 45, 50, 61, 84, 106, 107, 111, 142, 144, 153, 154, 181, 196, 199, 218, 222, 225, 234, 245, 247, 278, 284, 289, 294, 315, 319, 321, 332, 340, 341, 345, 350, 351, 354, 357, 359, 371, 373, 377, 378, 379, 380, 381, 383, 410, 412, 414, 421, 425, 428, 432, 451, 460, 464, 466, 467, 468, 472, 474, 476, 479, 487, 496, 498, 499, 500, 503, 505, 507, 513, 514, 525, 526, 533, 547, 552, 555, 574, 575, 596, 597, 605, 606, 622, 623, 630, 631, 632, 635, 637, 638, 639, 640, 642, 656, 660, 677, 680, 684, 704, 717, 721, 722, 744, 746, 760, 761, 786, 793, 794, 795, 797, 798, 801, 803, 821, 824, 830, 832, 834, 835, 838, 839, 845, 846, 863, 865, 866, 867, 868, 869, 870, 871, 890, 891, 902, 928, 942, 945, 949, 952, 953, 954, 957, 960, 967, 968, 969, 972, 973, 985, 987, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1005, 1006, 1007, 1009, 1010], "hour": [4, 153, 154, 294, 345, 351, 460, 950, 971], "sundai": 4, "weekend": 4, "clearli": [4, 57, 90, 154, 213, 311, 344, 345, 357, 359, 378, 380, 954, 960], "distinguish": [4, 20, 37, 75, 85, 92, 183, 235, 255, 340, 347, 359, 360, 383, 942, 953, 956, 959], "commut": [4, 13], "morn": 4, "even": [4, 13, 14, 26, 37, 39, 49, 71, 80, 90, 107, 114, 143, 153, 154, 155, 170, 181, 182, 189, 199, 205, 206, 214, 225, 244, 255, 278, 280, 282, 283, 301, 315, 319, 320, 321, 328, 334, 340, 343, 344, 345, 346, 347, 349, 350, 353, 357, 359, 371, 372, 373, 374, 375, 377, 378, 380, 381, 383, 405, 407, 409, 410, 411, 412, 413, 423, 425, 496, 499, 521, 522, 523, 524, 528, 529, 546, 553, 558, 591, 592, 594, 603, 622, 623, 659, 664, 669, 676, 706, 724, 730, 737, 741, 744, 749, 751, 788, 825, 826, 848, 850, 851, 852, 853, 854, 855, 856, 857, 858, 873, 874, 875, 876, 902, 922, 942, 943, 945, 947, 949, 952, 953, 956, 958, 959, 961, 963, 965, 967, 968, 969, 977, 987, 1000, 1001, 1002, 1005, 1007, 1010], "leisur": 4, "spread": [4, 37, 203, 239, 278, 296, 297, 298, 301, 315, 332, 345, 373, 416, 426, 479, 842, 854, 862, 953], "peak": [4, 13, 26, 154, 371, 377, 1007], "middl": [4, 23, 32, 57, 92, 165, 316, 342, 960, 963], "matplotlib": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 68, 69, 71, 73, 74, 75, 76, 77, 79, 80, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 128, 130, 131, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 152, 153, 154, 156, 158, 160, 161, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 208, 209, 211, 212, 213, 214, 216, 217, 218, 219, 221, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 237, 238, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 255, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 291, 292, 294, 296, 297, 298, 299, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 323, 324, 325, 326, 327, 339, 348, 352, 363, 366, 402, 466, 595, 596, 661, 662, 664, 665, 666, 768, 784, 879, 948, 972, 981, 982, 983, 984, 985, 986, 990, 1002, 1005, 1006, 1007, 1008], "pyplot": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 68, 69, 71, 73, 74, 75, 76, 77, 79, 80, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 128, 130, 131, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 152, 153, 154, 156, 158, 160, 161, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 208, 209, 211, 212, 213, 214, 216, 217, 218, 219, 221, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 237, 238, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 255, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 291, 292, 294, 296, 297, 298, 299, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 323, 324, 325, 326, 327, 345, 352, 402, 466, 595, 596, 661, 662, 664, 665, 666, 768, 784, 982, 983, 984, 985, 986, 990, 1007], "plt": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 68, 69, 71, 73, 74, 75, 76, 77, 79, 80, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 128, 130, 131, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 152, 153, 154, 156, 158, 160, 161, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 208, 209, 211, 212, 213, 214, 216, 217, 218, 219, 221, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 237, 238, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 255, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 291, 292, 294, 296, 297, 298, 299, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 323, 324, 325, 326, 327, 352, 402, 466, 595, 596, 661, 662, 664, 665, 666, 768, 784, 879, 960, 982, 983, 984, 985, 986, 990], "fig": [4, 5, 7, 8, 9, 10, 13, 15, 24, 26, 28, 32, 39, 40, 42, 50, 52, 54, 57, 61, 63, 69, 73, 75, 80, 83, 87, 92, 93, 97, 101, 107, 108, 111, 112, 114, 115, 118, 119, 121, 123, 140, 146, 148, 154, 156, 158, 161, 169, 172, 175, 176, 178, 179, 181, 182, 185, 189, 194, 196, 199, 201, 202, 203, 204, 205, 206, 209, 211, 218, 219, 229, 233, 234, 235, 238, 239, 240, 241, 244, 247, 248, 249, 257, 258, 260, 262, 263, 271, 274, 275, 278, 279, 280, 282, 283, 284, 287, 291, 292, 304, 311, 314, 315, 316, 317, 319, 320, 321, 323, 352, 983, 986], "ax": [4, 5, 7, 8, 9, 10, 12, 13, 15, 16, 24, 26, 28, 29, 30, 32, 37, 39, 40, 42, 50, 52, 53, 54, 61, 63, 68, 71, 75, 77, 80, 83, 85, 87, 93, 97, 101, 103, 106, 108, 111, 112, 118, 119, 121, 122, 123, 140, 141, 146, 148, 152, 153, 154, 155, 156, 158, 160, 161, 164, 165, 170, 172, 173, 176, 178, 179, 181, 182, 183, 185, 186, 189, 190, 192, 194, 195, 196, 199, 201, 202, 203, 204, 205, 206, 209, 214, 218, 219, 221, 224, 226, 229, 233, 234, 235, 238, 240, 241, 242, 244, 245, 247, 248, 249, 250, 252, 255, 257, 258, 260, 261, 262, 263, 266, 268, 269, 273, 274, 275, 278, 280, 281, 282, 283, 284, 285, 287, 288, 291, 292, 294, 303, 304, 305, 306, 308, 309, 311, 314, 315, 316, 317, 319, 320, 321, 323, 324, 347, 348, 378, 383, 402, 498, 505, 514, 595, 596, 661, 662, 664, 665, 666, 682, 768, 784, 879, 953, 956, 960, 986, 990, 1003, 1009], "subplot": [4, 5, 6, 8, 9, 10, 11, 13, 14, 15, 28, 29, 30, 32, 36, 40, 41, 47, 48, 50, 51, 52, 53, 54, 57, 59, 62, 63, 69, 71, 74, 75, 76, 77, 79, 80, 83, 84, 85, 87, 88, 89, 90, 92, 96, 97, 101, 103, 104, 106, 107, 108, 110, 111, 112, 115, 118, 119, 121, 122, 123, 130, 139, 141, 146, 148, 149, 153, 154, 156, 158, 161, 164, 172, 173, 175, 176, 179, 180, 181, 182, 183, 185, 189, 194, 195, 197, 199, 201, 202, 205, 206, 208, 209, 211, 213, 214, 216, 217, 218, 219, 224, 225, 226, 227, 229, 230, 233, 234, 235, 238, 240, 241, 243, 244, 245, 247, 248, 249, 251, 252, 257, 258, 260, 261, 262, 263, 266, 267, 269, 270, 271, 273, 274, 275, 276, 279, 280, 281, 282, 283, 284, 287, 291, 292, 299, 301, 304, 305, 306, 307, 311, 314, 315, 316, 317, 319, 320, 321, 323, 324, 352, 983], "figsiz": [4, 5, 6, 10, 12, 13, 14, 15, 24, 25, 26, 28, 29, 30, 32, 36, 37, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 59, 61, 62, 63, 69, 71, 75, 77, 79, 80, 82, 83, 84, 85, 87, 90, 91, 92, 93, 96, 97, 101, 103, 104, 111, 112, 113, 114, 115, 119, 121, 122, 130, 139, 141, 145, 146, 148, 149, 153, 154, 156, 158, 160, 161, 164, 165, 171, 175, 178, 179, 180, 181, 182, 183, 185, 187, 189, 192, 195, 197, 199, 201, 202, 203, 205, 206, 208, 209, 211, 213, 216, 217, 218, 219, 224, 226, 227, 230, 233, 234, 235, 240, 241, 242, 245, 247, 248, 252, 257, 258, 260, 261, 273, 274, 276, 278, 279, 280, 281, 282, 283, 284, 291, 292, 296, 298, 305, 307, 311, 312, 314, 315, 316, 317, 319, 320, 321, 879, 983], "4": [4, 5, 6, 7, 8, 9, 10, 12, 13, 17, 19, 20, 24, 25, 26, 29, 30, 31, 32, 35, 36, 37, 39, 40, 41, 42, 43, 46, 47, 48, 49, 50, 52, 53, 55, 56, 57, 59, 61, 62, 63, 66, 67, 68, 69, 70, 76, 77, 79, 80, 83, 84, 85, 88, 89, 90, 91, 92, 93, 95, 96, 101, 102, 104, 107, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 126, 131, 135, 140, 142, 143, 145, 146, 148, 149, 150, 153, 154, 158, 160, 161, 162, 163, 164, 165, 169, 170, 171, 172, 173, 174, 178, 179, 180, 181, 182, 185, 187, 188, 189, 191, 194, 195, 199, 201, 208, 212, 213, 214, 215, 216, 217, 218, 220, 222, 224, 225, 226, 227, 229, 230, 233, 234, 235, 236, 238, 239, 240, 241, 243, 245, 247, 249, 250, 252, 257, 258, 260, 262, 263, 264, 265, 268, 273, 275, 276, 278, 279, 281, 282, 284, 286, 287, 288, 289, 290, 292, 293, 296, 297, 298, 299, 300, 304, 306, 307, 310, 311, 312, 315, 316, 317, 319, 320, 321, 327, 328, 333, 339, 340, 342, 343, 345, 350, 351, 354, 357, 358, 359, 363, 364, 365, 366, 371, 373, 374, 375, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 394, 395, 396, 397, 401, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 455, 460, 468, 476, 477, 480, 481, 482, 488, 491, 492, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 541, 545, 546, 547, 549, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 578, 581, 582, 583, 586, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 615, 616, 617, 619, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 638, 640, 641, 643, 644, 648, 651, 652, 653, 654, 656, 657, 658, 662, 663, 666, 670, 671, 679, 680, 688, 689, 690, 695, 697, 705, 706, 707, 709, 710, 711, 712, 713, 714, 715, 719, 731, 732, 744, 745, 751, 752, 753, 754, 757, 759, 760, 761, 762, 763, 764, 765, 766, 767, 769, 770, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 786, 787, 788, 789, 791, 793, 794, 795, 796, 799, 800, 801, 802, 804, 809, 813, 814, 817, 821, 822, 823, 824, 825, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 849, 852, 853, 857, 858, 859, 863, 865, 866, 869, 873, 874, 875, 876, 881, 882, 884, 885, 886, 887, 891, 901, 902, 903, 904, 906, 907, 908, 909, 910, 917, 921, 924, 925, 926, 928, 929, 930, 931, 934, 942, 943, 946, 947, 948, 949, 951, 953, 954, 955, 956, 963, 964, 967, 968, 974, 978, 982, 983, 984, 985, 987, 991, 994, 995, 996, 998, 999, 1000, 1002, 1006, 1007, 1008, 1011], "average_week_demand": 4, "groupbi": [4, 69, 154, 189, 199], "weekdai": [4, 13, 154], "count": [4, 13, 15, 24, 26, 38, 46, 50, 66, 67, 85, 122, 123, 153, 154, 181, 183, 199, 212, 222, 247, 255, 258, 288, 289, 320, 321, 327, 340, 342, 349, 354, 359, 360, 371, 372, 373, 378, 380, 381, 410, 413, 453, 460, 500, 508, 545, 552, 553, 554, 555, 558, 568, 581, 604, 661, 669, 679, 682, 692, 693, 701, 717, 746, 747, 749, 750, 800, 804, 805, 806, 814, 817, 828, 877, 879, 904, 918, 942, 945, 949, 953, 955, 956, 963, 969, 977, 987, 993, 996, 998, 1001, 1002, 1004, 1005], "mean": [4, 5, 6, 8, 11, 13, 14, 15, 17, 19, 23, 24, 26, 32, 33, 34, 35, 37, 39, 41, 43, 46, 47, 50, 51, 52, 57, 67, 74, 75, 76, 77, 80, 83, 85, 87, 90, 91, 92, 93, 94, 101, 103, 104, 107, 110, 111, 114, 115, 121, 122, 123, 134, 135, 137, 142, 144, 146, 148, 150, 153, 154, 161, 163, 170, 172, 174, 177, 178, 181, 183, 187, 188, 190, 196, 197, 198, 199, 204, 206, 208, 211, 212, 213, 214, 215, 216, 218, 219, 220, 222, 224, 225, 226, 227, 229, 230, 234, 235, 238, 239, 240, 241, 243, 245, 246, 247, 248, 249, 250, 252, 253, 255, 257, 258, 269, 278, 281, 283, 284, 285, 287, 290, 293, 299, 307, 310, 311, 315, 317, 318, 319, 321, 328, 332, 337, 339, 340, 342, 343, 345, 346, 347, 349, 350, 351, 353, 354, 357, 358, 359, 364, 370, 371, 375, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 390, 396, 401, 402, 403, 404, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 421, 422, 423, 424, 425, 426, 428, 429, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 452, 465, 466, 468, 470, 476, 483, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 547, 552, 553, 554, 555, 558, 561, 566, 570, 571, 572, 573, 574, 575, 577, 586, 591, 592, 594, 596, 597, 598, 599, 603, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 643, 644, 645, 648, 652, 653, 654, 655, 656, 657, 658, 659, 668, 669, 671, 673, 676, 677, 680, 681, 687, 689, 692, 693, 694, 699, 700, 701, 704, 705, 708, 709, 710, 711, 712, 713, 714, 715, 716, 720, 737, 741, 742, 744, 746, 747, 748, 750, 751, 753, 754, 755, 756, 758, 760, 761, 762, 765, 766, 768, 776, 780, 784, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 809, 811, 812, 813, 815, 816, 818, 819, 821, 822, 823, 824, 826, 827, 829, 830, 834, 835, 837, 841, 843, 845, 846, 851, 853, 854, 856, 858, 860, 861, 865, 866, 867, 868, 870, 871, 873, 874, 875, 876, 881, 885, 886, 888, 927, 928, 934, 938, 942, 943, 944, 947, 949, 950, 952, 955, 956, 957, 958, 960, 961, 966, 967, 968, 969, 972, 974, 977, 982, 985, 987, 988, 989, 993, 994, 995, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "plot": [4, 5, 6, 11, 12, 13, 15, 16, 24, 25, 26, 27, 29, 30, 31, 33, 34, 37, 39, 40, 42, 51, 52, 53, 55, 56, 57, 58, 59, 62, 68, 69, 70, 71, 74, 75, 76, 80, 81, 87, 90, 91, 94, 95, 96, 97, 100, 101, 103, 104, 105, 106, 108, 112, 113, 114, 116, 118, 119, 120, 128, 130, 131, 133, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 150, 151, 152, 153, 155, 156, 158, 159, 163, 164, 166, 168, 169, 170, 171, 176, 177, 178, 179, 180, 181, 182, 183, 184, 187, 188, 189, 191, 193, 194, 196, 197, 198, 199, 203, 204, 205, 206, 207, 208, 211, 212, 214, 216, 217, 222, 224, 225, 226, 228, 230, 231, 232, 233, 238, 239, 241, 243, 244, 248, 249, 250, 252, 255, 258, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 273, 274, 275, 278, 279, 280, 281, 282, 283, 285, 288, 291, 292, 293, 294, 297, 298, 299, 301, 302, 303, 307, 308, 309, 312, 313, 314, 315, 316, 317, 320, 321, 322, 323, 325, 326, 327, 345, 348, 354, 357, 362, 363, 368, 371, 373, 375, 377, 379, 380, 402, 405, 410, 414, 420, 428, 435, 460, 465, 466, 468, 476, 479, 483, 487, 517, 521, 524, 526, 528, 529, 533, 534, 574, 586, 595, 596, 597, 621, 622, 636, 640, 661, 662, 664, 665, 666, 667, 682, 690, 698, 724, 745, 747, 750, 751, 752, 762, 768, 779, 784, 786, 787, 788, 789, 792, 803, 807, 823, 826, 838, 839, 840, 842, 845, 865, 867, 870, 873, 874, 879, 946, 947, 949, 950, 952, 953, 956, 957, 959, 967, 968, 969, 972, 973, 974, 982, 983, 985, 989, 994, 996, 997, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "_": [4, 5, 7, 8, 9, 11, 12, 13, 15, 20, 24, 25, 26, 28, 30, 31, 37, 40, 47, 50, 52, 55, 60, 64, 66, 77, 83, 85, 87, 92, 94, 96, 104, 105, 106, 130, 137, 142, 143, 144, 152, 153, 154, 156, 158, 160, 164, 165, 166, 168, 169, 170, 173, 178, 179, 181, 183, 185, 194, 195, 198, 202, 205, 209, 214, 218, 222, 233, 238, 240, 241, 242, 244, 245, 247, 255, 261, 266, 269, 276, 280, 283, 284, 285, 288, 291, 292, 293, 297, 298, 306, 311, 315, 319, 321, 324, 347, 351, 359, 378, 380, 381, 385, 410, 442, 496, 497, 498, 499, 500, 502, 503, 504, 507, 509, 510, 511, 530, 561, 616, 617, 627, 648, 652, 653, 654, 655, 657, 659, 660, 662, 664, 674, 727, 762, 768, 776, 784, 809, 817, 838, 839, 846, 943, 949, 950, 953, 955, 956, 957, 960, 961, 963, 968, 969, 985, 986, 1000], "hourli": [4, 153], "xtick": [4, 6, 8, 11, 28, 32, 37, 41, 43, 47, 48, 49, 55, 56, 59, 77, 79, 90, 111, 113, 139, 140, 141, 145, 164, 171, 177, 194, 208, 216, 225, 226, 227, 230, 237, 238, 252, 262, 271, 276, 284, 296, 307, 310, 312, 313, 661, 983], "24": [4, 5, 13, 63, 135, 150, 154, 158, 165, 250, 258, 284, 286, 287, 288, 290, 293, 294, 296, 297, 315, 349, 363, 373, 380, 381, 401, 404, 405, 406, 408, 409, 411, 412, 413, 414, 415, 416, 417, 424, 426, 428, 433, 434, 435, 436, 437, 438, 439, 440, 453, 454, 455, 456, 460, 468, 479, 480, 481, 482, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 507, 508, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 533, 534, 545, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 574, 575, 577, 591, 592, 593, 594, 596, 597, 598, 599, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 652, 653, 654, 655, 656, 662, 663, 664, 666, 672, 678, 690, 709, 716, 760, 761, 762, 765, 766, 776, 783, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 821, 822, 823, 826, 828, 829, 830, 831, 834, 835, 837, 839, 840, 841, 842, 843, 845, 855, 857, 858, 860, 861, 862, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 896, 897, 901, 928, 934, 942, 960, 963, 974, 991, 993, 1001, 1002, 1003, 1004, 1006], "rang": [4, 5, 6, 7, 8, 10, 12, 16, 17, 19, 20, 24, 25, 26, 30, 31, 34, 35, 37, 39, 43, 44, 45, 47, 48, 52, 57, 58, 60, 61, 62, 73, 74, 76, 77, 101, 103, 104, 105, 108, 114, 120, 130, 134, 138, 153, 154, 158, 165, 170, 171, 175, 179, 181, 182, 185, 188, 189, 197, 199, 202, 204, 211, 212, 217, 218, 224, 226, 229, 230, 233, 237, 238, 239, 241, 242, 243, 245, 246, 247, 249, 250, 251, 252, 257, 262, 268, 271, 276, 278, 283, 284, 287, 291, 292, 297, 307, 315, 319, 320, 324, 327, 333, 339, 340, 342, 345, 347, 351, 354, 359, 367, 373, 377, 380, 383, 404, 425, 433, 435, 436, 437, 438, 439, 440, 442, 445, 455, 458, 459, 478, 491, 505, 517, 518, 523, 524, 527, 552, 553, 555, 593, 596, 602, 604, 612, 613, 633, 635, 640, 641, 642, 644, 656, 676, 694, 709, 751, 791, 797, 811, 813, 815, 816, 821, 835, 842, 843, 844, 850, 851, 854, 855, 858, 859, 901, 902, 921, 942, 949, 953, 957, 967, 973, 977, 981, 982, 983, 985, 998, 999, 1000, 1001, 1003, 1006, 1009], "7": [4, 5, 6, 8, 12, 13, 14, 15, 16, 19, 25, 28, 30, 32, 36, 39, 41, 43, 50, 51, 52, 53, 57, 61, 62, 64, 67, 68, 70, 75, 77, 90, 101, 104, 114, 117, 121, 122, 135, 146, 152, 153, 154, 156, 158, 162, 163, 180, 181, 182, 183, 188, 197, 199, 201, 208, 213, 214, 220, 222, 224, 225, 228, 229, 233, 238, 242, 243, 244, 245, 249, 251, 255, 257, 258, 260, 263, 264, 266, 275, 276, 278, 282, 287, 290, 291, 292, 294, 296, 297, 299, 300, 304, 311, 315, 316, 320, 321, 328, 340, 342, 343, 349, 350, 351, 363, 365, 366, 371, 377, 378, 380, 381, 382, 384, 385, 388, 403, 408, 412, 414, 415, 416, 417, 419, 420, 421, 422, 425, 426, 427, 435, 436, 455, 460, 462, 496, 497, 498, 499, 500, 502, 508, 525, 526, 552, 555, 564, 569, 570, 591, 592, 594, 601, 611, 613, 622, 625, 656, 663, 671, 685, 686, 687, 689, 691, 707, 708, 709, 713, 714, 716, 748, 753, 754, 757, 760, 763, 764, 769, 772, 779, 780, 783, 788, 791, 795, 805, 806, 814, 823, 824, 837, 838, 860, 861, 901, 902, 905, 906, 908, 917, 922, 942, 943, 948, 949, 951, 953, 954, 956, 957, 959, 963, 967, 968, 978, 982, 985, 991, 994, 995, 996, 999, 1000, 1001, 1002, 1006], "xticklabel": [4, 10, 111, 154, 284], "sun": [4, 154, 1001, 1006, 1007], "mon": [4, 154], "tue": [4, 154, 999], "wed": [4, 154], "thu": [4, 5, 23, 24, 25, 26, 37, 50, 52, 57, 73, 77, 90, 92, 104, 106, 107, 109, 111, 131, 137, 142, 143, 154, 165, 169, 170, 181, 183, 199, 208, 214, 219, 226, 236, 238, 243, 244, 245, 261, 285, 287, 290, 323, 328, 332, 333, 340, 347, 351, 357, 359, 371, 373, 377, 378, 380, 381, 383, 384, 401, 403, 427, 479, 491, 517, 518, 519, 520, 521, 522, 527, 528, 529, 530, 567, 570, 574, 586, 591, 596, 597, 607, 609, 622, 641, 669, 682, 688, 751, 758, 764, 769, 771, 783, 796, 799, 834, 865, 944, 945, 946, 947, 948, 949, 950, 953, 954, 959, 960, 963, 965, 966, 967, 968, 973, 977, 993, 995, 999, 1001, 1002, 1003, 1005, 1009], "fri": [4, 154, 340], "sat": [4, 154, 381], "xlabel": [4, 8, 9, 13, 23, 24, 25, 26, 31, 34, 38, 58, 73, 74, 76, 77, 79, 80, 83, 89, 94, 102, 103, 105, 111, 113, 114, 115, 116, 120, 124, 126, 130, 131, 134, 137, 138, 139, 140, 142, 143, 144, 153, 160, 163, 164, 165, 166, 168, 169, 170, 171, 174, 175, 181, 183, 184, 186, 188, 190, 191, 195, 199, 212, 214, 216, 218, 233, 237, 238, 242, 243, 247, 248, 251, 252, 260, 261, 264, 265, 284, 285, 304, 306, 307, 310, 319, 324, 325, 326, 595, 982, 986], "ylabel": [4, 8, 9, 13, 23, 24, 25, 26, 31, 34, 58, 73, 74, 76, 77, 79, 80, 83, 89, 94, 102, 103, 105, 113, 114, 115, 116, 120, 124, 126, 130, 131, 134, 137, 138, 139, 140, 142, 143, 144, 153, 160, 163, 164, 165, 166, 168, 169, 170, 171, 174, 175, 181, 183, 184, 186, 188, 190, 191, 199, 212, 214, 216, 233, 237, 238, 241, 242, 243, 247, 248, 251, 252, 261, 285, 304, 307, 310, 319, 324, 325, 326, 595, 982, 986], "number": [4, 5, 7, 8, 10, 12, 13, 14, 19, 20, 24, 25, 26, 30, 31, 33, 35, 36, 38, 40, 41, 43, 44, 45, 46, 47, 50, 51, 52, 54, 58, 59, 60, 64, 66, 67, 68, 69, 71, 77, 79, 80, 84, 85, 87, 89, 91, 92, 94, 101, 102, 104, 107, 109, 110, 112, 113, 114, 115, 117, 121, 123, 131, 132, 135, 145, 146, 149, 150, 153, 154, 158, 165, 170, 180, 181, 182, 183, 188, 189, 195, 196, 197, 198, 199, 201, 208, 212, 216, 218, 219, 224, 225, 227, 229, 230, 232, 233, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 255, 258, 260, 264, 265, 278, 280, 281, 284, 287, 288, 289, 290, 291, 292, 293, 300, 307, 312, 315, 320, 321, 323, 327, 328, 333, 334, 337, 339, 340, 341, 342, 343, 345, 348, 349, 351, 352, 353, 354, 357, 358, 359, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 396, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 446, 447, 448, 449, 451, 452, 453, 454, 455, 456, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 537, 545, 546, 547, 548, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 571, 572, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 665, 667, 668, 669, 671, 676, 677, 678, 680, 682, 684, 687, 691, 692, 693, 694, 697, 698, 701, 703, 715, 718, 737, 741, 744, 745, 746, 747, 748, 749, 750, 751, 755, 756, 757, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 854, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 885, 886, 889, 901, 902, 905, 906, 921, 922, 924, 927, 928, 945, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 963, 965, 967, 968, 969, 970, 972, 973, 974, 978, 985, 986, 987, 989, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "rental": [4, 13, 154, 960], "target": [4, 6, 13, 17, 19, 25, 28, 30, 31, 42, 49, 65, 67, 69, 70, 80, 83, 91, 93, 95, 102, 109, 110, 111, 112, 114, 115, 118, 120, 121, 122, 124, 128, 130, 133, 135, 137, 139, 142, 143, 149, 150, 152, 153, 154, 155, 160, 163, 164, 165, 174, 177, 181, 183, 185, 186, 189, 190, 202, 209, 211, 212, 213, 214, 217, 218, 219, 226, 232, 234, 236, 239, 241, 243, 244, 247, 248, 255, 257, 258, 261, 266, 269, 270, 274, 277, 278, 288, 289, 291, 293, 296, 297, 300, 301, 303, 304, 307, 311, 313, 314, 319, 320, 324, 325, 326, 327, 328, 332, 334, 337, 338, 339, 340, 341, 342, 347, 349, 350, 353, 354, 358, 362, 373, 376, 377, 380, 383, 397, 401, 402, 403, 406, 409, 428, 429, 446, 447, 448, 449, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 464, 465, 466, 467, 468, 469, 472, 474, 484, 488, 495, 496, 498, 500, 501, 503, 506, 507, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 531, 532, 533, 534, 537, 546, 547, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 591, 592, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 648, 649, 650, 651, 661, 662, 664, 665, 666, 671, 672, 673, 676, 677, 682, 684, 685, 686, 687, 689, 690, 691, 692, 693, 698, 701, 702, 703, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 719, 745, 746, 747, 748, 750, 751, 752, 753, 754, 757, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 776, 777, 778, 779, 780, 781, 782, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 812, 814, 815, 816, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 837, 838, 839, 840, 842, 843, 844, 845, 846, 849, 854, 857, 858, 860, 861, 862, 863, 865, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 885, 915, 916, 917, 944, 945, 946, 949, 950, 953, 957, 960, 961, 967, 968, 969, 973, 974, 976, 977, 978, 983, 985, 987, 989, 993, 994, 995, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "absolut": [4, 13, 71, 91, 111, 135, 153, 181, 183, 187, 199, 347, 373, 375, 377, 378, 380, 381, 382, 383, 384, 408, 414, 420, 421, 495, 501, 506, 509, 510, 512, 513, 514, 522, 524, 525, 526, 529, 552, 554, 555, 557, 561, 566, 583, 591, 596, 610, 613, 614, 616, 618, 620, 635, 636, 638, 640, 642, 646, 647, 668, 681, 685, 699, 700, 708, 709, 711, 716, 718, 720, 758, 764, 768, 779, 782, 789, 791, 803, 805, 806, 810, 829, 834, 837, 850, 874, 876, 939, 949, 950, 963, 967, 969, 985, 986, 994, 999, 1004, 1005, 1006, 1007, 1010], "basi": [4, 6, 14, 92, 137, 142, 144, 182, 275, 290, 307, 311, 337, 343, 346, 373, 378, 380, 416, 498, 586, 596, 603, 655, 844, 951, 963, 968, 975, 982, 983, 986, 989, 1001, 1003, 1006], "max": [4, 8, 10, 11, 12, 13, 17, 19, 24, 26, 29, 31, 37, 41, 49, 55, 59, 64, 68, 72, 74, 77, 87, 90, 94, 97, 101, 103, 110, 116, 119, 126, 127, 128, 130, 131, 135, 139, 141, 142, 149, 150, 153, 163, 168, 169, 170, 174, 176, 183, 184, 187, 195, 197, 199, 204, 212, 216, 236, 237, 238, 249, 251, 257, 258, 260, 264, 265, 269, 271, 273, 275, 278, 280, 281, 283, 290, 299, 301, 313, 316, 332, 373, 375, 378, 433, 434, 435, 436, 437, 438, 439, 440, 441, 476, 500, 519, 520, 521, 522, 523, 524, 527, 528, 529, 570, 591, 595, 596, 612, 613, 633, 636, 638, 644, 655, 656, 660, 663, 668, 669, 704, 720, 755, 756, 762, 822, 823, 834, 835, 837, 844, 851, 852, 873, 874, 875, 876, 921, 949, 951, 956, 963, 967, 968, 974, 985, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "977": [4, 13, 377], "rescal": [4, 43, 44, 52, 92, 162, 169, 204, 218, 278, 317, 375, 385, 433, 434, 435, 436, 437, 438, 439, 440, 497, 502, 610, 613, 616, 837, 843, 867, 868, 869, 870, 871, 953, 963, 986, 997, 998], "variabl": [4, 9, 11, 12, 13, 16, 34, 66, 104, 108, 111, 114, 115, 127, 128, 130, 135, 144, 145, 148, 149, 154, 155, 158, 165, 170, 181, 185, 186, 199, 203, 218, 230, 238, 241, 248, 255, 257, 283, 284, 285, 328, 332, 334, 340, 342, 343, 345, 347, 349, 350, 353, 359, 369, 373, 374, 375, 376, 378, 380, 381, 382, 414, 446, 447, 448, 451, 463, 465, 472, 479, 496, 498, 500, 505, 508, 517, 523, 524, 568, 570, 571, 572, 604, 614, 615, 618, 619, 625, 646, 647, 659, 673, 710, 763, 764, 767, 769, 770, 771, 772, 777, 778, 779, 780, 781, 782, 785, 786, 787, 788, 790, 793, 797, 798, 828, 839, 842, 846, 854, 866, 942, 943, 945, 949, 952, 953, 954, 955, 956, 958, 960, 961, 963, 967, 969, 972, 973, 978, 979, 981, 983, 993, 998, 1001, 1003, 1006, 1008], "rel": [4, 6, 8, 17, 20, 26, 52, 58, 92, 108, 142, 156, 158, 161, 181, 199, 227, 264, 265, 279, 288, 291, 307, 311, 319, 320, 340, 344, 347, 353, 359, 371, 373, 377, 380, 381, 383, 404, 407, 411, 413, 423, 485, 488, 495, 498, 501, 505, 509, 510, 521, 522, 523, 524, 528, 529, 530, 568, 613, 622, 623, 635, 636, 638, 654, 658, 692, 710, 762, 765, 766, 768, 776, 784, 789, 792, 805, 806, 810, 822, 823, 834, 835, 845, 861, 865, 866, 867, 870, 872, 873, 874, 875, 876, 949, 950, 953, 955, 956, 957, 959, 983], "so": [4, 9, 12, 13, 16, 17, 39, 45, 52, 53, 58, 62, 76, 107, 110, 111, 112, 113, 120, 137, 142, 153, 155, 158, 161, 181, 182, 208, 215, 218, 238, 255, 258, 264, 265, 268, 274, 275, 279, 284, 285, 288, 299, 307, 319, 321, 327, 328, 332, 333, 334, 339, 340, 343, 344, 345, 347, 349, 350, 351, 353, 354, 359, 364, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 386, 387, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 420, 429, 433, 434, 435, 436, 437, 438, 439, 440, 446, 447, 448, 449, 460, 472, 473, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 545, 546, 547, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 568, 571, 572, 574, 575, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 599, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 652, 653, 654, 655, 656, 659, 669, 672, 680, 689, 704, 719, 751, 760, 761, 762, 765, 766, 768, 769, 776, 784, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 821, 822, 823, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 855, 857, 858, 860, 861, 862, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 902, 919, 928, 942, 943, 945, 947, 948, 949, 950, 952, 953, 954, 955, 956, 957, 959, 963, 965, 966, 967, 968, 972, 973, 977, 985, 986, 987, 993, 995, 996, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1009, 1010], "error": [4, 5, 7, 13, 14, 17, 26, 51, 71, 73, 74, 76, 91, 96, 100, 104, 107, 108, 111, 113, 115, 135, 137, 148, 150, 153, 165, 170, 177, 180, 181, 183, 187, 188, 195, 199, 211, 214, 215, 221, 230, 231, 234, 238, 239, 243, 247, 248, 252, 255, 264, 265, 291, 294, 306, 315, 319, 320, 333, 342, 343, 345, 347, 348, 349, 350, 354, 357, 359, 364, 367, 371, 372, 373, 374, 375, 377, 378, 380, 381, 382, 401, 407, 408, 411, 413, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 446, 447, 448, 460, 467, 479, 488, 495, 497, 498, 501, 502, 506, 507, 509, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 539, 545, 546, 552, 554, 555, 556, 558, 559, 560, 562, 563, 564, 570, 574, 575, 593, 596, 599, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 649, 652, 653, 654, 656, 657, 660, 662, 665, 666, 673, 676, 684, 685, 686, 690, 703, 706, 707, 708, 709, 710, 711, 713, 714, 716, 727, 741, 745, 751, 752, 753, 754, 762, 763, 764, 765, 766, 768, 769, 771, 776, 780, 784, 787, 788, 789, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 812, 813, 815, 816, 817, 820, 822, 823, 825, 826, 828, 830, 831, 832, 837, 838, 839, 844, 845, 860, 861, 863, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 883, 884, 885, 886, 889, 916, 937, 940, 942, 943, 944, 946, 947, 948, 950, 954, 957, 961, 963, 967, 968, 969, 974, 975, 985, 989, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "easili": [4, 9, 29, 83, 132, 156, 184, 197, 213, 215, 219, 222, 238, 240, 247, 263, 280, 345, 347, 359, 360, 374, 380, 381, 383, 413, 947, 949, 950, 963, 967, 968, 969, 976, 979, 982, 987, 999], "interpret": [4, 26, 135, 144, 150, 151, 152, 154, 177, 181, 182, 186, 197, 199, 232, 238, 240, 241, 276, 279, 282, 289, 319, 321, 332, 343, 345, 346, 351, 353, 354, 359, 362, 371, 373, 374, 379, 381, 416, 428, 429, 431, 460, 505, 536, 575, 603, 607, 617, 636, 637, 655, 656, 659, 665, 692, 716, 721, 722, 746, 755, 756, 768, 777, 788, 789, 791, 794, 826, 838, 845, 921, 947, 949, 953, 954, 960, 961, 963, 969, 972, 974, 978, 986, 993, 994, 998, 1001, 1006, 1007, 1008], "fraction": [4, 24, 26, 114, 181, 189, 199, 315, 320, 371, 377, 380, 402, 403, 413, 414, 420, 421, 479, 491, 521, 522, 523, 524, 528, 529, 530, 554, 557, 566, 630, 631, 632, 635, 640, 641, 642, 667, 685, 686, 687, 697, 757, 759, 764, 768, 789, 790, 804, 832, 867, 868, 869, 873, 874, 875, 876, 919, 949, 953, 956, 960, 961, 963, 968, 969, 973, 994, 995, 996, 1007], "maximum": [4, 8, 11, 16, 26, 31, 34, 54, 73, 74, 75, 76, 77, 84, 89, 101, 103, 106, 107, 110, 138, 140, 144, 150, 159, 169, 218, 248, 260, 264, 265, 271, 278, 302, 303, 305, 306, 309, 311, 320, 323, 325, 326, 332, 340, 350, 351, 358, 359, 370, 371, 373, 375, 376, 378, 380, 381, 383, 384, 385, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 418, 421, 423, 425, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 446, 447, 448, 462, 473, 475, 476, 477, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 509, 510, 511, 512, 516, 517, 518, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 547, 548, 561, 574, 591, 595, 596, 599, 601, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 635, 636, 638, 640, 641, 642, 643, 646, 647, 649, 650, 651, 652, 653, 654, 656, 657, 658, 680, 707, 744, 760, 762, 765, 766, 768, 776, 783, 789, 814, 821, 822, 823, 829, 830, 834, 835, 837, 840, 841, 842, 844, 853, 854, 859, 860, 861, 862, 865, 866, 870, 873, 874, 875, 876, 877, 879, 882, 889, 942, 948, 949, 950, 952, 953, 955, 956, 957, 959, 963, 967, 968, 969, 974, 986, 1000, 1001, 1003, 1004, 1007, 1008, 1010], "fit": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 19, 21, 23, 24, 26, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 58, 59, 60, 61, 62, 64, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 87, 89, 90, 91, 92, 93, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 107, 110, 111, 112, 113, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 143, 144, 145, 146, 150, 152, 153, 154, 155, 156, 158, 159, 163, 164, 165, 167, 169, 170, 171, 172, 173, 174, 176, 177, 179, 180, 181, 182, 184, 185, 186, 188, 189, 190, 193, 194, 195, 196, 197, 198, 199, 204, 208, 209, 211, 213, 214, 215, 216, 217, 218, 219, 221, 222, 224, 225, 226, 227, 228, 229, 230, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 255, 258, 260, 261, 262, 263, 264, 266, 267, 268, 269, 271, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 315, 316, 317, 319, 320, 323, 324, 325, 326, 327, 332, 334, 337, 340, 342, 345, 348, 350, 351, 354, 357, 359, 367, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 381, 382, 383, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 421, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 446, 447, 448, 449, 465, 473, 474, 488, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 539, 541, 545, 546, 547, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 574, 575, 577, 578, 579, 580, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 651, 652, 653, 654, 655, 656, 658, 661, 662, 664, 665, 666, 674, 675, 686, 695, 698, 713, 751, 760, 761, 762, 765, 766, 768, 776, 784, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 894, 910, 911, 913, 921, 937, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 956, 957, 958, 960, 961, 963, 964, 965, 966, 967, 968, 969, 972, 973, 974, 975, 977, 982, 983, 984, 985, 986, 987, 989, 990, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "method": [4, 8, 12, 13, 17, 19, 20, 23, 24, 25, 26, 33, 34, 36, 37, 38, 41, 44, 46, 47, 49, 50, 51, 53, 54, 55, 56, 58, 62, 65, 74, 75, 78, 80, 85, 87, 90, 92, 95, 96, 97, 99, 101, 106, 108, 109, 115, 121, 130, 131, 135, 148, 158, 168, 170, 182, 189, 198, 200, 202, 204, 205, 206, 208, 212, 214, 215, 216, 218, 222, 223, 226, 240, 245, 246, 247, 255, 258, 264, 265, 267, 278, 282, 285, 287, 289, 290, 310, 319, 320, 321, 327, 328, 332, 333, 334, 337, 342, 343, 345, 346, 347, 351, 352, 354, 357, 358, 362, 364, 367, 369, 370, 371, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 387, 388, 389, 390, 391, 392, 394, 395, 396, 397, 398, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 420, 421, 423, 426, 428, 429, 432, 433, 434, 435, 436, 437, 438, 439, 440, 446, 447, 448, 449, 468, 476, 478, 486, 489, 492, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 545, 546, 547, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 571, 572, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 669, 674, 675, 694, 695, 698, 699, 704, 705, 726, 731, 732, 737, 741, 746, 751, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 821, 822, 823, 824, 825, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 853, 854, 857, 858, 860, 861, 862, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 880, 888, 902, 909, 910, 911, 912, 913, 914, 919, 922, 937, 938, 941, 942, 943, 947, 948, 949, 950, 952, 953, 954, 955, 956, 957, 958, 961, 963, 965, 966, 967, 968, 969, 970, 972, 974, 977, 978, 982, 984, 985, 987, 988, 989, 990, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "minim": [4, 12, 13, 54, 63, 73, 74, 114, 137, 145, 160, 177, 179, 181, 183, 185, 189, 199, 201, 211, 212, 224, 229, 239, 247, 248, 278, 287, 290, 304, 311, 315, 323, 344, 345, 348, 353, 357, 359, 371, 373, 375, 378, 380, 404, 405, 409, 410, 414, 427, 502, 504, 511, 521, 522, 523, 524, 528, 529, 573, 574, 575, 605, 610, 613, 621, 622, 631, 635, 636, 638, 642, 643, 651, 656, 658, 659, 711, 743, 812, 814, 823, 841, 853, 859, 873, 874, 875, 876, 949, 950, 953, 956, 957, 963, 965, 966, 967, 968, 972, 975, 985, 986, 989, 997, 1002, 1003], "squar": [4, 5, 13, 58, 67, 74, 75, 76, 78, 79, 88, 89, 97, 104, 115, 117, 135, 137, 142, 150, 152, 153, 159, 160, 162, 165, 170, 171, 177, 181, 183, 186, 191, 198, 199, 211, 212, 214, 227, 252, 282, 289, 290, 292, 304, 319, 337, 342, 345, 351, 354, 359, 373, 375, 376, 378, 379, 380, 384, 385, 396, 404, 406, 407, 408, 410, 411, 413, 414, 418, 421, 423, 424, 429, 433, 434, 435, 436, 437, 438, 439, 440, 446, 447, 448, 449, 465, 495, 501, 503, 505, 507, 509, 510, 511, 513, 516, 518, 520, 522, 523, 524, 526, 529, 532, 534, 554, 555, 556, 559, 560, 562, 563, 564, 568, 569, 570, 573, 575, 579, 586, 599, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 624, 625, 626, 627, 628, 629, 631, 633, 634, 635, 636, 637, 638, 639, 640, 642, 643, 644, 646, 647, 649, 650, 651, 652, 654, 656, 658, 660, 673, 685, 686, 687, 713, 714, 721, 722, 726, 732, 733, 748, 753, 754, 791, 798, 799, 807, 808, 811, 813, 815, 816, 823, 826, 845, 865, 866, 868, 870, 871, 872, 874, 876, 900, 926, 939, 944, 946, 947, 956, 957, 961, 967, 969, 974, 975, 985, 986, 989, 993, 996, 998, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1009, 1010], "estim": [4, 6, 7, 8, 9, 10, 11, 12, 13, 23, 25, 26, 28, 31, 32, 34, 35, 41, 42, 46, 51, 52, 53, 54, 55, 58, 60, 67, 68, 69, 70, 79, 80, 87, 88, 89, 94, 96, 100, 101, 105, 106, 107, 108, 110, 112, 114, 115, 116, 118, 121, 122, 123, 124, 126, 133, 134, 135, 136, 137, 138, 142, 144, 146, 147, 148, 152, 153, 159, 162, 165, 169, 170, 171, 176, 181, 183, 185, 186, 188, 189, 198, 199, 207, 208, 209, 214, 220, 222, 223, 224, 226, 227, 229, 230, 231, 232, 235, 236, 238, 239, 240, 241, 242, 243, 245, 247, 248, 249, 250, 251, 252, 254, 257, 258, 259, 265, 269, 278, 280, 290, 291, 293, 310, 311, 315, 320, 321, 324, 326, 332, 333, 334, 337, 343, 345, 348, 349, 352, 353, 354, 355, 363, 364, 367, 368, 371, 373, 376, 378, 381, 382, 383, 384, 385, 386, 387, 388, 390, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 422, 425, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 454, 455, 456, 459, 460, 462, 465, 466, 488, 491, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 539, 540, 541, 543, 544, 545, 546, 547, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 570, 571, 572, 574, 575, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 648, 651, 652, 653, 654, 655, 656, 661, 662, 664, 665, 666, 671, 672, 675, 676, 677, 680, 682, 684, 685, 686, 687, 689, 690, 691, 692, 693, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 719, 745, 746, 747, 748, 750, 751, 752, 753, 754, 757, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 773, 774, 776, 778, 780, 784, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 850, 851, 853, 854, 856, 857, 858, 860, 861, 862, 863, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 878, 884, 885, 886, 888, 890, 891, 894, 896, 897, 898, 909, 910, 911, 913, 921, 937, 941, 948, 950, 952, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 969, 970, 973, 974, 975, 977, 978, 979, 981, 983, 985, 986, 987, 988, 989, 990, 993, 995, 996, 997, 998, 999, 1000, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "condit": [4, 12, 13, 24, 26, 77, 109, 114, 118, 150, 151, 153, 170, 183, 186, 199, 215, 219, 241, 290, 327, 351, 357, 362, 370, 371, 373, 375, 378, 380, 382, 415, 428, 435, 436, 437, 442, 460, 477, 487, 488, 500, 503, 504, 505, 507, 509, 511, 513, 514, 526, 591, 596, 597, 607, 614, 615, 616, 618, 619, 620, 634, 636, 637, 638, 639, 646, 647, 651, 661, 676, 681, 682, 699, 700, 758, 800, 801, 802, 803, 804, 823, 826, 829, 838, 839, 842, 846, 902, 925, 947, 949, 950, 951, 953, 955, 956, 958, 963, 969, 972, 974, 985, 989, 994, 996, 997, 998, 1000, 1001, 1003, 1005, 1007, 1008, 1009], "median": [4, 13, 34, 67, 71, 75, 76, 114, 148, 149, 153, 183, 187, 198, 210, 218, 278, 288, 290, 291, 340, 375, 380, 382, 404, 418, 422, 425, 438, 516, 518, 522, 529, 561, 591, 594, 599, 634, 635, 643, 685, 716, 812, 843, 855, 874, 876, 943, 963, 969, 996, 997], "nevertheless": [4, 156, 380], "measur": [4, 7, 8, 10, 11, 13, 19, 24, 34, 35, 46, 55, 57, 58, 88, 104, 105, 114, 117, 124, 135, 137, 142, 150, 152, 153, 154, 158, 170, 175, 180, 181, 185, 187, 199, 231, 236, 238, 244, 245, 251, 283, 311, 319, 320, 332, 340, 342, 347, 351, 359, 370, 372, 375, 377, 378, 379, 380, 381, 413, 416, 426, 462, 479, 502, 504, 511, 515, 521, 522, 523, 524, 527, 528, 529, 568, 571, 572, 575, 591, 595, 622, 654, 656, 662, 666, 668, 669, 671, 673, 676, 677, 680, 681, 684, 688, 689, 690, 692, 694, 699, 700, 702, 703, 706, 710, 718, 719, 720, 745, 746, 747, 749, 750, 751, 752, 755, 758, 786, 788, 791, 811, 842, 854, 873, 874, 875, 876, 943, 949, 951, 956, 958, 959, 961, 967, 969, 974, 982, 985, 993, 996, 998, 999, 1001, 1003], "test": [4, 6, 8, 10, 11, 13, 16, 23, 24, 25, 26, 29, 30, 31, 51, 66, 67, 79, 92, 101, 104, 106, 107, 108, 109, 113, 114, 115, 116, 126, 128, 129, 131, 134, 137, 138, 150, 152, 153, 154, 155, 156, 158, 165, 170, 176, 177, 180, 181, 182, 183, 185, 188, 189, 196, 197, 199, 205, 209, 214, 215, 217, 226, 231, 232, 233, 236, 237, 238, 239, 240, 242, 243, 245, 246, 248, 249, 250, 257, 261, 266, 267, 273, 275, 280, 282, 283, 284, 285, 294, 300, 307, 315, 321, 328, 332, 333, 339, 340, 342, 348, 349, 350, 351, 357, 358, 359, 362, 363, 366, 368, 369, 371, 374, 375, 378, 380, 381, 382, 383, 390, 392, 396, 399, 400, 401, 429, 432, 433, 434, 435, 436, 437, 438, 439, 440, 446, 447, 448, 452, 453, 457, 461, 462, 466, 468, 488, 495, 501, 503, 507, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 531, 532, 533, 534, 556, 558, 559, 560, 562, 563, 564, 566, 568, 569, 570, 572, 573, 574, 575, 591, 592, 594, 599, 600, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 676, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 812, 815, 816, 822, 823, 825, 850, 851, 853, 854, 855, 856, 860, 861, 863, 865, 866, 867, 868, 870, 871, 873, 874, 875, 876, 884, 894, 896, 897, 948, 949, 952, 953, 956, 957, 961, 963, 967, 968, 969, 972, 973, 974, 976, 977, 979, 982, 983, 989, 993, 994, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009], "discuss": [4, 50, 55, 135, 153, 170, 201, 206, 241, 255, 319, 328, 334, 340, 342, 345, 350, 351, 353, 357, 359, 360, 373, 375, 379, 380, 383, 462, 646, 647, 807, 808, 813, 815, 816, 943, 947, 949, 950, 953, 956, 963, 970, 973, 976, 996], "choos": [4, 11, 12, 41, 43, 47, 50, 57, 59, 63, 73, 93, 110, 121, 126, 135, 153, 156, 174, 216, 233, 243, 250, 323, 328, 332, 333, 334, 347, 350, 353, 359, 373, 375, 377, 380, 381, 384, 407, 408, 411, 413, 423, 487, 496, 502, 523, 524, 546, 566, 622, 623, 636, 638, 643, 651, 652, 653, 657, 689, 719, 762, 765, 766, 776, 832, 865, 866, 873, 874, 875, 876, 943, 944, 948, 949, 950, 951, 952, 956, 963, 966, 967, 968, 979, 981, 985, 986, 995, 996, 1000, 1002, 1004], "focu": [4, 9, 26, 87, 101, 137, 230, 268, 332, 350, 371, 380, 517, 518, 523, 525, 526, 642, 950, 956, 963, 972, 973, 976], "root": [4, 16, 75, 135, 162, 327, 342, 345, 353, 373, 406, 465, 505, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 603, 713, 714, 753, 754, 873, 874, 875, 876, 877, 879, 953, 959, 969, 995, 1001, 1002, 1003, 1004, 1007, 1008], "becaus": [4, 5, 13, 19, 24, 26, 37, 44, 47, 67, 77, 80, 101, 106, 109, 114, 135, 138, 141, 144, 153, 154, 156, 161, 167, 174, 181, 185, 187, 189, 199, 214, 215, 225, 235, 238, 239, 244, 257, 258, 274, 275, 276, 278, 282, 283, 284, 285, 298, 307, 311, 319, 320, 321, 323, 327, 328, 332, 333, 340, 343, 347, 350, 353, 357, 358, 359, 364, 367, 370, 371, 373, 374, 377, 378, 379, 380, 381, 383, 386, 396, 411, 412, 425, 429, 439, 446, 447, 448, 498, 500, 516, 518, 520, 522, 524, 526, 529, 532, 534, 552, 555, 571, 572, 575, 596, 597, 599, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 636, 637, 640, 641, 642, 643, 644, 653, 663, 673, 676, 677, 685, 686, 687, 709, 726, 748, 751, 757, 762, 776, 789, 793, 798, 799, 808, 811, 813, 815, 816, 817, 823, 834, 835, 843, 845, 846, 850, 851, 853, 854, 855, 856, 866, 868, 871, 874, 876, 917, 943, 945, 946, 947, 948, 949, 950, 951, 953, 954, 956, 958, 960, 963, 968, 969, 977, 986, 999, 1000, 1002, 1003, 1004, 1005, 1007, 1009], "intuit": [4, 13, 29, 41, 49, 59, 92, 101, 104, 111, 130, 137, 153, 154, 182, 183, 203, 208, 239, 255, 263, 280, 283, 304, 307, 311, 320, 345, 359, 371, 373, 375, 377, 379, 745, 746, 747, 750, 836, 867, 870, 945, 949, 950, 953, 954, 960, 963, 964, 968, 977, 985, 987, 993], "studi": [4, 57, 114, 181, 199, 241, 244, 245, 319, 340, 342, 377, 382, 660, 672, 721, 722, 790, 951, 953, 967, 978], "metric": [4, 6, 7, 11, 13, 19, 20, 21, 23, 24, 25, 28, 30, 33, 35, 39, 41, 45, 46, 49, 55, 57, 61, 66, 71, 77, 101, 106, 112, 113, 115, 116, 121, 132, 135, 138, 148, 150, 152, 153, 155, 165, 170, 176, 177, 181, 183, 185, 187, 199, 204, 209, 212, 213, 218, 221, 231, 232, 234, 235, 236, 238, 239, 241, 245, 247, 248, 257, 258, 260, 268, 271, 276, 278, 283, 287, 288, 290, 291, 292, 293, 294, 296, 297, 299, 300, 319, 320, 328, 332, 337, 340, 345, 347, 357, 358, 359, 362, 364, 368, 371, 378, 379, 380, 383, 384, 390, 401, 405, 408, 409, 410, 414, 418, 419, 420, 421, 426, 433, 484, 499, 513, 514, 515, 517, 519, 521, 522, 523, 525, 526, 528, 529, 531, 533, 542, 566, 574, 584, 592, 595, 598, 602, 603, 604, 605, 606, 607, 622, 623, 627, 630, 632, 638, 639, 640, 652, 654, 656, 658, 660, 762, 765, 766, 768, 776, 784, 786, 787, 788, 790, 793, 794, 795, 796, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 822, 831, 837, 860, 861, 865, 867, 870, 873, 875, 943, 945, 948, 950, 954, 959, 961, 972, 973, 974, 982, 983, 987, 989, 990, 993, 994, 995, 996, 997, 998, 999, 1000], "ones": [4, 11, 32, 40, 52, 67, 76, 112, 117, 137, 158, 165, 185, 186, 208, 211, 215, 238, 246, 249, 265, 282, 297, 317, 332, 333, 345, 353, 359, 373, 375, 377, 380, 388, 391, 395, 414, 496, 530, 545, 574, 575, 582, 608, 609, 622, 623, 634, 640, 667, 759, 764, 769, 780, 807, 808, 809, 811, 813, 815, 816, 817, 818, 819, 840, 844, 907, 949, 953, 958, 959, 963, 968, 985, 993, 1001, 1002, 1003], "term": [4, 14, 15, 24, 30, 55, 92, 104, 107, 111, 114, 142, 152, 165, 169, 170, 181, 183, 185, 195, 198, 199, 218, 236, 240, 258, 273, 290, 311, 315, 319, 321, 334, 345, 347, 349, 357, 367, 371, 372, 373, 375, 377, 378, 380, 407, 411, 413, 416, 423, 426, 488, 499, 502, 504, 508, 511, 513, 552, 553, 554, 555, 568, 571, 572, 596, 597, 604, 606, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 632, 633, 634, 636, 637, 638, 639, 640, 642, 644, 651, 659, 693, 701, 746, 747, 750, 822, 823, 840, 844, 847, 865, 866, 867, 868, 869, 870, 871, 942, 944, 945, 947, 948, 949, 950, 953, 954, 955, 957, 958, 963, 967, 968, 978, 987, 1001, 1007, 1008, 1009], "y": [4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 16, 23, 24, 25, 26, 28, 29, 31, 32, 36, 37, 39, 40, 41, 42, 49, 51, 53, 54, 57, 58, 59, 62, 63, 67, 68, 70, 71, 76, 79, 80, 84, 85, 89, 91, 92, 93, 95, 96, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 128, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 142, 143, 144, 145, 146, 152, 153, 154, 155, 156, 158, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 196, 197, 199, 201, 202, 203, 206, 209, 211, 212, 213, 214, 215, 216, 218, 219, 221, 222, 224, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 257, 258, 260, 261, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 278, 279, 280, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 323, 324, 325, 326, 327, 328, 337, 338, 339, 340, 343, 345, 347, 350, 352, 354, 358, 359, 364, 367, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 428, 429, 432, 433, 434, 435, 436, 437, 438, 439, 440, 446, 447, 448, 449, 451, 462, 464, 466, 469, 472, 473, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 488, 490, 492, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 545, 546, 547, 549, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 661, 662, 663, 664, 665, 666, 670, 675, 689, 695, 698, 704, 705, 719, 721, 722, 723, 724, 726, 727, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 748, 751, 752, 755, 756, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 821, 822, 823, 824, 825, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 857, 858, 860, 861, 862, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 878, 885, 890, 891, 913, 915, 916, 917, 921, 924, 927, 940, 942, 943, 944, 945, 947, 948, 949, 951, 953, 954, 955, 956, 957, 958, 960, 963, 967, 968, 969, 973, 978, 982, 983, 985, 986, 989, 990, 993, 994, 995, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "hist": [4, 24, 26, 50, 71, 103, 107, 181, 183, 212, 218, 244, 263, 278, 282, 284, 291, 294, 380], "bin": [4, 23, 24, 26, 50, 71, 103, 107, 181, 212, 218, 244, 263, 278, 279, 280, 281, 282, 284, 285, 343, 353, 363, 371, 379, 380, 402, 403, 412, 425, 525, 526, 828, 830, 844, 904, 986, 1001, 1002, 1003, 1007, 1011], "30": [4, 8, 10, 15, 19, 32, 36, 37, 41, 51, 57, 67, 69, 73, 94, 101, 110, 114, 120, 126, 135, 137, 138, 141, 143, 154, 158, 160, 175, 179, 181, 199, 201, 202, 206, 213, 217, 218, 228, 238, 240, 243, 252, 255, 258, 267, 268, 282, 283, 284, 292, 293, 296, 297, 301, 305, 308, 310, 313, 332, 340, 342, 350, 351, 377, 381, 384, 408, 414, 419, 420, 421, 464, 495, 499, 501, 502, 503, 505, 507, 509, 510, 534, 556, 559, 560, 562, 612, 656, 698, 746, 805, 806, 807, 808, 809, 811, 813, 815, 816, 817, 846, 861, 874, 931, 942, 947, 953, 954, 956, 961, 974, 983, 993, 994, 1000, 1001, 1002], "rent": 4, "fleet": 4, "input": [4, 6, 10, 29, 31, 69, 87, 91, 110, 114, 115, 143, 144, 145, 153, 158, 160, 181, 184, 185, 189, 196, 199, 211, 212, 214, 215, 222, 233, 255, 262, 263, 275, 279, 280, 281, 282, 287, 290, 292, 307, 311, 313, 316, 321, 339, 342, 345, 348, 350, 354, 355, 357, 358, 359, 370, 371, 374, 377, 378, 379, 380, 381, 382, 383, 385, 391, 394, 395, 396, 397, 398, 401, 402, 403, 404, 405, 406, 409, 412, 413, 414, 418, 421, 422, 425, 428, 429, 431, 432, 433, 435, 436, 446, 447, 448, 453, 467, 473, 480, 481, 482, 484, 488, 492, 496, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511, 512, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 546, 547, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 575, 584, 586, 591, 592, 593, 594, 595, 599, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 649, 650, 651, 652, 653, 654, 656, 657, 660, 661, 662, 663, 664, 665, 666, 685, 686, 687, 691, 708, 709, 711, 713, 714, 716, 717, 724, 730, 734, 735, 737, 741, 742, 743, 744, 748, 753, 754, 760, 761, 762, 765, 766, 768, 776, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 809, 811, 813, 814, 815, 816, 817, 820, 821, 822, 823, 824, 825, 828, 829, 830, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 852, 853, 857, 858, 860, 861, 863, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 882, 883, 884, 885, 886, 887, 891, 896, 899, 901, 910, 912, 913, 917, 926, 928, 934, 939, 940, 943, 945, 947, 949, 950, 951, 952, 953, 955, 956, 957, 958, 960, 961, 965, 966, 967, 968, 969, 972, 973, 977, 978, 982, 983, 989, 993, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "annot": [4, 9, 25, 123, 158, 202, 242, 245, 319, 345, 346, 347, 373, 680, 879, 953, 969, 1002], "log": [4, 20, 24, 25, 26, 73, 87, 101, 112, 114, 121, 131, 135, 138, 139, 141, 142, 143, 146, 166, 169, 170, 174, 181, 186, 191, 199, 212, 214, 228, 268, 283, 319, 340, 342, 343, 345, 349, 353, 354, 359, 370, 371, 373, 374, 375, 378, 380, 381, 383, 412, 415, 424, 429, 434, 435, 436, 437, 438, 439, 440, 496, 500, 505, 513, 514, 515, 517, 519, 521, 523, 526, 528, 554, 555, 557, 558, 574, 575, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 606, 609, 612, 622, 623, 633, 635, 640, 644, 704, 714, 718, 760, 761, 762, 765, 766, 776, 800, 801, 802, 803, 804, 805, 806, 810, 821, 822, 829, 830, 859, 862, 867, 870, 872, 873, 875, 900, 942, 945, 947, 949, 950, 955, 956, 958, 961, 963, 967, 969, 972, 973, 985, 995, 996, 997, 1002, 1003, 1004, 1007, 1010], "describ": [4, 13, 53, 121, 135, 153, 199, 213, 238, 247, 328, 332, 333, 338, 340, 342, 344, 345, 347, 350, 353, 359, 360, 370, 373, 375, 376, 377, 378, 380, 381, 426, 433, 437, 438, 455, 457, 459, 460, 461, 464, 465, 466, 467, 468, 469, 474, 480, 481, 482, 492, 571, 572, 609, 623, 632, 678, 760, 761, 800, 802, 840, 902, 942, 945, 948, 949, 952, 953, 955, 959, 967, 968, 969, 976, 978, 984, 985, 1001, 1003], "weather": [4, 13, 142, 154, 949, 953], "includ": [4, 30, 32, 52, 75, 107, 111, 112, 113, 152, 153, 155, 165, 181, 185, 199, 215, 239, 255, 258, 274, 278, 290, 291, 293, 307, 312, 319, 321, 328, 332, 333, 339, 341, 343, 345, 346, 347, 349, 350, 351, 353, 354, 359, 360, 363, 370, 372, 373, 374, 376, 377, 378, 380, 381, 382, 383, 384, 408, 410, 414, 420, 430, 433, 434, 435, 436, 437, 438, 439, 440, 453, 454, 455, 460, 464, 465, 466, 468, 469, 474, 498, 505, 521, 528, 538, 596, 602, 610, 611, 616, 624, 625, 626, 629, 645, 652, 653, 661, 677, 692, 693, 698, 700, 701, 734, 746, 747, 750, 758, 762, 764, 765, 766, 775, 776, 779, 782, 788, 791, 813, 815, 816, 817, 838, 839, 840, 844, 862, 865, 866, 873, 875, 877, 879, 885, 886, 889, 891, 894, 910, 942, 949, 952, 953, 954, 956, 957, 963, 967, 968, 969, 972, 973, 976, 977, 985, 987, 993, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "both": [4, 5, 7, 9, 10, 13, 15, 16, 20, 24, 25, 32, 39, 51, 52, 61, 67, 73, 75, 79, 80, 92, 94, 99, 104, 107, 108, 111, 112, 120, 121, 124, 130, 131, 135, 137, 144, 146, 152, 153, 154, 155, 160, 165, 167, 169, 170, 181, 182, 183, 185, 186, 187, 189, 199, 205, 214, 215, 216, 224, 225, 226, 227, 228, 229, 238, 239, 240, 241, 245, 247, 249, 253, 258, 270, 278, 282, 283, 287, 289, 293, 298, 299, 304, 309, 311, 319, 320, 321, 327, 328, 332, 333, 334, 338, 339, 340, 341, 343, 345, 347, 351, 352, 354, 357, 358, 359, 360, 363, 364, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 383, 386, 401, 410, 416, 426, 432, 439, 446, 447, 448, 449, 452, 453, 460, 461, 464, 466, 469, 471, 472, 473, 498, 502, 504, 511, 515, 519, 520, 521, 527, 528, 529, 530, 531, 541, 552, 553, 555, 561, 571, 572, 591, 596, 597, 607, 621, 622, 623, 636, 638, 640, 642, 651, 663, 668, 676, 680, 692, 693, 694, 699, 701, 720, 724, 730, 737, 741, 746, 747, 750, 751, 752, 758, 765, 766, 768, 784, 794, 822, 823, 837, 839, 841, 853, 858, 863, 865, 866, 873, 875, 889, 894, 903, 916, 928, 942, 943, 944, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 959, 960, 961, 963, 966, 967, 968, 969, 972, 973, 977, 982, 985, 986, 987, 993, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "numer": [4, 13, 19, 63, 67, 71, 109, 111, 121, 135, 142, 145, 154, 155, 170, 181, 199, 218, 220, 222, 268, 284, 290, 294, 321, 339, 340, 342, 348, 350, 351, 357, 358, 359, 373, 375, 380, 381, 382, 383, 385, 386, 404, 407, 411, 423, 435, 436, 439, 442, 453, 454, 455, 460, 464, 465, 466, 468, 469, 474, 495, 497, 499, 504, 511, 525, 526, 531, 545, 554, 575, 581, 584, 591, 594, 596, 597, 610, 616, 618, 636, 651, 654, 658, 678, 751, 757, 762, 765, 766, 768, 776, 784, 787, 788, 789, 792, 800, 801, 802, 803, 804, 822, 823, 828, 833, 838, 839, 846, 877, 878, 879, 885, 886, 901, 902, 942, 943, 949, 950, 954, 961, 963, 964, 969, 976, 977, 978, 987, 993, 994, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "categor": [4, 67, 100, 106, 121, 150, 153, 154, 155, 181, 199, 218, 220, 222, 255, 285, 290, 292, 293, 334, 337, 339, 340, 347, 350, 359, 374, 381, 430, 431, 453, 454, 460, 469, 525, 526, 545, 546, 571, 572, 596, 597, 612, 622, 623, 633, 644, 673, 788, 800, 801, 802, 803, 804, 826, 828, 832, 833, 836, 838, 839, 846, 860, 861, 943, 949, 960, 961, 969, 972, 973, 974, 975, 976, 977, 987, 989, 993, 994, 997, 998, 1001, 1003, 1005, 1008, 1009, 1010], "inform": [4, 5, 8, 11, 12, 14, 24, 26, 31, 32, 34, 35, 46, 50, 55, 63, 64, 66, 67, 80, 82, 83, 84, 93, 107, 108, 109, 129, 131, 132, 134, 135, 137, 142, 150, 153, 154, 156, 158, 159, 160, 161, 165, 182, 185, 189, 196, 198, 199, 215, 219, 226, 227, 229, 233, 235, 238, 239, 240, 243, 245, 247, 261, 264, 265, 268, 285, 290, 294, 310, 315, 319, 320, 321, 324, 327, 328, 332, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 350, 351, 353, 357, 358, 359, 360, 364, 367, 370, 377, 378, 380, 381, 382, 383, 387, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 426, 428, 433, 434, 435, 437, 438, 439, 440, 446, 447, 448, 449, 456, 458, 459, 460, 461, 464, 465, 466, 467, 468, 469, 474, 479, 488, 492, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 513, 514, 515, 516, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 545, 546, 547, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 567, 570, 571, 572, 573, 574, 575, 591, 592, 593, 594, 599, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 638, 640, 641, 642, 643, 644, 651, 652, 653, 654, 655, 656, 659, 661, 665, 668, 669, 679, 689, 693, 706, 718, 719, 720, 749, 751, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 788, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 821, 822, 823, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 850, 851, 853, 854, 855, 856, 857, 858, 860, 861, 864, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 879, 910, 943, 945, 950, 951, 952, 953, 954, 955, 956, 957, 959, 960, 963, 964, 967, 969, 973, 974, 976, 977, 984, 985, 986, 987, 993, 996, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "alreadi": [4, 6, 10, 16, 52, 55, 83, 92, 101, 121, 135, 153, 209, 216, 218, 221, 239, 245, 258, 290, 293, 345, 346, 350, 357, 359, 371, 375, 377, 379, 380, 385, 401, 463, 487, 497, 531, 532, 598, 610, 613, 628, 629, 630, 631, 632, 638, 640, 641, 642, 649, 650, 731, 800, 820, 828, 834, 835, 837, 842, 862, 865, 866, 888, 912, 942, 945, 959, 963, 964, 973, 978, 983, 987, 990, 994, 998, 1001, 1005, 1006, 1007, 1008], "expand": [4, 16, 46, 62, 210, 284, 288, 328, 337, 380, 408, 414, 463, 521, 522, 523, 524, 528, 529, 530, 873, 874, 875, 876, 953, 994, 1001, 1002, 1009], "complementari": [4, 381], "column": [4, 8, 13, 20, 21, 57, 65, 68, 71, 83, 108, 110, 111, 114, 118, 121, 135, 142, 148, 150, 152, 153, 154, 155, 156, 170, 181, 182, 185, 189, 199, 210, 217, 218, 219, 222, 229, 238, 239, 249, 250, 257, 275, 283, 284, 285, 289, 290, 291, 292, 294, 319, 320, 321, 332, 339, 340, 342, 345, 347, 351, 354, 357, 358, 359, 370, 373, 374, 376, 378, 380, 381, 382, 385, 388, 415, 417, 428, 430, 431, 435, 436, 442, 451, 452, 453, 454, 455, 456, 458, 460, 464, 465, 466, 468, 469, 472, 473, 474, 475, 477, 479, 490, 495, 498, 501, 505, 506, 512, 519, 521, 522, 525, 526, 528, 529, 530, 531, 545, 546, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 571, 572, 574, 591, 594, 596, 597, 598, 610, 612, 616, 622, 624, 626, 628, 629, 633, 644, 649, 650, 661, 677, 682, 683, 692, 693, 701, 717, 726, 731, 732, 733, 736, 746, 747, 750, 751, 762, 765, 766, 776, 786, 791, 796, 799, 800, 801, 802, 803, 804, 805, 806, 825, 829, 830, 831, 832, 838, 839, 840, 844, 845, 846, 847, 849, 850, 851, 855, 856, 865, 867, 870, 873, 875, 881, 885, 886, 891, 902, 916, 929, 930, 932, 940, 942, 943, 945, 949, 951, 953, 954, 961, 963, 968, 973, 974, 993, 995, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "x": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 23, 24, 25, 26, 28, 29, 31, 32, 35, 36, 37, 38, 39, 40, 41, 42, 44, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 67, 68, 70, 71, 74, 75, 76, 77, 79, 80, 84, 85, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 128, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 142, 143, 144, 145, 146, 152, 153, 154, 155, 156, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 199, 201, 202, 203, 206, 208, 209, 211, 212, 213, 214, 215, 216, 218, 219, 221, 222, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 257, 258, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 323, 324, 325, 326, 327, 328, 332, 338, 339, 340, 345, 346, 347, 349, 350, 351, 352, 353, 354, 357, 358, 359, 364, 367, 371, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 457, 458, 459, 462, 464, 465, 466, 469, 470, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 545, 546, 547, 549, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 670, 674, 675, 688, 695, 698, 705, 721, 722, 723, 724, 726, 727, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 751, 755, 756, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 828, 829, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 881, 882, 883, 884, 885, 886, 889, 899, 901, 902, 903, 904, 913, 914, 921, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 942, 943, 944, 945, 947, 948, 949, 950, 951, 953, 954, 955, 956, 957, 958, 959, 960, 963, 965, 966, 967, 968, 969, 973, 978, 982, 983, 985, 986, 987, 990, 993, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1010], "drop": [4, 5, 13, 67, 71, 80, 142, 152, 153, 154, 156, 181, 185, 199, 218, 222, 248, 284, 289, 292, 294, 320, 349, 353, 374, 378, 380, 428, 431, 531, 532, 533, 534, 659, 664, 666, 745, 752, 824, 838, 844, 943, 949, 953, 963, 972, 993, 994, 998, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "axi": [4, 5, 7, 11, 12, 13, 14, 15, 17, 19, 24, 25, 34, 36, 37, 44, 45, 47, 49, 50, 51, 52, 58, 67, 68, 71, 77, 80, 84, 85, 87, 88, 89, 90, 91, 96, 103, 104, 108, 110, 117, 120, 124, 128, 131, 141, 142, 146, 148, 152, 153, 162, 166, 168, 170, 173, 174, 175, 181, 186, 190, 193, 195, 196, 198, 199, 202, 203, 206, 208, 212, 213, 217, 224, 226, 228, 229, 234, 235, 239, 240, 245, 247, 248, 257, 258, 263, 264, 265, 268, 269, 270, 276, 278, 282, 285, 294, 297, 299, 301, 303, 306, 307, 310, 312, 313, 314, 315, 317, 319, 320, 324, 325, 326, 327, 340, 347, 354, 359, 371, 373, 381, 385, 402, 409, 428, 431, 495, 497, 500, 501, 503, 505, 507, 509, 510, 514, 549, 576, 595, 596, 649, 650, 665, 726, 742, 743, 744, 745, 768, 784, 793, 834, 835, 842, 843, 845, 850, 851, 852, 854, 855, 856, 879, 881, 885, 886, 904, 928, 934, 943, 953, 960, 963, 968, 984, 986, 1001, 1003, 1005, 1010], "holidai": [4, 154], "workingdai": [4, 154], "temp": [4, 13, 154], "feel_temp": [4, 13, 154], "humid": [4, 13, 154, 960], "windspe": [4, 13, 154], "0": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 150, 152, 153, 154, 155, 156, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 323, 324, 325, 326, 327, 328, 332, 333, 339, 340, 342, 343, 345, 346, 347, 349, 350, 351, 352, 354, 357, 358, 359, 363, 364, 365, 366, 367, 369, 370, 371, 373, 374, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 390, 396, 398, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 487, 488, 489, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 541, 542, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 726, 727, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 881, 882, 883, 885, 886, 890, 891, 893, 894, 895, 896, 897, 899, 901, 902, 904, 905, 906, 907, 914, 915, 916, 918, 919, 921, 922, 923, 924, 927, 928, 929, 930, 931, 932, 933, 934, 937, 939, 942, 943, 945, 946, 947, 948, 949, 950, 951, 953, 954, 955, 956, 957, 958, 959, 960, 961, 963, 964, 965, 966, 967, 968, 972, 973, 974, 975, 978, 982, 983, 984, 985, 986, 987, 989, 990, 991], "spring": [4, 13, 154], "fals": [4, 5, 7, 8, 10, 11, 14, 15, 16, 20, 21, 23, 25, 26, 30, 31, 32, 36, 39, 41, 43, 44, 51, 52, 61, 64, 66, 67, 68, 74, 76, 85, 91, 95, 96, 101, 107, 108, 111, 114, 115, 124, 126, 137, 142, 143, 144, 145, 153, 154, 155, 156, 160, 161, 165, 167, 181, 182, 186, 187, 189, 197, 199, 201, 204, 215, 216, 218, 222, 224, 235, 236, 238, 241, 242, 245, 246, 247, 248, 249, 250, 251, 252, 258, 262, 268, 271, 274, 275, 278, 279, 284, 285, 287, 289, 290, 291, 292, 294, 298, 307, 309, 315, 316, 319, 320, 339, 345, 346, 347, 350, 359, 364, 371, 373, 374, 375, 377, 378, 380, 381, 382, 383, 385, 386, 398, 399, 400, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 423, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 472, 473, 474, 476, 479, 487, 488, 490, 491, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 545, 546, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 596, 599, 600, 601, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 654, 658, 659, 661, 662, 663, 664, 665, 666, 667, 672, 673, 675, 676, 677, 678, 679, 682, 683, 689, 690, 691, 692, 693, 694, 701, 705, 706, 713, 714, 717, 719, 724, 726, 730, 732, 737, 741, 745, 746, 747, 748, 750, 752, 757, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 773, 776, 780, 781, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 878, 879, 883, 884, 885, 886, 896, 903, 914, 915, 918, 919, 923, 924, 925, 927, 934, 939, 940, 942, 943, 949, 953, 956, 963, 967, 968, 986, 987, 993, 994, 995, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010], "6": [4, 6, 8, 9, 10, 11, 12, 13, 16, 19, 25, 29, 30, 37, 41, 43, 46, 47, 49, 53, 54, 57, 58, 59, 60, 61, 62, 64, 69, 70, 71, 73, 74, 75, 77, 83, 87, 89, 96, 102, 110, 114, 115, 118, 120, 126, 130, 135, 137, 140, 142, 144, 145, 148, 149, 153, 154, 156, 158, 160, 161, 162, 165, 170, 174, 179, 181, 182, 183, 185, 195, 199, 201, 202, 203, 205, 208, 211, 212, 216, 219, 220, 224, 225, 226, 227, 229, 230, 232, 233, 236, 237, 238, 239, 240, 241, 247, 248, 249, 250, 251, 253, 257, 260, 263, 271, 273, 275, 276, 278, 280, 282, 283, 285, 287, 290, 291, 292, 293, 294, 296, 297, 300, 301, 307, 308, 310, 312, 315, 317, 319, 320, 321, 326, 328, 339, 340, 342, 343, 345, 350, 351, 358, 363, 365, 366, 371, 373, 374, 377, 378, 380, 381, 382, 388, 405, 409, 410, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 425, 426, 427, 446, 447, 448, 449, 454, 460, 469, 481, 488, 491, 494, 501, 502, 503, 504, 505, 509, 510, 511, 517, 525, 526, 527, 533, 534, 557, 558, 568, 569, 570, 572, 575, 578, 579, 589, 591, 592, 594, 600, 601, 608, 609, 634, 640, 641, 653, 657, 663, 685, 691, 701, 705, 708, 709, 713, 714, 716, 732, 748, 751, 753, 760, 761, 763, 764, 769, 771, 772, 774, 779, 780, 783, 786, 787, 788, 789, 791, 800, 801, 802, 804, 805, 806, 813, 815, 816, 817, 832, 833, 835, 838, 840, 843, 844, 848, 849, 880, 881, 885, 886, 901, 902, 903, 905, 907, 908, 916, 928, 931, 939, 942, 943, 947, 949, 950, 953, 963, 964, 967, 968, 969, 978, 982, 983, 985, 991, 994, 995, 996, 999, 1001, 1006, 1010], "clear": [4, 16, 52, 57, 68, 153, 154, 283, 340, 344, 345, 347, 357, 358, 359, 371, 374, 379, 879, 880, 942, 947, 1004, 1005, 1006], "9": [4, 7, 9, 12, 13, 14, 23, 25, 26, 29, 30, 32, 39, 41, 47, 52, 55, 59, 61, 70, 77, 84, 87, 90, 110, 111, 113, 114, 119, 121, 126, 127, 128, 135, 140, 144, 149, 152, 153, 154, 162, 163, 172, 181, 194, 195, 198, 199, 201, 204, 212, 213, 222, 224, 225, 226, 227, 232, 241, 245, 247, 257, 260, 262, 263, 266, 267, 268, 273, 274, 276, 278, 280, 281, 282, 284, 285, 292, 293, 296, 297, 299, 300, 301, 307, 311, 317, 321, 328, 342, 343, 351, 358, 363, 365, 366, 371, 374, 375, 377, 380, 381, 403, 407, 414, 421, 427, 446, 447, 448, 449, 454, 460, 462, 480, 482, 484, 491, 498, 502, 503, 504, 511, 524, 531, 534, 547, 555, 568, 569, 571, 572, 591, 594, 598, 601, 603, 611, 622, 625, 651, 656, 663, 673, 686, 689, 704, 711, 732, 741, 742, 743, 760, 763, 765, 766, 780, 783, 789, 791, 794, 802, 803, 807, 808, 813, 816, 822, 823, 831, 837, 840, 901, 902, 906, 926, 942, 948, 949, 953, 957, 963, 967, 968, 978, 982, 987, 991, 994, 995, 996, 998, 1007, 1009], "84": [4, 6, 66, 132, 172, 199, 280, 296, 328, 342, 380, 381, 751, 776, 953, 963, 983], "14": [4, 8, 11, 13, 35, 46, 57, 59, 60, 63, 70, 76, 92, 130, 154, 165, 170, 172, 199, 203, 208, 213, 218, 237, 243, 244, 246, 252, 257, 258, 281, 282, 292, 314, 317, 333, 340, 342, 343, 358, 363, 365, 366, 373, 377, 460, 462, 474, 517, 518, 549, 550, 599, 607, 656, 776, 780, 831, 946, 949, 953, 963, 968, 978, 991, 993, 994, 996, 997, 1001, 1006], "395": 4, "81": [4, 47, 222, 296, 297, 373, 663, 724, 751, 762, 776, 792, 953, 954, 956, 963], "0000": [4, 292], "02": [4, 12, 28, 41, 47, 49, 55, 59, 61, 77, 79, 87, 90, 103, 110, 135, 139, 144, 152, 153, 162, 199, 208, 216, 218, 233, 239, 245, 263, 273, 276, 278, 280, 301, 303, 320, 324, 339, 342, 350, 377, 405, 409, 561, 569, 622, 640, 762, 776, 844, 860, 874, 949, 974], "13": [4, 6, 10, 11, 13, 41, 70, 92, 96, 110, 113, 115, 135, 148, 153, 158, 167, 190, 232, 239, 242, 244, 276, 278, 282, 307, 340, 342, 345, 351, 358, 377, 385, 460, 474, 477, 496, 497, 515, 516, 546, 570, 599, 603, 697, 722, 780, 809, 824, 831, 857, 858, 949, 953, 954, 959, 960, 963, 968, 978, 991, 993, 995, 996, 999, 1000, 1001, 1002, 1005], "635": [4, 580], "80": [4, 6, 11, 16, 26, 64, 76, 121, 128, 132, 154, 160, 216, 280, 284, 296, 310, 312, 319, 325, 328, 340, 342, 345, 371, 377, 382, 384, 408, 443, 474, 505, 677, 762, 776, 846, 859, 878, 942, 948, 949, 953, 960, 966, 969, 987], "75": [4, 6, 7, 8, 10, 13, 31, 41, 52, 77, 104, 132, 144, 145, 149, 153, 158, 160, 163, 172, 188, 199, 222, 226, 227, 238, 247, 251, 263, 278, 290, 317, 319, 328, 413, 465, 515, 601, 622, 658, 670, 676, 697, 702, 703, 708, 716, 719, 757, 762, 843, 851, 855, 862, 878, 890, 891, 934, 953, 955, 963, 969, 971, 983, 995], "17374": [4, 13], "19": [4, 13, 142, 153, 181, 185, 203, 206, 229, 282, 283, 297, 320, 342, 343, 349, 359, 363, 365, 366, 373, 374, 381, 384, 408, 456, 480, 481, 482, 500, 504, 505, 511, 513, 514, 521, 522, 523, 524, 528, 529, 530, 546, 553, 571, 612, 622, 623, 630, 631, 632, 635, 636, 638, 640, 642, 651, 671, 744, 748, 762, 776, 788, 793, 794, 796, 797, 811, 812, 831, 842, 863, 867, 870, 873, 874, 875, 876, 942, 953, 963, 974, 991, 993, 994, 995, 996, 998, 1001, 1010], "misti": [4, 154], "10": [4, 5, 6, 7, 8, 10, 12, 13, 15, 16, 17, 20, 24, 25, 26, 28, 29, 30, 34, 36, 39, 40, 41, 42, 43, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 67, 68, 70, 73, 74, 75, 76, 77, 79, 80, 85, 89, 90, 91, 92, 96, 97, 101, 103, 104, 106, 107, 108, 110, 111, 112, 114, 115, 118, 119, 122, 124, 128, 132, 135, 138, 139, 141, 143, 144, 146, 148, 149, 152, 153, 154, 155, 156, 158, 160, 165, 171, 172, 174, 175, 179, 181, 182, 183, 184, 185, 186, 187, 188, 192, 193, 194, 197, 198, 199, 202, 203, 208, 211, 212, 213, 214, 215, 217, 218, 219, 221, 227, 228, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 246, 249, 252, 255, 257, 263, 273, 274, 275, 276, 278, 279, 281, 282, 283, 287, 288, 289, 290, 291, 293, 294, 296, 297, 298, 300, 305, 306, 307, 309, 310, 312, 314, 315, 317, 319, 320, 321, 328, 332, 339, 340, 341, 342, 345, 347, 350, 351, 357, 358, 359, 363, 364, 370, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 386, 402, 407, 411, 413, 415, 416, 417, 423, 424, 426, 439, 456, 457, 460, 464, 465, 466, 468, 474, 475, 476, 477, 480, 484, 485, 488, 492, 495, 499, 500, 501, 502, 503, 505, 506, 508, 509, 510, 512, 516, 519, 520, 521, 522, 525, 526, 528, 529, 530, 531, 532, 534, 546, 547, 557, 558, 563, 564, 569, 571, 575, 581, 583, 591, 594, 596, 598, 599, 600, 601, 604, 606, 607, 608, 613, 623, 628, 629, 630, 631, 633, 634, 636, 637, 639, 640, 641, 642, 649, 650, 655, 656, 659, 660, 663, 669, 679, 689, 705, 719, 732, 760, 761, 762, 763, 764, 765, 766, 773, 776, 777, 778, 779, 780, 782, 783, 784, 789, 791, 792, 793, 794, 800, 801, 802, 804, 805, 806, 812, 821, 822, 823, 825, 831, 835, 838, 839, 842, 854, 862, 868, 871, 873, 874, 878, 889, 899, 902, 906, 917, 921, 922, 923, 929, 930, 939, 942, 943, 948, 949, 950, 951, 953, 954, 956, 957, 959, 960, 963, 967, 968, 974, 978, 982, 983, 985, 986, 987, 990, 991, 994, 995, 996, 1001, 1003, 1004, 1005, 1007, 1008], "66": [4, 205, 284, 342, 373, 390, 425, 496, 596, 676, 746, 747, 758, 844, 852, 953, 965], "880": 4, "60": [4, 6, 16, 56, 69, 77, 85, 90, 181, 193, 199, 201, 202, 222, 227, 246, 251, 297, 310, 319, 339, 373, 377, 414, 421, 677, 762, 953, 963, 983, 993, 996], "11": [4, 8, 13, 19, 70, 76, 89, 135, 140, 153, 154, 165, 181, 182, 183, 186, 201, 218, 235, 243, 244, 250, 261, 262, 264, 282, 289, 292, 293, 306, 310, 315, 321, 339, 342, 343, 351, 358, 373, 376, 377, 380, 414, 421, 446, 447, 448, 449, 460, 465, 481, 482, 576, 614, 620, 634, 679, 685, 686, 687, 741, 742, 743, 763, 766, 780, 783, 790, 817, 874, 903, 917, 945, 949, 951, 963, 967, 968, 974, 978, 985, 987, 991, 995, 999, 1001, 1002, 1004, 1007, 1008], "0014": 4, "17375": [4, 13], "20": [4, 7, 8, 13, 15, 16, 19, 24, 25, 26, 31, 32, 36, 37, 40, 43, 44, 47, 51, 52, 58, 64, 73, 77, 85, 87, 94, 96, 103, 107, 110, 111, 114, 117, 121, 122, 124, 128, 130, 131, 132, 135, 143, 152, 154, 155, 158, 163, 170, 171, 173, 177, 178, 180, 181, 182, 185, 190, 193, 194, 195, 196, 198, 204, 212, 218, 226, 228, 229, 238, 239, 241, 242, 244, 249, 250, 252, 255, 258, 262, 263, 264, 265, 266, 269, 276, 282, 283, 284, 288, 289, 290, 291, 293, 296, 297, 300, 304, 306, 310, 312, 317, 320, 321, 325, 326, 338, 342, 345, 347, 349, 350, 351, 363, 373, 380, 381, 405, 410, 411, 413, 428, 429, 433, 435, 436, 442, 452, 453, 454, 455, 456, 458, 460, 461, 464, 466, 468, 469, 476, 479, 480, 487, 495, 500, 501, 506, 509, 510, 512, 516, 519, 520, 523, 524, 525, 526, 527, 533, 534, 546, 553, 554, 556, 558, 561, 563, 593, 594, 609, 613, 622, 630, 631, 632, 640, 642, 660, 668, 672, 677, 680, 688, 689, 702, 719, 720, 730, 755, 756, 760, 761, 762, 776, 787, 788, 789, 792, 794, 797, 798, 799, 802, 803, 810, 811, 822, 823, 824, 825, 827, 829, 830, 838, 839, 840, 841, 846, 860, 861, 863, 864, 869, 872, 877, 883, 885, 886, 889, 931, 942, 949, 953, 956, 959, 960, 963, 966, 974, 976, 977, 979, 985, 989, 991, 993, 999, 1002, 1005, 1007, 1008], "17376": [4, 13], "21": [4, 13, 69, 135, 153, 170, 182, 189, 199, 218, 229, 258, 276, 280, 282, 293, 342, 343, 347, 349, 363, 370, 380, 381, 405, 409, 438, 442, 493, 496, 525, 526, 527, 533, 534, 552, 553, 555, 591, 633, 651, 717, 762, 764, 776, 788, 831, 838, 840, 846, 863, 879, 901, 945, 949, 954, 963, 974, 991, 993, 994, 996, 1000, 1001, 1003], "17377": [4, 13], "22": [4, 13, 39, 99, 105, 106, 148, 149, 150, 153, 154, 155, 198, 221, 229, 255, 260, 276, 278, 282, 286, 289, 292, 293, 297, 321, 345, 350, 363, 370, 401, 412, 436, 442, 452, 453, 459, 460, 468, 479, 488, 495, 501, 506, 509, 510, 521, 522, 523, 524, 525, 527, 528, 529, 530, 531, 532, 533, 534, 558, 573, 591, 592, 596, 598, 609, 611, 615, 617, 619, 622, 623, 625, 627, 629, 633, 652, 656, 666, 668, 677, 720, 732, 741, 746, 747, 751, 762, 763, 767, 776, 781, 783, 785, 786, 787, 788, 789, 790, 791, 792, 809, 811, 813, 815, 816, 817, 822, 823, 824, 826, 829, 845, 856, 865, 867, 868, 869, 870, 871, 873, 874, 875, 876, 896, 897, 945, 953, 963, 974, 991, 993, 996, 1001, 1004, 1006], "56": [4, 13, 190, 199, 212, 351, 677, 698, 953, 963, 993], "8": [4, 5, 6, 7, 8, 9, 12, 13, 14, 19, 24, 25, 26, 29, 30, 31, 32, 34, 40, 41, 42, 45, 47, 50, 52, 57, 59, 61, 62, 66, 68, 70, 71, 76, 79, 83, 84, 85, 87, 88, 91, 92, 95, 97, 101, 104, 106, 107, 111, 113, 114, 116, 119, 122, 123, 126, 134, 135, 138, 140, 142, 143, 145, 146, 149, 152, 153, 154, 156, 158, 160, 161, 166, 167, 172, 175, 181, 182, 185, 189, 191, 197, 199, 201, 202, 203, 205, 206, 209, 212, 213, 214, 216, 220, 221, 222, 224, 225, 226, 228, 229, 230, 233, 234, 236, 237, 238, 239, 241, 242, 243, 245, 248, 249, 255, 257, 260, 262, 266, 270, 273, 275, 276, 278, 280, 281, 282, 283, 284, 287, 292, 296, 297, 298, 300, 301, 304, 307, 311, 312, 314, 315, 316, 319, 320, 321, 326, 328, 333, 339, 340, 342, 343, 345, 350, 351, 363, 365, 366, 371, 373, 377, 378, 380, 381, 382, 384, 386, 403, 407, 408, 411, 413, 414, 416, 419, 420, 421, 426, 427, 433, 434, 435, 436, 437, 438, 439, 440, 443, 444, 445, 447, 448, 449, 451, 454, 460, 462, 466, 467, 478, 480, 495, 498, 502, 504, 507, 509, 511, 513, 514, 519, 520, 529, 534, 546, 552, 553, 554, 555, 568, 569, 592, 593, 600, 601, 612, 622, 634, 640, 653, 656, 657, 658, 659, 663, 666, 670, 671, 673, 674, 679, 685, 690, 691, 692, 704, 708, 709, 713, 714, 716, 745, 746, 748, 751, 752, 753, 754, 758, 760, 763, 764, 769, 772, 779, 780, 783, 784, 791, 792, 794, 803, 805, 806, 812, 822, 823, 824, 830, 837, 844, 846, 867, 870, 900, 901, 902, 906, 922, 928, 929, 930, 931, 932, 933, 934, 942, 943, 949, 950, 951, 953, 956, 961, 963, 967, 977, 978, 982, 983, 984, 985, 986, 990, 991, 994, 995, 996, 1000, 1001, 1006, 1007, 1009], "9981": 4, "17378": [4, 13], "23": [4, 13, 19, 25, 32, 47, 90, 118, 135, 150, 181, 210, 220, 222, 229, 276, 282, 286, 289, 290, 291, 294, 297, 300, 342, 343, 345, 351, 363, 365, 366, 380, 386, 396, 404, 411, 416, 418, 426, 429, 431, 432, 439, 442, 443, 444, 446, 447, 448, 454, 456, 464, 465, 466, 468, 469, 474, 476, 478, 486, 488, 502, 503, 504, 507, 511, 518, 520, 522, 524, 525, 526, 529, 532, 533, 534, 571, 572, 575, 591, 594, 596, 599, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 631, 633, 634, 636, 637, 639, 642, 643, 644, 681, 693, 741, 791, 797, 798, 799, 808, 816, 823, 826, 838, 845, 853, 854, 863, 866, 868, 871, 874, 876, 883, 885, 886, 896, 897, 902, 953, 974, 991, 993, 994, 1000, 1001, 1002, 1005], "65": [4, 31, 154, 181, 247, 284, 373, 403, 466, 481, 561, 663, 704, 755, 756, 960, 983, 993, 994, 995], "17379": [4, 13, 1005], "row": [4, 19, 20, 21, 24, 26, 32, 41, 57, 71, 83, 85, 107, 110, 119, 122, 148, 181, 182, 183, 209, 212, 218, 219, 280, 327, 332, 340, 347, 354, 358, 359, 370, 373, 376, 381, 388, 406, 407, 411, 413, 414, 415, 417, 420, 421, 423, 428, 432, 452, 454, 455, 456, 457, 458, 459, 464, 465, 466, 468, 469, 474, 475, 477, 498, 506, 512, 515, 554, 555, 584, 596, 607, 610, 611, 616, 617, 624, 625, 626, 627, 645, 648, 656, 660, 661, 674, 682, 683, 688, 721, 722, 726, 729, 731, 732, 733, 734, 736, 737, 739, 741, 742, 743, 744, 760, 761, 794, 800, 801, 802, 803, 804, 810, 813, 814, 815, 816, 817, 820, 831, 835, 837, 838, 840, 850, 851, 852, 855, 856, 859, 863, 881, 885, 886, 902, 924, 927, 931, 933, 935, 936, 939, 940, 942, 943, 945, 947, 949, 951, 953, 954, 956, 963, 964, 967, 968, 973, 1000, 1001, 1002, 1003, 1008], "onli": [4, 7, 11, 14, 15, 20, 23, 24, 25, 26, 28, 31, 32, 34, 36, 37, 42, 46, 50, 52, 55, 63, 66, 67, 68, 70, 71, 76, 83, 90, 91, 93, 97, 101, 103, 108, 109, 110, 111, 113, 120, 121, 130, 131, 132, 135, 137, 139, 142, 144, 146, 149, 150, 152, 153, 154, 158, 159, 164, 165, 170, 177, 181, 182, 184, 187, 189, 190, 199, 201, 202, 208, 210, 212, 214, 215, 219, 222, 224, 225, 226, 229, 230, 234, 236, 238, 240, 241, 244, 245, 246, 247, 249, 250, 255, 257, 258, 264, 266, 269, 271, 275, 278, 279, 283, 284, 289, 290, 296, 297, 299, 303, 304, 307, 311, 312, 315, 316, 319, 320, 321, 323, 324, 327, 328, 332, 333, 334, 338, 339, 340, 342, 343, 345, 347, 349, 350, 351, 352, 353, 354, 357, 359, 360, 363, 364, 367, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 388, 389, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 423, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 446, 447, 448, 449, 453, 454, 455, 456, 458, 460, 461, 464, 465, 466, 467, 468, 469, 472, 473, 474, 476, 480, 483, 487, 488, 492, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 545, 546, 547, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 571, 572, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 599, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 663, 671, 673, 677, 689, 692, 693, 697, 699, 700, 701, 704, 705, 706, 719, 721, 723, 737, 741, 742, 743, 744, 746, 747, 750, 751, 755, 756, 757, 760, 761, 762, 763, 764, 765, 766, 768, 769, 771, 776, 780, 784, 786, 787, 788, 789, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 820, 821, 822, 823, 824, 825, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 878, 879, 881, 883, 884, 885, 886, 889, 891, 894, 902, 904, 907, 909, 914, 919, 942, 943, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 956, 957, 958, 959, 960, 961, 963, 964, 965, 967, 968, 969, 972, 973, 974, 977, 985, 986, 987, 990, 993, 994, 995, 996, 997, 999, 1000, 1001, 1002, 1003, 1005, 1007, 1008, 1009, 1010], "present": [4, 5, 13, 40, 46, 85, 87, 94, 106, 107, 114, 117, 134, 135, 143, 146, 160, 163, 165, 170, 181, 208, 211, 215, 229, 236, 241, 244, 247, 248, 258, 278, 281, 283, 320, 342, 343, 347, 350, 357, 359, 364, 373, 375, 378, 380, 381, 391, 392, 395, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 428, 432, 433, 434, 435, 436, 437, 438, 439, 440, 453, 454, 455, 456, 460, 464, 465, 466, 467, 468, 469, 474, 495, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 513, 514, 525, 526, 527, 530, 533, 534, 545, 546, 547, 552, 553, 555, 581, 591, 592, 593, 594, 614, 618, 641, 652, 653, 654, 655, 676, 692, 693, 701, 732, 746, 747, 750, 760, 761, 762, 765, 766, 774, 776, 789, 807, 808, 809, 811, 813, 815, 816, 817, 824, 829, 837, 838, 839, 840, 841, 843, 846, 857, 858, 869, 877, 879, 880, 902, 937, 952, 953, 954, 955, 960, 963, 971, 973, 996, 1001, 1003, 1004, 1005, 1007, 1008, 1010], "date": [4, 66, 135, 142, 154, 340, 342, 345, 349, 360, 374, 973], "datetim": [4, 17, 142, 154], "panda": [4, 12, 24, 66, 67, 68, 69, 101, 107, 108, 111, 114, 118, 142, 148, 152, 153, 154, 155, 156, 160, 165, 170, 181, 185, 189, 199, 218, 219, 222, 229, 236, 238, 239, 241, 249, 250, 255, 283, 284, 285, 287, 290, 291, 315, 319, 320, 339, 340, 343, 344, 345, 347, 348, 359, 363, 366, 374, 397, 406, 407, 409, 411, 413, 428, 430, 432, 446, 447, 448, 449, 453, 454, 455, 456, 460, 464, 465, 466, 468, 469, 474, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 513, 525, 526, 530, 531, 532, 533, 534, 545, 546, 547, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 591, 592, 593, 594, 596, 597, 599, 602, 603, 604, 605, 606, 652, 653, 656, 762, 765, 766, 776, 791, 809, 814, 817, 821, 824, 825, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 857, 858, 863, 881, 942, 943, 963, 972, 973, 987, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "http": [4, 6, 7, 8, 12, 17, 23, 67, 115, 121, 135, 146, 149, 158, 181, 189, 197, 199, 206, 209, 255, 257, 258, 275, 339, 340, 342, 343, 345, 349, 350, 351, 353, 357, 359, 363, 373, 377, 382, 406, 413, 451, 456, 460, 464, 466, 472, 473, 474, 494, 495, 498, 501, 505, 559, 600, 605, 608, 613, 622, 628, 630, 631, 632, 635, 640, 643, 646, 647, 649, 650, 656, 659, 669, 685, 686, 687, 721, 722, 732, 800, 802, 803, 804, 807, 808, 813, 814, 815, 816, 821, 843, 858, 859, 860, 873, 874, 949, 951, 953, 966, 969, 983, 1003], "pydata": [4, 363, 366, 971, 977], "org": [4, 12, 14, 15, 17, 23, 25, 30, 34, 43, 45, 58, 63, 67, 68, 106, 108, 109, 117, 118, 121, 124, 132, 142, 146, 153, 154, 155, 158, 162, 172, 173, 181, 189, 197, 199, 202, 209, 210, 211, 213, 215, 219, 220, 221, 222, 229, 236, 238, 239, 241, 245, 250, 257, 275, 276, 284, 288, 289, 291, 292, 294, 296, 297, 298, 301, 319, 320, 321, 327, 333, 338, 343, 345, 348, 351, 353, 360, 377, 559, 600, 632, 635, 640, 659, 669, 732, 807, 808, 813, 814, 815, 816, 843, 859, 873, 874, 949, 953, 969, 989, 1001, 1005], "stabl": [4, 146, 153, 175, 179, 183, 258, 288, 315, 320, 343, 345, 349, 351, 354, 359, 363, 377, 381, 385, 435, 436, 442, 497, 619, 636, 638, 651, 656, 687, 715, 901, 902, 949, 955, 956, 963, 973, 993, 994, 999, 1004, 1006, 1010], "user_guid": 4, "timeseri": 4, "html": [4, 8, 12, 25, 67, 68, 106, 108, 109, 117, 118, 121, 124, 132, 135, 142, 146, 153, 154, 155, 158, 162, 209, 211, 215, 219, 220, 221, 222, 229, 236, 238, 239, 245, 250, 276, 284, 288, 289, 291, 292, 294, 298, 327, 340, 342, 345, 346, 348, 349, 353, 374, 377, 381, 387, 451, 472, 473, 622, 800, 804, 898, 951, 972, 973, 1004, 1005, 1006, 1007, 1008, 1010], "compon": [4, 5, 17, 41, 55, 59, 66, 69, 78, 79, 83, 88, 89, 91, 92, 93, 94, 95, 97, 119, 127, 142, 149, 150, 152, 165, 201, 212, 213, 216, 224, 225, 228, 229, 230, 237, 239, 258, 259, 260, 261, 269, 270, 276, 283, 289, 332, 337, 340, 345, 347, 351, 354, 357, 369, 372, 373, 374, 376, 381, 383, 385, 387, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 426, 427, 429, 433, 434, 435, 436, 437, 438, 439, 440, 446, 447, 448, 449, 466, 468, 479, 485, 490, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 537, 545, 546, 547, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 574, 575, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 599, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 652, 653, 654, 655, 656, 659, 760, 761, 762, 765, 766, 776, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 821, 822, 823, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 855, 856, 857, 858, 859, 860, 861, 862, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 901, 902, 945, 950, 952, 963, 965, 968, 972, 973, 974, 975, 977, 981, 987, 988, 989, 993, 995, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "now": [4, 5, 7, 13, 17, 20, 50, 54, 67, 80, 92, 101, 102, 106, 108, 110, 111, 114, 115, 121, 124, 135, 137, 142, 143, 144, 149, 152, 153, 154, 155, 158, 160, 162, 167, 169, 170, 182, 183, 185, 205, 213, 215, 234, 238, 241, 249, 250, 255, 261, 283, 288, 289, 291, 292, 293, 294, 298, 307, 319, 320, 321, 328, 332, 334, 340, 345, 346, 347, 351, 357, 358, 359, 363, 370, 373, 377, 378, 380, 381, 385, 457, 472, 473, 476, 500, 513, 543, 544, 546, 591, 594, 613, 617, 622, 627, 648, 689, 719, 760, 761, 765, 766, 797, 812, 825, 928, 942, 943, 949, 953, 959, 962, 963, 968, 969, 971, 973, 978, 985, 987, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "introspect": [4, 6, 67, 351, 523, 524, 552, 553, 555, 963, 983], "value_count": [4, 13, 154, 255], "11413": 4, "4544": 4, "rain": [4, 13, 154, 949], "1419": 4, "heavy_rain": [4, 154], "name": [4, 6, 7, 9, 10, 11, 12, 13, 17, 19, 24, 26, 28, 29, 34, 41, 42, 55, 59, 67, 69, 71, 77, 88, 93, 104, 105, 106, 107, 111, 114, 121, 153, 154, 155, 170, 179, 181, 183, 185, 187, 188, 196, 198, 199, 201, 202, 208, 214, 215, 217, 218, 222, 226, 233, 235, 236, 239, 241, 242, 245, 247, 248, 255, 258, 266, 267, 273, 274, 280, 282, 284, 291, 292, 300, 312, 319, 320, 321, 333, 334, 339, 340, 343, 345, 347, 349, 350, 352, 353, 359, 363, 367, 370, 373, 377, 380, 381, 383, 387, 389, 394, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 421, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 446, 447, 448, 449, 452, 453, 454, 455, 456, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 474, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 540, 545, 546, 547, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 571, 572, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 596, 597, 598, 599, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 651, 652, 653, 654, 655, 656, 661, 662, 663, 664, 666, 672, 673, 677, 695, 696, 705, 742, 743, 760, 761, 762, 763, 764, 765, 766, 768, 769, 771, 774, 776, 780, 784, 788, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 857, 858, 860, 861, 862, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 878, 879, 884, 885, 886, 889, 893, 894, 895, 897, 909, 910, 911, 913, 916, 923, 937, 941, 942, 947, 949, 953, 954, 960, 961, 963, 969, 973, 982, 983, 985, 987, 993, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "dtype": [4, 8, 10, 11, 13, 17, 45, 46, 50, 62, 66, 67, 111, 113, 115, 116, 117, 138, 139, 140, 149, 153, 154, 183, 199, 222, 224, 236, 242, 246, 255, 265, 271, 284, 290, 291, 293, 297, 327, 339, 340, 345, 347, 357, 359, 369, 374, 377, 380, 388, 389, 391, 394, 406, 407, 411, 412, 413, 414, 415, 417, 423, 428, 430, 431, 433, 436, 438, 452, 453, 454, 455, 460, 461, 462, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 478, 486, 506, 512, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 545, 546, 549, 550, 552, 553, 555, 557, 558, 565, 566, 570, 591, 592, 593, 594, 596, 597, 604, 605, 608, 609, 610, 616, 620, 621, 624, 625, 626, 627, 628, 629, 635, 637, 639, 661, 663, 669, 678, 679, 694, 701, 704, 718, 749, 768, 786, 788, 789, 801, 805, 806, 808, 816, 830, 836, 838, 839, 845, 846, 848, 850, 851, 852, 853, 854, 855, 856, 859, 867, 868, 869, 870, 871, 873, 874, 875, 876, 882, 883, 885, 886, 918, 928, 929, 930, 931, 934, 940, 943, 963, 966, 968, 978, 994, 996, 997, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "int64": [4, 13, 14, 51, 67, 153, 154, 255, 284, 294, 327, 359, 381, 391, 406, 412, 414, 460, 552, 604, 678, 679, 801, 830, 883, 939, 1001, 1004, 1006, 1008, 1009, 1010], "cannot": [4, 13, 37, 53, 71, 77, 87, 92, 109, 153, 154, 165, 181, 199, 215, 278, 307, 315, 334, 344, 346, 351, 357, 359, 360, 373, 374, 375, 377, 378, 380, 381, 383, 429, 485, 502, 503, 504, 507, 511, 574, 577, 578, 579, 581, 583, 584, 586, 587, 589, 615, 619, 646, 656, 675, 681, 741, 765, 766, 812, 813, 815, 816, 817, 825, 826, 835, 836, 847, 883, 885, 886, 942, 943, 947, 949, 950, 954, 959, 963, 968, 969, 973, 977, 982, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "train": [4, 5, 6, 7, 8, 10, 11, 13, 16, 23, 25, 26, 28, 29, 30, 31, 51, 53, 55, 61, 62, 66, 67, 71, 79, 80, 87, 90, 91, 92, 99, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 118, 121, 122, 123, 126, 132, 137, 138, 139, 142, 143, 144, 145, 146, 150, 152, 153, 154, 155, 156, 158, 164, 165, 167, 169, 170, 172, 173, 174, 176, 177, 180, 181, 182, 183, 188, 189, 190, 193, 195, 196, 199, 208, 211, 213, 217, 226, 228, 231, 232, 233, 234, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 257, 258, 261, 264, 265, 266, 267, 269, 271, 273, 274, 275, 278, 280, 282, 283, 287, 290, 294, 295, 296, 297, 300, 301, 303, 304, 306, 314, 315, 321, 322, 325, 326, 328, 332, 333, 334, 337, 340, 342, 347, 350, 357, 358, 359, 367, 369, 371, 373, 374, 375, 376, 378, 380, 381, 382, 383, 385, 401, 404, 405, 407, 408, 411, 413, 415, 416, 417, 418, 423, 429, 433, 434, 436, 437, 438, 439, 440, 446, 447, 448, 449, 451, 452, 453, 457, 460, 461, 462, 464, 468, 488, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 574, 575, 591, 592, 594, 595, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 648, 651, 652, 653, 655, 656, 660, 667, 704, 751, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 821, 822, 823, 825, 830, 831, 834, 835, 838, 839, 843, 844, 845, 846, 850, 851, 853, 854, 855, 856, 857, 858, 860, 861, 862, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 879, 927, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 957, 958, 959, 960, 961, 963, 967, 968, 969, 972, 973, 974, 975, 977, 979, 982, 983, 989, 990, 993, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "learn": [4, 6, 7, 8, 9, 10, 13, 15, 16, 17, 20, 24, 25, 26, 29, 30, 32, 33, 34, 45, 46, 49, 50, 52, 53, 64, 66, 67, 71, 76, 77, 86, 92, 96, 99, 101, 104, 105, 106, 107, 109, 110, 116, 118, 119, 120, 121, 126, 127, 128, 132, 135, 137, 140, 142, 146, 148, 149, 151, 155, 156, 157, 167, 169, 170, 176, 181, 182, 183, 185, 195, 199, 204, 205, 206, 207, 208, 210, 212, 213, 216, 217, 218, 220, 221, 222, 231, 235, 237, 238, 241, 243, 244, 246, 250, 252, 255, 258, 260, 262, 263, 264, 265, 266, 267, 271, 272, 275, 276, 278, 279, 283, 284, 285, 286, 295, 299, 301, 306, 311, 313, 315, 319, 320, 321, 323, 324, 325, 326, 328, 333, 337, 338, 339, 340, 342, 344, 348, 351, 352, 353, 354, 358, 359, 362, 364, 367, 368, 369, 370, 371, 373, 374, 375, 377, 379, 381, 382, 383, 387, 388, 390, 391, 392, 393, 395, 396, 397, 401, 402, 403, 406, 407, 410, 411, 413, 414, 421, 428, 429, 431, 432, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 472, 473, 474, 476, 478, 479, 480, 481, 482, 484, 485, 486, 488, 489, 494, 495, 496, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 513, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 531, 535, 540, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 557, 558, 563, 566, 567, 574, 575, 578, 583, 586, 590, 592, 594, 596, 598, 602, 604, 605, 607, 608, 609, 610, 612, 616, 621, 622, 632, 633, 640, 641, 642, 644, 652, 653, 654, 655, 656, 660, 664, 665, 666, 672, 677, 681, 682, 685, 686, 687, 689, 695, 698, 704, 705, 706, 711, 719, 741, 742, 743, 748, 751, 758, 760, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 799, 800, 801, 802, 803, 804, 807, 809, 814, 821, 822, 823, 824, 825, 826, 828, 830, 832, 835, 837, 838, 839, 840, 843, 844, 845, 846, 849, 857, 858, 860, 861, 862, 863, 865, 866, 867, 870, 873, 874, 875, 876, 888, 896, 897, 919, 920, 921, 942, 943, 945, 946, 947, 949, 951, 952, 953, 954, 955, 956, 957, 959, 960, 961, 963, 964, 967, 968, 969, 970, 971, 974, 976, 980, 982, 983, 989, 990, 991, 993, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "simplifi": [4, 67, 169, 307, 344, 346, 350, 373, 376, 479, 526, 824, 825, 953, 955, 963], "represent": [4, 12, 17, 20, 25, 50, 67, 68, 87, 90, 106, 108, 109, 117, 118, 119, 121, 124, 132, 142, 153, 155, 158, 162, 165, 201, 202, 203, 209, 211, 215, 219, 220, 221, 222, 229, 236, 238, 239, 245, 250, 255, 268, 276, 284, 289, 291, 292, 294, 298, 320, 321, 327, 328, 337, 339, 348, 359, 367, 373, 374, 378, 379, 380, 387, 427, 495, 499, 501, 504, 506, 512, 530, 552, 554, 574, 575, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 594, 607, 610, 616, 622, 623, 624, 626, 630, 631, 632, 640, 641, 642, 732, 760, 761, 768, 784, 821, 834, 838, 839, 843, 845, 858, 865, 877, 879, 882, 898, 919, 945, 950, 952, 954, 956, 957, 958, 960, 963, 968, 973, 978, 979, 981, 985, 987, 993, 994, 997, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "collaps": [4, 154, 218, 278, 307, 357], "those": [4, 7, 12, 17, 19, 52, 57, 67, 102, 114, 135, 146, 152, 154, 155, 156, 181, 183, 185, 199, 206, 212, 215, 217, 218, 230, 232, 238, 241, 244, 255, 274, 278, 283, 304, 307, 319, 320, 321, 332, 333, 339, 345, 347, 349, 350, 351, 352, 357, 359, 360, 363, 370, 371, 373, 377, 378, 380, 381, 383, 412, 414, 425, 428, 432, 458, 459, 460, 467, 521, 522, 528, 529, 533, 534, 545, 656, 661, 676, 682, 699, 762, 765, 766, 774, 776, 783, 807, 808, 809, 811, 813, 814, 815, 816, 817, 865, 866, 867, 870, 873, 874, 875, 876, 913, 942, 945, 949, 952, 953, 955, 956, 957, 960, 963, 969, 971, 972, 977, 978, 987, 993, 996, 999, 1000, 1001, 1006, 1007, 1008, 1009, 1010], "astyp": [4, 14, 34, 38, 41, 42, 50, 57, 59, 63, 76, 93, 111, 113, 128, 152, 154, 171, 172, 199, 204, 214, 218, 249, 258, 285, 381, 943, 949, 1000], "object": [4, 11, 14, 15, 19, 25, 41, 47, 59, 63, 66, 67, 90, 99, 121, 126, 133, 134, 142, 150, 154, 165, 177, 181, 197, 199, 207, 215, 219, 221, 222, 236, 245, 247, 248, 250, 271, 284, 290, 291, 293, 294, 296, 320, 321, 328, 338, 339, 340, 345, 346, 348, 350, 351, 352, 354, 358, 359, 360, 364, 367, 373, 374, 375, 378, 381, 382, 383, 387, 389, 394, 396, 398, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 421, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 442, 446, 447, 448, 449, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 545, 546, 547, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 574, 575, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 651, 652, 653, 654, 655, 656, 657, 658, 661, 662, 663, 664, 665, 666, 675, 682, 695, 696, 705, 721, 722, 744, 745, 752, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 857, 858, 860, 861, 862, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 878, 880, 885, 886, 887, 888, 889, 892, 896, 898, 908, 909, 910, 911, 912, 913, 914, 916, 918, 919, 921, 938, 939, 941, 949, 950, 951, 952, 956, 959, 960, 963, 966, 967, 968, 972, 973, 974, 978, 979, 981, 982, 985, 987, 989, 993, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010], "replac": [4, 24, 75, 91, 101, 137, 144, 148, 154, 167, 182, 241, 258, 280, 285, 289, 309, 343, 345, 347, 349, 351, 354, 359, 367, 374, 377, 380, 381, 405, 409, 428, 467, 479, 519, 520, 527, 546, 552, 553, 554, 555, 571, 572, 591, 594, 598, 603, 605, 691, 748, 768, 774, 776, 784, 824, 825, 828, 848, 861, 868, 922, 924, 927, 942, 943, 945, 949, 953, 963, 968, 969, 972, 973, 993, 994, 995, 997, 998, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1008, 1009, 1010], "to_replac": [4, 154], "valu": [4, 5, 7, 11, 12, 13, 14, 16, 17, 19, 20, 21, 25, 26, 30, 34, 37, 39, 41, 43, 50, 52, 57, 58, 59, 63, 67, 69, 71, 73, 75, 77, 87, 90, 97, 99, 101, 103, 105, 106, 107, 108, 109, 111, 114, 115, 117, 118, 120, 121, 130, 131, 134, 137, 140, 141, 143, 145, 152, 153, 154, 155, 156, 158, 160, 161, 163, 165, 167, 169, 170, 171, 172, 174, 179, 181, 182, 183, 185, 187, 196, 199, 200, 203, 204, 208, 209, 210, 211, 212, 213, 214, 218, 221, 222, 224, 230, 232, 234, 236, 238, 239, 241, 243, 244, 245, 247, 249, 250, 251, 253, 258, 261, 271, 273, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 289, 299, 307, 311, 312, 315, 319, 320, 321, 323, 328, 332, 333, 334, 337, 338, 339, 340, 342, 346, 347, 348, 350, 351, 352, 354, 357, 358, 359, 362, 363, 364, 370, 371, 372, 373, 374, 375, 376, 377, 381, 382, 383, 384, 385, 386, 387, 396, 397, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 446, 447, 448, 449, 451, 454, 455, 457, 460, 461, 462, 465, 472, 473, 475, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 545, 546, 547, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 661, 662, 663, 664, 665, 666, 668, 669, 671, 672, 673, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 698, 699, 700, 701, 702, 703, 704, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 732, 734, 737, 741, 742, 743, 744, 745, 746, 747, 748, 750, 751, 752, 753, 754, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 771, 773, 774, 776, 779, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 879, 880, 882, 883, 884, 885, 886, 889, 890, 891, 892, 894, 902, 904, 910, 913, 914, 915, 916, 917, 921, 929, 930, 931, 942, 945, 946, 947, 948, 949, 950, 952, 954, 955, 956, 957, 958, 959, 960, 964, 966, 967, 968, 974, 975, 977, 978, 983, 985, 986, 987, 988, 989, 990, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "1422": 4, "expect": [4, 5, 10, 13, 23, 34, 41, 50, 80, 85, 92, 101, 104, 106, 108, 111, 114, 118, 132, 137, 143, 150, 151, 155, 167, 172, 181, 182, 183, 185, 189, 199, 212, 215, 218, 219, 225, 226, 229, 230, 245, 258, 283, 315, 319, 320, 328, 332, 333, 345, 347, 349, 350, 351, 352, 353, 354, 357, 358, 359, 360, 362, 364, 369, 371, 373, 374, 375, 377, 380, 381, 382, 396, 428, 429, 431, 432, 433, 446, 447, 448, 460, 487, 496, 500, 502, 505, 516, 518, 519, 520, 521, 522, 524, 526, 527, 528, 529, 530, 531, 532, 534, 536, 549, 550, 552, 553, 555, 559, 561, 570, 575, 591, 596, 597, 599, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 624, 625, 626, 627, 628, 629, 631, 634, 636, 637, 638, 639, 642, 643, 659, 668, 669, 680, 698, 751, 757, 798, 799, 800, 801, 802, 803, 804, 807, 808, 809, 811, 815, 816, 817, 818, 823, 826, 831, 838, 839, 842, 845, 846, 855, 856, 863, 865, 866, 867, 868, 869, 870, 871, 874, 876, 916, 942, 949, 952, 953, 955, 959, 963, 967, 968, 969, 974, 976, 983, 986, 987, 989, 993, 994, 995, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "balanc": [4, 6, 13, 50, 63, 68, 101, 107, 112, 134, 150, 185, 186, 231, 236, 239, 241, 242, 278, 334, 357, 359, 371, 377, 378, 380, 466, 479, 498, 504, 505, 511, 521, 525, 528, 604, 622, 623, 630, 632, 638, 639, 640, 667, 672, 692, 706, 745, 750, 762, 763, 780, 825, 865, 867, 870, 873, 875, 890, 891, 942, 968, 969, 974, 983, 993, 995, 998, 999, 1002, 1003, 1007], "fall": [4, 13, 114, 144, 237, 238, 345, 347, 372, 373, 381, 398, 410, 411, 472, 473, 690, 691, 757, 842, 854, 952, 953, 963, 978, 986, 1002], "4496": [4, 13], "4409": [4, 13], "4242": [4, 13], "winter": [4, 13], "4232": [4, 13], "order": [4, 14, 20, 23, 44, 52, 61, 62, 68, 73, 82, 96, 109, 110, 111, 115, 128, 142, 152, 153, 156, 158, 170, 174, 177, 181, 182, 187, 195, 199, 203, 212, 215, 218, 222, 226, 233, 236, 238, 245, 257, 276, 278, 283, 284, 285, 289, 290, 315, 319, 321, 328, 332, 333, 340, 345, 347, 350, 351, 354, 359, 363, 364, 367, 373, 374, 375, 377, 378, 379, 380, 381, 383, 385, 404, 407, 410, 411, 413, 414, 419, 420, 421, 423, 428, 452, 453, 454, 459, 461, 479, 498, 499, 503, 504, 505, 507, 511, 515, 517, 519, 520, 521, 522, 523, 527, 528, 529, 530, 531, 545, 552, 555, 557, 558, 561, 570, 571, 572, 574, 586, 591, 595, 604, 622, 623, 629, 640, 649, 650, 652, 653, 657, 661, 663, 664, 666, 668, 676, 677, 682, 689, 692, 693, 701, 703, 704, 705, 717, 719, 741, 745, 746, 747, 750, 751, 752, 757, 762, 763, 765, 766, 767, 769, 773, 776, 780, 781, 786, 793, 794, 796, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 815, 822, 825, 836, 838, 839, 840, 844, 845, 846, 849, 850, 851, 853, 854, 855, 856, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 885, 886, 891, 902, 917, 922, 943, 949, 950, 953, 954, 956, 957, 963, 966, 967, 968, 969, 973, 982, 984, 985, 987, 993, 995, 996, 997, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "sensit": [4, 41, 52, 75, 76, 104, 114, 154, 183, 184, 185, 208, 278, 307, 333, 334, 360, 375, 380, 416, 426, 656, 676, 677, 751, 845, 948, 949, 950, 952, 953, 957, 959, 967, 968, 978, 986, 997], "splitter": [4, 293, 294, 359, 364, 377, 401, 436, 528, 529, 531, 532, 558, 566, 611, 615, 617, 619, 623, 625, 627, 629, 637, 639, 762, 764, 765, 766, 767, 768, 776, 777, 778, 781, 782, 784, 785, 786, 787, 788, 789, 790, 792, 796, 799, 873, 874, 875, 876, 969, 973, 999, 1000, 1001, 1002, 1009, 1010, 1011], "evalu": [4, 5, 6, 10, 11, 23, 30, 33, 35, 39, 40, 46, 52, 61, 67, 68, 90, 101, 107, 108, 109, 111, 112, 114, 130, 131, 140, 150, 156, 158, 161, 170, 183, 188, 199, 207, 231, 232, 235, 236, 237, 238, 241, 243, 244, 245, 247, 249, 250, 252, 257, 265, 267, 271, 278, 283, 285, 289, 293, 294, 300, 307, 311, 319, 328, 338, 340, 347, 351, 359, 362, 372, 374, 381, 382, 383, 411, 413, 428, 430, 452, 455, 456, 457, 460, 473, 484, 500, 515, 525, 526, 527, 531, 532, 555, 558, 566, 574, 575, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 591, 595, 596, 597, 598, 611, 617, 623, 637, 639, 661, 663, 665, 666, 667, 668, 669, 675, 677, 678, 679, 681, 682, 689, 690, 699, 700, 705, 717, 718, 719, 720, 749, 758, 760, 761, 762, 765, 766, 768, 776, 784, 786, 787, 788, 789, 790, 791, 792, 796, 802, 805, 806, 811, 823, 825, 826, 832, 835, 838, 839, 843, 844, 845, 850, 851, 853, 854, 855, 856, 867, 870, 873, 888, 896, 927, 945, 949, 951, 955, 956, 959, 960, 961, 964, 967, 969, 972, 974, 977, 978, 979, 982, 983, 985, 988, 989, 993, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1006], "realist": [4, 8, 240, 247, 248, 304, 340, 953], "gap": [4, 13, 319, 340, 377, 435, 436, 442, 552, 610, 611, 616, 617, 624, 625, 626, 627, 645, 648, 783, 873, 874, 875, 876, 949, 950, 1001, 1005, 1007], "between": [4, 5, 8, 9, 11, 12, 13, 20, 32, 34, 35, 36, 37, 39, 40, 50, 57, 58, 63, 79, 83, 90, 92, 95, 101, 104, 107, 111, 112, 114, 130, 137, 142, 143, 145, 150, 152, 153, 154, 155, 160, 165, 167, 172, 176, 177, 181, 182, 183, 185, 186, 189, 199, 201, 208, 213, 215, 218, 231, 234, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 250, 255, 257, 260, 264, 265, 267, 268, 278, 283, 285, 290, 299, 307, 311, 314, 315, 319, 320, 321, 327, 328, 332, 333, 340, 345, 347, 354, 357, 358, 359, 360, 364, 367, 370, 372, 373, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 394, 404, 405, 408, 409, 410, 411, 414, 416, 417, 418, 420, 421, 422, 427, 433, 434, 435, 436, 437, 438, 439, 440, 446, 447, 448, 455, 457, 458, 459, 460, 461, 462, 466, 478, 479, 485, 488, 491, 498, 500, 501, 502, 503, 504, 505, 510, 511, 513, 517, 518, 523, 524, 526, 527, 528, 529, 548, 552, 554, 555, 556, 557, 558, 559, 560, 562, 563, 564, 566, 568, 569, 570, 571, 572, 573, 575, 584, 591, 596, 597, 598, 603, 606, 609, 610, 611, 616, 617, 620, 621, 622, 623, 624, 625, 626, 627, 630, 631, 632, 634, 640, 642, 643, 645, 648, 652, 654, 656, 658, 659, 660, 663, 665, 667, 668, 669, 671, 673, 674, 678, 679, 680, 681, 683, 687, 688, 689, 692, 693, 694, 697, 699, 700, 706, 715, 717, 718, 719, 720, 721, 722, 723, 724, 726, 727, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 746, 747, 749, 750, 755, 756, 758, 759, 760, 761, 762, 763, 764, 765, 767, 771, 779, 780, 781, 782, 783, 790, 791, 793, 795, 807, 808, 809, 811, 812, 813, 815, 816, 817, 818, 819, 822, 823, 829, 832, 833, 835, 836, 838, 839, 842, 843, 844, 846, 851, 854, 855, 859, 865, 866, 870, 873, 874, 875, 876, 878, 899, 910, 911, 922, 942, 945, 947, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 963, 964, 965, 967, 968, 969, 970, 973, 974, 985, 986, 993, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "side": [4, 16, 26, 56, 114, 174, 185, 199, 203, 211, 278, 311, 319, 328, 340, 357, 371, 374, 377, 378, 381, 390, 396, 479, 949, 950, 953, 955, 968, 1002], "split": [4, 5, 6, 11, 13, 15, 17, 23, 25, 29, 30, 66, 92, 101, 106, 107, 108, 110, 112, 113, 114, 115, 116, 117, 126, 131, 135, 152, 153, 156, 165, 176, 177, 181, 184, 189, 199, 209, 215, 218, 225, 226, 232, 233, 236, 238, 243, 245, 248, 255, 261, 267, 273, 275, 279, 280, 285, 291, 293, 299, 307, 319, 321, 327, 340, 345, 352, 358, 359, 363, 364, 371, 373, 378, 380, 381, 382, 401, 406, 407, 436, 437, 443, 444, 461, 495, 501, 503, 506, 510, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 552, 553, 555, 558, 566, 611, 615, 617, 619, 625, 627, 629, 637, 639, 659, 668, 669, 681, 694, 700, 720, 758, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 796, 799, 805, 806, 822, 823, 846, 850, 851, 853, 854, 855, 856, 873, 874, 875, 876, 924, 942, 945, 949, 950, 956, 959, 960, 961, 963, 967, 969, 973, 978, 982, 983, 985, 986, 987, 989, 993, 996, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "limit": [4, 8, 17, 34, 39, 54, 63, 77, 101, 108, 109, 115, 121, 148, 153, 154, 155, 160, 181, 182, 198, 212, 245, 280, 284, 290, 315, 321, 328, 333, 346, 347, 350, 357, 359, 360, 371, 373, 376, 378, 382, 410, 427, 432, 523, 524, 525, 526, 596, 614, 622, 623, 643, 646, 647, 652, 741, 783, 813, 815, 816, 817, 838, 839, 863, 867, 868, 869, 870, 871, 921, 942, 949, 950, 952, 953, 960, 961, 963, 973, 978, 989, 1001, 1003, 1006, 1007, 1010], "cv": [4, 12, 13, 23, 24, 25, 51, 67, 68, 69, 70, 73, 94, 107, 111, 113, 126, 134, 148, 149, 153, 170, 180, 183, 234, 236, 237, 238, 239, 240, 241, 243, 244, 248, 252, 255, 284, 292, 294, 307, 315, 358, 359, 364, 371, 377, 380, 382, 401, 436, 531, 532, 558, 566, 611, 615, 617, 619, 623, 625, 627, 629, 637, 639, 762, 764, 765, 766, 767, 768, 776, 777, 778, 781, 782, 784, 785, 786, 787, 788, 789, 790, 792, 796, 799, 846, 873, 874, 942, 945, 948, 949, 953, 963, 973, 982, 983, 987, 995, 999, 1000, 1001, 1002, 1003, 1005, 1007, 1009, 1010, 1011], "fold": [4, 64, 70, 73, 107, 110, 113, 126, 134, 153, 170, 226, 233, 234, 236, 238, 239, 241, 248, 285, 299, 315, 328, 340, 345, 348, 349, 358, 359, 364, 373, 382, 401, 436, 457, 500, 531, 532, 558, 566, 611, 615, 617, 619, 623, 625, 627, 629, 637, 639, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 796, 799, 846, 867, 870, 942, 949, 953, 963, 968, 982, 993, 995, 997, 998, 999, 1001, 1002, 1004, 1005, 1010], "1000": [4, 7, 8, 15, 25, 29, 34, 47, 68, 71, 79, 96, 104, 106, 108, 112, 113, 114, 118, 123, 127, 130, 143, 158, 167, 173, 184, 203, 211, 212, 214, 224, 228, 236, 238, 244, 247, 249, 263, 265, 279, 282, 288, 289, 291, 293, 294, 308, 309, 316, 319, 320, 350, 351, 358, 371, 381, 401, 437, 443, 444, 495, 496, 501, 503, 506, 507, 509, 510, 512, 517, 528, 596, 610, 611, 615, 616, 617, 619, 624, 625, 626, 627, 630, 631, 632, 636, 640, 641, 642, 651, 656, 662, 665, 727, 842, 854, 860, 865, 866, 942, 946, 968, 982, 985, 1000, 1002], "datapoint": [4, 39, 49, 53, 141, 144, 164, 213, 214, 218, 233, 238, 257, 313, 383, 410, 466, 521, 522, 523, 524, 528, 529, 530, 575, 873, 874, 875, 876, 946], "should": [4, 5, 6, 8, 9, 13, 15, 17, 24, 26, 29, 34, 50, 99, 101, 104, 107, 111, 114, 135, 148, 153, 158, 160, 161, 165, 181, 183, 199, 208, 213, 214, 215, 218, 238, 241, 244, 245, 247, 255, 258, 279, 280, 285, 298, 307, 315, 320, 328, 332, 333, 334, 340, 343, 344, 345, 347, 349, 350, 352, 353, 354, 358, 359, 363, 364, 367, 369, 371, 373, 375, 377, 378, 380, 381, 382, 383, 384, 385, 387, 390, 396, 401, 404, 406, 407, 408, 409, 411, 413, 414, 416, 418, 421, 422, 423, 426, 427, 428, 429, 431, 433, 434, 435, 436, 437, 438, 439, 440, 446, 447, 448, 449, 451, 460, 467, 472, 473, 480, 485, 487, 488, 491, 496, 497, 498, 500, 502, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 545, 546, 549, 550, 552, 553, 554, 555, 557, 558, 561, 566, 571, 572, 574, 575, 584, 591, 592, 593, 595, 596, 597, 599, 602, 603, 604, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 648, 651, 653, 654, 655, 656, 657, 658, 659, 660, 665, 673, 690, 691, 705, 729, 734, 737, 741, 742, 743, 744, 745, 748, 751, 752, 755, 763, 764, 769, 770, 771, 772, 779, 780, 781, 782, 787, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 822, 823, 825, 828, 829, 830, 831, 832, 833, 834, 836, 837, 838, 839, 844, 845, 846, 848, 852, 855, 856, 857, 858, 859, 860, 861, 862, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 885, 889, 891, 894, 902, 910, 914, 919, 922, 924, 927, 928, 929, 930, 931, 932, 933, 934, 942, 943, 947, 948, 949, 950, 953, 954, 956, 958, 959, 960, 963, 966, 967, 968, 969, 973, 977, 983, 987, 990, 993, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "enough": [4, 13, 34, 41, 59, 107, 110, 137, 148, 154, 155, 170, 181, 213, 216, 218, 282, 319, 321, 328, 343, 345, 349, 360, 371, 372, 373, 375, 377, 380, 531, 532, 553, 762, 765, 766, 768, 776, 789, 902, 942, 947, 950, 952, 959, 963, 968, 972, 977, 999, 1009, 1010], "quantifi": [4, 34, 46, 73, 142, 199, 245, 347, 359, 368, 372, 537, 828, 948, 961, 963, 989], "repres": [4, 8, 10, 12, 13, 15, 20, 25, 30, 32, 41, 45, 46, 47, 50, 84, 87, 89, 95, 96, 108, 109, 117, 153, 160, 168, 173, 183, 185, 186, 190, 203, 205, 213, 218, 227, 232, 235, 238, 241, 245, 263, 280, 311, 319, 321, 327, 334, 337, 340, 342, 347, 357, 358, 359, 360, 367, 371, 373, 377, 378, 379, 380, 381, 382, 402, 406, 410, 416, 427, 434, 435, 436, 437, 438, 439, 440, 452, 454, 455, 456, 458, 460, 462, 464, 465, 466, 468, 469, 474, 491, 498, 500, 502, 504, 505, 511, 519, 527, 545, 552, 555, 593, 596, 598, 604, 640, 642, 661, 663, 665, 693, 706, 752, 762, 764, 775, 776, 779, 782, 788, 790, 791, 794, 795, 801, 807, 808, 809, 811, 812, 813, 815, 816, 817, 822, 823, 832, 838, 839, 862, 865, 866, 885, 886, 906, 911, 943, 949, 950, 951, 952, 953, 954, 955, 956, 957, 959, 961, 963, 964, 966, 967, 969, 978, 983, 984, 986, 999, 1001, 1004, 1005, 1008], "bit": [4, 13, 45, 50, 73, 90, 179, 183, 255, 278, 307, 320, 328, 332, 340, 343, 363, 380, 381, 546, 553, 622, 795, 885, 886, 950, 954, 971, 980, 987, 993, 996, 999, 1001, 1002, 1005, 1006, 1007, 1010, 1011], "less": [4, 5, 8, 49, 50, 57, 85, 87, 90, 97, 101, 108, 114, 115, 137, 144, 153, 163, 165, 181, 183, 185, 214, 218, 225, 227, 238, 239, 247, 249, 252, 279, 282, 283, 284, 289, 291, 311, 319, 320, 328, 332, 334, 340, 345, 347, 357, 359, 373, 377, 378, 380, 381, 385, 403, 405, 407, 409, 412, 414, 416, 421, 424, 426, 427, 446, 447, 448, 460, 479, 495, 499, 501, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 554, 560, 583, 591, 598, 611, 625, 640, 642, 656, 665, 685, 686, 687, 688, 699, 715, 727, 742, 743, 748, 758, 760, 761, 764, 765, 766, 772, 789, 800, 801, 802, 804, 805, 806, 807, 808, 809, 811, 813, 814, 815, 816, 817, 828, 840, 842, 843, 845, 848, 854, 855, 865, 866, 873, 874, 875, 876, 891, 905, 942, 943, 945, 946, 947, 950, 952, 953, 956, 958, 963, 967, 968, 969, 972, 985, 987, 993, 994, 996, 997, 999, 1000, 1001, 1003, 1007, 1008, 1010], "than": [4, 5, 7, 11, 12, 14, 19, 26, 28, 29, 37, 41, 44, 50, 52, 68, 71, 75, 77, 80, 85, 87, 90, 92, 94, 101, 103, 104, 106, 107, 108, 110, 111, 114, 135, 137, 143, 146, 148, 153, 154, 155, 158, 160, 165, 167, 170, 181, 183, 187, 197, 198, 199, 205, 208, 214, 215, 216, 218, 225, 235, 236, 238, 239, 240, 241, 244, 247, 255, 257, 258, 264, 265, 276, 278, 282, 283, 284, 285, 289, 291, 293, 297, 311, 319, 320, 321, 328, 332, 333, 334, 339, 340, 341, 343, 344, 345, 347, 350, 351, 353, 359, 360, 367, 369, 370, 371, 372, 373, 375, 376, 377, 378, 380, 381, 382, 383, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 416, 418, 421, 424, 427, 428, 431, 433, 434, 435, 436, 437, 438, 439, 440, 446, 447, 448, 457, 458, 460, 473, 478, 479, 487, 495, 498, 499, 500, 501, 502, 504, 505, 506, 508, 511, 512, 517, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 537, 545, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 574, 575, 591, 592, 594, 598, 604, 606, 607, 608, 609, 610, 611, 616, 617, 619, 622, 623, 624, 625, 626, 627, 630, 631, 632, 635, 636, 638, 640, 641, 642, 643, 646, 651, 656, 658, 660, 668, 669, 676, 684, 685, 686, 687, 698, 699, 702, 727, 742, 743, 744, 746, 748, 758, 760, 761, 762, 765, 766, 772, 776, 781, 783, 786, 787, 788, 789, 790, 793, 795, 796, 798, 799, 800, 801, 802, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 815, 816, 817, 819, 822, 823, 828, 838, 839, 840, 842, 843, 845, 848, 854, 855, 859, 862, 865, 866, 867, 870, 871, 873, 874, 875, 876, 877, 891, 902, 904, 905, 910, 916, 922, 924, 927, 942, 943, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 959, 960, 961, 963, 967, 968, 969, 972, 973, 976, 978, 982, 985, 986, 987, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "half": [4, 23, 90, 213, 217, 236, 238, 250, 340, 341, 378, 427, 486, 526, 557, 561, 566, 733, 824, 832, 953, 956, 969], "contigu": [4, 21, 347, 357, 370, 377, 381, 407, 411, 413, 423, 610, 611, 616, 617, 624, 625, 626, 627, 645, 648, 744, 781, 805, 806, 865, 867, 868, 869, 870, 871, 968, 996, 1003, 1007], "model_select": [4, 5, 6, 7, 10, 13, 23, 24, 26, 29, 30, 51, 67, 68, 69, 70, 71, 73, 80, 92, 94, 101, 106, 107, 108, 111, 112, 113, 114, 115, 116, 117, 120, 121, 126, 131, 132, 134, 137, 148, 149, 150, 152, 153, 155, 156, 158, 165, 176, 181, 183, 188, 189, 196, 197, 199, 209, 214, 218, 220, 221, 222, 226, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 257, 260, 261, 262, 266, 267, 273, 275, 276, 280, 282, 283, 284, 285, 287, 288, 289, 292, 294, 299, 300, 307, 310, 315, 323, 327, 328, 345, 347, 350, 358, 359, 364, 369, 374, 377, 380, 401, 402, 522, 524, 531, 532, 543, 623, 661, 662, 664, 666, 705, 793, 796, 814, 822, 823, 825, 873, 874, 875, 876, 921, 942, 943, 948, 953, 955, 956, 961, 963, 968, 973, 974, 982, 983, 987, 990, 997, 999, 1000], "timeseriessplit": [4, 13, 165, 233, 377, 999, 1000, 1005], "ts_cv": [4, 13], "n_split": [4, 13, 107, 113, 148, 149, 153, 226, 233, 238, 240, 243, 248, 255, 294, 299, 307, 315, 328, 377, 763, 764, 765, 766, 767, 769, 770, 771, 772, 775, 777, 778, 779, 780, 781, 782, 783, 788, 982, 999, 1001], "5": [4, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 19, 21, 23, 24, 25, 29, 30, 32, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 59, 61, 62, 63, 64, 66, 67, 69, 70, 71, 74, 75, 76, 77, 79, 80, 85, 87, 88, 89, 90, 91, 93, 94, 96, 99, 103, 104, 105, 106, 107, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 123, 126, 128, 130, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 152, 153, 154, 155, 156, 158, 161, 162, 163, 164, 165, 167, 169, 170, 171, 172, 173, 175, 176, 178, 179, 181, 182, 183, 184, 187, 189, 192, 193, 194, 195, 196, 197, 199, 202, 203, 204, 206, 208, 211, 212, 213, 214, 216, 217, 218, 219, 220, 222, 224, 225, 226, 227, 228, 229, 230, 233, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 249, 251, 252, 253, 255, 257, 258, 260, 261, 262, 263, 264, 265, 267, 268, 270, 271, 273, 274, 275, 276, 278, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 299, 300, 301, 305, 306, 307, 308, 309, 311, 312, 314, 315, 316, 317, 319, 320, 321, 323, 324, 325, 326, 327, 328, 340, 342, 343, 345, 347, 350, 351, 357, 358, 359, 363, 365, 366, 371, 373, 374, 377, 378, 380, 381, 382, 383, 384, 385, 388, 401, 402, 403, 404, 406, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 425, 426, 427, 428, 430, 433, 436, 442, 446, 447, 448, 449, 454, 457, 458, 460, 462, 468, 478, 479, 480, 481, 482, 483, 485, 487, 488, 490, 492, 495, 497, 498, 500, 501, 502, 503, 504, 507, 508, 509, 510, 511, 516, 521, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 534, 546, 556, 557, 558, 561, 566, 568, 569, 570, 571, 572, 574, 577, 578, 579, 580, 583, 584, 586, 587, 589, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 605, 607, 608, 609, 610, 611, 615, 616, 617, 619, 620, 621, 623, 624, 625, 626, 627, 629, 630, 631, 632, 634, 636, 640, 641, 642, 644, 645, 648, 652, 653, 655, 656, 657, 659, 660, 663, 667, 669, 671, 673, 676, 677, 684, 685, 686, 687, 689, 690, 691, 693, 695, 698, 701, 702, 703, 704, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 719, 732, 733, 744, 745, 747, 748, 750, 751, 752, 753, 754, 757, 759, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 794, 795, 796, 799, 800, 801, 802, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 819, 822, 823, 824, 825, 830, 831, 832, 834, 835, 837, 838, 839, 840, 841, 842, 844, 845, 846, 848, 850, 851, 852, 853, 854, 855, 859, 865, 866, 867, 868, 869, 870, 871, 873, 875, 881, 882, 885, 886, 890, 891, 900, 901, 902, 903, 904, 906, 907, 908, 916, 917, 921, 922, 924, 925, 928, 929, 930, 931, 932, 933, 934, 942, 943, 945, 948, 949, 951, 952, 953, 954, 955, 956, 957, 959, 960, 961, 963, 965, 967, 968, 975, 976, 978, 982, 983, 985, 986, 987, 989, 991, 994, 995, 996, 998, 1000, 1001, 1003, 1007, 1008, 1009], "48": [4, 13, 42, 93, 142, 222, 284, 342, 351, 373, 474, 561, 663, 709, 789, 800, 942, 955, 963], "max_train_s": [4, 13, 377, 783, 1000], "10000": [4, 11, 13, 28, 40, 60, 68, 69, 115, 126, 167, 174, 181, 189, 197, 212, 214, 251, 289, 304, 306, 328, 334, 380, 381, 525, 526, 608, 643, 842, 871, 965, 983, 987], "test_siz": [4, 5, 6, 10, 13, 23, 24, 26, 29, 30, 67, 106, 112, 113, 115, 116, 120, 152, 158, 165, 176, 181, 188, 189, 196, 197, 235, 236, 240, 245, 247, 251, 257, 266, 267, 273, 275, 276, 280, 282, 283, 289, 307, 315, 328, 350, 377, 662, 764, 779, 782, 783, 791, 793, 814, 943, 955, 956, 982, 983, 993, 994, 999, 1000, 1005], "manual": [4, 43, 52, 153, 154, 156, 182, 192, 240, 258, 299, 305, 319, 321, 332, 333, 340, 345, 349, 350, 357, 358, 363, 373, 377, 378, 379, 401, 413, 531, 815, 838, 844, 942, 947, 948, 949, 952, 953, 956, 963, 973, 978, 979, 987, 1001, 1003, 1009], "inspect": [4, 9, 28, 29, 32, 53, 58, 103, 108, 115, 117, 118, 122, 132, 137, 142, 143, 153, 154, 155, 156, 164, 173, 190, 195, 219, 238, 241, 250, 261, 266, 269, 283, 287, 288, 289, 290, 292, 294, 303, 304, 305, 306, 308, 309, 311, 319, 324, 333, 347, 359, 373, 374, 380, 381, 428, 517, 518, 521, 522, 523, 524, 528, 529, 530, 794, 825, 826, 873, 874, 875, 876, 941, 953, 954, 957, 960, 961, 968, 972, 974, 987, 989, 996], "variou": [4, 12, 33, 34, 36, 52, 53, 55, 57, 58, 59, 76, 79, 82, 90, 133, 150, 153, 159, 189, 191, 200, 201, 202, 203, 212, 255, 258, 274, 282, 288, 319, 321, 327, 328, 332, 339, 340, 341, 342, 345, 347, 350, 358, 360, 371, 372, 373, 375, 401, 405, 436, 466, 478, 479, 489, 521, 522, 523, 524, 525, 526, 528, 529, 531, 532, 533, 534, 558, 566, 611, 615, 617, 619, 622, 625, 627, 629, 630, 632, 637, 639, 640, 655, 656, 663, 762, 765, 766, 768, 776, 784, 785, 786, 787, 788, 789, 790, 791, 792, 825, 865, 866, 942, 943, 950, 953, 956, 960, 963, 967, 969, 972, 974, 976, 977, 986, 987, 993, 996, 997, 1010], "check": [4, 5, 8, 17, 43, 50, 53, 91, 99, 107, 121, 137, 150, 152, 154, 155, 167, 169, 170, 181, 202, 215, 225, 231, 247, 255, 290, 298, 327, 332, 333, 343, 344, 345, 346, 347, 348, 349, 351, 352, 354, 355, 357, 359, 363, 364, 367, 372, 374, 387, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 428, 429, 433, 434, 435, 437, 438, 439, 440, 446, 447, 448, 449, 455, 466, 472, 473, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 512, 513, 514, 515, 516, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 545, 546, 547, 552, 553, 554, 555, 556, 559, 560, 561, 562, 563, 564, 567, 574, 575, 591, 592, 593, 594, 599, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 638, 640, 641, 642, 643, 644, 645, 651, 652, 653, 654, 655, 656, 657, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 775, 776, 777, 778, 779, 780, 781, 782, 783, 789, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 821, 822, 823, 825, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 857, 858, 860, 861, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 885, 886, 887, 896, 897, 908, 909, 910, 914, 915, 937, 938, 939, 941, 948, 949, 950, 953, 968, 969, 973, 974, 977, 989, 993, 994, 996, 1000, 1004, 1005, 1006, 1007, 1008, 1010, 1011], "all_split": [4, 13], "list": [4, 8, 10, 12, 13, 14, 16, 17, 19, 20, 24, 30, 37, 41, 46, 59, 66, 96, 97, 105, 107, 113, 121, 156, 185, 218, 219, 233, 236, 238, 239, 241, 242, 247, 251, 267, 280, 284, 287, 288, 289, 290, 291, 292, 293, 294, 300, 310, 320, 321, 334, 339, 340, 343, 344, 345, 347, 349, 350, 351, 352, 353, 354, 357, 358, 359, 360, 363, 364, 371, 373, 374, 377, 379, 380, 381, 396, 398, 401, 414, 420, 421, 428, 429, 430, 435, 436, 442, 446, 447, 448, 452, 453, 454, 455, 456, 460, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 478, 479, 480, 481, 482, 483, 487, 496, 514, 515, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 545, 546, 552, 553, 555, 574, 575, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 591, 596, 598, 599, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 634, 636, 637, 642, 643, 645, 648, 650, 651, 656, 660, 661, 663, 674, 676, 677, 680, 682, 688, 696, 705, 709, 717, 741, 744, 746, 751, 757, 760, 761, 762, 765, 766, 768, 773, 774, 776, 784, 786, 787, 788, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 822, 823, 824, 825, 826, 827, 829, 833, 836, 838, 839, 844, 846, 862, 866, 868, 871, 873, 874, 875, 876, 879, 881, 885, 886, 887, 891, 893, 894, 895, 897, 905, 906, 908, 919, 924, 927, 937, 942, 943, 949, 953, 955, 956, 957, 960, 961, 964, 969, 972, 973, 977, 978, 982, 984, 987, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "train_0": 4, "test_0": 4, "iloc": [4, 13, 121, 153, 154, 199, 238, 261], "12379": 4, "25": [4, 5, 6, 7, 9, 10, 11, 13, 19, 23, 25, 39, 42, 51, 52, 75, 79, 84, 94, 96, 105, 114, 131, 132, 138, 148, 153, 161, 171, 185, 206, 208, 226, 238, 271, 273, 276, 278, 280, 292, 296, 297, 319, 326, 328, 332, 351, 377, 380, 381, 384, 408, 441, 445, 465, 468, 534, 561, 582, 642, 697, 759, 779, 791, 817, 835, 840, 842, 843, 846, 854, 855, 857, 858, 899, 903, 934, 949, 953, 954, 956, 963, 983, 993, 995, 1001, 1004], "760": 4, "68": [4, 13, 146, 172, 276, 296, 373, 442, 499, 505, 554, 993], "27": [4, 6, 13, 19, 29, 44, 51, 206, 296, 297, 316, 342, 373, 381, 481, 488, 569, 677, 751, 752, 846, 866, 953, 963, 986, 993, 995], "9993": [4, 617, 619, 1001], "12380": 4, "32": [4, 5, 13, 48, 152, 155, 217, 291, 297, 339, 343, 350, 359, 370, 380, 381, 409, 528, 529, 546, 553, 598, 640, 844, 846, 885, 886, 918, 961, 963, 986, 993, 996, 999, 1001, 1002, 1005, 1006, 1007, 1010], "000": [4, 5, 21, 24, 26, 39, 70, 138, 155, 158, 212, 236, 238, 240, 283, 290, 319, 320, 328, 340, 351, 380, 381, 454, 525, 526, 608, 641, 967, 974, 987, 1004], "77": [4, 6, 41, 135, 158, 247, 297, 339, 342, 498, 671, 699, 738], "0028": 4, "12381": 4, "72": [4, 6, 7, 13, 107, 140, 350, 789], "9995": 4, "12382": 4, "240": [4, 41, 961, 993], "82": [4, 28, 50, 55, 110, 132, 184, 218, 269, 296, 751, 762, 776, 901, 953, 956, 983, 993], "9980": [4, 1001], "12383": 4, "13374": 4, "34": [4, 114, 135, 137, 263, 276, 296, 297, 327, 342, 377, 484, 493, 534, 561, 613, 631, 680, 727, 983, 993], "44": [4, 142, 153, 154, 165, 255, 262, 443, 744, 846, 866, 869, 953, 960, 993], "40": [4, 13, 15, 51, 63, 73, 83, 85, 87, 117, 123, 137, 165, 172, 173, 175, 198, 203, 205, 216, 218, 228, 239, 264, 270, 275, 280, 296, 297, 305, 306, 308, 310, 312, 314, 327, 333, 340, 377, 410, 459, 481, 482, 805, 806, 810, 822, 823, 942, 954, 963, 993, 994], "150": [4, 6, 83, 85, 105, 114, 126, 202, 206, 208, 251, 294, 311, 315, 342, 377, 382, 468, 565, 566, 786, 787, 788, 953, 982, 983, 984], "53": [4, 19, 43, 50, 218, 300, 373, 380, 499, 505, 510, 755, 756], "15": [4, 6, 7, 8, 12, 13, 14, 15, 28, 29, 32, 37, 41, 50, 51, 52, 58, 59, 63, 69, 70, 75, 77, 85, 96, 105, 107, 110, 111, 114, 130, 132, 134, 137, 141, 148, 152, 153, 154, 170, 178, 183, 195, 199, 202, 203, 206, 208, 226, 227, 233, 241, 243, 246, 249, 250, 252, 262, 266, 273, 274, 278, 280, 282, 293, 297, 305, 307, 310, 314, 317, 324, 339, 340, 343, 345, 358, 363, 365, 366, 377, 380, 381, 404, 418, 454, 460, 461, 462, 495, 501, 509, 510, 519, 520, 562, 568, 573, 608, 616, 625, 627, 632, 640, 642, 656, 704, 780, 794, 817, 846, 942, 948, 949, 950, 953, 956, 957, 963, 968, 974, 978, 983, 991, 995, 1005, 1007, 1008], "0013": 4, "13375": 4, "39": [4, 13, 43, 135, 222, 340, 342, 343, 349, 373, 381, 459, 856, 874, 903, 974], "49": [4, 13, 135, 185, 218, 339, 340, 342, 350, 373, 414, 421, 677, 689, 719, 727, 756, 760, 762, 846, 953, 963, 996], "13376": 4, "0012": [4, 658], "13377": 4, "36": [4, 6, 7, 13, 14, 43, 89, 135, 143, 153, 199, 218, 310, 342, 351, 380, 381, 519, 520, 534, 698, 722, 953, 987, 993], "08": [4, 41, 47, 90, 153, 154, 165, 276, 342, 442, 495, 507, 509, 527, 605, 622, 762, 822, 823, 844, 959, 974], "910": 4, "42": [4, 5, 6, 13, 20, 23, 24, 25, 26, 29, 41, 43, 53, 68, 73, 89, 94, 101, 108, 109, 111, 112, 114, 115, 117, 121, 131, 132, 149, 153, 155, 156, 158, 160, 170, 173, 175, 176, 183, 187, 188, 189, 195, 196, 198, 201, 202, 203, 208, 213, 214, 215, 218, 221, 237, 239, 242, 258, 264, 265, 266, 273, 278, 279, 280, 281, 283, 285, 287, 289, 291, 299, 305, 307, 319, 320, 328, 333, 347, 350, 351, 359, 364, 373, 377, 380, 381, 384, 401, 408, 442, 452, 456, 478, 479, 480, 481, 482, 483, 487, 488, 491, 493, 495, 501, 508, 509, 510, 521, 522, 529, 530, 531, 532, 534, 569, 570, 571, 572, 573, 641, 658, 659, 660, 723, 755, 756, 760, 764, 789, 791, 805, 806, 810, 814, 817, 857, 858, 860, 861, 862, 872, 875, 876, 888, 901, 918, 922, 956, 963, 974, 983, 987, 990, 993], "0015": 4, "13378": 4, "35": [4, 6, 7, 9, 11, 52, 67, 103, 123, 153, 154, 160, 169, 208, 255, 283, 296, 297, 508, 612, 613, 620, 666, 670, 671, 690, 704, 719, 745, 752, 798, 942, 949, 953, 959, 960, 963, 983, 987, 993, 995], "26": [4, 13, 43, 51, 75, 89, 142, 153, 206, 217, 218, 251, 297, 351, 534, 612, 692, 746, 841, 853, 902, 953, 963, 993, 996, 997, 1005], "47": [4, 13, 79, 146, 173, 177, 340, 457, 458, 499, 505], "16": [4, 5, 10, 13, 19, 26, 40, 47, 48, 51, 63, 70, 75, 87, 90, 130, 154, 174, 180, 181, 182, 199, 201, 202, 205, 206, 213, 217, 240, 241, 242, 262, 276, 278, 282, 287, 311, 320, 325, 340, 342, 351, 358, 377, 378, 381, 406, 421, 423, 435, 436, 442, 443, 461, 462, 466, 480, 498, 499, 534, 553, 559, 560, 571, 572, 603, 614, 615, 618, 619, 620, 621, 646, 647, 775, 780, 791, 840, 866, 874, 929, 930, 931, 942, 949, 953, 963, 968, 974, 978, 987, 991, 993, 994, 998, 999, 1001, 1002], "9979": 4, "2331": 4, "31": [4, 13, 47, 66, 74, 199, 206, 239, 263, 290, 296, 297, 370, 381, 464, 525, 526, 561, 613, 635, 643, 918, 954, 974, 993], "060": [4, 714], "0032": 4, "2332": 4, "2333": 4, "78": [4, 50, 158, 199, 247, 280, 297, 457, 458, 617, 619, 628, 629, 762, 768, 789, 953, 973, 983], "275": [4, 75, 121, 297, 974, 996], "2334": 4, "96": [4, 8, 13, 30, 45, 59, 144, 208, 218, 236, 246, 276, 280, 283, 284, 296, 297, 342, 377, 517, 675, 942, 948, 953, 963, 993], "515": [4, 238, 974], "64": [4, 13, 30, 45, 50, 55, 82, 87, 142, 153, 202, 212, 213, 217, 236, 247, 262, 267, 332, 333, 342, 343, 351, 363, 378, 385, 459, 462, 466, 563, 564, 610, 622, 652, 653, 654, 655, 657, 866, 956, 984, 993, 995, 1001, 1002, 1005, 1006, 1007, 1010], "2335": 4, "12326": 4, "12327": 4, "12328": [4, 1002], "12329": 4, "46": [4, 13, 50, 181, 218, 328, 351, 557, 558, 680, 869, 874, 963, 974], "12330": [4, 1001], "52": [4, 90, 142, 181, 495, 597, 760, 901, 993], "last": [4, 20, 41, 55, 82, 114, 153, 160, 181, 182, 189, 194, 208, 230, 241, 249, 250, 283, 289, 291, 299, 323, 332, 340, 343, 347, 349, 350, 353, 359, 363, 373, 374, 381, 385, 402, 406, 411, 423, 428, 432, 479, 497, 523, 524, 525, 526, 547, 548, 551, 557, 558, 561, 574, 646, 647, 649, 650, 661, 662, 664, 665, 666, 671, 745, 760, 761, 765, 766, 781, 805, 806, 810, 825, 826, 830, 838, 844, 880, 905, 928, 942, 948, 949, 950, 952, 954, 957, 967, 973, 978, 985, 993, 999, 1000, 1001, 1002, 1007, 1009, 1010], "train_4": 4, "test_4": 4, "16379": 4, "94": [4, 30, 32, 51, 89, 110, 180, 216, 251, 280, 296, 297, 380, 627, 751, 948, 953, 954, 963, 987, 993], "665": 4, "16380": 4, "71": [4, 13, 135, 185, 199, 342, 474, 693, 699, 729, 739, 953, 985, 995], "16381": 4, "76": [4, 158, 181, 297, 319, 328, 342, 351, 740, 744, 825, 985], "16382": 4, "16383": 4, "18": [4, 7, 8, 13, 19, 37, 41, 46, 50, 57, 59, 70, 94, 114, 146, 153, 192, 208, 213, 238, 255, 276, 282, 284, 297, 319, 320, 321, 345, 351, 374, 377, 378, 381, 411, 423, 456, 464, 465, 466, 468, 469, 474, 499, 500, 502, 504, 505, 521, 522, 523, 524, 527, 528, 529, 530, 533, 535, 536, 537, 538, 539, 541, 542, 553, 558, 563, 564, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 610, 613, 622, 623, 635, 678, 682, 694, 697, 698, 704, 706, 723, 733, 760, 761, 783, 798, 821, 822, 823, 829, 835, 843, 844, 855, 865, 866, 873, 874, 875, 876, 877, 901, 902, 942, 951, 953, 963, 974, 991, 993, 994, 997, 998, 1000, 1001, 1003, 1004], "940": 4, "6331": 4, "28": [4, 63, 114, 121, 135, 153, 197, 206, 247, 275, 296, 297, 342, 351, 373, 377, 414, 421, 963, 974, 983, 993, 996, 999], "790": [4, 66], "89": [4, 13, 30, 142, 172, 296, 297, 948, 953, 963, 987, 993, 996, 1004], "6332": 4, "6333": 4, "88": [4, 6, 30, 85, 172, 185, 237, 276, 296, 297, 323, 340, 342, 345, 375, 437, 825, 901, 983, 993], "820": [4, 805, 806], "79": [4, 6, 28, 30, 75, 76, 90, 135, 158, 276, 297, 342, 350, 375, 438, 488, 561, 658, 803, 993, 995], "6334": 4, "6335": 4, "70": [4, 6, 11, 13, 63, 67, 69, 101, 154, 218, 224, 238, 297, 340, 342, 377, 457, 458, 677, 689, 719, 762, 776, 852, 942, 963, 983], "33": [4, 13, 75, 181, 292, 297, 340, 342, 349, 350, 351, 373, 381, 425, 496, 601, 612, 676, 677, 692, 693, 701, 706, 746, 747, 750, 768, 789, 791, 793, 852, 876, 949, 953, 963, 983, 993, 1001], "335": 4, "74": [4, 8, 13, 197, 296, 297, 342, 554, 658, 762, 776, 844], "16326": [4, 1005], "16327": 4, "16328": 4, "16329": 4, "16330": 4, "readi": [4, 7, 142, 182, 340, 349, 353], "tree": [4, 7, 13, 25, 26, 29, 38, 41, 52, 59, 91, 100, 103, 104, 105, 107, 111, 112, 113, 114, 115, 117, 120, 121, 122, 124, 135, 145, 148, 154, 156, 164, 190, 202, 215, 217, 218, 219, 235, 242, 244, 255, 257, 258, 261, 263, 271, 278, 279, 283, 289, 304, 328, 332, 340, 342, 351, 358, 359, 362, 371, 373, 379, 384, 401, 405, 406, 407, 408, 409, 410, 412, 414, 421, 427, 459, 464, 468, 478, 479, 483, 508, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 595, 596, 597, 598, 622, 652, 656, 666, 667, 675, 751, 768, 789, 791, 800, 805, 806, 807, 808, 809, 810, 811, 813, 815, 816, 817, 826, 829, 838, 897, 943, 950, 953, 954, 959, 960, 972, 973, 974, 975, 989, 993, 994, 995, 996, 997, 998, 999, 1000], "often": [4, 19, 23, 24, 31, 66, 70, 107, 119, 141, 148, 153, 154, 182, 199, 202, 218, 226, 240, 243, 278, 283, 307, 317, 319, 320, 321, 332, 333, 339, 340, 342, 345, 347, 350, 353, 357, 358, 359, 362, 367, 371, 373, 374, 375, 377, 378, 380, 381, 383, 385, 432, 485, 488, 497, 500, 596, 610, 611, 616, 617, 624, 625, 626, 627, 636, 638, 651, 691, 835, 843, 851, 863, 942, 943, 945, 948, 949, 950, 951, 952, 953, 955, 956, 958, 959, 960, 963, 966, 967, 969, 978, 980, 985, 986, 987, 994, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "flexibl": [4, 24, 111, 148, 181, 279, 304, 321, 347, 352, 357, 377, 383, 638, 865, 866, 942, 947, 949, 953, 957, 963, 972, 973, 977, 1002, 1006], "effici": [4, 5, 12, 14, 39, 43, 50, 52, 87, 107, 112, 119, 158, 170, 174, 183, 189, 263, 319, 332, 337, 339, 345, 347, 348, 350, 351, 357, 359, 367, 370, 372, 373, 378, 379, 380, 383, 385, 406, 407, 410, 411, 413, 414, 416, 418, 421, 423, 425, 426, 460, 497, 498, 499, 502, 504, 505, 508, 527, 530, 538, 545, 546, 552, 553, 555, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 596, 597, 598, 602, 604, 619, 622, 623, 628, 630, 631, 632, 637, 639, 640, 641, 642, 643, 649, 650, 652, 689, 719, 726, 742, 743, 760, 761, 762, 776, 794, 805, 806, 807, 808, 809, 811, 813, 815, 816, 817, 830, 842, 854, 858, 865, 874, 876, 902, 921, 942, 945, 947, 949, 950, 952, 953, 954, 956, 957, 958, 959, 961, 963, 964, 965, 966, 967, 968, 972, 977, 978, 982, 985, 986, 987, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "heterogen": [4, 8, 9, 23, 52, 65, 67, 150, 154, 181, 222, 283, 287, 337, 339, 357, 428, 452, 505, 545, 555, 677, 825, 829, 865, 950, 960, 963, 972, 974, 989, 997, 1001, 1003, 1004], "tabular": [4, 13, 154, 347, 380, 961], "mix": [4, 59, 65, 66, 88, 89, 111, 150, 181, 210, 220, 222, 239, 278, 284, 339, 347, 357, 359, 374, 378, 385, 428, 430, 431, 460, 497, 502, 504, 511, 564, 568, 594, 610, 611, 616, 622, 623, 624, 625, 626, 627, 632, 640, 642, 645, 762, 776, 791, 825, 838, 839, 845, 846, 917, 924, 927, 949, 958, 974, 986, 1005, 1007, 1008], "long": [4, 11, 12, 41, 59, 114, 142, 149, 153, 155, 181, 215, 216, 218, 241, 271, 278, 288, 319, 320, 328, 333, 343, 345, 353, 357, 359, 360, 367, 372, 373, 417, 462, 502, 640, 641, 642, 765, 766, 800, 801, 802, 803, 804, 822, 823, 833, 953, 959, 963, 964, 966, 967, 971, 995, 999, 1005, 1007], "sampl": [4, 5, 8, 11, 14, 23, 24, 25, 26, 30, 31, 32, 34, 36, 38, 39, 40, 43, 45, 46, 50, 53, 54, 55, 56, 57, 62, 75, 76, 77, 80, 83, 85, 87, 91, 92, 95, 96, 101, 102, 103, 104, 105, 106, 107, 110, 111, 113, 114, 115, 117, 122, 123, 124, 132, 134, 135, 137, 141, 142, 143, 144, 146, 148, 150, 153, 154, 158, 159, 165, 167, 169, 170, 181, 183, 185, 188, 189, 191, 192, 193, 195, 197, 198, 199, 201, 208, 212, 213, 215, 216, 218, 224, 225, 227, 228, 229, 230, 231, 233, 237, 238, 240, 241, 242, 244, 246, 250, 252, 257, 258, 262, 263, 264, 265, 267, 268, 269, 276, 278, 280, 281, 282, 283, 285, 287, 289, 290, 292, 294, 296, 298, 299, 300, 301, 302, 303, 305, 307, 309, 311, 312, 313, 315, 316, 319, 320, 324, 327, 332, 338, 340, 341, 344, 345, 347, 348, 357, 358, 364, 370, 371, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 390, 391, 392, 395, 396, 397, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 418, 420, 421, 422, 425, 426, 427, 429, 433, 434, 435, 436, 437, 438, 439, 440, 446, 447, 448, 449, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 492, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 545, 546, 547, 548, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 572, 574, 575, 591, 592, 593, 594, 596, 597, 598, 599, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 651, 652, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 671, 672, 673, 674, 676, 677, 678, 679, 680, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 697, 698, 699, 700, 701, 702, 703, 704, 706, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 723, 724, 726, 727, 731, 732, 733, 734, 736, 737, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 840, 842, 843, 844, 845, 846, 850, 851, 852, 854, 855, 856, 857, 858, 859, 860, 861, 862, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 881, 885, 886, 890, 891, 902, 906, 922, 924, 927, 928, 931, 934, 942, 943, 945, 946, 947, 948, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 963, 964, 965, 966, 967, 968, 969, 972, 973, 974, 976, 978, 984, 985, 986, 987, 989, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "larg": [4, 12, 13, 14, 21, 25, 34, 36, 40, 44, 46, 47, 49, 50, 52, 69, 71, 87, 91, 104, 106, 107, 114, 117, 119, 131, 142, 143, 155, 156, 160, 161, 170, 172, 181, 183, 185, 186, 187, 199, 213, 218, 235, 241, 244, 247, 260, 267, 275, 278, 280, 290, 291, 294, 307, 312, 315, 320, 321, 332, 340, 345, 351, 354, 357, 358, 359, 363, 367, 372, 375, 377, 378, 379, 380, 382, 384, 386, 406, 408, 410, 411, 414, 415, 416, 417, 422, 426, 437, 439, 463, 478, 498, 500, 502, 504, 508, 511, 513, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 531, 532, 546, 552, 553, 555, 598, 605, 607, 614, 618, 621, 622, 623, 628, 635, 636, 638, 641, 643, 649, 651, 653, 655, 656, 657, 659, 709, 742, 743, 762, 770, 772, 776, 780, 790, 800, 801, 802, 803, 804, 805, 806, 811, 822, 823, 830, 834, 835, 843, 845, 857, 858, 865, 866, 870, 871, 873, 874, 875, 876, 901, 902, 942, 945, 947, 949, 950, 952, 955, 956, 957, 961, 963, 966, 967, 968, 969, 972, 973, 977, 983, 985, 986, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "here": [4, 8, 9, 12, 13, 14, 17, 23, 54, 55, 63, 73, 77, 82, 83, 85, 89, 90, 92, 93, 94, 95, 97, 101, 104, 107, 111, 115, 121, 132, 135, 137, 145, 146, 153, 154, 155, 158, 160, 165, 170, 174, 181, 185, 187, 196, 197, 199, 201, 203, 208, 213, 215, 218, 219, 225, 226, 227, 232, 235, 236, 238, 240, 241, 243, 247, 248, 250, 255, 258, 260, 267, 274, 275, 276, 280, 283, 289, 291, 294, 296, 298, 307, 311, 315, 317, 321, 323, 328, 332, 333, 334, 339, 340, 343, 344, 345, 346, 347, 349, 350, 351, 353, 357, 358, 364, 367, 369, 370, 373, 374, 376, 377, 378, 379, 380, 381, 384, 386, 401, 404, 405, 406, 407, 408, 409, 411, 413, 416, 428, 436, 439, 500, 502, 503, 507, 508, 531, 532, 533, 534, 545, 546, 548, 552, 555, 558, 566, 592, 594, 611, 615, 617, 619, 625, 627, 629, 637, 639, 653, 655, 659, 663, 676, 689, 709, 719, 757, 762, 765, 766, 768, 776, 784, 785, 786, 787, 788, 789, 790, 792, 801, 805, 806, 829, 837, 840, 843, 846, 857, 858, 868, 919, 942, 945, 949, 950, 951, 952, 953, 956, 959, 963, 965, 966, 967, 968, 972, 973, 976, 977, 978, 979, 985, 993, 1001, 1006], "modern": [4, 381, 432, 467, 554, 654, 658, 693, 863, 950, 972, 973, 1009], "histgradientboostingregressor": [4, 7, 13, 107, 111, 114, 115, 118, 121, 148, 154, 181, 284, 287, 288, 289, 290, 292, 293, 294, 349, 380, 524, 529, 596, 597, 599, 943, 960, 972, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "nativ": [4, 120, 148, 333, 340, 359, 380, 460, 525, 526, 797, 798, 921, 949, 953, 972, 1003, 1005], "support": [4, 6, 7, 8, 9, 10, 16, 23, 26, 28, 30, 43, 66, 67, 68, 100, 105, 120, 121, 131, 132, 154, 182, 191, 192, 193, 199, 213, 214, 215, 221, 232, 236, 243, 245, 255, 258, 276, 278, 282, 291, 296, 297, 300, 301, 303, 304, 307, 308, 309, 310, 311, 312, 315, 332, 333, 334, 339, 343, 345, 347, 349, 350, 351, 352, 354, 355, 358, 359, 360, 373, 377, 378, 381, 382, 383, 401, 404, 414, 416, 417, 428, 429, 430, 431, 433, 436, 438, 451, 460, 476, 502, 504, 505, 508, 511, 513, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 545, 546, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 574, 575, 577, 578, 579, 581, 583, 584, 586, 587, 589, 591, 595, 596, 597, 607, 609, 621, 622, 623, 634, 635, 636, 637, 638, 639, 640, 641, 642, 651, 654, 658, 663, 671, 677, 692, 693, 701, 706, 741, 742, 743, 746, 747, 750, 751, 762, 765, 766, 768, 776, 788, 789, 797, 798, 803, 805, 806, 809, 811, 812, 817, 824, 825, 826, 830, 836, 838, 839, 841, 845, 853, 862, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 878, 879, 881, 891, 896, 897, 941, 942, 943, 945, 946, 947, 949, 952, 953, 954, 955, 956, 957, 959, 960, 963, 964, 967, 972, 973, 974, 975, 977, 978, 981, 983, 987, 989, 990, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "therefor": [4, 9, 14, 20, 23, 32, 34, 49, 50, 67, 68, 71, 75, 80, 92, 96, 101, 104, 106, 114, 119, 121, 134, 152, 155, 181, 185, 197, 198, 224, 229, 230, 239, 241, 255, 257, 261, 275, 278, 283, 296, 307, 315, 316, 319, 320, 327, 332, 339, 343, 350, 357, 364, 369, 373, 374, 375, 377, 378, 380, 381, 401, 499, 513, 515, 517, 518, 523, 524, 528, 529, 568, 570, 622, 623, 629, 632, 635, 640, 642, 643, 665, 676, 698, 720, 760, 825, 826, 838, 842, 846, 854, 943, 947, 949, 950, 953, 955, 956, 957, 958, 961, 963, 968, 969, 973, 978, 985, 986, 987, 1002, 1003, 1006, 1007, 1008, 1009, 1010], "categorical_featur": [4, 67, 111, 154, 284, 289, 290, 291, 292, 294, 350, 380, 525, 526, 596, 597, 960, 1001, 1005, 1008, 1010], "from_dtyp": [4, 111, 294, 380, 525, 526, 1010], "For": [4, 8, 9, 12, 13, 14, 19, 26, 30, 34, 37, 41, 43, 45, 46, 50, 52, 54, 55, 57, 64, 69, 75, 80, 84, 88, 104, 106, 107, 109, 114, 115, 117, 119, 131, 132, 135, 137, 139, 144, 148, 149, 153, 154, 165, 169, 170, 181, 182, 185, 186, 189, 198, 199, 201, 203, 206, 208, 209, 211, 212, 213, 215, 222, 229, 235, 238, 239, 245, 253, 257, 258, 268, 273, 275, 276, 280, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 299, 301, 307, 309, 311, 315, 319, 320, 321, 323, 324, 327, 328, 332, 334, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 357, 358, 359, 360, 364, 367, 369, 370, 371, 372, 373, 374, 377, 378, 380, 381, 382, 383, 384, 389, 396, 401, 404, 406, 407, 408, 409, 410, 411, 413, 414, 415, 418, 420, 421, 422, 424, 425, 426, 428, 429, 430, 432, 436, 438, 446, 447, 448, 449, 453, 460, 462, 467, 476, 478, 479, 483, 487, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 511, 513, 514, 515, 517, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 534, 536, 537, 545, 546, 547, 548, 549, 550, 552, 553, 555, 556, 557, 558, 561, 566, 571, 572, 573, 574, 575, 578, 583, 586, 587, 591, 592, 593, 594, 595, 596, 597, 599, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 648, 651, 652, 653, 654, 656, 657, 659, 665, 668, 670, 671, 692, 693, 701, 704, 705, 726, 732, 741, 746, 747, 750, 751, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 776, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 794, 796, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 830, 831, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 850, 851, 852, 853, 854, 855, 856, 857, 858, 863, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 885, 891, 916, 937, 942, 943, 945, 946, 947, 948, 949, 950, 953, 954, 955, 956, 957, 958, 959, 960, 961, 963, 964, 967, 968, 969, 971, 976, 977, 978, 985, 986, 987, 993, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "refer": [4, 34, 35, 57, 60, 67, 83, 115, 121, 135, 146, 199, 215, 218, 245, 261, 268, 278, 287, 288, 289, 290, 291, 292, 293, 294, 320, 333, 342, 343, 345, 346, 347, 349, 350, 351, 352, 353, 357, 358, 359, 360, 363, 364, 367, 374, 376, 384, 385, 386, 401, 402, 403, 404, 406, 408, 410, 411, 412, 414, 415, 416, 417, 418, 421, 426, 427, 428, 429, 430, 431, 432, 433, 436, 437, 438, 439, 462, 467, 475, 477, 479, 480, 481, 482, 483, 484, 492, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 505, 508, 511, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 554, 557, 558, 559, 566, 571, 572, 574, 575, 578, 583, 586, 587, 591, 592, 595, 596, 598, 599, 600, 601, 602, 603, 606, 607, 608, 609, 611, 613, 615, 617, 619, 620, 622, 625, 627, 629, 630, 631, 632, 635, 637, 639, 640, 642, 643, 646, 647, 652, 653, 654, 655, 656, 657, 658, 659, 660, 665, 668, 669, 671, 672, 673, 674, 676, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 693, 694, 697, 698, 699, 700, 701, 703, 704, 706, 719, 721, 722, 732, 746, 748, 749, 751, 752, 755, 756, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 776, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 795, 796, 800, 801, 802, 804, 807, 810, 811, 812, 814, 821, 822, 823, 825, 830, 831, 832, 834, 835, 837, 838, 839, 841, 842, 843, 845, 846, 853, 858, 859, 860, 861, 862, 863, 865, 867, 868, 870, 871, 873, 874, 875, 876, 890, 902, 919, 955, 964, 969, 973, 976, 978, 982, 986, 987, 993, 997, 998, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "datafram": [4, 13, 24, 66, 67, 68, 69, 101, 107, 111, 114, 118, 142, 148, 152, 153, 154, 155, 160, 165, 170, 185, 189, 199, 219, 222, 229, 236, 238, 239, 241, 249, 250, 255, 283, 284, 285, 290, 291, 292, 315, 319, 320, 339, 340, 345, 347, 350, 359, 374, 380, 397, 406, 407, 409, 411, 413, 428, 430, 431, 432, 446, 447, 448, 449, 453, 454, 455, 456, 460, 464, 465, 466, 468, 469, 474, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 513, 525, 526, 530, 531, 532, 533, 534, 545, 546, 547, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 591, 592, 593, 594, 595, 596, 597, 598, 599, 602, 603, 604, 605, 606, 652, 653, 656, 762, 765, 766, 776, 791, 809, 814, 817, 821, 824, 825, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 857, 858, 863, 881, 908, 924, 927, 942, 943, 973, 987, 996, 997, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "dedic": [4, 236, 317, 343, 349, 351, 357, 360, 369, 373, 548, 636, 638, 651, 942, 949, 972, 978, 1001, 1010], "rule": [4, 107, 158, 324, 327, 328, 332, 342, 345, 346, 347, 357, 359, 360, 368, 371, 372, 373, 377, 378, 380, 382, 500, 513, 514, 515, 516, 517, 525, 526, 533, 534, 566, 598, 609, 622, 623, 630, 631, 632, 640, 641, 642, 670, 671, 762, 765, 766, 768, 776, 784, 788, 790, 814, 865, 878, 942, 947, 955, 956, 967, 969, 973, 978, 985, 989, 995, 998, 1005, 1010], "sake": [4, 114, 149, 153, 181, 283, 311, 319, 321, 353, 357, 634], "simplic": [4, 14, 29, 165, 311, 319, 321, 359, 379, 956, 957, 958, 968], "try": [4, 6, 11, 12, 13, 15, 16, 24, 25, 36, 50, 67, 68, 90, 101, 106, 107, 108, 109, 110, 117, 118, 121, 124, 132, 137, 142, 149, 152, 153, 154, 155, 158, 160, 162, 170, 209, 210, 211, 215, 219, 220, 221, 222, 225, 226, 229, 236, 238, 239, 245, 250, 255, 258, 271, 276, 284, 288, 289, 291, 292, 294, 298, 309, 315, 319, 320, 327, 340, 343, 344, 345, 347, 350, 351, 353, 357, 359, 363, 364, 367, 373, 376, 377, 380, 381, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 467, 531, 541, 553, 622, 637, 639, 653, 657, 762, 765, 766, 774, 776, 786, 787, 788, 790, 843, 845, 848, 850, 851, 852, 853, 854, 855, 856, 865, 884, 937, 942, 949, 950, 959, 968, 969, 973, 976, 977, 978, 980, 983, 985, 986, 987, 995, 996, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1011], "default": [4, 13, 15, 24, 26, 28, 39, 42, 43, 45, 52, 56, 87, 107, 131, 137, 148, 154, 160, 161, 170, 181, 182, 199, 210, 212, 218, 220, 222, 227, 233, 241, 247, 257, 258, 278, 282, 285, 287, 288, 292, 294, 311, 315, 316, 319, 320, 321, 323, 328, 332, 333, 339, 340, 343, 347, 348, 349, 350, 351, 352, 354, 357, 358, 359, 363, 364, 367, 371, 373, 374, 377, 378, 380, 381, 382, 384, 385, 386, 387, 389, 390, 391, 392, 394, 395, 396, 397, 398, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 671, 672, 673, 675, 676, 677, 678, 680, 682, 683, 684, 685, 686, 687, 689, 690, 691, 692, 693, 694, 697, 698, 699, 701, 702, 703, 704, 705, 706, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 726, 727, 729, 730, 731, 732, 734, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 773, 774, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 889, 891, 892, 894, 896, 901, 902, 903, 904, 905, 906, 907, 916, 918, 919, 921, 922, 923, 924, 926, 927, 928, 934, 937, 939, 940, 942, 943, 945, 947, 949, 952, 953, 954, 956, 957, 959, 960, 963, 965, 967, 968, 969, 978, 982, 985, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "hyper": [4, 67, 107, 232, 238, 243, 276, 307, 328, 347, 357, 358, 359, 368, 377, 380, 382, 432, 608, 609, 766, 774, 776, 821, 863, 948, 949, 953, 956, 967, 968, 978, 989, 993, 1007], "paramet": [4, 5, 9, 10, 11, 14, 15, 16, 32, 41, 51, 52, 55, 57, 58, 59, 67, 68, 69, 74, 76, 77, 85, 87, 99, 101, 103, 105, 107, 110, 111, 112, 115, 116, 126, 132, 135, 137, 138, 141, 142, 143, 144, 145, 146, 148, 149, 150, 153, 154, 160, 161, 162, 163, 165, 166, 168, 169, 170, 172, 173, 181, 183, 185, 186, 189, 190, 198, 199, 205, 206, 208, 210, 213, 214, 215, 224, 225, 226, 227, 229, 230, 232, 233, 237, 238, 239, 240, 242, 243, 246, 249, 250, 251, 253, 255, 258, 260, 261, 264, 265, 271, 273, 274, 276, 278, 279, 280, 283, 287, 288, 290, 291, 292, 293, 300, 302, 304, 309, 311, 312, 314, 316, 317, 319, 320, 321, 323, 324, 325, 326, 328, 332, 333, 334, 337, 338, 340, 348, 350, 351, 352, 353, 354, 357, 364, 368, 371, 373, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 540, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 726, 727, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 894, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 937, 938, 939, 940, 941, 943, 944, 945, 946, 947, 948, 950, 952, 955, 956, 957, 958, 959, 960, 961, 963, 965, 966, 967, 969, 972, 973, 974, 979, 981, 983, 984, 985, 989, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "compos": [4, 5, 24, 65, 66, 67, 71, 80, 103, 111, 121, 150, 153, 154, 155, 181, 183, 199, 210, 218, 220, 222, 255, 284, 288, 290, 291, 292, 294, 358, 364, 373, 374, 377, 479, 576, 952, 974, 993], "columntransform": [4, 66, 67, 121, 153, 154, 155, 181, 199, 210, 218, 220, 222, 284, 288, 290, 291, 292, 294, 337, 339, 357, 358, 364, 430, 431, 593, 830, 942, 943, 973, 989, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "ensembl": [4, 7, 10, 13, 25, 26, 29, 53, 101, 102, 103, 104, 105, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 145, 148, 149, 154, 155, 156, 181, 202, 208, 217, 218, 220, 221, 235, 250, 255, 257, 280, 284, 287, 288, 289, 290, 292, 293, 294, 319, 324, 325, 328, 332, 349, 350, 358, 359, 364, 371, 373, 377, 382, 401, 468, 479, 596, 597, 599, 622, 666, 765, 766, 791, 795, 796, 826, 829, 838, 869, 873, 875, 876, 894, 942, 953, 954, 959, 960, 969, 972, 973, 974, 975, 989, 990, 993, 994, 995, 996, 997, 998, 999, 1000], "cross_valid": [4, 13, 111, 121, 153, 183, 234, 241, 255, 284, 294, 345, 358, 364, 539, 786, 787, 953, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1008, 1009, 1010], "pipelin": [4, 29, 51, 55, 67, 70, 71, 80, 106, 107, 111, 127, 129, 131, 134, 135, 148, 149, 154, 155, 158, 160, 169, 170, 181, 182, 187, 195, 199, 202, 207, 208, 209, 211, 213, 218, 219, 222, 231, 235, 236, 237, 242, 245, 246, 249, 252, 258, 260, 261, 266, 267, 273, 276, 280, 283, 285, 287, 288, 289, 290, 291, 292, 293, 300, 319, 320, 328, 332, 337, 339, 340, 345, 348, 359, 364, 377, 381, 383, 387, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 428, 429, 431, 433, 434, 435, 436, 437, 438, 439, 440, 446, 447, 448, 449, 452, 466, 479, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 545, 546, 547, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 569, 571, 574, 575, 591, 592, 593, 594, 599, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 652, 653, 654, 655, 656, 661, 662, 664, 665, 666, 677, 760, 761, 762, 763, 764, 765, 766, 769, 771, 776, 780, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 821, 822, 823, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 942, 943, 945, 949, 956, 957, 962, 963, 967, 968, 972, 973, 974, 975, 977, 979, 981, 989, 993, 994, 996, 997, 998, 999, 1000, 1010], "make_pipelin": [4, 29, 55, 80, 106, 111, 121, 131, 132, 135, 148, 149, 153, 154, 158, 160, 169, 170, 181, 182, 187, 195, 199, 202, 208, 209, 210, 218, 219, 220, 222, 235, 245, 258, 267, 273, 280, 283, 284, 285, 287, 288, 289, 290, 291, 292, 320, 328, 358, 364, 374, 377, 531, 640, 642, 817, 825, 850, 851, 853, 854, 855, 856, 865, 866, 867, 868, 870, 871, 943, 956, 963, 967, 968, 996, 1003, 1006], "gbrt": [4, 13, 181, 380], "random_st": [4, 5, 6, 7, 10, 12, 13, 15, 19, 20, 21, 23, 24, 25, 26, 28, 29, 35, 39, 40, 41, 43, 45, 46, 47, 50, 52, 53, 54, 55, 56, 57, 58, 59, 66, 67, 71, 77, 80, 85, 87, 89, 92, 101, 102, 103, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 123, 124, 126, 131, 132, 134, 137, 146, 148, 149, 152, 153, 154, 155, 156, 158, 160, 162, 163, 167, 173, 180, 181, 184, 185, 187, 188, 189, 193, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 208, 209, 213, 216, 217, 218, 219, 221, 222, 224, 226, 227, 230, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 255, 257, 258, 261, 262, 266, 267, 268, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 299, 305, 307, 308, 309, 315, 316, 319, 320, 323, 327, 328, 347, 350, 354, 358, 359, 369, 373, 374, 377, 378, 380, 381, 385, 398, 401, 402, 404, 407, 411, 413, 415, 416, 417, 418, 422, 423, 424, 426, 433, 438, 442, 451, 452, 455, 456, 459, 461, 467, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 507, 508, 509, 510, 511, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 547, 548, 557, 558, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 591, 596, 597, 598, 599, 602, 603, 604, 605, 606, 610, 611, 613, 614, 615, 616, 617, 618, 619, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 635, 636, 638, 640, 641, 642, 643, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 674, 698, 751, 755, 756, 760, 761, 764, 765, 766, 767, 768, 774, 776, 777, 778, 779, 780, 781, 782, 784, 789, 790, 791, 792, 793, 795, 796, 797, 798, 799, 810, 814, 821, 822, 823, 825, 830, 842, 846, 854, 857, 858, 865, 866, 867, 870, 872, 873, 874, 875, 876, 878, 879, 899, 901, 902, 922, 924, 927, 942, 943, 945, 948, 953, 954, 955, 956, 957, 960, 961, 963, 968, 969, 978, 982, 983, 987, 990, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006], "categorical_column": [4, 111, 153, 155, 218, 431], "print": [4, 6, 7, 8, 10, 11, 12, 13, 15, 16, 17, 19, 20, 21, 23, 25, 28, 30, 35, 39, 40, 43, 44, 45, 46, 47, 49, 50, 55, 57, 58, 60, 64, 66, 67, 69, 70, 71, 75, 79, 80, 85, 87, 90, 94, 95, 97, 101, 104, 107, 108, 109, 110, 111, 113, 115, 126, 127, 131, 132, 134, 135, 137, 138, 140, 142, 146, 152, 154, 155, 156, 158, 165, 166, 167, 168, 172, 173, 176, 177, 181, 183, 184, 185, 188, 189, 196, 197, 199, 202, 203, 206, 210, 212, 214, 215, 218, 222, 227, 232, 236, 237, 238, 239, 241, 243, 246, 247, 251, 258, 262, 269, 271, 274, 275, 276, 280, 283, 285, 287, 288, 289, 291, 293, 294, 296, 297, 300, 307, 319, 320, 321, 323, 327, 328, 332, 339, 340, 343, 346, 347, 353, 359, 364, 367, 374, 377, 380, 381, 383, 428, 431, 432, 436, 442, 454, 466, 476, 505, 508, 513, 514, 523, 524, 525, 526, 528, 529, 533, 534, 541, 547, 548, 549, 552, 553, 555, 576, 581, 582, 594, 610, 611, 613, 614, 616, 617, 618, 620, 624, 625, 626, 627, 630, 631, 640, 641, 648, 660, 677, 681, 700, 758, 760, 761, 763, 764, 767, 769, 770, 771, 772, 775, 777, 778, 779, 780, 781, 782, 783, 787, 788, 789, 790, 792, 794, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 815, 816, 817, 822, 823, 824, 825, 826, 827, 835, 841, 845, 853, 863, 864, 865, 866, 867, 870, 872, 878, 884, 889, 914, 921, 937, 943, 953, 954, 955, 956, 961, 969, 978, 982, 983, 985, 986, 987, 993, 995, 1001, 1002, 1004, 1008], "tolist": [4, 113, 148, 237, 289, 340], "across": [4, 13, 52, 58, 64, 79, 83, 107, 126, 153, 170, 175, 202, 233, 235, 238, 258, 278, 283, 311, 346, 347, 354, 359, 367, 372, 373, 377, 381, 382, 385, 401, 404, 414, 416, 418, 421, 424, 426, 433, 436, 438, 452, 455, 456, 459, 461, 467, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 507, 508, 509, 510, 511, 515, 517, 518, 519, 520, 521, 523, 524, 525, 526, 527, 528, 531, 532, 552, 555, 558, 566, 571, 572, 574, 575, 596, 597, 598, 603, 604, 605, 606, 610, 611, 614, 616, 617, 618, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 635, 640, 642, 643, 649, 650, 653, 654, 655, 656, 657, 658, 659, 668, 669, 681, 694, 720, 751, 756, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 774, 776, 777, 778, 779, 780, 781, 782, 784, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 810, 814, 821, 822, 823, 830, 834, 835, 842, 843, 845, 846, 854, 857, 858, 860, 861, 865, 866, 867, 870, 873, 874, 901, 902, 921, 924, 927, 942, 949, 951, 953, 963, 967, 969, 973, 977, 987, 993, 996, 999, 1000, 1001, 1002, 1003], "numpi": [4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 23, 24, 25, 26, 28, 29, 31, 32, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 71, 73, 74, 75, 76, 77, 79, 80, 83, 85, 87, 88, 89, 90, 91, 93, 94, 96, 97, 102, 103, 104, 108, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 126, 128, 130, 131, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 152, 153, 154, 155, 156, 160, 161, 162, 163, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 202, 203, 204, 206, 208, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 224, 225, 226, 227, 228, 229, 230, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 257, 258, 262, 263, 264, 265, 267, 268, 269, 270, 271, 273, 276, 278, 279, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 303, 305, 306, 307, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 324, 325, 326, 327, 328, 332, 338, 339, 340, 343, 345, 346, 347, 348, 349, 351, 353, 354, 357, 358, 359, 363, 364, 366, 367, 369, 370, 373, 374, 377, 378, 379, 380, 381, 386, 387, 388, 389, 390, 391, 394, 395, 396, 397, 403, 404, 405, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 449, 454, 457, 458, 460, 467, 470, 472, 473, 491, 495, 498, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 533, 534, 545, 546, 549, 552, 553, 555, 565, 568, 582, 591, 592, 593, 594, 595, 596, 597, 607, 610, 611, 613, 616, 617, 621, 622, 623, 624, 625, 626, 627, 630, 631, 632, 634, 636, 640, 641, 642, 648, 651, 652, 655, 656, 657, 658, 659, 663, 666, 667, 670, 671, 673, 676, 678, 689, 690, 692, 693, 695, 697, 698, 701, 702, 717, 719, 736, 742, 744, 745, 746, 747, 750, 751, 752, 757, 759, 760, 761, 762, 763, 764, 765, 766, 767, 769, 770, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 788, 791, 792, 793, 794, 797, 798, 800, 801, 802, 803, 804, 805, 806, 810, 811, 812, 813, 814, 815, 816, 817, 821, 822, 823, 828, 829, 832, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 865, 867, 868, 870, 871, 873, 881, 882, 883, 884, 888, 890, 899, 900, 901, 902, 906, 907, 908, 915, 916, 922, 924, 927, 928, 929, 930, 931, 932, 933, 934, 939, 940, 942, 943, 948, 949, 951, 953, 954, 956, 959, 963, 965, 968, 969, 971, 973, 978, 981, 982, 983, 985, 986, 987, 993, 996, 997, 999, 1000, 1001, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "np": [4, 5, 7, 8, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 23, 24, 25, 26, 28, 29, 31, 32, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 71, 73, 74, 75, 76, 77, 79, 80, 85, 88, 89, 90, 91, 93, 94, 96, 97, 102, 103, 104, 108, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 126, 128, 130, 131, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 152, 153, 154, 155, 156, 160, 161, 162, 163, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 202, 203, 204, 206, 208, 211, 212, 213, 214, 215, 216, 217, 218, 220, 224, 225, 226, 227, 228, 229, 230, 232, 233, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 257, 258, 262, 263, 264, 265, 267, 268, 269, 270, 271, 273, 276, 278, 279, 280, 281, 282, 283, 285, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 303, 305, 306, 307, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 324, 325, 326, 327, 328, 332, 339, 340, 345, 347, 350, 351, 354, 357, 359, 364, 370, 373, 374, 377, 378, 379, 380, 381, 383, 386, 387, 388, 389, 390, 391, 394, 395, 396, 397, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 449, 460, 461, 472, 473, 484, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 521, 522, 523, 524, 525, 527, 528, 529, 530, 533, 534, 545, 546, 549, 550, 552, 553, 557, 558, 561, 565, 568, 570, 573, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 605, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 630, 632, 634, 635, 636, 638, 639, 640, 641, 642, 645, 646, 647, 648, 651, 655, 656, 658, 659, 663, 666, 667, 670, 671, 673, 676, 677, 678, 679, 689, 690, 692, 693, 695, 697, 698, 701, 702, 704, 717, 719, 726, 732, 736, 741, 744, 745, 746, 747, 750, 751, 752, 757, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 787, 788, 789, 791, 792, 793, 794, 797, 798, 800, 801, 802, 803, 804, 805, 806, 810, 811, 812, 813, 815, 816, 817, 821, 822, 829, 830, 832, 838, 839, 840, 841, 842, 844, 845, 846, 853, 854, 857, 858, 860, 861, 862, 865, 867, 868, 870, 871, 873, 874, 875, 876, 881, 882, 883, 884, 885, 886, 888, 890, 891, 900, 901, 902, 907, 908, 915, 916, 918, 922, 924, 927, 928, 929, 930, 931, 932, 933, 934, 939, 942, 943, 948, 949, 951, 953, 954, 956, 957, 959, 963, 964, 965, 967, 968, 969, 978, 982, 983, 985, 986, 987, 994, 996, 999, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "def": [4, 5, 6, 7, 8, 10, 11, 13, 14, 15, 16, 17, 19, 24, 26, 31, 32, 34, 37, 38, 45, 49, 52, 53, 55, 58, 66, 71, 85, 87, 89, 90, 94, 96, 99, 101, 104, 106, 111, 113, 114, 121, 140, 143, 145, 146, 149, 156, 161, 169, 170, 173, 178, 181, 182, 189, 190, 191, 199, 201, 202, 215, 216, 218, 224, 225, 226, 227, 229, 230, 233, 236, 237, 238, 239, 241, 246, 249, 252, 258, 263, 265, 268, 271, 274, 276, 278, 280, 283, 284, 287, 300, 303, 307, 311, 317, 319, 320, 321, 332, 340, 345, 347, 351, 352, 357, 374, 377, 381, 385, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 472, 497, 561, 565, 574, 575, 582, 744, 838, 892, 897, 914, 953, 960, 968, 983], "model_prop": 4, "none": [4, 8, 9, 10, 13, 16, 17, 25, 28, 31, 36, 38, 39, 41, 49, 51, 52, 53, 59, 89, 92, 96, 105, 110, 111, 113, 116, 128, 135, 138, 144, 145, 156, 160, 181, 182, 189, 192, 199, 201, 214, 215, 216, 218, 232, 238, 239, 250, 263, 265, 269, 282, 285, 289, 290, 297, 300, 305, 307, 308, 311, 312, 314, 319, 320, 340, 342, 345, 347, 352, 354, 359, 364, 373, 377, 380, 382, 383, 384, 385, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 467, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 571, 572, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 664, 665, 666, 667, 671, 672, 673, 675, 676, 677, 678, 680, 682, 684, 685, 686, 687, 689, 690, 691, 692, 693, 695, 697, 698, 701, 702, 703, 704, 705, 706, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 721, 722, 723, 724, 726, 727, 729, 730, 731, 732, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 750, 751, 752, 753, 754, 756, 757, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 854, 857, 858, 860, 861, 862, 863, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 882, 884, 885, 886, 888, 889, 890, 891, 894, 896, 901, 902, 905, 906, 907, 908, 912, 913, 916, 919, 921, 922, 924, 927, 928, 934, 937, 938, 940, 942, 949, 953, 963, 966, 969, 978, 982, 987, 989, 993, 994, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "model_step": 4, "cv_result": [4, 13, 67, 107, 236, 237, 239, 241, 364, 776, 788, 953], "score": [4, 6, 8, 11, 13, 16, 20, 21, 23, 24, 25, 29, 30, 31, 34, 55, 57, 66, 67, 68, 69, 70, 71, 73, 77, 80, 94, 99, 101, 103, 110, 111, 112, 113, 114, 117, 120, 121, 127, 130, 131, 132, 135, 148, 150, 152, 153, 154, 155, 156, 158, 165, 172, 173, 176, 181, 183, 187, 189, 197, 199, 208, 213, 214, 215, 218, 222, 228, 231, 236, 238, 239, 240, 241, 242, 243, 246, 247, 249, 250, 251, 252, 253, 255, 257, 265, 266, 267, 273, 274, 275, 276, 280, 282, 283, 284, 285, 287, 288, 289, 290, 294, 296, 297, 299, 300, 307, 315, 319, 320, 323, 328, 340, 345, 347, 350, 358, 359, 367, 368, 370, 371, 372, 374, 376, 378, 380, 382, 390, 392, 396, 401, 407, 411, 413, 416, 429, 433, 434, 435, 436, 437, 438, 439, 440, 446, 447, 448, 466, 468, 496, 500, 505, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 532, 533, 534, 556, 557, 558, 559, 560, 562, 563, 564, 566, 567, 568, 570, 573, 574, 575, 577, 578, 579, 580, 583, 584, 585, 586, 587, 588, 589, 598, 599, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 662, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 679, 680, 681, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 699, 700, 701, 702, 703, 705, 718, 719, 720, 745, 746, 747, 748, 749, 750, 751, 752, 757, 758, 759, 760, 761, 762, 765, 766, 768, 776, 781, 784, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 810, 811, 812, 814, 815, 816, 821, 822, 823, 825, 845, 860, 861, 862, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 904, 911, 942, 945, 949, 951, 956, 959, 961, 963, 967, 973, 974, 981, 983, 985, 987, 989, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "neg_mean_absolute_error": [4, 121, 183, 953], "neg_root_mean_squared_error": [4, 284, 953], "return_estim": [4, 153, 294, 377, 788, 1001], "getattr": [4, 8, 278, 347, 359, 1009], "els": [4, 8, 11, 12, 13, 16, 19, 32, 38, 41, 46, 52, 53, 59, 77, 91, 104, 110, 111, 114, 145, 153, 154, 170, 183, 199, 202, 208, 212, 214, 215, 216, 217, 218, 238, 239, 242, 249, 258, 263, 271, 273, 274, 280, 319, 320, 327, 345, 349, 351, 380, 381, 383, 385, 393, 401, 413, 472, 484, 497, 533, 582, 589, 608, 609, 610, 611, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 630, 631, 632, 634, 636, 637, 638, 640, 643, 645, 646, 647, 648, 667, 673, 751, 757, 759, 765, 766, 791, 829, 841, 844, 852, 865, 866, 880, 915, 917, 919, 940, 969], "mae": [4, 13, 121, 181, 183, 522, 529, 708, 874, 876, 953, 969, 1000, 1001, 1005, 1006], "test_neg_mean_absolute_error": [4, 183], "rmse": [4, 13, 76, 284, 713, 953, 1004], "test_neg_root_mean_squared_error": 4, "3f": [4, 6, 8, 11, 13, 15, 17, 21, 23, 25, 35, 37, 44, 45, 46, 55, 67, 69, 71, 80, 101, 108, 109, 131, 135, 137, 138, 139, 141, 146, 152, 154, 155, 161, 165, 167, 173, 181, 183, 187, 196, 197, 199, 202, 212, 214, 236, 238, 239, 241, 244, 246, 249, 258, 273, 300, 319, 320, 321, 790, 961, 983], "std": [4, 11, 12, 13, 34, 43, 47, 51, 58, 63, 74, 76, 77, 88, 89, 90, 108, 110, 111, 121, 146, 148, 149, 153, 161, 166, 190, 212, 236, 237, 238, 240, 241, 243, 246, 248, 252, 284, 299, 310, 320, 328, 359, 373, 377, 380, 479, 570, 573, 790, 845, 856, 963, 982, 986, 1001, 1005], "n": [4, 5, 7, 8, 10, 11, 15, 17, 19, 30, 31, 34, 36, 37, 55, 66, 71, 75, 79, 85, 87, 90, 92, 94, 96, 97, 101, 103, 104, 108, 123, 130, 135, 137, 141, 146, 154, 156, 161, 165, 177, 181, 182, 185, 196, 198, 199, 201, 211, 212, 213, 216, 224, 226, 227, 236, 238, 241, 243, 244, 245, 247, 248, 258, 261, 263, 276, 280, 282, 283, 289, 292, 294, 297, 311, 315, 327, 332, 339, 342, 343, 345, 349, 351, 354, 359, 363, 364, 370, 371, 373, 376, 377, 378, 379, 380, 381, 383, 384, 408, 409, 411, 412, 414, 433, 435, 438, 442, 453, 479, 480, 481, 482, 487, 492, 502, 504, 505, 511, 521, 522, 523, 524, 527, 528, 529, 530, 552, 553, 554, 555, 571, 572, 578, 591, 613, 635, 643, 656, 660, 663, 670, 671, 718, 767, 770, 772, 777, 778, 781, 801, 805, 806, 810, 830, 857, 859, 873, 874, 875, 876, 882, 900, 905, 906, 928, 932, 933, 942, 945, 947, 949, 950, 953, 954, 955, 956, 957, 959, 960, 963, 965, 967, 968, 969, 978, 985, 987, 993, 995, 996, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1010], "n_iter_": [4, 90, 189, 227, 359, 404, 411, 412, 413, 435, 436, 446, 447, 448, 495, 496, 497, 500, 501, 502, 503, 504, 507, 525, 526, 591, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 638, 640, 641, 642, 643, 644, 654, 656, 760, 761, 814, 822, 823, 860, 861, 862, 865, 866, 867, 868, 869, 870, 871, 997, 1000, 1001, 1003, 1006, 1007, 1009], "100": [4, 5, 7, 10, 12, 13, 16, 17, 19, 24, 26, 34, 39, 47, 50, 54, 58, 63, 67, 68, 71, 74, 75, 87, 89, 90, 96, 102, 107, 117, 120, 123, 138, 142, 145, 146, 153, 154, 156, 158, 160, 161, 163, 165, 167, 171, 172, 173, 175, 180, 181, 182, 183, 185, 190, 191, 192, 194, 196, 197, 199, 203, 204, 206, 211, 212, 213, 214, 215, 219, 224, 226, 230, 233, 234, 236, 238, 241, 243, 248, 249, 252, 263, 264, 265, 276, 279, 280, 282, 284, 285, 290, 294, 300, 301, 305, 306, 308, 309, 310, 314, 315, 317, 319, 320, 323, 326, 327, 332, 334, 340, 342, 345, 347, 350, 351, 364, 370, 373, 374, 377, 378, 379, 380, 381, 401, 405, 409, 413, 435, 436, 442, 454, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 487, 488, 489, 492, 494, 498, 500, 503, 508, 509, 510, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 569, 571, 574, 595, 596, 597, 603, 604, 605, 606, 610, 611, 612, 613, 616, 617, 622, 623, 624, 625, 626, 627, 629, 631, 633, 635, 644, 645, 648, 651, 652, 653, 654, 655, 657, 659, 660, 709, 760, 761, 764, 789, 790, 795, 800, 801, 802, 804, 805, 806, 810, 822, 823, 841, 843, 846, 855, 872, 942, 943, 946, 950, 953, 954, 960, 963, 965, 974, 978, 982, 986, 987, 1001, 1002, 1003, 1006, 1007], "044": [4, 50, 236, 320, 714, 953, 974], "003": 4, "068": [4, 13, 193, 238, 974], "005": [4, 238, 242, 263, 275, 278, 291, 320, 351, 974], "max_it": [4, 8, 13, 15, 17, 24, 28, 29, 68, 69, 87, 90, 106, 107, 111, 123, 126, 127, 146, 148, 149, 153, 154, 160, 167, 173, 174, 188, 189, 190, 193, 194, 196, 201, 202, 203, 204, 219, 220, 224, 225, 226, 227, 230, 251, 268, 273, 274, 275, 284, 289, 290, 291, 296, 297, 304, 319, 320, 351, 359, 380, 385, 404, 407, 411, 412, 413, 418, 423, 425, 435, 436, 442, 446, 447, 448, 495, 496, 497, 499, 500, 501, 502, 503, 504, 507, 509, 510, 511, 512, 525, 526, 591, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 629, 630, 631, 632, 633, 636, 638, 640, 641, 642, 643, 644, 646, 647, 651, 652, 653, 654, 657, 658, 760, 761, 776, 814, 822, 823, 860, 861, 862, 865, 866, 867, 868, 869, 870, 871, 943, 945, 949, 956, 957, 966, 967, 983, 987, 994, 997, 1000, 1001, 1002, 1003, 1005, 1007, 1008, 1009, 1010], "earli": [4, 15, 41, 59, 100, 101, 107, 110, 150, 159, 169, 282, 288, 359, 380, 405, 409, 413, 427, 454, 460, 500, 501, 502, 503, 510, 517, 518, 523, 524, 525, 526, 535, 591, 609, 620, 630, 631, 632, 640, 642, 656, 713, 791, 822, 823, 927, 950, 956, 963, 971, 973, 974, 977, 993, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1007, 1008, 1010], "stop": [4, 12, 17, 41, 59, 100, 101, 107, 142, 144, 150, 154, 159, 169, 183, 282, 288, 345, 347, 353, 354, 359, 373, 378, 380, 382, 404, 405, 407, 409, 411, 413, 416, 418, 426, 427, 435, 436, 442, 446, 447, 448, 454, 460, 472, 473, 496, 500, 501, 502, 503, 504, 507, 509, 510, 511, 517, 518, 521, 522, 523, 524, 525, 526, 528, 529, 535, 552, 553, 555, 566, 581, 591, 608, 609, 610, 612, 613, 616, 620, 622, 623, 630, 631, 632, 633, 635, 640, 641, 642, 644, 655, 656, 659, 678, 713, 760, 761, 791, 822, 823, 862, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 907, 927, 942, 949, 957, 958, 968, 969, 973, 974, 975, 977, 989, 993, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1007, 1008, 1009, 1010], "place": [4, 16, 57, 209, 219, 262, 332, 343, 345, 346, 347, 350, 352, 360, 371, 381, 383, 405, 409, 410, 446, 447, 448, 479, 545, 554, 592, 594, 595, 731, 744, 760, 848, 850, 851, 852, 853, 854, 855, 856, 932, 933, 972, 993, 1000, 1003, 1004, 1006, 1010, 1011], "an": [4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 21, 24, 25, 26, 31, 32, 33, 34, 36, 37, 38, 40, 41, 43, 45, 47, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 63, 64, 66, 67, 68, 69, 71, 73, 74, 75, 76, 82, 87, 88, 89, 90, 91, 92, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 114, 115, 117, 118, 119, 120, 121, 124, 127, 128, 131, 135, 137, 138, 139, 142, 143, 144, 146, 147, 148, 150, 152, 153, 154, 155, 158, 159, 160, 161, 164, 165, 169, 176, 181, 182, 183, 185, 186, 188, 189, 195, 197, 198, 199, 201, 202, 203, 204, 206, 208, 209, 211, 212, 213, 214, 215, 216, 218, 222, 224, 225, 227, 229, 230, 232, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 247, 249, 251, 253, 257, 258, 261, 264, 265, 266, 269, 271, 278, 283, 284, 285, 288, 289, 290, 292, 293, 294, 297, 301, 303, 304, 306, 307, 309, 310, 311, 319, 320, 321, 323, 326, 327, 328, 332, 333, 334, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 358, 359, 360, 362, 363, 364, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 394, 397, 398, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 446, 447, 448, 449, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 467, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 539, 540, 544, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 570, 571, 572, 574, 575, 576, 583, 586, 587, 591, 592, 593, 594, 595, 596, 597, 598, 599, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 670, 673, 675, 676, 682, 684, 685, 690, 692, 693, 697, 698, 700, 705, 706, 708, 709, 711, 713, 714, 716, 719, 721, 722, 726, 727, 729, 730, 731, 732, 733, 736, 738, 739, 740, 741, 744, 745, 746, 747, 750, 751, 752, 753, 754, 755, 756, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 773, 774, 776, 777, 778, 779, 780, 781, 782, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 820, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 878, 880, 882, 883, 885, 886, 888, 889, 892, 896, 897, 898, 900, 901, 902, 904, 906, 909, 910, 911, 912, 913, 914, 916, 917, 918, 921, 923, 924, 927, 928, 934, 937, 939, 940, 941, 943, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 960, 961, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 976, 977, 979, 981, 982, 986, 987, 989, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "quit": [4, 13, 50, 54, 80, 104, 126, 135, 153, 154, 179, 199, 246, 255, 290, 319, 332, 350, 358, 373, 381, 948, 950, 955, 977, 1001], "good": [4, 9, 20, 24, 26, 37, 41, 43, 46, 49, 50, 52, 55, 70, 76, 80, 96, 107, 110, 113, 114, 138, 142, 148, 153, 165, 170, 181, 182, 187, 196, 206, 208, 212, 215, 218, 225, 227, 232, 238, 244, 253, 276, 283, 284, 289, 296, 301, 307, 319, 320, 328, 332, 333, 334, 344, 346, 347, 348, 349, 351, 357, 359, 367, 370, 371, 373, 375, 377, 378, 380, 381, 382, 383, 401, 403, 408, 498, 523, 525, 526, 554, 594, 604, 611, 612, 620, 622, 623, 625, 633, 644, 654, 658, 686, 694, 705, 727, 790, 859, 902, 942, 948, 949, 950, 953, 954, 956, 957, 958, 960, 961, 963, 967, 968, 969, 973, 977, 978, 982, 985, 987, 999], "trial": [4, 243, 411, 413, 424, 635, 760, 761, 949, 999], "without": [4, 5, 13, 14, 23, 33, 39, 41, 44, 49, 52, 53, 59, 63, 64, 71, 92, 107, 112, 113, 116, 118, 121, 127, 131, 135, 144, 150, 152, 153, 154, 165, 170, 189, 208, 212, 215, 216, 219, 221, 232, 239, 243, 245, 255, 258, 259, 260, 261, 267, 268, 269, 270, 278, 279, 283, 285, 287, 311, 315, 320, 334, 340, 341, 343, 345, 346, 347, 349, 350, 351, 354, 357, 358, 359, 364, 367, 373, 374, 378, 380, 381, 382, 383, 398, 403, 405, 410, 422, 433, 438, 460, 468, 479, 496, 498, 519, 520, 527, 543, 544, 575, 591, 595, 598, 603, 623, 656, 664, 744, 765, 766, 767, 774, 776, 790, 791, 807, 814, 818, 824, 825, 828, 831, 834, 835, 837, 841, 842, 843, 845, 850, 865, 881, 922, 942, 943, 945, 947, 949, 950, 953, 956, 959, 963, 967, 968, 969, 972, 973, 974, 978, 979, 987, 990, 993, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1007, 1008, 1009, 1010], "ani": [4, 8, 9, 13, 14, 19, 41, 43, 52, 54, 64, 118, 130, 135, 142, 143, 144, 152, 153, 154, 155, 156, 170, 181, 185, 199, 208, 211, 212, 215, 225, 229, 230, 238, 239, 241, 244, 247, 255, 271, 278, 279, 282, 287, 289, 290, 292, 307, 311, 321, 328, 332, 333, 334, 339, 340, 342, 343, 345, 347, 349, 350, 351, 353, 358, 359, 360, 363, 364, 369, 370, 371, 372, 373, 374, 377, 378, 379, 380, 381, 382, 398, 404, 410, 412, 413, 414, 416, 418, 420, 421, 425, 428, 431, 452, 453, 472, 473, 487, 498, 501, 503, 510, 515, 521, 522, 523, 524, 528, 529, 530, 531, 532, 533, 534, 543, 544, 546, 552, 553, 555, 557, 567, 574, 575, 584, 591, 596, 597, 609, 612, 622, 623, 630, 631, 632, 633, 640, 641, 642, 643, 644, 656, 660, 663, 664, 668, 680, 681, 683, 687, 699, 700, 715, 718, 720, 737, 741, 742, 743, 744, 755, 756, 758, 762, 765, 766, 774, 775, 794, 797, 805, 806, 811, 815, 824, 825, 829, 830, 834, 836, 838, 839, 846, 855, 856, 859, 862, 865, 866, 873, 874, 875, 876, 877, 879, 881, 885, 886, 923, 937, 942, 943, 945, 948, 949, 950, 953, 954, 955, 956, 959, 960, 961, 963, 965, 966, 967, 968, 969, 972, 978, 980, 984, 985, 987, 994, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "tune": [4, 41, 52, 67, 92, 101, 107, 134, 137, 148, 154, 170, 185, 186, 198, 205, 218, 232, 243, 260, 279, 307, 311, 315, 319, 328, 332, 333, 334, 358, 359, 368, 372, 373, 377, 380, 382, 383, 416, 426, 523, 524, 558, 577, 578, 579, 581, 583, 584, 586, 587, 589, 607, 623, 654, 658, 821, 870, 947, 948, 949, 950, 952, 953, 956, 957, 959, 967, 968, 979, 989, 993, 1007, 1009], "just": [4, 13, 29, 66, 80, 87, 107, 111, 135, 171, 178, 202, 213, 238, 245, 249, 258, 273, 307, 319, 320, 327, 328, 340, 344, 345, 346, 347, 349, 350, 353, 357, 358, 359, 370, 373, 374, 377, 380, 382, 385, 432, 497, 499, 506, 510, 519, 520, 521, 522, 523, 524, 527, 528, 529, 530, 543, 548, 574, 575, 610, 616, 621, 622, 624, 626, 630, 631, 632, 640, 641, 642, 768, 784, 814, 822, 823, 942, 949, 952, 953, 954, 957, 961, 963, 967, 973, 985, 993, 997, 999, 1001, 1005, 1009], "had": [4, 9, 44, 114, 142, 215, 278, 284, 290, 328, 345, 346, 381, 384, 408, 943, 953, 977, 978, 993, 994, 1000, 1001, 1002, 1003, 1004, 1008], "explicit": [4, 150, 154, 158, 207, 215, 311, 332, 333, 334, 344, 346, 357, 359, 360, 374, 381, 387, 436, 463, 465, 466, 505, 515, 516, 595, 602, 603, 605, 640, 762, 763, 770, 809, 817, 825, 865, 870, 917, 921, 945, 947, 949, 953, 963, 969, 972, 974, 993, 997, 1002, 1003, 1006, 1010], "pass": [4, 7, 8, 20, 21, 32, 35, 107, 118, 132, 162, 165, 182, 209, 211, 212, 215, 218, 219, 221, 229, 236, 239, 285, 287, 290, 312, 321, 328, 332, 333, 334, 340, 345, 346, 347, 350, 351, 352, 353, 354, 357, 359, 364, 367, 369, 373, 374, 377, 378, 380, 381, 383, 384, 385, 390, 391, 395, 396, 401, 402, 404, 406, 407, 408, 410, 411, 412, 413, 414, 416, 418, 421, 423, 424, 426, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 446, 447, 448, 452, 455, 456, 459, 460, 461, 467, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 545, 546, 552, 553, 554, 555, 557, 558, 561, 571, 572, 574, 575, 581, 584, 590, 595, 596, 598, 599, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 648, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 695, 696, 705, 726, 737, 741, 742, 743, 744, 751, 755, 756, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 774, 776, 777, 778, 779, 780, 781, 782, 784, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 821, 822, 823, 824, 825, 828, 829, 830, 831, 832, 836, 837, 838, 839, 840, 842, 844, 845, 846, 854, 855, 856, 857, 858, 860, 861, 862, 863, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 884, 885, 886, 892, 896, 897, 901, 902, 904, 906, 908, 910, 913, 914, 921, 923, 924, 927, 942, 943, 949, 951, 953, 954, 955, 956, 957, 960, 963, 966, 967, 968, 973, 977, 978, 982, 990, 993, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "them": [4, 5, 8, 30, 36, 37, 46, 50, 52, 53, 57, 62, 63, 66, 67, 80, 87, 89, 92, 102, 117, 130, 135, 137, 148, 149, 153, 154, 155, 158, 160, 165, 176, 182, 183, 185, 199, 212, 215, 218, 219, 236, 238, 239, 241, 247, 255, 260, 278, 283, 285, 290, 300, 307, 321, 327, 332, 334, 340, 343, 345, 346, 347, 348, 349, 353, 357, 359, 360, 362, 364, 367, 371, 372, 373, 374, 377, 378, 380, 381, 383, 408, 411, 413, 414, 421, 428, 431, 457, 458, 472, 531, 532, 533, 534, 571, 572, 580, 584, 585, 588, 596, 603, 628, 656, 731, 734, 737, 741, 742, 743, 744, 752, 762, 776, 783, 790, 825, 829, 834, 835, 839, 843, 845, 846, 855, 856, 862, 873, 874, 910, 919, 942, 943, 949, 952, 953, 954, 956, 957, 958, 963, 968, 969, 971, 972, 976, 977, 978, 985, 986, 987, 993, 994, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "But": [4, 9, 50, 152, 182, 183, 238, 258, 278, 345, 357, 373, 376, 379, 380, 426, 709, 873, 874, 942, 953, 968, 973], "much": [4, 6, 7, 9, 13, 19, 24, 37, 52, 75, 77, 85, 90, 96, 106, 114, 115, 121, 122, 123, 137, 148, 149, 153, 154, 155, 156, 158, 178, 179, 183, 212, 215, 238, 240, 241, 244, 249, 275, 279, 283, 284, 285, 289, 290, 292, 307, 312, 319, 320, 328, 332, 333, 334, 340, 345, 346, 347, 350, 353, 357, 358, 363, 371, 372, 375, 376, 377, 378, 379, 380, 381, 382, 411, 412, 460, 498, 499, 500, 502, 523, 524, 525, 526, 622, 623, 630, 631, 632, 640, 641, 642, 656, 742, 743, 765, 766, 780, 840, 858, 865, 942, 945, 948, 949, 950, 952, 953, 954, 956, 957, 959, 961, 965, 966, 968, 969, 973, 977, 982, 983, 985, 986, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "monoton": [4, 24, 100, 150, 154, 199, 211, 219, 288, 371, 521, 522, 525, 526, 528, 529, 596, 599, 600, 658, 670, 841, 853, 867, 870, 873, 874, 875, 876, 950, 954, 963, 968, 974, 1000, 1004, 1008, 1010], "relationship": [4, 13, 20, 101, 102, 143, 152, 153, 160, 165, 181, 183, 184, 245, 257, 279, 285, 294, 359, 373, 375, 377, 426, 460, 600, 678, 950, 953, 955, 956, 960, 961, 985, 998], "ordin": [4, 50, 67, 121, 218, 281, 284, 285, 289, 292, 339, 359, 380, 460, 531, 673, 830, 833, 838, 839, 846, 949, 950, 963, 973, 1001, 1007], "case": [4, 7, 8, 13, 24, 26, 32, 34, 46, 49, 52, 54, 58, 63, 67, 68, 76, 80, 92, 94, 104, 106, 107, 114, 115, 121, 132, 134, 135, 137, 144, 153, 154, 156, 165, 167, 170, 172, 181, 182, 183, 185, 186, 189, 195, 197, 198, 199, 208, 212, 213, 214, 215, 218, 219, 229, 232, 235, 237, 238, 239, 241, 244, 245, 247, 255, 258, 261, 265, 275, 278, 280, 283, 285, 287, 290, 311, 319, 320, 321, 327, 328, 332, 333, 334, 339, 340, 343, 345, 346, 347, 349, 350, 351, 352, 354, 357, 358, 359, 360, 363, 364, 367, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 401, 404, 407, 408, 410, 411, 415, 417, 427, 428, 429, 431, 438, 460, 472, 473, 479, 503, 505, 506, 507, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 545, 546, 552, 555, 557, 558, 561, 566, 570, 573, 574, 575, 589, 591, 592, 594, 596, 611, 612, 617, 620, 621, 622, 623, 625, 627, 630, 632, 633, 636, 638, 639, 640, 644, 646, 647, 648, 649, 650, 651, 663, 667, 672, 673, 676, 682, 684, 685, 686, 689, 691, 692, 693, 697, 698, 701, 705, 706, 708, 709, 711, 713, 716, 717, 719, 726, 741, 744, 746, 747, 748, 750, 751, 752, 753, 757, 759, 761, 762, 765, 766, 768, 776, 780, 784, 785, 786, 787, 788, 789, 790, 792, 794, 802, 805, 806, 807, 808, 809, 811, 813, 814, 815, 816, 817, 825, 832, 834, 835, 838, 839, 840, 843, 844, 845, 846, 849, 855, 856, 857, 858, 865, 867, 870, 873, 874, 880, 881, 891, 902, 903, 921, 942, 943, 945, 947, 948, 950, 951, 952, 954, 955, 956, 957, 959, 960, 963, 967, 968, 969, 972, 973, 977, 978, 987, 990, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "usual": [4, 13, 37, 73, 74, 76, 113, 114, 116, 121, 152, 154, 167, 181, 182, 232, 235, 238, 247, 248, 279, 290, 307, 328, 332, 333, 343, 345, 347, 353, 357, 358, 359, 363, 364, 370, 373, 374, 377, 378, 380, 381, 382, 414, 420, 502, 504, 506, 511, 523, 524, 571, 572, 594, 604, 622, 623, 630, 631, 632, 640, 641, 642, 656, 689, 721, 768, 789, 793, 865, 902, 942, 943, 945, 948, 949, 950, 952, 953, 954, 957, 958, 959, 960, 963, 967, 968, 969, 978, 984, 985, 1008], "hot": [4, 67, 106, 109, 121, 153, 181, 247, 279, 280, 284, 289, 307, 359, 380, 381, 515, 530, 545, 612, 622, 623, 633, 644, 828, 830, 832, 833, 836, 838, 839, 846, 949, 963, 1001, 1007, 1008], "encod": [4, 8, 11, 45, 52, 67, 87, 106, 121, 150, 153, 154, 155, 163, 180, 181, 218, 247, 277, 279, 280, 281, 289, 291, 292, 307, 319, 321, 337, 339, 341, 347, 350, 357, 359, 374, 377, 378, 380, 381, 383, 428, 451, 460, 467, 490, 495, 501, 503, 504, 506, 508, 509, 510, 512, 515, 525, 526, 530, 531, 533, 545, 552, 553, 555, 594, 612, 622, 623, 633, 636, 644, 698, 764, 769, 771, 788, 791, 825, 826, 828, 830, 832, 833, 836, 838, 839, 846, 849, 863, 942, 943, 949, 950, 953, 955, 956, 958, 967, 972, 973, 974, 989, 994, 995, 1001, 1005, 1007, 1008, 1009, 1010], "consist": [4, 7, 25, 30, 34, 53, 54, 66, 75, 83, 85, 87, 107, 111, 117, 124, 135, 140, 142, 145, 149, 156, 181, 199, 214, 218, 244, 247, 275, 283, 287, 290, 315, 320, 328, 332, 338, 340, 342, 345, 347, 351, 352, 353, 354, 358, 359, 360, 371, 373, 375, 379, 380, 381, 391, 392, 395, 396, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 427, 428, 429, 431, 433, 434, 435, 436, 437, 438, 439, 440, 446, 447, 448, 454, 461, 495, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 518, 520, 521, 522, 523, 524, 526, 527, 528, 529, 530, 531, 532, 533, 534, 545, 546, 547, 552, 553, 555, 575, 591, 592, 593, 594, 599, 602, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 624, 625, 626, 627, 628, 629, 631, 634, 636, 637, 638, 641, 642, 643, 651, 652, 653, 654, 655, 664, 698, 760, 761, 769, 793, 794, 795, 797, 798, 799, 800, 808, 809, 811, 813, 816, 817, 823, 828, 829, 830, 832, 836, 837, 840, 841, 843, 844, 846, 857, 858, 861, 865, 866, 868, 869, 871, 874, 876, 885, 887, 908, 924, 927, 942, 945, 946, 947, 949, 950, 952, 953, 954, 956, 957, 963, 966, 968, 969, 971, 973, 977, 978, 985, 993, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010], "scale": [4, 5, 12, 24, 26, 34, 37, 40, 43, 44, 53, 55, 58, 67, 68, 74, 77, 80, 89, 92, 112, 118, 135, 137, 138, 139, 142, 143, 144, 146, 150, 154, 158, 161, 162, 169, 172, 181, 183, 185, 195, 196, 197, 199, 200, 203, 208, 214, 218, 229, 235, 238, 239, 240, 241, 245, 261, 263, 274, 275, 276, 277, 278, 288, 291, 293, 294, 301, 302, 304, 307, 311, 328, 331, 332, 337, 338, 339, 342, 345, 350, 354, 357, 358, 359, 372, 373, 374, 378, 380, 381, 382, 383, 410, 411, 414, 415, 421, 428, 433, 434, 435, 436, 437, 438, 439, 440, 446, 447, 448, 449, 465, 474, 478, 479, 488, 498, 502, 504, 505, 511, 513, 514, 525, 526, 546, 554, 555, 561, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 595, 596, 605, 608, 609, 610, 611, 613, 616, 622, 623, 624, 625, 626, 636, 638, 640, 641, 642, 645, 651, 652, 653, 654, 656, 658, 663, 667, 680, 704, 710, 720, 722, 732, 738, 740, 768, 776, 779, 791, 792, 793, 805, 806, 807, 822, 823, 826, 829, 834, 835, 837, 840, 842, 843, 845, 850, 851, 852, 854, 855, 857, 858, 865, 866, 867, 868, 869, 870, 871, 928, 929, 930, 931, 934, 942, 945, 946, 949, 953, 954, 955, 956, 957, 961, 967, 968, 973, 974, 977, 978, 985, 986, 988, 989, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "same": [4, 7, 8, 13, 16, 20, 25, 32, 34, 37, 41, 50, 52, 54, 55, 61, 66, 67, 68, 85, 87, 89, 92, 94, 96, 102, 104, 108, 111, 114, 115, 119, 135, 137, 153, 154, 156, 167, 169, 170, 175, 181, 182, 183, 189, 199, 215, 219, 229, 233, 234, 235, 236, 238, 239, 241, 243, 244, 246, 251, 258, 261, 263, 275, 278, 279, 281, 283, 284, 287, 289, 299, 307, 319, 320, 321, 327, 328, 332, 333, 334, 339, 340, 342, 344, 345, 347, 349, 351, 354, 357, 358, 359, 360, 364, 367, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 394, 398, 402, 403, 410, 414, 420, 429, 433, 434, 435, 436, 437, 438, 439, 440, 442, 457, 459, 460, 462, 468, 472, 473, 495, 496, 499, 500, 501, 502, 503, 504, 507, 511, 513, 515, 516, 517, 518, 521, 523, 524, 525, 526, 528, 529, 531, 532, 553, 554, 566, 567, 570, 574, 575, 577, 586, 591, 592, 593, 596, 597, 610, 613, 616, 617, 619, 622, 623, 627, 630, 631, 632, 636, 637, 638, 639, 640, 641, 642, 648, 651, 663, 668, 669, 676, 677, 679, 681, 689, 694, 695, 699, 705, 718, 719, 720, 741, 742, 743, 749, 751, 755, 757, 758, 760, 761, 762, 763, 765, 766, 768, 770, 771, 776, 780, 781, 784, 786, 787, 788, 789, 790, 791, 792, 807, 808, 809, 813, 815, 816, 817, 828, 829, 830, 834, 835, 837, 839, 840, 841, 842, 843, 844, 845, 847, 854, 865, 866, 873, 875, 887, 891, 902, 919, 924, 927, 928, 938, 942, 943, 945, 947, 949, 950, 951, 952, 953, 954, 956, 957, 958, 959, 960, 961, 963, 967, 968, 969, 972, 973, 982, 987, 993, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "minmaxscal": [4, 5, 68, 131, 158, 202, 218, 274, 289, 334, 369, 374, 428, 851, 943, 963, 995, 998, 1001, 1003, 1004, 1005, 1009, 1010], "although": [4, 9, 24, 108, 121, 152, 178, 199, 208, 226, 257, 311, 328, 334, 347, 359, 373, 374, 378, 381, 460, 779, 782, 836, 952, 954, 955, 956, 959, 969, 978, 985, 986, 987, 993, 1001, 1008], "doe": [4, 7, 8, 9, 12, 13, 23, 24, 26, 29, 32, 37, 43, 50, 52, 54, 66, 68, 69, 80, 97, 101, 106, 107, 110, 111, 112, 116, 121, 135, 143, 153, 154, 165, 178, 181, 187, 199, 201, 202, 203, 206, 208, 211, 212, 213, 215, 216, 218, 226, 227, 233, 238, 240, 241, 245, 247, 248, 257, 258, 271, 278, 280, 282, 284, 285, 290, 291, 299, 300, 305, 307, 315, 317, 319, 320, 321, 332, 333, 339, 343, 345, 346, 347, 349, 353, 358, 359, 364, 367, 371, 372, 373, 374, 377, 378, 380, 381, 382, 383, 398, 404, 406, 410, 411, 413, 414, 418, 420, 429, 431, 436, 437, 443, 451, 463, 467, 472, 491, 499, 501, 502, 503, 505, 508, 510, 513, 514, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 531, 532, 533, 534, 545, 546, 547, 552, 553, 555, 557, 558, 561, 566, 570, 574, 596, 602, 613, 614, 615, 618, 619, 620, 623, 635, 637, 639, 646, 647, 662, 664, 666, 671, 691, 692, 693, 697, 699, 701, 706, 709, 741, 746, 747, 750, 751, 757, 762, 765, 766, 776, 822, 824, 826, 827, 828, 830, 832, 834, 837, 838, 839, 842, 845, 846, 854, 857, 858, 862, 865, 866, 873, 874, 875, 876, 880, 885, 889, 902, 905, 906, 919, 921, 937, 942, 943, 945, 947, 948, 949, 950, 952, 953, 954, 955, 956, 957, 959, 961, 963, 967, 968, 969, 987, 993, 994, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010], "result": [4, 5, 6, 9, 13, 14, 19, 23, 24, 25, 26, 28, 30, 32, 34, 37, 39, 40, 41, 43, 45, 50, 51, 52, 57, 59, 63, 67, 69, 71, 76, 80, 87, 90, 92, 93, 97, 104, 105, 106, 108, 111, 112, 114, 115, 117, 119, 120, 128, 134, 135, 137, 139, 141, 145, 148, 153, 154, 155, 156, 161, 166, 167, 170, 171, 176, 182, 183, 185, 189, 195, 196, 199, 201, 202, 205, 208, 211, 213, 219, 224, 229, 230, 232, 233, 236, 238, 239, 241, 244, 245, 246, 247, 249, 250, 253, 255, 258, 260, 264, 273, 274, 275, 278, 279, 280, 283, 287, 289, 291, 292, 293, 294, 296, 299, 301, 307, 311, 312, 315, 319, 321, 325, 326, 327, 332, 333, 334, 339, 340, 342, 345, 347, 349, 350, 351, 353, 357, 358, 359, 360, 367, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 398, 404, 405, 407, 409, 410, 411, 414, 415, 416, 417, 418, 419, 421, 423, 426, 428, 431, 433, 434, 435, 436, 437, 438, 439, 440, 443, 453, 472, 473, 475, 477, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 515, 516, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 533, 543, 544, 545, 546, 548, 552, 553, 555, 571, 572, 574, 575, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 594, 595, 596, 598, 600, 604, 607, 616, 617, 622, 628, 629, 630, 631, 640, 641, 642, 650, 653, 654, 655, 656, 657, 658, 659, 672, 674, 676, 681, 688, 689, 691, 692, 693, 694, 695, 699, 700, 701, 717, 719, 720, 727, 734, 737, 741, 742, 743, 744, 746, 747, 748, 750, 756, 757, 760, 761, 762, 764, 765, 766, 767, 772, 776, 777, 778, 781, 782, 786, 792, 793, 794, 796, 797, 798, 799, 805, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 827, 829, 830, 838, 839, 842, 843, 846, 854, 858, 862, 865, 867, 870, 873, 874, 875, 876, 877, 878, 885, 886, 901, 902, 904, 908, 918, 924, 927, 943, 945, 947, 948, 949, 950, 952, 953, 954, 956, 957, 958, 959, 960, 961, 963, 965, 967, 968, 969, 972, 973, 976, 978, 982, 983, 985, 986, 987, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "compar": [4, 5, 9, 13, 19, 20, 23, 24, 26, 32, 33, 34, 36, 37, 38, 40, 44, 46, 49, 51, 52, 53, 54, 55, 61, 64, 67, 68, 69, 70, 75, 76, 78, 80, 84, 85, 90, 94, 96, 100, 101, 102, 104, 106, 110, 111, 112, 114, 116, 117, 119, 121, 124, 127, 135, 141, 148, 149, 150, 153, 155, 156, 159, 161, 163, 165, 169, 170, 176, 178, 181, 182, 184, 185, 187, 189, 191, 195, 198, 199, 201, 202, 205, 207, 210, 213, 216, 218, 219, 221, 226, 227, 231, 233, 235, 236, 237, 239, 241, 243, 245, 247, 249, 250, 252, 255, 258, 259, 260, 261, 263, 264, 265, 267, 268, 269, 270, 272, 275, 277, 279, 282, 283, 285, 289, 311, 319, 320, 321, 326, 327, 328, 334, 340, 342, 345, 347, 370, 371, 373, 375, 376, 377, 378, 380, 382, 383, 404, 405, 406, 408, 409, 410, 412, 413, 414, 416, 422, 427, 428, 433, 434, 435, 436, 437, 438, 439, 440, 446, 447, 448, 454, 460, 466, 468, 476, 478, 486, 488, 492, 495, 501, 503, 509, 510, 515, 516, 525, 526, 527, 528, 529, 535, 595, 603, 608, 609, 617, 619, 621, 622, 627, 630, 632, 640, 641, 648, 659, 669, 676, 679, 694, 701, 706, 749, 761, 762, 767, 776, 788, 791, 798, 807, 811, 814, 818, 822, 825, 826, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 845, 846, 850, 851, 852, 853, 854, 855, 856, 865, 866, 867, 869, 870, 942, 945, 946, 947, 949, 950, 952, 953, 954, 955, 956, 957, 959, 963, 964, 967, 968, 969, 971, 972, 974, 985, 986, 993, 995, 1000, 1001, 1006], "linear_model": [4, 7, 8, 10, 14, 24, 26, 28, 51, 67, 69, 71, 80, 106, 121, 123, 124, 126, 127, 134, 135, 137, 148, 150, 152, 153, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 193, 194, 195, 196, 197, 198, 199, 208, 209, 210, 211, 215, 217, 220, 222, 234, 241, 246, 247, 251, 252, 257, 276, 279, 280, 283, 285, 287, 288, 289, 290, 291, 293, 294, 300, 319, 328, 332, 334, 344, 345, 347, 351, 353, 354, 358, 359, 364, 374, 380, 393, 398, 402, 429, 501, 503, 506, 507, 509, 510, 512, 531, 532, 533, 534, 561, 595, 596, 598, 599, 602, 604, 605, 606, 607, 664, 665, 751, 776, 784, 786, 787, 788, 790, 792, 796, 797, 798, 799, 823, 840, 844, 865, 866, 869, 872, 894, 896, 897, 898, 937, 945, 949, 953, 954, 959, 961, 963, 967, 974, 982, 983, 985, 987, 993, 994, 995, 996, 997, 998, 999, 1000], "ridgecv": [4, 71, 121, 135, 153, 217, 359, 364, 380, 532, 607, 636, 639, 949, 993, 995, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007], "onehotencod": [4, 67, 106, 111, 121, 153, 154, 181, 199, 210, 218, 220, 222, 284, 288, 290, 293, 294, 339, 359, 374, 380, 430, 431, 530, 545, 546, 828, 832, 833, 836, 839, 846, 943, 963, 994, 997, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "one_hot_encod": [4, 111], "handle_unknown": [4, 67, 106, 111, 121, 154, 155, 210, 218, 220, 222, 284, 288, 291, 838, 839, 963, 997, 1001, 1005, 1006], "ignor": [4, 6, 8, 17, 41, 46, 52, 59, 67, 101, 103, 106, 111, 118, 121, 154, 169, 173, 181, 190, 196, 210, 215, 220, 222, 230, 233, 274, 275, 283, 284, 288, 291, 311, 312, 320, 324, 333, 345, 347, 349, 351, 359, 363, 373, 374, 380, 381, 391, 392, 395, 398, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 424, 425, 428, 429, 431, 433, 434, 435, 436, 437, 438, 439, 440, 446, 447, 448, 452, 467, 472, 473, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 543, 545, 546, 547, 552, 553, 554, 555, 558, 561, 566, 567, 574, 575, 591, 592, 593, 594, 596, 597, 599, 603, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 652, 653, 654, 655, 656, 671, 677, 678, 689, 692, 693, 701, 718, 719, 726, 732, 737, 741, 746, 747, 750, 751, 760, 761, 763, 764, 765, 767, 769, 770, 771, 772, 775, 777, 778, 779, 780, 781, 782, 783, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 822, 823, 824, 825, 828, 829, 830, 831, 832, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 857, 858, 860, 861, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 928, 949, 950, 953, 955, 959, 963, 968, 983, 993, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1010, 1011], "sparse_output": [4, 111, 222, 284, 291, 294, 530, 832, 836, 838, 844, 849, 963, 1008, 1009], "alpha": [4, 5, 7, 8, 10, 12, 13, 14, 16, 17, 23, 25, 29, 32, 34, 37, 39, 42, 49, 53, 57, 62, 71, 77, 80, 87, 89, 90, 92, 93, 95, 96, 101, 103, 104, 110, 114, 117, 118, 120, 121, 122, 135, 137, 140, 142, 143, 144, 145, 146, 148, 149, 153, 160, 161, 162, 163, 165, 166, 167, 169, 170, 175, 176, 178, 179, 181, 182, 183, 185, 186, 190, 193, 194, 199, 201, 202, 205, 213, 214, 221, 224, 238, 239, 240, 241, 242, 245, 246, 248, 250, 251, 257, 258, 261, 263, 266, 268, 273, 275, 278, 279, 280, 281, 283, 285, 288, 290, 291, 294, 298, 300, 304, 305, 308, 309, 311, 312, 315, 316, 317, 319, 332, 340, 347, 351, 357, 375, 376, 378, 380, 382, 383, 385, 410, 435, 436, 442, 491, 495, 497, 499, 500, 501, 502, 503, 504, 506, 507, 509, 510, 511, 512, 524, 559, 560, 562, 575, 577, 579, 580, 587, 595, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 624, 625, 626, 627, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 648, 651, 686, 711, 800, 801, 802, 804, 822, 823, 861, 873, 874, 875, 876, 942, 949, 953, 955, 957, 961, 966, 967, 968, 969, 982, 985, 987, 990, 993, 995, 996, 997, 998, 1000, 1001, 1005, 1006, 1007, 1008, 1009], "logspac": [4, 12, 69, 73, 94, 126, 135, 138, 143, 153, 174, 185, 186, 212, 214, 228, 239, 251, 253, 262, 273, 280, 283, 307, 315, 784, 792, 948, 949, 982, 983, 985], "naive_linear_pipelin": 4, "transform": [4, 5, 6, 8, 10, 14, 24, 41, 43, 44, 45, 48, 51, 54, 59, 65, 69, 70, 80, 82, 83, 89, 90, 92, 93, 95, 96, 100, 105, 107, 111, 120, 121, 132, 143, 149, 150, 153, 154, 155, 158, 173, 181, 182, 189, 195, 197, 199, 202, 205, 208, 210, 211, 213, 215, 216, 218, 222, 226, 234, 235, 236, 239, 247, 257, 258, 260, 266, 267, 268, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 292, 294, 307, 310, 311, 319, 321, 328, 339, 340, 341, 342, 345, 347, 350, 354, 359, 364, 369, 371, 372, 373, 375, 376, 378, 380, 381, 382, 383, 389, 394, 397, 401, 405, 406, 407, 409, 411, 413, 416, 428, 429, 430, 431, 432, 446, 447, 448, 449, 452, 453, 460, 467, 472, 473, 478, 479, 488, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 511, 513, 514, 521, 523, 525, 528, 530, 531, 532, 533, 534, 545, 546, 547, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 599, 600, 602, 603, 604, 605, 606, 617, 622, 627, 637, 640, 648, 652, 653, 654, 655, 656, 658, 665, 666, 677, 716, 717, 748, 762, 765, 766, 776, 791, 794, 800, 809, 814, 817, 821, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 863, 865, 867, 870, 871, 894, 896, 911, 942, 943, 945, 947, 949, 950, 953, 954, 957, 967, 968, 970, 972, 973, 974, 975, 978, 983, 984, 987, 989, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "remaind": [4, 111, 153, 170, 181, 183, 199, 218, 292, 323, 374, 428, 431, 993, 1000, 1001, 1002, 1005, 1006, 1009], "alpha_": [4, 77, 126, 153, 161, 169, 170, 436, 575, 608, 609, 611, 615, 617, 619, 620, 625, 627, 637, 639, 949, 969, 982, 993, 1000], "7298221281347033": 4, "142": [4, 13, 48, 55, 380, 974], "014": [4, 55, 246, 290, 320, 351, 974], "184": [4, 181, 214, 276, 351, 974, 985], "020": [4, 961], "affirm": 4, "select": [4, 7, 9, 10, 20, 32, 33, 41, 44, 52, 54, 59, 65, 67, 70, 77, 85, 86, 87, 96, 97, 101, 103, 109, 111, 114, 121, 130, 132, 142, 144, 153, 154, 156, 158, 159, 161, 163, 165, 167, 168, 180, 185, 189, 196, 199, 202, 208, 212, 214, 218, 223, 224, 225, 226, 236, 237, 238, 239, 243, 251, 262, 278, 283, 284, 289, 293, 296, 297, 300, 302, 307, 315, 319, 320, 321, 328, 332, 333, 340, 342, 343, 345, 347, 353, 358, 359, 370, 373, 374, 375, 378, 380, 381, 383, 407, 409, 410, 411, 413, 415, 417, 422, 423, 424, 428, 430, 431, 436, 437, 440, 452, 453, 456, 457, 460, 461, 464, 465, 466, 468, 476, 479, 496, 498, 499, 504, 505, 508, 513, 515, 522, 523, 524, 527, 529, 545, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 591, 595, 596, 609, 610, 611, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 635, 637, 640, 642, 646, 647, 655, 656, 661, 676, 680, 682, 717, 751, 755, 756, 760, 761, 762, 765, 766, 767, 768, 776, 787, 788, 789, 791, 793, 807, 808, 809, 811, 813, 815, 816, 817, 825, 826, 830, 835, 841, 845, 862, 865, 866, 870, 873, 874, 875, 876, 881, 922, 923, 947, 948, 950, 952, 953, 954, 956, 957, 959, 963, 966, 967, 968, 969, 970, 972, 973, 974, 975, 977, 978, 979, 981, 985, 986, 987, 989, 993, 994, 995, 996, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1010], "specifi": [4, 20, 52, 87, 111, 112, 138, 141, 143, 144, 145, 170, 182, 189, 224, 246, 332, 333, 339, 343, 345, 347, 354, 358, 359, 364, 367, 373, 374, 377, 378, 380, 382, 383, 385, 387, 393, 401, 405, 409, 414, 416, 427, 428, 431, 433, 434, 436, 437, 438, 439, 440, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 467, 479, 491, 495, 497, 501, 502, 504, 505, 510, 511, 516, 521, 523, 524, 525, 526, 528, 531, 532, 547, 548, 557, 558, 561, 566, 574, 575, 584, 595, 596, 597, 602, 607, 610, 611, 612, 615, 616, 617, 619, 620, 622, 623, 624, 625, 626, 627, 629, 632, 633, 636, 637, 638, 639, 640, 641, 644, 645, 646, 647, 648, 651, 655, 662, 664, 666, 673, 675, 692, 693, 701, 705, 717, 734, 742, 743, 746, 747, 750, 762, 764, 765, 766, 768, 769, 771, 775, 776, 779, 784, 785, 786, 787, 788, 789, 790, 792, 796, 799, 800, 801, 803, 804, 805, 806, 810, 815, 838, 839, 840, 843, 844, 846, 861, 865, 866, 867, 868, 869, 870, 871, 872, 873, 875, 897, 904, 937, 943, 949, 950, 952, 953, 956, 960, 961, 963, 966, 967, 968, 982, 986, 993, 999, 1000, 1001, 1002, 1004, 1005, 1007, 1008, 1009, 1010, 1011], "three": [4, 7, 25, 32, 37, 38, 42, 43, 52, 55, 73, 83, 84, 101, 106, 108, 111, 112, 113, 122, 123, 124, 132, 135, 145, 153, 165, 173, 178, 181, 183, 190, 192, 214, 215, 224, 227, 257, 284, 285, 288, 333, 338, 342, 349, 363, 370, 373, 377, 378, 379, 381, 415, 426, 462, 673, 904, 946, 948, 949, 950, 953, 956, 963, 967, 968, 971, 978, 986, 993], "higher": [4, 13, 54, 75, 90, 94, 101, 104, 106, 107, 114, 117, 137, 139, 144, 145, 153, 154, 155, 158, 181, 182, 185, 199, 205, 206, 230, 232, 236, 238, 241, 252, 263, 283, 307, 311, 319, 320, 321, 328, 332, 340, 343, 347, 370, 373, 375, 380, 382, 383, 384, 408, 412, 413, 435, 442, 473, 496, 503, 507, 512, 517, 518, 521, 522, 523, 524, 525, 526, 528, 529, 530, 537, 552, 555, 571, 572, 583, 591, 595, 599, 601, 610, 611, 616, 617, 624, 625, 626, 627, 640, 642, 643, 668, 687, 691, 715, 748, 760, 762, 765, 766, 768, 776, 783, 784, 789, 792, 811, 814, 840, 857, 858, 859, 865, 866, 867, 868, 869, 870, 871, 878, 945, 949, 950, 952, 953, 956, 960, 963, 967, 968, 985, 987, 994, 999, 1001, 1008, 1010], "suspect": 4, "origin": [4, 5, 14, 16, 20, 21, 43, 44, 45, 48, 53, 55, 70, 71, 83, 87, 89, 90, 96, 119, 131, 132, 135, 137, 139, 141, 142, 148, 149, 154, 158, 169, 170, 185, 201, 202, 203, 205, 206, 212, 213, 214, 218, 230, 235, 241, 261, 266, 276, 279, 283, 293, 297, 311, 313, 319, 321, 328, 333, 340, 342, 344, 345, 347, 349, 350, 357, 359, 367, 370, 373, 374, 377, 378, 380, 381, 383, 384, 385, 386, 398, 401, 405, 407, 408, 409, 410, 411, 413, 414, 423, 427, 428, 429, 433, 434, 435, 436, 437, 438, 439, 440, 446, 447, 448, 457, 458, 459, 465, 483, 495, 497, 498, 499, 501, 502, 503, 504, 505, 507, 508, 509, 510, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 537, 540, 545, 546, 548, 552, 554, 555, 558, 571, 572, 574, 575, 578, 594, 596, 599, 602, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 654, 656, 660, 665, 691, 726, 732, 763, 764, 769, 771, 780, 790, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 810, 811, 812, 815, 816, 822, 823, 825, 828, 829, 830, 831, 832, 833, 834, 837, 838, 839, 841, 842, 843, 844, 845, 854, 857, 858, 859, 860, 861, 862, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 883, 885, 886, 890, 891, 912, 924, 927, 946, 947, 949, 950, 952, 953, 956, 959, 964, 965, 966, 967, 970, 972, 977, 978, 987, 996, 997, 999, 1001, 1003, 1005, 1007, 1009], "mere": [4, 238, 359, 792, 967], "min": [4, 10, 11, 12, 13, 14, 24, 26, 29, 49, 55, 71, 87, 90, 101, 103, 110, 113, 114, 119, 128, 135, 139, 141, 142, 143, 149, 153, 163, 169, 170, 176, 183, 184, 187, 202, 212, 213, 216, 257, 264, 265, 271, 273, 275, 278, 280, 281, 283, 301, 313, 316, 354, 373, 376, 378, 446, 447, 448, 449, 476, 498, 499, 502, 504, 505, 513, 514, 527, 591, 595, 596, 618, 619, 620, 621, 646, 647, 668, 704, 720, 743, 765, 766, 814, 822, 823, 835, 844, 851, 902, 918, 944, 949, 953, 956, 963, 999, 1002, 1004, 1005, 1008], "prevent": [4, 52, 112, 114, 132, 152, 182, 185, 278, 284, 285, 307, 319, 323, 328, 345, 347, 349, 357, 358, 373, 378, 381, 406, 413, 452, 453, 525, 526, 554, 555, 575, 691, 748, 822, 823, 850, 851, 853, 854, 855, 856, 953, 955, 958, 959, 963, 969, 985, 995, 996, 998, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008], "properli": [4, 13, 24, 52, 118, 142, 233, 287, 334, 343, 345, 349, 353, 379, 865, 866, 867, 868, 869, 870, 871, 942, 996, 998, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "automat": [4, 8, 12, 43, 60, 62, 67, 94, 126, 134, 160, 184, 224, 225, 236, 239, 278, 285, 288, 292, 300, 309, 311, 333, 340, 343, 345, 347, 349, 353, 359, 363, 369, 373, 374, 375, 378, 380, 381, 382, 397, 414, 416, 420, 426, 428, 429, 431, 460, 463, 479, 502, 504, 505, 511, 513, 515, 521, 525, 528, 547, 552, 555, 558, 566, 607, 609, 610, 611, 616, 617, 622, 623, 624, 625, 626, 627, 630, 631, 632, 636, 638, 639, 640, 642, 645, 648, 651, 652, 655, 659, 764, 779, 782, 791, 801, 822, 823, 826, 827, 829, 838, 839, 846, 857, 858, 865, 866, 867, 870, 873, 875, 879, 891, 924, 927, 942, 944, 947, 952, 957, 963, 967, 969, 972, 973, 982, 993, 996, 997, 998, 1004, 1007, 1008, 1009, 1010], "raw": [4, 12, 15, 34, 76, 89, 121, 142, 153, 158, 276, 285, 298, 321, 332, 340, 347, 353, 359, 371, 372, 373, 375, 378, 381, 433, 438, 465, 466, 467, 523, 524, 525, 527, 546, 552, 553, 554, 555, 598, 641, 654, 658, 669, 749, 811, 869, 950, 953, 957, 959, 960, 963, 966, 984, 986, 994, 998, 1001, 1004, 1010], "recogn": [4, 5, 27, 48, 50, 80, 82, 90, 109, 133, 150, 182, 232, 262, 290, 296, 297, 351, 364, 373, 381, 466, 661, 677, 791, 870, 953, 974, 978, 1010], "increas": [4, 7, 15, 25, 34, 40, 52, 54, 55, 58, 71, 90, 101, 102, 104, 107, 110, 112, 118, 131, 135, 137, 141, 142, 143, 146, 153, 154, 158, 161, 163, 172, 181, 182, 183, 185, 199, 206, 212, 225, 226, 238, 239, 240, 245, 251, 273, 279, 280, 283, 289, 297, 307, 315, 320, 321, 323, 332, 333, 334, 344, 353, 354, 371, 373, 375, 378, 380, 381, 384, 404, 408, 410, 416, 427, 435, 436, 442, 496, 500, 517, 518, 521, 522, 523, 524, 525, 526, 528, 529, 531, 532, 552, 555, 591, 599, 600, 601, 609, 614, 615, 618, 619, 620, 622, 623, 630, 631, 632, 640, 641, 642, 646, 647, 649, 650, 656, 670, 671, 676, 745, 752, 765, 766, 794, 813, 815, 816, 817, 820, 822, 823, 839, 865, 873, 874, 875, 876, 902, 942, 944, 948, 949, 950, 952, 953, 956, 963, 967, 968, 969, 977, 993, 995, 998, 1002, 1004, 1005, 1008], "strong": [4, 13, 51, 137, 150, 152, 153, 159, 174, 178, 179, 185, 186, 187, 214, 257, 285, 315, 372, 378, 380, 488, 613, 636, 946, 947, 949, 950, 952, 960, 968, 974, 985], "similar": [4, 5, 7, 12, 17, 20, 24, 25, 32, 34, 46, 48, 54, 57, 71, 80, 87, 91, 101, 114, 134, 137, 144, 152, 153, 154, 155, 165, 181, 183, 195, 201, 203, 204, 205, 208, 214, 215, 230, 235, 238, 241, 244, 245, 246, 255, 257, 258, 278, 290, 306, 311, 315, 320, 321, 328, 332, 337, 339, 341, 343, 344, 345, 347, 350, 351, 354, 357, 359, 367, 370, 371, 373, 376, 377, 378, 380, 381, 382, 383, 384, 404, 407, 408, 414, 416, 418, 419, 467, 472, 473, 500, 546, 553, 554, 555, 574, 641, 656, 659, 667, 669, 679, 683, 688, 691, 692, 694, 697, 701, 703, 718, 723, 724, 749, 755, 756, 759, 760, 761, 787, 792, 837, 858, 861, 865, 866, 867, 868, 886, 942, 945, 946, 948, 949, 950, 952, 954, 956, 957, 959, 960, 963, 965, 966, 967, 968, 969, 972, 973, 978, 986, 989, 993, 997, 998, 999, 1001, 1005, 1006], "magnitud": [4, 96, 103, 138, 149, 153, 198, 218, 243, 278, 283, 290, 332, 340, 351, 373, 380, 383, 577, 616, 668, 845, 949, 953, 957, 963, 967, 969, 995, 1002], "discret": [4, 29, 43, 85, 96, 101, 136, 150, 154, 161, 181, 188, 199, 219, 255, 273, 277, 281, 334, 337, 340, 341, 349, 358, 359, 373, 378, 381, 383, 402, 403, 412, 416, 424, 425, 426, 456, 478, 479, 486, 517, 523, 535, 552, 553, 556, 559, 560, 563, 564, 571, 572, 574, 575, 576, 580, 581, 582, 621, 622, 705, 762, 773, 791, 800, 801, 804, 826, 830, 838, 839, 842, 845, 854, 865, 870, 874, 916, 942, 949, 950, 951, 953, 954, 956, 969, 972, 974, 978, 989, 995, 998, 1006, 1007, 1008], "manner": [4, 71, 87, 132, 154, 158, 226, 291, 292, 333, 345, 351, 373, 378, 380, 381, 673, 805, 806, 942, 953, 969, 996, 1003], "integ": [4, 17, 45, 50, 67, 153, 181, 199, 288, 289, 328, 332, 339, 340, 342, 347, 350, 354, 358, 359, 373, 374, 377, 378, 380, 381, 398, 401, 426, 428, 431, 436, 451, 460, 462, 465, 466, 467, 469, 472, 473, 476, 478, 479, 483, 486, 514, 523, 524, 525, 526, 527, 531, 532, 536, 546, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 591, 592, 593, 594, 596, 597, 608, 615, 619, 623, 629, 637, 639, 640, 642, 663, 678, 698, 762, 764, 765, 766, 767, 769, 771, 776, 777, 778, 781, 782, 785, 788, 796, 799, 801, 804, 805, 806, 830, 838, 839, 844, 845, 846, 849, 859, 861, 873, 874, 875, 876, 881, 916, 917, 918, 922, 943, 949, 954, 956, 963, 966, 968, 969, 978, 985, 987, 993, 995, 996, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1010], "uniqu": [4, 16, 23, 28, 39, 44, 45, 54, 55, 60, 64, 108, 109, 115, 116, 153, 155, 165, 196, 199, 226, 247, 267, 284, 285, 293, 299, 319, 320, 321, 339, 347, 354, 359, 373, 374, 377, 380, 381, 404, 414, 418, 420, 428, 431, 460, 513, 514, 515, 517, 518, 521, 522, 523, 524, 525, 526, 528, 529, 530, 574, 597, 598, 599, 630, 632, 640, 661, 673, 717, 745, 762, 764, 776, 788, 793, 794, 797, 803, 812, 815, 817, 822, 836, 838, 839, 846, 849, 865, 867, 873, 874, 875, 876, 890, 902, 916, 917, 949, 954, 963, 977, 985, 1001, 1004, 1005, 1007, 1008, 1009, 1010], "decid": [4, 11, 54, 57, 67, 112, 230, 235, 238, 245, 340, 345, 360, 381, 383, 414, 421, 523, 524, 575, 599, 610, 611, 614, 615, 616, 617, 618, 619, 620, 624, 625, 626, 627, 635, 645, 648, 760, 807, 808, 809, 811, 813, 815, 816, 817, 828, 952, 959, 977, 1006, 1009], "treat": [4, 6, 67, 111, 121, 148, 153, 181, 247, 284, 289, 294, 299, 328, 345, 357, 359, 370, 380, 381, 406, 525, 526, 552, 553, 555, 571, 572, 596, 602, 609, 635, 638, 692, 693, 701, 717, 746, 747, 750, 751, 834, 835, 841, 842, 845, 846, 850, 853, 854, 856, 865, 866, 910, 943, 945, 949, 953, 954, 960, 963, 967, 969, 983, 997, 1005, 1009, 1010], "therebi": [4, 153, 377, 380, 945, 1003], "assumpt": [4, 9, 13, 24, 26, 33, 40, 73, 74, 90, 142, 146, 150, 152, 181, 183, 208, 234, 257, 278, 351, 357, 358, 362, 371, 372, 373, 375, 377, 378, 381, 383, 411, 415, 417, 452, 467, 476, 496, 498, 505, 614, 618, 761, 762, 765, 766, 776, 802, 857, 858, 947, 949, 953, 954, 955, 956, 958, 959, 960, 963, 966, 969, 974, 1000, 1006], "impli": [4, 137, 319, 320, 321, 378, 380, 383, 438, 537, 546, 574, 575, 586, 698, 889, 949, 950, 987, 1004], "give": [4, 12, 13, 14, 23, 24, 36, 41, 46, 57, 59, 61, 66, 67, 71, 89, 113, 137, 142, 146, 148, 153, 154, 170, 172, 178, 181, 182, 183, 208, 230, 235, 240, 247, 260, 264, 267, 276, 290, 291, 300, 332, 334, 340, 342, 343, 344, 345, 347, 351, 353, 357, 358, 359, 360, 367, 370, 371, 372, 373, 374, 375, 378, 380, 381, 383, 385, 398, 410, 411, 413, 415, 423, 436, 460, 463, 467, 497, 502, 513, 514, 515, 516, 521, 522, 528, 529, 530, 557, 558, 561, 571, 572, 602, 611, 625, 629, 640, 684, 693, 699, 702, 757, 762, 765, 766, 776, 786, 787, 788, 790, 805, 806, 807, 808, 809, 811, 813, 815, 816, 817, 842, 843, 845, 846, 854, 949, 953, 956, 957, 958, 960, 961, 963, 967, 968, 969, 972, 977, 978, 980, 985, 986, 987, 993, 997, 1000, 1001, 1003, 1004, 1005, 1007, 1009], "lot": [4, 77, 153, 185, 340, 345, 346, 347, 353, 378, 380, 765, 766, 857, 858, 942, 965, 967, 968, 972, 973, 977, 986, 987, 993, 998, 1000, 1001, 1002, 1003, 1005], "addit": [4, 5, 7, 12, 14, 15, 63, 67, 77, 83, 87, 90, 101, 105, 107, 108, 111, 112, 134, 142, 143, 144, 149, 153, 154, 160, 165, 170, 182, 183, 185, 205, 219, 240, 247, 252, 257, 278, 288, 289, 294, 298, 311, 321, 325, 328, 332, 333, 337, 338, 339, 340, 341, 343, 344, 345, 347, 350, 351, 353, 357, 358, 360, 363, 367, 372, 373, 375, 377, 378, 381, 382, 383, 384, 397, 405, 406, 408, 409, 410, 414, 421, 433, 438, 460, 467, 496, 498, 500, 501, 503, 505, 506, 507, 513, 517, 518, 521, 522, 523, 524, 525, 526, 528, 529, 530, 531, 532, 533, 534, 546, 547, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 575, 576, 583, 592, 594, 595, 599, 602, 603, 604, 605, 606, 607, 608, 609, 634, 651, 652, 656, 662, 663, 666, 705, 721, 722, 751, 755, 760, 761, 768, 784, 794, 796, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 817, 818, 819, 821, 828, 829, 830, 831, 834, 835, 837, 838, 839, 840, 842, 843, 844, 845, 847, 857, 858, 865, 866, 896, 902, 942, 947, 949, 953, 954, 956, 957, 960, 963, 965, 966, 967, 968, 969, 972, 978, 989, 993, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008], "level": [4, 9, 11, 12, 16, 26, 32, 38, 50, 87, 106, 110, 128, 135, 136, 137, 138, 141, 144, 146, 150, 153, 154, 192, 193, 194, 195, 196, 199, 208, 212, 213, 228, 238, 241, 247, 248, 264, 271, 305, 306, 308, 309, 311, 313, 315, 320, 327, 332, 340, 342, 343, 345, 347, 351, 357, 359, 362, 363, 364, 371, 378, 381, 383, 387, 418, 432, 457, 458, 460, 467, 485, 495, 500, 501, 509, 510, 511, 525, 526, 531, 532, 575, 579, 586, 587, 589, 630, 631, 632, 640, 641, 642, 651, 654, 656, 658, 664, 666, 680, 686, 691, 748, 786, 787, 788, 790, 793, 794, 821, 822, 823, 863, 878, 942, 949, 953, 954, 956, 961, 967, 969, 972, 973, 974, 987, 996, 1004, 1007, 1008, 1009], "one_hot_linear_pipelin": 4, "one_hot_tim": 4, "099": 4, "011": [4, 246, 258, 320, 351], "131": [4, 14, 53, 351, 953, 994], "rate": [4, 101, 105, 111, 130, 154, 181, 188, 199, 212, 218, 235, 238, 245, 247, 248, 274, 275, 276, 334, 345, 373, 374, 378, 382, 410, 430, 500, 517, 518, 523, 524, 525, 526, 556, 559, 560, 562, 563, 564, 570, 608, 609, 632, 640, 641, 642, 656, 662, 666, 690, 745, 752, 821, 822, 823, 859, 942, 949, 950, 953, 956, 957, 967, 969, 977, 997, 1001, 1002], "better": [4, 5, 9, 13, 19, 20, 23, 29, 47, 52, 70, 71, 73, 74, 75, 76, 80, 83, 87, 90, 104, 107, 112, 113, 114, 121, 130, 141, 142, 143, 145, 148, 155, 161, 165, 167, 170, 181, 182, 183, 189, 196, 198, 199, 205, 213, 214, 215, 218, 229, 232, 238, 240, 241, 244, 247, 248, 255, 257, 276, 282, 283, 291, 292, 307, 315, 319, 320, 321, 323, 328, 332, 340, 344, 345, 346, 347, 349, 350, 351, 353, 359, 362, 367, 369, 371, 373, 375, 377, 378, 379, 380, 381, 383, 413, 414, 502, 504, 511, 523, 524, 525, 526, 571, 572, 594, 635, 641, 656, 673, 688, 697, 702, 705, 726, 761, 790, 800, 801, 802, 803, 804, 805, 806, 811, 822, 823, 842, 843, 846, 854, 857, 858, 865, 866, 942, 943, 945, 946, 947, 949, 950, 952, 953, 955, 956, 957, 961, 963, 966, 967, 969, 973, 977, 980, 982, 987, 993, 994, 995, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010], "confirm": [4, 13, 80, 104, 111, 114, 155, 181, 183, 241, 244, 247, 283, 321, 349, 942, 963, 1001], "benefit": [4, 43, 53, 70, 71, 101, 112, 153, 195, 205, 211, 213, 260, 291, 332, 345, 354, 359, 371, 373, 412, 425, 432, 472, 531, 532, 622, 623, 630, 631, 632, 640, 641, 642, 796, 863, 865, 942, 948, 956, 963, 973, 977, 993, 996, 997, 998, 1005, 1006, 1007, 1008], "ad": [4, 14, 20, 71, 94, 96, 101, 107, 131, 137, 143, 144, 160, 165, 183, 185, 205, 214, 215, 238, 239, 240, 278, 288, 289, 290, 291, 292, 293, 294, 300, 311, 320, 344, 345, 347, 349, 351, 357, 359, 360, 378, 380, 381, 382, 383, 397, 405, 406, 407, 409, 411, 413, 416, 423, 426, 428, 432, 446, 447, 448, 449, 478, 486, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 511, 513, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 545, 546, 547, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 571, 572, 575, 577, 591, 592, 593, 594, 599, 602, 603, 604, 605, 606, 612, 614, 618, 622, 623, 633, 640, 642, 644, 652, 653, 656, 659, 677, 678, 692, 693, 738, 740, 746, 747, 750, 752, 760, 761, 762, 776, 786, 793, 803, 809, 814, 817, 821, 822, 823, 824, 825, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 857, 858, 862, 863, 865, 866, 873, 874, 875, 876, 892, 942, 946, 948, 949, 950, 954, 956, 957, 959, 973, 977, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "progress": [4, 7, 8, 87, 124, 135, 149, 174, 263, 291, 342, 345, 349, 350, 360, 364, 369, 373, 523, 524, 656, 794, 796, 799, 814, 822, 823, 977, 985, 987, 993, 995, 1002, 1007], "veri": [4, 13, 24, 26, 36, 37, 39, 41, 47, 49, 57, 59, 75, 76, 77, 79, 85, 90, 114, 119, 126, 142, 148, 153, 154, 155, 170, 181, 182, 183, 186, 189, 199, 205, 208, 214, 215, 218, 224, 240, 241, 244, 245, 247, 248, 253, 258, 275, 278, 290, 296, 299, 307, 311, 317, 319, 321, 328, 332, 340, 344, 345, 347, 350, 351, 353, 357, 358, 359, 367, 371, 373, 375, 377, 378, 379, 380, 381, 382, 383, 406, 411, 416, 426, 435, 436, 442, 464, 468, 474, 521, 522, 525, 526, 528, 529, 531, 532, 553, 554, 586, 614, 615, 618, 619, 620, 628, 646, 647, 649, 655, 656, 659, 669, 706, 709, 755, 760, 762, 770, 772, 776, 779, 782, 805, 806, 830, 834, 835, 836, 845, 857, 858, 867, 870, 873, 874, 875, 876, 902, 942, 945, 946, 948, 949, 950, 951, 952, 953, 956, 957, 959, 960, 961, 963, 965, 966, 967, 968, 969, 970, 971, 972, 973, 977, 985, 986, 993, 998, 999, 1001, 1004, 1006, 1008, 1009, 1010], "new": [4, 7, 8, 10, 47, 53, 55, 57, 66, 67, 83, 94, 101, 103, 105, 106, 107, 112, 114, 120, 121, 132, 135, 137, 143, 149, 155, 156, 181, 187, 195, 208, 237, 240, 245, 257, 262, 264, 284, 288, 291, 294, 297, 300, 306, 311, 328, 333, 334, 339, 340, 342, 343, 344, 347, 348, 349, 351, 353, 354, 358, 359, 360, 363, 371, 373, 374, 377, 378, 379, 380, 381, 382, 383, 384, 385, 391, 395, 397, 398, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 446, 447, 448, 449, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 464, 465, 466, 468, 469, 472, 473, 474, 476, 487, 490, 491, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 538, 545, 546, 547, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 664, 665, 666, 668, 672, 677, 678, 682, 685, 686, 687, 688, 690, 691, 692, 693, 694, 697, 702, 703, 704, 705, 706, 709, 716, 717, 720, 724, 729, 730, 732, 741, 745, 746, 747, 748, 750, 751, 752, 753, 754, 760, 761, 762, 763, 764, 765, 766, 768, 769, 771, 775, 776, 780, 783, 784, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 820, 821, 822, 823, 824, 825, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 851, 853, 854, 855, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 883, 885, 886, 888, 896, 897, 901, 902, 909, 910, 911, 912, 913, 916, 919, 921, 923, 928, 934, 940, 942, 943, 945, 949, 953, 954, 956, 957, 958, 959, 963, 965, 966, 967, 968, 973, 977, 978, 979, 982, 985, 987, 991, 995, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "minut": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 152, 153, 154, 155, 156, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 257, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 323, 324, 325, 326, 327, 340, 345, 950, 971], "1440": 4, "caus": [4, 24, 26, 114, 138, 153, 179, 181, 185, 186, 199, 257, 285, 311, 321, 328, 343, 350, 371, 373, 378, 379, 381, 383, 407, 411, 413, 423, 473, 496, 546, 553, 574, 575, 800, 801, 802, 804, 829, 838, 840, 843, 844, 885, 886, 942, 943, 949, 953, 961, 963, 966, 973, 978, 993, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1009, 1010, 1011], "signific": [4, 52, 107, 114, 130, 131, 150, 185, 199, 231, 238, 257, 258, 282, 319, 328, 339, 340, 357, 373, 376, 377, 380, 468, 496, 498, 513, 514, 591, 622, 623, 630, 631, 632, 640, 641, 642, 781, 790, 865, 867, 868, 869, 870, 871, 952, 953, 956, 974, 993, 995, 996, 997, 1001], "overfit": [4, 106, 112, 114, 150, 154, 155, 156, 160, 182, 185, 208, 226, 231, 233, 239, 243, 253, 273, 279, 280, 282, 283, 284, 285, 307, 315, 323, 325, 326, 340, 359, 371, 377, 380, 401, 452, 453, 525, 526, 531, 532, 621, 762, 765, 766, 776, 787, 788, 822, 823, 825, 840, 844, 948, 957, 959, 961, 963, 969, 974, 977, 985, 996], "avoid": [4, 7, 12, 13, 41, 54, 59, 68, 106, 107, 112, 153, 154, 183, 185, 190, 199, 204, 215, 218, 233, 239, 243, 266, 268, 269, 282, 283, 294, 303, 304, 320, 333, 343, 345, 346, 347, 349, 350, 351, 357, 359, 360, 363, 367, 371, 373, 375, 377, 380, 381, 384, 404, 406, 408, 416, 426, 432, 457, 458, 459, 463, 472, 473, 498, 503, 507, 549, 550, 598, 610, 611, 616, 617, 624, 625, 626, 627, 645, 648, 653, 655, 657, 659, 676, 755, 762, 763, 767, 773, 776, 786, 787, 788, 825, 828, 834, 835, 837, 842, 843, 844, 845, 848, 850, 851, 852, 853, 854, 855, 856, 858, 863, 902, 947, 950, 952, 953, 956, 957, 959, 961, 963, 968, 969, 973, 976, 987, 989, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "kbinsdiscret": [4, 50, 85, 150, 161, 181, 199, 219, 277, 280, 285, 292, 476, 621, 828, 844, 874, 963, 974, 1001, 1005, 1006, 1007, 1009], "re": [4, 8, 14, 25, 53, 66, 67, 101, 111, 140, 152, 199, 215, 225, 229, 241, 243, 247, 288, 319, 321, 333, 345, 346, 349, 353, 358, 360, 364, 371, 377, 381, 433, 434, 435, 436, 437, 438, 439, 440, 519, 520, 521, 522, 525, 526, 527, 528, 529, 530, 610, 616, 624, 626, 764, 779, 782, 873, 874, 875, 876, 949, 954, 956, 963, 968, 973, 977, 987, 993, 997, 998, 1000, 1002], "fine": [4, 34, 110, 135, 185, 197, 230, 236, 311, 325, 326, 342, 349, 359, 381, 410, 902, 921, 956, 959, 968, 973, 1003], "grain": [4, 29, 34, 213, 230, 280, 351, 381, 410, 921, 973], "still": [4, 13, 30, 41, 50, 52, 54, 59, 77, 83, 91, 109, 114, 121, 137, 143, 152, 153, 155, 156, 160, 165, 181, 183, 199, 213, 241, 247, 278, 289, 290, 293, 319, 320, 328, 334, 339, 344, 345, 347, 349, 350, 351, 353, 357, 359, 373, 377, 380, 381, 384, 404, 408, 418, 438, 460, 591, 596, 599, 601, 681, 719, 741, 744, 755, 756, 765, 766, 779, 782, 843, 845, 865, 883, 942, 943, 947, 949, 952, 953, 956, 959, 961, 968, 969, 971, 973, 976, 977, 993, 995, 998, 999, 1001, 1002, 1003, 1006, 1007, 1008, 1009], "express": [4, 7, 12, 101, 107, 137, 142, 153, 238, 239, 284, 289, 304, 311, 321, 339, 340, 345, 346, 351, 357, 373, 378, 379, 381, 414, 420, 421, 552, 553, 555, 680, 751, 762, 768, 776, 784, 786, 787, 788, 789, 792, 812, 945, 949, 953, 957, 963, 964, 969, 1001], "advantag": [4, 5, 36, 52, 54, 87, 92, 181, 182, 208, 225, 239, 257, 291, 328, 359, 371, 377, 378, 381, 383, 405, 409, 424, 498, 553, 613, 638, 639, 726, 793, 794, 795, 825, 826, 865, 866, 867, 868, 869, 870, 871, 942, 945, 948, 949, 950, 953, 954, 956, 957, 961, 963, 967, 968, 969, 996], "final": [4, 13, 25, 32, 37, 39, 52, 66, 67, 75, 77, 80, 84, 92, 101, 102, 104, 106, 111, 112, 115, 121, 124, 132, 142, 149, 152, 154, 156, 158, 160, 165, 169, 170, 178, 181, 183, 198, 199, 202, 208, 222, 228, 236, 244, 255, 258, 284, 285, 287, 288, 307, 311, 332, 334, 340, 343, 345, 346, 347, 349, 358, 359, 370, 371, 373, 374, 377, 380, 381, 382, 401, 406, 411, 412, 416, 423, 426, 428, 500, 519, 520, 531, 532, 534, 558, 591, 611, 617, 623, 643, 654, 658, 683, 762, 793, 794, 825, 826, 862, 865, 942, 943, 945, 949, 950, 953, 956, 959, 960, 963, 966, 977, 985, 998, 1001, 1002, 1003, 1004, 1006], "observ": [4, 5, 7, 9, 11, 13, 14, 16, 20, 23, 26, 32, 34, 37, 40, 50, 59, 67, 73, 75, 76, 77, 88, 89, 92, 94, 101, 104, 105, 107, 108, 114, 117, 120, 127, 128, 135, 137, 140, 142, 143, 144, 146, 153, 154, 155, 160, 161, 176, 177, 179, 181, 182, 183, 185, 195, 199, 205, 206, 211, 212, 218, 234, 238, 240, 241, 245, 258, 261, 264, 271, 283, 293, 299, 306, 307, 311, 312, 319, 320, 321, 325, 326, 340, 342, 359, 363, 371, 373, 375, 376, 377, 378, 379, 382, 383, 405, 407, 409, 410, 411, 413, 423, 424, 433, 434, 435, 436, 437, 438, 439, 440, 488, 496, 515, 516, 527, 574, 575, 610, 616, 621, 665, 680, 682, 721, 783, 803, 811, 844, 846, 949, 952, 953, 957, 958, 959, 960, 961, 963, 966, 967, 968, 969, 976, 979, 981, 982, 984, 994, 1006, 1007, 1008, 1009], "complet": [4, 34, 35, 36, 41, 46, 49, 55, 59, 80, 119, 130, 132, 135, 150, 155, 156, 187, 207, 208, 215, 218, 236, 283, 285, 287, 320, 328, 340, 345, 349, 350, 353, 357, 374, 377, 378, 380, 381, 405, 409, 413, 416, 426, 427, 428, 431, 459, 500, 501, 502, 503, 508, 510, 522, 533, 534, 545, 551, 552, 553, 555, 591, 592, 593, 594, 609, 613, 621, 635, 637, 668, 669, 679, 680, 681, 692, 694, 699, 700, 720, 749, 758, 793, 796, 799, 808, 824, 825, 826, 827, 888, 938, 942, 947, 949, 953, 954, 956, 968, 969, 974, 978, 987, 993, 996, 1000, 1001, 1002, 1003, 1004, 1005, 1006], "induct": [4, 33, 99, 114, 150, 359, 373, 380, 387, 405, 476, 528, 591, 595, 860, 861, 914, 937, 949, 966, 974, 995], "bia": [4, 26, 73, 89, 100, 108, 109, 114, 150, 153, 155, 160, 161, 163, 243, 273, 311, 315, 328, 340, 347, 359, 371, 375, 379, 380, 383, 488, 520, 523, 524, 571, 572, 578, 606, 612, 613, 622, 623, 633, 634, 644, 822, 823, 838, 840, 844, 850, 851, 853, 854, 855, 856, 874, 948, 949, 952, 953, 957, 958, 961, 967, 974, 985], "preserv": [4, 45, 92, 205, 212, 233, 347, 348, 372, 377, 378, 381, 545, 552, 553, 555, 610, 616, 660, 705, 737, 741, 780, 781, 782, 849, 885, 886, 943, 949, 950, 963, 965, 972, 982, 986, 993, 996, 997, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1011], "smooth": [4, 43, 44, 51, 135, 142, 174, 182, 197, 284, 307, 342, 360, 373, 379, 383, 412, 413, 501, 502, 503, 510, 521, 522, 523, 524, 528, 529, 530, 554, 555, 583, 586, 640, 800, 801, 802, 804, 842, 846, 854, 873, 874, 875, 876, 949, 955, 963, 967, 968, 969, 987], "local": [4, 9, 12, 20, 36, 49, 54, 58, 87, 90, 106, 107, 118, 135, 142, 143, 150, 154, 182, 195, 200, 203, 205, 208, 212, 218, 259, 267, 268, 306, 325, 326, 333, 342, 343, 345, 349, 351, 353, 363, 373, 378, 380, 381, 383, 411, 416, 426, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 466, 502, 504, 508, 511, 513, 523, 524, 527, 530, 574, 575, 652, 653, 654, 655, 656, 657, 659, 660, 721, 722, 808, 811, 814, 816, 826, 835, 858, 861, 869, 919, 921, 951, 952, 956, 957, 969, 974, 976, 986, 988, 989, 997, 1001, 1005, 1008], "attempt": [4, 51, 154, 177, 187, 233, 319, 332, 344, 359, 373, 385, 410, 414, 421, 432, 595, 652, 653, 657, 780, 807, 808, 809, 811, 813, 815, 816, 817, 843, 845, 863, 885, 886, 949, 950, 956, 969, 978, 1000, 1005, 1010], "each": [4, 7, 8, 10, 11, 12, 15, 17, 20, 24, 25, 26, 30, 32, 34, 38, 40, 41, 44, 46, 50, 52, 55, 57, 58, 66, 67, 69, 70, 71, 79, 80, 82, 83, 84, 85, 87, 88, 92, 94, 95, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 115, 117, 119, 120, 121, 122, 123, 124, 131, 133, 135, 139, 141, 146, 148, 149, 152, 153, 154, 156, 158, 160, 167, 168, 170, 175, 179, 181, 182, 183, 185, 186, 189, 196, 199, 202, 208, 209, 212, 213, 214, 215, 216, 218, 219, 220, 222, 224, 227, 229, 232, 233, 234, 236, 238, 239, 241, 243, 244, 247, 248, 255, 257, 258, 261, 263, 267, 269, 271, 273, 274, 276, 278, 279, 280, 281, 283, 284, 285, 287, 289, 290, 291, 293, 294, 296, 297, 298, 301, 307, 311, 313, 315, 320, 321, 323, 324, 327, 328, 332, 333, 334, 339, 340, 341, 342, 343, 345, 346, 347, 349, 350, 351, 353, 354, 357, 358, 359, 364, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 390, 391, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 421, 423, 424, 425, 427, 428, 429, 431, 433, 434, 435, 436, 437, 438, 439, 440, 442, 446, 447, 448, 449, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 483, 486, 487, 490, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 545, 546, 547, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 671, 672, 674, 677, 683, 688, 691, 692, 693, 701, 702, 708, 709, 711, 713, 714, 716, 717, 721, 722, 725, 726, 727, 728, 729, 731, 732, 733, 734, 736, 737, 739, 741, 742, 743, 744, 746, 747, 748, 750, 751, 753, 754, 755, 756, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 776, 777, 778, 780, 781, 782, 783, 784, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 854, 855, 856, 857, 858, 860, 861, 862, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 878, 879, 891, 896, 897, 902, 904, 905, 909, 910, 921, 929, 930, 931, 934, 943, 945, 947, 949, 950, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 963, 964, 965, 966, 967, 968, 969, 977, 978, 982, 984, 985, 986, 987, 993, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "sine": [4, 137, 142, 143, 150, 175, 187, 223, 224, 225, 226, 228, 229, 325, 341, 579, 760, 761, 952, 969, 974], "cosin": [4, 37, 252, 258, 263, 337, 340, 359, 373, 378, 379, 405, 409, 414, 421, 499, 554, 555, 584, 660, 723, 724, 725, 728, 733, 734, 737, 741, 742, 743, 805, 806, 810, 837, 956, 969, 989, 1003], "match": [4, 20, 34, 87, 88, 90, 93, 96, 107, 150, 158, 159, 181, 203, 211, 218, 251, 311, 321, 340, 343, 347, 349, 373, 378, 380, 381, 394, 413, 428, 430, 472, 473, 479, 490, 495, 501, 506, 512, 515, 531, 532, 536, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 591, 592, 593, 594, 622, 628, 629, 649, 650, 663, 667, 668, 669, 677, 679, 683, 697, 741, 742, 743, 749, 805, 806, 810, 814, 828, 829, 830, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 865, 872, 878, 889, 921, 950, 952, 953, 955, 956, 974, 975, 978, 987, 989, 993, 999, 1000, 1001, 1003, 1005, 1006, 1009], "togeth": [4, 12, 48, 57, 67, 110, 121, 137, 143, 153, 162, 202, 205, 218, 234, 284, 291, 310, 324, 328, 347, 349, 357, 358, 359, 367, 373, 380, 381, 382, 388, 415, 417, 531, 532, 558, 653, 679, 762, 776, 825, 826, 839, 949, 950, 954, 960, 963, 969, 970, 977, 979, 981, 999, 1010], "equival": [4, 15, 32, 52, 54, 111, 117, 134, 137, 142, 153, 165, 199, 229, 247, 258, 283, 311, 321, 328, 332, 343, 351, 354, 358, 359, 373, 374, 375, 376, 377, 378, 380, 382, 383, 405, 407, 408, 409, 410, 411, 413, 414, 421, 428, 433, 438, 473, 498, 505, 522, 525, 526, 527, 528, 529, 552, 555, 577, 580, 583, 585, 588, 610, 611, 612, 616, 618, 622, 623, 630, 631, 632, 633, 636, 640, 641, 644, 647, 651, 652, 657, 672, 673, 686, 697, 704, 705, 710, 711, 712, 724, 733, 742, 743, 760, 761, 765, 766, 770, 772, 796, 799, 807, 808, 809, 811, 813, 815, 816, 817, 818, 819, 822, 828, 834, 835, 837, 840, 841, 842, 843, 845, 853, 855, 856, 889, 900, 939, 942, 947, 949, 950, 951, 953, 959, 963, 967, 968, 969, 1001, 1002, 1003, 1004, 1006, 1007, 1010], "importantli": [4, 14, 88, 154, 158, 278, 373], "jump": [4, 182, 278, 342, 345, 381, 844], "functiontransform": [4, 66, 106, 181, 199, 300, 428, 429, 963, 998, 999, 1001, 1006, 1007, 1008, 1010], "sin_transform": 4, "return": [4, 6, 7, 8, 10, 11, 13, 14, 16, 17, 19, 23, 24, 26, 31, 32, 34, 37, 45, 50, 53, 58, 66, 71, 85, 94, 96, 99, 101, 104, 106, 113, 114, 117, 121, 135, 140, 143, 145, 149, 156, 160, 161, 169, 170, 173, 181, 182, 189, 190, 191, 199, 215, 218, 221, 222, 227, 229, 233, 234, 235, 236, 237, 238, 239, 241, 242, 245, 252, 258, 263, 268, 271, 276, 278, 280, 283, 287, 303, 307, 319, 321, 323, 327, 332, 338, 339, 340, 345, 346, 347, 351, 352, 354, 357, 359, 371, 372, 373, 374, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 885, 886, 888, 889, 890, 891, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 919, 920, 922, 923, 924, 925, 926, 927, 928, 934, 937, 938, 939, 940, 941, 943, 953, 956, 960, 961, 968, 969, 973, 978, 983, 985, 987, 990, 993, 994, 995, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "lambda": [4, 7, 8, 10, 13, 19, 53, 69, 113, 161, 199, 238, 239, 282, 300, 369, 373, 378, 380, 381, 608, 609, 610, 611, 829, 841, 945, 949, 963, 982, 1001, 1007], "sin": [4, 14, 19, 36, 88, 102, 113, 114, 118, 120, 130, 137, 143, 144, 146, 160, 161, 165, 175, 182, 187, 203, 214, 230, 270, 279, 288, 294, 314, 325, 326, 383, 480, 579, 663, 727, 986], "pi": [4, 14, 32, 36, 37, 88, 96, 118, 120, 130, 137, 161, 165, 169, 175, 182, 203, 224, 225, 226, 229, 230, 252, 271, 288, 294, 326, 363, 379, 383, 480, 481, 482, 579, 606, 947, 948, 949, 955, 986], "cos_transform": 4, "co": [4, 12, 14, 18, 20, 36, 37, 66, 118, 120, 142, 150, 153, 182, 203, 238, 252, 291, 300, 319, 320, 321, 326, 349, 379, 381, 413, 415, 417, 452, 475, 555, 663, 683, 727, 758, 948, 963, 974, 977, 988, 989], "effect": [4, 6, 26, 34, 36, 37, 42, 43, 50, 54, 59, 62, 65, 69, 80, 90, 92, 101, 112, 114, 116, 118, 121, 134, 137, 138, 142, 144, 150, 151, 153, 154, 156, 165, 176, 181, 182, 183, 185, 186, 187, 198, 200, 203, 205, 211, 218, 222, 225, 229, 234, 238, 239, 240, 243, 246, 247, 258, 276, 277, 279, 282, 288, 295, 307, 311, 312, 315, 316, 317, 319, 320, 321, 328, 333, 345, 347, 350, 357, 359, 371, 373, 374, 378, 379, 380, 381, 383, 384, 401, 407, 408, 410, 411, 413, 414, 429, 433, 434, 435, 436, 437, 438, 439, 440, 442, 446, 447, 448, 454, 460, 464, 478, 488, 489, 497, 498, 502, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 545, 546, 552, 553, 554, 555, 558, 570, 573, 574, 575, 599, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 651, 654, 655, 656, 665, 667, 716, 748, 760, 763, 764, 767, 769, 771, 773, 780, 781, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 810, 811, 812, 815, 816, 822, 823, 825, 828, 829, 830, 831, 832, 834, 835, 837, 841, 842, 843, 844, 845, 846, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 885, 886, 902, 919, 927, 942, 947, 949, 950, 952, 953, 954, 960, 961, 963, 966, 968, 969, 974, 983, 985, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "expans": [4, 148, 289, 414, 840, 1002], "synthet": [4, 14, 24, 26, 29, 32, 34, 39, 46, 108, 114, 119, 137, 142, 144, 154, 171, 183, 198, 273, 280, 315, 328, 332, 338, 348, 360, 373, 375, 382, 622, 623, 865, 866, 872, 947, 985, 986, 999], "beyond": [4, 26, 182, 183, 332, 334, 344, 345, 357, 371, 380, 692, 693, 701, 746, 747, 750, 870, 950, 954, 963, 968, 973, 1001], "pd": [4, 12, 13, 24, 67, 68, 69, 101, 107, 108, 114, 118, 142, 148, 152, 153, 154, 155, 156, 160, 165, 170, 181, 185, 189, 199, 219, 222, 229, 236, 238, 239, 241, 249, 250, 255, 283, 284, 285, 290, 291, 315, 319, 320, 350, 359, 374, 428, 430, 591, 592, 593, 594, 596, 741, 883, 885, 886, 942, 943, 960, 963, 1004, 1006, 1007, 1008, 1010], "hour_df": 4, "arang": [4, 11, 13, 14, 16, 37, 55, 57, 62, 69, 74, 75, 94, 97, 110, 111, 113, 115, 116, 119, 123, 131, 137, 139, 144, 145, 148, 149, 156, 165, 181, 184, 186, 190, 204, 211, 213, 233, 238, 241, 246, 249, 257, 258, 271, 273, 280, 290, 296, 297, 299, 301, 307, 314, 319, 321, 325, 326, 327, 328, 357, 370, 377, 381, 429, 508, 791, 840, 844, 948, 949, 957, 963, 967, 983], "reshap": [4, 5, 6, 14, 16, 23, 30, 43, 44, 45, 47, 48, 50, 51, 55, 68, 75, 79, 87, 90, 96, 104, 109, 110, 119, 128, 133, 137, 139, 140, 141, 142, 143, 144, 146, 160, 172, 178, 194, 195, 197, 198, 202, 204, 206, 208, 213, 217, 228, 236, 262, 264, 271, 273, 275, 276, 279, 280, 281, 285, 287, 290, 291, 293, 294, 301, 306, 307, 312, 313, 316, 317, 357, 370, 378, 380, 381, 409, 429, 548, 595, 695, 791, 840, 844, 949, 963, 969, 983, 986, 998], "hour_sin": 4, "fit_transform": [4, 5, 6, 10, 12, 15, 19, 41, 46, 49, 50, 55, 59, 83, 88, 91, 97, 119, 158, 172, 197, 199, 201, 202, 203, 204, 205, 206, 211, 212, 215, 216, 222, 258, 262, 274, 278, 279, 283, 284, 285, 287, 290, 292, 293, 294, 307, 319, 320, 321, 328, 337, 340, 347, 350, 351, 359, 369, 374, 378, 381, 382, 389, 397, 406, 407, 409, 411, 413, 428, 430, 432, 446, 447, 448, 449, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 513, 530, 531, 532, 533, 534, 545, 546, 547, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 591, 592, 593, 594, 599, 602, 603, 604, 605, 606, 652, 653, 654, 655, 656, 660, 809, 814, 817, 821, 824, 825, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 857, 858, 863, 943, 945, 949, 954, 956, 963, 964, 965, 978, 983, 986, 987, 997, 998, 999, 1001, 1002, 1003, 1005, 1007, 1009, 1010], "hour_co": 4, "2d": [4, 31, 33, 36, 41, 44, 45, 46, 50, 53, 58, 59, 82, 83, 86, 88, 91, 97, 119, 133, 150, 175, 182, 187, 201, 202, 203, 206, 208, 211, 212, 267, 304, 307, 327, 339, 341, 345, 347, 354, 359, 373, 374, 378, 381, 383, 405, 416, 426, 428, 431, 445, 452, 454, 455, 456, 457, 458, 464, 465, 466, 468, 474, 478, 497, 505, 513, 548, 550, 599, 607, 621, 636, 655, 701, 742, 786, 790, 794, 832, 881, 885, 886, 901, 916, 939, 940, 947, 949, 950, 953, 960, 964, 969, 974, 978, 984, 993, 997, 1000, 1001, 1002, 1005, 1007], "scatter": [4, 9, 11, 12, 16, 23, 28, 29, 32, 35, 36, 39, 40, 41, 42, 46, 49, 53, 54, 55, 56, 57, 59, 64, 75, 80, 84, 85, 89, 91, 92, 93, 95, 102, 103, 107, 110, 117, 119, 120, 122, 128, 130, 137, 138, 139, 141, 143, 144, 145, 146, 152, 153, 158, 161, 164, 171, 173, 177, 178, 179, 182, 183, 184, 190, 193, 194, 195, 198, 201, 202, 203, 204, 205, 206, 208, 213, 214, 216, 224, 225, 226, 227, 228, 229, 230, 233, 239, 241, 252, 258, 261, 264, 265, 266, 267, 268, 269, 270, 273, 278, 280, 281, 283, 291, 298, 301, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 316, 317, 319, 324, 325, 326, 375, 595, 665, 921, 947, 949, 985, 986], "color": [4, 6, 7, 8, 9, 10, 11, 12, 13, 16, 20, 23, 24, 25, 26, 29, 31, 32, 33, 35, 37, 39, 41, 43, 44, 46, 50, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 73, 74, 75, 76, 77, 80, 83, 84, 85, 87, 88, 89, 90, 91, 93, 94, 95, 96, 101, 102, 107, 110, 111, 113, 116, 117, 118, 119, 121, 123, 126, 128, 137, 139, 140, 141, 142, 143, 144, 145, 146, 149, 150, 153, 155, 156, 160, 161, 163, 164, 165, 166, 168, 169, 170, 171, 173, 175, 177, 179, 181, 182, 183, 184, 185, 186, 187, 190, 191, 192, 193, 195, 198, 199, 202, 203, 204, 206, 208, 212, 213, 214, 216, 219, 224, 225, 226, 227, 228, 229, 230, 233, 237, 239, 241, 242, 243, 244, 245, 247, 248, 249, 251, 257, 260, 263, 264, 265, 266, 269, 270, 271, 273, 278, 279, 280, 282, 283, 284, 288, 294, 298, 299, 301, 305, 306, 307, 308, 309, 311, 313, 314, 315, 316, 324, 325, 339, 340, 342, 353, 373, 380, 381, 411, 457, 458, 470, 547, 548, 742, 927, 967, 969, 974, 998, 1003, 1005, 1010], "map": [4, 5, 10, 11, 17, 19, 25, 50, 80, 92, 105, 113, 116, 119, 137, 150, 158, 181, 201, 203, 207, 215, 218, 239, 242, 247, 266, 269, 271, 277, 278, 300, 307, 311, 313, 320, 321, 339, 340, 346, 357, 359, 364, 371, 372, 373, 374, 377, 378, 380, 381, 387, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 428, 429, 433, 434, 435, 436, 437, 438, 439, 440, 446, 447, 448, 449, 460, 462, 466, 473, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 545, 546, 547, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 574, 575, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 599, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 652, 653, 654, 655, 656, 725, 728, 760, 761, 762, 765, 766, 773, 774, 776, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 821, 822, 823, 824, 825, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 853, 854, 857, 858, 860, 861, 862, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 907, 910, 911, 942, 945, 950, 953, 955, 965, 968, 969, 974, 982, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1010], "space": [4, 8, 10, 19, 29, 43, 45, 50, 54, 55, 57, 58, 60, 62, 66, 67, 70, 80, 87, 89, 95, 97, 106, 110, 114, 119, 132, 135, 137, 143, 158, 165, 182, 201, 202, 203, 205, 212, 213, 214, 218, 219, 225, 230, 246, 249, 250, 258, 267, 268, 280, 289, 311, 319, 320, 321, 327, 328, 332, 337, 340, 341, 342, 345, 352, 357, 358, 359, 370, 372, 373, 376, 378, 379, 380, 381, 383, 407, 411, 412, 413, 416, 426, 428, 429, 430, 431, 446, 447, 448, 462, 496, 498, 499, 502, 503, 504, 505, 507, 508, 513, 537, 546, 552, 553, 555, 574, 575, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 596, 597, 602, 604, 605, 606, 607, 652, 653, 654, 656, 657, 658, 660, 663, 762, 765, 766, 768, 776, 784, 795, 805, 806, 813, 814, 815, 816, 825, 830, 831, 837, 842, 857, 858, 859, 878, 906, 945, 946, 947, 948, 949, 951, 953, 954, 956, 957, 958, 959, 963, 964, 965, 966, 967, 968, 969, 972, 973, 978, 985, 987, 988, 989, 993, 994, 996, 1001, 1002, 1003, 1007, 1008, 1009], "akin": [4, 182, 359], "sort": [4, 8, 10, 12, 19, 20, 23, 57, 66, 99, 104, 111, 114, 120, 135, 160, 165, 181, 182, 199, 217, 238, 239, 242, 252, 270, 314, 319, 325, 326, 345, 349, 353, 354, 359, 377, 380, 381, 383, 498, 505, 519, 530, 545, 574, 581, 661, 676, 682, 692, 693, 701, 717, 746, 747, 750, 752, 762, 788, 800, 801, 802, 803, 804, 805, 806, 813, 815, 816, 817, 820, 830, 836, 838, 839, 842, 844, 846, 854, 867, 870, 902, 907, 949, 956, 959, 963, 977, 987, 993, 997, 1003, 1004, 1005, 1007, 1008, 1011], "analog": [4, 19, 116, 351, 380, 953, 954, 968, 1002], "clock": 4, "25th": [4, 218, 843], "back": [4, 92, 220, 333, 343, 345, 347, 360, 367, 374, 381, 398, 407, 410, 411, 423, 446, 447, 448, 472, 473, 497, 498, 499, 502, 504, 505, 508, 545, 594, 622, 623, 630, 631, 632, 640, 641, 642, 691, 830, 832, 833, 834, 838, 839, 840, 842, 843, 845, 857, 858, 865, 949, 953, 957, 973, 978, 987, 996, 1001, 1003, 1004, 1007], "natur": [4, 29, 107, 114, 144, 153, 154, 158, 165, 181, 182, 198, 199, 205, 218, 224, 230, 247, 257, 319, 345, 347, 359, 378, 380, 381, 384, 408, 414, 421, 515, 554, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 591, 656, 668, 704, 718, 720, 807, 808, 809, 811, 813, 815, 816, 817, 844, 900, 949, 950, 952, 953, 956, 958, 963, 967, 972, 993, 1001], "sp": [4, 153, 294, 943, 986], "c": [4, 6, 7, 8, 11, 12, 16, 19, 23, 24, 26, 28, 29, 32, 36, 37, 39, 40, 42, 49, 53, 54, 56, 57, 58, 62, 67, 68, 70, 80, 83, 84, 85, 92, 93, 101, 103, 104, 110, 111, 117, 119, 120, 122, 123, 128, 133, 135, 138, 139, 140, 141, 145, 158, 164, 166, 171, 172, 173, 174, 176, 178, 179, 188, 190, 192, 193, 194, 195, 197, 198, 201, 202, 203, 205, 206, 213, 214, 216, 220, 225, 227, 228, 229, 230, 232, 233, 235, 236, 237, 238, 241, 243, 247, 249, 258, 261, 263, 264, 266, 267, 268, 269, 270, 271, 273, 274, 276, 278, 279, 280, 283, 287, 288, 289, 290, 291, 292, 293, 294, 298, 301, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 319, 324, 325, 326, 332, 333, 339, 340, 342, 343, 345, 346, 347, 348, 350, 353, 354, 357, 363, 364, 370, 371, 373, 374, 375, 376, 377, 378, 380, 382, 386, 401, 406, 407, 410, 411, 413, 423, 432, 439, 487, 492, 498, 502, 504, 505, 511, 513, 514, 554, 571, 572, 574, 595, 603, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 634, 636, 637, 643, 649, 650, 652, 653, 656, 657, 672, 678, 679, 682, 694, 698, 704, 705, 721, 722, 762, 776, 784, 790, 792, 800, 801, 802, 803, 804, 805, 806, 812, 814, 821, 836, 838, 839, 840, 844, 846, 860, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 876, 880, 885, 886, 916, 942, 945, 946, 948, 949, 950, 951, 953, 955, 956, 958, 960, 963, 965, 967, 968, 969, 972, 977, 978, 982, 983, 985, 986, 993, 994, 996, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1009], "colorbar": [4, 11, 28, 37, 87, 97, 109, 117, 133, 138, 140, 141, 143, 154, 201, 212, 228, 249, 278, 307, 661, 1005], "cyclic_cossin_transform": 4, "month_sin": 4, "month_co": 4, "weekday_sin": 4, "weekday_co": 4, "cyclic_cossin_linear_pipelin": 4, "125": [4, 13, 50, 75, 90, 290, 498, 942, 953, 963], "166": [4, 178, 276, 351, 953, 974, 993], "simpl": [4, 16, 26, 52, 67, 71, 73, 79, 80, 87, 107, 112, 144, 150, 154, 165, 182, 198, 221, 239, 255, 259, 262, 271, 291, 303, 319, 321, 324, 328, 343, 345, 347, 348, 349, 350, 352, 357, 358, 359, 360, 364, 370, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 387, 394, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 426, 429, 433, 434, 435, 436, 437, 438, 439, 440, 446, 447, 448, 449, 478, 486, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 545, 546, 547, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 574, 575, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 599, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 652, 653, 654, 655, 656, 749, 751, 760, 761, 762, 765, 766, 776, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 821, 822, 823, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 857, 858, 860, 861, 862, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 909, 945, 947, 948, 949, 950, 952, 953, 956, 963, 965, 967, 969, 973, 974, 977, 978, 987, 990, 993], "wors": [4, 80, 101, 138, 154, 187, 238, 246, 257, 283, 328, 371, 373, 383, 396, 429, 446, 447, 448, 516, 518, 520, 522, 524, 526, 529, 532, 534, 574, 575, 599, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 624, 625, 626, 627, 628, 629, 631, 633, 634, 636, 637, 642, 643, 644, 669, 685, 686, 687, 691, 748, 798, 799, 808, 816, 823, 866, 868, 871, 874, 876, 953, 963, 1002], "further": [4, 24, 39, 67, 73, 80, 87, 104, 110, 112, 134, 137, 142, 153, 155, 160, 165, 201, 206, 215, 235, 238, 239, 245, 292, 307, 320, 327, 332, 345, 357, 359, 372, 373, 375, 378, 380, 381, 383, 416, 426, 479, 496, 499, 546, 578, 586, 592, 622, 623, 630, 631, 632, 640, 641, 642, 655, 659, 700, 737, 741, 744, 755, 756, 801, 807, 808, 815, 816, 843, 845, 865, 867, 870, 902, 952, 953, 955, 956, 957, 959, 961, 963, 967, 968, 985, 987, 1002, 1006], "analyz": [4, 7, 17, 165, 240, 247, 292, 319, 321, 350, 351, 373, 381, 467, 552, 553, 555, 751, 950, 953, 960, 961, 969, 987, 993, 1002], "reason": [4, 8, 12, 39, 50, 66, 114, 135, 153, 154, 158, 181, 182, 189, 199, 208, 212, 213, 215, 218, 235, 238, 239, 244, 255, 258, 279, 283, 320, 321, 328, 332, 333, 334, 340, 344, 345, 347, 349, 353, 357, 358, 359, 360, 373, 374, 375, 378, 380, 381, 472, 496, 538, 602, 610, 616, 618, 636, 651, 656, 726, 762, 776, 809, 814, 821, 840, 862, 942, 943, 948, 949, 950, 953, 955, 956, 957, 959, 963, 967, 968, 977, 987, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "disappoint": 4, "outcom": [4, 107, 153, 359, 380, 533, 622, 673, 705, 757, 793, 860, 861, 862, 867, 870, 949, 953, 969, 976, 987, 997, 1001, 1003], "altern": [4, 25, 67, 80, 108, 109, 115, 121, 155, 165, 181, 199, 209, 227, 230, 247, 287, 311, 319, 320, 321, 328, 340, 348, 349, 351, 357, 359, 360, 363, 368, 370, 371, 373, 374, 375, 377, 378, 380, 381, 383, 405, 406, 409, 410, 411, 416, 422, 427, 463, 502, 504, 505, 511, 517, 518, 521, 522, 523, 524, 528, 529, 530, 546, 552, 553, 555, 581, 584, 607, 656, 670, 672, 734, 737, 741, 744, 764, 794, 829, 835, 838, 851, 858, 860, 873, 874, 875, 876, 920, 921, 947, 949, 950, 952, 953, 956, 957, 961, 963, 965, 966, 968, 969, 973, 982, 987, 989, 998, 1000, 1006, 1007], "larger": [4, 7, 26, 34, 36, 39, 44, 52, 75, 77, 85, 96, 104, 115, 138, 143, 144, 149, 153, 154, 158, 161, 165, 196, 197, 198, 206, 212, 214, 224, 230, 239, 241, 247, 248, 255, 258, 260, 273, 274, 276, 278, 307, 311, 320, 321, 338, 340, 345, 351, 359, 370, 371, 373, 374, 375, 377, 378, 380, 381, 383, 404, 407, 413, 414, 416, 418, 420, 479, 491, 505, 508, 525, 526, 527, 531, 532, 546, 553, 607, 616, 636, 637, 638, 639, 643, 651, 656, 668, 683, 699, 760, 810, 811, 842, 844, 845, 846, 854, 859, 901, 902, 924, 927, 945, 946, 949, 950, 952, 953, 956, 957, 961, 963, 967, 968, 985, 987, 997, 998, 1001, 1002, 1003, 1006, 1007, 1010], "periodic_spline_transform": 4, "n_spline": [4, 844], "degre": [4, 16, 32, 89, 103, 142, 148, 152, 154, 158, 160, 165, 169, 170, 182, 185, 214, 220, 224, 225, 226, 229, 230, 238, 252, 276, 289, 290, 304, 311, 314, 378, 382, 410, 416, 462, 499, 505, 603, 604, 607, 620, 738, 760, 762, 811, 840, 844, 867, 868, 869, 870, 871, 945, 946, 948, 949, 950, 951, 953, 954, 956, 959, 960, 963, 966, 968, 985, 996, 1002, 1006, 1007, 1010], "n_knot": [4, 182, 290, 844, 963, 1006], "include_bia": [4, 160, 252, 840, 844, 1007], "knot": [4, 182, 290, 844, 963, 1006], "linspac": [4, 8, 10, 11, 14, 23, 25, 34, 35, 37, 39, 46, 52, 75, 76, 88, 96, 102, 114, 137, 138, 140, 141, 142, 143, 144, 146, 154, 160, 161, 163, 165, 171, 175, 181, 182, 183, 187, 191, 192, 193, 194, 195, 199, 206, 208, 211, 212, 214, 216, 228, 238, 240, 241, 245, 246, 247, 248, 252, 263, 264, 270, 271, 279, 281, 291, 292, 306, 307, 310, 312, 313, 315, 316, 317, 595, 596, 768, 789, 805, 806, 986], "again": [4, 20, 64, 68, 114, 141, 143, 145, 153, 205, 239, 319, 328, 349, 354, 359, 360, 373, 374, 375, 380, 381, 436, 531, 532, 598, 611, 615, 617, 619, 625, 627, 629, 656, 942, 949, 953, 967, 990, 993, 1001, 1010], "splines_df": 4, "spline_": 4, "shape": [4, 5, 6, 8, 9, 10, 11, 13, 14, 16, 17, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 38, 43, 44, 45, 48, 49, 50, 51, 52, 55, 57, 58, 63, 66, 70, 71, 75, 87, 88, 90, 102, 107, 108, 109, 110, 111, 114, 115, 116, 119, 120, 128, 131, 133, 138, 139, 141, 143, 144, 148, 149, 150, 154, 155, 169, 170, 181, 183, 188, 190, 193, 194, 195, 196, 197, 200, 202, 203, 204, 208, 211, 212, 213, 214, 215, 217, 218, 224, 226, 228, 229, 230, 236, 238, 240, 241, 244, 245, 247, 248, 258, 263, 264, 268, 271, 273, 275, 280, 281, 287, 289, 292, 293, 294, 298, 299, 301, 304, 307, 310, 311, 312, 313, 316, 317, 319, 320, 327, 332, 338, 339, 340, 345, 347, 359, 370, 371, 373, 375, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 394, 395, 396, 397, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 726, 727, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 882, 887, 890, 891, 896, 900, 902, 904, 907, 915, 917, 922, 924, 928, 929, 930, 931, 932, 933, 934, 943, 948, 949, 953, 954, 955, 956, 957, 959, 963, 964, 965, 966, 967, 968, 969, 974, 983, 984, 986, 987, 993, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1007, 1009, 1010], "concat": [4, 13, 148, 152, 170, 199, 838], "cmap": [4, 5, 6, 11, 12, 14, 16, 20, 21, 28, 29, 30, 32, 36, 37, 43, 44, 47, 48, 50, 51, 55, 75, 77, 82, 87, 90, 93, 97, 103, 109, 110, 128, 133, 140, 141, 154, 160, 164, 165, 172, 173, 190, 193, 194, 195, 197, 202, 203, 204, 212, 213, 217, 232, 233, 258, 262, 264, 266, 267, 269, 271, 273, 275, 276, 278, 280, 296, 297, 301, 303, 304, 305, 306, 307, 308, 309, 312, 313, 316, 317, 324, 661, 983, 984], "cm": [4, 6, 11, 12, 14, 16, 20, 21, 23, 28, 29, 30, 35, 36, 43, 44, 46, 47, 48, 49, 50, 51, 52, 55, 57, 58, 64, 75, 77, 82, 87, 90, 93, 103, 109, 110, 128, 133, 140, 141, 154, 164, 173, 190, 193, 194, 197, 202, 203, 204, 209, 212, 213, 217, 222, 232, 233, 258, 261, 262, 264, 268, 271, 273, 275, 276, 278, 280, 289, 292, 296, 297, 301, 303, 304, 305, 307, 308, 309, 313, 316, 317, 324, 342, 374, 661, 878, 953, 963, 969, 983, 984], "tab20b": 4, "stai": [4, 13, 25, 34, 96, 153, 320, 344, 345, 349, 359, 360, 958, 976, 999], "midnight": 4, "fewer": [4, 14, 25, 52, 101, 110, 112, 181, 332, 346, 373, 382, 383, 412, 425, 517, 558, 660, 795, 906, 949, 954, 956, 998, 999, 1000], "most": [4, 6, 8, 12, 14, 19, 23, 26, 49, 50, 52, 59, 73, 79, 80, 95, 101, 107, 108, 115, 121, 130, 131, 132, 134, 135, 142, 149, 152, 153, 154, 155, 156, 158, 165, 181, 182, 199, 215, 219, 224, 230, 235, 236, 241, 245, 246, 248, 255, 257, 267, 278, 284, 285, 287, 290, 293, 297, 307, 311, 319, 320, 321, 328, 332, 333, 334, 340, 341, 343, 345, 347, 349, 350, 351, 353, 357, 359, 360, 363, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 407, 408, 410, 414, 420, 421, 424, 432, 460, 467, 485, 488, 496, 498, 503, 507, 513, 515, 525, 526, 530, 531, 552, 553, 555, 557, 568, 575, 591, 594, 613, 622, 636, 638, 640, 642, 651, 652, 656, 659, 688, 691, 709, 721, 722, 726, 748, 757, 760, 761, 765, 766, 781, 793, 794, 807, 808, 809, 811, 813, 814, 815, 816, 817, 840, 842, 850, 851, 853, 854, 855, 856, 863, 901, 902, 904, 916, 921, 942, 943, 947, 948, 949, 950, 951, 952, 953, 954, 956, 959, 960, 961, 966, 967, 968, 969, 971, 972, 973, 977, 983, 985, 986, 987, 995, 996, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1008, 1010], "cyclic_spline_transform": 4, "cyclic_month": 4, "cyclic_weekdai": 4, "cyclic_hour": 4, "cyclic_spline_linear_pipelin": 4, "097": [4, 38, 135, 342, 974], "132": [4, 8, 14, 53, 140, 380, 974], "013": [4, 132, 246, 320, 974], "successfulli": [4, 14, 282, 344, 349, 373, 381, 967], "reduc": [4, 7, 39, 42, 43, 44, 45, 50, 67, 68, 73, 104, 114, 116, 119, 132, 153, 160, 161, 165, 179, 185, 186, 189, 210, 212, 215, 218, 239, 245, 255, 267, 280, 283, 284, 292, 320, 321, 328, 337, 339, 342, 345, 351, 357, 359, 371, 372, 373, 375, 377, 378, 380, 381, 382, 384, 408, 409, 414, 421, 424, 457, 498, 508, 513, 519, 520, 521, 522, 527, 528, 529, 530, 537, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 571, 572, 574, 591, 607, 616, 636, 637, 638, 639, 651, 656, 659, 744, 762, 765, 766, 768, 776, 784, 786, 787, 788, 789, 792, 834, 835, 842, 854, 857, 858, 865, 866, 873, 874, 875, 876, 942, 945, 947, 948, 949, 950, 953, 956, 965, 966, 968, 970, 978, 986, 993, 995, 996, 997, 998, 999, 1002, 1003, 1004, 1005, 1007, 1009], "choic": [4, 7, 37, 43, 52, 62, 66, 73, 94, 137, 138, 144, 148, 170, 182, 218, 232, 236, 238, 241, 263, 285, 289, 319, 320, 328, 332, 343, 347, 350, 363, 373, 375, 377, 379, 380, 382, 383, 416, 426, 435, 436, 437, 438, 439, 440, 442, 502, 504, 505, 511, 523, 602, 611, 612, 620, 622, 623, 625, 633, 644, 656, 669, 705, 794, 807, 808, 813, 815, 816, 842, 845, 854, 856, 865, 866, 889, 942, 947, 949, 950, 951, 952, 953, 954, 959, 961, 966, 967, 968, 969, 1000, 1003, 1004, 1008, 1009], "arbitrari": [4, 52, 80, 87, 88, 89, 106, 144, 160, 181, 198, 199, 236, 278, 282, 284, 289, 319, 327, 333, 345, 357, 359, 374, 377, 378, 380, 381, 385, 410, 414, 419, 421, 429, 496, 497, 523, 524, 545, 603, 612, 633, 644, 652, 705, 752, 763, 764, 769, 771, 805, 806, 807, 808, 809, 811, 813, 815, 816, 817, 818, 819, 829, 831, 844, 942, 944, 945, 949, 950, 953, 956, 963, 973, 987, 993, 994, 997, 999, 1000, 1001, 1003, 1007, 1009], "held": [4, 8, 67, 94, 115, 155, 189, 226, 241, 246, 257, 380, 523, 524, 525, 526, 665, 762, 765, 766, 776, 822, 823, 835, 942, 943, 952, 961, 987], "point": [4, 9, 11, 13, 14, 16, 25, 29, 34, 35, 37, 38, 45, 46, 49, 52, 55, 57, 61, 64, 75, 76, 79, 83, 84, 85, 86, 88, 90, 92, 101, 103, 107, 110, 111, 112, 119, 135, 139, 144, 145, 150, 153, 154, 155, 160, 164, 170, 173, 175, 177, 179, 181, 182, 183, 185, 187, 190, 193, 194, 198, 199, 201, 202, 203, 204, 205, 208, 211, 213, 226, 230, 232, 235, 239, 240, 245, 247, 248, 257, 258, 261, 262, 263, 264, 265, 266, 267, 269, 271, 273, 279, 280, 282, 284, 296, 297, 301, 303, 307, 308, 309, 311, 312, 316, 317, 319, 320, 321, 324, 328, 332, 333, 334, 339, 340, 341, 342, 343, 344, 345, 347, 349, 350, 351, 353, 357, 359, 360, 372, 373, 378, 379, 380, 381, 384, 385, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 416, 418, 419, 420, 421, 422, 424, 425, 433, 436, 438, 462, 468, 476, 478, 479, 483, 486, 489, 494, 497, 499, 505, 516, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 574, 575, 592, 595, 596, 597, 601, 602, 603, 608, 609, 615, 619, 621, 634, 635, 637, 639, 640, 642, 643, 646, 647, 652, 653, 654, 655, 656, 657, 658, 665, 670, 671, 674, 677, 681, 686, 688, 694, 699, 700, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 727, 742, 743, 753, 754, 760, 761, 762, 776, 786, 795, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 822, 823, 830, 835, 844, 859, 860, 861, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 879, 883, 945, 947, 949, 950, 951, 952, 953, 954, 955, 956, 957, 959, 960, 963, 965, 966, 968, 969, 972, 973, 974, 982, 985, 986, 987, 993, 994, 995, 997, 999, 1000, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "naive_linear_predict": 4, "one_hot_linear_predict": 4, "cyclic_cossin_linear_predict": 4, "cyclic_spline_linear_predict": 4, "zoom": [4, 106, 278], "insight": [4, 7, 153, 154, 182, 183, 199, 275, 278, 319, 327, 371, 762, 765, 766, 776, 788, 960, 969, 977], "last_hour": [4, 13], "slice": [4, 13, 17, 110, 190, 203, 206, 213, 266, 269, 290, 291, 303, 340, 346, 347, 354, 374, 428, 431, 457, 458, 472, 510, 603, 737, 741, 744, 881, 905, 906, 924, 1005, 1007], "suptitl": [4, 5, 13, 15, 30, 31, 32, 36, 37, 47, 50, 54, 57, 64, 71, 87, 90, 97, 101, 110, 111, 118, 121, 146, 153, 154, 156, 175, 180, 196, 197, 201, 202, 203, 217, 227, 234, 276, 278, 280, 287, 289, 296, 297, 301, 314, 315, 324], "label": [4, 6, 7, 9, 11, 12, 13, 14, 16, 20, 23, 24, 25, 26, 28, 30, 31, 35, 37, 39, 40, 42, 43, 44, 45, 46, 48, 49, 52, 53, 55, 57, 60, 61, 62, 63, 64, 69, 71, 73, 74, 75, 76, 79, 80, 84, 85, 89, 91, 93, 94, 95, 96, 101, 102, 103, 104, 105, 112, 113, 114, 115, 116, 117, 118, 120, 121, 124, 131, 137, 138, 142, 143, 144, 145, 146, 148, 150, 153, 156, 158, 160, 161, 163, 164, 165, 169, 170, 171, 175, 181, 182, 183, 184, 187, 188, 189, 190, 191, 195, 196, 198, 199, 202, 203, 204, 208, 213, 214, 216, 218, 219, 226, 232, 233, 236, 237, 239, 240, 241, 242, 244, 247, 248, 249, 250, 251, 252, 257, 263, 265, 267, 270, 274, 276, 278, 279, 283, 287, 288, 291, 294, 295, 299, 300, 301, 309, 311, 314, 315, 319, 320, 323, 324, 325, 326, 334, 337, 338, 339, 344, 345, 347, 350, 354, 359, 360, 370, 371, 383, 384, 390, 391, 395, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 423, 425, 426, 429, 433, 451, 452, 453, 457, 458, 459, 460, 466, 467, 472, 473, 476, 478, 479, 483, 486, 487, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 531, 533, 534, 556, 557, 558, 559, 560, 562, 563, 564, 568, 569, 570, 573, 574, 595, 622, 623, 630, 631, 632, 637, 638, 639, 640, 641, 642, 661, 662, 664, 666, 667, 668, 669, 671, 673, 674, 676, 677, 678, 679, 680, 681, 682, 684, 688, 689, 690, 692, 693, 694, 697, 698, 699, 700, 701, 702, 703, 704, 706, 717, 718, 719, 720, 745, 746, 747, 749, 750, 751, 752, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 768, 769, 771, 776, 777, 778, 780, 781, 782, 784, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 811, 812, 814, 815, 822, 823, 825, 829, 832, 833, 836, 838, 839, 846, 849, 860, 861, 862, 865, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 879, 885, 890, 891, 916, 917, 924, 942, 949, 950, 954, 955, 956, 957, 959, 960, 963, 967, 968, 969, 972, 974, 975, 978, 982, 983, 985, 986, 987, 989, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "actual": [4, 13, 26, 43, 57, 71, 80, 107, 135, 158, 170, 181, 185, 189, 226, 234, 241, 321, 328, 332, 334, 342, 343, 345, 347, 350, 351, 357, 358, 359, 371, 373, 378, 381, 382, 398, 473, 479, 480, 491, 499, 502, 504, 511, 526, 527, 608, 609, 612, 622, 623, 630, 631, 632, 633, 634, 636, 638, 640, 641, 642, 644, 651, 655, 659, 665, 668, 673, 679, 685, 686, 687, 748, 760, 765, 766, 781, 782, 811, 842, 865, 871, 893, 894, 895, 928, 945, 952, 953, 956, 960, 961, 976, 1000, 1001, 1007, 1008, 1009], "black": [4, 9, 10, 11, 13, 25, 32, 41, 46, 52, 53, 75, 76, 85, 87, 110, 130, 137, 138, 142, 143, 146, 149, 153, 154, 160, 169, 170, 171, 173, 177, 181, 182, 183, 187, 190, 193, 194, 199, 208, 218, 224, 227, 263, 273, 274, 276, 301, 317, 324, 325, 326, 345, 363, 366, 373, 380, 383, 519, 520, 595, 959, 960, 969, 972, 978], "One": [4, 9, 12, 23, 28, 46, 52, 84, 92, 94, 109, 111, 114, 117, 150, 153, 156, 159, 185, 190, 196, 208, 219, 229, 238, 245, 248, 255, 264, 267, 279, 294, 302, 304, 320, 332, 342, 345, 358, 359, 373, 376, 378, 379, 380, 381, 382, 384, 408, 413, 436, 438, 442, 476, 530, 595, 603, 622, 630, 632, 637, 639, 640, 641, 751, 769, 770, 793, 794, 795, 826, 827, 838, 869, 916, 943, 945, 949, 950, 951, 952, 953, 954, 956, 957, 960, 961, 963, 968, 974, 975, 989, 997, 999, 1006, 1008], "legend": [4, 7, 8, 9, 11, 13, 23, 25, 31, 34, 37, 58, 68, 69, 71, 73, 74, 75, 76, 79, 80, 83, 89, 91, 94, 95, 96, 101, 102, 103, 104, 105, 107, 112, 113, 114, 115, 116, 117, 118, 120, 121, 123, 124, 131, 137, 138, 142, 143, 144, 145, 146, 153, 154, 158, 160, 161, 163, 166, 169, 170, 171, 175, 181, 182, 183, 184, 187, 188, 189, 190, 191, 194, 195, 196, 198, 199, 204, 211, 212, 213, 214, 216, 219, 226, 233, 235, 237, 238, 240, 241, 242, 243, 245, 248, 250, 251, 252, 255, 261, 263, 264, 265, 270, 274, 279, 283, 288, 291, 294, 298, 306, 309, 311, 314, 319, 323, 324, 325, 326, 664, 983, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "draw": [4, 7, 16, 57, 146, 153, 177, 219, 240, 245, 307, 352, 376, 378, 379, 380, 519, 520, 521, 522, 527, 528, 529, 530, 575, 598, 665, 768, 784, 877, 879, 952, 972, 981, 1006, 1007], "conclus": [4, 92, 153, 155, 181, 183, 238, 240, 328, 380, 981], "abovproblemat": [4, 234, 374, 943, 1001], "captur": [4, 9, 12, 13, 34, 36, 80, 114, 118, 130, 142, 153, 160, 165, 181, 185, 230, 257, 288, 307, 311, 353, 373, 380, 381, 382, 535, 552, 553, 555, 811, 920, 953, 958, 966, 970, 985, 1005], "big": [4, 41, 57, 59, 186, 202, 218, 230, 333, 345, 351, 360, 375, 381, 385, 502, 525, 526, 528, 529, 768, 789, 800, 801, 802, 803, 804, 973, 977, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "goe": [4, 34, 106, 327, 343, 345, 380, 435, 436, 442, 521, 522, 528, 529, 530, 873, 874, 875, 876, 963, 967], "artifact": [4, 14, 43, 44, 278, 334, 349], "discontinu": [4, 357], "fail": [4, 51, 63, 88, 94, 145, 146, 160, 165, 185, 215, 238, 287, 333, 343, 345, 347, 348, 353, 360, 363, 376, 377, 404, 436, 438, 640, 641, 642, 822, 823, 884, 896, 942, 950, 993, 994, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1010], "intra": [4, 552, 555, 755, 756], "variat": [4, 7, 12, 34, 62, 85, 118, 135, 142, 143, 149, 150, 153, 186, 223, 225, 230, 235, 249, 257, 268, 288, 307, 342, 377, 378, 407, 411, 423, 500, 607, 636, 638, 639, 760, 761, 780, 781, 783, 942, 953, 963, 966, 969, 972, 974, 983, 985, 988, 989, 996, 998, 999], "harmon": [4, 34, 245, 320, 373, 499, 505, 692, 693, 699, 746, 758, 953], "phase": [4, 165, 175, 332, 591, 945, 950, 956, 977, 1001, 1003], "potenti": [4, 52, 73, 149, 152, 154, 160, 264, 265, 273, 293, 294, 311, 321, 332, 333, 343, 359, 363, 364, 373, 377, 380, 381, 432, 446, 447, 448, 449, 460, 488, 513, 521, 522, 525, 526, 528, 529, 537, 570, 575, 598, 726, 855, 856, 863, 873, 874, 875, 876, 959, 967, 969, 972, 987, 996, 1003, 1004, 1007, 1010], "fix": [4, 8, 20, 24, 32, 43, 67, 96, 106, 107, 110, 137, 138, 142, 145, 153, 165, 183, 199, 218, 230, 241, 273, 287, 288, 289, 290, 291, 292, 293, 294, 320, 332, 333, 339, 341, 343, 344, 345, 347, 348, 353, 357, 359, 360, 364, 373, 374, 377, 378, 380, 381, 383, 416, 426, 436, 468, 476, 495, 501, 504, 506, 512, 513, 523, 524, 528, 529, 552, 555, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 594, 617, 627, 632, 634, 648, 651, 655, 659, 671, 748, 760, 776, 783, 807, 808, 810, 813, 815, 816, 832, 835, 849, 873, 874, 902, 920, 942, 949, 952, 953, 956, 963, 973, 987, 991, 992, 994, 995, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1011], "two": [4, 7, 9, 11, 15, 20, 23, 25, 28, 32, 34, 36, 37, 40, 52, 57, 61, 66, 67, 71, 75, 79, 80, 83, 84, 85, 87, 89, 90, 92, 95, 100, 101, 102, 109, 110, 111, 112, 114, 117, 118, 119, 122, 132, 135, 137, 138, 139, 140, 143, 144, 148, 149, 150, 153, 154, 155, 160, 164, 165, 169, 170, 171, 172, 177, 181, 182, 183, 189, 190, 193, 198, 199, 203, 205, 206, 208, 213, 215, 216, 218, 224, 225, 226, 228, 229, 230, 233, 235, 239, 245, 255, 261, 263, 266, 267, 269, 271, 278, 280, 283, 287, 288, 290, 291, 298, 303, 304, 307, 308, 309, 311, 316, 319, 320, 321, 324, 328, 338, 339, 340, 341, 342, 343, 345, 347, 349, 351, 352, 353, 357, 359, 360, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 405, 406, 407, 408, 409, 411, 414, 415, 416, 417, 421, 423, 428, 433, 434, 435, 436, 437, 438, 439, 440, 452, 454, 455, 456, 457, 458, 460, 462, 464, 465, 466, 467, 468, 469, 471, 474, 478, 483, 486, 500, 502, 504, 508, 511, 513, 514, 517, 524, 534, 545, 548, 554, 555, 556, 559, 560, 562, 563, 564, 565, 566, 567, 570, 571, 572, 574, 575, 584, 585, 588, 592, 595, 596, 603, 607, 609, 634, 635, 637, 656, 663, 667, 668, 669, 676, 679, 680, 683, 685, 686, 687, 694, 695, 698, 699, 701, 704, 706, 717, 718, 720, 726, 727, 734, 737, 740, 741, 742, 743, 744, 748, 749, 757, 758, 759, 760, 794, 805, 806, 807, 808, 809, 811, 813, 815, 816, 817, 822, 823, 829, 830, 837, 838, 839, 840, 859, 860, 861, 865, 866, 873, 875, 876, 916, 932, 933, 939, 942, 943, 945, 947, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 963, 965, 966, 967, 968, 969, 970, 974, 978, 982, 985, 986, 987, 990, 993, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "onc": [4, 8, 47, 132, 135, 137, 202, 215, 218, 236, 239, 255, 258, 284, 287, 291, 319, 321, 327, 328, 332, 334, 339, 340, 343, 345, 349, 350, 351, 352, 353, 358, 359, 360, 373, 374, 376, 377, 378, 380, 381, 382, 383, 413, 415, 417, 436, 472, 473, 502, 508, 515, 523, 524, 554, 555, 561, 575, 583, 591, 611, 615, 617, 619, 625, 627, 629, 630, 631, 632, 640, 641, 642, 661, 676, 680, 682, 699, 744, 763, 767, 770, 780, 800, 801, 802, 803, 804, 877, 949, 950, 956, 963, 967, 968, 969, 978, 987, 990, 993, 1001, 1003, 1004, 1005, 1006, 1010], "specif": [4, 11, 12, 20, 26, 32, 41, 52, 59, 62, 66, 68, 107, 121, 142, 145, 150, 153, 154, 158, 185, 199, 233, 238, 255, 278, 287, 288, 292, 311, 319, 320, 321, 328, 332, 333, 340, 345, 348, 350, 351, 353, 357, 359, 363, 369, 372, 373, 374, 377, 378, 380, 381, 382, 383, 397, 460, 467, 498, 515, 521, 528, 531, 532, 533, 534, 538, 552, 555, 557, 576, 577, 578, 579, 581, 582, 583, 584, 586, 587, 589, 604, 607, 610, 611, 616, 622, 636, 651, 661, 663, 676, 677, 709, 762, 763, 764, 769, 770, 771, 776, 788, 801, 894, 896, 897, 916, 929, 930, 931, 947, 949, 950, 952, 953, 955, 956, 958, 960, 961, 963, 967, 969, 970, 971, 987, 989, 993, 997, 1001, 1002, 1003, 1004, 1007, 1008, 1010], "furthermor": [4, 13, 34, 107, 143, 154, 155, 218, 219, 221, 258, 319, 320, 332, 334, 352, 373, 378, 380, 381, 526, 554, 570, 583, 668, 699, 709, 718, 720, 758, 865, 949, 961, 996, 1000], "enforc": [4, 12, 32, 50, 87, 142, 175, 267, 332, 345, 375, 378, 380, 390, 396, 472, 491, 495, 501, 503, 506, 507, 509, 510, 512, 521, 522, 525, 526, 528, 529, 829, 844, 873, 874, 875, 876, 885, 886, 943, 950, 995, 1001, 1003, 1005, 1009], "behav": [4, 12, 49, 54, 185, 233, 278, 289, 307, 328, 345, 351, 357, 358, 373, 374, 377, 845, 949, 963, 968, 970, 973, 987, 993, 1000, 1002, 1006, 1007], "similarli": [4, 12, 34, 52, 85, 117, 154, 156, 165, 170, 181, 209, 218, 238, 273, 278, 293, 307, 328, 333, 341, 343, 347, 350, 359, 370, 376, 377, 381, 692, 693, 701, 746, 747, 750, 948, 950, 951, 953, 960, 967, 968, 970, 978, 982, 1001, 1007, 1009], "spiki": 4, "instanc": [4, 8, 10, 13, 23, 25, 26, 50, 53, 55, 104, 132, 135, 149, 154, 155, 164, 165, 210, 215, 218, 234, 236, 247, 249, 250, 269, 287, 294, 301, 303, 304, 310, 311, 319, 320, 321, 331, 332, 333, 339, 340, 342, 343, 344, 345, 347, 349, 350, 351, 353, 354, 357, 359, 363, 364, 370, 371, 373, 374, 377, 378, 380, 381, 382, 383, 384, 385, 387, 397, 398, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 421, 422, 423, 424, 426, 428, 429, 433, 434, 435, 436, 437, 438, 439, 440, 446, 447, 448, 449, 452, 455, 456, 459, 460, 461, 467, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 541, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 571, 572, 574, 575, 584, 591, 592, 593, 594, 596, 598, 599, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 671, 684, 692, 693, 701, 734, 737, 741, 742, 743, 744, 746, 747, 750, 751, 752, 755, 756, 760, 761, 762, 764, 765, 766, 767, 768, 769, 771, 774, 776, 777, 778, 779, 780, 781, 782, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 854, 857, 858, 860, 861, 862, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 878, 885, 886, 888, 896, 897, 901, 902, 909, 910, 911, 912, 921, 922, 923, 924, 927, 937, 938, 942, 943, 949, 950, 953, 955, 956, 959, 961, 963, 967, 968, 969, 973, 978, 985, 986, 987, 989, 993, 996, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "shorter": [4, 143, 227, 357, 373, 378, 414, 421, 527, 661, 955, 959, 987, 1004], "necessarili": [4, 29, 68, 90, 153, 181, 189, 199, 213, 214, 225, 280, 319, 320, 339, 349, 369, 371, 373, 380, 591, 813, 815, 816, 817, 947, 950, 952, 953], "59": [4, 13, 39, 158, 165, 199, 203, 312, 342, 351, 373, 374, 474, 953, 993], "37": [4, 165, 241, 296, 327, 340, 380, 488, 680, 845, 856, 963, 993], "creat": [4, 5, 8, 11, 13, 16, 20, 21, 25, 26, 28, 30, 32, 34, 36, 38, 40, 41, 43, 46, 49, 55, 57, 59, 67, 68, 75, 80, 83, 89, 92, 103, 106, 110, 111, 112, 114, 117, 120, 133, 134, 137, 139, 142, 143, 144, 146, 149, 152, 154, 160, 162, 164, 167, 177, 182, 183, 193, 194, 203, 213, 215, 218, 219, 221, 229, 233, 234, 236, 238, 248, 266, 268, 269, 280, 282, 283, 287, 290, 291, 301, 303, 304, 308, 309, 312, 315, 316, 317, 321, 323, 325, 326, 328, 333, 340, 341, 343, 344, 345, 347, 349, 350, 351, 352, 353, 354, 358, 359, 363, 371, 373, 374, 377, 379, 380, 381, 383, 402, 415, 417, 429, 430, 463, 479, 480, 481, 482, 510, 517, 519, 520, 521, 522, 523, 524, 527, 528, 529, 530, 552, 553, 555, 561, 592, 594, 595, 596, 597, 661, 662, 664, 665, 666, 745, 752, 762, 764, 768, 772, 776, 780, 784, 786, 787, 795, 826, 838, 867, 870, 873, 874, 875, 876, 880, 883, 905, 906, 912, 921, 926, 938, 943, 949, 952, 953, 954, 956, 960, 963, 964, 965, 967, 968, 969, 972, 973, 977, 983, 985, 986, 990, 993, 994, 996, 999, 1003, 1006, 1007, 1008, 1009, 1010], "turn": [4, 30, 73, 148, 149, 153, 165, 196, 197, 213, 238, 262, 321, 332, 333, 334, 340, 357, 359, 360, 372, 373, 374, 376, 378, 381, 382, 383, 545, 546, 553, 571, 572, 794, 798, 867, 870, 888, 943, 947, 955, 958, 963, 977, 987, 998, 1000, 1001, 1006], "downstream": [4, 75, 285, 321, 381, 495, 498, 501, 505, 506, 570, 838, 963, 1003], "freedom": [4, 89, 142, 169, 170, 172, 238, 505, 620, 760, 949, 996], "underfit": [4, 32, 114, 137, 150, 155, 182, 185, 231, 253, 273, 284, 315, 380, 621, 762, 765, 766, 776, 787, 788, 825, 840, 948, 949, 974], "approxim": [4, 5, 26, 31, 43, 50, 75, 91, 92, 96, 105, 113, 114, 135, 138, 153, 161, 177, 181, 182, 195, 199, 203, 206, 207, 208, 211, 214, 230, 238, 243, 252, 259, 260, 267, 278, 280, 281, 283, 287, 290, 319, 321, 325, 326, 328, 337, 342, 354, 357, 359, 370, 371, 374, 376, 377, 378, 380, 383, 385, 386, 387, 397, 413, 433, 434, 437, 438, 439, 440, 446, 447, 448, 455, 460, 466, 485, 488, 497, 498, 499, 500, 502, 503, 504, 505, 507, 508, 509, 510, 511, 523, 524, 546, 553, 574, 575, 583, 602, 603, 604, 605, 606, 621, 622, 623, 636, 638, 640, 641, 643, 651, 656, 721, 722, 727, 760, 763, 780, 786, 790, 791, 805, 806, 809, 813, 815, 816, 817, 821, 825, 826, 831, 835, 837, 838, 842, 854, 865, 870, 871, 901, 902, 927, 946, 947, 948, 949, 950, 952, 956, 957, 958, 959, 960, 961, 965, 967, 968, 969, 972, 973, 974, 987, 989, 993, 994, 997, 998, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1007], "especi": [4, 8, 13, 52, 53, 111, 114, 153, 181, 215, 284, 292, 320, 328, 333, 339, 345, 353, 357, 359, 371, 373, 381, 407, 413, 465, 502, 521, 522, 523, 524, 528, 529, 530, 610, 611, 612, 614, 616, 617, 618, 622, 623, 624, 625, 626, 627, 633, 644, 659, 669, 709, 800, 801, 802, 803, 804, 873, 874, 875, 876, 949, 955, 956, 963, 977, 996, 1001, 1005, 1006, 1007], "sharp": [4, 154, 960, 963], "rush": [4, 13, 345], "flatter": [4, 24], "accur": [4, 9, 13, 21, 24, 25, 75, 87, 116, 137, 144, 153, 154, 185, 196, 199, 238, 245, 249, 255, 291, 319, 320, 328, 344, 371, 373, 375, 378, 380, 381, 382, 401, 407, 411, 415, 417, 423, 495, 502, 504, 506, 507, 509, 510, 511, 571, 572, 598, 765, 766, 805, 806, 901, 902, 945, 950, 953, 969, 1007], "tend": [4, 12, 26, 34, 36, 40, 49, 52, 54, 135, 153, 154, 170, 181, 186, 199, 224, 227, 235, 239, 257, 276, 311, 321, 332, 334, 345, 347, 359, 371, 373, 375, 378, 380, 382, 401, 412, 617, 811, 842, 854, 902, 949, 950, 956, 969, 987], "under": [4, 7, 11, 23, 24, 26, 38, 64, 73, 74, 94, 111, 114, 154, 181, 208, 218, 238, 245, 247, 248, 279, 293, 339, 345, 347, 349, 351, 353, 359, 363, 367, 371, 373, 375, 377, 378, 381, 382, 410, 415, 417, 434, 435, 436, 437, 438, 439, 440, 496, 503, 505, 507, 618, 619, 620, 666, 670, 671, 672, 679, 705, 717, 751, 752, 760, 761, 810, 909, 949, 950, 951, 953, 956, 963, 967, 968, 969, 972, 973, 987, 993, 995, 996, 998, 1001, 1005], "These": [4, 5, 7, 26, 48, 87, 89, 106, 110, 150, 154, 170, 181, 182, 183, 209, 245, 255, 258, 262, 276, 278, 285, 286, 291, 297, 299, 328, 332, 333, 338, 341, 342, 345, 347, 349, 352, 354, 357, 359, 363, 367, 370, 371, 372, 373, 376, 378, 380, 381, 382, 383, 406, 410, 412, 462, 472, 473, 479, 502, 531, 532, 566, 567, 632, 640, 641, 663, 670, 696, 741, 757, 762, 765, 766, 768, 776, 784, 786, 787, 788, 789, 790, 792, 810, 811, 830, 942, 944, 947, 949, 950, 953, 954, 964, 966, 968, 972, 978, 982, 987, 993, 999, 1001, 1002, 1003, 1006, 1010], "systemat": [4, 238, 347, 676, 691, 953, 1008], "reveal": [4, 13, 153, 155, 319, 351, 370, 950, 1009], "form": [4, 9, 19, 30, 39, 57, 64, 87, 124, 144, 145, 150, 153, 214, 215, 230, 238, 296, 328, 339, 342, 345, 347, 349, 359, 360, 370, 372, 373, 376, 377, 378, 379, 380, 381, 383, 385, 387, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 420, 423, 427, 428, 429, 431, 433, 434, 435, 436, 437, 438, 439, 440, 446, 447, 448, 449, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 534, 545, 546, 547, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 599, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 649, 651, 652, 653, 654, 655, 656, 657, 663, 760, 761, 762, 765, 766, 767, 770, 772, 776, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 821, 822, 823, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 857, 858, 860, 861, 862, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 891, 910, 913, 942, 944, 946, 947, 949, 950, 953, 954, 957, 958, 959, 963, 968, 972, 978, 985, 999, 1003, 1005], "explain": [4, 5, 12, 53, 69, 79, 80, 95, 114, 137, 142, 143, 154, 155, 181, 199, 208, 215, 230, 248, 251, 284, 319, 320, 333, 343, 345, 349, 357, 367, 369, 376, 378, 383, 457, 485, 488, 498, 505, 508, 513, 589, 612, 620, 633, 644, 685, 686, 687, 691, 748, 949, 956, 969, 971, 972, 983, 985, 986, 1004, 1006, 1007], "lack": [4, 311, 345, 347, 357, 377, 790, 880, 968, 1007], "deriv": [4, 19, 96, 97, 113, 142, 145, 155, 169, 170, 174, 182, 333, 340, 347, 375, 377, 379, 380, 381, 383, 385, 405, 409, 410, 429, 497, 570, 581, 586, 612, 633, 640, 644, 822, 823, 838, 844, 865, 866, 947, 949, 950, 953, 957, 959, 968, 993, 994, 995, 1000, 1001, 1002, 1008], "address": [4, 45, 185, 319, 340, 345, 373, 381, 411, 621, 949, 950, 955, 956, 957, 958, 959, 963, 977, 985, 1001], "section": [4, 34, 87, 92, 104, 112, 121, 126, 127, 128, 142, 146, 152, 153, 154, 156, 160, 165, 169, 170, 183, 205, 209, 215, 218, 220, 236, 238, 241, 247, 283, 284, 285, 289, 319, 320, 321, 328, 338, 340, 343, 345, 346, 347, 349, 350, 351, 352, 353, 360, 364, 367, 371, 372, 374, 376, 377, 378, 380, 381, 382, 383, 403, 407, 423, 498, 578, 583, 586, 601, 609, 751, 761, 867, 870, 942, 947, 949, 953, 954, 956, 957, 959, 960, 967, 968, 970, 971, 985, 987, 993, 995, 996, 997, 1000], "margin": [4, 12, 16, 24, 26, 84, 103, 138, 139, 140, 141, 142, 143, 150, 153, 154, 159, 192, 216, 218, 238, 255, 278, 284, 302, 303, 305, 306, 307, 309, 311, 316, 342, 371, 372, 378, 380, 383, 476, 574, 575, 595, 609, 640, 698, 794, 842, 854, 867, 870, 949, 953, 955, 959, 960, 963, 967, 968, 974, 985, 1000, 1002], "construct": [4, 11, 66, 68, 101, 103, 105, 109, 121, 135, 199, 209, 215, 220, 222, 271, 279, 281, 288, 291, 339, 342, 347, 354, 359, 373, 374, 377, 378, 380, 381, 384, 398, 405, 406, 408, 409, 414, 416, 421, 427, 429, 431, 483, 499, 505, 508, 519, 520, 545, 551, 603, 652, 654, 655, 776, 805, 806, 807, 808, 809, 811, 813, 815, 816, 817, 824, 825, 826, 827, 829, 870, 884, 886, 901, 902, 911, 912, 916, 942, 943, 945, 949, 950, 953, 954, 956, 963, 966, 968, 969, 973, 978, 982, 998, 1000, 1001, 1004, 1007], "polynomialfeatur": [4, 160, 181, 182, 187, 220, 252, 289, 311, 844, 949, 963, 997, 1001, 1002, 1003, 1006, 1007, 1009, 1010], "coars": [4, 110, 351, 412, 425], "explicitli": [4, 43, 108, 137, 144, 148, 149, 182, 211, 215, 294, 311, 321, 328, 333, 339, 341, 345, 346, 347, 349, 357, 359, 364, 369, 377, 381, 383, 499, 513, 514, 543, 544, 561, 591, 612, 622, 623, 633, 644, 673, 690, 745, 751, 752, 765, 766, 796, 799, 805, 806, 831, 855, 856, 921, 942, 943, 945, 947, 949, 950, 953, 955, 956, 963, 977, 987, 993, 996, 997, 998, 999, 1000, 1001, 1002, 1005, 1006, 1007], "too": [4, 7, 12, 13, 17, 41, 47, 52, 54, 59, 66, 70, 77, 91, 114, 148, 155, 165, 182, 185, 202, 212, 218, 225, 232, 236, 245, 253, 275, 284, 307, 319, 325, 326, 332, 342, 345, 351, 353, 357, 359, 373, 375, 377, 380, 381, 382, 385, 401, 413, 502, 552, 555, 643, 656, 671, 800, 801, 802, 803, 804, 830, 843, 845, 948, 950, 952, 953, 955, 956, 960, 985, 994, 997, 1000, 1001, 1002, 1003, 1005], "mani": [4, 7, 10, 19, 52, 53, 70, 73, 77, 101, 107, 108, 109, 110, 115, 131, 135, 155, 181, 201, 212, 225, 232, 238, 245, 246, 250, 258, 278, 283, 284, 287, 288, 289, 290, 291, 293, 294, 319, 328, 332, 334, 340, 342, 344, 345, 358, 359, 360, 363, 364, 370, 371, 373, 374, 375, 378, 380, 381, 382, 383, 385, 467, 517, 518, 521, 522, 523, 524, 528, 529, 530, 552, 555, 570, 573, 591, 603, 614, 618, 622, 623, 630, 631, 632, 640, 641, 642, 656, 659, 737, 741, 762, 766, 776, 822, 823, 838, 843, 845, 865, 873, 874, 875, 876, 942, 943, 945, 949, 950, 952, 953, 954, 955, 956, 959, 960, 963, 966, 968, 970, 971, 972, 973, 977, 985, 987, 993, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1007, 1008, 1009, 1010], "featureunion": [4, 70, 337, 359, 364, 372, 428, 593, 827, 943, 973, 977, 989, 994, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009], "hour_workday_interact": 4, "interaction_onli": [4, 840, 949, 963], "combin": [4, 12, 13, 20, 24, 26, 58, 66, 67, 69, 70, 71, 83, 87, 95, 96, 100, 111, 112, 116, 124, 137, 143, 148, 149, 150, 153, 165, 181, 185, 198, 199, 205, 208, 210, 213, 234, 238, 239, 247, 249, 250, 267, 274, 284, 289, 290, 292, 310, 311, 321, 324, 332, 337, 341, 342, 345, 350, 358, 359, 370, 371, 372, 373, 374, 377, 378, 379, 380, 381, 382, 383, 385, 386, 409, 428, 430, 431, 437, 439, 440, 443, 444, 445, 453, 460, 472, 473, 479, 485, 488, 490, 495, 501, 502, 504, 506, 511, 513, 524, 526, 529, 531, 532, 574, 578, 580, 585, 588, 594, 598, 607, 610, 611, 616, 617, 622, 623, 624, 625, 626, 627, 630, 632, 636, 637, 638, 639, 640, 642, 643, 645, 648, 656, 665, 693, 751, 762, 765, 766, 773, 774, 786, 788, 792, 809, 824, 825, 826, 830, 838, 839, 840, 845, 865, 927, 942, 945, 946, 949, 953, 954, 956, 959, 963, 966, 967, 969, 970, 974, 977, 983, 985, 987, 993, 998, 1001, 1004, 1005, 1006, 1008, 1009], "previou": [4, 40, 50, 67, 87, 104, 111, 112, 114, 121, 137, 142, 143, 152, 153, 154, 165, 167, 182, 212, 214, 215, 238, 241, 245, 278, 283, 291, 319, 320, 321, 328, 332, 340, 345, 347, 350, 351, 353, 357, 359, 360, 363, 373, 380, 381, 432, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 594, 610, 612, 616, 617, 622, 624, 626, 630, 631, 632, 633, 640, 641, 642, 644, 671, 781, 796, 799, 814, 822, 823, 862, 879, 949, 953, 957, 963, 973, 978, 987, 993, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "nice": [4, 64, 182, 215, 278, 332, 378, 987], "cyclic_spline_interactions_pipelin": 4, "078": [4, 300, 974], "009": [4, 351], "104": [4, 13, 23, 57, 974], "highlight": [4, 13, 15, 52, 67, 75, 85, 99, 105, 106, 118, 135, 137, 138, 143, 148, 149, 154, 155, 158, 181, 182, 183, 199, 210, 215, 220, 221, 222, 233, 250, 255, 260, 282, 284, 319, 321, 345, 349, 350, 353, 357, 383, 407, 410, 411, 428, 431, 454, 455, 460, 465, 466, 468, 476, 479, 485, 488, 502, 505, 525, 526, 528, 529, 531, 563, 566, 592, 594, 596, 598, 604, 610, 612, 616, 622, 633, 644, 652, 665, 666, 681, 695, 711, 751, 758, 762, 763, 765, 766, 768, 776, 784, 787, 788, 791, 807, 809, 826, 830, 835, 838, 839, 840, 844, 845, 846, 862, 863, 865, 870, 873, 874, 897, 950, 953, 961, 963, 968, 974, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "anoth": [4, 34, 87, 92, 101, 112, 116, 135, 137, 145, 149, 153, 170, 185, 189, 206, 208, 215, 219, 225, 238, 240, 241, 244, 248, 268, 319, 321, 323, 328, 332, 334, 339, 340, 343, 345, 347, 351, 357, 359, 364, 367, 370, 373, 377, 378, 380, 381, 382, 384, 406, 408, 416, 419, 426, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 472, 502, 504, 511, 637, 640, 656, 673, 683, 768, 784, 824, 825, 846, 942, 943, 948, 949, 950, 953, 954, 956, 959, 963, 967, 968, 978, 985, 986, 987, 1002, 1003, 1010], "either": [4, 10, 28, 67, 107, 110, 111, 153, 169, 171, 209, 218, 233, 242, 247, 263, 315, 319, 327, 332, 333, 337, 340, 343, 345, 346, 347, 351, 359, 364, 367, 371, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 385, 406, 411, 416, 451, 460, 476, 488, 497, 498, 500, 508, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 531, 532, 546, 547, 548, 552, 553, 554, 555, 557, 558, 561, 566, 571, 572, 574, 575, 586, 591, 594, 596, 597, 614, 618, 620, 628, 640, 642, 646, 647, 654, 661, 662, 666, 670, 671, 675, 676, 684, 687, 689, 690, 691, 692, 693, 698, 701, 702, 703, 705, 715, 719, 732, 737, 741, 745, 746, 747, 748, 750, 751, 752, 757, 762, 765, 766, 768, 776, 784, 785, 786, 787, 788, 789, 790, 792, 795, 825, 855, 856, 862, 865, 866, 873, 874, 875, 876, 880, 910, 914, 942, 949, 953, 954, 955, 956, 957, 958, 961, 963, 967, 968, 978, 986, 987, 993, 996, 1002, 1003, 1004, 1007], "after": [4, 17, 20, 21, 25, 43, 50, 52, 66, 67, 71, 76, 89, 101, 112, 119, 121, 124, 131, 135, 142, 144, 146, 148, 153, 158, 174, 181, 218, 219, 222, 227, 238, 247, 257, 258, 266, 268, 278, 279, 282, 283, 319, 320, 334, 340, 342, 343, 344, 345, 347, 349, 351, 352, 353, 357, 359, 367, 369, 370, 371, 373, 374, 377, 378, 381, 382, 385, 406, 411, 414, 415, 416, 417, 420, 426, 479, 496, 500, 517, 518, 523, 524, 525, 526, 561, 591, 594, 622, 623, 630, 631, 632, 637, 639, 640, 641, 642, 656, 676, 689, 719, 757, 760, 761, 765, 766, 814, 821, 825, 838, 844, 865, 870, 871, 942, 943, 947, 949, 953, 957, 958, 963, 965, 967, 968, 969, 973, 978, 985, 987, 993, 996, 1000, 1001, 1004, 1005, 1008, 1011], "quadrat": [4, 9, 27, 31, 75, 76, 77, 142, 146, 150, 195, 229, 240, 290, 372, 404, 422, 425, 513, 514, 587, 595, 612, 622, 623, 633, 640, 644, 680, 870, 871, 949, 950, 953, 956, 959, 963, 967, 968, 974, 975, 989, 994], "tractabl": [4, 377, 598, 972, 1006], "nystr\u00f6m": [4, 945], "latter": [4, 15, 229, 238, 247, 248, 266, 283, 315, 334, 342, 359, 377, 380, 381, 387, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 429, 433, 434, 435, 436, 437, 438, 439, 440, 446, 447, 448, 449, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 545, 546, 547, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 574, 575, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 599, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 652, 653, 654, 655, 656, 705, 760, 761, 762, 765, 766, 771, 776, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 821, 822, 823, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 857, 858, 860, 861, 862, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 920, 956, 961, 1002], "kernel_approxim": [4, 148, 150, 157, 158, 195, 208, 213, 289, 641, 721, 722, 831, 945, 974, 978, 994, 1000, 1010], "nystroem": [4, 148, 195, 208, 213, 337, 604, 605, 606, 641, 831, 870, 871, 989, 994, 1000, 1003, 1005, 1006, 1007], "cyclic_spline_poly_pipelin": 4, "poli": [4, 16, 128, 158, 238, 304, 311, 314, 416, 499, 584, 728, 737, 762, 840, 867, 868, 869, 870, 871, 949, 963, 985], "n_compon": [4, 5, 6, 12, 15, 41, 49, 54, 55, 56, 66, 69, 70, 79, 80, 83, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 119, 158, 180, 201, 202, 203, 204, 205, 206, 208, 212, 213, 216, 220, 224, 225, 226, 227, 228, 229, 230, 237, 262, 267, 276, 283, 289, 291, 294, 320, 347, 350, 351, 359, 376, 378, 385, 415, 416, 426, 428, 446, 447, 448, 449, 490, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 603, 604, 605, 606, 652, 653, 654, 655, 656, 657, 658, 659, 660, 760, 761, 814, 821, 824, 857, 858, 859, 902, 945, 947, 950, 952, 956, 983, 986, 994, 995, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1010], "300": [4, 20, 21, 32, 35, 47, 55, 84, 90, 101, 102, 103, 107, 149, 171, 206, 208, 212, 228, 241, 268, 281, 289, 296, 313, 315, 347, 407, 411, 412, 423, 425, 603, 608, 609, 643, 654, 656, 658, 822, 949, 974, 1003], "053": [4, 82, 135, 342, 351, 974], "002": [4, 12, 135, 137, 342], "076": [4, 327, 853, 974], "004": [4, 320], "almost": [4, 32, 107, 113, 183, 189, 215, 218, 252, 283, 299, 328, 338, 340, 349, 351, 357, 358, 359, 364, 373, 377, 378, 434, 435, 436, 437, 439, 440, 441, 760, 942, 948, 949, 952, 953, 968, 986, 987, 1001, 1006], "rival": [4, 862, 966], "intermedi": [4, 7, 49, 52, 106, 114, 218, 307, 357, 381, 523, 524, 583, 825, 953, 1005], "compound": [4, 199, 381, 574, 576, 644, 687, 715, 949, 987], "one_hot_poly_pipelin": 4, "passthrough": [4, 68, 111, 153, 154, 181, 199, 218, 284, 292, 374, 428, 431, 531, 532, 824, 825, 963, 1002, 1004, 1007, 1008, 1010], "082": [4, 116, 249, 974], "006": [4, 108, 246, 351], "111": [4, 7, 8, 16, 64, 83, 93, 154, 178, 196, 205, 238, 258, 817, 986, 996], "competit": [4, 114, 319, 380, 608, 956], "low": [4, 11, 12, 34, 47, 76, 80, 89, 91, 94, 101, 104, 117, 135, 155, 174, 176, 181, 183, 185, 195, 201, 203, 208, 212, 218, 224, 225, 227, 230, 232, 238, 240, 244, 245, 253, 264, 265, 275, 282, 284, 285, 293, 299, 306, 307, 319, 327, 341, 342, 345, 350, 353, 357, 359, 363, 370, 371, 372, 377, 378, 381, 406, 408, 413, 432, 485, 488, 499, 546, 553, 567, 643, 656, 660, 669, 689, 705, 752, 810, 839, 846, 863, 902, 918, 921, 942, 948, 949, 950, 952, 953, 956, 958, 959, 960, 961, 963, 965, 968, 969, 975, 989, 994, 997, 998, 999, 1001, 1002, 1007, 1008], "rank": [4, 17, 24, 75, 91, 94, 108, 133, 155, 156, 199, 236, 238, 246, 341, 368, 370, 371, 375, 376, 378, 380, 381, 472, 473, 485, 488, 513, 514, 557, 558, 570, 612, 621, 633, 644, 660, 684, 689, 690, 702, 703, 719, 751, 757, 765, 766, 902, 942, 944, 945, 950, 961, 963, 977, 989, 994, 999, 1002, 1003, 1007, 1008], "fact": [4, 11, 19, 24, 76, 80, 101, 112, 114, 155, 212, 222, 255, 257, 319, 339, 352, 357, 359, 376, 378, 379, 380, 381, 613, 632, 634, 668, 947, 949, 956, 963, 967, 968, 973, 977, 1007], "smoother": [4, 5, 114, 154, 275, 379], "allow": [4, 20, 53, 55, 70, 71, 83, 91, 92, 104, 105, 112, 119, 137, 142, 144, 146, 175, 181, 185, 199, 202, 209, 212, 219, 221, 222, 224, 238, 257, 287, 288, 289, 290, 292, 311, 312, 319, 327, 328, 332, 339, 340, 343, 345, 346, 347, 349, 352, 354, 357, 359, 360, 371, 372, 373, 374, 376, 377, 378, 380, 381, 382, 383, 384, 401, 407, 408, 410, 411, 413, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 446, 447, 448, 460, 487, 488, 497, 498, 502, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 545, 546, 547, 552, 553, 554, 555, 557, 558, 561, 567, 574, 575, 579, 591, 592, 594, 598, 599, 602, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 652, 654, 656, 663, 705, 725, 728, 737, 741, 744, 755, 756, 760, 761, 762, 763, 764, 765, 766, 769, 771, 773, 776, 780, 783, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 810, 811, 812, 815, 816, 820, 822, 823, 825, 827, 828, 830, 831, 832, 837, 844, 845, 849, 858, 860, 861, 862, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 883, 885, 886, 896, 897, 917, 921, 942, 943, 945, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 963, 965, 966, 967, 968, 969, 972, 973, 977, 978, 990, 993, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "find": [4, 5, 6, 12, 17, 37, 43, 44, 45, 46, 49, 50, 52, 54, 62, 69, 75, 76, 87, 89, 91, 92, 97, 112, 121, 137, 141, 143, 145, 154, 165, 169, 170, 183, 189, 201, 203, 205, 206, 211, 218, 229, 237, 238, 239, 249, 261, 266, 267, 268, 283, 287, 293, 309, 310, 311, 315, 319, 320, 323, 333, 342, 343, 345, 346, 347, 350, 351, 354, 357, 358, 359, 360, 370, 373, 375, 376, 378, 380, 381, 382, 384, 405, 408, 409, 410, 414, 415, 416, 417, 426, 495, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 522, 529, 546, 553, 574, 575, 611, 614, 617, 618, 619, 620, 622, 623, 635, 652, 671, 692, 693, 701, 745, 746, 747, 750, 751, 757, 762, 776, 807, 808, 809, 811, 813, 815, 816, 817, 838, 839, 844, 857, 858, 859, 873, 874, 876, 882, 901, 902, 904, 942, 943, 945, 948, 949, 950, 952, 953, 954, 957, 959, 963, 967, 968, 969, 971, 973, 976, 977, 978, 980, 982, 983, 985, 986, 987, 993, 1000, 1001, 1002, 1003, 1005, 1007, 1008, 1011], "function": [4, 5, 6, 7, 8, 13, 15, 20, 21, 34, 43, 50, 51, 52, 54, 56, 63, 66, 67, 68, 71, 87, 90, 92, 96, 99, 106, 107, 111, 112, 113, 114, 115, 116, 126, 131, 137, 140, 141, 142, 143, 144, 145, 149, 150, 152, 153, 154, 156, 159, 160, 163, 165, 168, 174, 176, 177, 178, 179, 181, 182, 187, 188, 189, 194, 197, 198, 199, 201, 209, 211, 214, 215, 218, 219, 221, 222, 229, 236, 238, 239, 240, 241, 246, 247, 252, 255, 258, 273, 276, 278, 285, 287, 288, 290, 291, 293, 301, 304, 305, 306, 307, 308, 309, 311, 313, 315, 317, 319, 320, 324, 328, 332, 333, 337, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 357, 358, 359, 363, 364, 367, 371, 373, 374, 375, 376, 378, 379, 381, 382, 384, 385, 388, 390, 392, 393, 395, 396, 397, 401, 404, 407, 408, 409, 411, 412, 414, 416, 418, 421, 422, 423, 424, 425, 428, 429, 432, 433, 435, 436, 438, 442, 452, 453, 455, 456, 459, 461, 467, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 507, 508, 509, 510, 511, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 536, 539, 545, 546, 552, 553, 555, 556, 557, 558, 559, 560, 562, 563, 564, 565, 566, 568, 571, 572, 573, 574, 575, 579, 581, 583, 584, 586, 587, 591, 592, 595, 596, 597, 598, 599, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 651, 652, 653, 654, 655, 656, 657, 658, 662, 663, 664, 666, 667, 668, 670, 675, 676, 680, 683, 685, 686, 687, 691, 695, 697, 698, 701, 703, 704, 705, 713, 718, 720, 724, 725, 726, 728, 731, 734, 737, 741, 742, 743, 744, 745, 746, 748, 752, 755, 756, 757, 759, 760, 761, 762, 764, 765, 766, 767, 768, 773, 774, 776, 777, 778, 779, 780, 781, 782, 784, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 799, 805, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 828, 829, 830, 831, 832, 834, 835, 837, 841, 842, 843, 844, 845, 846, 849, 851, 854, 857, 858, 860, 861, 862, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 880, 883, 892, 894, 895, 896, 901, 902, 912, 913, 919, 920, 921, 923, 924, 927, 928, 937, 942, 943, 944, 946, 948, 950, 951, 954, 956, 957, 958, 959, 960, 961, 963, 966, 967, 969, 972, 973, 974, 975, 978, 981, 982, 983, 987, 989, 990, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011], "abl": [4, 5, 9, 23, 44, 52, 58, 77, 80, 91, 92, 118, 143, 153, 156, 165, 170, 181, 197, 199, 205, 244, 249, 294, 307, 328, 332, 333, 334, 339, 343, 345, 347, 349, 350, 357, 373, 375, 377, 381, 449, 467, 498, 790, 837, 942, 943, 949, 952, 953, 954, 959, 963, 966, 969, 970, 973, 978, 986, 987, 999, 1000, 1004], "gbrt_predict": 4, "one_hot_poly_predict": 4, "cyclic_spline_poly_predict": 4, "grow": [4, 13, 36, 158, 165, 260, 315, 321, 332, 357, 369, 375, 381, 521, 522, 523, 524, 528, 529, 530, 772, 805, 806, 873, 874, 875, 876, 942, 953, 956, 969, 977, 981, 985, 996, 997], "depth": [4, 106, 111, 115, 117, 122, 255, 323, 325, 326, 327, 332, 343, 345, 349, 358, 380, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 805, 806, 810, 873, 874, 875, 876, 877, 879, 907, 958, 959, 969, 995, 996, 1004], "accuraci": [4, 6, 7, 8, 16, 24, 28, 29, 30, 31, 66, 67, 68, 69, 101, 107, 108, 112, 113, 119, 131, 132, 134, 138, 156, 158, 181, 185, 189, 196, 197, 226, 236, 237, 238, 239, 240, 242, 244, 253, 255, 260, 266, 267, 268, 276, 280, 283, 293, 296, 297, 299, 307, 310, 311, 315, 328, 332, 347, 358, 359, 372, 373, 377, 380, 381, 382, 390, 401, 413, 433, 435, 436, 442, 496, 498, 505, 513, 514, 515, 517, 519, 521, 522, 523, 525, 528, 529, 531, 533, 574, 598, 622, 623, 630, 632, 635, 638, 639, 640, 656, 661, 667, 672, 675, 677, 682, 695, 696, 697, 701, 706, 717, 726, 750, 757, 759, 789, 792, 793, 794, 795, 796, 797, 800, 801, 802, 803, 804, 807, 812, 814, 815, 822, 860, 861, 865, 867, 870, 873, 875, 901, 902, 942, 947, 948, 949, 950, 954, 956, 957, 961, 965, 967, 969, 982, 987, 1001, 1002], "On": [4, 12, 13, 17, 25, 64, 67, 68, 79, 80, 92, 101, 104, 106, 108, 109, 114, 117, 118, 121, 124, 130, 132, 141, 142, 153, 154, 155, 162, 169, 170, 183, 185, 209, 210, 211, 212, 214, 215, 218, 219, 220, 221, 222, 224, 226, 229, 233, 234, 235, 236, 238, 239, 240, 241, 243, 245, 250, 276, 278, 280, 282, 283, 284, 288, 289, 291, 292, 294, 298, 307, 315, 327, 332, 343, 346, 347, 349, 357, 359, 367, 369, 371, 373, 377, 378, 380, 382, 383, 607, 620, 655, 698, 724, 830, 846, 942, 946, 949, 952, 953, 955, 959, 961, 966, 968, 982, 985], "contrari": [4, 14, 153, 202, 206, 218, 224, 241, 278, 319, 339, 373, 460, 508, 570, 779, 846, 949, 955, 959], "significantli": [4, 23, 24, 34, 73, 74, 101, 107, 112, 114, 135, 153, 154, 155, 181, 185, 189, 197, 199, 238, 258, 288, 289, 320, 321, 328, 333, 349, 373, 378, 380, 381, 386, 433, 438, 443, 444, 502, 504, 511, 522, 529, 610, 611, 616, 617, 624, 625, 626, 627, 648, 656, 805, 806, 945, 949, 950, 956, 961, 968, 993, 995, 996, 1000, 1001, 1006, 1007, 1008], "over": [4, 7, 8, 9, 16, 20, 23, 25, 26, 29, 34, 47, 52, 53, 68, 70, 87, 104, 107, 112, 117, 130, 134, 137, 145, 148, 152, 154, 163, 175, 181, 189, 199, 208, 218, 238, 239, 241, 243, 245, 246, 247, 250, 263, 271, 273, 274, 280, 290, 291, 293, 296, 319, 320, 332, 333, 334, 340, 341, 344, 345, 346, 347, 351, 358, 359, 369, 371, 372, 373, 374, 377, 378, 379, 380, 381, 385, 410, 413, 428, 436, 473, 497, 498, 500, 501, 502, 503, 510, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 545, 546, 552, 553, 555, 558, 566, 594, 596, 597, 598, 608, 609, 610, 611, 616, 617, 622, 624, 625, 626, 627, 629, 630, 631, 632, 640, 641, 642, 649, 650, 661, 680, 682, 702, 726, 751, 756, 760, 762, 765, 766, 768, 773, 774, 776, 784, 786, 787, 788, 789, 790, 792, 821, 822, 823, 824, 840, 844, 865, 873, 875, 882, 891, 921, 942, 949, 950, 953, 954, 955, 956, 957, 958, 959, 960, 961, 963, 966, 967, 968, 969, 972, 973, 977, 983, 986, 993, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1006], "compet": 4, "access": [4, 46, 73, 112, 218, 225, 230, 294, 319, 327, 332, 333, 345, 346, 347, 353, 357, 359, 360, 369, 373, 375, 376, 380, 381, 383, 414, 421, 428, 500, 531, 532, 533, 534, 581, 823, 824, 825, 880, 942, 949, 952, 953, 959, 960, 961, 967, 968, 973, 977, 978, 986, 987, 993, 995, 999, 1000, 1001, 1002, 1005, 1007, 1008, 1009], "requir": [4, 7, 14, 24, 42, 43, 45, 50, 52, 54, 55, 64, 66, 83, 91, 93, 106, 107, 111, 112, 115, 117, 121, 135, 154, 165, 170, 178, 181, 201, 203, 209, 212, 215, 218, 222, 239, 247, 249, 258, 260, 278, 283, 289, 290, 319, 320, 321, 339, 342, 343, 345, 347, 349, 351, 353, 357, 359, 360, 363, 364, 369, 372, 373, 374, 375, 377, 378, 380, 381, 382, 384, 390, 396, 401, 402, 403, 408, 410, 414, 416, 421, 426, 428, 431, 433, 446, 447, 448, 460, 472, 485, 488, 499, 505, 513, 514, 515, 517, 519, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 536, 543, 544, 545, 574, 575, 583, 591, 596, 597, 598, 607, 622, 623, 630, 631, 632, 635, 638, 639, 640, 641, 642, 650, 653, 655, 656, 657, 659, 663, 687, 692, 693, 705, 710, 712, 715, 726, 747, 750, 762, 765, 766, 769, 771, 776, 788, 793, 794, 795, 796, 797, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 813, 815, 816, 817, 822, 825, 826, 827, 829, 839, 840, 841, 845, 853, 857, 858, 860, 861, 865, 866, 867, 870, 873, 874, 875, 876, 910, 913, 919, 939, 942, 947, 948, 949, 950, 953, 954, 955, 956, 957, 959, 960, 963, 967, 968, 969, 973, 978, 985, 987, 995, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "geograph": [4, 11, 271, 340, 462], "repartit": 4, "immobil": 4, "quantit": [4, 5, 6, 13, 24, 58, 114, 124, 135, 234, 252, 342, 983], "predictionerrordisplai": [4, 13, 71, 121, 153, 234, 292, 953, 1008, 1010], "nrow": [4, 5, 28, 30, 32, 54, 63, 69, 87, 146, 154, 181, 183, 189, 199, 201, 202, 205, 218, 240, 241, 258, 280, 282, 283, 292, 297, 314, 315, 983], "ncol": [4, 5, 13, 28, 30, 32, 50, 54, 63, 87, 92, 97, 112, 154, 181, 182, 183, 189, 199, 201, 202, 211, 218, 234, 240, 241, 249, 258, 261, 274, 279, 280, 282, 283, 292, 314, 315, 320], "sharex": [4, 7, 15, 32, 69, 85, 92, 122, 146, 154, 183, 240, 263, 299, 983], "sharei": [4, 13, 32, 71, 85, 92, 97, 122, 146, 154, 181, 183, 189, 240, 249, 263, 279, 284, 314, 315, 320], "npolynomi": 4, "ntree": 4, "plot_kind": 4, "actual_vs_predict": [4, 71, 121, 153, 234, 292, 665], "residual_vs_predict": [4, 13, 71, 234, 292, 665], "axis_idx": 4, "kind": [4, 9, 12, 13, 23, 24, 71, 95, 107, 121, 130, 153, 154, 229, 232, 234, 247, 285, 289, 292, 304, 307, 319, 333, 334, 338, 340, 345, 347, 351, 357, 358, 371, 373, 376, 377, 378, 380, 381, 382, 452, 453, 467, 472, 473, 485, 488, 552, 596, 597, 665, 894, 949, 955, 960, 969, 996, 1005, 1007, 1008, 1009], "enumer": [4, 8, 10, 11, 12, 14, 15, 17, 19, 24, 26, 28, 29, 34, 36, 37, 38, 39, 40, 41, 42, 47, 52, 56, 57, 58, 59, 66, 74, 76, 77, 80, 88, 90, 96, 104, 107, 112, 113, 115, 116, 126, 139, 141, 146, 156, 161, 163, 172, 181, 202, 203, 206, 208, 213, 217, 218, 224, 225, 226, 227, 229, 230, 233, 240, 241, 247, 248, 263, 267, 268, 270, 276, 280, 281, 296, 297, 299, 301, 305, 307, 314, 315, 319, 324, 340, 523, 524, 528, 529, 744, 763, 764, 767, 769, 770, 771, 772, 775, 777, 778, 779, 780, 781, 782, 783], "pred": [4, 7, 11, 13, 30, 316, 319, 340, 612, 633, 644, 661, 666, 670, 682, 692, 693, 701, 746, 747, 750, 751, 953], "zip": [4, 5, 8, 9, 12, 13, 23, 25, 29, 30, 32, 34, 35, 37, 39, 42, 46, 52, 60, 61, 62, 71, 80, 85, 87, 88, 91, 95, 96, 97, 103, 105, 112, 121, 122, 143, 148, 150, 153, 154, 155, 166, 172, 173, 181, 189, 190, 201, 212, 218, 225, 229, 230, 236, 240, 241, 242, 245, 247, 258, 261, 263, 266, 273, 274, 275, 280, 282, 283, 284, 300, 304, 315, 316, 324, 343, 380, 789, 963, 987], "disp": [4, 28, 30, 103, 117, 118, 232, 241, 253, 261, 283, 288, 294, 304, 309, 402, 595, 661, 664, 665, 814], "from_predict": [4, 13, 30, 71, 121, 153, 218, 234, 245, 247, 290, 296, 319, 352, 402, 595, 662, 682, 690, 745, 747, 750, 751, 752, 953, 990, 1006, 1007, 1008, 1009, 1010, 1011], "y_true": [4, 13, 19, 30, 56, 71, 101, 121, 140, 181, 191, 199, 218, 227, 299, 345, 396, 402, 403, 429, 446, 447, 448, 516, 518, 520, 521, 522, 524, 526, 528, 529, 532, 534, 575, 599, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 624, 625, 626, 627, 628, 629, 631, 634, 636, 637, 642, 643, 661, 662, 664, 665, 666, 667, 671, 672, 673, 676, 677, 682, 684, 685, 686, 687, 689, 690, 691, 692, 693, 697, 698, 699, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 719, 745, 746, 747, 748, 750, 751, 752, 753, 754, 757, 759, 798, 799, 808, 816, 823, 866, 868, 871, 874, 876, 953, 994, 999, 1000, 1001, 1002, 1004, 1005, 1007, 1008, 1010], "y_pred": [4, 6, 7, 13, 24, 28, 30, 32, 41, 54, 59, 66, 71, 101, 114, 115, 121, 132, 153, 181, 183, 188, 191, 196, 198, 199, 208, 209, 218, 234, 236, 241, 265, 269, 276, 283, 299, 300, 328, 345, 352, 359, 380, 396, 403, 429, 446, 447, 448, 513, 516, 518, 520, 521, 522, 524, 526, 528, 529, 531, 532, 534, 575, 595, 599, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 642, 643, 644, 661, 662, 664, 665, 666, 667, 672, 676, 677, 682, 685, 686, 687, 691, 692, 693, 697, 699, 701, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 746, 747, 748, 750, 751, 753, 754, 759, 762, 765, 766, 776, 786, 796, 798, 799, 808, 816, 823, 825, 865, 866, 867, 868, 869, 870, 871, 874, 876, 953, 955, 983, 999, 1000, 1002, 1004, 1008, 1009, 1010], "scatter_kwarg": [4, 13, 71, 121, 153, 665], "set_xtick": [4, 8, 10, 16, 29, 40, 57, 61, 97, 119, 123, 154, 156, 172, 197, 213, 224, 249, 250, 257, 273, 275, 280, 281, 304], "num": [4, 12, 67, 135, 137, 142, 143, 144, 154, 155, 183, 245, 246, 291, 293, 294, 460, 596], "set_ytick": [4, 16, 29, 40, 57, 61, 97, 119, 148, 149, 156, 172, 197, 224, 249, 273, 275, 280, 281, 304, 321], "loc": [4, 7, 8, 9, 23, 25, 31, 37, 68, 71, 74, 75, 76, 79, 83, 89, 91, 94, 95, 96, 101, 103, 104, 105, 113, 114, 115, 116, 118, 121, 123, 124, 131, 137, 138, 144, 146, 153, 154, 163, 166, 171, 175, 181, 182, 183, 184, 187, 188, 191, 194, 195, 198, 199, 204, 211, 212, 213, 214, 216, 218, 226, 227, 233, 236, 237, 238, 241, 242, 245, 248, 251, 252, 261, 263, 264, 274, 279, 282, 283, 288, 291, 294, 298, 306, 309, 311, 314, 315, 319, 324, 326, 776, 842, 854, 982], "upper": [4, 7, 9, 23, 68, 71, 74, 75, 76, 103, 104, 105, 113, 114, 115, 116, 121, 123, 131, 141, 143, 146, 153, 175, 181, 187, 188, 191, 195, 198, 199, 212, 216, 217, 237, 238, 239, 263, 264, 274, 283, 299, 306, 309, 311, 314, 373, 379, 427, 552, 553, 555, 559, 577, 578, 579, 581, 583, 584, 586, 587, 589, 596, 597, 599, 601, 614, 618, 641, 698, 751, 838, 839, 867, 868, 869, 889, 952, 953, 956, 963, 967, 968, 969, 1001], "bbox_to_anchor": [4, 34, 146, 243, 314], "set_aspect": [4, 140, 192, 226, 316], "equal": [4, 11, 12, 25, 32, 34, 36, 50, 57, 75, 80, 101, 114, 140, 153, 182, 183, 192, 198, 219, 226, 229, 232, 236, 238, 247, 268, 280, 284, 307, 309, 316, 320, 340, 341, 345, 347, 359, 370, 371, 373, 377, 378, 380, 381, 386, 401, 404, 405, 406, 407, 409, 411, 413, 418, 423, 424, 427, 433, 438, 443, 444, 467, 476, 479, 483, 496, 497, 498, 503, 505, 507, 508, 513, 514, 515, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 530, 531, 532, 533, 534, 552, 557, 558, 561, 563, 564, 571, 572, 589, 592, 593, 596, 597, 598, 599, 601, 605, 606, 609, 613, 622, 623, 635, 663, 667, 682, 684, 692, 746, 750, 751, 757, 759, 762, 763, 765, 766, 775, 776, 780, 786, 793, 797, 798, 805, 806, 807, 808, 813, 814, 815, 816, 817, 822, 823, 828, 829, 830, 837, 840, 843, 844, 845, 846, 848, 855, 862, 865, 866, 872, 873, 874, 875, 876, 891, 902, 928, 934, 947, 949, 953, 954, 956, 957, 959, 963, 967, 968, 969, 986, 987, 994, 997, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "adjust": [4, 9, 33, 35, 46, 55, 73, 101, 114, 130, 150, 185, 208, 213, 221, 239, 255, 287, 300, 315, 320, 352, 373, 374, 378, 380, 381, 488, 517, 518, 521, 523, 525, 526, 528, 622, 623, 630, 632, 638, 639, 640, 668, 669, 672, 678, 679, 718, 720, 749, 758, 800, 801, 803, 804, 835, 857, 858, 865, 866, 867, 870, 873, 875, 891, 952, 953, 957, 963, 974, 985, 990, 993, 999, 1009], "box": [4, 10, 28, 52, 154, 155, 202, 255, 278, 282, 352, 378, 380, 476, 519, 520, 841, 853, 877, 879, 953, 954, 960, 963, 969, 972, 978, 1001, 1009], "show": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 128, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 142, 143, 145, 148, 149, 152, 153, 154, 155, 156, 158, 160, 161, 162, 163, 164, 166, 167, 168, 170, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 248, 249, 250, 251, 252, 253, 255, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 294, 296, 297, 298, 299, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 323, 324, 325, 326, 327, 333, 334, 345, 351, 357, 358, 363, 364, 370, 371, 375, 377, 378, 379, 380, 382, 383, 402, 466, 523, 557, 558, 595, 596, 661, 662, 664, 665, 666, 677, 768, 784, 807, 825, 877, 878, 879, 942, 945, 947, 948, 950, 952, 953, 955, 956, 957, 959, 960, 961, 963, 967, 968, 973, 982, 983, 987, 995, 997, 998, 1000, 1002, 1003, 1004, 1005, 1007, 1009, 1010], "seem": [4, 9, 13, 43, 52, 114, 154, 181, 205, 208, 239, 255, 274, 282, 315, 319, 320, 344, 345, 350, 377, 465, 949, 953], "regim": [4, 359, 865, 866, 952], "overal": [4, 40, 45, 101, 104, 107, 112, 121, 142, 199, 235, 258, 283, 284, 320, 332, 344, 345, 351, 370, 371, 380, 411, 413, 428, 435, 436, 442, 513, 846, 950, 953, 969, 977, 1003], "closer": [4, 26, 34, 90, 92, 120, 135, 137, 154, 160, 185, 311, 321, 371, 373, 378, 413, 517, 592, 676, 807, 808, 813, 815, 816, 817, 968, 1000], "diagon": [4, 24, 37, 77, 79, 199, 218, 226, 229, 230, 232, 307, 370, 373, 375, 383, 417, 435, 436, 442, 445, 475, 477, 491, 496, 514, 575, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 614, 615, 618, 619, 620, 646, 647, 665, 679, 755, 760, 761, 809, 817, 945, 947, 949, 952, 953, 956, 963, 999, 1001, 1002, 1003], "obtain": [4, 7, 9, 12, 13, 20, 26, 45, 52, 54, 55, 67, 70, 71, 92, 94, 101, 111, 114, 115, 119, 126, 135, 139, 141, 153, 154, 165, 181, 183, 185, 195, 205, 218, 224, 225, 226, 234, 238, 239, 240, 244, 247, 261, 283, 290, 305, 311, 320, 321, 327, 328, 340, 342, 347, 357, 359, 367, 371, 373, 375, 376, 378, 380, 381, 382, 383, 401, 406, 433, 460, 496, 497, 519, 520, 521, 522, 523, 524, 527, 528, 529, 557, 570, 578, 609, 623, 625, 630, 632, 636, 638, 640, 641, 651, 672, 676, 689, 702, 719, 756, 768, 784, 790, 793, 794, 797, 811, 822, 842, 854, 867, 870, 873, 874, 902, 943, 945, 947, 949, 950, 952, 953, 954, 956, 957, 959, 960, 963, 967, 968, 999, 1001, 1004, 1006, 1007, 1008, 1009, 1010], "slightli": [4, 24, 61, 77, 104, 107, 111, 114, 117, 121, 135, 137, 138, 139, 155, 160, 181, 199, 204, 206, 215, 218, 246, 258, 287, 304, 321, 344, 345, 357, 371, 373, 380, 381, 383, 385, 410, 552, 553, 555, 602, 622, 765, 766, 865, 867, 870, 901, 902, 942, 949, 963, 967, 968, 1002, 1006, 1007, 1009], "cost": [4, 36, 90, 107, 137, 150, 158, 201, 213, 240, 247, 287, 307, 320, 321, 322, 327, 345, 351, 353, 357, 373, 380, 442, 464, 501, 502, 503, 510, 521, 522, 523, 524, 528, 529, 566, 574, 583, 591, 610, 611, 616, 617, 624, 625, 626, 627, 632, 636, 638, 640, 642, 651, 652, 656, 791, 865, 866, 867, 870, 873, 874, 875, 876, 902, 945, 949, 950, 953, 956, 966, 967, 968, 974, 975, 989, 999, 1002, 1003], "durat": [4, 8, 181, 199, 218, 260, 321, 333, 919, 920, 949], "regressor": [4, 71, 80, 115, 120, 121, 124, 137, 142, 149, 150, 153, 159, 161, 163, 165, 181, 182, 184, 187, 198, 199, 215, 241, 252, 263, 283, 288, 289, 332, 345, 347, 357, 359, 371, 374, 383, 396, 399, 400, 429, 446, 447, 448, 449, 488, 515, 516, 517, 518, 519, 520, 521, 522, 524, 526, 529, 530, 531, 532, 533, 534, 569, 570, 573, 575, 596, 597, 599, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 624, 625, 626, 627, 628, 629, 631, 633, 634, 636, 637, 642, 643, 665, 793, 794, 797, 798, 799, 808, 816, 821, 822, 823, 826, 832, 840, 845, 846, 866, 868, 871, 873, 874, 875, 876, 879, 894, 896, 942, 943, 949, 953, 954, 956, 961, 967, 972, 974, 975, 982, 989, 993, 994, 998, 999, 1000, 1002, 1003, 1006, 1007, 1008, 1010], "mlpregressor": [4, 154, 219, 334, 821, 822, 957, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "hidden": [4, 154, 275, 276, 345, 353, 370, 378, 821, 822, 823, 957, 958, 972, 993, 1004], "layer": [4, 29, 119, 128, 139, 150, 188, 197, 219, 272, 275, 276, 280, 281, 301, 312, 317, 332, 353, 380, 478, 479, 486, 531, 791, 821, 822, 823, 826, 845, 958, 974, 975, 989, 999], "cyclic": [4, 610, 611, 616, 617, 624, 625, 626, 627, 1005], "within": [4, 20, 57, 106, 108, 109, 112, 120, 132, 134, 135, 177, 182, 183, 193, 199, 219, 236, 237, 241, 251, 278, 279, 289, 305, 308, 311, 315, 321, 328, 332, 340, 345, 349, 354, 357, 359, 360, 370, 371, 372, 373, 374, 377, 379, 380, 384, 408, 412, 425, 427, 428, 430, 433, 438, 479, 513, 531, 532, 533, 534, 557, 558, 596, 656, 660, 663, 674, 688, 744, 760, 761, 767, 768, 780, 781, 789, 790, 805, 806, 807, 808, 813, 815, 816, 817, 824, 825, 826, 838, 846, 850, 851, 853, 854, 855, 856, 867, 868, 869, 870, 871, 873, 874, 875, 876, 942, 947, 949, 950, 956, 959, 963, 966, 968, 969, 973, 977, 978, 982, 985, 987, 995, 996, 1000, 1001, 1006, 1007, 1009, 1010], "finer": [4, 13, 34, 260, 307, 333, 373, 377, 942, 956, 1003], "resolut": [4, 11, 17, 96, 154, 270, 271, 307, 360, 371, 978, 1003], "taken": [4, 7, 29, 39, 50, 52, 116, 135, 142, 153, 212, 213, 227, 244, 255, 280, 340, 342, 344, 345, 349, 359, 367, 372, 373, 377, 381, 385, 404, 497, 525, 526, 547, 548, 610, 611, 614, 616, 617, 618, 622, 623, 624, 625, 626, 627, 641, 643, 645, 648, 659, 838, 839, 859, 862, 868, 869, 912, 953, 955, 963, 965, 999, 1002, 1005, 1006], "everi": [4, 87, 148, 179, 182, 202, 214, 225, 230, 247, 290, 294, 328, 340, 343, 345, 347, 349, 353, 359, 373, 375, 377, 378, 381, 404, 418, 472, 495, 500, 503, 509, 521, 523, 524, 525, 526, 528, 554, 555, 567, 610, 611, 613, 616, 617, 623, 624, 625, 626, 627, 628, 629, 630, 632, 636, 637, 638, 639, 640, 649, 650, 651, 656, 660, 717, 734, 742, 743, 775, 814, 873, 875, 877, 879, 891, 946, 948, 953, 954, 955, 963, 969, 977, 982, 993, 997, 999, 1002, 1006, 1010], "offer": [4, 107, 347, 353, 357, 358, 363, 377, 378, 380, 381, 942, 943, 954, 957, 969, 972, 973, 977, 999], "view": [4, 16, 39, 43, 73, 89, 154, 178, 220, 332, 334, 345, 373, 381, 500, 609, 621, 805, 806, 880, 949, 950], "gaussian": [4, 5, 7, 9, 16, 26, 28, 29, 32, 41, 43, 44, 52, 54, 58, 62, 73, 74, 75, 76, 77, 84, 85, 88, 89, 90, 96, 102, 103, 110, 114, 117, 119, 128, 149, 160, 163, 165, 169, 171, 191, 193, 194, 208, 212, 214, 226, 227, 249, 263, 268, 271, 273, 281, 282, 301, 304, 311, 313, 337, 341, 347, 350, 359, 373, 375, 378, 379, 385, 416, 433, 434, 435, 436, 437, 438, 439, 440, 460, 468, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 488, 489, 494, 496, 508, 513, 514, 527, 574, 575, 577, 578, 579, 581, 582, 583, 586, 587, 589, 591, 607, 608, 636, 641, 644, 667, 687, 704, 715, 739, 760, 761, 762, 776, 800, 801, 802, 803, 804, 805, 806, 810, 841, 845, 853, 857, 858, 859, 947, 949, 950, 951, 959, 974, 975, 977, 986, 988, 989, 993, 994, 996, 997, 999, 1000, 1001, 1003, 1005, 1007], "random": [4, 5, 6, 7, 11, 12, 13, 14, 20, 21, 23, 24, 25, 26, 29, 31, 32, 34, 36, 37, 41, 42, 45, 47, 49, 51, 52, 54, 55, 57, 58, 59, 61, 62, 63, 67, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 85, 88, 89, 90, 93, 94, 100, 102, 104, 106, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 121, 124, 128, 130, 131, 134, 137, 138, 141, 143, 144, 146, 148, 149, 150, 151, 152, 160, 161, 162, 163, 165, 170, 171, 175, 176, 179, 180, 181, 182, 183, 184, 187, 188, 190, 194, 195, 198, 199, 201, 202, 204, 205, 206, 207, 208, 213, 214, 215, 217, 218, 224, 225, 227, 228, 229, 230, 231, 233, 235, 236, 237, 238, 239, 241, 243, 245, 247, 248, 249, 250, 252, 257, 258, 263, 264, 265, 270, 273, 279, 281, 282, 285, 288, 289, 291, 293, 296, 297, 300, 301, 306, 307, 309, 310, 312, 313, 314, 317, 319, 320, 325, 326, 332, 333, 337, 341, 348, 350, 357, 358, 359, 364, 368, 369, 371, 373, 381, 382, 386, 398, 404, 407, 411, 413, 415, 416, 417, 418, 422, 423, 424, 426, 428, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 452, 453, 454, 455, 456, 459, 460, 461, 466, 467, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 499, 500, 502, 503, 504, 505, 508, 511, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 537, 546, 547, 548, 553, 571, 572, 574, 575, 591, 594, 596, 598, 603, 604, 605, 606, 607, 610, 611, 613, 614, 616, 617, 618, 622, 624, 625, 626, 627, 634, 635, 636, 640, 641, 642, 643, 651, 653, 654, 655, 656, 657, 658, 659, 665, 668, 669, 672, 694, 706, 744, 751, 756, 760, 761, 762, 764, 765, 766, 767, 774, 776, 777, 778, 779, 780, 781, 782, 783, 790, 791, 796, 798, 799, 800, 801, 802, 804, 805, 806, 810, 814, 821, 822, 823, 825, 828, 830, 839, 842, 846, 854, 857, 858, 859, 860, 861, 862, 865, 866, 867, 868, 870, 871, 873, 874, 875, 876, 888, 899, 901, 902, 924, 927, 943, 945, 948, 950, 952, 953, 957, 958, 959, 961, 963, 968, 969, 972, 973, 974, 975, 978, 982, 983, 985, 986, 989, 990, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "constant": [4, 96, 104, 140, 144, 149, 153, 169, 182, 183, 185, 199, 210, 215, 220, 241, 270, 274, 276, 279, 281, 288, 315, 317, 328, 337, 347, 354, 359, 370, 380, 383, 396, 410, 429, 446, 447, 448, 475, 477, 498, 502, 504, 511, 513, 514, 515, 516, 518, 520, 522, 524, 526, 529, 532, 534, 554, 570, 573, 575, 577, 591, 594, 596, 597, 599, 604, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 640, 641, 642, 643, 644, 651, 653, 657, 659, 685, 686, 687, 691, 695, 738, 740, 748, 798, 799, 808, 816, 822, 823, 830, 841, 844, 853, 865, 866, 867, 868, 869, 870, 871, 872, 874, 876, 945, 947, 949, 950, 953, 955, 956, 963, 967, 969, 989, 996, 1001, 1003, 1005, 1006, 1007, 1009], "varianc": [4, 5, 13, 26, 41, 52, 54, 59, 69, 73, 75, 79, 80, 83, 87, 88, 89, 92, 94, 95, 97, 100, 116, 144, 146, 150, 153, 159, 161, 165, 170, 177, 181, 183, 186, 199, 229, 235, 238, 241, 247, 248, 251, 267, 273, 278, 283, 320, 328, 337, 341, 354, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 385, 405, 409, 413, 427, 485, 488, 496, 497, 498, 505, 508, 513, 514, 519, 520, 522, 523, 524, 529, 567, 571, 572, 575, 589, 607, 608, 609, 616, 620, 621, 624, 626, 636, 637, 638, 639, 640, 651, 674, 691, 748, 760, 761, 803, 814, 829, 835, 841, 843, 845, 851, 853, 855, 856, 874, 876, 928, 929, 930, 934, 947, 948, 949, 951, 956, 957, 958, 961, 965, 967, 968, 969, 970, 974, 975, 983, 985, 986, 989, 993, 1001, 1003, 1004, 1005, 1006, 1007, 1008], "poisson": [4, 13, 150, 159, 216, 341, 380, 428, 429, 460, 487, 516, 522, 526, 529, 612, 633, 636, 644, 670, 687, 708, 712, 713, 715, 791, 825, 826, 829, 830, 838, 839, 840, 845, 874, 876, 906, 949, 969, 974, 1003, 1004, 1005, 1006, 1007, 1009, 1010], "gamma": [4, 5, 6, 7, 9, 11, 16, 29, 30, 92, 122, 128, 158, 195, 208, 213, 214, 236, 238, 240, 243, 249, 253, 289, 296, 297, 299, 301, 304, 306, 307, 310, 311, 313, 314, 317, 376, 378, 383, 416, 499, 526, 583, 584, 603, 604, 605, 607, 608, 609, 612, 644, 649, 655, 687, 710, 715, 722, 729, 738, 739, 740, 760, 773, 776, 860, 861, 862, 867, 868, 869, 870, 871, 942, 945, 948, 949, 951, 966, 968, 978, 982, 983, 985, 993, 994, 996, 997, 998, 1000, 1001, 1003, 1004, 1007, 1008, 1009], "achiev": [4, 12, 17, 19, 26, 29, 90, 101, 110, 112, 119, 145, 158, 181, 189, 235, 238, 245, 283, 299, 307, 310, 311, 315, 319, 328, 332, 334, 339, 340, 342, 347, 351, 357, 359, 370, 371, 373, 377, 378, 380, 381, 517, 522, 529, 604, 613, 640, 642, 671, 692, 693, 701, 703, 726, 746, 747, 750, 765, 766, 801, 845, 942, 943, 945, 949, 953, 963, 966, 968, 987, 1006], "gridsearchcv": [4, 51, 65, 67, 69, 70, 73, 94, 107, 150, 214, 220, 229, 231, 236, 237, 238, 239, 243, 246, 249, 255, 260, 262, 276, 280, 289, 293, 294, 307, 311, 328, 333, 347, 357, 359, 364, 374, 377, 383, 387, 466, 484, 504, 505, 539, 563, 571, 617, 667, 705, 773, 776, 825, 835, 865, 873, 921, 942, 949, 953, 957, 967, 968, 972, 973, 974, 982, 983, 987, 993, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1010], "tweedieregressor": [4, 288, 291, 612, 633, 949, 1004, 1007, 1008], "power": [4, 7, 17, 107, 112, 152, 182, 199, 230, 241, 246, 262, 278, 279, 282, 296, 304, 332, 333, 358, 371, 373, 376, 379, 380, 381, 384, 408, 446, 447, 448, 496, 499, 505, 508, 594, 644, 658, 687, 710, 712, 715, 807, 808, 815, 816, 818, 819, 840, 841, 842, 853, 854, 901, 902, 949, 950, 953, 961, 963, 967, 968, 977, 996, 999, 1001, 1003, 1004, 1006, 1010], "param_grid": [4, 6, 67, 68, 69, 70, 107, 114, 214, 220, 229, 236, 237, 238, 242, 243, 246, 249, 255, 260, 280, 294, 307, 359, 364, 374, 380, 705, 762, 765, 773, 774, 921, 942, 953, 982, 983], "total": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 126, 127, 128, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 152, 153, 154, 155, 156, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 257, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 324, 325, 326, 327, 333, 339, 340, 342, 351, 359, 370, 373, 379, 381, 384, 396, 408, 429, 446, 447, 448, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 464, 465, 466, 468, 469, 474, 476, 478, 479, 483, 486, 487, 500, 508, 516, 517, 518, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 532, 534, 547, 548, 554, 558, 560, 575, 599, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 624, 625, 626, 627, 628, 629, 630, 631, 634, 635, 636, 637, 640, 641, 642, 643, 661, 668, 669, 677, 692, 693, 694, 697, 701, 702, 720, 732, 746, 747, 750, 757, 758, 759, 762, 776, 786, 787, 788, 798, 799, 800, 801, 808, 810, 816, 823, 840, 844, 866, 868, 871, 873, 874, 875, 876, 902, 942, 949, 950, 953, 954, 955, 956, 963, 967, 968, 969, 974, 983, 987, 994, 999, 1001, 1009], "script": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 152, 153, 154, 155, 156, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 257, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 323, 324, 325, 326, 327, 328, 333, 345, 346, 347, 348, 349, 351, 357, 359, 363, 381, 973, 976, 987], "308": [4, 599, 974], "second": [4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 152, 153, 154, 155, 156, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 257, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 323, 324, 325, 326, 327, 328, 332, 340, 347, 349, 351, 359, 370, 373, 377, 378, 380, 381, 383, 428, 431, 452, 454, 455, 456, 458, 460, 464, 466, 468, 474, 517, 547, 552, 553, 554, 555, 585, 588, 595, 596, 663, 676, 680, 721, 722, 726, 727, 729, 730, 737, 738, 739, 740, 741, 744, 762, 765, 766, 776, 789, 795, 796, 799, 802, 813, 815, 816, 817, 822, 823, 942, 943, 947, 948, 949, 950, 953, 954, 955, 956, 957, 960, 963, 964, 969, 978, 984, 986, 1008], "jupyt": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 152, 153, 154, 155, 156, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 323, 324, 325, 326, 327, 346, 347, 374, 432, 863, 969, 972, 973, 1004, 1007], "plot_cyclical_feature_engin": [4, 974], "ipynb": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 152, 153, 154, 155, 156, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 323, 324, 325, 326, 327], "py": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 152, 153, 154, 155, 156, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 323, 324, 325, 326, 327, 333, 343, 345, 346, 349, 351, 353, 359, 363, 381, 384, 404, 408, 418, 425, 462, 494, 608, 610, 611, 616, 617, 624, 625, 626, 627, 645, 648, 840, 844, 897, 953, 972, 974, 985, 987, 993, 995, 999, 1003, 1007], "interpol": [4, 14, 30, 37, 47, 48, 51, 55, 77, 82, 87, 90, 141, 144, 150, 159, 160, 172, 197, 211, 217, 247, 252, 262, 263, 270, 276, 297, 307, 313, 383, 599, 609, 617, 627, 636, 648, 664, 671, 808, 816, 826, 840, 844, 944, 949, 953, 963, 974, 1000, 1005], "partial": [4, 8, 12, 47, 78, 79, 118, 150, 151, 199, 207, 289, 292, 342, 359, 362, 375, 376, 378, 380, 383, 428, 446, 447, 448, 449, 460, 465, 498, 500, 505, 526, 553, 596, 597, 621, 751, 791, 793, 794, 821, 822, 823, 826, 838, 839, 842, 845, 874, 950, 957, 967, 974, 987, 989, 990, 994, 1001, 1002, 1006, 1010], "individu": [4, 43, 57, 75, 100, 104, 118, 121, 130, 146, 150, 151, 156, 181, 199, 209, 218, 219, 241, 243, 257, 287, 294, 311, 315, 333, 346, 349, 352, 354, 359, 362, 370, 374, 377, 380, 381, 401, 416, 426, 428, 460, 465, 467, 473, 519, 520, 523, 524, 526, 527, 529, 531, 532, 533, 534, 567, 573, 574, 596, 597, 607, 609, 621, 622, 623, 632, 635, 636, 637, 638, 639, 640, 641, 642, 651, 676, 683, 691, 697, 713, 714, 748, 753, 754, 762, 776, 793, 797, 798, 800, 801, 802, 803, 804, 823, 826, 834, 835, 837, 838, 839, 842, 844, 845, 850, 851, 852, 865, 866, 953, 954, 963, 968, 974, 982, 987, 989, 994, 997, 999, 1005, 1007, 1009], "galleri": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 152, 153, 154, 155, 156, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 323, 324, 325, 326, 327, 340, 345, 347, 359, 363, 366, 974, 983, 993, 997, 1000], "sphinx": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 152, 153, 154, 155, 156, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 323, 324, 325, 326, 327, 333, 345, 349, 359, 363, 366, 987, 993, 1000], "kernelpca": [5, 374, 378, 497, 498, 505, 508, 652, 654, 656, 831, 963, 994, 995, 999, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010], "short": [5, 83, 111, 117, 172, 236, 275, 319, 345, 353, 377, 381, 385, 949, 950, 956, 976, 998, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "take": [5, 8, 13, 20, 28, 43, 50, 52, 54, 63, 71, 75, 85, 87, 101, 110, 137, 139, 142, 146, 153, 158, 164, 185, 189, 190, 205, 215, 226, 227, 233, 239, 243, 247, 248, 257, 258, 261, 264, 265, 266, 268, 269, 278, 291, 299, 303, 304, 307, 317, 320, 321, 324, 332, 333, 334, 339, 340, 343, 345, 347, 350, 351, 352, 353, 357, 359, 360, 371, 373, 374, 376, 377, 378, 380, 381, 382, 383, 385, 401, 407, 410, 411, 413, 414, 416, 421, 422, 423, 425, 427, 433, 483, 497, 502, 503, 504, 510, 511, 545, 556, 559, 560, 562, 563, 564, 574, 575, 580, 584, 585, 588, 596, 607, 613, 635, 637, 638, 639, 640, 643, 655, 656, 663, 669, 671, 673, 683, 692, 693, 701, 705, 706, 719, 734, 737, 741, 742, 743, 744, 746, 747, 750, 751, 762, 763, 767, 768, 776, 780, 789, 807, 808, 809, 811, 813, 814, 815, 816, 817, 829, 839, 860, 861, 865, 866, 867, 868, 869, 870, 871, 889, 923, 942, 945, 949, 950, 952, 953, 954, 956, 958, 959, 960, 963, 968, 969, 977, 978, 982, 984, 990, 993, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010], "exact": [5, 7, 77, 92, 107, 142, 185, 213, 258, 294, 328, 332, 333, 339, 345, 347, 354, 357, 358, 359, 373, 380, 382, 398, 446, 447, 448, 452, 460, 498, 499, 505, 525, 526, 602, 606, 610, 656, 762, 776, 786, 787, 788, 867, 870, 942, 945, 949, 950, 959, 963, 967, 968, 1000, 1001, 1003], "usp": 5, "digit": [5, 12, 13, 27, 33, 36, 42, 45, 48, 50, 53, 56, 58, 59, 68, 69, 79, 81, 90, 106, 125, 133, 135, 150, 171, 172, 188, 196, 197, 200, 201, 203, 205, 212, 213, 227, 232, 236, 237, 240, 262, 267, 268, 272, 274, 275, 293, 295, 298, 320, 338, 345, 351, 373, 379, 380, 382, 405, 409, 411, 466, 505, 508, 513, 530, 622, 652, 653, 654, 655, 656, 661, 668, 669, 677, 681, 682, 700, 756, 758, 791, 807, 814, 821, 825, 826, 835, 845, 851, 858, 861, 870, 877, 878, 879, 942, 948, 950, 953, 956, 958, 966, 974, 978, 982, 985, 986, 989, 997], "reproduc": [5, 12, 57, 101, 153, 158, 169, 247, 255, 276, 333, 344, 345, 347, 348, 353, 357, 359, 367, 373, 377, 378, 381, 385, 404, 418, 424, 433, 438, 452, 455, 456, 459, 461, 467, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 507, 508, 509, 510, 511, 515, 517, 518, 519, 520, 523, 524, 525, 526, 527, 571, 572, 574, 575, 598, 603, 604, 605, 606, 610, 611, 614, 616, 617, 618, 624, 625, 626, 627, 630, 631, 632, 635, 640, 642, 643, 653, 654, 656, 657, 658, 756, 760, 761, 764, 765, 766, 767, 768, 774, 776, 777, 778, 779, 780, 781, 782, 789, 790, 791, 795, 796, 799, 810, 814, 821, 822, 823, 830, 842, 846, 854, 857, 858, 865, 866, 867, 870, 901, 902, 924, 927, 945, 972, 976, 993, 1001, 1006, 1007], "sect": 5, "bak\u0131r": [5, 378, 499], "g\u00f6khan": [5, 378, 499], "h": [5, 6, 45, 55, 87, 88, 101, 102, 119, 135, 139, 153, 226, 263, 266, 273, 280, 291, 301, 303, 321, 342, 351, 371, 373, 375, 378, 379, 380, 381, 384, 408, 483, 496, 499, 502, 504, 511, 517, 531, 532, 546, 554, 571, 572, 653, 657, 668, 672, 720, 800, 804, 805, 806, 811, 821, 836, 845, 945, 947, 949, 950, 951, 953, 955, 957, 958, 967, 969, 983, 999, 1004, 1008, 1009, 1010], "jason": [5, 378, 499, 861, 999, 1001, 1005, 1008], "weston": [5, 378, 499, 557, 558, 861], "bernhard": [5, 378, 499, 796, 831, 861, 954, 959, 968, 999], "sch\u00f6lkopf": [5, 378, 499, 831, 959, 963, 968], "pre": [5, 67, 153, 170, 278, 321, 343, 345, 359, 363, 375, 377, 378, 380, 381, 382, 384, 385, 407, 408, 411, 423, 497, 499, 654, 676, 726, 828, 870, 953, 958, 963, 968, 969, 972, 973, 989, 996, 1001, 1007, 1011], "advanc": [5, 118, 150, 154, 207, 209, 238, 257, 334, 348, 373, 378, 453, 465, 499, 596, 603, 746, 760, 814, 823, 826, 845, 874, 945, 953, 956, 963, 974, 977, 990, 995], "neural": [5, 6, 29, 238, 275, 359, 367, 377, 378, 380, 385, 497, 499, 502, 504, 511, 531, 532, 603, 609, 660, 704, 760, 814, 821, 822, 823, 831, 945, 949, 950, 951, 953, 956, 959, 963, 967, 969, 972, 975, 977, 983, 988, 989, 993, 1005], "system": [5, 92, 165, 238, 245, 328, 332, 333, 334, 340, 342, 345, 346, 347, 348, 353, 357, 363, 373, 378, 380, 384, 408, 435, 436, 442, 499, 503, 507, 514, 603, 609, 614, 615, 618, 619, 620, 646, 647, 689, 719, 732, 760, 814, 860, 861, 921, 949, 953, 956, 965, 972, 973, 977, 987, 993, 1001, 1002], "2004": [5, 135, 238, 255, 340, 342, 373, 375, 378, 437, 499, 571, 572, 653, 657, 669, 706, 746, 861, 947, 949, 950, 955, 968, 985], "449": [5, 154, 378, 499], "456": [5, 378, 499], "author": [5, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 20, 21, 23, 24, 25, 26, 28, 30, 34, 36, 37, 39, 43, 44, 45, 49, 50, 51, 53, 54, 58, 62, 63, 64, 66, 67, 68, 70, 71, 77, 87, 89, 91, 92, 94, 97, 99, 102, 103, 104, 105, 106, 107, 113, 115, 116, 120, 121, 135, 137, 138, 140, 141, 142, 143, 144, 146, 149, 158, 160, 161, 163, 165, 166, 168, 169, 170, 172, 173, 174, 175, 181, 182, 183, 185, 186, 188, 189, 196, 197, 198, 199, 201, 202, 203, 204, 206, 208, 211, 213, 214, 216, 218, 224, 226, 227, 237, 239, 241, 242, 244, 251, 257, 258, 260, 263, 270, 271, 273, 276, 278, 279, 281, 282, 283, 296, 297, 298, 299, 301, 315, 319, 320, 321, 339, 345, 349, 353, 357, 359, 360, 377, 415, 498, 832, 945, 972, 996], "fr": [5, 7, 8, 9, 10, 23, 24, 28, 34, 39, 51, 54, 71, 77, 107, 143, 160, 165, 166, 168, 172, 174, 175, 186, 202, 203, 208, 211, 218, 239, 241, 244, 251, 270, 283, 315, 319, 320, 321, 495, 501, 622, 628, 649, 650, 721, 722, 951, 953], "licenc": [5, 339], "bsd": [5, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 20, 21, 23, 24, 25, 26, 28, 29, 30, 34, 36, 37, 39, 42, 43, 44, 45, 48, 49, 50, 51, 54, 58, 62, 63, 64, 66, 67, 69, 70, 71, 77, 82, 83, 87, 89, 91, 92, 93, 94, 97, 99, 101, 102, 103, 104, 105, 106, 107, 112, 113, 115, 116, 120, 121, 135, 137, 138, 140, 141, 142, 143, 144, 146, 149, 158, 163, 164, 166, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 181, 182, 183, 186, 188, 189, 197, 198, 199, 202, 203, 204, 206, 208, 211, 213, 214, 216, 218, 224, 226, 239, 242, 244, 251, 257, 258, 260, 266, 267, 268, 270, 271, 273, 276, 278, 279, 280, 281, 282, 283, 296, 297, 298, 299, 301, 311, 312, 315, 316, 319, 320, 321, 351], "claus": [5, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 20, 21, 24, 26, 28, 29, 30, 34, 36, 37, 39, 42, 43, 44, 45, 48, 49, 50, 51, 54, 58, 62, 63, 64, 66, 67, 69, 70, 71, 77, 82, 83, 87, 89, 91, 92, 93, 94, 97, 99, 101, 102, 103, 104, 105, 106, 107, 112, 113, 115, 116, 120, 121, 135, 137, 138, 140, 141, 142, 143, 144, 146, 149, 158, 163, 164, 166, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 181, 182, 183, 186, 188, 189, 197, 198, 199, 202, 203, 208, 213, 214, 216, 218, 224, 226, 239, 244, 251, 257, 258, 260, 266, 267, 268, 270, 271, 273, 278, 279, 280, 281, 282, 283, 311, 312, 315, 316, 319, 320, 321], "normal": [5, 10, 12, 17, 19, 20, 25, 27, 32, 34, 37, 41, 43, 54, 58, 59, 63, 69, 71, 73, 74, 75, 79, 80, 88, 101, 102, 104, 107, 113, 114, 117, 118, 130, 140, 143, 144, 149, 150, 152, 153, 159, 160, 161, 162, 163, 165, 171, 174, 176, 179, 183, 184, 185, 187, 195, 199, 204, 218, 224, 229, 230, 232, 235, 238, 244, 263, 264, 267, 277, 279, 283, 288, 291, 294, 299, 307, 320, 321, 328, 337, 340, 341, 342, 345, 350, 354, 358, 359, 369, 370, 371, 373, 374, 376, 379, 380, 381, 385, 404, 413, 415, 416, 417, 426, 428, 429, 439, 446, 447, 448, 453, 460, 476, 479, 483, 490, 491, 497, 500, 505, 506, 508, 512, 513, 516, 517, 518, 521, 522, 523, 524, 526, 527, 528, 529, 530, 543, 544, 546, 552, 553, 554, 555, 575, 589, 591, 603, 622, 623, 633, 636, 640, 644, 651, 655, 659, 661, 667, 668, 670, 682, 687, 689, 697, 699, 704, 708, 712, 713, 715, 718, 719, 720, 724, 733, 757, 758, 759, 765, 766, 791, 793, 802, 804, 810, 811, 814, 825, 826, 829, 830, 833, 835, 838, 839, 840, 841, 842, 843, 845, 850, 851, 853, 854, 855, 856, 860, 861, 873, 874, 875, 876, 901, 902, 906, 929, 930, 935, 936, 942, 945, 947, 949, 950, 951, 952, 955, 959, 964, 966, 968, 969, 974, 983, 985, 986, 987, 989, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "pixel": [5, 6, 14, 20, 30, 44, 45, 50, 87, 100, 108, 133, 150, 155, 156, 158, 212, 236, 275, 276, 342, 373, 378, 380, 381, 382, 457, 458, 459, 528, 549, 550, 571, 572, 598, 956, 958, 969, 974, 983, 986], "train_test_split": [5, 6, 7, 10, 13, 23, 24, 26, 29, 30, 67, 71, 80, 92, 101, 106, 108, 112, 113, 114, 115, 116, 117, 120, 131, 132, 152, 153, 155, 156, 158, 165, 176, 181, 188, 189, 196, 197, 199, 209, 218, 221, 222, 232, 235, 236, 241, 245, 247, 251, 257, 261, 266, 267, 273, 275, 276, 280, 282, 283, 285, 287, 288, 289, 294, 300, 323, 327, 328, 350, 358, 369, 374, 377, 380, 401, 402, 522, 524, 531, 532, 661, 662, 664, 666, 762, 793, 796, 814, 822, 823, 825, 875, 876, 942, 943, 953, 955, 956, 961, 963, 968, 983, 990, 993, 994, 996, 997, 998, 999, 1000, 1002, 1006, 1010], "data_id": [5, 111, 142, 153, 181, 199, 209, 255, 284, 339, 460], "41082": 5, "return_x_i": [5, 7, 15, 55, 66, 67, 68, 69, 87, 107, 111, 124, 126, 127, 131, 148, 149, 155, 156, 158, 166, 168, 169, 170, 172, 177, 178, 188, 196, 197, 209, 217, 218, 221, 222, 234, 237, 240, 245, 246, 253, 255, 257, 260, 267, 274, 275, 276, 283, 287, 289, 291, 292, 293, 294, 299, 310, 321, 323, 338, 350, 351, 358, 367, 373, 374, 377, 380, 382, 385, 393, 410, 452, 453, 454, 455, 456, 458, 459, 460, 461, 464, 465, 466, 468, 469, 474, 496, 497, 498, 499, 522, 525, 526, 531, 532, 556, 559, 560, 562, 563, 564, 565, 566, 574, 583, 584, 586, 587, 602, 603, 622, 623, 632, 637, 638, 639, 652, 653, 654, 655, 657, 659, 665, 675, 751, 765, 766, 768, 793, 798, 809, 814, 817, 874, 875, 876, 943, 948, 953, 954, 955, 956, 963, 978, 982, 983, 985, 986, 990, 999, 1001, 1003, 1006], "idea": [5, 50, 75, 76, 107, 135, 142, 153, 182, 201, 263, 307, 323, 332, 333, 345, 350, 351, 375, 376, 377, 378, 379, 380, 382, 571, 572, 949, 950, 953, 956, 959, 971, 977, 987], "noisi": [5, 31, 46, 52, 59, 88, 101, 131, 137, 143, 165, 180, 183, 204, 211, 230, 239, 245, 247, 248, 283, 325, 326, 328, 373, 381, 383, 384, 408, 410, 414, 485, 488, 902, 948, 950, 956, 968, 972], "nois": [5, 10, 14, 20, 21, 26, 29, 31, 37, 41, 46, 49, 51, 52, 58, 59, 64, 71, 80, 87, 88, 90, 92, 94, 102, 104, 114, 118, 119, 136, 137, 138, 142, 146, 150, 160, 162, 163, 165, 170, 171, 176, 179, 180, 183, 184, 185, 186, 198, 204, 206, 208, 210, 211, 214, 238, 246, 251, 252, 270, 273, 274, 280, 285, 288, 294, 314, 325, 326, 328, 341, 347, 350, 371, 373, 378, 380, 382, 383, 384, 408, 410, 416, 475, 477, 478, 479, 480, 481, 482, 486, 488, 489, 494, 496, 498, 505, 570, 571, 572, 573, 575, 577, 578, 579, 580, 581, 585, 586, 588, 589, 608, 609, 613, 614, 615, 617, 618, 619, 620, 627, 628, 629, 635, 643, 656, 842, 854, 860, 946, 948, 949, 950, 953, 956, 966, 974, 985, 986, 994, 999, 1004, 1006, 1007], "approach": [5, 8, 55, 60, 63, 91, 135, 137, 148, 153, 156, 163, 169, 181, 183, 189, 199, 201, 255, 284, 311, 319, 320, 321, 334, 344, 345, 351, 354, 359, 363, 367, 371, 373, 375, 376, 377, 378, 379, 380, 381, 382, 383, 401, 407, 410, 412, 416, 426, 484, 496, 546, 553, 575, 599, 622, 623, 638, 639, 794, 810, 902, 942, 943, 949, 950, 953, 954, 956, 957, 963, 967, 968, 971, 972, 977, 980, 985, 986, 997, 1009], "copi": [5, 12, 13, 17, 41, 59, 71, 90, 104, 135, 148, 149, 153, 154, 155, 167, 174, 187, 197, 199, 202, 258, 296, 297, 299, 301, 320, 324, 333, 342, 343, 345, 347, 349, 350, 351, 357, 359, 398, 401, 404, 406, 407, 408, 410, 411, 413, 418, 423, 446, 447, 448, 449, 464, 466, 474, 496, 497, 498, 499, 505, 512, 517, 518, 523, 525, 526, 536, 554, 561, 571, 572, 574, 575, 592, 594, 608, 609, 610, 611, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 629, 635, 636, 638, 643, 645, 648, 649, 650, 695, 732, 755, 762, 776, 805, 806, 820, 828, 831, 834, 835, 836, 837, 841, 842, 843, 845, 848, 850, 851, 852, 853, 854, 855, 856, 860, 861, 865, 867, 868, 869, 870, 871, 880, 883, 885, 886, 912, 924, 926, 927, 963, 968, 969, 973, 979, 982, 987, 993, 996, 999, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010], "add": [5, 12, 16, 17, 20, 24, 25, 26, 30, 31, 37, 41, 51, 71, 75, 76, 80, 88, 110, 113, 131, 135, 137, 142, 143, 144, 148, 149, 163, 170, 176, 182, 184, 185, 196, 204, 208, 212, 214, 215, 245, 247, 248, 258, 270, 280, 282, 287, 289, 290, 310, 311, 314, 315, 320, 332, 343, 344, 345, 346, 347, 349, 351, 353, 359, 363, 369, 371, 377, 380, 381, 382, 479, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 566, 591, 592, 594, 596, 622, 623, 658, 661, 783, 805, 806, 862, 892, 910, 911, 921, 942, 943, 952, 959, 963, 966, 967, 973, 985, 986, 993, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "corrupt": [5, 94, 165, 187, 198, 357, 821, 949, 961], "uncorrupt": 5, "base": [5, 12, 13, 14, 15, 17, 20, 24, 25, 26, 32, 46, 53, 54, 55, 64, 66, 67, 71, 75, 83, 87, 88, 99, 101, 102, 107, 112, 113, 114, 115, 119, 121, 124, 129, 132, 137, 142, 143, 145, 152, 154, 155, 156, 159, 160, 166, 167, 169, 170, 175, 176, 181, 182, 189, 198, 199, 201, 208, 215, 216, 218, 235, 236, 241, 255, 257, 258, 271, 276, 278, 279, 281, 283, 289, 291, 301, 305, 311, 320, 323, 332, 333, 339, 340, 341, 342, 343, 346, 347, 348, 353, 357, 359, 360, 362, 371, 374, 378, 379, 381, 383, 384, 385, 401, 408, 410, 411, 412, 413, 414, 416, 420, 421, 425, 427, 428, 429, 430, 431, 451, 464, 465, 472, 473, 496, 497, 499, 500, 501, 502, 503, 505, 510, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 542, 552, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 570, 571, 572, 574, 575, 580, 581, 582, 585, 588, 596, 597, 599, 600, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 622, 628, 633, 635, 636, 637, 638, 639, 644, 646, 647, 649, 650, 651, 654, 656, 668, 681, 689, 698, 699, 700, 702, 704, 718, 719, 720, 748, 751, 758, 762, 764, 765, 766, 768, 769, 771, 776, 780, 781, 782, 783, 789, 791, 795, 796, 799, 807, 808, 809, 811, 813, 815, 816, 817, 822, 823, 826, 827, 830, 837, 838, 840, 844, 845, 846, 854, 857, 858, 861, 862, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 888, 896, 921, 922, 942, 944, 945, 947, 948, 950, 953, 954, 955, 956, 957, 958, 959, 960, 963, 965, 966, 967, 968, 969, 971, 972, 973, 974, 977, 982, 987, 989, 993, 995, 996, 997, 998, 999, 1000, 1001, 1004], "solv": [5, 6, 63, 137, 170, 213, 238, 257, 344, 345, 346, 347, 350, 357, 373, 375, 377, 378, 383, 411, 417, 426, 442, 495, 501, 502, 503, 507, 509, 510, 511, 512, 599, 601, 610, 616, 618, 619, 628, 629, 634, 636, 638, 641, 649, 650, 651, 795, 865, 866, 869, 902, 944, 947, 949, 950, 953, 954, 967, 968, 969, 971, 972, 977, 980, 983, 987, 999, 1003, 1006], "x_train": [5, 6, 7, 8, 10, 13, 23, 24, 25, 26, 29, 30, 66, 67, 71, 73, 79, 80, 92, 101, 104, 108, 112, 113, 114, 115, 116, 117, 120, 127, 128, 131, 132, 143, 144, 145, 146, 152, 153, 154, 155, 156, 158, 161, 165, 176, 178, 179, 182, 188, 189, 195, 196, 197, 199, 209, 217, 221, 222, 226, 228, 232, 235, 236, 241, 245, 247, 251, 257, 261, 264, 266, 267, 273, 275, 276, 280, 282, 283, 285, 287, 288, 289, 294, 299, 300, 306, 319, 323, 327, 328, 332, 339, 347, 350, 358, 374, 377, 380, 401, 402, 473, 522, 523, 524, 531, 532, 661, 662, 664, 666, 791, 793, 796, 814, 822, 823, 825, 839, 875, 876, 943, 953, 955, 956, 957, 959, 961, 963, 967, 968, 982, 983, 990], "x_test": [5, 6, 7, 8, 10, 13, 23, 24, 25, 26, 29, 30, 66, 67, 71, 73, 79, 80, 92, 101, 104, 106, 108, 113, 114, 115, 116, 117, 120, 127, 128, 131, 132, 142, 145, 152, 153, 154, 155, 156, 158, 161, 165, 171, 176, 178, 179, 187, 188, 189, 195, 196, 197, 199, 209, 211, 217, 221, 222, 226, 232, 235, 236, 241, 245, 247, 251, 252, 257, 261, 264, 266, 267, 273, 275, 276, 280, 282, 283, 285, 287, 288, 289, 294, 299, 300, 306, 319, 323, 325, 326, 327, 328, 332, 339, 347, 350, 358, 374, 377, 380, 402, 434, 435, 436, 437, 438, 439, 440, 473, 522, 523, 524, 531, 532, 661, 662, 664, 666, 791, 793, 796, 814, 822, 823, 825, 839, 875, 876, 943, 953, 955, 956, 957, 959, 963, 967, 968, 969, 982, 983, 985, 990, 993], "y_train": [5, 6, 7, 8, 10, 13, 23, 24, 25, 26, 29, 30, 66, 67, 71, 79, 80, 92, 101, 104, 108, 112, 113, 114, 115, 116, 117, 120, 127, 128, 131, 132, 143, 144, 145, 146, 152, 153, 154, 155, 156, 158, 161, 165, 176, 178, 179, 182, 188, 189, 196, 197, 209, 217, 221, 222, 226, 232, 235, 236, 241, 245, 247, 251, 257, 261, 266, 267, 273, 275, 276, 280, 283, 285, 287, 288, 289, 294, 296, 297, 299, 300, 301, 319, 323, 327, 328, 332, 339, 347, 350, 358, 374, 377, 380, 401, 402, 522, 523, 524, 531, 532, 661, 662, 664, 666, 791, 793, 796, 814, 822, 823, 825, 875, 876, 943, 953, 955, 956, 961, 963, 968, 982, 983, 990], "y_test": [5, 6, 7, 8, 10, 13, 23, 24, 25, 26, 29, 30, 66, 67, 71, 79, 80, 92, 101, 104, 106, 108, 113, 114, 115, 116, 117, 120, 127, 128, 131, 132, 145, 152, 153, 154, 155, 156, 158, 165, 176, 178, 181, 187, 188, 189, 196, 197, 199, 209, 217, 221, 222, 226, 232, 235, 236, 241, 245, 247, 251, 257, 261, 266, 267, 273, 275, 276, 280, 283, 285, 287, 288, 289, 294, 299, 300, 319, 323, 327, 328, 339, 350, 358, 374, 377, 380, 402, 522, 523, 524, 531, 532, 661, 662, 664, 666, 791, 793, 796, 814, 822, 823, 825, 875, 876, 953, 955, 956, 963, 968, 982, 983, 990, 993], "stratifi": [5, 92, 108, 117, 131, 155, 196, 209, 218, 222, 233, 238, 241, 247, 261, 266, 267, 287, 347, 359, 515, 523, 531, 532, 566, 623, 630, 632, 640, 762, 765, 766, 768, 776, 777, 778, 780, 781, 782, 784, 785, 786, 787, 788, 789, 790, 791, 792, 796, 799, 814, 822, 924, 953, 956, 982, 998, 999, 1000, 1002, 1003, 1006], "train_siz": [5, 7, 10, 101, 120, 138, 158, 197, 214, 218, 240, 251, 289, 292, 315, 764, 768, 779, 782, 789, 791, 948, 982, 993, 994, 999, 1000], "1_000": [5, 32, 45, 68, 92, 137, 142, 144, 154, 212, 235, 315, 501, 503, 665, 784, 792], "rng": [5, 20, 21, 29, 32, 34, 41, 47, 59, 76, 80, 87, 89, 94, 102, 114, 117, 118, 120, 137, 138, 141, 143, 144, 146, 148, 149, 152, 155, 160, 161, 162, 163, 165, 170, 175, 182, 183, 188, 195, 208, 214, 215, 217, 224, 233, 241, 244, 249, 250, 273, 282, 285, 288, 289, 291, 293, 294, 296, 297, 301, 310, 325, 326, 328, 333, 347, 350, 364, 386, 434, 438, 439, 440, 442, 443, 444, 445, 607, 613, 634, 636, 642, 651, 774, 800, 801, 802, 804, 805, 806, 810, 813, 815, 816, 817, 842, 854, 857, 858, 860, 861, 862, 871, 978], "randomst": [5, 14, 20, 21, 23, 29, 32, 34, 41, 47, 58, 59, 76, 77, 80, 87, 89, 94, 102, 113, 114, 117, 118, 120, 131, 137, 138, 141, 143, 144, 146, 148, 149, 152, 155, 160, 161, 162, 163, 165, 170, 175, 182, 183, 188, 195, 204, 208, 214, 215, 224, 227, 233, 241, 244, 245, 247, 248, 249, 250, 273, 279, 281, 282, 285, 288, 289, 291, 293, 294, 296, 297, 301, 310, 325, 326, 347, 350, 354, 359, 364, 378, 385, 386, 404, 407, 411, 413, 415, 416, 417, 418, 422, 423, 424, 426, 433, 434, 438, 439, 440, 442, 443, 444, 445, 452, 455, 456, 459, 461, 467, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 507, 508, 509, 510, 511, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 547, 548, 571, 572, 574, 575, 591, 596, 598, 603, 604, 605, 606, 607, 610, 611, 613, 614, 616, 617, 618, 622, 623, 624, 625, 626, 627, 630, 631, 632, 634, 635, 636, 638, 640, 641, 642, 643, 651, 653, 654, 655, 656, 657, 658, 659, 665, 744, 756, 760, 761, 764, 765, 766, 767, 768, 774, 776, 777, 778, 779, 780, 781, 782, 789, 790, 791, 795, 796, 799, 800, 801, 802, 804, 805, 806, 810, 814, 821, 822, 823, 830, 842, 846, 854, 857, 858, 860, 861, 862, 865, 866, 867, 870, 871, 873, 874, 875, 876, 888, 901, 902, 922, 924, 927, 963, 978, 989], "x_test_noisi": 5, "x_train_noisi": 5, "helper": [5, 6, 90, 199, 249, 338, 347, 348, 358, 359, 377, 432, 539, 863, 982, 983, 993, 1000, 1001, 1002, 1006], "qualit": [5, 6, 50, 52, 58, 107, 114, 181, 292, 340, 373, 403, 665, 983, 1008], "assess": [5, 13, 34, 57, 101, 112, 114, 153, 181, 199, 218, 234, 235, 237, 241, 371, 380, 665, 706, 952, 953, 959, 973, 1008], "plot_digit": 5, "small": [5, 11, 13, 21, 26, 36, 45, 46, 50, 52, 66, 73, 77, 80, 84, 92, 102, 104, 111, 113, 114, 142, 144, 153, 154, 161, 167, 171, 172, 182, 185, 187, 196, 198, 199, 226, 238, 245, 250, 260, 271, 274, 276, 278, 280, 282, 289, 296, 301, 307, 312, 315, 319, 320, 334, 338, 340, 342, 345, 348, 354, 359, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 381, 382, 386, 405, 407, 409, 410, 411, 413, 422, 423, 427, 439, 460, 462, 502, 504, 511, 519, 520, 521, 525, 526, 528, 546, 553, 554, 566, 571, 572, 614, 618, 619, 620, 622, 623, 643, 646, 647, 709, 765, 766, 780, 790, 793, 822, 823, 830, 858, 867, 870, 902, 942, 947, 948, 949, 950, 952, 953, 954, 955, 956, 957, 958, 960, 961, 963, 965, 966, 969, 973, 977, 985, 986, 993, 994, 996, 998, 999, 1000, 1001, 1002, 1004, 1005, 1007, 1008, 1009, 1010], "img": [5, 47, 63, 470, 550], "ravel": [5, 14, 16, 17, 19, 25, 39, 50, 51, 55, 75, 96, 102, 104, 110, 114, 119, 120, 121, 128, 137, 139, 141, 142, 143, 144, 153, 160, 171, 172, 174, 181, 194, 195, 202, 206, 208, 212, 214, 218, 222, 226, 228, 241, 245, 247, 258, 263, 264, 270, 271, 273, 274, 275, 276, 280, 281, 291, 301, 307, 312, 313, 314, 316, 317, 319, 325, 326, 429, 457, 458, 459, 595, 682, 940, 953, 1009], "imshow": [5, 6, 14, 30, 37, 43, 44, 45, 47, 48, 50, 51, 55, 77, 82, 87, 90, 97, 139, 140, 141, 145, 156, 172, 197, 202, 217, 249, 262, 276, 296, 297, 307, 313, 316, 339, 596, 661, 983, 984, 1007], "grei": [5, 248, 278, 315, 340], "off": [5, 12, 14, 34, 36, 37, 44, 45, 49, 50, 73, 77, 79, 87, 107, 185, 202, 213, 217, 232, 237, 239, 240, 278, 297, 301, 307, 317, 319, 340, 345, 347, 373, 375, 382, 406, 517, 518, 523, 524, 552, 555, 598, 620, 656, 679, 760, 761, 762, 765, 766, 776, 788, 906, 952, 958, 968, 973, 993, 997, 998, 1000], "fontsiz": [5, 8, 10, 15, 32, 47, 57, 84, 90, 110, 130, 140, 141, 143, 146, 154, 161, 171, 180, 192, 202, 203, 227, 233, 242, 243, 244, 249, 250, 276, 282, 314, 879], "mse": [5, 7, 73, 74, 112, 114, 115, 148, 149, 181, 183, 185, 187, 252, 294, 611, 617, 713, 953, 969, 1004, 1006], "nmse": [5, 252], "2f": [5, 8, 11, 13, 19, 29, 36, 39, 41, 43, 47, 49, 59, 61, 64, 79, 85, 90, 96, 114, 120, 121, 130, 153, 154, 158, 161, 170, 172, 177, 181, 196, 197, 198, 199, 208, 212, 218, 237, 241, 242, 244, 246, 247, 248, 266, 267, 273, 280, 283, 291, 307, 319, 320, 328, 374, 377, 380, 660, 789, 792], "linear": [5, 9, 10, 11, 12, 13, 14, 16, 26, 27, 28, 29, 34, 49, 54, 70, 71, 73, 74, 75, 76, 77, 80, 83, 87, 92, 95, 104, 106, 119, 121, 124, 126, 128, 130, 133, 135, 141, 143, 148, 149, 151, 152, 154, 158, 161, 163, 165, 167, 169, 170, 171, 176, 178, 179, 182, 183, 185, 186, 189, 191, 192, 193, 194, 195, 197, 198, 199, 200, 203, 205, 211, 212, 214, 216, 217, 220, 228, 229, 232, 234, 235, 236, 238, 241, 243, 244, 245, 246, 247, 248, 252, 263, 264, 266, 267, 268, 271, 273, 276, 278, 279, 280, 281, 283, 285, 289, 290, 301, 302, 304, 307, 308, 309, 312, 315, 316, 317, 319, 325, 326, 333, 337, 341, 342, 343, 347, 348, 350, 359, 362, 373, 376, 377, 378, 379, 380, 381, 382, 383, 385, 406, 419, 429, 431, 439, 446, 447, 448, 460, 465, 466, 476, 479, 485, 488, 496, 497, 498, 499, 500, 503, 505, 507, 508, 512, 513, 514, 518, 530, 546, 553, 557, 558, 570, 573, 578, 584, 595, 599, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 648, 651, 652, 653, 654, 655, 656, 657, 665, 671, 680, 713, 716, 728, 730, 737, 748, 762, 773, 777, 788, 791, 805, 806, 810, 814, 821, 822, 823, 826, 830, 831, 832, 835, 838, 840, 842, 843, 844, 845, 854, 858, 865, 866, 867, 868, 869, 870, 871, 942, 944, 945, 946, 948, 953, 956, 957, 958, 959, 960, 961, 967, 968, 972, 974, 975, 977, 978, 981, 982, 987, 988, 989, 993, 994, 996, 997, 998, 999, 1000, 1001, 1004, 1005, 1006, 1007], "radial": [5, 92, 137, 142, 144, 307, 311, 337, 416, 586, 655, 951, 968, 989], "rbf": [5, 6, 7, 10, 11, 16, 28, 29, 92, 122, 128, 137, 138, 139, 141, 142, 143, 144, 145, 146, 150, 158, 195, 207, 208, 214, 236, 238, 240, 243, 253, 264, 301, 302, 304, 313, 314, 337, 374, 378, 380, 416, 426, 466, 468, 499, 505, 574, 575, 576, 577, 580, 582, 583, 584, 585, 587, 588, 595, 603, 604, 605, 606, 607, 640, 655, 728, 737, 739, 762, 773, 776, 782, 825, 845, 860, 861, 865, 867, 868, 869, 870, 871, 942, 945, 946, 948, 950, 953, 959, 963, 966, 974, 978, 983, 989, 999, 1004], "decomposit": [5, 6, 15, 17, 47, 55, 66, 68, 69, 70, 80, 83, 85, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 119, 158, 201, 202, 204, 213, 216, 217, 220, 237, 262, 267, 283, 291, 294, 320, 334, 338, 351, 354, 359, 369, 370, 371, 374, 380, 413, 415, 416, 417, 426, 446, 447, 448, 459, 513, 520, 575, 614, 615, 616, 617, 618, 619, 620, 627, 628, 629, 636, 637, 638, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 760, 761, 814, 821, 824, 827, 843, 874, 901, 902, 949, 950, 953, 970, 972, 974, 975, 981, 983, 988, 989, 993, 994, 995, 996, 997, 998, 999, 1000], "kernel_pca": [5, 92, 374], "400": [5, 25, 47, 87, 116, 120, 137, 149, 187, 206, 250, 274, 320, 340, 378, 459, 987], "1e": [5, 6, 7, 10, 17, 25, 43, 87, 135, 137, 140, 142, 143, 144, 145, 146, 148, 153, 161, 174, 181, 182, 188, 195, 199, 204, 208, 214, 219, 224, 227, 230, 236, 246, 249, 275, 285, 290, 293, 300, 305, 307, 315, 319, 351, 385, 407, 411, 416, 423, 426, 435, 436, 442, 446, 447, 448, 495, 496, 497, 500, 501, 502, 503, 504, 506, 507, 509, 510, 511, 512, 523, 524, 525, 526, 556, 561, 570, 572, 573, 575, 577, 578, 579, 583, 584, 586, 587, 589, 591, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 616, 617, 622, 623, 624, 625, 626, 627, 630, 631, 632, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 648, 651, 653, 654, 655, 656, 657, 658, 659, 691, 704, 748, 760, 761, 776, 800, 801, 802, 803, 804, 805, 806, 814, 822, 823, 830, 860, 861, 865, 866, 867, 868, 869, 870, 871, 939, 942, 953, 957, 961, 963, 967, 983, 987, 1001, 1006, 1007, 1008], "fit_inverse_transform": [5, 92, 499, 1002], "5e": [5, 87, 166, 559, 560, 562], "inde": [5, 7, 24, 32, 36, 37, 50, 52, 55, 77, 80, 92, 101, 104, 134, 135, 137, 153, 155, 160, 165, 169, 170, 181, 183, 240, 241, 245, 247, 255, 258, 278, 283, 315, 320, 328, 332, 344, 350, 358, 359, 360, 373, 375, 380, 531, 532, 949, 963, 967, 1007], "least": [5, 13, 15, 75, 76, 78, 79, 89, 90, 104, 115, 135, 145, 150, 152, 159, 160, 165, 171, 174, 177, 181, 183, 185, 186, 189, 198, 199, 212, 218, 238, 255, 257, 283, 289, 290, 307, 320, 321, 332, 338, 340, 342, 344, 345, 349, 351, 353, 357, 359, 360, 364, 372, 373, 375, 376, 377, 378, 380, 381, 382, 383, 384, 408, 412, 414, 420, 421, 422, 425, 438, 445, 446, 447, 448, 449, 458, 480, 495, 501, 503, 505, 506, 507, 509, 510, 511, 512, 513, 521, 522, 523, 524, 526, 528, 529, 530, 557, 566, 599, 607, 610, 612, 614, 615, 616, 617, 618, 619, 620, 621, 627, 628, 629, 630, 631, 632, 633, 635, 636, 638, 640, 642, 643, 644, 646, 647, 648, 649, 650, 651, 656, 661, 676, 680, 682, 748, 763, 767, 768, 774, 776, 777, 778, 780, 781, 783, 786, 789, 790, 791, 822, 823, 826, 837, 845, 870, 873, 874, 875, 876, 894, 916, 943, 946, 950, 953, 956, 965, 967, 968, 969, 973, 974, 975, 977, 985, 989, 993, 995, 996, 999, 1000, 1004], "hope": [5, 199, 359, 372, 1002], "remov": [5, 15, 16, 17, 51, 52, 66, 71, 135, 148, 149, 153, 156, 239, 278, 285, 287, 288, 289, 294, 319, 320, 323, 328, 337, 340, 344, 345, 346, 347, 349, 350, 354, 359, 363, 366, 373, 374, 377, 380, 381, 383, 384, 405, 406, 408, 409, 411, 413, 414, 421, 442, 452, 453, 490, 491, 498, 499, 501, 503, 505, 510, 517, 531, 532, 533, 534, 543, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 571, 572, 575, 594, 597, 602, 608, 609, 618, 619, 620, 640, 641, 704, 705, 713, 714, 741, 742, 743, 768, 784, 786, 787, 788, 789, 812, 824, 825, 829, 830, 842, 843, 845, 854, 880, 896, 897, 943, 950, 956, 969, 975, 979, 989, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "think": [5, 34, 154, 319, 320, 345, 379, 952, 973, 977, 978], "happen": [5, 106, 169, 278, 284, 320, 328, 332, 333, 343, 344, 345, 349, 350, 351, 357, 359, 360, 363, 373, 375, 377, 380, 401, 479, 536, 622, 748, 843, 845, 865, 949, 953, 954, 968, 973, 987, 1001, 1005, 1006, 1008, 1009, 1010], "ridg": [5, 10, 14, 51, 71, 88, 89, 104, 121, 126, 135, 136, 142, 144, 148, 150, 152, 153, 154, 159, 160, 165, 168, 174, 177, 181, 182, 207, 217, 279, 282, 314, 315, 319, 332, 357, 378, 380, 383, 488, 499, 503, 507, 575, 579, 586, 589, 607, 608, 609, 611, 613, 621, 625, 637, 638, 639, 642, 651, 665, 713, 762, 768, 776, 798, 871, 953, 961, 963, 967, 968, 974, 975, 985, 989, 993, 994, 995, 996, 997, 998, 1000, 1002, 1003, 1006, 1007, 1008, 1009], "x_reconstructed_kernel_pca": [5, 92], "inverse_transform": [5, 48, 51, 92, 132, 215, 262, 320, 364, 378, 381, 409, 429, 446, 447, 448, 497, 498, 499, 502, 503, 504, 505, 507, 508, 545, 552, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 594, 762, 765, 766, 776, 825, 829, 830, 832, 833, 834, 835, 836, 838, 839, 841, 842, 843, 845, 857, 858, 963, 964, 965, 995, 997, 998, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "x_reconstructed_pca": [5, 92], "lower": [5, 13, 16, 25, 29, 31, 55, 74, 80, 83, 87, 89, 94, 101, 104, 107, 110, 114, 117, 137, 139, 141, 143, 145, 154, 155, 165, 166, 167, 171, 181, 182, 183, 184, 194, 201, 205, 211, 212, 217, 226, 230, 237, 238, 240, 241, 245, 246, 248, 251, 261, 262, 264, 265, 280, 283, 291, 299, 307, 313, 319, 320, 321, 324, 340, 345, 371, 372, 373, 376, 377, 378, 379, 380, 381, 384, 408, 412, 428, 431, 462, 473, 496, 498, 505, 508, 517, 523, 524, 525, 526, 527, 552, 553, 555, 567, 575, 577, 578, 579, 581, 583, 584, 586, 587, 589, 596, 597, 599, 601, 641, 643, 676, 680, 688, 691, 697, 702, 760, 761, 811, 813, 815, 816, 817, 819, 846, 865, 866, 867, 868, 869, 872, 889, 948, 949, 950, 952, 953, 954, 956, 957, 958, 959, 960, 961, 965, 967, 968, 969, 985, 995, 996, 1001, 1008, 1010], "analysi": [5, 7, 9, 10, 20, 24, 27, 33, 54, 60, 62, 73, 74, 75, 76, 77, 83, 85, 86, 88, 89, 91, 92, 93, 95, 96, 111, 127, 149, 150, 153, 170, 202, 223, 225, 229, 230, 235, 238, 239, 243, 249, 258, 259, 260, 261, 269, 270, 278, 283, 315, 320, 337, 340, 342, 345, 347, 360, 370, 373, 375, 380, 381, 385, 403, 411, 412, 437, 439, 440, 446, 447, 449, 466, 468, 476, 479, 495, 496, 497, 498, 499, 501, 503, 504, 505, 506, 507, 508, 509, 510, 513, 514, 519, 520, 595, 602, 652, 654, 655, 656, 657, 674, 683, 688, 689, 719, 751, 752, 755, 756, 760, 762, 787, 791, 807, 814, 825, 826, 831, 841, 845, 853, 901, 902, 943, 949, 950, 952, 953, 963, 971, 972, 974, 975, 977, 979, 988, 989, 993, 994, 995, 997, 1002], "favor": [5, 77, 107, 224, 230, 357, 375, 380, 597, 693, 770, 772, 824, 942, 961, 995, 997, 999, 1000, 1002, 1005, 1006, 1007, 1008, 1009, 1010], "background": [5, 11, 44, 63, 117, 276, 280, 340, 343, 345, 353, 373, 457, 458, 950, 958, 967, 1003], "911": [5, 974], "plot_digits_denois": [5, 974], "agglomer": [5, 30, 33, 44, 47, 82, 131, 133, 150, 163, 180, 217, 251, 337, 373, 381, 409, 466, 564, 570, 609, 762, 767, 825, 974, 989], "hand": [5, 27, 48, 50, 80, 82, 89, 90, 92, 107, 114, 130, 133, 142, 150, 153, 154, 174, 185, 188, 205, 211, 212, 214, 215, 218, 232, 235, 240, 247, 262, 296, 297, 307, 332, 339, 340, 342, 345, 347, 351, 353, 358, 367, 378, 379, 380, 382, 390, 396, 466, 607, 661, 677, 751, 791, 846, 870, 942, 946, 949, 953, 955, 957, 961, 966, 968, 974, 977, 978, 981, 984, 985], "written": [5, 7, 27, 48, 50, 82, 90, 133, 150, 188, 232, 262, 290, 296, 297, 333, 342, 345, 346, 347, 351, 353, 357, 359, 372, 374, 379, 451, 466, 472, 661, 677, 791, 870, 877, 947, 949, 953, 957, 958, 967, 971, 974, 978, 979, 984, 987, 1002], "onlin": [5, 8, 15, 33, 87, 90, 150, 159, 189, 195, 217, 274, 334, 340, 344, 350, 359, 373, 378, 381, 383, 406, 410, 411, 413, 459, 466, 495, 500, 501, 502, 503, 509, 510, 546, 548, 622, 630, 631, 632, 640, 642, 791, 800, 801, 802, 803, 804, 807, 808, 813, 815, 816, 834, 835, 845, 865, 866, 945, 949, 957, 959, 971, 974, 975, 977, 985, 989, 993, 997, 998, 1000, 1008], "dictionari": [5, 7, 8, 33, 45, 50, 86, 88, 118, 150, 180, 215, 217, 320, 321, 338, 339, 340, 347, 357, 359, 373, 381, 413, 428, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 471, 474, 490, 495, 501, 502, 503, 504, 506, 507, 508, 509, 510, 512, 531, 532, 533, 534, 545, 546, 548, 551, 552, 553, 596, 597, 598, 628, 649, 650, 665, 677, 762, 765, 766, 773, 774, 776, 788, 824, 829, 838, 873, 874, 875, 876, 880, 890, 910, 913, 942, 949, 953, 968, 974, 978, 987, 988, 989, 993, 1001, 1004, 1005, 1006, 1007, 1008], "dataset": [6, 7, 9, 10, 11, 14, 15, 16, 17, 19, 20, 21, 25, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 60, 61, 64, 67, 68, 69, 70, 71, 75, 76, 77, 80, 86, 89, 90, 91, 92, 93, 94, 96, 97, 100, 102, 103, 104, 105, 106, 108, 109, 112, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 127, 128, 131, 132, 133, 134, 135, 136, 138, 140, 143, 145, 148, 149, 155, 156, 158, 159, 162, 164, 166, 167, 168, 169, 171, 172, 173, 174, 177, 178, 179, 180, 184, 185, 186, 188, 189, 191, 193, 194, 195, 196, 197, 198, 203, 205, 206, 207, 209, 212, 214, 216, 217, 221, 222, 224, 226, 227, 228, 230, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 253, 258, 260, 261, 262, 264, 265, 266, 267, 268, 269, 271, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 302, 303, 305, 307, 308, 309, 310, 313, 315, 316, 317, 320, 321, 322, 323, 325, 326, 327, 328, 333, 334, 347, 348, 349, 351, 358, 359, 362, 363, 367, 369, 370, 371, 373, 374, 377, 378, 379, 380, 381, 382, 385, 388, 393, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 422, 423, 433, 434, 437, 438, 439, 440, 442, 445, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 507, 509, 510, 513, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 534, 547, 548, 552, 553, 554, 556, 557, 558, 559, 560, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 592, 595, 596, 597, 598, 599, 602, 603, 604, 607, 609, 610, 611, 613, 615, 616, 617, 619, 621, 622, 623, 627, 628, 629, 630, 631, 632, 635, 636, 637, 638, 639, 640, 641, 643, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 664, 665, 666, 667, 668, 672, 674, 675, 692, 718, 720, 750, 751, 755, 756, 758, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 776, 777, 778, 779, 780, 781, 782, 784, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 800, 801, 802, 803, 804, 807, 808, 809, 811, 813, 814, 815, 816, 817, 818, 821, 822, 823, 825, 826, 829, 830, 838, 839, 843, 845, 847, 855, 856, 857, 858, 859, 860, 861, 862, 865, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 885, 886, 890, 891, 942, 943, 945, 946, 947, 948, 949, 950, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 963, 965, 966, 967, 968, 969, 972, 973, 974, 977, 979, 981, 982, 983, 986, 989, 990, 993, 994, 995, 996, 997, 998, 999, 1000], "excerpt": [6, 965, 983], "wild": [6, 338, 457, 458, 472, 473, 983, 989, 993], "aka": [6, 273, 319, 357, 381, 416, 500, 502, 504, 508, 511, 545, 546, 579, 586, 615, 616, 618, 619, 620, 622, 623, 626, 630, 631, 632, 634, 640, 641, 642, 704, 832, 836, 838, 949, 957, 967, 978, 983, 995, 1007], "lfw": [6, 340, 457, 458, 983, 993], "vi": [6, 8, 340, 663, 983, 1001, 1004], "www": [6, 67, 158, 181, 197, 199, 209, 257, 275, 339, 340, 345, 353, 373, 377, 406, 413, 451, 472, 473, 495, 498, 501, 505, 608, 622, 628, 635, 649, 650, 814, 821, 873, 874, 949, 966, 983], "umass": [6, 19, 340, 983], "edu": [6, 8, 11, 17, 43, 135, 144, 158, 163, 201, 227, 237, 255, 263, 271, 282, 319, 339, 340, 342, 373, 413, 451, 464, 466, 472, 473, 474, 498, 605, 608, 613, 622, 630, 631, 640, 643, 646, 647, 800, 802, 803, 804, 814, 821, 858, 860, 873, 874, 949, 951, 983], "funnel": [6, 457, 458, 983], "tgz": [6, 983], "233mb": [6, 983], "stat": [6, 8, 10, 66, 75, 135, 137, 156, 235, 238, 246, 250, 263, 289, 296, 297, 342, 354, 358, 375, 438, 556, 559, 560, 562, 563, 564, 568, 569, 570, 573, 646, 647, 766, 774, 776, 873, 874, 904, 942, 949, 963, 983, 1000, 1002, 1006], "loguniform": [6, 137, 246, 942, 983, 1003], "fetch_lfw_peopl": [6, 340, 983, 1008], "confusionmatrixdisplai": [6, 30, 232, 290, 296, 319, 595, 682, 953, 983, 1003, 1004, 1006, 1007, 1008], "classification_report": [6, 30, 66, 132, 236, 276, 296, 297, 953, 983, 987, 995, 997, 1001, 1002, 1003, 1005, 1009], "randomizedsearchcv": [6, 67, 137, 239, 246, 289, 328, 358, 364, 539, 942, 953, 967, 972, 983, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1008, 1010], "standardscal": [6, 10, 29, 41, 46, 52, 55, 59, 67, 69, 80, 97, 121, 135, 153, 160, 169, 170, 172, 181, 197, 199, 209, 210, 218, 219, 220, 222, 235, 245, 261, 266, 267, 273, 280, 283, 287, 288, 290, 291, 292, 294, 307, 310, 328, 334, 345, 347, 350, 354, 358, 374, 377, 394, 430, 431, 531, 640, 642, 825, 826, 829, 842, 856, 865, 866, 867, 868, 870, 871, 943, 950, 957, 963, 967, 968, 970, 983, 995, 997, 998, 1001, 1002, 1003, 1004, 1005, 1006, 1009], "svc": [6, 16, 24, 26, 28, 29, 30, 66, 70, 112, 122, 128, 133, 138, 150, 158, 172, 185, 213, 216, 220, 232, 236, 238, 240, 243, 244, 245, 248, 249, 253, 280, 283, 287, 289, 299, 301, 302, 303, 304, 305, 307, 308, 309, 310, 312, 313, 316, 317, 319, 332, 347, 351, 359, 367, 371, 374, 377, 380, 399, 400, 401, 432, 479, 519, 661, 662, 664, 666, 762, 779, 792, 794, 825, 862, 863, 865, 867, 941, 942, 948, 951, 953, 954, 963, 974, 978, 982, 983, 985, 990, 993, 994, 995, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007], "disk": [6, 14, 340, 343, 345, 350, 359, 367, 983], "arrai": [6, 7, 8, 10, 11, 12, 13, 14, 16, 19, 30, 31, 32, 37, 41, 43, 45, 50, 51, 58, 59, 61, 66, 68, 76, 79, 85, 88, 89, 113, 115, 117, 120, 123, 132, 135, 138, 139, 140, 145, 153, 160, 162, 165, 174, 175, 178, 181, 182, 188, 198, 202, 203, 208, 212, 215, 218, 219, 222, 224, 225, 226, 228, 229, 233, 234, 236, 238, 239, 242, 243, 247, 257, 271, 281, 287, 290, 291, 293, 294, 297, 303, 310, 311, 319, 326, 328, 332, 333, 338, 339, 340, 345, 346, 347, 348, 350, 351, 353, 355, 357, 358, 359, 367, 370, 373, 374, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 394, 395, 396, 397, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 454, 455, 456, 457, 458, 460, 461, 462, 464, 465, 466, 467, 468, 470, 472, 473, 474, 475, 476, 477, 479, 483, 487, 488, 491, 493, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 545, 546, 547, 548, 550, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 726, 727, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 881, 882, 883, 884, 885, 886, 887, 890, 891, 900, 901, 902, 903, 904, 906, 907, 908, 915, 916, 917, 922, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 939, 940, 943, 948, 949, 951, 953, 954, 956, 957, 959, 960, 963, 964, 965, 967, 968, 969, 971, 977, 982, 983, 984, 985, 986, 987, 989, 993, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "lfw_peopl": [6, 340, 983], "min_faces_per_person": [6, 340, 458, 983], "resiz": [6, 43, 44, 219, 340, 457, 458, 983], "n_sampl": [6, 7, 10, 15, 23, 24, 25, 26, 30, 31, 32, 34, 35, 36, 38, 39, 40, 41, 45, 46, 49, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 64, 66, 71, 73, 74, 75, 76, 77, 80, 85, 87, 88, 92, 94, 101, 103, 104, 105, 106, 107, 108, 113, 114, 115, 116, 117, 118, 127, 128, 134, 135, 146, 148, 149, 152, 160, 162, 163, 165, 167, 169, 171, 173, 175, 176, 180, 181, 182, 184, 185, 189, 193, 196, 198, 199, 201, 202, 203, 204, 205, 206, 208, 212, 213, 215, 218, 225, 227, 228, 229, 230, 235, 236, 238, 241, 242, 245, 247, 248, 249, 250, 251, 252, 258, 268, 280, 281, 282, 285, 288, 289, 291, 293, 294, 298, 305, 308, 309, 315, 319, 320, 328, 338, 342, 345, 347, 350, 354, 357, 358, 359, 364, 373, 375, 376, 377, 378, 380, 384, 385, 386, 388, 390, 391, 392, 395, 396, 397, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 446, 447, 448, 449, 451, 452, 453, 454, 455, 456, 458, 465, 468, 472, 476, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 492, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 545, 546, 547, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 581, 582, 585, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 668, 669, 671, 672, 673, 674, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 733, 734, 735, 736, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 890, 891, 902, 904, 906, 915, 922, 924, 927, 928, 929, 930, 931, 932, 933, 934, 942, 945, 949, 953, 954, 956, 957, 963, 964, 965, 967, 968, 969, 978, 983, 984, 985, 986, 987, 993, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "w": [6, 12, 14, 16, 28, 32, 37, 39, 42, 45, 55, 61, 93, 96, 135, 148, 180, 185, 198, 215, 216, 224, 225, 226, 229, 230, 249, 276, 290, 291, 311, 312, 315, 321, 328, 333, 340, 342, 351, 367, 373, 374, 378, 380, 381, 385, 390, 396, 401, 429, 433, 436, 438, 446, 447, 448, 487, 502, 504, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 531, 532, 533, 534, 552, 553, 555, 574, 575, 599, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 657, 663, 688, 689, 719, 762, 776, 793, 794, 795, 796, 798, 799, 800, 801, 802, 803, 804, 807, 808, 811, 812, 815, 816, 822, 823, 858, 860, 861, 865, 866, 867, 868, 870, 871, 873, 874, 875, 876, 899, 904, 949, 953, 957, 958, 963, 965, 967, 968, 983, 987, 1003, 1007, 1008, 1009, 1010], "info": [6, 39, 67, 87, 153, 154, 215, 236, 342, 344, 349, 359, 381, 460, 909, 919, 983], "n_featur": [6, 8, 15, 24, 25, 26, 28, 29, 30, 31, 32, 37, 49, 55, 57, 58, 73, 74, 75, 76, 77, 84, 85, 87, 94, 101, 103, 105, 107, 108, 132, 134, 135, 148, 149, 158, 160, 163, 165, 167, 175, 176, 180, 184, 185, 196, 198, 202, 208, 212, 213, 215, 224, 229, 235, 241, 245, 247, 248, 250, 251, 268, 273, 280, 287, 288, 289, 291, 293, 294, 315, 319, 320, 321, 328, 332, 338, 339, 345, 347, 350, 357, 358, 359, 364, 373, 375, 376, 378, 380, 381, 384, 385, 386, 388, 390, 391, 392, 395, 396, 397, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 421, 422, 423, 424, 425, 427, 428, 429, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 453, 454, 455, 456, 458, 465, 468, 472, 473, 476, 479, 480, 483, 485, 487, 488, 490, 492, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 545, 546, 547, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 596, 597, 598, 599, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 664, 665, 666, 674, 688, 721, 722, 723, 724, 726, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 755, 756, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 776, 777, 778, 779, 780, 781, 782, 783, 784, 786, 787, 788, 789, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 825, 828, 829, 830, 831, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 902, 928, 929, 930, 931, 932, 933, 934, 945, 949, 954, 956, 957, 963, 967, 968, 969, 978, 983, 984, 986, 987, 993, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "id": [6, 19, 199, 271, 327, 339, 340, 345, 353, 375, 377, 381, 387, 458, 459, 460, 877, 879, 897, 983, 987, 1001, 1002, 1005], "person": [6, 241, 340, 344, 377, 381, 457, 458, 459, 963, 983, 1001], "target_nam": [6, 19, 28, 49, 83, 91, 95, 152, 190, 202, 226, 232, 239, 247, 248, 261, 284, 300, 319, 324, 338, 340, 452, 453, 455, 456, 457, 458, 460, 461, 464, 466, 467, 468, 469, 474, 677, 953, 969, 978, 983, 987, 1003], "n_class": [6, 34, 84, 85, 101, 103, 108, 110, 132, 134, 196, 202, 213, 216, 226, 245, 246, 247, 267, 268, 287, 324, 327, 328, 345, 347, 359, 380, 401, 452, 453, 466, 479, 483, 487, 513, 514, 515, 517, 519, 521, 523, 525, 528, 531, 533, 557, 558, 568, 574, 598, 603, 622, 623, 630, 631, 632, 638, 639, 640, 641, 661, 671, 680, 682, 698, 701, 704, 717, 751, 757, 762, 765, 766, 776, 786, 793, 794, 795, 796, 797, 799, 800, 801, 802, 803, 804, 807, 812, 814, 815, 822, 825, 832, 833, 836, 839, 846, 849, 860, 861, 862, 865, 866, 867, 868, 869, 870, 871, 873, 875, 877, 878, 890, 891, 949, 953, 954, 957, 964, 967, 968, 983, 998, 999, 1000, 1002, 1003, 1004, 1010], "1288": [6, 340], "1850": [6, 340], "scaler": [6, 67, 69, 150, 197, 198, 213, 218, 220, 222, 261, 266, 277, 282, 283, 292, 307, 310, 328, 350, 374, 377, 454, 622, 623, 636, 638, 651, 825, 834, 835, 837, 841, 842, 843, 845, 850, 851, 852, 853, 854, 855, 856, 957, 963, 967, 974, 983, 993, 998, 1001, 1006], "unlabel": [6, 216, 289, 296, 297, 298, 300, 301, 359, 372, 373, 860, 861, 862, 952, 978, 981, 983, 985, 1005], "unsupervis": [6, 12, 34, 46, 68, 69, 80, 87, 106, 119, 208, 216, 264, 265, 306, 319, 320, 328, 337, 340, 347, 358, 359, 372, 373, 376, 378, 379, 380, 381, 382, 397, 406, 409, 496, 498, 500, 501, 503, 506, 507, 513, 527, 530, 531, 533, 534, 546, 547, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 592, 594, 598, 599, 602, 603, 604, 605, 606, 641, 762, 765, 766, 768, 776, 784, 789, 792, 807, 808, 811, 813, 814, 815, 816, 821, 828, 829, 830, 831, 834, 835, 837, 838, 839, 840, 842, 843, 844, 845, 846, 857, 858, 862, 869, 950, 953, 959, 966, 975, 978, 979, 981, 983, 989, 993, 996, 1006, 1010], "dimension": [6, 9, 10, 19, 29, 37, 41, 51, 52, 54, 55, 59, 65, 67, 69, 70, 79, 80, 85, 87, 94, 95, 101, 106, 119, 127, 128, 135, 137, 139, 140, 144, 150, 165, 177, 182, 198, 200, 202, 203, 205, 208, 212, 213, 216, 225, 226, 259, 262, 266, 268, 280, 304, 311, 319, 328, 332, 337, 340, 341, 342, 345, 354, 359, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 409, 411, 413, 429, 433, 437, 446, 447, 448, 449, 452, 453, 454, 455, 456, 457, 458, 459, 461, 464, 465, 466, 468, 469, 474, 479, 483, 496, 498, 499, 502, 503, 504, 505, 508, 511, 513, 527, 530, 537, 563, 571, 595, 604, 605, 606, 616, 652, 653, 654, 655, 656, 657, 658, 660, 663, 674, 688, 760, 761, 762, 791, 805, 806, 807, 810, 813, 814, 821, 825, 826, 829, 835, 840, 845, 857, 858, 859, 865, 869, 902, 939, 944, 945, 948, 949, 954, 955, 959, 965, 966, 967, 968, 969, 974, 975, 977, 978, 979, 981, 983, 984, 986, 987, 988, 989, 993, 994, 995, 996, 998, 999, 1000, 1002, 1005, 1008, 1009], "reduct": [6, 19, 51, 54, 65, 69, 80, 87, 95, 104, 119, 150, 200, 202, 203, 206, 212, 216, 259, 266, 268, 291, 304, 328, 332, 337, 372, 373, 374, 376, 378, 380, 382, 432, 446, 447, 448, 449, 466, 494, 496, 498, 499, 502, 503, 504, 505, 508, 511, 513, 517, 518, 521, 522, 523, 524, 528, 529, 530, 563, 571, 622, 623, 652, 653, 654, 655, 656, 657, 744, 762, 791, 807, 814, 821, 825, 826, 835, 845, 863, 865, 873, 874, 875, 876, 945, 950, 965, 969, 973, 974, 975, 977, 983, 989, 994, 995, 996, 999, 1007, 1008, 1009], "top": [6, 12, 14, 15, 16, 17, 32, 34, 36, 38, 39, 40, 41, 42, 48, 59, 61, 67, 84, 89, 99, 106, 107, 110, 121, 124, 153, 181, 183, 192, 196, 208, 218, 219, 224, 226, 227, 230, 235, 239, 247, 248, 263, 278, 280, 284, 288, 294, 296, 297, 307, 311, 319, 328, 343, 345, 347, 351, 357, 370, 371, 373, 378, 379, 380, 451, 551, 552, 555, 563, 689, 719, 757, 877, 879, 942, 945, 949, 951, 961, 972, 977, 983, 986, 987, 1007], "t0": [6, 8, 11, 15, 17, 36, 39, 41, 43, 45, 47, 49, 55, 59, 61, 90, 165, 167, 196, 197, 198, 203, 206, 208, 212, 214, 239, 294, 319, 320, 321, 640, 641, 642, 983], "svd_solver": [6, 66, 87, 94, 294, 369, 378, 499, 505, 983, 999], "whiten": [6, 87, 88, 89, 262, 378, 385, 497, 498, 505, 843, 845, 983, 997, 999, 1007, 1008], "done": [6, 8, 9, 11, 13, 15, 17, 19, 45, 47, 49, 50, 90, 132, 135, 142, 153, 154, 158, 160, 165, 167, 185, 198, 214, 215, 229, 236, 239, 242, 247, 258, 281, 289, 319, 320, 321, 328, 333, 339, 343, 345, 347, 349, 352, 353, 354, 357, 359, 364, 373, 375, 377, 378, 380, 405, 406, 409, 414, 416, 436, 446, 447, 448, 449, 453, 499, 525, 526, 546, 570, 571, 572, 592, 594, 596, 598, 607, 608, 609, 623, 704, 760, 761, 762, 776, 781, 782, 829, 843, 938, 942, 943, 946, 949, 950, 953, 955, 956, 957, 963, 966, 967, 968, 969, 973, 978, 982, 983, 985, 987, 993, 995, 1000, 1003, 1005, 1009], "components_": [6, 15, 55, 80, 87, 89, 90, 97, 212, 213, 276, 283, 291, 359, 374, 378, 408, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 507, 508, 603, 814, 821, 857, 858, 945, 965, 983, 997, 999, 1005, 1008], "project": [6, 8, 11, 14, 17, 31, 42, 52, 55, 64, 83, 86, 87, 89, 91, 93, 97, 103, 141, 143, 145, 146, 150, 154, 173, 178, 190, 201, 202, 203, 205, 207, 213, 216, 225, 233, 262, 267, 271, 276, 304, 312, 320, 324, 332, 337, 339, 343, 344, 350, 351, 354, 359, 360, 363, 370, 376, 378, 379, 385, 404, 410, 415, 416, 426, 438, 446, 447, 448, 449, 453, 466, 468, 495, 497, 498, 499, 501, 503, 505, 506, 507, 508, 512, 513, 537, 546, 553, 605, 606, 613, 636, 638, 652, 655, 659, 660, 795, 814, 842, 857, 858, 859, 901, 902, 947, 949, 950, 951, 954, 956, 957, 959, 966, 969, 974, 977, 978, 983, 986, 989, 993, 994, 996, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "orthonorm": [6, 354, 901, 945, 983], "x_train_pca": [6, 983], "x_test_pca": [6, 92, 983], "966": 6, "079": [6, 135, 342], "007": [6, 224, 246, 258, 320], "classifi": [6, 7, 8, 9, 22, 25, 27, 28, 30, 32, 53, 66, 67, 68, 69, 70, 83, 92, 97, 101, 102, 103, 104, 105, 108, 109, 110, 113, 119, 122, 123, 128, 131, 132, 134, 139, 150, 155, 156, 158, 159, 171, 172, 173, 179, 181, 188, 190, 193, 196, 199, 208, 211, 213, 215, 216, 221, 232, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 253, 255, 256, 260, 266, 267, 269, 273, 276, 280, 289, 290, 294, 295, 296, 297, 299, 300, 302, 303, 305, 306, 308, 309, 310, 311, 316, 317, 321, 340, 342, 345, 347, 350, 357, 359, 373, 374, 377, 381, 382, 383, 390, 398, 399, 400, 401, 402, 403, 452, 453, 460, 468, 476, 478, 479, 486, 495, 500, 501, 506, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 525, 527, 528, 530, 531, 532, 533, 534, 557, 558, 566, 570, 574, 586, 593, 595, 596, 597, 613, 622, 623, 630, 632, 635, 636, 637, 638, 639, 640, 661, 662, 664, 666, 667, 671, 672, 673, 675, 676, 677, 682, 684, 689, 690, 692, 693, 695, 697, 698, 701, 702, 703, 704, 705, 706, 717, 719, 745, 746, 747, 750, 751, 752, 757, 759, 762, 765, 766, 768, 776, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 812, 813, 815, 816, 821, 822, 823, 825, 826, 832, 845, 846, 860, 861, 862, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 879, 894, 896, 942, 943, 945, 948, 949, 950, 953, 954, 955, 958, 961, 963, 966, 967, 968, 969, 972, 973, 974, 975, 977, 978, 979, 981, 982, 983, 989, 990, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1010], "1e3": [6, 7, 10, 137, 143, 148, 214, 249, 293, 942, 983], "1e5": [6, 142, 162, 164, 171, 249, 577, 578, 579, 583, 584, 586, 587, 589, 854, 859, 965, 983, 985], "clf": [6, 10, 11, 12, 16, 23, 24, 25, 26, 29, 30, 35, 45, 48, 51, 55, 60, 67, 93, 105, 113, 116, 117, 122, 126, 128, 131, 132, 134, 139, 141, 156, 171, 173, 174, 178, 179, 185, 188, 190, 193, 194, 195, 197, 204, 209, 210, 213, 216, 222, 228, 235, 239, 243, 244, 246, 249, 250, 261, 264, 265, 266, 269, 273, 280, 283, 287, 288, 289, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 319, 323, 324, 327, 332, 340, 358, 359, 367, 374, 377, 380, 382, 402, 513, 514, 517, 519, 521, 523, 525, 527, 528, 531, 557, 558, 561, 596, 598, 602, 603, 604, 605, 606, 608, 609, 612, 616, 622, 623, 624, 625, 626, 630, 632, 633, 636, 637, 638, 639, 640, 641, 644, 661, 662, 664, 666, 751, 762, 765, 766, 776, 793, 794, 795, 797, 800, 801, 802, 803, 804, 811, 812, 822, 865, 867, 869, 870, 873, 877, 879, 943, 945, 949, 953, 954, 956, 957, 959, 960, 967, 968, 969, 978, 982, 983, 987], "class_weight": [6, 309, 359, 372, 521, 525, 528, 622, 623, 630, 632, 638, 639, 640, 641, 865, 867, 870, 872, 873, 875, 942, 967, 968, 983, 993, 994, 996, 997, 998, 999, 1001, 1007, 1008], "n_iter": [6, 17, 67, 137, 189, 201, 202, 206, 239, 246, 258, 276, 309, 347, 351, 358, 385, 418, 442, 496, 497, 508, 509, 510, 511, 608, 609, 610, 611, 616, 617, 624, 625, 626, 627, 645, 646, 647, 648, 649, 650, 651, 656, 658, 765, 766, 774, 776, 821, 823, 901, 902, 942, 967, 983, 994, 999, 1000, 1001, 1005, 1007, 1008, 1009], "found": [6, 19, 20, 21, 97, 108, 134, 137, 141, 143, 145, 185, 216, 236, 239, 240, 241, 283, 287, 290, 292, 293, 307, 321, 332, 334, 339, 342, 344, 345, 347, 357, 359, 360, 370, 373, 376, 377, 378, 380, 381, 383, 398, 405, 408, 409, 423, 436, 521, 522, 523, 524, 528, 529, 552, 554, 574, 575, 592, 600, 611, 615, 617, 619, 625, 627, 629, 635, 636, 638, 640, 642, 651, 652, 676, 683, 762, 765, 766, 776, 802, 807, 808, 814, 836, 838, 839, 873, 874, 875, 876, 880, 882, 937, 941, 942, 945, 949, 950, 952, 954, 955, 956, 957, 963, 967, 968, 969, 973, 978, 983, 987, 993, 996, 997, 1000, 1001, 1003, 1007, 1010], "grid": [6, 8, 10, 11, 20, 24, 25, 26, 39, 51, 58, 67, 68, 69, 70, 73, 77, 110, 119, 130, 132, 134, 141, 150, 152, 153, 154, 170, 199, 206, 213, 214, 215, 219, 224, 229, 231, 235, 237, 239, 242, 243, 245, 250, 257, 260, 262, 263, 271, 276, 280, 281, 283, 304, 306, 307, 313, 314, 319, 340, 347, 352, 357, 359, 368, 374, 377, 379, 380, 381, 412, 425, 428, 436, 462, 466, 479, 486, 595, 596, 597, 611, 614, 617, 618, 620, 623, 625, 627, 640, 677, 691, 705, 748, 751, 762, 765, 766, 773, 776, 778, 791, 792, 825, 870, 946, 948, 953, 956, 960, 973, 974, 978, 979, 981, 983, 985, 989, 993, 996, 997, 998, 1000, 1001, 1007, 1009, 1010], "search": [6, 43, 51, 67, 68, 69, 70, 114, 130, 132, 134, 135, 137, 150, 199, 214, 215, 229, 231, 237, 239, 242, 243, 245, 250, 257, 258, 260, 262, 276, 280, 292, 307, 314, 319, 328, 342, 343, 345, 347, 357, 359, 368, 373, 374, 377, 380, 381, 382, 384, 407, 412, 414, 416, 421, 422, 425, 428, 435, 436, 442, 466, 479, 486, 521, 522, 523, 524, 528, 529, 530, 543, 563, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 592, 617, 640, 652, 653, 656, 657, 677, 691, 748, 751, 762, 765, 766, 773, 774, 776, 778, 791, 792, 805, 806, 807, 808, 809, 811, 813, 815, 816, 817, 818, 819, 825, 870, 873, 874, 875, 876, 907, 941, 946, 948, 950, 953, 956, 957, 967, 969, 972, 973, 974, 978, 979, 981, 983, 989, 993, 995, 996, 997, 998, 999, 1000, 1001, 1005, 1007, 1008, 1010], "best_estimator_": [6, 51, 69, 70, 73, 94, 214, 229, 239, 242, 262, 762, 765, 766, 776, 942, 982, 983, 1000], "425": [6, 202, 579], "76823": 6, "03433306456": 6, "0034189458230957995": 6, "from_estim": [6, 9, 24, 26, 28, 29, 32, 53, 103, 106, 117, 118, 122, 154, 164, 173, 190, 195, 214, 219, 221, 232, 235, 240, 241, 245, 248, 253, 261, 266, 269, 283, 287, 288, 289, 290, 292, 293, 294, 303, 304, 305, 306, 308, 309, 311, 324, 352, 371, 597, 682, 690, 745, 747, 750, 751, 752, 948, 953, 960, 983, 990, 1006, 1007, 1008, 1009, 1010, 1011], "display_label": [6, 232, 661, 983, 1005], "xticks_rot": [6, 661, 983], "vertic": [6, 17, 57, 113, 156, 170, 212, 213, 242, 257, 278, 281, 312, 314, 359, 370, 373, 378, 479, 661, 744, 983], "tight_layout": [6, 8, 24, 26, 29, 37, 49, 52, 62, 69, 71, 80, 87, 88, 89, 97, 101, 103, 108, 110, 112, 115, 119, 121, 123, 139, 141, 146, 148, 152, 153, 155, 156, 160, 161, 165, 171, 179, 181, 189, 192, 196, 199, 201, 213, 218, 233, 234, 250, 257, 258, 260, 270, 279, 280, 281, 282, 283, 287, 291, 305, 320, 323, 324, 983], "042": [6, 177, 203, 351, 974], "precis": [6, 13, 24, 30, 66, 71, 77, 87, 132, 143, 144, 150, 158, 209, 231, 232, 236, 276, 278, 296, 297, 345, 347, 359, 370, 371, 372, 373, 375, 378, 380, 407, 433, 434, 435, 436, 437, 438, 439, 440, 442, 468, 487, 496, 498, 505, 508, 608, 609, 610, 612, 614, 615, 616, 618, 619, 620, 633, 636, 638, 644, 646, 647, 651, 663, 664, 670, 671, 672, 677, 690, 692, 693, 694, 702, 726, 745, 746, 747, 750, 751, 760, 761, 791, 794, 805, 806, 811, 826, 845, 849, 865, 870, 877, 879, 902, 947, 949, 956, 957, 968, 974, 983, 987, 993, 996, 997, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010], "recal": [6, 24, 30, 66, 77, 92, 132, 150, 209, 231, 236, 255, 276, 296, 297, 345, 359, 373, 468, 568, 664, 670, 671, 672, 676, 677, 690, 692, 693, 694, 745, 746, 747, 750, 751, 791, 794, 826, 845, 849, 865, 949, 969, 974, 983, 987, 996, 997, 1000, 1002, 1003, 1005, 1006, 1007, 1009, 1010], "f1": [6, 24, 30, 66, 132, 236, 276, 296, 297, 300, 377, 677, 692, 693, 701, 746, 953, 954, 983, 987, 997, 1009], "ariel": [6, 340, 993, 999], "sharon": [6, 340], "69": [6, 172, 283, 297, 373, 435, 436, 571, 572, 719, 953, 963, 985], "colin": [6, 340, 999], "powel": [6, 340], "87": [6, 30, 66, 146, 218, 236, 297, 561, 631, 740, 751, 762, 841, 853, 953, 987], "donald": [6, 340, 373, 688, 943], "rumsfeld": [6, 340], "63": [6, 324, 342, 380, 521, 522, 529, 530, 663, 689, 762, 776, 875, 876, 953], "georg": [6, 340, 373, 999, 1005, 1006, 1007, 1008], "bush": [6, 340], "95": [6, 8, 13, 15, 30, 41, 49, 54, 64, 84, 93, 110, 114, 144, 153, 160, 181, 183, 188, 199, 226, 227, 230, 238, 239, 263, 271, 280, 284, 291, 297, 307, 328, 380, 491, 596, 597, 600, 611, 625, 711, 862, 949, 953, 954, 966, 987, 996], "91": [6, 30, 48, 142, 276, 296, 297, 380, 948, 983, 987], "146": [6, 380], "gerhard": [6, 340], "schroeder": [6, 340], "hugo": [6, 340, 999, 1004, 1005, 1006, 1007], "chavez": [6, 340], "90": [6, 10, 13, 15, 30, 70, 96, 97, 113, 114, 115, 132, 142, 156, 161, 172, 178, 180, 183, 188, 199, 224, 247, 249, 280, 284, 293, 296, 297, 328, 332, 345, 351, 377, 527, 744, 762, 789, 794, 846, 948, 953, 983, 987, 1008, 1009], "toni": [6, 340, 527, 845, 959, 1006, 1007], "blair": [6, 340], "93": [6, 13, 30, 135, 181, 222, 236, 297, 319, 342, 740, 751, 762, 789, 873, 948, 953, 983, 987], "83": [6, 28, 32, 36, 296, 342, 347, 658, 671, 749, 948, 953, 983, 987, 996], "322": [6, 84, 123, 435, 436, 974], "macro": [6, 30, 66, 132, 236, 276, 287, 296, 297, 340, 377, 671, 677, 692, 693, 701, 746, 747, 750, 751, 953, 987, 993, 1001, 1009], "avg": [6, 30, 66, 132, 236, 276, 296, 297, 533, 668, 677, 953, 983, 987, 1009], "weight": [6, 11, 13, 14, 15, 19, 23, 30, 51, 66, 97, 114, 122, 123, 131, 132, 141, 142, 149, 150, 153, 159, 165, 170, 172, 181, 185, 186, 188, 191, 192, 193, 195, 196, 197, 199, 215, 220, 224, 228, 236, 241, 245, 247, 261, 270, 272, 273, 274, 276, 283, 285, 287, 290, 294, 296, 297, 302, 307, 309, 311, 312, 313, 315, 316, 319, 320, 321, 327, 328, 341, 342, 354, 357, 359, 373, 375, 376, 378, 379, 382, 384, 390, 396, 401, 404, 407, 408, 410, 411, 413, 417, 423, 424, 427, 428, 429, 431, 433, 438, 446, 447, 448, 460, 479, 488, 502, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 550, 553, 554, 555, 557, 561, 566, 567, 574, 575, 592, 596, 597, 598, 599, 601, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 651, 653, 657, 661, 662, 664, 666, 667, 671, 672, 673, 676, 677, 680, 682, 684, 685, 686, 687, 689, 690, 691, 692, 693, 697, 698, 699, 701, 702, 703, 704, 706, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 719, 721, 722, 732, 745, 746, 747, 748, 750, 751, 752, 753, 754, 757, 758, 759, 760, 761, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 827, 830, 844, 845, 846, 860, 861, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 878, 879, 890, 891, 904, 928, 934, 943, 944, 949, 950, 952, 953, 955, 956, 957, 958, 960, 963, 966, 967, 968, 969, 973, 974, 978, 985, 987, 993, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "85": [6, 8, 16, 17, 30, 47, 52, 66, 90, 132, 196, 199, 249, 276, 297, 328, 380, 403, 462, 464, 519, 520, 561, 616, 622, 708, 716, 751, 762, 789, 953, 954, 983, 993], "plot_galleri": [6, 87, 983], "n_row": [6, 19, 87, 370, 388, 415, 417, 475, 477, 983], "n_col": [6, 19, 87, 217, 388, 415, 417, 475, 477, 596, 983], "portrait": [6, 378, 983], "figur": [6, 7, 8, 10, 12, 14, 16, 23, 24, 25, 26, 29, 34, 35, 36, 37, 39, 41, 42, 43, 44, 45, 47, 48, 49, 51, 53, 55, 56, 58, 59, 60, 61, 62, 64, 73, 77, 79, 82, 83, 84, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 101, 102, 103, 104, 113, 114, 115, 116, 119, 120, 124, 126, 128, 130, 131, 134, 138, 139, 140, 141, 144, 145, 149, 153, 154, 155, 156, 160, 165, 166, 171, 174, 175, 178, 180, 182, 183, 187, 192, 196, 197, 198, 203, 204, 205, 208, 212, 213, 214, 216, 217, 219, 224, 226, 227, 230, 232, 237, 242, 243, 252, 263, 267, 268, 271, 273, 276, 278, 280, 281, 285, 287, 289, 296, 297, 298, 305, 307, 312, 324, 325, 326, 345, 373, 379, 380, 381, 383, 402, 595, 596, 661, 662, 664, 665, 666, 768, 784, 879, 942, 946, 949, 952, 953, 956, 957, 960, 961, 967, 968, 969, 982, 983, 985, 986, 1006], "subplots_adjust": [6, 7, 14, 15, 36, 39, 41, 42, 47, 48, 51, 59, 61, 75, 77, 84, 85, 89, 90, 96, 103, 104, 121, 153, 180, 181, 196, 199, 208, 216, 224, 226, 227, 230, 233, 249, 251, 263, 271, 273, 276, 280, 289, 297, 304, 307, 983], "bottom": [6, 8, 12, 14, 15, 32, 34, 36, 39, 41, 42, 48, 50, 59, 61, 84, 85, 112, 119, 124, 181, 192, 208, 224, 226, 227, 230, 235, 238, 249, 263, 278, 297, 299, 307, 345, 371, 373, 379, 551, 877, 947, 949, 953, 961, 973, 983, 986], "left": [6, 7, 12, 14, 15, 16, 23, 31, 32, 36, 39, 41, 42, 48, 52, 59, 61, 68, 71, 76, 77, 84, 85, 89, 90, 101, 104, 106, 107, 108, 111, 114, 121, 123, 140, 146, 149, 153, 156, 166, 174, 181, 182, 183, 185, 192, 194, 195, 198, 199, 208, 212, 216, 218, 219, 224, 226, 227, 230, 234, 235, 236, 237, 239, 247, 248, 250, 261, 263, 264, 271, 273, 276, 278, 291, 293, 294, 297, 306, 307, 311, 327, 340, 345, 347, 349, 370, 373, 376, 377, 379, 380, 381, 383, 390, 396, 410, 436, 446, 447, 448, 449, 457, 462, 513, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 551, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 591, 599, 603, 607, 615, 619, 760, 761, 762, 765, 766, 769, 776, 838, 845, 873, 874, 875, 876, 877, 889, 902, 924, 927, 942, 945, 947, 949, 951, 953, 955, 960, 965, 967, 969, 982, 983, 985, 986, 1000, 1002, 1007], "01": [6, 8, 10, 13, 14, 16, 37, 41, 48, 59, 79, 87, 89, 90, 104, 113, 115, 118, 119, 135, 142, 146, 153, 154, 162, 165, 172, 188, 193, 194, 199, 201, 202, 208, 212, 213, 214, 218, 219, 226, 230, 232, 237, 238, 239, 243, 245, 246, 247, 263, 274, 276, 278, 288, 294, 309, 320, 325, 326, 340, 342, 350, 373, 382, 413, 435, 479, 496, 503, 507, 509, 559, 560, 562, 569, 606, 610, 618, 622, 642, 660, 679, 762, 776, 859, 922, 949, 953, 957, 963, 965, 967, 974, 983, 987], "right": [6, 7, 11, 12, 14, 15, 16, 29, 32, 36, 39, 40, 41, 42, 48, 50, 57, 59, 61, 74, 75, 77, 83, 84, 85, 89, 90, 92, 94, 96, 101, 103, 104, 105, 114, 115, 116, 123, 131, 137, 140, 149, 156, 171, 182, 183, 184, 185, 187, 188, 191, 192, 208, 211, 212, 215, 224, 226, 227, 229, 230, 233, 234, 238, 241, 245, 248, 249, 251, 263, 271, 273, 276, 278, 280, 283, 293, 294, 297, 307, 309, 311, 315, 317, 319, 324, 327, 328, 345, 357, 360, 370, 373, 376, 378, 379, 380, 383, 428, 446, 447, 448, 449, 498, 505, 508, 521, 522, 523, 524, 525, 526, 528, 529, 530, 551, 576, 577, 578, 579, 580, 583, 584, 585, 586, 587, 588, 589, 591, 599, 640, 642, 830, 873, 874, 875, 876, 877, 889, 902, 942, 945, 947, 949, 951, 953, 955, 956, 960, 965, 967, 968, 969, 972, 973, 977, 979, 983, 985, 986, 995, 1001, 1007, 1009, 1010], "99": [6, 8, 13, 24, 30, 41, 48, 59, 87, 199, 208, 212, 218, 224, 226, 236, 239, 278, 297, 333, 338, 342, 349, 377, 380, 381, 456, 611, 625, 635, 751, 812, 922, 948, 953, 963, 967, 983, 989, 995], "hspace": [6, 14, 15, 41, 42, 59, 87, 199, 208, 224, 226, 227, 230, 263, 289, 297, 304, 983], "grai": [6, 14, 43, 44, 47, 48, 50, 87, 90, 116, 135, 179, 181, 199, 212, 216, 217, 245, 275, 342, 378, 457, 458, 466, 485, 983, 986, 1004], "ytick": [6, 11, 28, 32, 37, 41, 43, 47, 48, 49, 55, 56, 59, 77, 79, 90, 115, 131, 139, 140, 141, 145, 164, 171, 177, 194, 208, 216, 225, 226, 227, 230, 233, 252, 262, 271, 276, 296, 307, 312, 313, 319, 982, 983], "portion": [6, 8, 76, 112, 135, 247, 332, 340, 342, 345, 351, 359, 751, 786, 803, 942, 952, 956, 983, 987], "pred_nam": [6, 983], "rsplit": [6, 17, 239, 983], "true_nam": [6, 983], "ntrue": [6, 296, 297, 983], "prediction_titl": [6, 983], "signif": [6, 945, 983], "eigenface_titl": [6, 983], "convolut": [6, 145, 983], "network": [6, 218, 275, 332, 333, 334, 339, 340, 359, 360, 367, 373, 378, 380, 385, 460, 497, 499, 531, 532, 660, 704, 822, 823, 949, 951, 953, 967, 969, 972, 975, 983, 988, 989, 993, 1007], "famili": [6, 332, 334, 359, 373, 376, 378, 381, 382, 556, 559, 560, 562, 563, 564, 570, 822, 823, 841, 853, 949, 963, 967, 983, 985, 997, 1007], "outsid": [6, 9, 19, 110, 182, 183, 211, 222, 381, 410, 599, 844, 959, 983, 1001], "scope": [6, 19, 332, 334, 345, 357, 381, 972, 973, 983], "scikit": [6, 8, 10, 12, 13, 15, 16, 17, 29, 30, 47, 52, 66, 67, 99, 105, 106, 107, 118, 121, 132, 135, 146, 148, 149, 150, 153, 154, 155, 156, 158, 169, 170, 181, 182, 183, 199, 207, 210, 218, 220, 221, 222, 231, 235, 243, 250, 255, 258, 260, 263, 265, 284, 286, 311, 319, 320, 323, 324, 328, 333, 334, 337, 339, 340, 341, 342, 344, 345, 348, 351, 352, 353, 354, 358, 359, 364, 366, 367, 369, 370, 371, 373, 374, 375, 377, 378, 379, 380, 381, 382, 383, 387, 388, 390, 391, 392, 393, 395, 396, 397, 402, 407, 410, 411, 414, 421, 428, 429, 431, 432, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 476, 479, 485, 488, 502, 505, 525, 526, 528, 529, 531, 540, 545, 546, 547, 549, 550, 553, 563, 566, 575, 590, 592, 594, 596, 598, 602, 604, 610, 612, 616, 622, 633, 644, 652, 664, 665, 666, 681, 695, 705, 711, 741, 742, 743, 751, 758, 762, 763, 764, 765, 766, 767, 768, 776, 779, 780, 781, 782, 783, 784, 787, 788, 791, 793, 794, 807, 809, 825, 826, 828, 830, 832, 835, 837, 838, 839, 840, 844, 845, 846, 849, 862, 863, 865, 870, 873, 874, 896, 897, 919, 920, 921, 942, 943, 949, 950, 952, 953, 954, 955, 956, 957, 958, 959, 963, 966, 967, 968, 969, 971, 974, 976, 981, 982, 983, 985, 986, 989, 990, 991, 993, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "librari": [6, 238, 290, 292, 325, 328, 337, 339, 340, 343, 344, 345, 346, 351, 357, 358, 359, 363, 369, 622, 865, 866, 867, 868, 870, 871, 921, 949, 953, 968, 969, 972, 973, 977, 983, 987, 991, 996, 1000, 1001, 1002, 1003, 1004, 1006, 1010], "reader": [6, 39, 290, 334, 345, 983], "pytorch": [6, 357, 972, 973, 983, 1009, 1010], "tensorflow": [6, 357, 972, 983], "implement": [6, 7, 13, 14, 16, 17, 43, 53, 76, 87, 107, 149, 156, 158, 165, 166, 170, 195, 199, 201, 208, 214, 215, 236, 238, 247, 255, 257, 258, 260, 263, 281, 287, 288, 289, 290, 291, 293, 319, 321, 332, 333, 334, 339, 340, 342, 343, 345, 346, 347, 350, 351, 353, 354, 359, 363, 364, 367, 369, 370, 372, 375, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 401, 406, 407, 408, 410, 411, 412, 413, 414, 439, 457, 460, 472, 496, 497, 498, 499, 500, 502, 505, 506, 507, 517, 518, 519, 521, 522, 525, 526, 527, 531, 536, 546, 552, 553, 555, 557, 561, 565, 574, 575, 596, 597, 604, 605, 609, 610, 617, 621, 622, 623, 627, 628, 632, 635, 636, 638, 639, 640, 641, 642, 648, 649, 650, 651, 652, 655, 656, 659, 671, 675, 684, 698, 701, 705, 741, 745, 751, 752, 760, 762, 765, 766, 768, 776, 780, 781, 784, 786, 787, 788, 789, 790, 792, 793, 794, 795, 797, 798, 800, 801, 802, 803, 804, 807, 808, 810, 813, 815, 816, 821, 822, 823, 825, 847, 855, 856, 862, 865, 866, 867, 868, 869, 870, 871, 901, 902, 910, 913, 918, 921, 922, 924, 942, 943, 945, 947, 949, 950, 951, 952, 954, 955, 957, 958, 959, 963, 965, 966, 969, 970, 972, 973, 975, 977, 978, 983, 984, 985, 986, 987, 989, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "242": [6, 326, 845, 974, 993], "plot_face_recognit": [6, 974], "quantiz": [6, 33, 43, 55, 90, 150, 339, 340, 373, 407, 411, 413, 470, 742, 830, 927, 963, 974], "k": [6, 11, 12, 15, 16, 17, 19, 23, 25, 28, 29, 33, 34, 35, 39, 43, 46, 47, 50, 52, 53, 57, 60, 62, 70, 71, 75, 83, 84, 85, 87, 90, 93, 94, 101, 103, 110, 114, 117, 119, 120, 122, 123, 126, 128, 131, 132, 135, 138, 140, 141, 145, 146, 149, 150, 153, 154, 155, 156, 161, 163, 164, 166, 175, 178, 183, 185, 193, 195, 212, 214, 216, 217, 218, 224, 227, 234, 238, 241, 242, 247, 248, 251, 258, 260, 263, 264, 265, 266, 267, 269, 270, 271, 279, 280, 281, 282, 285, 287, 291, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 318, 319, 321, 327, 328, 333, 339, 340, 342, 345, 353, 354, 357, 359, 364, 369, 370, 371, 372, 374, 375, 376, 378, 379, 380, 381, 382, 383, 385, 404, 407, 410, 411, 412, 413, 414, 415, 416, 417, 423, 424, 426, 433, 436, 452, 466, 468, 470, 476, 487, 495, 501, 505, 508, 509, 510, 513, 514, 517, 519, 521, 522, 523, 545, 553, 554, 555, 556, 558, 559, 560, 562, 563, 564, 570, 571, 572, 574, 575, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 595, 603, 604, 612, 614, 615, 617, 618, 619, 620, 622, 623, 627, 628, 629, 630, 631, 633, 643, 644, 646, 647, 648, 649, 650, 652, 655, 659, 660, 668, 669, 672, 681, 689, 700, 706, 719, 721, 722, 724, 729, 732, 737, 738, 739, 740, 742, 756, 757, 758, 760, 761, 763, 767, 769, 770, 771, 774, 777, 778, 780, 781, 783, 789, 800, 805, 806, 807, 808, 809, 810, 811, 813, 815, 816, 817, 818, 819, 826, 830, 831, 832, 836, 837, 838, 840, 841, 845, 853, 858, 872, 880, 888, 897, 902, 927, 942, 943, 945, 946, 947, 949, 950, 951, 952, 955, 957, 958, 959, 961, 966, 967, 968, 969, 972, 974, 982, 988, 989, 993, 994, 995, 996, 999, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1010], "spars": [6, 7, 8, 12, 14, 17, 19, 28, 36, 37, 51, 52, 54, 66, 72, 73, 74, 86, 88, 106, 119, 150, 152, 159, 160, 166, 169, 170, 173, 175, 176, 180, 197, 212, 214, 239, 245, 258, 274, 276, 288, 292, 300, 318, 321, 327, 332, 337, 339, 340, 341, 345, 347, 348, 349, 350, 357, 358, 359, 373, 374, 380, 381, 383, 384, 388, 395, 402, 404, 406, 407, 408, 410, 411, 413, 414, 415, 416, 417, 421, 423, 424, 426, 427, 428, 429, 431, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 451, 452, 453, 460, 461, 467, 472, 487, 488, 490, 491, 492, 493, 495, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 517, 518, 519, 520, 521, 522, 523, 524, 527, 528, 529, 530, 531, 532, 533, 534, 535, 545, 546, 549, 550, 552, 553, 554, 555, 557, 558, 567, 568, 569, 570, 571, 572, 573, 593, 594, 595, 597, 602, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 655, 656, 657, 659, 660, 661, 662, 664, 665, 666, 667, 676, 677, 678, 692, 693, 694, 697, 701, 702, 703, 717, 718, 723, 724, 726, 727, 729, 730, 731, 733, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 746, 747, 748, 750, 755, 756, 759, 762, 765, 766, 776, 783, 786, 787, 788, 789, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 807, 808, 809, 811, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 828, 829, 830, 832, 834, 835, 836, 837, 838, 840, 842, 843, 844, 845, 847, 848, 849, 850, 852, 854, 855, 856, 857, 858, 859, 860, 861, 862, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 881, 883, 884, 885, 886, 891, 899, 902, 903, 906, 907, 908, 916, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 939, 943, 946, 949, 950, 951, 953, 954, 956, 966, 968, 969, 973, 974, 975, 985, 986, 987, 988, 989, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011], "demonstr": [7, 13, 19, 20, 21, 24, 30, 33, 37, 40, 52, 58, 66, 68, 101, 105, 112, 115, 132, 145, 146, 150, 156, 182, 183, 215, 221, 222, 226, 230, 231, 234, 241, 244, 247, 252, 260, 263, 270, 277, 279, 280, 282, 285, 289, 295, 297, 298, 301, 305, 311, 319, 320, 321, 328, 334, 340, 341, 345, 350, 357, 364, 369, 373, 377, 380, 411, 466, 476, 484, 661, 667, 677, 705, 761, 762, 830, 861, 873, 942, 943, 947, 953, 954, 955, 956, 963, 966, 969, 971, 974], "diabet": [7, 115, 124, 125, 134, 135, 149, 150, 168, 169, 170, 177, 178, 234, 243, 251, 338, 380, 465, 616, 617, 762, 767, 786, 787, 788, 961, 974, 978, 982, 989], "regress": [7, 10, 14, 24, 26, 28, 51, 65, 67, 68, 75, 76, 78, 83, 88, 89, 90, 97, 100, 101, 104, 106, 107, 108, 109, 112, 113, 116, 120, 121, 127, 135, 136, 138, 146, 148, 149, 150, 152, 153, 154, 156, 159, 163, 165, 166, 167, 168, 171, 175, 176, 178, 182, 184, 185, 186, 187, 190, 192, 197, 204, 207, 209, 217, 218, 219, 222, 234, 246, 249, 251, 252, 257, 259, 261, 274, 275, 276, 278, 279, 282, 283, 289, 290, 291, 292, 294, 302, 303, 315, 319, 322, 323, 327, 333, 334, 337, 338, 340, 342, 345, 347, 350, 353, 354, 357, 358, 359, 368, 371, 375, 376, 377, 378, 382, 396, 401, 428, 429, 438, 448, 453, 454, 456, 460, 465, 466, 468, 469, 476, 480, 481, 482, 488, 492, 495, 499, 501, 503, 505, 506, 507, 509, 510, 512, 516, 517, 518, 519, 520, 521, 522, 523, 524, 526, 528, 529, 530, 531, 534, 535, 556, 557, 558, 559, 560, 561, 562, 563, 564, 568, 569, 570, 573, 574, 575, 578, 579, 586, 587, 589, 595, 596, 597, 598, 599, 601, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 658, 665, 670, 685, 686, 687, 691, 704, 705, 708, 709, 710, 711, 712, 713, 714, 715, 716, 748, 753, 754, 762, 765, 766, 768, 776, 784, 788, 789, 791, 792, 796, 798, 799, 807, 808, 813, 815, 816, 822, 823, 825, 826, 829, 830, 832, 838, 839, 840, 842, 845, 846, 849, 854, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 879, 885, 888, 890, 906, 942, 943, 945, 948, 950, 960, 961, 963, 964, 972, 973, 974, 975, 976, 977, 978, 981, 984, 989, 993, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010], "patient": [7, 124, 135, 149, 342, 353, 377, 949, 985], "diseas": [7, 124, 135, 149, 241, 342, 676, 953, 985], "newsgroup": [7, 15, 19, 212, 239, 300, 320, 321, 338, 370, 381, 452, 453, 979, 989], "post": [7, 15, 19, 66, 150, 291, 319, 320, 321, 322, 327, 332, 340, 344, 345, 349, 350, 358, 373, 412, 452, 453, 464, 676, 791, 873, 953, 969, 974, 976, 977, 987, 1004], "about": [7, 11, 27, 41, 50, 54, 59, 66, 80, 82, 110, 132, 146, 150, 152, 153, 156, 185, 198, 208, 215, 235, 236, 238, 240, 245, 257, 263, 283, 287, 289, 290, 291, 292, 293, 297, 319, 321, 327, 328, 332, 333, 338, 340, 343, 344, 345, 349, 350, 351, 358, 359, 360, 367, 372, 377, 378, 381, 383, 402, 456, 458, 459, 460, 461, 464, 465, 466, 468, 469, 474, 479, 525, 526, 557, 558, 571, 572, 578, 597, 604, 640, 642, 706, 762, 768, 776, 784, 794, 844, 886, 943, 949, 950, 952, 954, 956, 959, 960, 963, 964, 966, 968, 969, 972, 976, 977, 978, 979, 985, 987, 998, 999, 1009], "sgdclassifi": [7, 8, 188, 189, 190, 191, 192, 193, 194, 213, 246, 300, 309, 319, 328, 332, 334, 351, 359, 371, 372, 381, 602, 604, 605, 606, 610, 622, 630, 632, 865, 870, 945, 949, 954, 967, 968, 987, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1006, 1007, 1008, 1009, 1010], "stochast": [7, 55, 112, 113, 116, 127, 150, 158, 159, 169, 203, 205, 208, 213, 264, 266, 267, 272, 275, 290, 306, 373, 378, 380, 426, 452, 460, 466, 467, 468, 478, 486, 500, 508, 523, 524, 535, 568, 591, 595, 603, 622, 623, 632, 636, 638, 640, 641, 642, 643, 651, 652, 653, 654, 656, 791, 814, 821, 822, 823, 826, 835, 869, 901, 902, 927, 942, 956, 957, 959, 974, 975, 988, 989, 993, 994, 997, 998, 1000, 1002, 1004], "gradient": [7, 13, 43, 63, 67, 100, 101, 105, 106, 108, 109, 118, 121, 124, 142, 143, 144, 150, 156, 159, 161, 169, 183, 204, 208, 213, 237, 239, 255, 264, 274, 278, 282, 284, 294, 306, 359, 372, 373, 383, 416, 426, 430, 431, 452, 454, 460, 465, 467, 484, 517, 518, 523, 524, 525, 526, 528, 529, 535, 550, 574, 575, 576, 577, 578, 579, 580, 583, 584, 585, 586, 587, 588, 589, 595, 598, 599, 603, 612, 613, 622, 623, 632, 633, 636, 638, 640, 641, 642, 644, 651, 656, 658, 659, 704, 705, 711, 713, 762, 765, 766, 767, 788, 791, 821, 822, 823, 826, 838, 839, 869, 927, 950, 953, 956, 957, 958, 959, 972, 974, 975, 989, 993, 994, 996, 997, 998, 999, 1000, 1002, 1003, 1006, 1008, 1010], "descent": [7, 14, 112, 150, 159, 166, 169, 208, 213, 264, 290, 306, 378, 380, 435, 436, 442, 452, 460, 467, 495, 501, 502, 503, 504, 506, 507, 509, 510, 511, 512, 535, 595, 603, 610, 611, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 632, 636, 638, 640, 641, 642, 645, 646, 647, 648, 651, 658, 791, 822, 823, 826, 865, 869, 927, 950, 957, 959, 968, 974, 975, 985, 989, 993, 996, 997, 998, 1000, 1002, 1004, 1006, 1007, 1008], "nusvr": [7, 332, 871, 968, 995, 1001, 1003, 1004, 1005, 1007, 1008], "nu": [7, 9, 11, 146, 195, 208, 306, 332, 380, 383, 583, 641, 867, 868, 869, 959, 967, 968, 1004, 1008], "vector": [7, 8, 9, 10, 12, 15, 16, 19, 20, 25, 26, 28, 30, 33, 37, 45, 68, 82, 87, 89, 90, 131, 137, 145, 162, 168, 185, 186, 193, 197, 213, 214, 221, 236, 238, 239, 243, 264, 276, 278, 301, 303, 304, 307, 308, 309, 310, 311, 312, 315, 317, 320, 332, 334, 340, 350, 351, 354, 357, 359, 370, 371, 373, 375, 376, 377, 378, 380, 383, 384, 385, 401, 407, 408, 409, 411, 413, 414, 415, 417, 428, 429, 431, 432, 446, 447, 448, 449, 451, 453, 461, 473, 476, 485, 488, 495, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 513, 514, 515, 516, 531, 532, 533, 534, 545, 546, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 581, 582, 583, 584, 586, 587, 589, 595, 602, 604, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 636, 637, 638, 639, 640, 641, 642, 650, 651, 652, 653, 655, 656, 657, 659, 663, 683, 698, 726, 731, 732, 733, 734, 736, 737, 738, 740, 741, 762, 765, 766, 776, 789, 792, 793, 794, 800, 801, 802, 803, 804, 807, 808, 809, 811, 812, 813, 815, 816, 817, 822, 823, 830, 832, 837, 845, 849, 852, 863, 865, 866, 867, 868, 869, 870, 871, 872, 885, 899, 901, 902, 916, 922, 942, 945, 946, 947, 949, 950, 951, 953, 954, 955, 957, 958, 959, 963, 967, 969, 974, 975, 978, 981, 984, 987, 989, 990, 993, 994, 995, 996, 997, 999, 1001, 1002, 1004, 1006, 1011], "gradientboostingregressor": [7, 112, 114, 115, 121, 124, 332, 350, 357, 518, 526, 596, 597, 949, 953, 954, 993, 994, 995, 996, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1010], "forward": [7, 101, 135, 215, 289, 332, 345, 364, 382, 472, 473, 503, 507, 517, 523, 524, 549, 550, 566, 632, 649, 650, 825, 829, 949, 973, 1005], "wise": [7, 25, 45, 145, 182, 208, 248, 278, 320, 332, 359, 371, 373, 377, 378, 382, 422, 495, 498, 501, 505, 509, 510, 513, 514, 517, 519, 520, 523, 524, 556, 559, 560, 562, 563, 564, 570, 604, 616, 664, 717, 793, 842, 855, 856, 859, 926, 928, 929, 930, 931, 934, 945, 947, 949, 953, 954, 967, 973, 993, 998, 1001, 1002, 1003], "fashion": [7, 106, 112, 189, 247, 333, 359, 370, 371, 373, 378, 380, 517, 521, 522, 523, 524, 528, 529, 530, 566, 591, 791, 814, 829, 832, 838, 849, 873, 874, 875, 876, 924, 943, 949, 953, 963, 1002], "notic": [7, 13, 24, 25, 32, 50, 54, 75, 104, 106, 107, 114, 134, 160, 165, 208, 221, 235, 236, 238, 239, 241, 247, 248, 258, 283, 311, 319, 320, 321, 328, 350, 360, 377, 460, 505, 527, 942, 952, 953, 959, 987, 990, 1006], "faster": [7, 19, 36, 61, 69, 87, 106, 107, 111, 112, 114, 135, 154, 158, 167, 181, 183, 196, 197, 199, 214, 258, 260, 275, 288, 290, 291, 319, 320, 321, 332, 339, 345, 353, 354, 359, 372, 373, 378, 382, 383, 385, 407, 411, 413, 415, 416, 417, 426, 472, 495, 496, 497, 500, 501, 502, 503, 504, 506, 507, 509, 510, 511, 512, 517, 523, 524, 525, 526, 607, 610, 611, 616, 617, 622, 623, 624, 625, 626, 627, 636, 638, 648, 651, 655, 659, 689, 719, 741, 742, 743, 805, 806, 810, 822, 823, 840, 842, 844, 854, 858, 902, 922, 942, 946, 949, 954, 956, 957, 960, 965, 967, 968, 969, 972, 983, 987, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "10_000": [7, 24, 71, 106, 114, 152, 158, 212, 241, 258, 523, 524, 528, 529, 842], "vari": [7, 13, 29, 32, 41, 43, 52, 59, 62, 71, 107, 108, 110, 119, 128, 134, 139, 150, 153, 154, 170, 172, 175, 179, 188, 206, 213, 218, 229, 234, 238, 241, 272, 278, 280, 281, 283, 293, 295, 301, 307, 310, 312, 317, 328, 332, 334, 340, 359, 405, 409, 410, 464, 472, 478, 479, 486, 523, 524, 528, 529, 610, 611, 614, 615, 616, 617, 618, 619, 624, 625, 626, 627, 645, 648, 667, 726, 781, 784, 789, 791, 792, 822, 826, 830, 845, 862, 870, 873, 874, 927, 945, 948, 949, 953, 956, 957, 966, 969, 974, 977, 1000, 1001, 1009], "relev": [7, 9, 19, 72, 76, 133, 135, 150, 160, 175, 184, 238, 239, 245, 328, 332, 334, 340, 342, 344, 345, 347, 349, 350, 351, 359, 360, 364, 375, 376, 382, 383, 401, 407, 408, 411, 413, 429, 433, 434, 435, 436, 437, 438, 439, 440, 446, 447, 448, 497, 498, 502, 505, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 545, 546, 552, 554, 555, 558, 574, 575, 599, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 654, 689, 703, 719, 763, 764, 765, 766, 769, 771, 780, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 810, 812, 815, 816, 822, 823, 825, 828, 830, 831, 832, 837, 843, 844, 845, 860, 861, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 878, 879, 953, 954, 959, 970, 973, 974, 996, 1001, 1007], "next": [7, 24, 57, 75, 110, 111, 115, 124, 144, 152, 156, 174, 178, 181, 209, 217, 221, 222, 226, 233, 244, 257, 283, 284, 285, 289, 297, 319, 323, 327, 328, 343, 345, 347, 349, 370, 373, 374, 377, 380, 472, 473, 574, 598, 656, 662, 664, 666, 744, 760, 761, 791, 919, 942, 946, 952, 953, 963, 977, 990, 993, 1006, 1007], "ham": [7, 414, 421, 545, 663, 667, 673, 697, 704, 741, 742, 743, 759, 956], "loss": [7, 13, 23, 24, 25, 26, 96, 107, 113, 114, 115, 116, 137, 138, 150, 159, 163, 171, 174, 183, 185, 186, 188, 189, 193, 199, 214, 246, 274, 275, 283, 290, 294, 300, 304, 305, 309, 311, 315, 319, 357, 359, 371, 372, 378, 383, 428, 429, 460, 472, 473, 496, 502, 503, 504, 507, 511, 516, 517, 518, 522, 523, 524, 525, 526, 529, 607, 610, 613, 622, 623, 630, 631, 632, 633, 634, 635, 636, 640, 641, 642, 643, 667, 670, 673, 686, 697, 698, 703, 704, 705, 708, 709, 710, 711, 712, 713, 714, 715, 716, 753, 754, 759, 762, 765, 766, 776, 787, 788, 791, 822, 823, 825, 826, 829, 830, 838, 839, 840, 845, 865, 866, 871, 872, 874, 876, 902, 906, 946, 949, 957, 961, 966, 967, 968, 969, 974, 987, 993, 995, 996, 997, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "eustach": [7, 8, 10, 977, 995, 996], "diemert": [7, 8, 10, 977, 995, 996], "maria": [7, 115, 121, 135, 149, 373, 1004, 1005, 1006, 1007, 1008], "telenczuk": [7, 115, 121, 135, 149, 1002, 1005, 1006, 1008], "github": [7, 8, 12, 25, 67, 68, 106, 108, 109, 115, 117, 118, 121, 124, 132, 142, 149, 153, 154, 155, 162, 209, 210, 211, 215, 219, 220, 221, 222, 229, 236, 238, 239, 245, 250, 258, 276, 284, 288, 289, 291, 292, 294, 298, 327, 343, 344, 348, 349, 350, 351, 353, 357, 359, 360, 367, 369, 656, 971, 972, 976, 987, 1003], "com": [7, 8, 11, 12, 15, 16, 20, 21, 23, 39, 45, 54, 62, 66, 67, 99, 101, 102, 103, 104, 105, 106, 113, 115, 116, 120, 121, 137, 140, 142, 144, 146, 149, 161, 181, 183, 188, 198, 199, 202, 204, 206, 211, 224, 226, 227, 239, 242, 258, 278, 279, 282, 283, 319, 320, 340, 343, 345, 349, 350, 351, 353, 357, 373, 406, 498, 505, 635, 669, 1000, 1003], "maikia": [7, 115, 121, 149, 1001, 1002, 1004, 1005], "lemaitre58": [7, 121, 137, 142, 144, 146, 202, 278], "gmail": [7, 11, 15, 16, 23, 39, 45, 54, 62, 66, 67, 99, 101, 102, 103, 104, 105, 106, 113, 115, 116, 120, 121, 137, 140, 142, 144, 146, 161, 181, 183, 198, 199, 202, 204, 211, 224, 226, 227, 239, 242, 278, 283, 319, 320], "licens": [7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 20, 21, 23, 24, 25, 26, 28, 29, 30, 34, 36, 37, 39, 42, 43, 44, 45, 48, 49, 50, 51, 54, 58, 62, 63, 64, 66, 67, 69, 70, 71, 77, 82, 83, 87, 89, 91, 92, 93, 94, 97, 99, 101, 102, 103, 104, 105, 106, 107, 112, 113, 115, 116, 120, 121, 135, 137, 138, 140, 141, 142, 143, 144, 146, 149, 158, 163, 164, 166, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 181, 182, 183, 186, 188, 189, 197, 198, 199, 202, 203, 204, 206, 208, 211, 213, 214, 216, 218, 224, 226, 239, 242, 244, 251, 257, 258, 260, 266, 267, 268, 270, 271, 273, 276, 278, 279, 280, 281, 282, 283, 296, 297, 298, 299, 301, 311, 312, 315, 316, 319, 320, 321, 339, 359, 367, 969, 977], "hamming_loss": [7, 667, 759, 953, 995, 999, 1002], "mean_squared_error": [7, 112, 114, 115, 177, 181, 183, 185, 187, 199, 328, 380, 715, 953, 994, 996, 1003, 1004, 1010], "seed": [7, 11, 25, 32, 36, 37, 41, 42, 49, 51, 54, 56, 57, 61, 62, 67, 73, 74, 75, 85, 88, 93, 104, 110, 128, 130, 155, 171, 176, 179, 184, 187, 190, 194, 198, 204, 225, 227, 228, 229, 230, 241, 244, 252, 263, 264, 265, 270, 312, 313, 317, 320, 328, 333, 347, 354, 357, 359, 373, 377, 378, 407, 411, 412, 414, 416, 421, 423, 424, 425, 426, 435, 436, 437, 500, 508, 517, 518, 519, 520, 523, 524, 591, 610, 611, 616, 617, 624, 625, 626, 627, 641, 653, 655, 657, 659, 760, 761, 766, 796, 799, 814, 868, 888, 901, 902, 918, 922, 942, 943, 948, 950, 985, 986, 997, 998, 1002, 1003, 1009], "fetch_20newsgroups_vector": [7, 196, 212, 340, 993, 1003, 1005, 1010], "generate_data": [7, 31], "load_diabet": [7, 115, 124, 126, 135, 149, 166, 168, 169, 170, 177, 178, 219, 234, 292, 380, 522, 526, 532, 637, 665, 786, 787, 788, 874, 876, 961, 982, 985, 999, 1004, 1007], "elif": [7, 8, 16, 161, 183, 216, 226, 263, 841], "subset": [7, 19, 20, 25, 26, 30, 66, 67, 75, 76, 108, 110, 111, 112, 126, 132, 135, 154, 156, 170, 182, 196, 197, 198, 199, 211, 213, 217, 218, 236, 239, 241, 247, 248, 250, 255, 283, 284, 289, 296, 300, 319, 320, 321, 328, 340, 345, 353, 357, 359, 370, 371, 373, 374, 377, 380, 381, 383, 390, 401, 413, 428, 430, 431, 433, 452, 453, 456, 457, 461, 472, 513, 514, 515, 517, 519, 520, 521, 522, 523, 525, 526, 527, 528, 529, 530, 531, 533, 566, 574, 593, 603, 604, 605, 606, 615, 619, 622, 630, 631, 632, 635, 638, 639, 640, 641, 642, 643, 661, 667, 668, 677, 680, 682, 694, 697, 718, 720, 756, 759, 764, 789, 791, 793, 794, 795, 796, 800, 801, 802, 803, 804, 807, 812, 815, 822, 831, 860, 861, 865, 867, 870, 873, 875, 881, 922, 942, 949, 953, 954, 964, 966, 968, 969, 987, 996, 1001, 1002, 1004, 1006], "regression_data": 7, "classification_data": 7, "calcul": [7, 25, 26, 31, 43, 56, 75, 99, 100, 101, 105, 122, 149, 150, 156, 177, 185, 186, 198, 213, 215, 237, 238, 244, 248, 252, 257, 305, 311, 312, 328, 332, 352, 359, 370, 371, 373, 377, 378, 380, 384, 402, 407, 408, 410, 412, 414, 415, 417, 419, 420, 435, 436, 442, 445, 500, 511, 517, 528, 533, 561, 575, 584, 596, 597, 598, 608, 609, 610, 611, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 636, 637, 638, 639, 643, 645, 648, 652, 654, 656, 658, 671, 680, 692, 693, 698, 699, 701, 707, 713, 714, 717, 727, 732, 734, 735, 736, 737, 741, 744, 746, 747, 750, 751, 752, 755, 756, 758, 769, 771, 786, 790, 803, 805, 806, 843, 844, 845, 851, 855, 865, 866, 891, 904, 945, 947, 949, 950, 951, 953, 955, 956, 957, 961, 963, 966, 968, 974, 982, 985, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "given": [7, 10, 11, 13, 26, 28, 34, 46, 55, 57, 73, 79, 88, 92, 107, 117, 119, 121, 137, 144, 153, 154, 165, 181, 182, 185, 199, 202, 208, 212, 213, 215, 217, 218, 219, 234, 238, 239, 240, 241, 247, 261, 264, 265, 266, 280, 284, 290, 319, 320, 321, 326, 332, 334, 340, 344, 345, 347, 349, 351, 353, 354, 357, 359, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 390, 399, 400, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 420, 422, 423, 424, 425, 427, 428, 429, 431, 433, 434, 435, 436, 437, 438, 439, 440, 442, 445, 446, 447, 448, 451, 460, 465, 467, 469, 487, 497, 498, 500, 502, 503, 504, 507, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 545, 546, 552, 553, 554, 555, 557, 558, 565, 571, 572, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 595, 596, 599, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 651, 652, 654, 655, 661, 662, 663, 664, 665, 666, 668, 669, 670, 676, 678, 681, 682, 684, 687, 689, 690, 697, 699, 700, 703, 715, 718, 719, 721, 722, 727, 737, 741, 744, 745, 747, 750, 751, 752, 757, 758, 760, 761, 762, 763, 764, 765, 766, 768, 769, 771, 774, 776, 780, 784, 786, 787, 788, 789, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 822, 823, 824, 825, 826, 827, 828, 830, 831, 832, 835, 836, 837, 838, 839, 840, 841, 842, 844, 845, 851, 852, 854, 857, 858, 859, 860, 861, 862, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 880, 889, 890, 891, 909, 910, 911, 912, 937, 941, 942, 945, 947, 949, 950, 951, 952, 953, 955, 956, 957, 958, 959, 960, 961, 963, 966, 967, 968, 969, 977, 978, 982, 983, 985, 986, 987, 993, 994, 995, 996, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010], "round": [7, 9, 24, 79, 107, 148, 149, 188, 199, 238, 244, 280, 282, 319, 359, 414, 420, 421, 528, 529, 557, 558, 561, 591, 656, 677, 764, 774, 830, 862, 877, 879, 943, 957, 969, 995, 997, 999, 1001, 1002, 1004, 1006, 1007, 1009, 1010], "changing_param": 7, "collect": [7, 10, 12, 13, 16, 19, 24, 105, 117, 124, 135, 142, 149, 156, 169, 174, 204, 211, 241, 245, 320, 321, 332, 340, 342, 349, 363, 372, 377, 378, 380, 381, 410, 428, 517, 518, 519, 520, 521, 522, 523, 524, 527, 528, 529, 530, 533, 534, 545, 547, 548, 552, 553, 554, 555, 596, 692, 693, 701, 746, 747, 750, 764, 768, 769, 771, 784, 911, 924, 927, 942, 948, 949, 953, 959, 964, 973, 977, 982, 987, 995, 1005], "chang": [7, 16, 24, 25, 87, 91, 92, 104, 107, 115, 138, 148, 152, 153, 156, 182, 183, 185, 186, 219, 220, 233, 238, 245, 248, 282, 287, 288, 289, 290, 291, 292, 293, 294, 297, 307, 311, 321, 327, 328, 332, 333, 334, 340, 343, 347, 348, 349, 350, 353, 357, 359, 364, 373, 377, 380, 381, 383, 385, 398, 401, 404, 407, 408, 411, 413, 416, 418, 423, 426, 429, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 446, 447, 448, 457, 458, 460, 468, 472, 473, 476, 477, 478, 486, 490, 491, 495, 497, 498, 499, 500, 501, 502, 503, 504, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 541, 542, 543, 544, 545, 546, 552, 553, 554, 555, 557, 558, 561, 566, 574, 575, 577, 578, 579, 581, 583, 584, 586, 587, 589, 591, 599, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 651, 654, 656, 658, 664, 668, 671, 676, 680, 681, 692, 693, 699, 700, 704, 718, 720, 741, 747, 748, 750, 758, 760, 761, 762, 763, 764, 765, 766, 767, 769, 771, 776, 780, 781, 783, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 812, 815, 816, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 837, 838, 844, 845, 846, 853, 854, 859, 860, 861, 863, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 879, 883, 885, 886, 897, 902, 912, 919, 920, 921, 923, 942, 943, 944, 952, 953, 954, 956, 963, 966, 967, 968, 969, 973, 978, 985, 987, 991, 992, 1011], "affect": [7, 24, 75, 144, 152, 153, 185, 205, 218, 219, 241, 248, 283, 293, 328, 332, 333, 334, 341, 359, 362, 371, 373, 376, 377, 379, 381, 384, 386, 408, 414, 421, 437, 439, 443, 513, 514, 533, 663, 676, 751, 762, 765, 766, 767, 776, 780, 781, 805, 806, 807, 808, 809, 811, 813, 815, 816, 817, 845, 846, 856, 870, 952, 956, 968, 993, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006], "complexity_comput": [7, 10], "benchmark_influ": 7, "conf": [7, 26, 349, 371, 377, 800, 955, 1007], "prediction_tim": [7, 8], "prediction_pow": 7, "param_valu": 7, "changing_param_valu": 7, "tuned_param": 7, "postfit_hook": 7, "append": [7, 8, 9, 12, 13, 16, 17, 24, 31, 34, 37, 41, 47, 58, 67, 94, 104, 105, 107, 112, 114, 149, 156, 174, 185, 186, 188, 189, 196, 199, 213, 214, 238, 241, 247, 248, 251, 273, 274, 284, 299, 307, 310, 319, 320, 321, 323, 327, 351, 359, 374, 381, 622, 623, 865, 866, 872, 892, 963, 982], "start_tim": [7, 10, 19, 108, 109, 112, 121, 137, 170, 202], "elapsed_tim": [7, 36, 64, 108, 109, 121, 198], "float": [7, 10, 12, 13, 16, 19, 38, 42, 43, 44, 45, 50, 57, 58, 62, 63, 64, 67, 90, 93, 128, 145, 153, 167, 171, 204, 237, 238, 242, 246, 315, 321, 332, 339, 340, 345, 354, 359, 373, 374, 381, 382, 384, 385, 386, 390, 392, 396, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 416, 418, 419, 420, 421, 422, 423, 425, 426, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 451, 456, 457, 458, 460, 462, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 488, 489, 491, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 547, 548, 552, 555, 556, 557, 558, 559, 560, 561, 562, 566, 567, 574, 575, 577, 578, 579, 580, 581, 583, 584, 586, 587, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 677, 678, 680, 681, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 697, 698, 699, 700, 701, 702, 703, 704, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 718, 719, 720, 722, 729, 732, 738, 739, 740, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 757, 758, 759, 760, 761, 762, 764, 765, 766, 768, 776, 779, 782, 786, 787, 788, 789, 790, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 825, 828, 831, 832, 838, 839, 841, 843, 845, 846, 847, 848, 857, 858, 859, 860, 861, 862, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 879, 882, 883, 885, 886, 889, 899, 900, 916, 928, 934, 939, 943, 953, 954, 956, 957, 963, 968, 969, 993, 994, 995, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010], "pred_scor": 7, "prediction_performance_comput": 7, "4f": [7, 8, 19, 104, 113, 115, 196, 197, 199, 283, 872], "prediction_performance_label": 7, "necessari": [7, 14, 105, 165, 181, 186, 224, 238, 239, 245, 260, 311, 325, 332, 340, 343, 344, 345, 346, 347, 348, 349, 353, 357, 373, 375, 380, 416, 426, 452, 453, 455, 456, 457, 458, 459, 461, 498, 608, 609, 610, 616, 620, 621, 624, 625, 626, 627, 628, 629, 635, 637, 639, 640, 655, 659, 758, 828, 837, 848, 852, 858, 942, 945, 949, 952, 955, 963, 969, 987, 993, 1001], "defin": [7, 12, 32, 50, 52, 54, 63, 66, 67, 69, 80, 87, 92, 99, 101, 102, 121, 135, 137, 144, 145, 146, 154, 155, 156, 160, 182, 189, 198, 199, 208, 212, 215, 219, 221, 224, 229, 238, 239, 241, 245, 247, 248, 249, 250, 255, 258, 276, 278, 288, 294, 307, 311, 315, 319, 320, 332, 341, 344, 345, 346, 347, 351, 352, 354, 357, 358, 359, 367, 368, 369, 370, 372, 373, 374, 375, 377, 378, 379, 380, 381, 383, 388, 389, 390, 392, 393, 394, 395, 396, 397, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 420, 423, 427, 428, 429, 433, 434, 435, 436, 437, 438, 439, 440, 446, 447, 448, 449, 453, 483, 484, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 570, 573, 574, 575, 576, 577, 578, 579, 580, 582, 583, 584, 586, 587, 591, 592, 593, 594, 596, 598, 599, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 652, 653, 654, 655, 656, 660, 661, 663, 672, 674, 680, 685, 686, 687, 688, 691, 694, 701, 704, 708, 709, 711, 713, 714, 716, 717, 720, 723, 729, 744, 748, 753, 754, 755, 756, 760, 761, 762, 765, 766, 768, 776, 784, 788, 790, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 821, 822, 823, 825, 828, 829, 830, 831, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 852, 857, 858, 859, 860, 861, 862, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 889, 891, 894, 900, 911, 913, 937, 942, 943, 949, 950, 951, 952, 954, 955, 956, 958, 959, 960, 961, 963, 965, 967, 968, 969, 973, 983, 986, 989, 990, 995, 999, 1000, 1001, 1003, 1004, 1005, 1007, 1008, 1009, 1010], "complexity_label": [7, 10], "type": [7, 16, 50, 51, 62, 65, 66, 76, 83, 85, 96, 110, 111, 113, 142, 149, 150, 152, 153, 154, 158, 165, 181, 183, 210, 215, 220, 222, 223, 225, 226, 229, 230, 233, 239, 244, 245, 247, 248, 249, 255, 268, 284, 294, 311, 319, 321, 327, 328, 333, 338, 339, 340, 342, 343, 345, 346, 348, 349, 350, 351, 357, 358, 363, 367, 369, 370, 374, 381, 397, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 460, 472, 473, 479, 531, 536, 545, 546, 549, 550, 552, 553, 555, 564, 568, 581, 591, 593, 594, 602, 620, 622, 636, 638, 643, 651, 653, 656, 657, 663, 665, 671, 678, 680, 692, 693, 696, 701, 704, 746, 747, 750, 751, 760, 761, 762, 768, 776, 784, 789, 791, 792, 807, 808, 809, 811, 812, 813, 815, 816, 817, 818, 819, 825, 826, 827, 830, 832, 838, 839, 845, 846, 863, 867, 868, 869, 870, 871, 881, 883, 885, 886, 889, 893, 894, 916, 917, 924, 927, 939, 940, 943, 945, 950, 952, 953, 954, 955, 956, 957, 963, 965, 969, 974, 976, 977, 980, 985, 986, 987, 993, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "_count_nonzero_coeffici": 7, "coef_": [7, 10, 14, 51, 79, 131, 132, 135, 152, 153, 160, 163, 165, 166, 167, 171, 172, 173, 174, 175, 176, 177, 180, 184, 185, 186, 190, 196, 197, 216, 222, 251, 285, 291, 305, 312, 316, 319, 328, 340, 347, 359, 376, 382, 429, 446, 447, 448, 513, 557, 558, 561, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 865, 866, 867, 868, 869, 870, 871, 937, 947, 949, 967, 968, 985, 993, 995, 998, 1000, 1005, 1007, 1010], "toarrai": [7, 294, 300, 327, 374, 381, 530, 546, 552, 554, 807, 808, 809, 811, 813, 815, 816, 817, 818, 819, 838, 855, 856, 903, 924, 925, 927, 943, 956, 963, 1010], "count_nonzero": [7, 10, 332], "configur": [7, 10, 67, 68, 154, 220, 222, 285, 319, 331, 343, 345, 347, 351, 353, 357, 359, 363, 364, 369, 372, 374, 381, 382, 397, 406, 407, 409, 411, 413, 416, 426, 428, 432, 446, 447, 448, 449, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 513, 530, 531, 532, 533, 534, 545, 546, 547, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 590, 591, 592, 593, 594, 596, 599, 602, 603, 604, 605, 606, 652, 653, 654, 655, 656, 658, 659, 751, 809, 814, 817, 821, 824, 825, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 857, 858, 863, 919, 920, 921, 950, 953, 963, 968, 972, 987, 989, 997, 1000, 1001, 1002, 1003, 1005, 1007, 1008, 1009, 1010], "penalti": [7, 10, 28, 77, 150, 159, 160, 165, 166, 170, 174, 181, 185, 196, 197, 210, 246, 273, 290, 300, 312, 319, 332, 353, 357, 372, 375, 378, 382, 435, 436, 437, 438, 439, 440, 442, 466, 495, 501, 502, 503, 504, 506, 507, 511, 512, 561, 607, 610, 611, 612, 613, 616, 617, 618, 621, 622, 623, 624, 625, 626, 632, 633, 634, 636, 640, 642, 644, 645, 651, 776, 845, 865, 866, 868, 870, 871, 872, 942, 949, 952, 957, 963, 967, 968, 974, 985, 987, 995, 998, 1000, 1002, 1003, 1005, 1006, 1008, 1009], "elasticnet": [7, 10, 162, 172, 246, 251, 332, 351, 357, 378, 611, 616, 621, 622, 623, 624, 625, 626, 627, 632, 640, 642, 645, 949, 967, 993, 994, 997, 998, 999, 1001, 1002, 1004, 1005, 1006, 1007], "001": [7, 10, 14, 30, 41, 59, 112, 135, 137, 153, 165, 190, 208, 218, 224, 236, 238, 240, 299, 320, 342, 351, 377, 500, 501, 503, 510, 591, 608, 609, 610, 611, 616, 617, 624, 625, 626, 627, 630, 631, 632, 640, 641, 642, 643, 645, 648, 653, 654, 657, 658, 760, 761, 822, 823, 860, 861, 867, 868, 869, 870, 871, 942, 974, 978, 987], "modified_hub": [7, 640, 967], "fit_intercept": [7, 160, 161, 167, 186, 195, 208, 246, 285, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 651, 865, 866, 872, 949, 967, 997, 1001, 1002, 1003, 1005, 1006, 1007], "tol": [7, 10, 17, 69, 87, 112, 135, 148, 161, 172, 174, 188, 189, 195, 197, 208, 219, 225, 227, 276, 290, 315, 319, 347, 351, 380, 385, 407, 411, 413, 416, 423, 426, 435, 436, 442, 446, 447, 448, 495, 496, 497, 499, 501, 502, 503, 504, 505, 507, 508, 509, 510, 511, 513, 514, 523, 524, 525, 526, 566, 591, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 636, 638, 640, 641, 642, 643, 644, 646, 647, 649, 650, 651, 652, 653, 655, 657, 659, 760, 761, 776, 814, 822, 823, 860, 861, 865, 866, 867, 868, 869, 870, 871, 939, 949, 967, 968, 983, 987, 997, 998, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1010], "n_iter_no_chang": [7, 107, 112, 189, 290, 319, 350, 359, 380, 523, 524, 525, 526, 630, 631, 632, 640, 641, 642, 822, 823, 967, 1001, 1004], "l1_ratio": [7, 10, 15, 165, 166, 172, 246, 251, 332, 357, 378, 502, 504, 511, 610, 611, 616, 622, 623, 624, 625, 626, 627, 632, 640, 642, 645, 949, 967, 994, 996, 998, 1005, 1007], "non_zero": [7, 12], "coeffici": [7, 10, 35, 46, 55, 57, 73, 74, 77, 87, 90, 126, 132, 137, 150, 151, 152, 159, 163, 165, 166, 167, 168, 172, 174, 175, 176, 177, 178, 179, 183, 184, 196, 199, 222, 275, 285, 289, 290, 291, 311, 315, 319, 320, 321, 332, 341, 345, 347, 359, 362, 372, 375, 376, 378, 382, 383, 386, 396, 416, 429, 431, 437, 439, 440, 442, 443, 444, 445, 446, 447, 448, 460, 488, 490, 491, 495, 499, 501, 503, 506, 507, 512, 516, 518, 520, 522, 524, 526, 529, 532, 534, 546, 553, 557, 561, 573, 575, 578, 591, 599, 600, 603, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 655, 665, 667, 680, 683, 692, 697, 701, 706, 713, 716, 738, 740, 748, 749, 751, 755, 756, 759, 777, 788, 791, 798, 799, 808, 816, 823, 826, 838, 845, 865, 866, 867, 868, 869, 870, 871, 874, 876, 944, 947, 949, 967, 968, 974, 985, 993, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1010], "misclassif": [7, 101, 311, 759, 967, 968, 969, 994], "ratio": [7, 50, 63, 69, 95, 150, 212, 214, 227, 231, 332, 345, 373, 375, 377, 380, 414, 420, 457, 458, 479, 505, 513, 514, 515, 595, 622, 674, 676, 680, 688, 693, 699, 702, 745, 746, 747, 750, 758, 788, 791, 811, 858, 922, 947, 959, 969, 974, 983, 1008, 1010], "sparsifi": [7, 165, 332, 622, 623, 630, 631, 632, 640, 641, 642, 865, 937, 995], "05": [7, 8, 13, 15, 23, 25, 34, 41, 49, 57, 59, 61, 62, 64, 71, 84, 92, 104, 107, 114, 119, 126, 131, 135, 142, 145, 146, 153, 161, 162, 180, 183, 195, 205, 206, 208, 218, 224, 226, 227, 230, 238, 239, 247, 249, 263, 266, 271, 278, 280, 287, 291, 297, 299, 312, 342, 382, 414, 420, 442, 495, 510, 556, 559, 560, 562, 577, 578, 579, 583, 584, 586, 587, 589, 596, 597, 613, 654, 658, 719, 762, 814, 865, 866, 949, 957, 963, 974], "n_support_vector": 7, "len": [7, 8, 10, 11, 16, 17, 19, 28, 29, 30, 34, 35, 38, 40, 41, 46, 47, 48, 52, 57, 58, 59, 60, 61, 62, 66, 68, 90, 96, 97, 99, 104, 107, 110, 111, 127, 128, 133, 134, 137, 145, 149, 154, 156, 180, 181, 199, 204, 208, 211, 212, 213, 215, 217, 218, 224, 226, 227, 233, 236, 238, 239, 246, 247, 249, 252, 257, 258, 265, 267, 268, 273, 279, 280, 281, 284, 293, 296, 297, 300, 307, 314, 317, 319, 320, 321, 327, 357, 359, 383, 391, 395, 397, 401, 409, 414, 420, 428, 471, 479, 514, 533, 534, 546, 561, 596, 597, 745, 762, 776, 787, 791, 793, 795, 796, 846, 860, 861, 985, 986, 987, 1002, 1005], "support_vectors_": [7, 10, 16, 308, 311, 312, 867, 868, 869, 870, 871, 968], "squared_error": [7, 13, 96, 114, 115, 290, 380, 522, 523, 524, 526, 529, 635, 640, 642, 657, 874, 876, 967, 969, 1006, 1009, 1010], "learning_r": [7, 101, 112, 113, 114, 115, 116, 206, 258, 274, 276, 288, 290, 380, 517, 518, 523, 524, 525, 526, 632, 640, 641, 642, 656, 821, 822, 823, 950, 960, 967, 994, 1002, 1006], "max_depth": [7, 29, 102, 103, 106, 110, 111, 112, 113, 114, 115, 116, 119, 120, 122, 148, 202, 235, 250, 255, 289, 290, 323, 325, 326, 327, 358, 359, 380, 517, 518, 521, 522, 523, 524, 525, 526, 528, 529, 530, 675, 765, 766, 789, 873, 874, 875, 876, 877, 878, 879, 942, 960, 969, 1002, 1004], "n_estim": [7, 10, 25, 29, 101, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 114, 115, 116, 119, 120, 123, 148, 156, 202, 217, 221, 226, 235, 250, 280, 287, 289, 332, 358, 359, 380, 382, 517, 518, 519, 520, 521, 522, 523, 524, 527, 528, 529, 530, 531, 532, 533, 534, 596, 765, 766, 942, 959, 960, 990, 1001, 1009], "n_tree": 7, "loop": [7, 8, 104, 114, 153, 233, 243, 319, 327, 332, 345, 346, 351, 373, 377, 382, 610, 611, 616, 617, 623, 624, 625, 626, 627, 942, 966, 967, 982, 996, 997, 1000, 1005, 1006, 1009, 1010], "previous": [7, 50, 54, 67, 101, 143, 153, 236, 245, 291, 340, 353, 357, 363, 373, 378, 381, 404, 407, 418, 488, 498, 505, 613, 622, 623, 630, 631, 632, 640, 641, 642, 865, 921, 949, 963, 972, 990, 993, 994, 995, 996, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "subsequ": [7, 30, 55, 71, 90, 101, 132, 169, 183, 240, 243, 258, 260, 307, 328, 345, 347, 351, 359, 373, 374, 380, 383, 401, 460, 472, 517, 518, 523, 525, 526, 630, 632, 640, 765, 766, 793, 794, 797, 800, 801, 802, 803, 804, 822, 840, 844, 943, 952, 954, 1002, 1003, 1007, 1009], "relax": [7, 373, 381, 417, 966, 1000], "sgd": [7, 8, 11, 16, 84, 96, 103, 113, 114, 122, 140, 141, 150, 159, 162, 166, 172, 173, 188, 195, 208, 215, 228, 246, 274, 275, 290, 303, 308, 309, 312, 313, 317, 319, 324, 328, 334, 468, 476, 595, 613, 630, 631, 632, 635, 640, 641, 642, 643, 822, 823, 942, 957, 974, 975, 989, 993, 996, 997, 998, 1000, 1004, 1006], "svr": [7, 10, 150, 207, 287, 302, 332, 399, 400, 520, 531, 532, 557, 558, 607, 642, 762, 768, 866, 868, 870, 946, 974, 985, 993, 995, 997, 998, 1001, 1003, 1004, 1005, 1006, 1007, 1008], "optim": [7, 14, 26, 50, 51, 54, 57, 68, 73, 74, 87, 112, 113, 115, 134, 135, 137, 138, 141, 142, 143, 144, 145, 165, 169, 170, 174, 189, 197, 214, 218, 236, 243, 246, 251, 255, 257, 262, 276, 278, 283, 291, 299, 309, 315, 319, 320, 321, 328, 332, 339, 342, 345, 347, 348, 357, 359, 363, 368, 370, 373, 375, 377, 378, 380, 382, 383, 384, 408, 411, 412, 413, 414, 416, 421, 425, 426, 436, 437, 443, 495, 498, 499, 501, 503, 507, 521, 522, 523, 524, 538, 574, 575, 583, 584, 599, 602, 604, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 636, 637, 638, 640, 641, 642, 644, 645, 646, 647, 648, 651, 654, 656, 658, 659, 665, 686, 693, 762, 776, 807, 808, 809, 811, 813, 814, 815, 816, 817, 822, 823, 841, 853, 857, 858, 865, 866, 867, 868, 869, 870, 871, 945, 946, 947, 948, 949, 950, 953, 954, 955, 956, 957, 958, 967, 968, 969, 972, 977, 982, 989, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1003, 1004, 1005, 1007, 1008, 1009], "few": [7, 15, 19, 36, 43, 49, 91, 111, 140, 143, 144, 170, 179, 181, 183, 199, 214, 215, 224, 240, 241, 245, 275, 278, 282, 287, 288, 289, 290, 291, 292, 293, 294, 296, 315, 321, 332, 340, 341, 342, 345, 347, 358, 360, 364, 367, 370, 371, 373, 377, 378, 380, 382, 383, 401, 413, 525, 526, 552, 555, 619, 656, 659, 858, 902, 921, 949, 950, 952, 953, 956, 957, 966, 968, 969, 977, 978, 985, 986, 987, 999, 1009], "drawn": [7, 49, 75, 104, 134, 137, 146, 152, 219, 245, 262, 319, 341, 373, 379, 380, 383, 385, 433, 434, 435, 436, 437, 438, 439, 440, 479, 487, 497, 519, 520, 521, 522, 527, 528, 529, 530, 575, 591, 596, 605, 801, 857, 858, 875, 876, 949, 963, 965, 996], "boost": [7, 13, 67, 100, 101, 102, 105, 106, 108, 109, 118, 121, 124, 144, 150, 156, 161, 183, 189, 204, 237, 239, 255, 274, 282, 284, 294, 351, 359, 372, 382, 412, 430, 431, 454, 460, 465, 484, 517, 518, 523, 524, 525, 526, 528, 529, 596, 597, 598, 599, 704, 705, 711, 713, 762, 765, 766, 767, 788, 791, 826, 838, 839, 949, 953, 972, 974, 975, 989, 993, 994, 996, 998, 999, 1000, 1002, 1006], "detriment": [7, 134, 333, 382, 949], "plot_influ": 7, "mse_valu": 7, "ax1": [7, 10, 54, 57, 62, 64, 69, 71, 75, 85, 111, 149, 156, 181, 209, 211, 219, 224, 241, 249, 279, 283, 284, 299, 319, 320, 983], "add_subplot": [7, 16, 24, 26, 39, 42, 61, 64, 83, 93, 154, 178, 196, 203, 205, 296, 297, 352, 986], "line1": [7, 12, 204], "tab": [7, 9, 32, 50, 75, 101, 118, 121, 137, 142, 144, 169, 170, 288, 294, 374, 1000], "blue": [7, 9, 13, 20, 21, 25, 32, 75, 85, 87, 101, 104, 108, 116, 118, 121, 123, 133, 142, 144, 158, 161, 169, 170, 177, 179, 204, 212, 232, 233, 238, 274, 283, 288, 294, 298, 342, 373, 378, 1010], "set_xlabel": [7, 10, 42, 50, 57, 68, 69, 71, 83, 85, 92, 112, 146, 148, 149, 152, 154, 155, 156, 158, 170, 176, 178, 179, 181, 183, 196, 197, 213, 238, 240, 244, 249, 250, 253, 255, 263, 278, 279, 283, 299, 320, 321, 323], "y1_label": 7, "set_ylabel": [7, 8, 10, 28, 32, 42, 50, 57, 62, 68, 69, 71, 75, 83, 85, 92, 97, 101, 108, 112, 146, 154, 158, 170, 172, 176, 178, 179, 181, 183, 185, 196, 213, 224, 238, 240, 244, 249, 250, 257, 263, 278, 279, 283, 287, 299, 315, 320, 323, 983], "spine": [7, 15, 32, 192, 278], "set_color": [7, 192], "get_color": 7, "yaxi": [7, 10, 42, 57, 83, 93, 107, 178, 201, 203, 206, 224, 258, 263, 319], "tick_param": [7, 15, 124, 224, 238, 282, 299], "ax2": [7, 54, 57, 62, 64, 75, 85, 111, 149, 156, 181, 209, 219, 224, 241, 249, 268, 279, 283, 284, 299, 319], "frameon": [7, 187], "line2": [7, 12, 204, 316], "orang": [7, 9, 50, 75, 85, 88, 89, 94, 101, 116, 118, 144, 149, 169, 170, 191, 216, 227, 269, 288, 294, 326, 954, 1010], "tick_right": 7, "set_label_posit": 7, "y2_label": 7, "__name__": [7, 16, 24, 58, 148, 181, 183, 215, 218, 222, 233, 240, 280, 300, 319, 320, 321, 352, 357, 838], "prediction_perform": 7, "4948": 7, "2675": 7, "058078": 7, "1847": 7, "3264": 7, "043476": 7, "997": [7, 37, 135], "3383": 7, "035719": 7, "802": [7, 135, 283, 307, 342, 974], "3582": 7, "032979": 7, "0517578125e": 7, "5558": 7, "7313": 7, "000185": 7, "5289": 7, "8022": [7, 359, 437, 1002], "000263": 7, "5193": 7, "8353": 7, "000421": 7, "124": [7, 320, 380, 995], "5131": [7, 998], "3279": 7, "000649": 7, "178": [7, 61, 342, 351, 474, 809, 974], "5149": 7, "0779": 7, "000885": 7, "4066": 7, "4812": 7, "000171": 7, "3551": 7, "1723": 7, "000194": 7, "3445": 7, "2171": 7, "000235": 7, "3433": 7, "0358": 7, "000267": 7, "3456": 7, "0602": 7, "000305": 7, "deduc": 7, "guarante": [7, 8, 75, 76, 153, 189, 212, 257, 258, 278, 320, 328, 334, 339, 353, 354, 373, 377, 378, 381, 410, 500, 609, 622, 623, 632, 636, 638, 640, 642, 651, 658, 779, 782, 805, 806, 843, 845, 848, 850, 851, 852, 853, 854, 855, 856, 858, 859, 872, 945, 949, 950, 952, 956, 961, 965, 969, 986, 1003], "aspect": [7, 55, 80, 87, 141, 154, 201, 208, 247, 267, 313, 332, 333, 334, 345, 359, 360, 373, 455, 622, 623, 969, 977, 1010], "595": [7, 181, 974], "plot_model_complexity_influ": [7, 974], "concentr": [7, 9, 62, 85, 92, 101, 119, 142, 149, 150, 206, 223, 225, 230, 249, 268, 280, 298, 341, 345, 380, 407, 483, 760, 952, 959, 974], "bayesian": [7, 26, 51, 62, 85, 149, 150, 159, 165, 169, 182, 187, 223, 225, 229, 230, 241, 249, 252, 263, 268, 279, 282, 283, 378, 401, 488, 492, 496, 575, 608, 609, 620, 621, 760, 761, 826, 828, 840, 845, 942, 972, 974, 975, 988, 989, 999, 1006], "mixtur": [7, 9, 32, 41, 52, 54, 62, 85, 149, 169, 226, 227, 249, 268, 294, 340, 341, 359, 373, 378, 379, 383, 587, 762, 972, 973, 974, 988, 989, 993, 997, 998, 999, 1000], "doesn": [8, 181, 215, 225, 257, 275, 307, 353, 359, 363, 364, 373, 381, 382, 386, 398, 439, 596, 597, 630, 632, 640, 680, 789, 792, 797, 807, 808, 822, 834, 835, 952, 953, 969, 997, 1010], "t": [8, 11, 12, 16, 17, 25, 32, 36, 37, 39, 40, 41, 49, 51, 55, 66, 68, 73, 74, 75, 77, 79, 85, 88, 89, 94, 96, 97, 101, 104, 105, 113, 114, 115, 116, 120, 121, 135, 138, 140, 141, 142, 145, 146, 150, 153, 154, 155, 156, 160, 162, 165, 168, 175, 178, 179, 180, 181, 182, 199, 200, 202, 203, 204, 205, 215, 216, 225, 228, 230, 237, 238, 257, 258, 270, 271, 275, 287, 290, 291, 293, 296, 297, 299, 303, 304, 307, 308, 312, 319, 320, 321, 326, 327, 328, 332, 333, 339, 340, 342, 345, 347, 349, 351, 353, 358, 359, 363, 364, 371, 372, 373, 374, 376, 377, 378, 380, 381, 382, 386, 390, 396, 398, 401, 411, 412, 414, 420, 427, 429, 432, 433, 434, 435, 436, 437, 438, 439, 440, 446, 447, 448, 459, 460, 477, 478, 479, 483, 484, 489, 494, 496, 498, 505, 508, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 531, 532, 533, 534, 554, 555, 558, 571, 572, 574, 575, 591, 592, 594, 595, 596, 597, 599, 603, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 656, 659, 660, 668, 674, 680, 681, 689, 699, 700, 718, 719, 720, 730, 751, 752, 757, 758, 762, 765, 766, 776, 789, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 811, 812, 815, 816, 821, 822, 823, 831, 834, 835, 836, 838, 839, 845, 846, 858, 860, 861, 865, 866, 867, 868, 870, 871, 873, 874, 875, 876, 902, 903, 917, 942, 945, 947, 949, 952, 953, 954, 955, 956, 957, 958, 959, 960, 963, 967, 968, 969, 974, 978, 985, 986, 987, 988, 989, 994, 996, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "memori": [8, 51, 67, 68, 91, 153, 154, 260, 284, 287, 289, 291, 292, 319, 320, 321, 333, 334, 339, 345, 348, 354, 357, 359, 374, 377, 378, 381, 384, 385, 405, 406, 407, 408, 409, 410, 411, 413, 414, 418, 421, 423, 432, 437, 443, 460, 467, 472, 497, 498, 499, 502, 519, 520, 521, 522, 527, 528, 529, 530, 545, 546, 552, 553, 555, 610, 611, 612, 616, 617, 622, 623, 624, 625, 626, 627, 630, 631, 632, 633, 640, 641, 642, 643, 644, 645, 648, 741, 742, 743, 744, 762, 768, 776, 784, 786, 787, 788, 789, 792, 793, 794, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 813, 815, 816, 817, 825, 826, 843, 845, 855, 856, 858, 863, 865, 866, 873, 874, 875, 876, 886, 922, 938, 949, 955, 956, 963, 965, 966, 968, 969, 973, 977, 978, 987, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "partial_fit": [8, 47, 87, 215, 291, 334, 347, 359, 373, 378, 406, 413, 498, 500, 501, 502, 553, 561, 622, 623, 630, 631, 632, 640, 641, 642, 793, 794, 797, 798, 800, 801, 802, 803, 804, 821, 822, 823, 834, 835, 845, 865, 949, 955, 957, 993, 995, 996, 997, 998, 999, 1000, 1001, 1004, 1006, 1007, 1008, 1009, 1010], "fed": [8, 121, 328, 340, 381, 942, 958, 963, 1004], "batch": [8, 11, 61, 87, 91, 271, 291, 334, 354, 359, 381, 404, 406, 411, 413, 415, 417, 495, 497, 498, 500, 501, 502, 503, 504, 506, 507, 509, 510, 628, 649, 650, 767, 780, 781, 800, 801, 802, 803, 804, 822, 823, 834, 835, 845, 858, 905, 919, 957, 958, 967, 993, 997, 998, 1001, 1002, 1003, 1004, 1006, 1008, 1009], "remain": [8, 24, 26, 67, 101, 108, 113, 115, 134, 153, 181, 185, 197, 224, 236, 240, 244, 247, 370, 373, 374, 375, 377, 381, 410, 428, 431, 479, 480, 485, 492, 498, 534, 574, 575, 726, 732, 764, 765, 766, 767, 770, 772, 800, 801, 802, 804, 906, 942, 943, 945, 952, 953, 957, 963, 969, 973, 995, 1001, 1007, 1010], "hashingvector": [8, 321, 334, 381, 453, 552, 554, 994, 1000, 1001, 1002, 1003, 1006], "where": [8, 11, 12, 14, 16, 17, 19, 20, 23, 24, 25, 30, 50, 52, 54, 75, 80, 85, 87, 90, 96, 97, 101, 103, 105, 107, 111, 112, 114, 118, 132, 135, 137, 143, 146, 149, 153, 160, 165, 173, 182, 185, 190, 191, 192, 194, 198, 199, 201, 203, 204, 208, 209, 212, 215, 216, 218, 220, 230, 234, 235, 238, 240, 244, 245, 247, 249, 250, 255, 257, 276, 278, 280, 281, 282, 283, 284, 285, 287, 289, 290, 297, 298, 305, 311, 315, 316, 317, 319, 323, 324, 328, 332, 333, 334, 339, 341, 342, 344, 345, 347, 349, 351, 352, 353, 357, 358, 359, 360, 363, 367, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 396, 401, 408, 411, 412, 416, 425, 427, 428, 429, 431, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 451, 460, 495, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 509, 510, 511, 513, 514, 515, 516, 517, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 546, 547, 548, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 570, 573, 574, 575, 577, 579, 583, 586, 587, 589, 591, 592, 593, 594, 596, 597, 598, 599, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 648, 652, 655, 656, 657, 660, 671, 676, 680, 688, 692, 693, 694, 702, 718, 726, 731, 732, 733, 736, 744, 745, 746, 747, 750, 751, 755, 757, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 776, 777, 778, 779, 780, 781, 782, 783, 784, 786, 788, 789, 790, 792, 793, 794, 797, 798, 799, 800, 801, 802, 803, 804, 808, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 828, 835, 838, 840, 841, 844, 845, 851, 853, 859, 860, 861, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 893, 894, 895, 896, 902, 910, 913, 938, 942, 944, 945, 946, 947, 948, 949, 950, 951, 953, 954, 955, 956, 957, 958, 959, 960, 963, 964, 965, 967, 968, 969, 973, 978, 979, 993, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "word": [8, 15, 19, 66, 137, 212, 216, 307, 320, 321, 332, 340, 341, 345, 347, 350, 359, 370, 373, 375, 376, 377, 378, 417, 475, 487, 498, 500, 505, 552, 553, 555, 660, 794, 804, 862, 947, 951, 955, 958, 963, 966, 967, 977, 985, 986, 993, 1001], "federicov": 8, "itertool": [8, 39, 41, 59, 122, 154, 166, 225, 230, 238, 245, 247, 380], "sy": [8, 12, 16, 19, 189, 212, 258, 300, 321, 340, 357, 581], "tarfil": 8, "hashlib": 8, "sha256": [8, 1008], "parser": [8, 13, 287, 291, 460, 1008, 1009], "htmlparser": 8, "pathlib": [8, 1008, 1009], "path": [8, 16, 17, 150, 159, 166, 167, 170, 175, 185, 197, 251, 315, 323, 339, 343, 345, 349, 353, 354, 359, 405, 409, 414, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 472, 473, 512, 521, 522, 527, 528, 529, 530, 557, 558, 561, 610, 611, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 645, 646, 647, 648, 649, 650, 652, 825, 826, 872, 873, 874, 875, 876, 907, 942, 949, 950, 959, 973, 974, 993, 994, 997, 999, 1000, 1002, 1003, 1005, 1006, 1008, 1009], "urllib": [8, 17], "request": [8, 17, 43, 181, 199, 215, 290, 333, 339, 343, 344, 348, 359, 360, 364, 367, 378, 381, 382, 401, 407, 408, 411, 413, 429, 433, 434, 435, 436, 437, 438, 439, 440, 446, 447, 448, 497, 498, 502, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 545, 546, 552, 554, 555, 558, 563, 564, 574, 575, 596, 599, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 654, 663, 763, 764, 769, 771, 780, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 810, 812, 815, 816, 822, 823, 825, 828, 830, 831, 832, 837, 844, 845, 860, 861, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 909, 910, 912, 953, 956, 987, 999, 1000, 1001, 1010], "urlretriev": 8, "rcparam": [8, 208, 213, 285], "get_data_hom": 8, "feature_extract": [8, 15, 19, 43, 44, 47, 48, 51, 63, 66, 90, 150, 239, 300, 318, 319, 320, 321, 334, 340, 373, 374, 381, 428, 508, 838, 951, 986, 987, 993, 994, 995, 996, 999, 1000], "passiveaggressiveclassifi": [8, 188, 332, 334, 949, 954, 994, 997, 998, 1000, 1001, 1004, 1006], "perceptron": [8, 29, 119, 128, 139, 150, 188, 191, 197, 219, 272, 280, 281, 301, 312, 317, 334, 357, 381, 478, 479, 486, 630, 640, 791, 821, 822, 823, 826, 845, 951, 954, 958, 967, 974, 975, 989, 997, 999, 1000, 1001, 1005], "naive_bay": [8, 23, 24, 26, 29, 119, 123, 239, 240, 319, 328, 334, 340, 380, 401, 533, 826, 947, 954, 955, 987, 994, 995, 997, 998, 999, 1000], "multinomialnb": [8, 334, 340, 381, 800, 801, 802, 803, 955, 987, 995, 997, 1000, 1001, 1005, 1006, 1008], "_not_in_sphinx": [8, 10], "hack": [8, 10], "whether": [8, 10, 13, 16, 67, 99, 117, 140, 143, 145, 153, 154, 181, 185, 199, 202, 209, 215, 236, 278, 327, 328, 333, 340, 343, 344, 345, 347, 349, 350, 351, 359, 364, 373, 374, 375, 377, 378, 380, 382, 385, 404, 406, 415, 417, 418, 423, 428, 429, 433, 434, 435, 436, 437, 438, 439, 440, 442, 446, 447, 448, 449, 451, 452, 455, 456, 460, 461, 467, 472, 473, 478, 486, 491, 495, 496, 501, 502, 503, 504, 506, 509, 510, 512, 516, 519, 520, 521, 522, 525, 526, 527, 528, 529, 530, 545, 552, 553, 554, 555, 561, 566, 570, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 593, 595, 596, 597, 599, 600, 601, 602, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 654, 658, 659, 661, 662, 664, 666, 668, 676, 705, 724, 730, 737, 741, 745, 752, 762, 765, 766, 767, 768, 776, 780, 781, 784, 785, 788, 789, 791, 794, 796, 799, 800, 801, 802, 804, 807, 808, 809, 811, 813, 815, 816, 817, 818, 819, 822, 823, 829, 846, 852, 865, 866, 867, 868, 869, 870, 871, 877, 879, 883, 885, 886, 887, 889, 901, 902, 909, 910, 926, 937, 941, 942, 943, 948, 949, 953, 958, 959, 965, 967, 968, 977, 1000, 1001, 1002, 1010], "builder": [8, 10, 315, 349], "__file__": [8, 10, 1006], "global": [8, 10, 39, 54, 87, 181, 201, 202, 222, 247, 275, 288, 328, 332, 333, 351, 357, 359, 372, 373, 383, 406, 416, 426, 432, 554, 590, 596, 652, 655, 656, 659, 671, 692, 693, 701, 746, 747, 750, 751, 780, 846, 861, 863, 921, 923, 942, 950, 953, 959, 963, 969, 977, 1001, 1008], "21578": [8, 1006], "uci": [8, 135, 283, 339, 342, 464, 466, 468, 474], "ml": [8, 135, 255, 339, 342, 350, 464, 466, 474, 949, 951, 972, 973, 977], "uncompress": [8, 472, 473, 987], "reuterspars": 8, "util": [8, 10, 11, 45, 52, 53, 58, 82, 99, 101, 121, 181, 183, 189, 197, 203, 211, 215, 217, 227, 244, 246, 258, 280, 287, 299, 307, 311, 319, 333, 339, 340, 343, 345, 346, 347, 348, 357, 358, 359, 369, 373, 374, 377, 378, 381, 401, 407, 408, 411, 413, 417, 429, 432, 433, 434, 435, 436, 437, 438, 439, 440, 446, 447, 448, 497, 498, 502, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 541, 545, 546, 552, 554, 555, 558, 574, 575, 599, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 654, 762, 763, 764, 769, 771, 780, 785, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 810, 812, 815, 816, 822, 823, 825, 828, 830, 831, 832, 837, 844, 845, 860, 861, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 942, 948, 951, 953, 954, 963, 964, 972, 977, 979, 989, 993, 994, 996, 997, 999, 1000], "pars": [8, 17, 332, 339, 340, 346, 472], "sgml": [8, 332], "file": [8, 12, 16, 30, 45, 319, 320, 332, 333, 334, 339, 340, 342, 343, 345, 349, 350, 351, 353, 357, 367, 374, 378, 451, 457, 458, 460, 467, 472, 473, 498, 543, 544, 552, 553, 555, 877, 956, 969, 974, 976, 979, 993, 994, 996, 999, 1000, 1001, 1002, 1005, 1006, 1007, 1008, 1009], "yield": [8, 9, 24, 42, 52, 73, 74, 75, 76, 114, 165, 176, 181, 196, 199, 243, 257, 273, 278, 304, 309, 319, 320, 328, 332, 334, 339, 350, 359, 370, 373, 375, 377, 378, 380, 381, 382, 401, 413, 432, 436, 472, 473, 501, 502, 503, 505, 510, 517, 518, 523, 524, 525, 526, 531, 532, 558, 566, 611, 615, 616, 617, 619, 625, 627, 629, 637, 639, 650, 689, 744, 751, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 788, 789, 790, 792, 796, 799, 857, 858, 896, 903, 905, 906, 911, 945, 947, 949, 950, 953, 968, 969, 982, 998, 999, 1001, 1004, 1006], "__init__": [8, 16, 53, 99, 145, 215, 258, 307, 345, 347, 349, 350, 351, 352, 359, 381, 387, 390, 393, 396, 397, 582, 914, 994, 999, 1001, 1006, 1007, 1008, 1009], "self": [8, 16, 19, 24, 26, 53, 62, 99, 145, 150, 215, 258, 295, 301, 307, 319, 339, 345, 346, 347, 350, 351, 352, 353, 373, 381, 383, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 428, 429, 433, 434, 435, 436, 437, 438, 439, 440, 446, 447, 448, 449, 464, 472, 473, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 545, 546, 547, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 599, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 652, 653, 654, 655, 656, 667, 760, 761, 762, 763, 764, 765, 766, 769, 771, 776, 780, 781, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 821, 822, 823, 824, 825, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 857, 858, 860, 861, 862, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 910, 911, 913, 914, 919, 927, 956, 973, 974, 975, 977, 989, 995, 1000, 1007], "latin": [8, 381], "_reset": 8, "handle_starttag": 8, "tag": [8, 46, 67, 208, 298, 339, 344, 348, 349, 353, 357, 359, 369, 381, 390, 396, 460, 793, 973, 976, 998, 1002, 1003, 1004, 1007, 1008, 1009, 1010], "attr": [8, 53], "start_": 8, "handle_endtag": 8, "end_": 8, "in_titl": 8, "in_bodi": 8, "in_top": 8, "in_topic_d": 8, "bodi": [8, 66, 135, 219, 292, 342], "topic_d": 8, "fd": 8, "chunk": [8, 47, 332, 333, 373, 378, 384, 408, 413, 432, 502, 741, 744, 793, 794, 800, 801, 802, 803, 804, 863, 955, 1000, 1001, 1002, 1003, 1004], "feed": [8, 80, 182, 321, 340, 350, 357, 373, 381, 705, 838, 954], "decod": [8, 271, 340, 359, 467, 533, 552, 553, 555, 993, 994], "close": [8, 12, 17, 23, 24, 26, 35, 36, 43, 51, 57, 63, 73, 74, 77, 92, 104, 111, 114, 117, 121, 137, 138, 141, 142, 143, 144, 145, 153, 155, 165, 185, 187, 202, 208, 214, 218, 224, 230, 238, 239, 264, 265, 278, 287, 307, 311, 312, 320, 328, 340, 345, 347, 353, 357, 359, 360, 371, 372, 373, 376, 377, 380, 383, 414, 419, 436, 472, 473, 496, 527, 592, 607, 611, 625, 636, 638, 651, 669, 709, 760, 780, 781, 800, 801, 802, 804, 811, 886, 942, 946, 947, 949, 950, 952, 953, 954, 956, 959, 960, 963, 968, 972, 977, 985, 996, 1000, 1001, 1002], "handle_data": 8, "start_reut": 8, "attribut": [8, 24, 30, 46, 67, 95, 99, 101, 108, 109, 112, 131, 135, 181, 189, 215, 229, 236, 237, 242, 250, 267, 271, 290, 311, 321, 327, 334, 338, 339, 340, 342, 345, 348, 352, 357, 369, 370, 371, 373, 374, 375, 376, 378, 380, 381, 382, 383, 388, 389, 390, 391, 392, 395, 396, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 428, 429, 433, 434, 435, 436, 437, 438, 439, 440, 446, 447, 448, 449, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 471, 474, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 652, 653, 654, 655, 656, 661, 662, 664, 665, 666, 699, 758, 760, 761, 762, 765, 766, 768, 776, 784, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 857, 858, 860, 861, 862, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 879, 880, 914, 937, 945, 947, 949, 954, 956, 957, 959, 963, 966, 967, 968, 969, 977, 978, 984, 987, 990, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "end_reut": 8, "sub": [8, 34, 45, 50, 52, 54, 57, 66, 96, 215, 217, 224, 289, 296, 297, 304, 307, 316, 340, 345, 347, 351, 359, 374, 380, 381, 401, 407, 408, 411, 413, 429, 433, 434, 435, 436, 437, 438, 439, 440, 446, 447, 448, 497, 498, 500, 502, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 545, 546, 552, 554, 555, 558, 561, 574, 575, 591, 599, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 654, 763, 764, 769, 771, 780, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 810, 812, 815, 816, 822, 823, 825, 828, 830, 831, 832, 837, 844, 845, 860, 861, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 911, 949, 953, 967, 987, 1003, 1007, 1009, 1010, 1011], "start_titl": 8, "end_titl": 8, "start_bodi": 8, "end_bodi": 8, "start_top": 8, "end_top": 8, "start_d": 8, "end_d": 8, "stream_reuters_docu": 8, "data_path": 8, "iter": [8, 15, 17, 29, 43, 68, 77, 87, 90, 101, 104, 107, 110, 112, 113, 115, 116, 135, 146, 148, 150, 160, 161, 189, 196, 226, 227, 231, 233, 246, 249, 273, 275, 276, 280, 289, 297, 299, 300, 307, 345, 347, 351, 353, 354, 358, 359, 368, 373, 376, 378, 380, 382, 385, 401, 404, 405, 407, 409, 411, 412, 413, 416, 418, 423, 425, 426, 427, 435, 436, 442, 446, 447, 448, 479, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 517, 518, 523, 524, 525, 526, 528, 531, 532, 545, 546, 552, 553, 555, 557, 558, 566, 574, 591, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 656, 657, 658, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 796, 799, 814, 821, 822, 823, 824, 825, 829, 836, 838, 840, 860, 861, 862, 865, 866, 867, 868, 869, 870, 871, 880, 901, 902, 908, 909, 910, 911, 919, 943, 949, 950, 952, 953, 956, 957, 958, 966, 967, 968, 969, 973, 974, 977, 982, 986, 987, 989, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010], "archiv": [8, 255, 339, 340, 342, 343, 367, 373, 406, 464, 466, 474, 721, 722, 951, 968, 987], "exist": [8, 9, 13, 17, 19, 50, 199, 238, 275, 278, 311, 339, 344, 347, 348, 351, 357, 359, 360, 363, 367, 373, 377, 378, 380, 381, 388, 398, 401, 407, 408, 411, 413, 415, 417, 429, 432, 433, 434, 435, 436, 437, 438, 439, 440, 446, 447, 448, 463, 497, 498, 502, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 545, 546, 549, 552, 553, 554, 555, 558, 561, 567, 574, 575, 596, 597, 599, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 654, 662, 664, 666, 725, 728, 732, 763, 764, 767, 769, 770, 771, 772, 775, 777, 778, 779, 780, 781, 782, 783, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 810, 812, 815, 816, 822, 823, 825, 828, 830, 831, 832, 837, 838, 839, 844, 845, 860, 861, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 937, 945, 950, 952, 953, 957, 959, 960, 963, 977, 986, 993, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "str": [8, 10, 16, 55, 57, 95, 97, 110, 199, 218, 238, 250, 258, 268, 305, 319, 339, 340, 354, 381, 384, 385, 389, 394, 401, 402, 403, 405, 406, 407, 408, 409, 410, 411, 413, 414, 416, 421, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 491, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 540, 545, 546, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 574, 575, 581, 591, 592, 593, 594, 595, 596, 597, 598, 599, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 652, 653, 654, 656, 660, 661, 662, 663, 664, 666, 671, 673, 675, 677, 690, 692, 693, 695, 696, 701, 705, 734, 737, 741, 742, 743, 744, 745, 746, 747, 750, 752, 755, 756, 762, 763, 764, 765, 766, 768, 769, 771, 773, 774, 776, 780, 784, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 857, 858, 860, 861, 863, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 878, 879, 881, 884, 885, 886, 889, 892, 894, 898, 909, 910, 911, 913, 916, 937, 938, 941, 1008], "kei": [8, 10, 13, 17, 19, 39, 107, 111, 121, 148, 152, 199, 215, 218, 221, 239, 241, 242, 288, 289, 290, 291, 292, 293, 294, 334, 338, 347, 350, 351, 352, 357, 359, 360, 363, 364, 373, 374, 377, 383, 428, 436, 525, 526, 531, 532, 533, 534, 552, 555, 558, 581, 590, 596, 597, 598, 623, 762, 765, 766, 774, 776, 788, 824, 825, 880, 890, 918, 961, 973, 987, 990, 999, 1005, 1006, 1008, 1009], "download_url": 8, "ic": [8, 255, 289, 339, 342, 362, 464, 466, 474, 596, 597, 989, 1005, 1006], "databas": [8, 135, 283, 332, 334, 340, 342, 373, 378, 380, 381, 384, 406, 408, 474, 519, 520, 858, 965], "reuters21578": 8, "mld": 8, "tar": [8, 349], "gz": [8, 349, 363, 472, 473], "archive_sha256": 8, "3bae43c9b14e387f76a61b6d82bf98a4fb5d3ef99ef7e7075ff2ccbcf59f9d30": 8, "archive_filenam": 8, "mkdir": [8, 351, 353], "parent": [8, 152, 215, 345, 349, 359, 373, 406, 427, 910, 911, 993, 1010], "exist_ok": 8, "blocknum": 8, "total_sz_mb": 8, "mb": [8, 212, 319, 321, 340, 351, 460, 867, 868, 869, 870, 871, 968, 974], "1e6": [8, 10, 174, 212, 319, 321, 332, 500, 859, 953, 965], "current_sz_mb": 8, "stdout": [8, 87, 189, 794, 814, 822, 823], "write": [8, 17, 149, 215, 319, 332, 333, 339, 343, 344, 348, 349, 350, 351, 353, 354, 357, 359, 369, 374, 378, 381, 964, 973, 987, 994, 1006, 1010], "rdownload": 8, "archive_path": 8, "filenam": [8, 17, 300, 340, 351, 367, 452, 464, 467, 468, 471, 552, 553, 555, 987, 993, 998, 1001, 1002], "reporthook": 8, "tamper": 8, "assert": [8, 17, 45, 88, 212, 238, 247, 333, 348, 973], "read_byt": 8, "hexdigest": 8, "untar": 8, "open": [8, 12, 17, 203, 339, 340, 343, 344, 345, 349, 351, 357, 358, 360, 367, 374, 381, 451, 460, 472, 473, 943, 972, 977, 981, 996, 1000, 1001, 1003, 1009], "extractal": 8, "glob": 8, "sgm": 8, "rb": 8, "decode_error": [8, 381, 467, 552, 553, 555, 995], "alternate_sign": [8, 381, 546, 553, 1000], "data_stream": 8, "binari": [8, 14, 24, 26, 105, 107, 117, 119, 132, 145, 153, 158, 172, 174, 181, 189, 202, 209, 218, 221, 235, 236, 241, 247, 253, 255, 262, 307, 311, 313, 327, 328, 339, 340, 341, 347, 349, 350, 359, 363, 367, 370, 371, 372, 373, 380, 381, 383, 401, 402, 403, 416, 451, 464, 472, 473, 484, 487, 513, 514, 517, 519, 523, 525, 530, 531, 532, 545, 552, 553, 555, 557, 558, 566, 574, 591, 592, 593, 594, 595, 596, 597, 622, 623, 630, 632, 637, 638, 639, 640, 664, 667, 671, 672, 673, 676, 677, 679, 682, 684, 690, 692, 693, 697, 698, 701, 702, 703, 704, 705, 706, 745, 746, 747, 750, 751, 752, 757, 759, 762, 763, 765, 766, 767, 768, 776, 780, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 800, 811, 821, 832, 836, 838, 846, 849, 865, 867, 870, 916, 943, 954, 955, 956, 957, 958, 960, 961, 963, 964, 965, 967, 968, 969, 978, 990, 994, 996, 997, 998, 1000, 1001, 1002, 1003, 1007, 1008, 1010], "acq": 8, "chosen": [8, 20, 43, 69, 121, 138, 153, 154, 170, 182, 198, 216, 232, 233, 235, 241, 320, 328, 332, 357, 373, 375, 376, 380, 383, 404, 410, 413, 415, 417, 418, 424, 460, 487, 499, 521, 522, 523, 524, 525, 526, 528, 529, 611, 617, 620, 622, 623, 625, 627, 635, 640, 641, 642, 643, 644, 654, 658, 757, 760, 761, 762, 765, 766, 776, 795, 814, 865, 866, 873, 874, 875, 876, 902, 942, 945, 947, 949, 950, 952, 954, 959, 960, 967, 982, 983, 985, 986, 1001, 1009, 1010], "evenli": [8, 36, 49, 114, 156, 185, 233, 381, 906, 987], "care": [8, 52, 115, 255, 311, 332, 334, 349, 351, 357, 359, 360, 373, 375, 381, 401, 424, 433, 604, 622, 623, 630, 631, 632, 640, 641, 642, 659, 865, 950, 968, 977, 1009], "all_class": 8, "positive_class": [8, 676], "partial_fit_classifi": 8, "nb": [8, 94, 119, 328, 802, 955], "multinomi": [8, 28, 150, 159, 172, 190, 196, 216, 233, 247, 275, 340, 341, 345, 378, 380, 460, 476, 487, 515, 517, 523, 525, 533, 595, 622, 623, 704, 791, 799, 800, 801, 802, 803, 804, 845, 888, 953, 954, 969, 974, 975, 987, 989, 993, 997, 999, 1000, 1001, 1006, 1007], "passiv": [8, 188, 630, 631, 975, 989, 994], "aggress": [8, 188, 630, 631, 765, 766, 975, 989, 994], "get_minibatch": 8, "doc_it": 8, "pos_class": 8, "minibatch": [8, 41, 373, 378, 413, 498, 640, 821, 822, 823, 972, 993], "tupl": [8, 13, 45, 46, 52, 96, 154, 199, 338, 339, 340, 347, 359, 377, 385, 398, 415, 417, 428, 431, 446, 447, 448, 449, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 464, 465, 466, 468, 469, 472, 474, 475, 476, 477, 478, 486, 497, 525, 526, 531, 532, 533, 534, 546, 547, 548, 551, 552, 553, 555, 591, 596, 597, 598, 676, 683, 705, 744, 746, 760, 762, 776, 788, 805, 806, 824, 825, 835, 836, 840, 843, 851, 855, 867, 868, 869, 870, 871, 880, 886, 887, 889, 893, 894, 895, 896, 911, 920, 937, 960, 999, 1000, 1004, 1005, 1006], "x_text": 8, "befor": [8, 12, 24, 39, 66, 68, 71, 80, 112, 121, 131, 144, 146, 147, 148, 150, 153, 154, 156, 162, 165, 169, 170, 174, 215, 238, 245, 260, 261, 279, 282, 283, 285, 290, 310, 328, 332, 333, 340, 343, 345, 347, 348, 350, 351, 353, 354, 357, 359, 360, 362, 363, 367, 369, 371, 373, 374, 375, 377, 378, 382, 385, 386, 407, 411, 412, 413, 423, 425, 429, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 446, 447, 448, 449, 454, 465, 498, 501, 502, 503, 504, 505, 508, 510, 511, 525, 526, 529, 531, 533, 534, 541, 552, 553, 555, 575, 591, 592, 594, 609, 630, 631, 632, 635, 640, 642, 651, 656, 658, 760, 761, 767, 768, 780, 781, 783, 787, 789, 791, 805, 806, 813, 814, 815, 816, 817, 820, 825, 826, 829, 832, 839, 843, 844, 845, 846, 850, 851, 853, 854, 855, 856, 862, 873, 874, 902, 937, 943, 949, 950, 953, 959, 963, 967, 968, 969, 973, 974, 987, 993, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "exclud": [8, 13, 19, 152, 278, 345, 349, 359, 410, 428, 430, 692, 693, 701, 746, 747, 750, 775, 783, 840, 928, 953, 956, 1002, 1009], "invalid": [8, 181, 359, 410, 542, 635, 676, 737, 949, 953, 999, 1001, 1003, 1004, 1006, 1007, 1009], "assign": [8, 17, 20, 32, 34, 43, 46, 54, 55, 57, 101, 106, 117, 119, 131, 139, 194, 199, 208, 213, 216, 273, 280, 285, 301, 315, 320, 340, 345, 347, 359, 370, 377, 378, 380, 381, 382, 383, 404, 405, 406, 407, 409, 410, 411, 412, 413, 416, 418, 420, 423, 424, 425, 426, 479, 500, 525, 526, 557, 558, 571, 572, 574, 622, 623, 630, 631, 632, 640, 641, 642, 668, 669, 679, 680, 681, 684, 692, 693, 694, 701, 702, 706, 718, 720, 746, 747, 749, 750, 756, 757, 758, 762, 765, 766, 768, 771, 776, 784, 786, 787, 788, 789, 792, 809, 815, 817, 818, 819, 832, 860, 861, 865, 866, 867, 868, 869, 870, 871, 947, 949, 952, 953, 954, 955, 956, 957, 958, 963, 966, 977, 978, 987, 993, 998, 1000, 1001, 1010], "format": [8, 11, 12, 13, 19, 21, 45, 51, 55, 58, 66, 75, 87, 96, 104, 110, 113, 115, 126, 130, 131, 158, 161, 167, 172, 181, 199, 233, 243, 245, 246, 249, 252, 262, 263, 266, 267, 282, 287, 314, 323, 327, 332, 338, 344, 345, 347, 348, 353, 354, 358, 359, 374, 377, 380, 381, 397, 406, 407, 409, 411, 413, 414, 416, 423, 428, 432, 446, 447, 448, 449, 451, 453, 460, 461, 462, 472, 473, 474, 487, 491, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 513, 515, 521, 522, 528, 529, 530, 531, 532, 533, 534, 545, 546, 547, 548, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 591, 592, 593, 594, 599, 602, 603, 604, 605, 606, 610, 616, 622, 623, 624, 626, 630, 631, 632, 640, 641, 642, 652, 653, 656, 661, 677, 684, 702, 703, 714, 731, 754, 755, 794, 807, 808, 809, 811, 813, 814, 815, 816, 817, 818, 819, 820, 821, 824, 825, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 849, 852, 857, 858, 863, 865, 877, 885, 886, 907, 915, 919, 924, 927, 929, 930, 931, 932, 933, 934, 939, 943, 953, 956, 961, 963, 964, 967, 969, 972, 978, 979, 989, 993, 994, 995, 996, 998, 999, 1000, 1001, 1002, 1004, 1006, 1008, 1010], "islic": [8, 41, 59], "asarrai": [8, 17, 181, 199, 276, 298, 319, 320, 347, 359, 369, 549, 550, 689, 719, 813, 815, 816, 817, 963, 968, 1010], "int": [8, 10, 13, 14, 16, 17, 19, 34, 41, 59, 76, 104, 113, 117, 127, 128, 138, 139, 140, 146, 149, 152, 162, 172, 174, 181, 199, 206, 208, 214, 218, 224, 233, 236, 237, 238, 258, 263, 265, 271, 285, 297, 321, 340, 345, 347, 357, 359, 371, 374, 377, 381, 384, 385, 388, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 444, 446, 447, 448, 449, 452, 455, 456, 458, 459, 460, 461, 466, 467, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 545, 546, 547, 548, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 571, 572, 574, 575, 581, 591, 592, 593, 594, 595, 596, 597, 598, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 664, 665, 666, 667, 668, 669, 671, 673, 677, 689, 690, 692, 693, 694, 697, 701, 719, 720, 732, 737, 741, 742, 743, 744, 745, 746, 747, 750, 752, 756, 757, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 878, 879, 881, 885, 886, 888, 889, 901, 902, 904, 905, 906, 907, 918, 922, 924, 927, 932, 933, 949, 960, 993, 999, 1003, 1004], "iter_minibatch": 8, "minibatch_s": [8, 334], "statist": [8, 13, 76, 101, 104, 105, 116, 126, 127, 128, 130, 134, 135, 150, 152, 153, 154, 155, 165, 169, 185, 231, 235, 237, 240, 247, 255, 257, 278, 284, 289, 328, 338, 340, 342, 345, 351, 359, 371, 373, 374, 375, 377, 378, 380, 382, 398, 433, 438, 457, 458, 480, 481, 482, 484, 486, 505, 517, 523, 524, 526, 568, 569, 570, 573, 591, 594, 598, 599, 608, 613, 620, 654, 658, 660, 674, 680, 685, 686, 687, 694, 706, 751, 762, 778, 795, 822, 823, 841, 842, 843, 845, 850, 853, 854, 856, 870, 873, 874, 928, 942, 943, 947, 949, 950, 952, 953, 954, 955, 960, 961, 963, 967, 968, 969, 970, 971, 974, 979, 985, 986, 998, 1001, 1004, 1005, 1007, 1008], "test_stat": 8, "n_test": [8, 10, 31, 104, 238, 993, 996], "n_test_po": 8, "hold": [8, 13, 16, 25, 26, 181, 185, 239, 327, 338, 345, 346, 347, 359, 371, 373, 377, 380, 381, 383, 467, 521, 525, 528, 553, 596, 597, 598, 699, 762, 765, 766, 776, 801, 832, 833, 838, 839, 846, 849, 873, 875, 943, 947, 953, 957, 967, 968, 969, 978, 987, 1001, 1005], "n_test_docu": 8, "tick": [8, 40, 57, 140, 219, 249, 596, 789], "x_test_text": 8, "parsing_tim": 8, "vectorizing_tim": 8, "sum": [8, 17, 19, 25, 58, 76, 85, 90, 96, 113, 114, 131, 135, 145, 153, 162, 168, 177, 181, 185, 196, 199, 202, 204, 218, 247, 258, 265, 268, 291, 300, 311, 312, 315, 319, 320, 321, 327, 342, 351, 359, 370, 371, 372, 373, 375, 376, 378, 379, 380, 381, 383, 396, 406, 407, 411, 413, 423, 428, 429, 446, 447, 448, 479, 484, 487, 495, 498, 500, 501, 505, 508, 509, 510, 513, 514, 516, 518, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 532, 533, 534, 554, 555, 575, 577, 587, 589, 599, 605, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 636, 637, 640, 641, 642, 643, 645, 648, 654, 658, 660, 663, 673, 674, 683, 689, 704, 719, 721, 722, 726, 751, 793, 794, 798, 799, 808, 812, 816, 823, 824, 844, 845, 865, 866, 868, 871, 873, 874, 875, 876, 904, 928, 934, 939, 949, 953, 954, 955, 956, 968, 969, 985, 996, 997, 999, 1001, 1002, 1004, 1009, 1010], "cls_name": [8, 10], "string": [8, 67, 110, 145, 199, 210, 242, 290, 321, 332, 339, 340, 345, 346, 347, 351, 359, 367, 374, 377, 380, 381, 382, 384, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 421, 428, 429, 431, 433, 434, 435, 436, 437, 438, 439, 440, 446, 447, 448, 449, 451, 453, 454, 460, 469, 491, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 545, 546, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 574, 575, 581, 584, 591, 592, 593, 594, 595, 596, 597, 598, 599, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 652, 653, 654, 655, 656, 663, 673, 675, 683, 695, 725, 728, 734, 737, 741, 742, 743, 744, 755, 756, 760, 761, 762, 765, 766, 768, 776, 784, 788, 793, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 857, 858, 860, 861, 862, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 883, 885, 886, 893, 894, 895, 911, 917, 921, 937, 938, 942, 943, 953, 966, 968, 978, 985, 993, 994, 995, 996, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "n_train": [8, 10, 31, 104, 238, 993, 996], "6d": 8, "n_train_po": 8, "5d": 8, "cls_stat": 8, "accuracy_histori": 8, "runtime_histori": 8, "total_fit_tim": 8, "discard": [8, 52, 162, 241, 332, 370, 375, 382, 472, 473, 513, 561, 591, 594, 608, 838, 842, 854, 943, 949, 1001, 1005], "mini": [8, 61, 87, 291, 334, 359, 381, 404, 406, 411, 413, 415, 417, 495, 497, 500, 501, 502, 503, 504, 506, 507, 509, 510, 957, 958, 993, 1004, 1006], "smaller": [8, 23, 37, 43, 52, 77, 101, 135, 142, 143, 146, 148, 166, 170, 172, 185, 212, 255, 264, 265, 273, 278, 307, 315, 320, 345, 370, 372, 373, 375, 377, 378, 380, 382, 403, 404, 410, 414, 418, 420, 478, 498, 499, 521, 522, 523, 524, 525, 526, 528, 529, 557, 574, 583, 597, 610, 611, 613, 614, 616, 617, 618, 620, 622, 623, 624, 625, 626, 627, 636, 638, 646, 647, 656, 673, 760, 765, 766, 811, 814, 838, 839, 857, 858, 865, 873, 874, 875, 876, 902, 947, 949, 950, 952, 953, 954, 956, 957, 959, 963, 965, 967, 968, 969, 973, 987, 1001, 1006, 1010], "bigger": [8, 37, 57, 194, 238, 276, 311, 317, 320, 331, 333, 381, 402, 403, 472, 502, 811, 982, 989], "overhead": [8, 258, 333, 334, 345, 351, 354, 357, 359, 380, 405, 409, 413, 498, 663, 797, 798, 800, 801, 802, 803, 804, 805, 806, 921, 955, 956, 996, 1001, 1002, 1005], "stream": [8, 373, 378, 381, 426, 553, 834, 835, 845, 945, 972, 1001, 1004], "minibatch_iter": 8, "total_vect_tim": 8, "x_train_text": 8, "item": [8, 9, 10, 11, 12, 13, 17, 19, 28, 40, 52, 71, 105, 107, 111, 114, 121, 153, 179, 183, 189, 202, 214, 215, 217, 226, 235, 241, 291, 297, 320, 338, 345, 346, 347, 354, 374, 428, 490, 525, 526, 552, 553, 555, 596, 774, 838, 860, 861, 880, 881, 907, 945, 966, 973, 978], "updat": [8, 16, 41, 59, 101, 107, 116, 213, 287, 321, 343, 344, 345, 349, 353, 359, 373, 378, 380, 387, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 427, 429, 433, 434, 435, 436, 437, 438, 439, 440, 442, 446, 447, 448, 449, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 545, 546, 547, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 574, 575, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 599, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 652, 653, 654, 655, 656, 760, 761, 762, 763, 764, 765, 766, 769, 771, 776, 780, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 821, 822, 823, 825, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 857, 858, 860, 861, 862, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 880, 928, 949, 956, 957, 958, 967, 976, 977, 994, 1000, 1001, 1002, 1004, 1006, 1008, 1009, 1011], "accumul": [8, 47, 108, 109, 170, 349, 351, 373, 381, 953, 994, 1001], "acc_histori": 8, "run_histori": 8, "878": 8, "962": [8, 124, 154, 974], "915": 8, "61": [8, 13, 76, 154, 199, 319, 339, 342, 351, 374, 422, 505, 524, 677, 903], "1583": 8, "855": 8, "1575": 8, "877": [8, 236], "62": [8, 13, 154, 158, 199, 232, 292, 297, 328, 340, 457, 458, 805, 806, 996], "1556": 8, "933": [8, 70, 377], "1549": 8, "3911": 8, "517": [8, 416, 426, 985], "938": [8, 113, 177, 748, 953, 974, 982], "2248": 8, "936": [8, 401, 953], "2245": 8, "885": [8, 135, 342], "2236": 8, "941": 8, "2232": 8, "6821": 8, "891": [8, 106, 974], "952": [8, 46], "2393": 8, "2391": 8, "900": [8, 47, 70, 71], "86": [8, 13, 30, 66, 132, 172, 233, 280, 296, 297, 751, 873, 953, 983], "2385": 8, "953": [8, 46], "2382": 8, "9759": 8, "1276": 8, "949": 8, "97": [8, 13, 30, 96, 135, 156, 216, 230, 297, 307, 342, 351, 358, 377, 622, 948, 954, 963, 993], "2455": 8, "98": [8, 30, 39, 41, 51, 59, 61, 77, 90, 135, 208, 236, 273, 280, 297, 342, 349, 377, 380, 623, 800, 856, 948, 955, 982, 987], "2454": 8, "909": 8, "2449": [8, 351], "958": 8, "2448": 8, "11680": 8, "1499": 8, "944": [8, 244, 316, 974, 982], "2360": 8, "956": [8, 982], "2359": 8, "2356": 8, "950": 8, "2355": 8, "14625": 8, "1865": 8, "965": [8, 156, 953, 974], "2398": 8, "903": 8, "2397": 8, "924": 8, "2394": 8, "957": [8, 691, 953], "17360": [8, 1004], "2179": 8, "2430": 8, "2429": 8, "932": 8, "2427": 8, "2426": 8, "curv": [8, 11, 22, 23, 25, 34, 71, 73, 104, 106, 107, 113, 117, 150, 159, 160, 171, 181, 199, 201, 203, 206, 207, 209, 211, 218, 219, 223, 224, 225, 226, 228, 229, 231, 238, 248, 274, 279, 282, 287, 307, 311, 325, 352, 368, 372, 377, 379, 401, 402, 403, 466, 474, 479, 485, 489, 528, 596, 609, 622, 662, 664, 666, 670, 671, 672, 673, 690, 692, 704, 705, 745, 747, 750, 751, 752, 760, 761, 768, 779, 784, 789, 791, 792, 803, 826, 845, 865, 870, 949, 950, 952, 953, 959, 969, 974, 975, 977, 989, 990, 995, 996, 999, 1003, 1005, 1006, 1007, 1008, 1009], "evolut": [8, 10, 250, 332, 334], "cours": [8, 9, 158, 332, 345, 347, 378, 381, 382, 943, 948, 949, 977], "valid": [8, 13, 14, 25, 51, 52, 53, 54, 67, 68, 70, 71, 73, 77, 94, 99, 105, 107, 110, 111, 112, 113, 114, 117, 125, 129, 132, 133, 135, 145, 150, 153, 155, 159, 165, 167, 169, 175, 181, 183, 189, 199, 209, 215, 217, 221, 226, 229, 231, 235, 238, 239, 240, 242, 244, 245, 246, 247, 250, 251, 252, 255, 262, 276, 279, 284, 287, 289, 294, 299, 307, 315, 323, 333, 340, 345, 348, 357, 358, 359, 364, 367, 368, 371, 373, 374, 375, 378, 379, 380, 381, 382, 387, 389, 401, 406, 407, 409, 410, 411, 413, 414, 421, 427, 428, 432, 435, 436, 437, 438, 439, 440, 442, 446, 447, 448, 449, 457, 465, 466, 468, 479, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 511, 513, 521, 522, 523, 524, 525, 526, 528, 529, 530, 531, 532, 533, 534, 536, 539, 541, 546, 547, 553, 557, 558, 561, 566, 596, 598, 602, 603, 604, 605, 606, 607, 610, 611, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 652, 653, 656, 663, 665, 666, 670, 677, 691, 725, 728, 737, 741, 742, 743, 748, 755, 756, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 796, 799, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 828, 829, 831, 837, 845, 857, 858, 860, 861, 863, 865, 867, 870, 872, 873, 874, 875, 876, 885, 886, 887, 888, 889, 896, 908, 910, 913, 943, 952, 953, 954, 957, 961, 963, 965, 967, 968, 969, 972, 973, 974, 977, 978, 981, 989, 993, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "consumpt": [8, 332, 498, 521, 522, 528, 529, 762, 776, 786, 787, 788, 873, 874, 875, 876, 919, 978, 993, 995, 999, 1001, 1002, 1007], "queue": [8, 956, 996], "up": [8, 11, 34, 41, 43, 44, 45, 49, 52, 54, 59, 66, 75, 76, 82, 85, 99, 106, 149, 154, 160, 165, 174, 182, 197, 198, 226, 240, 243, 258, 271, 276, 279, 284, 291, 297, 304, 311, 315, 319, 321, 334, 339, 340, 345, 349, 351, 352, 353, 354, 357, 359, 360, 371, 373, 378, 380, 381, 407, 411, 412, 413, 414, 416, 420, 423, 424, 425, 472, 473, 500, 513, 514, 521, 522, 523, 524, 525, 526, 528, 529, 530, 574, 591, 596, 597, 603, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 624, 625, 626, 627, 628, 645, 646, 647, 648, 656, 669, 732, 760, 761, 764, 765, 766, 768, 789, 839, 840, 843, 855, 873, 874, 875, 876, 879, 902, 905, 906, 942, 945, 949, 950, 953, 956, 963, 967, 968, 973, 976, 977, 986, 987, 993, 994, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1010], "amount": [8, 12, 42, 50, 63, 73, 76, 87, 91, 102, 104, 143, 153, 165, 185, 199, 213, 289, 296, 299, 301, 307, 315, 321, 332, 333, 334, 357, 372, 373, 375, 378, 380, 381, 382, 407, 418, 433, 502, 503, 505, 507, 527, 560, 610, 611, 614, 615, 616, 617, 618, 619, 620, 624, 625, 626, 627, 629, 645, 648, 656, 765, 766, 805, 806, 811, 846, 861, 862, 875, 876, 948, 949, 952, 955, 957, 963, 965, 966, 967, 968, 985, 986, 1006, 1010], "learner": [8, 102, 112, 121, 334, 521, 522, 523, 524, 525, 526, 528, 529, 530, 546, 553, 594, 807, 808, 813, 815, 816, 955, 958, 969, 972, 973, 987, 1009], "plot_accuraci": 8, "x_legend": 8, "n_exampl": 8, "gca": [8, 41, 59, 80, 140, 186, 190, 192, 208, 221, 242, 266, 268, 279, 303, 305, 308, 309, 960, 990], "set_ylim": [8, 10, 16, 29, 39, 57, 68, 85, 106, 118, 119, 146, 154, 161, 179, 181, 182, 213, 224, 242, 253, 257, 263, 273, 278, 280, 281, 283, 288, 294, 299, 316], "runtim": [8, 10, 55, 101, 167, 196, 198, 213, 276, 280, 333, 347, 348, 357, 359, 372, 373, 380, 414, 527, 643, 776, 865, 866, 867, 868, 869, 870, 871, 967, 968, 996, 1000, 1001, 1007, 1008, 1010, 1011], "gcf": [8, 960], "cls_runtim": 8, "bar_color": 8, "rectangl": 8, "bar": [8, 10, 15, 68, 107, 108, 111, 112, 115, 123, 131, 135, 145, 148, 154, 160, 224, 229, 237, 239, 243, 257, 283, 284, 291, 292, 320, 347, 376, 545, 596, 612, 633, 644, 953, 960, 967, 969, 999, 1000, 1001, 1002], "width": [8, 10, 13, 16, 42, 50, 75, 83, 89, 90, 95, 96, 97, 104, 110, 111, 114, 123, 131, 139, 145, 164, 222, 224, 237, 261, 278, 280, 281, 284, 289, 292, 304, 342, 374, 402, 403, 416, 428, 457, 458, 470, 485, 550, 830, 878, 963, 967, 969, 984, 985, 1001], "set_xticklabel": [8, 10, 75, 97, 123, 140, 154, 156, 249, 250, 257], "ymax": [8, 10, 11, 73, 168, 170, 173, 174, 182, 190, 238, 271], "set_titl": [8, 10, 15, 24, 26, 28, 29, 30, 32, 39, 40, 42, 50, 52, 54, 57, 61, 62, 68, 71, 75, 83, 85, 92, 97, 101, 106, 108, 112, 117, 119, 121, 122, 146, 148, 149, 152, 153, 154, 155, 156, 160, 161, 170, 172, 179, 181, 182, 183, 189, 201, 202, 205, 206, 211, 213, 214, 218, 219, 224, 232, 233, 234, 235, 238, 240, 241, 245, 249, 250, 253, 255, 257, 258, 261, 262, 263, 268, 273, 274, 278, 279, 280, 281, 282, 283, 287, 291, 296, 297, 304, 311, 315, 316, 317, 319, 323], "autolabel": 8, "attach": [8, 319, 398, 810, 994, 1004], "rect": [8, 49, 160], "height": [8, 15, 50, 90, 111, 112, 135, 278, 284, 294, 319, 379, 410, 457, 458, 470, 550], "get_height": [8, 112], "get_x": [8, 112], "get_width": [8, 112], "va": [8, 112, 249, 266, 268, 314], "setp": [8, 10, 249, 252], "rotat": [8, 37, 86, 89, 92, 94, 113, 123, 150, 156, 204, 249, 250, 257, 307, 314, 376, 378, 383, 385, 468, 496, 505, 514, 578, 661, 845, 877, 949, 974, 1004, 1005], "read": [8, 13, 17, 87, 201, 245, 287, 288, 289, 291, 293, 332, 339, 343, 346, 347, 348, 349, 350, 352, 353, 357, 358, 359, 373, 384, 385, 386, 387, 390, 396, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 421, 423, 425, 426, 427, 428, 429, 431, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 568, 569, 570, 571, 572, 574, 575, 577, 578, 579, 580, 583, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 661, 662, 664, 665, 666, 667, 668, 669, 671, 672, 673, 674, 676, 677, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 720, 721, 722, 723, 724, 725, 726, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 816, 817, 818, 819, 821, 824, 825, 828, 829, 830, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 879, 898, 942, 949, 953, 954, 972, 977, 987, 994, 998, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1010], "feat": [8, 10, 349, 381], "extr": 8, "hash": [8, 100, 150, 320, 321, 332, 334, 337, 345, 348, 357, 380, 478, 508, 521, 530, 545, 546, 553, 604, 800, 918, 945, 974, 987, 989, 994, 997, 1000], "vect": [8, 66, 239, 300, 381, 987], "088": [8, 165, 633, 961, 974], "plot_out_of_core_classif": [8, 974], "featurehash": [8, 19, 66, 150, 318, 319, 320, 334, 340, 381, 452, 545, 552, 553, 554, 555, 838, 974, 994, 999, 1000, 1001, 1007, 1008], "dictvector": [8, 19, 66, 150, 318, 319, 320, 340, 381, 452, 546, 552, 553, 554, 555, 838, 974, 993, 994, 997, 1003, 1005, 1006, 1009, 1010], "comparison": [8, 12, 14, 19, 22, 23, 24, 25, 27, 31, 33, 35, 39, 45, 47, 54, 55, 56, 57, 58, 60, 66, 74, 83, 86, 88, 89, 91, 97, 101, 104, 107, 114, 119, 123, 124, 129, 136, 142, 144, 146, 150, 155, 163, 165, 167, 169, 172, 179, 181, 185, 196, 199, 200, 203, 204, 205, 206, 207, 211, 212, 226, 231, 233, 234, 235, 242, 250, 257, 267, 273, 280, 282, 283, 287, 289, 301, 304, 314, 318, 319, 320, 328, 340, 342, 359, 371, 375, 376, 378, 382, 383, 401, 402, 407, 410, 411, 413, 446, 447, 448, 452, 468, 476, 478, 479, 486, 489, 505, 513, 514, 517, 528, 529, 545, 546, 552, 553, 554, 555, 570, 572, 574, 575, 579, 586, 589, 595, 603, 607, 622, 636, 652, 653, 654, 655, 656, 668, 701, 706, 742, 751, 762, 763, 764, 765, 767, 768, 776, 778, 779, 780, 781, 782, 783, 791, 800, 803, 807, 822, 826, 838, 839, 843, 845, 846, 850, 851, 852, 853, 854, 855, 856, 865, 867, 868, 870, 871, 873, 942, 947, 950, 953, 955, 956, 959, 968, 974, 990], "illustr": [9, 22, 23, 25, 29, 31, 49, 53, 54, 66, 67, 70, 71, 73, 75, 80, 85, 89, 101, 104, 109, 116, 118, 120, 121, 130, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 149, 150, 152, 154, 155, 158, 170, 177, 178, 181, 183, 185, 189, 191, 194, 195, 198, 199, 201, 202, 204, 206, 208, 210, 211, 213, 214, 215, 217, 238, 245, 250, 251, 259, 281, 283, 286, 287, 289, 299, 307, 308, 312, 313, 315, 316, 320, 321, 326, 328, 332, 342, 345, 350, 353, 358, 376, 378, 380, 381, 479, 574, 575, 577, 578, 579, 583, 586, 587, 814, 942, 949, 953, 956, 959, 965, 966, 967, 968, 974, 977, 978], "robust": [9, 32, 58, 60, 72, 74, 112, 114, 135, 149, 150, 153, 154, 159, 171, 183, 185, 198, 208, 218, 252, 278, 293, 334, 342, 347, 353, 373, 380, 381, 410, 412, 433, 434, 437, 438, 439, 440, 488, 498, 523, 524, 613, 621, 634, 635, 642, 643, 713, 795, 826, 840, 842, 843, 854, 860, 900, 953, 957, 959, 963, 966, 967, 972, 974, 975, 977, 988, 989, 993, 994, 996, 997, 998, 999, 1000, 1009], "covari": [9, 12, 27, 31, 74, 79, 94, 97, 116, 117, 137, 144, 184, 208, 223, 225, 227, 228, 229, 230, 245, 269, 294, 354, 359, 364, 373, 376, 378, 383, 446, 447, 448, 449, 468, 479, 483, 491, 496, 498, 505, 512, 513, 514, 527, 574, 575, 577, 586, 587, 595, 608, 609, 614, 618, 620, 646, 647, 650, 653, 657, 760, 761, 762, 781, 952, 959, 963, 974, 975, 988, 989, 993, 995, 996, 997, 998, 1000, 1002], "wine": [9, 221, 283, 284, 338, 474, 989], "tool": [9, 11, 112, 153, 215, 236, 241, 328, 338, 339, 340, 343, 345, 347, 348, 349, 350, 351, 352, 353, 358, 359, 360, 362, 363, 364, 367, 373, 374, 375, 451, 656, 665, 942, 948, 949, 953, 959, 963, 968, 970, 972, 973, 977, 978, 987, 1000, 1003, 1006, 1007, 1008], "purpos": [9, 12, 16, 34, 80, 112, 148, 195, 196, 197, 201, 203, 216, 227, 229, 234, 235, 307, 308, 315, 319, 320, 328, 340, 345, 347, 358, 359, 360, 363, 366, 370, 373, 374, 378, 380, 381, 382, 383, 602, 787, 788, 825, 950, 953, 954, 956, 959, 972, 978, 1005, 1007], "awar": [9, 15, 132, 146, 304, 319, 343, 345, 347, 357, 360, 377, 381, 531, 532, 612, 618, 619, 620, 622, 623, 633, 644, 811, 840, 959, 963, 969, 990, 993, 994, 1007], "thing": [9, 32, 202, 233, 319, 333, 334, 340, 344, 345, 347, 357, 360, 373, 375, 381, 523, 524, 949, 963, 977, 999], "trivial": [9, 183, 323, 345, 373, 780, 867, 870, 950, 973, 993], "dimens": [9, 12, 13, 15, 34, 37, 50, 77, 79, 83, 87, 135, 139, 141, 143, 145, 154, 164, 165, 179, 203, 205, 208, 212, 213, 219, 225, 226, 262, 263, 267, 281, 311, 319, 320, 321, 340, 342, 346, 359, 372, 373, 378, 379, 383, 385, 406, 407, 409, 411, 412, 413, 416, 428, 429, 446, 447, 448, 457, 458, 479, 488, 489, 493, 494, 497, 505, 513, 546, 547, 548, 549, 551, 553, 561, 575, 583, 586, 605, 608, 623, 654, 655, 656, 658, 659, 663, 727, 786, 805, 806, 810, 824, 857, 858, 859, 867, 868, 869, 870, 871, 885, 886, 887, 916, 924, 927, 943, 945, 947, 949, 950, 951, 954, 956, 957, 959, 965, 968, 978, 985, 986, 1000, 1002, 1003, 1005], "below": [9, 13, 24, 25, 26, 30, 32, 52, 57, 66, 71, 75, 82, 83, 87, 99, 105, 108, 109, 114, 130, 152, 154, 164, 177, 178, 181, 183, 197, 198, 202, 206, 210, 215, 218, 220, 222, 233, 236, 241, 243, 244, 245, 278, 282, 287, 288, 289, 290, 291, 292, 293, 294, 312, 319, 327, 328, 333, 338, 339, 343, 345, 347, 349, 350, 354, 359, 360, 363, 373, 375, 376, 377, 378, 380, 381, 382, 383, 410, 412, 435, 436, 442, 455, 456, 458, 459, 460, 461, 462, 464, 465, 466, 468, 469, 474, 495, 501, 506, 512, 546, 559, 560, 561, 562, 563, 564, 597, 610, 616, 622, 623, 631, 632, 637, 639, 656, 663, 669, 706, 726, 760, 761, 762, 773, 776, 794, 825, 828, 838, 839, 842, 848, 854, 942, 943, 947, 948, 949, 950, 952, 953, 954, 955, 956, 957, 959, 960, 961, 963, 967, 968, 969, 970, 972, 980, 987, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006], "main": [9, 16, 30, 59, 80, 91, 111, 150, 208, 247, 257, 286, 315, 319, 332, 333, 334, 338, 343, 345, 347, 349, 351, 353, 357, 358, 359, 362, 363, 371, 372, 373, 378, 380, 381, 383, 467, 489, 494, 513, 514, 589, 677, 795, 865, 866, 942, 950, 952, 953, 960, 965, 973, 976, 984, 987, 993, 996, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "empir": [9, 13, 23, 24, 32, 33, 39, 40, 61, 72, 74, 75, 77, 150, 161, 199, 244, 278, 371, 377, 380, 383, 411, 413, 424, 433, 434, 435, 438, 441, 442, 496, 498, 503, 505, 507, 513, 515, 529, 554, 567, 603, 613, 631, 635, 642, 643, 680, 685, 686, 687, 790, 800, 801, 802, 804, 823, 846, 888, 927, 945, 947, 953, 955, 957, 963, 965, 967, 974, 988, 989], "mode": [9, 10, 43, 44, 75, 181, 208, 258, 260, 276, 287, 345, 348, 353, 354, 357, 370, 376, 380, 384, 407, 408, 411, 413, 416, 423, 426, 435, 436, 442, 446, 451, 472, 473, 521, 525, 528, 556, 559, 560, 562, 563, 564, 574, 591, 608, 609, 622, 623, 630, 632, 637, 638, 639, 640, 643, 646, 647, 653, 657, 807, 808, 809, 811, 813, 815, 816, 817, 818, 819, 821, 865, 867, 870, 873, 875, 891, 901, 902, 904, 956, 959, 972, 978, 979, 986, 994, 1002, 1007, 1010], "stick": [9, 760, 952], "bias": [9, 26, 77, 90, 114, 120, 152, 153, 155, 243, 340, 362, 371, 380, 488, 513, 821, 845, 856, 948, 952, 961, 967, 969], "yet": [9, 54, 165, 199, 229, 239, 321, 334, 340, 344, 349, 357, 362, 363, 364, 377, 378, 380, 381, 383, 412, 416, 425, 426, 429, 436, 517, 518, 519, 520, 531, 532, 533, 534, 541, 557, 558, 566, 635, 637, 639, 741, 824, 862, 937, 942, 949, 953, 959, 967, 973, 1002, 1010], "extent": [9, 55, 139, 140, 141, 212, 313, 316, 404, 499, 660, 760, 953], "assum": [9, 32, 52, 54, 144, 149, 152, 153, 170, 181, 199, 208, 211, 230, 238, 247, 278, 315, 321, 333, 344, 345, 347, 349, 351, 357, 358, 359, 362, 367, 370, 371, 373, 375, 377, 378, 380, 381, 383, 384, 389, 394, 401, 403, 408, 410, 414, 421, 427, 433, 434, 435, 436, 437, 438, 439, 440, 467, 472, 473, 496, 506, 512, 513, 525, 526, 531, 532, 551, 552, 553, 555, 584, 596, 607, 608, 610, 611, 616, 622, 623, 624, 625, 626, 630, 631, 632, 635, 636, 640, 641, 642, 645, 649, 651, 652, 656, 673, 689, 698, 704, 719, 727, 732, 737, 741, 744, 762, 765, 766, 776, 801, 807, 808, 811, 812, 813, 815, 816, 821, 832, 845, 913, 929, 930, 931, 943, 947, 949, 951, 952, 953, 955, 956, 958, 959, 960, 963, 967, 969, 999, 1005], "parametr": [9, 23, 24, 77, 211, 262, 282, 290, 371, 374, 379, 380, 401, 515, 517, 599, 649, 660, 841, 853, 896, 897, 949, 952, 955, 956, 963, 966, 969, 1001, 1003, 1006], "minimum": [9, 13, 52, 54, 75, 114, 115, 134, 170, 191, 212, 218, 248, 264, 265, 347, 354, 363, 366, 370, 373, 380, 381, 405, 409, 410, 414, 418, 420, 433, 434, 437, 438, 439, 440, 475, 477, 505, 516, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 558, 591, 595, 596, 599, 601, 632, 635, 640, 642, 643, 646, 647, 656, 669, 688, 742, 743, 765, 766, 786, 801, 822, 823, 834, 835, 838, 839, 840, 844, 858, 859, 872, 873, 874, 875, 876, 882, 885, 886, 889, 905, 950, 953, 957, 959, 963, 965, 969, 993, 996, 1000, 1001, 1005, 1006, 1010], "determin": [9, 11, 14, 19, 43, 52, 75, 101, 103, 107, 142, 153, 160, 161, 177, 184, 238, 278, 283, 311, 321, 327, 328, 344, 345, 347, 354, 358, 359, 370, 371, 373, 377, 378, 380, 381, 382, 383, 396, 401, 405, 406, 407, 409, 411, 413, 414, 420, 423, 424, 425, 429, 433, 434, 436, 437, 438, 439, 440, 446, 447, 448, 452, 455, 456, 459, 461, 467, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 501, 503, 506, 507, 516, 517, 518, 520, 522, 523, 524, 525, 526, 527, 529, 531, 532, 534, 546, 547, 548, 552, 555, 558, 566, 571, 572, 574, 575, 576, 577, 578, 579, 580, 583, 584, 585, 586, 587, 588, 589, 591, 599, 600, 604, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 636, 637, 638, 639, 640, 642, 643, 644, 651, 653, 654, 656, 657, 658, 671, 675, 686, 692, 693, 701, 746, 747, 748, 750, 751, 756, 762, 764, 765, 766, 768, 776, 784, 785, 786, 787, 788, 789, 790, 792, 796, 798, 799, 801, 808, 810, 811, 816, 821, 822, 823, 829, 830, 838, 839, 840, 842, 846, 854, 865, 866, 868, 871, 874, 876, 879, 900, 916, 922, 924, 927, 942, 945, 947, 952, 956, 958, 959, 961, 963, 966, 967, 969, 978, 993, 998, 1001, 1002, 1004, 1005, 1006], "cluster": [9, 14, 15, 17, 18, 20, 23, 39, 40, 43, 45, 47, 48, 50, 51, 54, 56, 58, 59, 66, 75, 82, 83, 84, 93, 99, 103, 110, 117, 130, 133, 156, 178, 202, 204, 205, 206, 212, 218, 224, 225, 226, 227, 239, 264, 265, 267, 281, 288, 292, 298, 300, 309, 318, 319, 321, 327, 334, 338, 340, 342, 345, 347, 350, 357, 359, 368, 374, 379, 381, 387, 388, 391, 452, 466, 467, 468, 475, 476, 477, 478, 479, 486, 494, 505, 508, 528, 530, 553, 554, 555, 595, 655, 656, 659, 668, 669, 674, 681, 683, 688, 694, 699, 700, 718, 720, 741, 742, 749, 755, 756, 758, 760, 761, 817, 818, 826, 830, 837, 845, 894, 896, 914, 921, 937, 943, 950, 952, 956, 959, 961, 963, 966, 970, 972, 973, 974, 977, 978, 981, 984, 987, 988, 989, 993, 994, 995, 996, 997, 998, 999, 1000], "outli": [9, 75, 359, 433, 438, 949, 959], "skew": [9, 114, 184, 212, 218, 278, 293, 337, 377, 603, 604, 605, 606, 841, 853, 949, 963, 989, 996, 1000, 1009], "Of": [9, 24, 26, 148, 332, 347, 373, 381, 943], "screen": [9, 1006], "presenc": [9, 57, 59, 75, 76, 99, 152, 156, 165, 185, 218, 278, 343, 346, 359, 375, 378, 676, 689, 719, 732, 794, 828, 836, 838, 845, 937, 943, 949, 953, 954, 967, 996, 997, 999, 1003, 1005, 1007], "univari": [9, 10, 33, 44, 68, 70, 129, 130, 132, 150, 163, 180, 196, 251, 302, 337, 372, 373, 374, 381, 409, 468, 489, 494, 556, 559, 560, 562, 563, 564, 566, 569, 570, 571, 572, 573, 591, 592, 593, 594, 609, 762, 767, 787, 791, 825, 826, 835, 840, 844, 845, 865, 870, 949, 968, 970, 974, 975, 986, 989, 993, 999], "appli": [9, 13, 15, 19, 24, 26, 30, 37, 41, 43, 44, 52, 53, 55, 59, 67, 69, 71, 80, 83, 87, 88, 93, 95, 97, 106, 107, 112, 114, 131, 137, 153, 155, 165, 170, 185, 186, 195, 201, 202, 203, 208, 213, 215, 238, 239, 241, 250, 257, 267, 278, 282, 283, 288, 307, 311, 321, 327, 328, 332, 337, 345, 347, 353, 357, 358, 359, 370, 371, 372, 373, 374, 375, 377, 378, 380, 381, 382, 383, 385, 404, 410, 416, 426, 428, 429, 431, 433, 438, 446, 447, 448, 449, 472, 473, 480, 481, 482, 488, 495, 496, 497, 498, 499, 501, 503, 505, 506, 507, 512, 513, 514, 517, 518, 521, 522, 523, 524, 528, 529, 530, 552, 553, 554, 555, 591, 596, 597, 602, 603, 605, 606, 622, 623, 632, 640, 641, 642, 655, 663, 665, 671, 689, 719, 721, 722, 744, 751, 755, 756, 762, 776, 791, 794, 800, 801, 802, 803, 804, 814, 824, 825, 834, 841, 842, 845, 850, 851, 853, 854, 855, 856, 861, 872, 873, 874, 875, 876, 885, 891, 894, 901, 902, 925, 943, 945, 949, 950, 951, 952, 953, 955, 957, 959, 961, 963, 967, 968, 969, 970, 971, 977, 994, 997, 998, 999, 1000, 1001, 1004, 1005, 1007], "ellipticenvelop": [9, 208, 434, 437, 438, 439, 440, 527, 959, 993, 996, 1000, 1001, 1006], "decisionboundarydisplai": [9, 28, 29, 32, 53, 103, 117, 122, 164, 173, 190, 195, 241, 261, 266, 269, 283, 303, 304, 305, 306, 308, 309, 311, 324, 1007, 1008, 1010], "oneclasssvm": [9, 11, 16, 195, 208, 290, 306, 527, 641, 811, 959, 967, 968, 995, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008], "support_fract": [9, 433, 438], "contamin": [9, 75, 76, 208, 218, 264, 265, 433, 527, 811, 959, 1001, 1009, 1010], "ocsvm": [9, 195], "line": [9, 11, 13, 16, 17, 37, 40, 57, 66, 75, 84, 87, 92, 101, 107, 113, 136, 148, 149, 150, 153, 154, 169, 170, 171, 173, 176, 177, 179, 182, 183, 184, 189, 190, 192, 193, 195, 208, 212, 213, 216, 218, 235, 242, 244, 245, 264, 268, 271, 279, 289, 306, 309, 311, 312, 316, 317, 319, 339, 340, 343, 345, 346, 347, 349, 350, 351, 352, 353, 357, 378, 379, 380, 402, 451, 452, 453, 472, 473, 506, 517, 518, 519, 520, 574, 577, 578, 596, 634, 650, 664, 665, 666, 768, 784, 921, 947, 953, 957, 960, 967, 972, 974, 976, 985, 987, 995, 1004, 1006, 1009, 1010], "mline": [9, 75, 195, 264, 306, 309], "load_win": [9, 221, 283, 809, 817, 990, 1004], "red": [9, 10, 11, 25, 31, 32, 57, 75, 85, 87, 88, 89, 104, 121, 124, 146, 158, 160, 161, 171, 179, 206, 219, 233, 244, 271, 274, 279, 283, 284, 298, 307, 326, 343, 359, 373, 378, 954], "frontier": [9, 195, 264, 306, 959, 985], "legend_lin": 9, "response_method": [9, 28, 32, 53, 103, 117, 122, 164, 173, 190, 195, 241, 261, 266, 269, 283, 303, 304, 306, 311, 324, 595, 596, 597, 662, 664, 666, 705, 953, 1010], "decision_funct": [9, 11, 16, 24, 26, 53, 103, 117, 128, 193, 194, 195, 209, 215, 218, 245, 264, 265, 273, 280, 294, 305, 306, 307, 311, 312, 313, 317, 347, 359, 371, 380, 401, 433, 513, 514, 517, 519, 523, 525, 527, 531, 557, 558, 595, 596, 597, 622, 623, 630, 632, 638, 639, 640, 641, 662, 664, 666, 671, 684, 689, 690, 698, 702, 703, 705, 719, 745, 751, 752, 757, 762, 765, 766, 776, 786, 793, 794, 795, 796, 811, 825, 832, 862, 865, 867, 869, 870, 949, 953, 959, 960, 967, 968, 985, 993, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1010], "plot_method": [9, 32, 164, 195, 261, 266, 303, 305, 306, 308, 309, 311, 595], "contour": [9, 11, 16, 32, 43, 44, 75, 110, 128, 135, 140, 141, 143, 192, 193, 194, 195, 208, 213, 228, 264, 271, 305, 306, 308, 309, 311, 312, 313, 342, 352, 595, 596, 959, 967], "line2d": [9, 75, 195, 264, 306, 309, 768, 784], "bbox_arg": 9, "dict": [9, 10, 11, 12, 17, 25, 36, 42, 66, 69, 70, 93, 107, 112, 114, 116, 179, 187, 208, 217, 226, 236, 237, 239, 242, 245, 247, 258, 262, 280, 284, 291, 300, 307, 320, 321, 334, 337, 339, 347, 357, 359, 374, 377, 384, 385, 387, 391, 395, 397, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 421, 428, 429, 433, 434, 435, 436, 437, 438, 439, 440, 446, 447, 448, 449, 460, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 545, 546, 547, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 574, 575, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 652, 653, 654, 655, 656, 661, 662, 664, 665, 666, 677, 725, 728, 734, 742, 743, 760, 761, 762, 765, 766, 768, 773, 774, 776, 784, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 857, 858, 860, 861, 862, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 880, 890, 891, 907, 910, 913, 942, 953, 963, 982, 983, 987, 989, 993, 999, 1000, 1009, 1010], "boxstyl": [9, 280], "fc": [9, 263, 340], "arrow_arg": 9, "arrowstyl": 9, "xy": [9, 25, 46, 245, 271, 312, 363, 610, 611, 614, 615, 616, 617, 618, 619, 624, 625, 626, 627, 628, 645, 646, 647, 648, 650], "xycoord": [9, 25], "textcoord": [9, 158], "xytext": [9, 25, 158], "bbox": [9, 12, 32, 42, 93, 224, 225, 226, 229, 230, 280], "arrowprop": [9, 25], "ash": [9, 342, 996, 999], "malic_acid": 9, "abil": [9, 13, 58, 75, 114, 136, 137, 138, 142, 144, 146, 148, 150, 152, 153, 155, 181, 185, 199, 208, 319, 334, 363, 380, 381, 383, 575, 586, 589, 745, 746, 747, 750, 751, 950, 953, 956, 959, 969, 973, 974, 993, 995, 1000, 1002, 1006, 1007], "locat": [9, 24, 50, 51, 68, 75, 76, 175, 271, 289, 307, 338, 340, 343, 345, 349, 350, 353, 354, 363, 373, 375, 379, 412, 424, 425, 433, 434, 435, 436, 437, 438, 439, 440, 452, 464, 465, 468, 469, 476, 479, 938, 943, 949, 954, 959, 963, 969, 1001], "hard": [9, 181, 208, 212, 238, 240, 334, 344, 357, 359, 373, 378, 381, 498, 505, 533, 640, 867, 868, 869, 870, 871, 949, 966, 968, 969, 973, 985, 986, 987, 1002, 1003], "due": [9, 13, 25, 26, 50, 52, 57, 71, 101, 104, 137, 153, 154, 160, 165, 172, 179, 181, 183, 198, 199, 212, 218, 225, 246, 247, 257, 258, 283, 284, 311, 315, 319, 320, 321, 343, 345, 351, 359, 363, 371, 373, 377, 378, 380, 383, 407, 410, 411, 423, 499, 503, 507, 508, 538, 635, 762, 765, 766, 770, 772, 776, 786, 787, 790, 793, 797, 798, 830, 834, 835, 845, 943, 949, 950, 952, 953, 954, 956, 960, 967, 968, 973, 986, 993, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "banana": [9, 953], "anywai": [9, 319, 347, 629, 649, 650], "rid": [9, 967], "difficulti": [9, 26, 199, 278, 334, 345, 371, 822, 823, 952, 956], "bandwidth": [9, 41, 60, 214, 262, 263, 271, 357, 359, 373, 379, 412, 422, 425, 805, 806, 810, 946, 959, 1004, 1008], "compromis": [9, 154, 332, 345, 611, 643, 956, 996], "risk": [9, 52, 181, 185, 199, 279, 315, 328, 344, 345, 359, 372, 377, 380, 531, 532, 850, 851, 853, 854, 855, 856, 949, 953, 977, 1000], "flavanoid": [9, 342], "color_intens": 9, "359": [9, 974], "plot_outlier_detection_win": [9, 974], "anomali": [9, 75, 117, 150, 195, 207, 218, 264, 265, 340, 372, 433, 476, 486, 527, 603, 641, 811, 826, 869, 959, 972, 974, 999, 1000], "algorithm": [9, 14, 17, 18, 27, 29, 33, 34, 39, 40, 42, 43, 47, 53, 54, 55, 56, 57, 58, 59, 63, 64, 66, 74, 75, 79, 87, 89, 101, 102, 103, 107, 110, 117, 150, 158, 168, 170, 184, 195, 197, 203, 205, 207, 211, 212, 218, 225, 226, 227, 230, 235, 238, 247, 258, 264, 265, 267, 271, 278, 280, 283, 287, 288, 289, 292, 294, 298, 300, 306, 319, 320, 321, 328, 332, 334, 338, 339, 340, 341, 342, 345, 346, 347, 348, 353, 354, 358, 359, 362, 369, 370, 372, 373, 375, 376, 377, 378, 380, 381, 383, 384, 385, 386, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 433, 438, 439, 442, 446, 447, 448, 452, 467, 475, 476, 477, 478, 479, 486, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 505, 506, 508, 509, 510, 511, 512, 517, 518, 519, 520, 523, 524, 527, 555, 567, 568, 574, 575, 599, 601, 603, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 638, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 668, 669, 672, 681, 683, 698, 700, 706, 737, 741, 742, 756, 758, 760, 761, 793, 802, 803, 805, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 817, 818, 821, 826, 830, 832, 845, 849, 861, 865, 866, 867, 868, 869, 870, 871, 873, 874, 885, 901, 902, 904, 918, 922, 928, 943, 945, 948, 950, 951, 952, 953, 955, 958, 959, 963, 966, 967, 968, 971, 972, 973, 974, 975, 977, 978, 981, 982, 984, 986, 987, 989, 993, 994, 995, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "toi": [9, 33, 36, 37, 38, 39, 44, 46, 49, 50, 52, 53, 54, 64, 75, 80, 91, 104, 117, 122, 123, 150, 163, 171, 185, 195, 207, 218, 224, 264, 265, 274, 304, 314, 338, 351, 357, 380, 381, 404, 405, 406, 408, 410, 412, 413, 414, 416, 422, 433, 476, 478, 486, 527, 603, 641, 689, 719, 761, 811, 818, 826, 845, 869, 950, 952, 953, 959, 963, 974, 989], "lof": [9, 150, 195, 208, 218, 259, 306, 527, 811, 869, 959, 974], "discrimin": [9, 10, 27, 73, 74, 75, 76, 77, 95, 130, 132, 135, 150, 158, 196, 202, 216, 229, 267, 342, 371, 380, 439, 476, 513, 514, 530, 595, 746, 814, 942, 950, 953, 956, 967, 969, 974, 975, 985, 989, 996], "ellipsoid": [9, 27, 31, 75, 76, 77, 150, 223, 224, 226, 227, 228, 229, 230, 513, 514, 595, 760, 761, 947, 952, 974], "goal": [10, 17, 20, 49, 54, 80, 148, 154, 158, 181, 196, 199, 217, 218, 235, 236, 319, 333, 334, 340, 347, 350, 351, 359, 360, 362, 378, 382, 506, 512, 554, 557, 702, 953, 956, 958, 959, 967, 968, 969, 977, 978, 981, 985, 987, 1001], "boxplot": [10, 75, 115, 153, 156, 287], "gc": 10, "defaultdict": [10, 13, 19, 24, 156, 241, 320, 321], "make_regress": [10, 71, 160, 162, 163, 167, 184, 185, 251, 288, 294, 328, 341, 347, 348, 358, 518, 520, 524, 529, 570, 572, 573, 599, 610, 611, 613, 615, 617, 619, 627, 628, 629, 631, 635, 643, 651, 823, 866, 953, 954, 956], "randomforestregressor": [10, 107, 120, 121, 124, 148, 149, 289, 294, 358, 380, 521, 522, 524, 526, 530, 532, 534, 596, 597, 875, 943, 998, 999, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1010], "sgdregressor": [10, 192, 332, 334, 357, 372, 610, 613, 631, 635, 640, 643, 823, 866, 871, 949, 967, 995, 997, 999, 1000, 1001, 1004, 1006, 1007, 1008, 1009], "shuffl": [10, 13, 15, 20, 21, 23, 26, 30, 45, 57, 58, 87, 107, 108, 110, 121, 149, 165, 189, 190, 195, 208, 239, 243, 244, 251, 258, 285, 296, 297, 298, 299, 309, 319, 320, 328, 340, 354, 359, 368, 433, 438, 452, 453, 455, 456, 459, 461, 467, 475, 476, 477, 478, 479, 483, 486, 488, 495, 501, 503, 504, 510, 511, 517, 518, 519, 520, 528, 529, 531, 532, 566, 569, 571, 622, 623, 630, 631, 632, 636, 638, 640, 641, 642, 651, 762, 764, 765, 766, 767, 768, 776, 779, 780, 781, 782, 783, 784, 786, 787, 788, 789, 790, 791, 792, 793, 795, 822, 823, 846, 865, 866, 867, 870, 901, 902, 922, 924, 948, 949, 954, 961, 967, 968, 982, 987, 989, 993, 996, 997, 998, 1000, 1001, 1002, 1003, 1004], "atomic_benchmark_estim": 10, "verbos": [10, 39, 47, 51, 61, 66, 68, 70, 121, 168, 239, 275, 276, 278, 290, 300, 319, 343, 349, 359, 367, 404, 407, 411, 413, 416, 418, 423, 426, 428, 431, 435, 436, 442, 495, 500, 501, 502, 503, 504, 507, 509, 510, 511, 512, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 557, 558, 591, 596, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 629, 630, 631, 632, 633, 640, 641, 642, 643, 644, 645, 646, 647, 648, 651, 654, 656, 658, 728, 741, 760, 761, 762, 765, 766, 768, 776, 784, 786, 787, 788, 789, 790, 792, 794, 796, 799, 814, 821, 822, 823, 824, 825, 826, 827, 862, 865, 866, 867, 868, 869, 870, 871, 919, 973, 995, 996, 998, 1000, 1001, 1002, 1004, 1005, 1007, 1008], "n_instanc": [10, 597], "zero": [10, 11, 14, 26, 32, 34, 37, 38, 49, 51, 74, 76, 77, 87, 90, 92, 103, 104, 113, 115, 116, 120, 132, 135, 149, 160, 165, 167, 172, 174, 175, 180, 181, 182, 185, 186, 187, 191, 196, 199, 212, 215, 216, 218, 224, 228, 230, 235, 238, 243, 247, 248, 263, 278, 288, 289, 311, 315, 320, 321, 323, 327, 332, 333, 340, 347, 351, 359, 371, 372, 373, 375, 378, 380, 381, 382, 383, 386, 410, 416, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 451, 461, 472, 473, 487, 490, 491, 495, 496, 499, 501, 502, 503, 504, 506, 507, 511, 512, 516, 521, 522, 523, 524, 525, 526, 528, 529, 530, 545, 549, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 571, 572, 575, 600, 603, 607, 608, 609, 614, 622, 623, 628, 629, 630, 631, 632, 635, 640, 641, 642, 649, 650, 667, 673, 676, 677, 679, 680, 688, 692, 693, 697, 701, 703, 709, 746, 747, 748, 750, 759, 760, 777, 778, 781, 782, 794, 805, 806, 807, 808, 809, 811, 813, 814, 815, 816, 817, 818, 819, 820, 821, 828, 835, 837, 838, 840, 841, 842, 844, 845, 851, 852, 853, 854, 858, 865, 873, 874, 875, 876, 900, 928, 939, 943, 949, 951, 952, 955, 956, 957, 963, 964, 965, 967, 968, 969, 978, 985, 987, 993, 995, 997, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "atomic_benchmark": 10, "percentil": [10, 13, 67, 114, 218, 222, 278, 332, 556, 559, 560, 562, 563, 564, 567, 570, 596, 597, 711, 963, 998, 1006], "bulk_benchmark_estim": 10, "n_bulk_repeat": 10, "whole": [10, 47, 70, 124, 149, 182, 235, 242, 307, 311, 323, 332, 343, 345, 357, 358, 374, 376, 380, 383, 413, 447, 502, 519, 520, 521, 522, 527, 528, 529, 530, 534, 649, 650, 762, 765, 766, 776, 789, 800, 801, 802, 803, 804, 942, 953, 963, 987, 1001, 1003], "bulk_benchmark": 10, "benchmark_estim": 10, "repeat": [10, 31, 63, 74, 76, 113, 135, 137, 143, 144, 154, 158, 183, 233, 238, 239, 250, 255, 297, 320, 321, 347, 354, 359, 360, 370, 371, 372, 373, 378, 381, 382, 552, 557, 571, 572, 579, 591, 598, 623, 767, 777, 778, 781, 891, 943, 952, 989, 1001, 1003], "atomic_runtim": 10, "bulk_runtim": 10, "pair": [10, 13, 34, 41, 55, 61, 92, 103, 105, 110, 114, 128, 141, 145, 161, 164, 173, 190, 193, 199, 212, 233, 238, 245, 247, 301, 303, 305, 307, 308, 309, 311, 313, 320, 324, 340, 357, 359, 370, 371, 374, 377, 381, 383, 401, 404, 405, 409, 414, 421, 427, 435, 436, 442, 457, 472, 473, 546, 556, 559, 560, 562, 563, 564, 574, 577, 578, 579, 581, 583, 584, 586, 587, 589, 591, 596, 597, 607, 656, 663, 664, 669, 670, 671, 679, 694, 703, 721, 722, 726, 729, 732, 733, 734, 735, 736, 737, 739, 741, 742, 743, 744, 745, 749, 793, 805, 806, 880, 953, 954, 955, 956, 963, 969, 993, 1005, 1006, 1008, 1009, 1010], "contain": [10, 13, 19, 23, 26, 31, 37, 46, 53, 55, 66, 67, 103, 105, 109, 117, 143, 153, 154, 156, 158, 172, 185, 199, 208, 215, 218, 219, 222, 229, 236, 238, 244, 247, 248, 257, 264, 265, 267, 278, 290, 297, 300, 319, 320, 338, 339, 340, 342, 345, 347, 349, 350, 351, 352, 353, 354, 358, 359, 367, 371, 372, 373, 374, 376, 377, 378, 380, 381, 382, 383, 385, 387, 397, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 426, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 446, 447, 448, 449, 451, 452, 453, 454, 455, 456, 457, 458, 460, 464, 466, 467, 468, 472, 473, 474, 478, 479, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 545, 546, 547, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 574, 575, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 599, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 649, 650, 652, 653, 654, 655, 656, 660, 661, 662, 664, 665, 666, 673, 676, 698, 699, 700, 735, 742, 743, 751, 757, 760, 761, 762, 765, 766, 768, 776, 780, 781, 784, 788, 789, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 821, 822, 823, 824, 825, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 857, 858, 860, 861, 862, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 884, 885, 886, 905, 906, 908, 909, 916, 920, 922, 942, 943, 945, 951, 954, 957, 959, 961, 963, 964, 966, 969, 972, 976, 978, 987, 993, 995, 996, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010], "generate_dataset": 10, "coef": [10, 51, 96, 152, 153, 160, 165, 168, 172, 173, 175, 180, 184, 185, 186, 190, 197, 222, 251, 275, 293, 316, 488, 610, 611, 613, 616, 617, 623, 624, 625, 626, 627, 633, 636, 638, 644, 645, 646, 647, 648, 649, 650, 651, 957], "random_se": [10, 85, 110], "x_scaler": 10, "y_scaler": 10, "ok": [10, 345, 959], "boxplot_runtim": 10, "pred_typ": 10, "micro": [10, 271, 300, 332, 671, 677, 692, 693, 701, 746, 747, 750, 751, 953, 993, 1001, 1002, 1008], "bp": [10, 115, 135, 169, 170, 342, 961], "cls_info": 10, "estimator_conf": 10, "whisker": 10, "flier": 10, "marker": [10, 11, 17, 26, 28, 32, 34, 35, 39, 49, 52, 55, 56, 57, 60, 61, 79, 84, 85, 89, 107, 120, 144, 145, 158, 169, 174, 176, 178, 179, 181, 183, 184, 196, 198, 202, 224, 226, 227, 233, 238, 240, 241, 242, 265, 278, 283, 298, 323, 345, 349, 381, 1001, 1003, 1004, 1009], "linestyl": [10, 11, 16, 31, 57, 69, 75, 94, 96, 101, 113, 123, 126, 128, 137, 140, 142, 144, 146, 155, 156, 166, 168, 169, 170, 181, 182, 183, 187, 191, 193, 194, 199, 216, 218, 235, 237, 241, 242, 247, 263, 271, 274, 279, 305, 308, 309, 311, 312, 313, 315, 983], "major": [10, 15, 32, 107, 245, 278, 282, 287, 288, 289, 290, 291, 292, 293, 294, 311, 321, 332, 340, 344, 345, 348, 351, 357, 360, 373, 377, 379, 381, 515, 533, 534, 658, 877, 879, 953, 956, 967, 973, 977, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "lightgrei": 10, "set_axisbelow": 10, "capit": [10, 24, 294, 460, 768, 784], "clf_name": [10, 319], "n_feature_influ": 10, "nber": 10, "estimator_nam": [10, 189, 347, 352, 402, 540, 662, 664, 666, 884], "percentile_perf_in_u": 10, "plot_n_features_influ": 10, "il": [10, 628, 649, 650, 949, 953], "benchmark_throughput": 10, "duration_sec": 10, "estimator_config": 10, "n_predict": 10, "plot_benchmark_throughput": 10, "cls_valu": 10, "sec": [10, 189, 203, 206, 258], "1e2": [10, 137, 144, 214, 230, 307, 709], "randomforest": [10, 110, 332, 380, 873, 874, 998], "0001": [10, 135, 189, 236, 347, 385, 407, 411, 423, 435, 436, 442, 497, 502, 504, 511, 513, 514, 523, 524, 610, 611, 612, 613, 616, 617, 622, 623, 624, 625, 626, 627, 632, 633, 636, 638, 640, 642, 644, 651, 653, 657, 822, 823, 865, 866, 942], "250": [10, 62, 114, 158, 201, 311, 457, 656, 942, 965, 1000], "500": [10, 41, 47, 54, 57, 58, 60, 79, 80, 94, 96, 105, 107, 115, 134, 137, 158, 194, 195, 202, 219, 220, 224, 225, 229, 238, 241, 251, 258, 264, 270, 282, 288, 293, 294, 313, 317, 332, 380, 386, 433, 434, 438, 439, 440, 445, 446, 447, 448, 575, 577, 578, 580, 585, 588, 589, 614, 615, 618, 619, 620, 644, 646, 647, 823, 942, 968], "plot_prediction_lat": [10, 974], "anova": [10, 51, 70, 129, 131, 134, 135, 150, 236, 302, 374, 468, 479, 556, 559, 560, 562, 563, 564, 568, 569, 570, 573, 677, 787, 791, 825, 826, 845, 865, 870, 968, 974], "ledoit": [10, 27, 32, 72, 73, 76, 77, 150, 267, 437, 439, 443, 444, 476, 513, 947, 974], "wolf": [10, 27, 32, 72, 73, 76, 77, 150, 267, 437, 439, 443, 444, 476, 513, 947, 974, 1000], "oa": [10, 27, 32, 72, 76, 77, 94, 116, 150, 267, 269, 375, 433, 434, 437, 438, 440, 441, 476, 513, 762, 947, 974], "conserv": [11, 359, 546, 553, 857, 858, 952, 965], "biologi": 11, "south": [11, 153, 271, 340, 379], "american": [11, 12, 66, 76, 340, 373, 375, 379, 380, 381, 433, 438, 694, 845], "mammal": 11, "past": [11, 13, 349, 350, 353, 357, 360, 377, 378, 380, 502, 519, 520, 642, 977, 979, 1009], "environment": [11, 165, 199], "unsuccess": 11, "cast": [11, 50, 181, 202, 339, 359, 360, 381, 460, 608, 609, 610, 616, 620, 621, 624, 625, 626, 627, 628, 629, 637, 639, 918, 1000, 1001, 1002, 1003, 1006, 1008], "densiti": [11, 46, 52, 57, 62, 71, 96, 135, 150, 167, 181, 196, 199, 205, 208, 212, 223, 224, 230, 238, 244, 255, 259, 264, 265, 278, 307, 319, 340, 342, 354, 359, 373, 380, 384, 392, 408, 410, 412, 414, 416, 428, 431, 462, 466, 500, 505, 513, 514, 760, 761, 762, 805, 806, 810, 811, 858, 947, 949, 952, 956, 958, 959, 965, 972, 974, 975, 978, 988, 989, 995, 997, 1001, 1002, 1008, 1009], "phillip": [11, 271, 340, 462], "2006": [11, 271, 340, 380, 383, 426, 462, 521, 522, 529, 530, 574, 575, 578, 583, 586, 613, 630, 631, 704, 751, 752, 760, 800, 858, 875, 876, 949, 953, 955, 958, 965, 966], "basemap": [11, 271], "coast": [11, 271], "nation": [11, 75, 271, 340, 812], "boundari": [11, 14, 24, 25, 26, 29, 32, 55, 57, 100, 103, 110, 119, 123, 128, 138, 139, 141, 150, 154, 164, 182, 190, 208, 213, 216, 241, 252, 266, 268, 269, 271, 273, 278, 280, 283, 295, 300, 302, 304, 305, 306, 307, 309, 316, 317, 324, 341, 371, 380, 381, 383, 414, 420, 468, 500, 513, 514, 533, 552, 553, 555, 595, 698, 724, 762, 794, 807, 813, 815, 816, 817, 840, 844, 861, 862, 867, 869, 870, 873, 889, 947, 956, 959, 963, 966, 967, 968, 974, 993, 995, 997, 1006, 1007, 1008, 1010], "america": [11, 12, 75, 271, 340, 812, 963], "bradypu": [11, 271, 340, 462], "variegatu": [11, 271, 340, 462], "brown": [11, 85, 271, 340, 462, 592, 943, 998, 1000, 1001, 1002, 1005], "throat": [11, 271, 340, 462], "sloth": [11, 271, 340, 462], "microryzomi": [11, 271, 340, 462], "minutu": [11, 271, 340, 462], "known": [11, 17, 24, 26, 36, 46, 54, 55, 76, 95, 96, 121, 142, 144, 149, 165, 181, 182, 199, 208, 238, 240, 247, 267, 271, 279, 290, 296, 304, 311, 320, 334, 340, 342, 343, 345, 348, 353, 357, 359, 369, 370, 371, 373, 374, 375, 376, 377, 378, 380, 381, 383, 402, 427, 446, 448, 462, 472, 473, 508, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 552, 553, 555, 558, 573, 586, 597, 622, 623, 636, 646, 647, 658, 668, 674, 677, 682, 692, 706, 718, 720, 758, 794, 800, 801, 802, 803, 804, 807, 812, 815, 821, 849, 873, 874, 875, 876, 943, 945, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 963, 968, 969, 978, 983, 985, 986], "forest": [11, 26, 29, 100, 106, 110, 112, 113, 115, 116, 117, 119, 121, 124, 148, 150, 151, 158, 208, 235, 237, 239, 271, 289, 319, 326, 328, 338, 358, 359, 371, 372, 382, 427, 428, 454, 455, 459, 460, 462, 479, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 530, 594, 598, 762, 767, 791, 798, 825, 839, 869, 873, 874, 875, 942, 943, 954, 961, 973, 974, 975, 989, 990, 993, 994, 996, 997, 998, 999, 1000, 1002, 1010], "rice": [11, 271, 340, 462, 1006], "rat": [11, 271, 340, 462], "rodent": [11, 271, 340, 462], "live": [11, 66, 153, 271, 340, 345, 373, 462, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 976], "peru": [11, 271, 340, 462], "colombia": [11, 271, 340, 462], "ecuador": [11, 271, 340, 462], "venezuela": [11, 271, 340, 462], "entropi": [11, 220, 250, 271, 289, 296, 297, 328, 340, 373, 380, 385, 462, 497, 521, 528, 571, 572, 622, 681, 699, 700, 704, 758, 873, 875, 949, 950, 953, 957, 969, 995, 997, 1001, 1002, 1007, 1009, 1010], "anderson": [11, 271, 340, 462, 999, 1005], "schapir": [11, 255, 271, 340, 380, 462, 517, 518], "ecolog": [11, 271, 340, 462], "190": [11, 37, 113, 199, 247, 271, 340, 351, 462, 974], "231": [11, 271, 340, 373, 384, 408, 462, 548], "259": [11, 203, 271, 340, 380, 462, 531, 532], "________________________________________________________________________________": [11, 51, 319], "coastlin": [11, 135, 271, 342], "coverag": [11, 13, 114, 181, 199, 271, 340, 348, 369, 462, 591, 684], "area": [11, 13, 117, 135, 181, 199, 218, 235, 238, 245, 247, 248, 307, 311, 312, 316, 342, 345, 349, 357, 373, 381, 666, 670, 671, 672, 705, 751, 752, 950, 953, 956, 971, 995], "roc": [11, 24, 106, 135, 150, 207, 209, 218, 219, 231, 233, 240, 294, 299, 352, 371, 377, 468, 474, 528, 622, 666, 670, 671, 672, 690, 705, 745, 751, 752, 781, 791, 794, 832, 870, 959, 974, 990, 995, 996, 998, 999, 1003, 1005, 1009], "868443": 11, "993919": 11, "elaps": [11, 44, 64, 107, 108, 109, 332, 428, 431, 533, 534, 824, 825, 826, 827], "29": [11, 13, 76, 85, 90, 138, 142, 172, 181, 185, 198, 239, 292, 297, 342, 380, 523, 524, 654, 658, 744, 760, 817, 949, 950, 967, 974], "astro": [11, 144, 201, 227], "washington": [11, 144, 201, 227, 263, 271], "fetch_species_distribut": [11, 271, 1002], "bunch": [11, 338, 339, 340, 428, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 471, 474, 531, 532, 533, 534, 596, 597, 598, 824, 825, 873, 874, 875, 876, 910, 913, 977, 987, 998, 1000, 1003, 1005, 1009], "ll": [11, 52, 109, 233, 271, 345, 357, 496, 505, 945, 956, 969, 978], "otherwis": [11, 53, 59, 103, 146, 149, 162, 183, 189, 271, 311, 315, 328, 334, 343, 347, 349, 351, 359, 364, 373, 375, 377, 381, 383, 398, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 415, 417, 418, 428, 429, 431, 433, 434, 435, 436, 437, 438, 439, 440, 446, 447, 448, 449, 460, 490, 491, 497, 498, 499, 500, 502, 504, 505, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 545, 546, 552, 554, 555, 558, 561, 566, 574, 575, 578, 595, 596, 597, 599, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 649, 650, 654, 656, 660, 661, 662, 664, 666, 667, 671, 673, 677, 678, 687, 689, 690, 691, 692, 693, 701, 704, 715, 717, 718, 719, 729, 737, 741, 744, 745, 746, 747, 748, 750, 751, 752, 755, 756, 757, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 776, 780, 781, 784, 789, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 820, 822, 823, 825, 828, 829, 830, 831, 832, 836, 837, 844, 845, 846, 847, 850, 851, 852, 854, 855, 856, 860, 861, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 878, 880, 886, 888, 901, 902, 912, 914, 937, 939, 948, 949, 950, 953, 956, 957, 959, 960, 963, 965, 967, 968, 972, 977, 978, 995, 1001, 1002, 1003, 1006, 1009], "improvis": [11, 271], "mpl_toolkit": [11, 42, 64, 83, 93, 154, 178, 201, 203, 271], "except": [11, 16, 41, 50, 90, 99, 107, 142, 189, 196, 208, 215, 246, 258, 271, 274, 275, 278, 280, 292, 338, 345, 347, 348, 349, 350, 357, 359, 364, 367, 370, 374, 377, 378, 380, 381, 383, 396, 424, 429, 432, 446, 447, 448, 473, 518, 520, 521, 522, 524, 526, 528, 529, 532, 534, 575, 591, 594, 599, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 624, 625, 626, 627, 628, 629, 631, 634, 636, 637, 642, 643, 651, 675, 741, 769, 798, 799, 805, 806, 808, 811, 816, 822, 823, 829, 843, 845, 863, 866, 868, 871, 874, 876, 884, 906, 937, 939, 949, 953, 968, 978, 986, 987, 994, 998, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1010], "importerror": [11, 16, 50, 90, 258, 271, 353], "construct_grid": [11, 271], "func": [11, 71, 106, 153, 161, 199, 271, 345, 374, 429, 663, 829, 963, 997, 999, 1001, 1002, 1010], "xgrid": [11, 271], "ygrid": [11, 271], "correspond": [11, 13, 14, 16, 20, 25, 30, 38, 50, 62, 73, 77, 89, 101, 104, 107, 108, 110, 117, 131, 134, 135, 138, 143, 146, 153, 170, 173, 181, 182, 185, 190, 199, 209, 214, 215, 222, 229, 237, 239, 241, 242, 247, 248, 271, 283, 289, 290, 291, 320, 323, 324, 328, 333, 339, 340, 341, 344, 345, 347, 349, 352, 353, 358, 359, 360, 370, 371, 373, 375, 376, 377, 378, 380, 381, 382, 383, 388, 394, 401, 403, 405, 409, 412, 415, 417, 423, 425, 427, 428, 436, 446, 447, 448, 454, 455, 456, 457, 458, 459, 460, 498, 505, 508, 509, 510, 513, 514, 516, 519, 521, 523, 524, 525, 528, 546, 548, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 574, 575, 581, 594, 596, 597, 599, 607, 608, 609, 610, 611, 612, 616, 622, 623, 624, 625, 626, 632, 633, 635, 636, 637, 638, 639, 640, 642, 644, 645, 646, 647, 651, 654, 655, 656, 658, 667, 674, 677, 687, 688, 697, 701, 705, 715, 717, 737, 741, 745, 751, 752, 757, 759, 760, 761, 762, 765, 766, 768, 776, 784, 786, 794, 797, 800, 801, 802, 803, 804, 805, 806, 810, 811, 812, 814, 822, 823, 832, 835, 836, 838, 839, 842, 846, 854, 865, 866, 867, 870, 873, 874, 875, 876, 890, 896, 910, 913, 928, 942, 943, 945, 946, 947, 949, 950, 952, 953, 954, 956, 957, 958, 959, 960, 963, 964, 967, 968, 971, 978, 984, 987, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "coordin": [11, 12, 14, 51, 92, 120, 141, 166, 201, 239, 271, 332, 340, 378, 383, 407, 411, 412, 413, 425, 435, 436, 442, 495, 501, 502, 503, 504, 506, 507, 509, 510, 511, 512, 514, 578, 610, 611, 615, 616, 617, 618, 619, 620, 622, 624, 625, 626, 627, 645, 646, 647, 648, 652, 653, 654, 657, 658, 670, 727, 732, 865, 949, 950, 968, 985, 993, 996, 997, 998, 1002, 1004, 1006, 1007, 1008], "corner": [11, 14, 25, 50, 152, 235, 239, 247, 248, 271, 294, 340, 345, 462, 877, 879, 953, 1007], "cell": [11, 12, 20, 25, 30, 67, 68, 106, 108, 109, 117, 118, 121, 124, 132, 135, 142, 153, 154, 155, 162, 209, 210, 211, 215, 219, 220, 221, 222, 229, 236, 238, 239, 245, 250, 271, 276, 284, 288, 289, 291, 292, 294, 298, 327, 342, 350, 656, 953, 954, 999, 1007], "xmin": [11, 73, 171, 173, 190, 191, 271], "x_left_lower_corn": [11, 271, 340, 462], "grid_siz": [11, 58, 271, 340, 462], "xmax": [11, 73, 171, 173, 190, 191, 271], "nx": [11, 271, 340, 462], "ymin": [11, 73, 168, 170, 173, 174, 182, 190, 238, 271], "y_left_lower_corn": [11, 271, 340, 462], "ny": [11, 13, 237, 271, 340, 342, 462, 943, 965], "create_species_bunch": 11, "species_nam": [11, 271], "record": [11, 88, 105, 155, 215, 284, 321, 332, 345, 373, 375, 414, 421, 462, 584, 607, 656, 734, 737, 741, 742, 743, 744, 788, 811, 1006, 1007], "join": [11, 12, 19, 52, 148, 199, 238, 280, 340, 360, 427, 976, 987, 993, 1001], "ascii": [11, 271, 381, 451, 552, 553, 555], "pt": [11, 340, 382, 841, 963], "desir": [11, 23, 103, 135, 149, 181, 183, 278, 282, 338, 345, 347, 349, 353, 367, 370, 373, 376, 377, 378, 382, 467, 502, 504, 508, 511, 531, 557, 566, 567, 628, 634, 649, 650, 663, 672, 699, 805, 806, 810, 825, 830, 832, 835, 836, 838, 839, 841, 842, 846, 849, 851, 853, 854, 889, 922, 945, 947, 950, 956, 963, 967, 968, 969, 978, 993, 1001, 1002, 1003, 1006], "pts_": 11, "ix": [11, 247, 314], "searchsort": 11, "dd": [11, 12, 119, 271, 462], "ii": [11, 88, 154, 188, 233, 342, 381, 546, 547, 553, 602, 630, 631, 828, 837, 949, 963, 971], "lat": [11, 271, 462, 727], "cov_": [11, 77], "plot_species_distribut": 11, "bradypus_variegatus_0": 11, "microryzomys_minutus_0": 11, "meshgrid": [11, 16, 25, 39, 55, 75, 110, 119, 138, 139, 140, 141, 143, 154, 192, 193, 194, 195, 206, 208, 228, 264, 271, 273, 280, 281, 301, 306, 307, 312, 313, 316, 317, 595], "bv_bunch": 11, "mm_bunch": 11, "background_point": 11, "c_": [11, 16, 24, 25, 26, 55, 75, 88, 110, 113, 118, 119, 128, 139, 179, 194, 197, 208, 264, 281, 283, 301, 307, 313, 316, 317, 373, 623, 678, 679, 682, 953, 982, 985, 986], "randint": [11, 34, 76, 85, 113, 149, 155, 204, 211, 215, 217, 250, 289, 294, 347, 350, 358, 364, 766, 783, 800, 801, 802, 804, 942, 943], "land": [11, 271, 360, 380], "water": 11, "land_refer": [11, 271], "standard": [11, 12, 13, 20, 25, 30, 32, 52, 58, 66, 67, 69, 75, 76, 80, 88, 101, 104, 106, 107, 108, 109, 110, 117, 121, 135, 137, 142, 144, 146, 153, 160, 166, 170, 179, 181, 190, 201, 202, 203, 213, 218, 229, 233, 236, 237, 238, 239, 241, 278, 283, 305, 319, 332, 333, 337, 338, 339, 341, 342, 343, 345, 347, 348, 350, 351, 354, 357, 359, 363, 367, 369, 373, 375, 376, 377, 381, 383, 410, 432, 436, 452, 460, 465, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 486, 488, 489, 494, 496, 499, 505, 516, 554, 558, 575, 598, 608, 609, 636, 637, 638, 639, 640, 642, 651, 653, 657, 751, 768, 783, 784, 802, 805, 806, 807, 808, 809, 811, 813, 814, 815, 816, 817, 818, 819, 829, 834, 835, 838, 841, 842, 843, 845, 853, 854, 855, 856, 863, 865, 866, 885, 942, 945, 949, 950, 953, 955, 956, 957, 959, 967, 968, 973, 977, 978, 983, 985, 986, 987, 989, 999, 1000, 1001, 1002, 1004, 1005, 1006], "cov_train": 11, "train_cover_std": 11, "cyl": [11, 271], "llcrnrlat": [11, 271], "urcrnrlat": [11, 271], "llcrnrlon": [11, 271], "urcrnrlon": [11, 271], "drawcoastlin": [11, 271], "drawcountri": [11, 271], "9998": [11, 271], "solid": [11, 16, 29, 31, 113, 140, 193, 194, 208, 218, 271, 280, 977], "z": [11, 16, 55, 110, 128, 139, 141, 154, 191, 193, 194, 201, 203, 208, 213, 228, 264, 271, 273, 280, 283, 301, 307, 312, 313, 317, 342, 370, 378, 380, 517, 518, 549, 603, 628, 635, 649, 650, 653, 657, 663, 687, 748, 845, 949, 950, 957, 958, 986, 1008], "float64": [11, 14, 45, 50, 67, 113, 115, 116, 153, 154, 249, 291, 292, 333, 339, 345, 347, 359, 381, 435, 436, 442, 460, 461, 472, 473, 506, 512, 545, 546, 553, 555, 605, 622, 637, 639, 663, 701, 830, 838, 839, 867, 868, 870, 871, 874, 876, 883, 885, 924, 927, 929, 930, 931, 968, 978, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011], "idx": [11, 16, 19, 42, 52, 96, 103, 107, 110, 122, 146, 154, 156, 165, 173, 180, 181, 190, 202, 324, 374, 377], "9999": [11, 199, 271, 299, 462, 591, 1001], "coverages_land": 11, "contourf": [11, 16, 110, 195, 213, 264, 271, 273, 280, 281, 301, 306, 312, 317, 595, 596], "pts_train": 11, "pts_test": 11, "auc": [11, 24, 135, 181, 199, 218, 235, 238, 242, 245, 247, 248, 294, 371, 666, 672, 751, 953, 998, 1001, 1005], "pred_background": 11, "pred_test": 11, "cov_test": 11, "r_": [11, 96, 194, 195, 225, 245, 264, 265, 306, 312, 317, 373, 671, 953, 969], "fpr": [11, 209, 218, 235, 247, 248, 352, 556, 560, 662, 666, 670, 690, 752, 953, 990, 993, 1009], "tpr": [11, 209, 218, 235, 247, 248, 352, 666, 670, 752, 953, 990, 993, 1009], "threshold": [11, 24, 39, 62, 90, 96, 135, 150, 154, 156, 176, 209, 211, 235, 236, 237, 245, 257, 293, 294, 295, 324, 327, 359, 373, 378, 380, 382, 405, 406, 409, 410, 433, 464, 472, 473, 495, 501, 506, 512, 513, 514, 527, 552, 555, 557, 561, 566, 567, 608, 631, 635, 640, 642, 656, 662, 664, 666, 667, 670, 671, 684, 689, 690, 702, 703, 719, 745, 751, 752, 757, 760, 761, 781, 800, 811, 812, 828, 830, 832, 848, 860, 861, 862, 870, 877, 879, 927, 949, 953, 956, 957, 959, 963, 966, 968, 969, 973, 974, 993, 997, 998, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1009, 1010, 1011], "roc_curv": [11, 209, 235, 247, 666, 670, 690, 745, 751, 953, 993, 994, 995, 998, 999, 1001, 1006, 1009, 1011], "roc_auc": [11, 135, 238, 242, 247, 248, 352, 598, 666, 696, 953, 990], "ntime": [11, 249], "436": [11, 212, 320, 974], "plot_species_distribution_model": [11, 462, 974], "multi": [11, 29, 84, 100, 102, 119, 122, 124, 128, 139, 150, 159, 165, 167, 168, 170, 173, 180, 188, 197, 200, 203, 207, 208, 216, 219, 231, 235, 247, 257, 272, 279, 280, 281, 287, 292, 301, 303, 312, 317, 319, 322, 323, 324, 325, 327, 333, 340, 342, 347, 348, 354, 359, 363, 373, 380, 381, 383, 390, 401, 416, 426, 433, 438, 459, 460, 468, 469, 474, 478, 479, 483, 484, 486, 505, 513, 514, 515, 517, 519, 521, 522, 523, 525, 528, 529, 531, 533, 574, 595, 597, 607, 610, 611, 616, 617, 621, 622, 624, 625, 626, 627, 630, 632, 636, 637, 638, 639, 640, 645, 648, 654, 667, 677, 684, 697, 703, 705, 746, 762, 776, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 812, 813, 815, 821, 822, 823, 826, 832, 845, 849, 860, 861, 865, 867, 870, 873, 874, 875, 877, 878, 879, 885, 888, 891, 942, 954, 956, 960, 963, 967, 972, 973, 974, 975, 978, 984, 988, 989, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1006, 1007, 1009, 1010], "iri": [11, 17, 28, 29, 31, 38, 42, 70, 81, 86, 89, 91, 97, 100, 101, 102, 103, 105, 119, 122, 128, 131, 136, 138, 141, 145, 150, 158, 159, 164, 173, 174, 178, 213, 216, 222, 226, 232, 243, 244, 247, 248, 253, 261, 267, 269, 273, 274, 280, 289, 295, 300, 302, 303, 305, 307, 309, 310, 311, 322, 323, 325, 326, 327, 338, 339, 358, 373, 374, 377, 378, 380, 411, 460, 468, 505, 513, 517, 521, 528, 574, 586, 595, 640, 762, 776, 860, 861, 862, 865, 870, 873, 877, 878, 879, 942, 943, 947, 952, 953, 956, 960, 963, 966, 967, 968, 969, 974, 978, 985, 986, 989, 1006], "emploi": [12, 137, 214, 375, 381, 414, 442, 546, 553, 977, 986, 999], "techniqu": [12, 18, 66, 68, 89, 97, 102, 112, 127, 134, 135, 149, 150, 152, 189, 203, 205, 243, 255, 262, 290, 297, 311, 323, 334, 342, 357, 359, 371, 372, 373, 377, 378, 379, 380, 381, 382, 411, 412, 413, 414, 498, 518, 641, 653, 657, 658, 689, 719, 945, 949, 950, 952, 953, 956, 959, 961, 965, 967, 969, 973, 977, 981, 986, 987, 1006], "histor": [12, 181, 973], "quot": [12, 15, 66, 239, 319, 320, 333, 339, 340, 343, 349, 363, 369, 372, 452, 453, 460, 953, 965, 968, 987, 1008], "quantiti": [12, 111, 238, 245, 289, 332, 359, 373, 380, 685, 686, 687, 748, 821, 942, 944, 947, 949, 998], "daili": [12, 977], "price": [12, 71, 111, 112, 121, 218, 284, 943, 949, 977, 983], "link": [12, 17, 101, 153, 154, 160, 181, 185, 199, 224, 241, 268, 323, 333, 343, 344, 345, 346, 347, 349, 353, 359, 371, 373, 375, 378, 383, 525, 526, 574, 612, 633, 644, 652, 669, 884, 886, 949, 956, 969, 970, 972, 976, 981, 985, 987, 991, 993, 996, 997, 1000, 1001, 1004, 1010], "fluctuat": [12, 57, 181, 245, 1001], "normalesup": [12, 30, 43, 63, 213], "2003": [12, 370, 373, 378, 381, 415, 416, 426, 477, 479, 653, 657, 800, 802, 949, 950, 955, 965, 1001], "2008": [12, 375, 377, 378, 442, 498, 527, 554, 609, 628, 649, 650, 656, 680, 689, 719, 795, 800, 804, 821, 947, 950, 951, 953, 954, 955, 958, 959, 968], "calm": 12, "ago": [12, 973], "tech": [12, 342, 803], "firm": [12, 373], "crash": [12, 345, 432, 855, 856, 863, 963, 997, 1001, 1009, 1010], "nasdaq": 12, "alphavantag": 12, "symbol_dict": 12, "tot": 12, "xom": 12, "exxon": 12, "cvx": 12, "chevron": 12, "cop": 12, "conocophillip": 12, "vlo": 12, "valero": 12, "energi": [12, 353, 821, 958, 985], "msft": 12, "ibm": [12, 19, 300, 321, 340], "twx": 12, "warner": [12, 1008, 1009], "cmcsa": 12, "comcast": 12, "cvc": 12, "cablevis": 12, "yhoo": 12, "yahoo": 12, "dell": 12, "hpq": 12, "hp": [12, 987], "amzn": 12, "amazon": 12, "tm": [12, 956], "toyota": 12, "caj": 12, "canon": [12, 359, 371, 380, 446, 447, 449, 731, 973, 975, 989], "sne": [12, 150, 200, 201, 202, 203, 205, 258, 478, 489, 656, 974, 988, 989], "soni": [12, 1003, 1005], "ford": 12, "hmc": 12, "honda": 12, "nav": 12, "navistar": 12, "noc": 12, "northrop": 12, "grumman": 12, "ba": [12, 822, 823, 957], "boe": 12, "ko": [12, 25, 138], "coca": 12, "cola": 12, "mmm": 12, "3m": 12, "mcd": [12, 75, 76, 375, 433, 438], "mcdonald": 12, "pep": [12, 353, 993], "pepsi": 12, "kellogg": 12, "un": [12, 345, 371, 381, 385, 497, 553, 758, 828, 837, 848, 852, 1002], "unilev": 12, "mar": 12, "marriott": 12, "pg": [12, 351, 613, 949, 998], "procter": 12, "gambl": 12, "colgat": [12, 17], "palmol": 12, "ge": [12, 944, 955, 1005], "electr": [12, 342, 373], "wfc": 12, "fargo": 12, "jpm": 12, "jpmorgan": [12, 977], "chase": [12, 993], "aig": 12, "axp": 12, "bac": 12, "bank": [12, 19, 977], "goldman": 12, "sach": 12, "aapl": 12, "appl": [12, 332, 343, 357, 954], "sap": 12, "csco": 12, "cisco": 12, "txn": 12, "texa": [12, 66], "instrument": [12, 66, 88, 152], "xrx": 12, "xerox": 12, "wmt": 12, "wal": 12, "mart": [12, 1003], "hd": 12, "depot": 12, "gsk": 12, "glaxosmithklin": 12, "pfe": 12, "pfizer": 12, "sny": 12, "sanofi": 12, "aventi": 12, "nv": 12, "novarti": 12, "kmb": 12, "kimberli": 12, "clark": 12, "ryder": 12, "gd": [12, 124], "dynam": [12, 13, 154, 519, 520, 521, 522, 527, 528, 529, 530, 543, 544, 640, 641, 642, 969, 977, 999, 1005, 1010], "rtn": 12, "raytheon": 12, "cat": [12, 67, 154, 155, 218, 290, 291, 292, 293, 294, 340, 381, 546, 676, 682, 717, 746, 846, 953, 963, 1002, 1003, 1005], "caterpillar": 12, "dupont": 12, "nemour": 12, "symbol": [12, 321, 333, 347, 351, 375, 381, 463, 546, 552, 553, 555, 877, 879, 972], "fetch": [12, 17, 121, 153, 199, 338, 339, 340, 345, 349, 350, 353, 372, 378, 460, 519, 520, 521, 522, 527, 528, 529, 530, 552, 553, 555, 1001, 1009], "histori": [12, 523, 524, 993], "stderr": [12, 794], "url": [12, 17, 135, 339, 342, 347, 349], "githubusercont": 12, "master": [12, 16, 258, 292, 345, 349, 977], "financi": [12, 373, 380, 949], "csv": [12, 339, 342, 350, 1001, 1006], "read_csv": [12, 350, 460, 1008], "close_pric": 12, "vstack": [12, 25, 54, 62, 140, 141, 163, 224, 228, 258, 271, 312, 595, 954, 1001], "q": [12, 67, 79, 114, 181, 290, 370, 373, 378, 901, 949, 968], "open_pric": 12, "carri": [12, 29, 101, 149, 238, 241, 246, 274, 280, 321, 360, 367, 381, 521, 522, 523, 524, 528, 529, 530, 873, 874, 875, 876, 977, 986], "invers": [12, 51, 72, 73, 74, 101, 150, 229, 245, 247, 253, 261, 307, 320, 321, 337, 359, 372, 374, 376, 377, 378, 381, 385, 409, 429, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 491, 497, 498, 499, 503, 505, 507, 521, 525, 528, 553, 554, 555, 592, 608, 609, 622, 623, 630, 632, 638, 639, 640, 641, 642, 644, 687, 706, 715, 760, 761, 807, 808, 815, 816, 822, 823, 825, 829, 832, 838, 839, 841, 857, 858, 865, 866, 867, 870, 871, 873, 875, 891, 947, 949, 953, 956, 957, 963, 967, 968, 974, 985, 987, 988, 989, 993, 996, 1001, 1004, 1005, 1007, 1011], "correl": [12, 26, 77, 79, 80, 97, 108, 109, 118, 131, 134, 142, 150, 151, 152, 154, 155, 165, 170, 176, 199, 238, 244, 257, 284, 288, 289, 299, 338, 341, 342, 350, 359, 362, 370, 375, 377, 382, 414, 421, 446, 447, 449, 457, 458, 464, 488, 528, 570, 573, 591, 598, 599, 600, 646, 647, 706, 720, 741, 742, 743, 791, 805, 806, 842, 843, 845, 854, 944, 949, 954, 960, 963, 967, 969, 973, 974, 975, 989, 993, 994, 995, 1006, 1007], "condition": [12, 26, 181, 371, 375, 721, 947], "connect": [12, 36, 41, 44, 48, 51, 59, 63, 64, 343, 345, 354, 359, 375, 405, 409, 416, 426, 427, 549, 550, 659, 807, 808, 809, 811, 813, 815, 816, 817, 818, 819, 951, 956, 958, 966, 976, 997, 1006, 1010], "edge_model": 12, "graphicallassocv": [12, 77, 364, 375, 435, 437, 438, 439, 440, 442, 1001, 1005, 1007, 1009], "rather": [12, 50, 77, 101, 104, 148, 153, 181, 182, 195, 218, 282, 283, 319, 320, 328, 333, 341, 343, 345, 347, 350, 351, 353, 357, 358, 359, 360, 373, 377, 378, 380, 381, 383, 412, 425, 427, 529, 545, 552, 553, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 593, 610, 611, 616, 617, 624, 625, 626, 627, 744, 776, 796, 798, 799, 828, 865, 866, 877, 902, 947, 949, 950, 953, 955, 956, 960, 973, 982, 985, 993, 994, 995, 996, 1000, 1001, 1002, 1003, 1008, 1009], "former": [12, 321, 380, 381, 529, 764, 771, 780, 955, 993, 999, 1002], "recoveri": [12, 77, 165, 180, 375, 382], "03162278": 12, "05994843": 12, "11364637": 12, "21544347": 12, "40842387": 12, "77426368": 12, "46779927": 12, "7825594": 12, "27499706": 12, "rerun": [12, 25, 39, 67, 68, 106, 108, 109, 117, 118, 121, 124, 132, 142, 153, 154, 155, 162, 209, 210, 211, 215, 219, 220, 221, 222, 229, 236, 238, 239, 245, 250, 276, 284, 288, 289, 291, 292, 294, 298, 327, 353], "trust": [12, 25, 67, 68, 76, 101, 106, 108, 109, 117, 118, 121, 124, 132, 142, 153, 154, 155, 156, 162, 209, 210, 211, 215, 219, 220, 221, 222, 229, 236, 238, 239, 245, 250, 276, 284, 288, 289, 291, 292, 294, 298, 327, 349, 360, 367, 371, 982, 1007], "unabl": [12, 25, 67, 68, 106, 108, 109, 117, 118, 121, 124, 132, 142, 152, 153, 154, 155, 162, 165, 181, 209, 210, 211, 215, 219, 220, 221, 222, 229, 236, 238, 239, 245, 250, 276, 284, 288, 289, 291, 292, 294, 298, 327, 334, 845, 963, 1002], "render": [12, 25, 50, 67, 68, 106, 108, 109, 117, 118, 121, 124, 132, 142, 153, 154, 155, 162, 176, 185, 209, 210, 211, 215, 219, 220, 221, 222, 229, 236, 238, 239, 245, 250, 276, 284, 288, 289, 291, 292, 294, 298, 327, 345, 347, 349, 350, 351, 359, 515, 553, 595, 664, 666, 842, 854, 877, 879, 952, 969, 1006, 1010], "nbviewer": [12, 25, 67, 68, 106, 108, 109, 117, 118, 121, 124, 132, 142, 153, 154, 155, 162, 209, 210, 211, 215, 219, 220, 221, 222, 229, 236, 238, 239, 245, 250, 276, 284, 288, 289, 291, 292, 294, 298, 327], "nbsp": [12, 13, 25, 67, 68, 106, 108, 109, 114, 117, 118, 121, 124, 132, 142, 153, 154, 155, 162, 170, 209, 210, 211, 215, 219, 220, 221, 222, 229, 236, 238, 239, 245, 250, 276, 284, 288, 289, 291, 292, 294, 298, 327], "graphicallassocvifittedgraphicallassocv": 12, "group": [12, 34, 37, 52, 55, 57, 123, 154, 156, 181, 202, 215, 230, 233, 284, 294, 298, 320, 327, 340, 350, 359, 360, 364, 373, 379, 380, 381, 398, 410, 459, 552, 553, 555, 558, 682, 751, 762, 763, 764, 767, 768, 769, 770, 771, 772, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 786, 787, 788, 789, 790, 792, 838, 839, 875, 876, 949, 950, 952, 953, 954, 963, 969, 970, 972, 978, 981, 982, 999, 1000, 1001, 1002, 1005, 1006, 1007, 1009, 1010, 1011], "amongst": [12, 969], "indic": [12, 19, 20, 24, 25, 26, 45, 56, 57, 63, 71, 80, 83, 87, 101, 106, 112, 142, 145, 149, 152, 154, 178, 203, 212, 215, 232, 240, 241, 244, 245, 258, 271, 296, 297, 300, 319, 320, 321, 327, 333, 340, 345, 346, 347, 349, 353, 354, 357, 359, 369, 370, 371, 373, 375, 377, 378, 380, 381, 384, 388, 401, 404, 408, 414, 415, 416, 417, 419, 420, 421, 424, 428, 431, 436, 451, 472, 473, 475, 476, 477, 487, 496, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 545, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 571, 572, 584, 591, 592, 593, 594, 596, 597, 603, 611, 614, 615, 617, 618, 619, 625, 627, 629, 637, 639, 646, 647, 654, 656, 658, 660, 667, 671, 676, 677, 682, 683, 684, 688, 691, 692, 693, 694, 697, 701, 702, 703, 704, 717, 734, 741, 742, 743, 744, 746, 747, 748, 750, 751, 755, 756, 757, 759, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 796, 798, 799, 805, 806, 807, 808, 809, 811, 813, 815, 816, 817, 829, 832, 836, 838, 846, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 879, 881, 885, 886, 891, 906, 916, 917, 928, 929, 930, 931, 932, 933, 934, 943, 948, 949, 950, 953, 954, 955, 956, 957, 960, 963, 964, 967, 968, 973, 978, 982, 985, 987, 993, 994, 995, 996, 997, 998, 1001, 1003, 1004, 1006, 1008, 1009, 1010], "reflect": [12, 37, 43, 44, 75, 85, 88, 111, 154, 155, 181, 199, 247, 262, 320, 341, 344, 349, 359, 362, 370, 414, 420, 950, 953, 959, 961, 986, 994, 1002], "properti": [12, 24, 144, 145, 183, 198, 225, 260, 283, 327, 332, 338, 345, 347, 363, 370, 371, 373, 375, 378, 380, 382, 383, 388, 406, 409, 415, 416, 417, 428, 429, 506, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 555, 557, 558, 561, 574, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 596, 610, 616, 619, 624, 626, 638, 639, 663, 668, 669, 672, 762, 765, 766, 776, 793, 794, 824, 825, 838, 839, 840, 846, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 942, 945, 948, 949, 950, 953, 954, 956, 959, 963, 966, 968, 969, 970, 973, 978, 998, 1002, 1003, 1006, 1007, 1010], "impact": [12, 13, 24, 33, 34, 39, 40, 61, 71, 101, 131, 150, 152, 153, 154, 161, 183, 185, 199, 218, 232, 255, 261, 283, 292, 315, 320, 328, 332, 333, 338, 357, 360, 371, 373, 378, 411, 413, 500, 504, 511, 554, 630, 631, 632, 636, 638, 640, 641, 642, 656, 757, 762, 765, 766, 776, 788, 805, 806, 807, 842, 854, 865, 866, 888, 902, 924, 927, 942, 952, 960, 968, 974, 1000, 1003, 1006], "affinity_propag": [12, 41], "covariance_": [12, 32, 75, 77, 433, 434, 435, 436, 437, 438, 439, 440, 513, 514, 947, 1000], "n_label": [12, 85, 216, 359, 451, 487, 677, 684, 689, 702, 703, 717, 719, 755, 756, 782, 953, 999, 1001], "lai": [12, 283, 311, 959], "canva": [12, 16], "manifold": [12, 36, 49, 64, 106, 204, 205, 206, 212, 258, 267, 268, 287, 291, 292, 298, 338, 359, 373, 378, 380, 466, 489, 494, 508, 513, 530, 814, 826, 835, 858, 888, 956, 974, 988, 989, 993, 994, 996, 997, 998, 999, 1000, 1010], "dens": [12, 52, 150, 159, 165, 175, 291, 292, 300, 332, 354, 359, 373, 378, 380, 382, 407, 410, 411, 413, 428, 431, 460, 487, 488, 491, 498, 499, 508, 530, 549, 550, 571, 572, 593, 594, 616, 621, 622, 623, 630, 631, 632, 636, 637, 640, 641, 642, 651, 652, 653, 656, 657, 723, 724, 730, 742, 755, 822, 823, 830, 837, 838, 840, 842, 843, 844, 845, 854, 855, 856, 857, 858, 865, 866, 867, 868, 870, 871, 903, 924, 927, 943, 946, 949, 950, 953, 954, 956, 959, 963, 965, 966, 967, 968, 969, 974, 993, 995, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1010], "eigen_solv": [12, 41, 43, 63, 201, 202, 378, 416, 426, 499, 652, 653, 655, 657, 659, 950, 994, 1003, 1006, 1007, 1008], "arpack": [12, 19, 41, 43, 63, 66, 202, 294, 378, 415, 416, 417, 426, 499, 505, 508, 652, 653, 655, 657, 659, 950, 999, 1000, 1005, 1009, 1010], "don": [12, 51, 66, 153, 202, 215, 216, 238, 258, 299, 304, 308, 319, 320, 332, 339, 345, 347, 349, 351, 353, 358, 363, 364, 374, 381, 610, 616, 793, 873, 874, 875, 876, 917, 942, 949, 952, 954, 957, 959, 967, 987, 997, 1002, 1009, 1010, 1011], "control": [12, 16, 32, 58, 91, 92, 107, 126, 142, 144, 165, 182, 185, 189, 211, 212, 239, 241, 255, 260, 276, 288, 290, 311, 323, 325, 326, 332, 333, 338, 341, 345, 347, 350, 353, 357, 359, 363, 367, 372, 373, 376, 377, 378, 379, 382, 383, 398, 404, 413, 418, 435, 436, 442, 495, 500, 501, 502, 503, 504, 507, 509, 510, 511, 512, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 557, 558, 560, 578, 583, 589, 591, 596, 598, 603, 605, 606, 610, 611, 613, 614, 615, 616, 618, 619, 620, 636, 638, 640, 641, 646, 647, 651, 656, 665, 673, 760, 761, 762, 764, 765, 766, 767, 768, 776, 777, 778, 779, 780, 781, 782, 784, 786, 787, 788, 789, 791, 792, 795, 796, 799, 822, 823, 844, 846, 857, 858, 865, 866, 867, 868, 870, 871, 873, 874, 875, 876, 879, 919, 921, 940, 942, 949, 950, 952, 953, 954, 956, 959, 960, 963, 965, 967, 968, 969, 972, 973, 975, 985, 989, 993, 995, 997, 998, 1001, 1002, 1003, 1004, 1005, 1006, 1007], "neighbor": [12, 29, 36, 41, 44, 57, 63, 68, 117, 119, 122, 127, 148, 149, 202, 203, 205, 206, 208, 217, 218, 232, 241, 253, 262, 263, 264, 265, 267, 268, 269, 271, 275, 289, 291, 292, 319, 337, 342, 354, 357, 359, 363, 373, 379, 380, 381, 384, 387, 397, 405, 408, 409, 412, 414, 416, 421, 422, 425, 427, 460, 466, 468, 527, 534, 566, 571, 572, 591, 592, 595, 652, 653, 654, 655, 656, 657, 659, 660, 744, 762, 791, 825, 826, 845, 861, 869, 927, 954, 959, 973, 974, 975, 981, 986, 988, 989, 993, 995, 996, 997, 998, 999, 1000], "node": [12, 38, 111, 115, 165, 287, 293, 294, 323, 327, 353, 354, 373, 375, 378, 380, 405, 406, 409, 427, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 614, 618, 620, 646, 647, 656, 805, 806, 873, 874, 875, 876, 877, 879, 907, 921, 956, 958, 959, 960, 969, 996, 997, 998, 999, 1000, 1002, 1005, 1006, 1007, 1008, 1010], "plane": [12, 135, 193, 213, 264, 309, 311, 312, 317, 342, 416, 426, 947, 949, 968, 985], "node_position_model": 12, "locallylinearembed": [12, 201, 202, 203, 291, 652, 654, 656, 950, 956, 998, 999, 1007, 1008, 1009], "n_neighbor": [12, 41, 59, 64, 122, 148, 201, 202, 203, 205, 208, 218, 258, 260, 261, 264, 265, 266, 267, 270, 283, 287, 289, 319, 380, 416, 566, 571, 572, 592, 652, 653, 655, 657, 659, 660, 807, 808, 809, 811, 813, 814, 818, 860, 861, 943, 950, 956, 959, 966, 1000, 1007, 1009, 1010], "output": [12, 15, 16, 24, 26, 34, 50, 56, 90, 100, 101, 102, 104, 110, 121, 124, 127, 128, 137, 145, 148, 149, 150, 153, 177, 207, 215, 219, 222, 227, 232, 236, 238, 241, 245, 247, 248, 255, 258, 279, 282, 284, 285, 287, 290, 291, 293, 320, 321, 322, 323, 325, 327, 338, 339, 340, 342, 343, 345, 347, 351, 353, 357, 358, 359, 371, 372, 373, 374, 376, 377, 380, 381, 382, 383, 389, 394, 397, 401, 405, 406, 407, 409, 410, 411, 413, 414, 416, 423, 424, 426, 427, 428, 429, 430, 431, 432, 446, 447, 448, 449, 452, 455, 456, 457, 458, 459, 460, 461, 467, 469, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 512, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 531, 532, 533, 534, 545, 546, 547, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 575, 591, 592, 593, 594, 595, 596, 597, 599, 602, 603, 604, 605, 606, 610, 611, 614, 616, 617, 618, 621, 622, 624, 625, 626, 627, 630, 631, 632, 635, 637, 638, 640, 642, 643, 645, 646, 647, 648, 652, 653, 654, 656, 658, 660, 663, 664, 677, 678, 685, 686, 687, 689, 691, 698, 708, 709, 711, 713, 714, 715, 716, 717, 719, 724, 730, 735, 748, 751, 753, 754, 760, 761, 764, 765, 766, 767, 768, 774, 776, 777, 778, 779, 780, 781, 782, 786, 789, 790, 791, 793, 794, 795, 796, 797, 798, 799, 808, 809, 810, 814, 815, 817, 821, 822, 823, 824, 825, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 853, 854, 857, 858, 862, 863, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 886, 888, 891, 902, 903, 909, 910, 912, 920, 940, 942, 943, 945, 947, 949, 950, 953, 954, 955, 956, 957, 960, 963, 968, 974, 975, 978, 979, 981, 989, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "edg": [12, 25, 43, 63, 90, 111, 204, 245, 353, 359, 370, 373, 375, 417, 525, 526, 549, 550, 552, 553, 555, 760, 802, 807, 808, 809, 811, 813, 815, 816, 817, 818, 819, 830, 878, 963, 966, 977, 999, 1001, 1004, 1007], "displai": [12, 13, 24, 26, 32, 34, 43, 45, 57, 67, 76, 77, 79, 80, 82, 87, 107, 117, 118, 121, 148, 150, 153, 154, 166, 168, 199, 207, 208, 218, 222, 228, 235, 239, 240, 245, 247, 248, 252, 268, 284, 288, 289, 306, 324, 332, 345, 347, 348, 352, 354, 363, 372, 374, 378, 381, 382, 387, 402, 428, 431, 432, 460, 505, 528, 594, 595, 596, 622, 651, 661, 662, 664, 665, 666, 677, 682, 745, 752, 762, 768, 776, 784, 791, 825, 826, 838, 840, 845, 863, 870, 877, 878, 879, 893, 919, 940, 953, 957, 972, 974, 989, 1002, 1004, 1005, 1007, 1008], "strength": [12, 121, 144, 181, 185, 239, 287, 332, 376, 380, 410, 531, 532, 607, 612, 613, 616, 622, 623, 633, 636, 637, 638, 639, 640, 642, 644, 651, 746, 822, 823, 865, 866, 870, 871, 942, 949, 956, 959, 967, 968], "plan": [12, 339, 343, 345, 346, 360, 963, 996], "fair": [12, 380, 654, 658, 794, 954, 977], "crucial": [12, 152, 185, 233, 332, 344, 345, 360, 373, 383, 968], "challeng": [12, 121, 137, 154, 160, 199, 208, 334, 340, 341, 373, 375, 426, 436, 953, 959, 977, 978], "overlap": [12, 13, 34, 52, 83, 115, 134, 204, 226, 320, 343, 370, 373, 377, 380, 381, 551, 755, 756, 763, 767, 769, 770, 771, 772, 780, 950, 963, 999], "heurist": [12, 15, 113, 218, 319, 333, 373, 382, 413, 416, 425, 426, 472, 473, 501, 503, 510, 640, 641, 642, 655, 659, 765, 766, 867, 868, 869, 870, 871, 890, 950, 951, 956, 967, 969, 977, 985, 993, 994, 998, 1002, 1005, 1006], "direct": [12, 79, 80, 87, 89, 95, 135, 187, 224, 230, 235, 267, 276, 283, 307, 312, 343, 345, 346, 349, 353, 360, 363, 373, 376, 378, 381, 382, 416, 426, 435, 436, 442, 498, 505, 513, 552, 553, 555, 566, 605, 652, 814, 947, 948, 949, 954, 956, 958, 973, 986, 993, 996], "nearest": [12, 14, 29, 30, 36, 37, 47, 48, 51, 55, 58, 63, 68, 73, 77, 82, 87, 90, 117, 127, 141, 149, 172, 193, 197, 203, 206, 217, 232, 241, 253, 262, 264, 267, 268, 275, 276, 283, 307, 312, 313, 317, 337, 342, 354, 357, 359, 373, 379, 380, 384, 387, 397, 408, 410, 412, 414, 416, 421, 425, 426, 460, 466, 468, 571, 572, 591, 592, 594, 595, 599, 652, 653, 655, 656, 660, 755, 756, 762, 791, 805, 806, 807, 808, 809, 811, 812, 813, 814, 815, 816, 817, 818, 819, 825, 826, 830, 845, 927, 950, 959, 968, 973, 974, 975, 981, 989, 993, 995, 996, 997, 998, 1000, 1002, 1003, 1005], "along": [12, 14, 53, 56, 63, 80, 108, 114, 168, 181, 213, 215, 242, 287, 320, 321, 328, 340, 345, 349, 351, 353, 354, 359, 363, 364, 367, 370, 378, 380, 381, 382, 385, 497, 514, 551, 575, 576, 594, 610, 611, 614, 615, 616, 617, 618, 619, 620, 624, 625, 626, 627, 640, 642, 645, 646, 647, 648, 649, 650, 742, 743, 755, 762, 776, 834, 835, 838, 839, 842, 843, 844, 845, 850, 851, 852, 854, 855, 856, 881, 904, 928, 934, 942, 949, 956, 963, 966, 977, 993, 998, 999, 1001, 1005, 1006], "linecollect": [12, 204, 211, 596], "facecolor": [12, 16, 25, 32, 42, 57, 87, 93, 103, 128, 145, 201, 216, 238, 265, 280, 305, 308, 311, 312, 314], "partial_correl": 12, "precision_": [12, 77, 433, 434, 435, 436, 437, 438, 439, 440], "sqrt": [12, 75, 76, 77, 90, 96, 105, 126, 156, 160, 162, 204, 206, 220, 224, 225, 226, 229, 230, 238, 312, 315, 373, 380, 381, 383, 427, 433, 434, 435, 436, 437, 438, 439, 440, 502, 504, 511, 521, 522, 523, 524, 528, 529, 583, 610, 611, 616, 617, 624, 625, 626, 627, 645, 648, 663, 694, 726, 727, 732, 845, 858, 873, 874, 875, 876, 945, 949, 950, 953, 955, 965, 1007], "diag": [12, 77, 145, 226, 229, 378, 383, 496, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 760, 761, 949, 1008], "newaxi": [12, 14, 19, 23, 39, 77, 96, 102, 138, 162, 171, 177, 182, 183, 184, 186, 187, 198, 211, 213, 252, 263, 270, 325, 326, 370, 500, 949], "ab": [12, 17, 37, 71, 91, 97, 103, 111, 121, 131, 135, 156, 168, 172, 192, 194, 197, 199, 204, 238, 278, 305, 317, 373, 502, 504, 511, 591, 709, 805, 806, 840, 953], "triu": 12, "nipy_spectr": [12, 36, 43, 44, 48, 49, 57, 58, 93], "start_idx": [12, 204], "end_idx": [12, 204], "sequenc": [12, 101, 110, 169, 204, 347, 359, 374, 377, 378, 380, 381, 467, 476, 525, 526, 533, 534, 545, 546, 552, 553, 555, 610, 762, 765, 773, 791, 825, 849, 905, 906, 916, 924, 927, 972, 993, 996, 998, 999], "line0": [12, 204], "linen": [12, 204], "x0": [12, 173, 190, 204, 278, 304, 359, 394, 428, 531, 532, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 591, 592, 593, 594, 828, 829, 830, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846], "y0": [12, 204], "x1": [12, 16, 79, 84, 103, 113, 140, 193, 204, 278, 304, 347, 359, 394, 428, 473, 531, 532, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 591, 592, 593, 594, 663, 828, 829, 830, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 986], "y1": [12, 84, 103, 204, 473, 680, 954, 955], "xm": [12, 204], "ym": [12, 204], "segment": [12, 14, 17, 21, 33, 44, 45, 150, 204, 211, 340, 353, 373, 381, 416, 426, 472, 473, 655, 821, 953, 972, 974, 977, 1001, 1003, 1005], "lc": [12, 204, 211], "zorder": [12, 55, 89, 118, 128, 138, 146, 171, 179, 202, 204, 211, 214, 224, 288, 294, 312], "hot_r": [12, 278], "norm": [12, 14, 15, 17, 28, 32, 37, 51, 90, 140, 143, 160, 165, 167, 172, 204, 224, 225, 226, 228, 230, 235, 239, 263, 278, 307, 320, 351, 354, 359, 373, 381, 382, 406, 407, 411, 423, 424, 428, 433, 434, 435, 436, 437, 438, 439, 440, 446, 447, 448, 453, 495, 498, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 553, 554, 555, 561, 607, 610, 611, 616, 617, 621, 622, 623, 624, 625, 626, 627, 628, 636, 638, 640, 642, 645, 648, 649, 650, 654, 656, 657, 658, 733, 802, 837, 852, 865, 867, 870, 935, 936, 946, 949, 951, 953, 963, 967, 996, 998, 1000, 1004], "set_arrai": [12, 204, 211], "set_linewidth": [12, 204, 211], "add_collect": [12, 204, 211], "index": [12, 13, 15, 17, 34, 35, 36, 37, 38, 46, 47, 55, 67, 68, 101, 106, 108, 132, 135, 142, 148, 152, 153, 154, 155, 156, 181, 185, 199, 219, 222, 225, 226, 230, 233, 236, 237, 238, 239, 241, 249, 250, 258, 278, 283, 284, 285, 291, 296, 297, 320, 321, 340, 342, 343, 345, 347, 349, 354, 357, 359, 370, 374, 377, 378, 380, 381, 388, 407, 411, 412, 413, 414, 415, 417, 418, 421, 423, 424, 428, 431, 467, 473, 521, 522, 523, 524, 528, 529, 530, 551, 552, 553, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 581, 596, 597, 604, 661, 668, 669, 676, 680, 682, 694, 701, 720, 742, 743, 749, 751, 757, 762, 763, 764, 765, 766, 767, 769, 770, 771, 772, 775, 776, 777, 778, 779, 780, 781, 782, 783, 791, 805, 806, 807, 808, 809, 811, 813, 815, 816, 817, 838, 873, 874, 875, 876, 906, 924, 927, 932, 933, 953, 955, 956, 957, 967, 969, 972, 985, 987, 993, 996, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "dx": [12, 14, 490, 663], "dy": [12, 663], "this_dx": 12, "argmin": [12, 113, 237, 347, 375, 495, 501, 509, 510, 649, 742, 743, 969], "this_di": 12, "horizontalalign": [12, 25, 29, 37, 41, 42, 59, 93, 208, 224, 273, 280], "verticalalign": [12, 25, 36, 37], "edgecolor": [12, 16, 23, 28, 29, 32, 39, 42, 53, 57, 64, 84, 85, 93, 103, 110, 117, 119, 120, 122, 123, 128, 130, 138, 139, 141, 145, 154, 164, 173, 183, 190, 193, 194, 195, 212, 213, 214, 216, 218, 224, 227, 238, 241, 252, 261, 264, 265, 266, 269, 273, 280, 281, 283, 301, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 317, 324, 325, 326, 595], "xlim": [12, 25, 41, 55, 59, 69, 73, 74, 75, 89, 103, 104, 105, 120, 126, 138, 139, 153, 160, 171, 173, 180, 187, 190, 195, 208, 216, 225, 230, 233, 247, 252, 264, 265, 306, 311, 312, 316, 326], "ptp": 12, "ylim": [12, 23, 25, 31, 34, 41, 55, 59, 73, 74, 75, 89, 103, 104, 111, 114, 120, 123, 138, 139, 153, 168, 170, 171, 173, 174, 175, 187, 190, 191, 195, 208, 216, 225, 230, 233, 237, 241, 247, 251, 252, 264, 265, 306, 311, 312, 316, 319, 326, 982], "03": [12, 49, 75, 87, 135, 142, 153, 162, 199, 212, 224, 230, 239, 297, 342, 381, 711, 762, 949, 953, 974], "896": [12, 19, 612, 974], "plot_stock_market": [12, 974], "handwritten": [12, 33, 42, 45, 49, 56, 58, 106, 150, 200, 201, 203, 205, 212, 227, 236, 267, 268, 275, 276, 296, 297, 320, 338, 373, 380, 411, 466, 505, 508, 513, 530, 652, 653, 654, 655, 656, 668, 669, 681, 700, 756, 758, 814, 826, 835, 845, 858, 950, 956, 974, 978, 989], "isomap": [12, 49, 106, 150, 200, 203, 205, 212, 267, 268, 287, 291, 380, 466, 508, 513, 530, 653, 654, 655, 656, 814, 826, 835, 858, 956, 974, 988, 989, 1001, 1003, 1006, 1007, 1008, 1009, 1010], "agglom": [12, 20, 33, 34, 39, 41, 44, 53, 57, 59, 63, 64, 82, 133, 150, 202, 204, 373, 405, 409, 466, 655, 741, 818, 974, 996], "pictur": [12, 17, 21, 33, 45, 63, 150, 212, 230, 340, 360, 373, 378, 381, 426, 457, 458, 485, 973, 974], "greek": [12, 17, 21, 33, 45, 63, 150, 373, 426, 974], "coin": [12, 14, 17, 21, 33, 36, 37, 38, 41, 45, 50, 51, 53, 59, 63, 64, 150, 373, 381, 405, 426, 965, 974, 986], "region": [12, 16, 17, 21, 24, 33, 44, 45, 46, 50, 53, 63, 122, 144, 150, 153, 181, 199, 208, 212, 213, 230, 281, 307, 315, 342, 352, 359, 373, 380, 383, 412, 414, 420, 426, 551, 950, 953, 956, 959, 963, 967, 969, 974, 986], "explor": [13, 34, 104, 105, 156, 205, 206, 218, 239, 240, 246, 247, 255, 285, 289, 307, 320, 328, 339, 342, 344, 351, 367, 373, 380, 436, 762, 765, 773, 846, 942, 949, 950, 952, 958, 960, 963, 977, 981, 987, 999], "demo": [13, 14, 18, 33, 34, 36, 37, 38, 41, 42, 43, 45, 50, 51, 53, 56, 58, 59, 61, 64, 117, 150, 156, 165, 187, 212, 227, 229, 239, 247, 283, 298, 319, 320, 347, 370, 373, 381, 404, 405, 408, 410, 411, 412, 414, 415, 417, 419, 422, 466, 475, 476, 477, 505, 668, 669, 681, 683, 700, 756, 758, 826, 845, 846, 974], "period": [13, 137, 142, 146, 349, 359, 360, 371, 383, 579, 783, 844, 1001, 1006, 1008], "summari": [13, 135, 291, 327, 328, 342, 357, 656, 677, 751, 878, 951, 954, 972, 987], "style": [13, 23, 25, 76, 114, 170, 189, 199, 242, 345, 352, 373, 381, 407, 411, 423, 664, 768, 784, 885, 886, 898, 993, 996, 1007], "background_gradi": 13, "set_table_attribut": 13, "inlin": [13, 192, 345, 346, 969], "set_capt": 13, "set_table_styl": 13, "selector": [13, 67, 131, 132, 218, 315, 353, 381, 382, 430, 545, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 995, 1003, 1005, 1009], "caption": [13, 66], "prop": [13, 69, 76, 187, 226, 264, 306, 327, 910, 913, 983], "font": [13, 114, 170, 195, 213, 877, 879], "16px": 13, "000000": [13, 41, 153, 170, 199, 238, 282, 700], "502561": 13, "537775": 13, "546752": 13, "003683": 13, "376474": 13, "788755": 13, "627229": 13, "736540": 13, "189": [13, 181, 248, 351, 862, 966, 974], "463088": 13, "500008": 13, "438776": 13, "914405": 13, "005771": 13, "894801": 13, "592511": 13, "192930": 13, "196795": 13, "181": [13, 131, 255, 276, 351, 974], "387599": 13, "820000": 13, "940000": [13, 274], "665000": 13, "480000": 13, "001500": 13, "500000": [13, 274], "240000": 13, "630000": 13, "998000": 13, "060000": 13, "780000": 13, "997900": 13, "281": [13, 212], "41": [13, 135, 181, 218, 327, 340, 342, 421, 433, 445, 456, 585, 588, 599, 622, 628, 649, 650, 663, 744, 800, 955, 959], "996900": 13, "sequenti": [13, 110, 129, 132, 150, 175, 239, 289, 343, 378, 380, 381, 464, 465, 498, 557, 561, 566, 567, 569, 570, 610, 611, 616, 617, 622, 624, 625, 626, 627, 637, 751, 825, 826, 845, 943, 961, 967, 972, 974, 975, 989, 993, 1002, 1005], "lagged_df": 13, "shift": [13, 33, 35, 41, 46, 61, 150, 160, 204, 229, 263, 276, 278, 311, 375, 379, 404, 412, 422, 425, 433, 476, 479, 653, 657, 811, 834, 963, 974, 988, 989, 993, 997, 1001], "renam": [13, 229, 239, 345, 349, 373, 410, 411, 423, 435, 436, 442, 491, 500, 517, 518, 519, 520, 521, 522, 527, 528, 529, 530, 838, 993, 994, 995, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "lagged_count_1h": 13, "lagged_count_2h": 13, "lagged_count_3h": 13, "lagged_count_1d": 13, "lagged_count_1d_1h": 13, "lagged_count_7d": 13, "lagged_count_7d_1h": 13, "roll": [13, 64, 150, 200, 201, 206, 348, 373, 494, 656, 657, 896, 974, 977, 1003, 1008], "lagged_mean_24h": 13, "lagged_max_24h": 13, "lagged_min_24h": 13, "lagged_mean_7d": 13, "lagged_max_7d": 13, "lagged_min_7d": 13, "tail": [13, 114, 149, 153, 181, 183, 238, 278, 485, 488, 949], "17369": 13, "247": [13, 845], "203": [13, 50], "224": [13, 50, 79, 119, 234, 235, 373, 688, 974], "157": [13, 351], "160": [13, 216, 942, 985], "169": [13, 55, 276], "135": [13, 135, 292, 342], "67": [13, 63, 153, 199, 342, 462, 480, 481, 482, 591, 631, 677, 776, 943, 953, 967, 993], "732143": 13, "271": 13, "17370": 13, "315": [13, 258, 296, 342, 974], "138": [13, 351, 380, 953], "125000": 13, "785714": 13, "17371": 13, "214": [13, 130, 138, 548, 974], "133": [13, 14, 53, 171, 974], "386905": 13, "17372": 13, "164": [13, 380], "123": [13, 105, 123, 328, 380, 480, 481, 482, 519, 520, 798, 954, 961], "107": [13, 292, 373, 860, 954, 995], "875000": 13, "464286": 13, "17373": 13, "109": [13, 23, 50, 954, 995], "583333": 13, "244048": 13, "119": [13, 947, 996], "102": [13, 351, 985, 995], "458333": 13, "815476": 13, "110": [13, 83, 160, 178, 188, 211, 284, 294, 401, 947, 948], "166667": 13, "73": [13, 103, 242, 297, 358, 445, 699, 762, 776, 811, 874, 963, 983, 993, 995], "369048": 13, "791667": 13, "112": [13, 51, 135, 340, 342, 995], "666667": 13, "190476": 13, "113": [13, 109, 246, 255, 351, 974, 996], "708333": 13, "422619": 13, "watch": [13, 333], "undefin": [13, 241, 359, 676, 692, 701, 704, 746, 922, 953, 1001, 1005, 1009], "own": [13, 32, 107, 199, 215, 229, 258, 260, 298, 320, 333, 339, 348, 349, 350, 353, 354, 363, 372, 373, 385, 389, 404, 418, 497, 521, 528, 610, 760, 761, 807, 808, 809, 811, 813, 815, 816, 817, 839, 873, 875, 891, 896, 921, 949, 955, 956, 959, 963, 968, 972, 977, 986, 987, 1000, 1001, 1003, 1010], "unknown": [13, 16, 53, 153, 215, 238, 296, 298, 334, 340, 359, 367, 370, 381, 832, 838, 839, 916, 952, 963, 978, 997, 1001, 1005, 1006], "nan": [13, 71, 111, 148, 149, 153, 199, 218, 220, 222, 233, 241, 284, 287, 292, 293, 294, 332, 337, 347, 354, 359, 380, 410, 432, 460, 519, 520, 521, 525, 526, 528, 557, 558, 561, 567, 570, 573, 591, 592, 593, 594, 599, 676, 677, 678, 685, 686, 687, 691, 692, 693, 732, 741, 746, 747, 748, 750, 762, 765, 766, 768, 776, 784, 787, 788, 789, 792, 834, 835, 839, 841, 842, 845, 846, 850, 853, 854, 856, 883, 884, 885, 886, 928, 942, 953, 963, 969, 989, 996, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1010], "separ": [13, 14, 16, 23, 24, 28, 29, 37, 52, 57, 59, 63, 69, 75, 84, 86, 87, 89, 92, 101, 103, 106, 109, 119, 135, 140, 149, 150, 154, 155, 158, 159, 180, 182, 202, 216, 226, 238, 241, 247, 248, 278, 280, 283, 289, 299, 302, 303, 305, 306, 307, 311, 312, 319, 328, 332, 341, 342, 347, 350, 353, 357, 359, 371, 373, 374, 375, 378, 380, 381, 383, 428, 476, 483, 497, 502, 504, 505, 511, 513, 545, 552, 553, 555, 574, 595, 602, 610, 611, 637, 640, 641, 654, 658, 688, 695, 708, 709, 711, 716, 755, 781, 797, 798, 824, 825, 867, 869, 870, 875, 876, 942, 943, 945, 947, 949, 950, 952, 959, 960, 963, 967, 968, 974, 983, 985, 986, 993, 996, 998, 999, 1003, 1005, 1006, 1009, 1010], "dropna": [13, 142], "17210": [13, 1004], "randomli": [13, 34, 45, 47, 58, 67, 79, 81, 103, 104, 117, 140, 148, 150, 154, 193, 198, 212, 216, 229, 233, 244, 255, 257, 296, 299, 328, 333, 354, 357, 358, 373, 377, 380, 383, 413, 422, 476, 479, 483, 487, 495, 501, 509, 510, 515, 523, 524, 525, 526, 527, 528, 529, 574, 575, 635, 643, 654, 658, 680, 760, 761, 821, 859, 873, 874, 875, 876, 952, 954, 956, 959, 961, 965, 969, 974, 985, 987, 1004, 1008, 1010], "percentag": [13, 51, 95, 111, 172, 199, 233, 241, 244, 377, 382, 498, 505, 508, 513, 557, 558, 612, 633, 644, 667, 697, 709, 780, 781, 782, 795, 877, 879, 954, 969, 995, 999, 1005, 1006], "mape": [13, 709, 953], "aim": [13, 20, 76, 149, 185, 266, 298, 311, 334, 340, 343, 345, 359, 367, 373, 375, 381, 412, 949, 953, 956, 963, 968, 972, 978, 986, 1007], "futur": [13, 142, 182, 221, 290, 293, 343, 345, 347, 349, 359, 360, 367, 377, 381, 460, 498, 599, 923, 953, 954, 968, 969, 977, 990, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "ulterior": 13, "independ": [13, 24, 26, 34, 43, 88, 89, 91, 106, 110, 144, 154, 217, 218, 238, 241, 243, 247, 257, 278, 285, 287, 320, 328, 332, 333, 341, 347, 349, 358, 359, 363, 370, 371, 372, 373, 374, 375, 376, 377, 381, 385, 413, 428, 452, 467, 479, 480, 481, 482, 484, 496, 497, 499, 501, 503, 504, 510, 511, 515, 516, 568, 571, 572, 589, 604, 608, 609, 610, 611, 614, 615, 616, 617, 618, 619, 620, 621, 624, 625, 626, 627, 628, 629, 636, 637, 638, 639, 668, 669, 681, 699, 700, 718, 720, 758, 764, 790, 794, 796, 798, 799, 837, 841, 842, 843, 845, 849, 850, 851, 852, 854, 855, 856, 859, 867, 868, 869, 870, 871, 896, 942, 945, 947, 949, 950, 953, 954, 955, 958, 960, 963, 968, 969, 988, 989, 993, 994, 999, 1001, 1003, 1008], "ident": [13, 19, 61, 113, 176, 181, 199, 208, 212, 301, 319, 340, 347, 359, 370, 373, 374, 375, 377, 383, 386, 402, 403, 416, 428, 429, 437, 439, 440, 443, 444, 445, 452, 467, 515, 523, 524, 528, 529, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 607, 643, 644, 663, 668, 669, 699, 748, 758, 764, 767, 777, 778, 781, 782, 807, 808, 814, 822, 823, 829, 830, 842, 854, 873, 874, 946, 947, 950, 953, 956, 957, 968, 997, 1001, 1002, 1003, 1007], "tempor": [13, 165, 972, 973], "mean_absolute_percentage_error": [13, 111, 953, 1005, 1007], "3889873516666431": 13, "account": [13, 14, 52, 89, 95, 101, 142, 148, 153, 199, 215, 238, 261, 267, 315, 317, 320, 332, 341, 345, 359, 360, 367, 373, 376, 377, 378, 380, 381, 427, 525, 526, 531, 532, 591, 592, 594, 596, 597, 613, 637, 643, 668, 671, 691, 692, 693, 701, 706, 719, 746, 747, 750, 751, 763, 767, 780, 839, 945, 947, 951, 953, 954, 955, 956, 963, 967, 969, 998, 1000, 1001, 1002, 1005, 1006, 1008, 1010], "cheat": [13, 307, 957, 967, 995], "fast": [13, 59, 158, 165, 170, 196, 197, 213, 214, 279, 321, 332, 340, 345, 354, 373, 375, 377, 378, 380, 381, 385, 410, 411, 433, 438, 472, 496, 497, 499, 502, 504, 508, 511, 528, 529, 530, 552, 553, 555, 596, 597, 604, 622, 623, 636, 638, 651, 663, 762, 776, 786, 787, 797, 798, 805, 806, 810, 821, 902, 922, 945, 949, 952, 955, 956, 958, 959, 969, 972, 977, 987, 993, 994, 999, 1000, 1003, 1004], "common": [13, 15, 17, 19, 90, 132, 135, 150, 151, 152, 177, 185, 186, 233, 245, 255, 289, 311, 319, 321, 327, 332, 339, 345, 347, 353, 355, 357, 358, 362, 363, 364, 370, 371, 372, 373, 374, 377, 379, 382, 383, 411, 429, 431, 460, 554, 596, 617, 636, 637, 665, 709, 716, 732, 763, 764, 767, 777, 779, 780, 781, 782, 783, 788, 791, 826, 828, 836, 837, 838, 843, 845, 850, 851, 853, 854, 855, 856, 904, 942, 943, 949, 956, 959, 963, 968, 969, 972, 973, 974, 977, 978, 989, 993, 1001, 1003, 1004, 1008], "laptop": [13, 353, 432, 863, 1007, 1008, 1009], "3000": [13, 61, 204, 857, 858], "train_idx": [13, 153, 359], "test_idx": [13, 359], "44300751539296973": 13, "optimist": [13, 170, 243, 319, 328, 671, 949, 953], "cross": [13, 14, 32, 51, 54, 55, 67, 68, 70, 71, 73, 77, 80, 85, 94, 107, 110, 111, 113, 114, 125, 129, 132, 133, 135, 153, 154, 159, 163, 165, 167, 169, 175, 181, 183, 189, 199, 209, 216, 221, 226, 227, 229, 231, 235, 238, 239, 240, 242, 244, 245, 246, 247, 250, 251, 252, 255, 262, 276, 277, 279, 284, 287, 289, 294, 299, 307, 315, 340, 345, 347, 354, 357, 358, 359, 364, 367, 368, 371, 374, 375, 378, 380, 381, 382, 383, 401, 435, 436, 437, 438, 439, 440, 442, 446, 447, 448, 449, 457, 465, 466, 468, 479, 505, 531, 532, 539, 557, 558, 561, 566, 570, 573, 606, 607, 610, 611, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 636, 637, 638, 639, 640, 642, 643, 645, 646, 647, 648, 649, 650, 665, 666, 670, 677, 691, 704, 748, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 796, 799, 825, 826, 830, 845, 846, 863, 865, 867, 870, 908, 952, 953, 956, 957, 961, 963, 968, 969, 972, 973, 974, 975, 977, 978, 981, 989, 993, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1010], "cross_val_scor": [13, 94, 148, 149, 150, 231, 234, 243, 252, 293, 310, 328, 345, 347, 357, 364, 377, 380, 484, 539, 667, 705, 762, 786, 788, 873, 874, 942, 953, 974, 982, 993, 994, 995, 996, 997, 1000, 1001, 1002, 1005, 1006, 1009, 1010], "cv_mape_scor": 13, "neg_mean_absolute_percentage_error": [13, 111, 953, 961], "44300752": 13, "27772182": 13, "3697178": 13, "real": [13, 29, 32, 52, 54, 66, 70, 73, 75, 76, 77, 101, 140, 153, 185, 205, 208, 218, 232, 244, 252, 262, 265, 279, 280, 306, 311, 321, 332, 338, 339, 342, 349, 351, 354, 357, 358, 359, 370, 371, 373, 375, 377, 378, 380, 381, 433, 453, 454, 457, 458, 459, 460, 461, 464, 465, 468, 474, 515, 516, 517, 519, 520, 521, 522, 523, 524, 528, 529, 556, 558, 559, 560, 561, 562, 563, 564, 595, 663, 668, 687, 691, 715, 718, 720, 748, 758, 790, 822, 823, 867, 868, 869, 870, 871, 874, 876, 943, 944, 945, 950, 953, 955, 957, 958, 959, 969, 971, 974, 989, 993, 1006, 1010], "life": [13, 232, 353, 950], "advis": [13, 182, 215, 328, 343, 345, 373, 381, 401, 610, 616, 618, 624, 626, 636, 651, 921, 945, 949, 955, 957, 968, 1007], "deviat": [13, 20, 32, 58, 75, 104, 107, 108, 109, 110, 112, 135, 137, 142, 144, 146, 153, 160, 187, 218, 235, 236, 237, 238, 239, 241, 264, 265, 278, 283, 337, 341, 342, 350, 354, 359, 377, 380, 383, 414, 436, 465, 475, 476, 477, 478, 480, 481, 482, 486, 488, 489, 494, 516, 558, 575, 598, 608, 609, 635, 687, 715, 768, 784, 811, 834, 835, 845, 854, 855, 856, 949, 953, 959, 963, 985, 999, 1000, 1001, 1004, 1005, 1006], "363": 13, "make_scor": [13, 114, 242, 364, 377, 762, 787, 788, 953, 1002, 1010], "mean_absolute_error": [13, 181, 183, 199, 953, 994, 996], "mean_pinball_loss": [13, 114, 290, 949, 953, 1006], "root_mean_squared_error": [13, 713, 953, 1010], "consolidate_scor": 13, "1f": [13, 20, 47, 50, 90, 161, 181, 212, 224, 226, 245, 287, 294, 320, 321], "pinball_loss_05": 13, "pinball_loss_50": 13, "pinball_loss_95": 13, "loss_funct": 13, "absolute_error": [13, 380, 522, 524, 526, 529, 635, 874, 876, 1006], "loss_func": 13, "n_job": [13, 51, 68, 69, 107, 108, 109, 114, 115, 121, 134, 135, 148, 153, 154, 155, 156, 202, 204, 220, 237, 239, 240, 242, 253, 255, 258, 287, 288, 289, 292, 315, 333, 345, 359, 380, 384, 401, 408, 410, 412, 414, 416, 419, 420, 421, 422, 425, 428, 431, 436, 495, 499, 500, 501, 503, 506, 507, 509, 510, 512, 519, 520, 521, 522, 527, 528, 529, 530, 531, 532, 533, 534, 558, 566, 571, 572, 574, 596, 598, 603, 611, 615, 617, 619, 621, 622, 623, 625, 627, 629, 630, 632, 640, 643, 652, 653, 654, 655, 656, 657, 658, 737, 741, 744, 762, 765, 766, 768, 776, 784, 786, 787, 788, 789, 790, 792, 793, 794, 795, 797, 798, 807, 808, 809, 811, 813, 815, 816, 817, 818, 819, 824, 827, 860, 861, 919, 921, 942, 953, 954, 956, 982, 983, 987, 993, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1008, 1011], "fit_tim": [13, 55, 111, 170, 189, 240, 377, 788, 789], "startswith": [13, 66, 202, 271], "test_": [13, 121, 377], "x_i": [13, 75, 105, 130, 153, 182, 290, 315, 373, 378, 379, 380, 383, 578, 579, 583, 586, 587, 589, 800, 801, 804, 944, 945, 949, 955, 956, 957, 963, 967, 968, 969], "fulli": [13, 41, 52, 108, 114, 332, 339, 340, 359, 373, 379, 380, 382, 407, 411, 521, 522, 528, 529, 873, 874, 875, 876, 877, 879, 942, 943, 949, 958, 966, 972, 1006, 1007], "anticip": 13, "call": [13, 14, 17, 43, 45, 47, 51, 67, 85, 99, 106, 113, 132, 137, 141, 143, 145, 152, 154, 169, 181, 182, 185, 199, 215, 219, 221, 222, 238, 239, 247, 252, 253, 255, 258, 260, 283, 285, 289, 290, 319, 320, 321, 327, 332, 333, 334, 340, 343, 345, 346, 347, 349, 350, 351, 352, 353, 354, 357, 358, 359, 360, 363, 364, 371, 373, 374, 375, 376, 377, 378, 380, 381, 383, 385, 396, 404, 407, 410, 411, 413, 414, 415, 416, 417, 418, 421, 424, 426, 428, 429, 432, 433, 438, 446, 447, 448, 452, 455, 456, 459, 461, 467, 472, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 507, 508, 509, 510, 511, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 534, 541, 546, 547, 549, 550, 552, 553, 555, 561, 566, 571, 572, 574, 575, 578, 581, 584, 591, 592, 593, 594, 595, 596, 598, 599, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 653, 654, 655, 656, 657, 658, 659, 661, 663, 664, 665, 668, 695, 705, 718, 734, 737, 741, 742, 743, 744, 756, 760, 761, 762, 764, 765, 766, 767, 768, 774, 776, 777, 778, 779, 780, 781, 782, 784, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 808, 810, 811, 814, 816, 821, 822, 823, 824, 825, 828, 829, 830, 832, 834, 835, 837, 842, 845, 846, 849, 854, 855, 856, 857, 858, 862, 865, 866, 867, 868, 870, 871, 874, 876, 892, 896, 901, 902, 910, 911, 913, 919, 920, 921, 924, 927, 937, 942, 943, 945, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 959, 961, 963, 965, 966, 968, 969, 972, 977, 978, 982, 985, 986, 987, 989, 990, 993, 994, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "aleator": 13, "descript": [13, 135, 153, 284, 338, 339, 344, 345, 349, 350, 353, 359, 373, 381, 416, 426, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 464, 465, 466, 467, 468, 469, 471, 474, 508, 594, 640, 725, 728, 741, 953, 967, 968, 973, 976, 987, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "quantile_list": 13, "styled_df_copi": 13, "extract_numer": 13, "mean_valu": 13, "std_valu": 13, "convert": [13, 17, 32, 43, 45, 63, 67, 90, 142, 156, 181, 201, 218, 221, 225, 226, 229, 230, 271, 332, 339, 340, 354, 357, 359, 367, 381, 404, 407, 408, 411, 413, 414, 415, 416, 423, 428, 429, 460, 498, 505, 517, 518, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 536, 545, 546, 552, 553, 554, 555, 557, 558, 570, 591, 592, 593, 594, 610, 616, 622, 623, 624, 626, 630, 631, 632, 634, 638, 640, 641, 642, 656, 741, 820, 829, 830, 832, 836, 838, 839, 840, 842, 865, 873, 874, 875, 876, 883, 885, 886, 908, 938, 939, 942, 949, 950, 951, 953, 963, 964, 968, 969, 987, 993, 995, 996, 997, 998, 999, 1001, 1003, 1004, 1005, 1008, 1009, 1010], "cols_to_convert": 13, "col": [13, 19, 24, 26, 35, 39, 46, 52, 56, 60, 61, 66, 107, 122, 201, 218, 316, 475, 477], "min_valu": [13, 591, 1004, 1005], "mask": [13, 14, 39, 63, 109, 181, 189, 218, 236, 237, 300, 354, 359, 374, 380, 433, 438, 525, 526, 545, 549, 550, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 571, 572, 593, 594, 596, 597, 613, 635, 762, 765, 766, 776, 925, 943, 960, 993, 996, 998, 999, 1001, 1003], "bold": [13, 57, 114, 170, 176, 345], "07": [13, 79, 96, 153, 177, 199, 247, 283, 328, 340, 373, 525, 526, 656, 658, 953, 967, 974], "17": [13, 19, 36, 49, 70, 75, 85, 138, 153, 180, 212, 241, 273, 282, 340, 343, 350, 363, 365, 366, 373, 377, 408, 425, 451, 461, 462, 464, 487, 495, 500, 504, 511, 513, 514, 519, 523, 524, 533, 534, 561, 592, 613, 621, 622, 623, 630, 633, 636, 638, 651, 656, 692, 693, 703, 724, 729, 747, 750, 752, 780, 803, 814, 829, 834, 835, 843, 845, 851, 867, 870, 873, 874, 875, 876, 903, 942, 943, 954, 956, 963, 991, 993, 994, 995, 996, 999, 1002, 1007], "06": [13, 49, 64, 79, 146, 153, 172, 180, 181, 218, 238, 239, 276, 280, 314, 351, 446, 447, 448, 608, 609, 653, 657, 760, 761, 762, 776, 874, 949, 963, 965, 974], "145": [13, 373], "92": [13, 30, 47, 90, 132, 158, 236, 276, 296, 297, 307, 340, 342, 502, 504, 511, 526, 561, 660, 762, 776, 948, 987], "58": [13, 39, 63, 74, 342, 375, 386, 439, 571, 727, 963, 983], "wherea": [13, 32, 45, 50, 64, 75, 117, 195, 218, 239, 240, 241, 247, 261, 283, 311, 315, 316, 334, 360, 377, 380, 408, 529, 622, 623, 764, 780, 793, 945, 952, 954, 956, 963, 969, 1006], "That": [13, 87, 101, 135, 170, 208, 238, 242, 320, 321, 333, 339, 353, 359, 377, 382, 383, 407, 410, 411, 521, 528, 557, 780, 873, 874, 942, 950, 951, 953, 959, 969, 1002, 1003], "pinbal": [13, 114, 290, 526, 634, 686, 711, 949, 1006, 1007], "5th": [13, 114, 145, 373], "95th": [13, 114, 711], "gbrt_mean_poisson": 13, "mean_predict": [13, 144], "gbrt_median": 13, "median_predict": 13, "gbrt_percentile_5": 13, "percentile_5_predict": 13, "gbrt_percentile_95": 13, "percentile_95_predict": 13, "fill_between": [13, 114, 126, 137, 142, 144, 146, 160, 161, 199, 238, 240, 241, 242, 248, 768, 784], "interv": [13, 26, 100, 144, 150, 165, 181, 182, 183, 199, 238, 340, 359, 371, 377, 380, 383, 402, 403, 480, 481, 482, 521, 522, 524, 526, 528, 529, 599, 600, 602, 641, 705, 711, 713, 766, 783, 791, 828, 830, 844, 867, 868, 869, 889, 945, 949, 953, 963, 969, 974, 1000, 1004], "At": [13, 71, 101, 186, 250, 255, 257, 296, 299, 332, 333, 349, 360, 364, 369, 376, 380, 401, 404, 429, 552, 553, 555, 566, 793, 795, 832, 917, 942, 949, 952, 954, 958, 967, 977], "night": 13, "band": [13, 241, 280, 963], "narrow": [13, 104, 114, 278, 280, 350, 805, 806], "certain": [13, 52, 112, 153, 186, 198, 215, 238, 258, 282, 311, 328, 340, 341, 343, 349, 359, 362, 373, 378, 382, 602, 613, 617, 622, 627, 648, 825, 830, 865, 942, 945, 949, 950, 953, 954, 957, 963, 968, 972, 978, 982, 998, 1002, 1005, 1008], "And": [13, 150, 200, 201, 206, 215, 238, 319, 353, 367, 373, 377, 381, 494, 552, 553, 555, 656, 657, 949, 953, 974, 1000], "correct": [13, 25, 26, 54, 76, 101, 112, 145, 153, 165, 170, 181, 199, 224, 232, 238, 245, 247, 255, 257, 307, 309, 319, 328, 342, 345, 347, 349, 360, 371, 372, 373, 377, 378, 380, 381, 390, 396, 414, 420, 433, 438, 452, 465, 467, 599, 631, 640, 642, 667, 668, 672, 676, 677, 682, 685, 686, 687, 691, 692, 693, 697, 701, 704, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 746, 747, 748, 750, 753, 754, 757, 759, 793, 794, 795, 802, 810, 836, 938, 949, 953, 954, 968, 978, 995, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "wider": [13, 183, 381, 878, 949], "probabl": [13, 16, 22, 26, 27, 32, 52, 71, 84, 85, 100, 122, 130, 136, 137, 138, 139, 150, 153, 173, 193, 196, 197, 201, 205, 209, 211, 212, 238, 240, 241, 244, 245, 248, 276, 278, 282, 287, 289, 299, 301, 314, 315, 332, 340, 341, 347, 351, 357, 359, 373, 377, 378, 381, 382, 383, 399, 400, 401, 402, 403, 410, 411, 413, 468, 476, 479, 487, 491, 513, 514, 515, 517, 519, 521, 523, 525, 528, 531, 533, 534, 557, 558, 574, 577, 578, 586, 591, 595, 596, 597, 622, 623, 635, 640, 656, 662, 664, 666, 667, 670, 671, 673, 676, 680, 684, 689, 690, 692, 702, 703, 704, 705, 719, 745, 747, 750, 751, 752, 757, 760, 761, 762, 765, 766, 776, 790, 791, 794, 796, 797, 800, 801, 802, 803, 804, 807, 810, 815, 821, 822, 846, 858, 859, 860, 861, 862, 865, 867, 870, 873, 875, 947, 948, 949, 950, 951, 952, 953, 955, 956, 957, 958, 959, 960, 963, 965, 966, 967, 969, 973, 974, 975, 987, 989, 993, 995, 997, 999, 1001, 1002, 1003, 1004, 1005, 1007], "visibl": [13, 153, 154, 183, 317, 339, 345, 373, 821, 958, 998, 1008], "lie": [13, 57, 79, 134, 153, 213, 278, 298, 305, 307, 378, 380, 570, 813, 815, 816, 817, 865, 866, 947, 950, 953, 963, 968], "span": [13, 52, 73, 114, 213, 235, 340, 373, 381, 513, 600, 762, 765, 953, 986], "underestim": [13, 114, 154, 181, 199, 238, 345], "calibr": [13, 28, 104, 123, 199, 211, 238, 240, 245, 359, 364, 476, 479, 528, 533, 622, 640, 673, 692, 704, 747, 750, 751, 791, 803, 862, 865, 893, 942, 949, 953, 966, 968, 974, 975, 989, 990, 997, 999], "confid": [13, 23, 24, 25, 26, 142, 144, 225, 238, 241, 299, 360, 371, 383, 600, 622, 623, 630, 632, 635, 638, 639, 640, 662, 666, 671, 684, 689, 690, 702, 703, 719, 752, 793, 832, 865, 867, 870, 949, 952, 953, 954, 959, 966, 967, 968, 977, 987, 1003], "produc": [13, 14, 24, 25, 41, 54, 66, 90, 114, 115, 116, 117, 165, 244, 276, 299, 328, 333, 340, 341, 345, 347, 350, 359, 360, 373, 374, 377, 378, 380, 404, 407, 410, 416, 483, 500, 523, 527, 545, 552, 557, 558, 596, 597, 764, 765, 766, 774, 779, 782, 786, 830, 840, 867, 870, 944, 945, 949, 951, 952, 953, 956, 959, 960, 964, 966, 967, 968, 978, 995, 996, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "overli": [13, 24, 25, 170, 243, 328, 378, 953], "mapi": 13, "recent": [13, 183, 215, 343, 346, 350, 353, 359, 373, 432, 502, 529, 967, 977, 996, 1005], "conform": [13, 545, 592, 793, 794, 953, 972, 973, 1000, 1006], "epistem": 13, "sktime": [13, 972], "extend": [13, 52, 53, 64, 99, 182, 228, 245, 307, 342, 343, 357, 359, 371, 372, 373, 378, 380, 595, 684, 783, 794, 797, 798, 830, 832, 849, 865, 866, 880, 945, 953, 954, 968, 973, 975, 989, 998, 999, 1000, 1001, 1003, 1008], "recurs": [13, 30, 48, 82, 117, 126, 129, 132, 135, 150, 233, 237, 243, 262, 296, 297, 299, 323, 347, 372, 373, 377, 404, 405, 406, 409, 427, 466, 479, 527, 557, 558, 561, 566, 596, 597, 622, 781, 870, 953, 956, 959, 960, 969, 974, 975, 986, 989, 993, 1003, 1004], "enabl": [13, 28, 47, 68, 154, 189, 203, 215, 280, 288, 290, 291, 293, 294, 316, 343, 345, 350, 353, 357, 359, 363, 364, 369, 372, 373, 374, 378, 380, 381, 413, 428, 432, 498, 499, 505, 523, 524, 525, 526, 527, 543, 544, 554, 555, 566, 574, 760, 761, 762, 765, 786, 787, 788, 825, 826, 838, 839, 862, 863, 865, 866, 867, 868, 869, 870, 871, 880, 913, 920, 943, 945, 950, 952, 953, 956, 963, 964, 967, 968, 973, 977, 993, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "606": [13, 154, 577, 795, 954, 974], "plot_time_series_lagged_featur": [13, 974], "parallel": [14, 100, 105, 107, 108, 110, 150, 154, 155, 156, 183, 239, 288, 289, 291, 312, 327, 331, 337, 345, 346, 348, 349, 357, 359, 374, 382, 384, 385, 401, 408, 410, 412, 413, 414, 416, 421, 422, 425, 428, 431, 436, 459, 495, 497, 498, 499, 501, 503, 505, 506, 507, 509, 510, 512, 519, 520, 521, 522, 527, 528, 529, 530, 531, 532, 533, 534, 553, 558, 566, 571, 572, 574, 596, 598, 603, 622, 652, 653, 654, 655, 656, 657, 658, 737, 741, 744, 762, 765, 766, 768, 773, 776, 784, 786, 787, 788, 789, 790, 792, 793, 794, 795, 797, 798, 807, 808, 809, 811, 813, 815, 816, 817, 818, 819, 824, 827, 860, 861, 921, 923, 973, 974, 982, 987, 989, 993, 996, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1008, 1009], "acquir": [14, 109, 240, 1005], "angl": [14, 32, 90, 135, 224, 225, 226, 229, 230, 342, 378, 495, 501, 503, 506, 507, 509, 510, 512, 614, 615, 616, 617, 618, 619, 620, 627, 628, 629, 642, 646, 647, 648, 649, 650, 656, 950, 951, 975, 989, 993], "Such": [14, 117, 137, 142, 152, 160, 165, 170, 182, 241, 319, 359, 360, 377, 378, 380, 519, 520, 620, 943, 953, 956, 963, 969, 985, 1003, 1008, 1010], "ct": [14, 145, 222, 374, 428, 430, 431], "cellular": 14, "materi": [14, 294, 360, 545, 855, 856, 971], "haar": [14, 1010], "wavelet": [14, 96, 378], "sparsiti": [14, 28, 42, 77, 93, 150, 159, 165, 166, 174, 192, 196, 197, 214, 315, 320, 332, 359, 375, 378, 380, 382, 465, 466, 491, 495, 501, 502, 503, 504, 507, 509, 510, 511, 610, 616, 621, 622, 640, 642, 685, 686, 687, 834, 840, 845, 850, 946, 949, 956, 963, 974, 981, 986, 995], "oper": [14, 19, 135, 145, 150, 209, 214, 221, 231, 233, 235, 245, 299, 321, 332, 333, 342, 343, 345, 348, 351, 357, 359, 360, 363, 367, 369, 377, 378, 380, 381, 382, 386, 412, 425, 432, 439, 446, 447, 448, 449, 468, 497, 498, 505, 515, 516, 530, 536, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 580, 585, 588, 594, 599, 607, 622, 653, 657, 666, 670, 671, 672, 690, 737, 744, 745, 751, 752, 781, 791, 794, 805, 806, 828, 832, 837, 848, 849, 863, 870, 873, 904, 921, 926, 949, 956, 963, 968, 972, 974, 977, 985, 997, 999, 1000, 1001, 1003, 1004, 1009], "fidel": 14, "penal": [14, 28, 77, 121, 165, 170, 174, 181, 185, 197, 199, 283, 315, 373, 375, 378, 382, 433, 434, 435, 436, 437, 438, 439, 440, 442, 611, 616, 617, 625, 627, 640, 669, 679, 697, 749, 758, 838, 865, 866, 872, 949, 953, 955, 957, 967, 968, 985], "computation": [14, 73, 87, 107, 113, 121, 137, 258, 311, 319, 331, 346, 357, 372, 373, 374, 377, 378, 380, 383, 502, 596, 597, 635, 726, 762, 764, 765, 766, 776, 788, 949, 950, 952, 960, 961, 965, 986, 989, 997], "l2": [14, 28, 37, 77, 79, 150, 152, 153, 159, 160, 165, 166, 172, 174, 177, 181, 186, 192, 196, 197, 199, 239, 258, 278, 285, 300, 319, 320, 347, 354, 357, 373, 375, 378, 381, 405, 409, 414, 421, 488, 502, 504, 511, 522, 525, 526, 529, 553, 554, 555, 607, 610, 611, 612, 613, 616, 621, 622, 623, 624, 625, 626, 627, 632, 633, 636, 640, 642, 644, 645, 650, 651, 652, 698, 713, 724, 725, 741, 742, 743, 776, 807, 808, 809, 811, 813, 815, 816, 817, 818, 819, 822, 823, 837, 845, 852, 865, 866, 870, 871, 872, 874, 876, 936, 942, 946, 949, 951, 956, 957, 963, 967, 969, 974, 985, 987, 995, 997, 998, 1000, 1002], "circular": 14, "central": [14, 183, 340, 373, 959, 972], "emmanuel": [14, 63, 993, 1000, 1001, 1002, 1010], "gouillart": [14, 63, 993], "nsup": 14, "ndimag": [14, 43, 44, 51, 276, 986], "_weight": [14, 199], "orig": [14, 265], "floor_x": 14, "floor": 14, "hstack": [14, 31, 39, 123, 131, 206, 217, 233, 310, 377, 824], "_generate_center_coordin": 14, "l_x": 14, "mgrid": [14, 128], "build_projection_oper": 14, "n_dir": 14, "endpoint": [14, 279, 310, 599], "data_ind": 14, "camera_ind": 14, "data_unravel_indic": 14, "xrot": 14, "ind": [14, 39, 113, 123, 320, 805, 806], "logical_and": [14, 114], "proj_oper": 14, "coo_matrix": [14, 167, 416, 549, 550, 924, 927], "generate_synthetic_data": 14, "n_pt": 14, "ogrid": 14, "mask_out": 14, "rand": [14, 23, 34, 35, 36, 37, 41, 46, 55, 59, 94, 104, 118, 120, 130, 160, 165, 203, 204, 208, 214, 215, 252, 270, 288, 289, 294, 300, 301, 314, 320, 325, 326, 354, 364, 508, 668, 669, 679, 720, 744, 749, 857, 858, 860, 861, 862, 965, 978, 993, 1004, 1005], "gaussian_filt": [14, 43, 44, 51, 986], "sigma": [14, 43, 44, 51, 75, 94, 114, 236, 238, 370, 375, 378, 380, 578, 613, 947, 949, 951, 955, 958, 986], "logical_xor": [14, 141, 313], "binary_eros": 14, "128": [14, 15, 181, 332, 500], "proj": [14, 613], "randn": [14, 31, 32, 36, 51, 62, 63, 75, 76, 90, 94, 117, 130, 137, 141, 152, 155, 170, 175, 176, 180, 194, 195, 198, 225, 228, 229, 233, 245, 247, 248, 252, 264, 265, 285, 288, 289, 294, 306, 312, 313, 317, 347, 350, 607, 634, 636, 642, 651, 783, 868, 871], "rgr_ridg": 14, "rec_l2": 14, "lassocv": [14, 121, 126, 153, 165, 170, 364, 380, 382, 615, 616, 618, 619, 620, 627, 648, 949, 982, 993, 996, 1000, 1003, 1004, 1006, 1007, 1010], "rgr_lasso": 14, "rec_l1": 14, "wspace": [14, 15, 36, 41, 42, 59, 75, 87, 103, 181, 199, 208, 224, 226, 227, 230, 263, 271, 297, 304], "593": [14, 105, 974], "plot_tomography_l1_reconstruct": [14, 974], "hierarch": [14, 21, 33, 36, 37, 41, 43, 49, 50, 51, 53, 54, 150, 156, 205, 291, 327, 359, 381, 405, 407, 409, 410, 468, 476, 478, 486, 494, 511, 694, 818, 845, 970, 973, 974, 988, 989, 993, 996, 997, 1009], "spectral": [14, 18, 33, 41, 43, 46, 52, 66, 150, 202, 203, 298, 300, 319, 320, 321, 345, 381, 413, 415, 416, 417, 426, 433, 434, 435, 436, 437, 438, 439, 440, 452, 475, 477, 555, 652, 653, 654, 655, 656, 659, 683, 758, 956, 966, 974, 988, 989, 993, 994], "signal": [14, 76, 87, 88, 89, 96, 112, 114, 137, 142, 143, 150, 152, 159, 160, 166, 167, 169, 170, 175, 176, 180, 182, 230, 290, 372, 373, 375, 381, 382, 383, 386, 439, 467, 485, 490, 495, 498, 501, 505, 509, 510, 589, 608, 609, 610, 611, 616, 617, 627, 628, 636, 648, 649, 650, 748, 783, 791, 839, 949, 953, 970, 974, 977, 981, 988, 989], "unstructur": [14, 33, 36, 37, 38, 44, 150, 205, 275, 373, 405, 409, 427, 467, 494, 818, 965, 974, 977, 997], "nmf": [15, 68, 351, 372, 381, 499, 502, 508, 511, 988, 989, 993, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010], "latentdirichletalloc": [15, 334, 350, 378, 972, 998, 1000, 1007, 1008], "corpu": [15, 320, 321, 340, 378, 552, 553, 554, 555, 987, 994], "frobeniu": [15, 90, 407, 411, 423, 433, 434, 435, 436, 437, 438, 439, 440, 495, 501, 502, 504, 509, 510, 511, 949, 1000], "kullback": [15, 201, 378, 502, 504, 511, 656, 950, 1000], "leibler": [15, 201, 378, 502, 504, 511, 656, 950, 1000], "diverg": [15, 113, 201, 206, 263, 502, 504, 511, 656, 821, 950, 952, 953, 958, 960, 1000, 1001, 1006], "probabilist": [15, 26, 28, 77, 86, 87, 96, 97, 136, 137, 140, 143, 144, 150, 214, 319, 359, 371, 379, 380, 401, 437, 440, 496, 498, 499, 505, 523, 552, 553, 574, 586, 607, 609, 640, 667, 704, 762, 787, 832, 867, 868, 870, 871, 946, 947, 949, 952, 953, 958, 963, 968, 969, 972, 974, 977, 993, 996, 1000], "semant": [15, 319, 320, 359, 508, 987, 988, 989, 995], "runnabl": [15, 349, 350], "coupl": [15, 49, 50, 52, 202, 339, 340, 370, 371, 373, 382, 553, 871, 942, 968], "ten": [15, 19, 101, 107, 135, 202, 230, 340, 342, 380, 484, 870, 1002], "polynomi": [15, 148, 150, 157, 159, 181, 187, 213, 220, 238, 252, 263, 289, 290, 304, 314, 337, 341, 416, 455, 584, 603, 604, 605, 607, 636, 728, 737, 738, 791, 826, 835, 837, 840, 844, 865, 867, 868, 869, 870, 871, 948, 968, 974, 975, 989, 1005, 1006], "lda": [15, 31, 83, 86, 89, 91, 97, 150, 267, 328, 342, 369, 468, 500, 505, 513, 514, 814, 972, 974, 975, 988, 989, 998], "proport": [15, 25, 37, 134, 167, 181, 188, 194, 208, 218, 241, 261, 265, 268, 315, 317, 332, 340, 371, 373, 375, 377, 378, 380, 381, 402, 403, 410, 433, 438, 479, 513, 514, 519, 521, 523, 524, 525, 526, 527, 528, 547, 548, 552, 555, 591, 596, 622, 623, 630, 631, 632, 638, 639, 640, 642, 660, 665, 676, 763, 764, 765, 766, 779, 782, 791, 811, 822, 823, 839, 865, 866, 867, 870, 871, 873, 875, 877, 879, 891, 942, 952, 953, 956, 959, 967, 968, 969, 998, 1010], "089": [15, 135, 203], "tf": [15, 19, 212, 319, 320, 321, 340, 378, 485, 508, 552, 553, 554, 555, 804, 812, 837, 942, 951, 955, 963, 972, 987], "idf": [15, 19, 212, 319, 320, 321, 340, 378, 485, 508, 552, 553, 554, 555, 804, 812, 837, 942, 951, 955, 963, 987, 993], "227": [15, 175, 238, 373, 688, 974], "222": [15, 79, 119, 196, 968], "2000": [15, 25, 37, 47, 71, 88, 94, 158, 227, 230, 238, 255, 273, 291, 320, 340, 342, 373, 374, 380, 385, 416, 426, 497, 498, 523, 653, 655, 657, 706, 751, 760, 811, 841, 853, 950, 953, 959, 965, 978, 986], "072": [15, 194, 401, 612, 974], "193": [15, 180, 351, 380, 679, 749, 966, 974], "minibatchnmf": [15, 334, 378, 1007, 1009, 1010], "batch_siz": [15, 19, 39, 61, 87, 90, 91, 320, 378, 413, 498, 500, 501, 502, 503, 510, 821, 822, 823, 905, 906, 919, 994, 1001, 1004, 1006, 1007], "077": [15, 258, 320], "216": [15, 252, 966, 974], "023": [15, 218, 246, 866, 961, 974], "ensta": [15, 17, 34, 45, 58, 181, 199, 202, 239, 241, 319, 320, 321], "chyi": [15, 996, 997, 998, 999, 1000], "kwei": [15, 996, 997, 998, 999, 1000], "yau": [15, 996, 997, 998, 999, 1000], "chyikwei": 15, "fetch_20newsgroup": [15, 19, 66, 239, 300, 319, 320, 321, 340, 453, 987, 998, 1003], "countvector": [15, 300, 321, 340, 350, 374, 378, 381, 428, 453, 500, 546, 553, 554, 555, 987, 993, 995, 998, 1001, 1002, 1003, 1004, 1005, 1006], "tfidfvector": [15, 19, 66, 239, 319, 340, 378, 381, 453, 552, 553, 554, 987, 993, 995, 1001, 1002, 1003, 1006, 1007], "n_top_word": 15, "init": [15, 39, 42, 55, 56, 58, 61, 154, 161, 201, 202, 204, 205, 206, 225, 227, 258, 320, 348, 353, 373, 378, 380, 407, 411, 413, 415, 417, 423, 424, 502, 504, 511, 512, 523, 524, 596, 597, 654, 656, 658, 814, 950, 993, 1002, 1005, 1007, 1008, 1009], "nndsvda": [15, 378, 502, 504, 511, 1002, 1005], "plot_top_word": 15, "feature_nam": [15, 19, 83, 97, 108, 115, 118, 135, 153, 155, 190, 219, 261, 278, 287, 288, 289, 294, 304, 319, 324, 338, 340, 350, 374, 454, 455, 456, 460, 464, 465, 466, 468, 469, 474, 546, 595, 596, 597, 846, 877, 878, 879, 961, 969, 1009], "flatten": [15, 30, 204, 213, 236, 282, 304, 316, 351, 466, 533, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 814], "topic_idx": 15, "top_features_ind": 15, "argsort": [15, 17, 19, 20, 21, 113, 115, 155, 156, 181, 199, 287, 296, 297, 319, 320, 340, 961], "top_featur": 15, "barh": [15, 115, 148, 149, 152, 153, 155, 156, 222, 285, 319, 320, 321], "fontdict": [15, 36], "labels": [15, 282], "set_vis": [15, 32, 262, 268, 278], "filter": [15, 43, 44, 187, 199, 236, 238, 260, 319, 333, 340, 351, 354, 372, 373, 381, 412, 452, 453, 467, 552, 555, 559, 560, 561, 562, 563, 564, 737, 800, 894, 918, 955, 956, 984, 987, 1003], "useless": [15, 110, 241, 351, 382, 479, 492, 622, 676, 949, 963, 1002], "strip": [15, 199, 320, 332, 339, 340, 460], "header": [15, 66, 239, 319, 320, 340, 343, 381, 452, 453, 762, 765, 766, 776], "footer": [15, 66, 239, 319, 320, 340, 452, 453], "repli": [15, 319, 344, 345, 348], "english": [15, 19, 66, 319, 320, 321, 350, 381, 552, 553, 555, 972, 973, 987, 1006], "occur": [15, 66, 112, 181, 185, 199, 315, 328, 345, 347, 353, 360, 370, 373, 375, 377, 381, 408, 472, 473, 536, 545, 552, 554, 555, 591, 635, 761, 762, 765, 766, 768, 776, 784, 787, 788, 789, 792, 835, 890, 953, 955, 963, 987, 993, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "data_sampl": 15, "tfidf_vector": 15, "max_df": [15, 239, 300, 319, 320, 552, 555, 1004], "min_df": [15, 19, 66, 239, 300, 319, 320, 381, 552, 555, 993, 995, 1004], "max_featur": [15, 29, 105, 116, 217, 235, 250, 289, 380, 382, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 552, 555, 561, 873, 874, 875, 876, 942, 949, 993, 995, 996, 1000, 1001, 1004, 1007, 1010], "stop_word": [15, 19, 319, 320, 381, 552, 553, 555], "tfidf": [15, 66, 300, 381, 555, 987], "tf_vector": 15, "beta_loss": [15, 502, 504, 511, 1000], "alpha_w": [15, 378, 502, 504, 511, 1006], "00005": 15, "alpha_h": [15, 378, 502, 504, 511, 1006], "tfidf_feature_nam": 15, "get_feature_names_out": [15, 19, 153, 155, 290, 319, 320, 321, 340, 347, 359, 374, 381, 389, 394, 397, 406, 407, 409, 411, 413, 428, 431, 446, 447, 448, 449, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 513, 530, 531, 532, 533, 534, 545, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 591, 592, 593, 594, 599, 602, 603, 604, 605, 606, 652, 653, 656, 809, 814, 817, 821, 824, 825, 828, 829, 830, 831, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 857, 858, 963, 1006, 1007, 1008, 1009, 1010], "solver": [15, 28, 31, 32, 43, 63, 150, 159, 170, 172, 173, 174, 181, 183, 189, 196, 197, 199, 273, 274, 275, 276, 285, 294, 319, 351, 357, 359, 363, 369, 373, 385, 416, 426, 435, 436, 442, 466, 497, 499, 504, 505, 508, 511, 513, 610, 611, 612, 616, 617, 622, 623, 624, 625, 626, 627, 630, 632, 633, 634, 636, 638, 640, 644, 645, 648, 651, 652, 653, 655, 657, 659, 751, 776, 791, 796, 799, 822, 823, 867, 868, 869, 870, 871, 947, 950, 953, 957, 967, 968, 972, 974, 993, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "mu": [15, 75, 76, 238, 378, 386, 437, 439, 440, 443, 444, 445, 504, 511, 947, 949, 1000, 1003], "mbnmf": 15, "learning_method": [15, 350, 500], "learning_offset": [15, 500], "tf_feature_nam": 15, "463": [15, 199, 255, 974], "plot_topics_extraction_with_nmf_lda": [15, 974], "graphic": [16, 19, 76, 154, 300, 319, 320, 321, 340, 351, 372, 373, 375, 378, 755, 756, 760, 795, 877, 953, 954, 960, 972, 987], "frontend": [16, 351], "mainli": [16, 26, 50, 101, 104, 137, 247, 255, 332, 347, 371, 575, 955, 960], "intend": [16, 54, 55, 91, 182, 311, 319, 345, 346, 347, 352, 357, 377, 432, 546, 637, 663, 834, 835, 845, 863, 948, 949, 953, 957, 964], "didact": [16, 345, 973], "induc": [16, 25, 53, 153, 165, 172, 174, 179, 182, 196, 214, 218, 315, 321, 370, 372, 378, 380, 410, 413, 503, 507, 517, 521, 522, 523, 524, 528, 529, 530, 607, 689, 719, 838, 873, 874, 875, 876, 946, 953, 967, 985], "mous": [16, 339], "button": [16, 345, 353, 985], "prettenho": 16, "tkagg": 16, "backend": [16, 333, 343, 359, 432, 863, 919, 921, 923, 953, 996, 1001, 1002, 1003, 1004, 1011], "backend_tkagg": 16, "figurecanvastkagg": 16, "navigationtoolbar2tk": 16, "navigationtoolbar2tkagg": 16, "deprec": [16, 290, 333, 348, 349, 354, 359, 364, 405, 409, 410, 411, 413, 414, 421, 423, 442, 490, 491, 500, 501, 502, 503, 504, 510, 517, 533, 534, 543, 544, 546, 591, 597, 602, 608, 609, 640, 641, 704, 705, 713, 714, 741, 742, 743, 765, 766, 768, 786, 787, 788, 812, 824, 867, 870, 881, 896, 897, 942, 943, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "tkinter": 16, "tk": 16, "contourset": 16, "dump_svmlight_fil": [16, 993, 994, 998, 1008, 1010], "y_min": [16, 29, 55, 103, 110, 119, 128, 139, 213, 273, 280, 301, 311, 312, 599, 601], "y_max": [16, 29, 55, 103, 110, 119, 128, 139, 199, 213, 273, 280, 301, 311, 312, 599, 601], "x_min": [16, 29, 49, 55, 103, 110, 114, 119, 128, 139, 170, 213, 273, 280, 301, 311, 312], "x_max": [16, 29, 49, 55, 103, 110, 119, 128, 139, 213, 273, 280, 301, 311, 312], "notifi": [16, 536, 537, 538, 991, 1003], "regist": [16, 165, 319, 351, 921, 923], "surfac": [16, 29, 91, 100, 101, 102, 103, 105, 122, 145, 150, 164, 173, 190, 244, 261, 303, 304, 322, 323, 325, 326, 327, 380, 468, 517, 521, 528, 595, 727, 873, 879, 947, 952, 967, 968, 969, 974], "surface_typ": 16, "add_observ": 16, "set_surfac": 16, "intvar": 16, "coef0": [16, 158, 311, 314, 416, 499, 603, 604, 607, 738, 740, 867, 868, 869, 870, 871, 951, 968], "kernel_map": 16, "hasattr": [16, 41, 53, 59, 77, 99, 110, 199, 212, 273, 280, 319, 359, 388, 392, 398, 914, 1003], "x2": [16, 79, 84, 103, 113, 140, 193, 347, 374, 552, 593, 663, 986], "decision_surfac": 16, "delta": [16, 376, 416], "clear_data": 16, "add_exampl": 16, "example_ad": 16, "refit": [16, 108, 126, 132, 134, 150, 231, 237, 239, 242, 245, 246, 250, 359, 377, 383, 466, 531, 591, 623, 629, 677, 762, 765, 766, 776, 791, 870, 942, 949, 953, 974, 1000, 1001, 1002], "docstr": [16, 345, 347, 351, 359, 412, 425, 436, 663, 665, 892, 942, 953, 956, 957, 967, 993, 1000, 1001, 1006, 1007, 1010], "set_xlim": [16, 29, 39, 57, 71, 75, 85, 106, 119, 149, 154, 179, 181, 186, 213, 224, 242, 244, 255, 263, 273, 278, 280, 281, 282, 283, 288, 294, 316], "attributeerror": [16, 374, 523, 541, 914, 986, 1002, 1003, 1005, 1009, 1010, 1011], "get_tk_widget": 16, "pack": [16, 354, 1001], "fill": [16, 32, 110, 126, 155, 233, 263, 324, 359, 374, 378, 479, 491, 502, 504, 511, 551, 594, 877, 879, 943, 956, 969, 1011], "_tkcanva": 16, "mpl_connect": 16, "button_press_ev": 16, "onclick": 16, "toolbar": 16, "controllbar": 16, "c_label": 16, "plot_kernel": 16, "exp": [16, 43, 51, 63, 96, 104, 114, 138, 165, 191, 263, 268, 271, 288, 289, 293, 311, 371, 373, 374, 379, 385, 416, 429, 485, 497, 500, 579, 580, 586, 605, 722, 729, 739, 822, 823, 841, 947, 949, 951, 955, 956, 957, 966, 967, 968, 985], "xdata": 16, "ydata": 16, "update_exampl": 16, "scalex": 16, "scalei": 16, "examples_load": 16, "remove_surfac": 16, "plot_support_vector": 16, "plot_decision_surfac": 16, "old": [16, 199, 345, 349, 351, 373, 432, 500, 610, 616, 863, 950, 973, 993, 998, 999, 1001, 1006, 1007, 1008], "isinst": [16, 32, 110, 199, 359], "lineset": 16, "support_vector": [16, 305], "circl": [16, 32, 57, 92, 119, 120, 128, 206, 216, 265, 268, 274, 278, 280, 298, 311, 326, 341, 349, 353, 373, 416, 426, 478, 486, 727, 968], "dash": [16, 31, 75, 101, 113, 123, 137, 140, 142, 153, 168, 173, 176, 182, 183, 190, 193, 194, 218, 238, 248, 309, 313, 967], "bone": [16, 194, 317], "rais": [16, 99, 182, 215, 216, 241, 282, 290, 345, 347, 349, 350, 351, 354, 357, 359, 364, 367, 374, 377, 401, 407, 408, 411, 413, 429, 433, 434, 435, 436, 437, 438, 439, 440, 446, 447, 448, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 473, 497, 498, 502, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 537, 540, 541, 545, 546, 552, 553, 554, 555, 557, 558, 566, 567, 574, 575, 581, 593, 596, 599, 600, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 654, 660, 662, 666, 673, 675, 676, 677, 678, 690, 692, 693, 701, 741, 745, 746, 747, 750, 751, 752, 760, 761, 762, 763, 764, 765, 766, 768, 769, 771, 776, 780, 784, 787, 788, 789, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 810, 812, 814, 815, 816, 820, 822, 823, 824, 825, 828, 829, 830, 831, 832, 837, 838, 839, 843, 844, 845, 852, 860, 861, 862, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 880, 883, 885, 886, 888, 889, 906, 910, 914, 937, 938, 939, 940, 953, 963, 995, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "valueerror": [16, 142, 215, 216, 347, 351, 364, 432, 541, 567, 581, 599, 635, 678, 797, 815, 824, 830, 844, 884, 888, 889, 938, 939, 940, 963, 995, 996, 997, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1010], "fm": 16, "kernel_group": 16, "radiobutton": 16, "command": [16, 212, 332, 333, 343, 345, 349, 351, 353, 363, 381, 472, 972, 987, 995], "anchor": [16, 249], "valbox": 16, "stringvar": 16, "textvari": 16, "cmap_group": 16, "hyperplan": [16, 84, 103, 140, 150, 159, 173, 190, 216, 241, 302, 303, 304, 305, 306, 307, 311, 312, 476, 595, 622, 623, 630, 632, 638, 639, 640, 641, 865, 867, 869, 870, 967, 968, 974], "train_button": 16, "get_pars": 16, "optpars": 16, "optionpars": 16, "op": [16, 349, 392, 622, 623, 630, 631, 632, 640, 641, 642, 822, 823, 865, 963], "add_opt": 16, "action": [16, 290, 319, 344, 348, 349, 363, 963, 1003], "store": [16, 30, 50, 51, 66, 68, 76, 83, 132, 145, 158, 167, 170, 185, 202, 209, 219, 229, 243, 247, 296, 321, 327, 332, 339, 340, 345, 347, 352, 353, 354, 357, 359, 374, 376, 378, 380, 381, 383, 384, 402, 404, 408, 410, 414, 421, 433, 434, 437, 438, 439, 440, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 467, 472, 498, 499, 505, 513, 514, 519, 520, 521, 522, 527, 528, 529, 530, 533, 534, 553, 574, 575, 591, 595, 596, 599, 602, 613, 614, 618, 624, 625, 626, 627, 630, 631, 637, 639, 640, 641, 642, 652, 653, 654, 656, 661, 662, 664, 665, 666, 744, 760, 761, 762, 768, 776, 784, 805, 806, 807, 808, 809, 811, 813, 814, 815, 816, 817, 820, 836, 843, 845, 846, 860, 861, 862, 885, 886, 910, 911, 924, 927, 939, 943, 945, 949, 956, 965, 968, 969, 972, 978, 987, 990, 993, 994, 995, 998, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "dest": [16, 292], "dump": [16, 17, 367, 451, 805, 806], "argv": [16, 212], "opt": [16, 343, 347], "arg": [16, 215, 274, 346, 359, 378, 380, 387, 535, 536, 537, 538, 539, 540, 541, 542, 581, 663, 829, 949, 955, 956], "parse_arg": 16, "wm_titl": 16, "mainloop": 16, "__main__": [16, 300, 357], "svm_gui": [16, 974, 985], "iso": [16, 84, 136, 150, 193, 203, 574, 577, 578, 974], "gpc": [16, 28, 84, 110, 119, 128, 136, 142, 143, 145, 150, 191, 193, 194, 214, 273, 281, 301, 313, 468, 574, 575, 577, 578, 583, 584, 586, 587, 667, 704, 974, 975, 989, 1003], "exercis": [16, 69, 110, 119, 134, 139, 141, 191, 194, 243, 251, 301, 312, 313, 316, 317, 334, 342, 345, 465, 466, 468, 469, 616, 617, 622, 762, 767, 807, 870, 974, 979, 996], "classic": [17, 176, 205, 224, 230, 342, 349, 375, 377, 378, 407, 411, 413, 423, 456, 464, 468, 474, 596, 597, 875, 876, 947, 949, 952, 955, 963, 972, 981, 993, 994, 998, 1007], "graph": [17, 24, 36, 41, 43, 63, 64, 145, 201, 235, 258, 260, 299, 332, 345, 348, 359, 370, 375, 384, 405, 408, 409, 416, 417, 421, 426, 427, 435, 436, 442, 475, 549, 550, 652, 655, 656, 659, 745, 807, 808, 809, 811, 813, 815, 816, 817, 818, 819, 820, 861, 950, 953, 956, 958, 966, 969, 972, 977, 983, 986, 993, 1000, 1001, 1003, 1006, 1008], "vertex": [17, 25, 373, 417, 1006], "en": [17, 23, 353, 495, 501, 559, 600, 628, 632, 635, 649, 650, 659, 669, 807, 808, 813, 814, 815, 816, 843, 859, 873, 874, 949, 953, 968, 969], "wiki": [17, 23, 351, 353, 559, 600, 632, 635, 659, 669, 807, 808, 813, 814, 815, 816, 843, 859, 873, 874, 949, 969], "eigenvector_centr": 17, "webpag": [17, 158, 345], "pagerank": 17, "insid": [17, 19, 25, 154, 183, 215, 238, 298, 307, 334, 339, 340, 347, 351, 364, 373, 381, 401, 407, 408, 411, 413, 429, 433, 434, 435, 436, 437, 438, 439, 440, 446, 447, 448, 497, 498, 502, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 545, 546, 552, 553, 554, 555, 558, 574, 575, 599, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 654, 763, 764, 769, 771, 780, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 810, 812, 815, 816, 822, 823, 825, 828, 830, 831, 832, 837, 844, 845, 860, 861, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 910, 913, 921, 960, 977, 1010], "accord": [17, 23, 25, 34, 46, 73, 107, 113, 135, 138, 164, 181, 199, 212, 287, 311, 320, 328, 345, 347, 357, 358, 359, 360, 370, 373, 375, 377, 378, 380, 381, 383, 401, 414, 416, 420, 424, 426, 429, 433, 468, 480, 481, 482, 489, 494, 496, 499, 500, 502, 504, 514, 517, 518, 525, 526, 527, 530, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 605, 606, 608, 609, 613, 622, 623, 634, 644, 655, 659, 698, 742, 743, 762, 763, 764, 765, 766, 769, 770, 771, 776, 786, 800, 801, 802, 803, 804, 809, 811, 812, 813, 814, 815, 816, 817, 818, 819, 828, 835, 843, 855, 857, 858, 865, 866, 867, 868, 870, 871, 947, 949, 953, 955, 956, 963, 966, 967, 998, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "tradit": [17, 52, 181, 196, 320, 334, 371, 380, 381, 596, 658, 949, 952, 963, 972, 977], "power_iter": 17, "martinsson": [17, 499, 505, 902], "dbpedia": 17, "content": [17, 283, 319, 321, 340, 345, 349, 351, 367, 372, 381, 450, 467, 472, 473, 552, 553, 555, 635, 879, 962, 977, 987, 994, 1003], "bz2": [17, 472, 473], "bz2file": 17, "pprint": [17, 114, 215, 239, 340, 897], "urlopen": 17, "randomized_svd": [17, 354, 415, 417, 496, 505, 508, 510, 993, 994, 999, 1006, 1007, 1008], "redirects_url": 17, "redirects_en": 17, "nt": 17, "redirects_filenam": 17, "page_links_url": 17, "page_links_en": 17, "page_links_filenam": 17, "resourc": [17, 39, 114, 148, 181, 275, 289, 331, 348, 358, 380, 765, 766, 954, 973, 977, 979, 989, 1001, 1006, 1007], "wait": [17, 343, 345, 349, 359, 630, 631, 632, 640, 642, 1005], "wb": 17, "index_map": 17, "setdefault": [17, 880], "dbpedia_resource_prefix_len": 17, "shortname_slic": 17, "short_nam": 17, "nt_uri": 17, "uri": 17, "prefix": [17, 66, 239, 260, 287, 345, 349, 351, 353, 383, 389, 406, 407, 409, 411, 413, 428, 431, 446, 447, 448, 449, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 513, 603, 604, 605, 606, 652, 653, 656, 768, 789, 809, 814, 817, 821, 825, 831, 857, 858, 999, 1000, 1006, 1008], "get_redirect": 17, "transit": [17, 315, 349, 1004], "malform": [17, 997], "1000000": [17, 500], "08d": 17, "isoformat": 17, "closur": 17, "transitive_target": 17, "seen": [17, 24, 37, 52, 63, 77, 90, 96, 108, 114, 153, 154, 177, 205, 211, 215, 274, 278, 307, 319, 340, 347, 349, 358, 359, 371, 373, 374, 375, 377, 378, 379, 380, 381, 382, 383, 389, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 428, 429, 433, 434, 435, 436, 437, 438, 439, 440, 446, 447, 448, 449, 485, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 574, 575, 587, 591, 592, 593, 594, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 652, 653, 654, 655, 656, 760, 761, 762, 765, 766, 776, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 821, 822, 823, 824, 825, 828, 829, 830, 831, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 857, 858, 860, 861, 862, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 928, 934, 942, 948, 956, 957, 963, 969, 977, 982, 983, 985, 986, 1005, 1006, 1007, 1008, 1009, 1010], "break": [17, 36, 43, 66, 76, 150, 170, 173, 187, 215, 226, 255, 290, 297, 302, 319, 321, 345, 347, 349, 351, 358, 373, 433, 476, 603, 737, 741, 744, 760, 838, 845, 850, 867, 870, 949, 952, 961, 963, 968, 973, 974, 993, 994, 1000, 1001, 1003, 1005, 1009], "get_adjacency_matrix": 17, "resolv": [17, 344, 345, 349, 353, 360, 381, 410, 416, 426, 655, 659, 902, 943, 953, 1000, 1002, 1003, 1006], "lil_matrix": 17, "float32": [17, 113, 204, 276, 292, 333, 340, 345, 347, 369, 521, 522, 523, 524, 527, 528, 529, 530, 557, 558, 604, 605, 622, 663, 726, 830, 873, 874, 875, 876, 883, 929, 930, 931, 969, 978, 987, 996, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "del": [17, 351, 1005, 1006], "csr": [17, 321, 332, 339, 340, 354, 357, 359, 381, 384, 407, 410, 411, 413, 414, 423, 461, 472, 487, 491, 517, 518, 521, 522, 528, 529, 530, 554, 594, 622, 656, 678, 731, 755, 807, 808, 809, 811, 813, 815, 816, 817, 818, 819, 820, 828, 832, 834, 836, 837, 838, 840, 843, 844, 845, 848, 849, 850, 852, 855, 858, 873, 874, 875, 876, 881, 885, 886, 908, 916, 928, 929, 930, 931, 932, 933, 934, 956, 963, 967, 993, 994, 999, 1001, 1002, 1008, 1009, 1010], "tocsr": 17, "convers": [17, 114, 172, 319, 328, 334, 339, 345, 347, 353, 357, 367, 381, 536, 820, 829, 837, 885, 886, 939, 950, 973, 977, 1001, 1002, 1003, 1006, 1009], "5m": 17, "ram": [17, 50, 334, 380, 857, 858, 955, 968, 987, 999, 1005, 1008, 1009], "5000000": 17, "strongest": [17, 174], "highest": [17, 19, 25, 77, 131, 135, 185, 236, 238, 249, 289, 319, 345, 357, 371, 373, 377, 380, 382, 401, 519, 521, 528, 556, 559, 560, 562, 563, 564, 567, 568, 570, 599, 601, 689, 719, 757, 760, 762, 765, 766, 776, 862, 873, 904, 942, 949, 953, 954, 957, 967, 969, 1005], "centrality_scor": 17, "networkx": [17, 354], "copyright": [17, 77], "aric": 17, "hagberg": 17, "lanl": 17, "gov": [17, 342], "dan": [17, 993, 997, 998, 999, 1001, 1002], "schult": 17, "dschult": 17, "pieter": [17, 999, 1000, 1007], "swart": 17, "incoming_count": 17, "nonzero": [17, 19, 96, 180, 212, 242, 321, 370, 384, 408, 487, 488, 495, 501, 506, 512, 552, 555, 649, 650, 663, 807, 808, 811, 813, 815, 816, 949, 953], "indptr": [17, 258, 327, 928, 929, 930, 931, 932, 933, 934, 1001, 1009], "dangl": 17, "isclos": 17, "guess": [17, 101, 110, 377, 380, 381, 442, 496, 502, 504, 505, 511, 751, 953, 967], "prev_scor": 17, "dot": [17, 30, 31, 41, 46, 51, 54, 59, 73, 74, 75, 77, 79, 80, 88, 89, 90, 94, 96, 101, 104, 137, 138, 144, 145, 153, 162, 165, 173, 175, 176, 188, 213, 225, 226, 228, 229, 242, 303, 305, 311, 332, 347, 351, 354, 359, 370, 378, 381, 497, 502, 504, 511, 554, 555, 578, 610, 611, 614, 616, 617, 618, 621, 624, 625, 626, 627, 645, 648, 651, 724, 726, 837, 877, 903, 951, 955, 963, 967, 968, 986, 1002], "converg": [17, 54, 58, 73, 74, 112, 114, 137, 143, 146, 174, 183, 189, 197, 225, 227, 274, 275, 278, 283, 297, 334, 354, 359, 370, 373, 378, 381, 383, 385, 404, 407, 410, 411, 412, 413, 416, 418, 423, 424, 425, 426, 435, 436, 442, 446, 447, 448, 497, 499, 500, 501, 502, 503, 510, 517, 535, 574, 608, 609, 610, 611, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 632, 636, 638, 640, 642, 646, 647, 651, 652, 654, 655, 658, 659, 760, 761, 814, 822, 823, 860, 861, 867, 943, 948, 949, 950, 952, 957, 967, 993, 996, 997, 998, 1000, 1001, 1004, 1006, 1007, 1008, 1009, 1010], "l_inf": 17, "scores_max": 17, "err": [17, 79, 91, 101], "6f": [17, 91, 243, 700, 758], "wikipedia_principal_eigenvector": [17, 974], "concern": [18, 33, 72, 78, 81, 86, 98, 100, 129, 136, 147, 150, 157, 159, 200, 223, 229, 254, 256, 259, 272, 277, 295, 302, 318, 322, 332, 347, 372, 950, 965], "twenti": [19, 212, 342, 370, 373, 987], "comp": [19, 79, 80, 90, 97, 276, 300, 319, 320, 321, 340, 987], "window": [19, 300, 340, 345, 347, 348, 381, 972, 993, 996, 1000, 1004, 1006, 1007], "misc": [19, 50, 90, 239, 300, 319, 320, 321, 340, 986], "categori": [19, 41, 59, 66, 67, 111, 121, 153, 154, 181, 189, 196, 218, 239, 274, 275, 280, 284, 285, 289, 292, 294, 300, 319, 320, 321, 339, 340, 354, 372, 373, 374, 380, 381, 383, 452, 460, 461, 467, 525, 526, 612, 622, 623, 633, 644, 706, 721, 722, 801, 838, 839, 846, 943, 949, 950, 951, 955, 961, 978, 987, 999, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "noth": [19, 66, 319, 320, 350, 506, 678, 828, 837, 886, 963], "frequenc": [19, 26, 137, 154, 165, 175, 181, 212, 288, 289, 319, 320, 321, 340, 357, 371, 377, 378, 380, 381, 382, 515, 521, 523, 524, 525, 528, 552, 553, 554, 555, 568, 622, 623, 628, 630, 632, 638, 639, 640, 649, 650, 794, 829, 838, 839, 865, 867, 870, 873, 875, 891, 949, 950, 955, 963, 967, 969, 995, 997, 998, 1004, 1011], "dhillon": [19, 370, 415, 417, 475], "cut": [19, 40, 43, 62, 63, 203, 349, 357, 370, 373, 410, 416, 417, 426, 552, 555, 655, 659, 963], "minibatchkmean": [19, 33, 35, 37, 40, 41, 47, 55, 56, 57, 58, 60, 84, 150, 320, 334, 373, 378, 404, 406, 411, 476, 742, 974, 994, 999, 1000, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "coclust": [19, 370, 415, 477], "45": [19, 37, 61, 69, 79, 131, 142, 155, 170, 181, 199, 245, 249, 250, 297, 307, 377, 380, 381, 528, 529, 591, 598, 751, 760, 869, 943, 953, 961, 971, 983, 993, 996], "4415": 19, "3015": 19, "talk": [19, 66, 239, 319, 320, 321, 340, 359, 367, 977, 979, 987], "polit": [19, 319, 340, 344, 949, 954], "mideast": [19, 340], "cosmo": 19, "angmar": 19, "alfalfa": 19, "alphalpha": 19, "prolin": [19, 283, 342], "benson": 19, "1948": 19, "4325": 19, "gun": [19, 340], "sci": [19, 66, 319, 320, 321, 340, 357, 653, 657, 836, 950, 963, 987], "med": [19, 66, 247, 340, 963, 987], "geb": 19, "gordon": [19, 227, 999, 1003, 1005, 1007], "clinton": 19, "pitt": 19, "cdt": 19, "surrend": 19, "veal": 19, "1259": 19, "3534": 19, "soc": [19, 340, 987], "religion": [19, 239, 319, 320, 321, 340, 954, 987], "alt": [19, 239, 300, 319, 320, 321, 340, 353, 987], "atheism": [19, 239, 300, 319, 320, 321, 340, 987], "god": [19, 319, 320, 987], "jesu": [19, 319, 320], "kent": 19, "belief": [19, 238, 821, 958], "christ": 19, "faith": [19, 143, 312], "moral": [19, 67, 319, 622, 1001, 1005, 1006], "775": [19, 167], "1623": 19, "pc": [19, 300, 321, 340], "hardwar": [19, 300, 321, 332, 333, 340, 343, 357, 363, 369, 972, 1007, 1008], "scsi": 19, "nada": 19, "vga": 19, "esdi": 19, "isa": 19, "kth": [19, 783], "s3": [19, 88, 135, 169, 170, 342, 986], "vlb": 19, "bmug": 19, "2180": 19, "2802": 19, "mac": [19, 284, 300, 340, 345, 672, 953], "electron": [19, 135, 340, 342, 502, 504, 511, 591], "voltag": 19, "ship": [19, 121, 149, 324, 333, 343, 363, 381, 949, 993, 1002], "circuit": [19, 950], "mpce": 19, "kolstad": 19, "spectralcoclust": [19, 21, 370, 415, 995, 1000, 1004], "v_measure_scor": [19, 34, 35, 46, 55, 293, 320, 373, 681, 699, 700, 720, 953, 1002], "number_norm": 19, "token": [19, 321, 332, 340, 349, 381, 500, 552, 553, 554, 555, 993, 1001, 1005], "placehold": [19, 349, 591, 592, 593, 594, 777, 778, 781, 782, 943], "begin": [19, 99, 135, 137, 233, 240, 257, 290, 319, 328, 345, 350, 351, 359, 370, 373, 380, 517, 518, 523, 525, 526, 630, 631, 640, 641, 642, 942, 945, 949, 953, 963, 965, 967, 1001, 1007, 1008], "By": [19, 42, 87, 117, 118, 160, 185, 215, 247, 255, 278, 287, 293, 294, 311, 319, 333, 345, 347, 351, 352, 359, 364, 373, 374, 376, 377, 378, 379, 380, 382, 402, 405, 409, 410, 414, 428, 431, 432, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 488, 490, 513, 514, 521, 522, 523, 524, 528, 529, 549, 550, 552, 553, 555, 570, 573, 596, 597, 635, 637, 639, 641, 654, 656, 658, 661, 663, 664, 666, 667, 682, 692, 693, 697, 701, 746, 747, 750, 757, 759, 765, 766, 811, 825, 826, 838, 839, 841, 843, 853, 855, 863, 868, 869, 873, 874, 875, 876, 885, 886, 921, 942, 943, 945, 949, 953, 960, 961, 963, 965, 969, 978, 982, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1003, 1005, 1007, 1010], "isdigit": [19, 381], "numbernormalizingvector": 19, "build_token": [19, 381, 552, 553, 555], "super": [19, 24, 26, 347, 381, 1001], "forsal": [19, 321, 340], "rec": [19, 321, 340, 605], "auto": [19, 24, 26, 31, 54, 55, 85, 131, 132, 135, 141, 158, 164, 201, 206, 213, 220, 235, 237, 245, 258, 261, 266, 280, 287, 288, 289, 290, 291, 292, 303, 304, 305, 310, 313, 314, 321, 339, 340, 347, 380, 382, 383, 384, 405, 408, 409, 410, 411, 413, 414, 416, 419, 420, 421, 423, 426, 460, 472, 473, 499, 502, 504, 505, 508, 511, 513, 521, 522, 525, 526, 527, 528, 529, 531, 532, 557, 558, 561, 566, 571, 572, 593, 595, 596, 597, 599, 603, 610, 611, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 636, 637, 638, 644, 645, 646, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 662, 664, 666, 698, 704, 765, 766, 793, 805, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 817, 818, 819, 822, 823, 838, 839, 846, 857, 858, 862, 865, 866, 867, 868, 869, 870, 871, 875, 876, 901, 902, 919, 922, 944, 947, 949, 950, 953, 954, 956, 963, 968, 972, 995, 996, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "motorcycl": [19, 340], "sport": [19, 340], "basebal": [19, 340], "hockei": [19, 340], "crypt": [19, 340], "n_cluster": [19, 20, 21, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 51, 53, 54, 55, 56, 57, 58, 59, 61, 63, 64, 87, 291, 320, 345, 359, 373, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 423, 424, 425, 426, 427, 475, 477, 674, 755, 756, 986, 993, 997, 999, 1001, 1002, 1004, 1007], "svd_method": [19, 415, 417, 496, 996], "kmean": [19, 20, 33, 40, 42, 43, 45, 47, 50, 54, 55, 58, 150, 227, 230, 281, 291, 320, 354, 373, 404, 407, 412, 413, 416, 426, 476, 674, 755, 756, 760, 761, 830, 956, 963, 973, 974, 986, 993, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "20000": [19, 89], "n_init": [19, 39, 40, 42, 47, 54, 55, 58, 61, 201, 202, 203, 204, 288, 291, 320, 373, 407, 411, 413, 415, 416, 417, 423, 426, 654, 658, 760, 761, 986, 993, 1001, 1007, 1008, 1009], "y_coclust": 19, "row_labels_": [19, 20, 21, 370, 415, 417], "y_kmean": 19, "fit_predict": [19, 53, 54, 57, 208, 215, 218, 265, 347, 359, 373, 391, 395, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 416, 433, 527, 641, 755, 756, 760, 761, 811, 817, 825, 869, 959, 998, 1001, 1002, 1006, 1008, 1010], "document_nam": 19, "bicluster_ncut": 19, "get_indic": [19, 388, 415, 417], "float_info": 19, "row_compl": 19, "logical_not": [19, 61, 96, 184], "rows_": [19, 370, 388, 415, 417], "col_compl": 19, "columns_": [19, 370, 388, 415, 417], "most_common": 19, "counter": [19, 101, 245, 373, 640, 641, 642, 1006], "itemgett": 19, "revers": [19, 71, 135, 186, 238, 498, 505, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 575, 752, 825, 953, 993, 994, 1003, 1005, 1009], "best_idx": [19, 237], "get_shap": [19, 388, 415, 417], "cluster_doc": 19, "cluster_word": 19, "cat_str": 19, "0f": [19, 55], "out_of_cluster_doc": 19, "word_col": 19, "word_scor": 19, "important_word": 19, "plot_bicluster_newsgroup": [19, 974], "semi": [19, 29, 110, 119, 128, 139, 213, 216, 280, 289, 304, 311, 321, 340, 359, 452, 468, 499, 552, 554, 640, 692, 791, 825, 829, 860, 861, 862, 870, 951, 956, 959, 974, 975, 989, 993, 1005, 1008], "supervis": [19, 24, 26, 29, 34, 46, 51, 55, 80, 95, 106, 110, 119, 127, 128, 139, 202, 213, 216, 226, 238, 267, 280, 289, 299, 304, 311, 320, 321, 332, 340, 347, 358, 359, 371, 373, 376, 377, 378, 380, 381, 383, 401, 403, 428, 452, 467, 468, 517, 552, 554, 557, 558, 598, 640, 692, 763, 764, 767, 769, 770, 771, 772, 777, 778, 779, 780, 781, 782, 785, 786, 787, 788, 790, 791, 814, 824, 825, 829, 839, 846, 860, 861, 862, 870, 947, 950, 953, 955, 956, 959, 963, 964, 968, 969, 970, 972, 973, 974, 976, 978, 979, 981, 987, 989, 993, 999, 1005], "checkerboard": [20, 370, 415, 417, 475, 477], "simultan": [20, 52, 88, 242, 246, 293, 315, 326, 337, 370, 373, 942, 953, 954, 969, 977, 1000], "identifi": [20, 83, 89, 95, 114, 115, 152, 153, 181, 184, 185, 227, 229, 236, 241, 247, 267, 285, 289, 311, 319, 320, 339, 340, 344, 345, 349, 350, 359, 373, 374, 377, 380, 381, 410, 414, 421, 451, 460, 472, 473, 519, 520, 521, 522, 527, 528, 529, 530, 570, 607, 613, 663, 676, 737, 790, 811, 830, 860, 861, 942, 949, 953, 959, 966, 977, 985, 1000, 1002, 1007, 1008], "particularli": [20, 29, 66, 67, 70, 96, 119, 182, 210, 238, 280, 288, 317, 328, 332, 345, 354, 359, 373, 374, 376, 379, 381, 460, 768, 784, 802, 902, 921, 922, 949, 950, 953, 955, 961, 973, 977, 986, 993, 998, 1000, 1001, 1007], "suit": [20, 87, 119, 153, 181, 182, 208, 229, 290, 291, 293, 319, 333, 345, 347, 350, 351, 353, 357, 363, 376, 378, 380, 414, 416, 467, 641, 802, 846, 896, 942, 945, 950, 953, 955, 956, 967, 972, 973, 977, 980, 1000, 1007], "arrang": [20, 257, 596, 796, 797, 798, 799, 953], "genom": [20, 477], "rearrang": [20, 21, 370], "kemaleren": [20, 21], "make_checkerboard": [20, 475, 995], "uniform": [20, 29, 34, 50, 113, 114, 117, 131, 138, 143, 146, 160, 161, 195, 206, 208, 211, 246, 261, 264, 265, 270, 273, 279, 281, 282, 285, 291, 293, 306, 347, 350, 373, 402, 403, 515, 533, 534, 574, 575, 592, 603, 613, 614, 618, 632, 640, 641, 642, 663, 685, 686, 691, 708, 709, 711, 713, 714, 716, 748, 753, 754, 766, 774, 776, 800, 801, 804, 807, 808, 815, 816, 830, 842, 844, 854, 890, 904, 942, 943, 952, 953, 956, 999, 1001, 1003, 1007, 1009], "matshow": [20, 21, 63, 109, 133, 275, 466], "afterward": [20, 349, 499, 505, 789], "row_idx_shuffl": 20, "permut": [20, 21, 34, 76, 107, 109, 115, 128, 130, 150, 151, 197, 231, 238, 282, 285, 299, 362, 368, 373, 380, 428, 460, 464, 468, 523, 524, 528, 529, 591, 594, 598, 643, 668, 669, 681, 699, 700, 718, 720, 758, 779, 781, 790, 791, 825, 839, 870, 873, 874, 902, 922, 924, 927, 953, 967, 974, 982, 985, 989, 993, 999, 1006, 1008], "col_idx_shuffl": 20, "redefin": [20, 114, 153], "lost": [20, 54, 77, 340, 346, 357, 950, 953], "ground": [20, 30, 37, 42, 46, 54, 55, 58, 73, 77, 80, 90, 117, 145, 165, 175, 181, 182, 218, 230, 241, 320, 359, 372, 373, 667, 668, 669, 672, 676, 677, 678, 679, 681, 682, 685, 686, 687, 691, 692, 693, 697, 699, 700, 701, 702, 704, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 720, 746, 747, 748, 749, 750, 753, 754, 758, 759, 953, 966, 978, 986, 1001], "truth": [20, 30, 37, 42, 46, 54, 55, 58, 73, 77, 80, 90, 94, 117, 145, 165, 175, 181, 182, 218, 230, 241, 320, 359, 372, 373, 667, 668, 669, 672, 676, 677, 678, 679, 681, 682, 685, 686, 687, 689, 691, 692, 693, 697, 699, 700, 701, 702, 704, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 746, 747, 748, 749, 750, 753, 754, 758, 759, 953, 978, 986, 1001, 1007], "consensus_scor": [20, 21, 370, 995], "biclusters_": [20, 21, 388, 415, 417], "consensu": [20, 21, 34, 344, 345, 360, 370, 373, 613, 635, 642, 643, 683, 953], "perfect": [20, 25, 34, 66, 76, 90, 92, 177, 181, 319, 320, 345, 349, 373, 377, 517, 518, 654, 658, 668, 669, 672, 681, 689, 691, 694, 700, 706, 719, 720, 748, 749, 758, 949, 953, 956, 968, 977, 985, 1007], "ascend": [20, 67, 155, 284, 380, 414, 420, 591, 599, 877, 878, 879, 967, 1003, 1009], "column_labels_": [20, 21, 370, 415, 417], "reorder": [20, 93, 359, 661, 682, 973, 1001], "reordered_row": 20, "reordered_data": 20, "step": [20, 25, 31, 39, 51, 52, 55, 64, 66, 67, 68, 69, 70, 76, 80, 90, 94, 101, 106, 110, 111, 112, 121, 132, 133, 134, 139, 142, 153, 155, 181, 189, 199, 209, 210, 213, 219, 222, 230, 236, 239, 245, 247, 258, 260, 261, 266, 273, 276, 280, 283, 284, 288, 291, 301, 303, 307, 320, 321, 323, 328, 332, 340, 343, 344, 345, 347, 349, 350, 353, 357, 359, 370, 371, 373, 375, 376, 378, 380, 381, 382, 406, 411, 413, 500, 501, 502, 503, 510, 527, 552, 553, 555, 557, 558, 561, 570, 591, 608, 612, 630, 631, 633, 640, 642, 643, 644, 658, 664, 760, 761, 762, 765, 766, 776, 796, 797, 798, 799, 821, 822, 823, 825, 826, 828, 865, 866, 867, 868, 870, 871, 901, 902, 924, 928, 943, 949, 952, 957, 958, 963, 967, 969, 970, 972, 976, 983, 987, 993, 997, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1009], "outer": [20, 92, 243, 298, 415, 478, 604, 614, 615, 618, 945, 994], "product": [20, 67, 87, 122, 137, 142, 154, 311, 328, 332, 347, 348, 351, 354, 367, 370, 378, 380, 415, 502, 504, 511, 546, 553, 554, 555, 577, 578, 597, 604, 628, 629, 649, 650, 724, 726, 738, 740, 837, 840, 857, 858, 903, 942, 945, 949, 951, 963, 965, 967, 968, 972, 977, 1001], "shade": [20, 50, 164, 261, 266, 303, 378], "631": [20, 264, 974], "plot_spectral_biclust": [20, 974], "silhouett": [20, 33, 35, 46, 54, 55, 150, 320, 345, 411, 476, 755, 756, 974, 993, 997], "propag": [20, 30, 33, 34, 46, 60, 61, 150, 295, 340, 372, 404, 418, 466, 476, 478, 661, 668, 669, 677, 678, 681, 682, 700, 756, 758, 825, 839, 860, 861, 862, 919, 920, 957, 974, 975, 988, 989, 993, 1005, 1008], "biclust": [21, 66, 298, 300, 319, 320, 321, 381, 388, 413, 415, 417, 452, 475, 477, 555, 683, 758, 953, 974, 988, 989, 995, 999], "make_biclust": [21, 477, 995], "implant": 21, "row_idx": [21, 181], "col_idx": 21, "fit_data": 21, "405": [21, 974], "plot_spectral_coclust": [21, 974], "being": [23, 26, 32, 42, 49, 52, 77, 80, 83, 92, 101, 105, 118, 137, 142, 153, 155, 158, 175, 215, 218, 232, 238, 276, 282, 283, 307, 311, 319, 321, 343, 344, 345, 347, 349, 350, 357, 359, 360, 367, 373, 375, 377, 380, 381, 382, 383, 384, 386, 405, 406, 408, 409, 414, 420, 433, 439, 457, 487, 533, 604, 613, 620, 636, 638, 651, 654, 658, 676, 682, 697, 699, 746, 752, 760, 805, 806, 811, 813, 815, 816, 817, 840, 858, 903, 942, 943, 949, 952, 953, 956, 959, 960, 963, 965, 967, 968, 969, 993, 994, 999, 1000, 1001, 1002, 1004, 1005, 1007, 1008, 1009, 1010], "postprocess": [23, 371, 499, 505], "brier": [23, 24, 371, 673], "brier_scor": 23, "sigmoid": [23, 24, 25, 26, 337, 380, 401, 416, 499, 525, 584, 603, 607, 728, 737, 740, 822, 823, 867, 868, 869, 870, 871, 958, 968, 989, 1006, 1010], "isoton": [23, 24, 71, 150, 207, 401, 621, 888, 974, 975, 989, 994, 995, 996, 997, 999, 1006, 1009], "belong": [23, 26, 28, 52, 57, 218, 238, 287, 293, 298, 339, 340, 370, 371, 373, 374, 376, 377, 380, 388, 404, 407, 411, 412, 413, 415, 417, 487, 676, 694, 769, 775, 786, 812, 832, 846, 909, 910, 949, 952, 953, 955, 956, 957, 959, 968, 972, 978, 985], "mblondel": [23, 45, 172, 202, 239, 319, 339, 472], "telecom": [23, 24, 39, 208, 977], "balaz": [23, 997], "kegl": [23, 997], "jhm": [23, 24, 25, 26, 137, 138, 140, 141, 142, 143, 144, 146, 214], "informatik": [23, 24, 25, 26, 137, 138, 140, 141, 142, 143, 144, 146, 214, 953], "uni": [23, 24, 25, 26, 70, 105, 137, 138, 140, 141, 142, 143, 144, 146, 172, 213, 214, 298, 315], "bremen": [23, 24, 25, 26, 137, 138, 140, 141, 142, 143, 144, 146, 214], "make_blob": [23, 25, 31, 35, 39, 40, 41, 46, 52, 53, 54, 56, 57, 59, 60, 61, 84, 173, 193, 208, 227, 281, 288, 291, 305, 308, 309, 316, 341, 347, 348, 380, 479, 660, 674, 755, 756, 1001, 1004, 1007], "50000": 23, "n_bin": [23, 24, 26, 50, 181, 199, 279, 281, 285, 402, 403, 830, 963], "calibration_curv": [23, 371, 401, 402, 1002, 1007, 1011], "blob": [23, 31, 32, 39, 41, 54, 59, 61, 84, 373, 412, 476], "sample_weight": [23, 162, 181, 194, 199, 215, 288, 293, 294, 317, 345, 359, 364, 373, 380, 384, 390, 396, 401, 407, 408, 411, 413, 423, 424, 429, 433, 446, 447, 448, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 574, 575, 596, 597, 598, 599, 601, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 651, 661, 662, 664, 666, 667, 671, 672, 673, 676, 677, 680, 682, 684, 685, 686, 687, 689, 690, 691, 692, 693, 697, 698, 701, 702, 703, 704, 706, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 719, 745, 746, 747, 748, 750, 751, 752, 753, 754, 757, 759, 762, 776, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 810, 812, 815, 816, 822, 823, 825, 830, 844, 845, 860, 861, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 879, 913, 941, 953, 967, 968, 969, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010], "sw_train": [23, 288], "sw_test": [23, 288], "calibratedclassifiercv": [23, 24, 25, 328, 359, 364, 371, 640, 942, 968, 973, 997, 999, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010], "brier_score_loss": [23, 24, 371, 953, 1001, 1002, 1003, 1011], "gaussiannb": [23, 24, 26, 29, 123, 240, 328, 371, 380, 401, 533, 800, 801, 802, 804, 826, 947, 954, 955, 997, 998, 999, 1001, 1006, 1009], "With": [23, 32, 41, 64, 71, 83, 92, 118, 131, 150, 154, 181, 183, 207, 209, 214, 216, 222, 238, 262, 332, 340, 345, 347, 359, 373, 374, 377, 380, 382, 401, 403, 465, 546, 596, 597, 622, 823, 826, 828, 839, 845, 846, 872, 874, 946, 949, 950, 953, 954, 956, 957, 960, 967, 969, 974, 978, 979, 986, 990, 996, 1000, 1001, 1003, 1005, 1007], "itself": [23, 46, 52, 101, 114, 117, 154, 165, 179, 215, 221, 247, 258, 285, 307, 320, 332, 334, 344, 345, 347, 349, 359, 364, 372, 373, 384, 404, 405, 408, 409, 410, 433, 434, 435, 436, 437, 438, 439, 440, 491, 495, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 515, 530, 533, 547, 556, 559, 560, 562, 563, 564, 566, 567, 603, 604, 605, 606, 607, 609, 619, 653, 655, 755, 756, 800, 801, 802, 803, 804, 805, 806, 810, 818, 819, 830, 831, 832, 860, 861, 910, 945, 949, 950, 952, 956, 957, 961, 972, 997, 1008], "prob_pos_clf": 23, "predict_proba": [23, 24, 25, 26, 28, 32, 119, 123, 135, 138, 139, 140, 141, 215, 247, 257, 273, 280, 283, 287, 289, 319, 347, 352, 359, 371, 372, 380, 401, 402, 513, 514, 515, 517, 519, 521, 523, 525, 528, 531, 533, 557, 558, 574, 583, 584, 586, 587, 595, 596, 597, 622, 623, 640, 662, 664, 666, 704, 705, 751, 760, 761, 762, 765, 766, 776, 786, 793, 794, 795, 796, 797, 800, 801, 802, 803, 804, 807, 815, 822, 825, 832, 860, 861, 862, 867, 870, 873, 875, 949, 953, 955, 957, 960, 966, 967, 968, 969, 993, 994, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1011], "clf_isoton": 23, "prob_pos_isoton": 23, "clf_sigmoid": 23, "prob_pos_sigmoid": 23, "clf_score": 23, "No": [23, 103, 116, 165, 173, 187, 189, 190, 215, 297, 312, 315, 324, 342, 353, 363, 373, 438, 523, 524, 554, 555, 599, 609, 628, 640, 642, 649, 650, 760, 949, 1010], "clf_isotonic_scor": 23, "clf_sigmoid_scor": 23, "084": 23, "y_uniqu": 23, "rainbow": [23, 203], "this_i": [23, 187], "this_x": [23, 179, 187, 985], "this_sw": 23, "lexsort": 23, "linewidth": [23, 31, 32, 34, 37, 55, 69, 73, 80, 85, 102, 114, 118, 137, 141, 145, 170, 171, 175, 176, 177, 179, 182, 184, 187, 195, 198, 208, 216, 218, 247, 251, 264, 268, 279, 288, 294, 305, 306, 308, 313, 325, 983], "51": [23, 79, 142, 199, 255, 258, 373, 374, 729, 739, 744, 949], "uncalibr": [23, 24, 25, 401], "gnb": [23, 24, 26, 123, 380, 533, 955], "388": [23, 195, 974], "plot_calibr": [23, 974], "metadata": [23, 99, 150, 162, 207, 320, 339, 340, 367, 387, 390, 393, 396, 397, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 428, 429, 432, 433, 434, 435, 436, 437, 438, 439, 440, 446, 447, 448, 449, 452, 453, 460, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 545, 546, 547, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 574, 575, 591, 592, 593, 594, 599, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 652, 653, 654, 655, 656, 760, 761, 762, 763, 764, 765, 766, 767, 769, 770, 771, 772, 775, 776, 777, 778, 779, 780, 781, 782, 783, 786, 787, 788, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 821, 822, 823, 824, 825, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 857, 858, 860, 861, 862, 863, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 909, 910, 911, 912, 913, 937, 953, 972, 973, 974, 978, 989, 1009], "rout": [23, 99, 150, 162, 207, 387, 390, 393, 396, 397, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 428, 429, 432, 433, 434, 435, 436, 437, 438, 439, 440, 446, 447, 448, 449, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 545, 546, 547, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 574, 575, 591, 592, 593, 594, 599, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 652, 653, 654, 655, 656, 760, 761, 762, 763, 764, 765, 766, 767, 769, 770, 771, 772, 775, 776, 777, 778, 779, 780, 781, 782, 783, 786, 787, 788, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 821, 822, 823, 824, 825, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 857, 858, 860, 861, 862, 863, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 910, 911, 912, 913, 937, 974, 989, 1007, 1009], "reliabl": [24, 26, 371, 377, 402, 403, 610, 969, 977], "diagram": [24, 26, 67, 220, 288, 294, 347, 371, 373, 402, 403, 432, 863, 963, 1004, 1005, 1010], "redund": [24, 26, 97, 134, 225, 230, 294, 328, 341, 344, 345, 350, 359, 371, 479, 598, 973, 987, 1005], "uninform": [24, 26, 285, 341, 350, 381, 942, 949, 1001], "rest": [24, 28, 111, 115, 150, 159, 165, 190, 196, 215, 218, 227, 255, 287, 300, 304, 351, 359, 372, 383, 476, 574, 595, 608, 622, 623, 640, 717, 751, 793, 794, 795, 814, 865, 867, 870, 949, 953, 954, 957, 960, 968, 974, 977, 997, 998, 1007, 1008, 1009], "make_classif": [24, 26, 29, 84, 105, 106, 108, 132, 134, 235, 241, 249, 250, 268, 273, 280, 287, 289, 293, 315, 328, 341, 348, 369, 401, 402, 451, 476, 517, 519, 521, 528, 569, 571, 630, 661, 662, 664, 666, 784, 789, 790, 792, 795, 822, 825, 865, 872, 942, 953, 954, 963, 968, 999, 1000, 1001, 1003], "100_000": [24, 26, 153], "n_inform": [24, 26, 29, 84, 105, 108, 132, 134, 160, 165, 184, 185, 235, 241, 251, 268, 273, 280, 287, 315, 347, 350, 479, 488, 517, 518, 519, 520, 528, 529, 569, 570, 571, 572, 573, 629, 795, 954, 1001], "n_redund": [24, 26, 29, 84, 108, 132, 134, 235, 241, 268, 273, 280, 350, 401, 479, 517, 519, 528, 795], "logisticregress": [24, 26, 28, 67, 69, 106, 123, 127, 134, 135, 164, 171, 172, 173, 174, 188, 196, 197, 209, 210, 220, 222, 241, 247, 276, 280, 287, 288, 289, 290, 291, 293, 319, 332, 345, 347, 351, 353, 358, 364, 371, 374, 380, 382, 393, 398, 402, 531, 533, 561, 595, 598, 607, 616, 623, 636, 637, 638, 639, 640, 651, 664, 751, 776, 784, 790, 792, 796, 797, 799, 850, 851, 853, 854, 855, 856, 872, 896, 897, 898, 937, 949, 953, 954, 963, 967, 968, 983, 985, 993, 994, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "baselin": [24, 101, 111, 114, 124, 135, 156, 160, 199, 248, 257, 289, 320, 342, 373, 382, 515, 516, 598, 953, 956, 987, 1009], "regular": [24, 29, 33, 54, 56, 57, 58, 67, 69, 74, 92, 100, 112, 113, 115, 119, 126, 128, 137, 138, 139, 144, 146, 148, 150, 152, 159, 160, 161, 163, 165, 166, 168, 169, 170, 172, 177, 179, 181, 188, 195, 197, 199, 214, 225, 232, 234, 239, 240, 242, 251, 263, 264, 272, 274, 275, 276, 280, 281, 283, 284, 285, 301, 302, 304, 306, 307, 308, 311, 312, 317, 319, 321, 323, 332, 345, 357, 358, 371, 373, 375, 376, 378, 379, 380, 383, 401, 407, 411, 435, 436, 440, 442, 443, 444, 445, 468, 476, 478, 479, 484, 486, 488, 492, 502, 503, 504, 507, 511, 512, 514, 523, 525, 526, 552, 553, 555, 602, 607, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 651, 653, 657, 698, 704, 713, 760, 761, 779, 791, 792, 822, 823, 826, 845, 865, 866, 867, 868, 870, 871, 872, 942, 943, 945, 946, 947, 950, 952, 958, 959, 963, 966, 967, 968, 974, 975, 977, 982, 983, 985, 989, 993, 994, 995, 997, 998, 1002, 1003, 1005, 1006], "logist": [24, 26, 28, 65, 67, 68, 71, 83, 97, 106, 127, 150, 159, 166, 168, 176, 178, 179, 185, 187, 190, 192, 198, 209, 211, 222, 246, 249, 257, 274, 275, 276, 283, 291, 303, 315, 319, 359, 360, 371, 374, 380, 382, 383, 401, 453, 460, 466, 468, 476, 505, 523, 525, 535, 574, 595, 610, 621, 622, 623, 630, 632, 640, 704, 762, 776, 791, 821, 822, 823, 825, 845, 872, 888, 890, 953, 957, 958, 967, 968, 974, 975, 977, 983, 989, 997, 1000, 1001, 1003, 1004], "guid": [24, 52, 65, 87, 107, 146, 150, 153, 154, 169, 201, 245, 264, 265, 268, 284, 287, 288, 289, 290, 291, 292, 293, 294, 343, 344, 345, 350, 351, 352, 358, 359, 360, 364, 372, 374, 380, 384, 385, 386, 387, 390, 396, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 421, 423, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 583, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 661, 662, 664, 665, 666, 667, 668, 669, 671, 672, 673, 674, 676, 677, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 720, 721, 722, 723, 724, 725, 726, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 879, 898, 953, 954, 980, 987, 993, 994, 995, 996, 998, 1000, 1002, 1003, 1010, 1011], "gridspec": [24, 26, 62, 224, 352], "calibrationdisplai": [24, 26, 371, 893, 1006, 1007, 1011], "lr": [24, 26, 106, 123, 124, 184, 196, 210, 211, 234, 241, 358, 364, 380, 532, 533, 534, 676, 937], "gnb_isoton": 24, "gnb_sigmoid": 24, "clf_list": [24, 26], "get_cmap": [24, 26, 312], "dark2": [24, 26, 202], "ax_calibration_curv": [24, 26], "calibration_displai": [24, 26], "histogram": [24, 26, 50, 100, 106, 112, 150, 181, 212, 237, 239, 244, 263, 278, 289, 294, 371, 454, 523, 524, 525, 526, 528, 529, 606, 721, 722, 762, 767, 945, 951, 963, 974, 988, 989, 1005, 1008, 1010], "grid_posit": [24, 26], "y_prob": [24, 26, 140, 402, 403, 673, 796, 822, 953, 1007], "poorli": [24, 59, 73, 80, 104, 116, 205, 333, 373, 380, 492, 594, 949, 950, 999], "violat": [24, 307, 353, 357, 359, 599, 889, 960, 967, 969], "typic": [24, 26, 91, 99, 112, 158, 165, 181, 185, 199, 214, 240, 241, 245, 247, 248, 264, 265, 289, 307, 320, 332, 338, 339, 340, 343, 347, 348, 349, 354, 358, 359, 371, 372, 373, 374, 377, 378, 380, 381, 383, 407, 411, 413, 460, 515, 517, 519, 520, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 593, 602, 604, 607, 618, 619, 620, 635, 646, 647, 676, 832, 839, 843, 846, 901, 902, 910, 913, 938, 942, 946, 949, 950, 952, 953, 954, 955, 959, 961, 977, 987, 1002, 1006, 1009, 1010], "transpos": [24, 238, 385, 490, 502, 504, 511, 624, 625, 626, 627, 751, 902, 939, 945, 953, 965, 986, 993, 1007], "nearli": [24, 241, 340, 359, 372, 727, 953, 956, 965, 987], "albeit": 24, "strongli": [24, 26, 77, 80, 90, 111, 115, 153, 163, 196, 215, 244, 319, 345, 362, 363, 371, 380, 622, 699, 758, 949, 950, 989, 1002, 1009], "plenti": 24, "greater": [24, 85, 101, 103, 153, 198, 213, 218, 227, 244, 257, 264, 265, 323, 332, 341, 350, 359, 371, 373, 376, 380, 405, 409, 413, 416, 427, 436, 500, 505, 521, 522, 523, 524, 525, 526, 528, 529, 530, 557, 558, 561, 574, 575, 592, 604, 606, 609, 628, 630, 631, 635, 640, 641, 642, 656, 673, 676, 684, 698, 699, 702, 705, 751, 758, 760, 761, 795, 807, 808, 815, 816, 822, 823, 828, 843, 855, 859, 862, 865, 866, 873, 874, 875, 876, 902, 922, 942, 948, 949, 950, 953, 954, 959, 963, 968, 969, 996, 1001, 1004, 1006, 1007, 1008, 1010], "exploit": [24, 257, 954, 973, 996], "f1_score": [24, 245, 300, 340, 701, 953, 993, 995, 996, 997, 998, 1002, 1003, 1009, 1010], "log_loss": [24, 25, 113, 116, 138, 283, 300, 319, 359, 371, 380, 521, 523, 525, 528, 610, 622, 640, 873, 875, 942, 949, 953, 967, 969, 995, 997, 999, 1007, 1008, 1009, 1010], "precision_scor": [24, 245, 672, 750, 953, 993, 995, 996, 997, 998, 1003, 1009], "recall_scor": [24, 245, 377, 672, 747, 953, 993, 995, 996, 997, 998, 1003, 1009], "roc_auc_scor": [24, 135, 238, 247, 287, 294, 666, 670, 671, 672, 752, 953, 995, 996, 1001, 1003, 1007, 1008], "score_nam": [24, 34, 214, 240, 253, 293, 320, 768, 784], "score_df": 24, "set_index": [24, 101, 114, 142, 170, 199, 238, 284, 320], "decim": [24, 143, 435, 436, 878, 1000, 1001], "098932": 24, "323200": 24, "937443": 24, "871965": 24, "851348": 24, "861533": 24, "117608": 24, "782755": 24, "940374": 24, "857400": 24, "875941": 24, "866571": 24, "098332": 24, "370738": 24, "938613": 24, "883065": 24, "836224": 24, "859007": 24, "108880": 24, "368896": 24, "940201": 24, "861106": 24, "871277": 24, "866161": 24, "refin": [24, 77, 436, 673, 953, 987], "alter": [24, 149, 347, 359, 692, 693, 701, 746, 747, 750, 998, 1002, 1005], "uncertainti": [24, 137, 144, 160, 240, 371, 373, 531, 532, 607, 825, 943, 965], "linearsvc": [24, 26, 66, 68, 131, 132, 150, 158, 213, 235, 237, 245, 280, 287, 302, 304, 308, 309, 315, 319, 332, 347, 351, 371, 381, 382, 401, 476, 531, 541, 595, 603, 607, 616, 636, 637, 638, 639, 640, 651, 698, 705, 788, 793, 866, 867, 870, 872, 949, 953, 954, 968, 974, 993, 994, 995, 999, 1001, 1004, 1009], "naivelycalibratedlinearsvc": [24, 26], "df_min_": [24, 26], "df_max_": [24, 26], "calibrated_df": [24, 26], "proba_pos_class": [24, 26], "clip": [24, 26, 199, 211, 278, 307, 599, 640, 704, 835, 963, 997, 1004, 1005], "proba_neg_class": [24, 26], "proba": [24, 26, 123, 401, 873, 875], "dual": [24, 26, 66, 68, 131, 132, 158, 213, 235, 237, 245, 280, 287, 304, 305, 315, 319, 381, 382, 435, 436, 442, 531, 532, 575, 603, 610, 611, 616, 617, 622, 623, 624, 625, 626, 627, 645, 648, 698, 793, 805, 806, 865, 866, 867, 870, 953, 954, 968, 995, 1004, 1007, 1009], "svc_isoton": 24, "svc_sigmoid": 24, "opposit": [24, 26, 50, 64, 92, 153, 154, 170, 245, 359, 371, 375, 377, 382, 407, 411, 413, 433, 502, 504, 511, 527, 676, 693, 811, 869, 993], "behavior": [24, 26, 34, 36, 49, 148, 150, 153, 154, 181, 199, 215, 230, 231, 241, 243, 275, 276, 278, 280, 285, 307, 328, 333, 339, 342, 345, 347, 349, 353, 354, 359, 371, 373, 377, 381, 500, 515, 530, 630, 631, 632, 640, 641, 642, 663, 665, 692, 693, 746, 747, 750, 763, 764, 767, 779, 780, 781, 782, 783, 802, 838, 865, 866, 942, 949, 953, 954, 959, 963, 968, 974, 977, 978, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "hing": [24, 188, 191, 193, 246, 304, 305, 309, 311, 359, 630, 640, 698, 865, 872, 949, 967, 968, 987], "focus": [24, 73, 170, 255, 340, 357, 950, 963, 972], "far": [24, 57, 77, 111, 138, 144, 153, 181, 199, 307, 311, 319, 321, 345, 354, 383, 684, 845, 928, 958, 959, 968, 977, 985], "awai": [24, 25, 26, 57, 73, 110, 137, 138, 142, 184, 311, 312, 340, 371, 383, 592, 807, 808, 815, 816, 952, 953, 968, 985], "shown": [24, 45, 54, 82, 99, 103, 107, 114, 146, 152, 154, 165, 171, 179, 199, 206, 208, 213, 218, 226, 238, 241, 244, 247, 255, 263, 274, 275, 278, 279, 280, 296, 315, 319, 320, 345, 350, 360, 371, 373, 374, 377, 378, 379, 381, 383, 402, 424, 596, 662, 664, 665, 666, 677, 762, 776, 877, 879, 948, 949, 950, 953, 956, 963, 967, 968, 969, 987, 997, 1002, 1003, 1004, 1007], "varieti": [24, 148, 226, 284, 307, 353, 372, 373, 375, 381, 607, 956, 969, 972, 977, 995, 1008, 1009], "niculescu": [24, 26, 371, 401, 403], "mizil": [24, 26, 371, 401, 403], "caruana": [24, 26, 371, 401, 403], "144943": 24, "465660": 24, "937597": 24, "872186": 24, "851792": 24, "861868": 24, "099820": 24, "376999": 24, "936480": 24, "853174": 24, "877981": 24, "865400": 24, "098758": 24, "321301": 24, "937532": 24, "873724": 24, "848743": 24, "861053": 24, "deal": [24, 54, 67, 148, 153, 165, 205, 255, 311, 321, 345, 350, 374, 381, 382, 383, 438, 460, 667, 672, 726, 750, 831, 902, 949, 977, 984, 996, 1008, 1009], "situat": [24, 41, 54, 68, 152, 153, 187, 208, 241, 345, 353, 375, 377, 378, 380, 432, 492, 498, 546, 838, 841, 853, 863, 947, 949, 955, 956, 966, 969, 1001], "icml": [24, 26, 371, 373, 381, 401, 403, 800, 802, 821, 953, 955, 967, 971], "2005": [24, 26, 76, 342, 371, 401, 403, 814, 949, 956, 966], "654": [24, 974], "plot_calibration_curv": [24, 974], "simplex": [25, 634, 760, 840], "arrow": [25, 1007], "green": [25, 76, 85, 104, 118, 123, 137, 158, 206, 274, 279, 283, 288, 294, 359, 954, 1001, 1002, 1004, 1005], "600": [25, 47, 112, 120, 121, 340, 644, 974], "x_train_valid": 25, "y_train_valid": 25, "cluster_std": [25, 35, 41, 46, 52, 53, 54, 56, 57, 59, 60, 61, 193, 208, 227, 281, 309, 476], "x_valid": 25, "y_valid": 25, "randomforestclassifi": [25, 26, 29, 53, 105, 106, 107, 108, 109, 110, 123, 155, 156, 220, 221, 235, 250, 287, 289, 294, 319, 328, 358, 359, 371, 380, 382, 521, 522, 523, 525, 530, 531, 533, 765, 766, 795, 875, 942, 943, 954, 961, 977, 990, 997, 998, 1001, 1002, 1003, 1006, 1007, 1008, 1009, 1010], "concaten": [25, 32, 36, 47, 58, 65, 76, 103, 117, 131, 145, 150, 160, 163, 195, 202, 208, 224, 228, 229, 234, 245, 246, 247, 248, 263, 276, 282, 285, 297, 306, 310, 319, 374, 428, 431, 468, 473, 495, 501, 505, 506, 563, 744, 762, 824, 825, 827, 830, 838, 870, 954, 974, 982, 986, 994], "randomforestclassifierifittedrandomforestclassifi": [25, 108, 109, 294], "cal_clf": 25, "prefit": [25, 359, 371, 382, 401, 531, 532, 561, 973, 1005, 1006, 1007], "x27": [25, 67, 68, 106, 121, 124, 132, 153, 154, 155, 209, 210, 219, 220, 222, 229, 236, 238, 239, 245, 250, 276, 284, 288, 289, 291, 298], "calibratedclassifiercvifittedcalibratedclassifiercv": 25, "randomforestclassifierrandomforestclassifi": [25, 155, 220, 250], "clf_prob": 25, "cal_clf_prob": 25, "head_width": 25, "ro": 25, "bo": [25, 1005], "unit": [25, 66, 75, 153, 158, 181, 199, 263, 275, 278, 320, 340, 345, 346, 347, 351, 353, 354, 378, 381, 385, 428, 453, 454, 483, 488, 496, 497, 498, 505, 506, 553, 554, 555, 571, 572, 575, 622, 623, 640, 649, 663, 733, 812, 821, 822, 823, 829, 835, 837, 841, 843, 845, 851, 852, 853, 855, 856, 865, 866, 949, 951, 952, 953, 958, 963, 969, 972, 985, 997, 1001, 1007, 1008], "mid": [25, 307, 953, 955], "frac": [25, 75, 76, 101, 238, 245, 247, 290, 370, 371, 373, 375, 378, 379, 380, 381, 383, 396, 427, 429, 446, 447, 448, 518, 520, 522, 524, 526, 529, 532, 534, 575, 579, 583, 586, 587, 599, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 624, 625, 626, 627, 628, 629, 631, 633, 634, 636, 637, 642, 643, 644, 660, 692, 693, 718, 732, 798, 799, 808, 816, 823, 866, 868, 871, 874, 876, 945, 947, 948, 949, 950, 951, 953, 955, 956, 957, 958, 960, 961, 963, 965, 967, 968, 969, 985], "shrink": [25, 77, 87, 115, 154, 165, 176, 179, 185, 201, 228, 278, 315, 378, 523, 524, 640, 642, 812, 822, 823, 867, 868, 869, 870, 871, 956, 968, 985], "perfectli": [25, 34, 241, 252, 311, 362, 373, 380, 402, 531, 570, 668, 669, 679, 681, 699, 700, 720, 749, 758, 838, 948, 950, 953, 968, 1006, 1007], "incur": [25, 583, 865, 968, 1001], "decreas": [25, 36, 43, 52, 55, 63, 71, 118, 134, 135, 145, 153, 154, 156, 189, 211, 212, 240, 245, 251, 273, 280, 283, 287, 323, 332, 334, 345, 371, 373, 380, 405, 409, 427, 485, 498, 499, 505, 521, 522, 523, 524, 525, 526, 528, 529, 530, 566, 599, 600, 601, 640, 641, 642, 670, 676, 690, 745, 752, 822, 823, 873, 874, 875, 876, 942, 944, 945, 949, 950, 953, 956, 957, 960, 961, 967, 968, 977, 985, 995, 1000, 1003, 1006], "cal_scor": 25, "327": [25, 693, 985], "549": 25, "p1d": 25, "p0": 25, "p1": [25, 123], "p2": [25, 123, 199], "calibrated_classifi": 25, "calibrated_classifiers_": [25, 371, 401], "this_p": 25, "sure": [25, 53, 174, 187, 215, 216, 328, 332, 333, 339, 343, 344, 345, 346, 347, 349, 350, 353, 357, 363, 371, 374, 381, 457, 487, 613, 885, 886, 896, 939, 943, 950, 967, 972, 973, 1000, 1001, 1003, 1008], "renorm": 25, "multiclass": [25, 28, 107, 159, 173, 197, 209, 216, 218, 221, 231, 235, 243, 245, 248, 257, 274, 276, 304, 316, 340, 341, 347, 348, 350, 359, 364, 373, 380, 401, 416, 426, 453, 460, 468, 521, 523, 525, 528, 531, 532, 535, 558, 566, 574, 595, 596, 597, 622, 623, 630, 632, 637, 638, 639, 640, 666, 670, 672, 692, 693, 697, 698, 701, 706, 717, 746, 747, 750, 751, 752, 757, 762, 763, 765, 766, 767, 768, 776, 778, 780, 784, 785, 786, 787, 788, 789, 790, 791, 792, 832, 846, 865, 867, 870, 873, 875, 947, 949, 963, 964, 968, 969, 974, 975, 987, 989, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1003, 1008, 1009, 1010], "argmax": [25, 94, 237, 251, 347, 380, 533, 793, 873, 968, 1006], "758": [25, 162, 300, 974], "plot_calibration_multiclass": [25, 974], "votingclassifi": [25, 26, 100, 150, 190, 324, 364, 468, 528, 534, 595, 622, 803, 807, 870, 873, 942, 943, 974, 998, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1010], "gave": [26, 371, 762, 765, 766, 776, 832], "four": [26, 131, 145, 158, 163, 182, 226, 227, 297, 304, 341, 345, 359, 521, 528, 683, 873, 875, 891, 949, 951, 952, 953, 963, 971], "naiv": [26, 29, 119, 238, 240, 257, 319, 321, 340, 371, 380, 381, 401, 508, 800, 801, 802, 803, 804, 947, 948, 956, 961, 975, 989, 993, 994, 995, 996, 1001, 1003, 1006, 1008], "bay": [26, 29, 104, 119, 137, 170, 229, 240, 319, 340, 371, 378, 380, 381, 500, 513, 514, 620, 800, 801, 802, 803, 804, 846, 947, 948, 949, 963, 975, 987, 989, 993, 994, 995, 996, 1001, 1003, 1006, 1008], "train_sampl": [26, 196, 197], "against": [26, 34, 80, 96, 104, 115, 130, 158, 172, 173, 190, 198, 215, 247, 284, 287, 307, 340, 345, 360, 371, 373, 377, 381, 402, 473, 506, 512, 515, 640, 642, 718, 720, 751, 764, 769, 771, 790, 794, 919, 945, 949, 953, 954, 956, 968, 971, 978], "rfc": [26, 221, 287, 990], "contrast": [26, 95, 154, 183, 214, 238, 240, 267, 283, 320, 359, 371, 373, 376, 380, 383, 413, 416, 426, 583, 607, 776, 821, 943, 946, 948, 949, 953, 956, 958, 961, 963, 966, 967, 969, 1003], "push": [26, 345, 349, 371, 976], "equat": [26, 315, 345, 373, 378, 380, 521, 522, 523, 524, 528, 529, 530, 554, 591, 622, 623, 646, 647, 651, 726, 845, 873, 874, 875, 876, 943, 950, 953, 958, 1001], "twice": [26, 250, 319, 321, 347, 383, 583, 693, 695, 904, 1002, 1010], "approx": [26, 87, 213, 378, 380, 381, 953, 960, 967], "rare": [26, 154, 284, 328, 349, 357, 359, 362, 371, 373, 377, 553, 612, 622, 623, 633, 644, 865, 890, 921, 949, 963, 977, 1000, 1001, 1002, 1006, 1008], "explan": [26, 80, 215, 332, 344, 345, 371, 381, 942, 952, 954, 969, 977, 996], "bag": [26, 66, 89, 100, 105, 107, 115, 116, 150, 155, 255, 320, 321, 341, 371, 372, 480, 481, 482, 519, 520, 521, 522, 523, 524, 527, 528, 529, 530, 704, 767, 791, 874, 951, 954, 974, 975, 989, 993, 995, 996, 997, 998, 999, 1006, 1007, 1009], "underli": [26, 53, 75, 120, 135, 156, 182, 184, 185, 215, 243, 262, 263, 311, 326, 333, 345, 357, 359, 362, 364, 369, 371, 373, 375, 377, 378, 379, 380, 382, 383, 401, 415, 416, 417, 426, 428, 429, 435, 436, 442, 488, 528, 529, 531, 532, 533, 534, 557, 558, 561, 566, 622, 623, 629, 632, 644, 655, 659, 762, 765, 766, 776, 786, 787, 788, 793, 794, 795, 796, 797, 798, 799, 808, 810, 865, 873, 874, 875, 876, 918, 949, 950, 954, 959, 966, 968, 995, 997, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1009, 1010], "restrict": [26, 63, 64, 69, 79, 148, 150, 171, 196, 198, 272, 347, 351, 357, 371, 373, 380, 381, 429, 457, 466, 496, 545, 574, 617, 618, 619, 620, 622, 646, 647, 677, 745, 751, 752, 791, 813, 815, 816, 817, 819, 821, 822, 823, 825, 851, 953, 969, 974, 988, 989, 993, 995, 1003, 1005, 1010], "move": [26, 110, 239, 276, 307, 344, 345, 349, 351, 371, 373, 513, 514, 535, 536, 537, 539, 541, 542, 920, 986, 993, 994, 998, 1001, 1003, 1006, 1007], "characterist": [26, 41, 59, 135, 142, 150, 208, 209, 221, 231, 233, 235, 278, 299, 328, 340, 342, 350, 371, 377, 380, 383, 467, 468, 587, 602, 622, 666, 670, 672, 690, 745, 751, 752, 781, 791, 794, 832, 870, 949, 974], "difficult": [26, 52, 101, 153, 189, 218, 345, 353, 371, 378, 380, 517, 518, 523, 525, 526, 948, 950, 952, 956, 958, 960, 969, 977, 993, 1007], "domingo": [26, 751, 953], "pazzani": 26, "proc": [26, 74, 371, 381, 414, 653, 657, 800, 942, 950, 955, 959], "13th": 26, "intl": [26, 377], "1996": [26, 373, 380, 384, 408, 480, 481, 482, 519, 520, 963], "zadrozni": [26, 371, 401, 640], "bianca": 26, "charl": [26, 727, 993, 996, 999, 1003, 1005, 1008], "elkan": [26, 288, 371, 401, 407, 411, 423, 640, 999, 1003, 1004, 1006, 1007], "vol": [26, 145, 165, 244, 342, 373, 438, 523, 524, 592, 599, 609, 628, 649, 650, 760, 790, 802, 943, 955, 956], "2001": [26, 142, 155, 237, 370, 373, 380, 401, 415, 416, 417, 426, 475, 523, 524, 528, 529, 592, 598, 603, 609, 655, 660, 698, 751, 846, 858, 890, 943, 945, 949, 953, 959, 961, 963, 965, 968], "204": [26, 961, 966, 974], "plot_compare_calibr": [26, 974], "built": [28, 80, 99, 101, 102, 110, 112, 155, 189, 241, 255, 271, 287, 324, 327, 332, 340, 343, 345, 346, 347, 349, 351, 353, 354, 357, 358, 359, 363, 367, 372, 373, 374, 377, 380, 382, 409, 467, 517, 518, 519, 520, 523, 524, 525, 526, 552, 553, 557, 561, 603, 604, 605, 606, 607, 610, 611, 616, 622, 624, 625, 626, 627, 636, 637, 638, 639, 645, 765, 766, 773, 796, 799, 805, 806, 875, 876, 937, 949, 953, 954, 966, 967, 969, 972, 977, 987, 993, 996, 997, 999, 1005], "troubl": [28, 381], "ovr": [28, 173, 196, 255, 257, 287, 316, 622, 623, 751, 794, 865, 867, 870, 949, 953, 954, 968, 993, 998, 999, 1001, 1002, 1003, 1007, 1008], "gaussian_process": [28, 29, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 150, 359, 383, 607, 954, 974, 996, 999, 1000], "gaussianprocessclassifi": [28, 29, 138, 139, 140, 141, 145, 359, 383, 575, 583, 584, 586, 587, 954, 999, 1001, 1003, 1007], "accuracy_scor": [28, 101, 138, 242, 283, 299, 319, 328, 358, 364, 369, 390, 521, 528, 672, 692, 693, 697, 701, 746, 747, 750, 757, 759, 895, 942, 953, 994, 995, 996, 1005, 1010], "load_iri": [28, 38, 42, 70, 83, 91, 93, 95, 97, 110, 122, 128, 131, 139, 164, 174, 190, 222, 226, 232, 243, 244, 245, 247, 248, 261, 266, 269, 274, 287, 289, 292, 301, 303, 304, 307, 310, 324, 327, 358, 367, 373, 374, 377, 380, 382, 393, 525, 531, 565, 566, 574, 583, 584, 586, 587, 595, 622, 623, 675, 751, 762, 765, 766, 768, 776, 793, 814, 860, 861, 862, 873, 875, 877, 878, 879, 943, 948, 953, 954, 955, 956, 960, 963, 969, 978, 984, 985, 986, 999, 1001, 1004], "saga": [28, 172, 196, 197, 622, 623, 636, 638, 651, 776, 949, 1000, 1002], "multi_class": [28, 173, 196, 247, 287, 533, 574, 622, 623, 751, 799, 865, 949, 954, 968, 993, 997, 1001, 1006, 1008], "n_classifi": [28, 533, 534], "classifier_idx": 28, "class_of_interest": [28, 247, 595, 1010], "vmin": [28, 37, 77, 87, 90, 97, 140, 143, 160, 165, 172, 197, 213, 228, 233, 275, 307], "vmax": [28, 48, 77, 87, 90, 97, 140, 143, 160, 165, 172, 197, 213, 228, 233, 275, 307], "mask_y_pr": 28, "04": [28, 37, 39, 51, 64, 79, 89, 96, 135, 142, 153, 162, 180, 199, 216, 224, 230, 238, 239, 251, 271, 314, 320, 342, 380, 382, 435, 436, 751, 762, 776, 949, 953, 957, 967, 974], "scalarmapp": 28, "viridi": [28, 35, 258, 661], "cax": [28, 140, 249], "orient": [28, 87, 153, 201, 278, 359, 877, 950], "horizont": [28, 87, 201, 213, 278, 281, 350, 359, 428, 479, 661, 665], "512": [28, 180, 974], "plot_classification_prob": [28, 974], "20newgroup": [28, 150, 159, 173, 197, 274, 276, 453, 535, 622, 791, 949, 974], "mnist": [28, 150, 159, 172, 189, 196, 258, 272, 274, 460, 535, 622, 791, 822, 845, 888, 949, 957, 974], "salt": [29, 213, 280, 1007], "convei": [29, 206, 280, 985], "linearli": [29, 92, 103, 135, 153, 160, 195, 202, 208, 247, 248, 280, 283, 311, 319, 332, 342, 357, 378, 380, 479, 606, 671, 834, 835, 953, 956, 959, 968, 985, 1000, 1009], "transpar": [29, 280, 938, 977], "ga\u00ebl": [29, 42, 48, 69, 82, 83, 93, 164, 178, 179, 280, 311, 312, 360, 977], "modifi": [29, 42, 48, 69, 71, 82, 83, 164, 165, 178, 179, 191, 201, 202, 203, 215, 218, 226, 293, 312, 317, 343, 345, 347, 349, 359, 373, 380, 383, 407, 411, 418, 423, 432, 446, 447, 448, 449, 459, 474, 545, 574, 575, 577, 583, 640, 642, 653, 657, 692, 693, 731, 746, 747, 750, 883, 949, 966, 967, 973, 984, 988, 989, 993, 995, 996, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1008], "listedcolormap": [29, 32, 110, 266, 269, 273, 280], "make_circl": [29, 41, 59, 92, 119, 206, 273, 274, 280, 298, 341, 994, 1001, 1004], "make_moon": [29, 41, 59, 208, 238, 273, 274, 280, 341, 942, 1000, 1004], "discriminant_analysi": [29, 31, 32, 95, 202, 267, 328, 369, 500, 814, 947, 954, 993, 996, 997, 998, 999, 1000], "quadraticdiscriminantanalysi": [29, 32, 513, 947, 954, 956, 993, 998, 1000, 1008], "adaboostclassifi": [29, 103, 110, 364, 380, 518, 523, 525, 894, 995, 996, 999, 1000, 1002, 1003, 1006, 1008, 1009, 1010], "kneighborsclassifi": [29, 122, 127, 260, 261, 266, 267, 283, 289, 291, 319, 380, 566, 808, 812, 813, 814, 815, 816, 954, 956, 985, 993, 1003, 1005, 1006, 1007, 1008, 1009, 1010], "neural_network": [29, 150, 154, 219, 272, 273, 274, 275, 276, 334, 357, 954, 957, 974, 995, 1010], "mlpclassifi": [29, 116, 127, 150, 272, 273, 275, 334, 466, 468, 478, 486, 535, 821, 823, 835, 954, 957, 974, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "decisiontreeclassifi": [29, 101, 103, 110, 122, 242, 255, 293, 323, 324, 327, 359, 380, 517, 519, 521, 523, 525, 528, 595, 675, 768, 789, 874, 875, 877, 878, 879, 943, 954, 969, 994, 995, 997, 998, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "net": [29, 150, 159, 165, 168, 172, 192, 212, 215, 251, 351, 372, 377, 435, 436, 442, 465, 488, 521, 522, 523, 524, 528, 529, 530, 610, 611, 616, 621, 622, 623, 624, 625, 626, 627, 632, 640, 642, 645, 648, 821, 873, 874, 875, 876, 942, 953, 958, 967, 974, 975, 977, 989, 993, 998, 1002, 1003, 1005], "adaboost": [29, 84, 100, 104, 110, 117, 120, 124, 140, 150, 324, 325, 326, 483, 515, 517, 518, 523, 595, 667, 791, 873, 874, 974, 975, 989, 995], "qda": [29, 342, 513, 514, 975, 989, 998], "025": [29, 183, 218, 235, 654, 658], "samm": [29, 101, 103, 110, 380, 517, 1009, 1010], "n_clusters_per_class": [29, 84, 105, 132, 134, 235, 268, 273, 280, 350, 479, 569, 571], "linearly_separ": [29, 273], "ds_cnt": [29, 280, 281], "rdbu": [29, 32, 87, 197, 273, 307, 312], "cm_bright": [29, 273, 280], "ff0000": [29, 266, 273], "0000ff": [29, 266, 273], "ep": [29, 41, 43, 46, 52, 62, 164, 166, 204, 212, 357, 373, 384, 408, 414, 419, 435, 436, 442, 595, 610, 611, 614, 615, 616, 617, 618, 619, 620, 624, 625, 626, 627, 645, 646, 647, 648, 654, 658, 678, 704, 817, 857, 858, 859, 965, 1008, 1009], "lstrip": [29, 41, 59, 208, 273, 280], "484": [29, 146, 974], "plot_classifier_comparison": [29, 280, 974], "versu": [29, 89, 100, 110, 119, 121, 128, 139, 150, 153, 159, 190, 196, 208, 213, 214, 216, 227, 231, 233, 255, 264, 266, 280, 295, 300, 304, 306, 311, 373, 377, 380, 383, 468, 498, 520, 574, 595, 603, 622, 623, 630, 632, 638, 639, 640, 641, 746, 762, 767, 787, 797, 826, 861, 862, 869, 870, 874, 942, 949, 953, 954, 959, 966, 967, 968, 974, 985, 1001], "8x8": [30, 82, 172, 212, 267, 276, 342, 466, 984], "grayscal": 30, "imread": 30, "load_digit": [30, 48, 49, 55, 68, 69, 82, 127, 133, 172, 188, 202, 212, 213, 236, 237, 240, 246, 253, 260, 262, 267, 274, 276, 293, 296, 297, 351, 374, 385, 409, 410, 496, 497, 498, 499, 563, 564, 602, 603, 632, 652, 653, 654, 655, 657, 659, 978, 982, 983, 984, 985, 986, 999, 1004], "set_axis_off": 30, "gray_r": [30, 82, 90, 140, 202, 276, 296, 297, 984], "entir": [30, 148, 181, 189, 276, 278, 288, 311, 327, 328, 339, 346, 347, 359, 367, 373, 377, 379, 381, 436, 456, 498, 552, 553, 554, 555, 611, 615, 617, 619, 622, 623, 625, 627, 629, 630, 632, 640, 646, 647, 697, 759, 793, 794, 797, 822, 824, 825, 838, 850, 851, 853, 854, 855, 856, 922, 942, 943, 953, 963, 967, 969, 985, 1002, 1003], "00": [30, 75, 90, 142, 153, 154, 172, 199, 212, 236, 239, 276, 294, 296, 297, 320, 339, 342, 351, 373, 380, 381, 569, 570, 677, 679, 751, 762, 776, 789, 874, 949, 953, 963, 965, 967, 974, 986], "899": [30, 236], "confus": [30, 150, 209, 231, 247, 296, 297, 319, 359, 432, 468, 595, 616, 661, 677, 679, 682, 692, 693, 701, 717, 747, 750, 791, 863, 870, 974, 987, 993, 994, 998, 1002, 1003, 1005, 1006, 1007, 1008], "figure_": [30, 154, 219, 287, 289, 352, 402, 595, 596, 661, 662, 664, 665, 666, 768, 784], "confusion_matrix": [30, 209, 232, 296, 297, 661, 677, 717, 788, 953, 987, 994, 999, 1000, 1003, 1004, 1006, 1010], "gt": [30, 67, 68, 106, 121, 153, 229, 236, 250, 343, 345, 349], "rebuilt": [30, 805, 806], "489": [30, 974], "plot_digits_classif": [30, 974], "elimin": [30, 48, 82, 126, 129, 132, 135, 150, 233, 237, 243, 262, 296, 297, 299, 372, 373, 377, 412, 466, 479, 557, 558, 561, 566, 622, 765, 766, 781, 870, 939, 953, 974, 975, 977, 989, 993], "oracl": [31, 181, 199, 386, 433, 434, 437, 438, 439, 440, 947, 993], "shrinkag": [31, 72, 74, 77, 94, 116, 150, 269, 386, 433, 434, 437, 438, 439, 440, 441, 443, 444, 445, 503, 507, 513, 525, 526, 762, 949, 963, 974, 975, 989, 993, 997, 998, 1000], "lineardiscriminantanalysi": [31, 32, 95, 202, 267, 328, 369, 500, 514, 814, 947, 954, 956, 993, 996, 997, 998, 999, 1000, 1002, 1005, 1007, 1008, 1009], "200": [31, 32, 41, 47, 51, 57, 71, 90, 103, 109, 114, 120, 141, 167, 176, 182, 185, 186, 187, 193, 198, 202, 214, 220, 224, 239, 245, 247, 248, 278, 281, 298, 304, 306, 307, 326, 328, 340, 347, 357, 378, 380, 385, 404, 418, 432, 435, 436, 497, 498, 499, 502, 503, 504, 507, 511, 548, 613, 615, 635, 643, 656, 776, 822, 823, 863, 867, 868, 869, 870, 871, 968, 974], "n_averag": 31, "n_features_max": 31, "ish": 31, "acc_clf1": 31, "acc_clf2": 31, "acc_clf3": 31, "n_features_rang": 31, "score_clf1": 31, "score_clf2": 31, "score_clf3": 31, "clf1": [31, 122, 123, 380, 533], "lsqr": [31, 285, 513, 636, 638, 651, 947, 994, 1000, 1007], "clf2": [31, 122, 123, 347, 367, 380, 533], "store_precis": [31, 74, 433, 434, 437, 438, 439, 440], "assume_cent": [31, 74, 375, 386, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444], "clf3": [31, 122, 123, 347, 380, 533], "covariance_estim": [31, 513, 947, 1005], "features_samples_ratio": 31, "gold": [31, 175, 182, 184, 187, 191, 195, 198, 225, 230, 245, 264, 306, 351], "navi": [31, 66, 74, 91, 95, 96, 120, 160, 184, 192, 204, 225, 226, 227, 230, 245, 247, 263, 270, 298, 326], "276": [31, 238, 974], "plot_lda": [31, 974], "ledoitwolf": [31, 72, 74, 77, 94, 116, 150, 269, 375, 433, 434, 438, 439, 440, 441, 762, 974, 997], "likelihood": [31, 54, 72, 74, 75, 76, 77, 94, 116, 137, 138, 139, 141, 142, 143, 144, 146, 150, 169, 199, 228, 231, 238, 244, 269, 276, 278, 347, 359, 371, 375, 378, 380, 383, 401, 433, 434, 435, 436, 437, 438, 439, 440, 441, 479, 496, 500, 505, 513, 514, 515, 574, 575, 595, 609, 622, 676, 704, 760, 761, 762, 788, 791, 810, 821, 841, 853, 867, 868, 870, 871, 949, 952, 955, 963, 968, 974, 996, 997, 1002, 1008], "doubl": [32, 107, 250, 345, 359, 378, 502, 504, 511, 805, 806, 816, 937, 943, 968, 969, 993, 1003, 1004], "dispers": [32, 373, 674, 688, 949], "cov_class_1": 32, "cov_class_2": 32, "matric": [32, 36, 37, 75, 77, 87, 186, 225, 226, 228, 229, 230, 258, 271, 288, 294, 300, 319, 320, 337, 339, 347, 348, 357, 358, 359, 373, 374, 375, 376, 378, 381, 382, 388, 414, 415, 417, 428, 437, 445, 446, 447, 448, 498, 499, 502, 504, 505, 508, 511, 513, 514, 519, 520, 527, 530, 545, 546, 553, 607, 622, 628, 636, 638, 651, 717, 723, 731, 737, 741, 742, 743, 744, 755, 760, 761, 791, 809, 812, 817, 828, 832, 834, 837, 840, 842, 843, 845, 848, 850, 852, 854, 855, 856, 857, 858, 867, 868, 870, 871, 881, 902, 908, 917, 924, 926, 927, 943, 945, 947, 950, 951, 952, 954, 956, 957, 965, 967, 968, 972, 987, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "make_data": [32, 58], "share": [32, 79, 119, 153, 229, 319, 327, 328, 332, 333, 347, 353, 373, 378, 381, 513, 632, 668, 672, 760, 761, 765, 766, 947, 960, 993, 995, 1001, 1003, 1005, 1008], "spheric": [32, 54, 79, 117, 203, 226, 228, 229, 271, 341, 727, 760, 761, 949, 952, 956, 972], "isotrop": [32, 52, 54, 58, 92, 139, 141, 201, 203, 373, 375, 383, 476, 483, 496, 579, 583, 584, 586, 587], "third": [32, 110, 115, 130, 135, 145, 199, 208, 230, 255, 263, 280, 293, 333, 340, 344, 357, 360, 381, 498, 552, 553, 554, 555, 764, 765, 766, 771, 807, 808, 809, 811, 813, 843, 855, 921, 942, 964, 993, 1004, 1009, 1010], "x_isotropic_covari": 32, "y_isotropic_covari": 32, "x_shared_covari": 32, "y_shared_covari": 32, "x_different_covari": 32, "y_different_covari": 32, "piec": [32, 44, 182, 333, 952], "misclassifi": [32, 101, 232, 311, 319, 968], "mark": [32, 55, 85, 130, 149, 242, 249, 337, 345, 347, 349, 353, 354, 359, 373, 499, 571, 572, 575, 596, 622, 818, 819, 860, 861, 878, 892, 897, 902, 949, 977, 989, 993, 994, 999, 1001, 1002, 1009, 1010, 1011], "star": [32, 85, 124, 345], "ellips": [32, 208, 224, 225, 226, 229, 230, 959], "mpl": [32, 224, 225, 226, 230, 278], "plot_ellips": [32, 224], "cov": [32, 77, 80, 103, 229, 345, 359, 363, 366, 376, 386, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 483, 496, 498, 505, 512], "linalg": [32, 51, 73, 74, 77, 94, 96, 167, 224, 225, 226, 229, 230, 294, 345, 351, 378, 415, 416, 417, 426, 496, 499, 505, 508, 621, 636, 638, 651, 655, 659, 900], "eigh": [32, 224, 225, 226, 229, 230, 378, 385, 497, 499, 1008], "arctan": [32, 225, 230, 341, 482], "180": [32, 224, 225, 226, 229, 230, 267, 271, 351, 466], "ell": [32, 224, 225, 226, 230, 370], "patch": [32, 47, 218, 224, 225, 226, 229, 230, 233, 340, 349, 357, 378, 380, 519, 520, 547, 548, 551, 993, 1001], "set_clip_box": [32, 224, 225, 226, 229, 230], "set_alpha": [32, 224, 225, 226, 229, 230], "add_artist": [32, 202, 224, 225, 226, 229, 230], "plot_result": [32, 111, 224, 225, 230], "pcolormesh": [32, 119, 128, 164, 261, 266, 303, 307, 311, 595], "x_right": 32, "y_right": 32, "x_wrong": 32, "y_wrong": 32, "means_": [32, 224, 225, 226, 227, 229, 230, 513, 514, 760, 761], "yellow": [32, 85, 307, 954], "set_box_aspect": 32, "svd": [32, 94, 119, 202, 320, 354, 369, 376, 385, 415, 417, 446, 447, 449, 496, 497, 498, 499, 503, 504, 505, 508, 510, 513, 514, 628, 636, 637, 638, 649, 650, 651, 824, 902, 947, 987, 995, 999, 1000, 1006, 1008], "store_covari": [32, 513, 514, 998, 1000], "ax_row": 32, "align": [32, 115, 149, 201, 224, 249, 321, 359, 653, 657, 945, 956, 967, 988, 989, 1009, 1010], "perpendicular": [32, 312], "bisector": 32, "singl": [32, 36, 45, 49, 50, 52, 55, 58, 59, 68, 89, 100, 101, 102, 110, 111, 120, 135, 137, 143, 148, 150, 154, 156, 158, 165, 181, 183, 185, 219, 221, 229, 234, 247, 255, 275, 291, 293, 307, 319, 320, 321, 324, 326, 328, 332, 333, 339, 340, 345, 350, 352, 353, 354, 357, 358, 359, 371, 372, 374, 376, 377, 378, 380, 381, 382, 398, 401, 404, 405, 409, 410, 411, 413, 418, 428, 430, 431, 457, 458, 460, 470, 473, 498, 517, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 546, 556, 563, 564, 566, 570, 591, 596, 598, 607, 630, 631, 637, 640, 641, 642, 654, 656, 658, 674, 685, 686, 687, 688, 699, 700, 701, 704, 737, 748, 760, 761, 762, 765, 766, 776, 783, 787, 788, 790, 791, 794, 802, 805, 806, 810, 822, 823, 824, 834, 835, 838, 839, 840, 845, 846, 860, 861, 873, 874, 875, 876, 881, 911, 917, 921, 940, 942, 948, 949, 950, 953, 954, 956, 958, 960, 961, 963, 967, 968, 969, 972, 974, 977, 978, 985, 987, 993, 994, 995, 997, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "505": [32, 202, 790, 974], "plot_lda_qda": [32, 974], "modul": [33, 34, 46, 50, 72, 78, 81, 86, 87, 100, 129, 136, 146, 147, 150, 151, 157, 159, 196, 200, 201, 223, 231, 254, 255, 256, 259, 272, 274, 275, 277, 295, 302, 318, 322, 325, 339, 340, 343, 344, 345, 346, 347, 349, 350, 351, 353, 354, 357, 359, 362, 363, 367, 371, 372, 373, 376, 380, 381, 382, 384, 408, 467, 499, 543, 544, 623, 894, 942, 947, 949, 951, 953, 954, 957, 959, 960, 963, 965, 967, 969, 970, 977, 981, 982, 987, 994, 995, 996, 998, 999, 1003, 1007], "chanc": [33, 35, 46, 101, 130, 150, 156, 181, 189, 196, 199, 238, 244, 247, 248, 284, 315, 320, 328, 344, 373, 377, 664, 666, 668, 669, 672, 680, 718, 720, 749, 758, 790, 953, 961, 969, 974, 1009], "bisect": [33, 54, 56, 57, 58, 146, 150, 234, 407, 411, 476, 974, 1007], "birch": [33, 37, 41, 61, 84, 150, 291, 334, 359, 410, 413, 476, 974, 988, 989, 997, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1010], "linkag": [33, 36, 37, 38, 41, 44, 49, 52, 53, 54, 64, 150, 156, 404, 405, 409, 410, 427, 476, 478, 486, 845, 972, 974, 986, 996, 1001, 1004], "dbscan": [33, 34, 35, 41, 52, 60, 62, 150, 293, 298, 357, 359, 410, 414, 416, 419, 476, 668, 669, 681, 700, 756, 758, 817, 845, 956, 974, 988, 989, 993, 995, 997, 998, 1000, 1001, 1002, 1009, 1010], "hdbscan": [33, 41, 46, 62, 150, 212, 408, 476, 845, 943, 972, 974, 988, 989, 1009, 1010], "optic": [33, 41, 150, 291, 338, 384, 408, 410, 419, 420, 421, 466, 974, 988, 989, 1002, 1006, 1007, 1008, 1009, 1010], "affin": [33, 34, 41, 46, 60, 61, 150, 278, 298, 337, 347, 359, 372, 378, 404, 405, 416, 418, 426, 476, 499, 655, 659, 668, 669, 681, 700, 756, 758, 861, 947, 950, 953, 974, 988, 989, 993, 994, 997, 1003, 1004, 1006, 1008], "dendrogram": [33, 64, 150, 156, 327, 373, 405, 409, 468, 974, 1005], "embed": [33, 36, 41, 43, 52, 53, 59, 82, 106, 133, 137, 150, 200, 203, 205, 207, 258, 267, 351, 359, 372, 373, 405, 416, 426, 453, 466, 508, 513, 530, 546, 603, 652, 653, 654, 655, 656, 657, 658, 659, 660, 814, 826, 835, 857, 858, 859, 945, 956, 959, 965, 970, 972, 974, 988, 989, 993, 994, 1004, 1005, 1007], "uniformli": [34, 107, 114, 130, 208, 224, 287, 347, 480, 481, 482, 515, 606, 766, 774, 776, 844, 942, 943, 953, 956, 963, 997, 1002], "divid": [34, 40, 45, 84, 87, 132, 142, 181, 218, 224, 320, 328, 341, 342, 370, 373, 377, 378, 433, 434, 435, 436, 437, 438, 439, 440, 476, 483, 498, 505, 640, 641, 642, 683, 689, 697, 701, 719, 757, 759, 822, 823, 867, 870, 902, 905, 906, 942, 950, 952, 953, 956, 963, 967, 987, 993, 1000, 1001, 1004], "quiroz": [34, 54, 107, 160, 165, 218, 239, 241, 283, 319, 320, 321], "fundament": [34, 46, 76, 320, 343, 357, 358, 376, 460, 502, 504, 511, 672, 949, 953], "homogen": [34, 35, 36, 41, 43, 46, 52, 55, 320, 340, 357, 359, 375, 380, 383, 410, 578, 668, 681, 694, 699, 700, 720, 758, 950, 951, 953, 1002], "frequent": [34, 101, 149, 241, 247, 248, 320, 342, 345, 381, 515, 554, 594, 815, 838, 839, 842, 854, 943, 945, 953, 967, 973], "ari": [34, 55, 320, 373, 669, 998, 1004], "mutual": [34, 35, 46, 52, 55, 129, 150, 359, 380, 382, 410, 556, 559, 560, 563, 564, 570, 571, 572, 573, 668, 669, 679, 718, 720, 749, 758, 942, 949, 953, 954, 974, 993, 999, 1009], "mi": [34, 130, 373, 571, 572, 668, 718, 720, 943, 953, 967], "theoret": [34, 54, 137, 372, 373, 380, 517, 518, 603, 668, 689, 719, 865, 942, 949, 950, 952, 953, 955, 965, 967, 968, 977], "nmi": [34, 373, 681, 699, 700, 720], "ami": [34, 46, 55, 373, 668], "score_func": [34, 67, 68, 382, 556, 559, 560, 562, 563, 564, 705, 993, 995, 1010], "rand_scor": [34, 373, 679, 953, 1005], "adjusted_rand_scor": [34, 35, 46, 55, 320, 373, 668, 679, 696, 720, 749, 953, 1006], "mutual_info_scor": [34, 373, 668, 953, 1001, 1004, 1005], "normalized_mutual_info_scor": [34, 373, 699, 718, 758, 953, 1001, 1007], "adjusted_mutual_info_scor": [34, 35, 46, 55, 373, 669, 679, 696, 718, 720, 749, 953, 993, 1001, 1005, 1009], "random_label": 34, "labels_a": 34, "labels_b": 34, "fixed_classes_uniform_labelings_scor": 34, "n_clusters_rang": 34, "n_run": [34, 58, 158, 320], "seaborn": [34, 102, 152, 153, 160, 165, 229, 238, 345, 363, 366, 972], "sn": [34, 102, 152, 153, 160, 165, 229, 238], "color_palett": [34, 102, 229], "colorblind": [34, 102], "vx": 34, "errorbar": [34, 58, 69, 74, 76, 134, 143, 144, 260, 299, 310, 768, 784], "satur": [34, 153, 278], "uniform_labelings_scor": 34, "nwith": [34, 54, 58, 134, 320], "constantli": [34, 181, 977], "unbound": [34, 952, 1007], "cardin": [34, 108, 109, 115, 155, 156, 284, 285, 293, 373, 380, 427, 517, 518, 521, 522, 523, 524, 528, 529, 530, 643, 838, 839, 846, 873, 874, 875, 876, 953, 954, 961, 963, 1007, 1008], "why": [34, 49, 87, 101, 107, 153, 155, 158, 170, 235, 238, 255, 319, 320, 345, 353, 359, 373, 375, 378, 384, 408, 411, 415, 953, 955, 968, 982, 985, 996], "chart": [34, 112, 243, 954, 980, 996], "henc": [34, 57, 68, 153, 185, 212, 247, 307, 319, 320, 332, 340, 347, 349, 351, 359, 363, 373, 377, 380, 381, 451, 472, 503, 505, 506, 507, 527, 554, 607, 610, 616, 624, 626, 636, 651, 668, 669, 673, 679, 694, 720, 749, 758, 781, 782, 800, 801, 802, 803, 804, 840, 910, 950, 952, 953, 954, 959, 960, 963, 973, 1000, 1001, 1004, 1005, 1007], "safe": [34, 153, 170, 215, 320, 345, 347, 373, 374, 398, 472, 473, 552, 555, 561, 737, 741, 859, 919, 925, 956, 999, 1000, 1001, 1006, 1007], "stabil": [34, 105, 112, 153, 202, 243, 278, 315, 320, 359, 370, 410, 614, 618, 634, 803, 822, 823, 841, 853, 901, 943, 949, 952, 963, 973, 978, 993, 997, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008], "mislead": [34, 108, 109, 115, 153, 346, 362, 380, 517, 518, 521, 522, 523, 524, 528, 529, 530, 873, 874, 875, 876, 989, 1006], "meaning": [34, 156, 206, 267, 321, 370, 377, 381, 382, 512, 692, 693, 701, 746, 747, 750, 814, 957, 967, 968, 993, 1009], "015": [34, 320, 323, 961, 974], "plot_adjusted_for_chance_measur": [34, 974], "brendan": [35, 404, 418, 1009, 1010], "frei": [35, 404, 418, 1003], "delbert": [35, 404, 418], "dueck": [35, 404, 418], "messag": [35, 41, 59, 66, 87, 215, 319, 320, 340, 343, 344, 345, 349, 350, 353, 354, 373, 404, 418, 432, 503, 507, 512, 538, 591, 676, 762, 765, 766, 768, 776, 784, 789, 792, 794, 814, 822, 823, 863, 884, 885, 886, 889, 892, 916, 937, 953, 963, 993, 997, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "feb": [35, 404, 418], "affinitypropag": [35, 41, 291, 373, 993, 996, 997, 1001, 1004, 1006, 1007, 1008, 1009, 1010], "labels_tru": [35, 46, 52, 61, 373, 668, 669, 678, 679, 681, 694, 699, 700, 718, 720, 749, 758], "af": 35, "prefer": [35, 41, 52, 230, 247, 278, 328, 332, 333, 334, 343, 345, 346, 347, 359, 373, 377, 378, 380, 381, 404, 418, 435, 436, 442, 451, 472, 473, 591, 596, 597, 618, 622, 623, 665, 689, 691, 705, 720, 721, 814, 840, 865, 866, 907, 919, 942, 945, 947, 949, 953, 958, 968, 969, 972, 976, 985, 994, 1000, 1002, 1006, 1007, 1010], "cluster_centers_indic": [35, 418], "cluster_centers_indices_": [35, 404], "labels_": [35, 36, 37, 38, 39, 40, 41, 42, 44, 46, 48, 49, 52, 55, 58, 59, 60, 62, 64, 291, 293, 320, 345, 359, 373, 391, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 416, 419, 674, 986, 998], "n_clusters_": [35, 46, 52, 60, 405, 409], "homogeneity_scor": [35, 46, 55, 320, 373, 681, 699, 758, 953], "completeness_scor": [35, 46, 55, 288, 320, 373, 699, 700, 758, 953], "silhouette_scor": [35, 46, 55, 57, 320, 345, 373, 993, 997, 999, 1001, 1003, 1007], "sqeuclidean": [35, 414, 421, 741, 742, 743], "872": [35, 961], "912": [35, 274, 974], "871": [35, 75, 76, 375, 438], "753": [35, 217, 319, 974], "cycler": 35, "class_memb": 35, "cluster_cent": [35, 58, 60, 61, 425], "303": [35, 199, 599, 974], "plot_affinity_propag": [35, 404, 418, 974], "impos": [36, 54, 118, 175, 185, 284, 357, 373, 378, 380, 381, 491, 621, 949], "simpli": [36, 80, 119, 137, 145, 205, 216, 218, 247, 271, 289, 290, 332, 340, 345, 347, 350, 357, 359, 375, 376, 377, 378, 380, 381, 449, 659, 725, 728, 832, 904, 945, 953, 954, 955, 956, 967, 979, 987, 1000, 1001, 1002], "There": [36, 43, 107, 137, 199, 205, 215, 230, 233, 235, 238, 257, 319, 338, 340, 342, 345, 346, 347, 350, 357, 359, 360, 363, 370, 372, 373, 378, 380, 381, 382, 410, 416, 426, 498, 517, 518, 523, 524, 552, 553, 555, 570, 609, 943, 949, 950, 951, 952, 953, 956, 960, 963, 967, 968, 969, 971, 986, 993, 1001], "unstabl": [36, 63, 153, 373, 375, 376, 653, 657, 901, 902, 969, 997, 998, 1000, 1005, 1007, 1009], "quickli": [36, 219, 274, 287, 342, 345, 346, 377, 380, 656, 949, 956, 957, 977, 987, 1004], "fight": [36, 185, 977], "percol": 36, "distanc": [36, 37, 52, 54, 57, 58, 62, 64, 72, 76, 92, 135, 148, 150, 156, 167, 182, 184, 201, 203, 206, 212, 218, 258, 260, 261, 266, 268, 270, 271, 278, 283, 287, 291, 292, 311, 319, 320, 332, 342, 354, 357, 359, 370, 373, 375, 378, 379, 383, 384, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 416, 419, 420, 421, 422, 423, 425, 426, 427, 432, 433, 434, 435, 436, 437, 438, 439, 440, 502, 504, 511, 571, 572, 579, 583, 584, 586, 587, 592, 622, 623, 630, 632, 638, 639, 640, 641, 642, 652, 653, 654, 656, 657, 658, 659, 660, 663, 667, 688, 697, 721, 723, 725, 726, 727, 728, 731, 732, 733, 734, 735, 736, 741, 742, 743, 744, 755, 756, 759, 794, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 820, 844, 859, 863, 865, 867, 869, 870, 871, 873, 874, 875, 876, 943, 947, 950, 951, 953, 959, 963, 965, 967, 968, 973, 974, 985, 993, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "merg": [36, 38, 43, 48, 290, 343, 345, 348, 353, 357, 360, 373, 404, 405, 406, 409, 410, 427, 782, 986, 993, 1000], "exagger": [36, 153, 656, 950], "behaviour": [36, 92, 182, 183, 199, 309, 345, 359, 373, 380, 523, 524, 528, 529, 566, 705, 763, 764, 767, 779, 780, 781, 782, 783, 863, 873, 874, 926, 942, 943, 953, 963, 1001, 1004, 1005, 1008, 1009], "shortest": [36, 350, 354, 652, 907, 950, 1006], "mechan": [36, 215, 316, 319, 333, 345, 347, 373, 381, 387, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 428, 429, 433, 434, 435, 436, 437, 438, 439, 440, 446, 447, 448, 449, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 545, 546, 547, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 567, 574, 575, 591, 592, 593, 594, 599, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 652, 653, 654, 655, 656, 760, 761, 762, 763, 764, 765, 766, 767, 769, 770, 771, 772, 775, 776, 777, 778, 779, 780, 781, 782, 783, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 821, 822, 823, 824, 825, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 857, 858, 860, 861, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 951, 969, 977], "resembl": [36, 185], "brittl": [36, 373], "pronounc": [36, 37, 49, 142], "kneighbors_graph": [36, 41, 59, 64, 258, 359, 373, 405, 409, 659, 807, 808, 809, 811, 813, 815, 816, 817, 819, 956, 993, 997, 1002], "geometri": [36, 373, 950, 956], "instabl": [36, 153, 268, 383, 416, 499, 503, 507, 659, 1000, 1003, 1006], "agglomerativeclust": [36, 37, 38, 41, 44, 49, 53, 59, 64, 359, 373, 404, 406, 409, 986, 996, 997, 998, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1010], "1500": [36, 47, 54, 59, 64, 85, 201, 205, 224], "knn_graph": 36, "include_self": [36, 41, 64, 659, 818, 819, 997], "255": [36, 45, 90, 258, 275, 284, 290, 340, 457, 458, 525, 526, 974], "plot_agglomerative_clust": [36, 974], "waveform": 37, "euclidean": [37, 54, 55, 167, 212, 218, 258, 261, 266, 287, 292, 311, 320, 370, 372, 373, 378, 379, 380, 381, 383, 404, 405, 408, 409, 410, 414, 416, 421, 424, 427, 495, 501, 509, 510, 553, 579, 583, 586, 587, 640, 642, 654, 656, 659, 660, 663, 725, 726, 732, 733, 734, 735, 741, 742, 743, 744, 755, 756, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 859, 943, 947, 951, 954, 956, 965, 973, 997, 1000, 1001, 1002, 1003, 1009, 1010], "cityblock": [37, 41, 373, 414, 421, 725, 741, 742, 743, 956], "invari": [37, 342, 359, 373, 383, 578, 653, 710, 780, 781, 949, 950, 953, 968, 973, 1001, 1004, 1005, 1006], "ie": [37, 63, 88, 404, 668, 949, 963], "inter": [37, 108, 328, 380, 680, 908], "character": [37, 199, 323, 373, 377, 950], "ill": [37, 77, 186, 276, 435, 436, 442, 614, 615, 618, 619, 620, 646, 647, 949, 952, 986, 1003], "recov": [37, 62, 77, 88, 89, 94, 111, 137, 152, 165, 180, 181, 185, 201, 321, 375, 379, 382, 385, 424, 497, 523, 949, 950, 952, 973, 986, 999], "put": [37, 55, 128, 137, 139, 213, 220, 224, 273, 280, 291, 301, 312, 317, 334, 347, 349, 350, 353, 383, 407, 411, 423, 479, 578, 611, 625, 760, 842, 846, 854, 867, 868, 869, 870, 871, 892, 943, 950, 952, 953, 954, 960, 963, 979, 981, 987], "cc": [37, 343], "patheffect": 37, "pairwise_dist": [37, 359, 373, 384, 408, 410, 414, 421, 652, 660, 725, 734, 742, 743, 755, 756, 809, 811, 813, 817, 951, 993, 997, 999, 1001, 1002, 1004, 1005, 1010], "sqr": 37, "sign": [37, 74, 80, 88, 91, 103, 165, 229, 273, 315, 345, 373, 378, 381, 508, 546, 553, 570, 599, 600, 622, 623, 630, 632, 638, 639, 640, 641, 698, 705, 865, 869, 900, 902, 918, 949, 953, 958, 963, 967, 968, 986, 993, 997, 1002, 1006, 1008], "phi": [37, 378, 706, 831, 945, 953, 963, 968], "phase_nois": 37, "amplitude_nois": 37, "additional_nois": 37, "f7bd01": 37, "377eb8": [37, 41, 59, 60, 208], "f781bf": [37, 41, 59, 60], "set_label": [37, 140, 212], "tight": [37, 96, 103, 110, 128, 131, 166, 168, 173, 174, 175, 186, 190, 193, 198, 203, 206, 228, 258, 264, 265, 269, 270, 303, 307, 310, 312, 324, 546, 656, 1005], "avg_dist": [37, 744], "set_path_effect": 37, "withstrok": 37, "foreground": [37, 63], "cividi": 37, "interclass": 37, "plot_agglomerative_clustering_metr": [37, 974], "hierarchi": [38, 156, 345, 414, 420, 427, 958, 986], "plot_dendrogram": 38, "kwarg": [38, 90, 215, 347, 352, 387, 391, 395, 402, 406, 412, 414, 428, 433, 499, 502, 504, 527, 581, 595, 610, 611, 616, 617, 624, 625, 626, 627, 641, 645, 648, 662, 663, 664, 666, 705, 805, 806, 824, 825, 829, 869, 880, 913, 1000, 1004, 1006, 1010], "children_": [38, 405, 409, 427], "current_count": 38, "child_idx": 38, "leaf": [38, 106, 117, 119, 323, 327, 373, 380, 384, 405, 406, 407, 408, 409, 410, 414, 421, 427, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 805, 806, 807, 808, 809, 810, 811, 813, 815, 816, 817, 873, 874, 875, 876, 877, 878, 956, 969, 996, 998, 1000, 1004, 1007], "linkage_matrix": 38, "column_stack": [38, 273, 280], "distances_": [38, 405, 409, 1005], "distance_threshold": [38, 405, 409, 1002, 1005], "truncate_mod": 38, "parenthesi": [38, 345], "plot_agglomerative_dendrogram": [38, 974], "scalabl": [39, 41, 59, 150, 157, 213, 231, 292, 320, 345, 373, 380, 381, 412, 455, 466, 553, 604, 768, 779, 789, 791, 803, 826, 835, 837, 865, 867, 870, 871, 945, 948, 950, 953, 966, 968, 974, 977, 993, 996, 997, 1003, 1004, 1007, 1008], "hundr": [39, 113, 202, 282, 340, 377, 380, 525, 526, 950, 1004], "thousand": [39, 107, 212, 214, 282, 320, 340, 373, 380, 822, 823, 870, 950, 987, 1002, 1004], "million": [39, 53, 142, 158, 381, 656, 950, 968, 977, 1007, 1008], "chose": [39, 153, 982], "usag": [39, 50, 67, 70, 79, 91, 99, 132, 153, 154, 209, 213, 215, 232, 267, 269, 275, 303, 321, 332, 340, 344, 345, 347, 348, 352, 353, 355, 359, 360, 363, 372, 373, 377, 378, 383, 384, 408, 410, 414, 428, 453, 460, 476, 479, 483, 487, 498, 499, 505, 525, 526, 555, 573, 604, 612, 622, 623, 624, 630, 631, 632, 633, 640, 641, 642, 643, 644, 654, 741, 744, 755, 756, 824, 865, 873, 874, 875, 876, 902, 942, 943, 945, 952, 953, 954, 956, 968, 975, 978, 982, 989, 994, 995, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010], "enjoi": 39, "edit": [39, 342, 344, 345, 348, 349, 353, 357, 363, 494, 498, 795, 947, 949, 954, 960, 987], "158": [39, 380, 633], "manojkumarsivaraj334": 39, "joblib": [39, 51, 68, 107, 258, 288, 340, 343, 345, 348, 354, 357, 359, 363, 366, 367, 372, 374, 384, 401, 405, 408, 409, 410, 412, 414, 416, 421, 422, 425, 428, 431, 436, 472, 495, 499, 500, 501, 503, 506, 507, 509, 510, 512, 519, 520, 521, 522, 527, 528, 529, 530, 531, 532, 533, 534, 558, 566, 571, 572, 574, 596, 598, 603, 611, 615, 617, 619, 621, 622, 623, 625, 627, 629, 630, 632, 640, 643, 652, 653, 654, 655, 656, 657, 658, 737, 741, 744, 762, 765, 766, 768, 776, 784, 786, 787, 788, 789, 790, 792, 793, 794, 795, 797, 798, 807, 808, 811, 813, 815, 816, 818, 819, 824, 825, 826, 827, 860, 861, 919, 920, 921, 923, 938, 953, 973, 993, 994, 996, 998, 1000, 1001, 1002, 1004, 1005, 1008, 1010], "cpu_count": [39, 107, 258, 921], "xx": [39, 55, 75, 110, 114, 119, 128, 139, 140, 141, 154, 168, 188, 191, 192, 193, 194, 195, 206, 208, 216, 228, 264, 273, 280, 281, 301, 306, 307, 312, 313, 316, 317, 349], "yy": [39, 55, 75, 110, 119, 128, 139, 141, 154, 188, 192, 193, 194, 195, 206, 208, 216, 264, 273, 280, 281, 301, 306, 307, 312, 313, 316, 317], "n_center": [39, 476], "25000": 39, "colors_": 39, "cname": 39, "birch_model": 39, "final_step": 39, "centroid": [39, 42, 54, 55, 73, 150, 259, 266, 281, 291, 320, 341, 373, 406, 407, 410, 411, 412, 413, 416, 423, 424, 426, 468, 513, 595, 812, 974, 975, 989, 993, 997, 1000, 1005, 1009], "subcluster_centers_": [39, 406], "this_centroid": 39, "set_autoscaley_on": 39, "mbk": [39, 61], "256": [39, 45, 50, 113, 284, 333, 340, 373, 380, 413, 432, 501, 510, 527, 821, 853, 863, 987, 1007], "max_no_improv": [39, 58, 61, 413, 501, 502, 503, 510, 1007, 1008], "t_mini_batch": [39, 61], "mbk_means_labels_uniqu": 39, "cluster_centers_": [39, 40, 45, 47, 55, 57, 58, 60, 61, 87, 291, 320, 404, 407, 411, 412, 413, 986], "882": [39, 238, 974], "plot_birch_vs_minibatchkmean": [39, 974], "cloud": [40, 79, 86, 88, 150, 353, 378, 497, 505, 656, 953, 971, 972, 974, 986], "bisectingkmean": [40, 373, 1007, 1008, 1009], "__doc__": [40, 71, 142, 227, 359], "n_clusters_list": 40, "clustering_algorithm": [40, 41, 59], "variant": [40, 87, 147, 149, 150, 238, 290, 291, 320, 321, 351, 373, 376, 378, 381, 383, 413, 424, 454, 457, 458, 476, 479, 507, 523, 524, 529, 579, 583, 586, 587, 591, 594, 602, 603, 605, 609, 636, 668, 763, 767, 769, 770, 771, 780, 787, 808, 826, 862, 943, 949, 950, 951, 952, 953, 955, 956, 967, 973, 974, 987, 993, 1001], "algorithm_nam": 40, "algo": [40, 96], "hide": [40, 345, 353, 800, 801, 802, 803, 804, 996, 1001, 1009], "flat": [40, 87, 154, 201, 202, 203, 236, 373, 381, 404, 410, 412, 425, 473, 960, 986, 993, 994, 1009], "label_out": 40, "012": [40, 156, 158, 974], "plot_bisect_kmean": [40, 974], "null": [41, 67, 153, 154, 155, 238, 244, 373, 377, 460, 612, 633, 644, 668, 694, 720, 758, 790, 949, 950, 953, 968, 1003], "mismatch": [41, 952, 1002], "warn": [41, 59, 68, 181, 196, 215, 241, 258, 274, 275, 282, 332, 333, 345, 348, 349, 350, 359, 367, 374, 381, 460, 502, 504, 511, 514, 517, 518, 521, 522, 523, 524, 525, 526, 528, 529, 530, 535, 536, 537, 538, 539, 540, 542, 566, 600, 657, 676, 677, 692, 693, 701, 746, 747, 750, 815, 829, 830, 865, 866, 868, 869, 870, 871, 873, 874, 875, 876, 885, 886, 892, 902, 910, 919, 923, 939, 940, 942, 953, 963, 985, 993, 995, 996, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "noisy_circl": [41, 59], "noisy_moon": [41, 59], "no_structur": [41, 59], "anisotropicli": [41, 59], "170": [41, 54, 55, 59, 309, 351, 974], "x_aniso": [41, 54, 59], "aniso": [41, 59], "plot_num": [41, 59, 208], "default_bas": [41, 59], "quantil": [41, 50, 60, 84, 101, 103, 150, 159, 278, 281, 282, 357, 380, 402, 403, 422, 483, 516, 524, 526, 621, 634, 686, 708, 711, 713, 788, 830, 842, 843, 844, 854, 855, 953, 963, 974, 975, 989, 993, 997, 1000, 1002, 1006, 1007, 1009], "damp": [41, 373, 404, 418], "min_sampl": [41, 46, 62, 357, 359, 373, 384, 408, 410, 414, 419, 420, 421, 635, 949, 1002, 1006], "xi": [41, 62, 342, 373, 376, 381, 414, 420, 473, 967, 1004], "min_cluster_s": [41, 62, 293, 373, 410, 414, 420, 1002], "allow_single_clust": [41, 410], "hdbscan_min_cluster_s": 41, "hdbscan_min_sampl": 41, "220": [41, 993], "i_dataset": [41, 59, 208], "algo_param": [41, 59], "param": [41, 52, 58, 59, 67, 112, 113, 115, 116, 201, 214, 215, 236, 238, 246, 250, 262, 274, 294, 345, 347, 359, 364, 380, 383, 387, 390, 396, 397, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 428, 429, 433, 434, 435, 436, 437, 438, 439, 440, 446, 447, 448, 449, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 545, 546, 547, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 599, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 648, 652, 653, 654, 655, 656, 760, 761, 762, 765, 766, 774, 776, 786, 787, 788, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 821, 822, 823, 824, 825, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 857, 858, 860, 861, 862, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 909, 910, 942, 999, 1003, 1004, 1006, 1007, 1010], "easier": [41, 59, 63, 77, 111, 160, 166, 210, 218, 235, 236, 278, 307, 319, 328, 340, 345, 347, 350, 353, 357, 363, 375, 377, 432, 479, 863, 896, 948, 953, 960, 969, 973, 977, 987, 1002, 1007], "estimate_bandwidth": [41, 60, 373, 412, 425], "symmetr": [41, 114, 156, 183, 359, 371, 373, 416, 426, 427, 438, 483, 491, 493, 654, 658, 659, 668, 669, 679, 680, 681, 687, 691, 699, 700, 718, 720, 726, 748, 758, 760, 761, 939, 942, 949, 953, 956, 1009], "meanshift": [41, 291, 373, 404, 996, 997, 998, 1001, 1003, 1004, 1007, 1008, 1009], "bin_seed": [41, 60, 412, 425, 1004], "two_mean": 41, "spectralclust": [41, 291, 373, 404, 956, 993, 994, 1003, 1005, 1006, 1007, 1008, 1009, 1010], "nearest_neighbor": [41, 416, 655], "average_linkag": 41, "gmm": [41, 56, 150, 223, 225, 228, 229, 230, 468, 476, 761, 781, 952, 974, 993, 994, 997, 998, 999], "gaussianmixtur": [41, 54, 225, 226, 227, 228, 229, 230, 379, 760, 952, 999, 1001, 1002, 1006, 1007, 1009], "covariance_typ": [41, 225, 226, 228, 229, 230, 760, 761, 1009], "nkmean": 41, "npropag": 41, "ncluster": 41, "nmixtur": 41, "catch": [41, 59, 275, 333, 353, 354], "catch_warn": [41, 59, 215, 274, 275], "filterwarn": [41, 59, 196, 274, 275, 345, 963], "userwarn": [41, 59, 103, 146, 173, 190, 233, 312, 324, 350, 676, 963, 999, 1001, 1006], "t1": [41, 43, 59, 196, 203, 206, 208], "ff7f00": [41, 59, 208], "4daf4a": [41, 59], "a65628": [41, 59], "984ea3": [41, 59], "999999": [41, 59], "e41a1c": [41, 59], "dede00": [41, 59, 60], "transax": [41, 59, 205, 208, 226, 266, 280], "876": [41, 974], "plot_cluster_comparison": [41, 974], "deliv": [42, 332, 977], "bad": [42, 57, 58, 138, 153, 319, 328, 345, 373, 383, 656, 709, 942, 949, 950, 955, 961, 986, 993], "though": [42, 52, 107, 135, 158, 160, 218, 244, 263, 280, 282, 320, 321, 328, 332, 339, 342, 345, 347, 358, 359, 373, 378, 379, 380, 381, 382, 663, 769, 771, 865, 942, 943, 945, 950, 953, 956, 961, 963, 967, 987, 1001], "3d": [42, 45, 64, 83, 93, 178, 201, 203, 205, 327, 381, 470, 550, 916, 986, 1000, 1001, 1003], "mplot3d": [42, 64, 83, 93, 154, 178, 201, 203], "noqa": [42, 64, 83, 93, 114, 135, 148, 149, 154, 178, 201, 203, 249, 250, 289, 319, 349, 543, 544, 591, 765, 766, 942, 1002], "f401": [42, 64, 83, 93, 154, 178, 201, 203], "k_means_iris_8": 42, "k_means_iris_3": 42, "k_means_iris_bad_init": 42, "est": [42, 121, 153, 215, 217, 280, 289, 328, 367, 380, 526, 698, 830, 942, 953, 963, 967, 1004, 1005], "elev": [42, 64, 83, 93, 154, 178, 201, 205, 455], "azim": [42, 64, 83, 93, 154, 178, 201, 205], "134": [42, 50, 93, 113, 238, 996], "xaxi": [42, 83, 93, 107, 178, 201, 203, 206, 258, 263, 319], "set_ticklabel": [42, 83, 93, 178, 319], "zaxi": [42, 83, 93, 178, 201], "petal": [42, 83, 95, 97, 110, 222, 289, 292, 342, 374, 878, 969, 984, 985], "sepal": [42, 83, 95, 97, 110, 139, 164, 222, 261, 289, 292, 304, 342, 963, 984, 985], "length": [42, 66, 82, 83, 85, 95, 97, 110, 135, 137, 138, 139, 142, 143, 145, 158, 164, 215, 216, 219, 222, 261, 289, 292, 304, 321, 338, 342, 345, 353, 354, 359, 374, 378, 380, 381, 383, 409, 454, 472, 473, 476, 479, 487, 515, 527, 545, 546, 553, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 596, 610, 611, 614, 615, 616, 617, 618, 620, 621, 624, 625, 626, 627, 645, 648, 744, 762, 765, 766, 776, 791, 793, 796, 797, 799, 807, 808, 809, 811, 813, 852, 878, 885, 887, 891, 907, 908, 924, 927, 952, 959, 963, 978, 984, 985, 993, 996, 997, 999, 1000, 1001, 1002, 1004, 1005, 1009], "set_zlabel": [42, 83, 178], "setosa": [42, 83, 93, 95, 247, 248, 342, 468, 978, 985], "versicolour": [42, 83, 93, 95, 342, 985], "virginica": [42, 83, 93, 95, 247, 248, 342, 468, 953, 985], "text3d": [42, 93], "319": [42, 138, 974, 987], "plot_cluster_iri": [42, 974], "voxel": [43, 63, 549], "multipl": [43, 65, 85, 96, 101, 107, 109, 110, 112, 131, 150, 153, 175, 213, 238, 246, 250, 255, 257, 260, 287, 293, 310, 332, 333, 334, 339, 341, 342, 345, 347, 348, 349, 350, 357, 359, 372, 373, 374, 375, 376, 378, 380, 381, 382, 383, 384, 385, 408, 424, 428, 430, 431, 433, 438, 452, 455, 456, 459, 460, 461, 467, 468, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 507, 508, 509, 510, 511, 515, 517, 518, 519, 520, 523, 524, 525, 526, 527, 545, 563, 571, 572, 574, 575, 591, 596, 598, 603, 604, 605, 606, 610, 611, 614, 616, 617, 618, 621, 624, 625, 626, 627, 630, 631, 632, 635, 637, 640, 642, 643, 653, 654, 656, 657, 658, 685, 686, 691, 708, 709, 711, 713, 714, 716, 748, 751, 753, 754, 756, 760, 761, 762, 764, 765, 766, 767, 768, 774, 776, 777, 778, 779, 780, 781, 782, 787, 788, 789, 791, 795, 796, 797, 798, 799, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 821, 822, 823, 824, 825, 827, 830, 842, 846, 854, 857, 858, 865, 866, 867, 870, 881, 896, 901, 902, 924, 927, 945, 948, 949, 950, 954, 955, 956, 960, 961, 966, 967, 969, 972, 973, 974, 978, 987, 993, 994, 996, 999, 1000, 1003, 1004, 1005, 1006, 1008, 1009, 1010], "partli": [43, 732], "procedur": [43, 53, 107, 114, 135, 161, 169, 229, 240, 281, 285, 307, 319, 328, 345, 347, 357, 358, 359, 360, 371, 372, 375, 377, 378, 380, 382, 495, 501, 502, 504, 509, 510, 511, 517, 518, 519, 520, 523, 524, 557, 559, 566, 573, 608, 636, 638, 651, 691, 748, 822, 823, 842, 854, 924, 942, 949, 955, 963, 966, 967, 968, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "solut": [43, 160, 165, 170, 172, 186, 195, 208, 214, 290, 307, 343, 347, 359, 370, 373, 375, 377, 378, 381, 382, 413, 415, 417, 495, 501, 502, 503, 504, 506, 507, 509, 510, 511, 512, 513, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 574, 610, 612, 614, 616, 618, 619, 620, 622, 624, 626, 628, 629, 630, 631, 632, 633, 636, 638, 640, 641, 642, 643, 644, 646, 647, 649, 650, 651, 760, 761, 776, 814, 822, 823, 946, 947, 949, 950, 952, 957, 959, 967, 968, 971, 977, 982, 985, 987, 993, 996, 1006, 1007, 1008], "closest": [43, 61, 185, 347, 373, 404, 406, 407, 411, 412, 413, 423, 617, 742, 743, 795, 805, 806, 807, 808, 809, 811, 813, 815, 816, 817, 944, 947, 954, 956, 985], "partit": [43, 63, 66, 117, 119, 238, 275, 359, 370, 371, 373, 377, 380, 413, 415, 417, 426, 475, 521, 522, 523, 524, 527, 528, 529, 668, 669, 679, 749, 813, 873, 874, 875, 876, 952, 956, 959, 963, 969, 987], "cluster_qr": [43, 373, 416, 426, 1007], "qr": [43, 183, 369, 498, 505, 508, 901, 902, 950, 999, 1010], "pivot": [43, 249, 250], "cheung": [43, 994], "andrew": [43, 373, 426, 655, 659, 681, 700, 758, 840, 957, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "knyazev": [43, 373, 416, 426, 659, 1003, 1006, 1007], "ucdenv": 43, "skimag": [43, 44, 339, 986], "spectral_clust": [43, 63, 1001, 1003, 1005, 1006, 1007, 1008, 1010], "orig_coin": [43, 44], "speed": [43, 44, 54, 66, 90, 99, 107, 149, 154, 167, 170, 174, 258, 289, 297, 319, 321, 334, 345, 348, 354, 357, 359, 369, 371, 373, 378, 380, 381, 384, 407, 408, 411, 412, 413, 414, 416, 421, 423, 424, 425, 426, 495, 496, 574, 591, 596, 597, 598, 603, 610, 611, 614, 615, 616, 617, 618, 619, 620, 624, 625, 626, 627, 628, 645, 648, 656, 760, 761, 768, 789, 805, 806, 807, 808, 809, 811, 813, 815, 816, 817, 840, 902, 942, 945, 950, 952, 954, 967, 977, 986, 987, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "down": [43, 44, 76, 101, 196, 197, 203, 212, 213, 215, 241, 255, 276, 278, 311, 328, 339, 348, 353, 375, 378, 407, 414, 420, 554, 557, 558, 603, 613, 737, 741, 744, 834, 835, 840, 843, 844, 855, 867, 870, 877, 949, 978, 986, 1001, 1011], "alias": [43, 44, 215, 343, 345, 348, 364, 561, 993, 997, 1007], "smoothened_coin": [43, 44], "rescaled_coin": [43, 44, 986], "anti_alias": [43, 44, 986], "img_to_graph": [43, 63, 381, 996, 1006], "exponenti": [43, 71, 137, 142, 263, 268, 379, 380, 383, 413, 500, 518, 523, 578, 583, 586, 603, 607, 721, 722, 805, 806, 810, 822, 823, 840, 945, 949, 953, 968, 985, 1000, 1006], "beta": [43, 79, 152, 185, 351, 371, 373, 376, 500, 502, 504, 511, 608, 692, 693, 699, 705, 746, 758, 760, 953, 985, 995, 998, 1000, 1002, 1003], "voronoi": [43, 63, 373], "n_region": 43, "extra": [43, 110, 217, 258, 294, 321, 343, 344, 346, 349, 359, 380, 381, 402, 407, 411, 423, 428, 496, 521, 522, 530, 554, 555, 664, 665, 666, 786, 809, 875, 876, 892, 952, 953, 956, 993, 996, 998, 999, 1001, 1006, 1008], "n_regions_plu": 43, "lobpcg": [43, 416, 426, 652, 655, 659, 1003, 1006, 1007, 1008], "amg": [43, 63, 373, 416, 426, 655, 659, 1003, 1007, 1008], "pyamg": [43, 363, 366, 373, 416, 426, 655, 659], "toler": [43, 69, 148, 172, 174, 197, 198, 311, 321, 340, 347, 354, 373, 385, 407, 411, 416, 423, 426, 435, 436, 442, 446, 447, 448, 495, 496, 497, 499, 500, 504, 505, 506, 507, 508, 509, 511, 512, 523, 524, 525, 526, 591, 610, 611, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 640, 642, 643, 645, 646, 647, 648, 652, 653, 654, 655, 657, 658, 659, 805, 806, 810, 814, 822, 823, 860, 861, 865, 866, 867, 868, 869, 870, 871, 939, 949, 953, 967, 968, 983, 1005, 1006, 1007, 1008], "eigen_tol": [43, 416, 426, 655, 659, 994, 1007, 1008], "todo": [43, 212, 349, 353, 359, 373, 1011], "21243": 43, "assign_label": [43, 373, 416, 426], "comment": [43, 319, 343, 344, 345, 346, 348, 349, 353, 451, 543, 953], "paus": 43, "21194": [43, 1006], "660": [43, 222, 974], "plot_coin_segment": [43, 974], "spatial": [44, 46, 52, 156, 165, 198, 275, 340, 359, 373, 384, 408, 410, 414, 416, 421, 643, 656, 723, 726, 741, 742, 743, 744, 755, 756, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 949, 956, 963, 995, 999, 1006, 1009], "constrain": [44, 87, 111, 118, 154, 172, 273, 288, 294, 305, 307, 338, 359, 372, 373, 378, 380, 473, 525, 526, 599, 622, 623, 654, 658, 790, 949, 952, 997], "grid_to_graph": [44, 48, 51, 373, 381, 986, 1006], "st": [44, 64, 238, 292, 996, 999, 1001], "167": [44, 351, 993], "4697": 44, "345": [44, 135, 342, 974], "plot_coin_ward_segment": [44, 974], "vq": [45, 55], "palac": 45, "china": [45, 373, 470, 471, 548], "615": 45, "literatur": [45, 142, 238, 255, 320, 342, 345, 351, 353, 357, 358, 373, 376, 378, 380, 407, 411, 413, 465, 500, 502, 504, 511, 519, 520, 552, 555, 672, 760, 942, 945, 949, 953, 1003], "codebook": [45, 255, 530, 795], "palett": [45, 153, 238], "byte": [45, 50, 381, 451, 467, 472, 473, 546, 552, 553, 555, 918, 985, 987, 993, 1000, 1001, 1008], "rgb": [45, 340, 381, 457, 458, 547, 548, 551], "gif": 45, "pick": [45, 52, 57, 156, 216, 246, 291, 296, 340, 345, 349, 373, 380, 407, 424, 487, 637, 875, 876, 942, 949, 950, 952, 967, 1004], "018": [45, 139, 238, 320, 436, 974], "038": [45, 55, 435, 436, 822], "080": [45, 52, 265, 974], "robertlayton": 45, "load_sample_imag": [45, 547, 548, 1002], "pairwise_distances_argmin": [45, 61, 291, 743, 1001, 1007, 1008, 1009, 1010], "n_color": 45, "photo": 45, "jpg": [45, 470, 548], "original_shap": 45, "image_arrai": 45, "image_array_sampl": 45, "codebook_random": 45, "labels_random": 45, "recreate_imag": 45, "recreat": [45, 219], "book": [45, 66, 407, 411, 413, 795, 800, 804, 949, 950, 951, 954, 1005], "alongsid": [45, 345, 351, 359, 363, 382, 786, 787, 788, 953, 960, 972, 973], "538": [45, 77, 135, 974], "plot_color_quant": [45, 974], "750": [46, 52, 109, 238], "math": [46, 66, 135, 218, 238, 239, 342, 363, 727], "db": [46, 52, 373], "n_noise_": 46, "come": [46, 64, 66, 75, 80, 92, 135, 137, 213, 287, 319, 320, 332, 334, 338, 342, 345, 346, 349, 353, 357, 359, 363, 373, 377, 380, 381, 403, 414, 420, 436, 514, 669, 758, 783, 867, 870, 942, 943, 947, 950, 952, 956, 959, 968, 978, 993, 1004, 1007, 1009], "handi": [46, 67, 320, 321, 346, 1009], "883": 46, "917": [46, 111, 974], "916": 46, "626": [46, 167], "unique_label": [46, 52, 320, 347, 354], "core_samples_mask": 46, "zeros_lik": [46, 183, 247], "bool": [46, 63, 76, 149, 199, 327, 345, 385, 386, 387, 388, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 423, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 483, 486, 487, 488, 490, 491, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 545, 546, 547, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 661, 662, 664, 666, 667, 671, 672, 673, 675, 676, 677, 678, 689, 690, 691, 692, 693, 694, 701, 704, 705, 713, 714, 717, 719, 724, 726, 730, 732, 737, 741, 745, 746, 747, 748, 750, 752, 757, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 776, 780, 781, 784, 785, 788, 789, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 881, 883, 884, 885, 886, 896, 902, 903, 915, 918, 924, 926, 934, 939, 940, 941, 943, 1002, 1005, 1006], "core_sample_indices_": [46, 408], "class_member_mask": 46, "markerfacecolor": [46, 52, 58, 60, 61], "markeredgecolor": [46, 52, 58, 60, 61], "markers": [46, 52, 55, 58, 60, 61, 114, 140, 144, 211, 291], "198": [46, 974, 993], "plot_dbscan": [46, 384, 408, 974], "constitut": [47, 359, 377, 380, 414, 420, 552, 553, 555, 957], "standpoint": 47, "proce": [47, 132, 162, 343, 349, 376, 377, 380, 404, 949], "reassign": [47, 345, 411, 413, 994, 998], "success": [47, 130, 150, 231, 242, 245, 246, 314, 328, 368, 373, 377, 378, 380, 479, 528, 543, 762, 765, 766, 783, 870, 956, 974, 977, 982, 986, 989, 1005], "becom": [47, 52, 54, 68, 75, 112, 183, 185, 215, 218, 240, 258, 279, 283, 307, 311, 319, 328, 339, 345, 347, 349, 353, 359, 360, 373, 375, 380, 381, 383, 404, 414, 418, 419, 421, 517, 545, 552, 553, 555, 583, 591, 622, 623, 640, 642, 839, 865, 866, 872, 948, 949, 950, 952, 956, 963, 968, 985, 987, 994, 1001, 1002, 1005, 1006, 1007, 1008, 1010], "fetch_olivetti_fac": [47, 87, 109, 217, 340, 1001, 1002, 1003], "extract_patches_2d": [47, 90, 381, 1001], "patch_siz": [47, 90, 381, 547, 548], "buffer": [47, 1006], "max_patch": [47, 381, 547, 548, 1001], "4i": 47, "dt": [47, 90, 122, 380, 381, 969], "2400": 47, "700": [47, 289], "800": [47, 290, 340, 548, 656], "1100": 47, "1200": [47, 113, 278, 380], "1300": 47, "1400": [47, 438], "1600": 47, "1700": 47, "1800": 47, "1900": 47, "2100": [47, 290], "2200": [47, 340, 457], "2300": [47, 170], "ntrain": 47, "438": [47, 153, 961, 974], "plot_dict_face_patch": [47, 974], "agglo": [48, 409, 986], "featureagglomer": [48, 51, 404, 405, 970, 986, 996, 1002, 1003, 1006, 1007, 1009, 1010], "x_reduc": [48, 83, 119, 409, 986], "x_restor": 48, "images_restor": 48, "plot_digits_agglomer": [48, 974], "rich": [49, 353, 357, 373, 403, 977, 1004, 1007], "richer": [49, 96, 373], "uneven": [49, 233, 373, 377], "patholog": [49, 952, 999], "clean": [49, 67, 180, 328, 337, 343, 379, 959, 963, 1003], "fring": [49, 373], "sensibl": [49, 148, 255, 320, 347, 949, 963], "resampl": [49, 114, 142, 153, 199, 262, 354, 357, 359, 519, 520, 927, 973, 1002, 1006], "plot_clust": 49, "x_red": 49, "spectralembed": [49, 201, 202, 203, 652, 653, 654, 656, 950, 994, 999, 1003, 1007, 1008, 1010], "562": [49, 974], "plot_digits_linkag": [49, 974], "raccoon": [50, 90, 378], "addition": [50, 68, 103, 153, 181, 199, 215, 288, 290, 320, 345, 357, 371, 381, 574, 575, 610, 616, 635, 842, 942, 943, 953, 961, 972, 999, 1010], "adapt": [50, 52, 101, 113, 114, 140, 224, 225, 280, 311, 333, 343, 344, 345, 354, 373, 380, 383, 479, 480, 481, 482, 640, 641, 642, 822, 823, 949, 955, 957, 963, 967, 972, 973, 1001, 1002, 1009, 1010], "pooch": [50, 345, 363, 366], "instal": [50, 222, 258, 287, 288, 289, 290, 291, 292, 293, 294, 332, 333, 345, 346, 348, 349, 351, 353, 357, 358, 366, 369, 373, 381, 416, 426, 460, 655, 659, 969, 987, 1000, 1001, 1002, 1006, 1007], "raccoon_fac": [50, 90], "nbyte": [50, 212], "768": 50, "1024": [50, 96, 413, 432, 502, 863, 1006], "uint8": [50, 90, 339, 461, 470, 471, 1005], "786432": 50, "unsign": [50, 91, 340, 546, 918], "786": [50, 67, 154], "kilobyt": 50, "behind": [50, 75, 101, 255, 343, 347, 349, 353, 372, 375, 380, 952, 956, 965, 1009], "simplest": [50, 348, 377, 950, 953, 985, 986], "know": [50, 63, 132, 135, 137, 146, 153, 199, 215, 216, 238, 255, 257, 291, 296, 315, 320, 332, 345, 357, 364, 367, 373, 376, 377, 378, 381, 464, 468, 474, 610, 616, 622, 623, 689, 719, 762, 776, 850, 851, 853, 854, 855, 856, 873, 874, 875, 876, 942, 952, 953, 954, 956, 965, 999, 1000, 1003, 1005], "certainli": [50, 66, 320], "subsampl": [50, 96, 113, 116, 154, 181, 198, 199, 234, 281, 285, 289, 422, 523, 524, 525, 526, 527, 596, 643, 665, 765, 766, 791, 830, 842, 854, 881, 891, 945, 949, 973, 993, 1003, 1007, 1009, 1010], "200_000": [50, 281, 830, 1009], "compressed_raccoon_uniform": 50, "spot": [50, 210, 373], "leav": [50, 101, 106, 115, 154, 156, 199, 245, 283, 327, 328, 332, 342, 344, 350, 359, 373, 380, 405, 406, 409, 410, 427, 467, 521, 522, 523, 524, 525, 526, 528, 529, 530, 637, 639, 764, 769, 770, 771, 772, 780, 781, 805, 806, 873, 874, 875, 876, 942, 950, 956, 960, 969, 982, 985, 993, 1000, 1002, 1004, 1005, 1009], "bin_edg": 50, "bin_edges_": [50, 279, 830], "bin_cent": [50, 181], "625": [50, 181, 582, 672], "875": [50, 138, 633], "375": [50, 413, 713, 953], "140": [50, 294, 380, 474, 480, 481, 482, 519, 520, 954], "171": [50, 135, 342, 351, 751, 953], "234": [50, 800, 804, 822, 823, 955], "axvlin": [50, 57, 69, 77, 94, 113, 123, 153, 155, 156, 170, 244, 315, 983], "get_ybound": 50, "state": [50, 54, 66, 68, 75, 183, 212, 220, 225, 244, 289, 328, 333, 334, 345, 347, 351, 353, 357, 359, 360, 372, 381, 386, 404, 407, 411, 413, 418, 423, 439, 508, 553, 643, 765, 766, 774, 776, 778, 805, 806, 812, 860, 861, 888, 942, 943, 949, 955, 958, 965, 972, 973, 977, 995, 997, 999, 1001, 1003, 1006, 1009], "compressed_raccoon_kmean": 50, "90885631": 50, "34346583": 50, "64447187": 50, "28225276": 50, "70763101": 50, "159": [50, 340, 993], "78681467": 50, "185": [50, 135, 146, 305, 342, 351, 822, 823, 974], "17226834": 50, "02069427": 50, "save": [50, 66, 68, 218, 276, 344, 345, 349, 351, 352, 353, 359, 367, 377, 385, 432, 498, 499, 591, 805, 806, 863, 949, 953, 963, 969, 977, 987, 993, 996, 1000, 1003], "verifi": [50, 57, 99, 153, 181, 345, 350, 369, 937, 956], "6291456": 50, "surpris": [50, 154, 343, 949, 972, 995], "x8": 50, "ndarrai": [50, 55, 83, 181, 222, 236, 237, 238, 345, 346, 347, 351, 352, 369, 381, 384, 385, 388, 389, 391, 394, 395, 397, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 427, 428, 429, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 452, 453, 454, 455, 456, 457, 458, 459, 461, 464, 465, 466, 467, 468, 469, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 661, 662, 664, 665, 666, 679, 682, 685, 686, 687, 690, 691, 701, 708, 709, 711, 713, 714, 716, 717, 721, 722, 723, 724, 726, 727, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 748, 752, 753, 754, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 786, 787, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 821, 822, 823, 824, 825, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 882, 883, 884, 885, 890, 891, 899, 901, 902, 903, 904, 908, 915, 917, 918, 922, 925, 926, 928, 929, 930, 931, 934, 939, 940, 953, 968, 973, 996, 1000, 1003, 1004, 1007, 1008, 1009, 1010], "practic": [50, 67, 75, 80, 90, 107, 111, 112, 137, 152, 153, 158, 165, 183, 208, 214, 239, 246, 264, 265, 289, 307, 311, 333, 345, 347, 348, 351, 353, 358, 359, 373, 375, 377, 378, 379, 380, 381, 383, 411, 416, 426, 485, 488, 553, 596, 597, 634, 760, 804, 858, 865, 942, 943, 947, 949, 952, 953, 954, 955, 956, 959, 960, 963, 972, 973, 975, 977, 978, 987, 988, 989, 995, 999, 1001, 1003, 1005], "gain": [50, 203, 245, 258, 260, 294, 297, 319, 320, 327, 344, 351, 353, 380, 460, 496, 521, 525, 526, 528, 689, 719, 760, 761, 794, 873, 875, 954, 958, 966, 969, 996, 1000, 1003], "plot_face_compress": [50, 974], "bayesianridg": [51, 148, 160, 161, 165, 289, 591, 608, 949, 1000, 1001, 1002, 1003, 1006, 1007, 1009, 1010], "shutil": [51, 68, 374], "tempfil": [51, 260, 287, 374, 956], "feature_select": [51, 67, 68, 70, 129, 130, 131, 132, 133, 134, 135, 150, 222, 289, 291, 310, 328, 359, 364, 374, 382, 545, 942, 974, 993, 994, 996, 997, 998, 999, 1000], "kfold": [51, 107, 113, 126, 233, 243, 328, 377, 401, 436, 531, 532, 558, 566, 611, 615, 617, 619, 625, 627, 629, 637, 762, 765, 766, 768, 770, 772, 776, 781, 783, 784, 785, 786, 787, 788, 789, 790, 792, 796, 799, 846, 982, 994, 995, 996, 998, 999, 1001, 1003], "roi_siz": 51, "snr": 51, "noise_coef": 51, "gridsearch": [51, 73, 249, 972], "cachedir": [51, 68, 354, 374], "mkdtemp": [51, 374], "mem": [51, 351, 472, 974], "n_x": [51, 549], "n_y": [51, 549, 955, 963], "parcel": [51, 64, 373], "ward__n_clust": 51, "coef_agglomeration_": 51, "_agglom": 51, "ward_tre": [51, 405, 409, 993, 997], "451933": 51, "675318": 51, "275706": 51, "085711": 51, "1600x1600": 51, "7840": 51, "element": [51, 87, 104, 105, 116, 210, 232, 237, 245, 247, 288, 320, 323, 327, 342, 344, 345, 347, 354, 360, 370, 372, 373, 377, 378, 380, 381, 384, 408, 410, 416, 428, 451, 472, 476, 478, 484, 486, 490, 491, 495, 501, 502, 504, 514, 521, 522, 523, 524, 528, 529, 530, 531, 532, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 581, 596, 622, 623, 630, 631, 632, 640, 641, 642, 671, 681, 690, 697, 699, 709, 726, 732, 741, 745, 751, 752, 795, 805, 806, 807, 808, 809, 811, 813, 815, 816, 820, 822, 823, 828, 844, 845, 848, 852, 865, 870, 873, 874, 875, 876, 904, 905, 906, 924, 926, 927, 939, 947, 949, 953, 954, 957, 960, 963, 964, 965, 969, 977, 978, 998, 999, 1001, 1003, 1004, 1005, 1007, 1009], "return_dist": [51, 427, 805, 806, 807, 808, 809, 811, 813, 815, 816, 817, 956, 997], "________________________________________________________ward_tre": 51, "0min": 51, "905206": 51, "161245": 51, "849835": 51, "091621": 51, "f_regress": [51, 130, 382, 556, 559, 560, 562, 563, 564, 568, 569, 573, 996, 1000, 1007, 1010], "cach": [51, 63, 150, 239, 258, 259, 261, 266, 270, 332, 333, 340, 359, 405, 409, 414, 432, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 466, 472, 762, 807, 809, 825, 826, 863, 867, 868, 869, 870, 871, 938, 956, 968, 974, 996, 1000, 1001, 1002, 1003, 1005, 1006, 1008, 1009], "selectpercentil": [51, 67, 222, 310, 382, 556, 559, 560, 562, 563, 567, 570, 994, 999, 1009, 1010], "anova__percentil": [51, 310], "coef_selection_": 51, "_univariate_select": 51, "267703": 51, "026711": 51, "_____________________________________________________f_regress": 51, "447268": 51, "638768": 51, "rdbu_r": [51, 77, 97, 307], "temporari": [51, 66, 68, 332, 432, 651, 744, 863, 956, 996, 997, 1000, 1006, 1007], "worri": [51, 950, 979], "rmtree": [51, 68, 374], "ignore_error": 51, "526": [51, 865, 974], "plot_feature_agglomeration_vs_univariate_select": [51, 974], "huberregressor": [51, 137, 150, 159, 179, 185, 186, 187, 285, 488, 634, 635, 636, 642, 643, 949, 974, 999, 1000, 1001, 1002], "perspect": [52, 57, 181, 332, 340, 357, 360, 494, 607, 865, 946], "conveni": [52, 185, 218, 337, 353, 357, 374, 377, 381, 383, 388, 407, 411, 413, 415, 417, 428, 453, 575, 640, 642, 663, 691, 748, 824, 825, 927, 943, 945, 949, 950, 960, 977, 987, 993], "ground_truth": [52, 265], "proba_map": 52, "class_index": 52, "ci": [52, 333, 348, 349, 353, 955, 999, 1001], "preambl": 52, "parameters_str": 52, "greatest": [52, 363, 373, 832, 1001], "remark": [52, 80, 135, 334, 345, 963], "unlik": [52, 53, 107, 153, 154, 201, 203, 229, 278, 305, 345, 347, 351, 357, 359, 364, 375, 377, 378, 381, 410, 414, 499, 614, 615, 618, 619, 620, 646, 647, 748, 783, 805, 806, 845, 856, 868, 949, 952, 953, 960, 968, 993, 999], "bi": [52, 381], "worth": [52, 110, 154, 181, 343, 345, 353, 977], "rememb": [52, 347, 350, 363, 381, 956, 960, 969], "hardli": [52, 571, 572], "proper": [52, 170, 199, 334, 351, 371, 380, 413, 505, 517, 640, 902, 928, 948, 949, 950, 953, 968, 993, 1003, 1004, 1005, 1006, 1007, 1008, 1010], "must": [52, 153, 154, 156, 162, 165, 198, 199, 208, 219, 233, 264, 279, 284, 319, 328, 340, 344, 345, 346, 347, 349, 351, 353, 359, 360, 364, 369, 371, 373, 374, 377, 378, 380, 381, 382, 383, 384, 394, 402, 405, 408, 409, 410, 411, 413, 414, 415, 419, 421, 423, 425, 426, 428, 430, 431, 433, 438, 451, 472, 473, 476, 487, 495, 501, 502, 503, 504, 505, 507, 508, 511, 517, 518, 523, 524, 525, 526, 531, 532, 545, 546, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 574, 575, 581, 584, 591, 592, 593, 594, 596, 597, 602, 606, 607, 612, 613, 616, 622, 623, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 644, 646, 649, 650, 651, 652, 653, 656, 657, 658, 659, 660, 663, 667, 670, 673, 698, 709, 727, 734, 737, 741, 744, 751, 755, 756, 757, 759, 760, 761, 762, 763, 765, 766, 767, 769, 771, 772, 774, 776, 777, 778, 780, 781, 783, 786, 789, 791, 792, 800, 801, 802, 803, 804, 807, 808, 809, 811, 813, 814, 815, 816, 817, 820, 821, 822, 823, 825, 828, 829, 830, 832, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 849, 865, 866, 867, 868, 869, 870, 871, 872, 878, 921, 928, 937, 939, 942, 943, 949, 950, 951, 953, 956, 957, 959, 960, 967, 968, 969, 978, 987, 993, 996, 1000, 1004, 1006, 1007, 1010], "maintain": [52, 186, 199, 201, 215, 238, 333, 344, 348, 351, 352, 353, 357, 359, 363, 373, 380, 404, 406, 834, 835, 841, 842, 845, 850, 853, 854, 856, 949, 950, 963, 972, 973, 978, 989, 1008], "mitig": [52, 155, 285, 333, 334, 950, 969, 985, 986, 1005], "great": [52, 152, 153, 179, 328, 345, 357, 378, 727, 973, 977, 993, 1000], "appropri": [52, 54, 94, 142, 153, 185, 215, 247, 323, 328, 343, 345, 347, 353, 359, 372, 373, 377, 379, 380, 384, 408, 414, 421, 453, 454, 455, 460, 464, 465, 466, 468, 469, 474, 541, 546, 555, 556, 559, 560, 562, 563, 564, 636, 638, 651, 673, 807, 808, 809, 811, 813, 815, 816, 817, 937, 949, 952, 953, 963, 997, 1000, 1006, 1009], "immedi": [52, 345, 357, 762, 776, 786, 787, 1001], "hdb": [52, 410], "probabilities_": [52, 410], "capabl": [52, 53, 80, 142, 185, 205, 347, 359, 363, 954, 957, 968, 969, 977, 993, 1002, 1010], "constraint": [52, 54, 64, 87, 100, 150, 176, 185, 218, 219, 233, 274, 275, 276, 288, 345, 357, 378, 381, 451, 472, 473, 521, 522, 525, 526, 528, 529, 596, 599, 780, 781, 873, 874, 875, 876, 922, 942, 944, 949, 950, 967, 974, 997, 1000, 1001, 1004, 1006, 1008, 1010], "reachabl": [52, 62, 410, 414, 419, 420, 421, 811, 907], "fragment": [52, 90], "sparser": [52, 160, 172, 378, 435, 442, 503, 507, 949, 956, 967], "Not": [52, 126, 154, 332, 357, 373, 391, 392, 395, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 433, 434, 435, 436, 437, 438, 439, 440, 495, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 527, 530, 533, 534, 545, 546, 547, 552, 553, 555, 591, 592, 593, 594, 641, 652, 653, 654, 655, 657, 757, 760, 761, 762, 765, 766, 776, 802, 805, 806, 809, 810, 811, 813, 817, 829, 837, 840, 841, 843, 846, 857, 858, 869, 953, 959, 972, 1002], "mention": [52, 80, 101, 199, 288, 328, 332, 345, 349, 350, 357, 359, 373, 660, 857, 858, 942, 947, 949, 973, 976, 977, 987, 1000, 1001, 1002], "until": [52, 135, 189, 250, 289, 291, 350, 359, 360, 370, 373, 377, 382, 472, 473, 521, 522, 523, 524, 528, 529, 530, 557, 610, 611, 616, 617, 622, 623, 624, 625, 626, 627, 630, 631, 632, 635, 640, 641, 642, 658, 760, 761, 765, 766, 822, 823, 862, 865, 873, 874, 875, 876, 928, 942, 949, 950, 958, 966, 969, 987, 996, 1000, 1001, 1007], "tradeoff": [52, 104, 150, 213, 221, 231, 245, 246, 247, 248, 319, 332, 345, 353, 379, 479, 528, 662, 666, 690, 752, 791, 826, 845, 865, 950, 974, 985, 1002, 1005], "comfort": [52, 380], "epsilon": [52, 62, 163, 204, 214, 293, 314, 378, 410, 419, 607, 613, 631, 640, 642, 709, 822, 823, 866, 868, 871, 946, 949, 953, 957, 967, 968, 985, 993], "incap": 52, "suffici": [52, 121, 189, 252, 307, 332, 359, 373, 382, 496, 621, 646, 647, 781, 782, 954, 956, 973, 1002, 1008, 1009], "intervent": 52, "inaccess": 52, "ultim": [52, 205, 346], "world": [52, 66, 70, 153, 185, 205, 218, 319, 332, 338, 342, 373, 378, 381, 918, 943, 953, 955, 971, 973, 977, 981, 989, 993], "whose": [52, 74, 75, 76, 135, 142, 181, 305, 340, 353, 354, 359, 371, 373, 375, 380, 382, 383, 386, 401, 402, 403, 412, 425, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 479, 498, 502, 504, 505, 508, 511, 513, 536, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 604, 635, 659, 682, 762, 769, 776, 790, 811, 830, 857, 858, 901, 932, 933, 947, 954, 958, 959, 960, 968, 996, 1001, 1002, 1004, 1007], "respect": [52, 64, 83, 92, 101, 105, 107, 110, 118, 145, 158, 160, 165, 170, 183, 195, 198, 201, 203, 209, 212, 214, 218, 229, 247, 264, 265, 276, 283, 291, 304, 311, 332, 333, 340, 341, 345, 371, 373, 376, 378, 380, 381, 383, 410, 428, 431, 434, 435, 436, 437, 438, 439, 440, 498, 504, 505, 511, 517, 525, 526, 561, 574, 575, 576, 577, 578, 579, 580, 583, 584, 585, 586, 587, 588, 589, 600, 607, 635, 654, 658, 676, 691, 745, 748, 760, 761, 801, 811, 822, 823, 877, 879, 942, 946, 947, 949, 950, 953, 956, 957, 958, 959, 963, 968, 972, 977, 996, 998, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "neighborhood": [52, 77, 95, 127, 149, 150, 201, 258, 259, 260, 261, 269, 270, 342, 359, 373, 378, 384, 408, 410, 414, 421, 466, 468, 479, 505, 513, 592, 595, 660, 791, 807, 808, 811, 813, 814, 815, 816, 817, 819, 825, 826, 845, 950, 959, 974, 975, 989, 1002], "recomput": [52, 53, 219, 221, 260, 287, 433, 438, 949, 965, 998, 1009], "cut_dist": [52, 410], "plot_hdbscan": [52, 974], "johnson": [52, 150, 207, 278, 282, 337, 372, 453, 466, 841, 853, 857, 858, 859, 963, 970, 974, 989, 1001, 1007, 1009], "lindenstrauss": [52, 150, 207, 337, 372, 453, 466, 857, 858, 859, 970, 974, 989], "bound": [52, 141, 143, 145, 150, 183, 199, 207, 237, 343, 352, 373, 378, 381, 383, 384, 408, 453, 466, 476, 487, 500, 559, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 596, 599, 601, 614, 618, 622, 641, 669, 698, 751, 760, 761, 805, 806, 842, 854, 857, 858, 859, 867, 868, 869, 872, 889, 921, 949, 952, 953, 956, 965, 967, 968, 970, 974, 1001, 1004, 1005, 1007], "intract": [53, 378, 950, 958], "inferenti": 53, "meta": [53, 66, 100, 124, 150, 181, 215, 243, 247, 254, 257, 293, 294, 326, 328, 339, 343, 347, 349, 357, 359, 364, 369, 371, 382, 383, 393, 401, 407, 408, 411, 413, 429, 433, 434, 435, 436, 437, 438, 439, 440, 446, 447, 448, 460, 497, 498, 502, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 539, 545, 546, 552, 554, 555, 558, 561, 567, 574, 575, 599, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 654, 762, 763, 764, 769, 771, 778, 780, 788, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 810, 812, 815, 816, 822, 823, 825, 828, 830, 831, 832, 837, 844, 845, 860, 861, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 913, 942, 954, 973, 974, 975, 989, 993, 996, 997, 998, 999, 1000, 1001, 1004, 1005, 1007, 1008, 1010], "chirag": 53, "nagpal": 53, "christo": [53, 1002, 1003, 1005, 1007, 1010], "arida": [53, 1002, 1003, 1005, 1007, 1010], "baseestim": [53, 99, 215, 258, 345, 358, 359, 383, 388, 390, 391, 395, 396, 397, 565, 596, 597, 894, 993, 1000, 1003, 1005, 1007, 1008], "clone": [53, 114, 145, 154, 215, 276, 294, 328, 343, 345, 348, 349, 351, 353, 359, 371, 374, 383, 401, 429, 533, 534, 561, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 768, 784, 789, 792, 796, 799, 825, 826, 862, 973, 993, 999, 1001, 1005, 1009, 1010], "metaestim": [53, 347, 359, 372, 862, 997, 1006, 1007, 1010, 1011], "available_if": [53, 359, 1006, 1007, 1011], "check_is_fit": [53, 99, 215, 348, 354, 359, 1003, 1006, 1007], "5000": [53, 167, 196, 197, 199, 289, 846], "_classifier_ha": 53, "deleg": [53, 351, 397, 398, 878, 997, 999, 1005], "unfit": [53, 374, 398, 428, 533, 534, 566, 575, 1001, 1003, 1010], "classifier_": [53, 215], "inductivecluster": 53, "clusterer_": 53, "plot_scatt": 53, "cluster_label": [53, 57], "x_new": [53, 374, 378, 382, 397, 406, 407, 409, 411, 413, 495, 496, 497, 498, 499, 500, 501, 503, 505, 506, 507, 508, 513, 531, 533, 534, 546, 547, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 592, 594, 599, 602, 603, 604, 605, 606, 652, 653, 654, 655, 656, 814, 821, 828, 829, 830, 831, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 857, 858, 965, 978], "y_new": 53, "declar": [53, 202, 215, 328, 345, 346, 347, 351, 359, 407, 410, 411, 423, 435, 436, 442, 654, 658, 1000, 1004], "membership": [53, 360, 370, 372, 373, 475, 476, 477, 478, 479, 483, 486, 968], "inductive_learn": 53, "probable_clust": 53, "050": [53, 961, 974], "plot_inductive_clust": [53, 974], "__sklearn_is_fitted__": [53, 98, 150, 347, 387, 390, 937, 974, 1006, 1007], "develop": [53, 199, 236, 238, 255, 287, 293, 319, 332, 340, 344, 345, 351, 357, 359, 360, 362, 364, 367, 370, 372, 375, 376, 380, 381, 387, 390, 397, 457, 762, 937, 949, 953, 956, 969, 972, 973, 974, 976, 977, 985, 993, 1001, 1002, 1003, 1008, 1010, 1011], "meant": [54, 135, 218, 340, 347, 354, 438, 457, 641, 811, 919, 920, 943, 957, 959, 963, 994], "unintuit": 54, "possibli": [54, 80, 135, 181, 196, 311, 320, 342, 344, 353, 367, 373, 380, 381, 415, 417, 553, 800, 801, 802, 803, 804, 870, 871, 873, 874, 875, 876, 942, 945, 950, 956, 963, 1008], "undesir": [54, 138, 383], "phil": [54, 998, 1009], "roth": [54, 998, 1001, 1008], "mr": [54, 292, 994, 997, 1007], "anisotrop": [54, 139, 383, 581, 583, 586], "ellipt": [54, 949], "60834549": 54, "63667341": 54, "40887718": 54, "85253229": 54, "x_vari": 54, "y_vari": 54, "unequ": [54, 1001], "x_filter": 54, "unevenli": [54, 181, 233], "y_filter": 54, "set_i": 54, "scenario": [54, 66, 137, 158, 185, 241, 328, 352, 363, 377, 380, 501, 507, 509, 510, 947, 953, 963, 1003], "criteria": [54, 107, 150, 159, 170, 189, 229, 238, 353, 373, 382, 430, 446, 447, 448, 465, 521, 522, 523, 524, 528, 529, 610, 616, 620, 622, 623, 635, 656, 826, 845, 865, 866, 873, 874, 875, 876, 943, 952, 957, 967, 974, 986, 996, 1001, 1004], "knowledg": [54, 109, 153, 198, 218, 238, 340, 345, 348, 351, 358, 359, 373, 377, 380, 384, 408, 475, 519, 520, 527, 684, 699, 703, 746, 794, 953, 954, 965, 987], "consequ": [54, 94, 199, 238, 239, 278, 304, 328, 378, 380, 525, 526, 530, 619, 620, 943, 949, 953, 961, 969, 1002, 1004, 1009], "inertia": [54, 55, 58, 320, 373, 407, 411, 413, 416, 423, 424, 426, 427, 1004], "common_param": [54, 114, 154, 214, 240, 241, 311], "unexpect": [54, 215, 328, 345, 350, 353, 363, 367, 499, 660, 953, 968, 995, 1001, 1002, 1005, 1007, 1009], "suffic": [54, 55, 347, 987], "propos": [54, 73, 74, 258, 340, 345, 347, 357, 359, 373, 375, 380, 385, 386, 414, 439, 499, 571, 572, 640, 641, 642, 822, 823, 949, 952, 956, 967, 1000], "inflat": [54, 152, 153, 155, 373, 377, 953, 963], "allevi": [54, 160, 165, 373, 955], "fastest": [54, 236, 321, 411, 634, 636, 638, 651, 901, 902, 952], "restart": [54, 348, 353, 411, 495, 501, 502, 507, 509, 510, 574, 575, 950, 1006], "090": [54, 974], "plot_kmeans_assumpt": [54, 974], "posterior": [54, 136, 137, 138, 143, 150, 160, 238, 378, 383, 513, 514, 516, 574, 575, 577, 578, 579, 583, 586, 587, 591, 608, 609, 672, 760, 947, 972, 974, 999, 1002], "judg": [55, 187, 373, 982], "definit": [55, 76, 169, 181, 245, 258, 320, 345, 346, 347, 359, 362, 373, 375, 376, 378, 491, 493, 499, 575, 592, 656, 672, 682, 691, 721, 760, 761, 942, 945, 947, 949, 951, 953, 956, 967, 971, 989, 997, 1001, 1008], "shorthand": [55, 359, 374, 431, 525, 526, 826, 827, 996], "homo": 55, "compl": 55, "mea": 55, "context": [55, 218, 222, 258, 332, 333, 339, 344, 346, 358, 359, 373, 374, 379, 380, 381, 383, 384, 401, 408, 410, 412, 414, 416, 421, 422, 425, 428, 431, 432, 436, 495, 499, 500, 501, 503, 506, 507, 508, 509, 510, 512, 519, 520, 521, 522, 527, 528, 529, 530, 531, 532, 533, 534, 558, 566, 571, 572, 574, 590, 591, 594, 596, 598, 603, 611, 615, 617, 619, 621, 622, 623, 625, 627, 629, 630, 632, 640, 643, 652, 653, 654, 655, 656, 657, 658, 737, 741, 744, 762, 765, 766, 768, 776, 784, 786, 787, 788, 789, 790, 792, 793, 794, 795, 797, 798, 807, 808, 811, 813, 815, 816, 818, 819, 824, 827, 860, 861, 863, 865, 866, 867, 868, 869, 870, 871, 921, 943, 949, 953, 959, 963, 967, 973, 976, 977, 985, 993, 1000, 1001, 1006, 1009], "n_digit": 55, "1797": [55, 82, 236, 276, 296, 342, 385, 409, 466, 496, 497, 498, 499, 563, 564, 652, 653, 654, 655, 657, 956, 984], "bench_k_mean": 55, "tabl": [55, 199, 238, 345, 346, 349, 354, 373, 381, 546, 622, 644, 762, 776, 802, 918, 949, 953, 954, 959, 972, 994], "inertia_": [55, 58, 61, 407, 411, 413, 1004], "clustering_metr": 55, "sample_s": [55, 213, 320, 756], "formatter_result": 55, "determinist": [55, 114, 333, 341, 347, 359, 373, 407, 411, 413, 415, 416, 417, 422, 423, 426, 515, 523, 524, 528, 529, 547, 548, 655, 659, 773, 774, 821, 873, 874, 945, 949, 994, 997, 999, 1001, 1002, 1005, 1008, 1009], "ttime": 55, "tinertia": 55, "thomo": 55, "tcompl": 55, "tv": 55, "tari": 55, "tami": 55, "tsilhouett": 55, "__________________________________________________________________________________": 55, "69545": 55, "598": [55, 94, 138, 505], "645": [55, 103, 974], "621": [55, 732], "469": 55, "617": [55, 241, 373, 732, 974], "152": [55, 351], "047": [55, 351], "69735": 55, "681": [55, 351], "723": [55, 214], "701": 55, "574": [55, 321, 498, 505], "698": 55, "72686": 55, "636": [55, 165, 351], "658": [55, 80, 288, 974], "647": [55, 185, 974], "521": 55, "643": [55, 118, 236, 974], "reduced_data": 55, "mesh": [55, 110, 119, 139, 213, 266, 273, 280, 301, 303], "white": [55, 57, 87, 142, 153, 195, 201, 264, 276, 280, 301, 306, 378, 381, 589, 969, 993, 996, 999, 1003, 1007], "815": [55, 974], "plot_kmeans_digit": [55, 974], "kmeans_plusplu": [56, 373, 1005, 1010], "4000": [56, 116, 227], "centers_init": 56, "4eacc5": [56, 61], "ff9c34": [56, 61], "4e9a06": [56, 61], "cluster_data": 56, "063": [56, 176, 236, 238, 401, 974], "plot_kmeans_plusplu": [56, 974], "wrong": [57, 181, 264, 319, 328, 342, 345, 347, 381, 468, 689, 719, 756, 953, 959, 968, 996, 998, 1000, 1001, 1002, 1003, 1006, 1010], "wide": [57, 58, 83, 104, 212, 279, 357, 373, 378, 381, 942, 949, 972, 977, 987, 993, 995, 1009], "ambival": 57, "thick": [57, 268, 956], "ow": 57, "7049787496083262": 57, "5882004012129721": 57, "6505186632729437": 57, "561464362648773": 57, "4857596147013469": 57, "silhouette_sampl": [57, 756, 997, 999, 1001, 1009], "distinct": [57, 238, 298, 319, 321, 340, 347, 350, 359, 360, 377, 380, 381, 553, 763, 772, 780, 839, 840, 860, 861, 942, 949, 956, 959, 987, 1001], "center_box": [57, 476], "range_n_clust": 57, "set_size_inch": [57, 126, 219], "insert": [57, 153, 181, 357, 373, 451, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 880], "blank": [57, 350, 943, 969], "demarc": 57, "silhouette_avg": 57, "sample_silhouette_valu": 57, "y_lower": [57, 114], "aggreg": [57, 105, 199, 241, 247, 291, 293, 373, 380, 382, 498, 519, 520, 558, 685, 686, 691, 708, 709, 711, 713, 714, 716, 748, 753, 754, 954, 956, 963, 1009], "ith_cluster_silhouette_valu": 57, "size_cluster_i": 57, "y_upper": [57, 114], "fill_betweenx": 57, "2nd": [57, 83, 145, 283, 373, 384, 408, 494, 963, 1008], "lw": [57, 73, 74, 76, 91, 95, 96, 175, 182, 184, 187, 191, 198, 204, 227, 233, 248, 263, 278, 298, 314], "fontweight": [57, 176], "plot_kmeans_silhouette_analysi": [57, 974], "reach": [58, 107, 112, 135, 181, 183, 197, 199, 240, 291, 307, 327, 350, 360, 363, 373, 378, 382, 414, 421, 472, 473, 557, 558, 591, 608, 609, 610, 611, 616, 617, 618, 619, 620, 624, 625, 626, 627, 630, 631, 632, 640, 641, 642, 643, 645, 646, 647, 648, 692, 693, 746, 760, 761, 822, 823, 862, 942, 953, 957, 967, 969, 977, 1004, 1008, 1009, 1010], "optimum": [58, 143, 153, 158, 251, 378, 436, 949, 952], "stuck": [58, 656, 950], "check_random_st": [58, 197, 203, 211, 217, 347, 354, 359], "trade": [58, 73, 107, 155, 185, 237, 239, 240, 307, 319, 372, 373, 375, 517, 518, 523, 524, 598, 620, 656, 762, 765, 766, 776, 788, 950, 957, 965, 967, 968, 973], "n_init_rang": 58, "n_samples_per_cent": 58, "n_clusters_tru": 58, "init_s": [58, 320, 413], "factori": [58, 238, 381, 923, 953], "empti": [58, 66, 96, 193, 299, 332, 340, 347, 349, 373, 385, 447, 497, 525, 526, 595, 773, 830, 870, 872, 880, 885, 886, 892, 912, 913, 943, 968, 985, 995, 997, 1001, 1002, 1004, 1005, 1007, 1008, 1009], "run_id": 58, "km": [58, 291, 320], "fmt": [58, 192], "my_memb": [58, 60, 61], "296": [58, 965, 974], "plot_kmeans_stability_low_dim_dens": [58, 974], "globular": [59, 373], "cleanli": [59, 993], "844": [59, 380, 519, 520, 974], "plot_linkage_comparison": [59, 974], "dorin": [60, 412], "comaniciu": [60, 373, 412], "meer": [60, 373, 412], "ieee": [60, 74, 76, 342, 373, 375, 382, 386, 412, 439, 498, 527, 628, 649, 650, 688, 732, 949, 953, 959], "transact": [60, 342, 373, 375, 384, 386, 408, 412, 439, 498, 502, 504, 511, 527, 608, 628, 649, 650, 688, 689, 719, 732, 949, 953], "intellig": [60, 135, 319, 342, 373, 380, 412, 519, 520, 602, 660, 688, 795, 822, 823, 954, 965, 973, 977], "2002": [60, 371, 373, 380, 401, 412, 557, 558, 689, 719, 812, 860, 945, 953], "603": [60, 412], "619": [60, 412], "labels_uniqu": 60, "410": [60, 134, 974], "plot_mean_shift": [60, 425, 974], "k_mean": [61, 354, 359, 986, 1001, 1009], "t_batch": 61, "pairwis": [61, 152, 153, 212, 247, 287, 291, 292, 319, 332, 337, 347, 359, 373, 378, 383, 410, 418, 422, 425, 426, 432, 451, 472, 473, 499, 525, 526, 584, 602, 603, 604, 605, 606, 607, 652, 654, 656, 658, 660, 663, 741, 742, 743, 744, 751, 755, 756, 793, 809, 813, 817, 831, 863, 945, 953, 956, 965, 968, 989, 993, 994, 997, 998, 999, 1000, 1001, 1002, 1003, 1007, 1008, 1009, 1010], "k_means_cluster_cent": 61, "mbk_means_cluster_cent": 61, "k_means_label": 61, "mbk_means_label": 61, "ninertia": 61, "bbbbbb": 61, "plot_mini_batch_kmean": [61, 974], "shane": [62, 1002, 1005, 1008], "grigsbi": 62, "refug": 62, "rocktalu": 62, "cluster_optics_dbscan": [62, 373], "n_points_per_clust": 62, "c1": [62, 111, 145, 211, 284], "c2": [62, 111, 145, 211, 284], "c3": [62, 111, 284], "c4": [62, 284, 975, 989], "c5": [62, 975, 989], "c6": 62, "clust": [62, 414, 421], "labels_050": 62, "reachability_": [62, 373, 414, 419, 420, 421], "core_dist": [62, 419, 420, 421], "core_distances_": [62, 414, 419, 421], "ordering_": [62, 373, 414, 419, 420, 421], "labels_200": 62, "ax3": [62, 299], "ax4": 62, "klass": 62, "xk": [62, 514], "rk": 62, "full_lik": 62, "noptic": 62, "ndbscan": 62, "499": [62, 135, 342, 351, 974], "plot_opt": [62, 974], "tri": [63, 95, 201, 267, 311, 333, 347, 350, 357, 360, 371, 413, 415, 417, 595, 596, 597, 634, 656, 662, 664, 666, 776, 921, 958, 978, 995, 1001, 1005], "intens": [63, 90, 258, 342, 346, 357, 378, 407, 411, 423, 571, 572, 596, 597, 764, 942, 960, 977, 1001], "weakli": 63, "outlin": [63, 110, 345, 347, 359, 360, 362, 373, 942, 989], "center1": 63, "center2": 63, "center3": 63, "center4": 63, "radius1": 63, "radius2": 63, "radius3": 63, "radius4": 63, "circle1": 63, "circle2": 63, "circle3": 63, "circle4": 63, "label_im": 63, "cleaner": 63, "498": [63, 974], "plot_segmentation_toi": [63, 974], "swiss": [64, 150, 200, 201, 206, 373, 494, 656, 657, 974, 1007], "sole": [64, 357, 373], "oppos": [64, 215, 349, 369, 373, 861, 956, 968, 978, 993], "make_swiss_rol": [64, 205, 1007], "thinner": 64, "fig1": 64, "set_posit": [64, 93, 192, 278], "jet": 64, "fig2": 64, "121": [64, 103, 149, 213, 582, 633, 963], "357": [64, 135, 342, 464, 866, 974], "plot_ward_structured_vs_unstructur": [64, 974], "chain": [65, 68, 71, 101, 127, 150, 211, 246, 249, 255, 256, 258, 261, 276, 328, 337, 357, 359, 372, 383, 460, 466, 505, 575, 591, 622, 701, 762, 791, 794, 796, 797, 798, 799, 825, 826, 845, 942, 943, 954, 958, 970, 972, 974, 977, 987, 989], "raster": 66, "serv": [66, 91, 101, 143, 241, 311, 374, 515, 602, 945, 1007], "matt": [66, 996, 997, 998, 1003, 1004, 1008, 1009], "terri": [66, 997], "compris": [66, 114, 236, 319, 320, 321, 340, 357, 378, 380, 479, 769, 950], "subject": [66, 118, 230, 241, 319, 340, 345, 347, 349, 357, 359, 360, 371, 372, 375, 377, 378, 459, 622, 623, 649, 828, 923, 944, 949, 968, 971, 987, 1002, 1003, 1006, 1008], "mccall": 66, "mksol": 66, "dseg": 66, "ti": [66, 181, 226, 229, 236, 316, 332, 371, 373, 563, 564, 599, 684, 689, 719, 760, 761, 867, 870, 873, 952, 953, 968, 994, 996, 997, 1001, 1003, 1007, 1008, 1009], "fred": [66, 993, 1006], "575": [66, 181], "3539": 66, "1993apr6": 66, "131900": 66, "8407": 66, "perhap": [66, 110, 342, 344, 353, 359, 379, 973], "militari": 66, "slug": 66, "school": [66, 342, 373, 751, 953], "physic": [66, 107, 333, 469, 918, 949, 1009], "teacher": 66, "ex": [66, 343, 346, 363, 997, 998], "fighter": 66, "jock": 66, "wasn": [66, 215, 1002], "poundal": 66, "flink": 66, "funni": 66, "propon": 66, "si": 66, "insist": 66, "safeti": [66, 357, 374, 919, 973, 1003], "ball": [66, 263, 271, 373, 379, 412, 656, 805, 806, 810, 813, 815, 816, 817, 993, 995, 998, 1004], "mari": [66, 1001, 1002, 1003, 1004, 1007], "shafer": 66, "nasa": [66, 319, 320, 342], "am": [66, 71, 75, 121, 154, 319, 350, 375, 438, 457, 1000], "dryden": 66, "stateless": [66, 320, 334, 347, 359, 381, 546, 547, 553, 602, 828, 829, 837, 963, 1009], "subject_body_extractor": 66, "subject_body_transform": 66, "sentenc": [66, 319, 321, 340, 360, 381], "text_stat": 66, "num_sent": 66, "text_stats_transform": 66, "subjectbodyextractor": 66, "subjectbodi": 66, "union": [66, 153, 374, 701, 717, 824, 1000], "body_bow": 66, "pull": [66, 290, 333, 343, 348, 359, 360, 1003], "body_stat": 66, "transformer_weight": [66, 428, 431, 824, 998, 1005], "396": [66, 135, 233, 342, 974, 987], "394": [66, 146], "525": [66, 154, 403, 592, 943, 974], "plot_column_transform": [66, 974], "imput": [67, 121, 155, 210, 220, 222, 288, 291, 337, 349, 358, 359, 364, 374, 380, 454, 465, 529, 544, 603, 609, 636, 787, 808, 826, 884, 886, 972, 973, 974, 989, 995, 996, 1010], "miss": [67, 121, 135, 155, 210, 220, 238, 258, 288, 292, 328, 332, 337, 340, 342, 344, 345, 347, 349, 350, 359, 369, 372, 373, 374, 375, 410, 436, 454, 460, 462, 465, 521, 522, 525, 526, 528, 529, 530, 591, 592, 593, 594, 603, 609, 636, 654, 658, 690, 732, 787, 808, 826, 834, 835, 839, 841, 842, 845, 846, 850, 853, 854, 856, 873, 874, 875, 876, 949, 950, 953, 972, 973, 974, 975, 977, 989, 995, 997, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "chi": [67, 75, 101, 282, 337, 382, 483, 556, 559, 560, 562, 563, 564, 568, 569, 570, 573, 602, 603, 604, 605, 606, 721, 722, 989, 993, 998, 999], "dispatch": [67, 369, 432, 762, 776, 786, 787, 788, 863, 919, 920, 982, 989, 1008], "processor": [67, 121, 153, 384, 401, 408, 410, 412, 414, 416, 421, 422, 425, 428, 431, 436, 495, 499, 500, 501, 503, 506, 507, 509, 510, 512, 519, 520, 521, 522, 527, 528, 529, 530, 531, 532, 533, 534, 558, 566, 571, 572, 574, 596, 598, 603, 611, 615, 617, 619, 621, 622, 623, 625, 627, 629, 630, 632, 640, 643, 652, 653, 654, 655, 656, 657, 658, 737, 741, 744, 762, 765, 766, 768, 776, 784, 786, 787, 788, 789, 790, 792, 793, 794, 795, 807, 808, 811, 813, 815, 816, 818, 819, 824, 827, 860, 861], "pedro": [67, 994, 996, 997, 1001], "chi2": [67, 381, 382, 416, 545, 556, 559, 560, 562, 563, 564, 569, 570, 573, 584, 602, 603, 604, 605, 606, 607, 722, 728, 737, 993, 1000, 1007], "simpleimput": [67, 121, 148, 149, 155, 210, 220, 222, 288, 291, 328, 359, 591, 592, 593, 943, 963, 1001, 1002, 1004, 1005, 1007, 1008, 1009, 1010, 1011], "40945": 67, "titan": [67, 155, 222, 287, 291, 292, 961], "surviv": [67, 155, 942, 972], "ag": [67, 135, 153, 155, 169, 170, 181, 199, 219, 220, 222, 278, 290, 291, 292, 294, 340, 342, 460, 977, 978, 985], "fare": [67, 155, 222, 291, 292, 997, 998], "embark": [67, 155, 222, 287, 291, 292], "sex": [67, 135, 153, 155, 169, 170, 222, 292, 294, 342, 460, 961, 985], "femal": [67, 153, 292, 350, 838, 839, 963], "male": [67, 153, 292, 350, 838, 839, 963], "pclass": [67, 155, 222, 287, 291, 292], "numeric_featur": [67, 291], "numeric_transform": [67, 291], "categorical_transform": 67, "preprocessor": [67, 121, 153, 181, 210, 218, 220, 284, 288, 290, 291, 292, 294, 374, 381, 552, 553, 555, 972, 987, 993, 996, 1001, 1003], "798": [67, 380], "lt": [67, 68, 106, 121, 153, 229, 236, 250, 343, 345], "0x7f74e44889d0": 67, "pipelineifittedpipelin": [67, 106, 132, 153, 155, 209, 219, 222, 245, 291], "columntransformercolumntransform": [67, 121, 153, 155, 210, 220, 284, 288, 291], "simpleimputersimpleimput": [67, 121, 155, 210, 220, 288, 291], "standardscalerstandardscal": [67, 121, 153, 209, 210, 219, 220, 222, 245, 288, 291], "onehotencoderonehotencod": [67, 106, 121, 153, 154, 210, 220, 288, 291], "selectpercentileselectpercentil": [67, 222], "logisticregressionlogisticregress": [67, 106, 209, 210, 220, 222, 288, 291], "make_column_selector": [67, 111, 121, 218, 374, 428, 431, 1003], "subset_featur": 67, "Then": [67, 102, 106, 109, 121, 124, 132, 153, 158, 165, 169, 181, 185, 205, 209, 215, 221, 240, 241, 255, 319, 339, 349, 351, 353, 363, 370, 371, 373, 376, 378, 381, 382, 534, 557, 683, 719, 762, 776, 865, 866, 943, 952, 953, 959, 968, 987, 1002], "1047": 67, "1118": 67, "684": [67, 75], "1045": 67, "841": 67, "1046": [67, 229], "kb": [67, 153, 154], "numerical_transform": 67, "yourself": [67, 343, 344, 345, 346, 350, 353, 957], "dtype_exclud": [67, 430], "dtype_includ": [67, 111, 121, 218, 374, 430], "_column_transform": [67, 121], "0x7f74a877bf40": 67, "0x7f74a877b910": 67, "exactli": [67, 101, 152, 160, 165, 174, 181, 185, 230, 246, 279, 315, 319, 345, 347, 370, 373, 377, 378, 381, 386, 410, 417, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 479, 490, 554, 555, 579, 640, 642, 667, 669, 726, 763, 780, 786, 945, 949, 950, 951, 953, 954, 969, 986, 987, 993, 999, 1000, 1006], "hyperparamet": [67, 69, 70, 137, 138, 144, 145, 148, 150, 154, 160, 165, 170, 195, 199, 208, 218, 231, 236, 241, 243, 249, 250, 260, 276, 319, 347, 359, 373, 377, 378, 380, 383, 466, 499, 574, 575, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 607, 617, 623, 629, 637, 640, 691, 748, 762, 776, 870, 942, 947, 948, 949, 952, 953, 955, 957, 959, 967, 973, 974, 987, 995, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1009], "cartesian": [67, 370, 597, 956, 1008], "preprocessor__num__imputer__strategi": 67, "preprocessor__cat__selector__percentil": 67, "classifier__c": 67, "search_cv": 67, "param_distribut": [67, 137, 239, 246, 250, 289, 358, 766, 774, 776, 1009], "randomizedsearchcvinot": 67, "fittedrandomizedsearchcv": 67, "pipelinepipelin": [67, 68, 220], "trigger": [67, 68, 349, 374, 822, 823, 825, 826, 885, 886, 902, 949, 987, 1001, 1007, 1008], "best_params_": [67, 69, 114, 137, 214, 229, 236, 242, 289, 307, 358, 762, 765, 766, 776, 942, 983, 987], "best_score_": [67, 69, 214, 239, 242, 243, 307, 637, 639, 762, 765, 766, 776, 982, 983, 987, 1004], "cv_results_": [67, 68, 69, 77, 107, 126, 134, 229, 236, 237, 238, 239, 242, 246, 249, 250, 260, 307, 436, 558, 762, 765, 766, 776, 987, 999, 1003, 1005, 1006], "sort_valu": [67, 155, 156, 222, 229, 238, 249, 284, 285], "mean_test_scor": [67, 68, 69, 77, 107, 126, 134, 229, 237, 238, 239, 246, 249, 250, 260, 307, 436, 558, 762, 776, 942, 999, 1006], "std_test_scor": [67, 69, 107, 126, 134, 237, 238, 239, 246, 260, 436, 558, 762, 776, 999, 1006], "param_preprocessor__num__imputer__strategi": 67, "param_preprocessor__cat__selector__percentil": 67, "param_classifier__c": 67, "786015": 67, "031020": 67, "785063": 67, "030498": 67, "783149": 67, "030462": 67, "139": [67, 199, 258, 306, 351, 380, 416, 426, 655, 659, 954, 974], "plot_column_transformer_mixed_typ": [67, 974], "instanti": [68, 140, 290, 348, 364, 380, 414, 531, 532, 566, 594, 762, 765, 766, 768, 776, 784, 786, 787, 788, 789, 790, 792, 892, 959, 984, 993, 1001, 1005, 1009], "argument": [68, 182, 209, 212, 215, 333, 339, 340, 345, 346, 348, 350, 351, 353, 354, 357, 359, 373, 374, 377, 378, 380, 382, 384, 385, 387, 391, 395, 402, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 416, 418, 421, 423, 425, 427, 432, 433, 457, 460, 467, 472, 497, 499, 500, 502, 504, 515, 523, 524, 527, 531, 532, 533, 534, 541, 545, 546, 552, 553, 555, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 595, 603, 607, 610, 611, 614, 615, 616, 617, 618, 619, 620, 624, 625, 626, 627, 630, 632, 640, 641, 645, 648, 652, 656, 660, 662, 663, 664, 665, 666, 678, 683, 698, 705, 726, 742, 743, 768, 784, 786, 787, 788, 793, 794, 797, 807, 808, 809, 811, 813, 814, 815, 816, 817, 818, 819, 822, 825, 829, 863, 869, 879, 883, 892, 897, 920, 921, 922, 923, 937, 942, 945, 949, 950, 951, 953, 956, 960, 961, 968, 969, 978, 982, 993, 996, 997, 999, 1000, 1001, 1002, 1003, 1005, 1007, 1008, 1009, 1010, 1011], "memoiz": [68, 340, 359], "costli": [68, 73, 108, 148, 239, 316, 333, 346, 351, 373, 407, 591, 770, 772, 857, 858, 902, 953, 956, 965, 973], "mcgibbon": [68, 995, 996, 999], "selectkbest": [68, 70, 131, 132, 291, 328, 345, 364, 374, 382, 545, 556, 559, 560, 562, 564, 570, 942, 994, 999, 1009, 1010], "mutual_info_classif": [68, 382, 556, 559, 560, 563, 564, 999, 1005, 1008, 1011], "pipe": [68, 69, 111, 220, 237, 284, 289, 290, 358, 364, 374, 381, 554, 825, 850, 851, 853, 854, 855, 856, 942, 963, 983], "reduce_dim": [68, 220, 237, 374], "popul": [68, 73, 75, 153, 181, 218, 241, 278, 340, 354, 359, 375, 404, 454, 676, 682, 807, 808, 809, 811, 813, 815, 816, 817, 922, 953, 959, 963, 969], "n_features_opt": 68, "c_option": 68, "iterated_pow": [68, 496, 499, 505, 999], "reduce_dim__n_compon": [68, 237, 374], "classify__c": 68, "reduce_dim__k": 68, "reducer_label": 68, "kbest": [68, 556], "0x7f74df11bee0": 68, "gridsearchcvifittedgridsearchcv": [68, 229, 236, 238], "minmaxscalerminmaxscal": 68, "passthroughpassthrough": [68, 153, 154, 284], "linearsvclinearsvc": [68, 132, 245], "mean_scor": [68, 247, 250, 320, 1006], "alphabet": [68, 359, 704], "eas": [68, 156, 229, 283, 345, 348, 351, 949, 967, 972, 973, 977, 1004, 1005, 1007], "sometim": [68, 121, 152, 238, 275, 320, 328, 333, 334, 345, 347, 349, 351, 358, 359, 373, 375, 378, 380, 381, 413, 498, 499, 502, 504, 505, 830, 831, 832, 880, 948, 949, 950, 953, 958, 963, 964, 968, 978, 986, 990, 994, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1009], "worthwhil": [68, 359], "slower": [68, 90, 107, 111, 148, 214, 247, 321, 380, 381, 382, 410, 415, 417, 502, 504, 511, 519, 520, 521, 522, 527, 528, 529, 530, 552, 553, 555, 595, 596, 597, 607, 623, 636, 638, 651, 656, 668, 793, 797, 798, 946, 950, 951, 952, 954, 956, 969, 987, 997, 1004], "constructor": [68, 211, 333, 347, 359, 372, 374, 381, 428, 431, 513, 514, 519, 531, 532, 533, 534, 545, 546, 552, 553, 561, 632, 640, 641, 807, 808, 809, 811, 812, 813, 815, 816, 817, 824, 825, 826, 827, 921, 942, 954, 963, 968, 973, 978, 993, 994, 996, 997, 998, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1010], "folder": [68, 340, 343, 345, 349, 353, 363, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 467, 956, 987], "cached_pip": [68, 374], "delet": [68, 297, 299, 349, 350, 433, 438, 450], "exit": [68, 258, 349, 353, 432], "benefici": [68, 70, 73, 87, 119, 278, 279, 343, 950], "542": [68, 135, 165, 239, 342, 974], "plot_compare_reduct": [68, 974], "increment": [68, 86, 92, 93, 94, 95, 150, 241, 349, 351, 406, 411, 427, 468, 497, 498, 499, 500, 503, 505, 508, 566, 610, 622, 630, 768, 789, 797, 798, 800, 801, 802, 803, 804, 834, 835, 845, 865, 866, 928, 949, 955, 974, 996, 997], "874": [69, 751, 752, 953], "logistic__c": [69, 983], "54434690031882": 69, "pca__n_compon": [69, 983], "truncat": [69, 119, 202, 354, 498, 499, 503, 504, 505, 508, 640, 642, 689, 719, 760, 814, 878, 902, 942, 952, 953, 967, 983, 987, 988, 989, 999, 1001], "x_digit": [69, 127, 274, 374, 982, 983, 985], "y_digit": [69, 127, 274, 374, 982, 983, 985], "__": [69, 239, 359, 374, 387, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 429, 433, 434, 435, 436, 437, 438, 439, 440, 446, 447, 448, 449, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 545, 546, 547, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 574, 575, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 599, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 652, 653, 654, 655, 656, 760, 761, 762, 765, 766, 776, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 821, 822, 823, 824, 825, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 857, 858, 860, 861, 862, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 942, 983, 1001, 1002], "spectrum": [69, 488, 508, 659, 902, 977, 983, 1001], "ax0": [69, 71, 181, 211, 320, 983], "n_components_": [69, 94, 359, 405, 409, 498, 502, 503, 504, 505, 506, 507, 857, 858, 983, 1002, 1004], "explained_variance_ratio_": [69, 95, 320, 378, 498, 505, 508, 513, 983, 996, 999], "named_step": [69, 80, 374, 557, 558, 561, 825, 826, 865, 866, 949, 983, 1000, 1002], "components_col": 69, "param_pca__n_compon": 69, "best_clf": 69, "nlargest": 69, "yerr": [69, 74, 76, 108, 111, 134, 260, 284, 299], "val": [69, 193, 238, 904], "579": [69, 488, 974], "plot_digits_pip": [69, 974], "boltzmann": [69, 79, 150, 171, 196, 272, 466, 622, 677, 791, 821, 822, 823, 825, 851, 974, 988, 989, 995], "candid": [70, 229, 236, 239, 246, 289, 334, 345, 349, 373, 380, 412, 414, 762, 765, 766, 774, 776, 949, 956, 969, 999], "features__pca__n_compon": 70, "features__univ_select__k": 70, "svm__c": 70, "867": 70, "967": [70, 953, 957], "transformer_list": [70, 374, 824, 827, 943, 1004, 1005], "univ_select": 70, "amuel": [70, 105, 172, 213, 298, 315], "ai": [70, 105, 172, 213, 298, 315, 377], "bonn": [70, 105, 172, 213, 298, 315], "mayb": [70, 275, 359, 381, 968, 973], "combined_featur": 70, "x_featur": [70, 604, 605, 606, 945], "grid_search": [70, 107, 220, 229, 236, 246, 294, 374, 921, 995, 996, 997, 998, 999, 1000], "387": [70, 974, 993], "plot_feature_union": [70, 974], "overview": [71, 150, 243, 254, 257, 346, 348, 358, 359, 460, 697, 706, 762, 778, 788, 793, 794, 795, 873, 955, 967, 974, 988, 989], "transformedtargetregressor": [71, 153, 181, 357, 364, 374, 557, 558, 561, 1001, 1003, 1006], "hous": [71, 112, 121, 148, 149, 278, 289, 338, 454, 989], "translat": [71, 347, 383, 491, 578, 834, 835, 851, 950, 953, 977], "lowest": [71, 80, 154, 165, 229, 339, 373, 377, 599, 601, 765, 766, 769, 872, 873, 950, 953, 969, 1008], "logarithm": [71, 121, 153, 185, 212, 239, 307, 359, 382, 424, 554, 622, 623, 640, 668, 689, 704, 714, 718, 719, 720, 754, 768, 796, 805, 806, 900, 969, 982, 1000], "log1p": [71, 211, 829, 953, 963], "expm1": 71, "y_tran": 71, "meda": [71, 153, 953], "median_absolute_error": [71, 153, 953, 997, 1003, 1005], "r2_score": [71, 152, 165, 176, 177, 380, 396, 429, 446, 447, 448, 518, 520, 522, 524, 526, 529, 532, 534, 575, 599, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 624, 625, 626, 627, 628, 629, 631, 634, 636, 637, 642, 643, 687, 691, 798, 799, 808, 816, 823, 866, 868, 871, 874, 876, 942, 953, 994, 996, 1002, 1006, 1007], "compute_scor": [71, 94, 160, 161, 608, 609, 1002], "r2": [71, 102, 107, 121, 152, 154, 176, 214, 347, 374, 380, 518, 534, 637, 788, 823, 953, 961, 1002], "ridge_cv": 71, "y_pred_ridg": 71, "ridge_cv_with_trans_target": 71, "inverse_func": [71, 153, 374, 429, 829, 963, 1001], "y_pred_ridge_with_trans_target": 71, "sell": 71, "quantile_transform": [71, 842, 853, 963, 1000, 1001, 1002], "house_pric": [71, 121], "select_dtyp": [71, 111, 292, 430], "inf": [71, 140, 268, 354, 373, 383, 410, 414, 419, 420, 421, 425, 435, 436, 442, 517, 518, 523, 524, 557, 558, 561, 570, 571, 572, 583, 591, 599, 601, 612, 613, 614, 616, 633, 635, 636, 640, 641, 642, 644, 651, 691, 693, 709, 741, 748, 752, 821, 830, 837, 883, 884, 885, 886, 900, 953, 963, 1000, 1002, 1003, 1004, 1005, 1007, 1008, 1009], "lotfrontag": 71, "garageyrblt": 71, "masvnrarea": [71, 121], "to_fram": 71, "n_quantil": [71, 154, 282, 842, 854, 1002], "output_distribut": [71, 278, 282, 374, 841, 842, 853, 854, 963], "squeez": [71, 143, 144, 218, 258, 278, 986], "quantiletransform": [71, 154, 282, 374, 429, 841, 854, 943, 963, 1000, 1001, 1002, 1003, 1004, 1009], "weaker": [71, 525, 526], "residu": [71, 177, 183, 234, 396, 429, 446, 447, 448, 516, 518, 520, 522, 524, 526, 529, 532, 534, 575, 599, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 624, 625, 626, 627, 628, 629, 631, 634, 635, 636, 637, 638, 642, 643, 649, 650, 665, 707, 748, 798, 799, 808, 816, 823, 866, 868, 871, 874, 876, 949, 953, 985, 1005, 1006, 1008], "smile": [71, 340, 1007], "353": [71, 85, 320, 974, 987], "plot_transformed_target": [71, 974], "predictor": [71, 100, 111, 124, 148, 150, 181, 199, 210, 234, 347, 358, 359, 374, 376, 377, 380, 383, 430, 431, 446, 447, 448, 460, 480, 481, 482, 519, 520, 526, 529, 532, 566, 574, 594, 596, 597, 612, 617, 621, 633, 637, 644, 665, 786, 788, 797, 798, 825, 826, 838, 839, 845, 927, 949, 954, 974, 994, 1000, 1003], "stack": [71, 100, 111, 124, 148, 150, 210, 234, 263, 327, 344, 353, 357, 359, 372, 379, 428, 430, 431, 460, 479, 526, 529, 531, 532, 576, 591, 592, 594, 617, 637, 665, 786, 788, 826, 830, 838, 839, 845, 927, 943, 972, 973, 974, 975, 976, 989, 993, 996, 1000, 1001, 1002, 1003, 1004], "mahalanobi": [72, 76, 150, 184, 373, 375, 414, 421, 433, 434, 435, 436, 437, 438, 439, 440, 663, 741, 742, 743, 812, 947, 959, 974, 1001, 1004, 1005], "empiricalcovari": [73, 75, 76, 375, 433, 437, 438, 439, 440, 959], "unbias": [73, 371, 375, 378, 401, 514, 620, 636, 638, 651, 949, 982], "shrunk": [73, 94, 278, 285, 293, 386, 437, 439, 440, 443, 444, 445, 513, 846, 947, 967, 988, 989], "base_x_train": 73, "base_x_test": 73, "coloring_matrix": [73, 74], "shrunkcovari": [73, 94, 375, 433, 434, 437, 438, 439], "empirical_covari": [73, 375, 442, 443, 445, 1009], "log_likelihood": [73, 574, 575, 760, 761], "negative_loglik": 73, "real_cov": [73, 74, 386, 434, 437, 438, 439, 440, 443, 444, 445], "emp_cov": [73, 75, 77, 442, 445], "loglik_r": 73, "inv": [73, 77, 274], "formula": [73, 74, 245, 370, 373, 375, 386, 437, 439, 480, 481, 482, 554, 607, 610, 611, 614, 615, 616, 617, 618, 619, 620, 624, 625, 626, 627, 628, 640, 642, 668, 692, 693, 718, 727, 942, 947, 949, 953, 958, 959, 963, 967, 998, 1000, 1002], "asymptot": [73, 74, 170, 332, 375, 438, 500, 693, 949, 952, 1003], "criterion": [73, 74, 156, 169, 189, 229, 250, 288, 347, 354, 359, 373, 378, 405, 409, 413, 416, 423, 426, 496, 501, 503, 510, 517, 518, 521, 522, 523, 524, 528, 529, 530, 570, 591, 608, 609, 612, 620, 630, 631, 632, 633, 635, 636, 638, 640, 641, 642, 644, 655, 659, 674, 761, 862, 867, 868, 869, 870, 871, 873, 874, 875, 876, 949, 952, 953, 961, 966, 969, 975, 986, 989, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1009, 1010], "chen": [73, 74, 375, 380, 386, 439, 689, 719, 945, 953, 996, 999, 1000, 1001, 1003, 1006, 1007, 1008, 1009], "Its": [73, 236, 240, 341, 347, 359, 378, 383, 502, 948, 949, 958, 961, 967, 972, 977, 996, 1010], "tuned_paramet": [73, 126, 236], "loglik_lw": 73, "loglik_oa": 73, "unseen": [73, 112, 132, 170, 185, 189, 251, 264, 311, 334, 337, 347, 358, 359, 373, 377, 811, 842, 854, 944, 953, 959, 961, 963, 969, 978, 996, 1001, 1005], "loglog": [73, 212], "lik_max": 73, "amax": 73, "lik_min": 73, "amin": 73, "vline": [73, 89, 168, 169, 170, 182, 238, 251, 279], "shrinkage_": [73, 74, 437, 439], "magenta": [73, 116], "purpl": [73, 85, 205], "cyan": [73, 104, 153, 269], "realli": [73, 155, 170, 349, 350, 351, 953, 959, 977, 1007], "interestingli": [73, 135, 963], "outperform": [73, 80, 121, 255, 283, 357, 377, 380, 416, 426, 955, 963], "429": [73, 255, 974], "plot_covariance_estim": [73, 974], "inspir": [74, 118, 154, 199, 345, 357, 380, 525, 526, 890, 943, 972, 1002], "mmse": [74, 375, 386, 439], "tran": 74, "octob": [74, 340, 993, 1000, 1006, 1007, 1009], "choleski": [74, 181, 199, 354, 435, 436, 442, 491, 575, 612, 614, 615, 618, 619, 620, 622, 623, 633, 636, 638, 644, 646, 647, 651, 760, 761, 949, 996, 1000, 1002, 1005, 1008, 1009], "toeplitz": 74, "simul": [74, 89, 153, 175, 216, 238, 977], "n_samples_rang": [74, 212], "lw_mse": 74, "oa_ms": 74, "lw_shrinkag": 74, "oa_shrinkag": 74, "error_norm": [74, 76, 433, 434, 435, 436, 437, 438, 439, 440], "darkorang": [74, 91, 95, 96, 182, 192, 204, 225, 226, 227, 230, 245, 247, 263, 269, 270, 298, 325], "401": [74, 90, 974], "plot_lw_vs_oa": [74, 974], "d_": [75, 373, 378, 612, 633, 644, 741, 950, 955], "mle": [75, 94, 505, 1001, 1004], "resist": [75, 76, 345], "erron": [75, 76, 378, 949, 994, 1001, 1005], "breakdown": [75, 76, 198, 643, 949], "n_": [75, 76, 156, 238, 290, 373, 378, 380, 610, 616, 649, 660, 945, 949, 953, 955, 956, 960, 963, 965, 968, 969], "smallest": [75, 76, 181, 258, 323, 340, 373, 375, 382, 491, 505, 594, 618, 619, 620, 646, 647, 654, 658, 659, 762, 765, 766, 776, 781, 835, 882, 969, 1006], "pure": [75, 76, 80, 165, 181, 359, 373, 437, 443, 460, 521, 522, 523, 524, 528, 529, 530, 669, 679, 749, 758, 873, 874, 875, 876, 963], "rousseuw": [75, 76], "rousseeuw": [75, 76, 373, 375, 433, 438, 755, 756, 959], "ass": [75, 76, 375, 438], "1984": [75, 76, 375, 438, 873, 874, 969], "wilson": [75, 342, 993, 996], "hilferti": 75, "1931": 75, "proceed": [75, 135, 340, 342, 373, 384, 403, 408, 475, 660, 672, 689, 719, 812, 862, 953, 965, 966, 967], "academi": [75, 812], "688": 75, "n_outlier": [75, 76, 117, 184, 208, 265], "gen_cov": 75, "ey": [75, 76, 226, 230, 307, 340, 498, 505, 514], "outliers_cov": 75, "mincovdet": [75, 76, 375, 433, 434, 437, 439, 440, 959, 993, 1000], "robust_cov": 75, "nmcd": 75, "nmle": 75, "26253567e": 75, "06695631e": 75, "22747343e": 75, "23773583": 75, "24640578": 75, "51963999": 75, "inlier": [75, 117, 184, 208, 218, 278, 359, 375, 395, 433, 527, 635, 641, 811, 842, 854, 868, 869, 871, 949, 959, 1000, 1001, 1006], "inlier_plot": 75, "outlier_plot": 75, "get_xlim": [75, 176, 186, 278], "zz": 75, "mahal_emp_cov": 75, "emp_cov_contour": 75, "pubu_r": 75, "mahal_robust_cov": 75, "robust_contour": 75, "ylorbr_r": 75, "dist": [75, 202, 212, 349, 433, 434, 435, 436, 437, 438, 439, 440, 663, 726, 732, 805, 806], "borderaxespad": 75, "cubic": [75, 383], "suggest": [75, 90, 104, 108, 153, 156, 238, 307, 332, 344, 345, 352, 359, 377, 378, 380, 433, 438, 529, 609, 790, 947, 949, 950, 958, 961, 968, 987, 997, 1004, 1007, 1010], "emp_mah": 75, "markeredgewidth": [75, 242], "rm": [75, 140, 349, 353, 375], "mahal": 75, "robust_mah": 75, "location_": [75, 76, 433, 434, 435, 436, 437, 438, 439, 440], "plot_mahalanobis_dist": [75, 974], "compens": [76, 152, 154, 158, 181, 199, 239, 375, 378], "soon": [76, 359, 985], "5n_": 76, "johanna": 76, "hardin": 76, "rock": 76, "decemb": [76, 142, 340, 628, 649, 650, 993, 1001, 1003, 1005, 1006, 1008], "928": [76, 401], "946": 76, "zoubir": 76, "koivunen": 76, "chakhchoukh": 76, "muma": 76, "tutori": [76, 126, 127, 128, 170, 183, 199, 238, 345, 346, 351, 353, 358, 367, 373, 416, 426, 655, 968, 985, 996], "treatment": [76, 152, 339, 378, 433, 438], "concept": [76, 107, 112, 215, 247, 345, 357, 372, 373, 379, 381, 945, 953, 956, 969, 977], "magazin": [76, 382], "font_manag": [76, 264, 306], "range_n_outli": 76, "err_loc_mcd": 76, "err_cov_mcd": 76, "err_loc_emp_ful": 76, "err_cov_emp_ful": 76, "err_loc_emp_pur": 76, "err_cov_emp_pur": 76, "outliers_index": 76, "outliers_offset": 76, "inliers_mask": 76, "pure_x": 76, "pure_loc": 76, "pure_emp_cov": 76, "font_prop": 76, "fontproperti": [76, 264, 306], "hat": [76, 96, 234, 238, 263, 290, 343, 371, 375, 379, 380, 944, 949, 950, 953, 955, 957], "_2": [76, 142, 311, 378, 381, 495, 501, 509, 510, 610, 616, 949, 957, 967, 968], "x_size": 76, "804": [76, 974], "plot_robust_vs_empirical_covari": [76, 974], "graphicallasso": [77, 375, 433, 434, 436, 437, 438, 439, 440, 442, 1001, 1009], "largest": [77, 89, 107, 135, 183, 342, 373, 375, 378, 407, 491, 505, 521, 522, 523, 524, 528, 529, 552, 673, 760, 761, 781, 803, 835, 873, 874, 875, 876, 902, 950, 953, 963, 968, 969], "invert": [77, 92, 132, 202, 320, 321, 357, 375, 381, 594, 653, 657, 963, 1002], "fairli": [77, 113, 203, 253, 274, 353, 373, 523, 524, 663, 954, 985], "tweak": [77, 215, 377, 919, 952, 987, 1004], "readabl": [77, 239, 290, 350, 351, 353, 367, 498, 1002, 1005, 1006, 1007, 1008], "make_sparse_spd_matrix": [77, 442, 493, 1010], "prng": [77, 986], "prec": [77, 209, 491, 953], "smallest_coef": [77, 491], "largest_coef": [77, 491], "multivariate_norm": [77, 80, 224, 386, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445], "ledoit_wolf": [77, 375, 1006], "prec_": 77, "lw_cov_": 77, "lw_prec_": 77, "this_cov": 77, "this_prec": 77, "ma": [77, 284, 307, 949, 999, 1004], "masked_equ": 77, "set_facecolor": [77, 224], "set_axis_bgcolor": 77, "plot_sparse_cov": [77, 974], "cross_decomposit": [78, 79, 80, 150, 216, 974, 997, 998, 1000, 1001, 1002], "plscanon": [79, 446, 448, 449, 975, 989, 997, 1001, 1003, 1005, 1007], "plsregress": [79, 80, 975, 989, 1000, 1003, 1005, 1007, 1009], "appar": [79, 955, 977], "scatterplot": [79, 160, 238], "maxim": [79, 80, 83, 87, 97, 114, 160, 229, 230, 239, 243, 247, 248, 268, 283, 289, 307, 311, 323, 327, 342, 359, 370, 373, 376, 378, 382, 383, 513, 558, 574, 575, 608, 609, 612, 633, 643, 644, 684, 762, 765, 766, 776, 834, 840, 850, 947, 949, 952, 953, 956, 958, 968, 982, 985, 996, 998, 1003, 1006, 1008], "weak": [79, 112, 115, 185, 199, 244, 377, 521, 522, 523, 528, 529, 530, 594, 956, 977, 1009], "var": [79, 80, 104, 135, 161, 238, 342, 346, 382, 605, 609, 867, 868, 869, 870, 871, 953, 1001], "corr": [79, 156, 238], "corrcoef": [79, 97], "plsca": [79, 447], "x_train_r": 79, "y_train_r": 79, "x_test_r": 79, "y_test_r": 79, "221": [79, 119, 996], "223": [79, 119, 135, 342], "yj": [79, 282], "noiz": 79, "xb": [79, 844], "95213778": 79, "10988205": 79, "08029173": 79, "80414253": 79, "81422502": 79, "83199463": 79, "92896897": 79, "76438188": 79, "8798454": 79, "47804127": 79, "59007842": 79, "58442585": 79, "73908648": 79, "87282488": 79, "85481267": 79, "16714557": 79, "99951652": 79, "09671339": 79, "exce": [79, 257, 288, 383, 406, 479, 566, 613, 622, 1002, 1005, 1007], "208": [79, 135, 258, 342, 974], "plot_compare_cross_decomposit": [79, 974], "multilabel": [79, 81, 150, 207, 245, 255, 256, 299, 340, 347, 348, 359, 368, 446, 451, 460, 461, 472, 473, 479, 487, 505, 521, 528, 531, 622, 638, 639, 667, 671, 677, 689, 692, 693, 697, 698, 701, 702, 717, 719, 746, 747, 750, 751, 757, 759, 791, 794, 796, 798, 822, 829, 832, 836, 838, 849, 870, 873, 875, 891, 915, 916, 917, 964, 974, 975, 987, 989, 995, 996, 997, 998, 1000, 1001, 1002, 1003, 1006, 1007, 1008, 1009, 1010], "pcr": [80, 376], "pl": [80, 185, 294, 342, 376, 446, 447, 448, 449, 998], "greedili": [80, 135, 373, 377, 382, 424], "despit": [80, 179, 181, 199, 214, 267, 359, 364, 375, 591, 592, 594, 949, 956, 977, 1001, 1002], "suffer": [80, 109, 155, 258, 278, 320, 332, 373, 380, 508, 726, 948, 949, 953, 956, 986, 1002], "dive": [80, 345, 351], "explained_variance_": [80, 498, 505, 508, 986, 1000], "onto": [80, 202, 203, 213, 278, 357, 378, 381, 385, 410, 412, 425, 497, 503, 507, 591, 592, 594, 652, 947, 951, 956], "recommend": [80, 109, 148, 198, 209, 215, 234, 247, 282, 289, 311, 332, 333, 339, 343, 345, 347, 351, 353, 357, 363, 376, 377, 378, 380, 382, 402, 411, 413, 415, 424, 460, 472, 499, 502, 508, 513, 525, 526, 533, 546, 547, 553, 570, 575, 595, 596, 602, 634, 640, 656, 661, 662, 664, 666, 768, 774, 776, 784, 821, 828, 830, 837, 844, 845, 850, 851, 853, 854, 855, 856, 858, 867, 870, 902, 921, 942, 950, 953, 955, 957, 960, 963, 965, 967, 968, 969, 971, 977, 989, 995, 996, 1002, 1003, 1004, 1005, 1007, 1009], "linearregress": [80, 124, 152, 160, 171, 176, 177, 178, 179, 184, 187, 198, 211, 215, 217, 234, 252, 279, 328, 345, 357, 358, 374, 380, 429, 534, 596, 599, 610, 613, 616, 618, 635, 636, 651, 949, 953, 963, 985, 997, 998, 1002, 1005, 1006, 1007, 1009], "retriev": [80, 153, 185, 245, 320, 327, 349, 359, 378, 381, 382, 432, 460, 554, 557, 558, 590, 617, 627, 648, 663, 689, 693, 695, 696, 719, 744, 800, 804, 837, 863, 949, 951, 953, 955, 972, 973, 986, 998, 1003, 1005, 1007, 1010], "026": 80, "predit": 80, "pca_2": 80, "673": [80, 320, 351], "527": [80, 974], "plot_pcr_vs_pl": [80, 974], "plot_digits_last_imag": [82, 974], "iris": [83, 244, 245, 984], "150x4": 83, "legend_el": [83, 117, 194, 241, 261, 311], "flower": [83, 95, 247, 470, 471, 953, 972], "versicolor": [83, 247, 248, 468], "differenti": [83, 245, 380, 383, 523, 524, 583, 586], "unus": [83, 93, 154, 178, 201, 203, 427, 543, 726, 734, 942, 950, 993, 1001, 1003, 1004, 1006, 1008], "3rd": [83, 145, 800, 843, 955, 963], "eigenvalu": [83, 229, 294, 370, 373, 375, 416, 426, 433, 434, 435, 436, 437, 438, 439, 440, 499, 505, 513, 637, 652, 653, 655, 657, 659, 831, 945, 950, 963, 995, 999, 1002, 1003, 1004, 1005], "179": [83, 173, 204, 232, 342, 351, 380, 974, 993], "plot_iris_dataset": [83, 974], "easi": [84, 154, 189, 199, 227, 236, 238, 307, 319, 328, 340, 351, 353, 357, 358, 373, 380, 464, 468, 474, 832, 942, 948, 952, 960, 963, 972, 973, 977, 987, 1003, 1008, 1009], "make_gaussian_quantil": [84, 101, 103, 341, 434, 438, 439, 440, 445, 484], "321": [84, 186, 974], "323": [84, 212, 287, 974], "y2": [84, 103, 680, 954], "324": [84, 340], "325": 84, "326": [84, 135, 320], "plot_random_dataset": [84, 974], "make_multilabel_classif": [85, 216, 341, 479, 500, 751, 796, 797, 953, 995, 996, 998, 1004], "degener": [85, 225, 385, 404, 418, 497, 684, 949, 953, 1002, 1006, 1007], "vocabulari": [85, 196, 319, 320, 357, 381, 552, 553, 554, 555, 955, 978, 987, 993, 995, 998, 1001, 1004, 1006], "w0": 85, "w1": [85, 380, 621], "54": [85, 90, 135, 158, 165, 181, 184, 218, 340, 342, 373, 455, 994, 995], "make_ml_clf": 85, "ff3333": 85, "0198e1": 85, "bf5fff": 85, "fcd116": 85, "ff7216": 85, "4dbd33": 85, "87421f": 85, "plot_2d": [85, 201], "p_c": [85, 487], "p_w_c": [85, 487], "allow_unlabel": [85, 216, 487], "return_distribut": [85, 487], "sep": [85, 247], "p_w": 85, "136": [85, 974], "plot_random_multilabel_dataset": [85, 974], "blind": [86, 89, 150, 180, 319, 378, 497, 505, 974], "fastica": [86, 150, 180, 378, 496, 499, 505, 974, 986, 993, 995, 1001, 1007, 1008], "fa": [86, 96, 97, 150, 351, 378, 437, 440, 496, 505, 762, 787, 974], "precomput": [86, 87, 88, 150, 159, 204, 215, 258, 260, 347, 354, 357, 359, 373, 381, 384, 396, 404, 405, 408, 409, 410, 414, 416, 421, 429, 435, 446, 447, 448, 488, 495, 499, 501, 504, 506, 512, 518, 520, 522, 524, 526, 529, 532, 534, 574, 575, 584, 599, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 624, 625, 626, 627, 628, 629, 631, 634, 636, 637, 642, 643, 645, 646, 648, 649, 652, 654, 655, 656, 660, 737, 741, 744, 755, 756, 798, 799, 807, 808, 809, 811, 812, 813, 815, 816, 817, 823, 866, 867, 868, 869, 870, 871, 874, 876, 929, 930, 931, 945, 951, 956, 968, 973, 974, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1003, 1004, 1006, 1007, 1008, 1009, 1010], "olivetti": [87, 109, 338, 378, 459, 989, 993, 1001], "chapter": [87, 328, 347, 373, 378, 380, 383, 494, 496, 498, 578, 583, 586, 607, 943, 946, 949, 968, 969], "decompos": [87, 91, 104, 280, 372, 498, 502, 673, 786, 902, 948, 949, 953, 970, 988, 989], "basicconfig": 87, "asctim": 87, "levelnam": 87, "faces_cent": 87, "image_shap": [87, 217], "constrained_layout": [87, 154, 201, 284, 285, 292], "set_constrained_layout_pad": 87, "w_pad": [87, 110, 324], "h_pad": [87, 110, 324], "set_edgecolor": 87, "vec": [87, 381, 502, 504, 511], "im": [87, 97, 249, 262], "pad": [87, 110, 148, 154, 201, 218, 319, 324, 381, 552, 553, 555], "initialis": [87, 502, 504, 511, 993, 1001, 1002], "mathbb": [87, 104, 140, 376, 953, 960, 968], "4096": [87, 340, 378, 459], "human": [87, 154, 319, 367, 373, 378, 822, 823, 953, 960, 1002], "friendli": [87, 333, 345, 353, 378, 858, 965, 966, 972, 973], "visualis": [87, 90, 97, 216, 508, 763, 764, 767, 779, 780, 781, 782, 783, 956, 973], "64x64": [87, 340, 378], "singular": [87, 354, 370, 373, 376, 415, 417, 446, 447, 448, 449, 485, 488, 498, 502, 504, 505, 508, 511, 513, 514, 621, 636, 637, 638, 651, 902, 949, 950, 952, 988, 989, 999, 1000], "scalar": [87, 290, 351, 359, 374, 383, 385, 428, 431, 488, 497, 579, 580, 581, 586, 587, 591, 592, 594, 701, 705, 881, 889, 945, 957, 959, 963, 967, 972, 1003, 1004, 1007, 1009], "noise_variance_": [87, 169, 496, 498, 505, 620, 1000, 1007], "pixelwis": 87, "pca_estim": 87, "nmf_estim": 87, "multivari": [87, 153, 337, 375, 378, 381, 437, 480, 481, 482, 591, 592, 593, 594, 613, 635, 642, 643, 800, 801, 802, 803, 804, 947, 949, 952, 955, 972, 978, 986, 989], "subcompon": [87, 378], "ica_estim": 87, "15e": 87, "sparsepca": [87, 495, 497, 498, 499, 501, 503, 504, 505, 506, 509, 510, 993, 1000, 1001, 1003, 1004, 1006, 1007, 1008], "batch_pca_estim": 87, "minibatchdictionarylearn": [87, 90, 334, 378, 495, 502, 506, 509, 510, 994, 996, 1003, 1004, 1006, 1007, 1008, 1009, 1010], "batch_dict_estim": 87, "enhanc": [87, 185, 344, 345, 349, 357, 359, 373, 953, 991, 992, 993, 994, 995, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "consum": [87, 328, 339, 347, 359, 364, 373, 377, 380, 413, 765, 766, 825, 826, 909, 910, 949, 977, 998, 1010], "kmeans_estim": 87, "factoranalysi": [87, 94, 97, 378, 508, 994, 996, 1005, 1007], "heteroscedast": [87, 94, 114, 183, 378, 841, 853], "fa_estim": 87, "wrap": [87, 106, 114, 258, 339, 347, 359, 397, 472, 549, 550, 621, 640, 791, 849, 943, 953, 956, 968, 972, 993, 998, 1001, 1003, 1004, 1006, 1008], "colormap": [87, 103, 145, 173, 190, 307, 312, 324, 661, 1006], "uv": [87, 378], "x_1": [87, 130, 140, 178, 182, 376, 378, 380, 383, 577, 589, 621, 838, 865, 866, 949, 955, 957, 963, 967], "x_n": [87, 378, 865, 866, 955, 957, 967], "dict_pos_dict_estim": 87, "positive_dict": [87, 495, 501, 509, 510], "dict_pos_code_estim": 87, "fit_algorithm": [87, 495, 501, 1008, 1009], "cd": [87, 135, 342, 343, 345, 349, 351, 378, 435, 436, 442, 495, 501, 503, 504, 507, 509, 510, 511, 949, 987, 998, 1008], "positive_cod": [87, 495, 501, 506, 509, 510], "dict_pos_estim": 87, "114": [87, 158, 292, 674, 974, 993], "plot_faces_decomposit": [87, 974], "imagin": [88, 137, 215, 311, 377, 378, 381, 949], "plai": [88, 115, 139, 164, 190, 232, 269, 303, 304, 332, 987], "microphon": 88, "s1": [88, 135, 145, 169, 170, 342, 986], "sinusoid": [88, 102, 114, 165, 214, 946, 986], "s2": [88, 135, 145, 169, 170, 342, 514, 986], "sawtooth": [88, 986], "saw": [88, 182, 185, 986], "tooth": [88, 986], "s_": [88, 242, 950, 961, 963, 986], "a_": [88, 370, 373, 502, 504, 511, 949, 986], "mixing_": [88, 89, 497, 986], "prove": [88, 977], "revert": [88, 594, 596, 597, 1000, 1005, 1010], "unmix": [88, 385, 497], "allclos": [88, 118, 965, 986], "mean_": [88, 242, 496, 497, 498, 503, 505, 507, 845, 963, 986, 1001], "orthogon": [88, 89, 90, 96, 150, 159, 251, 372, 378, 490, 495, 501, 503, 506, 507, 512, 628, 629, 649, 650, 965, 974, 975, 989, 993], "steelblu": [88, 89, 123], "sig": 88, "355": [88, 320, 974], "plot_ica_blind_source_separ": [88, 974], "pursuit": [88, 90, 96, 150, 159, 251, 378, 438, 490, 495, 501, 506, 512, 628, 629, 649, 650, 974, 975, 989, 993], "ica": [89, 372, 385, 969, 988, 989], "geometr": [89, 373, 652, 668, 694, 720, 950, 1001], "standard_t": 89, "s_pca_": 89, "s_ica_": 89, "plot_sampl": [89, 230], "axis_list": 89, "x_axi": [89, 189, 242], "y_axi": [89, 189], "quiver": 89, "hline": 89, "set_zord": 89, "09": [89, 90, 96, 153, 212, 216, 251, 276, 373, 493, 571, 698, 803, 953, 963, 967, 974], "373": [89, 974], "plot_ica_vs_pca": [89, 974], "ordinari": [89, 104, 150, 159, 160, 165, 177, 183, 184, 186, 198, 290, 599, 610, 616, 618, 619, 620, 621, 636, 642, 646, 647, 651, 967, 974, 975, 989], "firstli": [90, 332, 357, 621, 987], "undistort": 90, "noiseless": [90, 951], "omp": [90, 96, 180, 378, 495, 501, 506, 512, 628, 629, 649, 650, 975, 989, 993, 1001], "promin": [90, 359], "reminisc": 90, "downsampl": 90, "075": [90, 168, 974], "show_with_diff": 90, "puor": 90, "22692": 90, "dico": 90, "n_steps_": [90, 413, 501, 502, 1006], "reconstruct_from_patches_2d": [90, 381, 547], "intercept": [90, 173, 190, 198, 316, 359, 446, 447, 448, 513, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 651, 840, 844, 847, 865, 866, 872, 949, 951, 953, 958, 967, 968, 996, 998, 1002, 1003], "transform_algorithm": [90, 96, 495, 501, 506, 1009], "n1": 90, "atom": [90, 96, 378, 495, 501, 503, 506, 507, 509, 510, 617, 627, 648, 949, 993, 1006], "transform_n_nonzero_coef": [90, 96, 495, 501, 506], "n2": 90, "n4": 90, "transform_alpha": [90, 96, 495, 501, 506, 1006], "set_param": [90, 97, 105, 111, 114, 154, 155, 161, 169, 170, 174, 185, 189, 213, 218, 251, 261, 287, 310, 320, 348, 359, 373, 374, 380, 383, 387, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 428, 429, 433, 434, 435, 436, 437, 438, 439, 440, 446, 447, 448, 449, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 545, 546, 547, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 574, 575, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 599, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 652, 653, 654, 655, 656, 760, 761, 762, 765, 766, 776, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 821, 822, 823, 824, 825, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 857, 858, 860, 861, 862, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 943, 959, 978, 985, 986, 993, 999, 1000, 1001, 1006, 1007], "38": [90, 154, 172, 180, 185, 232, 247, 263, 293, 380, 596, 846, 901, 953, 963, 993, 994, 995], "plot_image_denois": [90, 974], "ipca": [91, 497, 498], "flip": [91, 546, 705, 902, 955, 997, 1006], "incrementalpca": [91, 334, 378, 497, 499, 503, 505, 508, 997, 1000, 1001, 1003, 1004, 1007], "x_ipca": 91, "x_pca": 91, "turquois": [91, 95, 96, 116, 187, 198, 204, 226, 227, 245], "x_transform": [91, 119, 215, 449, 495, 496, 497, 498, 499, 501, 503, 507, 530, 602, 603, 652, 653, 654, 655], "nmean": 91, "shadow": [91, 95, 96, 204, 298, 314, 321, 381], "scatterpoint": [91, 95, 204, 226, 298], "228": [91, 974], "plot_incremental_pca": [91, 974], "nest": [92, 101, 150, 170, 215, 231, 233, 255, 294, 333, 351, 359, 363, 373, 377, 383, 387, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 420, 426, 429, 433, 434, 435, 436, 437, 438, 439, 440, 446, 447, 448, 449, 468, 483, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 545, 546, 547, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 574, 575, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 599, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 652, 653, 654, 655, 656, 760, 761, 762, 765, 766, 767, 776, 787, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 821, 822, 823, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 857, 858, 860, 861, 862, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 942, 953, 956, 974, 993, 994, 997, 999, 1000, 1001, 1007], "train_ax": 92, "test_ax": 92, "straight": [92, 171, 177, 179, 235, 311, 332], "inner": [92, 114, 239, 243, 257, 298, 332, 381, 407, 478, 546, 553, 582, 612, 633, 644, 738, 740, 945, 953, 963, 968, 994, 997, 1007, 1010], "x_test_kernel_pca": 92, "orig_data_ax": 92, "pca_proj_ax": 92, "kernel_pca_proj_ax": 92, "unfold": [92, 348, 950], "untangl": 92, "mind": [92, 152, 153, 154, 199, 282, 283, 319, 320, 328, 345, 367, 375, 377, 380, 610, 611, 668, 949, 968, 972, 978, 985], "investig": [92, 97, 101, 149, 315, 345, 949], "pca_back_proj_ax": 92, "kernel_pca_back_proj_ax": 92, "reli": [92, 107, 111, 135, 156, 169, 170, 255, 258, 288, 292, 319, 332, 333, 347, 350, 353, 354, 357, 359, 369, 370, 373, 378, 380, 381, 513, 549, 550, 557, 561, 571, 572, 789, 792, 830, 919, 942, 945, 947, 949, 953, 956, 961, 963, 968, 977, 1001, 1002, 1003, 1007, 1009, 1010], "analyt": [92, 378, 383, 496, 584, 672, 943, 947, 953, 971, 977], "kernelridg": [92, 137, 214, 636, 946, 997, 1010], "kernal": 92, "relianc": [92, 185], "570": [92, 135, 197, 342, 974, 985], "plot_kernel_pca": [92, 974], "cla": 93, "086": [93, 974], "plot_pca_iri": [93, 974], "homoscedast": [94, 211, 282, 953, 1001], "succe": [94, 165], "subspac": [94, 376, 380, 416, 479, 519, 520, 655, 659, 902, 947, 956, 959, 965, 977, 986], "overestim": [94, 328, 377], "circumst": [94, 199, 956, 972], "nip": [94, 342, 479, 505, 530, 605, 953], "604": [94, 253, 505, 974], "minka": [94, 505, 949], "deni": [94, 995, 996, 1000, 1001, 1002, 1008, 1009], "engemann": [94, 995, 996, 1000], "x_homo": 94, "x_hetero": 94, "pca_scor": 94, "fa_scor": 94, "shrunk_cov_scor": 94, "lw_score": 94, "n_components_pca": 94, "n_components_fa": 94, "n_components_pca_ml": 94, "axhlin": [94, 126, 171, 237, 241], "violet": [94, 1009], "465": [94, 974], "plot_pca_vs_fa_model_select": [94, 974], "92461872": 95, "05306648": 95, "x_r": [95, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567], "x_r2": 95, "196": [95, 862, 966, 974], "plot_pca_vs_lda": [95, 974], "ricker": 96, "sparsecod": [96, 378, 495, 501, 504, 512, 1000, 1001, 1003, 1005, 1007], "mexican": 96, "piecewis": [96, 290, 370, 944, 949, 963, 969], "matter": [96, 230, 311, 328, 373, 374, 380, 531, 632, 640, 642, 949, 997], "motiv": [96, 345, 347, 359, 945, 953, 963, 977, 1006], "heavier": [96, 375, 949], "ricker_funct": 96, "ricker_matrix": 96, "d_fix": 96, "d_multi": 96, "first_quart": 96, "transform_n_nozero_coef": 96, "lasso_lar": [96, 495, 501, 506, 512, 1003], "n_nonzero": 96, "coder": [96, 506, 680], "flatnonzero": [96, 169, 237, 246, 247, 744], "soft": [96, 122, 123, 345, 359, 533, 534, 861, 869, 967, 977, 998], "debias": 96, "lstsq": [96, 345, 621, 634], "rcond": 96, "286": [96, 380, 974], "plot_sparse_cod": [96, 974], "convex": [96, 113, 114, 150, 159, 188, 201, 316, 320, 373, 375, 378, 386, 410, 416, 426, 437, 439, 440, 443, 444, 445, 622, 640, 656, 949, 950, 956, 957, 967, 974, 1006], "uncov": [97, 659], "inher": [97, 176, 328, 373, 378, 943, 945, 947, 948, 950, 954], "varimax": [97, 378, 496, 1005], "jona": [97, 1005, 1010], "sassenhagen": [97, 1005, 1010], "set_yticklabel": [97, 140, 148, 149, 156, 249, 321], "n_comp": [97, 158], "unrot": 97, "52106591": 97, "37741762": 97, "26934744": 97, "92329566": 97, "5804131": 97, "02449161": 97, "56485654": 97, "06694199": 97, "88096009": 97, "4472869": 97, "41691605": 97, "55390036": 97, "99918858": 97, "01915283": 97, "96228895": 97, "05840206": 97, "98633022": 97, "05752333": 97, "16052385": 97, "67443065": 97, "90809432": 97, "41726413": 97, "85857475": 97, "43847489": 97, "416": [97, 702, 953, 974], "plot_varimax_fa": [97, 974], "custom": [98, 132, 134, 150, 164, 190, 219, 231, 237, 239, 242, 245, 246, 250, 260, 265, 269, 287, 302, 304, 305, 307, 308, 310, 319, 321, 337, 340, 343, 347, 352, 353, 354, 357, 358, 359, 372, 373, 374, 377, 383, 432, 453, 457, 458, 466, 468, 502, 504, 511, 513, 521, 522, 528, 529, 535, 537, 566, 594, 595, 654, 663, 677, 762, 791, 829, 863, 870, 937, 942, 947, 953, 956, 972, 973, 974, 977, 987, 989, 993, 997, 998, 1000, 1001, 1003, 1004, 1005, 1008, 1009, 1010, 1011], "convent": [99, 238, 345, 347, 348, 349, 351, 359, 391, 392, 395, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 433, 434, 435, 436, 437, 438, 439, 440, 472, 473, 495, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 511, 527, 530, 533, 534, 545, 546, 547, 552, 553, 555, 591, 592, 593, 594, 641, 652, 653, 654, 655, 682, 760, 761, 793, 794, 809, 811, 813, 817, 829, 837, 840, 841, 843, 846, 857, 858, 869, 896, 897, 953, 979, 993, 1000, 1001, 1004, 1006, 1007, 1009, 1010], "subclass": [99, 347, 383, 538, 919, 998, 1001, 1006, 1010], "showcas": [99, 150, 347], "statu": [99, 146, 294, 339, 349, 363, 460, 805, 806], "_is_fit": 99, "snippet": [99, 328, 345, 350, 353, 357, 369, 380, 381, 382, 943, 963, 976, 1006], "customestim": 99, "classifiermixin": [99, 215, 345, 347, 359, 377, 1004], "kushan": [99, 1010], "kushansharma1": 99, "classes_": [99, 173, 190, 209, 215, 247, 296, 297, 345, 347, 359, 398, 401, 402, 513, 514, 515, 517, 519, 521, 523, 525, 528, 531, 533, 557, 558, 574, 595, 622, 623, 630, 632, 638, 639, 640, 661, 664, 666, 751, 762, 765, 766, 776, 793, 794, 795, 796, 797, 800, 801, 802, 803, 804, 807, 812, 815, 822, 825, 832, 833, 836, 846, 860, 861, 862, 865, 867, 870, 873, 875, 878, 953, 964, 967, 994, 997, 998, 1000, 1003, 1005], "track": [99, 105, 113, 297, 345, 348, 349, 369, 498, 922, 954, 972, 973, 1000, 1003], "notfittederror": [99, 359, 814, 937, 997, 999, 1002, 1003, 1009, 1010], "logic": [99, 333, 346, 347, 352, 369, 380, 969, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "boolean": [99, 327, 340, 345, 347, 354, 374, 380, 381, 382, 428, 525, 526, 545, 546, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 571, 572, 593, 596, 597, 600, 613, 635, 663, 794, 800, 821, 828, 848, 881, 937, 943, 949, 955, 960, 963, 969, 993, 996, 998, 999, 1000, 1002, 1003, 1004, 1006, 1007, 1008], "sklearn_is_fit": [99, 974], "isolationforest": [100, 150, 184, 208, 218, 253, 595, 791, 869, 959, 974, 999, 1000, 1001, 1002, 1004, 1006, 1007, 1008, 1009, 1010], "oob": [100, 113, 150, 380, 479, 528, 973, 974, 995, 1006, 1010], "vote": [100, 107, 121, 122, 123, 150, 257, 311, 359, 360, 372, 465, 519, 520, 521, 524, 528, 529, 533, 534, 621, 793, 807, 808, 813, 815, 954, 956, 974, 975, 985, 989, 993, 996, 998, 1003], "experi": [101, 140, 144, 152, 153, 154, 155, 158, 183, 255, 283, 315, 320, 321, 333, 339, 345, 348, 372, 377, 479, 691, 748, 949, 954, 965, 971, 972, 977, 985, 987], "depict": [101, 240, 380, 952], "zhu": [101, 380, 483, 517, 622, 860], "principl": [101, 144, 263, 321, 345, 357, 359, 360, 377, 380, 902, 942, 952, 956, 967, 1000], "repeatedli": [101, 291, 328, 359, 373, 380, 383, 472, 510, 630, 631, 640, 641, 642, 744, 943, 957, 982], "zou": [101, 169, 380, 483, 517, 620, 949, 967], "rosset": [101, 380, 483, 517], "hasti": [101, 104, 105, 116, 135, 169, 237, 342, 377, 380, 483, 484, 517, 523, 524, 592, 620, 685, 686, 687, 795, 812, 858, 873, 874, 943, 947, 949, 954, 960, 965, 967, 969], "2009": [101, 104, 105, 116, 165, 373, 377, 378, 380, 381, 483, 484, 492, 495, 501, 502, 504, 505, 508, 511, 517, 523, 524, 599, 635, 643, 660, 796, 873, 874, 901, 902, 949, 953, 954, 960, 969], "349": [101, 351, 517], "360": [101, 320, 517], "sphere": [101, 150, 200, 201, 204, 205, 206, 258, 320, 379, 483, 553, 652, 653, 654, 655, 656, 727, 888, 947, 951, 956, 974], "roughli": [101, 114, 170, 230, 248, 258, 283, 332, 359, 378, 381, 483, 950, 993], "2_000": 101, "percent": [101, 456, 564, 966], "predecessor": [101, 414, 419, 420, 421, 1010], "mistak": [101, 132, 297, 328, 373, 377, 698, 836, 850, 851, 853, 854, 855, 856, 949, 954], "incorrect": [101, 152, 245, 299, 328, 345, 373, 571, 572, 596, 597, 697, 993, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006], "consecut": [101, 112, 182, 357, 371, 377, 381, 407, 411, 413, 414, 416, 420, 423, 426, 501, 502, 503, 510, 566, 609, 630, 631, 632, 640, 641, 642, 760, 761, 767, 800, 801, 802, 803, 804, 822, 823, 942, 963, 987, 1001], "weak_learn": 101, "max_leaf_nod": [101, 107, 116, 181, 290, 327, 380, 521, 522, 523, 524, 525, 526, 528, 529, 530, 873, 874, 875, 876, 996, 1002, 1004], "adaboost_clf": 101, "misclassification_error": 101, "dummyclassifi": [101, 241, 516, 695, 953, 994, 996, 997, 998, 1000, 1001, 1002, 1003, 1011], "preval": [101, 287, 359, 664, 676, 953], "dummi": [101, 102, 181, 199, 215, 241, 347, 350, 368, 695, 838, 847, 963, 969, 989, 994, 996, 997, 998, 1000], "dummy_clf": [101, 515], "weak_learners_misclassification_error": 101, "dummy_classifiers_misclassification_error": 101, "475": 101, "692": 101, "surpass": [101, 311, 822, 823], "staged_predict": [101, 112, 115, 380, 517, 518, 523, 524, 525, 526, 993, 1005], "conclud": [101, 153, 161, 199, 238, 321, 328, 360, 825], "boosting_error": 101, "missclassif": 101, "jitter": [101, 614, 618, 1004], "stagewis": 101, "estimator_errors_": [101, 517, 518], "estimator_weights_": [101, 517, 518], "weak_learners_info": 101, "layout": [101, 278, 357, 865, 866, 867, 870, 886, 968, 996, 998, 1010], "get_figur": 101, "reweight": [101, 320, 359, 375, 380, 554, 555, 612, 633, 644], "formul": [101, 137, 146, 185, 247, 345, 375, 378, 381, 383, 386, 439, 513, 514, 521, 528, 614, 615, 618, 619, 620, 622, 623, 629, 634, 726, 732, 761, 867, 870, 873, 875, 949, 953, 954, 963, 975, 989, 1010], "mathemat": [101, 153, 169, 198, 241, 337, 342, 345, 359, 362, 375, 378, 379, 383, 513, 514, 521, 528, 599, 610, 620, 755, 756, 761, 823, 867, 870, 873, 875, 949, 953, 963, 965, 975, 977, 985, 989, 1007], "th": [101, 218, 290, 327, 358, 373, 377, 380, 388, 405, 409, 415, 417, 423, 427, 436, 521, 522, 523, 524, 525, 526, 528, 529, 530, 557, 558, 596, 612, 613, 633, 635, 644, 660, 682, 743, 783, 846, 890, 943, 949, 953, 957, 960, 967, 968, 1008], "boil": [101, 348, 375], "forc": [101, 137, 166, 185, 258, 282, 319, 339, 343, 349, 368, 377, 380, 414, 421, 460, 570, 573, 610, 611, 616, 617, 621, 624, 625, 626, 627, 636, 637, 638, 645, 648, 651, 717, 741, 744, 805, 806, 807, 808, 809, 811, 813, 815, 816, 817, 867, 868, 869, 870, 871, 883, 885, 886, 963, 989, 998, 1001, 1002, 1003, 1005, 1006, 1007, 1009], "459": [101, 373, 406, 974], "plot_adaboost_multiclass": [101, 974], "1d": [102, 104, 150, 154, 182, 212, 259, 262, 271, 314, 325, 345, 352, 354, 358, 359, 374, 379, 428, 431, 581, 594, 597, 617, 621, 624, 627, 648, 667, 676, 677, 683, 692, 693, 697, 701, 705, 746, 747, 750, 759, 807, 808, 809, 810, 811, 813, 815, 816, 817, 830, 881, 885, 886, 916, 940, 954, 974, 978, 985, 993, 998, 999, 1000, 1002, 1006, 1007], "299": [102, 644], "drucker": [102, 380, 518], "1997": [102, 340, 378, 380, 499, 518, 654, 658, 949, 950, 953], "decisiontreeregressor": [102, 104, 219, 279, 287, 293, 325, 326, 350, 518, 520, 522, 523, 524, 526, 528, 529, 596, 597, 873, 876, 878, 897, 943, 969, 994, 995, 998, 999, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "adaboostregressor": [102, 364, 380, 517, 526, 894, 995, 996, 999, 1002, 1003, 1006, 1008, 1009], "regr_1": [102, 325, 326], "regr_2": [102, 325, 326], "y_1": [102, 325, 326, 376, 953, 957, 967], "y_2": [102, 325, 326, 957], "447": [102, 320, 974], "plot_adaboost_regress": [102, 974], "stump": [103, 380, 523, 1004], "puriti": [103, 877, 879], "circleci": [103, 141, 143, 145, 146, 173, 190, 225, 233, 276, 312, 324, 345], "plot_adaboost_twoclass": [103, 974], "bdt": 103, "plot_color": [103, 324], "br": 103, "plot_step": [103, 110, 324], "class_nam": [103, 232, 846, 877, 878, 879, 969, 1009], "xx0": [103, 595], "xx1": [103, 595], "twoclass_output": 103, "plot_rang": 103, "irreduc": [104, 953], "dark": [104, 153, 307, 340, 1010], "light": [104, 340], "beam": [104, 993], "pointwis": [104, 144, 384, 408], "offset": [104, 158, 357, 375, 378, 433, 472, 473, 527, 596, 597, 605, 606, 608, 609, 641, 691, 738, 740, 811, 869, 953, 967, 985, 1001], "bootstrap": [104, 105, 113, 148, 241, 250, 289, 377, 380, 518, 519, 520, 521, 522, 527, 528, 529, 891, 924, 949, 993, 994, 996, 998, 1001, 1003, 1006], "stem": [104, 112, 155, 180, 230, 377, 381, 945, 955], "tibshirani": [104, 105, 116, 135, 169, 237, 342, 377, 380, 484, 523, 524, 592, 620, 685, 686, 687, 795, 812, 873, 874, 943, 947, 949, 954, 960, 969], "friedman": [104, 105, 116, 237, 375, 377, 380, 442, 480, 481, 482, 484, 522, 523, 524, 529, 557, 558, 795, 873, 874, 876, 947, 949, 954, 960, 969], "springer": [104, 105, 116, 237, 371, 373, 377, 378, 380, 484, 499, 523, 524, 654, 658, 660, 669, 684, 689, 703, 704, 719, 760, 873, 874, 950, 953, 954, 960, 969], "0255": 104, "0003": 104, "0152": 104, "0098": 104, "0196": 104, "0004": [104, 283, 568], "0092": 104, "baggingregressor": [104, 364, 380, 519, 876, 943, 996, 999, 1001, 1004, 1008, 1009], "n_repeat": [104, 108, 115, 134, 153, 155, 156, 238, 255, 287, 377, 479, 598, 777, 778, 961], "knn": [104, 122, 127, 148, 261, 266, 267, 270, 283, 289, 298, 319, 380, 566, 814, 860, 861, 956, 966, 985, 999], "y_predict": [104, 347, 993], "y_error": [104, 187], "y_nois": 104, "y_bia": 104, "y_var": 104, "plot_bias_vari": [104, 974], "z_i": [105, 957], "y_i": [105, 290, 315, 371, 380, 944, 945, 949, 953, 957, 967, 968, 969], "whilst": [105, 203], "practition": [105, 185], "suitabl": [105, 114, 165, 167, 185, 274, 321, 339, 340, 351, 354, 373, 378, 381, 416, 426, 432, 451, 469, 472, 591, 599, 800, 801, 804, 839, 840, 863, 918, 922, 947, 949, 952, 963, 965, 967, 972, 987, 1007, 1008], "ed": [105, 116, 373, 380, 484, 523, 524, 965, 993, 1000], "p592": 105, "kian": [105, 998, 1008, 1009, 1010], "ho": [105, 380, 519, 520, 953, 998, 1001, 1002, 1007], "hui": [105, 169, 502, 504, 511, 620, 949], "ordereddict": 105, "warm_start": [105, 141, 174, 290, 347, 351, 359, 380, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 574, 610, 612, 613, 616, 622, 624, 626, 630, 631, 632, 633, 640, 641, 642, 644, 760, 761, 814, 822, 823, 959, 975, 989, 993, 996, 997, 998, 1001, 1002, 1003, 1004, 1007, 1009], "disabl": [105, 285, 294, 319, 343, 345, 364, 381, 413, 424, 432, 501, 502, 503, 510, 523, 524, 525, 526, 824, 863, 885, 886, 963, 999, 1002, 1006, 1008], "trajectori": 105, "ensemble_clf": 105, "oob_scor": [105, 380, 519, 520, 521, 522, 528, 529, 998, 1000], "log2": [105, 191, 220, 521, 522, 523, 524, 528, 529, 873, 874, 875, 876, 954], "error_r": 105, "min_estim": 105, "max_estim": 105, "oob_error": 105, "oob_score_": [105, 519, 520, 521, 522, 523, 524, 528, 529, 995, 1009], "clf_err": 105, "714": [105, 247, 281, 289, 974], "plot_ensemble_oob": [105, 974], "betatim": [106, 120, 1008], "leak": [106, 243, 319, 328, 374, 377, 825, 850, 851, 853, 854, 855, 856, 963, 993, 1000, 1003, 1009, 1010], "80_000": 106, "x_full_train": 106, "y_full_train": 106, "x_train_ensembl": 106, "x_train_linear": 106, "y_train_ensembl": 106, "y_train_linear": 106, "gradientboostingclassifi": [106, 113, 116, 280, 328, 357, 517, 525, 596, 597, 954, 960, 993, 994, 995, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010], "random_forest": 106, "gradient_boost": [106, 995, 996, 1002], "histgradientboostingclassifi": [106, 107, 287, 288, 289, 290, 292, 294, 333, 523, 528, 596, 597, 943, 972, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "randomtreesembed": [106, 119, 202, 380, 875, 994, 1001, 1002, 1006, 1007, 1008], "random_tree_embed": 106, "rt_model": 106, "randomtreesembeddingrandomtreesembed": 106, "rf_appli": 106, "rf_leaves_yield": 106, "kw_arg": [106, 829, 963, 999], "rf_model": 106, "0x7f74b687bdc0": 106, "functiontransformerfunctiontransform": 106, "gbdt_appli": 106, "gbdt_leaves_yield": 106, "gbdt_model": 106, "0x7f74a88f4820": 106, "roccurvedisplai": [106, 218, 221, 235, 247, 248, 287, 352, 751, 752, 959, 990, 1003, 1009, 1010, 1011], "rt": 106, "rf": [106, 107, 120, 123, 124, 155, 287, 328, 380, 531, 533, 534], "gbdt": [106, 154, 287, 288, 293, 350, 380], "model_displai": 106, "plot_feature_transform": [106, 974], "hgbt": [107, 380], "fetch_california_h": [107, 112, 148, 149, 278, 289, 340, 358, 374, 1002, 1004], "20640": [107, 149, 340, 454], "n_core": 107, "only_physical_cor": 107, "unnecessari": [107, 224, 350, 407, 610, 611, 616, 617, 624, 625, 626, 627, 645, 648, 669, 956, 963, 973, 977, 996, 998, 1003, 1004, 1006, 1009], "min_samples_leaf": [107, 113, 114, 155, 287, 290, 323, 380, 521, 522, 523, 524, 525, 526, 528, 529, 530, 873, 874, 875, 876, 969, 999], "early_stop": [107, 154, 189, 273, 290, 319, 359, 380, 525, 526, 630, 631, 632, 640, 641, 642, 822, 823, 967, 1001, 1004, 1007, 1008], "return_train_scor": [107, 242, 284, 377, 762, 765, 766, 776, 788, 999, 1000, 1002], "wast": [107, 351, 377, 378, 942], "plotli": [107, 239, 345, 363, 366], "cursor": [107, 239], "px": [107, 239], "make_subplot": 107, "shared_yax": 107, "subplot_titl": 107, "model_nam": [107, 218, 257], "colors_list": 107, "param_nam": [107, 239, 253, 293, 315, 364, 784, 792, 948, 987], "param_": 107, "scatter_fig": 107, "mean_fit_tim": [107, 260, 762, 776], "error_x": [107, 239], "std_fit_tim": [107, 260, 762, 776], "error_i": [107, 239], "hover_data": [107, 239], "line_fig": 107, "scatter_trac": 107, "line_trac": 107, "add_trac": 107, "mean_score_tim": [107, 236, 239, 762, 776], "std_score_tim": [107, 239, 762, 776], "update_layout": [107, 239], "xaxis2": 107, "traceord": 107, "borderwidth": 107, "plateau": [107, 112, 134, 236, 240], "earlier": [107, 154, 185, 339, 345, 376, 796, 799, 963, 991, 994, 1006, 1008], "never": [107, 216, 328, 345, 354, 357, 367, 373, 374, 376, 377, 414, 421, 487, 519, 520, 521, 528, 825, 826, 945, 963, 1003, 1006], "hgbdt": 107, "domin": [107, 149, 156, 181, 186, 218, 247, 283, 340, 351, 371, 845, 955, 963, 969, 1009], "ever": [107, 120, 354, 380, 977], "disput": 107, "alwai": [107, 111, 114, 160, 181, 199, 206, 212, 241, 244, 248, 285, 304, 311, 315, 320, 328, 332, 333, 339, 343, 345, 346, 347, 351, 358, 359, 363, 371, 373, 374, 377, 380, 381, 382, 383, 390, 396, 407, 413, 428, 429, 431, 433, 446, 447, 448, 452, 460, 472, 473, 508, 513, 515, 516, 518, 520, 522, 523, 524, 525, 526, 528, 529, 532, 534, 545, 552, 553, 555, 558, 575, 591, 592, 594, 596, 597, 599, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 624, 625, 626, 627, 628, 629, 631, 634, 635, 636, 637, 640, 642, 643, 659, 669, 673, 679, 685, 686, 687, 695, 697, 698, 702, 745, 748, 749, 760, 762, 763, 764, 765, 766, 767, 769, 770, 771, 772, 775, 776, 777, 778, 779, 780, 781, 782, 783, 798, 799, 808, 809, 816, 817, 823, 830, 838, 843, 845, 848, 850, 851, 852, 853, 854, 855, 856, 858, 866, 867, 868, 870, 871, 873, 874, 876, 903, 912, 913, 942, 943, 945, 947, 949, 952, 953, 956, 959, 961, 965, 966, 968, 969, 977, 978, 985, 993, 995, 997, 998, 999, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1010], "thumb": [107, 158, 332, 345, 346, 357, 373, 622, 623, 630, 631, 632, 640, 641, 642, 865, 953], "57": [107, 137, 153, 197, 247, 276, 342, 343, 363, 365, 366, 374, 669, 724, 744, 798, 953, 963, 974, 993], "390": [107, 974], "plot_forest_hist_grad_boosting_comparison": [107, 974], "mdi": [107, 108, 115, 150, 151, 156, 380, 428, 460, 528, 594, 598, 791, 825, 839, 961, 974], "artifici": [108, 111, 118, 135, 149, 185, 201, 214, 276, 319, 340, 341, 342, 350, 370, 372, 373, 377, 378, 499, 660, 795, 822, 823, 946, 950, 952, 954, 960, 965, 969, 973, 977, 993], "feature_importances_": [108, 109, 115, 135, 155, 156, 359, 380, 382, 517, 518, 521, 522, 523, 524, 528, 529, 530, 557, 558, 561, 873, 874, 875, 876, 995, 998, 1002], "estimators_": [108, 110, 216, 287, 359, 517, 518, 519, 520, 521, 522, 523, 524, 527, 528, 529, 530, 531, 532, 533, 534, 793, 794, 795, 796, 797, 798, 799, 994, 1000, 1007], "forest_import": 108, "overcom": [108, 185, 332, 381], "permutation_import": [108, 109, 115, 155, 156, 287, 380, 517, 518, 521, 522, 523, 524, 528, 529, 530, 873, 874, 875, 876, 961, 1003, 1005, 1006, 1010], "importances_mean": [108, 115, 155, 156, 287, 598, 961], "481": [108, 146], "importances_std": [108, 598, 961], "omit": [108, 152, 153, 301, 350, 386, 439, 498, 630, 632, 640, 769, 771, 793, 794, 797, 800, 801, 802, 803, 804, 822, 951, 958], "029": [108, 320, 961, 974], "plot_forest_import": [108, 974], "multicollinear": [108, 109, 150, 151, 155, 244, 299, 376, 464, 528, 598, 619, 791, 949, 961, 974], "hotter": 109, "job": [109, 227, 345, 349, 353, 380, 384, 401, 408, 410, 412, 414, 416, 421, 422, 425, 428, 431, 432, 436, 495, 499, 500, 501, 503, 506, 507, 509, 510, 512, 519, 520, 521, 522, 527, 528, 529, 530, 531, 532, 533, 534, 566, 571, 572, 574, 598, 603, 621, 652, 653, 654, 655, 656, 657, 658, 737, 741, 744, 762, 765, 766, 768, 776, 784, 786, 787, 788, 789, 790, 792, 793, 794, 795, 797, 798, 807, 808, 809, 811, 813, 815, 816, 817, 818, 819, 824, 827, 860, 861, 863, 919, 977, 980], "five": [109, 225, 297, 300, 340, 495, 503, 509, 950, 956, 968, 977, 993], "drawback": [109, 198, 945, 948], "img_shap": 109, "imp_reshap": 109, "met": [109, 215, 347, 382, 498, 505, 591, 635, 949, 953, 1001], "plot_forest_importances_fac": [109, 974], "fourth": [110, 978], "descend": [110, 591, 1003], "extratreesclassifi": [110, 119, 380, 382, 522, 528, 530, 875, 876, 954, 996, 997, 1001, 1002, 1003, 1006, 1007, 1008, 1009, 1010], "decisiontre": [110, 998], "consol": [110, 343, 979], "extratre": [110, 119, 332, 996], "9266666666666666": 110, "9933333333333333": 110, "9866666666666667": 110, "rdylbu": [110, 324], "plot_step_coars": 110, "plot_idx": 110, "model_titl": 110, "model_detail": 110, "blend": [110, 121, 284, 359, 377, 972], "estimator_alpha": 110, "coarser": [110, 114], "regularli": [110, 255, 357, 955], "xx_coarser": 110, "yy_coars": 110, "z_points_coars": 110, "cs_point": 110, "567": [110, 974], "plot_forest_iri": [110, 974], "ordinalencod": [111, 121, 154, 155, 181, 218, 284, 292, 339, 359, 545, 801, 833, 838, 846, 943, 955, 963, 1001, 1002, 1005, 1006, 1007, 1008, 1009, 1010], "equidist": [111, 656], "iowa": [111, 121, 218], "sale": [111, 218, 238, 953, 977], "42165": 111, "categorical_columns_subset": 111, "bldgtype": 111, "garagefinish": 111, "lotconfig": 111, "masvnrtyp": [111, 121], "housestyl": [111, 121], "fireplacequ": 111, "extercond": 111, "exterqu": [111, 121], "poolqc": 111, "numerical_columns_subset": 111, "3ssnporch": 111, "fireplac": 111, "bsmthalfbath": 111, "halfbath": 111, "garagecar": [111, 121], "totrmsabvgrd": 111, "bsmtfinsf1": [111, 121], "bsmtfinsf2": 111, "grlivarea": 111, "screenporch": 111, "n_categorical_featur": [111, 525, 526, 596, 597], "n_numerical_featur": 111, "1460": [111, 121], "make_column_transform": [111, 121, 153, 210, 288, 374, 428, 430, 1001], "dropper": 111, "hist_drop": 111, "hist_one_hot": 111, "etc": [111, 181, 199, 233, 242, 243, 328, 332, 334, 345, 347, 349, 350, 357, 358, 359, 364, 370, 374, 377, 381, 453, 467, 491, 521, 522, 528, 529, 632, 640, 656, 682, 734, 762, 776, 796, 799, 829, 840, 873, 874, 875, 876, 877, 879, 885, 886, 896, 911, 942, 943, 947, 953, 956, 972, 973, 977, 993, 1000, 1002, 1003], "ordinal_encod": [111, 218], "use_encoded_valu": [111, 121, 155, 218, 284, 839, 963, 1005], "unknown_valu": [111, 121, 155, 218, 284, 839, 963, 1005, 1007, 1008], "verbose_feature_names_out": [111, 153, 154, 155, 222, 284, 290, 291, 292, 294, 374, 428, 431, 1006, 1010], "hist_ordin": 111, "hist_n": 111, "n_cv_fold": [111, 284, 768, 784, 789, 792], "dropped_result": 111, "one_hot_result": 111, "ordinal_result": 111, "native_result": 111, "figure_titl": 111, "plot_info": 111, "test_scor": [111, 113, 115, 189, 237, 240, 255, 284, 315, 323, 358, 377, 768, 784, 788, 789, 792], "y_limit": 111, "mape_cv_mean": 111, "mape_cv_std": 111, "c0": [111, 211, 284], "slowest": [111, 901, 902], "theori": [111, 214, 229, 315, 342, 372, 373, 377, 380, 654, 658, 689, 719, 857, 858, 902, 942, 949, 950, 952, 953, 954, 968, 969], "poorer": [111, 328, 378], "slight": [111, 186, 289, 380, 413, 1003], "acf": 111, "bde": 111, "isol": [111, 117, 208, 218, 320, 343, 345, 351, 363, 527, 811, 869, 1002, 1003], "bcde": 111, "histgradientboostingregressor__max_depth": 111, "histgradientboostingregressor__max_it": 111, "altogeth": [111, 351, 1001], "plot_gradient_boosting_categor": [111, 974], "asid": [112, 189, 367, 523, 524, 525, 526, 630, 631, 632, 640, 642, 822, 823], "validation_fract": [112, 189, 290, 380, 523, 524, 525, 526, 630, 631, 632, 640, 642, 822, 823, 967, 1001, 1007], "monitor": [112, 165, 189, 348, 359, 517, 518, 523, 524, 525, 526, 957, 996, 1001, 1003, 1005], "worsen": 112, "n_estimators_": [112, 523, 524], "valuabl": [112, 345, 943, 977], "strike": [112, 154, 185], "california": [112, 145, 148, 149, 278, 284, 289, 338, 342, 454, 989], "x_val": [112, 961], "y_val": [112, 961], "gbm_full": 112, "gbm_early_stop": 112, "training_time_ful": 112, "n_estimators_ful": 112, "training_time_early_stop": 112, "estimators_early_stop": 112, "train_errors_without": 112, "val_errors_without": 112, "train_errors_with": 112, "val_errors_with": 112, "train_pr": 112, "val_pr": 112, "set_yscal": [112, 181, 768], "training_tim": [112, 319], "plot_gradient_boosting_early_stop": [112, 974], "fly": [113, 350, 353, 472, 473, 546, 993, 995, 1002], "pessimist": [113, 380], "cumul": [113, 181, 199, 373, 689, 698, 719, 842, 854, 963, 967, 1000, 1002, 1003], "demand": [113, 381, 762, 776, 786, 787], "6860": 113, "special": [113, 153, 171, 199, 255, 268, 284, 307, 339, 341, 347, 351, 357, 359, 373, 376, 378, 428, 431, 517, 519, 523, 786, 877, 942, 947, 949, 951, 952, 953, 954, 956, 969, 1000, 1003, 1005, 1007], "expit": [113, 171, 380, 525, 949, 1000], "ridgewai": [113, 380], "gbm": [113, 380, 996], "x3": [113, 374, 986], "binomi": [113, 116, 380, 517, 523, 525, 949, 1007, 1010], "acc": 113, "heldout_scor": 113, "devianc": [113, 116, 181, 199, 293, 380, 517, 522, 523, 525, 526, 529, 612, 633, 644, 685, 686, 687, 710, 712, 715, 874, 876, 949, 969, 994, 1003, 1004, 1006, 1007, 1009], "y_proba": [113, 116, 283, 359, 825], "staged_predict_proba": [113, 116, 517, 523, 525, 993], "cv_estim": 113, "cv_clf": 113, "val_scor": 113, "cv_score": 113, "cumsum": [113, 181, 199, 1000], "oob_improvement_": [113, 380, 523, 524, 995], "oob_best_it": 113, "test_best_it": 113, "cv_best_it": 113, "brew": [113, 343, 363], "oob_color": 113, "174": [113, 221, 276, 351, 548, 974], "212": [113, 135, 145, 243, 299, 342, 433, 464, 959, 974, 985], "test_color": 113, "127": [113, 993], "201": [113, 135, 342, 548], "cv_color": 113, "253": [113, 498], "192": [113, 351, 993], "oob_lin": 113, "test_lin": 113, "cv_line": 113, "dashdot": [113, 137, 140, 218], "xticks_po": 113, "xticks_label": 113, "plot_gradient_boosting_oob": [113, 974], "atleast_2d": [114, 347], "expected_i": 114, "amplitud": [114, 142, 144, 175, 949], "lognorm": [114, 143, 162, 228, 282, 963], "imposs": [114, 321, 973], "all_model": 114, "min_samples_split": [114, 115, 116, 242, 250, 279, 289, 380, 521, 522, 523, 524, 528, 529, 530, 765, 766, 873, 874, 875, 876, 942, 969, 999], "gbr": 114, "gbr_l": 114, "y_med": 114, "unfortun": [114, 152, 153, 199, 353, 357, 380, 472, 473], "sinoisoid": 114, "highlight_min": [114, 170], "pbl": 114, "715413": 114, "750348": 114, "127128": 114, "253445": 114, "379763": 114, "933253": 114, "305438": 114, "622811": 114, "940184": 114, "827917": 114, "909909": 114, "145957": 114, "382005": 114, "667219": 114, "asymmetr": [114, 183, 359, 998], "nor": [114, 241, 319, 328, 332, 350, 357, 381, 401, 410, 558, 889, 957, 969, 1004], "917281": 114, "767498": 114, "617715": 114, "692901": 114, "144204": 114, "245961": 114, "347717": 114, "648026": 114, "412021": 114, "607752": 114, "803483": 114, "874771": 114, "354394": 114, "355445": 114, "356497": 114, "852774": 114, "extrem": [114, 181, 183, 217, 218, 278, 285, 299, 320, 345, 348, 373, 378, 521, 522, 528, 529, 530, 596, 597, 643, 687, 715, 875, 876, 877, 879, 953, 955], "coverage_fract": 114, "y_low": 114, "y_high": 114, "868": [114, 131], "hypothesi": [114, 238, 244, 377, 654, 658, 790, 950], "experiment": [114, 148, 149, 181, 249, 250, 289, 290, 343, 345, 347, 348, 355, 357, 359, 364, 377, 460, 513, 591, 660, 765, 766, 923, 942, 943, 949, 952, 953, 972, 973, 981, 989, 1001, 1002, 1005, 1006, 1007, 1008, 1010], "enable_halving_search_cv": [114, 249, 250, 289, 349, 765, 766, 942], "halvingrandomsearchcv": [114, 250, 289, 364, 543, 765, 942, 1005, 1007, 1008, 1009, 1010], "neg_mean_pinball_loss_05p_scor": 114, "greater_is_bett": [114, 705, 953], "search_05p": 114, "max_resourc": [114, 765, 766, 942], "min_resourc": [114, 765, 766], "neg_mean_pinball_loss_95p_scor": 114, "search_95p": 114, "estimator__alpha": 114, "did": [114, 137, 153, 156, 181, 189, 199, 225, 285, 340, 591, 676, 781, 867, 986, 994, 995, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1008], "untun": 114, "joint": [114, 150, 154, 159, 165, 167, 168, 170, 180, 201, 374, 575, 616, 626, 656, 800, 801, 802, 803, 804, 865, 949, 950, 954, 958, 960, 964, 974, 993], "9026666666666666": 114, "796": 114, "sadli": 114, "183": [114, 297, 351, 954, 974, 993], "plot_gradient_boosting_quantil": [114, 974], "basic": [114, 136, 137, 142, 143, 145, 146, 149, 150, 179, 285, 312, 332, 334, 345, 347, 349, 357, 359, 373, 377, 378, 380, 575, 586, 861, 873, 874, 875, 876, 942, 943, 956, 967, 971, 972, 973, 974, 977, 985], "introductori": [114, 136, 137, 142, 143, 145, 146, 150, 207, 383, 575, 586, 974, 977], "tackl": [115, 238, 333, 345, 373, 802, 955, 977, 981], "katrina": [115, 1004], "ni": [115, 999, 1004], "nilichen": 115, "reg": [115, 153, 161, 215, 279, 288, 312, 380, 522, 524, 532, 614, 615, 617, 618, 619, 620, 621, 627, 628, 629, 634, 635, 642, 643, 653, 657, 876, 949, 998], "3044": 115, "4733": 115, "train_score_": [115, 380, 523, 524, 525, 526], "impur": [115, 156, 327, 362, 380, 382, 517, 518, 521, 522, 523, 524, 528, 529, 530, 873, 874, 875, 876, 877, 879, 969, 989, 998, 999, 1000, 1001], "feature_import": 115, "sorted_idx": [115, 287], "po": [115, 204, 381], "vert": [115, 155, 156, 287, 967], "419": [115, 320, 580, 974], "plot_gradient_boosting_regress": [115, 974], "consider": [116, 138, 141, 218, 233, 239, 245, 345, 383, 583, 762, 776, 942, 949, 955, 959, 967, 977, 1010], "make_hastie_10_2": [116, 242, 341, 380, 523, 960], "return_invers": [116, 347], "original_param": 116, "test_devi": 116, "plot_gradient_boosting_regular": [116, 974], "deform": [117, 229, 317], "notat": [117, 359, 374, 378, 381, 554, 676, 949, 953, 978, 1002, 1009], "120": [117, 202, 294, 382, 554, 993], "cluster_1": 117, "cluster_2": 117, "nuniformli": 117, "max_sampl": [117, 148, 380, 519, 520, 521, 522, 527, 528, 529, 598, 1003, 1006, 1009], "isolationforestifittedisolationforest": 117, "ax_": [117, 232, 241, 245, 247, 253, 261, 283, 287, 352, 402, 595, 661, 662, 664, 665, 666, 768, 784], "nof": 117, "477": [117, 974], "plot_isolation_forest": [117, 974], "trend": [118, 142, 154, 211, 274, 977, 1000], "xgboost": [118, 380, 972], "partialdependencedisplai": [118, 154, 219, 288, 289, 290, 292, 294, 352, 597, 960, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "f_0": 118, "f_1": [118, 245, 953], "gbdt_no_cst": [118, 288], "histgradientboostingregressorifittedhistgradientboostingregressor": [118, 292], "gbdt_with_monotonic_cst": 118, "monotonic_cst": [118, 288, 290, 294, 380, 521, 522, 525, 526, 528, 529, 873, 874, 875, 876, 1008], "line_kw": [118, 219, 240, 288, 294, 596, 768, 784], "unconstrain": [118, 154, 288, 294, 340, 967], "axes_": [118, 219, 288, 294, 352, 596], "f_idx": 118, "oscil": [118, 154, 186, 373, 404], "x_df": 118, "gbdt_with_monotonic_cst_df": 118, "plot_monotonic_constraint": [118, 974], "excel": [119, 339, 345, 380, 654, 658, 949, 977], "bernoullinb": [119, 334, 801, 802, 803, 804, 954, 955, 994, 995, 997, 1000, 1005, 1006, 1008], "truncatedsvd": [119, 202, 320, 378, 498, 499, 503, 504, 505, 656, 824, 827, 995, 1000, 1004, 1005, 1007], "hasher": [119, 321, 381], "transformed_grid": 119, "y_grid_pr": 119, "358": [119, 974], "plot_random_forest_embed": [119, 974], "multioutput": [120, 247, 257, 347, 359, 364, 396, 429, 446, 447, 448, 515, 518, 520, 521, 522, 524, 526, 528, 529, 532, 534, 575, 596, 597, 599, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 624, 625, 626, 627, 628, 629, 631, 634, 636, 637, 642, 643, 685, 686, 691, 708, 709, 711, 713, 714, 716, 748, 751, 753, 754, 786, 794, 808, 816, 823, 832, 866, 868, 871, 873, 874, 875, 876, 891, 916, 917, 953, 974, 975, 989, 993, 994, 995, 999, 1000, 1006, 1007], "multioutputregressor": [120, 364, 396, 429, 446, 447, 448, 518, 520, 522, 524, 526, 529, 532, 534, 575, 599, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 624, 625, 626, 627, 628, 629, 631, 634, 636, 637, 642, 643, 797, 799, 808, 816, 823, 866, 868, 871, 874, 876, 999, 1000, 1002, 1004, 1005, 1009, 1010], "centr": 120, "regr_multirf": 120, "regr_rf": 120, "y_multirf": 120, "y_rf": 120, "cornflowerblu": [120, 175, 184, 191, 225, 227, 230, 245, 247, 263, 269, 325, 326], "509": [120, 974], "plot_random_forest_regression_multioutput": [120, 974], "compil": [121, 258, 321, 332, 333, 345, 346, 347, 348, 353, 354, 357, 972, 993], "dean": [121, 1001, 1007, 1009], "cock": [121, 1002], "becam": [121, 360, 1001], "kaggl": [121, 358], "residenti": 121, "won": [121, 275, 320, 349, 373, 432, 460, 591, 592, 594, 651, 668, 681, 699, 700, 718, 720, 758, 952, 963, 998, 999, 1004], "load_ames_h": 121, "yrsold": 121, "heatingqc": 121, "street": [121, 135, 342], "yearremodadd": 121, "heat": [121, 307, 373, 416, 426, 659], "bsmtunfsf": 121, "mssubclass": 121, "condition2": 121, "garagetyp": 121, "overallqu": 121, "totalbsmtsf": 121, "miscfeatur": 121, "mosold": 121, "cat_selector": 121, "num_selector": 121, "besid": [121, 211, 345, 350, 553, 942, 1001], "cat_tree_processor": 121, "encoded_missing_valu": [121, 155, 839, 963, 1007, 1008], "num_tree_processor": 121, "add_ind": [121, 149, 591, 592, 594, 943, 1002, 1005, 1009], "tree_preprocessor": [121, 181], "0x7f74a822f940": 121, "0x7f74a822f640": 121, "columntransformerinot": [121, 154], "fittedcolumntransform": [121, 154], "ordinalencoderordinalencod": [121, 154, 155, 284], "cat_linear_processor": 121, "num_linear_processor": 121, "linear_preprocessor": 121, "tediou": 121, "wrote": [121, 340], "lasso_pipelin": 121, "pipelineinot": [121, 210, 220, 239, 284, 288], "fittedpipelin": [121, 210, 220, 239, 284, 288], "lassocvlassocv": 121, "rf_pipelin": 121, "randomforestregressorrandomforestregressor": [121, 124], "gbdt_pipelin": 121, "histgradientboostingregressorhistgradientboostingregressor": [121, 284], "stackingregressor": [121, 287, 359, 364, 380, 531, 943, 1003, 1004, 1005, 1006, 1007, 1010], "stacking_regressor": 121, "final_estim": [121, 287, 380, 531, 532], "unknown_v": 121, "stackingregressorinot": 121, "fittedstackingregressor": 121, "ridgecvridgecv": [121, 153], "cross_val_predict": [121, 234, 287, 364, 371, 377, 380, 401, 531, 532, 787, 788, 997, 998, 999, 1000, 1002, 1004, 1006, 1010], "scorer": [121, 199, 242, 294, 347, 359, 364, 377, 380, 382, 525, 526, 558, 566, 598, 623, 637, 639, 675, 695, 696, 705, 762, 765, 766, 768, 776, 784, 787, 788, 789, 792, 911, 942, 949, 953, 961, 973, 997, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010], "line_kwarg": [121, 665], "nevalu": 121, "plot_stack_predictor": [121, 974], "exemplari": [122, 123], "eclf": [122, 123, 380], "axarr": [122, 278], "tt": [122, 233, 429], "675": [122, 137, 149, 974], "plot_voting_decision_region": [122, 974], "class1_1": 123, "class2_1": 123, "lightgreen": [123, 187, 198], "p3": 123, "p4": 123, "nweight": 123, "plot_voting_proba": [123, 974], "votingregressor": [124, 364, 380, 533, 943, 1002, 1003, 1004, 1007, 1010], "cohort": 124, "reg1": [124, 380], "reg2": [124, 380], "reg3": [124, 380], "ereg": [124, 380], "gb": [124, 380, 517, 597], "votingregressorifittedvotingregressor": 124, "gradientboostingregressorgradientboostingregressor": 124, "linearregressionlinearregress": 124, "xt": [124, 258, 359, 409, 502, 504, 591, 593, 762, 765, 766, 776, 809, 817, 825, 830, 835, 842, 854, 883, 1009], "pred1": 124, "pred2": 124, "pred3": 124, "pred4": 124, "labelbottom": [124, 238], "plot_voting_regressor": [124, 974], "n_fold": [126, 611, 615, 617, 619, 623, 625, 627, 994, 995, 999], "scores_std": [126, 982], "semilogx": [126, 170, 251, 982], "std_error": 126, "transluc": 126, "999999999999999e": 126, "31622776601683794": 126, "answer": [126, 152, 238, 345, 357, 689, 719, 953, 976, 977], "extern": [126, 137, 334, 338, 342, 345, 347, 350, 357, 359, 370, 373, 381, 382, 383, 557, 574, 575, 681, 700, 758, 949, 952, 953, 956, 969, 973, 979, 985, 989, 1001, 1005], "lasso_cv": 126, "k_fold": [126, 982], "maximis": [126, 225, 266, 947, 956], "5f": [126, 291], "moreov": [126, 143, 280, 291, 328, 349, 373, 377, 383, 858, 923, 953, 961, 977, 1001, 1007, 1008], "substanti": [126, 260, 264, 265, 279, 345, 811, 959, 997, 1000], "05968": 126, "54209": 126, "04520": 126, "15521": 126, "07880": 126, "45192": 126, "535": [126, 974], "plot_cv_diabet": [126, 974], "aic": [126, 150, 159, 165, 167, 169, 175, 189, 229, 465, 615, 617, 618, 619, 620, 761, 826, 845, 942, 974, 993, 1000, 1006, 1007], "bic": [126, 150, 159, 165, 167, 169, 175, 189, 382, 465, 615, 617, 618, 619, 620, 761, 826, 845, 942, 952, 974, 993, 1000, 1006, 1007], "961111": 127, "933333": [127, 814], "070": [127, 974], "plot_digits_classification_exercis": [127, 974], "200j": 128, "207": [128, 276, 974, 993], "plot_iris_exercis": [128, 974], "x_2": [130, 140, 178, 378, 380, 381, 383, 577, 589, 949, 957, 963], "x_3": [130, 963], "irrelev": [130, 165, 328, 351, 375, 380, 382, 568, 703, 953], "agre": [130, 353, 360, 372, 373, 749, 978], "percept": [130, 154, 960], "correctli": [130, 134, 181, 199, 215, 245, 247, 252, 268, 285, 298, 307, 345, 354, 378, 380, 390, 401, 433, 457, 513, 514, 515, 517, 519, 521, 523, 525, 528, 531, 533, 574, 622, 630, 632, 638, 639, 640, 667, 757, 759, 793, 794, 795, 796, 800, 801, 802, 803, 804, 807, 812, 815, 822, 845, 860, 861, 865, 867, 868, 869, 870, 871, 873, 875, 903, 950, 953, 956, 957, 963, 968, 995, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "mutual_info_regress": [130, 291, 382, 556, 559, 560, 563, 564, 573, 999, 1000, 1005, 1007, 1008, 1009, 1011], "f_test": 130, "x_": [130, 138, 230, 238, 287, 347, 373, 376, 378, 591, 599, 727, 820, 860, 861, 949, 955, 960, 999], "plot_f_test_vs_mi": [130, 974], "halv": [130, 150, 231, 242, 246, 314, 368, 479, 528, 543, 762, 765, 766, 870, 974, 989, 1005], "examin": [131, 351, 353, 373, 814], "f_classif": [131, 132, 310, 382, 556, 559, 560, 562, 563, 564, 568, 570, 573], "log10": [131, 143, 153, 166, 174, 239, 307], "pvalues_": [131, 556, 559, 560, 562, 563, 564, 993], "x_indic": 131, "p_": [131, 953, 956, 969], "svm_weight": 131, "789": [131, 188, 189, 380, 974], "clf_select": 131, "svm_weights_select": 131, "get_support": [131, 135, 289, 545, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 995], "plot_feature_select": [131, 974], "anova_filt": 132, "anova_svm": 132, "selectkbestselectkbest": [132, 291], "Be": [132, 146, 319, 345, 375, 531, 532, 612, 618, 619, 620, 622, 623, 633, 644, 668, 780, 781, 840, 963, 990, 994], "75788833": 132, "27161955": 132, "26113448": 132, "plot_feature_selection_pipelin": [132, 974], "rfe": [133, 134, 364, 382, 558, 561, 566, 993, 997, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1011], "n_features_to_select": [133, 135, 289, 382, 557, 566, 1005, 1007], "ranking_": [133, 557, 558], "391": [133, 660, 974], "plot_rfe_digit": [133, 974], "introduct": [134, 199, 236, 345, 377, 378, 381, 554, 751, 752, 800, 804, 949, 951, 953, 955, 971, 979, 985, 988, 989], "class_sep": [134, 268, 479], "rfecv": [134, 364, 382, 557, 561, 566, 997, 999, 1001, 1003, 1004, 1005, 1006, 1009, 1010], "stratifiedkfold": [134, 226, 233, 244, 248, 299, 377, 401, 531, 532, 558, 566, 623, 637, 762, 763, 765, 766, 767, 768, 770, 772, 776, 780, 782, 784, 785, 786, 787, 788, 789, 790, 792, 846, 982, 994, 995, 996, 999, 1000, 1001, 1002, 1003, 1006], "min_features_to_select": [134, 558, 1001], "n_features_": [134, 557, 558, 1006, 1008], "n_score": 134, "plot_rfe_with_cross_valid": [134, 974], "selectfrommodel": [135, 359, 364, 557, 566, 567, 975, 989, 998, 999, 1000, 1001, 1003, 1005, 1006, 1007, 1009, 1010, 1011], "sequentialfeatureselector": [135, 364, 382, 557, 561, 567, 1005, 1006, 1007, 1008, 1009], "greedi": [135, 380, 382, 411, 413, 424, 523, 524, 566, 949, 969], "442": [135, 149, 342, 465, 985], "descr": [135, 338, 339, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 464, 465, 466, 467, 468, 469, 471, 474, 984, 1001], "_diabetes_dataset": 135, "mass": [135, 219, 342, 410, 760, 949, 960], "blood": [135, 209, 342, 985], "pressur": [135, 342, 985], "six": [135, 182, 202, 282, 342, 1002], "serum": [135, 342], "bmi": [135, 169, 170, 219, 342, 961], "tc": [135, 342, 360], "cholesterol": [135, 342], "ldl": [135, 342], "lipoprotein": [135, 342], "hdl": [135, 342], "s4": [135, 169, 170, 342], "tch": [135, 342], "s5": [135, 169, 170, 342, 961], "ltg": [135, 342, 465], "triglycerid": [135, 342], "s6": [135, 169, 170, 342], "glu": [135, 342], "sugar": [135, 342], "www4": [135, 342], "ncsu": [135, 342], "boo": [135, 342], "bradlei": [135, 342, 949], "efron": [135, 342, 646, 647, 949], "trevor": [135, 169, 292, 342, 592, 620, 685, 686, 687, 943, 949, 965, 997, 998, 1001, 1002, 1003, 1005], "iain": [135, 342, 949], "johnston": [135, 342, 949, 1002], "annal": [135, 165, 169, 342, 380, 438, 480, 481, 482, 523, 524, 620, 949], "407": [135, 342], "web": [135, 339, 340, 342, 345, 348, 353, 373, 381, 485, 858, 953, 963, 993], "stanford": [135, 342, 613, 646, 647, 800, 803, 804, 858, 951], "leastangle_2002": [135, 342], "pdf": [135, 238, 263, 278, 342, 345, 373, 382, 406, 413, 495, 498, 501, 505, 605, 608, 613, 622, 628, 630, 631, 635, 640, 643, 646, 647, 649, 650, 656, 802, 803, 814, 821, 858, 860, 949, 966, 969, 976, 993], "pitfal": [135, 150, 151, 152, 155, 177, 185, 186, 289, 358, 359, 362, 377, 429, 431, 460, 617, 636, 637, 665, 716, 777, 788, 791, 826, 838, 845, 949, 974, 989], "e501": [135, 319], "accept": [135, 137, 215, 235, 287, 307, 319, 321, 328, 332, 333, 339, 345, 347, 354, 357, 358, 359, 360, 364, 367, 369, 373, 381, 401, 405, 408, 409, 412, 425, 428, 431, 472, 473, 519, 520, 525, 526, 533, 534, 545, 546, 557, 558, 561, 592, 599, 603, 607, 643, 690, 705, 741, 760, 761, 765, 766, 807, 808, 815, 816, 825, 829, 883, 885, 886, 889, 949, 951, 953, 956, 961, 963, 968, 972, 973, 982, 993, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "tic": [135, 154, 218, 249, 955], "sfm": 135, "toc": [135, 218], "sf": [135, 238, 289, 340, 382, 456, 566], "backward": [135, 215, 289, 348, 359, 382, 460, 541, 566, 578, 579, 582, 583, 584, 586, 587, 878, 881, 953, 957, 973, 993, 996, 1001, 1002, 1003, 1005, 1007, 1009], "tic_fwd": 135, "sfs_forward": 135, "toc_fwd": 135, "tic_bwd": 135, "sfs_backward": 135, "toc_bwd": 135, "161": 135, "462": 135, "isn": [135, 287, 319, 321, 328, 333, 345, 353, 479, 525, 526, 558, 757, 765, 766, 838, 956, 968, 1003], "sound": [135, 328], "finish": [135, 227, 950], "expos": [135, 215, 255, 290, 292, 333, 338, 342, 359, 364, 371, 374, 380, 382, 383, 401, 428, 517, 518, 525, 526, 531, 532, 533, 534, 557, 558, 566, 575, 762, 765, 766, 776, 794, 795, 796, 797, 798, 799, 880, 921, 949, 953, 955, 982, 984, 986, 990, 993, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "breast": [135, 338, 464, 961, 989, 998], "cancer": [135, 338, 464, 557, 558, 812, 961, 989, 998], "569": [135, 299, 342, 464, 556, 559, 560, 562], "load_breast_canc": [135, 156, 299, 323, 350, 556, 559, 560, 562, 638, 639, 751, 953, 998, 999, 1004], "breast_cancer_data": 135, "_breast_cancer_dataset": 135, "wisconsin": [135, 156, 338, 464, 961, 989, 998], "diagnost": [135, 156, 241, 338, 359, 464, 676, 787, 788, 953, 961, 972, 973, 989], "radiu": [135, 253, 265, 307, 342, 373, 406, 414, 652, 727, 744, 805, 806, 807, 808, 809, 813, 815, 816, 817, 819, 956, 995, 997, 1007, 1010], "perimet": [135, 342], "textur": [135, 342, 721, 722, 951], "compact": [135, 158, 278, 332, 342, 805, 806, 969, 995], "concav": [135, 342], "symmetri": [135, 342, 663, 838, 841, 853, 951], "fractal": [135, 342], "worst": [135, 181, 284, 342, 373, 408, 411, 672, 692, 693, 746, 747, 750, 755, 756, 790, 953, 977, 993, 1006], "field": [135, 199, 342, 370, 373, 374, 381, 462, 465, 581, 949, 951, 960, 968, 972, 976, 987, 994], "se": [135, 203, 342, 363], "wdbc": [135, 342], "malign": [135, 342, 464], "benign": [135, 342, 464], "981": [135, 342, 953], "43": [135, 144, 178, 212, 238, 258, 342, 350, 762, 776, 846], "188": [135, 142, 342, 351, 548], "143": [135, 342, 435, 436, 965, 993, 994], "2501": [135, 342], "163": [135, 255, 342, 961], "019": [135, 342, 351, 435], "427": [135, 342, 470, 471, 547, 548], "106": [135, 222, 342, 841, 947, 994], "304": [135, 282, 342], "873": [135, 342], "757": [135, 236, 258, 342], "031": [135, 212, 342, 974], "008": [135, 320, 342, 351], "251": [135, 203, 342], "4254": [135, 342], "071": [135, 342, 401], "027": [135, 210, 342, 974], "058": [135, 236, 321, 342], "252": [135, 203, 242, 342, 498, 841, 853, 974], "291": [135, 320, 340, 342, 974], "156": [135, 153, 269, 342, 974], "664": [135, 342], "055": [135, 342, 953], "creator": [135, 339, 342], "william": [135, 340, 342, 383, 574, 575, 578, 583, 586, 603, 945, 953, 957, 1000, 1001, 1002, 1003, 1008, 1009], "wolberg": [135, 342], "nick": [135, 342, 993, 999, 1000, 1001, 1002], "olvi": [135, 342], "mangasarian": [135, 342], "donor": [135, 342], "novemb": [135, 181, 199, 342, 998, 999, 1001], "1995": [135, 238, 342, 371, 380, 517, 518, 795, 862, 954], "goo": [135, 342], "gl": [135, 342], "u2uwz2": [135, 342], "needl": [135, 342], "aspir": [135, 342, 345], "fna": [135, 342], "nuclei": [135, 342], "multisurfac": [135, 342], "msm": [135, 342], "bennett": [135, 342, 953], "4th": [135, 145, 342], "midwest": [135, 342], "cognit": [135, 342], "societi": [135, 342, 373, 375, 433, 438, 505, 591, 841, 853, 949, 967], "101": [135, 255, 342, 811, 994], "1992": [135, 340, 342, 377, 380, 531, 532, 609, 949], "exhaust": [135, 239, 287, 288, 289, 290, 291, 292, 293, 294, 332, 342, 350, 358, 368, 373, 380, 762, 765, 766, 776, 855, 856, 858, 949, 987, 989], "insepar": [135, 342], "uw": [135, 342, 1005], "ftp": [135, 342, 646, 647], "wisc": [135, 342, 860], "prog": [135, 342], "cpo": [135, 342], "nuclear": [135, 342], "tumor": [135, 342], "diagnosi": [135, 241, 342, 812], "spie": [135, 342], "1993": [135, 342, 438, 628, 649, 650, 969], "symposium": [135, 342, 373, 424], "technologi": [135, 342, 373, 972, 977], "1905": [135, 342], "861": [135, 342, 751, 752, 953], "870": [135, 342], "san": [135, 342, 381, 965], "jose": [135, 342, 622, 953, 1001, 1003], "ca": [135, 342, 373, 406, 873, 874, 965, 969], "prognosi": [135, 342], "577": [135, 342], "juli": [135, 342, 382, 697, 846, 963, 996, 1000, 1001, 1002], "august": [135, 342, 373, 475, 498, 968, 993, 995, 996, 1000, 1007], "diagnos": [135, 241, 342, 353, 362, 374], "letter": [135, 145, 340, 342, 349, 381, 751, 752, 768, 784, 953], "1994": [135, 340, 342, 608], "feature_selector": 135, "ntol": 135, "975": [135, 152, 968], "998": [135, 957], "667": [135, 684, 703, 953, 974], "plot_select_from_model_diabet": [135, 974], "gpr": [136, 137, 138, 144, 146, 150, 460, 574, 575, 577, 578, 579, 580, 585, 586, 587, 588, 589, 974, 975, 989, 1003], "co2": [136, 143, 144, 150, 383, 460, 575, 579, 586, 587, 589, 974, 1000], "mona": [136, 143, 144, 150, 383, 460, 575, 579, 586, 587, 589, 974], "loa": [136, 143, 144, 150, 383, 460, 575, 579, 586, 587, 589, 974], "xor": [136, 138, 139, 140, 142, 150, 191, 194, 281, 313, 574, 578, 586, 949, 969, 974, 1000], "trick": [137, 214, 268, 311, 321, 331, 334, 348, 357, 374, 546, 553, 607, 636, 945, 946, 957, 967, 968, 985, 986, 989, 994, 1002, 1010], "drastic": [137, 212, 246, 373, 377, 956, 966], "theorem": [137, 315, 372, 955], "reus": [137, 174, 239, 287, 321, 347, 359, 373, 374, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 598, 610, 612, 613, 616, 622, 624, 626, 630, 631, 632, 633, 640, 641, 642, 644, 822, 823, 961, 965, 977, 1000, 1010], "training_sample_indic": 137, "training_data": 137, "training_noisy_target": 137, "newer": [137, 344, 363, 378], "expsinesquar": [137, 142, 146, 383], "emb": [137, 202, 212, 267, 338, 339, 426, 659, 950], "kernel_ridg": [137, 214, 997], "length_scal": [137, 138, 141, 142, 143, 144, 146, 383, 576, 579, 582, 583, 585, 586, 587, 588], "tell": [137, 153, 154, 215, 238, 307, 312, 333, 340, 373, 381, 527, 543, 942, 947, 960, 987], "1e0": [137, 214, 230, 246, 942], "kernel__length_scal": 137, "kernel__period": 137, "1e1": [137, 143, 181, 214, 307], "kernel_ridge_tun": 137, "399": 137, "9915849773450223": 137, "7986499491396727": 137, "607275806426107": 137, "predictions_kr": 137, "gaussianprocessregressor": [137, 142, 143, 144, 145, 146, 383, 574, 577, 578, 579, 580, 581, 585, 588, 589, 607, 996, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "whitekernel": [137, 142, 143, 383, 575, 576, 578, 1004], "periodicity_bound": [137, 142, 146, 579], "028": [137, 236, 320], "kernel_": [137, 138, 139, 140, 141, 142, 143, 144, 146, 574, 575], "noise_level": [137, 142, 143, 576, 589], "182": [137, 276, 351, 380], "mean_predictions_gpr": 137, "std_predictions_gpr": 137, "return_std": [137, 142, 143, 144, 146, 160, 161, 359, 516, 531, 532, 575, 577, 578, 579, 580, 589, 591, 608, 609, 825, 1000, 1001, 1005, 1010], "capac": [137, 155], "length_scale_bound": [137, 143, 144, 146, 383, 575, 579, 583, 586, 587], "attenu": 137, "996": [137, 974], "plot_compare_gpr_krr": [137, 974], "arbitrarili": [138, 225, 230, 319, 359, 383, 396, 429, 446, 447, 448, 516, 518, 520, 522, 524, 526, 529, 532, 534, 575, 599, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 624, 625, 626, 627, 628, 629, 631, 633, 634, 636, 637, 642, 643, 644, 685, 686, 687, 709, 748, 752, 798, 799, 808, 816, 823, 846, 866, 868, 871, 874, 876, 953, 956, 963, 969], "lml": [138, 139, 143, 383], "exhibit": [138, 186, 311, 319, 362, 377, 378, 380, 383, 961], "steep": [138, 154, 247, 248, 373, 377, 383, 414, 420], "laplac": [138, 383, 574, 575, 800, 801, 802, 804, 955], "gp_fix": 138, "gp_opt": 138, "log_marginal_likelihood": [138, 139, 141, 143, 146, 383, 574, 575, 1003], "theta": [138, 139, 141, 143, 145, 146, 216, 378, 383, 487, 500, 574, 575, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 656, 955, 969], "landscap": 138, "theta0": 138, "theta1": 138, "pcolor": 138, "xscale": [138, 143, 214, 768], "yscale": [138, 143, 181, 214, 319, 768], "994": [138, 258, 974], "plot_gpc": [138, 974], "gpc_rbf_isotrop": 139, "gpc_rbf_anisotrop": 139, "m_max": 139, "plot_gpc_iri": [139, 974], "0256": 140, "dotproduct": [140, 141, 146, 383, 575, 589], "sigma_0": [140, 141, 146, 383, 578], "constantkernel": [140, 146, 383, 575, 581, 585, 588], "lim": [140, 498], "61611719": 140, "00099547": 140, "10469096": 140, "32782448": 140, "00000000": 140, "50000000": 140, "17289014": 140, "6984743": 140, "3109306": 140, "93271427": 140, "03823144": 140, "10584743": 140, "87600388": 140, "74310541": 140, "21301203": 140, "26386883": 140, "gp": [140, 145, 383, 574, 575, 586, 999], "cb": [140, 212, 228], "widehat": 140, "mathbf": [140, 311, 378, 949, 953, 957, 958, 967], "leq": [140, 378, 380, 949, 953, 956, 967, 968, 969], "clim": 140, "666": [140, 300, 373, 807, 943], "clabel": [140, 192], "334": 140, "plot_gpc_isoprob": [140, 974], "stationari": [141, 383, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589], "coincid": [141, 183, 383], "455": [141, 143, 284], "convergencewarn": [141, 143, 145, 146, 189, 196, 225, 274, 275, 280, 354, 359, 760, 761, 1001, 1002, 1005], "k1__constant_valu": 141, "100000": [141, 214, 224, 345, 577, 578, 579, 583, 584, 586, 587, 589, 854, 946, 985, 987], "puor_r": [141, 313], "451": [141, 610, 974], "plot_gpc_xor": [141, 974], "rw2006": [142, 383, 574, 575], "ascent": [142, 383], "monthli": [142, 360, 953], "atmospher": 142, "ppm": 142, "mauna": 142, "observatori": 142, "hawaii": 142, "1958": [142, 378, 380, 496], "air": [142, 727], "41187": 142, "flag": [142, 218, 294, 343, 345, 346, 348, 364, 369, 428, 574, 575, 591, 637, 639, 691, 748, 968, 999, 1003, 1004, 1006, 1007, 1008, 1009], "station": 142, "mlo": 142, "316": [142, 146, 575, 578, 589, 841], "317": [142, 320], "co2_data": 142, "to_datetim": 142, "timestamp": 142, "march": [142, 689, 719, 953, 993, 997, 1001, 1003, 1008], "co2_data_resampled_monthli": 142, "me": [142, 319], "nfrom": 142, "upcom": [142, 343], "to_numpi": 142, "rise": 142, "irregular": [142, 311, 373, 956], "long_term_trend_kernel": 142, "decai": [142, 508, 822, 823, 902, 953, 967, 997], "seasonal_kernel": 142, "ration": [142, 587, 951], "diffus": 142, "accommod": [142, 1001], "rationalquadrat": [142, 146, 383, 580], "irregularities_kernel": 142, "shall": 142, "phenomena": 142, "noise_kernel": 142, "noise_level_bound": [142, 143, 589], "co2_kernel": 142, "subtract": [142, 153, 218, 376, 378, 407, 411, 423, 498, 608, 609, 1000, 1010], "normalize_i": [142, 383, 575, 1007], "y_mean": [142, 143, 146, 575, 608, 609], "gaussianprocessregressorifittedgaussianprocessregressor": 142, "todai": [142, 987], "current_month": 142, "mean_y_pr": 142, "std_y_pr": 142, "536": [142, 258, 299, 974], "968": [142, 152, 236], "0367": 142, "6ppm": 142, "045": [142, 686, 974], "plot_gpr_co2": [142, 974], "target_gener": 143, "add_nois": 143, "minima": [143, 169, 378, 411, 656, 950, 986, 1001], "y_std": [143, 146, 516, 575, 608, 609, 1006], "k1__k2__length_scal": [143, 383], "noptimum": 143, "nlog": 143, "length_scale_grid": 143, "noise_level_grid": 143, "newshap": 143, "376": [143, 961, 974], "plot_gpr_noisi": [143, 974], "tikhonov": [144, 383, 636], "training_indic": 144, "n_restarts_optim": [144, 383, 574, 575], "std_predict": 144, "whenev": [144, 152, 328, 339, 353, 359, 363, 371, 446, 447, 448, 460, 592, 594, 944, 952, 973, 1003], "noise_std": 144, "y_train_noisi": 144, "450": [144, 974], "plot_gpr_noisy_target": [144, 974], "gene": [145, 339, 370, 415, 477, 557, 558, 812, 845], "among": [145, 154, 156, 158, 181, 229, 257, 327, 334, 340, 347, 359, 360, 371, 372, 376, 411, 413, 476, 483, 757, 790, 808, 813, 815, 867, 870, 873, 874, 875, 876, 942, 945, 953, 954, 960, 963, 968, 993, 999, 1000, 1003, 1010], "brighter": 145, "6th": 145, "haussler": 145, "1999": [145, 340, 371, 373, 375, 378, 380, 401, 414, 421, 433, 438, 498, 505, 519, 520, 523, 524, 686, 859, 867, 868, 870, 871, 959, 965], "646": 145, "technic": [145, 182, 202, 291, 340, 342, 345, 359, 380, 616, 628, 649, 650, 860, 949, 950, 956], "depart": [145, 373], "santa": [145, 1008], "cruz": 145, "generickernelmixin": [145, 1003], "sequencekernel": 145, "baseline_similar": 145, "baseline_similarity_bound": 145, "hyperparameter_baseline_similar": 145, "_f": [145, 949], "_g": 145, "__call__": [145, 307, 359, 381, 383, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 1000], "eval_gradi": [145, 383, 574, 575, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589], "is_stationari": [145, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589], "clone_with_theta": [145, 383, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589], "agct": 145, "agc": 145, "aact": 145, "taa": 145, "aaa": 145, "gaaca": 145, "training_idx": 145, "cga": 145, "taac": 145, "tcg": 145, "cttt": 145, "tgct": 145, "atag": 145, "ctc": 145, "445": [145, 961], "plot_gpr_on_structured_data": [145, 974], "plot_gpr_sampl": 146, "gpr_model": 146, "y_sampl": [146, 575], "sample_i": [146, 383, 575, 1007], "single_prior": 146, "pm": [146, 154, 248, 380, 953], "dev": [146, 153, 199, 243, 248, 343, 345, 349, 351, 353, 953, 977, 1000, 1005, 1008, 1009], "594": [146, 181], "279": [146, 949], "067": [146, 308, 974], "alpha_bound": [146, 587], "1e15": 146, "05e": 146, "799": [146, 320], "791": 146, "sigma_0_bound": [146, 578], "_gpr": 146, "663": [146, 859, 961, 965], "lbfg": [146, 273, 347, 612, 613, 622, 623, 633, 636, 638, 644, 651, 796, 799, 822, 823, 949, 957, 997, 998, 1000, 1001, 1006, 1007, 1008, 1010], "abnormal_termination_in_lnsrch": 146, "479": 146, "7337046907": 146, "matern": [146, 383, 1004, 1008], "609": [146, 351], "529": [146, 974], "plot_gpr_prior_posterior": [146, 974], "iterativeimput": [147, 149, 150, 364, 454, 529, 544, 592, 593, 594, 603, 609, 636, 787, 808, 826, 974, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1011], "robin": [148, 149, 591, 943, 999, 1002, 1007, 1008], "kneighborsregressor": [148, 217, 270, 291, 380, 534, 807, 813, 815, 816, 956, 993, 995, 997, 1003, 1005, 1006, 1007, 1008, 1009, 1010], "mimic": [148, 181, 319, 780], "missforest": [148, 943], "popular": [148, 205, 340, 343, 350, 353, 357, 359, 372, 379, 380, 381, 383, 416, 426, 943, 945, 949, 951, 958, 967, 973, 982, 987], "enable_iterative_imput": [148, 149, 349, 591, 943, 1002], "x_full": [148, 149, 278], "y_full": [148, 149, 278], "2k": 148, "br_estim": 148, "score_full_data": 148, "neg_mean_squared_error": [148, 149, 183, 214, 252, 294, 788, 953, 961, 999], "x_miss": [148, 149], "y_miss": [148, 149], "missing_sampl": [148, 149], "missing_featur": [148, 149], "score_simple_imput": 148, "missing_valu": [148, 149, 220, 359, 591, 592, 593, 594, 732, 943, 1001, 1002], "execut": [148, 165, 170, 214, 243, 333, 345, 351, 367, 369, 373, 378, 384, 407, 425, 762, 768, 776, 784, 786, 787, 788, 789, 792, 810, 919, 920, 963, 966, 974, 979, 987, 995, 998, 1001], "score_iterative_imput": 148, "stricter": 148, "impute_estim": 148, "__class__": [148, 181, 183, 215, 218, 240, 280, 319, 320, 321, 352], "xerr": [148, 149, 320], "914": [148, 974], "plot_iterative_imputer_variants_comparison": [148, 974], "ness": [149, 199], "auxiliari": [149, 343, 372, 977, 1008], "district": [149, 340], "neither": [149, 153, 287, 319, 328, 357, 401, 558, 592, 889, 956, 969], "feel": [149, 278, 344, 345, 353, 373, 410, 969], "x_diabet": [149, 982], "y_diabet": [149, 982], "x_california": 149, "y_california": 149, "add_missing_valu": 149, "missing_r": 149, "n_missing_sampl": 149, "x_miss_california": 149, "y_miss_california": 149, "x_miss_diabet": 149, "y_miss_diabet": 149, "knnimput": [149, 287, 591, 594, 943, 1003, 1004, 1007, 1008, 1009, 1010], "get_scores_for_imput": 149, "impute_scor": 149, "x_label": 149, "mses_california": 149, "stds_california": 149, "mses_diabet": 149, "stds_diabet": 149, "get_full_scor": 149, "full_scor": 149, "get_impute_zero_scor": 149, "fill_valu": [149, 210, 220, 288, 387, 390, 396, 397, 591, 594, 963, 1001, 1009], "zero_impute_scor": 149, "unweight": [149, 194, 427, 611, 617, 642, 671, 677, 692, 693, 701, 746, 747, 750, 751, 800, 801, 802, 803, 804, 943], "get_impute_knn_scor": 149, "knn_impute_scor": 149, "get_impute_mean": 149, "mean_impute_scor": 149, "obvious": [149, 332, 987], "get_impute_it": 149, "n_nearest_featur": [149, 591], "sample_posterior": [149, 591, 943], "iterative_impute_scor": 149, "n_bar": 149, "xval": 149, "invert_yaxi": [149, 321], "plot_missing_valu": [149, 974], "prune": [150, 322, 327, 382, 464, 521, 522, 523, 524, 528, 529, 557, 608, 791, 873, 874, 875, 876, 956, 974, 975, 989, 993, 996, 1003, 1004], "elast": [150, 159, 165, 168, 172, 192, 212, 215, 251, 372, 435, 436, 442, 465, 488, 610, 611, 616, 621, 622, 623, 624, 625, 626, 627, 632, 640, 642, 645, 648, 942, 953, 967, 974, 975, 989, 993, 998, 1002, 1003], "gram": [150, 159, 215, 347, 378, 381, 453, 488, 512, 552, 553, 554, 555, 610, 611, 614, 615, 616, 617, 618, 619, 620, 624, 625, 626, 627, 628, 629, 645, 646, 647, 648, 649, 650, 730, 942, 963, 968, 974, 987, 993, 995, 996, 997, 998, 1000, 1001, 1002, 1004, 1006, 1007], "spline": [150, 159, 160, 252, 263, 480, 481, 482, 636, 826, 840, 844, 972, 974, 1006], "ransac": [150, 159, 187, 198, 488, 613, 621, 635, 642, 643, 974], "theil": [150, 159, 184, 187, 278, 613, 621, 635, 642, 643, 974], "sen": [150, 159, 184, 187, 278, 613, 621, 635, 642, 643, 974], "tweedi": [150, 159, 181, 428, 460, 516, 612, 633, 644, 670, 687, 708, 710, 712, 713, 715, 791, 826, 829, 830, 838, 845, 949, 974, 1003, 1004, 1006], "insur": [150, 159, 181, 428, 460, 516, 612, 633, 644, 670, 708, 713, 715, 791, 826, 829, 830, 838, 845, 949, 974], "claim": [150, 159, 345, 428, 460, 516, 612, 633, 644, 670, 708, 713, 715, 791, 826, 829, 830, 838, 845, 949, 974], "failur": [150, 151, 153, 176, 345, 353, 363, 621, 748, 791, 885, 886, 974, 976, 977, 1006, 1007], "infer": [150, 151, 153, 176, 225, 229, 230, 238, 324, 339, 347, 357, 372, 377, 378, 460, 472, 473, 479, 498, 500, 502, 504, 511, 513, 514, 517, 523, 524, 596, 599, 621, 673, 686, 704, 748, 760, 761, 768, 784, 791, 801, 839, 846, 860, 861, 873, 874, 875, 876, 916, 943, 949, 952, 953, 958, 963, 966, 969, 972, 973, 974, 981, 994, 998, 999, 1004, 1007, 1010], "causal": [150, 151, 176, 621, 748, 791, 974], "hole": [150, 200, 201, 206, 494, 656, 657, 974, 1007], "perplex": [150, 200, 201, 203, 205, 258, 478, 489, 500, 656, 950, 974, 998, 1000, 1007], "set_output": [150, 154, 207, 220, 283, 284, 348, 397, 406, 407, 409, 411, 413, 428, 432, 446, 447, 448, 449, 460, 468, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 513, 530, 531, 532, 533, 534, 545, 546, 547, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 591, 592, 593, 594, 599, 602, 603, 604, 605, 606, 622, 652, 653, 656, 791, 809, 814, 817, 821, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 857, 858, 863, 974, 1008, 1009, 1010], "det": [150, 221, 231, 247, 248, 345, 375, 479, 528, 662, 666, 690, 752, 791, 826, 845, 865, 900, 974, 1005], "tsne": [150, 201, 202, 203, 205, 206, 259, 260, 291, 359, 387, 397, 460, 652, 653, 654, 809, 813, 826, 927, 950, 956, 974, 996, 998, 999, 1000, 1001, 1003, 1005, 1006, 1007, 1008, 1009, 1010], "novelti": [150, 195, 208, 218, 259, 265, 306, 811, 974, 975, 988, 989, 993, 1001], "mlp": [150, 154, 219, 272, 274, 460, 535, 791, 822, 823, 957, 974], "semi_supervis": [150, 289, 291, 295, 296, 297, 298, 299, 300, 301, 364, 954, 966, 974, 994, 999, 1000, 1007, 1008], "tie": [150, 173, 302, 357, 380, 476, 793, 870, 954, 968, 969, 974, 994, 1009], "unbalanc": [150, 241, 302, 305, 308, 377, 476, 595, 870, 890, 891, 942, 967, 974], "auto_examples_python": 150, "auto_examples_jupyt": 150, "unless": [152, 215, 225, 230, 345, 347, 348, 357, 359, 371, 373, 376, 384, 401, 408, 410, 412, 414, 416, 421, 422, 425, 428, 431, 436, 453, 460, 472, 473, 495, 499, 500, 501, 503, 506, 507, 509, 510, 511, 512, 519, 520, 521, 522, 523, 524, 527, 528, 529, 530, 531, 532, 533, 534, 558, 566, 571, 572, 574, 575, 596, 598, 603, 610, 611, 615, 616, 617, 619, 621, 622, 623, 625, 627, 629, 630, 632, 640, 643, 652, 653, 654, 655, 656, 657, 658, 673, 678, 737, 741, 744, 762, 765, 766, 768, 776, 784, 786, 787, 788, 789, 790, 792, 793, 794, 795, 797, 798, 807, 808, 811, 813, 815, 816, 818, 819, 822, 823, 824, 827, 846, 850, 851, 853, 854, 855, 856, 860, 861, 873, 874, 875, 876, 881, 885, 886, 902, 921, 949, 952, 954, 993, 995, 999, 1001, 1004, 1005, 1010], "willing": [152, 235], "econom": [152, 153, 238], "educ": [152, 153, 294, 345, 460, 680, 954], "earn": [152, 153, 360], "polici": [152, 153, 181, 199, 359, 499, 505, 949, 1008], "maker": [152, 153], "ovb": [152, 153], "parent_hourly_wag": 152, "college_degre": 152, "true_coef": [152, 165, 176], "hourly_wag": 152, "stori": [152, 238, 255, 340, 952, 1011], "pairplot": [152, 153], "diag_kind": [152, 153], "kde": [152, 153, 255, 262, 263, 271, 379, 810], "features_nam": [152, 1000], "regressor_with_": 152, "y_pred_with_": 152, "r2_with_abl": 152, "model_coef": 152, "intellectu": 152, "proxi": [152, 153, 378, 821, 982, 998], "inadvert": [152, 359], "iq": 152, "regressor_without_": 152, "y_pred_without_": 152, "r2_without_": 152, "brought": [152, 517, 518, 521, 522, 523, 524, 528, 529, 530, 873, 874, 875, 876], "unobserv": [152, 153, 378], "confound": [152, 153], "conduct": [152, 238, 383, 1007], "prohibit": [152, 377, 380, 591, 958, 966, 1000], "uneth": 152, "iv": [152, 953], "478": [152, 974], "plot_causal_interpret": [152, 974], "hint": [153, 332, 346, 350, 367, 412, 953, 985], "aris": [153, 241, 315, 333, 350, 373, 679, 949, 950, 1005], "survei": [153, 376], "1985": [153, 373, 669, 679, 749], "534": 153, "race": [153, 294, 340, 460, 996], "occup": [153, 278, 294, 460], "sector": 153, "marr": 153, "not_memb": 153, "marri": 153, "freq": [153, 165, 321], "378": [153, 380, 987, 993], "289": 153, "440": 153, "411": [153, 375, 385, 437, 497], "350": 153, "018727": 153, "822097": 153, "833333": 153, "615373": 153, "379710": 153, "726573": 153, "55": [153, 158, 176, 181, 199, 203, 297, 350, 373, 377, 455, 561, 762, 768, 776, 789, 953, 993], "thereaft": [153, 160], "hispan": 153, "manufactur": [153, 380], "unmarri": 153, "dollar": [153, 340], "exploratori": [153, 977], "emul": [153, 353], "train_dataset": [153, 339], "rangeindex": [153, 460], "533": [153, 227, 974], "normalis": [153, 575, 751, 987], "numerical_column": [153, 155, 431], "if_binari": [153, 222, 838, 963, 1004], "prepend": [153, 993], "exp10": 153, "ufunc": [153, 1010], "transformedtargetregressortransformedtargetregressor": 153, "ridgeridg": 153, "mae_train": 153, "mae_test": 153, "learnt": [153, 285, 328, 359, 377, 846, 942, 963], "obviou": [153, 311, 328, 332, 370, 378], "regressor_": [153, 429, 557, 558, 561], "race_hispan": 153, "013519": 153, "race_oth": 153, "009075": 153, "race_whit": 153, "022594": 153, "occupation_cler": 153, "000045": 153, "occupation_manag": 153, "090528": 153, "occupation_oth": 153, "025102": 153, "occupation_profession": 153, "071964": 153, "occupation_sal": 153, "046636": 153, "occupation_servic": 153, "091053": 153, "sector_construct": 153, "000198": 153, "sector_manufactur": 153, "031255": 153, "sector_oth": 153, "031025": 153, "marr_unmarri": 153, "032405": 153, "union_not_memb": 153, "117154": 153, "sex_mal": 153, "090808": 153, "south_y": 153, "033823": 153, "054699": 153, "035005": 153, "030867": 153, "adimension": 153, "Their": [153, 340, 342, 360, 373, 608, 993], "gaug": 153, "decad": [153, 973], "x_train_preprocess": 153, "multipli": [153, 185, 199, 238, 332, 354, 359, 378, 380, 381, 386, 428, 439, 479, 502, 504, 505, 511, 521, 525, 528, 610, 612, 616, 618, 622, 623, 624, 626, 632, 633, 634, 636, 640, 641, 642, 644, 650, 651, 653, 657, 727, 867, 870, 873, 875, 891, 929, 930, 931, 942, 945, 949, 953, 967, 1004], "coef_i": 153, "std_i": 153, "emphas": [153, 317, 351, 378, 953], "perturb": [153, 198, 276, 378, 380, 952], "caution": [153, 349, 404, 418, 1001], "repeatedkfold": [153, 377, 767, 778, 1000], "cv_model": 153, "stripplot": 153, "whi": [153, 155], "collinear": [153, 156, 186, 199, 380, 531, 612, 633, 644, 838, 949, 993], "teas": 153, "apart": [153, 290, 307, 357, 359, 374, 376, 382, 688, 968, 977, 1001], "vice": [153, 235, 319, 373, 383, 406, 571, 572, 794, 997], "versa": [153, 235, 319, 373, 383, 406, 571, 572, 794, 997], "column_to_drop": 153, "said": [153, 208, 239, 340, 345, 755, 951, 959, 978, 985], "unchang": [153, 199, 245, 380, 397, 401, 406, 407, 408, 409, 410, 411, 413, 428, 429, 432, 433, 434, 435, 436, 437, 438, 439, 440, 446, 447, 448, 449, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 545, 546, 547, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 574, 575, 591, 592, 593, 594, 599, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 652, 653, 654, 656, 726, 763, 764, 769, 771, 780, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 809, 810, 812, 814, 815, 816, 817, 821, 822, 823, 824, 825, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 857, 858, 860, 861, 863, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 956, 978, 1001, 1007, 1009], "neglig": [153, 956, 996, 1010], "littl": [153, 154, 155, 156, 208, 340, 381, 426, 608, 762, 776, 902, 943, 950, 952, 968, 969, 985, 994, 1005, 1010], "alon": [153, 185, 244, 307, 359, 367, 371, 612, 633, 644, 705, 1000, 1002], "suppress": [153, 332, 353, 656, 956, 1000], "themselv": [153, 278, 341, 347, 353, 359, 364, 370, 373, 380, 381, 383, 410, 579, 755, 969, 987, 1003], "bring": [153, 278, 378, 640, 642, 950, 972, 977], "entic": 153, "pursu": 153, "tempt": 153, "deflat": [153, 376, 385, 497], "presum": [153, 257, 373, 381, 800], "respond": [153, 345, 373], "320": [153, 340, 942, 967, 974, 993], "plot_linear_model_coefficient_interpret": [153, 974], "complement": [154, 248, 319, 596, 597, 764, 779, 782, 791, 800, 801, 802, 803, 804, 960, 975, 989, 1001], "molnar": [154, 960], "christoph": [154, 378, 383, 496, 574, 575, 578, 583, 586, 760, 949, 954, 994, 998, 1001, 1004, 1005, 1006, 1007, 1008], "goldstein": [154, 960], "kapeln": [154, 960], "bleich": [154, 960], "pitkin": [154, 960], "peek": [154, 345, 960], "settingwithcopywarn": 154, "2284": 154, "904": [154, 236, 300, 374], "287": [154, 965], "1747": 154, "1729": 154, "mask_train": [154, 199], "accordingli": [154, 218, 311, 345, 349, 350, 1000, 1001, 1008], "8640": 154, "115": [154, 214, 961], "nomin": [154, 339, 359, 360, 380, 381, 545, 546, 680, 963, 973], "numerical_featur": [154, 284], "xtick_start": 154, "xtick_period": 154, "average_bike_rent": 154, "numeric_onli": 154, "decor": [154, 287, 345, 346, 347, 354, 768, 784, 892, 896, 897, 914, 920, 1003, 1006, 1009], "mlp_preprocessor": 154, "quantiletransformerquantiletransform": 154, "catindex": 154, "hgbdt_preprocessor": 154, "sparse_threshold": [154, 428, 431, 1001], "mlp_model": 154, "hidden_layer_s": [154, 219, 273, 275, 822, 823, 957], "learning_rate_init": [154, 274, 275, 822, 823], "576": 154, "forget": [154, 328, 333, 339, 349, 357, 378, 950], "poor": [154, 158, 244, 253, 299, 371, 377, 378, 654, 658, 701, 802, 805, 806, 947, 948, 950, 955, 973, 978, 1000, 1001, 1002, 1004, 1006], "grid_resolut": [154, 289, 305, 595, 596, 597], "features_info": 154, "hgbdt_model": 154, "cheaper": [154, 373, 383, 637, 945, 949], "temperatur": [154, 381, 960], "wind": [154, 954], "meaningless": [154, 381, 867, 870, 996], "celsiu": [154, 960], "interaction_cst": [154, 292, 380, 525, 526, 1008], "hgbdt_model_without_interact": 154, "histgradientboostingregressor__interaction_cst": 154, "heatmap": [154, 156, 160, 165, 249, 292, 307, 596, 960], "slope": [154, 179, 183, 198, 373, 455, 686, 711, 951, 953], "dry": 154, "wetter": 154, "890": [154, 236], "spike": 154, "degrad": [154, 208, 278, 315, 320, 379, 961], "somehow": 154, "forbidden": [154, 380], "noisili": 154, "partial_depend": [154, 596, 960, 994, 1002, 1003, 1004, 1005, 1008, 1009], "grid_valu": [154, 597, 1009], "add_ax": [154, 205, 249], "surf": 154, "plot_surfac": [154, 178], "rstride": 154, "cstride": 154, "bupu": 154, "nthe": [154, 236, 327], "pretti": [154, 205, 236, 319, 332, 345, 357, 822, 823, 957, 1002], "view_init": [154, 201, 203, 205], "clb": 154, "ndepend": 154, "197": [154, 225, 974], "plot_partial_depend": [154, 287, 288, 289, 974, 998, 1002, 1003, 1004, 1005, 1006, 1007], "breiman": [155, 377, 380, 480, 481, 482, 519, 520, 528, 529, 598, 873, 874, 961, 969], "random_num": [155, 961], "random_cat": [155, 961], "sibsp": [155, 292], "parch": [155, 292], "categorical_encod": 155, "numerical_pip": 155, "memor": 155, "814": [155, 985], "mdi_import": [155, 156], "sorted_importances_idx": 155, "retri": [155, 460, 1001, 1007], "classifier__min_samples_leaf": 155, "anymor": [155, 181, 240, 287, 288, 307, 328, 349, 374, 634, 999, 1002, 1005, 1006, 1007, 1009, 1010], "810": [155, 790], "832": [155, 380, 519, 520], "train_result": 155, "test_result": 155, "train_import": 155, "test_import": 155, "858": [155, 974], "plot_permutation_import": [155, 156, 974], "contradict": [156, 973], "spearman": [156, 599, 600, 944], "perm_sorted_idx": 156, "tree_importance_sorted_idx": 156, "tree_indic": 156, "gini": [156, 181, 199, 220, 250, 289, 517, 518, 521, 522, 523, 524, 528, 529, 530, 751, 873, 874, 875, 876, 942, 961, 969, 1001, 1002, 1009, 1010], "dilut": [156, 342], "squareform": 156, "spearmanr": 156, "fill_diagon": [156, 204], "distance_matrix": 156, "dist_linkag": 156, "dendro": 156, "to_list": 156, "leaf_rot": 156, "dendro_idx": 156, "ivl": 156, "cluster_id": [156, 320], "fcluster": 156, "cluster_id_to_feature_id": 156, "selected_featur": 156, "selected_features_nam": 156, "x_train_sel": 156, "x_test_sel": 156, "clf_sel": 156, "plot_permutation_importance_multicollinear": [156, 974], "polynomialcountsketch": [158, 603, 605, 945, 1005, 1007, 1010], "covtyp": 158, "tensor": [158, 337, 369, 378, 502, 504, 511, 603, 604, 605, 989, 1005], "sketch": [158, 334, 337, 354, 372, 603, 604, 605, 918, 989, 1005], "daniel": [158, 292, 332, 846, 963, 977, 993, 994, 995, 996, 998, 999, 1000, 1001, 1003, 1005, 1007, 1010], "lopez": 158, "sanchez": [158, 1001, 1002], "lope": 158, "usal": 158, "581": 158, "cartograph": 158, "remot": [158, 297, 345, 348], "fetch_covtyp": [158, 218, 289, 340, 1002, 1005, 1007], "5_000": 158, "mm": 158, "lsvm": 158, "lsvm_time": 158, "lsvm_score": 158, "condens": [158, 410], "ps_lsvm_time": 158, "ps_lsvm_score": 158, "ksvm": 158, "ksvm_time": 158, "ksvm_score": 158, "pham": [158, 945, 1000], "ninh": 158, "rasmu": [158, 1000], "pagh": [158, 945], "kdd": [158, 340, 371, 401, 965], "doi": [158, 181, 199, 345, 373, 640], "1145": [158, 373, 640], "2487575": 158, "2487591": 158, "csie": [158, 339, 451, 472, 473, 622], "ntu": [158, 339, 451, 472, 473, 622], "tw": [158, 339, 451, 472, 473, 622, 968], "cjlin": [158, 339, 451, 472, 473, 622, 996], "libsvmtool": [158, 339, 451, 472, 473], "plot_scalable_poly_kernel": [158, 974], "ard": [160, 608, 609], "ol": [160, 171, 176, 178, 179, 187, 198, 290, 620, 949], "true_weight": 160, "ardregress": [160, 165, 609, 894, 949, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1009, 1010], "olr": 160, "brr": 160, "symlognorm": [160, 165], "linthresh": [160, 165], "10e": [160, 165], "cbar_kw": [160, 165], "seismic_r": [160, 165], "stabilis": 160, "retain": [160, 359, 373, 376, 377, 381, 401, 407, 408, 411, 413, 429, 433, 434, 435, 436, 437, 438, 439, 440, 446, 447, 448, 458, 497, 498, 502, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 545, 546, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 574, 575, 599, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 654, 659, 660, 763, 764, 769, 771, 780, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 810, 812, 815, 816, 822, 823, 825, 828, 830, 831, 832, 837, 838, 844, 845, 860, 861, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 942, 966, 993], "ard_scor": 160, "scores_": [160, 161, 556, 559, 560, 562, 563, 564, 608, 609, 623, 993, 1003], "brr_score": 160, "cutoff": [160, 907, 963, 1002], "full_data": 160, "input_featur": [160, 347, 359, 389, 394, 406, 407, 409, 411, 413, 428, 446, 447, 448, 449, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 513, 530, 531, 532, 533, 534, 545, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 591, 592, 593, 594, 599, 602, 603, 604, 605, 606, 652, 653, 656, 809, 814, 817, 821, 824, 825, 828, 829, 830, 831, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 857, 858, 1009], "x_plot": [160, 182, 187, 214, 241, 263, 283], "y_plot": [160, 182, 187, 241], "ard_poli": 160, "brr_poli": 160, "y_ard": 160, "y_ard_std": 160, "y_brr": 160, "y_brr_std": 160, "queri": [160, 261, 271, 332, 379, 384, 408, 410, 414, 421, 516, 574, 575, 592, 608, 609, 689, 719, 805, 806, 807, 808, 809, 810, 811, 813, 815, 816, 817, 953, 956, 969, 972, 976, 995, 997, 998, 1001], "lambda_init": [160, 161, 609, 949, 1003], "intrins": [160, 359, 378, 380, 956, 961, 967, 1005], "602": [160, 320, 974], "plot_ard": [160, 608, 974], "alpha_init": [161, 609, 949, 1003], "yoshihiro": [161, 1003], "uchida": [161, 1003], "nimbus1after2a1sun7show": 161, "1234": [161, 227, 241, 345], "n_order": 161, "vander": 161, "ymean": 161, "ystd": 161, "pink": 161, "_init": 161, "lambda_": [161, 608, 609, 841, 949, 1000], "266": [161, 974], "plot_bayesian_ridge_curvefit": [161, 974], "normalized_weight": 162, "x_offset": 162, "x_center": 162, "x_scale": [162, 835, 851, 963], "uncent": 162, "incorrectli": [162, 380, 381, 517, 523, 525, 697, 703, 953, 994, 999, 1001, 1002, 1004, 1009], "lm": 162, "98809919e": 162, "48938813e": 162, "03237920e": 162, "25349312e": 162, "53959628e": 162, "67451144e": 162, "00768662e": 162, "19112072e": 162, "07963978e": 162, "47987268e": 162, "76195467e": 162, "00393284e": 162, "07582983e": 162, "66670169e": 162, "65799352e": 162, "99891212e": 162, "58195950e": 162, "58667835e": 162, "98350372e": 162, "60836363e": 162, "00911944e": 162, "elasticnetifittedelasticnet": 162, "plot_elastic_net_precomputed_gram_matrix_with_weighted_sampl": [162, 974], "huber": [163, 191, 372, 380, 524, 613, 640, 642, 967, 993, 995, 996, 1005], "mks542": 163, "x_outlier": [163, 195, 264, 265, 306], "y_outlier": 163, "epsilon_valu": 163, "intercept_": [163, 171, 173, 190, 216, 305, 312, 316, 347, 359, 446, 447, 448, 513, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 865, 866, 867, 868, 869, 870, 871, 947, 949, 967, 968, 993, 1000, 1005, 1007, 1010], "coef_ridg": 163, "098": [163, 167, 974], "plot_huber_vs_ridg": [163, 974], "logreg": [164, 799], "052": [164, 501, 974], "plot_iris_logist": [164, 974], "underdetermin": 165, "time_step": [165, 823], "anti": [165, 328, 570, 800, 955], "9502547": 165, "8059798": 165, "63394388": 165, "70359377": 165, "62241605": 165, "84077985": 165, "30506066": 165, "63327171": 165, "74495357": 165, "02456369": 165, "random_sampl": [165, 805, 806, 810], "sensor": 165, "superposit": 165, "y_pred_lasso": 165, "r2_score_lasso": 165, "480": [165, 320], "y_pred_ard": 165, "r2_score_ard": 165, "elasticnetcv": [165, 359, 364, 610, 616, 624, 625, 626, 627, 645, 949, 993, 996, 1004, 1006, 1007, 1010], "enet": [165, 251], "y_pred_enet": 165, "r2_score_enet": 165, "nlasso": 165, "meinshausen": 165, "yu": [165, 373, 416, 426, 622, 949, 957, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007], "246": [165, 212, 279, 961, 974, 993], "270": [165, 297], "467": [165, 974], "plot_lasso_and_elasticnet": [165, 974], "penalis": [166, 179, 196, 660], "enet_path": [166, 359, 611, 995, 997, 1006], "lasso_path": [166, 615, 616, 617, 618, 619, 620, 627, 646, 647, 949, 993, 995, 997, 1006], "alphas_lasso": 166, "coefs_lasso": 166, "alphas_positive_lasso": 166, "coefs_positive_lasso": 166, "alphas_enet": 166, "coefs_enet": 166, "alphas_positive_enet": 166, "coefs_positive_enet": 166, "neg_log_alphas_lasso": 166, "neg_log_alphas_enet": 166, "coef_l": 166, "neg_log_alphas_positive_lasso": 166, "coef_pl": 166, "neg_log_alphas_positive_enet": 166, "coef_p": 166, "282": [166, 974, 983, 993], "plot_lasso_coordinate_descent_path": [166, 610, 611, 616, 617, 624, 625, 626, 627, 645, 648, 974], "sai": [167, 208, 315, 319, 320, 345, 371, 373, 374, 378, 380, 381, 410, 411, 464, 468, 474, 641, 942, 959, 966, 977, 984, 985, 987, 1010], "x_sp": 167, "sparse_lasso": 167, "dense_lasso": 167, "coeff_diff": 167, "2e": [167, 252], "033": [167, 961], "01e": 167, "xs_sp": 167, "tocsc": 167, "nnz": [167, 320, 340, 663], "173": [167, 351, 548], "65e": 167, "144": [167, 238, 351, 974, 993], "plot_lasso_dense_vs_sparse_data": [167, 974], "lars_path": [168, 354, 495, 501, 503, 506, 507, 509, 510, 512, 614, 615, 616, 617, 618, 619, 620, 627, 628, 629, 647, 648, 649, 650, 949, 993, 995, 998, 1002, 1004], "plot_lasso_lar": [168, 974], "zht2007": 169, "lassolars": [169, 170, 382, 615, 618, 619, 949, 993, 1000, 1002, 1006, 1007], "2173": [169, 620, 949], "2192": [169, 620, 949], "038076": [169, 170], "050680": [169, 170], "061696": [169, 170], "021872": [169, 170], "044223": [169, 170], "034821": [169, 170], "043401": [169, 170], "002592": [169, 170], "019907": [169, 170], "017646": [169, 170], "001882": [169, 170], "044642": [169, 170], "051474": [169, 170], "026328": [169, 170], "008449": [169, 170], "019163": [169, 170], "074412": [169, 170], "039493": [169, 170], "068332": [169, 170], "092204": [169, 170], "085299": [169, 170], "044451": [169, 170], "005670": [169, 170], "045599": [169, 170], "034194": [169, 170], "032356": [169, 170], "002861": [169, 170], "025930": [169, 170], "089063": [169, 170], "011595": [169, 170], "036656": [169, 170], "012191": [169, 170], "024991": [169, 170], "036038": [169, 170], "034309": [169, 170], "022688": [169, 170], "009362": [169, 170], "005383": [169, 170], "036385": [169, 170], "003935": [169, 170], "015596": [169, 170], "008142": [169, 170], "031988": [169, 170], "046641": [169, 170], "akaik": [169, 170, 229, 620, 761, 942, 949], "lasso_lars_": [169, 170], "zou_et_al_criterion_resc": 169, "noise_vari": [169, 496, 620, 949, 1007], "aic_criterion": 169, "criterion_": [169, 170, 620], "index_alpha_path_a": 169, "alphas_": [169, 170, 611, 614, 615, 617, 618, 619, 620, 625, 627, 646, 647, 993, 996, 1006], "lassolarsic__criterion": [169, 170], "bic_criterion": 169, "index_alpha_path_b": 169, "092": [169, 974], "plot_lasso_lars_": [169, 974], "n_random_featur": 170, "x_random": 170, "random_": 170, "02d": 170, "random_02": 170, "random_05": 170, "random_08": 170, "random_11": 170, "647689": 170, "234137": 170, "469474": 170, "465730": 170, "012831": 170, "412304": 170, "067528": 170, "110923": 170, "601707": 170, "057711": 170, "208864": 170, "196861": 170, "478522": 170, "057122": 170, "324084": 170, "611676": 170, "331263": 170, "185659": 170, "812526": 170, "003533": 170, "alpha_a": 170, "alpha_b": 170, "160030": 170, "5244": 170, "764779": 170, "300343": 170, "5208": 170, "250639": 170, "5212": 170, "341949": 170, "542052": 170, "4928": 170, "018900": 170, "4936": 170, "201520": 170, "034077": 170, "4869": 170, "678359": 170, "4881": [170, 998], "952289": 170, "189631": 170, "4815": 170, "437362": 170, "4831": [170, 619], "802601": 170, "329616": 170, "4810": 170, "423641": 170, "4830": 170, "880191": 170, "306012": 170, "4803": 170, "573491": 170, "4828": 170, "121351": 170, "124225": 170, "4804": 170, "126502": 170, "4832": 170, "765671": 170, "820705": 170, "621645": 170, "4836": 170, "352124": 170, "750389": 170, "4805": 170, "012521": 170, "4841": 170, "834310": 170, "570655": 170, "290075": 170, "4846": 170, "203174": 170, "550213": 170, "4807": 170, "075887": 170, "4852": 170, "080295": 170, "358295": 170, "4806": 170, "878051": 170, "4855": 170, "973770": 170, "259297": 170, "706026": 170, "4860": 170, "893055": 170, "237703": 170, "4809": [170, 241], "440409": 170, "4866": 170, "718747": 170, "850031": 170, "989341": 170, "4867": 170, "358990": 170, "384338": 170, "4801": 170, "702266": 170, "163224": 170, "296575": 170, "4802": 170, "594754": 170, "4872": 170, "147022": 170, "031555": 170, "236720": 170, "4874": 170, "880298": 170, "618263": 170, "4798": 170, "484109": 170, "4876": 170, "218997": 170, "526599": 170, "4799": 170, "543841": 170, "370039": 170, "586798": 170, "4794": 170, "238744": 170, "4880": 170, "156252": 170, "445978": 170, "4795": 170, "589715": 170, "4885": 170, "598533": 170, "259031": 170, "4796": 170, "966981": 170, "4891": 170, "067109": 170, "032179": 170, "662409": 170, "4894": 170, "853846": 170, "019069": 170, "652739": 170, "4888": 170, "752867": 170, "626286": 170, "817724": 170, "set_xscal": [170, 186, 768], "badli": [170, 181, 319, 334, 845, 949, 963], "lassolarscv": [170, 364, 382, 616, 617, 618, 620, 627, 629, 646, 647, 648, 949, 993, 1000, 1006, 1010], "3800": 170, "mse_path_": [170, 611, 615, 617, 619, 625, 627], "cv_alphas_": [170, 615, 619, 1005], "kink": 170, "heavili": [170, 332, 333, 345, 353, 613, 619, 970], "efficaci": 170, "869": [170, 974], "plot_lasso_model_select": [170, 611, 617, 974], "plot_logist": [171, 974], "axes_row": 172, "clf_l1_lr": 172, "clf_l2_lr": 172, "clf_en_lr": 172, "coef_l1_lr": 172, "coef_l2_lr": 172, "coef_en_lr": 172, "sparsity_l1_lr": 172, "sparsity_l2_lr": 172, "sparsity_en_lr": 172, "nl1_ratio": 172, "439": [172, 974], "plot_logistic_l1_l2_spars": [172, 974], "995": 173, "plot_logistic_multinomi": [173, 974], "976": [173, 246], "dupr": [173, 189, 258, 260, 998, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009], "m4x": [173, 197], "sag": [173, 188, 622, 623, 636, 638, 651, 949, 967, 972, 998, 999, 1000, 1002, 1003], "bry": [173, 190], "plot_hyperplan": [173, 190, 216], "looser": 174, "liblinear": [174, 305, 351, 622, 623, 751, 865, 866, 867, 870, 871, 949, 953, 968, 993, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1009], "l1_min_c": [174, 949, 968, 993], "intercept_sc": [174, 622, 623, 865, 866, 872, 949, 968], "coefs_": [174, 275, 822, 823, 957, 998], "plot_logistic_path": [174, 974], "jointli": [175, 245, 372, 373, 378, 949], "instant": 175, "wave": [175, 345, 952], "n_task": [175, 949], "n_relevant_featur": 175, "multitasklasso": [175, 616, 624, 627, 949, 993, 1001, 1004, 1006], "coef_lasso_": 175, "coef_multi_task_lasso_": 175, "spy": 175, "feature_to_plot": 175, "seagreen": 175, "plot_multi_task_lasso_support": [175, 974], "reg_nnl": 176, "y_pred_nnl": 176, "r2_score_nnl": 176, "nnl": [176, 621], "8225220806196525": 176, "reg_ol": 176, "y_pred_ol": 176, "r2_score_ol": 176, "7436926291700353": 176, "low_x": 176, "high_x": 176, "low_i": 176, "high_i": 176, "get_ylim": [176, 278, 279], "847222222222214": 176, "plot_nnl": [176, 974], "23786125": 177, "2548": 177, "diabetes_x": [177, 985], "diabetes_i": [177, 985], "diabetes_x_train": [177, 985], "diabetes_x_test": [177, 985], "diabetes_y_train": [177, 985], "diabetes_y_test": [177, 985], "regr": [177, 374, 518, 520, 529, 610, 611, 631, 798, 823, 866, 868, 871, 968, 985], "diabetes_y_pr": 177, "plot_ol": [177, 974], "plot_fig": 178, "fig_num": 178, "plot_ols_3d": [178, 974], "greatli": [179, 213, 292, 345, 353, 416, 956, 969, 999, 1007], "258": [179, 203, 240, 974], "plot_ols_ridge_vari": [179, 974], "make_sparse_coded_sign": [180, 495, 501, 509, 510, 1007, 1009], "orthogonalmatchingpursuit": [180, 629, 649, 650, 949, 993, 995, 998, 1001, 1006], "orthogonalmatchingpursuitcv": [180, 364, 628, 995, 1006, 1010], "n_nonzero_coef": [180, 490, 495, 501, 506, 509, 510, 512, 614, 628, 649, 650], "xw": [180, 290, 610, 611, 613, 616, 617, 618, 619, 620, 624, 625, 626, 627, 636, 645, 646, 647, 648, 949], "_0": [180, 649, 949, 953, 968], "distort": [180, 212, 342, 371, 372, 842, 854, 859, 950, 963, 965], "y_noisi": 180, "idx_r": 180, "omp_cv": 180, "plot_omp": [180, 974], "contract": [181, 199, 311, 333, 359, 973], "compani": [181, 199, 373, 977], "policyhold": [181, 199, 949], "vehicl": [181, 199], "driver": [181, 199, 1008], "exposur": [181, 199, 949], "car": 181, "accid": [181, 199], "noll": [181, 199], "salzmann": [181, 199], "wuthrich": [181, 199], "2139": [181, 199], "ssrn": [181, 199], "3164764": [181, 199], "ch": [181, 183, 199, 299, 301], "rth": [181, 199], "41214": [181, 199], "idpol": [181, 199], "claimnb": [181, 199], "vehpow": [181, 199], "vehag": [181, 199], "drivag": [181, 199], "bonusmalu": [181, 199], "vehbrand": [181, 199], "vehga": [181, 199], "b12": [181, 199], "1217": 181, "r82": 181, "77000": 181, "75000": 181, "diesel": [181, 199], "r22": 181, "09000": 181, "r72": 181, "84000": 181, "678008": 181, "6114326": 181, "00274": 181, "3317": 181, "r93": 181, "678009": 181, "6114327": 181, "9850": 181, "r11": [181, 199], "678010": 181, "6114328": 181, "1323": 181, "678011": 181, "6114329": 181, "r26": 181, "678012": 181, "6114330": 181, "678013": [181, 199], "10070308464041304": 181, "log_scale_transform": [181, 199], "linear_model_preprocessor": 181, "passthrough_numer": [181, 199], "binned_numer": [181, 199], "2e5": [181, 199], "log_scaled_numer": [181, 199], "onehot_categor": [181, 199], "imbalanc": [181, 241, 245, 247, 320, 357, 371, 377, 667, 672, 750, 763, 767, 802, 953, 955, 961, 972], "simplist": [181, 381], "pertin": 181, "dummyregressor": [181, 199, 515, 953, 994, 996, 997, 1000, 1001, 1003, 1006, 1007, 1011], "df_train": [181, 199], "df_test": [181, 199], "regressor__sample_weight": 181, "mean_poisson_devi": [181, 953, 1003], "score_estim": [181, 199], "n_mask": 181, "564": 181, "commonli": [181, 235, 311, 338, 359, 373, 374, 383, 578, 721, 722, 760, 794, 837, 950, 951, 953, 954, 956, 1009], "ridge_glm": 181, "strictli": [181, 199, 215, 278, 293, 320, 350, 359, 371, 376, 378, 381, 472, 473, 499, 505, 508, 525, 526, 552, 555, 606, 634, 635, 659, 664, 702, 729, 762, 765, 766, 772, 776, 788, 814, 841, 853, 857, 858, 860, 861, 865, 866, 870, 871, 900, 942, 944, 949, 953, 963, 967, 994, 1004, 1009], "domain": [181, 284, 359, 362, 377, 599, 685, 686, 687, 763, 764, 769, 770, 771, 949, 973], "560": [181, 481, 482], "186": [181, 276, 300, 351, 751, 953], "223745": 181, "597": [181, 239, 974], "glm": [181, 199, 288, 612, 633, 644, 949, 993, 1004], "vanilla": [181, 369, 373, 411, 413, 424, 593], "poissonregressor": [181, 199, 288, 291, 612, 644, 949, 1004, 1007, 1008], "poisson_glm": 181, "newton": [181, 199, 276, 574, 612, 622, 623, 633, 644, 822, 823, 949, 997, 998, 1000, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "deep": [181, 347, 359, 380, 387, 398, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 428, 429, 433, 434, 435, 436, 437, 438, 439, 440, 446, 447, 448, 449, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 545, 546, 547, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 574, 575, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 599, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 652, 653, 654, 655, 656, 732, 760, 761, 762, 765, 766, 776, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 821, 822, 823, 824, 825, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 857, 858, 860, 861, 862, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 957, 958, 972, 973, 977, 998, 1004, 1005, 1007], "implicit": [181, 359, 380, 381, 536, 646, 647, 947, 952, 972, 1002], "concis": [181, 345, 350, 1004, 1006], "poisson_gbrt": 181, "566": 181, "prone": [181, 226, 282, 357, 371], "5e5": 181, "realiz": [181, 977], "priori": [181, 198, 247, 257, 278, 359, 373, 380, 552, 558, 952, 1009], "wrongli": [181, 307], "gen_even_slic": [181, 354, 905], "_mean_frequency_by_risk_group": 181, "y_true_bin": 181, "y_pred_bin": 181, "idx_sort": 181, "sl": 181, "y_true_seg": 181, "y_pred_seg": 181, "11935": 181, "11933": 181, "11932": 181, "12196": 181, "11931": 181, "portfolio": [181, 199, 947], "riskiest": [181, 199], "safest": [181, 199, 328, 339], "irrespect": [181, 212, 247, 258, 570], "lorenz": [181, 199, 998, 1010], "summar": [181, 230, 245, 247, 321, 345, 347, 362, 380, 485, 622, 658, 670, 671, 949, 950, 953, 959], "lorenz_curv": [181, 199], "ranked_frequ": 181, "ranked_exposur": [181, 199], "cumulated_claim": 181, "cumulated_exposur": 181, "cum_exposur": 181, "cum_claim": [181, 199], "0x7f74a8890f10": 181, "occurr": [181, 284, 320, 321, 340, 345, 373, 381, 533, 534, 545, 553, 554, 581, 591, 592, 593, 594, 746, 800, 828, 955, 994, 999], "circumstanti": 181, "extractor": [181, 276, 334, 340, 359, 381, 467, 545, 546, 552, 553, 555, 942, 993], "discrim": 181, "profil": [181, 332, 345, 348, 485, 488, 949, 977], "ideal": [181, 183, 199, 235, 238, 245, 247, 248, 328, 344, 345, 349, 350, 353, 357, 359, 371, 689, 719, 942, 952, 967, 968, 973, 976], "meaningfulli": [181, 953], "032": [181, 974], "plot_poisson_regression_non_normal_loss": [181, 974], "monomi": 182, "vandermond": [182, 963], "x_0": [182, 621], "pseudo": [182, 276, 347, 377, 385, 404, 416, 418, 426, 433, 434, 435, 437, 438, 439, 440, 497, 525, 526, 527, 591, 598, 603, 605, 606, 610, 611, 616, 617, 624, 625, 626, 627, 641, 655, 659, 765, 766, 774, 776, 814, 821, 857, 858, 862, 865, 866, 867, 870, 901, 902, 949, 965, 998, 1007], "basis_1": 182, "basis_2": 182, "infinit": [182, 224, 241, 311, 332, 383, 410, 586, 587, 741, 760, 883, 885, 886, 945, 952, 963, 968, 1001, 1003, 1006, 1007, 1008, 1010], "malt": [182, 1006, 1007, 1008, 1010], "londschien": [182, 1006, 1010], "prepar": [182, 215, 319, 332, 347, 348, 351, 353, 969, 977, 1001, 1009], "set_prop_cycl": 182, "teal": [182, 191, 245], "yellowgreen": [182, 184, 191, 325], "tomato": 182, "unwant": [182, 319], "oscillatori": [182, 963], "danger": [182, 377], "pft": 182, "splt": 182, "bsplines_": [182, 844], "refrain": [182, 345], "dec": [182, 255, 641, 844, 869, 968], "31st": [182, 844], "x_plot_ext": 182, "y_plot_ext": 182, "420": [182, 974], "plot_polynomial_interpol": [182, 840, 844, 974], "pareto": 183, "dale": [183, 1006], "mail": [183, 283, 340, 345, 349, 353, 357, 360, 1001, 1002], "ru": 183, "glemaitre58": 183, "y_true_mean": 183, "y_normal": 183, "y_pareto": 183, "huge": [183, 186, 332, 351, 591, 996], "heavi": [183, 357, 370, 973], "parse_vers": [183, 634], "sp_version": [183, 634], "incompat": [183, 349, 460, 943, 1001, 1002], "older": [183, 215, 344, 349, 976, 991, 996, 1003, 1005], "interior": [183, 634, 949, 1008], "out_bounds_predict": 183, "bool_": 183, "logical_or": [183, 189, 247, 351], "hit": [183, 351], "asymmetri": [183, 319], "linger": 183, "linear_regress": [183, 252], "quantile_regress": 183, "y_pred_lr": 183, "y_pred_qr": 183, "805": 183, "486": 183, "670": 183, "cv_results_lr": 183, "cv_results_qr": 183, "test_neg_mean_squared_error": [183, 788], "732": 183, "690": 183, "679": [183, 865], "129": [183, 983, 993], "530": [183, 974], "plot_quantile_regress": [183, 974], "robustli": [184, 372], "faulti": [184, 993], "1903908407869": 184, "17236387": 184, "08533159": 184, "ransacregressor": [184, 187, 198, 364, 613, 642, 643, 949, 996, 998, 999, 1000, 1001, 1004, 1006, 1007], "inlier_mask": 184, "inlier_mask_": [184, 635], "outlier_mask": 184, "line_x": [184, 198], "line_i": 184, "line_y_ransac": 184, "estimator_": [184, 215, 393, 517, 518, 519, 520, 521, 522, 527, 528, 529, 530, 557, 558, 561, 635, 937, 1008], "091": [184, 974], "plot_ransac": [184, 974], "mathcal": [185, 315, 378, 380, 591, 660, 945, 947, 949, 953, 967, 1006], "discourag": [185, 357, 363, 653], "beta_": [185, 378], "excess": [185, 410, 963, 1000], "encourag": [185, 273, 307, 344, 345, 357, 968, 972], "kornel": [185, 999], "kielczewski": [185, 999], "plusnet": 185, "32634568": 185, "49665188": 185, "75747153": 185, "08699432": 185, "44381023": 185, "69892343": 185, "28808734": 185, "75949622": 185, "errors_coef": 185, "regularis": [185, 386, 437, 439], "logx": [185, 315], "gradual": [185, 822, 823, 967], "formerli": [185, 994, 997, 999, 1000], "intric": [185, 476], "rapidli": [185, 240, 968, 977, 981], "influenti": [185, 320, 977], "pose": [185, 246, 949, 986], "lose": [185, 198, 321, 340, 359, 376, 381, 383, 901, 902, 943, 949, 987], "concret": [185, 346, 360, 382, 632, 638, 639, 640, 641, 857, 858, 949, 967, 972], "plot_ridge_coeff": [185, 974], "practis": 186, "10x10": 186, "hilbert": [186, 831, 945, 963], "n_alpha": [186, 436, 610, 611, 614, 615, 616, 617, 618, 619, 620, 624, 625, 626, 627, 637, 639, 645, 646, 647, 648, 996], "plot_ridge_path": [186, 974], "theilsen": 187, "lessen": [187, 622, 623], "theilsenregressor": [187, 198, 613, 635, 642, 949, 997, 1005, 1007], "x_error": 187, "y_errors_larg": 187, "x_errors_larg": 187, "deviant": [187, 959], "legend_titl": 187, "nabsolut": 187, "nto": [187, 247], "783": [187, 974], "plot_robust_fit": [187, 974], "asgd": [188, 967], "rob": [188, 993, 994, 995, 997, 998, 999, 1000, 1001, 1005, 1008], "zinkov": [188, 993, 994, 995, 997, 998], "heldout": 188, "squared_hing": [188, 315, 630, 640, 865, 872, 949, 968], "0e4": 188, "yy_": 188, "plot_sgd_comparison": [188, 974], "_test": [189, 280, 333, 347, 1006], "ignore_warn": [189, 280, 999], "load_mnist": [189, 258], "class_0": [189, 342, 474], "class_1": [189, 342, 474], "554": [189, 197, 275], "mnist_784": [189, 197, 258, 275], "fit_and_scor": 189, "train_scor": [189, 284, 315, 323, 768, 784, 788, 789, 792, 948], "estimator_dict": 189, "flush": 189, "results_df": [189, 238, 284], "group_df": 189, "plot_sgd_early_stop": [189, 974], "ova": [190, 630, 632, 640, 967], "plot_sgd_iri": [190, 974], "ugli": [190, 266, 269, 303], "dim": [190, 212, 266, 267, 269, 303, 304, 491, 663, 1010], "modified_huber_loss": 191, "darkorchid": 191, "093": [191, 303, 320, 435, 974], "plot_sgd_loss_funct": [191, 974], "l1_color": 192, "l2_color": 192, "elastic_net_color": 192, "1001": [192, 222], "rho": [192, 378, 641, 949, 967, 994], "elastic_net": 192, "dpi": [192, 879, 1006], "elastic_net_contour": 192, "l2_contour": 192, "l1_contour": 192, "261": [192, 974], "plot_sgd_penalti": [192, 974], "ndenumer": 193, "plot_sgd_separating_hyperplan": [193, 974], "no_weight": 194, "samples_weight": 194, "no_weights_handl": 194, "weights_handl": 194, "plot_sgd_weighted_sampl": [194, 974], "sgdoneclasssvm": [195, 208, 290, 869, 959, 967, 1006, 1008, 1009, 1010], "rc": [195, 349], "novel": [195, 264, 306, 328, 371, 942], "abnorm": [195, 208, 264, 306, 340, 456, 527, 811, 959, 1001], "y_pred_train": [195, 306], "y_pred_test": [195, 264, 306], "y_pred_outli": [195, 264, 306], "n_error_train": [195, 306], "n_error_test": [195, 264, 306], "n_error_outli": [195, 264, 306], "clf_sgd": 195, "pipe_sgd": 195, "y_pred_train_sgd": 195, "y_pred_test_sgd": 195, "y_pred_outliers_sgd": 195, "n_error_train_sgd": 195, "n_error_test_sgd": 195, "n_error_outliers_sgd": 195, "pubu": [195, 212, 264, 306], "darkr": [195, 264, 306], "palevioletr": [195, 264, 306], "b1": [195, 264, 306], "b2": [195, 264, 306], "blueviolet": [195, 264, 306], "plot_sgdocsvm_vs_ocsvm": [195, 974], "newgroups20": 196, "trim": [196, 373, 805, 806], "20newsgroup": [196, 338, 993], "4500": 196, "130107": [196, 212, 453], "epoch": [196, 359, 500, 630, 631, 632, 640, 641, 642, 822, 823, 967, 1000, 1001, 1006], "5960": 196, "26593496": 196, "43348936": 196, "26362917": 196, "31973683": 196, "37815029": 196, "2928359": 196, "27054655": 196, "62717609": 196, "19522393": 196, "30897646": 196, "34586917": 196, "28207552": 196, "34125758": 196, "29898468": 196, "34279478": 196, "59489497": 196, "38353048": 196, "35278655": 196, "19829832": 196, "14603365": 196, "6440": 196, "36047253": 196, "1268187": 196, "10606655": 196, "17985197": 196, "5395559": 196, "07993421": 196, "06686804": 196, "21443888": 196, "11528972": 196, "2075215": 196, "10914094": 196, "11144673": 196, "13988486": 196, "09684337": 196, "26286057": 196, "11682692": 196, "55800226": 196, "17370318": 196, "11452112": 196, "arthur": [196, 197, 373, 411, 424, 998, 999, 1000, 1001, 1002, 1005, 1007], "mensch": [196, 197, 998, 999, 1000, 1001], "timeit": [196, 227, 351], "default_tim": [196, 227], "model_param": 196, "this_max_it": 196, "train_tim": [196, 214, 319, 320], "ndataset": [196, 280], "run_tim": [196, 197], "288": [196, 499, 505, 974], "plot_sparse_logistic_regression_20newsgroup": [196, 974], "8253": 197, "l1_plot": 197, "633": [197, 974], "plot_sparse_logistic_regression_mnist": [197, 974], "subpopul": [198, 643, 949], "residual_threshold": [198, 635, 949, 1006], "remedi": 198, "max_subpopul": [198, 643, 1007], "florian": [198, 977, 993, 997, 999, 1003, 1010], "wilhelm": [198, 997, 999, 1003], "indigo": 198, "537": [198, 974], "plot_theilsen": [198, 974], "motor": 199, "parti": [199, 255, 293, 333, 344, 357, 764, 771, 921, 993, 1004, 1009, 1010], "liabil": 199, "functool": 199, "mean_tweedie_devi": [199, 953, 1003], "load_mtpl2": 199, "fremtpl2freq": 199, "df_freq": 199, "inplac": [199, 218, 250, 418, 446, 447, 448, 449, 820, 828, 831, 834, 835, 837, 841, 842, 843, 845, 926, 929, 930, 931, 935, 936, 1002], "fremtpl2sev": 199, "41215": 199, "df_sev": 199, "claimamount": 199, "fillna": [199, 218], "unquot": 199, "column_nam": 199, "plot_obs_pr": 199, "y_label": 199, "fill_legend": 199, "df_": 199, "tweedie_pow": 199, "d\u00b2": 199, "subset_label": 199, "score_label": [199, 244], "est_freq": 199, "est_sev": 199, "unstack": [199, 241], "fremtpl2": 199, "unreason": [199, 377], "exception": 199, "200000": 199, "column_tran": [199, 374], "purepremium": 199, "indirectli": [199, 311], "avgclaimamount": 199, "fmax": 199, "option_context": 199, "max_column": 199, "414": [199, 374, 689, 719, 841, 853, 953], "424": [199, 206, 974], "27000": 199, "404": 199, "333333": 199, "r25": 199, "1981": [199, 949], "14156": 199, "142857": 199, "4792": 199, "1456": 199, "10403": 199, "928571": 199, "10834": 199, "17474": 199, "193548": 199, "225806": 199, "r73": 199, "3986": 199, "12860": [199, 1002], "5417": 199, "seemingli": [199, 328, 357], "169504": 199, "6237": 199, "upon": [199, 206, 271, 340, 345, 357, 359, 367, 525, 526, 591, 594, 635, 752, 760, 761, 805, 806, 942, 949, 969, 978, 987, 1007], "glm_freq": 199, "0448": 199, "0427": [199, 433, 438], "1379": 199, "1378": 199, "2441": 199, "2246": 199, "surprisingli": [199, 340, 381], "bonu": [199, 343, 345, 982, 987], "malu": 199, "younger": 199, "infti": [199, 383, 583, 949, 963, 1000], "gammaregressor": [199, 288, 291, 644, 949, 1004, 1007, 1008], "mask_test": 199, "glm_sev": 199, "900000e": 199, "400000e": 199, "756746e": 199, "744042e": 199, "801770e": 199, "030677e": 199, "dummy_sev": 199, "000000e": 199, "756687e": 199, "744497e": 199, "803882e": 199, "033764e": 199, "avgclaim": 199, "nbclaim": 199, "1951": 199, "1940": 199, "1978": [199, 949], "apriori": 199, "regardless": [199, 239, 240, 241, 333, 345, 373, 499, 596, 597, 622, 668, 679, 953, 965, 1001, 1008, 1009], "glm_pure_premium": 199, "999": [199, 238, 349, 380, 681, 822, 823], "scores_product_model": 199, "scores_glm_pure_premium": 199, "expand_frame_repr": 199, "640000e": 199, "370000e": 199, "669930e": 199, "617050e": 199, "640770e": 199, "640880e": 199, "7000": 199, "695740e": 199, "683980e": 199, "682880e": 199, "692270e": 199, "8000": [199, 241, 242], "046010e": 199, "040530e": 199, "037600e": 199, "045390e": 199, "9000": 199, "387580e": 199, "385000e": 199, "382120e": 199, "387830e": 199, "9900": 199, "015716e": 199, "015414e": 199, "015347e": 199, "015587e": 199, "9990": 199, "914573e": 199, "914370e": 199, "914538e": 199, "914387e": 199, "904751e": 199, "904556e": 199, "904747e": 199, "904558e": 199, "730119e": 199, "722128e": 199, "739865e": 199, "731249e": 199, "295040e": 199, "212197e": 199, "295505e": 199, "213056e": 199, "917618e": 199, "299546e": 199, "916555e": 199, "313276e": 199, "951751e": 199, "325198e": 199, "riski": 199, "operation": [199, 977], "simpler": [199, 307, 332, 344, 373, 378, 949, 954, 985, 998], "ranked_pure_premium": 199, "cumulated_claim_amount": 199, "cumulated_sampl": 199, "y_pred_product": 199, "y_pred_tot": 199, "ordered_sampl": 199, "435": [199, 974], "plot_tweedie_regression_insurance_claim": [199, 974], "md": [201, 202, 203, 204, 349, 652, 656, 658, 988, 989, 993, 1005, 1008], "seek": [201, 203, 205, 344, 345, 357, 360, 472, 473, 950, 976, 979, 981], "ticker": [201, 203, 206, 258], "s_point": 201, "s_color": 201, "make_s_curv": [201, 206], "plot_3d": 201, "points_color": 201, "subplot_kw": [201, 262], "set_major_loc": [201, 263], "multipleloc": [201, 263], "add_2d_scatt": 201, "set_major_formatt": [201, 203, 206, 258, 263], "nullformatt": [201, 203, 206, 258], "lle": [201, 202, 203, 205, 494, 653, 657, 950, 1005], "thought": [201, 263, 359, 373, 410, 950, 954], "analys": [201, 327, 378, 765, 766, 950, 972, 977], "lle_standard": 201, "s_standard": 201, "lle_ltsa": 201, "ltsa": [201, 202, 203, 653, 657, 950], "s_ltsa": 201, "lle_hessian": 201, "hessian": [201, 202, 203, 380, 612, 622, 623, 633, 644, 653, 657, 949, 957, 988, 989, 1008], "s_hessian": 201, "lle_mod": 201, "s_mod": 201, "lle_method": 201, "tangent": [201, 311, 653, 657, 951, 988, 989], "eigenmap": [201, 653, 655, 657, 659, 988, 989, 994], "isometr": [201, 652, 654, 655, 656, 950], "geodes": [201, 652, 950], "s_isomap": 201, "md_scale": 201, "normalized_stress": [201, 654, 658, 950, 1008], "s_scale": 201, "laplacian": [201, 337, 370, 404, 416, 426, 584, 603, 607, 655, 659, 728, 729, 737, 861, 949, 950, 966, 989, 994, 999], "s_spectral": 201, "t_sne": [201, 1001], "s_t_sne": 201, "935": [201, 974, 1000], "plot_compare_method": [201, 974], "offsetbox": 202, "plot_embed": 202, "shown_imag": 202, "someth": [202, 215, 255, 319, 345, 347, 348, 349, 353, 381, 953, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "4e": 202, "imagebox": 202, "annotationbbox": 202, "offsetimag": 202, "neighborhoodcomponentsanalysi": [202, 266, 267, 268, 956, 1002, 1007], "random_project": [202, 212, 965, 970, 994, 999, 1009, 1010], "sparserandomproject": [202, 212, 857, 965, 994, 999, 1007, 1009, 1010], "n_iter_without_progress": [202, 656, 998, 999], "nca": [202, 266, 267, 268, 814, 956], "plot_lle_digit": [202, 974], "pole": 203, "thin": [203, 584], "earth": [203, 320, 727, 972], "054": 203, "sphere_data": 203, "trans_data": 203, "2g": [203, 206, 661, 1004], "257": [203, 236], "377": [203, 320, 974], "plot_manifold_spher": [203, 974], "euclidean_dist": [204, 212, 347, 414, 418, 421, 652, 658, 725, 807, 808, 809, 811, 813, 815, 816, 817, 818, 819, 993, 998, 1001, 1002, 1010], "finfo": [204, 435, 436, 442, 570, 614, 615, 618, 619, 620, 646, 647, 704, 1008], "x_true": 204, "dissimilar": [204, 311, 359, 370, 416, 654, 658, 950, 999, 1009], "embedding_": [204, 359, 652, 653, 654, 655, 656], "nmd": 204, "npo": 204, "plot_md": [204, 974], "sr_point": 205, "sr_color": 205, "ambient": 205, "text2d": 205, "unrol": 205, "unnecessarili": [205, 1000, 1003], "clump": 205, "sr_lle": 205, "sr_err": 205, "locally_linear_embed": [205, 950], "sr_tsne": 205, "stretch": [205, 228], "byproduct": 205, "sh_point": 205, "sh_color": 205, "topologi": [205, 206], "sh_lle": 205, "sh_err": 205, "sh_tsne": 205, "970": [205, 974], "plot_swissrol": [205, 974], "tendenc": [206, 949, 950, 952, 955, 958], "clearer": [206, 968], "distil": 206, "pub": [206, 803, 860], "misread": 206, "narin": [206, 1000, 1001], "kokhlikyan": [206, 1000, 1001], "plot_t_sne_perplex": [206, 974], "cope": [208, 334, 340, 949], "multimod": 208, "inli": [208, 949, 959], "unimod": [208, 438], "localoutlierfactor": [208, 218, 264, 265, 291, 359, 527, 869, 959, 1000, 1001, 1003, 1007, 1008, 1009, 1010], "modal": [208, 438, 904], "hypercub": [208, 479], "decent": [208, 237, 340, 955], "handpick": 208, "absenc": [208, 241, 359, 676, 828, 952, 953], "negative_linestyl": 208, "outliers_fract": 208, "n_inlier": 208, "anomaly_algorithm": 208, "blobs_param": 208, "339": [208, 974], "plot_anomaly_comparison": [208, 974], "transfus": 209, "1464": 209, "donat": 209, "cm_displai": 209, "y_score": [209, 245, 247, 359, 446, 447, 448, 671, 684, 689, 690, 702, 703, 719, 745, 751, 752, 757, 762, 765, 766, 776, 825, 953, 999, 1007, 1009], "pos_label": [209, 218, 359, 402, 403, 662, 664, 666, 670, 671, 673, 690, 692, 693, 701, 745, 746, 747, 750, 752, 832, 849, 953, 1001, 1005, 1007, 1011], "roc_displai": 209, "previs": 209, "precision_recall_curv": [209, 245, 664, 670, 671, 690, 953, 994, 995, 999, 1006, 1007, 1009, 1011], "pr_displai": 209, "easlii": 209, "343": [209, 974], "plot_display_object_visu": [209, 974], "summaris": [210, 288], "composit": [210, 288, 337, 377, 622, 751, 943, 949, 962, 989, 994], "num_proc": [210, 288], "cat_proc": [210, 288], "feat1": [210, 288, 381], "feat3": [210, 288, 381], "feat0": [210, 288], "feat2": [210, 288, 381], "plot_estimator_represent": [210, 974], "isotonicregress": [211, 944, 994, 995, 996, 997, 999, 1001, 1002, 1003, 1005, 1007, 1008, 1009], "ir": [211, 378, 554, 689, 719, 800, 804, 951, 953], "out_of_bound": [211, 599], "y_": [211, 225, 229, 230, 270, 347, 376, 378, 601, 612, 633, 644, 692, 693, 701, 727, 746, 747, 750, 949, 953, 999], "linearregressionifittedlinearregress": 211, "x_thresholds_": [211, 599, 1005], "y_thresholds_": [211, 599, 1005], "162": [211, 319, 342, 974], "plot_isotonic_regress": [211, 974], "lemma": [212, 337, 372, 498, 505, 513, 857, 858, 859, 947, 989, 996], "johnson_lindenstrauss_min_dim": [212, 965, 994], "achliopta": [212, 858, 859, 965], "_compon": [212, 500], "geq": [212, 371, 378, 380, 949, 953, 963, 967, 968], "_sampl": [212, 378, 502, 504, 511], "admiss": [212, 333], "eps_rang": 212, "min_n_compon": 212, "nn_sampl": [212, 250], "semilogi": 212, "nn_compon": [212, 213], "100k": 212, "n_components_rang": 212, "rp": 212, "projected_data": 212, "n_byte": 212, "projected_dist": 212, "min_dist": 212, "max_dist": 212, "hexbin": 212, "gridsiz": 212, "293": 212, "859": 212, "268": [212, 225], "jl": [212, 858], "plot_johnson_lindenstrauss_bound": [212, 974], "rbfsampler": [213, 603, 604, 606, 945, 978, 997, 1007, 1008], "mont": [213, 383, 575, 605, 606, 945, 958], "fourier": [213, 372, 602, 603, 604, 605, 606, 721, 722, 945], "acceler": [213, 292, 332, 357, 369, 373, 432, 656, 863, 950, 972, 977, 1002, 1006, 1008, 1010], "data_train": [213, 239, 319], "targets_train": 213, "data_test": [213, 239, 319], "targets_test": 213, "kernel_svm": 213, "linear_svm": 213, "feature_map_fouri": 213, "feature_map_nystroem": [213, 603], "fourier_approx_svm": 213, "feature_map": [213, 278], "nystroem_approx_svm": 213, "kernel_svm_tim": 213, "kernel_svm_scor": 213, "linear_svm_tim": 213, "linear_svm_scor": 213, "fourier_scor": 213, "nystroem_scor": 213, "fourier_tim": 213, "nystroem_tim": 213, "feature_map__n_compon": 213, "timescal": 213, "ly": [213, 813, 815, 816, 817, 997], "flat_grid": 213, "lv_ep": 213, "tab10": [213, 229], "803": [213, 974], "plot_kernel_approxim": [213, 974], "krr": [214, 607, 946], "insensit": [214, 607, 640, 642, 751, 866, 946, 967, 968, 993], "fifth": [214, 946, 978], "kr": [214, 238, 1007], "svr_fit": 214, "kr_fit": 214, "sv_ratio": 214, "support_": [214, 314, 433, 438, 557, 558, 566, 867, 868, 869, 870, 871, 968], "y_svr": 214, "svr_predict": 214, "y_kr": 214, "kr_predict": 214, "09999999999999999": [214, 246, 307], "737": [214, 488], "518": 214, "340": [214, 296], "095": [214, 220, 974], "sv_ind": 214, "arithmet": [214, 351, 353, 373, 515, 612, 633, 644, 668, 681, 699, 700, 720, 758, 953, 1001], "test_tim": [214, 319], "train_test_s": 214, "learningcurvedisplai": [214, 240, 292, 948, 1008, 1009], "negate_scor": [214, 768, 784], "score_typ": [214, 240, 253, 293, 768, 784, 1009], "std_display_styl": [214, 240, 768, 784], "get_legend_handles_label": [214, 240, 245], "plot_kernel_ridge_regress": [214, 974], "set_config": [215, 220, 222, 285, 288, 294, 332, 333, 364, 374, 401, 407, 408, 411, 413, 428, 429, 432, 433, 434, 435, 436, 437, 438, 439, 440, 446, 447, 448, 497, 498, 502, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 545, 546, 552, 554, 555, 558, 561, 574, 575, 590, 591, 599, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 654, 763, 764, 769, 771, 780, 786, 787, 788, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 810, 812, 815, 816, 822, 823, 825, 828, 830, 831, 832, 837, 844, 845, 860, 861, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 1002, 1004, 1007, 1009], "metaestimatormixin": 215, "regressormixin": [215, 347, 359, 429, 1004], "transformermixin": [215, 258, 347, 359, 429, 1001, 1008, 1009, 1010], "metadata_rout": [215, 372, 401, 407, 408, 411, 413, 429, 433, 434, 435, 436, 437, 438, 439, 440, 446, 447, 448, 497, 498, 502, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 545, 546, 552, 554, 555, 558, 574, 575, 599, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 654, 763, 764, 769, 771, 780, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 810, 812, 815, 816, 822, 823, 825, 828, 830, 831, 832, 837, 844, 845, 860, 861, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876], "metadatarout": [215, 401, 428, 561, 591, 611, 615, 617, 619, 623, 625, 627, 629, 762, 765, 766, 776, 793, 794, 795, 796, 797, 798, 799, 825, 912, 1010], "methodmap": [215, 910], "get_routing_for_object": [215, 910], "process_rout": [215, 1010], "my_group": [215, 364], "my_weight": [215, 364], "my_other_weight": [215, 364], "enable_metadata_rout": [215, 294, 364, 401, 407, 408, 411, 413, 428, 429, 432, 433, 434, 435, 436, 437, 438, 439, 440, 446, 447, 448, 497, 498, 502, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 545, 546, 552, 554, 555, 558, 561, 574, 575, 591, 599, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 654, 762, 763, 764, 765, 766, 769, 771, 776, 780, 786, 787, 788, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 810, 812, 815, 816, 822, 823, 825, 828, 830, 831, 832, 837, 844, 845, 860, 861, 863, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 1009], "check_metadata": 215, "obj": [215, 367, 531, 532, 910, 911, 912, 913, 914, 919], "print_rout": 215, "get_metadata_rout": [215, 387, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 428, 429, 433, 434, 435, 436, 437, 438, 439, 440, 446, 447, 448, 449, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 545, 546, 547, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 574, 575, 591, 592, 593, 594, 599, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 652, 653, 654, 655, 656, 760, 761, 762, 763, 764, 765, 766, 767, 769, 770, 771, 772, 775, 776, 777, 778, 779, 780, 781, 782, 783, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 821, 822, 823, 824, 825, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 857, 858, 860, 861, 862, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 909, 910, 911, 912, 913, 953, 1010], "_serial": 215, "exampleclassifi": 215, "smart": [215, 407, 423, 424, 554], "accomplish": [215, 347, 371, 510, 950, 954, 956, 977, 1010], "magic": [215, 346, 351, 383, 580, 585, 588], "set_fit_request": [215, 294, 364, 401, 407, 408, 411, 413, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 552, 555, 558, 599, 607, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 644, 654, 797, 798, 800, 801, 802, 803, 804, 810, 830, 831, 844, 845, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876], "set_predict_request": [215, 407, 411, 413, 446, 447, 448, 516, 575, 599, 608, 609, 873, 874, 875, 876], "set_score_request": [215, 294, 364, 401, 407, 411, 413, 429, 433, 434, 435, 436, 437, 438, 439, 440, 446, 447, 448, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 531, 532, 533, 534, 574, 575, 599, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 642, 643, 644, 793, 794, 795, 796, 798, 799, 800, 801, 802, 803, 804, 807, 808, 812, 815, 816, 822, 823, 825, 860, 861, 865, 866, 867, 868, 870, 871, 873, 874, 875, 876, 953], "inherit": [215, 345, 347, 358, 359, 387, 541, 640, 894, 896, 949, 993, 998, 999, 1000, 1001, 1003, 1004, 1005, 1008, 1009, 1010], "metaclassifi": [215, 216], "owner": [215, 340, 342, 909, 910], "method_map": [215, 910], "fit_param": [215, 359, 397, 401, 406, 409, 429, 496, 498, 500, 501, 503, 506, 507, 513, 531, 533, 534, 546, 547, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 591, 592, 594, 599, 602, 603, 604, 605, 606, 629, 768, 784, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 809, 814, 817, 821, 824, 828, 829, 830, 831, 834, 835, 837, 838, 839, 840, 842, 843, 844, 845, 857, 858, 913, 1000, 1003, 1004, 1005, 1007, 1009, 1010], "metadatarequest": [215, 387, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 433, 434, 435, 437, 438, 439, 440, 446, 447, 448, 449, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 513, 514, 515, 516, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 545, 546, 547, 552, 553, 554, 555, 556, 559, 560, 562, 563, 564, 567, 574, 575, 592, 593, 594, 599, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 616, 618, 620, 621, 622, 624, 626, 628, 630, 631, 632, 633, 634, 636, 638, 640, 641, 642, 643, 644, 652, 653, 654, 655, 656, 760, 761, 763, 764, 767, 769, 770, 771, 772, 775, 777, 778, 779, 780, 781, 782, 783, 800, 801, 802, 803, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 821, 822, 823, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 857, 858, 860, 861, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 910, 912, 1010], "request_rout": 215, "validate_metadata": [215, 910], "routed_param": [215, 913], "route_param": [215, 910], "caller": [215, 374, 610, 611, 616, 624, 625, 626, 645, 855, 856, 910, 911, 921, 929, 930, 931, 1002], "predict_param": [215, 429, 531, 532, 1006], "object_nam": [215, 910, 913], "method_nam": [215, 910, 913], "silent": [215, 381, 545, 821, 963, 998, 999, 1001, 1002, 1006, 1007], "bug": [215, 287, 288, 289, 290, 291, 292, 293, 294, 343, 347, 348, 350, 353, 357, 359, 973, 993, 994, 995, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "notabl": [215, 278, 339, 359, 460, 691, 838, 950, 952, 956, 997, 1000, 1007], "metaclassifierifittedmetaclassifi": 215, "exampleclassifierexampleclassifi": 215, "typeerror": [215, 290, 350, 675, 889, 910, 937, 1000, 1001, 1004, 1006, 1010], "got": [215, 245, 328, 350, 515, 613, 629, 1006, 1008, 1010], "sample_weight1": 215, "sample_weight2": 215, "aliased_sample_weight": 215, "alia": [215, 346, 349, 353, 359, 401, 407, 408, 411, 413, 429, 433, 434, 435, 436, 437, 438, 439, 440, 446, 447, 448, 497, 498, 502, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 545, 546, 552, 554, 555, 558, 574, 575, 581, 599, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 654, 763, 764, 769, 771, 780, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 810, 812, 815, 816, 822, 823, 825, 828, 830, 831, 832, 837, 844, 845, 860, 861, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 927, 959, 973, 993, 1007], "calle": [215, 911], "predict_log_proba": [215, 347, 359, 513, 514, 515, 517, 519, 521, 523, 528, 557, 558, 622, 623, 640, 762, 765, 766, 776, 786, 796, 800, 801, 802, 803, 804, 822, 825, 862, 867, 870, 873, 875, 968, 993, 1006, 1010], "meta_est": 215, "routerconsumerclassifi": 215, "add_self_request": [215, 910], "self_request": 215, "clf_sample_weight": 215, "meta_clf_sample_weight": 215, "routerconsumerclassifierifittedrouterconsumerclassifi": 215, "complic": [215, 273, 351, 383, 658, 956], "simplepipelin": 215, "_required_paramet": [215, 347, 393], "transformer_": [215, 429], "child": [215, 319, 327, 333, 357, 359, 364, 373, 380, 406, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 873, 874, 875, 876, 910, 911, 913, 921, 969, 1000], "boilerpl": [215, 347, 977, 987], "exampletransform": 215, "set_transform_request": [215, 446, 447, 448, 497, 546, 552, 554, 555, 599, 828, 831, 837, 845], "metaregressor": 215, "weightedmetaregressor": 215, "__metadata_request__fit": 215, "compat": [215, 241, 258, 288, 339, 348, 354, 355, 357, 359, 363, 364, 381, 427, 433, 472, 530, 541, 549, 550, 553, 567, 578, 579, 582, 583, 584, 586, 587, 596, 597, 598, 622, 623, 637, 639, 737, 741, 763, 764, 767, 769, 770, 771, 772, 775, 777, 778, 779, 780, 781, 782, 783, 809, 810, 825, 830, 838, 839, 877, 878, 881, 916, 950, 953, 956, 958, 972, 973, 977, 989, 993, 996, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "silenc": 215, "exampleregressor": 215, "commun": [215, 338, 344, 348, 350, 353, 359, 373, 380, 502, 504, 511, 656, 674, 837, 943, 950, 956, 963, 967, 972, 976, 977, 1001, 1002], "vendor": [215, 998, 1001, 1002], "NOT": [215, 264, 342, 348, 772, 805, 806], "signatur": [215, 319, 320, 340, 452, 453, 521, 522, 528, 529, 558, 574, 575, 623, 637, 639, 675, 705, 768, 784, 787, 789, 792, 838, 913, 942, 1000, 1006, 1010], "051": [215, 320, 436, 974], "plot_metadata_rout": [215, 974], "theta_c": [216, 487], "reject": [216, 359, 360, 487, 635, 690, 885, 886, 949, 953, 1001], "likewis": [216, 373, 487], "surround": [216, 345, 811, 959], "cca": [216, 376, 447, 449, 997, 1001, 1002, 1003, 1005, 1007], "onevsrestclassifi": [216, 245, 247, 255, 364, 371, 793, 795, 865, 978, 994, 995, 997, 999, 1000, 1006, 1007, 1010, 1011], "min_x": 216, "max_x": 216, "plot_subfigur": 216, "min_i": 216, "max_i": [216, 955], "zero_class": 216, "one_class": 216, "nfor": 216, "206": [216, 974], "plot_multilabel": [216, 974], "extratreesregressor": [217, 380, 521, 529, 530, 875, 876, 996, 999, 1001, 1002, 1003, 1006, 1007, 1008, 1009, 1010], "n_face": 217, "face_id": 217, "n_pixel": [217, 236], "nn": [217, 381, 659, 985], "y_test_predict": 217, "true_fac": 217, "completed_fac": 217, "plot_multioutput_face_complet": [217, 974], "iforest": 218, "pharuj": 218, "rajborirug": 218, "ra": 218, "kmitl": 218, "ac": [218, 494, 628, 649, 650, 949, 966, 987], "robustscal": [218, 842, 855, 943, 963, 998, 999, 1001, 1003, 1004, 1005, 1009], "make_estim": 218, "iforest_kw": 218, "lof_kw": 218, "outlier_detector": [218, 395], "perf_count": 218, "negative_outlier_factor_": [218, 265, 811, 959], "expected_n_anomali": 218, "expected_anomaly_fract": 218, "kddcup": [218, 338, 456, 989], "inject": [218, 340, 380], "attack": [218, 340], "fetch_kddcup99": [218, 340, 1000, 1001, 1002, 1005, 1006], "percent10": [218, 456], "int32": [218, 258, 285, 345, 359, 407, 411, 413, 415, 417, 423, 867, 868, 869, 870, 871, 918, 968, 1002, 1008, 1009, 1010], "anomaly_frac": 218, "10065": 218, "338": 218, "protocol_typ": 218, "cat_column": 218, "wilderness_area": 218, "soil_typ": 218, "x_forestcov": 218, "14302": 218, "137": [218, 351, 994], "forestcov": 218, "usd": 218, "sqft": 218, "ames_h": 218, "div": [218, 898], "lot_area": 218, "misc_featur": 218, "add_categori": 218, "noinfo": 218, "mas_vnr_typ": 218, "2714": 218, "categorical_columns_selector": 218, "fetal": 218, "cardiotocogram": 218, "heart": 218, "fhr": 218, "minor": [218, 241, 245, 340, 348, 360, 460, 953, 993, 995, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "x_cardiotocographi": 218, "2126": 218, "datasets_nam": 218, "ceil": [218, 521, 522, 523, 524, 527, 528, 529, 530, 558, 635, 765, 766, 873, 874, 875, 876, 967], "dataset_nam": [218, 258], "model_idx": 218, "plot_chance_level": [218, 245, 247, 248, 664, 666, 1009], "chance_level_kw": [218, 664, 666, 1009], "privileg": [218, 353], "n_neighbors_list": [218, 260], "localoutlierfactor__n_neighbor": 218, "preprocessor_list": 218, "interquartil": [218, 843, 855], "iqr": [218, 843, 855], "75th": [218, 843], "squash": [218, 349, 383, 495, 501, 506, 512], "plot_outlier_detection_bench": [218, 974], "recalcul": [219, 221, 373, 990, 993], "mlpregressormlpregressor": 219, "tree_disp": 219, "mlp_disp": 219, "0x7f74b5653940": 219, "710": [219, 371, 974], "plot_partial_dependence_visualization_api": [219, 974], "deactiv": [220, 339, 346, 351, 363, 374, 765, 766, 1007], "standard_scal": 220, "polynomialfeaturespolynomialfeatur": 220, "pcapca": 220, "svcsvc": [220, 236, 238, 289], "numeric_preprocessor": 220, "imputation_mean": 220, "categorical_preprocessor": [220, 284], "imputation_const": 220, "onehot": [220, 279, 280, 374, 830, 963], "gender": [220, 838, 963], "classifier__n_estim": 220, "classifier__max_featur": 220, "classifier__max_depth": 220, "classifier__criterion": 220, "gridsearchcvinot": 220, "fittedgridsearchcv": 220, "plot_pipeline_displai": [220, 974], "svcifittedsvc": 221, "svc_disp": [221, 287, 990], "rfc_disp": [221, 287, 990], "plot_roc_curve_visualization_api": [221, 974], "transform_output": [222, 285, 432, 863, 1008, 1009], "slep018": [222, 347, 1008], "x_test_scal": 222, "894264": 222, "798301": 222, "271411": 222, "327605": 222, "244466": 222, "086944": 222, "327407": 222, "459074": 222, "660797": 222, "462234": 222, "576989": 222, "159419": 222, "933197": 222, "427329": 222, "414810": 222, "039497": 222, "275851": 222, "scaler2": 222, "x_test_np": 222, "x_test_df": 222, "feature_names_in_": [222, 285, 290, 359, 394, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 428, 429, 433, 434, 435, 436, 437, 438, 439, 440, 446, 447, 448, 449, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 574, 575, 591, 592, 593, 594, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 652, 653, 654, 655, 656, 760, 761, 762, 765, 766, 776, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 821, 822, 823, 824, 825, 828, 829, 830, 831, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 857, 858, 860, 861, 862, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 1006, 1007, 1008, 1009, 1011], "num_pip": 222, "num_col": 222, "7621951219512195": 222, "log_reg": [222, 291], "config_context": [222, 332, 333, 369, 590, 863, 1000, 1006, 1009], "reset": [222, 328, 353, 498, 640, 641, 642, 805, 806, 834, 835, 845, 995], "standardscalerifittedstandardscal": 222, "1088": 222, "151101": 222, "479229": 222, "188153": 222, "393297": 222, "263234": 222, "657": [222, 238], "975455": 222, "285": [222, 297, 687], "532843": 222, "546068": 222, "1511007": 222, "47922861": 222, "18815268": 222, "39329747": 222, "26323428": 222, "97545464": 222, "53284267": 222, "54606834": 222, "148": [222, 974, 996], "plot_set_output": [222, 974], "bayesiangaussianmixtur": [224, 225, 230, 761, 952, 999, 1001, 1002, 1006, 1007], "weight_concentration_prior_typ": [224, 230, 760, 952, 999], "dirichlet_distribut": [224, 760, 952, 999], "dirichlet_process": [224, 230, 760, 952, 999], "weight_concentration_prior": [224, 230, 760, 952], "finit": [224, 230, 332, 340, 359, 432, 502, 515, 546, 570, 573, 574, 575, 622, 691, 741, 748, 760, 786, 863, 883, 884, 885, 886, 949, 952, 953, 977, 978, 985, 1000, 1001, 1005, 1007, 1008], "covar": [224, 225, 230], "eig_val": 224, "eig_vec": 224, "unit_eig_vec": 224, "arctan2": [224, 226, 229], "56b4e9": 224, "plot_titl": 224, "weights_": [224, 760, 761, 1007], "covariances_": [224, 225, 226, 229, 230, 760, 761, 1000], "get_xaxi": [224, 268, 278], "set_tick_param": 224, "labelleft": 224, "0072b2": 224, "f0e442": 224, "d55e00": 224, "mean_precision_prior": [224, 230, 760], "nprior": 224, "gamma_0": [224, 230], "reg_covar": [224, 760, 761], "init_param": [224, 227, 230, 760, 761], "concentrations_prior": 224, "318": [224, 414, 974], "plot_concentration_prior": [224, 974], "_base": [225, 347], "color_it": [225, 229, 230], "splot": [225, 230], "dp": [225, 230], "shouldn": [225, 230, 345], "em": [225, 226, 230, 407, 411, 423, 500, 760, 761, 952, 1007], "dpgmm": [225, 230, 993, 997, 999], "plot_gmm": [225, 974], "ronweiss": 226, "make_ellips": 226, "datalim": 226, "skf": [226, 377, 781], "train_index": [226, 299, 377, 763, 764, 767, 769, 770, 771, 772, 775, 777, 778, 779, 780, 781, 782, 783], "test_index": [226, 299, 377, 763, 764, 767, 769, 770, 771, 772, 775, 777, 778, 779, 780, 781, 782, 783], "cov_typ": [226, 455], "means_init": [226, 227, 761], "y_train_pr": 226, "train_accuraci": 226, "y_test_pr": 226, "test_accuraci": [226, 239], "187": [226, 238, 351, 548, 954, 974, 985, 995], "plot_gmm_covari": [226, 974], "random_from_data": [227, 760, 761, 952], "diamond": 227, "colour": [227, 342, 381, 551, 954], "eventu": [227, 372, 373, 382, 557, 977], "walsh": [227, 1005, 1007], "timer": [227, 351], "_samples_gener": 227, "extmath": [227, 319, 354, 372, 417, 993, 994, 999, 1000, 1003, 1007, 1008, 1010], "row_norm": 227, "x_squared_norm": [227, 424], "get_initial_mean": 227, "times_init": 227, "relative_tim": 227, "ini": 227, "init_tim": 227, "2fx": 227, "plot_gmm_init": [227, 974], "shifted_gaussian": 228, "stretched_gaussian": 228, "score_sampl": [228, 263, 264, 265, 271, 359, 379, 433, 496, 505, 527, 641, 760, 761, 762, 765, 766, 776, 810, 811, 821, 825, 869, 959, 996, 1001, 1003, 1005], "116": [228, 974, 993], "plot_gmm_pdf": [228, 974], "kept": [229, 258, 315, 339, 349, 367, 383, 460, 499, 502, 504, 505, 511, 561, 574, 575, 583, 584, 608, 659, 760, 761, 886, 963, 1001, 1002], "component_1": 229, "component_2": 229, "best_parameters_": 229, "gmm_bic_scor": 229, "callabl": [229, 242, 359, 377, 380, 381, 382, 384, 385, 405, 407, 408, 409, 410, 411, 413, 414, 416, 421, 423, 424, 428, 429, 430, 431, 495, 497, 499, 501, 503, 509, 510, 521, 522, 523, 524, 525, 526, 528, 529, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 574, 575, 584, 592, 594, 598, 603, 607, 623, 630, 635, 637, 639, 652, 655, 656, 660, 675, 683, 695, 705, 734, 737, 741, 742, 743, 744, 755, 756, 762, 765, 766, 768, 776, 784, 787, 788, 789, 790, 792, 805, 806, 807, 808, 809, 811, 812, 813, 814, 815, 816, 817, 829, 838, 860, 861, 867, 868, 869, 870, 871, 914, 920, 923, 937, 942, 953, 963, 993, 997, 1000, 1001, 1002, 1003, 1005, 1007, 1009], "0x7f74b5b181f0": 229, "gaussianmixturegaussianmixtur": 229, "param_n_compon": 229, "param_covariance_typ": 229, "829429": 229, "1084": 229, "038689": 229, "1114": 229, "517272": 229, "1148": 229, "512281": 229, "1179": 229, "977890": 229, "catplot": 229, "hue": [229, 238, 283, 342], "165": [229, 954, 974], "plot_gmm_select": [229, 974], "loos": [230, 235, 968, 1001], "liberti": 230, "judgment": [230, 953], "panel": [230, 263, 278, 379, 972], "primarili": [230, 243, 345, 359, 369, 373, 911, 977, 1002, 1003], "covariance_prior": [230, 760], "406": [230, 653, 657, 950, 974], "plot_gmm_sin": [230, 974], "mislabel": [232, 380, 955], "imbal": [232, 241, 377, 671, 692, 693, 701, 746, 747, 750, 751, 953], "set_printopt": 232, "titles_opt": 232, "plot_confusion_matrix": [232, 287, 974, 1003, 1004, 1005, 1006], "groupkfold": [233, 243, 294, 364, 377, 558, 767, 768, 769, 770, 771, 780, 784, 786, 787, 788, 789, 792, 982, 999, 1006], "groupshufflesplit": [233, 377, 982, 999], "shufflesplit": [233, 240, 315, 377, 764, 770, 772, 782, 791, 982, 993, 994, 996, 998, 999], "stratifiedgroupkfold": [233, 1006], "stratifiedshufflesplit": [233, 307, 377, 982, 993, 994, 999, 1000, 1006], "1338": 233, "cmap_data": 233, "cmap_cv": 233, "coolwarm": [233, 304], "n_point": [233, 805, 806], "percentiles_class": 233, "perc": 233, "group_prior": 233, "visualize_group": 233, "yticklabel": [233, 319], "ngroup": 233, "nclass": 233, "plot_cv_indic": [233, 974], "tr": [233, 342, 349, 373, 375, 433, 434, 435, 436, 437, 438, 439, 440, 803], "_split": 233, "843": 233, "this_cv": 233, "2317": 233, "1206": 233, "plot_cv_predict": [234, 974], "fnr": [235, 662, 690], "det_curv": [235, 662, 745, 752, 953, 1005, 1006, 1011], "detcurvedisplai": [235, 290, 690, 1005, 1006, 1010, 1011], "ax_roc": 235, "ax_det": 235, "feedback": [235, 344, 345, 346, 360, 972, 976, 1001], "aid": [235, 373, 755, 756, 950, 977, 993, 1005], "plot_det": [235, 974], "n_imag": 236, "print_datafram": 236, "filtered_cv_result": 236, "mean_precis": 236, "std_precis": 236, "mean_recal": 236, "std_recal": 236, "mean_test_precis": [236, 242], "std_test_precis": 236, "mean_test_recal": 236, "std_test_recal": 236, "03f": 236, "refit_strategi": 236, "best_index": [236, 242], "precision_threshold": 236, "high_precision_cv_result": 236, "rank_test_recal": 236, "rank_test_precis": [236, 242], "best_recall_std": 236, "best_recal": 236, "best_recall_threshold": 236, "high_recall_cv_result": 236, "fastest_top_recall_high_precision_index": 236, "idxmin": 236, "854": 236, "061": 236, "069": [236, 312, 974], "039": [236, 320, 714, 744, 953], "780": 236, "083": 236, "905": [236, 273, 974], "889": [236, 401], "074": 236, "073": [236, 435, 436], "695": [236, 257, 974], "743": [236, 985], "065": [236, 351], "066": [236, 612], "611": [236, 238, 505], "744": [236, 258], "618": 236, "004884": 236, "877206": 236, "069196": 236, "0x7f74b53ced30": 236, "807": [236, 238], "313": [236, 974, 985], "plot_grid_search_digit": [236, 974], "minimis": [237, 373, 377, 622, 623, 969], "219": 237, "260": [237, 1006], "york": [237, 751, 760, 943, 953, 965], "usa": [237, 340, 862, 943, 950, 965, 966], "best_index_": [237, 242, 762, 765, 766, 776], "wenhao": [237, 1001, 1002], "zhang": [237, 373, 406, 628, 643, 649, 650, 653, 657, 721, 722, 949, 950, 951, 955, 967, 997, 998, 1000, 1001, 1002, 1003, 1005, 1009, 1010], "wenhaoz": 237, "ucla": [237, 949], "lower_bound": 237, "best_score_idx": 237, "best_low_complex": 237, "fewest": [237, 591], "candidate_idx": 237, "param_reduce_dim__n_compon": 237, "441": [237, 300, 320, 974], "plot_grid_search_refit_cal": [237, 974], "moon": [238, 274, 280, 319, 320, 486], "moder": [238, 345, 383, 418, 959], "352": [238, 351], "repeatedstratifiedkfold": [238, 255, 377, 777, 781, 1000], "repetit": [238, 255, 350, 377, 777, 778, 961, 1007], "rank_test_scor": [238, 246, 762, 776, 999], "rename_axi": 238, "9400": 238, "079297": 238, "9300": 238, "077846": 238, "3_poli": 238, "9044": [238, 1000], "098776": 238, "2_poli": 238, "6852": 238, "169106": 238, "certainti": [238, 347, 705, 953], "repreat": 238, "model_scor": [238, 257], "regex": [238, 321, 428, 430], "_test_scor": [238, 436, 558, 1006], "lineplot": 238, "set1": [238, 267, 268], "labelpad": 238, "882561": 238, "783392": 238, "351390": 238, "746492": 238, "298688": 238, "355440": 238, "nadeau": [238, 1001], "bengio": [238, 822, 823, 942, 966], "framework": [238, 332, 347, 357, 359, 367, 373, 601, 652, 760, 949, 950, 957, 973, 977, 993, 999], "diebold": 238, "mariano": 238, "proven": [238, 947, 951, 977], "replic": [238, 344, 347], "cdot": [238, 311, 370, 373, 378, 379, 383, 578, 579, 583, 586, 587, 831, 945, 947, 953, 957, 963], "sum_": [238, 247, 315, 370, 371, 373, 378, 379, 380, 502, 504, 511, 660, 718, 947, 949, 950, 953, 955, 957, 958, 960, 961, 963, 967, 968, 969], "ij": [238, 268, 370, 373, 378, 502, 504, 511, 610, 611, 616, 617, 624, 625, 626, 627, 645, 648, 949, 950, 953, 955, 958, 963, 968], "corrected_std": 238, "crossvalid": [238, 252], "corrected_var": 238, "ddof": [238, 845, 856], "compute_corrected_ttest": 238, "t_stat": 238, "p_val": 238, "model_1_scor": 238, "model_2_scor": 238, "ncorrect": 238, "uncorrect": [238, 559, 562], "t_stat_uncorrect": 238, "p_val_uncorrect": 238, "benavoli": 238, "colleagu": 238, "conjug": [238, 416, 426, 636, 638, 651, 659, 949], "overlin": [238, 370], "t_post": 238, "ppf": 238, "infin": [238, 315, 505, 646, 647, 676, 786, 872, 884, 956], "minu": [238, 723, 953], "better_prob": 238, "cdf": 238, "773": [238, 612, 803], "essenti": [238, 292, 343, 347, 373, 377, 378, 473, 953, 956, 973, 977, 1001], "rope": 238, "rope_interv": 238, "rope_prob": 238, "432": [238, 375], "x_rope": 238, "uncertain": [238, 297, 344], "credibl": 238, "cred_interv": 238, "cred_int_df": 238, "000977": 238, "019023": 238, "005422": 238, "025422": 238, "016445": 238, "036445": 238, "bonferroni": 238, "n_comparison": 238, "pairwise_t_test": 238, "model_i": 238, "model_k": 238, "model_i_scor": 238, "model_k_scor": 238, "pairwise_comp_df": 238, "model_1": 238, "model_2": 238, "302": [238, 591], "565": 238, "851": 238, "pairwise_bayesian": 238, "worse_prob": 238, "pairwise_bayesian_df": 238, "dietterich": [238, 795, 954], "1998": [238, 340, 342, 378, 380, 519, 520, 795, 800, 831, 954, 955, 957, 963, 967], "bouckaert": 238, "frank": [238, 796, 954, 998, 1002, 1003], "pacif": 238, "asia": [238, 963], "confer": [238, 340, 373, 378, 384, 403, 408, 414, 475, 499, 527, 660, 672, 689, 719, 821, 822, 823, 953, 959, 965, 969], "discoveri": [238, 340, 351, 354, 373, 380, 382, 384, 408, 475, 519, 520, 527, 556, 559, 560, 562, 563, 564, 570, 684, 703, 746, 953, 965, 977, 1007, 1008], "corani": 238, "dem\u0161ar": 238, "zaffalon": 238, "accompani": [238, 1001], "plot_grid_search_stat": [238, 974], "loader": [239, 300, 319, 338, 339, 340, 462, 463, 472, 973, 987, 993, 998, 1000, 1001, 1004], "857": [239, 320], "complementnb": [239, 319, 800, 801, 803, 804, 955, 1001, 1005, 1006, 1008], "tfidfvectorizertfidfvector": 239, "complementnbcomplementnb": 239, "vect__": 239, "clf__": 239, "parameter_grid": 239, "vect__max_df": 239, "vect__min_df": 239, "vect__ngram_rang": [239, 987], "unigram": [239, 340, 381, 552, 553, 555, 1000], "bigram": [239, 381, 552, 553, 555, 987], "vect__norm": 239, "clf__alpha": [239, 987], "parallelis": [239, 432, 863, 1000], "random_search": [239, 246], "best_paramet": 239, "get_param": [239, 348, 359, 383, 387, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 428, 429, 433, 434, 435, 436, 437, 438, 439, 440, 446, 447, 448, 449, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 545, 546, 547, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 599, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 652, 653, 654, 655, 656, 760, 761, 762, 765, 766, 776, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 821, 822, 823, 824, 825, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 857, 858, 860, 861, 862, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 942, 1003, 1004, 1005, 1007, 1008], "816": [239, 435, 436], "709": 239, "ambigu": [239, 350, 381, 536, 676, 902, 956, 1002, 1004, 1006], "shorten_param": 239, "xanchor": 239, "yanchor": 239, "autom": [239, 349, 363, 656, 942, 949, 950, 953, 972, 977], "parallel_coordin": 239, "understood": [239, 345, 373, 910, 984], "column_result": 239, "transform_func": 239, "fromkei": [239, 880], "ngram_rang": [239, 300, 381, 552, 553, 555], "color_continuous_scal": 239, "viridis_r": 239, "slide": [239, 608, 949, 971, 972], "intersect": [239, 304, 370, 373, 701], "undo": [239, 835, 997], "stronger": [239, 607, 616, 622, 623, 636, 637, 638, 639, 640, 642, 651], "plot_grid_search_text_feature_extract": [239, 974], "ax_idx": 240, "resort": [240, 340, 519, 1003], "learning_curv": [240, 292, 364, 768, 948, 996, 999, 1000, 1001, 1002, 1003, 1005, 1007, 1008, 1010], "return_tim": [240, 789, 1003], "test_scores_nb": 240, "fit_times_nb": 240, "score_times_nb": 240, "test_scores_svm": 240, "fit_times_svm": 240, "score_times_svm": 240, "score_tim": [240, 377, 788, 789], "inflect": 240, "plot_learning_curv": [240, 974], "class_likelihood_ratio": [241, 953, 1008], "medicin": [241, 676, 953], "medic": [241, 377, 676, 949, 977], "truli": [241, 245, 334, 676, 953], "odd": [241, 380, 478, 676, 953, 1000, 1001], "suppos": [241, 296, 332, 333, 347, 351, 375, 380, 381, 382, 521, 525, 528, 622, 623, 630, 632, 638, 639, 640, 705, 811, 865, 867, 870, 873, 875, 891, 957, 1002, 1004, 1010], "physiolog": [241, 342, 985], "hopefulli": [241, 353, 993], "indirect": [241, 346, 359], "bio": 241, "pos_lr": 241, "neg_lr": 241, "raise_warn": [241, 676, 939], "positive_likelihood_ratio": [241, 676], "negative_likelihood_ratio": [241, 676], "extract_scor": 241, "test_positive_likelihood_ratio": 241, "test_negative_likelihood_ratio": 241, "661086": 241, "724702": 241, "383973": 241, "054045": 241, "108843": 241, "986989": 241, "268147": 241, "034278": 241, "most_frequ": [241, 515, 591, 594, 815, 943, 953, 1001, 1003, 1005], "373333": 241, "5557": 241, "235430": 241, "stand": [241, 321, 349, 357, 378, 495, 501, 509, 510, 560, 573, 642, 669, 681, 699, 700, 720, 749, 751, 758, 952, 953, 959], "lr_base": 241, "pos_lr_bas": 241, "pos_lr_base_std": 241, "neg_lr_bas": 241, "neg_lr_base_std": 241, "plot_indic": 241, "scoring_on_bootstrap": 241, "n_bootstrap": [241, 994], "results_for_preval": 241, "bootstrap_indic": 241, "default_rng": 241, "2039": 241, "507943": 241, "113516": 241, "207667": 241, "009778": 241, "3419": 241, "443238": 241, "125140": 241, "198766": 241, "008915": 241, "421087": 241, "123828": 241, "192913": 241, "006360": 241, "6196": [241, 998], "409717": 241, "164009": 241, "193949": 241, "005861": 241, "7578": [241, 1000], "334795": 241, "175298": 241, "189267": 241, "005840": 241, "8963": 241, "197666": 241, "238955": 241, "185654": 241, "005027": 241, "plot_likelihood_ratio": [241, 974], "scorer_nam": [242, 762, 776], "rvraghav93": [242, 278], "predefin": [242, 775, 942, 956, 982, 1008, 1010], "403": [242, 320], "402": 242, "maskedarrai": [242, 999], "param_min_samples_split": 242, "sample_score_mean": 242, "sample_score_std": 242, "std_": [242, 998], "rank_test_": 242, "best_scor": 242, "mean_test_": 242, "plot_multi_metric_evalu": [242, 974], "cawlei": [243, 953], "talbot": 243, "mach": [243, 371, 377, 557, 558], "2079": 243, "2107": 243, "007581": 243, "007833": 243, "num_trial": 243, "x_iri": [243, 986], "y_iri": [243, 986], "p_grid": 243, "non_nested_scor": 243, "nested_scor": 243, "leaveoneout": [243, 377, 982], "leaveonegroupout": [243, 377, 763, 770, 771, 982, 999], "inner_cv": [243, 294], "outer_cv": [243, 294], "non_nest": 243, "score_differ": 243, "211": [243, 292, 299, 320, 841, 853], "non_nested_scores_lin": 243, "nested_lin": 243, "difference_plot": 243, "plot_nested_cross_validation_iri": [243, 974], "permutation_test_scor": [244, 364, 377, 993, 1000, 1005], "plant": [244, 247, 248, 338, 953, 989], "uncorrel": [244, 341, 492, 498, 505, 953, 985], "n_uncorrelated_featur": 244, "x_rand": 244, "undergo": 244, "score_iri": 244, "perm_scores_iri": 244, "pvalue_iri": 244, "n_permut": [244, 377, 790], "score_rand": 244, "perm_scores_rand": 244, "pvalue_rand": 244, "evid": [244, 319, 353, 373, 377, 378, 380, 608, 760, 952], "ndata": 244, "destroi": [244, 381, 758, 834, 963], "ojala": [244, 377, 790], "garriga": [244, 377, 790], "plot_permutation_tests_for_classif": [244, 974], "t_p": 245, "plu": [245, 342, 350, 643, 796, 799, 954, 967], "f_p": 245, "f_n": 245, "2t_p": 245, "denomin": [245, 381, 386, 439, 554, 668, 720, 947], "stairstep": 245, "ap": [245, 671, 672, 953], "sum_n": [245, 671, 953], "r_n": [245, 671, 953], "p_n": [245, 671, 953], "nth": [245, 671, 953], "r_k": 245, "p_k": [245, 953], "trapezoid": [245, 670, 671, 953], "binar": [245, 247, 248, 337, 339, 372, 717, 800, 829, 830, 832, 836, 838, 846, 849, 953, 955, 978, 989, 1007, 1009], "average_precision_scor": [245, 664, 670, 672, 745, 751, 953, 993, 996, 1000, 1001, 1007, 1009], "mt19937": [245, 250, 888, 1004], "0x7f74b655f440": 245, "precisionrecalldisplai": [245, 290, 745, 747, 750, 953, 1003, 1006, 1009, 1010, 1011], "label_binar": [245, 247, 832, 997], "average_precis": [245, 664, 671, 705, 953], "prevalence_pos_label": [245, 664], "setup": [245, 247, 332, 343, 347, 351, 353, 956, 979], "f_score": 245, "extens": [245, 247, 263, 332, 333, 339, 340, 343, 346, 348, 349, 353, 354, 357, 367, 373, 378, 460, 467, 498, 704, 896, 904, 950, 952, 953, 971, 972, 977, 993, 999, 1006, 1007, 1009, 1010], "382": [245, 974], "plot_precision_recal": [245, 974], "deem": [246, 247, 498, 961, 1006], "991": [246, 953], "05063247886572012": 246, "13822072286080167": 246, "987": [246, 320], "010877306503748912": 246, "9226260871125187": 246, "7271482064048191": 246, "25183501383331797": 246, "993": [246, 320], "1111111111111111": 246, "5555555555555556": 246, "n_top": 246, "param_dist": [246, 250, 289], "n_iter_search": 246, "plot_randomized_search": [246, 974], "unambigu": [247, 954, 999], "notion": [247, 311, 320, 334, 357, 373, 378, 380, 949, 953], "scheme": [247, 263, 284, 285, 340, 359, 373, 377, 379, 381, 530, 554, 622, 623, 669, 775, 832, 833, 836, 838, 842, 846, 849, 854, 865, 870, 942, 949, 963, 967, 993, 1001, 1004, 1005, 1010], "harder": [247, 248, 282, 340, 344, 347, 353, 357, 373, 479, 525, 526], "bulk": [247, 384, 408], "scrutin": 247, "labelbinar": [247, 359, 704, 794, 829, 838, 846, 849, 954, 978, 996, 997, 998, 1002, 1007], "y_onehot_test": 247, "class_id": [247, 248], "nvirginica": 247, "tp_c": 247, "fn_c": 247, "fp_c": 247, "tn_c": 247, "briefli": [247, 344, 358, 380, 942, 1003], "nreceiv": 247, "micro_roc_auc_ovr": 247, "mcclish": [247, 751], "deci": 247, "1989": [247, 599, 751, 822, 823, 949, 956], "jul": 247, "fpr_grid": 247, "mean_tpr": [247, 248], "interp": [247, 248, 307], "macro_roc_auc_ovr": 247, "deeppink": 247, "aqua": 247, "role": [247, 332, 344, 378], "pair_list": 247, "pair_scor": 247, "label_a": 247, "label_b": 247, "a_mask": 247, "b_mask": 247, "ab_mask": 247, "a_tru": 247, "b_true": 247, "idx_a": 247, "idx_b": 247, "fpr_a": 247, "tpr_a": 247, "fpr_b": 247, "tpr_b": 247, "macro_roc_auc_ovo": 247, "ovo_tpr": 247, "pool": [247, 357, 409, 599, 922, 973, 1004], "plot_roc": [247, 974], "mean_fpr": 248, "viz": [248, 352], "interp_tpr": 248, "mean_auc": 248, "std_auc": 248, "std_tpr": 248, "tprs_upper": 248, "tprs_lower": 248, "plot_roc_crossv": [248, 974], "halvinggridsearchcv": [249, 250, 289, 364, 543, 766, 942, 1005, 1007, 1008, 1010], "1e4": [249, 623, 643, 859, 965], "gsh": 249, "gsh_time": 249, "gs_time": 249, "make_heatmap": 249, "is_sh": 249, "make_cbar": 249, "param_c": [249, 762], "param_gamma": [249, 762, 776], "sh": [249, 349, 353, 942], "scores_matrix": 249, "pivot_t": 249, "aggfunc": 249, "0e": [249, 513, 514], "get_xticklabel": 249, "rotation_mod": 249, "cbar_ax": 249, "plot_successive_halving_heatmap": [249, 974], "rsh": [250, 289], "0x7f74b71df640": 250, "_distn_infrastructur": 250, "rv_discrete_frozen": 250, "0x7f74b5d2a400": 250, "0x7f74b5ce1e80": 250, "halvingrandomsearchcvifittedhalvingrandomsearchcv": 250, "params_str": 250, "drop_dupl": 250, "n_resources_": [250, 765, 766, 942], "nn_candid": 250, "n_candidates_": [250, 765, 766, 942], "n_iterations_": [250, 765, 766], "multialign": 250, "674": [250, 974], "plot_successive_halving_iter": [250, 974], "n_samples_train": [251, 867, 868, 869, 870, 871], "n_samples_test": [251, 867, 868, 869, 870, 871, 956, 963], "train_error": 251, "test_error": 251, "i_alpha_optim": 251, "alpha_optim": 251, "00020991037201085544": 251, "330": [251, 297, 974], "plot_train_error_vs_test_error": [251, 974], "nonlinear": [252, 290, 608, 652, 653, 657, 660, 831, 949, 950, 958, 963], "true_fun": 252, "polynomial_featur": 252, "plot_underfitting_overfit": [252, 974], "validationcurvedisplai": [253, 948, 1009], "subset_mask": 253, "isin": [253, 297], "param_rang": [253, 293, 315, 784, 792, 948, 1009], "plot_validation_curv": [253, 974], "ovo": [255, 287, 751, 793, 867, 870, 953, 954, 968], "onevsoneclassifi": [255, 364, 794, 795, 994, 996, 997, 999, 1000, 1002, 1005, 1007, 1010, 1011], "review": [255, 284, 332, 340, 347, 348, 349, 350, 351, 357, 360, 377, 378, 499, 505, 953, 963, 979], "sort_index": 255, "class_protein_loc": 255, "cyt": 255, "erl": 255, "exc": [255, 937], "me1": 255, "me2": 255, "me3": 255, "mit": [255, 340, 351, 373, 383, 574, 575, 578, 583, 586, 607, 630, 631, 640, 802, 946], "244": [255, 548], "nuc": 255, "pox": 255, "vac": 255, "outputcodeclassifi": [255, 364, 793, 794, 1000, 1005, 1009, 1010, 1011], "code_s": [255, 795, 954], "ovo_tre": 255, "ovr_tre": 255, "ecoc": 255, "cv_results_tre": 255, "cv_results_ovo": 255, "cv_results_ovr": 255, "cv_results_ecoc": 255, "glanc": [255, 344], "tree_optim": 255, "unifi": [255, 346, 354, 357, 358, 380, 601, 972, 993], "allwein": 255, "erin": [255, 1005], "yoram": [255, 698], "singer": [255, 630, 631, 698, 949, 953, 967, 968], "141": [255, 465, 498, 865, 954], "defens": 255, "704": [255, 319, 974], "plot_multiclass_overview": [255, 974], "classifierchain": [257, 359, 364, 797, 799, 1000, 1005, 1008, 1010], "assembl": [257, 285, 321, 825], "multitask": [257, 381, 954], "jaccard": [257, 370, 414, 421, 663, 667, 683, 692, 697, 701, 741, 742, 743, 759, 956, 1001, 1002], "adam": [257, 274, 822, 823, 957, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "kleczewski": [257, 1000, 1001], "yeast": [257, 796], "417": [257, 314, 974], "103": [257, 258, 340, 380, 461, 519, 520, 993], "40597": 257, "jaccard_scor": [257, 667, 692, 697, 759, 953, 1002, 1005], "base_lr": [257, 796], "y_pred_ovr": 257, "ovr_jaccard_scor": 257, "y_pred_chain": 257, "chain_jaccard_scor": 257, "y_pred_ensembl": 257, "ensemble_jaccard_scor": 257, "x_po": 257, "takeawai": 257, "plot_classifier_chain_yeast": [257, 974], "kneighborstransform": [258, 260, 287, 656, 817, 956, 1003, 1007, 1008], "nmslib": 258, "pynndesc": 258, "pip": [258, 287, 288, 289, 290, 291, 292, 293, 294, 333, 343, 345, 349, 351, 363, 369, 969], "wrapper": [258, 351, 354, 377, 383, 508, 584, 632, 635, 705, 865, 949, 969, 972, 997, 1005], "pynndescenttransform": 258, "csr_matrix": [258, 288, 404, 408, 416, 460, 498, 508, 521, 522, 523, 524, 527, 528, 529, 530, 552, 557, 558, 678, 791, 820, 838, 840, 867, 868, 870, 871, 873, 874, 875, 876, 903, 908, 925, 928, 929, 930, 931, 932, 933, 934, 939, 954, 963, 967, 968, 969, 1008], "nmslibtransform": 258, "sw": 258, "n_samples_fit_": [258, 807, 808, 809, 811, 813, 815, 816, 817], "cosinesimil": 258, "nmslib_": 258, "adddatapointbatch": 258, "createindex": 258, "n_samples_transform": [258, 809, 817], "thread": [258, 288, 291, 343, 357, 359, 373, 380, 797, 798, 919, 920, 921, 996, 998, 1000, 1001, 1002, 1003, 1004, 1006, 1008, 1009, 1010], "num_thread": 258, "knnquerybatch": 258, "benchmark": [258, 289, 320, 321, 332, 338, 340, 345, 357, 363, 366, 371, 432, 479, 863], "mnist_10000": 258, "mnist_20000": 258, "20_000": 258, "tsne_param": 258, "barnes_hut": [258, 656, 1000, 1001], "parallel_batch_queri": 258, "msg": [258, 937], "transformer_nam": 258, "longest": 258, "fit_dur": 258, "transform_dur": 258, "823": 258, "884": 258, "769": 258, "733": 258, "448": 258, "759": 258, "numba": [258, 973], "cold": 258, "nearestneighbor": [258, 291, 363, 373, 384, 408, 410, 412, 425, 652, 653, 657, 807, 808, 809, 811, 815, 816, 817, 956, 993, 997, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010], "i_ax": 258, "828": 258, "955": [258, 377, 618], "brute": [258, 357, 368, 377, 384, 408, 410, 414, 421, 596, 597, 652, 653, 805, 806, 807, 808, 809, 811, 813, 815, 816, 817, 960, 989, 997, 1001, 1005, 1008, 1009, 1010], "spent": [258, 284, 346, 351, 789, 1008], "approximate_nearest_neighbor": [258, 974], "slow": [260, 278, 319, 332, 339, 343, 345, 378, 381, 411, 663, 839, 840, 844, 867, 870, 902, 950, 956, 973, 986, 1000], "temporarydirectori": [260, 287], "graph_model": 260, "classifier_model": 260, "sklearn_graph_cache_": 260, "tmpdir": [260, 287], "full_model": 260, "classifier__n_neighbor": 260, "grid_model": 260, "371": [260, 278, 320, 974], "plot_caching_nearest_neighbor": [260, 974], "beforehand": [261, 969], "entitl": [261, 411, 575, 807, 945], "knn__weight": 261, "unifom": 261, "546": [261, 974], "plot_classif": [261, 974], "79269019073225": 262, "kerneldens": [262, 263, 271, 379, 995, 1001, 1002, 1006, 1007, 1008], "new_data": [262, 347], "4x11": 262, "real_data": 262, "set_clim": 262, "238": [262, 974], "plot_digits_kde_sampl": [262, 974], "block": [263, 278, 291, 340, 342, 345, 350, 353, 359, 370, 373, 376, 379, 416, 417, 426, 437, 443, 444, 452, 453, 475, 477, 659, 921, 956, 958], "wildli": [263, 952], "kd": [263, 373, 379, 956, 1001, 1002, 1003], "jakevdp": [263, 271], "aaaaff": [263, 266], "tophat": [263, 379, 805, 806, 810], "log_den": 263, "x_src": 263, "format_func": 263, "ih": 263, "epanechnikov": [263, 379, 805, 806, 810], "funcformatt": 263, "nullloc": 263, "true_den": 263, "591": [263, 974], "plot_kde_1d": [263, 974], "plot_lof_novelty_detect": [264, 974], "x_inlier": 265, "n_error": 265, "x_score": [265, 446, 447, 448, 449], "legend_handl": 265, "handlerpathcollect": 265, "update_legend_marker_s": 265, "update_from": 265, "set_siz": 265, "handler_map": 265, "update_func": 265, "plot_lof_outlier_detect": [265, 974], "cmap_light": [266, 269], "ffaaaa": 266, "aaffaa": 266, "cmap_bold": [266, 269], "00ff00": 266, "824": [266, 974], "plot_nca_classif": [266, 974], "neighborhoodcomponentanalysi": 267, "dim_reduction_method": 267, "acc_knn": 267, "x_embed": [267, 268, 656, 660, 814, 956], "ntest": 267, "839": [267, 644, 974], "plot_nca_dim_reduct": [267, 974], "logsumexp": [268, 1000], "get_yaxi": [268, 278], "link_thickness_i": 268, "diff_embed": 268, "dist_embed": 268, "einsum": 268, "exp_dist_embed": 268, "relate_point": 268, "pt_i": 268, "pt_j": 268, "153": [268, 627, 974], "plot_nca_illustr": [268, 974], "8133333333333334": 269, "nearestcentroid": [269, 319, 954, 956, 993, 997, 1000, 1005, 1008], "darkblu": 269, "shrink_threshold": [269, 812, 956, 993, 1005], "plot_nearest_centroid": [269, 974], "barycent": [270, 993], "213": [270, 974], "plot_regress": [270, 974], "geospati": [271, 379], "haversin": [271, 379, 663, 725, 727, 956, 1002, 1005], "latitud": [271, 278, 340, 462, 663, 727], "longitud": [271, 278, 340, 462, 663, 727], "xtrain": 271, "ytrain": 271, "radian": [271, 663, 727], "land_mask": 271, "ball_tre": [271, 384, 408, 410, 414, 421, 652, 653, 807, 808, 809, 810, 811, 813, 815, 816, 817, 956, 993, 1010], "ocean": 271, "433": [271, 342, 974], "plot_species_kd": [271, 974], "combat": [273, 378], "lesser": [273, 359, 406, 505, 949], "curvatur": 273, "plot_mlp_alpha": [273, 974], "bfg": [274, 574, 575, 612, 613, 622, 633, 636, 638, 644, 651, 956, 957, 1008], "980000": 274, "096950": 274, "momentum": [274, 822, 823, 957], "049530": 274, "nesterov": [274, 822, 823, 957, 1009, 1010], "049540": 274, "360000": 274, "978444": 274, "860000": 274, "504185": 274, "503452": 274, "045311": 274, "956038": 274, "243802": 274, "992766": 274, "041297": 274, "993879": 274, "042898": 274, "638843": 274, "855465": 274, "909293": 274, "318387": 274, "912632": 274, "290584": 274, "991653": 274, "045934": 274, "840000": 274, "601052": 274, "157334": 274, "154453": 274, "692470": 274, "689751": 274, "689143": 274, "150527": 274, "850000": 274, "341523": 274, "336188": 274, "335919": 274, "689015": 274, "830000": 274, "513034": 274, "512595": 274, "930000": 274, "170087": 274, "schedul": [274, 333, 640, 641, 642, 822, 823, 967, 977, 1000], "nesterovs_momentum": [274, 822, 823], "invscal": [274, 640, 641, 642, 822, 823, 967], "plot_arg": 274, "plot_on_dataset": 274, "nlearn": 274, "loss_": [274, 822, 823, 957, 1007], "loss_curve_": [274, 822, 823], "data_set": 274, "get_lin": 274, "plot_mlp_training_curv": [274, 974], "28x28": 275, "784": 275, "throw": [275, 354, 884, 997, 1000, 1001, 1002, 1003, 1007], "infrastructur": [275, 293, 972, 973], "44139186": 275, "19174891": 275, "13983521": 275, "11378556": 275, "09443967": 275, "07846529": 275, "06506307": 275, "05534985": 275, "986429": 275, "953061": 275, "plot_mnist_filt": [275, 974], "greyscal": 276, "bernoulli": [276, 381, 382, 800, 801, 802, 803, 804, 821, 822, 823, 828, 949, 963, 975, 989, 993], "bernoullirbm": [276, 822, 823, 958, 963, 995, 996, 1005, 1007, 1010], "yann": [276, 993, 995], "dauphin": [276, 995], "gabriel": [276, 1001, 1002, 1003, 1006, 1007], "synnaev": 276, "convolv": 276, "minmax_scal": [276, 278, 835, 998, 1001], "nudge_dataset": 276, "1px": 276, "direction_vector": 276, "apply_along_axi": 276, "feature_rang": [276, 835, 851, 963, 995, 1005], "cg": [276, 622, 623, 636, 638, 651, 949, 997, 998, 1000, 1004, 1006, 1007, 1010], "rbm": [276, 821, 822, 823, 958], "rbm_features_classifi": 276, "6000": [276, 591], "raw_pixel_classifi": 276, "logisticregressionifittedlogisticregress": 276, "_classif": 276, "1509": 276, "undefinedmetricwarn": [276, 692, 693, 746, 747, 750, 1002], "zero_divis": [276, 677, 692, 693, 701, 746, 747, 750, 953, 1003, 1005, 1009], "194": 276, "154": [276, 615, 954], "687": [276, 321, 965, 974], "plot_rbm_logistic_classif": [276, 974], "incom": [278, 340, 404], "unscal": [278, 283, 949, 953, 1001, 1007], "unterthin": [278, 996, 997, 998], "medinc": [278, 289, 340, 454], "houseag": [278, 289, 340, 454], "averoom": [278, 289, 340, 454], "room": [278, 340, 350, 373, 976], "avebedrm": [278, 340, 454], "bedroom": [278, 340], "aveoccup": [278, 289, 340, 454], "features_idx": 278, "quantile_rang": [278, 843, 855, 999], "yeo": [278, 282, 841, 853, 963, 1001, 1007, 1009], "cox": [278, 282, 841, 853, 963, 1001, 1009], "plasma": 278, "plasma_r": 278, "create_ax": 278, "bottom_h": 278, "left_h": 278, "rect_scatt": 278, "rect_histx": 278, "rect_histi": 278, "ax_scatt": 278, "ax_histx": 278, "ax_histi": 278, "ax_scatter_zoom": 278, "ax_histx_zoom": 278, "ax_histy_zoom": 278, "rect_colorbar": 278, "ax_colorbar": 278, "plot_distribut": 278, "hist_nbin": 278, "x0_label": 278, "x1_label": 278, "hist_x1": 278, "hist_x0": 278, "aesthet": [278, 969, 998], "tick_bottom": 278, "tick_left": 278, "outward": 278, "ec": [278, 494], "make_plot": 278, "item_idx": 278, "ax_zoom_out": 278, "ax_zoom_in": 278, "zoom_in_percentile_rang": 278, "cutoffs_x0": 278, "cutoffs_x1": 278, "non_outliers_mask": 278, "colorbarbas": 278, "OR": [278, 373, 384, 408, 1004], "indistinguish": 278, "quadrant": 278, "plot_all_sc": [278, 974], "straightforward": [279, 344, 378, 977], "anywher": 279, "qinhanmin2005": 279, "sina": [279, 1006], "rnd": 279, "enc": [279, 281, 291, 293, 838, 839, 963], "x_bin": 279, "line_bin": 279, "plot_discret": [279, 974], "get_nam": 280, "broader": [280, 949, 976], "logisticregression__c": 280, "linearsvc__c": 280, "kbinsdiscretizer__n_bin": 280, "gradientboostingclassifier__learning_r": 280, "svc__c": [280, 825], "cm_piyg": 280, "piyg": 280, "b30065": 280, "178000": 280, "est_idx": 280, "347": [280, 974], "plot_discretization_classif": [280, 974], "centers_0": 281, "centers_1": 281, "x_list": 281, "grid_encod": 281, "stripe": 281, "plot_discretization_strategi": [281, 974], "powertransform": [282, 842, 853, 943, 963, 1001, 1004, 1007, 1009], "johnwon": 282, "weibul": 282, "bimod": [282, 379], "ineffect": [282, 963, 1001, 1002], "eric": [282, 996, 997, 998, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008], "ericchang2017": 282, "northwestern": [282, 622], "contact": [282, 357, 972], "font_siz": 282, "bc": 282, "qt": [282, 842], "x_lognorm": [282, 963], "x_chisq": 282, "chisquar": 282, "x_weibul": 282, "x_gaussian": 282, "x_uniform": 282, "loc_a": 282, "loc_b": 282, "105": 282, "x_a": 282, "x_b": 282, "x_bimod": 282, "d81b60": 282, "0188ff": 282, "ffc107": 282, "b7a2ff": 282, "2ec5ac": 282, "figaspect": 282, "axes_idx": 282, "axes_list": 282, "x_trans_bc": 282, "lmbda_bc": 282, "lambdas_": [282, 841, 1006, 1009], "x_trans_yj": 282, "lmbda_yj": 282, "x_trans_qt": 282, "ax_origin": 282, "ax_bc": 282, "ax_yj": 282, "ax_qt": 282, "x_tran": [282, 293, 347, 369, 406, 428, 841, 846, 853, 963], "meth_nam": 282, "lmbda": 282, "041": [282, 974], "plot_map_data_to_norm": [282, 974], "involv": [283, 285, 287, 307, 311, 332, 334, 340, 343, 345, 349, 359, 360, 376, 383, 663, 793, 794, 950, 954, 956, 960, 961, 968, 972, 977, 985, 1001], "kneighbor": [283, 291, 807, 808, 809, 811, 813, 956, 997, 1002, 1006, 1007, 1008, 1009], "obatin": 283, "tyler": [283, 1000, 1006, 1007, 1008], "lanigan": [283, 1000], "tylerlanigan": 283, "sebastian": [283, 994, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1010], "raschka": [283, 998, 999, 1000, 1001, 1002, 1005], "sebastianraschka": 283, "alcohol": [283, 342], "malic": [283, 342], "acid": [283, 342], "scaled_x_train": 283, "x_plot_scal": 283, "fit_and_plot_model": 283, "scaled_pca": 283, "x_train_transform": [283, 328, 377], "x_train_std_transform": 283, "first_pca_compon": 283, "target_class": 283, "repercuss": 283, "logisticregressioncv": [283, 359, 364, 622, 949, 954, 997, 998, 999, 1001, 1002, 1003, 1007, 1008, 1010], "unscaled_clf": 283, "scaled_clf": 283, "y_pred_scal": 283, "y_proba_sc": 283, "0825": 283, "vastli": 283, "plot_scaling_import": [283, 974], "targetencod": [284, 285, 359, 838, 839, 943, 963, 972, 1009, 1010], "wine_review": 284, "42074": 284, "countri": [284, 294, 460, 950], "provinc": 284, "region_1": 284, "region_2": 284, "wineri": 284, "tremend": [284, 380], "variet": 284, "hail": 284, "martha": 284, "vineyard": 284, "235": 284, "napa": 284, "vallei": 284, "cabernet": 284, "sauvignon": 284, "heitz": 284, "spain": 284, "ripe": 284, "aroma": 284, "blackberri": 284, "cassi": 284, "carodorum": 284, "selecci\u00f3n": 284, "reserva": 284, "northern": 284, "toro": 284, "tinta": 284, "bodega": 284, "carmen": 284, "rodr\u00edguez": 284, "watson": [284, 374], "honor": 284, "late": [284, 334], "harvest": 284, "knight": 284, "sonoma": 284, "blanc": 284, "macaulei": 284, "oak": 284, "reserv": [284, 525, 526, 977, 978], "oregon": 284, "willamett": 284, "pinot": 284, "noir": 284, "ponzi": 284, "franc": [284, 727], "b\u00e9gude": 284, "aft": [284, 996], "br\u00fblade": 284, "provenc": 284, "bandol": 284, "one_hot": 284, "max_categori": [284, 291, 293, 838, 839, 963, 1007, 1009], "target_typ": [284, 846, 889, 916, 1010], "evaluate_model_and_stor": 284, "rmse_test_scor": 284, "rmse_train_scor": 284, "rmse_test_mean": 284, "rmse_test_std": 284, "rmse_train_mean": 284, "rmse_train_std": 284, "n_unique_categori": 284, "nuniqu": 284, "14810": 284, "1236": 284, "632": 284, "workaround": [284, 345, 762, 776], "high_cardinality_featur": 284, "low_cardinality_featur": 284, "mixed_encoded_preprocessor": 284, "high_cardin": 284, "low_cardin": 284, "mixed_pip": 284, "high_cardinalityindex": 284, "targetencodertargetencod": 284, "low_cardinalityindex": 284, "mixed_target": 284, "name_to_color": 284, "rmse_": 284, "_mean": 284, "_std": 284, "explod": 284, "unrel": [284, 333, 350, 353, 381, 479], "822": [284, 753, 974], "plot_target_encod": [284, 974], "near_uniqu": 285, "50_000": [285, 320], "n_categori": [285, 801, 839, 963], "kbin": [285, 292], "x_inform": 285, "permuted_categori": 285, "x_shuffl": 285, "catastroph": [285, 726, 973], "x_near_unique_categori": 285, "raw_model": 285, "0049896314219657345": 285, "00457762158159003": 285, "model_with_cf": 285, "cf": [285, 373, 376, 406, 664, 949, 963, 973], "8000184677460285": 285, "7927845601690948": 285, "coefs_cf": 285, "target_encod": 285, "x_train_no_cf_encod": 285, "x_test_no_cf_encod": 285, "model_no_cf": 285, "858486250088675": 285, "6338211367110066": 285, "coefs_no_cf": 285, "298": [285, 961, 974], "plot_target_encoder_cross_v": [285, 974], "announc": [287, 288, 289, 290, 291, 292, 293, 294, 349], "latest": [287, 288, 289, 290, 291, 292, 293, 294, 343, 345, 349, 351, 353, 969, 1007], "upgrad": [287, 288, 289, 290, 291, 292, 293, 294, 363, 973, 993, 998, 1001], "conda": [287, 288, 289, 290, 291, 292, 293, 294, 333, 345, 346, 348, 349, 351, 353, 363, 366, 969], "forg": [287, 288, 289, 290, 291, 292, 293, 294, 333, 346, 348, 349, 353, 363], "plot_roc_curv": [287, 1003, 1005], "plot_precision_recall_curv": [287, 1003, 1005, 1006], "stackingclassifi": [287, 328, 359, 364, 380, 532, 943, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011], "9473684210526315": 287, "radiusneighborstransform": [287, 809, 956, 1003, 1005, 1007, 1008], "sklearn_cache_": 287, "isomap__n_neighbor": 287, "nan_euclidean_dist": [287, 725, 943, 1003], "ccp_alpha": [287, 323, 521, 522, 523, 524, 528, 529, 873, 874, 875, 876, 969, 1003], "tree_": [287, 323, 327, 810, 873, 874, 875, 876], "node_count": [287, 323, 327, 873, 874, 875, 876], "check_estim": [287, 347, 359, 897, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008], "pytest": [287, 333, 343, 345, 347, 348, 363, 366, 369, 896, 897, 1003, 1006], "estimator_check": [287, 347, 359, 372, 1000, 1001, 1003, 1004, 1007, 1008, 1009], "parametrize_with_check": [287, 347, 896, 1003, 1004], "test_sklearn_compatible_estim": [287, 897], "decision_function_shap": [287, 316, 867, 870, 968, 998, 999, 1002, 1003], "9938784188034188": 287, "plot_release_highlights_0_22_0": [287, 974], "await": 288, "lam": [288, 289, 1004], "35776189065725783": 288, "42425183539869404": 288, "openmp": [288, 343, 348, 357, 359, 373, 380, 921, 1004, 1006, 1009], "8773032277026442": 288, "10k": [288, 411], "monotoinc": 288, "gbdt_cst": 288, "999791942438998": 288, "plot_release_highlights_0_23_0": [288, 974], "art": [289, 351, 613, 656, 972, 977], "footprint": [289, 292, 332, 334, 373, 378, 519, 520, 521, 522, 527, 528, 529, 530, 995, 998, 999, 1004, 1005, 1008], "yarowski": [289, 862, 966], "selftrainingclassifi": [289, 299, 300, 301, 364, 966, 1005, 1011], "random_unlabeled_point": [289, 860, 861, 862], "self_training_model": [289, 862], "base_estim": [289, 347, 371, 517, 518, 519, 520, 796, 799, 862, 942, 949, 1004, 1006, 1007, 1008, 1009], "selftrainingclassifierifittedselftrainingclassifi": 289, "7353": [289, 999], "linear_baselin": 289, "decisiontreeregressorifitteddecisiontreeregressor": 289, "effort": [289, 345, 351, 972, 977, 1004, 1006], "232": [289, 953, 974], "plot_release_highlights_0_24_0": [289, 974], "l2_regular": [290, 380, 525, 526], "max_bin": [290, 291, 380, 525, 526, 1010], "quantileregressor": [290, 949, 953, 1006, 1007, 1008], "min_": [290, 373, 380, 835, 949, 963, 967, 968, 969], "sum_i": [290, 610, 611, 616, 617, 624, 625, 626, 627, 645, 648, 944, 945, 949, 951, 953, 958], "pb_q": [290, 949], "_1": [290, 311, 375, 378, 381, 495, 501, 502, 504, 509, 510, 511, 610, 611, 616, 617, 618, 619, 620, 624, 625, 626, 627, 645, 646, 647, 648, 729, 949, 951, 953, 968], "get_feature_nam": [290, 1001, 1002, 1004, 1005, 1006], "pet": [290, 294, 751, 953], "dog": [290, 291, 293, 294, 546, 746, 846, 963], "fish": 290, "pet_cat": 290, "pet_dog": 290, "pet_fish": 290, "plot_": [290, 363], "plot_release_highlights_1_0_0": [290, 974], "x_1d": 291, "hist_quantil": 291, "log_reg_input_featur": 291, "gather": [291, 293, 353, 360, 372, 373, 963, 977], "min_frequ": [291, 293, 838, 839, 963, 1007, 1009], "rabbit": [291, 293, 963], "snake": [291, 293, 546, 846, 963], "infrequent_categories_": [291, 293, 838, 839, 846, 963], "x0_cat": [291, 963], "x0_rabbit": [291, 963], "x0_infrequent_sklearn": [291, 963], "refactor": [291, 993, 995, 996, 997, 1003, 1006, 1007, 1008], "radius_neighbor": [291, 813, 815, 816, 817, 997, 1002, 1003, 1005, 1006, 1007, 1008], "pairwise_distances_argmin_min": [291, 742, 996, 1001, 1007, 1008, 1009, 1010], "radiusneighborsclassifi": [291, 807, 808, 813, 816, 954, 956, 993, 995, 999, 1001, 1003, 1005, 1006, 1007, 1008, 1009, 1010], "radiusneighborsregressor": [291, 807, 808, 813, 815, 956, 993, 995, 1001, 1003, 1005, 1006, 1007, 1008, 1009, 1010], "trustworthi": [291, 1001, 1002, 1007, 1008, 1009, 1010], "labelpropag": [291, 298, 861, 862, 954, 966, 994, 999, 1000, 1003, 1004, 1005, 1007, 1008, 1009], "labelspread": [291, 296, 297, 298, 300, 301, 860, 862, 954, 966, 994, 999, 1000, 1003, 1004, 1007, 1008, 1009], "blog": [291, 332, 345, 351, 353, 360, 1004], "cython": [291, 332, 333, 343, 345, 348, 354, 357, 363, 366, 369, 372, 373, 380, 472, 963, 964, 967, 968, 972, 973, 993, 996, 997, 999, 1005, 1008, 1009, 1010], "readili": [291, 378, 969, 977], "true_w": 291, "true_h": 291, "x_reconstruct": [291, 446, 447, 448, 547], "00364": 291, "divis": [291, 373, 381, 554, 555, 558, 676, 677, 692, 693, 701, 709, 746, 747, 750, 953, 986, 997, 1001, 1002, 1005, 1009, 1010], "bisect_km": 291, "plot_release_highlights_1_1_0": [291, 974], "video": [292, 339, 348, 467, 954, 977, 979], "sepal_col": 292, "petal_col": 292, "x_out": [292, 829, 838, 839], "052506": 292, "592373": 292, "189830": 292, "973554": 292, "416010": 292, "630382": 292, "765012": 292, "362176": 292, "021849": 292, "788808": 292, "hist_no_interact": 292, "v1": [292, 339, 363, 525, 526, 760, 761, 1005, 1008, 1009, 1010], "liac": [292, 339, 345, 460, 1008, 1009], "arff": [292, 345, 460, 1005, 1008, 1009], "ticket": [292, 345], "cabin": 292, "boat": 292, "allen": [292, 996, 998, 1000, 1003], "elisabeth": [292, 1010], "walton": 292, "24160": 292, "3375": 292, "b5": 292, "loui": [292, 998, 999, 1003, 1005, 1007, 1009, 1010], "mo": [292, 1004], "allison": 292, "hudson": 292, "9167": 292, "113781": 292, "151": [292, 321, 351, 380, 465, 965, 974], "5500": [292, 652, 950], "c22": 292, "c26": 292, "montreal": 292, "pq": 292, "chestervil": 292, "ON": 292, "helen": 292, "lorain": 292, "joshua": [292, 340, 995, 996, 998, 999, 1005, 1008, 1009], "creighton": 292, "bessi": 292, "waldo": 292, "compliant": [292, 345], "cupi": [292, 357, 369, 1010], "gpu": [292, 369, 957, 973, 987, 1010], "changelog": [292, 349, 359, 991], "444": [292, 974], "plot_release_highlights_1_2_0": [292, 974], "throughout": [293, 328, 359, 591, 763, 822, 823, 978, 996, 1001], "codebas": [293, 328, 345, 346, 347, 381, 993, 999], "ongo": [293, 346, 360], "incorpor": [293, 345, 374, 380, 952, 972, 977], "contrib": [293, 345, 347, 353, 357, 359, 373, 972, 973, 1009], "adpot": 293, "true_label": [293, 296, 297], "non_noisy_label": 293, "9694149248180188": 293, "encodings_": [293, 846, 963], "validation_curv": [293, 315, 364, 784, 948, 1000, 1001, 1002, 1005, 1009], "geomspac": 293, "make_low_rank_matrix": [293, 488], "46858513287221654": 293, "502": [293, 974], "plot_release_highlights_1_3_0": [293, 974], "x_adult": 294, "y_adult": 294, "adult": [294, 460, 963], "fnlwgt": [294, 460], "workclass": [294, 460], "marit": [294, 460], "y_decis": [294, 796], "9283833798131659": 294, "df_out": 294, "heightpet_catpet_dogf64f64f64": 294, "2156660": 294, "8626621": 294, "4018260": 294, "7548291": 294, "2939931": 294, "rf_no_cst": 294, "rf_cst": 294, "icon": [294, 347], "hover": 294, "randomforestclassifierinot": 294, "fittedrandomforestclassifi": 294, "routin": [294, 334, 339, 342, 345, 346, 347, 348, 353, 357, 359, 382, 636, 638, 651, 808, 867, 868, 869, 870, 871, 950, 956, 963, 964, 967, 972, 977, 993, 1007, 1008, 1009], "get_scor": [294, 359, 696, 1000, 1009], "hyperparameter_grid": 294, "scoring_inner_cv": 294, "test_ms": 294, "interfer": [294, 1003], "41542645": 294, "42962041": 294, "2229135": 294, "28810249": 294, "31865899": 294, "levarag": 294, "linearoper": [294, 651], "x_spars": [294, 498, 924, 927], "x_dens": [294, 508], "time_spars": 294, "time_dens": 294, "speedup": [294, 332, 378, 380, 614, 618, 621, 993, 994, 995, 996, 1008], "7x": 294, "413": [294, 974], "plot_release_highlights_1_4_0": [294, 974], "semisupervis": [296, 359], "clai": [296, 297, 298, 301, 993], "woolam": [296, 297, 298, 301, 993], "n_total_sampl": [296, 297], "n_labeled_point": [296, 297], "unlabeled_set": 296, "everyth": [296, 328, 349, 351, 357, 428, 908, 972, 973, 993], "lp_model": [296, 297], "predicted_label": [296, 297], "transduction_": [296, 297, 298, 860, 861, 862], "_plot": 296, "0x7f74b5b7a670": 296, "pred_entropi": [296, 297], "label_distributions_": [296, 297, 860, 861, 1004], "uncertainty_index": [296, 297], "image_index": [296, 297], "plot_label_propagation_digit": [296, 974], "max_iter": 297, "______________________________________________________________________": 297, "290": [297, 652, 653, 657, 950], "280": 297, "unlabeled_indic": 297, "transduc": 297, "delete_indic": 297, "nfit": 297, "delete_index": 297, "485": [297, 317, 660, 974], "plot_label_propagation_digits_active_learn": [297, 974], "label_spread": 298, "labelspreadingifittedlabelspread": 298, "output_label": 298, "output_label_arrai": 298, "outer_numb": 298, "inner_numb": 298, "149": [298, 954, 974, 993], "plot_label_propagation_structur": [298, 974], "breast_canc": 299, "augment": [299, 594, 847, 961, 977], "oliv": [299, 301, 1001, 1002, 1004, 1005, 1006], "rausch": [299, 301, 1001, 1002, 1005], "rauscho": [299, 301], "ethz": [299, 301], "total_sampl": [299, 500], "base_classifi": [299, 301, 966], "x_valu": 299, "99999": 299, "amount_label": 299, "amount_iter": 299, "self_training_clf": 299, "skfold": 299, "y_test_tru": 299, "labeled_iter_": [299, 862], "return_count": [299, 320, 817], "capsiz": 299, "twinx": 299, "plot_self_training_varying_threshold": [299, 974], "2823": 300, "2117": 300, "1676": 300, "1108": 300, "847": 300, "tfidftransform": [300, 320, 321, 381, 453, 555, 987, 1000, 1001, 1007, 1009, 1010, 1011], "sdg_param": 300, "vectorizer_param": 300, "selftrain": 300, "st_pipelin": 300, "ls_pipelin": 300, "eval_and_print_metr": 300, "y_mask": 300, "x_20": 300, "y_20": 300, "plot_semi_supervised_newsgroup": [300, 974], "y_rand": 301, "y_30": 301, "y_50": 301, "ls30": 301, "ls50": 301, "ls100": 301, "st30": 301, "st50": 301, "rbf_svc": [301, 968], "color_map": 301, "897": [301, 974], "plot_semi_supervised_versus_svm_iri": [301, 974], "my_kernel": [303, 968], "plot_custom_kernel": [303, 974], "2x2": [304, 373, 717], "plot_iris_svc": [304, 974], "convention": [305, 359, 861], "support_vector_indic": 305, "plot_linearsvc_support_vector": [305, 974], "plot_oneclass": [306, 974], "midpoint": 307, "blink": 307, "act": [307, 319, 345, 358, 379, 380, 677, 692, 693, 701, 746, 747, 750, 840, 844, 950, 953, 956, 968, 1001], "spuriou": [307, 353, 963, 1006, 1007, 1008], "c_rang": 307, "gamma_rang": 307, "midpointnorm": 307, "masked_arrai": [307, 762, 776], "x_2d": 307, "y_2d": 307, "c_2d_rang": 307, "gamma_2d_rang": 307, "bright": 307, "brutal": 307, "plot_rbf_paramet": [307, 974], "plot_separating_hyperplan": [308, 974], "plain": [309, 383, 621, 967], "n_samples_1": [309, 968], "n_samples_2": [309, 968], "clusters_std": 309, "wclf": 309, "wdisp": 309, "plot_separating_hyperplane_unbalanc": [309, 974], "blown": 310, "score_mean": 310, "score_std": 310, "this_scor": [310, 982], "314": [310, 974], "plot_svm_anova": [310, 974], "outermost": 311, "hinge_loss": [311, 953, 997, 1005, 1006], "enrich": 311, "plot_training_data_with_decision_boundari": 311, "cosine_similar": [311, 723, 728, 951, 998], "untransform": [311, 428, 431, 964], "bend": 311, "tanh": [311, 740, 822, 823, 951, 968], "hyperbol": [311, 606, 822, 823, 951, 957], "generaliz": [311, 380], "comprehens": [311, 381, 721, 722, 951, 977, 1001], "422": [311, 557, 558, 689, 719, 953, 974], "plot_svm_kernel": [311, 974], "plot_svm_margin": [312, 974], "fignum": 312, "unreg": 312, "yy_down": 312, "yy_up": 312, "nusvc": [313, 332, 401, 868, 954, 968, 993, 994, 995, 998, 1001, 1003, 1004, 1005, 1007], "453": [313, 323, 974], "plot_svm_nonlinear": [313, 974], "svr_rbf": 314, "svr_lin": 314, "svr_poli": 314, "kernel_label": 314, "model_color": 314, "setdiff1d": 314, "fancybox": 314, "plot_svm_regress": [314, 974], "omega": [315, 376, 947], "dependen": 315, "reparametr": 315, "model_l1": 315, "shuffle_param": 315, "best_c": 315, "idxmax": 315, "train_size_idx": 315, "results_sc": 315, "c_scale": 315, "best_c_scal": 315, "somewhat": [315, 328, 334, 345, 347, 378, 380, 867, 870, 949, 968, 969], "dantzig": 315, "model_l2": 315, "979": [315, 974], "plot_svm_scale_c": [315, 974], "break_ti": [316, 867, 870, 968, 1003], "accent": [316, 552, 553, 555, 1003], "plot_svm_tie_break": [316, 974], "emphasi": [317, 376, 867, 868, 869, 870, 871, 960, 972], "subtl": [317, 328, 952, 973], "plot_decision_funct": 317, "sample_weight_last_ten": 317, "sample_weight_const": 317, "clf_no_weight": 317, "clf_weight": 317, "plot_weighted_sampl": [317, 974], "size_mb": 319, "utf": [319, 321, 381, 451, 467, 546, 552, 553, 555], "load_dataset": 319, "sublinear_tf": [319, 378, 381, 554, 555], "duration_train": 319, "duration_test": 319, "data_train_size_mb": 319, "data_test_size_mb": 319, "2034": [319, 340], "98mb": 319, "1353": 319, "87mb": 319, "365": [319, 375, 437], "900mb": 319, "7831": 319, "226": [319, 373, 384, 408], "680mb": 319, "ridgeclassifi": [319, 332, 636, 637, 639, 949, 954, 998, 1002, 1006, 1007, 1008], "sparse_cg": [319, 636, 638, 651, 949, 994, 1000, 1002, 1003, 1007, 1009], "rarer": [319, 321, 381], "deeper": [319, 969], "plot_feature_effect": 319, "average_feature_effect": 319, "top5": 319, "top_indic": 319, "predictive_word": 319, "bar_siz": 319, "y_loc": 319, "keyword": [319, 339, 345, 347, 350, 352, 359, 373, 384, 387, 402, 408, 409, 414, 416, 421, 428, 431, 460, 467, 499, 502, 504, 523, 524, 531, 532, 533, 534, 584, 592, 595, 596, 603, 607, 610, 611, 616, 617, 624, 625, 626, 627, 645, 648, 652, 656, 661, 662, 663, 664, 665, 666, 737, 741, 742, 743, 744, 755, 756, 768, 784, 805, 806, 807, 808, 809, 811, 813, 815, 816, 817, 818, 819, 825, 829, 897, 920, 942, 950, 953, 956, 966, 993, 997, 999, 1000, 1001, 1003, 1005, 1007, 1008, 1009, 1010], "keith": [319, 993, 998], "atheist": 319, "orbit": [319, 320], "caltech": 319, "expectedli": 319, "pollut": [319, 691, 748, 953, 959], "sender": [319, 340], "livesei": 319, "solntz": 319, "wpd": 319, "sgi": 319, "jon": [319, 1000, 1003, 1004, 1006, 1007, 1010], "nntp": [319, 340, 987], "1qlettinn8oi": 319, "cco": 319, "allan": [319, 371, 1005], "schneider": [319, 1006], "instinct": 319, "happi": [319, 357, 360, 780, 781], "listen": 319, "murder": 319, "voluntari": 319, "disregard": [319, 359, 381, 396, 429, 446, 447, 448, 516, 518, 520, 522, 524, 526, 529, 532, 534, 575, 599, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 624, 625, 626, 627, 628, 629, 631, 634, 636, 637, 642, 643, 685, 686, 687, 748, 798, 799, 808, 816, 823, 834, 835, 841, 842, 845, 850, 853, 854, 856, 866, 868, 871, 874, 876, 953, 1001], "beings": 319, "bahavior": 319, "theirs": 319, "mimicri": 319, "imit": 319, "parrot": 319, "polli": 319, "pulchritud": 319, "anim": [319, 381], "kill": [319, 357], "Or": [319, 327, 377, 378, 838, 953, 959, 967], "sigh": 319, "wonder": [319, 343], "bahaviour": 319, "believ": [319, 320, 353, 357, 977], "primat": 319, "arbitarili": 319, "poster": [319, 344, 345, 986], "weren": [319, 839, 1002], "slai": 319, "mate": 319, "ritual": 319, "whatnot": 319, "aren": [319, 340, 349, 363, 372, 689, 719, 958, 1003, 1005], "ye": [319, 353, 359, 832, 849, 949], "gorilla": 319, "dolphin": 319, "platypu": 319, "writer": 319, "launch": [319, 320, 363, 977], "custom_nam": 319, "clf_descr": 319, "rocchio": [319, 812], "000639": 319, "772": [319, 686], "5316": 319, "0312": 319, "000605": 319, "000898": 319, "0861": 319, "0515": 319, "0305": 319, "000616": 319, "752": 319, "0263": 319, "000595": 319, "762": 319, "00252": 319, "00131": 319, "748": [319, 351], "00173": 319, "000483": 319, "779": 319, "txt": [319, 339, 457, 467], "curs": [319, 320, 373, 379, 955, 956, 981, 986], "harm": [319, 347, 381, 758], "460": [319, 974], "plot_document_classification_20newsgroup": [319, 974], "discov": [320, 372, 373, 378, 381, 384, 408, 412, 978, 1008], "category_s": 320, "true_k": 320, "3387": 320, "evaluations_std": 320, "fit_and_evalu": 320, "evaluation_std": 320, "score_valu": 320, "std_score": [320, 1006], "collis": [320, 321, 381, 546, 553], "x_tfidf": 320, "389": [320, 557, 558, 987], "7929": [320, 1000], "prod": [320, 585], "phenomenon": [320, 963], "cluster_s": 320, "1638": 320, "309": 320, "1689": 320, "638": [320, 351], "580": [320, 805, 806], "3384": 320, "1887": 320, "311": 320, "332": [320, 853], "1771": 320, "652": 320, "973": [320, 377], "628": 320, "354": 320, "016": 320, "redo": 320, "x_lsa": 320, "explained_vari": [320, 953], "310": 320, "minibatch_kmean": 320, "342": 320, "297": [320, 340], "original_space_centroid": 320, "order_centroid": 320, "ve": [320, 345, 381, 977, 987, 1000], "shuttl": 320, "bibl": 320, "sparciti": 320, "lsa_vector": 320, "x_hashed_lsa": 320, "393": 320, "415": 320, "030": 320, "351": 320, "034": [320, 435], "037": [320, 673], "024": 320, "df_std": 320, "speak": [320, 332, 345, 967], "safer": [320, 328, 343, 373, 377, 993], "plot_document_clust": [320, 974], "18000": [321, 340], "raw_data": 321, "data_size_mb": 321, "3803": 321, "245mb": 321, "anyth": [321, 349, 351, 359, 364, 374, 377, 913, 917, 1007], "unicod": [321, 381, 451, 467, 546, 552, 553, 555, 918, 993, 1001, 1005], "charact": [321, 345, 350, 359, 381, 467, 472, 473, 552, 553, 555, 877, 958, 987, 993, 1006, 1008], "underscor": [321, 347, 359, 937, 984, 993, 1003, 1006], "tok": [321, 381], "findal": 321, "token_freq": 321, "dict_count_vector": 321, "47928": 321, "vocabulary_": [321, 381, 545, 552, 555, 987, 993], "19145": 321, "n_nonzero_column": 321, "43873": 321, "inact": [321, 339, 345], "572": 321, "47668": 321, "input_typ": [321, 381, 546], "547": 321, "y_po": 321, "downsid": 321, "featureheash": 321, "implicitli": [321, 354, 380, 561, 596, 597, 844, 943, 945, 960, 963, 968], "token_pattern": [321, 381, 552, 553, 555], "721": [321, 502, 504, 511], "47885": 321, "501": 321, "plot_hashing_vs_dict_vector": [321, 974], "parameter": [323, 383, 578, 579, 586, 587, 760, 761, 949, 950, 958, 963, 969], "weakest": [323, 969], "cost_complexity_pruning_path": [323, 873, 874, 875, 876], "drawstyl": [323, 664], "3272984419327777": 323, "plot_cost_complexity_prun": [323, 974], "ryb": 324, "pairidx": 324, "borderpad": 324, "handletextpad": 324, "plot_iris_dtc": [324, 974], "plot_tre": [324, 327, 969, 1002, 1004, 1005, 1006, 1008, 1009], "826": [324, 974], "085": [325, 974], "plot_tree_regress": [325, 974], "regr_3": 326, "y_3": 326, "plot_tree_regression_multioutput": [326, 974], "decision_path": [327, 521, 522, 528, 529, 530, 873, 874, 875, 876, 999, 1004], "decisiontreeclassifierifitteddecisiontreeclassifi": 327, "compute_node_depth": 327, "children_left": 327, "children_right": 327, "n_node_sampl": 327, "weighted_n_node_sampl": 327, "travers": [327, 956, 960], "n_node": [327, 405, 409, 427, 521, 522, 528, 529, 530, 873, 874, 875, 876, 907], "node_depth": 327, "is_leav": 327, "pop": [327, 357, 880, 982, 1001], "visit": [327, 345, 960, 976], "node_id": [327, 877, 879], "is_split_nod": 327, "children": [327, 373, 380, 405, 409, 427, 530, 997, 1010], "33035714": 327, "30357143": 327, "36607143": 327, "800000011920929": 327, "45333333": 327, "54666667": 327, "950000047683716": 327, "91666667": 327, "08333333": 327, "02564103": 327, "97435897": 327, "n_output": [327, 359, 380, 390, 396, 397, 401, 406, 409, 429, 433, 446, 447, 448, 496, 498, 500, 501, 503, 506, 507, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 531, 532, 533, 534, 546, 547, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 574, 575, 592, 594, 597, 599, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 636, 637, 638, 639, 640, 642, 643, 685, 686, 691, 708, 709, 711, 713, 714, 716, 717, 748, 751, 753, 754, 762, 765, 766, 768, 776, 784, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 812, 814, 815, 816, 821, 822, 823, 824, 828, 829, 830, 831, 834, 835, 837, 838, 839, 840, 842, 843, 844, 845, 857, 858, 860, 861, 865, 866, 867, 868, 870, 871, 873, 874, 875, 876, 891, 924, 953, 954, 969, 1000, 1003], "node_index": 327, "node_ind": 327, "leaf_id": 327, "sample_id": [327, 340, 461], "threshold_sign": 327, "inequ": [327, 359, 373, 407, 411, 423, 663, 950, 951, 956], "common_nod": 327, "common_node_id": 327, "plot_unveil_tree_structur": [327, 974], "x_test_transform": [328, 377], "tip": [328, 331, 345, 348, 351, 368, 381, 498, 505, 609, 656, 949, 975, 976, 988, 989, 996], "standard_norm": [328, 651], "unfair": 328, "x_select": 328, "gbc": 328, "x_train_select": 328, "x_test_select": 328, "glossari": [328, 345, 347, 351, 372, 384, 385, 401, 404, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 421, 422, 423, 424, 425, 426, 428, 431, 433, 436, 438, 452, 455, 456, 459, 461, 467, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 547, 548, 558, 566, 571, 572, 574, 575, 591, 596, 598, 603, 604, 605, 606, 610, 611, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 629, 630, 631, 632, 635, 636, 637, 638, 639, 640, 641, 642, 643, 651, 652, 653, 654, 655, 656, 657, 658, 659, 665, 737, 741, 744, 756, 760, 761, 762, 764, 765, 766, 767, 768, 774, 776, 777, 778, 779, 780, 781, 782, 784, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 807, 808, 810, 811, 813, 814, 815, 816, 818, 819, 821, 822, 823, 824, 827, 830, 842, 846, 854, 857, 858, 860, 861, 865, 866, 867, 870, 873, 874, 875, 876, 901, 902, 924, 927, 942, 943, 949, 978, 1001], "mtrand": 328, "_rand": 328, "85418642": 328, "79084103": 328, "13077794": 328, "11915045": 328, "56479934": 328, "70814003": 328, "25291366": 328, "55212743": 328, "18197458": 328, "37845099": 328, "mutat": [328, 1001], "debug": [328, 333, 346, 348, 351, 359, 362, 591, 864, 919, 972, 987, 1001, 1005], "govern": [328, 332, 345, 359, 977], "implic": [328, 345], "rf_123": 328, "rf_inst": 328, "didn": [328, 359, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "strict": [328, 343, 359, 378, 467, 499, 552, 553, 555, 949, 993, 1002, 1005], "pervas": [328, 345], "unlucki": 328, "lucki": 328, "fairer": 328, "temptat": [328, 345], "throughput": [331, 972, 989, 996], "switch": [331, 642, 668, 681, 700, 718, 720, 758, 805, 806, 901, 902, 953, 956, 989, 993], "offlin": [332, 345], "bottleneck": [332, 351, 380, 412, 822, 823], "hurt": [332, 498, 1001], "toolkit": [332, 972, 977], "branch": [332, 343, 345, 348, 349, 373, 380, 406, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 873, 874, 875, 876, 878, 956, 960, 969], "sklearn_assume_finit": 332, "assume_finit": [332, 333, 432, 863], "assert_all_finit": [332, 354, 432], "nm": 332, "csc": [332, 357, 359, 381, 491, 515, 517, 518, 634, 656, 832, 834, 840, 845, 848, 850, 856, 881, 885, 886, 916, 928, 929, 931, 932, 933, 934, 956, 963, 1001, 1002, 1004, 1007], "32bit": [332, 918], "multithread": [332, 373, 865, 866, 867, 868, 869, 870, 871], "bla": [332, 333, 343, 346, 351, 993, 1001, 1002, 1004, 1005], "sparsity_ratio": 332, "gbt": 332, "speedi": 332, "packet": 332, "reuter": [332, 340], "carefulli": [332, 378, 968], "spawn": [332, 357, 762, 776, 786, 787, 788, 1004], "gil": [332, 333, 346, 921, 996, 1001, 1002, 1005, 1006, 1010], "ought": 332, "lapack": [332, 333, 343, 496, 499, 505, 652, 1008], "dgemm": 332, "show_vers": [332, 343, 345, 353, 363, 1001], "atla": [332, 343], "rebuild": [332, 367, 381, 406], "openbla": [332, 333, 343, 357, 921, 1006, 1010], "mkl": [332, 333, 343, 357, 921, 993], "veclib": [332, 357], "osx": 332, "nouri": [332, 994, 996], "instruct": [332, 345, 346, 347, 348, 349, 350, 353, 357, 358, 467, 552, 553, 555, 976, 978, 987, 993], "ubuntu": [332, 343, 351, 353], "1gb": 332, "mib": [332, 432, 863], "working_memori": [332, 333, 432, 744, 863, 1001], "adher": [332, 347, 359, 896, 897, 993, 994], "pairwise_distances_chunk": [332, 741, 1001, 1004, 1010], "facilit": [332, 359, 367, 972, 973, 999, 1002], "moment": [332, 378, 383, 404, 579, 587, 822, 823, 917, 957, 958], "000024": 332, "027400": 332, "mileag": 332, "deploi": [332, 362, 367, 973, 977], "upstream": [332, 345, 349, 353, 357, 963, 1002], "lighter": [332, 664, 666, 745, 752, 1009], "threadpoolctl": [333, 343, 363, 366], "subsect": [333, 345, 372], "worker": [333, 359, 381, 919, 920, 921, 1008], "14228": 333, "loki": [333, 921, 953, 1001, 1004], "duplic": [333, 344, 345, 359, 373, 384, 408, 412, 413, 479, 599, 610, 611, 616, 617, 624, 625, 626, 627, 645, 648, 789, 836, 939, 956, 993, 996, 1005, 1007, 1009, 1010], "memmap": [333, 340, 359, 378, 472, 498, 1001, 1010], "1mb": [333, 998], "parallel_backend": [333, 384, 401, 408, 410, 412, 414, 416, 421, 422, 425, 428, 431, 436, 495, 499, 500, 501, 503, 506, 507, 509, 510, 512, 519, 520, 521, 522, 527, 528, 529, 530, 531, 532, 533, 534, 558, 566, 571, 572, 574, 596, 598, 603, 611, 615, 617, 619, 621, 622, 623, 625, 627, 629, 630, 632, 640, 643, 652, 653, 654, 655, 656, 657, 658, 737, 741, 744, 762, 765, 766, 768, 776, 784, 786, 787, 788, 789, 790, 792, 793, 794, 795, 797, 798, 807, 808, 811, 813, 815, 816, 818, 819, 824, 827, 860, 861, 1001], "exclus": [333, 357, 359, 378, 380, 591, 592, 594, 942, 949, 953, 954, 977, 1000, 1004], "omp_num_thread": 333, "my_script": 333, "algebra": [333, 343, 348, 357, 378, 381, 426, 831, 963], "bli": [333, 343, 357], "mkl_num_thread": 333, "openblas_num_thread": 333, "blis_num_thread": 333, "bash": [333, 353], "zsh": 333, "termin": [333, 350, 351, 353, 363, 373, 387, 412, 425, 517, 518, 522, 523, 524, 527, 529, 630, 631, 632, 640, 642, 822, 823, 874, 876, 959, 969], "pypi": [333, 343, 345, 347, 349, 351, 363, 969, 1001, 1005, 1007, 1008, 1010], "channel": [333, 340, 343, 357, 363, 381, 457, 458, 547, 548, 550, 551, 976], "subscript": [333, 1006], "max_thread": [333, 346], "n_cpu": [333, 359], "preced": [333, 345, 451, 953, 993], "lib": [333, 343, 363, 972], "_num_thread": 333, "singleton": [333, 770, 888, 1006, 1009], "aforement": [333, 954], "global_random_se": 333, "fixtur": [333, 345], "build_numb": 333, "disrupt": 333, "config": [333, 343, 345, 346, 353, 590, 1001], "contributor": [333, 348, 349, 350, 353, 357, 359, 953, 973, 994, 995, 996, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "encount": [333, 343, 363, 367, 373, 380, 381, 460, 525, 526, 545, 800, 801, 802, 804, 838, 928, 963, 967, 972, 976, 977, 987, 1001, 1004], "annoi": 333, "test_your_test_nam": 333, "skip": [333, 345, 347, 354, 369, 381, 432, 532, 610, 611, 616, 624, 625, 626, 635, 645, 863, 987, 997, 1000, 1003, 1005, 1007, 1009], "global_dtyp": 333, "boundscheck": [333, 346], "segfault": [333, 346, 993, 1001, 1006], "posix": [333, 357], "pairwisedistancesreduct": 333, "adequ": [333, 351, 531, 978, 1006], "unset": [333, 359, 1001], "_get_warnings_filters_info_list": 333, "sklearn_warning_as_error": 333, "syntax": [333, 345, 350, 353, 374, 432, 824, 825, 863, 942, 978, 1004, 1006], "rst": [333, 345, 349, 353, 987, 993], "drive": [334, 378, 379, 513, 967, 977, 987], "passiveaggressiveregressor": [334, 949, 994, 997, 1000, 1001, 1004, 1006], "maxabsscal": [334, 369, 829, 850, 943, 963, 998, 1001, 1002, 1003, 1004, 1009, 1010], "passiveaggress": [334, 381], "fledg": [334, 381], "naivebay": 334, "dramat": 334, "fetcher": [338, 998, 1000, 1009], "miscellan": [338, 339, 974, 999, 1000, 1007, 1008, 1010, 1011], "linnerrud": [338, 989], "covertyp": [338, 455, 989], "rcv1": [338, 461, 989, 998], "svmlight": [338, 451, 472, 473, 989, 993, 994, 1000, 1002], "jpeg": [339, 340, 457, 458], "publish": [339, 340, 347, 349, 353, 359, 965, 973, 1005], "creativ": 339, "spare": [339, 638, 639], "pyplpt": 339, "load_svmlight_fil": [339, 993, 994, 999, 1000, 1001, 1008], "test_dataset": 339, "everybodi": [339, 345], "upload": [339, 343, 349, 357, 635], "mice": [339, 591, 943], "brain": 339, "miceprotein": 339, "1080": [339, 373], "sc": [339, 373], "clara": [339, 1005], "higuera": 339, "katheleen": 339, "gardin": 339, "krzysztof": 339, "cio": 339, "protein": 339, "cite": [339, 373], "kj": [339, 955], "critic": [339, 345, 358, 367, 380, 656, 950, 953, 961, 968, 977, 1004], "syndrom": 339, "plo": [339, 571, 572], "ONE": [339, 571, 572], "e0129126": 339, "40966": 339, "upload_d": 339, "08t16": 339, "17928620": 339, "file_id": 339, "default_target_attribut": 339, "row_id_attribut": 339, "mouseid": 339, "ignore_attribut": 339, "genotyp": 339, "cc18": 339, "study_135": 339, "study_98": 339, "study_99": 339, "md5_checksum": 339, "3c479a6885bfa0438971388283a1ce32": 339, "websit": [339, 340, 342, 345, 360, 363, 957, 967, 976, 977, 987, 994, 995, 996], "4550": 339, "17t14": 339, "1804243": 339, "pone": 339, "0129126": 339, "openml100": 339, "study_14": 339, "study_34": 339, "earliest": [339, 950], "iris_61": 339, "iris_969": 339, "969": 339, "iris_version_3": 339, "vanschoren": [339, 1005], "rijn": [339, 1001], "bischl": 339, "torgo": 339, "acm": [339, 340, 373, 384, 408, 414, 421, 424, 475, 527, 640, 689, 719, 811, 953, 956, 959, 965], "sigkdd": [339, 340, 475, 640, 846, 963, 965], "newslett": 339, "legaci": [339, 349, 359, 921, 993, 1000, 1005], "my": [339, 345, 350, 353, 460], "columnar": [339, 428, 972], "usabl": [339, 345, 347, 359, 367, 381, 762, 921, 993, 1000, 1007, 1008], "io": [339, 342, 343, 345, 349, 351, 353, 359, 367, 656, 972, 991], "json": [339, 345, 363], "sql": 339, "smoothli": 339, "manipul": [339, 369, 471, 921, 972, 999], "mat": [339, 381], "load_fil": [339, 340, 987, 995, 1007], "audio": [339, 467], "wish": [339, 345, 352, 354, 363, 373, 902, 979, 987, 1000], "imageio": 339, "wavfil": 339, "wav": 339, "hdf5": 339, "h5py": 339, "pytabl": 339, "april": [340, 628, 649, 650, 997, 1005], "AT": [340, 459], "laboratori": [340, 972], "cambridg": [340, 378, 554, 800, 804, 949, 951, 955], "facial": 340, "glass": 340, "upright": 340, "frontal": 340, "movement": 340, "credit": [340, 353, 380, 949, 977], "18846": [340, 452, 453], "scikit_learn_data": [340, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463], "20news_hom": 340, "newsgroups_train": 340, "11314": 340, "1073": 340, "20new": [340, 987], "34118": 340, "30000": 340, "01327": 340, "newsgroups_test": 340, "vectors_test": 340, "class_prior": [340, 800, 801, 802, 804, 994, 997], "fit_prior": [340, 800, 801, 802, 804], "88213": 340, "suspici": 340, "show_top10": 340, "top10": 340, "affili": 340, "abund": 340, "clue": [340, 353, 950], "bare": [340, 950, 987], "quotat": 340, "77310": 340, "76995": 340, "cleveland": 340, "indian": 340, "leagu": 340, "team": [340, 348, 357, 359, 972, 977, 993], "ohio": 340, "spark": [340, 973], "death": 340, "floyd": [340, 652, 950], "reckon": 340, "coloni": 340, "paul": [340, 996, 999, 1000, 1001, 1002, 1006, 1007], "dolan": 340, "nicknam": 340, "tribe": 340, "theme": [340, 363, 366, 993], "mlb": [340, 836], "inappropri": [340, 377, 383, 673, 783], "nlp": [340, 378, 381, 800, 804, 951, 977], "cultur": 340, "inflammatori": 340, "famou": [340, 342, 380, 968], "internet": [340, 350, 963, 985], "offici": [340, 347, 359, 363, 457, 461, 972, 987, 1001, 1002, 1005], "verif": [340, 953, 977], "identif": [340, 345, 373, 461, 942, 979], "viola": [340, 1001], "opencv": 340, "detector": [340, 359, 811], "5749": [340, 457, 458], "13233": [340, 457, 458], "5828": [340, 457, 458], "200m": 340, "lfw_home": 340, "rectangular": [340, 359, 902, 973], "1140": 340, "fetch_lfw_pair": [340, 998, 1008], "lfw_pairs_train": 340, "subdivid": [340, 383], "10_fold": [340, 457], "gari": [340, 1000], "huang": [340, 622, 999, 1004], "manu": 340, "ramesh": [340, 977, 996, 999, 1003], "tamara": [340, 1010], "berg": [340, 994, 995, 1005, 1010], "erik": [340, 977, 996], "miller": [340, 1001, 1002, 1006], "massachusett": 340, "amherst": 340, "30m": 340, "seven": [340, 946], "homepag": [340, 494, 969], "581012": [340, 455], "newswir": 340, "ltd": [340, 977], "804414": [340, 461], "47236": [340, 461], "fetch_rcv1": [340, 998, 1002], "v2": [340, 461, 628, 649, 650, 949], "chronolog": [340, 461], "23149": [340, 461, 1007], "781265": [340, 461], "lyrl2004": [340, 461], "2286": 340, "810596": 340, "2287": 340, "2288": 340, "uint32": [340, 461], "gmil": 340, "381327": 340, "ccat": 340, "e11": 340, "ecat": 340, "m11": 340, "656": 340, "lewi": [340, 1000, 1004], "yang": [340, 373, 378, 498, 603, 999, 1000, 1003, 1005, 1006, 1007, 1009, 1010], "rose": 340, "361": [340, 380, 519, 520], "397": 340, "cup": [340, 953], "tcpdump": 340, "darpa": 340, "intrus": 340, "lincoln": 340, "unrealist": 340, "sa": [340, 456], "logged_in": 340, "smtp": [340, 456], "resp": [340, 380, 561, 760, 761, 967, 1001], "4898431": [340, 456], "976158": 340, "699691": 340, "619052": 340, "95373": 340, "kddcup99": [340, 456], "richard": [340, 382, 622, 994, 1003, 1005, 1007, 1008], "lippmann": 340, "hain": 340, "jonathan": [340, 997, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1009], "korba": 340, "da": [340, 1008, 1009], "yamanishi": 340, "takeuchi": 340, "miln": 340, "discount": [340, 373, 689, 719, 1000, 1003], "sixth": 340, "press": [340, 373, 378, 383, 384, 408, 554, 574, 575, 578, 583, 586, 607, 800, 804, 946, 949, 951, 955], "household": 340, "statlib": 340, "dcc": 340, "ltorgo": 340, "cal_hous": 340, "1990": 340, "censu": 340, "bureau": 340, "resid": 340, "vacat": 340, "pace": 340, "kellei": [340, 995, 996], "ronald": [340, 957, 996, 1006], "barri": [340, 1001], "autoregress": 340, "hyperspher": [341, 972], "interleav": [341, 357, 486], "simplif": [341, 344, 350, 993, 999], "realiti": 341, "make_sparse_uncorrel": 341, "make_friedman1": [341, 380, 503, 507, 557, 558, 596], "make_friedman2": [341, 575, 577, 578, 579, 580, 581, 585, 588, 589], "reciproc": [341, 953], "make_friedman3": 341, "7826": 342, "4194": 342, "9490": 342, "9565": 342, "fisher": [342, 380, 468, 600, 972], "michael": [342, 371, 373, 414, 592, 601, 655, 760, 943, 949, 977, 987, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1004, 1005, 1007, 1008, 1010], "marshal": 342, "arc": [342, 380], "1988": 342, "sir": 342, "referenc": [342, 345, 347, 353, 359, 857, 858, 956, 1000, 1006], "duda": [342, 947], "hart": [342, 947, 1001], "taxonom": 342, "annual": [342, 373, 689, 719, 862, 953, 966], "eugen": [342, 994, 999], "1936": 342, "john": [342, 381, 500, 672, 698, 732, 840, 867, 868, 870, 871, 943, 949, 953, 993, 994, 995, 996, 998, 999, 1000, 1001, 1002, 1006, 1008, 1009, 1010], "wilei": [342, 943], "1950": [342, 953], "1973": [342, 371], "scene": [342, 343, 956, 958, 1006], "q327": 342, "d83": 342, "son": [342, 943], "isbn": [342, 373, 949], "471": 342, "22361": 342, "218": [342, 435, 679, 749], "dasarathi": 342, "1980": 342, "nose": [342, 996, 1000], "pami": [342, 373, 688], "gate": [342, 1006], "1972": 342, "431": 342, "mlc": 342, "cheeseman": 342, "autoclass": 342, "conceptu": [342, 380, 951], "alpaydin": 342, "boun": 342, "nist": [342, 953], "bitmap": 342, "preprint": 342, "32x32": 342, "nonoverlap": 342, "4x4": [342, 378, 381], "garri": 342, "candela": 342, "dimmick": 342, "geist": 342, "grother": 342, "janet": 342, "handprint": 342, "nistir": 342, "5469": 342, "kaynak": 342, "msc": 342, "graduat": 342, "bogazici": 342, "cascad": 342, "kybernetika": 342, "ken": [342, 987, 995, 1002], "tang": [342, 1003, 1004, 1005], "ponnuthurai": 342, "suganthan": 342, "yao": [342, 999, 1000, 1001, 1002, 1009, 1010], "kai": [342, 527, 959, 1000], "dimensionalityreduct": 342, "nanyang": 342, "technolog": 342, "claudio": [342, 1007, 1008, 1010], "gentil": [342, 1005], "linnerud": [342, 469], "men": 342, "club": 342, "waist": 342, "puls": 342, "chin": [342, 997], "situp": 342, "tenenhau": 342, "pratiqu": 342, "alcalin": 342, "magnesium": 342, "phenol": 342, "nonflavanoid": 342, "proanthocyanin": 342, "od280": 342, "od315": 342, "class_2": [342, 474], "278": [342, 805, 806], "1680": 342, "746": 342, "chemic": 342, "grown": [342, 380, 517, 518, 519, 520, 521, 522, 528, 529, 873, 874, 875, 876, 969], "itali": 342, "cultiv": 342, "thirteen": 342, "constitu": 342, "forina": 342, "parvu": 342, "pharmaceut": 342, "food": 342, "brigata": 342, "salerno": 342, "16147": 342, "genoa": 342, "lichman": 342, "irvin": 342, "aeberhard": 342, "cooman": 342, "vel": 342, "rep": 342, "dept": 342, "cook": [342, 993, 999], "north": [342, 373], "queensland": 342, "submit": [342, 343, 344, 347, 348, 349, 350, 353, 359, 360, 363], "technometr": [342, 375, 433, 438, 959], "rda": 342, "1nn": 342, "THE": 342, "OF": 342, "chemometr": 342, "272": [343, 363, 365, 366], "wheel": [343, 345, 349, 363, 1003, 1005, 1007], "quickest": 343, "registri": [343, 363, 972], "uninstal": 343, "git": [343, 347, 349, 351, 353, 976, 993, 1009], "fork": [343, 345, 349, 353, 357], "miniforge3": [343, 353], "miniforg": [343, 353, 363], "env": [343, 353, 363], "prompt": [343, 345, 363, 366, 381, 978], "newli": [343, 358, 380, 427, 960, 999, 1000, 1008], "virtualenv": [343, 345], "python3": [343, 363], "venv": [343, 363], "pep517": [343, 345], "dev0": [343, 349, 976], "pyx": [343, 345, 346, 351, 353], "pxd": [343, 345], "sklearn_fail_no_openmp": 343, "checkout": [343, 345, 349, 353], "cumbersom": 343, "reinstal": [343, 363], "setuptool": 343, "unix": [343, 381], "makefil": 343, "ninja": [343, 977], "recompil": [343, 346, 351, 363], "pyproject": [343, 349], "toml": [343, 349], "mesonpi": 343, "spin": 343, "studio": [343, 977], "vs_buildtool": 343, "desktop": 343, "screenshot": 343, "secondli": [343, 357, 373, 380, 621, 949, 987], "architectur": [343, 347, 353, 357, 363, 367, 432, 863, 957, 977, 993, 1010], "cmd": 343, "powershel": 343, "struct": [343, 359, 996], "calcsiz": 343, "distutils_use_sdk": 343, "x86": 343, "buildtool": 343, "vc": 343, "vcvarsal": 343, "bat": 343, "x64": 343, "clang": [343, 346], "confusingli": 343, "usr": 343, "gcc": [343, 346, 351, 357], "libomp": [343, 1005], "silicon": 343, "m1": [343, 369], "januari": [343, 345, 993, 994, 1003, 1005, 1008, 1010], "arm64": [343, 348], "llvm": 343, "toolchain": 343, "xcode": 343, "conflict": [343, 345, 349, 353, 363, 1000, 1001], "condarc": 343, "channel_prior": 343, "echo": [343, 349], "cxx": 343, "cflag": 343, "cxxflag": 343, "ldflag": 343, "subfold": [343, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 467, 1006], "fopenmp": [343, 346], "export": [343, 346, 347, 363, 367, 877, 878, 969, 972, 1002], "cppflag": 343, "xpreprocessor": 343, "wl": 343, "rpath": 343, "lomp": 343, "sudo": [343, 363], "apt": [343, 353, 363], "pip3": [343, 363], "pythonx": 343, "site": [343, 345, 348, 353, 363, 380, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 977, 1001], "precompil": 343, "arm": [343, 345, 353, 942], "cython3": 343, "cento": 343, "yum": 343, "devel": 343, "gnu": 343, "port": [343, 363, 1003], "pkg": 343, "build_ext": [343, 351], "build_clib": 343, "linker": [343, 346], "sysconfig": 343, "counterpart": [343, 942, 950, 968, 982], "get_config_var": 343, "sklearn_build_parallel": 343, "tracker": [344, 348, 353, 357, 360, 363, 367, 973], "prioriti": [344, 596, 793, 794, 973, 996], "guidelin": [344, 348, 350, 351, 353, 372, 373, 380], "reformul": 344, "xyz": 344, "someestim": 344, "welcom": [344, 345, 353, 360, 973], "relabel": [344, 780, 781, 862], "stall": [344, 348], "sprint": [344, 345, 993], "unfinish": [344, 345], "supersed": [344, 998], "overflow": [344, 353, 357, 996, 1000, 1001, 1002, 1003, 1004, 1006], "submitt": 344, "strive": [344, 360, 977], "expertis": [344, 345, 357], "unclear": [344, 345, 465], "pleasant": [344, 977], "chime": 344, "permiss": [344, 349, 360, 363, 977, 1008], "matthew": [344, 350, 500, 706, 993, 996, 1000, 1002, 1006, 1007], "rocklin": [344, 350], "acknowledg": [344, 573, 1010], "struggl": [344, 360, 373], "everyon": [345, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "underrepres": 345, "merit": [345, 349, 360], "teach": 345, "priceless": 345, "abid": 345, "codeofconduct": 345, "hesit": 345, "typo": [345, 360, 364, 993], "send": [345, 373, 385, 497], "burden": [345, 837, 973], "slep": [345, 359], "templat": [345, 349, 350, 359, 360, 521, 522, 527, 528, 529, 530, 972], "ecosystem": [345, 943, 971, 977], "numpydoc": [345, 359, 363, 366], "compli": [345, 359, 896, 973], "fulfil": [345, 373, 380, 762, 765, 766, 776, 825, 829, 949], "anyon": [345, 360, 976, 977], "gist": [345, 353, 976], "repo": [345, 349, 973, 976], "feasibl": [345, 834, 835, 845], "traceback": [345, 350, 353, 357, 432, 976, 1011], "curat": [345, 348, 349], "doubt": [345, 346, 349, 949, 959, 972], "companion": [345, 963], "transcript": 345, "inclus": [345, 347, 353, 414, 420, 717, 749, 953, 954, 993, 1007], "yourlogin": 345, "ruff": [345, 363, 366], "mypi": [345, 349, 363, 366, 1004], "synchron": [345, 381], "my_featur": 345, "commit": [345, 349, 353, 976, 993, 994, 995, 996], "modified_fil": 345, "committ": [345, 993], "modif": [345, 376, 380, 381, 410, 966, 1010], "approv": [345, 360, 380], "mrg": [345, 353], "incomplet": [345, 363, 369, 373, 669, 758, 943, 950, 987, 997, 999], "wip": [345, 353, 363], "matur": [345, 972, 973], "broad": [345, 359, 972], "collabor": 345, "_logist": 345, "doctest": [345, 359, 979, 993], "test_logist": [345, 353], "test_common": [345, 353], "caught": [345, 353, 367], "submodul": [345, 349, 351, 372, 945, 951, 993], "intricaci": 345, "narr": [345, 359, 622, 865, 870, 993, 994], "unittest": 345, "tests_for_packag": 345, "static": [345, 347, 351, 353, 610, 611, 616, 617, 624, 625, 626, 627], "astropi": 345, "linux": [345, 347, 348, 353, 972, 993], "gh": 345, "lint": [345, 353], "nogil": [345, 346], "cpython": [345, 346, 351, 1008], "pyodid": [345, 921], "sklearn_run_float32_test": 345, "lengthi": [345, 357], "etiquett": 345, "she": [345, 855, 856, 1003], "he": [345, 689, 719, 822, 823, 855, 856, 953, 987, 1000, 1007, 1008], "shorten": [345, 968, 1006], "leader": [345, 977], "grab": 345, "familiar": [345, 379, 1001], "acquaint": 345, "experienc": 345, "abandon": 345, "someon": [345, 349, 359, 993], "glad": 345, "restructuredtext": 345, "some_param": 345, "hello": [345, 353, 914, 918], "goodby": 345, "liter": [345, 349, 977], "array_paramet": 345, "list_param": 345, "typed_ndarrai": 345, "multioutput_arrai": 345, "bracket": [345, 949], "delimit": [345, 959, 1008], "colon": 345, "selectfpr": [345, 382, 556, 559, 562, 563, 564, 570, 1009], "defer": 345, "backtick": [345, 350], "nowadai": 345, "dropdown": 345, "pragmat": 345, "bibliograph": 345, "arxiv": [345, 426], "_my": 345, "ref": [345, 353, 943, 999], "currentmodul": 345, "succeed": 345, "editor": [345, 353, 357], "_build": 345, "viewabl": 345, "pillow": [345, 363, 366], "sphinxext": [345, 363, 366], "opengraph": [345, 363, 366], "copybutton": [345, 363, 366], "vast": 345, "examples_pattern": 345, "your_regex_goes_her": 345, "no_mathjax": 345, "latexpdf": 345, "stone": [345, 873, 874, 969], "subdirectori": 345, "subpackag": [345, 349, 997, 1002], "cleanup": [345, 993], "charg": 345, "test_requiring_mpl_fixtur": 345, "hang": [345, 1003, 1004], "fruit": [345, 954], "asv": 345, "asv_benchmark": 345, "airspe": 345, "veloc": 345, "publicli": [345, 1003], "zero_on": [345, 994], "zero_one_loss": [345, 369, 667, 697, 953, 994, 995, 996, 1010], "futurewarn": [345, 353, 1000, 1001, 1002, 1004, 1006, 1009, 1010], "example_funct": 345, "exampleestim": 345, "_n_cluster": 345, "versionchang": 345, "meet": [345, 357, 360, 382, 536, 567, 822, 823, 862, 953, 966, 977, 1001, 1002, 1003], "nit": 345, "retract": 345, "grammar": 345, "disambigu": [345, 793, 862, 966, 1008], "Will": [345, 461, 498, 591, 608, 609, 610, 616, 620, 621, 624, 625, 626, 627, 628, 629, 637, 639, 671, 678, 751, 830, 834, 844, 845, 996, 997, 999, 1001], "clariti": [345, 353], "unhelp": 345, "extran": 345, "rewritten": [345, 613, 995, 997], "generos": 345, "reward": 345, "heard": 345, "enemi": 345, "courtesi": 345, "justifi": [345, 351, 371, 529], "occas": 345, "deserv": [345, 351], "digest": [345, 1008], "overwhelm": 345, "sheer": [345, 977], "myself": 345, "trickiest": 345, "buri": 345, "mixin": [345, 359, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 565, 896, 995, 1004, 1008], "grep": 345, "delai": [345, 460, 762, 776, 786, 787, 921, 1007, 1008], "some_funct": [345, 892], "some_iter": 345, "flavor": [345, 956], "pointer": [345, 353, 406, 1002], "mandatori": [345, 381, 393, 595], "favorit": [345, 357, 977], "Being": [345, 359, 360, 367, 949, 956], "killer": [345, 977], "blame": 345, "migrat": [345, 993], "ignorerevsfil": 345, "rev": [345, 571, 572], "ruin": 345, "maco": [346, 348, 363, 369, 1001, 1005, 1007], "sklearn_enable_debug_cython_direct": 346, "scratch": [346, 406, 953, 995], "gdb": [346, 348, 976], "entrypoint_to_bug_reproduc": 346, "cdef": 346, "state_to_print": 346, "test_val": 346, "fuse": [346, 999, 1009], "shell": [346, 353, 357, 978, 987], "cythonx": 346, "language_level": 346, "wraparound": 346, "initializedcheck": 346, "nonecheck": 346, "cdivis": 346, "pep073": 346, "pathwai": 346, "memoryview": 346, "cnp": 346, "lightweight": [346, 762, 776, 786, 787, 972], "virtual": [346, 363, 377, 977], "enter": [346, 349, 373, 406, 960], "prang": 346, "void": 346, "my_func": [346, 351], "st\u00e9fan": 346, "benhel": 346, "_cython_bla": 346, "protect": [346, 349, 919], "_openmp_help": 346, "cimport": [346, 354, 1001], "omp_get_max_thread": 346, "prolifer": 347, "adopt": [347, 357, 359, 861, 953, 967, 1001, 1008, 1010], "predomin": [347, 994], "overrid": [347, 381, 410, 414, 421, 506, 512, 552, 553, 555, 557, 558, 561, 620, 628, 649, 650, 768, 784, 807, 808, 809, 811, 813, 815, 816, 817, 993, 1001, 1003, 1007, 1009], "creation": [347, 475, 476, 477, 479, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 620, 805, 806, 977, 1000, 1001, 1002, 1006], "optimis": [347, 373, 956, 996, 1006, 1008], "param1": [347, 984], "param2": [347, 984], "param3": 347, "postpon": [347, 349], "requisit": 347, "liner": [347, 791], "ipython": [347, 350, 351, 353, 979, 987], "session": [347, 351, 357, 363, 971, 977, 987], "trainabl": 347, "trail": [347, 937], "overridden": [347, 359, 383, 506, 512, 580, 585, 588, 658, 1001, 1002, 1009], "n_features_in_": [347, 359, 394, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 428, 429, 433, 434, 435, 436, 437, 438, 439, 440, 446, 447, 448, 449, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 574, 575, 591, 592, 593, 594, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 652, 653, 654, 655, 656, 760, 761, 762, 765, 766, 776, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 821, 822, 823, 824, 825, 828, 829, 830, 831, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 857, 858, 860, 861, 862, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 1004, 1006, 1008, 1011], "slep010": [347, 1004], "duck": [347, 359, 1003], "check_x_i": [347, 354, 997, 1001, 1002, 1007], "check_arrai": [347, 354, 432, 498, 863, 997, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "templateclassifi": 347, "demo_param": 347, "myestim": [347, 387, 389, 390, 392, 393, 394, 395, 396], "subestim": 347, "my_extra_param": 347, "my_estim": [347, 374], "subestimator__c": 347, "subestimator__class_weight": 347, "subestimator__du": 347, "subestimator__fit_intercept": 347, "subestimator__intercept_sc": 347, "subestimator__l1_ratio": 347, "subestimator__max_it": 347, "subestimator__multi_class": 347, "subestimator__n_job": 347, "subestimator__penalti": 347, "subestimator__random_st": 347, "subestimator__solv": 347, "subestimator__tol": 347, "subestimator__verbos": 347, "subestimator__warm_start": 347, "__c": 347, "__class_weight": 347, "unpack": 347, "easiest": [347, 353, 374, 950], "__repr__": [347, 973, 1002], "setattr": 347, "deepcopi": 347, "__sklearn_clone__": [347, 398, 1009], "frozen": 347, "frozentransform": 347, "fitted_transform": [347, 428], "__getattr__": 347, "_estimator_typ": [347, 359, 390, 391, 392, 395, 396, 998], "clustermixin": [347, 1010], "is_classifi": [347, 359], "programmat": [347, 463, 1002], "_get_tag": [347, 1004], "allow_nan": [347, 884, 886, 1009], "array_api_support": [347, 369], "binary_onli": [347, 1003, 1004], "multioutput_onli": 347, "no_valid": 347, "non_determinist": [347, 1007], "primari": [347, 359, 378, 479, 960, 976, 977], "_safe_split": 347, "preserves_dtyp": 347, "poor_scor": 347, "requires_fit": 347, "requires_positive_x": [347, 1003, 1008], "requires_i": [347, 390, 396, 1004], "requires_positive_i": 347, "_skip_test": 347, "_xfail_check": 347, "check_nam": 347, "xfail": [347, 353], "skiptestwarn": 347, "x_type": 347, "2darrai": 347, "signifi": [347, 373, 545, 773, 958], "1dlabel": 347, "2dlabel": 347, "_more_tag": 347, "mymultioutputestim": 347, "ridgeregress": 347, "idiosyncrat": 347, "onetoonefeaturemixin": [347, 397], "classnameprefixfeaturesoutmixin": [347, 397, 1008], "auto_wrap_output_kei": 347, "mytransform": [347, 397], "__init_subclass__": 347, "invok": [347, 495, 501, 503, 509, 510, 531, 533, 534, 786, 862, 1005, 1010], "estimator_html_repr": [347, 374, 1004, 1005, 1006, 1007, 1010], "_doc_link_modul": 347, "_doc_link_templ": 347, "_doc_link_url_param_gener": 347, "estimator_modul": 347, "ownership": 347, "pep8": [347, 349, 353], "indent": [347, 919], "nsampl": [347, 760, 761], "statement": [347, 350, 353, 357, 359, 378, 987], "flow": 347, "client": [347, 921], "corollari": 347, "foo": [347, 545, 957], "baz": [347, 545], "pyflak": 347, "asanyarrai": 347, "hadamard": 347, "choose_random_sampl": 347, "freestand": 347, "unmodifi": [347, 359], "random_state_": [347, 500, 591, 814, 1007], "gaussiannois": 347, "quasi": [347, 822, 823, 949], "assert_allclos": 347, "rtol": [347, 805, 806, 810], "atol": [347, 636, 638, 805, 806, 810], "checklist": 348, "unclaim": 348, "workflow": [348, 349, 358, 377], "craft": 348, "markdown": 348, "saniti": [348, 829, 953, 993, 994], "outdat": 348, "diff": [348, 953], "valgrind": 348, "platform": [348, 359, 360, 367, 972, 976, 977, 998, 1001, 1002, 1004, 1006, 1007, 1010], "x86_64": [348, 363], "yep": 348, "gperftool": 348, "debugg": [348, 353], "gprof": 348, "callgrind": 348, "kcachegrind": 348, "warm": [348, 359, 495, 501, 507, 509, 510, 574, 617, 623, 630, 631, 632, 640, 641, 642, 949, 973, 1003, 1005, 1007], "meson": 348, "homebrew": [348, 363], "freebsd": 348, "rrrcn": 349, "pep101": 349, "build_tool": 349, "blocker": 349, "mileston": 349, "maint_tool": 349, "sort_whats_new": 349, "whats_miss": 349, "fixm": [349, 359], "feedstock": 349, "recip": [349, 950, 977], "yaml": 349, "whats_new": [349, 353], "v0": [349, 435, 436, 442, 476, 552, 553, 555, 762, 776, 824, 827, 994, 1001, 1002, 1003], "freez": [349, 363, 367, 973, 977, 1001], "0rc1": 349, "__version__": 349, "draft": [349, 360], "rebas": 349, "bugfix": [349, 993, 1007], "backport": [349, 354, 1000], "maint": 349, "enh": 349, "blindli": 349, "invit": 349, "cherri": 349, "shortlog": 349, "f2": [349, 954], "sed": [349, 993], "front": [349, 1000], "rc1": 349, "suffix": [349, 363, 788, 953, 1003], "brows": 349, "oldest": [349, 460], "abi": 349, "acronym": 349, "deliveri": 349, "whl": 349, "went": [349, 953], "bot": [349, 958, 1007, 1010], "sync": 349, "testpypi": 349, "tarbal": [349, 1008], "wheelhouse_upload": 349, "twine": 349, "rrr": 349, "symlink": 349, "latestst": 349, "tmp": 349, "ln": [349, 949, 957, 963], "versionwarn": 349, "secur": [349, 359, 972, 973, 977, 989], "twitter": 349, "linkedin": 349, "authorship": 349, "permalink": 349, "_hist_gradient_boost": 349, "_iter": 349, "pickl": [349, 359, 367, 381, 552, 553, 555, 805, 806, 972, 973, 995, 998, 999, 1000, 1001, 1002, 1003, 1006, 1007, 1008, 1009, 1010], "checker": [349, 785], "type_check": 349, "test_enable_hist_gradient_boost": 349, "enable_hist_gradient_boost": [349, 1002], "enable_my_experimental_featur": 349, "indefinit": 349, "incentiv": 349, "workabl": 350, "stackoverflow": [350, 353, 357, 976], "blogpost": 350, "mcve": [350, 357], "my_data": 350, "with_mean": [350, 845, 856, 963, 1001, 1006], "default_scor": 350, "other_scor": 350, "scrollbar": 350, "tripl": 350, "fenc": 350, "qualifi": 350, "a674e682c281": 350, "lda_featur": 350, "lda_model": 350, "n_topic": [350, 500, 1000], "minimalist": [350, 381, 976], "continuous_featur": 350, "positive_featur": 350, "invest": [351, 977], "idiom": 351, "crunch": 351, "performancetip": 351, "reimplement": [351, 357, 359, 999, 1003], "spottabl": 351, "amen": [351, 357, 383, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 942], "cpp": 351, "engag": [351, 360, 976], "tent": 351, "somewher": [351, 953, 987], "prun": 351, "14496": [351, 1002], "682": 351, "ncall": 351, "tottim": 351, "percal": 351, "cumtim": 351, "lineno": 351, "017": [351, 435, 436], "_nls_subproblem": 351, "1263": 351, "_po": 351, "057": [351, 790], "_initialize_nmf": 351, "010": [351, 790, 961], "_spars": 351, "_neg": 351, "337": 351, "461": 351, "hotspot": 351, "16159": [351, 1004], "840": 351, "2833": 351, "653": [351, 575, 578, 589], "_dotbla": 351, "651": 351, "036": [351, 436], "1397": 351, "2780": 351, "064": [351, 961], "1542": 351, "043": 351, "2734": 351, "fromnumer": 351, "1185": 351, "lapack_lit": 351, "dgesdd": 351, "rewrit": [351, 357, 969, 986, 993], "shallow": [351, 380, 525, 526, 880], "4x": [351, 1008], "line_profil": 351, "wire": [351, 498, 505], "profile_default": 351, "ipython_config": 351, "terminalipythonapp": 351, "interactiveshellapp": 351, "lprun": 351, "qtconsol": 351, "_nmf": 351, "73153": 351, "h_init": 351, "5863": 351, "172": [351, 457, 458, 613, 949], "nl": 351, "175": [351, 963], "112141": 351, "2336": 351, "wtv": 351, "176": [351, 798, 954, 961], "16144": 351, "336": [351, 963], "wtw": 351, "177": 351, "1880": 351, "195133": 351, "305": 351, "grad": [351, 977], "495761": 351, "777": 351, "proj_gradi": 351, "130": 351, "1474": 351, "4474": 351, "inner_it": 351, "83833": 351, "hn": 351, "194239": 351, "191": [351, 954], "48858": 351, "150407": 351, "gradd": 351, "515390": 351, "dqd": 351, "pin": 351, "memory_profil": [351, 363, 366], "memit": 351, "mprun": 351, "1e7": 351, "402344": 351, "standalon": [351, 622, 865], "bianp": 351, "reactiv": 351, "conda_prefix": 351, "pydebug": 351, "extra_cflag": 351, "dpy_debug": 351, "num_cor": 351, "dbg": 351, "fortun": [351, 380, 987, 1006, 1007], "my_fil": 351, "callgrin": 351, "prof": 351, "encapsul": [352, 374, 387, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 428, 433, 434, 435, 437, 438, 439, 440, 446, 447, 448, 449, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 513, 514, 515, 516, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 545, 546, 547, 552, 553, 554, 555, 556, 559, 560, 561, 562, 563, 564, 567, 574, 575, 591, 592, 593, 594, 599, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 638, 640, 641, 642, 643, 644, 652, 653, 654, 655, 656, 760, 761, 762, 763, 764, 765, 766, 767, 769, 770, 771, 772, 775, 776, 777, 778, 779, 780, 781, 782, 783, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 821, 822, 823, 825, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 857, 858, 860, 861, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876], "artist": [352, 402, 596, 662, 664, 665, 666, 768, 784, 879], "classmethod": [352, 402, 595, 596, 661, 662, 663, 664, 665, 666, 768, 784, 911], "line_": [352, 402, 662, 664, 665, 666, 768, 784], "gridspecfromsubplotspec": 352, "subplot_spec": 352, "get_subplotspec": 352, "ax_top_left": 352, "ax_top_right": 352, "ax_bottom": 352, "bounding_ax_": [352, 596], "lines_": [352, 596, 768, 784], "contours_": [352, 596], "advic": [353, 383, 586, 587], "forth": 353, "userscript": 353, "tampermonkei": 353, "greasemonkei": 353, "shortcut": [353, 383], "pr_number": 353, "navig": [353, 995], "overlai": [353, 596], "codecov": 353, "test_sparsifi": 353, "pdb": 353, "ipdb": [353, 987], "pdbcl": 353, "terminalpdb": 353, "lf": 353, "ff": 353, "tb": [353, 535, 536, 537, 538, 539, 540, 541, 542], "runxfail": 353, "werror": 353, "mailman": 353, "listinfo": 353, "crowd": [353, 360, 950, 973], "imped": 353, "attent": [353, 571, 572, 967], "minimal_reproduc": 353, "pytb": 353, "stdin": [353, 987], "perman": 353, "25163598": 353, "issuenumb": 353, "1506": 353, "volunt": 353, "establish": [353, 357, 360, 943], "clarifi": [353, 360, 756], "regression_test": 353, "0008": 353, "patienc": [353, 359], "crop": [353, 1008], "manifest": [353, 950, 956], "fault": [353, 1001, 1003, 1005], "glibc": 353, "uniniti": 353, "trace": [353, 373, 386, 437, 439, 440, 443, 444, 445, 653, 657, 950, 1004], "supp": 353, "readm": [353, 381, 457], "my_test_script": 353, "mobil": 353, "deploy": [353, 972, 973, 977], "scalewai": 353, "aw": 353, "graviton": 353, "workstat": 353, "qemu": 353, "docker": [353, 367, 1006, 1007], "multiarch": 353, "ppc64le": 353, "filesystem": [353, 363, 1006], "pushd": 353, "wget": 353, "aarch64": 353, "arm64v8": 353, "mount": 353, "pwd": 353, "reinit": 353, "bashrc": 353, "ephemer": 353, "persist": [353, 357, 378, 410, 574, 575, 821, 958, 972, 989, 999, 1002], "evolv": [354, 1008], "as_float_arrai": 354, "column_or_1d": [354, 1004, 1008], "multitarget": 354, "multi_output": [354, 885], "safe_index": [354, 1003], "check_memori": [354, 359, 1000], "denot": [354, 359, 363, 371, 373, 377, 380, 552, 553, 555, 762, 768, 776, 784, 838, 839, 938, 942, 945, 949, 951, 953, 954, 963, 966, 978, 1010], "5488135": 354, "71518937": 354, "60276338": 354, "54488318": 354, "has_fit_paramet": 354, "randomized_range_find": [354, 994, 999], "arrayfunc": [354, 372], "cholesky_delet": 354, "min_po": 354, "least_angl": 354, "fast_logdet": 354, "safe_sparse_dot": [354, 1003], "weighted_mod": 354, "sample_without_replac": [354, 999], "n_popul": [354, 922], "sparsefunc": [354, 372, 1006], "mean_variance_axi": [354, 999, 1006], "sparsefuncs_fast": [354, 372], "inplace_csr_row_normalize_l1": 354, "inplace_csr_row_normalize_l2": 354, "inplace_csr_column_scal": 354, "sort_graph_by_row_valu": [354, 1008], "single_source_shortest_path_length": 354, "dijkstra": [354, 652, 950], "graph_shortest_path": [354, 1006], "all_estim": [354, 1003, 1004, 1008], "all_displai": [354, 1008], "all_funct": [354, 1008], "is_multilabel": [354, 1010], "dict_learn": [354, 495, 501, 510, 994, 1001, 1003, 1006, 1007, 1009], "gen_batch": [354, 906], "safe_mask": 354, "safe_sqr": 354, "murmurhash3_32": 354, "murmurhash3_x86_32": [354, 918], "cryptograph": 354, "lookup": [354, 918, 1002], "bloom": [354, 918], "384616559": 354, "3910350737": 354, "murmurhash": 354, "graphical_lasso": [354, 435, 436, 1001, 1009], "kit": 357, "toolbox": [357, 972, 977], "multilay": [357, 951], "kera": [357, 972], "forese": 357, "redesign": [357, 993], "pystruct": [357, 972], "ssvm": 357, "seqlearn": 357, "harwar": 357, "fusion": 357, "22438": 357, "4143": 357, "meanwhil": [357, 968], "pipegraph": 357, "squared_loss": [357, 1006], "undertak": 357, "slowli": [357, 359, 508, 902], "ordinarili": [357, 359], "corrobor": 357, "proof": [357, 380, 859, 965], "road": 357, "bridg": [357, 950, 972], "reproduct": [357, 949], "guidanc": [357, 383], "gitter": [357, 1000, 1001], "value_kei": [357, 880], "levenshtein": 357, "dna": [357, 592, 943], "rna": 357, "pain": 357, "suppli": [357, 373, 610, 885, 886, 956, 977, 997, 999, 1001, 1006], "leven": 357, "acctcctagaag": 357, "acctactagaagtt": 357, "gaatattaggccga": 357, "lev_metr": 357, "multiprocess": [357, 359, 919, 921, 956, 993, 1001, 1007], "exec": 357, "cuda": [357, 369], "reiniti": 357, "culprit": 357, "refus": [357, 855, 856], "forkserv": 357, "joblib_start_method": 357, "set_start_method": 357, "dozen": [358, 383], "leakag": [358, 359, 374, 989], "disclos": 358, "entail": [358, 843, 845, 967], "r_squar": 358, "searchcv": [358, 1008], "tacit": 359, "inconsist": [359, 367, 381, 472, 473, 540, 867, 870, 889, 959, 968, 989, 993, 998, 999, 1000, 1001, 1003, 1006, 1008, 1009, 1010], "elsewher": [359, 426, 427, 435, 436, 442], "formal": [359, 360, 373, 380, 805, 806, 950, 953, 954, 957], "thereof": 359, "transduct": [359, 373, 860, 861, 973], "position": 359, "serial": [359, 387, 909, 972, 973, 989, 993, 1001, 1005, 1010], "unpickl": [359, 367, 540, 805, 806, 999, 1005, 1009], "pep257": 359, "nuanc": 359, "flaw": [359, 380], "terminologi": [359, 1001], "est1": [359, 596], "est2": [359, 596], "exemplifi": 359, "_score": [359, 762, 776, 788, 953, 993, 1006], "_loss": [359, 953], "divers": [359, 380], "abstract": [359, 378, 383, 582, 732, 972, 993], "descriptor": [359, 472, 473], "hoc": 359, "spectral_embed": [359, 950, 994, 997, 999, 1001, 1003, 1006, 1007, 1008, 1010], "maxabs_scal": [359, 834, 1001], "astrai": 359, "readthedoc": 359, "entireti": 359, "shield": 359, "n_target": [359, 376, 446, 447, 448, 449, 488, 520, 575, 607, 610, 611, 614, 615, 616, 617, 618, 620, 621, 624, 625, 626, 627, 628, 629, 635, 636, 637, 638, 639, 645, 646, 647, 648, 649, 650, 651, 954, 1005, 1007, 1009], "synonym": [359, 807, 808, 809, 815, 816, 817], "themat": 359, "alphanumer": [359, 552, 553, 555], "statistician": [359, 845], "prescrib": 359, "baggingclassifi": [359, 364, 380, 520, 875, 894, 943, 996, 999, 1000, 1001, 1004, 1008, 1009], "estimator__max_depth": [359, 942], "improp": [359, 1000], "pairwise_kernel": [359, 383, 416, 426, 607, 728, 831, 951, 993, 1000, 1010], "redundantli": 359, "distancemetr": [359, 379, 808, 956, 1001, 1005, 1006, 1007, 1010], "di": [359, 373, 378, 495, 501, 628, 649, 650, 858, 997, 1006], "vectori": [359, 1003], "noun": 359, "venu": 359, "broadli": [359, 373], "consolid": [359, 360, 993], "coo": [359, 517, 518, 656, 832, 881, 885, 886, 956, 994, 1010], "lil": [359, 517, 518, 832, 881, 907, 956], "csgraph": [359, 1006], "absent": [359, 381, 692, 717, 786], "densifi": [359, 622, 623, 630, 631, 632, 640, 641, 642, 865, 943, 995], "lossili": 359, "unnorm": [359, 500, 950, 999, 1000], "encompass": [359, 414, 420, 519, 520, 950], "is_regressor": 359, "get_n_split": [359, 763, 764, 767, 769, 770, 771, 772, 775, 777, 778, 779, 780, 781, 782, 783], "estimatorcv": [359, 973], "loo": [359, 770, 1004], "router": [359, 364, 910, 911, 912, 913], "lexicograph": [359, 531, 751, 757, 807, 815], "type_of_target": [359, 832, 846, 954, 1007, 1008, 1010], "hashabl": [359, 833, 836, 964], "labelencod": [359, 533, 839, 964, 993, 1001, 1008, 1009], "canonic": 359, "xxx": 359, "everywher": 359, "multilabelbinar": [359, 794, 829, 838, 954, 978, 996, 998, 999, 1001, 1002], "nonetheless": [359, 953], "wherein": 359, "amber": 359, "return_cov": [359, 531, 532, 575, 825], "_idx": 359, "label1": 359, "label2": 359, "class_label": [359, 521, 525, 528, 622, 623, 630, 632, 638, 639, 640, 873, 875, 891, 968], "bincount": [359, 377, 521, 525, 528, 622, 623, 630, 632, 638, 639, 640, 865, 867, 870, 873, 875, 890, 891, 1000], "rebalanc": 359, "compute_class_weight": [359, 996, 1007], "check_cv": [359, 998], "obei": [359, 951], "triangl": [359, 378, 407, 411, 423, 663, 951, 956], "concurr": [359, 381, 919, 1005, 1007], "check_scor": 359, "uppercas": [359, 1006], "unavail": [359, 622, 623, 914, 1000, 1006], "deadlock": 360, "meritocrat": 360, "somebodi": 360, "unanim": 360, "emeritu": 360, "recant": 360, "outreach": 360, "brand": [360, 363], "social": [360, 373, 977], "authorit": 360, "strateg": 360, "entiti": [360, 689, 719], "duti": 360, "resign": 360, "occasion": [360, 690, 1002], "escal": 360, "fallback": [360, 363, 793, 794, 953], "hereaft": 360, "lazi": [360, 381, 967, 997], "opinion": 360, "slep020": 360, "veto": 360, "appeal": 360, "revis": [360, 634], "slep000": 360, "insuffici": [362, 952, 986], "afraid": 363, "packg": 363, "miniconda": 363, "administr": 363, "dnf": 363, "pacman": 363, "raspberri": 363, "polar": [363, 366, 397, 406, 407, 409, 411, 413, 428, 432, 446, 447, 448, 449, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 513, 525, 526, 530, 531, 532, 533, 534, 545, 546, 547, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 591, 592, 593, 594, 599, 602, 603, 604, 605, 606, 652, 653, 656, 809, 814, 817, 821, 825, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 857, 858, 863, 987, 1010], "pyarrow": [363, 366], "sphinxcontrib": [363, 366], "sass": [363, 366], "toctre": [363, 366], "lock": [363, 366, 919, 921], "py3": 363, "apk": 363, "bind": [363, 972, 993, 1000, 1001], "pkgsrc": 363, "py39": 363, "intelex": [363, 972], "oned": 363, "sklearnex": 363, "plugin": 363, "appdata": 363, "usernam": 363, "windowsapp": 363, "oserror": [363, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462], "errno": 363, "pythonsoftwarefound": 363, "7_qbz5n2kfra8p0": 363, "localcach": 363, "python37": 363, "292": [363, 380, 698], "data_nam": 363, "australian": 363, "data_vers": 363, "lift": 363, "regedit": 363, "menu": 363, "hkey_local_machin": 363, "currentcontrolset": 363, "longpathsen": 363, "broken": [363, 377, 563, 564, 599, 684, 881, 953, 969, 996, 1000, 1001, 1002, 1004, 1007], "unsupport": [364, 367, 457, 1001, 1006], "set_": 364, "_request": 364, "weighted_acc": 364, "sample_weigh": 364, "sel": [364, 382], "scoring_weight": 364, "fitting_weight": 364, "hasn": 364, "larscv": [364, 614, 629, 646, 647, 1000, 1006, 1010], "multitaskelasticnetcv": [364, 610, 611, 616, 624, 626, 627, 645, 949, 996, 1003, 1004, 1006, 1010], "multitasklassocv": [364, 625, 626, 996, 1003, 1004, 1006, 1010], "multioutputclassifi": [364, 751, 794, 796, 798, 953, 1000, 1002, 1003, 1004, 1005, 1009, 1010], "regressorchain": [364, 796, 798, 1001, 1004, 1008], "ridgeclassifiercv": [364, 637, 638, 751, 953, 954, 1001, 1003, 1004, 1006, 1007], "retrain": [367, 973, 1009], "inconsistentversionwarn": [367, 1009], "simplefilt": 367, "model_from_prevision_vers": 367, "original_sklearn_vers": [367, 540], "untrust": 367, "malici": 367, "inadvis": 367, "immut": 367, "snapshot": [367, 523, 524, 973], "portabl": [367, 972], "alex": [367, 381, 968, 993, 996, 1001, 1003, 1004, 1005, 1007, 1008, 1009, 1010], "gaynor": 367, "sio": 367, "get_untrusted_typ": 367, "unknown_typ": 367, "exchang": [367, 976], "markup": 367, "pmml": [367, 972], "onnx": [367, 972, 973], "xml": 367, "sklearn2pmml": [367, 972], "affero": 367, "gplv3": 367, "datastructur": [369, 1001, 1005], "namespac": 369, "array_api": 369, "x_np": 369, "y_np": 369, "x_cu": 369, "y_cu": 369, "array_api_dispatch": [369, 432, 863], "_estimator_with_converted_arrai": 369, "transfer": [369, 949, 973], "_array_api": 369, "cupy_to_ndarrai": 369, "lda_np": 369, "torch": 369, "x_torch": 369, "y_torch": 369, "power_iteration_norm": [369, 505, 508, 901, 902, 1007], "kernelcenter": [369, 963, 1003, 1007, 1009, 1010], "array_api_compat": 369, "metal": 369, "shader": 369, "m2": 369, "chip": [369, 977], "77764": 369, "pytorch_enable_mps_fallback": 369, "submatrix": [370, 388, 415, 417], "unusu": [370, 959, 963, 1001], "submatric": 370, "bipartit": [370, 417, 475, 958], "subgraph": 370, "a_n": 370, "lceil": [370, 959], "log_2": [370, 527, 959], "rceil": [370, 959], "bmatrix": [370, 945], "u_2": [370, 945], "u_": [370, 446, 447, 448], "n_column": [370, 415, 417], "inderjit": [370, 417], "spectralbiclust": [370, 417, 995, 999, 1000, 1004], "blockwis": [370, 949], "bistochast": [370, 415], "l_": [370, 575, 616, 704, 953], "k_": [370, 383, 580, 583, 585, 588, 737, 945, 963], "u_1": [370, 945], "v_1": 370, "v_2": 370, "v_": [370, 381], "kluger": [370, 415, 477], "yuval": [370, 415], "microarrai": [370, 415, 477, 592, 943], "cap": [370, 373, 718, 953, 1002], "hochreit": [370, 683], "hungarian": [370, 683], "bodenhof": [370, 683], "fabia": [370, 683], "acquisit": [370, 683], "murphi": [371, 607, 946], "discriminatori": 371, "wilk": 371, "tricki": [371, 950], "logit": [371, 383, 622, 623, 949], "f_i": 371, "train_set": 371, "test_set": 371, "disjoint": [371, 373, 374, 401, 668, 694, 718, 720, 950], "platt": [371, 401, 867, 868, 870, 871, 968], "_i": [371, 380, 944, 949, 953, 957, 968], "_j": [371, 944], "f_j": [371, 961], "meteorologi": 371, "climatologi": 371, "precipit": 371, "wea": 371, "640": [371, 454, 470, 471, 547, 548, 942], "650": 371, "1990a": 371, "menon": 371, "ak": [371, 1007, 1008], "jiang": [371, 997, 1004], "xj": 371, "vembu": 371, "ohno": 371, "machado": [371, 686], "703": [371, 477], "kull": [371, 953], "silva": [371, 652, 950, 1004, 1006], "filho": 371, "flach": [371, 953], "mario": [371, 997, 999, 1007, 1008, 1009], "w\u00fcthrich": 371, "merz": 371, "actuari": 371, "refurbish": 372, "rough": [372, 959, 980], "uniti": 372, "lipschitz": [372, 965], "mod": 372, "usecas": 373, "mu_j": 373, "coher": 373, "elong": 373, "lloyd": [373, 407, 411, 413, 423, 1007, 1008], "distant": [373, 656, 673, 956], "comapar": 373, "sergei": [373, 995, 999, 1000, 1001, 1002, 1003], "vassilvitskii": [373, 411, 424], "eighteenth": 373, "siam": [373, 377, 416, 424, 426, 499, 505], "industri": [373, 972], "predetermin": [373, 950], "scullei": 373, "19th": 373, "exemplar": [373, 404, 418, 986], "sent": [373, 794], "leftarrow": [373, 957, 967], "foral": [373, 383, 577], "neq": [373, 953, 955, 963], "notin": 373, "hill": [373, 412, 425, 1003], "climb": [373, 412, 425], "maxima": 373, "x_j": [373, 383, 578, 579, 583, 586, 587, 589, 944, 945, 949, 956, 968, 969], "dictat": 373, "solvabl": 373, "stella": [373, 416, 426], "jianbo": [373, 416, 426, 655], "shi": [373, 416, 426, 655], "anil": [373, 416, 426], "daml": [373, 416, 426], "victor": [373, 416, 426, 1000, 1003], "minden": [373, 416, 426], "lex": [373, 416, 426], "ying": [373, 416, 426, 1007], "adjac": [373, 378, 416, 426, 549, 550, 599, 655, 659, 907, 950, 956, 986], "adjacency_matrix": 373, "ulrik": [373, 416, 426, 655], "von": [373, 416, 426, 655, 972, 1000, 1001], "luxburg": [373, 416, 426, 655], "jitendra": [373, 416, 426, 655], "malik": [373, 416, 426, 655], "walk": [373, 379, 996], "marina": 373, "meila": 373, "ng": [373, 378, 655, 811, 957, 959, 1004], "jordan": [373, 378, 655, 760, 1003, 1004, 1007, 1008], "yair": [373, 655], "precondit": [373, 416, 426, 659, 969, 1009], "zhuzhunashvili": [373, 426], "forbid": [373, 380], "macroscop": 373, "occupi": [373, 953], "manhattan": [373, 405, 409, 414, 421, 663, 725, 734, 741, 742, 743, 812, 951, 956, 997, 1002, 1009], "bisecting_strategi": [373, 407], "largest_clust": [373, 407], "biggest_inertia": [373, 407], "biggest": [373, 376, 378, 407], "steinbach": [373, 1008, 1010], "karypi": 373, "vipin": 373, "egin": 373, "minnesota": 373, "june": [373, 950, 999, 1009], "weblog": 373, "abirami": 373, "mayilvahanan": 373, "emerg": [373, 977], "ijet": 373, "jian": 373, "xinyu": 373, "gou": 373, "baod": 373, "hebei": 373, "knee": 373, "triangular": [373, 427, 575, 950], "whichev": [373, 380, 410, 508, 525, 526, 597, 614, 618, 620, 628, 646, 647, 661], "conjunct": [373, 558, 768, 784, 786, 787, 788, 789, 792, 920, 943, 949, 1008], "extract_dbscan": 373, "radius_neighbors_graph": [373, 384, 408, 807, 808, 809, 811, 813, 815, 816, 817, 818, 956, 997, 1002, 1005], "ester": [373, 384, 408], "kriegel": [373, 384, 408, 414, 421, 811, 959], "sander": [373, 384, 408, 410, 414, 421, 811, 959, 1002, 1003], "xu": [373, 376, 384, 408, 967, 1006, 1007, 1010], "portland": [373, 384, 408], "aaai": [373, 384, 408, 800, 955], "revisit": [373, 384, 408], "schubert": [373, 384, 408, 414, 997, 998, 1001, 1002, 1004, 1005, 1006, 1007], "tod": [373, 384, 408], "lj2017": 373, "d_c": 373, "x_p": [373, 949], "d_m": 373, "x_q": 373, "g_": 373, "varepsilon": [373, 967, 968], "cm2013": 373, "mst": 373, "minimum_cluster_s": 373, "campello": [373, 410], "moulavi": [373, 410], "pei": [373, 1000], "tseng": 373, "cao": 373, "motoda": 373, "pakdd": 373, "lectur": [373, 608, 945, 971], "7819": [373, 1000], "berlin": [373, 378, 499, 660, 689, 719, 953], "heidelberg": [373, 378, 499, 660, 689, 719, 953], "mcinn": [373, 999, 1000, 1001, 1003, 1004, 1009], "heali": 373, "icdmw": 373, "max_ep": [373, 414, 419, 420, 421], "nearbi": [373, 956], "cluster_hierarchy_": [373, 414], "planar": 373, "peripheri": 373, "wall": 373, "ankerst": [373, 414, 421], "mihael": [373, 414, 421], "marku": [373, 414, 421, 1001, 1003, 1004, 1005], "breunig": [373, 414, 421, 811, 959], "han": [373, 406, 414, 421, 993, 1001, 1002, 1006], "j\u00f6rg": [373, 414, 421, 1001], "sigmod": [373, 414, 421, 811, 959], "cft": 373, "lossi": 373, "subclust": [373, 406], "till": [373, 406, 751, 953], "temporarili": [373, 998], "farthest": 373, "brc": [373, 406], "tian": [373, 406, 998, 999, 1000], "raghu": [373, 406], "ramakrishnan": [373, 406], "maron": [373, 406], "livni": [373, 406], "sfu": [373, 406], "coursecentr": [373, 406], "zhang96": [373, 406], "roberto": [373, 406], "perdisci": [373, 406], "jbirch": [373, 406], "java": [373, 406, 972], "satisfi": [373, 614, 618, 663, 681, 699, 700, 805, 806], "labels_pr": [373, 668, 669, 678, 679, 681, 694, 699, 700, 718, 720, 749, 758], "unadjust": [373, 953, 1005], "swap": [373, 378, 680, 699, 932, 933, 993], "ri": [373, 669, 749], "c_2": [373, 950], "unord": [373, 380, 963], "esp": [373, 993], "hubert": [373, 669, 679, 749], "arabi": [373, 669, 679, 749], "steinlei": [373, 669], "psycholog": [373, 669, 680], "agreement": [373, 668, 680, 718, 720, 758, 953], "22504": 373, "10526": 373, "u_i": [373, 446, 447, 448, 718], "v_j": [373, 718, 958], "veb2009": 373, "a_i": 373, "b_j": 373, "yat2016": 373, "average_method": [373, 668, 720, 1001], "vinh": [373, 668], "veb2010": 373, "strehl": 373, "joydeep": 373, "583": [373, 985], "1162": 373, "153244303321897735": 373, "epp": [373, 668], "bailei": [373, 668], "26th": [373, 689, 719, 953], "1553374": 373, "1553511": 373, "9781605585161": 373, "csail": [373, 630, 631, 640, 802], "volume11": 373, "vinh10a": 373, "algesheim": 373, "tesson": 373, "30750": 373, "1038": 373, "srep30750": 373, "rosenberg": [373, 681, 700, 758], "hirschberg": [373, 681, 700, 758], "b2011": 373, "homogeneity_completeness_v_measur": [373, 1002], "n_k": [373, 514], "n_c": [373, 623], "julia": [373, 681, 700, 758], "media": [373, 977], "hila": 373, "becker": [373, 977, 996, 1005], "fowlkes_mallows_scor": [373, 953, 999, 1001], "fmi": [373, 694], "tp": [373, 676, 682, 692, 693, 694, 745, 746, 747, 750, 877, 953], "fp": [373, 676, 682, 692, 693, 694, 745, 746, 747, 750, 953], "fn": [373, 676, 682, 692, 693, 694, 745, 746, 747, 750, 953, 954], "47140": 373, "fowkl": [373, 694], "1983": [373, 694, 845], "tandfonlin": 373, "01621459": 373, "10478008": 373, "kmeans_model": 373, "1987": [373, 571, 572, 755, 756], "calinski_harabasz_scor": [373, 1001], "561": 373, "n_e": 373, "mathrm": [373, 375, 378, 382, 949, 969], "b_k": 373, "w_k": [373, 949], "c_q": 373, "n_q": 373, "c_e": 373, "cali\u0144ski": 373, "1974": [373, 381, 674], "dendrit": [373, 674], "davies_bouldin_scor": [373, 1001], "bould": 373, "c_i": [373, 956], "c_j": [373, 958], "s_i": [373, 949, 963], "diamet": 373, "nonneg": [373, 378, 417, 502, 504, 511, 842], "s_j": 373, "max_": [373, 953], "1979": [373, 688, 732], "halkidi": 373, "batistaki": 373, "yanni": 373, "vazirgianni": 373, "michali": 373, "contingency_matrix": [373, 718, 1001], "pair_confusion_matrix": [373, 1005], "permit": [374, 431, 552, 553, 555, 762, 765, 766, 776, 787, 826, 827, 953, 954, 955, 999], "clf__c": 374, "pca1": [374, 389], "svm1": 374, "77484909e": 374, "07058917e": 374, "pca2": [374, 389], "svm2": 374, "raw_target_regr": 374, "bypass": [374, 563, 610, 616, 873, 874, 875, 876, 1009], "check_invers": [374, 429, 829, 963, 1001, 1007, 1008], "linear_pca": 374, "make_union": [374, 824, 996, 1000], "unreli": 374, "citi": [374, 381, 430, 987], "london": [374, 381, 430], "sallisaw": [374, 430], "bow": 374, "moveabl": 374, "feast": 374, "grape": 374, "wrath": 374, "expert_r": 374, "user_r": 374, "city_categori": 374, "title_bow": 374, "city_london": 374, "city_pari": 374, "city_sallisaw": 374, "507": 374, "301": [374, 967], "ignored_new_col": 374, "shrunk_covari": [375, 1010], "sigma_": [375, 608, 609, 1006, 1010], "wiesel": [375, 386, 439], "eldar": [375, 386, 439], "hero": [375, 386, 439], "5016": [375, 386, 439], "5029": [375, 386, 439], "_k": [375, 947, 949], "glasso": [375, 442], "biostatist": [375, 442], "uncommon": [375, 622, 865, 968], "downweight": [375, 500], "driessen": [375, 433, 438, 959], "fastmcd": [375, 433, 438], "raw_location_": [375, 433, 438], "raw_covariance_": [375, 433, 438], "multidimension": [376, 652, 654, 656, 658, 950, 956], "plsw2a": 376, "u_k": [376, 378], "v_k": [376, 378, 495, 501, 509, 510], "x_k": [376, 378, 947, 956], "y_k": [376, 963], "xi_k": 376, "omega_k": [376, 947], "gamma_k": 376, "delta_k": 376, "nipal": [376, 447, 448], "xp": [376, 840], "x_rotations_": [376, 446, 447, 448], "y_rotations_": [376, 446, 447, 448], "ty": 376, "x_weights_": [376, 446, 447, 448, 449], "y_weights_": [376, 446, 447, 448, 449], "yv": 376, "tx": 376, "pls1": [376, 448], "pls2": [376, 448], "tx_k": [376, 947], "ty_k": 376, "ja": [376, 1000], "wegelin": 376, "methodolog": 377, "academ": [377, 977], "commerci": [377, 977], "flowchart": [377, 980], "f1_macro": [377, 953, 997], "custom_cv_2fold": 377, "custom_cv": 377, "9333": 377, "scorer1_nam": 377, "scorer2_nam": 377, "return_indic": [377, 788, 1009], "precision_macro": [377, 982], "recall_macro": [377, 953], "test_precision_macro": 377, "test_recall_macro": 377, "prec_macro": 377, "rec_macro": 377, "test_prec_macro": 377, "test_rec_macro": 377, "train_prec_macro": 377, "train_rec_macro": 377, "undistinguish": 377, "devic": [377, 546, 972], "kf": [377, 767], "12883823": 377, "rkf": [377, 777], "weigh": [377, 1000], "caveat": [377, 383], "part3": 377, "spector": 377, "submodel": 377, "kohavi": 377, "jnt": 377, "bharat": [377, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010], "rao": [377, 1005, 1008], "fung": 377, "rosal": 377, "witten": 377, "leavepout": [377, 770, 982], "ss": 377, "gkf": 377, "sgkf": [377, 780], "suboptim": [377, 664, 666, 745, 752, 956, 1001, 1009], "leavepgroupsout": [377, 764, 982, 999], "n_group": [377, 771, 982, 999], "lpgo": [377, 771], "gss": [377, 764], "withheld": 377, "predefinedsplit": [377, 982, 997], "test_fold": [377, 775], "train_indx": 377, "test_indx": 377, "autocorrel": 377, "superset": [377, 783, 953], "surplu": 377, "tscv": [377, 783], "inbuilt": 377, "some_integ": 377, "n_cv": [377, 401], "isotropi": 378, "alik": [378, 951], "halko": [378, 499, 505, 508, 901, 902], "szlam": [378, 901, 902], "disadvantag": [378, 383, 949, 950, 957, 967, 968, 969], "parsimoni": [378, 963], "jen09": 378, "mrl09": 378, "ell_1": [378, 949], "underset": [378, 949, 956, 969], "operatornam": [378, 704, 949, 953, 969], "fro": [378, 502, 504, 511, 657, 949], "gentli": 378, "spirit": 378, "mairal": [378, 495, 501], "bach": [378, 495, 500, 501, 502, 622, 949], "ponc": [378, 495, 501], "sapiro": [378, 495, 501], "jenatton": 378, "obozinski": 378, "scholkopf1997": 378, "bakir2003": 378, "smola": [378, 381, 499, 831, 963, 968], "klau": [378, 499, 831], "eigendecompos": 378, "eigensolv": [378, 416, 426, 499, 508, 659, 950], "eigsh": [378, 499, 999, 1000], "lehoucq": 378, "sorensen": 378, "columnwis": 378, "lsa": [378, 508, 995], "synonymi": 378, "polysemi": 378, "lsi": 378, "sigma_k": [378, 947], "sublinear": [378, 554, 555], "use_idf": [378, 381, 554, 555, 987], "textual": [378, 387, 969, 1002], "man": [378, 554, 732, 800, 804, 951, 953, 955], "prabhakar": 378, "raghavan": [378, 554, 800, 804, 951, 953, 955], "hinrich": 378, "sch\u00fctze": [378, 554, 951, 953, 955], "transform_method": 378, "split_cod": 378, "dictionarylearn": [378, 501, 503, 504, 506, 507, 508, 509, 510, 994, 998, 1000, 1003, 1006, 1007, 1008, 1009], "overcomplet": 378, "mammalian": 378, "cortex": 378, "inpaint": 378, "h_i": [378, 958], "psi": 378, "sim": [378, 985], "wh_i": 378, "ww": 378, "superflu": 378, "psi_1": 378, "psi_2": 378, "psi_n": 378, "superimpos": 378, "plug": [378, 949, 977, 987], "wh": [378, 502, 504, 511], "hoyer": [378, 996], "nndsvd": [378, 502, 504, 511, 1002, 1005], "nndsvdar": [378, 502, 504, 511, 1002], "elementwis": [378, 502, 504, 511], "_featur": [378, 502, 504, 511], "kl": [378, 950, 1001], "itakura": [378, 502, 504, 511, 1000], "saito": [378, 502, 504, 511, 1000], "w_new": 378, "forget_factor": [378, 502], "lee": [378, 993, 994, 997, 999, 1000, 1001, 1002, 1004, 1005, 1008], "seung": 378, "boutsidi": 378, "gallopoulo": 378, "cichocki": [378, 502, 504, 511], "phan": 378, "fevott": [378, 502, 504, 511], "idier": [378, 502, 504, 511], "lefevr": [378, 502], "corpora": 378, "hoffman": [378, 500, 998, 1005], "unshad": 378, "beta_k": 378, "eta": [378, 500, 640, 641, 642, 957, 967, 998], "topic_word_prior": [378, 500], "theta_d": 378, "doc_topic_prior": [378, 500], "z_": 378, "w_": [378, 610, 611, 616, 617, 624, 625, 626, 627, 645, 648, 949, 953, 955, 958], "elbo": 378, "overset": [378, 960], "e_": 378, "blei": [378, 500, 760], "wang": [378, 500, 643, 653, 657, 689, 719, 949, 950, 953, 996, 998, 999, 1000, 1001, 1005, 1008, 1009], "paislei": [378, 500], "kaiser": [378, 496], "talli": 379, "disproportion": 379, "41075698": 379, "41076071": 379, "rho_k": 379, "unsmooth": 379, "scott": [379, 810, 993, 994, 999, 1001, 1002, 1003, 1008, 1009], "silvermann": 379, "propto": [379, 955], "2h": 379, "angular": [379, 656, 727], "contin": [379, 678, 963], "semin": 380, "friedman2001": 380, "lightgbm": [380, 525, 526, 972, 1002, 1009], "8965": 380, "grower": [380, 525, 526], "missing": [380, 591, 592, 594, 1002], "fisher1958": 380, "loan": [380, 498, 949, 977], "mayer2022": 380, "mayer": [380, 1005, 1007, 1010], "bourassa": 380, "hoesli": 380, "scognamiglio": 380, "valuat": 380, "tianqi": 380, "guestrin": 380, "ke": [380, 1004, 1005], "boostingdecis": 380, "913": [380, 523], "nr": 380, "f_m": 380, "h_m": 380, "f_": [380, 599, 693, 953], "l_m": 380, "taylor": [380, 1001, 1003, 1004, 1007], "g_i": [380, 613], "sum_m": 380, "softmax": [380, 525, 622, 623, 949, 956, 957], "superior": 380, "ineffici": [380, 407, 538, 793, 794, 956, 958], "htf": 380, "r2007": 380, "friedman2002": 380, "1189": 380, "1232": 380, "367": [380, 993], "b1998": 380, "decoupl": [380, 955], "cancel": [380, 381, 726], "b2001": 380, "bear": [380, 972], "geurt": [380, 519, 520, 521, 522, 529, 530, 875, 876], "ernst": [380, 521, 522, 529, 530, 875, 876], "wehenkel": [380, 521, 522, 529, 530, 875, 876], "l2014": 380, "lieg": 380, "flavour": 380, "b1999": 380, "b1996": 380, "h1998": 380, "lg2012": 380, "bootstrap_featur": [380, 519, 520], "346": [380, 465, 519, 520], "w2": 380, "w3": 380, "lr__c": 380, "rf__n_estim": 380, "w1992": 380, "knr": 380, "stack_method": [380, 531], "225": 380, "126": 380, "stack_method_": [380, 531, 532], "final_layer_rfr": 380, "final_layer_gbr": 380, "final_lay": 380, "multi_layer_regressor": 380, "wolpert": [380, 531, 532], "241": [380, 531, 532], "freund": [380, 517, 518], "fs1995": 380, "w_1": [380, 949, 957], "w_2": [380, 949, 957], "w_n": 380, "w_i": [380, 944, 953], "reappli": 380, "zzrh2009": 380, "d1997": 380, "dubai": 381, "francisco": [381, 965], "movi": [381, 979], "movie_entri": 381, "thriller": [381, 836], "drama": 381, "000e": 381, "003e": 381, "011e": 381, "974e": 381, "unseen_featur": [381, 545], "speech": [381, 953], "chunker": 381, "pos_window": 381, "pos_vector": 381, "1x6": 381, "part_of_speech": 381, "token_featur": 381, "isupp": 381, "uppercase_initi": 381, "all_uppercas": 381, "raw_x": [381, 546], "pos_tagg": 381, "murmurhash3": [381, 546, 553, 918], "weinberg": 381, "modulo": [381, 1004], "kilian": [381, 1008, 1009], "anirban": 381, "dasgupta": [381, 410, 859, 965], "langford": [381, 652, 950], "josh": [381, 1000], "attenberg": 381, "punctuat": [381, 552, 553, 555], "diminish": 381, "4x9": 381, "build_analyz": [381, 552, 553, 555, 1003], "interrog": 381, "bigram_vector": 381, "cool": [381, 993], "feature_index": 381, "him": 381, "constru": 381, "nqy18": 381, "smooth_idf": [381, 554, 555], "_n": [381, 953], "textbook": [381, 554], "6x3": 381, "81940995": 381, "57320793": 381, "47330339": 381, "88089948": 381, "58149261": 381, "81355169": 381, "term1": 381, "term2": 381, "term3": 381, "0986": [381, 829], "819": 381, "573": 381, "8473": 381, "8515": [381, 1000], "5243": 381, "85151335": 381, "52433293": 381, "55422893": 381, "83236428": 381, "63035731": 381, "77630514": 381, "idf_": [381, 554, 555, 1001], "western": 381, "europ": [381, 963], "koi8": 381, "russian": 381, "unicodedecodeerror": [381, 552, 553, 555], "told": 381, "troubleshoot": 381, "chardet": 381, "chardetect": 381, "damag": 381, "sloppili": 381, "ftfy": 381, "mish": 381, "mash": 381, "text1": 381, "sei": 381, "mir": 381, "gegr": 381, "xc3": 381, "xbc": 381, "x9ft": 381, "mein": 381, "sauerkraut": 381, "text2": 381, "holdselig": 381, "sind": 381, "dein": 381, "ger": 381, "xfcche": 381, "text3": 381, "xff": 381, "xfea": 381, "x00u": 381, "x00f": 381, "x00": 381, "x00l": 381, "xfc": 381, "x00g": 381, "x00e": 381, "x00n": 381, "x00d": 381, "x00a": 381, "x00h": 381, "x00r": 381, "x00z": 381, "x00i": 381, "x00b": 381, "x00c": 381, "x00t": 381, "x00o": 381, "spolski": 381, "nnmf": [381, 988, 989, 993], "phrase": 381, "misspel": 381, "rescu": 381, "resili": 381, "wprd": 381, "ngram_vector": 381, "char_wb": [381, 552, 553, 555], "rd": 381, "wo": 381, "wp": [381, 621, 635], "char": [381, 552, 553, 555, 993], "jumpi": 381, "fox": [381, 1009], "1x4": 381, "umpi": 381, "1x5": 381, "mpy": 381, "fo": 381, "paragraph": [381, 467, 987], "barrier": 381, "hv": 381, "4x10": 381, "discrep": [381, 987, 997], "4x1048576": 381, "collid": 381, "ingest": 381, "spend": 381, "my_token": 381, "lowercas": [381, 389, 406, 407, 409, 411, 413, 446, 447, 448, 449, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 513, 552, 553, 555, 603, 604, 605, 606, 652, 653, 656, 809, 814, 817, 821, 826, 831, 857, 858, 1006], "lucen": 381, "build_preprocessor": [381, 552, 553, 555, 1003], "whitespac": 381, "fanci": 381, "lemmat": 381, "nltk": [381, 971, 972], "word_token": 381, "wordnetlemmat": 381, "lemmatoken": 381, "wnl": 381, "british": 381, "spell": 381, "to_british": 381, "1or": 381, "bt": 381, "1er": 381, "ing": 381, "ation": 381, "1z": 381, "ogu": 381, "og": 381, "customvector": 381, "asian": 381, "one_imag": [381, 548], "fake": 381, "assert_array_equ": 381, "patchextractor": [381, 1009], "five_imag": 381, "variancethreshold": [382, 830, 943, 996, 1003, 1006, 1009], "selectfdr": [382, 556, 560, 562, 563, 564, 570, 997, 999, 1000, 1009], "selectfw": [382, 556, 559, 560, 563, 564, 570, 1009], "genericunivariateselect": [382, 559, 560, 562, 563, 564, 566, 1007, 1009, 1010], "r_regress": [382, 570, 1006, 1007, 1010], "nonparametr": [382, 383, 571, 572], "bewar": 382, "importance_gett": [382, 557, 558, 561, 1005], "unimport": [382, 961], "lsvc": 382, "baraniuk": 382, "isr": 382, "ist": 382, "utl": 382, "aguiar": 382, "cs_note": 382, "ferri": [382, 953], "versatil": [383, 968, 977], "optima": 383, "markov": [383, 575, 958, 972, 993], "nuisanc": 383, "one_vs_on": [383, 574, 954], "ingredi": 383, "duv2014": 383, "theta_l": 383, "x_bound": [383, 581], "operand": 383, "k1__": 383, "k2__": 383, "constant_valu": [383, 577, 581], "constant_value_bound": [383, 575, 577, 581], "k1__k1__constant_valu": 383, "value_typ": [383, 581], "n_element": [383, 581], "k2__length_scal": 383, "k1": [383, 585, 588], "k1__k1": 383, "k1__k1__constant_value_bound": 383, "k1__k2": 383, "k1__k2__length_scale_bound": 383, "k2": [383, 585, 588], "k2__length_scale_bound": 383, "69314718": [383, 576, 963], "30258509": 383, "interoper": [383, 973, 989], "pairwisekernel": 383, "_valu": [383, 577], "_level": [383, 589], "k_1": [383, 585, 588], "k_2": [383, 585, 588], "__add__": [383, 588], "__mul___": 383, "__pow__": [383, 580], "2l": [383, 586], "bigg": [383, 583], "bessel": [383, 583], "rightarrow": [383, 583, 957], "quad": [383, 956, 967], "tfrac": 383, "3l": 383, "pp84": 383, "x_d": [383, 578], "inhomogen": [383, 578], "expon": [383, 580, 640, 641, 642, 774, 822, 823, 840, 942], "carl": [383, 574, 575, 578, 583, 586], "rasmussen": [383, 574, 575, 578, 583, 586], "duvenaud": [383, 586, 587], "cookbook": [383, 586, 587], "minkowski": [384, 408, 414, 419, 420, 421, 652, 663, 741, 742, 743, 805, 806, 807, 808, 809, 811, 813, 815, 816, 817, 818, 819, 956, 993, 996, 1007, 1008, 1009], "metric_param": [384, 408, 410, 414, 419, 420, 421, 652, 656, 807, 808, 809, 810, 811, 813, 815, 816, 817, 818, 819, 997, 1000, 1007], "leaf_siz": [384, 408, 410, 414, 419, 420, 421, 805, 806, 807, 808, 809, 810, 811, 813, 815, 816, 817], "kd_tree": [384, 408, 410, 414, 421, 652, 653, 807, 808, 809, 810, 811, 813, 815, 816, 817, 956, 1006, 1010], "balltre": [384, 408, 410, 414, 421, 652, 653, 663, 807, 808, 809, 810, 811, 813, 815, 816, 817, 950, 993, 995, 997, 1001, 1006, 1009, 1010], "ckdtree": [384, 408, 995], "inhibit": [384, 408], "core_sampl": 384, "n_core_sampl": [384, 408], "attract": [384, 408, 947, 956, 972], "fun": [385, 497, 977], "logcosh": [385, 497], "fun_arg": [385, 497], "w_init": [385, 497], "whiten_solv": [385, 497, 1008], "return_x_mean": 385, "compute_sourc": 385, "return_n_it": [385, 418, 423, 442, 509, 510, 610, 611, 616, 617, 624, 625, 626, 627, 645, 646, 647, 648, 649, 650, 651, 658, 1007], "cube": [385, 497], "my_g": [385, 497], "x_mean": 385, "AS": 385, "fortran": [385, 505, 610, 611, 616, 617, 624, 625, 626, 627, 629, 645, 648, 649, 650, 885, 886, 993, 996, 997, 1001], "hyvarinen": [385, 497], "oja": [385, 497], "430": [385, 497], "shrunk_cov": [386, 443, 445], "eq": [386, 439, 685, 686, 687], "7533": [386, 439, 1000], "2763": [386, 439], "3964": [386, 439], "0195": [386, 439], "friend": [387, 997], "is_fitted_": [387, 390, 392, 395, 396], "subobject": [387, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 428, 429, 433, 434, 435, 436, 437, 438, 439, 440, 446, 447, 448, 449, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 545, 546, 547, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 574, 575, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 599, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 652, 653, 654, 655, 656, 760, 761, 762, 765, 766, 776, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 821, 822, 823, 824, 825, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 857, 858, 860, 861, 862, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876], "get_submatrix": [388, 415, 417], "dummybiclust": 388, "row_ind": [388, 415, 417], "intp": [388, 415, 417], "col_ind": [388, 415, 417], "pca0": 389, "_n_features_out": 389, "myestimator0": 389, "myestimator1": 389, "class_name0": [389, 406, 407, 409, 411, 413, 446, 447, 448, 449, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 513, 603, 604, 605, 606, 652, 653, 656, 809, 814, 817, 821, 831, 857, 858], "class_name1": [389, 406, 407, 409, 411, 413, 446, 447, 448, 449, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 513, 603, 604, 605, 606, 652, 653, 656, 809, 814, 817, 821, 831, 857, 858], "class_name2": [389, 406, 407, 409, 411, 413, 446, 447, 448, 449, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 513, 603, 604, 605, 606, 652, 653, 656, 809, 814, 817, 821, 831, 857, 858], "feature_names_out": [389, 394, 406, 407, 409, 411, 413, 428, 446, 447, 448, 449, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 513, 530, 531, 532, 533, 534, 545, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 591, 592, 593, 594, 599, 602, 603, 604, 605, 606, 652, 653, 656, 809, 814, 817, 821, 824, 825, 828, 829, 830, 831, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 857, 858, 1007, 1010], "mro": [390, 396, 1003, 1004], "harsh": [390, 401, 433, 513, 514, 515, 517, 519, 521, 523, 525, 528, 531, 533, 574, 622, 630, 632, 638, 639, 640, 793, 794, 795, 796, 800, 801, 802, 803, 804, 807, 812, 815, 822, 860, 861, 865, 867, 870, 873, 875, 1003, 1005, 1008], "mycluster": 391, "densityestim": 392, "n_samples_fit": [396, 429, 446, 447, 448, 518, 520, 522, 524, 526, 529, 532, 534, 575, 599, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 624, 625, 626, 627, 628, 629, 631, 634, 636, 637, 642, 643, 652, 798, 799, 807, 808, 809, 811, 813, 815, 816, 817, 823, 866, 868, 871, 874, 876], "uniform_averag": [396, 429, 446, 447, 448, 518, 520, 522, 524, 526, 529, 532, 534, 575, 599, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 624, 625, 626, 627, 628, 629, 631, 634, 636, 637, 642, 643, 685, 686, 691, 708, 709, 711, 713, 714, 716, 748, 753, 754, 798, 799, 808, 816, 823, 866, 868, 871, 874, 876, 953, 1002], "n_features_new": [397, 406, 409, 496, 498, 500, 501, 503, 506, 507, 513, 531, 533, 534, 546, 547, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 592, 594, 599, 602, 603, 604, 605, 606, 814, 821, 828, 829, 830, 831, 834, 835, 837, 838, 839, 840, 842, 843, 844, 845, 857, 858], "cloned_classifi": 398, "base_clf": 401, "calibrated_clf": 401, "927": 401, "x_calib": 401, "y_calib": 401, "prob_tru": [402, 403], "prob_pr": [402, 403], "ref_lin": 402, "alexandru": 403, "22nd": 403, "convergence_it": [404, 418], "hardcod": [404, 418, 1001], "affinity_matrix_": [404, 416, 655], "cluster_center_indic": [404, 418], "compute_full_tre": [405, 409, 997], "compute_dist": [405, 409, 1005], "inferior": [405, 409, 1004], "n_leaves_": [405, 409], "n_connected_components_": [405, 409, 1002], "branching_factor": 406, "compute_label": [406, 413], "promot": [406, 672, 972, 1004, 1006, 1010], "redistribut": 406, "overwritten": [406, 496, 497, 498, 500, 505, 512, 571, 572, 608, 609, 610, 611, 614, 615, 616, 617, 618, 619, 620, 621, 624, 625, 626, 627, 636, 638, 643, 645, 646, 647, 648, 650, 921, 923, 1006], "root_": 406, "_cfnode": 406, "cftree": 406, "dummy_leaf_": 406, "subcluster_labels_": 406, "centroids_": [406, 410, 812], "copy_x": [407, 411, 423, 499, 608, 609, 610, 611, 614, 615, 616, 617, 618, 619, 620, 621, 624, 625, 626, 627, 636, 638, 643, 645, 646, 647, 648, 649, 995, 1001, 1002], "k_init": [407, 423], "sse": 407, "bisect_mean": 407, "denser": 408, "pooling_func": [409, 1001], "xred": [409, 1009], "cluster_selection_epsilon": 410, "max_cluster_s": 410, "cluster_selection_method": 410, "eom": 410, "store_cent": [410, 1010], "kdtree": [410, 414, 421, 652, 653, 805, 807, 808, 809, 810, 811, 813, 815, 816, 817, 995, 997, 1001, 1005, 1006, 1009, 1010], "neighbour": [410, 426, 656, 958], "medoid": 410, "overwrit": [410, 460, 595, 978, 993, 1004, 1009, 1010], "medoids_": 410, "zimek": 410, "chaudhuri": 410, "jaskowiak": 410, "malzer": 410, "baum": 410, "hybrid": [410, 613, 972], "dbscan_clust": 410, "border": [410, 1003], "unclust": 410, "socg2006": 411, "min_bin_freq": [412, 425], "cluster_al": [412, 425], "get_bin_se": 412, "orphan": [412, 425, 993], "reassignment_ratio": 413, "eec": [413, 605], "tuft": 413, "dscullei": 413, "fastkmean": 413, "55102041": 413, "48979592": 413, "06896552": 413, "set_partial_fit_request": [413, 498, 502, 630, 631, 632, 640, 641, 642, 793, 794, 797, 798, 800, 801, 802, 803, 804, 822, 845], "cluster_method": 414, "predecessor_correct": [414, 420], "unprocess": [414, 552, 553, 555], "heap": 414, "braycurti": [414, 421, 663, 741, 742, 743, 956], "canberra": [414, 421, 663, 741, 742, 743, 956], "chebyshev": [414, 421, 663, 741, 742, 743, 956], "dice": [414, 421, 663, 741, 742, 743, 956], "kulsinski": [414, 421, 663, 741, 742, 743], "rogerstanimoto": [414, 421, 663, 741, 742, 743, 956], "russellrao": [414, 421, 663, 741, 742, 743, 956], "seuclidean": [414, 421, 663, 741, 742, 743, 812, 956, 1001, 1004, 1005], "sokalmichen": [414, 421, 663, 741, 742, 743, 956], "sokalsneath": [414, 421, 663, 741, 742, 743, 956], "yule": [414, 421, 741, 742, 743], "manhattan_dist": [414, 421, 652, 725, 807, 808, 809, 811, 813, 815, 816, 817, 818, 819, 993, 1003, 1008, 1009], "minkowski_dist": [414, 421, 652, 807, 808, 809, 811, 813, 815, 816, 817, 818, 819], "l_p": [414, 421, 652, 807, 808, 809, 811, 813, 815, 816, 817, 818, 819], "upward": [414, 420], "successor": [414, 420, 969, 972], "predecessor_": [414, 421], "erich": [414, 997, 998, 1001, 1002, 1004, 1005, 1006, 1007], "gertz": 414, "lernen": 414, "wissen": 414, "daten": [414, 1001, 1002], "analysen": 414, "lwda": 414, "329": 414, "n_best": 415, "n_svd_vec": [415, 417], "mini_batch": [415, 417], "n_row_clust": [415, 417, 477], "n_column_clust": [415, 417, 477], "ncv": [415, 417], "n_oversampl": [415, 417, 505, 508, 902, 1007], "kernel_param": [416, 499, 603, 607], "precomputed_nearest_neighbor": [416, 655], "eigen": [416, 513, 637, 655, 659, 947, 999, 1002], "dist_matrix": 416, "541": [416, 426], "csc_matrix": [416, 521, 522, 527, 528, 529, 530, 842, 873, 874, 875, 876, 943, 963, 969, 998], "compute_optics_graph": [419, 420, 1010], "best_n_it": 423, "n_local_tri": 424, "n_seed": 425, "multigrid": 426, "eigendecomposit": [426, 637, 655, 659, 831, 945], "multiscal": 426, "preliminari": 426, "heapq": 427, "topolog": [427, 972], "n_connected_compon": 427, "n_leav": [427, 873, 874, 875, 876], "transformers_": [428, 1010], "remaining_column": 428, "named_transformers_": 428, "sparse_output_": [428, 515], "output_indices_": [428, 1006], "datatyp": [428, 430, 1000, 1003], "norm1": 428, "norm2": 428, "text_preprocess": 428, "num_preprocess": 428, "x_t": [428, 591, 824], "sum_n_compon": [428, 824], "notimplementederror": [429, 436, 517, 518, 519, 520, 531, 532, 533, 534, 557, 558, 566, 635, 637, 639, 824, 852, 862, 1000, 1010], "y_hat": 429, "90453403": 430, "50755672": 430, "30151134": 430, "print_changed_onli": [432, 863, 1002, 1004, 1005], "pairwise_dist_chunk_s": [432, 863], "enable_cython_pairwise_dist": [432, 863], "skip_parameter_valid": [432, 863, 1009], "cache_s": [432, 863, 867, 868, 869, 870, 871, 968], "get_config": [432, 744, 863, 920, 1008], "offset_": [433, 527, 641, 811, 869, 1001], "raw_support_": [433, 438], "dist_": [433, 438], "true_cov": [433, 435, 436, 442], "7411": [433, 438, 999], "2535": [433, 438], "3053": [433, 438], "0813": [433, 438], "correct_covari": [433, 438], "rvd": [433, 438], "covariance_correct": [433, 438], "comp_cov": [433, 434, 435, 436, 437, 438, 439, 440], "get_precis": [433, 434, 435, 436, 437, 438, 439, 440, 496, 498, 505], "getter": [433, 434, 435, 436, 437, 438, 439, 440, 557, 558, 561], "is_inli": [433, 527, 811], "reweight_covari": [433, 438], "rvdriessen": [433, 438], "location_reweight": [433, 438], "covariance_reweight": [433, 438], "support_reweight": [433, 438], "negative_mahal_dist": 433, "7569": 434, "2818": 434, "3928": 434, "0622": [434, 440], "0193": [434, 440], "enet_tol": [435, 436, 442, 998], "220446049250313e": [435, 436, 442, 614, 615, 618, 619, 620, 646, 647], "graphlasso": [435, 998, 1001], "costs_": [435, 436, 1009], "dual_gap": [435, 436, 442, 610, 611, 616, 617, 624, 625, 626, 627, 645, 648], "return_cost": [435, 436, 442], "049": 435, "364": [435, 436, 994], "n_refin": 436, "graphlassocv": [436, 995, 1001], "dualiti": [436, 949], "094": 436, "block_siz": [437, 443, 444, 997], "4406": 437, "1616": 437, "0595": 437, "0075": [437, 505], "rouseeuw1984": 438, "butlerdavi": 438, "butler": [438, 996, 1004, 1005], "davi": [438, 688, 953, 997], "jhun": 438, "1385": 438, "7833": 439, "2431": 439, "3889": 439, "7387": 440, "2536": 440, "4110": 440, "cov_init": [442, 1009], "graph_lasso": [442, 1001], "n_dim": [442, 491, 493, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 1010], "shrinkage_coeffici": 444, "x_loadings_": [446, 447, 448], "y_loadings_": [446, 447, 448], "plssvd": [446, 447, 975, 989, 1005, 1007], "x_c": [446, 447, 449, 960], "y_c": [446, 447, 449], "y_reconstruct": [446, 447, 448], "x_scores_": [448, 1005], "y_scores_": [448, 1005], "y_transform": 449, "data_hom": [450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 1000, 1009], "zero_bas": [451, 472, 473], "query_id": [451, 472, 473], "grok": 451, "qid": [451, 472, 473, 994, 999], "output_fil": 451, "my_dataset": 451, "download_if_miss": [452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 1000], "stopword": [453, 987], "target_column": [453, 454, 460], "horizontal_distance_to_hydrologi": 455, "494021": 456, "slice_": [457, 458, 1008], "195": [457, 458], "unrestrict": 457, "2914": 458, "5748": 458, "pathlik": [460, 1009], "n_retri": [460, 1007], "read_csv_kwarg": [460, 1009], "timeout": [460, 919, 1007], "412": [460, 949], "ith": [460, 737, 741, 801, 822, 823, 838, 839], "48842": 460, "48841": 460, "46043": 460, "46033": 460, "47985": 460, "1592": 462, "1212": 462, "1624": 462, "620": 462, "microryzomys_minutu": 462, "8333": 462, "3333": 462, "8833": 462, "2667": 462, "9833": 462, "s22": 462, "f4": 462, "data_filenam": [465, 469], "target_filenam": [465, 469], "container_path": 467, "load_cont": 467, "allowed_extens": 467, "container_fold": 467, "category_1_fold": 467, "file_1": 467, "file_2": 467, "file_42": 467, "category_2_fold": 467, "file_43": 467, "file_44": 467, "image_nam": 470, "first_img_data": 471, "backup": [472, 993], "instantan": 472, "mycach": 472, "get_data": 472, "mysvmlightfil": 472, "xn": 473, "yn": [473, 954, 955], "q1": 473, "qn": 473, "yi": [473, 955, 997, 1001, 1002, 1005], "qi": [473, 1005], "triplet": 473, "minval": [475, 477], "maxval": [475, 477], "seventh": [475, 965], "269": 475, "274": 475, "return_cent": [476, 1004], "basri": 477, "gerstein": 477, "716": 477, "flip_i": 479, "interdepend": 479, "polytop": 479, "guyon": [479, 557, 558, 953], "madelon": 479, "1991": [480, 481, 482], "1229": 481, "12000": 484, "effective_rank": [485, 488], "tail_strength": [485, 488], "bell": [485, 1001, 1003, 1005, 1006], "fat": [485, 488], "crawl": [485, 894], "return_ind": 487, "4967": 488, "1382": 488, "6476": 488, "523": 488, "2341": 488, "4694": 488, "5425": 488, "7674": [488, 1000], "4017": 488, "data_transpos": [490, 1007, 1009], "norm_diag": 491, "sparse_format": [491, 1010], "make_spd_matrix": 491, "celeux": 492, "el": [492, 1006, 1008, 1009], "anbari": 492, "marin": 492, "frequentist": 492, "marsland": 494, "vuw": 494, "nz": 494, "marslast": 494, "ch6": 494, "code_init": [495, 509], "dict_init": [495, 501, 509, 510], "callback": [495, 501, 503, 509, 510, 814, 919, 973, 1009], "split_sign": [495, 501, 506], "transform_max_it": [495, 501, 502, 506, 1003], "_fro": [495, 501, 509, 510, 610, 611, 616, 624, 625, 626, 645], "lasso_cd": [495, 501, 506, 512], "error_": [495, 507], "minibatchsparsepca": [495, 497, 501, 504, 506, 507, 509, 510, 993, 994, 1004, 1006, 1007, 1008, 1009, 1010], "sierra": [495, 501], "icml09": [495, 501], "x_hat": [495, 501, 509, 510], "noise_variance_init": 496, "quartimax": [496, 1005], "loglike_": 496, "barber": 496, "bishop": [496, 498, 505, 704, 760, 949, 954, 968], "get_covari": [496, 498, 505], "unmixing_matrix": 497, "whitening_": 497, "kpca": [497, 498, 499, 988, 989, 993], "set_inverse_transform_request": [497, 545, 832, 845], "unsaf": 498, "singular_values_": [498, 505, 508, 1000], "var_": [498, 803, 845, 1006], "miketip": [498, 505], "mppca": [498, 505], "n_samples_seen_": [498, 834, 835, 845, 1001], "batch_size_": 498, "ross": [498, 571, 572, 969, 1007, 1008], "vision": [498, 721, 722, 945, 949, 951, 969, 972, 977, 994], "toronto": [498, 608, 821], "dross": 498, "ivt": 498, "rosslimlinyang_ijcv": 498, "karhunen": 498, "loev": 498, "levi": [498, 1000], "lindenbaum": 498, "1371": 498, "1374": 498, "abstain": 498, "holub": 498, "opportun": [498, 967], "golub": [498, 803, 845], "sigma2": [498, 505], "x_origin": [498, 503, 505, 507, 508, 594, 857, 858], "check_input": [498, 512, 610, 611, 616, 624, 625, 626, 645, 651, 873, 874, 875, 876, 1001], "remove_zero_eig": [499, 995, 1002], "x_fit_": [499, 607], "eigenvalues_": [499, 1006], "eigenvectors_": [499, 1006], "dual_coef_": [499, 607, 867, 868, 869, 870, 871, 968, 997], "x_transformed_fit_": 499, "gamma_": [499, 1009], "nathan": [499, 1001, 1005, 1008], "gunnar": [499, 902], "tropp": [499, 505], "217": [499, 505], "vladimir": [499, 902, 949, 1003, 1007, 1010], "rokhlin": [499, 505, 902], "tygert": [499, 505, 902], "learning_decai": 500, "evaluate_everi": 500, "perp_tol": 500, "mean_change_tol": 500, "max_doc_update_it": 500, "kappa": [500, 680], "tau_0": 500, "pseudocount": [500, 1001], "exp_dirichlet_component_": 500, "n_batch_iter_": 500, "bound_": 500, "doc_topic_prior_": 500, "topic_word_prior_": 500, "franci": [500, 622, 949, 999], "onlineldavb": 500, "chong": 500, "00360392": 500, "25499205": 500, "0036211": 500, "64236448": 500, "09541846": 500, "15297572": 500, "00362644": 500, "44412786": 500, "39568399": 500, "003586": 500, "vb": 500, "sub_sampl": 500, "doc_topic_distr": [500, 1000], "fresh_restart": 502, "fresh_restarts_max_it": 502, "_w": [502, 504, 511], "_ratio": [502, 504, 511], "_h": [502, 504, 511], "fresh": [502, 973, 1003], "reconstruction_err_": [502, 504], "andrzej": [502, 504, 511], "anh": [502, 504, 511], "ieic": [502, 504, 511], "708": [502, 504, 511, 713], "waspa": 502, "ridge_alpha": [503, 507, 1000], "500x500": 505, "lu": [505, 508, 901, 902, 999, 1000, 1001, 1002, 1009, 1010], "n_samples_": 505, "royal": [505, 591, 841, 853, 967], "methodologi": [505, 838, 943, 953, 977], "622": 505, "9924": 505, "30061": 505, "54980": 505, "00755": 505, "99244": 505, "ascontiguousarrai": 505, "sparse_encod": [506, 614, 615, 616, 617, 618, 619, 620, 627, 628, 629, 646, 647, 648, 649, 650, 993, 1000, 1001, 1003, 1007], "u_init": 507, "v_init": 507, "9666": 507, "oversampl": [508, 993], "indeterminaci": 508, "0157": 508, "0512": 508, "0499": 508, "0479": 508, "0453": 508, "2102": 508, "2410": 508, "5981": 508, "5420": 508, "4486": 508, "3288": 508, "method_max_it": [509, 510, 1003], "dict_learning_onlin": [509, 994, 1003, 1006, 1007, 1010], "return_cod": 510, "update_h": 511, "_n_compon": 511, "hal": [511, 622, 721, 722, 951], "copy_cov": 512, "orthogonal_mp": [512, 628, 629, 650, 949], "sum_k": [513, 969], "prior_k": 513, "c_k": 513, "priors_": [513, 514], "scalings_": [513, 514], "xbar_": 513, "reg_param": 514, "scaling_": 514, "colinear": 514, "rotations_": 514, "vt": 514, "n_classes_": [515, 517, 519, 521, 523, 528, 574, 793, 794, 873, 875, 994, 1003, 1005], "class_prior_": [515, 803], "n_outputs_": [515, 516, 521, 522, 528, 529, 530, 822, 823, 873, 874, 875, 876], "constant_": 516, "dummy_regr": 516, "base_estimator_": [517, 518, 519, 520, 521, 522, 527, 528, 529, 530, 574, 862, 1008], "dok": [517, 518, 832, 1006], "staged_decision_funct": [517, 523, 525], "staged_scor": [517, 518], "7972": 518, "9771": 518, "estimators_samples_": [519, 520, 521, 522, 527, 528, 529, 530, 999, 1001, 1004, 1010], "estimators_features_": [519, 520, 527], "oob_decision_function_": [519, 521, 528], "oob_prediction_": [520, 522, 529], "8720": [520, 1001], "min_weight_fraction_leaf": [521, 522, 523, 524, 528, 529, 530, 873, 874, 875, 876, 969, 996, 999, 1000], "min_impurity_decreas": [521, 522, 523, 524, 528, 529, 530, 873, 874, 875, 876, 969, 1000], "shannon": [521, 528, 873, 875, 950, 969], "unlimit": [521, 522, 523, 524, 528, 529, 530, 873, 874, 875, 876], "n_t": [521, 522, 523, 524, 528, 529, 530, 873, 874, 875, 876], "n_t_r": [521, 522, 523, 524, 528, 529, 530, 873, 874, 875, 876], "right_impur": [521, 522, 523, 524, 528, 529, 530, 873, 874, 875, 876], "n_t_l": [521, 522, 523, 524, 528, 529, 530, 873, 874, 875, 876], "left_impur": [521, 522, 523, 524, 528, 529, 530, 873, 874, 875, 876], "balanced_subsampl": [521, 528, 1001], "subtre": [521, 522, 523, 524, 528, 529, 873, 874, 875, 876, 969], "extratreeclassifi": [521, 530, 876, 954, 997, 1002, 1003, 1004, 1006, 1007, 1008, 1010], "unprun": [521, 522, 528, 529, 873, 874, 875, 876], "x_leav": [521, 522, 523, 524, 528, 529, 530, 873, 874, 875, 876], "n_nodes_ptr": [521, 522, 528, 529, 530], "friedman_ms": [522, 523, 524, 529, 874, 876, 969, 1009, 1010], "extratreeregressor": [522, 527, 530, 875, 959, 1002, 1003, 1004, 1006, 1007, 1008, 1010], "2727": 522, "dummyestim": [523, 524], "eras": [523, 524, 610, 616, 622, 624, 626, 630, 631, 632, 640, 641, 642, 822, 823], "n_trees_per_iteration_": [523, 524, 525, 526], "oob_scores_": [523, 524, 1009], "init_": [523, 524], "max_features_": [523, 524, 561, 873, 874, 875, 876, 1007], "_fit_stag": [523, 524], "crossentropi": 525, "deepest": [525, 526, 1004], "__dataframe__": [525, 526], "no_interact": [525, 526, 1008], "do_early_stopping_": [525, 526], "validation_score_": [525, 526], "is_categorical_": [525, 526], "n_trees_per_iter": 525, "max_samples_": 527, "fei": [527, 959], "ting": [527, 959, 1001, 1002], "ming": [527, 959, 997, 1001, 1002, 1003, 1007], "zhou": [527, 603, 861, 959, 1001, 1009, 1010], "zhi": [527, 959], "hua": [527, 959], "icdm": [527, 959], "eighth": [527, 959], "tkdd": 527, "n_left": 527, "32987858": 529, "n_out": 530, "one_hot_encoder_": 530, "moosmann": 530, "trigg": 530, "juri": 530, "random_tre": 530, "x_sparse_embed": 530, "randomtreesembedding_": 530, "final_estimator_": [531, 532], "named_estimators_": [531, 532, 533, 534, 1001, 1003], "named_estim": [531, 532, 533, 534], "parameter_nam": [531, 532, 533, 534], "new_valu": [531, 532, 533, 534], "linearsvr": [532, 871, 968, 997, 999, 1004, 1009], "flatten_transform": [533, 1000], "le_": 533, "eclf1": 533, "array_equ": [533, 1000], "eclf2": 533, "eclf3": 533, "maj": 533, "probabilities_or_label": 533, "n_regressor": 534, "r1": 534, "r3": 534, "er": 534, "with_traceback": [535, 536, 537, 538, 539, 540, 541, 542], "__traceback__": [535, 536, 537, 538, 539, 540, 541, 542], "current_sklearn_vers": 540, "repr": [541, 1004, 1005, 1007], "linter": 543, "flake8": 543, "spam": [545, 673, 704, 800, 953, 955, 977], "feature_names_": 545, "xa": 545, "dict_typ": 545, "1048576": [546, 553], "non_neg": [546, 1000], "eleph": 546, "bird": [546, 682, 717, 953], "patch_height": [547, 548, 551], "patch_width": [547, 548, 551], "img_height": 547, "img_width": 547, "pe": 547, "pe_tran": 547, "263758": 547, "image_height": [547, 548, 551], "image_width": [547, 548, 551], "n_channel": [547, 548, 551], "n_patch": [547, 548, 551], "272214": 548, "230": 548, "243": 548, "215": 548, "n_z": 549, "return_a": [549, 550, 919, 996], "_coo": [549, 550], "shape_img": 549, "image_s": 551, "strip_acc": [552, 553, 555], "nfkd": [552, 553, 555, 1003], "unicodedata": [552, 553, 555], "regexp": [552, 553, 555], "min_n": [552, 553, 555, 993], "max_n": [552, 553, 555, 993], "fixed_vocabulary_": [552, 555], "stop_words_": [552, 555], "delattr": [552, 555, 1005], "vectorizer2": 552, "raw_docu": [552, 555], "get_stop_word": [552, 553, 555], "x_inv": [552, 555], "con": 553, "yates2011": 554, "baeza": [554, 693, 996], "yate": [554, 693], "ribeiro": [554, 693, 1006], "neto": [554, 693, 1011], "addison": [554, 693], "weslei": [554, 693], "mrs2008": 554, "118": 554, "tfid": 554, "22314355": 554, "51082562": 554, "91629073": 554, "_check_stop_list": 555, "pvalu": [556, 559, 560, 562, 563, 564, 790], "k_best": [556, 862, 966, 1010], "fdr": 556, "fwe": 556, "iff": [556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 836], "retent": [556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567], "n_selected_featur": [556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567], "n_original_featur": [556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567], "attrgett": [557, 561], "barnhil": [557, 558], "vapnik": [557, 558], "n_subsets_of_featur": 558, "narrai": 558, "benjamini": [559, 999, 1000], "hochberg": [559, 999, 1000], "false_discovery_r": 559, "norm_ord": [561, 1000], "threshold_": [561, 1000], "3252": 561, "8345": 561, "4976": 561, "55249": 561, "half_cal": 561, "half_selector": 561, "partial_fit_param": [561, 793, 794, 797, 798], "unspecifi": [563, 564, 764, 950], "_get_support_mask": 565, "featureselector": 565, "n_features_to_select_": 566, "variances_": 567, "weed": 568, "p_valu": [568, 569, 570], "chi2_stat": 568, "0387": 568, "0116": 568, "f_statist": [569, 570], "force_finit": [570, 573, 691, 748, 953, 1007], "pearson": [570, 573, 1006], "discrete_featur": [571, 572], "nat": [571, 572, 668, 718, 720, 1007], "essenc": [571, 572, 706, 950, 953], "kraskov": [571, 572], "stogbauer": [571, 572], "grassberg": [571, 572], "phy": [571, 572], "kozachenko": [571, 572], "leonenko": [571, 572], "probl": [571, 572], "peredachi": [571, 572], "correlation_coeffici": 573, "fmin_l_bfgs_b": [574, 575], "max_iter_predict": 574, "copy_x_train": [574, 575], "one_vs_rest": [574, 954], "compoundkernel": [574, 1007], "obj_func": [574, 575], "initial_theta": [574, 575], "theta_opt": [574, 575], "func_min": [574, 575], "_posterior_mod": 574, "log_marginal_likelihood_value_": [574, 575], "9866": [574, 583, 586], "83548752": 574, "03228706": 574, "13222543": 574, "79064206": 574, "06525643": 574, "14410151": 574, "clone_kernel": [574, 575, 1003], "n_kernel_param": [574, 575], "log_likelihood_gradi": [574, 575], "x_train_": 575, "y_train_": 575, "3680": [575, 578, 589], "592": [575, 578, 589, 960], "y_cov": 575, "n_samples_x": [575, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 721, 722, 723, 724, 726, 727, 729, 730, 731, 732, 737, 738, 739, 740, 741, 742, 743, 744], "requires_vector_input": [576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589], "51292546": 576, "09861229": [576, 963], "n_samples_i": [576, 577, 578, 579, 580, 583, 584, 585, 586, 587, 588, 589, 721, 722, 723, 724, 726, 727, 729, 730, 731, 732, 737, 738, 739, 740, 741, 742, 743, 744], "n_kernel": 576, "k_gradient": [576, 577, 578, 579, 580, 583, 584, 585, 586, 587, 588, 589], "k_diag": [576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589], "hyperparameter_constant_valu": 577, "3696": 577, "hyperparameter_sigma_0": 578, "edward": [578, 583, 586, 996, 1001, 1002, 1003, 1004, 1008], "hyperparameter_length_scal": [579, 583, 586, 587], "hyperparameter_period": 579, "0144": 579, "457": 579, "3894": 579, "3467": 579, "559": 580, "namedtupl": [581, 911, 1009], "maxsiz": 581, "customkernel": 582, "mat\u00e9rn": 583, "appr": 583, "8513": 583, "0368": 583, "1117": 583, "8086": [583, 1000], "0693": 583, "1220": 583, "gamma_bound": 584, "pairwise_kernels_kwarg": 584, "additive_chi2": [584, 602, 728, 737], "pairwise_kernel_funct": [584, 607, 737], "hyperparameter_gamma": 584, "9733": [584, 587], "8880": 584, "05663": 584, "05532": 584, "8676": [584, 1000], "07073": 584, "06165": 584, "__mul__": 585, "8354": [586, 1000], "03228": 586, "1322": 586, "7906": [586, 613], "0652": 586, "1441": 586, "hyperparameter_alpha": 587, "8881": 587, "0566": 587, "05518": 587, "8678": 587, "0707": 587, "0614": 587, "hyperparameter_noise_level": 589, "dict_kei": 590, "initial_strategi": 591, "imputation_ord": [591, 1003], "skip_complet": 591, "max_valu": [591, 1004, 1005], "keep_empty_featur": [591, 592, 594, 943, 1008], "nullabl": [591, 592, 593, 594, 1004, 1008], "na": [591, 592, 593, 594, 732, 741, 883, 885, 886, 1003, 1004, 1007, 1008, 1009, 1010], "known_val": 591, "Nearness": 591, "arab": 591, "broadcast": 591, "missingind": [591, 592, 594, 943, 1001, 1002, 1003, 1007, 1009], "initial_imputer_": 591, "imputation_sequence_": 591, "feat_idx": 591, "neighbor_feat_idx": 591, "n_features_with_missing_": 591, "indicator_": [591, 592, 594], "knp": 591, "stef": [591, 943], "buuren": [591, 943], "karin": [591, 943], "groothui": [591, 943], "oudshoorn": [591, 943], "buck": 591, "1960": [591, 680], "306": 591, "imp_mean": [591, 594], "9584": [591, 1000], "nan_euclidean": [592, 725, 741], "_pairwise_cal": 592, "kwd": [592, 734, 737, 741, 744, 755, 756], "olga": [592, 943], "troyanskaya": [592, 943], "cantor": [592, 943], "gavin": [592, 943], "sherlock": [592, 943], "pat": [592, 943], "botstein": [592, 943], "russ": [592, 943], "altman": [592, 943], "bioinformat": [592, 943], "520": [592, 814, 943, 956], "n_output_featur": 592, "error_on_new": 593, "features_": [593, 943], "n_missing_featur": 593, "x2_tr": 593, "n_features_with_miss": 593, "statistics_": 594, "n_features_missing_ind": 594, "x_imput": 594, "n_features_out": 594, "surface_": 595, "quadcontourset": 595, "quadmesh": 595, "feature_1": [595, 878], "feature_2": 595, "nicer": 595, "pd_result": 596, "target_idx": 596, "decil": [596, 1004], "is_categor": 596, "pdp": [596, 960, 1007], "nonexist": 596, "deciles_vlines_": 596, "vlines_": 596, "deciles_hlines_": 596, "bars_": 596, "heatmaps_": 596, "pdp_lim": 596, "ice_lines_kw": 596, "pd_line_kw": 596, "contour_kw": 596, "disp1": 596, "disp2": 596, "pdp_line_kw": 596, "bar_kw": 596, "heatmap_kw": 596, "seq": 597, "n_values_feature_j": 597, "bre": [598, 969], "4666": 598, "2211": 598, "x_min_": 599, "x_max_": 599, "n_threshold": [599, 690, 745, 752], "stepwis": [599, 618, 619, 620, 646, 647, 949], "increasing_": 599, "isotonic_regress": [599, 1006], "secondari": [599, 997], "leeuw": 599, "1977": 599, "nilotp": [599, 601], "chakravarti": [599, 601], "pava": 599, "hornik": 599, "mair": 599, "kruskal": [599, 654, 658, 950], "psychometrica": 599, "iso_reg": 599, "8628": 599, "7256": 599, "isotonicregression0": 599, "increasing_bool": 600, "fisher_transform": 600, "sample_step": 602, "sample_interv": 602, "sample_interval_": [602, 1009], "skewedchi2sampl": [602, 603, 604, 605, 945, 1000, 1007, 1008], "chi2_kernel": [602, 606, 721, 728, 951, 994], "additive_chi2_kernel": [602, 722, 728, 945], "vedaldi": [602, 945], "zisserman": [602, 945, 953], "chi2sampl": 602, "9499": 602, "component_indices_": [603, 1006], "normalization_": [603, 945], "additivechi2sampl": [603, 604, 605, 606, 721, 722, 945, 1007, 1009], "kernel_metr": [603, 604, 605, 606], "seeger": [603, 945], "mahdavi": 603, "jin": [603, 1004, 1005], "data_transform": 603, "9987": 603, "fft": 604, "indexhash": 604, "bithash": 604, "indexhash_": 604, "bithash_": 604, "kitchen": [605, 945], "sink": [605, 945], "random_offset_": [605, 606], "random_weights_": [605, 606], "rahimi": [605, 945], "benjamin": [605, 995, 996, 1004, 1005, 1006, 1007, 1008, 1009], "recht": [605, 945], "berkelei": [605, 873, 874], "brecht": 605, "rah": 605, "rbf_featur": [605, 945], "skewed": [606, 1000], "secant": 606, "fuxin": 606, "catalin": 606, "ionescu": [606, 945, 1003], "cristian": 606, "sminchisescu": [606, 945], "chi2_featur": 606, "2c": [607, 616, 636, 637, 638, 639, 651, 945], "kevin": [607, 995, 997, 999, 1000, 1003, 1004, 1005, 1007, 1008, 1010], "492": [607, 946, 985], "493": [607, 865, 946], "alpha_1": [608, 609, 949], "alpha_2": [608, 609, 949], "lambda_1": [608, 609, 949], "lambda_2": [608, 609, 949], "threshold_lambda": 608, "x_offset_": [608, 609, 1005], "x_scale_": [608, 609, 1005], "mackai": [608, 609, 949], "ashra": 608, "salakhutdinov": [608, 814, 956], "utstat": 608, "rsalakhu": 608, "sta4273": 608, "lecture2": 608, "computed_scor": 609, "appendix": [609, 640, 949, 963], "wipf": [609, 949], "nagarajan": [609, 949], "2_2": [610, 611, 616, 617, 618, 619, 620, 624, 625, 626, 627, 636, 645, 646, 647, 648], "glmnet": [610, 611, 993], "sparse_coef_": [610, 616, 624, 626, 993], "dual_gap_": [610, 611, 616, 617, 624, 625, 626, 627, 1006], "max_j": [610, 616], "w_j": [610, 616, 953, 967], "ext": 610, "83816048": 610, "55968825": 610, "coef_init": [610, 611, 616, 617, 624, 625, 626, 627, 630, 631, 632, 640, 641, 642, 645, 648], "mono": [610, 611, 616, 617, 624, 625, 626, 627, 645, 648], "_21": [610, 611, 616, 617, 624, 625, 626, 627, 645, 648], "sum_j": [610, 611, 616, 617, 624, 625, 626, 627, 645, 648, 949, 953, 958], "alpha_min": [610, 611, 614, 616, 617, 618, 620, 624, 625, 626, 627, 645, 646, 647, 648], "alpha_max": [610, 611, 616, 617, 624, 625, 626, 627, 645, 648], "ndim": [610, 611, 616, 617, 624, 625, 626, 627, 645, 648, 885, 886], "multitaskelasticnet": [610, 611, 616, 625, 626, 627, 645, 949, 993, 1000, 1001, 1004, 1006], "l1_ratio_": [611, 623, 625], "n_l1_ratio": [611, 623, 625, 996], "199": [611, 754, 968], "398": [611, 987], "unpen": [612, 633, 644, 949], "raphson": [612, 633, 644], "g_j": [612, 633, 644], "483": 612, "795": 612, "pg_i": 613, "scale_": [613, 834, 835, 843, 845, 855, 963, 998], "outliers_": 613, "elvezio": [613, 949], "ronchetti": [613, 949], "concomit": [613, 949], "owen": [613, 1002, 1003], "statweb": [613, 646, 647], "hhu": [613, 1002], "284": 613, "806": 613, "7200": 613, "4923": 613, "1698": 613, "0106": 613, "9221": 613, "0226": 613, "fit_path": [614, 618, 619, 620, 646, 647], "coef_path_": [614, 615, 618, 619, 949], "active_": [614, 615, 618, 619], "1111": [614, 620], "max_n_alpha": [615, 619], "n_cv_alpha": [615, 619], "cv_alpha": [615, 619], "lassolar": [615, 616, 617, 619, 620, 627, 628, 629, 646, 647, 648, 949, 985, 993, 994, 996, 1000, 1003, 1004, 1006], "9996": 615, "2961": 615, "3996": 615, "2_f": 616, "_11": 616, "4951": 617, "2_fro": [617, 626, 627, 648], "coef_path": [617, 627, 648], "46874778": [617, 627, 648], "2159048": [617, 627, 648], "4425765": [617, 627, 648], "23689075": [617, 627, 648], "coef_path_lar": [617, 627, 648], "coef_path_continu": [617, 627, 648], "interp1d": [617, 627, 648], "46915237": [617, 627, 648], "23668876": [617, 627, 648], "congruenc": [618, 619, 620, 646, 647], "fragil": 619, "3972": 619, "2222": 620, "rank_": 621, "singular_": 621, "maxent": [622, 623, 949], "primal": [622, 623, 641, 865, 866, 967, 968], "synthetic_feature_weight": [622, 623], "ciyou": 622, "byrd": 622, "jorg": [622, 996, 1005, 1007], "noced": 622, "lui": [622, 994, 996, 997, 1001, 1010], "iem": 622, "lbfgsb": 622, "schmidt": [622, 949, 996], "le": [622, 833, 944, 949, 956, 964, 966, 1001, 1005, 1006, 1010], "roux": [622, 949, 966], "00860051": 622, "defazio": [622, 949], "lacost": [622, 949], "hsiang": [622, 997], "fu": [622, 997], "fang": [622, 1000, 1001], "lan": [622, 1008, 1009], "chih": [622, 998], "jen": [622, 1001], "maxent_du": 622, "cs_": 623, "l1_ratios_": 623, "coefs_paths_": [623, 1003], "coefs_path": 623, "n_l1_ratios_": 623, "score_param": [623, 1010], "w_ij": 624, "eps_": [624, 626], "45663524": 624, "45612256": 624, "0872422": 624, "fro_2": [625, 627], "52875032": 625, "46958558": 625, "00166409": 625, "60809415": 626, "94592424": 626, "41888636": 626, "87382323": 626, "9994": 627, "5713": 627, "7971": 627, "9015": [627, 1001], "n_nonzero_coefs_": [628, 629], "orthogonal_mp_gram": [628, 629, 649, 1007], "mallat": [628, 649, 650, 949], "3397": [628, 649, 650], "3415": [628, 649, 650], "papier": [628, 649, 650], "mallatpursuit93": [628, 649, 650], "rubinstein": [628, 649, 650], "zibulevski": [628, 649, 650], "elad": [628, 649, 650], "technion": [628, 649, 650, 949], "ronrubin": [628, 649, 650, 949], "ksvd": [628, 649, 650, 949], "9991": [628, 629, 1001], "3854": [628, 629], "previous_loss": [630, 631, 632, 641], "pa": [630, 631, 862, 949, 953, 966], "preset": [630, 632, 640, 957], "t_": [630, 631, 632, 640, 641, 642, 822, 823, 967], "loss_function_": [630, 632, 640, 641, 1010], "volume7": [630, 631], "crammer06a": [630, 631], "crammer": [630, 631, 698, 949, 953, 968], "dekel": [630, 631, 949], "keshat": [630, 631, 949], "shalev": [630, 631, 949, 967], "shwartz": [630, 631, 949, 967], "26642044": 630, "45070924": 630, "67251877": 630, "64185414": 630, "84127814": 630, "intercept_init": [630, 631, 632, 640, 642], "y_all": [630, 632, 640, 793, 794, 822], "epsilon_insensit": [631, 640, 642, 866, 949, 967], "squared_epsilon_insensit": [631, 640, 642, 866, 949, 999], "48736655": 631, "18818427": 631, "59122734": 631, "94731329": 631, "02306214": 631, "eta0": [632, 640, 641, 642, 967], "lossfunct": [632, 640, 641, 1002], "therein": 632, "939": [632, 982], "990": [633, 953], "676": 633, "solver_opt": 634, "ipm": 634, "linprog": [634, 949], "is_data_valid": [635, 949], "is_model_valid": [635, 949], "max_trial": [635, 949], "max_skip": 635, "stop_n_inli": [635, 949], "stop_scor": [635, 949], "stop_prob": 635, "mad": [635, 999], "costlier": 635, "n_trials_": 635, "n_skips_no_inliers_": 635, "n_skips_invalid_data_": 635, "n_skips_invalid_model_": 635, "sri": [635, 949, 1000, 1001], "bmva": 635, "bmvc": [635, 949], "paper355": 635, "9885": 635, "9417": 635, "15000": [636, 651, 822, 823], "btol": [636, 638], "gcv_mode": [637, 995], "store_cv_valu": [637, 639, 1001, 1004], "alpha_per_target": [637, 1005], "cv_values_": [637, 639], "5166": 637, "gcv": [637, 639], "9595": 638, "9630": 639, "power_t": [640, 641, 642, 822, 823, 967], "best_loss": [640, 642], "leon": [640, 641, 642, 993], "bottou": [640, 641, 642, 957, 967], "pow": [640, 641, 642, 822, 823], "dl": 640, "775047": 640, "775151": 640, "justif": 640, "volume2": 640, "zhang02c": 640, "offset_init": 641, "unshifft": 641, "n_subsampl": [643, 891], "breakdown_": 643, "n_subpopulation_": 643, "xin": [643, 949, 1001], "dang": [643, 949], "hanxiang": [643, 949], "peng": [643, 949, 999, 1000, 1001, 1003, 1005], "xueqin": [643, 949], "hepe": [643, 949], "olemiss": 643, "xdang": 643, "mtse": 643, "9884": 643, "5871": 643, "coeff": 644, "599": 644, "copy_gram": [646, 647, 650], "return_path": [646, 647, 649, 650], "lars_path_gram": [646, 949, 1002], "tib": [646, 647], "xgamma": 649, "norms_squar": 650, "copy_xi": 650, "return_intercept": [651, 1002], "_preprocess_data": 651, "path_method": [652, 950], "neighbors_algorithm": [652, 653], "arnoldi": [652, 653, 657], "fw": 652, "warshal": [652, 950], "kernel_pca_": 652, "nbrs_": [652, 653], "dist_matrix_": 652, "tenenbaum": [652, 950], "reconstruction_error": 652, "frobenius_norm": 652, "d_fit": 652, "x_fit": 652, "n_queri": [652, 807, 808, 809, 811, 813, 815, 816, 817], "hessian_tol": [653, 657], "modified_tol": [653, 657], "reconstruction_error_": 653, "rowei": [653, 657, 814, 950, 956], "saul": [653, 657, 950, 1000, 1001, 1003], "2323": [653, 657, 950], "donoho": [653, 657, 950], "grime": [653, 657, 950], "natl": [653, 657, 950], "acad": [653, 657, 950], "5591": [653, 657, 950], "mlle": [653, 657, 950], "zha": [653, 657, 950], "shanghai": [653, 657, 950], "univ": [653, 657, 950], "immers": [654, 658], "nonmetr": [654, 658, 950], "smacof": [654, 1008], "stress": [654, 658, 950, 1008], "stress_": 654, "dispar": [654, 658, 950], "dissimilarity_matrix_": 654, "psychometrika": [654, 658, 950], "1964": [654, 658, 841, 853, 950], "borg": [654, 658, 950], "groenen": [654, 658, 950], "affinity_matrix": [655, 659], "n_neighbors_": [655, 811], "early_exagger": 656, "min_grad_norm": [656, 999], "der": [656, 660, 950, 996, 997, 1001], "maaten": [656, 660, 950], "bhtsne": [656, 1000], "opentsn": 656, "abort": 656, "pdist": [656, 741, 744], "pairwise_distance_funct": [656, 660, 741, 744, 956], "barn": [656, 950, 998, 1000, 1003], "hut": [656, 950, 998, 1000, 1003], "nlogn": 656, "kl_divergence_": [656, 1000], "learning_rate_": [656, 823], "hinton": [656, 814, 821, 822, 823, 950, 956, 957, 958], "2579": 656, "2605": 656, "lvdmaaten": [656, 1000], "oct": [656, 732, 950, 956], "3221": [656, 950], "3245": [656, 950], "jmlr_2014": 656, "belkina": [656, 950], "ciccolella": [656, 950], "anno": [656, 950], "halpert": [656, 950], "spidlen": [656, 950], "snyder": [656, 950], "cappion": [656, 950], "kobak": [656, 1006], "beren": 656, "transcriptom": 656, "guttman": 658, "mds_result": 658, "norm_laplacian": 659, "drop_first": 659, "nk": 660, "2n": [660, 945, 957], "3k": 660, "cosine_dist": [660, 725, 956, 999], "jarkko": 660, "venna": 660, "samuel": [660, 977, 996, 997, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1010], "kaski": 660, "icann": 660, "verlag": 660, "491": 660, "twelfth": 660, "pmlr": 660, "384": [660, 866], "im_": 661, "axesimag": 661, "text_": 661, "include_valu": 661, "values_format": [661, 1003], "im_kw": [661, 1007], "text_kw": [661, 1008], "get_metr": 663, "euclideandist": 663, "manhattandist": 663, "chebyshevdist": 663, "minkowskidist": [663, 1006], "seuclideandist": 663, "mahalanobisdist": 663, "haversinedist": 663, "arcsin": [663, 727], "hammingdist": 663, "n_unequ": 663, "n_tot": 663, "canberradist": 663, "braycurtisdist": 663, "abbrevi": 663, "ntt": 663, "ntf": 663, "nft": 663, "nff": 663, "nneq": 663, "jaccarddist": 663, "matchingdist": 663, "dicedist": 663, "kulsinskidist": [663, 1009], "rogerstanimotodist": 663, "russellraodist": 663, "sokalmichenerdist": 663, "sokalsneathdist": 663, "pyfunc": [663, 956], "pyfuncdist": 663, "metric_obj": 663, "chance_level_": [664, 666, 1009], "drop_intermedi": [664, 666, 745, 752, 1009], "errors_lines_": 665, "with_error": 665, "scatter_": 665, "balanced_accuracy_scor": [667, 750, 953, 1001], "imperfectli": [667, 697, 953], "label_tru": [668, 681, 700, 718, 720, 758], "upperlimit": 668, "expected_ri": 669, "discord": 669, "hubert1985": 669, "1007": 669, "2fbf01908075": 669, "steinley2004": 669, "wk": 669, "rand_index": 669, "adjusted_rand_index": 669, "chacon": 669, "chac\u00f3n": 669, "rastrojo": 669, "balanced_accuraci": [672, 953, 1001], "brodersen": 672, "ong": 672, "stephan": [672, 996, 1002, 1003, 1005], "buhmann": 672, "20th": 672, "3121": 672, "kelleh": [672, 953], "aoif": [672, 953], "arci": [672, 953], "y_true_categor": [673, 953], "calinski": [674, 999], "harabasz": 674, "allow_non": 675, "thrown": [675, 1002, 1003], "tn": [676, 682, 953], "negative_class": 676, "zebra": 676, "output_dict": [677, 1001, 1005], "precision_recall_fscore_support": [677, 692, 693, 747, 750, 953, 997, 1001, 1003, 1009], "multilabel_confusion_matrix": [677, 692, 693, 701, 747, 750, 953, 1002], "conting": [678, 679, 694, 718, 999], "n_classes_tru": [678, 718], "n_classes_pr": [678, 718], "cohen": [680, 1001], "p_o": 680, "p_e": 680, "artstein": 680, "poesio": 680, "linguist": [680, 862, 966], "555": 680, "596": 680, "neutral": 680, "6875": 680, "label_pr": [681, 699, 700, 718, 720, 758], "ant": [682, 717, 953], "a_row": 683, "a_column": 683, "b_row": 683, "b_column": 683, "tsoumaka": [684, 697, 703, 953], "kataki": [684, 697, 703, 953], "vlahava": [684, 703, 953], "handbook": [684, 703, 953], "685": [684, 703, 953], "raw_valu": [685, 686, 691, 708, 709, 711, 713, 714, 716, 748, 753, 754, 953, 1001, 1004], "wainwright": [685, 686, 687], "su": [685, 686, 687], "statlearnspars": [685, 686, 687], "764": [685, 953], "691": 685, "8125": 685, "57142857": 685, "d2": 686, "d2_absolute_error_scor": [686, 953, 1007], "koenker": [686, 949], "roger": [686, 1000, 1001, 1005], "jos\u00e9": [686, 996, 1006], "487": 687, "630": 687, "bouldin": 688, "farther": 688, "log_bas": 689, "ignore_ti": [689, 719], "ndcg": [689, 719, 953, 1000], "ndcg_score": [689, 953, 1000, 1003, 1008, 1009], "sharper": 689, "discounted_cumulative_gain": 689, "dcg": [689, 719, 953, 1000], "jarvelin": [689, 719, 953], "kekalainen": [689, 719, 953], "446": [689, 719, 953], "colt": [689, 719, 953], "mcsherri": [689, 719, 953], "najork": [689, 719, 953], "european": [689, 719, 953], "421": [689, 719, 953], "groud": [689, 719], "true_relev": [689, 719], "imperfect": [691, 748, 953, 995], "variance_weight": [691, 748, 953], "983": 691, "n_unique_label": [692, 693, 701, 746, 747, 750, 917], "fbeta_scor": [692, 705, 746, 953, 995, 996, 997, 998, 1003, 1009], "y_true_empti": 692, "y_pred_empti": [692, 693], "66666667": [692, 745, 815, 963], "328": 693, "fowlk": [694, 999], "mallow": [694, 999], "get_scorer_nam": [695, 953, 1007, 1010], "all_scor": 696, "forgiv": 697, "upperbound": 697, "grigorio": 697, "ioanni": 697, "wareh": 697, "septemb": [697, 953, 993, 996, 999, 1001, 1006, 1009], "pred_decis": [698, 953, 1006], "disagre": [698, 960], "kobi": 698, "265": [698, 800, 804, 955], "AND": 698, "denero": 698, "gluster": 699, "v_measur": [699, 758], "6666": [701, 953, 999], "5833": [701, 953], "lrap": [702, 953], "209": [704, 841], "21616": 704, "needs_proba": [705, 1002, 1010], "needs_threshold": [705, 1010], "ftwo_scor": [705, 953], "mcc": [706, 953, 1007], "baldi": 706, "brunak": 706, "chauvin": 706, "andersen": [706, 1007], "nielsen": [706, 1001], "gorodkin": 706, "jurman": 706, "riccadonna": 706, "furlanello": 706, "cen": 706, "3273": 709, "5515": 709, "6198": 709, "112589990684262": 709, "0568": 710, "4260": [712, 715], "41666667": 713, "825": 713, "msle": [714, 953], "rmsle": [714, 953], "root_mean_squared_log_error": [714, 953, 1010], "00462428": 714, "08377444": 714, "samplewis": [717, 953], "mcm": [717, 953], "mcm_": 717, "multi_confus": 717, "056": [718, 961], "normalized_discounted_cumulative_gain": 719, "dcg_score": [719, 953, 1000, 1003], "marszalek": [721, 722, 951], "lazebnik": [721, 722, 951], "schmid": [721, 722, 951], "ouvert": [721, 722, 951], "00171412": [721, 722, 951], "dense_output": [724, 730, 858, 903, 1001], "linear_kernel": [724, 728, 951, 1001], "haversine_dist": [725, 1002], "y_norm_squar": 726, "x_norm_squar": [726, 998, 1010], "paired_dist": [726, 732, 741, 997], "41421356": [726, 732, 956], "lon": 727, "ezeiza": 727, "airport": 727, "bueno": 727, "argentina": 727, "gaull": 727, "bsa": 727, "83333": 727, "5166646": 727, "0083899664": 727, "53844117956": 727, "bsas_in_radian": 727, "paris_in_radian": 727, "6371000": 727, "kilomet": 727, "11099": 727, "54035582": 727, "polynomial_kernel": [728, 951, 1010], "rbf_kernel": [728, 951, 997], "laplacian_kernel": [728, 951, 998], "sigmoid_kernel": [728, 951], "sq": 732, "dixon": [732, 1003, 1004], "cybernet": 732, "ieeexplor": 732, "4310090": 732, "filter_param": 737, "jth": [737, 741], "force_all_finit": [741, 883, 885, 886, 1004, 1007], "distance_metr": [741, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819], "metric_kwarg": [742, 743], "reduce_func": [744, 1004], "d_chunk": 744, "sought": 744, "neigh": [744, 807, 808, 809, 811, 813, 815, 816, 817], "gen": 744, "probas_pr": 745, "warn_for": 746, "shantanu": 746, "godbol": 746, "sunita": 746, "sarawagi": 746, "pig": 746, "948": [748, 953], "max_fpr": [751, 953, 1001], "provost": [751, 953], "ceder": [751, 953], "stern": [751, 953], "fawcett": [751, 752, 953], "generalis": [751, 953, 973], "612": 753, "n_samples_a": [755, 756], "favour": [755, 950, 952, 1002], "mean_prior": 760, "degrees_of_freedom_prior": 760, "verbose_interv": [760, 761], "wishart": 760, "emipr": 760, "precisions_": [760, 761], "precisions_cholesky_": [760, 761, 1007], "converged_": [760, 761], "lower_bound_": [760, 761, 1001], "weight_concentration_prior_": 760, "weight_concentration_": 760, "mean_precision_prior_": 760, "mean_precision_": 760, "mean_prior_": 760, "degrees_of_freedom_prior_": 760, "degrees_of_freedom_": 760, "covariance_prior_": 760, "hagai": 760, "attia": 760, "bgm": 760, "n_dimens": [760, 761], "log_prob": [760, 761], "weights_init": 761, "precisions_init": [761, 1007, 1009], "gm": 761, "pre_dispatch": [762, 768, 776, 784, 786, 787, 788, 789, 792, 919, 996], "error_scor": [762, 765, 766, 768, 776, 784, 787, 788, 789, 792, 942, 997, 1001, 1005, 1008], "explos": [762, 776, 786, 787, 788], "fitfailedwarn": [762, 765, 766, 768, 776, 784, 787, 788, 789, 792], "param_kernel": [762, 776], "param_degre": 762, "split0_test_scor": [762, 776, 999], "rank_t": 762, "split1_test_scor": [762, 776], "split0_train_scor": [762, 776, 999], "split1_train_scor": [762, 776], "mean_train_scor": [762, 776, 999], "std_train_scor": [762, 776, 999], "split0_test_precis": [762, 776], "mean_train_precis": [762, 776], "best_estim": [762, 765, 766, 776], "scorer_": [762, 765, 766, 776], "n_splits_": [762, 765, 766, 776], "refit_time_": [762, 765, 766, 776, 1001], "multimetric_": [762, 765, 766, 776], "parametergrid": [762, 995, 1001], "split2_test_scor": 762, "num_sampl": [762, 776, 1008], "versionad": [762, 765, 766, 776], "stratif": [763, 764, 770, 771, 780, 781, 782, 924, 1002], "group_kfold": 763, "set_split_request": [763, 764, 769, 771, 780], "aggressive_elimin": [765, 766, 942], "r0": [765, 766], "replai": [765, 766], "n_remaining_candidates_": [765, 766], "n_candid": [765, 766, 942], "max_resources_": [765, 766], "min_resources_": [765, 766], "n_required_iterations_": [765, 766], "n_possible_iterations_": [765, 766], "exceed": [765, 766, 999], "n_unique_tick": [768, 789], "n_tick": [768, 784, 789, 792], "neg_": [768, 784, 999], "errorbar_": [768, 784], "errorbarcontain": [768, 784], "fill_between_": [768, 784], "polycollect": [768, 784], "exploit_incremental_learn": [768, 789], "log_scal": [768, 1009], "fill_between_kw": [768, 784], "errorbar_kw": [768, 784], "predispatch": [768, 784, 789, 792], "negat": [768, 784, 953], "combinator": 772, "lpo": 772, "param_list": 774, "rounded_list": 774, "89856": 774, "923223": 774, "878964": 774, "038159": 774, "parametersampl": [776, 995, 1001, 1005], "2652124": 777, "rskf": 778, "36851234": 778, "sizeabl": [779, 782], "sad": [780, 781], "sss": 782, "logistic_regress": [784, 792], "n_valu": [784, 792, 1001], "checked_cv": 785, "3315057": [787, 788], "08022103": [787, 788], "03531816": [787, 788], "test_r2": 788, "test_auc": 788, "train_r2": 788, "train_auc": 788, "3635": 788, "3573": 788, "6114": 788, "28009951": 788, "3908844": 788, "22784907": 788, "train_sizes_ab": 789, "train_size_ab": 789, "cv_train_scor": 789, "cv_test_scor": 789, "permutation_scor": 790, "pairwise_indices_": 793, "label_binarizer_": 794, "multilabel_": [794, 998], "code_book_": 795, "bakiri": [795, 954], "pict": [795, 954], "order_": [796, 799], "jess": [796, 954, 1006], "pfahring": [796, 954], "geoff": [796, 954], "holm": [796, 954, 1010], "eib": [796, 954], "8387": 796, "9431": 796, "4576": 796, "8878": 796, "3684": 796, "2640": 796, "0321": 796, "9935": 796, "0626": 796, "y_log_prob": 796, "load_linnerud": [798, 999, 1004], "force_alpha": [800, 801, 802, 804, 1008], "lidston": [800, 801, 802, 804, 955], "class_count_": [800, 801, 802, 803, 804], "class_log_prior_": [800, 801, 802, 804], "feature_count_": [800, 802, 804], "feature_log_prob_": [800, 801, 802, 804], "categoricalnb": [800, 802, 803, 804, 955, 1003, 1004, 1005, 1006, 1008], "renni": [800, 802, 955, 1001], "schuetz": [800, 804], "htmledit": [800, 804, 951], "mccallum": [800, 955], "nigam": [800, 955], "metsi": [800, 955], "androutsopoulo": [800, 955], "palioura": [800, 955], "cea": [800, 955], "predict_joint_log_proba": [800, 801, 802, 803, 804, 1008], "min_categori": [801, 1005], "category_count_": 801, "n_categories_": 801, "mirror": [802, 942], "mahout": 802, "weka": 802, "feature_all_": 802, "shih": [802, 955], "teevan": [802, 955], "karger": [802, 955], "616": [802, 955, 963], "623": [802, 955], "jrenni": 802, "icml03": 802, "var_smooth": [803, 1001], "stan": [803, 1010], "levequ": [803, 845], "cstr": 803, "epsilon_": 803, "theta_": [803, 955], "clf_pf": 803, "distancemetric64": [805, 806], "valid_metr": [805, 806, 956, 1009], "19662693": [805, 806], "29473397": [805, 806], "tree_copi": [805, 806], "query_radiu": [805, 806], "count_onli": [805, 806], "kernel_dens": [805, 806], "94114649": [805, 806], "83281226": [805, 806], "2071716": [805, 806], "two_point_correl": [805, 806], "get_arrai": [805, 806], "get_n_cal": [805, 806], "n_call": [805, 806], "get_tree_stat": [805, 806], "tree_stat": [805, 806], "breadth_first": [805, 806, 810], "return_log": [805, 806], "k_true": [805, 806], "k_ret": [805, 806], "breadth": [805, 806, 810, 977, 995], "dualtre": [805, 806], "sort_result": [805, 806, 813, 815, 816, 817, 1005], "radii": [805, 806], "reset_n_cal": [805, 806], "effective_metric_": [807, 808, 809, 811, 813, 815, 816, 817, 956], "callbl": 807, "effective_metric_params_": [807, 808, 809, 811, 813, 815, 816, 817], "outputs_2d_": [807, 815, 1003], "nearest_neighbor_algorithm": [807, 815, 816], "333": 807, "n_index": [807, 808, 809, 811, 813, 815, 816], "neigh_dist": [807, 808, 809, 811, 813, 815, 816, 817], "neigh_ind": [807, 808, 809, 811, 813, 815, 816, 817], "nearest_neighbors_algorithm": [808, 813], "nearer": [809, 817, 956], "x_dist_graph": 809, "silverman": [810, 1008], "binarytre": [810, 997, 1001, 1005], "bandwidth_": 810, "log_dens": 810, "52955942": 810, "51462041": 810, "60244657": 810, "logprob": 810, "negative_outlier_factor": 811, "9821": 811, "0370": 811, "3697": 811, "shifted_opposite_lof_scor": 811, "opposite_lof_scor": 811, "wminkowski": [812, 1005, 1007], "narasimhan": 812, "chu": [812, 1009], "shrunken": [812, 993], "6567": 812, "6572": 812, "nbr": [813, 956], "neighborsclassifi": [813, 815, 816, 817, 993], "n_features_a": 814, "n_features_b": 814, "goldberg": [814, 956], "neighbourhood": [814, 956], "513": [814, 956], "ncanip": 814, "neighbourhood_components_analysi": 814, "961904": 814, "outlier_label": [815, 1003], "outlier_label_": 815, "33333333": [815, 963], "x_cluster": 817, "warn_when_not_sort": 820, "efficiencywarn": [820, 1008], "sml": [821, 958], "pcd": [821, 958], "sweep": 821, "gibb": [821, 958, 972], "intercept_hidden_": 821, "intercept_visible_": 821, "h_samples_": 821, "osindero": [821, 958], "teh": [821, 958], "1527": 821, "1554": 821, "absp": 821, "fastnc": 821, "tieleman": [821, 958], "v_new": 821, "pseudo_likelihood": 821, "relu": [822, 823], "beta_1": [822, 823], "beta_2": [822, 823], "max_fun": [822, 823, 1003], "n_layer": [822, 823], "neuron": [822, 823, 951, 957], "tan": [822, 823, 957, 1000], "rectifi": [822, 823], "kingma": [822, 823, 957], "diederik": [822, 823, 957, 1008], "jimmi": [822, 823, 957, 999, 1001], "effective_learning_r": [822, 823], "best_loss_": [822, 823, 1008], "best_validation_score_": [822, 823, 1008], "validation_scores_": [822, 823, 1008], "intercepts_": [822, 823, 957], "n_layers_": [822, 823], "out_activation_": [822, 823], "geoffrei": [822, 823, 957, 1004, 1005, 1006, 1007, 1009], "connectionist": [822, 823], "glorot": [822, 823], "xavier": [822, 823, 1001, 1002, 1003, 1005, 1006], "yoshua": [822, 823, 966], "feedforward": [822, 823], "kaim": [822, 823], "delv": [822, 823], "imagenet": [822, 823], "961": 822, "log_y_prob": 822, "named_transform": [824, 1008], "svd__n_compon": 824, "transform_list": 824, "s__p": 825, "n_transformed_featur": 825, "y_log_proba": 825, "analyst": 828, "x_tr": [828, 834, 837, 838, 839, 843, 845, 848, 850, 851, 855, 856], "accept_spars": [829, 885, 886, 1000, 1010], "inv_kw_arg": 829, "pickleabl": [829, 999], "6931": 829, "3862": 829, "n_bins_": 830, "regener": 830, "xinv": 830, "tild": [831, 961, 963], "k_fit_rows_": 831, "k_fit_all_": 831, "1299": [831, 963], "1319": [831, 963], "n_samples1": 831, "n_samples2": 831, "k_new": 831, "neg_label": [832, 849], "y_type_": 832, "sparse_input_": 832, "lb": [832, 964], "tokyo": [833, 964], "amsterdam": [833, 964], "max_abs_": 834, "x_std": [835, 851, 963], "data_min_": [835, 998], "data_max_": [835, 998], "data_range_": [835, 998], "unwieldi": 836, "fi": 836, "comedi": 836, "y_indic": 836, "yt": 836, "ands": 836, "feature_name_combin": [838, 1009], "categories_": [838, 839, 846, 963, 1001, 1008], "unregular": [838, 861, 985, 1002], "intact": [838, 987], "infrequ": [838, 839, 846, 953, 993, 1007, 1008, 1009], "infrequent_if_exist": [838, 963], "x_6": 838, "x_7": 838, "drop_idx_": [838, 1004, 1008], "drop_idx": 838, "gender_femal": 838, "gender_mal": 838, "group_1": 838, "group_2": 838, "group_3": 838, "drop_enc": [838, 963], "drop_binary_enc": 838, "custom_combin": 838, "custom_fnames_enc": 838, "x0_str_femal": 838, "x0_str_male": 838, "x1_int_1": 838, "x1_int_2": 838, "x1_int_3": 838, "oh": [838, 1003], "infrequent_sklearn": [838, 963], "n_encoded_featur": [838, 839], "_csr": 838, "onward": [839, 997], "bpo": 839, "43475": 839, "lenient": [839, 973, 1010], "min_degre": [840, 1006], "max_degre": [840, 1006], "powers_": 840, "n_output_features_": 840, "nystrom": [840, 1002, 1003], "hugh": [840, 995, 1006], "featurewis": 841, "power_transform": [841, 854, 1001], "biometrika": [841, 853], "954": [841, 853], "959": [841, 853], "386": 841, "707": [841, 853], "ignore_implicit_zero": [842, 854], "landmark": [842, 854, 963], "n_quantiles_": 842, "quantiles_": [842, 963, 1003], "references_": 842, "with_cent": [843, 855], "with_scal": [843, 855], "unit_vari": [843, 855, 1005], "quartil": 843, "q_min": [843, 855], "q_max": [843, 855], "center_": 843, "robust_scal": [843, 854, 1001], "interquartile_rang": 843, "bspline": 844, "n_features_out_": 844, "with_std": [845, 856, 963, 1001], "n_samples_seen": 845, "5a": 845, "randal": [845, 997, 1007], "mic": [846, 963], "target_mean_": [846, 963], "target_type_": 846, "f0_c0": 846, "f0_c1": 846, "f0_c2": 846, "f1_c0": 846, "f1_c1": 846, "f1_c2": 846, "micci": [846, 963], "barreca": [846, 963], "newsl": [846, 963], "enc_auto": 846, "enc_high_smooth": 846, "enc_low_smooth": 846, "type_of_target_": 846, "ahead": 849, "return_norm": [852, 1000], "compute_inverse_compon": [857, 858, 965], "inverse_components_": [857, 858, 965, 1007], "2759": [857, 858], "afor": [857, 858], "baserandomproject": [857, 858], "ping": [858, 965, 999, 1000], "density_": 858, "gaussianrandomproject": [858, 965, 994, 1007, 1009, 1010], "church": [858, 965], "kdd06_rp": 858, "cgi": 858, "uoa": 858, "gr": 858, "opta": 858, "0182": 858, "e2": [859, 949], "93lindenstrauss_lemma": 859, "sanjoi": [859, 965], "anupam": [859, 965, 1008], "gupta": [859, 965, 1000, 1001, 1004, 1005, 1006, 1007, 1009, 1010], "elementari": [859, 965], "11841": [859, 965], "1112658": [859, 965], "7894": [859, 965], "9868": [859, 965], "steadi": [860, 861], "xiaojin": 860, "zoubin": 860, "ghahramani": 860, "cmu": 860, "cald": 860, "carnegi": 860, "mellon": 860, "jerryzhu": 860, "label_prop_model": [860, 861], "clamp": [861, 966], "dengyong": 861, "bousquet": 861, "navin": 861, "lal": 861, "schoelkopf": 861, "termination_condition_": 862, "no_chang": 862, "all_label": 862, "33rd": [862, 966], "acl": [862, 966, 967], "stroudsburg": [862, 966], "crammer_sing": [865, 954, 968, 993], "seldom": 865, "w_x_1": [865, 866], "w_x_n": [865, 866], "w_intercept": [865, 866], "readonli": [865, 866, 1006, 1008, 1009], "raw_coef_": [865, 866], "smo": [865, 866], "1693": 865, "unsur": 866, "582": 866, "522": 866, "class_weight_": [867, 870, 1008], "n_sv": [867, 868, 869, 870, 871, 968, 1003], "fit_status_": [867, 868, 869, 870, 871], "n_support_": [867, 868, 869, 870, 871, 968, 1003], "proba_": [867, 870, 1004], "probb_": [867, 870, 1004], "shape_fit_": [867, 868, 869, 870, 871], "n_dimensions_of_x": [867, 868, 869, 870, 871], "7798": 869, "0547": 869, "0556": 869, "0561": 869, "7332": 869, "unshift": 869, "impract": 870, "tube": [871, 968], "0044": 872, "_tree": [873, 874, 875, 876, 994, 996], "decision_tree_learn": [873, 874, 969], "olshen": [873, 874, 969], "wadsworth": [873, 874, 969], "belmont": [873, 874, 969], "cutler": [873, 874], "cc_home": [873, 874], "htm": [873, 874], "ccp_path": [873, 874, 875, 876], "get_depth": [873, 874, 875, 876, 1002], "get_n_leav": [873, 874, 875, 876, 1002], "set_predict_proba_request": [873, 875], "extra_tre": [875, 876], "8947": 875, "decision_tre": [877, 878, 879, 969], "out_fil": [877, 969], "leaves_parallel": 877, "special_charact": [877, 969], "fontnam": [877, 1006], "helvetica": [877, 879], "graphviz": [877, 969], "postscript": 877, "tpng": 877, "paint": [877, 879], "dot_data": [877, 969], "digraph": 877, "show_weight": 878, "feature_0": 878, "unrepresent": 880, "keyerror": [880, 1003], "popitem": 880, "lifo": 880, "min_val": [882, 889], "input_nam": [884, 886, 916, 1007], "accept_large_spars": [885, 886, 1001], "ensure_2d": [885, 886], "allow_nd": [885, 886], "ensure_min_sampl": [885, 886], "ensure_min_featur": [885, 886], "y_numer": 885, "bsr": [885, 886, 1006], "x_convert": 885, "y_convert": 885, "array_convert": 886, "x_check": 886, "0x": 888, "max_val": 889, "include_boundari": [889, 1007], "y_org": 890, "class_weight_vect": 890, "king": 890, "zen": 890, "sample_weight_vect": 891, "parenthes": 892, "type_filt": 894, "_bay": 894, "_weight_boost": 894, "_bag": 894, "generate_onli": [896, 1003], "checks_gener": 896, "test_check_estim": 897, "check_estimators_fit_returns_self": 897, "_estimator_html_repr": 898, "array_lik": 900, "logdet": 900, "slogdet": 900, "6375861597263857": 900, "flip_sign": 902, "svd_lapack_driv": 902, "gesdd": 902, "p5": 902, "transposit": 902, "gesvd": 902, "conquer": 902, "unitari": 902, "vh": 902, "dot_product": 903, "deweight": 904, "min_batch_s": 905, "n_pack": [905, 906], "path_length": 907, "sliceabl": 908, "3x1": 908, "methodmetadatarequest": 909, "routemappingpair": 910, "routing_info": 910, "from_str": [910, 911], "methodpair": 911, "_obj": 913, "_method": 913, "any_method": 913, "truthi": 914, "helloifeven": 914, "_x_is_even": 914, "say_hello": 914, "3565178": 918, "temp_fold": 919, "max_nbyt": 919, "1m": 919, "mmap_mod": 919, "dispatch_next": 919, "dispatch_one_batch": 919, "unprotect": 919, "prefetch": 919, "print_progress": 919, "inner_max_num_thread": 921, "backend_param": 921, "parallel_config": 921, "register_parallel_backend": [921, 1001], "dask": [921, 973, 1001], "localclust": 921, "workload": [921, 972], "register_rai": 921, "backend_nam": 921, "oversubscript": [921, 1007], "threadpool": 921, "effective_n_job": 921, "tracking_select": 922, "reservoir_sampl": 922, "reservoir": 922, "make_default": 923, "parallelbackendbas": 923, "resampled_arrai": 924, "3x2": [924, 927], "shuffled_arrai": 927, "last_mean": 928, "last_var": 928, "last_n": 928, "todens": [928, 929, 930, 931, 932, 933, 934], "return_sum_weight": 934, "sum_weight": 934, "1875": 934, "all_or_ani": [937, 1003], "is_fit": 937, "eg": 937, "substitut": [937, 973, 999], "caching_dir": 938, "raise_except": 939, "array_sym": 939, "symmetric_arrai": 939, "sparse_symmetric_arrai": 939, "3x3": 939, "is_paramet": 941, "enclos": 942, "set_stat": 942, "bergstra": [942, 993, 994], "tournament": 942, "dispos": [942, 987], "n_resources_i": 942, "n_resources_0": 942, "n_candidates_i": 942, "n_candidates_0": 942, "r_0": 942, "n_resourc": 942, "983667": 942, "951958": 942, "947958": 942, "961009": 942, "955989": 942, "jamieson": 942, "talwalkar": 942, "desalvo": 942, "rostamizadeh": 942, "hyperband": 942, "bandit": 942, "multimetr": [942, 1003, 1008], "calibrated_forest": 942, "select__k": 942, "model__estimator__max_depth": 942, "imp": 943, "sophist": [943, 955], "14338": 943, "13286": 943, "15611": 943, "amelia": 943, "scientist": [943, 977], "roderick": 943, "rubin": 943, "1986": [943, 969], "ol2001": 943, "mask_missing_values_onli": 943, "mask_al": 943, "3_": 945, "2_": 945, "ws2001": 945, "unsampl": 945, "equiv": [945, 968], "elucid": 945, "frac12": 945, "rr2007": 945, "2x_iy_i": 945, "vz2010": 945, "vvz2010": 945, "prod_i": 945, "ls2010": 945, "c_0": [945, 951], "tensorsketch": 945, "pp2013": 945, "wikic": 945, "ccf2002": 945, "mercer": 945, "langl": [945, 953, 967, 968], "rangl": [945, 953, 967, 968], "y_j": [945, 953, 955, 963, 968], "obviat": 945, "dagm": 945, "vempati": 945, "jawahar": 945, "charikar": 945, "farach": 945, "colton": 945, "m2012": 946, "mu_k": 947, "cst": 947, "omega_": 947, "k0": 947, "h_l": 947, "extrema": 947, "honei": 947, "stork": 947, "dilemma": 948, "valid_scor": 948, "w_0": 949, "w_p": 949, "34545455": 949, "13636": [949, 1002], "rifkin": 949, "lippert": 949, "2n_": 949, "softw": 949, "kim": [949, 1001, 1002, 1003, 1007], "koh": [949, 977], "lustig": 949, "boyd": 949, "gorinevski": 949, "c_p": 949, "cherkasski": 949, "yunqian": 949, "1691": 949, "1714": 949, "ell_2": 949, "equiangular": 949, "weisberg": 949, "ell_0": [949, 953], "_coef": 949, "mp": 949, "ell_": 949, "posteriori": [949, 955], "radford": 949, "neal": [949, 1006], "50000013": 949, "49999993": 949, "lambda_i": [949, 963], "srikantan": 949, "tristan": 949, "fletcher": [949, 993, 997], "nomenclatur": [949, 999], "deliber": 949, "overparameter": 949, "ldot": [949, 953, 955, 957, 967], "w_l": 949, "min_w": 949, "iverson": 949, "hood": [949, 968], "broyden": 949, "goldfarb": 949, "shanno": 949, "shortcom": 949, "aaron": [949, 996, 997, 998, 1003], "simon": [949, 977, 996, 997, 1006, 1007, 1008, 1009], "93fletcher": 949, "93goldfarb": 949, "93shanno_algorithm": 949, "noah": 949, "multirespons": 949, "statsmodel": [949, 972], "edm": 949, "agricultur": 949, "rainfal": 949, "paid": 949, "fraud": [949, 977], "cash": 949, "fraudul": [949, 977], "interrupt": 949, "drug": 949, "cure": 949, "entertain": 949, "mccullagh": 949, "nelder": 949, "boca": 949, "raton": 949, "chapman": 949, "hall": [949, 1000, 1004], "crc": 949, "31760": 949, "j\u00f8rgensen": [949, 1010], "monografia": 949, "matem\u00e1tica": 949, "2463": 949, "4337": 949, "7638": 949, "disappear": [949, 993], "photogrammetr": 949, "hypothes": 949, "paradigm": 949, "cartographi": 949, "fischler": 949, "boll": 949, "sunglok": 949, "choi": 949, "taemin": 949, "wonpil": 949, "binom": 949, "infeas": [949, 956, 958], "k\u00e4rkk\u00e4inen": 949, "\u00e4yr\u00e4m\u00f6": 949, "h_": 949, "oarc": 949, "dae": 949, "bassett": 949, "jr": 949, "econometrica": 949, "econometr": 949, "portnoi": [949, 1010], "hare": 949, "tortois": 949, "paraboloid": 949, "w_3": 949, "w_4": 949, "w_5": 949, "z_1": 949, "z_2": 949, "z_3": 949, "z_4": 949, "z_5": 949, "streamlin": 949, "gotten": [949, 963], "necess": [950, 956], "strife": 950, "mother": 950, "baloo": 950, "song": 950, "jungl": 950, "rubric": 950, "defici": [950, 967], "hlle": 950, "revolv": 950, "belkin": 950, "niyogi": 950, "1373": 950, "1396": 950, "molecul": 950, "jk": 950, "delta_": 950, "c_1": 950, "disentangl": 950, "legitim": 950, "die": 950, "noisier": 950, "5415": 950, "brief": 951, "num_featur": [951, 1008], "quantum": 951, "nutshel": 951, "36787944": 951, "89483932": 951, "58364548": 951, "51341712": 951, "83822343": 951, "7768366": 951, "facil": 952, "equi": 952, "agnost": [952, 961], "cue": 952, "came": 952, "quicker": 952, "unpract": 952, "analogi": [952, 953], "top_k_accuraci": 953, "top_k_accuracy_scor": [953, 1005, 1007], "neg_brier_scor": [953, 1003], "f1_micro": [953, 997], "f1_weight": [953, 997], "f1_sampl": 953, "neg_log_loss": 953, "roc_auc_ovr": [953, 1003], "roc_auc_ovo": [953, 1003], "roc_auc_ovr_weight": [953, 1003], "roc_auc_ovo_weight": [953, 1003], "explained_variance_scor": [953, 996, 1000, 1007], "max_error": [953, 1002], "neg_mean_squared_log_error": 953, "mean_squared_log_error": [953, 1000, 1006, 1010], "neg_root_mean_squared_log_error": 953, "neg_median_absolute_error": 953, "neg_mean_poisson_devi": 953, "neg_mean_gamma_devi": 953, "mean_gamma_devi": [953, 1003], "d2_pinball_scor": [953, 1007], "d2_tweedie_scor": [953, 1006], "invalidparametererror": 953, "_error": 953, "my_custom_loss_func": 953, "693": 953, "protocol": [953, 996, 1009, 1010], "custom_scoring_funct": 953, "custom_scorer_modul": 953, "confusion_matrix_scor": 953, "test_tp": 953, "test_fn": 953, "untru": 953, "dividend": 953, "divisor": 953, "quotient": 953, "texttt": 953, "_class": 953, "youden": 953, "informed": 953, "mosley2013": 953, "kelleher2015": 953, "guyon2015": 953, "urbanowicz2015": 953, "escalant": 953, "escalera": 953, "maci\u00e0": [953, 1006, 1008], "saeed": 953, "statnikov": 953, "viega": 953, "chalearn": 953, "automl": [953, 972], "ijcnn": 953, "moslei": 953, "ijcv": 953, "urbanowicz": 953, "exstrac": 953, "evol": 953, "intel": [953, 972], "cohen_kappa_scor": [953, 998, 1000], "4285714285714286": 953, "manning2008": 953, "everingham2010": 953, "davis2006": 953, "flach2015": 953, "everingham": 953, "gool": 953, "winn": 953, "pascal": 953, "voc": 953, "goadrich": 953, "y_l": 953, "_l": 953, "emptyset": 953, "f_beta": 953, "ne": [953, 956], "1738": 953, "matthews_corrcoef": [953, 993, 999, 1000, 1007], "t_k": [953, 969], "ik": 953, "ki": 953, "kk": 953, "auroc": 953, "ht2001": 953, "fc2009": 953, "pd2000": 953, "f2006": 953, "f2001": 953, "inner_clf": 953, "c\u00e8sar": 953, "hernandez": 953, "orallo": 953, "modroiu": 953, "wikipediadet2017": 953, "martin1997": 953, "navratil2007": 953, "consult": 953, "encyclopedia": 953, "utc": 953, "php": [953, 972], "detection_error_tradeoff": 953, "oldid": 953, "798982054": 953, "doddington": 953, "kamm": 953, "ordowski": 953, "przybocki": 953, "navractil": 953, "klusacek": 953, "acoust": 953, "icassp": 953, "honolulu": 953, "229": 953, "brier1950": 953, "p_i": [953, 956], "bella2012": 953, "flach2008": 953, "bella": 953, "hern\u00e1ndez": 953, "ram\u00edrez": 953, "quintana": 953, "khosrow": 953, "pour": 953, "hershei": 953, "edson": [953, 998], "matsubara": 953, "dagstuhl": 953, "seminar": 953, "schloss": 953, "leibniz": 953, "zentrum": 953, "lr_": 953, "brenner": 953, "gefel": 953, "coverage_error": [953, 997, 1007], "label_ranking_average_precision_scor": [953, 997, 1001, 1002, 1008], "label_ranking_loss": [953, 998], "grade": 953, "unalt": 953, "epsilon_i": 953, "908": 953, "925": [953, 982], "7083": 953, "rsme": 953, "log_": 953, "growth": [953, 998, 999], "commod": 953, "mapd": 953, "2e6": 953, "2666": 953, "y_n": [953, 957, 967], "elicit": 953, "2500": 953, "mean_pinball_loss_95p": 953, "skill": 953, "mcfadden": 953, "d2_tweedie_score_15": 953, "d2_pinball_score_08": 953, "heteroschedast": 953, "homoschedast": 953, "pear": 954, "y_dens": 954, "y_spars": 954, "advoc": 954, "elabor": 954, "financ": 954, "f3": 954, "y3": 954, "multi_target_forest": 954, "75474165": 954, "147": 954, "03498585": 954, "03812219": 954, "12165031": 954, "12914884": 954, "46081961": 954, "8948621": 954, "44373091": 954, "88978285": 954, "62745778": 954, "02891072": 954, "48204257": 954, "03260883": 954, "34867495": 954, "52003279": 954, "92529176": 954, "25719016": 954, "84253": 954, "25193977": 954, "16443186": 954, "12274212": 954, "170388": 954, "80956739": 954, "16979946": 954, "72667194": 954, "50941682": 954, "50447799": 954, "37967282": 954, "15699552": 954, "72850319": 954, "prod_": 955, "downarrow": 955, "spite": 955, "famous": 955, "serious": 955, "flair": 955, "2_y": 955, "mu_i": 955, "sigma_i": [955, 963], "theta_i": 955, "cnb": 955, "mnb": 955, "inventor": 955, "alpha_i": [955, 968], "cj": [955, 996, 997, 998, 999, 1000], "summat": [955, 957], "min_c": 955, "t_i": 955, "poorest": 955, "n_i": [955, 963], "satellit": 956, "kdt": 956, "farawai": 956, "invent": 956, "orthotrop": 956, "bentlei": 956, "1975": 956, "omohundro": 956, "characteris": 956, "unaffect": 956, "amort": 956, "cache_path": 956, "gettempdir": 956, "unsort": [956, 994, 997, 1001], "5807": 956, "nca_pip": 956, "96190476": 956, "limits_": 956, "lx": 956, "x_m": 957, "leftmost": 957, "w_1x_1": 957, "w_2x_2": 957, "w_mx_m": 957, "backpropag": 957, "b_1": 957, "b_2": 957, "z_l": 957, "dfrac": [957, 963], "nabla": 957, "deduct": 957, "rumelhart": 957, "jiquan": 957, "ngiam": 957, "chuan": 957, "yifan": 957, "carolin": 957, "suen": 957, "backprop": [957, 967], "lecun": [957, 967], "orr": [957, 967], "strai": 958, "v_ih_j": 958, "b_iv_i": 958, "c_jh_j": 958, "h_j": 958, "v_i": 958, "b_i": 958, "sum_h": 958, "fantasi": 958, "particl": 958, "thoroughli": 958, "hereund": 959, "1443": 959, "1471": 959, "outlying": 959, "h2009": 960, "g2015": 960, "absurd": 960, "m2019": 960, "bike": 960, "mc_clf": 960, "466": 960, "624": 960, "overlaid": 960, "obscur": [960, 1009], "cice": [960, 1007], "pd_": 960, "dx_c": 960, "footnot": [960, 972], "opaqu": 961, "categr": 961, "356": 961, "probe": 961, "048": 961, "r_multi": 961, "081": 961, "1013": 961, "866": 961, "726": 961, "022": 961, "277": [961, 995], "i_j": 961, "min_max_scal": 963, "x_train_minmax": 963, "x_test_minmax": 963, "max_abs_scal": 963, "x_train_maxab": 963, "x_test_maxab": 963, "unintention": 963, "semidefinit": [963, 968], "scholkopf1998": 963, "1_": 963, "x_train_tran": 963, "x_test_tran": 963, "8pt": 963, "x_normal": 963, "firefox": 963, "chrome": 963, "safari": 963, "africa": 963, "dragon": 963, "lexicon": 963, "par": 963, "tau": 963, "iy_j": 963, "l_i": 963, "pargent": 963, "pfister": 963, "2671": 963, "2692": 963, "infant": 963, "kid": 963, "teen": 963, "senior": [963, 977], "citizen": 963, "retbin": 963, "x_1x_2": 963, "x_1x_3": 963, "x_2x_3": 963, "x_1x_2x_3": 963, "rung": 963, "eiler": 963, "marx": 963, "perperogl": 963, "sauerbrei": 963, "abrahamowicz": 963, "bmc": 963, "methodol": 963, "38629436": 963, "sixteenth": 965, "uai": 965, "craig": [965, 996, 1001], "boutili": 965, "mois\u00e9": 965, "goldszmidt": 965, "morgan": [965, 969], "kaufmann": [965, 969, 1005], "ella": 965, "bingham": 965, "heikki": 965, "mannila": 965, "245": [965, 995], "explic": 965, "3947": 965, "671": 965, "kenneth": [965, 993, 994, 999, 1000, 1007, 1008], "12th": 965, "x_new_invers": 965, "x_new_again": 965, "delalleau": 966, "aistat": 966, "gatsbi": 966, "ucl": 966, "uk": [966, 987], "fullpap": 966, "xi_i": 967, "slack": 967, "t_0": 967, "l\u00e9on": [967, 1007, 1008, 1009], "_init_t": 967, "basesgd": 967, "eta_0": 967, "_t": 967, "svmsgd": 967, "pegaso": 967, "srebro": 967, "tsuruoka": 967, "tsujii": 967, "ananiad": 967, "afnlp": 967, "lin_clf": 968, "grasp": [968, 973], "sv": 968, "builtin": 968, "qp": 968, "linear_svc": 968, "gram_train": 968, "gram_test": 968, "zeta": 968, "zeta_i": 968, "textrm": [968, 985], "q_": 968, "reparameter": 968, "wu": [968, 997, 1005], "weng": 968, "1005": 968, "rong": 968, "aug": 968, "1871": 968, "1874": 968, "ofmulticlass": 968, "fitter": 969, "pariti": 969, "multiplex": 969, "export_graphviz": [969, 998, 1000, 1006, 1008, 1009], "export_text": [969, 1002, 1009], "dumont": 969, "subwindow": 969, "dichotomis": 969, "quinlan": 969, "multiwai": 969, "proprietari": 969, "ruleset": 969, "q_m": 969, "n_m": 969, "t_m": 969, "setminu": 969, "mk": 969, "_m": 969, "ge0": 969, "widetild": 969, "tradition": 969, "t_t": 969, "eff": 969, "predictive_analyt": 969, "foot": 971, "gear": 971, "neuroimag": [971, 977], "astronom": 971, "pycon": 971, "thirti": 971, "nyc": [971, 977], "sister": 972, "sklearn_panda": 972, "sklearn_xarrai": 972, "xarrai": 972, "autoviml": 972, "tpot": 972, "featuretool": 972, "neuraxl": 972, "neat": [972, 993], "checkpoint": 972, "funki": 972, "saver": 972, "evalml": 972, "mlflow": 972, "lifecycl": [972, 973], "neptun": 972, "mlop": 972, "sacr": 972, "dtreeviz": 972, "eli5": 972, "yellowbrick": 972, "deap": 972, "evolutionari": 972, "interchang": [972, 1010], "skop": [972, 989], "jpmml": 972, "porter": 972, "transpil": 972, "javascript": 972, "m2cgen": 972, "dart": 972, "haskel": 972, "rust": 972, "treelit": 972, "micromlgen": 972, "microml": 972, "microcontrol": 972, "emlearn": 972, "c99": 972, "arima": 972, "skforecast": 972, "tslearn": 972, "hmmlearn": 972, "pomegran": 972, "crfsuit": 972, "skorch": 972, "scikera": 972, "scikit_learn": 972, "feder": 972, "privaci": 972, "homomorph": 972, "encrypt": 972, "mlxtend": 972, "lego": 972, "subsembl": 972, "lightn": 972, "sdca": 972, "adagrad": 972, "svrg": 972, "gplearn": 972, "genet": 972, "multilearn": 972, "seglearn": 972, "fastfm": 972, "kmode": 972, "sphereclust": 972, "mise": 972, "giotto": 972, "tda": 972, "pymc": 972, "censor": 972, "lightfm": 972, "openrec": 972, "gensim": 972, "nilearn": 972, "neuro": 972, "astroml": 972, "astronomi": 972, "dissemin": 972, "chines": 972, "persian": 972, "spanish": 972, "korean": 972, "disclaim": 972, "promis": 973, "eleven": 973, "incept": 973, "scala": 973, "reinforc": 973, "era": 973, "7242": 973, "12147": 973, "5523": 973, "10733": 973, "13902": [973, 1003], "12800": 973, "12866": 973, "15550": 973, "5853": 973, "11805": 973, "15319": 973, "11977": 973, "12852": [973, 1003], "13911": [973, 1003], "amput": 973, "6284": 973, "beginn": 973, "priorit": [973, 1000], "4497": 973, "7646": 973, "6425": 973, "6424": 973, "8480": 973, "6231": 973, "8100": 973, "6599": 973, "6715": 973, "14582": 973, "3855": 973, "13227": 973, "6323": 973, "14180": [973, 1004], "9173": 973, "13146": [973, 1003], "8614": 973, "7608": 973, "5082": 973, "8243": 973, "searchgrid": 973, "6929": 973, "__array_function__": [973, 1003], "etl": [973, 977], "8370": 973, "6451": 973, "8157": 973, "7382": 973, "drift": 973, "11047": [973, 1003], "9326": 973, "slep011": 973, "1626": 973, "10463": 973, "836": 974, "release_highlight": 974, "developing_estim": 974, "id3": [975, 989], "cart": [975, 989], "printabl": 976, "indispens": 977, "stephen": [977, 997, 998, 1000, 1001, 1002, 1003, 1004, 1006], "simmon": 977, "vp": 977, "athena": 977, "music": 977, "bernhardsson": 977, "pariet": [977, 993], "lear": 977, "visag": 977, "fantast": 977, "startup": 977, "bitli": 977, "chartbeat": 977, "digg": [977, 1000], "poncho": 977, "gilad": 977, "lotan": 977, "chief": 977, "chat": 977, "bread": 977, "butter": 977, "chaumond": [977, 1001], "offic": 977, "ayzenshtat": [977, 1001], "undergrad": 977, "professor": 977, "hotel": 977, "destin": 977, "agent": 977, "melani": [977, 1000, 1001], "awesom": 977, "stuff": 977, "randomizedpca": [977, 993, 995, 996, 998, 999, 1000], "boston": 977, "mdbecker": 977, "pydata_2013": 977, "thorough": 977, "notch": 977, "production": 977, "greg": [977, 999, 1000, 1002, 1003], "lamp": 977, "founder": 977, "prototyp": 977, "jurgen": 977, "director": 977, "commerc": 977, "inventori": 977, "bertin": 977, "mahieux": 977, "invalu": 977, "vijai": [977, 996], "surrog": 977, "traine": 977, "impress": 977, "traffic": 977, "tenur": 977, "matchmak": 977, "weitzenfeld": 977, "tweet": 977, "ferenc": 977, "huszar": 977, "shop": 977, "ourselv": 977, "jeremi": [977, 998, 999, 1000, 1001, 1004, 1005], "achin": 977, "ceo": 977, "marketplac": 977, "frid": [977, 996], "radar": 977, "partnership": 977, "lebourgeoi": 977, "charron": [977, 996, 997, 1004, 1005, 1006], "cornerston": 977, "sheep": 977, "featureforg": 977, "rafael": [977, 994, 995, 997, 1000], "carrascosa": [977, 997], "law": 977, "semiconductor": 977, "fab": [977, 1003, 1004], "bleed": 977, "smartphon": 977, "automobil": 977, "trent": [977, 999], "mcconaghi": 977, "rapid": 977, "immens": 977, "thorsten": 977, "kranz": 977, "coma": 977, "dss": 977, "douetteau": 977, "b2c": 977, "retail": 977, "palladium": 977, "rammig": [977, 999], "peer": 977, "lend": 977, "billion": 977, "gbp": 977, "grate": 977, "vlasio": [977, 1000], "vasilei": [977, 1000], "petfood": 977, "cocoa": 977, "worldwid": 977, "toolset": 977, "equip": 977, "fitzk": 977, "sr": 977, "fondat": 977, "s\u00e9bastien": [977, 999, 1001], "conort": 977, "salmon": 978, "nine": 978, "sentiment": 979, "cli": 979, "doctest_mod": 979, "hardest": 980, "tightli": 981, "knit": 981, "x_fold": 982, "array_split": 982, "y_fold": 982, "934": 982, "train_indic": 982, "test_indic": 982, "963": 982, "922": 982, "930": 982, "96388889": 982, "92222222": 982, "9637883": 982, "93036212": 982, "96578289": 982, "92708922": 982, "96681476": 982, "96362897": 982, "93192644": 982, "0077": 982, "943": 982, "00375": 982, "lfw_": 983, "_lfw": 983, "gerhard_schroed": 983, "donald_rumsfeld": 983, "tony_blair": 983, "colin_powel": 983, "george_w_bush": 983, "estimated_param_": 984, "iris_x": 985, "iris_i": 985, "iris_x_train": 985, "iris_y_train": 985, "iris_x_test": 985, "iris_y_test": 985, "pave": 985, "paltri": 985, "exabyt": 985, "30349955": 985, "237": 985, "63931533": 985, "510": 985, "53060544": 985, "73698041": 985, "13170937": 985, "81458798": 985, "84845219": 985, "60648906": 985, "51961675": 985, "09517222": 985, "585": 985, "5854": 985, "5855": 985, "occam": 985, "razor": 985, "best_alpha": [985, 993], "025118864315095794": 985, "508": 985, "knew": 986, "taxonomist": 986, "face_compress": 986, "x_approx": 986, "images_approx": 986, "zlabel": 986, "18565811e": 986, "19346747e": 986, "43026679e": 986, "text_analyt": 987, "skeleton": [987, 996], "sklearn_tut_workspac": 987, "cp": 987, "work_directori": 987, "tutorial_hom": 987, "fetch_data": 987, "lang": 987, "newsweed": 987, "netnew": 987, "bydat": 987, "twenty_train": 987, "holder": 987, "2257": 987, "sd345": 987, "collier": 987, "laserjet": 987, "iii": [987, 1007], "hampton": 987, "4gb": 987, "count_vect": 987, "x_train_count": 987, "35788": 987, "4690": 987, "downscal": 987, "tf_transform": 987, "x_train_tf": 987, "tfidf_transform": 987, "x_train_tfidf": 987, "na\u00efv": 987, "docs_new": 987, "love": 987, "opengl": 987, "x_new_count": 987, "x_new_tfidf": 987, "text_clf": 987, "twenty_test": 987, "docs_test": 987, "8348": 987, "9101": [987, 1001], "1502": 987, "380": 987, "tfidf__use_idf": 987, "searcher": 987, "eight": 987, "gs_clf": 987, "workspac": 987, "fear": 987, "fire": 987, "exercise_xx_script": 987, "arg1": 987, "arg2": 987, "arg3": 987, "mortem": 987, "exercise_01_language_train_model": 987, "exercise_02_senti": 987, "movie_review": 987, "txt_sentoken": 987, "cpickl": 987, "subtleti": 989, "subscrib": 991, "post1": 991, "64bit": 993, "gzip": 993, "bzip2": 993, "decompress": 993, "auc_scor": [993, 995], "kernc": [993, 1007, 1008], "led": 993, "probabilisticpca": [993, 996], "hmm": [993, 994, 995, 996, 998], "gaussianhmm": 993, "multinomialhmm": 993, "n_gram_rang": 993, "267": 993, "alexi": [993, 996, 997, 1000, 1010], "mignon": [993, 996, 997, 1000], "subhodeep": [993, 994, 995], "moitra": [993, 994, 995], "yannick": [993, 995], "schwartz": [993, 995, 1007], "duckworth": 993, "benediktsson": [993, 994, 995], "marko": [993, 1002, 1003, 1009], "burjek": 993, "pinto": 993, "abraham": [993, 994, 999, 1003], "hoenig": 993, "flyingimmidev": 993, "francoi": [993, 1006], "savard": 993, "hann": 993, "schulz": 993, "welind": 993, "companioni": 993, "brandyn": 993, "bussonni": [993, 1005], "matthia": [993, 995, 996, 999, 1000, 1001, 1005, 1008], "pierr": [993, 1001, 1002, 1004, 1006, 1008, 1010, 1011], "astolfi": 993, "huiginn": 993, "goodman": [993, 998], "ludwig": 993, "schwardt": 993, "hervieu": 993, "sergio": [993, 995, 996, 1005, 1008], "medina": [993, 995], "sheerman": 993, "buguen": 993, "seq_dataset": [993, 1003], "weight_vector": [993, 1003], "reuben": 993, "costin": 993, "_basehmm": 993, "neighborsregressor": 993, "gone": [993, 994], "vbgmm": [993, 997, 999], "_pvalu": 993, "charset": [993, 995], "test_fract": 993, "train_fract": 993, "239": 993, "marek": [993, 1010], "fcostin": 993, "adrien": 993, "gaidon": 993, "joona": 993, "sillanp\u00e4\u00e4": 993, "mccarthi": [993, 1001], "roi": [993, 1007], "hyunjin": 993, "ibay": 993, "scheidegg": 993, "clair": 993, "revillet": 993, "conrad": [993, 994, 1008], "meng": [993, 994, 997, 999, 1000], "xinfan": [993, 994, 997], "udi": 993, "weinsberg": 993, "janso": 993, "palafox": 993, "overwrite_": 993, "copy_": 993, "buffer_mb": 993, "sparse_encode_parallel": 993, "accident": [993, 997, 1002], "basedictionarylearn": 993, "sparsecodingmixin": 993, "fast_svd": 993, "arnold": [993, 994], "bala": [993, 996], "subrahmanyam": [993, 996], "varanasi": [993, 996], "draxu": 993, "eickenberg": [993, 995, 996, 997, 998], "bogdan": 993, "trach": 993, "f\u00e9lix": [993, 995, 996, 997, 1001], "antoin": [993, 995, 996, 997, 1000], "fortin": [993, 995, 996, 997], "manuel": [993, 997, 1001, 1002, 1005, 1006], "caicedo": 993, "carvaj": 993, "tiziano": 993, "zito": [993, 1006], "jean": [993, 996, 997, 998, 999, 1000, 1006], "kossaifi": [993, 997, 998], "thumbnail": 993, "mldata": [993, 1001], "pietro": [993, 996, 1010], "berk": 993, "macosx": 993, "xarg": 993, "bscikit": 993, "cross_val": 993, "bcross_val": 993, "lurk": 993, "l1_distanc": 993, "sum_over_featur": [993, 1008], "168": 993, "andi": [993, 1000], "amit": [993, 1007, 1008], "salvator": [993, 1007, 1008, 1010], "masecchia": 993, "schut": 993, "metaireau": [993, 996], "bryan": [993, 996, 1002, 1003, 1006], "silverthorn": 993, "minwoo": 993, "luca": [993, 1003, 1004, 1005, 1006], "wiman": 993, "schl\u00fcter": [993, 1001], "malet": 993, "miott": [993, 996], "feth": 993, "arezki": 993, "yamin": 993, "notes_neighbor": 993, "netbsd": 993, "kamel": 993, "ibn": 993, "hassen": 993, "derouich": 993, "virgilefritsch": 993, "example_gaussian_process_plot_gp_regress": 993, "example_gaussian_process_plot_gp_probabilistic_classification_after_regress": 993, "tast": 993, "2x": 993, "10x": 993, "200x": 993, "ann": [993, 1005, 1007], "laur": 993, "fouqu": 993, "ronan": [993, 996, 1001], "amicel": [993, 996], "osendorf": [993, 994], "gmmhmm": [993, 994], "latex": 993, "mlcomp": 993, "sphx_glr_auto_examples_mlcomp_sparse_document_classif": 993, "pybrain": 993, "262": 993, "rokem": [993, 999], "100x": [993, 996, 1010], "obsolet": [993, 1009], "attrselect": 993, "unmaintain": 993, "lite": 993, "filo": [993, 996], "mailhot": 993, "huard": 993, "dave": [993, 1000, 1001, 1007, 1009], "morril": 993, "schofield": 993, "travi": [993, 1001], "oliph": 993, "pearu": 993, "peterson": [993, 995], "0d": 994, "marchman": [994, 995], "hrishikesh": [994, 995], "huilgolkar": [994, 995], "bastiaan": [994, 995], "diego": [994, 995], "molla": [994, 995], "cunha": [994, 995], "almeida": [994, 995, 1006], "rolando": [994, 995], "espinoza": [994, 995], "fuent": [994, 995], "beauchamp": [994, 997], "longstand": [994, 1000], "shaun": 994, "jackman": 994, "winterman": 994, "seberg": 994, "n_atom": 994, "label_propag": 994, "learn_rat": 994, "basegradientboost": 994, "mean_square_error": 994, "gmm_": 994, "eig_tol": 994, "chunk_siz": 994, "zero_one_scor": 994, "117": 994, "aymer": 994, "masurel": 994, "syhw": [994, 995], "corei": [994, 1001, 1002], "lynch": [994, 1000], "shu": [994, 997, 1001], "tadej": [994, 995], "jane\u017e": [994, 995], "caje": 994, "tiago": [994, 998], "nune": 994, "cow": 994, "anz": 994, "jauvin": 994, "jacqu": [994, 996], "kvam": [994, 996], "doug": [994, 995, 1005], "coleman": [994, 995], "dickerson": 994, "approximateident": 994, "veronda": 994, "matti": [994, 997, 998], "lyra": [994, 997, 998], "mikhail": [994, 995, 996, 999, 1000, 1008, 1009], "korobov": [994, 995, 996, 999, 1000], "alejandro": [994, 999, 1010], "weinstein": 994, "deil": [994, 1004, 1005], "nizhibitski": 994, "coelho": [994, 996, 997, 1001], "miroslav": [994, 995, 998], "batchkarov": [994, 998], "pavel": [994, 1002], "bob": [994, 1000], "dengemann": 994, "emanuel": 994, "x006": 994, "justin": [995, 1001, 1005], "stochastic_gradi": [995, 996, 1002], "crombach": 995, "sheet": 995, "jaccard_similarity_scor": [995, 997, 1002], "jochen": 995, "wersd\u00f6rfer": 995, "sinayev": 995, "unpleas": 995, "novic": 995, "tini": [995, 1008, 1011], "hyperlink": 995, "luessi": 995, "philipp": [995, 996, 999, 1008], "gervai": [995, 996], "cleverless": 995, "nosetest": 995, "compute_import": 995, "return_model": [995, 997], "itergrid": 995, "tacitli": 995, "charset_error": 995, "precompute_gram": 995, "2224": 995, "jim": 995, "holmstr\u00f6m": 995, "steven": [995, 996, 998, 1000, 1001, 1006, 1008, 1009], "gryze": [995, 998], "sergeyf": 995, "ben": [995, 996, 997, 1000, 1001, 1002, 1005, 1010], "speer": 995, "federico": [995, 996, 1001, 1002, 1007], "vaggi": [995, 996], "raul": [995, 996], "garreta": [995, 996], "gei": 995, "flaxman": [995, 997], "denton": 995, "cockburn": 995, "dougal": [995, 997, 998, 1000, 1001, 1002, 1003], "sutherland": [995, 997, 998, 1000, 1001, 1002, 1003], "ian": [995, 997, 1002, 1003, 1005, 1008, 1009], "ozsvald": 995, "johann": [995, 996, 1001, 1003, 1004, 1007], "sch\u00f6nberger": [995, 996], "szabo": [995, 996], "roland": [995, 996], "imran": [995, 996, 997], "haqu": [995, 996, 997], "karayev": 995, "jamestwebb": [995, 996], "abhijeet": 995, "kolh": 995, "velkov": 995, "fazlul": 995, "shahriar": 995, "felix": [995, 1000, 1001, 1003, 1005, 1006, 1007], "brockherd": 995, "harikrishnan": 995, "jack": [995, 998, 1006, 1007, 1008, 1009], "hale": [995, 1007], "jakemick": 995, "mcdermott": [995, 1010], "zwinck": 995, "vredevoogd": [995, 996], "pati": 995, "ekman": [995, 999], "shubernetskii": 995, "naoki": [995, 1005], "orii": 995, "seamu": 995, "absher": 995, "feldman": [995, 1000, 1001, 1002, 1003], "stefano": 995, "lattarini": 995, "steve": [995, 997, 1001, 1006, 1008], "koch": [995, 1001, 1002, 1004, 1005], "sturla": 995, "molden": 995, "jarosch": 995, "nikolai": [996, 997, 998, 999, 1001, 1002, 1007, 1009], "mayorov": [996, 997, 998, 999], "msvc": 996, "mingw": 996, "resourcewarn": 996, "calvin": [996, 997], "gile": [996, 997], "billing": [996, 997, 998], "safe_realloc": 996, "bradshaw": [996, 997, 1000], "pico": [996, 997], "restor": [996, 1001, 1002, 1003, 1004, 1008], "raff": 996, "__array__": [996, 1003], "jeffrei": [996, 999], "blackburn": [996, 999], "danni": [996, 997, 998], "sullivan": [996, 997, 998], "wignal": [996, 997, 1003, 1004], "grid_tograph": 996, "gracefulli": [996, 997], "novak": 996, "tulloch": [996, 997], "wardagglomer": 996, "wardclust": 996, "mean_l1_ratio": 996, "phlypo": 996, "312": 996, "bommarito": [996, 997], "brook": [996, 997, 1005], "osborn": [996, 997], "eltermann": 996, "bwignal": 996, "ankit": [996, 1003, 1005, 1007], "agraw": [996, 1001, 1007, 1008], "carei": [996, 997, 998, 999, 1000], "ugurthemast": [996, 997], "schumach": [996, 997, 998], "baptist": [996, 1004], "lagard": 996, "rajat": [996, 1003], "khanduja": 996, "pascual": 996, "ignacio": 996, "rossi": 996, "s\u00e4ger": [996, 999], "ilambharathi": [996, 997], "kanniah": [996, 997], "sdenton4": 996, "alyssa": [996, 1000], "amo": 996, "waterland": 996, "murad": 996, "maud": 996, "karol": 996, "pysniak": 996, "cgohlk": [996, 997], "jacobsen": 996, "collin": 996, "kaushik94": 996, "erwin": 996, "marsi": 996, "csytraci": 996, "lk": 996, "laurent": [996, 997, 1000, 1001, 1008, 1009], "direr": [996, 997, 1000, 1001], "shilt": 996, "yoshiki": [996, 999], "v\u00e1zquez": 996, "yung": [996, 999], "siang": 996, "liau": 996, "abhishek": [996, 997, 1003, 1007, 1009, 1010], "thakur": [996, 997], "rohit": [996, 997, 1001, 1002], "sivaprasad": [996, 997], "amormachin": 996, "oscar": [996, 1000], "carlsson": 996, "nanta": 996, "nardelli": 996, "jess010": 996, "kowalski87": 996, "clegg": 996, "ralf": [996, 999, 1000, 1008, 1009], "gommer": [996, 999, 1000, 1008, 1009], "rupesh": 996, "srivastava": [996, 1008], "ryan": [996, 999, 1001, 1002], "skipper": [996, 998, 999], "seabold": [996, 998, 999], "stefan": [996, 997, 1001, 1003], "walt": [996, 997, 1001], "riddel": [996, 998, 1000], "valentin": [996, 998, 1008, 1009], "haenel": 996, "myer": [996, 1000], "yoni": 996, "meshulam": 996, "yuri": [996, 998], "zaytsev": 996, "adrinjalali": [996, 1005], "ai8rahim": 996, "alemagnani": 996, "chalmerlow": 996, "dziki": 996, "dro\u017cd\u017c": 996, "matrixorz": 996, "popo": 996, "samuela": 996, "boulogn": 996, "ethan": [996, 999], "guilherm": 996, "trein": 996, "heuer": 996, "ivicajov": 996, "rouli": 996, "eduardo": [996, 998, 1006, 1007], "ari\u00f1o": 996, "rubia": 996, "jell": 996, "zijlstra": 996, "eddi": [996, 1010], "jansson": [996, 1008], "ca\u00f1ardo": 996, "alastuei": 996, "joseph": [996, 997, 998, 999, 1005, 1007, 1008], "perla": 996, "ricardo": [996, 1006, 1007, 1010], "kenta": 996, "sato": 996, "medri": 996, "luce": 996, "pierron": 996, "danielweitzenfeld": 996, "thompson": [996, 1008, 1009], "brett": [996, 998, 999, 1000, 1001, 1008], "feurer": [996, 1001], "earl": 996, "hank": 996, "orr\u00f9": 996, "lunt": 996, "kearn": 996, "pawe\u0142": [996, 1000, 1005, 1006], "mandera": 996, "zambelli": 996, "staubda": 996, "dedupl": 997, "heilman": [997, 998], "precompute_dist": [997, 1004], "lshforest": [997, 1000], "qiang": 997, "luo": 997, "clemen": 997, "brunner": 997, "matteo": [997, 999, 1007], "visconti": 997, "oleggio": 997, "castello": 997, "linkage_tre": 997, "jatin": [997, 999], "shah": [997, 998, 999, 1005], "saurabh": [997, 998, 999, 1000, 1001, 1005], "jha": [997, 1003, 1007], "blanchard": [997, 998], "michal": [997, 1000, 1006, 1007], "romaniuk": 997, "gilmor": 997, "stapl": 997, "hedyati": 997, "antoni": [997, 999, 1005, 1008], "parel": 997, "herv\u00e9": 997, "bredin": 997, "hasil": 997, "sharma": [997, 999, 1001, 1002, 1004, 1005, 1007, 1010], "ducktyp": [997, 1010], "download_20newsgroup": 997, "cathi": [997, 1003], "deng": [997, 998, 999], "dawson": 997, "garret": 997, "hanna": [997, 998, 1004], "wallach": [997, 998], "yan": [997, 1005], "artem": [997, 1000, 1010], "sobolev": 997, "fit_ovr": 997, "predict_ovr": 997, "predict_proba_ovr": 997, "fit_ovo": 997, "predict_ovo": 997, "fit_ecoc": 997, "predict_ecoc": 997, "lamond": 997, "outweigh": 997, "thresh": 997, "akshai": [997, 1000, 1005], "akshayah3": 997, "aldrian": 997, "obaja": 997, "ander": [997, 1003], "aagaard": 997, "cranenburgh": 997, "walker": 997, "banilo": [997, 998], "barmalei": [997, 998], "benedikt": 997, "koehler": 997, "bhsu": 997, "bori": [997, 1005, 1009], "feld": [997, 1009], "borja": 997, "ayerdi": 997, "boyuan": [997, 998, 999], "brent": [997, 1001, 1002], "pedersen": [997, 1009], "celeo": 997, "chebee7i": 997, "stade": 997, "schuldt": 997, "christof": [997, 998], "angermuel": [997, 998], "daiki": 997, "aminaka": 997, "danfrankj": 997, "dmitrij": 997, "milajev": 997, "floydsoft": 997, "garrett": 997, "gpassino": 997, "gwulf": [997, 998], "hampu": 997, "bengtsson": 997, "harri": [997, 999, 1005, 1006], "mavroforaki": [997, 999], "helder": [997, 1006, 1007], "herv": 997, "hugu": 997, "salamin": 997, "ism": 997, "dlabal": 997, "javier": 997, "l\u00f3pez": [997, 1001, 1002, 1005], "pe\u00f1a": 997, "jdcaballero": 997, "jeff": [997, 999, 1006, 1007], "hammerbach": 997, "helmu": 997, "kaicheng": 997, "markham": [997, 1004, 1005], "lagacheri": 997, "leepei": 997, "loic": [997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1010], "estev": [997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1010], "luka": [997, 1004, 1010], "michelbach": 997, "krell": [997, 999], "ku": [997, 998], "mateusz": [997, 1004, 1005, 1010], "susik": 997, "mehdi": [997, 1006], "cherti": 997, "mlg": 997, "montecchio": 997, "okal": 997, "billi": 997, "\u00f3scar": [997, 998, 999, 1000], "n\u00e1jera": [997, 998, 999, 1000], "puggioni": 997, "pratap": [997, 1000, 1007], "vardhan": 997, "pvnguyen": 997, "queqichao": 997, "rahiel": 997, "kasim": 997, "mason": 997, "saket": [997, 998, 1005], "choudhari": [997, 998, 1007, 1009], "sam": [997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008], "nichol": 997, "sethdandridg": 997, "sinhrk": [997, 998], "snuderl": 997, "ott": 997, "tjoa": 997, "swu": 997, "zimmer": [997, 1007], "tejesh95": 997, "terrycojon": 997, "delteil": 997, "toma": 997, "kazmar": 997, "trevorstephen": [997, 999], "tttthomasssss": 997, "tzu": 997, "kuo": 997, "ugurcaliskan": 997, "vinayak": [997, 998, 999, 1001, 1002, 1008, 1009], "mehta": [997, 998, 999, 1001, 1002, 1003, 1004, 1008, 1009], "vjacheslav": 997, "murashkin": 997, "wadawson": 997, "x0l": 997, "6147": 998, "presort": [998, 1003], "5857": 998, "mcculloh": [998, 999], "6258": 998, "giorgio": [998, 999, 1000], "patrini": [998, 999, 1000], "joe": 998, "jevnik": 998, "labelkfold": [998, 999], "labelshufflesplit": [998, 999], "mcfee": [998, 999], "3659": 998, "4738": 998, "projectedgradientnmf": 998, "nls_max_it": 998, "erick": 998, "moodi": 998, "4025": 998, "mean_shift": [998, 1001], "martino": 998, "sorbaro": 998, "cori": 998, "konstantin": [998, 999, 1000], "shmelkov": 998, "backlink": 998, "jaidev": 998, "deshpand": [998, 999], "dictlearn": 998, "kashif": 998, "rasul": [998, 1000, 1001], "galvez": 998, "sonni": 998, "hu": [998, 1001, 1003], "santi": [998, 1000, 1001], "villalba": [998, 1001, 1005], "5186": 998, "stolbunov": 998, "booster": 998, "graham": [998, 999], "clenaghan": [998, 999], "clyde": 998, "subproblem": 998, "forestclassifi": 998, "ankur": [998, 1009], "ankan": 998, "henri": [998, 999, 1000, 1001, 1003, 1004, 1005, 1007, 1008], "5431": 998, "buddha": 998, "prakash": [998, 1000, 1006], "5182": 998, "lamb": [998, 1006], "5282": 998, "5355": 998, "5360": 998, "4478": 998, "5337": 998, "4362": 998, "5495": 998, "elvi": [998, 999, 1000], "dohmatob": [998, 999, 1000], "data_min": 998, "data_max": 998, "data_rang": 998, "vighnesh": [998, 999, 1001], "birodkar": [998, 999, 1001], "_learntselectormixin": 998, "gradientboost": 998, "metatransfom": 998, "load_lfw_pair": 998, "wardagglom": 998, "residues_": 998, "indicator_matrix_": 998, "adithya": 998, "ganesh": [998, 1010], "akitti": 998, "alexei": 998, "grigorev": 998, "ali": [998, 1001, 1002, 1005, 1006, 1008, 1009, 1010], "baharev": 998, "ando": 998, "saaba": 998, "anish": [998, 999], "anthoni": [998, 1000, 1001], "erling": 998, "rouvinen": 998, "rachez": [998, 999], "benjaminirv": 998, "naul": [998, 999], "gohlk": 998, "bourguignat": 998, "cindi": [998, 1006, 1010], "sridharan": 998, "kronovet": 998, "data1010": 998, "dotson": 998, "djipei": [998, 999], "dmitri": [998, 1000, 1001, 1002, 1006, 1009, 1010], "spikhalskii": 998, "donn": 998, "duart": [998, 1006, 1008], "caro": 998, "larson": [998, 1002, 1003, 1005, 1007], "fernando": [998, 1005], "carrillo": 998, "eckert": 998, "zalkow": 998, "ganiev": [998, 999, 1000], "ibraim": [998, 999, 1000], "giorgiop": 998, "gryllo": [998, 1001], "prokopi": [998, 1001], "hsuan": 998, "tien": 998, "ishank": [998, 999, 1000], "gulati": [998, 999, 1000], "jeffrey04": [998, 999], "jfraj": 998, "jiali": 998, "mei": [998, 1003], "kirkham": [998, 999, 1001], "wittenau": 998, "loyal": 998, "jungkook": 998, "park": [998, 1003, 1005, 1008, 1009], "kamalakerdadi": [998, 999], "kyler": 998, "lilian": [998, 999, 1010], "besson": [998, 999], "tiao": [998, 999], "marktab": 998, "spacek": 998, "martinbpr": [998, 999], "martinosorb": 998, "maryanmorel": [998, 999], "masafumi": 998, "oyamada": 998, "krump": 998, "kolganov": 998, "mbilling": 998, "mhg": 998, "patterson": 998, "omer": 998, "katz": [998, 1005, 1006], "pauli": 998, "virtanen": 998, "fischer": [998, 999], "pianomania": 998, "preston": [998, 999, 1000], "parri": [998, 999, 1000], "rohan": [998, 999, 1001, 1002, 1006], "ramanath": 998, "bansod": [998, 999, 1000], "scls19fr": 998, "saeger": [998, 999, 1000], "shivan": 998, "sornarajah": 998, "simonpl": 998, "sseg": 998, "hoover": [998, 999, 1000, 1002], "seguin": 998, "theodor": 998, "vasiloudi": 998, "freita": [998, 1000, 1001], "pereira": [998, 1001, 1002], "timothi": [998, 1006], "hopper": 998, "tokoroten": 998, "vstolbunov": 998, "wangz10": 998, "yucheng": 998, "zhauniarovich": 998, "zac": 998, "stewart": [998, 1003, 1006, 1008], "zhai_pro": 998, "zichen": 998, "7946": 999, "8355": 999, "9010": 999, "8040": 999, "9149": 999, "aman": [999, 1000, 1001, 1007, 1008], "dalmia": [999, 1000, 1001], "nate": [999, 1000, 1006], "guerin": [999, 1000], "lebedev": [999, 1000], "utilis": 999, "6497": 999, "7724": 999, "bing": [999, 1000], "explained_variance_ratio": 999, "7632": 999, "jpfrancoia": [999, 1000], "7676": 999, "moham": [999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1010], "affan": 999, "7756": 999, "7786": 999, "srivatsan": [999, 1000, 1003], "7799": 999, "7490": [999, 1000], "6282": 999, "7301": 999, "6178": 999, "7680": 999, "n_iters_": 999, "7553": 999, "ekaterina": [999, 1000, 1001, 1002, 1004, 1009], "krivich": [999, 1000, 1002], "5874": 999, "7593": 999, "7594": 999, "7660": 999, "7750": 999, "7732": 999, "artsion": 999, "lieu": [999, 1000], "grid_scores_": [999, 1005, 1006], "leaveonelabelout": 999, "leaveplabelout": 999, "plural": 999, "mean_tim": 999, "std_time": 999, "3204": 999, "5291": 999, "sounder": 999, "7295": 999, "5299": 999, "bravi": 999, "fouchet": 999, "calinski_harabaz_scor": [999, 1001], "harabaz": 999, "6586": 999, "4294": 999, "6667": 999, "6954": 999, "unveil": 999, "yelit": 999, "basebag": [999, 1001], "staub": 999, "5805": 999, "5251": 999, "imacul": 999, "1000x": 999, "arfa": 999, "6691": 999, "6913": 999, "5762": 999, "utkarsh": [999, 1000, 1001, 1002], "upadhyai": [999, 1000, 1001, 1002], "6846": 999, "5929": 999, "podshumok": [999, 1000], "6173": 999, "ryad": 999, "zenin": 999, "devashish": 999, "asish": [999, 1000], "dowl": 999, "6697": 999, "ori": 999, "ziv": 999, "sear": 999, "merritt": 999, "7325": 999, "7239": 999, "hong": [999, 1001, 1005, 1006, 1007, 1009], "guangguo": 999, "jensen": [999, 1005], "7419": 999, "gregori": [999, 1003, 1004, 1005, 1006], "stupp": [999, 1000], "bernardo": 999, "stein": 999, "sparse_func": [999, 1005], "incr_mean_variance_axi": [999, 1005], "7049": 999, "7152": 999, "load_boston": [999, 1001, 1006], "7154": 999, "manvendra": [999, 1000], "singh": [999, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010], "5540": 999, "7248": 999, "6764": 999, "wenhua": 999, "6817": 999, "6902": 999, "leonieborn": 999, "5141": 999, "4995": 999, "5012": 999, "_transform_select": 999, "7194": 999, "caio": [999, 1001, 1003], "oliveira": [999, 1001, 1003, 1007], "6182": 999, "6121": 999, "6472": 999, "7350": 999, "russel": [999, 1000], "smith": [999, 1000, 1001, 1002, 1003, 1005], "7159": 999, "yichuan": [999, 1000], "5460": 999, "document_clust": 999, "_search": 999, "_check_param_grid": 999, "xrang": 999, "7323": 999, "viacheslav": 999, "kovalevskyi": 999, "7101": 999, "residual_metr": 999, "6651": 999, "reorgan": 999, "7187": 999, "7260": 999, "sebasti\u00e1n": 999, "vanrel": 999, "leaveplabelsout": 999, "6660": 999, "unprefix": 999, "7261": 999, "aditya": [999, 1001, 1002, 1003, 1007, 1008], "joshi": [999, 1001, 1007, 1010], "loginov": 999, "minyushkin": 999, "rudi": 999, "abadi": [999, 1000], "saint": 999, "alexfield": 999, "alvaro": [999, 1001], "ulloa": 999, "alyssaq": 999, "amlan": 999, "kar": 999, "giessel": 999, "jackson": [999, 1000, 1002], "murrai": [999, 1000], "arafat": 999, "archit": 999, "asnt": 999, "b0noi": 999, "behzad": 999, "tabibian": 999, "kratzwald": 999, "bhargav": 999, "mangipudi": 999, "blakeflei": 999, "brandon": [999, 1000, 1007, 1008], "carter": [999, 1000, 1008], "camilo": 999, "lamu": 999, "carol": [999, 1000], "Willing": [999, 1000], "cass": 999, "ceshin": 999, "truong": 999, "codevig": 999, "shiebler": 999, "hnyk": [999, 1000], "elli": [999, 1002], "nicholson": [999, 1000, 1001], "thaler": 999, "warshaw": 999, "lasagna": 999, "deborah": [999, 1000, 1010], "definitelyuncertain": 999, "didi": [999, 1000, 1001, 1002], "zev": [999, 1000, 1001, 1002], "dsquareindia": 999, "edwinensa": 999, "elia": 999, "kuth": 999, "fabio": 999, "ticconi": 999, "fisach": 999, "donovan": 999, "ghg": 999, "giovanni": [999, 1001], "cherubin": 999, "lanzani": 999, "glenn": 999, "qian": [999, 1004], "mohr": 999, "govin": 999, "vatsan": 999, "reda": 999, "gustav": 999, "m\u00f6rtberg": 999, "halwai": 999, "harizo": [999, 1000], "rajaona": [999, 1000], "hashcode55": 999, "hdmetor": 999, "hobson": 999, "lane": 999, "bown": 999, "igor": [999, 1000, 1006], "andriushchenko": [999, 1000], "inki": 999, "hwang": 999, "isaac": [999, 1000, 1002, 1003, 1010], "sijaranamu": 999, "iver": 999, "jordal": 999, "jackmartin": 999, "fiedler": 999, "routlei": 999, "zike": 999, "janna": 999, "brettingen": 999, "jarfa": 999, "laska": 999, "jblackburn": 999, "levesqu": 999, "hintz": 999, "jeremynixon": 999, "jeroen": 999, "jessica": 999, "jill": 999, "j\u00eann": 999, "vie": 999, "jia": 999, "jiyuan": 999, "johannah": 999, "boersma": 999, "moeller": 999, "striebel": [999, 1000], "joncral": 999, "jordi": 999, "munoz": [999, 1005], "jrfiedler": 999, "juliankahnert": 999, "juliathebrav": 999, "kaichogami": 999, "lyon": [999, 1000], "kingjr": 999, "kjell": 999, "krishna": [999, 1000, 1001, 1002, 1003, 1004, 1007, 1008], "kalyan": 999, "krishnakalyan3": 999, "kvle": 999, "putnam": 999, "ldavid": 999, "leig": 999, "leightonzhang": 999, "leland": [999, 1000, 1001, 1003, 1004, 1009], "liang": [999, 1004, 1005, 1010], "hsieh": 999, "lizsz": 999, "l\u00e9oni": 999, "born": 999, "maniteja": [999, 1000, 1001], "nandana": [999, 1000, 1001], "marco": [999, 1001, 1002, 1006, 1007, 1008, 1011], "bao": [999, 1007], "szepieniec": 999, "madsen": [999, 1001], "massil": 999, "matheu": 999, "duboi": [999, 1001], "moroz": 999, "scherer": 999, "michiaki": 999, "ariga": 999, "moussa": 999, "taifi": 999, "mrandrewandrad": 999, "mridul": 999, "seth": 999, "nadya": 999, "naoya": [999, 1000, 1001, 1002], "kanai": [999, 1000, 1001], "nickledav": 999, "nico": [999, 1006], "ningchi": 999, "nlathia": 999, "okbalefthand": 999, "okhlopkov": [999, 1000], "pano": 999, "lourida": 999, "strickland": 999, "perrin": 999, "letelli": 999, "pestrickland": 999, "practicalswift": 999, "qimu": 999, "zheng": [999, 1000, 1005], "rachit": [999, 1005, 1008], "kansal": 999, "ramana": [999, 1000], "randi": 999, "olson": 999, "lutz": [999, 1003, 1006, 1010], "schucker": 999, "jain": [999, 1000, 1001, 1005, 1007, 1008], "ruifeng": [999, 1000, 1005], "r\u00e9my": 999, "l\u00e9one": 999, "saihttam": 999, "saiw": 999, "yeung": 999, "shleifer": [999, 1000], "sartaj": 999, "sasank": 999, "chilamkurthi": 999, "seal": 999, "shagun": 999, "sodhani": 999, "shanmuga": 999, "shashank": [999, 1005], "shekhar": 999, "shawpan": 999, "shengxiduan": 999, "shota": 999, "shuckle16": 999, "smedbergm": 999, "srvanrel": 999, "leriqu": [999, 1001], "taranjeet": 999, "themrmax": [999, 1000], "hallock": 999, "moreau": [999, 1000, 1001, 1002, 1003], "tkammi": 999, "toastedcornflak": [999, 1000], "tomdlt": 999, "toshihiro": [999, 1000, 1006], "kamishima": [999, 1000], "tracer0tong": 999, "hauck": 999, "vo": [999, 1007], "varun": [999, 1000, 1001, 1007, 1008], "jewalikar": 999, "vikram": [999, 1008, 1009], "villu": 999, "ruusmann": 999, "walter": 999, "waterponei": [999, 1000], "wenjian": 999, "welch": 999, "wyseguy7": 999, "xyguo": [999, 1001], "yanlend": 999, "yen": [999, 1000], "yenchenlin": 999, "yoav": 999, "zivori": 999, "10723": [1000, 1001], "9623": 1000, "undocu": 1000, "deleteri": 1000, "9677": 1000, "ashutosh": [1000, 1001, 1003, 1005], "correlation_model": 1000, "regression_model": 1000, "belatedli": 1000, "9717": 1000, "9693": 1000, "steingold": [1000, 1001], "9711": 1000, "goncalo": [1000, 1001], "rodrigu": [1000, 1001, 1006], "9641": 1000, "bourbeau": [1000, 1001, 1002], "9865": 1000, "sachin": [1000, 1001, 1007], "kelkar": [1000, 1001, 1003], "9922": 1000, "charli": [1000, 1001, 1009], "brummitt": [1000, 1001], "9945": 1000, "9830": 1000, "9600": 1000, "kerimov": [1000, 1001], "9593": 1000, "reiichiro": [1000, 1001], "nakano": [1000, 1001], "9604": 1000, "interim": 1000, "9558": 1000, "9847": 1000, "joan": [1000, 1001, 1002, 1003], "massich": [1000, 1001, 1002, 1003], "oli": 1000, "blum": 1000, "9697": 1000, "9750": 1000, "9788": 1000, "9815": 1000, "9802": 1000, "vrishank": [1000, 1001], "bhardwaj": [1000, 1001], "nagarjuna": [1000, 1001], "nathaniel": [1000, 1001, 1003], "diegodlh": [1000, 1001], "jkleint": [1000, 1001], "oliblum90": [1000, 1001], "pasbi": [1000, 1001], "lawson": [1000, 1001, 1002], "nielsenmarkus11": [1000, 1001], "excit": 1000, "cautiou": 1000, "min_impurity_split": 1000, "7823": [1000, 1001], "8446": 1000, "5279": 1000, "8363": 1000, "5295": 1000, "7388": 1000, "userguid": 1000, "7655": 1000, "karan": [1000, 1001, 1002], "desai": [1000, 1002, 1005, 1006, 1008, 1009], "7739": 1000, "gasquez": 1000, "8120": 1000, "neeraj": 1000, "gangwar": 1000, "7548": 1000, "9206": 1000, "7441": 1000, "6101": 1000, "8698": 1000, "7794": 1000, "herilalaina": [1000, 1001, 1003], "rakotoarison": [1000, 1001, 1003], "5036": 1000, "4939": 1000, "esuli": [1000, 1005], "n_skips_": 1000, "7914": 1000, "horrel": 1000, "8591": 1000, "hadrien": [1000, 1003], "7838": 1000, "8835": 1000, "8061": 1000, "cordier": 1000, "6288": 1000, "9145": 1000, "reddi": [1000, 1001, 1002, 1007, 1010], "chinthala": 1000, "7721": 1000, "crall": [1000, 1006], "7685": 1000, "tommi": [1000, 1001, 1002], "l\u00f6fstedt": 1000, "9277": 1000, "hongkahjun": 1000, "7089": 1000, "randomized_svd_low_rank": 1000, "9067": 1000, "6181": 1000, "wendling": 1000, "8065": 1000, "lejeun": 1000, "7567": 1000, "jay": 1000, "doepk": 1000, "7573": 1000, "romain": [1000, 1005], "brault": 1000, "5229": 1000, "7990": 1000, "8586": 1000, "7723": 1000, "8028": 1000, "booth": 1000, "8005": 1000, "7863": 1000, "7506": 1000, "5991": 1000, "8845": 1000, "8053": 1000, "8282": 1000, "8117": 1000, "9259": 1000, "8094": 1000, "8335": 1000, "poughon": 1000, "7880": 1000, "karnofski": 1000, "8931": 1000, "attractador": [1000, 1001], "8002": 1000, "8549": 1000, "zerodivisionerror": [1000, 1003, 1009], "7501": 1000, "dominik": [1000, 1009], "krzeminski": 1000, "7970": 1000, "8006": 1000, "p\u00f6lsterl": [1000, 1003, 1006], "8936": 1000, "8672": 1000, "mike": 1000, "benfield": 1000, "broke": 1000, "8068": 1000, "5732": 1000, "ytrue": 1000, "ypred": 1000, "8087": 1000, "7983": 1000, "8512": 1000, "8251": 1000, "aivision2020": 1000, "5814": 1000, "7849": 1000, "jair": 1000, "montoya": 1000, "martinez": 1000, "randomizedlasso": 1000, "5359": 1000, "9302": 1000, "8160": 1000, "8224": 1000, "gedeck": 1000, "vathsala": [1000, 1001, 1002, 1003], "achar": [1000, 1001, 1002, 1003], "9022": 1000, "mehmet": [1000, 1006], "basbug": 1000, "9024": 1000, "8973": 1000, "paulo": [1000, 1006, 1008], "haddad": 1000, "unmeaning": 1000, "6573": 1000, "quazi": [1000, 1001], "marufur": 1000, "rahman": [1000, 1001, 1005], "baselabelpropag": 1000, "9239": 1000, "andr": [1000, 1007], "ambrosio": 1000, "boechat": 1000, "early_exager": 1000, "assertionerror": 1000, "8992": 1000, "7954": 1000, "foreman": 1000, "9105": 1000, "9108": 1000, "8306": 1000, "7872": 1000, "_c_step": 1000, "3367": 1000, "steward": 1000, "8768": 1000, "detomaso": 1000, "6507": 1000, "jayzed82": 1000, "6126": 1000, "7814": 1000, "7702": 1000, "9219": 1000, "7771": 1000, "ang": 1000, "randomizedlogisticregress": 1000, "8259": 1000, "mandatorili": 1000, "7565": 1000, "8181": 1000, "basesearchcv": [1000, 1001], "8344": 1000, "eriksson": 1000, "7661": 1000, "8295": 1000, "batula": 1000, "dylan": [1000, 1003], "werner": [1000, 1005], "meier": 1000, "7365": 1000, "aleksandr": 1000, "sandrovskii": 1000, "5697": 1000, "stijn": 1000, "tonk": 1000, "6250": 1000, "8093": 1000, "bull": 1000, "9507": 1000, "7356": 1000, "dingwal": 1000, "_check_target": 1000, "8377": 1000, "5211": 1000, "rhinehart": 1000, "8159": 1000, "8198": 1000, "fetch_": 1000, "7944": 1000, "7825": 1000, "kathleen": 1000, "7376": 1000, "7331": 1000, "yangarbit": 1000, "__getstate__": [1000, 1008], "obstruct": 1000, "8316": 1000, "holger": 1000, "8010": 1000, "7986": 1000, "najera": 1000, "9289": 1000, "makedir": 1000, "9284": 1000, "sebastin": [1000, 1001], "alert": 1000, "lgtm": 1000, "9278": 1000, "heli": 1000, "8449": 1000, "9078": 1000, "purport": 1000, "sergul": [1000, 1001, 1004], "aydor": [1000, 1001, 1004], "8922": 1000, "8137": 1000, "8139": 1000, "8995": 1000, "2879": 1000, "7459": 1000, "7812": 1000, "9100": 1000, "8481": 1000, "8174": 1000, "tahar": 1000, "zanouda": 1000, "8854": 1000, "8874": 1000, "7998": 1000, "jiacheng": 1000, "argpartit": 1000, "frombuffer_empti": 1000, "in1d": 1000, "rankdata": 1000, "safe_copi": 1000, "eig": 1000, "fast_dot": 1000, "pinvh": [1000, 1002], "graph_laplacian": 1000, "sparsetool": 1000, "connected_compon": 1000, "check_decision_proba_consist": 1000, "shubham": [1000, 1003], "9019": 1000, "baseensembl": [1000, 1003], "7464": 1000, "rishikesh": 1000, "taehoon": [1000, 1001], "aashil": 1000, "balakumaran": [1000, 1001], "manoharan": [1000, 1001], "petrov": [1000, 1001, 1009], "minghui": [1000, 1001], "jc": [1000, 1001], "alexandercbooth": 1000, "chkoar": 1000, "aarshai": [1000, 1001], "gilliam": 1000, "subramanyam": 1000, "clement": [1000, 1001, 1005], "joudet": [1000, 1001], "robl": 1000, "kati": 1000, "luangkot": 1000, "lacchia": 1000, "akshay0724": 1000, "omtcyfz": 1000, "rickiepark": 1000, "jbdelafoss": 1000, "vivek": [1000, 1001, 1002, 1010], "elliott": 1000, "ldirer": 1000, "sid": 1000, "kapur": 1000, "midina": 1000, "mikebenfield": 1000, "sourav": [1000, 1003], "aseem": 1000, "bansal": 1000, "aishwaryark": 1000, "howel": 1000, "dokato": 1000, "kathi": [1000, 1003], "ferria": 1000, "nikita": [1000, 1001, 1003, 1006, 1007, 1008], "basil": 1000, "beirouti": 1000, "possa": 1000, "bednar": 1000, "janin": 1000, "harper": 1000, "artsiom": 1000, "ligo": 1000, "rahn": [1000, 1003], "seanpwilliam": 1000, "julian": [1000, 1001], "kuhlmann": [1000, 1001], "aubert": 1000, "j\u00f6rn": 1000, "hee": [1000, 1003], "shivamgargsya": [1000, 1004, 1006], "kat": 1000, "hempstalk": 1000, "kaushik": [1000, 1007, 1008, 1009], "lakshmikanth": 1000, "kennedi": [1000, 1003, 1010], "yap": 1000, "kiril": [1000, 1001, 1003, 1005], "bobyrev": 1000, "imbert": [1000, 1002, 1005, 1007, 1010], "lera": 1000, "douillard": 1000, "mainak": 1000, "tobychees": [1000, 1001], "manraj": 1000, "marc": [1000, 1002, 1003, 1009], "meketon": 1000, "marcofalk": 1000, "gilch": 1000, "mehul": 1000, "ahuja": [1000, 1007, 1008], "goetz": [1000, 1001], "dezub": 1000, "baumgartn": 1000, "vibrantabhi19": 1000, "golubin": 1000, "milen": 1000, "paskov": 1000, "antonin": 1000, "carett": 1000, "morikko": 1000, "mrmjauh": 1000, "nalepa": 1000, "namiya": 1000, "narinek": [1000, 1001], "angu": [1000, 1001, 1007], "nicol": 1000, "vavrova": 1000, "nitish": 1000, "pandei": [1000, 1005], "daniil": 1000, "olegovich": 1000, "craze": 1000, "om": 1000, "parmind": 1000, "patrick": [1000, 1001, 1006, 1007, 1010], "carlson": 1000, "ganssl": 1000, "lorek": 1000, "pete": [1000, 1004, 1005], "bachant": 1000, "csizsek": 1000, "jong": 1000, "puneet": 1000, "mathur": [1000, 1002, 1003, 1008, 1009], "quentin": [1000, 1001, 1002, 1009, 1010], "hibon": 1000, "1kastner": 1000, "rameshwar": [1000, 1001], "bhaskaran": [1000, 1001], "rebecca": 1000, "bilbro": 1000, "remi": 1000, "rampin": 1000, "pratik": 1000, "agarw": [1000, 1001, 1003], "sailesh": [1000, 1001], "choyal": [1000, 1001], "samson": 1000, "samu\u00ebl": 1000, "weber": 1000, "sarah": [1000, 1002, 1005], "abhyudai": 1000, "sharan": [1000, 1001], "yalburgi": [1000, 1001], "willduan": 1000, "siddharth": [1000, 1004], "almer": 1000, "theofilo": 1000, "papapanagiot": 1000, "alison": 1000, "boucher": 1000, "folkman": 1000, "jung": [1000, 1004, 1008], "shenoi": 1000, "vilhelm": [1000, 1001], "ehrenheim": [1000, 1001], "alan": [1000, 1001, 1004, 1006, 1007], "yee": [1000, 1001], "warut": [1000, 1001], "vijitbenjaronk": [1000, 1001], "yuichi": 1000, "fujikawa": 1000, "affanv14": 1000, "andreh7": 1000, "bradi": 1000, "salz": 1000, "campustrampu": 1000, "agamemnon": [1000, 1001, 1002, 1003, 1005, 1006], "krasouli": [1000, 1001, 1002, 1003, 1005, 1006], "ditenberg": 1000, "elena": 1000, "sharova": 1000, "filipj8": [1000, 1001], "fukatani": 1000, "guiniol": 1000, "guoci": 1000, "hakaa1": [1000, 1001], "xhy": 1000, "jakirkham": [1000, 1001, 1002, 1008, 1009], "jaroslaw": 1000, "jeroko": 1000, "jmontoyam": 1000, "josephsalmon": [1000, 1001, 1002], "jschendel": [1000, 1001], "leereev": 1000, "hahn": [1000, 1001], "mathurinm": [1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "mehak": 1000, "sachdeva": 1000, "mlewis1729": 1000, "mlliou112": 1000, "mthorrel": [1000, 1003], "ndingwal": 1000, "nuff": 1000, "plagre": 1000, "pldtc325": 1000, "breno": [1000, 1001], "olsen": 1000, "alfano": 1000, "burn": [1000, 1001], "polmauri": 1000, "charlton": 1000, "austin": 1000, "chayant": 1000, "t15h": 1000, "chinmaya": 1000, "pancholi": 1000, "danielsen": 1000, "chung": [1000, 1001], "pravarmahajan": [1000, 1001], "dariu": [1000, 1001], "morawiec": [1000, 1001], "haberth\u00fcr": 1000, "heryanto": 1000, "kirkbi": [1000, 1001], "rashchedrin": 1000, "gertrud": 1000, "devansh": [1000, 1001], "dickson": 1000, "baxlei": 1000, "don86": 1000, "klarup": 1000, "elizabeth": [1000, 1002, 1005], "ferriss": 1000, "ellen": 1000, "egli": [1000, 1010], "chieh": [1000, 1001], "chou": [1000, 1001], "grzegorz": [1000, 1003], "szpak": [1000, 1003], "zxcvbniu": 1000, "icyblad": 1000, "ilya": 1000, "laughlin": 1000, "iv\u00e1n": [1000, 1006], "vall\u00e9": 1000, "aur\u00e9lien": [1000, 1001, 1002, 1006, 1007], "bellet": [1000, 1001, 1002], "mahapatra": 1000, "couldn": [1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "bundl": [1001, 1002], "indexerror": [1001, 1002], "11756": [1001, 1002], "14237": [1001, 1002], "schuder": [1001, 1002, 1003], "13903": [1001, 1002], "13124": [1001, 1002], "13772": [1001, 1002], "vya": [1001, 1002, 1003], "12949": 1001, "prabakaran": [1001, 1002, 1005, 1007, 1008], "kumaresshan": [1001, 1002, 1005], "12946": 1001, "tallott": 1001, "13276": 1001, "13005": 1001, "13312": 1001, "11295": 1001, "vacaliuc": [1001, 1002], "13046": 1001, "12360": 1001, "aakanksha": 1001, "13134": 1001, "sandro": [1001, 1008], "casagrand": [1001, 1002], "12881": 1001, "13165": 1001, "13221": 1001, "bertrandhaut": [1001, 1002], "raghunathan": [1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010], "dowon": [1001, 1002], "aria": [1001, 1002, 1008], "fibins": [1001, 1002], "finn": [1001, 1002], "shea": [1001, 1002], "joaak": [1001, 1002], "m\u00e9hault": [1001, 1002], "kms15": [1001, 1002], "kossori": [1001, 1002], "aruku": [1001, 1002], "lakshya": [1001, 1002, 1003], "ib\u00e1\u00f1ez": [1001, 1002, 1005], "gorelli": [1001, 1002, 1006, 1008], "marcogorelli": [1001, 1002], "mferrari3": [1001, 1002], "micka\u00ebl": [1001, 1002], "schoentgen": [1001, 1002], "pavlo": [1001, 1002], "kalli": [1001, 1002], "glaser": [1001, 1002], "pierretallott": [1001, 1002, 1003], "kapoor": [1001, 1002], "sandrocasagrand": [1001, 1002], "tashai": [1001, 1002], "vishaal": [1001, 1002], "zhuyi": [1001, 1002], "ziji": [1001, 1002], "zj": [1001, 1002], "poh": [1001, 1002], "12704": 1001, "12701": 1001, "12685": 1001, "12699": 1001, "adanhawth": [1001, 1002], "stine": [1001, 1002], "feda": [1001, 1002], "curic": [1001, 1002], "jeremiedbb": [1001, 1002, 1003], "katrin": [1001, 1002], "leinweb": [1001, 1002], "muhammad": [1001, 1002, 1006], "hassaan": [1001, 1002], "rafiqu": [1001, 1002], "paczuski": [1001, 1002], "waterburi": [1001, 1002], "shivam": [1001, 1002, 1003], "kotwalia": [1001, 1002], "12159": 1001, "12105": 1001, "11912": 1001, "12304": 1001, "12339": 1001, "12246": 1001, "10811": 1001, "feldbauer": [1001, 1002, 1003, 1004, 1007], "12441": 1001, "12517": 1001, "12234": 1001, "12165": 1001, "12388": 1001, "connor": [1001, 1006, 1010], "tann": [1001, 1006], "12393": 1001, "12122": 1001, "sharedmem": 1001, "12518": 1001, "12481": 1001, "12612": 1001, "12211": 1001, "lisa": [1001, 1002, 1004, 1005, 1007, 1008], "hannel": [1001, 1002], "melissa": 1001, "ferrari": 1001, "12451": 1001, "12171": 1001, "12365": 1001, "_encod": 1001, "12514": 1001, "12522": 1001, "12471": 1001, "marzinotto": [1001, 1002], "12317": 1001, "12338": 1001, "bauk": [1001, 1002], "12625": 1001, "sklearn_site_joblib": 1001, "12350": 1001, "12467": 1001, "unvendor": 1001, "12345": 1001, "navarret": [1001, 1002, 1003], "benjastudio": [1001, 1002], "cheuk": [1001, 1002], "connossor": [1001, 1002], "levinson": [1001, 1002], "kieker": [1001, 1002], "kataev": [1001, 1002], "dillon": [1001, 1002, 1003], "gardner": [1001, 1002], "vukolov": [1001, 1002], "caselli": [1001, 1002], "gauravahlawat": [1001, 1002], "gustavo": [1001, 1002, 1007], "haroldfox": [1001, 1002], "jacklangerman": [1001, 1002], "jacopo": [1001, 1002], "notarstefano": [1001, 1002], "janvanrijn": [1001, 1002], "jdethuren": [1001, 1002], "koen": [1001, 1002], "kushal": [1001, 1002], "chauhan": [1001, 1002, 1008, 1009], "jie": [1001, 1002, 1005], "lili": [1001, 1002], "xiong": [1001, 1002, 1007], "liam": [1001, 1002], "melsyt": [1001, 1002], "nichola": [1001, 1002, 1004], "shebanov": [1001, 1002], "oleksandr": [1001, 1002, 1003, 1004, 1007], "pavlyk": [1001, 1002, 1003, 1004], "hausamann": [1001, 1002], "pulkit": [1001, 1002, 1004], "maloo": [1001, 1002], "batista": [1001, 1002, 1006], "radostin": [1001, 1002], "stoyanov": [1001, 1002], "ramil": [1001, 1002], "nugmanov": [1001, 1002], "rebekah": [1001, 1002, 1003], "roopam": [1001, 1002], "tiernei": [1001, 1002, 1003], "sylvainlan": [1001, 1002, 1003, 1004, 1005], "takingitcasu": [1001, 1002], "tulio": [1001, 1002], "xing": [1001, 1002], "zach": [1001, 1002, 1007], "mountain": 1001, "sorri": 1001, "basemultilayerperceptron": [1001, 1003], "11924": 1001, "macbook": 1001, "9354": 1001, "9372": 1001, "astel": 1001, "10933": 1001, "hansen": 1001, "10471": 1001, "gaurav": [1001, 1002, 1003, 1004, 1005, 1007], "dhingra": [1001, 1002, 1005, 1010], "8003": 1001, "jo\u00ebl": 1001, "billaud": 1001, "10059": 1001, "braun": 1001, "9612": 1001, "jonatan": 1001, "samoocha": 1001, "8129": 1001, "margeta": 1001, "k_means_elkan": 1001, "11353": 1001, "11901": 1001, "9875": 1001, "9012": 1001, "11315": 1001, "9041": 1001, "9858": 1001, "artiem": 1001, "krinitsyn": 1001, "9908": 1001, "8617": 1001, "maskani": [1001, 1003, 1004, 1005], "filali": 1001, "konstantino": [1001, 1010], "katriopla": 1001, "10774": 1001, "catalfo": 1001, "10795": 1001, "takeshi": [1001, 1006, 1007, 1008], "yoshizawa": 1001, "11082": 1001, "sadhana": 1001, "srinivasan": [1001, 1004], "9731": 1001, "10045": 1001, "fetch_mldata": 1001, "11466": 1001, "6374": 1001, "normalize_compon": [1001, 1003], "11585": 1001, "ivan": [1001, 1002, 1005, 1008], "panico": [1001, 1005], "11420": 1001, "6452": 1001, "walli": 1001, "gauz": 1001, "9492": 1001, "8484": 1001, "9886": 1001, "underflow": [1001, 1006], "10142": 1001, "5956": 1001, "_class_mean": 1001, "_class_cov": 1001, "10898": 1001, "nanxin": 1001, "9832": 1001, "11951": 1001, "r\u00fcdiger": [1001, 1002, 1004], "busch": [1001, 1002, 1004], "9707": 1001, "wan": 1001, "7071": 1001, "9157": 1001, "11176": 1001, "forsyth": 1001, "11542": 1001, "anna": 1001, "9524": 1001, "9723": 1001, "10908": 1001, "10899": 1001, "melderi": 1001, "10101": 1001, "10\u2079": 1001, "9147": 1001, "clae": 1001, "fredrik": 1001, "mannbi": 1001, "10441": 1001, "mayur": 1001, "kulkarni": 1001, "6689": 1001, "nihar": 1001, "sheth": 1001, "11293": 1001, "9656": 1001, "greenhal": 1001, "n_features_to_comput": 1001, "9222": 1001, "hoh": 1001, "9234": 1001, "andrewww": 1001, "8075": 1001, "11211": 1001, "9484": 1001, "dalla": 1001, "card": 1001, "9043": 1001, "10112": 1001, "logistic_regression_path": [1001, 1002], "11724": 1001, "9939": 1001, "westov": 1001, "10998": 1001, "vazelh": [1001, 1002, 1003], "10071": 1001, "10153": 1001, "d\u00f6pfert": 1001, "10095": 1001, "cv_valu": 1001, "10297": 1001, "mabel": [1001, 1005], "10581": 1001, "yacin": 1001, "mazari": 1001, "10687": 1001, "10836": 1001, "aishwarya": 1001, "10397": 1001, "10992": 1001, "11327": 1001, "11905": 1001, "9837": 1001, "10593": 1001, "10610": 1001, "8554": 1001, "9775": 1001, "10827": 1001, "osa": 1001, "8066": 1001, "10587": 1001, "3840": 1001, "niederb\u00fchl": 1001, "9521": 1001, "11124": 1001, "arya": 1001, "11160": 1001, "barkhorn": 1001, "11679": 1001, "pacha": 1001, "10845": 1001, "perez": [1001, 1008], "parra": 1001, "toledano": 1001, "10999": 1001, "memoryerror": [1001, 1005], "11135": 1001, "10377": 1001, "9786": 1001, "10093": 1001, "alexryndin": 1001, "9772": 1001, "9515": 1001, "liddel": 1001, "manh": 1001, "dao": 1001, "9851": 1001, "10280": 1001, "10336": 1001, "haoran": 1001, "basemixtur": [1001, 1002], "10740": 1001, "10869": 1001, "g\u00e9ron": 1001, "9686": 1001, "11310": 1001, "_fit_and_scor": 1001, "11576": 1001, "ronsin": [1001, 1002, 1010], "_run_search": 1001, "9599": 1001, "11006": 1001, "11557": 1001, "boucaud": 1001, "iid": 1001, "9085": 1001, "10677": 1001, "zhdanovich": 1001, "10982": 1001, "juliet": 1001, "lawton": 1001, "10928": 1001, "solutu": 1001, "immensu": 1001, "9257": 1001, "8190": 1001, "alcorn": 1001, "9681": 1001, "mottl": [1001, 1002], "10005": 1001, "10346": 1001, "tobia": [1001, 1006, 1008], "10887": 1001, "11136": 1001, "4394": 1001, "9579": 1001, "kober": 1001, "9655": 1001, "bjerr": 1001, "11556": 1001, "11774": 1001, "9456": 1001, "unexpectedli": 1001, "9304": 1001, "11144": [1001, 1002], "9151": 1001, "10521": 1001, "7668": 1001, "9647": 1001, "10195": 1001, "10192": 1001, "11272": 1001, "11467": 1001, "11505": 1001, "giusepp": [1001, 1002], "costa": [1001, 1006], "10210": 1001, "11520": 1001, "11011": 1001, "11005": 1001, "11308": 1001, "11206": 1001, "11306": 1001, "10437": 1001, "lucija": 1001, "gregov": 1001, "10452": 1001, "10181": 1001, "nirvan": [1001, 1005], "anjirbag": 1001, "9399": 1001, "10913": 1001, "rodrigo": 1001, "agundez": 1001, "10458": 1001, "9816": 1001, "newei": 1001, "11042": 1001, "11235": 1001, "active_features_": 1001, "feature_indices_": 1001, "n_values_": 1001, "9726": 1001, "10829": 1001, "gilberto": 1001, "olimpio": 1001, "10655": 1001, "python2": 1001, "10412": 1001, "jiongyan": 1001, "9497": 1001, "8361": 1001, "neo": 1001, "_criterion": 1001, "classificationcriterion": 1001, "regressioncriterion": 1001, "10325": 1001, "camil": [1001, 1009, 1010], "stap": 1001, "basedecisiontre": [1001, 1002, 1005], "10536": 1001, "ohayon": [1001, 1002, 1009], "11464": 1001, "stott": 1001, "10663": 1001, "10229": 1001, "11553": 1001, "10881": 1001, "sevin": 1001, "ridge_regress": [1001, 1002, 1008], "10306": 1001, "siebert": 1001, "11741": 1001, "11166": 1001, "pypy3": 1001, "v5": 1001, "11010": 1001, "lami": 1001, "11596": 1001, "marcu": [1001, 1010], "voss": 1001, "9569": 1001, "12462": 1001, "zachariah": 1001, "10474": 1001, "10500": 1001, "9701": 1001, "9378": 1001, "check_set_param": 1001, "7738": 1001, "alvin": 1001, "chiang": 1001, "8102": 1001, "ankita": 1001, "sinha": [1001, 1010], "check_methods_subset_invari": [1001, 1007], "10428": 1001, "check_sample_weights_pandas_seri": 1001, "11558": 1001, "211217613": 1001, "absolutelynowarranti": 1001, "richi": 1001, "halford": [1001, 1008, 1009], "adelr": 1001, "adityadaflapurkar": 1001, "aidan": 1001, "fitzgerald": 1001, "aishgrt1": 1001, "akash": 1001, "shivram": 1001, "lenail": [1001, 1005], "egg": 1001, "diaz": 1001, "amanda": [1001, 1004, 1005, 1006, 1007], "aniruddha": 1001, "annaayzenshtat": 1001, "antonio": [1001, 1003], "quinonez": 1001, "anubhav": 1001, "marwaha": 1001, "arik": 1001, "pamnani": 1001, "ozga": 1001, "arunava": 1001, "geron": [1001, 1006, 1007], "ayush": [1001, 1006], "bangda": 1001, "bastian": 1001, "venthur": 1001, "benn": 1001, "koonc": 1001, "cclauss": 1001, "chadi": 1001, "kamar": 1001, "holdgraf": 1001, "hirsch": 1001, "hogan": 1001, "cnx": 1001, "cwitt": 1001, "ferreira": [1001, 1006, 1007], "gomez": [1001, 1008, 1010], "klevebr": 1001, "shwed": 1001, "mohn": [1001, 1005], "danil": 1001, "baibak": [1001, 1002], "beach": 1001, "pickup": 1001, "derek": 1001, "niederhut": [1001, 1003], "dilutedsauc": 1001, "dlovel": 1001, "dor": 1001, "dougla": 1001, "duhaim": 1001, "tuzova": 1001, "eunji": 1001, "farahsae": 1001, "raimundo": 1001, "fenx": 1001, "frankhui": 1001, "franz": 1001, "wompner": 1001, "freija": 1001, "descamp": 1001, "frsi": 1001, "calvo": [1001, 1002], "georgi": [1001, 1004], "peev": [1001, 1004], "gkevinyen5418": 1001, "vermeil": 1001, "hongh": 1001, "hossein": [1001, 1002, 1003], "pourbozorg": [1001, 1002, 1003], "hristo": [1001, 1008], "hunan": 1001, "rostomyan": 1001, "iampat": 1001, "jaewon": 1001, "malcolm": 1001, "jami": 1001, "wolosonovich": 1001, "jeb": 1001, "bearer": 1001, "jinkun": 1001, "jjabl": 1001, "johnstott": 1001, "jotasi": 1001, "julietcl": 1001, "shenk": 1001, "karl": 1001, "kasper": 1001, "primdal": 1001, "lauritzen": 1001, "ksemb": 1001, "kuai": [1001, 1002], "kyeongpil": 1001, "kang": [1001, 1003], "kye": 1001, "kyledrogo": 1001, "l\u00e9o": 1001, "liutong": 1001, "lizao": 1001, "lkjcalc": 1001, "louib": [1001, 1002], "luciano": [1001, 1008], "luke": 1001, "persola": 1001, "markiwanchyshyn": 1001, "marsgui": 1001, "gubri": [1001, 1002], "koko": [1001, 1007, 1008], "copeland": [1001, 1002], "meghann": [1001, 1003], "minh": 1001, "jamaoui": [1001, 1002, 1005], "mohammad": [1001, 1002], "shahebaz": 1001, "muayyad": 1001, "alsadi": 1001, "nabarun": 1001, "pal": [1001, 1007], "narendran": 1001, "santhanam": 1001, "suh": 1001, "eng": 1001, "av": 1001, "nicolau": 1001, "werneck": 1001, "titov": [1001, 1003, 1006, 1007], "nilesh": 1001, "kevlani": 1001, "notmatthancock": [1001, 1003], "nzw": 1001, "oren": 1001, "milman": 1001, "osaid": 1001, "rehman": 1001, "nasir": 1001, "fernand": [1001, 1007, 1008], "olden": 1001, "pierreablin": 1001, "pietruh": 1001, "pinaki": 1001, "nath": 1001, "chowdhuri": [1001, 1007], "piotr": [1001, 1002], "szyma\u0144ski": [1001, 1002], "pradeep": [1001, 1002], "raamana": [1001, 1002], "pravar": 1001, "mahajan": [1001, 1003, 1010], "qingi": 1001, "rajendra": 1001, "arora": [1001, 1008], "rankylau": 1001, "kosobrodov": 1001, "rragundez": 1001, "sagnik": 1001, "bhattacharya": 1001, "radhakrishnan": 1001, "saqib": 1001, "nizam": 1001, "shamsi": 1001, "satish": 1001, "gigant": [1001, 1003, 1008, 1009], "flennerhag": 1001, "sebastien": 1001, "shalil": 1001, "awalei": 1001, "shangwu": [1001, 1002], "sharad": 1001, "vijalapuram": 1001, "shenhanc78": 1001, "rastogi": 1001, "siftikha": 1001, "sinclert": 1001, "p\u00e9rez": 1001, "solutusimmensu": 1001, "somya": 1001, "anand": [1001, 1005], "srajan": 1001, "paliw": 1001, "sriharsha": [1001, 1002], "hatwar": [1001, 1002], "mcdowel": 1001, "syonekura": 1001, "takanori": 1001, "hayashi": 1001, "tarcusx": 1001, "theriley106": 1001, "heavei": 1001, "augspurg": [1001, 1003], "trishnendu": 1001, "ghorai": 1001, "twosigmajab": 1001, "umar": [1001, 1002], "farouk": [1001, 1002], "urvang": [1001, 1003], "patel": [1001, 1003, 1004, 1005, 1007], "vadim": [1001, 1005, 1006], "markovtsev": 1001, "vinit": 1001, "vinod": 1001, "viraj": 1001, "mavani": 1001, "navkal": 1001, "vqean3": [1001, 1002], "vufg": 1001, "wallygauz": 1001, "wdevazelh": 1001, "barnett": 1001, "rosenfeld": 1001, "yime": 1001, "ymazari": 1001, "yufeng": 1001, "griffith": [1001, 1002], "z\u00e9": 1001, "vin\u00edciu": 1001, "zhenq": 1001, "zhiqe": 1001, "xiao": [1001, 1003, 1006, 1007, 1008, 1009, 1010], "12955": 1002, "klopfer": 1002, "14197": 1002, "14024": 1002, "nicolashug": 1002, "13974": 1002, "hoang": [1002, 1003], "fhoang7": 1002, "14393": 1002, "guillem": [1002, 1003, 1008], "subi": [1002, 1003, 1008], "14087": 1002, "14067": 1002, "stalei": [1002, 1003], "14092": 1002, "14053": 1002, "13947": 1002, "instanci": 1002, "13910": 1002, "13894": 1002, "myatt": [1002, 1003], "min_max_axi": 1002, "13741": 1002, "roddi": [1002, 1003], "macsween": [1002, 1003], "14309": 1002, "13864": 1002, "paresh": [1002, 1003], "13877": 1002, "_sag": 1002, "sag_solv": 1002, "3591": 1002, "13317": 1002, "13157": 1002, "13086": 1002, "cole": 1002, "13485": 1002, "assia": 1002, "benbihi": 1002, "13651": 1002, "reloc": 1002, "13486": 1002, "13427": 1002, "couvreur": [1002, 1003], "9069": 1002, "13835": 1002, "10727": 1002, "wood": 1002, "13250": 1002, "13241": 1002, "12143": 1002, "11650": 1002, "non_negative_factor": [1002, 1004, 1005, 1006, 1010], "12988": 1002, "8769": 1002, "11000": 1002, "thibault": 1002, "sejourn": 1002, "changedbehaviourwarn": 1002, "11526": 1002, "6848": 1002, "glemaitr": [1002, 1003, 1005], "11727": 1002, "13266": 1002, "13545": 1002, "sorro": 1002, "12807": 1002, "12513": 1002, "12543": 1002, "storch": 1002, "13260": 1002, "13283": 1002, "13524": 1002, "13174": 1002, "13496": 1002, "13620": 1002, "12436": 1002, "12983": 1002, "13251": 1002, "joshuakennethjon": 1002, "12715": 1002, "13164": 1002, "12834": 1002, "leastsquareserror": 1002, "update_terminal_region": 1002, "6463": 1002, "movelikeriv": 1002, "13193": 1002, "12599": 1002, "13779": 1002, "13780": 1002, "12916": 1002, "13641": 1002, "8478": 1002, "12177": 1002, "12583": 1002, "13601": 1002, "danylo": 1002, "densif": 1002, "13240": 1002, "bartosz": 1002, "13562": 1002, "11646": 1002, "11699": 1002, "make_dataset": 1002, "13336": 1002, "toleranbc": 1002, "11754": 1002, "13397": 1002, "fagan": 1002, "12174": 1002, "12972": 1002, "lucio": 1002, "fernandez": 1002, "arjona": 1002, "coeffeci": 1002, "13279": 1002, "13328": 1002, "13389": 1002, "basesgdclassifi": 1002, "13422": 1002, "cl\u00e9ment": [1002, 1006, 1008], "doumouro": 1002, "unhandl": 1002, "13363": 1002, "12821": 1002, "13350": 1002, "j\u00e9r\u00f4me": [1002, 1003, 1004, 1010], "dock\u00e8": [1002, 1003, 1004, 1010], "9907": 1002, "12232": 1002, "sangeeth": 1002, "11179": 1002, "13151": 1002, "12568": 1002, "8216": 1002, "romuald": 1002, "menuet": 1002, "12732": 1002, "12334": 1002, "13607": 1002, "12855": 1002, "pawel": 1002, "sendyk": 1002, "13628": 1002, "13447": 1002, "10580": 1002, "sandra": [1002, 1008], "mitrov": 1002, "13554": 1002, "celelibi": 1002, "13142": 1002, "11354": 1002, "12613": 1002, "12669": 1002, "torrella": [1002, 1003, 1009], "12861": 1002, "8773": 1002, "13366": 1002, "fournier": 1002, "10440": 1002, "12222": 1002, "10058": 1002, "chiotelli": 1002, "12279": 1002, "12582": 1002, "my_pipelin": 1002, "2568": 1002, "make_": 1002, "11364": 1002, "baze": 1002, "petrushev": 1002, "__len__": 1002, "13439": 1002, "12908": 1002, "drew": 1002, "13253": 1002, "12116": 1002, "12197": 1002, "12251": 1002, "float16": 1002, "13007": 1002, "raffaello": 1002, "baluyot": 1002, "13333": 1002, "13459": 1002, "hunter": 1002, "mcgushion": 1002, "8508": 1002, "6261": 1002, "vettigli": 1002, "justglow": 1002, "12300": 1002, "11458": 1002, "mitar": 1002, "milutinov": 1002, "12344": 1002, "13549": 1002, "warn_on_dtyp": 1002, "check_pairwise_arrai": 1002, "13382": 1002, "prathmesh": 1002, "saval": 1002, "11705": 1002, "11973": 1002, "our_rand_r": 1002, "madhura": [1002, 1004, 1005, 1008, 1009], "parikh": [1002, 1007, 1008, 1009, 1010], "13531": 1002, "check_fit_idempot": 1002, "alberto": [1002, 1006, 1007], "torr": 1002, "amourav": 1002, "assiaben": 1002, "micha\u0142owski": 1002, "brentfagan": 1002, "chenal": [1002, 1003, 1005], "choe": 1002, "drewmjohnston": 1002, "dror": 1002, "atariah": 1002, "esvhd": 1002, "falak": 1002, "gandenberg": 1002, "luqi": 1002, "jf": 1002, "kulbear": 1002, "leandro": [1002, 1006], "hermida": [1002, 1006], "luk": 1002, "manimaran": [1002, 1004, 1005, 1006, 1007], "gaido": 1002, "marinelm": 1002, "masstran": 1002, "roeschk": 1002, "aftab": 1002, "abdela": 1002, "ibraheem": 1002, "mwestt": 1002, "iijima": 1002, "oresti": 1002, "osman": [1002, 1008], "flanagan": [1002, 1003], "soriano": 1002, "peai": 1002, "pim": 1002, "haan": 1002, "raf": 1002, "rajdeep": 1002, "dua": 1002, "ra\u00fal": 1002, "garc\u00eda": [1002, 1003, 1008], "lekhwani": 1002, "varma": 1002, "shiyu": 1002, "duan": [1002, 1004], "smari": [1002, 1003, 1004], "st\u00e9phane": [1002, 1003, 1007, 1008], "surgan12": 1002, "thibsej": 1002, "xhan": 1002, "xinyuliu12": 1002, "zayd": 1002, "hammoudeh": 1002, "16397": [1003, 1004], "16500": 1003, "16505": 1003, "16076": 1003, "shack": [1003, 1004, 1005], "15930": 1003, "inder128": 1003, "15810": 1003, "15898": 1003, "gargsya": 1003, "15933": 1003, "15760": 1003, "15888": 1003, "15936": 1003, "dizietasahi": 1003, "15879": 1003, "bibhash": [1003, 1004], "chandra": [1003, 1004, 1007], "mitra": [1003, 1004, 1008], "15937": 1003, "blyston": [1003, 1004], "15863": 1003, "abstractmethod": 1003, "_check_x": 1003, "basenb": 1003, "15996": 1003, "brigitta": [1003, 1004, 1005, 1009], "sip\u0151cz": [1003, 1004, 1005, 1009], "15751": 1003, "tirth": [1003, 1004], "15868": 1003, "nikla": [1003, 1004], "smedemark": 1003, "marguli": 1003, "15797": 1003, "15947": 1003, "revamp": 1003, "14849": 1003, "_name_estim": 1003, "_gb": 1003, "facto": 1003, "_birch": 1003, "9250": 1003, "12927": 1003, "deprecationwarn": 1003, "hinder": 1003, "15080": 1003, "14464": 1003, "13575": 1003, "10482": 1003, "13726": 1003, "shuzh": 1003, "9288": 1003, "15057": 1003, "korolev": 1003, "15120": 1003, "7943": 1003, "12303": 1003, "14510": 1003, "14890": 1003, "miguel": 1003, "cabrera": 1003, "14544": 1003, "15304": 1003, "jaim": 1003, "ferrando": 1003, "huerta": 1003, "12068": 1003, "12145": 1003, "13609": 1003, "camila": 1003, "williamson": 1003, "15661": 1003, "15160": 1003, "14259": 1003, "14764": 1003, "14740": 1003, "st\u00e9phan": 1003, "tulken": 1003, "14623": 1003, "sarra": 1003, "habchi": 1003, "15257": 1003, "willocx": 1003, "12650": 1003, "13960": 1003, "multiouput": 1003, "14908": 1003, "martina": [1003, 1005], "vila": [1003, 1005], "15382": 1003, "14933": 1003, "15138": 1003, "cusick": 1003, "14406": 1003, "14012": 1003, "faouzi": [1003, 1004], "13769": 1003, "14194": 1003, "least_absolute_devi": [1003, 1005, 1006], "13896": 1003, "13933": 1003, "14710": 1003, "categorical_crossentropi": [1003, 1007], "14869": 1003, "14682": 1003, "hancock": 1003, "5963": 1003, "pablo": [1003, 1006, 1007], "dubou": 1003, "14287": 1003, "15375": 1003, "14305": 1003, "14114": 1003, "15084": 1003, "14294": 1003, "14907": 1003, "14602": 1003, "chawla": 1003, "vectorizermixin": 1003, "14430": 1003, "strip_accents_unicod": 1003, "15100": 1003, "gradi": 1003, "overflowerror": 1003, "15463": 1003, "norvan": 1003, "sahin": 1003, "14520": 1003, "11635": 1003, "alec": 1003, "13704": 1003, "15557": 1003, "14378": 1003, "masashi": [1003, 1005], "shibata": 1003, "ashim": 1003, "bhattarai": 1003, "15010": 1003, "skip_comput": 1003, "13773": 1003, "14356": 1003, "15393": 1003, "venkatachalam": [1003, 1004, 1005, 1006, 1007, 1010], "14646": 1003, "14028": 1003, "15429": 1003, "14706": 1003, "14108": 1003, "14170": 1003, "14296": 1003, "13618": 1003, "13995": 1003, "14458": 1003, "14591": 1003, "14864": 1003, "15044": 1003, "15086": 1003, "15038": 1003, "15082": 1003, "13213": 1003, "14647": 1003, "linalgerror": 1003, "13393": 1003, "13707": 1003, "training_data_": 1003, "14357": 1003, "14900": 1003, "socastro": [1003, 1009], "9951": 1003, "14936": 1003, "15083": 1003, "12789": 1003, "15274": 1003, "13938": 1003, "15049": 1003, "toccac": 1003, "ptocca": 1003, "13231": 1003, "dong": 1003, "13467": 1003, "14595": 1003, "14865": 1003, "l\u00e9onard": [1003, 1008], "binet": [1003, 1008], "14732": 1003, "14417": 1003, "15625": 1003, "12258": 1003, "14898": 1003, "matcovici": 1003, "14593": 1003, "reboul": 1003, "14549": 1003, "14704": 1003, "15096": 1003, "14629": 1003, "15488": 1003, "15490": 1003, "12569": 1003, "bicker": 1003, "9597": 1003, "wenbo": [1003, 1005], "zhao": [1003, 1005, 1006, 1007, 1008], "14336": 1003, "dexter": 1003, "9274": 1003, "perri": 1003, "13806": 1003, "ana\u00ebl": 1003, "beaugnon": 1003, "15119": 1003, "15053": 1003, "13290": 1003, "13987": 1003, "_pairwis": [1003, 1005], "13925": 1003, "robson": 1003, "15524": 1003, "xun": [1003, 1005], "12557": 1003, "14286": 1003, "15099": 1003, "baselibsvm": 1003, "_sparse_fit": 1003, "14894": 1003, "danna": 1003, "naser": 1003, "12887": 1003, "15028": 1003, "guan": 1003, "14381": 1003, "11232": 1003, "sievert": 1003, "10815": 1003, "14035": 1003, "14475": 1003, "14538": 1003, "14872": 1003, "upcast": [1003, 1007], "15094": 1003, "choose_check_classifiers_label": 1003, "enforce_estimator_tags_i": 1003, "mock": 1003, "mockdatafram": 1003, "checkingclassifi": 1003, "newton_cg": 1003, "random_choice_csc": 1003, "fast_dict": 1003, "parallel_help": 1003, "14902": 1003, "14971": 1003, "nep": 1003, "14702": 1003, "13013": 1003, "13875": 1003, "14680": 1003, "check_classifier_multioutput": 1003, "check_regressor_multioutput": 1003, "13392": 1003, "rok": 1003, "mihevc": 1003, "check_transformer_data_not_an_arrai": 1003, "14884": 1003, "alphonsu": 1003, "abbi": [1003, 1004], "popa": [1003, 1004], "abdur": 1003, "rahmaan": 1003, "janhang": 1003, "abenbihi": 1003, "abhinav": [1003, 1006], "sagar": 1003, "jana": 1003, "lagat": 1003, "alessandro": [1003, 1005, 1008], "surac": 1003, "siqueira": 1003, "alexgoryainov": 1003, "itk": [1003, 1004, 1005], "alexshack": [1003, 1004, 1005], "akinkunl": 1003, "kaseorg": 1003, "maldonado": [1003, 1006], "angela": [1003, 1004, 1008], "ambroz": [1003, 1004], "anisha": 1003, "keshavan": 1003, "gutierrez": 1003, "anuja": 1003, "archana": [1003, 1005], "alva": 1003, "arnaudstiegl": 1003, "arpanchowdhri": 1003, "ashimb9": 1003, "ayomid": 1003, "bamidel": 1003, "baran": 1003, "buluttekin": 1003, "barrycg": 1003, "bill": [1003, 1004], "mill": 1003, "biswadip": 1003, "mandal": 1003, "blackd0t": 1003, "barklei": 1003, "c56poni": 1003, "camilaagw": 1003, "cartman_nabana": 1003, "catajara": 1003, "cgsavard": [1003, 1004], "vesteghem": 1003, "dakota": 1003, "grusak": 1003, "datenbergwerk": 1003, "dormagen": 1003, "deeplook": 1003, "drgfreeman": 1003, "cashman": 1003, "edvardlindelof": 1003, "ndirangu": [1003, 1007], "eunseop": 1003, "jeong": 1003, "fanni": 1003, "federicopisanu": 1003, "divo": 1003, "flaviomorelli": 1003, "francidona": 1003, "franco": 1003, "luqu": 1003, "freder": 1003, "haas": 1003, "g0g0gadget": 1003, "altai": 1003, "vale": 1003, "rio": [1003, 1005, 1006, 1007], "ganevgv": 1003, "gdex1": 1003, "getgaurav2": 1003, "gideon": 1003, "sonoiya": 1003, "gpapadok": [1003, 1007], "mogavero": 1003, "h4dr1en": 1003, "hadshirt": 1003, "hailei": [1003, 1004], "nguyen": [1003, 1004, 1007, 1008], "hannah": [1003, 1005, 1007], "bruce": [1003, 1004], "macdonald": [1003, 1004], "honglu": 1003, "ingrid": 1003, "spielman": 1003, "a16": [1003, 1004], "jaehong": 1003, "jai": [1003, 1007], "jeromedock": 1003, "jesper": 1003, "dramsch": 1003, "joanna": 1003, "ortiz": [1003, 1009], "kanika": 1003, "sabharw": 1003, "katarina": [1003, 1005], "slama": [1003, 1005], "kellycarmodi": 1003, "eth": 1003, "kensuk": 1003, "arai": 1003, "kesshi": [1003, 1004], "kevad": 1003, "lofti": [1003, 1004], "winata": [1003, 1005], "sheng": 1003, "dolmatov": 1003, "kirthi": 1003, "shankar": 1003, "sivamani": 1003, "katyal": 1003, "lakshmi": 1003, "krishnan": 1003, "lalliacqua": [1003, 1006], "lbfin": 1003, "loopym": 1003, "lostcoast": 1003, "huynh": [1003, 1005], "lrjball": [1003, 1004], "roeder": 1003, "maggiecheg": [1003, 1007], "maithreyi": 1003, "venkatesh": 1003, "maltimor": 1003, "maocx": 1003, "douriez": [1003, 1004], "oywa": 1003, "aladago": 1003, "mbillingr": 1003, "clare": 1003, "micah": 1003, "miguelbarao": 1003, "mina": [1003, 1004], "naghshhnejad": [1003, 1004], "motmoti": 1003, "mschaffenroth": 1003, "natasha": 1003, "nezar": 1003, "nidhin": 1003, "pattaniyil": 1003, "nishan": 1003, "mann": 1003, "nitya": 1003, "mandyam": 1003, "novaya": [1003, 1006], "nxorabl": 1003, "oleg": 1003, "stikhin": 1003, "saleem": 1003, "panpiort8": [1003, 1005], "paula": [1003, 1004], "poorna": [1003, 1005], "pspachtholz": [1003, 1004, 1005], "qdeffens": [1003, 1006], "garg": [1003, 1004], "rapha\u00ebl": 1003, "bournhonesqu": 1003, "reza": 1003, "gharibi": 1003, "payn": 1003, "rlm": 1003, "juergen": [1003, 1008], "sanjabi": 1003, "ruchitagard": 1003, "ruth": 1003, "waithera": 1003, "sackei": 1003, "samesh": [1003, 1004], "lakhotia": [1003, 1004], "sewook": 1003, "dare": 1003, "shreya": 1003, "simoncw": 1003, "smujjiga": 1003, "s\u00f6nke": 1003, "behrend": 1003, "soumirai": 1003, "steinfurt": [1003, 1005], "cowlei": 1003, "th0rwa": [1003, 1004], "theoptip": [1003, 1004], "theotheo": 1003, "thierno": 1003, "ibrahima": 1003, "diop": 1003, "schmitt": [1003, 1004], "tilen": 1003, "kusterl": 1003, "timsaur": 1003, "tola": 1003, "topisan": 1003, "ttang131": 1003, "veerlosar": 1003, "luzgin": 1003, "jeanselm": 1003, "lostanlen": 1003, "vnherdeiro": 1003, "wendi": 1003, "willdarnel": 1003, "wolframalpha": 1003, "xcjason": 1003, "martian": 1003, "xsat": 1003, "yinglr": 1003, "yokasr": 1003, "maxin": [1003, 1004], "yulia": 1003, "zamrii": 1003, "feng": [1003, 1005, 1006, 1007], "17959": 1004, "17848": 1004, "17742": 1004, "17995": 1004, "thomaz": 1004, "santana": [1004, 1007], "dsouza": [1004, 1005, 1006, 1007], "17433": 1004, "17985": 1004, "multinomialdevi": 1004, "logloss": 1004, "17694": 1004, "rempfler": 1004, "tsutomu": 1004, "kusanagi": [1004, 1006], "17357": 1004, "18016": 1004, "x_copi": 1004, "17914": 1004, "15730": 1004, "forrest": [1004, 1005], "17309": 1004, "swier": [1004, 1005], "heer": 1004, "17812": 1004, "bruno": [1004, 1005, 1006], "idl": 1004, "17235": 1004, "17204": 1004, "changed_onli": 1004, "17205": 1004, "15005": [1004, 1006], "slep009": [1004, 1006, 1007], "estimator_samples_": 1004, "16149": 1004, "11950": 1004, "11514": 1004, "16075": 1004, "16484": 1004, "16257": 1004, "simona": [1004, 1005, 1006], "maggio": [1004, 1005, 1006], "16801": 1004, "rcwoolston": 1004, "16431": 1004, "14048": 1004, "15963": 1004, "16084": 1004, "15950": 1004, "stephani": 1004, "15980": 1004, "wconnel": 1004, "15709": 1004, "15707": 1004, "maciej": 1004, "mikulski": 1004, "16006": 1004, "rushabh": 1004, "vasani": 1004, "streamhandl": 1004, "logger": 1004, "handler": 1004, "16451": 1004, "16280": 1004, "16837": 1004, "wornbb": 1004, "15669": 1004, "chaitanya": 1004, "16224": 1004, "schwetlick": [1004, 1005], "gelavizh": 1004, "ahmadi": 1004, "marija": [1004, 1005], "vlajic": [1004, 1005], "wheeler": [1004, 1005], "16841": 1004, "16655": 1004, "16718": 1004, "miotto": 1004, "16981": 1004, "g\u00f3rski": [1004, 1005], "14696": 1004, "14516": 1004, "15582": 1004, "16069": 1004, "bail": 1004, "16183": 1004, "16182": 1004, "santhosh": 1004, "16437": 1004, "hwan": 1004, "cho": 1004, "16539": 1004, "deros": 1004, "16692": 1004, "16663": 1004, "15834": 1004, "santiago": 1004, "mola": [1004, 1010], "16103": 1004, "divyaprabha": 1004, "selectormixin": 1004, "16132": 1004, "trimeta": 1004, "15503": 1004, "15782": 1004, "plgreenliru": 1004, "16403": 1004, "narendra": [1004, 1010], "mukherje": 1004, "16508": 1004, "15864": 1004, "14300": 1004, "15436": 1004, "15652": 1004, "15179": 1004, "angelaambroz": 1004, "15773": 1004, "15655": 1004, "14848": 1004, "absgrad": 1004, "_newton_cg": 1004, "16266": 1004, "standard_coef_": 1004, "standard_intercept_": 1004, "average_coef_": 1004, "average_intercept_": 1004, "16261": 1004, "brandt": 1004, "16849": 1004, "14264": 1004, "17021": 1004, "16323": 1004, "16362": 1004, "16442": 1004, "parson": [1004, 1006], "rick": 1004, "mackenbach": 1004, "16993": 1004, "emit": 1004, "15622": 1004, "mors": 1004, "15918": 1004, "kubin": 1004, "fit_grid_point": 1004, "16401": 1004, "pratama": 1004, "sutiono": 1004, "15953": 1004, "15959": 1004, "16111": 1004, "16090": 1004, "jayaratn": [1004, 1005, 1008, 1009], "14075": 1004, "meyer89": 1004, "16117": 1004, "15785": 1004, "16245": 1004, "16585": 1004, "15762": 1004, "16466": 1004, "16632": 1004, "maura": 1004, "pintor": 1004, "battista": 1004, "biggio": 1004, "15946": 1004, "ngshya": 1004, "32767": 1004, "mersenn": 1004, "twister": 1004, "31bit": 1004, "63bit": 1004, "crude": 1004, "postprocessor": 1004, "lemir": 1004, "13511": 1004, "kennel": 1004, "11296": 1004, "15558": 1004, "15806": 1004, "16331": 1004, "batiss": 1004, "15926": 1004, "16021": 1004, "sparsearrai": 1004, "16728": 1004, "uint": 1004, "17032": 1004, "_safe_tag": 1004, "16950": 1004, "15380": 1004, "16726": 1004, "16112": 1004, "16622": 1004, "17061": 1004, "aleksandra": 1004, "kocot": 1004, "alonso": [1004, 1006], "allend": [1004, 1006], "ana": [1004, 1006], "casado": 1004, "ankit810": 1004, "arunav": 1004, "konwar": 1004, "maingret": 1004, "beier": 1004, "berni": 1004, "bharathi": 1004, "brigi": [1004, 1005], "castachick": 1004, "castor": 1004, "corri": 1004, "bartelheim": 1004, "dani\u00ebl": 1004, "gelder": 1004, "daphn": 1004, "breuer": 1004, "cort": [1004, 1005, 1008, 1009], "dbauer9": 1004, "borovikova": 1004, "eln": 1004, "emili": [1004, 1005], "leung": 1004, "evgeni": 1004, "chasnovski": 1004, "fabiana": 1004, "facundo": [1004, 1007], "ferr\u00edn": 1004, "franziska": 1004, "boenisch": 1004, "bolmier": [1004, 1005, 1009], "gholdman1": 1004, "gonthier": 1004, "hao": [1004, 1005, 1007, 1008], "chun": [1004, 1005, 1007, 1008, 1009], "haoyin": [1004, 1006, 1007], "h\u00e9lion": 1004, "bourboux": 1004, "himanshu": [1004, 1007], "hirofumi": [1004, 1005], "suzuki": [1004, 1005], "huangk10": 1004, "kemenad": 1004, "hye": 1004, "sung": 1004, "indecisiveus": [1004, 1005], "inderjeet": 1004, "jjmistri": 1004, "haitz": [1004, 1006, 1007], "legarreta": [1004, 1006, 1007], "gorro\u00f1o": [1004, 1006, 1007], "judithabk6": 1004, "jumon": 1004, "kathryn": 1004, "krishnachaitanya9": 1004, "gia": 1004, "thuan": 1004, "lkubin": 1004, "lopusz": 1004, "lucgiffon": 1004, "lucyleeow": 1004, "kemk": 1004, "magda": 1004, "zielinska": 1004, "mandi": [1004, 1007], "gu": [1004, 1005, 1007], "manish": 1004, "aradwad": 1004, "mariana": 1004, "meirel": 1004, "mariel": 1004, "mc4229": 1004, "shoemak": 1004, "micha\u0142": 1004, "s\u0142apek": 1004, "mojca": 1004, "bertoncelj": 1004, "narendramukherje": 1004, "nicolasservel": 1004, "nkish": 1004, "noa": [1004, 1010], "tamir": [1004, 1007], "olicairn": 1004, "ur": 1004, "lenz": [1004, 1008], "delanou": 1004, "qizhi": 1004, "quang": 1004, "rachelcjordan": 1004, "raduspaimoc": 1004, "riccardo": [1004, 1010], "folloni": 1004, "ritchi": 1004, "rori": 1004, "hartong": 1004, "redden": 1004, "sambhav": 1004, "kothari": 1004, "santhoshbala18": 1004, "sarat": 1004, "addep": 1004, "scibol": 1004, "kie\u00dfl": 1004, "sergiodsr": 1004, "shiki": 1004, "shubh": 1004, "chatterje": 1004, "simonamaggio": [1004, 1005, 1006], "snowhit": 1004, "stareh": 1004, "marsh": 1004, "sunmi": 1004, "yoon": 1004, "talgatomarov": 1004, "tamirlan1": 1004, "nonner": 1004, "vink": [1004, 1006], "tiphain": 1004, "viard": 1004, "titu": 1004, "vachan": 1004, "vandana": 1004, "iyer": 1004, "waelbenamara": 1004, "wderos": 1004, "wenliwyan": 1004, "windber": 1004, "19579": 1005, "19646": 1005, "stopiter": 1005, "19922": 1005, "19732": 1005, "ishikawa": [1005, 1006], "19407": 1005, "ushtanit": [1005, 1006], "19982": 1005, "19939": 1005, "halvic": 1005, "19703": 1005, "sobkevich": 1005, "villaz\u00f3n": 1005, "terraza": 1005, "fonari": [1005, 1006], "19182": 1005, "yosuk": [1005, 1006], "kobayashi": [1005, 1006], "19721": 1005, "19659": 1005, "19211": 1005, "19847": 1005, "xiaoyu": 1005, "chai": [1005, 1008, 1009], "19308": 1005, "19234": 1005, "19727": 1005, "delong": [1005, 1006], "19888": 1005, "19924": 1005, "19271": 1005, "zhaowei": 1005, "19580": 1005, "brice": [1005, 1006], "adamson": 1005, "wil": 1005, "yegelwel": 1005, "css": 1005, "19417": 1005, "19179": 1005, "19126": 1005, "17448": 1005, "17107": 1005, "17546": 1005, "17856": 1005, "17984": 1005, "riedmann": 1005, "francesco": [1005, 1008], "casalegno": 1005, "18052": 1005, "sean": [1005, 1006, 1008], "stallei": 1005, "17937": 1005, "counts_": 1005, "init_size_": 1005, "17864": 1005, "17616": 1005, "18167": 1005, "18256": 1005, "jayratn": 1005, "16392": 1005, "17095": 1005, "18746": 1005, "norm_y_weight": 1005, "x_mean_": 1005, "y_mean_": 1005, "x_std_": 1005, "y_std_": 1005, "18768": 1005, "18302": 1005, "md5": 1005, "checksum": 1005, "14800": 1005, "17396": 1005, "jiaxiang": 1005, "17491": 1005, "18280": 1005, "17499": 1005, "17610": 1005, "18525": 1005, "11064": 1005, "17414": 1005, "18149": 1005, "17679": 1005, "18528": 1005, "villanova": [1005, 1006], "14446": 1005, "18394": 1005, "16985": 1005, "garbag": 1005, "18334": 1005, "multicor": [1005, 1006], "18341": 1005, "egor": 1005, "smirnov": 1005, "18410": 1005, "17702": 1005, "18326": 1005, "changedbehaviorwarn": 1005, "nonblasdotwarn": 1005, "17804": 1005, "17367": 1005, "15427": 1005, "gangesh": 1005, "gudmalwar": 1005, "6545": 1005, "17159": 1005, "15361": 1005, "17878": 1005, "17090": 1005, "_check_bounds_param": 1005, "12638": 1005, "lannuzel": 1005, "17526": 1005, "ayako": 1005, "yagi": 1005, "17612": 1005, "srimukh": 1005, "sripada": 1005, "16493": 1005, "darshan": 1005, "15636": 1005, "18987": 1005, "16619": 1005, "16906": 1005, "roei": 1005, "kahni": 1005, "18293": 1005, "16289": 1005, "kishimoto": 1005, "18639": 1005, "13003": 1005, "s\u00e1nchez": 1005, "18545": 1005, "laurenz": 1005, "reitsam": 1005, "17578": 1005, "knox": 1005, "6624": 1005, "marijn": 1005, "vliet": 1005, "18121": 1005, "18607": 1005, "fhaselbeck": 1005, "18622": 1005, "haesun": [1005, 1008, 1009], "10493": 1005, "17997": 1005, "maisonneuv": 1005, "square_dist": 1005, "17662": 1005, "18278": 1005, "17412": 1005, "16625": 1005, "10591": 1005, "karnowski": 1005, "plot_det_curv": [1005, 1006], "18176": 1005, "10708": 1005, "15007": 1005, "hathidara": 1005, "10711": 1005, "17192": 1005, "avi": [1005, 1006], "17225": 1005, "17569": 1005, "17651": 1005, "mato": 1005, "17777": 1005, "shubhanshu": 1005, "mishra": [1005, 1006], "17826": 1005, "decal": 1005, "willard": 1005, "17935": 1005, "cari": 1005, "goltermann": 1005, "18114": 1005, "18405": 1005, "yakov": 1005, "pchelintsev": 1005, "13900": 1005, "17478": 1005, "teon": 1005, "13204": 1005, "kosic": 1005, "18527": 1005, "18343": 1005, "devi": 1005, "sandeep": 1005, "18595": 1005, "18222": 1005, "18266": 1005, "subrat": 1005, "sahu": 1005, "15126": 1005, "17987": 1005, "17233": 1005, "zolisa": 1005, "bleki": 1005, "histgradientboost": 1005, "18124": 1005, "brocchini": 1005, "armstrong": 1005, "17427": 1005, "17038": 1005, "neighborsbas": [1005, 1008], "17148": 1005, "18691": 1005, "18370": 1005, "18612": 1005, "17603": 1005, "17604": 1005, "17606": 1005, "17608": 1005, "17609": 1005, "17633": 1005, "17661": 1005, "17932": 1005, "16352": 1005, "17759": 1005, "18269": 1005, "17876": 1005, "18429": 1005, "biernat": 1005, "17317": 1005, "17406": 1005, "wick": 1005, "18406": 1005, "17833": 1005, "yashika": 1005, "18510": 1005, "18447": 1005, "16066": 1005, "18682": 1005, "16935": 1005, "17193": 1005, "16335": 1005, "14982": 1005, "11682": 1005, "patric": [1005, 1006], "15763": 1005, "16530": 1005, "shuhua": 1005, "17386": 1005, "17187": 1005, "x_idx_sort": 1005, "17614": 1005, "check_methods_sample_order_invari": [1005, 1007], "17598": 1005, "ngo": 1005, "17992": 1005, "endian": 1005, "17644": 1005, "18508": 1005, "abo7atm": 1005, "spannbauer": 1005, "deodhar": 1005, "alexandracraciun": 1005, "amy12xx": 1005, "tiwari": 1005, "choraria": 1005, "subramaniyan": 1005, "kushwaha": 1005, "atsushi": [1005, 1006], "nukariya": [1005, 1006], "aura": 1005, "autoviz": 1005, "auto_viml": 1005, "avinash": 1005, "anak": 1005, "barankaraku": 1005, "barberogaston": 1005, "beatrizsmg": 1005, "mainy": 1005, "bossan": [1005, 1007, 1008, 1009], "pedigo": [1005, 1006], "bhavika": 1005, "devnani": 1005, "biprateep": 1005, "dei": 1005, "bmaisonn": 1005, "byron": 1005, "ceethinwa": [1005, 1006], "chaitanyamog": 1005, "clmbst": 1005, "coelhudo": 1005, "crispinlogan": [1005, 1008, 1009], "cristina": 1005, "mula": 1005, "darioka": [1005, 1007, 1008], "declan": 1005, "neill": 1005, "deeksha": 1005, "madan": 1005, "fiegel": [1005, 1006, 1008], "khoo": 1005, "eschibli": 1005, "fran": [1005, 1006, 1007], "larsson": [1005, 1006, 1007], "sheni": 1005, "genvalen": [1005, 1006, 1007, 1008, 1009], "kiragu": 1005, "gesa": 1005, "stupperich": 1005, "ghislain": 1005, "vaillant": 1005, "gim": 1005, "seng": 1005, "chevali": 1005, "bohl": [1005, 1007], "schole": 1005, "hitesh": 1005, "somani": 1005, "hoda1394": 1005, "moin": 1005, "hugorichard": 1005, "isuru": 1005, "wiryadi": 1005, "j0rd1smit": 1005, "jaehyun": 1005, "ahn": 1005, "tae": 1005, "hoctor": 1005, "vese": 1005, "jeevan": 1005, "jeroenpeterbo": 1005, "jhay": 1005, "jigna": 1005, "panchal": 1005, "jim0421": 1005, "joaquin": 1005, "gorb": 1005, "moya": 1005, "kartik": 1005, "chugh": 1005, "kaylani2": 1005, "kendrick": 1005, "cetina": 1005, "kenni": 1005, "isakov": 1005, "koki": 1005, "nishihara": 1005, "krum": [1005, 1007], "arnaudov": [1005, 1007], "oldja": 1005, "guitton": 1005, "mariam": 1005, "l\u00f6ning": 1005, "scheubrein": 1005, "megasari": 1005, "mathschi": 1005, "giudic": 1005, "milan": 1005, "straka": 1005, "muoki": 1005, "caleb": 1005, "haiat": 1005, "nadia": 1005, "tahiri": 1005, "ph": 1005, "hamada": 1005, "neil": 1005, "botelho": 1005, "nil": 1005, "noelano": 1005, "oj_lappi": 1005, "oleh": [1005, 1007], "kozynet": [1005, 1007], "pankaj": 1005, "jindal": 1005, "pardeep": 1005, "parthiv": 1005, "chigurupati": 1005, "pgithub": 1005, "probinette4": 1005, "pwalchessen": 1005, "rachel": [1005, 1008], "fischoff": 1005, "toshniw": 1005, "rafei": 1005, "iqbal": 1005, "rahul": [1005, 1010], "jakhar": 1005, "rachum": 1005, "ramyanp": [1005, 1006], "rauwuckl": 1005, "ravi": [1005, 1008], "kiran": 1005, "boggavarapu": 1005, "rishi": 1005, "advani": 1005, "rithvik": 1005, "romijnd": 1005, "tavenard": 1005, "rubi": 1005, "werman": 1005, "ryotaro": 1005, "tsukada": 1005, "sadak": 1005, "khandelw": 1005, "ezebunandu": 1005, "kimbinyi": 1005, "shail": 1005, "keller": 1005, "shao": [1005, 1006, 1007], "shooter23": [1005, 1006], "soledad": 1005, "galli": 1005, "subrat93": 1005, "sunitha": 1005, "selvan": 1005, "kusanagi2": 1005, "terenc": [1005, 1006], "honl": [1005, 1006], "thij": [1005, 1008, 1009], "thomas9292": 1005, "thorben": 1005, "tijanajovanov": 1005, "timo": 1005, "tnwei": 1005, "ufmay": 1005, "umberto": 1005, "lupo": 1005, "vika": [1005, 1007], "viniciu": [1005, 1006], "fuck": [1005, 1006], "violeta": 1005, "watchtheblur": 1005, "willpeppo": 1005, "xethan": 1005, "qianm": 1005, "yue": 1005, "yutaro": 1005, "ikeda": 1005, "zacchari": 1005, "ramzi": 1005, "zoj613": 1005, "21271": 1006, "21833": 1006, "siavash": 1006, "rezazadeh": 1006, "19210": 1006, "21295": 1006, "22050": 1006, "21991": 1006, "19869": 1006, "21481": [1006, 1007], "andr\u00e9": [1006, 1007, 1009], "babino": [1006, 1007], "disconnect": 1006, "21915": 1006, "21694": 1006, "minknowski": 1006, "cdist": 1006, "21741": 1006, "21871": 1006, "21845": 1006, "21517": 1006, "21917": 1006, "21552": 1006, "escap": [1006, 1008], "21493": 1006, "21199": 1006, "20638": 1006, "bohn\u00e9": 1006, "21179": 1006, "21195": 1006, "21130": 1006, "20761": 1006, "21251": 1006, "min_idf": 1006, "max_idf": 1006, "20752": 1006, "alek": [1006, 1007], "lefebvr": [1006, 1007], "21340": 1006, "21093": 1006, "21351": 1006, "cve": 1006, "28975": 1006, "21336": 1006, "_check_sample_weight": 1006, "only_non_neg": 1006, "20880": 1006, "andr\u00e1": [1006, 1007, 1008, 1009], "if_delegate_has_method": [1006, 1007], "21145": 1006, "zahlii": 1006, "21389": 1006, "20002": 1006, "19310": 1006, "least_squar": 1006, "19733": 1006, "lad": 1006, "absolute_loss": 1006, "20165": 1006, "18444": 1006, "18010": 1006, "threadsaf": 1006, "18736": 1006, "17443": 1006, "19641": 1006, "20087": 1006, "fauchereau": 1006, "19002": 1006, "19052": 1006, "yusuk": 1006, "nagasaka": 1006, "17622": 1006, "19024": 1006, "franki": 1006, "robertson": 1006, "20117": 1006, "natchiappan": [1006, 1007], "19883": 1006, "20597": 1006, "20899": 1006, "20200": 1006, "fit_": 1006, "partial_fit_": 1006, "19297": 1006, "20560": 1006, "18393": 1006, "bittarello": 1006, "19263": 1006, "19244": 1006, "18459": 1006, "nd": [1006, 1010], "18898": 1006, "ora": 1006, "phongpanagnam": 1006, "21080": 1006, "ledoit_wolf_shrinkag": 1006, "20416": 1006, "defoi": 1006, "20583": 1006, "19365": 1006, "ateif": 1006, "sara": 1006, "19669": 1006, "importlib": 1006, "pyoxid": 1006, "20297": 1006, "20209": 1006, "19011": 1006, "20729": 1006, "12069": 1006, "19046": 1006, "surya": [1006, 1007], "18433": 1006, "19198": 1006, "19159": 1006, "beno\u00eet": 1006, "mal\u00e9zieux": 1006, "19908": 1006, "20512": 1006, "20960": 1006, "cgroup": [1006, 1007], "quota": [1006, 1007], "20477": 1006, "19799": 1006, "19564": 1006, "19836": 1006, "19162": 1006, "10096": 1006, "fenil": 1006, "suchak": 1006, "20159": 1006, "murata": [1006, 1007], "20534": 1006, "19296": 1006, "19035": 1006, "19520": 1006, "18964": 1006, "19401": 1006, "relova": 1006, "17169": 1006, "dmytro": 1006, "lituiev": 1006, "20380": 1006, "pulido": 1006, "felip": [1006, 1007, 1008, 1009], "bidu": [1006, 1007], "rutter": 1006, "20515": 1006, "carsten": 1006, "allefeld": 1006, "19568": 1006, "shyam": 1006, "20207": 1006, "tomohiro": 1006, "endo": 1006, "20161": 1006, "shuhei": 1006, "kayawari": 1006, "arka204": [1006, 1008], "20431": 1006, "pfaffel": 1006, "19428": 1006, "hamoumi": 1006, "19411": 1006, "20959": 1006, "20554": 1006, "xiangyin": 1006, "kong": 1006, "9978": 1006, "10027": 1006, "16449": 1006, "20231": 1006, "naka": 1006, "19571": 1006, "20155": 1006, "oura": [1006, 1007, 1008], "19004": 1006, "midvidi": 1006, "19055": 1006, "19172": 1006, "19426": 1006, "19499": 1006, "strubel": 1006, "19616": 1006, "19391": 1006, "19390": 1006, "linearmodel": 1006, "17743": 1006, "17772": 1006, "17746": 1006, "17785": 1006, "17750": 1006, "17769": 1006, "20683": 1006, "19491": 1006, "19472": 1006, "shortest_path": 1006, "20531": 1006, "19415": 1006, "17036": 1006, "20326": 1006, "uttam": 1006, "9843": 1006, "19643": 1006, "attard": 1006, "19784": 1006, "18328": 1006, "20312": 1006, "divyanshu": 1006, "deoli": 1006, "18543": 1006, "20552": 1006, "19278": 1006, "20030": 1006, "tingshan": 1006, "18649": 1006, "rodion": 1006, "martynov": 1006, "20619": 1006, "baseshufflesplit": 1006, "20056": 1006, "pabloduque0": 1006, "prematur": 1006, "20904": 1006, "tomasz": 1006, "jakubek": [1006, 1007], "18925": 1006, "poznik": [1006, 1007, 1008], "18842": 1006, "19473": 1006, "jiefangxuanyan": 1006, "20072": 1006, "20842": 1006, "mart\u00edn": [1006, 1007], "19631": 1006, "19790": 1006, "flynn": [1006, 1008], "18368": 1006, "19483": 1006, "20526": 1006, "19069": 1006, "19041": 1006, "20250": 1006, "20652": 1006, "19934": 1006, "gleb": [1006, 1008, 1009, 1010], "levitskii": 1006, "19734": 1006, "robinson": 1006, "19752": 1006, "zhehao": [1006, 1007, 1008, 1009], "19527": 1006, "19788": 1006, "19356": 1006, "makoeppel": 1006, "19879": 1006, "19906": 1006, "20727": 1006, "20961": 1006, "n_input_features_": 1006, "20240": 1006, "20843": 1006, "18959": 1006, "wstate": 1006, "20023": 1006, "19336": 1006, "20272": 1006, "19459": 1006, "bezuidenhout": 1006, "clifford": 1006, "akai": 1006, "nettei": 1006, "19948": 1006, "20657": 1006, "19766": 1006, "20385": 1006, "_weighted_percentil": 1006, "huberlossfunct": 1006, "20528": 1006, "_safe_index": [1006, 1010], "20673": 1006, "is_scalar_nan": 1006, "assert_warn": 1006, "assert_warns_messag": 1006, "20521": 1006, "abdulelah": 1006, "mesfer": 1006, "adrian": [1006, 1007, 1008], "garcia": 1006, "badaracco": 1006, "sad\u0142ocha": 1006, "rubial": 1006, "alessia": 1006, "marcolini": 1006, "alihan": 1006, "zihna": 1006, "alin": 1006, "amol": 1006, "deshmukh": 1006, "pessoa": 1006, "anavelyz": 1006, "ashish": [1006, 1009], "ashvith": 1006, "shetti": 1006, "baam": [1006, 1007], "baptbillard": 1006, "bmalezieux": 1006, "bumblebe": 1006, "caherrera": 1006, "meli": [1006, 1007, 1008], "chrissobel": 1006, "yeh": 1006, "chuliang": 1006, "cliffordemmanuel": 1006, "conner": 1006, "shen": 1006, "dimitri": [1006, 1007, 1008, 1009, 1010], "papadopoulo": [1006, 1007, 1008, 1009, 1010], "orfano": [1006, 1007, 1008, 1009, 1010], "dmallia17": 1006, "ds_ana": 1006, "jardim": 1006, "edwinwenink": 1006, "eleni": 1006, "markou": 1006, "ericellwang": [1006, 1007], "ezri": 1006, "mudd": 1006, "fato": 1006, "morina": 1006, "hafner": 1006, "flyingdutchman23": 1006, "uwha": [1006, 1007], "bereng": 1006, "frederick": 1006, "frellwan": 1006, "vicent": [1006, 1007, 1008], "geroldcsend": 1006, "glen": 1006, "gl\u00f2ria": [1006, 1008], "mu\u00f1oz": [1006, 1008], "gregorystrubel": 1006, "groceryheist": 1006, "guiweb": 1006, "haidar": [1006, 1007], "almubarak": [1006, 1007], "moritz": [1006, 1008], "g\u00fcnther": [1006, 1010], "mirza": 1006, "harutaka": 1006, "kawamura": 1006, "hassan": 1006, "alsawadi": 1006, "geovan": [1006, 1007], "gome": [1006, 1007], "lima": [1006, 1007], "ilic": 1006, "ikko": 1006, "ashimin": 1006, "isaack": 1006, "mungui": 1006, "ishaan": 1006, "bhat": [1006, 1008, 1009, 1010], "ishan": [1006, 1007], "iwhalv": 1006, "preiss": 1006, "budarz": 1006, "jannik": 1006, "jennif": 1006, "jianzhu": 1006, "guo": 1006, "jnboehm": 1006, "johanwork": 1006, "paton": 1006, "n\u00e1pole": 1006, "julio": 1006, "julyrashchenko": 1006, "jvm": 1006, "kadatatlu": 1006, "kishor": 1006, "karen": 1006, "palacio": 1006, "kmatt10": 1006, "kobaski": 1006, "kot271828": 1006, "kunj": 1006, "kurumeyuta": 1006, "kxytim": 1006, "lacrosse91": 1006, "laveen": 1006, "bagai": 1006, "leonardo": 1006, "rocco": [1006, 1007, 1008], "uieda": 1006, "leopoldo": 1006, "corona": 1006, "lsturtew": 1006, "lucca": 1006, "quadro": 1006, "ly648499246": 1006, "mabu": 1006, "manaileng": 1006, "mariangela": 1006, "marielaraj": 1006, "hirzel": 1006, "mateo": 1006, "nore\u00f1a": 1006, "mathi": 1006, "batoul": 1006, "calcot": 1006, "prieur": 1006, "\u00f6zer": 1006, "miao": 1006, "cai": 1006, "karbownik": 1006, "michalkrawczyk": [1006, 1007], "mitzi": [1006, 1007], "mlondschien": 1006, "haseeb": [1006, 1007], "khoual": 1006, "jarir": 1006, "kanji": 1006, "nadim": 1006, "kawwa": 1006, "nanshan": 1006, "naozin555": 1006, "fultz": 1006, "nic": 1006, "annau": 1006, "stefani": [1006, 1008, 1009, 1010, 1011], "nigel": 1006, "bosch": 1006, "nodar": 1006, "okroshiashvili": 1006, "ogbonna": 1006, "chibuik": 1006, "ogordon100": 1006, "phongpanangam": 1006, "duqu": 1006, "ibieta": 1006, "jimenez": [1006, 1007], "lacouth": 1006, "olszewski": 1006, "dye": 1006, "pierreattard": [1006, 1007], "yve": 1006, "borgn": 1006, "pranayanchuri": 1006, "princ": 1006, "canuma": 1006, "putschblo": 1006, "ranjanikrishnan": 1006, "rene": 1006, "corneil": 1006, "ricardojnf": 1006, "richardscottoz": 1006, "sandi": 1006, "khosasi": 1006, "benhur": 1006, "flore": 1006, "shinehid": 1006, "shinnar": 1006, "tootoonian": 1006, "solosil": 1006, "kolawol": 1006, "stagg": 1006, "swpeas": 1006, "tfifi": 1006, "caswel": [1006, 1009], "timotheemathieu": 1006, "wolodzko": 1006, "tliu68": 1006, "uhmann": 1006, "tom1092": 1006, "tom\u00e1": [1006, 1007], "moreyra": 1006, "tommaso": 1006, "noto": 1006, "tsuga": 1006, "vang": 1006, "gkiasta": 1006, "vil\u00e9m": 1006, "zouhar": 1006, "vlasovet": 1006, "waijean": 1006, "whidou": 1006, "xiaoyuchai": 1006, "yasmeen": 1006, "alsaedi": 1006, "yoch": 1006, "yusukenagasaka": 1006, "yzhenman": 1006, "zeyusun": 1006, "zhaoweiwang": 1006, "msvcp140": 1007, "dll": 1007, "24631": 1007, "24446": 1007, "10805": 1007, "mathia": 1007, "23471": 1007, "24015": 1007, "23990": 1007, "23833": 1007, "24017": 1007, "sorski": [1007, 1008], "23395": 1007, "23636": 1007, "22063": 1007, "22059": 1007, "kurz": [1007, 1008], "23608": 1007, "23548": 1007, "24087": 1007, "23273": 1007, "23194": 1007, "23198": 1007, "lise": 1007, "kleiber": 1007, "23358": 1007, "23264": 1007, "feature_names_in": 1007, "23299": 1007, "23214": 1007, "collot": [1007, 1008], "baak": 1007, "23370": 1007, "23410": 1007, "compute_sample_weight": 1007, "23115": 1007, "22868": 1007, "multiindex": 1007, "22410": 1007, "23271": 1007, "21987": 1007, "22064": 1007, "22065": 1007, "22288": 1007, "22320": 1007, "21219": 1007, "21542": 1007, "23098": 1007, "22318": 1007, "23036": 1007, "binary_crossentropi": 1007, "23040": 1007, "23046": 1007, "22856": 1007, "21032": 1007, "18170": 1007, "21038": 1007, "14975": 1007, "22526": 1007, "23095": 1007, "silk": 1007, "20031": 1007, "krawczyk": 1007, "21148": 1007, "22255": 1007, "21881": 1007, "vassard": 1007, "22217": 1007, "21735": 1007, "22154": 1007, "22537": 1007, "iofal": 1007, "arisa": [1007, 1008], "22775": 1007, "22913": 1007, "randomgeek78": 1007, "22493": 1007, "19680": 1007, "thibaut": 1007, "22119": 1007, "22016": 1007, "22015": 1007, "19747": 1007, "attalla": 1007, "22498": 1007, "21482": 1007, "pujalt": 1007, "22412": 1007, "16605": 1007, "21901": 1007, "rileran": 1007, "23113": 1007, "ilion": 1007, "beyst": 1007, "21425": 1007, "stefanini": 1007, "16948": 1007, "patricio": 1007, "cerda": 1007, "22002": 1007, "21109": 1007, "iter_offset": 1007, "return_inner_stat": 1007, "inner_stat": 1007, "inner_stats_": 1007, "iter_offset_": 1007, "18975": 1007, "22111": 1007, "22181": 1007, "21334": 1007, "21705": 1007, "stanlei": [1007, 1008, 1009], "21432": 1007, "22806": 1007, "jihan": 1007, "benni": 1007, "21713": 1007, "haya": 1007, "21567": 1007, "maggi": 1007, "chege": 1007, "22300": 1007, "15948": 1007, "sysuresh": 1007, "22553": 1007, "19490": 1007, "ferrin": 1007, "22120": 1007, "15984": 1007, "okon": 1007, "22696": 1007, "22486": 1007, "21800": 1007, "20567": 1007, "22159": 1007, "20811": 1007, "21814": 1007, "16748": 1007, "siqi": 1007, "22215": 1007, "23047": 1007, "22695": 1007, "22697": 1007, "21762": 1007, "22106": 1007, "gijsber": 1007, "21632": 1007, "genesi": [1007, 1009], "valencia": [1007, 1009], "22566": 1007, "22908": 1007, "23097": 1007, "23079": 1007, "20803": 1007, "23023": 1007, "21573": 1007, "21832": 1007, "20145": 1007, "22356": 1007, "18482": 1007, "gameiro": 1007, "kharsa": 1007, "22370": 1007, "17819": 1007, "22235": 1007, "21837": 1007, "wagner": 1007, "22199": 1007, "aidar": 1007, "shakerimoff": 1007, "tenavi": 1007, "nakamura": 1007, "22223": 1007, "marcom": 1007, "21617": 1007, "ritter": [1007, 1008], "21114": 1007, "21078": 1007, "21448": 1007, "16061": 1007, "19438": 1007, "18310": 1007, "elfner": 1007, "22249": 1007, "22137": 1007, "22694": 1007, "22808": 1007, "22950": 1007, "21086": 1007, "22206": 1007, "21808": 1007, "22548": 1007, "22062": 1007, "trujillo": [1007, 1008], "22148": 1007, "22240": 1007, "9087": 1007, "22525": 1007, "19689": 1007, "21606": 1007, "21341": 1007, "preservs": 1007, "21767": 1007, "21724": 1007, "yar": 1007, "khine": 1007, "phyo": 1007, "21998": 1007, "22891": 1007, "22899": 1007, "23256": 1007, "19794": 1007, "21534": 1007, "22254": 1007, "21805": 1007, "jeann": 1007, "dionisi": 1007, "22685": 1007, "n_neighbour": 1007, "18832": 1007, "23033": 1007, "21565": 1007, "17266": 1007, "22118": 1007, "ohad": 1007, "22284": 1007, "19158": 1007, "nicki": 1007, "skaft": 1007, "20753": 1007, "22108": 1007, "22635": 1007, "19085": 1007, "22866": 1007, "21576": 1007, "emil": 1007, "dugnat": 1007, "21873": 1007, "21177": 1007, "20408": 1007, "ceballo": 1007, "22058": 1007, "23034": 1007, "22203": 1007, "21026": 1007, "21880": 1007, "mrinal": 1007, "tyagi": 1007, "22982": 1007, "22508": 1007, "comb": 1007, "22604": 1007, "22212": 1007, "21430": 1007, "desislava": 1007, "vasileva": 1007, "22687": 1007, "22150": 1007, "22248": 1007, "20860": 1007, "shubhraneel": 1007, "21888": 1007, "21954": 1007, "22953": 1007, "16018": 1007, "21445": 1007, "21988": 1007, "get_output_feature_nam": 1007, "21569": 1007, "21079": 1007, "20653": 1007, "21434": 1007, "19916": 1007, "22735": 1007, "compute_inverse_transform": 1007, "21701": 1007, "22114": 1007, "21330": 1007, "21408": 1007, "22149": 1007, "21436": 1007, "22191": 1007, "22476": 1007, "21278": 1007, "21316": 1007, "clickabl": 1007, "21298": 1007, "22237": 1007, "check_scalar": 1007, "22218": 1007, "validationerror": 1007, "check_requires_y_non": 1007, "22578": 1007, "arcidiacono": [1007, 1008, 1010], "22595": 1007, "21310": 1007, "22027": 1007, "lanterni": 1007, "23077": 1007, "22188": 1007, "22830": 1007, "2357juan": [1007, 1008, 1009], "adamgonzo": 1007, "adijohar": 1007, "kumawat": 1007, "raghuwanshi": 1007, "duron": 1007, "ahmadjubair33": 1007, "aj": 1007, "druck": 1007, "peixinho": 1007, "arroyo": 1007, "alexanmv": 1007, "almeidayoel": 1007, "amar": [1007, 1008, 1009], "amrcod": 1007, "griva": [1007, 1008], "andrii": 1007, "herrou": 1007, "ducout": 1007, "arth": 1007, "arthurmello": 1007, "arturoamor": 1007, "atharva": 1007, "patil": [1007, 1010], "aufarkari": 1007, "avm19": [1007, 1008, 1010], "ayan": 1007, "bardiya": [1007, 1008], "behrouz": 1007, "ben3940": 1007, "bijil": 1007, "subhash": 1007, "bmreinig": 1007, "brenden": 1007, "kadota": 1007, "cdrig": 1007, "chalmer": 1007, "chitteti": 1007, "srinath": [1007, 1008], "chloe": 1007, "agath": 1007, "azencott": 1007, "christopherlim98": 1007, "weidemann": 1007, "combsccod": 1007, "daniela": [1007, 1008], "darren": [1007, 1008], "eargl": 1007, "gilbertson": [1007, 1008], "dea": [1007, 1008, 1009], "mar\u00eda": [1007, 1008, 1009], "denni": 1007, "osei": 1007, "dessyvv": 1007, "dev514": 1007, "diwakar": 1007, "ries": 1007, "drskd": 1007, "emiko": 1007, "sano": 1007, "emmanouil": 1007, "gionanidi": 1007, "ermolaevpa": [1007, 1008], "estefania": 1007, "barreto": 1007, "ojeda": 1007, "eyast": 1007, "fatima": [1007, 1010], "gasmi": 1007, "luna": 1007, "glushchenkov": 1007, "fkaren27": 1007, "fpgawesom": 1007, "ftorres16": [1007, 1008], "gabor": 1007, "berei": 1007, "kertesz": 1007, "gauthier": 1007, "giancarlo": 1007, "glennfrutiz": 1007, "guillermo": 1007, "fern\u00e1ndez": 1007, "hansin": [1007, 1008], "henrymooresc": [1007, 1008], "hideaki": 1007, "imamura": 1007, "hind": 1007, "hmasdev": 1007, "hvassard": 1007, "aki": [1007, 1008, 1009], "iasoon": 1007, "ingela": 1007, "cowton": 1007, "jalexand3r": 1007, "jauhar": 1007, "jaya": 1007, "kommireddi": 1007, "je": 1007, "jelfner": 1007, "jenni": 1007, "jirka": 1007, "borovec": 1007, "cipri\u00e1n": 1007, "loayza": 1007, "chazalon": 1007, "mess": 1007, "jovan": [1007, 1008], "stojanov": [1007, 1008], "jschuerz": 1007, "katotten": 1007, "ken4git": 1007, "doucet": 1007, "kimayoung": 1007, "koushik": 1007, "kranthi": 1007, "sedamaki": 1007, "krumetoft": 1007, "lesne": 1007, "casino": [1007, 1008], "logan": [1007, 1008, 1009], "lucieclair": 1007, "luiz": 1007, "magali": 1007, "mandjev": 1007, "wurp": [1007, 1008], "boerner": 1007, "wimld": 1007, "martel": 1007, "corentin": 1007, "mat\u00eda": 1007, "matjansen": 1007, "francia": 1007, "megabyt": 1007, "mehrdad": 1007, "moradizadeh": 1007, "melemo2": 1007, "micky774": [1007, 1008], "milana2": 1007, "millawel": 1007, "miwojc": 1007, "mizuki": 1007, "mlant": 1007, "mohit": [1007, 1010], "moonkyung94": 1007, "mpoemsl": 1007, "mrinaltyagi": 1007, "leu": 1007, "msabati": 1007, "nadirhan": 1007, "\u015fahin": 1007, "naipawat": [1007, 1008], "poolsawat": [1007, 1008], "nartayxd": 1007, "nastegiano": 1007, "nathansquan": 1007, "detlefsen": 1007, "niket": 1007, "nikhil": 1007, "suresh": 1007, "kondratyev": 1007, "husak": 1007, "partev": [1007, 1008, 1009, 1010], "pelennor": 1007, "piet": [1007, 1008], "br\u00f6mmel": [1007, 1008], "pinki": 1007, "poloso": 1007, "pramod": 1007, "anantharam": 1007, "puhuk": [1007, 1008], "purna": 1007, "mansingh": 1007, "quadv": 1007, "rahil": [1007, 1008, 1009, 1010], "boy": 1007, "raz": 1007, "hoshia": 1007, "rishabh": 1007, "barnowski": [1007, 1008], "rsnegrin": 1007, "yadav": 1007, "sakinaouisrani": 1007, "sanjai": 1007, "marreddi": 1007, "seel": 1007, "sele": [1007, 1008], "seyedsaman": 1007, "emami": 1007, "shandeng123": 1007, "sharmadharmp": 1007, "shaymernaturalint": 1007, "shuangchi": [1007, 1008], "siavrez": 1007, "slishak": 1007, "spikebh": 1007, "sply88": 1007, "kailasa": [1007, 1008], "sultan": 1007, "orazbayev": 1007, "sumit": 1007, "saha": 1007, "sven": [1007, 1008], "eschlbeck": 1007, "stehl": [1007, 1008], "swapnil": 1007, "teunp": 1007, "ferr\u00e9": 1007, "hjortkj\u00e6r": 1007, "thiruvenkadam": 1007, "toastedyeast": [1007, 1008], "mctiernan": [1007, 1008], "udit": 1007, "ugo": 1007, "marchand": 1007, "vera": [1007, 1008], "komey": [1007, 1008], "victoireloui": 1007, "vishwakarma": 1007, "vikrant": 1007, "khedkar": 1007, "chernyi": 1007, "weijiadu": 1007, "yuan": [1007, 1008, 1009, 1010], "yiyangq": 1007, "yosshi999": 1007, "yuki": 1007, "koyama": 1007, "zeel": 1007, "zempleni": 1007, "zhenfish": 1007, "\u8d75\u4e30": 1007, "25747": 1008, "base_estimator__": 1008, "25477": 1008, "25563": 1008, "25570": 1008, "25664": 1008, "25774": 1008, "25500": 1008, "25589": 1008, "25704": 1008, "min_sample_split": 1008, "25744": 1008, "25619": 1008, "25638": 1008, "25354": 1008, "25174": 1008, "25089": 1008, "25129": 1008, "25363": 1008, "25188": 1008, "25295": 1008, "spec": [1008, 1009], "25312": 1008, "backslash": 1008, "25511": 1008, "25172": 1008, "25341": 1008, "25094": 1008, "25250": 1008, "25370": 1008, "23101": 1008, "24873": 1008, "25694": 1008, "25274": 1008, "25296": 1008, "25147": 1008, "23619": 1008, "24354": 1008, "safiuddin": 1008, "khaja": 1008, "gsiisg": 1008, "23935": 1008, "22527": 1008, "_sgd_fast": 1008, "_plain_sgd": 1008, "oversc": 1008, "23798": 1008, "24543": 1008, "24465": 1008, "23734": 1008, "24699": 1008, "23865": 1008, "simd": 1008, "primit": 1008, "23446": 1008, "23197": 1008, "23604": 1008, "23585": 1008, "24556": 1008, "maladi\u00e8r": [1008, 1009], "24617": 1008, "sim4n6": 1008, "24688": 1008, "22054": 1008, "roic": 1008, "24264": 1008, "maladier": 1008, "14736": 1008, "hunt": 1008, "zhan": 1008, "20802": 1008, "pokorni": 1008, "22965": 1008, "22968": 1008, "23038": 1008, "23210": 1008, "24258": 1008, "23470": 1008, "21938": 1008, "23127": 1008, "19075": 1008, "ramo": 1008, "carre\u00f1o": 1008, "24951": 1008, "22268": 1008, "mohamedbsh": 1008, "23905": 1008, "11860": 1008, "ablin": 1008, "24528": 1008, "23726": 1008, "24421": 1008, "kshitij": [1008, 1009], "22554": 1008, "24218": 1008, "molin": 1008, "21020": 1008, "24856": 1008, "22014": 1008, "23252": 1008, "24538": 1008, "24889": 1008, "24146": 1008, "peretti": 1008, "nestor": 1008, "navarro": 1008, "nati": 1008, "tomatti": 1008, "24855": 1008, "24849": 1008, "20415": 1008, "24283": 1008, "24894": 1008, "23819": [1008, 1009], "edoardo": [1008, 1010], "abati": [1008, 1010], "24747": 1008, "24245": 1008, "24405": 1008, "16695": 1008, "vitor": 1008, "rosa": 1008, "18298": 1008, "25077": 1008, "24317": 1008, "24350": 1008, "24755": 1008, "levitski": [1008, 1009, 1010], "24637": 1008, "24767": 1008, "23275": 1008, "maxwelllzh": 1008, "24433": 1008, "yogendrasingh": 1008, "23637": 1008, "23877": 1008, "10168": 1008, "\u0142ukasz": 1008, "borchmann": 1008, "12285": 1008, "miltenberg": 1008, "13042": 1008, "parizi": 1008, "18094": 1008, "22562": 1008, "24714": 1008, "23834": 1008, "24051": 1008, "22518": 1008, "18020": 1008, "24338": 1008, "23442": 1008, "atukorala": 1008, "22710": 1008, "conroi": 1008, "trinh": 1008, "23461": 1008, "24365": 1008, "24630": 1008, "rushil": [1008, 1009], "24084": 1008, "iinfo": 1008, "24141": 1008, "24539": 1008, "23977": 1008, "23683": 1008, "andrei": [1008, 1010, 1011], "melnik": 1008, "16747": 1008, "18805": 1008, "hongshaoyang": 1008, "22269": 1008, "23139": 1008, "24645": 1008, "10468": 1008, "ruben": 1008, "22993": 1008, "24750": 1008, "rudresh": 1008, "veerkhar": 1008, "23874": 1008, "24075": 1008, "22665": 1008, "24683": 1008, "24058": 1008, "perdok": 1008, "20331": 1008, "23993": 1008, "22629": 1008, "24412": 1008, "22898": 1008, "23480": 1008, "21469": 1008, "lapack_svd_driv": 1008, "20617": 1008, "25067": 1008, "14862": 1008, "24512": 1008, "24667": 1008, "25080": 1008, "24523": 1008, "mia": 1008, "bajic": 1008, "3llobo": 1008, "kania": [1008, 1009], "anulekh": 1008, "admir": [1008, 1009], "demiraj": [1008, 1009], "adoublet": [1008, 1009], "ahmedbgh": [1008, 1009], "aiko": 1008, "akshita": 1008, "prasanth": 1008, "ala": [1008, 1009], "miola": 1008, "lebel": 1008, "buzenet": [1008, 1009], "kassa": [1008, 1009], "bera": 1008, "maennel": 1008, "aniket": [1008, 1010], "shirsat": 1008, "anthony22": [1008, 1009], "apostolo": 1008, "tsetogl": 1008, "aravindh": 1008, "artur": [1008, 1009], "hermano": [1008, 1009], "ashah002": [1008, 1009, 1010], "ashwin": [1008, 1009], "azaria": [1008, 1009], "gebremichael": [1008, 1009], "b0rxington": 1008, "badr": 1008, "moufad": 1008, "bart\u0142omiej": 1008, "go\u0144da": 1008, "bdegraaff": 1008, "berkecanrizai": 1008, "bernd": 1008, "fritzk": 1008, "bhoomika": 1008, "biswaroop": 1008, "cannon": 1008, "bsh": 1008, "ceh": 1008, "chalulu": 1008, "changyao": [1008, 1009], "zablit": 1008, "veenhui": [1008, 1009, 1010], "christianwaldmann": 1008, "christin": [1008, 1009], "verrier": 1008, "dangonite57": [1008, 1009], "danielgaerb": 1008, "davidblnc": [1008, 1009], "dayn": [1008, 1009], "khant": 1008, "dhanshre": 1008, "diadochokinet": 1008, "diederikwp": 1008, "litsidi": [1008, 1009], "drewhogg": 1008, "oc": 1008, "dwight": 1008, "lindquist": 1008, "eden": 1008, "brekk": 1008, "edern": [1008, 1009], "eleanor": 1008, "eliaschiavon": 1008, "emir": [1008, 1009], "fabrizio": 1008, "damicelli": 1008, "fcharra": 1008, "siola": [1008, 1009], "tuveri": 1008, "franck": [1008, 1010], "charra": [1008, 1010], "geevarghes": 1008, "georgiamaydai": 1008, "gianr": 1008, "lazz": 1008, "guitar": 1008, "gunesbayir": [1008, 1009], "harshit5674": 1008, "hasan": 1008, "yaman": 1008, "vrigazov": 1008, "htsedebenham": 1008, "humahn": 1008, "ido": [1008, 1009], "iglesi": 1008, "iliya": 1008, "zhechev": 1008, "iren": [1008, 1009], "ivanllt": 1008, "sedykh": 1008, "mcivor": [1008, 1009], "janfidor": [1008, 1009], "jiten": 1008, "sidhpura": 1008, "jkarolczak": 1008, "jo\u00e3o": 1008, "johnathanpi": [1008, 1009], "koumenti": 1008, "panga": [1008, 1009], "johnthagen": 1008, "fleme": 1008, "choo": [1008, 1009], "yun": [1008, 1009], "keat": [1008, 1009], "juanfe88": 1008, "juliaschoepp": [1008, 1009], "jygerardi": [1008, 1009], "ka00ri": [1008, 1009], "kanishk": 1008, "sachdev": 1008, "kanissh": 1008, "kendal": 1008, "kento": [1008, 1009], "nozawa": [1008, 1009], "eliasi": [1008, 1009, 1010], "kluge": [1008, 1009], "lieret": 1008, "kirandevraj": 1008, "kraig": 1008, "vamsi": 1008, "kapadni": 1008, "lingyi1110": 1008, "mantovani": 1008, "maascha": 1008, "madinak": 1008, "maksym": 1008, "mansi": 1008, "kostelac": [1008, 1009], "marvin": [1008, 1009], "krawutschk": [1008, 1009], "masanori": [1008, 1009], "kanazu": [1008, 1009], "haberland": [1008, 1009], "mauroantonioserrano": 1008, "maxi": 1008, "marufo": 1008, "maximesaur": [1008, 1009], "smolskii": 1008, "bou": [1008, 1009], "mehgarg": 1008, "mehmetcanakbai": 1008, "baji\u0107": 1008, "flak": 1008, "hornstein": 1008, "ruiter": 1008, "paradi": 1008, "iljin": [1008, 1009], "misa": 1008, "ogura": 1008, "wilksch": 1008, "mrastgoo": [1008, 1010], "naois": [1008, 1010], "holohan": [1008, 1010], "nass": 1008, "jacobi": 1008, "nawazish": [1008, 1009], "alam": [1008, 1009], "nguy\u1ec5n": 1008, "v\u0103n": 1008, "di\u1ec5n": 1008, "fanelli": [1008, 1009], "nihal": 1008, "thukarama": 1008, "jare": 1008, "nima10khodaveisi": 1008, "nima": 1008, "sarajpoor": 1008, "nitinramvelraj": 1008, "nnlnr": [1008, 1009], "npach": [1008, 1009], "nwanna": 1008, "nymark": 1008, "kho": 1008, "holman": 1008, "oll": 1008, "lukowski": 1008, "hassoun": 1008, "tamer": 1008, "ouss1508": [1008, 1009], "oyindamola": 1008, "olatunji": 1008, "pab": [1008, 1009], "pandata": [1008, 1009], "soar": 1008, "petar": 1008, "mlinari\u0107": 1008, "pooja": [1008, 1009, 1010], "subramaniam": [1008, 1009, 1010], "priyam": 1008, "kakati": 1008, "freeland": 1008, "keerti": 1008, "rafal": [1008, 1009], "wojdyla": [1008, 1009], "raghuv": [1008, 1009], "makhija": 1008, "rehan": 1008, "guha": 1008, "klima": 1008, "crockett": 1008, "homm": 1008, "roman4oo": 1008, "rowan": 1008, "mankoo": 1008, "sabri": 1008, "monaf": 1008, "safikh": 1008, "salahuddin": 1008, "yojana": 1008, "menes": 1008, "ephrem": 1008, "sangam": 1008, "sangamswadik": 1008, "sanjai_3": [1008, 1009], "sarahremu": 1008, "sashka": [1008, 1009], "savkomax": 1008, "gustafson": [1008, 1009], "sec65": 1008, "seljak": 1008, "shadi": [1008, 1009], "gewili": [1008, 1009], "shellyfung": 1008, "shinsuk": 1008, "mori": 1008, "shiva": [1008, 1009], "shoaib": 1008, "khan": [1008, 1009], "shogo": [1008, 1009], "hida": [1008, 1009], "shrankhla": 1008, "sonniv": [1008, 1009], "sortofamudkip": [1008, 1009], "stanislav": [1008, 1009], "modrak": [1008, 1009], "stellalin7": 1008, "vaerenbergh": [1008, 1009], "schmerler": 1008, "tabea": [1008, 1009], "kossen": [1008, 1009], "thedevpanda": 1008, "syd": 1008, "sre": 1008, "weezel": [1008, 1009], "bonald": 1008, "germer": [1008, 1009], "ion": 1008, "timofei": 1008, "kornev": 1008, "pitter": 1008, "tomiock": [1008, 1009], "mathew": 1008, "tspeng": [1008, 1009], "egashira": 1008, "rey": 1008, "puerta": 1008, "vishal": 1008, "vyom": [1008, 1009], "pathak": [1008, 1009], "wattai": 1008, "wchathura": 1008, "wen": 1008, "x110": 1008, "xuniu": 1008, "yanhong": 1008, "ef": 1008, "yusuf": [1008, 1009], "raji": [1008, 1009], "adil": 1008, "khwaja": 1008, "zeeshan": [1008, 1009], "lone": [1008, 1009], "27468": 1009, "27583": 1009, "paralel": 1009, "27573": 1009, "27580": 1009, "18488": 1009, "26814": 1009, "27044": 1009, "26913": 1009, "27167": 1009, "27243": 1009, "26602": 1009, "26521": 1009, "26748": 1009, "26600": 1009, "shreesha": [1009, 1010], "27002": 1009, "26416": 1009, "tao": [1009, 1010], "26772": 1009, "reintroduc": 1009, "26754": 1009, "26893": 1009, "senger": [1009, 1010, 1011], "26760": 1009, "26940": 1009, "26931": 1009, "26903": 1009, "roehr": [1009, 1010], "27292": 1009, "25196": 1009, "24871": 1009, "25752": 1009, "25438": 1009, "yotam": 1009, "avidar": 1009, "constantini": 1009, "26337": 1009, "25120": 1009, "27311": 1009, "25294": 1009, "25308": 1009, "25291": 1009, "25367": 1009, "25402": 1009, "25044": 1009, "smt": 1009, "26082": 1009, "24027": 1009, "25815": 1009, "24568": 1009, "26121": 1009, "25805": 1009, "26385": 1009, "26657": 1009, "binesh": [1009, 1010], "bannerje": [1009, 1010], "25251": 1009, "26503": 1009, "26286": 1009, "26323": 1009, "26033": 1009, "26108": 1009, "barth\u00e9lemi": [1009, 1010], "26433": 1009, "26386": 1009, "26551": 1009, "26579": 1009, "25784": 1009, "25490": 1009, "25956": 1009, "22409": 1009, "25177": 1009, "24882": 1009, "25186": 1009, "breve": 1009, "26318": 1009, "25506": 1009, "25601": 1009, "fidor": 1009, "25931": 1009, "25629": 1009, "26242": 1009, "toplak": 1009, "sckit": 1009, "25297": 1009, "24230": 1009, "25102": 1009, "25973": 1009, "25232": 1009, "26454": 1009, "25209": 1009, "26644": 1009, "lemo": [1009, 1010], "21809": 1009, "25732": 1009, "25190": 1009, "26207": 1009, "25587": 1009, "25697": 1009, "25214": 1009, "26653": 1009, "25531": 1009, "17388": 1009, "24769": 1009, "25713": 1009, "18723": 1009, "sahil": 1009, "24677": 1009, "24668": 1009, "dberenbaum": 1009, "25987": 1009, "26019": 1009, "25432": 1009, "25672": 1009, "lene": 1009, "preuss": 1009, "25299": 1009, "omarmanzoor": 1009, "26194": 1009, "26264": 1009, "barata": 1009, "onggo": 1009, "23099": 1009, "26021": 1009, "jiawei": [1009, 1010], "25659": 1009, "26333": 1009, "24140": 1009, "24076": 1009, "25417": 1009, "24083": 1009, "25443": 1009, "feature_union": 1009, "25093": 1009, "25220": 1009, "26325": 1009, "25334": 1009, "25677": 1009, "20524": 1009, "niuk": 1009, "23731": 1009, "24145": 1009, "22506": 1009, "24935": 1009, "seladu": 1009, "25257": 1009, "26424": 1009, "26400": 1009, "26566": 1009, "26093": 1009, "23595": 1009, "26376": 1009, "25387": 1009, "26289": 1009, "25813": 1009, "26106": 1009, "25814": 1009, "check_transformers_unfitted_stateless": 1009, "25733": 1009, "19664": 1009, "environmenterror": 1009, "ioerror": 1009, "windowserror": 1009, "26466": 1009, "kushwah": [1009, 1010], "handk": 1009, "adien": 1009, "mansouri": 1009, "alexl": [1009, 1010], "amai": 1009, "annegnx": 1009, "ansam": 1009, "zedan": 1009, "dutt": 1009, "aymericbasset": 1009, "tripramudya": 1009, "benedek": 1009, "harsanyi": 1009, "brevin": [1009, 1010], "kund": [1009, 1010], "troillard": [1009, 1010], "carla": 1009, "berenbaum": 1009, "proding": 1009, "butyugina": 1009, "elabonga": [1009, 1010], "atuo": [1009, 1010], "farhan": 1009, "hujiahong726": 1009, "ili": [1009, 1010], "jb": [1009, 1010], "mountford": [1009, 1010], "jessicakk0711": 1009, "joei": 1009, "hedlund": 1009, "linu": [1009, 1010], "fouquet": [1009, 1010], "harfouch": 1009, "mdarii": 1009, "murezzda": 1009, "nightwalkx": 1009, "nishu": 1009, "piontek": 1009, "pnucci": 1009, "sadra": 1009, "barikbin": 1009, "searchforpass": 1009, "seoeun": 1009, "th\u00e9ophil": 1009, "barang": 1009, "veghit": 1009, "vignesh": 1009, "vijeth": [1009, 1010], "moudgalya": [1009, 1010], "windiana42": 1009, "yuchen": [1009, 1010], "28188": 1010, "28256": 1010, "28195": 1010, "28191": 1010, "28235": 1010, "28262": 1010, "28240": 1010, "28247": 1010, "28121": 1010, "peterlongo": 1010, "28165": 1010, "int64dtyp": 1010, "28385": 1010, "27702": 1010, "28184": 1010, "28377": 1010, "bergman": 1010, "28241": 1010, "28263": 1010, "28295": 1010, "28327": 1010, "28222": 1010, "28233": 1010, "hopfensperg": 1010, "2024": 1010, "sooner": 1010, "26721": 1010, "27670": 1010, "27315": 1010, "26464": 1010, "26616": 1010, "cappuzzo": 1010, "Ines": 1010, "ibnukhsein": 1010, "boulard": 1010, "26648": 1010, "27538": 1010, "27308": 1010, "26789": 1010, "26896": 1010, "27058": 1010, "27005": 1010, "26525": 1010, "27490": 1010, "27500": 1010, "27478": 1010, "27389": 1010, "27104": 1010, "27250": 1010, "27179": 1010, "nurseit": 1010, "kamchyev": 1010, "27100": 1010, "virshup": 1010, "27239": 1010, "korobko": 1010, "27240": 1010, "27274": 1010, "27161": 1010, "27219": 1010, "27277": 1010, "27301": 1010, "lohit": 1010, "sundaramahalingam": 1010, "27252": 1010, "27166": 1010, "27314": 1010, "jax": 1010, "27137": 1010, "26855": 1010, "27601": 1010, "26315": 1010, "27098": 1010, "27431": 1010, "sok\u00f3\u0142": 1010, "27556": 1010, "27110": 1010, "26243": 1010, "27558": 1010, "28048": 1010, "outliermixin": 1010, "26506": 1010, "correspondingli": 1010, "26831": 1010, "26786": 1010, "26909": 1010, "27185": 1010, "27668": 1010, "nolan": 1010, "mcmahon": 1010, "depedend": 1010, "26459": 1010, "haoi": 1010, "27678": 1010, "tata": 1010, "27651": 1010, "27898": 1010, "26744": 1010, "27828": 1010, "26683": 1010, "27734": 1010, "25275": 1010, "27204": 1010, "27438": 1010, "28111": 1010, "27718": 1010, "sparrai": 1010, "spmatrix": 1010, "70x": 1010, "tarashanski": 1010, "scanpi": 1010, "18689": 1010, "26634": 1010, "landeau": 1010, "vigni": 1010, "27834": 1010, "26391": 1010, "26411": 1010, "27835": 1010, "27139": 1010, "13649": 1010, "reilli": 1010, "dealloc": 1010, "27865": 1010, "26278": 1010, "28095": 1010, "26957": 1010, "26163": 1010, "26736": 1010, "27645": 1010, "27817": 1010, "ongari": 1010, "27710": 1010, "28074": 1010, "26830": 1010, "24838": 1010, "hertel": 1010, "27721": 1010, "27841": 1010, "21807": 1010, "27291": 1010, "27675": 1010, "cant": 1010, "27417": 1010, "27899": 1010, "27979": 1010, "5x": 1010, "26765": 1010, "27006": 1010, "26366": 1010, "mojdeh": 1010, "rastgoo": 1010, "neg_root_mean_squared_log_error_scor": 1010, "26734": 1010, "27650": 1010, "27624": 1010, "27577": 1010, "26840": 1010, "26299": 1010, "27720": 1010, "27018": 1010, "26828": 1010, "23317": 1010, "26410": 1010, "26267": 1010, "27017": 1010, "xuefeng": 1010, "27760": 1010, "26944": 1010, "26674": 1010, "27309": 1010, "27328": 1010, "27801": 1010, "27821": 1010, "26862": 1010, "goh": 1010, "yisheng": 1010, "dia": 1010, "datastuctur": 1010, "27372": 1010, "may_share_memori": 1010, "27336": 1010, "check_estimators_pickl": 1010, "readonly_memmap": 1010, "misdetect": 1010, "27614": 1010, "27757": 1010, "28090": 1010, "furrer": 1010, "log_logist": 1010, "logaddexp": 1010, "27544": 1010, "101alexmartin": 1010, "adarsh": 1010, "wase": 1010, "advik": 1010, "feghali": 1010, "anam": 1010, "andyscanzio": 1010, "kislovskii": 1010, "mare": 1010, "benoit": 1010, "chevalli": 1010, "mame": 1010, "chad": 1010, "parmet": 1010, "clauss": 1010, "boyl": 1010, "cynthias13w": 1010, "damink": 1010, "schmitz": 1010, "tinoco": 1010, "brochart": 1010, "devanshkyada27": 1010, "duong": 1010, "eitan": 1010, "heme": 1010, "emma": 1010, "carbal": 1010, "ferdman": 1010, "epimorph": 1010, "erwan": 1010, "floch": 1010, "filip": 1010, "karlo": 1010, "do\u0161ilovi\u0107": 1010, "idelberg": 1010, "harmanan": 1010, "kohli": 1010, "ioangatop": 1010, "isaactrost": 1010, "iwona": 1010, "zdzieblo": 1010, "jakub": 1010, "kaczmarzyk": 1010, "nordbi": 1010, "waweru": 1010, "kishan": 1010, "ved": 1010, "pita": 1010, "koustav": 1010, "ldwy4": 1010, "silvestrin": 1010, "luk\u00e1\u0161": 1010, "folwarczn\u00fd": 1010, "geiger": 1010, "fraa\u00df": 1010, "hanu\u0161": 1010, "elliot": [1010, 1011], "larrald": 1010, "mecopur": 1010, "higgin": 1010, "miki": 1010, "watanab": 1010, "milton": 1010, "mn193": 1010, "hamdi": 1010, "naman": 1010, "dangi": 1010, "malem": 1010, "shinitski": 1010, "oleksii": 1010, "kachaiev": 1010, "hull": 1010, "fr\u00e9minvil": [1010, 1011], "puneeth": 1010, "qmarcou": 1010, "raj": 1010, "pulapakura": 1010, "raphael": 1010, "pere": 1010, "salim": 1010, "dohri": 1010, "sandip": 1010, "dutta": 1010, "qaiser": 1010, "scaja": 1010, "shubhal": 1010, "s\u00f8ren": 1010, "fugled": 1010, "tanjina": 1010, "afroj": 1010, "tharak": 1010, "hegd": 1010, "thebabush": 1010, "tialo": 1010, "tongyu": 1010, "fokow": 1010, "yuusuk": 1010, "hiramatsu": 1010, "28040": 1011, "settl": 1011, "28187": 1011, "__getitem__": 1011, "27990": 1011, "27937": 1011, "vd": 1011, "boom": 1011, "27844": 1011, "28102": 1011, "18843": 1011, "montesel": 1011, "28136": 1011, "28085": 1011, "menoci": 1011, "florin": 1011, "28053": 1011, "28051": 1011, "28210": 1011, "rerais": 1011, "28198": 1011, "28167": 1011}, "objects": {"": [[372, 0, 0, "-", "sklearn"]], "sklearn": [[372, 0, 0, "-", "base"], [372, 0, 0, "-", "calibration"], [372, 0, 0, "-", "cluster"], [372, 0, 0, "-", "compose"], [432, 4, 1, "", "config_context"], [372, 0, 0, "-", "covariance"], [372, 0, 0, "-", "cross_decomposition"], [372, 0, 0, "-", "datasets"], [372, 0, 0, "-", "decomposition"], [372, 0, 0, "-", "discriminant_analysis"], [372, 0, 0, "-", "dummy"], [372, 0, 0, "-", "ensemble"], [372, 0, 0, "-", "exceptions"], [372, 0, 0, "-", "experimental"], [372, 0, 0, "-", "feature_extraction"], [372, 0, 0, "-", "feature_selection"], [372, 0, 0, "-", "gaussian_process"], [590, 4, 1, "", "get_config"], [372, 0, 0, "-", "impute"], [372, 0, 0, "-", "inspection"], [372, 0, 0, "-", "isotonic"], [372, 0, 0, "-", "kernel_approximation"], [372, 0, 0, "-", "kernel_ridge"], [372, 0, 0, "-", "linear_model"], [372, 0, 0, "-", "manifold"], [372, 0, 0, "-", "metrics"], [372, 0, 0, "-", "mixture"], [372, 0, 0, "-", "model_selection"], [372, 0, 0, "-", "multiclass"], [372, 0, 0, "-", "multioutput"], [372, 0, 0, "-", "naive_bayes"], [372, 0, 0, "-", "neighbors"], [372, 0, 0, "-", "neural_network"], [372, 0, 0, "-", "pipeline"], [372, 0, 0, "-", "preprocessing"], [372, 0, 0, "-", "random_projection"], [372, 0, 0, "-", "semi_supervised"], [863, 4, 1, "", "set_config"], [864, 4, 1, "", "show_versions"], [372, 0, 0, "-", "svm"], [372, 0, 0, "-", "tree"], [372, 0, 0, "-", "utils"]], "sklearn.base": [[387, 1, 1, "", "BaseEstimator"], [388, 1, 1, "", "BiclusterMixin"], [389, 1, 1, "", "ClassNamePrefixFeaturesOutMixin"], [390, 1, 1, "", "ClassifierMixin"], [391, 1, 1, "", "ClusterMixin"], [392, 1, 1, "", "DensityMixin"], [393, 1, 1, "", "MetaEstimatorMixin"], [394, 1, 1, "", "OneToOneFeatureMixin"], [395, 1, 1, "", "OutlierMixin"], [396, 1, 1, "", "RegressorMixin"], [397, 1, 1, "", "TransformerMixin"], [398, 4, 1, "", "clone"], [399, 4, 1, "", "is_classifier"], [400, 4, 1, "", "is_regressor"]], "sklearn.base.BaseEstimator": [[387, 2, 1, "", "get_metadata_routing"], [387, 2, 1, "", "get_params"], [387, 2, 1, "", "set_params"]], "sklearn.base.BiclusterMixin": [[388, 3, 1, "", "biclusters_"], [388, 2, 1, "", "get_indices"], [388, 2, 1, "", "get_shape"], [388, 2, 1, "", "get_submatrix"]], "sklearn.base.ClassNamePrefixFeaturesOutMixin": [[389, 2, 1, "", "get_feature_names_out"]], "sklearn.base.ClassifierMixin": [[390, 2, 1, "", "score"]], "sklearn.base.ClusterMixin": [[391, 2, 1, "", "fit_predict"]], "sklearn.base.DensityMixin": [[392, 2, 1, "", "score"]], "sklearn.base.OneToOneFeatureMixin": [[394, 2, 1, "", "get_feature_names_out"]], "sklearn.base.OutlierMixin": [[395, 2, 1, "", "fit_predict"]], "sklearn.base.RegressorMixin": [[396, 2, 1, "", "score"]], "sklearn.base.TransformerMixin": [[397, 2, 1, "", "fit_transform"], [397, 2, 1, "", "set_output"]], "sklearn.calibration": [[401, 1, 1, "", "CalibratedClassifierCV"], [402, 1, 1, "", "CalibrationDisplay"], [403, 4, 1, "", "calibration_curve"]], "sklearn.calibration.CalibratedClassifierCV": [[401, 2, 1, "", "fit"], [401, 2, 1, "", "get_metadata_routing"], [401, 2, 1, "", "get_params"], [401, 2, 1, "", "predict"], [401, 2, 1, "", "predict_proba"], [401, 2, 1, "", "score"], [401, 2, 1, "", "set_fit_request"], [401, 2, 1, "", "set_params"], [401, 2, 1, "", "set_score_request"]], "sklearn.calibration.CalibrationDisplay": [[402, 2, 1, "", "from_estimator"], [402, 2, 1, "", "from_predictions"], [402, 2, 1, "", "plot"]], "sklearn.cluster": [[404, 1, 1, "", "AffinityPropagation"], [405, 1, 1, "", "AgglomerativeClustering"], [406, 1, 1, "", "Birch"], [407, 1, 1, "", "BisectingKMeans"], [408, 1, 1, "", "DBSCAN"], [409, 1, 1, "", "FeatureAgglomeration"], [410, 1, 1, "", "HDBSCAN"], [411, 1, 1, "", "KMeans"], [412, 1, 1, "", "MeanShift"], [413, 1, 1, "", "MiniBatchKMeans"], [414, 1, 1, "", "OPTICS"], [415, 1, 1, "", "SpectralBiclustering"], [416, 1, 1, "", "SpectralClustering"], [417, 1, 1, "", "SpectralCoclustering"], [418, 4, 1, "", "affinity_propagation"], [419, 4, 1, "", "cluster_optics_dbscan"], [420, 4, 1, "", "cluster_optics_xi"], [421, 4, 1, "", "compute_optics_graph"], [384, 4, 1, "", "dbscan"], [422, 4, 1, "", "estimate_bandwidth"], [423, 4, 1, "", "k_means"], [424, 4, 1, "", "kmeans_plusplus"], [425, 4, 1, "", "mean_shift"], [426, 4, 1, "", "spectral_clustering"], [427, 4, 1, "", "ward_tree"]], "sklearn.cluster.AffinityPropagation": [[404, 2, 1, "", "fit"], [404, 2, 1, "", "fit_predict"], [404, 2, 1, "", "get_metadata_routing"], [404, 2, 1, "", "get_params"], [404, 2, 1, "", "predict"], [404, 2, 1, "", "set_params"]], "sklearn.cluster.AgglomerativeClustering": [[405, 2, 1, "", "fit"], [405, 2, 1, "", "fit_predict"], [405, 2, 1, "", "get_metadata_routing"], [405, 2, 1, "", "get_params"], [405, 2, 1, "", "set_params"]], "sklearn.cluster.Birch": [[406, 2, 1, "", "fit"], [406, 2, 1, "", "fit_predict"], [406, 2, 1, "", "fit_transform"], [406, 2, 1, "", "get_feature_names_out"], [406, 2, 1, "", "get_metadata_routing"], [406, 2, 1, "", "get_params"], [406, 2, 1, "", "partial_fit"], [406, 2, 1, "", "predict"], [406, 2, 1, "", "set_output"], [406, 2, 1, "", "set_params"], [406, 2, 1, "", "transform"]], "sklearn.cluster.BisectingKMeans": [[407, 2, 1, "", "fit"], [407, 2, 1, "", "fit_predict"], [407, 2, 1, "", "fit_transform"], [407, 2, 1, "", "get_feature_names_out"], [407, 2, 1, "", "get_metadata_routing"], [407, 2, 1, "", "get_params"], [407, 2, 1, "", "predict"], [407, 2, 1, "", "score"], [407, 2, 1, "", "set_fit_request"], [407, 2, 1, "", "set_output"], [407, 2, 1, "", "set_params"], [407, 2, 1, "", "set_predict_request"], [407, 2, 1, "", "set_score_request"], [407, 2, 1, "", "transform"]], "sklearn.cluster.DBSCAN": [[408, 2, 1, "", "fit"], [408, 2, 1, "", "fit_predict"], [408, 2, 1, "", "get_metadata_routing"], [408, 2, 1, "", "get_params"], [408, 2, 1, "", "set_fit_request"], [408, 2, 1, "", "set_params"]], "sklearn.cluster.FeatureAgglomeration": [[409, 2, 1, "", "fit"], [409, 3, 1, "", "fit_predict"], [409, 2, 1, "", "fit_transform"], [409, 2, 1, "", "get_feature_names_out"], [409, 2, 1, "", "get_metadata_routing"], [409, 2, 1, "", "get_params"], [409, 2, 1, "", "inverse_transform"], [409, 2, 1, "", "set_output"], [409, 2, 1, "", "set_params"], [409, 2, 1, "", "transform"]], "sklearn.cluster.HDBSCAN": [[410, 2, 1, "", "dbscan_clustering"], [410, 2, 1, "", "fit"], [410, 2, 1, "", "fit_predict"], [410, 2, 1, "", "get_metadata_routing"], [410, 2, 1, "", "get_params"], [410, 2, 1, "", "set_params"]], "sklearn.cluster.KMeans": [[411, 2, 1, "", "fit"], [411, 2, 1, "", "fit_predict"], [411, 2, 1, "", "fit_transform"], [411, 2, 1, "", "get_feature_names_out"], [411, 2, 1, "", "get_metadata_routing"], [411, 2, 1, "", "get_params"], [411, 2, 1, "", "predict"], [411, 2, 1, "", "score"], [411, 2, 1, "", "set_fit_request"], [411, 2, 1, "", "set_output"], [411, 2, 1, "", "set_params"], [411, 2, 1, "", "set_predict_request"], [411, 2, 1, "", "set_score_request"], [411, 2, 1, "", "transform"]], "sklearn.cluster.MeanShift": [[412, 2, 1, "", "fit"], [412, 2, 1, "", "fit_predict"], [412, 2, 1, "", "get_metadata_routing"], [412, 2, 1, "", "get_params"], [412, 2, 1, "", "predict"], [412, 2, 1, "", "set_params"]], "sklearn.cluster.MiniBatchKMeans": [[413, 2, 1, "", "fit"], [413, 2, 1, "", "fit_predict"], [413, 2, 1, "", "fit_transform"], [413, 2, 1, "", "get_feature_names_out"], [413, 2, 1, "", "get_metadata_routing"], [413, 2, 1, "", "get_params"], [413, 2, 1, "", "partial_fit"], [413, 2, 1, "", "predict"], [413, 2, 1, "", "score"], [413, 2, 1, "", "set_fit_request"], [413, 2, 1, "", "set_output"], [413, 2, 1, "", "set_params"], [413, 2, 1, "", "set_partial_fit_request"], [413, 2, 1, "", "set_predict_request"], [413, 2, 1, "", "set_score_request"], [413, 2, 1, "", "transform"]], "sklearn.cluster.OPTICS": [[414, 2, 1, "", "fit"], [414, 2, 1, "", "fit_predict"], [414, 2, 1, "", "get_metadata_routing"], [414, 2, 1, "", "get_params"], [414, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralBiclustering": [[415, 3, 1, "", "biclusters_"], [415, 2, 1, "", "fit"], [415, 2, 1, "", "get_indices"], [415, 2, 1, "", "get_metadata_routing"], [415, 2, 1, "", "get_params"], [415, 2, 1, "", "get_shape"], [415, 2, 1, "", "get_submatrix"], [415, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralClustering": [[416, 2, 1, "", "fit"], [416, 2, 1, "", "fit_predict"], [416, 2, 1, "", "get_metadata_routing"], [416, 2, 1, "", "get_params"], [416, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralCoclustering": [[417, 3, 1, "", "biclusters_"], [417, 2, 1, "", "fit"], [417, 2, 1, "", "get_indices"], [417, 2, 1, "", "get_metadata_routing"], [417, 2, 1, "", "get_params"], [417, 2, 1, "", "get_shape"], [417, 2, 1, "", "get_submatrix"], [417, 2, 1, "", "set_params"]], "sklearn.compose": [[428, 1, 1, "", "ColumnTransformer"], [429, 1, 1, "", "TransformedTargetRegressor"], [430, 4, 1, "", "make_column_selector"], [431, 4, 1, "", "make_column_transformer"]], "sklearn.compose.ColumnTransformer": [[428, 2, 1, "", "fit"], [428, 2, 1, "", "fit_transform"], [428, 2, 1, "", "get_feature_names_out"], [428, 2, 1, "", "get_metadata_routing"], [428, 2, 1, "", "get_params"], [428, 3, 1, "", "named_transformers_"], [428, 2, 1, "", "set_output"], [428, 2, 1, "", "set_params"], [428, 2, 1, "", "transform"]], "sklearn.compose.TransformedTargetRegressor": [[429, 2, 1, "", "fit"], [429, 2, 1, "", "get_metadata_routing"], [429, 2, 1, "", "get_params"], [429, 3, 1, "", "n_features_in_"], [429, 2, 1, "", "predict"], [429, 2, 1, "", "score"], [429, 2, 1, "", "set_params"], [429, 2, 1, "", "set_score_request"]], "sklearn.covariance": [[433, 1, 1, "", "EllipticEnvelope"], [434, 1, 1, "", "EmpiricalCovariance"], [435, 1, 1, "", "GraphicalLasso"], [436, 1, 1, "", "GraphicalLassoCV"], [437, 1, 1, "", "LedoitWolf"], [438, 1, 1, "", "MinCovDet"], [439, 1, 1, "", "OAS"], [440, 1, 1, "", "ShrunkCovariance"], [441, 4, 1, "", "empirical_covariance"], [442, 4, 1, "", "graphical_lasso"], [443, 4, 1, "", "ledoit_wolf"], [444, 4, 1, "", "ledoit_wolf_shrinkage"], [386, 4, 1, "", "oas"], [445, 4, 1, "", "shrunk_covariance"]], "sklearn.covariance.EllipticEnvelope": [[433, 2, 1, "", "correct_covariance"], [433, 2, 1, "", "decision_function"], [433, 2, 1, "", "error_norm"], [433, 2, 1, "", "fit"], [433, 2, 1, "", "fit_predict"], [433, 2, 1, "", "get_metadata_routing"], [433, 2, 1, "", "get_params"], [433, 2, 1, "", "get_precision"], [433, 2, 1, "", "mahalanobis"], [433, 2, 1, "", "predict"], [433, 2, 1, "", "reweight_covariance"], [433, 2, 1, "", "score"], [433, 2, 1, "", "score_samples"], [433, 2, 1, "", "set_params"], [433, 2, 1, "", "set_score_request"]], "sklearn.covariance.EmpiricalCovariance": [[434, 2, 1, "", "error_norm"], [434, 2, 1, "", "fit"], [434, 2, 1, "", "get_metadata_routing"], [434, 2, 1, "", "get_params"], [434, 2, 1, "", "get_precision"], [434, 2, 1, "", "mahalanobis"], [434, 2, 1, "", "score"], [434, 2, 1, "", "set_params"], [434, 2, 1, "", "set_score_request"]], "sklearn.covariance.GraphicalLasso": [[435, 2, 1, "", "error_norm"], [435, 2, 1, "", "fit"], [435, 2, 1, "", "get_metadata_routing"], [435, 2, 1, "", "get_params"], [435, 2, 1, "", "get_precision"], [435, 2, 1, "", "mahalanobis"], [435, 2, 1, "", "score"], [435, 2, 1, "", "set_params"], [435, 2, 1, "", "set_score_request"]], "sklearn.covariance.GraphicalLassoCV": [[436, 2, 1, "", "error_norm"], [436, 2, 1, "", "fit"], [436, 2, 1, "", "get_metadata_routing"], [436, 2, 1, "", "get_params"], [436, 2, 1, "", "get_precision"], [436, 2, 1, "", "mahalanobis"], [436, 2, 1, "", "score"], [436, 2, 1, "", "set_params"], [436, 2, 1, "", "set_score_request"]], "sklearn.covariance.LedoitWolf": [[437, 2, 1, "", "error_norm"], [437, 2, 1, "", "fit"], [437, 2, 1, "", "get_metadata_routing"], [437, 2, 1, "", "get_params"], [437, 2, 1, "", "get_precision"], [437, 2, 1, "", "mahalanobis"], [437, 2, 1, "", "score"], [437, 2, 1, "", "set_params"], [437, 2, 1, "", "set_score_request"]], "sklearn.covariance.MinCovDet": [[438, 2, 1, "", "correct_covariance"], [438, 2, 1, "", "error_norm"], [438, 2, 1, "", "fit"], [438, 2, 1, "", "get_metadata_routing"], [438, 2, 1, "", "get_params"], [438, 2, 1, "", "get_precision"], [438, 2, 1, "", "mahalanobis"], [438, 2, 1, "", "reweight_covariance"], [438, 2, 1, "", "score"], [438, 2, 1, "", "set_params"], [438, 2, 1, "", "set_score_request"]], "sklearn.covariance.OAS": [[439, 2, 1, "", "error_norm"], [439, 2, 1, "", "fit"], [439, 2, 1, "", "get_metadata_routing"], [439, 2, 1, "", "get_params"], [439, 2, 1, "", "get_precision"], [439, 2, 1, "", "mahalanobis"], [439, 2, 1, "", "score"], [439, 2, 1, "", "set_params"], [439, 2, 1, "", "set_score_request"]], "sklearn.covariance.ShrunkCovariance": [[440, 2, 1, "", "error_norm"], [440, 2, 1, "", "fit"], [440, 2, 1, "", "get_metadata_routing"], [440, 2, 1, "", "get_params"], [440, 2, 1, "", "get_precision"], [440, 2, 1, "", "mahalanobis"], [440, 2, 1, "", "score"], [440, 2, 1, "", "set_params"], [440, 2, 1, "", "set_score_request"]], "sklearn.cross_decomposition": [[446, 1, 1, "", "CCA"], [447, 1, 1, "", "PLSCanonical"], [448, 1, 1, "", "PLSRegression"], [449, 1, 1, "", "PLSSVD"]], "sklearn.cross_decomposition.CCA": [[446, 2, 1, "", "fit"], [446, 2, 1, "", "fit_transform"], [446, 2, 1, "", "get_feature_names_out"], [446, 2, 1, "", "get_metadata_routing"], [446, 2, 1, "", "get_params"], [446, 2, 1, "", "inverse_transform"], [446, 2, 1, "", "predict"], [446, 2, 1, "", "score"], [446, 2, 1, "", "set_output"], [446, 2, 1, "", "set_params"], [446, 2, 1, "", "set_predict_request"], [446, 2, 1, "", "set_score_request"], [446, 2, 1, "", "set_transform_request"], [446, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSCanonical": [[447, 2, 1, "", "fit"], [447, 2, 1, "", "fit_transform"], [447, 2, 1, "", "get_feature_names_out"], [447, 2, 1, "", "get_metadata_routing"], [447, 2, 1, "", "get_params"], [447, 2, 1, "", "inverse_transform"], [447, 2, 1, "", "predict"], [447, 2, 1, "", "score"], [447, 2, 1, "", "set_output"], [447, 2, 1, "", "set_params"], [447, 2, 1, "", "set_predict_request"], [447, 2, 1, "", "set_score_request"], [447, 2, 1, "", "set_transform_request"], [447, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSRegression": [[448, 2, 1, "", "fit"], [448, 2, 1, "", "fit_transform"], [448, 2, 1, "", "get_feature_names_out"], [448, 2, 1, "", "get_metadata_routing"], [448, 2, 1, "", "get_params"], [448, 2, 1, "", "inverse_transform"], [448, 2, 1, "", "predict"], [448, 2, 1, "", "score"], [448, 2, 1, "", "set_output"], [448, 2, 1, "", "set_params"], [448, 2, 1, "", "set_predict_request"], [448, 2, 1, "", "set_score_request"], [448, 2, 1, "", "set_transform_request"], [448, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSSVD": [[449, 2, 1, "", "fit"], [449, 2, 1, "", "fit_transform"], [449, 2, 1, "", "get_feature_names_out"], [449, 2, 1, "", "get_metadata_routing"], [449, 2, 1, "", "get_params"], [449, 2, 1, "", "set_output"], [449, 2, 1, "", "set_params"], [449, 2, 1, "", "transform"]], "sklearn.datasets": [[450, 4, 1, "", "clear_data_home"], [451, 4, 1, "", "dump_svmlight_file"], [452, 4, 1, "", "fetch_20newsgroups"], [453, 4, 1, "", "fetch_20newsgroups_vectorized"], [454, 4, 1, "", "fetch_california_housing"], [455, 4, 1, "", "fetch_covtype"], [456, 4, 1, "", "fetch_kddcup99"], [457, 4, 1, "", "fetch_lfw_pairs"], [458, 4, 1, "", "fetch_lfw_people"], [459, 4, 1, "", "fetch_olivetti_faces"], [460, 4, 1, "", "fetch_openml"], [461, 4, 1, "", "fetch_rcv1"], [462, 4, 1, "", "fetch_species_distributions"], [463, 4, 1, "", "get_data_home"], [464, 4, 1, "", "load_breast_cancer"], [465, 4, 1, "", "load_diabetes"], [466, 4, 1, "", "load_digits"], [467, 4, 1, "", "load_files"], [468, 4, 1, "", "load_iris"], [469, 4, 1, "", "load_linnerud"], [470, 4, 1, "", "load_sample_image"], [471, 4, 1, "", "load_sample_images"], [472, 4, 1, "", "load_svmlight_file"], [473, 4, 1, "", "load_svmlight_files"], [474, 4, 1, "", "load_wine"], [475, 4, 1, "", "make_biclusters"], [476, 4, 1, "", "make_blobs"], [477, 4, 1, "", "make_checkerboard"], [478, 4, 1, "", "make_circles"], [479, 4, 1, "", "make_classification"], [480, 4, 1, "", "make_friedman1"], [481, 4, 1, "", "make_friedman2"], [482, 4, 1, "", "make_friedman3"], [483, 4, 1, "", "make_gaussian_quantiles"], [484, 4, 1, "", "make_hastie_10_2"], [485, 4, 1, "", "make_low_rank_matrix"], [486, 4, 1, "", "make_moons"], [487, 4, 1, "", "make_multilabel_classification"], [488, 4, 1, "", "make_regression"], [489, 4, 1, "", "make_s_curve"], [490, 4, 1, "", "make_sparse_coded_signal"], [491, 4, 1, "", "make_sparse_spd_matrix"], [492, 4, 1, "", "make_sparse_uncorrelated"], [493, 4, 1, "", "make_spd_matrix"], [494, 4, 1, "", "make_swiss_roll"]], "sklearn.decomposition": [[495, 1, 1, "", "DictionaryLearning"], [496, 1, 1, "", "FactorAnalysis"], [497, 1, 1, "", "FastICA"], [498, 1, 1, "", "IncrementalPCA"], [499, 1, 1, "", "KernelPCA"], [500, 1, 1, "", "LatentDirichletAllocation"], [501, 1, 1, "", "MiniBatchDictionaryLearning"], [502, 1, 1, "", "MiniBatchNMF"], [503, 1, 1, "", "MiniBatchSparsePCA"], [504, 1, 1, "", "NMF"], [505, 1, 1, "", "PCA"], [506, 1, 1, "", "SparseCoder"], [507, 1, 1, "", "SparsePCA"], [508, 1, 1, "", "TruncatedSVD"], [509, 4, 1, "", "dict_learning"], [510, 4, 1, "", "dict_learning_online"], [385, 4, 1, "", "fastica"], [511, 4, 1, "", "non_negative_factorization"], [512, 4, 1, "", "sparse_encode"]], "sklearn.decomposition.DictionaryLearning": [[495, 2, 1, "", "fit"], [495, 2, 1, "", "fit_transform"], [495, 2, 1, "", "get_feature_names_out"], [495, 2, 1, "", "get_metadata_routing"], [495, 2, 1, "", "get_params"], [495, 2, 1, "", "set_output"], [495, 2, 1, "", "set_params"], [495, 2, 1, "", "transform"]], "sklearn.decomposition.FactorAnalysis": [[496, 2, 1, "", "fit"], [496, 2, 1, "", "fit_transform"], [496, 2, 1, "", "get_covariance"], [496, 2, 1, "", "get_feature_names_out"], [496, 2, 1, "", "get_metadata_routing"], [496, 2, 1, "", "get_params"], [496, 2, 1, "", "get_precision"], [496, 2, 1, "", "score"], [496, 2, 1, "", "score_samples"], [496, 2, 1, "", "set_output"], [496, 2, 1, "", "set_params"], [496, 2, 1, "", "transform"]], "sklearn.decomposition.FastICA": [[497, 2, 1, "", "fit"], [497, 2, 1, "", "fit_transform"], [497, 2, 1, "", "get_feature_names_out"], [497, 2, 1, "", "get_metadata_routing"], [497, 2, 1, "", "get_params"], [497, 2, 1, "", "inverse_transform"], [497, 2, 1, "", "set_inverse_transform_request"], [497, 2, 1, "", "set_output"], [497, 2, 1, "", "set_params"], [497, 2, 1, "", "set_transform_request"], [497, 2, 1, "", "transform"]], "sklearn.decomposition.IncrementalPCA": [[498, 2, 1, "", "fit"], [498, 2, 1, "", "fit_transform"], [498, 2, 1, "", "get_covariance"], [498, 2, 1, "", "get_feature_names_out"], [498, 2, 1, "", "get_metadata_routing"], [498, 2, 1, "", "get_params"], [498, 2, 1, "", "get_precision"], [498, 2, 1, "", "inverse_transform"], [498, 2, 1, "", "partial_fit"], [498, 2, 1, "", "set_output"], [498, 2, 1, "", "set_params"], [498, 2, 1, "", "set_partial_fit_request"], [498, 2, 1, "", "transform"]], "sklearn.decomposition.KernelPCA": [[499, 2, 1, "", "fit"], [499, 2, 1, "", "fit_transform"], [499, 2, 1, "", "get_feature_names_out"], [499, 2, 1, "", "get_metadata_routing"], [499, 2, 1, "", "get_params"], [499, 2, 1, "", "inverse_transform"], [499, 2, 1, "", "set_output"], [499, 2, 1, "", "set_params"], [499, 2, 1, "", "transform"]], "sklearn.decomposition.LatentDirichletAllocation": [[500, 2, 1, "", "fit"], [500, 2, 1, "", "fit_transform"], [500, 2, 1, "", "get_feature_names_out"], [500, 2, 1, "", "get_metadata_routing"], [500, 2, 1, "", "get_params"], [500, 2, 1, "", "partial_fit"], [500, 2, 1, "", "perplexity"], [500, 2, 1, "", "score"], [500, 2, 1, "", "set_output"], [500, 2, 1, "", "set_params"], [500, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchDictionaryLearning": [[501, 2, 1, "", "fit"], [501, 2, 1, "", "fit_transform"], [501, 2, 1, "", "get_feature_names_out"], [501, 2, 1, "", "get_metadata_routing"], [501, 2, 1, "", "get_params"], [501, 2, 1, "", "partial_fit"], [501, 2, 1, "", "set_output"], [501, 2, 1, "", "set_params"], [501, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchNMF": [[502, 2, 1, "", "fit"], [502, 2, 1, "", "fit_transform"], [502, 2, 1, "", "get_feature_names_out"], [502, 2, 1, "", "get_metadata_routing"], [502, 2, 1, "", "get_params"], [502, 2, 1, "", "inverse_transform"], [502, 2, 1, "", "partial_fit"], [502, 2, 1, "", "set_output"], [502, 2, 1, "", "set_params"], [502, 2, 1, "", "set_partial_fit_request"], [502, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchSparsePCA": [[503, 2, 1, "", "fit"], [503, 2, 1, "", "fit_transform"], [503, 2, 1, "", "get_feature_names_out"], [503, 2, 1, "", "get_metadata_routing"], [503, 2, 1, "", "get_params"], [503, 2, 1, "", "inverse_transform"], [503, 2, 1, "", "set_output"], [503, 2, 1, "", "set_params"], [503, 2, 1, "", "transform"]], "sklearn.decomposition.NMF": [[504, 2, 1, "", "fit"], [504, 2, 1, "", "fit_transform"], [504, 2, 1, "", "get_feature_names_out"], [504, 2, 1, "", "get_metadata_routing"], [504, 2, 1, "", "get_params"], [504, 2, 1, "", "inverse_transform"], [504, 2, 1, "", "set_output"], [504, 2, 1, "", "set_params"], [504, 2, 1, "", "transform"]], "sklearn.decomposition.PCA": [[505, 2, 1, "", "fit"], [505, 2, 1, "", "fit_transform"], [505, 2, 1, "", "get_covariance"], [505, 2, 1, "", "get_feature_names_out"], [505, 2, 1, "", "get_metadata_routing"], [505, 2, 1, "", "get_params"], [505, 2, 1, "", "get_precision"], [505, 2, 1, "", "inverse_transform"], [505, 2, 1, "", "score"], [505, 2, 1, "", "score_samples"], [505, 2, 1, "", "set_output"], [505, 2, 1, "", "set_params"], [505, 2, 1, "", "transform"]], "sklearn.decomposition.SparseCoder": [[506, 2, 1, "", "fit"], [506, 2, 1, "", "fit_transform"], [506, 2, 1, "", "get_feature_names_out"], [506, 2, 1, "", "get_metadata_routing"], [506, 2, 1, "", "get_params"], [506, 3, 1, "", "n_components_"], [506, 3, 1, "", "n_features_in_"], [506, 2, 1, "", "set_output"], [506, 2, 1, "", "set_params"], [506, 2, 1, "", "transform"]], "sklearn.decomposition.SparsePCA": [[507, 2, 1, "", "fit"], [507, 2, 1, "", "fit_transform"], [507, 2, 1, "", "get_feature_names_out"], [507, 2, 1, "", "get_metadata_routing"], [507, 2, 1, "", "get_params"], [507, 2, 1, "", "inverse_transform"], [507, 2, 1, "", "set_output"], [507, 2, 1, "", "set_params"], [507, 2, 1, "", "transform"]], "sklearn.decomposition.TruncatedSVD": [[508, 2, 1, "", "fit"], [508, 2, 1, "", "fit_transform"], [508, 2, 1, "", "get_feature_names_out"], [508, 2, 1, "", "get_metadata_routing"], [508, 2, 1, "", "get_params"], [508, 2, 1, "", "inverse_transform"], [508, 2, 1, "", "set_output"], [508, 2, 1, "", "set_params"], [508, 2, 1, "", "transform"]], "sklearn.discriminant_analysis": [[513, 1, 1, "", "LinearDiscriminantAnalysis"], [514, 1, 1, "", "QuadraticDiscriminantAnalysis"]], "sklearn.discriminant_analysis.LinearDiscriminantAnalysis": [[513, 2, 1, "", "decision_function"], [513, 2, 1, "", "fit"], [513, 2, 1, "", "fit_transform"], [513, 2, 1, "", "get_feature_names_out"], [513, 2, 1, "", "get_metadata_routing"], [513, 2, 1, "", "get_params"], [513, 2, 1, "", "predict"], [513, 2, 1, "", "predict_log_proba"], [513, 2, 1, "", "predict_proba"], [513, 2, 1, "", "score"], [513, 2, 1, "", "set_output"], [513, 2, 1, "", "set_params"], [513, 2, 1, "", "set_score_request"], [513, 2, 1, "", "transform"]], "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis": [[514, 2, 1, "", "decision_function"], [514, 2, 1, "", "fit"], [514, 2, 1, "", "get_metadata_routing"], [514, 2, 1, "", "get_params"], [514, 2, 1, "", "predict"], [514, 2, 1, "", "predict_log_proba"], [514, 2, 1, "", "predict_proba"], [514, 2, 1, "", "score"], [514, 2, 1, "", "set_params"], [514, 2, 1, "", "set_score_request"]], "sklearn.dummy": [[515, 1, 1, "", "DummyClassifier"], [516, 1, 1, "", "DummyRegressor"]], "sklearn.dummy.DummyClassifier": [[515, 2, 1, "", "fit"], [515, 2, 1, "", "get_metadata_routing"], [515, 2, 1, "", "get_params"], [515, 2, 1, "", "predict"], [515, 2, 1, "", "predict_log_proba"], [515, 2, 1, "", "predict_proba"], [515, 2, 1, "", "score"], [515, 2, 1, "", "set_fit_request"], [515, 2, 1, "", "set_params"], [515, 2, 1, "", "set_score_request"]], "sklearn.dummy.DummyRegressor": [[516, 2, 1, "", "fit"], [516, 2, 1, "", "get_metadata_routing"], [516, 2, 1, "", "get_params"], [516, 2, 1, "", "predict"], [516, 2, 1, "", "score"], [516, 2, 1, "", "set_fit_request"], [516, 2, 1, "", "set_params"], [516, 2, 1, "", "set_predict_request"], [516, 2, 1, "", "set_score_request"]], "sklearn.ensemble": [[517, 1, 1, "", "AdaBoostClassifier"], [518, 1, 1, "", "AdaBoostRegressor"], [519, 1, 1, "", "BaggingClassifier"], [520, 1, 1, "", "BaggingRegressor"], [521, 1, 1, "", "ExtraTreesClassifier"], [522, 1, 1, "", "ExtraTreesRegressor"], [523, 1, 1, "", "GradientBoostingClassifier"], [524, 1, 1, "", "GradientBoostingRegressor"], [525, 1, 1, "", "HistGradientBoostingClassifier"], [526, 1, 1, "", "HistGradientBoostingRegressor"], [527, 1, 1, "", "IsolationForest"], [528, 1, 1, "", "RandomForestClassifier"], [529, 1, 1, "", "RandomForestRegressor"], [530, 1, 1, "", "RandomTreesEmbedding"], [531, 1, 1, "", "StackingClassifier"], [532, 1, 1, "", "StackingRegressor"], [533, 1, 1, "", "VotingClassifier"], [534, 1, 1, "", "VotingRegressor"]], "sklearn.ensemble.AdaBoostClassifier": [[517, 2, 1, "", "decision_function"], [517, 3, 1, "", "feature_importances_"], [517, 2, 1, "", "fit"], [517, 2, 1, "", "get_metadata_routing"], [517, 2, 1, "", "get_params"], [517, 2, 1, "", "predict"], [517, 2, 1, "", "predict_log_proba"], [517, 2, 1, "", "predict_proba"], [517, 2, 1, "", "score"], [517, 2, 1, "", "set_fit_request"], [517, 2, 1, "", "set_params"], [517, 2, 1, "", "set_score_request"], [517, 2, 1, "", "staged_decision_function"], [517, 2, 1, "", "staged_predict"], [517, 2, 1, "", "staged_predict_proba"], [517, 2, 1, "", "staged_score"]], "sklearn.ensemble.AdaBoostRegressor": [[518, 3, 1, "", "feature_importances_"], [518, 2, 1, "", "fit"], [518, 2, 1, "", "get_metadata_routing"], [518, 2, 1, "", "get_params"], [518, 2, 1, "", "predict"], [518, 2, 1, "", "score"], [518, 2, 1, "", "set_fit_request"], [518, 2, 1, "", "set_params"], [518, 2, 1, "", "set_score_request"], [518, 2, 1, "", "staged_predict"], [518, 2, 1, "", "staged_score"]], "sklearn.ensemble.BaggingClassifier": [[519, 2, 1, "", "decision_function"], [519, 3, 1, "", "estimators_samples_"], [519, 2, 1, "", "fit"], [519, 2, 1, "", "get_metadata_routing"], [519, 2, 1, "", "get_params"], [519, 2, 1, "", "predict"], [519, 2, 1, "", "predict_log_proba"], [519, 2, 1, "", "predict_proba"], [519, 2, 1, "", "score"], [519, 2, 1, "", "set_fit_request"], [519, 2, 1, "", "set_params"], [519, 2, 1, "", "set_score_request"]], "sklearn.ensemble.BaggingRegressor": [[520, 3, 1, "", "estimators_samples_"], [520, 2, 1, "", "fit"], [520, 2, 1, "", "get_metadata_routing"], [520, 2, 1, "", "get_params"], [520, 2, 1, "", "predict"], [520, 2, 1, "", "score"], [520, 2, 1, "", "set_fit_request"], [520, 2, 1, "", "set_params"], [520, 2, 1, "", "set_score_request"]], "sklearn.ensemble.ExtraTreesClassifier": [[521, 2, 1, "", "apply"], [521, 2, 1, "", "decision_path"], [521, 3, 1, "", "estimators_samples_"], [521, 3, 1, "", "feature_importances_"], [521, 2, 1, "", "fit"], [521, 2, 1, "", "get_metadata_routing"], [521, 2, 1, "", "get_params"], [521, 2, 1, "", "predict"], [521, 2, 1, "", "predict_log_proba"], [521, 2, 1, "", "predict_proba"], [521, 2, 1, "", "score"], [521, 2, 1, "", "set_fit_request"], [521, 2, 1, "", "set_params"], [521, 2, 1, "", "set_score_request"]], "sklearn.ensemble.ExtraTreesRegressor": [[522, 2, 1, "", "apply"], [522, 2, 1, "", "decision_path"], [522, 3, 1, "", "estimators_samples_"], [522, 3, 1, "", "feature_importances_"], [522, 2, 1, "", "fit"], [522, 2, 1, "", "get_metadata_routing"], [522, 2, 1, "", "get_params"], [522, 2, 1, "", "predict"], [522, 2, 1, "", "score"], [522, 2, 1, "", "set_fit_request"], [522, 2, 1, "", "set_params"], [522, 2, 1, "", "set_score_request"]], "sklearn.ensemble.GradientBoostingClassifier": [[523, 2, 1, "", "apply"], [523, 2, 1, "", "decision_function"], [523, 3, 1, "", "feature_importances_"], [523, 2, 1, "", "fit"], [523, 2, 1, "", "get_metadata_routing"], [523, 2, 1, "", "get_params"], [523, 2, 1, "", "predict"], [523, 2, 1, "", "predict_log_proba"], [523, 2, 1, "", "predict_proba"], [523, 2, 1, "", "score"], [523, 2, 1, "", "set_fit_request"], [523, 2, 1, "", "set_params"], [523, 2, 1, "", "set_score_request"], [523, 2, 1, "", "staged_decision_function"], [523, 2, 1, "", "staged_predict"], [523, 2, 1, "", "staged_predict_proba"]], "sklearn.ensemble.GradientBoostingRegressor": [[524, 2, 1, "", "apply"], [524, 3, 1, "", "feature_importances_"], [524, 2, 1, "", "fit"], [524, 2, 1, "", "get_metadata_routing"], [524, 2, 1, "", "get_params"], [524, 2, 1, "", "predict"], [524, 2, 1, "", "score"], [524, 2, 1, "", "set_fit_request"], [524, 2, 1, "", "set_params"], [524, 2, 1, "", "set_score_request"], [524, 2, 1, "", "staged_predict"]], "sklearn.ensemble.HistGradientBoostingClassifier": [[525, 2, 1, "", "decision_function"], [525, 2, 1, "", "fit"], [525, 2, 1, "", "get_metadata_routing"], [525, 2, 1, "", "get_params"], [525, 3, 1, "", "n_iter_"], [525, 2, 1, "", "predict"], [525, 2, 1, "", "predict_proba"], [525, 2, 1, "", "score"], [525, 2, 1, "", "set_fit_request"], [525, 2, 1, "", "set_params"], [525, 2, 1, "", "set_score_request"], [525, 2, 1, "", "staged_decision_function"], [525, 2, 1, "", "staged_predict"], [525, 2, 1, "", "staged_predict_proba"]], "sklearn.ensemble.HistGradientBoostingRegressor": [[526, 2, 1, "", "fit"], [526, 2, 1, "", "get_metadata_routing"], [526, 2, 1, "", "get_params"], [526, 3, 1, "", "n_iter_"], [526, 2, 1, "", "predict"], [526, 2, 1, "", "score"], [526, 2, 1, "", "set_fit_request"], [526, 2, 1, "", "set_params"], [526, 2, 1, "", "set_score_request"], [526, 2, 1, "", "staged_predict"]], "sklearn.ensemble.IsolationForest": [[527, 2, 1, "", "decision_function"], [527, 3, 1, "", "estimators_samples_"], [527, 2, 1, "", "fit"], [527, 2, 1, "", "fit_predict"], [527, 2, 1, "", "get_metadata_routing"], [527, 2, 1, "", "get_params"], [527, 2, 1, "", "predict"], [527, 2, 1, "", "score_samples"], [527, 2, 1, "", "set_fit_request"], [527, 2, 1, "", "set_params"]], "sklearn.ensemble.RandomForestClassifier": [[528, 2, 1, "", "apply"], [528, 2, 1, "", "decision_path"], [528, 3, 1, "", "estimators_samples_"], [528, 3, 1, "", "feature_importances_"], [528, 2, 1, "", "fit"], [528, 2, 1, "", "get_metadata_routing"], [528, 2, 1, "", "get_params"], [528, 2, 1, "", "predict"], [528, 2, 1, "", "predict_log_proba"], [528, 2, 1, "", "predict_proba"], [528, 2, 1, "", "score"], [528, 2, 1, "", "set_fit_request"], [528, 2, 1, "", "set_params"], [528, 2, 1, "", "set_score_request"]], "sklearn.ensemble.RandomForestRegressor": [[529, 2, 1, "", "apply"], [529, 2, 1, "", "decision_path"], [529, 3, 1, "", "estimators_samples_"], [529, 3, 1, "", "feature_importances_"], [529, 2, 1, "", "fit"], [529, 2, 1, "", "get_metadata_routing"], [529, 2, 1, "", "get_params"], [529, 2, 1, "", "predict"], [529, 2, 1, "", "score"], [529, 2, 1, "", "set_fit_request"], [529, 2, 1, "", "set_params"], [529, 2, 1, "", "set_score_request"]], "sklearn.ensemble.RandomTreesEmbedding": [[530, 2, 1, "", "apply"], [530, 2, 1, "", "decision_path"], [530, 3, 1, "", "estimators_samples_"], [530, 3, 1, "", "feature_importances_"], [530, 2, 1, "", "fit"], [530, 2, 1, "", "fit_transform"], [530, 2, 1, "", "get_feature_names_out"], [530, 2, 1, "", "get_metadata_routing"], [530, 2, 1, "", "get_params"], [530, 2, 1, "", "set_fit_request"], [530, 2, 1, "", "set_output"], [530, 2, 1, "", "set_params"], [530, 2, 1, "", "transform"]], "sklearn.ensemble.StackingClassifier": [[531, 2, 1, "", "decision_function"], [531, 2, 1, "", "fit"], [531, 2, 1, "", "fit_transform"], [531, 2, 1, "", "get_feature_names_out"], [531, 2, 1, "", "get_metadata_routing"], [531, 2, 1, "", "get_params"], [531, 3, 1, "", "n_features_in_"], [531, 3, 1, "", "named_estimators"], [531, 2, 1, "", "predict"], [531, 2, 1, "", "predict_proba"], [531, 2, 1, "", "score"], [531, 2, 1, "", "set_fit_request"], [531, 2, 1, "", "set_output"], [531, 2, 1, "", "set_params"], [531, 2, 1, "", "set_score_request"], [531, 2, 1, "", "transform"]], "sklearn.ensemble.StackingRegressor": [[532, 2, 1, "", "fit"], [532, 2, 1, "", "fit_transform"], [532, 2, 1, "", "get_feature_names_out"], [532, 2, 1, "", "get_metadata_routing"], [532, 2, 1, "", "get_params"], [532, 3, 1, "", "n_features_in_"], [532, 3, 1, "", "named_estimators"], [532, 2, 1, "", "predict"], [532, 2, 1, "", "score"], [532, 2, 1, "", "set_fit_request"], [532, 2, 1, "", "set_output"], [532, 2, 1, "", "set_params"], [532, 2, 1, "", "set_score_request"], [532, 2, 1, "", "transform"]], "sklearn.ensemble.VotingClassifier": [[533, 2, 1, "", "fit"], [533, 2, 1, "", "fit_transform"], [533, 2, 1, "", "get_feature_names_out"], [533, 2, 1, "", "get_metadata_routing"], [533, 2, 1, "", "get_params"], [533, 3, 1, "", "n_features_in_"], [533, 3, 1, "", "named_estimators"], [533, 2, 1, "", "predict"], [533, 2, 1, "", "predict_proba"], [533, 2, 1, "", "score"], [533, 2, 1, "", "set_fit_request"], [533, 2, 1, "", "set_output"], [533, 2, 1, "", "set_params"], [533, 2, 1, "", "set_score_request"], [533, 2, 1, "", "transform"]], "sklearn.ensemble.VotingRegressor": [[534, 2, 1, "", "fit"], [534, 2, 1, "", "fit_transform"], [534, 2, 1, "", "get_feature_names_out"], [534, 2, 1, "", "get_metadata_routing"], [534, 2, 1, "", "get_params"], [534, 3, 1, "", "n_features_in_"], [534, 3, 1, "", "named_estimators"], [534, 2, 1, "", "predict"], [534, 2, 1, "", "score"], [534, 2, 1, "", "set_fit_request"], [534, 2, 1, "", "set_output"], [534, 2, 1, "", "set_params"], [534, 2, 1, "", "set_score_request"], [534, 2, 1, "", "transform"]], "sklearn.exceptions": [[535, 1, 1, "", "ConvergenceWarning"], [536, 1, 1, "", "DataConversionWarning"], [537, 1, 1, "", "DataDimensionalityWarning"], [538, 1, 1, "", "EfficiencyWarning"], [539, 1, 1, "", "FitFailedWarning"], [540, 1, 1, "", "InconsistentVersionWarning"], [541, 1, 1, "", "NotFittedError"], [542, 1, 1, "", "UndefinedMetricWarning"]], "sklearn.exceptions.ConvergenceWarning": [[535, 2, 1, "", "with_traceback"]], "sklearn.exceptions.DataConversionWarning": [[536, 2, 1, "", "with_traceback"]], "sklearn.exceptions.DataDimensionalityWarning": [[537, 2, 1, "", "with_traceback"]], "sklearn.exceptions.EfficiencyWarning": [[538, 2, 1, "", "with_traceback"]], "sklearn.exceptions.FitFailedWarning": [[539, 2, 1, "", "with_traceback"]], "sklearn.exceptions.InconsistentVersionWarning": [[540, 2, 1, "", "with_traceback"]], "sklearn.exceptions.NotFittedError": [[541, 2, 1, "", "with_traceback"]], "sklearn.exceptions.UndefinedMetricWarning": [[542, 2, 1, "", "with_traceback"]], "sklearn.experimental": [[543, 0, 0, "-", "enable_halving_search_cv"], [544, 0, 0, "-", "enable_iterative_imputer"]], "sklearn.feature_extraction": [[545, 1, 1, "", "DictVectorizer"], [546, 1, 1, "", "FeatureHasher"], [372, 0, 0, "-", "image"], [372, 0, 0, "-", "text"]], "sklearn.feature_extraction.DictVectorizer": [[545, 2, 1, "", "fit"], [545, 2, 1, "", "fit_transform"], [545, 2, 1, "", "get_feature_names_out"], [545, 2, 1, "", "get_metadata_routing"], [545, 2, 1, "", "get_params"], [545, 2, 1, "", "inverse_transform"], [545, 2, 1, "", "restrict"], [545, 2, 1, "", "set_inverse_transform_request"], [545, 2, 1, "", "set_output"], [545, 2, 1, "", "set_params"], [545, 2, 1, "", "transform"]], "sklearn.feature_extraction.FeatureHasher": [[546, 2, 1, "", "fit"], [546, 2, 1, "", "fit_transform"], [546, 2, 1, "", "get_metadata_routing"], [546, 2, 1, "", "get_params"], [546, 2, 1, "", "set_output"], [546, 2, 1, "", "set_params"], [546, 2, 1, "", "set_transform_request"], [546, 2, 1, "", "transform"]], "sklearn.feature_extraction.image": [[547, 1, 1, "", "PatchExtractor"], [548, 4, 1, "", "extract_patches_2d"], [549, 4, 1, "", "grid_to_graph"], [550, 4, 1, "", "img_to_graph"], [551, 4, 1, "", "reconstruct_from_patches_2d"]], "sklearn.feature_extraction.image.PatchExtractor": [[547, 2, 1, "", "fit"], [547, 2, 1, "", "fit_transform"], [547, 2, 1, "", "get_metadata_routing"], [547, 2, 1, "", "get_params"], [547, 2, 1, "", "set_output"], [547, 2, 1, "", "set_params"], [547, 2, 1, "", "transform"]], "sklearn.feature_extraction.text": [[552, 1, 1, "", "CountVectorizer"], [553, 1, 1, "", "HashingVectorizer"], [554, 1, 1, "", "TfidfTransformer"], [555, 1, 1, "", "TfidfVectorizer"]], "sklearn.feature_extraction.text.CountVectorizer": [[552, 2, 1, "", "build_analyzer"], [552, 2, 1, "", "build_preprocessor"], [552, 2, 1, "", "build_tokenizer"], [552, 2, 1, "", "decode"], [552, 2, 1, "", "fit"], [552, 2, 1, "", "fit_transform"], [552, 2, 1, "", "get_feature_names_out"], [552, 2, 1, "", "get_metadata_routing"], [552, 2, 1, "", "get_params"], [552, 2, 1, "", "get_stop_words"], [552, 2, 1, "", "inverse_transform"], [552, 2, 1, "", "set_fit_request"], [552, 2, 1, "", "set_params"], [552, 2, 1, "", "set_transform_request"], [552, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.HashingVectorizer": [[553, 2, 1, "", "build_analyzer"], [553, 2, 1, "", "build_preprocessor"], [553, 2, 1, "", "build_tokenizer"], [553, 2, 1, "", "decode"], [553, 2, 1, "", "fit"], [553, 2, 1, "", "fit_transform"], [553, 2, 1, "", "get_metadata_routing"], [553, 2, 1, "", "get_params"], [553, 2, 1, "", "get_stop_words"], [553, 2, 1, "", "partial_fit"], [553, 2, 1, "", "set_output"], [553, 2, 1, "", "set_params"], [553, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.TfidfTransformer": [[554, 2, 1, "", "fit"], [554, 2, 1, "", "fit_transform"], [554, 2, 1, "", "get_feature_names_out"], [554, 2, 1, "", "get_metadata_routing"], [554, 2, 1, "", "get_params"], [554, 2, 1, "", "set_output"], [554, 2, 1, "", "set_params"], [554, 2, 1, "", "set_transform_request"], [554, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.TfidfVectorizer": [[555, 2, 1, "", "build_analyzer"], [555, 2, 1, "", "build_preprocessor"], [555, 2, 1, "", "build_tokenizer"], [555, 2, 1, "", "decode"], [555, 2, 1, "", "fit"], [555, 2, 1, "", "fit_transform"], [555, 2, 1, "", "get_feature_names_out"], [555, 2, 1, "", "get_metadata_routing"], [555, 2, 1, "", "get_params"], [555, 2, 1, "", "get_stop_words"], [555, 3, 1, "", "idf_"], [555, 2, 1, "", "inverse_transform"], [555, 2, 1, "", "set_fit_request"], [555, 2, 1, "", "set_params"], [555, 2, 1, "", "set_transform_request"], [555, 2, 1, "", "transform"]], "sklearn.feature_selection": [[556, 1, 1, "", "GenericUnivariateSelect"], [557, 1, 1, "", "RFE"], [558, 1, 1, "", "RFECV"], [559, 1, 1, "", "SelectFdr"], [560, 1, 1, "", "SelectFpr"], [561, 1, 1, "", "SelectFromModel"], [562, 1, 1, "", "SelectFwe"], [563, 1, 1, "", "SelectKBest"], [564, 1, 1, "", "SelectPercentile"], [565, 1, 1, "", "SelectorMixin"], [566, 1, 1, "", "SequentialFeatureSelector"], [567, 1, 1, "", "VarianceThreshold"], [568, 4, 1, "", "chi2"], [569, 4, 1, "", "f_classif"], [570, 4, 1, "", "f_regression"], [571, 4, 1, "", "mutual_info_classif"], [572, 4, 1, "", "mutual_info_regression"], [573, 4, 1, "", "r_regression"]], "sklearn.feature_selection.GenericUnivariateSelect": [[556, 2, 1, "", "fit"], [556, 2, 1, "", "fit_transform"], [556, 2, 1, "", "get_feature_names_out"], [556, 2, 1, "", "get_metadata_routing"], [556, 2, 1, "", "get_params"], [556, 2, 1, "", "get_support"], [556, 2, 1, "", "inverse_transform"], [556, 2, 1, "", "set_output"], [556, 2, 1, "", "set_params"], [556, 2, 1, "", "transform"]], "sklearn.feature_selection.RFE": [[557, 3, 1, "", "classes_"], [557, 2, 1, "", "decision_function"], [557, 2, 1, "", "fit"], [557, 2, 1, "", "fit_transform"], [557, 2, 1, "", "get_feature_names_out"], [557, 2, 1, "", "get_metadata_routing"], [557, 2, 1, "", "get_params"], [557, 2, 1, "", "get_support"], [557, 2, 1, "", "inverse_transform"], [557, 2, 1, "", "predict"], [557, 2, 1, "", "predict_log_proba"], [557, 2, 1, "", "predict_proba"], [557, 2, 1, "", "score"], [557, 2, 1, "", "set_output"], [557, 2, 1, "", "set_params"], [557, 2, 1, "", "transform"]], "sklearn.feature_selection.RFECV": [[558, 3, 1, "", "classes_"], [558, 2, 1, "", "decision_function"], [558, 2, 1, "", "fit"], [558, 2, 1, "", "fit_transform"], [558, 2, 1, "", "get_feature_names_out"], [558, 2, 1, "", "get_metadata_routing"], [558, 2, 1, "", "get_params"], [558, 2, 1, "", "get_support"], [558, 2, 1, "", "inverse_transform"], [558, 2, 1, "", "predict"], [558, 2, 1, "", "predict_log_proba"], [558, 2, 1, "", "predict_proba"], [558, 2, 1, "", "score"], [558, 2, 1, "", "set_fit_request"], [558, 2, 1, "", "set_output"], [558, 2, 1, "", "set_params"], [558, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFdr": [[559, 2, 1, "", "fit"], [559, 2, 1, "", "fit_transform"], [559, 2, 1, "", "get_feature_names_out"], [559, 2, 1, "", "get_metadata_routing"], [559, 2, 1, "", "get_params"], [559, 2, 1, "", "get_support"], [559, 2, 1, "", "inverse_transform"], [559, 2, 1, "", "set_output"], [559, 2, 1, "", "set_params"], [559, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFpr": [[560, 2, 1, "", "fit"], [560, 2, 1, "", "fit_transform"], [560, 2, 1, "", "get_feature_names_out"], [560, 2, 1, "", "get_metadata_routing"], [560, 2, 1, "", "get_params"], [560, 2, 1, "", "get_support"], [560, 2, 1, "", "inverse_transform"], [560, 2, 1, "", "set_output"], [560, 2, 1, "", "set_params"], [560, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFromModel": [[561, 2, 1, "", "fit"], [561, 2, 1, "", "fit_transform"], [561, 2, 1, "", "get_feature_names_out"], [561, 2, 1, "", "get_metadata_routing"], [561, 2, 1, "", "get_params"], [561, 2, 1, "", "get_support"], [561, 2, 1, "", "inverse_transform"], [561, 3, 1, "", "n_features_in_"], [561, 2, 1, "", "partial_fit"], [561, 2, 1, "", "set_output"], [561, 2, 1, "", "set_params"], [561, 3, 1, "", "threshold_"], [561, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFwe": [[562, 2, 1, "", "fit"], [562, 2, 1, "", "fit_transform"], [562, 2, 1, "", "get_feature_names_out"], [562, 2, 1, "", "get_metadata_routing"], [562, 2, 1, "", "get_params"], [562, 2, 1, "", "get_support"], [562, 2, 1, "", "inverse_transform"], [562, 2, 1, "", "set_output"], [562, 2, 1, "", "set_params"], [562, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectKBest": [[563, 2, 1, "", "fit"], [563, 2, 1, "", "fit_transform"], [563, 2, 1, "", "get_feature_names_out"], [563, 2, 1, "", "get_metadata_routing"], [563, 2, 1, "", "get_params"], [563, 2, 1, "", "get_support"], [563, 2, 1, "", "inverse_transform"], [563, 2, 1, "", "set_output"], [563, 2, 1, "", "set_params"], [563, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectPercentile": [[564, 2, 1, "", "fit"], [564, 2, 1, "", "fit_transform"], [564, 2, 1, "", "get_feature_names_out"], [564, 2, 1, "", "get_metadata_routing"], [564, 2, 1, "", "get_params"], [564, 2, 1, "", "get_support"], [564, 2, 1, "", "inverse_transform"], [564, 2, 1, "", "set_output"], [564, 2, 1, "", "set_params"], [564, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectorMixin": [[565, 2, 1, "", "fit_transform"], [565, 2, 1, "", "get_feature_names_out"], [565, 2, 1, "", "get_support"], [565, 2, 1, "", "inverse_transform"], [565, 2, 1, "", "set_output"], [565, 2, 1, "", "transform"]], "sklearn.feature_selection.SequentialFeatureSelector": [[566, 2, 1, "", "fit"], [566, 2, 1, "", "fit_transform"], [566, 2, 1, "", "get_feature_names_out"], [566, 2, 1, "", "get_metadata_routing"], [566, 2, 1, "", "get_params"], [566, 2, 1, "", "get_support"], [566, 2, 1, "", "inverse_transform"], [566, 2, 1, "", "set_output"], [566, 2, 1, "", "set_params"], [566, 2, 1, "", "transform"]], "sklearn.feature_selection.VarianceThreshold": [[567, 2, 1, "", "fit"], [567, 2, 1, "", "fit_transform"], [567, 2, 1, "", "get_feature_names_out"], [567, 2, 1, "", "get_metadata_routing"], [567, 2, 1, "", "get_params"], [567, 2, 1, "", "get_support"], [567, 2, 1, "", "inverse_transform"], [567, 2, 1, "", "set_output"], [567, 2, 1, "", "set_params"], [567, 2, 1, "", "transform"]], "sklearn.gaussian_process": [[574, 1, 1, "", "GaussianProcessClassifier"], [575, 1, 1, "", "GaussianProcessRegressor"], [372, 0, 0, "-", "kernels"]], "sklearn.gaussian_process.GaussianProcessClassifier": [[574, 2, 1, "", "fit"], [574, 2, 1, "", "get_metadata_routing"], [574, 2, 1, "", "get_params"], [574, 3, 1, "", "kernel_"], [574, 2, 1, "", "log_marginal_likelihood"], [574, 2, 1, "", "predict"], [574, 2, 1, "", "predict_proba"], [574, 2, 1, "", "score"], [574, 2, 1, "", "set_params"], [574, 2, 1, "", "set_score_request"]], "sklearn.gaussian_process.GaussianProcessRegressor": [[575, 2, 1, "", "fit"], [575, 2, 1, "", "get_metadata_routing"], [575, 2, 1, "", "get_params"], [575, 2, 1, "", "log_marginal_likelihood"], [575, 2, 1, "", "predict"], [575, 2, 1, "", "sample_y"], [575, 2, 1, "", "score"], [575, 2, 1, "", "set_params"], [575, 2, 1, "", "set_predict_request"], [575, 2, 1, "", "set_score_request"]], "sklearn.gaussian_process.kernels": [[576, 1, 1, "", "CompoundKernel"], [577, 1, 1, "", "ConstantKernel"], [578, 1, 1, "", "DotProduct"], [579, 1, 1, "", "ExpSineSquared"], [580, 1, 1, "", "Exponentiation"], [581, 1, 1, "", "Hyperparameter"], [582, 1, 1, "", "Kernel"], [583, 1, 1, "", "Matern"], [584, 1, 1, "", "PairwiseKernel"], [585, 1, 1, "", "Product"], [586, 1, 1, "", "RBF"], [587, 1, 1, "", "RationalQuadratic"], [588, 1, 1, "", "Sum"], [589, 1, 1, "", "WhiteKernel"]], "sklearn.gaussian_process.kernels.CompoundKernel": [[576, 2, 1, "", "__call__"], [576, 3, 1, "", "bounds"], [576, 2, 1, "", "clone_with_theta"], [576, 2, 1, "", "diag"], [576, 2, 1, "", "get_params"], [576, 3, 1, "", "hyperparameters"], [576, 2, 1, "", "is_stationary"], [576, 3, 1, "", "n_dims"], [576, 3, 1, "", "requires_vector_input"], [576, 2, 1, "", "set_params"], [576, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.ConstantKernel": [[577, 2, 1, "", "__call__"], [577, 3, 1, "", "bounds"], [577, 2, 1, "", "clone_with_theta"], [577, 2, 1, "", "diag"], [577, 2, 1, "", "get_params"], [577, 3, 1, "", "hyperparameters"], [577, 2, 1, "", "is_stationary"], [577, 3, 1, "", "n_dims"], [577, 3, 1, "", "requires_vector_input"], [577, 2, 1, "", "set_params"], [577, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.DotProduct": [[578, 2, 1, "", "__call__"], [578, 3, 1, "", "bounds"], [578, 2, 1, "", "clone_with_theta"], [578, 2, 1, "", "diag"], [578, 2, 1, "", "get_params"], [578, 3, 1, "", "hyperparameters"], [578, 2, 1, "", "is_stationary"], [578, 3, 1, "", "n_dims"], [578, 3, 1, "", "requires_vector_input"], [578, 2, 1, "", "set_params"], [578, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.ExpSineSquared": [[579, 2, 1, "", "__call__"], [579, 3, 1, "", "bounds"], [579, 2, 1, "", "clone_with_theta"], [579, 2, 1, "", "diag"], [579, 2, 1, "", "get_params"], [579, 3, 1, "", "hyperparameter_length_scale"], [579, 3, 1, "", "hyperparameters"], [579, 2, 1, "", "is_stationary"], [579, 3, 1, "", "n_dims"], [579, 3, 1, "", "requires_vector_input"], [579, 2, 1, "", "set_params"], [579, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Exponentiation": [[580, 2, 1, "", "__call__"], [580, 3, 1, "", "bounds"], [580, 2, 1, "", "clone_with_theta"], [580, 2, 1, "", "diag"], [580, 2, 1, "", "get_params"], [580, 3, 1, "", "hyperparameters"], [580, 2, 1, "", "is_stationary"], [580, 3, 1, "", "n_dims"], [580, 3, 1, "", "requires_vector_input"], [580, 2, 1, "", "set_params"], [580, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Hyperparameter": [[581, 2, 1, "", "__call__"], [581, 5, 1, "", "bounds"], [581, 2, 1, "", "count"], [581, 5, 1, "", "fixed"], [581, 2, 1, "", "index"], [581, 5, 1, "", "n_elements"], [581, 5, 1, "", "name"], [581, 5, 1, "", "value_type"]], "sklearn.gaussian_process.kernels.Kernel": [[582, 2, 1, "", "__call__"], [582, 3, 1, "", "bounds"], [582, 2, 1, "", "clone_with_theta"], [582, 2, 1, "", "diag"], [582, 2, 1, "", "get_params"], [582, 3, 1, "", "hyperparameters"], [582, 2, 1, "", "is_stationary"], [582, 3, 1, "", "n_dims"], [582, 3, 1, "", "requires_vector_input"], [582, 2, 1, "", "set_params"], [582, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Matern": [[583, 2, 1, "", "__call__"], [583, 3, 1, "", "bounds"], [583, 2, 1, "", "clone_with_theta"], [583, 2, 1, "", "diag"], [583, 2, 1, "", "get_params"], [583, 3, 1, "", "hyperparameters"], [583, 2, 1, "", "is_stationary"], [583, 3, 1, "", "n_dims"], [583, 3, 1, "", "requires_vector_input"], [583, 2, 1, "", "set_params"], [583, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.PairwiseKernel": [[584, 2, 1, "", "__call__"], [584, 3, 1, "", "bounds"], [584, 2, 1, "", "clone_with_theta"], [584, 2, 1, "", "diag"], [584, 2, 1, "", "get_params"], [584, 3, 1, "", "hyperparameters"], [584, 2, 1, "", "is_stationary"], [584, 3, 1, "", "n_dims"], [584, 3, 1, "", "requires_vector_input"], [584, 2, 1, "", "set_params"], [584, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Product": [[585, 2, 1, "", "__call__"], [585, 3, 1, "", "bounds"], [585, 2, 1, "", "clone_with_theta"], [585, 2, 1, "", "diag"], [585, 2, 1, "", "get_params"], [585, 3, 1, "", "hyperparameters"], [585, 2, 1, "", "is_stationary"], [585, 3, 1, "", "n_dims"], [585, 3, 1, "", "requires_vector_input"], [585, 2, 1, "", "set_params"], [585, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.RBF": [[586, 2, 1, "", "__call__"], [586, 3, 1, "", "bounds"], [586, 2, 1, "", "clone_with_theta"], [586, 2, 1, "", "diag"], [586, 2, 1, "", "get_params"], [586, 3, 1, "", "hyperparameters"], [586, 2, 1, "", "is_stationary"], [586, 3, 1, "", "n_dims"], [586, 3, 1, "", "requires_vector_input"], [586, 2, 1, "", "set_params"], [586, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.RationalQuadratic": [[587, 2, 1, "", "__call__"], [587, 3, 1, "", "bounds"], [587, 2, 1, "", "clone_with_theta"], [587, 2, 1, "", "diag"], [587, 2, 1, "", "get_params"], [587, 3, 1, "", "hyperparameters"], [587, 2, 1, "", "is_stationary"], [587, 3, 1, "", "n_dims"], [587, 3, 1, "", "requires_vector_input"], [587, 2, 1, "", "set_params"], [587, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Sum": [[588, 2, 1, "", "__call__"], [588, 3, 1, "", "bounds"], [588, 2, 1, "", "clone_with_theta"], [588, 2, 1, "", "diag"], [588, 2, 1, "", "get_params"], [588, 3, 1, "", "hyperparameters"], [588, 2, 1, "", "is_stationary"], [588, 3, 1, "", "n_dims"], [588, 3, 1, "", "requires_vector_input"], [588, 2, 1, "", "set_params"], [588, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.WhiteKernel": [[589, 2, 1, "", "__call__"], [589, 3, 1, "", "bounds"], [589, 2, 1, "", "clone_with_theta"], [589, 2, 1, "", "diag"], [589, 2, 1, "", "get_params"], [589, 3, 1, "", "hyperparameters"], [589, 2, 1, "", "is_stationary"], [589, 3, 1, "", "n_dims"], [589, 3, 1, "", "requires_vector_input"], [589, 2, 1, "", "set_params"], [589, 3, 1, "", "theta"]], "sklearn.impute": [[591, 1, 1, "", "IterativeImputer"], [592, 1, 1, "", "KNNImputer"], [593, 1, 1, "", "MissingIndicator"], [594, 1, 1, "", "SimpleImputer"]], "sklearn.impute.IterativeImputer": [[591, 2, 1, "", "fit"], [591, 2, 1, "", "fit_transform"], [591, 2, 1, "", "get_feature_names_out"], [591, 2, 1, "", "get_metadata_routing"], [591, 2, 1, "", "get_params"], [591, 2, 1, "", "set_output"], [591, 2, 1, "", "set_params"], [591, 2, 1, "", "transform"]], "sklearn.impute.KNNImputer": [[592, 2, 1, "", "fit"], [592, 2, 1, "", "fit_transform"], [592, 2, 1, "", "get_feature_names_out"], [592, 2, 1, "", "get_metadata_routing"], [592, 2, 1, "", "get_params"], [592, 2, 1, "", "set_output"], [592, 2, 1, "", "set_params"], [592, 2, 1, "", "transform"]], "sklearn.impute.MissingIndicator": [[593, 2, 1, "", "fit"], [593, 2, 1, "", "fit_transform"], [593, 2, 1, "", "get_feature_names_out"], [593, 2, 1, "", "get_metadata_routing"], [593, 2, 1, "", "get_params"], [593, 2, 1, "", "set_output"], [593, 2, 1, "", "set_params"], [593, 2, 1, "", "transform"]], "sklearn.impute.SimpleImputer": [[594, 2, 1, "", "fit"], [594, 2, 1, "", "fit_transform"], [594, 2, 1, "", "get_feature_names_out"], [594, 2, 1, "", "get_metadata_routing"], [594, 2, 1, "", "get_params"], [594, 2, 1, "", "inverse_transform"], [594, 2, 1, "", "set_output"], [594, 2, 1, "", "set_params"], [594, 2, 1, "", "transform"]], "sklearn.inspection": [[595, 1, 1, "", "DecisionBoundaryDisplay"], [596, 1, 1, "", "PartialDependenceDisplay"], [597, 4, 1, "", "partial_dependence"], [598, 4, 1, "", "permutation_importance"]], "sklearn.inspection.DecisionBoundaryDisplay": [[595, 2, 1, "", "from_estimator"], [595, 2, 1, "", "plot"]], "sklearn.inspection.PartialDependenceDisplay": [[596, 2, 1, "", "from_estimator"], [596, 2, 1, "", "plot"]], "sklearn.isotonic": [[599, 1, 1, "", "IsotonicRegression"], [600, 4, 1, "", "check_increasing"], [601, 4, 1, "", "isotonic_regression"]], "sklearn.isotonic.IsotonicRegression": [[599, 2, 1, "", "fit"], [599, 2, 1, "", "fit_transform"], [599, 2, 1, "", "get_feature_names_out"], [599, 2, 1, "", "get_metadata_routing"], [599, 2, 1, "", "get_params"], [599, 2, 1, "", "predict"], [599, 2, 1, "", "score"], [599, 2, 1, "", "set_fit_request"], [599, 2, 1, "", "set_output"], [599, 2, 1, "", "set_params"], [599, 2, 1, "", "set_predict_request"], [599, 2, 1, "", "set_score_request"], [599, 2, 1, "", "set_transform_request"], [599, 2, 1, "", "transform"]], "sklearn.kernel_approximation": [[602, 1, 1, "", "AdditiveChi2Sampler"], [603, 1, 1, "", "Nystroem"], [604, 1, 1, "", "PolynomialCountSketch"], [605, 1, 1, "", "RBFSampler"], [606, 1, 1, "", "SkewedChi2Sampler"]], "sklearn.kernel_approximation.AdditiveChi2Sampler": [[602, 2, 1, "", "fit"], [602, 2, 1, "", "fit_transform"], [602, 2, 1, "", "get_feature_names_out"], [602, 2, 1, "", "get_metadata_routing"], [602, 2, 1, "", "get_params"], [602, 2, 1, "", "set_output"], [602, 2, 1, "", "set_params"], [602, 2, 1, "", "transform"]], "sklearn.kernel_approximation.Nystroem": [[603, 2, 1, "", "fit"], [603, 2, 1, "", "fit_transform"], [603, 2, 1, "", "get_feature_names_out"], [603, 2, 1, "", "get_metadata_routing"], [603, 2, 1, "", "get_params"], [603, 2, 1, "", "set_output"], [603, 2, 1, "", "set_params"], [603, 2, 1, "", "transform"]], "sklearn.kernel_approximation.PolynomialCountSketch": [[604, 2, 1, "", "fit"], [604, 2, 1, "", "fit_transform"], [604, 2, 1, "", "get_feature_names_out"], [604, 2, 1, "", "get_metadata_routing"], [604, 2, 1, "", "get_params"], [604, 2, 1, "", "set_output"], [604, 2, 1, "", "set_params"], [604, 2, 1, "", "transform"]], "sklearn.kernel_approximation.RBFSampler": [[605, 2, 1, "", "fit"], [605, 2, 1, "", "fit_transform"], [605, 2, 1, "", "get_feature_names_out"], [605, 2, 1, "", "get_metadata_routing"], [605, 2, 1, "", "get_params"], [605, 2, 1, "", "set_output"], [605, 2, 1, "", "set_params"], [605, 2, 1, "", "transform"]], "sklearn.kernel_approximation.SkewedChi2Sampler": [[606, 2, 1, "", "fit"], [606, 2, 1, "", "fit_transform"], [606, 2, 1, "", "get_feature_names_out"], [606, 2, 1, "", "get_metadata_routing"], [606, 2, 1, "", "get_params"], [606, 2, 1, "", "set_output"], [606, 2, 1, "", "set_params"], [606, 2, 1, "", "transform"]], "sklearn.kernel_ridge": [[607, 1, 1, "", "KernelRidge"]], "sklearn.kernel_ridge.KernelRidge": [[607, 2, 1, "", "fit"], [607, 2, 1, "", "get_metadata_routing"], [607, 2, 1, "", "get_params"], [607, 2, 1, "", "predict"], [607, 2, 1, "", "score"], [607, 2, 1, "", "set_fit_request"], [607, 2, 1, "", "set_params"], [607, 2, 1, "", "set_score_request"]], "sklearn.linear_model": [[608, 1, 1, "", "ARDRegression"], [609, 1, 1, "", "BayesianRidge"], [610, 1, 1, "", "ElasticNet"], [611, 1, 1, "", "ElasticNetCV"], [612, 1, 1, "", "GammaRegressor"], [613, 1, 1, "", "HuberRegressor"], [614, 1, 1, "", "Lars"], [615, 1, 1, "", "LarsCV"], [616, 1, 1, "", "Lasso"], [617, 1, 1, "", "LassoCV"], [618, 1, 1, "", "LassoLars"], [619, 1, 1, "", "LassoLarsCV"], [620, 1, 1, "", "LassoLarsIC"], [621, 1, 1, "", "LinearRegression"], [622, 1, 1, "", "LogisticRegression"], [623, 1, 1, "", "LogisticRegressionCV"], [624, 1, 1, "", "MultiTaskElasticNet"], [625, 1, 1, "", "MultiTaskElasticNetCV"], [626, 1, 1, "", "MultiTaskLasso"], [627, 1, 1, "", "MultiTaskLassoCV"], [628, 1, 1, "", "OrthogonalMatchingPursuit"], [629, 1, 1, "", "OrthogonalMatchingPursuitCV"], [630, 1, 1, "", "PassiveAggressiveClassifier"], [631, 1, 1, "", "PassiveAggressiveRegressor"], [632, 1, 1, "", "Perceptron"], [633, 1, 1, "", "PoissonRegressor"], [634, 1, 1, "", "QuantileRegressor"], [635, 1, 1, "", "RANSACRegressor"], [636, 1, 1, "", "Ridge"], [637, 1, 1, "", "RidgeCV"], [638, 1, 1, "", "RidgeClassifier"], [639, 1, 1, "", "RidgeClassifierCV"], [640, 1, 1, "", "SGDClassifier"], [641, 1, 1, "", "SGDOneClassSVM"], [642, 1, 1, "", "SGDRegressor"], [643, 1, 1, "", "TheilSenRegressor"], [644, 1, 1, "", "TweedieRegressor"], [645, 4, 1, "", "enet_path"], [646, 4, 1, "", "lars_path"], [647, 4, 1, "", "lars_path_gram"], [648, 4, 1, "", "lasso_path"], [649, 4, 1, "", "orthogonal_mp"], [650, 4, 1, "", "orthogonal_mp_gram"], [651, 4, 1, "", "ridge_regression"]], "sklearn.linear_model.ARDRegression": [[608, 2, 1, "", "fit"], [608, 2, 1, "", "get_metadata_routing"], [608, 2, 1, "", "get_params"], [608, 2, 1, "", "predict"], [608, 2, 1, "", "score"], [608, 2, 1, "", "set_params"], [608, 2, 1, "", "set_predict_request"], [608, 2, 1, "", "set_score_request"]], "sklearn.linear_model.BayesianRidge": [[609, 2, 1, "", "fit"], [609, 2, 1, "", "get_metadata_routing"], [609, 2, 1, "", "get_params"], [609, 2, 1, "", "predict"], [609, 2, 1, "", "score"], [609, 2, 1, "", "set_fit_request"], [609, 2, 1, "", "set_params"], [609, 2, 1, "", "set_predict_request"], [609, 2, 1, "", "set_score_request"]], "sklearn.linear_model.ElasticNet": [[610, 2, 1, "", "fit"], [610, 2, 1, "", "get_metadata_routing"], [610, 2, 1, "", "get_params"], [610, 2, 1, "", "path"], [610, 2, 1, "", "predict"], [610, 2, 1, "", "score"], [610, 2, 1, "", "set_fit_request"], [610, 2, 1, "", "set_params"], [610, 2, 1, "", "set_score_request"], [610, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.ElasticNetCV": [[611, 2, 1, "", "fit"], [611, 2, 1, "", "get_metadata_routing"], [611, 2, 1, "", "get_params"], [611, 2, 1, "", "path"], [611, 2, 1, "", "predict"], [611, 2, 1, "", "score"], [611, 2, 1, "", "set_fit_request"], [611, 2, 1, "", "set_params"], [611, 2, 1, "", "set_score_request"]], "sklearn.linear_model.GammaRegressor": [[612, 2, 1, "", "fit"], [612, 2, 1, "", "get_metadata_routing"], [612, 2, 1, "", "get_params"], [612, 2, 1, "", "predict"], [612, 2, 1, "", "score"], [612, 2, 1, "", "set_fit_request"], [612, 2, 1, "", "set_params"], [612, 2, 1, "", "set_score_request"]], "sklearn.linear_model.HuberRegressor": [[613, 2, 1, "", "fit"], [613, 2, 1, "", "get_metadata_routing"], [613, 2, 1, "", "get_params"], [613, 2, 1, "", "predict"], [613, 2, 1, "", "score"], [613, 2, 1, "", "set_fit_request"], [613, 2, 1, "", "set_params"], [613, 2, 1, "", "set_score_request"]], "sklearn.linear_model.Lars": [[614, 2, 1, "", "fit"], [614, 2, 1, "", "get_metadata_routing"], [614, 2, 1, "", "get_params"], [614, 2, 1, "", "predict"], [614, 2, 1, "", "score"], [614, 2, 1, "", "set_fit_request"], [614, 2, 1, "", "set_params"], [614, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LarsCV": [[615, 2, 1, "", "fit"], [615, 2, 1, "", "get_metadata_routing"], [615, 2, 1, "", "get_params"], [615, 2, 1, "", "predict"], [615, 2, 1, "", "score"], [615, 2, 1, "", "set_fit_request"], [615, 2, 1, "", "set_params"], [615, 2, 1, "", "set_score_request"]], "sklearn.linear_model.Lasso": [[616, 2, 1, "", "fit"], [616, 2, 1, "", "get_metadata_routing"], [616, 2, 1, "", "get_params"], [616, 2, 1, "", "path"], [616, 2, 1, "", "predict"], [616, 2, 1, "", "score"], [616, 2, 1, "", "set_fit_request"], [616, 2, 1, "", "set_params"], [616, 2, 1, "", "set_score_request"], [616, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.LassoCV": [[617, 2, 1, "", "fit"], [617, 2, 1, "", "get_metadata_routing"], [617, 2, 1, "", "get_params"], [617, 2, 1, "", "path"], [617, 2, 1, "", "predict"], [617, 2, 1, "", "score"], [617, 2, 1, "", "set_fit_request"], [617, 2, 1, "", "set_params"], [617, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LassoLars": [[618, 2, 1, "", "fit"], [618, 2, 1, "", "get_metadata_routing"], [618, 2, 1, "", "get_params"], [618, 2, 1, "", "predict"], [618, 2, 1, "", "score"], [618, 2, 1, "", "set_fit_request"], [618, 2, 1, "", "set_params"], [618, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LassoLarsCV": [[619, 2, 1, "", "fit"], [619, 2, 1, "", "get_metadata_routing"], [619, 2, 1, "", "get_params"], [619, 2, 1, "", "predict"], [619, 2, 1, "", "score"], [619, 2, 1, "", "set_fit_request"], [619, 2, 1, "", "set_params"], [619, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LassoLarsIC": [[620, 2, 1, "", "fit"], [620, 2, 1, "", "get_metadata_routing"], [620, 2, 1, "", "get_params"], [620, 2, 1, "", "predict"], [620, 2, 1, "", "score"], [620, 2, 1, "", "set_fit_request"], [620, 2, 1, "", "set_params"], [620, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LinearRegression": [[621, 2, 1, "", "fit"], [621, 2, 1, "", "get_metadata_routing"], [621, 2, 1, "", "get_params"], [621, 2, 1, "", "predict"], [621, 2, 1, "", "score"], [621, 2, 1, "", "set_fit_request"], [621, 2, 1, "", "set_params"], [621, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LogisticRegression": [[622, 2, 1, "", "decision_function"], [622, 2, 1, "", "densify"], [622, 2, 1, "", "fit"], [622, 2, 1, "", "get_metadata_routing"], [622, 2, 1, "", "get_params"], [622, 2, 1, "", "predict"], [622, 2, 1, "", "predict_log_proba"], [622, 2, 1, "", "predict_proba"], [622, 2, 1, "", "score"], [622, 2, 1, "", "set_fit_request"], [622, 2, 1, "", "set_params"], [622, 2, 1, "", "set_score_request"], [622, 2, 1, "", "sparsify"]], "sklearn.linear_model.LogisticRegressionCV": [[623, 2, 1, "", "decision_function"], [623, 2, 1, "", "densify"], [623, 2, 1, "", "fit"], [623, 2, 1, "", "get_metadata_routing"], [623, 2, 1, "", "get_params"], [623, 2, 1, "", "predict"], [623, 2, 1, "", "predict_log_proba"], [623, 2, 1, "", "predict_proba"], [623, 2, 1, "", "score"], [623, 2, 1, "", "set_fit_request"], [623, 2, 1, "", "set_params"], [623, 2, 1, "", "set_score_request"], [623, 2, 1, "", "sparsify"]], "sklearn.linear_model.MultiTaskElasticNet": [[624, 2, 1, "", "fit"], [624, 2, 1, "", "get_metadata_routing"], [624, 2, 1, "", "get_params"], [624, 2, 1, "", "path"], [624, 2, 1, "", "predict"], [624, 2, 1, "", "score"], [624, 2, 1, "", "set_fit_request"], [624, 2, 1, "", "set_params"], [624, 2, 1, "", "set_score_request"], [624, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.MultiTaskElasticNetCV": [[625, 2, 1, "", "fit"], [625, 2, 1, "", "get_metadata_routing"], [625, 2, 1, "", "get_params"], [625, 2, 1, "", "path"], [625, 2, 1, "", "predict"], [625, 2, 1, "", "score"], [625, 2, 1, "", "set_fit_request"], [625, 2, 1, "", "set_params"], [625, 2, 1, "", "set_score_request"]], "sklearn.linear_model.MultiTaskLasso": [[626, 2, 1, "", "fit"], [626, 2, 1, "", "get_metadata_routing"], [626, 2, 1, "", "get_params"], [626, 2, 1, "", "path"], [626, 2, 1, "", "predict"], [626, 2, 1, "", "score"], [626, 2, 1, "", "set_fit_request"], [626, 2, 1, "", "set_params"], [626, 2, 1, "", "set_score_request"], [626, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.MultiTaskLassoCV": [[627, 2, 1, "", "fit"], [627, 2, 1, "", "get_metadata_routing"], [627, 2, 1, "", "get_params"], [627, 2, 1, "", "path"], [627, 2, 1, "", "predict"], [627, 2, 1, "", "score"], [627, 2, 1, "", "set_fit_request"], [627, 2, 1, "", "set_params"], [627, 2, 1, "", "set_score_request"]], "sklearn.linear_model.OrthogonalMatchingPursuit": [[628, 2, 1, "", "fit"], [628, 2, 1, "", "get_metadata_routing"], [628, 2, 1, "", "get_params"], [628, 2, 1, "", "predict"], [628, 2, 1, "", "score"], [628, 2, 1, "", "set_params"], [628, 2, 1, "", "set_score_request"]], "sklearn.linear_model.OrthogonalMatchingPursuitCV": [[629, 2, 1, "", "fit"], [629, 2, 1, "", "get_metadata_routing"], [629, 2, 1, "", "get_params"], [629, 2, 1, "", "predict"], [629, 2, 1, "", "score"], [629, 2, 1, "", "set_params"], [629, 2, 1, "", "set_score_request"]], "sklearn.linear_model.PassiveAggressiveClassifier": [[630, 2, 1, "", "decision_function"], [630, 2, 1, "", "densify"], [630, 2, 1, "", "fit"], [630, 2, 1, "", "get_metadata_routing"], [630, 2, 1, "", "get_params"], [630, 2, 1, "", "partial_fit"], [630, 2, 1, "", "predict"], [630, 2, 1, "", "score"], [630, 2, 1, "", "set_fit_request"], [630, 2, 1, "", "set_params"], [630, 2, 1, "", "set_partial_fit_request"], [630, 2, 1, "", "set_score_request"], [630, 2, 1, "", "sparsify"]], "sklearn.linear_model.PassiveAggressiveRegressor": [[631, 2, 1, "", "densify"], [631, 2, 1, "", "fit"], [631, 2, 1, "", "get_metadata_routing"], [631, 2, 1, "", "get_params"], [631, 2, 1, "", "partial_fit"], [631, 2, 1, "", "predict"], [631, 2, 1, "", "score"], [631, 2, 1, "", "set_fit_request"], [631, 2, 1, "", "set_params"], [631, 2, 1, "", "set_partial_fit_request"], [631, 2, 1, "", "set_score_request"], [631, 2, 1, "", "sparsify"]], "sklearn.linear_model.Perceptron": [[632, 2, 1, "", "decision_function"], [632, 2, 1, "", "densify"], [632, 2, 1, "", "fit"], [632, 2, 1, "", "get_metadata_routing"], [632, 2, 1, "", "get_params"], [632, 2, 1, "", "partial_fit"], [632, 2, 1, "", "predict"], [632, 2, 1, "", "score"], [632, 2, 1, "", "set_fit_request"], [632, 2, 1, "", "set_params"], [632, 2, 1, "", "set_partial_fit_request"], [632, 2, 1, "", "set_score_request"], [632, 2, 1, "", "sparsify"]], "sklearn.linear_model.PoissonRegressor": [[633, 2, 1, "", "fit"], [633, 2, 1, "", "get_metadata_routing"], [633, 2, 1, "", "get_params"], [633, 2, 1, "", "predict"], [633, 2, 1, "", "score"], [633, 2, 1, "", "set_fit_request"], [633, 2, 1, "", "set_params"], [633, 2, 1, "", "set_score_request"]], "sklearn.linear_model.QuantileRegressor": [[634, 2, 1, "", "fit"], [634, 2, 1, "", "get_metadata_routing"], [634, 2, 1, "", "get_params"], [634, 2, 1, "", "predict"], [634, 2, 1, "", "score"], [634, 2, 1, "", "set_fit_request"], [634, 2, 1, "", "set_params"], [634, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RANSACRegressor": [[635, 2, 1, "", "fit"], [635, 2, 1, "", "get_metadata_routing"], [635, 2, 1, "", "get_params"], [635, 2, 1, "", "predict"], [635, 2, 1, "", "score"], [635, 2, 1, "", "set_fit_request"], [635, 2, 1, "", "set_params"]], "sklearn.linear_model.Ridge": [[636, 2, 1, "", "fit"], [636, 2, 1, "", "get_metadata_routing"], [636, 2, 1, "", "get_params"], [636, 2, 1, "", "predict"], [636, 2, 1, "", "score"], [636, 2, 1, "", "set_fit_request"], [636, 2, 1, "", "set_params"], [636, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RidgeCV": [[637, 2, 1, "", "fit"], [637, 2, 1, "", "get_metadata_routing"], [637, 2, 1, "", "get_params"], [637, 2, 1, "", "predict"], [637, 2, 1, "", "score"], [637, 2, 1, "", "set_fit_request"], [637, 2, 1, "", "set_params"], [637, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RidgeClassifier": [[638, 3, 1, "", "classes_"], [638, 2, 1, "", "decision_function"], [638, 2, 1, "", "fit"], [638, 2, 1, "", "get_metadata_routing"], [638, 2, 1, "", "get_params"], [638, 2, 1, "", "predict"], [638, 2, 1, "", "score"], [638, 2, 1, "", "set_fit_request"], [638, 2, 1, "", "set_params"], [638, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RidgeClassifierCV": [[639, 3, 1, "", "classes_"], [639, 2, 1, "", "decision_function"], [639, 2, 1, "", "fit"], [639, 2, 1, "", "get_metadata_routing"], [639, 2, 1, "", "get_params"], [639, 2, 1, "", "predict"], [639, 2, 1, "", "score"], [639, 2, 1, "", "set_fit_request"], [639, 2, 1, "", "set_params"], [639, 2, 1, "", "set_score_request"]], "sklearn.linear_model.SGDClassifier": [[640, 2, 1, "", "decision_function"], [640, 2, 1, "", "densify"], [640, 2, 1, "", "fit"], [640, 2, 1, "", "get_metadata_routing"], [640, 2, 1, "", "get_params"], [640, 2, 1, "", "partial_fit"], [640, 2, 1, "", "predict"], [640, 2, 1, "", "predict_log_proba"], [640, 2, 1, "", "predict_proba"], [640, 2, 1, "", "score"], [640, 2, 1, "", "set_fit_request"], [640, 2, 1, "", "set_params"], [640, 2, 1, "", "set_partial_fit_request"], [640, 2, 1, "", "set_score_request"], [640, 2, 1, "", "sparsify"]], "sklearn.linear_model.SGDOneClassSVM": [[641, 2, 1, "", "decision_function"], [641, 2, 1, "", "densify"], [641, 2, 1, "", "fit"], [641, 2, 1, "", "fit_predict"], [641, 2, 1, "", "get_metadata_routing"], [641, 2, 1, "", "get_params"], [641, 2, 1, "", "partial_fit"], [641, 2, 1, "", "predict"], [641, 2, 1, "", "score_samples"], [641, 2, 1, "", "set_fit_request"], [641, 2, 1, "", "set_params"], [641, 2, 1, "", "set_partial_fit_request"], [641, 2, 1, "", "sparsify"]], "sklearn.linear_model.SGDRegressor": [[642, 2, 1, "", "densify"], [642, 2, 1, "", "fit"], [642, 2, 1, "", "get_metadata_routing"], [642, 2, 1, "", "get_params"], [642, 2, 1, "", "partial_fit"], [642, 2, 1, "", "predict"], [642, 2, 1, "", "score"], [642, 2, 1, "", "set_fit_request"], [642, 2, 1, "", "set_params"], [642, 2, 1, "", "set_partial_fit_request"], [642, 2, 1, "", "set_score_request"], [642, 2, 1, "", "sparsify"]], "sklearn.linear_model.TheilSenRegressor": [[643, 2, 1, "", "fit"], [643, 2, 1, "", "get_metadata_routing"], [643, 2, 1, "", "get_params"], [643, 2, 1, "", "predict"], [643, 2, 1, "", "score"], [643, 2, 1, "", "set_params"], [643, 2, 1, "", "set_score_request"]], "sklearn.linear_model.TweedieRegressor": [[644, 2, 1, "", "fit"], [644, 2, 1, "", "get_metadata_routing"], [644, 2, 1, "", "get_params"], [644, 2, 1, "", "predict"], [644, 2, 1, "", "score"], [644, 2, 1, "", "set_fit_request"], [644, 2, 1, "", "set_params"], [644, 2, 1, "", "set_score_request"]], "sklearn.manifold": [[652, 1, 1, "", "Isomap"], [653, 1, 1, "", "LocallyLinearEmbedding"], [654, 1, 1, "", "MDS"], [655, 1, 1, "", "SpectralEmbedding"], [656, 1, 1, "", "TSNE"], [657, 4, 1, "", "locally_linear_embedding"], [658, 4, 1, "", "smacof"], [659, 4, 1, "", "spectral_embedding"], [660, 4, 1, "", "trustworthiness"]], "sklearn.manifold.Isomap": [[652, 2, 1, "", "fit"], [652, 2, 1, "", "fit_transform"], [652, 2, 1, "", "get_feature_names_out"], [652, 2, 1, "", "get_metadata_routing"], [652, 2, 1, "", "get_params"], [652, 2, 1, "", "reconstruction_error"], [652, 2, 1, "", "set_output"], [652, 2, 1, "", "set_params"], [652, 2, 1, "", "transform"]], "sklearn.manifold.LocallyLinearEmbedding": [[653, 2, 1, "", "fit"], [653, 2, 1, "", "fit_transform"], [653, 2, 1, "", "get_feature_names_out"], [653, 2, 1, "", "get_metadata_routing"], [653, 2, 1, "", "get_params"], [653, 2, 1, "", "set_output"], [653, 2, 1, "", "set_params"], [653, 2, 1, "", "transform"]], "sklearn.manifold.MDS": [[654, 2, 1, "", "fit"], [654, 2, 1, "", "fit_transform"], [654, 2, 1, "", "get_metadata_routing"], [654, 2, 1, "", "get_params"], [654, 2, 1, "", "set_fit_request"], [654, 2, 1, "", "set_params"]], "sklearn.manifold.SpectralEmbedding": [[655, 2, 1, "", "fit"], [655, 2, 1, "", "fit_transform"], [655, 2, 1, "", "get_metadata_routing"], [655, 2, 1, "", "get_params"], [655, 2, 1, "", "set_params"]], "sklearn.manifold.TSNE": [[656, 2, 1, "", "fit"], [656, 2, 1, "", "fit_transform"], [656, 2, 1, "", "get_feature_names_out"], [656, 2, 1, "", "get_metadata_routing"], [656, 2, 1, "", "get_params"], [656, 2, 1, "", "set_output"], [656, 2, 1, "", "set_params"]], "sklearn.metrics": [[661, 1, 1, "", "ConfusionMatrixDisplay"], [662, 1, 1, "", "DetCurveDisplay"], [663, 1, 1, "", "DistanceMetric"], [664, 1, 1, "", "PrecisionRecallDisplay"], [665, 1, 1, "", "PredictionErrorDisplay"], [666, 1, 1, "", "RocCurveDisplay"], [667, 4, 1, "", "accuracy_score"], [668, 4, 1, "", "adjusted_mutual_info_score"], [669, 4, 1, "", "adjusted_rand_score"], [670, 4, 1, "", "auc"], [671, 4, 1, "", "average_precision_score"], [672, 4, 1, "", "balanced_accuracy_score"], [673, 4, 1, "", "brier_score_loss"], [674, 4, 1, "", "calinski_harabasz_score"], [675, 4, 1, "", "check_scoring"], [676, 4, 1, "", "class_likelihood_ratios"], [677, 4, 1, "", "classification_report"], [372, 0, 0, "-", "cluster"], [680, 4, 1, "", "cohen_kappa_score"], [681, 4, 1, "", "completeness_score"], [682, 4, 1, "", "confusion_matrix"], [683, 4, 1, "", "consensus_score"], [684, 4, 1, "", "coverage_error"], [685, 4, 1, "", "d2_absolute_error_score"], [686, 4, 1, "", "d2_pinball_score"], [687, 4, 1, "", "d2_tweedie_score"], [688, 4, 1, "", "davies_bouldin_score"], [689, 4, 1, "", "dcg_score"], [690, 4, 1, "", "det_curve"], [691, 4, 1, "", "explained_variance_score"], [692, 4, 1, "", "f1_score"], [693, 4, 1, "", "fbeta_score"], [694, 4, 1, "", "fowlkes_mallows_score"], [695, 4, 1, "", "get_scorer"], [696, 4, 1, "", "get_scorer_names"], [697, 4, 1, "", "hamming_loss"], [698, 4, 1, "", "hinge_loss"], [699, 4, 1, "", "homogeneity_completeness_v_measure"], [700, 4, 1, "", "homogeneity_score"], [701, 4, 1, "", "jaccard_score"], [702, 4, 1, "", "label_ranking_average_precision_score"], [703, 4, 1, "", "label_ranking_loss"], [704, 4, 1, "", "log_loss"], [705, 4, 1, "", "make_scorer"], [706, 4, 1, "", "matthews_corrcoef"], [707, 4, 1, "", "max_error"], [708, 4, 1, "", "mean_absolute_error"], [709, 4, 1, "", "mean_absolute_percentage_error"], [710, 4, 1, "", "mean_gamma_deviance"], [711, 4, 1, "", "mean_pinball_loss"], [712, 4, 1, "", "mean_poisson_deviance"], [713, 4, 1, "", "mean_squared_error"], [714, 4, 1, "", "mean_squared_log_error"], [715, 4, 1, "", "mean_tweedie_deviance"], [716, 4, 1, "", "median_absolute_error"], [717, 4, 1, "", "multilabel_confusion_matrix"], [718, 4, 1, "", "mutual_info_score"], [719, 4, 1, "", "ndcg_score"], [720, 4, 1, "", "normalized_mutual_info_score"], [372, 0, 0, "-", "pairwise"], [741, 4, 1, "", "pairwise_distances"], [742, 4, 1, "", "pairwise_distances_argmin"], [743, 4, 1, "", "pairwise_distances_argmin_min"], [744, 4, 1, "", "pairwise_distances_chunked"], [745, 4, 1, "", "precision_recall_curve"], [746, 4, 1, "", "precision_recall_fscore_support"], [747, 4, 1, "", "precision_score"], [748, 4, 1, "", "r2_score"], [749, 4, 1, "", "rand_score"], [750, 4, 1, "", "recall_score"], [751, 4, 1, "", "roc_auc_score"], [752, 4, 1, "", "roc_curve"], [753, 4, 1, "", "root_mean_squared_error"], [754, 4, 1, "", "root_mean_squared_log_error"], [755, 4, 1, "", "silhouette_samples"], [756, 4, 1, "", "silhouette_score"], [757, 4, 1, "", "top_k_accuracy_score"], [758, 4, 1, "", "v_measure_score"], [759, 4, 1, "", "zero_one_loss"]], "sklearn.metrics.ConfusionMatrixDisplay": [[661, 2, 1, "", "from_estimator"], [661, 2, 1, "", "from_predictions"], [661, 2, 1, "", "plot"]], "sklearn.metrics.DetCurveDisplay": [[662, 2, 1, "", "from_estimator"], [662, 2, 1, "", "from_predictions"], [662, 2, 1, "", "plot"]], "sklearn.metrics.DistanceMetric": [[663, 2, 1, "", "get_metric"]], "sklearn.metrics.PrecisionRecallDisplay": [[664, 2, 1, "", "from_estimator"], [664, 2, 1, "", "from_predictions"], [664, 2, 1, "", "plot"]], "sklearn.metrics.PredictionErrorDisplay": [[665, 2, 1, "", "from_estimator"], [665, 2, 1, "", "from_predictions"], [665, 2, 1, "", "plot"]], "sklearn.metrics.RocCurveDisplay": [[666, 2, 1, "", "from_estimator"], [666, 2, 1, "", "from_predictions"], [666, 2, 1, "", "plot"]], "sklearn.metrics.cluster": [[678, 4, 1, "", "contingency_matrix"], [679, 4, 1, "", "pair_confusion_matrix"]], "sklearn.metrics.pairwise": [[721, 4, 1, "", "additive_chi2_kernel"], [722, 4, 1, "", "chi2_kernel"], [723, 4, 1, "", "cosine_distances"], [724, 4, 1, "", "cosine_similarity"], [725, 4, 1, "", "distance_metrics"], [726, 4, 1, "", "euclidean_distances"], [727, 4, 1, "", "haversine_distances"], [728, 4, 1, "", "kernel_metrics"], [729, 4, 1, "", "laplacian_kernel"], [730, 4, 1, "", "linear_kernel"], [731, 4, 1, "", "manhattan_distances"], [732, 4, 1, "", "nan_euclidean_distances"], [733, 4, 1, "", "paired_cosine_distances"], [734, 4, 1, "", "paired_distances"], [735, 4, 1, "", "paired_euclidean_distances"], [736, 4, 1, "", "paired_manhattan_distances"], [737, 4, 1, "", "pairwise_kernels"], [738, 4, 1, "", "polynomial_kernel"], [739, 4, 1, "", "rbf_kernel"], [740, 4, 1, "", "sigmoid_kernel"]], "sklearn.mixture": [[760, 1, 1, "", "BayesianGaussianMixture"], [761, 1, 1, "", "GaussianMixture"]], "sklearn.mixture.BayesianGaussianMixture": [[760, 2, 1, "", "fit"], [760, 2, 1, "", "fit_predict"], [760, 2, 1, "", "get_metadata_routing"], [760, 2, 1, "", "get_params"], [760, 2, 1, "", "predict"], [760, 2, 1, "", "predict_proba"], [760, 2, 1, "", "sample"], [760, 2, 1, "", "score"], [760, 2, 1, "", "score_samples"], [760, 2, 1, "", "set_params"]], "sklearn.mixture.GaussianMixture": [[761, 2, 1, "", "aic"], [761, 2, 1, "", "bic"], [761, 2, 1, "", "fit"], [761, 2, 1, "", "fit_predict"], [761, 2, 1, "", "get_metadata_routing"], [761, 2, 1, "", "get_params"], [761, 2, 1, "", "predict"], [761, 2, 1, "", "predict_proba"], [761, 2, 1, "", "sample"], [761, 2, 1, "", "score"], [761, 2, 1, "", "score_samples"], [761, 2, 1, "", "set_params"]], "sklearn.model_selection": [[762, 1, 1, "", "GridSearchCV"], [763, 1, 1, "", "GroupKFold"], [764, 1, 1, "", "GroupShuffleSplit"], [765, 1, 1, "", "HalvingGridSearchCV"], [766, 1, 1, "", "HalvingRandomSearchCV"], [767, 1, 1, "", "KFold"], [768, 1, 1, "", "LearningCurveDisplay"], [769, 1, 1, "", "LeaveOneGroupOut"], [770, 1, 1, "", "LeaveOneOut"], [771, 1, 1, "", "LeavePGroupsOut"], [772, 1, 1, "", "LeavePOut"], [773, 1, 1, "", "ParameterGrid"], [774, 1, 1, "", "ParameterSampler"], [775, 1, 1, "", "PredefinedSplit"], [776, 1, 1, "", "RandomizedSearchCV"], [777, 1, 1, "", "RepeatedKFold"], [778, 1, 1, "", "RepeatedStratifiedKFold"], [779, 1, 1, "", "ShuffleSplit"], [780, 1, 1, "", "StratifiedGroupKFold"], [781, 1, 1, "", "StratifiedKFold"], [782, 1, 1, "", "StratifiedShuffleSplit"], [783, 1, 1, "", "TimeSeriesSplit"], [784, 1, 1, "", "ValidationCurveDisplay"], [785, 4, 1, "", "check_cv"], [786, 4, 1, "", "cross_val_predict"], [787, 4, 1, "", "cross_val_score"], [788, 4, 1, "", "cross_validate"], [789, 4, 1, "", "learning_curve"], [790, 4, 1, "", "permutation_test_score"], [791, 4, 1, "", "train_test_split"], [792, 4, 1, "", "validation_curve"]], "sklearn.model_selection.GridSearchCV": [[762, 3, 1, "", "classes_"], [762, 2, 1, "", "decision_function"], [762, 2, 1, "", "fit"], [762, 2, 1, "", "get_metadata_routing"], [762, 2, 1, "", "get_params"], [762, 2, 1, "", "inverse_transform"], [762, 3, 1, "", "n_features_in_"], [762, 2, 1, "", "predict"], [762, 2, 1, "", "predict_log_proba"], [762, 2, 1, "", "predict_proba"], [762, 2, 1, "", "score"], [762, 2, 1, "", "score_samples"], [762, 2, 1, "", "set_params"], [762, 2, 1, "", "transform"]], "sklearn.model_selection.GroupKFold": [[763, 2, 1, "", "get_metadata_routing"], [763, 2, 1, "", "get_n_splits"], [763, 2, 1, "", "set_split_request"], [763, 2, 1, "", "split"]], "sklearn.model_selection.GroupShuffleSplit": [[764, 2, 1, "", "get_metadata_routing"], [764, 2, 1, "", "get_n_splits"], [764, 2, 1, "", "set_split_request"], [764, 2, 1, "", "split"]], "sklearn.model_selection.HalvingGridSearchCV": [[765, 3, 1, "", "classes_"], [765, 2, 1, "", "decision_function"], [765, 2, 1, "", "fit"], [765, 2, 1, "", "get_metadata_routing"], [765, 2, 1, "", "get_params"], [765, 2, 1, "", "inverse_transform"], [765, 3, 1, "", "n_features_in_"], [765, 2, 1, "", "predict"], [765, 2, 1, "", "predict_log_proba"], [765, 2, 1, "", "predict_proba"], [765, 2, 1, "", "score"], [765, 2, 1, "", "score_samples"], [765, 2, 1, "", "set_params"], [765, 2, 1, "", "transform"]], "sklearn.model_selection.HalvingRandomSearchCV": [[766, 3, 1, "", "classes_"], [766, 2, 1, "", "decision_function"], [766, 2, 1, "", "fit"], [766, 2, 1, "", "get_metadata_routing"], [766, 2, 1, "", "get_params"], [766, 2, 1, "", "inverse_transform"], [766, 3, 1, "", "n_features_in_"], [766, 2, 1, "", "predict"], [766, 2, 1, "", "predict_log_proba"], [766, 2, 1, "", "predict_proba"], [766, 2, 1, "", "score"], [766, 2, 1, "", "score_samples"], [766, 2, 1, "", "set_params"], [766, 2, 1, "", "transform"]], "sklearn.model_selection.KFold": [[767, 2, 1, "", "get_metadata_routing"], [767, 2, 1, "", "get_n_splits"], [767, 2, 1, "", "split"]], "sklearn.model_selection.LearningCurveDisplay": [[768, 2, 1, "", "from_estimator"], [768, 2, 1, "", "plot"]], "sklearn.model_selection.LeaveOneGroupOut": [[769, 2, 1, "", "get_metadata_routing"], [769, 2, 1, "", "get_n_splits"], [769, 2, 1, "", "set_split_request"], [769, 2, 1, "", "split"]], "sklearn.model_selection.LeaveOneOut": [[770, 2, 1, "", "get_metadata_routing"], [770, 2, 1, "", "get_n_splits"], [770, 2, 1, "", "split"]], "sklearn.model_selection.LeavePGroupsOut": [[771, 2, 1, "", "get_metadata_routing"], [771, 2, 1, "", "get_n_splits"], [771, 2, 1, "", "set_split_request"], [771, 2, 1, "", "split"]], "sklearn.model_selection.LeavePOut": [[772, 2, 1, "", "get_metadata_routing"], [772, 2, 1, "", "get_n_splits"], [772, 2, 1, "", "split"]], "sklearn.model_selection.PredefinedSplit": [[775, 2, 1, "", "get_metadata_routing"], [775, 2, 1, "", "get_n_splits"], [775, 2, 1, "", "split"]], "sklearn.model_selection.RandomizedSearchCV": [[776, 3, 1, "", "classes_"], [776, 2, 1, "", "decision_function"], [776, 2, 1, "", "fit"], [776, 2, 1, "", "get_metadata_routing"], [776, 2, 1, "", "get_params"], [776, 2, 1, "", "inverse_transform"], [776, 3, 1, "", "n_features_in_"], [776, 2, 1, "", "predict"], [776, 2, 1, "", "predict_log_proba"], [776, 2, 1, "", "predict_proba"], [776, 2, 1, "", "score"], [776, 2, 1, "", "score_samples"], [776, 2, 1, "", "set_params"], [776, 2, 1, "", "transform"]], "sklearn.model_selection.RepeatedKFold": [[777, 2, 1, "", "get_metadata_routing"], [777, 2, 1, "", "get_n_splits"], [777, 2, 1, "", "split"]], "sklearn.model_selection.RepeatedStratifiedKFold": [[778, 2, 1, "", "get_metadata_routing"], [778, 2, 1, "", "get_n_splits"], [778, 2, 1, "", "split"]], "sklearn.model_selection.ShuffleSplit": [[779, 2, 1, "", "get_metadata_routing"], [779, 2, 1, "", "get_n_splits"], [779, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedGroupKFold": [[780, 2, 1, "", "get_metadata_routing"], [780, 2, 1, "", "get_n_splits"], [780, 2, 1, "", "set_split_request"], [780, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedKFold": [[781, 2, 1, "", "get_metadata_routing"], [781, 2, 1, "", "get_n_splits"], [781, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedShuffleSplit": [[782, 2, 1, "", "get_metadata_routing"], [782, 2, 1, "", "get_n_splits"], [782, 2, 1, "", "split"]], "sklearn.model_selection.TimeSeriesSplit": [[783, 2, 1, "", "get_metadata_routing"], [783, 2, 1, "", "get_n_splits"], [783, 2, 1, "", "split"]], "sklearn.model_selection.ValidationCurveDisplay": [[784, 2, 1, "", "from_estimator"], [784, 2, 1, "", "plot"]], "sklearn.multiclass": [[793, 1, 1, "", "OneVsOneClassifier"], [794, 1, 1, "", "OneVsRestClassifier"], [795, 1, 1, "", "OutputCodeClassifier"]], "sklearn.multiclass.OneVsOneClassifier": [[793, 2, 1, "", "decision_function"], [793, 2, 1, "", "fit"], [793, 2, 1, "", "get_metadata_routing"], [793, 2, 1, "", "get_params"], [793, 3, 1, "", "n_classes_"], [793, 2, 1, "", "partial_fit"], [793, 2, 1, "", "predict"], [793, 2, 1, "", "score"], [793, 2, 1, "", "set_params"], [793, 2, 1, "", "set_partial_fit_request"], [793, 2, 1, "", "set_score_request"]], "sklearn.multiclass.OneVsRestClassifier": [[794, 2, 1, "", "decision_function"], [794, 2, 1, "", "fit"], [794, 2, 1, "", "get_metadata_routing"], [794, 2, 1, "", "get_params"], [794, 3, 1, "", "multilabel_"], [794, 3, 1, "", "n_classes_"], [794, 2, 1, "", "partial_fit"], [794, 2, 1, "", "predict"], [794, 2, 1, "", "predict_proba"], [794, 2, 1, "", "score"], [794, 2, 1, "", "set_params"], [794, 2, 1, "", "set_partial_fit_request"], [794, 2, 1, "", "set_score_request"]], "sklearn.multiclass.OutputCodeClassifier": [[795, 2, 1, "", "fit"], [795, 2, 1, "", "get_metadata_routing"], [795, 2, 1, "", "get_params"], [795, 2, 1, "", "predict"], [795, 2, 1, "", "score"], [795, 2, 1, "", "set_params"], [795, 2, 1, "", "set_score_request"]], "sklearn.multioutput": [[796, 1, 1, "", "ClassifierChain"], [797, 1, 1, "", "MultiOutputClassifier"], [798, 1, 1, "", "MultiOutputRegressor"], [799, 1, 1, "", "RegressorChain"]], "sklearn.multioutput.ClassifierChain": [[796, 2, 1, "", "decision_function"], [796, 2, 1, "", "fit"], [796, 2, 1, "", "get_metadata_routing"], [796, 2, 1, "", "get_params"], [796, 2, 1, "", "predict"], [796, 2, 1, "", "predict_log_proba"], [796, 2, 1, "", "predict_proba"], [796, 2, 1, "", "score"], [796, 2, 1, "", "set_params"], [796, 2, 1, "", "set_score_request"]], "sklearn.multioutput.MultiOutputClassifier": [[797, 2, 1, "", "fit"], [797, 2, 1, "", "get_metadata_routing"], [797, 2, 1, "", "get_params"], [797, 2, 1, "", "partial_fit"], [797, 2, 1, "", "predict"], [797, 2, 1, "", "predict_proba"], [797, 2, 1, "", "score"], [797, 2, 1, "", "set_fit_request"], [797, 2, 1, "", "set_params"], [797, 2, 1, "", "set_partial_fit_request"]], "sklearn.multioutput.MultiOutputRegressor": [[798, 2, 1, "", "fit"], [798, 2, 1, "", "get_metadata_routing"], [798, 2, 1, "", "get_params"], [798, 2, 1, "", "partial_fit"], [798, 2, 1, "", "predict"], [798, 2, 1, "", "score"], [798, 2, 1, "", "set_fit_request"], [798, 2, 1, "", "set_params"], [798, 2, 1, "", "set_partial_fit_request"], [798, 2, 1, "", "set_score_request"]], "sklearn.multioutput.RegressorChain": [[799, 2, 1, "", "fit"], [799, 2, 1, "", "get_metadata_routing"], [799, 2, 1, "", "get_params"], [799, 2, 1, "", "predict"], [799, 2, 1, "", "score"], [799, 2, 1, "", "set_params"], [799, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes": [[800, 1, 1, "", "BernoulliNB"], [801, 1, 1, "", "CategoricalNB"], [802, 1, 1, "", "ComplementNB"], [803, 1, 1, "", "GaussianNB"], [804, 1, 1, "", "MultinomialNB"]], "sklearn.naive_bayes.BernoulliNB": [[800, 2, 1, "", "fit"], [800, 2, 1, "", "get_metadata_routing"], [800, 2, 1, "", "get_params"], [800, 2, 1, "", "partial_fit"], [800, 2, 1, "", "predict"], [800, 2, 1, "", "predict_joint_log_proba"], [800, 2, 1, "", "predict_log_proba"], [800, 2, 1, "", "predict_proba"], [800, 2, 1, "", "score"], [800, 2, 1, "", "set_fit_request"], [800, 2, 1, "", "set_params"], [800, 2, 1, "", "set_partial_fit_request"], [800, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.CategoricalNB": [[801, 2, 1, "", "fit"], [801, 2, 1, "", "get_metadata_routing"], [801, 2, 1, "", "get_params"], [801, 2, 1, "", "partial_fit"], [801, 2, 1, "", "predict"], [801, 2, 1, "", "predict_joint_log_proba"], [801, 2, 1, "", "predict_log_proba"], [801, 2, 1, "", "predict_proba"], [801, 2, 1, "", "score"], [801, 2, 1, "", "set_fit_request"], [801, 2, 1, "", "set_params"], [801, 2, 1, "", "set_partial_fit_request"], [801, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.ComplementNB": [[802, 2, 1, "", "fit"], [802, 2, 1, "", "get_metadata_routing"], [802, 2, 1, "", "get_params"], [802, 2, 1, "", "partial_fit"], [802, 2, 1, "", "predict"], [802, 2, 1, "", "predict_joint_log_proba"], [802, 2, 1, "", "predict_log_proba"], [802, 2, 1, "", "predict_proba"], [802, 2, 1, "", "score"], [802, 2, 1, "", "set_fit_request"], [802, 2, 1, "", "set_params"], [802, 2, 1, "", "set_partial_fit_request"], [802, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.GaussianNB": [[803, 2, 1, "", "fit"], [803, 2, 1, "", "get_metadata_routing"], [803, 2, 1, "", "get_params"], [803, 2, 1, "", "partial_fit"], [803, 2, 1, "", "predict"], [803, 2, 1, "", "predict_joint_log_proba"], [803, 2, 1, "", "predict_log_proba"], [803, 2, 1, "", "predict_proba"], [803, 2, 1, "", "score"], [803, 2, 1, "", "set_fit_request"], [803, 2, 1, "", "set_params"], [803, 2, 1, "", "set_partial_fit_request"], [803, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.MultinomialNB": [[804, 2, 1, "", "fit"], [804, 2, 1, "", "get_metadata_routing"], [804, 2, 1, "", "get_params"], [804, 2, 1, "", "partial_fit"], [804, 2, 1, "", "predict"], [804, 2, 1, "", "predict_joint_log_proba"], [804, 2, 1, "", "predict_log_proba"], [804, 2, 1, "", "predict_proba"], [804, 2, 1, "", "score"], [804, 2, 1, "", "set_fit_request"], [804, 2, 1, "", "set_params"], [804, 2, 1, "", "set_partial_fit_request"], [804, 2, 1, "", "set_score_request"]], "sklearn.neighbors": [[805, 1, 1, "", "BallTree"], [806, 1, 1, "", "KDTree"], [807, 1, 1, "", "KNeighborsClassifier"], [808, 1, 1, "", "KNeighborsRegressor"], [809, 1, 1, "", "KNeighborsTransformer"], [810, 1, 1, "", "KernelDensity"], [811, 1, 1, "", "LocalOutlierFactor"], [812, 1, 1, "", "NearestCentroid"], [813, 1, 1, "", "NearestNeighbors"], [814, 1, 1, "", "NeighborhoodComponentsAnalysis"], [815, 1, 1, "", "RadiusNeighborsClassifier"], [816, 1, 1, "", "RadiusNeighborsRegressor"], [817, 1, 1, "", "RadiusNeighborsTransformer"], [818, 4, 1, "", "kneighbors_graph"], [819, 4, 1, "", "radius_neighbors_graph"], [820, 4, 1, "", "sort_graph_by_row_values"]], "sklearn.neighbors.BallTree": [[805, 2, 1, "", "get_arrays"], [805, 2, 1, "", "get_n_calls"], [805, 2, 1, "", "get_tree_stats"], [805, 2, 1, "", "kernel_density"], [805, 2, 1, "", "query"], [805, 2, 1, "", "query_radius"], [805, 2, 1, "", "reset_n_calls"], [805, 2, 1, "", "two_point_correlation"]], "sklearn.neighbors.KDTree": [[806, 2, 1, "", "get_arrays"], [806, 2, 1, "", "get_n_calls"], [806, 2, 1, "", "get_tree_stats"], [806, 2, 1, "", "kernel_density"], [806, 2, 1, "", "query"], [806, 2, 1, "", "query_radius"], [806, 2, 1, "", "reset_n_calls"], [806, 2, 1, "", "two_point_correlation"]], "sklearn.neighbors.KNeighborsClassifier": [[807, 2, 1, "", "fit"], [807, 2, 1, "", "get_metadata_routing"], [807, 2, 1, "", "get_params"], [807, 2, 1, "", "kneighbors"], [807, 2, 1, "", "kneighbors_graph"], [807, 2, 1, "", "predict"], [807, 2, 1, "", "predict_proba"], [807, 2, 1, "", "score"], [807, 2, 1, "", "set_params"], [807, 2, 1, "", "set_score_request"]], "sklearn.neighbors.KNeighborsRegressor": [[808, 2, 1, "", "fit"], [808, 2, 1, "", "get_metadata_routing"], [808, 2, 1, "", "get_params"], [808, 2, 1, "", "kneighbors"], [808, 2, 1, "", "kneighbors_graph"], [808, 2, 1, "", "predict"], [808, 2, 1, "", "score"], [808, 2, 1, "", "set_params"], [808, 2, 1, "", "set_score_request"]], "sklearn.neighbors.KNeighborsTransformer": [[809, 2, 1, "", "fit"], [809, 2, 1, "", "fit_transform"], [809, 2, 1, "", "get_feature_names_out"], [809, 2, 1, "", "get_metadata_routing"], [809, 2, 1, "", "get_params"], [809, 2, 1, "", "kneighbors"], [809, 2, 1, "", "kneighbors_graph"], [809, 2, 1, "", "set_output"], [809, 2, 1, "", "set_params"], [809, 2, 1, "", "transform"]], "sklearn.neighbors.KernelDensity": [[810, 2, 1, "", "fit"], [810, 2, 1, "", "get_metadata_routing"], [810, 2, 1, "", "get_params"], [810, 2, 1, "", "sample"], [810, 2, 1, "", "score"], [810, 2, 1, "", "score_samples"], [810, 2, 1, "", "set_fit_request"], [810, 2, 1, "", "set_params"]], "sklearn.neighbors.LocalOutlierFactor": [[811, 2, 1, "", "decision_function"], [811, 2, 1, "", "fit"], [811, 2, 1, "", "fit_predict"], [811, 2, 1, "", "get_metadata_routing"], [811, 2, 1, "", "get_params"], [811, 2, 1, "", "kneighbors"], [811, 2, 1, "", "kneighbors_graph"], [811, 2, 1, "", "predict"], [811, 2, 1, "", "score_samples"], [811, 2, 1, "", "set_params"]], "sklearn.neighbors.NearestCentroid": [[812, 2, 1, "", "fit"], [812, 2, 1, "", "get_metadata_routing"], [812, 2, 1, "", "get_params"], [812, 2, 1, "", "predict"], [812, 2, 1, "", "score"], [812, 2, 1, "", "set_params"], [812, 2, 1, "", "set_score_request"]], "sklearn.neighbors.NearestNeighbors": [[813, 2, 1, "", "fit"], [813, 2, 1, "", "get_metadata_routing"], [813, 2, 1, "", "get_params"], [813, 2, 1, "", "kneighbors"], [813, 2, 1, "", "kneighbors_graph"], [813, 2, 1, "", "radius_neighbors"], [813, 2, 1, "", "radius_neighbors_graph"], [813, 2, 1, "", "set_params"]], "sklearn.neighbors.NeighborhoodComponentsAnalysis": [[814, 2, 1, "", "fit"], [814, 2, 1, "", "fit_transform"], [814, 2, 1, "", "get_feature_names_out"], [814, 2, 1, "", "get_metadata_routing"], [814, 2, 1, "", "get_params"], [814, 2, 1, "", "set_output"], [814, 2, 1, "", "set_params"], [814, 2, 1, "", "transform"]], "sklearn.neighbors.RadiusNeighborsClassifier": [[815, 2, 1, "", "fit"], [815, 2, 1, "", "get_metadata_routing"], [815, 2, 1, "", "get_params"], [815, 2, 1, "", "predict"], [815, 2, 1, "", "predict_proba"], [815, 2, 1, "", "radius_neighbors"], [815, 2, 1, "", "radius_neighbors_graph"], [815, 2, 1, "", "score"], [815, 2, 1, "", "set_params"], [815, 2, 1, "", "set_score_request"]], "sklearn.neighbors.RadiusNeighborsRegressor": [[816, 2, 1, "", "fit"], [816, 2, 1, "", "get_metadata_routing"], [816, 2, 1, "", "get_params"], [816, 2, 1, "", "predict"], [816, 2, 1, "", "radius_neighbors"], [816, 2, 1, "", "radius_neighbors_graph"], [816, 2, 1, "", "score"], [816, 2, 1, "", "set_params"], [816, 2, 1, "", "set_score_request"]], "sklearn.neighbors.RadiusNeighborsTransformer": [[817, 2, 1, "", "fit"], [817, 2, 1, "", "fit_transform"], [817, 2, 1, "", "get_feature_names_out"], [817, 2, 1, "", "get_metadata_routing"], [817, 2, 1, "", "get_params"], [817, 2, 1, "", "radius_neighbors"], [817, 2, 1, "", "radius_neighbors_graph"], [817, 2, 1, "", "set_output"], [817, 2, 1, "", "set_params"], [817, 2, 1, "", "transform"]], "sklearn.neural_network": [[821, 1, 1, "", "BernoulliRBM"], [822, 1, 1, "", "MLPClassifier"], [823, 1, 1, "", "MLPRegressor"]], "sklearn.neural_network.BernoulliRBM": [[821, 2, 1, "", "fit"], [821, 2, 1, "", "fit_transform"], [821, 2, 1, "", "get_feature_names_out"], [821, 2, 1, "", "get_metadata_routing"], [821, 2, 1, "", "get_params"], [821, 2, 1, "", "gibbs"], [821, 2, 1, "", "partial_fit"], [821, 2, 1, "", "score_samples"], [821, 2, 1, "", "set_output"], [821, 2, 1, "", "set_params"], [821, 2, 1, "", "transform"]], "sklearn.neural_network.MLPClassifier": [[822, 2, 1, "", "fit"], [822, 2, 1, "", "get_metadata_routing"], [822, 2, 1, "", "get_params"], [822, 2, 1, "", "partial_fit"], [822, 2, 1, "", "predict"], [822, 2, 1, "", "predict_log_proba"], [822, 2, 1, "", "predict_proba"], [822, 2, 1, "", "score"], [822, 2, 1, "", "set_params"], [822, 2, 1, "", "set_partial_fit_request"], [822, 2, 1, "", "set_score_request"]], "sklearn.neural_network.MLPRegressor": [[823, 2, 1, "", "fit"], [823, 2, 1, "", "get_metadata_routing"], [823, 2, 1, "", "get_params"], [823, 2, 1, "", "partial_fit"], [823, 2, 1, "", "predict"], [823, 2, 1, "", "score"], [823, 2, 1, "", "set_params"], [823, 2, 1, "", "set_score_request"]], "sklearn.pipeline": [[824, 1, 1, "", "FeatureUnion"], [825, 1, 1, "", "Pipeline"], [826, 4, 1, "", "make_pipeline"], [827, 4, 1, "", "make_union"]], "sklearn.pipeline.FeatureUnion": [[824, 3, 1, "", "feature_names_in_"], [824, 2, 1, "", "fit"], [824, 2, 1, "", "fit_transform"], [824, 2, 1, "", "get_feature_names_out"], [824, 2, 1, "", "get_metadata_routing"], [824, 2, 1, "", "get_params"], [824, 3, 1, "", "n_features_in_"], [824, 2, 1, "", "set_output"], [824, 2, 1, "", "set_params"], [824, 2, 1, "", "transform"]], "sklearn.pipeline.Pipeline": [[825, 3, 1, "", "classes_"], [825, 2, 1, "", "decision_function"], [825, 3, 1, "", "feature_names_in_"], [825, 2, 1, "", "fit"], [825, 2, 1, "", "fit_predict"], [825, 2, 1, "", "fit_transform"], [825, 2, 1, "", "get_feature_names_out"], [825, 2, 1, "", "get_metadata_routing"], [825, 2, 1, "", "get_params"], [825, 2, 1, "", "inverse_transform"], [825, 3, 1, "", "n_features_in_"], [825, 3, 1, "", "named_steps"], [825, 2, 1, "", "predict"], [825, 2, 1, "", "predict_log_proba"], [825, 2, 1, "", "predict_proba"], [825, 2, 1, "", "score"], [825, 2, 1, "", "score_samples"], [825, 2, 1, "", "set_output"], [825, 2, 1, "", "set_params"], [825, 2, 1, "", "set_score_request"], [825, 2, 1, "", "transform"]], "sklearn.preprocessing": [[828, 1, 1, "", "Binarizer"], [829, 1, 1, "", "FunctionTransformer"], [830, 1, 1, "", "KBinsDiscretizer"], [831, 1, 1, "", "KernelCenterer"], [832, 1, 1, "", "LabelBinarizer"], [833, 1, 1, "", "LabelEncoder"], [834, 1, 1, "", "MaxAbsScaler"], [835, 1, 1, "", "MinMaxScaler"], [836, 1, 1, "", "MultiLabelBinarizer"], [837, 1, 1, "", "Normalizer"], [838, 1, 1, "", "OneHotEncoder"], [839, 1, 1, "", "OrdinalEncoder"], [840, 1, 1, "", "PolynomialFeatures"], [841, 1, 1, "", "PowerTransformer"], [842, 1, 1, "", "QuantileTransformer"], [843, 1, 1, "", "RobustScaler"], [844, 1, 1, "", "SplineTransformer"], [845, 1, 1, "", "StandardScaler"], [846, 1, 1, "", "TargetEncoder"], [847, 4, 1, "", "add_dummy_feature"], [848, 4, 1, "", "binarize"], [849, 4, 1, "", "label_binarize"], [850, 4, 1, "", "maxabs_scale"], [851, 4, 1, "", "minmax_scale"], [852, 4, 1, "", "normalize"], [853, 4, 1, "", "power_transform"], [854, 4, 1, "", "quantile_transform"], [855, 4, 1, "", "robust_scale"], [856, 4, 1, "", "scale"]], "sklearn.preprocessing.Binarizer": [[828, 2, 1, "", "fit"], [828, 2, 1, "", "fit_transform"], [828, 2, 1, "", "get_feature_names_out"], [828, 2, 1, "", "get_metadata_routing"], [828, 2, 1, "", "get_params"], [828, 2, 1, "", "set_output"], [828, 2, 1, "", "set_params"], [828, 2, 1, "", "set_transform_request"], [828, 2, 1, "", "transform"]], "sklearn.preprocessing.FunctionTransformer": [[829, 2, 1, "", "fit"], [829, 2, 1, "", "fit_transform"], [829, 2, 1, "", "get_feature_names_out"], [829, 2, 1, "", "get_metadata_routing"], [829, 2, 1, "", "get_params"], [829, 2, 1, "", "inverse_transform"], [829, 2, 1, "", "set_output"], [829, 2, 1, "", "set_params"], [829, 2, 1, "", "transform"]], "sklearn.preprocessing.KBinsDiscretizer": [[830, 2, 1, "", "fit"], [830, 2, 1, "", "fit_transform"], [830, 2, 1, "", "get_feature_names_out"], [830, 2, 1, "", "get_metadata_routing"], [830, 2, 1, "", "get_params"], [830, 2, 1, "", "inverse_transform"], [830, 2, 1, "", "set_fit_request"], [830, 2, 1, "", "set_output"], [830, 2, 1, "", "set_params"], [830, 2, 1, "", "transform"]], "sklearn.preprocessing.KernelCenterer": [[831, 2, 1, "", "fit"], [831, 2, 1, "", "fit_transform"], [831, 2, 1, "", "get_feature_names_out"], [831, 2, 1, "", "get_metadata_routing"], [831, 2, 1, "", "get_params"], [831, 2, 1, "", "set_fit_request"], [831, 2, 1, "", "set_output"], [831, 2, 1, "", "set_params"], [831, 2, 1, "", "set_transform_request"], [831, 2, 1, "", "transform"]], "sklearn.preprocessing.LabelBinarizer": [[832, 2, 1, "", "fit"], [832, 2, 1, "", "fit_transform"], [832, 2, 1, "", "get_metadata_routing"], [832, 2, 1, "", "get_params"], [832, 2, 1, "", "inverse_transform"], [832, 2, 1, "", "set_inverse_transform_request"], [832, 2, 1, "", "set_output"], [832, 2, 1, "", "set_params"], [832, 2, 1, "", "transform"]], "sklearn.preprocessing.LabelEncoder": [[833, 2, 1, "", "fit"], [833, 2, 1, "", "fit_transform"], [833, 2, 1, "", "get_metadata_routing"], [833, 2, 1, "", "get_params"], [833, 2, 1, "", "inverse_transform"], [833, 2, 1, "", "set_output"], [833, 2, 1, "", "set_params"], [833, 2, 1, "", "transform"]], "sklearn.preprocessing.MaxAbsScaler": [[834, 2, 1, "", "fit"], [834, 2, 1, "", "fit_transform"], [834, 2, 1, "", "get_feature_names_out"], [834, 2, 1, "", "get_metadata_routing"], [834, 2, 1, "", "get_params"], [834, 2, 1, "", "inverse_transform"], [834, 2, 1, "", "partial_fit"], [834, 2, 1, "", "set_output"], [834, 2, 1, "", "set_params"], [834, 2, 1, "", "transform"]], "sklearn.preprocessing.MinMaxScaler": [[835, 2, 1, "", "fit"], [835, 2, 1, "", "fit_transform"], [835, 2, 1, "", "get_feature_names_out"], [835, 2, 1, "", "get_metadata_routing"], [835, 2, 1, "", "get_params"], [835, 2, 1, "", "inverse_transform"], [835, 2, 1, "", "partial_fit"], [835, 2, 1, "", "set_output"], [835, 2, 1, "", "set_params"], [835, 2, 1, "", "transform"]], "sklearn.preprocessing.MultiLabelBinarizer": [[836, 2, 1, "", "fit"], [836, 2, 1, "", "fit_transform"], [836, 2, 1, "", "get_metadata_routing"], [836, 2, 1, "", "get_params"], [836, 2, 1, "", "inverse_transform"], [836, 2, 1, "", "set_output"], [836, 2, 1, "", "set_params"], [836, 2, 1, "", "transform"]], "sklearn.preprocessing.Normalizer": [[837, 2, 1, "", "fit"], [837, 2, 1, "", "fit_transform"], [837, 2, 1, "", "get_feature_names_out"], [837, 2, 1, "", "get_metadata_routing"], [837, 2, 1, "", "get_params"], [837, 2, 1, "", "set_output"], [837, 2, 1, "", "set_params"], [837, 2, 1, "", "set_transform_request"], [837, 2, 1, "", "transform"]], "sklearn.preprocessing.OneHotEncoder": [[838, 2, 1, "", "fit"], [838, 2, 1, "", "fit_transform"], [838, 2, 1, "", "get_feature_names_out"], [838, 2, 1, "", "get_metadata_routing"], [838, 2, 1, "", "get_params"], [838, 3, 1, "", "infrequent_categories_"], [838, 2, 1, "", "inverse_transform"], [838, 2, 1, "", "set_output"], [838, 2, 1, "", "set_params"], [838, 2, 1, "", "transform"]], "sklearn.preprocessing.OrdinalEncoder": [[839, 2, 1, "", "fit"], [839, 2, 1, "", "fit_transform"], [839, 2, 1, "", "get_feature_names_out"], [839, 2, 1, "", "get_metadata_routing"], [839, 2, 1, "", "get_params"], [839, 3, 1, "", "infrequent_categories_"], [839, 2, 1, "", "inverse_transform"], [839, 2, 1, "", "set_output"], [839, 2, 1, "", "set_params"], [839, 2, 1, "", "transform"]], "sklearn.preprocessing.PolynomialFeatures": [[840, 2, 1, "", "fit"], [840, 2, 1, "", "fit_transform"], [840, 2, 1, "", "get_feature_names_out"], [840, 2, 1, "", "get_metadata_routing"], [840, 2, 1, "", "get_params"], [840, 3, 1, "", "powers_"], [840, 2, 1, "", "set_output"], [840, 2, 1, "", "set_params"], [840, 2, 1, "", "transform"]], "sklearn.preprocessing.PowerTransformer": [[841, 2, 1, "", "fit"], [841, 2, 1, "", "fit_transform"], [841, 2, 1, "", "get_feature_names_out"], [841, 2, 1, "", "get_metadata_routing"], [841, 2, 1, "", "get_params"], [841, 2, 1, "", "inverse_transform"], [841, 2, 1, "", "set_output"], [841, 2, 1, "", "set_params"], [841, 2, 1, "", "transform"]], "sklearn.preprocessing.QuantileTransformer": [[842, 2, 1, "", "fit"], [842, 2, 1, "", "fit_transform"], [842, 2, 1, "", "get_feature_names_out"], [842, 2, 1, "", "get_metadata_routing"], [842, 2, 1, "", "get_params"], [842, 2, 1, "", "inverse_transform"], [842, 2, 1, "", "set_output"], [842, 2, 1, "", "set_params"], [842, 2, 1, "", "transform"]], "sklearn.preprocessing.RobustScaler": [[843, 2, 1, "", "fit"], [843, 2, 1, "", "fit_transform"], [843, 2, 1, "", "get_feature_names_out"], [843, 2, 1, "", "get_metadata_routing"], [843, 2, 1, "", "get_params"], [843, 2, 1, "", "inverse_transform"], [843, 2, 1, "", "set_output"], [843, 2, 1, "", "set_params"], [843, 2, 1, "", "transform"]], "sklearn.preprocessing.SplineTransformer": [[844, 2, 1, "", "fit"], [844, 2, 1, "", "fit_transform"], [844, 2, 1, "", "get_feature_names_out"], [844, 2, 1, "", "get_metadata_routing"], [844, 2, 1, "", "get_params"], [844, 2, 1, "", "set_fit_request"], [844, 2, 1, "", "set_output"], [844, 2, 1, "", "set_params"], [844, 2, 1, "", "transform"]], "sklearn.preprocessing.StandardScaler": [[845, 2, 1, "", "fit"], [845, 2, 1, "", "fit_transform"], [845, 2, 1, "", "get_feature_names_out"], [845, 2, 1, "", "get_metadata_routing"], [845, 2, 1, "", "get_params"], [845, 2, 1, "", "inverse_transform"], [845, 2, 1, "", "partial_fit"], [845, 2, 1, "", "set_fit_request"], [845, 2, 1, "", "set_inverse_transform_request"], [845, 2, 1, "", "set_output"], [845, 2, 1, "", "set_params"], [845, 2, 1, "", "set_partial_fit_request"], [845, 2, 1, "", "set_transform_request"], [845, 2, 1, "", "transform"]], "sklearn.preprocessing.TargetEncoder": [[846, 2, 1, "", "fit"], [846, 2, 1, "", "fit_transform"], [846, 2, 1, "", "get_feature_names_out"], [846, 2, 1, "", "get_metadata_routing"], [846, 2, 1, "", "get_params"], [846, 3, 1, "", "infrequent_categories_"], [846, 2, 1, "", "set_output"], [846, 2, 1, "", "set_params"], [846, 2, 1, "", "transform"]], "sklearn.random_projection": [[857, 1, 1, "", "GaussianRandomProjection"], [858, 1, 1, "", "SparseRandomProjection"], [859, 4, 1, "", "johnson_lindenstrauss_min_dim"]], "sklearn.random_projection.GaussianRandomProjection": [[857, 2, 1, "", "fit"], [857, 2, 1, "", "fit_transform"], [857, 2, 1, "", "get_feature_names_out"], [857, 2, 1, "", "get_metadata_routing"], [857, 2, 1, "", "get_params"], [857, 2, 1, "", "inverse_transform"], [857, 2, 1, "", "set_output"], [857, 2, 1, "", "set_params"], [857, 2, 1, "", "transform"]], "sklearn.random_projection.SparseRandomProjection": [[858, 2, 1, "", "fit"], [858, 2, 1, "", "fit_transform"], [858, 2, 1, "", "get_feature_names_out"], [858, 2, 1, "", "get_metadata_routing"], [858, 2, 1, "", "get_params"], [858, 2, 1, "", "inverse_transform"], [858, 2, 1, "", "set_output"], [858, 2, 1, "", "set_params"], [858, 2, 1, "", "transform"]], "sklearn.semi_supervised": [[860, 1, 1, "", "LabelPropagation"], [861, 1, 1, "", "LabelSpreading"], [862, 1, 1, "", "SelfTrainingClassifier"]], "sklearn.semi_supervised.LabelPropagation": [[860, 2, 1, "", "fit"], [860, 2, 1, "", "get_metadata_routing"], [860, 2, 1, "", "get_params"], [860, 2, 1, "", "predict"], [860, 2, 1, "", "predict_proba"], [860, 2, 1, "", "score"], [860, 2, 1, "", "set_params"], [860, 2, 1, "", "set_score_request"]], "sklearn.semi_supervised.LabelSpreading": [[861, 2, 1, "", "fit"], [861, 2, 1, "", "get_metadata_routing"], [861, 2, 1, "", "get_params"], [861, 2, 1, "", "predict"], [861, 2, 1, "", "predict_proba"], [861, 2, 1, "", "score"], [861, 2, 1, "", "set_params"], [861, 2, 1, "", "set_score_request"]], "sklearn.semi_supervised.SelfTrainingClassifier": [[862, 2, 1, "", "decision_function"], [862, 2, 1, "", "fit"], [862, 2, 1, "", "get_metadata_routing"], [862, 2, 1, "", "get_params"], [862, 2, 1, "", "predict"], [862, 2, 1, "", "predict_log_proba"], [862, 2, 1, "", "predict_proba"], [862, 2, 1, "", "score"], [862, 2, 1, "", "set_params"]], "sklearn.svm": [[865, 1, 1, "", "LinearSVC"], [866, 1, 1, "", "LinearSVR"], [867, 1, 1, "", "NuSVC"], [868, 1, 1, "", "NuSVR"], [869, 1, 1, "", "OneClassSVM"], [870, 1, 1, "", "SVC"], [871, 1, 1, "", "SVR"], [872, 4, 1, "", "l1_min_c"]], "sklearn.svm.LinearSVC": [[865, 2, 1, "", "decision_function"], [865, 2, 1, "", "densify"], [865, 2, 1, "", "fit"], [865, 2, 1, "", "get_metadata_routing"], [865, 2, 1, "", "get_params"], [865, 2, 1, "", "predict"], [865, 2, 1, "", "score"], [865, 2, 1, "", "set_fit_request"], [865, 2, 1, "", "set_params"], [865, 2, 1, "", "set_score_request"], [865, 2, 1, "", "sparsify"]], "sklearn.svm.LinearSVR": [[866, 2, 1, "", "fit"], [866, 2, 1, "", "get_metadata_routing"], [866, 2, 1, "", "get_params"], [866, 2, 1, "", "predict"], [866, 2, 1, "", "score"], [866, 2, 1, "", "set_fit_request"], [866, 2, 1, "", "set_params"], [866, 2, 1, "", "set_score_request"]], "sklearn.svm.NuSVC": [[867, 3, 1, "", "coef_"], [867, 2, 1, "", "decision_function"], [867, 2, 1, "", "fit"], [867, 2, 1, "", "get_metadata_routing"], [867, 2, 1, "", "get_params"], [867, 3, 1, "", "n_support_"], [867, 2, 1, "", "predict"], [867, 2, 1, "", "predict_log_proba"], [867, 2, 1, "", "predict_proba"], [867, 3, 1, "", "probA_"], [867, 3, 1, "", "probB_"], [867, 2, 1, "", "score"], [867, 2, 1, "", "set_fit_request"], [867, 2, 1, "", "set_params"], [867, 2, 1, "", "set_score_request"]], "sklearn.svm.NuSVR": [[868, 3, 1, "", "coef_"], [868, 2, 1, "", "fit"], [868, 2, 1, "", "get_metadata_routing"], [868, 2, 1, "", "get_params"], [868, 3, 1, "", "n_support_"], [868, 2, 1, "", "predict"], [868, 2, 1, "", "score"], [868, 2, 1, "", "set_fit_request"], [868, 2, 1, "", "set_params"], [868, 2, 1, "", "set_score_request"]], "sklearn.svm.OneClassSVM": [[869, 3, 1, "", "coef_"], [869, 2, 1, "", "decision_function"], [869, 2, 1, "", "fit"], [869, 2, 1, "", "fit_predict"], [869, 2, 1, "", "get_metadata_routing"], [869, 2, 1, "", "get_params"], [869, 3, 1, "", "n_support_"], [869, 2, 1, "", "predict"], [869, 2, 1, "", "score_samples"], [869, 2, 1, "", "set_fit_request"], [869, 2, 1, "", "set_params"]], "sklearn.svm.SVC": [[870, 3, 1, "", "coef_"], [870, 2, 1, "", "decision_function"], [870, 2, 1, "", "fit"], [870, 2, 1, "", "get_metadata_routing"], [870, 2, 1, "", "get_params"], [870, 3, 1, "", "n_support_"], [870, 2, 1, "", "predict"], [870, 2, 1, "", "predict_log_proba"], [870, 2, 1, "", "predict_proba"], [870, 3, 1, "", "probA_"], [870, 3, 1, "", "probB_"], [870, 2, 1, "", "score"], [870, 2, 1, "", "set_fit_request"], [870, 2, 1, "", "set_params"], [870, 2, 1, "", "set_score_request"]], "sklearn.svm.SVR": [[871, 3, 1, "", "coef_"], [871, 2, 1, "", "fit"], [871, 2, 1, "", "get_metadata_routing"], [871, 2, 1, "", "get_params"], [871, 3, 1, "", "n_support_"], [871, 2, 1, "", "predict"], [871, 2, 1, "", "score"], [871, 2, 1, "", "set_fit_request"], [871, 2, 1, "", "set_params"], [871, 2, 1, "", "set_score_request"]], "sklearn.tree": [[873, 1, 1, "", "DecisionTreeClassifier"], [874, 1, 1, "", "DecisionTreeRegressor"], [875, 1, 1, "", "ExtraTreeClassifier"], [876, 1, 1, "", "ExtraTreeRegressor"], [877, 4, 1, "", "export_graphviz"], [878, 4, 1, "", "export_text"], [879, 4, 1, "", "plot_tree"]], "sklearn.tree.DecisionTreeClassifier": [[873, 2, 1, "", "apply"], [873, 2, 1, "", "cost_complexity_pruning_path"], [873, 2, 1, "", "decision_path"], [873, 3, 1, "", "feature_importances_"], [873, 2, 1, "", "fit"], [873, 2, 1, "", "get_depth"], [873, 2, 1, "", "get_metadata_routing"], [873, 2, 1, "", "get_n_leaves"], [873, 2, 1, "", "get_params"], [873, 2, 1, "", "predict"], [873, 2, 1, "", "predict_log_proba"], [873, 2, 1, "", "predict_proba"], [873, 2, 1, "", "score"], [873, 2, 1, "", "set_fit_request"], [873, 2, 1, "", "set_params"], [873, 2, 1, "", "set_predict_proba_request"], [873, 2, 1, "", "set_predict_request"], [873, 2, 1, "", "set_score_request"]], "sklearn.tree.DecisionTreeRegressor": [[874, 2, 1, "", "apply"], [874, 2, 1, "", "cost_complexity_pruning_path"], [874, 2, 1, "", "decision_path"], [874, 3, 1, "", "feature_importances_"], [874, 2, 1, "", "fit"], [874, 2, 1, "", "get_depth"], [874, 2, 1, "", "get_metadata_routing"], [874, 2, 1, "", "get_n_leaves"], [874, 2, 1, "", "get_params"], [874, 2, 1, "", "predict"], [874, 2, 1, "", "score"], [874, 2, 1, "", "set_fit_request"], [874, 2, 1, "", "set_params"], [874, 2, 1, "", "set_predict_request"], [874, 2, 1, "", "set_score_request"]], "sklearn.tree.ExtraTreeClassifier": [[875, 2, 1, "", "apply"], [875, 2, 1, "", "cost_complexity_pruning_path"], [875, 2, 1, "", "decision_path"], [875, 3, 1, "", "feature_importances_"], [875, 2, 1, "", "fit"], [875, 2, 1, "", "get_depth"], [875, 2, 1, "", "get_metadata_routing"], [875, 2, 1, "", "get_n_leaves"], [875, 2, 1, "", "get_params"], [875, 2, 1, "", "predict"], [875, 2, 1, "", "predict_log_proba"], [875, 2, 1, "", "predict_proba"], [875, 2, 1, "", "score"], [875, 2, 1, "", "set_fit_request"], [875, 2, 1, "", "set_params"], [875, 2, 1, "", "set_predict_proba_request"], [875, 2, 1, "", "set_predict_request"], [875, 2, 1, "", "set_score_request"]], "sklearn.tree.ExtraTreeRegressor": [[876, 2, 1, "", "apply"], [876, 2, 1, "", "cost_complexity_pruning_path"], [876, 2, 1, "", "decision_path"], [876, 3, 1, "", "feature_importances_"], [876, 2, 1, "", "fit"], [876, 2, 1, "", "get_depth"], [876, 2, 1, "", "get_metadata_routing"], [876, 2, 1, "", "get_n_leaves"], [876, 2, 1, "", "get_params"], [876, 2, 1, "", "predict"], [876, 2, 1, "", "score"], [876, 2, 1, "", "set_fit_request"], [876, 2, 1, "", "set_params"], [876, 2, 1, "", "set_predict_request"], [876, 2, 1, "", "set_score_request"]], "sklearn.utils": [[880, 1, 1, "", "Bunch"], [881, 4, 1, "", "_safe_indexing"], [372, 0, 0, "-", "arrayfuncs"], [883, 4, 1, "", "as_float_array"], [884, 4, 1, "", "assert_all_finite"], [885, 4, 1, "", "check_X_y"], [886, 4, 1, "", "check_array"], [887, 4, 1, "", "check_consistent_length"], [888, 4, 1, "", "check_random_state"], [889, 4, 1, "", "check_scalar"], [372, 0, 0, "-", "class_weight"], [892, 4, 1, "", "deprecated"], [372, 0, 0, "-", "discovery"], [372, 0, 0, "-", "estimator_checks"], [898, 4, 1, "", "estimator_html_repr"], [372, 0, 0, "-", "extmath"], [905, 4, 1, "", "gen_batches"], [906, 4, 1, "", "gen_even_slices"], [372, 0, 0, "-", "graph"], [908, 4, 1, "", "indexable"], [372, 0, 0, "-", "metadata_routing"], [372, 0, 0, "-", "metaestimators"], [372, 0, 0, "-", "multiclass"], [918, 4, 1, "", "murmurhash3_32"], [372, 0, 0, "-", "parallel"], [921, 4, 1, "", "parallel_backend"], [372, 0, 0, "-", "random"], [923, 4, 1, "", "register_parallel_backend"], [924, 4, 1, "", "resample"], [925, 4, 1, "", "safe_mask"], [926, 4, 1, "", "safe_sqr"], [927, 4, 1, "", "shuffle"], [372, 0, 0, "-", "sparsefuncs"], [372, 0, 0, "-", "sparsefuncs_fast"], [372, 0, 0, "-", "validation"]], "sklearn.utils.Bunch": [[880, 2, 1, "", "clear"], [880, 2, 1, "", "copy"], [880, 2, 1, "", "fromkeys"], [880, 2, 1, "", "get"], [880, 2, 1, "", "items"], [880, 2, 1, "", "keys"], [880, 2, 1, "", "pop"], [880, 2, 1, "", "popitem"], [880, 2, 1, "", "setdefault"], [880, 2, 1, "", "update"], [880, 2, 1, "", "values"]], "sklearn.utils.arrayfuncs": [[882, 4, 1, "", "min_pos"]], "sklearn.utils.class_weight": [[890, 4, 1, "", "compute_class_weight"], [891, 4, 1, "", "compute_sample_weight"]], "sklearn.utils.discovery": [[893, 4, 1, "", "all_displays"], [894, 4, 1, "", "all_estimators"], [895, 4, 1, "", "all_functions"]], "sklearn.utils.estimator_checks": [[896, 4, 1, "", "check_estimator"], [897, 4, 1, "", "parametrize_with_checks"]], "sklearn.utils.extmath": [[899, 4, 1, "", "density"], [900, 4, 1, "", "fast_logdet"], [901, 4, 1, "", "randomized_range_finder"], [902, 4, 1, "", "randomized_svd"], [903, 4, 1, "", "safe_sparse_dot"], [904, 4, 1, "", "weighted_mode"]], "sklearn.utils.graph": [[907, 4, 1, "", "single_source_shortest_path_length"]], "sklearn.utils.metadata_routing": [[909, 1, 1, "", "MetadataRequest"], [910, 1, 1, "", "MetadataRouter"], [911, 1, 1, "", "MethodMapping"], [912, 4, 1, "", "get_routing_for_object"], [913, 4, 1, "", "process_routing"]], "sklearn.utils.metadata_routing.MetadataRequest": [[909, 2, 1, "", "consumes"]], "sklearn.utils.metadata_routing.MetadataRouter": [[910, 2, 1, "", "add"], [910, 2, 1, "", "add_self_request"], [910, 2, 1, "", "consumes"], [910, 2, 1, "", "route_params"], [910, 2, 1, "", "validate_metadata"]], "sklearn.utils.metadata_routing.MethodMapping": [[911, 2, 1, "", "add"], [911, 2, 1, "", "from_str"]], "sklearn.utils.metaestimators": [[914, 4, 1, "", "available_if"]], "sklearn.utils.multiclass": [[915, 4, 1, "", "is_multilabel"], [916, 4, 1, "", "type_of_target"], [917, 4, 1, "", "unique_labels"]], "sklearn.utils.parallel": [[919, 1, 1, "", "Parallel"], [920, 4, 1, "", "delayed"]], "sklearn.utils.parallel.Parallel": [[919, 2, 1, "", "dispatch_next"], [919, 2, 1, "", "dispatch_one_batch"], [919, 2, 1, "", "format"], [919, 2, 1, "", "print_progress"]], "sklearn.utils.random": [[922, 4, 1, "", "sample_without_replacement"]], "sklearn.utils.sparsefuncs": [[928, 4, 1, "", "incr_mean_variance_axis"], [929, 4, 1, "", "inplace_column_scale"], [930, 4, 1, "", "inplace_csr_column_scale"], [931, 4, 1, "", "inplace_row_scale"], [932, 4, 1, "", "inplace_swap_column"], [933, 4, 1, "", "inplace_swap_row"], [934, 4, 1, "", "mean_variance_axis"]], "sklearn.utils.sparsefuncs_fast": [[935, 4, 1, "", "inplace_csr_row_normalize_l1"], [936, 4, 1, "", "inplace_csr_row_normalize_l2"]], "sklearn.utils.validation": [[937, 4, 1, "", "check_is_fitted"], [938, 4, 1, "", "check_memory"], [939, 4, 1, "", "check_symmetric"], [940, 4, 1, "", "column_or_1d"], [941, 4, 1, "", "has_fit_parameter"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:function", "5": "py:attribute"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "function", "Python function"], "5": ["py", "attribute", "Python attribute"]}, "titleterms": {"about": [0, 357], "u": 0, "histori": [0, 991], "govern": [0, 360], "author": [0, 993], "document": [0, 8, 19, 150, 289, 290, 318, 319, 320, 345, 360, 972, 973, 976, 993, 996, 997, 1000, 1001], "team": [0, 344, 360], "contributor": [0, 344, 345, 360, 997, 998, 999, 1000, 1001], "experi": [0, 34, 344, 360], "commun": [0, 345, 360], "emeritu": 0, "core": [0, 8, 334, 344, 349, 351, 357, 360, 955], "develop": [0, 98, 99, 150, 215, 343, 346, 347, 348, 349, 352, 353, 354, 942, 989, 1009], "cite": 0, "scikit": [0, 215, 233, 287, 288, 289, 290, 291, 292, 293, 294, 331, 332, 343, 346, 347, 349, 350, 357, 360, 363, 372, 972, 973, 977, 978, 979, 984, 987], "learn": [0, 5, 12, 47, 87, 90, 136, 150, 152, 153, 154, 158, 200, 201, 202, 203, 214, 215, 233, 240, 268, 274, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 331, 332, 334, 341, 343, 345, 346, 347, 349, 350, 357, 360, 363, 372, 378, 380, 948, 950, 958, 966, 972, 973, 975, 977, 978, 979, 981, 984, 985, 986, 987, 988], "artwork": 0, "fund": 0, "past": 0, "sponsor": 0, "sprint": 0, "donat": 0, "project": [0, 80, 92, 95, 212, 345, 347, 357, 372, 965, 970, 972], "infrastructur": 0, "support": [0, 24, 111, 150, 175, 284, 287, 288, 289, 290, 292, 293, 294, 302, 305, 314, 357, 363, 364, 369, 371, 372, 380, 968, 969, 976, 985, 1010, 1011], "exampl": [3, 6, 9, 50, 56, 71, 81, 93, 99, 117, 144, 150, 177, 178, 185, 312, 316, 334, 339, 340, 350, 357, 362, 364, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 387, 390, 393, 396, 397, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 422, 424, 426, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 443, 446, 447, 448, 451, 452, 453, 454, 455, 456, 458, 459, 460, 462, 463, 464, 465, 466, 468, 470, 474, 475, 476, 477, 478, 479, 483, 484, 485, 486, 487, 488, 489, 490, 491, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 513, 514, 515, 516, 517, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 545, 546, 548, 551, 552, 553, 554, 555, 557, 558, 561, 563, 564, 566, 568, 569, 570, 571, 572, 574, 575, 577, 578, 579, 581, 582, 583, 586, 587, 589, 591, 592, 594, 595, 596, 597, 598, 599, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 616, 617, 619, 620, 621, 622, 623, 626, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 648, 652, 653, 654, 655, 656, 657, 661, 662, 664, 665, 666, 667, 668, 669, 670, 671, 673, 676, 677, 681, 682, 683, 690, 692, 695, 697, 698, 700, 701, 704, 705, 708, 709, 711, 712, 713, 715, 716, 718, 720, 724, 741, 742, 745, 747, 748, 749, 750, 751, 752, 753, 755, 756, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 776, 777, 778, 779, 780, 781, 782, 783, 784, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 798, 800, 802, 803, 804, 807, 808, 809, 810, 811, 812, 813, 814, 818, 821, 822, 823, 824, 825, 826, 829, 830, 832, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 851, 854, 858, 859, 861, 862, 863, 865, 867, 868, 869, 870, 871, 872, 873, 874, 879, 880, 888, 897, 899, 906, 910, 911, 912, 913, 914, 927, 937, 942, 945, 947, 948, 949, 950, 952, 953, 954, 956, 957, 958, 959, 960, 961, 963, 965, 966, 967, 968, 969, 970, 978, 984, 985, 986, 990, 993], "base": [3, 4, 79, 108, 109, 135, 150, 165, 214, 287, 288, 290, 292, 293, 294, 345, 372, 373, 377, 380, 382, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 949, 961, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010], "real": [3, 9, 71, 150, 340], "world": [3, 71, 150, 340], "dataset": [3, 4, 5, 8, 13, 23, 24, 26, 30, 41, 55, 59, 66, 79, 81, 82, 83, 84, 85, 87, 95, 101, 107, 110, 111, 121, 126, 137, 139, 141, 142, 144, 146, 150, 152, 153, 154, 160, 163, 165, 170, 181, 183, 190, 199, 201, 202, 208, 213, 218, 219, 236, 244, 245, 255, 257, 285, 300, 301, 304, 311, 319, 324, 337, 338, 339, 340, 341, 342, 350, 357, 372, 383, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 978, 984, 985, 987, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "time": [4, 13, 107, 175, 213, 214, 319, 377, 974], "relat": [4, 8, 339, 345, 961, 972, 1000], "featur": [4, 13, 48, 51, 70, 92, 106, 108, 109, 111, 115, 118, 119, 129, 131, 133, 134, 135, 150, 155, 156, 158, 160, 175, 178, 199, 213, 219, 239, 276, 279, 280, 283, 284, 287, 289, 290, 310, 319, 320, 332, 334, 345, 349, 364, 372, 374, 380, 381, 382, 943, 961, 963, 970, 986, 987, 996, 997, 998, 999, 1000], "engin": [4, 13, 155, 972, 977], "data": [4, 7, 9, 12, 17, 20, 23, 25, 32, 35, 44, 46, 47, 52, 54, 55, 60, 61, 63, 64, 66, 71, 73, 75, 77, 79, 80, 88, 89, 92, 93, 94, 102, 108, 109, 112, 115, 117, 121, 131, 134, 135, 143, 145, 149, 152, 155, 156, 158, 161, 167, 174, 175, 185, 209, 214, 221, 229, 233, 235, 239, 244, 245, 247, 248, 251, 261, 265, 270, 276, 278, 282, 283, 284, 294, 296, 307, 310, 314, 315, 320, 321, 328, 332, 334, 340, 350, 357, 359, 373, 374, 377, 382, 963, 967, 977, 978, 981, 984, 986, 987], "explor": 4, "bike": [4, 13, 154], "share": [4, 13, 154], "demand": [4, 13], "cross": [4, 78, 79, 126, 134, 150, 170, 233, 234, 236, 237, 241, 243, 248, 285, 310, 328, 372, 376, 377, 942, 949, 982], "valid": [4, 126, 134, 170, 212, 233, 234, 236, 237, 241, 243, 248, 253, 310, 328, 332, 347, 354, 372, 377, 937, 938, 939, 940, 941, 942, 948, 949, 956, 982], "gradient": [4, 107, 111, 112, 113, 114, 115, 116, 154, 181, 189, 195, 287, 288, 290, 292, 293, 380, 949, 967], "boost": [4, 107, 111, 112, 113, 114, 115, 116, 154, 181, 287, 288, 290, 292, 293, 380], "naiv": [4, 13, 23, 24, 372, 955], "linear": [4, 24, 31, 32, 114, 137, 150, 153, 159, 160, 177, 181, 184, 187, 201, 202, 213, 288, 306, 311, 313, 314, 332, 354, 357, 372, 947, 949, 950, 951, 963, 985], "regress": [4, 13, 69, 71, 79, 80, 102, 114, 115, 124, 137, 142, 143, 144, 145, 160, 161, 164, 170, 172, 173, 174, 177, 179, 181, 183, 196, 198, 199, 211, 214, 270, 314, 325, 326, 341, 372, 374, 380, 383, 944, 946, 949, 953, 954, 956, 957, 967, 968, 969, 985], "step": [4, 220, 358, 374], "categori": [4, 291, 293, 963], "trigonometr": 4, "period": [4, 182], "spline": [4, 182, 290, 963], "qualit": [4, 13], "analysi": [4, 31, 32, 57, 87, 94, 97, 101, 114, 154, 165, 224, 240, 241, 248, 266, 267, 268, 319, 372, 376, 378, 947, 956, 970, 986, 987], "impact": [4, 58, 1008, 1009, 1010], "model": [4, 7, 11, 13, 54, 71, 79, 88, 94, 107, 108, 109, 111, 112, 115, 117, 134, 135, 137, 142, 150, 153, 154, 155, 158, 159, 160, 165, 169, 170, 175, 181, 184, 199, 209, 214, 218, 219, 223, 225, 229, 230, 231, 237, 238, 240, 245, 257, 265, 270, 276, 283, 288, 290, 294, 311, 314, 319, 332, 347, 357, 358, 360, 367, 368, 372, 377, 942, 948, 949, 952, 953, 955, 957, 958, 978, 982, 985, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "predict": [4, 10, 13, 23, 80, 102, 114, 124, 138, 152, 161, 181, 214, 234, 245, 296, 332, 357, 358, 377, 383, 953, 964, 978, 985], "pairwis": [4, 238, 372, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 951], "interact": [4, 154, 292, 380, 985], "polynomi": [4, 158, 160, 161, 182, 311, 945, 949, 951, 963, 985], "non": [4, 15, 87, 114, 176, 181, 185, 201, 243, 306, 313, 314, 378, 949, 963], "kernel": [4, 5, 92, 137, 142, 143, 145, 146, 150, 157, 158, 213, 214, 262, 263, 271, 289, 303, 306, 311, 314, 372, 378, 379, 383, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 945, 946, 951, 963, 968, 985], "conclud": [4, 205], "remark": [4, 54, 205, 212], "imag": [5, 44, 47, 50, 63, 90, 339, 372, 381, 547, 548, 549, 550, 551], "denois": [5, 90], "us": [5, 6, 12, 17, 45, 87, 88, 90, 118, 119, 121, 135, 142, 168, 184, 195, 197, 238, 242, 247, 257, 279, 314, 319, 320, 327, 328, 334, 346, 350, 351, 353, 357, 372, 377, 378, 380, 381, 382, 387, 390, 393, 396, 397, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 422, 424, 426, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 443, 446, 447, 448, 451, 452, 453, 454, 455, 456, 458, 459, 460, 462, 463, 464, 465, 466, 468, 470, 474, 475, 476, 477, 478, 479, 483, 484, 485, 486, 487, 488, 489, 490, 491, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 513, 514, 515, 516, 517, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 545, 546, 548, 551, 552, 553, 554, 555, 557, 558, 561, 563, 564, 566, 568, 569, 570, 571, 572, 574, 575, 577, 578, 579, 581, 582, 583, 586, 587, 589, 591, 592, 594, 595, 596, 597, 598, 599, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 616, 617, 619, 620, 621, 622, 623, 626, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 648, 652, 653, 654, 655, 656, 657, 661, 662, 664, 665, 666, 667, 668, 669, 670, 671, 673, 676, 677, 681, 682, 683, 690, 692, 695, 697, 698, 700, 701, 704, 705, 708, 709, 711, 712, 713, 715, 716, 718, 720, 724, 741, 742, 745, 747, 748, 749, 750, 751, 752, 753, 755, 756, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 776, 777, 778, 779, 780, 781, 782, 783, 784, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 798, 800, 802, 803, 804, 807, 808, 809, 810, 811, 812, 813, 814, 818, 821, 822, 823, 824, 825, 826, 829, 830, 832, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 851, 854, 858, 859, 861, 862, 863, 865, 867, 868, 869, 870, 871, 872, 873, 874, 879, 880, 888, 897, 899, 906, 910, 911, 912, 913, 914, 927, 937, 947, 949, 950, 953, 957, 967, 968, 969, 977, 985, 987, 1003], "pca": [5, 55, 69, 83, 87, 88, 91, 92, 93, 94, 95, 283, 294, 378, 505, 970, 986], "refer": [5, 11, 24, 26, 75, 76, 90, 101, 104, 155, 158, 165, 169, 238, 243, 244, 255, 271, 339, 340, 370, 371, 372, 373, 375, 377, 378, 380, 381, 382, 383, 942, 943, 945, 946, 947, 949, 950, 951, 953, 954, 956, 957, 958, 959, 960, 961, 963, 965, 966, 967, 968], "load": [5, 7, 17, 47, 55, 83, 107, 109, 111, 115, 126, 135, 155, 174, 199, 202, 209, 213, 221, 239, 247, 248, 257, 261, 283, 284, 307, 310, 319, 320, 321, 338, 339, 350, 357, 381, 978, 986, 987], "via": [5, 13, 50, 169, 170, 199, 380, 945], "openml": [5, 284, 287, 339], "basi": [5, 146, 383, 945, 949, 985], "reconstruct": [5, 14, 90], "test": [5, 73, 130, 241, 244, 251, 319, 323, 343, 345, 347, 353, 354, 377, 978, 985, 987], "face": [6, 47, 87, 217, 340, 977, 983], "recognit": [6, 340, 342, 983], "eigenfac": [6, 87, 983], "svm": [6, 128, 131, 132, 158, 195, 213, 290, 301, 303, 304, 306, 307, 308, 309, 310, 311, 312, 313, 316, 317, 372, 865, 866, 867, 868, 869, 870, 871, 872, 949, 959, 967, 985, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "complex": [7, 210, 220, 237, 240, 298, 323, 332, 373, 949, 956, 957, 967, 968, 969], "influenc": [7, 10, 332], "benchmark": [7, 10, 55, 319], "choos": [7, 942, 978, 980, 982], "paramet": [7, 73, 114, 236, 289, 307, 315, 345, 347, 358, 359, 372, 374, 380, 942, 949, 953, 968, 978, 982, 987], "run": [7, 55, 242], "code": [7, 87, 96, 345, 347, 350, 351, 353, 378, 997, 998, 999, 1000, 1001], "plot": [7, 8, 10, 20, 23, 28, 32, 35, 38, 44, 46, 47, 54, 60, 61, 63, 64, 73, 77, 79, 83, 84, 85, 88, 89, 102, 107, 110, 115, 117, 121, 122, 123, 124, 126, 134, 149, 154, 160, 161, 165, 173, 174, 175, 185, 186, 190, 202, 209, 213, 218, 219, 221, 229, 234, 235, 240, 242, 245, 247, 251, 253, 257, 265, 276, 284, 287, 289, 290, 296, 304, 305, 310, 311, 319, 324, 352, 372, 948, 960, 990], "result": [7, 8, 20, 35, 44, 46, 47, 54, 55, 60, 61, 64, 73, 75, 77, 88, 89, 102, 107, 121, 124, 149, 158, 165, 186, 214, 218, 242, 251, 257, 265, 284, 314, 320, 328, 942], "conclus": [7, 13, 137, 165, 170, 255, 261, 285, 311], "out": [8, 113, 334, 353, 377, 942, 949, 955], "classif": [8, 25, 27, 28, 30, 31, 66, 84, 127, 138, 139, 140, 141, 145, 150, 197, 216, 241, 244, 245, 248, 257, 261, 269, 276, 287, 295, 300, 311, 319, 341, 372, 380, 383, 949, 953, 954, 956, 957, 967, 968, 969, 985, 987], "text": [8, 150, 210, 239, 300, 318, 319, 320, 321, 340, 372, 381, 552, 553, 554, 555, 987], "reuter": 8, "routin": [8, 333, 354], "main": [8, 181], "outlier": [9, 163, 198, 208, 218, 264, 265, 278, 372, 949, 959, 963], "detect": [9, 208, 218, 235, 264, 265, 953, 959, 968], "set": [9, 71, 73, 93, 121, 149, 185, 245, 307, 323, 357, 372, 377, 949, 978, 984, 985, 987], "first": [9, 34, 345], "second": [9, 34], "latenc": [10, 332], "helper": [10, 146, 202, 354], "function": [10, 32, 146, 171, 185, 186, 191, 202, 233, 251, 289, 310, 321, 354, 372, 377, 380, 383, 945, 949, 953, 968, 985, 1010], "bulk": [10, 332], "atom": [10, 332], "speed": [10, 351], "variou": [10, 49, 188, 206], "regressor": [10, 102, 114, 160, 185, 285, 287, 290, 372, 380], "n_featur": 10, "throughput": [10, 332], "speci": [11, 271, 340], "distribut": [11, 199, 201, 271, 282, 340, 363, 950, 963], "visual": [12, 55, 97, 112, 209, 214, 221, 233, 275, 288, 307, 372, 373, 374, 953, 990], "stock": [12, 983], "market": [12, 983], "structur": [12, 36, 44, 64, 145, 298, 327, 983], "retriev": [12, 287], "from": [12, 90, 135, 155, 284, 287, 333, 339, 343, 357, 372, 381, 953, 978, 985, 986, 987, 1003], "internet": 12, "graph": [12, 287, 354, 357, 372, 373, 381, 907], "cluster": [12, 19, 21, 33, 34, 35, 36, 37, 38, 41, 42, 44, 46, 49, 52, 53, 55, 57, 60, 61, 62, 63, 64, 87, 150, 291, 293, 320, 341, 370, 372, 373, 378, 384, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 678, 679, 953, 986, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "affin": [12, 35, 373, 951], "propag": [12, 35, 296, 297, 298, 373, 966], "embed": [12, 49, 201, 202, 212, 268, 380, 950], "2d": [12, 49, 89, 95, 154], "space": [12, 92, 374, 942, 950], "lag": 13, "seri": [13, 175, 377], "forecast": [13, 142], "analyz": [13, 942], "gener": [13, 20, 23, 32, 35, 44, 46, 52, 54, 60, 61, 63, 64, 73, 75, 77, 84, 85, 88, 89, 90, 108, 117, 131, 134, 137, 143, 144, 146, 150, 159, 160, 161, 165, 175, 181, 183, 214, 229, 235, 251, 265, 270, 276, 288, 296, 314, 315, 328, 341, 345, 359, 372, 378, 380, 949, 963, 973, 982], "panda": [13, 292, 350, 357], "evalu": [13, 34, 55, 58, 76, 181, 218, 239, 242, 276, 284, 320, 358, 368, 370, 373, 377, 380, 942, 948, 953, 987], "next": [13, 358], "hour": 13, "proper": [13, 142], "uncertainti": 13, "quantil": [13, 114, 183, 290, 291, 949], "A": [13, 20, 21, 44, 55, 60, 181, 290, 344, 351, 367, 377, 981, 984], "look": [13, 214, 314], "compress": [14, 50, 332], "sens": 14, "tomographi": 14, "l1": [14, 165, 172, 174, 197, 315, 382], "prior": [14, 146, 224], "lasso": [14, 165, 166, 167, 168, 169, 170, 175, 288, 616, 949], "topic": 15, "extract": [15, 70, 90, 199, 239, 320, 332, 334, 372, 381, 987], "neg": [15, 87, 135, 176, 378, 949], "matrix": [15, 17, 145, 162, 232, 372, 373, 378, 953], "factor": [15, 87, 94, 97, 264, 265, 378, 959], "latent": [15, 79, 378], "dirichlet": [15, 378, 952], "alloc": [15, 378], "libsvm": [16, 339], "gui": 16, "wikipedia": 17, "princip": [17, 80, 378, 970, 986], "eigenvector": 17, "download": [17, 121, 149, 339], "alreadi": 17, "disk": 17, "redirect": 17, "file": [17, 363, 381, 987], "comput": [17, 35, 44, 46, 60, 61, 64, 73, 107, 174, 186, 251, 331, 332, 372, 373, 374, 377, 960, 974], "adjac": 17, "singular": [17, 378], "vector": [17, 24, 50, 150, 302, 305, 314, 319, 321, 372, 381, 968, 985, 986], "random": [17, 87, 105, 107, 119, 120, 155, 156, 212, 221, 244, 246, 294, 328, 347, 354, 372, 377, 378, 380, 922, 942, 949, 965, 970], "svd": [17, 87, 378], "central": 17, "score": [17, 79, 107, 126, 134, 149, 160, 229, 237, 244, 245, 310, 364, 373, 377, 948, 953, 968, 982], "biclust": [18, 19, 20, 150, 341, 370, 372], "spectral": [19, 20, 21, 63, 201, 370, 373, 950], "co": [19, 21, 370], "algorithm": [19, 20, 21, 35, 41, 46, 52, 60, 61, 62, 201, 208, 351, 357, 947, 949, 954, 956, 957, 961, 969, 985], "demo": [20, 21, 35, 44, 46, 52, 55, 60, 62], "sampl": [20, 35, 52, 60, 73, 88, 89, 131, 162, 194, 214, 239, 251, 270, 288, 314, 317, 339, 354, 359, 372, 373, 380, 949], "fit": [20, 25, 54, 88, 94, 108, 109, 114, 115, 142, 160, 161, 162, 175, 178, 183, 187, 245, 257, 265, 270, 285, 314, 328, 347, 358, 364, 380, 955, 959, 978], "spectralbiclust": [20, 415], "calibr": [22, 23, 24, 25, 26, 114, 150, 181, 371, 372, 401, 402, 403, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010], "probabl": [23, 24, 25, 28, 123, 140, 371, 372, 380, 968], "classifi": [23, 24, 26, 29, 99, 124, 164, 220, 235, 257, 261, 287, 301, 304, 307, 319, 327, 371, 372, 380, 947, 956, 985, 987], "synthet": [23, 71, 160, 165, 235, 285, 350], "gaussian": [23, 24, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 150, 223, 224, 225, 228, 229, 230, 278, 372, 383, 952, 955, 963, 965], "bay": [23, 24, 372, 955], "curv": [24, 26, 161, 214, 221, 230, 235, 240, 245, 247, 253, 371, 948], "summari": [24, 112, 170, 320, 321, 993, 994, 995, 996, 997, 998, 999, 1000], "3": [25, 164, 293, 987, 1001, 1002, 1007, 1009], "class": [25, 34, 101, 103, 123, 164, 190, 195, 241, 245, 247, 290, 306, 309, 359, 372, 377, 380, 381, 953, 956, 959, 967, 968, 993, 994], "compar": [25, 39, 41, 59, 73, 79, 107, 120, 131, 158, 160, 167, 183, 188, 208, 214, 238, 246, 266, 274, 278, 284, 357], "comparison": [26, 29, 32, 40, 61, 75, 95, 111, 112, 130, 137, 201, 202, 214, 238, 249, 255, 321, 373, 949], "recogn": 30, "hand": 30, "written": 30, "digit": [30, 49, 55, 82, 127, 202, 276, 296, 297, 342, 984], "normal": [31, 158, 181, 278, 282, 372, 837, 852, 953, 963], "ledoit": [31, 74, 375], "wolf": [31, 74, 375], "oa": [31, 73, 74, 386, 439], "discrimin": [31, 32, 372, 947], "quadrat": [32, 383, 947], "covari": [32, 72, 73, 75, 76, 77, 150, 226, 372, 375, 386, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 947, 1001, 1005, 1006, 1007, 1009, 1010], "ellipsoid": [32, 225], "lda": [32, 95, 378, 947], "qda": [32, 947], "adjust": 34, "chanc": 34, "perform": [34, 40, 241, 283, 289, 291, 296, 320, 332, 345, 346, 373, 377, 987], "defin": [34, 44, 55, 64, 201, 233, 235, 236, 321, 953], "list": [34, 976], "metric": [34, 37, 114, 242, 369, 372, 373, 377, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 942, 951, 953, 956, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "fix": [34, 349, 993, 996, 997, 998, 999, 1000, 1006], "ground": [34, 160], "truth": [34, 160], "label": [34, 245, 296, 297, 298, 340, 341, 372, 373, 377, 380, 953, 964, 966], "grow": 34, "number": [34, 57, 111, 134, 250, 332, 347, 942, 943], "vari": [34, 273, 299, 373], "agglom": [36, 37, 49, 986], "without": [36, 266, 319], "differ": [37, 41, 59, 73, 146, 154, 278, 281, 284, 304, 311, 347, 357, 364, 373, 949, 985], "hierarch": [38, 44, 59, 64, 293, 373, 986], "dendrogram": 38, "birch": [39, 373, 406], "minibatchkmean": [39, 61, 87, 413], "bisect": [40, 373], "k": [40, 42, 45, 54, 55, 56, 58, 61, 64, 79, 261, 283, 320, 373, 377, 953, 956, 963, 985, 986], "mean": [40, 42, 45, 54, 55, 56, 58, 60, 61, 108, 109, 149, 155, 185, 320, 373, 953, 963, 986], "regular": [40, 73, 116, 153, 174, 185, 186, 273, 315, 949, 957], "toi": [41, 59, 208, 342], "segment": [43, 63], "pictur": 43, "greek": 43, "coin": [43, 44], "region": [43, 238], "ward": [44, 64, 373, 986], "an": [44, 56, 99, 149, 162, 170, 268, 287, 291, 357, 381, 942, 959, 978, 984, 985], "color": 45, "quantiz": [45, 50, 986], "dbscan": [46, 373, 384, 408], "onlin": [47, 188, 290, 291, 967], "dictionari": [47, 87, 90, 96, 378], "part": [47, 382], "agglomer": [48, 51, 970, 986], "origin": [50, 92, 244, 268, 278], "encod": [50, 111, 284, 285, 293, 963, 964], "strategi": [50, 236, 255, 274, 281, 293, 334, 372, 373, 953], "memori": [50, 294, 332, 351, 353, 373], "footprint": 50, "v": [51, 64, 73, 74, 76, 80, 92, 134, 154, 155, 163, 173, 199, 241, 247, 251, 252, 323, 373, 380, 943, 963, 978], "univari": [51, 79, 131, 310, 382, 943], "select": [51, 57, 68, 94, 126, 129, 131, 134, 135, 150, 169, 170, 175, 229, 231, 310, 357, 364, 368, 372, 377, 382, 942, 949, 982, 999], "hdbscan": [52, 293, 373, 410], "scale": [52, 153, 201, 204, 283, 315, 334, 856, 950, 959, 963, 970], "invari": [52, 241], "multi": [52, 101, 120, 154, 175, 190, 204, 217, 242, 245, 273, 326, 351, 372, 949, 950, 953, 957, 968, 969], "hyperparamet": [52, 142, 143, 239, 246, 255, 581], "robust": [52, 75, 76, 160, 184, 187, 328, 372, 375, 942, 949], "min_cluster_s": 52, "min_sampl": 52, "dbscan_clust": 52, "induct": 53, "demonstr": [54, 242, 281, 296], "assumpt": 54, "possibl": [54, 350], "solut": 54, "final": [54, 137], "handwritten": [55, 202, 342], "our": [55, 233, 236, 345], "reduc": [55, 332], "initi": [56, 58, 227], "silhouett": [57, 373], "kmean": [57, 61, 288, 411], "empir": [58, 76, 212, 375], "linkag": [59, 373], "method": [59, 70, 79, 100, 137, 150, 201, 203, 227, 254, 256, 359, 372, 373, 945, 959, 960, 986], "shift": [60, 373], "meanshift": [60, 412], "establish": [61, 158], "pariti": 61, "between": [61, 249, 949], "optic": [62, 342, 373, 414], "four": 63, "circl": 63, "two": [63, 103, 167, 219, 238], "unstructur": 64, "we": 64, "ar": [64, 290, 357], "nearest": [64, 150, 258, 259, 260, 261, 266, 269, 270, 287, 372, 943, 956, 985], "neighbor": [64, 150, 201, 258, 259, 260, 261, 266, 270, 283, 287, 372, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 943, 950, 956, 985, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010], "10": [64, 993], "pipelin": [65, 66, 68, 69, 121, 132, 150, 153, 210, 215, 220, 239, 284, 310, 347, 357, 358, 372, 374, 382, 824, 825, 826, 827, 970, 983, 987, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "composit": [65, 150, 372, 374, 942], "estim": [65, 72, 73, 74, 75, 76, 77, 98, 99, 104, 111, 113, 120, 143, 149, 150, 160, 184, 187, 210, 215, 217, 218, 228, 246, 255, 262, 263, 271, 287, 288, 289, 292, 294, 328, 347, 357, 358, 359, 369, 372, 374, 375, 377, 379, 380, 942, 943, 947, 949, 953, 968, 972, 980, 982, 984, 994, 1001, 1002, 1003], "column": [66, 67, 220], "transform": [66, 67, 68, 71, 79, 106, 119, 220, 289, 290, 291, 337, 357, 358, 374, 377, 956, 963, 964, 965, 986], "heterogen": [66, 374], "sourc": [66, 88, 343], "20": [66, 319, 340, 987, 1001], "newsgroup": [66, 319, 340, 987], "creat": [66, 94, 101, 185, 209, 245, 285, 310, 311, 357], "mix": 67, "type": [67, 224, 347, 359, 373, 978], "dimension": [68, 201, 204, 220, 267, 283, 320, 947, 950, 956, 970, 985], "reduct": [68, 201, 205, 220, 267, 283, 320, 947, 956, 970], "gridsearchcv": [68, 126, 242, 380, 762], "illustr": [68, 141, 146, 268, 383], "cach": [68, 260, 374], "within": 68, "chain": [69, 220, 257, 358, 374], "logist": [69, 164, 171, 172, 173, 174, 196, 197, 949, 985], "concaten": 70, "multipl": [70, 220, 242, 328, 352, 377, 942, 943, 953, 1001, 1002, 1011], "effect": [71, 152, 206, 278, 283, 299, 323, 956], "target": [71, 144, 199, 284, 285, 357, 359, 372, 374, 954, 963, 964], "shrinkag": [73, 375, 380, 947, 985], "ledoitwolf": [73, 437], "max": [73, 953], "likelihood": [73, 160, 161, 241, 953, 958], "approach": [73, 170, 238], "mahalanobi": [75, 956], "distanc": [75, 372, 956], "relev": [75, 165, 949], "minimum": [76, 375], "determin": [76, 165, 375, 949, 953], "spars": [77, 87, 96, 153, 165, 167, 196, 287, 294, 319, 320, 354, 372, 375, 378, 382, 963, 965, 967, 1010], "invers": [77, 375, 965], "decomposit": [78, 79, 86, 87, 104, 150, 341, 372, 376, 378, 385, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 986, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "variabl": [79, 152, 153, 333, 357, 372, 985], "canon": [79, 376], "symmetr": 79, "pl": 79, "scatter": [79, 83], "multivari": [79, 943], "respons": [79, 360], "pls2": 79, "pls1": 79, "cca": [79, 446], "mode": [79, 332, 343], "b": 79, "deflat": 79, "compon": [80, 87, 266, 267, 268, 378, 956, 970, 986], "partial": [80, 152, 154, 219, 960], "least": [80, 114, 170, 176, 179, 949], "squar": [80, 114, 146, 176, 179, 185, 383, 945, 949, 951, 953], "The": [80, 82, 83, 152, 153, 181, 206, 212, 236, 245, 255, 340, 349, 377, 381, 952, 953, 965, 985, 986], "one": [80, 111, 219, 949, 953], "power": [80, 181], "iri": [83, 93, 95, 110, 139, 190, 301, 304, 324, 342, 383, 984], "represent": [83, 154, 210, 288, 332, 347, 381, 986], "randomli": [84, 85], "multilabel": [85, 216, 257, 341, 354, 372, 953, 954, 978], "prepar": [87, 102, 112, 158, 201, 247, 248, 283, 307, 349], "nmf": [87, 291, 378, 504], "independ": [87, 378, 986], "fastica": [87, 88, 89, 385, 497], "minibatchsparsepca": [87, 378, 503], "center": [87, 963], "fa": [87, 94], "posit": [87, 290], "blind": 88, "separ": [88, 193, 308, 309], "ica": [88, 378, 986], "point": [89, 268], "cloud": 89, "distort": 90, "displai": [90, 186, 209, 210, 220, 292, 293, 294, 353, 990, 1009], "patch": [90, 381], "noisi": [90, 144, 185], "them": [90, 344], "increment": [91, 334, 378], "kernelpca": [92, 499], "probabilist": [94, 138, 378, 383], "precomput": [96, 162, 287, 378], "rotat": 97, "pattern": 97, "__sklearn_is_fitted__": 99, "api": [99, 221, 222, 287, 290, 292, 333, 347, 352, 359, 364, 369, 372, 993, 994, 995, 996, 997, 998, 999, 1000, 1003, 1010], "custom": [99, 236, 303, 381, 963, 968], "implement": [99, 167, 357, 373, 953, 956, 967, 968], "simpl": [99, 137, 215, 263, 351, 984], "ensembl": [100, 106, 110, 150, 291, 372, 380, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "adaboost": [101, 102, 103, 380], "decis": [101, 102, 110, 117, 122, 150, 213, 261, 293, 301, 311, 322, 323, 324, 325, 326, 327, 357, 360, 372, 969], "tree": [101, 102, 106, 108, 109, 110, 119, 150, 155, 181, 287, 292, 293, 294, 322, 323, 324, 325, 326, 327, 357, 372, 380, 382, 873, 874, 875, 876, 877, 878, 879, 956, 961, 969, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "train": [101, 102, 112, 115, 117, 124, 134, 185, 209, 214, 218, 219, 221, 229, 251, 255, 276, 284, 285, 289, 299, 307, 311, 319, 323, 324, 327, 377, 956, 966, 978, 985, 987], "adaboostclassifi": [101, 517], "converg": 101, "error": [101, 105, 112, 114, 126, 160, 185, 235, 251, 353, 363, 949, 953], "weight": [101, 160, 162, 194, 275, 288, 317, 364, 372, 380, 381], "weak": [101, 380], "learner": [101, 380], "decisiontre": 102, "singl": [104, 121, 199, 209, 341, 373, 943], "versu": [104, 195, 243, 301, 332], "bag": [104, 113, 319, 380, 381, 942, 987], "bia": 104, "varianc": [104, 179, 382, 953, 963], "oob": 105, "forest": [105, 107, 108, 109, 120, 155, 156, 218, 221, 294, 340, 380, 959], "histogram": [107, 288, 290, 292, 379, 380], "import": [108, 109, 115, 135, 155, 156, 213, 255, 283, 287, 380, 961], "decreas": [108, 109, 155], "impur": [108, 109, 155, 323, 961], "permut": [108, 155, 156, 244, 287, 377, 961], "pixel": 109, "parallel": [109, 333, 343, 351, 372, 373, 380, 919, 920, 942], "mdi": [109, 155], "surfac": [110, 213, 324], "categor": [111, 284, 289, 294, 357, 380, 955, 963], "am": [111, 218], "hous": [111, 218, 340], "drop": 111, "hot": 111, "ordin": 111, "nativ": [111, 284, 287, 289, 294], "limit": [111, 137, 332, 363, 367, 381], "split": [111, 289, 328, 377], "earli": [112, 189], "stop": [112, 189, 381, 967], "calcul": [112, 123], "interv": 114, "confid": 114, "tune": [114, 236, 239, 289, 942, 987], "hyper": [114, 236, 289, 372, 942], "preprocess": [115, 121, 150, 153, 154, 218, 220, 277, 293, 321, 328, 357, 372, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 963, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "devianc": [115, 953], "isolationforest": [117, 527], "discret": [117, 145, 279, 280, 963], "boundari": [117, 122, 261, 301, 311], "path": [117, 168, 174, 186, 327, 363], "length": [117, 363], "monoton": [118, 294, 380], "constraint": [118, 292, 294, 373, 380], "name": [118, 290, 357, 374], "specifi": [118, 357, 942], "hash": [119, 354, 381], "total": [119, 323, 380], "output": [120, 217, 278, 292, 294, 326, 969, 985], "meta": [120, 255, 289, 372, 380], "combin": [121, 209], "predictor": 121, "stack": [121, 287, 380], "make": [121, 124, 149, 345, 349, 360], "measur": [121, 241, 373, 953], "votingclassifi": [122, 123, 380, 533], "individu": [124, 154, 289, 960], "vote": [124, 380], "tutori": [125, 150, 971, 979, 981, 987], "exercis": [125, 126, 127, 128, 150, 982, 985, 987], "diabet": [126, 219, 342, 985], "appli": 126, "line": [126, 140], "show": [126, 247], "std": [126, 160], "bonu": 126, "how": [126, 328, 345, 351, 357], "much": 126, "can": [126, 357], "you": [126, 357], "trust": 126, "alpha": [126, 323], "f": [130, 953], "mutual": [130, 373], "inform": [130, 149, 169, 170, 349, 372, 373, 942, 949], "anova": [132, 310], "recurs": [133, 134, 382], "elimin": [133, 134, 382, 942], "sequenti": [135, 382], "coeffici": [135, 153, 160, 185, 186, 373, 953], "toler": 135, "valu": [135, 147, 148, 149, 150, 206, 215, 287, 293, 294, 327, 345, 378, 380, 943, 953, 961, 963, 969], "process": [136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 150, 153, 328, 360, 372, 383, 952, 981], "machin": [136, 150, 152, 153, 154, 276, 302, 353, 372, 958, 968, 978, 985], "ridg": [137, 161, 163, 179, 185, 186, 214, 285, 372, 636, 946, 949], "gpc": [138, 139, 140, 141, 383], "iso": [140, 245], "xor": [141, 383], "co2": 142, "level": [142, 143, 333, 373, 380], "mona": 142, "loa": 142, "gpr": [142, 143, 383], "build": [142, 149, 343, 345, 353, 374, 987, 1011], "design": 142, "extrapol": 142, "interpret": [142, 153, 185, 218, 257, 378, 380], "abil": 143, "nois": [143, 144, 161], "optimis": 143, "basic": [144, 199, 358, 375, 383], "introductori": 144, "free": 144, "sequenc": [145, 357], "similar": [145, 951, 953], "under": [145, 357, 989, 1009], "posterior": 146, "cookbook": 146, "radial": [146, 383, 945, 985], "ration": [146, 383], "quadradt": 146, "exp": [146, 383], "sine": [146, 230, 383], "dot": [146, 383], "product": [146, 199, 353, 357, 383, 585], "mat\u00e9rn": [146, 383], "miss": [147, 148, 149, 150, 287, 293, 294, 380, 943, 963, 969], "imput": [147, 148, 149, 150, 287, 372, 591, 592, 593, 594, 943, 963, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011], "variant": 148, "iterativeimput": [148, 591, 943], "befor": [149, 349], "replac": 149, "0": [149, 287, 288, 289, 290, 969, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "knn": [149, 287], "iter": [149, 250, 377, 942], "releas": [150, 286, 287, 288, 289, 290, 291, 292, 293, 294, 349, 363, 991], "highlight": [150, 286, 287, 288, 289, 290, 291, 292, 293, 294, 993, 996, 997, 1000, 1001], "mixtur": [150, 223, 224, 225, 228, 229, 230, 372, 760, 761, 952, 1001, 1002, 1006, 1007, 1009], "inspect": [150, 151, 362, 372, 595, 596, 597, 598, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "approxim": [150, 157, 158, 213, 258, 289, 372, 375, 945], "manifold": [150, 200, 201, 202, 203, 341, 372, 652, 653, 654, 655, 656, 657, 658, 659, 660, 950, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "miscellan": [150, 207, 372, 1001, 1002, 1003, 1004, 1005, 1006, 1009], "multiclass": [150, 196, 247, 254, 255, 287, 354, 371, 372, 793, 794, 795, 915, 916, 917, 953, 954, 978, 985, 1002, 1005, 1006, 1007], "multioutput": [150, 256, 372, 796, 797, 798, 799, 954, 1001, 1002, 1003, 1004, 1005, 1008, 1009, 1010], "neural": [150, 154, 272, 372, 957, 958], "network": [150, 154, 272, 372, 957, 958], "semi": [150, 295, 296, 300, 301, 372, 966], "supervis": [150, 295, 296, 300, 301, 372, 957, 966, 975, 985], "work": [150, 318, 332, 344, 357, 372, 987], "failur": [152, 942], "infer": 152, "causal": [152, 153], "simul": 152, "hourli": 152, "wage": [152, 153], "descript": 152, "incom": 152, "fulli": 152, "observ": [152, 985, 986], "lesson": [152, 153], "common": [153, 328, 359, 369, 381, 953], "pitfal": [153, 328], "matter": 153, "check": [153, 240, 287, 353, 369, 1001, 1002, 1003], "problem": [153, 378, 968, 969, 978, 983, 985, 986], "correl": [153, 156, 376, 953, 961], "numer": [153, 333, 347], "wrong": [153, 357], "depend": [154, 215, 219, 343, 960, 993, 1006, 1007], "condit": [154, 289, 960], "expect": [154, 289, 960], "preprocessor": 154, "1": [154, 178, 290, 291, 292, 293, 294, 357, 987, 993, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "wai": [154, 343, 345, 357], "layer": [154, 273, 957], "perceptron": [154, 273, 632, 949, 957], "ic": [154, 960], "pdp": 154, "3d": 154, "accuraci": [155, 213, 319, 323, 953], "": [155, 283, 285, 348, 357, 380, 953], "multicollinear": 156, "breast": [156, 342], "cancer": [156, 342], "handl": [156, 372, 943], "scalabl": [158, 240, 288], "partit": 158, "baselin": [158, 181], "bayesian": [160, 161, 224, 238, 372, 949, 952], "recov": 160, "true": [160, 161], "margin": [160, 161, 193, 308, 312], "log": [160, 161, 953], "expans": 160, "sinusoid": 161, "cubic": 161, "l": 161, "elast": [162, 166, 949], "net": [162, 166, 949], "gram": 162, "huberregressor": [163, 613], "strong": 163, "signal": [165, 378, 986], "automat": [165, 358, 949], "ard": [165, 949], "elasticnet": [165, 288, 610], "dens": 167, "lar": [168, 614, 949], "criteria": [169, 357, 949, 969], "aic": [170, 949], "bic": [170, 229, 949], "criterion": [170, 289, 942, 967], "coordin": 170, "descent": [170, 189, 195, 949, 967], "angl": [170, 949], "penalti": [172, 192, 315], "sparsiti": [172, 178, 381, 985], "multinomi": [173, 197, 949, 955], "One": [173, 195, 247, 290, 306, 377, 959, 967], "rest": [173, 247], "joint": 175, "task": [175, 372, 949, 972], "onli": [178, 198, 1004, 1006], "2": [178, 292, 987, 996, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "ordinari": [179, 949], "orthogon": [180, 949], "match": [180, 949], "pursuit": [180, 949], "poisson": [181, 199, 288, 289, 953], "loss": [181, 191, 288, 291, 293, 380, 953, 1010], "french": 181, "motor": 181, "third": [181, 215, 363], "parti": [181, 215, 363], "liabil": 181, "claim": [181, 199], "constant": [181, 943], "rank": [181, 372, 953], "takeawai": 181, "interpol": 182, "quantileregressor": [183, 634], "linearregress": [183, 621], "ransac": [184, 949], "l2": [185, 315], "purpos": [185, 321, 973], "thi": [185, 973], "solver": [188, 378, 949], "stochast": [189, 195, 201, 274, 949, 950, 958, 967], "sgd": [190, 191, 192, 193, 194, 949, 967], "convex": 191, "maximum": [193, 308, 958], "hyperplan": [193, 308, 309], "20newgroup": 196, "mnist": [197, 275], "theil": [198, 949], "sen": [198, 949], "y": [198, 357, 964, 966], "direct": 198, "x": 198, "tweedi": [199, 953], "insur": 199, "definit": [199, 276, 960, 1003], "frequenc": [199, 987], "sever": [199, 203], "gamma": [199, 293, 953], "pure": 199, "premium": 199, "tweedieregressor": [199, 644], "local": [201, 202, 264, 265, 950, 959], "isomap": [201, 202, 652, 950], "multidimension": 201, "t": [201, 206, 950], "techniqu": 202, "sphere": 203, "swiss": 205, "roll": [205, 347], "And": [205, 360], "hole": 205, "sne": [206, 950], "perplex": 206, "shape": [206, 978], "anomali": 208, "object": [209, 233, 347, 357, 372, 942, 953, 984, 990], "confusionmatrixdisplai": [209, 661], "roccurvedisplai": [209, 666], "precisionrecalldisplai": [209, 664], "compact": 210, "rich": [210, 288], "html": [210, 347], "isoton": [211, 371, 372, 599, 600, 601, 944, 1001, 1002, 1003, 1005, 1007, 1008], "johnson": [212, 965], "lindenstrauss": [212, 965], "bound": 212, "theoret": 212, "explicit": 213, "map": [213, 282, 963], "rbf": [213, 306, 307, 311, 383, 586, 951, 968, 985], "python": [213, 333, 351, 367, 971, 972], "packag": [213, 972, 1005], "svr": [214, 314, 871, 968], "construct": 214, "metadata": [215, 293, 294, 319, 359, 364, 372, 1010, 1011], "rout": [215, 293, 294, 359, 364, 372, 1010, 1011], "router": 215, "consum": 215, "deprec": [215, 345, 372, 892, 1003], "default": [215, 265, 345], "chang": [215, 345, 360, 977, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "complet": [217, 373], "kddcup99": 218, "sa": 218, "covertyp": [218, 340], "cardiotocographi": 218, "ablat": 218, "studi": 218, "advanc": [219, 343, 364], "With": [219, 987], "togeth": [219, 247, 983, 986], "grid": [220, 236, 238, 246, 249, 942, 982, 987], "search": [220, 236, 238, 246, 249, 255, 358, 942, 982, 987], "over": 220, "roc": [221, 235, 247, 248, 287, 953], "svc": [221, 311, 315, 870, 968], "introduc": 222, "set_output": [222, 292, 294, 347], "concentr": 224, "variat": [224, 952], "gmm": [226, 227], "densiti": [228, 262, 263, 271, 293, 379, 899, 968], "best": [229, 346, 357], "confus": [232, 373, 953], "behavior": 233, "indic": 233, "mani": [233, 292, 333, 357], "cv": [233, 328], "tradeoff": [235, 953], "det": [235, 953], "refit": [236, 978], "balanc": [237, 953], "statist": [238, 972, 981, 984], "frequentist": 238, "practic": [238, 328, 346, 350, 950, 957, 967, 968, 969], "equival": 238, "all": [238, 247, 291, 363, 983, 1008, 1009, 1010], "take": 238, "home": 238, "messag": 238, "ratio": [241, 953], "pre": [241, 328, 358], "post": [241, 323], "respect": 241, "preval": 241, "cross_val_scor": [242, 787], "nest": [243, 374, 982], "see": [243, 374], "also": [243, 349, 374], "signific": 244, "precis": [245, 953], "recal": [245, 953], "In": 245, "binari": [245, 257, 949, 953], "averag": [245, 247, 373, 380, 953], "micro": [245, 247], "each": [245, 250, 319, 942], "f1": 245, "receiv": [247, 248, 953], "oper": [247, 248, 344, 354, 372, 383, 953], "characterist": [247, 248, 953], "specif": [247, 343, 347, 367, 942, 972, 973], "ovr": 247, "macro": 247, "ovo": 247, "success": [249, 250, 289, 942], "halv": [249, 250, 289, 942], "candid": [250, 942], "amount": [250, 942], "resourc": [250, 333, 345, 942, 971, 976], "underfit": 252, "overfit": 252, "overview": [255, 352, 373, 959], "yeast": 255, "uci": 255, "logisticregress": [257, 622], "wrap": 257, "onevsrestclassifi": [257, 794, 954], "tsne": [258, 656], "1d": 263, "novelti": [264, 959, 968], "lof": [264, 265], "neighborhood": [266, 267, 268, 956], "centroid": [269, 956], "mlpclassifi": [274, 822], "mlp": 275, "restrict": [276, 958], "boltzmann": [276, 958], "scaler": 278, "standardscal": [278, 845], "minmaxscal": [278, 835], "maxabsscal": [278, 834], "robustscal": [278, 843], "powertransform": [278, 841], "quantiletransform": [278, 842], "uniform": [278, 963], "kbinsdiscret": [279, 281, 830], "continu": [279, 345], "rescal": 283, "other": [284, 339, 357, 380, 972, 993], "intern": 285, "22": [287, 1003], "new": [287, 289, 290, 292, 293, 345, 357, 971, 993, 994, 996, 997, 998, 999, 1000], "prune": [287, 323, 969], "datafram": [287, 294, 357, 1010], "compat": [287, 345, 347, 369, 372], "auc": [287, 670], "now": [287, 290, 1003], "23": [288, 1004], "stabil": 288, "improv": [288, 289, 290, 291, 292, 294, 344, 345, 996, 997], "24": [289, 1005], "histgradientboost": [289, 294], "self": [289, 299, 966], "sequentialfeatureselector": [289, 566], "polynomialcountsketch": [289, 604], "decisiontreeregressor": [289, 874], "keyword": [290, 1004, 1006], "argument": [290, 347, 1004, 1006], "more": [290, 343, 357, 367, 957], "flexibl": [290, 943], "stabl": 290, "histgradientboostingregressor": [291, 526], "get_feature_names_out": 291, "avail": [291, 942, 990], "group": [291, 293, 377, 977, 986], "infrequ": [291, 293, 963], "onehotencod": [291, 838], "minibatchnmf": [291, 502], "version": [291, 339, 343, 349, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "bisectingkmean": [291, 407], "divid": 291, "enhanc": [292, 360, 972, 996, 997, 998, 999, 1000], "faster": [292, 380], "parser": [292, 339], "fetch_openml": [292, 460], "experiment": [292, 349, 369, 372, 543, 544, 1009], "arrai": [292, 327, 354, 369, 372, 978, 1010], "lineardiscriminantanalysi": [292, 513], "effici": [292, 294, 354], "targetencod": [293, 846], "model_select": [293, 372, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "validationcurvedisplai": [293, 784], "ordinalencod": [293, 839], "4": [294, 993, 1001, 1010], "dtype": 294, "polar": 294, "add": [294, 357], "enrich": 294, "runtim": [294, 343], "most": 296, "uncertain": 296, "activ": 297, "threshold": 299, "linearsvc": [305, 865], "unbalanc": [309, 968], "some": 310, "plai": 310, "percentil": 310, "sigmoid": [311, 371, 951, 985], "case": [315, 949, 953], "tie": 316, "break": 316, "word": [319, 381, 987], "strip": 319, "quantifi": [320, 953], "qualiti": [320, 953], "tfidfvector": [320, 321, 555], "lsa": 320, "top": [320, 953], "term": [320, 359, 381], "per": 320, "hashingvector": [320, 553], "featurehash": [321, 546], "dictvector": [321, 545], "special": 321, "cost": [323, 969], "leav": [323, 377, 949], "understand": 327, "what": [327, 357], "i": [327, 350, 357, 377, 977], "here": [327, 987], "recommend": [328, 340, 972], "inconsist": 328, "leakag": 328, "avoid": [328, 374], "dure": 328, "control": [328, 380, 957], "none": 328, "randomst": 328, "instanc": [328, 334], "repeat": [328, 374, 377], "call": [328, 344], "splitter": [328, 372], "subtleti": 328, "get": [328, 357, 358], "reproduc": [328, 350], "across": 328, "execut": [328, 357], "configur": [332, 333], "overhead": 332, "input": [332, 347, 369, 372, 373, 963], "tip": [332, 346, 353, 942, 950, 957, 967, 968, 969], "trick": [332, 351, 353, 381], "algebra": [332, 354], "librari": [332, 333], "reshap": [332, 984], "link": [332, 339, 953], "manag": [333, 363], "higher": 333, "joblib": [333, 351], "lower": 333, "openmp": [333, 346], "numpi": [333, 350], "scipi": [333, 1010], "oversubscript": 333, "spawn": 333, "too": 333, "thread": 333, "switch": 333, "environ": 333, "sklearn_assume_finit": 333, "sklearn_working_memori": 333, "sklearn_se": 333, "sklearn_tests_global_random_se": 333, "sklearn_skip_network_test": 333, "sklearn_run_float32_test": 333, "sklearn_enable_debug_cython_direct": 333, "sklearn_build_enable_debug_symbol": 333, "sklearn_pairwise_dist_chunk_s": 333, "sklearn_warnings_as_error": 333, "computation": 334, "bigger": 334, "stream": 334, "note": [334, 369, 377], "util": [338, 350, 354, 372, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 987, 990, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "svmlight": 339, "format": [339, 350, 357, 367, 954], "org": [339, 349, 977], "repositori": 339, "arff": 339, "extern": [339, 971, 978, 993, 1002], "olivetti": 340, "consider": 340, "wild": 340, "rcv1": 340, "kddcup": 340, "99": 340, "california": 340, "plant": 342, "linnerrud": 342, "wine": 342, "wisconsin": 342, "diagnost": 342, "instal": [343, 363], "nightli": 343, "tag": [343, 345, 347], "edit": 343, "meson": [343, 1011], "simplest": 343, "platform": [343, 353, 363], "instruct": 343, "window": [343, 363], "maco": 343, "compil": [343, 351], "conda": 343, "forg": 343, "homebrew": 343, "linux": [343, 357, 363], "system": 343, "freebsd": 343, "altern": [343, 942], "bug": [344, 345, 349, 976, 996, 997, 998, 999, 1000, 1001, 1002], "triag": 344, "issu": [344, 345], "curat": 344, "fruit": 344, "discuss": 344, "pr": [344, 349], "help": [344, 345, 357], "review": [344, 345, 353, 987], "member": 344, "close": 344, "tough": 344, "typic": 344, "workflow": [344, 345], "contribut": [345, 357], "submit": 345, "report": [345, 350, 953], "request": [345, 349, 353, 357], "good": [345, 350], "video": [345, 971], "git": 345, "pull": [345, 349, 353, 357], "checklist": [345, 349], "integr": 345, "ci": 345, "stall": 345, "unclaim": 345, "easi": 345, "want": 345, "github": 345, "action": 345, "coverag": [345, 353, 953], "write": 345, "matplotlib": 345, "monitor": 345, "tracker": [345, 976], "maintain": [345, 349, 360, 367], "backward": 345, "guidelin": [345, 347], "read": 345, "exist": 345, "cython": [346, 351, 353], "convent": [346, 978], "knowledg": 346, "eas": 346, "instanti": 347, "attribut": [347, 359, 942], "option": 347, "univers": 347, "your": [347, 350, 953], "own": [347, 357, 953], "templat": 347, "baseestim": [347, 387], "mixin": 347, "get_param": 347, "set_param": 347, "init": 347, "clone": [347, 398], "check_is_fit": [347, 937], "assert": 347, "guid": [348, 989], "major": [349, 380, 1001, 1002], "minor": 349, "known": [349, 1001, 1002], "merg": 349, "web": 349, "site": 349, "craft": 350, "minim": [350, 969, 1006, 1007], "provid": 350, "fail": 350, "comment": 350, "boil": 350, "down": 350, "script": 350, "someth": 350, "small": 350, "do": [350, 357], "NOT": 350, "unless": 350, "extrem": [350, 380], "necessari": 350, "markdown": 350, "make_regress": [350, 488], "make_classif": [350, 479], "make_blob": [350, 476], "optim": [351, 372, 942], "c": 351, "profil": 351, "usag": [351, 357, 364, 369, 371, 374, 380, 381, 949], "extens": [351, 363], "yep": 351, "gperftool": 351, "debugg": 351, "gdb": 351, "gprof": 351, "valgrind": [351, 353], "callgrind": 351, "kcachegrind": 351, "warm": 351, "restart": 351, "ax": 352, "saniti": 353, "preserv": 353, "fold": [353, 377], "unfold": 353, "outdat": 353, "diff": 353, "remot": 353, "track": [353, 374], "branch": 353, "pytest": 353, "alias": 353, "flag": 353, "standard": [353, 963], "repli": 353, "debug": 353, "arm64": 353, "x86_64": 353, "tool": [354, 357, 369, 372], "matric": [354, 372, 963], "warn": [354, 372], "except": [354, 372, 535, 536, 537, 538, 539, 540, 541, 542, 1005, 1009], "dispatch": 355, "frequent": 357, "ask": 357, "question": [357, 976], "tabl": 357, "content": [357, 978], "lot": 357, "peopl": [357, 993, 994, 995, 996], "pronounc": 357, "why": [357, 380], "pypi": 357, "deep": 357, "reinforc": 357, "Will": 357, "futur": 357, "graphic": [357, 958], "did": 357, "remov": [357, 382, 963, 993], "hmm": 357, "gpu": 357, "need": 357, "doe": 357, "directli": 357, "plan": 357, "so": 357, "my": 357, "ani": 357, "attent": 357, "inclus": 357, "includ": 357, "should": 357, "save": 357, "export": 357, "deploi": 357, "bunch": [357, 880], "usabl": 357, "deal": [357, 372], "string": 357, "sometim": 357, "crash": 357, "freez": 357, "n_job": 357, "osx": [357, 363], "job": 357, "than": 357, "random_st": 357, "entir": 357, "start": 358, "processor": 358, "glossari": 359, "element": 359, "concept": [359, 949], "properti": 359, "role": 360, "technic": 360, "committe": 360, "propos": 360, "slep": 360, "latest": 363, "alpin": 363, "arch": 363, "debian": 363, "ubuntu": 363, "fedora": 363, "netbsd": 363, "macport": 363, "mac": 363, "anaconda": 363, "enthought": 363, "deploy": 363, "intel": 363, "winpython": 363, "troubleshoot": 363, "caus": 363, "unweight": 364, "interfac": [364, 372], "statu": 364, "persist": 367, "serial": 367, "secur": 367, "skop": 367, "interoper": [367, 972], "pytorch": 369, "mp": 369, "devic": 369, "mathemat": [370, 372, 373, 380, 945, 947, 956, 957, 960, 967, 968, 969], "formul": [370, 373, 380, 947, 956, 957, 967, 968, 969], "sklearn": [372, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "compos": [372, 428, 429, 430, 431, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "cross_decomposit": [372, 446, 447, 448, 449, 1003, 1005, 1007, 1009], "loader": 372, "discriminant_analysi": [372, 513, 514, 1001, 1002, 1005, 1007, 1008, 1009], "dummi": [372, 515, 516, 953, 1001, 1002, 1003, 1006, 1007, 1011], "feature_extract": [372, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "feature_select": [372, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "gaussian_process": [372, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "kernel_approxim": [372, 602, 603, 604, 605, 606, 1003, 1005, 1006, 1007, 1008, 1009], "kernel_ridg": [372, 607, 1010], "linear_model": [372, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010], "classic": 372, "glm": 372, "naive_bay": [372, 800, 801, 802, 803, 804, 1001, 1003, 1004, 1005, 1006, 1008, 1009], "neural_network": [372, 821, 822, 823, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "random_project": [372, 857, 858, 859, 1007], "semi_supervis": [372, 860, 861, 862, 1003, 1004, 1005, 1009], "discoveri": [372, 893, 894, 895], "checker": 372, "recent": 372, "low": [373, 380, 382], "mini": [373, 378], "batch": [373, 378], "assign": 373, "featureagglomer": [373, 409], "hierarchi": 373, "ad": 373, "connect": [373, 381, 986], "consumpt": 373, "larg": [373, 381], "size": [373, 380], "reachabl": 373, "rand": 373, "index": [373, 908], "advantag": 373, "drawback": 373, "homogen": 373, "fowlk": 373, "mallow": 373, "calinski": 373, "harabasz": 373, "davi": 373, "bouldin": 373, "conting": 373, "pair": 373, "access": 374, "featureunion": [374, 824], "columntransform": [374, 428], "shrunk": 375, "oracl": 375, "plscanon": [376, 447], "plssvd": [376, 449], "plsregress": [376, 448], "held": 377, "cross_valid": [377, 788], "obtain": 377, "d": [377, 956], "loo": 377, "p": [377, 977], "lpo": 377, "shuffl": [377, 927], "stratif": 377, "stratifi": 377, "stratifiedgroupkfold": [377, 780], "predefin": [377, 953], "decompos": 378, "exact": 378, "sparsepca": [378, 507], "kpca": 378, "choic": [378, 956], "truncat": 378, "semant": 378, "nnmf": 378, "frobeniu": 378, "norm": 378, "beta": 378, "diverg": 378, "gradientboostingclassifi": [380, 523], "histgradientboostingclassifi": [380, 525], "gradientboostingregressor": [380, 524], "addit": [380, 945], "rate": 380, "subsampl": 380, "hard": 380, "soft": 380, "dict": 381, "tf": 381, "idf": 381, "decod": 381, "applic": [381, 986], "corpu": 381, "selectfrommodel": [382, 561], "biclustermixin": 388, "classnameprefixfeaturesoutmixin": 389, "classifiermixin": 390, "clustermixin": 391, "densitymixin": 392, "metaestimatormixin": 393, "onetoonefeaturemixin": 394, "outliermixin": 395, "regressormixin": 396, "transformermixin": 397, "is_classifi": 399, "is_regressor": 400, "calibratedclassifiercv": 401, "calibrationdisplai": 402, "from_estim": [402, 595, 596, 661, 662, 664, 665, 666, 768, 784], "calibration_curv": 403, "affinitypropag": 404, "agglomerativeclust": 405, "spectralclust": 416, "spectralcoclust": 417, "affinity_propag": 418, "cluster_optics_dbscan": 419, "cluster_optics_xi": 420, "compute_optics_graph": 421, "estimate_bandwidth": 422, "k_mean": 423, "kmeans_plusplu": 424, "mean_shift": 425, "spectral_clust": 426, "ward_tre": 427, "transformedtargetregressor": 429, "make_column_selector": 430, "make_column_transform": 431, "config_context": 432, "ellipticenvelop": 433, "empiricalcovari": 434, "graphicallasso": 435, "graphicallassocv": 436, "mincovdet": 438, "shrunkcovari": 440, "empirical_covari": 441, "graphical_lasso": 442, "ledoit_wolf": 443, "ledoit_wolf_shrinkag": 444, "shrunk_covari": 445, "clear_data_hom": 450, "dump_svmlight_fil": 451, "fetch_20newsgroup": 452, "fetch_20newsgroups_vector": 453, "fetch_california_h": 454, "fetch_covtyp": 455, "fetch_kddcup99": 456, "fetch_lfw_pair": 457, "fetch_lfw_peopl": 458, "fetch_olivetti_fac": 459, "fetch_rcv1": 461, "fetch_species_distribut": 462, "get_data_hom": 463, "load_breast_canc": 464, "load_diabet": 465, "load_digit": 466, "load_fil": 467, "load_iri": 468, "load_linnerud": 469, "load_sample_imag": [470, 471], "load_svmlight_fil": [472, 473], "load_win": 474, "make_biclust": 475, "make_checkerboard": 477, "make_circl": 478, "make_friedman1": 480, "make_friedman2": 481, "make_friedman3": 482, "make_gaussian_quantil": 483, "make_hastie_10_2": 484, "make_low_rank_matrix": 485, "make_moon": 486, "make_multilabel_classif": 487, "make_s_curv": 489, "make_sparse_coded_sign": 490, "make_sparse_spd_matrix": 491, "make_sparse_uncorrel": 492, "make_spd_matrix": 493, "make_swiss_rol": 494, "dictionarylearn": 495, "factoranalysi": 496, "incrementalpca": 498, "latentdirichletalloc": 500, "minibatchdictionarylearn": 501, "sparsecod": 506, "truncatedsvd": 508, "dict_learn": 509, "dict_learning_onlin": 510, "non_negative_factor": 511, "sparse_encod": 512, "quadraticdiscriminantanalysi": 514, "dummyclassifi": 515, "dummyregressor": 516, "adaboostregressor": 518, "baggingclassifi": 519, "baggingregressor": 520, "extratreesclassifi": 521, "extratreesregressor": 522, "randomforestclassifi": 528, "randomforestregressor": 529, "randomtreesembed": 530, "stackingclassifi": 531, "stackingregressor": 532, "votingregressor": 534, "convergencewarn": 535, "dataconversionwarn": 536, "datadimensionalitywarn": 537, "efficiencywarn": 538, "fitfailedwarn": 539, "inconsistentversionwarn": 540, "notfittederror": 541, "undefinedmetricwarn": 542, "enable_halving_search_cv": 543, "enable_iterative_imput": 544, "patchextractor": 547, "extract_patches_2d": 548, "grid_to_graph": 549, "img_to_graph": 550, "reconstruct_from_patches_2d": 551, "countvector": 552, "tfidftransform": 554, "genericunivariateselect": 556, "rfe": 557, "rfecv": 558, "selectfdr": 559, "selectfpr": 560, "selectfw": 562, "selectkbest": 563, "selectpercentil": 564, "selectormixin": 565, "variancethreshold": 567, "chi2": 568, "f_classif": 569, "f_regress": 570, "mutual_info_classif": 571, "mutual_info_regress": 572, "r_regress": 573, "gaussianprocessclassifi": 574, "gaussianprocessregressor": 575, "compoundkernel": 576, "constantkernel": 577, "dotproduct": 578, "expsinesquar": 579, "exponenti": 580, "matern": 583, "pairwisekernel": 584, "rationalquadrat": 587, "sum": 588, "whitekernel": 589, "get_config": 590, "knnimput": 592, "missingind": 593, "simpleimput": 594, "decisionboundarydisplai": 595, "partialdependencedisplai": 596, "partial_depend": 597, "permutation_import": 598, "isotonicregress": 599, "check_increas": 600, "isotonic_regress": 601, "additivechi2sampl": 602, "nystroem": [603, 945], "rbfsampler": 605, "skewedchi2sampl": 606, "kernelridg": 607, "ardregress": 608, "bayesianridg": 609, "elasticnetcv": 611, "gammaregressor": 612, "larscv": 615, "lassocv": 617, "lassolar": 618, "lassolarscv": 619, "lassolars": 620, "logisticregressioncv": 623, "multitaskelasticnet": 624, "multitaskelasticnetcv": 625, "multitasklasso": 626, "multitasklassocv": 627, "orthogonalmatchingpursuit": 628, "orthogonalmatchingpursuitcv": 629, "passiveaggressiveclassifi": 630, "passiveaggressiveregressor": 631, "poissonregressor": 633, "ransacregressor": 635, "ridgecv": 637, "ridgeclassifi": 638, "ridgeclassifiercv": 639, "sgdclassifi": 640, "sgdoneclasssvm": 641, "sgdregressor": 642, "theilsenregressor": 643, "enet_path": 645, "lars_path": 646, "lars_path_gram": 647, "lasso_path": 648, "orthogonal_mp": 649, "orthogonal_mp_gram": 650, "ridge_regress": 651, "locallylinearembed": 653, "md": [654, 950], "spectralembed": 655, "locally_linear_embed": 657, "smacof": 658, "spectral_embed": 659, "trustworthi": 660, "from_predict": [661, 664, 665, 666], "detcurvedisplai": 662, "distancemetr": 663, "predictionerrordisplai": 665, "accuracy_scor": 667, "adjusted_mutual_info_scor": 668, "adjusted_rand_scor": 669, "average_precision_scor": 671, "balanced_accuracy_scor": 672, "brier_score_loss": 673, "calinski_harabasz_scor": 674, "check_scor": 675, "class_likelihood_ratio": 676, "classification_report": 677, "contingency_matrix": 678, "pair_confusion_matrix": 679, "cohen_kappa_scor": 680, "completeness_scor": 681, "confusion_matrix": 682, "consensus_scor": 683, "coverage_error": 684, "d2_absolute_error_scor": 685, "d2_pinball_scor": 686, "d2_tweedie_scor": 687, "davies_bouldin_scor": 688, "dcg_score": 689, "det_curv": 690, "explained_variance_scor": 691, "f1_score": 692, "fbeta_scor": 693, "fowlkes_mallows_scor": 694, "get_scor": 695, "get_scorer_nam": 696, "hamming_loss": 697, "hinge_loss": 698, "homogeneity_completeness_v_measur": 699, "homogeneity_scor": 700, "jaccard_scor": 701, "label_ranking_average_precision_scor": 702, "label_ranking_loss": 703, "log_loss": 704, "make_scor": 705, "matthews_corrcoef": 706, "max_error": 707, "mean_absolute_error": 708, "mean_absolute_percentage_error": 709, "mean_gamma_devi": 710, "mean_pinball_loss": 711, "mean_poisson_devi": 712, "mean_squared_error": 713, "mean_squared_log_error": 714, "mean_tweedie_devi": 715, "median_absolute_error": 716, "multilabel_confusion_matrix": 717, "mutual_info_scor": 718, "ndcg_score": 719, "normalized_mutual_info_scor": 720, "additive_chi2_kernel": 721, "chi2_kernel": 722, "cosine_dist": 723, "cosine_similar": 724, "distance_metr": 725, "euclidean_dist": 726, "haversine_dist": 727, "kernel_metr": 728, "laplacian_kernel": 729, "linear_kernel": 730, "manhattan_dist": 731, "nan_euclidean_dist": 732, "paired_cosine_dist": 733, "paired_dist": 734, "paired_euclidean_dist": 735, "paired_manhattan_dist": 736, "pairwise_kernel": 737, "polynomial_kernel": 738, "rbf_kernel": 739, "sigmoid_kernel": 740, "pairwise_dist": 741, "pairwise_distances_argmin": 742, "pairwise_distances_argmin_min": 743, "pairwise_distances_chunk": 744, "precision_recall_curv": 745, "precision_recall_fscore_support": 746, "precision_scor": 747, "r2_score": 748, "rand_scor": 749, "recall_scor": 750, "roc_auc_scor": 751, "roc_curv": 752, "root_mean_squared_error": 753, "root_mean_squared_log_error": 754, "silhouette_sampl": 755, "silhouette_scor": 756, "top_k_accuracy_scor": 757, "v_measure_scor": 758, "zero_one_loss": 759, "bayesiangaussianmixtur": 760, "gaussianmixtur": 761, "groupkfold": 763, "groupshufflesplit": 764, "halvinggridsearchcv": 765, "halvingrandomsearchcv": 766, "kfold": 767, "learningcurvedisplai": 768, "leaveonegroupout": 769, "leaveoneout": 770, "leavepgroupsout": 771, "leavepout": 772, "parametergrid": 773, "parametersampl": 774, "predefinedsplit": 775, "randomizedsearchcv": 776, "repeatedkfold": 777, "repeatedstratifiedkfold": 778, "shufflesplit": 779, "stratifiedkfold": 781, "stratifiedshufflesplit": 782, "timeseriessplit": 783, "check_cv": 785, "cross_val_predict": 786, "learning_curv": 789, "permutation_test_scor": 790, "train_test_split": 791, "validation_curv": 792, "onevsoneclassifi": [793, 954], "outputcodeclassifi": [795, 954], "classifierchain": [796, 954], "multioutputclassifi": [797, 954], "multioutputregressor": [798, 954], "regressorchain": [799, 954], "bernoullinb": 800, "categoricalnb": 801, "complementnb": 802, "gaussiannb": 803, "multinomialnb": 804, "balltre": [805, 956], "kdtree": [806, 956], "kneighborsclassifi": 807, "kneighborsregressor": 808, "kneighborstransform": 809, "kerneldens": 810, "localoutlierfactor": 811, "nearestcentroid": 812, "nearestneighbor": 813, "neighborhoodcomponentsanalysi": 814, "radiusneighborsclassifi": 815, "radiusneighborsregressor": 816, "radiusneighborstransform": 817, "kneighbors_graph": 818, "radius_neighbors_graph": 819, "sort_graph_by_row_valu": 820, "bernoullirbm": 821, "mlpregressor": 823, "make_pipelin": 826, "make_union": 827, "binar": [828, 848, 963, 964], "functiontransform": 829, "kernelcenter": 831, "labelbinar": [832, 964], "labelencod": 833, "multilabelbinar": [836, 964], "polynomialfeatur": 840, "splinetransform": 844, "add_dummy_featur": 847, "label_binar": 849, "maxabs_scal": 850, "minmax_scal": 851, "power_transform": 853, "quantile_transform": 854, "robust_scal": 855, "gaussianrandomproject": 857, "sparserandomproject": 858, "johnson_lindenstrauss_min_dim": 859, "labelpropag": 860, "labelspread": 861, "selftrainingclassifi": 862, "set_config": 863, "show_vers": 864, "linearsvr": 866, "nusvc": 867, "nusvr": 868, "oneclasssvm": 869, "l1_min_c": 872, "decisiontreeclassifi": 873, "extratreeclassifi": 875, "extratreeregressor": 876, "export_graphviz": 877, "export_text": 878, "plot_tre": 879, "_safe_index": 881, "arrayfunc": 882, "min_po": 882, "as_float_arrai": 883, "assert_all_finit": 884, "check_x_i": 885, "check_arrai": 886, "check_consistent_length": 887, "check_random_st": 888, "check_scalar": 889, "class_weight": [890, 891], "compute_class_weight": 890, "compute_sample_weight": 891, "all_displai": 893, "all_estim": 894, "all_funct": 895, "estimator_check": [896, 897], "check_estim": 896, "parametrize_with_check": 897, "estimator_html_repr": 898, "extmath": [899, 900, 901, 902, 903, 904], "fast_logdet": 900, "randomized_range_find": 901, "randomized_svd": 902, "safe_sparse_dot": 903, "weighted_mod": 904, "gen_batch": 905, "gen_even_slic": 906, "single_source_shortest_path_length": 907, "metadata_rout": [909, 910, 911, 912, 913], "metadatarequest": 909, "metadatarout": 910, "methodmap": 911, "get_routing_for_object": 912, "process_rout": 913, "metaestim": 914, "available_if": 914, "is_multilabel": 915, "type_of_target": 916, "unique_label": 917, "murmurhash3_32": 918, "delai": 920, "parallel_backend": 921, "sample_without_replac": 922, "register_parallel_backend": 923, "resampl": 924, "safe_mask": 925, "safe_sqr": 926, "sparsefunc": [928, 929, 930, 931, 932, 933, 934, 1002], "incr_mean_variance_axi": 928, "inplace_column_scal": 929, "inplace_csr_column_scal": 930, "inplace_row_scal": 931, "inplace_swap_column": 932, "inplace_swap_row": 933, "mean_variance_axi": 934, "sparsefuncs_fast": [935, 936], "inplace_csr_row_normalize_l1": 935, "inplace_csr_row_normalize_l2": 936, "check_memori": 938, "check_symmetr": 939, "column_or_1d": 940, "has_fit_paramet": 941, "exhaust": 942, "min_resourc": 942, "aggress": [942, 949], "cv_results_": 942, "brute": [942, 956], "forc": [942, 956], "keep": 943, "mark": 943, "nan": 943, "chi": [945, 951], "skew": 945, "tensor": 945, "sketch": 945, "detail": [945, 967, 968], "omp": 949, "passiv": 949, "scenario": 949, "trade": 949, "off": 949, "which": 949, "consensu": 949, "median": [949, 953], "huber": 949, "extend": 949, "introduct": [950, 978], "modifi": 950, "hessian": 950, "eigenmap": 950, "tangent": 950, "align": 950, "cosin": 951, "laplacian": 951, "pro": 952, "con": 952, "rule": 953, "cohen": 953, "kappa": 953, "ham": 953, "jaccard": 953, "hing": 953, "matthew": 953, "zero": 953, "brier": 953, "discount": 953, "cumul": 953, "gain": 953, "r\u00b2": 953, "absolut": 953, "logarithm": 953, "percentag": 953, "explain": 953, "pinbal": 953, "d\u00b2": 953, "complement": 955, "bernoulli": [955, 958], "unsupervis": [956, 958, 970, 986, 988], "find": 956, "ball": 956, "leaf_siz": 956, "shrunken": 956, "warm_start": 957, "parametr": 958, "up": 959, "ellipt": 959, "envelop": 959, "isol": 959, "outlin": 961, "mislead": 961, "strongli": 961, "rang": 963, "whiten": 963, "bin": 963, "lemma": 965, "unlabel": 966, "entri": 966, "id3": 969, "c4": 969, "5": [969, 993, 1011], "c5": 969, "cart": 969, "talk": 971, "scientif": [971, 981], "framework": 972, "domain": 972, "translat": 972, "roadmap": 973, "statement": 973, "2018": 973, "architectur": 973, "goal": 973, "subpackag": 973, "mail": 976, "user": [976, 989], "gitter": 976, "who": 977, "j": 977, "morgan": 977, "spotifi": 977, "inria": 977, "betawork": 977, "hug": 977, "evernot": 977, "t\u00e9l\u00e9com": 977, "paristech": 977, "book": 977, "com": 977, "aweb": 977, "yhat": 977, "rangespan": 977, "birchbox": 977, "bestofmedia": 977, "phimeca": 977, "howaboutw": 977, "peerindex": 977, "datarobot": 977, "okcupid": 977, "love": 977, "publica": 977, "machinali": 977, "solido": 977, "infonea": 977, "dataiku": 977, "otto": 977, "zopa": 977, "mar": 977, "bnp": 977, "pariba": 977, "cardif": 977, "section": 978, "cast": 978, "updat": [978, 1003], "right": 980, "put": 983, "open": 983, "ship": 984, "would": 984, "high": 985, "solv": [985, 986], "vocabulari": 985, "curs": 985, "iris": 985, "same": 985, "seek": 986, "constrain": 986, "inverse_transform": 986, "setup": 987, "token": 987, "occurr": 987, "languag": 987, "identif": 987, "sentiment": 987, "movi": 987, "cli": 987, "where": 987, "older": 993, "12": 993, "changelog": [993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011], "11": 993, "9": 993, "8": 993, "7": 993, "6": 993, "modul": [993, 1001, 1002, 1008, 1009, 1010, 1011], "misc": 993, "earlier": 993, "13": 994, "14": 995, "15": 996, "16": 997, "17": 998, "18": 999, "19": 1000, "21": 1002, "post1": 1003, "websit": 1003, "clear": 1003, "public": 1003, "futurewarn": 1003, "enforc": [1004, 1006], "privat": 1010}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 60}, "alltitles": {"About us": [[0, "about-us"]], "History": [[0, "history"]], "Governance": [[0, "governance"]], "Authors": [[0, "authors"], [993, "authors"], [993, "id20"]], "Documentation Team": [[0, "documentation-team"]], "Contributor Experience Team": [[0, "contributor-experience-team"], [360, "contributor-experience-team"]], "Communication Team": [[0, "communication-team"]], "Emeritus Core Developers": [[0, "emeritus-core-developers"]], "Emeritus Communication Team": [[0, "emeritus-communication-team"]], "Emeritus Contributor Experience Team": [[0, "emeritus-contributor-experience-team"]], "Citing scikit-learn": [[0, "citing-scikit-learn"]], "Artwork": [[0, "artwork"]], "Funding": [[0, "funding"]], "Past Sponsors": [[0, "past-sponsors"]], "Sprints": [[0, "sprints"]], "Donating to the project": [[0, "donating-to-the-project"]], "Infrastructure support": [[0, "infrastructure-support"]], "Examples based on real world datasets": [[3, "examples-based-on-real-world-datasets"], [150, "examples-based-on-real-world-datasets"]], "Time-related feature engineering": [[4, "time-related-feature-engineering"]], "Data exploration on the Bike Sharing Demand dataset": [[4, "data-exploration-on-the-bike-sharing-demand-dataset"]], "Time-based cross-validation": [[4, "time-based-cross-validation"]], "Gradient Boosting": [[4, "gradient-boosting"]], "Naive linear regression": [[4, "naive-linear-regression"]], "Time-steps as categories": [[4, "time-steps-as-categories"]], "Trigonometric features": [[4, "trigonometric-features"]], "Periodic spline features": [[4, "periodic-spline-features"]], "Qualitative analysis of the impact of features on linear model predictions": [[4, "qualitative-analysis-of-the-impact-of-features-on-linear-model-predictions"]], "Modeling pairwise interactions with splines and polynomial features": [[4, "modeling-pairwise-interactions-with-splines-and-polynomial-features"]], "Modeling non-linear feature interactions with kernels": [[4, "modeling-non-linear-feature-interactions-with-kernels"]], "Concluding remarks": [[4, "concluding-remarks"], [205, "concluding-remarks"]], "Image denoising using kernel PCA": [[5, "image-denoising-using-kernel-pca"]], "References": [[5, null], [11, "references"], [24, "references"], [26, "references"], [76, "references"], [104, "references"], [158, "references"], [165, "references"], [169, null], [238, null], [255, "references"], [271, "references"], [340, null], [340, null], [340, null], [340, null], [373, null], [373, null], [373, null], [373, null], [373, null], [373, null], [373, null], [373, null], [373, null], [380, null], [380, null], [380, null], [380, null], [380, null], [380, null], [380, null], [380, null], [381, null], [383, "references"], [943, "references"], [943, null], [960, null], [963, null], [963, null], [966, null], [966, null]], "Load the dataset via OpenML": [[5, "load-the-dataset-via-openml"]], "Learn the PCA basis": [[5, "learn-the-pca-basis"]], "Reconstruct and denoise test images": [[5, "reconstruct-and-denoise-test-images"]], "Faces recognition example using eigenfaces and SVMs": [[6, "faces-recognition-example-using-eigenfaces-and-svms"]], "Model Complexity Influence": [[7, "model-complexity-influence"]], "Load the data": [[7, "load-the-data"], [47, "load-the-data"], [115, "load-the-data"], [261, "load-the-data"]], "Benchmark influence": [[7, "benchmark-influence"]], "Choose parameters": [[7, "choose-parameters"]], "Run the code and plot the results": [[7, "run-the-code-and-plot-the-results"]], "Conclusion": [[7, "conclusion"], [13, "conclusion"], [170, "conclusion"], [255, "conclusion"], [261, "conclusion"], [285, "conclusion"], [311, "conclusion"]], "Out-of-core classification of text documents": [[8, "out-of-core-classification-of-text-documents"]], "Reuters Dataset related routines": [[8, "reuters-dataset-related-routines"]], "Main": [[8, "main"]], "Plot results": [[8, "plot-results"], [46, "plot-results"], [73, "plot-results"], [88, "plot-results"], [89, "plot-results"], [107, "plot-results"], [257, "plot-results"], [265, "plot-results"]], "Outlier detection on a real data set": [[9, "outlier-detection-on-a-real-data-set"]], "First example": [[9, "first-example"]], "Second example": [[9, "second-example"]], "Prediction Latency": [[10, "prediction-latency"], [332, "prediction-latency"]], "Benchmark and plot helper functions": [[10, "benchmark-and-plot-helper-functions"]], "Benchmark bulk/atomic prediction speed for various regressors": [[10, "benchmark-bulk-atomic-prediction-speed-for-various-regressors"]], "Benchmark n_features influence on prediction speed": [[10, "benchmark-n-features-influence-on-prediction-speed"]], "Benchmark throughput": [[10, "benchmark-throughput"]], "Species distribution modeling": [[11, "species-distribution-modeling"]], "Visualizing the stock market structure": [[12, "visualizing-the-stock-market-structure"]], "Retrieve the data from Internet": [[12, "retrieve-the-data-from-internet"]], "Learning a graph structure": [[12, "learning-a-graph-structure"]], "Clustering using affinity propagation": [[12, "clustering-using-affinity-propagation"]], "Embedding in 2D space": [[12, "embedding-in-2d-space"]], "Visualization": [[12, "visualization"], [307, "visualization"], [372, "visualization"]], "Lagged features for time series forecasting": [[13, "lagged-features-for-time-series-forecasting"]], "Analyzing the Bike Sharing Demand dataset": [[13, "analyzing-the-bike-sharing-demand-dataset"]], "Generating pandas-engineered lagged features": [[13, "generating-pandas-engineered-lagged-features"]], "Naive evaluation of the next hour bike demand regression": [[13, "naive-evaluation-of-the-next-hour-bike-demand-regression"]], "Proper next hour forecasting evaluation": [[13, "proper-next-hour-forecasting-evaluation"]], "Modeling predictive uncertainty via quantile regression": [[13, "modeling-predictive-uncertainty-via-quantile-regression"]], "A qualitative look at the predictions": [[13, "a-qualitative-look-at-the-predictions"]], "Compressive sensing: tomography reconstruction with L1 prior (Lasso)": [[14, "compressive-sensing-tomography-reconstruction-with-l1-prior-lasso"]], "Topic extraction with Non-negative Matrix Factorization and Latent Dirichlet Allocation": [[15, "topic-extraction-with-non-negative-matrix-factorization-and-latent-dirichlet-allocation"]], "Libsvm GUI": [[16, "libsvm-gui"]], "Wikipedia principal eigenvector": [[17, "wikipedia-principal-eigenvector"]], "Download data, if not already on disk": [[17, "download-data-if-not-already-on-disk"]], "Loading the redirect files": [[17, "loading-the-redirect-files"]], "Computing the Adjacency matrix": [[17, "computing-the-adjacency-matrix"]], "Computing Principal Singular Vector using Randomized SVD": [[17, "computing-principal-singular-vector-using-randomized-svd"]], "Computing Centrality scores": [[17, "computing-centrality-scores"]], "Biclustering": [[18, "biclustering"], [150, "biclustering"], [341, "biclustering"], [370, "biclustering"]], "Biclustering documents with the Spectral Co-clustering algorithm": [[19, "biclustering-documents-with-the-spectral-co-clustering-algorithm"]], "A demo of the Spectral Biclustering algorithm": [[20, "a-demo-of-the-spectral-biclustering-algorithm"]], "Generate sample data": [[20, "generate-sample-data"], [35, "generate-sample-data"], [52, "generate-sample-data"], [60, "generate-sample-data"], [73, "generate-sample-data"], [88, "generate-sample-data"], [89, "generate-sample-data"], [131, "generate-sample-data"], [214, "generate-sample-data"], [251, "generate-sample-data"], [270, "generate-sample-data"], [314, "generate-sample-data"]], "Fitting SpectralBiclustering": [[20, "fitting-spectralbiclustering"]], "Plotting results": [[20, "plotting-results"]], "A demo of the Spectral Co-Clustering algorithm": [[21, "a-demo-of-the-spectral-co-clustering-algorithm"]], "Calibration": [[22, "calibration"], [150, "calibration"]], "Probability calibration of classifiers": [[23, "probability-calibration-of-classifiers"]], "Generate synthetic dataset": [[23, "generate-synthetic-dataset"], [160, "generate-synthetic-dataset"], [160, "id1"], [165, "generate-synthetic-dataset"]], "Gaussian Naive-Bayes": [[23, "gaussian-naive-bayes"]], "Plot data and the predicted probabilities": [[23, "plot-data-and-the-predicted-probabilities"]], "Probability Calibration curves": [[24, "probability-calibration-curves"]], "Dataset": [[24, "dataset"], [26, "dataset"], [170, "dataset"], [244, "dataset"]], "Calibration curves": [[24, "calibration-curves"], [26, "calibration-curves"], [371, "calibration-curves"]], "Gaussian Naive Bayes": [[24, "gaussian-naive-bayes"], [955, "gaussian-naive-bayes"]], "Linear support vector classifier": [[24, "linear-support-vector-classifier"]], "Summary": [[24, "summary"], [112, "summary"], [321, "summary"]], "Probability Calibration for 3-class classification": [[25, "probability-calibration-for-3-class-classification"]], "Data": [[25, "data"]], "Fitting and calibration": [[25, "fitting-and-calibration"]], "Compare probabilities": [[25, "compare-probabilities"]], "Comparison of Calibration of Classifiers": [[26, "comparison-of-calibration-of-classifiers"]], "Classification": [[27, "classification"], [30, "classification"], [145, "classification"], [150, "classification"], [380, "classification"], [380, "id10"], [949, "classification"], [956, "id4"], [957, "classification"], [967, "classification"], [968, "classification"], [969, "classification"], [985, "classification"]], "Plot classification probability": [[28, "plot-classification-probability"]], "Classifier comparison": [[29, "classifier-comparison"]], "Recognizing hand-written digits": [[30, "recognizing-hand-written-digits"]], "Digits dataset": [[30, "digits-dataset"]], "Normal, Ledoit-Wolf and OAS Linear Discriminant Analysis for classification": [[31, "normal-ledoit-wolf-and-oas-linear-discriminant-analysis-for-classification"]], "Linear and Quadratic Discriminant Analysis with covariance ellipsoid": [[32, "linear-and-quadratic-discriminant-analysis-with-covariance-ellipsoid"]], "Data generation": [[32, "data-generation"], [46, "data-generation"], [54, "data-generation"], [117, "data-generation"], [134, "data-generation"], [143, "data-generation"], [229, "data-generation"], [296, "data-generation"], [315, "data-generation"]], "Plotting Functions": [[32, "plotting-functions"]], "Comparison of LDA and QDA": [[32, "comparison-of-lda-and-qda"]], "Clustering": [[33, "clustering"], [150, "clustering"], [373, "clustering"]], "Adjustment for chance in clustering performance evaluation": [[34, "adjustment-for-chance-in-clustering-performance-evaluation"]], "Defining the list of metrics to evaluate": [[34, "defining-the-list-of-metrics-to-evaluate"]], "First experiment: fixed ground truth labels and growing number of clusters": [[34, "first-experiment-fixed-ground-truth-labels-and-growing-number-of-clusters"]], "Second experiment: varying number of classes and clusters": [[34, "second-experiment-varying-number-of-classes-and-clusters"]], "Demo of affinity propagation clustering algorithm": [[35, "demo-of-affinity-propagation-clustering-algorithm"]], "Compute Affinity Propagation": [[35, "compute-affinity-propagation"]], "Plot result": [[35, "plot-result"], [60, "plot-result"], [64, "plot-result"], [64, "id2"]], "Agglomerative clustering with and without structure": [[36, "agglomerative-clustering-with-and-without-structure"]], "Agglomerative clustering with different metrics": [[37, "agglomerative-clustering-with-different-metrics"]], "Plot Hierarchical Clustering Dendrogram": [[38, "plot-hierarchical-clustering-dendrogram"]], "Compare BIRCH and MiniBatchKMeans": [[39, "compare-birch-and-minibatchkmeans"]], "Bisecting K-Means and Regular K-Means Performance Comparison": [[40, "bisecting-k-means-and-regular-k-means-performance-comparison"]], "Comparing different clustering algorithms on toy datasets": [[41, "comparing-different-clustering-algorithms-on-toy-datasets"]], "K-means Clustering": [[42, "k-means-clustering"]], "Segmenting the picture of greek coins in regions": [[43, "segmenting-the-picture-of-greek-coins-in-regions"]], "A demo of structured Ward hierarchical clustering on an image of coins": [[44, "a-demo-of-structured-ward-hierarchical-clustering-on-an-image-of-coins"]], "Generate data": [[44, "generate-data"], [64, "generate-data"], [75, "generate-data"], [175, "generate-data"], [276, "generate-data"]], "Define structure of the data": [[44, "define-structure-of-the-data"]], "Compute clustering": [[44, "compute-clustering"], [64, "compute-clustering"], [64, "id1"]], "Plot the results on an image": [[44, "plot-the-results-on-an-image"]], "Color Quantization using K-Means": [[45, "color-quantization-using-k-means"]], "Demo of DBSCAN clustering algorithm": [[46, "demo-of-dbscan-clustering-algorithm"]], "Compute DBSCAN": [[46, "compute-dbscan"]], "Online learning of a dictionary of parts of faces": [[47, "online-learning-of-a-dictionary-of-parts-of-faces"]], "Learn the dictionary of images": [[47, "learn-the-dictionary-of-images"]], "Plot the results": [[47, "plot-the-results"], [77, "plot-the-results"], [124, "plot-the-results"], [149, "plot-the-results"]], "Feature agglomeration": [[48, "feature-agglomeration"], [970, "feature-agglomeration"], [986, "feature-agglomeration"]], "Various Agglomerative Clustering on a 2D embedding of digits": [[49, "various-agglomerative-clustering-on-a-2d-embedding-of-digits"]], "Vector Quantization Example": [[50, "vector-quantization-example"]], "Original image": [[50, "original-image"]], "Compression via vector quantization": [[50, "compression-via-vector-quantization"]], "Encoding strategy": [[50, "encoding-strategy"]], "Memory footprint": [[50, "memory-footprint"]], "Feature agglomeration vs. univariate selection": [[51, "feature-agglomeration-vs-univariate-selection"]], "Demo of HDBSCAN clustering algorithm": [[52, "demo-of-hdbscan-clustering-algorithm"]], "Scale Invariance": [[52, "scale-invariance"]], "Multi-Scale Clustering": [[52, "multi-scale-clustering"]], "Hyperparameter Robustness": [[52, "hyperparameter-robustness"]], "min_cluster_size": [[52, "min-cluster-size"]], "min_samples": [[52, "min-samples"]], "dbscan_clustering": [[52, "dbscan-clustering"]], "Inductive Clustering": [[53, "inductive-clustering"]], "Demonstration of k-means assumptions": [[54, "demonstration-of-k-means-assumptions"]], "Fit models and plot results": [[54, "fit-models-and-plot-results"]], "Possible solutions": [[54, "possible-solutions"]], "Final remarks": [[54, "final-remarks"]], "A demo of K-Means clustering on the handwritten digits data": [[55, "a-demo-of-k-means-clustering-on-the-handwritten-digits-data"]], "Load the dataset": [[55, "load-the-dataset"]], "Define our evaluation benchmark": [[55, "define-our-evaluation-benchmark"]], "Run the benchmark": [[55, "run-the-benchmark"]], "Visualize the results on PCA-reduced data": [[55, "visualize-the-results-on-pca-reduced-data"]], "An example of K-Means++ initialization": [[56, "an-example-of-k-means-initialization"]], "Selecting the number of clusters with silhouette analysis on KMeans clustering": [[57, "selecting-the-number-of-clusters-with-silhouette-analysis-on-kmeans-clustering"]], "Empirical evaluation of the impact of k-means initialization": [[58, "empirical-evaluation-of-the-impact-of-k-means-initialization"]], "Comparing different hierarchical linkage methods on toy datasets": [[59, "comparing-different-hierarchical-linkage-methods-on-toy-datasets"]], "A demo of the mean-shift clustering algorithm": [[60, "a-demo-of-the-mean-shift-clustering-algorithm"]], "Compute clustering with MeanShift": [[60, "compute-clustering-with-meanshift"]], "Comparison of the K-Means and MiniBatchKMeans clustering algorithms": [[61, "comparison-of-the-k-means-and-minibatchkmeans-clustering-algorithms"]], "Generate the data": [[61, "generate-the-data"], [63, "generate-the-data"], [77, "generate-the-data"]], "Compute clustering with KMeans": [[61, "compute-clustering-with-kmeans"]], "Compute clustering with MiniBatchKMeans": [[61, "compute-clustering-with-minibatchkmeans"]], "Establishing parity between clusters": [[61, "establishing-parity-between-clusters"]], "Plotting the results": [[61, "plotting-the-results"], [102, "plotting-the-results"]], "Demo of OPTICS clustering algorithm": [[62, "demo-of-optics-clustering-algorithm"]], "Spectral clustering for image segmentation": [[63, "spectral-clustering-for-image-segmentation"]], "Plotting four circles": [[63, "plotting-four-circles"]], "Plotting two circles": [[63, "plotting-two-circles"]], "Hierarchical clustering: structured vs unstructured ward": [[64, "hierarchical-clustering-structured-vs-unstructured-ward"]], "We are defining k-Nearest Neighbors with 10 neighbors": [[64, "we-are-defining-k-nearest-neighbors-with-10-neighbors"]], "Pipelines and composite estimators": [[65, "pipelines-and-composite-estimators"], [150, "pipelines-and-composite-estimators"], [374, "pipelines-and-composite-estimators"]], "Column Transformer with Heterogeneous Data Sources": [[66, "column-transformer-with-heterogeneous-data-sources"]], "20 newsgroups dataset": [[66, "newsgroups-dataset"]], "Creating transformers": [[66, "creating-transformers"]], "Classification pipeline": [[66, "classification-pipeline"]], "Column Transformer with Mixed Types": [[67, "column-transformer-with-mixed-types"]], "Selecting dimensionality reduction with Pipeline and GridSearchCV": [[68, "selecting-dimensionality-reduction-with-pipeline-and-gridsearchcv"]], "Illustration of Pipeline and GridSearchCV": [[68, "illustration-of-pipeline-and-gridsearchcv"]], "Caching transformers within a Pipeline": [[68, "caching-transformers-within-a-pipeline"]], "Pipelining: chaining a PCA and a logistic regression": [[69, "pipelining-chaining-a-pca-and-a-logistic-regression"]], "Concatenating multiple feature extraction methods": [[70, "concatenating-multiple-feature-extraction-methods"]], "Effect of transforming the targets in regression model": [[71, "effect-of-transforming-the-targets-in-regression-model"]], "Synthetic example": [[71, "synthetic-example"]], "Real-world data set": [[71, "real-world-data-set"]], "Covariance estimation": [[72, "covariance-estimation"], [150, "covariance-estimation"], [375, "covariance-estimation"]], "Shrinkage covariance estimation: LedoitWolf vs OAS and max-likelihood": [[73, "shrinkage-covariance-estimation-ledoitwolf-vs-oas-and-max-likelihood"]], "Compute the likelihood on test data": [[73, "compute-the-likelihood-on-test-data"]], "Compare different approaches to setting the regularization parameter": [[73, "compare-different-approaches-to-setting-the-regularization-parameter"]], "Ledoit-Wolf vs OAS estimation": [[74, "ledoit-wolf-vs-oas-estimation"]], "Robust covariance estimation and Mahalanobis distances relevance": [[75, "robust-covariance-estimation-and-mahalanobis-distances-relevance"]], "References:": [[75, null], [101, null], [155, null], [243, null], [244, null], [339, null], [340, null], [370, null], [370, null], [370, null], [371, null], [373, null], [373, null], [373, null], [373, null], [373, null], [373, null], [373, null], [373, null], [373, null], [373, null], [375, null], [375, null], [375, null], [375, null], [377, null], [377, null], [378, null], [378, null], [378, null], [378, null], [378, null], [378, null], [378, null], [378, null], [381, null], [381, null], [942, null], [942, null], [945, null], [946, null], [947, null], [949, null], [949, null], [949, null], [949, null], [949, null], [949, null], [949, null], [950, null], [950, null], [950, null], [950, null], [950, null], [950, null], [950, null], [950, null], [951, null], [951, null], [953, null], [953, null], [953, null], [953, null], [953, null], [953, null], [953, null], [953, null], [954, null], [954, null], [954, null], [956, null], [956, null], [956, null], [957, null], [958, null], [959, null], [959, null], [959, null], [959, null], [961, null], [963, null], [963, null], [965, null], [965, null], [965, null], [967, null], [967, null], [968, null]], "Comparison of results": [[75, "comparison-of-results"]], "Robust vs Empirical covariance estimate": [[76, "robust-vs-empirical-covariance-estimate"]], "Minimum Covariance Determinant Estimator": [[76, "minimum-covariance-determinant-estimator"]], "Evaluation": [[76, "evaluation"], [276, "evaluation"]], "Sparse inverse covariance estimation": [[77, "sparse-inverse-covariance-estimation"]], "Estimate the covariance": [[77, "estimate-the-covariance"]], "Cross decomposition": [[78, "cross-decomposition"], [150, "cross-decomposition"], [376, "cross-decomposition"]], "Compare cross decomposition methods": [[79, "compare-cross-decomposition-methods"]], "Dataset based latent variables model": [[79, "dataset-based-latent-variables-model"]], "Canonical (symmetric) PLS": [[79, "canonical-symmetric-pls"]], "Transform data": [[79, "transform-data"]], "Scatter plot of scores": [[79, "scatter-plot-of-scores"]], "PLS regression, with multivariate response, a.k.a. PLS2": [[79, "pls-regression-with-multivariate-response-a-k-a-pls2"]], "PLS regression, with univariate response, a.k.a. PLS1": [[79, "pls-regression-with-univariate-response-a-k-a-pls1"]], "CCA (PLS mode B with symmetric deflation)": [[79, "cca-pls-mode-b-with-symmetric-deflation"]], "Principal Component Regression vs Partial Least Squares Regression": [[80, "principal-component-regression-vs-partial-least-squares-regression"]], "The data": [[80, "the-data"]], "Projection on one component and predictive power": [[80, "projection-on-one-component-and-predictive-power"]], "Dataset examples": [[81, "dataset-examples"], [150, "dataset-examples"]], "The Digit Dataset": [[82, "the-digit-dataset"]], "The Iris Dataset": [[83, "the-iris-dataset"]], "Loading the iris dataset": [[83, "loading-the-iris-dataset"]], "Scatter Plot of the Iris dataset": [[83, "scatter-plot-of-the-iris-dataset"]], "Plot a PCA representation": [[83, "plot-a-pca-representation"]], "Plot randomly generated classification dataset": [[84, "plot-randomly-generated-classification-dataset"]], "Plot randomly generated multilabel dataset": [[85, "plot-randomly-generated-multilabel-dataset"]], "Decomposition": [[86, "decomposition"], [87, "decomposition"], [150, "decomposition"]], "Faces dataset decompositions": [[87, "faces-dataset-decompositions"]], "Dataset preparation": [[87, "dataset-preparation"], [201, "dataset-preparation"]], "Eigenfaces - PCA using randomized SVD": [[87, "eigenfaces-pca-using-randomized-svd"]], "Non-negative components - NMF": [[87, "non-negative-components-nmf"]], "Independent components - FastICA": [[87, "independent-components-fastica"]], "Sparse components - MiniBatchSparsePCA": [[87, "sparse-components-minibatchsparsepca"]], "Dictionary learning": [[87, "dictionary-learning"]], "Cluster centers - MiniBatchKMeans": [[87, "cluster-centers-minibatchkmeans"]], "Factor Analysis components - FA": [[87, "factor-analysis-components-fa"]], "Decomposition: Dictionary learning": [[87, "decomposition-dictionary-learning"]], "Dictionary learning - positive dictionary": [[87, "dictionary-learning-positive-dictionary"]], "Dictionary learning - positive code": [[87, "dictionary-learning-positive-code"]], "Dictionary learning - positive dictionary & code": [[87, "dictionary-learning-positive-dictionary-code"]], "Blind source separation using FastICA": [[88, "blind-source-separation-using-fastica"]], "Fit ICA and PCA models": [[88, "fit-ica-and-pca-models"]], "FastICA on 2D point clouds": [[89, "fastica-on-2d-point-clouds"]], "Image denoising using dictionary learning": [[90, "image-denoising-using-dictionary-learning"]], "Generate distorted image": [[90, "generate-distorted-image"]], "Display the distorted image": [[90, "display-the-distorted-image"]], "Extract reference patches": [[90, "extract-reference-patches"]], "Learn the dictionary from reference patches": [[90, "learn-the-dictionary-from-reference-patches"]], "Extract noisy patches and reconstruct them using the dictionary": [[90, "extract-noisy-patches-and-reconstruct-them-using-the-dictionary"]], "Incremental PCA": [[91, "incremental-pca"], [378, "incremental-pca"]], "Kernel PCA": [[92, "kernel-pca"]], "Projecting data: PCA vs. KernelPCA": [[92, "projecting-data-pca-vs-kernelpca"]], "Projecting into the original feature space": [[92, "projecting-into-the-original-feature-space"]], "PCA example with Iris Data-set": [[93, "pca-example-with-iris-data-set"]], "Model selection with Probabilistic PCA and Factor Analysis (FA)": [[94, "model-selection-with-probabilistic-pca-and-factor-analysis-fa"]], "Create the data": [[94, "create-the-data"]], "Fit the models": [[94, "fit-the-models"]], "Comparison of LDA and PCA 2D projection of Iris dataset": [[95, "comparison-of-lda-and-pca-2d-projection-of-iris-dataset"]], "Sparse coding with a precomputed dictionary": [[96, "sparse-coding-with-a-precomputed-dictionary"], [378, "sparse-coding-with-a-precomputed-dictionary"]], "Factor Analysis (with rotation) to visualize patterns": [[97, "factor-analysis-with-rotation-to-visualize-patterns"]], "Developing Estimators": [[98, "developing-estimators"], [150, "developing-estimators"]], "__sklearn_is_fitted__ as Developer API": [[99, "sklearn-is-fitted-as-developer-api"]], "An example custom estimator implementing a simple classifier": [[99, "an-example-custom-estimator-implementing-a-simple-classifier"]], "Ensemble methods": [[100, "ensemble-methods"], [150, "ensemble-methods"]], "Multi-class AdaBoosted Decision Trees": [[101, "multi-class-adaboosted-decision-trees"]], "Creating the dataset": [[101, "creating-the-dataset"]], "Training the AdaBoostClassifier": [[101, "training-the-adaboostclassifier"]], "Analysis": [[101, "analysis"]], "Convergence of the AdaBoostClassifier": [[101, "convergence-of-the-adaboostclassifier"]], "Errors and weights of the Weak Learners": [[101, "errors-and-weights-of-the-weak-learners"]], "Decision Tree Regression with AdaBoost": [[102, "decision-tree-regression-with-adaboost"]], "Preparing the data": [[102, "preparing-the-data"], [158, "preparing-the-data"]], "Training and prediction with DecisionTree and AdaBoost Regressors": [[102, "training-and-prediction-with-decisiontree-and-adaboost-regressors"]], "Two-class AdaBoost": [[103, "two-class-adaboost"]], "Single estimator versus bagging: bias-variance decomposition": [[104, "single-estimator-versus-bagging-bias-variance-decomposition"]], "OOB Errors for Random Forests": [[105, "oob-errors-for-random-forests"]], "Feature transformations with ensembles of trees": [[106, "feature-transformations-with-ensembles-of-trees"]], "Comparing Random Forests and Histogram Gradient Boosting models": [[107, "comparing-random-forests-and-histogram-gradient-boosting-models"]], "Load dataset": [[107, "load-dataset"]], "Compute score and computation times": [[107, "compute-score-and-computation-times"]], "Feature importances with a forest of trees": [[108, "feature-importances-with-a-forest-of-trees"]], "Data generation and model fitting": [[108, "data-generation-and-model-fitting"]], "Feature importance based on mean decrease in impurity": [[108, "feature-importance-based-on-mean-decrease-in-impurity"]], "Feature importance based on feature permutation": [[108, "feature-importance-based-on-feature-permutation"]], "Pixel importances with a parallel forest of trees": [[109, "pixel-importances-with-a-parallel-forest-of-trees"]], "Loading the data and model fitting": [[109, "loading-the-data-and-model-fitting"]], "Feature importance based on mean decrease in impurity (MDI)": [[109, "feature-importance-based-on-mean-decrease-in-impurity-mdi"]], "Plot the decision surfaces of ensembles of trees on the iris dataset": [[110, "plot-the-decision-surfaces-of-ensembles-of-trees-on-the-iris-dataset"]], "Categorical Feature Support in Gradient Boosting": [[111, "categorical-feature-support-in-gradient-boosting"]], "Load Ames Housing dataset": [[111, "load-ames-housing-dataset"]], "Gradient boosting estimator with dropped categorical features": [[111, "gradient-boosting-estimator-with-dropped-categorical-features"]], "Gradient boosting estimator with one-hot encoding": [[111, "gradient-boosting-estimator-with-one-hot-encoding"]], "Gradient boosting estimator with ordinal encoding": [[111, "gradient-boosting-estimator-with-ordinal-encoding"]], "Gradient boosting estimator with native categorical support": [[111, "gradient-boosting-estimator-with-native-categorical-support"]], "Model comparison": [[111, "model-comparison"]], "Limiting the number of splits": [[111, "limiting-the-number-of-splits"]], "Early stopping in Gradient Boosting": [[112, "early-stopping-in-gradient-boosting"]], "Data Preparation": [[112, "data-preparation"]], "Model Training and Comparison": [[112, "model-training-and-comparison"]], "Error Calculation": [[112, "error-calculation"]], "Visualize Comparison": [[112, "visualize-comparison"]], "Gradient Boosting Out-of-Bag estimates": [[113, "gradient-boosting-out-of-bag-estimates"]], "Prediction Intervals for Gradient Boosting Regression": [[114, "prediction-intervals-for-gradient-boosting-regression"]], "Fitting non-linear quantile and least squares regressors": [[114, "fitting-non-linear-quantile-and-least-squares-regressors"]], "Analysis of the error metrics": [[114, "analysis-of-the-error-metrics"]], "Calibration of the confidence interval": [[114, "calibration-of-the-confidence-interval"]], "Tuning the hyper-parameters of the quantile regressors": [[114, "tuning-the-hyper-parameters-of-the-quantile-regressors"]], "Gradient Boosting regression": [[115, "gradient-boosting-regression"]], "Data preprocessing": [[115, "data-preprocessing"]], "Fit regression model": [[115, "fit-regression-model"], [270, "fit-regression-model"], [314, "fit-regression-model"]], "Plot training deviance": [[115, "plot-training-deviance"]], "Plot feature importance": [[115, "plot-feature-importance"]], "Gradient Boosting regularization": [[116, "gradient-boosting-regularization"]], "IsolationForest example": [[117, "isolationforest-example"]], "Training of the model": [[117, "training-of-the-model"]], "Plot discrete decision boundary": [[117, "plot-discrete-decision-boundary"]], "Plot path length decision boundary": [[117, "plot-path-length-decision-boundary"]], "Monotonic Constraints": [[118, "monotonic-constraints"], [380, "monotonic-constraints"]], "Using feature names to specify monotonic constraints": [[118, "using-feature-names-to-specify-monotonic-constraints"]], "Hashing feature transformation using Totally Random Trees": [[119, "hashing-feature-transformation-using-totally-random-trees"]], "Comparing random forests and the multi-output meta estimator": [[120, "comparing-random-forests-and-the-multi-output-meta-estimator"]], "Combine predictors using stacking": [[121, "combine-predictors-using-stacking"]], "Download the dataset": [[121, "download-the-dataset"]], "Make pipeline to preprocess the data": [[121, "make-pipeline-to-preprocess-the-data"]], "Stack of predictors on a single data set": [[121, "stack-of-predictors-on-a-single-data-set"]], "Measure and plot the results": [[121, "measure-and-plot-the-results"]], "Plot the decision boundaries of a VotingClassifier": [[122, "plot-the-decision-boundaries-of-a-votingclassifier"]], "Plot class probabilities calculated by the VotingClassifier": [[123, "plot-class-probabilities-calculated-by-the-votingclassifier"]], "Plot individual and voting regression predictions": [[124, "plot-individual-and-voting-regression-predictions"]], "Training classifiers": [[124, "training-classifiers"]], "Making predictions": [[124, "making-predictions"]], "Tutorial exercises": [[125, "tutorial-exercises"], [150, "tutorial-exercises"]], "Cross-validation on diabetes Dataset Exercise": [[126, "cross-validation-on-diabetes-dataset-exercise"]], "Load dataset and apply GridSearchCV": [[126, "load-dataset-and-apply-gridsearchcv"]], "Plot error lines showing +/- std. errors of the scores": [[126, "plot-error-lines-showing-std-errors-of-the-scores"]], "Bonus: how much can you trust the selection of alpha?": [[126, "bonus-how-much-can-you-trust-the-selection-of-alpha"]], "Digits Classification Exercise": [[127, "digits-classification-exercise"]], "SVM Exercise": [[128, "svm-exercise"]], "Feature Selection": [[129, "feature-selection"], [150, "feature-selection"]], "Comparison of F-test and mutual information": [[130, "comparison-of-f-test-and-mutual-information"]], "Univariate Feature Selection": [[131, "univariate-feature-selection"]], "Univariate feature selection": [[131, "id1"], [382, "univariate-feature-selection"]], "Compare with SVMs": [[131, "compare-with-svms"]], "Pipeline ANOVA SVM": [[132, "pipeline-anova-svm"]], "Recursive feature elimination": [[133, "recursive-feature-elimination"], [382, "recursive-feature-elimination"]], "Recursive feature elimination with cross-validation": [[134, "recursive-feature-elimination-with-cross-validation"]], "Model training and selection": [[134, "model-training-and-selection"], [229, "model-training-and-selection"]], "Plot number of features VS. cross-validation scores": [[134, "plot-number-of-features-vs-cross-validation-scores"]], "Model-based and sequential feature selection": [[135, "model-based-and-sequential-feature-selection"]], "Loading the data": [[135, "loading-the-data"]], "Feature importance from coefficients": [[135, "feature-importance-from-coefficients"]], "Selecting features based on importance": [[135, "selecting-features-based-on-importance"]], "Selecting features with Sequential Feature Selection": [[135, "selecting-features-with-sequential-feature-selection"]], "Using negative tolerance values": [[135, "using-negative-tolerance-values"]], "Gaussian Process for Machine Learning": [[136, "gaussian-process-for-machine-learning"], [150, "gaussian-process-for-machine-learning"]], "Comparison of kernel ridge and Gaussian process regression": [[137, "comparison-of-kernel-ridge-and-gaussian-process-regression"]], "Generating a dataset": [[137, "generating-a-dataset"]], "Limitations of a simple linear model": [[137, "limitations-of-a-simple-linear-model"]], "Kernel methods: kernel ridge and Gaussian process": [[137, "kernel-methods-kernel-ridge-and-gaussian-process"]], "Kernel ridge": [[137, "kernel-ridge"]], "Gaussian process regression": [[137, "gaussian-process-regression"]], "Final conclusion": [[137, "final-conclusion"]], "Probabilistic predictions with Gaussian process classification (GPC)": [[138, "probabilistic-predictions-with-gaussian-process-classification-gpc"]], "Gaussian process classification (GPC) on iris dataset": [[139, "gaussian-process-classification-gpc-on-iris-dataset"], [383, "gaussian-process-classification-gpc-on-iris-dataset"]], "Iso-probability lines for Gaussian Processes classification (GPC)": [[140, "iso-probability-lines-for-gaussian-processes-classification-gpc"]], "Illustration of Gaussian process classification (GPC) on the XOR dataset": [[141, "illustration-of-gaussian-process-classification-gpc-on-the-xor-dataset"]], "Forecasting of CO2 level on Mona Loa dataset using Gaussian process regression (GPR)": [[142, "forecasting-of-co2-level-on-mona-loa-dataset-using-gaussian-process-regression-gpr"]], "Build the dataset": [[142, "build-the-dataset"]], "Design the proper kernel": [[142, "design-the-proper-kernel"]], "Model fitting and extrapolation": [[142, "model-fitting-and-extrapolation"]], "Interpretation of kernel hyperparameters": [[142, "interpretation-of-kernel-hyperparameters"]], "Ability of Gaussian process regression (GPR) to estimate data noise-level": [[143, "ability-of-gaussian-process-regression-gpr-to-estimate-data-noise-level"]], "Optimisation of kernel hyperparameters in GPR": [[143, "optimisation-of-kernel-hyperparameters-in-gpr"]], "Gaussian Processes regression: basic introductory example": [[144, "gaussian-processes-regression-basic-introductory-example"]], "Dataset generation": [[144, "dataset-generation"], [183, "dataset-generation"]], "Example with noise-free target": [[144, "example-with-noise-free-target"]], "Example with noisy targets": [[144, "example-with-noisy-targets"]], "Gaussian processes on discrete data structures": [[145, "gaussian-processes-on-discrete-data-structures"]], "Sequence similarity matrix under the kernel": [[145, "sequence-similarity-matrix-under-the-kernel"]], "Regression": [[145, "regression"], [380, "regression"], [380, "id9"], [949, "regression"], [957, "regression"], [967, "regression"], [968, "regression"], [969, "regression"]], "Illustration of prior and posterior Gaussian process for different kernels": [[146, "illustration-of-prior-and-posterior-gaussian-process-for-different-kernels"]], "Helper function": [[146, "helper-function"]], "Dataset and Gaussian process generation": [[146, "dataset-and-gaussian-process-generation"]], "Kernel cookbook": [[146, "kernel-cookbook"]], "Radial Basis Function kernel": [[146, "radial-basis-function-kernel"]], "Rational Quadradtic kernel": [[146, "rational-quadradtic-kernel"]], "Exp-Sine-Squared kernel": [[146, "exp-sine-squared-kernel"], [383, "exp-sine-squared-kernel"]], "Dot-product kernel": [[146, "dot-product-kernel"]], "Mat\u00e9rn kernel": [[146, "matern-kernel"], [383, "matern-kernel"]], "Missing Value Imputation": [[147, "missing-value-imputation"], [150, "missing-value-imputation"]], "Imputing missing values with variants of IterativeImputer": [[148, "imputing-missing-values-with-variants-of-iterativeimputer"]], "Imputing missing values before building an estimator": [[149, "imputing-missing-values-before-building-an-estimator"]], "Download the data and make missing values sets": [[149, "download-the-data-and-make-missing-values-sets"]], "Impute the missing data and score": [[149, "impute-the-missing-data-and-score"]], "Missing information": [[149, "missing-information"]], "Estimate the score": [[149, "estimate-the-score"]], "Replace missing values by 0": [[149, "replace-missing-values-by-0"]], "kNN-imputation of the missing values": [[149, "knn-imputation-of-the-missing-values"]], "Impute missing values with mean": [[149, "impute-missing-values-with-mean"]], "Iterative imputation of the missing values": [[149, "iterative-imputation-of-the-missing-values"]], "Examples": [[150, "examples"], [334, "examples"], [340, null], [377, null], [377, null], [382, null], [382, null], [383, null], [949, null], [949, null], [949, null], [966, null], [966, null], [970, null], [970, null], [970, null], [993, "examples"]], "Release Highlights": [[150, "release-highlights"], [286, "release-highlights"]], "Decision Trees": [[150, "decision-trees"], [322, "decision-trees"], [969, "decision-trees"]], "Gaussian Mixture Models": [[150, "gaussian-mixture-models"], [223, "gaussian-mixture-models"]], "Generalized Linear Models": [[150, "generalized-linear-models"], [159, "generalized-linear-models"], [949, "generalized-linear-models"]], "Inspection": [[150, "inspection"], [151, "inspection"], [362, "inspection"]], "Kernel Approximation": [[150, "kernel-approximation"], [157, "kernel-approximation"], [945, "kernel-approximation"]], "Manifold learning": [[150, "manifold-learning"], [200, "manifold-learning"], [950, "manifold-learning"]], "Miscellaneous": [[150, "miscellaneous"], [207, "miscellaneous"], [372, "miscellaneous"], [1001, "miscellaneous"], [1001, "id40"], [1002, "miscellaneous"], [1003, "miscellaneous"], [1004, "miscellaneous"], [1004, "id13"], [1005, "miscellaneous"], [1006, "miscellaneous"], [1009, "miscellaneous"]], "Model Selection": [[150, "model-selection"], [231, "model-selection"]], "Multiclass methods": [[150, "multiclass-methods"], [254, "multiclass-methods"]], "Multioutput methods": [[150, "multioutput-methods"], [256, "multioutput-methods"]], "Nearest Neighbors": [[150, "nearest-neighbors"], [259, "nearest-neighbors"], [956, "nearest-neighbors"]], "Neural Networks": [[150, "neural-networks"], [272, "neural-networks"]], "Preprocessing": [[150, "preprocessing"], [277, "preprocessing"]], "Semi Supervised Classification": [[150, "semi-supervised-classification"], [295, "semi-supervised-classification"]], "Support Vector Machines": [[150, "support-vector-machines"], [302, "support-vector-machines"], [968, "support-vector-machines"]], "Working with text documents": [[150, "working-with-text-documents"], [318, "working-with-text-documents"]], "Failure of Machine Learning to infer causal effects": [[152, "failure-of-machine-learning-to-infer-causal-effects"]], "The dataset: simulated hourly wages": [[152, "the-dataset-simulated-hourly-wages"]], "Description of the simulated data": [[152, "description-of-the-simulated-data"]], "Income prediction with fully observed variables": [[152, "income-prediction-with-fully-observed-variables"]], "Income prediction with partial observations": [[152, "income-prediction-with-partial-observations"]], "Lessons learned": [[152, "lessons-learned"], [153, "lessons-learned"]], "Common pitfalls in the interpretation of coefficients of linear models": [[153, "common-pitfalls-in-the-interpretation-of-coefficients-of-linear-models"]], "The dataset: wages": [[153, "the-dataset-wages"]], "The machine-learning pipeline": [[153, "the-machine-learning-pipeline"]], "Processing the dataset": [[153, "processing-the-dataset"]], "Interpreting coefficients: scale matters": [[153, "interpreting-coefficients-scale-matters"]], "Checking the variability of the coefficients": [[153, "checking-the-variability-of-the-coefficients"]], "The problem of correlated variables": [[153, "the-problem-of-correlated-variables"]], "Preprocessing numerical variables": [[153, "preprocessing-numerical-variables"]], "Linear models with regularization": [[153, "linear-models-with-regularization"]], "Linear models with sparse coefficients": [[153, "linear-models-with-sparse-coefficients"]], "Wrong causal interpretation": [[153, "wrong-causal-interpretation"]], "Partial Dependence and Individual Conditional Expectation Plots": [[154, "partial-dependence-and-individual-conditional-expectation-plots"]], "Bike sharing dataset preprocessing": [[154, "bike-sharing-dataset-preprocessing"]], "Preprocessor for machine-learning models": [[154, "preprocessor-for-machine-learning-models"]], "Preprocessor for the neural network model": [[154, "preprocessor-for-the-neural-network-model"]], "Preprocessor for the gradient boosting model": [[154, "preprocessor-for-the-gradient-boosting-model"]], "1-way partial dependence with different models": [[154, "way-partial-dependence-with-different-models"]], "Multi-layer perceptron": [[154, "multi-layer-perceptron"]], "Gradient boosting": [[154, "gradient-boosting"]], "Analysis of the plots": [[154, "analysis-of-the-plots"]], "ICE vs. PDP": [[154, "ice-vs-pdp"]], "2D interaction plots": [[154, "d-interaction-plots"]], "3D representation": [[154, "d-representation"]], "Permutation Importance vs Random Forest Feature Importance (MDI)": [[155, "permutation-importance-vs-random-forest-feature-importance-mdi"]], "Data Loading and Feature Engineering": [[155, "data-loading-and-feature-engineering"]], "Accuracy of the Model": [[155, "accuracy-of-the-model"]], "Tree\u2019s Feature Importance from Mean Decrease in Impurity (MDI)": [[155, "tree-s-feature-importance-from-mean-decrease-in-impurity-mdi"]], "Permutation Importance with Multicollinear or Correlated Features": [[156, "permutation-importance-with-multicollinear-or-correlated-features"]], "Random Forest Feature Importance on Breast Cancer Data": [[156, "random-forest-feature-importance-on-breast-cancer-data"]], "Handling Multicollinear Features": [[156, "handling-multicollinear-features"]], "Scalable learning with polynomial kernel approximation": [[158, "scalable-learning-with-polynomial-kernel-approximation"]], "Partitioning the data": [[158, "partitioning-the-data"]], "Feature normalization": [[158, "feature-normalization"]], "Establishing a baseline model": [[158, "establishing-a-baseline-model"]], "Establishing the kernel approximation model": [[158, "establishing-the-kernel-approximation-model"]], "Establishing the kernelized SVM model": [[158, "establishing-the-kernelized-svm-model"]], "Comparing the results": [[158, "comparing-the-results"]], "Comparing Linear Bayesian Regressors": [[160, "comparing-linear-bayesian-regressors"]], "Models robustness to recover the ground truth weights": [[160, "models-robustness-to-recover-the-ground-truth-weights"]], "Fit the regressors": [[160, "fit-the-regressors"], [160, "id2"]], "Plot the true and estimated coefficients": [[160, "plot-the-true-and-estimated-coefficients"]], "Plot the marginal log-likelihood": [[160, "plot-the-marginal-log-likelihood"]], "Bayesian regressions with polynomial feature expansion": [[160, "bayesian-regressions-with-polynomial-feature-expansion"]], "Plotting polynomial regressions with std errors of the scores": [[160, "plotting-polynomial-regressions-with-std-errors-of-the-scores"]], "Curve Fitting with Bayesian Ridge Regression": [[161, "curve-fitting-with-bayesian-ridge-regression"]], "Generate sinusoidal data with noise": [[161, "generate-sinusoidal-data-with-noise"]], "Fit by cubic polynomial": [[161, "fit-by-cubic-polynomial"]], "Plot the true and predicted curves with log marginal likelihood (L)": [[161, "plot-the-true-and-predicted-curves-with-log-marginal-likelihood-l"]], "Fitting an Elastic Net with a precomputed Gram Matrix and Weighted Samples": [[162, "fitting-an-elastic-net-with-a-precomputed-gram-matrix-and-weighted-samples"]], "HuberRegressor vs Ridge on dataset with strong outliers": [[163, "huberregressor-vs-ridge-on-dataset-with-strong-outliers"]], "Logistic Regression 3-class Classifier": [[164, "logistic-regression-3-class-classifier"]], "L1-based models for Sparse Signals": [[165, "l1-based-models-for-sparse-signals"]], "Lasso": [[165, "lasso"], [949, "lasso"]], "Automatic Relevance Determination (ARD)": [[165, "automatic-relevance-determination-ard"]], "ElasticNet": [[165, "elasticnet"]], "Plot and analysis of the results": [[165, "plot-and-analysis-of-the-results"]], "Conclusions": [[165, "conclusions"]], "Lasso and Elastic Net": [[166, "lasso-and-elastic-net"]], "Lasso on dense and sparse data": [[167, "lasso-on-dense-and-sparse-data"]], "Comparing the two Lasso implementations on Dense data": [[167, "comparing-the-two-lasso-implementations-on-dense-data"]], "Comparing the two Lasso implementations on Sparse data": [[167, "comparing-the-two-lasso-implementations-on-sparse-data"]], "Lasso path using LARS": [[168, "lasso-path-using-lars"]], "Lasso model selection via information criteria": [[169, "lasso-model-selection-via-information-criteria"]], "Lasso model selection: AIC-BIC / cross-validation": [[170, "lasso-model-selection-aic-bic-cross-validation"]], "Selecting Lasso via an information criterion": [[170, "selecting-lasso-via-an-information-criterion"]], "Selecting Lasso via cross-validation": [[170, "selecting-lasso-via-cross-validation"]], "Lasso via coordinate descent": [[170, "lasso-via-coordinate-descent"]], "Lasso via least angle regression": [[170, "lasso-via-least-angle-regression"]], "Summary of cross-validation approach": [[170, "summary-of-cross-validation-approach"]], "Logistic function": [[171, "logistic-function"]], "L1 Penalty and Sparsity in Logistic Regression": [[172, "l1-penalty-and-sparsity-in-logistic-regression"]], "Plot multinomial and One-vs-Rest Logistic Regression": [[173, "plot-multinomial-and-one-vs-rest-logistic-regression"]], "Regularization path of L1- Logistic Regression": [[174, "regularization-path-of-l1-logistic-regression"]], "Load data": [[174, "load-data"]], "Compute regularization path": [[174, "compute-regularization-path"]], "Plot regularization path": [[174, "plot-regularization-path"]], "Joint feature selection with multi-task Lasso": [[175, "joint-feature-selection-with-multi-task-lasso"]], "Fit models": [[175, "fit-models"], [257, "fit-models"]], "Plot support and time series": [[175, "plot-support-and-time-series"]], "Non-negative least squares": [[176, "non-negative-least-squares"]], "Linear Regression Example": [[177, "linear-regression-example"]], "Sparsity Example: Fitting only features 1  and 2": [[178, "sparsity-example-fitting-only-features-1-and-2"]], "Ordinary Least Squares and Ridge Regression Variance": [[179, "ordinary-least-squares-and-ridge-regression-variance"]], "Orthogonal Matching Pursuit": [[180, "orthogonal-matching-pursuit"]], "Poisson regression and non-normal loss": [[181, "poisson-regression-and-non-normal-loss"]], "The French Motor Third-Party Liability Claims dataset": [[181, "the-french-motor-third-party-liability-claims-dataset"]], "A constant prediction baseline": [[181, "a-constant-prediction-baseline"]], "(Generalized) linear models": [[181, "generalized-linear-models"]], "Gradient Boosting Regression Trees for Poisson regression": [[181, "gradient-boosting-regression-trees-for-poisson-regression"]], "Evaluation of the calibration of predictions": [[181, "evaluation-of-the-calibration-of-predictions"]], "Evaluation of the ranking power": [[181, "evaluation-of-the-ranking-power"]], "Main takeaways": [[181, "main-takeaways"]], "Polynomial and Spline interpolation": [[182, "polynomial-and-spline-interpolation"]], "Periodic Splines": [[182, "periodic-splines"]], "Quantile regression": [[183, "quantile-regression"]], "Fitting a QuantileRegressor": [[183, "fitting-a-quantileregressor"]], "Comparing QuantileRegressor and LinearRegression": [[183, "comparing-quantileregressor-and-linearregression"]], "Robust linear model estimation using RANSAC": [[184, "robust-linear-model-estimation-using-ransac"]], "Ridge coefficients as a function of the L2 Regularization": [[185, "ridge-coefficients-as-a-function-of-the-l2-regularization"]], "Purpose of this example": [[185, "purpose-of-this-example"]], "Creating a non-noisy data set": [[185, "creating-a-non-noisy-data-set"]], "Training the Ridge Regressor": [[185, "training-the-ridge-regressor"]], "Plotting trained Coefficients and Mean Squared Errors": [[185, "plotting-trained-coefficients-and-mean-squared-errors"]], "Interpreting the plots": [[185, "interpreting-the-plots"]], "Plot Ridge coefficients as a function of the regularization": [[186, "plot-ridge-coefficients-as-a-function-of-the-regularization"]], "Compute paths": [[186, "compute-paths"]], "Display results": [[186, "display-results"]], "Robust linear estimator fitting": [[187, "robust-linear-estimator-fitting"]], "Comparing various online solvers": [[188, "comparing-various-online-solvers"]], "Early stopping of Stochastic Gradient Descent": [[189, "early-stopping-of-stochastic-gradient-descent"]], "Plot multi-class SGD on the iris dataset": [[190, "plot-multi-class-sgd-on-the-iris-dataset"]], "SGD: convex loss functions": [[191, "sgd-convex-loss-functions"]], "SGD: Penalties": [[192, "sgd-penalties"]], "SGD: Maximum margin separating hyperplane": [[193, "sgd-maximum-margin-separating-hyperplane"]], "SGD: Weighted samples": [[194, "sgd-weighted-samples"]], "One-Class SVM versus One-Class SVM using Stochastic Gradient Descent": [[195, "one-class-svm-versus-one-class-svm-using-stochastic-gradient-descent"]], "Multiclass sparse logistic regression on 20newgroups": [[196, "multiclass-sparse-logistic-regression-on-20newgroups"]], "MNIST classification using multinomial logistic + L1": [[197, "mnist-classification-using-multinomial-logistic-l1"]], "Theil-Sen Regression": [[198, "theil-sen-regression"]], "Outliers only in the y direction": [[198, "outliers-only-in-the-y-direction"]], "Outliers in the X direction": [[198, "outliers-in-the-x-direction"]], "Tweedie regression on insurance claims": [[199, "tweedie-regression-on-insurance-claims"]], "Loading datasets, basic feature extraction and target definitions": [[199, "loading-datasets-basic-feature-extraction-and-target-definitions"]], "Frequency model \u2013 Poisson distribution": [[199, "frequency-model-poisson-distribution"]], "Severity Model -  Gamma distribution": [[199, "severity-model-gamma-distribution"]], "Pure Premium Modeling via a Product Model vs single TweedieRegressor": [[199, "pure-premium-modeling-via-a-product-model-vs-single-tweedieregressor"]], "Comparison of Manifold Learning methods": [[201, "comparison-of-manifold-learning-methods"]], "Define algorithms for the manifold learning": [[201, "define-algorithms-for-the-manifold-learning"]], "Locally Linear Embeddings": [[201, "locally-linear-embeddings"]], "Isomap Embedding": [[201, "isomap-embedding"]], "Multidimensional scaling": [[201, "multidimensional-scaling"]], "Spectral embedding for non-linear dimensionality reduction": [[201, "spectral-embedding-for-non-linear-dimensionality-reduction"]], "T-distributed Stochastic Neighbor Embedding": [[201, "t-distributed-stochastic-neighbor-embedding"]], "Manifold learning on handwritten digits: Locally Linear Embedding, Isomap\u2026": [[202, "manifold-learning-on-handwritten-digits-locally-linear-embedding-isomap"]], "Load digits dataset": [[202, "load-digits-dataset"]], "Helper function to plot embedding": [[202, "helper-function-to-plot-embedding"]], "Embedding techniques comparison": [[202, "embedding-techniques-comparison"]], "Manifold Learning methods on a severed sphere": [[203, "manifold-learning-methods-on-a-severed-sphere"]], "Multi-dimensional scaling": [[204, "multi-dimensional-scaling"]], "Swiss Roll And Swiss-Hole Reduction": [[205, "swiss-roll-and-swiss-hole-reduction"]], "Swiss Roll": [[205, "swiss-roll"]], "Swiss-Hole": [[205, "swiss-hole"]], "t-SNE: The effect of various perplexity values on the shape": [[206, "t-sne-the-effect-of-various-perplexity-values-on-the-shape"]], "Comparing anomaly detection algorithms for outlier detection on toy datasets": [[208, "comparing-anomaly-detection-algorithms-for-outlier-detection-on-toy-datasets"]], "Visualizations with Display Objects": [[209, "visualizations-with-display-objects"]], "Load Data and train model": [[209, "load-data-and-train-model"]], "Create ConfusionMatrixDisplay": [[209, "create-confusionmatrixdisplay"]], "Create RocCurveDisplay": [[209, "create-roccurvedisplay"]], "Create PrecisionRecallDisplay": [[209, "create-precisionrecalldisplay"]], "Combining the display objects into a single plot": [[209, "combining-the-display-objects-into-a-single-plot"]], "Displaying estimators and complex pipelines": [[210, "displaying-estimators-and-complex-pipelines"]], "Compact text representation": [[210, "compact-text-representation"]], "Rich HTML representation": [[210, "rich-html-representation"]], "Isotonic Regression": [[211, "isotonic-regression"]], "The Johnson-Lindenstrauss bound for embedding with random projections": [[212, "the-johnson-lindenstrauss-bound-for-embedding-with-random-projections"]], "Theoretical bounds": [[212, "theoretical-bounds"]], "Empirical validation": [[212, "empirical-validation"]], "Remarks": [[212, "remarks"]], "Explicit feature map approximation for RBF kernels": [[213, "explicit-feature-map-approximation-for-rbf-kernels"]], "Python package and dataset imports, load dataset": [[213, "python-package-and-dataset-imports-load-dataset"]], "Timing and accuracy plots": [[213, "timing-and-accuracy-plots"]], "Decision Surfaces of RBF Kernel SVM and Linear SVM": [[213, "decision-surfaces-of-rbf-kernel-svm-and-linear-svm"]], "Comparison of kernel ridge regression and SVR": [[214, "comparison-of-kernel-ridge-regression-and-svr"]], "Construct the kernel-based regression models": [[214, "construct-the-kernel-based-regression-models"]], "Compare times of SVR and Kernel Ridge Regression": [[214, "compare-times-of-svr-and-kernel-ridge-regression"]], "Look at the results": [[214, "look-at-the-results"], [314, "look-at-the-results"]], "Visualize training and prediction times": [[214, "visualize-training-and-prediction-times"]], "Visualize the learning curves": [[214, "visualize-the-learning-curves"]], "Metadata Routing": [[215, "metadata-routing"], [293, "metadata-routing"], [359, "metadata-routing"], [364, "metadata-routing"], [1010, "metadata-routing"], [1010, "id1"], [1010, "id4"], [1011, "metadata-routing"]], "Estimators": [[215, "estimators"], [328, "estimators"], [328, "id2"], [347, "estimators"], [369, "estimators"], [372, "estimators"]], "Router and Consumer": [[215, "router-and-consumer"]], "Simple Pipeline": [[215, "simple-pipeline"]], "Deprecation / Default Value Change": [[215, "deprecation-default-value-change"]], "Third Party Development and scikit-learn Dependency": [[215, "third-party-development-and-scikit-learn-dependency"]], "Multilabel classification": [[216, "multilabel-classification"], [954, "multilabel-classification"]], "Face completion with a multi-output estimators": [[217, "face-completion-with-a-multi-output-estimators"]], "Evaluation of outlier detection estimators": [[218, "evaluation-of-outlier-detection-estimators"]], "Dataset preprocessing and model training": [[218, "dataset-preprocessing-and-model-training"]], "KDDCup99 - SA dataset": [[218, "kddcup99-sa-dataset"]], "Forest covertypes dataset": [[218, "forest-covertypes-dataset"]], "Ames Housing dataset": [[218, "ames-housing-dataset"]], "Cardiotocography dataset": [[218, "cardiotocography-dataset"]], "Plot and interpret results": [[218, "plot-and-interpret-results"]], "Ablation study": [[218, "ablation-study"]], "Advanced Plotting With Partial Dependence": [[219, "advanced-plotting-with-partial-dependence"]], "Train models on the diabetes dataset": [[219, "train-models-on-the-diabetes-dataset"]], "Plotting partial dependence for two features": [[219, "plotting-partial-dependence-for-two-features"]], "Plotting partial dependence of the two models together": [[219, "plotting-partial-dependence-of-the-two-models-together"]], "Plotting partial dependence for one feature": [[219, "plotting-partial-dependence-for-one-feature"]], "Displaying Pipelines": [[220, "displaying-pipelines"]], "Displaying a Pipeline with a Preprocessing Step and Classifier": [[220, "displaying-a-pipeline-with-a-preprocessing-step-and-classifier"]], "Displaying a Pipeline Chaining Multiple Preprocessing Steps & Classifier": [[220, "displaying-a-pipeline-chaining-multiple-preprocessing-steps-classifier"]], "Displaying a Pipeline and Dimensionality Reduction and Classifier": [[220, "displaying-a-pipeline-and-dimensionality-reduction-and-classifier"]], "Displaying a Complex Pipeline Chaining a Column Transformer": [[220, "displaying-a-complex-pipeline-chaining-a-column-transformer"]], "Displaying a Grid Search over a Pipeline with a Classifier": [[220, "displaying-a-grid-search-over-a-pipeline-with-a-classifier"]], "ROC Curve with Visualization API": [[221, "roc-curve-with-visualization-api"]], "Load Data and Train a SVC": [[221, "load-data-and-train-a-svc"]], "Plotting the ROC Curve": [[221, "plotting-the-roc-curve"]], "Training a Random Forest and Plotting the ROC Curve": [[221, "training-a-random-forest-and-plotting-the-roc-curve"]], "Introducing the set_output API": [[222, "introducing-the-set-output-api"]], "Concentration Prior Type Analysis of Variation Bayesian Gaussian Mixture": [[224, "concentration-prior-type-analysis-of-variation-bayesian-gaussian-mixture"]], "Gaussian Mixture Model Ellipsoids": [[225, "gaussian-mixture-model-ellipsoids"]], "GMM covariances": [[226, "gmm-covariances"]], "GMM Initialization Methods": [[227, "gmm-initialization-methods"]], "Density Estimation for a Gaussian mixture": [[228, "density-estimation-for-a-gaussian-mixture"]], "Gaussian Mixture Model Selection": [[229, "gaussian-mixture-model-selection"]], "Plot the BIC scores": [[229, "plot-the-bic-scores"]], "Plot the best model": [[229, "plot-the-best-model"]], "Gaussian Mixture Model Sine Curve": [[230, "gaussian-mixture-model-sine-curve"]], "Confusion matrix": [[232, "confusion-matrix"], [953, "confusion-matrix"]], "Visualizing cross-validation behavior in scikit-learn": [[233, "visualizing-cross-validation-behavior-in-scikit-learn"]], "Visualize our data": [[233, "visualize-our-data"]], "Define a function to visualize cross-validation behavior": [[233, "define-a-function-to-visualize-cross-validation-behavior"]], "Visualize cross-validation indices for many CV objects": [[233, "visualize-cross-validation-indices-for-many-cv-objects"]], "Plotting Cross-Validated Predictions": [[234, "plotting-cross-validated-predictions"]], "Detection error tradeoff (DET) curve": [[235, "detection-error-tradeoff-det-curve"]], "Generate synthetic data": [[235, "generate-synthetic-data"]], "Define the classifiers": [[235, "define-the-classifiers"]], "Plot ROC and DET curves": [[235, "plot-roc-and-det-curves"]], "Custom refit strategy of a grid search with cross-validation": [[236, "custom-refit-strategy-of-a-grid-search-with-cross-validation"]], "The dataset": [[236, "the-dataset"]], "Define our grid-search strategy": [[236, "define-our-grid-search-strategy"]], "Tuning hyper-parameters": [[236, "tuning-hyper-parameters"]], "Balance model complexity and cross-validated score": [[237, "balance-model-complexity-and-cross-validated-score"]], "Statistical comparison of models using grid search": [[238, "statistical-comparison-of-models-using-grid-search"]], "Comparing two models: frequentist approach": [[238, "comparing-two-models-frequentist-approach"]], "Comparing two models: Bayesian approach": [[238, "comparing-two-models-bayesian-approach"]], "Region of Practical Equivalence": [[238, "region-of-practical-equivalence"]], "Pairwise comparison of all models: frequentist approach": [[238, "pairwise-comparison-of-all-models-frequentist-approach"]], "Pairwise comparison of all models: Bayesian approach": [[238, "pairwise-comparison-of-all-models-bayesian-approach"]], "Take-home messages": [[238, "take-home-messages"]], "Sample pipeline for text feature extraction and evaluation": [[239, "sample-pipeline-for-text-feature-extraction-and-evaluation"]], "Data loading": [[239, "data-loading"]], "Pipeline with hyperparameter tuning": [[239, "pipeline-with-hyperparameter-tuning"]], "Plotting Learning Curves and Checking Models\u2019 Scalability": [[240, "plotting-learning-curves-and-checking-models-scalability"]], "Learning Curve": [[240, "learning-curve"]], "Complexity analysis": [[240, "complexity-analysis"]], "Class Likelihood Ratios to measure classification performance": [[241, "class-likelihood-ratios-to-measure-classification-performance"]], "Pre-test vs. post-test analysis": [[241, "pre-test-vs-post-test-analysis"]], "Cross-validation of likelihood ratios": [[241, "cross-validation-of-likelihood-ratios"]], "Invariance with respect to prevalence": [[241, "invariance-with-respect-to-prevalence"]], "Demonstration of multi-metric evaluation on cross_val_score and GridSearchCV": [[242, "demonstration-of-multi-metric-evaluation-on-cross-val-score-and-gridsearchcv"]], "Running GridSearchCV using multiple evaluation metrics": [[242, "running-gridsearchcv-using-multiple-evaluation-metrics"]], "Plotting the result": [[242, "plotting-the-result"]], "Nested versus non-nested cross-validation": [[243, "nested-versus-non-nested-cross-validation"]], "See Also:": [[243, null], [374, null]], "Test with permutations the significance of a classification score": [[244, "test-with-permutations-the-significance-of-a-classification-score"]], "Permutation test score": [[244, "permutation-test-score"], [377, "permutation-test-score"]], "Original data": [[244, "original-data"], [278, "original-data"]], "Random data": [[244, "random-data"]], "Precision-Recall": [[245, "precision-recall"]], "In binary classification settings": [[245, "in-binary-classification-settings"]], "Dataset and model": [[245, "dataset-and-model"]], "Plot the Precision-Recall curve": [[245, "plot-the-precision-recall-curve"]], "In multi-label settings": [[245, "in-multi-label-settings"]], "Create multi-label data, fit, and predict": [[245, "create-multi-label-data-fit-and-predict"]], "The average precision score in multi-label settings": [[245, "the-average-precision-score-in-multi-label-settings"]], "Plot the micro-averaged Precision-Recall curve": [[245, "plot-the-micro-averaged-precision-recall-curve"]], "Plot Precision-Recall curve for each class and iso-f1 curves": [[245, "plot-precision-recall-curve-for-each-class-and-iso-f1-curves"]], "Comparing randomized search and grid search for hyperparameter estimation": [[246, "comparing-randomized-search-and-grid-search-for-hyperparameter-estimation"]], "Multiclass Receiver Operating Characteristic (ROC)": [[247, "multiclass-receiver-operating-characteristic-roc"]], "Load and prepare data": [[247, "load-and-prepare-data"], [248, "load-and-prepare-data"], [283, "load-and-prepare-data"]], "One-vs-Rest multiclass ROC": [[247, "one-vs-rest-multiclass-roc"]], "ROC curve showing a specific class": [[247, "roc-curve-showing-a-specific-class"]], "ROC curve using micro-averaged OvR": [[247, "roc-curve-using-micro-averaged-ovr"]], "ROC curve using the OvR macro-average": [[247, "roc-curve-using-the-ovr-macro-average"]], "Plot all OvR ROC curves together": [[247, "plot-all-ovr-roc-curves-together"]], "One-vs-One multiclass ROC": [[247, "one-vs-one-multiclass-roc"]], "ROC curve using the OvO macro-average": [[247, "roc-curve-using-the-ovo-macro-average"]], "Plot all OvO ROC curves together": [[247, "plot-all-ovo-roc-curves-together"]], "Receiver Operating Characteristic (ROC) with cross validation": [[248, "receiver-operating-characteristic-roc-with-cross-validation"]], "Classification and ROC analysis": [[248, "classification-and-roc-analysis"]], "Comparison between grid search and successive halving": [[249, "comparison-between-grid-search-and-successive-halving"]], "Successive Halving Iterations": [[250, "successive-halving-iterations"]], "Number of candidates and amount of resource at each iteration": [[250, "number-of-candidates-and-amount-of-resource-at-each-iteration"]], "Train error vs Test error": [[251, "train-error-vs-test-error"]], "Compute train and test errors": [[251, "compute-train-and-test-errors"]], "Plot results functions": [[251, "plot-results-functions"]], "Underfitting vs. Overfitting": [[252, "underfitting-vs-overfitting"]], "Plotting Validation Curves": [[253, "plotting-validation-curves"]], "Overview of multiclass training meta-estimators": [[255, "overview-of-multiclass-training-meta-estimators"]], "The Yeast UCI dataset": [[255, "the-yeast-uci-dataset"]], "Strategies comparison": [[255, "strategies-comparison"]], "The importance of hyperparameters search": [[255, "the-importance-of-hyperparameters-search"]], "Multilabel classification using a classifier chain": [[257, "multilabel-classification-using-a-classifier-chain"]], "Loading a dataset": [[257, "loading-a-dataset"]], "LogisticRegression wrapped by OneVsRestClassifier": [[257, "logisticregression-wrapped-by-onevsrestclassifier"]], "Chain of binary classifiers": [[257, "chain-of-binary-classifiers"]], "Results interpretation": [[257, "results-interpretation"]], "Approximate nearest neighbors in TSNE": [[258, "approximate-nearest-neighbors-in-tsne"]], "Caching nearest neighbors": [[260, "caching-nearest-neighbors"]], "Nearest Neighbors Classification": [[261, "nearest-neighbors-classification"], [956, "nearest-neighbors-classification"]], "K-nearest neighbors classifier": [[261, "k-nearest-neighbors-classifier"]], "Decision boundary": [[261, "decision-boundary"]], "Kernel Density Estimation": [[262, "kernel-density-estimation"], [379, "kernel-density-estimation"]], "Simple 1D Kernel Density Estimation": [[263, "simple-1d-kernel-density-estimation"]], "Novelty detection with Local Outlier Factor (LOF)": [[264, "novelty-detection-with-local-outlier-factor-lof"]], "Outlier detection with Local Outlier Factor (LOF)": [[265, "outlier-detection-with-local-outlier-factor-lof"]], "Generate data with outliers": [[265, "generate-data-with-outliers"]], "Fit the model for outlier detection (default)": [[265, "fit-the-model-for-outlier-detection-default"]], "Comparing Nearest Neighbors with and without Neighborhood Components Analysis": [[266, "comparing-nearest-neighbors-with-and-without-neighborhood-components-analysis"]], "Dimensionality Reduction with Neighborhood Components Analysis": [[267, "dimensionality-reduction-with-neighborhood-components-analysis"]], "Neighborhood Components Analysis Illustration": [[268, "neighborhood-components-analysis-illustration"]], "Original points": [[268, "original-points"]], "Learning an embedding": [[268, "learning-an-embedding"]], "Nearest Centroid Classification": [[269, "nearest-centroid-classification"]], "Nearest Neighbors regression": [[270, "nearest-neighbors-regression"]], "Kernel Density Estimate of Species Distributions": [[271, "kernel-density-estimate-of-species-distributions"]], "Varying regularization in Multi-layer Perceptron": [[273, "varying-regularization-in-multi-layer-perceptron"]], "Compare Stochastic learning strategies for MLPClassifier": [[274, "compare-stochastic-learning-strategies-for-mlpclassifier"]], "Visualization of MLP weights on MNIST": [[275, "visualization-of-mlp-weights-on-mnist"]], "Restricted Boltzmann Machine features for digit classification": [[276, "restricted-boltzmann-machine-features-for-digit-classification"]], "Models definition": [[276, "models-definition"]], "Training": [[276, "training"], [956, "training"]], "Plotting": [[276, "plotting"], [372, "plotting"], [372, "id7"], [372, "id9"]], "Compare the effect of different scalers on data with outliers": [[278, "compare-the-effect-of-different-scalers-on-data-with-outliers"]], "StandardScaler": [[278, "standardscaler"]], "MinMaxScaler": [[278, "minmaxscaler"]], "MaxAbsScaler": [[278, "maxabsscaler"]], "RobustScaler": [[278, "robustscaler"]], "PowerTransformer": [[278, "powertransformer"]], "QuantileTransformer (uniform output)": [[278, "quantiletransformer-uniform-output"]], "QuantileTransformer (Gaussian output)": [[278, "quantiletransformer-gaussian-output"]], "Normalizer": [[278, "normalizer"]], "Using KBinsDiscretizer to discretize continuous features": [[279, "using-kbinsdiscretizer-to-discretize-continuous-features"]], "Feature discretization": [[280, "feature-discretization"]], "Demonstrating the different strategies of KBinsDiscretizer": [[281, "demonstrating-the-different-strategies-of-kbinsdiscretizer"]], "Map data to a normal distribution": [[282, "map-data-to-a-normal-distribution"]], "Importance of Feature Scaling": [[283, "importance-of-feature-scaling"]], "Effect of rescaling on a k-neighbors models": [[283, "effect-of-rescaling-on-a-k-neighbors-models"]], "Effect of rescaling on a PCA dimensional reduction": [[283, "effect-of-rescaling-on-a-pca-dimensional-reduction"]], "Effect of rescaling on model\u2019s performance": [[283, "effect-of-rescaling-on-model-s-performance"]], "Comparing Target Encoder with Other Encoders": [[284, "comparing-target-encoder-with-other-encoders"]], "Loading Data from OpenML": [[284, "loading-data-from-openml"]], "Training and Evaluating Pipelines with Different Encoders": [[284, "training-and-evaluating-pipelines-with-different-encoders"]], "Native Categorical Feature Support": [[284, "native-categorical-feature-support"]], "Plotting the Results": [[284, "plotting-the-results"]], "Target Encoder\u2019s Internal Cross fitting": [[285, "target-encoder-s-internal-cross-fitting"]], "Create Synthetic Dataset": [[285, "create-synthetic-dataset"]], "Training a Ridge Regressor": [[285, "training-a-ridge-regressor"]], "Release Highlights for scikit-learn 0.22": [[287, "release-highlights-for-scikit-learn-0-22"]], "New plotting API": [[287, "new-plotting-api"]], "Stacking Classifier and Regressor": [[287, "stacking-classifier-and-regressor"]], "Permutation-based feature importance": [[287, "permutation-based-feature-importance"]], "Native support for missing values for gradient boosting": [[287, "native-support-for-missing-values-for-gradient-boosting"]], "Precomputed sparse nearest neighbors graph": [[287, "precomputed-sparse-nearest-neighbors-graph"]], "KNN Based Imputation": [[287, "knn-based-imputation"]], "Tree pruning": [[287, "tree-pruning"]], "Retrieve dataframes from OpenML": [[287, "retrieve-dataframes-from-openml"]], "Checking scikit-learn compatibility of an estimator": [[287, "checking-scikit-learn-compatibility-of-an-estimator"]], "ROC AUC now supports multiclass classification": [[287, "roc-auc-now-supports-multiclass-classification"]], "Release Highlights for scikit-learn 0.23": [[288, "release-highlights-for-scikit-learn-0-23"]], "Generalized Linear Models, and Poisson loss for gradient boosting": [[288, "generalized-linear-models-and-poisson-loss-for-gradient-boosting"]], "Rich visual representation of estimators": [[288, "rich-visual-representation-of-estimators"]], "Scalability and stability improvements to KMeans": [[288, "scalability-and-stability-improvements-to-kmeans"]], "Improvements to the histogram-based Gradient Boosting estimators": [[288, "improvements-to-the-histogram-based-gradient-boosting-estimators"]], "Sample-weight support for Lasso and ElasticNet": [[288, "sample-weight-support-for-lasso-and-elasticnet"]], "Release Highlights for scikit-learn 0.24": [[289, "release-highlights-for-scikit-learn-0-24"]], "Successive Halving estimators for tuning hyper-parameters": [[289, "successive-halving-estimators-for-tuning-hyper-parameters"]], "Native support for categorical features in HistGradientBoosting estimators": [[289, "native-support-for-categorical-features-in-histgradientboosting-estimators"]], "Improved performances of HistGradientBoosting estimators": [[289, "improved-performances-of-histgradientboosting-estimators"]], "New self-training meta-estimator": [[289, "new-self-training-meta-estimator"]], "New SequentialFeatureSelector transformer": [[289, "new-sequentialfeatureselector-transformer"]], "New PolynomialCountSketch kernel approximation function": [[289, "new-polynomialcountsketch-kernel-approximation-function"]], "Individual Conditional Expectation plots": [[289, "individual-conditional-expectation-plots"]], "New Poisson splitting criterion for DecisionTreeRegressor": [[289, "new-poisson-splitting-criterion-for-decisiontreeregressor"]], "New documentation improvements": [[289, "new-documentation-improvements"], [290, "new-documentation-improvements"]], "Release Highlights for scikit-learn 1.0": [[290, "release-highlights-for-scikit-learn-1-0"]], "Keyword and positional arguments": [[290, "keyword-and-positional-arguments"]], "Spline Transformers": [[290, "spline-transformers"]], "Quantile Regressor": [[290, "quantile-regressor"]], "Feature Names Support": [[290, "feature-names-support"]], "A more flexible plotting API": [[290, "a-more-flexible-plotting-api"]], "Online One-Class SVM": [[290, "online-one-class-svm"], [967, "online-one-class-svm"]], "Histogram-based Gradient Boosting Models are now stable": [[290, "histogram-based-gradient-boosting-models-are-now-stable"]], "Release Highlights for scikit-learn 1.1": [[291, "release-highlights-for-scikit-learn-1-1"]], "Quantile loss in ensemble.HistGradientBoostingRegressor": [[291, "quantile-loss-in-ensemble-histgradientboostingregressor"]], "get_feature_names_out Available in all Transformers": [[291, "get-feature-names-out-available-in-all-transformers"]], "Grouping infrequent categories in OneHotEncoder": [[291, "grouping-infrequent-categories-in-onehotencoder"]], "Performance improvements": [[291, "performance-improvements"]], "MiniBatchNMF: an online version of NMF": [[291, "minibatchnmf-an-online-version-of-nmf"]], "BisectingKMeans: divide and cluster": [[291, "bisectingkmeans-divide-and-cluster"]], "Release Highlights for scikit-learn 1.2": [[292, "release-highlights-for-scikit-learn-1-2"]], "Pandas output with set_output API": [[292, "pandas-output-with-set-output-api"]], "Interaction constraints in Histogram-based Gradient Boosting Trees": [[292, "interaction-constraints-in-histogram-based-gradient-boosting-trees"]], "New and enhanced displays": [[292, "new-and-enhanced-displays"]], "Faster parser in fetch_openml": [[292, "faster-parser-in-fetch-openml"]], "Experimental Array API support in LinearDiscriminantAnalysis": [[292, "experimental-array-api-support-in-lineardiscriminantanalysis"]], "Improved efficiency of many estimators": [[292, "improved-efficiency-of-many-estimators"]], "Release Highlights for scikit-learn 1.3": [[293, "release-highlights-for-scikit-learn-1-3"]], "HDBSCAN: hierarchical density-based clustering": [[293, "hdbscan-hierarchical-density-based-clustering"]], "TargetEncoder: a new category encoding strategy": [[293, "targetencoder-a-new-category-encoding-strategy"]], "Missing values support in decision trees": [[293, "missing-values-support-in-decision-trees"]], "New display model_selection.ValidationCurveDisplay": [[293, "new-display-model-selection-validationcurvedisplay"]], "Gamma loss for gradient boosting": [[293, "gamma-loss-for-gradient-boosting"]], "Grouping infrequent categories in preprocessing.OrdinalEncoder": [[293, "grouping-infrequent-categories-in-preprocessing-ordinalencoder"]], "Release Highlights for scikit-learn 1.4": [[294, "release-highlights-for-scikit-learn-1-4"]], "HistGradientBoosting Natively Supports Categorical DTypes in DataFrames": [[294, "histgradientboosting-natively-supports-categorical-dtypes-in-dataframes"]], "Polars output in set_output": [[294, "polars-output-in-set-output"]], "Missing value support for Random Forest": [[294, "missing-value-support-for-random-forest"]], "Add support for monotonic constraints in tree-based models": [[294, "add-support-for-monotonic-constraints-in-tree-based-models"]], "Enriched estimator displays": [[294, "enriched-estimator-displays"]], "Metadata Routing Support": [[294, "metadata-routing-support"]], "Improved memory and runtime efficiency for PCA on sparse data": [[294, "improved-memory-and-runtime-efficiency-for-pca-on-sparse-data"]], "Label Propagation digits: Demonstrating performance": [[296, "label-propagation-digits-demonstrating-performance"]], "Semi-supervised learning": [[296, "semi-supervised-learning"], [966, "semi-supervised-learning"]], "Plot the most uncertain predictions": [[296, "plot-the-most-uncertain-predictions"]], "Label Propagation digits active learning": [[297, "label-propagation-digits-active-learning"]], "Label Propagation learning a complex structure": [[298, "label-propagation-learning-a-complex-structure"]], "Effect of varying threshold for self-training": [[299, "effect-of-varying-threshold-for-self-training"]], "Semi-supervised Classification on a Text Dataset": [[300, "semi-supervised-classification-on-a-text-dataset"]], "Decision boundary of semi-supervised classifiers versus SVM on the Iris dataset": [[301, "decision-boundary-of-semi-supervised-classifiers-versus-svm-on-the-iris-dataset"]], "SVM with custom kernel": [[303, "svm-with-custom-kernel"]], "Plot different SVM classifiers in the iris dataset": [[304, "plot-different-svm-classifiers-in-the-iris-dataset"]], "Plot the support vectors in LinearSVC": [[305, "plot-the-support-vectors-in-linearsvc"]], "One-class SVM with non-linear kernel (RBF)": [[306, "one-class-svm-with-non-linear-kernel-rbf"]], "RBF SVM parameters": [[307, "rbf-svm-parameters"]], "Load and prepare data set": [[307, "load-and-prepare-data-set"]], "Train classifiers": [[307, "train-classifiers"]], "SVM: Maximum margin separating hyperplane": [[308, "svm-maximum-margin-separating-hyperplane"]], "SVM: Separating hyperplane for unbalanced classes": [[309, "svm-separating-hyperplane-for-unbalanced-classes"]], "SVM-Anova: SVM with univariate feature selection": [[310, "svm-anova-svm-with-univariate-feature-selection"]], "Load some data to play with": [[310, "load-some-data-to-play-with"]], "Create the pipeline": [[310, "create-the-pipeline"]], "Plot the cross-validation score as a function of percentile of features": [[310, "plot-the-cross-validation-score-as-a-function-of-percentile-of-features"]], "Plot classification boundaries with different SVM Kernels": [[311, "plot-classification-boundaries-with-different-svm-kernels"]], "Creating a dataset": [[311, "creating-a-dataset"]], "Training SVC model and plotting decision boundaries": [[311, "training-svc-model-and-plotting-decision-boundaries"]], "Linear kernel": [[311, "linear-kernel"], [951, "linear-kernel"], [985, "linear-kernel"]], "Polynomial kernel": [[311, "polynomial-kernel"], [951, "polynomial-kernel"], [985, "polynomial-kernel"]], "RBF kernel": [[311, "rbf-kernel"], [951, "rbf-kernel"]], "Sigmoid kernel": [[311, "sigmoid-kernel"], [951, "sigmoid-kernel"], [985, "sigmoid-kernel"]], "SVM Margins Example": [[312, "svm-margins-example"]], "Non-linear SVM": [[313, "non-linear-svm"]], "Support Vector Regression (SVR) using linear and non-linear kernels": [[314, "support-vector-regression-svr-using-linear-and-non-linear-kernels"]], "Scaling the regularization parameter for SVCs": [[315, "scaling-the-regularization-parameter-for-svcs"]], "L1-penalty case": [[315, "l1-penalty-case"]], "L2-penalty case": [[315, "l2-penalty-case"]], "SVM Tie Breaking Example": [[316, "svm-tie-breaking-example"]], "SVM: Weighted samples": [[317, "svm-weighted-samples"]], "Classification of text documents using sparse features": [[319, "classification-of-text-documents-using-sparse-features"]], "Loading and vectorizing the 20 newsgroups text dataset": [[319, "loading-and-vectorizing-the-20-newsgroups-text-dataset"]], "Analysis of a bag-of-words document classifier": [[319, "analysis-of-a-bag-of-words-document-classifier"]], "Model without metadata stripping": [[319, "model-without-metadata-stripping"]], "Model with metadata stripping": [[319, "model-with-metadata-stripping"]], "Benchmarking classifiers": [[319, "benchmarking-classifiers"]], "Plot accuracy, training and test time of each classifier": [[319, "plot-accuracy-training-and-test-time-of-each-classifier"]], "Clustering text documents using k-means": [[320, "clustering-text-documents-using-k-means"]], "Loading text data": [[320, "loading-text-data"]], "Quantifying the quality of clustering results": [[320, "quantifying-the-quality-of-clustering-results"]], "K-means clustering on text features": [[320, "k-means-clustering-on-text-features"]], "Feature Extraction using TfidfVectorizer": [[320, "feature-extraction-using-tfidfvectorizer"]], "Clustering sparse data with k-means": [[320, "clustering-sparse-data-with-k-means"]], "Performing dimensionality reduction using LSA": [[320, "performing-dimensionality-reduction-using-lsa"]], "Top terms per cluster": [[320, "top-terms-per-cluster"]], "HashingVectorizer": [[320, "hashingvectorizer"]], "Clustering evaluation summary": [[320, "clustering-evaluation-summary"]], "FeatureHasher and DictVectorizer Comparison": [[321, "featurehasher-and-dictvectorizer-comparison"]], "Load Data": [[321, "load-data"]], "Define preprocessing functions": [[321, "define-preprocessing-functions"]], "DictVectorizer": [[321, "dictvectorizer"]], "FeatureHasher": [[321, "featurehasher"]], "Comparison with special purpose text vectorizers": [[321, "comparison-with-special-purpose-text-vectorizers"]], "TfidfVectorizer": [[321, "tfidfvectorizer"]], "Post pruning decision trees with cost complexity pruning": [[323, "post-pruning-decision-trees-with-cost-complexity-pruning"]], "Total impurity of leaves vs effective alphas of pruned tree": [[323, "total-impurity-of-leaves-vs-effective-alphas-of-pruned-tree"]], "Accuracy vs alpha for training and testing sets": [[323, "accuracy-vs-alpha-for-training-and-testing-sets"]], "Plot the decision surface of decision trees trained on the iris dataset": [[324, "plot-the-decision-surface-of-decision-trees-trained-on-the-iris-dataset"]], "Decision Tree Regression": [[325, "decision-tree-regression"]], "Multi-output Decision Tree Regression": [[326, "multi-output-decision-tree-regression"]], "Understanding the decision tree structure": [[327, "understanding-the-decision-tree-structure"]], "Train tree classifier": [[327, "train-tree-classifier"]], "Tree structure": [[327, "tree-structure"]], "What is the values array used here?": [[327, "what-is-the-values-array-used-here"]], "Decision path": [[327, "decision-path"]], "Common pitfalls and recommended practices": [[328, "common-pitfalls-and-recommended-practices"]], "Inconsistent preprocessing": [[328, "inconsistent-preprocessing"]], "Data leakage": [[328, "data-leakage"]], "How to avoid data leakage": [[328, "how-to-avoid-data-leakage"]], "Data leakage during pre-processing": [[328, "data-leakage-during-pre-processing"]], "Controlling randomness": [[328, "controlling-randomness"]], "Using None or RandomState instances, and repeated calls to fit and split": [[328, "using-none-or-randomstate-instances-and-repeated-calls-to-fit-and-split"]], "CV splitters": [[328, "cv-splitters"], [328, "id3"]], "Common pitfalls and subtleties": [[328, "common-pitfalls-and-subtleties"]], "General recommendations": [[328, "general-recommendations"]], "Getting reproducible results across multiple executions": [[328, "getting-reproducible-results-across-multiple-executions"]], "Robustness of cross-validation results": [[328, "robustness-of-cross-validation-results"]], "Computing with scikit-learn": [[331, "computing-with-scikit-learn"]], "Computational Performance": [[332, "computational-performance"]], "Bulk versus Atomic mode": [[332, "bulk-versus-atomic-mode"]], "Configuring Scikit-learn for reduced validation overhead": [[332, "configuring-scikit-learn-for-reduced-validation-overhead"]], "Influence of the Number of Features": [[332, "influence-of-the-number-of-features"]], "Influence of the Input Data Representation": [[332, "influence-of-the-input-data-representation"]], "Influence of the Model Complexity": [[332, "influence-of-the-model-complexity"]], "Feature Extraction Latency": [[332, "feature-extraction-latency"]], "Prediction Throughput": [[332, "prediction-throughput"]], "Tips and Tricks": [[332, "tips-and-tricks"]], "Linear algebra libraries": [[332, "linear-algebra-libraries"]], "Limiting Working Memory": [[332, "limiting-working-memory"]], "Model Compression": [[332, "model-compression"]], "Model Reshaping": [[332, "model-reshaping"]], "Links": [[332, "links"]], "Parallelism, resource management, and configuration": [[333, "parallelism-resource-management-and-configuration"]], "Parallelism": [[333, "parallelism"], [942, "parallelism"]], "Higher-level parallelism with joblib": [[333, "higher-level-parallelism-with-joblib"]], "Lower-level parallelism with OpenMP": [[333, "lower-level-parallelism-with-openmp"]], "Parallel NumPy and SciPy routines from numerical libraries": [[333, "parallel-numpy-and-scipy-routines-from-numerical-libraries"]], "Oversubscription: spawning too many threads": [[333, "oversubscription-spawning-too-many-threads"]], "Configuration switches": [[333, "configuration-switches"]], "Python API": [[333, "python-api"]], "Environment variables": [[333, "environment-variables"]], "SKLEARN_ASSUME_FINITE": [[333, "sklearn-assume-finite"]], "SKLEARN_WORKING_MEMORY": [[333, "sklearn-working-memory"]], "SKLEARN_SEED": [[333, "sklearn-seed"]], "SKLEARN_TESTS_GLOBAL_RANDOM_SEED": [[333, "sklearn-tests-global-random-seed"]], "SKLEARN_SKIP_NETWORK_TESTS": [[333, "sklearn-skip-network-tests"]], "SKLEARN_RUN_FLOAT32_TESTS": [[333, "sklearn-run-float32-tests"]], "SKLEARN_ENABLE_DEBUG_CYTHON_DIRECTIVES": [[333, "sklearn-enable-debug-cython-directives"]], "SKLEARN_BUILD_ENABLE_DEBUG_SYMBOLS": [[333, "sklearn-build-enable-debug-symbols"]], "SKLEARN_PAIRWISE_DIST_CHUNK_SIZE": [[333, "sklearn-pairwise-dist-chunk-size"]], "SKLEARN_WARNINGS_AS_ERRORS": [[333, "sklearn-warnings-as-errors"]], "Strategies to scale computationally: bigger data": [[334, "strategies-to-scale-computationally-bigger-data"]], "Scaling with instances using out-of-core learning": [[334, "scaling-with-instances-using-out-of-core-learning"]], "Streaming instances": [[334, "streaming-instances"]], "Extracting features": [[334, "extracting-features"]], "Incremental learning": [[334, "incremental-learning"]], "Notes": [[334, "notes"]], "Dataset transformations": [[337, "dataset-transformations"]], "Dataset loading utilities": [[338, "dataset-loading-utilities"], [350, "dataset-loading-utilities"]], "Loading other datasets": [[339, "loading-other-datasets"]], "Sample images": [[339, "sample-images"]], "Examples:": [[339, null], [340, null], [362, null], [370, null], [370, null], [371, null], [373, null], [373, null], [373, null], [373, null], [373, null], [373, null], [373, null], [373, null], [373, null], [373, null], [373, null], [373, null], [373, null], [373, null], [373, null], [374, null], [374, null], [374, null], [374, null], [374, null], [375, null], [375, null], [375, null], [375, null], [375, null], [375, null], [376, null], [378, null], [378, null], [378, null], [378, null], [378, null], [378, null], [378, null], [378, null], [378, null], [378, null], [378, null], [378, null], [379, null], [380, null], [380, null], [380, null], [380, null], [380, null], [380, null], [380, null], [380, null], [380, null], [380, null], [380, null], [380, null], [380, null], [380, null], [382, null], [382, null], [382, null], [382, null], [942, null], [942, null], [942, null], [945, null], [945, null], [945, null], [947, null], [947, null], [947, null], [948, null], [949, null], [949, null], [949, null], [949, null], [949, null], [949, null], [949, null], [949, null], [949, null], [949, null], [949, null], [949, null], [949, null], [949, null], [950, null], [952, null], [952, null], [952, null], [952, null], [953, null], [953, null], [953, null], [953, null], [953, null], [954, null], [956, null], [956, null], [956, null], [956, null], [956, null], [957, null], [957, null], [958, null], [959, null], [959, null], [959, null], [959, null], [959, null], [959, null], [960, null], [961, null], [963, null], [963, null], [963, null], [967, null], [967, null], [968, null], [968, null], [968, null], [968, null], [968, null], [968, null], [969, null], [969, null], [969, null], [969, null], [990, null]], "Datasets in svmlight / libsvm format": [[339, "datasets-in-svmlight-libsvm-format"]], "Related links:": [[339, null]], "Downloading datasets from the openml.org repository": [[339, "downloading-datasets-from-the-openml-org-repository"]], "Dataset Versions": [[339, "dataset-versions"]], "ARFF parser": [[339, "arff-parser"]], "Loading from external datasets": [[339, "loading-from-external-datasets"], [978, null]], "Real world datasets": [[340, "real-world-datasets"]], "The Olivetti faces dataset": [[340, "the-olivetti-faces-dataset"]], "The 20 newsgroups text dataset": [[340, "the-20-newsgroups-text-dataset"]], "Data Considerations": [[340, null]], "Recommendation": [[340, null]], "The Labeled Faces in the Wild face recognition dataset": [[340, "the-labeled-faces-in-the-wild-face-recognition-dataset"]], "Forest covertypes": [[340, "forest-covertypes"]], "RCV1 dataset": [[340, "rcv1-dataset"]], "Kddcup 99 dataset": [[340, "kddcup-99-dataset"]], "California Housing dataset": [[340, "california-housing-dataset"]], "Species distribution dataset": [[340, "species-distribution-dataset"]], "Generated datasets": [[341, "generated-datasets"]], "Generators for classification and clustering": [[341, "generators-for-classification-and-clustering"]], "Single label": [[341, "single-label"]], "Multilabel": [[341, "multilabel"]], "Generators for regression": [[341, "generators-for-regression"]], "Generators for manifold learning": [[341, "generators-for-manifold-learning"]], "Generators for decomposition": [[341, "generators-for-decomposition"]], "Toy datasets": [[342, "toy-datasets"]], "Iris plants dataset": [[342, "iris-plants-dataset"]], "Diabetes dataset": [[342, "diabetes-dataset"], [985, null]], "Optical recognition of handwritten digits dataset": [[342, "optical-recognition-of-handwritten-digits-dataset"]], "Linnerrud dataset": [[342, "linnerrud-dataset"]], "Wine recognition dataset": [[342, "wine-recognition-dataset"]], "Breast cancer wisconsin (diagnostic) dataset": [[342, "breast-cancer-wisconsin-diagnostic-dataset"]], "Installing the development version of scikit-learn": [[343, "installing-the-development-version-of-scikit-learn"]], "Installing nightly builds": [[343, "installing-nightly-builds"]], "Building from source": [[343, "building-from-source"]], "Dependencies": [[343, "dependencies"]], "Runtime dependencies": [[343, "runtime-dependencies"]], "Build dependencies": [[343, "build-dependencies"]], "Test dependencies": [[343, "test-dependencies"]], "Building a specific version from a tag": [[343, "building-a-specific-version-from-a-tag"]], "Editable mode": [[343, "editable-mode"]], "Building with Meson": [[343, "building-with-meson"]], "Simplest way to build with Meson": [[343, "simplest-way-to-build-with-meson"]], "More advanced way to build with Meson": [[343, "more-advanced-way-to-build-with-meson"]], "Platform-specific instructions": [[343, "platform-specific-instructions"]], "Windows": [[343, "windows"]], "macOS": [[343, "macos"]], "macOS compilers from conda-forge": [[343, "macos-compilers-from-conda-forge"]], "macOS compilers from Homebrew": [[343, "macos-compilers-from-homebrew"]], "Linux": [[343, "linux"]], "Linux compilers from the system": [[343, "linux-compilers-from-the-system"]], "Linux compilers from conda-forge": [[343, "linux-compilers-from-conda-forge"]], "FreeBSD": [[343, "freebsd"]], "Alternative compilers": [[343, "alternative-compilers"]], "Parallel builds": [[343, "parallel-builds"]], "Bug triaging and issue curation": [[344, "bug-triaging-and-issue-curation"]], "Working on issues to improve them": [[344, "working-on-issues-to-improve-them"]], "Fruitful discussions": [[344, null]], "Working on PRs to help review": [[344, "working-on-prs-to-help-review"]], "Triaging operations for members of the core and contributor experience teams": [[344, "triaging-operations-for-members-of-the-core-and-contributor-experience-teams"]], "Closing issues: a tough call": [[344, null]], "A typical workflow for triaging issues": [[344, "a-typical-workflow-for-triaging-issues"]], "Contributing": [[345, "contributing"], [357, "contributing"]], "Our community, our values": [[345, null]], "Ways to contribute": [[345, "ways-to-contribute"]], "Contributing to related projects": [[345, null]], "Submitting a bug report or a feature request": [[345, "submitting-a-bug-report-or-a-feature-request"]], "How to make a good bug report": [[345, "how-to-make-a-good-bug-report"]], "Contributing code": [[345, "contributing-code"]], "Video resources": [[345, "video-resources"]], "How to contribute": [[345, "how-to-contribute"]], "Learning git:": [[345, null]], "Pull request checklist": [[345, "pull-request-checklist"]], "Continuous Integration (CI)": [[345, "continuous-integration-ci"]], "Stalled pull requests": [[345, "stalled-pull-requests"]], "Stalled and Unclaimed Issues": [[345, "stalled-and-unclaimed-issues"]], "Issues for New Contributors": [[345, "issues-for-new-contributors"]], "good first issue tag": [[345, null]], "Easy tag": [[345, null]], "help wanted tag": [[345, null]], "Documentation": [[345, "documentation"], [993, "documentation"]], "Building the documentation": [[345, "building-the-documentation"]], "Generated documentation on GitHub Actions": [[345, "generated-documentation-on-github-actions"]], "Testing and improving test coverage": [[345, "testing-and-improving-test-coverage"]], "Writing matplotlib related tests": [[345, "writing-matplotlib-related-tests"]], "Workflow to improve test coverage": [[345, "workflow-to-improve-test-coverage"]], "Monitoring performance": [[345, "monitoring-performance"]], "Issue Tracker Tags": [[345, "issue-tracker-tags"]], "Maintaining backwards compatibility": [[345, "maintaining-backwards-compatibility"]], "Deprecation": [[345, "deprecation"]], "Change the default value of a parameter": [[345, "change-the-default-value-of-a-parameter"]], "Code Review Guidelines": [[345, "code-review-guidelines"]], "Communication Guidelines": [[345, "communication-guidelines"]], "Reading the existing code base": [[345, "reading-the-existing-code-base"]], "Cython Best Practices, Conventions and Knowledge": [[346, "cython-best-practices-conventions-and-knowledge"]], "Tips for developing with Cython in scikit-learn": [[346, "tips-for-developing-with-cython-in-scikit-learn"]], "Tips to ease development": [[346, "tips-to-ease-development"]], "Tips for performance": [[346, "tips-for-performance"]], "Using OpenMP": [[346, "using-openmp"]], "Developing scikit-learn estimators": [[347, "developing-scikit-learn-estimators"]], "APIs of scikit-learn objects": [[347, "apis-of-scikit-learn-objects"]], "Different objects": [[347, "different-objects"]], "Instantiation": [[347, "instantiation"]], "Fitting": [[347, "fitting"]], "Estimated Attributes": [[347, "estimated-attributes"]], "Optional Arguments": [[347, "optional-arguments"]], "Universal attributes": [[347, "universal-attributes"]], "Rolling your own estimator": [[347, "rolling-your-own-estimator"]], "Project template:": [[347, null]], "BaseEstimator and mixins:": [[347, null]], "get_params and set_params": [[347, "get-params-and-set-params"]], "Parameters and init": [[347, "parameters-and-init"]], "Cloning": [[347, "cloning"]], "Pipeline compatibility": [[347, "pipeline-compatibility"]], "Estimator types": [[347, "estimator-types"]], "Specific models": [[347, "specific-models"]], "Estimator Tags": [[347, "estimator-tags"]], "Developer API for set_output": [[347, "developer-api-for-set-output"]], "Developer API for check_is_fitted": [[347, "developer-api-for-check-is-fitted"]], "Developer API for HTML representation": [[347, "developer-api-for-html-representation"]], "Coding guidelines": [[347, "coding-guidelines"]], "Input validation": [[347, "input-validation"]], "Random Numbers": [[347, "random-numbers"]], "Numerical assertions in tests": [[347, "numerical-assertions-in-tests"]], "Developer\u2019s Guide": [[348, "developer-s-guide"]], "Maintainer / core-developer information": [[349, "maintainer-core-developer-information"]], "Releasing": [[349, "releasing"]], "Before a release": [[349, "before-a-release"]], "Preparing a release PR": [[349, "preparing-a-release-pr"]], "Major version release": [[349, "major-version-release"]], "Minor version release (also known as bug-fix release)": [[349, "minor-version-release-also-known-as-bug-fix-release"]], "Making a release": [[349, "making-a-release"]], "Release checklist": [[349, "release-checklist"]], "Merging Pull Requests": [[349, "merging-pull-requests"]], "The scikit-learn.org web site": [[349, "the-scikit-learn-org-web-site"]], "Experimental features": [[349, "experimental-features"]], "Crafting a minimal reproducer for scikit-learn": [[350, "crafting-a-minimal-reproducer-for-scikit-learn"]], "Good practices": [[350, "good-practices"]], "Provide a failing code example with minimal comments": [[350, "provide-a-failing-code-example-with-minimal-comments"]], "Boil down your script to something as small as possible": [[350, "boil-down-your-script-to-something-as-small-as-possible"]], "DO NOT report your data unless it is extremely necessary": [[350, "do-not-report-your-data-unless-it-is-extremely-necessary"]], "Use markdown formatting": [[350, "use-markdown-formatting"]], "Synthetic dataset": [[350, "synthetic-dataset"]], "NumPy": [[350, "numpy"]], "Pandas": [[350, "pandas"]], "make_regression": [[350, "make-regression"]], "make_classification": [[350, "make-classification"]], "make_blobs": [[350, "make-blobs"]], "How to optimize for speed": [[351, "how-to-optimize-for-speed"]], "Python, Cython or C/C++?": [[351, "python-cython-or-c-c"]], "Profiling Python code": [[351, "profiling-python-code"]], "Memory usage profiling": [[351, "memory-usage-profiling"]], "Using Cython": [[351, "using-cython"]], "Profiling compiled extensions": [[351, "profiling-compiled-extensions"]], "Using yep and gperftools": [[351, "using-yep-and-gperftools"]], "Using a debugger, gdb": [[351, "using-a-debugger-gdb"]], "Using gprof": [[351, "using-gprof"]], "Using valgrind / callgrind / kcachegrind": [[351, "using-valgrind-callgrind-kcachegrind"]], "kcachegrind": [[351, "kcachegrind"]], "Multi-core parallelism using joblib.Parallel": [[351, "multi-core-parallelism-using-joblib-parallel"]], "A simple algorithmic trick: warm restarts": [[351, "a-simple-algorithmic-trick-warm-restarts"]], "Developing with the Plotting API": [[352, "developing-with-the-plotting-api"]], "Plotting API Overview": [[352, "plotting-api-overview"]], "Plotting with Multiple Axes": [[352, "plotting-with-multiple-axes"]], "Developers\u2019 Tips and Tricks": [[353, "developers-tips-and-tricks"]], "Productivity and sanity-preserving tips": [[353, "productivity-and-sanity-preserving-tips"]], "Folding and unfolding outdated diffs on pull requests": [[353, "folding-and-unfolding-outdated-diffs-on-pull-requests"]], "Checking out pull requests as remote-tracking branches": [[353, "checking-out-pull-requests-as-remote-tracking-branches"]], "Display code coverage in pull requests": [[353, "display-code-coverage-in-pull-requests"]], "Useful pytest aliases and flags": [[353, "useful-pytest-aliases-and-flags"]], "Standard replies for reviewing": [[353, "standard-replies-for-reviewing"]], "Debugging memory errors in Cython with valgrind": [[353, "debugging-memory-errors-in-cython-with-valgrind"]], "Building and testing for the ARM64 platform on a x86_64 machine": [[353, "building-and-testing-for-the-arm64-platform-on-a-x86-64-machine"]], "Utilities for Developers": [[354, "utilities-for-developers"]], "Validation Tools": [[354, "validation-tools"]], "Efficient Linear Algebra & Array Operations": [[354, "efficient-linear-algebra-array-operations"]], "Efficient Random Sampling": [[354, "efficient-random-sampling"]], "Efficient Routines for Sparse Matrices": [[354, "efficient-routines-for-sparse-matrices"]], "Graph Routines": [[354, "graph-routines"]], "Testing Functions": [[354, "testing-functions"]], "Multiclass and multilabel utility function": [[354, "multiclass-and-multilabel-utility-function"]], "Helper Functions": [[354, "helper-functions"]], "Hash Functions": [[354, "hash-functions"]], "Warnings and Exceptions": [[354, "warnings-and-exceptions"]], "Dispatching": [[355, "dispatching"]], "Frequently Asked Questions": [[357, "frequently-asked-questions"]], "Table of Contents": [[357, "table-of-contents"]], "About the project": [[357, "about-the-project"]], "What is the project name (a lot of people get it wrong)?": [[357, "what-is-the-project-name-a-lot-of-people-get-it-wrong"]], "How do you pronounce the project name?": [[357, "how-do-you-pronounce-the-project-name"]], "Why scikit?": [[357, "why-scikit"]], "Do you support PyPy?": [[357, "do-you-support-pypy"]], "Implementation decisions": [[357, "implementation-decisions"]], "Why is there no support for deep or reinforcement learning? Will there be such support in the future?": [[357, "why-is-there-no-support-for-deep-or-reinforcement-learning-will-there-be-such-support-in-the-future"]], "Will you add graphical models or sequence prediction to scikit-learn?": [[357, "will-you-add-graphical-models-or-sequence-prediction-to-scikit-learn"]], "Why did you remove HMMs from scikit-learn?": [[357, "why-did-you-remove-hmms-from-scikit-learn"]], "Will you add GPU support?": [[357, "will-you-add-gpu-support"]], "Why do categorical variables need preprocessing in scikit-learn, compared to other tools?": [[357, "why-do-categorical-variables-need-preprocessing-in-scikit-learn-compared-to-other-tools"]], "Why does scikit-learn not directly work with, for example, pandas.DataFrame?": [[357, "why-does-scikit-learn-not-directly-work-with-for-example-pandas-dataframe"]], "Do you plan to implement transform for target y in a pipeline?": [[357, "do-you-plan-to-implement-transform-for-target-y-in-a-pipeline"]], "Why are there so many different estimators for linear models?": [[357, "why-are-there-so-many-different-estimators-for-linear-models"]], "How can I contribute to scikit-learn?": [[357, "how-can-i-contribute-to-scikit-learn"]], "Why is my pull request not getting any attention?": [[357, "why-is-my-pull-request-not-getting-any-attention"]], "What are the inclusion criteria for new algorithms?": [[357, "what-are-the-inclusion-criteria-for-new-algorithms"]], "Why are you so selective on what algorithms you include in scikit-learn?": [[357, "why-are-you-so-selective-on-what-algorithms-you-include-in-scikit-learn"]], "Using scikit-learn": [[357, "using-scikit-learn"]], "What\u2019s the best way to get help on scikit-learn usage?": [[357, "what-s-the-best-way-to-get-help-on-scikit-learn-usage"]], "How should I save, export or deploy estimators for production?": [[357, "how-should-i-save-export-or-deploy-estimators-for-production"]], "How can I create a bunch object?": [[357, "how-can-i-create-a-bunch-object"]], "How can I load my own datasets into a format usable by scikit-learn?": [[357, "how-can-i-load-my-own-datasets-into-a-format-usable-by-scikit-learn"]], "How do I deal with string data (or trees, graphs\u2026)?": [[357, "how-do-i-deal-with-string-data-or-trees-graphs"]], "Why do I sometime get a crash/freeze with n_jobs > 1 under OSX or Linux?": [[357, "why-do-i-sometime-get-a-crash-freeze-with-n-jobs-1-under-osx-or-linux"]], "Why does my job use more cores than specified with n_jobs?": [[357, "why-does-my-job-use-more-cores-than-specified-with-n-jobs"]], "How do I set a random_state for an entire execution?": [[357, "how-do-i-set-a-random-state-for-an-entire-execution"]], "Getting Started": [[358, "getting-started"]], "Fitting and predicting: estimator basics": [[358, "fitting-and-predicting-estimator-basics"]], "Transformers and pre-processors": [[358, "transformers-and-pre-processors"]], "Pipelines: chaining pre-processors and estimators": [[358, "pipelines-chaining-pre-processors-and-estimators"]], "Model evaluation": [[358, "model-evaluation"]], "Automatic parameter searches": [[358, "automatic-parameter-searches"]], "Next steps": [[358, "next-steps"]], "Glossary of Common Terms and API Elements": [[359, "glossary-of-common-terms-and-api-elements"]], "General Concepts": [[359, "general-concepts"]], "Class APIs and Estimator Types": [[359, "class-apis-and-estimator-types"]], "Target Types": [[359, "target-types"]], "Methods": [[359, "methods"]], "Parameters": [[359, "parameters"], [380, "parameters"]], "Attributes": [[359, "attributes"]], "Data and sample properties": [[359, "data-and-sample-properties"]], "Scikit-learn governance and decision-making": [[360, "scikit-learn-governance-and-decision-making"]], "Roles And Responsibilities": [[360, "roles-and-responsibilities"]], "Contributors": [[360, "contributors"]], "Core Contributors": [[360, "core-contributors"]], "Communication team": [[360, "communication-team"]], "Documentation team": [[360, "documentation-team"]], "Maintainers": [[360, "maintainers"]], "Technical Committee": [[360, "technical-committee"]], "Decision Making Process": [[360, "decision-making-process"]], "Governance Model Changes": [[360, "governance-model-changes"]], "Enhancement proposals (SLEPs)": [[360, "enhancement-proposals-sleps"]], "Installing scikit-learn": [[363, "installing-scikit-learn"]], "Installing the latest release": [[363, "installing-the-latest-release"]], "Third party distributions of scikit-learn": [[363, "third-party-distributions-of-scikit-learn"]], "Alpine Linux": [[363, "alpine-linux"]], "Arch Linux": [[363, "arch-linux"]], "Debian/Ubuntu": [[363, "debian-ubuntu"]], "Fedora": [[363, "fedora"]], "NetBSD": [[363, "netbsd"]], "MacPorts for Mac OSX": [[363, "macports-for-mac-osx"]], "Anaconda and Enthought Deployment Manager for all supported platforms": [[363, "anaconda-and-enthought-deployment-manager-for-all-supported-platforms"]], "Intel Extension for Scikit-learn": [[363, "intel-extension-for-scikit-learn"]], "WinPython for Windows": [[363, "winpython-for-windows"]], "Troubleshooting": [[363, "troubleshooting"]], "Error caused by file path length limit on Windows": [[363, "error-caused-by-file-path-length-limit-on-windows"]], "Usage Examples": [[364, "usage-examples"]], "Weighted scoring and fitting": [[364, "weighted-scoring-and-fitting"]], "Weighted scoring and unweighted fitting": [[364, "weighted-scoring-and-unweighted-fitting"]], "Unweighted feature selection": [[364, "unweighted-feature-selection"]], "Advanced: Different scoring and fitting weights": [[364, "advanced-different-scoring-and-fitting-weights"]], "API Interface": [[364, "api-interface"]], "Metadata Routing Support Status": [[364, "metadata-routing-support-status"]], "Model persistence": [[367, "model-persistence"]], "Python specific serialization": [[367, "python-specific-serialization"]], "Security & maintainability limitations": [[367, "security-maintainability-limitations"]], "A more secure format: skops": [[367, "a-more-secure-format-skops"]], "Interoperable formats": [[367, "interoperable-formats"]], "Model selection and evaluation": [[368, "model-selection-and-evaluation"]], "Array API support (experimental)": [[369, "array-api-support-experimental"]], "Example usage": [[369, "example-usage"]], "PyTorch Support": [[369, "pytorch-support"]], "Support for Array API-compatible inputs": [[369, "support-for-array-api-compatible-inputs"]], "Metrics": [[369, "metrics"]], "Tools": [[369, "tools"]], "Common estimator checks": [[369, "common-estimator-checks"]], "Note on MPS device support": [[369, "note-on-mps-device-support"]], "Spectral Co-Clustering": [[370, "spectral-co-clustering"]], "Mathematical formulation": [[370, "mathematical-formulation"], [370, "id3"], [373, "mathematical-formulation"], [373, "id16"], [373, "id23"], [373, "id33"], [373, "id37"], [380, "mathematical-formulation"], [956, "mathematical-formulation"], [957, "mathematical-formulation"], [967, "mathematical-formulation"], [968, "mathematical-formulation"], [969, "mathematical-formulation"]], "Spectral Biclustering": [[370, "spectral-biclustering"]], "Biclustering evaluation": [[370, "biclustering-evaluation"]], "Probability calibration": [[371, "probability-calibration"]], "Calibrating a classifier": [[371, "calibrating-a-classifier"]], "Usage": [[371, "usage"], [374, "usage"], [374, "id1"], [380, "usage"], [380, "id24"], [380, "id25"], [380, "id27"], [380, "id35"], [949, "usage"]], "Sigmoid": [[371, "sigmoid"]], "Isotonic": [[371, "isotonic"]], "Multiclass support": [[371, "multiclass-support"]], "API Reference": [[372, "api-reference"]], "sklearn: Settings and information tools": [[372, "module-sklearn"]], "sklearn.base: Base classes and utility functions": [[372, "module-sklearn.base"]], "Base classes": [[372, "base-classes"]], "Functions": [[372, "functions"], [372, "id1"]], "sklearn.calibration: Probability Calibration": [[372, "module-sklearn.calibration"]], "sklearn.cluster: Clustering": [[372, "module-sklearn.cluster"]], "Classes": [[372, "classes"]], "sklearn.compose: Composite Estimators": [[372, "module-sklearn.compose"]], "sklearn.covariance: Covariance Estimators": [[372, "module-sklearn.covariance"]], "sklearn.cross_decomposition: Cross decomposition": [[372, "module-sklearn.cross_decomposition"]], "sklearn.datasets: Datasets": [[372, "module-sklearn.datasets"]], "Loaders": [[372, "loaders"]], "Samples generator": [[372, "samples-generator"]], "sklearn.decomposition: Matrix Decomposition": [[372, "module-sklearn.decomposition"]], "sklearn.discriminant_analysis: Discriminant Analysis": [[372, "module-sklearn.discriminant_analysis"]], "sklearn.dummy: Dummy estimators": [[372, "module-sklearn.dummy"]], "sklearn.ensemble: Ensemble Methods": [[372, "module-sklearn.ensemble"]], "sklearn.exceptions: Exceptions and warnings": [[372, "module-sklearn.exceptions"]], "sklearn.experimental: Experimental": [[372, "module-sklearn.experimental"]], "sklearn.feature_extraction: Feature Extraction": [[372, "module-sklearn.feature_extraction"]], "From images": [[372, "module-sklearn.feature_extraction.image"]], "From text": [[372, "module-sklearn.feature_extraction.text"]], "sklearn.feature_selection: Feature Selection": [[372, "module-sklearn.feature_selection"]], "sklearn.gaussian_process: Gaussian Processes": [[372, "module-sklearn.gaussian_process"]], "Kernels": [[372, "module-sklearn.gaussian_process.kernels"]], "sklearn.impute: Impute": [[372, "module-sklearn.impute"]], "sklearn.inspection: Inspection": [[372, "module-sklearn.inspection"]], "sklearn.isotonic: Isotonic regression": [[372, "module-sklearn.isotonic"]], "sklearn.kernel_approximation: Kernel Approximation": [[372, "module-sklearn.kernel_approximation"]], "sklearn.kernel_ridge: Kernel Ridge Regression": [[372, "module-sklearn.kernel_ridge"]], "sklearn.linear_model: Linear Models": [[372, "module-sklearn.linear_model"]], "Linear classifiers": [[372, "linear-classifiers"]], "Classical linear regressors": [[372, "classical-linear-regressors"]], "Regressors with variable selection": [[372, "regressors-with-variable-selection"]], "Bayesian regressors": [[372, "bayesian-regressors"]], "Multi-task linear regressors with variable selection": [[372, "multi-task-linear-regressors-with-variable-selection"]], "Outlier-robust regressors": [[372, "outlier-robust-regressors"]], "Generalized linear models (GLM) for regression": [[372, "generalized-linear-models-glm-for-regression"]], "sklearn.manifold: Manifold Learning": [[372, "module-sklearn.manifold"]], "sklearn.metrics: Metrics": [[372, "sklearn-metrics-metrics"]], "Model Selection Interface": [[372, "model-selection-interface"]], "Classification metrics": [[372, "classification-metrics"], [953, "classification-metrics"]], "Regression metrics": [[372, "regression-metrics"], [953, "regression-metrics"]], "Multilabel ranking metrics": [[372, "multilabel-ranking-metrics"], [953, "multilabel-ranking-metrics"]], "Clustering metrics": [[372, "clustering-metrics"], [953, "clustering-metrics"]], "Biclustering metrics": [[372, "biclustering-metrics"]], "Distance metrics": [[372, "distance-metrics"]], "Pairwise metrics": [[372, "pairwise-metrics"]], "sklearn.mixture: Gaussian Mixture Models": [[372, "module-sklearn.mixture"]], "sklearn.model_selection: Model Selection": [[372, "module-sklearn.model_selection"]], "Splitter Classes": [[372, "splitter-classes"]], "Splitter Functions": [[372, "splitter-functions"]], "Hyper-parameter optimizers": [[372, "hyper-parameter-optimizers"]], "Model validation": [[372, "model-validation"]], "sklearn.multiclass: Multiclass classification": [[372, "module-sklearn.multiclass"]], "Multiclass classification strategies": [[372, "multiclass-classification-strategies"]], "sklearn.multioutput: Multioutput regression and classification": [[372, "module-sklearn.multioutput"]], "sklearn.naive_bayes: Naive Bayes": [[372, "module-sklearn.naive_bayes"]], "sklearn.neighbors: Nearest Neighbors": [[372, "module-sklearn.neighbors"]], "sklearn.neural_network: Neural network models": [[372, "module-sklearn.neural_network"]], "sklearn.pipeline: Pipeline": [[372, "module-sklearn.pipeline"]], "sklearn.preprocessing: Preprocessing and Normalization": [[372, "module-sklearn.preprocessing"]], "sklearn.random_projection: Random projection": [[372, "module-sklearn.random_projection"]], "sklearn.semi_supervised: Semi-Supervised Learning": [[372, "module-sklearn.semi_supervised"]], "sklearn.svm: Support Vector Machines": [[372, "module-sklearn.svm"]], "sklearn.tree: Decision Trees": [[372, "module-sklearn.tree"]], "sklearn.utils: Utilities": [[372, "module-sklearn.utils"]], "Input and parameter validation": [[372, "module-sklearn.utils.validation"]], "Utilities used in meta-estimators": [[372, "module-sklearn.utils.metaestimators"]], "Utilities to handle weights based on class labels": [[372, "module-sklearn.utils.class_weight"]], "Utilities to deal with multiclass target in classifiers": [[372, "module-sklearn.utils.multiclass"]], "Utilities for optimal mathematical operations": [[372, "module-sklearn.utils.extmath"]], "Utilities to work with sparse matrices and arrays": [[372, "module-sklearn.utils.sparsefuncs"]], "Utilities to work with graphs": [[372, "module-sklearn.utils.graph"]], "Utilities for random sampling": [[372, "module-sklearn.utils.random"]], "Utilities to operate on arrays": [[372, "module-sklearn.utils.arrayfuncs"]], "Metadata routing": [[372, "module-sklearn.utils.metadata_routing"]], "Scikit-learn object discovery": [[372, "module-sklearn.utils.discovery"]], "Scikit-learn compatibility checker": [[372, "module-sklearn.utils.estimator_checks"]], "Utilities for parallel computing": [[372, "module-sklearn.utils.parallel"]], "Recently deprecated": [[372, "recently-deprecated"]], "Input data": [[373, null]], "Overview of clustering methods": [[373, "overview-of-clustering-methods"]], "K-means": [[373, "k-means"]], "Low-level parallelism": [[373, "low-level-parallelism"], [380, "low-level-parallelism"]], "Mini Batch K-Means": [[373, "mini-batch-k-means"]], "Affinity Propagation": [[373, "affinity-propagation"]], "Mean Shift": [[373, "mean-shift"]], "Spectral clustering": [[373, "spectral-clustering"]], "Different label assignment strategies": [[373, "different-label-assignment-strategies"]], "Spectral Clustering Graphs": [[373, "spectral-clustering-graphs"]], "Hierarchical clustering": [[373, "hierarchical-clustering"]], "FeatureAgglomeration": [[373, null]], "Different linkage type: Ward, complete, average, and single linkage": [[373, "different-linkage-type-ward-complete-average-and-single-linkage"]], "Visualization of cluster hierarchy": [[373, "visualization-of-cluster-hierarchy"]], "Adding connectivity constraints": [[373, "adding-connectivity-constraints"]], "Varying the metric": [[373, "varying-the-metric"]], "Bisecting K-Means": [[373, "bisecting-k-means"]], "DBSCAN": [[373, "dbscan"]], "Implementation": [[373, null], [956, "implementation"]], "Memory consumption for large sample sizes": [[373, null]], "HDBSCAN": [[373, "hdbscan"]], "Mutual Reachability Graph": [[373, "mutual-reachability-graph"]], "Hierarchical Clustering": [[373, "id11"]], "OPTICS": [[373, "optics"]], "Comparison with DBSCAN": [[373, null]], "Computational Complexity": [[373, null]], "BIRCH": [[373, "birch"]], "Clustering performance evaluation": [[373, "clustering-performance-evaluation"]], "Rand index": [[373, "rand-index"]], "Advantages": [[373, "advantages"], [373, "id14"], [373, "id21"], [373, "id25"], [373, "id28"], [373, "id31"], [373, "id35"], [373, "id39"]], "Drawbacks": [[373, "drawbacks"], [373, "id15"], [373, "id22"], [373, "id26"], [373, "id29"], [373, "id32"], [373, "id36"], [373, "id40"]], "Mutual Information based scores": [[373, "mutual-information-based-scores"]], "Homogeneity, completeness and V-measure": [[373, "homogeneity-completeness-and-v-measure"]], "Fowlkes-Mallows scores": [[373, "fowlkes-mallows-scores"]], "Silhouette Coefficient": [[373, "silhouette-coefficient"]], "Calinski-Harabasz Index": [[373, "calinski-harabasz-index"]], "Davies-Bouldin Index": [[373, "davies-bouldin-index"]], "Contingency Matrix": [[373, "contingency-matrix"]], "Pair Confusion Matrix": [[373, "pair-confusion-matrix"]], "Pipeline: chaining estimators": [[374, "pipeline-chaining-estimators"]], "Build a pipeline": [[374, "build-a-pipeline"]], "Access pipeline steps": [[374, "access-pipeline-steps"]], "Tracking feature names in a pipeline": [[374, "tracking-feature-names-in-a-pipeline"]], "Access to nested parameters": [[374, "access-to-nested-parameters"]], "Caching transformers: avoid repeated computation": [[374, "caching-transformers-avoid-repeated-computation"]], "Transforming target in regression": [[374, "transforming-target-in-regression"]], "FeatureUnion: composite feature spaces": [[374, "featureunion-composite-feature-spaces"]], "ColumnTransformer for heterogeneous data": [[374, "columntransformer-for-heterogeneous-data"]], "Visualizing Composite Estimators": [[374, "visualizing-composite-estimators"]], "Empirical covariance": [[375, "empirical-covariance"]], "Shrunk Covariance": [[375, "shrunk-covariance"]], "Basic shrinkage": [[375, "basic-shrinkage"]], "Ledoit-Wolf shrinkage": [[375, "ledoit-wolf-shrinkage"]], "Oracle Approximating Shrinkage": [[375, "oracle-approximating-shrinkage"]], "Sparse inverse covariance": [[375, "sparse-inverse-covariance"]], "Robust Covariance Estimation": [[375, "robust-covariance-estimation"]], "Minimum Covariance Determinant": [[375, "minimum-covariance-determinant"]], "PLSCanonical": [[376, "plscanonical"]], "PLSSVD": [[376, "plssvd"]], "PLSRegression": [[376, "plsregression"]], "Canonical Correlation Analysis": [[376, "canonical-correlation-analysis"]], "Cross-validation: evaluating estimator performance": [[377, "cross-validation-evaluating-estimator-performance"]], "Computing cross-validated metrics": [[377, "computing-cross-validated-metrics"]], "Data transformation with held out data": [[377, null]], "The cross_validate function and multiple metric evaluation": [[377, "the-cross-validate-function-and-multiple-metric-evaluation"]], "Obtaining predictions by cross-validation": [[377, "obtaining-predictions-by-cross-validation"]], "Cross validation iterators": [[377, "cross-validation-iterators"]], "Cross-validation iterators for i.i.d. data": [[377, "cross-validation-iterators-for-i-i-d-data"]], "K-fold": [[377, "k-fold"]], "Repeated K-Fold": [[377, "repeated-k-fold"]], "Leave One Out (LOO)": [[377, "leave-one-out-loo"]], "Leave P Out (LPO)": [[377, "leave-p-out-lpo"]], "Random permutations cross-validation a.k.a. Shuffle & Split": [[377, "random-permutations-cross-validation-a-k-a-shuffle-split"]], "Cross-validation iterators with stratification based on class labels": [[377, "cross-validation-iterators-with-stratification-based-on-class-labels"]], "Stratified k-fold": [[377, "stratified-k-fold"]], "Stratified Shuffle Split": [[377, "stratified-shuffle-split"]], "Cross-validation iterators for grouped data": [[377, "cross-validation-iterators-for-grouped-data"]], "Group k-fold": [[377, "group-k-fold"]], "StratifiedGroupKFold": [[377, "stratifiedgroupkfold"]], "Leave One Group Out": [[377, "leave-one-group-out"]], "Leave P Groups Out": [[377, "leave-p-groups-out"]], "Group Shuffle Split": [[377, "group-shuffle-split"]], "Predefined fold-splits / Validation-sets": [[377, "predefined-fold-splits-validation-sets"]], "Using cross-validation iterators to split train and test": [[377, "using-cross-validation-iterators-to-split-train-and-test"]], "Cross validation of time series data": [[377, "cross-validation-of-time-series-data"]], "Time Series Split": [[377, "time-series-split"]], "A note on shuffling": [[377, "a-note-on-shuffling"]], "Cross validation and model selection": [[377, "cross-validation-and-model-selection"]], "Decomposing signals in components (matrix factorization problems)": [[378, "decomposing-signals-in-components-matrix-factorization-problems"]], "Principal component analysis (PCA)": [[378, "principal-component-analysis-pca"]], "Exact PCA and probabilistic interpretation": [[378, "exact-pca-and-probabilistic-interpretation"]], "PCA using randomized SVD": [[378, "pca-using-randomized-svd"]], "Sparse principal components analysis (SparsePCA and MiniBatchSparsePCA)": [[378, "sparse-principal-components-analysis-sparsepca-and-minibatchsparsepca"]], "Kernel Principal Component Analysis (kPCA)": [[378, "kernel-principal-component-analysis-kpca"]], "Exact Kernel PCA": [[378, "exact-kernel-pca"]], "Choice of solver for Kernel PCA": [[378, "choice-of-solver-for-kernel-pca"]], "Truncated singular value decomposition and latent semantic analysis": [[378, "truncated-singular-value-decomposition-and-latent-semantic-analysis"]], "Dictionary Learning": [[378, "dictionary-learning"]], "Generic dictionary learning": [[378, "generic-dictionary-learning"]], "Mini-batch dictionary learning": [[378, "mini-batch-dictionary-learning"]], "Clustering for dictionary learning": [[378, null]], "Factor Analysis": [[378, "factor-analysis"]], "Independent component analysis (ICA)": [[378, "independent-component-analysis-ica"]], "Non-negative matrix factorization (NMF or NNMF)": [[378, "non-negative-matrix-factorization-nmf-or-nnmf"]], "NMF with the Frobenius norm": [[378, "nmf-with-the-frobenius-norm"]], "NMF with a beta-divergence": [[378, "nmf-with-a-beta-divergence"]], "Mini-batch Non Negative Matrix Factorization": [[378, "mini-batch-non-negative-matrix-factorization"]], "Latent Dirichlet Allocation (LDA)": [[378, "latent-dirichlet-allocation-lda"]], "Density Estimation": [[379, "density-estimation"]], "Density Estimation: Histograms": [[379, "density-estimation-histograms"]], "Ensembles: Gradient boosting, random forests, bagging, voting, stacking": [[380, "ensembles-gradient-boosting-random-forests-bagging-voting-stacking"]], "Gradient-boosted trees": [[380, "gradient-boosted-trees"]], "GradientBoostingClassifier vs HistGradientBoostingClassifier": [[380, null]], "Histogram-Based Gradient Boosting": [[380, "histogram-based-gradient-boosting"]], "Missing values support": [[380, "missing-values-support"]], "Sample weight support": [[380, "sample-weight-support"]], "Categorical Features Support": [[380, "categorical-features-support"]], "Interaction constraints": [[380, "interaction-constraints"]], "Why it\u2019s faster": [[380, "why-it-s-faster"]], "GradientBoostingClassifier and GradientBoostingRegressor": [[380, "gradientboostingclassifier-and-gradientboostingregressor"]], "Fitting additional weak-learners": [[380, "fitting-additional-weak-learners"]], "Controlling the tree size": [[380, "controlling-the-tree-size"]], "Loss Functions": [[380, "loss-functions"]], "Shrinkage via learning rate": [[380, "shrinkage-via-learning-rate"]], "Subsampling": [[380, "subsampling"]], "Interpretation with feature importance": [[380, "interpretation-with-feature-importance"]], "Random forests and other randomized tree ensembles": [[380, "random-forests-and-other-randomized-tree-ensembles"]], "Random Forests": [[380, "random-forests"]], "Extremely Randomized Trees": [[380, "extremely-randomized-trees"]], "Parallelization": [[380, "parallelization"]], "Feature importance evaluation": [[380, "feature-importance-evaluation"]], "Totally Random Trees Embedding": [[380, "totally-random-trees-embedding"]], "Bagging meta-estimator": [[380, "bagging-meta-estimator"]], "Voting Classifier": [[380, "voting-classifier"]], "Majority Class Labels (Majority/Hard Voting)": [[380, "majority-class-labels-majority-hard-voting"]], "Weighted Average Probabilities (Soft Voting)": [[380, "weighted-average-probabilities-soft-voting"]], "Using the VotingClassifier with GridSearchCV": [[380, "using-the-votingclassifier-with-gridsearchcv"]], "Voting Regressor": [[380, "voting-regressor"]], "Stacked generalization": [[380, "stacked-generalization"]], "AdaBoost": [[380, "adaboost"]], "Feature extraction": [[381, "feature-extraction"]], "Loading features from dicts": [[381, "loading-features-from-dicts"]], "Feature hashing": [[381, "feature-hashing"]], "Text feature extraction": [[381, "text-feature-extraction"]], "The Bag of Words representation": [[381, "the-bag-of-words-representation"]], "Sparsity": [[381, "sparsity"], [985, "sparsity"]], "Common Vectorizer usage": [[381, "common-vectorizer-usage"]], "Using stop words": [[381, "using-stop-words"]], "Tf\u2013idf term weighting": [[381, "tfidf-term-weighting"]], "Decoding text files": [[381, "decoding-text-files"]], "Applications and examples": [[381, "applications-and-examples"]], "Limitations of the Bag of Words representation": [[381, "limitations-of-the-bag-of-words-representation"]], "Vectorizing a large text corpus with the hashing trick": [[381, "vectorizing-a-large-text-corpus-with-the-hashing-trick"]], "Customizing the vectorizer classes": [[381, "customizing-the-vectorizer-classes"]], "Image feature extraction": [[381, "image-feature-extraction"]], "Patch extraction": [[381, "patch-extraction"]], "Connectivity graph of an image": [[381, "connectivity-graph-of-an-image"]], "Feature selection": [[382, "feature-selection"]], "Removing features with low variance": [[382, "removing-features-with-low-variance"]], "Feature selection with sparse data": [[382, null]], "Feature selection using SelectFromModel": [[382, "feature-selection-using-selectfrommodel"]], "L1-based feature selection": [[382, "l1-based-feature-selection"]], "Reference": [[382, null], [382, null]], "Tree-based feature selection": [[382, "tree-based-feature-selection"]], "Sequential Feature Selection": [[382, "sequential-feature-selection"]], "Feature selection as part of a pipeline": [[382, "feature-selection-as-part-of-a-pipeline"]], "Gaussian Processes": [[383, "gaussian-processes"]], "Gaussian Process Regression (GPR)": [[383, "gaussian-process-regression-gpr"]], "Gaussian Process Classification (GPC)": [[383, "gaussian-process-classification-gpc"]], "GPC examples": [[383, "gpc-examples"]], "Probabilistic predictions with GPC": [[383, "probabilistic-predictions-with-gpc"]], "Illustration of GPC on the XOR dataset": [[383, "illustration-of-gpc-on-the-xor-dataset"]], "Kernels for Gaussian Processes": [[383, "kernels-for-gaussian-processes"]], "Basic kernels": [[383, "basic-kernels"]], "Kernel operators": [[383, "kernel-operators"]], "Radial basis function (RBF) kernel": [[383, "radial-basis-function-rbf-kernel"]], "Rational quadratic kernel": [[383, "rational-quadratic-kernel"]], "Dot-Product kernel": [[383, "dot-product-kernel"]], "sklearn.cluster.dbscan": [[384, "sklearn-cluster-dbscan"]], "sklearn.decomposition.fastica": [[385, "sklearn-decomposition-fastica"]], "sklearn.covariance.oas": [[386, "sklearn-covariance-oas"]], "sklearn.base.BaseEstimator": [[387, "sklearn-base-baseestimator"]], "Examples using sklearn.base.BaseEstimator": [[387, "examples-using-sklearn-base-baseestimator"]], "sklearn.base.BiclusterMixin": [[388, "sklearn-base-biclustermixin"]], "sklearn.base.ClassNamePrefixFeaturesOutMixin": [[389, "sklearn-base-classnameprefixfeaturesoutmixin"]], "sklearn.base.ClassifierMixin": [[390, "sklearn-base-classifiermixin"]], "Examples using sklearn.base.ClassifierMixin": [[390, "examples-using-sklearn-base-classifiermixin"]], "sklearn.base.ClusterMixin": [[391, "sklearn-base-clustermixin"]], "sklearn.base.DensityMixin": [[392, "sklearn-base-densitymixin"]], "sklearn.base.MetaEstimatorMixin": [[393, "sklearn-base-metaestimatormixin"]], "Examples using sklearn.base.MetaEstimatorMixin": [[393, "examples-using-sklearn-base-metaestimatormixin"]], "sklearn.base.OneToOneFeatureMixin": [[394, "sklearn-base-onetoonefeaturemixin"]], "sklearn.base.OutlierMixin": [[395, "sklearn-base-outliermixin"]], "sklearn.base.RegressorMixin": [[396, "sklearn-base-regressormixin"]], "Examples using sklearn.base.RegressorMixin": [[396, "examples-using-sklearn-base-regressormixin"]], "sklearn.base.TransformerMixin": [[397, "sklearn-base-transformermixin"]], "Examples using sklearn.base.TransformerMixin": [[397, "examples-using-sklearn-base-transformermixin"]], "sklearn.base.clone": [[398, "sklearn-base-clone"]], "sklearn.base.is_classifier": [[399, "sklearn-base-is-classifier"]], "sklearn.base.is_regressor": [[400, "sklearn-base-is-regressor"]], "sklearn.calibration.CalibratedClassifierCV": [[401, "sklearn-calibration-calibratedclassifiercv"]], "Examples using sklearn.calibration.CalibratedClassifierCV": [[401, "examples-using-sklearn-calibration-calibratedclassifiercv"]], "sklearn.calibration.CalibrationDisplay": [[402, "sklearn-calibration-calibrationdisplay"]], "Examples using sklearn.calibration.CalibrationDisplay.from_estimator": [[402, "examples-using-sklearn-calibration-calibrationdisplay-from-estimator"]], "sklearn.calibration.calibration_curve": [[403, "sklearn-calibration-calibration-curve"]], "sklearn.cluster.AffinityPropagation": [[404, "sklearn-cluster-affinitypropagation"]], "Examples using sklearn.cluster.AffinityPropagation": [[404, "examples-using-sklearn-cluster-affinitypropagation"]], "sklearn.cluster.AgglomerativeClustering": [[405, "sklearn-cluster-agglomerativeclustering"]], "Examples using sklearn.cluster.AgglomerativeClustering": [[405, "examples-using-sklearn-cluster-agglomerativeclustering"]], "sklearn.cluster.Birch": [[406, "sklearn-cluster-birch"]], "Examples using sklearn.cluster.Birch": [[406, "examples-using-sklearn-cluster-birch"]], "sklearn.cluster.BisectingKMeans": [[407, "sklearn-cluster-bisectingkmeans"]], "Examples using sklearn.cluster.BisectingKMeans": [[407, "examples-using-sklearn-cluster-bisectingkmeans"]], "sklearn.cluster.DBSCAN": [[408, "sklearn-cluster-dbscan"]], "Examples using sklearn.cluster.DBSCAN": [[408, "examples-using-sklearn-cluster-dbscan"]], "sklearn.cluster.FeatureAgglomeration": [[409, "sklearn-cluster-featureagglomeration"]], "Examples using sklearn.cluster.FeatureAgglomeration": [[409, "examples-using-sklearn-cluster-featureagglomeration"]], "sklearn.cluster.HDBSCAN": [[410, "sklearn-cluster-hdbscan"]], "Examples using sklearn.cluster.HDBSCAN": [[410, "examples-using-sklearn-cluster-hdbscan"]], "sklearn.cluster.KMeans": [[411, "sklearn-cluster-kmeans"]], "Examples using sklearn.cluster.KMeans": [[411, "examples-using-sklearn-cluster-kmeans"]], "sklearn.cluster.MeanShift": [[412, "sklearn-cluster-meanshift"]], "Examples using sklearn.cluster.MeanShift": [[412, "examples-using-sklearn-cluster-meanshift"]], "sklearn.cluster.MiniBatchKMeans": [[413, "sklearn-cluster-minibatchkmeans"]], "Examples using sklearn.cluster.MiniBatchKMeans": [[413, "examples-using-sklearn-cluster-minibatchkmeans"]], "sklearn.cluster.OPTICS": [[414, "sklearn-cluster-optics"]], "Examples using sklearn.cluster.OPTICS": [[414, "examples-using-sklearn-cluster-optics"]], "sklearn.cluster.SpectralBiclustering": [[415, "sklearn-cluster-spectralbiclustering"]], "Examples using sklearn.cluster.SpectralBiclustering": [[415, "examples-using-sklearn-cluster-spectralbiclustering"]], "sklearn.cluster.SpectralClustering": [[416, "sklearn-cluster-spectralclustering"]], "Examples using sklearn.cluster.SpectralClustering": [[416, "examples-using-sklearn-cluster-spectralclustering"]], "sklearn.cluster.SpectralCoclustering": [[417, "sklearn-cluster-spectralcoclustering"]], "Examples using sklearn.cluster.SpectralCoclustering": [[417, "examples-using-sklearn-cluster-spectralcoclustering"]], "sklearn.cluster.affinity_propagation": [[418, "sklearn-cluster-affinity-propagation"]], "Examples using sklearn.cluster.affinity_propagation": [[418, "examples-using-sklearn-cluster-affinity-propagation"]], "sklearn.cluster.cluster_optics_dbscan": [[419, "sklearn-cluster-cluster-optics-dbscan"]], "Examples using sklearn.cluster.cluster_optics_dbscan": [[419, "examples-using-sklearn-cluster-cluster-optics-dbscan"]], "sklearn.cluster.cluster_optics_xi": [[420, "sklearn-cluster-cluster-optics-xi"]], "sklearn.cluster.compute_optics_graph": [[421, "sklearn-cluster-compute-optics-graph"]], "sklearn.cluster.estimate_bandwidth": [[422, "sklearn-cluster-estimate-bandwidth"]], "Examples using sklearn.cluster.estimate_bandwidth": [[422, "examples-using-sklearn-cluster-estimate-bandwidth"]], "sklearn.cluster.k_means": [[423, "sklearn-cluster-k-means"]], "sklearn.cluster.kmeans_plusplus": [[424, "sklearn-cluster-kmeans-plusplus"]], "Examples using sklearn.cluster.kmeans_plusplus": [[424, "examples-using-sklearn-cluster-kmeans-plusplus"]], "sklearn.cluster.mean_shift": [[425, "sklearn-cluster-mean-shift"]], "sklearn.cluster.spectral_clustering": [[426, "sklearn-cluster-spectral-clustering"]], "Examples using sklearn.cluster.spectral_clustering": [[426, "examples-using-sklearn-cluster-spectral-clustering"]], "sklearn.cluster.ward_tree": [[427, "sklearn-cluster-ward-tree"]], "sklearn.compose.ColumnTransformer": [[428, "sklearn-compose-columntransformer"]], "Examples using sklearn.compose.ColumnTransformer": [[428, "examples-using-sklearn-compose-columntransformer"]], "sklearn.compose.TransformedTargetRegressor": [[429, "sklearn-compose-transformedtargetregressor"]], "Examples using sklearn.compose.TransformedTargetRegressor": [[429, "examples-using-sklearn-compose-transformedtargetregressor"]], "sklearn.compose.make_column_selector": [[430, "sklearn-compose-make-column-selector"]], "Examples using sklearn.compose.make_column_selector": [[430, "examples-using-sklearn-compose-make-column-selector"]], "sklearn.compose.make_column_transformer": [[431, "sklearn-compose-make-column-transformer"]], "Examples using sklearn.compose.make_column_transformer": [[431, "examples-using-sklearn-compose-make-column-transformer"]], "sklearn.config_context": [[432, "sklearn-config-context"]], "Examples using sklearn.config_context": [[432, "examples-using-sklearn-config-context"]], "sklearn.covariance.EllipticEnvelope": [[433, "sklearn-covariance-ellipticenvelope"]], "Examples using sklearn.covariance.EllipticEnvelope": [[433, "examples-using-sklearn-covariance-ellipticenvelope"]], "sklearn.covariance.EmpiricalCovariance": [[434, "sklearn-covariance-empiricalcovariance"]], "Examples using sklearn.covariance.EmpiricalCovariance": [[434, "examples-using-sklearn-covariance-empiricalcovariance"]], "sklearn.covariance.GraphicalLasso": [[435, "sklearn-covariance-graphicallasso"]], "sklearn.covariance.GraphicalLassoCV": [[436, "sklearn-covariance-graphicallassocv"]], "Examples using sklearn.covariance.GraphicalLassoCV": [[436, "examples-using-sklearn-covariance-graphicallassocv"]], "sklearn.covariance.LedoitWolf": [[437, "sklearn-covariance-ledoitwolf"]], "Examples using sklearn.covariance.LedoitWolf": [[437, "examples-using-sklearn-covariance-ledoitwolf"]], "sklearn.covariance.MinCovDet": [[438, "sklearn-covariance-mincovdet"]], "Examples using sklearn.covariance.MinCovDet": [[438, "examples-using-sklearn-covariance-mincovdet"]], "sklearn.covariance.OAS": [[439, "sklearn-covariance-oas"]], "Examples using sklearn.covariance.OAS": [[439, "examples-using-sklearn-covariance-oas"]], "sklearn.covariance.ShrunkCovariance": [[440, "sklearn-covariance-shrunkcovariance"]], "Examples using sklearn.covariance.ShrunkCovariance": [[440, "examples-using-sklearn-covariance-shrunkcovariance"]], "sklearn.covariance.empirical_covariance": [[441, "sklearn-covariance-empirical-covariance"]], "Examples using sklearn.covariance.empirical_covariance": [[441, "examples-using-sklearn-covariance-empirical-covariance"]], "sklearn.covariance.graphical_lasso": [[442, "sklearn-covariance-graphical-lasso"]], "sklearn.covariance.ledoit_wolf": [[443, "sklearn-covariance-ledoit-wolf"]], "Examples using sklearn.covariance.ledoit_wolf": [[443, "examples-using-sklearn-covariance-ledoit-wolf"]], "sklearn.covariance.ledoit_wolf_shrinkage": [[444, "sklearn-covariance-ledoit-wolf-shrinkage"]], "sklearn.covariance.shrunk_covariance": [[445, "sklearn-covariance-shrunk-covariance"]], "sklearn.cross_decomposition.CCA": [[446, "sklearn-cross-decomposition-cca"]], "Examples using sklearn.cross_decomposition.CCA": [[446, "examples-using-sklearn-cross-decomposition-cca"]], "sklearn.cross_decomposition.PLSCanonical": [[447, "sklearn-cross-decomposition-plscanonical"]], "Examples using sklearn.cross_decomposition.PLSCanonical": [[447, "examples-using-sklearn-cross-decomposition-plscanonical"]], "sklearn.cross_decomposition.PLSRegression": [[448, "sklearn-cross-decomposition-plsregression"]], "Examples using sklearn.cross_decomposition.PLSRegression": [[448, "examples-using-sklearn-cross-decomposition-plsregression"]], "sklearn.cross_decomposition.PLSSVD": [[449, "sklearn-cross-decomposition-plssvd"]], "sklearn.datasets.clear_data_home": [[450, "sklearn-datasets-clear-data-home"]], "sklearn.datasets.dump_svmlight_file": [[451, "sklearn-datasets-dump-svmlight-file"]], "Examples using sklearn.datasets.dump_svmlight_file": [[451, "examples-using-sklearn-datasets-dump-svmlight-file"]], "sklearn.datasets.fetch_20newsgroups": [[452, "sklearn-datasets-fetch-20newsgroups"]], "Examples using sklearn.datasets.fetch_20newsgroups": [[452, "examples-using-sklearn-datasets-fetch-20newsgroups"]], "sklearn.datasets.fetch_20newsgroups_vectorized": [[453, "sklearn-datasets-fetch-20newsgroups-vectorized"]], "Examples using sklearn.datasets.fetch_20newsgroups_vectorized": [[453, "examples-using-sklearn-datasets-fetch-20newsgroups-vectorized"]], "sklearn.datasets.fetch_california_housing": [[454, "sklearn-datasets-fetch-california-housing"]], "Examples using sklearn.datasets.fetch_california_housing": [[454, "examples-using-sklearn-datasets-fetch-california-housing"]], "sklearn.datasets.fetch_covtype": [[455, "sklearn-datasets-fetch-covtype"]], "Examples using sklearn.datasets.fetch_covtype": [[455, "examples-using-sklearn-datasets-fetch-covtype"]], "sklearn.datasets.fetch_kddcup99": [[456, "sklearn-datasets-fetch-kddcup99"]], "Examples using sklearn.datasets.fetch_kddcup99": [[456, "examples-using-sklearn-datasets-fetch-kddcup99"]], "sklearn.datasets.fetch_lfw_pairs": [[457, "sklearn-datasets-fetch-lfw-pairs"]], "sklearn.datasets.fetch_lfw_people": [[458, "sklearn-datasets-fetch-lfw-people"]], "Examples using sklearn.datasets.fetch_lfw_people": [[458, "examples-using-sklearn-datasets-fetch-lfw-people"]], "sklearn.datasets.fetch_olivetti_faces": [[459, "sklearn-datasets-fetch-olivetti-faces"]], "Examples using sklearn.datasets.fetch_olivetti_faces": [[459, "examples-using-sklearn-datasets-fetch-olivetti-faces"]], "sklearn.datasets.fetch_openml": [[460, "sklearn-datasets-fetch-openml"]], "Examples using sklearn.datasets.fetch_openml": [[460, "examples-using-sklearn-datasets-fetch-openml"]], "sklearn.datasets.fetch_rcv1": [[461, "sklearn-datasets-fetch-rcv1"]], "sklearn.datasets.fetch_species_distributions": [[462, "sklearn-datasets-fetch-species-distributions"]], "Examples using sklearn.datasets.fetch_species_distributions": [[462, "examples-using-sklearn-datasets-fetch-species-distributions"]], "sklearn.datasets.get_data_home": [[463, "sklearn-datasets-get-data-home"]], "Examples using sklearn.datasets.get_data_home": [[463, "examples-using-sklearn-datasets-get-data-home"]], "sklearn.datasets.load_breast_cancer": [[464, "sklearn-datasets-load-breast-cancer"]], "Examples using sklearn.datasets.load_breast_cancer": [[464, "examples-using-sklearn-datasets-load-breast-cancer"]], "sklearn.datasets.load_diabetes": [[465, "sklearn-datasets-load-diabetes"]], "Examples using sklearn.datasets.load_diabetes": [[465, "examples-using-sklearn-datasets-load-diabetes"]], "sklearn.datasets.load_digits": [[466, "sklearn-datasets-load-digits"]], "Examples using sklearn.datasets.load_digits": [[466, "examples-using-sklearn-datasets-load-digits"]], "sklearn.datasets.load_files": [[467, "sklearn-datasets-load-files"]], "sklearn.datasets.load_iris": [[468, "sklearn-datasets-load-iris"]], "Examples using sklearn.datasets.load_iris": [[468, "examples-using-sklearn-datasets-load-iris"]], "sklearn.datasets.load_linnerud": [[469, "sklearn-datasets-load-linnerud"]], "sklearn.datasets.load_sample_image": [[470, "sklearn-datasets-load-sample-image"]], "Examples using sklearn.datasets.load_sample_image": [[470, "examples-using-sklearn-datasets-load-sample-image"]], "sklearn.datasets.load_sample_images": [[471, "sklearn-datasets-load-sample-images"]], "sklearn.datasets.load_svmlight_file": [[472, "sklearn-datasets-load-svmlight-file"]], "sklearn.datasets.load_svmlight_files": [[473, "sklearn-datasets-load-svmlight-files"]], "sklearn.datasets.load_wine": [[474, "sklearn-datasets-load-wine"]], "Examples using sklearn.datasets.load_wine": [[474, "examples-using-sklearn-datasets-load-wine"]], "sklearn.datasets.make_biclusters": [[475, "sklearn-datasets-make-biclusters"]], "Examples using sklearn.datasets.make_biclusters": [[475, "examples-using-sklearn-datasets-make-biclusters"]], "sklearn.datasets.make_blobs": [[476, "sklearn-datasets-make-blobs"]], "Examples using sklearn.datasets.make_blobs": [[476, "examples-using-sklearn-datasets-make-blobs"]], "sklearn.datasets.make_checkerboard": [[477, "sklearn-datasets-make-checkerboard"]], "Examples using sklearn.datasets.make_checkerboard": [[477, "examples-using-sklearn-datasets-make-checkerboard"]], "sklearn.datasets.make_circles": [[478, "sklearn-datasets-make-circles"]], "Examples using sklearn.datasets.make_circles": [[478, "examples-using-sklearn-datasets-make-circles"]], "sklearn.datasets.make_classification": [[479, "sklearn-datasets-make-classification"]], "Examples using sklearn.datasets.make_classification": [[479, "examples-using-sklearn-datasets-make-classification"]], "sklearn.datasets.make_friedman1": [[480, "sklearn-datasets-make-friedman1"]], "sklearn.datasets.make_friedman2": [[481, "sklearn-datasets-make-friedman2"]], "sklearn.datasets.make_friedman3": [[482, "sklearn-datasets-make-friedman3"]], "sklearn.datasets.make_gaussian_quantiles": [[483, "sklearn-datasets-make-gaussian-quantiles"]], "Examples using sklearn.datasets.make_gaussian_quantiles": [[483, "examples-using-sklearn-datasets-make-gaussian-quantiles"]], "sklearn.datasets.make_hastie_10_2": [[484, "sklearn-datasets-make-hastie-10-2"]], "Examples using sklearn.datasets.make_hastie_10_2": [[484, "examples-using-sklearn-datasets-make-hastie-10-2"]], "sklearn.datasets.make_low_rank_matrix": [[485, "sklearn-datasets-make-low-rank-matrix"]], "Examples using sklearn.datasets.make_low_rank_matrix": [[485, "examples-using-sklearn-datasets-make-low-rank-matrix"]], "sklearn.datasets.make_moons": [[486, "sklearn-datasets-make-moons"]], "Examples using sklearn.datasets.make_moons": [[486, "examples-using-sklearn-datasets-make-moons"]], "sklearn.datasets.make_multilabel_classification": [[487, "sklearn-datasets-make-multilabel-classification"]], "Examples using sklearn.datasets.make_multilabel_classification": [[487, "examples-using-sklearn-datasets-make-multilabel-classification"]], "sklearn.datasets.make_regression": [[488, "sklearn-datasets-make-regression"]], "Examples using sklearn.datasets.make_regression": [[488, "examples-using-sklearn-datasets-make-regression"]], "sklearn.datasets.make_s_curve": [[489, "sklearn-datasets-make-s-curve"]], "Examples using sklearn.datasets.make_s_curve": [[489, "examples-using-sklearn-datasets-make-s-curve"]], "sklearn.datasets.make_sparse_coded_signal": [[490, "sklearn-datasets-make-sparse-coded-signal"]], "Examples using sklearn.datasets.make_sparse_coded_signal": [[490, "examples-using-sklearn-datasets-make-sparse-coded-signal"]], "sklearn.datasets.make_sparse_spd_matrix": [[491, "sklearn-datasets-make-sparse-spd-matrix"]], "Examples using sklearn.datasets.make_sparse_spd_matrix": [[491, "examples-using-sklearn-datasets-make-sparse-spd-matrix"]], "sklearn.datasets.make_sparse_uncorrelated": [[492, "sklearn-datasets-make-sparse-uncorrelated"]], "sklearn.datasets.make_spd_matrix": [[493, "sklearn-datasets-make-spd-matrix"]], "sklearn.datasets.make_swiss_roll": [[494, "sklearn-datasets-make-swiss-roll"]], "Examples using sklearn.datasets.make_swiss_roll": [[494, "examples-using-sklearn-datasets-make-swiss-roll"]], "sklearn.decomposition.DictionaryLearning": [[495, "sklearn-decomposition-dictionarylearning"]], "sklearn.decomposition.FactorAnalysis": [[496, "sklearn-decomposition-factoranalysis"]], "Examples using sklearn.decomposition.FactorAnalysis": [[496, "examples-using-sklearn-decomposition-factoranalysis"]], "sklearn.decomposition.FastICA": [[497, "sklearn-decomposition-fastica"]], "Examples using sklearn.decomposition.FastICA": [[497, "examples-using-sklearn-decomposition-fastica"]], "sklearn.decomposition.IncrementalPCA": [[498, "sklearn-decomposition-incrementalpca"]], "Examples using sklearn.decomposition.IncrementalPCA": [[498, "examples-using-sklearn-decomposition-incrementalpca"]], "sklearn.decomposition.KernelPCA": [[499, "sklearn-decomposition-kernelpca"]], "Examples using sklearn.decomposition.KernelPCA": [[499, "examples-using-sklearn-decomposition-kernelpca"]], "sklearn.decomposition.LatentDirichletAllocation": [[500, "sklearn-decomposition-latentdirichletallocation"]], "Examples using sklearn.decomposition.LatentDirichletAllocation": [[500, "examples-using-sklearn-decomposition-latentdirichletallocation"]], "sklearn.decomposition.MiniBatchDictionaryLearning": [[501, "sklearn-decomposition-minibatchdictionarylearning"]], "Examples using sklearn.decomposition.MiniBatchDictionaryLearning": [[501, "examples-using-sklearn-decomposition-minibatchdictionarylearning"]], "sklearn.decomposition.MiniBatchNMF": [[502, "sklearn-decomposition-minibatchnmf"]], "Examples using sklearn.decomposition.MiniBatchNMF": [[502, "examples-using-sklearn-decomposition-minibatchnmf"]], "sklearn.decomposition.MiniBatchSparsePCA": [[503, "sklearn-decomposition-minibatchsparsepca"]], "Examples using sklearn.decomposition.MiniBatchSparsePCA": [[503, "examples-using-sklearn-decomposition-minibatchsparsepca"]], "sklearn.decomposition.NMF": [[504, "sklearn-decomposition-nmf"]], "Examples using sklearn.decomposition.NMF": [[504, "examples-using-sklearn-decomposition-nmf"]], "sklearn.decomposition.PCA": [[505, "sklearn-decomposition-pca"]], "Examples using sklearn.decomposition.PCA": [[505, "examples-using-sklearn-decomposition-pca"]], "sklearn.decomposition.SparseCoder": [[506, "sklearn-decomposition-sparsecoder"]], "Examples using sklearn.decomposition.SparseCoder": [[506, "examples-using-sklearn-decomposition-sparsecoder"]], "sklearn.decomposition.SparsePCA": [[507, "sklearn-decomposition-sparsepca"]], "Examples using sklearn.decomposition.SparsePCA": [[507, "examples-using-sklearn-decomposition-sparsepca"]], "sklearn.decomposition.TruncatedSVD": [[508, "sklearn-decomposition-truncatedsvd"]], "Examples using sklearn.decomposition.TruncatedSVD": [[508, "examples-using-sklearn-decomposition-truncatedsvd"]], "sklearn.decomposition.dict_learning": [[509, "sklearn-decomposition-dict-learning"]], "sklearn.decomposition.dict_learning_online": [[510, "sklearn-decomposition-dict-learning-online"]], "sklearn.decomposition.non_negative_factorization": [[511, "sklearn-decomposition-non-negative-factorization"]], "sklearn.decomposition.sparse_encode": [[512, "sklearn-decomposition-sparse-encode"]], "sklearn.discriminant_analysis.LinearDiscriminantAnalysis": [[513, "sklearn-discriminant-analysis-lineardiscriminantanalysis"]], "Examples using sklearn.discriminant_analysis.LinearDiscriminantAnalysis": [[513, "examples-using-sklearn-discriminant-analysis-lineardiscriminantanalysis"]], "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis": [[514, "sklearn-discriminant-analysis-quadraticdiscriminantanalysis"]], "Examples using sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis": [[514, "examples-using-sklearn-discriminant-analysis-quadraticdiscriminantanalysis"]], "sklearn.dummy.DummyClassifier": [[515, "sklearn-dummy-dummyclassifier"]], "Examples using sklearn.dummy.DummyClassifier": [[515, "examples-using-sklearn-dummy-dummyclassifier"]], "sklearn.dummy.DummyRegressor": [[516, "sklearn-dummy-dummyregressor"]], "Examples using sklearn.dummy.DummyRegressor": [[516, "examples-using-sklearn-dummy-dummyregressor"]], "sklearn.ensemble.AdaBoostClassifier": [[517, "sklearn-ensemble-adaboostclassifier"]], "Examples using sklearn.ensemble.AdaBoostClassifier": [[517, "examples-using-sklearn-ensemble-adaboostclassifier"]], "sklearn.ensemble.AdaBoostRegressor": [[518, "sklearn-ensemble-adaboostregressor"]], "Examples using sklearn.ensemble.AdaBoostRegressor": [[518, "examples-using-sklearn-ensemble-adaboostregressor"]], "sklearn.ensemble.BaggingClassifier": [[519, "sklearn-ensemble-baggingclassifier"]], "sklearn.ensemble.BaggingRegressor": [[520, "sklearn-ensemble-baggingregressor"]], "Examples using sklearn.ensemble.BaggingRegressor": [[520, "examples-using-sklearn-ensemble-baggingregressor"]], "sklearn.ensemble.ExtraTreesClassifier": [[521, "sklearn-ensemble-extratreesclassifier"]], "Examples using sklearn.ensemble.ExtraTreesClassifier": [[521, "examples-using-sklearn-ensemble-extratreesclassifier"]], "sklearn.ensemble.ExtraTreesRegressor": [[522, "sklearn-ensemble-extratreesregressor"]], "Examples using sklearn.ensemble.ExtraTreesRegressor": [[522, "examples-using-sklearn-ensemble-extratreesregressor"]], "sklearn.ensemble.GradientBoostingClassifier": [[523, "sklearn-ensemble-gradientboostingclassifier"]], "Examples using sklearn.ensemble.GradientBoostingClassifier": [[523, "examples-using-sklearn-ensemble-gradientboostingclassifier"]], "sklearn.ensemble.GradientBoostingRegressor": [[524, "sklearn-ensemble-gradientboostingregressor"]], "Examples using sklearn.ensemble.GradientBoostingRegressor": [[524, "examples-using-sklearn-ensemble-gradientboostingregressor"]], "sklearn.ensemble.HistGradientBoostingClassifier": [[525, "sklearn-ensemble-histgradientboostingclassifier"]], "Examples using sklearn.ensemble.HistGradientBoostingClassifier": [[525, "examples-using-sklearn-ensemble-histgradientboostingclassifier"]], "sklearn.ensemble.HistGradientBoostingRegressor": [[526, "sklearn-ensemble-histgradientboostingregressor"]], "Examples using sklearn.ensemble.HistGradientBoostingRegressor": [[526, "examples-using-sklearn-ensemble-histgradientboostingregressor"]], "sklearn.ensemble.IsolationForest": [[527, "sklearn-ensemble-isolationforest"]], "Examples using sklearn.ensemble.IsolationForest": [[527, "examples-using-sklearn-ensemble-isolationforest"]], "sklearn.ensemble.RandomForestClassifier": [[528, "sklearn-ensemble-randomforestclassifier"]], "Examples using sklearn.ensemble.RandomForestClassifier": [[528, "examples-using-sklearn-ensemble-randomforestclassifier"]], "sklearn.ensemble.RandomForestRegressor": [[529, "sklearn-ensemble-randomforestregressor"]], "Examples using sklearn.ensemble.RandomForestRegressor": [[529, "examples-using-sklearn-ensemble-randomforestregressor"]], "sklearn.ensemble.RandomTreesEmbedding": [[530, "sklearn-ensemble-randomtreesembedding"]], "Examples using sklearn.ensemble.RandomTreesEmbedding": [[530, "examples-using-sklearn-ensemble-randomtreesembedding"]], "sklearn.ensemble.StackingClassifier": [[531, "sklearn-ensemble-stackingclassifier"]], "Examples using sklearn.ensemble.StackingClassifier": [[531, "examples-using-sklearn-ensemble-stackingclassifier"]], "sklearn.ensemble.StackingRegressor": [[532, "sklearn-ensemble-stackingregressor"]], "Examples using sklearn.ensemble.StackingRegressor": [[532, "examples-using-sklearn-ensemble-stackingregressor"]], "sklearn.ensemble.VotingClassifier": [[533, "sklearn-ensemble-votingclassifier"]], "Examples using sklearn.ensemble.VotingClassifier": [[533, "examples-using-sklearn-ensemble-votingclassifier"]], "sklearn.ensemble.VotingRegressor": [[534, "sklearn-ensemble-votingregressor"]], "Examples using sklearn.ensemble.VotingRegressor": [[534, "examples-using-sklearn-ensemble-votingregressor"]], "sklearn.exceptions.ConvergenceWarning": [[535, "sklearn-exceptions-convergencewarning"]], "Examples using sklearn.exceptions.ConvergenceWarning": [[535, "examples-using-sklearn-exceptions-convergencewarning"]], "sklearn.exceptions.DataConversionWarning": [[536, "sklearn-exceptions-dataconversionwarning"]], "sklearn.exceptions.DataDimensionalityWarning": [[537, "sklearn-exceptions-datadimensionalitywarning"]], "sklearn.exceptions.EfficiencyWarning": [[538, "sklearn-exceptions-efficiencywarning"]], "sklearn.exceptions.FitFailedWarning": [[539, "sklearn-exceptions-fitfailedwarning"]], "sklearn.exceptions.InconsistentVersionWarning": [[540, "sklearn-exceptions-inconsistentversionwarning"]], "sklearn.exceptions.NotFittedError": [[541, "sklearn-exceptions-notfittederror"]], "sklearn.exceptions.UndefinedMetricWarning": [[542, "sklearn-exceptions-undefinedmetricwarning"]], "sklearn.experimental.enable_halving_search_cv": [[543, "module-sklearn.experimental.enable_halving_search_cv"]], "sklearn.experimental.enable_iterative_imputer": [[544, "module-sklearn.experimental.enable_iterative_imputer"]], "sklearn.feature_extraction.DictVectorizer": [[545, "sklearn-feature-extraction-dictvectorizer"]], "Examples using sklearn.feature_extraction.DictVectorizer": [[545, "examples-using-sklearn-feature-extraction-dictvectorizer"]], "sklearn.feature_extraction.FeatureHasher": [[546, "sklearn-feature-extraction-featurehasher"]], "Examples using sklearn.feature_extraction.FeatureHasher": [[546, "examples-using-sklearn-feature-extraction-featurehasher"]], "sklearn.feature_extraction.image.PatchExtractor": [[547, "sklearn-feature-extraction-image-patchextractor"]], "sklearn.feature_extraction.image.extract_patches_2d": [[548, "sklearn-feature-extraction-image-extract-patches-2d"]], "Examples using sklearn.feature_extraction.image.extract_patches_2d": [[548, "examples-using-sklearn-feature-extraction-image-extract-patches-2d"]], "sklearn.feature_extraction.image.grid_to_graph": [[549, "sklearn-feature-extraction-image-grid-to-graph"]], "sklearn.feature_extraction.image.img_to_graph": [[550, "sklearn-feature-extraction-image-img-to-graph"]], "sklearn.feature_extraction.image.reconstruct_from_patches_2d": [[551, "sklearn-feature-extraction-image-reconstruct-from-patches-2d"]], "Examples using sklearn.feature_extraction.image.reconstruct_from_patches_2d": [[551, "examples-using-sklearn-feature-extraction-image-reconstruct-from-patches-2d"]], "sklearn.feature_extraction.text.CountVectorizer": [[552, "sklearn-feature-extraction-text-countvectorizer"]], "Examples using sklearn.feature_extraction.text.CountVectorizer": [[552, "examples-using-sklearn-feature-extraction-text-countvectorizer"]], "sklearn.feature_extraction.text.HashingVectorizer": [[553, "sklearn-feature-extraction-text-hashingvectorizer"]], "Examples using sklearn.feature_extraction.text.HashingVectorizer": [[553, "examples-using-sklearn-feature-extraction-text-hashingvectorizer"]], "sklearn.feature_extraction.text.TfidfTransformer": [[554, "sklearn-feature-extraction-text-tfidftransformer"]], "Examples using sklearn.feature_extraction.text.TfidfTransformer": [[554, "examples-using-sklearn-feature-extraction-text-tfidftransformer"]], "sklearn.feature_extraction.text.TfidfVectorizer": [[555, "sklearn-feature-extraction-text-tfidfvectorizer"]], "Examples using sklearn.feature_extraction.text.TfidfVectorizer": [[555, "examples-using-sklearn-feature-extraction-text-tfidfvectorizer"]], "sklearn.feature_selection.GenericUnivariateSelect": [[556, "sklearn-feature-selection-genericunivariateselect"]], "sklearn.feature_selection.RFE": [[557, "sklearn-feature-selection-rfe"]], "Examples using sklearn.feature_selection.RFE": [[557, "examples-using-sklearn-feature-selection-rfe"]], "sklearn.feature_selection.RFECV": [[558, "sklearn-feature-selection-rfecv"]], "Examples using sklearn.feature_selection.RFECV": [[558, "examples-using-sklearn-feature-selection-rfecv"]], "sklearn.feature_selection.SelectFdr": [[559, "sklearn-feature-selection-selectfdr"]], "sklearn.feature_selection.SelectFpr": [[560, "sklearn-feature-selection-selectfpr"]], "sklearn.feature_selection.SelectFromModel": [[561, "sklearn-feature-selection-selectfrommodel"]], "Examples using sklearn.feature_selection.SelectFromModel": [[561, "examples-using-sklearn-feature-selection-selectfrommodel"]], "sklearn.feature_selection.SelectFwe": [[562, "sklearn-feature-selection-selectfwe"]], "sklearn.feature_selection.SelectKBest": [[563, "sklearn-feature-selection-selectkbest"]], "Examples using sklearn.feature_selection.SelectKBest": [[563, "examples-using-sklearn-feature-selection-selectkbest"]], "sklearn.feature_selection.SelectPercentile": [[564, "sklearn-feature-selection-selectpercentile"]], "Examples using sklearn.feature_selection.SelectPercentile": [[564, "examples-using-sklearn-feature-selection-selectpercentile"]], "sklearn.feature_selection.SelectorMixin": [[565, "sklearn-feature-selection-selectormixin"]], "sklearn.feature_selection.SequentialFeatureSelector": [[566, "sklearn-feature-selection-sequentialfeatureselector"]], "Examples using sklearn.feature_selection.SequentialFeatureSelector": [[566, "examples-using-sklearn-feature-selection-sequentialfeatureselector"]], "sklearn.feature_selection.VarianceThreshold": [[567, "sklearn-feature-selection-variancethreshold"]], "sklearn.feature_selection.chi2": [[568, "sklearn-feature-selection-chi2"]], "Examples using sklearn.feature_selection.chi2": [[568, "examples-using-sklearn-feature-selection-chi2"]], "sklearn.feature_selection.f_classif": [[569, "sklearn-feature-selection-f-classif"]], "Examples using sklearn.feature_selection.f_classif": [[569, "examples-using-sklearn-feature-selection-f-classif"]], "sklearn.feature_selection.f_regression": [[570, "sklearn-feature-selection-f-regression"]], "Examples using sklearn.feature_selection.f_regression": [[570, "examples-using-sklearn-feature-selection-f-regression"]], "sklearn.feature_selection.mutual_info_classif": [[571, "sklearn-feature-selection-mutual-info-classif"]], "Examples using sklearn.feature_selection.mutual_info_classif": [[571, "examples-using-sklearn-feature-selection-mutual-info-classif"]], "sklearn.feature_selection.mutual_info_regression": [[572, "sklearn-feature-selection-mutual-info-regression"]], "Examples using sklearn.feature_selection.mutual_info_regression": [[572, "examples-using-sklearn-feature-selection-mutual-info-regression"]], "sklearn.feature_selection.r_regression": [[573, "sklearn-feature-selection-r-regression"]], "sklearn.gaussian_process.GaussianProcessClassifier": [[574, "sklearn-gaussian-process-gaussianprocessclassifier"]], "Examples using sklearn.gaussian_process.GaussianProcessClassifier": [[574, "examples-using-sklearn-gaussian-process-gaussianprocessclassifier"]], "sklearn.gaussian_process.GaussianProcessRegressor": [[575, "sklearn-gaussian-process-gaussianprocessregressor"]], "Examples using sklearn.gaussian_process.GaussianProcessRegressor": [[575, "examples-using-sklearn-gaussian-process-gaussianprocessregressor"]], "sklearn.gaussian_process.kernels.CompoundKernel": [[576, "sklearn-gaussian-process-kernels-compoundkernel"]], "sklearn.gaussian_process.kernels.ConstantKernel": [[577, "sklearn-gaussian-process-kernels-constantkernel"]], "Examples using sklearn.gaussian_process.kernels.ConstantKernel": [[577, "examples-using-sklearn-gaussian-process-kernels-constantkernel"]], "sklearn.gaussian_process.kernels.DotProduct": [[578, "sklearn-gaussian-process-kernels-dotproduct"]], "Examples using sklearn.gaussian_process.kernels.DotProduct": [[578, "examples-using-sklearn-gaussian-process-kernels-dotproduct"]], "sklearn.gaussian_process.kernels.ExpSineSquared": [[579, "sklearn-gaussian-process-kernels-expsinesquared"]], "Examples using sklearn.gaussian_process.kernels.ExpSineSquared": [[579, "examples-using-sklearn-gaussian-process-kernels-expsinesquared"]], "sklearn.gaussian_process.kernels.Exponentiation": [[580, "sklearn-gaussian-process-kernels-exponentiation"]], "sklearn.gaussian_process.kernels.Hyperparameter": [[581, "sklearn-gaussian-process-kernels-hyperparameter"]], "Examples using sklearn.gaussian_process.kernels.Hyperparameter": [[581, "examples-using-sklearn-gaussian-process-kernels-hyperparameter"]], "sklearn.gaussian_process.kernels.Kernel": [[582, "sklearn-gaussian-process-kernels-kernel"]], "Examples using sklearn.gaussian_process.kernels.Kernel": [[582, "examples-using-sklearn-gaussian-process-kernels-kernel"]], "sklearn.gaussian_process.kernels.Matern": [[583, "sklearn-gaussian-process-kernels-matern"]], "Examples using sklearn.gaussian_process.kernels.Matern": [[583, "examples-using-sklearn-gaussian-process-kernels-matern"]], "sklearn.gaussian_process.kernels.PairwiseKernel": [[584, "sklearn-gaussian-process-kernels-pairwisekernel"]], "sklearn.gaussian_process.kernels.Product": [[585, "sklearn-gaussian-process-kernels-product"]], "sklearn.gaussian_process.kernels.RBF": [[586, "sklearn-gaussian-process-kernels-rbf"]], "Examples using sklearn.gaussian_process.kernels.RBF": [[586, "examples-using-sklearn-gaussian-process-kernels-rbf"]], "sklearn.gaussian_process.kernels.RationalQuadratic": [[587, "sklearn-gaussian-process-kernels-rationalquadratic"]], "Examples using sklearn.gaussian_process.kernels.RationalQuadratic": [[587, "examples-using-sklearn-gaussian-process-kernels-rationalquadratic"]], "sklearn.gaussian_process.kernels.Sum": [[588, "sklearn-gaussian-process-kernels-sum"]], "sklearn.gaussian_process.kernels.WhiteKernel": [[589, "sklearn-gaussian-process-kernels-whitekernel"]], "Examples using sklearn.gaussian_process.kernels.WhiteKernel": [[589, "examples-using-sklearn-gaussian-process-kernels-whitekernel"]], "sklearn.get_config": [[590, "sklearn-get-config"]], "sklearn.impute.IterativeImputer": [[591, "sklearn-impute-iterativeimputer"]], "Examples using sklearn.impute.IterativeImputer": [[591, "examples-using-sklearn-impute-iterativeimputer"]], "sklearn.impute.KNNImputer": [[592, "sklearn-impute-knnimputer"]], "Examples using sklearn.impute.KNNImputer": [[592, "examples-using-sklearn-impute-knnimputer"]], "sklearn.impute.MissingIndicator": [[593, "sklearn-impute-missingindicator"]], "sklearn.impute.SimpleImputer": [[594, "sklearn-impute-simpleimputer"]], "Examples using sklearn.impute.SimpleImputer": [[594, "examples-using-sklearn-impute-simpleimputer"]], "sklearn.inspection.DecisionBoundaryDisplay": [[595, "sklearn-inspection-decisionboundarydisplay"]], "Examples using sklearn.inspection.DecisionBoundaryDisplay": [[595, "examples-using-sklearn-inspection-decisionboundarydisplay"]], "Examples using sklearn.inspection.DecisionBoundaryDisplay.from_estimator": [[595, "examples-using-sklearn-inspection-decisionboundarydisplay-from-estimator"]], "sklearn.inspection.PartialDependenceDisplay": [[596, "sklearn-inspection-partialdependencedisplay"]], "Examples using sklearn.inspection.PartialDependenceDisplay": [[596, "examples-using-sklearn-inspection-partialdependencedisplay"]], "Examples using sklearn.inspection.PartialDependenceDisplay.from_estimator": [[596, "examples-using-sklearn-inspection-partialdependencedisplay-from-estimator"]], "sklearn.inspection.partial_dependence": [[597, "sklearn-inspection-partial-dependence"]], "Examples using sklearn.inspection.partial_dependence": [[597, "examples-using-sklearn-inspection-partial-dependence"]], "sklearn.inspection.permutation_importance": [[598, "sklearn-inspection-permutation-importance"]], "Examples using sklearn.inspection.permutation_importance": [[598, "examples-using-sklearn-inspection-permutation-importance"]], "sklearn.isotonic.IsotonicRegression": [[599, "sklearn-isotonic-isotonicregression"]], "Examples using sklearn.isotonic.IsotonicRegression": [[599, "examples-using-sklearn-isotonic-isotonicregression"]], "sklearn.isotonic.check_increasing": [[600, "sklearn-isotonic-check-increasing"]], "sklearn.isotonic.isotonic_regression": [[601, "sklearn-isotonic-isotonic-regression"]], "sklearn.kernel_approximation.AdditiveChi2Sampler": [[602, "sklearn-kernel-approximation-additivechi2sampler"]], "sklearn.kernel_approximation.Nystroem": [[603, "sklearn-kernel-approximation-nystroem"]], "Examples using sklearn.kernel_approximation.Nystroem": [[603, "examples-using-sklearn-kernel-approximation-nystroem"]], "sklearn.kernel_approximation.PolynomialCountSketch": [[604, "sklearn-kernel-approximation-polynomialcountsketch"]], "Examples using sklearn.kernel_approximation.PolynomialCountSketch": [[604, "examples-using-sklearn-kernel-approximation-polynomialcountsketch"]], "sklearn.kernel_approximation.RBFSampler": [[605, "sklearn-kernel-approximation-rbfsampler"]], "Examples using sklearn.kernel_approximation.RBFSampler": [[605, "examples-using-sklearn-kernel-approximation-rbfsampler"]], "sklearn.kernel_approximation.SkewedChi2Sampler": [[606, "sklearn-kernel-approximation-skewedchi2sampler"]], "sklearn.kernel_ridge.KernelRidge": [[607, "sklearn-kernel-ridge-kernelridge"]], "Examples using sklearn.kernel_ridge.KernelRidge": [[607, "examples-using-sklearn-kernel-ridge-kernelridge"]], "sklearn.linear_model.ARDRegression": [[608, "sklearn-linear-model-ardregression"]], "Examples using sklearn.linear_model.ARDRegression": [[608, "examples-using-sklearn-linear-model-ardregression"]], "sklearn.linear_model.BayesianRidge": [[609, "sklearn-linear-model-bayesianridge"]], "Examples using sklearn.linear_model.BayesianRidge": [[609, "examples-using-sklearn-linear-model-bayesianridge"]], "sklearn.linear_model.ElasticNet": [[610, "sklearn-linear-model-elasticnet"]], "Examples using sklearn.linear_model.ElasticNet": [[610, "examples-using-sklearn-linear-model-elasticnet"]], "sklearn.linear_model.ElasticNetCV": [[611, "sklearn-linear-model-elasticnetcv"]], "Examples using sklearn.linear_model.ElasticNetCV": [[611, "examples-using-sklearn-linear-model-elasticnetcv"]], "sklearn.linear_model.GammaRegressor": [[612, "sklearn-linear-model-gammaregressor"]], "Examples using sklearn.linear_model.GammaRegressor": [[612, "examples-using-sklearn-linear-model-gammaregressor"]], "sklearn.linear_model.HuberRegressor": [[613, "sklearn-linear-model-huberregressor"]], "Examples using sklearn.linear_model.HuberRegressor": [[613, "examples-using-sklearn-linear-model-huberregressor"]], "sklearn.linear_model.Lars": [[614, "sklearn-linear-model-lars"]], "sklearn.linear_model.LarsCV": [[615, "sklearn-linear-model-larscv"]], "sklearn.linear_model.Lasso": [[616, "sklearn-linear-model-lasso"]], "Examples using sklearn.linear_model.Lasso": [[616, "examples-using-sklearn-linear-model-lasso"]], "sklearn.linear_model.LassoCV": [[617, "sklearn-linear-model-lassocv"]], "Examples using sklearn.linear_model.LassoCV": [[617, "examples-using-sklearn-linear-model-lassocv"]], "sklearn.linear_model.LassoLars": [[618, "sklearn-linear-model-lassolars"]], "sklearn.linear_model.LassoLarsCV": [[619, "sklearn-linear-model-lassolarscv"]], "Examples using sklearn.linear_model.LassoLarsCV": [[619, "examples-using-sklearn-linear-model-lassolarscv"]], "sklearn.linear_model.LassoLarsIC": [[620, "sklearn-linear-model-lassolarsic"]], "Examples using sklearn.linear_model.LassoLarsIC": [[620, "examples-using-sklearn-linear-model-lassolarsic"]], "sklearn.linear_model.LinearRegression": [[621, "sklearn-linear-model-linearregression"]], "Examples using sklearn.linear_model.LinearRegression": [[621, "examples-using-sklearn-linear-model-linearregression"]], "sklearn.linear_model.LogisticRegression": [[622, "sklearn-linear-model-logisticregression"]], "Examples using sklearn.linear_model.LogisticRegression": [[622, "examples-using-sklearn-linear-model-logisticregression"]], "sklearn.linear_model.LogisticRegressionCV": [[623, "sklearn-linear-model-logisticregressioncv"]], "Examples using sklearn.linear_model.LogisticRegressionCV": [[623, "examples-using-sklearn-linear-model-logisticregressioncv"]], "sklearn.linear_model.MultiTaskElasticNet": [[624, "sklearn-linear-model-multitaskelasticnet"]], "sklearn.linear_model.MultiTaskElasticNetCV": [[625, "sklearn-linear-model-multitaskelasticnetcv"]], "sklearn.linear_model.MultiTaskLasso": [[626, "sklearn-linear-model-multitasklasso"]], "Examples using sklearn.linear_model.MultiTaskLasso": [[626, "examples-using-sklearn-linear-model-multitasklasso"]], "sklearn.linear_model.MultiTaskLassoCV": [[627, "sklearn-linear-model-multitasklassocv"]], "sklearn.linear_model.OrthogonalMatchingPursuit": [[628, "sklearn-linear-model-orthogonalmatchingpursuit"]], "Examples using sklearn.linear_model.OrthogonalMatchingPursuit": [[628, "examples-using-sklearn-linear-model-orthogonalmatchingpursuit"]], "sklearn.linear_model.OrthogonalMatchingPursuitCV": [[629, "sklearn-linear-model-orthogonalmatchingpursuitcv"]], "Examples using sklearn.linear_model.OrthogonalMatchingPursuitCV": [[629, "examples-using-sklearn-linear-model-orthogonalmatchingpursuitcv"]], "sklearn.linear_model.PassiveAggressiveClassifier": [[630, "sklearn-linear-model-passiveaggressiveclassifier"]], "Examples using sklearn.linear_model.PassiveAggressiveClassifier": [[630, "examples-using-sklearn-linear-model-passiveaggressiveclassifier"]], "sklearn.linear_model.PassiveAggressiveRegressor": [[631, "sklearn-linear-model-passiveaggressiveregressor"]], "sklearn.linear_model.Perceptron": [[632, "sklearn-linear-model-perceptron"]], "Examples using sklearn.linear_model.Perceptron": [[632, "examples-using-sklearn-linear-model-perceptron"]], "sklearn.linear_model.PoissonRegressor": [[633, "sklearn-linear-model-poissonregressor"]], "Examples using sklearn.linear_model.PoissonRegressor": [[633, "examples-using-sklearn-linear-model-poissonregressor"]], "sklearn.linear_model.QuantileRegressor": [[634, "sklearn-linear-model-quantileregressor"]], "Examples using sklearn.linear_model.QuantileRegressor": [[634, "examples-using-sklearn-linear-model-quantileregressor"]], "sklearn.linear_model.RANSACRegressor": [[635, "sklearn-linear-model-ransacregressor"]], "Examples using sklearn.linear_model.RANSACRegressor": [[635, "examples-using-sklearn-linear-model-ransacregressor"]], "sklearn.linear_model.Ridge": [[636, "sklearn-linear-model-ridge"]], "Examples using sklearn.linear_model.Ridge": [[636, "examples-using-sklearn-linear-model-ridge"]], "sklearn.linear_model.RidgeCV": [[637, "sklearn-linear-model-ridgecv"]], "Examples using sklearn.linear_model.RidgeCV": [[637, "examples-using-sklearn-linear-model-ridgecv"]], "sklearn.linear_model.RidgeClassifier": [[638, "sklearn-linear-model-ridgeclassifier"]], "Examples using sklearn.linear_model.RidgeClassifier": [[638, "examples-using-sklearn-linear-model-ridgeclassifier"]], "sklearn.linear_model.RidgeClassifierCV": [[639, "sklearn-linear-model-ridgeclassifiercv"]], "sklearn.linear_model.SGDClassifier": [[640, "sklearn-linear-model-sgdclassifier"]], "Examples using sklearn.linear_model.SGDClassifier": [[640, "examples-using-sklearn-linear-model-sgdclassifier"]], "sklearn.linear_model.SGDOneClassSVM": [[641, "sklearn-linear-model-sgdoneclasssvm"]], "Examples using sklearn.linear_model.SGDOneClassSVM": [[641, "examples-using-sklearn-linear-model-sgdoneclasssvm"]], "sklearn.linear_model.SGDRegressor": [[642, "sklearn-linear-model-sgdregressor"]], "Examples using sklearn.linear_model.SGDRegressor": [[642, "examples-using-sklearn-linear-model-sgdregressor"]], "sklearn.linear_model.TheilSenRegressor": [[643, "sklearn-linear-model-theilsenregressor"]], "Examples using sklearn.linear_model.TheilSenRegressor": [[643, "examples-using-sklearn-linear-model-theilsenregressor"]], "sklearn.linear_model.TweedieRegressor": [[644, "sklearn-linear-model-tweedieregressor"]], "Examples using sklearn.linear_model.TweedieRegressor": [[644, "examples-using-sklearn-linear-model-tweedieregressor"]], "sklearn.linear_model.enet_path": [[645, "sklearn-linear-model-enet-path"]], "Examples using sklearn.linear_model.enet_path": [[645, "examples-using-sklearn-linear-model-enet-path"]], "sklearn.linear_model.lars_path": [[646, "sklearn-linear-model-lars-path"]], "Examples using sklearn.linear_model.lars_path": [[646, "examples-using-sklearn-linear-model-lars-path"]], "sklearn.linear_model.lars_path_gram": [[647, "sklearn-linear-model-lars-path-gram"]], "sklearn.linear_model.lasso_path": [[648, "sklearn-linear-model-lasso-path"]], "Examples using sklearn.linear_model.lasso_path": [[648, "examples-using-sklearn-linear-model-lasso-path"]], "sklearn.linear_model.orthogonal_mp": [[649, "sklearn-linear-model-orthogonal-mp"]], "sklearn.linear_model.orthogonal_mp_gram": [[650, "sklearn-linear-model-orthogonal-mp-gram"]], "sklearn.linear_model.ridge_regression": [[651, "sklearn-linear-model-ridge-regression"]], "sklearn.manifold.Isomap": [[652, "sklearn-manifold-isomap"]], "Examples using sklearn.manifold.Isomap": [[652, "examples-using-sklearn-manifold-isomap"]], "sklearn.manifold.LocallyLinearEmbedding": [[653, "sklearn-manifold-locallylinearembedding"]], "Examples using sklearn.manifold.LocallyLinearEmbedding": [[653, "examples-using-sklearn-manifold-locallylinearembedding"]], "sklearn.manifold.MDS": [[654, "sklearn-manifold-mds"]], "Examples using sklearn.manifold.MDS": [[654, "examples-using-sklearn-manifold-mds"]], "sklearn.manifold.SpectralEmbedding": [[655, "sklearn-manifold-spectralembedding"]], "Examples using sklearn.manifold.SpectralEmbedding": [[655, "examples-using-sklearn-manifold-spectralembedding"]], "sklearn.manifold.TSNE": [[656, "sklearn-manifold-tsne"]], "Examples using sklearn.manifold.TSNE": [[656, "examples-using-sklearn-manifold-tsne"]], "sklearn.manifold.locally_linear_embedding": [[657, "sklearn-manifold-locally-linear-embedding"]], "Examples using sklearn.manifold.locally_linear_embedding": [[657, "examples-using-sklearn-manifold-locally-linear-embedding"]], "sklearn.manifold.smacof": [[658, "sklearn-manifold-smacof"]], "sklearn.manifold.spectral_embedding": [[659, "sklearn-manifold-spectral-embedding"]], "sklearn.manifold.trustworthiness": [[660, "sklearn-manifold-trustworthiness"]], "sklearn.metrics.ConfusionMatrixDisplay": [[661, "sklearn-metrics-confusionmatrixdisplay"]], "Examples using sklearn.metrics.ConfusionMatrixDisplay": [[661, "examples-using-sklearn-metrics-confusionmatrixdisplay"]], "Examples using sklearn.metrics.ConfusionMatrixDisplay.from_estimator": [[661, "examples-using-sklearn-metrics-confusionmatrixdisplay-from-estimator"]], "Examples using sklearn.metrics.ConfusionMatrixDisplay.from_predictions": [[661, "examples-using-sklearn-metrics-confusionmatrixdisplay-from-predictions"]], "sklearn.metrics.DetCurveDisplay": [[662, "sklearn-metrics-detcurvedisplay"]], "Examples using sklearn.metrics.DetCurveDisplay.from_estimator": [[662, "examples-using-sklearn-metrics-detcurvedisplay-from-estimator"]], "sklearn.metrics.DistanceMetric": [[663, "sklearn-metrics-distancemetric"]], "sklearn.metrics.PrecisionRecallDisplay": [[664, "sklearn-metrics-precisionrecalldisplay"]], "Examples using sklearn.metrics.PrecisionRecallDisplay": [[664, "examples-using-sklearn-metrics-precisionrecalldisplay"]], "Examples using sklearn.metrics.PrecisionRecallDisplay.from_estimator": [[664, "examples-using-sklearn-metrics-precisionrecalldisplay-from-estimator"]], "Examples using sklearn.metrics.PrecisionRecallDisplay.from_predictions": [[664, "examples-using-sklearn-metrics-precisionrecalldisplay-from-predictions"]], "sklearn.metrics.PredictionErrorDisplay": [[665, "sklearn-metrics-predictionerrordisplay"]], "Examples using sklearn.metrics.PredictionErrorDisplay": [[665, "examples-using-sklearn-metrics-predictionerrordisplay"]], "Examples using sklearn.metrics.PredictionErrorDisplay.from_estimator": [[665, "examples-using-sklearn-metrics-predictionerrordisplay-from-estimator"]], "Examples using sklearn.metrics.PredictionErrorDisplay.from_predictions": [[665, "examples-using-sklearn-metrics-predictionerrordisplay-from-predictions"]], "sklearn.metrics.RocCurveDisplay": [[666, "sklearn-metrics-roccurvedisplay"]], "Examples using sklearn.metrics.RocCurveDisplay": [[666, "examples-using-sklearn-metrics-roccurvedisplay"]], "Examples using sklearn.metrics.RocCurveDisplay.from_estimator": [[666, "examples-using-sklearn-metrics-roccurvedisplay-from-estimator"]], "Examples using sklearn.metrics.RocCurveDisplay.from_predictions": [[666, "examples-using-sklearn-metrics-roccurvedisplay-from-predictions"]], "sklearn.metrics.accuracy_score": [[667, "sklearn-metrics-accuracy-score"]], "Examples using sklearn.metrics.accuracy_score": [[667, "examples-using-sklearn-metrics-accuracy-score"]], "sklearn.metrics.adjusted_mutual_info_score": [[668, "sklearn-metrics-adjusted-mutual-info-score"]], "Examples using sklearn.metrics.adjusted_mutual_info_score": [[668, "examples-using-sklearn-metrics-adjusted-mutual-info-score"]], "sklearn.metrics.adjusted_rand_score": [[669, "sklearn-metrics-adjusted-rand-score"]], "Examples using sklearn.metrics.adjusted_rand_score": [[669, "examples-using-sklearn-metrics-adjusted-rand-score"]], "sklearn.metrics.auc": [[670, "sklearn-metrics-auc"]], "Examples using sklearn.metrics.auc": [[670, "examples-using-sklearn-metrics-auc"]], "sklearn.metrics.average_precision_score": [[671, "sklearn-metrics-average-precision-score"]], "Examples using sklearn.metrics.average_precision_score": [[671, "examples-using-sklearn-metrics-average-precision-score"]], "sklearn.metrics.balanced_accuracy_score": [[672, "sklearn-metrics-balanced-accuracy-score"]], "sklearn.metrics.brier_score_loss": [[673, "sklearn-metrics-brier-score-loss"]], "Examples using sklearn.metrics.brier_score_loss": [[673, "examples-using-sklearn-metrics-brier-score-loss"]], "sklearn.metrics.calinski_harabasz_score": [[674, "sklearn-metrics-calinski-harabasz-score"]], "sklearn.metrics.check_scoring": [[675, "sklearn-metrics-check-scoring"]], "sklearn.metrics.class_likelihood_ratios": [[676, "sklearn-metrics-class-likelihood-ratios"]], "Examples using sklearn.metrics.class_likelihood_ratios": [[676, "examples-using-sklearn-metrics-class-likelihood-ratios"]], "sklearn.metrics.classification_report": [[677, "sklearn-metrics-classification-report"]], "Examples using sklearn.metrics.classification_report": [[677, "examples-using-sklearn-metrics-classification-report"]], "sklearn.metrics.cluster.contingency_matrix": [[678, "sklearn-metrics-cluster-contingency-matrix"]], "sklearn.metrics.cluster.pair_confusion_matrix": [[679, "sklearn-metrics-cluster-pair-confusion-matrix"]], "sklearn.metrics.cohen_kappa_score": [[680, "sklearn-metrics-cohen-kappa-score"]], "sklearn.metrics.completeness_score": [[681, "sklearn-metrics-completeness-score"]], "Examples using sklearn.metrics.completeness_score": [[681, "examples-using-sklearn-metrics-completeness-score"]], "sklearn.metrics.confusion_matrix": [[682, "sklearn-metrics-confusion-matrix"]], "Examples using sklearn.metrics.confusion_matrix": [[682, "examples-using-sklearn-metrics-confusion-matrix"]], "sklearn.metrics.consensus_score": [[683, "sklearn-metrics-consensus-score"]], "Examples using sklearn.metrics.consensus_score": [[683, "examples-using-sklearn-metrics-consensus-score"]], "sklearn.metrics.coverage_error": [[684, "sklearn-metrics-coverage-error"]], "sklearn.metrics.d2_absolute_error_score": [[685, "sklearn-metrics-d2-absolute-error-score"]], "sklearn.metrics.d2_pinball_score": [[686, "sklearn-metrics-d2-pinball-score"]], "sklearn.metrics.d2_tweedie_score": [[687, "sklearn-metrics-d2-tweedie-score"]], "sklearn.metrics.davies_bouldin_score": [[688, "sklearn-metrics-davies-bouldin-score"]], "sklearn.metrics.dcg_score": [[689, "sklearn-metrics-dcg-score"]], "sklearn.metrics.det_curve": [[690, "sklearn-metrics-det-curve"]], "Examples using sklearn.metrics.det_curve": [[690, "examples-using-sklearn-metrics-det-curve"]], "sklearn.metrics.explained_variance_score": [[691, "sklearn-metrics-explained-variance-score"]], "sklearn.metrics.f1_score": [[692, "sklearn-metrics-f1-score"]], "Examples using sklearn.metrics.f1_score": [[692, "examples-using-sklearn-metrics-f1-score"]], "sklearn.metrics.fbeta_score": [[693, "sklearn-metrics-fbeta-score"]], "sklearn.metrics.fowlkes_mallows_score": [[694, "sklearn-metrics-fowlkes-mallows-score"]], "sklearn.metrics.get_scorer": [[695, "sklearn-metrics-get-scorer"]], "Examples using sklearn.metrics.get_scorer": [[695, "examples-using-sklearn-metrics-get-scorer"]], "sklearn.metrics.get_scorer_names": [[696, "sklearn-metrics-get-scorer-names"]], "sklearn.metrics.hamming_loss": [[697, "sklearn-metrics-hamming-loss"]], "Examples using sklearn.metrics.hamming_loss": [[697, "examples-using-sklearn-metrics-hamming-loss"]], "sklearn.metrics.hinge_loss": [[698, "sklearn-metrics-hinge-loss"]], "Examples using sklearn.metrics.hinge_loss": [[698, "examples-using-sklearn-metrics-hinge-loss"]], "sklearn.metrics.homogeneity_completeness_v_measure": [[699, "sklearn-metrics-homogeneity-completeness-v-measure"]], "sklearn.metrics.homogeneity_score": [[700, "sklearn-metrics-homogeneity-score"]], "Examples using sklearn.metrics.homogeneity_score": [[700, "examples-using-sklearn-metrics-homogeneity-score"]], "sklearn.metrics.jaccard_score": [[701, "sklearn-metrics-jaccard-score"]], "Examples using sklearn.metrics.jaccard_score": [[701, "examples-using-sklearn-metrics-jaccard-score"]], "sklearn.metrics.label_ranking_average_precision_score": [[702, "sklearn-metrics-label-ranking-average-precision-score"]], "sklearn.metrics.label_ranking_loss": [[703, "sklearn-metrics-label-ranking-loss"]], "sklearn.metrics.log_loss": [[704, "sklearn-metrics-log-loss"]], "Examples using sklearn.metrics.log_loss": [[704, "examples-using-sklearn-metrics-log-loss"]], "sklearn.metrics.make_scorer": [[705, "sklearn-metrics-make-scorer"]], "Examples using sklearn.metrics.make_scorer": [[705, "examples-using-sklearn-metrics-make-scorer"]], "sklearn.metrics.matthews_corrcoef": [[706, "sklearn-metrics-matthews-corrcoef"]], "sklearn.metrics.max_error": [[707, "sklearn-metrics-max-error"]], "sklearn.metrics.mean_absolute_error": [[708, "sklearn-metrics-mean-absolute-error"]], "Examples using sklearn.metrics.mean_absolute_error": [[708, "examples-using-sklearn-metrics-mean-absolute-error"]], "sklearn.metrics.mean_absolute_percentage_error": [[709, "sklearn-metrics-mean-absolute-percentage-error"]], "Examples using sklearn.metrics.mean_absolute_percentage_error": [[709, "examples-using-sklearn-metrics-mean-absolute-percentage-error"]], "sklearn.metrics.mean_gamma_deviance": [[710, "sklearn-metrics-mean-gamma-deviance"]], "sklearn.metrics.mean_pinball_loss": [[711, "sklearn-metrics-mean-pinball-loss"]], "Examples using sklearn.metrics.mean_pinball_loss": [[711, "examples-using-sklearn-metrics-mean-pinball-loss"]], "sklearn.metrics.mean_poisson_deviance": [[712, "sklearn-metrics-mean-poisson-deviance"]], "Examples using sklearn.metrics.mean_poisson_deviance": [[712, "examples-using-sklearn-metrics-mean-poisson-deviance"]], "sklearn.metrics.mean_squared_error": [[713, "sklearn-metrics-mean-squared-error"]], "Examples using sklearn.metrics.mean_squared_error": [[713, "examples-using-sklearn-metrics-mean-squared-error"]], "sklearn.metrics.mean_squared_log_error": [[714, "sklearn-metrics-mean-squared-log-error"]], "sklearn.metrics.mean_tweedie_deviance": [[715, "sklearn-metrics-mean-tweedie-deviance"]], "Examples using sklearn.metrics.mean_tweedie_deviance": [[715, "examples-using-sklearn-metrics-mean-tweedie-deviance"]], "sklearn.metrics.median_absolute_error": [[716, "sklearn-metrics-median-absolute-error"]], "Examples using sklearn.metrics.median_absolute_error": [[716, "examples-using-sklearn-metrics-median-absolute-error"]], "sklearn.metrics.multilabel_confusion_matrix": [[717, "sklearn-metrics-multilabel-confusion-matrix"]], "sklearn.metrics.mutual_info_score": [[718, "sklearn-metrics-mutual-info-score"]], "Examples using sklearn.metrics.mutual_info_score": [[718, "examples-using-sklearn-metrics-mutual-info-score"]], "sklearn.metrics.ndcg_score": [[719, "sklearn-metrics-ndcg-score"]], "sklearn.metrics.normalized_mutual_info_score": [[720, "sklearn-metrics-normalized-mutual-info-score"]], "Examples using sklearn.metrics.normalized_mutual_info_score": [[720, "examples-using-sklearn-metrics-normalized-mutual-info-score"]], "sklearn.metrics.pairwise.additive_chi2_kernel": [[721, "sklearn-metrics-pairwise-additive-chi2-kernel"]], "sklearn.metrics.pairwise.chi2_kernel": [[722, "sklearn-metrics-pairwise-chi2-kernel"]], "sklearn.metrics.pairwise.cosine_distances": [[723, "sklearn-metrics-pairwise-cosine-distances"]], "sklearn.metrics.pairwise.cosine_similarity": [[724, "sklearn-metrics-pairwise-cosine-similarity"]], "Examples using sklearn.metrics.pairwise.cosine_similarity": [[724, "examples-using-sklearn-metrics-pairwise-cosine-similarity"]], "sklearn.metrics.pairwise.distance_metrics": [[725, "sklearn-metrics-pairwise-distance-metrics"]], "sklearn.metrics.pairwise.euclidean_distances": [[726, "sklearn-metrics-pairwise-euclidean-distances"]], "sklearn.metrics.pairwise.haversine_distances": [[727, "sklearn-metrics-pairwise-haversine-distances"]], "sklearn.metrics.pairwise.kernel_metrics": [[728, "sklearn-metrics-pairwise-kernel-metrics"]], "sklearn.metrics.pairwise.laplacian_kernel": [[729, "sklearn-metrics-pairwise-laplacian-kernel"]], "sklearn.metrics.pairwise.linear_kernel": [[730, "sklearn-metrics-pairwise-linear-kernel"]], "sklearn.metrics.pairwise.manhattan_distances": [[731, "sklearn-metrics-pairwise-manhattan-distances"]], "sklearn.metrics.pairwise.nan_euclidean_distances": [[732, "sklearn-metrics-pairwise-nan-euclidean-distances"]], "sklearn.metrics.pairwise.paired_cosine_distances": [[733, "sklearn-metrics-pairwise-paired-cosine-distances"]], "sklearn.metrics.pairwise.paired_distances": [[734, "sklearn-metrics-pairwise-paired-distances"]], "sklearn.metrics.pairwise.paired_euclidean_distances": [[735, "sklearn-metrics-pairwise-paired-euclidean-distances"]], "sklearn.metrics.pairwise.paired_manhattan_distances": [[736, "sklearn-metrics-pairwise-paired-manhattan-distances"]], "sklearn.metrics.pairwise.pairwise_kernels": [[737, "sklearn-metrics-pairwise-pairwise-kernels"]], "sklearn.metrics.pairwise.polynomial_kernel": [[738, "sklearn-metrics-pairwise-polynomial-kernel"]], "sklearn.metrics.pairwise.rbf_kernel": [[739, "sklearn-metrics-pairwise-rbf-kernel"]], "sklearn.metrics.pairwise.sigmoid_kernel": [[740, "sklearn-metrics-pairwise-sigmoid-kernel"]], "sklearn.metrics.pairwise_distances": [[741, "sklearn-metrics-pairwise-distances"]], "Examples using sklearn.metrics.pairwise_distances": [[741, "examples-using-sklearn-metrics-pairwise-distances"]], "sklearn.metrics.pairwise_distances_argmin": [[742, "sklearn-metrics-pairwise-distances-argmin"]], "Examples using sklearn.metrics.pairwise_distances_argmin": [[742, "examples-using-sklearn-metrics-pairwise-distances-argmin"]], "sklearn.metrics.pairwise_distances_argmin_min": [[743, "sklearn-metrics-pairwise-distances-argmin-min"]], "sklearn.metrics.pairwise_distances_chunked": [[744, "sklearn-metrics-pairwise-distances-chunked"]], "sklearn.metrics.precision_recall_curve": [[745, "sklearn-metrics-precision-recall-curve"]], "Examples using sklearn.metrics.precision_recall_curve": [[745, "examples-using-sklearn-metrics-precision-recall-curve"]], "sklearn.metrics.precision_recall_fscore_support": [[746, "sklearn-metrics-precision-recall-fscore-support"]], "sklearn.metrics.precision_score": [[747, "sklearn-metrics-precision-score"]], "Examples using sklearn.metrics.precision_score": [[747, "examples-using-sklearn-metrics-precision-score"]], "sklearn.metrics.r2_score": [[748, "sklearn-metrics-r2-score"]], "Examples using sklearn.metrics.r2_score": [[748, "examples-using-sklearn-metrics-r2-score"]], "sklearn.metrics.rand_score": [[749, "sklearn-metrics-rand-score"]], "Examples using sklearn.metrics.rand_score": [[749, "examples-using-sklearn-metrics-rand-score"]], "sklearn.metrics.recall_score": [[750, "sklearn-metrics-recall-score"]], "Examples using sklearn.metrics.recall_score": [[750, "examples-using-sklearn-metrics-recall-score"]], "sklearn.metrics.roc_auc_score": [[751, "sklearn-metrics-roc-auc-score"]], "Examples using sklearn.metrics.roc_auc_score": [[751, "examples-using-sklearn-metrics-roc-auc-score"]], "sklearn.metrics.roc_curve": [[752, "sklearn-metrics-roc-curve"]], "Examples using sklearn.metrics.roc_curve": [[752, "examples-using-sklearn-metrics-roc-curve"]], "sklearn.metrics.root_mean_squared_error": [[753, "sklearn-metrics-root-mean-squared-error"]], "Examples using sklearn.metrics.root_mean_squared_error": [[753, "examples-using-sklearn-metrics-root-mean-squared-error"]], "sklearn.metrics.root_mean_squared_log_error": [[754, "sklearn-metrics-root-mean-squared-log-error"]], "sklearn.metrics.silhouette_samples": [[755, "sklearn-metrics-silhouette-samples"]], "Examples using sklearn.metrics.silhouette_samples": [[755, "examples-using-sklearn-metrics-silhouette-samples"]], "sklearn.metrics.silhouette_score": [[756, "sklearn-metrics-silhouette-score"]], "Examples using sklearn.metrics.silhouette_score": [[756, "examples-using-sklearn-metrics-silhouette-score"]], "sklearn.metrics.top_k_accuracy_score": [[757, "sklearn-metrics-top-k-accuracy-score"]], "sklearn.metrics.v_measure_score": [[758, "sklearn-metrics-v-measure-score"]], "Examples using sklearn.metrics.v_measure_score": [[758, "examples-using-sklearn-metrics-v-measure-score"]], "sklearn.metrics.zero_one_loss": [[759, "sklearn-metrics-zero-one-loss"]], "sklearn.mixture.BayesianGaussianMixture": [[760, "sklearn-mixture-bayesiangaussianmixture"]], "Examples using sklearn.mixture.BayesianGaussianMixture": [[760, "examples-using-sklearn-mixture-bayesiangaussianmixture"]], "sklearn.mixture.GaussianMixture": [[761, "sklearn-mixture-gaussianmixture"]], "Examples using sklearn.mixture.GaussianMixture": [[761, "examples-using-sklearn-mixture-gaussianmixture"]], "sklearn.model_selection.GridSearchCV": [[762, "sklearn-model-selection-gridsearchcv"]], "Examples using sklearn.model_selection.GridSearchCV": [[762, "examples-using-sklearn-model-selection-gridsearchcv"]], "sklearn.model_selection.GroupKFold": [[763, "sklearn-model-selection-groupkfold"]], "Examples using sklearn.model_selection.GroupKFold": [[763, "examples-using-sklearn-model-selection-groupkfold"]], "sklearn.model_selection.GroupShuffleSplit": [[764, "sklearn-model-selection-groupshufflesplit"]], "Examples using sklearn.model_selection.GroupShuffleSplit": [[764, "examples-using-sklearn-model-selection-groupshufflesplit"]], "sklearn.model_selection.HalvingGridSearchCV": [[765, "sklearn-model-selection-halvinggridsearchcv"]], "Examples using sklearn.model_selection.HalvingGridSearchCV": [[765, "examples-using-sklearn-model-selection-halvinggridsearchcv"]], "sklearn.model_selection.HalvingRandomSearchCV": [[766, "sklearn-model-selection-halvingrandomsearchcv"]], "Examples using sklearn.model_selection.HalvingRandomSearchCV": [[766, "examples-using-sklearn-model-selection-halvingrandomsearchcv"]], "sklearn.model_selection.KFold": [[767, "sklearn-model-selection-kfold"]], "Examples using sklearn.model_selection.KFold": [[767, "examples-using-sklearn-model-selection-kfold"]], "sklearn.model_selection.LearningCurveDisplay": [[768, "sklearn-model-selection-learningcurvedisplay"]], "Examples using sklearn.model_selection.LearningCurveDisplay": [[768, "examples-using-sklearn-model-selection-learningcurvedisplay"]], "Examples using sklearn.model_selection.LearningCurveDisplay.from_estimator": [[768, "examples-using-sklearn-model-selection-learningcurvedisplay-from-estimator"]], "sklearn.model_selection.LeaveOneGroupOut": [[769, "sklearn-model-selection-leaveonegroupout"]], "sklearn.model_selection.LeaveOneOut": [[770, "sklearn-model-selection-leaveoneout"]], "sklearn.model_selection.LeavePGroupsOut": [[771, "sklearn-model-selection-leavepgroupsout"]], "sklearn.model_selection.LeavePOut": [[772, "sklearn-model-selection-leavepout"]], "sklearn.model_selection.ParameterGrid": [[773, "sklearn-model-selection-parametergrid"]], "sklearn.model_selection.ParameterSampler": [[774, "sklearn-model-selection-parametersampler"]], "sklearn.model_selection.PredefinedSplit": [[775, "sklearn-model-selection-predefinedsplit"]], "sklearn.model_selection.RandomizedSearchCV": [[776, "sklearn-model-selection-randomizedsearchcv"]], "Examples using sklearn.model_selection.RandomizedSearchCV": [[776, "examples-using-sklearn-model-selection-randomizedsearchcv"]], "sklearn.model_selection.RepeatedKFold": [[777, "sklearn-model-selection-repeatedkfold"]], "Examples using sklearn.model_selection.RepeatedKFold": [[777, "examples-using-sklearn-model-selection-repeatedkfold"]], "sklearn.model_selection.RepeatedStratifiedKFold": [[778, "sklearn-model-selection-repeatedstratifiedkfold"]], "Examples using sklearn.model_selection.RepeatedStratifiedKFold": [[778, "examples-using-sklearn-model-selection-repeatedstratifiedkfold"]], "sklearn.model_selection.ShuffleSplit": [[779, "sklearn-model-selection-shufflesplit"]], "Examples using sklearn.model_selection.ShuffleSplit": [[779, "examples-using-sklearn-model-selection-shufflesplit"]], "sklearn.model_selection.StratifiedGroupKFold": [[780, "sklearn-model-selection-stratifiedgroupkfold"]], "Examples using sklearn.model_selection.StratifiedGroupKFold": [[780, "examples-using-sklearn-model-selection-stratifiedgroupkfold"]], "sklearn.model_selection.StratifiedKFold": [[781, "sklearn-model-selection-stratifiedkfold"]], "Examples using sklearn.model_selection.StratifiedKFold": [[781, "examples-using-sklearn-model-selection-stratifiedkfold"]], "sklearn.model_selection.StratifiedShuffleSplit": [[782, "sklearn-model-selection-stratifiedshufflesplit"]], "Examples using sklearn.model_selection.StratifiedShuffleSplit": [[782, "examples-using-sklearn-model-selection-stratifiedshufflesplit"]], "sklearn.model_selection.TimeSeriesSplit": [[783, "sklearn-model-selection-timeseriessplit"]], "Examples using sklearn.model_selection.TimeSeriesSplit": [[783, "examples-using-sklearn-model-selection-timeseriessplit"]], "sklearn.model_selection.ValidationCurveDisplay": [[784, "sklearn-model-selection-validationcurvedisplay"]], "Examples using sklearn.model_selection.ValidationCurveDisplay.from_estimator": [[784, "examples-using-sklearn-model-selection-validationcurvedisplay-from-estimator"]], "sklearn.model_selection.check_cv": [[785, "sklearn-model-selection-check-cv"]], "sklearn.model_selection.cross_val_predict": [[786, "sklearn-model-selection-cross-val-predict"]], "Examples using sklearn.model_selection.cross_val_predict": [[786, "examples-using-sklearn-model-selection-cross-val-predict"]], "sklearn.model_selection.cross_val_score": [[787, "sklearn-model-selection-cross-val-score"]], "Examples using sklearn.model_selection.cross_val_score": [[787, "examples-using-sklearn-model-selection-cross-val-score"]], "sklearn.model_selection.cross_validate": [[788, "sklearn-model-selection-cross-validate"]], "Examples using sklearn.model_selection.cross_validate": [[788, "examples-using-sklearn-model-selection-cross-validate"]], "sklearn.model_selection.learning_curve": [[789, "sklearn-model-selection-learning-curve"]], "Examples using sklearn.model_selection.learning_curve": [[789, "examples-using-sklearn-model-selection-learning-curve"]], "sklearn.model_selection.permutation_test_score": [[790, "sklearn-model-selection-permutation-test-score"]], "Examples using sklearn.model_selection.permutation_test_score": [[790, "examples-using-sklearn-model-selection-permutation-test-score"]], "sklearn.model_selection.train_test_split": [[791, "sklearn-model-selection-train-test-split"]], "Examples using sklearn.model_selection.train_test_split": [[791, "examples-using-sklearn-model-selection-train-test-split"]], "sklearn.model_selection.validation_curve": [[792, "sklearn-model-selection-validation-curve"]], "Examples using sklearn.model_selection.validation_curve": [[792, "examples-using-sklearn-model-selection-validation-curve"]], "sklearn.multiclass.OneVsOneClassifier": [[793, "sklearn-multiclass-onevsoneclassifier"]], "Examples using sklearn.multiclass.OneVsOneClassifier": [[793, "examples-using-sklearn-multiclass-onevsoneclassifier"]], "sklearn.multiclass.OneVsRestClassifier": [[794, "sklearn-multiclass-onevsrestclassifier"]], "Examples using sklearn.multiclass.OneVsRestClassifier": [[794, "examples-using-sklearn-multiclass-onevsrestclassifier"]], "sklearn.multiclass.OutputCodeClassifier": [[795, "sklearn-multiclass-outputcodeclassifier"]], "Examples using sklearn.multiclass.OutputCodeClassifier": [[795, "examples-using-sklearn-multiclass-outputcodeclassifier"]], "sklearn.multioutput.ClassifierChain": [[796, "sklearn-multioutput-classifierchain"]], "Examples using sklearn.multioutput.ClassifierChain": [[796, "examples-using-sklearn-multioutput-classifierchain"]], "sklearn.multioutput.MultiOutputClassifier": [[797, "sklearn-multioutput-multioutputclassifier"]], "sklearn.multioutput.MultiOutputRegressor": [[798, "sklearn-multioutput-multioutputregressor"]], "Examples using sklearn.multioutput.MultiOutputRegressor": [[798, "examples-using-sklearn-multioutput-multioutputregressor"]], "sklearn.multioutput.RegressorChain": [[799, "sklearn-multioutput-regressorchain"]], "sklearn.naive_bayes.BernoulliNB": [[800, "sklearn-naive-bayes-bernoullinb"]], "Examples using sklearn.naive_bayes.BernoulliNB": [[800, "examples-using-sklearn-naive-bayes-bernoullinb"]], "sklearn.naive_bayes.CategoricalNB": [[801, "sklearn-naive-bayes-categoricalnb"]], "sklearn.naive_bayes.ComplementNB": [[802, "sklearn-naive-bayes-complementnb"]], "Examples using sklearn.naive_bayes.ComplementNB": [[802, "examples-using-sklearn-naive-bayes-complementnb"]], "sklearn.naive_bayes.GaussianNB": [[803, "sklearn-naive-bayes-gaussiannb"]], "Examples using sklearn.naive_bayes.GaussianNB": [[803, "examples-using-sklearn-naive-bayes-gaussiannb"]], "sklearn.naive_bayes.MultinomialNB": [[804, "sklearn-naive-bayes-multinomialnb"]], "Examples using sklearn.naive_bayes.MultinomialNB": [[804, "examples-using-sklearn-naive-bayes-multinomialnb"]], "sklearn.neighbors.BallTree": [[805, "sklearn-neighbors-balltree"]], "sklearn.neighbors.KDTree": [[806, "sklearn-neighbors-kdtree"]], "sklearn.neighbors.KNeighborsClassifier": [[807, "sklearn-neighbors-kneighborsclassifier"]], "Examples using sklearn.neighbors.KNeighborsClassifier": [[807, "examples-using-sklearn-neighbors-kneighborsclassifier"]], "sklearn.neighbors.KNeighborsRegressor": [[808, "sklearn-neighbors-kneighborsregressor"]], "Examples using sklearn.neighbors.KNeighborsRegressor": [[808, "examples-using-sklearn-neighbors-kneighborsregressor"]], "sklearn.neighbors.KNeighborsTransformer": [[809, "sklearn-neighbors-kneighborstransformer"]], "Examples using sklearn.neighbors.KNeighborsTransformer": [[809, "examples-using-sklearn-neighbors-kneighborstransformer"]], "sklearn.neighbors.KernelDensity": [[810, "sklearn-neighbors-kerneldensity"]], "Examples using sklearn.neighbors.KernelDensity": [[810, "examples-using-sklearn-neighbors-kerneldensity"]], "sklearn.neighbors.LocalOutlierFactor": [[811, "sklearn-neighbors-localoutlierfactor"]], "Examples using sklearn.neighbors.LocalOutlierFactor": [[811, "examples-using-sklearn-neighbors-localoutlierfactor"]], "sklearn.neighbors.NearestCentroid": [[812, "sklearn-neighbors-nearestcentroid"]], "Examples using sklearn.neighbors.NearestCentroid": [[812, "examples-using-sklearn-neighbors-nearestcentroid"]], "sklearn.neighbors.NearestNeighbors": [[813, "sklearn-neighbors-nearestneighbors"]], "Examples using sklearn.neighbors.NearestNeighbors": [[813, "examples-using-sklearn-neighbors-nearestneighbors"]], "sklearn.neighbors.NeighborhoodComponentsAnalysis": [[814, "sklearn-neighbors-neighborhoodcomponentsanalysis"]], "Examples using sklearn.neighbors.NeighborhoodComponentsAnalysis": [[814, "examples-using-sklearn-neighbors-neighborhoodcomponentsanalysis"]], "sklearn.neighbors.RadiusNeighborsClassifier": [[815, "sklearn-neighbors-radiusneighborsclassifier"]], "sklearn.neighbors.RadiusNeighborsRegressor": [[816, "sklearn-neighbors-radiusneighborsregressor"]], "sklearn.neighbors.RadiusNeighborsTransformer": [[817, "sklearn-neighbors-radiusneighborstransformer"]], "sklearn.neighbors.kneighbors_graph": [[818, "sklearn-neighbors-kneighbors-graph"]], "Examples using sklearn.neighbors.kneighbors_graph": [[818, "examples-using-sklearn-neighbors-kneighbors-graph"]], "sklearn.neighbors.radius_neighbors_graph": [[819, "sklearn-neighbors-radius-neighbors-graph"]], "sklearn.neighbors.sort_graph_by_row_values": [[820, "sklearn-neighbors-sort-graph-by-row-values"]], "sklearn.neural_network.BernoulliRBM": [[821, "sklearn-neural-network-bernoullirbm"]], "Examples using sklearn.neural_network.BernoulliRBM": [[821, "examples-using-sklearn-neural-network-bernoullirbm"]], "sklearn.neural_network.MLPClassifier": [[822, "sklearn-neural-network-mlpclassifier"]], "Examples using sklearn.neural_network.MLPClassifier": [[822, "examples-using-sklearn-neural-network-mlpclassifier"]], "sklearn.neural_network.MLPRegressor": [[823, "sklearn-neural-network-mlpregressor"]], "Examples using sklearn.neural_network.MLPRegressor": [[823, "examples-using-sklearn-neural-network-mlpregressor"]], "sklearn.pipeline.FeatureUnion": [[824, "sklearn-pipeline-featureunion"]], "Examples using sklearn.pipeline.FeatureUnion": [[824, "examples-using-sklearn-pipeline-featureunion"]], "sklearn.pipeline.Pipeline": [[825, "sklearn-pipeline-pipeline"]], "Examples using sklearn.pipeline.Pipeline": [[825, "examples-using-sklearn-pipeline-pipeline"]], "sklearn.pipeline.make_pipeline": [[826, "sklearn-pipeline-make-pipeline"]], "Examples using sklearn.pipeline.make_pipeline": [[826, "examples-using-sklearn-pipeline-make-pipeline"]], "sklearn.pipeline.make_union": [[827, "sklearn-pipeline-make-union"]], "sklearn.preprocessing.Binarizer": [[828, "sklearn-preprocessing-binarizer"]], "sklearn.preprocessing.FunctionTransformer": [[829, "sklearn-preprocessing-functiontransformer"]], "Examples using sklearn.preprocessing.FunctionTransformer": [[829, "examples-using-sklearn-preprocessing-functiontransformer"]], "sklearn.preprocessing.KBinsDiscretizer": [[830, "sklearn-preprocessing-kbinsdiscretizer"]], "Examples using sklearn.preprocessing.KBinsDiscretizer": [[830, "examples-using-sklearn-preprocessing-kbinsdiscretizer"]], "sklearn.preprocessing.KernelCenterer": [[831, "sklearn-preprocessing-kernelcenterer"]], "sklearn.preprocessing.LabelBinarizer": [[832, "sklearn-preprocessing-labelbinarizer"]], "Examples using sklearn.preprocessing.LabelBinarizer": [[832, "examples-using-sklearn-preprocessing-labelbinarizer"]], "sklearn.preprocessing.LabelEncoder": [[833, "sklearn-preprocessing-labelencoder"]], "sklearn.preprocessing.MaxAbsScaler": [[834, "sklearn-preprocessing-maxabsscaler"]], "Examples using sklearn.preprocessing.MaxAbsScaler": [[834, "examples-using-sklearn-preprocessing-maxabsscaler"]], "sklearn.preprocessing.MinMaxScaler": [[835, "sklearn-preprocessing-minmaxscaler"]], "Examples using sklearn.preprocessing.MinMaxScaler": [[835, "examples-using-sklearn-preprocessing-minmaxscaler"]], "sklearn.preprocessing.MultiLabelBinarizer": [[836, "sklearn-preprocessing-multilabelbinarizer"]], "sklearn.preprocessing.Normalizer": [[837, "sklearn-preprocessing-normalizer"]], "Examples using sklearn.preprocessing.Normalizer": [[837, "examples-using-sklearn-preprocessing-normalizer"]], "sklearn.preprocessing.OneHotEncoder": [[838, "sklearn-preprocessing-onehotencoder"]], "Examples using sklearn.preprocessing.OneHotEncoder": [[838, "examples-using-sklearn-preprocessing-onehotencoder"]], "sklearn.preprocessing.OrdinalEncoder": [[839, "sklearn-preprocessing-ordinalencoder"]], "Examples using sklearn.preprocessing.OrdinalEncoder": [[839, "examples-using-sklearn-preprocessing-ordinalencoder"]], "sklearn.preprocessing.PolynomialFeatures": [[840, "sklearn-preprocessing-polynomialfeatures"]], "Examples using sklearn.preprocessing.PolynomialFeatures": [[840, "examples-using-sklearn-preprocessing-polynomialfeatures"]], "sklearn.preprocessing.PowerTransformer": [[841, "sklearn-preprocessing-powertransformer"]], "Examples using sklearn.preprocessing.PowerTransformer": [[841, "examples-using-sklearn-preprocessing-powertransformer"]], "sklearn.preprocessing.QuantileTransformer": [[842, "sklearn-preprocessing-quantiletransformer"]], "Examples using sklearn.preprocessing.QuantileTransformer": [[842, "examples-using-sklearn-preprocessing-quantiletransformer"]], "sklearn.preprocessing.RobustScaler": [[843, "sklearn-preprocessing-robustscaler"]], "Examples using sklearn.preprocessing.RobustScaler": [[843, "examples-using-sklearn-preprocessing-robustscaler"]], "sklearn.preprocessing.SplineTransformer": [[844, "sklearn-preprocessing-splinetransformer"]], "Examples using sklearn.preprocessing.SplineTransformer": [[844, "examples-using-sklearn-preprocessing-splinetransformer"]], "sklearn.preprocessing.StandardScaler": [[845, "sklearn-preprocessing-standardscaler"]], "Examples using sklearn.preprocessing.StandardScaler": [[845, "examples-using-sklearn-preprocessing-standardscaler"]], "sklearn.preprocessing.TargetEncoder": [[846, "sklearn-preprocessing-targetencoder"]], "Examples using sklearn.preprocessing.TargetEncoder": [[846, "examples-using-sklearn-preprocessing-targetencoder"]], "sklearn.preprocessing.add_dummy_feature": [[847, "sklearn-preprocessing-add-dummy-feature"]], "sklearn.preprocessing.binarize": [[848, "sklearn-preprocessing-binarize"]], "sklearn.preprocessing.label_binarize": [[849, "sklearn-preprocessing-label-binarize"]], "Examples using sklearn.preprocessing.label_binarize": [[849, "examples-using-sklearn-preprocessing-label-binarize"]], "sklearn.preprocessing.maxabs_scale": [[850, "sklearn-preprocessing-maxabs-scale"]], "sklearn.preprocessing.minmax_scale": [[851, "sklearn-preprocessing-minmax-scale"]], "Examples using sklearn.preprocessing.minmax_scale": [[851, "examples-using-sklearn-preprocessing-minmax-scale"]], "sklearn.preprocessing.normalize": [[852, "sklearn-preprocessing-normalize"]], "sklearn.preprocessing.power_transform": [[853, "sklearn-preprocessing-power-transform"]], "sklearn.preprocessing.quantile_transform": [[854, "sklearn-preprocessing-quantile-transform"]], "Examples using sklearn.preprocessing.quantile_transform": [[854, "examples-using-sklearn-preprocessing-quantile-transform"]], "sklearn.preprocessing.robust_scale": [[855, "sklearn-preprocessing-robust-scale"]], "sklearn.preprocessing.scale": [[856, "sklearn-preprocessing-scale"]], "sklearn.random_projection.GaussianRandomProjection": [[857, "sklearn-random-projection-gaussianrandomprojection"]], "sklearn.random_projection.SparseRandomProjection": [[858, "sklearn-random-projection-sparserandomprojection"]], "Examples using sklearn.random_projection.SparseRandomProjection": [[858, "examples-using-sklearn-random-projection-sparserandomprojection"]], "sklearn.random_projection.johnson_lindenstrauss_min_dim": [[859, "sklearn-random-projection-johnson-lindenstrauss-min-dim"]], "Examples using sklearn.random_projection.johnson_lindenstrauss_min_dim": [[859, "examples-using-sklearn-random-projection-johnson-lindenstrauss-min-dim"]], "sklearn.semi_supervised.LabelPropagation": [[860, "sklearn-semi-supervised-labelpropagation"]], "sklearn.semi_supervised.LabelSpreading": [[861, "sklearn-semi-supervised-labelspreading"]], "Examples using sklearn.semi_supervised.LabelSpreading": [[861, "examples-using-sklearn-semi-supervised-labelspreading"]], "sklearn.semi_supervised.SelfTrainingClassifier": [[862, "sklearn-semi-supervised-selftrainingclassifier"]], "Examples using sklearn.semi_supervised.SelfTrainingClassifier": [[862, "examples-using-sklearn-semi-supervised-selftrainingclassifier"]], "sklearn.set_config": [[863, "sklearn-set-config"]], "Examples using sklearn.set_config": [[863, "examples-using-sklearn-set-config"]], "sklearn.show_versions": [[864, "sklearn-show-versions"]], "sklearn.svm.LinearSVC": [[865, "sklearn-svm-linearsvc"]], "Examples using sklearn.svm.LinearSVC": [[865, "examples-using-sklearn-svm-linearsvc"]], "sklearn.svm.LinearSVR": [[866, "sklearn-svm-linearsvr"]], "sklearn.svm.NuSVC": [[867, "sklearn-svm-nusvc"]], "Examples using sklearn.svm.NuSVC": [[867, "examples-using-sklearn-svm-nusvc"]], "sklearn.svm.NuSVR": [[868, "sklearn-svm-nusvr"]], "Examples using sklearn.svm.NuSVR": [[868, "examples-using-sklearn-svm-nusvr"]], "sklearn.svm.OneClassSVM": [[869, "sklearn-svm-oneclasssvm"]], "Examples using sklearn.svm.OneClassSVM": [[869, "examples-using-sklearn-svm-oneclasssvm"]], "sklearn.svm.SVC": [[870, "sklearn-svm-svc"]], "Examples using sklearn.svm.SVC": [[870, "examples-using-sklearn-svm-svc"]], "sklearn.svm.SVR": [[871, "sklearn-svm-svr"]], "Examples using sklearn.svm.SVR": [[871, "examples-using-sklearn-svm-svr"]], "sklearn.svm.l1_min_c": [[872, "sklearn-svm-l1-min-c"]], "Examples using sklearn.svm.l1_min_c": [[872, "examples-using-sklearn-svm-l1-min-c"]], "sklearn.tree.DecisionTreeClassifier": [[873, "sklearn-tree-decisiontreeclassifier"]], "Examples using sklearn.tree.DecisionTreeClassifier": [[873, "examples-using-sklearn-tree-decisiontreeclassifier"]], "sklearn.tree.DecisionTreeRegressor": [[874, "sklearn-tree-decisiontreeregressor"]], "Examples using sklearn.tree.DecisionTreeRegressor": [[874, "examples-using-sklearn-tree-decisiontreeregressor"]], "sklearn.tree.ExtraTreeClassifier": [[875, "sklearn-tree-extratreeclassifier"]], "sklearn.tree.ExtraTreeRegressor": [[876, "sklearn-tree-extratreeregressor"]], "sklearn.tree.export_graphviz": [[877, "sklearn-tree-export-graphviz"]], "sklearn.tree.export_text": [[878, "sklearn-tree-export-text"]], "sklearn.tree.plot_tree": [[879, "sklearn-tree-plot-tree"]], "Examples using sklearn.tree.plot_tree": [[879, "examples-using-sklearn-tree-plot-tree"]], "sklearn.utils.Bunch": [[880, "sklearn-utils-bunch"]], "Examples using sklearn.utils.Bunch": [[880, "examples-using-sklearn-utils-bunch"]], "sklearn.utils._safe_indexing": [[881, "sklearn-utils-safe-indexing"]], "sklearn.utils.arrayfuncs.min_pos": [[882, "sklearn-utils-arrayfuncs-min-pos"]], "sklearn.utils.as_float_array": [[883, "sklearn-utils-as-float-array"]], "sklearn.utils.assert_all_finite": [[884, "sklearn-utils-assert-all-finite"]], "sklearn.utils.check_X_y": [[885, "sklearn-utils-check-x-y"]], "sklearn.utils.check_array": [[886, "sklearn-utils-check-array"]], "sklearn.utils.check_consistent_length": [[887, "sklearn-utils-check-consistent-length"]], "sklearn.utils.check_random_state": [[888, "sklearn-utils-check-random-state"]], "Examples using sklearn.utils.check_random_state": [[888, "examples-using-sklearn-utils-check-random-state"]], "sklearn.utils.check_scalar": [[889, "sklearn-utils-check-scalar"]], "sklearn.utils.class_weight.compute_class_weight": [[890, "sklearn-utils-class-weight-compute-class-weight"]], "sklearn.utils.class_weight.compute_sample_weight": [[891, "sklearn-utils-class-weight-compute-sample-weight"]], "sklearn.utils.deprecated": [[892, "sklearn-utils-deprecated"]], "sklearn.utils.discovery.all_displays": [[893, "sklearn-utils-discovery-all-displays"]], "sklearn.utils.discovery.all_estimators": [[894, "sklearn-utils-discovery-all-estimators"]], "sklearn.utils.discovery.all_functions": [[895, "sklearn-utils-discovery-all-functions"]], "sklearn.utils.estimator_checks.check_estimator": [[896, "sklearn-utils-estimator-checks-check-estimator"]], "sklearn.utils.estimator_checks.parametrize_with_checks": [[897, "sklearn-utils-estimator-checks-parametrize-with-checks"]], "Examples using sklearn.utils.estimator_checks.parametrize_with_checks": [[897, "examples-using-sklearn-utils-estimator-checks-parametrize-with-checks"]], "sklearn.utils.estimator_html_repr": [[898, "sklearn-utils-estimator-html-repr"]], "sklearn.utils.extmath.density": [[899, "sklearn-utils-extmath-density"]], "Examples using sklearn.utils.extmath.density": [[899, "examples-using-sklearn-utils-extmath-density"]], "sklearn.utils.extmath.fast_logdet": [[900, "sklearn-utils-extmath-fast-logdet"]], "sklearn.utils.extmath.randomized_range_finder": [[901, "sklearn-utils-extmath-randomized-range-finder"]], "sklearn.utils.extmath.randomized_svd": [[902, "sklearn-utils-extmath-randomized-svd"]], "sklearn.utils.extmath.safe_sparse_dot": [[903, "sklearn-utils-extmath-safe-sparse-dot"]], "sklearn.utils.extmath.weighted_mode": [[904, "sklearn-utils-extmath-weighted-mode"]], "sklearn.utils.gen_batches": [[905, "sklearn-utils-gen-batches"]], "sklearn.utils.gen_even_slices": [[906, "sklearn-utils-gen-even-slices"]], "Examples using sklearn.utils.gen_even_slices": [[906, "examples-using-sklearn-utils-gen-even-slices"]], "sklearn.utils.graph.single_source_shortest_path_length": [[907, "sklearn-utils-graph-single-source-shortest-path-length"]], "sklearn.utils.indexable": [[908, "sklearn-utils-indexable"]], "sklearn.utils.metadata_routing.MetadataRequest": [[909, "sklearn-utils-metadata-routing-metadatarequest"]], "sklearn.utils.metadata_routing.MetadataRouter": [[910, "sklearn-utils-metadata-routing-metadatarouter"]], "Examples using sklearn.utils.metadata_routing.MetadataRouter": [[910, "examples-using-sklearn-utils-metadata-routing-metadatarouter"]], "sklearn.utils.metadata_routing.MethodMapping": [[911, "sklearn-utils-metadata-routing-methodmapping"]], "Examples using sklearn.utils.metadata_routing.MethodMapping": [[911, "examples-using-sklearn-utils-metadata-routing-methodmapping"]], "sklearn.utils.metadata_routing.get_routing_for_object": [[912, "sklearn-utils-metadata-routing-get-routing-for-object"]], "Examples using sklearn.utils.metadata_routing.get_routing_for_object": [[912, "examples-using-sklearn-utils-metadata-routing-get-routing-for-object"]], "sklearn.utils.metadata_routing.process_routing": [[913, "sklearn-utils-metadata-routing-process-routing"]], "Examples using sklearn.utils.metadata_routing.process_routing": [[913, "examples-using-sklearn-utils-metadata-routing-process-routing"]], "sklearn.utils.metaestimators.available_if": [[914, "sklearn-utils-metaestimators-available-if"]], "Examples using sklearn.utils.metaestimators.available_if": [[914, "examples-using-sklearn-utils-metaestimators-available-if"]], "sklearn.utils.multiclass.is_multilabel": [[915, "sklearn-utils-multiclass-is-multilabel"]], "sklearn.utils.multiclass.type_of_target": [[916, "sklearn-utils-multiclass-type-of-target"]], "sklearn.utils.multiclass.unique_labels": [[917, "sklearn-utils-multiclass-unique-labels"]], "sklearn.utils.murmurhash3_32": [[918, "sklearn-utils-murmurhash3-32"]], "sklearn.utils.parallel.Parallel": [[919, "sklearn-utils-parallel-parallel"]], "sklearn.utils.parallel.delayed": [[920, "sklearn-utils-parallel-delayed"]], "sklearn.utils.parallel_backend": [[921, "sklearn-utils-parallel-backend"]], "sklearn.utils.random.sample_without_replacement": [[922, "sklearn-utils-random-sample-without-replacement"]], "sklearn.utils.register_parallel_backend": [[923, "sklearn-utils-register-parallel-backend"]], "sklearn.utils.resample": [[924, "sklearn-utils-resample"]], "sklearn.utils.safe_mask": [[925, "sklearn-utils-safe-mask"]], "sklearn.utils.safe_sqr": [[926, "sklearn-utils-safe-sqr"]], "sklearn.utils.shuffle": [[927, "sklearn-utils-shuffle"]], "Examples using sklearn.utils.shuffle": [[927, "examples-using-sklearn-utils-shuffle"]], "sklearn.utils.sparsefuncs.incr_mean_variance_axis": [[928, "sklearn-utils-sparsefuncs-incr-mean-variance-axis"]], "sklearn.utils.sparsefuncs.inplace_column_scale": [[929, "sklearn-utils-sparsefuncs-inplace-column-scale"]], "sklearn.utils.sparsefuncs.inplace_csr_column_scale": [[930, "sklearn-utils-sparsefuncs-inplace-csr-column-scale"]], "sklearn.utils.sparsefuncs.inplace_row_scale": [[931, "sklearn-utils-sparsefuncs-inplace-row-scale"]], "sklearn.utils.sparsefuncs.inplace_swap_column": [[932, "sklearn-utils-sparsefuncs-inplace-swap-column"]], "sklearn.utils.sparsefuncs.inplace_swap_row": [[933, "sklearn-utils-sparsefuncs-inplace-swap-row"]], "sklearn.utils.sparsefuncs.mean_variance_axis": [[934, "sklearn-utils-sparsefuncs-mean-variance-axis"]], "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1": [[935, "sklearn-utils-sparsefuncs-fast-inplace-csr-row-normalize-l1"]], "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2": [[936, "sklearn-utils-sparsefuncs-fast-inplace-csr-row-normalize-l2"]], "sklearn.utils.validation.check_is_fitted": [[937, "sklearn-utils-validation-check-is-fitted"]], "Examples using sklearn.utils.validation.check_is_fitted": [[937, "examples-using-sklearn-utils-validation-check-is-fitted"]], "sklearn.utils.validation.check_memory": [[938, "sklearn-utils-validation-check-memory"]], "sklearn.utils.validation.check_symmetric": [[939, "sklearn-utils-validation-check-symmetric"]], "sklearn.utils.validation.column_or_1d": [[940, "sklearn-utils-validation-column-or-1d"]], "sklearn.utils.validation.has_fit_parameter": [[941, "sklearn-utils-validation-has-fit-parameter"]], "Tuning the hyper-parameters of an estimator": [[942, "tuning-the-hyper-parameters-of-an-estimator"]], "Exhaustive Grid Search": [[942, "exhaustive-grid-search"]], "Randomized Parameter Optimization": [[942, "randomized-parameter-optimization"]], "Searching for optimal parameters with successive halving": [[942, "searching-for-optimal-parameters-with-successive-halving"]], "Choosing min_resources and the number of candidates": [[942, "choosing-min-resources-and-the-number-of-candidates"]], "Amount of resource and number of candidates at each iteration": [[942, "amount-of-resource-and-number-of-candidates-at-each-iteration"]], "Choosing a resource": [[942, "choosing-a-resource"]], "Exhausting the available resources": [[942, "exhausting-the-available-resources"]], "Aggressive elimination of candidates": [[942, "aggressive-elimination-of-candidates"]], "Analyzing results with the cv_results_ attribute": [[942, "analyzing-results-with-the-cv-results-attribute"]], "Tips for parameter search": [[942, "tips-for-parameter-search"]], "Specifying an objective metric": [[942, "specifying-an-objective-metric"]], "Specifying multiple metrics for evaluation": [[942, "specifying-multiple-metrics-for-evaluation"]], "Composite estimators and parameter spaces": [[942, "composite-estimators-and-parameter-spaces"]], "Model selection: development and evaluation": [[942, "model-selection-development-and-evaluation"]], "Robustness to failure": [[942, "robustness-to-failure"]], "Alternatives to brute force parameter search": [[942, "alternatives-to-brute-force-parameter-search"]], "Model specific cross-validation": [[942, "model-specific-cross-validation"]], "Information Criterion": [[942, "information-criterion"]], "Out of Bag Estimates": [[942, "out-of-bag-estimates"]], "Imputation of missing values": [[943, "imputation-of-missing-values"], [963, "imputation-of-missing-values"]], "Univariate vs. Multivariate Imputation": [[943, "univariate-vs-multivariate-imputation"]], "Univariate feature imputation": [[943, "univariate-feature-imputation"]], "Multivariate feature imputation": [[943, "multivariate-feature-imputation"]], "Flexibility of IterativeImputer": [[943, "flexibility-of-iterativeimputer"]], "Multiple vs. Single Imputation": [[943, "multiple-vs-single-imputation"]], "Nearest neighbors imputation": [[943, "nearest-neighbors-imputation"]], "Keeping the number of features constant": [[943, "keeping-the-number-of-features-constant"]], "Marking imputed values": [[943, "marking-imputed-values"]], "Estimators that handle NaN values": [[943, "estimators-that-handle-nan-values"]], "Isotonic regression": [[944, "isotonic-regression"]], "Nystroem Method for Kernel Approximation": [[945, "nystroem-method-for-kernel-approximation"]], "Radial Basis Function Kernel": [[945, "radial-basis-function-kernel"]], "Additive Chi Squared Kernel": [[945, "additive-chi-squared-kernel"]], "Skewed Chi Squared Kernel": [[945, "skewed-chi-squared-kernel"]], "Polynomial Kernel Approximation via Tensor Sketch": [[945, "polynomial-kernel-approximation-via-tensor-sketch"]], "Mathematical Details": [[945, "mathematical-details"]], "Kernel ridge regression": [[946, "kernel-ridge-regression"]], "Linear and Quadratic Discriminant Analysis": [[947, "linear-and-quadratic-discriminant-analysis"]], "Dimensionality reduction using Linear Discriminant Analysis": [[947, "dimensionality-reduction-using-linear-discriminant-analysis"]], "Mathematical formulation of the LDA and QDA classifiers": [[947, "mathematical-formulation-of-the-lda-and-qda-classifiers"]], "QDA": [[947, "qda"]], "LDA": [[947, "lda"]], "Mathematical formulation of LDA dimensionality reduction": [[947, "mathematical-formulation-of-lda-dimensionality-reduction"]], "Shrinkage and Covariance Estimator": [[947, "shrinkage-and-covariance-estimator"]], "Estimation algorithms": [[947, "estimation-algorithms"]], "Validation curves: plotting scores to evaluate models": [[948, "validation-curves-plotting-scores-to-evaluate-models"]], "Validation curve": [[948, "validation-curve"]], "Learning curve": [[948, "learning-curve"]], "Linear Models": [[949, "linear-models"]], "Ordinary Least Squares": [[949, "ordinary-least-squares"]], "Non-Negative Least Squares": [[949, "non-negative-least-squares"]], "Ordinary Least Squares Complexity": [[949, "ordinary-least-squares-complexity"]], "Ridge regression and classification": [[949, "ridge-regression-and-classification"]], "Ridge Complexity": [[949, "ridge-complexity"]], "Setting the regularization parameter: leave-one-out Cross-Validation": [[949, "setting-the-regularization-parameter-leave-one-out-cross-validation"]], "Setting regularization parameter": [[949, "setting-regularization-parameter"]], "Using cross-validation": [[949, "using-cross-validation"]], "Information-criteria based model selection": [[949, "information-criteria-based-model-selection"]], "AIC and BIC criteria": [[949, "aic-and-bic-criteria"]], "Comparison with the regularization parameter of SVM": [[949, "comparison-with-the-regularization-parameter-of-svm"]], "Multi-task Lasso": [[949, "multi-task-lasso"]], "Elastic-Net": [[949, "elastic-net"]], "Multi-task Elastic-Net": [[949, "multi-task-elastic-net"]], "Least Angle Regression": [[949, "least-angle-regression"]], "LARS Lasso": [[949, "lars-lasso"]], "Orthogonal Matching Pursuit (OMP)": [[949, "orthogonal-matching-pursuit-omp"]], "Bayesian Regression": [[949, "bayesian-regression"]], "Bayesian Ridge Regression": [[949, "bayesian-ridge-regression"]], "Automatic Relevance Determination - ARD": [[949, "automatic-relevance-determination-ard"]], "Logistic regression": [[949, "logistic-regression"]], "Binary Case": [[949, "binary-case"]], "Multinomial Case": [[949, "multinomial-case"]], "Solvers": [[949, "solvers"]], "Differences between solvers": [[949, "differences-between-solvers"]], "Stochastic Gradient Descent - SGD": [[949, "stochastic-gradient-descent-sgd"]], "Perceptron": [[949, "perceptron"]], "Passive Aggressive Algorithms": [[949, "passive-aggressive-algorithms"]], "Robustness regression: outliers and modeling errors": [[949, "robustness-regression-outliers-and-modeling-errors"]], "Different scenario and useful concepts": [[949, "different-scenario-and-useful-concepts"]], "Trade-offs: which estimator ?": [[949, null]], "RANSAC: RANdom SAmple Consensus": [[949, "ransac-random-sample-consensus"]], "Theil-Sen estimator: generalized-median-based estimator": [[949, "theil-sen-estimator-generalized-median-based-estimator"]], "Huber Regression": [[949, "huber-regression"]], "Quantile Regression": [[949, "quantile-regression"]], "Polynomial regression: extending linear models with basis functions": [[949, "polynomial-regression-extending-linear-models-with-basis-functions"]], "Introduction": [[950, "introduction"]], "Isomap": [[950, "isomap"]], "Locally Linear Embedding": [[950, "locally-linear-embedding"]], "Modified Locally Linear Embedding": [[950, "modified-locally-linear-embedding"]], "Hessian Eigenmapping": [[950, "hessian-eigenmapping"]], "Spectral Embedding": [[950, "spectral-embedding"]], "Local Tangent Space Alignment": [[950, "local-tangent-space-alignment"]], "Multi-dimensional Scaling (MDS)": [[950, "multi-dimensional-scaling-mds"]], "t-distributed Stochastic Neighbor Embedding (t-SNE)": [[950, "t-distributed-stochastic-neighbor-embedding-t-sne"]], "Tips on practical use": [[950, "tips-on-practical-use"], [969, "tips-on-practical-use"]], "Pairwise metrics, Affinities and Kernels": [[951, "pairwise-metrics-affinities-and-kernels"]], "Cosine similarity": [[951, "cosine-similarity"]], "Laplacian kernel": [[951, "laplacian-kernel"]], "Chi-squared kernel": [[951, "chi-squared-kernel"]], "Gaussian mixture models": [[952, "gaussian-mixture-models"]], "Gaussian Mixture": [[952, "gaussian-mixture"]], "Pros:": [[952, null], [952, null]], "Cons:": [[952, null], [952, null]], "Variational Bayesian Gaussian Mixture": [[952, "variational-bayesian-gaussian-mixture"]], "The Dirichlet Process": [[952, "the-dirichlet-process"]], "Metrics and scoring: quantifying the quality of predictions": [[953, "metrics-and-scoring-quantifying-the-quality-of-predictions"]], "The scoring parameter: defining model evaluation rules": [[953, "the-scoring-parameter-defining-model-evaluation-rules"]], "Common cases: predefined values": [[953, "common-cases-predefined-values"]], "Defining your scoring strategy from metric functions": [[953, "defining-your-scoring-strategy-from-metric-functions"]], "Implementing your own scoring object": [[953, "implementing-your-own-scoring-object"]], "Using multiple metric evaluation": [[953, "using-multiple-metric-evaluation"]], "From binary to multiclass and multilabel": [[953, "from-binary-to-multiclass-and-multilabel"]], "Accuracy score": [[953, "accuracy-score"]], "Example:": [[953, null], [953, null], [953, null], [953, null], [953, null], [953, null], [953, null], [953, null], [965, null], [985, null]], "Top-k accuracy score": [[953, "top-k-accuracy-score"]], "Balanced accuracy score": [[953, "balanced-accuracy-score"]], "Cohen\u2019s kappa": [[953, "cohen-s-kappa"]], "Classification report": [[953, "classification-report"]], "Hamming loss": [[953, "hamming-loss"]], "Precision, recall and F-measures": [[953, "precision-recall-and-f-measures"]], "Binary classification": [[953, "binary-classification"]], "Multiclass and multilabel classification": [[953, "multiclass-and-multilabel-classification"]], "Jaccard similarity coefficient score": [[953, "jaccard-similarity-coefficient-score"]], "Hinge loss": [[953, "hinge-loss"]], "Log loss": [[953, "log-loss"]], "Matthews correlation coefficient": [[953, "matthews-correlation-coefficient"]], "Multi-label confusion matrix": [[953, "multi-label-confusion-matrix"]], "Receiver operating characteristic (ROC)": [[953, "receiver-operating-characteristic-roc"]], "Binary case": [[953, "binary-case"]], "Multi-class case": [[953, "multi-class-case"]], "Multi-label case": [[953, "multi-label-case"]], "Detection error tradeoff (DET)": [[953, "detection-error-tradeoff-det"]], "Zero one loss": [[953, "zero-one-loss"]], "Brier score loss": [[953, "brier-score-loss"]], "Class likelihood ratios": [[953, "class-likelihood-ratios"]], "Coverage error": [[953, "coverage-error"]], "Label ranking average precision": [[953, "label-ranking-average-precision"]], "Ranking loss": [[953, "ranking-loss"]], "Normalized Discounted Cumulative Gain": [[953, "normalized-discounted-cumulative-gain"]], "R\u00b2 score, the coefficient of determination": [[953, "r2-score-the-coefficient-of-determination"]], "Mean absolute error": [[953, "mean-absolute-error"]], "Mean squared error": [[953, "mean-squared-error"]], "Mean squared logarithmic error": [[953, "mean-squared-logarithmic-error"]], "Mean absolute percentage error": [[953, "mean-absolute-percentage-error"]], "Median absolute error": [[953, "median-absolute-error"]], "Max error": [[953, "max-error"]], "Explained variance score": [[953, "explained-variance-score"]], "Link to R\u00b2 score, the coefficient of determination": [[953, null]], "Mean Poisson, Gamma, and Tweedie deviances": [[953, "mean-poisson-gamma-and-tweedie-deviances"]], "Pinball loss": [[953, "pinball-loss"]], "D\u00b2 score": [[953, "d2-score"]], "D\u00b2 Tweedie score": [[953, "d2-tweedie-score"]], "D\u00b2 pinball score": [[953, "d2-pinball-score"]], "D\u00b2 absolute error score": [[953, "d2-absolute-error-score"]], "Visual evaluation of regression models": [[953, "visual-evaluation-of-regression-models"]], "Dummy estimators": [[953, "dummy-estimators"]], "Multiclass and multioutput algorithms": [[954, "multiclass-and-multioutput-algorithms"]], "Multiclass classification": [[954, "multiclass-classification"], [985, null]], "Target format": [[954, "target-format"], [954, "id5"], [954, "id8"], [954, "id10"]], "OneVsRestClassifier": [[954, "onevsrestclassifier"]], "OneVsOneClassifier": [[954, "onevsoneclassifier"]], "OutputCodeClassifier": [[954, "outputcodeclassifier"]], "MultiOutputClassifier": [[954, "multioutputclassifier"]], "ClassifierChain": [[954, "classifierchain"]], "Multiclass-multioutput classification": [[954, "multiclass-multioutput-classification"]], "Multioutput regression": [[954, "multioutput-regression"]], "MultiOutputRegressor": [[954, "multioutputregressor"]], "RegressorChain": [[954, "regressorchain"]], "Naive Bayes": [[955, "naive-bayes"]], "Multinomial Naive Bayes": [[955, "multinomial-naive-bayes"]], "Complement Naive Bayes": [[955, "complement-naive-bayes"]], "Bernoulli Naive Bayes": [[955, "bernoulli-naive-bayes"]], "Categorical Naive Bayes": [[955, "categorical-naive-bayes"]], "Out-of-core naive Bayes model fitting": [[955, "out-of-core-naive-bayes-model-fitting"]], "Unsupervised Nearest Neighbors": [[956, "unsupervised-nearest-neighbors"]], "Finding the Nearest Neighbors": [[956, "finding-the-nearest-neighbors"]], "KDTree and BallTree Classes": [[956, "kdtree-and-balltree-classes"]], "Nearest Neighbors Regression": [[956, "nearest-neighbors-regression"]], "Nearest Neighbor Algorithms": [[956, "nearest-neighbor-algorithms"]], "Brute Force": [[956, "brute-force"]], "K-D Tree": [[956, "k-d-tree"]], "Ball Tree": [[956, "ball-tree"]], "Choice of Nearest Neighbors Algorithm": [[956, "choice-of-nearest-neighbors-algorithm"]], "Effect of leaf_size": [[956, "effect-of-leaf-size"]], "Valid Metrics for Nearest Neighbor Algorithms": [[956, "valid-metrics-for-nearest-neighbor-algorithms"]], "Nearest Centroid Classifier": [[956, "nearest-centroid-classifier"]], "Nearest Shrunken Centroid": [[956, "nearest-shrunken-centroid"]], "Nearest Neighbors Transformer": [[956, "nearest-neighbors-transformer"]], "Neighborhood Components Analysis": [[956, "neighborhood-components-analysis"]], "Dimensionality reduction": [[956, "dimensionality-reduction"]], "Mahalanobis distance": [[956, "mahalanobis-distance"]], "Complexity": [[956, "complexity"], [957, "complexity"], [967, "complexity"], [968, "complexity"], [969, "complexity"]], "Transform": [[956, "transform"]], "Neural network models (supervised)": [[957, "neural-network-models-supervised"]], "Multi-layer Perceptron": [[957, "multi-layer-perceptron"]], "Regularization": [[957, "regularization"]], "Algorithms": [[957, "algorithms"]], "Tips on Practical Use": [[957, "tips-on-practical-use"], [967, "tips-on-practical-use"], [968, "tips-on-practical-use"]], "More control with warm_start": [[957, "more-control-with-warm-start"]], "Neural network models (unsupervised)": [[958, "neural-network-models-unsupervised"]], "Restricted Boltzmann machines": [[958, "restricted-boltzmann-machines"]], "Graphical model and parametrization": [[958, "graphical-model-and-parametrization"]], "Bernoulli Restricted Boltzmann machines": [[958, "bernoulli-restricted-boltzmann-machines"]], "Stochastic Maximum Likelihood learning": [[958, "stochastic-maximum-likelihood-learning"]], "Novelty and Outlier Detection": [[959, "novelty-and-outlier-detection"]], "Overview of outlier detection methods": [[959, "overview-of-outlier-detection-methods"]], "Novelty Detection": [[959, "novelty-detection"]], "Scaling up the One-Class SVM": [[959, "scaling-up-the-one-class-svm"]], "Outlier Detection": [[959, "id1"]], "Fitting an elliptic envelope": [[959, "fitting-an-elliptic-envelope"]], "Isolation Forest": [[959, "isolation-forest"]], "Local Outlier Factor": [[959, "local-outlier-factor"]], "Novelty detection with Local Outlier Factor": [[959, "novelty-detection-with-local-outlier-factor"]], "Partial Dependence and Individual Conditional Expectation plots": [[960, "partial-dependence-and-individual-conditional-expectation-plots"]], "Partial dependence plots": [[960, "partial-dependence-plots"]], "Individual conditional expectation (ICE) plot": [[960, "individual-conditional-expectation-ice-plot"]], "Mathematical Definition": [[960, "mathematical-definition"]], "Computation methods": [[960, "computation-methods"]], "Permutation feature importance": [[961, "permutation-feature-importance"]], "Outline of the permutation importance algorithm": [[961, "outline-of-the-permutation-importance-algorithm"]], "Relation to impurity-based importance in trees": [[961, "relation-to-impurity-based-importance-in-trees"]], "Misleading values on strongly correlated features": [[961, "misleading-values-on-strongly-correlated-features"]], "Preprocessing data": [[963, "preprocessing-data"]], "Standardization, or mean removal and variance scaling": [[963, "standardization-or-mean-removal-and-variance-scaling"]], "Scaling features to a range": [[963, "scaling-features-to-a-range"]], "Scaling sparse data": [[963, "scaling-sparse-data"]], "Scaling data with outliers": [[963, "scaling-data-with-outliers"]], "Scaling vs Whitening": [[963, null]], "Centering kernel matrices": [[963, "centering-kernel-matrices"]], "Non-linear transformation": [[963, "non-linear-transformation"]], "Mapping to a Uniform distribution": [[963, "mapping-to-a-uniform-distribution"]], "Mapping to a Gaussian distribution": [[963, "mapping-to-a-gaussian-distribution"]], "Normalization": [[963, "normalization"]], "Sparse input": [[963, null], [963, null]], "Encoding categorical features": [[963, "encoding-categorical-features"]], "Infrequent categories": [[963, "infrequent-categories"]], "Target Encoder": [[963, "target-encoder"]], "Discretization": [[963, "discretization"]], "K-bins discretization": [[963, "k-bins-discretization"]], "Feature binarization": [[963, "feature-binarization"]], "Generating polynomial features": [[963, "generating-polynomial-features"]], "Polynomial features": [[963, "polynomial-features"]], "Spline transformer": [[963, "spline-transformer"]], "Custom transformers": [[963, "custom-transformers"]], "Transforming the prediction target (y)": [[964, "transforming-the-prediction-target-y"]], "Label binarization": [[964, "label-binarization"]], "LabelBinarizer": [[964, "labelbinarizer"]], "MultiLabelBinarizer": [[964, "multilabelbinarizer"]], "Label encoding": [[964, "label-encoding"]], "Random Projection": [[965, "random-projection"]], "The Johnson-Lindenstrauss lemma": [[965, "the-johnson-lindenstrauss-lemma"]], "Gaussian random projection": [[965, "gaussian-random-projection"]], "Sparse random projection": [[965, "sparse-random-projection"]], "Inverse Transform": [[965, "inverse-transform"]], "Unlabeled entries in y": [[966, null]], "Self Training": [[966, "self-training"]], "Label Propagation": [[966, "label-propagation"]], "Stochastic Gradient Descent": [[967, "stochastic-gradient-descent"]], "Stochastic Gradient Descent for sparse data": [[967, "stochastic-gradient-descent-for-sparse-data"]], "Stopping criterion": [[967, "stopping-criterion"]], "SGD": [[967, "id5"]], "Implementation details": [[967, "implementation-details"], [968, "implementation-details"]], "Multi-class classification": [[968, "multi-class-classification"]], "Scores and probabilities": [[968, "scores-and-probabilities"]], "Unbalanced problems": [[968, "unbalanced-problems"]], "Density estimation, novelty detection": [[968, "density-estimation-novelty-detection"]], "Kernel functions": [[968, "kernel-functions"]], "Parameters of the RBF Kernel": [[968, "parameters-of-the-rbf-kernel"]], "Custom Kernels": [[968, "custom-kernels"]], "SVC": [[968, "svc"]], "SVR": [[968, "svr"]], "Multi-output problems": [[969, "multi-output-problems"]], "Tree algorithms: ID3, C4.5, C5.0 and CART": [[969, "tree-algorithms-id3-c4-5-c5-0-and-cart"]], "Classification criteria": [[969, "classification-criteria"]], "Regression criteria": [[969, "regression-criteria"]], "Missing Values Support": [[969, "missing-values-support"]], "Minimal Cost-Complexity Pruning": [[969, "minimal-cost-complexity-pruning"]], "Unsupervised dimensionality reduction": [[970, "unsupervised-dimensionality-reduction"]], "Pipelining": [[970, null], [983, "pipelining"]], "PCA: principal component analysis": [[970, "pca-principal-component-analysis"]], "Random projections": [[970, "random-projections"]], "Feature scaling": [[970, null]], "External Resources, Videos and Talks": [[971, "external-resources-videos-and-talks"]], "New to Scientific Python?": [[971, "new-to-scientific-python"]], "External Tutorials": [[971, "external-tutorials"]], "Videos": [[971, "videos"]], "Related Projects": [[972, "related-projects"]], "Interoperability and framework enhancements": [[972, "interoperability-and-framework-enhancements"]], "Other estimators and tasks": [[972, "other-estimators-and-tasks"]], "Statistical learning with Python": [[972, "statistical-learning-with-python"]], "Recommendation Engine packages": [[972, "recommendation-engine-packages"]], "Domain specific packages": [[972, "domain-specific-packages"]], "Translations of scikit-learn documentation": [[972, "translations-of-scikit-learn-documentation"]], "Roadmap": [[973, "roadmap"]], "Purpose of this document": [[973, "purpose-of-this-document"]], "Statement of purpose: Scikit-learn in 2018": [[973, "statement-of-purpose-scikit-learn-in-2018"]], "Architectural / general goals": [[973, "architectural-general-goals"]], "Subpackage-specific goals": [[973, "subpackage-specific-goals"]], "Computation times": [[974, "computation-times"]], "Supervised learning": [[975, "supervised-learning"]], "Support": [[976, "support"]], "Mailing Lists": [[976, "mailing-lists"]], "User Questions": [[976, "user-questions"]], "Bug Tracker": [[976, "bug-tracker"]], "Gitter": [[976, "gitter"]], "Documentation Resources": [[976, "documentation-resources"]], "Who is using scikit-learn?": [[977, "who-is-using-scikit-learn"]], "J.P.Morgan": [[977, "id1"]], "Spotify": [[977, "id2"]], "Inria": [[977, "id3"]], "betaworks": [[977, "id4"]], "Hugging Face": [[977, "id5"]], "Evernote": [[977, "id6"]], "T\u00e9l\u00e9com ParisTech": [[977, "id7"]], "Booking.com": [[977, "id8"]], "AWeber": [[977, "id9"]], "Yhat": [[977, "id10"]], "Rangespan": [[977, "id11"]], "Birchbox": [[977, "id12"]], "Bestofmedia Group": [[977, "id13"]], "Change.org": [[977, "id14"]], "PHIMECA Engineering": [[977, "id15"]], "HowAboutWe": [[977, "id16"]], "PeerIndex": [[977, "id17"]], "DataRobot": [[977, "id18"]], "OkCupid": [[977, "id19"]], "Lovely": [[977, "id20"]], "Data Publica": [[977, "id21"]], "Machinalis": [[977, "id22"]], "solido": [[977, "id23"]], "INFONEA": [[977, "id24"]], "Dataiku": [[977, "id25"]], "Otto Group": [[977, "id26"]], "Zopa": [[977, "id27"]], "MARS": [[977, "id28"]], "BNP Paribas Cardif": [[977, "id29"]], "An introduction to machine learning with scikit-learn": [[978, "an-introduction-to-machine-learning-with-scikit-learn"]], "Section contents": [[978, null]], "Machine learning: the problem setting": [[978, "machine-learning-the-problem-setting"]], "Training set and testing set": [[978, null], [985, null]], "Loading an example dataset": [[978, "loading-an-example-dataset"]], "Shape of the data arrays": [[978, null]], "Learning and predicting": [[978, "learning-and-predicting"]], "Choosing the parameters of the model": [[978, null]], "Conventions": [[978, "conventions"]], "Type casting": [[978, "type-casting"]], "Refitting and updating parameters": [[978, "refitting-and-updating-parameters"]], "Multiclass vs. multilabel fitting": [[978, "multiclass-vs-multilabel-fitting"]], "scikit-learn Tutorials": [[979, "scikit-learn-tutorials"]], "Choosing the right estimator": [[980, "choosing-the-right-estimator"]], "A tutorial on statistical-learning for scientific data processing": [[981, "a-tutorial-on-statistical-learning-for-scientific-data-processing"]], "Statistical learning": [[981, null]], "Model selection: choosing estimators and their parameters": [[982, "model-selection-choosing-estimators-and-their-parameters"]], "Score, and cross-validated scores": [[982, "score-and-cross-validated-scores"]], "Cross-validation generators": [[982, "cross-validation-generators"]], "Exercise": [[982, null], [982, null], [985, null], [985, null]], "Grid-search and cross-validated estimators": [[982, "grid-search-and-cross-validated-estimators"]], "Grid-search": [[982, "grid-search"]], "Nested cross-validation": [[982, null]], "Cross-validated estimators": [[982, "cross-validated-estimators"]], "Putting it all together": [[983, "putting-it-all-together"]], "Face recognition with eigenfaces": [[983, "face-recognition-with-eigenfaces"]], "Open problem: Stock Market Structure": [[983, "open-problem-stock-market-structure"]], "Statistical learning: the setting and the estimator object in scikit-learn": [[984, "statistical-learning-the-setting-and-the-estimator-object-in-scikit-learn"]], "Datasets": [[984, "datasets"]], "A simple example shipped with scikit-learn: iris dataset": [[984, null]], "An example of reshaping data would be the digits dataset": [[984, null]], "Estimators objects": [[984, "estimators-objects"]], "Supervised learning: predicting an output variable from high-dimensional observations": [[985, "supervised-learning-predicting-an-output-variable-from-high-dimensional-observations"]], "The problem solved in supervised learning": [[985, null]], "Vocabulary: classification and regression": [[985, null]], "Nearest neighbor and the curse of dimensionality": [[985, "nearest-neighbor-and-the-curse-of-dimensionality"]], "Classifying irises:": [[985, null]], "k-Nearest neighbors classifier": [[985, "k-nearest-neighbors-classifier"]], "The curse of dimensionality": [[985, "the-curse-of-dimensionality"]], "Linear model: from regression to sparsity": [[985, "linear-model-from-regression-to-sparsity"]], "Linear regression": [[985, "linear-regression"]], "Shrinkage": [[985, "shrinkage"]], "Different algorithms for the same problem": [[985, null]], "Shrinkage and sparsity with logistic regression": [[985, null]], "Support vector machines (SVMs)": [[985, "support-vector-machines-svms"]], "Linear SVMs": [[985, "linear-svms"]], "Using kernels": [[985, "using-kernels"]], "RBF kernel (Radial Basis Function)": [[985, "rbf-kernel-radial-basis-function"]], "Interactive example": [[985, null]], "Unsupervised learning: seeking representations of the data": [[986, "unsupervised-learning-seeking-representations-of-the-data"]], "Clustering: grouping observations together": [[986, "clustering-grouping-observations-together"]], "The problem solved in clustering": [[986, null]], "K-means clustering": [[986, "k-means-clustering"]], "Application example: vector quantization": [[986, null]], "Hierarchical agglomerative clustering: Ward": [[986, "hierarchical-agglomerative-clustering-ward"]], "Connectivity-constrained clustering": [[986, "connectivity-constrained-clustering"]], "transform and inverse_transform methods": [[986, null]], "Decompositions: from a signal to components and loadings": [[986, "decompositions-from-a-signal-to-components-and-loadings"]], "Components and loadings": [[986, null]], "Principal component analysis: PCA": [[986, "principal-component-analysis-pca"]], "Independent Component Analysis: ICA": [[986, "independent-component-analysis-ica"]], "Working With Text Data": [[987, "working-with-text-data"]], "Tutorial setup": [[987, "tutorial-setup"]], "Loading the 20 newsgroups dataset": [[987, "loading-the-20-newsgroups-dataset"]], "Extracting features from text files": [[987, "extracting-features-from-text-files"]], "Bags of words": [[987, "bags-of-words"]], "Tokenizing text with scikit-learn": [[987, "tokenizing-text-with-scikit-learn"]], "From occurrences to frequencies": [[987, "from-occurrences-to-frequencies"]], "Training a classifier": [[987, "training-a-classifier"]], "Building a pipeline": [[987, "building-a-pipeline"]], "Evaluation of the performance on the test set": [[987, "evaluation-of-the-performance-on-the-test-set"]], "Parameter tuning using grid search": [[987, "parameter-tuning-using-grid-search"]], "Exercises": [[987, "exercises"]], "Exercise 1: Language identification": [[987, "exercise-1-language-identification"]], "Exercise 2: Sentiment Analysis on movie reviews": [[987, "exercise-2-sentiment-analysis-on-movie-reviews"]], "Exercise 3: CLI text classification utility": [[987, "exercise-3-cli-text-classification-utility"]], "Where to from here": [[987, "where-to-from-here"]], "Unsupervised learning": [[988, "unsupervised-learning"]], "User Guide": [[989, "user-guide"]], "Under Development": [[989, "under-development"]], "Visualizations": [[990, "visualizations"]], "Available Plotting Utilities": [[990, "available-plotting-utilities"]], "Display Objects": [[990, "display-objects"]], "Release History": [[991, "release-history"]], "Older Versions": [[993, "older-versions"]], "Version 0.12.1": [[993, "version-0-12-1"]], "Changelog": [[993, "changelog"], [993, "id1"], [993, "id3"], [993, "id6"], [993, "id9"], [993, "id12"], [993, "id14"], [993, "id16"], [993, "id18"], [993, "id19"], [994, "changelog"], [994, "id2"], [995, "changelog"], [996, "changelog"], [997, "changelog"], [997, "id2"], [998, "changelog"], [998, "id2"], [999, "changelog"], [999, "id1"], [999, "id3"], [1000, "changelog"], [1000, "id2"], [1001, "changelog"], [1001, "id1"], [1001, "id5"], [1001, "id10"], [1001, "id23"], [1002, "changelog"], [1002, "id1"], [1002, "id2"], [1002, "id7"], [1003, "changelog"], [1003, "id1"], [1003, "id4"], [1004, "changelog"], [1004, "id1"], [1004, "id4"], [1005, "changelog"], [1005, "id1"], [1005, "id4"], [1006, "changelog"], [1006, "id6"], [1007, "changelog"], [1007, "id1"], [1007, "id7"], [1008, "changelog"], [1008, "id1"], [1008, "id9"], [1009, "changelog"], [1009, "id1"], [1009, "id6"], [1010, "changelog"], [1010, "id5"], [1011, "changelog"]], "People": [[993, "people"], [993, "id2"], [993, "id5"], [993, "id8"], [993, "id11"], [993, "id13"], [993, "id15"], [993, "id17"], [994, "people"], [994, "id3"], [995, "people"], [996, "people"]], "Version 0.12": [[993, "version-0-12"]], "API changes summary": [[993, "api-changes-summary"], [993, "id4"], [993, "id7"], [993, "id10"], [994, "api-changes-summary"], [995, "api-changes-summary"], [996, "api-changes-summary"], [997, "api-changes-summary"], [998, "api-changes-summary"], [999, "api-changes-summary"], [999, "id6"], [1000, "api-changes-summary"]], "Version 0.11": [[993, "version-0-11"]], "Highlights": [[993, "highlights"], [996, "highlights"], [997, "highlights"], [1000, "highlights"], [1001, "highlights"]], "Other changes": [[993, "other-changes"]], "Version 0.10": [[993, "version-0-10"]], "Version 0.9": [[993, "version-0-9"]], "Version 0.8": [[993, "version-0-8"]], "Version 0.7": [[993, "version-0-7"]], "Version 0.6": [[993, "version-0-6"]], "Version 0.5": [[993, "version-0-5"]], "New classes": [[993, "new-classes"]], "Fixes": [[993, "fixes"]], "External dependencies": [[993, "external-dependencies"]], "Removed modules": [[993, "removed-modules"]], "Misc": [[993, "misc"]], "Version 0.4": [[993, "version-0-4"]], "Earlier versions": [[993, "earlier-versions"]], "Version 0.13": [[994, "version-0-13"], [994, "changes-0-13"]], "Version 0.13.1": [[994, "version-0-13-1"]], "New Estimator Classes": [[994, "new-estimator-classes"]], "Version 0.14": [[995, "version-0-14"], [995, "changes-0-14"]], "Version 0.15": [[996, "version-0-15"], [996, "changes-0-15"]], "Version 0.15.2": [[996, "version-0-15-2"]], "Bug fixes": [[996, "bug-fixes"], [996, "id1"], [996, "id3"], [997, "bug-fixes"], [997, "id3"], [998, "bug-fixes"], [998, "id3"], [999, "bug-fixes"], [999, "id5"], [1000, "bug-fixes"], [1000, "id4"]], "Version 0.15.1": [[996, "version-0-15-1"]], "New features": [[996, "new-features"], [997, "new-features"], [998, "new-features"], [999, "new-features"], [1000, "new-features"]], "Enhancements": [[996, "enhancements"], [997, "enhancements"], [998, "enhancements"], [999, "enhancements"], [999, "id4"], [1000, "enhancements"], [1000, "id3"]], "Documentation improvements": [[996, "documentation-improvements"], [997, "documentation-improvements"]], "Version 0.16": [[997, "version-0-16"], [997, "changes-0-16"]], "Version 0.16.1": [[997, "version-0-16-1"]], "Code Contributors": [[997, "code-contributors"], [998, "code-contributors"], [999, "code-contributors"], [999, "id7"]], "Version 0.17": [[998, "version-0-17"], [998, "changes-0-17"]], "Version 0.17.1": [[998, "version-0-17-1"]], "Version 0.18": [[999, "version-0-18"], [999, "changes-0-18"]], "Version 0.18.2": [[999, "version-0-18-2"]], "Version 0.18.1": [[999, "version-0-18-1"]], "Model Selection Enhancements and API Changes": [[999, "model-selection-enhancements-and-api-changes"]], "Version 0.19": [[1000, "version-0-19"], [1000, "id1"]], "Version 0.19.2": [[1000, "version-0-19-2"]], "Related changes": [[1000, "related-changes"]], "Version 0.19.1": [[1000, "version-0-19-1"]], "API changes": [[1000, "api-changes"]], "Code and Documentation Contributors": [[1000, "code-and-documentation-contributors"], [1000, "id10"], [1001, "code-and-documentation-contributors"], [1001, "id8"], [1001, "id21"], [1001, "id41"]], "Changed models": [[1000, "changed-models"], [1001, "changed-models"], [1001, "id9"], [1001, "id22"], [1002, "changed-models"], [1002, "id6"], [1003, "changed-models"], [1004, "changed-models"], [1004, "id3"], [1005, "changed-models"], [1006, "changed-models"], [1007, "changed-models"], [1007, "id6"], [1008, "changed-models"], [1008, "id7"], [1009, "changed-models"], [1009, "id4"], [1010, "changed-models"]], "Version 0.20": [[1001, "version-0-20"]], "Version 0.20.4": [[1001, "version-0-20-4"]], "sklearn.cluster": [[1001, "sklearn-cluster"], [1001, "id2"], [1001, "id11"], [1001, "id24"], [1002, "sklearn-cluster"], [1002, "id8"], [1003, "sklearn-cluster"], [1003, "id5"], [1004, "sklearn-cluster"], [1004, "id2"], [1004, "id5"], [1005, "sklearn-cluster"], [1006, "sklearn-cluster"], [1006, "id1"], [1006, "id8"], [1007, "sklearn-cluster"], [1007, "id8"], [1008, "sklearn-cluster"], [1008, "id12"], [1009, "sklearn-cluster"], [1009, "id8"], [1010, "sklearn-cluster"], [1010, "id7"]], "sklearn.compose": [[1001, "sklearn-compose"], [1001, "id3"], [1001, "id6"], [1001, "id12"], [1001, "id25"], [1002, "sklearn-compose"], [1002, "id9"], [1003, "sklearn-compose"], [1004, "sklearn-compose"], [1005, "sklearn-compose"], [1005, "id5"], [1006, "sklearn-compose"], [1007, "sklearn-compose"], [1008, "sklearn-compose"], [1009, "sklearn-compose"], [1010, "sklearn-compose"], [1010, "id8"], [1011, "sklearn-compose"]], "sklearn.decomposition": [[1001, "sklearn-decomposition"], [1001, "id4"], [1001, "id14"], [1001, "id28"], [1002, "sklearn-decomposition"], [1002, "id11"], [1003, "sklearn-decomposition"], [1004, "sklearn-decomposition"], [1004, "id6"], [1005, "sklearn-decomposition"], [1005, "id7"], [1006, "sklearn-decomposition"], [1006, "id10"], [1007, "sklearn-decomposition"], [1007, "id10"], [1008, "sklearn-decomposition"], [1008, "id14"], [1009, "sklearn-decomposition"], [1009, "id10"], [1010, "sklearn-decomposition"]], "sklearn.model_selection": [[1001, "sklearn-model-selection"], [1001, "id35"], [1002, "sklearn-model-selection"], [1003, "sklearn-model-selection"], [1003, "id9"], [1003, "id13"], [1004, "sklearn-model-selection"], [1005, "sklearn-model-selection"], [1005, "id13"], [1006, "sklearn-model-selection"], [1007, "sklearn-model-selection"], [1008, "sklearn-model-selection"], [1008, "id20"], [1009, "sklearn-model-selection"], [1010, "sklearn-model-selection"], [1011, "sklearn-model-selection"]], "sklearn.neighbors": [[1001, "sklearn-neighbors"], [1001, "id7"], [1001, "id18"], [1001, "id36"], [1002, "sklearn-neighbors"], [1002, "id5"], [1002, "id17"], [1003, "sklearn-neighbors"], [1003, "id11"], [1005, "sklearn-neighbors"], [1006, "sklearn-neighbors"], [1006, "id4"], [1006, "id17"], [1007, "sklearn-neighbors"], [1008, "sklearn-neighbors"], [1009, "sklearn-neighbors"], [1009, "id16"], [1010, "sklearn-neighbors"]], "Version 0.20.3": [[1001, "version-0-20-3"]], "sklearn.covariance": [[1001, "sklearn-covariance"], [1001, "id26"], [1005, "sklearn-covariance"], [1006, "sklearn-covariance"], [1007, "sklearn-covariance"], [1009, "sklearn-covariance"], [1010, "sklearn-covariance"]], "sklearn.datasets": [[1001, "sklearn-datasets"], [1001, "id13"], [1001, "id27"], [1002, "sklearn-datasets"], [1002, "id10"], [1003, "sklearn-datasets"], [1004, "sklearn-datasets"], [1005, "sklearn-datasets"], [1006, "sklearn-datasets"], [1006, "id9"], [1007, "sklearn-datasets"], [1007, "id9"], [1008, "sklearn-datasets"], [1008, "id13"], [1009, "sklearn-datasets"], [1009, "id9"], [1010, "sklearn-datasets"]], "sklearn.feature_extraction": [[1001, "sklearn-feature-extraction"], [1001, "id15"], [1001, "id30"], [1002, "sklearn-feature-extraction"], [1003, "sklearn-feature-extraction"], [1004, "sklearn-feature-extraction"], [1004, "id8"], [1005, "sklearn-feature-extraction"], [1005, "id9"], [1006, "sklearn-feature-extraction"], [1006, "id12"], [1007, "sklearn-feature-extraction"], [1008, "sklearn-feature-extraction"], [1009, "sklearn-feature-extraction"], [1010, "sklearn-feature-extraction"], [1011, "sklearn-feature-extraction"]], "sklearn.impute": [[1001, "sklearn-impute"], [1001, "id31"], [1002, "sklearn-impute"], [1002, "id13"], [1003, "sklearn-impute"], [1003, "id6"], [1004, "sklearn-impute"], [1005, "sklearn-impute"], [1006, "sklearn-impute"], [1007, "sklearn-impute"], [1007, "id12"], [1008, "sklearn-impute"], [1009, "sklearn-impute"], [1009, "id13"], [1011, "sklearn-impute"]], "sklearn.linear_model": [[1001, "sklearn-linear-model"], [1001, "id16"], [1001, "id32"], [1002, "sklearn-linear-model"], [1002, "id15"], [1003, "sklearn-linear-model"], [1004, "sklearn-linear-model"], [1004, "id9"], [1005, "sklearn-linear-model"], [1005, "id11"], [1006, "sklearn-linear-model"], [1006, "id3"], [1006, "id14"], [1007, "sklearn-linear-model"], [1007, "id13"], [1008, "sklearn-linear-model"], [1008, "id18"], [1009, "sklearn-linear-model"], [1010, "sklearn-linear-model"], [1010, "id11"]], "sklearn.preprocessing": [[1001, "sklearn-preprocessing"], [1001, "id19"], [1001, "id37"], [1002, "sklearn-preprocessing"], [1002, "id18"], [1003, "sklearn-preprocessing"], [1003, "id12"], [1004, "sklearn-preprocessing"], [1005, "sklearn-preprocessing"], [1005, "id15"], [1006, "sklearn-preprocessing"], [1006, "id19"], [1007, "sklearn-preprocessing"], [1007, "id4"], [1007, "id16"], [1008, "sklearn-preprocessing"], [1008, "id4"], [1008, "id22"], [1009, "sklearn-preprocessing"], [1009, "id17"], [1010, "sklearn-preprocessing"], [1010, "id2"], [1010, "id12"]], "sklearn.svm": [[1001, "sklearn-svm"], [1001, "id38"], [1002, "sklearn-svm"], [1003, "sklearn-svm"], [1004, "sklearn-svm"], [1005, "sklearn-svm"], [1006, "sklearn-svm"], [1006, "id20"], [1007, "sklearn-svm"], [1008, "sklearn-svm"], [1009, "sklearn-svm"]], "Version 0.20.2": [[1001, "version-0-20-2"]], "sklearn.metrics": [[1001, "sklearn-metrics"], [1001, "id17"], [1001, "id33"], [1002, "sklearn-metrics"], [1002, "id4"], [1002, "id16"], [1003, "sklearn-metrics"], [1003, "id2"], [1003, "id8"], [1004, "sklearn-metrics"], [1004, "id10"], [1005, "sklearn-metrics"], [1005, "id2"], [1005, "id12"], [1006, "sklearn-metrics"], [1006, "id16"], [1007, "sklearn-metrics"], [1007, "id3"], [1007, "id15"], [1008, "sklearn-metrics"], [1009, "sklearn-metrics"], [1009, "id2"], [1009, "id14"], [1010, "sklearn-metrics"], [1011, "sklearn-metrics"]], "sklearn.utils": [[1001, "sklearn-utils"], [1001, "id20"], [1001, "id39"], [1002, "sklearn-utils"], [1003, "sklearn-utils"], [1003, "id14"], [1004, "sklearn-utils"], [1004, "id12"], [1005, "sklearn-utils"], [1005, "id18"], [1006, "sklearn-utils"], [1006, "id5"], [1006, "id22"], [1007, "sklearn-utils"], [1007, "id18"], [1008, "sklearn-utils"], [1008, "id6"], [1008, "id24"], [1009, "sklearn-utils"], [1010, "sklearn-utils"], [1010, "id14"], [1011, "sklearn-utils"]], "Version 0.20.1": [[1001, "version-0-20-1"]], "sklearn.ensemble": [[1001, "sklearn-ensemble"], [1001, "id29"], [1002, "sklearn-ensemble"], [1002, "id12"], [1003, "sklearn-ensemble"], [1004, "sklearn-ensemble"], [1004, "id7"], [1005, "sklearn-ensemble"], [1005, "id8"], [1006, "sklearn-ensemble"], [1006, "id2"], [1006, "id11"], [1007, "sklearn-ensemble"], [1008, "sklearn-ensemble"], [1008, "id3"], [1008, "id15"], [1009, "sklearn-ensemble"], [1009, "id11"], [1010, "sklearn-ensemble"], [1010, "id9"], [1011, "sklearn-ensemble"]], "sklearn.mixture": [[1001, "sklearn-mixture"], [1001, "id34"], [1002, "sklearn-mixture"], [1006, "sklearn-mixture"], [1007, "sklearn-mixture"], [1009, "sklearn-mixture"], [1009, "id15"]], "Version 0.20.0": [[1001, "version-0-20-0"]], "Known Major Bugs": [[1001, "known-major-bugs"], [1002, "known-major-bugs"]], "sklearn.discriminant_analysis": [[1001, "sklearn-discriminant-analysis"], [1002, "sklearn-discriminant-analysis"], [1005, "sklearn-discriminant-analysis"], [1007, "sklearn-discriminant-analysis"], [1008, "sklearn-discriminant-analysis"], [1009, "sklearn-discriminant-analysis"]], "sklearn.dummy": [[1001, "sklearn-dummy"], [1002, "sklearn-dummy"], [1003, "sklearn-dummy"], [1006, "sklearn-dummy"], [1007, "sklearn-dummy"], [1011, "sklearn-dummy"]], "sklearn.feature_selection": [[1001, "sklearn-feature-selection"], [1003, "sklearn-feature-selection"], [1004, "sklearn-feature-selection"], [1005, "sklearn-feature-selection"], [1006, "sklearn-feature-selection"], [1006, "id13"], [1007, "sklearn-feature-selection"], [1007, "id2"], [1007, "id11"], [1008, "sklearn-feature-selection"], [1008, "id16"], [1009, "sklearn-feature-selection"], [1009, "id12"], [1010, "sklearn-feature-selection"], [1011, "sklearn-feature-selection"]], "sklearn.gaussian_process": [[1001, "sklearn-gaussian-process"], [1003, "sklearn-gaussian-process"], [1004, "sklearn-gaussian-process"], [1005, "sklearn-gaussian-process"], [1005, "id10"], [1006, "sklearn-gaussian-process"], [1007, "sklearn-gaussian-process"], [1008, "sklearn-gaussian-process"], [1009, "sklearn-gaussian-process"]], "sklearn.isotonic": [[1001, "sklearn-isotonic"], [1002, "sklearn-isotonic"], [1003, "sklearn-isotonic"], [1005, "sklearn-isotonic"], [1007, "sklearn-isotonic"], [1008, "sklearn-isotonic"]], "sklearn.manifold": [[1001, "sklearn-manifold"], [1002, "sklearn-manifold"], [1003, "sklearn-manifold"], [1004, "sklearn-manifold"], [1005, "sklearn-manifold"], [1006, "sklearn-manifold"], [1006, "id15"], [1007, "sklearn-manifold"], [1007, "id14"], [1008, "sklearn-manifold"], [1008, "id19"], [1009, "sklearn-manifold"]], "sklearn.multioutput": [[1001, "sklearn-multioutput"], [1002, "sklearn-multioutput"], [1003, "sklearn-multioutput"], [1004, "sklearn-multioutput"], [1005, "sklearn-multioutput"], [1005, "id14"], [1008, "sklearn-multioutput"], [1009, "sklearn-multioutput"], [1010, "sklearn-multioutput"]], "sklearn.naive_bayes": [[1001, "sklearn-naive-bayes"], [1003, "sklearn-naive-bayes"], [1003, "id10"], [1004, "sklearn-naive-bayes"], [1005, "sklearn-naive-bayes"], [1006, "sklearn-naive-bayes"], [1008, "sklearn-naive-bayes"], [1009, "sklearn-naive-bayes"]], "sklearn.neural_network": [[1001, "sklearn-neural-network"], [1002, "sklearn-neural-network"], [1003, "sklearn-neural-network"], [1004, "sklearn-neural-network"], [1005, "sklearn-neural-network"], [1006, "sklearn-neural-network"], [1007, "sklearn-neural-network"], [1008, "sklearn-neural-network"], [1008, "id21"], [1009, "sklearn-neural-network"]], "sklearn.pipeline": [[1001, "sklearn-pipeline"], [1002, "sklearn-pipeline"], [1003, "sklearn-pipeline"], [1004, "sklearn-pipeline"], [1005, "sklearn-pipeline"], [1006, "sklearn-pipeline"], [1006, "id18"], [1007, "sklearn-pipeline"], [1008, "sklearn-pipeline"], [1009, "sklearn-pipeline"]], "sklearn.tree": [[1001, "sklearn-tree"], [1002, "sklearn-tree"], [1002, "id19"], [1003, "sklearn-tree"], [1004, "sklearn-tree"], [1005, "sklearn-tree"], [1005, "id17"], [1006, "sklearn-tree"], [1006, "id21"], [1007, "sklearn-tree"], [1007, "id5"], [1007, "id17"], [1008, "sklearn-tree"], [1008, "id5"], [1008, "id23"], [1009, "sklearn-tree"], [1009, "id3"], [1009, "id18"], [1010, "sklearn-tree"], [1010, "id13"]], "Multiple modules": [[1001, "multiple-modules"], [1002, "multiple-modules"], [1011, "multiple-modules"]], "Changes to estimator checks": [[1001, "changes-to-estimator-checks"], [1002, "changes-to-estimator-checks"], [1003, "changes-to-estimator-checks"]], "Version 0.21": [[1002, "version-0-21"]], "Version 0.21.3": [[1002, "version-0-21-3"]], "sklearn.inspection": [[1002, "sklearn-inspection"], [1002, "id3"], [1002, "id14"], [1003, "sklearn-inspection"], [1003, "id7"], [1004, "sklearn-inspection"], [1004, "id11"], [1005, "sklearn-inspection"], [1006, "sklearn-inspection"], [1007, "sklearn-inspection"], [1008, "sklearn-inspection"], [1008, "id17"], [1009, "sklearn-inspection"], [1010, "sklearn-inspection"], [1010, "id10"]], "Version 0.21.2": [[1002, "version-0-21-2"]], "sklearn.utils.sparsefuncs": [[1002, "sklearn-utils-sparsefuncs"]], "Version 0.21.1": [[1002, "version-0-21-1"]], "Version 0.21.0": [[1002, "version-0-21-0"]], "sklearn.base": [[1002, "sklearn-base"], [1003, "sklearn-base"], [1005, "sklearn-base"], [1006, "sklearn-base"], [1007, "sklearn-base"], [1008, "sklearn-base"], [1008, "id2"], [1008, "id10"], [1009, "sklearn-base"], [1010, "sklearn-base"]], "sklearn.calibration": [[1002, "sklearn-calibration"], [1003, "sklearn-calibration"], [1005, "sklearn-calibration"], [1006, "sklearn-calibration"], [1006, "id7"], [1007, "sklearn-calibration"], [1008, "sklearn-calibration"], [1008, "id11"], [1009, "sklearn-calibration"], [1009, "id7"], [1010, "sklearn-calibration"], [1010, "id6"]], "sklearn.externals": [[1002, "sklearn-externals"]], "sklearn.multiclass": [[1002, "sklearn-multiclass"], [1005, "sklearn-multiclass"], [1006, "sklearn-multiclass"], [1007, "sklearn-multiclass"]], "Version 0.22": [[1003, "version-0-22"]], "Version 0.22.2.post1": [[1003, "version-0-22-2-post1"]], "Version 0.22.1": [[1003, "version-0-22-1"]], "sklearn.semi_supervised": [[1003, "sklearn-semi-supervised"], [1004, "sklearn-semi-supervised"], [1005, "sklearn-semi-supervised"], [1005, "id3"], [1005, "id16"], [1009, "sklearn-semi-supervised"]], "Version 0.22.0": [[1003, "version-0-22-0"]], "Website update": [[1003, "website-update"]], "Clear definition of the public API": [[1003, "clear-definition-of-the-public-api"]], "Deprecations: using FutureWarning from now on": [[1003, "deprecations-using-futurewarning-from-now-on"]], "sklearn.cross_decomposition": [[1003, "sklearn-cross-decomposition"], [1005, "sklearn-cross-decomposition"], [1005, "id6"], [1007, "sklearn-cross-decomposition"], [1009, "sklearn-cross-decomposition"]], "sklearn.kernel_approximation": [[1003, "sklearn-kernel-approximation"], [1005, "sklearn-kernel-approximation"], [1006, "sklearn-kernel-approximation"], [1007, "sklearn-kernel-approximation"], [1008, "sklearn-kernel-approximation"], [1009, "sklearn-kernel-approximation"]], "Version 0.23": [[1004, "version-0-23"]], "Version 0.23.2": [[1004, "version-0-23-2"]], "Version 0.23.1": [[1004, "version-0-23-1"]], "Version 0.23.0": [[1004, "version-0-23-0"]], "Enforcing keyword-only arguments": [[1004, "enforcing-keyword-only-arguments"], [1006, "enforcing-keyword-only-arguments"]], "Version 0.24": [[1005, "version-0-24"]], "Version 0.24.2": [[1005, "version-0-24-2"]], "Version 0.24.1": [[1005, "version-0-24-1"]], "Packaging": [[1005, "packaging"]], "Version 0.24.0": [[1005, "version-0-24-0"]], "sklearn.exceptions": [[1005, "sklearn-exceptions"], [1009, "sklearn-exceptions"]], "Version 1.0": [[1006, "version-1-0"]], "Version 1.0.2": [[1006, "version-1-0-2"]], "Version 1.0.1": [[1006, "version-1-0-1"]], "Fixed models": [[1006, "fixed-models"]], "Version 1.0.0": [[1006, "version-1-0-0"]], "Minimal dependencies": [[1006, "minimal-dependencies"], [1007, "minimal-dependencies"]], "Version 1.1": [[1007, "version-1-1"]], "Version 1.1.3": [[1007, "version-1-1-3"]], "Version 1.1.2": [[1007, "version-1-1-2"]], "Version 1.1.1": [[1007, "version-1-1-1"]], "Version 1.1.0": [[1007, "version-1-1-0"]], "sklearn.random_projection": [[1007, "sklearn-random-projection"]], "Version 1.2": [[1008, "version-1-2"]], "Version 1.2.2": [[1008, "version-1-2-2"]], "Version 1.2.1": [[1008, "version-1-2-1"]], "Changes impacting all modules": [[1008, "changes-impacting-all-modules"], [1008, "id8"], [1009, "changes-impacting-all-modules"], [1009, "id5"], [1010, "changes-impacting-all-modules"], [1010, "id3"]], "Version 1.2.0": [[1008, "version-1-2-0"]], "Version 1.3": [[1009, "version-1-3"]], "Version 1.3.2": [[1009, "version-1-3-2"]], "Version 1.3.1": [[1009, "version-1-3-1"]], "Version 1.3.0": [[1009, "version-1-3-0"]], "Changed displays": [[1009, "changed-displays"]], "Experimental / Under Development": [[1009, "experimental-under-development"]], "sklearn": [[1009, "sklearn"]], "Version 1.4": [[1010, "version-1-4"]], "Version 1.4.1": [[1010, "version-1-4-1"]], "DataFrame Support": [[1010, "dataframe-support"]], "Version 1.4.0": [[1010, "version-1-4-0"]], "Support for SciPy sparse arrays": [[1010, "support-for-scipy-sparse-arrays"]], "Support for Array API": [[1010, "support-for-array-api"]], "Private Loss Function Module": [[1010, "private-loss-function-module"]], "sklearn.kernel_ridge": [[1010, "sklearn-kernel-ridge"]], "Version 1.5": [[1011, "version-1-5"]], "Version 1.5.0": [[1011, "version-1-5-0"]], "Support for building with Meson": [[1011, "support-for-building-with-meson"]]}, "indexentries": {"1d": [[359, "term-1d"]], "1d array": [[359, "term-1d-array"]], "2d": [[359, "term-2d"]], "2d array": [[359, "term-2d-array"]], "api": [[359, "term-API"]], "cv splitter": [[359, "term-CV-splitter"]], "slep": [[359, "term-SLEP"]], "sleps": [[359, "term-SLEPs"]], "x": [[359, "term-X"]], "xt": [[359, "term-Xt"]], "y": [[359, "term-Y"], [359, "term-y"]], "_estimator_type": [[359, "term-_estimator_type"]], "array-like": [[359, "term-array-like"]], "attribute": [[359, "term-attribute"]], "attributes": [[359, "term-attributes"]], "backwards compatibility": [[359, "term-backwards-compatibility"]], "binary": [[359, "term-binary"]], "callable": [[359, "term-callable"]], "categorical feature": [[359, "term-categorical-feature"]], "class_weight": [[359, "term-class_weight"]], "classes_": [[359, "term-classes_"]], "classifier": [[359, "term-classifier"]], "classifiers": [[359, "term-classifiers"]], "clone": [[359, "term-clone"]], "cloned": [[359, "term-cloned"]], "clusterer": [[359, "term-clusterer"]], "clusterers": [[359, "term-clusterers"]], "coef_": [[359, "term-coef_"]], "common tests": [[359, "term-common-tests"]], "components_": [[359, "term-components_"]], "consumer": [[359, "term-consumer"]], "continuous": [[359, "term-continuous"]], "continuous multi-output": [[359, "term-continuous-multi-output"]], "continuous multioutput": [[359, "term-continuous-multioutput"]], "cross fitting": [[359, "term-0"]], "cross validation": [[359, "term-1"]], "cross-fitting": [[359, "term-cross-fitting"]], "cross-validation": [[359, "term-cross-validation"]], "cross-validation estimator": [[359, "term-cross-validation-estimator"]], "cross-validation generator": [[359, "term-cross-validation-generator"]], "cross-validation splitter": [[359, "term-cross-validation-splitter"]], "cv": [[359, "term-cv"]], "data leakage": [[359, "term-data-leakage"]], "data type": [[359, "term-data-type"]], "decision_function": [[359, "term-decision_function"]], "density estimator": [[359, "term-density-estimator"]], "deprecation": [[359, "term-deprecation"]], "dimensionality": [[359, "term-dimensionality"]], "docstring": [[359, "term-docstring"]], "double underscore": [[359, "term-double-underscore"]], "double underscore notation": [[359, "term-double-underscore-notation"]], "dtype": [[359, "term-dtype"]], "duck typing": [[359, "term-duck-typing"]], "early stopping": [[359, "term-early-stopping"]], "embedding_": [[359, "term-embedding_"]], "estimator": [[359, "term-estimator"]], "estimator instance": [[359, "term-estimator-instance"]], "estimator tags": [[359, "term-estimator-tags"]], "estimators": [[359, "term-estimators"]], "evaluation metric": [[359, "term-evaluation-metric"]], "evaluation metrics": [[359, "term-evaluation-metrics"]], "examples": [[359, "term-examples"]], "experimental": [[359, "term-experimental"]], "feature": [[359, "term-feature"]], "feature extractor": [[359, "term-feature-extractor"]], "feature extractors": [[359, "term-feature-extractors"]], "feature vector": [[359, "term-feature-vector"]], "feature_importances_": [[359, "term-feature_importances_"]], "features": [[359, "term-features"]], "fit": [[359, "term-fit"]], "fit_predict": [[359, "term-fit_predict"]], "fit_transform": [[359, "term-fit_transform"]], "fitted": [[359, "term-fitted"]], "fitting": [[359, "term-fitting"]], "function": [[359, "term-function"]], "gallery": [[359, "term-gallery"]], "get_feature_names_out": [[359, "term-get_feature_names_out"]], "get_n_splits": [[359, "term-get_n_splits"]], "get_params": [[359, "term-get_params"]], "groups": [[359, "term-groups"]], "hyper-parameter": [[359, "term-hyper-parameter"]], "hyperparameter": [[359, "term-hyperparameter"]], "imputation": [[359, "term-imputation"]], "impute": [[359, "term-impute"]], "indexable": [[359, "term-indexable"]], "induction": [[359, "term-induction"]], "inductive": [[359, "term-inductive"]], "joblib": [[359, "term-joblib"]], "kernel": [[359, "term-kernel"]], "label indicator matrix": [[359, "term-label-indicator-matrix"]], "labels_": [[359, "term-labels_"]], "leakage": [[359, "term-leakage"]], "max_iter": [[359, "term-max_iter"]], "memmapping": [[359, "term-memmapping"]], "memory": [[359, "term-memory"]], "memory map": [[359, "term-memory-map"]], "memory mapping": [[359, "term-memory-mapping"]], "meta-estimator": [[359, "term-meta-estimator"]], "meta-estimators": [[359, "term-meta-estimators"]], "metadata": [[359, "term-metadata"]], "metaestimator": [[359, "term-metaestimator"]], "metaestimators": [[359, "term-metaestimators"]], "metric": [[359, "term-metric"]], "missing values": [[359, "term-missing-values"]], "multi-class": [[359, "term-multi-class"]], "multi-class multi-output": [[359, "term-multi-class-multi-output"]], "multi-label": [[359, "term-multi-label"]], "multi-output": [[359, "term-multi-output"]], "multi-output continuous": [[359, "term-multi-output-continuous"]], "multi-output multi-class": [[359, "term-multi-output-multi-class"]], "multiclass": [[359, "term-multiclass"]], "multiclass multioutput": [[359, "term-multiclass-multioutput"]], "multilabel": [[359, "term-multilabel"]], "multilabel indicator matrices": [[359, "term-multilabel-indicator-matrices"]], "multilabel indicator matrix": [[359, "term-multilabel-indicator-matrix"]], "multioutput": [[359, "term-multioutput"]], "multioutput continuous": [[359, "term-multioutput-continuous"]], "multioutput multiclass": [[359, "term-multioutput-multiclass"]], "n_components": [[359, "term-n_components"]], "n_features": [[359, "term-n_features"]], "n_iter_": [[359, "term-n_iter_"]], "n_iter_no_change": [[359, "term-n_iter_no_change"]], "n_jobs": [[359, "term-n_jobs"]], "n_outputs": [[359, "term-n_outputs"]], "n_samples": [[359, "term-n_samples"]], "n_targets": [[359, "term-n_targets"]], "narrative docs": [[359, "term-narrative-docs"]], "narrative documentation": [[359, "term-narrative-documentation"]], "np": [[359, "term-np"]], "online learning": [[359, "term-online-learning"]], "out-of-core": [[359, "term-out-of-core"]], "outlier detector": [[359, "term-outlier-detector"]], "outlier detectors": [[359, "term-outlier-detectors"]], "outputs": [[359, "term-outputs"]], "pair": [[359, "term-pair"]], "pairwise metric": [[359, "term-pairwise-metric"]], "pairwise metrics": [[359, "term-pairwise-metrics"]], "param": [[359, "term-param"]], "parameter": [[359, "term-parameter"]], "parameters": [[359, "term-parameters"]], "params": [[359, "term-params"]], "partial_fit": [[359, "term-partial_fit"]], "pd": [[359, "term-pd"]], "pos_label": [[359, "term-pos_label"]], "precomputed": [[359, "term-precomputed"]], "predict": [[359, "term-predict"]], "predict_log_proba": [[359, "term-predict_log_proba"]], "predict_proba": [[359, "term-predict_proba"]], "predictor": [[359, "term-predictor"]], "predictors": [[359, "term-predictors"]], "random_state": [[359, "term-random_state"]], "rectangular": [[359, "term-rectangular"]], "regressor": [[359, "term-regressor"]], "regressors": [[359, "term-regressors"]], "router": [[359, "term-router"]], "sample": [[359, "term-sample"]], "sample properties": [[359, "term-sample-properties"]], "sample property": [[359, "term-sample-property"]], "sample_weight": [[359, "term-sample_weight"]], "samples": [[359, "term-samples"]], "scikit-learn enhancement proposals": [[359, "term-scikit-learn-enhancement-proposals"]], "scikit-learn-contrib": [[359, "term-scikit-learn-contrib"]], "score": [[359, "term-score"]], "score_samples": [[359, "term-score_samples"]], "scorer": [[359, "term-scorer"]], "scoring": [[359, "term-scoring"]], "semi-supervised": [[359, "term-semi-supervised"]], "semi-supervised learning": [[359, "term-semi-supervised-learning"]], "semisupervised": [[359, "term-semisupervised"]], "set_params": [[359, "term-set_params"]], "sparse graph": [[359, "term-sparse-graph"]], "sparse matrix": [[359, "term-sparse-matrix"]], "split": [[359, "term-split"]], "stateless": [[359, "term-stateless"]], "supervised": [[359, "term-supervised"]], "supervised learning": [[359, "term-supervised-learning"]], "target": [[359, "term-target"]], "targets": [[359, "term-targets"]], "transduction": [[359, "term-transduction"]], "transductive": [[359, "term-transductive"]], "transform": [[359, "term-transform"]], "transformer": [[359, "term-transformer"]], "transformers": [[359, "term-transformers"]], "unlabeled": [[359, "term-unlabeled"]], "unlabeled data": [[359, "term-unlabeled-data"]], "unsupervised": [[359, "term-unsupervised"]], "unsupervised learning": [[359, "term-unsupervised-learning"]], "vectorizer": [[359, "term-vectorizer"]], "vectorizers": [[359, "term-vectorizers"]], "verbose": [[359, "term-verbose"]], "warm_start": [[359, "term-warm_start"]], "module": [[372, "module-sklearn"], [372, "module-sklearn.base"], [372, "module-sklearn.calibration"], [372, "module-sklearn.cluster"], [372, "module-sklearn.compose"], [372, "module-sklearn.covariance"], [372, "module-sklearn.cross_decomposition"], [372, "module-sklearn.datasets"], [372, "module-sklearn.decomposition"], [372, "module-sklearn.discriminant_analysis"], [372, "module-sklearn.dummy"], [372, "module-sklearn.ensemble"], [372, "module-sklearn.exceptions"], [372, "module-sklearn.experimental"], [372, "module-sklearn.feature_extraction"], [372, "module-sklearn.feature_extraction.image"], [372, "module-sklearn.feature_extraction.text"], [372, "module-sklearn.feature_selection"], [372, "module-sklearn.gaussian_process"], [372, "module-sklearn.gaussian_process.kernels"], [372, "module-sklearn.impute"], [372, "module-sklearn.inspection"], [372, "module-sklearn.isotonic"], [372, "module-sklearn.kernel_approximation"], [372, "module-sklearn.kernel_ridge"], [372, "module-sklearn.linear_model"], [372, "module-sklearn.manifold"], [372, "module-sklearn.metrics"], [372, "module-sklearn.metrics.cluster"], [372, "module-sklearn.metrics.pairwise"], [372, "module-sklearn.mixture"], [372, "module-sklearn.model_selection"], [372, "module-sklearn.multiclass"], [372, "module-sklearn.multioutput"], [372, "module-sklearn.naive_bayes"], [372, "module-sklearn.neighbors"], [372, "module-sklearn.neural_network"], [372, "module-sklearn.pipeline"], [372, "module-sklearn.preprocessing"], [372, "module-sklearn.random_projection"], [372, "module-sklearn.semi_supervised"], [372, "module-sklearn.svm"], [372, "module-sklearn.tree"], [372, "module-sklearn.utils"], [372, "module-sklearn.utils.arrayfuncs"], [372, "module-sklearn.utils.class_weight"], [372, "module-sklearn.utils.discovery"], [372, "module-sklearn.utils.estimator_checks"], [372, "module-sklearn.utils.extmath"], [372, "module-sklearn.utils.graph"], [372, "module-sklearn.utils.metadata_routing"], [372, "module-sklearn.utils.metaestimators"], [372, "module-sklearn.utils.multiclass"], [372, "module-sklearn.utils.parallel"], [372, "module-sklearn.utils.random"], [372, "module-sklearn.utils.sparsefuncs"], [372, "module-sklearn.utils.sparsefuncs_fast"], [372, "module-sklearn.utils.validation"], [543, "module-sklearn.experimental.enable_halving_search_cv"], [544, "module-sklearn.experimental.enable_iterative_imputer"]], "sklearn": [[372, "module-sklearn"]], "sklearn.base": [[372, "module-sklearn.base"]], "sklearn.calibration": [[372, "module-sklearn.calibration"]], "sklearn.cluster": [[372, "module-sklearn.cluster"]], "sklearn.compose": [[372, "module-sklearn.compose"]], "sklearn.covariance": [[372, "module-sklearn.covariance"]], "sklearn.cross_decomposition": [[372, "module-sklearn.cross_decomposition"]], "sklearn.datasets": [[372, "module-sklearn.datasets"]], "sklearn.decomposition": [[372, "module-sklearn.decomposition"]], "sklearn.discriminant_analysis": [[372, "module-sklearn.discriminant_analysis"]], "sklearn.dummy": [[372, "module-sklearn.dummy"]], "sklearn.ensemble": [[372, "module-sklearn.ensemble"]], "sklearn.exceptions": [[372, "module-sklearn.exceptions"]], "sklearn.experimental": [[372, "module-sklearn.experimental"]], "sklearn.feature_extraction": [[372, "module-sklearn.feature_extraction"]], "sklearn.feature_extraction.image": [[372, "module-sklearn.feature_extraction.image"]], "sklearn.feature_extraction.text": [[372, "module-sklearn.feature_extraction.text"]], "sklearn.feature_selection": [[372, "module-sklearn.feature_selection"]], "sklearn.gaussian_process": [[372, "module-sklearn.gaussian_process"]], "sklearn.gaussian_process.kernels": [[372, "module-sklearn.gaussian_process.kernels"]], "sklearn.impute": [[372, "module-sklearn.impute"]], "sklearn.inspection": [[372, "module-sklearn.inspection"]], "sklearn.isotonic": [[372, "module-sklearn.isotonic"]], "sklearn.kernel_approximation": [[372, "module-sklearn.kernel_approximation"]], "sklearn.kernel_ridge": [[372, "module-sklearn.kernel_ridge"]], "sklearn.linear_model": [[372, "module-sklearn.linear_model"]], "sklearn.manifold": [[372, "module-sklearn.manifold"]], "sklearn.metrics": [[372, "module-sklearn.metrics"]], "sklearn.metrics.cluster": [[372, "module-sklearn.metrics.cluster"]], "sklearn.metrics.pairwise": [[372, "module-sklearn.metrics.pairwise"]], "sklearn.mixture": [[372, "module-sklearn.mixture"]], "sklearn.model_selection": [[372, "module-sklearn.model_selection"]], "sklearn.multiclass": [[372, "module-sklearn.multiclass"]], "sklearn.multioutput": [[372, "module-sklearn.multioutput"]], "sklearn.naive_bayes": [[372, "module-sklearn.naive_bayes"]], "sklearn.neighbors": [[372, "module-sklearn.neighbors"]], "sklearn.neural_network": [[372, "module-sklearn.neural_network"]], "sklearn.pipeline": [[372, "module-sklearn.pipeline"]], "sklearn.preprocessing": [[372, "module-sklearn.preprocessing"]], "sklearn.random_projection": [[372, "module-sklearn.random_projection"]], "sklearn.semi_supervised": [[372, "module-sklearn.semi_supervised"]], "sklearn.svm": [[372, "module-sklearn.svm"]], "sklearn.tree": [[372, "module-sklearn.tree"]], "sklearn.utils": [[372, "module-sklearn.utils"]], "sklearn.utils.arrayfuncs": [[372, "module-sklearn.utils.arrayfuncs"]], "sklearn.utils.class_weight": [[372, "module-sklearn.utils.class_weight"]], "sklearn.utils.discovery": [[372, "module-sklearn.utils.discovery"]], "sklearn.utils.estimator_checks": [[372, "module-sklearn.utils.estimator_checks"]], "sklearn.utils.extmath": [[372, "module-sklearn.utils.extmath"]], "sklearn.utils.graph": [[372, "module-sklearn.utils.graph"]], "sklearn.utils.metadata_routing": [[372, "module-sklearn.utils.metadata_routing"]], "sklearn.utils.metaestimators": [[372, "module-sklearn.utils.metaestimators"]], "sklearn.utils.multiclass": [[372, "module-sklearn.utils.multiclass"]], "sklearn.utils.parallel": [[372, "module-sklearn.utils.parallel"]], "sklearn.utils.random": [[372, "module-sklearn.utils.random"]], "sklearn.utils.sparsefuncs": [[372, "module-sklearn.utils.sparsefuncs"]], "sklearn.utils.sparsefuncs_fast": [[372, "module-sklearn.utils.sparsefuncs_fast"]], "sklearn.utils.validation": [[372, "module-sklearn.utils.validation"]], "dbscan() (in module sklearn.cluster)": [[384, "sklearn.cluster.dbscan"]], "fastica() (in module sklearn.decomposition)": [[385, "sklearn.decomposition.fastica"]], "oas() (in module sklearn.covariance)": [[386, "sklearn.covariance.oas"]], "baseestimator (class in sklearn.base)": [[387, "sklearn.base.BaseEstimator"]], "get_metadata_routing() (sklearn.base.baseestimator method)": [[387, "sklearn.base.BaseEstimator.get_metadata_routing"]], "get_params() (sklearn.base.baseestimator method)": [[387, "sklearn.base.BaseEstimator.get_params"]], "set_params() (sklearn.base.baseestimator method)": [[387, "sklearn.base.BaseEstimator.set_params"]], "biclustermixin (class in sklearn.base)": [[388, "sklearn.base.BiclusterMixin"]], "biclusters_ (sklearn.base.biclustermixin property)": [[388, "sklearn.base.BiclusterMixin.biclusters_"]], "get_indices() (sklearn.base.biclustermixin method)": [[388, "sklearn.base.BiclusterMixin.get_indices"]], "get_shape() (sklearn.base.biclustermixin method)": [[388, "sklearn.base.BiclusterMixin.get_shape"]], "get_submatrix() (sklearn.base.biclustermixin method)": [[388, "sklearn.base.BiclusterMixin.get_submatrix"]], "classnameprefixfeaturesoutmixin (class in sklearn.base)": [[389, "sklearn.base.ClassNamePrefixFeaturesOutMixin"]], "get_feature_names_out() (sklearn.base.classnameprefixfeaturesoutmixin method)": [[389, "sklearn.base.ClassNamePrefixFeaturesOutMixin.get_feature_names_out"]], "classifiermixin (class in sklearn.base)": [[390, "sklearn.base.ClassifierMixin"]], "score() (sklearn.base.classifiermixin method)": [[390, "sklearn.base.ClassifierMixin.score"]], "clustermixin (class in sklearn.base)": [[391, "sklearn.base.ClusterMixin"]], "fit_predict() (sklearn.base.clustermixin method)": [[391, "sklearn.base.ClusterMixin.fit_predict"]], "densitymixin (class in sklearn.base)": [[392, "sklearn.base.DensityMixin"]], "score() (sklearn.base.densitymixin method)": [[392, "sklearn.base.DensityMixin.score"]], "metaestimatormixin (class in sklearn.base)": [[393, "sklearn.base.MetaEstimatorMixin"]], "onetoonefeaturemixin (class in sklearn.base)": [[394, "sklearn.base.OneToOneFeatureMixin"]], "get_feature_names_out() (sklearn.base.onetoonefeaturemixin method)": [[394, "sklearn.base.OneToOneFeatureMixin.get_feature_names_out"]], "outliermixin (class in sklearn.base)": [[395, "sklearn.base.OutlierMixin"]], "fit_predict() (sklearn.base.outliermixin method)": [[395, "sklearn.base.OutlierMixin.fit_predict"]], "regressormixin (class in sklearn.base)": [[396, "sklearn.base.RegressorMixin"]], "score() (sklearn.base.regressormixin method)": [[396, "sklearn.base.RegressorMixin.score"]], "transformermixin (class in sklearn.base)": [[397, "sklearn.base.TransformerMixin"]], "fit_transform() (sklearn.base.transformermixin method)": [[397, "sklearn.base.TransformerMixin.fit_transform"]], "set_output() (sklearn.base.transformermixin method)": [[397, "sklearn.base.TransformerMixin.set_output"]], "clone() (in module sklearn.base)": [[398, "sklearn.base.clone"]], "is_classifier() (in module sklearn.base)": [[399, "sklearn.base.is_classifier"]], "is_regressor() (in module sklearn.base)": [[400, "sklearn.base.is_regressor"]], "calibratedclassifiercv (class in sklearn.calibration)": [[401, "sklearn.calibration.CalibratedClassifierCV"]], "fit() (sklearn.calibration.calibratedclassifiercv method)": [[401, "sklearn.calibration.CalibratedClassifierCV.fit"]], "get_metadata_routing() (sklearn.calibration.calibratedclassifiercv method)": [[401, "sklearn.calibration.CalibratedClassifierCV.get_metadata_routing"]], "get_params() (sklearn.calibration.calibratedclassifiercv method)": [[401, "sklearn.calibration.CalibratedClassifierCV.get_params"]], "predict() (sklearn.calibration.calibratedclassifiercv method)": [[401, "sklearn.calibration.CalibratedClassifierCV.predict"]], "predict_proba() (sklearn.calibration.calibratedclassifiercv method)": [[401, "sklearn.calibration.CalibratedClassifierCV.predict_proba"]], "score() (sklearn.calibration.calibratedclassifiercv method)": [[401, "sklearn.calibration.CalibratedClassifierCV.score"]], "set_fit_request() (sklearn.calibration.calibratedclassifiercv method)": [[401, "sklearn.calibration.CalibratedClassifierCV.set_fit_request"]], "set_params() (sklearn.calibration.calibratedclassifiercv method)": [[401, "sklearn.calibration.CalibratedClassifierCV.set_params"]], "set_score_request() (sklearn.calibration.calibratedclassifiercv method)": [[401, "sklearn.calibration.CalibratedClassifierCV.set_score_request"]], "calibrationdisplay (class in sklearn.calibration)": [[402, "sklearn.calibration.CalibrationDisplay"]], "from_estimator() (sklearn.calibration.calibrationdisplay class method)": [[402, "sklearn.calibration.CalibrationDisplay.from_estimator"]], "from_predictions() (sklearn.calibration.calibrationdisplay class method)": [[402, "sklearn.calibration.CalibrationDisplay.from_predictions"]], "plot() (sklearn.calibration.calibrationdisplay method)": [[402, "sklearn.calibration.CalibrationDisplay.plot"]], "calibration_curve() (in module sklearn.calibration)": [[403, "sklearn.calibration.calibration_curve"]], "affinitypropagation (class in sklearn.cluster)": [[404, "sklearn.cluster.AffinityPropagation"]], "fit() (sklearn.cluster.affinitypropagation method)": [[404, "sklearn.cluster.AffinityPropagation.fit"]], "fit_predict() (sklearn.cluster.affinitypropagation method)": [[404, "sklearn.cluster.AffinityPropagation.fit_predict"]], "get_metadata_routing() (sklearn.cluster.affinitypropagation method)": [[404, "sklearn.cluster.AffinityPropagation.get_metadata_routing"]], "get_params() (sklearn.cluster.affinitypropagation method)": [[404, "sklearn.cluster.AffinityPropagation.get_params"]], "predict() (sklearn.cluster.affinitypropagation method)": [[404, "sklearn.cluster.AffinityPropagation.predict"]], "set_params() (sklearn.cluster.affinitypropagation method)": [[404, "sklearn.cluster.AffinityPropagation.set_params"]], "agglomerativeclustering (class in sklearn.cluster)": [[405, "sklearn.cluster.AgglomerativeClustering"]], "fit() (sklearn.cluster.agglomerativeclustering method)": [[405, "sklearn.cluster.AgglomerativeClustering.fit"]], "fit_predict() (sklearn.cluster.agglomerativeclustering method)": [[405, "sklearn.cluster.AgglomerativeClustering.fit_predict"]], "get_metadata_routing() (sklearn.cluster.agglomerativeclustering method)": [[405, "sklearn.cluster.AgglomerativeClustering.get_metadata_routing"]], "get_params() (sklearn.cluster.agglomerativeclustering method)": [[405, "sklearn.cluster.AgglomerativeClustering.get_params"]], "set_params() (sklearn.cluster.agglomerativeclustering method)": [[405, "sklearn.cluster.AgglomerativeClustering.set_params"]], "birch (class in sklearn.cluster)": [[406, "sklearn.cluster.Birch"]], "fit() (sklearn.cluster.birch method)": [[406, "sklearn.cluster.Birch.fit"]], "fit_predict() (sklearn.cluster.birch method)": [[406, "sklearn.cluster.Birch.fit_predict"]], "fit_transform() (sklearn.cluster.birch method)": [[406, "sklearn.cluster.Birch.fit_transform"]], "get_feature_names_out() (sklearn.cluster.birch method)": [[406, "sklearn.cluster.Birch.get_feature_names_out"]], "get_metadata_routing() (sklearn.cluster.birch method)": [[406, "sklearn.cluster.Birch.get_metadata_routing"]], "get_params() (sklearn.cluster.birch method)": [[406, "sklearn.cluster.Birch.get_params"]], "partial_fit() (sklearn.cluster.birch method)": [[406, "sklearn.cluster.Birch.partial_fit"]], "predict() (sklearn.cluster.birch method)": [[406, "sklearn.cluster.Birch.predict"]], "set_output() (sklearn.cluster.birch method)": [[406, "sklearn.cluster.Birch.set_output"]], "set_params() (sklearn.cluster.birch method)": [[406, "sklearn.cluster.Birch.set_params"]], "transform() (sklearn.cluster.birch method)": [[406, "sklearn.cluster.Birch.transform"]], "bisectingkmeans (class in sklearn.cluster)": [[407, "sklearn.cluster.BisectingKMeans"]], "fit() (sklearn.cluster.bisectingkmeans method)": [[407, "sklearn.cluster.BisectingKMeans.fit"]], "fit_predict() (sklearn.cluster.bisectingkmeans method)": [[407, "sklearn.cluster.BisectingKMeans.fit_predict"]], "fit_transform() (sklearn.cluster.bisectingkmeans method)": [[407, "sklearn.cluster.BisectingKMeans.fit_transform"]], "get_feature_names_out() (sklearn.cluster.bisectingkmeans method)": [[407, "sklearn.cluster.BisectingKMeans.get_feature_names_out"]], "get_metadata_routing() (sklearn.cluster.bisectingkmeans method)": [[407, "sklearn.cluster.BisectingKMeans.get_metadata_routing"]], "get_params() (sklearn.cluster.bisectingkmeans method)": [[407, "sklearn.cluster.BisectingKMeans.get_params"]], "predict() (sklearn.cluster.bisectingkmeans method)": [[407, "sklearn.cluster.BisectingKMeans.predict"]], "score() (sklearn.cluster.bisectingkmeans method)": [[407, "sklearn.cluster.BisectingKMeans.score"]], "set_fit_request() (sklearn.cluster.bisectingkmeans method)": [[407, "sklearn.cluster.BisectingKMeans.set_fit_request"]], "set_output() (sklearn.cluster.bisectingkmeans method)": [[407, "sklearn.cluster.BisectingKMeans.set_output"]], "set_params() (sklearn.cluster.bisectingkmeans method)": [[407, "sklearn.cluster.BisectingKMeans.set_params"]], "set_predict_request() (sklearn.cluster.bisectingkmeans method)": [[407, "sklearn.cluster.BisectingKMeans.set_predict_request"]], "set_score_request() (sklearn.cluster.bisectingkmeans method)": [[407, "sklearn.cluster.BisectingKMeans.set_score_request"]], "transform() (sklearn.cluster.bisectingkmeans method)": [[407, "sklearn.cluster.BisectingKMeans.transform"]], "dbscan (class in sklearn.cluster)": [[408, "sklearn.cluster.DBSCAN"]], "fit() (sklearn.cluster.dbscan method)": [[408, "sklearn.cluster.DBSCAN.fit"]], "fit_predict() (sklearn.cluster.dbscan method)": [[408, "sklearn.cluster.DBSCAN.fit_predict"]], "get_metadata_routing() (sklearn.cluster.dbscan method)": [[408, "sklearn.cluster.DBSCAN.get_metadata_routing"]], "get_params() (sklearn.cluster.dbscan method)": [[408, "sklearn.cluster.DBSCAN.get_params"]], "set_fit_request() (sklearn.cluster.dbscan method)": [[408, "sklearn.cluster.DBSCAN.set_fit_request"]], "set_params() (sklearn.cluster.dbscan method)": [[408, "sklearn.cluster.DBSCAN.set_params"]], "featureagglomeration (class in sklearn.cluster)": [[409, "sklearn.cluster.FeatureAgglomeration"]], "fit() (sklearn.cluster.featureagglomeration method)": [[409, "sklearn.cluster.FeatureAgglomeration.fit"]], "fit_predict (sklearn.cluster.featureagglomeration property)": [[409, "sklearn.cluster.FeatureAgglomeration.fit_predict"]], "fit_transform() (sklearn.cluster.featureagglomeration method)": [[409, "sklearn.cluster.FeatureAgglomeration.fit_transform"]], "get_feature_names_out() (sklearn.cluster.featureagglomeration method)": [[409, "sklearn.cluster.FeatureAgglomeration.get_feature_names_out"]], "get_metadata_routing() (sklearn.cluster.featureagglomeration method)": [[409, "sklearn.cluster.FeatureAgglomeration.get_metadata_routing"]], "get_params() (sklearn.cluster.featureagglomeration method)": [[409, "sklearn.cluster.FeatureAgglomeration.get_params"]], "inverse_transform() (sklearn.cluster.featureagglomeration method)": [[409, "sklearn.cluster.FeatureAgglomeration.inverse_transform"]], "set_output() (sklearn.cluster.featureagglomeration method)": [[409, "sklearn.cluster.FeatureAgglomeration.set_output"]], "set_params() (sklearn.cluster.featureagglomeration method)": [[409, "sklearn.cluster.FeatureAgglomeration.set_params"]], "transform() (sklearn.cluster.featureagglomeration method)": [[409, "sklearn.cluster.FeatureAgglomeration.transform"]], "hdbscan (class in sklearn.cluster)": [[410, "sklearn.cluster.HDBSCAN"]], "dbscan_clustering() (sklearn.cluster.hdbscan method)": [[410, "sklearn.cluster.HDBSCAN.dbscan_clustering"]], "fit() (sklearn.cluster.hdbscan method)": [[410, "sklearn.cluster.HDBSCAN.fit"]], "fit_predict() (sklearn.cluster.hdbscan method)": [[410, "sklearn.cluster.HDBSCAN.fit_predict"]], "get_metadata_routing() (sklearn.cluster.hdbscan method)": [[410, "sklearn.cluster.HDBSCAN.get_metadata_routing"]], "get_params() (sklearn.cluster.hdbscan method)": [[410, "sklearn.cluster.HDBSCAN.get_params"]], "set_params() (sklearn.cluster.hdbscan method)": [[410, "sklearn.cluster.HDBSCAN.set_params"]], "kmeans (class in sklearn.cluster)": [[411, "sklearn.cluster.KMeans"]], "fit() (sklearn.cluster.kmeans method)": [[411, "sklearn.cluster.KMeans.fit"]], "fit_predict() (sklearn.cluster.kmeans method)": [[411, "sklearn.cluster.KMeans.fit_predict"]], "fit_transform() (sklearn.cluster.kmeans method)": [[411, "sklearn.cluster.KMeans.fit_transform"]], "get_feature_names_out() (sklearn.cluster.kmeans method)": [[411, "sklearn.cluster.KMeans.get_feature_names_out"]], "get_metadata_routing() (sklearn.cluster.kmeans method)": [[411, "sklearn.cluster.KMeans.get_metadata_routing"]], "get_params() (sklearn.cluster.kmeans method)": [[411, "sklearn.cluster.KMeans.get_params"]], "predict() (sklearn.cluster.kmeans method)": [[411, "sklearn.cluster.KMeans.predict"]], "score() (sklearn.cluster.kmeans method)": [[411, "sklearn.cluster.KMeans.score"]], "set_fit_request() (sklearn.cluster.kmeans method)": [[411, "sklearn.cluster.KMeans.set_fit_request"]], "set_output() (sklearn.cluster.kmeans method)": [[411, "sklearn.cluster.KMeans.set_output"]], "set_params() (sklearn.cluster.kmeans method)": [[411, "sklearn.cluster.KMeans.set_params"]], "set_predict_request() (sklearn.cluster.kmeans method)": [[411, "sklearn.cluster.KMeans.set_predict_request"]], "set_score_request() (sklearn.cluster.kmeans method)": [[411, "sklearn.cluster.KMeans.set_score_request"]], "transform() (sklearn.cluster.kmeans method)": [[411, "sklearn.cluster.KMeans.transform"]], "meanshift (class in sklearn.cluster)": [[412, "sklearn.cluster.MeanShift"]], "fit() (sklearn.cluster.meanshift method)": [[412, "sklearn.cluster.MeanShift.fit"]], "fit_predict() (sklearn.cluster.meanshift method)": [[412, "sklearn.cluster.MeanShift.fit_predict"]], "get_metadata_routing() (sklearn.cluster.meanshift method)": [[412, "sklearn.cluster.MeanShift.get_metadata_routing"]], "get_params() (sklearn.cluster.meanshift method)": [[412, "sklearn.cluster.MeanShift.get_params"]], "predict() (sklearn.cluster.meanshift method)": [[412, "sklearn.cluster.MeanShift.predict"]], "set_params() (sklearn.cluster.meanshift method)": [[412, "sklearn.cluster.MeanShift.set_params"]], "minibatchkmeans (class in sklearn.cluster)": [[413, "sklearn.cluster.MiniBatchKMeans"]], "fit() (sklearn.cluster.minibatchkmeans method)": [[413, "sklearn.cluster.MiniBatchKMeans.fit"]], "fit_predict() (sklearn.cluster.minibatchkmeans method)": [[413, "sklearn.cluster.MiniBatchKMeans.fit_predict"]], "fit_transform() (sklearn.cluster.minibatchkmeans method)": [[413, "sklearn.cluster.MiniBatchKMeans.fit_transform"]], "get_feature_names_out() (sklearn.cluster.minibatchkmeans method)": [[413, "sklearn.cluster.MiniBatchKMeans.get_feature_names_out"]], "get_metadata_routing() (sklearn.cluster.minibatchkmeans method)": [[413, "sklearn.cluster.MiniBatchKMeans.get_metadata_routing"]], "get_params() (sklearn.cluster.minibatchkmeans method)": [[413, "sklearn.cluster.MiniBatchKMeans.get_params"]], "partial_fit() (sklearn.cluster.minibatchkmeans method)": [[413, "sklearn.cluster.MiniBatchKMeans.partial_fit"]], "predict() (sklearn.cluster.minibatchkmeans method)": [[413, "sklearn.cluster.MiniBatchKMeans.predict"]], "score() (sklearn.cluster.minibatchkmeans method)": [[413, "sklearn.cluster.MiniBatchKMeans.score"]], "set_fit_request() (sklearn.cluster.minibatchkmeans method)": [[413, "sklearn.cluster.MiniBatchKMeans.set_fit_request"]], "set_output() (sklearn.cluster.minibatchkmeans method)": [[413, "sklearn.cluster.MiniBatchKMeans.set_output"]], "set_params() (sklearn.cluster.minibatchkmeans method)": [[413, "sklearn.cluster.MiniBatchKMeans.set_params"]], "set_partial_fit_request() (sklearn.cluster.minibatchkmeans method)": [[413, "sklearn.cluster.MiniBatchKMeans.set_partial_fit_request"]], "set_predict_request() (sklearn.cluster.minibatchkmeans method)": [[413, "sklearn.cluster.MiniBatchKMeans.set_predict_request"]], "set_score_request() (sklearn.cluster.minibatchkmeans method)": [[413, "sklearn.cluster.MiniBatchKMeans.set_score_request"]], "transform() (sklearn.cluster.minibatchkmeans method)": [[413, "sklearn.cluster.MiniBatchKMeans.transform"]], "optics (class in sklearn.cluster)": [[414, "sklearn.cluster.OPTICS"]], "fit() (sklearn.cluster.optics method)": [[414, "sklearn.cluster.OPTICS.fit"]], "fit_predict() (sklearn.cluster.optics method)": [[414, "sklearn.cluster.OPTICS.fit_predict"]], "get_metadata_routing() (sklearn.cluster.optics method)": [[414, "sklearn.cluster.OPTICS.get_metadata_routing"]], "get_params() (sklearn.cluster.optics method)": [[414, "sklearn.cluster.OPTICS.get_params"]], "set_params() (sklearn.cluster.optics method)": [[414, "sklearn.cluster.OPTICS.set_params"]], "spectralbiclustering (class in sklearn.cluster)": [[415, "sklearn.cluster.SpectralBiclustering"]], "biclusters_ (sklearn.cluster.spectralbiclustering property)": [[415, "sklearn.cluster.SpectralBiclustering.biclusters_"]], "fit() (sklearn.cluster.spectralbiclustering method)": [[415, "sklearn.cluster.SpectralBiclustering.fit"]], "get_indices() (sklearn.cluster.spectralbiclustering method)": [[415, "sklearn.cluster.SpectralBiclustering.get_indices"]], "get_metadata_routing() (sklearn.cluster.spectralbiclustering method)": [[415, "sklearn.cluster.SpectralBiclustering.get_metadata_routing"]], "get_params() (sklearn.cluster.spectralbiclustering method)": [[415, "sklearn.cluster.SpectralBiclustering.get_params"]], "get_shape() (sklearn.cluster.spectralbiclustering method)": [[415, "sklearn.cluster.SpectralBiclustering.get_shape"]], "get_submatrix() (sklearn.cluster.spectralbiclustering method)": [[415, "sklearn.cluster.SpectralBiclustering.get_submatrix"]], "set_params() (sklearn.cluster.spectralbiclustering method)": [[415, "sklearn.cluster.SpectralBiclustering.set_params"]], "spectralclustering (class in sklearn.cluster)": [[416, "sklearn.cluster.SpectralClustering"]], "fit() (sklearn.cluster.spectralclustering method)": [[416, "sklearn.cluster.SpectralClustering.fit"]], "fit_predict() (sklearn.cluster.spectralclustering method)": [[416, "sklearn.cluster.SpectralClustering.fit_predict"]], "get_metadata_routing() (sklearn.cluster.spectralclustering method)": [[416, "sklearn.cluster.SpectralClustering.get_metadata_routing"]], "get_params() (sklearn.cluster.spectralclustering method)": [[416, "sklearn.cluster.SpectralClustering.get_params"]], "set_params() (sklearn.cluster.spectralclustering method)": [[416, "sklearn.cluster.SpectralClustering.set_params"]], "spectralcoclustering (class in sklearn.cluster)": [[417, "sklearn.cluster.SpectralCoclustering"]], "biclusters_ (sklearn.cluster.spectralcoclustering property)": [[417, "sklearn.cluster.SpectralCoclustering.biclusters_"]], "fit() (sklearn.cluster.spectralcoclustering method)": [[417, "sklearn.cluster.SpectralCoclustering.fit"]], "get_indices() (sklearn.cluster.spectralcoclustering method)": [[417, "sklearn.cluster.SpectralCoclustering.get_indices"]], "get_metadata_routing() (sklearn.cluster.spectralcoclustering method)": [[417, "sklearn.cluster.SpectralCoclustering.get_metadata_routing"]], "get_params() (sklearn.cluster.spectralcoclustering method)": [[417, "sklearn.cluster.SpectralCoclustering.get_params"]], "get_shape() (sklearn.cluster.spectralcoclustering method)": [[417, "sklearn.cluster.SpectralCoclustering.get_shape"]], "get_submatrix() (sklearn.cluster.spectralcoclustering method)": [[417, "sklearn.cluster.SpectralCoclustering.get_submatrix"]], "set_params() (sklearn.cluster.spectralcoclustering method)": [[417, "sklearn.cluster.SpectralCoclustering.set_params"]], "affinity_propagation() (in module sklearn.cluster)": [[418, "sklearn.cluster.affinity_propagation"]], "cluster_optics_dbscan() (in module sklearn.cluster)": [[419, "sklearn.cluster.cluster_optics_dbscan"]], "cluster_optics_xi() (in module sklearn.cluster)": [[420, "sklearn.cluster.cluster_optics_xi"]], "compute_optics_graph() (in module sklearn.cluster)": [[421, "sklearn.cluster.compute_optics_graph"]], "estimate_bandwidth() (in module sklearn.cluster)": [[422, "sklearn.cluster.estimate_bandwidth"]], "k_means() (in module sklearn.cluster)": [[423, "sklearn.cluster.k_means"]], "kmeans_plusplus() (in module sklearn.cluster)": [[424, "sklearn.cluster.kmeans_plusplus"]], "mean_shift() (in module sklearn.cluster)": [[425, "sklearn.cluster.mean_shift"]], "spectral_clustering() (in module sklearn.cluster)": [[426, "sklearn.cluster.spectral_clustering"]], "ward_tree() (in module sklearn.cluster)": [[427, "sklearn.cluster.ward_tree"]], "columntransformer (class in sklearn.compose)": [[428, "sklearn.compose.ColumnTransformer"]], "fit() (sklearn.compose.columntransformer method)": [[428, "sklearn.compose.ColumnTransformer.fit"]], "fit_transform() (sklearn.compose.columntransformer method)": [[428, "sklearn.compose.ColumnTransformer.fit_transform"]], "get_feature_names_out() (sklearn.compose.columntransformer method)": [[428, "sklearn.compose.ColumnTransformer.get_feature_names_out"]], "get_metadata_routing() (sklearn.compose.columntransformer method)": [[428, "sklearn.compose.ColumnTransformer.get_metadata_routing"]], "get_params() (sklearn.compose.columntransformer method)": [[428, "sklearn.compose.ColumnTransformer.get_params"]], "named_transformers_ (sklearn.compose.columntransformer property)": [[428, "sklearn.compose.ColumnTransformer.named_transformers_"]], "set_output() (sklearn.compose.columntransformer method)": [[428, "sklearn.compose.ColumnTransformer.set_output"]], "set_params() (sklearn.compose.columntransformer method)": [[428, "sklearn.compose.ColumnTransformer.set_params"]], "transform() (sklearn.compose.columntransformer method)": [[428, "sklearn.compose.ColumnTransformer.transform"]], "transformedtargetregressor (class in sklearn.compose)": [[429, "sklearn.compose.TransformedTargetRegressor"]], "fit() (sklearn.compose.transformedtargetregressor method)": [[429, "sklearn.compose.TransformedTargetRegressor.fit"]], "get_metadata_routing() (sklearn.compose.transformedtargetregressor method)": [[429, "sklearn.compose.TransformedTargetRegressor.get_metadata_routing"]], "get_params() (sklearn.compose.transformedtargetregressor method)": [[429, "sklearn.compose.TransformedTargetRegressor.get_params"]], "n_features_in_ (sklearn.compose.transformedtargetregressor property)": [[429, "sklearn.compose.TransformedTargetRegressor.n_features_in_"]], "predict() (sklearn.compose.transformedtargetregressor method)": [[429, "sklearn.compose.TransformedTargetRegressor.predict"]], "score() (sklearn.compose.transformedtargetregressor method)": [[429, "sklearn.compose.TransformedTargetRegressor.score"]], "set_params() (sklearn.compose.transformedtargetregressor method)": [[429, "sklearn.compose.TransformedTargetRegressor.set_params"]], "set_score_request() (sklearn.compose.transformedtargetregressor method)": [[429, "sklearn.compose.TransformedTargetRegressor.set_score_request"]], "make_column_selector() (in module sklearn.compose)": [[430, "sklearn.compose.make_column_selector"]], "make_column_transformer() (in module sklearn.compose)": [[431, "sklearn.compose.make_column_transformer"]], "config_context() (in module sklearn)": [[432, "sklearn.config_context"]], "ellipticenvelope (class in sklearn.covariance)": [[433, "sklearn.covariance.EllipticEnvelope"]], "correct_covariance() (sklearn.covariance.ellipticenvelope method)": [[433, "sklearn.covariance.EllipticEnvelope.correct_covariance"]], "decision_function() (sklearn.covariance.ellipticenvelope method)": [[433, "sklearn.covariance.EllipticEnvelope.decision_function"]], "error_norm() (sklearn.covariance.ellipticenvelope method)": [[433, "sklearn.covariance.EllipticEnvelope.error_norm"]], "fit() (sklearn.covariance.ellipticenvelope method)": [[433, "sklearn.covariance.EllipticEnvelope.fit"]], "fit_predict() (sklearn.covariance.ellipticenvelope method)": [[433, "sklearn.covariance.EllipticEnvelope.fit_predict"]], "get_metadata_routing() (sklearn.covariance.ellipticenvelope method)": [[433, "sklearn.covariance.EllipticEnvelope.get_metadata_routing"]], "get_params() (sklearn.covariance.ellipticenvelope method)": [[433, "sklearn.covariance.EllipticEnvelope.get_params"]], "get_precision() (sklearn.covariance.ellipticenvelope method)": [[433, "sklearn.covariance.EllipticEnvelope.get_precision"]], "mahalanobis() (sklearn.covariance.ellipticenvelope method)": [[433, "sklearn.covariance.EllipticEnvelope.mahalanobis"]], "predict() (sklearn.covariance.ellipticenvelope method)": [[433, "sklearn.covariance.EllipticEnvelope.predict"]], "reweight_covariance() (sklearn.covariance.ellipticenvelope method)": [[433, "sklearn.covariance.EllipticEnvelope.reweight_covariance"]], "score() (sklearn.covariance.ellipticenvelope method)": [[433, "sklearn.covariance.EllipticEnvelope.score"]], "score_samples() (sklearn.covariance.ellipticenvelope method)": [[433, "sklearn.covariance.EllipticEnvelope.score_samples"]], "set_params() (sklearn.covariance.ellipticenvelope method)": [[433, "sklearn.covariance.EllipticEnvelope.set_params"]], "set_score_request() (sklearn.covariance.ellipticenvelope method)": [[433, "sklearn.covariance.EllipticEnvelope.set_score_request"]], "empiricalcovariance (class in sklearn.covariance)": [[434, "sklearn.covariance.EmpiricalCovariance"]], "error_norm() (sklearn.covariance.empiricalcovariance method)": [[434, "sklearn.covariance.EmpiricalCovariance.error_norm"]], "fit() (sklearn.covariance.empiricalcovariance method)": [[434, "sklearn.covariance.EmpiricalCovariance.fit"]], "get_metadata_routing() (sklearn.covariance.empiricalcovariance method)": [[434, "sklearn.covariance.EmpiricalCovariance.get_metadata_routing"]], "get_params() (sklearn.covariance.empiricalcovariance method)": [[434, "sklearn.covariance.EmpiricalCovariance.get_params"]], "get_precision() (sklearn.covariance.empiricalcovariance method)": [[434, "sklearn.covariance.EmpiricalCovariance.get_precision"]], "mahalanobis() (sklearn.covariance.empiricalcovariance method)": [[434, "sklearn.covariance.EmpiricalCovariance.mahalanobis"]], "score() (sklearn.covariance.empiricalcovariance method)": [[434, "sklearn.covariance.EmpiricalCovariance.score"]], "set_params() (sklearn.covariance.empiricalcovariance method)": [[434, "sklearn.covariance.EmpiricalCovariance.set_params"]], "set_score_request() (sklearn.covariance.empiricalcovariance method)": [[434, "sklearn.covariance.EmpiricalCovariance.set_score_request"]], "graphicallasso (class in sklearn.covariance)": [[435, "sklearn.covariance.GraphicalLasso"]], "error_norm() (sklearn.covariance.graphicallasso method)": [[435, "sklearn.covariance.GraphicalLasso.error_norm"]], "fit() (sklearn.covariance.graphicallasso method)": [[435, "sklearn.covariance.GraphicalLasso.fit"]], "get_metadata_routing() (sklearn.covariance.graphicallasso method)": [[435, "sklearn.covariance.GraphicalLasso.get_metadata_routing"]], "get_params() (sklearn.covariance.graphicallasso method)": [[435, "sklearn.covariance.GraphicalLasso.get_params"]], "get_precision() (sklearn.covariance.graphicallasso method)": [[435, "sklearn.covariance.GraphicalLasso.get_precision"]], "mahalanobis() (sklearn.covariance.graphicallasso method)": [[435, "sklearn.covariance.GraphicalLasso.mahalanobis"]], "score() (sklearn.covariance.graphicallasso method)": [[435, "sklearn.covariance.GraphicalLasso.score"]], "set_params() (sklearn.covariance.graphicallasso method)": [[435, "sklearn.covariance.GraphicalLasso.set_params"]], "set_score_request() (sklearn.covariance.graphicallasso method)": [[435, "sklearn.covariance.GraphicalLasso.set_score_request"]], "graphicallassocv (class in sklearn.covariance)": [[436, "sklearn.covariance.GraphicalLassoCV"]], "error_norm() (sklearn.covariance.graphicallassocv method)": [[436, "sklearn.covariance.GraphicalLassoCV.error_norm"]], "fit() (sklearn.covariance.graphicallassocv method)": [[436, "sklearn.covariance.GraphicalLassoCV.fit"]], "get_metadata_routing() (sklearn.covariance.graphicallassocv method)": [[436, "sklearn.covariance.GraphicalLassoCV.get_metadata_routing"]], "get_params() (sklearn.covariance.graphicallassocv method)": [[436, "sklearn.covariance.GraphicalLassoCV.get_params"]], "get_precision() (sklearn.covariance.graphicallassocv method)": [[436, "sklearn.covariance.GraphicalLassoCV.get_precision"]], "mahalanobis() (sklearn.covariance.graphicallassocv method)": [[436, "sklearn.covariance.GraphicalLassoCV.mahalanobis"]], "score() (sklearn.covariance.graphicallassocv method)": [[436, "sklearn.covariance.GraphicalLassoCV.score"]], "set_params() (sklearn.covariance.graphicallassocv method)": [[436, "sklearn.covariance.GraphicalLassoCV.set_params"]], "set_score_request() (sklearn.covariance.graphicallassocv method)": [[436, "sklearn.covariance.GraphicalLassoCV.set_score_request"]], "ledoitwolf (class in sklearn.covariance)": [[437, "sklearn.covariance.LedoitWolf"]], "error_norm() (sklearn.covariance.ledoitwolf method)": [[437, "sklearn.covariance.LedoitWolf.error_norm"]], "fit() (sklearn.covariance.ledoitwolf method)": [[437, "sklearn.covariance.LedoitWolf.fit"]], "get_metadata_routing() (sklearn.covariance.ledoitwolf method)": [[437, "sklearn.covariance.LedoitWolf.get_metadata_routing"]], "get_params() (sklearn.covariance.ledoitwolf method)": [[437, "sklearn.covariance.LedoitWolf.get_params"]], "get_precision() (sklearn.covariance.ledoitwolf method)": [[437, "sklearn.covariance.LedoitWolf.get_precision"]], "mahalanobis() (sklearn.covariance.ledoitwolf method)": [[437, "sklearn.covariance.LedoitWolf.mahalanobis"]], "score() (sklearn.covariance.ledoitwolf method)": [[437, "sklearn.covariance.LedoitWolf.score"]], "set_params() (sklearn.covariance.ledoitwolf method)": [[437, "sklearn.covariance.LedoitWolf.set_params"]], "set_score_request() (sklearn.covariance.ledoitwolf method)": [[437, "sklearn.covariance.LedoitWolf.set_score_request"]], "mincovdet (class in sklearn.covariance)": [[438, "sklearn.covariance.MinCovDet"]], "correct_covariance() (sklearn.covariance.mincovdet method)": [[438, "sklearn.covariance.MinCovDet.correct_covariance"]], "error_norm() (sklearn.covariance.mincovdet method)": [[438, "sklearn.covariance.MinCovDet.error_norm"]], "fit() (sklearn.covariance.mincovdet method)": [[438, "sklearn.covariance.MinCovDet.fit"]], "get_metadata_routing() (sklearn.covariance.mincovdet method)": [[438, "sklearn.covariance.MinCovDet.get_metadata_routing"]], "get_params() (sklearn.covariance.mincovdet method)": [[438, "sklearn.covariance.MinCovDet.get_params"]], "get_precision() (sklearn.covariance.mincovdet method)": [[438, "sklearn.covariance.MinCovDet.get_precision"]], "mahalanobis() (sklearn.covariance.mincovdet method)": [[438, "sklearn.covariance.MinCovDet.mahalanobis"]], "reweight_covariance() (sklearn.covariance.mincovdet method)": [[438, "sklearn.covariance.MinCovDet.reweight_covariance"]], "score() (sklearn.covariance.mincovdet method)": [[438, "sklearn.covariance.MinCovDet.score"]], "set_params() (sklearn.covariance.mincovdet method)": [[438, "sklearn.covariance.MinCovDet.set_params"]], "set_score_request() (sklearn.covariance.mincovdet method)": [[438, "sklearn.covariance.MinCovDet.set_score_request"]], "oas (class in sklearn.covariance)": [[439, "sklearn.covariance.OAS"]], "error_norm() (sklearn.covariance.oas method)": [[439, "sklearn.covariance.OAS.error_norm"]], "fit() (sklearn.covariance.oas method)": [[439, "sklearn.covariance.OAS.fit"]], "get_metadata_routing() (sklearn.covariance.oas method)": [[439, "sklearn.covariance.OAS.get_metadata_routing"]], "get_params() (sklearn.covariance.oas method)": [[439, "sklearn.covariance.OAS.get_params"]], "get_precision() (sklearn.covariance.oas method)": [[439, "sklearn.covariance.OAS.get_precision"]], "mahalanobis() (sklearn.covariance.oas method)": [[439, "sklearn.covariance.OAS.mahalanobis"]], "score() (sklearn.covariance.oas method)": [[439, "sklearn.covariance.OAS.score"]], "set_params() (sklearn.covariance.oas method)": [[439, "sklearn.covariance.OAS.set_params"]], "set_score_request() (sklearn.covariance.oas method)": [[439, "sklearn.covariance.OAS.set_score_request"]], "shrunkcovariance (class in sklearn.covariance)": [[440, "sklearn.covariance.ShrunkCovariance"]], "error_norm() (sklearn.covariance.shrunkcovariance method)": [[440, "sklearn.covariance.ShrunkCovariance.error_norm"]], "fit() (sklearn.covariance.shrunkcovariance method)": [[440, "sklearn.covariance.ShrunkCovariance.fit"]], "get_metadata_routing() (sklearn.covariance.shrunkcovariance method)": [[440, "sklearn.covariance.ShrunkCovariance.get_metadata_routing"]], "get_params() (sklearn.covariance.shrunkcovariance method)": [[440, "sklearn.covariance.ShrunkCovariance.get_params"]], "get_precision() (sklearn.covariance.shrunkcovariance method)": [[440, "sklearn.covariance.ShrunkCovariance.get_precision"]], "mahalanobis() (sklearn.covariance.shrunkcovariance method)": [[440, "sklearn.covariance.ShrunkCovariance.mahalanobis"]], "score() (sklearn.covariance.shrunkcovariance method)": [[440, "sklearn.covariance.ShrunkCovariance.score"]], "set_params() (sklearn.covariance.shrunkcovariance method)": [[440, "sklearn.covariance.ShrunkCovariance.set_params"]], "set_score_request() (sklearn.covariance.shrunkcovariance method)": [[440, "sklearn.covariance.ShrunkCovariance.set_score_request"]], "empirical_covariance() (in module sklearn.covariance)": [[441, "sklearn.covariance.empirical_covariance"]], "graphical_lasso() (in module sklearn.covariance)": [[442, "sklearn.covariance.graphical_lasso"]], "ledoit_wolf() (in module sklearn.covariance)": [[443, "sklearn.covariance.ledoit_wolf"]], "ledoit_wolf_shrinkage() (in module sklearn.covariance)": [[444, "sklearn.covariance.ledoit_wolf_shrinkage"]], "shrunk_covariance() (in module sklearn.covariance)": [[445, "sklearn.covariance.shrunk_covariance"]], "cca (class in sklearn.cross_decomposition)": [[446, "sklearn.cross_decomposition.CCA"]], "fit() (sklearn.cross_decomposition.cca method)": [[446, "sklearn.cross_decomposition.CCA.fit"]], "fit_transform() (sklearn.cross_decomposition.cca method)": [[446, "sklearn.cross_decomposition.CCA.fit_transform"]], "get_feature_names_out() (sklearn.cross_decomposition.cca method)": [[446, "sklearn.cross_decomposition.CCA.get_feature_names_out"]], "get_metadata_routing() (sklearn.cross_decomposition.cca method)": [[446, "sklearn.cross_decomposition.CCA.get_metadata_routing"]], "get_params() (sklearn.cross_decomposition.cca method)": [[446, "sklearn.cross_decomposition.CCA.get_params"]], "inverse_transform() (sklearn.cross_decomposition.cca method)": [[446, "sklearn.cross_decomposition.CCA.inverse_transform"]], "predict() (sklearn.cross_decomposition.cca method)": [[446, "sklearn.cross_decomposition.CCA.predict"]], "score() (sklearn.cross_decomposition.cca method)": [[446, "sklearn.cross_decomposition.CCA.score"]], "set_output() (sklearn.cross_decomposition.cca method)": [[446, "sklearn.cross_decomposition.CCA.set_output"]], "set_params() (sklearn.cross_decomposition.cca method)": [[446, "sklearn.cross_decomposition.CCA.set_params"]], "set_predict_request() (sklearn.cross_decomposition.cca method)": [[446, "sklearn.cross_decomposition.CCA.set_predict_request"]], "set_score_request() (sklearn.cross_decomposition.cca method)": [[446, "sklearn.cross_decomposition.CCA.set_score_request"]], "set_transform_request() (sklearn.cross_decomposition.cca method)": [[446, "sklearn.cross_decomposition.CCA.set_transform_request"]], "transform() (sklearn.cross_decomposition.cca method)": [[446, "sklearn.cross_decomposition.CCA.transform"]], "plscanonical (class in sklearn.cross_decomposition)": [[447, "sklearn.cross_decomposition.PLSCanonical"]], "fit() (sklearn.cross_decomposition.plscanonical method)": [[447, "sklearn.cross_decomposition.PLSCanonical.fit"]], "fit_transform() (sklearn.cross_decomposition.plscanonical method)": [[447, "sklearn.cross_decomposition.PLSCanonical.fit_transform"]], "get_feature_names_out() (sklearn.cross_decomposition.plscanonical method)": [[447, "sklearn.cross_decomposition.PLSCanonical.get_feature_names_out"]], "get_metadata_routing() (sklearn.cross_decomposition.plscanonical method)": [[447, "sklearn.cross_decomposition.PLSCanonical.get_metadata_routing"]], "get_params() (sklearn.cross_decomposition.plscanonical method)": [[447, "sklearn.cross_decomposition.PLSCanonical.get_params"]], "inverse_transform() (sklearn.cross_decomposition.plscanonical method)": [[447, "sklearn.cross_decomposition.PLSCanonical.inverse_transform"]], "predict() (sklearn.cross_decomposition.plscanonical method)": [[447, "sklearn.cross_decomposition.PLSCanonical.predict"]], "score() (sklearn.cross_decomposition.plscanonical method)": [[447, "sklearn.cross_decomposition.PLSCanonical.score"]], "set_output() (sklearn.cross_decomposition.plscanonical method)": [[447, "sklearn.cross_decomposition.PLSCanonical.set_output"]], "set_params() (sklearn.cross_decomposition.plscanonical method)": [[447, "sklearn.cross_decomposition.PLSCanonical.set_params"]], "set_predict_request() (sklearn.cross_decomposition.plscanonical method)": [[447, "sklearn.cross_decomposition.PLSCanonical.set_predict_request"]], "set_score_request() (sklearn.cross_decomposition.plscanonical method)": [[447, "sklearn.cross_decomposition.PLSCanonical.set_score_request"]], "set_transform_request() (sklearn.cross_decomposition.plscanonical method)": [[447, "sklearn.cross_decomposition.PLSCanonical.set_transform_request"]], "transform() (sklearn.cross_decomposition.plscanonical method)": [[447, "sklearn.cross_decomposition.PLSCanonical.transform"]], "plsregression (class in sklearn.cross_decomposition)": [[448, "sklearn.cross_decomposition.PLSRegression"]], "fit() (sklearn.cross_decomposition.plsregression method)": [[448, "sklearn.cross_decomposition.PLSRegression.fit"]], "fit_transform() (sklearn.cross_decomposition.plsregression method)": [[448, "sklearn.cross_decomposition.PLSRegression.fit_transform"]], "get_feature_names_out() (sklearn.cross_decomposition.plsregression method)": [[448, "sklearn.cross_decomposition.PLSRegression.get_feature_names_out"]], "get_metadata_routing() (sklearn.cross_decomposition.plsregression method)": [[448, "sklearn.cross_decomposition.PLSRegression.get_metadata_routing"]], "get_params() (sklearn.cross_decomposition.plsregression method)": [[448, "sklearn.cross_decomposition.PLSRegression.get_params"]], "inverse_transform() (sklearn.cross_decomposition.plsregression method)": [[448, "sklearn.cross_decomposition.PLSRegression.inverse_transform"]], "predict() (sklearn.cross_decomposition.plsregression method)": [[448, "sklearn.cross_decomposition.PLSRegression.predict"]], "score() (sklearn.cross_decomposition.plsregression method)": [[448, "sklearn.cross_decomposition.PLSRegression.score"]], "set_output() (sklearn.cross_decomposition.plsregression method)": [[448, "sklearn.cross_decomposition.PLSRegression.set_output"]], "set_params() (sklearn.cross_decomposition.plsregression method)": [[448, "sklearn.cross_decomposition.PLSRegression.set_params"]], "set_predict_request() (sklearn.cross_decomposition.plsregression method)": [[448, "sklearn.cross_decomposition.PLSRegression.set_predict_request"]], "set_score_request() (sklearn.cross_decomposition.plsregression method)": [[448, "sklearn.cross_decomposition.PLSRegression.set_score_request"]], "set_transform_request() (sklearn.cross_decomposition.plsregression method)": [[448, "sklearn.cross_decomposition.PLSRegression.set_transform_request"]], "transform() (sklearn.cross_decomposition.plsregression method)": [[448, "sklearn.cross_decomposition.PLSRegression.transform"]], "plssvd (class in sklearn.cross_decomposition)": [[449, "sklearn.cross_decomposition.PLSSVD"]], "fit() (sklearn.cross_decomposition.plssvd method)": [[449, "sklearn.cross_decomposition.PLSSVD.fit"]], "fit_transform() (sklearn.cross_decomposition.plssvd method)": [[449, "sklearn.cross_decomposition.PLSSVD.fit_transform"]], "get_feature_names_out() (sklearn.cross_decomposition.plssvd method)": [[449, "sklearn.cross_decomposition.PLSSVD.get_feature_names_out"]], "get_metadata_routing() (sklearn.cross_decomposition.plssvd method)": [[449, "sklearn.cross_decomposition.PLSSVD.get_metadata_routing"]], "get_params() (sklearn.cross_decomposition.plssvd method)": [[449, "sklearn.cross_decomposition.PLSSVD.get_params"]], "set_output() (sklearn.cross_decomposition.plssvd method)": [[449, "sklearn.cross_decomposition.PLSSVD.set_output"]], "set_params() (sklearn.cross_decomposition.plssvd method)": [[449, "sklearn.cross_decomposition.PLSSVD.set_params"]], "transform() (sklearn.cross_decomposition.plssvd method)": [[449, "sklearn.cross_decomposition.PLSSVD.transform"]], "clear_data_home() (in module sklearn.datasets)": [[450, "sklearn.datasets.clear_data_home"]], "dump_svmlight_file() (in module sklearn.datasets)": [[451, "sklearn.datasets.dump_svmlight_file"]], "fetch_20newsgroups() (in module sklearn.datasets)": [[452, "sklearn.datasets.fetch_20newsgroups"]], "fetch_20newsgroups_vectorized() (in module sklearn.datasets)": [[453, "sklearn.datasets.fetch_20newsgroups_vectorized"]], "fetch_california_housing() (in module sklearn.datasets)": [[454, "sklearn.datasets.fetch_california_housing"]], "fetch_covtype() (in module sklearn.datasets)": [[455, "sklearn.datasets.fetch_covtype"]], "fetch_kddcup99() (in module sklearn.datasets)": [[456, "sklearn.datasets.fetch_kddcup99"]], "fetch_lfw_pairs() (in module sklearn.datasets)": [[457, "sklearn.datasets.fetch_lfw_pairs"]], "fetch_lfw_people() (in module sklearn.datasets)": [[458, "sklearn.datasets.fetch_lfw_people"]], "fetch_olivetti_faces() (in module sklearn.datasets)": [[459, "sklearn.datasets.fetch_olivetti_faces"]], "fetch_openml() (in module sklearn.datasets)": [[460, "sklearn.datasets.fetch_openml"]], "fetch_rcv1() (in module sklearn.datasets)": [[461, "sklearn.datasets.fetch_rcv1"]], "fetch_species_distributions() (in module sklearn.datasets)": [[462, "sklearn.datasets.fetch_species_distributions"]], "get_data_home() (in module sklearn.datasets)": [[463, "sklearn.datasets.get_data_home"]], "load_breast_cancer() (in module sklearn.datasets)": [[464, "sklearn.datasets.load_breast_cancer"]], "load_diabetes() (in module sklearn.datasets)": [[465, "sklearn.datasets.load_diabetes"]], "load_digits() (in module sklearn.datasets)": [[466, "sklearn.datasets.load_digits"]], "load_files() (in module sklearn.datasets)": [[467, "sklearn.datasets.load_files"]], "load_iris() (in module sklearn.datasets)": [[468, "sklearn.datasets.load_iris"]], "load_linnerud() (in module sklearn.datasets)": [[469, "sklearn.datasets.load_linnerud"]], "load_sample_image() (in module sklearn.datasets)": [[470, "sklearn.datasets.load_sample_image"]], "load_sample_images() (in module sklearn.datasets)": [[471, "sklearn.datasets.load_sample_images"]], "load_svmlight_file() (in module sklearn.datasets)": [[472, "sklearn.datasets.load_svmlight_file"]], "load_svmlight_files() (in module sklearn.datasets)": [[473, "sklearn.datasets.load_svmlight_files"]], "load_wine() (in module sklearn.datasets)": [[474, "sklearn.datasets.load_wine"]], "make_biclusters() (in module sklearn.datasets)": [[475, "sklearn.datasets.make_biclusters"]], "make_blobs() (in module sklearn.datasets)": [[476, "sklearn.datasets.make_blobs"]], "make_checkerboard() (in module sklearn.datasets)": [[477, "sklearn.datasets.make_checkerboard"]], "make_circles() (in module sklearn.datasets)": [[478, "sklearn.datasets.make_circles"]], "make_classification() (in module sklearn.datasets)": [[479, "sklearn.datasets.make_classification"]], "make_friedman1() (in module sklearn.datasets)": [[480, "sklearn.datasets.make_friedman1"]], "make_friedman2() (in module sklearn.datasets)": [[481, "sklearn.datasets.make_friedman2"]], "make_friedman3() (in module sklearn.datasets)": [[482, "sklearn.datasets.make_friedman3"]], "make_gaussian_quantiles() (in module sklearn.datasets)": [[483, "sklearn.datasets.make_gaussian_quantiles"]], "make_hastie_10_2() (in module sklearn.datasets)": [[484, "sklearn.datasets.make_hastie_10_2"]], "make_low_rank_matrix() (in module sklearn.datasets)": [[485, "sklearn.datasets.make_low_rank_matrix"]], "make_moons() (in module sklearn.datasets)": [[486, "sklearn.datasets.make_moons"]], "make_multilabel_classification() (in module sklearn.datasets)": [[487, "sklearn.datasets.make_multilabel_classification"]], "make_regression() (in module sklearn.datasets)": [[488, "sklearn.datasets.make_regression"]], "make_s_curve() (in module sklearn.datasets)": [[489, "sklearn.datasets.make_s_curve"]], "make_sparse_coded_signal() (in module sklearn.datasets)": [[490, "sklearn.datasets.make_sparse_coded_signal"]], "make_sparse_spd_matrix() (in module sklearn.datasets)": [[491, "sklearn.datasets.make_sparse_spd_matrix"]], "make_sparse_uncorrelated() (in module sklearn.datasets)": [[492, "sklearn.datasets.make_sparse_uncorrelated"]], "make_spd_matrix() (in module sklearn.datasets)": [[493, "sklearn.datasets.make_spd_matrix"]], "make_swiss_roll() (in module sklearn.datasets)": [[494, "sklearn.datasets.make_swiss_roll"]], "dictionarylearning (class in sklearn.decomposition)": [[495, "sklearn.decomposition.DictionaryLearning"]], "fit() (sklearn.decomposition.dictionarylearning method)": [[495, "sklearn.decomposition.DictionaryLearning.fit"]], "fit_transform() (sklearn.decomposition.dictionarylearning method)": [[495, "sklearn.decomposition.DictionaryLearning.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.dictionarylearning method)": [[495, "sklearn.decomposition.DictionaryLearning.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.dictionarylearning method)": [[495, "sklearn.decomposition.DictionaryLearning.get_metadata_routing"]], "get_params() (sklearn.decomposition.dictionarylearning method)": [[495, "sklearn.decomposition.DictionaryLearning.get_params"]], "set_output() (sklearn.decomposition.dictionarylearning method)": [[495, "sklearn.decomposition.DictionaryLearning.set_output"]], "set_params() (sklearn.decomposition.dictionarylearning method)": [[495, "sklearn.decomposition.DictionaryLearning.set_params"]], "transform() (sklearn.decomposition.dictionarylearning method)": [[495, "sklearn.decomposition.DictionaryLearning.transform"]], "factoranalysis (class in sklearn.decomposition)": [[496, "sklearn.decomposition.FactorAnalysis"]], "fit() (sklearn.decomposition.factoranalysis method)": [[496, "sklearn.decomposition.FactorAnalysis.fit"]], "fit_transform() (sklearn.decomposition.factoranalysis method)": [[496, "sklearn.decomposition.FactorAnalysis.fit_transform"]], "get_covariance() (sklearn.decomposition.factoranalysis method)": [[496, "sklearn.decomposition.FactorAnalysis.get_covariance"]], "get_feature_names_out() (sklearn.decomposition.factoranalysis method)": [[496, "sklearn.decomposition.FactorAnalysis.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.factoranalysis method)": [[496, "sklearn.decomposition.FactorAnalysis.get_metadata_routing"]], "get_params() (sklearn.decomposition.factoranalysis method)": [[496, "sklearn.decomposition.FactorAnalysis.get_params"]], "get_precision() (sklearn.decomposition.factoranalysis method)": [[496, "sklearn.decomposition.FactorAnalysis.get_precision"]], "score() (sklearn.decomposition.factoranalysis method)": [[496, "sklearn.decomposition.FactorAnalysis.score"]], "score_samples() (sklearn.decomposition.factoranalysis method)": [[496, "sklearn.decomposition.FactorAnalysis.score_samples"]], "set_output() (sklearn.decomposition.factoranalysis method)": [[496, "sklearn.decomposition.FactorAnalysis.set_output"]], "set_params() (sklearn.decomposition.factoranalysis method)": [[496, "sklearn.decomposition.FactorAnalysis.set_params"]], "transform() (sklearn.decomposition.factoranalysis method)": [[496, "sklearn.decomposition.FactorAnalysis.transform"]], "fastica (class in sklearn.decomposition)": [[497, "sklearn.decomposition.FastICA"]], "fit() (sklearn.decomposition.fastica method)": [[497, "sklearn.decomposition.FastICA.fit"]], "fit_transform() (sklearn.decomposition.fastica method)": [[497, "sklearn.decomposition.FastICA.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.fastica method)": [[497, "sklearn.decomposition.FastICA.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.fastica method)": [[497, "sklearn.decomposition.FastICA.get_metadata_routing"]], "get_params() (sklearn.decomposition.fastica method)": [[497, "sklearn.decomposition.FastICA.get_params"]], "inverse_transform() (sklearn.decomposition.fastica method)": [[497, "sklearn.decomposition.FastICA.inverse_transform"]], "set_inverse_transform_request() (sklearn.decomposition.fastica method)": [[497, "sklearn.decomposition.FastICA.set_inverse_transform_request"]], "set_output() (sklearn.decomposition.fastica method)": [[497, "sklearn.decomposition.FastICA.set_output"]], "set_params() (sklearn.decomposition.fastica method)": [[497, "sklearn.decomposition.FastICA.set_params"]], "set_transform_request() (sklearn.decomposition.fastica method)": [[497, "sklearn.decomposition.FastICA.set_transform_request"]], "transform() (sklearn.decomposition.fastica method)": [[497, "sklearn.decomposition.FastICA.transform"]], "incrementalpca (class in sklearn.decomposition)": [[498, "sklearn.decomposition.IncrementalPCA"]], "fit() (sklearn.decomposition.incrementalpca method)": [[498, "sklearn.decomposition.IncrementalPCA.fit"]], "fit_transform() (sklearn.decomposition.incrementalpca method)": [[498, "sklearn.decomposition.IncrementalPCA.fit_transform"]], "get_covariance() (sklearn.decomposition.incrementalpca method)": [[498, "sklearn.decomposition.IncrementalPCA.get_covariance"]], "get_feature_names_out() (sklearn.decomposition.incrementalpca method)": [[498, "sklearn.decomposition.IncrementalPCA.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.incrementalpca method)": [[498, "sklearn.decomposition.IncrementalPCA.get_metadata_routing"]], "get_params() (sklearn.decomposition.incrementalpca method)": [[498, "sklearn.decomposition.IncrementalPCA.get_params"]], "get_precision() (sklearn.decomposition.incrementalpca method)": [[498, "sklearn.decomposition.IncrementalPCA.get_precision"]], "inverse_transform() (sklearn.decomposition.incrementalpca method)": [[498, "sklearn.decomposition.IncrementalPCA.inverse_transform"]], "partial_fit() (sklearn.decomposition.incrementalpca method)": [[498, "sklearn.decomposition.IncrementalPCA.partial_fit"]], "set_output() (sklearn.decomposition.incrementalpca method)": [[498, "sklearn.decomposition.IncrementalPCA.set_output"]], "set_params() (sklearn.decomposition.incrementalpca method)": [[498, "sklearn.decomposition.IncrementalPCA.set_params"]], "set_partial_fit_request() (sklearn.decomposition.incrementalpca method)": [[498, "sklearn.decomposition.IncrementalPCA.set_partial_fit_request"]], "transform() (sklearn.decomposition.incrementalpca method)": [[498, "sklearn.decomposition.IncrementalPCA.transform"]], "kernelpca (class in sklearn.decomposition)": [[499, "sklearn.decomposition.KernelPCA"]], "fit() (sklearn.decomposition.kernelpca method)": [[499, "sklearn.decomposition.KernelPCA.fit"]], "fit_transform() (sklearn.decomposition.kernelpca method)": [[499, "sklearn.decomposition.KernelPCA.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.kernelpca method)": [[499, "sklearn.decomposition.KernelPCA.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.kernelpca method)": [[499, "sklearn.decomposition.KernelPCA.get_metadata_routing"]], "get_params() (sklearn.decomposition.kernelpca method)": [[499, "sklearn.decomposition.KernelPCA.get_params"]], "inverse_transform() (sklearn.decomposition.kernelpca method)": [[499, "sklearn.decomposition.KernelPCA.inverse_transform"]], "set_output() (sklearn.decomposition.kernelpca method)": [[499, "sklearn.decomposition.KernelPCA.set_output"]], "set_params() (sklearn.decomposition.kernelpca method)": [[499, "sklearn.decomposition.KernelPCA.set_params"]], "transform() (sklearn.decomposition.kernelpca method)": [[499, "sklearn.decomposition.KernelPCA.transform"]], "latentdirichletallocation (class in sklearn.decomposition)": [[500, "sklearn.decomposition.LatentDirichletAllocation"]], "fit() (sklearn.decomposition.latentdirichletallocation method)": [[500, "sklearn.decomposition.LatentDirichletAllocation.fit"]], "fit_transform() (sklearn.decomposition.latentdirichletallocation method)": [[500, "sklearn.decomposition.LatentDirichletAllocation.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.latentdirichletallocation method)": [[500, "sklearn.decomposition.LatentDirichletAllocation.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.latentdirichletallocation method)": [[500, "sklearn.decomposition.LatentDirichletAllocation.get_metadata_routing"]], "get_params() (sklearn.decomposition.latentdirichletallocation method)": [[500, "sklearn.decomposition.LatentDirichletAllocation.get_params"]], "partial_fit() (sklearn.decomposition.latentdirichletallocation method)": [[500, "sklearn.decomposition.LatentDirichletAllocation.partial_fit"]], "perplexity() (sklearn.decomposition.latentdirichletallocation method)": [[500, "sklearn.decomposition.LatentDirichletAllocation.perplexity"]], "score() (sklearn.decomposition.latentdirichletallocation method)": [[500, "sklearn.decomposition.LatentDirichletAllocation.score"]], "set_output() (sklearn.decomposition.latentdirichletallocation method)": [[500, "sklearn.decomposition.LatentDirichletAllocation.set_output"]], "set_params() (sklearn.decomposition.latentdirichletallocation method)": [[500, "sklearn.decomposition.LatentDirichletAllocation.set_params"]], "transform() (sklearn.decomposition.latentdirichletallocation method)": [[500, "sklearn.decomposition.LatentDirichletAllocation.transform"]], "minibatchdictionarylearning (class in sklearn.decomposition)": [[501, "sklearn.decomposition.MiniBatchDictionaryLearning"]], "fit() (sklearn.decomposition.minibatchdictionarylearning method)": [[501, "sklearn.decomposition.MiniBatchDictionaryLearning.fit"]], "fit_transform() (sklearn.decomposition.minibatchdictionarylearning method)": [[501, "sklearn.decomposition.MiniBatchDictionaryLearning.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.minibatchdictionarylearning method)": [[501, "sklearn.decomposition.MiniBatchDictionaryLearning.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.minibatchdictionarylearning method)": [[501, "sklearn.decomposition.MiniBatchDictionaryLearning.get_metadata_routing"]], "get_params() (sklearn.decomposition.minibatchdictionarylearning method)": [[501, "sklearn.decomposition.MiniBatchDictionaryLearning.get_params"]], "partial_fit() (sklearn.decomposition.minibatchdictionarylearning method)": [[501, "sklearn.decomposition.MiniBatchDictionaryLearning.partial_fit"]], "set_output() (sklearn.decomposition.minibatchdictionarylearning method)": [[501, "sklearn.decomposition.MiniBatchDictionaryLearning.set_output"]], "set_params() (sklearn.decomposition.minibatchdictionarylearning method)": [[501, "sklearn.decomposition.MiniBatchDictionaryLearning.set_params"]], "transform() (sklearn.decomposition.minibatchdictionarylearning method)": [[501, "sklearn.decomposition.MiniBatchDictionaryLearning.transform"]], "minibatchnmf (class in sklearn.decomposition)": [[502, "sklearn.decomposition.MiniBatchNMF"]], "fit() (sklearn.decomposition.minibatchnmf method)": [[502, "sklearn.decomposition.MiniBatchNMF.fit"]], "fit_transform() (sklearn.decomposition.minibatchnmf method)": [[502, "sklearn.decomposition.MiniBatchNMF.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.minibatchnmf method)": [[502, "sklearn.decomposition.MiniBatchNMF.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.minibatchnmf method)": [[502, "sklearn.decomposition.MiniBatchNMF.get_metadata_routing"]], "get_params() (sklearn.decomposition.minibatchnmf method)": [[502, "sklearn.decomposition.MiniBatchNMF.get_params"]], "inverse_transform() (sklearn.decomposition.minibatchnmf method)": [[502, "sklearn.decomposition.MiniBatchNMF.inverse_transform"]], "partial_fit() (sklearn.decomposition.minibatchnmf method)": [[502, "sklearn.decomposition.MiniBatchNMF.partial_fit"]], "set_output() (sklearn.decomposition.minibatchnmf method)": [[502, "sklearn.decomposition.MiniBatchNMF.set_output"]], "set_params() (sklearn.decomposition.minibatchnmf method)": [[502, "sklearn.decomposition.MiniBatchNMF.set_params"]], "set_partial_fit_request() (sklearn.decomposition.minibatchnmf method)": [[502, "sklearn.decomposition.MiniBatchNMF.set_partial_fit_request"]], "transform() (sklearn.decomposition.minibatchnmf method)": [[502, "sklearn.decomposition.MiniBatchNMF.transform"]], "minibatchsparsepca (class in sklearn.decomposition)": [[503, "sklearn.decomposition.MiniBatchSparsePCA"]], "fit() (sklearn.decomposition.minibatchsparsepca method)": [[503, "sklearn.decomposition.MiniBatchSparsePCA.fit"]], "fit_transform() (sklearn.decomposition.minibatchsparsepca method)": [[503, "sklearn.decomposition.MiniBatchSparsePCA.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.minibatchsparsepca method)": [[503, "sklearn.decomposition.MiniBatchSparsePCA.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.minibatchsparsepca method)": [[503, "sklearn.decomposition.MiniBatchSparsePCA.get_metadata_routing"]], "get_params() (sklearn.decomposition.minibatchsparsepca method)": [[503, "sklearn.decomposition.MiniBatchSparsePCA.get_params"]], "inverse_transform() (sklearn.decomposition.minibatchsparsepca method)": [[503, "sklearn.decomposition.MiniBatchSparsePCA.inverse_transform"]], "set_output() (sklearn.decomposition.minibatchsparsepca method)": [[503, "sklearn.decomposition.MiniBatchSparsePCA.set_output"]], "set_params() (sklearn.decomposition.minibatchsparsepca method)": [[503, "sklearn.decomposition.MiniBatchSparsePCA.set_params"]], "transform() (sklearn.decomposition.minibatchsparsepca method)": [[503, "sklearn.decomposition.MiniBatchSparsePCA.transform"]], "nmf (class in sklearn.decomposition)": [[504, "sklearn.decomposition.NMF"]], "fit() (sklearn.decomposition.nmf method)": [[504, "sklearn.decomposition.NMF.fit"]], "fit_transform() (sklearn.decomposition.nmf method)": [[504, "sklearn.decomposition.NMF.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.nmf method)": [[504, "sklearn.decomposition.NMF.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.nmf method)": [[504, "sklearn.decomposition.NMF.get_metadata_routing"]], "get_params() (sklearn.decomposition.nmf method)": [[504, "sklearn.decomposition.NMF.get_params"]], "inverse_transform() (sklearn.decomposition.nmf method)": [[504, "sklearn.decomposition.NMF.inverse_transform"]], "set_output() (sklearn.decomposition.nmf method)": [[504, "sklearn.decomposition.NMF.set_output"]], "set_params() (sklearn.decomposition.nmf method)": [[504, "sklearn.decomposition.NMF.set_params"]], "transform() (sklearn.decomposition.nmf method)": [[504, "sklearn.decomposition.NMF.transform"]], "pca (class in sklearn.decomposition)": [[505, "sklearn.decomposition.PCA"]], "fit() (sklearn.decomposition.pca method)": [[505, "sklearn.decomposition.PCA.fit"]], "fit_transform() (sklearn.decomposition.pca method)": [[505, "sklearn.decomposition.PCA.fit_transform"]], "get_covariance() (sklearn.decomposition.pca method)": [[505, "sklearn.decomposition.PCA.get_covariance"]], "get_feature_names_out() (sklearn.decomposition.pca method)": [[505, "sklearn.decomposition.PCA.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.pca method)": [[505, "sklearn.decomposition.PCA.get_metadata_routing"]], "get_params() (sklearn.decomposition.pca method)": [[505, "sklearn.decomposition.PCA.get_params"]], "get_precision() (sklearn.decomposition.pca method)": [[505, "sklearn.decomposition.PCA.get_precision"]], "inverse_transform() (sklearn.decomposition.pca method)": [[505, "sklearn.decomposition.PCA.inverse_transform"]], "score() (sklearn.decomposition.pca method)": [[505, "sklearn.decomposition.PCA.score"]], "score_samples() (sklearn.decomposition.pca method)": [[505, "sklearn.decomposition.PCA.score_samples"]], "set_output() (sklearn.decomposition.pca method)": [[505, "sklearn.decomposition.PCA.set_output"]], "set_params() (sklearn.decomposition.pca method)": [[505, "sklearn.decomposition.PCA.set_params"]], "transform() (sklearn.decomposition.pca method)": [[505, "sklearn.decomposition.PCA.transform"]], "sparsecoder (class in sklearn.decomposition)": [[506, "sklearn.decomposition.SparseCoder"]], "fit() (sklearn.decomposition.sparsecoder method)": [[506, "sklearn.decomposition.SparseCoder.fit"]], "fit_transform() (sklearn.decomposition.sparsecoder method)": [[506, "sklearn.decomposition.SparseCoder.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.sparsecoder method)": [[506, "sklearn.decomposition.SparseCoder.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.sparsecoder method)": [[506, "sklearn.decomposition.SparseCoder.get_metadata_routing"]], "get_params() (sklearn.decomposition.sparsecoder method)": [[506, "sklearn.decomposition.SparseCoder.get_params"]], "n_components_ (sklearn.decomposition.sparsecoder property)": [[506, "sklearn.decomposition.SparseCoder.n_components_"]], "n_features_in_ (sklearn.decomposition.sparsecoder property)": [[506, "sklearn.decomposition.SparseCoder.n_features_in_"]], "set_output() (sklearn.decomposition.sparsecoder method)": [[506, "sklearn.decomposition.SparseCoder.set_output"]], "set_params() (sklearn.decomposition.sparsecoder method)": [[506, "sklearn.decomposition.SparseCoder.set_params"]], "transform() (sklearn.decomposition.sparsecoder method)": [[506, "sklearn.decomposition.SparseCoder.transform"]], "sparsepca (class in sklearn.decomposition)": [[507, "sklearn.decomposition.SparsePCA"]], "fit() (sklearn.decomposition.sparsepca method)": [[507, "sklearn.decomposition.SparsePCA.fit"]], "fit_transform() (sklearn.decomposition.sparsepca method)": [[507, "sklearn.decomposition.SparsePCA.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.sparsepca method)": [[507, "sklearn.decomposition.SparsePCA.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.sparsepca method)": [[507, "sklearn.decomposition.SparsePCA.get_metadata_routing"]], "get_params() (sklearn.decomposition.sparsepca method)": [[507, "sklearn.decomposition.SparsePCA.get_params"]], "inverse_transform() (sklearn.decomposition.sparsepca method)": [[507, "sklearn.decomposition.SparsePCA.inverse_transform"]], "set_output() (sklearn.decomposition.sparsepca method)": [[507, "sklearn.decomposition.SparsePCA.set_output"]], "set_params() (sklearn.decomposition.sparsepca method)": [[507, "sklearn.decomposition.SparsePCA.set_params"]], "transform() (sklearn.decomposition.sparsepca method)": [[507, "sklearn.decomposition.SparsePCA.transform"]], "truncatedsvd (class in sklearn.decomposition)": [[508, "sklearn.decomposition.TruncatedSVD"]], "fit() (sklearn.decomposition.truncatedsvd method)": [[508, "sklearn.decomposition.TruncatedSVD.fit"]], "fit_transform() (sklearn.decomposition.truncatedsvd method)": [[508, "sklearn.decomposition.TruncatedSVD.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.truncatedsvd method)": [[508, "sklearn.decomposition.TruncatedSVD.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.truncatedsvd method)": [[508, "sklearn.decomposition.TruncatedSVD.get_metadata_routing"]], "get_params() (sklearn.decomposition.truncatedsvd method)": [[508, "sklearn.decomposition.TruncatedSVD.get_params"]], "inverse_transform() (sklearn.decomposition.truncatedsvd method)": [[508, "sklearn.decomposition.TruncatedSVD.inverse_transform"]], "set_output() (sklearn.decomposition.truncatedsvd method)": [[508, "sklearn.decomposition.TruncatedSVD.set_output"]], "set_params() (sklearn.decomposition.truncatedsvd method)": [[508, "sklearn.decomposition.TruncatedSVD.set_params"]], "transform() (sklearn.decomposition.truncatedsvd method)": [[508, "sklearn.decomposition.TruncatedSVD.transform"]], "dict_learning() (in module sklearn.decomposition)": [[509, "sklearn.decomposition.dict_learning"]], "dict_learning_online() (in module sklearn.decomposition)": [[510, "sklearn.decomposition.dict_learning_online"]], "non_negative_factorization() (in module sklearn.decomposition)": [[511, "sklearn.decomposition.non_negative_factorization"]], "sparse_encode() (in module sklearn.decomposition)": [[512, "sklearn.decomposition.sparse_encode"]], "lineardiscriminantanalysis (class in sklearn.discriminant_analysis)": [[513, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis"]], "decision_function() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[513, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.decision_function"]], "fit() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[513, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit"]], "fit_transform() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[513, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit_transform"]], "get_feature_names_out() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[513, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_feature_names_out"]], "get_metadata_routing() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[513, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_metadata_routing"]], "get_params() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[513, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_params"]], "predict() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[513, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict"]], "predict_log_proba() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[513, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_log_proba"]], "predict_proba() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[513, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_proba"]], "score() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[513, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.score"]], "set_output() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[513, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_output"]], "set_params() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[513, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_params"]], "set_score_request() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[513, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_score_request"]], "transform() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[513, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.transform"]], "quadraticdiscriminantanalysis (class in sklearn.discriminant_analysis)": [[514, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis"]], "decision_function() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[514, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.decision_function"]], "fit() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[514, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.fit"]], "get_metadata_routing() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[514, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.get_metadata_routing"]], "get_params() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[514, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.get_params"]], "predict() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[514, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict"]], "predict_log_proba() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[514, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_log_proba"]], "predict_proba() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[514, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_proba"]], "score() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[514, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.score"]], "set_params() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[514, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.set_params"]], "set_score_request() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[514, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.set_score_request"]], "dummyclassifier (class in sklearn.dummy)": [[515, "sklearn.dummy.DummyClassifier"]], "fit() (sklearn.dummy.dummyclassifier method)": [[515, "sklearn.dummy.DummyClassifier.fit"]], "get_metadata_routing() (sklearn.dummy.dummyclassifier method)": [[515, "sklearn.dummy.DummyClassifier.get_metadata_routing"]], "get_params() (sklearn.dummy.dummyclassifier method)": [[515, "sklearn.dummy.DummyClassifier.get_params"]], "predict() (sklearn.dummy.dummyclassifier method)": [[515, "sklearn.dummy.DummyClassifier.predict"]], "predict_log_proba() (sklearn.dummy.dummyclassifier method)": [[515, "sklearn.dummy.DummyClassifier.predict_log_proba"]], "predict_proba() (sklearn.dummy.dummyclassifier method)": [[515, "sklearn.dummy.DummyClassifier.predict_proba"]], "score() (sklearn.dummy.dummyclassifier method)": [[515, "sklearn.dummy.DummyClassifier.score"]], "set_fit_request() (sklearn.dummy.dummyclassifier method)": [[515, "sklearn.dummy.DummyClassifier.set_fit_request"]], "set_params() (sklearn.dummy.dummyclassifier method)": [[515, "sklearn.dummy.DummyClassifier.set_params"]], "set_score_request() (sklearn.dummy.dummyclassifier method)": [[515, "sklearn.dummy.DummyClassifier.set_score_request"]], "dummyregressor (class in sklearn.dummy)": [[516, "sklearn.dummy.DummyRegressor"]], "fit() (sklearn.dummy.dummyregressor method)": [[516, "sklearn.dummy.DummyRegressor.fit"]], "get_metadata_routing() (sklearn.dummy.dummyregressor method)": [[516, "sklearn.dummy.DummyRegressor.get_metadata_routing"]], "get_params() (sklearn.dummy.dummyregressor method)": [[516, "sklearn.dummy.DummyRegressor.get_params"]], "predict() (sklearn.dummy.dummyregressor method)": [[516, "sklearn.dummy.DummyRegressor.predict"]], "score() (sklearn.dummy.dummyregressor method)": [[516, "sklearn.dummy.DummyRegressor.score"]], "set_fit_request() (sklearn.dummy.dummyregressor method)": [[516, "sklearn.dummy.DummyRegressor.set_fit_request"]], "set_params() (sklearn.dummy.dummyregressor method)": [[516, "sklearn.dummy.DummyRegressor.set_params"]], "set_predict_request() (sklearn.dummy.dummyregressor method)": [[516, "sklearn.dummy.DummyRegressor.set_predict_request"]], "set_score_request() (sklearn.dummy.dummyregressor method)": [[516, "sklearn.dummy.DummyRegressor.set_score_request"]], "adaboostclassifier (class in sklearn.ensemble)": [[517, "sklearn.ensemble.AdaBoostClassifier"]], "decision_function() (sklearn.ensemble.adaboostclassifier method)": [[517, "sklearn.ensemble.AdaBoostClassifier.decision_function"]], "feature_importances_ (sklearn.ensemble.adaboostclassifier property)": [[517, "sklearn.ensemble.AdaBoostClassifier.feature_importances_"]], "fit() (sklearn.ensemble.adaboostclassifier method)": [[517, "sklearn.ensemble.AdaBoostClassifier.fit"]], "get_metadata_routing() (sklearn.ensemble.adaboostclassifier method)": [[517, "sklearn.ensemble.AdaBoostClassifier.get_metadata_routing"]], "get_params() (sklearn.ensemble.adaboostclassifier method)": [[517, "sklearn.ensemble.AdaBoostClassifier.get_params"]], "predict() (sklearn.ensemble.adaboostclassifier method)": [[517, "sklearn.ensemble.AdaBoostClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.adaboostclassifier method)": [[517, "sklearn.ensemble.AdaBoostClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.adaboostclassifier method)": [[517, "sklearn.ensemble.AdaBoostClassifier.predict_proba"]], "score() (sklearn.ensemble.adaboostclassifier method)": [[517, "sklearn.ensemble.AdaBoostClassifier.score"]], "set_fit_request() (sklearn.ensemble.adaboostclassifier method)": [[517, "sklearn.ensemble.AdaBoostClassifier.set_fit_request"]], "set_params() (sklearn.ensemble.adaboostclassifier method)": [[517, "sklearn.ensemble.AdaBoostClassifier.set_params"]], "set_score_request() (sklearn.ensemble.adaboostclassifier method)": [[517, "sklearn.ensemble.AdaBoostClassifier.set_score_request"]], "staged_decision_function() (sklearn.ensemble.adaboostclassifier method)": [[517, "sklearn.ensemble.AdaBoostClassifier.staged_decision_function"]], "staged_predict() (sklearn.ensemble.adaboostclassifier method)": [[517, "sklearn.ensemble.AdaBoostClassifier.staged_predict"]], "staged_predict_proba() (sklearn.ensemble.adaboostclassifier method)": [[517, "sklearn.ensemble.AdaBoostClassifier.staged_predict_proba"]], "staged_score() (sklearn.ensemble.adaboostclassifier method)": [[517, "sklearn.ensemble.AdaBoostClassifier.staged_score"]], "adaboostregressor (class in sklearn.ensemble)": [[518, "sklearn.ensemble.AdaBoostRegressor"]], "feature_importances_ (sklearn.ensemble.adaboostregressor property)": [[518, "sklearn.ensemble.AdaBoostRegressor.feature_importances_"]], "fit() (sklearn.ensemble.adaboostregressor method)": [[518, "sklearn.ensemble.AdaBoostRegressor.fit"]], "get_metadata_routing() (sklearn.ensemble.adaboostregressor method)": [[518, "sklearn.ensemble.AdaBoostRegressor.get_metadata_routing"]], "get_params() (sklearn.ensemble.adaboostregressor method)": [[518, "sklearn.ensemble.AdaBoostRegressor.get_params"]], "predict() (sklearn.ensemble.adaboostregressor method)": [[518, "sklearn.ensemble.AdaBoostRegressor.predict"]], "score() (sklearn.ensemble.adaboostregressor method)": [[518, "sklearn.ensemble.AdaBoostRegressor.score"]], "set_fit_request() (sklearn.ensemble.adaboostregressor method)": [[518, "sklearn.ensemble.AdaBoostRegressor.set_fit_request"]], "set_params() (sklearn.ensemble.adaboostregressor method)": [[518, "sklearn.ensemble.AdaBoostRegressor.set_params"]], "set_score_request() (sklearn.ensemble.adaboostregressor method)": [[518, "sklearn.ensemble.AdaBoostRegressor.set_score_request"]], "staged_predict() (sklearn.ensemble.adaboostregressor method)": [[518, "sklearn.ensemble.AdaBoostRegressor.staged_predict"]], "staged_score() (sklearn.ensemble.adaboostregressor method)": [[518, "sklearn.ensemble.AdaBoostRegressor.staged_score"]], "baggingclassifier (class in sklearn.ensemble)": [[519, "sklearn.ensemble.BaggingClassifier"]], "decision_function() (sklearn.ensemble.baggingclassifier method)": [[519, "sklearn.ensemble.BaggingClassifier.decision_function"]], "estimators_samples_ (sklearn.ensemble.baggingclassifier property)": [[519, "sklearn.ensemble.BaggingClassifier.estimators_samples_"]], "fit() (sklearn.ensemble.baggingclassifier method)": [[519, "sklearn.ensemble.BaggingClassifier.fit"]], "get_metadata_routing() (sklearn.ensemble.baggingclassifier method)": [[519, "sklearn.ensemble.BaggingClassifier.get_metadata_routing"]], "get_params() (sklearn.ensemble.baggingclassifier method)": [[519, "sklearn.ensemble.BaggingClassifier.get_params"]], "predict() (sklearn.ensemble.baggingclassifier method)": [[519, "sklearn.ensemble.BaggingClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.baggingclassifier method)": [[519, "sklearn.ensemble.BaggingClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.baggingclassifier method)": [[519, "sklearn.ensemble.BaggingClassifier.predict_proba"]], "score() (sklearn.ensemble.baggingclassifier method)": [[519, "sklearn.ensemble.BaggingClassifier.score"]], "set_fit_request() (sklearn.ensemble.baggingclassifier method)": [[519, "sklearn.ensemble.BaggingClassifier.set_fit_request"]], "set_params() (sklearn.ensemble.baggingclassifier method)": [[519, "sklearn.ensemble.BaggingClassifier.set_params"]], "set_score_request() (sklearn.ensemble.baggingclassifier method)": [[519, "sklearn.ensemble.BaggingClassifier.set_score_request"]], "baggingregressor (class in sklearn.ensemble)": [[520, "sklearn.ensemble.BaggingRegressor"]], "estimators_samples_ (sklearn.ensemble.baggingregressor property)": [[520, "sklearn.ensemble.BaggingRegressor.estimators_samples_"]], "fit() (sklearn.ensemble.baggingregressor method)": [[520, "sklearn.ensemble.BaggingRegressor.fit"]], "get_metadata_routing() (sklearn.ensemble.baggingregressor method)": [[520, "sklearn.ensemble.BaggingRegressor.get_metadata_routing"]], "get_params() (sklearn.ensemble.baggingregressor method)": [[520, "sklearn.ensemble.BaggingRegressor.get_params"]], "predict() (sklearn.ensemble.baggingregressor method)": [[520, "sklearn.ensemble.BaggingRegressor.predict"]], "score() (sklearn.ensemble.baggingregressor method)": [[520, "sklearn.ensemble.BaggingRegressor.score"]], "set_fit_request() (sklearn.ensemble.baggingregressor method)": [[520, "sklearn.ensemble.BaggingRegressor.set_fit_request"]], "set_params() (sklearn.ensemble.baggingregressor method)": [[520, "sklearn.ensemble.BaggingRegressor.set_params"]], "set_score_request() (sklearn.ensemble.baggingregressor method)": [[520, "sklearn.ensemble.BaggingRegressor.set_score_request"]], "extratreesclassifier (class in sklearn.ensemble)": [[521, "sklearn.ensemble.ExtraTreesClassifier"]], "apply() (sklearn.ensemble.extratreesclassifier method)": [[521, "sklearn.ensemble.ExtraTreesClassifier.apply"]], "decision_path() (sklearn.ensemble.extratreesclassifier method)": [[521, "sklearn.ensemble.ExtraTreesClassifier.decision_path"]], "estimators_samples_ (sklearn.ensemble.extratreesclassifier property)": [[521, "sklearn.ensemble.ExtraTreesClassifier.estimators_samples_"]], "feature_importances_ (sklearn.ensemble.extratreesclassifier property)": [[521, "sklearn.ensemble.ExtraTreesClassifier.feature_importances_"]], "fit() (sklearn.ensemble.extratreesclassifier method)": [[521, "sklearn.ensemble.ExtraTreesClassifier.fit"]], "get_metadata_routing() (sklearn.ensemble.extratreesclassifier method)": [[521, "sklearn.ensemble.ExtraTreesClassifier.get_metadata_routing"]], "get_params() (sklearn.ensemble.extratreesclassifier method)": [[521, "sklearn.ensemble.ExtraTreesClassifier.get_params"]], "predict() (sklearn.ensemble.extratreesclassifier method)": [[521, "sklearn.ensemble.ExtraTreesClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.extratreesclassifier method)": [[521, "sklearn.ensemble.ExtraTreesClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.extratreesclassifier method)": [[521, "sklearn.ensemble.ExtraTreesClassifier.predict_proba"]], "score() (sklearn.ensemble.extratreesclassifier method)": [[521, "sklearn.ensemble.ExtraTreesClassifier.score"]], "set_fit_request() (sklearn.ensemble.extratreesclassifier method)": [[521, "sklearn.ensemble.ExtraTreesClassifier.set_fit_request"]], "set_params() (sklearn.ensemble.extratreesclassifier method)": [[521, "sklearn.ensemble.ExtraTreesClassifier.set_params"]], "set_score_request() (sklearn.ensemble.extratreesclassifier method)": [[521, "sklearn.ensemble.ExtraTreesClassifier.set_score_request"]], "extratreesregressor (class in sklearn.ensemble)": [[522, "sklearn.ensemble.ExtraTreesRegressor"]], "apply() (sklearn.ensemble.extratreesregressor method)": [[522, "sklearn.ensemble.ExtraTreesRegressor.apply"]], "decision_path() (sklearn.ensemble.extratreesregressor method)": [[522, "sklearn.ensemble.ExtraTreesRegressor.decision_path"]], "estimators_samples_ (sklearn.ensemble.extratreesregressor property)": [[522, "sklearn.ensemble.ExtraTreesRegressor.estimators_samples_"]], "feature_importances_ (sklearn.ensemble.extratreesregressor property)": [[522, "sklearn.ensemble.ExtraTreesRegressor.feature_importances_"]], "fit() (sklearn.ensemble.extratreesregressor method)": [[522, "sklearn.ensemble.ExtraTreesRegressor.fit"]], "get_metadata_routing() (sklearn.ensemble.extratreesregressor method)": [[522, "sklearn.ensemble.ExtraTreesRegressor.get_metadata_routing"]], "get_params() (sklearn.ensemble.extratreesregressor method)": [[522, "sklearn.ensemble.ExtraTreesRegressor.get_params"]], "predict() (sklearn.ensemble.extratreesregressor method)": [[522, "sklearn.ensemble.ExtraTreesRegressor.predict"]], "score() (sklearn.ensemble.extratreesregressor method)": [[522, "sklearn.ensemble.ExtraTreesRegressor.score"]], "set_fit_request() (sklearn.ensemble.extratreesregressor method)": [[522, "sklearn.ensemble.ExtraTreesRegressor.set_fit_request"]], "set_params() (sklearn.ensemble.extratreesregressor method)": [[522, "sklearn.ensemble.ExtraTreesRegressor.set_params"]], "set_score_request() (sklearn.ensemble.extratreesregressor method)": [[522, "sklearn.ensemble.ExtraTreesRegressor.set_score_request"]], "gradientboostingclassifier (class in sklearn.ensemble)": [[523, "sklearn.ensemble.GradientBoostingClassifier"]], "apply() (sklearn.ensemble.gradientboostingclassifier method)": [[523, "sklearn.ensemble.GradientBoostingClassifier.apply"]], "decision_function() (sklearn.ensemble.gradientboostingclassifier method)": [[523, "sklearn.ensemble.GradientBoostingClassifier.decision_function"]], "feature_importances_ (sklearn.ensemble.gradientboostingclassifier property)": [[523, "sklearn.ensemble.GradientBoostingClassifier.feature_importances_"]], "fit() (sklearn.ensemble.gradientboostingclassifier method)": [[523, "sklearn.ensemble.GradientBoostingClassifier.fit"]], "get_metadata_routing() (sklearn.ensemble.gradientboostingclassifier method)": [[523, "sklearn.ensemble.GradientBoostingClassifier.get_metadata_routing"]], "get_params() (sklearn.ensemble.gradientboostingclassifier method)": [[523, "sklearn.ensemble.GradientBoostingClassifier.get_params"]], "predict() (sklearn.ensemble.gradientboostingclassifier method)": [[523, "sklearn.ensemble.GradientBoostingClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[523, "sklearn.ensemble.GradientBoostingClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[523, "sklearn.ensemble.GradientBoostingClassifier.predict_proba"]], "score() (sklearn.ensemble.gradientboostingclassifier method)": [[523, "sklearn.ensemble.GradientBoostingClassifier.score"]], "set_fit_request() (sklearn.ensemble.gradientboostingclassifier method)": [[523, "sklearn.ensemble.GradientBoostingClassifier.set_fit_request"]], "set_params() (sklearn.ensemble.gradientboostingclassifier method)": [[523, "sklearn.ensemble.GradientBoostingClassifier.set_params"]], "set_score_request() (sklearn.ensemble.gradientboostingclassifier method)": [[523, "sklearn.ensemble.GradientBoostingClassifier.set_score_request"]], "staged_decision_function() (sklearn.ensemble.gradientboostingclassifier method)": [[523, "sklearn.ensemble.GradientBoostingClassifier.staged_decision_function"]], "staged_predict() (sklearn.ensemble.gradientboostingclassifier method)": [[523, "sklearn.ensemble.GradientBoostingClassifier.staged_predict"]], "staged_predict_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[523, "sklearn.ensemble.GradientBoostingClassifier.staged_predict_proba"]], "gradientboostingregressor (class in sklearn.ensemble)": [[524, "sklearn.ensemble.GradientBoostingRegressor"]], "apply() (sklearn.ensemble.gradientboostingregressor method)": [[524, "sklearn.ensemble.GradientBoostingRegressor.apply"]], "feature_importances_ (sklearn.ensemble.gradientboostingregressor property)": [[524, "sklearn.ensemble.GradientBoostingRegressor.feature_importances_"]], "fit() (sklearn.ensemble.gradientboostingregressor method)": [[524, "sklearn.ensemble.GradientBoostingRegressor.fit"]], "get_metadata_routing() (sklearn.ensemble.gradientboostingregressor method)": [[524, "sklearn.ensemble.GradientBoostingRegressor.get_metadata_routing"]], "get_params() (sklearn.ensemble.gradientboostingregressor method)": [[524, "sklearn.ensemble.GradientBoostingRegressor.get_params"]], "predict() (sklearn.ensemble.gradientboostingregressor method)": [[524, "sklearn.ensemble.GradientBoostingRegressor.predict"]], "score() (sklearn.ensemble.gradientboostingregressor method)": [[524, "sklearn.ensemble.GradientBoostingRegressor.score"]], "set_fit_request() (sklearn.ensemble.gradientboostingregressor method)": [[524, "sklearn.ensemble.GradientBoostingRegressor.set_fit_request"]], "set_params() (sklearn.ensemble.gradientboostingregressor method)": [[524, "sklearn.ensemble.GradientBoostingRegressor.set_params"]], "set_score_request() (sklearn.ensemble.gradientboostingregressor method)": [[524, "sklearn.ensemble.GradientBoostingRegressor.set_score_request"]], "staged_predict() (sklearn.ensemble.gradientboostingregressor method)": [[524, "sklearn.ensemble.GradientBoostingRegressor.staged_predict"]], "histgradientboostingclassifier (class in sklearn.ensemble)": [[525, "sklearn.ensemble.HistGradientBoostingClassifier"]], "decision_function() (sklearn.ensemble.histgradientboostingclassifier method)": [[525, "sklearn.ensemble.HistGradientBoostingClassifier.decision_function"]], "fit() (sklearn.ensemble.histgradientboostingclassifier method)": [[525, "sklearn.ensemble.HistGradientBoostingClassifier.fit"]], "get_metadata_routing() (sklearn.ensemble.histgradientboostingclassifier method)": [[525, "sklearn.ensemble.HistGradientBoostingClassifier.get_metadata_routing"]], "get_params() (sklearn.ensemble.histgradientboostingclassifier method)": [[525, "sklearn.ensemble.HistGradientBoostingClassifier.get_params"]], "n_iter_ (sklearn.ensemble.histgradientboostingclassifier property)": [[525, "sklearn.ensemble.HistGradientBoostingClassifier.n_iter_"]], "predict() (sklearn.ensemble.histgradientboostingclassifier method)": [[525, "sklearn.ensemble.HistGradientBoostingClassifier.predict"]], "predict_proba() (sklearn.ensemble.histgradientboostingclassifier method)": [[525, "sklearn.ensemble.HistGradientBoostingClassifier.predict_proba"]], "score() (sklearn.ensemble.histgradientboostingclassifier method)": [[525, "sklearn.ensemble.HistGradientBoostingClassifier.score"]], "set_fit_request() (sklearn.ensemble.histgradientboostingclassifier method)": [[525, "sklearn.ensemble.HistGradientBoostingClassifier.set_fit_request"]], "set_params() (sklearn.ensemble.histgradientboostingclassifier method)": [[525, "sklearn.ensemble.HistGradientBoostingClassifier.set_params"]], "set_score_request() (sklearn.ensemble.histgradientboostingclassifier method)": [[525, "sklearn.ensemble.HistGradientBoostingClassifier.set_score_request"]], "staged_decision_function() (sklearn.ensemble.histgradientboostingclassifier method)": [[525, "sklearn.ensemble.HistGradientBoostingClassifier.staged_decision_function"]], "staged_predict() (sklearn.ensemble.histgradientboostingclassifier method)": [[525, "sklearn.ensemble.HistGradientBoostingClassifier.staged_predict"]], "staged_predict_proba() (sklearn.ensemble.histgradientboostingclassifier method)": [[525, "sklearn.ensemble.HistGradientBoostingClassifier.staged_predict_proba"]], "histgradientboostingregressor (class in sklearn.ensemble)": [[526, "sklearn.ensemble.HistGradientBoostingRegressor"]], "fit() (sklearn.ensemble.histgradientboostingregressor method)": [[526, "sklearn.ensemble.HistGradientBoostingRegressor.fit"]], "get_metadata_routing() (sklearn.ensemble.histgradientboostingregressor method)": [[526, "sklearn.ensemble.HistGradientBoostingRegressor.get_metadata_routing"]], "get_params() (sklearn.ensemble.histgradientboostingregressor method)": [[526, "sklearn.ensemble.HistGradientBoostingRegressor.get_params"]], "n_iter_ (sklearn.ensemble.histgradientboostingregressor property)": [[526, "sklearn.ensemble.HistGradientBoostingRegressor.n_iter_"]], "predict() (sklearn.ensemble.histgradientboostingregressor method)": [[526, "sklearn.ensemble.HistGradientBoostingRegressor.predict"]], "score() (sklearn.ensemble.histgradientboostingregressor method)": [[526, "sklearn.ensemble.HistGradientBoostingRegressor.score"]], "set_fit_request() (sklearn.ensemble.histgradientboostingregressor method)": [[526, "sklearn.ensemble.HistGradientBoostingRegressor.set_fit_request"]], "set_params() (sklearn.ensemble.histgradientboostingregressor method)": [[526, "sklearn.ensemble.HistGradientBoostingRegressor.set_params"]], "set_score_request() (sklearn.ensemble.histgradientboostingregressor method)": [[526, "sklearn.ensemble.HistGradientBoostingRegressor.set_score_request"]], "staged_predict() (sklearn.ensemble.histgradientboostingregressor method)": [[526, "sklearn.ensemble.HistGradientBoostingRegressor.staged_predict"]], "isolationforest (class in sklearn.ensemble)": [[527, "sklearn.ensemble.IsolationForest"]], "decision_function() (sklearn.ensemble.isolationforest method)": [[527, "sklearn.ensemble.IsolationForest.decision_function"]], "estimators_samples_ (sklearn.ensemble.isolationforest property)": [[527, "sklearn.ensemble.IsolationForest.estimators_samples_"]], "fit() (sklearn.ensemble.isolationforest method)": [[527, "sklearn.ensemble.IsolationForest.fit"]], "fit_predict() (sklearn.ensemble.isolationforest method)": [[527, "sklearn.ensemble.IsolationForest.fit_predict"]], "get_metadata_routing() (sklearn.ensemble.isolationforest method)": [[527, "sklearn.ensemble.IsolationForest.get_metadata_routing"]], "get_params() (sklearn.ensemble.isolationforest method)": [[527, "sklearn.ensemble.IsolationForest.get_params"]], "predict() (sklearn.ensemble.isolationforest method)": [[527, "sklearn.ensemble.IsolationForest.predict"]], "score_samples() (sklearn.ensemble.isolationforest method)": [[527, "sklearn.ensemble.IsolationForest.score_samples"]], "set_fit_request() (sklearn.ensemble.isolationforest method)": [[527, "sklearn.ensemble.IsolationForest.set_fit_request"]], "set_params() (sklearn.ensemble.isolationforest method)": [[527, "sklearn.ensemble.IsolationForest.set_params"]], "randomforestclassifier (class in sklearn.ensemble)": [[528, "sklearn.ensemble.RandomForestClassifier"]], "apply() (sklearn.ensemble.randomforestclassifier method)": [[528, "sklearn.ensemble.RandomForestClassifier.apply"]], "decision_path() (sklearn.ensemble.randomforestclassifier method)": [[528, "sklearn.ensemble.RandomForestClassifier.decision_path"]], "estimators_samples_ (sklearn.ensemble.randomforestclassifier property)": [[528, "sklearn.ensemble.RandomForestClassifier.estimators_samples_"]], "feature_importances_ (sklearn.ensemble.randomforestclassifier property)": [[528, "sklearn.ensemble.RandomForestClassifier.feature_importances_"]], "fit() (sklearn.ensemble.randomforestclassifier method)": [[528, "sklearn.ensemble.RandomForestClassifier.fit"]], "get_metadata_routing() (sklearn.ensemble.randomforestclassifier method)": [[528, "sklearn.ensemble.RandomForestClassifier.get_metadata_routing"]], "get_params() (sklearn.ensemble.randomforestclassifier method)": [[528, "sklearn.ensemble.RandomForestClassifier.get_params"]], "predict() (sklearn.ensemble.randomforestclassifier method)": [[528, "sklearn.ensemble.RandomForestClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.randomforestclassifier method)": [[528, "sklearn.ensemble.RandomForestClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.randomforestclassifier method)": [[528, "sklearn.ensemble.RandomForestClassifier.predict_proba"]], "score() (sklearn.ensemble.randomforestclassifier method)": [[528, "sklearn.ensemble.RandomForestClassifier.score"]], "set_fit_request() (sklearn.ensemble.randomforestclassifier method)": [[528, "sklearn.ensemble.RandomForestClassifier.set_fit_request"]], "set_params() (sklearn.ensemble.randomforestclassifier method)": [[528, "sklearn.ensemble.RandomForestClassifier.set_params"]], "set_score_request() (sklearn.ensemble.randomforestclassifier method)": [[528, "sklearn.ensemble.RandomForestClassifier.set_score_request"]], "randomforestregressor (class in sklearn.ensemble)": [[529, "sklearn.ensemble.RandomForestRegressor"]], "apply() (sklearn.ensemble.randomforestregressor method)": [[529, "sklearn.ensemble.RandomForestRegressor.apply"]], "decision_path() (sklearn.ensemble.randomforestregressor method)": [[529, "sklearn.ensemble.RandomForestRegressor.decision_path"]], "estimators_samples_ (sklearn.ensemble.randomforestregressor property)": [[529, "sklearn.ensemble.RandomForestRegressor.estimators_samples_"]], "feature_importances_ (sklearn.ensemble.randomforestregressor property)": [[529, "sklearn.ensemble.RandomForestRegressor.feature_importances_"]], "fit() (sklearn.ensemble.randomforestregressor method)": [[529, "sklearn.ensemble.RandomForestRegressor.fit"]], "get_metadata_routing() (sklearn.ensemble.randomforestregressor method)": [[529, "sklearn.ensemble.RandomForestRegressor.get_metadata_routing"]], "get_params() (sklearn.ensemble.randomforestregressor method)": [[529, "sklearn.ensemble.RandomForestRegressor.get_params"]], "predict() (sklearn.ensemble.randomforestregressor method)": [[529, "sklearn.ensemble.RandomForestRegressor.predict"]], "score() (sklearn.ensemble.randomforestregressor method)": [[529, "sklearn.ensemble.RandomForestRegressor.score"]], "set_fit_request() (sklearn.ensemble.randomforestregressor method)": [[529, "sklearn.ensemble.RandomForestRegressor.set_fit_request"]], "set_params() (sklearn.ensemble.randomforestregressor method)": [[529, "sklearn.ensemble.RandomForestRegressor.set_params"]], "set_score_request() (sklearn.ensemble.randomforestregressor method)": [[529, "sklearn.ensemble.RandomForestRegressor.set_score_request"]], "randomtreesembedding (class in sklearn.ensemble)": [[530, "sklearn.ensemble.RandomTreesEmbedding"]], "apply() (sklearn.ensemble.randomtreesembedding method)": [[530, "sklearn.ensemble.RandomTreesEmbedding.apply"]], "decision_path() (sklearn.ensemble.randomtreesembedding method)": [[530, "sklearn.ensemble.RandomTreesEmbedding.decision_path"]], "estimators_samples_ (sklearn.ensemble.randomtreesembedding property)": [[530, "sklearn.ensemble.RandomTreesEmbedding.estimators_samples_"]], "feature_importances_ (sklearn.ensemble.randomtreesembedding property)": [[530, "sklearn.ensemble.RandomTreesEmbedding.feature_importances_"]], "fit() (sklearn.ensemble.randomtreesembedding method)": [[530, "sklearn.ensemble.RandomTreesEmbedding.fit"]], "fit_transform() (sklearn.ensemble.randomtreesembedding method)": [[530, "sklearn.ensemble.RandomTreesEmbedding.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.randomtreesembedding method)": [[530, "sklearn.ensemble.RandomTreesEmbedding.get_feature_names_out"]], "get_metadata_routing() (sklearn.ensemble.randomtreesembedding method)": [[530, "sklearn.ensemble.RandomTreesEmbedding.get_metadata_routing"]], "get_params() (sklearn.ensemble.randomtreesembedding method)": [[530, "sklearn.ensemble.RandomTreesEmbedding.get_params"]], "set_fit_request() (sklearn.ensemble.randomtreesembedding method)": [[530, "sklearn.ensemble.RandomTreesEmbedding.set_fit_request"]], "set_output() (sklearn.ensemble.randomtreesembedding method)": [[530, "sklearn.ensemble.RandomTreesEmbedding.set_output"]], "set_params() (sklearn.ensemble.randomtreesembedding method)": [[530, "sklearn.ensemble.RandomTreesEmbedding.set_params"]], "transform() (sklearn.ensemble.randomtreesembedding method)": [[530, "sklearn.ensemble.RandomTreesEmbedding.transform"]], "stackingclassifier (class in sklearn.ensemble)": [[531, "sklearn.ensemble.StackingClassifier"]], "decision_function() (sklearn.ensemble.stackingclassifier method)": [[531, "sklearn.ensemble.StackingClassifier.decision_function"]], "fit() (sklearn.ensemble.stackingclassifier method)": [[531, "sklearn.ensemble.StackingClassifier.fit"]], "fit_transform() (sklearn.ensemble.stackingclassifier method)": [[531, "sklearn.ensemble.StackingClassifier.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.stackingclassifier method)": [[531, "sklearn.ensemble.StackingClassifier.get_feature_names_out"]], "get_metadata_routing() (sklearn.ensemble.stackingclassifier method)": [[531, "sklearn.ensemble.StackingClassifier.get_metadata_routing"]], "get_params() (sklearn.ensemble.stackingclassifier method)": [[531, "sklearn.ensemble.StackingClassifier.get_params"]], "n_features_in_ (sklearn.ensemble.stackingclassifier property)": [[531, "sklearn.ensemble.StackingClassifier.n_features_in_"]], "named_estimators (sklearn.ensemble.stackingclassifier property)": [[531, "sklearn.ensemble.StackingClassifier.named_estimators"]], "predict() (sklearn.ensemble.stackingclassifier method)": [[531, "sklearn.ensemble.StackingClassifier.predict"]], "predict_proba() (sklearn.ensemble.stackingclassifier method)": [[531, "sklearn.ensemble.StackingClassifier.predict_proba"]], "score() (sklearn.ensemble.stackingclassifier method)": [[531, "sklearn.ensemble.StackingClassifier.score"]], "set_fit_request() (sklearn.ensemble.stackingclassifier method)": [[531, "sklearn.ensemble.StackingClassifier.set_fit_request"]], "set_output() (sklearn.ensemble.stackingclassifier method)": [[531, "sklearn.ensemble.StackingClassifier.set_output"]], "set_params() (sklearn.ensemble.stackingclassifier method)": [[531, "sklearn.ensemble.StackingClassifier.set_params"]], "set_score_request() (sklearn.ensemble.stackingclassifier method)": [[531, "sklearn.ensemble.StackingClassifier.set_score_request"]], "transform() (sklearn.ensemble.stackingclassifier method)": [[531, "sklearn.ensemble.StackingClassifier.transform"]], "stackingregressor (class in sklearn.ensemble)": [[532, "sklearn.ensemble.StackingRegressor"]], "fit() (sklearn.ensemble.stackingregressor method)": [[532, "sklearn.ensemble.StackingRegressor.fit"]], "fit_transform() (sklearn.ensemble.stackingregressor method)": [[532, "sklearn.ensemble.StackingRegressor.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.stackingregressor method)": [[532, "sklearn.ensemble.StackingRegressor.get_feature_names_out"]], "get_metadata_routing() (sklearn.ensemble.stackingregressor method)": [[532, "sklearn.ensemble.StackingRegressor.get_metadata_routing"]], "get_params() (sklearn.ensemble.stackingregressor method)": [[532, "sklearn.ensemble.StackingRegressor.get_params"]], "n_features_in_ (sklearn.ensemble.stackingregressor property)": [[532, "sklearn.ensemble.StackingRegressor.n_features_in_"]], "named_estimators (sklearn.ensemble.stackingregressor property)": [[532, "sklearn.ensemble.StackingRegressor.named_estimators"]], "predict() (sklearn.ensemble.stackingregressor method)": [[532, "sklearn.ensemble.StackingRegressor.predict"]], "score() (sklearn.ensemble.stackingregressor method)": [[532, "sklearn.ensemble.StackingRegressor.score"]], "set_fit_request() (sklearn.ensemble.stackingregressor method)": [[532, "sklearn.ensemble.StackingRegressor.set_fit_request"]], "set_output() (sklearn.ensemble.stackingregressor method)": [[532, "sklearn.ensemble.StackingRegressor.set_output"]], "set_params() (sklearn.ensemble.stackingregressor method)": [[532, "sklearn.ensemble.StackingRegressor.set_params"]], "set_score_request() (sklearn.ensemble.stackingregressor method)": [[532, "sklearn.ensemble.StackingRegressor.set_score_request"]], "transform() (sklearn.ensemble.stackingregressor method)": [[532, "sklearn.ensemble.StackingRegressor.transform"]], "votingclassifier (class in sklearn.ensemble)": [[533, "sklearn.ensemble.VotingClassifier"]], "fit() (sklearn.ensemble.votingclassifier method)": [[533, "sklearn.ensemble.VotingClassifier.fit"]], "fit_transform() (sklearn.ensemble.votingclassifier method)": [[533, "sklearn.ensemble.VotingClassifier.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.votingclassifier method)": [[533, "sklearn.ensemble.VotingClassifier.get_feature_names_out"]], "get_metadata_routing() (sklearn.ensemble.votingclassifier method)": [[533, "sklearn.ensemble.VotingClassifier.get_metadata_routing"]], "get_params() (sklearn.ensemble.votingclassifier method)": [[533, "sklearn.ensemble.VotingClassifier.get_params"]], "n_features_in_ (sklearn.ensemble.votingclassifier property)": [[533, "sklearn.ensemble.VotingClassifier.n_features_in_"]], "named_estimators (sklearn.ensemble.votingclassifier property)": [[533, "sklearn.ensemble.VotingClassifier.named_estimators"]], "predict() (sklearn.ensemble.votingclassifier method)": [[533, "sklearn.ensemble.VotingClassifier.predict"]], "predict_proba() (sklearn.ensemble.votingclassifier method)": [[533, "sklearn.ensemble.VotingClassifier.predict_proba"]], "score() (sklearn.ensemble.votingclassifier method)": [[533, "sklearn.ensemble.VotingClassifier.score"]], "set_fit_request() (sklearn.ensemble.votingclassifier method)": [[533, "sklearn.ensemble.VotingClassifier.set_fit_request"]], "set_output() (sklearn.ensemble.votingclassifier method)": [[533, "sklearn.ensemble.VotingClassifier.set_output"]], "set_params() (sklearn.ensemble.votingclassifier method)": [[533, "sklearn.ensemble.VotingClassifier.set_params"]], "set_score_request() (sklearn.ensemble.votingclassifier method)": [[533, "sklearn.ensemble.VotingClassifier.set_score_request"]], "transform() (sklearn.ensemble.votingclassifier method)": [[533, "sklearn.ensemble.VotingClassifier.transform"]], "votingregressor (class in sklearn.ensemble)": [[534, "sklearn.ensemble.VotingRegressor"]], "fit() (sklearn.ensemble.votingregressor method)": [[534, "sklearn.ensemble.VotingRegressor.fit"]], "fit_transform() (sklearn.ensemble.votingregressor method)": [[534, "sklearn.ensemble.VotingRegressor.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.votingregressor method)": [[534, "sklearn.ensemble.VotingRegressor.get_feature_names_out"]], "get_metadata_routing() (sklearn.ensemble.votingregressor method)": [[534, "sklearn.ensemble.VotingRegressor.get_metadata_routing"]], "get_params() (sklearn.ensemble.votingregressor method)": [[534, "sklearn.ensemble.VotingRegressor.get_params"]], "n_features_in_ (sklearn.ensemble.votingregressor property)": [[534, "sklearn.ensemble.VotingRegressor.n_features_in_"]], "named_estimators (sklearn.ensemble.votingregressor property)": [[534, "sklearn.ensemble.VotingRegressor.named_estimators"]], "predict() (sklearn.ensemble.votingregressor method)": [[534, "sklearn.ensemble.VotingRegressor.predict"]], "score() (sklearn.ensemble.votingregressor method)": [[534, "sklearn.ensemble.VotingRegressor.score"]], "set_fit_request() (sklearn.ensemble.votingregressor method)": [[534, "sklearn.ensemble.VotingRegressor.set_fit_request"]], "set_output() (sklearn.ensemble.votingregressor method)": [[534, "sklearn.ensemble.VotingRegressor.set_output"]], "set_params() (sklearn.ensemble.votingregressor method)": [[534, "sklearn.ensemble.VotingRegressor.set_params"]], "set_score_request() (sklearn.ensemble.votingregressor method)": [[534, "sklearn.ensemble.VotingRegressor.set_score_request"]], "transform() (sklearn.ensemble.votingregressor method)": [[534, "sklearn.ensemble.VotingRegressor.transform"]], "convergencewarning (class in sklearn.exceptions)": [[535, "sklearn.exceptions.ConvergenceWarning"]], "with_traceback() (sklearn.exceptions.convergencewarning method)": [[535, "sklearn.exceptions.ConvergenceWarning.with_traceback"]], "dataconversionwarning (class in sklearn.exceptions)": [[536, "sklearn.exceptions.DataConversionWarning"]], "with_traceback() (sklearn.exceptions.dataconversionwarning method)": [[536, "sklearn.exceptions.DataConversionWarning.with_traceback"]], "datadimensionalitywarning (class in sklearn.exceptions)": [[537, "sklearn.exceptions.DataDimensionalityWarning"]], "with_traceback() (sklearn.exceptions.datadimensionalitywarning method)": [[537, "sklearn.exceptions.DataDimensionalityWarning.with_traceback"]], "efficiencywarning (class in sklearn.exceptions)": [[538, "sklearn.exceptions.EfficiencyWarning"]], "with_traceback() (sklearn.exceptions.efficiencywarning method)": [[538, "sklearn.exceptions.EfficiencyWarning.with_traceback"]], "fitfailedwarning (class in sklearn.exceptions)": [[539, "sklearn.exceptions.FitFailedWarning"]], "with_traceback() (sklearn.exceptions.fitfailedwarning method)": [[539, "sklearn.exceptions.FitFailedWarning.with_traceback"]], "inconsistentversionwarning (class in sklearn.exceptions)": [[540, "sklearn.exceptions.InconsistentVersionWarning"]], "with_traceback() (sklearn.exceptions.inconsistentversionwarning method)": [[540, "sklearn.exceptions.InconsistentVersionWarning.with_traceback"]], "notfittederror (class in sklearn.exceptions)": [[541, "sklearn.exceptions.NotFittedError"]], "with_traceback() (sklearn.exceptions.notfittederror method)": [[541, "sklearn.exceptions.NotFittedError.with_traceback"]], "undefinedmetricwarning (class in sklearn.exceptions)": [[542, "sklearn.exceptions.UndefinedMetricWarning"]], "with_traceback() (sklearn.exceptions.undefinedmetricwarning method)": [[542, "sklearn.exceptions.UndefinedMetricWarning.with_traceback"]], "sklearn.experimental.enable_halving_search_cv": [[543, "module-sklearn.experimental.enable_halving_search_cv"]], "sklearn.experimental.enable_iterative_imputer": [[544, "module-sklearn.experimental.enable_iterative_imputer"]], "dictvectorizer (class in sklearn.feature_extraction)": [[545, "sklearn.feature_extraction.DictVectorizer"]], "fit() (sklearn.feature_extraction.dictvectorizer method)": [[545, "sklearn.feature_extraction.DictVectorizer.fit"]], "fit_transform() (sklearn.feature_extraction.dictvectorizer method)": [[545, "sklearn.feature_extraction.DictVectorizer.fit_transform"]], "get_feature_names_out() (sklearn.feature_extraction.dictvectorizer method)": [[545, "sklearn.feature_extraction.DictVectorizer.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_extraction.dictvectorizer method)": [[545, "sklearn.feature_extraction.DictVectorizer.get_metadata_routing"]], "get_params() (sklearn.feature_extraction.dictvectorizer method)": [[545, "sklearn.feature_extraction.DictVectorizer.get_params"]], "inverse_transform() (sklearn.feature_extraction.dictvectorizer method)": [[545, "sklearn.feature_extraction.DictVectorizer.inverse_transform"]], "restrict() (sklearn.feature_extraction.dictvectorizer method)": [[545, "sklearn.feature_extraction.DictVectorizer.restrict"]], "set_inverse_transform_request() (sklearn.feature_extraction.dictvectorizer method)": [[545, "sklearn.feature_extraction.DictVectorizer.set_inverse_transform_request"]], "set_output() (sklearn.feature_extraction.dictvectorizer method)": [[545, "sklearn.feature_extraction.DictVectorizer.set_output"]], "set_params() (sklearn.feature_extraction.dictvectorizer method)": [[545, "sklearn.feature_extraction.DictVectorizer.set_params"]], "transform() (sklearn.feature_extraction.dictvectorizer method)": [[545, "sklearn.feature_extraction.DictVectorizer.transform"]], "featurehasher (class in sklearn.feature_extraction)": [[546, "sklearn.feature_extraction.FeatureHasher"]], "fit() (sklearn.feature_extraction.featurehasher method)": [[546, "sklearn.feature_extraction.FeatureHasher.fit"]], "fit_transform() (sklearn.feature_extraction.featurehasher method)": [[546, "sklearn.feature_extraction.FeatureHasher.fit_transform"]], "get_metadata_routing() (sklearn.feature_extraction.featurehasher method)": [[546, "sklearn.feature_extraction.FeatureHasher.get_metadata_routing"]], "get_params() (sklearn.feature_extraction.featurehasher method)": [[546, "sklearn.feature_extraction.FeatureHasher.get_params"]], "set_output() (sklearn.feature_extraction.featurehasher method)": [[546, "sklearn.feature_extraction.FeatureHasher.set_output"]], "set_params() (sklearn.feature_extraction.featurehasher method)": [[546, "sklearn.feature_extraction.FeatureHasher.set_params"]], "set_transform_request() (sklearn.feature_extraction.featurehasher method)": [[546, "sklearn.feature_extraction.FeatureHasher.set_transform_request"]], "transform() (sklearn.feature_extraction.featurehasher method)": [[546, "sklearn.feature_extraction.FeatureHasher.transform"]], "patchextractor (class in sklearn.feature_extraction.image)": [[547, "sklearn.feature_extraction.image.PatchExtractor"]], "fit() (sklearn.feature_extraction.image.patchextractor method)": [[547, "sklearn.feature_extraction.image.PatchExtractor.fit"]], "fit_transform() (sklearn.feature_extraction.image.patchextractor method)": [[547, "sklearn.feature_extraction.image.PatchExtractor.fit_transform"]], "get_metadata_routing() (sklearn.feature_extraction.image.patchextractor method)": [[547, "sklearn.feature_extraction.image.PatchExtractor.get_metadata_routing"]], "get_params() (sklearn.feature_extraction.image.patchextractor method)": [[547, "sklearn.feature_extraction.image.PatchExtractor.get_params"]], "set_output() (sklearn.feature_extraction.image.patchextractor method)": [[547, "sklearn.feature_extraction.image.PatchExtractor.set_output"]], "set_params() (sklearn.feature_extraction.image.patchextractor method)": [[547, "sklearn.feature_extraction.image.PatchExtractor.set_params"]], "transform() (sklearn.feature_extraction.image.patchextractor method)": [[547, "sklearn.feature_extraction.image.PatchExtractor.transform"]], "extract_patches_2d() (in module sklearn.feature_extraction.image)": [[548, "sklearn.feature_extraction.image.extract_patches_2d"]], "grid_to_graph() (in module sklearn.feature_extraction.image)": [[549, "sklearn.feature_extraction.image.grid_to_graph"]], "img_to_graph() (in module sklearn.feature_extraction.image)": [[550, "sklearn.feature_extraction.image.img_to_graph"]], "reconstruct_from_patches_2d() (in module sklearn.feature_extraction.image)": [[551, "sklearn.feature_extraction.image.reconstruct_from_patches_2d"]], "countvectorizer (class in sklearn.feature_extraction.text)": [[552, "sklearn.feature_extraction.text.CountVectorizer"]], "build_analyzer() (sklearn.feature_extraction.text.countvectorizer method)": [[552, "sklearn.feature_extraction.text.CountVectorizer.build_analyzer"]], "build_preprocessor() (sklearn.feature_extraction.text.countvectorizer method)": [[552, "sklearn.feature_extraction.text.CountVectorizer.build_preprocessor"]], "build_tokenizer() (sklearn.feature_extraction.text.countvectorizer method)": [[552, "sklearn.feature_extraction.text.CountVectorizer.build_tokenizer"]], "decode() (sklearn.feature_extraction.text.countvectorizer method)": [[552, "sklearn.feature_extraction.text.CountVectorizer.decode"]], "fit() (sklearn.feature_extraction.text.countvectorizer method)": [[552, "sklearn.feature_extraction.text.CountVectorizer.fit"]], "fit_transform() (sklearn.feature_extraction.text.countvectorizer method)": [[552, "sklearn.feature_extraction.text.CountVectorizer.fit_transform"]], "get_feature_names_out() (sklearn.feature_extraction.text.countvectorizer method)": [[552, "sklearn.feature_extraction.text.CountVectorizer.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_extraction.text.countvectorizer method)": [[552, "sklearn.feature_extraction.text.CountVectorizer.get_metadata_routing"]], "get_params() (sklearn.feature_extraction.text.countvectorizer method)": [[552, "sklearn.feature_extraction.text.CountVectorizer.get_params"]], "get_stop_words() (sklearn.feature_extraction.text.countvectorizer method)": [[552, "sklearn.feature_extraction.text.CountVectorizer.get_stop_words"]], "inverse_transform() (sklearn.feature_extraction.text.countvectorizer method)": [[552, "sklearn.feature_extraction.text.CountVectorizer.inverse_transform"]], "set_fit_request() (sklearn.feature_extraction.text.countvectorizer method)": [[552, "sklearn.feature_extraction.text.CountVectorizer.set_fit_request"]], "set_params() (sklearn.feature_extraction.text.countvectorizer method)": [[552, "sklearn.feature_extraction.text.CountVectorizer.set_params"]], "set_transform_request() (sklearn.feature_extraction.text.countvectorizer method)": [[552, "sklearn.feature_extraction.text.CountVectorizer.set_transform_request"]], "transform() (sklearn.feature_extraction.text.countvectorizer method)": [[552, "sklearn.feature_extraction.text.CountVectorizer.transform"]], "hashingvectorizer (class in sklearn.feature_extraction.text)": [[553, "sklearn.feature_extraction.text.HashingVectorizer"]], "build_analyzer() (sklearn.feature_extraction.text.hashingvectorizer method)": [[553, "sklearn.feature_extraction.text.HashingVectorizer.build_analyzer"]], "build_preprocessor() (sklearn.feature_extraction.text.hashingvectorizer method)": [[553, "sklearn.feature_extraction.text.HashingVectorizer.build_preprocessor"]], "build_tokenizer() (sklearn.feature_extraction.text.hashingvectorizer method)": [[553, "sklearn.feature_extraction.text.HashingVectorizer.build_tokenizer"]], "decode() (sklearn.feature_extraction.text.hashingvectorizer method)": [[553, "sklearn.feature_extraction.text.HashingVectorizer.decode"]], "fit() (sklearn.feature_extraction.text.hashingvectorizer method)": [[553, "sklearn.feature_extraction.text.HashingVectorizer.fit"]], "fit_transform() (sklearn.feature_extraction.text.hashingvectorizer method)": [[553, "sklearn.feature_extraction.text.HashingVectorizer.fit_transform"]], "get_metadata_routing() (sklearn.feature_extraction.text.hashingvectorizer method)": [[553, "sklearn.feature_extraction.text.HashingVectorizer.get_metadata_routing"]], "get_params() (sklearn.feature_extraction.text.hashingvectorizer method)": [[553, "sklearn.feature_extraction.text.HashingVectorizer.get_params"]], "get_stop_words() (sklearn.feature_extraction.text.hashingvectorizer method)": [[553, "sklearn.feature_extraction.text.HashingVectorizer.get_stop_words"]], "partial_fit() (sklearn.feature_extraction.text.hashingvectorizer method)": [[553, "sklearn.feature_extraction.text.HashingVectorizer.partial_fit"]], "set_output() (sklearn.feature_extraction.text.hashingvectorizer method)": [[553, "sklearn.feature_extraction.text.HashingVectorizer.set_output"]], "set_params() (sklearn.feature_extraction.text.hashingvectorizer method)": [[553, "sklearn.feature_extraction.text.HashingVectorizer.set_params"]], "transform() (sklearn.feature_extraction.text.hashingvectorizer method)": [[553, "sklearn.feature_extraction.text.HashingVectorizer.transform"]], "tfidftransformer (class in sklearn.feature_extraction.text)": [[554, "sklearn.feature_extraction.text.TfidfTransformer"]], "fit() (sklearn.feature_extraction.text.tfidftransformer method)": [[554, "sklearn.feature_extraction.text.TfidfTransformer.fit"]], "fit_transform() (sklearn.feature_extraction.text.tfidftransformer method)": [[554, "sklearn.feature_extraction.text.TfidfTransformer.fit_transform"]], "get_feature_names_out() (sklearn.feature_extraction.text.tfidftransformer method)": [[554, "sklearn.feature_extraction.text.TfidfTransformer.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_extraction.text.tfidftransformer method)": [[554, "sklearn.feature_extraction.text.TfidfTransformer.get_metadata_routing"]], "get_params() (sklearn.feature_extraction.text.tfidftransformer method)": [[554, "sklearn.feature_extraction.text.TfidfTransformer.get_params"]], "set_output() (sklearn.feature_extraction.text.tfidftransformer method)": [[554, "sklearn.feature_extraction.text.TfidfTransformer.set_output"]], "set_params() (sklearn.feature_extraction.text.tfidftransformer method)": [[554, "sklearn.feature_extraction.text.TfidfTransformer.set_params"]], "set_transform_request() (sklearn.feature_extraction.text.tfidftransformer method)": [[554, "sklearn.feature_extraction.text.TfidfTransformer.set_transform_request"]], "transform() (sklearn.feature_extraction.text.tfidftransformer method)": [[554, "sklearn.feature_extraction.text.TfidfTransformer.transform"]], "tfidfvectorizer (class in sklearn.feature_extraction.text)": [[555, "sklearn.feature_extraction.text.TfidfVectorizer"]], "build_analyzer() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[555, "sklearn.feature_extraction.text.TfidfVectorizer.build_analyzer"]], "build_preprocessor() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[555, "sklearn.feature_extraction.text.TfidfVectorizer.build_preprocessor"]], "build_tokenizer() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[555, "sklearn.feature_extraction.text.TfidfVectorizer.build_tokenizer"]], "decode() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[555, "sklearn.feature_extraction.text.TfidfVectorizer.decode"]], "fit() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[555, "sklearn.feature_extraction.text.TfidfVectorizer.fit"]], "fit_transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[555, "sklearn.feature_extraction.text.TfidfVectorizer.fit_transform"]], "get_feature_names_out() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[555, "sklearn.feature_extraction.text.TfidfVectorizer.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[555, "sklearn.feature_extraction.text.TfidfVectorizer.get_metadata_routing"]], "get_params() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[555, "sklearn.feature_extraction.text.TfidfVectorizer.get_params"]], "get_stop_words() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[555, "sklearn.feature_extraction.text.TfidfVectorizer.get_stop_words"]], "idf_ (sklearn.feature_extraction.text.tfidfvectorizer property)": [[555, "sklearn.feature_extraction.text.TfidfVectorizer.idf_"]], "inverse_transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[555, "sklearn.feature_extraction.text.TfidfVectorizer.inverse_transform"]], "set_fit_request() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[555, "sklearn.feature_extraction.text.TfidfVectorizer.set_fit_request"]], "set_params() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[555, "sklearn.feature_extraction.text.TfidfVectorizer.set_params"]], "set_transform_request() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[555, "sklearn.feature_extraction.text.TfidfVectorizer.set_transform_request"]], "transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[555, "sklearn.feature_extraction.text.TfidfVectorizer.transform"]], "genericunivariateselect (class in sklearn.feature_selection)": [[556, "sklearn.feature_selection.GenericUnivariateSelect"]], "fit() (sklearn.feature_selection.genericunivariateselect method)": [[556, "sklearn.feature_selection.GenericUnivariateSelect.fit"]], "fit_transform() (sklearn.feature_selection.genericunivariateselect method)": [[556, "sklearn.feature_selection.GenericUnivariateSelect.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.genericunivariateselect method)": [[556, "sklearn.feature_selection.GenericUnivariateSelect.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.genericunivariateselect method)": [[556, "sklearn.feature_selection.GenericUnivariateSelect.get_metadata_routing"]], "get_params() (sklearn.feature_selection.genericunivariateselect method)": [[556, "sklearn.feature_selection.GenericUnivariateSelect.get_params"]], "get_support() (sklearn.feature_selection.genericunivariateselect method)": [[556, "sklearn.feature_selection.GenericUnivariateSelect.get_support"]], "inverse_transform() (sklearn.feature_selection.genericunivariateselect method)": [[556, "sklearn.feature_selection.GenericUnivariateSelect.inverse_transform"]], "set_output() (sklearn.feature_selection.genericunivariateselect method)": [[556, "sklearn.feature_selection.GenericUnivariateSelect.set_output"]], "set_params() (sklearn.feature_selection.genericunivariateselect method)": [[556, "sklearn.feature_selection.GenericUnivariateSelect.set_params"]], "transform() (sklearn.feature_selection.genericunivariateselect method)": [[556, "sklearn.feature_selection.GenericUnivariateSelect.transform"]], "rfe (class in sklearn.feature_selection)": [[557, "sklearn.feature_selection.RFE"]], "classes_ (sklearn.feature_selection.rfe property)": [[557, "sklearn.feature_selection.RFE.classes_"]], "decision_function() (sklearn.feature_selection.rfe method)": [[557, "sklearn.feature_selection.RFE.decision_function"]], "fit() (sklearn.feature_selection.rfe method)": [[557, "sklearn.feature_selection.RFE.fit"]], "fit_transform() (sklearn.feature_selection.rfe method)": [[557, "sklearn.feature_selection.RFE.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.rfe method)": [[557, "sklearn.feature_selection.RFE.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.rfe method)": [[557, "sklearn.feature_selection.RFE.get_metadata_routing"]], "get_params() (sklearn.feature_selection.rfe method)": [[557, "sklearn.feature_selection.RFE.get_params"]], "get_support() (sklearn.feature_selection.rfe method)": [[557, "sklearn.feature_selection.RFE.get_support"]], "inverse_transform() (sklearn.feature_selection.rfe method)": [[557, "sklearn.feature_selection.RFE.inverse_transform"]], "predict() (sklearn.feature_selection.rfe method)": [[557, "sklearn.feature_selection.RFE.predict"]], "predict_log_proba() (sklearn.feature_selection.rfe method)": [[557, "sklearn.feature_selection.RFE.predict_log_proba"]], "predict_proba() (sklearn.feature_selection.rfe method)": [[557, "sklearn.feature_selection.RFE.predict_proba"]], "score() (sklearn.feature_selection.rfe method)": [[557, "sklearn.feature_selection.RFE.score"]], "set_output() (sklearn.feature_selection.rfe method)": [[557, "sklearn.feature_selection.RFE.set_output"]], "set_params() (sklearn.feature_selection.rfe method)": [[557, "sklearn.feature_selection.RFE.set_params"]], "transform() (sklearn.feature_selection.rfe method)": [[557, "sklearn.feature_selection.RFE.transform"]], "rfecv (class in sklearn.feature_selection)": [[558, "sklearn.feature_selection.RFECV"]], "classes_ (sklearn.feature_selection.rfecv property)": [[558, "sklearn.feature_selection.RFECV.classes_"]], "decision_function() (sklearn.feature_selection.rfecv method)": [[558, "sklearn.feature_selection.RFECV.decision_function"]], "fit() (sklearn.feature_selection.rfecv method)": [[558, "sklearn.feature_selection.RFECV.fit"]], "fit_transform() (sklearn.feature_selection.rfecv method)": [[558, "sklearn.feature_selection.RFECV.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.rfecv method)": [[558, "sklearn.feature_selection.RFECV.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.rfecv method)": [[558, "sklearn.feature_selection.RFECV.get_metadata_routing"]], "get_params() (sklearn.feature_selection.rfecv method)": [[558, "sklearn.feature_selection.RFECV.get_params"]], "get_support() (sklearn.feature_selection.rfecv method)": [[558, "sklearn.feature_selection.RFECV.get_support"]], "inverse_transform() (sklearn.feature_selection.rfecv method)": [[558, "sklearn.feature_selection.RFECV.inverse_transform"]], "predict() (sklearn.feature_selection.rfecv method)": [[558, "sklearn.feature_selection.RFECV.predict"]], "predict_log_proba() (sklearn.feature_selection.rfecv method)": [[558, "sklearn.feature_selection.RFECV.predict_log_proba"]], "predict_proba() (sklearn.feature_selection.rfecv method)": [[558, "sklearn.feature_selection.RFECV.predict_proba"]], "score() (sklearn.feature_selection.rfecv method)": [[558, "sklearn.feature_selection.RFECV.score"]], "set_fit_request() (sklearn.feature_selection.rfecv method)": [[558, "sklearn.feature_selection.RFECV.set_fit_request"]], "set_output() (sklearn.feature_selection.rfecv method)": [[558, "sklearn.feature_selection.RFECV.set_output"]], "set_params() (sklearn.feature_selection.rfecv method)": [[558, "sklearn.feature_selection.RFECV.set_params"]], "transform() (sklearn.feature_selection.rfecv method)": [[558, "sklearn.feature_selection.RFECV.transform"]], "selectfdr (class in sklearn.feature_selection)": [[559, "sklearn.feature_selection.SelectFdr"]], "fit() (sklearn.feature_selection.selectfdr method)": [[559, "sklearn.feature_selection.SelectFdr.fit"]], "fit_transform() (sklearn.feature_selection.selectfdr method)": [[559, "sklearn.feature_selection.SelectFdr.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectfdr method)": [[559, "sklearn.feature_selection.SelectFdr.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.selectfdr method)": [[559, "sklearn.feature_selection.SelectFdr.get_metadata_routing"]], "get_params() (sklearn.feature_selection.selectfdr method)": [[559, "sklearn.feature_selection.SelectFdr.get_params"]], "get_support() (sklearn.feature_selection.selectfdr method)": [[559, "sklearn.feature_selection.SelectFdr.get_support"]], "inverse_transform() (sklearn.feature_selection.selectfdr method)": [[559, "sklearn.feature_selection.SelectFdr.inverse_transform"]], "set_output() (sklearn.feature_selection.selectfdr method)": [[559, "sklearn.feature_selection.SelectFdr.set_output"]], "set_params() (sklearn.feature_selection.selectfdr method)": [[559, "sklearn.feature_selection.SelectFdr.set_params"]], "transform() (sklearn.feature_selection.selectfdr method)": [[559, "sklearn.feature_selection.SelectFdr.transform"]], "selectfpr (class in sklearn.feature_selection)": [[560, "sklearn.feature_selection.SelectFpr"]], "fit() (sklearn.feature_selection.selectfpr method)": [[560, "sklearn.feature_selection.SelectFpr.fit"]], "fit_transform() (sklearn.feature_selection.selectfpr method)": [[560, "sklearn.feature_selection.SelectFpr.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectfpr method)": [[560, "sklearn.feature_selection.SelectFpr.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.selectfpr method)": [[560, "sklearn.feature_selection.SelectFpr.get_metadata_routing"]], "get_params() (sklearn.feature_selection.selectfpr method)": [[560, "sklearn.feature_selection.SelectFpr.get_params"]], "get_support() (sklearn.feature_selection.selectfpr method)": [[560, "sklearn.feature_selection.SelectFpr.get_support"]], "inverse_transform() (sklearn.feature_selection.selectfpr method)": [[560, "sklearn.feature_selection.SelectFpr.inverse_transform"]], "set_output() (sklearn.feature_selection.selectfpr method)": [[560, "sklearn.feature_selection.SelectFpr.set_output"]], "set_params() (sklearn.feature_selection.selectfpr method)": [[560, "sklearn.feature_selection.SelectFpr.set_params"]], "transform() (sklearn.feature_selection.selectfpr method)": [[560, "sklearn.feature_selection.SelectFpr.transform"]], "selectfrommodel (class in sklearn.feature_selection)": [[561, "sklearn.feature_selection.SelectFromModel"]], "fit() (sklearn.feature_selection.selectfrommodel method)": [[561, "sklearn.feature_selection.SelectFromModel.fit"]], "fit_transform() (sklearn.feature_selection.selectfrommodel method)": [[561, "sklearn.feature_selection.SelectFromModel.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectfrommodel method)": [[561, "sklearn.feature_selection.SelectFromModel.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.selectfrommodel method)": [[561, "sklearn.feature_selection.SelectFromModel.get_metadata_routing"]], "get_params() (sklearn.feature_selection.selectfrommodel method)": [[561, "sklearn.feature_selection.SelectFromModel.get_params"]], "get_support() (sklearn.feature_selection.selectfrommodel method)": [[561, "sklearn.feature_selection.SelectFromModel.get_support"]], "inverse_transform() (sklearn.feature_selection.selectfrommodel method)": [[561, "sklearn.feature_selection.SelectFromModel.inverse_transform"]], "n_features_in_ (sklearn.feature_selection.selectfrommodel property)": [[561, "sklearn.feature_selection.SelectFromModel.n_features_in_"]], "partial_fit() (sklearn.feature_selection.selectfrommodel method)": [[561, "sklearn.feature_selection.SelectFromModel.partial_fit"]], "set_output() (sklearn.feature_selection.selectfrommodel method)": [[561, "sklearn.feature_selection.SelectFromModel.set_output"]], "set_params() (sklearn.feature_selection.selectfrommodel method)": [[561, "sklearn.feature_selection.SelectFromModel.set_params"]], "threshold_ (sklearn.feature_selection.selectfrommodel property)": [[561, "sklearn.feature_selection.SelectFromModel.threshold_"]], "transform() (sklearn.feature_selection.selectfrommodel method)": [[561, "sklearn.feature_selection.SelectFromModel.transform"]], "selectfwe (class in sklearn.feature_selection)": [[562, "sklearn.feature_selection.SelectFwe"]], "fit() (sklearn.feature_selection.selectfwe method)": [[562, "sklearn.feature_selection.SelectFwe.fit"]], "fit_transform() (sklearn.feature_selection.selectfwe method)": [[562, "sklearn.feature_selection.SelectFwe.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectfwe method)": [[562, "sklearn.feature_selection.SelectFwe.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.selectfwe method)": [[562, "sklearn.feature_selection.SelectFwe.get_metadata_routing"]], "get_params() (sklearn.feature_selection.selectfwe method)": [[562, "sklearn.feature_selection.SelectFwe.get_params"]], "get_support() (sklearn.feature_selection.selectfwe method)": [[562, "sklearn.feature_selection.SelectFwe.get_support"]], "inverse_transform() (sklearn.feature_selection.selectfwe method)": [[562, "sklearn.feature_selection.SelectFwe.inverse_transform"]], "set_output() (sklearn.feature_selection.selectfwe method)": [[562, "sklearn.feature_selection.SelectFwe.set_output"]], "set_params() (sklearn.feature_selection.selectfwe method)": [[562, "sklearn.feature_selection.SelectFwe.set_params"]], "transform() (sklearn.feature_selection.selectfwe method)": [[562, "sklearn.feature_selection.SelectFwe.transform"]], "selectkbest (class in sklearn.feature_selection)": [[563, "sklearn.feature_selection.SelectKBest"]], "fit() (sklearn.feature_selection.selectkbest method)": [[563, "sklearn.feature_selection.SelectKBest.fit"]], "fit_transform() (sklearn.feature_selection.selectkbest method)": [[563, "sklearn.feature_selection.SelectKBest.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectkbest method)": [[563, "sklearn.feature_selection.SelectKBest.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.selectkbest method)": [[563, "sklearn.feature_selection.SelectKBest.get_metadata_routing"]], "get_params() (sklearn.feature_selection.selectkbest method)": [[563, "sklearn.feature_selection.SelectKBest.get_params"]], "get_support() (sklearn.feature_selection.selectkbest method)": [[563, "sklearn.feature_selection.SelectKBest.get_support"]], "inverse_transform() (sklearn.feature_selection.selectkbest method)": [[563, "sklearn.feature_selection.SelectKBest.inverse_transform"]], "set_output() (sklearn.feature_selection.selectkbest method)": [[563, "sklearn.feature_selection.SelectKBest.set_output"]], "set_params() (sklearn.feature_selection.selectkbest method)": [[563, "sklearn.feature_selection.SelectKBest.set_params"]], "transform() (sklearn.feature_selection.selectkbest method)": [[563, "sklearn.feature_selection.SelectKBest.transform"]], "selectpercentile (class in sklearn.feature_selection)": [[564, "sklearn.feature_selection.SelectPercentile"]], "fit() (sklearn.feature_selection.selectpercentile method)": [[564, "sklearn.feature_selection.SelectPercentile.fit"]], "fit_transform() (sklearn.feature_selection.selectpercentile method)": [[564, "sklearn.feature_selection.SelectPercentile.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectpercentile method)": [[564, "sklearn.feature_selection.SelectPercentile.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.selectpercentile method)": [[564, "sklearn.feature_selection.SelectPercentile.get_metadata_routing"]], "get_params() (sklearn.feature_selection.selectpercentile method)": [[564, "sklearn.feature_selection.SelectPercentile.get_params"]], "get_support() (sklearn.feature_selection.selectpercentile method)": [[564, "sklearn.feature_selection.SelectPercentile.get_support"]], "inverse_transform() (sklearn.feature_selection.selectpercentile method)": [[564, "sklearn.feature_selection.SelectPercentile.inverse_transform"]], "set_output() (sklearn.feature_selection.selectpercentile method)": [[564, "sklearn.feature_selection.SelectPercentile.set_output"]], "set_params() (sklearn.feature_selection.selectpercentile method)": [[564, "sklearn.feature_selection.SelectPercentile.set_params"]], "transform() (sklearn.feature_selection.selectpercentile method)": [[564, "sklearn.feature_selection.SelectPercentile.transform"]], "selectormixin (class in sklearn.feature_selection)": [[565, "sklearn.feature_selection.SelectorMixin"]], "fit_transform() (sklearn.feature_selection.selectormixin method)": [[565, "sklearn.feature_selection.SelectorMixin.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectormixin method)": [[565, "sklearn.feature_selection.SelectorMixin.get_feature_names_out"]], "get_support() (sklearn.feature_selection.selectormixin method)": [[565, "sklearn.feature_selection.SelectorMixin.get_support"]], "inverse_transform() (sklearn.feature_selection.selectormixin method)": [[565, "sklearn.feature_selection.SelectorMixin.inverse_transform"]], "set_output() (sklearn.feature_selection.selectormixin method)": [[565, "sklearn.feature_selection.SelectorMixin.set_output"]], "transform() (sklearn.feature_selection.selectormixin method)": [[565, "sklearn.feature_selection.SelectorMixin.transform"]], "sequentialfeatureselector (class in sklearn.feature_selection)": [[566, "sklearn.feature_selection.SequentialFeatureSelector"]], "fit() (sklearn.feature_selection.sequentialfeatureselector method)": [[566, "sklearn.feature_selection.SequentialFeatureSelector.fit"]], "fit_transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[566, "sklearn.feature_selection.SequentialFeatureSelector.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.sequentialfeatureselector method)": [[566, "sklearn.feature_selection.SequentialFeatureSelector.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.sequentialfeatureselector method)": [[566, "sklearn.feature_selection.SequentialFeatureSelector.get_metadata_routing"]], "get_params() (sklearn.feature_selection.sequentialfeatureselector method)": [[566, "sklearn.feature_selection.SequentialFeatureSelector.get_params"]], "get_support() (sklearn.feature_selection.sequentialfeatureselector method)": [[566, "sklearn.feature_selection.SequentialFeatureSelector.get_support"]], "inverse_transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[566, "sklearn.feature_selection.SequentialFeatureSelector.inverse_transform"]], "set_output() (sklearn.feature_selection.sequentialfeatureselector method)": [[566, "sklearn.feature_selection.SequentialFeatureSelector.set_output"]], "set_params() (sklearn.feature_selection.sequentialfeatureselector method)": [[566, "sklearn.feature_selection.SequentialFeatureSelector.set_params"]], "transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[566, "sklearn.feature_selection.SequentialFeatureSelector.transform"]], "variancethreshold (class in sklearn.feature_selection)": [[567, "sklearn.feature_selection.VarianceThreshold"]], "fit() (sklearn.feature_selection.variancethreshold method)": [[567, "sklearn.feature_selection.VarianceThreshold.fit"]], "fit_transform() (sklearn.feature_selection.variancethreshold method)": [[567, "sklearn.feature_selection.VarianceThreshold.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.variancethreshold method)": [[567, "sklearn.feature_selection.VarianceThreshold.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.variancethreshold method)": [[567, "sklearn.feature_selection.VarianceThreshold.get_metadata_routing"]], "get_params() (sklearn.feature_selection.variancethreshold method)": [[567, "sklearn.feature_selection.VarianceThreshold.get_params"]], "get_support() (sklearn.feature_selection.variancethreshold method)": [[567, "sklearn.feature_selection.VarianceThreshold.get_support"]], "inverse_transform() (sklearn.feature_selection.variancethreshold method)": [[567, "sklearn.feature_selection.VarianceThreshold.inverse_transform"]], "set_output() (sklearn.feature_selection.variancethreshold method)": [[567, "sklearn.feature_selection.VarianceThreshold.set_output"]], "set_params() (sklearn.feature_selection.variancethreshold method)": [[567, "sklearn.feature_selection.VarianceThreshold.set_params"]], "transform() (sklearn.feature_selection.variancethreshold method)": [[567, "sklearn.feature_selection.VarianceThreshold.transform"]], "chi2() (in module sklearn.feature_selection)": [[568, "sklearn.feature_selection.chi2"]], "f_classif() (in module sklearn.feature_selection)": [[569, "sklearn.feature_selection.f_classif"]], "f_regression() (in module sklearn.feature_selection)": [[570, "sklearn.feature_selection.f_regression"]], "mutual_info_classif() (in module sklearn.feature_selection)": [[571, "sklearn.feature_selection.mutual_info_classif"]], "mutual_info_regression() (in module sklearn.feature_selection)": [[572, "sklearn.feature_selection.mutual_info_regression"]], "r_regression() (in module sklearn.feature_selection)": [[573, "sklearn.feature_selection.r_regression"]], "gaussianprocessclassifier (class in sklearn.gaussian_process)": [[574, "sklearn.gaussian_process.GaussianProcessClassifier"]], "fit() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[574, "sklearn.gaussian_process.GaussianProcessClassifier.fit"]], "get_metadata_routing() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[574, "sklearn.gaussian_process.GaussianProcessClassifier.get_metadata_routing"]], "get_params() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[574, "sklearn.gaussian_process.GaussianProcessClassifier.get_params"]], "kernel_ (sklearn.gaussian_process.gaussianprocessclassifier property)": [[574, "sklearn.gaussian_process.GaussianProcessClassifier.kernel_"]], "log_marginal_likelihood() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[574, "sklearn.gaussian_process.GaussianProcessClassifier.log_marginal_likelihood"]], "predict() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[574, "sklearn.gaussian_process.GaussianProcessClassifier.predict"]], "predict_proba() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[574, "sklearn.gaussian_process.GaussianProcessClassifier.predict_proba"]], "score() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[574, "sklearn.gaussian_process.GaussianProcessClassifier.score"]], "set_params() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[574, "sklearn.gaussian_process.GaussianProcessClassifier.set_params"]], "set_score_request() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[574, "sklearn.gaussian_process.GaussianProcessClassifier.set_score_request"]], "gaussianprocessregressor (class in sklearn.gaussian_process)": [[575, "sklearn.gaussian_process.GaussianProcessRegressor"]], "fit() (sklearn.gaussian_process.gaussianprocessregressor method)": [[575, "sklearn.gaussian_process.GaussianProcessRegressor.fit"]], "get_metadata_routing() (sklearn.gaussian_process.gaussianprocessregressor method)": [[575, "sklearn.gaussian_process.GaussianProcessRegressor.get_metadata_routing"]], "get_params() (sklearn.gaussian_process.gaussianprocessregressor method)": [[575, "sklearn.gaussian_process.GaussianProcessRegressor.get_params"]], "log_marginal_likelihood() (sklearn.gaussian_process.gaussianprocessregressor method)": [[575, "sklearn.gaussian_process.GaussianProcessRegressor.log_marginal_likelihood"]], "predict() (sklearn.gaussian_process.gaussianprocessregressor method)": [[575, "sklearn.gaussian_process.GaussianProcessRegressor.predict"]], "sample_y() (sklearn.gaussian_process.gaussianprocessregressor method)": [[575, "sklearn.gaussian_process.GaussianProcessRegressor.sample_y"]], "score() (sklearn.gaussian_process.gaussianprocessregressor method)": [[575, "sklearn.gaussian_process.GaussianProcessRegressor.score"]], "set_params() (sklearn.gaussian_process.gaussianprocessregressor method)": [[575, "sklearn.gaussian_process.GaussianProcessRegressor.set_params"]], "set_predict_request() (sklearn.gaussian_process.gaussianprocessregressor method)": [[575, "sklearn.gaussian_process.GaussianProcessRegressor.set_predict_request"]], "set_score_request() (sklearn.gaussian_process.gaussianprocessregressor method)": [[575, "sklearn.gaussian_process.GaussianProcessRegressor.set_score_request"]], "compoundkernel (class in sklearn.gaussian_process.kernels)": [[576, "sklearn.gaussian_process.kernels.CompoundKernel"]], "__call__() (sklearn.gaussian_process.kernels.compoundkernel method)": [[576, "sklearn.gaussian_process.kernels.CompoundKernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.compoundkernel property)": [[576, "sklearn.gaussian_process.kernels.CompoundKernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.compoundkernel method)": [[576, "sklearn.gaussian_process.kernels.CompoundKernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.compoundkernel method)": [[576, "sklearn.gaussian_process.kernels.CompoundKernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.compoundkernel method)": [[576, "sklearn.gaussian_process.kernels.CompoundKernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.compoundkernel property)": [[576, "sklearn.gaussian_process.kernels.CompoundKernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.compoundkernel method)": [[576, "sklearn.gaussian_process.kernels.CompoundKernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.compoundkernel property)": [[576, "sklearn.gaussian_process.kernels.CompoundKernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.compoundkernel property)": [[576, "sklearn.gaussian_process.kernels.CompoundKernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.compoundkernel method)": [[576, "sklearn.gaussian_process.kernels.CompoundKernel.set_params"]], "theta (sklearn.gaussian_process.kernels.compoundkernel property)": [[576, "sklearn.gaussian_process.kernels.CompoundKernel.theta"]], "constantkernel (class in sklearn.gaussian_process.kernels)": [[577, "sklearn.gaussian_process.kernels.ConstantKernel"]], "__call__() (sklearn.gaussian_process.kernels.constantkernel method)": [[577, "sklearn.gaussian_process.kernels.ConstantKernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.constantkernel property)": [[577, "sklearn.gaussian_process.kernels.ConstantKernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.constantkernel method)": [[577, "sklearn.gaussian_process.kernels.ConstantKernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.constantkernel method)": [[577, "sklearn.gaussian_process.kernels.ConstantKernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.constantkernel method)": [[577, "sklearn.gaussian_process.kernels.ConstantKernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.constantkernel property)": [[577, "sklearn.gaussian_process.kernels.ConstantKernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.constantkernel method)": [[577, "sklearn.gaussian_process.kernels.ConstantKernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.constantkernel property)": [[577, "sklearn.gaussian_process.kernels.ConstantKernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.constantkernel property)": [[577, "sklearn.gaussian_process.kernels.ConstantKernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.constantkernel method)": [[577, "sklearn.gaussian_process.kernels.ConstantKernel.set_params"]], "theta (sklearn.gaussian_process.kernels.constantkernel property)": [[577, "sklearn.gaussian_process.kernels.ConstantKernel.theta"]], "dotproduct (class in sklearn.gaussian_process.kernels)": [[578, "sklearn.gaussian_process.kernels.DotProduct"]], "__call__() (sklearn.gaussian_process.kernels.dotproduct method)": [[578, "sklearn.gaussian_process.kernels.DotProduct.__call__"]], "bounds (sklearn.gaussian_process.kernels.dotproduct property)": [[578, "sklearn.gaussian_process.kernels.DotProduct.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.dotproduct method)": [[578, "sklearn.gaussian_process.kernels.DotProduct.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.dotproduct method)": [[578, "sklearn.gaussian_process.kernels.DotProduct.diag"]], "get_params() (sklearn.gaussian_process.kernels.dotproduct method)": [[578, "sklearn.gaussian_process.kernels.DotProduct.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.dotproduct property)": [[578, "sklearn.gaussian_process.kernels.DotProduct.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.dotproduct method)": [[578, "sklearn.gaussian_process.kernels.DotProduct.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.dotproduct property)": [[578, "sklearn.gaussian_process.kernels.DotProduct.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.dotproduct property)": [[578, "sklearn.gaussian_process.kernels.DotProduct.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.dotproduct method)": [[578, "sklearn.gaussian_process.kernels.DotProduct.set_params"]], "theta (sklearn.gaussian_process.kernels.dotproduct property)": [[578, "sklearn.gaussian_process.kernels.DotProduct.theta"]], "expsinesquared (class in sklearn.gaussian_process.kernels)": [[579, "sklearn.gaussian_process.kernels.ExpSineSquared"]], "__call__() (sklearn.gaussian_process.kernels.expsinesquared method)": [[579, "sklearn.gaussian_process.kernels.ExpSineSquared.__call__"]], "bounds (sklearn.gaussian_process.kernels.expsinesquared property)": [[579, "sklearn.gaussian_process.kernels.ExpSineSquared.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.expsinesquared method)": [[579, "sklearn.gaussian_process.kernels.ExpSineSquared.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.expsinesquared method)": [[579, "sklearn.gaussian_process.kernels.ExpSineSquared.diag"]], "get_params() (sklearn.gaussian_process.kernels.expsinesquared method)": [[579, "sklearn.gaussian_process.kernels.ExpSineSquared.get_params"]], "hyperparameter_length_scale (sklearn.gaussian_process.kernels.expsinesquared property)": [[579, "sklearn.gaussian_process.kernels.ExpSineSquared.hyperparameter_length_scale"]], "hyperparameters (sklearn.gaussian_process.kernels.expsinesquared property)": [[579, "sklearn.gaussian_process.kernels.ExpSineSquared.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.expsinesquared method)": [[579, "sklearn.gaussian_process.kernels.ExpSineSquared.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.expsinesquared property)": [[579, "sklearn.gaussian_process.kernels.ExpSineSquared.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.expsinesquared property)": [[579, "sklearn.gaussian_process.kernels.ExpSineSquared.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.expsinesquared method)": [[579, "sklearn.gaussian_process.kernels.ExpSineSquared.set_params"]], "theta (sklearn.gaussian_process.kernels.expsinesquared property)": [[579, "sklearn.gaussian_process.kernels.ExpSineSquared.theta"]], "exponentiation (class in sklearn.gaussian_process.kernels)": [[580, "sklearn.gaussian_process.kernels.Exponentiation"]], "__call__() (sklearn.gaussian_process.kernels.exponentiation method)": [[580, "sklearn.gaussian_process.kernels.Exponentiation.__call__"]], "bounds (sklearn.gaussian_process.kernels.exponentiation property)": [[580, "sklearn.gaussian_process.kernels.Exponentiation.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.exponentiation method)": [[580, "sklearn.gaussian_process.kernels.Exponentiation.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.exponentiation method)": [[580, "sklearn.gaussian_process.kernels.Exponentiation.diag"]], "get_params() (sklearn.gaussian_process.kernels.exponentiation method)": [[580, "sklearn.gaussian_process.kernels.Exponentiation.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.exponentiation property)": [[580, "sklearn.gaussian_process.kernels.Exponentiation.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.exponentiation method)": [[580, "sklearn.gaussian_process.kernels.Exponentiation.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.exponentiation property)": [[580, "sklearn.gaussian_process.kernels.Exponentiation.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.exponentiation property)": [[580, "sklearn.gaussian_process.kernels.Exponentiation.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.exponentiation method)": [[580, "sklearn.gaussian_process.kernels.Exponentiation.set_params"]], "theta (sklearn.gaussian_process.kernels.exponentiation property)": [[580, "sklearn.gaussian_process.kernels.Exponentiation.theta"]], "hyperparameter (class in sklearn.gaussian_process.kernels)": [[581, "sklearn.gaussian_process.kernels.Hyperparameter"]], "__call__() (sklearn.gaussian_process.kernels.hyperparameter method)": [[581, "sklearn.gaussian_process.kernels.Hyperparameter.__call__"]], "bounds (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[581, "sklearn.gaussian_process.kernels.Hyperparameter.bounds"]], "count() (sklearn.gaussian_process.kernels.hyperparameter method)": [[581, "sklearn.gaussian_process.kernels.Hyperparameter.count"]], "fixed (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[581, "sklearn.gaussian_process.kernels.Hyperparameter.fixed"]], "index() (sklearn.gaussian_process.kernels.hyperparameter method)": [[581, "sklearn.gaussian_process.kernels.Hyperparameter.index"]], "n_elements (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[581, "sklearn.gaussian_process.kernels.Hyperparameter.n_elements"]], "name (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[581, "sklearn.gaussian_process.kernels.Hyperparameter.name"]], "value_type (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[581, "sklearn.gaussian_process.kernels.Hyperparameter.value_type"]], "kernel (class in sklearn.gaussian_process.kernels)": [[582, "sklearn.gaussian_process.kernels.Kernel"]], "__call__() (sklearn.gaussian_process.kernels.kernel method)": [[582, "sklearn.gaussian_process.kernels.Kernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.kernel property)": [[582, "sklearn.gaussian_process.kernels.Kernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.kernel method)": [[582, "sklearn.gaussian_process.kernels.Kernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.kernel method)": [[582, "sklearn.gaussian_process.kernels.Kernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.kernel method)": [[582, "sklearn.gaussian_process.kernels.Kernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.kernel property)": [[582, "sklearn.gaussian_process.kernels.Kernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.kernel method)": [[582, "sklearn.gaussian_process.kernels.Kernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.kernel property)": [[582, "sklearn.gaussian_process.kernels.Kernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.kernel property)": [[582, "sklearn.gaussian_process.kernels.Kernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.kernel method)": [[582, "sklearn.gaussian_process.kernels.Kernel.set_params"]], "theta (sklearn.gaussian_process.kernels.kernel property)": [[582, "sklearn.gaussian_process.kernels.Kernel.theta"]], "matern (class in sklearn.gaussian_process.kernels)": [[583, "sklearn.gaussian_process.kernels.Matern"]], "__call__() (sklearn.gaussian_process.kernels.matern method)": [[583, "sklearn.gaussian_process.kernels.Matern.__call__"]], "bounds (sklearn.gaussian_process.kernels.matern property)": [[583, "sklearn.gaussian_process.kernels.Matern.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.matern method)": [[583, "sklearn.gaussian_process.kernels.Matern.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.matern method)": [[583, "sklearn.gaussian_process.kernels.Matern.diag"]], "get_params() (sklearn.gaussian_process.kernels.matern method)": [[583, "sklearn.gaussian_process.kernels.Matern.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.matern property)": [[583, "sklearn.gaussian_process.kernels.Matern.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.matern method)": [[583, "sklearn.gaussian_process.kernels.Matern.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.matern property)": [[583, "sklearn.gaussian_process.kernels.Matern.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.matern property)": [[583, "sklearn.gaussian_process.kernels.Matern.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.matern method)": [[583, "sklearn.gaussian_process.kernels.Matern.set_params"]], "theta (sklearn.gaussian_process.kernels.matern property)": [[583, "sklearn.gaussian_process.kernels.Matern.theta"]], "pairwisekernel (class in sklearn.gaussian_process.kernels)": [[584, "sklearn.gaussian_process.kernels.PairwiseKernel"]], "__call__() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[584, "sklearn.gaussian_process.kernels.PairwiseKernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.pairwisekernel property)": [[584, "sklearn.gaussian_process.kernels.PairwiseKernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[584, "sklearn.gaussian_process.kernels.PairwiseKernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[584, "sklearn.gaussian_process.kernels.PairwiseKernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[584, "sklearn.gaussian_process.kernels.PairwiseKernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.pairwisekernel property)": [[584, "sklearn.gaussian_process.kernels.PairwiseKernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[584, "sklearn.gaussian_process.kernels.PairwiseKernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.pairwisekernel property)": [[584, "sklearn.gaussian_process.kernels.PairwiseKernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.pairwisekernel property)": [[584, "sklearn.gaussian_process.kernels.PairwiseKernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[584, "sklearn.gaussian_process.kernels.PairwiseKernel.set_params"]], "theta (sklearn.gaussian_process.kernels.pairwisekernel property)": [[584, "sklearn.gaussian_process.kernels.PairwiseKernel.theta"]], "product (class in sklearn.gaussian_process.kernels)": [[585, "sklearn.gaussian_process.kernels.Product"]], "__call__() (sklearn.gaussian_process.kernels.product method)": [[585, "sklearn.gaussian_process.kernels.Product.__call__"]], "bounds (sklearn.gaussian_process.kernels.product property)": [[585, "sklearn.gaussian_process.kernels.Product.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.product method)": [[585, "sklearn.gaussian_process.kernels.Product.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.product method)": [[585, "sklearn.gaussian_process.kernels.Product.diag"]], "get_params() (sklearn.gaussian_process.kernels.product method)": [[585, "sklearn.gaussian_process.kernels.Product.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.product property)": [[585, "sklearn.gaussian_process.kernels.Product.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.product method)": [[585, "sklearn.gaussian_process.kernels.Product.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.product property)": [[585, "sklearn.gaussian_process.kernels.Product.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.product property)": [[585, "sklearn.gaussian_process.kernels.Product.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.product method)": [[585, "sklearn.gaussian_process.kernels.Product.set_params"]], "theta (sklearn.gaussian_process.kernels.product property)": [[585, "sklearn.gaussian_process.kernels.Product.theta"]], "rbf (class in sklearn.gaussian_process.kernels)": [[586, "sklearn.gaussian_process.kernels.RBF"]], "__call__() (sklearn.gaussian_process.kernels.rbf method)": [[586, "sklearn.gaussian_process.kernels.RBF.__call__"]], "bounds (sklearn.gaussian_process.kernels.rbf property)": [[586, "sklearn.gaussian_process.kernels.RBF.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.rbf method)": [[586, "sklearn.gaussian_process.kernels.RBF.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.rbf method)": [[586, "sklearn.gaussian_process.kernels.RBF.diag"]], "get_params() (sklearn.gaussian_process.kernels.rbf method)": [[586, "sklearn.gaussian_process.kernels.RBF.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.rbf property)": [[586, "sklearn.gaussian_process.kernels.RBF.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.rbf method)": [[586, "sklearn.gaussian_process.kernels.RBF.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.rbf property)": [[586, "sklearn.gaussian_process.kernels.RBF.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.rbf property)": [[586, "sklearn.gaussian_process.kernels.RBF.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.rbf method)": [[586, "sklearn.gaussian_process.kernels.RBF.set_params"]], "theta (sklearn.gaussian_process.kernels.rbf property)": [[586, "sklearn.gaussian_process.kernels.RBF.theta"]], "rationalquadratic (class in sklearn.gaussian_process.kernels)": [[587, "sklearn.gaussian_process.kernels.RationalQuadratic"]], "__call__() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[587, "sklearn.gaussian_process.kernels.RationalQuadratic.__call__"]], "bounds (sklearn.gaussian_process.kernels.rationalquadratic property)": [[587, "sklearn.gaussian_process.kernels.RationalQuadratic.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[587, "sklearn.gaussian_process.kernels.RationalQuadratic.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[587, "sklearn.gaussian_process.kernels.RationalQuadratic.diag"]], "get_params() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[587, "sklearn.gaussian_process.kernels.RationalQuadratic.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.rationalquadratic property)": [[587, "sklearn.gaussian_process.kernels.RationalQuadratic.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[587, "sklearn.gaussian_process.kernels.RationalQuadratic.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.rationalquadratic property)": [[587, "sklearn.gaussian_process.kernels.RationalQuadratic.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.rationalquadratic property)": [[587, "sklearn.gaussian_process.kernels.RationalQuadratic.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[587, "sklearn.gaussian_process.kernels.RationalQuadratic.set_params"]], "theta (sklearn.gaussian_process.kernels.rationalquadratic property)": [[587, "sklearn.gaussian_process.kernels.RationalQuadratic.theta"]], "sum (class in sklearn.gaussian_process.kernels)": [[588, "sklearn.gaussian_process.kernels.Sum"]], "__call__() (sklearn.gaussian_process.kernels.sum method)": [[588, "sklearn.gaussian_process.kernels.Sum.__call__"]], "bounds (sklearn.gaussian_process.kernels.sum property)": [[588, "sklearn.gaussian_process.kernels.Sum.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.sum method)": [[588, "sklearn.gaussian_process.kernels.Sum.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.sum method)": [[588, "sklearn.gaussian_process.kernels.Sum.diag"]], "get_params() (sklearn.gaussian_process.kernels.sum method)": [[588, "sklearn.gaussian_process.kernels.Sum.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.sum property)": [[588, "sklearn.gaussian_process.kernels.Sum.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.sum method)": [[588, "sklearn.gaussian_process.kernels.Sum.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.sum property)": [[588, "sklearn.gaussian_process.kernels.Sum.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.sum property)": [[588, "sklearn.gaussian_process.kernels.Sum.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.sum method)": [[588, "sklearn.gaussian_process.kernels.Sum.set_params"]], "theta (sklearn.gaussian_process.kernels.sum property)": [[588, "sklearn.gaussian_process.kernels.Sum.theta"]], "whitekernel (class in sklearn.gaussian_process.kernels)": [[589, "sklearn.gaussian_process.kernels.WhiteKernel"]], "__call__() (sklearn.gaussian_process.kernels.whitekernel method)": [[589, "sklearn.gaussian_process.kernels.WhiteKernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.whitekernel property)": [[589, "sklearn.gaussian_process.kernels.WhiteKernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.whitekernel method)": [[589, "sklearn.gaussian_process.kernels.WhiteKernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.whitekernel method)": [[589, "sklearn.gaussian_process.kernels.WhiteKernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.whitekernel method)": [[589, "sklearn.gaussian_process.kernels.WhiteKernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.whitekernel property)": [[589, "sklearn.gaussian_process.kernels.WhiteKernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.whitekernel method)": [[589, "sklearn.gaussian_process.kernels.WhiteKernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.whitekernel property)": [[589, "sklearn.gaussian_process.kernels.WhiteKernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.whitekernel property)": [[589, "sklearn.gaussian_process.kernels.WhiteKernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.whitekernel method)": [[589, "sklearn.gaussian_process.kernels.WhiteKernel.set_params"]], "theta (sklearn.gaussian_process.kernels.whitekernel property)": [[589, "sklearn.gaussian_process.kernels.WhiteKernel.theta"]], "get_config() (in module sklearn)": [[590, "sklearn.get_config"]], "iterativeimputer (class in sklearn.impute)": [[591, "sklearn.impute.IterativeImputer"]], "fit() (sklearn.impute.iterativeimputer method)": [[591, "sklearn.impute.IterativeImputer.fit"]], "fit_transform() (sklearn.impute.iterativeimputer method)": [[591, "sklearn.impute.IterativeImputer.fit_transform"]], "get_feature_names_out() (sklearn.impute.iterativeimputer method)": [[591, "sklearn.impute.IterativeImputer.get_feature_names_out"]], "get_metadata_routing() (sklearn.impute.iterativeimputer method)": [[591, "sklearn.impute.IterativeImputer.get_metadata_routing"]], "get_params() (sklearn.impute.iterativeimputer method)": [[591, "sklearn.impute.IterativeImputer.get_params"]], "set_output() (sklearn.impute.iterativeimputer method)": [[591, "sklearn.impute.IterativeImputer.set_output"]], "set_params() (sklearn.impute.iterativeimputer method)": [[591, "sklearn.impute.IterativeImputer.set_params"]], "transform() (sklearn.impute.iterativeimputer method)": [[591, "sklearn.impute.IterativeImputer.transform"]], "knnimputer (class in sklearn.impute)": [[592, "sklearn.impute.KNNImputer"]], "fit() (sklearn.impute.knnimputer method)": [[592, "sklearn.impute.KNNImputer.fit"]], "fit_transform() (sklearn.impute.knnimputer method)": [[592, "sklearn.impute.KNNImputer.fit_transform"]], "get_feature_names_out() (sklearn.impute.knnimputer method)": [[592, "sklearn.impute.KNNImputer.get_feature_names_out"]], "get_metadata_routing() (sklearn.impute.knnimputer method)": [[592, "sklearn.impute.KNNImputer.get_metadata_routing"]], "get_params() (sklearn.impute.knnimputer method)": [[592, "sklearn.impute.KNNImputer.get_params"]], "set_output() (sklearn.impute.knnimputer method)": [[592, "sklearn.impute.KNNImputer.set_output"]], "set_params() (sklearn.impute.knnimputer method)": [[592, "sklearn.impute.KNNImputer.set_params"]], "transform() (sklearn.impute.knnimputer method)": [[592, "sklearn.impute.KNNImputer.transform"]], "missingindicator (class in sklearn.impute)": [[593, "sklearn.impute.MissingIndicator"]], "fit() (sklearn.impute.missingindicator method)": [[593, "sklearn.impute.MissingIndicator.fit"]], "fit_transform() (sklearn.impute.missingindicator method)": [[593, "sklearn.impute.MissingIndicator.fit_transform"]], "get_feature_names_out() (sklearn.impute.missingindicator method)": [[593, "sklearn.impute.MissingIndicator.get_feature_names_out"]], "get_metadata_routing() (sklearn.impute.missingindicator method)": [[593, "sklearn.impute.MissingIndicator.get_metadata_routing"]], "get_params() (sklearn.impute.missingindicator method)": [[593, "sklearn.impute.MissingIndicator.get_params"]], "set_output() (sklearn.impute.missingindicator method)": [[593, "sklearn.impute.MissingIndicator.set_output"]], "set_params() (sklearn.impute.missingindicator method)": [[593, "sklearn.impute.MissingIndicator.set_params"]], "transform() (sklearn.impute.missingindicator method)": [[593, "sklearn.impute.MissingIndicator.transform"]], "simpleimputer (class in sklearn.impute)": [[594, "sklearn.impute.SimpleImputer"]], "fit() (sklearn.impute.simpleimputer method)": [[594, "sklearn.impute.SimpleImputer.fit"]], "fit_transform() (sklearn.impute.simpleimputer method)": [[594, "sklearn.impute.SimpleImputer.fit_transform"]], "get_feature_names_out() (sklearn.impute.simpleimputer method)": [[594, "sklearn.impute.SimpleImputer.get_feature_names_out"]], "get_metadata_routing() (sklearn.impute.simpleimputer method)": [[594, "sklearn.impute.SimpleImputer.get_metadata_routing"]], "get_params() (sklearn.impute.simpleimputer method)": [[594, "sklearn.impute.SimpleImputer.get_params"]], "inverse_transform() (sklearn.impute.simpleimputer method)": [[594, "sklearn.impute.SimpleImputer.inverse_transform"]], "set_output() (sklearn.impute.simpleimputer method)": [[594, "sklearn.impute.SimpleImputer.set_output"]], "set_params() (sklearn.impute.simpleimputer method)": [[594, "sklearn.impute.SimpleImputer.set_params"]], "transform() (sklearn.impute.simpleimputer method)": [[594, "sklearn.impute.SimpleImputer.transform"]], "decisionboundarydisplay (class in sklearn.inspection)": [[595, "sklearn.inspection.DecisionBoundaryDisplay"]], "from_estimator() (sklearn.inspection.decisionboundarydisplay class method)": [[595, "sklearn.inspection.DecisionBoundaryDisplay.from_estimator"]], "plot() (sklearn.inspection.decisionboundarydisplay method)": [[595, "sklearn.inspection.DecisionBoundaryDisplay.plot"]], "partialdependencedisplay (class in sklearn.inspection)": [[596, "sklearn.inspection.PartialDependenceDisplay"]], "from_estimator() (sklearn.inspection.partialdependencedisplay class method)": [[596, "sklearn.inspection.PartialDependenceDisplay.from_estimator"]], "plot() (sklearn.inspection.partialdependencedisplay method)": [[596, "sklearn.inspection.PartialDependenceDisplay.plot"]], "partial_dependence() (in module sklearn.inspection)": [[597, "sklearn.inspection.partial_dependence"]], "permutation_importance() (in module sklearn.inspection)": [[598, "sklearn.inspection.permutation_importance"]], "isotonicregression (class in sklearn.isotonic)": [[599, "sklearn.isotonic.IsotonicRegression"]], "fit() (sklearn.isotonic.isotonicregression method)": [[599, "sklearn.isotonic.IsotonicRegression.fit"]], "fit_transform() (sklearn.isotonic.isotonicregression method)": [[599, "sklearn.isotonic.IsotonicRegression.fit_transform"]], "get_feature_names_out() (sklearn.isotonic.isotonicregression method)": [[599, "sklearn.isotonic.IsotonicRegression.get_feature_names_out"]], "get_metadata_routing() (sklearn.isotonic.isotonicregression method)": [[599, "sklearn.isotonic.IsotonicRegression.get_metadata_routing"]], "get_params() (sklearn.isotonic.isotonicregression method)": [[599, "sklearn.isotonic.IsotonicRegression.get_params"]], "predict() (sklearn.isotonic.isotonicregression method)": [[599, "sklearn.isotonic.IsotonicRegression.predict"]], "score() (sklearn.isotonic.isotonicregression method)": [[599, "sklearn.isotonic.IsotonicRegression.score"]], "set_fit_request() (sklearn.isotonic.isotonicregression method)": [[599, "sklearn.isotonic.IsotonicRegression.set_fit_request"]], "set_output() (sklearn.isotonic.isotonicregression method)": [[599, "sklearn.isotonic.IsotonicRegression.set_output"]], "set_params() (sklearn.isotonic.isotonicregression method)": [[599, "sklearn.isotonic.IsotonicRegression.set_params"]], "set_predict_request() (sklearn.isotonic.isotonicregression method)": [[599, "sklearn.isotonic.IsotonicRegression.set_predict_request"]], "set_score_request() (sklearn.isotonic.isotonicregression method)": [[599, "sklearn.isotonic.IsotonicRegression.set_score_request"]], "set_transform_request() (sklearn.isotonic.isotonicregression method)": [[599, "sklearn.isotonic.IsotonicRegression.set_transform_request"]], "transform() (sklearn.isotonic.isotonicregression method)": [[599, "sklearn.isotonic.IsotonicRegression.transform"]], "check_increasing() (in module sklearn.isotonic)": [[600, "sklearn.isotonic.check_increasing"]], "isotonic_regression() (in module sklearn.isotonic)": [[601, "sklearn.isotonic.isotonic_regression"]], "additivechi2sampler (class in sklearn.kernel_approximation)": [[602, "sklearn.kernel_approximation.AdditiveChi2Sampler"]], "fit() (sklearn.kernel_approximation.additivechi2sampler method)": [[602, "sklearn.kernel_approximation.AdditiveChi2Sampler.fit"]], "fit_transform() (sklearn.kernel_approximation.additivechi2sampler method)": [[602, "sklearn.kernel_approximation.AdditiveChi2Sampler.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.additivechi2sampler method)": [[602, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_feature_names_out"]], "get_metadata_routing() (sklearn.kernel_approximation.additivechi2sampler method)": [[602, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_metadata_routing"]], "get_params() (sklearn.kernel_approximation.additivechi2sampler method)": [[602, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_params"]], "set_output() (sklearn.kernel_approximation.additivechi2sampler method)": [[602, "sklearn.kernel_approximation.AdditiveChi2Sampler.set_output"]], "set_params() (sklearn.kernel_approximation.additivechi2sampler method)": [[602, "sklearn.kernel_approximation.AdditiveChi2Sampler.set_params"]], "transform() (sklearn.kernel_approximation.additivechi2sampler method)": [[602, "sklearn.kernel_approximation.AdditiveChi2Sampler.transform"]], "nystroem (class in sklearn.kernel_approximation)": [[603, "sklearn.kernel_approximation.Nystroem"]], "fit() (sklearn.kernel_approximation.nystroem method)": [[603, "sklearn.kernel_approximation.Nystroem.fit"]], "fit_transform() (sklearn.kernel_approximation.nystroem method)": [[603, "sklearn.kernel_approximation.Nystroem.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.nystroem method)": [[603, "sklearn.kernel_approximation.Nystroem.get_feature_names_out"]], "get_metadata_routing() (sklearn.kernel_approximation.nystroem method)": [[603, "sklearn.kernel_approximation.Nystroem.get_metadata_routing"]], "get_params() (sklearn.kernel_approximation.nystroem method)": [[603, "sklearn.kernel_approximation.Nystroem.get_params"]], "set_output() (sklearn.kernel_approximation.nystroem method)": [[603, "sklearn.kernel_approximation.Nystroem.set_output"]], "set_params() (sklearn.kernel_approximation.nystroem method)": [[603, "sklearn.kernel_approximation.Nystroem.set_params"]], "transform() (sklearn.kernel_approximation.nystroem method)": [[603, "sklearn.kernel_approximation.Nystroem.transform"]], "polynomialcountsketch (class in sklearn.kernel_approximation)": [[604, "sklearn.kernel_approximation.PolynomialCountSketch"]], "fit() (sklearn.kernel_approximation.polynomialcountsketch method)": [[604, "sklearn.kernel_approximation.PolynomialCountSketch.fit"]], "fit_transform() (sklearn.kernel_approximation.polynomialcountsketch method)": [[604, "sklearn.kernel_approximation.PolynomialCountSketch.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.polynomialcountsketch method)": [[604, "sklearn.kernel_approximation.PolynomialCountSketch.get_feature_names_out"]], "get_metadata_routing() (sklearn.kernel_approximation.polynomialcountsketch method)": [[604, "sklearn.kernel_approximation.PolynomialCountSketch.get_metadata_routing"]], "get_params() (sklearn.kernel_approximation.polynomialcountsketch method)": [[604, "sklearn.kernel_approximation.PolynomialCountSketch.get_params"]], "set_output() (sklearn.kernel_approximation.polynomialcountsketch method)": [[604, "sklearn.kernel_approximation.PolynomialCountSketch.set_output"]], "set_params() (sklearn.kernel_approximation.polynomialcountsketch method)": [[604, "sklearn.kernel_approximation.PolynomialCountSketch.set_params"]], "transform() (sklearn.kernel_approximation.polynomialcountsketch method)": [[604, "sklearn.kernel_approximation.PolynomialCountSketch.transform"]], "rbfsampler (class in sklearn.kernel_approximation)": [[605, "sklearn.kernel_approximation.RBFSampler"]], "fit() (sklearn.kernel_approximation.rbfsampler method)": [[605, "sklearn.kernel_approximation.RBFSampler.fit"]], "fit_transform() (sklearn.kernel_approximation.rbfsampler method)": [[605, "sklearn.kernel_approximation.RBFSampler.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.rbfsampler method)": [[605, "sklearn.kernel_approximation.RBFSampler.get_feature_names_out"]], "get_metadata_routing() (sklearn.kernel_approximation.rbfsampler method)": [[605, "sklearn.kernel_approximation.RBFSampler.get_metadata_routing"]], "get_params() (sklearn.kernel_approximation.rbfsampler method)": [[605, "sklearn.kernel_approximation.RBFSampler.get_params"]], "set_output() (sklearn.kernel_approximation.rbfsampler method)": [[605, "sklearn.kernel_approximation.RBFSampler.set_output"]], "set_params() (sklearn.kernel_approximation.rbfsampler method)": [[605, "sklearn.kernel_approximation.RBFSampler.set_params"]], "transform() (sklearn.kernel_approximation.rbfsampler method)": [[605, "sklearn.kernel_approximation.RBFSampler.transform"]], "skewedchi2sampler (class in sklearn.kernel_approximation)": [[606, "sklearn.kernel_approximation.SkewedChi2Sampler"]], "fit() (sklearn.kernel_approximation.skewedchi2sampler method)": [[606, "sklearn.kernel_approximation.SkewedChi2Sampler.fit"]], "fit_transform() (sklearn.kernel_approximation.skewedchi2sampler method)": [[606, "sklearn.kernel_approximation.SkewedChi2Sampler.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.skewedchi2sampler method)": [[606, "sklearn.kernel_approximation.SkewedChi2Sampler.get_feature_names_out"]], "get_metadata_routing() (sklearn.kernel_approximation.skewedchi2sampler method)": [[606, "sklearn.kernel_approximation.SkewedChi2Sampler.get_metadata_routing"]], "get_params() (sklearn.kernel_approximation.skewedchi2sampler method)": [[606, "sklearn.kernel_approximation.SkewedChi2Sampler.get_params"]], "set_output() (sklearn.kernel_approximation.skewedchi2sampler method)": [[606, "sklearn.kernel_approximation.SkewedChi2Sampler.set_output"]], "set_params() (sklearn.kernel_approximation.skewedchi2sampler method)": [[606, "sklearn.kernel_approximation.SkewedChi2Sampler.set_params"]], "transform() (sklearn.kernel_approximation.skewedchi2sampler method)": [[606, "sklearn.kernel_approximation.SkewedChi2Sampler.transform"]], "kernelridge (class in sklearn.kernel_ridge)": [[607, "sklearn.kernel_ridge.KernelRidge"]], "fit() (sklearn.kernel_ridge.kernelridge method)": [[607, "sklearn.kernel_ridge.KernelRidge.fit"]], "get_metadata_routing() (sklearn.kernel_ridge.kernelridge method)": [[607, "sklearn.kernel_ridge.KernelRidge.get_metadata_routing"]], "get_params() (sklearn.kernel_ridge.kernelridge method)": [[607, "sklearn.kernel_ridge.KernelRidge.get_params"]], "predict() (sklearn.kernel_ridge.kernelridge method)": [[607, "sklearn.kernel_ridge.KernelRidge.predict"]], "score() (sklearn.kernel_ridge.kernelridge method)": [[607, "sklearn.kernel_ridge.KernelRidge.score"]], "set_fit_request() (sklearn.kernel_ridge.kernelridge method)": [[607, "sklearn.kernel_ridge.KernelRidge.set_fit_request"]], "set_params() (sklearn.kernel_ridge.kernelridge method)": [[607, "sklearn.kernel_ridge.KernelRidge.set_params"]], "set_score_request() (sklearn.kernel_ridge.kernelridge method)": [[607, "sklearn.kernel_ridge.KernelRidge.set_score_request"]], "ardregression (class in sklearn.linear_model)": [[608, "sklearn.linear_model.ARDRegression"]], "fit() (sklearn.linear_model.ardregression method)": [[608, "sklearn.linear_model.ARDRegression.fit"]], "get_metadata_routing() (sklearn.linear_model.ardregression method)": [[608, "sklearn.linear_model.ARDRegression.get_metadata_routing"]], "get_params() (sklearn.linear_model.ardregression method)": [[608, "sklearn.linear_model.ARDRegression.get_params"]], "predict() (sklearn.linear_model.ardregression method)": [[608, "sklearn.linear_model.ARDRegression.predict"]], "score() (sklearn.linear_model.ardregression method)": [[608, "sklearn.linear_model.ARDRegression.score"]], "set_params() (sklearn.linear_model.ardregression method)": [[608, "sklearn.linear_model.ARDRegression.set_params"]], "set_predict_request() (sklearn.linear_model.ardregression method)": [[608, "sklearn.linear_model.ARDRegression.set_predict_request"]], "set_score_request() (sklearn.linear_model.ardregression method)": [[608, "sklearn.linear_model.ARDRegression.set_score_request"]], "bayesianridge (class in sklearn.linear_model)": [[609, "sklearn.linear_model.BayesianRidge"]], "fit() (sklearn.linear_model.bayesianridge method)": [[609, "sklearn.linear_model.BayesianRidge.fit"]], "get_metadata_routing() (sklearn.linear_model.bayesianridge method)": [[609, "sklearn.linear_model.BayesianRidge.get_metadata_routing"]], "get_params() (sklearn.linear_model.bayesianridge method)": [[609, "sklearn.linear_model.BayesianRidge.get_params"]], "predict() (sklearn.linear_model.bayesianridge method)": [[609, "sklearn.linear_model.BayesianRidge.predict"]], "score() (sklearn.linear_model.bayesianridge method)": [[609, "sklearn.linear_model.BayesianRidge.score"]], "set_fit_request() (sklearn.linear_model.bayesianridge method)": [[609, "sklearn.linear_model.BayesianRidge.set_fit_request"]], "set_params() (sklearn.linear_model.bayesianridge method)": [[609, "sklearn.linear_model.BayesianRidge.set_params"]], "set_predict_request() (sklearn.linear_model.bayesianridge method)": [[609, "sklearn.linear_model.BayesianRidge.set_predict_request"]], "set_score_request() (sklearn.linear_model.bayesianridge method)": [[609, "sklearn.linear_model.BayesianRidge.set_score_request"]], "elasticnet (class in sklearn.linear_model)": [[610, "sklearn.linear_model.ElasticNet"]], "fit() (sklearn.linear_model.elasticnet method)": [[610, "sklearn.linear_model.ElasticNet.fit"]], "get_metadata_routing() (sklearn.linear_model.elasticnet method)": [[610, "sklearn.linear_model.ElasticNet.get_metadata_routing"]], "get_params() (sklearn.linear_model.elasticnet method)": [[610, "sklearn.linear_model.ElasticNet.get_params"]], "path() (sklearn.linear_model.elasticnet static method)": [[610, "sklearn.linear_model.ElasticNet.path"]], "predict() (sklearn.linear_model.elasticnet method)": [[610, "sklearn.linear_model.ElasticNet.predict"]], "score() (sklearn.linear_model.elasticnet method)": [[610, "sklearn.linear_model.ElasticNet.score"]], "set_fit_request() (sklearn.linear_model.elasticnet method)": [[610, "sklearn.linear_model.ElasticNet.set_fit_request"]], "set_params() (sklearn.linear_model.elasticnet method)": [[610, "sklearn.linear_model.ElasticNet.set_params"]], "set_score_request() (sklearn.linear_model.elasticnet method)": [[610, "sklearn.linear_model.ElasticNet.set_score_request"]], "sparse_coef_ (sklearn.linear_model.elasticnet property)": [[610, "sklearn.linear_model.ElasticNet.sparse_coef_"]], "elasticnetcv (class in sklearn.linear_model)": [[611, "sklearn.linear_model.ElasticNetCV"]], "fit() (sklearn.linear_model.elasticnetcv method)": [[611, "sklearn.linear_model.ElasticNetCV.fit"]], "get_metadata_routing() (sklearn.linear_model.elasticnetcv method)": [[611, "sklearn.linear_model.ElasticNetCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.elasticnetcv method)": [[611, "sklearn.linear_model.ElasticNetCV.get_params"]], "path() (sklearn.linear_model.elasticnetcv static method)": [[611, "sklearn.linear_model.ElasticNetCV.path"]], "predict() (sklearn.linear_model.elasticnetcv method)": [[611, "sklearn.linear_model.ElasticNetCV.predict"]], "score() (sklearn.linear_model.elasticnetcv method)": [[611, "sklearn.linear_model.ElasticNetCV.score"]], "set_fit_request() (sklearn.linear_model.elasticnetcv method)": [[611, "sklearn.linear_model.ElasticNetCV.set_fit_request"]], "set_params() (sklearn.linear_model.elasticnetcv method)": [[611, "sklearn.linear_model.ElasticNetCV.set_params"]], "set_score_request() (sklearn.linear_model.elasticnetcv method)": [[611, "sklearn.linear_model.ElasticNetCV.set_score_request"]], "gammaregressor (class in sklearn.linear_model)": [[612, "sklearn.linear_model.GammaRegressor"]], "fit() (sklearn.linear_model.gammaregressor method)": [[612, "sklearn.linear_model.GammaRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.gammaregressor method)": [[612, "sklearn.linear_model.GammaRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.gammaregressor method)": [[612, "sklearn.linear_model.GammaRegressor.get_params"]], "predict() (sklearn.linear_model.gammaregressor method)": [[612, "sklearn.linear_model.GammaRegressor.predict"]], "score() (sklearn.linear_model.gammaregressor method)": [[612, "sklearn.linear_model.GammaRegressor.score"]], "set_fit_request() (sklearn.linear_model.gammaregressor method)": [[612, "sklearn.linear_model.GammaRegressor.set_fit_request"]], "set_params() (sklearn.linear_model.gammaregressor method)": [[612, "sklearn.linear_model.GammaRegressor.set_params"]], "set_score_request() (sklearn.linear_model.gammaregressor method)": [[612, "sklearn.linear_model.GammaRegressor.set_score_request"]], "huberregressor (class in sklearn.linear_model)": [[613, "sklearn.linear_model.HuberRegressor"]], "fit() (sklearn.linear_model.huberregressor method)": [[613, "sklearn.linear_model.HuberRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.huberregressor method)": [[613, "sklearn.linear_model.HuberRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.huberregressor method)": [[613, "sklearn.linear_model.HuberRegressor.get_params"]], "predict() (sklearn.linear_model.huberregressor method)": [[613, "sklearn.linear_model.HuberRegressor.predict"]], "score() (sklearn.linear_model.huberregressor method)": [[613, "sklearn.linear_model.HuberRegressor.score"]], "set_fit_request() (sklearn.linear_model.huberregressor method)": [[613, "sklearn.linear_model.HuberRegressor.set_fit_request"]], "set_params() (sklearn.linear_model.huberregressor method)": [[613, "sklearn.linear_model.HuberRegressor.set_params"]], "set_score_request() (sklearn.linear_model.huberregressor method)": [[613, "sklearn.linear_model.HuberRegressor.set_score_request"]], "lars (class in sklearn.linear_model)": [[614, "sklearn.linear_model.Lars"]], "fit() (sklearn.linear_model.lars method)": [[614, "sklearn.linear_model.Lars.fit"]], "get_metadata_routing() (sklearn.linear_model.lars method)": [[614, "sklearn.linear_model.Lars.get_metadata_routing"]], "get_params() (sklearn.linear_model.lars method)": [[614, "sklearn.linear_model.Lars.get_params"]], "predict() (sklearn.linear_model.lars method)": [[614, "sklearn.linear_model.Lars.predict"]], "score() (sklearn.linear_model.lars method)": [[614, "sklearn.linear_model.Lars.score"]], "set_fit_request() (sklearn.linear_model.lars method)": [[614, "sklearn.linear_model.Lars.set_fit_request"]], "set_params() (sklearn.linear_model.lars method)": [[614, "sklearn.linear_model.Lars.set_params"]], "set_score_request() (sklearn.linear_model.lars method)": [[614, "sklearn.linear_model.Lars.set_score_request"]], "larscv (class in sklearn.linear_model)": [[615, "sklearn.linear_model.LarsCV"]], "fit() (sklearn.linear_model.larscv method)": [[615, "sklearn.linear_model.LarsCV.fit"]], "get_metadata_routing() (sklearn.linear_model.larscv method)": [[615, "sklearn.linear_model.LarsCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.larscv method)": [[615, "sklearn.linear_model.LarsCV.get_params"]], "predict() (sklearn.linear_model.larscv method)": [[615, "sklearn.linear_model.LarsCV.predict"]], "score() (sklearn.linear_model.larscv method)": [[615, "sklearn.linear_model.LarsCV.score"]], "set_fit_request() (sklearn.linear_model.larscv method)": [[615, "sklearn.linear_model.LarsCV.set_fit_request"]], "set_params() (sklearn.linear_model.larscv method)": [[615, "sklearn.linear_model.LarsCV.set_params"]], "set_score_request() (sklearn.linear_model.larscv method)": [[615, "sklearn.linear_model.LarsCV.set_score_request"]], "lasso (class in sklearn.linear_model)": [[616, "sklearn.linear_model.Lasso"]], "fit() (sklearn.linear_model.lasso method)": [[616, "sklearn.linear_model.Lasso.fit"]], "get_metadata_routing() (sklearn.linear_model.lasso method)": [[616, "sklearn.linear_model.Lasso.get_metadata_routing"]], "get_params() (sklearn.linear_model.lasso method)": [[616, "sklearn.linear_model.Lasso.get_params"]], "path() (sklearn.linear_model.lasso static method)": [[616, "sklearn.linear_model.Lasso.path"]], "predict() (sklearn.linear_model.lasso method)": [[616, "sklearn.linear_model.Lasso.predict"]], "score() (sklearn.linear_model.lasso method)": [[616, "sklearn.linear_model.Lasso.score"]], "set_fit_request() (sklearn.linear_model.lasso method)": [[616, "sklearn.linear_model.Lasso.set_fit_request"]], "set_params() (sklearn.linear_model.lasso method)": [[616, "sklearn.linear_model.Lasso.set_params"]], "set_score_request() (sklearn.linear_model.lasso method)": [[616, "sklearn.linear_model.Lasso.set_score_request"]], "sparse_coef_ (sklearn.linear_model.lasso property)": [[616, "sklearn.linear_model.Lasso.sparse_coef_"]], "lassocv (class in sklearn.linear_model)": [[617, "sklearn.linear_model.LassoCV"]], "fit() (sklearn.linear_model.lassocv method)": [[617, "sklearn.linear_model.LassoCV.fit"]], "get_metadata_routing() (sklearn.linear_model.lassocv method)": [[617, "sklearn.linear_model.LassoCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.lassocv method)": [[617, "sklearn.linear_model.LassoCV.get_params"]], "path() (sklearn.linear_model.lassocv static method)": [[617, "sklearn.linear_model.LassoCV.path"]], "predict() (sklearn.linear_model.lassocv method)": [[617, "sklearn.linear_model.LassoCV.predict"]], "score() (sklearn.linear_model.lassocv method)": [[617, "sklearn.linear_model.LassoCV.score"]], "set_fit_request() (sklearn.linear_model.lassocv method)": [[617, "sklearn.linear_model.LassoCV.set_fit_request"]], "set_params() (sklearn.linear_model.lassocv method)": [[617, "sklearn.linear_model.LassoCV.set_params"]], "set_score_request() (sklearn.linear_model.lassocv method)": [[617, "sklearn.linear_model.LassoCV.set_score_request"]], "lassolars (class in sklearn.linear_model)": [[618, "sklearn.linear_model.LassoLars"]], "fit() (sklearn.linear_model.lassolars method)": [[618, "sklearn.linear_model.LassoLars.fit"]], "get_metadata_routing() (sklearn.linear_model.lassolars method)": [[618, "sklearn.linear_model.LassoLars.get_metadata_routing"]], "get_params() (sklearn.linear_model.lassolars method)": [[618, "sklearn.linear_model.LassoLars.get_params"]], "predict() (sklearn.linear_model.lassolars method)": [[618, "sklearn.linear_model.LassoLars.predict"]], "score() (sklearn.linear_model.lassolars method)": [[618, "sklearn.linear_model.LassoLars.score"]], "set_fit_request() (sklearn.linear_model.lassolars method)": [[618, "sklearn.linear_model.LassoLars.set_fit_request"]], "set_params() (sklearn.linear_model.lassolars method)": [[618, "sklearn.linear_model.LassoLars.set_params"]], "set_score_request() (sklearn.linear_model.lassolars method)": [[618, "sklearn.linear_model.LassoLars.set_score_request"]], "lassolarscv (class in sklearn.linear_model)": [[619, "sklearn.linear_model.LassoLarsCV"]], "fit() (sklearn.linear_model.lassolarscv method)": [[619, "sklearn.linear_model.LassoLarsCV.fit"]], "get_metadata_routing() (sklearn.linear_model.lassolarscv method)": [[619, "sklearn.linear_model.LassoLarsCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.lassolarscv method)": [[619, "sklearn.linear_model.LassoLarsCV.get_params"]], "predict() (sklearn.linear_model.lassolarscv method)": [[619, "sklearn.linear_model.LassoLarsCV.predict"]], "score() (sklearn.linear_model.lassolarscv method)": [[619, "sklearn.linear_model.LassoLarsCV.score"]], "set_fit_request() (sklearn.linear_model.lassolarscv method)": [[619, "sklearn.linear_model.LassoLarsCV.set_fit_request"]], "set_params() (sklearn.linear_model.lassolarscv method)": [[619, "sklearn.linear_model.LassoLarsCV.set_params"]], "set_score_request() (sklearn.linear_model.lassolarscv method)": [[619, "sklearn.linear_model.LassoLarsCV.set_score_request"]], "lassolarsic (class in sklearn.linear_model)": [[620, "sklearn.linear_model.LassoLarsIC"]], "fit() (sklearn.linear_model.lassolarsic method)": [[620, "sklearn.linear_model.LassoLarsIC.fit"]], "get_metadata_routing() (sklearn.linear_model.lassolarsic method)": [[620, "sklearn.linear_model.LassoLarsIC.get_metadata_routing"]], "get_params() (sklearn.linear_model.lassolarsic method)": [[620, "sklearn.linear_model.LassoLarsIC.get_params"]], "predict() (sklearn.linear_model.lassolarsic method)": [[620, "sklearn.linear_model.LassoLarsIC.predict"]], "score() (sklearn.linear_model.lassolarsic method)": [[620, "sklearn.linear_model.LassoLarsIC.score"]], "set_fit_request() (sklearn.linear_model.lassolarsic method)": [[620, "sklearn.linear_model.LassoLarsIC.set_fit_request"]], "set_params() (sklearn.linear_model.lassolarsic method)": [[620, "sklearn.linear_model.LassoLarsIC.set_params"]], "set_score_request() (sklearn.linear_model.lassolarsic method)": [[620, "sklearn.linear_model.LassoLarsIC.set_score_request"]], "linearregression (class in sklearn.linear_model)": [[621, "sklearn.linear_model.LinearRegression"]], "fit() (sklearn.linear_model.linearregression method)": [[621, "sklearn.linear_model.LinearRegression.fit"]], "get_metadata_routing() (sklearn.linear_model.linearregression method)": [[621, "sklearn.linear_model.LinearRegression.get_metadata_routing"]], "get_params() (sklearn.linear_model.linearregression method)": [[621, "sklearn.linear_model.LinearRegression.get_params"]], "predict() (sklearn.linear_model.linearregression method)": [[621, "sklearn.linear_model.LinearRegression.predict"]], "score() (sklearn.linear_model.linearregression method)": [[621, "sklearn.linear_model.LinearRegression.score"]], "set_fit_request() (sklearn.linear_model.linearregression method)": [[621, "sklearn.linear_model.LinearRegression.set_fit_request"]], "set_params() (sklearn.linear_model.linearregression method)": [[621, "sklearn.linear_model.LinearRegression.set_params"]], "set_score_request() (sklearn.linear_model.linearregression method)": [[621, "sklearn.linear_model.LinearRegression.set_score_request"]], "logisticregression (class in sklearn.linear_model)": [[622, "sklearn.linear_model.LogisticRegression"]], "decision_function() (sklearn.linear_model.logisticregression method)": [[622, "sklearn.linear_model.LogisticRegression.decision_function"]], "densify() (sklearn.linear_model.logisticregression method)": [[622, "sklearn.linear_model.LogisticRegression.densify"]], "fit() (sklearn.linear_model.logisticregression method)": [[622, "sklearn.linear_model.LogisticRegression.fit"]], "get_metadata_routing() (sklearn.linear_model.logisticregression method)": [[622, "sklearn.linear_model.LogisticRegression.get_metadata_routing"]], "get_params() (sklearn.linear_model.logisticregression method)": [[622, "sklearn.linear_model.LogisticRegression.get_params"]], "predict() (sklearn.linear_model.logisticregression method)": [[622, "sklearn.linear_model.LogisticRegression.predict"]], "predict_log_proba() (sklearn.linear_model.logisticregression method)": [[622, "sklearn.linear_model.LogisticRegression.predict_log_proba"]], "predict_proba() (sklearn.linear_model.logisticregression method)": [[622, "sklearn.linear_model.LogisticRegression.predict_proba"]], "score() (sklearn.linear_model.logisticregression method)": [[622, "sklearn.linear_model.LogisticRegression.score"]], "set_fit_request() (sklearn.linear_model.logisticregression method)": [[622, "sklearn.linear_model.LogisticRegression.set_fit_request"]], "set_params() (sklearn.linear_model.logisticregression method)": [[622, "sklearn.linear_model.LogisticRegression.set_params"]], "set_score_request() (sklearn.linear_model.logisticregression method)": [[622, "sklearn.linear_model.LogisticRegression.set_score_request"]], "sparsify() (sklearn.linear_model.logisticregression method)": [[622, "sklearn.linear_model.LogisticRegression.sparsify"]], "logisticregressioncv (class in sklearn.linear_model)": [[623, "sklearn.linear_model.LogisticRegressionCV"]], "decision_function() (sklearn.linear_model.logisticregressioncv method)": [[623, "sklearn.linear_model.LogisticRegressionCV.decision_function"]], "densify() (sklearn.linear_model.logisticregressioncv method)": [[623, "sklearn.linear_model.LogisticRegressionCV.densify"]], "fit() (sklearn.linear_model.logisticregressioncv method)": [[623, "sklearn.linear_model.LogisticRegressionCV.fit"]], "get_metadata_routing() (sklearn.linear_model.logisticregressioncv method)": [[623, "sklearn.linear_model.LogisticRegressionCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.logisticregressioncv method)": [[623, "sklearn.linear_model.LogisticRegressionCV.get_params"]], "predict() (sklearn.linear_model.logisticregressioncv method)": [[623, "sklearn.linear_model.LogisticRegressionCV.predict"]], "predict_log_proba() (sklearn.linear_model.logisticregressioncv method)": [[623, "sklearn.linear_model.LogisticRegressionCV.predict_log_proba"]], "predict_proba() (sklearn.linear_model.logisticregressioncv method)": [[623, "sklearn.linear_model.LogisticRegressionCV.predict_proba"]], "score() (sklearn.linear_model.logisticregressioncv method)": [[623, "sklearn.linear_model.LogisticRegressionCV.score"]], "set_fit_request() (sklearn.linear_model.logisticregressioncv method)": [[623, "sklearn.linear_model.LogisticRegressionCV.set_fit_request"]], "set_params() (sklearn.linear_model.logisticregressioncv method)": [[623, "sklearn.linear_model.LogisticRegressionCV.set_params"]], "set_score_request() (sklearn.linear_model.logisticregressioncv method)": [[623, "sklearn.linear_model.LogisticRegressionCV.set_score_request"]], "sparsify() (sklearn.linear_model.logisticregressioncv method)": [[623, "sklearn.linear_model.LogisticRegressionCV.sparsify"]], "multitaskelasticnet (class in sklearn.linear_model)": [[624, "sklearn.linear_model.MultiTaskElasticNet"]], "fit() (sklearn.linear_model.multitaskelasticnet method)": [[624, "sklearn.linear_model.MultiTaskElasticNet.fit"]], "get_metadata_routing() (sklearn.linear_model.multitaskelasticnet method)": [[624, "sklearn.linear_model.MultiTaskElasticNet.get_metadata_routing"]], "get_params() (sklearn.linear_model.multitaskelasticnet method)": [[624, "sklearn.linear_model.MultiTaskElasticNet.get_params"]], "path() (sklearn.linear_model.multitaskelasticnet static method)": [[624, "sklearn.linear_model.MultiTaskElasticNet.path"]], "predict() (sklearn.linear_model.multitaskelasticnet method)": [[624, "sklearn.linear_model.MultiTaskElasticNet.predict"]], "score() (sklearn.linear_model.multitaskelasticnet method)": [[624, "sklearn.linear_model.MultiTaskElasticNet.score"]], "set_fit_request() (sklearn.linear_model.multitaskelasticnet method)": [[624, "sklearn.linear_model.MultiTaskElasticNet.set_fit_request"]], "set_params() (sklearn.linear_model.multitaskelasticnet method)": [[624, "sklearn.linear_model.MultiTaskElasticNet.set_params"]], "set_score_request() (sklearn.linear_model.multitaskelasticnet method)": [[624, "sklearn.linear_model.MultiTaskElasticNet.set_score_request"]], "sparse_coef_ (sklearn.linear_model.multitaskelasticnet property)": [[624, "sklearn.linear_model.MultiTaskElasticNet.sparse_coef_"]], "multitaskelasticnetcv (class in sklearn.linear_model)": [[625, "sklearn.linear_model.MultiTaskElasticNetCV"]], "fit() (sklearn.linear_model.multitaskelasticnetcv method)": [[625, "sklearn.linear_model.MultiTaskElasticNetCV.fit"]], "get_metadata_routing() (sklearn.linear_model.multitaskelasticnetcv method)": [[625, "sklearn.linear_model.MultiTaskElasticNetCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.multitaskelasticnetcv method)": [[625, "sklearn.linear_model.MultiTaskElasticNetCV.get_params"]], "path() (sklearn.linear_model.multitaskelasticnetcv static method)": [[625, "sklearn.linear_model.MultiTaskElasticNetCV.path"]], "predict() (sklearn.linear_model.multitaskelasticnetcv method)": [[625, "sklearn.linear_model.MultiTaskElasticNetCV.predict"]], "score() (sklearn.linear_model.multitaskelasticnetcv method)": [[625, "sklearn.linear_model.MultiTaskElasticNetCV.score"]], "set_fit_request() (sklearn.linear_model.multitaskelasticnetcv method)": [[625, "sklearn.linear_model.MultiTaskElasticNetCV.set_fit_request"]], "set_params() (sklearn.linear_model.multitaskelasticnetcv method)": [[625, "sklearn.linear_model.MultiTaskElasticNetCV.set_params"]], "set_score_request() (sklearn.linear_model.multitaskelasticnetcv method)": [[625, "sklearn.linear_model.MultiTaskElasticNetCV.set_score_request"]], "multitasklasso (class in sklearn.linear_model)": [[626, "sklearn.linear_model.MultiTaskLasso"]], "fit() (sklearn.linear_model.multitasklasso method)": [[626, "sklearn.linear_model.MultiTaskLasso.fit"]], "get_metadata_routing() (sklearn.linear_model.multitasklasso method)": [[626, "sklearn.linear_model.MultiTaskLasso.get_metadata_routing"]], "get_params() (sklearn.linear_model.multitasklasso method)": [[626, "sklearn.linear_model.MultiTaskLasso.get_params"]], "path() (sklearn.linear_model.multitasklasso static method)": [[626, "sklearn.linear_model.MultiTaskLasso.path"]], "predict() (sklearn.linear_model.multitasklasso method)": [[626, "sklearn.linear_model.MultiTaskLasso.predict"]], "score() (sklearn.linear_model.multitasklasso method)": [[626, "sklearn.linear_model.MultiTaskLasso.score"]], "set_fit_request() (sklearn.linear_model.multitasklasso method)": [[626, "sklearn.linear_model.MultiTaskLasso.set_fit_request"]], "set_params() (sklearn.linear_model.multitasklasso method)": [[626, "sklearn.linear_model.MultiTaskLasso.set_params"]], "set_score_request() (sklearn.linear_model.multitasklasso method)": [[626, "sklearn.linear_model.MultiTaskLasso.set_score_request"]], "sparse_coef_ (sklearn.linear_model.multitasklasso property)": [[626, "sklearn.linear_model.MultiTaskLasso.sparse_coef_"]], "multitasklassocv (class in sklearn.linear_model)": [[627, "sklearn.linear_model.MultiTaskLassoCV"]], "fit() (sklearn.linear_model.multitasklassocv method)": [[627, "sklearn.linear_model.MultiTaskLassoCV.fit"]], "get_metadata_routing() (sklearn.linear_model.multitasklassocv method)": [[627, "sklearn.linear_model.MultiTaskLassoCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.multitasklassocv method)": [[627, "sklearn.linear_model.MultiTaskLassoCV.get_params"]], "path() (sklearn.linear_model.multitasklassocv static method)": [[627, "sklearn.linear_model.MultiTaskLassoCV.path"]], "predict() (sklearn.linear_model.multitasklassocv method)": [[627, "sklearn.linear_model.MultiTaskLassoCV.predict"]], "score() (sklearn.linear_model.multitasklassocv method)": [[627, "sklearn.linear_model.MultiTaskLassoCV.score"]], "set_fit_request() (sklearn.linear_model.multitasklassocv method)": [[627, "sklearn.linear_model.MultiTaskLassoCV.set_fit_request"]], "set_params() (sklearn.linear_model.multitasklassocv method)": [[627, "sklearn.linear_model.MultiTaskLassoCV.set_params"]], "set_score_request() (sklearn.linear_model.multitasklassocv method)": [[627, "sklearn.linear_model.MultiTaskLassoCV.set_score_request"]], "orthogonalmatchingpursuit (class in sklearn.linear_model)": [[628, "sklearn.linear_model.OrthogonalMatchingPursuit"]], "fit() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[628, "sklearn.linear_model.OrthogonalMatchingPursuit.fit"]], "get_metadata_routing() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[628, "sklearn.linear_model.OrthogonalMatchingPursuit.get_metadata_routing"]], "get_params() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[628, "sklearn.linear_model.OrthogonalMatchingPursuit.get_params"]], "predict() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[628, "sklearn.linear_model.OrthogonalMatchingPursuit.predict"]], "score() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[628, "sklearn.linear_model.OrthogonalMatchingPursuit.score"]], "set_params() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[628, "sklearn.linear_model.OrthogonalMatchingPursuit.set_params"]], "set_score_request() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[628, "sklearn.linear_model.OrthogonalMatchingPursuit.set_score_request"]], "orthogonalmatchingpursuitcv (class in sklearn.linear_model)": [[629, "sklearn.linear_model.OrthogonalMatchingPursuitCV"]], "fit() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[629, "sklearn.linear_model.OrthogonalMatchingPursuitCV.fit"]], "get_metadata_routing() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[629, "sklearn.linear_model.OrthogonalMatchingPursuitCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[629, "sklearn.linear_model.OrthogonalMatchingPursuitCV.get_params"]], "predict() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[629, "sklearn.linear_model.OrthogonalMatchingPursuitCV.predict"]], "score() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[629, "sklearn.linear_model.OrthogonalMatchingPursuitCV.score"]], "set_params() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[629, "sklearn.linear_model.OrthogonalMatchingPursuitCV.set_params"]], "set_score_request() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[629, "sklearn.linear_model.OrthogonalMatchingPursuitCV.set_score_request"]], "passiveaggressiveclassifier (class in sklearn.linear_model)": [[630, "sklearn.linear_model.PassiveAggressiveClassifier"]], "decision_function() (sklearn.linear_model.passiveaggressiveclassifier method)": [[630, "sklearn.linear_model.PassiveAggressiveClassifier.decision_function"]], "densify() (sklearn.linear_model.passiveaggressiveclassifier method)": [[630, "sklearn.linear_model.PassiveAggressiveClassifier.densify"]], "fit() (sklearn.linear_model.passiveaggressiveclassifier method)": [[630, "sklearn.linear_model.PassiveAggressiveClassifier.fit"]], "get_metadata_routing() (sklearn.linear_model.passiveaggressiveclassifier method)": [[630, "sklearn.linear_model.PassiveAggressiveClassifier.get_metadata_routing"]], "get_params() (sklearn.linear_model.passiveaggressiveclassifier method)": [[630, "sklearn.linear_model.PassiveAggressiveClassifier.get_params"]], "partial_fit() (sklearn.linear_model.passiveaggressiveclassifier method)": [[630, "sklearn.linear_model.PassiveAggressiveClassifier.partial_fit"]], "predict() (sklearn.linear_model.passiveaggressiveclassifier method)": [[630, "sklearn.linear_model.PassiveAggressiveClassifier.predict"]], "score() (sklearn.linear_model.passiveaggressiveclassifier method)": [[630, "sklearn.linear_model.PassiveAggressiveClassifier.score"]], "set_fit_request() (sklearn.linear_model.passiveaggressiveclassifier method)": [[630, "sklearn.linear_model.PassiveAggressiveClassifier.set_fit_request"]], "set_params() (sklearn.linear_model.passiveaggressiveclassifier method)": [[630, "sklearn.linear_model.PassiveAggressiveClassifier.set_params"]], "set_partial_fit_request() (sklearn.linear_model.passiveaggressiveclassifier method)": [[630, "sklearn.linear_model.PassiveAggressiveClassifier.set_partial_fit_request"]], "set_score_request() (sklearn.linear_model.passiveaggressiveclassifier method)": [[630, "sklearn.linear_model.PassiveAggressiveClassifier.set_score_request"]], "sparsify() (sklearn.linear_model.passiveaggressiveclassifier method)": [[630, "sklearn.linear_model.PassiveAggressiveClassifier.sparsify"]], "passiveaggressiveregressor (class in sklearn.linear_model)": [[631, "sklearn.linear_model.PassiveAggressiveRegressor"]], "densify() (sklearn.linear_model.passiveaggressiveregressor method)": [[631, "sklearn.linear_model.PassiveAggressiveRegressor.densify"]], "fit() (sklearn.linear_model.passiveaggressiveregressor method)": [[631, "sklearn.linear_model.PassiveAggressiveRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.passiveaggressiveregressor method)": [[631, "sklearn.linear_model.PassiveAggressiveRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.passiveaggressiveregressor method)": [[631, "sklearn.linear_model.PassiveAggressiveRegressor.get_params"]], "partial_fit() (sklearn.linear_model.passiveaggressiveregressor method)": [[631, "sklearn.linear_model.PassiveAggressiveRegressor.partial_fit"]], "predict() (sklearn.linear_model.passiveaggressiveregressor method)": [[631, "sklearn.linear_model.PassiveAggressiveRegressor.predict"]], "score() (sklearn.linear_model.passiveaggressiveregressor method)": [[631, "sklearn.linear_model.PassiveAggressiveRegressor.score"]], "set_fit_request() (sklearn.linear_model.passiveaggressiveregressor method)": [[631, "sklearn.linear_model.PassiveAggressiveRegressor.set_fit_request"]], "set_params() (sklearn.linear_model.passiveaggressiveregressor method)": [[631, "sklearn.linear_model.PassiveAggressiveRegressor.set_params"]], "set_partial_fit_request() (sklearn.linear_model.passiveaggressiveregressor method)": [[631, "sklearn.linear_model.PassiveAggressiveRegressor.set_partial_fit_request"]], "set_score_request() (sklearn.linear_model.passiveaggressiveregressor method)": [[631, "sklearn.linear_model.PassiveAggressiveRegressor.set_score_request"]], "sparsify() (sklearn.linear_model.passiveaggressiveregressor method)": [[631, "sklearn.linear_model.PassiveAggressiveRegressor.sparsify"]], "perceptron (class in sklearn.linear_model)": [[632, "sklearn.linear_model.Perceptron"]], "decision_function() (sklearn.linear_model.perceptron method)": [[632, "sklearn.linear_model.Perceptron.decision_function"]], "densify() (sklearn.linear_model.perceptron method)": [[632, "sklearn.linear_model.Perceptron.densify"]], "fit() (sklearn.linear_model.perceptron method)": [[632, "sklearn.linear_model.Perceptron.fit"]], "get_metadata_routing() (sklearn.linear_model.perceptron method)": [[632, "sklearn.linear_model.Perceptron.get_metadata_routing"]], "get_params() (sklearn.linear_model.perceptron method)": [[632, "sklearn.linear_model.Perceptron.get_params"]], "partial_fit() (sklearn.linear_model.perceptron method)": [[632, "sklearn.linear_model.Perceptron.partial_fit"]], "predict() (sklearn.linear_model.perceptron method)": [[632, "sklearn.linear_model.Perceptron.predict"]], "score() (sklearn.linear_model.perceptron method)": [[632, "sklearn.linear_model.Perceptron.score"]], "set_fit_request() (sklearn.linear_model.perceptron method)": [[632, "sklearn.linear_model.Perceptron.set_fit_request"]], "set_params() (sklearn.linear_model.perceptron method)": [[632, "sklearn.linear_model.Perceptron.set_params"]], "set_partial_fit_request() (sklearn.linear_model.perceptron method)": [[632, "sklearn.linear_model.Perceptron.set_partial_fit_request"]], "set_score_request() (sklearn.linear_model.perceptron method)": [[632, "sklearn.linear_model.Perceptron.set_score_request"]], "sparsify() (sklearn.linear_model.perceptron method)": [[632, "sklearn.linear_model.Perceptron.sparsify"]], "poissonregressor (class in sklearn.linear_model)": [[633, "sklearn.linear_model.PoissonRegressor"]], "fit() (sklearn.linear_model.poissonregressor method)": [[633, "sklearn.linear_model.PoissonRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.poissonregressor method)": [[633, "sklearn.linear_model.PoissonRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.poissonregressor method)": [[633, "sklearn.linear_model.PoissonRegressor.get_params"]], "predict() (sklearn.linear_model.poissonregressor method)": [[633, "sklearn.linear_model.PoissonRegressor.predict"]], "score() (sklearn.linear_model.poissonregressor method)": [[633, "sklearn.linear_model.PoissonRegressor.score"]], "set_fit_request() (sklearn.linear_model.poissonregressor method)": [[633, "sklearn.linear_model.PoissonRegressor.set_fit_request"]], "set_params() (sklearn.linear_model.poissonregressor method)": [[633, "sklearn.linear_model.PoissonRegressor.set_params"]], "set_score_request() (sklearn.linear_model.poissonregressor method)": [[633, "sklearn.linear_model.PoissonRegressor.set_score_request"]], "quantileregressor (class in sklearn.linear_model)": [[634, "sklearn.linear_model.QuantileRegressor"]], "fit() (sklearn.linear_model.quantileregressor method)": [[634, "sklearn.linear_model.QuantileRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.quantileregressor method)": [[634, "sklearn.linear_model.QuantileRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.quantileregressor method)": [[634, "sklearn.linear_model.QuantileRegressor.get_params"]], "predict() (sklearn.linear_model.quantileregressor method)": [[634, "sklearn.linear_model.QuantileRegressor.predict"]], "score() (sklearn.linear_model.quantileregressor method)": [[634, "sklearn.linear_model.QuantileRegressor.score"]], "set_fit_request() (sklearn.linear_model.quantileregressor method)": [[634, "sklearn.linear_model.QuantileRegressor.set_fit_request"]], "set_params() (sklearn.linear_model.quantileregressor method)": [[634, "sklearn.linear_model.QuantileRegressor.set_params"]], "set_score_request() (sklearn.linear_model.quantileregressor method)": [[634, "sklearn.linear_model.QuantileRegressor.set_score_request"]], "ransacregressor (class in sklearn.linear_model)": [[635, "sklearn.linear_model.RANSACRegressor"]], "fit() (sklearn.linear_model.ransacregressor method)": [[635, "sklearn.linear_model.RANSACRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.ransacregressor method)": [[635, "sklearn.linear_model.RANSACRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.ransacregressor method)": [[635, "sklearn.linear_model.RANSACRegressor.get_params"]], "predict() (sklearn.linear_model.ransacregressor method)": [[635, "sklearn.linear_model.RANSACRegressor.predict"]], "score() (sklearn.linear_model.ransacregressor method)": [[635, "sklearn.linear_model.RANSACRegressor.score"]], "set_fit_request() (sklearn.linear_model.ransacregressor method)": [[635, "sklearn.linear_model.RANSACRegressor.set_fit_request"]], "set_params() (sklearn.linear_model.ransacregressor method)": [[635, "sklearn.linear_model.RANSACRegressor.set_params"]], "ridge (class in sklearn.linear_model)": [[636, "sklearn.linear_model.Ridge"]], "fit() (sklearn.linear_model.ridge method)": [[636, "sklearn.linear_model.Ridge.fit"]], "get_metadata_routing() (sklearn.linear_model.ridge method)": [[636, "sklearn.linear_model.Ridge.get_metadata_routing"]], "get_params() (sklearn.linear_model.ridge method)": [[636, "sklearn.linear_model.Ridge.get_params"]], "predict() (sklearn.linear_model.ridge method)": [[636, "sklearn.linear_model.Ridge.predict"]], "score() (sklearn.linear_model.ridge method)": [[636, "sklearn.linear_model.Ridge.score"]], "set_fit_request() (sklearn.linear_model.ridge method)": [[636, "sklearn.linear_model.Ridge.set_fit_request"]], "set_params() (sklearn.linear_model.ridge method)": [[636, "sklearn.linear_model.Ridge.set_params"]], "set_score_request() (sklearn.linear_model.ridge method)": [[636, "sklearn.linear_model.Ridge.set_score_request"]], "ridgecv (class in sklearn.linear_model)": [[637, "sklearn.linear_model.RidgeCV"]], "fit() (sklearn.linear_model.ridgecv method)": [[637, "sklearn.linear_model.RidgeCV.fit"]], "get_metadata_routing() (sklearn.linear_model.ridgecv method)": [[637, "sklearn.linear_model.RidgeCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.ridgecv method)": [[637, "sklearn.linear_model.RidgeCV.get_params"]], "predict() (sklearn.linear_model.ridgecv method)": [[637, "sklearn.linear_model.RidgeCV.predict"]], "score() (sklearn.linear_model.ridgecv method)": [[637, "sklearn.linear_model.RidgeCV.score"]], "set_fit_request() (sklearn.linear_model.ridgecv method)": [[637, "sklearn.linear_model.RidgeCV.set_fit_request"]], "set_params() (sklearn.linear_model.ridgecv method)": [[637, "sklearn.linear_model.RidgeCV.set_params"]], "set_score_request() (sklearn.linear_model.ridgecv method)": [[637, "sklearn.linear_model.RidgeCV.set_score_request"]], "ridgeclassifier (class in sklearn.linear_model)": [[638, "sklearn.linear_model.RidgeClassifier"]], "classes_ (sklearn.linear_model.ridgeclassifier property)": [[638, "sklearn.linear_model.RidgeClassifier.classes_"]], "decision_function() (sklearn.linear_model.ridgeclassifier method)": [[638, "sklearn.linear_model.RidgeClassifier.decision_function"]], "fit() (sklearn.linear_model.ridgeclassifier method)": [[638, "sklearn.linear_model.RidgeClassifier.fit"]], "get_metadata_routing() (sklearn.linear_model.ridgeclassifier method)": [[638, "sklearn.linear_model.RidgeClassifier.get_metadata_routing"]], "get_params() (sklearn.linear_model.ridgeclassifier method)": [[638, "sklearn.linear_model.RidgeClassifier.get_params"]], "predict() (sklearn.linear_model.ridgeclassifier method)": [[638, "sklearn.linear_model.RidgeClassifier.predict"]], "score() (sklearn.linear_model.ridgeclassifier method)": [[638, "sklearn.linear_model.RidgeClassifier.score"]], "set_fit_request() (sklearn.linear_model.ridgeclassifier method)": [[638, "sklearn.linear_model.RidgeClassifier.set_fit_request"]], "set_params() (sklearn.linear_model.ridgeclassifier method)": [[638, "sklearn.linear_model.RidgeClassifier.set_params"]], "set_score_request() (sklearn.linear_model.ridgeclassifier method)": [[638, "sklearn.linear_model.RidgeClassifier.set_score_request"]], "ridgeclassifiercv (class in sklearn.linear_model)": [[639, "sklearn.linear_model.RidgeClassifierCV"]], "classes_ (sklearn.linear_model.ridgeclassifiercv property)": [[639, "sklearn.linear_model.RidgeClassifierCV.classes_"]], "decision_function() (sklearn.linear_model.ridgeclassifiercv method)": [[639, "sklearn.linear_model.RidgeClassifierCV.decision_function"]], "fit() (sklearn.linear_model.ridgeclassifiercv method)": [[639, "sklearn.linear_model.RidgeClassifierCV.fit"]], "get_metadata_routing() (sklearn.linear_model.ridgeclassifiercv method)": [[639, "sklearn.linear_model.RidgeClassifierCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.ridgeclassifiercv method)": [[639, "sklearn.linear_model.RidgeClassifierCV.get_params"]], "predict() (sklearn.linear_model.ridgeclassifiercv method)": [[639, "sklearn.linear_model.RidgeClassifierCV.predict"]], "score() (sklearn.linear_model.ridgeclassifiercv method)": [[639, "sklearn.linear_model.RidgeClassifierCV.score"]], "set_fit_request() (sklearn.linear_model.ridgeclassifiercv method)": [[639, "sklearn.linear_model.RidgeClassifierCV.set_fit_request"]], "set_params() (sklearn.linear_model.ridgeclassifiercv method)": [[639, "sklearn.linear_model.RidgeClassifierCV.set_params"]], "set_score_request() (sklearn.linear_model.ridgeclassifiercv method)": [[639, "sklearn.linear_model.RidgeClassifierCV.set_score_request"]], "sgdclassifier (class in sklearn.linear_model)": [[640, "sklearn.linear_model.SGDClassifier"]], "decision_function() (sklearn.linear_model.sgdclassifier method)": [[640, "sklearn.linear_model.SGDClassifier.decision_function"]], "densify() (sklearn.linear_model.sgdclassifier method)": [[640, "sklearn.linear_model.SGDClassifier.densify"]], "fit() (sklearn.linear_model.sgdclassifier method)": [[640, "sklearn.linear_model.SGDClassifier.fit"]], "get_metadata_routing() (sklearn.linear_model.sgdclassifier method)": [[640, "sklearn.linear_model.SGDClassifier.get_metadata_routing"]], "get_params() (sklearn.linear_model.sgdclassifier method)": [[640, "sklearn.linear_model.SGDClassifier.get_params"]], "partial_fit() (sklearn.linear_model.sgdclassifier method)": [[640, "sklearn.linear_model.SGDClassifier.partial_fit"]], "predict() (sklearn.linear_model.sgdclassifier method)": [[640, "sklearn.linear_model.SGDClassifier.predict"]], "predict_log_proba() (sklearn.linear_model.sgdclassifier method)": [[640, "sklearn.linear_model.SGDClassifier.predict_log_proba"]], "predict_proba() (sklearn.linear_model.sgdclassifier method)": [[640, "sklearn.linear_model.SGDClassifier.predict_proba"]], "score() (sklearn.linear_model.sgdclassifier method)": [[640, "sklearn.linear_model.SGDClassifier.score"]], "set_fit_request() (sklearn.linear_model.sgdclassifier method)": [[640, "sklearn.linear_model.SGDClassifier.set_fit_request"]], "set_params() (sklearn.linear_model.sgdclassifier method)": [[640, "sklearn.linear_model.SGDClassifier.set_params"]], "set_partial_fit_request() (sklearn.linear_model.sgdclassifier method)": [[640, "sklearn.linear_model.SGDClassifier.set_partial_fit_request"]], "set_score_request() (sklearn.linear_model.sgdclassifier method)": [[640, "sklearn.linear_model.SGDClassifier.set_score_request"]], "sparsify() (sklearn.linear_model.sgdclassifier method)": [[640, "sklearn.linear_model.SGDClassifier.sparsify"]], "sgdoneclasssvm (class in sklearn.linear_model)": [[641, "sklearn.linear_model.SGDOneClassSVM"]], "decision_function() (sklearn.linear_model.sgdoneclasssvm method)": [[641, "sklearn.linear_model.SGDOneClassSVM.decision_function"]], "densify() (sklearn.linear_model.sgdoneclasssvm method)": [[641, "sklearn.linear_model.SGDOneClassSVM.densify"]], "fit() (sklearn.linear_model.sgdoneclasssvm method)": [[641, "sklearn.linear_model.SGDOneClassSVM.fit"]], "fit_predict() (sklearn.linear_model.sgdoneclasssvm method)": [[641, "sklearn.linear_model.SGDOneClassSVM.fit_predict"]], "get_metadata_routing() (sklearn.linear_model.sgdoneclasssvm method)": [[641, "sklearn.linear_model.SGDOneClassSVM.get_metadata_routing"]], "get_params() (sklearn.linear_model.sgdoneclasssvm method)": [[641, "sklearn.linear_model.SGDOneClassSVM.get_params"]], "partial_fit() (sklearn.linear_model.sgdoneclasssvm method)": [[641, "sklearn.linear_model.SGDOneClassSVM.partial_fit"]], "predict() (sklearn.linear_model.sgdoneclasssvm method)": [[641, "sklearn.linear_model.SGDOneClassSVM.predict"]], "score_samples() (sklearn.linear_model.sgdoneclasssvm method)": [[641, "sklearn.linear_model.SGDOneClassSVM.score_samples"]], "set_fit_request() (sklearn.linear_model.sgdoneclasssvm method)": [[641, "sklearn.linear_model.SGDOneClassSVM.set_fit_request"]], "set_params() (sklearn.linear_model.sgdoneclasssvm method)": [[641, "sklearn.linear_model.SGDOneClassSVM.set_params"]], "set_partial_fit_request() (sklearn.linear_model.sgdoneclasssvm method)": [[641, "sklearn.linear_model.SGDOneClassSVM.set_partial_fit_request"]], "sparsify() (sklearn.linear_model.sgdoneclasssvm method)": [[641, "sklearn.linear_model.SGDOneClassSVM.sparsify"]], "sgdregressor (class in sklearn.linear_model)": [[642, "sklearn.linear_model.SGDRegressor"]], "densify() (sklearn.linear_model.sgdregressor method)": [[642, "sklearn.linear_model.SGDRegressor.densify"]], "fit() (sklearn.linear_model.sgdregressor method)": [[642, "sklearn.linear_model.SGDRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.sgdregressor method)": [[642, "sklearn.linear_model.SGDRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.sgdregressor method)": [[642, "sklearn.linear_model.SGDRegressor.get_params"]], "partial_fit() (sklearn.linear_model.sgdregressor method)": [[642, "sklearn.linear_model.SGDRegressor.partial_fit"]], "predict() (sklearn.linear_model.sgdregressor method)": [[642, "sklearn.linear_model.SGDRegressor.predict"]], "score() (sklearn.linear_model.sgdregressor method)": [[642, "sklearn.linear_model.SGDRegressor.score"]], "set_fit_request() (sklearn.linear_model.sgdregressor method)": [[642, "sklearn.linear_model.SGDRegressor.set_fit_request"]], "set_params() (sklearn.linear_model.sgdregressor method)": [[642, "sklearn.linear_model.SGDRegressor.set_params"]], "set_partial_fit_request() (sklearn.linear_model.sgdregressor method)": [[642, "sklearn.linear_model.SGDRegressor.set_partial_fit_request"]], "set_score_request() (sklearn.linear_model.sgdregressor method)": [[642, "sklearn.linear_model.SGDRegressor.set_score_request"]], "sparsify() (sklearn.linear_model.sgdregressor method)": [[642, "sklearn.linear_model.SGDRegressor.sparsify"]], "theilsenregressor (class in sklearn.linear_model)": [[643, "sklearn.linear_model.TheilSenRegressor"]], "fit() (sklearn.linear_model.theilsenregressor method)": [[643, "sklearn.linear_model.TheilSenRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.theilsenregressor method)": [[643, "sklearn.linear_model.TheilSenRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.theilsenregressor method)": [[643, "sklearn.linear_model.TheilSenRegressor.get_params"]], "predict() (sklearn.linear_model.theilsenregressor method)": [[643, "sklearn.linear_model.TheilSenRegressor.predict"]], "score() (sklearn.linear_model.theilsenregressor method)": [[643, "sklearn.linear_model.TheilSenRegressor.score"]], "set_params() (sklearn.linear_model.theilsenregressor method)": [[643, "sklearn.linear_model.TheilSenRegressor.set_params"]], "set_score_request() (sklearn.linear_model.theilsenregressor method)": [[643, "sklearn.linear_model.TheilSenRegressor.set_score_request"]], "tweedieregressor (class in sklearn.linear_model)": [[644, "sklearn.linear_model.TweedieRegressor"]], "fit() (sklearn.linear_model.tweedieregressor method)": [[644, "sklearn.linear_model.TweedieRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.tweedieregressor method)": [[644, "sklearn.linear_model.TweedieRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.tweedieregressor method)": [[644, "sklearn.linear_model.TweedieRegressor.get_params"]], "predict() (sklearn.linear_model.tweedieregressor method)": [[644, "sklearn.linear_model.TweedieRegressor.predict"]], "score() (sklearn.linear_model.tweedieregressor method)": [[644, "sklearn.linear_model.TweedieRegressor.score"]], "set_fit_request() (sklearn.linear_model.tweedieregressor method)": [[644, "sklearn.linear_model.TweedieRegressor.set_fit_request"]], "set_params() (sklearn.linear_model.tweedieregressor method)": [[644, "sklearn.linear_model.TweedieRegressor.set_params"]], "set_score_request() (sklearn.linear_model.tweedieregressor method)": [[644, "sklearn.linear_model.TweedieRegressor.set_score_request"]], "enet_path() (in module sklearn.linear_model)": [[645, "sklearn.linear_model.enet_path"]], "lars_path() (in module sklearn.linear_model)": [[646, "sklearn.linear_model.lars_path"]], "lars_path_gram() (in module sklearn.linear_model)": [[647, "sklearn.linear_model.lars_path_gram"]], "lasso_path() (in module sklearn.linear_model)": [[648, "sklearn.linear_model.lasso_path"]], "orthogonal_mp() (in module sklearn.linear_model)": [[649, "sklearn.linear_model.orthogonal_mp"]], "orthogonal_mp_gram() (in module sklearn.linear_model)": [[650, "sklearn.linear_model.orthogonal_mp_gram"]], "ridge_regression() (in module sklearn.linear_model)": [[651, "sklearn.linear_model.ridge_regression"]], "isomap (class in sklearn.manifold)": [[652, "sklearn.manifold.Isomap"]], "fit() (sklearn.manifold.isomap method)": [[652, "sklearn.manifold.Isomap.fit"]], "fit_transform() (sklearn.manifold.isomap method)": [[652, "sklearn.manifold.Isomap.fit_transform"]], "get_feature_names_out() (sklearn.manifold.isomap method)": [[652, "sklearn.manifold.Isomap.get_feature_names_out"]], "get_metadata_routing() (sklearn.manifold.isomap method)": [[652, "sklearn.manifold.Isomap.get_metadata_routing"]], "get_params() (sklearn.manifold.isomap method)": [[652, "sklearn.manifold.Isomap.get_params"]], "reconstruction_error() (sklearn.manifold.isomap method)": [[652, "sklearn.manifold.Isomap.reconstruction_error"]], "set_output() (sklearn.manifold.isomap method)": [[652, "sklearn.manifold.Isomap.set_output"]], "set_params() (sklearn.manifold.isomap method)": [[652, "sklearn.manifold.Isomap.set_params"]], "transform() (sklearn.manifold.isomap method)": [[652, "sklearn.manifold.Isomap.transform"]], "locallylinearembedding (class in sklearn.manifold)": [[653, "sklearn.manifold.LocallyLinearEmbedding"]], "fit() (sklearn.manifold.locallylinearembedding method)": [[653, "sklearn.manifold.LocallyLinearEmbedding.fit"]], "fit_transform() (sklearn.manifold.locallylinearembedding method)": [[653, "sklearn.manifold.LocallyLinearEmbedding.fit_transform"]], "get_feature_names_out() (sklearn.manifold.locallylinearembedding method)": [[653, "sklearn.manifold.LocallyLinearEmbedding.get_feature_names_out"]], "get_metadata_routing() (sklearn.manifold.locallylinearembedding method)": [[653, "sklearn.manifold.LocallyLinearEmbedding.get_metadata_routing"]], "get_params() (sklearn.manifold.locallylinearembedding method)": [[653, "sklearn.manifold.LocallyLinearEmbedding.get_params"]], "set_output() (sklearn.manifold.locallylinearembedding method)": [[653, "sklearn.manifold.LocallyLinearEmbedding.set_output"]], "set_params() (sklearn.manifold.locallylinearembedding method)": [[653, "sklearn.manifold.LocallyLinearEmbedding.set_params"]], "transform() (sklearn.manifold.locallylinearembedding method)": [[653, "sklearn.manifold.LocallyLinearEmbedding.transform"]], "mds (class in sklearn.manifold)": [[654, "sklearn.manifold.MDS"]], "fit() (sklearn.manifold.mds method)": [[654, "sklearn.manifold.MDS.fit"]], "fit_transform() (sklearn.manifold.mds method)": [[654, "sklearn.manifold.MDS.fit_transform"]], "get_metadata_routing() (sklearn.manifold.mds method)": [[654, "sklearn.manifold.MDS.get_metadata_routing"]], "get_params() (sklearn.manifold.mds method)": [[654, "sklearn.manifold.MDS.get_params"]], "set_fit_request() (sklearn.manifold.mds method)": [[654, "sklearn.manifold.MDS.set_fit_request"]], "set_params() (sklearn.manifold.mds method)": [[654, "sklearn.manifold.MDS.set_params"]], "spectralembedding (class in sklearn.manifold)": [[655, "sklearn.manifold.SpectralEmbedding"]], "fit() (sklearn.manifold.spectralembedding method)": [[655, "sklearn.manifold.SpectralEmbedding.fit"]], "fit_transform() (sklearn.manifold.spectralembedding method)": [[655, "sklearn.manifold.SpectralEmbedding.fit_transform"]], "get_metadata_routing() (sklearn.manifold.spectralembedding method)": [[655, "sklearn.manifold.SpectralEmbedding.get_metadata_routing"]], "get_params() (sklearn.manifold.spectralembedding method)": [[655, "sklearn.manifold.SpectralEmbedding.get_params"]], "set_params() (sklearn.manifold.spectralembedding method)": [[655, "sklearn.manifold.SpectralEmbedding.set_params"]], "tsne (class in sklearn.manifold)": [[656, "sklearn.manifold.TSNE"]], "fit() (sklearn.manifold.tsne method)": [[656, "sklearn.manifold.TSNE.fit"]], "fit_transform() (sklearn.manifold.tsne method)": [[656, "sklearn.manifold.TSNE.fit_transform"]], "get_feature_names_out() (sklearn.manifold.tsne method)": [[656, "sklearn.manifold.TSNE.get_feature_names_out"]], "get_metadata_routing() (sklearn.manifold.tsne method)": [[656, "sklearn.manifold.TSNE.get_metadata_routing"]], "get_params() (sklearn.manifold.tsne method)": [[656, "sklearn.manifold.TSNE.get_params"]], "set_output() (sklearn.manifold.tsne method)": [[656, "sklearn.manifold.TSNE.set_output"]], "set_params() (sklearn.manifold.tsne method)": [[656, "sklearn.manifold.TSNE.set_params"]], "locally_linear_embedding() (in module sklearn.manifold)": [[657, "sklearn.manifold.locally_linear_embedding"]], "smacof() (in module sklearn.manifold)": [[658, "sklearn.manifold.smacof"]], "spectral_embedding() (in module sklearn.manifold)": [[659, "sklearn.manifold.spectral_embedding"]], "trustworthiness() (in module sklearn.manifold)": [[660, "sklearn.manifold.trustworthiness"]], "confusionmatrixdisplay (class in sklearn.metrics)": [[661, "sklearn.metrics.ConfusionMatrixDisplay"]], "from_estimator() (sklearn.metrics.confusionmatrixdisplay class method)": [[661, "sklearn.metrics.ConfusionMatrixDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.confusionmatrixdisplay class method)": [[661, "sklearn.metrics.ConfusionMatrixDisplay.from_predictions"]], "plot() (sklearn.metrics.confusionmatrixdisplay method)": [[661, "sklearn.metrics.ConfusionMatrixDisplay.plot"]], "detcurvedisplay (class in sklearn.metrics)": [[662, "sklearn.metrics.DetCurveDisplay"]], "from_estimator() (sklearn.metrics.detcurvedisplay class method)": [[662, "sklearn.metrics.DetCurveDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.detcurvedisplay class method)": [[662, "sklearn.metrics.DetCurveDisplay.from_predictions"]], "plot() (sklearn.metrics.detcurvedisplay method)": [[662, "sklearn.metrics.DetCurveDisplay.plot"]], "distancemetric (class in sklearn.metrics)": [[663, "sklearn.metrics.DistanceMetric"]], "get_metric() (sklearn.metrics.distancemetric class method)": [[663, "sklearn.metrics.DistanceMetric.get_metric"]], "precisionrecalldisplay (class in sklearn.metrics)": [[664, "sklearn.metrics.PrecisionRecallDisplay"]], "from_estimator() (sklearn.metrics.precisionrecalldisplay class method)": [[664, "sklearn.metrics.PrecisionRecallDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.precisionrecalldisplay class method)": [[664, "sklearn.metrics.PrecisionRecallDisplay.from_predictions"]], "plot() (sklearn.metrics.precisionrecalldisplay method)": [[664, "sklearn.metrics.PrecisionRecallDisplay.plot"]], "predictionerrordisplay (class in sklearn.metrics)": [[665, "sklearn.metrics.PredictionErrorDisplay"]], "from_estimator() (sklearn.metrics.predictionerrordisplay class method)": [[665, "sklearn.metrics.PredictionErrorDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.predictionerrordisplay class method)": [[665, "sklearn.metrics.PredictionErrorDisplay.from_predictions"]], "plot() (sklearn.metrics.predictionerrordisplay method)": [[665, "sklearn.metrics.PredictionErrorDisplay.plot"]], "roccurvedisplay (class in sklearn.metrics)": [[666, "sklearn.metrics.RocCurveDisplay"]], "from_estimator() (sklearn.metrics.roccurvedisplay class method)": [[666, "sklearn.metrics.RocCurveDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.roccurvedisplay class method)": [[666, "sklearn.metrics.RocCurveDisplay.from_predictions"]], "plot() (sklearn.metrics.roccurvedisplay method)": [[666, "sklearn.metrics.RocCurveDisplay.plot"]], "accuracy_score() (in module sklearn.metrics)": [[667, "sklearn.metrics.accuracy_score"]], "adjusted_mutual_info_score() (in module sklearn.metrics)": [[668, "sklearn.metrics.adjusted_mutual_info_score"]], "adjusted_rand_score() (in module sklearn.metrics)": [[669, "sklearn.metrics.adjusted_rand_score"]], "auc() (in module sklearn.metrics)": [[670, "sklearn.metrics.auc"]], "average_precision_score() (in module sklearn.metrics)": [[671, "sklearn.metrics.average_precision_score"]], "balanced_accuracy_score() (in module sklearn.metrics)": [[672, "sklearn.metrics.balanced_accuracy_score"]], "brier_score_loss() (in module sklearn.metrics)": [[673, "sklearn.metrics.brier_score_loss"]], "calinski_harabasz_score() (in module sklearn.metrics)": [[674, "sklearn.metrics.calinski_harabasz_score"]], "check_scoring() (in module sklearn.metrics)": [[675, "sklearn.metrics.check_scoring"]], "class_likelihood_ratios() (in module sklearn.metrics)": [[676, "sklearn.metrics.class_likelihood_ratios"]], "classification_report() (in module sklearn.metrics)": [[677, "sklearn.metrics.classification_report"]], "contingency_matrix() (in module sklearn.metrics.cluster)": [[678, "sklearn.metrics.cluster.contingency_matrix"]], "pair_confusion_matrix() (in module sklearn.metrics.cluster)": [[679, "sklearn.metrics.cluster.pair_confusion_matrix"]], "cohen_kappa_score() (in module sklearn.metrics)": [[680, "sklearn.metrics.cohen_kappa_score"]], "completeness_score() (in module sklearn.metrics)": [[681, "sklearn.metrics.completeness_score"]], "confusion_matrix() (in module sklearn.metrics)": [[682, "sklearn.metrics.confusion_matrix"]], "consensus_score() (in module sklearn.metrics)": [[683, "sklearn.metrics.consensus_score"]], "coverage_error() (in module sklearn.metrics)": [[684, "sklearn.metrics.coverage_error"]], "d2_absolute_error_score() (in module sklearn.metrics)": [[685, "sklearn.metrics.d2_absolute_error_score"]], "d2_pinball_score() (in module sklearn.metrics)": [[686, "sklearn.metrics.d2_pinball_score"]], "d2_tweedie_score() (in module sklearn.metrics)": [[687, "sklearn.metrics.d2_tweedie_score"]], "davies_bouldin_score() (in module sklearn.metrics)": [[688, "sklearn.metrics.davies_bouldin_score"]], "dcg_score() (in module sklearn.metrics)": [[689, "sklearn.metrics.dcg_score"]], "det_curve() (in module sklearn.metrics)": [[690, "sklearn.metrics.det_curve"]], "explained_variance_score() (in module sklearn.metrics)": [[691, "sklearn.metrics.explained_variance_score"]], "f1_score() (in module sklearn.metrics)": [[692, "sklearn.metrics.f1_score"]], "fbeta_score() (in module sklearn.metrics)": [[693, "sklearn.metrics.fbeta_score"]], "fowlkes_mallows_score() (in module sklearn.metrics)": [[694, "sklearn.metrics.fowlkes_mallows_score"]], "get_scorer() (in module sklearn.metrics)": [[695, "sklearn.metrics.get_scorer"]], "get_scorer_names() (in module sklearn.metrics)": [[696, "sklearn.metrics.get_scorer_names"]], "hamming_loss() (in module sklearn.metrics)": [[697, "sklearn.metrics.hamming_loss"]], "hinge_loss() (in module sklearn.metrics)": [[698, "sklearn.metrics.hinge_loss"]], "homogeneity_completeness_v_measure() (in module sklearn.metrics)": [[699, "sklearn.metrics.homogeneity_completeness_v_measure"]], "homogeneity_score() (in module sklearn.metrics)": [[700, "sklearn.metrics.homogeneity_score"]], "jaccard_score() (in module sklearn.metrics)": [[701, "sklearn.metrics.jaccard_score"]], "label_ranking_average_precision_score() (in module sklearn.metrics)": [[702, "sklearn.metrics.label_ranking_average_precision_score"]], "label_ranking_loss() (in module sklearn.metrics)": [[703, "sklearn.metrics.label_ranking_loss"]], "log_loss() (in module sklearn.metrics)": [[704, "sklearn.metrics.log_loss"]], "make_scorer() (in module sklearn.metrics)": [[705, "sklearn.metrics.make_scorer"]], "matthews_corrcoef() (in module sklearn.metrics)": [[706, "sklearn.metrics.matthews_corrcoef"]], "max_error() (in module sklearn.metrics)": [[707, "sklearn.metrics.max_error"]], "mean_absolute_error() (in module sklearn.metrics)": [[708, "sklearn.metrics.mean_absolute_error"]], "mean_absolute_percentage_error() (in module sklearn.metrics)": [[709, "sklearn.metrics.mean_absolute_percentage_error"]], "mean_gamma_deviance() (in module sklearn.metrics)": [[710, "sklearn.metrics.mean_gamma_deviance"]], "mean_pinball_loss() (in module sklearn.metrics)": [[711, "sklearn.metrics.mean_pinball_loss"]], "mean_poisson_deviance() (in module sklearn.metrics)": [[712, "sklearn.metrics.mean_poisson_deviance"]], "mean_squared_error() (in module sklearn.metrics)": [[713, "sklearn.metrics.mean_squared_error"]], "mean_squared_log_error() (in module sklearn.metrics)": [[714, "sklearn.metrics.mean_squared_log_error"]], "mean_tweedie_deviance() (in module sklearn.metrics)": [[715, "sklearn.metrics.mean_tweedie_deviance"]], "median_absolute_error() (in module sklearn.metrics)": [[716, "sklearn.metrics.median_absolute_error"]], "multilabel_confusion_matrix() (in module sklearn.metrics)": [[717, "sklearn.metrics.multilabel_confusion_matrix"]], "mutual_info_score() (in module sklearn.metrics)": [[718, "sklearn.metrics.mutual_info_score"]], "ndcg_score() (in module sklearn.metrics)": [[719, "sklearn.metrics.ndcg_score"]], "normalized_mutual_info_score() (in module sklearn.metrics)": [[720, "sklearn.metrics.normalized_mutual_info_score"]], "additive_chi2_kernel() (in module sklearn.metrics.pairwise)": [[721, "sklearn.metrics.pairwise.additive_chi2_kernel"]], "chi2_kernel() (in module sklearn.metrics.pairwise)": [[722, "sklearn.metrics.pairwise.chi2_kernel"]], "cosine_distances() (in module sklearn.metrics.pairwise)": [[723, "sklearn.metrics.pairwise.cosine_distances"]], "cosine_similarity() (in module sklearn.metrics.pairwise)": [[724, "sklearn.metrics.pairwise.cosine_similarity"]], "distance_metrics() (in module sklearn.metrics.pairwise)": [[725, "sklearn.metrics.pairwise.distance_metrics"]], "euclidean_distances() (in module sklearn.metrics.pairwise)": [[726, "sklearn.metrics.pairwise.euclidean_distances"]], "haversine_distances() (in module sklearn.metrics.pairwise)": [[727, "sklearn.metrics.pairwise.haversine_distances"]], "kernel_metrics() (in module sklearn.metrics.pairwise)": [[728, "sklearn.metrics.pairwise.kernel_metrics"]], "laplacian_kernel() (in module sklearn.metrics.pairwise)": [[729, "sklearn.metrics.pairwise.laplacian_kernel"]], "linear_kernel() (in module sklearn.metrics.pairwise)": [[730, "sklearn.metrics.pairwise.linear_kernel"]], "manhattan_distances() (in module sklearn.metrics.pairwise)": [[731, "sklearn.metrics.pairwise.manhattan_distances"]], "nan_euclidean_distances() (in module sklearn.metrics.pairwise)": [[732, "sklearn.metrics.pairwise.nan_euclidean_distances"]], "paired_cosine_distances() (in module sklearn.metrics.pairwise)": [[733, "sklearn.metrics.pairwise.paired_cosine_distances"]], "paired_distances() (in module sklearn.metrics.pairwise)": [[734, "sklearn.metrics.pairwise.paired_distances"]], "paired_euclidean_distances() (in module sklearn.metrics.pairwise)": [[735, "sklearn.metrics.pairwise.paired_euclidean_distances"]], "paired_manhattan_distances() (in module sklearn.metrics.pairwise)": [[736, "sklearn.metrics.pairwise.paired_manhattan_distances"]], "pairwise_kernels() (in module sklearn.metrics.pairwise)": [[737, "sklearn.metrics.pairwise.pairwise_kernels"]], "polynomial_kernel() (in module sklearn.metrics.pairwise)": [[738, "sklearn.metrics.pairwise.polynomial_kernel"]], "rbf_kernel() (in module sklearn.metrics.pairwise)": [[739, "sklearn.metrics.pairwise.rbf_kernel"]], "sigmoid_kernel() (in module sklearn.metrics.pairwise)": [[740, "sklearn.metrics.pairwise.sigmoid_kernel"]], "pairwise_distances() (in module sklearn.metrics)": [[741, "sklearn.metrics.pairwise_distances"]], "pairwise_distances_argmin() (in module sklearn.metrics)": [[742, "sklearn.metrics.pairwise_distances_argmin"]], "pairwise_distances_argmin_min() (in module sklearn.metrics)": [[743, "sklearn.metrics.pairwise_distances_argmin_min"]], "pairwise_distances_chunked() (in module sklearn.metrics)": [[744, "sklearn.metrics.pairwise_distances_chunked"]], "precision_recall_curve() (in module sklearn.metrics)": [[745, "sklearn.metrics.precision_recall_curve"]], "precision_recall_fscore_support() (in module sklearn.metrics)": [[746, "sklearn.metrics.precision_recall_fscore_support"]], "precision_score() (in module sklearn.metrics)": [[747, "sklearn.metrics.precision_score"]], "r2_score() (in module sklearn.metrics)": [[748, "sklearn.metrics.r2_score"]], "rand_score() (in module sklearn.metrics)": [[749, "sklearn.metrics.rand_score"]], "recall_score() (in module sklearn.metrics)": [[750, "sklearn.metrics.recall_score"]], "roc_auc_score() (in module sklearn.metrics)": [[751, "sklearn.metrics.roc_auc_score"]], "roc_curve() (in module sklearn.metrics)": [[752, "sklearn.metrics.roc_curve"]], "root_mean_squared_error() (in module sklearn.metrics)": [[753, "sklearn.metrics.root_mean_squared_error"]], "root_mean_squared_log_error() (in module sklearn.metrics)": [[754, "sklearn.metrics.root_mean_squared_log_error"]], "silhouette_samples() (in module sklearn.metrics)": [[755, "sklearn.metrics.silhouette_samples"]], "silhouette_score() (in module sklearn.metrics)": [[756, "sklearn.metrics.silhouette_score"]], "top_k_accuracy_score() (in module sklearn.metrics)": [[757, "sklearn.metrics.top_k_accuracy_score"]], "v_measure_score() (in module sklearn.metrics)": [[758, "sklearn.metrics.v_measure_score"]], "zero_one_loss() (in module sklearn.metrics)": [[759, "sklearn.metrics.zero_one_loss"]], "bayesiangaussianmixture (class in sklearn.mixture)": [[760, "sklearn.mixture.BayesianGaussianMixture"]], "fit() (sklearn.mixture.bayesiangaussianmixture method)": [[760, "sklearn.mixture.BayesianGaussianMixture.fit"]], "fit_predict() (sklearn.mixture.bayesiangaussianmixture method)": [[760, "sklearn.mixture.BayesianGaussianMixture.fit_predict"]], "get_metadata_routing() (sklearn.mixture.bayesiangaussianmixture method)": [[760, "sklearn.mixture.BayesianGaussianMixture.get_metadata_routing"]], "get_params() (sklearn.mixture.bayesiangaussianmixture method)": [[760, "sklearn.mixture.BayesianGaussianMixture.get_params"]], "predict() (sklearn.mixture.bayesiangaussianmixture method)": [[760, "sklearn.mixture.BayesianGaussianMixture.predict"]], "predict_proba() (sklearn.mixture.bayesiangaussianmixture method)": [[760, "sklearn.mixture.BayesianGaussianMixture.predict_proba"]], "sample() (sklearn.mixture.bayesiangaussianmixture method)": [[760, "sklearn.mixture.BayesianGaussianMixture.sample"]], "score() (sklearn.mixture.bayesiangaussianmixture method)": [[760, "sklearn.mixture.BayesianGaussianMixture.score"]], "score_samples() (sklearn.mixture.bayesiangaussianmixture method)": [[760, "sklearn.mixture.BayesianGaussianMixture.score_samples"]], "set_params() (sklearn.mixture.bayesiangaussianmixture method)": [[760, "sklearn.mixture.BayesianGaussianMixture.set_params"]], "gaussianmixture (class in sklearn.mixture)": [[761, "sklearn.mixture.GaussianMixture"]], "aic() (sklearn.mixture.gaussianmixture method)": [[761, "sklearn.mixture.GaussianMixture.aic"]], "bic() (sklearn.mixture.gaussianmixture method)": [[761, "sklearn.mixture.GaussianMixture.bic"]], "fit() (sklearn.mixture.gaussianmixture method)": [[761, "sklearn.mixture.GaussianMixture.fit"]], "fit_predict() (sklearn.mixture.gaussianmixture method)": [[761, "sklearn.mixture.GaussianMixture.fit_predict"]], "get_metadata_routing() (sklearn.mixture.gaussianmixture method)": [[761, "sklearn.mixture.GaussianMixture.get_metadata_routing"]], "get_params() (sklearn.mixture.gaussianmixture method)": [[761, "sklearn.mixture.GaussianMixture.get_params"]], "predict() (sklearn.mixture.gaussianmixture method)": [[761, "sklearn.mixture.GaussianMixture.predict"]], "predict_proba() (sklearn.mixture.gaussianmixture method)": [[761, "sklearn.mixture.GaussianMixture.predict_proba"]], "sample() (sklearn.mixture.gaussianmixture method)": [[761, "sklearn.mixture.GaussianMixture.sample"]], "score() (sklearn.mixture.gaussianmixture method)": [[761, "sklearn.mixture.GaussianMixture.score"]], "score_samples() (sklearn.mixture.gaussianmixture method)": [[761, "sklearn.mixture.GaussianMixture.score_samples"]], "set_params() (sklearn.mixture.gaussianmixture method)": [[761, "sklearn.mixture.GaussianMixture.set_params"]], "gridsearchcv (class in sklearn.model_selection)": [[762, "sklearn.model_selection.GridSearchCV"]], "classes_ (sklearn.model_selection.gridsearchcv property)": [[762, "sklearn.model_selection.GridSearchCV.classes_"]], "decision_function() (sklearn.model_selection.gridsearchcv method)": [[762, "sklearn.model_selection.GridSearchCV.decision_function"]], "fit() (sklearn.model_selection.gridsearchcv method)": [[762, "sklearn.model_selection.GridSearchCV.fit"]], "get_metadata_routing() (sklearn.model_selection.gridsearchcv method)": [[762, "sklearn.model_selection.GridSearchCV.get_metadata_routing"]], "get_params() (sklearn.model_selection.gridsearchcv method)": [[762, "sklearn.model_selection.GridSearchCV.get_params"]], "inverse_transform() (sklearn.model_selection.gridsearchcv method)": [[762, "sklearn.model_selection.GridSearchCV.inverse_transform"]], "n_features_in_ (sklearn.model_selection.gridsearchcv property)": [[762, "sklearn.model_selection.GridSearchCV.n_features_in_"]], "predict() (sklearn.model_selection.gridsearchcv method)": [[762, "sklearn.model_selection.GridSearchCV.predict"]], "predict_log_proba() (sklearn.model_selection.gridsearchcv method)": [[762, "sklearn.model_selection.GridSearchCV.predict_log_proba"]], "predict_proba() (sklearn.model_selection.gridsearchcv method)": [[762, "sklearn.model_selection.GridSearchCV.predict_proba"]], "score() (sklearn.model_selection.gridsearchcv method)": [[762, "sklearn.model_selection.GridSearchCV.score"]], "score_samples() (sklearn.model_selection.gridsearchcv method)": [[762, "sklearn.model_selection.GridSearchCV.score_samples"]], "set_params() (sklearn.model_selection.gridsearchcv method)": [[762, "sklearn.model_selection.GridSearchCV.set_params"]], "transform() (sklearn.model_selection.gridsearchcv method)": [[762, "sklearn.model_selection.GridSearchCV.transform"]], "groupkfold (class in sklearn.model_selection)": [[763, "sklearn.model_selection.GroupKFold"]], "get_metadata_routing() (sklearn.model_selection.groupkfold method)": [[763, "sklearn.model_selection.GroupKFold.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.groupkfold method)": [[763, "sklearn.model_selection.GroupKFold.get_n_splits"]], "set_split_request() (sklearn.model_selection.groupkfold method)": [[763, "sklearn.model_selection.GroupKFold.set_split_request"]], "split() (sklearn.model_selection.groupkfold method)": [[763, "sklearn.model_selection.GroupKFold.split"]], "groupshufflesplit (class in sklearn.model_selection)": [[764, "sklearn.model_selection.GroupShuffleSplit"]], "get_metadata_routing() (sklearn.model_selection.groupshufflesplit method)": [[764, "sklearn.model_selection.GroupShuffleSplit.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.groupshufflesplit method)": [[764, "sklearn.model_selection.GroupShuffleSplit.get_n_splits"]], "set_split_request() (sklearn.model_selection.groupshufflesplit method)": [[764, "sklearn.model_selection.GroupShuffleSplit.set_split_request"]], "split() (sklearn.model_selection.groupshufflesplit method)": [[764, "sklearn.model_selection.GroupShuffleSplit.split"]], "halvinggridsearchcv (class in sklearn.model_selection)": [[765, "sklearn.model_selection.HalvingGridSearchCV"]], "classes_ (sklearn.model_selection.halvinggridsearchcv property)": [[765, "sklearn.model_selection.HalvingGridSearchCV.classes_"]], "decision_function() (sklearn.model_selection.halvinggridsearchcv method)": [[765, "sklearn.model_selection.HalvingGridSearchCV.decision_function"]], "fit() (sklearn.model_selection.halvinggridsearchcv method)": [[765, "sklearn.model_selection.HalvingGridSearchCV.fit"]], "get_metadata_routing() (sklearn.model_selection.halvinggridsearchcv method)": [[765, "sklearn.model_selection.HalvingGridSearchCV.get_metadata_routing"]], "get_params() (sklearn.model_selection.halvinggridsearchcv method)": [[765, "sklearn.model_selection.HalvingGridSearchCV.get_params"]], "inverse_transform() (sklearn.model_selection.halvinggridsearchcv method)": [[765, "sklearn.model_selection.HalvingGridSearchCV.inverse_transform"]], "n_features_in_ (sklearn.model_selection.halvinggridsearchcv property)": [[765, "sklearn.model_selection.HalvingGridSearchCV.n_features_in_"]], "predict() (sklearn.model_selection.halvinggridsearchcv method)": [[765, "sklearn.model_selection.HalvingGridSearchCV.predict"]], "predict_log_proba() (sklearn.model_selection.halvinggridsearchcv method)": [[765, "sklearn.model_selection.HalvingGridSearchCV.predict_log_proba"]], "predict_proba() (sklearn.model_selection.halvinggridsearchcv method)": [[765, "sklearn.model_selection.HalvingGridSearchCV.predict_proba"]], "score() (sklearn.model_selection.halvinggridsearchcv method)": [[765, "sklearn.model_selection.HalvingGridSearchCV.score"]], "score_samples() (sklearn.model_selection.halvinggridsearchcv method)": [[765, "sklearn.model_selection.HalvingGridSearchCV.score_samples"]], "set_params() (sklearn.model_selection.halvinggridsearchcv method)": [[765, "sklearn.model_selection.HalvingGridSearchCV.set_params"]], "transform() (sklearn.model_selection.halvinggridsearchcv method)": [[765, "sklearn.model_selection.HalvingGridSearchCV.transform"]], "halvingrandomsearchcv (class in sklearn.model_selection)": [[766, "sklearn.model_selection.HalvingRandomSearchCV"]], "classes_ (sklearn.model_selection.halvingrandomsearchcv property)": [[766, "sklearn.model_selection.HalvingRandomSearchCV.classes_"]], "decision_function() (sklearn.model_selection.halvingrandomsearchcv method)": [[766, "sklearn.model_selection.HalvingRandomSearchCV.decision_function"]], "fit() (sklearn.model_selection.halvingrandomsearchcv method)": [[766, "sklearn.model_selection.HalvingRandomSearchCV.fit"]], "get_metadata_routing() (sklearn.model_selection.halvingrandomsearchcv method)": [[766, "sklearn.model_selection.HalvingRandomSearchCV.get_metadata_routing"]], "get_params() (sklearn.model_selection.halvingrandomsearchcv method)": [[766, "sklearn.model_selection.HalvingRandomSearchCV.get_params"]], "inverse_transform() (sklearn.model_selection.halvingrandomsearchcv method)": [[766, "sklearn.model_selection.HalvingRandomSearchCV.inverse_transform"]], "n_features_in_ (sklearn.model_selection.halvingrandomsearchcv property)": [[766, "sklearn.model_selection.HalvingRandomSearchCV.n_features_in_"]], "predict() (sklearn.model_selection.halvingrandomsearchcv method)": [[766, "sklearn.model_selection.HalvingRandomSearchCV.predict"]], "predict_log_proba() (sklearn.model_selection.halvingrandomsearchcv method)": [[766, "sklearn.model_selection.HalvingRandomSearchCV.predict_log_proba"]], "predict_proba() (sklearn.model_selection.halvingrandomsearchcv method)": [[766, "sklearn.model_selection.HalvingRandomSearchCV.predict_proba"]], "score() (sklearn.model_selection.halvingrandomsearchcv method)": [[766, "sklearn.model_selection.HalvingRandomSearchCV.score"]], "score_samples() (sklearn.model_selection.halvingrandomsearchcv method)": [[766, "sklearn.model_selection.HalvingRandomSearchCV.score_samples"]], "set_params() (sklearn.model_selection.halvingrandomsearchcv method)": [[766, "sklearn.model_selection.HalvingRandomSearchCV.set_params"]], "transform() (sklearn.model_selection.halvingrandomsearchcv method)": [[766, "sklearn.model_selection.HalvingRandomSearchCV.transform"]], "kfold (class in sklearn.model_selection)": [[767, "sklearn.model_selection.KFold"]], "get_metadata_routing() (sklearn.model_selection.kfold method)": [[767, "sklearn.model_selection.KFold.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.kfold method)": [[767, "sklearn.model_selection.KFold.get_n_splits"]], "split() (sklearn.model_selection.kfold method)": [[767, "sklearn.model_selection.KFold.split"]], "learningcurvedisplay (class in sklearn.model_selection)": [[768, "sklearn.model_selection.LearningCurveDisplay"]], "from_estimator() (sklearn.model_selection.learningcurvedisplay class method)": [[768, "sklearn.model_selection.LearningCurveDisplay.from_estimator"]], "plot() (sklearn.model_selection.learningcurvedisplay method)": [[768, "sklearn.model_selection.LearningCurveDisplay.plot"]], "leaveonegroupout (class in sklearn.model_selection)": [[769, "sklearn.model_selection.LeaveOneGroupOut"]], "get_metadata_routing() (sklearn.model_selection.leaveonegroupout method)": [[769, "sklearn.model_selection.LeaveOneGroupOut.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.leaveonegroupout method)": [[769, "sklearn.model_selection.LeaveOneGroupOut.get_n_splits"]], "set_split_request() (sklearn.model_selection.leaveonegroupout method)": [[769, "sklearn.model_selection.LeaveOneGroupOut.set_split_request"]], "split() (sklearn.model_selection.leaveonegroupout method)": [[769, "sklearn.model_selection.LeaveOneGroupOut.split"]], "leaveoneout (class in sklearn.model_selection)": [[770, "sklearn.model_selection.LeaveOneOut"]], "get_metadata_routing() (sklearn.model_selection.leaveoneout method)": [[770, "sklearn.model_selection.LeaveOneOut.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.leaveoneout method)": [[770, "sklearn.model_selection.LeaveOneOut.get_n_splits"]], "split() (sklearn.model_selection.leaveoneout method)": [[770, "sklearn.model_selection.LeaveOneOut.split"]], "leavepgroupsout (class in sklearn.model_selection)": [[771, "sklearn.model_selection.LeavePGroupsOut"]], "get_metadata_routing() (sklearn.model_selection.leavepgroupsout method)": [[771, "sklearn.model_selection.LeavePGroupsOut.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.leavepgroupsout method)": [[771, "sklearn.model_selection.LeavePGroupsOut.get_n_splits"]], "set_split_request() (sklearn.model_selection.leavepgroupsout method)": [[771, "sklearn.model_selection.LeavePGroupsOut.set_split_request"]], "split() (sklearn.model_selection.leavepgroupsout method)": [[771, "sklearn.model_selection.LeavePGroupsOut.split"]], "leavepout (class in sklearn.model_selection)": [[772, "sklearn.model_selection.LeavePOut"]], "get_metadata_routing() (sklearn.model_selection.leavepout method)": [[772, "sklearn.model_selection.LeavePOut.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.leavepout method)": [[772, "sklearn.model_selection.LeavePOut.get_n_splits"]], "split() (sklearn.model_selection.leavepout method)": [[772, "sklearn.model_selection.LeavePOut.split"]], "parametergrid (class in sklearn.model_selection)": [[773, "sklearn.model_selection.ParameterGrid"]], "parametersampler (class in sklearn.model_selection)": [[774, "sklearn.model_selection.ParameterSampler"]], "predefinedsplit (class in sklearn.model_selection)": [[775, "sklearn.model_selection.PredefinedSplit"]], "get_metadata_routing() (sklearn.model_selection.predefinedsplit method)": [[775, "sklearn.model_selection.PredefinedSplit.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.predefinedsplit method)": [[775, "sklearn.model_selection.PredefinedSplit.get_n_splits"]], "split() (sklearn.model_selection.predefinedsplit method)": [[775, "sklearn.model_selection.PredefinedSplit.split"]], "randomizedsearchcv (class in sklearn.model_selection)": [[776, "sklearn.model_selection.RandomizedSearchCV"]], "classes_ (sklearn.model_selection.randomizedsearchcv property)": [[776, "sklearn.model_selection.RandomizedSearchCV.classes_"]], "decision_function() (sklearn.model_selection.randomizedsearchcv method)": [[776, "sklearn.model_selection.RandomizedSearchCV.decision_function"]], "fit() (sklearn.model_selection.randomizedsearchcv method)": [[776, "sklearn.model_selection.RandomizedSearchCV.fit"]], "get_metadata_routing() (sklearn.model_selection.randomizedsearchcv method)": [[776, "sklearn.model_selection.RandomizedSearchCV.get_metadata_routing"]], "get_params() (sklearn.model_selection.randomizedsearchcv method)": [[776, "sklearn.model_selection.RandomizedSearchCV.get_params"]], "inverse_transform() (sklearn.model_selection.randomizedsearchcv method)": [[776, "sklearn.model_selection.RandomizedSearchCV.inverse_transform"]], "n_features_in_ (sklearn.model_selection.randomizedsearchcv property)": [[776, "sklearn.model_selection.RandomizedSearchCV.n_features_in_"]], "predict() (sklearn.model_selection.randomizedsearchcv method)": [[776, "sklearn.model_selection.RandomizedSearchCV.predict"]], "predict_log_proba() (sklearn.model_selection.randomizedsearchcv method)": [[776, "sklearn.model_selection.RandomizedSearchCV.predict_log_proba"]], "predict_proba() (sklearn.model_selection.randomizedsearchcv method)": [[776, "sklearn.model_selection.RandomizedSearchCV.predict_proba"]], "score() (sklearn.model_selection.randomizedsearchcv method)": [[776, "sklearn.model_selection.RandomizedSearchCV.score"]], "score_samples() (sklearn.model_selection.randomizedsearchcv method)": [[776, "sklearn.model_selection.RandomizedSearchCV.score_samples"]], "set_params() (sklearn.model_selection.randomizedsearchcv method)": [[776, "sklearn.model_selection.RandomizedSearchCV.set_params"]], "transform() (sklearn.model_selection.randomizedsearchcv method)": [[776, "sklearn.model_selection.RandomizedSearchCV.transform"]], "repeatedkfold (class in sklearn.model_selection)": [[777, "sklearn.model_selection.RepeatedKFold"]], "get_metadata_routing() (sklearn.model_selection.repeatedkfold method)": [[777, "sklearn.model_selection.RepeatedKFold.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.repeatedkfold method)": [[777, "sklearn.model_selection.RepeatedKFold.get_n_splits"]], "split() (sklearn.model_selection.repeatedkfold method)": [[777, "sklearn.model_selection.RepeatedKFold.split"]], "repeatedstratifiedkfold (class in sklearn.model_selection)": [[778, "sklearn.model_selection.RepeatedStratifiedKFold"]], "get_metadata_routing() (sklearn.model_selection.repeatedstratifiedkfold method)": [[778, "sklearn.model_selection.RepeatedStratifiedKFold.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.repeatedstratifiedkfold method)": [[778, "sklearn.model_selection.RepeatedStratifiedKFold.get_n_splits"]], "split() (sklearn.model_selection.repeatedstratifiedkfold method)": [[778, "sklearn.model_selection.RepeatedStratifiedKFold.split"]], "shufflesplit (class in sklearn.model_selection)": [[779, "sklearn.model_selection.ShuffleSplit"]], "get_metadata_routing() (sklearn.model_selection.shufflesplit method)": [[779, "sklearn.model_selection.ShuffleSplit.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.shufflesplit method)": [[779, "sklearn.model_selection.ShuffleSplit.get_n_splits"]], "split() (sklearn.model_selection.shufflesplit method)": [[779, "sklearn.model_selection.ShuffleSplit.split"]], "stratifiedgroupkfold (class in sklearn.model_selection)": [[780, "sklearn.model_selection.StratifiedGroupKFold"]], "get_metadata_routing() (sklearn.model_selection.stratifiedgroupkfold method)": [[780, "sklearn.model_selection.StratifiedGroupKFold.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.stratifiedgroupkfold method)": [[780, "sklearn.model_selection.StratifiedGroupKFold.get_n_splits"]], "set_split_request() (sklearn.model_selection.stratifiedgroupkfold method)": [[780, "sklearn.model_selection.StratifiedGroupKFold.set_split_request"]], "split() (sklearn.model_selection.stratifiedgroupkfold method)": [[780, "sklearn.model_selection.StratifiedGroupKFold.split"]], "stratifiedkfold (class in sklearn.model_selection)": [[781, "sklearn.model_selection.StratifiedKFold"]], "get_metadata_routing() (sklearn.model_selection.stratifiedkfold method)": [[781, "sklearn.model_selection.StratifiedKFold.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.stratifiedkfold method)": [[781, "sklearn.model_selection.StratifiedKFold.get_n_splits"]], "split() (sklearn.model_selection.stratifiedkfold method)": [[781, "sklearn.model_selection.StratifiedKFold.split"]], "stratifiedshufflesplit (class in sklearn.model_selection)": [[782, "sklearn.model_selection.StratifiedShuffleSplit"]], "get_metadata_routing() (sklearn.model_selection.stratifiedshufflesplit method)": [[782, "sklearn.model_selection.StratifiedShuffleSplit.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.stratifiedshufflesplit method)": [[782, "sklearn.model_selection.StratifiedShuffleSplit.get_n_splits"]], "split() (sklearn.model_selection.stratifiedshufflesplit method)": [[782, "sklearn.model_selection.StratifiedShuffleSplit.split"]], "timeseriessplit (class in sklearn.model_selection)": [[783, "sklearn.model_selection.TimeSeriesSplit"]], "get_metadata_routing() (sklearn.model_selection.timeseriessplit method)": [[783, "sklearn.model_selection.TimeSeriesSplit.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.timeseriessplit method)": [[783, "sklearn.model_selection.TimeSeriesSplit.get_n_splits"]], "split() (sklearn.model_selection.timeseriessplit method)": [[783, "sklearn.model_selection.TimeSeriesSplit.split"]], "validationcurvedisplay (class in sklearn.model_selection)": [[784, "sklearn.model_selection.ValidationCurveDisplay"]], "from_estimator() (sklearn.model_selection.validationcurvedisplay class method)": [[784, "sklearn.model_selection.ValidationCurveDisplay.from_estimator"]], "plot() (sklearn.model_selection.validationcurvedisplay method)": [[784, "sklearn.model_selection.ValidationCurveDisplay.plot"]], "check_cv() (in module sklearn.model_selection)": [[785, "sklearn.model_selection.check_cv"]], "cross_val_predict() (in module sklearn.model_selection)": [[786, "sklearn.model_selection.cross_val_predict"]], "cross_val_score() (in module sklearn.model_selection)": [[787, "sklearn.model_selection.cross_val_score"]], "cross_validate() (in module sklearn.model_selection)": [[788, "sklearn.model_selection.cross_validate"]], "learning_curve() (in module sklearn.model_selection)": [[789, "sklearn.model_selection.learning_curve"]], "permutation_test_score() (in module sklearn.model_selection)": [[790, "sklearn.model_selection.permutation_test_score"]], "train_test_split() (in module sklearn.model_selection)": [[791, "sklearn.model_selection.train_test_split"]], "validation_curve() (in module sklearn.model_selection)": [[792, "sklearn.model_selection.validation_curve"]], "onevsoneclassifier (class in sklearn.multiclass)": [[793, "sklearn.multiclass.OneVsOneClassifier"]], "decision_function() (sklearn.multiclass.onevsoneclassifier method)": [[793, "sklearn.multiclass.OneVsOneClassifier.decision_function"]], "fit() (sklearn.multiclass.onevsoneclassifier method)": [[793, "sklearn.multiclass.OneVsOneClassifier.fit"]], "get_metadata_routing() (sklearn.multiclass.onevsoneclassifier method)": [[793, "sklearn.multiclass.OneVsOneClassifier.get_metadata_routing"]], "get_params() (sklearn.multiclass.onevsoneclassifier method)": [[793, "sklearn.multiclass.OneVsOneClassifier.get_params"]], "n_classes_ (sklearn.multiclass.onevsoneclassifier property)": [[793, "sklearn.multiclass.OneVsOneClassifier.n_classes_"]], "partial_fit() (sklearn.multiclass.onevsoneclassifier method)": [[793, "sklearn.multiclass.OneVsOneClassifier.partial_fit"]], "predict() (sklearn.multiclass.onevsoneclassifier method)": [[793, "sklearn.multiclass.OneVsOneClassifier.predict"]], "score() (sklearn.multiclass.onevsoneclassifier method)": [[793, "sklearn.multiclass.OneVsOneClassifier.score"]], "set_params() (sklearn.multiclass.onevsoneclassifier method)": [[793, "sklearn.multiclass.OneVsOneClassifier.set_params"]], "set_partial_fit_request() (sklearn.multiclass.onevsoneclassifier method)": [[793, "sklearn.multiclass.OneVsOneClassifier.set_partial_fit_request"]], "set_score_request() (sklearn.multiclass.onevsoneclassifier method)": [[793, "sklearn.multiclass.OneVsOneClassifier.set_score_request"]], "onevsrestclassifier (class in sklearn.multiclass)": [[794, "sklearn.multiclass.OneVsRestClassifier"]], "decision_function() (sklearn.multiclass.onevsrestclassifier method)": [[794, "sklearn.multiclass.OneVsRestClassifier.decision_function"]], "fit() (sklearn.multiclass.onevsrestclassifier method)": [[794, "sklearn.multiclass.OneVsRestClassifier.fit"]], "get_metadata_routing() (sklearn.multiclass.onevsrestclassifier method)": [[794, "sklearn.multiclass.OneVsRestClassifier.get_metadata_routing"]], "get_params() (sklearn.multiclass.onevsrestclassifier method)": [[794, "sklearn.multiclass.OneVsRestClassifier.get_params"]], "multilabel_ (sklearn.multiclass.onevsrestclassifier property)": [[794, "sklearn.multiclass.OneVsRestClassifier.multilabel_"]], "n_classes_ (sklearn.multiclass.onevsrestclassifier property)": [[794, "sklearn.multiclass.OneVsRestClassifier.n_classes_"]], "partial_fit() (sklearn.multiclass.onevsrestclassifier method)": [[794, "sklearn.multiclass.OneVsRestClassifier.partial_fit"]], "predict() (sklearn.multiclass.onevsrestclassifier method)": [[794, "sklearn.multiclass.OneVsRestClassifier.predict"]], "predict_proba() (sklearn.multiclass.onevsrestclassifier method)": [[794, "sklearn.multiclass.OneVsRestClassifier.predict_proba"]], "score() (sklearn.multiclass.onevsrestclassifier method)": [[794, "sklearn.multiclass.OneVsRestClassifier.score"]], "set_params() (sklearn.multiclass.onevsrestclassifier method)": [[794, "sklearn.multiclass.OneVsRestClassifier.set_params"]], "set_partial_fit_request() (sklearn.multiclass.onevsrestclassifier method)": [[794, "sklearn.multiclass.OneVsRestClassifier.set_partial_fit_request"]], "set_score_request() (sklearn.multiclass.onevsrestclassifier method)": [[794, "sklearn.multiclass.OneVsRestClassifier.set_score_request"]], "outputcodeclassifier (class in sklearn.multiclass)": [[795, "sklearn.multiclass.OutputCodeClassifier"]], "fit() (sklearn.multiclass.outputcodeclassifier method)": [[795, "sklearn.multiclass.OutputCodeClassifier.fit"]], "get_metadata_routing() (sklearn.multiclass.outputcodeclassifier method)": [[795, "sklearn.multiclass.OutputCodeClassifier.get_metadata_routing"]], "get_params() (sklearn.multiclass.outputcodeclassifier method)": [[795, "sklearn.multiclass.OutputCodeClassifier.get_params"]], "predict() (sklearn.multiclass.outputcodeclassifier method)": [[795, "sklearn.multiclass.OutputCodeClassifier.predict"]], "score() (sklearn.multiclass.outputcodeclassifier method)": [[795, "sklearn.multiclass.OutputCodeClassifier.score"]], "set_params() (sklearn.multiclass.outputcodeclassifier method)": [[795, "sklearn.multiclass.OutputCodeClassifier.set_params"]], "set_score_request() (sklearn.multiclass.outputcodeclassifier method)": [[795, "sklearn.multiclass.OutputCodeClassifier.set_score_request"]], "classifierchain (class in sklearn.multioutput)": [[796, "sklearn.multioutput.ClassifierChain"]], "decision_function() (sklearn.multioutput.classifierchain method)": [[796, "sklearn.multioutput.ClassifierChain.decision_function"]], "fit() (sklearn.multioutput.classifierchain method)": [[796, "sklearn.multioutput.ClassifierChain.fit"]], "get_metadata_routing() (sklearn.multioutput.classifierchain method)": [[796, "sklearn.multioutput.ClassifierChain.get_metadata_routing"]], "get_params() (sklearn.multioutput.classifierchain method)": [[796, "sklearn.multioutput.ClassifierChain.get_params"]], "predict() (sklearn.multioutput.classifierchain method)": [[796, "sklearn.multioutput.ClassifierChain.predict"]], "predict_log_proba() (sklearn.multioutput.classifierchain method)": [[796, "sklearn.multioutput.ClassifierChain.predict_log_proba"]], "predict_proba() (sklearn.multioutput.classifierchain method)": [[796, "sklearn.multioutput.ClassifierChain.predict_proba"]], "score() (sklearn.multioutput.classifierchain method)": [[796, "sklearn.multioutput.ClassifierChain.score"]], "set_params() (sklearn.multioutput.classifierchain method)": [[796, "sklearn.multioutput.ClassifierChain.set_params"]], "set_score_request() (sklearn.multioutput.classifierchain method)": [[796, "sklearn.multioutput.ClassifierChain.set_score_request"]], "multioutputclassifier (class in sklearn.multioutput)": [[797, "sklearn.multioutput.MultiOutputClassifier"]], "fit() (sklearn.multioutput.multioutputclassifier method)": [[797, "sklearn.multioutput.MultiOutputClassifier.fit"]], "get_metadata_routing() (sklearn.multioutput.multioutputclassifier method)": [[797, "sklearn.multioutput.MultiOutputClassifier.get_metadata_routing"]], "get_params() (sklearn.multioutput.multioutputclassifier method)": [[797, "sklearn.multioutput.MultiOutputClassifier.get_params"]], "partial_fit() (sklearn.multioutput.multioutputclassifier method)": [[797, "sklearn.multioutput.MultiOutputClassifier.partial_fit"]], "predict() (sklearn.multioutput.multioutputclassifier method)": [[797, "sklearn.multioutput.MultiOutputClassifier.predict"]], "predict_proba() (sklearn.multioutput.multioutputclassifier method)": [[797, "sklearn.multioutput.MultiOutputClassifier.predict_proba"]], "score() (sklearn.multioutput.multioutputclassifier method)": [[797, "sklearn.multioutput.MultiOutputClassifier.score"]], "set_fit_request() (sklearn.multioutput.multioutputclassifier method)": [[797, "sklearn.multioutput.MultiOutputClassifier.set_fit_request"]], "set_params() (sklearn.multioutput.multioutputclassifier method)": [[797, "sklearn.multioutput.MultiOutputClassifier.set_params"]], "set_partial_fit_request() (sklearn.multioutput.multioutputclassifier method)": [[797, "sklearn.multioutput.MultiOutputClassifier.set_partial_fit_request"]], "multioutputregressor (class in sklearn.multioutput)": [[798, "sklearn.multioutput.MultiOutputRegressor"]], "fit() (sklearn.multioutput.multioutputregressor method)": [[798, "sklearn.multioutput.MultiOutputRegressor.fit"]], "get_metadata_routing() (sklearn.multioutput.multioutputregressor method)": [[798, "sklearn.multioutput.MultiOutputRegressor.get_metadata_routing"]], "get_params() (sklearn.multioutput.multioutputregressor method)": [[798, "sklearn.multioutput.MultiOutputRegressor.get_params"]], "partial_fit() (sklearn.multioutput.multioutputregressor method)": [[798, "sklearn.multioutput.MultiOutputRegressor.partial_fit"]], "predict() (sklearn.multioutput.multioutputregressor method)": [[798, "sklearn.multioutput.MultiOutputRegressor.predict"]], "score() (sklearn.multioutput.multioutputregressor method)": [[798, "sklearn.multioutput.MultiOutputRegressor.score"]], "set_fit_request() (sklearn.multioutput.multioutputregressor method)": [[798, "sklearn.multioutput.MultiOutputRegressor.set_fit_request"]], "set_params() (sklearn.multioutput.multioutputregressor method)": [[798, "sklearn.multioutput.MultiOutputRegressor.set_params"]], "set_partial_fit_request() (sklearn.multioutput.multioutputregressor method)": [[798, "sklearn.multioutput.MultiOutputRegressor.set_partial_fit_request"]], "set_score_request() (sklearn.multioutput.multioutputregressor method)": [[798, "sklearn.multioutput.MultiOutputRegressor.set_score_request"]], "regressorchain (class in sklearn.multioutput)": [[799, "sklearn.multioutput.RegressorChain"]], "fit() (sklearn.multioutput.regressorchain method)": [[799, "sklearn.multioutput.RegressorChain.fit"]], "get_metadata_routing() (sklearn.multioutput.regressorchain method)": [[799, "sklearn.multioutput.RegressorChain.get_metadata_routing"]], "get_params() (sklearn.multioutput.regressorchain method)": [[799, "sklearn.multioutput.RegressorChain.get_params"]], "predict() (sklearn.multioutput.regressorchain method)": [[799, "sklearn.multioutput.RegressorChain.predict"]], "score() (sklearn.multioutput.regressorchain method)": [[799, "sklearn.multioutput.RegressorChain.score"]], "set_params() (sklearn.multioutput.regressorchain method)": [[799, "sklearn.multioutput.RegressorChain.set_params"]], "set_score_request() (sklearn.multioutput.regressorchain method)": [[799, "sklearn.multioutput.RegressorChain.set_score_request"]], "bernoullinb (class in sklearn.naive_bayes)": [[800, "sklearn.naive_bayes.BernoulliNB"]], "fit() (sklearn.naive_bayes.bernoullinb method)": [[800, "sklearn.naive_bayes.BernoulliNB.fit"]], "get_metadata_routing() (sklearn.naive_bayes.bernoullinb method)": [[800, "sklearn.naive_bayes.BernoulliNB.get_metadata_routing"]], "get_params() (sklearn.naive_bayes.bernoullinb method)": [[800, "sklearn.naive_bayes.BernoulliNB.get_params"]], "partial_fit() (sklearn.naive_bayes.bernoullinb method)": [[800, "sklearn.naive_bayes.BernoulliNB.partial_fit"]], "predict() (sklearn.naive_bayes.bernoullinb method)": [[800, "sklearn.naive_bayes.BernoulliNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.bernoullinb method)": [[800, "sklearn.naive_bayes.BernoulliNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.bernoullinb method)": [[800, "sklearn.naive_bayes.BernoulliNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.bernoullinb method)": [[800, "sklearn.naive_bayes.BernoulliNB.predict_proba"]], "score() (sklearn.naive_bayes.bernoullinb method)": [[800, "sklearn.naive_bayes.BernoulliNB.score"]], "set_fit_request() (sklearn.naive_bayes.bernoullinb method)": [[800, "sklearn.naive_bayes.BernoulliNB.set_fit_request"]], "set_params() (sklearn.naive_bayes.bernoullinb method)": [[800, "sklearn.naive_bayes.BernoulliNB.set_params"]], "set_partial_fit_request() (sklearn.naive_bayes.bernoullinb method)": [[800, "sklearn.naive_bayes.BernoulliNB.set_partial_fit_request"]], "set_score_request() (sklearn.naive_bayes.bernoullinb method)": [[800, "sklearn.naive_bayes.BernoulliNB.set_score_request"]], "categoricalnb (class in sklearn.naive_bayes)": [[801, "sklearn.naive_bayes.CategoricalNB"]], "fit() (sklearn.naive_bayes.categoricalnb method)": [[801, "sklearn.naive_bayes.CategoricalNB.fit"]], "get_metadata_routing() (sklearn.naive_bayes.categoricalnb method)": [[801, "sklearn.naive_bayes.CategoricalNB.get_metadata_routing"]], "get_params() (sklearn.naive_bayes.categoricalnb method)": [[801, "sklearn.naive_bayes.CategoricalNB.get_params"]], "partial_fit() (sklearn.naive_bayes.categoricalnb method)": [[801, "sklearn.naive_bayes.CategoricalNB.partial_fit"]], "predict() (sklearn.naive_bayes.categoricalnb method)": [[801, "sklearn.naive_bayes.CategoricalNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.categoricalnb method)": [[801, "sklearn.naive_bayes.CategoricalNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.categoricalnb method)": [[801, "sklearn.naive_bayes.CategoricalNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.categoricalnb method)": [[801, "sklearn.naive_bayes.CategoricalNB.predict_proba"]], "score() (sklearn.naive_bayes.categoricalnb method)": [[801, "sklearn.naive_bayes.CategoricalNB.score"]], "set_fit_request() (sklearn.naive_bayes.categoricalnb method)": [[801, "sklearn.naive_bayes.CategoricalNB.set_fit_request"]], "set_params() (sklearn.naive_bayes.categoricalnb method)": [[801, "sklearn.naive_bayes.CategoricalNB.set_params"]], "set_partial_fit_request() (sklearn.naive_bayes.categoricalnb method)": [[801, "sklearn.naive_bayes.CategoricalNB.set_partial_fit_request"]], "set_score_request() (sklearn.naive_bayes.categoricalnb method)": [[801, "sklearn.naive_bayes.CategoricalNB.set_score_request"]], "complementnb (class in sklearn.naive_bayes)": [[802, "sklearn.naive_bayes.ComplementNB"]], "fit() (sklearn.naive_bayes.complementnb method)": [[802, "sklearn.naive_bayes.ComplementNB.fit"]], "get_metadata_routing() (sklearn.naive_bayes.complementnb method)": [[802, "sklearn.naive_bayes.ComplementNB.get_metadata_routing"]], "get_params() (sklearn.naive_bayes.complementnb method)": [[802, "sklearn.naive_bayes.ComplementNB.get_params"]], "partial_fit() (sklearn.naive_bayes.complementnb method)": [[802, "sklearn.naive_bayes.ComplementNB.partial_fit"]], "predict() (sklearn.naive_bayes.complementnb method)": [[802, "sklearn.naive_bayes.ComplementNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.complementnb method)": [[802, "sklearn.naive_bayes.ComplementNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.complementnb method)": [[802, "sklearn.naive_bayes.ComplementNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.complementnb method)": [[802, "sklearn.naive_bayes.ComplementNB.predict_proba"]], "score() (sklearn.naive_bayes.complementnb method)": [[802, "sklearn.naive_bayes.ComplementNB.score"]], "set_fit_request() (sklearn.naive_bayes.complementnb method)": [[802, "sklearn.naive_bayes.ComplementNB.set_fit_request"]], "set_params() (sklearn.naive_bayes.complementnb method)": [[802, "sklearn.naive_bayes.ComplementNB.set_params"]], "set_partial_fit_request() (sklearn.naive_bayes.complementnb method)": [[802, "sklearn.naive_bayes.ComplementNB.set_partial_fit_request"]], "set_score_request() (sklearn.naive_bayes.complementnb method)": [[802, "sklearn.naive_bayes.ComplementNB.set_score_request"]], "gaussiannb (class in sklearn.naive_bayes)": [[803, "sklearn.naive_bayes.GaussianNB"]], "fit() (sklearn.naive_bayes.gaussiannb method)": [[803, "sklearn.naive_bayes.GaussianNB.fit"]], "get_metadata_routing() (sklearn.naive_bayes.gaussiannb method)": [[803, "sklearn.naive_bayes.GaussianNB.get_metadata_routing"]], "get_params() (sklearn.naive_bayes.gaussiannb method)": [[803, "sklearn.naive_bayes.GaussianNB.get_params"]], "partial_fit() (sklearn.naive_bayes.gaussiannb method)": [[803, "sklearn.naive_bayes.GaussianNB.partial_fit"]], "predict() (sklearn.naive_bayes.gaussiannb method)": [[803, "sklearn.naive_bayes.GaussianNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.gaussiannb method)": [[803, "sklearn.naive_bayes.GaussianNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.gaussiannb method)": [[803, "sklearn.naive_bayes.GaussianNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.gaussiannb method)": [[803, "sklearn.naive_bayes.GaussianNB.predict_proba"]], "score() (sklearn.naive_bayes.gaussiannb method)": [[803, "sklearn.naive_bayes.GaussianNB.score"]], "set_fit_request() (sklearn.naive_bayes.gaussiannb method)": [[803, "sklearn.naive_bayes.GaussianNB.set_fit_request"]], "set_params() (sklearn.naive_bayes.gaussiannb method)": [[803, "sklearn.naive_bayes.GaussianNB.set_params"]], "set_partial_fit_request() (sklearn.naive_bayes.gaussiannb method)": [[803, "sklearn.naive_bayes.GaussianNB.set_partial_fit_request"]], "set_score_request() (sklearn.naive_bayes.gaussiannb method)": [[803, "sklearn.naive_bayes.GaussianNB.set_score_request"]], "multinomialnb (class in sklearn.naive_bayes)": [[804, "sklearn.naive_bayes.MultinomialNB"]], "fit() (sklearn.naive_bayes.multinomialnb method)": [[804, "sklearn.naive_bayes.MultinomialNB.fit"]], "get_metadata_routing() (sklearn.naive_bayes.multinomialnb method)": [[804, "sklearn.naive_bayes.MultinomialNB.get_metadata_routing"]], "get_params() (sklearn.naive_bayes.multinomialnb method)": [[804, "sklearn.naive_bayes.MultinomialNB.get_params"]], "partial_fit() (sklearn.naive_bayes.multinomialnb method)": [[804, "sklearn.naive_bayes.MultinomialNB.partial_fit"]], "predict() (sklearn.naive_bayes.multinomialnb method)": [[804, "sklearn.naive_bayes.MultinomialNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.multinomialnb method)": [[804, "sklearn.naive_bayes.MultinomialNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.multinomialnb method)": [[804, "sklearn.naive_bayes.MultinomialNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.multinomialnb method)": [[804, "sklearn.naive_bayes.MultinomialNB.predict_proba"]], "score() (sklearn.naive_bayes.multinomialnb method)": [[804, "sklearn.naive_bayes.MultinomialNB.score"]], "set_fit_request() (sklearn.naive_bayes.multinomialnb method)": [[804, "sklearn.naive_bayes.MultinomialNB.set_fit_request"]], "set_params() (sklearn.naive_bayes.multinomialnb method)": [[804, "sklearn.naive_bayes.MultinomialNB.set_params"]], "set_partial_fit_request() (sklearn.naive_bayes.multinomialnb method)": [[804, "sklearn.naive_bayes.MultinomialNB.set_partial_fit_request"]], "set_score_request() (sklearn.naive_bayes.multinomialnb method)": [[804, "sklearn.naive_bayes.MultinomialNB.set_score_request"]], "balltree (class in sklearn.neighbors)": [[805, "sklearn.neighbors.BallTree"]], "get_arrays() (sklearn.neighbors.balltree method)": [[805, "sklearn.neighbors.BallTree.get_arrays"]], "get_n_calls() (sklearn.neighbors.balltree method)": [[805, "sklearn.neighbors.BallTree.get_n_calls"]], "get_tree_stats() (sklearn.neighbors.balltree method)": [[805, "sklearn.neighbors.BallTree.get_tree_stats"]], "kernel_density() (sklearn.neighbors.balltree method)": [[805, "sklearn.neighbors.BallTree.kernel_density"]], "query() (sklearn.neighbors.balltree method)": [[805, "sklearn.neighbors.BallTree.query"]], "query_radius() (sklearn.neighbors.balltree method)": [[805, "sklearn.neighbors.BallTree.query_radius"]], "reset_n_calls() (sklearn.neighbors.balltree method)": [[805, "sklearn.neighbors.BallTree.reset_n_calls"]], "two_point_correlation() (sklearn.neighbors.balltree method)": [[805, "sklearn.neighbors.BallTree.two_point_correlation"]], "kdtree (class in sklearn.neighbors)": [[806, "sklearn.neighbors.KDTree"]], "get_arrays() (sklearn.neighbors.kdtree method)": [[806, "sklearn.neighbors.KDTree.get_arrays"]], "get_n_calls() (sklearn.neighbors.kdtree method)": [[806, "sklearn.neighbors.KDTree.get_n_calls"]], "get_tree_stats() (sklearn.neighbors.kdtree method)": [[806, "sklearn.neighbors.KDTree.get_tree_stats"]], "kernel_density() (sklearn.neighbors.kdtree method)": [[806, "sklearn.neighbors.KDTree.kernel_density"]], "query() (sklearn.neighbors.kdtree method)": [[806, "sklearn.neighbors.KDTree.query"]], "query_radius() (sklearn.neighbors.kdtree method)": [[806, "sklearn.neighbors.KDTree.query_radius"]], "reset_n_calls() (sklearn.neighbors.kdtree method)": [[806, "sklearn.neighbors.KDTree.reset_n_calls"]], "two_point_correlation() (sklearn.neighbors.kdtree method)": [[806, "sklearn.neighbors.KDTree.two_point_correlation"]], "kneighborsclassifier (class in sklearn.neighbors)": [[807, "sklearn.neighbors.KNeighborsClassifier"]], "fit() (sklearn.neighbors.kneighborsclassifier method)": [[807, "sklearn.neighbors.KNeighborsClassifier.fit"]], "get_metadata_routing() (sklearn.neighbors.kneighborsclassifier method)": [[807, "sklearn.neighbors.KNeighborsClassifier.get_metadata_routing"]], "get_params() (sklearn.neighbors.kneighborsclassifier method)": [[807, "sklearn.neighbors.KNeighborsClassifier.get_params"]], "kneighbors() (sklearn.neighbors.kneighborsclassifier method)": [[807, "sklearn.neighbors.KNeighborsClassifier.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.kneighborsclassifier method)": [[807, "sklearn.neighbors.KNeighborsClassifier.kneighbors_graph"]], "predict() (sklearn.neighbors.kneighborsclassifier method)": [[807, "sklearn.neighbors.KNeighborsClassifier.predict"]], "predict_proba() (sklearn.neighbors.kneighborsclassifier method)": [[807, "sklearn.neighbors.KNeighborsClassifier.predict_proba"]], "score() (sklearn.neighbors.kneighborsclassifier method)": [[807, "sklearn.neighbors.KNeighborsClassifier.score"]], "set_params() (sklearn.neighbors.kneighborsclassifier method)": [[807, "sklearn.neighbors.KNeighborsClassifier.set_params"]], "set_score_request() (sklearn.neighbors.kneighborsclassifier method)": [[807, "sklearn.neighbors.KNeighborsClassifier.set_score_request"]], "kneighborsregressor (class in sklearn.neighbors)": [[808, "sklearn.neighbors.KNeighborsRegressor"]], "fit() (sklearn.neighbors.kneighborsregressor method)": [[808, "sklearn.neighbors.KNeighborsRegressor.fit"]], "get_metadata_routing() (sklearn.neighbors.kneighborsregressor method)": [[808, "sklearn.neighbors.KNeighborsRegressor.get_metadata_routing"]], "get_params() (sklearn.neighbors.kneighborsregressor method)": [[808, "sklearn.neighbors.KNeighborsRegressor.get_params"]], "kneighbors() (sklearn.neighbors.kneighborsregressor method)": [[808, "sklearn.neighbors.KNeighborsRegressor.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.kneighborsregressor method)": [[808, "sklearn.neighbors.KNeighborsRegressor.kneighbors_graph"]], "predict() (sklearn.neighbors.kneighborsregressor method)": [[808, "sklearn.neighbors.KNeighborsRegressor.predict"]], "score() (sklearn.neighbors.kneighborsregressor method)": [[808, "sklearn.neighbors.KNeighborsRegressor.score"]], "set_params() (sklearn.neighbors.kneighborsregressor method)": [[808, "sklearn.neighbors.KNeighborsRegressor.set_params"]], "set_score_request() (sklearn.neighbors.kneighborsregressor method)": [[808, "sklearn.neighbors.KNeighborsRegressor.set_score_request"]], "kneighborstransformer (class in sklearn.neighbors)": [[809, "sklearn.neighbors.KNeighborsTransformer"]], "fit() (sklearn.neighbors.kneighborstransformer method)": [[809, "sklearn.neighbors.KNeighborsTransformer.fit"]], "fit_transform() (sklearn.neighbors.kneighborstransformer method)": [[809, "sklearn.neighbors.KNeighborsTransformer.fit_transform"]], "get_feature_names_out() (sklearn.neighbors.kneighborstransformer method)": [[809, "sklearn.neighbors.KNeighborsTransformer.get_feature_names_out"]], "get_metadata_routing() (sklearn.neighbors.kneighborstransformer method)": [[809, "sklearn.neighbors.KNeighborsTransformer.get_metadata_routing"]], "get_params() (sklearn.neighbors.kneighborstransformer method)": [[809, "sklearn.neighbors.KNeighborsTransformer.get_params"]], "kneighbors() (sklearn.neighbors.kneighborstransformer method)": [[809, "sklearn.neighbors.KNeighborsTransformer.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.kneighborstransformer method)": [[809, "sklearn.neighbors.KNeighborsTransformer.kneighbors_graph"]], "set_output() (sklearn.neighbors.kneighborstransformer method)": [[809, "sklearn.neighbors.KNeighborsTransformer.set_output"]], "set_params() (sklearn.neighbors.kneighborstransformer method)": [[809, "sklearn.neighbors.KNeighborsTransformer.set_params"]], "transform() (sklearn.neighbors.kneighborstransformer method)": [[809, "sklearn.neighbors.KNeighborsTransformer.transform"]], "kerneldensity (class in sklearn.neighbors)": [[810, "sklearn.neighbors.KernelDensity"]], "fit() (sklearn.neighbors.kerneldensity method)": [[810, "sklearn.neighbors.KernelDensity.fit"]], "get_metadata_routing() (sklearn.neighbors.kerneldensity method)": [[810, "sklearn.neighbors.KernelDensity.get_metadata_routing"]], "get_params() (sklearn.neighbors.kerneldensity method)": [[810, "sklearn.neighbors.KernelDensity.get_params"]], "sample() (sklearn.neighbors.kerneldensity method)": [[810, "sklearn.neighbors.KernelDensity.sample"]], "score() (sklearn.neighbors.kerneldensity method)": [[810, "sklearn.neighbors.KernelDensity.score"]], "score_samples() (sklearn.neighbors.kerneldensity method)": [[810, "sklearn.neighbors.KernelDensity.score_samples"]], "set_fit_request() (sklearn.neighbors.kerneldensity method)": [[810, "sklearn.neighbors.KernelDensity.set_fit_request"]], "set_params() (sklearn.neighbors.kerneldensity method)": [[810, "sklearn.neighbors.KernelDensity.set_params"]], "localoutlierfactor (class in sklearn.neighbors)": [[811, "sklearn.neighbors.LocalOutlierFactor"]], "decision_function() (sklearn.neighbors.localoutlierfactor method)": [[811, "sklearn.neighbors.LocalOutlierFactor.decision_function"]], "fit() (sklearn.neighbors.localoutlierfactor method)": [[811, "sklearn.neighbors.LocalOutlierFactor.fit"]], "fit_predict() (sklearn.neighbors.localoutlierfactor method)": [[811, "sklearn.neighbors.LocalOutlierFactor.fit_predict"]], "get_metadata_routing() (sklearn.neighbors.localoutlierfactor method)": [[811, "sklearn.neighbors.LocalOutlierFactor.get_metadata_routing"]], "get_params() (sklearn.neighbors.localoutlierfactor method)": [[811, "sklearn.neighbors.LocalOutlierFactor.get_params"]], "kneighbors() (sklearn.neighbors.localoutlierfactor method)": [[811, "sklearn.neighbors.LocalOutlierFactor.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.localoutlierfactor method)": [[811, "sklearn.neighbors.LocalOutlierFactor.kneighbors_graph"]], "predict() (sklearn.neighbors.localoutlierfactor method)": [[811, "sklearn.neighbors.LocalOutlierFactor.predict"]], "score_samples() (sklearn.neighbors.localoutlierfactor method)": [[811, "sklearn.neighbors.LocalOutlierFactor.score_samples"]], "set_params() (sklearn.neighbors.localoutlierfactor method)": [[811, "sklearn.neighbors.LocalOutlierFactor.set_params"]], "nearestcentroid (class in sklearn.neighbors)": [[812, "sklearn.neighbors.NearestCentroid"]], "fit() (sklearn.neighbors.nearestcentroid method)": [[812, "sklearn.neighbors.NearestCentroid.fit"]], "get_metadata_routing() (sklearn.neighbors.nearestcentroid method)": [[812, "sklearn.neighbors.NearestCentroid.get_metadata_routing"]], "get_params() (sklearn.neighbors.nearestcentroid method)": [[812, "sklearn.neighbors.NearestCentroid.get_params"]], "predict() (sklearn.neighbors.nearestcentroid method)": [[812, "sklearn.neighbors.NearestCentroid.predict"]], "score() (sklearn.neighbors.nearestcentroid method)": [[812, "sklearn.neighbors.NearestCentroid.score"]], "set_params() (sklearn.neighbors.nearestcentroid method)": [[812, "sklearn.neighbors.NearestCentroid.set_params"]], "set_score_request() (sklearn.neighbors.nearestcentroid method)": [[812, "sklearn.neighbors.NearestCentroid.set_score_request"]], "nearestneighbors (class in sklearn.neighbors)": [[813, "sklearn.neighbors.NearestNeighbors"]], "fit() (sklearn.neighbors.nearestneighbors method)": [[813, "sklearn.neighbors.NearestNeighbors.fit"]], "get_metadata_routing() (sklearn.neighbors.nearestneighbors method)": [[813, "sklearn.neighbors.NearestNeighbors.get_metadata_routing"]], "get_params() (sklearn.neighbors.nearestneighbors method)": [[813, "sklearn.neighbors.NearestNeighbors.get_params"]], "kneighbors() (sklearn.neighbors.nearestneighbors method)": [[813, "sklearn.neighbors.NearestNeighbors.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.nearestneighbors method)": [[813, "sklearn.neighbors.NearestNeighbors.kneighbors_graph"]], "radius_neighbors() (sklearn.neighbors.nearestneighbors method)": [[813, "sklearn.neighbors.NearestNeighbors.radius_neighbors"]], "radius_neighbors_graph() (sklearn.neighbors.nearestneighbors method)": [[813, "sklearn.neighbors.NearestNeighbors.radius_neighbors_graph"]], "set_params() (sklearn.neighbors.nearestneighbors method)": [[813, "sklearn.neighbors.NearestNeighbors.set_params"]], "neighborhoodcomponentsanalysis (class in sklearn.neighbors)": [[814, "sklearn.neighbors.NeighborhoodComponentsAnalysis"]], "fit() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[814, "sklearn.neighbors.NeighborhoodComponentsAnalysis.fit"]], "fit_transform() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[814, "sklearn.neighbors.NeighborhoodComponentsAnalysis.fit_transform"]], "get_feature_names_out() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[814, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_feature_names_out"]], "get_metadata_routing() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[814, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_metadata_routing"]], "get_params() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[814, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_params"]], "set_output() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[814, "sklearn.neighbors.NeighborhoodComponentsAnalysis.set_output"]], "set_params() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[814, "sklearn.neighbors.NeighborhoodComponentsAnalysis.set_params"]], "transform() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[814, "sklearn.neighbors.NeighborhoodComponentsAnalysis.transform"]], "radiusneighborsclassifier (class in sklearn.neighbors)": [[815, "sklearn.neighbors.RadiusNeighborsClassifier"]], "fit() (sklearn.neighbors.radiusneighborsclassifier method)": [[815, "sklearn.neighbors.RadiusNeighborsClassifier.fit"]], "get_metadata_routing() (sklearn.neighbors.radiusneighborsclassifier method)": [[815, "sklearn.neighbors.RadiusNeighborsClassifier.get_metadata_routing"]], "get_params() (sklearn.neighbors.radiusneighborsclassifier method)": [[815, "sklearn.neighbors.RadiusNeighborsClassifier.get_params"]], "predict() (sklearn.neighbors.radiusneighborsclassifier method)": [[815, "sklearn.neighbors.RadiusNeighborsClassifier.predict"]], "predict_proba() (sklearn.neighbors.radiusneighborsclassifier method)": [[815, "sklearn.neighbors.RadiusNeighborsClassifier.predict_proba"]], "radius_neighbors() (sklearn.neighbors.radiusneighborsclassifier method)": [[815, "sklearn.neighbors.RadiusNeighborsClassifier.radius_neighbors"]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborsclassifier method)": [[815, "sklearn.neighbors.RadiusNeighborsClassifier.radius_neighbors_graph"]], "score() (sklearn.neighbors.radiusneighborsclassifier method)": [[815, "sklearn.neighbors.RadiusNeighborsClassifier.score"]], "set_params() (sklearn.neighbors.radiusneighborsclassifier method)": [[815, "sklearn.neighbors.RadiusNeighborsClassifier.set_params"]], "set_score_request() (sklearn.neighbors.radiusneighborsclassifier method)": [[815, "sklearn.neighbors.RadiusNeighborsClassifier.set_score_request"]], "radiusneighborsregressor (class in sklearn.neighbors)": [[816, "sklearn.neighbors.RadiusNeighborsRegressor"]], "fit() (sklearn.neighbors.radiusneighborsregressor method)": [[816, "sklearn.neighbors.RadiusNeighborsRegressor.fit"]], "get_metadata_routing() (sklearn.neighbors.radiusneighborsregressor method)": [[816, "sklearn.neighbors.RadiusNeighborsRegressor.get_metadata_routing"]], "get_params() (sklearn.neighbors.radiusneighborsregressor method)": [[816, "sklearn.neighbors.RadiusNeighborsRegressor.get_params"]], "predict() (sklearn.neighbors.radiusneighborsregressor method)": [[816, "sklearn.neighbors.RadiusNeighborsRegressor.predict"]], "radius_neighbors() (sklearn.neighbors.radiusneighborsregressor method)": [[816, "sklearn.neighbors.RadiusNeighborsRegressor.radius_neighbors"]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborsregressor method)": [[816, "sklearn.neighbors.RadiusNeighborsRegressor.radius_neighbors_graph"]], "score() (sklearn.neighbors.radiusneighborsregressor method)": [[816, "sklearn.neighbors.RadiusNeighborsRegressor.score"]], "set_params() (sklearn.neighbors.radiusneighborsregressor method)": [[816, "sklearn.neighbors.RadiusNeighborsRegressor.set_params"]], "set_score_request() (sklearn.neighbors.radiusneighborsregressor method)": [[816, "sklearn.neighbors.RadiusNeighborsRegressor.set_score_request"]], "radiusneighborstransformer (class in sklearn.neighbors)": [[817, "sklearn.neighbors.RadiusNeighborsTransformer"]], "fit() (sklearn.neighbors.radiusneighborstransformer method)": [[817, "sklearn.neighbors.RadiusNeighborsTransformer.fit"]], "fit_transform() (sklearn.neighbors.radiusneighborstransformer method)": [[817, "sklearn.neighbors.RadiusNeighborsTransformer.fit_transform"]], "get_feature_names_out() (sklearn.neighbors.radiusneighborstransformer method)": [[817, "sklearn.neighbors.RadiusNeighborsTransformer.get_feature_names_out"]], "get_metadata_routing() (sklearn.neighbors.radiusneighborstransformer method)": [[817, "sklearn.neighbors.RadiusNeighborsTransformer.get_metadata_routing"]], "get_params() (sklearn.neighbors.radiusneighborstransformer method)": [[817, "sklearn.neighbors.RadiusNeighborsTransformer.get_params"]], "radius_neighbors() (sklearn.neighbors.radiusneighborstransformer method)": [[817, "sklearn.neighbors.RadiusNeighborsTransformer.radius_neighbors"]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborstransformer method)": [[817, "sklearn.neighbors.RadiusNeighborsTransformer.radius_neighbors_graph"]], "set_output() (sklearn.neighbors.radiusneighborstransformer method)": [[817, "sklearn.neighbors.RadiusNeighborsTransformer.set_output"]], "set_params() (sklearn.neighbors.radiusneighborstransformer method)": [[817, "sklearn.neighbors.RadiusNeighborsTransformer.set_params"]], "transform() (sklearn.neighbors.radiusneighborstransformer method)": [[817, "sklearn.neighbors.RadiusNeighborsTransformer.transform"]], "kneighbors_graph() (in module sklearn.neighbors)": [[818, "sklearn.neighbors.kneighbors_graph"]], "radius_neighbors_graph() (in module sklearn.neighbors)": [[819, "sklearn.neighbors.radius_neighbors_graph"]], "sort_graph_by_row_values() (in module sklearn.neighbors)": [[820, "sklearn.neighbors.sort_graph_by_row_values"]], "bernoullirbm (class in sklearn.neural_network)": [[821, "sklearn.neural_network.BernoulliRBM"]], "fit() (sklearn.neural_network.bernoullirbm method)": [[821, "sklearn.neural_network.BernoulliRBM.fit"]], "fit_transform() (sklearn.neural_network.bernoullirbm method)": [[821, "sklearn.neural_network.BernoulliRBM.fit_transform"]], "get_feature_names_out() (sklearn.neural_network.bernoullirbm method)": [[821, "sklearn.neural_network.BernoulliRBM.get_feature_names_out"]], "get_metadata_routing() (sklearn.neural_network.bernoullirbm method)": [[821, "sklearn.neural_network.BernoulliRBM.get_metadata_routing"]], "get_params() (sklearn.neural_network.bernoullirbm method)": [[821, "sklearn.neural_network.BernoulliRBM.get_params"]], "gibbs() (sklearn.neural_network.bernoullirbm method)": [[821, "sklearn.neural_network.BernoulliRBM.gibbs"]], "partial_fit() (sklearn.neural_network.bernoullirbm method)": [[821, "sklearn.neural_network.BernoulliRBM.partial_fit"]], "score_samples() (sklearn.neural_network.bernoullirbm method)": [[821, "sklearn.neural_network.BernoulliRBM.score_samples"]], "set_output() (sklearn.neural_network.bernoullirbm method)": [[821, "sklearn.neural_network.BernoulliRBM.set_output"]], "set_params() (sklearn.neural_network.bernoullirbm method)": [[821, "sklearn.neural_network.BernoulliRBM.set_params"]], "transform() (sklearn.neural_network.bernoullirbm method)": [[821, "sklearn.neural_network.BernoulliRBM.transform"]], "mlpclassifier (class in sklearn.neural_network)": [[822, "sklearn.neural_network.MLPClassifier"]], "fit() (sklearn.neural_network.mlpclassifier method)": [[822, "sklearn.neural_network.MLPClassifier.fit"]], "get_metadata_routing() (sklearn.neural_network.mlpclassifier method)": [[822, "sklearn.neural_network.MLPClassifier.get_metadata_routing"]], "get_params() (sklearn.neural_network.mlpclassifier method)": [[822, "sklearn.neural_network.MLPClassifier.get_params"]], "partial_fit() (sklearn.neural_network.mlpclassifier method)": [[822, "sklearn.neural_network.MLPClassifier.partial_fit"]], "predict() (sklearn.neural_network.mlpclassifier method)": [[822, "sklearn.neural_network.MLPClassifier.predict"]], "predict_log_proba() (sklearn.neural_network.mlpclassifier method)": [[822, "sklearn.neural_network.MLPClassifier.predict_log_proba"]], "predict_proba() (sklearn.neural_network.mlpclassifier method)": [[822, "sklearn.neural_network.MLPClassifier.predict_proba"]], "score() (sklearn.neural_network.mlpclassifier method)": [[822, "sklearn.neural_network.MLPClassifier.score"]], "set_params() (sklearn.neural_network.mlpclassifier method)": [[822, "sklearn.neural_network.MLPClassifier.set_params"]], "set_partial_fit_request() (sklearn.neural_network.mlpclassifier method)": [[822, "sklearn.neural_network.MLPClassifier.set_partial_fit_request"]], "set_score_request() (sklearn.neural_network.mlpclassifier method)": [[822, "sklearn.neural_network.MLPClassifier.set_score_request"]], "mlpregressor (class in sklearn.neural_network)": [[823, "sklearn.neural_network.MLPRegressor"]], "fit() (sklearn.neural_network.mlpregressor method)": [[823, "sklearn.neural_network.MLPRegressor.fit"]], "get_metadata_routing() (sklearn.neural_network.mlpregressor method)": [[823, "sklearn.neural_network.MLPRegressor.get_metadata_routing"]], "get_params() (sklearn.neural_network.mlpregressor method)": [[823, "sklearn.neural_network.MLPRegressor.get_params"]], "partial_fit() (sklearn.neural_network.mlpregressor method)": [[823, "sklearn.neural_network.MLPRegressor.partial_fit"]], "predict() (sklearn.neural_network.mlpregressor method)": [[823, "sklearn.neural_network.MLPRegressor.predict"]], "score() (sklearn.neural_network.mlpregressor method)": [[823, "sklearn.neural_network.MLPRegressor.score"]], "set_params() (sklearn.neural_network.mlpregressor method)": [[823, "sklearn.neural_network.MLPRegressor.set_params"]], "set_score_request() (sklearn.neural_network.mlpregressor method)": [[823, "sklearn.neural_network.MLPRegressor.set_score_request"]], "featureunion (class in sklearn.pipeline)": [[824, "sklearn.pipeline.FeatureUnion"]], "feature_names_in_ (sklearn.pipeline.featureunion property)": [[824, "sklearn.pipeline.FeatureUnion.feature_names_in_"]], "fit() (sklearn.pipeline.featureunion method)": [[824, "sklearn.pipeline.FeatureUnion.fit"]], "fit_transform() (sklearn.pipeline.featureunion method)": [[824, "sklearn.pipeline.FeatureUnion.fit_transform"]], "get_feature_names_out() (sklearn.pipeline.featureunion method)": [[824, "sklearn.pipeline.FeatureUnion.get_feature_names_out"]], "get_metadata_routing() (sklearn.pipeline.featureunion method)": [[824, "sklearn.pipeline.FeatureUnion.get_metadata_routing"]], "get_params() (sklearn.pipeline.featureunion method)": [[824, "sklearn.pipeline.FeatureUnion.get_params"]], "n_features_in_ (sklearn.pipeline.featureunion property)": [[824, "sklearn.pipeline.FeatureUnion.n_features_in_"]], "set_output() (sklearn.pipeline.featureunion method)": [[824, "sklearn.pipeline.FeatureUnion.set_output"]], "set_params() (sklearn.pipeline.featureunion method)": [[824, "sklearn.pipeline.FeatureUnion.set_params"]], "transform() (sklearn.pipeline.featureunion method)": [[824, "sklearn.pipeline.FeatureUnion.transform"]], "pipeline (class in sklearn.pipeline)": [[825, "sklearn.pipeline.Pipeline"]], "classes_ (sklearn.pipeline.pipeline property)": [[825, "sklearn.pipeline.Pipeline.classes_"]], "decision_function() (sklearn.pipeline.pipeline method)": [[825, "sklearn.pipeline.Pipeline.decision_function"]], "feature_names_in_ (sklearn.pipeline.pipeline property)": [[825, "sklearn.pipeline.Pipeline.feature_names_in_"]], "fit() (sklearn.pipeline.pipeline method)": [[825, "sklearn.pipeline.Pipeline.fit"]], "fit_predict() (sklearn.pipeline.pipeline method)": [[825, "sklearn.pipeline.Pipeline.fit_predict"]], "fit_transform() (sklearn.pipeline.pipeline method)": [[825, "sklearn.pipeline.Pipeline.fit_transform"]], "get_feature_names_out() (sklearn.pipeline.pipeline method)": [[825, "sklearn.pipeline.Pipeline.get_feature_names_out"]], "get_metadata_routing() (sklearn.pipeline.pipeline method)": [[825, "sklearn.pipeline.Pipeline.get_metadata_routing"]], "get_params() (sklearn.pipeline.pipeline method)": [[825, "sklearn.pipeline.Pipeline.get_params"]], "inverse_transform() (sklearn.pipeline.pipeline method)": [[825, "sklearn.pipeline.Pipeline.inverse_transform"]], "n_features_in_ (sklearn.pipeline.pipeline property)": [[825, "sklearn.pipeline.Pipeline.n_features_in_"]], "named_steps (sklearn.pipeline.pipeline property)": [[825, "sklearn.pipeline.Pipeline.named_steps"]], "predict() (sklearn.pipeline.pipeline method)": [[825, "sklearn.pipeline.Pipeline.predict"]], "predict_log_proba() (sklearn.pipeline.pipeline method)": [[825, "sklearn.pipeline.Pipeline.predict_log_proba"]], "predict_proba() (sklearn.pipeline.pipeline method)": [[825, "sklearn.pipeline.Pipeline.predict_proba"]], "score() (sklearn.pipeline.pipeline method)": [[825, "sklearn.pipeline.Pipeline.score"]], "score_samples() (sklearn.pipeline.pipeline method)": [[825, "sklearn.pipeline.Pipeline.score_samples"]], "set_output() (sklearn.pipeline.pipeline method)": [[825, "sklearn.pipeline.Pipeline.set_output"]], "set_params() (sklearn.pipeline.pipeline method)": [[825, "sklearn.pipeline.Pipeline.set_params"]], "set_score_request() (sklearn.pipeline.pipeline method)": [[825, "sklearn.pipeline.Pipeline.set_score_request"]], "transform() (sklearn.pipeline.pipeline method)": [[825, "sklearn.pipeline.Pipeline.transform"]], "make_pipeline() (in module sklearn.pipeline)": [[826, "sklearn.pipeline.make_pipeline"]], "make_union() (in module sklearn.pipeline)": [[827, "sklearn.pipeline.make_union"]], "binarizer (class in sklearn.preprocessing)": [[828, "sklearn.preprocessing.Binarizer"]], "fit() (sklearn.preprocessing.binarizer method)": [[828, "sklearn.preprocessing.Binarizer.fit"]], "fit_transform() (sklearn.preprocessing.binarizer method)": [[828, "sklearn.preprocessing.Binarizer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.binarizer method)": [[828, "sklearn.preprocessing.Binarizer.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.binarizer method)": [[828, "sklearn.preprocessing.Binarizer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.binarizer method)": [[828, "sklearn.preprocessing.Binarizer.get_params"]], "set_output() (sklearn.preprocessing.binarizer method)": [[828, "sklearn.preprocessing.Binarizer.set_output"]], "set_params() (sklearn.preprocessing.binarizer method)": [[828, "sklearn.preprocessing.Binarizer.set_params"]], "set_transform_request() (sklearn.preprocessing.binarizer method)": [[828, "sklearn.preprocessing.Binarizer.set_transform_request"]], "transform() (sklearn.preprocessing.binarizer method)": [[828, "sklearn.preprocessing.Binarizer.transform"]], "functiontransformer (class in sklearn.preprocessing)": [[829, "sklearn.preprocessing.FunctionTransformer"]], "fit() (sklearn.preprocessing.functiontransformer method)": [[829, "sklearn.preprocessing.FunctionTransformer.fit"]], "fit_transform() (sklearn.preprocessing.functiontransformer method)": [[829, "sklearn.preprocessing.FunctionTransformer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.functiontransformer method)": [[829, "sklearn.preprocessing.FunctionTransformer.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.functiontransformer method)": [[829, "sklearn.preprocessing.FunctionTransformer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.functiontransformer method)": [[829, "sklearn.preprocessing.FunctionTransformer.get_params"]], "inverse_transform() (sklearn.preprocessing.functiontransformer method)": [[829, "sklearn.preprocessing.FunctionTransformer.inverse_transform"]], "set_output() (sklearn.preprocessing.functiontransformer method)": [[829, "sklearn.preprocessing.FunctionTransformer.set_output"]], "set_params() (sklearn.preprocessing.functiontransformer method)": [[829, "sklearn.preprocessing.FunctionTransformer.set_params"]], "transform() (sklearn.preprocessing.functiontransformer method)": [[829, "sklearn.preprocessing.FunctionTransformer.transform"]], "kbinsdiscretizer (class in sklearn.preprocessing)": [[830, "sklearn.preprocessing.KBinsDiscretizer"]], "fit() (sklearn.preprocessing.kbinsdiscretizer method)": [[830, "sklearn.preprocessing.KBinsDiscretizer.fit"]], "fit_transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[830, "sklearn.preprocessing.KBinsDiscretizer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.kbinsdiscretizer method)": [[830, "sklearn.preprocessing.KBinsDiscretizer.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.kbinsdiscretizer method)": [[830, "sklearn.preprocessing.KBinsDiscretizer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.kbinsdiscretizer method)": [[830, "sklearn.preprocessing.KBinsDiscretizer.get_params"]], "inverse_transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[830, "sklearn.preprocessing.KBinsDiscretizer.inverse_transform"]], "set_fit_request() (sklearn.preprocessing.kbinsdiscretizer method)": [[830, "sklearn.preprocessing.KBinsDiscretizer.set_fit_request"]], "set_output() (sklearn.preprocessing.kbinsdiscretizer method)": [[830, "sklearn.preprocessing.KBinsDiscretizer.set_output"]], "set_params() (sklearn.preprocessing.kbinsdiscretizer method)": [[830, "sklearn.preprocessing.KBinsDiscretizer.set_params"]], "transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[830, "sklearn.preprocessing.KBinsDiscretizer.transform"]], "kernelcenterer (class in sklearn.preprocessing)": [[831, "sklearn.preprocessing.KernelCenterer"]], "fit() (sklearn.preprocessing.kernelcenterer method)": [[831, "sklearn.preprocessing.KernelCenterer.fit"]], "fit_transform() (sklearn.preprocessing.kernelcenterer method)": [[831, "sklearn.preprocessing.KernelCenterer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.kernelcenterer method)": [[831, "sklearn.preprocessing.KernelCenterer.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.kernelcenterer method)": [[831, "sklearn.preprocessing.KernelCenterer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.kernelcenterer method)": [[831, "sklearn.preprocessing.KernelCenterer.get_params"]], "set_fit_request() (sklearn.preprocessing.kernelcenterer method)": [[831, "sklearn.preprocessing.KernelCenterer.set_fit_request"]], "set_output() (sklearn.preprocessing.kernelcenterer method)": [[831, "sklearn.preprocessing.KernelCenterer.set_output"]], "set_params() (sklearn.preprocessing.kernelcenterer method)": [[831, "sklearn.preprocessing.KernelCenterer.set_params"]], "set_transform_request() (sklearn.preprocessing.kernelcenterer method)": [[831, "sklearn.preprocessing.KernelCenterer.set_transform_request"]], "transform() (sklearn.preprocessing.kernelcenterer method)": [[831, "sklearn.preprocessing.KernelCenterer.transform"]], "labelbinarizer (class in sklearn.preprocessing)": [[832, "sklearn.preprocessing.LabelBinarizer"]], "fit() (sklearn.preprocessing.labelbinarizer method)": [[832, "sklearn.preprocessing.LabelBinarizer.fit"]], "fit_transform() (sklearn.preprocessing.labelbinarizer method)": [[832, "sklearn.preprocessing.LabelBinarizer.fit_transform"]], "get_metadata_routing() (sklearn.preprocessing.labelbinarizer method)": [[832, "sklearn.preprocessing.LabelBinarizer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.labelbinarizer method)": [[832, "sklearn.preprocessing.LabelBinarizer.get_params"]], "inverse_transform() (sklearn.preprocessing.labelbinarizer method)": [[832, "sklearn.preprocessing.LabelBinarizer.inverse_transform"]], "set_inverse_transform_request() (sklearn.preprocessing.labelbinarizer method)": [[832, "sklearn.preprocessing.LabelBinarizer.set_inverse_transform_request"]], "set_output() (sklearn.preprocessing.labelbinarizer method)": [[832, "sklearn.preprocessing.LabelBinarizer.set_output"]], "set_params() (sklearn.preprocessing.labelbinarizer method)": [[832, "sklearn.preprocessing.LabelBinarizer.set_params"]], "transform() (sklearn.preprocessing.labelbinarizer method)": [[832, "sklearn.preprocessing.LabelBinarizer.transform"]], "labelencoder (class in sklearn.preprocessing)": [[833, "sklearn.preprocessing.LabelEncoder"]], "fit() (sklearn.preprocessing.labelencoder method)": [[833, "sklearn.preprocessing.LabelEncoder.fit"]], "fit_transform() (sklearn.preprocessing.labelencoder method)": [[833, "sklearn.preprocessing.LabelEncoder.fit_transform"]], "get_metadata_routing() (sklearn.preprocessing.labelencoder method)": [[833, "sklearn.preprocessing.LabelEncoder.get_metadata_routing"]], "get_params() (sklearn.preprocessing.labelencoder method)": [[833, "sklearn.preprocessing.LabelEncoder.get_params"]], "inverse_transform() (sklearn.preprocessing.labelencoder method)": [[833, "sklearn.preprocessing.LabelEncoder.inverse_transform"]], "set_output() (sklearn.preprocessing.labelencoder method)": [[833, "sklearn.preprocessing.LabelEncoder.set_output"]], "set_params() (sklearn.preprocessing.labelencoder method)": [[833, "sklearn.preprocessing.LabelEncoder.set_params"]], "transform() (sklearn.preprocessing.labelencoder method)": [[833, "sklearn.preprocessing.LabelEncoder.transform"]], "maxabsscaler (class in sklearn.preprocessing)": [[834, "sklearn.preprocessing.MaxAbsScaler"]], "fit() (sklearn.preprocessing.maxabsscaler method)": [[834, "sklearn.preprocessing.MaxAbsScaler.fit"]], "fit_transform() (sklearn.preprocessing.maxabsscaler method)": [[834, "sklearn.preprocessing.MaxAbsScaler.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.maxabsscaler method)": [[834, "sklearn.preprocessing.MaxAbsScaler.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.maxabsscaler method)": [[834, "sklearn.preprocessing.MaxAbsScaler.get_metadata_routing"]], "get_params() (sklearn.preprocessing.maxabsscaler method)": [[834, "sklearn.preprocessing.MaxAbsScaler.get_params"]], "inverse_transform() (sklearn.preprocessing.maxabsscaler method)": [[834, "sklearn.preprocessing.MaxAbsScaler.inverse_transform"]], "partial_fit() (sklearn.preprocessing.maxabsscaler method)": [[834, "sklearn.preprocessing.MaxAbsScaler.partial_fit"]], "set_output() (sklearn.preprocessing.maxabsscaler method)": [[834, "sklearn.preprocessing.MaxAbsScaler.set_output"]], "set_params() (sklearn.preprocessing.maxabsscaler method)": [[834, "sklearn.preprocessing.MaxAbsScaler.set_params"]], "transform() (sklearn.preprocessing.maxabsscaler method)": [[834, "sklearn.preprocessing.MaxAbsScaler.transform"]], "minmaxscaler (class in sklearn.preprocessing)": [[835, "sklearn.preprocessing.MinMaxScaler"]], "fit() (sklearn.preprocessing.minmaxscaler method)": [[835, "sklearn.preprocessing.MinMaxScaler.fit"]], "fit_transform() (sklearn.preprocessing.minmaxscaler method)": [[835, "sklearn.preprocessing.MinMaxScaler.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.minmaxscaler method)": [[835, "sklearn.preprocessing.MinMaxScaler.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.minmaxscaler method)": [[835, "sklearn.preprocessing.MinMaxScaler.get_metadata_routing"]], "get_params() (sklearn.preprocessing.minmaxscaler method)": [[835, "sklearn.preprocessing.MinMaxScaler.get_params"]], "inverse_transform() (sklearn.preprocessing.minmaxscaler method)": [[835, "sklearn.preprocessing.MinMaxScaler.inverse_transform"]], "partial_fit() (sklearn.preprocessing.minmaxscaler method)": [[835, "sklearn.preprocessing.MinMaxScaler.partial_fit"]], "set_output() (sklearn.preprocessing.minmaxscaler method)": [[835, "sklearn.preprocessing.MinMaxScaler.set_output"]], "set_params() (sklearn.preprocessing.minmaxscaler method)": [[835, "sklearn.preprocessing.MinMaxScaler.set_params"]], "transform() (sklearn.preprocessing.minmaxscaler method)": [[835, "sklearn.preprocessing.MinMaxScaler.transform"]], "multilabelbinarizer (class in sklearn.preprocessing)": [[836, "sklearn.preprocessing.MultiLabelBinarizer"]], "fit() (sklearn.preprocessing.multilabelbinarizer method)": [[836, "sklearn.preprocessing.MultiLabelBinarizer.fit"]], "fit_transform() (sklearn.preprocessing.multilabelbinarizer method)": [[836, "sklearn.preprocessing.MultiLabelBinarizer.fit_transform"]], "get_metadata_routing() (sklearn.preprocessing.multilabelbinarizer method)": [[836, "sklearn.preprocessing.MultiLabelBinarizer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.multilabelbinarizer method)": [[836, "sklearn.preprocessing.MultiLabelBinarizer.get_params"]], "inverse_transform() (sklearn.preprocessing.multilabelbinarizer method)": [[836, "sklearn.preprocessing.MultiLabelBinarizer.inverse_transform"]], "set_output() (sklearn.preprocessing.multilabelbinarizer method)": [[836, "sklearn.preprocessing.MultiLabelBinarizer.set_output"]], "set_params() (sklearn.preprocessing.multilabelbinarizer method)": [[836, "sklearn.preprocessing.MultiLabelBinarizer.set_params"]], "transform() (sklearn.preprocessing.multilabelbinarizer method)": [[836, "sklearn.preprocessing.MultiLabelBinarizer.transform"]], "normalizer (class in sklearn.preprocessing)": [[837, "sklearn.preprocessing.Normalizer"]], "fit() (sklearn.preprocessing.normalizer method)": [[837, "sklearn.preprocessing.Normalizer.fit"]], "fit_transform() (sklearn.preprocessing.normalizer method)": [[837, "sklearn.preprocessing.Normalizer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.normalizer method)": [[837, "sklearn.preprocessing.Normalizer.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.normalizer method)": [[837, "sklearn.preprocessing.Normalizer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.normalizer method)": [[837, "sklearn.preprocessing.Normalizer.get_params"]], "set_output() (sklearn.preprocessing.normalizer method)": [[837, "sklearn.preprocessing.Normalizer.set_output"]], "set_params() (sklearn.preprocessing.normalizer method)": [[837, "sklearn.preprocessing.Normalizer.set_params"]], "set_transform_request() (sklearn.preprocessing.normalizer method)": [[837, "sklearn.preprocessing.Normalizer.set_transform_request"]], "transform() (sklearn.preprocessing.normalizer method)": [[837, "sklearn.preprocessing.Normalizer.transform"]], "onehotencoder (class in sklearn.preprocessing)": [[838, "sklearn.preprocessing.OneHotEncoder"]], "fit() (sklearn.preprocessing.onehotencoder method)": [[838, "sklearn.preprocessing.OneHotEncoder.fit"]], "fit_transform() (sklearn.preprocessing.onehotencoder method)": [[838, "sklearn.preprocessing.OneHotEncoder.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.onehotencoder method)": [[838, "sklearn.preprocessing.OneHotEncoder.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.onehotencoder method)": [[838, "sklearn.preprocessing.OneHotEncoder.get_metadata_routing"]], "get_params() (sklearn.preprocessing.onehotencoder method)": [[838, "sklearn.preprocessing.OneHotEncoder.get_params"]], "infrequent_categories_ (sklearn.preprocessing.onehotencoder property)": [[838, "sklearn.preprocessing.OneHotEncoder.infrequent_categories_"]], "inverse_transform() (sklearn.preprocessing.onehotencoder method)": [[838, "sklearn.preprocessing.OneHotEncoder.inverse_transform"]], "set_output() (sklearn.preprocessing.onehotencoder method)": [[838, "sklearn.preprocessing.OneHotEncoder.set_output"]], "set_params() (sklearn.preprocessing.onehotencoder method)": [[838, "sklearn.preprocessing.OneHotEncoder.set_params"]], "transform() (sklearn.preprocessing.onehotencoder method)": [[838, "sklearn.preprocessing.OneHotEncoder.transform"]], "ordinalencoder (class in sklearn.preprocessing)": [[839, "sklearn.preprocessing.OrdinalEncoder"]], "fit() (sklearn.preprocessing.ordinalencoder method)": [[839, "sklearn.preprocessing.OrdinalEncoder.fit"]], "fit_transform() (sklearn.preprocessing.ordinalencoder method)": [[839, "sklearn.preprocessing.OrdinalEncoder.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.ordinalencoder method)": [[839, "sklearn.preprocessing.OrdinalEncoder.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.ordinalencoder method)": [[839, "sklearn.preprocessing.OrdinalEncoder.get_metadata_routing"]], "get_params() (sklearn.preprocessing.ordinalencoder method)": [[839, "sklearn.preprocessing.OrdinalEncoder.get_params"]], "infrequent_categories_ (sklearn.preprocessing.ordinalencoder property)": [[839, "sklearn.preprocessing.OrdinalEncoder.infrequent_categories_"]], "inverse_transform() (sklearn.preprocessing.ordinalencoder method)": [[839, "sklearn.preprocessing.OrdinalEncoder.inverse_transform"]], "set_output() (sklearn.preprocessing.ordinalencoder method)": [[839, "sklearn.preprocessing.OrdinalEncoder.set_output"]], "set_params() (sklearn.preprocessing.ordinalencoder method)": [[839, "sklearn.preprocessing.OrdinalEncoder.set_params"]], "transform() (sklearn.preprocessing.ordinalencoder method)": [[839, "sklearn.preprocessing.OrdinalEncoder.transform"]], "polynomialfeatures (class in sklearn.preprocessing)": [[840, "sklearn.preprocessing.PolynomialFeatures"]], "fit() (sklearn.preprocessing.polynomialfeatures method)": [[840, "sklearn.preprocessing.PolynomialFeatures.fit"]], "fit_transform() (sklearn.preprocessing.polynomialfeatures method)": [[840, "sklearn.preprocessing.PolynomialFeatures.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.polynomialfeatures method)": [[840, "sklearn.preprocessing.PolynomialFeatures.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.polynomialfeatures method)": [[840, "sklearn.preprocessing.PolynomialFeatures.get_metadata_routing"]], "get_params() (sklearn.preprocessing.polynomialfeatures method)": [[840, "sklearn.preprocessing.PolynomialFeatures.get_params"]], "powers_ (sklearn.preprocessing.polynomialfeatures property)": [[840, "sklearn.preprocessing.PolynomialFeatures.powers_"]], "set_output() (sklearn.preprocessing.polynomialfeatures method)": [[840, "sklearn.preprocessing.PolynomialFeatures.set_output"]], "set_params() (sklearn.preprocessing.polynomialfeatures method)": [[840, "sklearn.preprocessing.PolynomialFeatures.set_params"]], "transform() (sklearn.preprocessing.polynomialfeatures method)": [[840, "sklearn.preprocessing.PolynomialFeatures.transform"]], "powertransformer (class in sklearn.preprocessing)": [[841, "sklearn.preprocessing.PowerTransformer"]], "fit() (sklearn.preprocessing.powertransformer method)": [[841, "sklearn.preprocessing.PowerTransformer.fit"]], "fit_transform() (sklearn.preprocessing.powertransformer method)": [[841, "sklearn.preprocessing.PowerTransformer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.powertransformer method)": [[841, "sklearn.preprocessing.PowerTransformer.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.powertransformer method)": [[841, "sklearn.preprocessing.PowerTransformer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.powertransformer method)": [[841, "sklearn.preprocessing.PowerTransformer.get_params"]], "inverse_transform() (sklearn.preprocessing.powertransformer method)": [[841, "sklearn.preprocessing.PowerTransformer.inverse_transform"]], "set_output() (sklearn.preprocessing.powertransformer method)": [[841, "sklearn.preprocessing.PowerTransformer.set_output"]], "set_params() (sklearn.preprocessing.powertransformer method)": [[841, "sklearn.preprocessing.PowerTransformer.set_params"]], "transform() (sklearn.preprocessing.powertransformer method)": [[841, "sklearn.preprocessing.PowerTransformer.transform"]], "quantiletransformer (class in sklearn.preprocessing)": [[842, "sklearn.preprocessing.QuantileTransformer"]], "fit() (sklearn.preprocessing.quantiletransformer method)": [[842, "sklearn.preprocessing.QuantileTransformer.fit"]], "fit_transform() (sklearn.preprocessing.quantiletransformer method)": [[842, "sklearn.preprocessing.QuantileTransformer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.quantiletransformer method)": [[842, "sklearn.preprocessing.QuantileTransformer.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.quantiletransformer method)": [[842, "sklearn.preprocessing.QuantileTransformer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.quantiletransformer method)": [[842, "sklearn.preprocessing.QuantileTransformer.get_params"]], "inverse_transform() (sklearn.preprocessing.quantiletransformer method)": [[842, "sklearn.preprocessing.QuantileTransformer.inverse_transform"]], "set_output() (sklearn.preprocessing.quantiletransformer method)": [[842, "sklearn.preprocessing.QuantileTransformer.set_output"]], "set_params() (sklearn.preprocessing.quantiletransformer method)": [[842, "sklearn.preprocessing.QuantileTransformer.set_params"]], "transform() (sklearn.preprocessing.quantiletransformer method)": [[842, "sklearn.preprocessing.QuantileTransformer.transform"]], "robustscaler (class in sklearn.preprocessing)": [[843, "sklearn.preprocessing.RobustScaler"]], "fit() (sklearn.preprocessing.robustscaler method)": [[843, "sklearn.preprocessing.RobustScaler.fit"]], "fit_transform() (sklearn.preprocessing.robustscaler method)": [[843, "sklearn.preprocessing.RobustScaler.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.robustscaler method)": [[843, "sklearn.preprocessing.RobustScaler.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.robustscaler method)": [[843, "sklearn.preprocessing.RobustScaler.get_metadata_routing"]], "get_params() (sklearn.preprocessing.robustscaler method)": [[843, "sklearn.preprocessing.RobustScaler.get_params"]], "inverse_transform() (sklearn.preprocessing.robustscaler method)": [[843, "sklearn.preprocessing.RobustScaler.inverse_transform"]], "set_output() (sklearn.preprocessing.robustscaler method)": [[843, "sklearn.preprocessing.RobustScaler.set_output"]], "set_params() (sklearn.preprocessing.robustscaler method)": [[843, "sklearn.preprocessing.RobustScaler.set_params"]], "transform() (sklearn.preprocessing.robustscaler method)": [[843, "sklearn.preprocessing.RobustScaler.transform"]], "splinetransformer (class in sklearn.preprocessing)": [[844, "sklearn.preprocessing.SplineTransformer"]], "fit() (sklearn.preprocessing.splinetransformer method)": [[844, "sklearn.preprocessing.SplineTransformer.fit"]], "fit_transform() (sklearn.preprocessing.splinetransformer method)": [[844, "sklearn.preprocessing.SplineTransformer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.splinetransformer method)": [[844, "sklearn.preprocessing.SplineTransformer.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.splinetransformer method)": [[844, "sklearn.preprocessing.SplineTransformer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.splinetransformer method)": [[844, "sklearn.preprocessing.SplineTransformer.get_params"]], "set_fit_request() (sklearn.preprocessing.splinetransformer method)": [[844, "sklearn.preprocessing.SplineTransformer.set_fit_request"]], "set_output() (sklearn.preprocessing.splinetransformer method)": [[844, "sklearn.preprocessing.SplineTransformer.set_output"]], "set_params() (sklearn.preprocessing.splinetransformer method)": [[844, "sklearn.preprocessing.SplineTransformer.set_params"]], "transform() (sklearn.preprocessing.splinetransformer method)": [[844, "sklearn.preprocessing.SplineTransformer.transform"]], "standardscaler (class in sklearn.preprocessing)": [[845, "sklearn.preprocessing.StandardScaler"]], "fit() (sklearn.preprocessing.standardscaler method)": [[845, "sklearn.preprocessing.StandardScaler.fit"]], "fit_transform() (sklearn.preprocessing.standardscaler method)": [[845, "sklearn.preprocessing.StandardScaler.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.standardscaler method)": [[845, "sklearn.preprocessing.StandardScaler.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.standardscaler method)": [[845, "sklearn.preprocessing.StandardScaler.get_metadata_routing"]], "get_params() (sklearn.preprocessing.standardscaler method)": [[845, "sklearn.preprocessing.StandardScaler.get_params"]], "inverse_transform() (sklearn.preprocessing.standardscaler method)": [[845, "sklearn.preprocessing.StandardScaler.inverse_transform"]], "partial_fit() (sklearn.preprocessing.standardscaler method)": [[845, "sklearn.preprocessing.StandardScaler.partial_fit"]], "set_fit_request() (sklearn.preprocessing.standardscaler method)": [[845, "sklearn.preprocessing.StandardScaler.set_fit_request"]], "set_inverse_transform_request() (sklearn.preprocessing.standardscaler method)": [[845, "sklearn.preprocessing.StandardScaler.set_inverse_transform_request"]], "set_output() (sklearn.preprocessing.standardscaler method)": [[845, "sklearn.preprocessing.StandardScaler.set_output"]], "set_params() (sklearn.preprocessing.standardscaler method)": [[845, "sklearn.preprocessing.StandardScaler.set_params"]], "set_partial_fit_request() (sklearn.preprocessing.standardscaler method)": [[845, "sklearn.preprocessing.StandardScaler.set_partial_fit_request"]], "set_transform_request() (sklearn.preprocessing.standardscaler method)": [[845, "sklearn.preprocessing.StandardScaler.set_transform_request"]], "transform() (sklearn.preprocessing.standardscaler method)": [[845, "sklearn.preprocessing.StandardScaler.transform"]], "targetencoder (class in sklearn.preprocessing)": [[846, "sklearn.preprocessing.TargetEncoder"]], "fit() (sklearn.preprocessing.targetencoder method)": [[846, "sklearn.preprocessing.TargetEncoder.fit"]], "fit_transform() (sklearn.preprocessing.targetencoder method)": [[846, "sklearn.preprocessing.TargetEncoder.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.targetencoder method)": [[846, "sklearn.preprocessing.TargetEncoder.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.targetencoder method)": [[846, "sklearn.preprocessing.TargetEncoder.get_metadata_routing"]], "get_params() (sklearn.preprocessing.targetencoder method)": [[846, "sklearn.preprocessing.TargetEncoder.get_params"]], "infrequent_categories_ (sklearn.preprocessing.targetencoder property)": [[846, "sklearn.preprocessing.TargetEncoder.infrequent_categories_"]], "set_output() (sklearn.preprocessing.targetencoder method)": [[846, "sklearn.preprocessing.TargetEncoder.set_output"]], "set_params() (sklearn.preprocessing.targetencoder method)": [[846, "sklearn.preprocessing.TargetEncoder.set_params"]], "transform() (sklearn.preprocessing.targetencoder method)": [[846, "sklearn.preprocessing.TargetEncoder.transform"]], "add_dummy_feature() (in module sklearn.preprocessing)": [[847, "sklearn.preprocessing.add_dummy_feature"]], "binarize() (in module sklearn.preprocessing)": [[848, "sklearn.preprocessing.binarize"]], "label_binarize() (in module sklearn.preprocessing)": [[849, "sklearn.preprocessing.label_binarize"]], "maxabs_scale() (in module sklearn.preprocessing)": [[850, "sklearn.preprocessing.maxabs_scale"]], "minmax_scale() (in module sklearn.preprocessing)": [[851, "sklearn.preprocessing.minmax_scale"]], "normalize() (in module sklearn.preprocessing)": [[852, "sklearn.preprocessing.normalize"]], "power_transform() (in module sklearn.preprocessing)": [[853, "sklearn.preprocessing.power_transform"]], "quantile_transform() (in module sklearn.preprocessing)": [[854, "sklearn.preprocessing.quantile_transform"]], "robust_scale() (in module sklearn.preprocessing)": [[855, "sklearn.preprocessing.robust_scale"]], "scale() (in module sklearn.preprocessing)": [[856, "sklearn.preprocessing.scale"]], "gaussianrandomprojection (class in sklearn.random_projection)": [[857, "sklearn.random_projection.GaussianRandomProjection"]], "fit() (sklearn.random_projection.gaussianrandomprojection method)": [[857, "sklearn.random_projection.GaussianRandomProjection.fit"]], "fit_transform() (sklearn.random_projection.gaussianrandomprojection method)": [[857, "sklearn.random_projection.GaussianRandomProjection.fit_transform"]], "get_feature_names_out() (sklearn.random_projection.gaussianrandomprojection method)": [[857, "sklearn.random_projection.GaussianRandomProjection.get_feature_names_out"]], "get_metadata_routing() (sklearn.random_projection.gaussianrandomprojection method)": [[857, "sklearn.random_projection.GaussianRandomProjection.get_metadata_routing"]], "get_params() (sklearn.random_projection.gaussianrandomprojection method)": [[857, "sklearn.random_projection.GaussianRandomProjection.get_params"]], "inverse_transform() (sklearn.random_projection.gaussianrandomprojection method)": [[857, "sklearn.random_projection.GaussianRandomProjection.inverse_transform"]], "set_output() (sklearn.random_projection.gaussianrandomprojection method)": [[857, "sklearn.random_projection.GaussianRandomProjection.set_output"]], "set_params() (sklearn.random_projection.gaussianrandomprojection method)": [[857, "sklearn.random_projection.GaussianRandomProjection.set_params"]], "transform() (sklearn.random_projection.gaussianrandomprojection method)": [[857, "sklearn.random_projection.GaussianRandomProjection.transform"]], "sparserandomprojection (class in sklearn.random_projection)": [[858, "sklearn.random_projection.SparseRandomProjection"]], "fit() (sklearn.random_projection.sparserandomprojection method)": [[858, "sklearn.random_projection.SparseRandomProjection.fit"]], "fit_transform() (sklearn.random_projection.sparserandomprojection method)": [[858, "sklearn.random_projection.SparseRandomProjection.fit_transform"]], "get_feature_names_out() (sklearn.random_projection.sparserandomprojection method)": [[858, "sklearn.random_projection.SparseRandomProjection.get_feature_names_out"]], "get_metadata_routing() (sklearn.random_projection.sparserandomprojection method)": [[858, "sklearn.random_projection.SparseRandomProjection.get_metadata_routing"]], "get_params() (sklearn.random_projection.sparserandomprojection method)": [[858, "sklearn.random_projection.SparseRandomProjection.get_params"]], "inverse_transform() (sklearn.random_projection.sparserandomprojection method)": [[858, "sklearn.random_projection.SparseRandomProjection.inverse_transform"]], "set_output() (sklearn.random_projection.sparserandomprojection method)": [[858, "sklearn.random_projection.SparseRandomProjection.set_output"]], "set_params() (sklearn.random_projection.sparserandomprojection method)": [[858, "sklearn.random_projection.SparseRandomProjection.set_params"]], "transform() (sklearn.random_projection.sparserandomprojection method)": [[858, "sklearn.random_projection.SparseRandomProjection.transform"]], "johnson_lindenstrauss_min_dim() (in module sklearn.random_projection)": [[859, "sklearn.random_projection.johnson_lindenstrauss_min_dim"]], "labelpropagation (class in sklearn.semi_supervised)": [[860, "sklearn.semi_supervised.LabelPropagation"]], "fit() (sklearn.semi_supervised.labelpropagation method)": [[860, "sklearn.semi_supervised.LabelPropagation.fit"]], "get_metadata_routing() (sklearn.semi_supervised.labelpropagation method)": [[860, "sklearn.semi_supervised.LabelPropagation.get_metadata_routing"]], "get_params() (sklearn.semi_supervised.labelpropagation method)": [[860, "sklearn.semi_supervised.LabelPropagation.get_params"]], "predict() (sklearn.semi_supervised.labelpropagation method)": [[860, "sklearn.semi_supervised.LabelPropagation.predict"]], "predict_proba() (sklearn.semi_supervised.labelpropagation method)": [[860, "sklearn.semi_supervised.LabelPropagation.predict_proba"]], "score() (sklearn.semi_supervised.labelpropagation method)": [[860, "sklearn.semi_supervised.LabelPropagation.score"]], "set_params() (sklearn.semi_supervised.labelpropagation method)": [[860, "sklearn.semi_supervised.LabelPropagation.set_params"]], "set_score_request() (sklearn.semi_supervised.labelpropagation method)": [[860, "sklearn.semi_supervised.LabelPropagation.set_score_request"]], "labelspreading (class in sklearn.semi_supervised)": [[861, "sklearn.semi_supervised.LabelSpreading"]], "fit() (sklearn.semi_supervised.labelspreading method)": [[861, "sklearn.semi_supervised.LabelSpreading.fit"]], "get_metadata_routing() (sklearn.semi_supervised.labelspreading method)": [[861, "sklearn.semi_supervised.LabelSpreading.get_metadata_routing"]], "get_params() (sklearn.semi_supervised.labelspreading method)": [[861, "sklearn.semi_supervised.LabelSpreading.get_params"]], "predict() (sklearn.semi_supervised.labelspreading method)": [[861, "sklearn.semi_supervised.LabelSpreading.predict"]], "predict_proba() (sklearn.semi_supervised.labelspreading method)": [[861, "sklearn.semi_supervised.LabelSpreading.predict_proba"]], "score() (sklearn.semi_supervised.labelspreading method)": [[861, "sklearn.semi_supervised.LabelSpreading.score"]], "set_params() (sklearn.semi_supervised.labelspreading method)": [[861, "sklearn.semi_supervised.LabelSpreading.set_params"]], "set_score_request() (sklearn.semi_supervised.labelspreading method)": [[861, "sklearn.semi_supervised.LabelSpreading.set_score_request"]], "selftrainingclassifier (class in sklearn.semi_supervised)": [[862, "sklearn.semi_supervised.SelfTrainingClassifier"]], "decision_function() (sklearn.semi_supervised.selftrainingclassifier method)": [[862, "sklearn.semi_supervised.SelfTrainingClassifier.decision_function"]], "fit() (sklearn.semi_supervised.selftrainingclassifier method)": [[862, "sklearn.semi_supervised.SelfTrainingClassifier.fit"]], "get_metadata_routing() (sklearn.semi_supervised.selftrainingclassifier method)": [[862, "sklearn.semi_supervised.SelfTrainingClassifier.get_metadata_routing"]], "get_params() (sklearn.semi_supervised.selftrainingclassifier method)": [[862, "sklearn.semi_supervised.SelfTrainingClassifier.get_params"]], "predict() (sklearn.semi_supervised.selftrainingclassifier method)": [[862, "sklearn.semi_supervised.SelfTrainingClassifier.predict"]], "predict_log_proba() (sklearn.semi_supervised.selftrainingclassifier method)": [[862, "sklearn.semi_supervised.SelfTrainingClassifier.predict_log_proba"]], "predict_proba() (sklearn.semi_supervised.selftrainingclassifier method)": [[862, "sklearn.semi_supervised.SelfTrainingClassifier.predict_proba"]], "score() (sklearn.semi_supervised.selftrainingclassifier method)": [[862, "sklearn.semi_supervised.SelfTrainingClassifier.score"]], "set_params() (sklearn.semi_supervised.selftrainingclassifier method)": [[862, "sklearn.semi_supervised.SelfTrainingClassifier.set_params"]], "set_config() (in module sklearn)": [[863, "sklearn.set_config"]], "show_versions() (in module sklearn)": [[864, "sklearn.show_versions"]], "linearsvc (class in sklearn.svm)": [[865, "sklearn.svm.LinearSVC"]], "decision_function() (sklearn.svm.linearsvc method)": [[865, "sklearn.svm.LinearSVC.decision_function"]], "densify() (sklearn.svm.linearsvc method)": [[865, "sklearn.svm.LinearSVC.densify"]], "fit() (sklearn.svm.linearsvc method)": [[865, "sklearn.svm.LinearSVC.fit"]], "get_metadata_routing() (sklearn.svm.linearsvc method)": [[865, "sklearn.svm.LinearSVC.get_metadata_routing"]], "get_params() (sklearn.svm.linearsvc method)": [[865, "sklearn.svm.LinearSVC.get_params"]], "predict() (sklearn.svm.linearsvc method)": [[865, "sklearn.svm.LinearSVC.predict"]], "score() (sklearn.svm.linearsvc method)": [[865, "sklearn.svm.LinearSVC.score"]], "set_fit_request() (sklearn.svm.linearsvc method)": [[865, "sklearn.svm.LinearSVC.set_fit_request"]], "set_params() (sklearn.svm.linearsvc method)": [[865, "sklearn.svm.LinearSVC.set_params"]], "set_score_request() (sklearn.svm.linearsvc method)": [[865, "sklearn.svm.LinearSVC.set_score_request"]], "sparsify() (sklearn.svm.linearsvc method)": [[865, "sklearn.svm.LinearSVC.sparsify"]], "linearsvr (class in sklearn.svm)": [[866, "sklearn.svm.LinearSVR"]], "fit() (sklearn.svm.linearsvr method)": [[866, "sklearn.svm.LinearSVR.fit"]], "get_metadata_routing() (sklearn.svm.linearsvr method)": [[866, "sklearn.svm.LinearSVR.get_metadata_routing"]], "get_params() (sklearn.svm.linearsvr method)": [[866, "sklearn.svm.LinearSVR.get_params"]], "predict() (sklearn.svm.linearsvr method)": [[866, "sklearn.svm.LinearSVR.predict"]], "score() (sklearn.svm.linearsvr method)": [[866, "sklearn.svm.LinearSVR.score"]], "set_fit_request() (sklearn.svm.linearsvr method)": [[866, "sklearn.svm.LinearSVR.set_fit_request"]], "set_params() (sklearn.svm.linearsvr method)": [[866, "sklearn.svm.LinearSVR.set_params"]], "set_score_request() (sklearn.svm.linearsvr method)": [[866, "sklearn.svm.LinearSVR.set_score_request"]], "nusvc (class in sklearn.svm)": [[867, "sklearn.svm.NuSVC"]], "coef_ (sklearn.svm.nusvc property)": [[867, "sklearn.svm.NuSVC.coef_"]], "decision_function() (sklearn.svm.nusvc method)": [[867, "sklearn.svm.NuSVC.decision_function"]], "fit() (sklearn.svm.nusvc method)": [[867, "sklearn.svm.NuSVC.fit"]], "get_metadata_routing() (sklearn.svm.nusvc method)": [[867, "sklearn.svm.NuSVC.get_metadata_routing"]], "get_params() (sklearn.svm.nusvc method)": [[867, "sklearn.svm.NuSVC.get_params"]], "n_support_ (sklearn.svm.nusvc property)": [[867, "sklearn.svm.NuSVC.n_support_"]], "predict() (sklearn.svm.nusvc method)": [[867, "sklearn.svm.NuSVC.predict"]], "predict_log_proba() (sklearn.svm.nusvc method)": [[867, "sklearn.svm.NuSVC.predict_log_proba"]], "predict_proba() (sklearn.svm.nusvc method)": [[867, "sklearn.svm.NuSVC.predict_proba"]], "proba_ (sklearn.svm.nusvc property)": [[867, "sklearn.svm.NuSVC.probA_"]], "probb_ (sklearn.svm.nusvc property)": [[867, "sklearn.svm.NuSVC.probB_"]], "score() (sklearn.svm.nusvc method)": [[867, "sklearn.svm.NuSVC.score"]], "set_fit_request() (sklearn.svm.nusvc method)": [[867, "sklearn.svm.NuSVC.set_fit_request"]], "set_params() (sklearn.svm.nusvc method)": [[867, "sklearn.svm.NuSVC.set_params"]], "set_score_request() (sklearn.svm.nusvc method)": [[867, "sklearn.svm.NuSVC.set_score_request"]], "nusvr (class in sklearn.svm)": [[868, "sklearn.svm.NuSVR"]], "coef_ (sklearn.svm.nusvr property)": [[868, "sklearn.svm.NuSVR.coef_"]], "fit() (sklearn.svm.nusvr method)": [[868, "sklearn.svm.NuSVR.fit"]], "get_metadata_routing() (sklearn.svm.nusvr method)": [[868, "sklearn.svm.NuSVR.get_metadata_routing"]], "get_params() (sklearn.svm.nusvr method)": [[868, "sklearn.svm.NuSVR.get_params"]], "n_support_ (sklearn.svm.nusvr property)": [[868, "sklearn.svm.NuSVR.n_support_"]], "predict() (sklearn.svm.nusvr method)": [[868, "sklearn.svm.NuSVR.predict"]], "score() (sklearn.svm.nusvr method)": [[868, "sklearn.svm.NuSVR.score"]], "set_fit_request() (sklearn.svm.nusvr method)": [[868, "sklearn.svm.NuSVR.set_fit_request"]], "set_params() (sklearn.svm.nusvr method)": [[868, "sklearn.svm.NuSVR.set_params"]], "set_score_request() (sklearn.svm.nusvr method)": [[868, "sklearn.svm.NuSVR.set_score_request"]], "oneclasssvm (class in sklearn.svm)": [[869, "sklearn.svm.OneClassSVM"]], "coef_ (sklearn.svm.oneclasssvm property)": [[869, "sklearn.svm.OneClassSVM.coef_"]], "decision_function() (sklearn.svm.oneclasssvm method)": [[869, "sklearn.svm.OneClassSVM.decision_function"]], "fit() (sklearn.svm.oneclasssvm method)": [[869, "sklearn.svm.OneClassSVM.fit"]], "fit_predict() (sklearn.svm.oneclasssvm method)": [[869, "sklearn.svm.OneClassSVM.fit_predict"]], "get_metadata_routing() (sklearn.svm.oneclasssvm method)": [[869, "sklearn.svm.OneClassSVM.get_metadata_routing"]], "get_params() (sklearn.svm.oneclasssvm method)": [[869, "sklearn.svm.OneClassSVM.get_params"]], "n_support_ (sklearn.svm.oneclasssvm property)": [[869, "sklearn.svm.OneClassSVM.n_support_"]], "predict() (sklearn.svm.oneclasssvm method)": [[869, "sklearn.svm.OneClassSVM.predict"]], "score_samples() (sklearn.svm.oneclasssvm method)": [[869, "sklearn.svm.OneClassSVM.score_samples"]], "set_fit_request() (sklearn.svm.oneclasssvm method)": [[869, "sklearn.svm.OneClassSVM.set_fit_request"]], "set_params() (sklearn.svm.oneclasssvm method)": [[869, "sklearn.svm.OneClassSVM.set_params"]], "svc (class in sklearn.svm)": [[870, "sklearn.svm.SVC"]], "coef_ (sklearn.svm.svc property)": [[870, "sklearn.svm.SVC.coef_"]], "decision_function() (sklearn.svm.svc method)": [[870, "sklearn.svm.SVC.decision_function"]], "fit() (sklearn.svm.svc method)": [[870, "sklearn.svm.SVC.fit"]], "get_metadata_routing() (sklearn.svm.svc method)": [[870, "sklearn.svm.SVC.get_metadata_routing"]], "get_params() (sklearn.svm.svc method)": [[870, "sklearn.svm.SVC.get_params"]], "n_support_ (sklearn.svm.svc property)": [[870, "sklearn.svm.SVC.n_support_"]], "predict() (sklearn.svm.svc method)": [[870, "sklearn.svm.SVC.predict"]], "predict_log_proba() (sklearn.svm.svc method)": [[870, "sklearn.svm.SVC.predict_log_proba"]], "predict_proba() (sklearn.svm.svc method)": [[870, "sklearn.svm.SVC.predict_proba"]], "proba_ (sklearn.svm.svc property)": [[870, "sklearn.svm.SVC.probA_"]], "probb_ (sklearn.svm.svc property)": [[870, "sklearn.svm.SVC.probB_"]], "score() (sklearn.svm.svc method)": [[870, "sklearn.svm.SVC.score"]], "set_fit_request() (sklearn.svm.svc method)": [[870, "sklearn.svm.SVC.set_fit_request"]], "set_params() (sklearn.svm.svc method)": [[870, "sklearn.svm.SVC.set_params"]], "set_score_request() (sklearn.svm.svc method)": [[870, "sklearn.svm.SVC.set_score_request"]], "svr (class in sklearn.svm)": [[871, "sklearn.svm.SVR"]], "coef_ (sklearn.svm.svr property)": [[871, "sklearn.svm.SVR.coef_"]], "fit() (sklearn.svm.svr method)": [[871, "sklearn.svm.SVR.fit"]], "get_metadata_routing() (sklearn.svm.svr method)": [[871, "sklearn.svm.SVR.get_metadata_routing"]], "get_params() (sklearn.svm.svr method)": [[871, "sklearn.svm.SVR.get_params"]], "n_support_ (sklearn.svm.svr property)": [[871, "sklearn.svm.SVR.n_support_"]], "predict() (sklearn.svm.svr method)": [[871, "sklearn.svm.SVR.predict"]], "score() (sklearn.svm.svr method)": [[871, "sklearn.svm.SVR.score"]], "set_fit_request() (sklearn.svm.svr method)": [[871, "sklearn.svm.SVR.set_fit_request"]], "set_params() (sklearn.svm.svr method)": [[871, "sklearn.svm.SVR.set_params"]], "set_score_request() (sklearn.svm.svr method)": [[871, "sklearn.svm.SVR.set_score_request"]], "l1_min_c() (in module sklearn.svm)": [[872, "sklearn.svm.l1_min_c"]], "decisiontreeclassifier (class in sklearn.tree)": [[873, "sklearn.tree.DecisionTreeClassifier"]], "apply() (sklearn.tree.decisiontreeclassifier method)": [[873, "sklearn.tree.DecisionTreeClassifier.apply"]], "cost_complexity_pruning_path() (sklearn.tree.decisiontreeclassifier method)": [[873, "sklearn.tree.DecisionTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sklearn.tree.decisiontreeclassifier method)": [[873, "sklearn.tree.DecisionTreeClassifier.decision_path"]], "feature_importances_ (sklearn.tree.decisiontreeclassifier property)": [[873, "sklearn.tree.DecisionTreeClassifier.feature_importances_"]], "fit() (sklearn.tree.decisiontreeclassifier method)": [[873, "sklearn.tree.DecisionTreeClassifier.fit"]], "get_depth() (sklearn.tree.decisiontreeclassifier method)": [[873, "sklearn.tree.DecisionTreeClassifier.get_depth"]], "get_metadata_routing() (sklearn.tree.decisiontreeclassifier method)": [[873, "sklearn.tree.DecisionTreeClassifier.get_metadata_routing"]], "get_n_leaves() (sklearn.tree.decisiontreeclassifier method)": [[873, "sklearn.tree.DecisionTreeClassifier.get_n_leaves"]], "get_params() (sklearn.tree.decisiontreeclassifier method)": [[873, "sklearn.tree.DecisionTreeClassifier.get_params"]], "predict() (sklearn.tree.decisiontreeclassifier method)": [[873, "sklearn.tree.DecisionTreeClassifier.predict"]], "predict_log_proba() (sklearn.tree.decisiontreeclassifier method)": [[873, "sklearn.tree.DecisionTreeClassifier.predict_log_proba"]], "predict_proba() (sklearn.tree.decisiontreeclassifier method)": [[873, "sklearn.tree.DecisionTreeClassifier.predict_proba"]], "score() (sklearn.tree.decisiontreeclassifier method)": [[873, "sklearn.tree.DecisionTreeClassifier.score"]], "set_fit_request() (sklearn.tree.decisiontreeclassifier method)": [[873, "sklearn.tree.DecisionTreeClassifier.set_fit_request"]], "set_params() (sklearn.tree.decisiontreeclassifier method)": [[873, "sklearn.tree.DecisionTreeClassifier.set_params"]], "set_predict_proba_request() (sklearn.tree.decisiontreeclassifier method)": [[873, "sklearn.tree.DecisionTreeClassifier.set_predict_proba_request"]], "set_predict_request() (sklearn.tree.decisiontreeclassifier method)": [[873, "sklearn.tree.DecisionTreeClassifier.set_predict_request"]], "set_score_request() (sklearn.tree.decisiontreeclassifier method)": [[873, "sklearn.tree.DecisionTreeClassifier.set_score_request"]], "decisiontreeregressor (class in sklearn.tree)": [[874, "sklearn.tree.DecisionTreeRegressor"]], "apply() (sklearn.tree.decisiontreeregressor method)": [[874, "sklearn.tree.DecisionTreeRegressor.apply"]], "cost_complexity_pruning_path() (sklearn.tree.decisiontreeregressor method)": [[874, "sklearn.tree.DecisionTreeRegressor.cost_complexity_pruning_path"]], "decision_path() (sklearn.tree.decisiontreeregressor method)": [[874, "sklearn.tree.DecisionTreeRegressor.decision_path"]], "feature_importances_ (sklearn.tree.decisiontreeregressor property)": [[874, "sklearn.tree.DecisionTreeRegressor.feature_importances_"]], "fit() (sklearn.tree.decisiontreeregressor method)": [[874, "sklearn.tree.DecisionTreeRegressor.fit"]], "get_depth() (sklearn.tree.decisiontreeregressor method)": [[874, "sklearn.tree.DecisionTreeRegressor.get_depth"]], "get_metadata_routing() (sklearn.tree.decisiontreeregressor method)": [[874, "sklearn.tree.DecisionTreeRegressor.get_metadata_routing"]], "get_n_leaves() (sklearn.tree.decisiontreeregressor method)": [[874, "sklearn.tree.DecisionTreeRegressor.get_n_leaves"]], "get_params() (sklearn.tree.decisiontreeregressor method)": [[874, "sklearn.tree.DecisionTreeRegressor.get_params"]], "predict() (sklearn.tree.decisiontreeregressor method)": [[874, "sklearn.tree.DecisionTreeRegressor.predict"]], "score() (sklearn.tree.decisiontreeregressor method)": [[874, "sklearn.tree.DecisionTreeRegressor.score"]], "set_fit_request() (sklearn.tree.decisiontreeregressor method)": [[874, "sklearn.tree.DecisionTreeRegressor.set_fit_request"]], "set_params() (sklearn.tree.decisiontreeregressor method)": [[874, "sklearn.tree.DecisionTreeRegressor.set_params"]], "set_predict_request() (sklearn.tree.decisiontreeregressor method)": [[874, "sklearn.tree.DecisionTreeRegressor.set_predict_request"]], "set_score_request() (sklearn.tree.decisiontreeregressor method)": [[874, "sklearn.tree.DecisionTreeRegressor.set_score_request"]], "extratreeclassifier (class in sklearn.tree)": [[875, "sklearn.tree.ExtraTreeClassifier"]], "apply() (sklearn.tree.extratreeclassifier method)": [[875, "sklearn.tree.ExtraTreeClassifier.apply"]], "cost_complexity_pruning_path() (sklearn.tree.extratreeclassifier method)": [[875, "sklearn.tree.ExtraTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sklearn.tree.extratreeclassifier method)": [[875, "sklearn.tree.ExtraTreeClassifier.decision_path"]], "feature_importances_ (sklearn.tree.extratreeclassifier property)": [[875, "sklearn.tree.ExtraTreeClassifier.feature_importances_"]], "fit() (sklearn.tree.extratreeclassifier method)": [[875, "sklearn.tree.ExtraTreeClassifier.fit"]], "get_depth() (sklearn.tree.extratreeclassifier method)": [[875, "sklearn.tree.ExtraTreeClassifier.get_depth"]], "get_metadata_routing() (sklearn.tree.extratreeclassifier method)": [[875, "sklearn.tree.ExtraTreeClassifier.get_metadata_routing"]], "get_n_leaves() (sklearn.tree.extratreeclassifier method)": [[875, "sklearn.tree.ExtraTreeClassifier.get_n_leaves"]], "get_params() (sklearn.tree.extratreeclassifier method)": [[875, "sklearn.tree.ExtraTreeClassifier.get_params"]], "predict() (sklearn.tree.extratreeclassifier method)": [[875, "sklearn.tree.ExtraTreeClassifier.predict"]], "predict_log_proba() (sklearn.tree.extratreeclassifier method)": [[875, "sklearn.tree.ExtraTreeClassifier.predict_log_proba"]], "predict_proba() (sklearn.tree.extratreeclassifier method)": [[875, "sklearn.tree.ExtraTreeClassifier.predict_proba"]], "score() (sklearn.tree.extratreeclassifier method)": [[875, "sklearn.tree.ExtraTreeClassifier.score"]], "set_fit_request() (sklearn.tree.extratreeclassifier method)": [[875, "sklearn.tree.ExtraTreeClassifier.set_fit_request"]], "set_params() (sklearn.tree.extratreeclassifier method)": [[875, "sklearn.tree.ExtraTreeClassifier.set_params"]], "set_predict_proba_request() (sklearn.tree.extratreeclassifier method)": [[875, "sklearn.tree.ExtraTreeClassifier.set_predict_proba_request"]], "set_predict_request() (sklearn.tree.extratreeclassifier method)": [[875, "sklearn.tree.ExtraTreeClassifier.set_predict_request"]], "set_score_request() (sklearn.tree.extratreeclassifier method)": [[875, "sklearn.tree.ExtraTreeClassifier.set_score_request"]], "extratreeregressor (class in sklearn.tree)": [[876, "sklearn.tree.ExtraTreeRegressor"]], "apply() (sklearn.tree.extratreeregressor method)": [[876, "sklearn.tree.ExtraTreeRegressor.apply"]], "cost_complexity_pruning_path() (sklearn.tree.extratreeregressor method)": [[876, "sklearn.tree.ExtraTreeRegressor.cost_complexity_pruning_path"]], "decision_path() (sklearn.tree.extratreeregressor method)": [[876, "sklearn.tree.ExtraTreeRegressor.decision_path"]], "feature_importances_ (sklearn.tree.extratreeregressor property)": [[876, "sklearn.tree.ExtraTreeRegressor.feature_importances_"]], "fit() (sklearn.tree.extratreeregressor method)": [[876, "sklearn.tree.ExtraTreeRegressor.fit"]], "get_depth() (sklearn.tree.extratreeregressor method)": [[876, "sklearn.tree.ExtraTreeRegressor.get_depth"]], "get_metadata_routing() (sklearn.tree.extratreeregressor method)": [[876, "sklearn.tree.ExtraTreeRegressor.get_metadata_routing"]], "get_n_leaves() (sklearn.tree.extratreeregressor method)": [[876, "sklearn.tree.ExtraTreeRegressor.get_n_leaves"]], "get_params() (sklearn.tree.extratreeregressor method)": [[876, "sklearn.tree.ExtraTreeRegressor.get_params"]], "predict() (sklearn.tree.extratreeregressor method)": [[876, "sklearn.tree.ExtraTreeRegressor.predict"]], "score() (sklearn.tree.extratreeregressor method)": [[876, "sklearn.tree.ExtraTreeRegressor.score"]], "set_fit_request() (sklearn.tree.extratreeregressor method)": [[876, "sklearn.tree.ExtraTreeRegressor.set_fit_request"]], "set_params() (sklearn.tree.extratreeregressor method)": [[876, "sklearn.tree.ExtraTreeRegressor.set_params"]], "set_predict_request() (sklearn.tree.extratreeregressor method)": [[876, "sklearn.tree.ExtraTreeRegressor.set_predict_request"]], "set_score_request() (sklearn.tree.extratreeregressor method)": [[876, "sklearn.tree.ExtraTreeRegressor.set_score_request"]], "export_graphviz() (in module sklearn.tree)": [[877, "sklearn.tree.export_graphviz"]], "export_text() (in module sklearn.tree)": [[878, "sklearn.tree.export_text"]], "plot_tree() (in module sklearn.tree)": [[879, "sklearn.tree.plot_tree"]], "bunch (class in sklearn.utils)": [[880, "sklearn.utils.Bunch"]], "clear() (sklearn.utils.bunch method)": [[880, "sklearn.utils.Bunch.clear"]], "copy() (sklearn.utils.bunch method)": [[880, "sklearn.utils.Bunch.copy"]], "fromkeys() (sklearn.utils.bunch method)": [[880, "sklearn.utils.Bunch.fromkeys"]], "get() (sklearn.utils.bunch method)": [[880, "sklearn.utils.Bunch.get"]], "items() (sklearn.utils.bunch method)": [[880, "sklearn.utils.Bunch.items"]], "keys() (sklearn.utils.bunch method)": [[880, "sklearn.utils.Bunch.keys"]], "pop() (sklearn.utils.bunch method)": [[880, "sklearn.utils.Bunch.pop"]], "popitem() (sklearn.utils.bunch method)": [[880, "sklearn.utils.Bunch.popitem"]], "setdefault() (sklearn.utils.bunch method)": [[880, "sklearn.utils.Bunch.setdefault"]], "update() (sklearn.utils.bunch method)": [[880, "sklearn.utils.Bunch.update"]], "values() (sklearn.utils.bunch method)": [[880, "sklearn.utils.Bunch.values"]], "_safe_indexing() (in module sklearn.utils)": [[881, "sklearn.utils._safe_indexing"]], "min_pos() (in module sklearn.utils.arrayfuncs)": [[882, "sklearn.utils.arrayfuncs.min_pos"]], "as_float_array() (in module sklearn.utils)": [[883, "sklearn.utils.as_float_array"]], "assert_all_finite() (in module sklearn.utils)": [[884, "sklearn.utils.assert_all_finite"]], "check_x_y() (in module sklearn.utils)": [[885, "sklearn.utils.check_X_y"]], "check_array() (in module sklearn.utils)": [[886, "sklearn.utils.check_array"]], "check_consistent_length() (in module sklearn.utils)": [[887, "sklearn.utils.check_consistent_length"]], "check_random_state() (in module sklearn.utils)": [[888, "sklearn.utils.check_random_state"]], "check_scalar() (in module sklearn.utils)": [[889, "sklearn.utils.check_scalar"]], "compute_class_weight() (in module sklearn.utils.class_weight)": [[890, "sklearn.utils.class_weight.compute_class_weight"]], "compute_sample_weight() (in module sklearn.utils.class_weight)": [[891, "sklearn.utils.class_weight.compute_sample_weight"]], "deprecated() (in module sklearn.utils)": [[892, "sklearn.utils.deprecated"]], "all_displays() (in module sklearn.utils.discovery)": [[893, "sklearn.utils.discovery.all_displays"]], "all_estimators() (in module sklearn.utils.discovery)": [[894, "sklearn.utils.discovery.all_estimators"]], "all_functions() (in module sklearn.utils.discovery)": [[895, "sklearn.utils.discovery.all_functions"]], "check_estimator() (in module sklearn.utils.estimator_checks)": [[896, "sklearn.utils.estimator_checks.check_estimator"]], "parametrize_with_checks() (in module sklearn.utils.estimator_checks)": [[897, "sklearn.utils.estimator_checks.parametrize_with_checks"]], "estimator_html_repr() (in module sklearn.utils)": [[898, "sklearn.utils.estimator_html_repr"]], "density() (in module sklearn.utils.extmath)": [[899, "sklearn.utils.extmath.density"]], "fast_logdet() (in module sklearn.utils.extmath)": [[900, "sklearn.utils.extmath.fast_logdet"]], "randomized_range_finder() (in module sklearn.utils.extmath)": [[901, "sklearn.utils.extmath.randomized_range_finder"]], "randomized_svd() (in module sklearn.utils.extmath)": [[902, "sklearn.utils.extmath.randomized_svd"]], "safe_sparse_dot() (in module sklearn.utils.extmath)": [[903, "sklearn.utils.extmath.safe_sparse_dot"]], "weighted_mode() (in module sklearn.utils.extmath)": [[904, "sklearn.utils.extmath.weighted_mode"]], "gen_batches() (in module sklearn.utils)": [[905, "sklearn.utils.gen_batches"]], "gen_even_slices() (in module sklearn.utils)": [[906, "sklearn.utils.gen_even_slices"]], "single_source_shortest_path_length() (in module sklearn.utils.graph)": [[907, "sklearn.utils.graph.single_source_shortest_path_length"]], "indexable() (in module sklearn.utils)": [[908, "sklearn.utils.indexable"]], "metadatarequest (class in sklearn.utils.metadata_routing)": [[909, "sklearn.utils.metadata_routing.MetadataRequest"]], "consumes() (sklearn.utils.metadata_routing.metadatarequest method)": [[909, "sklearn.utils.metadata_routing.MetadataRequest.consumes"]], "metadatarouter (class in sklearn.utils.metadata_routing)": [[910, "sklearn.utils.metadata_routing.MetadataRouter"]], "add() (sklearn.utils.metadata_routing.metadatarouter method)": [[910, "sklearn.utils.metadata_routing.MetadataRouter.add"]], "add_self_request() (sklearn.utils.metadata_routing.metadatarouter method)": [[910, "sklearn.utils.metadata_routing.MetadataRouter.add_self_request"]], "consumes() (sklearn.utils.metadata_routing.metadatarouter method)": [[910, "sklearn.utils.metadata_routing.MetadataRouter.consumes"]], "route_params() (sklearn.utils.metadata_routing.metadatarouter method)": [[910, "sklearn.utils.metadata_routing.MetadataRouter.route_params"]], "validate_metadata() (sklearn.utils.metadata_routing.metadatarouter method)": [[910, "sklearn.utils.metadata_routing.MetadataRouter.validate_metadata"]], "methodmapping (class in sklearn.utils.metadata_routing)": [[911, "sklearn.utils.metadata_routing.MethodMapping"]], "add() (sklearn.utils.metadata_routing.methodmapping method)": [[911, "sklearn.utils.metadata_routing.MethodMapping.add"]], "from_str() (sklearn.utils.metadata_routing.methodmapping class method)": [[911, "sklearn.utils.metadata_routing.MethodMapping.from_str"]], "get_routing_for_object() (in module sklearn.utils.metadata_routing)": [[912, "sklearn.utils.metadata_routing.get_routing_for_object"]], "process_routing() (in module sklearn.utils.metadata_routing)": [[913, "sklearn.utils.metadata_routing.process_routing"]], "available_if() (in module sklearn.utils.metaestimators)": [[914, "sklearn.utils.metaestimators.available_if"]], "is_multilabel() (in module sklearn.utils.multiclass)": [[915, "sklearn.utils.multiclass.is_multilabel"]], "type_of_target() (in module sklearn.utils.multiclass)": [[916, "sklearn.utils.multiclass.type_of_target"]], "unique_labels() (in module sklearn.utils.multiclass)": [[917, "sklearn.utils.multiclass.unique_labels"]], "murmurhash3_32() (in module sklearn.utils)": [[918, "sklearn.utils.murmurhash3_32"]], "parallel (class in sklearn.utils.parallel)": [[919, "sklearn.utils.parallel.Parallel"]], "dispatch_next() (sklearn.utils.parallel.parallel method)": [[919, "sklearn.utils.parallel.Parallel.dispatch_next"]], "dispatch_one_batch() (sklearn.utils.parallel.parallel method)": [[919, "sklearn.utils.parallel.Parallel.dispatch_one_batch"]], "format() (sklearn.utils.parallel.parallel method)": [[919, "sklearn.utils.parallel.Parallel.format"]], "print_progress() (sklearn.utils.parallel.parallel method)": [[919, "sklearn.utils.parallel.Parallel.print_progress"]], "delayed() (in module sklearn.utils.parallel)": [[920, "sklearn.utils.parallel.delayed"]], "parallel_backend() (in module sklearn.utils)": [[921, "sklearn.utils.parallel_backend"]], "sample_without_replacement() (in module sklearn.utils.random)": [[922, "sklearn.utils.random.sample_without_replacement"]], "register_parallel_backend() (in module sklearn.utils)": [[923, "sklearn.utils.register_parallel_backend"]], "resample() (in module sklearn.utils)": [[924, "sklearn.utils.resample"]], "safe_mask() (in module sklearn.utils)": [[925, "sklearn.utils.safe_mask"]], "safe_sqr() (in module sklearn.utils)": [[926, "sklearn.utils.safe_sqr"]], "shuffle() (in module sklearn.utils)": [[927, "sklearn.utils.shuffle"]], "incr_mean_variance_axis() (in module sklearn.utils.sparsefuncs)": [[928, "sklearn.utils.sparsefuncs.incr_mean_variance_axis"]], "inplace_column_scale() (in module sklearn.utils.sparsefuncs)": [[929, "sklearn.utils.sparsefuncs.inplace_column_scale"]], "inplace_csr_column_scale() (in module sklearn.utils.sparsefuncs)": [[930, "sklearn.utils.sparsefuncs.inplace_csr_column_scale"]], "inplace_row_scale() (in module sklearn.utils.sparsefuncs)": [[931, "sklearn.utils.sparsefuncs.inplace_row_scale"]], "inplace_swap_column() (in module sklearn.utils.sparsefuncs)": [[932, "sklearn.utils.sparsefuncs.inplace_swap_column"]], "inplace_swap_row() (in module sklearn.utils.sparsefuncs)": [[933, "sklearn.utils.sparsefuncs.inplace_swap_row"]], "mean_variance_axis() (in module sklearn.utils.sparsefuncs)": [[934, "sklearn.utils.sparsefuncs.mean_variance_axis"]], "inplace_csr_row_normalize_l1() (in module sklearn.utils.sparsefuncs_fast)": [[935, "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1"]], "inplace_csr_row_normalize_l2() (in module sklearn.utils.sparsefuncs_fast)": [[936, "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2"]], "check_is_fitted() (in module sklearn.utils.validation)": [[937, "sklearn.utils.validation.check_is_fitted"]], "check_memory() (in module sklearn.utils.validation)": [[938, "sklearn.utils.validation.check_memory"]], "check_symmetric() (in module sklearn.utils.validation)": [[939, "sklearn.utils.validation.check_symmetric"]], "column_or_1d() (in module sklearn.utils.validation)": [[940, "sklearn.utils.validation.column_or_1d"]], "has_fit_parameter() (in module sklearn.utils.validation)": [[941, "sklearn.utils.validation.has_fit_parameter"]]}})