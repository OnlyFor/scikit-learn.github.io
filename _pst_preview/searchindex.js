Search.setIndex({"docnames": ["about", "authors", "authors_emeritus", "auto_examples/applications/index", "auto_examples/applications/plot_cyclical_feature_engineering", "auto_examples/applications/plot_digits_denoising", "auto_examples/applications/plot_face_recognition", "auto_examples/applications/plot_model_complexity_influence", "auto_examples/applications/plot_out_of_core_classification", "auto_examples/applications/plot_outlier_detection_wine", "auto_examples/applications/plot_prediction_latency", "auto_examples/applications/plot_species_distribution_modeling", "auto_examples/applications/plot_stock_market", "auto_examples/applications/plot_time_series_lagged_features", "auto_examples/applications/plot_tomography_l1_reconstruction", "auto_examples/applications/plot_topics_extraction_with_nmf_lda", "auto_examples/applications/sg_execution_times", "auto_examples/applications/svm_gui", "auto_examples/applications/wikipedia_principal_eigenvector", "auto_examples/bicluster/index", "auto_examples/bicluster/plot_bicluster_newsgroups", "auto_examples/bicluster/plot_spectral_biclustering", "auto_examples/bicluster/plot_spectral_coclustering", "auto_examples/bicluster/sg_execution_times", "auto_examples/calibration/index", "auto_examples/calibration/plot_calibration", "auto_examples/calibration/plot_calibration_curve", "auto_examples/calibration/plot_calibration_multiclass", "auto_examples/calibration/plot_compare_calibration", "auto_examples/calibration/sg_execution_times", "auto_examples/classification/index", "auto_examples/classification/plot_classification_probability", "auto_examples/classification/plot_classifier_comparison", "auto_examples/classification/plot_digits_classification", "auto_examples/classification/plot_lda", "auto_examples/classification/plot_lda_qda", "auto_examples/classification/sg_execution_times", "auto_examples/cluster/index", "auto_examples/cluster/plot_adjusted_for_chance_measures", "auto_examples/cluster/plot_affinity_propagation", "auto_examples/cluster/plot_agglomerative_clustering", "auto_examples/cluster/plot_agglomerative_clustering_metrics", "auto_examples/cluster/plot_agglomerative_dendrogram", "auto_examples/cluster/plot_birch_vs_minibatchkmeans", "auto_examples/cluster/plot_bisect_kmeans", "auto_examples/cluster/plot_cluster_comparison", "auto_examples/cluster/plot_cluster_iris", "auto_examples/cluster/plot_coin_segmentation", "auto_examples/cluster/plot_coin_ward_segmentation", "auto_examples/cluster/plot_color_quantization", "auto_examples/cluster/plot_dbscan", "auto_examples/cluster/plot_dict_face_patches", "auto_examples/cluster/plot_digits_agglomeration", "auto_examples/cluster/plot_digits_linkage", "auto_examples/cluster/plot_face_compress", "auto_examples/cluster/plot_feature_agglomeration_vs_univariate_selection", "auto_examples/cluster/plot_hdbscan", "auto_examples/cluster/plot_inductive_clustering", "auto_examples/cluster/plot_kmeans_assumptions", "auto_examples/cluster/plot_kmeans_digits", "auto_examples/cluster/plot_kmeans_plusplus", "auto_examples/cluster/plot_kmeans_silhouette_analysis", "auto_examples/cluster/plot_kmeans_stability_low_dim_dense", "auto_examples/cluster/plot_linkage_comparison", "auto_examples/cluster/plot_mean_shift", "auto_examples/cluster/plot_mini_batch_kmeans", "auto_examples/cluster/plot_optics", "auto_examples/cluster/plot_segmentation_toy", "auto_examples/cluster/plot_ward_structured_vs_unstructured", "auto_examples/cluster/sg_execution_times", "auto_examples/compose/index", "auto_examples/compose/plot_column_transformer", "auto_examples/compose/plot_column_transformer_mixed_types", "auto_examples/compose/plot_compare_reduction", "auto_examples/compose/plot_digits_pipe", "auto_examples/compose/plot_feature_union", "auto_examples/compose/plot_transformed_target", "auto_examples/compose/sg_execution_times", "auto_examples/covariance/index", "auto_examples/covariance/plot_covariance_estimation", "auto_examples/covariance/plot_lw_vs_oas", "auto_examples/covariance/plot_mahalanobis_distances", "auto_examples/covariance/plot_robust_vs_empirical_covariance", "auto_examples/covariance/plot_sparse_cov", "auto_examples/covariance/sg_execution_times", "auto_examples/cross_decomposition/index", "auto_examples/cross_decomposition/plot_compare_cross_decomposition", "auto_examples/cross_decomposition/plot_pcr_vs_pls", "auto_examples/cross_decomposition/sg_execution_times", "auto_examples/datasets/index", "auto_examples/datasets/plot_digits_last_image", "auto_examples/datasets/plot_iris_dataset", "auto_examples/datasets/plot_random_dataset", "auto_examples/datasets/plot_random_multilabel_dataset", "auto_examples/datasets/sg_execution_times", "auto_examples/decomposition/index", "auto_examples/decomposition/plot_faces_decomposition", "auto_examples/decomposition/plot_ica_blind_source_separation", "auto_examples/decomposition/plot_ica_vs_pca", "auto_examples/decomposition/plot_image_denoising", "auto_examples/decomposition/plot_incremental_pca", "auto_examples/decomposition/plot_kernel_pca", "auto_examples/decomposition/plot_pca_iris", "auto_examples/decomposition/plot_pca_vs_fa_model_selection", "auto_examples/decomposition/plot_pca_vs_lda", "auto_examples/decomposition/plot_sparse_coding", "auto_examples/decomposition/plot_varimax_fa", "auto_examples/decomposition/sg_execution_times", "auto_examples/developing_estimators/index", "auto_examples/developing_estimators/sg_execution_times", "auto_examples/developing_estimators/sklearn_is_fitted", "auto_examples/ensemble/index", "auto_examples/ensemble/plot_adaboost_multiclass", "auto_examples/ensemble/plot_adaboost_regression", "auto_examples/ensemble/plot_adaboost_twoclass", "auto_examples/ensemble/plot_bias_variance", "auto_examples/ensemble/plot_ensemble_oob", "auto_examples/ensemble/plot_feature_transformation", "auto_examples/ensemble/plot_forest_hist_grad_boosting_comparison", "auto_examples/ensemble/plot_forest_importances", "auto_examples/ensemble/plot_forest_importances_faces", "auto_examples/ensemble/plot_forest_iris", "auto_examples/ensemble/plot_gradient_boosting_categorical", "auto_examples/ensemble/plot_gradient_boosting_early_stopping", "auto_examples/ensemble/plot_gradient_boosting_oob", "auto_examples/ensemble/plot_gradient_boosting_quantile", "auto_examples/ensemble/plot_gradient_boosting_regression", "auto_examples/ensemble/plot_gradient_boosting_regularization", "auto_examples/ensemble/plot_isolation_forest", "auto_examples/ensemble/plot_monotonic_constraints", "auto_examples/ensemble/plot_random_forest_embedding", "auto_examples/ensemble/plot_random_forest_regression_multioutput", "auto_examples/ensemble/plot_stack_predictors", "auto_examples/ensemble/plot_voting_decision_regions", "auto_examples/ensemble/plot_voting_probas", "auto_examples/ensemble/plot_voting_regressor", "auto_examples/ensemble/sg_execution_times", "auto_examples/exercises/index", "auto_examples/exercises/plot_cv_diabetes", "auto_examples/exercises/plot_digits_classification_exercise", "auto_examples/exercises/plot_iris_exercise", "auto_examples/exercises/sg_execution_times", "auto_examples/feature_selection/index", "auto_examples/feature_selection/plot_f_test_vs_mi", "auto_examples/feature_selection/plot_feature_selection", "auto_examples/feature_selection/plot_feature_selection_pipeline", "auto_examples/feature_selection/plot_rfe_digits", "auto_examples/feature_selection/plot_rfe_with_cross_validation", "auto_examples/feature_selection/plot_select_from_model_diabetes", "auto_examples/feature_selection/sg_execution_times", "auto_examples/gaussian_process/index", "auto_examples/gaussian_process/plot_compare_gpr_krr", "auto_examples/gaussian_process/plot_gpc", "auto_examples/gaussian_process/plot_gpc_iris", "auto_examples/gaussian_process/plot_gpc_isoprobability", "auto_examples/gaussian_process/plot_gpc_xor", "auto_examples/gaussian_process/plot_gpr_co2", "auto_examples/gaussian_process/plot_gpr_noisy", "auto_examples/gaussian_process/plot_gpr_noisy_targets", "auto_examples/gaussian_process/plot_gpr_on_structured_data", "auto_examples/gaussian_process/plot_gpr_prior_posterior", "auto_examples/gaussian_process/sg_execution_times", "auto_examples/impute/index", "auto_examples/impute/plot_iterative_imputer_variants_comparison", "auto_examples/impute/plot_missing_values", "auto_examples/impute/sg_execution_times", "auto_examples/index", "auto_examples/inspection/index", "auto_examples/inspection/plot_causal_interpretation", "auto_examples/inspection/plot_linear_model_coefficient_interpretation", "auto_examples/inspection/plot_partial_dependence", "auto_examples/inspection/plot_permutation_importance", "auto_examples/inspection/plot_permutation_importance_multicollinear", "auto_examples/inspection/sg_execution_times", "auto_examples/kernel_approximation/index", "auto_examples/kernel_approximation/plot_scalable_poly_kernels", "auto_examples/kernel_approximation/sg_execution_times", "auto_examples/linear_model/index", "auto_examples/linear_model/plot_ard", "auto_examples/linear_model/plot_bayesian_ridge_curvefit", "auto_examples/linear_model/plot_elastic_net_precomputed_gram_matrix_with_weighted_samples", "auto_examples/linear_model/plot_huber_vs_ridge", "auto_examples/linear_model/plot_iris_logistic", "auto_examples/linear_model/plot_lasso_and_elasticnet", "auto_examples/linear_model/plot_lasso_coordinate_descent_path", "auto_examples/linear_model/plot_lasso_dense_vs_sparse_data", "auto_examples/linear_model/plot_lasso_lars", "auto_examples/linear_model/plot_lasso_lars_ic", "auto_examples/linear_model/plot_lasso_model_selection", "auto_examples/linear_model/plot_logistic", "auto_examples/linear_model/plot_logistic_l1_l2_sparsity", "auto_examples/linear_model/plot_logistic_multinomial", "auto_examples/linear_model/plot_logistic_path", "auto_examples/linear_model/plot_multi_task_lasso_support", "auto_examples/linear_model/plot_nnls", "auto_examples/linear_model/plot_ols", "auto_examples/linear_model/plot_ols_3d", "auto_examples/linear_model/plot_ols_ridge_variance", "auto_examples/linear_model/plot_omp", "auto_examples/linear_model/plot_poisson_regression_non_normal_loss", "auto_examples/linear_model/plot_polynomial_interpolation", "auto_examples/linear_model/plot_quantile_regression", "auto_examples/linear_model/plot_ransac", "auto_examples/linear_model/plot_ridge_coeffs", "auto_examples/linear_model/plot_ridge_path", "auto_examples/linear_model/plot_robust_fit", "auto_examples/linear_model/plot_sgd_comparison", "auto_examples/linear_model/plot_sgd_early_stopping", "auto_examples/linear_model/plot_sgd_iris", "auto_examples/linear_model/plot_sgd_loss_functions", "auto_examples/linear_model/plot_sgd_penalties", "auto_examples/linear_model/plot_sgd_separating_hyperplane", "auto_examples/linear_model/plot_sgd_weighted_samples", "auto_examples/linear_model/plot_sgdocsvm_vs_ocsvm", "auto_examples/linear_model/plot_sparse_logistic_regression_20newsgroups", "auto_examples/linear_model/plot_sparse_logistic_regression_mnist", "auto_examples/linear_model/plot_theilsen", "auto_examples/linear_model/plot_tweedie_regression_insurance_claims", "auto_examples/linear_model/sg_execution_times", "auto_examples/manifold/index", "auto_examples/manifold/plot_compare_methods", "auto_examples/manifold/plot_lle_digits", "auto_examples/manifold/plot_manifold_sphere", "auto_examples/manifold/plot_mds", "auto_examples/manifold/plot_swissroll", "auto_examples/manifold/plot_t_sne_perplexity", "auto_examples/manifold/sg_execution_times", "auto_examples/miscellaneous/index", "auto_examples/miscellaneous/plot_anomaly_comparison", "auto_examples/miscellaneous/plot_display_object_visualization", "auto_examples/miscellaneous/plot_estimator_representation", "auto_examples/miscellaneous/plot_isotonic_regression", "auto_examples/miscellaneous/plot_johnson_lindenstrauss_bound", "auto_examples/miscellaneous/plot_kernel_approximation", "auto_examples/miscellaneous/plot_kernel_ridge_regression", "auto_examples/miscellaneous/plot_metadata_routing", "auto_examples/miscellaneous/plot_multilabel", "auto_examples/miscellaneous/plot_multioutput_face_completion", "auto_examples/miscellaneous/plot_outlier_detection_bench", "auto_examples/miscellaneous/plot_partial_dependence_visualization_api", "auto_examples/miscellaneous/plot_pipeline_display", "auto_examples/miscellaneous/plot_roc_curve_visualization_api", "auto_examples/miscellaneous/plot_set_output", "auto_examples/miscellaneous/sg_execution_times", "auto_examples/mixture/index", "auto_examples/mixture/plot_concentration_prior", "auto_examples/mixture/plot_gmm", "auto_examples/mixture/plot_gmm_covariances", "auto_examples/mixture/plot_gmm_init", "auto_examples/mixture/plot_gmm_pdf", "auto_examples/mixture/plot_gmm_selection", "auto_examples/mixture/plot_gmm_sin", "auto_examples/mixture/sg_execution_times", "auto_examples/model_selection/index", "auto_examples/model_selection/plot_confusion_matrix", "auto_examples/model_selection/plot_cv_indices", "auto_examples/model_selection/plot_cv_predict", "auto_examples/model_selection/plot_det", "auto_examples/model_selection/plot_grid_search_digits", "auto_examples/model_selection/plot_grid_search_refit_callable", "auto_examples/model_selection/plot_grid_search_stats", "auto_examples/model_selection/plot_grid_search_text_feature_extraction", "auto_examples/model_selection/plot_learning_curve", "auto_examples/model_selection/plot_likelihood_ratios", "auto_examples/model_selection/plot_multi_metric_evaluation", "auto_examples/model_selection/plot_nested_cross_validation_iris", "auto_examples/model_selection/plot_permutation_tests_for_classification", "auto_examples/model_selection/plot_precision_recall", "auto_examples/model_selection/plot_randomized_search", "auto_examples/model_selection/plot_roc", "auto_examples/model_selection/plot_roc_crossval", "auto_examples/model_selection/plot_successive_halving_heatmap", "auto_examples/model_selection/plot_successive_halving_iterations", "auto_examples/model_selection/plot_train_error_vs_test_error", "auto_examples/model_selection/plot_underfitting_overfitting", "auto_examples/model_selection/plot_validation_curve", "auto_examples/model_selection/sg_execution_times", "auto_examples/multiclass/index", "auto_examples/multiclass/plot_multiclass_overview", "auto_examples/multiclass/sg_execution_times", "auto_examples/multioutput/index", "auto_examples/multioutput/plot_classifier_chain_yeast", "auto_examples/multioutput/sg_execution_times", "auto_examples/neighbors/approximate_nearest_neighbors", "auto_examples/neighbors/index", "auto_examples/neighbors/plot_caching_nearest_neighbors", "auto_examples/neighbors/plot_classification", "auto_examples/neighbors/plot_digits_kde_sampling", "auto_examples/neighbors/plot_kde_1d", "auto_examples/neighbors/plot_lof_novelty_detection", "auto_examples/neighbors/plot_lof_outlier_detection", "auto_examples/neighbors/plot_nca_classification", "auto_examples/neighbors/plot_nca_dim_reduction", "auto_examples/neighbors/plot_nca_illustration", "auto_examples/neighbors/plot_nearest_centroid", "auto_examples/neighbors/plot_regression", "auto_examples/neighbors/plot_species_kde", "auto_examples/neighbors/sg_execution_times", "auto_examples/neural_networks/index", "auto_examples/neural_networks/plot_mlp_alpha", "auto_examples/neural_networks/plot_mlp_training_curves", "auto_examples/neural_networks/plot_mnist_filters", "auto_examples/neural_networks/plot_rbm_logistic_classification", "auto_examples/neural_networks/sg_execution_times", "auto_examples/preprocessing/index", "auto_examples/preprocessing/plot_all_scaling", "auto_examples/preprocessing/plot_discretization", "auto_examples/preprocessing/plot_discretization_classification", "auto_examples/preprocessing/plot_discretization_strategies", "auto_examples/preprocessing/plot_map_data_to_normal", "auto_examples/preprocessing/plot_scaling_importance", "auto_examples/preprocessing/plot_target_encoder", "auto_examples/preprocessing/plot_target_encoder_cross_val", "auto_examples/preprocessing/sg_execution_times", "auto_examples/release_highlights/index", "auto_examples/release_highlights/plot_release_highlights_0_22_0", "auto_examples/release_highlights/plot_release_highlights_0_23_0", "auto_examples/release_highlights/plot_release_highlights_0_24_0", "auto_examples/release_highlights/plot_release_highlights_1_0_0", "auto_examples/release_highlights/plot_release_highlights_1_1_0", "auto_examples/release_highlights/plot_release_highlights_1_2_0", "auto_examples/release_highlights/plot_release_highlights_1_3_0", "auto_examples/release_highlights/plot_release_highlights_1_4_0", "auto_examples/release_highlights/sg_execution_times", "auto_examples/semi_supervised/index", "auto_examples/semi_supervised/plot_label_propagation_digits", "auto_examples/semi_supervised/plot_label_propagation_digits_active_learning", "auto_examples/semi_supervised/plot_label_propagation_structure", "auto_examples/semi_supervised/plot_self_training_varying_threshold", "auto_examples/semi_supervised/plot_semi_supervised_newsgroups", "auto_examples/semi_supervised/plot_semi_supervised_versus_svm_iris", "auto_examples/semi_supervised/sg_execution_times", "auto_examples/sg_execution_times", "auto_examples/svm/index", "auto_examples/svm/plot_custom_kernel", "auto_examples/svm/plot_iris_svc", "auto_examples/svm/plot_linearsvc_support_vectors", "auto_examples/svm/plot_oneclass", "auto_examples/svm/plot_rbf_parameters", "auto_examples/svm/plot_separating_hyperplane", "auto_examples/svm/plot_separating_hyperplane_unbalanced", "auto_examples/svm/plot_svm_anova", "auto_examples/svm/plot_svm_kernels", "auto_examples/svm/plot_svm_margin", "auto_examples/svm/plot_svm_nonlinear", "auto_examples/svm/plot_svm_regression", "auto_examples/svm/plot_svm_scale_c", "auto_examples/svm/plot_svm_tie_breaking", "auto_examples/svm/plot_weighted_samples", "auto_examples/svm/sg_execution_times", "auto_examples/text/index", "auto_examples/text/plot_document_classification_20newsgroups", "auto_examples/text/plot_document_clustering", "auto_examples/text/plot_hashing_vs_dict_vectorizer", "auto_examples/text/sg_execution_times", "auto_examples/tree/index", "auto_examples/tree/plot_cost_complexity_pruning", "auto_examples/tree/plot_iris_dtc", "auto_examples/tree/plot_tree_regression", "auto_examples/tree/plot_tree_regression_multioutput", "auto_examples/tree/plot_unveil_tree_structure", "auto_examples/tree/sg_execution_times", "common_pitfalls", "communication_team", "communication_team_emeritus", "computing", "computing/computational_performance", "computing/parallelism", "computing/scaling_strategies", "contributor_experience_team", "contributor_experience_team_emeritus", "data_transforms", "datasets", "datasets/loading_other_datasets", "datasets/real_world", "datasets/sample_generators", "datasets/toy_dataset", "developers/advanced_installation", "developers/bug_triaging", "developers/contributing", "developers/cython", "developers/develop", "developers/index", "developers/maintainer", "developers/minimal_reproducer", "developers/performance", "developers/plotting", "developers/tips", "developers/utilities", "dispatching", "documentation_team", "faq", "getting_started", "glossary", "governance", "index", "inspection", "install", "metadata_routing", "min_dependency_substitutions", "min_dependency_table", "model_persistence", "model_selection", "modules/array_api", "modules/biclustering", "modules/calibration", "modules/classes", "modules/clustering", "modules/compose", "modules/covariance", "modules/cross_decomposition", "modules/cross_validation", "modules/decomposition", "modules/density", "modules/ensemble", "modules/feature_extraction", "modules/feature_selection", "modules/gaussian_process", "modules/generated/dbscan-function", "modules/generated/fastica-function", "modules/generated/oas-function", "modules/generated/sklearn.base.BaseEstimator", "modules/generated/sklearn.base.BiclusterMixin", "modules/generated/sklearn.base.ClassNamePrefixFeaturesOutMixin", "modules/generated/sklearn.base.ClassifierMixin", "modules/generated/sklearn.base.ClusterMixin", "modules/generated/sklearn.base.DensityMixin", "modules/generated/sklearn.base.MetaEstimatorMixin", "modules/generated/sklearn.base.OneToOneFeatureMixin", "modules/generated/sklearn.base.OutlierMixin", "modules/generated/sklearn.base.RegressorMixin", "modules/generated/sklearn.base.TransformerMixin", "modules/generated/sklearn.base.clone", "modules/generated/sklearn.base.is_classifier", "modules/generated/sklearn.base.is_regressor", "modules/generated/sklearn.calibration.CalibratedClassifierCV", "modules/generated/sklearn.calibration.CalibrationDisplay", "modules/generated/sklearn.calibration.calibration_curve", "modules/generated/sklearn.cluster.AffinityPropagation", "modules/generated/sklearn.cluster.AgglomerativeClustering", "modules/generated/sklearn.cluster.Birch", "modules/generated/sklearn.cluster.BisectingKMeans", "modules/generated/sklearn.cluster.DBSCAN", "modules/generated/sklearn.cluster.FeatureAgglomeration", "modules/generated/sklearn.cluster.HDBSCAN", "modules/generated/sklearn.cluster.KMeans", "modules/generated/sklearn.cluster.MeanShift", "modules/generated/sklearn.cluster.MiniBatchKMeans", "modules/generated/sklearn.cluster.OPTICS", "modules/generated/sklearn.cluster.SpectralBiclustering", "modules/generated/sklearn.cluster.SpectralClustering", "modules/generated/sklearn.cluster.SpectralCoclustering", "modules/generated/sklearn.cluster.affinity_propagation", "modules/generated/sklearn.cluster.cluster_optics_dbscan", "modules/generated/sklearn.cluster.cluster_optics_xi", "modules/generated/sklearn.cluster.compute_optics_graph", "modules/generated/sklearn.cluster.estimate_bandwidth", "modules/generated/sklearn.cluster.k_means", "modules/generated/sklearn.cluster.kmeans_plusplus", "modules/generated/sklearn.cluster.mean_shift", "modules/generated/sklearn.cluster.spectral_clustering", "modules/generated/sklearn.cluster.ward_tree", "modules/generated/sklearn.compose.ColumnTransformer", "modules/generated/sklearn.compose.TransformedTargetRegressor", "modules/generated/sklearn.compose.make_column_selector", "modules/generated/sklearn.compose.make_column_transformer", "modules/generated/sklearn.config_context", "modules/generated/sklearn.covariance.EllipticEnvelope", "modules/generated/sklearn.covariance.EmpiricalCovariance", "modules/generated/sklearn.covariance.GraphicalLasso", "modules/generated/sklearn.covariance.GraphicalLassoCV", "modules/generated/sklearn.covariance.LedoitWolf", "modules/generated/sklearn.covariance.MinCovDet", "modules/generated/sklearn.covariance.OAS", "modules/generated/sklearn.covariance.ShrunkCovariance", "modules/generated/sklearn.covariance.empirical_covariance", "modules/generated/sklearn.covariance.graphical_lasso", "modules/generated/sklearn.covariance.ledoit_wolf", "modules/generated/sklearn.covariance.ledoit_wolf_shrinkage", "modules/generated/sklearn.covariance.shrunk_covariance", "modules/generated/sklearn.cross_decomposition.CCA", "modules/generated/sklearn.cross_decomposition.PLSCanonical", "modules/generated/sklearn.cross_decomposition.PLSRegression", "modules/generated/sklearn.cross_decomposition.PLSSVD", "modules/generated/sklearn.datasets.clear_data_home", "modules/generated/sklearn.datasets.dump_svmlight_file", "modules/generated/sklearn.datasets.fetch_20newsgroups", "modules/generated/sklearn.datasets.fetch_20newsgroups_vectorized", "modules/generated/sklearn.datasets.fetch_california_housing", "modules/generated/sklearn.datasets.fetch_covtype", "modules/generated/sklearn.datasets.fetch_kddcup99", "modules/generated/sklearn.datasets.fetch_lfw_pairs", "modules/generated/sklearn.datasets.fetch_lfw_people", "modules/generated/sklearn.datasets.fetch_olivetti_faces", "modules/generated/sklearn.datasets.fetch_openml", "modules/generated/sklearn.datasets.fetch_rcv1", "modules/generated/sklearn.datasets.fetch_species_distributions", "modules/generated/sklearn.datasets.get_data_home", "modules/generated/sklearn.datasets.load_breast_cancer", "modules/generated/sklearn.datasets.load_diabetes", "modules/generated/sklearn.datasets.load_digits", "modules/generated/sklearn.datasets.load_files", "modules/generated/sklearn.datasets.load_iris", "modules/generated/sklearn.datasets.load_linnerud", "modules/generated/sklearn.datasets.load_sample_image", "modules/generated/sklearn.datasets.load_sample_images", "modules/generated/sklearn.datasets.load_svmlight_file", "modules/generated/sklearn.datasets.load_svmlight_files", "modules/generated/sklearn.datasets.load_wine", "modules/generated/sklearn.datasets.make_biclusters", "modules/generated/sklearn.datasets.make_blobs", "modules/generated/sklearn.datasets.make_checkerboard", "modules/generated/sklearn.datasets.make_circles", "modules/generated/sklearn.datasets.make_classification", "modules/generated/sklearn.datasets.make_friedman1", "modules/generated/sklearn.datasets.make_friedman2", "modules/generated/sklearn.datasets.make_friedman3", "modules/generated/sklearn.datasets.make_gaussian_quantiles", "modules/generated/sklearn.datasets.make_hastie_10_2", "modules/generated/sklearn.datasets.make_low_rank_matrix", "modules/generated/sklearn.datasets.make_moons", "modules/generated/sklearn.datasets.make_multilabel_classification", "modules/generated/sklearn.datasets.make_regression", "modules/generated/sklearn.datasets.make_s_curve", "modules/generated/sklearn.datasets.make_sparse_coded_signal", "modules/generated/sklearn.datasets.make_sparse_spd_matrix", "modules/generated/sklearn.datasets.make_sparse_uncorrelated", "modules/generated/sklearn.datasets.make_spd_matrix", "modules/generated/sklearn.datasets.make_swiss_roll", "modules/generated/sklearn.decomposition.DictionaryLearning", "modules/generated/sklearn.decomposition.FactorAnalysis", "modules/generated/sklearn.decomposition.FastICA", "modules/generated/sklearn.decomposition.IncrementalPCA", "modules/generated/sklearn.decomposition.KernelPCA", "modules/generated/sklearn.decomposition.LatentDirichletAllocation", "modules/generated/sklearn.decomposition.MiniBatchDictionaryLearning", "modules/generated/sklearn.decomposition.MiniBatchNMF", "modules/generated/sklearn.decomposition.MiniBatchSparsePCA", "modules/generated/sklearn.decomposition.NMF", "modules/generated/sklearn.decomposition.PCA", "modules/generated/sklearn.decomposition.SparseCoder", "modules/generated/sklearn.decomposition.SparsePCA", "modules/generated/sklearn.decomposition.TruncatedSVD", "modules/generated/sklearn.decomposition.dict_learning", "modules/generated/sklearn.decomposition.dict_learning_online", "modules/generated/sklearn.decomposition.non_negative_factorization", "modules/generated/sklearn.decomposition.sparse_encode", "modules/generated/sklearn.discriminant_analysis.LinearDiscriminantAnalysis", "modules/generated/sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis", "modules/generated/sklearn.dummy.DummyClassifier", "modules/generated/sklearn.dummy.DummyRegressor", "modules/generated/sklearn.ensemble.AdaBoostClassifier", "modules/generated/sklearn.ensemble.AdaBoostRegressor", "modules/generated/sklearn.ensemble.BaggingClassifier", "modules/generated/sklearn.ensemble.BaggingRegressor", "modules/generated/sklearn.ensemble.ExtraTreesClassifier", "modules/generated/sklearn.ensemble.ExtraTreesRegressor", "modules/generated/sklearn.ensemble.GradientBoostingClassifier", "modules/generated/sklearn.ensemble.GradientBoostingRegressor", "modules/generated/sklearn.ensemble.HistGradientBoostingClassifier", "modules/generated/sklearn.ensemble.HistGradientBoostingRegressor", "modules/generated/sklearn.ensemble.IsolationForest", "modules/generated/sklearn.ensemble.RandomForestClassifier", "modules/generated/sklearn.ensemble.RandomForestRegressor", "modules/generated/sklearn.ensemble.RandomTreesEmbedding", "modules/generated/sklearn.ensemble.StackingClassifier", "modules/generated/sklearn.ensemble.StackingRegressor", "modules/generated/sklearn.ensemble.VotingClassifier", "modules/generated/sklearn.ensemble.VotingRegressor", "modules/generated/sklearn.exceptions.ConvergenceWarning", "modules/generated/sklearn.exceptions.DataConversionWarning", "modules/generated/sklearn.exceptions.DataDimensionalityWarning", "modules/generated/sklearn.exceptions.EfficiencyWarning", "modules/generated/sklearn.exceptions.FitFailedWarning", "modules/generated/sklearn.exceptions.InconsistentVersionWarning", "modules/generated/sklearn.exceptions.NotFittedError", "modules/generated/sklearn.exceptions.UndefinedMetricWarning", "modules/generated/sklearn.experimental.enable_halving_search_cv", "modules/generated/sklearn.experimental.enable_iterative_imputer", "modules/generated/sklearn.feature_extraction.DictVectorizer", "modules/generated/sklearn.feature_extraction.FeatureHasher", "modules/generated/sklearn.feature_extraction.image.PatchExtractor", "modules/generated/sklearn.feature_extraction.image.extract_patches_2d", "modules/generated/sklearn.feature_extraction.image.grid_to_graph", "modules/generated/sklearn.feature_extraction.image.img_to_graph", "modules/generated/sklearn.feature_extraction.image.reconstruct_from_patches_2d", "modules/generated/sklearn.feature_extraction.text.CountVectorizer", "modules/generated/sklearn.feature_extraction.text.HashingVectorizer", "modules/generated/sklearn.feature_extraction.text.TfidfTransformer", "modules/generated/sklearn.feature_extraction.text.TfidfVectorizer", "modules/generated/sklearn.feature_selection.GenericUnivariateSelect", "modules/generated/sklearn.feature_selection.RFE", "modules/generated/sklearn.feature_selection.RFECV", "modules/generated/sklearn.feature_selection.SelectFdr", "modules/generated/sklearn.feature_selection.SelectFpr", "modules/generated/sklearn.feature_selection.SelectFromModel", "modules/generated/sklearn.feature_selection.SelectFwe", "modules/generated/sklearn.feature_selection.SelectKBest", "modules/generated/sklearn.feature_selection.SelectPercentile", "modules/generated/sklearn.feature_selection.SelectorMixin", "modules/generated/sklearn.feature_selection.SequentialFeatureSelector", "modules/generated/sklearn.feature_selection.VarianceThreshold", "modules/generated/sklearn.feature_selection.chi2", "modules/generated/sklearn.feature_selection.f_classif", "modules/generated/sklearn.feature_selection.f_regression", "modules/generated/sklearn.feature_selection.mutual_info_classif", "modules/generated/sklearn.feature_selection.mutual_info_regression", "modules/generated/sklearn.feature_selection.r_regression", "modules/generated/sklearn.gaussian_process.GaussianProcessClassifier", "modules/generated/sklearn.gaussian_process.GaussianProcessRegressor", "modules/generated/sklearn.gaussian_process.kernels.CompoundKernel", "modules/generated/sklearn.gaussian_process.kernels.ConstantKernel", "modules/generated/sklearn.gaussian_process.kernels.DotProduct", "modules/generated/sklearn.gaussian_process.kernels.ExpSineSquared", "modules/generated/sklearn.gaussian_process.kernels.Exponentiation", "modules/generated/sklearn.gaussian_process.kernels.Hyperparameter", "modules/generated/sklearn.gaussian_process.kernels.Kernel", "modules/generated/sklearn.gaussian_process.kernels.Matern", "modules/generated/sklearn.gaussian_process.kernels.PairwiseKernel", "modules/generated/sklearn.gaussian_process.kernels.Product", "modules/generated/sklearn.gaussian_process.kernels.RBF", "modules/generated/sklearn.gaussian_process.kernels.RationalQuadratic", "modules/generated/sklearn.gaussian_process.kernels.Sum", "modules/generated/sklearn.gaussian_process.kernels.WhiteKernel", "modules/generated/sklearn.get_config", "modules/generated/sklearn.impute.IterativeImputer", "modules/generated/sklearn.impute.KNNImputer", "modules/generated/sklearn.impute.MissingIndicator", "modules/generated/sklearn.impute.SimpleImputer", "modules/generated/sklearn.inspection.DecisionBoundaryDisplay", "modules/generated/sklearn.inspection.PartialDependenceDisplay", "modules/generated/sklearn.inspection.partial_dependence", "modules/generated/sklearn.inspection.permutation_importance", "modules/generated/sklearn.isotonic.IsotonicRegression", "modules/generated/sklearn.isotonic.check_increasing", "modules/generated/sklearn.isotonic.isotonic_regression", "modules/generated/sklearn.kernel_approximation.AdditiveChi2Sampler", "modules/generated/sklearn.kernel_approximation.Nystroem", "modules/generated/sklearn.kernel_approximation.PolynomialCountSketch", "modules/generated/sklearn.kernel_approximation.RBFSampler", "modules/generated/sklearn.kernel_approximation.SkewedChi2Sampler", "modules/generated/sklearn.kernel_ridge.KernelRidge", "modules/generated/sklearn.linear_model.ARDRegression", "modules/generated/sklearn.linear_model.BayesianRidge", "modules/generated/sklearn.linear_model.ElasticNet", "modules/generated/sklearn.linear_model.ElasticNetCV", "modules/generated/sklearn.linear_model.GammaRegressor", "modules/generated/sklearn.linear_model.HuberRegressor", "modules/generated/sklearn.linear_model.Lars", "modules/generated/sklearn.linear_model.LarsCV", "modules/generated/sklearn.linear_model.Lasso", "modules/generated/sklearn.linear_model.LassoCV", "modules/generated/sklearn.linear_model.LassoLars", "modules/generated/sklearn.linear_model.LassoLarsCV", "modules/generated/sklearn.linear_model.LassoLarsIC", "modules/generated/sklearn.linear_model.LinearRegression", "modules/generated/sklearn.linear_model.LogisticRegression", "modules/generated/sklearn.linear_model.LogisticRegressionCV", "modules/generated/sklearn.linear_model.MultiTaskElasticNet", "modules/generated/sklearn.linear_model.MultiTaskElasticNetCV", "modules/generated/sklearn.linear_model.MultiTaskLasso", "modules/generated/sklearn.linear_model.MultiTaskLassoCV", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuit", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuitCV", "modules/generated/sklearn.linear_model.PassiveAggressiveClassifier", "modules/generated/sklearn.linear_model.PassiveAggressiveRegressor", "modules/generated/sklearn.linear_model.Perceptron", "modules/generated/sklearn.linear_model.PoissonRegressor", "modules/generated/sklearn.linear_model.QuantileRegressor", "modules/generated/sklearn.linear_model.RANSACRegressor", "modules/generated/sklearn.linear_model.Ridge", "modules/generated/sklearn.linear_model.RidgeCV", "modules/generated/sklearn.linear_model.RidgeClassifier", "modules/generated/sklearn.linear_model.RidgeClassifierCV", "modules/generated/sklearn.linear_model.SGDClassifier", "modules/generated/sklearn.linear_model.SGDOneClassSVM", "modules/generated/sklearn.linear_model.SGDRegressor", "modules/generated/sklearn.linear_model.TheilSenRegressor", "modules/generated/sklearn.linear_model.TweedieRegressor", "modules/generated/sklearn.linear_model.enet_path", "modules/generated/sklearn.linear_model.lars_path", "modules/generated/sklearn.linear_model.lars_path_gram", "modules/generated/sklearn.linear_model.lasso_path", "modules/generated/sklearn.linear_model.orthogonal_mp", "modules/generated/sklearn.linear_model.orthogonal_mp_gram", "modules/generated/sklearn.linear_model.ridge_regression", "modules/generated/sklearn.manifold.Isomap", "modules/generated/sklearn.manifold.LocallyLinearEmbedding", "modules/generated/sklearn.manifold.MDS", "modules/generated/sklearn.manifold.SpectralEmbedding", "modules/generated/sklearn.manifold.TSNE", "modules/generated/sklearn.manifold.locally_linear_embedding", "modules/generated/sklearn.manifold.smacof", "modules/generated/sklearn.manifold.spectral_embedding", "modules/generated/sklearn.manifold.trustworthiness", "modules/generated/sklearn.metrics.ConfusionMatrixDisplay", "modules/generated/sklearn.metrics.DetCurveDisplay", "modules/generated/sklearn.metrics.DistanceMetric", "modules/generated/sklearn.metrics.PrecisionRecallDisplay", "modules/generated/sklearn.metrics.PredictionErrorDisplay", "modules/generated/sklearn.metrics.RocCurveDisplay", "modules/generated/sklearn.metrics.accuracy_score", "modules/generated/sklearn.metrics.adjusted_mutual_info_score", "modules/generated/sklearn.metrics.adjusted_rand_score", "modules/generated/sklearn.metrics.auc", "modules/generated/sklearn.metrics.average_precision_score", "modules/generated/sklearn.metrics.balanced_accuracy_score", "modules/generated/sklearn.metrics.brier_score_loss", "modules/generated/sklearn.metrics.calinski_harabasz_score", "modules/generated/sklearn.metrics.check_scoring", "modules/generated/sklearn.metrics.class_likelihood_ratios", "modules/generated/sklearn.metrics.classification_report", "modules/generated/sklearn.metrics.cluster.contingency_matrix", "modules/generated/sklearn.metrics.cluster.pair_confusion_matrix", "modules/generated/sklearn.metrics.cohen_kappa_score", "modules/generated/sklearn.metrics.completeness_score", "modules/generated/sklearn.metrics.confusion_matrix", "modules/generated/sklearn.metrics.consensus_score", "modules/generated/sklearn.metrics.coverage_error", "modules/generated/sklearn.metrics.d2_absolute_error_score", "modules/generated/sklearn.metrics.d2_pinball_score", "modules/generated/sklearn.metrics.d2_tweedie_score", "modules/generated/sklearn.metrics.davies_bouldin_score", "modules/generated/sklearn.metrics.dcg_score", "modules/generated/sklearn.metrics.det_curve", "modules/generated/sklearn.metrics.explained_variance_score", "modules/generated/sklearn.metrics.f1_score", "modules/generated/sklearn.metrics.fbeta_score", "modules/generated/sklearn.metrics.fowlkes_mallows_score", "modules/generated/sklearn.metrics.get_scorer", "modules/generated/sklearn.metrics.get_scorer_names", "modules/generated/sklearn.metrics.hamming_loss", "modules/generated/sklearn.metrics.hinge_loss", "modules/generated/sklearn.metrics.homogeneity_completeness_v_measure", "modules/generated/sklearn.metrics.homogeneity_score", "modules/generated/sklearn.metrics.jaccard_score", "modules/generated/sklearn.metrics.label_ranking_average_precision_score", "modules/generated/sklearn.metrics.label_ranking_loss", "modules/generated/sklearn.metrics.log_loss", "modules/generated/sklearn.metrics.make_scorer", "modules/generated/sklearn.metrics.matthews_corrcoef", "modules/generated/sklearn.metrics.max_error", "modules/generated/sklearn.metrics.mean_absolute_error", "modules/generated/sklearn.metrics.mean_absolute_percentage_error", "modules/generated/sklearn.metrics.mean_gamma_deviance", "modules/generated/sklearn.metrics.mean_pinball_loss", "modules/generated/sklearn.metrics.mean_poisson_deviance", "modules/generated/sklearn.metrics.mean_squared_error", "modules/generated/sklearn.metrics.mean_squared_log_error", "modules/generated/sklearn.metrics.mean_tweedie_deviance", "modules/generated/sklearn.metrics.median_absolute_error", "modules/generated/sklearn.metrics.multilabel_confusion_matrix", "modules/generated/sklearn.metrics.mutual_info_score", "modules/generated/sklearn.metrics.ndcg_score", "modules/generated/sklearn.metrics.normalized_mutual_info_score", "modules/generated/sklearn.metrics.pairwise.additive_chi2_kernel", "modules/generated/sklearn.metrics.pairwise.chi2_kernel", "modules/generated/sklearn.metrics.pairwise.cosine_distances", "modules/generated/sklearn.metrics.pairwise.cosine_similarity", "modules/generated/sklearn.metrics.pairwise.distance_metrics", "modules/generated/sklearn.metrics.pairwise.euclidean_distances", "modules/generated/sklearn.metrics.pairwise.haversine_distances", "modules/generated/sklearn.metrics.pairwise.kernel_metrics", "modules/generated/sklearn.metrics.pairwise.laplacian_kernel", "modules/generated/sklearn.metrics.pairwise.linear_kernel", "modules/generated/sklearn.metrics.pairwise.manhattan_distances", "modules/generated/sklearn.metrics.pairwise.nan_euclidean_distances", "modules/generated/sklearn.metrics.pairwise.paired_cosine_distances", "modules/generated/sklearn.metrics.pairwise.paired_distances", "modules/generated/sklearn.metrics.pairwise.paired_euclidean_distances", "modules/generated/sklearn.metrics.pairwise.paired_manhattan_distances", "modules/generated/sklearn.metrics.pairwise.pairwise_kernels", "modules/generated/sklearn.metrics.pairwise.polynomial_kernel", "modules/generated/sklearn.metrics.pairwise.rbf_kernel", "modules/generated/sklearn.metrics.pairwise.sigmoid_kernel", "modules/generated/sklearn.metrics.pairwise_distances", "modules/generated/sklearn.metrics.pairwise_distances_argmin", "modules/generated/sklearn.metrics.pairwise_distances_argmin_min", "modules/generated/sklearn.metrics.pairwise_distances_chunked", "modules/generated/sklearn.metrics.precision_recall_curve", "modules/generated/sklearn.metrics.precision_recall_fscore_support", "modules/generated/sklearn.metrics.precision_score", "modules/generated/sklearn.metrics.r2_score", "modules/generated/sklearn.metrics.rand_score", "modules/generated/sklearn.metrics.recall_score", "modules/generated/sklearn.metrics.roc_auc_score", "modules/generated/sklearn.metrics.roc_curve", "modules/generated/sklearn.metrics.root_mean_squared_error", "modules/generated/sklearn.metrics.root_mean_squared_log_error", "modules/generated/sklearn.metrics.silhouette_samples", "modules/generated/sklearn.metrics.silhouette_score", "modules/generated/sklearn.metrics.top_k_accuracy_score", "modules/generated/sklearn.metrics.v_measure_score", "modules/generated/sklearn.metrics.zero_one_loss", "modules/generated/sklearn.mixture.BayesianGaussianMixture", "modules/generated/sklearn.mixture.GaussianMixture", "modules/generated/sklearn.model_selection.GridSearchCV", "modules/generated/sklearn.model_selection.GroupKFold", "modules/generated/sklearn.model_selection.GroupShuffleSplit", "modules/generated/sklearn.model_selection.HalvingGridSearchCV", "modules/generated/sklearn.model_selection.HalvingRandomSearchCV", "modules/generated/sklearn.model_selection.KFold", "modules/generated/sklearn.model_selection.LearningCurveDisplay", "modules/generated/sklearn.model_selection.LeaveOneGroupOut", "modules/generated/sklearn.model_selection.LeaveOneOut", "modules/generated/sklearn.model_selection.LeavePGroupsOut", "modules/generated/sklearn.model_selection.LeavePOut", "modules/generated/sklearn.model_selection.ParameterGrid", "modules/generated/sklearn.model_selection.ParameterSampler", "modules/generated/sklearn.model_selection.PredefinedSplit", "modules/generated/sklearn.model_selection.RandomizedSearchCV", "modules/generated/sklearn.model_selection.RepeatedKFold", "modules/generated/sklearn.model_selection.RepeatedStratifiedKFold", "modules/generated/sklearn.model_selection.ShuffleSplit", "modules/generated/sklearn.model_selection.StratifiedGroupKFold", "modules/generated/sklearn.model_selection.StratifiedKFold", "modules/generated/sklearn.model_selection.StratifiedShuffleSplit", "modules/generated/sklearn.model_selection.TimeSeriesSplit", "modules/generated/sklearn.model_selection.ValidationCurveDisplay", "modules/generated/sklearn.model_selection.check_cv", "modules/generated/sklearn.model_selection.cross_val_predict", "modules/generated/sklearn.model_selection.cross_val_score", "modules/generated/sklearn.model_selection.cross_validate", "modules/generated/sklearn.model_selection.learning_curve", "modules/generated/sklearn.model_selection.permutation_test_score", "modules/generated/sklearn.model_selection.train_test_split", "modules/generated/sklearn.model_selection.validation_curve", "modules/generated/sklearn.multiclass.OneVsOneClassifier", "modules/generated/sklearn.multiclass.OneVsRestClassifier", "modules/generated/sklearn.multiclass.OutputCodeClassifier", "modules/generated/sklearn.multioutput.ClassifierChain", "modules/generated/sklearn.multioutput.MultiOutputClassifier", "modules/generated/sklearn.multioutput.MultiOutputRegressor", "modules/generated/sklearn.multioutput.RegressorChain", "modules/generated/sklearn.naive_bayes.BernoulliNB", "modules/generated/sklearn.naive_bayes.CategoricalNB", "modules/generated/sklearn.naive_bayes.ComplementNB", "modules/generated/sklearn.naive_bayes.GaussianNB", "modules/generated/sklearn.naive_bayes.MultinomialNB", "modules/generated/sklearn.neighbors.BallTree", "modules/generated/sklearn.neighbors.KDTree", "modules/generated/sklearn.neighbors.KNeighborsClassifier", "modules/generated/sklearn.neighbors.KNeighborsRegressor", "modules/generated/sklearn.neighbors.KNeighborsTransformer", "modules/generated/sklearn.neighbors.KernelDensity", "modules/generated/sklearn.neighbors.LocalOutlierFactor", "modules/generated/sklearn.neighbors.NearestCentroid", "modules/generated/sklearn.neighbors.NearestNeighbors", "modules/generated/sklearn.neighbors.NeighborhoodComponentsAnalysis", "modules/generated/sklearn.neighbors.RadiusNeighborsClassifier", "modules/generated/sklearn.neighbors.RadiusNeighborsRegressor", "modules/generated/sklearn.neighbors.RadiusNeighborsTransformer", "modules/generated/sklearn.neighbors.kneighbors_graph", "modules/generated/sklearn.neighbors.radius_neighbors_graph", "modules/generated/sklearn.neighbors.sort_graph_by_row_values", "modules/generated/sklearn.neural_network.BernoulliRBM", "modules/generated/sklearn.neural_network.MLPClassifier", "modules/generated/sklearn.neural_network.MLPRegressor", "modules/generated/sklearn.pipeline.FeatureUnion", "modules/generated/sklearn.pipeline.Pipeline", "modules/generated/sklearn.pipeline.make_pipeline", "modules/generated/sklearn.pipeline.make_union", "modules/generated/sklearn.preprocessing.Binarizer", "modules/generated/sklearn.preprocessing.FunctionTransformer", "modules/generated/sklearn.preprocessing.KBinsDiscretizer", "modules/generated/sklearn.preprocessing.KernelCenterer", "modules/generated/sklearn.preprocessing.LabelBinarizer", "modules/generated/sklearn.preprocessing.LabelEncoder", "modules/generated/sklearn.preprocessing.MaxAbsScaler", "modules/generated/sklearn.preprocessing.MinMaxScaler", "modules/generated/sklearn.preprocessing.MultiLabelBinarizer", "modules/generated/sklearn.preprocessing.Normalizer", "modules/generated/sklearn.preprocessing.OneHotEncoder", "modules/generated/sklearn.preprocessing.OrdinalEncoder", "modules/generated/sklearn.preprocessing.PolynomialFeatures", "modules/generated/sklearn.preprocessing.PowerTransformer", "modules/generated/sklearn.preprocessing.QuantileTransformer", "modules/generated/sklearn.preprocessing.RobustScaler", "modules/generated/sklearn.preprocessing.SplineTransformer", "modules/generated/sklearn.preprocessing.StandardScaler", "modules/generated/sklearn.preprocessing.TargetEncoder", "modules/generated/sklearn.preprocessing.add_dummy_feature", "modules/generated/sklearn.preprocessing.binarize", "modules/generated/sklearn.preprocessing.label_binarize", "modules/generated/sklearn.preprocessing.maxabs_scale", "modules/generated/sklearn.preprocessing.minmax_scale", "modules/generated/sklearn.preprocessing.normalize", "modules/generated/sklearn.preprocessing.power_transform", "modules/generated/sklearn.preprocessing.quantile_transform", "modules/generated/sklearn.preprocessing.robust_scale", "modules/generated/sklearn.preprocessing.scale", "modules/generated/sklearn.random_projection.GaussianRandomProjection", "modules/generated/sklearn.random_projection.SparseRandomProjection", "modules/generated/sklearn.random_projection.johnson_lindenstrauss_min_dim", "modules/generated/sklearn.semi_supervised.LabelPropagation", "modules/generated/sklearn.semi_supervised.LabelSpreading", "modules/generated/sklearn.semi_supervised.SelfTrainingClassifier", "modules/generated/sklearn.set_config", "modules/generated/sklearn.show_versions", "modules/generated/sklearn.svm.LinearSVC", "modules/generated/sklearn.svm.LinearSVR", "modules/generated/sklearn.svm.NuSVC", "modules/generated/sklearn.svm.NuSVR", "modules/generated/sklearn.svm.OneClassSVM", "modules/generated/sklearn.svm.SVC", "modules/generated/sklearn.svm.SVR", "modules/generated/sklearn.svm.l1_min_c", "modules/generated/sklearn.tree.DecisionTreeClassifier", "modules/generated/sklearn.tree.DecisionTreeRegressor", "modules/generated/sklearn.tree.ExtraTreeClassifier", "modules/generated/sklearn.tree.ExtraTreeRegressor", "modules/generated/sklearn.tree.export_graphviz", "modules/generated/sklearn.tree.export_text", "modules/generated/sklearn.tree.plot_tree", "modules/generated/sklearn.utils.Bunch", "modules/generated/sklearn.utils._safe_indexing", "modules/generated/sklearn.utils.arrayfuncs.min_pos", "modules/generated/sklearn.utils.as_float_array", "modules/generated/sklearn.utils.assert_all_finite", "modules/generated/sklearn.utils.check_X_y", "modules/generated/sklearn.utils.check_array", "modules/generated/sklearn.utils.check_consistent_length", "modules/generated/sklearn.utils.check_random_state", "modules/generated/sklearn.utils.check_scalar", "modules/generated/sklearn.utils.class_weight.compute_class_weight", "modules/generated/sklearn.utils.class_weight.compute_sample_weight", "modules/generated/sklearn.utils.deprecated", "modules/generated/sklearn.utils.discovery.all_displays", "modules/generated/sklearn.utils.discovery.all_estimators", "modules/generated/sklearn.utils.discovery.all_functions", "modules/generated/sklearn.utils.estimator_checks.check_estimator", "modules/generated/sklearn.utils.estimator_checks.parametrize_with_checks", "modules/generated/sklearn.utils.estimator_html_repr", "modules/generated/sklearn.utils.extmath.density", "modules/generated/sklearn.utils.extmath.fast_logdet", "modules/generated/sklearn.utils.extmath.randomized_range_finder", "modules/generated/sklearn.utils.extmath.randomized_svd", "modules/generated/sklearn.utils.extmath.safe_sparse_dot", "modules/generated/sklearn.utils.extmath.weighted_mode", "modules/generated/sklearn.utils.gen_batches", "modules/generated/sklearn.utils.gen_even_slices", "modules/generated/sklearn.utils.graph.single_source_shortest_path_length", "modules/generated/sklearn.utils.indexable", "modules/generated/sklearn.utils.metadata_routing.MetadataRequest", "modules/generated/sklearn.utils.metadata_routing.MetadataRouter", "modules/generated/sklearn.utils.metadata_routing.MethodMapping", "modules/generated/sklearn.utils.metadata_routing.get_routing_for_object", "modules/generated/sklearn.utils.metadata_routing.process_routing", "modules/generated/sklearn.utils.metaestimators.available_if", "modules/generated/sklearn.utils.multiclass.is_multilabel", "modules/generated/sklearn.utils.multiclass.type_of_target", "modules/generated/sklearn.utils.multiclass.unique_labels", "modules/generated/sklearn.utils.murmurhash3_32", "modules/generated/sklearn.utils.parallel.Parallel", "modules/generated/sklearn.utils.parallel.delayed", "modules/generated/sklearn.utils.parallel_backend", "modules/generated/sklearn.utils.random.sample_without_replacement", "modules/generated/sklearn.utils.register_parallel_backend", "modules/generated/sklearn.utils.resample", "modules/generated/sklearn.utils.safe_mask", "modules/generated/sklearn.utils.safe_sqr", "modules/generated/sklearn.utils.shuffle", "modules/generated/sklearn.utils.sparsefuncs.incr_mean_variance_axis", "modules/generated/sklearn.utils.sparsefuncs.inplace_column_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_csr_column_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_row_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_column", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_row", "modules/generated/sklearn.utils.sparsefuncs.mean_variance_axis", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2", "modules/generated/sklearn.utils.validation.check_is_fitted", "modules/generated/sklearn.utils.validation.check_memory", "modules/generated/sklearn.utils.validation.check_symmetric", "modules/generated/sklearn.utils.validation.column_or_1d", "modules/generated/sklearn.utils.validation.has_fit_parameter", "modules/grid_search", "modules/impute", "modules/isotonic", "modules/kernel_approximation", "modules/kernel_ridge", "modules/lda_qda", "modules/learning_curve", "modules/linear_model", "modules/manifold", "modules/metrics", "modules/mixture", "modules/model_evaluation", "modules/multiclass", "modules/naive_bayes", "modules/neighbors", "modules/neural_networks_supervised", "modules/neural_networks_unsupervised", "modules/outlier_detection", "modules/partial_dependence", "modules/permutation_importance", "modules/pipeline", "modules/preprocessing", "modules/preprocessing_targets", "modules/random_projection", "modules/semi_supervised", "modules/sgd", "modules/svm", "modules/tree", "modules/unsupervised_reduction", "presentations", "related_projects", "roadmap", "sg_execution_times", "supervised_learning", "support", "testimonials/testimonials", "tutorial/basic/tutorial", "tutorial/index", "tutorial/machine_learning_map/index", "tutorial/statistical_inference/index", "tutorial/statistical_inference/model_selection", "tutorial/statistical_inference/putting_together", "tutorial/statistical_inference/settings", "tutorial/statistical_inference/supervised_learning", "tutorial/statistical_inference/unsupervised_learning", "tutorial/text_analytics/working_with_text_data", "unsupervised_learning", "user_guide", "visualizations", "whats_new", "whats_new/_contributors", "whats_new/older_versions", "whats_new/v0.13", "whats_new/v0.14", "whats_new/v0.15", "whats_new/v0.16", "whats_new/v0.17", "whats_new/v0.18", "whats_new/v0.19", "whats_new/v0.20", "whats_new/v0.21", "whats_new/v0.22", "whats_new/v0.23", "whats_new/v0.24", "whats_new/v1.0", "whats_new/v1.1", "whats_new/v1.2", "whats_new/v1.3", "whats_new/v1.4", "whats_new/v1.5"], "filenames": ["about.rst", "authors.rst", "authors_emeritus.rst", "auto_examples/applications/index.rst", "auto_examples/applications/plot_cyclical_feature_engineering.rst", "auto_examples/applications/plot_digits_denoising.rst", "auto_examples/applications/plot_face_recognition.rst", "auto_examples/applications/plot_model_complexity_influence.rst", "auto_examples/applications/plot_out_of_core_classification.rst", "auto_examples/applications/plot_outlier_detection_wine.rst", "auto_examples/applications/plot_prediction_latency.rst", "auto_examples/applications/plot_species_distribution_modeling.rst", "auto_examples/applications/plot_stock_market.rst", "auto_examples/applications/plot_time_series_lagged_features.rst", "auto_examples/applications/plot_tomography_l1_reconstruction.rst", "auto_examples/applications/plot_topics_extraction_with_nmf_lda.rst", "auto_examples/applications/sg_execution_times.rst", "auto_examples/applications/svm_gui.rst", "auto_examples/applications/wikipedia_principal_eigenvector.rst", "auto_examples/bicluster/index.rst", "auto_examples/bicluster/plot_bicluster_newsgroups.rst", "auto_examples/bicluster/plot_spectral_biclustering.rst", "auto_examples/bicluster/plot_spectral_coclustering.rst", "auto_examples/bicluster/sg_execution_times.rst", "auto_examples/calibration/index.rst", "auto_examples/calibration/plot_calibration.rst", "auto_examples/calibration/plot_calibration_curve.rst", "auto_examples/calibration/plot_calibration_multiclass.rst", "auto_examples/calibration/plot_compare_calibration.rst", "auto_examples/calibration/sg_execution_times.rst", "auto_examples/classification/index.rst", "auto_examples/classification/plot_classification_probability.rst", "auto_examples/classification/plot_classifier_comparison.rst", "auto_examples/classification/plot_digits_classification.rst", "auto_examples/classification/plot_lda.rst", "auto_examples/classification/plot_lda_qda.rst", "auto_examples/classification/sg_execution_times.rst", "auto_examples/cluster/index.rst", "auto_examples/cluster/plot_adjusted_for_chance_measures.rst", "auto_examples/cluster/plot_affinity_propagation.rst", "auto_examples/cluster/plot_agglomerative_clustering.rst", "auto_examples/cluster/plot_agglomerative_clustering_metrics.rst", "auto_examples/cluster/plot_agglomerative_dendrogram.rst", "auto_examples/cluster/plot_birch_vs_minibatchkmeans.rst", "auto_examples/cluster/plot_bisect_kmeans.rst", "auto_examples/cluster/plot_cluster_comparison.rst", "auto_examples/cluster/plot_cluster_iris.rst", "auto_examples/cluster/plot_coin_segmentation.rst", "auto_examples/cluster/plot_coin_ward_segmentation.rst", "auto_examples/cluster/plot_color_quantization.rst", "auto_examples/cluster/plot_dbscan.rst", "auto_examples/cluster/plot_dict_face_patches.rst", "auto_examples/cluster/plot_digits_agglomeration.rst", "auto_examples/cluster/plot_digits_linkage.rst", "auto_examples/cluster/plot_face_compress.rst", "auto_examples/cluster/plot_feature_agglomeration_vs_univariate_selection.rst", "auto_examples/cluster/plot_hdbscan.rst", "auto_examples/cluster/plot_inductive_clustering.rst", "auto_examples/cluster/plot_kmeans_assumptions.rst", "auto_examples/cluster/plot_kmeans_digits.rst", "auto_examples/cluster/plot_kmeans_plusplus.rst", "auto_examples/cluster/plot_kmeans_silhouette_analysis.rst", "auto_examples/cluster/plot_kmeans_stability_low_dim_dense.rst", "auto_examples/cluster/plot_linkage_comparison.rst", "auto_examples/cluster/plot_mean_shift.rst", "auto_examples/cluster/plot_mini_batch_kmeans.rst", "auto_examples/cluster/plot_optics.rst", "auto_examples/cluster/plot_segmentation_toy.rst", "auto_examples/cluster/plot_ward_structured_vs_unstructured.rst", "auto_examples/cluster/sg_execution_times.rst", "auto_examples/compose/index.rst", "auto_examples/compose/plot_column_transformer.rst", "auto_examples/compose/plot_column_transformer_mixed_types.rst", "auto_examples/compose/plot_compare_reduction.rst", "auto_examples/compose/plot_digits_pipe.rst", "auto_examples/compose/plot_feature_union.rst", "auto_examples/compose/plot_transformed_target.rst", "auto_examples/compose/sg_execution_times.rst", "auto_examples/covariance/index.rst", "auto_examples/covariance/plot_covariance_estimation.rst", "auto_examples/covariance/plot_lw_vs_oas.rst", "auto_examples/covariance/plot_mahalanobis_distances.rst", "auto_examples/covariance/plot_robust_vs_empirical_covariance.rst", "auto_examples/covariance/plot_sparse_cov.rst", "auto_examples/covariance/sg_execution_times.rst", "auto_examples/cross_decomposition/index.rst", "auto_examples/cross_decomposition/plot_compare_cross_decomposition.rst", "auto_examples/cross_decomposition/plot_pcr_vs_pls.rst", "auto_examples/cross_decomposition/sg_execution_times.rst", "auto_examples/datasets/index.rst", "auto_examples/datasets/plot_digits_last_image.rst", "auto_examples/datasets/plot_iris_dataset.rst", "auto_examples/datasets/plot_random_dataset.rst", "auto_examples/datasets/plot_random_multilabel_dataset.rst", "auto_examples/datasets/sg_execution_times.rst", "auto_examples/decomposition/index.rst", "auto_examples/decomposition/plot_faces_decomposition.rst", "auto_examples/decomposition/plot_ica_blind_source_separation.rst", "auto_examples/decomposition/plot_ica_vs_pca.rst", "auto_examples/decomposition/plot_image_denoising.rst", "auto_examples/decomposition/plot_incremental_pca.rst", "auto_examples/decomposition/plot_kernel_pca.rst", "auto_examples/decomposition/plot_pca_iris.rst", "auto_examples/decomposition/plot_pca_vs_fa_model_selection.rst", "auto_examples/decomposition/plot_pca_vs_lda.rst", "auto_examples/decomposition/plot_sparse_coding.rst", "auto_examples/decomposition/plot_varimax_fa.rst", "auto_examples/decomposition/sg_execution_times.rst", "auto_examples/developing_estimators/index.rst", "auto_examples/developing_estimators/sg_execution_times.rst", "auto_examples/developing_estimators/sklearn_is_fitted.rst", "auto_examples/ensemble/index.rst", "auto_examples/ensemble/plot_adaboost_multiclass.rst", "auto_examples/ensemble/plot_adaboost_regression.rst", "auto_examples/ensemble/plot_adaboost_twoclass.rst", "auto_examples/ensemble/plot_bias_variance.rst", "auto_examples/ensemble/plot_ensemble_oob.rst", "auto_examples/ensemble/plot_feature_transformation.rst", "auto_examples/ensemble/plot_forest_hist_grad_boosting_comparison.rst", "auto_examples/ensemble/plot_forest_importances.rst", "auto_examples/ensemble/plot_forest_importances_faces.rst", "auto_examples/ensemble/plot_forest_iris.rst", "auto_examples/ensemble/plot_gradient_boosting_categorical.rst", "auto_examples/ensemble/plot_gradient_boosting_early_stopping.rst", "auto_examples/ensemble/plot_gradient_boosting_oob.rst", "auto_examples/ensemble/plot_gradient_boosting_quantile.rst", "auto_examples/ensemble/plot_gradient_boosting_regression.rst", "auto_examples/ensemble/plot_gradient_boosting_regularization.rst", "auto_examples/ensemble/plot_isolation_forest.rst", "auto_examples/ensemble/plot_monotonic_constraints.rst", "auto_examples/ensemble/plot_random_forest_embedding.rst", "auto_examples/ensemble/plot_random_forest_regression_multioutput.rst", "auto_examples/ensemble/plot_stack_predictors.rst", "auto_examples/ensemble/plot_voting_decision_regions.rst", "auto_examples/ensemble/plot_voting_probas.rst", "auto_examples/ensemble/plot_voting_regressor.rst", "auto_examples/ensemble/sg_execution_times.rst", "auto_examples/exercises/index.rst", "auto_examples/exercises/plot_cv_diabetes.rst", "auto_examples/exercises/plot_digits_classification_exercise.rst", "auto_examples/exercises/plot_iris_exercise.rst", "auto_examples/exercises/sg_execution_times.rst", "auto_examples/feature_selection/index.rst", "auto_examples/feature_selection/plot_f_test_vs_mi.rst", "auto_examples/feature_selection/plot_feature_selection.rst", "auto_examples/feature_selection/plot_feature_selection_pipeline.rst", "auto_examples/feature_selection/plot_rfe_digits.rst", "auto_examples/feature_selection/plot_rfe_with_cross_validation.rst", "auto_examples/feature_selection/plot_select_from_model_diabetes.rst", "auto_examples/feature_selection/sg_execution_times.rst", "auto_examples/gaussian_process/index.rst", "auto_examples/gaussian_process/plot_compare_gpr_krr.rst", "auto_examples/gaussian_process/plot_gpc.rst", "auto_examples/gaussian_process/plot_gpc_iris.rst", "auto_examples/gaussian_process/plot_gpc_isoprobability.rst", "auto_examples/gaussian_process/plot_gpc_xor.rst", "auto_examples/gaussian_process/plot_gpr_co2.rst", "auto_examples/gaussian_process/plot_gpr_noisy.rst", "auto_examples/gaussian_process/plot_gpr_noisy_targets.rst", "auto_examples/gaussian_process/plot_gpr_on_structured_data.rst", "auto_examples/gaussian_process/plot_gpr_prior_posterior.rst", "auto_examples/gaussian_process/sg_execution_times.rst", "auto_examples/impute/index.rst", "auto_examples/impute/plot_iterative_imputer_variants_comparison.rst", "auto_examples/impute/plot_missing_values.rst", "auto_examples/impute/sg_execution_times.rst", "auto_examples/index.rst", "auto_examples/inspection/index.rst", "auto_examples/inspection/plot_causal_interpretation.rst", "auto_examples/inspection/plot_linear_model_coefficient_interpretation.rst", "auto_examples/inspection/plot_partial_dependence.rst", "auto_examples/inspection/plot_permutation_importance.rst", "auto_examples/inspection/plot_permutation_importance_multicollinear.rst", "auto_examples/inspection/sg_execution_times.rst", "auto_examples/kernel_approximation/index.rst", "auto_examples/kernel_approximation/plot_scalable_poly_kernels.rst", "auto_examples/kernel_approximation/sg_execution_times.rst", "auto_examples/linear_model/index.rst", "auto_examples/linear_model/plot_ard.rst", "auto_examples/linear_model/plot_bayesian_ridge_curvefit.rst", "auto_examples/linear_model/plot_elastic_net_precomputed_gram_matrix_with_weighted_samples.rst", "auto_examples/linear_model/plot_huber_vs_ridge.rst", "auto_examples/linear_model/plot_iris_logistic.rst", "auto_examples/linear_model/plot_lasso_and_elasticnet.rst", "auto_examples/linear_model/plot_lasso_coordinate_descent_path.rst", "auto_examples/linear_model/plot_lasso_dense_vs_sparse_data.rst", "auto_examples/linear_model/plot_lasso_lars.rst", "auto_examples/linear_model/plot_lasso_lars_ic.rst", "auto_examples/linear_model/plot_lasso_model_selection.rst", "auto_examples/linear_model/plot_logistic.rst", "auto_examples/linear_model/plot_logistic_l1_l2_sparsity.rst", "auto_examples/linear_model/plot_logistic_multinomial.rst", "auto_examples/linear_model/plot_logistic_path.rst", "auto_examples/linear_model/plot_multi_task_lasso_support.rst", "auto_examples/linear_model/plot_nnls.rst", "auto_examples/linear_model/plot_ols.rst", "auto_examples/linear_model/plot_ols_3d.rst", "auto_examples/linear_model/plot_ols_ridge_variance.rst", "auto_examples/linear_model/plot_omp.rst", "auto_examples/linear_model/plot_poisson_regression_non_normal_loss.rst", "auto_examples/linear_model/plot_polynomial_interpolation.rst", "auto_examples/linear_model/plot_quantile_regression.rst", "auto_examples/linear_model/plot_ransac.rst", "auto_examples/linear_model/plot_ridge_coeffs.rst", "auto_examples/linear_model/plot_ridge_path.rst", "auto_examples/linear_model/plot_robust_fit.rst", "auto_examples/linear_model/plot_sgd_comparison.rst", "auto_examples/linear_model/plot_sgd_early_stopping.rst", "auto_examples/linear_model/plot_sgd_iris.rst", "auto_examples/linear_model/plot_sgd_loss_functions.rst", "auto_examples/linear_model/plot_sgd_penalties.rst", "auto_examples/linear_model/plot_sgd_separating_hyperplane.rst", "auto_examples/linear_model/plot_sgd_weighted_samples.rst", "auto_examples/linear_model/plot_sgdocsvm_vs_ocsvm.rst", "auto_examples/linear_model/plot_sparse_logistic_regression_20newsgroups.rst", "auto_examples/linear_model/plot_sparse_logistic_regression_mnist.rst", "auto_examples/linear_model/plot_theilsen.rst", "auto_examples/linear_model/plot_tweedie_regression_insurance_claims.rst", "auto_examples/linear_model/sg_execution_times.rst", "auto_examples/manifold/index.rst", "auto_examples/manifold/plot_compare_methods.rst", "auto_examples/manifold/plot_lle_digits.rst", "auto_examples/manifold/plot_manifold_sphere.rst", "auto_examples/manifold/plot_mds.rst", "auto_examples/manifold/plot_swissroll.rst", "auto_examples/manifold/plot_t_sne_perplexity.rst", "auto_examples/manifold/sg_execution_times.rst", "auto_examples/miscellaneous/index.rst", "auto_examples/miscellaneous/plot_anomaly_comparison.rst", "auto_examples/miscellaneous/plot_display_object_visualization.rst", "auto_examples/miscellaneous/plot_estimator_representation.rst", "auto_examples/miscellaneous/plot_isotonic_regression.rst", "auto_examples/miscellaneous/plot_johnson_lindenstrauss_bound.rst", "auto_examples/miscellaneous/plot_kernel_approximation.rst", "auto_examples/miscellaneous/plot_kernel_ridge_regression.rst", "auto_examples/miscellaneous/plot_metadata_routing.rst", "auto_examples/miscellaneous/plot_multilabel.rst", "auto_examples/miscellaneous/plot_multioutput_face_completion.rst", "auto_examples/miscellaneous/plot_outlier_detection_bench.rst", "auto_examples/miscellaneous/plot_partial_dependence_visualization_api.rst", "auto_examples/miscellaneous/plot_pipeline_display.rst", "auto_examples/miscellaneous/plot_roc_curve_visualization_api.rst", "auto_examples/miscellaneous/plot_set_output.rst", "auto_examples/miscellaneous/sg_execution_times.rst", "auto_examples/mixture/index.rst", "auto_examples/mixture/plot_concentration_prior.rst", "auto_examples/mixture/plot_gmm.rst", "auto_examples/mixture/plot_gmm_covariances.rst", "auto_examples/mixture/plot_gmm_init.rst", "auto_examples/mixture/plot_gmm_pdf.rst", "auto_examples/mixture/plot_gmm_selection.rst", "auto_examples/mixture/plot_gmm_sin.rst", "auto_examples/mixture/sg_execution_times.rst", "auto_examples/model_selection/index.rst", "auto_examples/model_selection/plot_confusion_matrix.rst", "auto_examples/model_selection/plot_cv_indices.rst", "auto_examples/model_selection/plot_cv_predict.rst", "auto_examples/model_selection/plot_det.rst", "auto_examples/model_selection/plot_grid_search_digits.rst", "auto_examples/model_selection/plot_grid_search_refit_callable.rst", "auto_examples/model_selection/plot_grid_search_stats.rst", "auto_examples/model_selection/plot_grid_search_text_feature_extraction.rst", "auto_examples/model_selection/plot_learning_curve.rst", "auto_examples/model_selection/plot_likelihood_ratios.rst", "auto_examples/model_selection/plot_multi_metric_evaluation.rst", "auto_examples/model_selection/plot_nested_cross_validation_iris.rst", "auto_examples/model_selection/plot_permutation_tests_for_classification.rst", "auto_examples/model_selection/plot_precision_recall.rst", "auto_examples/model_selection/plot_randomized_search.rst", "auto_examples/model_selection/plot_roc.rst", "auto_examples/model_selection/plot_roc_crossval.rst", "auto_examples/model_selection/plot_successive_halving_heatmap.rst", "auto_examples/model_selection/plot_successive_halving_iterations.rst", "auto_examples/model_selection/plot_train_error_vs_test_error.rst", "auto_examples/model_selection/plot_underfitting_overfitting.rst", "auto_examples/model_selection/plot_validation_curve.rst", "auto_examples/model_selection/sg_execution_times.rst", "auto_examples/multiclass/index.rst", "auto_examples/multiclass/plot_multiclass_overview.rst", "auto_examples/multiclass/sg_execution_times.rst", "auto_examples/multioutput/index.rst", "auto_examples/multioutput/plot_classifier_chain_yeast.rst", "auto_examples/multioutput/sg_execution_times.rst", "auto_examples/neighbors/approximate_nearest_neighbors.rst", "auto_examples/neighbors/index.rst", "auto_examples/neighbors/plot_caching_nearest_neighbors.rst", "auto_examples/neighbors/plot_classification.rst", "auto_examples/neighbors/plot_digits_kde_sampling.rst", "auto_examples/neighbors/plot_kde_1d.rst", "auto_examples/neighbors/plot_lof_novelty_detection.rst", "auto_examples/neighbors/plot_lof_outlier_detection.rst", "auto_examples/neighbors/plot_nca_classification.rst", "auto_examples/neighbors/plot_nca_dim_reduction.rst", "auto_examples/neighbors/plot_nca_illustration.rst", "auto_examples/neighbors/plot_nearest_centroid.rst", "auto_examples/neighbors/plot_regression.rst", "auto_examples/neighbors/plot_species_kde.rst", "auto_examples/neighbors/sg_execution_times.rst", "auto_examples/neural_networks/index.rst", "auto_examples/neural_networks/plot_mlp_alpha.rst", "auto_examples/neural_networks/plot_mlp_training_curves.rst", "auto_examples/neural_networks/plot_mnist_filters.rst", "auto_examples/neural_networks/plot_rbm_logistic_classification.rst", "auto_examples/neural_networks/sg_execution_times.rst", "auto_examples/preprocessing/index.rst", "auto_examples/preprocessing/plot_all_scaling.rst", "auto_examples/preprocessing/plot_discretization.rst", "auto_examples/preprocessing/plot_discretization_classification.rst", "auto_examples/preprocessing/plot_discretization_strategies.rst", "auto_examples/preprocessing/plot_map_data_to_normal.rst", "auto_examples/preprocessing/plot_scaling_importance.rst", "auto_examples/preprocessing/plot_target_encoder.rst", "auto_examples/preprocessing/plot_target_encoder_cross_val.rst", "auto_examples/preprocessing/sg_execution_times.rst", "auto_examples/release_highlights/index.rst", "auto_examples/release_highlights/plot_release_highlights_0_22_0.rst", "auto_examples/release_highlights/plot_release_highlights_0_23_0.rst", "auto_examples/release_highlights/plot_release_highlights_0_24_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_0_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_1_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_2_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_3_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_4_0.rst", "auto_examples/release_highlights/sg_execution_times.rst", "auto_examples/semi_supervised/index.rst", "auto_examples/semi_supervised/plot_label_propagation_digits.rst", "auto_examples/semi_supervised/plot_label_propagation_digits_active_learning.rst", "auto_examples/semi_supervised/plot_label_propagation_structure.rst", "auto_examples/semi_supervised/plot_self_training_varying_threshold.rst", "auto_examples/semi_supervised/plot_semi_supervised_newsgroups.rst", "auto_examples/semi_supervised/plot_semi_supervised_versus_svm_iris.rst", "auto_examples/semi_supervised/sg_execution_times.rst", "auto_examples/sg_execution_times.rst", "auto_examples/svm/index.rst", "auto_examples/svm/plot_custom_kernel.rst", "auto_examples/svm/plot_iris_svc.rst", "auto_examples/svm/plot_linearsvc_support_vectors.rst", "auto_examples/svm/plot_oneclass.rst", "auto_examples/svm/plot_rbf_parameters.rst", "auto_examples/svm/plot_separating_hyperplane.rst", "auto_examples/svm/plot_separating_hyperplane_unbalanced.rst", "auto_examples/svm/plot_svm_anova.rst", "auto_examples/svm/plot_svm_kernels.rst", "auto_examples/svm/plot_svm_margin.rst", "auto_examples/svm/plot_svm_nonlinear.rst", "auto_examples/svm/plot_svm_regression.rst", "auto_examples/svm/plot_svm_scale_c.rst", "auto_examples/svm/plot_svm_tie_breaking.rst", "auto_examples/svm/plot_weighted_samples.rst", "auto_examples/svm/sg_execution_times.rst", "auto_examples/text/index.rst", "auto_examples/text/plot_document_classification_20newsgroups.rst", "auto_examples/text/plot_document_clustering.rst", "auto_examples/text/plot_hashing_vs_dict_vectorizer.rst", "auto_examples/text/sg_execution_times.rst", "auto_examples/tree/index.rst", "auto_examples/tree/plot_cost_complexity_pruning.rst", "auto_examples/tree/plot_iris_dtc.rst", "auto_examples/tree/plot_tree_regression.rst", "auto_examples/tree/plot_tree_regression_multioutput.rst", "auto_examples/tree/plot_unveil_tree_structure.rst", "auto_examples/tree/sg_execution_times.rst", "common_pitfalls.rst", "communication_team.rst", "communication_team_emeritus.rst", "computing.rst", "computing/computational_performance.rst", "computing/parallelism.rst", "computing/scaling_strategies.rst", "contributor_experience_team.rst", "contributor_experience_team_emeritus.rst", "data_transforms.rst", "datasets.rst", "datasets/loading_other_datasets.rst", "datasets/real_world.rst", "datasets/sample_generators.rst", "datasets/toy_dataset.rst", "developers/advanced_installation.rst", "developers/bug_triaging.rst", "developers/contributing.rst", "developers/cython.rst", "developers/develop.rst", "developers/index.rst", "developers/maintainer.rst", "developers/minimal_reproducer.rst", "developers/performance.rst", "developers/plotting.rst", "developers/tips.rst", "developers/utilities.rst", "dispatching.rst", "documentation_team.rst", "faq.rst", "getting_started.rst", "glossary.rst", "governance.rst", "index.rst", "inspection.rst", "install.rst", "metadata_routing.rst", "min_dependency_substitutions.rst", "min_dependency_table.rst", "model_persistence.rst", "model_selection.rst", "modules/array_api.rst", "modules/biclustering.rst", "modules/calibration.rst", "modules/classes.rst", "modules/clustering.rst", "modules/compose.rst", "modules/covariance.rst", "modules/cross_decomposition.rst", "modules/cross_validation.rst", "modules/decomposition.rst", "modules/density.rst", "modules/ensemble.rst", "modules/feature_extraction.rst", "modules/feature_selection.rst", "modules/gaussian_process.rst", "modules/generated/dbscan-function.rst", "modules/generated/fastica-function.rst", "modules/generated/oas-function.rst", "modules/generated/sklearn.base.BaseEstimator.rst", "modules/generated/sklearn.base.BiclusterMixin.rst", "modules/generated/sklearn.base.ClassNamePrefixFeaturesOutMixin.rst", "modules/generated/sklearn.base.ClassifierMixin.rst", "modules/generated/sklearn.base.ClusterMixin.rst", "modules/generated/sklearn.base.DensityMixin.rst", "modules/generated/sklearn.base.MetaEstimatorMixin.rst", "modules/generated/sklearn.base.OneToOneFeatureMixin.rst", "modules/generated/sklearn.base.OutlierMixin.rst", "modules/generated/sklearn.base.RegressorMixin.rst", "modules/generated/sklearn.base.TransformerMixin.rst", "modules/generated/sklearn.base.clone.rst", "modules/generated/sklearn.base.is_classifier.rst", "modules/generated/sklearn.base.is_regressor.rst", "modules/generated/sklearn.calibration.CalibratedClassifierCV.rst", "modules/generated/sklearn.calibration.CalibrationDisplay.rst", "modules/generated/sklearn.calibration.calibration_curve.rst", "modules/generated/sklearn.cluster.AffinityPropagation.rst", "modules/generated/sklearn.cluster.AgglomerativeClustering.rst", "modules/generated/sklearn.cluster.Birch.rst", "modules/generated/sklearn.cluster.BisectingKMeans.rst", "modules/generated/sklearn.cluster.DBSCAN.rst", "modules/generated/sklearn.cluster.FeatureAgglomeration.rst", "modules/generated/sklearn.cluster.HDBSCAN.rst", "modules/generated/sklearn.cluster.KMeans.rst", "modules/generated/sklearn.cluster.MeanShift.rst", "modules/generated/sklearn.cluster.MiniBatchKMeans.rst", "modules/generated/sklearn.cluster.OPTICS.rst", "modules/generated/sklearn.cluster.SpectralBiclustering.rst", "modules/generated/sklearn.cluster.SpectralClustering.rst", "modules/generated/sklearn.cluster.SpectralCoclustering.rst", "modules/generated/sklearn.cluster.affinity_propagation.rst", "modules/generated/sklearn.cluster.cluster_optics_dbscan.rst", "modules/generated/sklearn.cluster.cluster_optics_xi.rst", "modules/generated/sklearn.cluster.compute_optics_graph.rst", "modules/generated/sklearn.cluster.estimate_bandwidth.rst", "modules/generated/sklearn.cluster.k_means.rst", "modules/generated/sklearn.cluster.kmeans_plusplus.rst", "modules/generated/sklearn.cluster.mean_shift.rst", "modules/generated/sklearn.cluster.spectral_clustering.rst", "modules/generated/sklearn.cluster.ward_tree.rst", "modules/generated/sklearn.compose.ColumnTransformer.rst", "modules/generated/sklearn.compose.TransformedTargetRegressor.rst", "modules/generated/sklearn.compose.make_column_selector.rst", "modules/generated/sklearn.compose.make_column_transformer.rst", "modules/generated/sklearn.config_context.rst", "modules/generated/sklearn.covariance.EllipticEnvelope.rst", "modules/generated/sklearn.covariance.EmpiricalCovariance.rst", "modules/generated/sklearn.covariance.GraphicalLasso.rst", "modules/generated/sklearn.covariance.GraphicalLassoCV.rst", "modules/generated/sklearn.covariance.LedoitWolf.rst", "modules/generated/sklearn.covariance.MinCovDet.rst", "modules/generated/sklearn.covariance.OAS.rst", "modules/generated/sklearn.covariance.ShrunkCovariance.rst", "modules/generated/sklearn.covariance.empirical_covariance.rst", "modules/generated/sklearn.covariance.graphical_lasso.rst", "modules/generated/sklearn.covariance.ledoit_wolf.rst", "modules/generated/sklearn.covariance.ledoit_wolf_shrinkage.rst", "modules/generated/sklearn.covariance.shrunk_covariance.rst", "modules/generated/sklearn.cross_decomposition.CCA.rst", "modules/generated/sklearn.cross_decomposition.PLSCanonical.rst", "modules/generated/sklearn.cross_decomposition.PLSRegression.rst", "modules/generated/sklearn.cross_decomposition.PLSSVD.rst", "modules/generated/sklearn.datasets.clear_data_home.rst", "modules/generated/sklearn.datasets.dump_svmlight_file.rst", "modules/generated/sklearn.datasets.fetch_20newsgroups.rst", "modules/generated/sklearn.datasets.fetch_20newsgroups_vectorized.rst", "modules/generated/sklearn.datasets.fetch_california_housing.rst", "modules/generated/sklearn.datasets.fetch_covtype.rst", "modules/generated/sklearn.datasets.fetch_kddcup99.rst", "modules/generated/sklearn.datasets.fetch_lfw_pairs.rst", "modules/generated/sklearn.datasets.fetch_lfw_people.rst", "modules/generated/sklearn.datasets.fetch_olivetti_faces.rst", "modules/generated/sklearn.datasets.fetch_openml.rst", "modules/generated/sklearn.datasets.fetch_rcv1.rst", "modules/generated/sklearn.datasets.fetch_species_distributions.rst", "modules/generated/sklearn.datasets.get_data_home.rst", "modules/generated/sklearn.datasets.load_breast_cancer.rst", "modules/generated/sklearn.datasets.load_diabetes.rst", "modules/generated/sklearn.datasets.load_digits.rst", "modules/generated/sklearn.datasets.load_files.rst", "modules/generated/sklearn.datasets.load_iris.rst", "modules/generated/sklearn.datasets.load_linnerud.rst", "modules/generated/sklearn.datasets.load_sample_image.rst", "modules/generated/sklearn.datasets.load_sample_images.rst", "modules/generated/sklearn.datasets.load_svmlight_file.rst", "modules/generated/sklearn.datasets.load_svmlight_files.rst", "modules/generated/sklearn.datasets.load_wine.rst", "modules/generated/sklearn.datasets.make_biclusters.rst", "modules/generated/sklearn.datasets.make_blobs.rst", "modules/generated/sklearn.datasets.make_checkerboard.rst", "modules/generated/sklearn.datasets.make_circles.rst", "modules/generated/sklearn.datasets.make_classification.rst", "modules/generated/sklearn.datasets.make_friedman1.rst", "modules/generated/sklearn.datasets.make_friedman2.rst", "modules/generated/sklearn.datasets.make_friedman3.rst", "modules/generated/sklearn.datasets.make_gaussian_quantiles.rst", "modules/generated/sklearn.datasets.make_hastie_10_2.rst", "modules/generated/sklearn.datasets.make_low_rank_matrix.rst", "modules/generated/sklearn.datasets.make_moons.rst", "modules/generated/sklearn.datasets.make_multilabel_classification.rst", "modules/generated/sklearn.datasets.make_regression.rst", "modules/generated/sklearn.datasets.make_s_curve.rst", "modules/generated/sklearn.datasets.make_sparse_coded_signal.rst", "modules/generated/sklearn.datasets.make_sparse_spd_matrix.rst", "modules/generated/sklearn.datasets.make_sparse_uncorrelated.rst", "modules/generated/sklearn.datasets.make_spd_matrix.rst", "modules/generated/sklearn.datasets.make_swiss_roll.rst", "modules/generated/sklearn.decomposition.DictionaryLearning.rst", "modules/generated/sklearn.decomposition.FactorAnalysis.rst", "modules/generated/sklearn.decomposition.FastICA.rst", "modules/generated/sklearn.decomposition.IncrementalPCA.rst", "modules/generated/sklearn.decomposition.KernelPCA.rst", "modules/generated/sklearn.decomposition.LatentDirichletAllocation.rst", "modules/generated/sklearn.decomposition.MiniBatchDictionaryLearning.rst", "modules/generated/sklearn.decomposition.MiniBatchNMF.rst", "modules/generated/sklearn.decomposition.MiniBatchSparsePCA.rst", "modules/generated/sklearn.decomposition.NMF.rst", "modules/generated/sklearn.decomposition.PCA.rst", "modules/generated/sklearn.decomposition.SparseCoder.rst", "modules/generated/sklearn.decomposition.SparsePCA.rst", "modules/generated/sklearn.decomposition.TruncatedSVD.rst", "modules/generated/sklearn.decomposition.dict_learning.rst", "modules/generated/sklearn.decomposition.dict_learning_online.rst", "modules/generated/sklearn.decomposition.non_negative_factorization.rst", "modules/generated/sklearn.decomposition.sparse_encode.rst", "modules/generated/sklearn.discriminant_analysis.LinearDiscriminantAnalysis.rst", "modules/generated/sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.rst", "modules/generated/sklearn.dummy.DummyClassifier.rst", "modules/generated/sklearn.dummy.DummyRegressor.rst", "modules/generated/sklearn.ensemble.AdaBoostClassifier.rst", "modules/generated/sklearn.ensemble.AdaBoostRegressor.rst", "modules/generated/sklearn.ensemble.BaggingClassifier.rst", "modules/generated/sklearn.ensemble.BaggingRegressor.rst", "modules/generated/sklearn.ensemble.ExtraTreesClassifier.rst", "modules/generated/sklearn.ensemble.ExtraTreesRegressor.rst", "modules/generated/sklearn.ensemble.GradientBoostingClassifier.rst", "modules/generated/sklearn.ensemble.GradientBoostingRegressor.rst", "modules/generated/sklearn.ensemble.HistGradientBoostingClassifier.rst", "modules/generated/sklearn.ensemble.HistGradientBoostingRegressor.rst", "modules/generated/sklearn.ensemble.IsolationForest.rst", "modules/generated/sklearn.ensemble.RandomForestClassifier.rst", "modules/generated/sklearn.ensemble.RandomForestRegressor.rst", "modules/generated/sklearn.ensemble.RandomTreesEmbedding.rst", "modules/generated/sklearn.ensemble.StackingClassifier.rst", "modules/generated/sklearn.ensemble.StackingRegressor.rst", "modules/generated/sklearn.ensemble.VotingClassifier.rst", "modules/generated/sklearn.ensemble.VotingRegressor.rst", "modules/generated/sklearn.exceptions.ConvergenceWarning.rst", "modules/generated/sklearn.exceptions.DataConversionWarning.rst", "modules/generated/sklearn.exceptions.DataDimensionalityWarning.rst", "modules/generated/sklearn.exceptions.EfficiencyWarning.rst", "modules/generated/sklearn.exceptions.FitFailedWarning.rst", "modules/generated/sklearn.exceptions.InconsistentVersionWarning.rst", "modules/generated/sklearn.exceptions.NotFittedError.rst", "modules/generated/sklearn.exceptions.UndefinedMetricWarning.rst", "modules/generated/sklearn.experimental.enable_halving_search_cv.rst", "modules/generated/sklearn.experimental.enable_iterative_imputer.rst", "modules/generated/sklearn.feature_extraction.DictVectorizer.rst", "modules/generated/sklearn.feature_extraction.FeatureHasher.rst", "modules/generated/sklearn.feature_extraction.image.PatchExtractor.rst", "modules/generated/sklearn.feature_extraction.image.extract_patches_2d.rst", "modules/generated/sklearn.feature_extraction.image.grid_to_graph.rst", "modules/generated/sklearn.feature_extraction.image.img_to_graph.rst", "modules/generated/sklearn.feature_extraction.image.reconstruct_from_patches_2d.rst", "modules/generated/sklearn.feature_extraction.text.CountVectorizer.rst", "modules/generated/sklearn.feature_extraction.text.HashingVectorizer.rst", "modules/generated/sklearn.feature_extraction.text.TfidfTransformer.rst", "modules/generated/sklearn.feature_extraction.text.TfidfVectorizer.rst", "modules/generated/sklearn.feature_selection.GenericUnivariateSelect.rst", "modules/generated/sklearn.feature_selection.RFE.rst", "modules/generated/sklearn.feature_selection.RFECV.rst", "modules/generated/sklearn.feature_selection.SelectFdr.rst", "modules/generated/sklearn.feature_selection.SelectFpr.rst", "modules/generated/sklearn.feature_selection.SelectFromModel.rst", "modules/generated/sklearn.feature_selection.SelectFwe.rst", "modules/generated/sklearn.feature_selection.SelectKBest.rst", "modules/generated/sklearn.feature_selection.SelectPercentile.rst", "modules/generated/sklearn.feature_selection.SelectorMixin.rst", "modules/generated/sklearn.feature_selection.SequentialFeatureSelector.rst", "modules/generated/sklearn.feature_selection.VarianceThreshold.rst", "modules/generated/sklearn.feature_selection.chi2.rst", "modules/generated/sklearn.feature_selection.f_classif.rst", "modules/generated/sklearn.feature_selection.f_regression.rst", "modules/generated/sklearn.feature_selection.mutual_info_classif.rst", "modules/generated/sklearn.feature_selection.mutual_info_regression.rst", "modules/generated/sklearn.feature_selection.r_regression.rst", "modules/generated/sklearn.gaussian_process.GaussianProcessClassifier.rst", "modules/generated/sklearn.gaussian_process.GaussianProcessRegressor.rst", "modules/generated/sklearn.gaussian_process.kernels.CompoundKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.ConstantKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.DotProduct.rst", "modules/generated/sklearn.gaussian_process.kernels.ExpSineSquared.rst", "modules/generated/sklearn.gaussian_process.kernels.Exponentiation.rst", "modules/generated/sklearn.gaussian_process.kernels.Hyperparameter.rst", "modules/generated/sklearn.gaussian_process.kernels.Kernel.rst", "modules/generated/sklearn.gaussian_process.kernels.Matern.rst", "modules/generated/sklearn.gaussian_process.kernels.PairwiseKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.Product.rst", "modules/generated/sklearn.gaussian_process.kernels.RBF.rst", "modules/generated/sklearn.gaussian_process.kernels.RationalQuadratic.rst", "modules/generated/sklearn.gaussian_process.kernels.Sum.rst", "modules/generated/sklearn.gaussian_process.kernels.WhiteKernel.rst", "modules/generated/sklearn.get_config.rst", "modules/generated/sklearn.impute.IterativeImputer.rst", "modules/generated/sklearn.impute.KNNImputer.rst", "modules/generated/sklearn.impute.MissingIndicator.rst", "modules/generated/sklearn.impute.SimpleImputer.rst", "modules/generated/sklearn.inspection.DecisionBoundaryDisplay.rst", "modules/generated/sklearn.inspection.PartialDependenceDisplay.rst", "modules/generated/sklearn.inspection.partial_dependence.rst", "modules/generated/sklearn.inspection.permutation_importance.rst", "modules/generated/sklearn.isotonic.IsotonicRegression.rst", "modules/generated/sklearn.isotonic.check_increasing.rst", "modules/generated/sklearn.isotonic.isotonic_regression.rst", "modules/generated/sklearn.kernel_approximation.AdditiveChi2Sampler.rst", "modules/generated/sklearn.kernel_approximation.Nystroem.rst", "modules/generated/sklearn.kernel_approximation.PolynomialCountSketch.rst", "modules/generated/sklearn.kernel_approximation.RBFSampler.rst", "modules/generated/sklearn.kernel_approximation.SkewedChi2Sampler.rst", "modules/generated/sklearn.kernel_ridge.KernelRidge.rst", "modules/generated/sklearn.linear_model.ARDRegression.rst", "modules/generated/sklearn.linear_model.BayesianRidge.rst", "modules/generated/sklearn.linear_model.ElasticNet.rst", "modules/generated/sklearn.linear_model.ElasticNetCV.rst", "modules/generated/sklearn.linear_model.GammaRegressor.rst", "modules/generated/sklearn.linear_model.HuberRegressor.rst", "modules/generated/sklearn.linear_model.Lars.rst", "modules/generated/sklearn.linear_model.LarsCV.rst", "modules/generated/sklearn.linear_model.Lasso.rst", "modules/generated/sklearn.linear_model.LassoCV.rst", "modules/generated/sklearn.linear_model.LassoLars.rst", "modules/generated/sklearn.linear_model.LassoLarsCV.rst", "modules/generated/sklearn.linear_model.LassoLarsIC.rst", "modules/generated/sklearn.linear_model.LinearRegression.rst", "modules/generated/sklearn.linear_model.LogisticRegression.rst", "modules/generated/sklearn.linear_model.LogisticRegressionCV.rst", "modules/generated/sklearn.linear_model.MultiTaskElasticNet.rst", "modules/generated/sklearn.linear_model.MultiTaskElasticNetCV.rst", "modules/generated/sklearn.linear_model.MultiTaskLasso.rst", "modules/generated/sklearn.linear_model.MultiTaskLassoCV.rst", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuit.rst", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuitCV.rst", "modules/generated/sklearn.linear_model.PassiveAggressiveClassifier.rst", "modules/generated/sklearn.linear_model.PassiveAggressiveRegressor.rst", "modules/generated/sklearn.linear_model.Perceptron.rst", "modules/generated/sklearn.linear_model.PoissonRegressor.rst", "modules/generated/sklearn.linear_model.QuantileRegressor.rst", "modules/generated/sklearn.linear_model.RANSACRegressor.rst", "modules/generated/sklearn.linear_model.Ridge.rst", "modules/generated/sklearn.linear_model.RidgeCV.rst", "modules/generated/sklearn.linear_model.RidgeClassifier.rst", "modules/generated/sklearn.linear_model.RidgeClassifierCV.rst", "modules/generated/sklearn.linear_model.SGDClassifier.rst", "modules/generated/sklearn.linear_model.SGDOneClassSVM.rst", "modules/generated/sklearn.linear_model.SGDRegressor.rst", "modules/generated/sklearn.linear_model.TheilSenRegressor.rst", "modules/generated/sklearn.linear_model.TweedieRegressor.rst", "modules/generated/sklearn.linear_model.enet_path.rst", "modules/generated/sklearn.linear_model.lars_path.rst", "modules/generated/sklearn.linear_model.lars_path_gram.rst", "modules/generated/sklearn.linear_model.lasso_path.rst", "modules/generated/sklearn.linear_model.orthogonal_mp.rst", "modules/generated/sklearn.linear_model.orthogonal_mp_gram.rst", "modules/generated/sklearn.linear_model.ridge_regression.rst", "modules/generated/sklearn.manifold.Isomap.rst", "modules/generated/sklearn.manifold.LocallyLinearEmbedding.rst", "modules/generated/sklearn.manifold.MDS.rst", "modules/generated/sklearn.manifold.SpectralEmbedding.rst", "modules/generated/sklearn.manifold.TSNE.rst", "modules/generated/sklearn.manifold.locally_linear_embedding.rst", "modules/generated/sklearn.manifold.smacof.rst", "modules/generated/sklearn.manifold.spectral_embedding.rst", "modules/generated/sklearn.manifold.trustworthiness.rst", "modules/generated/sklearn.metrics.ConfusionMatrixDisplay.rst", "modules/generated/sklearn.metrics.DetCurveDisplay.rst", "modules/generated/sklearn.metrics.DistanceMetric.rst", "modules/generated/sklearn.metrics.PrecisionRecallDisplay.rst", "modules/generated/sklearn.metrics.PredictionErrorDisplay.rst", "modules/generated/sklearn.metrics.RocCurveDisplay.rst", "modules/generated/sklearn.metrics.accuracy_score.rst", "modules/generated/sklearn.metrics.adjusted_mutual_info_score.rst", "modules/generated/sklearn.metrics.adjusted_rand_score.rst", "modules/generated/sklearn.metrics.auc.rst", "modules/generated/sklearn.metrics.average_precision_score.rst", "modules/generated/sklearn.metrics.balanced_accuracy_score.rst", "modules/generated/sklearn.metrics.brier_score_loss.rst", "modules/generated/sklearn.metrics.calinski_harabasz_score.rst", "modules/generated/sklearn.metrics.check_scoring.rst", "modules/generated/sklearn.metrics.class_likelihood_ratios.rst", "modules/generated/sklearn.metrics.classification_report.rst", "modules/generated/sklearn.metrics.cluster.contingency_matrix.rst", "modules/generated/sklearn.metrics.cluster.pair_confusion_matrix.rst", "modules/generated/sklearn.metrics.cohen_kappa_score.rst", "modules/generated/sklearn.metrics.completeness_score.rst", "modules/generated/sklearn.metrics.confusion_matrix.rst", "modules/generated/sklearn.metrics.consensus_score.rst", "modules/generated/sklearn.metrics.coverage_error.rst", "modules/generated/sklearn.metrics.d2_absolute_error_score.rst", "modules/generated/sklearn.metrics.d2_pinball_score.rst", "modules/generated/sklearn.metrics.d2_tweedie_score.rst", "modules/generated/sklearn.metrics.davies_bouldin_score.rst", "modules/generated/sklearn.metrics.dcg_score.rst", "modules/generated/sklearn.metrics.det_curve.rst", "modules/generated/sklearn.metrics.explained_variance_score.rst", "modules/generated/sklearn.metrics.f1_score.rst", "modules/generated/sklearn.metrics.fbeta_score.rst", "modules/generated/sklearn.metrics.fowlkes_mallows_score.rst", "modules/generated/sklearn.metrics.get_scorer.rst", "modules/generated/sklearn.metrics.get_scorer_names.rst", "modules/generated/sklearn.metrics.hamming_loss.rst", "modules/generated/sklearn.metrics.hinge_loss.rst", "modules/generated/sklearn.metrics.homogeneity_completeness_v_measure.rst", "modules/generated/sklearn.metrics.homogeneity_score.rst", "modules/generated/sklearn.metrics.jaccard_score.rst", "modules/generated/sklearn.metrics.label_ranking_average_precision_score.rst", "modules/generated/sklearn.metrics.label_ranking_loss.rst", "modules/generated/sklearn.metrics.log_loss.rst", "modules/generated/sklearn.metrics.make_scorer.rst", "modules/generated/sklearn.metrics.matthews_corrcoef.rst", "modules/generated/sklearn.metrics.max_error.rst", "modules/generated/sklearn.metrics.mean_absolute_error.rst", "modules/generated/sklearn.metrics.mean_absolute_percentage_error.rst", "modules/generated/sklearn.metrics.mean_gamma_deviance.rst", "modules/generated/sklearn.metrics.mean_pinball_loss.rst", "modules/generated/sklearn.metrics.mean_poisson_deviance.rst", "modules/generated/sklearn.metrics.mean_squared_error.rst", "modules/generated/sklearn.metrics.mean_squared_log_error.rst", "modules/generated/sklearn.metrics.mean_tweedie_deviance.rst", "modules/generated/sklearn.metrics.median_absolute_error.rst", "modules/generated/sklearn.metrics.multilabel_confusion_matrix.rst", "modules/generated/sklearn.metrics.mutual_info_score.rst", "modules/generated/sklearn.metrics.ndcg_score.rst", "modules/generated/sklearn.metrics.normalized_mutual_info_score.rst", "modules/generated/sklearn.metrics.pairwise.additive_chi2_kernel.rst", "modules/generated/sklearn.metrics.pairwise.chi2_kernel.rst", "modules/generated/sklearn.metrics.pairwise.cosine_distances.rst", "modules/generated/sklearn.metrics.pairwise.cosine_similarity.rst", "modules/generated/sklearn.metrics.pairwise.distance_metrics.rst", "modules/generated/sklearn.metrics.pairwise.euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.haversine_distances.rst", "modules/generated/sklearn.metrics.pairwise.kernel_metrics.rst", "modules/generated/sklearn.metrics.pairwise.laplacian_kernel.rst", "modules/generated/sklearn.metrics.pairwise.linear_kernel.rst", "modules/generated/sklearn.metrics.pairwise.manhattan_distances.rst", "modules/generated/sklearn.metrics.pairwise.nan_euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_cosine_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_manhattan_distances.rst", "modules/generated/sklearn.metrics.pairwise.pairwise_kernels.rst", "modules/generated/sklearn.metrics.pairwise.polynomial_kernel.rst", "modules/generated/sklearn.metrics.pairwise.rbf_kernel.rst", "modules/generated/sklearn.metrics.pairwise.sigmoid_kernel.rst", "modules/generated/sklearn.metrics.pairwise_distances.rst", "modules/generated/sklearn.metrics.pairwise_distances_argmin.rst", "modules/generated/sklearn.metrics.pairwise_distances_argmin_min.rst", "modules/generated/sklearn.metrics.pairwise_distances_chunked.rst", "modules/generated/sklearn.metrics.precision_recall_curve.rst", "modules/generated/sklearn.metrics.precision_recall_fscore_support.rst", "modules/generated/sklearn.metrics.precision_score.rst", "modules/generated/sklearn.metrics.r2_score.rst", "modules/generated/sklearn.metrics.rand_score.rst", "modules/generated/sklearn.metrics.recall_score.rst", "modules/generated/sklearn.metrics.roc_auc_score.rst", "modules/generated/sklearn.metrics.roc_curve.rst", "modules/generated/sklearn.metrics.root_mean_squared_error.rst", "modules/generated/sklearn.metrics.root_mean_squared_log_error.rst", "modules/generated/sklearn.metrics.silhouette_samples.rst", "modules/generated/sklearn.metrics.silhouette_score.rst", "modules/generated/sklearn.metrics.top_k_accuracy_score.rst", "modules/generated/sklearn.metrics.v_measure_score.rst", "modules/generated/sklearn.metrics.zero_one_loss.rst", "modules/generated/sklearn.mixture.BayesianGaussianMixture.rst", "modules/generated/sklearn.mixture.GaussianMixture.rst", "modules/generated/sklearn.model_selection.GridSearchCV.rst", "modules/generated/sklearn.model_selection.GroupKFold.rst", "modules/generated/sklearn.model_selection.GroupShuffleSplit.rst", "modules/generated/sklearn.model_selection.HalvingGridSearchCV.rst", "modules/generated/sklearn.model_selection.HalvingRandomSearchCV.rst", "modules/generated/sklearn.model_selection.KFold.rst", "modules/generated/sklearn.model_selection.LearningCurveDisplay.rst", "modules/generated/sklearn.model_selection.LeaveOneGroupOut.rst", "modules/generated/sklearn.model_selection.LeaveOneOut.rst", "modules/generated/sklearn.model_selection.LeavePGroupsOut.rst", "modules/generated/sklearn.model_selection.LeavePOut.rst", "modules/generated/sklearn.model_selection.ParameterGrid.rst", "modules/generated/sklearn.model_selection.ParameterSampler.rst", "modules/generated/sklearn.model_selection.PredefinedSplit.rst", "modules/generated/sklearn.model_selection.RandomizedSearchCV.rst", "modules/generated/sklearn.model_selection.RepeatedKFold.rst", "modules/generated/sklearn.model_selection.RepeatedStratifiedKFold.rst", "modules/generated/sklearn.model_selection.ShuffleSplit.rst", "modules/generated/sklearn.model_selection.StratifiedGroupKFold.rst", "modules/generated/sklearn.model_selection.StratifiedKFold.rst", "modules/generated/sklearn.model_selection.StratifiedShuffleSplit.rst", "modules/generated/sklearn.model_selection.TimeSeriesSplit.rst", "modules/generated/sklearn.model_selection.ValidationCurveDisplay.rst", "modules/generated/sklearn.model_selection.check_cv.rst", "modules/generated/sklearn.model_selection.cross_val_predict.rst", "modules/generated/sklearn.model_selection.cross_val_score.rst", "modules/generated/sklearn.model_selection.cross_validate.rst", "modules/generated/sklearn.model_selection.learning_curve.rst", "modules/generated/sklearn.model_selection.permutation_test_score.rst", "modules/generated/sklearn.model_selection.train_test_split.rst", "modules/generated/sklearn.model_selection.validation_curve.rst", "modules/generated/sklearn.multiclass.OneVsOneClassifier.rst", "modules/generated/sklearn.multiclass.OneVsRestClassifier.rst", "modules/generated/sklearn.multiclass.OutputCodeClassifier.rst", "modules/generated/sklearn.multioutput.ClassifierChain.rst", "modules/generated/sklearn.multioutput.MultiOutputClassifier.rst", "modules/generated/sklearn.multioutput.MultiOutputRegressor.rst", "modules/generated/sklearn.multioutput.RegressorChain.rst", "modules/generated/sklearn.naive_bayes.BernoulliNB.rst", "modules/generated/sklearn.naive_bayes.CategoricalNB.rst", "modules/generated/sklearn.naive_bayes.ComplementNB.rst", "modules/generated/sklearn.naive_bayes.GaussianNB.rst", "modules/generated/sklearn.naive_bayes.MultinomialNB.rst", "modules/generated/sklearn.neighbors.BallTree.rst", "modules/generated/sklearn.neighbors.KDTree.rst", "modules/generated/sklearn.neighbors.KNeighborsClassifier.rst", "modules/generated/sklearn.neighbors.KNeighborsRegressor.rst", "modules/generated/sklearn.neighbors.KNeighborsTransformer.rst", "modules/generated/sklearn.neighbors.KernelDensity.rst", "modules/generated/sklearn.neighbors.LocalOutlierFactor.rst", "modules/generated/sklearn.neighbors.NearestCentroid.rst", "modules/generated/sklearn.neighbors.NearestNeighbors.rst", "modules/generated/sklearn.neighbors.NeighborhoodComponentsAnalysis.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsClassifier.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsRegressor.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsTransformer.rst", "modules/generated/sklearn.neighbors.kneighbors_graph.rst", "modules/generated/sklearn.neighbors.radius_neighbors_graph.rst", "modules/generated/sklearn.neighbors.sort_graph_by_row_values.rst", "modules/generated/sklearn.neural_network.BernoulliRBM.rst", "modules/generated/sklearn.neural_network.MLPClassifier.rst", "modules/generated/sklearn.neural_network.MLPRegressor.rst", "modules/generated/sklearn.pipeline.FeatureUnion.rst", "modules/generated/sklearn.pipeline.Pipeline.rst", "modules/generated/sklearn.pipeline.make_pipeline.rst", "modules/generated/sklearn.pipeline.make_union.rst", "modules/generated/sklearn.preprocessing.Binarizer.rst", "modules/generated/sklearn.preprocessing.FunctionTransformer.rst", "modules/generated/sklearn.preprocessing.KBinsDiscretizer.rst", "modules/generated/sklearn.preprocessing.KernelCenterer.rst", "modules/generated/sklearn.preprocessing.LabelBinarizer.rst", "modules/generated/sklearn.preprocessing.LabelEncoder.rst", "modules/generated/sklearn.preprocessing.MaxAbsScaler.rst", "modules/generated/sklearn.preprocessing.MinMaxScaler.rst", "modules/generated/sklearn.preprocessing.MultiLabelBinarizer.rst", "modules/generated/sklearn.preprocessing.Normalizer.rst", "modules/generated/sklearn.preprocessing.OneHotEncoder.rst", "modules/generated/sklearn.preprocessing.OrdinalEncoder.rst", "modules/generated/sklearn.preprocessing.PolynomialFeatures.rst", "modules/generated/sklearn.preprocessing.PowerTransformer.rst", "modules/generated/sklearn.preprocessing.QuantileTransformer.rst", "modules/generated/sklearn.preprocessing.RobustScaler.rst", "modules/generated/sklearn.preprocessing.SplineTransformer.rst", "modules/generated/sklearn.preprocessing.StandardScaler.rst", "modules/generated/sklearn.preprocessing.TargetEncoder.rst", "modules/generated/sklearn.preprocessing.add_dummy_feature.rst", "modules/generated/sklearn.preprocessing.binarize.rst", "modules/generated/sklearn.preprocessing.label_binarize.rst", "modules/generated/sklearn.preprocessing.maxabs_scale.rst", "modules/generated/sklearn.preprocessing.minmax_scale.rst", "modules/generated/sklearn.preprocessing.normalize.rst", "modules/generated/sklearn.preprocessing.power_transform.rst", "modules/generated/sklearn.preprocessing.quantile_transform.rst", "modules/generated/sklearn.preprocessing.robust_scale.rst", "modules/generated/sklearn.preprocessing.scale.rst", "modules/generated/sklearn.random_projection.GaussianRandomProjection.rst", "modules/generated/sklearn.random_projection.SparseRandomProjection.rst", "modules/generated/sklearn.random_projection.johnson_lindenstrauss_min_dim.rst", "modules/generated/sklearn.semi_supervised.LabelPropagation.rst", "modules/generated/sklearn.semi_supervised.LabelSpreading.rst", "modules/generated/sklearn.semi_supervised.SelfTrainingClassifier.rst", "modules/generated/sklearn.set_config.rst", "modules/generated/sklearn.show_versions.rst", "modules/generated/sklearn.svm.LinearSVC.rst", "modules/generated/sklearn.svm.LinearSVR.rst", "modules/generated/sklearn.svm.NuSVC.rst", "modules/generated/sklearn.svm.NuSVR.rst", "modules/generated/sklearn.svm.OneClassSVM.rst", "modules/generated/sklearn.svm.SVC.rst", "modules/generated/sklearn.svm.SVR.rst", "modules/generated/sklearn.svm.l1_min_c.rst", "modules/generated/sklearn.tree.DecisionTreeClassifier.rst", "modules/generated/sklearn.tree.DecisionTreeRegressor.rst", "modules/generated/sklearn.tree.ExtraTreeClassifier.rst", "modules/generated/sklearn.tree.ExtraTreeRegressor.rst", "modules/generated/sklearn.tree.export_graphviz.rst", "modules/generated/sklearn.tree.export_text.rst", "modules/generated/sklearn.tree.plot_tree.rst", "modules/generated/sklearn.utils.Bunch.rst", "modules/generated/sklearn.utils._safe_indexing.rst", "modules/generated/sklearn.utils.arrayfuncs.min_pos.rst", "modules/generated/sklearn.utils.as_float_array.rst", "modules/generated/sklearn.utils.assert_all_finite.rst", "modules/generated/sklearn.utils.check_X_y.rst", "modules/generated/sklearn.utils.check_array.rst", "modules/generated/sklearn.utils.check_consistent_length.rst", "modules/generated/sklearn.utils.check_random_state.rst", "modules/generated/sklearn.utils.check_scalar.rst", "modules/generated/sklearn.utils.class_weight.compute_class_weight.rst", "modules/generated/sklearn.utils.class_weight.compute_sample_weight.rst", "modules/generated/sklearn.utils.deprecated.rst", "modules/generated/sklearn.utils.discovery.all_displays.rst", "modules/generated/sklearn.utils.discovery.all_estimators.rst", "modules/generated/sklearn.utils.discovery.all_functions.rst", "modules/generated/sklearn.utils.estimator_checks.check_estimator.rst", "modules/generated/sklearn.utils.estimator_checks.parametrize_with_checks.rst", "modules/generated/sklearn.utils.estimator_html_repr.rst", "modules/generated/sklearn.utils.extmath.density.rst", "modules/generated/sklearn.utils.extmath.fast_logdet.rst", "modules/generated/sklearn.utils.extmath.randomized_range_finder.rst", "modules/generated/sklearn.utils.extmath.randomized_svd.rst", "modules/generated/sklearn.utils.extmath.safe_sparse_dot.rst", "modules/generated/sklearn.utils.extmath.weighted_mode.rst", "modules/generated/sklearn.utils.gen_batches.rst", "modules/generated/sklearn.utils.gen_even_slices.rst", "modules/generated/sklearn.utils.graph.single_source_shortest_path_length.rst", "modules/generated/sklearn.utils.indexable.rst", "modules/generated/sklearn.utils.metadata_routing.MetadataRequest.rst", "modules/generated/sklearn.utils.metadata_routing.MetadataRouter.rst", "modules/generated/sklearn.utils.metadata_routing.MethodMapping.rst", "modules/generated/sklearn.utils.metadata_routing.get_routing_for_object.rst", "modules/generated/sklearn.utils.metadata_routing.process_routing.rst", "modules/generated/sklearn.utils.metaestimators.available_if.rst", "modules/generated/sklearn.utils.multiclass.is_multilabel.rst", "modules/generated/sklearn.utils.multiclass.type_of_target.rst", "modules/generated/sklearn.utils.multiclass.unique_labels.rst", "modules/generated/sklearn.utils.murmurhash3_32.rst", "modules/generated/sklearn.utils.parallel.Parallel.rst", "modules/generated/sklearn.utils.parallel.delayed.rst", "modules/generated/sklearn.utils.parallel_backend.rst", "modules/generated/sklearn.utils.random.sample_without_replacement.rst", "modules/generated/sklearn.utils.register_parallel_backend.rst", "modules/generated/sklearn.utils.resample.rst", "modules/generated/sklearn.utils.safe_mask.rst", "modules/generated/sklearn.utils.safe_sqr.rst", "modules/generated/sklearn.utils.shuffle.rst", "modules/generated/sklearn.utils.sparsefuncs.incr_mean_variance_axis.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_column_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_csr_column_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_row_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_column.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_row.rst", "modules/generated/sklearn.utils.sparsefuncs.mean_variance_axis.rst", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1.rst", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2.rst", "modules/generated/sklearn.utils.validation.check_is_fitted.rst", "modules/generated/sklearn.utils.validation.check_memory.rst", "modules/generated/sklearn.utils.validation.check_symmetric.rst", "modules/generated/sklearn.utils.validation.column_or_1d.rst", "modules/generated/sklearn.utils.validation.has_fit_parameter.rst", "modules/grid_search.rst", "modules/impute.rst", "modules/isotonic.rst", "modules/kernel_approximation.rst", "modules/kernel_ridge.rst", "modules/lda_qda.rst", "modules/learning_curve.rst", "modules/linear_model.rst", "modules/manifold.rst", "modules/metrics.rst", "modules/mixture.rst", "modules/model_evaluation.rst", "modules/multiclass.rst", "modules/naive_bayes.rst", "modules/neighbors.rst", "modules/neural_networks_supervised.rst", "modules/neural_networks_unsupervised.rst", "modules/outlier_detection.rst", "modules/partial_dependence.rst", "modules/permutation_importance.rst", "modules/pipeline.rst", "modules/preprocessing.rst", "modules/preprocessing_targets.rst", "modules/random_projection.rst", "modules/semi_supervised.rst", "modules/sgd.rst", "modules/svm.rst", "modules/tree.rst", "modules/unsupervised_reduction.rst", "presentations.rst", "related_projects.rst", "roadmap.rst", "sg_execution_times.rst", "supervised_learning.rst", "support.rst", "testimonials/testimonials.rst", "tutorial/basic/tutorial.rst", "tutorial/index.rst", "tutorial/machine_learning_map/index.rst", "tutorial/statistical_inference/index.rst", "tutorial/statistical_inference/model_selection.rst", "tutorial/statistical_inference/putting_together.rst", "tutorial/statistical_inference/settings.rst", "tutorial/statistical_inference/supervised_learning.rst", "tutorial/statistical_inference/unsupervised_learning.rst", "tutorial/text_analytics/working_with_text_data.rst", "unsupervised_learning.rst", "user_guide.rst", "visualizations.rst", "whats_new.rst", "whats_new/_contributors.rst", "whats_new/older_versions.rst", "whats_new/v0.13.rst", "whats_new/v0.14.rst", "whats_new/v0.15.rst", "whats_new/v0.16.rst", "whats_new/v0.17.rst", "whats_new/v0.18.rst", "whats_new/v0.19.rst", "whats_new/v0.20.rst", "whats_new/v0.21.rst", "whats_new/v0.22.rst", "whats_new/v0.23.rst", "whats_new/v0.24.rst", "whats_new/v1.0.rst", "whats_new/v1.1.rst", "whats_new/v1.2.rst", "whats_new/v1.3.rst", "whats_new/v1.4.rst", "whats_new/v1.5.rst"], "titles": ["About us", "&lt;no title&gt;", "&lt;no title&gt;", "Examples based on real world datasets", "Time-related feature engineering", "Image denoising using kernel PCA", "Faces recognition example using eigenfaces and SVMs", "Model Complexity Influence", "Out-of-core classification of text documents", "Outlier detection on a real data set", "Prediction Latency", "Species distribution modeling", "Visualizing the stock market structure", "Lagged features for time series forecasting", "Compressive sensing: tomography reconstruction with L1 prior (Lasso)", "Topic extraction with Non-negative Matrix Factorization and Latent Dirichlet Allocation", "Computation times", "Libsvm GUI", "Wikipedia principal eigenvector", "Biclustering", "Biclustering documents with the Spectral Co-clustering algorithm", "A demo of the Spectral Biclustering algorithm", "A demo of the Spectral Co-Clustering algorithm", "Computation times", "Calibration", "Probability calibration of classifiers", "Probability Calibration curves", "Probability Calibration for 3-class classification", "Comparison of Calibration of Classifiers", "Computation times", "Classification", "Plot classification probability", "Classifier comparison", "Recognizing hand-written digits", "Normal, Ledoit-Wolf and OAS Linear Discriminant Analysis for classification", "Linear and Quadratic Discriminant Analysis with covariance ellipsoid", "Computation times", "Clustering", "Adjustment for chance in clustering performance evaluation", "Demo of affinity propagation clustering algorithm", "Agglomerative clustering with and without structure", "Agglomerative clustering with different metrics", "Plot Hierarchical Clustering Dendrogram", "Compare BIRCH and MiniBatchKMeans", "Bisecting K-Means and Regular K-Means Performance Comparison", "Comparing different clustering algorithms on toy datasets", "K-means Clustering", "Segmenting the picture of greek coins in regions", "A demo of structured Ward hierarchical clustering on an image of coins", "Color Quantization using K-Means", "Demo of DBSCAN clustering algorithm", "Online learning of a dictionary of parts of faces", "Feature agglomeration", "Various Agglomerative Clustering on a 2D embedding of digits", "Vector Quantization Example", "Feature agglomeration vs. univariate selection", "Demo of HDBSCAN clustering algorithm", "Inductive Clustering", "Demonstration of k-means assumptions", "A demo of K-Means clustering on the handwritten digits data", "An example of K-Means++ initialization", "Selecting the number of clusters with silhouette analysis on KMeans clustering", "Empirical evaluation of the impact of k-means initialization", "Comparing different hierarchical linkage methods on toy datasets", "A demo of the mean-shift clustering algorithm", "Comparison of the K-Means and MiniBatchKMeans clustering algorithms", "Demo of OPTICS clustering algorithm", "Spectral clustering for image segmentation", "Hierarchical clustering: structured vs unstructured ward", "Computation times", "Pipelines and composite estimators", "Column Transformer with Heterogeneous Data Sources", "Column Transformer with Mixed Types", "Selecting dimensionality reduction with Pipeline and GridSearchCV", "Pipelining: chaining a PCA and a logistic regression", "Concatenating multiple feature extraction methods", "Effect of transforming the targets in regression model", "Computation times", "Covariance estimation", "Shrinkage covariance estimation: LedoitWolf vs OAS and max-likelihood", "Ledoit-Wolf vs OAS estimation", "Robust covariance estimation and Mahalanobis distances relevance", "Robust vs Empirical covariance estimate", "Sparse inverse covariance estimation", "Computation times", "Cross decomposition", "Compare cross decomposition methods", "Principal Component Regression vs Partial Least Squares Regression", "Computation times", "Dataset examples", "The Digit Dataset", "The Iris Dataset", "Plot randomly generated classification dataset", "Plot randomly generated multilabel dataset", "Computation times", "Decomposition", "Faces dataset decompositions", "Blind source separation using FastICA", "FastICA on 2D point clouds", "Image denoising using dictionary learning", "Incremental PCA", "Kernel PCA", "PCA example with Iris Data-set", "Model selection with Probabilistic PCA and Factor Analysis (FA)", "Comparison of LDA and PCA 2D projection of Iris dataset", "Sparse coding with a precomputed dictionary", "Factor Analysis (with rotation) to visualize patterns", "Computation times", "Developing Estimators", "Computation times", "<code class=\"docutils literal notranslate\"><span class=\"pre\">__sklearn_is_fitted__</span></code> as Developer API", "Ensemble methods", "Multi-class AdaBoosted Decision Trees", "Decision Tree Regression with AdaBoost", "Two-class AdaBoost", "Single estimator versus bagging: bias-variance decomposition", "OOB Errors for Random Forests", "Feature transformations with ensembles of trees", "Comparing Random Forests and Histogram Gradient Boosting models", "Feature importances with a forest of trees", "Pixel importances with a parallel forest of trees", "Plot the decision surfaces of ensembles of trees on the iris dataset", "Categorical Feature Support in Gradient Boosting", "Early stopping in Gradient Boosting", "Gradient Boosting Out-of-Bag estimates", "Prediction Intervals for Gradient Boosting Regression", "Gradient Boosting regression", "Gradient Boosting regularization", "IsolationForest example", "Monotonic Constraints", "Hashing feature transformation using Totally Random Trees", "Comparing random forests and the multi-output meta estimator", "Combine predictors using stacking", "Plot the decision boundaries of a VotingClassifier", "Plot class probabilities calculated by the VotingClassifier", "Plot individual and voting regression predictions", "Computation times", "Tutorial exercises", "Cross-validation on diabetes Dataset Exercise", "Digits Classification Exercise", "SVM Exercise", "Computation times", "Feature Selection", "Comparison of F-test and mutual information", "Univariate Feature Selection", "Pipeline ANOVA SVM", "Recursive feature elimination", "Recursive feature elimination with cross-validation", "Model-based and sequential feature selection", "Computation times", "Gaussian Process for Machine Learning", "Comparison of kernel ridge and Gaussian process regression", "Probabilistic predictions with Gaussian process classification (GPC)", "Gaussian process classification (GPC) on iris dataset", "Iso-probability lines for Gaussian Processes classification (GPC)", "Illustration of Gaussian process classification (GPC) on the XOR dataset", "Forecasting of CO2 level on Mona Loa dataset using Gaussian process regression (GPR)", "Ability of Gaussian process regression (GPR) to estimate data noise-level", "Gaussian Processes regression: basic introductory example", "Gaussian processes on discrete data structures", "Illustration of prior and posterior Gaussian process for different kernels", "Computation times", "Missing Value Imputation", "Imputing missing values with variants of IterativeImputer", "Imputing missing values before building an estimator", "Computation times", "Examples", "Inspection", "Failure of Machine Learning to infer causal effects", "Common pitfalls in the interpretation of coefficients of linear models", "Partial Dependence and Individual Conditional Expectation Plots", "Permutation Importance vs Random Forest Feature Importance (MDI)", "Permutation Importance with Multicollinear or Correlated Features", "Computation times", "Kernel Approximation", "Scalable learning with polynomial kernel approximation", "Computation times", "Generalized Linear Models", "Comparing Linear Bayesian Regressors", "Curve Fitting with Bayesian Ridge Regression", "Fitting an Elastic Net with a precomputed Gram Matrix and Weighted Samples", "HuberRegressor vs Ridge on dataset with strong outliers", "Logistic Regression 3-class Classifier", "L1-based models for Sparse Signals", "Lasso and Elastic Net", "Lasso on dense and sparse data", "Lasso path using LARS", "Lasso model selection via information criteria", "Lasso model selection: AIC-BIC / cross-validation", "Logistic function", "L1 Penalty and Sparsity in Logistic Regression", "Plot multinomial and One-vs-Rest Logistic Regression", "Regularization path of L1- Logistic Regression", "Joint feature selection with multi-task Lasso", "Non-negative least squares", "Linear Regression Example", "Sparsity Example: Fitting only features 1  and 2", "Ordinary Least Squares and Ridge Regression Variance", "Orthogonal Matching Pursuit", "Poisson regression and non-normal loss", "Polynomial and Spline interpolation", "Quantile regression", "Robust linear model estimation using RANSAC", "Ridge coefficients as a function of the L2 Regularization", "Plot Ridge coefficients as a function of the regularization", "Robust linear estimator fitting", "Comparing various online solvers", "Early stopping of Stochastic Gradient Descent", "Plot multi-class SGD on the iris dataset", "SGD: convex loss functions", "SGD: Penalties", "SGD: Maximum margin separating hyperplane", "SGD: Weighted samples", "One-Class SVM versus One-Class SVM using Stochastic Gradient Descent", "Multiclass sparse logistic regression on 20newgroups", "MNIST classification using multinomial logistic + L1", "Theil-Sen Regression", "Tweedie regression on insurance claims", "Computation times", "Manifold learning", "Comparison of Manifold Learning methods", "Manifold learning on handwritten digits: Locally Linear Embedding, Isomap\u2026", "Manifold Learning methods on a severed sphere", "Multi-dimensional scaling", "Swiss Roll And Swiss-Hole Reduction", "t-SNE: The effect of various perplexity values on the shape", "Computation times", "Miscellaneous", "Comparing anomaly detection algorithms for outlier detection on toy datasets", "Visualizations with Display Objects", "Displaying estimators and complex pipelines", "Isotonic Regression", "The Johnson-Lindenstrauss bound for embedding with random projections", "Explicit feature map approximation for RBF kernels", "Comparison of kernel ridge regression and SVR", "Metadata Routing", "Multilabel classification", "Face completion with a multi-output estimators", "Evaluation of outlier detection estimators", "Advanced Plotting With Partial Dependence", "Displaying Pipelines", "ROC Curve with Visualization API", "Introducing the <code class=\"docutils literal notranslate\"><span class=\"pre\">set_output</span></code> API", "Computation times", "Gaussian Mixture Models", "Concentration Prior Type Analysis of Variation Bayesian Gaussian Mixture", "Gaussian Mixture Model Ellipsoids", "GMM covariances", "GMM Initialization Methods", "Density Estimation for a Gaussian mixture", "Gaussian Mixture Model Selection", "Gaussian Mixture Model Sine Curve", "Computation times", "Model Selection", "Confusion matrix", "Visualizing cross-validation behavior in scikit-learn", "Plotting Cross-Validated Predictions", "Detection error tradeoff (DET) curve", "Custom refit strategy of a grid search with cross-validation", "Balance model complexity and cross-validated score", "Statistical comparison of models using grid search", "Sample pipeline for text feature extraction and evaluation", "Plotting Learning Curves and Checking Models\u2019 Scalability", "Class Likelihood Ratios to measure classification performance", "Demonstration of multi-metric evaluation on cross_val_score and GridSearchCV", "Nested versus non-nested cross-validation", "Test with permutations the significance of a classification score", "Precision-Recall", "Comparing randomized search and grid search for hyperparameter estimation", "Multiclass Receiver Operating Characteristic (ROC)", "Receiver Operating Characteristic (ROC) with cross validation", "Comparison between grid search and successive halving", "Successive Halving Iterations", "Train error vs Test error", "Underfitting vs. Overfitting", "Plotting Validation Curves", "Computation times", "Multiclass methods", "Overview of multiclass training meta-estimators", "Computation times", "Multioutput methods", "Multilabel classification using a classifier chain", "Computation times", "Approximate nearest neighbors in TSNE", "Nearest Neighbors", "Caching nearest neighbors", "Nearest Neighbors Classification", "Kernel Density Estimation", "Simple 1D Kernel Density Estimation", "Novelty detection with Local Outlier Factor (LOF)", "Outlier detection with Local Outlier Factor (LOF)", "Comparing Nearest Neighbors with and without Neighborhood Components Analysis", "Dimensionality Reduction with Neighborhood Components Analysis", "Neighborhood Components Analysis Illustration", "Nearest Centroid Classification", "Nearest Neighbors regression", "Kernel Density Estimate of Species Distributions", "Computation times", "Neural Networks", "Varying regularization in Multi-layer Perceptron", "Compare Stochastic learning strategies for MLPClassifier", "Visualization of MLP weights on MNIST", "Restricted Boltzmann Machine features for digit classification", "Computation times", "Preprocessing", "Compare the effect of different scalers on data with outliers", "Using KBinsDiscretizer to discretize continuous features", "Feature discretization", "Demonstrating the different strategies of KBinsDiscretizer", "Map data to a normal distribution", "Importance of Feature Scaling", "Comparing Target Encoder with Other Encoders", "Target Encoder\u2019s Internal Cross fitting", "Computation times", "Release Highlights", "Release Highlights for scikit-learn 0.22", "Release Highlights for scikit-learn 0.23", "Release Highlights for scikit-learn 0.24", "Release Highlights for scikit-learn 1.0", "Release Highlights for scikit-learn 1.1", "Release Highlights for scikit-learn 1.2", "Release Highlights for scikit-learn 1.3", "Release Highlights for scikit-learn 1.4", "Computation times", "Semi Supervised Classification", "Label Propagation digits: Demonstrating performance", "Label Propagation digits active learning", "Label Propagation learning a complex structure", "Effect of varying threshold for self-training", "Semi-supervised Classification on a Text Dataset", "Decision boundary of semi-supervised classifiers versus SVM on the Iris dataset", "Computation times", "Computation times", "Support Vector Machines", "SVM with custom kernel", "Plot different SVM classifiers in the iris dataset", "Plot the support vectors in LinearSVC", "One-class SVM with non-linear kernel (RBF)", "RBF SVM parameters", "SVM: Maximum margin separating hyperplane", "SVM: Separating hyperplane for unbalanced classes", "SVM-Anova: SVM with univariate feature selection", "Plot classification boundaries with different SVM Kernels", "SVM Margins Example", "Non-linear SVM", "Support Vector Regression (SVR) using linear and non-linear kernels", "Scaling the regularization parameter for SVCs", "SVM Tie Breaking Example", "SVM: Weighted samples", "Computation times", "Working with text documents", "Classification of text documents using sparse features", "Clustering text documents using k-means", "FeatureHasher and DictVectorizer Comparison", "Computation times", "Decision Trees", "Post pruning decision trees with cost complexity pruning", "Plot the decision surface of decision trees trained on the iris dataset", "Decision Tree Regression", "Multi-output Decision Tree Regression", "Understanding the decision tree structure", "Computation times", "<span class=\"section-number\">10. </span>Common pitfalls and recommended practices", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">8. </span>Computing with scikit-learn", "<span class=\"section-number\">8.2. </span>Computational Performance", "<span class=\"section-number\">8.3. </span>Parallelism, resource management, and configuration", "<span class=\"section-number\">8.1. </span>Strategies to scale computationally: bigger data", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">6. </span>Dataset transformations", "<span class=\"section-number\">7. </span>Dataset loading utilities", "<span class=\"section-number\">7.4. </span>Loading other datasets", "<span class=\"section-number\">7.2. </span>Real world datasets", "<span class=\"section-number\">7.3. </span>Generated datasets", "<span class=\"section-number\">7.1. </span>Toy datasets", "Installing the development version of scikit-learn", "Bug triaging and issue curation", "Contributing", "Cython Best Practices, Conventions and Knowledge", "Developing scikit-learn estimators", "Developer\u2019s Guide", "Maintainer / core-developer information", "Crafting a minimal reproducer for scikit-learn", "How to optimize for speed", "Developing with the Plotting API", "Developers\u2019 Tips and Tricks", "Utilities for Developers", "<span class=\"section-number\">11. </span>Dispatching", "&lt;no title&gt;", "Frequently Asked Questions", "Getting Started", "Glossary of Common Terms and API Elements", "Scikit-learn governance and decision-making", "Index", "<span class=\"section-number\">4. </span>Inspection", "Installing scikit-learn", "<span class=\"section-number\">1. </span>Metadata Routing", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">9. </span>Model persistence", "<span class=\"section-number\">3. </span>Model selection and evaluation", "<span class=\"section-number\">11.1. </span>Array API support (experimental)", "<span class=\"section-number\">2.4. </span>Biclustering", "<span class=\"section-number\">1.16. </span>Probability calibration", "API Reference", "<span class=\"section-number\">2.3. </span>Clustering", "<span class=\"section-number\">6.1. </span>Pipelines and composite estimators", "<span class=\"section-number\">2.6. </span>Covariance estimation", "<span class=\"section-number\">1.8. </span>Cross decomposition", "<span class=\"section-number\">3.1. </span>Cross-validation: evaluating estimator performance", "<span class=\"section-number\">2.5. </span>Decomposing signals in components (matrix factorization problems)", "<span class=\"section-number\">2.8. </span>Density Estimation", "<span class=\"section-number\">1.11. </span>Ensembles: Gradient boosting, random forests, bagging, voting, stacking", "<span class=\"section-number\">6.2. </span>Feature extraction", "<span class=\"section-number\">1.13. </span>Feature selection", "<span class=\"section-number\">1.7. </span>Gaussian Processes", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.dbscan", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.fastica", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.oas", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.BaseEstimator", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.BiclusterMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.ClassNamePrefixFeaturesOutMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.ClassifierMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.ClusterMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.DensityMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.MetaEstimatorMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.OneToOneFeatureMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.OutlierMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.RegressorMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.TransformerMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.clone", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.is_classifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.is_regressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.calibration</span></code>.CalibratedClassifierCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.calibration</span></code>.CalibrationDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.calibration</span></code>.calibration_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.AffinityPropagation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.AgglomerativeClustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.Birch", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.BisectingKMeans", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.DBSCAN", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.FeatureAgglomeration", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.HDBSCAN", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.KMeans", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.MeanShift", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.MiniBatchKMeans", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.OPTICS", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.SpectralBiclustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.SpectralClustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.SpectralCoclustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.affinity_propagation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.cluster_optics_dbscan", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.cluster_optics_xi", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.compute_optics_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.estimate_bandwidth", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.k_means", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.kmeans_plusplus", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.mean_shift", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.spectral_clustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.ward_tree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.compose</span></code>.ColumnTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.compose</span></code>.TransformedTargetRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.compose</span></code>.make_column_selector", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.compose</span></code>.make_column_transformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn</span></code>.config_context", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.EllipticEnvelope", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.EmpiricalCovariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.GraphicalLasso", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.GraphicalLassoCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.LedoitWolf", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.MinCovDet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.OAS", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.ShrunkCovariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.empirical_covariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.graphical_lasso", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.ledoit_wolf", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.ledoit_wolf_shrinkage", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.shrunk_covariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cross_decomposition</span></code>.CCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cross_decomposition</span></code>.PLSCanonical", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cross_decomposition</span></code>.PLSRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cross_decomposition</span></code>.PLSSVD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.clear_data_home", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.dump_svmlight_file", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_20newsgroups", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_20newsgroups_vectorized", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_california_housing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_covtype", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_kddcup99", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_lfw_pairs", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_lfw_people", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_olivetti_faces", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_openml", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_rcv1", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_species_distributions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.get_data_home", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_breast_cancer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_diabetes", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_digits", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_files", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_iris", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_linnerud", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_sample_image", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_sample_images", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_svmlight_file", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_svmlight_files", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_wine", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_biclusters", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_blobs", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_checkerboard", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_circles", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_classification", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_friedman1", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_friedman2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_friedman3", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_gaussian_quantiles", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_hastie_10_2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_low_rank_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_moons", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_multilabel_classification", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_s_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_sparse_coded_signal", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_sparse_spd_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_sparse_uncorrelated", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_spd_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_swiss_roll", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.DictionaryLearning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.FactorAnalysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.FastICA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.IncrementalPCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.KernelPCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.LatentDirichletAllocation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.MiniBatchDictionaryLearning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.MiniBatchNMF", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.MiniBatchSparsePCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.NMF", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.PCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.SparseCoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.SparsePCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.TruncatedSVD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.dict_learning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.dict_learning_online", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.non_negative_factorization", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.sparse_encode", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.discriminant_analysis</span></code>.LinearDiscriminantAnalysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.discriminant_analysis</span></code>.QuadraticDiscriminantAnalysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.dummy</span></code>.DummyClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.dummy</span></code>.DummyRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.AdaBoostClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.AdaBoostRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.BaggingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.BaggingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.ExtraTreesClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.ExtraTreesRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.GradientBoostingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.GradientBoostingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.HistGradientBoostingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.HistGradientBoostingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.IsolationForest", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.RandomForestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.RandomForestRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.RandomTreesEmbedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.StackingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.StackingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.VotingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.VotingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.ConvergenceWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.DataConversionWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.DataDimensionalityWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.EfficiencyWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.FitFailedWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.InconsistentVersionWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.NotFittedError", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.UndefinedMetricWarning", "sklearn.experimental.enable_halving_search_cv", "sklearn.experimental.enable_iterative_imputer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction</span></code>.DictVectorizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction</span></code>.FeatureHasher", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.PatchExtractor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.extract_patches_2d", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.grid_to_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.img_to_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.reconstruct_from_patches_2d", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.text</span></code>.CountVectorizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.text</span></code>.HashingVectorizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.text</span></code>.TfidfTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.text</span></code>.TfidfVectorizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.GenericUnivariateSelect", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.RFE", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.RFECV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectFdr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectFpr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectFromModel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectFwe", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectKBest", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectPercentile", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectorMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SequentialFeatureSelector", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.VarianceThreshold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.chi2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.f_classif", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.f_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.mutual_info_classif", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.mutual_info_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.r_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process</span></code>.GaussianProcessClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process</span></code>.GaussianProcessRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.CompoundKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.ConstantKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.DotProduct", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.ExpSineSquared", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Exponentiation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Hyperparameter", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Matern", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.PairwiseKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Product", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.RBF", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.RationalQuadratic", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Sum", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.WhiteKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn</span></code>.get_config", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.impute</span></code>.IterativeImputer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.impute</span></code>.KNNImputer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.impute</span></code>.MissingIndicator", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.impute</span></code>.SimpleImputer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.inspection</span></code>.DecisionBoundaryDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.inspection</span></code>.PartialDependenceDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.inspection</span></code>.partial_dependence", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.inspection</span></code>.permutation_importance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.isotonic</span></code>.IsotonicRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.isotonic</span></code>.check_increasing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.isotonic</span></code>.isotonic_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.AdditiveChi2Sampler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.Nystroem", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.PolynomialCountSketch", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.RBFSampler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.SkewedChi2Sampler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_ridge</span></code>.KernelRidge", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.ARDRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.BayesianRidge", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.ElasticNet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.ElasticNetCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.GammaRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.HuberRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.Lars", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LarsCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.Lasso", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LassoCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LassoLars", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LassoLarsCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LassoLarsIC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LinearRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LogisticRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LogisticRegressionCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.MultiTaskElasticNet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.MultiTaskElasticNetCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.MultiTaskLasso", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.MultiTaskLassoCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.OrthogonalMatchingPursuit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.OrthogonalMatchingPursuitCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.PassiveAggressiveClassifier", "sklearn.linear_model.PassiveAggressiveRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.Perceptron", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.PoissonRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.QuantileRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.RANSACRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.Ridge", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.RidgeCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.RidgeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.RidgeClassifierCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.SGDClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.SGDOneClassSVM", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.SGDRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.TheilSenRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.TweedieRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.enet_path", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.lars_path", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.lars_path_gram", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.lasso_path", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.orthogonal_mp", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.orthogonal_mp_gram", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.ridge_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.Isomap", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.LocallyLinearEmbedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.MDS", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.SpectralEmbedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.TSNE", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.locally_linear_embedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.smacof", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.spectral_embedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.trustworthiness", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.ConfusionMatrixDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.DetCurveDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.DistanceMetric", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.PrecisionRecallDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.PredictionErrorDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.RocCurveDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.accuracy_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.adjusted_mutual_info_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.adjusted_rand_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.auc", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.average_precision_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.balanced_accuracy_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.brier_score_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.calinski_harabasz_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.check_scoring", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.class_likelihood_ratios", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.classification_report", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.cluster</span></code>.contingency_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.cluster</span></code>.pair_confusion_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.cohen_kappa_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.completeness_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.confusion_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.consensus_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.coverage_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.d2_absolute_error_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.d2_pinball_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.d2_tweedie_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.davies_bouldin_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.dcg_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.det_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.explained_variance_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.f1_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.fbeta_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.fowlkes_mallows_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.get_scorer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.get_scorer_names", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.hamming_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.hinge_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.homogeneity_completeness_v_measure", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.homogeneity_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.jaccard_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.label_ranking_average_precision_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.label_ranking_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.log_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.make_scorer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.matthews_corrcoef", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.max_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_absolute_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_absolute_percentage_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_gamma_deviance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_pinball_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_poisson_deviance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_squared_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_squared_log_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_tweedie_deviance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.median_absolute_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.multilabel_confusion_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mutual_info_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.ndcg_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.normalized_mutual_info_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.additive_chi2_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.chi2_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.cosine_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.cosine_similarity", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.distance_metrics", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.euclidean_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.haversine_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.kernel_metrics", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.laplacian_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.linear_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.manhattan_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.nan_euclidean_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.paired_cosine_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.paired_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.paired_euclidean_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.paired_manhattan_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.pairwise_kernels", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.polynomial_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.rbf_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.sigmoid_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.pairwise_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.pairwise_distances_argmin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.pairwise_distances_argmin_min", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.pairwise_distances_chunked", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.precision_recall_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.precision_recall_fscore_support", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.precision_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.r2_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.rand_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.recall_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.roc_auc_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.roc_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.root_mean_squared_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.root_mean_squared_log_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.silhouette_samples", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.silhouette_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.top_k_accuracy_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.v_measure_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.zero_one_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.mixture</span></code>.BayesianGaussianMixture", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.mixture</span></code>.GaussianMixture", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.GridSearchCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.GroupKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.GroupShuffleSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.HalvingGridSearchCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.HalvingRandomSearchCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.KFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LearningCurveDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LeaveOneGroupOut", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LeaveOneOut", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LeavePGroupsOut", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LeavePOut", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.ParameterGrid", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.ParameterSampler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.PredefinedSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.RandomizedSearchCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.RepeatedKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.RepeatedStratifiedKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.ShuffleSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.StratifiedGroupKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.StratifiedKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.StratifiedShuffleSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.TimeSeriesSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.ValidationCurveDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.check_cv", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.cross_val_predict", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.cross_val_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.cross_validate", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.learning_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.permutation_test_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.train_test_split", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.validation_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multiclass</span></code>.OneVsOneClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multiclass</span></code>.OneVsRestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multiclass</span></code>.OutputCodeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multioutput</span></code>.ClassifierChain", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multioutput</span></code>.MultiOutputClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multioutput</span></code>.MultiOutputRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multioutput</span></code>.RegressorChain", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.BernoulliNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.CategoricalNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.ComplementNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.GaussianNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.MultinomialNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.BallTree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KDTree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KNeighborsClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KNeighborsRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KNeighborsTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KernelDensity", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.LocalOutlierFactor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.NearestCentroid", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.NearestNeighbors", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.NeighborhoodComponentsAnalysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.RadiusNeighborsClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.RadiusNeighborsRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.RadiusNeighborsTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.kneighbors_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.radius_neighbors_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.sort_graph_by_row_values", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neural_network</span></code>.BernoulliRBM", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neural_network</span></code>.MLPClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neural_network</span></code>.MLPRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.pipeline</span></code>.FeatureUnion", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.pipeline</span></code>.Pipeline", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.pipeline</span></code>.make_pipeline", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.pipeline</span></code>.make_union", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.Binarizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.FunctionTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.KBinsDiscretizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.KernelCenterer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.LabelBinarizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.LabelEncoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.MaxAbsScaler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.MinMaxScaler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.MultiLabelBinarizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.Normalizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.OneHotEncoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.OrdinalEncoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.PolynomialFeatures", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.PowerTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.QuantileTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.RobustScaler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.SplineTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.StandardScaler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.TargetEncoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.add_dummy_feature", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.binarize", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.label_binarize", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.maxabs_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.minmax_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.normalize", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.power_transform", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.quantile_transform", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.robust_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.random_projection</span></code>.GaussianRandomProjection", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.random_projection</span></code>.SparseRandomProjection", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.random_projection</span></code>.johnson_lindenstrauss_min_dim", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.semi_supervised</span></code>.LabelPropagation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.semi_supervised</span></code>.LabelSpreading", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.semi_supervised</span></code>.SelfTrainingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn</span></code>.set_config", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn</span></code>.show_versions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.LinearSVC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.LinearSVR", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.NuSVC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.NuSVR", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.OneClassSVM", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.SVC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.SVR", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.l1_min_c", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.DecisionTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.DecisionTreeRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.ExtraTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.ExtraTreeRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.export_graphviz", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.export_text", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.plot_tree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.Bunch", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>._safe_indexing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.arrayfuncs</span></code>.min_pos", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.as_float_array", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.assert_all_finite", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_X_y", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_array", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_consistent_length", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_random_state", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_scalar", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.class_weight</span></code>.compute_class_weight", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.class_weight</span></code>.compute_sample_weight", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.deprecated", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.discovery</span></code>.all_displays", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.discovery</span></code>.all_estimators", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.discovery</span></code>.all_functions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.estimator_checks</span></code>.check_estimator", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.estimator_checks</span></code>.parametrize_with_checks", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.estimator_html_repr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.density", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.fast_logdet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.randomized_range_finder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.randomized_svd", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.safe_sparse_dot", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.weighted_mode", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.gen_batches", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.gen_even_slices", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.graph</span></code>.single_source_shortest_path_length", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.indexable", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metadata_routing</span></code>.MetadataRequest", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metadata_routing</span></code>.MetadataRouter", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metadata_routing</span></code>.MethodMapping", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metadata_routing</span></code>.get_routing_for_object", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metadata_routing</span></code>.process_routing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metaestimators</span></code>.available_if", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.multiclass</span></code>.is_multilabel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.multiclass</span></code>.type_of_target", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.multiclass</span></code>.unique_labels", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.murmurhash3_32", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.parallel</span></code>.Parallel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.parallel</span></code>.delayed", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.parallel_backend", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.random</span></code>.sample_without_replacement", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.register_parallel_backend", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.resample", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.safe_mask", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.safe_sqr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.shuffle", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.incr_mean_variance_axis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_column_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_csr_column_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_row_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_swap_column", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_swap_row", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.mean_variance_axis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs_fast</span></code>.inplace_csr_row_normalize_l1", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs_fast</span></code>.inplace_csr_row_normalize_l2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.check_is_fitted", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.check_memory", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.check_symmetric", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.column_or_1d", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.has_fit_parameter", "<span class=\"section-number\">3.2. </span>Tuning the hyper-parameters of an estimator", "<span class=\"section-number\">6.4. </span>Imputation of missing values", "<span class=\"section-number\">1.15. </span>Isotonic regression", "<span class=\"section-number\">6.7. </span>Kernel Approximation", "<span class=\"section-number\">1.3. </span>Kernel ridge regression", "<span class=\"section-number\">1.2. </span>Linear and Quadratic Discriminant Analysis", "<span class=\"section-number\">3.4. </span>Validation curves: plotting scores to evaluate models", "<span class=\"section-number\">1.1. </span>Linear Models", "<span class=\"section-number\">2.2. </span>Manifold learning", "<span class=\"section-number\">6.8. </span>Pairwise metrics, Affinities and Kernels", "<span class=\"section-number\">2.1. </span>Gaussian mixture models", "<span class=\"section-number\">3.3. </span>Metrics and scoring: quantifying the quality of predictions", "<span class=\"section-number\">1.12. </span>Multiclass and multioutput algorithms", "<span class=\"section-number\">1.9. </span>Naive Bayes", "<span class=\"section-number\">1.6. </span>Nearest Neighbors", "<span class=\"section-number\">1.17. </span>Neural network models (supervised)", "<span class=\"section-number\">2.9. </span>Neural network models (unsupervised)", "<span class=\"section-number\">2.7. </span>Novelty and Outlier Detection", "<span class=\"section-number\">4.1. </span>Partial Dependence and Individual Conditional Expectation plots", "<span class=\"section-number\">4.2. </span>Permutation feature importance", "&lt;no title&gt;", "<span class=\"section-number\">6.3. </span>Preprocessing data", "<span class=\"section-number\">6.9. </span>Transforming the prediction target (<code class=\"docutils literal notranslate\"><span class=\"pre\">y</span></code>)", "<span class=\"section-number\">6.6. </span>Random Projection", "<span class=\"section-number\">1.14. </span>Semi-supervised learning", "<span class=\"section-number\">1.5. </span>Stochastic Gradient Descent", "<span class=\"section-number\">1.4. </span>Support Vector Machines", "<span class=\"section-number\">1.10. </span>Decision Trees", "<span class=\"section-number\">6.5. </span>Unsupervised dimensionality reduction", "External Resources, Videos and Talks", "Related Projects", "Roadmap", "Computation times", "<span class=\"section-number\">1. </span>Supervised learning", "Support", "Who is using scikit-learn?", "An introduction to machine learning with scikit-learn", "scikit-learn Tutorials", "Choosing the right estimator", "A tutorial on statistical-learning for scientific data processing", "Model selection: choosing estimators and their parameters", "Putting it all together", "Statistical learning: the setting and the estimator object in scikit-learn", "Supervised learning: predicting an output variable from high-dimensional observations", "Unsupervised learning: seeking representations of the data", "Working With Text Data", "<span class=\"section-number\">2. </span>Unsupervised learning", "User Guide", "<span class=\"section-number\">5. </span>Visualizations", "Release History", "&lt;no title&gt;", "Older Versions", "Version 0.13", "Version 0.14", "Version 0.15", "Version 0.16", "Version 0.17", "Version 0.18", "Version 0.19", "Version 0.20", "Version 0.21", "Version 0.22", "Version 0.23", "Version 0.24", "Version 1.0", "Version 1.1", "Version 1.2", "Version 1.3", "Version 1.4", "Version 1.5"], "terms": {"click": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "more": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "detail": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "thi": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 168, 169, 170, 171, 172, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360, 362, 366, 367, 368, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 391, 392, 393, 394, 396, 397, 398, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 480, 481, 482, 483, 485, 487, 488, 491, 494, 495, 496, 497, 499, 500, 501, 503, 506, 507, 513, 514, 515, 516, 517, 518, 519, 521, 522, 524, 525, 526, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 573, 575, 577, 578, 579, 580, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 630, 631, 632, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 697, 698, 699, 700, 701, 702, 704, 705, 707, 710, 711, 712, 714, 715, 716, 718, 719, 720, 721, 723, 724, 725, 726, 727, 729, 733, 734, 735, 736, 737, 738, 739, 740, 745, 751, 752, 753, 754, 755, 756, 758, 759, 760, 762, 765, 766, 771, 775, 776, 777, 778, 779, 780, 781, 782, 784, 785, 786, 789, 790, 791, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 894, 895, 896, 897, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 914, 915, 919, 920, 925, 926, 928, 930, 931, 936, 938, 943, 944, 945, 946, 947, 948, 950, 953, 954, 955, 957, 958, 961, 962, 971, 976, 977, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1010, 1011, 1012, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1024, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "wa": [0, 4, 8, 14, 17, 41, 71, 72, 81, 87, 93, 129, 132, 148, 160, 169, 175, 203, 224, 238, 251, 254, 256, 258, 260, 266, 267, 278, 301, 310, 315, 316, 320, 327, 328, 351, 353, 360, 362, 366, 374, 376, 377, 379, 383, 384, 393, 397, 398, 401, 403, 404, 407, 410, 411, 415, 419, 431, 438, 439, 440, 441, 443, 444, 445, 447, 448, 452, 455, 458, 462, 466, 467, 472, 480, 481, 482, 483, 513, 521, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 551, 552, 553, 554, 555, 556, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 625, 626, 627, 628, 633, 636, 637, 638, 639, 640, 662, 674, 675, 683, 684, 686, 687, 690, 711, 726, 727, 780, 781, 784, 794, 795, 796, 799, 800, 810, 822, 824, 836, 843, 846, 848, 851, 855, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 891, 892, 896, 897, 930, 931, 954, 975, 976, 977, 986, 987, 990, 993, 997, 1000, 1003, 1006, 1012, 1020, 1021, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "start": [0, 4, 7, 10, 12, 13, 21, 27, 54, 59, 65, 68, 75, 87, 99, 117, 123, 125, 145, 148, 156, 158, 170, 175, 179, 180, 188, 199, 200, 201, 207, 217, 220, 224, 233, 235, 248, 260, 268, 283, 319, 321, 326, 351, 360, 362, 366, 367, 368, 372, 379, 380, 381, 383, 384, 385, 391, 393, 397, 404, 407, 411, 412, 416, 417, 438, 440, 448, 452, 454, 536, 608, 615, 630, 643, 651, 657, 664, 665, 666, 674, 675, 676, 688, 692, 778, 779, 786, 794, 795, 796, 799, 800, 810, 841, 842, 843, 845, 847, 855, 941, 971, 976, 983, 986, 991, 992, 1001, 1007, 1011, 1012, 1020, 1021, 1030, 1032, 1035, 1037, 1039, 1040, 1041, 1042, 1043], "2007": [0, 39, 187, 374, 407, 416, 438, 450, 452, 458, 460, 564, 654, 689, 715, 731, 734, 755, 756, 792, 979, 983, 985, 987], "googl": [0, 18, 391, 407, 440, 1005, 1017, 1027], "summer": [0, 4, 13, 49, 1027], "code": [0, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 95, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 166, 168, 169, 170, 171, 172, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360, 362, 366, 367, 373, 377, 378, 380, 382, 383, 388, 391, 393, 394, 397, 398, 401, 403, 406, 407, 414, 415, 440, 441, 445, 447, 457, 494, 524, 528, 529, 535, 536, 540, 541, 543, 544, 546, 564, 570, 579, 580, 583, 584, 644, 645, 648, 649, 650, 651, 652, 653, 654, 658, 659, 660, 661, 662, 663, 680, 681, 683, 684, 827, 828, 829, 866, 873, 955, 984, 988, 997, 999, 1001, 1002, 1006, 1007, 1008, 1010, 1011, 1013, 1021, 1027, 1029, 1030, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "david": [0, 2, 38, 58, 82, 118, 178, 183, 201, 238, 261, 263, 310, 351, 352, 353, 374, 407, 414, 417, 460, 530, 534, 565, 566, 620, 621, 626, 722, 794, 896, 977, 983, 991, 1000, 1011, 1027, 1030, 1031, 1032, 1033, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "cournapeau": [0, 2, 1027, 1030], "later": [0, 11, 54, 112, 117, 126, 151, 170, 175, 178, 238, 278, 296, 353, 362, 385, 391, 392, 397, 401, 845, 868, 869, 877, 879, 979, 997, 1016, 1021, 1030, 1033, 1035, 1039], "year": [0, 4, 13, 135, 148, 156, 168, 169, 170, 199, 200, 217, 376, 378, 383, 391, 411, 415, 798, 803, 805, 878, 983, 987, 1007, 1011, 1019], "matthieu": [0, 2, 1027, 1031, 1042], "brucher": [0, 2, 1027], "work": [0, 4, 9, 13, 18, 33, 45, 46, 49, 53, 68, 79, 115, 122, 135, 148, 157, 158, 168, 169, 170, 188, 203, 216, 235, 245, 247, 258, 278, 289, 290, 311, 316, 318, 319, 321, 340, 352, 353, 362, 367, 368, 373, 374, 377, 379, 380, 381, 382, 383, 384, 385, 387, 392, 393, 394, 403, 404, 405, 407, 408, 409, 412, 414, 415, 416, 419, 420, 421, 422, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 455, 458, 462, 463, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 480, 481, 482, 483, 502, 506, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 686, 687, 688, 689, 690, 693, 706, 739, 771, 775, 776, 777, 778, 785, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806, 809, 810, 811, 812, 813, 814, 815, 816, 817, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 882, 884, 885, 886, 887, 888, 889, 890, 891, 892, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 936, 940, 955, 976, 977, 979, 981, 982, 983, 984, 986, 987, 989, 990, 993, 994, 997, 1000, 1001, 1006, 1007, 1011, 1012, 1013, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "part": [0, 5, 6, 13, 32, 37, 52, 62, 69, 72, 83, 96, 99, 115, 118, 120, 121, 125, 130, 138, 139, 140, 145, 156, 166, 178, 235, 237, 248, 255, 257, 274, 299, 307, 310, 312, 353, 368, 374, 376, 379, 381, 385, 387, 392, 393, 397, 403, 405, 407, 411, 412, 414, 415, 417, 444, 447, 491, 492, 493, 519, 529, 535, 540, 572, 582, 583, 584, 611, 623, 790, 864, 882, 884, 885, 886, 887, 888, 889, 890, 976, 977, 979, 984, 988, 1005, 1006, 1007, 1008, 1009, 1011, 1014, 1021, 1023, 1027, 1035, 1036, 1038, 1040, 1042], "hi": [0, 408, 987, 1021], "thesi": [0, 376, 407, 414], "In": [0, 4, 5, 7, 9, 11, 12, 13, 14, 15, 26, 27, 28, 35, 38, 40, 49, 50, 54, 56, 58, 59, 61, 67, 68, 72, 73, 75, 76, 79, 81, 82, 83, 87, 90, 91, 96, 98, 101, 103, 104, 110, 112, 115, 117, 118, 119, 120, 121, 122, 123, 125, 127, 128, 129, 130, 132, 135, 144, 145, 147, 148, 151, 155, 156, 158, 159, 160, 163, 164, 168, 169, 170, 171, 172, 175, 178, 179, 180, 183, 187, 188, 190, 194, 199, 200, 201, 202, 203, 204, 207, 216, 217, 228, 229, 230, 231, 233, 234, 235, 236, 238, 239, 240, 241, 242, 248, 250, 254, 257, 258, 260, 261, 262, 263, 265, 266, 269, 270, 272, 274, 275, 278, 283, 286, 289, 290, 292, 302, 305, 306, 307, 310, 311, 312, 315, 316, 317, 319, 320, 322, 327, 329, 338, 342, 346, 351, 352, 353, 356, 360, 362, 366, 367, 368, 372, 373, 374, 375, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 391, 392, 393, 394, 396, 397, 398, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 424, 435, 438, 439, 440, 441, 442, 445, 446, 447, 450, 460, 461, 462, 467, 470, 473, 491, 494, 501, 506, 507, 509, 521, 532, 534, 536, 538, 539, 540, 542, 545, 546, 547, 548, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 586, 589, 600, 604, 607, 608, 609, 628, 630, 631, 632, 634, 641, 642, 643, 645, 646, 647, 649, 651, 653, 656, 657, 659, 661, 663, 664, 666, 667, 672, 673, 674, 677, 678, 682, 683, 684, 694, 697, 701, 710, 716, 718, 723, 725, 726, 731, 732, 735, 737, 739, 751, 753, 754, 778, 780, 782, 785, 791, 793, 794, 795, 796, 799, 800, 802, 810, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 833, 834, 835, 836, 837, 838, 841, 842, 843, 845, 846, 847, 849, 850, 851, 856, 864, 866, 872, 873, 877, 878, 880, 884, 885, 887, 888, 889, 890, 891, 892, 894, 895, 896, 899, 900, 901, 904, 907, 909, 914, 918, 920, 936, 976, 977, 979, 980, 981, 982, 983, 984, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1007, 1011, 1012, 1019, 1020, 1021, 1024, 1027, 1028, 1030, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "2010": [0, 48, 68, 80, 170, 265, 266, 404, 407, 409, 411, 412, 420, 473, 534, 702, 706, 717, 718, 737, 824, 856, 857, 979, 983, 987, 991, 1001, 1005, 1027], "fabian": [0, 2, 186, 204, 221, 295, 1027, 1028, 1029, 1030, 1031, 1033, 1034, 1036, 1044], "pedregosa": [0, 2, 186, 204, 221, 295, 1027, 1028, 1029, 1030, 1031, 1033], "gael": [0, 1, 12, 33, 40, 41, 47, 53, 54, 67, 68, 83, 98, 188, 189, 221, 233, 247, 1005, 1007, 1011, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "varoquaux": [0, 1, 12, 32, 33, 40, 41, 46, 47, 52, 53, 54, 67, 68, 74, 83, 90, 91, 98, 102, 182, 188, 189, 196, 197, 221, 223, 231, 233, 247, 307, 342, 343, 394, 1005, 1011, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "alexandr": [0, 1, 2, 25, 26, 31, 43, 48, 55, 68, 96, 98, 103, 184, 186, 187, 188, 190, 192, 193, 228, 231, 266, 273, 295, 394, 1011, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044], "gramfort": [0, 1, 25, 26, 31, 43, 48, 55, 68, 96, 98, 103, 184, 186, 187, 188, 190, 192, 193, 228, 231, 266, 273, 295, 394, 1011, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041], "vincent": [0, 2, 48, 68, 154, 158, 1011, 1027, 1029, 1031, 1032, 1034, 1037, 1042, 1043, 1044], "michel": [0, 2, 48, 68, 1027, 1029, 1030, 1032, 1034, 1041, 1042], "inria": [0, 5, 9, 31, 38, 53, 55, 58, 76, 83, 118, 157, 178, 183, 184, 186, 190, 192, 193, 204, 221, 222, 228, 231, 238, 261, 263, 266, 273, 295, 310, 346, 351, 352, 353, 656, 1027], "took": [0, 4, 43, 268], "leadership": 0, "made": [0, 13, 71, 82, 90, 101, 112, 118, 135, 158, 169, 170, 199, 217, 238, 251, 264, 311, 316, 338, 357, 366, 374, 376, 379, 383, 393, 394, 407, 414, 415, 419, 441, 444, 445, 447, 457, 494, 501, 586, 587, 589, 628, 629, 654, 663, 683, 684, 732, 780, 796, 799, 800, 810, 814, 815, 816, 836, 839, 840, 988, 993, 1003, 1006, 1011, 1018, 1020, 1027, 1028, 1029, 1030, 1031, 1034, 1036, 1037, 1040, 1041], "first": [0, 4, 5, 7, 8, 11, 13, 18, 21, 26, 27, 31, 32, 33, 35, 40, 56, 57, 59, 62, 65, 66, 67, 68, 71, 72, 73, 76, 81, 86, 87, 90, 91, 92, 101, 104, 112, 113, 117, 119, 120, 121, 122, 123, 124, 126, 129, 132, 133, 134, 135, 144, 145, 148, 151, 152, 153, 156, 157, 158, 159, 164, 168, 169, 170, 172, 175, 178, 180, 182, 188, 195, 196, 197, 200, 201, 207, 208, 213, 221, 224, 232, 233, 235, 236, 237, 239, 241, 242, 247, 251, 255, 260, 262, 263, 267, 269, 271, 272, 278, 281, 283, 285, 288, 292, 293, 294, 299, 301, 305, 307, 310, 311, 312, 316, 317, 326, 329, 334, 335, 338, 340, 351, 352, 353, 356, 357, 360, 362, 367, 368, 373, 374, 376, 377, 378, 381, 383, 384, 385, 387, 391, 393, 404, 405, 407, 410, 411, 412, 414, 415, 416, 417, 419, 441, 444, 445, 448, 457, 458, 462, 470, 481, 485, 486, 488, 489, 490, 492, 495, 498, 500, 502, 506, 507, 508, 526, 531, 532, 536, 539, 551, 555, 556, 557, 558, 559, 560, 562, 563, 564, 565, 580, 582, 586, 587, 588, 589, 591, 599, 608, 609, 615, 619, 622, 629, 630, 631, 632, 644, 650, 657, 664, 666, 672, 674, 686, 693, 696, 697, 698, 700, 710, 714, 733, 739, 760, 761, 779, 791, 794, 795, 799, 800, 801, 802, 803, 808, 810, 817, 818, 827, 828, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 844, 847, 848, 849, 850, 851, 852, 853, 856, 857, 858, 859, 864, 872, 876, 877, 878, 880, 881, 888, 889, 901, 904, 907, 908, 909, 910, 912, 914, 915, 919, 920, 921, 938, 940, 954, 958, 961, 973, 976, 977, 981, 982, 983, 984, 986, 987, 988, 989, 990, 994, 997, 998, 1001, 1002, 1003, 1011, 1012, 1018, 1019, 1020, 1021, 1027, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044], "public": [0, 80, 373, 379, 381, 383, 384, 391, 392, 393, 394, 411, 414, 466, 662, 669, 683, 684, 690, 897, 983, 991, 1027, 1032, 1033, 1038, 1039, 1040, 1043], "releas": [0, 13, 15, 56, 72, 110, 116, 117, 118, 119, 122, 129, 145, 148, 163, 164, 170, 171, 175, 180, 187, 199, 200, 201, 230, 235, 239, 240, 241, 242, 255, 257, 269, 272, 278, 281, 285, 311, 323, 367, 377, 379, 380, 382, 387, 391, 393, 415, 441, 444, 445, 462, 465, 488, 489, 494, 499, 500, 502, 510, 513, 519, 522, 536, 539, 559, 560, 562, 563, 565, 597, 600, 626, 628, 630, 632, 638, 644, 646, 650, 656, 667, 678, 686, 699, 700, 715, 729, 745, 785, 792, 796, 797, 799, 800, 802, 810, 818, 821, 822, 825, 841, 843, 860, 864, 869, 872, 873, 874, 878, 879, 880, 896, 897, 899, 904, 907, 908, 931, 955, 1003, 1008, 1027, 1028, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "februari": [0, 409, 471, 987, 1028, 1032], "1st": [0, 4, 61, 91, 159, 200, 310, 877, 878], "sinc": [0, 4, 5, 11, 13, 26, 28, 35, 38, 50, 54, 56, 67, 71, 72, 73, 97, 122, 138, 145, 148, 151, 156, 169, 170, 172, 175, 181, 199, 201, 203, 216, 229, 233, 234, 235, 247, 250, 256, 260, 262, 263, 269, 270, 278, 281, 283, 285, 286, 311, 318, 319, 330, 335, 338, 346, 351, 352, 353, 362, 367, 374, 377, 379, 380, 381, 383, 384, 387, 391, 392, 393, 397, 398, 405, 407, 408, 409, 410, 411, 412, 414, 415, 417, 424, 435, 439, 443, 444, 445, 447, 448, 451, 454, 467, 476, 494, 524, 525, 534, 535, 536, 537, 538, 544, 545, 547, 548, 549, 550, 551, 553, 555, 557, 559, 560, 561, 562, 565, 567, 586, 587, 589, 608, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 630, 631, 636, 642, 643, 649, 653, 656, 657, 664, 666, 672, 673, 674, 675, 677, 705, 707, 732, 738, 739, 747, 748, 786, 799, 800, 802, 820, 821, 822, 827, 828, 829, 830, 834, 835, 836, 837, 838, 841, 846, 849, 856, 857, 864, 889, 890, 894, 895, 899, 901, 904, 907, 909, 936, 944, 976, 979, 980, 981, 983, 984, 988, 989, 990, 991, 993, 995, 997, 1001, 1002, 1003, 1011, 1012, 1021, 1027, 1028, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "sever": [0, 4, 9, 12, 13, 26, 32, 35, 38, 56, 57, 58, 62, 75, 92, 115, 130, 132, 135, 145, 148, 151, 156, 157, 166, 169, 175, 183, 188, 199, 203, 219, 220, 223, 224, 225, 226, 232, 247, 255, 260, 265, 283, 285, 300, 305, 318, 346, 351, 352, 366, 373, 374, 376, 379, 381, 384, 391, 393, 404, 406, 407, 408, 411, 413, 414, 415, 417, 445, 447, 462, 485, 497, 506, 507, 536, 553, 554, 557, 558, 561, 562, 563, 568, 586, 587, 589, 608, 643, 644, 650, 686, 687, 688, 689, 690, 691, 794, 795, 796, 799, 800, 810, 827, 828, 834, 835, 836, 837, 838, 858, 859, 866, 883, 907, 908, 909, 910, 922, 976, 979, 984, 987, 988, 990, 995, 997, 1001, 1003, 1004, 1005, 1006, 1008, 1011, 1012, 1019, 1020, 1021, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1040, 1043, 1044], "have": [0, 4, 5, 7, 8, 9, 11, 12, 13, 14, 25, 26, 27, 28, 38, 40, 43, 44, 47, 48, 51, 54, 56, 58, 61, 63, 65, 66, 71, 72, 79, 81, 87, 90, 92, 93, 101, 102, 112, 119, 121, 122, 123, 125, 144, 145, 148, 151, 152, 156, 157, 158, 164, 168, 169, 170, 171, 172, 175, 178, 183, 199, 200, 201, 203, 217, 224, 228, 230, 235, 236, 238, 239, 246, 247, 248, 250, 254, 260, 261, 263, 266, 267, 274, 278, 283, 285, 286, 289, 290, 305, 310, 311, 312, 315, 317, 318, 322, 326, 327, 328, 335, 341, 342, 343, 346, 351, 352, 360, 362, 366, 367, 368, 373, 374, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 391, 392, 393, 394, 397, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 432, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 462, 463, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 485, 490, 492, 493, 494, 506, 507, 512, 521, 522, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 579, 580, 581, 582, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 630, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 683, 685, 686, 687, 688, 689, 690, 697, 702, 703, 710, 713, 718, 723, 728, 733, 739, 753, 754, 755, 756, 779, 782, 783, 789, 792, 794, 795, 796, 799, 800, 801, 802, 807, 810, 814, 818, 820, 823, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 884, 885, 887, 888, 889, 890, 891, 892, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 919, 921, 923, 925, 936, 962, 976, 977, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 993, 994, 997, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1011, 1012, 1013, 1016, 1017, 1019, 1020, 1021, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "appear": [0, 8, 47, 49, 115, 169, 172, 255, 257, 258, 289, 290, 299, 301, 306, 326, 342, 351, 352, 353, 374, 377, 379, 384, 393, 409, 412, 486, 487, 553, 565, 566, 577, 608, 625, 626, 628, 695, 698, 700, 710, 714, 716, 779, 786, 797, 814, 834, 835, 836, 837, 838, 901, 904, 938, 983, 989, 993, 1027, 1035, 1039, 1040], "follow": [0, 4, 7, 20, 27, 33, 38, 46, 55, 56, 58, 64, 68, 72, 73, 93, 96, 105, 112, 115, 125, 129, 143, 156, 163, 168, 169, 170, 171, 172, 178, 180, 183, 187, 188, 197, 199, 200, 214, 217, 229, 235, 236, 238, 251, 260, 267, 269, 270, 278, 305, 311, 312, 315, 316, 318, 319, 320, 335, 346, 351, 352, 353, 356, 360, 362, 366, 367, 373, 374, 376, 377, 378, 379, 381, 383, 384, 385, 386, 387, 388, 391, 392, 393, 394, 397, 398, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 422, 424, 426, 427, 428, 429, 430, 431, 439, 441, 443, 444, 445, 446, 447, 451, 459, 461, 462, 463, 466, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 513, 532, 536, 538, 539, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 568, 579, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 625, 626, 627, 628, 629, 631, 632, 644, 650, 656, 657, 668, 669, 678, 690, 692, 697, 703, 707, 711, 716, 785, 815, 836, 841, 842, 843, 845, 847, 849, 850, 851, 858, 862, 863, 864, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 888, 897, 899, 900, 904, 907, 908, 909, 910, 914, 915, 935, 955, 976, 977, 978, 979, 980, 981, 982, 983, 985, 986, 987, 989, 990, 991, 992, 993, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1010, 1012, 1021, 1024, 1027, 1030, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "3": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 23, 24, 25, 26, 28, 29, 31, 32, 33, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 74, 75, 76, 79, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 110, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 138, 141, 143, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 166, 169, 170, 171, 175, 177, 178, 179, 180, 181, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 225, 228, 232, 233, 234, 235, 236, 238, 240, 242, 245, 246, 247, 249, 250, 251, 255, 258, 259, 260, 261, 262, 263, 264, 266, 268, 269, 270, 271, 272, 273, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 320, 322, 323, 325, 326, 328, 329, 330, 334, 335, 337, 338, 341, 342, 343, 344, 345, 346, 347, 351, 352, 353, 354, 357, 358, 360, 362, 367, 368, 373, 374, 376, 377, 379, 380, 381, 384, 385, 391, 392, 393, 397, 399, 400, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 428, 429, 430, 431, 432, 435, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 479, 480, 481, 482, 483, 491, 492, 494, 495, 496, 499, 500, 502, 503, 504, 505, 508, 510, 513, 514, 515, 516, 517, 519, 521, 523, 524, 526, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 575, 579, 580, 581, 582, 585, 586, 588, 589, 591, 592, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 615, 616, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 685, 686, 687, 688, 690, 691, 692, 694, 697, 698, 700, 701, 702, 703, 705, 707, 708, 711, 714, 715, 719, 720, 721, 722, 723, 725, 726, 727, 728, 730, 731, 732, 733, 734, 738, 740, 741, 742, 743, 745, 747, 748, 749, 750, 751, 753, 754, 765, 766, 772, 778, 779, 780, 781, 782, 783, 784, 785, 787, 788, 789, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 862, 863, 864, 865, 866, 870, 871, 872, 873, 874, 875, 877, 878, 879, 880, 887, 891, 892, 893, 894, 895, 896, 897, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 919, 920, 921, 925, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 950, 951, 953, 954, 955, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 971, 976, 977, 980, 981, 982, 983, 984, 985, 987, 988, 989, 990, 993, 994, 997, 998, 1000, 1002, 1003, 1005, 1006, 1008, 1012, 1013, 1016, 1017, 1019, 1020, 1025, 1027, 1028, 1029, 1030, 1032, 1033, 1034, 1037, 1039, 1040, 1042, 1044], "month": [0, 4, 13, 156, 170, 311, 374, 379, 383, 394, 1027], "cycl": [0, 4, 43, 45, 51, 63, 96, 184, 246, 251, 267, 269, 318, 319, 379, 383, 398, 406, 412, 577, 578, 625, 799, 800, 915, 976, 977, 1035, 1036, 1037, 1039, 1040, 1041, 1042], "thrive": [0, 379], "intern": [0, 4, 27, 72, 83, 101, 118, 123, 126, 138, 148, 152, 163, 166, 181, 199, 283, 285, 304, 311, 313, 327, 353, 362, 367, 374, 376, 381, 385, 388, 391, 393, 398, 401, 403, 404, 407, 411, 412, 414, 415, 416, 417, 418, 435, 437, 442, 463, 466, 509, 532, 533, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 591, 592, 608, 609, 636, 638, 641, 644, 650, 666, 670, 674, 676, 694, 706, 728, 731, 755, 756, 780, 825, 839, 840, 855, 856, 857, 859, 860, 864, 878, 880, 894, 895, 897, 899, 900, 901, 904, 907, 908, 909, 910, 955, 983, 984, 985, 987, 990, 993, 997, 999, 1002, 1003, 1008, 1011, 1027, 1030, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "ha": [0, 4, 5, 8, 11, 12, 13, 17, 26, 31, 35, 38, 45, 51, 56, 57, 58, 61, 75, 81, 82, 87, 96, 110, 117, 121, 123, 125, 129, 134, 147, 151, 156, 157, 158, 164, 169, 170, 171, 172, 175, 192, 196, 199, 200, 201, 205, 216, 217, 220, 228, 232, 234, 235, 238, 239, 242, 245, 246, 248, 250, 251, 255, 258, 259, 260, 263, 264, 266, 271, 272, 281, 286, 289, 290, 291, 293, 301, 305, 306, 308, 310, 315, 316, 317, 318, 319, 321, 325, 328, 338, 342, 343, 345, 351, 360, 362, 366, 367, 368, 373, 374, 376, 377, 378, 379, 380, 381, 383, 384, 387, 388, 391, 392, 393, 394, 397, 398, 401, 404, 405, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 419, 432, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 459, 460, 461, 462, 463, 467, 468, 469, 470, 471, 472, 473, 474, 476, 480, 481, 482, 483, 491, 492, 495, 496, 506, 507, 514, 524, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 608, 609, 617, 625, 626, 627, 628, 630, 631, 632, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 683, 685, 686, 687, 688, 689, 690, 693, 709, 711, 718, 738, 760, 771, 775, 776, 777, 790, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 810, 814, 817, 818, 823, 824, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 859, 862, 863, 864, 865, 866, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 891, 892, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 914, 918, 919, 920, 938, 956, 972, 976, 977, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 997, 999, 1000, 1001, 1002, 1003, 1007, 1011, 1012, 1016, 1019, 1021, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "been": [0, 4, 9, 17, 27, 45, 54, 61, 82, 101, 110, 112, 148, 151, 156, 158, 169, 224, 228, 230, 235, 236, 258, 260, 266, 315, 316, 317, 318, 319, 321, 322, 327, 351, 362, 367, 373, 374, 376, 377, 378, 379, 381, 383, 385, 387, 388, 391, 392, 393, 394, 398, 401, 404, 405, 407, 409, 411, 412, 414, 417, 432, 435, 467, 469, 470, 472, 476, 485, 521, 532, 534, 547, 548, 565, 566, 579, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 609, 631, 632, 656, 657, 664, 665, 666, 671, 673, 674, 675, 676, 718, 775, 776, 777, 790, 796, 799, 800, 802, 810, 818, 823, 824, 848, 896, 899, 977, 979, 980, 982, 983, 984, 987, 988, 990, 993, 997, 999, 1001, 1002, 1007, 1011, 1012, 1021, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "lead": [0, 7, 26, 32, 38, 53, 56, 62, 73, 118, 122, 123, 125, 147, 148, 169, 170, 171, 178, 183, 188, 190, 199, 203, 233, 235, 238, 260, 261, 263, 267, 288, 289, 301, 305, 307, 310, 311, 317, 338, 346, 352, 356, 362, 366, 367, 373, 378, 387, 388, 392, 393, 401, 404, 405, 407, 409, 411, 412, 413, 414, 416, 450, 460, 463, 466, 494, 513, 525, 533, 536, 537, 538, 541, 545, 549, 555, 556, 557, 558, 561, 562, 563, 564, 604, 628, 644, 645, 648, 650, 651, 652, 658, 659, 660, 661, 677, 689, 693, 743, 794, 799, 800, 827, 839, 840, 844, 863, 870, 880, 891, 892, 897, 899, 907, 908, 909, 910, 976, 981, 983, 984, 986, 987, 988, 990, 991, 993, 995, 997, 1000, 1001, 1003, 1011, 1012, 1030, 1032, 1034, 1035, 1036, 1037, 1039, 1040, 1042, 1043, 1044], "The": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 27, 31, 32, 33, 35, 38, 40, 41, 45, 46, 47, 48, 49, 51, 52, 53, 54, 56, 58, 59, 61, 62, 63, 64, 66, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 89, 92, 93, 94, 96, 99, 100, 101, 102, 103, 104, 105, 106, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 135, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 166, 170, 171, 172, 175, 178, 180, 181, 182, 183, 184, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 205, 207, 208, 216, 217, 219, 220, 222, 223, 226, 227, 228, 229, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 247, 248, 250, 251, 254, 255, 257, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 335, 336, 338, 342, 343, 344, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360, 362, 366, 367, 371, 372, 373, 375, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 391, 392, 393, 394, 396, 397, 398, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 429, 430, 432, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 707, 708, 709, 710, 711, 713, 714, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 732, 735, 736, 737, 738, 739, 740, 741, 742, 743, 745, 749, 750, 751, 752, 753, 754, 755, 756, 759, 761, 762, 763, 764, 767, 768, 771, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 920, 922, 923, 924, 925, 926, 930, 931, 932, 933, 934, 935, 936, 938, 939, 943, 944, 947, 950, 952, 953, 954, 955, 956, 957, 958, 961, 971, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 988, 989, 990, 991, 992, 993, 994, 995, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1021, 1023, 1024, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "decis": [0, 4, 17, 26, 28, 32, 35, 42, 57, 59, 61, 91, 100, 111, 114, 115, 116, 117, 123, 130, 131, 132, 134, 135, 136, 140, 148, 153, 155, 159, 169, 181, 182, 191, 208, 209, 212, 228, 229, 231, 236, 239, 263, 266, 278, 291, 294, 299, 305, 306, 307, 310, 324, 329, 331, 334, 335, 336, 337, 338, 339, 340, 341, 344, 347, 348, 351, 361, 366, 375, 376, 379, 393, 405, 407, 414, 435, 467, 498, 502, 517, 534, 547, 548, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 591, 592, 629, 630, 631, 642, 643, 644, 645, 648, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 669, 670, 671, 672, 673, 674, 675, 696, 698, 700, 701, 705, 718, 723, 724, 732, 736, 737, 739, 753, 779, 785, 786, 791, 796, 799, 800, 810, 825, 827, 828, 830, 841, 895, 896, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 981, 987, 988, 989, 990, 991, 993, 994, 995, 1000, 1001, 1002, 1006, 1007, 1008, 1009, 1011, 1019, 1023, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1036, 1037, 1040, 1041, 1043, 1044], "make": [0, 4, 7, 8, 11, 13, 15, 18, 21, 22, 26, 27, 28, 40, 41, 44, 45, 57, 62, 63, 68, 74, 101, 112, 118, 122, 125, 130, 145, 148, 151, 156, 159, 168, 169, 170, 171, 178, 183, 185, 188, 191, 192, 193, 195, 199, 200, 201, 203, 205, 217, 221, 230, 232, 234, 235, 236, 238, 245, 247, 250, 251, 255, 260, 262, 263, 269, 270, 271, 281, 292, 301, 305, 306, 311, 319, 321, 338, 348, 351, 352, 353, 362, 366, 367, 368, 373, 374, 377, 378, 380, 381, 382, 384, 385, 387, 391, 393, 397, 401, 404, 405, 407, 408, 409, 411, 412, 414, 415, 416, 419, 438, 439, 440, 441, 443, 445, 447, 449, 450, 451, 456, 457, 458, 460, 486, 501, 512, 513, 520, 521, 525, 530, 532, 539, 549, 550, 553, 554, 559, 560, 581, 582, 605, 606, 629, 647, 653, 654, 669, 689, 693, 727, 734, 739, 765, 766, 778, 794, 795, 796, 798, 801, 807, 811, 812, 815, 816, 821, 822, 829, 830, 833, 866, 875, 878, 879, 883, 887, 889, 890, 891, 892, 905, 913, 919, 920, 930, 936, 942, 948, 973, 976, 977, 979, 981, 983, 984, 986, 987, 988, 989, 990, 992, 993, 994, 995, 997, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1011, 1012, 1017, 1019, 1021, 1024, 1027, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044], "process": [0, 4, 5, 17, 20, 27, 31, 32, 35, 46, 47, 48, 49, 51, 58, 67, 71, 73, 75, 80, 82, 92, 97, 98, 100, 112, 121, 123, 125, 129, 130, 138, 139, 140, 161, 168, 178, 181, 201, 203, 209, 210, 211, 212, 234, 235, 236, 238, 245, 246, 249, 251, 260, 262, 263, 272, 278, 299, 305, 308, 312, 317, 321, 326, 330, 342, 343, 344, 352, 353, 356, 366, 367, 368, 374, 378, 379, 381, 383, 385, 388, 391, 392, 393, 401, 407, 408, 409, 411, 412, 413, 414, 415, 416, 420, 446, 447, 473, 494, 502, 521, 532, 533, 534, 535, 536, 559, 560, 561, 586, 587, 589, 608, 609, 611, 612, 613, 615, 616, 617, 620, 621, 623, 625, 630, 631, 637, 641, 662, 670, 683, 684, 701, 720, 738, 778, 794, 796, 799, 800, 810, 820, 821, 822, 831, 832, 848, 862, 866, 868, 869, 870, 879, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 953, 955, 976, 979, 983, 987, 990, 997, 999, 1001, 1003, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1020, 1021, 1023, 1027, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1043, 1044], "structur": [0, 3, 9, 13, 14, 15, 16, 18, 21, 22, 37, 41, 42, 43, 44, 45, 47, 53, 54, 55, 56, 57, 63, 67, 69, 83, 106, 128, 150, 161, 166, 220, 221, 224, 230, 235, 251, 255, 266, 285, 288, 310, 316, 319, 324, 331, 338, 342, 355, 356, 357, 361, 366, 374, 376, 379, 381, 384, 391, 393, 394, 397, 404, 407, 409, 410, 411, 412, 414, 415, 416, 417, 439, 440, 443, 444, 448, 449, 450, 451, 452, 455, 460, 461, 470, 494, 501, 502, 506, 509, 511, 512, 519, 528, 533, 539, 542, 561, 608, 609, 610, 614, 615, 616, 687, 694, 707, 711, 825, 847, 852, 879, 891, 892, 895, 907, 908, 909, 910, 913, 935, 936, 958, 961, 984, 986, 987, 990, 992, 993, 997, 1000, 1003, 1006, 1007, 1008, 1015, 1020, 1021, 1027, 1028, 1030, 1031, 1033, 1037], "i": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 35, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 71, 72, 73, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 93, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 143, 144, 145, 147, 148, 151, 152, 153, 155, 156, 157, 158, 159, 160, 163, 164, 168, 169, 170, 171, 172, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 292, 293, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 336, 337, 338, 342, 343, 344, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 362, 366, 367, 368, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 392, 393, 394, 396, 397, 398, 401, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 506, 507, 508, 509, 510, 512, 513, 514, 515, 516, 517, 518, 519, 521, 522, 524, 525, 526, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 573, 574, 575, 576, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 760, 761, 763, 764, 765, 766, 767, 768, 770, 771, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 934, 935, 936, 938, 941, 942, 944, 945, 946, 947, 948, 949, 950, 952, 953, 954, 955, 956, 957, 958, 959, 961, 962, 968, 971, 972, 973, 974, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1010, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1024, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "laid": [0, 168, 379], "out": [0, 3, 4, 7, 9, 10, 12, 13, 15, 16, 18, 27, 31, 41, 51, 56, 71, 72, 103, 111, 116, 118, 119, 126, 127, 136, 140, 166, 168, 171, 183, 199, 201, 203, 207, 217, 238, 245, 247, 258, 260, 263, 268, 272, 278, 281, 310, 311, 318, 328, 330, 334, 335, 338, 346, 351, 365, 374, 376, 377, 379, 381, 382, 383, 385, 391, 393, 407, 410, 412, 414, 415, 417, 423, 433, 434, 440, 441, 443, 444, 445, 447, 470, 480, 481, 482, 483, 497, 513, 514, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 545, 547, 553, 554, 555, 556, 557, 558, 559, 560, 562, 563, 586, 587, 589, 602, 605, 606, 632, 637, 638, 639, 640, 649, 653, 664, 666, 671, 673, 674, 686, 687, 690, 699, 724, 738, 739, 796, 798, 799, 800, 801, 803, 804, 805, 806, 810, 825, 834, 835, 836, 837, 838, 843, 848, 851, 855, 856, 857, 865, 869, 876, 888, 891, 892, 914, 949, 951, 956, 977, 981, 982, 986, 987, 988, 990, 995, 997, 1007, 1008, 1009, 1011, 1016, 1019, 1021, 1023, 1027, 1029, 1031, 1033, 1035, 1036, 1039, 1040, 1043], "peopl": [0, 6, 71, 169, 237, 263, 351, 352, 367, 368, 374, 376, 378, 379, 383, 394, 413, 491, 492, 639, 836, 1006, 1017], "ar": [0, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 25, 26, 27, 28, 33, 35, 38, 40, 41, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 63, 65, 67, 71, 72, 73, 75, 76, 79, 80, 81, 82, 83, 86, 87, 91, 93, 96, 98, 101, 103, 106, 110, 112, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 134, 144, 145, 147, 148, 151, 155, 156, 157, 158, 159, 160, 163, 164, 168, 169, 170, 171, 172, 175, 178, 179, 180, 181, 182, 183, 187, 188, 190, 191, 192, 193, 194, 195, 196, 199, 200, 201, 203, 208, 210, 217, 220, 221, 222, 223, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 242, 246, 247, 248, 250, 254, 255, 257, 258, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 278, 281, 283, 285, 288, 289, 293, 296, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 319, 320, 321, 322, 325, 327, 328, 329, 330, 336, 338, 340, 342, 346, 347, 351, 352, 353, 356, 360, 362, 366, 367, 368, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 392, 393, 394, 397, 398, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 423, 428, 431, 432, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 480, 481, 482, 483, 486, 487, 491, 493, 494, 496, 498, 499, 500, 501, 502, 506, 507, 508, 510, 513, 514, 515, 516, 517, 518, 521, 522, 524, 526, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 694, 695, 696, 697, 698, 699, 700, 702, 703, 705, 707, 710, 711, 713, 714, 715, 716, 718, 719, 720, 722, 723, 724, 725, 726, 727, 728, 731, 732, 733, 734, 735, 737, 738, 739, 740, 742, 743, 745, 747, 748, 750, 751, 753, 754, 758, 759, 760, 762, 764, 765, 766, 770, 771, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 794, 795, 796, 797, 798, 799, 800, 802, 803, 805, 808, 810, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 882, 883, 884, 885, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 919, 920, 923, 924, 925, 928, 930, 935, 936, 937, 940, 941, 943, 944, 947, 950, 951, 953, 955, 958, 961, 962, 966, 967, 968, 971, 973, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1019, 1020, 1021, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "current": [0, 8, 47, 112, 156, 169, 217, 305, 315, 367, 368, 374, 377, 379, 380, 381, 384, 388, 391, 393, 394, 403, 404, 406, 407, 411, 414, 415, 416, 417, 438, 444, 448, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 530, 533, 539, 551, 552, 555, 556, 557, 558, 560, 562, 563, 564, 574, 589, 591, 608, 615, 624, 625, 644, 656, 665, 669, 673, 674, 675, 676, 785, 794, 795, 844, 848, 856, 857, 875, 887, 897, 907, 908, 909, 910, 913, 954, 962, 976, 981, 983, 987, 990, 991, 997, 1007, 1019, 1035, 1039, 1041, 1042, 1043], "": [0, 4, 5, 6, 7, 8, 10, 11, 12, 13, 17, 18, 20, 21, 25, 28, 35, 39, 40, 41, 43, 44, 45, 47, 48, 49, 53, 54, 56, 58, 59, 60, 61, 62, 63, 65, 66, 68, 71, 72, 79, 80, 83, 86, 91, 92, 93, 96, 97, 98, 101, 104, 105, 106, 110, 112, 114, 118, 119, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 133, 140, 143, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 164, 166, 169, 170, 172, 175, 179, 180, 181, 183, 185, 187, 188, 189, 190, 191, 197, 199, 201, 203, 205, 206, 208, 211, 212, 213, 214, 215, 216, 220, 221, 222, 223, 224, 225, 228, 229, 232, 234, 235, 236, 238, 245, 247, 248, 250, 255, 260, 261, 262, 263, 264, 267, 271, 273, 274, 283, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 302, 304, 305, 308, 311, 313, 315, 317, 318, 319, 320, 321, 322, 326, 327, 335, 336, 337, 338, 339, 342, 343, 344, 345, 348, 351, 352, 353, 357, 358, 359, 360, 362, 366, 367, 368, 372, 373, 374, 376, 377, 378, 379, 380, 381, 383, 385, 386, 387, 388, 393, 394, 396, 397, 398, 401, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 415, 417, 419, 421, 428, 432, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 455, 457, 458, 461, 462, 463, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 487, 489, 494, 496, 498, 502, 508, 509, 517, 523, 524, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 570, 579, 580, 581, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 604, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 632, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 683, 685, 686, 687, 688, 689, 690, 691, 698, 699, 700, 706, 709, 714, 718, 732, 738, 755, 756, 776, 777, 794, 795, 796, 798, 799, 800, 805, 810, 814, 815, 820, 821, 822, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 858, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 891, 892, 894, 895, 896, 897, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 914, 917, 919, 920, 923, 936, 938, 944, 945, 947, 971, 975, 976, 978, 979, 981, 983, 984, 985, 988, 989, 990, 991, 992, 994, 995, 997, 999, 1000, 1001, 1002, 1003, 1006, 1007, 1008, 1011, 1012, 1016, 1017, 1019, 1020, 1021, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "mainten": [0, 379, 387, 391, 397, 400, 983, 1007, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "j\u00e9r\u00e9mie": [0, 1, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "du": [0, 1, 2, 1027, 1028, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "boisberrang": [0, 1, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "jori": [0, 1, 1034, 1035, 1036, 1039, 1040], "van": [0, 1, 373, 409, 467, 472, 532, 625, 690, 694, 977, 984, 987, 993, 1011, 1028, 1029, 1030, 1031, 1034, 1035, 1036, 1038, 1039, 1040, 1042, 1043], "den": [0, 1, 1028, 1029, 1034, 1035, 1036, 1039, 1040], "bossch": [0, 1, 1034, 1035, 1036, 1040], "lo\u00efc": [0, 1, 1035, 1038, 1040, 1041, 1042, 1043, 1044, 1045], "est\u00e8v": [0, 1, 1035, 1038, 1040, 1041, 1042, 1043, 1044, 1045], "thoma": [0, 1, 103, 228, 305, 367, 369, 394, 895, 983, 997, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "j": [0, 1, 11, 18, 38, 39, 41, 44, 62, 71, 80, 81, 82, 112, 115, 116, 127, 152, 164, 170, 211, 223, 237, 245, 259, 260, 265, 271, 287, 293, 296, 309, 320, 360, 367, 373, 374, 376, 383, 385, 391, 404, 405, 407, 409, 411, 412, 414, 415, 417, 418, 435, 438, 442, 444, 451, 452, 467, 472, 496, 511, 514, 515, 516, 518, 526, 529, 532, 534, 535, 536, 538, 539, 545, 551, 557, 558, 591, 592, 630, 631, 635, 642, 643, 646, 647, 664, 665, 667, 678, 686, 687, 688, 690, 691, 692, 694, 703, 706, 708, 712, 714, 716, 719, 720, 721, 723, 752, 753, 755, 756, 771, 775, 785, 786, 789, 790, 828, 829, 836, 841, 842, 843, 845, 847, 848, 849, 850, 851, 852, 853, 870, 879, 880, 907, 908, 976, 977, 981, 983, 984, 985, 987, 988, 989, 990, 991, 993, 994, 995, 997, 999, 1001, 1002, 1003, 1021, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "fan": [0, 1, 367, 394, 1002, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "olivi": [0, 1, 15, 18, 38, 49, 62, 188, 199, 217, 221, 261, 263, 351, 352, 353, 394, 895, 1000, 1005, 1007, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "grisel": [0, 1, 15, 18, 38, 49, 62, 188, 199, 217, 221, 261, 263, 351, 352, 353, 394, 1005, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "yaroslav": [0, 1, 1027, 1028, 1029, 1030, 1033, 1034, 1035, 1036, 1043, 1044], "halchenko": [0, 1, 1027, 1028, 1029, 1030, 1033, 1034, 1035, 1036, 1043], "tim": [0, 1, 117, 131, 1027, 1032, 1033, 1036, 1037, 1038, 1040, 1042, 1043, 1044], "head": [0, 1, 13, 27, 72, 117, 131, 156, 169, 187, 188, 217, 242, 250, 311, 315, 320, 379, 387, 412, 1011, 1032, 1033, 1042, 1043, 1044], "nicola": [0, 1, 148, 309, 656, 983, 1000, 1027, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "hug": [0, 1, 148, 309, 1035, 1036, 1037, 1038, 1039, 1040, 1041], "adrin": [0, 1, 66, 347, 394, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "jalali": [0, 1, 66, 347, 394, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "julien": [0, 1, 656, 983, 1011, 1027, 1030, 1034, 1035, 1039, 1040, 1041, 1042, 1043, 1044], "jerphanion": [0, 1, 1039, 1040, 1041, 1042, 1043, 1044], "guillaum": [0, 1, 5, 7, 73, 76, 101, 132, 151, 156, 157, 158, 160, 187, 188, 201, 221, 305, 1011, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "lemaitr": [0, 1, 5, 7, 73, 76, 101, 132, 151, 156, 157, 158, 160, 187, 188, 201, 221, 305, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "christian": [0, 1, 20, 199, 200, 201, 217, 351, 352, 374, 1011, 1021, 1027, 1028, 1031, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "lorentzen": [0, 1, 199, 200, 201, 217, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "jan": [0, 1, 25, 26, 27, 28, 151, 152, 154, 155, 156, 157, 158, 160, 200, 234, 278, 878, 1027, 1030, 1031, 1032, 1033, 1035, 1036, 1039, 1043], "hendrik": [0, 1, 25, 26, 27, 28, 151, 152, 154, 155, 156, 157, 158, 160, 234, 1027, 1030, 1031, 1032, 1033], "metzen": [0, 1, 25, 26, 27, 28, 151, 152, 154, 155, 156, 157, 158, 160, 234, 1027, 1030, 1031, 1032, 1033], "andrea": [0, 1, 32, 75, 101, 116, 190, 233, 306, 307, 327, 346, 347, 394, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042], "mueller": [0, 1, 75, 101, 116, 190, 233, 327, 346, 347, 1011, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042], "vlad": [0, 1, 96, 236, 302, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1036], "nicula": [0, 1, 96, 236, 302, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1036], "joel": [0, 1, 73, 394, 415, 533, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1044], "nothman": [0, 1, 73, 394, 415, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1044], "hanmin": [0, 1, 306, 1034, 1035, 1036, 1037, 1038], "qin": [0, 1, 306, 376, 415, 1034, 1035, 1036, 1037, 1038], "omar": [0, 1, 1037, 1042, 1043, 1044], "salman": [0, 1, 1042, 1043, 1044], "bertrand": [0, 1, 1027, 1033, 1034, 1039, 1040], "thirion": [0, 1, 1027, 1033, 1034, 1040], "tom": [0, 1, 191, 207, 283, 285, 307, 308, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "dupr\u00e9": [0, 1, 307, 308, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "la": [0, 1, 191, 207, 283, 285, 307, 308, 311, 376, 1011, 1028, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "tour": [0, 1, 191, 207, 283, 285, 307, 308, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "nell": [0, 1, 40, 223, 231, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1036, 1039], "roman": [0, 1, 199, 217, 625, 913, 1029, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1044], "yurchak": [0, 1, 199, 217, 415, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041], "meekail": [0, 1, 1041, 1042, 1043, 1044], "zain": [0, 1, 1041, 1042, 1043, 1044], "pleas": [0, 12, 18, 27, 72, 73, 117, 119, 120, 126, 128, 129, 132, 135, 145, 156, 169, 170, 171, 180, 203, 229, 230, 231, 233, 235, 238, 239, 240, 241, 242, 250, 258, 260, 261, 267, 272, 283, 293, 302, 311, 315, 316, 317, 318, 319, 320, 321, 322, 327, 342, 360, 367, 373, 374, 377, 379, 380, 381, 383, 387, 391, 392, 393, 397, 398, 401, 403, 406, 407, 414, 415, 421, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 462, 463, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 494, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 586, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 601, 608, 609, 625, 626, 627, 628, 629, 630, 631, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 686, 687, 688, 689, 690, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806, 809, 810, 811, 812, 813, 814, 815, 816, 817, 822, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 888, 891, 892, 894, 895, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 976, 987, 991, 997, 1001, 1002, 1006, 1007, 1010, 1012, 1019, 1021, 1027, 1030, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "do": [0, 4, 10, 13, 26, 43, 56, 62, 68, 75, 91, 100, 102, 105, 116, 119, 121, 125, 126, 132, 145, 156, 163, 169, 170, 171, 196, 199, 203, 217, 220, 222, 235, 236, 238, 251, 255, 258, 261, 263, 281, 283, 285, 289, 318, 322, 330, 335, 338, 342, 343, 346, 351, 352, 353, 360, 362, 366, 367, 368, 374, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 393, 394, 405, 406, 407, 408, 409, 410, 411, 414, 415, 416, 426, 448, 459, 501, 534, 536, 540, 542, 550, 553, 579, 580, 586, 587, 589, 630, 631, 643, 644, 650, 653, 654, 657, 664, 666, 674, 734, 760, 775, 779, 813, 816, 831, 832, 836, 863, 864, 866, 873, 877, 879, 884, 885, 887, 888, 889, 890, 907, 908, 909, 910, 918, 961, 976, 979, 981, 983, 984, 987, 988, 990, 991, 995, 997, 1002, 1003, 1006, 1007, 1011, 1012, 1019, 1020, 1021, 1027, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "email": [0, 351, 379, 391, 415, 834, 989, 1011], "directli": [0, 6, 20, 28, 46, 47, 57, 72, 117, 122, 148, 159, 183, 187, 199, 205, 217, 229, 265, 302, 305, 319, 322, 353, 362, 366, 377, 379, 380, 381, 383, 385, 392, 393, 394, 403, 404, 405, 407, 408, 409, 410, 411, 415, 417, 440, 450, 460, 462, 467, 472, 525, 565, 566, 567, 568, 595, 609, 618, 630, 641, 644, 645, 650, 651, 658, 659, 660, 661, 662, 675, 679, 682, 688, 771, 775, 778, 789, 790, 796, 799, 800, 810, 842, 844, 858, 859, 860, 866, 876, 878, 881, 888, 955, 976, 983, 985, 990, 992, 994, 997, 1002, 1003, 1007, 1013, 1016, 1017, 1027, 1035, 1036, 1038, 1039, 1040, 1043, 1044], "ask": [0, 163, 164, 260, 378, 379, 383, 384, 387, 393, 394, 416, 841, 842, 843, 845, 847, 849, 850, 851, 1010, 1043], "assist": [0, 379, 391, 997, 1010, 1011], "report": [0, 4, 8, 13, 33, 71, 76, 145, 159, 187, 258, 268, 278, 315, 325, 362, 374, 378, 380, 381, 382, 385, 387, 391, 393, 397, 401, 407, 411, 609, 647, 656, 662, 683, 684, 698, 711, 726, 727, 735, 780, 781, 784, 828, 837, 856, 857, 894, 912, 930, 983, 990, 995, 1006, 1007, 1010, 1028, 1031, 1034, 1035, 1037, 1038, 1040, 1042, 1043], "issu": [0, 4, 26, 80, 87, 199, 217, 265, 312, 367, 373, 377, 382, 383, 384, 387, 388, 391, 393, 394, 396, 397, 398, 401, 403, 407, 409, 410, 415, 447, 450, 460, 471, 480, 481, 482, 532, 537, 541, 571, 583, 584, 586, 587, 589, 609, 625, 689, 693, 766, 870, 875, 887, 926, 976, 977, 984, 995, 997, 1002, 1006, 1007, 1010, 1020, 1021, 1027, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1042, 1044], "instead": [0, 4, 5, 6, 13, 21, 49, 54, 56, 57, 58, 72, 101, 115, 120, 129, 145, 148, 151, 156, 199, 201, 214, 217, 224, 238, 251, 256, 257, 261, 262, 281, 288, 305, 315, 316, 317, 318, 319, 338, 340, 342, 351, 353, 360, 362, 366, 367, 373, 374, 377, 378, 379, 380, 381, 383, 384, 387, 388, 391, 392, 393, 401, 403, 407, 408, 410, 411, 412, 413, 414, 415, 416, 418, 430, 435, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 454, 457, 463, 465, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 507, 508, 531, 532, 533, 535, 536, 537, 538, 539, 544, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 586, 587, 588, 589, 592, 605, 606, 608, 609, 610, 611, 612, 613, 614, 617, 618, 619, 620, 621, 622, 623, 625, 628, 630, 633, 636, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 685, 688, 692, 705, 739, 743, 747, 748, 771, 775, 776, 777, 780, 794, 795, 796, 797, 798, 800, 802, 803, 805, 808, 810, 814, 815, 816, 820, 821, 822, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 844, 846, 849, 850, 856, 857, 859, 860, 861, 862, 864, 865, 866, 871, 872, 877, 878, 879, 889, 890, 893, 894, 895, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 912, 913, 925, 931, 936, 944, 955, 962, 976, 977, 979, 983, 984, 986, 987, 988, 991, 992, 997, 1001, 1002, 1003, 1006, 1017, 1019, 1021, 1024, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "see": [0, 4, 5, 7, 13, 21, 25, 26, 28, 38, 45, 50, 51, 54, 56, 58, 59, 63, 65, 66, 68, 70, 81, 87, 90, 91, 96, 101, 102, 106, 112, 113, 114, 115, 118, 119, 120, 121, 122, 124, 126, 129, 132, 138, 144, 145, 146, 148, 151, 156, 157, 158, 163, 166, 169, 170, 172, 175, 178, 179, 180, 183, 190, 200, 201, 202, 203, 205, 216, 217, 220, 222, 230, 232, 235, 238, 239, 240, 242, 246, 247, 248, 254, 255, 257, 259, 260, 261, 262, 263, 267, 269, 270, 271, 274, 275, 278, 283, 289, 290, 292, 296, 305, 311, 312, 315, 316, 317, 318, 319, 320, 321, 327, 338, 342, 346, 351, 352, 353, 356, 357, 358, 359, 362, 366, 367, 368, 371, 372, 373, 374, 376, 377, 378, 379, 381, 383, 385, 386, 387, 391, 392, 393, 403, 405, 406, 407, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 431, 435, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 485, 486, 489, 490, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 582, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 605, 606, 607, 608, 609, 612, 617, 620, 621, 625, 626, 627, 628, 630, 631, 632, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 697, 699, 704, 706, 709, 711, 740, 760, 771, 775, 776, 777, 778, 785, 789, 790, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 884, 885, 886, 887, 888, 889, 890, 891, 892, 894, 895, 897, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 935, 936, 956, 958, 961, 971, 976, 977, 979, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 993, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1011, 1012, 1014, 1019, 1020, 1021, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045], "what": [0, 4, 9, 12, 13, 41, 46, 53, 54, 87, 97, 101, 121, 168, 169, 188, 205, 207, 215, 230, 235, 242, 301, 351, 353, 356, 362, 367, 374, 377, 379, 380, 381, 383, 385, 387, 392, 393, 394, 396, 398, 407, 413, 414, 415, 501, 534, 586, 587, 589, 644, 650, 694, 884, 885, 887, 888, 889, 890, 907, 908, 909, 910, 986, 987, 988, 990, 1003, 1007, 1012, 1027, 1034], "best": [0, 4, 6, 8, 12, 13, 14, 20, 25, 27, 41, 47, 55, 56, 62, 71, 72, 73, 74, 79, 86, 96, 100, 103, 104, 105, 115, 118, 122, 124, 125, 126, 132, 135, 148, 151, 152, 157, 163, 169, 178, 183, 187, 188, 195, 213, 214, 215, 220, 223, 228, 233, 234, 238, 247, 251, 254, 258, 259, 260, 261, 264, 267, 268, 271, 272, 274, 281, 287, 292, 306, 311, 317, 318, 338, 341, 342, 351, 352, 353, 359, 366, 367, 373, 376, 378, 379, 382, 385, 392, 393, 397, 398, 404, 405, 407, 411, 412, 414, 415, 416, 417, 430, 441, 444, 445, 447, 449, 450, 451, 457, 460, 463, 470, 480, 481, 482, 536, 543, 544, 550, 552, 554, 555, 556, 557, 558, 560, 562, 563, 564, 566, 568, 591, 592, 595, 600, 608, 609, 633, 635, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 665, 667, 668, 669, 670, 671, 673, 674, 676, 677, 678, 686, 687, 688, 691, 692, 701, 706, 717, 718, 719, 720, 721, 725, 726, 736, 737, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 753, 780, 781, 782, 784, 787, 788, 789, 790, 791, 793, 794, 795, 796, 799, 800, 810, 822, 824, 827, 832, 833, 842, 850, 856, 857, 900, 902, 905, 907, 908, 909, 910, 976, 981, 982, 983, 984, 987, 990, 991, 993, 1001, 1003, 1006, 1007, 1011, 1012, 1017, 1021, 1027, 1030, 1033, 1035, 1036, 1037, 1040, 1041, 1042, 1043], "wai": [0, 4, 18, 28, 51, 61, 72, 75, 117, 124, 128, 130, 148, 158, 169, 171, 172, 200, 203, 204, 214, 217, 230, 231, 234, 235, 238, 239, 255, 260, 267, 269, 305, 306, 318, 320, 321, 362, 366, 367, 368, 373, 375, 378, 381, 382, 387, 388, 393, 394, 397, 398, 401, 404, 405, 406, 407, 408, 410, 411, 412, 414, 415, 416, 417, 418, 422, 441, 442, 449, 450, 451, 457, 458, 460, 461, 467, 494, 553, 554, 561, 570, 587, 597, 598, 609, 630, 664, 665, 674, 675, 676, 697, 702, 704, 715, 733, 734, 751, 752, 754, 760, 771, 775, 785, 792, 820, 828, 845, 866, 872, 877, 883, 909, 910, 958, 961, 976, 977, 981, 982, 983, 984, 985, 986, 987, 988, 990, 992, 993, 994, 995, 997, 999, 1001, 1002, 1003, 1006, 1007, 1010, 1011, 1012, 1020, 1021, 1027, 1029, 1035, 1040, 1041], "question": [0, 138, 168, 260, 346, 378, 379, 384, 387, 411, 414, 828, 901, 904, 983, 986, 987, 993, 1011], "faq": [0, 387, 411, 690, 984, 997], "how": [0, 4, 5, 7, 8, 9, 10, 13, 21, 22, 26, 27, 33, 34, 38, 51, 52, 53, 54, 58, 61, 70, 71, 72, 75, 79, 81, 87, 105, 112, 113, 116, 120, 121, 122, 123, 125, 126, 130, 132, 145, 156, 158, 166, 169, 170, 171, 172, 175, 180, 188, 189, 195, 200, 201, 202, 203, 206, 207, 213, 217, 224, 225, 230, 233, 235, 237, 238, 239, 241, 251, 255, 256, 258, 260, 261, 262, 267, 269, 270, 272, 273, 274, 281, 283, 285, 286, 287, 289, 290, 301, 310, 312, 316, 317, 318, 321, 322, 335, 336, 338, 341, 342, 346, 351, 352, 356, 360, 366, 367, 368, 374, 377, 378, 380, 381, 382, 384, 387, 392, 393, 394, 398, 401, 403, 404, 405, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 421, 431, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 502, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 608, 609, 620, 621, 625, 626, 627, 628, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 686, 687, 688, 689, 690, 702, 718, 754, 789, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806, 809, 810, 811, 812, 813, 814, 815, 816, 817, 822, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 891, 892, 894, 895, 897, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 971, 976, 977, 981, 982, 983, 984, 986, 987, 993, 994, 995, 997, 999, 1000, 1002, 1003, 1005, 1007, 1011, 1012, 1014, 1016, 1021, 1023, 1027, 1029, 1032, 1038, 1041, 1042, 1043], "you": [0, 15, 17, 21, 25, 72, 91, 120, 121, 124, 126, 145, 148, 164, 170, 187, 200, 201, 203, 230, 235, 242, 248, 255, 260, 261, 267, 275, 289, 315, 316, 319, 321, 322, 326, 329, 351, 362, 366, 367, 368, 373, 374, 377, 378, 379, 380, 381, 383, 384, 385, 387, 388, 392, 393, 397, 398, 401, 403, 405, 406, 407, 408, 409, 411, 414, 415, 416, 418, 419, 424, 435, 441, 442, 444, 445, 447, 462, 463, 465, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 498, 501, 502, 507, 508, 530, 531, 532, 534, 536, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 577, 578, 579, 580, 586, 587, 588, 589, 592, 605, 606, 608, 609, 625, 633, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 685, 688, 697, 698, 782, 795, 797, 798, 799, 800, 801, 803, 805, 811, 812, 814, 815, 816, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 849, 850, 856, 857, 858, 859, 862, 863, 864, 865, 866, 871, 872, 873, 878, 879, 884, 885, 887, 888, 889, 890, 892, 894, 895, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 936, 953, 955, 976, 977, 982, 983, 987, 988, 991, 993, 994, 997, 998, 1001, 1002, 1003, 1005, 1006, 1010, 1011, 1012, 1013, 1016, 1019, 1021, 1027, 1030, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "can": [0, 4, 5, 7, 8, 9, 10, 12, 13, 15, 17, 20, 21, 25, 26, 27, 28, 32, 33, 34, 38, 41, 43, 44, 47, 49, 50, 54, 56, 57, 58, 59, 61, 62, 63, 64, 66, 71, 72, 73, 74, 79, 80, 81, 82, 83, 87, 91, 97, 99, 100, 101, 103, 105, 106, 110, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 143, 144, 145, 147, 148, 151, 156, 157, 158, 163, 164, 168, 169, 170, 171, 172, 175, 178, 179, 180, 183, 184, 187, 188, 190, 192, 194, 195, 197, 199, 200, 201, 202, 203, 204, 205, 207, 215, 216, 217, 220, 221, 222, 228, 229, 230, 231, 232, 234, 235, 238, 239, 242, 245, 246, 247, 248, 250, 251, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 267, 269, 271, 272, 274, 275, 278, 281, 283, 285, 287, 288, 289, 290, 292, 300, 301, 302, 305, 306, 307, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 326, 327, 329, 330, 335, 336, 338, 341, 342, 346, 351, 352, 353, 358, 359, 360, 362, 366, 367, 368, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 387, 388, 392, 393, 394, 396, 397, 398, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 430, 432, 435, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 452, 454, 455, 456, 457, 459, 460, 462, 463, 464, 465, 466, 470, 480, 481, 482, 485, 494, 497, 501, 506, 507, 510, 519, 522, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 577, 578, 579, 580, 581, 582, 586, 587, 589, 590, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 628, 630, 632, 633, 636, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 685, 687, 689, 690, 691, 692, 693, 696, 697, 698, 699, 700, 702, 705, 707, 709, 710, 716, 718, 719, 720, 721, 723, 724, 726, 727, 729, 730, 734, 735, 736, 737, 739, 740, 743, 749, 752, 753, 754, 755, 756, 760, 776, 777, 779, 780, 781, 782, 784, 785, 786, 791, 792, 794, 795, 796, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 810, 811, 812, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 845, 847, 849, 850, 851, 856, 857, 858, 859, 862, 863, 864, 866, 867, 868, 872, 873, 874, 877, 878, 879, 884, 891, 892, 897, 899, 900, 901, 902, 904, 905, 907, 908, 909, 910, 911, 912, 915, 917, 919, 923, 925, 930, 933, 935, 936, 942, 944, 945, 947, 950, 953, 955, 957, 958, 961, 968, 971, 972, 976, 977, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1019, 1020, 1021, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "contribut": [0, 14, 21, 126, 156, 183, 203, 269, 310, 376, 377, 381, 382, 383, 387, 393, 394, 397, 412, 413, 414, 445, 447, 551, 552, 557, 558, 723, 726, 753, 981, 987, 990, 995, 1002, 1006, 1007, 1010, 1011, 1019, 1027, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "help": [0, 4, 9, 11, 17, 56, 71, 75, 101, 106, 170, 183, 217, 220, 261, 263, 278, 302, 335, 338, 352, 353, 362, 366, 367, 377, 380, 381, 382, 383, 384, 385, 387, 388, 393, 394, 396, 401, 407, 408, 411, 415, 417, 431, 534, 575, 625, 648, 652, 663, 683, 684, 690, 712, 835, 907, 908, 909, 910, 977, 981, 982, 984, 986, 987, 989, 991, 997, 998, 1003, 1005, 1006, 1007, 1010, 1011, 1021, 1033, 1034, 1035, 1038, 1041], "arturo": [0, 38, 58, 118, 178, 183, 238, 261, 263, 310, 351, 352, 353, 390, 1041, 1042, 1043, 1044], "amor": [0, 38, 58, 118, 178, 183, 238, 261, 263, 310, 351, 352, 353, 390, 1041, 1042, 1043, 1044], "luci": [0, 266, 369, 390, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "liu": [0, 266, 369, 390, 561, 723, 753, 987, 993, 1030, 1033, 1034, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "activ": [0, 33, 166, 207, 237, 245, 251, 261, 324, 325, 327, 331, 353, 373, 374, 377, 379, 380, 385, 387, 391, 393, 394, 397, 408, 494, 500, 524, 630, 633, 635, 648, 649, 651, 652, 653, 661, 662, 663, 680, 681, 682, 683, 684, 711, 716, 794, 855, 856, 857, 895, 953, 983, 984, 985, 986, 990, 991, 992, 1000, 1008, 1010, 1038], "who": [0, 71, 367, 374, 379, 386, 394, 397, 841, 842, 843, 845, 847, 849, 850, 851, 1006, 1029, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "also": [0, 4, 7, 11, 13, 18, 20, 21, 25, 26, 27, 28, 33, 47, 49, 54, 58, 59, 61, 65, 71, 72, 79, 81, 86, 87, 96, 103, 105, 112, 115, 118, 120, 122, 123, 124, 125, 126, 130, 132, 144, 145, 146, 148, 151, 153, 156, 164, 169, 170, 171, 172, 175, 179, 180, 182, 188, 191, 192, 195, 199, 200, 201, 203, 204, 208, 216, 217, 220, 231, 233, 235, 238, 239, 251, 258, 260, 261, 262, 263, 266, 267, 269, 270, 271, 278, 281, 283, 291, 294, 296, 299, 305, 306, 307, 309, 310, 315, 316, 317, 318, 322, 330, 334, 335, 336, 338, 340, 342, 351, 352, 353, 356, 357, 360, 362, 366, 367, 368, 372, 373, 374, 376, 377, 378, 379, 381, 382, 385, 387, 388, 391, 392, 393, 394, 397, 401, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 419, 435, 436, 437, 439, 440, 443, 444, 445, 446, 448, 450, 460, 461, 463, 465, 480, 482, 490, 494, 496, 501, 506, 530, 531, 533, 534, 539, 544, 547, 549, 551, 552, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 605, 606, 607, 608, 609, 620, 630, 631, 633, 641, 642, 643, 644, 645, 648, 650, 651, 652, 654, 656, 657, 658, 659, 660, 661, 670, 674, 676, 679, 682, 685, 689, 692, 693, 697, 708, 711, 720, 726, 727, 735, 740, 760, 776, 777, 780, 781, 784, 794, 795, 796, 799, 800, 810, 813, 816, 821, 822, 823, 824, 825, 826, 828, 838, 841, 842, 843, 845, 846, 847, 849, 850, 851, 855, 856, 857, 859, 861, 862, 867, 868, 872, 876, 879, 884, 888, 901, 904, 907, 908, 909, 910, 919, 938, 944, 951, 955, 976, 977, 979, 981, 983, 984, 985, 986, 987, 988, 989, 990, 991, 993, 994, 997, 998, 1000, 1001, 1002, 1003, 1006, 1007, 1011, 1012, 1017, 1019, 1020, 1021, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "triag": [0, 379, 382, 394], "pr": [0, 134, 367, 379, 382, 387, 415, 738, 987, 1037, 1039], "gener": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 17, 18, 20, 22, 26, 27, 28, 30, 31, 32, 33, 34, 38, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 53, 54, 55, 57, 59, 60, 61, 62, 63, 66, 71, 72, 73, 74, 75, 76, 80, 82, 86, 87, 89, 90, 91, 94, 96, 100, 101, 102, 103, 104, 105, 106, 110, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 143, 145, 146, 148, 152, 153, 154, 155, 156, 159, 163, 164, 168, 169, 170, 171, 172, 175, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 251, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 291, 292, 293, 294, 296, 299, 300, 301, 305, 306, 307, 308, 309, 310, 311, 312, 315, 317, 318, 319, 320, 321, 322, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360, 366, 367, 371, 372, 374, 376, 380, 381, 382, 383, 384, 385, 387, 388, 391, 392, 401, 404, 405, 407, 411, 413, 415, 416, 417, 419, 423, 428, 430, 435, 438, 441, 444, 445, 447, 450, 452, 456, 457, 458, 460, 462, 463, 465, 467, 470, 472, 480, 481, 482, 486, 489, 490, 493, 494, 495, 501, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 531, 532, 534, 536, 538, 539, 541, 542, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 580, 581, 582, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 605, 606, 608, 609, 612, 613, 616, 617, 618, 620, 621, 625, 626, 627, 628, 630, 631, 632, 633, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 667, 668, 669, 670, 671, 673, 675, 676, 677, 678, 683, 684, 687, 688, 689, 690, 691, 692, 693, 699, 702, 704, 715, 719, 720, 721, 734, 740, 754, 775, 778, 782, 790, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 829, 830, 831, 832, 833, 839, 840, 842, 844, 845, 847, 848, 849, 850, 851, 855, 856, 857, 859, 862, 863, 864, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 884, 885, 887, 888, 889, 890, 891, 892, 899, 900, 901, 902, 904, 905, 908, 910, 911, 912, 913, 930, 931, 935, 936, 939, 940, 952, 956, 958, 961, 976, 977, 979, 981, 982, 984, 986, 987, 988, 990, 992, 993, 994, 995, 999, 1000, 1002, 1003, 1006, 1008, 1009, 1010, 1011, 1012, 1015, 1019, 1020, 1023, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1043, 1044], "juan": [0, 369, 1027, 1038, 1039, 1040, 1041, 1042], "carlo": [0, 233, 369, 414, 417, 609, 639, 640, 979, 992, 1027, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "alfaro": [0, 369, 1038, 1039, 1040, 1041, 1042], "jim\u00e9nez": [0, 369, 1035, 1038, 1039, 1040, 1041, 1042], "maxwel": [0, 369, 1037, 1040, 1041, 1042, 1043], "martin": [0, 369, 719, 720, 721, 983, 987, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1044], "loyola": [0, 369, 1040, 1041], "sylvain": [0, 369, 1031, 1036, 1037, 1038, 1039, 1040, 1041], "mari\u00e9": [0, 369, 1036, 1037, 1038, 1039, 1040, 1041], "norbert": [0, 369, 1029, 1039, 1040, 1041], "prein": [0, 369, 1039, 1040, 1041], "reshama": [0, 364, 369, 1035, 1036, 1038, 1039, 1040, 1041, 1042], "shaikh": [0, 364, 369, 1035, 1036, 1038, 1039, 1040, 1041, 1042], "albert": [0, 228, 369, 1034, 1035, 1036, 1039, 1040], "maren": [0, 369, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "westermann": [0, 369, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "around": [0, 4, 27, 38, 53, 86, 112, 115, 125, 157, 170, 175, 235, 238, 263, 302, 325, 327, 328, 338, 341, 342, 351, 352, 353, 362, 374, 376, 379, 385, 391, 398, 407, 411, 412, 415, 469, 470, 513, 542, 618, 638, 647, 666, 702, 739, 794, 802, 818, 845, 847, 849, 850, 851, 879, 983, 984, 986, 987, 993, 997, 1001, 1006, 1007, 1010, 1011, 1019, 1021, 1031, 1032], "lauren": [0, 363, 690, 694, 984, 1039, 1042], "burk": [0, 363, 1042], "francoisgoupil": [0, 363, 1041], "longer": [0, 4, 35, 54, 115, 170, 184, 301, 318, 379, 381, 407, 411, 414, 415, 447, 534, 561, 982, 986, 987, 989, 992, 1002, 1010, 1011, 1021, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "mathieu": [0, 2, 25, 49, 101, 190, 200, 221, 236, 261, 351, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1040], "blondel": [0, 2, 25, 49, 101, 190, 200, 221, 236, 261, 351, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1040], "lar": [0, 2, 15, 99, 148, 166, 169, 177, 184, 185, 188, 192, 193, 204, 218, 273, 351, 352, 353, 376, 469, 470, 476, 499, 529, 535, 537, 540, 541, 543, 544, 546, 649, 650, 651, 652, 653, 654, 661, 662, 663, 676, 680, 681, 682, 683, 684, 1008, 1009, 1019, 1023, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1038, 1040], "buitinck": [0, 2, 15, 351, 352, 353, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "noel": [0, 2, 112, 113, 114, 1027, 1028, 1029, 1030, 1031, 1039], "daw": [0, 2, 112, 113, 114, 1027, 1028, 1029, 1030, 1031], "dubourg": [0, 2, 154, 158, 1011, 1027, 1031], "edouard": [0, 2, 1027], "duchesnai": [0, 2, 1027], "alexand": [0, 2, 407, 412, 533, 865, 1029, 1030, 1031, 1033, 1034, 1035, 1039, 1040, 1041, 1044], "fabisch": [0, 2, 1029, 1030, 1031, 1033], "virgil": [0, 2, 9, 1027, 1028, 1030], "fritsch": [0, 2, 9, 1027, 1028, 1030], "satrajit": [0, 2, 1027, 1028], "ghosh": [0, 2, 407, 1027, 1028, 1044], "angel": [0, 2], "soler": [0, 2], "gollonet": [0, 2], "chri": [0, 2, 1027, 1030, 1035, 1036, 1037, 1038, 1041], "gorgolewski": [0, 2, 1027, 1030], "jaqu": [0, 2, 32, 46, 52, 54, 74, 90, 91, 182, 195, 196, 197, 222, 343, 346, 1027, 1028, 1029, 1030], "grobler": [0, 2, 32, 46, 52, 54, 74, 90, 91, 182, 195, 196, 197, 222, 343, 346, 1027, 1028, 1029, 1030], "brian": [0, 2, 47, 706, 987, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1037, 1038, 1040, 1041], "holt": [0, 2, 1027], "arnaud": [0, 2, 1028, 1029, 1030, 1031, 1032, 1033], "joli": [0, 2, 1028, 1029, 1030, 1031, 1032, 1033], "thoui": [0, 2, 1027], "rai": [0, 2, 955, 987, 1027, 1037, 1039, 1040], "jone": [0, 2, 374, 1027], "kyle": [0, 2, 100, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1036, 1038, 1039], "kastner": [0, 2, 100, 1029, 1030, 1031, 1038, 1039], "manoj": [0, 2, 43, 148, 181, 1030, 1031, 1032, 1033, 1034], "kumar": [0, 2, 43, 148, 181, 374, 407, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044], "robert": [0, 2, 49, 73, 148, 187, 278, 376, 412, 526, 533, 626, 654, 719, 720, 721, 732, 865, 977, 983, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1037, 1042], "layton": [0, 2, 49, 1027, 1028, 1029, 1030, 1032], "wei": [0, 2, 1001, 1027, 1028, 1031, 1032, 1033, 1034, 1036, 1040, 1043], "li": [0, 2, 328, 374, 637, 640, 694, 723, 753, 892, 976, 979, 987, 990, 997, 999, 1002, 1027, 1028, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "paolo": [0, 2, 1027, 1031, 1037, 1045], "losi": [0, 2, 1027], "gill": [0, 2, 115, 116, 1027, 1028, 1029, 1030, 1031, 1032, 1033], "loupp": [0, 2, 115, 116, 414, 553, 554, 1027, 1028, 1029, 1030, 1031, 1032, 1033], "jarrod": [0, 2, 1036, 1043, 1044], "millman": [0, 2, 1036, 1043, 1044], "passo": [0, 2, 1027, 1028], "peter": [0, 2, 11, 17, 64, 124, 126, 127, 261, 351, 352, 407, 446, 448, 455, 647, 789, 790, 983, 987, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1040, 1042, 1043, 1044], "prettenhof": [0, 2, 11, 17, 124, 126, 127, 261, 351, 352, 1027, 1028, 1029, 1030, 1031, 1032], "venkat": [0, 2], "raghav": [0, 2, 264, 305, 1031, 1032, 1033, 1034, 1035, 1039], "rajagopalan": [0, 2, 1035, 1039], "jacob": [0, 2, 1032, 1033, 1034], "schreiber": [0, 2, 1032, 1033, 1034], "\u675c\u4e16\u6a4b": [0, 2], "shiqiao": [0, 2, 1027, 1028], "jake": [0, 2, 11, 158, 200, 220, 248, 288, 296, 1005, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1039, 1041], "vanderpla": [0, 2, 11, 158, 200, 220, 248, 288, 296, 1005, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "ward": [0, 2, 14, 22, 37, 40, 41, 42, 43, 45, 47, 53, 54, 55, 57, 63, 69, 166, 172, 224, 415, 439, 443, 461, 528, 852, 1008, 1027, 1030, 1032], "farlei": [0, 2, 1027], "ron": [0, 2, 247, 1027], "weiss": [0, 2, 247, 407, 689, 1027], "respons": [0, 148, 170, 195, 199, 202, 235, 270, 351, 376, 385, 393, 406, 407, 408, 414, 444, 462, 480, 481, 482, 629, 630, 631, 672, 673, 696, 698, 700, 739, 794, 795, 988, 994, 1012, 1044], "chiara": [0, 370, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "marmo": [0, 370, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "If": [0, 4, 11, 13, 17, 28, 33, 43, 50, 56, 72, 83, 99, 110, 120, 125, 132, 160, 164, 169, 180, 199, 214, 216, 217, 235, 238, 260, 267, 275, 288, 296, 305, 310, 311, 338, 342, 346, 347, 351, 352, 353, 360, 362, 366, 367, 373, 374, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 391, 393, 394, 397, 398, 401, 404, 405, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 428, 431, 432, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 506, 507, 508, 510, 512, 513, 517, 520, 521, 522, 525, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 582, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 705, 709, 710, 711, 712, 714, 715, 716, 723, 724, 725, 726, 727, 728, 729, 733, 735, 738, 739, 742, 743, 745, 747, 748, 750, 751, 752, 753, 754, 755, 756, 758, 760, 761, 763, 764, 765, 766, 768, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 784, 785, 786, 789, 790, 791, 792, 793, 794, 795, 796, 798, 799, 800, 802, 808, 810, 813, 816, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 882, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 922, 923, 924, 925, 928, 934, 936, 938, 940, 944, 946, 950, 953, 955, 956, 958, 961, 962, 968, 971, 972, 973, 974, 976, 977, 979, 981, 982, 983, 984, 985, 987, 990, 991, 993, 994, 997, 999, 1001, 1002, 1003, 1004, 1006, 1007, 1010, 1012, 1013, 1019, 1020, 1021, 1027, 1030, 1031, 1032, 1033, 1036, 1037, 1039, 1040, 1041, 1043], "us": [0, 3, 4, 7, 8, 9, 11, 13, 14, 15, 16, 17, 20, 21, 22, 25, 26, 27, 28, 31, 33, 35, 37, 38, 40, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 69, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 87, 91, 92, 93, 95, 98, 100, 101, 103, 104, 105, 107, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 131, 133, 134, 135, 136, 138, 139, 140, 144, 145, 147, 150, 151, 152, 157, 158, 159, 160, 161, 163, 164, 166, 168, 169, 170, 171, 172, 175, 177, 178, 179, 180, 181, 183, 184, 185, 187, 188, 189, 190, 192, 193, 195, 197, 198, 199, 200, 201, 203, 204, 205, 207, 208, 211, 214, 216, 217, 218, 220, 221, 222, 223, 225, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 246, 247, 250, 251, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 265, 266, 267, 268, 270, 271, 272, 273, 274, 276, 278, 280, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 300, 301, 302, 304, 305, 307, 309, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 325, 326, 329, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 349, 350, 353, 354, 356, 358, 359, 365, 366, 367, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 386, 388, 392, 393, 394, 396, 397, 398, 401, 403, 404, 405, 407, 408, 409, 410, 413, 417, 418, 419, 420, 423, 425, 426, 428, 429, 437, 454, 455, 457, 459, 461, 469, 476, 478, 479, 483, 491, 501, 506, 507, 514, 529, 543, 544, 545, 546, 553, 570, 572, 573, 575, 576, 581, 583, 584, 590, 593, 594, 596, 599, 601, 607, 614, 618, 619, 622, 627, 634, 636, 640, 648, 649, 652, 658, 659, 661, 665, 673, 681, 683, 684, 685, 692, 693, 694, 697, 709, 712, 713, 714, 719, 720, 721, 723, 725, 727, 733, 736, 740, 748, 753, 755, 756, 760, 761, 763, 764, 765, 766, 768, 771, 772, 773, 774, 777, 778, 780, 788, 791, 803, 804, 805, 807, 808, 809, 819, 831, 833, 835, 839, 840, 849, 850, 851, 853, 861, 862, 865, 867, 870, 881, 882, 884, 886, 887, 889, 890, 891, 894, 898, 900, 909, 910, 911, 912, 915, 918, 919, 920, 925, 926, 935, 936, 943, 950, 954, 955, 956, 958, 959, 963, 964, 965, 969, 970, 976, 977, 979, 980, 982, 985, 986, 988, 989, 990, 992, 993, 994, 995, 997, 998, 999, 1000, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1015, 1016, 1017, 1018, 1020, 1022, 1023, 1024, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "scientif": [0, 33, 138, 139, 140, 233, 373, 377, 391, 397, 407, 450, 460, 499, 1011, 1013], "we": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 21, 25, 26, 27, 28, 31, 33, 35, 38, 41, 42, 43, 45, 48, 50, 51, 54, 56, 57, 58, 59, 63, 65, 66, 67, 71, 72, 73, 74, 76, 79, 81, 82, 83, 87, 90, 91, 93, 96, 97, 98, 99, 101, 103, 104, 106, 112, 113, 115, 117, 118, 119, 120, 121, 122, 123, 125, 126, 128, 129, 130, 132, 134, 135, 138, 143, 144, 145, 147, 148, 151, 153, 156, 157, 158, 159, 160, 163, 164, 168, 169, 170, 171, 172, 175, 178, 179, 180, 182, 183, 185, 187, 188, 190, 192, 194, 196, 199, 200, 201, 202, 203, 205, 207, 208, 211, 212, 213, 214, 215, 217, 220, 221, 224, 225, 228, 229, 231, 232, 233, 235, 236, 238, 239, 241, 242, 245, 246, 247, 248, 250, 251, 255, 256, 257, 258, 260, 261, 262, 263, 265, 266, 267, 269, 270, 271, 272, 274, 278, 281, 283, 285, 286, 288, 291, 292, 293, 294, 296, 299, 300, 301, 302, 305, 306, 307, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 330, 334, 335, 336, 338, 339, 340, 341, 342, 343, 346, 348, 351, 352, 353, 356, 357, 358, 359, 360, 362, 366, 367, 368, 373, 374, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 391, 392, 393, 394, 398, 403, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 448, 467, 468, 469, 470, 471, 472, 473, 474, 499, 521, 529, 530, 532, 535, 543, 544, 547, 559, 560, 561, 567, 568, 580, 581, 587, 609, 615, 625, 630, 631, 636, 638, 649, 653, 656, 657, 664, 666, 671, 672, 673, 674, 675, 690, 709, 716, 718, 723, 743, 753, 761, 778, 802, 818, 820, 841, 842, 843, 845, 847, 848, 849, 850, 851, 862, 871, 872, 873, 879, 884, 885, 887, 888, 889, 890, 892, 895, 899, 903, 951, 953, 976, 977, 979, 981, 982, 983, 984, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1011, 1012, 1016, 1017, 1018, 1019, 1020, 1021, 1024, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1043], "would": [0, 4, 6, 9, 13, 27, 33, 46, 54, 56, 59, 71, 79, 81, 82, 87, 93, 101, 112, 125, 148, 151, 156, 157, 169, 170, 171, 172, 175, 183, 189, 199, 200, 201, 214, 217, 228, 235, 238, 247, 256, 260, 261, 266, 268, 270, 278, 283, 289, 301, 305, 306, 310, 311, 318, 321, 328, 338, 342, 346, 347, 351, 353, 360, 362, 366, 374, 375, 379, 380, 381, 385, 387, 388, 391, 392, 393, 394, 398, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 430, 444, 463, 466, 480, 481, 482, 487, 525, 530, 532, 534, 539, 542, 550, 552, 554, 555, 556, 557, 558, 559, 560, 562, 563, 564, 566, 568, 581, 582, 585, 587, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 609, 633, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 670, 671, 672, 673, 674, 676, 677, 698, 700, 706, 710, 711, 718, 753, 779, 782, 786, 796, 798, 810, 824, 832, 833, 842, 850, 857, 884, 885, 887, 888, 889, 890, 891, 892, 897, 899, 900, 902, 905, 907, 908, 909, 910, 944, 947, 976, 977, 980, 983, 984, 985, 987, 988, 989, 990, 991, 992, 993, 995, 997, 1002, 1006, 1007, 1011, 1012, 1017, 1019, 1021, 1024, 1030, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "appreci": [0, 379], "citat": [0, 373, 376, 391], "paper": [0, 148, 175, 260, 376, 385, 391, 407, 409, 440, 447, 476, 502, 532, 539, 561, 639, 656, 664, 665, 669, 674, 677, 690, 785, 836, 845, 848, 891, 892, 983, 987, 990, 993, 1002, 1021, 1027, 1034, 1035], "machin": [0, 4, 6, 8, 9, 13, 28, 64, 74, 86, 118, 139, 144, 145, 148, 151, 156, 167, 171, 173, 189, 194, 211, 214, 241, 260, 263, 266, 278, 298, 303, 305, 310, 312, 317, 320, 334, 339, 342, 346, 351, 353, 366, 367, 372, 373, 374, 376, 377, 379, 382, 385, 386, 391, 392, 393, 396, 401, 405, 407, 411, 412, 414, 415, 417, 435, 437, 446, 469, 470, 476, 500, 502, 508, 514, 515, 516, 528, 530, 532, 539, 542, 553, 554, 555, 556, 557, 558, 562, 563, 564, 591, 592, 608, 609, 612, 617, 620, 632, 636, 637, 639, 641, 642, 643, 648, 649, 652, 653, 654, 655, 656, 657, 674, 680, 681, 690, 706, 711, 722, 732, 738, 740, 782, 785, 794, 824, 825, 839, 840, 845, 848, 855, 856, 857, 859, 877, 879, 885, 899, 900, 901, 902, 904, 905, 909, 910, 955, 976, 977, 979, 980, 983, 984, 985, 987, 988, 990, 993, 994, 995, 997, 1001, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1013, 1014, 1015, 1017, 1021, 1022, 1023, 1024, 1027, 1029, 1039, 1040, 1041, 1042, 1044], "python": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 166, 168, 169, 170, 171, 172, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360, 366, 368, 373, 377, 379, 380, 381, 382, 383, 384, 387, 388, 391, 393, 397, 408, 415, 494, 506, 507, 579, 697, 807, 873, 955, 987, 997, 1002, 1003, 1007, 1010, 1011, 1012, 1013, 1015, 1021, 1023, 1027, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1044], "et": [0, 11, 79, 80, 112, 127, 187, 296, 374, 376, 404, 407, 409, 412, 414, 415, 416, 449, 496, 517, 518, 526, 533, 539, 542, 561, 680, 681, 717, 718, 834, 836, 856, 857, 892, 935, 936, 983, 984, 987, 993, 997, 999, 1002, 1003, 1035, 1043], "al": [0, 11, 79, 80, 112, 127, 187, 296, 374, 376, 404, 407, 409, 412, 414, 415, 416, 449, 496, 517, 518, 526, 533, 539, 542, 561, 680, 681, 717, 718, 834, 836, 856, 857, 892, 935, 936, 983, 984, 987, 993, 997, 999, 1002, 1003, 1035, 1040, 1043, 1044], "jmlr": [0, 407, 664, 665, 674, 702, 983, 1002], "12": [0, 4, 6, 13, 15, 16, 21, 35, 36, 41, 43, 44, 54, 56, 57, 58, 74, 75, 86, 93, 121, 122, 123, 126, 148, 154, 155, 156, 164, 169, 170, 172, 179, 183, 185, 199, 207, 217, 220, 222, 223, 224, 228, 229, 231, 239, 242, 247, 248, 259, 260, 262, 263, 266, 272, 286, 309, 310, 311, 317, 320, 323, 346, 353, 376, 377, 384, 392, 394, 397, 399, 400, 407, 411, 415, 441, 445, 447, 455, 480, 481, 482, 483, 494, 530, 532, 539, 568, 662, 667, 669, 683, 684, 687, 690, 691, 722, 727, 794, 795, 797, 814, 817, 830, 851, 867, 968, 976, 977, 979, 983, 985, 988, 997, 1001, 1002, 1008, 1012, 1017, 1025, 1028, 1030, 1034, 1035, 1037, 1038, 1043, 1044], "pp": [0, 64, 148, 259, 376, 407, 409, 415, 418, 419, 442, 446, 450, 460, 509, 531, 532, 539, 588, 633, 641, 662, 683, 684, 718, 723, 727, 737, 753, 766, 780, 834, 836, 838, 855, 875, 887, 980, 987, 989, 990, 1000], "2825": 0, "2830": 0, "2011": [0, 48, 170, 221, 385, 412, 415, 533, 536, 538, 539, 545, 588, 625, 636, 656, 727, 977, 991, 1001, 1005, 1027], "bibtex": 0, "entri": [0, 17, 72, 76, 132, 164, 169, 170, 256, 315, 352, 362, 383, 385, 387, 392, 393, 404, 405, 407, 412, 414, 417, 461, 470, 494, 529, 530, 535, 543, 544, 559, 560, 586, 589, 592, 609, 618, 630, 636, 638, 645, 649, 651, 653, 654, 657, 659, 661, 662, 663, 671, 673, 680, 681, 683, 684, 697, 702, 705, 707, 710, 713, 714, 716, 723, 726, 727, 728, 731, 732, 735, 740, 753, 755, 756, 780, 782, 785, 786, 789, 790, 809, 823, 839, 840, 847, 848, 849, 850, 851, 870, 876, 888, 973, 976, 977, 983, 987, 990, 997, 1002, 1007, 1012, 1034, 1037, 1038, 1040, 1044], "articl": [0, 18, 71, 351, 374, 378, 379, 387, 411, 420, 473, 703, 983, 987, 1021, 1040], "titl": [0, 4, 5, 6, 7, 8, 9, 11, 13, 14, 15, 21, 22, 25, 26, 27, 28, 31, 33, 38, 39, 40, 42, 45, 46, 47, 49, 50, 52, 53, 55, 56, 57, 58, 59, 60, 62, 63, 64, 79, 80, 82, 83, 86, 87, 91, 92, 96, 97, 98, 99, 100, 103, 104, 105, 113, 114, 115, 118, 120, 121, 122, 125, 126, 128, 131, 134, 135, 140, 143, 144, 146, 147, 148, 151, 152, 153, 155, 156, 157, 158, 159, 169, 178, 179, 181, 183, 184, 186, 187, 188, 191, 192, 198, 199, 201, 203, 204, 205, 207, 208, 213, 216, 217, 220, 221, 222, 228, 232, 233, 234, 236, 237, 238, 245, 246, 247, 248, 249, 250, 251, 254, 255, 259, 260, 261, 263, 264, 265, 269, 270, 274, 285, 286, 289, 290, 291, 292, 294, 295, 296, 305, 309, 310, 311, 312, 327, 330, 334, 335, 336, 337, 338, 341, 342, 347, 348, 351, 357, 358, 359, 378, 379, 383, 387, 408, 987, 1010, 1017], "p": [0, 11, 14, 25, 27, 28, 42, 62, 81, 82, 86, 93, 103, 124, 144, 148, 154, 175, 211, 216, 217, 220, 222, 232, 248, 260, 266, 267, 296, 373, 374, 376, 377, 384, 387, 404, 405, 407, 409, 410, 412, 414, 416, 417, 418, 420, 440, 442, 444, 445, 448, 453, 454, 455, 467, 469, 472, 473, 476, 496, 526, 532, 536, 538, 539, 545, 547, 548, 549, 551, 553, 554, 555, 556, 557, 559, 562, 563, 564, 588, 590, 591, 592, 593, 594, 596, 597, 598, 602, 603, 604, 605, 606, 607, 613, 614, 625, 638, 641, 686, 688, 690, 692, 697, 703, 713, 721, 738, 749, 783, 785, 798, 804, 805, 806, 809, 824, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 845, 847, 849, 850, 851, 852, 853, 855, 859, 860, 875, 887, 893, 909, 910, 911, 980, 981, 983, 984, 985, 987, 989, 990, 991, 992, 993, 994, 997, 1001, 1002, 1016, 1019, 1027, 1028, 1030, 1033, 1035, 1042, 1043, 1044], "ython": 0, "f": [0, 4, 5, 7, 11, 12, 13, 15, 17, 18, 21, 27, 31, 33, 38, 44, 48, 49, 50, 53, 54, 56, 59, 65, 68, 72, 76, 87, 99, 112, 115, 118, 119, 120, 122, 123, 125, 132, 133, 139, 142, 144, 147, 148, 149, 151, 157, 158, 160, 166, 168, 169, 170, 171, 172, 175, 183, 185, 188, 199, 200, 201, 203, 209, 213, 217, 221, 232, 234, 235, 238, 242, 250, 258, 260, 261, 262, 263, 266, 267, 269, 270, 272, 283, 286, 299, 300, 301, 307, 310, 311, 315, 317, 319, 321, 322, 325, 326, 337, 342, 346, 351, 352, 353, 362, 374, 379, 380, 381, 383, 385, 391, 405, 408, 412, 414, 415, 416, 417, 485, 506, 507, 529, 530, 535, 536, 564, 579, 580, 581, 590, 593, 594, 596, 597, 598, 602, 603, 604, 605, 606, 607, 615, 625, 630, 633, 656, 694, 711, 720, 723, 726, 727, 753, 780, 781, 784, 785, 797, 798, 801, 803, 804, 805, 806, 809, 811, 812, 813, 814, 815, 816, 817, 823, 824, 826, 856, 857, 861, 870, 873, 874, 878, 879, 880, 906, 914, 919, 920, 971, 979, 982, 991, 994, 995, 997, 1001, 1008, 1029, 1035, 1036, 1037, 1039, 1041], "g": [0, 4, 7, 8, 10, 12, 17, 25, 26, 27, 28, 33, 54, 56, 66, 71, 74, 83, 87, 103, 112, 115, 116, 124, 125, 132, 151, 152, 153, 154, 156, 158, 159, 160, 164, 168, 181, 184, 199, 200, 201, 203, 217, 221, 225, 234, 235, 245, 260, 264, 265, 271, 281, 289, 305, 310, 328, 345, 346, 353, 362, 366, 371, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 391, 393, 398, 401, 403, 405, 406, 407, 409, 411, 412, 414, 415, 416, 417, 419, 435, 441, 442, 445, 447, 463, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 501, 526, 529, 531, 532, 535, 536, 539, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 586, 587, 588, 589, 591, 592, 595, 602, 608, 609, 615, 620, 621, 628, 631, 632, 633, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 684, 688, 690, 695, 718, 725, 735, 737, 760, 782, 785, 797, 798, 799, 800, 802, 803, 805, 814, 818, 820, 821, 822, 823, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 846, 848, 849, 850, 851, 855, 856, 857, 859, 862, 864, 865, 866, 869, 871, 872, 875, 877, 878, 879, 880, 882, 884, 885, 886, 887, 888, 889, 890, 894, 895, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 935, 936, 947, 955, 976, 977, 981, 983, 984, 985, 987, 988, 989, 990, 991, 992, 993, 994, 997, 1001, 1002, 1003, 1007, 1010, 1011, 1016, 1021, 1027, 1031, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044], "A": [0, 14, 17, 18, 19, 20, 23, 26, 28, 32, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 54, 55, 57, 58, 60, 61, 62, 63, 65, 68, 69, 76, 79, 82, 87, 93, 97, 98, 99, 103, 113, 114, 119, 120, 122, 131, 135, 138, 139, 140, 145, 146, 147, 151, 154, 156, 158, 159, 160, 166, 169, 170, 183, 187, 200, 203, 209, 213, 214, 217, 221, 235, 238, 248, 260, 261, 263, 267, 274, 278, 299, 305, 307, 310, 315, 317, 320, 326, 327, 328, 330, 332, 338, 343, 351, 352, 353, 358, 360, 362, 366, 368, 373, 374, 376, 377, 379, 381, 382, 384, 387, 391, 392, 393, 394, 396, 398, 402, 404, 405, 407, 408, 409, 410, 412, 413, 414, 415, 416, 418, 419, 420, 421, 430, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 455, 456, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 486, 488, 489, 490, 492, 495, 498, 499, 500, 501, 502, 506, 508, 509, 510, 511, 512, 518, 520, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 579, 580, 581, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 605, 606, 608, 609, 615, 618, 625, 626, 627, 628, 630, 631, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 683, 684, 686, 687, 688, 689, 690, 691, 692, 693, 702, 703, 708, 709, 710, 714, 715, 717, 719, 720, 721, 722, 723, 728, 733, 734, 737, 739, 740, 741, 744, 746, 747, 748, 749, 751, 752, 753, 754, 755, 756, 761, 763, 764, 771, 772, 773, 774, 775, 778, 785, 787, 788, 790, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 883, 884, 885, 887, 888, 889, 890, 891, 892, 894, 895, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 934, 935, 936, 943, 944, 945, 946, 947, 972, 976, 977, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 997, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1012, 1013, 1019, 1020, 1021, 1023, 1027, 1029, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "v": [0, 4, 9, 13, 14, 17, 18, 20, 28, 31, 34, 35, 37, 38, 39, 40, 41, 42, 45, 48, 50, 56, 57, 59, 69, 71, 76, 78, 81, 83, 84, 85, 86, 88, 96, 98, 99, 103, 116, 118, 119, 120, 125, 126, 127, 138, 144, 151, 166, 167, 172, 173, 177, 179, 188, 197, 198, 199, 200, 202, 203, 204, 205, 208, 214, 218, 224, 232, 246, 247, 250, 251, 253, 256, 275, 276, 278, 294, 312, 315, 335, 347, 352, 362, 367, 371, 376, 377, 379, 385, 387, 393, 403, 404, 405, 406, 409, 410, 412, 415, 430, 439, 443, 450, 460, 461, 462, 463, 468, 471, 472, 473, 474, 475, 480, 481, 482, 494, 510, 522, 528, 529, 535, 539, 543, 544, 548, 550, 552, 554, 556, 558, 560, 562, 563, 566, 568, 579, 587, 591, 592, 598, 604, 609, 628, 629, 632, 633, 637, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 668, 670, 671, 674, 676, 677, 686, 693, 697, 699, 702, 715, 733, 734, 736, 751, 752, 754, 785, 792, 796, 801, 808, 810, 821, 825, 827, 828, 829, 832, 833, 834, 842, 850, 852, 855, 857, 859, 860, 863, 866, 872, 873, 874, 879, 880, 883, 893, 899, 900, 901, 902, 904, 905, 908, 910, 914, 981, 982, 983, 984, 987, 988, 989, 992, 995, 1001, 1002, 1004, 1008, 1023, 1027, 1030, 1031, 1032, 1035, 1037, 1038, 1041, 1042], "b": [0, 8, 10, 25, 27, 60, 66, 81, 103, 114, 115, 121, 125, 126, 135, 138, 152, 153, 154, 159, 164, 181, 183, 184, 199, 200, 205, 217, 236, 238, 259, 263, 265, 270, 274, 281, 318, 328, 362, 374, 376, 379, 383, 384, 385, 404, 405, 407, 410, 411, 412, 415, 435, 480, 496, 498, 539, 564, 586, 587, 588, 589, 605, 606, 608, 609, 626, 644, 645, 646, 647, 656, 667, 670, 672, 674, 678, 685, 686, 703, 717, 727, 728, 789, 790, 807, 808, 846, 872, 873, 874, 875, 878, 879, 887, 914, 921, 936, 937, 950, 952, 977, 979, 983, 984, 985, 987, 990, 992, 997, 1001, 1002, 1016, 1027, 1035, 1038, 1040, 1041, 1042], "o": [0, 18, 20, 28, 31, 39, 50, 56, 61, 62, 64, 65, 83, 86, 92, 98, 129, 148, 159, 187, 192, 197, 199, 214, 234, 245, 260, 262, 269, 305, 306, 310, 316, 319, 322, 329, 342, 356, 366, 374, 376, 379, 397, 407, 409, 412, 414, 418, 420, 442, 445, 446, 448, 471, 473, 532, 602, 625, 664, 665, 690, 827, 855, 870, 911, 955, 956, 979, 981, 983, 984, 987, 988, 990, 991, 1001, 1002, 1003, 1027, 1030, 1033, 1035, 1036, 1039, 1040, 1042, 1043, 1044], "m": [0, 4, 8, 11, 20, 27, 28, 45, 59, 60, 64, 65, 66, 81, 82, 96, 112, 135, 156, 181, 199, 217, 260, 264, 296, 322, 329, 334, 345, 351, 366, 367, 373, 374, 376, 377, 383, 385, 393, 397, 404, 405, 407, 409, 412, 414, 416, 418, 442, 443, 444, 448, 455, 471, 472, 498, 511, 526, 530, 532, 534, 539, 637, 643, 647, 662, 669, 683, 684, 687, 691, 706, 714, 723, 738, 753, 755, 756, 794, 795, 845, 870, 936, 966, 967, 977, 979, 981, 983, 984, 985, 987, 988, 989, 990, 991, 995, 997, 1001, 1003, 1011, 1035, 1036, 1037, 1038, 1041, 1042, 1043, 1044], "r": [0, 8, 10, 11, 12, 14, 17, 25, 26, 27, 28, 40, 44, 66, 76, 79, 80, 81, 82, 87, 96, 103, 106, 112, 115, 116, 121, 125, 126, 127, 135, 144, 152, 153, 154, 158, 159, 160, 163, 164, 169, 181, 183, 184, 188, 199, 206, 209, 217, 225, 231, 234, 245, 248, 251, 259, 260, 263, 265, 266, 267, 270, 273, 275, 281, 285, 286, 290, 294, 296, 311, 319, 340, 342, 353, 362, 374, 376, 380, 383, 391, 393, 404, 405, 407, 409, 410, 411, 412, 414, 415, 424, 430, 435, 444, 449, 451, 463, 467, 472, 476, 480, 481, 482, 496, 502, 511, 518, 532, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 562, 563, 565, 566, 567, 568, 586, 587, 588, 589, 604, 607, 608, 609, 625, 633, 637, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 677, 678, 683, 684, 690, 694, 714, 719, 720, 721, 725, 727, 778, 782, 785, 796, 810, 813, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 845, 846, 848, 849, 850, 856, 857, 870, 875, 887, 894, 895, 899, 900, 901, 902, 904, 905, 907, 908, 909, 910, 912, 953, 977, 979, 981, 983, 984, 987, 988, 989, 990, 991, 994, 995, 997, 1001, 1002, 1003, 1006, 1021, 1027, 1031, 1034, 1037, 1038, 1039, 1040, 1042, 1044], "d": [0, 6, 7, 8, 10, 11, 12, 13, 15, 17, 18, 20, 32, 33, 38, 39, 43, 49, 50, 51, 61, 62, 64, 71, 72, 83, 90, 93, 96, 99, 103, 105, 151, 159, 199, 207, 215, 217, 225, 229, 231, 232, 233, 234, 248, 259, 260, 268, 281, 289, 290, 296, 301, 325, 326, 329, 338, 342, 343, 353, 373, 374, 376, 381, 385, 391, 405, 407, 409, 410, 412, 414, 415, 417, 418, 442, 444, 445, 450, 458, 461, 486, 491, 501, 524, 532, 534, 555, 556, 563, 564, 579, 580, 588, 612, 613, 617, 620, 621, 642, 643, 646, 667, 668, 669, 678, 686, 687, 690, 691, 695, 697, 703, 706, 719, 720, 721, 723, 753, 761, 775, 778, 785, 808, 834, 836, 838, 839, 840, 855, 866, 870, 872, 873, 875, 887, 892, 909, 910, 914, 979, 981, 983, 984, 985, 986, 987, 989, 995, 997, 999, 1002, 1003, 1017, 1018, 1019, 1030, 1032, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1043], "perrot": [0, 1027], "e": [0, 4, 8, 10, 11, 13, 17, 26, 27, 33, 35, 54, 56, 58, 62, 71, 79, 81, 82, 83, 86, 87, 91, 99, 101, 112, 115, 122, 124, 125, 128, 138, 144, 147, 148, 159, 168, 169, 170, 175, 179, 183, 188, 189, 199, 200, 201, 203, 217, 220, 221, 234, 235, 256, 260, 261, 263, 265, 266, 274, 275, 278, 281, 289, 296, 307, 310, 315, 317, 346, 353, 358, 359, 360, 362, 366, 367, 368, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 391, 392, 393, 397, 398, 401, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 435, 437, 439, 441, 442, 443, 445, 447, 448, 452, 461, 463, 464, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 494, 496, 498, 499, 500, 501, 522, 531, 532, 533, 534, 535, 536, 537, 538, 539, 544, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 575, 579, 580, 586, 587, 588, 589, 591, 592, 595, 601, 602, 603, 604, 605, 606, 607, 608, 609, 615, 620, 621, 628, 631, 632, 633, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 685, 686, 688, 690, 692, 695, 697, 699, 702, 703, 706, 707, 725, 726, 727, 728, 735, 738, 739, 752, 760, 764, 782, 785, 794, 795, 796, 797, 798, 799, 800, 802, 803, 805, 809, 810, 814, 818, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 849, 850, 851, 855, 856, 857, 859, 862, 864, 865, 866, 867, 869, 870, 871, 872, 873, 874, 875, 877, 878, 879, 880, 882, 884, 885, 886, 887, 888, 889, 890, 894, 895, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 914, 930, 935, 936, 938, 941, 942, 944, 947, 955, 962, 973, 976, 977, 979, 981, 982, 983, 984, 985, 986, 987, 989, 990, 991, 992, 993, 994, 995, 997, 998, 1001, 1002, 1003, 1007, 1010, 1011, 1019, 1020, 1021, 1027, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "journal": [0, 82, 170, 260, 266, 278, 373, 374, 376, 405, 407, 409, 414, 450, 460, 471, 532, 539, 625, 633, 643, 687, 690, 691, 703, 713, 728, 731, 732, 755, 756, 783, 824, 829, 875, 887, 976, 977, 981, 983, 984, 985, 988, 994, 999, 1001, 1002], "research": [0, 148, 168, 260, 266, 278, 374, 376, 391, 407, 499, 511, 633, 643, 690, 732, 824, 829, 976, 984, 988, 990, 1002, 1006, 1007, 1011], "volum": [0, 67, 80, 148, 156, 374, 376, 407, 409, 471, 532, 766, 983, 1002, 1011], "page": [0, 12, 18, 27, 72, 73, 117, 119, 120, 128, 129, 132, 135, 145, 148, 156, 169, 170, 171, 180, 220, 229, 230, 231, 235, 239, 240, 241, 242, 250, 258, 260, 261, 267, 272, 302, 311, 316, 317, 319, 320, 322, 327, 360, 366, 374, 376, 379, 381, 383, 385, 387, 394, 406, 407, 409, 471, 514, 515, 516, 626, 642, 829, 894, 936, 977, 983, 987, 988, 1012, 1021, 1025, 1027, 1031, 1032], "want": [0, 4, 12, 21, 25, 26, 27, 56, 65, 72, 148, 164, 169, 199, 200, 201, 235, 238, 251, 260, 274, 278, 286, 301, 330, 335, 351, 362, 366, 367, 368, 377, 378, 380, 381, 383, 384, 385, 391, 392, 393, 394, 397, 398, 401, 405, 406, 407, 408, 409, 414, 415, 416, 498, 501, 502, 508, 533, 547, 652, 653, 654, 656, 657, 664, 666, 672, 673, 674, 761, 845, 848, 864, 871, 892, 899, 976, 983, 986, 987, 988, 991, 993, 997, 998, 1002, 1006, 1007, 1012, 1020, 1027, 1041], "its": [0, 4, 9, 12, 13, 14, 20, 27, 35, 38, 56, 66, 67, 79, 81, 83, 87, 91, 92, 93, 101, 110, 112, 118, 121, 123, 125, 138, 148, 151, 156, 158, 169, 170, 172, 175, 178, 188, 212, 216, 217, 222, 228, 235, 237, 238, 240, 242, 245, 250, 251, 259, 263, 265, 267, 269, 283, 285, 289, 290, 307, 318, 328, 335, 342, 348, 351, 352, 356, 360, 362, 367, 368, 372, 373, 374, 375, 379, 380, 381, 383, 384, 387, 391, 392, 393, 394, 397, 398, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 423, 438, 440, 442, 444, 448, 452, 454, 458, 461, 462, 463, 465, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 495, 501, 521, 529, 531, 532, 535, 536, 538, 539, 540, 542, 548, 551, 553, 554, 555, 556, 557, 558, 562, 563, 564, 581, 583, 584, 585, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 605, 606, 609, 610, 611, 612, 613, 614, 617, 618, 619, 620, 621, 622, 623, 625, 642, 643, 669, 670, 672, 683, 684, 685, 686, 690, 694, 697, 706, 722, 726, 727, 733, 734, 738, 775, 778, 780, 794, 795, 796, 820, 827, 828, 830, 841, 842, 843, 845, 846, 847, 849, 850, 851, 858, 859, 863, 868, 871, 872, 874, 891, 892, 895, 899, 900, 907, 909, 919, 920, 925, 931, 955, 957, 976, 979, 982, 983, 984, 986, 987, 988, 989, 990, 993, 994, 995, 1000, 1001, 1002, 1003, 1006, 1011, 1012, 1014, 1016, 1019, 1020, 1021, 1029, 1030, 1031, 1033, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045], "api": [0, 12, 51, 57, 72, 108, 109, 117, 166, 227, 229, 235, 239, 240, 243, 257, 262, 269, 270, 283, 322, 352, 353, 368, 372, 373, 379, 380, 382, 383, 388, 389, 391, 392, 394, 397, 401, 412, 414, 415, 417, 421, 424, 425, 426, 429, 431, 436, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 462, 466, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 494, 502, 506, 508, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 561, 562, 564, 565, 566, 567, 568, 577, 578, 579, 580, 581, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 609, 625, 626, 627, 628, 633, 636, 637, 638, 639, 640, 656, 675, 686, 687, 688, 689, 690, 700, 794, 795, 799, 800, 802, 818, 825, 843, 845, 847, 848, 851, 855, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 882, 884, 885, 886, 887, 888, 889, 890, 891, 892, 897, 903, 904, 953, 955, 971, 976, 985, 986, 987, 990, 997, 1001, 1006, 1007, 1008, 1011, 1012, 1016, 1018, 1023, 1024, 1025, 1026, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1045], "design": [0, 14, 21, 81, 112, 132, 154, 168, 169, 180, 250, 305, 311, 360, 368, 373, 379, 384, 391, 392, 393, 394, 396, 407, 414, 416, 513, 526, 630, 631, 646, 663, 667, 674, 678, 683, 796, 814, 815, 834, 836, 977, 983, 984, 987, 988, 997, 1006, 1007, 1011, 1014, 1029, 1036], "mai": [0, 8, 20, 26, 40, 45, 47, 57, 72, 87, 96, 122, 123, 148, 155, 157, 159, 169, 172, 175, 179, 183, 188, 203, 205, 225, 235, 238, 263, 265, 267, 268, 299, 310, 326, 338, 342, 346, 351, 352, 353, 362, 366, 367, 368, 371, 373, 374, 375, 376, 377, 378, 379, 381, 383, 384, 387, 391, 393, 394, 397, 398, 401, 404, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 430, 437, 438, 439, 441, 442, 443, 444, 445, 447, 449, 450, 451, 452, 457, 460, 463, 467, 470, 480, 481, 482, 485, 486, 487, 494, 506, 507, 513, 532, 533, 536, 538, 542, 545, 546, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 570, 572, 579, 592, 595, 600, 608, 609, 615, 618, 632, 633, 635, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 670, 671, 672, 674, 675, 676, 677, 679, 682, 684, 686, 687, 689, 690, 691, 693, 695, 703, 710, 713, 714, 716, 717, 719, 720, 721, 723, 735, 753, 760, 782, 783, 796, 798, 799, 800, 801, 810, 811, 812, 815, 816, 820, 824, 827, 832, 833, 834, 835, 836, 838, 841, 842, 843, 845, 847, 849, 850, 851, 857, 858, 859, 862, 864, 874, 876, 877, 878, 879, 880, 882, 888, 891, 892, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 912, 917, 939, 940, 955, 976, 977, 979, 981, 983, 984, 987, 988, 989, 990, 991, 993, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1007, 1012, 1018, 1019, 1027, 1029, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "consid": [0, 4, 12, 13, 14, 21, 26, 40, 56, 67, 72, 82, 91, 96, 100, 122, 125, 143, 147, 148, 164, 170, 199, 201, 235, 260, 263, 267, 271, 283, 286, 289, 290, 305, 317, 335, 342, 343, 346, 351, 362, 366, 367, 368, 371, 378, 379, 381, 385, 387, 391, 393, 394, 403, 407, 412, 413, 414, 415, 416, 417, 418, 419, 436, 442, 444, 448, 455, 472, 506, 507, 519, 531, 547, 548, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 583, 584, 586, 587, 589, 591, 605, 606, 618, 629, 630, 631, 644, 650, 656, 657, 658, 660, 669, 677, 686, 687, 688, 690, 691, 692, 694, 698, 700, 703, 705, 707, 713, 723, 727, 731, 753, 783, 785, 791, 841, 842, 843, 845, 847, 849, 850, 851, 854, 856, 857, 862, 872, 873, 880, 894, 895, 904, 905, 907, 908, 909, 910, 971, 976, 982, 983, 984, 985, 987, 988, 990, 993, 994, 995, 997, 1001, 1002, 1003, 1007, 1012, 1019, 1030, 1031, 1035, 1039, 1040, 1042, 1043, 1044], "softwar": [0, 148, 366, 376, 379, 387, 391, 393, 415, 625, 633, 656, 977, 1011], "from": [0, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 86, 87, 88, 90, 91, 92, 93, 94, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 147, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 168, 169, 170, 172, 173, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 312, 313, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 366, 368, 371, 372, 374, 375, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 392, 393, 394, 396, 397, 398, 401, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 504, 505, 506, 507, 508, 510, 512, 513, 514, 515, 516, 517, 519, 521, 522, 524, 525, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 682, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 944, 945, 946, 948, 949, 950, 951, 952, 954, 955, 956, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 971, 972, 973, 974, 975, 976, 977, 979, 981, 982, 983, 984, 985, 986, 988, 989, 990, 991, 992, 993, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1011, 1013, 1015, 1016, 1017, 1018, 1023, 1024, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "2013": [0, 175, 376, 407, 411, 412, 534, 723, 753, 979, 987, 1005, 1028, 1029], "inproceed": 0, "sklearn_api": 0, "ga": 0, "l": [0, 7, 14, 17, 18, 41, 47, 48, 67, 68, 82, 115, 148, 171, 191, 194, 203, 208, 209, 265, 266, 267, 278, 300, 309, 346, 376, 377, 385, 387, 404, 405, 407, 411, 412, 414, 417, 472, 514, 515, 516, 536, 538, 545, 553, 554, 555, 556, 563, 564, 588, 605, 606, 608, 609, 613, 617, 620, 621, 632, 646, 647, 656, 667, 670, 672, 678, 685, 687, 690, 691, 703, 713, 722, 723, 728, 753, 783, 836, 870, 907, 908, 909, 910, 976, 981, 983, 984, 987, 989, 990, 991, 995, 999, 1001, 1003, 1020, 1030, 1035, 1039, 1040, 1041, 1042, 1044], "booktitl": 0, "ecml": 0, "pkdd": 0, "workshop": [0, 407, 415, 834, 989, 1005], "languag": [0, 353, 384, 401, 412, 415, 1001, 1006, 1007, 1011, 1013], "data": [0, 3, 6, 8, 11, 13, 14, 15, 16, 17, 20, 22, 26, 31, 32, 33, 34, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 49, 52, 53, 54, 55, 57, 60, 61, 62, 63, 66, 69, 70, 72, 73, 75, 77, 80, 82, 91, 93, 95, 96, 99, 100, 104, 106, 107, 110, 112, 114, 115, 117, 118, 121, 122, 124, 125, 129, 130, 131, 133, 135, 138, 139, 140, 145, 150, 151, 152, 153, 155, 156, 158, 160, 161, 163, 166, 169, 170, 177, 178, 181, 182, 183, 184, 188, 189, 191, 194, 195, 196, 197, 198, 199, 200, 201, 202, 205, 207, 208, 212, 213, 215, 216, 217, 218, 220, 221, 222, 223, 224, 228, 231, 232, 233, 235, 237, 238, 239, 242, 245, 246, 247, 248, 249, 251, 254, 258, 260, 262, 263, 264, 265, 268, 274, 278, 281, 283, 287, 289, 291, 292, 293, 294, 296, 300, 301, 304, 306, 307, 308, 312, 313, 315, 317, 319, 320, 321, 326, 327, 329, 330, 334, 335, 337, 342, 343, 351, 357, 358, 359, 360, 365, 367, 371, 372, 373, 375, 376, 379, 381, 382, 385, 386, 387, 388, 392, 397, 398, 401, 403, 404, 405, 406, 409, 410, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 424, 425, 426, 431, 432, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 511, 512, 513, 518, 519, 520, 521, 522, 524, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 570, 571, 579, 580, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 604, 605, 606, 607, 608, 609, 615, 616, 620, 623, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 694, 695, 696, 697, 698, 699, 700, 702, 703, 705, 706, 708, 709, 711, 715, 716, 718, 722, 724, 725, 726, 727, 728, 731, 733, 734, 735, 737, 738, 751, 752, 754, 758, 760, 761, 766, 780, 781, 782, 784, 785, 786, 790, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 862, 863, 864, 865, 866, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 894, 895, 896, 897, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 915, 917, 918, 919, 920, 923, 924, 925, 933, 935, 936, 950, 953, 958, 959, 961, 962, 963, 964, 965, 966, 967, 968, 974, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1013, 1014, 1016, 1017, 1019, 1023, 1024, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "mine": [0, 260, 352, 374, 407, 418, 442, 509, 561, 718, 731, 737, 780, 983, 987, 993, 999], "108": [0, 8, 42, 69, 194, 218, 358, 361, 1008, 1028], "122": [0, 13, 114, 156, 164, 170, 233, 385, 988], "high": [0, 4, 9, 11, 12, 26, 28, 32, 38, 41, 45, 50, 56, 58, 63, 66, 71, 75, 81, 82, 98, 99, 115, 117, 118, 119, 120, 125, 126, 128, 130, 139, 140, 148, 151, 157, 164, 168, 170, 171, 172, 183, 194, 200, 201, 203, 213, 220, 221, 222, 228, 232, 245, 251, 258, 262, 266, 267, 275, 289, 290, 299, 301, 307, 309, 310, 311, 312, 321, 328, 335, 337, 338, 351, 352, 358, 359, 366, 374, 376, 379, 384, 387, 388, 391, 392, 404, 405, 406, 407, 411, 413, 414, 415, 416, 417, 442, 445, 447, 448, 450, 467, 480, 481, 482, 551, 552, 555, 556, 557, 558, 561, 562, 563, 564, 565, 566, 642, 668, 669, 677, 687, 690, 691, 723, 728, 739, 743, 753, 786, 789, 804, 806, 839, 840, 844, 873, 874, 878, 880, 901, 903, 904, 907, 908, 909, 910, 956, 976, 981, 982, 983, 984, 986, 987, 990, 991, 993, 995, 997, 999, 1002, 1003, 1004, 1006, 1007, 1012, 1013, 1015, 1021, 1027, 1028, 1030, 1031, 1035, 1038, 1039, 1040, 1041, 1042], "qualiti": [0, 6, 21, 25, 38, 47, 49, 50, 59, 99, 121, 169, 205, 254, 258, 267, 268, 269, 342, 379, 387, 391, 393, 401, 402, 406, 407, 409, 412, 450, 460, 467, 472, 555, 556, 557, 558, 562, 563, 740, 810, 891, 892, 907, 908, 909, 910, 936, 982, 984, 992, 999, 1003, 1006, 1007, 1011, 1016, 1017, 1023], "png": [0, 33, 911], "svg": 0, "logo": [0, 411, 803], "avail": [0, 5, 11, 12, 14, 42, 57, 58, 99, 120, 124, 148, 151, 156, 160, 168, 169, 170, 188, 199, 207, 217, 221, 235, 238, 257, 258, 263, 264, 267, 288, 289, 290, 296, 310, 315, 316, 317, 318, 320, 321, 328, 330, 362, 366, 373, 374, 376, 377, 378, 379, 380, 384, 388, 392, 393, 397, 401, 404, 406, 407, 408, 411, 412, 413, 414, 415, 416, 418, 445, 448, 449, 450, 451, 467, 468, 469, 470, 471, 472, 473, 474, 486, 487, 488, 489, 490, 491, 492, 493, 495, 496, 506, 533, 547, 553, 554, 555, 556, 557, 558, 562, 563, 586, 589, 591, 592, 608, 609, 625, 630, 631, 645, 649, 651, 653, 655, 659, 661, 663, 666, 668, 670, 671, 672, 674, 687, 694, 697, 729, 730, 796, 799, 800, 810, 821, 822, 827, 828, 829, 830, 831, 832, 833, 845, 856, 857, 859, 866, 875, 878, 883, 887, 892, 943, 948, 955, 977, 981, 984, 986, 987, 988, 989, 990, 993, 997, 1000, 1001, 1002, 1005, 1006, 1007, 1010, 1011, 1012, 1016, 1021, 1023, 1027, 1032, 1033, 1034, 1035, 1036, 1037, 1040, 1041, 1043], "doc": [0, 4, 8, 20, 351, 353, 367, 377, 379, 383, 384, 387, 393, 397, 400, 401, 415, 586, 587, 589, 775, 778, 789, 790, 822, 1021, 1027, 1031, 1041], "sourc": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 166, 168, 169, 170, 171, 172, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360, 362, 373, 376, 378, 379, 380, 382, 383, 385, 387, 388, 391, 392, 397, 401, 404, 408, 412, 414, 415, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 953, 954, 955, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 971, 972, 973, 974, 975, 984, 997, 1003, 1006, 1008, 1011, 1020, 1021, 1037, 1041], "directori": [0, 8, 285, 373, 377, 379, 381, 385, 387, 393, 397, 408, 439, 443, 448, 484, 497, 859, 860, 1041], "driven": [0, 172, 1011], "howev": [0, 4, 5, 7, 13, 14, 25, 26, 28, 38, 48, 50, 54, 56, 61, 73, 76, 79, 83, 86, 101, 103, 115, 117, 118, 122, 125, 126, 132, 145, 148, 151, 156, 157, 170, 171, 180, 188, 199, 203, 221, 224, 225, 228, 234, 235, 260, 267, 274, 278, 281, 283, 288, 300, 305, 317, 342, 346, 351, 352, 362, 366, 367, 368, 373, 374, 376, 377, 378, 379, 381, 385, 387, 391, 393, 398, 401, 403, 404, 405, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 438, 441, 445, 447, 449, 452, 457, 494, 506, 530, 549, 565, 579, 580, 581, 587, 604, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 628, 630, 631, 636, 641, 653, 654, 670, 685, 690, 693, 698, 760, 762, 796, 799, 800, 810, 822, 826, 827, 838, 856, 857, 862, 871, 872, 877, 901, 902, 904, 915, 956, 976, 977, 980, 981, 982, 983, 984, 986, 987, 988, 990, 991, 992, 994, 995, 997, 1001, 1002, 1003, 1012, 1016, 1019, 1036, 1037, 1039, 1040, 1043], "institut": [0, 376, 990], "privat": [0, 383, 393, 394, 915, 1011, 1027, 1035, 1037, 1038, 1040, 1041], "grant": [0, 238, 379], "assur": [0, 393, 794, 795, 1034, 1035, 1036, 1037, 1038, 1039, 1040], "sustain": 0, "like": [0, 4, 12, 13, 20, 53, 56, 59, 61, 71, 90, 93, 99, 103, 105, 110, 112, 114, 119, 125, 128, 151, 157, 169, 179, 199, 251, 260, 263, 264, 267, 268, 274, 292, 302, 305, 310, 311, 315, 328, 338, 342, 351, 352, 362, 366, 368, 371, 373, 374, 377, 378, 379, 381, 383, 386, 387, 388, 391, 392, 393, 401, 403, 405, 407, 408, 410, 411, 412, 414, 415, 416, 418, 419, 420, 422, 423, 424, 425, 426, 428, 429, 430, 431, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 456, 457, 458, 459, 460, 461, 462, 463, 465, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 510, 511, 513, 517, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 577, 579, 580, 581, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 731, 732, 733, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 760, 761, 763, 764, 765, 766, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 917, 924, 925, 938, 941, 950, 951, 955, 958, 959, 960, 972, 974, 976, 979, 981, 982, 983, 984, 987, 989, 990, 991, 993, 994, 997, 1002, 1003, 1006, 1007, 1011, 1012, 1019, 1021, 1024, 1027, 1030, 1031, 1034, 1035, 1037, 1038, 1039, 1041, 1042, 1043, 1044], "thank": [0, 4, 18, 26, 56, 87, 171, 175, 199, 269, 351, 352, 378, 387, 1006, 1011, 1027, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "funder": 0, "member": [0, 351, 352, 374, 379, 382, 394, 407, 422, 440, 444, 446, 449, 451, 490, 553, 554, 555, 556, 561, 562, 563, 564, 579, 656, 657, 664, 665, 666, 674, 675, 676, 702, 703, 713, 715, 728, 733, 734, 754, 783, 792, 796, 899, 983, 990, 1012, 1027, 1039, 1042], "consortium": [0, 1011], "foundat": [0, 132, 379, 405, 990], "fran\u00e7oi": [0, 1030], "goupil": 0, "nvidia": [0, 391], "2022": [0, 367, 414, 703, 997, 1041, 1042], "face": [0, 3, 5, 15, 16, 37, 49, 52, 54, 69, 95, 99, 101, 103, 105, 106, 107, 120, 166, 175, 227, 232, 234, 243, 351, 372, 379, 383, 407, 412, 414, 416, 447, 470, 491, 492, 493, 519, 530, 531, 535, 537, 538, 539, 541, 556, 582, 655, 671, 695, 711, 810, 825, 842, 879, 904, 922, 990, 1003, 1004, 1008, 1015, 1020, 1023, 1027, 1035], "2023": [0, 391, 405, 1042, 1043], "microsoft": [0, 12, 377, 380, 397], "m\u00fcller": [0, 32, 306, 307, 394, 412, 533, 865, 991, 997, 1001, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1039, 1041], "2020": [0, 374, 1037, 1038, 1039, 1040], "quansight": 0, "lab": [0, 374, 466, 534, 897, 1011, 1038], "2021": [0, 377, 379, 669, 1039, 1040], "columbia": 0, "univers": [0, 159, 351, 374, 376, 382, 407, 412, 415, 588, 785, 834, 838, 894, 983, 985, 987, 989], "2016": [0, 225, 373, 407, 976, 1032, 1033], "sydnei": 0, "2017": [0, 260, 373, 405, 407, 418, 442, 987, 1033, 1034], "receiv": [0, 20, 138, 166, 229, 235, 241, 253, 255, 257, 262, 267, 276, 328, 353, 362, 379, 381, 387, 393, 411, 414, 502, 656, 700, 704, 706, 724, 779, 785, 786, 815, 825, 827, 828, 866, 904, 988, 991, 992, 1001, 1008, 1037, 1038], "improv": [0, 4, 25, 26, 34, 79, 80, 83, 101, 106, 112, 113, 118, 121, 123, 124, 125, 127, 132, 144, 164, 169, 175, 185, 199, 207, 217, 261, 263, 278, 283, 286, 302, 310, 321, 341, 342, 352, 362, 367, 377, 382, 384, 385, 387, 388, 391, 393, 394, 401, 406, 412, 414, 416, 447, 448, 529, 530, 532, 535, 536, 537, 539, 540, 541, 544, 552, 555, 556, 557, 558, 559, 560, 562, 563, 608, 609, 641, 650, 662, 664, 665, 666, 670, 671, 672, 673, 674, 676, 683, 685, 690, 726, 727, 781, 784, 785, 848, 856, 857, 873, 875, 887, 907, 908, 910, 936, 981, 983, 984, 987, 990, 991, 1001, 1002, 1003, 1005, 1006, 1007, 1011, 1019, 1027, 1028, 1029, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "alfr": 0, "sloan": 0, "posit": [0, 4, 6, 8, 11, 12, 17, 25, 26, 28, 68, 106, 129, 134, 168, 169, 183, 184, 194, 199, 200, 201, 203, 217, 223, 232, 238, 257, 260, 263, 267, 269, 270, 305, 316, 317, 321, 351, 360, 366, 374, 378, 379, 381, 386, 388, 393, 394, 405, 407, 408, 409, 411, 412, 413, 414, 415, 416, 419, 436, 437, 440, 444, 445, 447, 462, 465, 492, 496, 498, 502, 506, 507, 508, 523, 525, 527, 528, 529, 531, 533, 534, 535, 540, 543, 544, 546, 547, 548, 555, 559, 560, 561, 562, 590, 591, 592, 593, 594, 596, 597, 598, 604, 608, 609, 618, 629, 630, 641, 644, 645, 646, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 667, 670, 671, 672, 673, 675, 678, 679, 680, 681, 682, 685, 688, 696, 698, 700, 705, 707, 710, 711, 713, 714, 716, 718, 721, 724, 726, 727, 728, 732, 733, 735, 736, 737, 738, 739, 740, 741, 749, 751, 755, 763, 779, 780, 781, 784, 785, 786, 794, 795, 799, 800, 822, 839, 840, 841, 843, 845, 847, 849, 851, 852, 862, 863, 866, 872, 875, 878, 883, 887, 891, 892, 894, 895, 899, 900, 903, 904, 905, 907, 909, 916, 934, 936, 952, 954, 978, 979, 983, 985, 987, 988, 990, 991, 992, 994, 997, 1002, 1017, 1019, 1021, 1028, 1030, 1031, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "It": [0, 4, 7, 8, 9, 13, 17, 21, 26, 35, 38, 41, 54, 56, 59, 73, 79, 81, 83, 96, 99, 100, 105, 112, 115, 117, 118, 121, 123, 125, 132, 148, 156, 157, 158, 163, 164, 169, 170, 171, 179, 183, 187, 188, 196, 199, 203, 213, 216, 217, 220, 221, 228, 233, 235, 238, 255, 256, 258, 260, 261, 263, 266, 267, 278, 283, 289, 290, 291, 293, 294, 296, 305, 309, 310, 312, 315, 321, 334, 338, 342, 346, 351, 352, 353, 362, 366, 367, 368, 372, 374, 376, 377, 379, 381, 383, 384, 385, 387, 388, 391, 392, 393, 397, 398, 401, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 432, 435, 436, 439, 440, 441, 442, 443, 445, 446, 447, 450, 457, 460, 465, 466, 467, 472, 476, 483, 485, 494, 506, 513, 522, 531, 533, 534, 536, 538, 539, 547, 548, 551, 552, 555, 556, 557, 558, 559, 560, 562, 563, 564, 565, 587, 594, 600, 604, 605, 606, 609, 612, 613, 617, 618, 620, 621, 625, 628, 629, 630, 631, 639, 640, 641, 644, 645, 648, 650, 651, 652, 653, 656, 658, 659, 660, 661, 664, 665, 666, 668, 669, 670, 672, 674, 675, 676, 679, 680, 681, 682, 685, 687, 689, 690, 691, 693, 694, 695, 696, 697, 698, 700, 702, 706, 707, 708, 714, 720, 731, 739, 740, 744, 755, 756, 759, 762, 778, 780, 785, 796, 798, 799, 800, 802, 808, 809, 810, 818, 820, 823, 826, 835, 836, 841, 842, 843, 845, 848, 849, 850, 851, 855, 856, 857, 861, 862, 863, 867, 868, 869, 873, 876, 878, 888, 891, 892, 896, 897, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 912, 923, 936, 944, 945, 955, 958, 961, 963, 964, 965, 966, 967, 968, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 997, 998, 1000, 1001, 1002, 1003, 1006, 1011, 1012, 1018, 1019, 1020, 1021, 1027, 1028, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "provid": [0, 5, 8, 11, 13, 25, 28, 31, 35, 38, 43, 56, 61, 82, 96, 114, 119, 120, 130, 132, 151, 157, 169, 170, 178, 185, 187, 188, 191, 200, 203, 208, 221, 225, 229, 230, 235, 250, 260, 261, 262, 266, 293, 296, 301, 305, 309, 315, 316, 318, 320, 336, 342, 343, 346, 351, 352, 356, 357, 360, 362, 366, 368, 371, 373, 374, 375, 377, 378, 379, 380, 381, 382, 385, 387, 388, 391, 392, 393, 396, 397, 398, 401, 403, 404, 406, 407, 408, 409, 411, 412, 414, 415, 416, 417, 418, 419, 421, 428, 435, 438, 440, 441, 442, 444, 445, 447, 448, 450, 457, 458, 463, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 491, 492, 494, 496, 499, 530, 531, 532, 533, 536, 538, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 586, 588, 589, 591, 592, 599, 603, 608, 609, 625, 630, 631, 632, 633, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 688, 692, 697, 709, 732, 738, 739, 761, 771, 775, 785, 789, 791, 795, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806, 808, 809, 810, 814, 815, 816, 817, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 856, 857, 859, 862, 864, 865, 866, 869, 870, 871, 874, 876, 878, 879, 894, 895, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 914, 925, 930, 944, 946, 963, 964, 965, 976, 977, 979, 982, 983, 984, 986, 987, 988, 990, 991, 992, 993, 994, 995, 997, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1010, 1011, 1012, 1016, 1019, 1021, 1024, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "2012": [0, 82, 405, 414, 553, 554, 561, 637, 740, 976, 980, 987, 1005, 1027], "full": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 168, 169, 170, 171, 172, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360, 366, 367, 368, 372, 374, 377, 379, 381, 384, 387, 391, 393, 394, 397, 403, 406, 407, 409, 411, 412, 415, 421, 424, 430, 431, 439, 443, 445, 447, 457, 486, 487, 490, 494, 495, 498, 499, 500, 501, 502, 503, 505, 508, 533, 535, 539, 557, 558, 565, 566, 630, 646, 648, 652, 667, 678, 719, 720, 725, 742, 743, 745, 747, 748, 750, 782, 787, 788, 794, 795, 807, 836, 925, 976, 983, 986, 989, 990, 994, 997, 1000, 1007, 1019, 1027, 1031, 1033, 1035, 1037, 1038, 1040, 1041, 1043, 1044], "time": [0, 3, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 166, 168, 169, 170, 171, 172, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 352, 353, 356, 357, 358, 359, 360, 362, 366, 367, 368, 373, 374, 376, 377, 378, 379, 380, 381, 383, 384, 385, 387, 391, 393, 394, 398, 403, 404, 405, 406, 407, 409, 410, 412, 414, 415, 418, 435, 439, 441, 442, 443, 444, 445, 448, 450, 453, 455, 456, 457, 459, 460, 461, 462, 463, 465, 466, 470, 494, 497, 499, 517, 521, 532, 534, 536, 538, 545, 560, 565, 566, 567, 568, 588, 608, 617, 625, 626, 627, 628, 632, 637, 638, 641, 644, 648, 650, 652, 658, 660, 662, 664, 665, 671, 674, 675, 676, 683, 684, 688, 690, 692, 699, 739, 742, 743, 745, 787, 791, 794, 795, 796, 798, 799, 800, 801, 803, 805, 810, 811, 812, 815, 817, 820, 821, 822, 823, 824, 825, 827, 829, 834, 835, 836, 837, 838, 839, 840, 847, 849, 850, 851, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 869, 872, 874, 878, 883, 891, 892, 896, 897, 901, 904, 905, 913, 938, 953, 976, 977, 979, 980, 983, 984, 986, 987, 988, 989, 990, 991, 992, 994, 995, 997, 999, 1000, 1001, 1002, 1003, 1006, 1011, 1012, 1017, 1019, 1020, 1021, 1027, 1029, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "host": [0, 118, 321, 351, 374, 379, 383, 387, 388, 892, 955, 1021, 1043], "other": [0, 4, 8, 12, 13, 25, 28, 31, 32, 34, 38, 41, 45, 53, 58, 67, 70, 72, 73, 87, 98, 99, 101, 103, 115, 117, 118, 121, 122, 126, 128, 134, 143, 163, 164, 166, 168, 169, 170, 171, 175, 178, 192, 199, 203, 217, 220, 221, 222, 224, 228, 229, 230, 232, 234, 235, 238, 239, 247, 250, 255, 257, 260, 261, 262, 269, 270, 278, 288, 289, 290, 304, 305, 309, 310, 312, 313, 315, 316, 318, 322, 325, 338, 342, 345, 348, 351, 352, 356, 360, 362, 366, 371, 372, 374, 375, 376, 377, 379, 381, 383, 384, 385, 387, 388, 392, 393, 394, 397, 398, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 435, 441, 442, 444, 445, 446, 447, 448, 450, 455, 462, 463, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 486, 494, 495, 501, 531, 532, 533, 536, 539, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 586, 587, 588, 589, 592, 595, 600, 608, 609, 610, 611, 618, 625, 626, 628, 633, 637, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 685, 688, 690, 694, 697, 702, 716, 760, 771, 775, 782, 789, 796, 797, 798, 799, 800, 801, 802, 803, 805, 810, 813, 814, 815, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 844, 846, 849, 850, 854, 856, 857, 859, 860, 862, 864, 865, 866, 868, 869, 871, 872, 873, 875, 876, 877, 878, 879, 880, 887, 894, 895, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 930, 944, 976, 977, 979, 980, 981, 983, 984, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 997, 1000, 1001, 1002, 1003, 1007, 1008, 1009, 1010, 1011, 1012, 1016, 1019, 1020, 1023, 1028, 1030, 1031, 1033, 1034, 1035, 1036, 1040, 1041, 1042, 1043, 1044], "event": [0, 4, 17, 199, 217, 263, 405, 407, 586, 587, 634, 834, 924, 983, 988, 989, 1006, 1011, 1033], "pari": [0, 376, 408, 464, 761, 867, 998, 1041], "saclai": 0, "center": [0, 4, 7, 8, 9, 14, 25, 27, 34, 35, 38, 39, 41, 43, 44, 46, 49, 50, 51, 54, 56, 57, 60, 61, 62, 64, 65, 82, 92, 101, 102, 105, 123, 124, 125, 126, 148, 164, 170, 180, 191, 193, 199, 200, 210, 211, 223, 224, 228, 229, 238, 245, 248, 249, 255, 261, 271, 288, 291, 293, 300, 305, 307, 308, 319, 327, 336, 338, 339, 340, 345, 352, 353, 374, 375, 376, 384, 406, 407, 409, 410, 412, 413, 414, 420, 438, 440, 441, 444, 445, 446, 447, 450, 452, 457, 458, 459, 460, 461, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 480, 481, 482, 483, 499, 510, 522, 532, 533, 539, 542, 548, 604, 607, 608, 609, 630, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 658, 659, 660, 661, 662, 663, 664, 665, 666, 669, 670, 671, 672, 673, 674, 676, 688, 692, 694, 794, 864, 865, 868, 877, 879, 889, 890, 899, 900, 981, 983, 984, 986, 994, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1038, 1039, 1040, 1041, 1044], "scienc": [0, 39, 81, 148, 159, 278, 373, 376, 391, 407, 438, 452, 536, 538, 545, 686, 687, 691, 846, 977, 979, 983, 984, 987, 990, 999, 1007, 1011, 1015, 1035], "one": [0, 4, 8, 9, 10, 13, 15, 17, 18, 26, 27, 28, 33, 34, 35, 38, 41, 48, 54, 56, 58, 59, 61, 62, 65, 67, 72, 82, 90, 91, 92, 96, 99, 101, 105, 117, 118, 123, 125, 128, 132, 135, 147, 148, 151, 158, 159, 163, 168, 169, 170, 171, 172, 175, 178, 179, 183, 188, 189, 191, 192, 193, 195, 199, 201, 208, 209, 214, 217, 222, 228, 235, 236, 238, 247, 250, 256, 257, 258, 260, 261, 263, 264, 267, 268, 269, 270, 278, 281, 283, 288, 302, 306, 307, 310, 311, 315, 317, 318, 319, 328, 337, 338, 347, 351, 352, 353, 356, 360, 362, 366, 367, 368, 373, 374, 375, 376, 378, 379, 381, 383, 384, 385, 386, 387, 388, 391, 393, 394, 396, 397, 398, 401, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 442, 443, 444, 445, 447, 448, 449, 450, 451, 453, 454, 455, 458, 460, 462, 467, 472, 485, 486, 488, 489, 490, 491, 492, 493, 494, 498, 499, 500, 501, 502, 503, 506, 507, 508, 510, 512, 532, 537, 538, 541, 545, 549, 555, 556, 557, 558, 559, 560, 562, 563, 564, 565, 567, 579, 581, 582, 586, 587, 588, 589, 608, 609, 613, 614, 618, 625, 628, 630, 631, 632, 633, 641, 645, 646, 647, 648, 652, 655, 656, 657, 659, 664, 666, 667, 669, 671, 672, 673, 674, 676, 678, 686, 690, 693, 697, 701, 707, 718, 726, 727, 731, 735, 747, 748, 751, 760, 768, 771, 775, 776, 777, 778, 780, 781, 784, 785, 787, 788, 789, 790, 793, 794, 795, 796, 799, 800, 802, 803, 804, 806, 808, 810, 814, 815, 818, 820, 822, 823, 825, 826, 827, 828, 829, 831, 832, 839, 840, 841, 842, 843, 844, 845, 847, 848, 849, 850, 851, 855, 859, 862, 863, 864, 866, 867, 869, 870, 871, 872, 873, 878, 879, 880, 883, 885, 899, 901, 902, 903, 904, 905, 907, 908, 909, 910, 915, 925, 928, 938, 945, 958, 976, 977, 979, 981, 982, 984, 985, 986, 988, 989, 990, 991, 992, 993, 994, 995, 997, 998, 1001, 1002, 1003, 1004, 1005, 1006, 1011, 1012, 1016, 1018, 1019, 1020, 1021, 1024, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "2014": [0, 53, 373, 412, 414, 417, 528, 605, 606, 620, 621, 656, 690, 856, 857, 935, 936, 984, 991, 1011, 1030], "2015": [0, 170, 373, 706, 719, 720, 721, 856, 857, 987, 994, 1011, 1031, 1032], "50": [0, 4, 7, 10, 13, 15, 17, 25, 33, 34, 39, 51, 53, 60, 61, 66, 67, 71, 72, 86, 93, 96, 99, 105, 112, 115, 118, 125, 130, 131, 148, 152, 154, 155, 156, 157, 168, 169, 170, 179, 183, 194, 199, 202, 206, 207, 211, 213, 215, 217, 220, 224, 225, 231, 232, 234, 242, 255, 260, 262, 263, 273, 283, 302, 305, 309, 317, 319, 326, 328, 330, 336, 345, 352, 374, 376, 379, 384, 411, 414, 415, 416, 419, 440, 471, 477, 478, 498, 502, 521, 531, 537, 542, 551, 552, 567, 591, 592, 604, 606, 607, 613, 615, 656, 657, 664, 665, 666, 668, 674, 675, 676, 690, 711, 789, 796, 810, 828, 848, 899, 908, 982, 983, 987, 988, 990, 993, 997, 1010, 1027, 1044], "2018": [0, 199, 217, 415, 448, 976, 987, 1011, 1034, 1035], "nyu": [0, 181, 848], "moor": [0, 732, 987, 1011, 1044], "environ": [0, 12, 27, 72, 73, 117, 119, 120, 128, 129, 132, 135, 145, 156, 169, 170, 171, 180, 229, 230, 231, 235, 239, 240, 241, 242, 250, 258, 260, 261, 267, 272, 302, 311, 316, 317, 319, 320, 322, 327, 360, 366, 374, 376, 377, 379, 381, 385, 387, 391, 397, 401, 403, 406, 408, 497, 1007, 1011, 1034, 1035, 1044], "student": [0, 98, 260, 984, 1007, 1011], "t\u00e9l\u00e9com": 0, "paristech": [0, 25, 26, 43, 228], "rv": [0, 264, 305, 800, 808, 810, 976, 1027, 1028, 1031, 1032, 1033, 1034, 1035], "thierri": [0, 245, 247, 1011, 1033, 1034, 1041], "guillemot": [0, 245, 247, 1033, 1034], "labex": 0, "digicosm": 0, "goix": [0, 1031, 1033, 1034, 1035, 1036], "mathurin": [0, 1038, 1040, 1041], "massia": [0, 1038, 1040, 1041], "2019": [0, 170, 377, 407, 450, 460, 690, 984, 994, 997, 1035, 1036, 1037], "dure": [0, 4, 5, 12, 13, 51, 56, 59, 73, 76, 87, 101, 116, 122, 123, 129, 145, 151, 156, 169, 170, 172, 188, 200, 207, 258, 262, 283, 317, 318, 342, 366, 368, 377, 379, 381, 384, 393, 394, 407, 408, 412, 414, 415, 417, 418, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 457, 462, 463, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 608, 609, 611, 612, 613, 615, 617, 618, 620, 621, 623, 625, 626, 627, 628, 630, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 686, 687, 688, 689, 690, 698, 786, 794, 795, 796, 799, 800, 810, 820, 821, 822, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 858, 859, 862, 863, 864, 865, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 884, 890, 891, 892, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 976, 977, 979, 983, 984, 990, 997, 999, 1003, 1016, 1021, 1023, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044], "phd": [0, 407, 414, 1007, 1011], "chan": [0, 837, 879], "zuckerberg": 0, "initi": [0, 7, 12, 18, 37, 43, 44, 46, 58, 59, 61, 64, 65, 69, 82, 110, 126, 133, 134, 135, 152, 157, 166, 169, 179, 192, 214, 220, 221, 225, 244, 246, 247, 252, 260, 283, 317, 327, 338, 352, 362, 367, 374, 379, 381, 387, 388, 391, 393, 407, 412, 414, 416, 417, 419, 440, 441, 445, 446, 447, 448, 449, 450, 451, 457, 458, 459, 460, 476, 510, 513, 529, 530, 531, 535, 536, 538, 541, 543, 544, 545, 546, 551, 552, 557, 558, 591, 605, 606, 608, 609, 617, 618, 625, 638, 643, 644, 645, 646, 650, 651, 656, 658, 659, 660, 661, 664, 665, 666, 667, 669, 674, 675, 676, 678, 679, 682, 688, 689, 690, 692, 693, 794, 795, 829, 848, 855, 856, 857, 895, 922, 935, 936, 956, 961, 962, 979, 983, 984, 986, 991, 992, 993, 1001, 1003, 1006, 1008, 1018, 1020, 1027, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "were": [0, 4, 33, 71, 72, 75, 81, 82, 118, 122, 125, 145, 148, 156, 164, 199, 200, 203, 229, 238, 269, 271, 301, 302, 310, 316, 317, 319, 320, 321, 322, 328, 342, 351, 353, 360, 362, 373, 374, 376, 379, 380, 383, 391, 393, 398, 404, 408, 414, 415, 462, 465, 466, 494, 559, 560, 586, 589, 600, 799, 800, 815, 823, 896, 897, 976, 979, 987, 988, 1003, 1020, 1021, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044], "through": [0, 7, 13, 35, 117, 148, 159, 169, 203, 220, 233, 235, 255, 260, 263, 288, 309, 310, 336, 343, 353, 360, 376, 377, 379, 381, 386, 388, 393, 394, 397, 398, 407, 410, 412, 414, 416, 417, 424, 430, 444, 462, 465, 470, 533, 555, 556, 559, 562, 563, 564, 579, 591, 592, 595, 645, 649, 651, 653, 656, 657, 659, 661, 663, 666, 674, 675, 686, 689, 718, 802, 818, 875, 887, 891, 892, 907, 908, 909, 910, 942, 945, 976, 977, 984, 987, 989, 990, 991, 993, 995, 997, 1001, 1002, 1003, 1010, 1011, 1012, 1019, 1021, 1027, 1033, 1034, 1035, 1036, 1038, 1039, 1040, 1042, 1043, 1044], "program": [0, 51, 148, 352, 362, 367, 368, 376, 377, 379, 381, 385, 391, 506, 633, 668, 889, 890, 983, 1002, 1003, 1006, 1007, 1027, 1029], "immanuel": [0, 1027, 1028, 1032], "bayer": [0, 1027, 1028, 1032], "kemal": [0, 21, 22, 1029, 1030], "eren": [0, 21, 22, 1029, 1030], "tr\u00e9segni": [0, 1029], "hamzeh": [0, 1030, 1031], "alsalhi": [0, 1030, 1031], "issam": [0, 299, 1033], "laradji": [0, 299, 1033], "maheshakya": [0, 1030, 1031, 1032], "wijewardena": [0, 1030, 1031, 1032], "xue": [0, 1031, 1032, 1033, 1035, 1036, 1039], "nelson": [0, 1033, 1034, 1039], "yenchen": [0, 1033], "lin": [0, 532, 656, 1002, 1032, 1033, 1034, 1035], "neurodebian": 0, "debian": [0, 366, 377, 385], "packag": [0, 47, 54, 163, 235, 283, 367, 372, 373, 376, 377, 379, 380, 381, 383, 385, 388, 391, 393, 397, 406, 409, 414, 415, 450, 476, 644, 645, 977, 983, 986, 990, 997, 1003, 1011, 1015, 1027, 1033, 1035, 1036, 1037], "dr": [0, 148, 376, 407, 1041], "jame": [0, 376, 411, 829, 988, 1027, 1028, 1029, 1030, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1043, 1044], "haxbi": 0, "dartmouth": 0, "colleg": [0, 168], "organ": [0, 11, 13, 71, 81, 351, 373, 378, 379, 394, 847, 1006], "kindli": 0, "axa": 0, "some": [0, 3, 4, 5, 8, 9, 13, 20, 25, 26, 28, 38, 45, 51, 54, 56, 57, 59, 63, 68, 72, 75, 79, 81, 82, 87, 96, 113, 114, 125, 128, 129, 132, 133, 144, 151, 153, 156, 157, 158, 159, 160, 163, 164, 166, 169, 170, 171, 172, 175, 178, 180, 182, 183, 187, 188, 189, 193, 194, 199, 200, 203, 207, 208, 213, 216, 217, 220, 222, 228, 232, 235, 238, 246, 247, 248, 254, 255, 260, 261, 262, 263, 266, 268, 278, 281, 286, 289, 294, 300, 301, 305, 310, 316, 317, 318, 319, 320, 321, 322, 334, 335, 337, 338, 346, 348, 351, 352, 353, 360, 362, 366, 367, 368, 372, 373, 374, 376, 377, 379, 380, 381, 383, 384, 385, 386, 387, 388, 391, 392, 393, 397, 398, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 430, 435, 441, 442, 445, 447, 449, 451, 457, 461, 463, 466, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 494, 497, 506, 507, 513, 521, 522, 531, 532, 534, 536, 539, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 572, 579, 580, 586, 588, 589, 592, 604, 607, 608, 609, 630, 631, 633, 637, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 681, 687, 688, 690, 691, 695, 696, 698, 699, 700, 705, 706, 713, 718, 723, 724, 735, 736, 737, 743, 751, 753, 754, 760, 779, 781, 784, 785, 786, 791, 794, 797, 798, 803, 805, 814, 815, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 844, 846, 849, 850, 856, 857, 859, 862, 864, 865, 866, 871, 878, 879, 894, 895, 897, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 919, 920, 944, 955, 976, 977, 979, 982, 983, 984, 986, 987, 988, 989, 990, 991, 993, 994, 997, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1010, 1011, 1012, 1017, 1019, 1020, 1021, 1024, 1027, 1028, 1029, 1030, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "particip": [0, 378, 379, 394, 1011], "could": [0, 4, 9, 13, 14, 28, 38, 43, 54, 72, 73, 96, 99, 113, 114, 122, 125, 145, 151, 156, 164, 168, 169, 170, 199, 200, 203, 208, 217, 224, 233, 234, 235, 254, 260, 281, 291, 294, 318, 334, 335, 351, 356, 368, 379, 385, 387, 393, 397, 401, 405, 411, 414, 415, 419, 472, 531, 536, 605, 606, 627, 669, 798, 803, 805, 976, 977, 983, 984, 994, 995, 997, 1002, 1007, 1020, 1024, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044], "attend": 0, "psf": [0, 379], "dataia": 0, "possibl": [0, 4, 13, 18, 27, 38, 50, 56, 72, 79, 96, 115, 118, 129, 151, 169, 170, 171, 172, 199, 216, 217, 233, 235, 260, 261, 262, 263, 265, 266, 267, 269, 270, 281, 315, 338, 346, 351, 352, 362, 366, 367, 368, 372, 373, 374, 377, 379, 380, 381, 382, 383, 385, 387, 391, 392, 393, 397, 401, 404, 405, 406, 407, 408, 410, 411, 412, 414, 415, 417, 419, 421, 430, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 460, 463, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 480, 481, 482, 483, 494, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 630, 631, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 685, 686, 687, 688, 689, 690, 707, 719, 720, 721, 725, 739, 753, 775, 780, 782, 785, 794, 795, 796, 798, 799, 800, 802, 808, 809, 810, 814, 815, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 883, 891, 892, 894, 895, 896, 897, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 917, 919, 920, 923, 928, 955, 958, 961, 976, 979, 982, 983, 984, 986, 987, 988, 989, 990, 995, 997, 1002, 1003, 1007, 1011, 1012, 1019, 1020, 1021, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1037, 1038, 1040, 1041, 1042, 1043], "tinyclu": 0, "french": [0, 217, 311], "associ": [0, 11, 25, 26, 81, 112, 151, 168, 169, 203, 248, 311, 325, 327, 351, 387, 407, 409, 411, 412, 414, 415, 425, 444, 447, 467, 468, 469, 470, 471, 472, 473, 474, 491, 492, 493, 522, 555, 559, 562, 603, 604, 628, 643, 656, 657, 664, 666, 672, 673, 674, 687, 693, 697, 728, 736, 822, 842, 850, 864, 876, 888, 896, 905, 907, 909, 925, 986, 987, 990, 997, 1000, 1011, 1020, 1027, 1039, 1043], "fond": [0, 1011], "de": [0, 12, 25, 26, 27, 28, 75, 116, 132, 151, 152, 154, 155, 156, 157, 158, 160, 190, 233, 234, 311, 327, 346, 376, 633, 686, 761, 983, 984, 1007, 1028, 1029, 1030, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045], "recherch": 0, "scientifiqu": 0, "granada": 0, "interest": [0, 4, 6, 13, 43, 45, 51, 56, 63, 67, 73, 112, 120, 125, 132, 145, 148, 156, 163, 170, 171, 188, 199, 200, 201, 217, 221, 233, 254, 257, 260, 261, 263, 269, 278, 338, 346, 352, 360, 366, 374, 376, 379, 384, 385, 387, 391, 394, 407, 409, 412, 415, 417, 491, 492, 498, 502, 508, 644, 645, 899, 977, 983, 984, 987, 992, 993, 994, 1007, 1011, 1017, 1019, 1020, 1027, 1044], "our": [0, 4, 5, 7, 11, 12, 13, 43, 54, 57, 71, 72, 81, 82, 87, 96, 97, 112, 113, 119, 122, 123, 125, 126, 143, 148, 151, 156, 158, 168, 169, 170, 171, 172, 199, 203, 217, 222, 224, 235, 254, 260, 263, 266, 267, 286, 301, 305, 311, 316, 318, 330, 335, 341, 343, 346, 351, 352, 353, 362, 367, 377, 378, 383, 384, 387, 391, 392, 393, 394, 398, 407, 411, 414, 415, 417, 418, 442, 448, 561, 642, 690, 706, 718, 723, 735, 753, 841, 842, 843, 845, 847, 849, 850, 851, 976, 977, 983, 984, 987, 993, 997, 1000, 1001, 1002, 1007, 1010, 1011, 1012, 1019, 1020, 1021, 1034, 1035, 1037, 1038, 1041, 1042, 1044], "via": [0, 4, 6, 7, 8, 9, 10, 11, 12, 14, 15, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 166, 168, 169, 170, 171, 172, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360, 362, 366, 367, 371, 376, 377, 380, 381, 383, 387, 391, 392, 393, 394, 397, 398, 401, 404, 405, 407, 408, 410, 411, 412, 416, 417, 435, 499, 533, 537, 539, 541, 544, 557, 558, 595, 609, 614, 619, 622, 625, 636, 637, 638, 639, 654, 664, 666, 671, 674, 685, 687, 690, 691, 707, 796, 819, 820, 821, 822, 827, 828, 829, 831, 837, 845, 856, 859, 860, 879, 880, 976, 981, 983, 984, 986, 987, 988, 994, 995, 1001, 1002, 1007, 1008, 1011, 1012, 1023, 1027, 1031, 1032, 1035, 1039, 1040, 1041, 1042, 1043, 1044], "numfocu": 0, "all": [0, 4, 5, 7, 8, 11, 14, 17, 20, 25, 26, 28, 35, 39, 40, 41, 43, 44, 49, 53, 54, 55, 56, 61, 65, 76, 83, 92, 96, 98, 99, 110, 117, 118, 120, 121, 125, 134, 135, 148, 156, 157, 159, 166, 168, 169, 170, 172, 178, 183, 185, 191, 192, 193, 199, 200, 201, 202, 203, 208, 210, 214, 216, 217, 220, 221, 228, 234, 235, 238, 239, 242, 246, 248, 250, 258, 261, 262, 263, 264, 266, 267, 268, 270, 272, 278, 283, 286, 288, 301, 305, 306, 310, 315, 316, 317, 318, 320, 321, 322, 325, 327, 328, 329, 335, 338, 342, 343, 346, 347, 351, 352, 353, 357, 360, 362, 366, 367, 368, 372, 374, 375, 376, 377, 379, 381, 383, 384, 385, 387, 388, 391, 392, 393, 394, 398, 403, 404, 405, 406, 407, 408, 411, 412, 414, 415, 416, 417, 418, 419, 421, 422, 424, 425, 426, 427, 429, 430, 431, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 501, 506, 507, 513, 525, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 581, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 685, 686, 687, 688, 689, 690, 691, 692, 695, 696, 697, 698, 699, 700, 703, 707, 711, 712, 713, 714, 715, 716, 718, 719, 720, 723, 725, 726, 727, 729, 730, 732, 733, 734, 735, 739, 742, 743, 745, 747, 748, 750, 753, 758, 766, 771, 775, 778, 779, 780, 781, 782, 783, 784, 785, 787, 788, 790, 791, 792, 794, 795, 796, 797, 798, 799, 800, 802, 803, 805, 806, 808, 810, 813, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 866, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 883, 891, 892, 894, 895, 896, 897, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 914, 915, 917, 919, 920, 921, 925, 927, 928, 929, 930, 941, 944, 945, 950, 955, 962, 971, 976, 977, 979, 980, 981, 983, 984, 985, 986, 987, 988, 989, 990, 992, 994, 995, 997, 1000, 1001, 1002, 1003, 1006, 1007, 1008, 1011, 1012, 1013, 1015, 1016, 1018, 1019, 1020, 1021, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041], "handl": [0, 4, 9, 72, 118, 122, 128, 132, 175, 183, 234, 235, 262, 267, 269, 278, 281, 283, 290, 311, 315, 322, 351, 353, 360, 366, 371, 373, 377, 379, 380, 381, 388, 391, 393, 398, 414, 415, 417, 494, 542, 575, 579, 580, 583, 584, 586, 587, 589, 608, 633, 644, 645, 650, 656, 657, 658, 659, 660, 666, 673, 674, 676, 679, 718, 785, 863, 872, 873, 899, 900, 904, 911, 937, 944, 947, 984, 987, 988, 989, 990, 993, 995, 1002, 1003, 1006, 1007, 1011, 1023, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "non": [0, 3, 5, 6, 9, 10, 11, 13, 14, 16, 25, 26, 34, 35, 38, 50, 58, 63, 72, 76, 81, 83, 97, 98, 99, 101, 114, 122, 129, 130, 132, 138, 140, 144, 145, 147, 153, 155, 157, 164, 166, 168, 169, 170, 171, 172, 177, 178, 183, 185, 189, 192, 193, 195, 196, 197, 198, 200, 201, 205, 209, 210, 212, 213, 214, 215, 217, 218, 223, 224, 225, 229, 230, 231, 232, 233, 234, 236, 238, 245, 247, 249, 251, 253, 254, 255, 260, 269, 276, 278, 283, 287, 289, 290, 296, 299, 302, 305, 307, 308, 309, 310, 316, 317, 318, 319, 321, 322, 329, 330, 333, 335, 338, 340, 341, 342, 343, 346, 347, 348, 349, 351, 352, 353, 360, 362, 366, 367, 371, 374, 375, 379, 380, 381, 384, 385, 387, 388, 391, 393, 394, 405, 406, 407, 408, 411, 413, 414, 415, 416, 417, 419, 435, 439, 443, 444, 448, 450, 454, 460, 461, 462, 463, 465, 466, 486, 494, 495, 501, 502, 506, 524, 530, 533, 534, 536, 538, 542, 545, 547, 549, 550, 551, 555, 556, 557, 558, 559, 560, 562, 563, 564, 570, 586, 587, 589, 590, 593, 594, 595, 596, 597, 598, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 628, 629, 633, 636, 641, 648, 650, 655, 656, 657, 658, 662, 663, 664, 665, 666, 667, 670, 674, 675, 676, 683, 684, 685, 686, 687, 688, 689, 690, 692, 696, 697, 700, 704, 705, 710, 713, 715, 717, 718, 723, 724, 725, 732, 734, 736, 737, 742, 743, 744, 745, 746, 747, 748, 749, 750, 752, 753, 755, 756, 779, 782, 785, 786, 787, 788, 791, 794, 795, 796, 797, 801, 803, 804, 805, 806, 808, 814, 821, 825, 828, 847, 849, 850, 851, 854, 859, 860, 862, 863, 864, 867, 871, 872, 873, 874, 875, 876, 878, 879, 886, 887, 888, 889, 890, 892, 897, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 918, 919, 920, 934, 936, 940, 942, 950, 976, 977, 978, 979, 980, 984, 985, 986, 987, 988, 989, 990, 991, 993, 994, 995, 998, 999, 1000, 1001, 1002, 1003, 1007, 1008, 1019, 1020, 1021, 1022, 1023, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "profit": [0, 1044], "which": [0, 4, 7, 10, 12, 13, 14, 15, 17, 18, 20, 21, 22, 26, 27, 28, 35, 38, 40, 41, 44, 45, 47, 50, 54, 56, 57, 58, 59, 66, 68, 71, 72, 73, 76, 79, 81, 82, 87, 91, 93, 98, 100, 101, 106, 112, 115, 116, 117, 118, 122, 124, 125, 128, 130, 131, 132, 133, 134, 135, 138, 143, 145, 147, 148, 151, 152, 156, 157, 158, 163, 164, 168, 169, 170, 172, 175, 178, 179, 183, 188, 192, 199, 200, 201, 203, 205, 207, 213, 215, 216, 217, 220, 221, 222, 224, 228, 229, 232, 233, 234, 235, 236, 238, 239, 245, 246, 250, 251, 254, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 274, 275, 278, 281, 283, 288, 289, 290, 300, 305, 307, 308, 309, 310, 311, 312, 315, 317, 318, 319, 320, 321, 322, 325, 327, 328, 329, 338, 342, 346, 348, 351, 352, 353, 356, 360, 362, 366, 367, 368, 371, 373, 374, 376, 377, 379, 380, 381, 383, 384, 385, 386, 387, 388, 391, 392, 393, 394, 396, 397, 398, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 424, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 457, 458, 460, 461, 462, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 485, 521, 529, 530, 531, 532, 535, 536, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 570, 571, 572, 577, 580, 581, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 605, 606, 608, 609, 610, 611, 612, 613, 615, 617, 620, 625, 626, 627, 628, 630, 631, 632, 638, 640, 641, 642, 645, 646, 647, 649, 650, 651, 652, 653, 654, 656, 657, 659, 661, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 678, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 705, 707, 714, 715, 717, 718, 720, 722, 723, 731, 732, 733, 734, 739, 740, 743, 753, 755, 775, 776, 777, 778, 779, 780, 786, 794, 795, 796, 799, 800, 801, 802, 804, 806, 810, 814, 815, 816, 817, 818, 819, 820, 821, 823, 824, 826, 827, 828, 829, 830, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 845, 846, 847, 849, 850, 851, 852, 853, 856, 859, 863, 866, 870, 872, 873, 874, 877, 878, 879, 880, 881, 883, 891, 892, 894, 895, 896, 899, 901, 904, 905, 907, 908, 909, 910, 911, 915, 928, 931, 935, 936, 938, 943, 944, 945, 947, 955, 956, 959, 962, 968, 971, 976, 977, 978, 979, 980, 981, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 997, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1011, 1012, 1014, 1016, 1019, 1020, 1021, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "manag": [0, 87, 242, 365, 373, 377, 380, 381, 383, 387, 391, 393, 394, 414, 448, 466, 624, 897, 955, 981, 1003, 1006, 1007, 1011, 1021, 1023, 1040, 1043], "board": 0, "scipi": [0, 6, 14, 18, 20, 42, 47, 48, 54, 55, 79, 80, 83, 97, 99, 103, 124, 151, 169, 172, 185, 189, 201, 246, 250, 251, 257, 260, 268, 272, 283, 288, 293, 302, 316, 317, 322, 325, 326, 366, 373, 374, 377, 379, 381, 385, 388, 391, 392, 393, 397, 400, 406, 407, 412, 415, 448, 449, 450, 451, 455, 460, 461, 494, 501, 506, 530, 532, 533, 539, 542, 579, 580, 583, 584, 586, 587, 608, 609, 646, 647, 651, 655, 656, 657, 661, 664, 665, 666, 667, 668, 670, 672, 674, 675, 676, 678, 682, 685, 689, 690, 693, 757, 760, 775, 776, 777, 778, 789, 790, 800, 808, 810, 825, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 862, 871, 872, 877, 878, 879, 882, 886, 889, 890, 899, 901, 902, 904, 905, 933, 937, 938, 942, 958, 959, 961, 962, 963, 964, 965, 966, 967, 968, 973, 976, 977, 983, 985, 988, 990, 991, 997, 1001, 1002, 1005, 1007, 1015, 1017, 1020, 1021, 1029, 1031, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043], "mission": [0, 352, 1011], "foster": [0, 1035], "comput": [0, 4, 6, 7, 11, 13, 14, 21, 27, 38, 40, 42, 43, 47, 53, 55, 58, 59, 61, 62, 71, 73, 80, 81, 82, 83, 97, 105, 115, 119, 120, 123, 124, 125, 126, 127, 147, 148, 151, 156, 158, 159, 163, 169, 170, 171, 172, 175, 179, 180, 183, 184, 185, 186, 187, 188, 199, 201, 203, 207, 213, 216, 217, 221, 224, 229, 231, 232, 234, 238, 239, 241, 256, 258, 260, 261, 262, 263, 267, 269, 271, 283, 285, 287, 289, 290, 292, 293, 296, 305, 315, 319, 320, 326, 328, 338, 342, 346, 351, 352, 353, 360, 367, 368, 373, 374, 376, 379, 384, 385, 386, 388, 391, 392, 393, 396, 397, 401, 402, 403, 404, 405, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 455, 457, 459, 460, 461, 463, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 514, 529, 530, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 572, 580, 583, 584, 587, 588, 589, 591, 592, 597, 598, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 614, 617, 618, 619, 620, 621, 622, 623, 625, 627, 628, 629, 630, 631, 632, 635, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 710, 711, 713, 714, 715, 716, 717, 718, 722, 723, 724, 726, 727, 728, 731, 733, 735, 736, 737, 739, 740, 751, 752, 753, 754, 755, 756, 757, 758, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 783, 784, 785, 786, 789, 790, 791, 793, 794, 795, 796, 799, 800, 802, 810, 818, 820, 821, 822, 823, 824, 826, 827, 828, 829, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 855, 856, 857, 864, 865, 868, 869, 874, 875, 876, 877, 878, 879, 883, 884, 886, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 901, 904, 906, 907, 908, 909, 910, 933, 934, 935, 936, 952, 953, 960, 962, 968, 976, 979, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 995, 997, 999, 1000, 1001, 1002, 1003, 1006, 1007, 1011, 1016, 1017, 1020, 1021, 1023, 1024, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "particular": [0, 4, 11, 14, 38, 40, 41, 61, 72, 79, 93, 101, 104, 122, 125, 128, 155, 163, 169, 170, 199, 201, 207, 233, 257, 261, 263, 269, 283, 292, 296, 305, 315, 316, 319, 352, 353, 362, 366, 367, 373, 374, 377, 378, 379, 381, 383, 384, 385, 387, 388, 392, 393, 397, 407, 408, 411, 412, 414, 415, 416, 417, 444, 467, 471, 494, 542, 561, 607, 651, 656, 661, 670, 672, 682, 685, 710, 725, 782, 831, 846, 918, 920, 977, 979, 981, 983, 987, 990, 991, 992, 993, 995, 997, 1007, 1011, 1020, 1027, 1030, 1034, 1035, 1036, 1038, 1040, 1041, 1042, 1044], "As": [0, 4, 7, 21, 26, 28, 31, 41, 44, 54, 56, 58, 59, 67, 83, 87, 101, 112, 113, 119, 122, 123, 124, 126, 131, 143, 151, 156, 164, 169, 171, 172, 175, 178, 181, 183, 188, 190, 199, 203, 207, 217, 225, 235, 248, 255, 257, 258, 260, 261, 263, 273, 281, 288, 306, 318, 328, 338, 352, 353, 356, 358, 359, 362, 366, 367, 374, 377, 378, 379, 381, 383, 384, 391, 392, 393, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 444, 491, 552, 560, 564, 617, 630, 653, 654, 670, 672, 685, 732, 755, 761, 841, 842, 843, 845, 847, 878, 976, 981, 983, 984, 986, 987, 988, 990, 994, 997, 1001, 1002, 1003, 1006, 1007, 1011, 1012, 1016, 1019, 1021, 1027, 1033, 1038, 1043], "fiscal": 0, "home": [0, 12, 114, 132, 155, 157, 159, 160, 191, 208, 246, 255, 302, 320, 343, 357, 374, 377, 387, 397, 406, 484, 497, 677, 1011], "ensur": [0, 21, 42, 58, 83, 93, 112, 118, 119, 172, 199, 221, 255, 263, 301, 360, 362, 366, 367, 379, 381, 383, 384, 385, 394, 397, 398, 405, 407, 408, 411, 419, 467, 531, 532, 539, 609, 625, 694, 703, 779, 785, 786, 820, 892, 919, 920, 936, 942, 953, 983, 984, 987, 997, 1003, 1016, 1029, 1031, 1032, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "monei": [0, 217, 1011], "when": [0, 4, 9, 10, 11, 13, 21, 25, 26, 27, 28, 35, 40, 41, 44, 57, 61, 68, 71, 72, 73, 79, 81, 82, 87, 96, 99, 100, 101, 103, 115, 118, 121, 122, 123, 125, 128, 132, 133, 134, 145, 151, 163, 168, 169, 170, 171, 172, 178, 179, 183, 188, 190, 192, 196, 199, 201, 203, 204, 215, 228, 229, 230, 234, 235, 242, 246, 248, 256, 259, 260, 261, 262, 263, 267, 269, 270, 278, 283, 285, 286, 289, 290, 291, 305, 307, 309, 310, 311, 312, 315, 316, 317, 318, 319, 322, 327, 328, 330, 338, 341, 342, 346, 351, 352, 353, 356, 362, 366, 367, 368, 373, 374, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 391, 392, 393, 397, 398, 401, 403, 404, 405, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 423, 430, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 455, 457, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 480, 481, 482, 483, 487, 488, 489, 490, 494, 498, 499, 500, 501, 502, 503, 506, 507, 508, 510, 513, 522, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 573, 574, 576, 579, 580, 581, 582, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 604, 607, 608, 609, 610, 611, 612, 613, 614, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 696, 698, 699, 700, 702, 703, 705, 706, 710, 711, 714, 724, 725, 726, 727, 729, 731, 732, 735, 743, 745, 748, 751, 752, 754, 758, 760, 764, 765, 766, 768, 771, 775, 778, 779, 780, 781, 782, 784, 785, 786, 788, 789, 790, 792, 794, 795, 796, 799, 800, 801, 802, 810, 814, 815, 818, 820, 821, 822, 823, 824, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 862, 863, 864, 865, 866, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 885, 886, 891, 892, 894, 895, 896, 897, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 913, 915, 918, 919, 920, 926, 930, 934, 935, 936, 937, 939, 940, 945, 948, 955, 956, 976, 977, 979, 981, 983, 984, 985, 986, 987, 988, 990, 991, 992, 993, 994, 995, 997, 999, 1000, 1001, 1002, 1003, 1007, 1010, 1011, 1012, 1018, 1019, 1020, 1021, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "need": [0, 4, 9, 12, 33, 47, 49, 54, 56, 58, 83, 98, 110, 118, 122, 124, 125, 126, 132, 148, 151, 156, 163, 164, 169, 187, 201, 216, 217, 221, 228, 231, 233, 235, 239, 245, 246, 250, 251, 258, 260, 262, 263, 265, 278, 281, 283, 285, 310, 315, 322, 328, 338, 351, 352, 362, 366, 367, 368, 373, 374, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 392, 393, 394, 396, 397, 398, 401, 403, 404, 405, 406, 407, 408, 410, 411, 412, 414, 415, 416, 417, 423, 435, 439, 443, 447, 463, 501, 539, 549, 570, 580, 581, 586, 587, 588, 589, 625, 633, 636, 637, 638, 640, 647, 664, 666, 669, 674, 677, 690, 718, 719, 720, 721, 778, 782, 794, 795, 796, 799, 800, 810, 811, 812, 820, 828, 831, 839, 840, 856, 859, 862, 866, 871, 872, 876, 894, 901, 904, 944, 976, 977, 979, 981, 982, 983, 984, 986, 987, 988, 989, 990, 991, 992, 993, 994, 997, 998, 1000, 1001, 1002, 1003, 1007, 1011, 1018, 1019, 1020, 1021, 1027, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "keep": [0, 6, 13, 43, 76, 99, 101, 118, 147, 163, 168, 169, 170, 171, 172, 183, 199, 200, 201, 207, 217, 250, 255, 258, 309, 310, 318, 326, 338, 351, 352, 356, 362, 366, 367, 371, 379, 383, 392, 393, 405, 407, 408, 409, 410, 411, 412, 430, 448, 463, 480, 481, 482, 483, 491, 492, 532, 538, 539, 542, 545, 552, 554, 556, 558, 560, 563, 566, 568, 593, 596, 598, 601, 609, 632, 633, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 658, 659, 660, 661, 662, 663, 665, 668, 670, 671, 674, 675, 676, 677, 706, 814, 832, 833, 842, 850, 856, 857, 895, 900, 902, 905, 908, 910, 983, 988, 992, 995, 997, 1007, 1010, 1011, 1012, 1017, 1019, 1021, 1023, 1027, 1032, 1035, 1036, 1040, 1041, 1043], "while": [0, 4, 7, 8, 10, 12, 18, 21, 25, 28, 35, 38, 40, 44, 45, 49, 56, 63, 67, 71, 74, 76, 93, 100, 101, 112, 115, 118, 119, 123, 129, 132, 148, 152, 157, 159, 160, 163, 168, 169, 170, 171, 175, 178, 180, 183, 188, 193, 199, 201, 203, 215, 228, 231, 232, 235, 236, 246, 247, 251, 254, 255, 259, 260, 261, 263, 267, 268, 269, 270, 271, 273, 285, 305, 306, 307, 310, 311, 312, 315, 318, 321, 322, 335, 338, 351, 353, 360, 362, 367, 371, 372, 373, 374, 375, 377, 378, 379, 381, 383, 384, 385, 387, 388, 391, 393, 394, 401, 405, 406, 407, 410, 411, 412, 414, 415, 416, 417, 418, 419, 442, 462, 465, 466, 481, 483, 494, 519, 530, 550, 555, 556, 557, 558, 562, 563, 564, 565, 566, 567, 568, 573, 580, 586, 587, 588, 589, 592, 595, 600, 604, 632, 641, 644, 645, 647, 654, 655, 656, 657, 674, 675, 676, 677, 706, 727, 751, 771, 775, 785, 791, 794, 796, 797, 798, 801, 802, 803, 804, 805, 806, 810, 811, 812, 814, 818, 820, 821, 822, 823, 824, 826, 834, 845, 847, 849, 850, 851, 858, 859, 860, 861, 862, 875, 887, 892, 897, 899, 900, 907, 908, 909, 910, 915, 940, 976, 977, 979, 980, 981, 983, 984, 986, 987, 988, 989, 990, 993, 994, 997, 999, 1002, 1003, 1006, 1007, 1012, 1018, 1019, 1020, 1021, 1027, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "complianc": 0, "tax": 0, "regul": 0, "mostli": [0, 47, 71, 199, 217, 310, 387, 391, 393, 412, 414, 415, 519, 776, 777, 1002, 1006, 1011, 1035, 1036, 1037, 1043], "go": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 168, 169, 170, 171, 172, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360, 374, 377, 379, 381, 383, 384, 388, 394, 397, 408, 412, 414, 416, 441, 559, 560, 583, 584, 718, 878, 939, 940, 997, 1003, 1006, 1007, 1012, 1021, 1038], "toward": [0, 27, 28, 64, 83, 119, 125, 131, 151, 171, 178, 203, 204, 225, 238, 346, 379, 393, 407, 446, 450, 460, 674, 676, 693, 873, 986, 1001, 1003, 1005, 1007], "cover": [0, 53, 175, 199, 217, 362, 371, 374, 379, 392, 633, 718, 791, 987, 988, 1005], "travel": 0, "expens": [0, 57, 118, 132, 151, 168, 170, 229, 257, 269, 338, 342, 351, 352, 353, 368, 385, 393, 407, 408, 411, 414, 415, 447, 466, 506, 796, 799, 800, 810, 822, 897, 899, 984, 986, 997, 1002, 1006, 1011, 1021, 1031], "well": [0, 4, 9, 12, 21, 25, 26, 28, 35, 40, 49, 54, 58, 59, 63, 71, 79, 87, 112, 113, 115, 118, 123, 125, 130, 132, 148, 156, 158, 168, 169, 170, 171, 175, 183, 187, 197, 199, 200, 201, 203, 207, 220, 221, 222, 225, 228, 232, 235, 238, 247, 260, 267, 269, 271, 275, 278, 283, 286, 288, 289, 290, 312, 316, 317, 318, 319, 320, 321, 322, 342, 346, 351, 352, 353, 362, 374, 376, 378, 379, 383, 385, 387, 388, 391, 392, 393, 394, 405, 407, 409, 411, 412, 414, 416, 418, 421, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 455, 457, 458, 462, 463, 465, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 522, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 686, 687, 688, 689, 690, 698, 719, 720, 721, 782, 785, 789, 792, 794, 795, 796, 799, 800, 810, 824, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 858, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 891, 892, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 934, 935, 955, 976, 977, 979, 981, 982, 983, 984, 986, 987, 988, 989, 990, 991, 992, 993, 997, 1000, 1001, 1003, 1004, 1006, 1007, 1011, 1020, 1021, 1027, 1028, 1031, 1033, 1034, 1035, 1038], "budget": [0, 122, 834, 835, 836, 837, 838, 976], "1": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 140, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 166, 168, 169, 171, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 279, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 323, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360, 362, 366, 367, 368, 373, 374, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 392, 393, 394, 397, 398, 399, 400, 401, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 428, 429, 430, 431, 432, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 486, 487, 489, 491, 493, 494, 495, 498, 499, 500, 502, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 575, 579, 580, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 923, 924, 925, 930, 933, 934, 935, 936, 937, 938, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 971, 973, 974, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 987, 988, 989, 990, 991, 992, 993, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1006, 1007, 1008, 1010, 1011, 1012, 1013, 1016, 1017, 1018, 1019, 1020, 1025, 1029], "note": [0, 4, 5, 7, 8, 11, 12, 14, 20, 21, 27, 33, 38, 54, 67, 72, 73, 81, 83, 86, 87, 93, 99, 115, 116, 118, 121, 125, 126, 129, 148, 151, 158, 163, 168, 169, 170, 171, 172, 175, 187, 188, 192, 199, 200, 201, 203, 207, 213, 215, 217, 220, 221, 222, 224, 228, 229, 231, 233, 234, 235, 236, 238, 246, 255, 256, 260, 263, 266, 267, 268, 281, 283, 285, 289, 290, 300, 305, 306, 309, 315, 316, 317, 318, 319, 320, 321, 322, 326, 328, 330, 338, 342, 351, 360, 366, 367, 373, 376, 377, 379, 380, 381, 383, 385, 386, 391, 392, 393, 397, 398, 402, 405, 406, 407, 409, 410, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 430, 432, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 457, 458, 459, 460, 462, 463, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 485, 488, 494, 496, 502, 507, 513, 517, 525, 528, 531, 532, 536, 537, 538, 539, 541, 542, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 583, 584, 586, 587, 588, 589, 590, 591, 592, 595, 597, 598, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 627, 628, 630, 631, 633, 634, 636, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 693, 694, 697, 698, 701, 705, 706, 711, 713, 718, 719, 720, 721, 725, 726, 727, 729, 731, 735, 738, 743, 751, 752, 755, 760, 761, 765, 767, 771, 775, 779, 780, 781, 782, 784, 785, 786, 789, 790, 791, 793, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 810, 811, 812, 813, 814, 815, 816, 817, 820, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 855, 856, 857, 858, 859, 862, 863, 864, 865, 866, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 897, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 912, 915, 925, 926, 935, 936, 947, 950, 955, 962, 976, 977, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 990, 991, 993, 994, 995, 997, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1010, 1012, 1019, 1020, 1021, 1023, 1025, 1027, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044], "regard": [0, 5, 7, 11, 13, 54, 56, 72, 91, 101, 139, 151, 156, 170, 171, 188, 196, 201, 222, 234, 238, 262, 269, 270, 286, 352, 374, 375, 379, 380, 384, 391, 393, 401, 406, 407, 412, 414, 415, 417, 441, 445, 450, 457, 460, 499, 612, 617, 654, 656, 699, 740, 795, 802, 818, 823, 841, 842, 980, 983, 987, 989, 990, 992, 994, 1001, 1002, 1003, 1014, 1021, 1034, 1037], "might": [0, 4, 5, 13, 32, 43, 45, 61, 63, 71, 121, 130, 145, 157, 164, 169, 170, 171, 175, 199, 217, 228, 260, 262, 286, 300, 317, 342, 348, 362, 366, 367, 373, 377, 379, 380, 381, 383, 384, 385, 387, 391, 393, 394, 397, 401, 405, 408, 411, 412, 413, 414, 415, 417, 432, 441, 486, 494, 499, 501, 506, 513, 521, 534, 553, 554, 555, 559, 560, 562, 577, 578, 580, 608, 609, 625, 648, 652, 653, 654, 656, 657, 674, 676, 690, 754, 791, 799, 800, 823, 848, 864, 879, 892, 911, 913, 915, 919, 920, 936, 956, 976, 977, 979, 981, 983, 984, 986, 987, 989, 990, 994, 995, 997, 1002, 1003, 1021, 1028, 1030, 1035, 1036, 1038, 1041, 1042, 1043, 1044], "pai": [0, 217, 379], "dn": [0, 990], "continu": [0, 13, 18, 20, 43, 76, 93, 122, 151, 166, 170, 179, 200, 207, 217, 221, 224, 238, 239, 241, 246, 250, 251, 293, 301, 304, 310, 311, 313, 317, 318, 358, 360, 367, 374, 377, 381, 382, 383, 384, 387, 391, 393, 394, 397, 407, 412, 414, 466, 490, 590, 593, 594, 597, 598, 605, 606, 607, 630, 644, 645, 650, 651, 655, 658, 659, 660, 661, 723, 739, 753, 808, 810, 862, 864, 866, 868, 869, 878, 879, 880, 896, 897, 908, 950, 976, 983, 984, 987, 988, 990, 991, 997, 1003, 1007, 1008, 1011, 1012, 1019, 1024, 1027, 1029, 1030, 1035, 1040, 1041, 1042, 1044], "integr": [0, 43, 72, 145, 159, 188, 301, 317, 367, 377, 381, 382, 383, 385, 387, 393, 397, 412, 417, 444, 713, 752, 783, 962, 986, 994, 1011, 1015, 1028, 1030, 1031, 1039, 1040, 1044], "servic": [0, 4, 229, 238, 379, 383, 1011, 1035], "azur": [0, 379], "cirru": [0, 379], "cl": [0, 8, 12, 17, 386, 393, 909], "circlecl": 0, "free": [0, 5, 56, 156, 157, 164, 198, 250, 305, 373, 378, 379, 380, 387, 391, 397, 415, 450, 607, 669, 855, 905, 976, 979, 983, 987, 1007, 1035], "cpu": [0, 62, 261, 283, 320, 366, 367, 377, 385, 393, 397, 403, 415, 494, 630, 645, 649, 651, 653, 656, 657, 659, 661, 663, 664, 666, 674, 677, 796, 810, 820, 821, 822, 843, 851, 892, 955, 987, 1012, 1016, 1021, 1032, 1041, 1042, 1044], "server": [0, 148, 366, 376, 377, 494, 1035], "anaconda": [0, 367, 377, 383], "inc": [0, 71, 259, 977, 999, 1011], "storag": [0, 353, 393, 656, 657, 664, 665, 666, 674, 675, 676, 899, 990, 1002, 1030, 1035], "thei": [0, 4, 13, 27, 28, 38, 51, 58, 83, 98, 110, 113, 119, 120, 122, 124, 126, 128, 144, 147, 148, 151, 152, 156, 169, 170, 183, 185, 188, 194, 199, 200, 217, 221, 224, 228, 234, 235, 238, 254, 257, 260, 261, 263, 269, 278, 283, 285, 300, 305, 310, 317, 319, 342, 351, 352, 358, 359, 362, 366, 367, 368, 372, 374, 375, 376, 377, 378, 379, 380, 381, 383, 387, 388, 391, 392, 393, 394, 398, 404, 406, 407, 408, 409, 410, 412, 414, 416, 417, 419, 438, 440, 444, 451, 452, 465, 494, 506, 507, 531, 533, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 586, 589, 595, 608, 617, 627, 641, 644, 645, 650, 656, 657, 658, 659, 660, 668, 670, 674, 676, 679, 685, 759, 760, 762, 765, 771, 786, 796, 810, 828, 834, 835, 836, 837, 838, 856, 859, 861, 867, 878, 879, 901, 904, 907, 908, 909, 910, 914, 976, 977, 979, 981, 983, 986, 987, 988, 989, 990, 992, 993, 994, 995, 997, 998, 999, 1001, 1002, 1003, 1011, 1012, 1016, 1018, 1019, 1021, 1027, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043], "stage": [0, 7, 27, 73, 112, 117, 123, 126, 377, 383, 393, 403, 407, 414, 446, 551, 552, 557, 558, 559, 560, 586, 587, 589, 600, 984, 997, 1005, 1035, 1039], "nightli": [0, 367, 382, 383], "build": [0, 4, 7, 18, 33, 44, 56, 68, 75, 100, 112, 121, 123, 129, 135, 145, 147, 162, 163, 165, 166, 169, 207, 265, 268, 278, 281, 283, 301, 302, 306, 311, 312, 353, 362, 366, 367, 368, 375, 381, 382, 383, 384, 385, 393, 397, 400, 406, 407, 411, 414, 415, 440, 488, 499, 501, 522, 551, 552, 553, 554, 555, 556, 557, 558, 561, 562, 563, 564, 583, 584, 586, 587, 589, 625, 626, 628, 689, 711, 712, 797, 801, 805, 814, 819, 821, 860, 877, 879, 907, 908, 909, 910, 912, 932, 976, 977, 984, 987, 991, 993, 997, 1002, 1003, 1006, 1007, 1008, 1010, 1011, 1013, 1015, 1019, 1020, 1027, 1030, 1032, 1033, 1034, 1036, 1039], "applic": [3, 5, 16, 20, 50, 56, 81, 166, 175, 199, 216, 222, 254, 263, 305, 366, 368, 374, 376, 379, 381, 385, 387, 388, 391, 393, 405, 407, 411, 412, 413, 414, 417, 419, 442, 444, 450, 494, 496, 530, 531, 532, 551, 552, 627, 686, 687, 688, 692, 710, 726, 727, 735, 780, 781, 784, 825, 976, 983, 984, 985, 986, 987, 991, 993, 999, 1003, 1006, 1007, 1008, 1010, 1011, 1019, 1021, 1027, 1028, 1033, 1035, 1038], "problem": [3, 4, 5, 6, 11, 13, 14, 15, 27, 38, 55, 56, 58, 67, 96, 112, 115, 118, 120, 125, 126, 151, 166, 171, 175, 178, 183, 185, 188, 192, 193, 199, 201, 203, 216, 217, 222, 228, 229, 236, 238, 241, 258, 260, 265, 269, 270, 274, 278, 281, 283, 288, 295, 309, 318, 322, 335, 338, 342, 346, 347, 351, 352, 360, 362, 366, 374, 375, 376, 377, 378, 380, 381, 384, 385, 388, 391, 393, 405, 406, 407, 409, 411, 413, 414, 415, 416, 417, 418, 419, 442, 445, 447, 448, 450, 455, 460, 463, 476, 501, 506, 507, 513, 514, 515, 516, 521, 522, 526, 529, 531, 535, 537, 540, 541, 542, 543, 544, 545, 546, 549, 550, 555, 559, 562, 565, 569, 571, 587, 608, 629, 641, 646, 648, 650, 652, 653, 654, 655, 656, 657, 662, 663, 664, 666, 667, 670, 671, 672, 673, 674, 675, 677, 678, 683, 684, 685, 686, 687, 689, 691, 693, 706, 714, 726, 727, 732, 735, 736, 780, 781, 784, 785, 794, 795, 797, 798, 799, 800, 801, 803, 804, 805, 806, 811, 812, 813, 814, 815, 816, 819, 827, 828, 829, 839, 840, 841, 842, 843, 844, 845, 847, 849, 850, 851, 865, 866, 872, 880, 883, 889, 890, 899, 900, 907, 909, 925, 936, 977, 978, 982, 983, 984, 986, 987, 988, 989, 990, 991, 995, 997, 1001, 1004, 1007, 1009, 1011, 1013, 1014, 1015, 1021, 1022, 1023, 1027, 1028, 1030, 1032, 1033, 1034, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044], "medium": [3, 166, 234, 275, 312, 338, 407, 641, 873, 980, 983], "size": [3, 4, 5, 6, 8, 11, 12, 13, 14, 25, 32, 34, 38, 40, 41, 43, 45, 47, 48, 53, 55, 56, 58, 59, 61, 62, 63, 67, 68, 74, 79, 80, 81, 82, 83, 86, 87, 93, 96, 97, 98, 99, 100, 103, 105, 115, 124, 125, 128, 129, 144, 151, 153, 154, 157, 158, 166, 168, 170, 171, 178, 179, 180, 181, 185, 189, 194, 197, 200, 201, 202, 205, 212, 213, 220, 225, 228, 231, 232, 233, 234, 235, 237, 238, 247, 254, 256, 258, 260, 262, 263, 265, 266, 267, 278, 289, 290, 291, 299, 302, 306, 307, 308, 309, 312, 316, 319, 321, 322, 326, 330, 334, 336, 337, 338, 346, 348, 351, 352, 353, 356, 366, 367, 368, 374, 375, 379, 384, 388, 391, 392, 393, 397, 398, 404, 405, 406, 409, 411, 412, 415, 417, 418, 420, 442, 443, 444, 446, 447, 448, 455, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 491, 492, 493, 513, 525, 532, 534, 536, 538, 545, 555, 556, 557, 558, 559, 560, 562, 563, 581, 585, 586, 589, 592, 630, 631, 641, 655, 664, 665, 677, 681, 690, 693, 703, 717, 735, 737, 740, 778, 790, 798, 801, 802, 806, 813, 816, 817, 820, 823, 825, 834, 835, 836, 838, 841, 842, 843, 844, 845, 847, 849, 850, 851, 856, 857, 874, 876, 888, 893, 897, 901, 902, 903, 904, 905, 907, 908, 909, 910, 913, 935, 939, 940, 950, 951, 953, 956, 962, 977, 979, 980, 982, 983, 984, 986, 987, 988, 989, 990, 991, 994, 997, 999, 1001, 1002, 1003, 1010, 1011, 1015, 1017, 1019, 1020, 1030, 1031, 1032, 1033, 1034, 1035, 1037, 1042, 1043], "interact": [3, 126, 166, 199, 225, 230, 261, 316, 378, 380, 381, 383, 385, 391, 393, 394, 408, 557, 558, 559, 560, 630, 631, 874, 878, 976, 979, 983, 984, 985, 992, 994, 997, 1005, 1007, 1029, 1034, 1041, 1042], "user": [3, 26, 56, 70, 96, 118, 160, 166, 169, 187, 220, 235, 250, 257, 267, 269, 278, 283, 289, 290, 293, 311, 315, 316, 317, 318, 319, 320, 321, 322, 362, 366, 367, 373, 377, 378, 379, 381, 383, 385, 386, 387, 391, 392, 393, 397, 398, 401, 405, 406, 407, 408, 409, 411, 412, 414, 415, 416, 418, 419, 420, 421, 424, 430, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 455, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 572, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 617, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 695, 696, 697, 698, 700, 701, 702, 703, 705, 706, 707, 708, 709, 710, 711, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 754, 755, 756, 757, 758, 759, 760, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 882, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 913, 932, 936, 976, 977, 983, 984, 986, 987, 988, 990, 997, 1001, 1006, 1007, 1011, 1014, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "interfac": [3, 112, 166, 372, 373, 380, 381, 388, 391, 393, 411, 417, 418, 439, 443, 448, 494, 551, 697, 796, 799, 800, 810, 859, 860, 885, 972, 976, 990, 1002, 1006, 1007, 1011, 1027, 1029, 1032, 1033, 1035, 1036, 1041, 1043], "compress": [3, 11, 16, 18, 49, 67, 166, 278, 305, 374, 407, 412, 415, 416, 650, 670, 690, 829, 872, 958, 961, 973, 983, 997, 1008, 1020, 1027, 1036], "sens": [3, 4, 13, 16, 18, 26, 56, 67, 157, 166, 169, 175, 232, 235, 305, 311, 326, 338, 351, 362, 366, 379, 380, 393, 407, 409, 411, 416, 460, 467, 468, 469, 470, 471, 472, 473, 474, 650, 653, 654, 670, 797, 807, 896, 981, 983, 990, 991, 993, 997, 1000, 1008], "tomographi": [3, 16, 18, 67, 166, 650, 670, 983, 1008], "reconstruct": [3, 16, 18, 21, 67, 96, 97, 101, 166, 198, 223, 224, 319, 412, 415, 480, 481, 482, 529, 531, 533, 535, 536, 537, 538, 540, 541, 543, 544, 546, 581, 585, 650, 670, 686, 687, 691, 891, 892, 983, 984, 1008, 1041], "l1": [3, 7, 16, 18, 31, 41, 67, 83, 86, 166, 168, 177, 178, 184, 185, 186, 187, 188, 193, 194, 203, 204, 210, 214, 218, 230, 261, 283, 301, 318, 388, 391, 406, 407, 409, 412, 439, 443, 448, 455, 462, 467, 468, 469, 470, 471, 472, 473, 474, 476, 494, 500, 502, 529, 535, 536, 537, 538, 540, 541, 545, 546, 556, 563, 587, 588, 589, 595, 642, 643, 644, 645, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 665, 666, 668, 670, 674, 675, 676, 677, 679, 686, 732, 759, 765, 770, 775, 776, 777, 782, 810, 817, 825, 841, 842, 843, 845, 847, 849, 850, 851, 852, 853, 871, 879, 886, 899, 900, 906, 908, 910, 922, 969, 983, 985, 987, 990, 997, 1001, 1002, 1003, 1008, 1019, 1032, 1034, 1040, 1043], "prior": [3, 7, 16, 18, 47, 48, 58, 66, 67, 68, 93, 150, 151, 152, 157, 161, 164, 166, 171, 178, 180, 183, 244, 246, 250, 251, 252, 260, 271, 293, 328, 379, 381, 383, 393, 397, 407, 410, 412, 414, 417, 463, 521, 534, 546, 547, 548, 549, 557, 583, 584, 609, 611, 612, 613, 617, 620, 621, 628, 642, 643, 644, 645, 649, 650, 652, 653, 654, 658, 659, 660, 670, 676, 679, 714, 794, 834, 835, 836, 837, 838, 859, 860, 874, 901, 904, 954, 976, 979, 981, 983, 986, 987, 989, 995, 1003, 1004, 1008, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1040, 1043], "lasso": [3, 16, 18, 67, 105, 132, 138, 166, 169, 177, 180, 190, 192, 198, 204, 207, 218, 232, 250, 273, 318, 322, 346, 366, 391, 409, 410, 412, 414, 415, 416, 469, 470, 476, 499, 522, 529, 535, 537, 540, 541, 543, 544, 546, 595, 644, 645, 647, 648, 649, 651, 652, 653, 654, 655, 658, 659, 660, 661, 662, 663, 668, 670, 676, 679, 680, 681, 682, 683, 684, 719, 720, 721, 820, 821, 822, 860, 879, 976, 987, 1001, 1008, 1009, 1016, 1019, 1023, 1027, 1031, 1032, 1033, 1035, 1036, 1038, 1040, 1041], "recognit": [3, 9, 15, 16, 49, 96, 166, 234, 237, 302, 310, 351, 372, 384, 412, 414, 416, 492, 500, 530, 532, 539, 695, 706, 711, 738, 766, 785, 786, 794, 810, 825, 879, 904, 979, 983, 987, 988, 992, 1002, 1004, 1008, 1012, 1015, 1023, 1027], "eigenfac": [3, 15, 16, 49, 166, 234, 237, 351, 374, 412, 492, 539, 695, 711, 810, 825, 879, 904, 1004, 1008, 1015, 1027], "svm": [3, 7, 9, 10, 11, 15, 16, 17, 26, 28, 31, 32, 33, 49, 71, 73, 75, 96, 110, 121, 130, 133, 137, 139, 141, 142, 146, 147, 148, 149, 153, 155, 159, 166, 177, 180, 182, 191, 192, 208, 209, 210, 211, 212, 218, 228, 234, 236, 237, 240, 241, 249, 254, 257, 258, 259, 260, 262, 263, 265, 266, 267, 268, 270, 271, 274, 275, 278, 289, 290, 294, 295, 296, 299, 301, 307, 308, 315, 317, 324, 328, 329, 331, 333, 336, 345, 346, 349, 351, 366, 374, 381, 385, 393, 401, 408, 411, 412, 414, 416, 433, 434, 435, 492, 502, 510, 513, 539, 553, 554, 561, 565, 566, 575, 591, 592, 597, 598, 603, 629, 637, 641, 666, 674, 675, 676, 687, 695, 696, 698, 700, 711, 732, 739, 758, 796, 810, 816, 821, 822, 825, 827, 828, 845, 859, 860, 872, 874, 879, 895, 896, 975, 976, 979, 982, 984, 985, 987, 988, 992, 1000, 1002, 1004, 1008, 1009, 1012, 1015, 1016, 1017, 1021, 1023, 1024, 1027, 1028, 1029, 1031, 1032, 1033, 1034], "imag": [3, 6, 14, 16, 21, 22, 33, 37, 40, 41, 42, 43, 45, 47, 49, 52, 55, 57, 59, 63, 68, 69, 71, 90, 95, 96, 101, 105, 107, 120, 146, 148, 155, 166, 190, 221, 230, 233, 237, 258, 292, 301, 302, 316, 325, 326, 351, 352, 371, 372, 374, 376, 379, 384, 387, 391, 393, 397, 400, 407, 412, 439, 443, 450, 460, 491, 492, 493, 494, 500, 501, 504, 505, 532, 533, 535, 539, 605, 606, 689, 695, 735, 825, 869, 983, 987, 988, 990, 992, 999, 1003, 1006, 1008, 1011, 1012, 1017, 1018, 1020, 1021, 1023, 1027, 1030, 1035, 1036, 1040, 1042, 1043], "denois": [3, 16, 49, 51, 52, 54, 95, 101, 105, 107, 166, 412, 494, 533, 535, 539, 582, 585, 825, 869, 1008], "kernel": [3, 6, 9, 10, 11, 16, 17, 31, 32, 52, 58, 75, 87, 95, 97, 105, 107, 110, 133, 140, 146, 150, 152, 153, 154, 155, 158, 161, 163, 176, 181, 182, 200, 208, 213, 227, 228, 236, 240, 243, 254, 258, 260, 262, 265, 266, 270, 274, 275, 284, 289, 290, 294, 297, 310, 312, 318, 327, 330, 333, 335, 336, 338, 339, 340, 341, 343, 344, 347, 349, 362, 366, 371, 381, 391, 393, 405, 407, 408, 411, 414, 415, 430, 438, 446, 450, 459, 460, 463, 480, 481, 482, 489, 494, 496, 500, 502, 512, 531, 532, 533, 539, 542, 552, 554, 556, 558, 560, 563, 566, 568, 591, 592, 608, 609, 629, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 658, 659, 660, 661, 662, 663, 665, 668, 670, 671, 674, 675, 676, 677, 686, 688, 689, 690, 693, 732, 755, 756, 758, 763, 764, 771, 772, 773, 774, 796, 802, 807, 810, 825, 827, 832, 833, 839, 840, 842, 844, 850, 857, 859, 860, 865, 869, 871, 872, 874, 879, 894, 895, 899, 900, 901, 902, 903, 904, 905, 908, 910, 976, 982, 983, 984, 987, 988, 990, 993, 1000, 1001, 1008, 1009, 1012, 1016, 1017, 1022, 1023, 1027, 1028, 1029, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "pca": [3, 6, 16, 34, 46, 52, 70, 71, 73, 75, 76, 77, 79, 87, 95, 98, 105, 106, 107, 139, 166, 196, 221, 223, 231, 233, 236, 240, 259, 268, 271, 272, 283, 287, 292, 302, 318, 362, 371, 381, 393, 403, 406, 407, 408, 413, 423, 471, 474, 482, 494, 500, 502, 512, 530, 531, 532, 533, 537, 538, 541, 542, 547, 641, 656, 686, 688, 690, 694, 796, 821, 825, 848, 855, 858, 859, 861, 869, 877, 879, 979, 981, 984, 990, 997, 1001, 1003, 1008, 1017, 1022, 1023, 1027, 1029, 1030, 1031, 1033, 1034, 1035, 1038, 1040, 1041, 1042, 1044], "lag": [3, 4, 16, 125, 166, 199, 201, 217, 260, 264, 494, 560, 699, 739, 742, 743, 745, 787, 817, 821, 822, 825, 1008], "featur": [3, 5, 6, 7, 8, 10, 11, 12, 15, 16, 20, 21, 26, 27, 28, 31, 32, 33, 34, 37, 43, 46, 48, 51, 59, 61, 64, 69, 70, 71, 72, 73, 74, 76, 77, 81, 82, 86, 87, 90, 91, 92, 93, 96, 98, 100, 102, 103, 104, 106, 111, 116, 118, 121, 125, 127, 131, 132, 133, 134, 135, 136, 138, 139, 143, 145, 149, 151, 152, 153, 156, 157, 159, 163, 164, 167, 168, 169, 170, 173, 177, 179, 181, 182, 183, 185, 186, 188, 189, 195, 198, 199, 200, 201, 203, 204, 206, 208, 214, 215, 216, 218, 221, 227, 230, 232, 235, 237, 238, 241, 242, 243, 253, 254, 255, 257, 259, 260, 263, 264, 265, 266, 267, 268, 269, 270, 273, 274, 275, 276, 278, 281, 286, 287, 288, 291, 292, 293, 294, 298, 299, 301, 303, 304, 305, 308, 312, 313, 314, 316, 319, 320, 321, 322, 325, 326, 328, 329, 333, 334, 335, 338, 342, 346, 349, 350, 353, 354, 357, 358, 359, 360, 362, 371, 372, 373, 374, 375, 376, 377, 381, 382, 384, 386, 387, 388, 391, 392, 393, 394, 396, 397, 401, 405, 407, 409, 410, 411, 412, 413, 417, 418, 419, 420, 421, 423, 428, 430, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 455, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 506, 507, 508, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 526, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 577, 578, 579, 580, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 616, 617, 618, 620, 621, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 683, 684, 685, 686, 687, 688, 689, 690, 695, 699, 700, 701, 711, 719, 720, 721, 738, 739, 742, 743, 745, 755, 756, 760, 761, 763, 764, 765, 766, 767, 768, 770, 771, 772, 773, 774, 775, 778, 782, 785, 787, 789, 790, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 858, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 884, 885, 886, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 919, 920, 933, 952, 962, 963, 964, 968, 976, 979, 981, 982, 983, 984, 985, 987, 988, 989, 990, 991, 992, 993, 994, 998, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1017, 1018, 1019, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "seri": [3, 4, 12, 16, 21, 83, 119, 125, 166, 168, 171, 172, 181, 199, 201, 203, 217, 220, 242, 260, 264, 265, 312, 319, 325, 371, 374, 384, 393, 407, 487, 488, 489, 490, 494, 498, 499, 500, 502, 503, 508, 539, 560, 688, 692, 699, 739, 742, 743, 745, 787, 817, 821, 822, 825, 915, 978, 983, 984, 988, 990, 1001, 1006, 1008, 1030, 1033, 1034, 1035, 1039, 1042, 1044], "forecast": [3, 4, 16, 125, 150, 151, 157, 158, 161, 166, 199, 201, 217, 260, 264, 405, 417, 494, 560, 609, 613, 620, 621, 623, 699, 739, 742, 743, 745, 787, 817, 821, 822, 825, 987, 1006, 1008], "libsvm": [3, 16, 166, 175, 336, 372, 385, 485, 506, 561, 899, 900, 901, 902, 903, 904, 905, 1002, 1008, 1023, 1027, 1029, 1035, 1038, 1041], "gui": [3, 16, 166, 485, 903, 904, 1008, 1019, 1027, 1028, 1038], "model": [3, 5, 6, 9, 10, 12, 14, 15, 16, 17, 21, 22, 25, 26, 28, 35, 40, 41, 42, 49, 50, 55, 56, 57, 59, 62, 70, 72, 73, 74, 77, 79, 81, 83, 87, 95, 96, 105, 106, 107, 111, 112, 115, 117, 121, 124, 125, 127, 129, 131, 132, 135, 136, 138, 140, 142, 144, 145, 149, 154, 155, 157, 158, 159, 160, 164, 167, 168, 172, 173, 179, 181, 184, 185, 186, 189, 190, 192, 194, 195, 196, 200, 201, 203, 204, 205, 207, 211, 212, 214, 215, 216, 218, 228, 231, 236, 245, 247, 248, 249, 252, 254, 255, 256, 258, 261, 263, 264, 265, 266, 268, 269, 273, 274, 276, 278, 283, 285, 286, 287, 289, 292, 296, 306, 309, 311, 312, 315, 317, 319, 320, 321, 325, 326, 335, 337, 338, 339, 340, 341, 343, 344, 346, 348, 352, 353, 357, 358, 359, 362, 371, 373, 374, 382, 385, 393, 396, 398, 403, 404, 405, 407, 408, 410, 412, 413, 414, 415, 416, 417, 426, 430, 432, 435, 440, 447, 463, 465, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 486, 487, 488, 494, 496, 498, 499, 500, 501, 507, 520, 522, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 541, 542, 546, 547, 548, 549, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 586, 587, 589, 591, 592, 595, 600, 604, 607, 608, 609, 613, 625, 630, 631, 632, 633, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 689, 699, 704, 709, 719, 720, 721, 731, 732, 738, 747, 750, 782, 785, 786, 789, 794, 795, 796, 799, 800, 801, 802, 810, 811, 812, 813, 817, 818, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 842, 844, 845, 846, 848, 850, 855, 856, 857, 859, 860, 862, 864, 866, 871, 872, 874, 875, 876, 878, 879, 880, 884, 885, 887, 888, 889, 890, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 914, 971, 977, 979, 980, 981, 984, 985, 988, 990, 993, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1006, 1007, 1008, 1009, 1011, 1013, 1015, 1017, 1021, 1022, 1023, 1027, 1028, 1029, 1030, 1031, 1032, 1045], "complex": [3, 9, 10, 15, 16, 17, 21, 73, 118, 132, 147, 151, 156, 163, 166, 203, 213, 216, 227, 234, 235, 243, 253, 258, 261, 264, 269, 276, 306, 315, 318, 319, 324, 331, 338, 342, 353, 355, 360, 361, 375, 379, 384, 391, 408, 412, 414, 418, 438, 442, 445, 446, 448, 465, 487, 498, 499, 500, 512, 532, 539, 549, 555, 556, 557, 558, 560, 562, 563, 602, 628, 636, 654, 656, 674, 675, 731, 747, 796, 825, 827, 855, 859, 860, 864, 872, 879, 895, 899, 902, 905, 907, 908, 909, 910, 976, 977, 979, 980, 982, 984, 986, 988, 993, 997, 1000, 1007, 1008, 1009, 1011, 1023, 1028, 1030, 1036, 1037, 1040], "influenc": [3, 9, 13, 16, 81, 82, 112, 166, 169, 181, 234, 245, 268, 305, 312, 338, 342, 346, 362, 368, 409, 412, 414, 430, 438, 452, 463, 480, 481, 482, 487, 499, 552, 554, 556, 558, 560, 563, 566, 568, 609, 626, 633, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 658, 659, 660, 661, 662, 663, 665, 668, 670, 671, 674, 676, 677, 731, 747, 825, 832, 833, 841, 842, 849, 850, 857, 876, 877, 888, 900, 902, 905, 908, 910, 919, 976, 981, 982, 983, 990, 993, 997, 1001, 1002, 1008, 1011, 1030, 1035, 1036], "core": [3, 10, 16, 50, 56, 66, 72, 112, 118, 120, 121, 166, 169, 170, 320, 365, 367, 377, 379, 382, 387, 393, 397, 407, 412, 414, 415, 418, 442, 444, 447, 448, 453, 455, 494, 497, 536, 587, 592, 656, 657, 664, 666, 674, 834, 835, 836, 837, 838, 843, 851, 983, 990, 993, 1002, 1007, 1008, 1009, 1011, 1019, 1021, 1023, 1029, 1031, 1032, 1034, 1037, 1041, 1042, 1043], "classif": [3, 6, 7, 10, 15, 16, 17, 20, 24, 25, 26, 28, 29, 32, 35, 36, 46, 72, 73, 74, 79, 80, 86, 89, 93, 94, 99, 112, 114, 116, 118, 119, 120, 121, 126, 127, 128, 130, 133, 134, 137, 140, 141, 143, 144, 145, 146, 147, 148, 150, 156, 157, 158, 161, 169, 170, 175, 177, 189, 190, 191, 192, 199, 207, 209, 210, 211, 212, 214, 218, 227, 229, 233, 234, 238, 241, 243, 248, 249, 253, 254, 257, 258, 259, 260, 261, 269, 274, 275, 276, 278, 280, 282, 284, 285, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 303, 307, 308, 309, 310, 325, 330, 331, 333, 334, 338, 341, 343, 344, 345, 346, 347, 349, 350, 352, 353, 354, 362, 366, 368, 372, 373, 374, 376, 381, 384, 388, 392, 393, 402, 405, 407, 408, 411, 412, 415, 416, 424, 435, 467, 473, 480, 485, 486, 487, 489, 490, 491, 492, 493, 494, 495, 497, 498, 500, 501, 502, 508, 510, 512, 513, 517, 518, 520, 521, 539, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 562, 563, 564, 565, 567, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 602, 603, 604, 607, 608, 609, 611, 612, 620, 629, 630, 631, 641, 656, 657, 664, 666, 672, 673, 674, 695, 701, 703, 706, 710, 711, 713, 714, 716, 723, 724, 726, 727, 731, 732, 735, 738, 739, 740, 751, 753, 755, 756, 758, 779, 780, 781, 783, 784, 785, 786, 791, 793, 796, 797, 799, 800, 801, 802, 810, 814, 815, 818, 819, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 834, 835, 836, 837, 838, 841, 846, 848, 849, 855, 856, 857, 859, 863, 866, 871, 872, 873, 874, 879, 880, 883, 885, 894, 895, 896, 899, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 922, 925, 933, 976, 977, 979, 980, 981, 984, 985, 989, 992, 994, 995, 997, 998, 1000, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1017, 1018, 1023, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044], "text": [3, 6, 7, 10, 11, 12, 15, 16, 17, 18, 20, 32, 33, 38, 41, 45, 54, 58, 59, 61, 62, 63, 65, 71, 81, 82, 118, 123, 172, 179, 193, 194, 228, 232, 239, 240, 245, 247, 253, 254, 259, 264, 266, 267, 271, 276, 288, 291, 293, 299, 307, 318, 324, 326, 331, 345, 354, 356, 366, 368, 371, 372, 373, 379, 384, 391, 393, 405, 407, 408, 410, 411, 412, 414, 417, 445, 447, 462, 466, 485, 486, 487, 497, 501, 506, 519, 534, 542, 562, 613, 623, 650, 656, 664, 666, 672, 674, 695, 701, 703, 705, 711, 715, 726, 727, 734, 790, 792, 796, 810, 825, 834, 836, 838, 841, 846, 859, 860, 862, 863, 871, 895, 896, 897, 899, 911, 912, 913, 933, 976, 979, 983, 985, 987, 988, 989, 991, 994, 997, 999, 1001, 1002, 1005, 1007, 1008, 1011, 1013, 1023, 1027, 1028, 1029, 1030, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "document": [3, 6, 7, 10, 12, 15, 16, 18, 19, 22, 23, 27, 32, 38, 46, 52, 58, 59, 61, 62, 65, 71, 72, 73, 74, 90, 91, 93, 96, 117, 119, 120, 128, 129, 132, 135, 145, 156, 169, 170, 171, 180, 182, 196, 197, 214, 229, 230, 231, 232, 235, 236, 238, 239, 240, 241, 242, 250, 254, 258, 260, 261, 267, 272, 301, 302, 311, 316, 319, 320, 322, 327, 329, 343, 346, 353, 354, 360, 366, 367, 368, 373, 374, 375, 377, 378, 380, 381, 382, 383, 384, 385, 387, 391, 393, 397, 398, 401, 404, 406, 407, 412, 415, 418, 442, 445, 446, 447, 448, 451, 455, 462, 486, 487, 497, 499, 509, 519, 521, 534, 542, 562, 586, 587, 588, 589, 592, 602, 629, 637, 641, 656, 657, 664, 666, 671, 672, 673, 674, 694, 695, 697, 701, 703, 709, 715, 734, 755, 756, 766, 775, 776, 777, 790, 792, 796, 799, 800, 802, 810, 818, 821, 823, 826, 829, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 860, 871, 899, 904, 915, 918, 920, 933, 953, 976, 983, 985, 987, 988, 989, 990, 991, 995, 1001, 1004, 1005, 1008, 1011, 1014, 1019, 1021, 1028, 1029, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "outlier": [3, 16, 35, 45, 55, 81, 82, 83, 125, 128, 151, 166, 177, 179, 197, 201, 202, 203, 204, 205, 213, 218, 227, 243, 284, 297, 304, 309, 312, 313, 337, 348, 374, 393, 407, 409, 414, 429, 444, 462, 464, 467, 468, 471, 472, 473, 474, 488, 489, 490, 494, 508, 510, 520, 522, 561, 629, 637, 647, 668, 669, 670, 674, 675, 676, 677, 690, 700, 825, 845, 849, 860, 868, 869, 871, 872, 873, 875, 876, 877, 878, 879, 884, 885, 886, 887, 888, 889, 890, 902, 903, 905, 987, 1001, 1002, 1006, 1008, 1009, 1022, 1023, 1027, 1032, 1033, 1035], "detect": [3, 8, 10, 16, 21, 35, 64, 66, 81, 82, 83, 119, 122, 128, 166, 180, 203, 213, 216, 227, 241, 243, 253, 260, 263, 269, 270, 276, 284, 297, 305, 311, 337, 374, 377, 379, 383, 391, 393, 405, 406, 407, 409, 411, 415, 429, 444, 447, 462, 464, 467, 468, 471, 472, 473, 474, 486, 487, 489, 490, 494, 508, 510, 513, 520, 535, 536, 537, 544, 561, 562, 586, 589, 594, 629, 637, 675, 696, 700, 724, 786, 825, 845, 849, 860, 869, 872, 873, 877, 878, 879, 899, 903, 979, 983, 1006, 1007, 1008, 1009, 1011, 1016, 1021, 1022, 1023, 1027, 1030, 1033, 1034, 1035, 1037, 1039, 1040, 1042, 1043], "set": [3, 4, 5, 6, 7, 8, 11, 13, 14, 16, 17, 21, 26, 27, 28, 31, 32, 35, 38, 42, 43, 45, 46, 47, 50, 51, 54, 55, 56, 58, 59, 61, 63, 65, 66, 67, 71, 72, 74, 81, 82, 83, 87, 91, 95, 96, 100, 101, 104, 107, 110, 112, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 134, 138, 144, 145, 148, 151, 157, 158, 159, 160, 166, 168, 169, 170, 171, 172, 178, 183, 184, 187, 188, 190, 192, 194, 195, 196, 198, 199, 200, 201, 204, 207, 212, 213, 217, 220, 221, 222, 228, 229, 230, 231, 233, 234, 235, 238, 242, 245, 247, 249, 250, 254, 255, 258, 260, 261, 262, 263, 264, 265, 268, 269, 270, 271, 274, 278, 281, 285, 289, 290, 291, 292, 293, 296, 300, 301, 302, 305, 307, 309, 310, 311, 312, 315, 317, 318, 322, 325, 326, 329, 330, 335, 337, 340, 342, 346, 351, 352, 353, 358, 359, 362, 366, 367, 368, 371, 372, 374, 376, 377, 379, 381, 383, 384, 386, 387, 392, 393, 394, 397, 398, 403, 404, 405, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 421, 424, 431, 432, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 457, 458, 459, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 480, 481, 482, 483, 486, 487, 491, 493, 494, 495, 497, 500, 501, 502, 506, 507, 508, 513, 521, 522, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 695, 696, 697, 698, 699, 700, 701, 711, 712, 717, 719, 720, 723, 724, 725, 726, 727, 728, 731, 735, 737, 738, 742, 743, 745, 747, 748, 750, 753, 776, 777, 779, 780, 781, 782, 784, 786, 787, 788, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 858, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 883, 884, 885, 887, 888, 889, 890, 891, 892, 894, 895, 896, 897, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 913, 914, 919, 920, 930, 931, 936, 940, 943, 944, 955, 956, 957, 958, 961, 962, 968, 971, 976, 977, 978, 979, 980, 981, 982, 984, 985, 986, 987, 988, 989, 990, 991, 993, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1013, 1015, 1016, 1017, 1020, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "predict": [3, 6, 7, 8, 11, 16, 24, 26, 27, 28, 31, 33, 35, 38, 45, 49, 57, 58, 59, 63, 71, 72, 73, 74, 76, 86, 106, 110, 111, 112, 114, 115, 116, 118, 120, 121, 122, 123, 126, 128, 129, 130, 131, 132, 133, 134, 136, 139, 140, 145, 148, 150, 151, 153, 154, 156, 157, 158, 159, 160, 161, 163, 164, 166, 169, 170, 171, 172, 175, 178, 181, 182, 183, 191, 194, 195, 196, 197, 200, 201, 202, 203, 205, 206, 207, 208, 213, 214, 216, 217, 228, 229, 231, 233, 235, 237, 246, 247, 248, 249, 250, 251, 253, 254, 258, 260, 262, 263, 266, 269, 270, 274, 276, 278, 281, 286, 289, 290, 291, 294, 295, 302, 305, 306, 310, 311, 315, 316, 317, 318, 319, 321, 322, 326, 328, 329, 330, 334, 335, 337, 338, 342, 344, 345, 346, 347, 351, 352, 357, 358, 359, 360, 362, 365, 367, 371, 374, 376, 379, 381, 386, 388, 393, 396, 398, 401, 402, 403, 405, 406, 407, 408, 410, 412, 414, 415, 416, 421, 424, 429, 430, 435, 436, 437, 438, 440, 441, 442, 445, 446, 447, 463, 467, 480, 481, 482, 485, 499, 506, 522, 532, 539, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 575, 580, 591, 592, 600, 604, 608, 609, 611, 612, 613, 614, 620, 623, 625, 626, 628, 629, 630, 631, 632, 633, 635, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 695, 696, 698, 699, 700, 701, 703, 704, 705, 706, 707, 708, 710, 712, 713, 716, 719, 720, 721, 722, 723, 724, 725, 726, 727, 731, 732, 735, 738, 739, 740, 743, 745, 747, 749, 753, 779, 780, 781, 782, 783, 784, 785, 786, 790, 791, 793, 794, 795, 796, 799, 800, 802, 810, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 845, 846, 849, 850, 856, 857, 859, 866, 879, 880, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 961, 976, 977, 978, 979, 980, 981, 982, 983, 985, 986, 988, 989, 990, 991, 993, 994, 995, 997, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1011, 1013, 1015, 1016, 1017, 1021, 1023, 1024, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "latenc": [3, 7, 8, 16, 166, 365, 522, 563, 670, 676, 825, 879, 905, 952, 961, 1006, 1008, 1023, 1030], "speci": [3, 16, 91, 166, 238, 284, 297, 351, 372, 413, 496, 704, 786, 844, 903, 914, 987, 993, 1008, 1023, 1027], "distribut": [3, 4, 8, 9, 10, 13, 16, 21, 28, 35, 38, 40, 45, 53, 54, 56, 58, 63, 76, 80, 81, 82, 87, 93, 112, 114, 125, 128, 143, 148, 151, 160, 166, 168, 169, 172, 175, 178, 199, 201, 203, 222, 224, 228, 232, 238, 245, 250, 251, 256, 260, 266, 268, 278, 284, 288, 297, 304, 305, 307, 310, 313, 321, 325, 326, 343, 346, 351, 366, 367, 372, 375, 376, 377, 379, 380, 383, 384, 385, 393, 401, 405, 406, 407, 409, 411, 412, 413, 419, 445, 447, 467, 468, 469, 470, 471, 472, 473, 474, 486, 496, 501, 513, 514, 515, 516, 517, 521, 530, 531, 534, 548, 549, 550, 561, 609, 623, 638, 640, 642, 643, 646, 656, 657, 667, 677, 678, 686, 687, 688, 690, 704, 706, 721, 749, 786, 794, 795, 800, 801, 808, 810, 814, 815, 825, 835, 838, 844, 848, 855, 862, 875, 876, 877, 878, 879, 887, 888, 889, 894, 895, 903, 914, 938, 955, 976, 981, 983, 985, 986, 987, 989, 990, 992, 993, 999, 1000, 1006, 1007, 1008, 1012, 1016, 1020, 1022, 1023, 1027, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1043], "relat": [3, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 166, 167, 168, 169, 170, 171, 172, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360, 374, 375, 378, 382, 383, 384, 386, 387, 388, 391, 393, 394, 396, 398, 401, 406, 407, 408, 409, 410, 411, 412, 414, 417, 448, 462, 467, 494, 547, 548, 560, 561, 637, 671, 675, 690, 699, 720, 740, 817, 822, 857, 858, 860, 863, 864, 869, 872, 874, 875, 878, 887, 903, 976, 979, 981, 987, 988, 990, 991, 994, 997, 1002, 1003, 1004, 1007, 1008, 1023, 1027, 1031, 1032, 1033, 1035, 1036, 1039, 1040, 1043], "engin": [3, 16, 41, 117, 122, 156, 166, 169, 170, 200, 366, 373, 376, 407, 413, 415, 462, 494, 560, 637, 671, 699, 817, 822, 857, 858, 860, 863, 864, 869, 872, 874, 878, 977, 979, 987, 997, 1008, 1033], "topic": [3, 6, 7, 8, 16, 71, 166, 225, 319, 351, 352, 353, 374, 375, 411, 412, 415, 486, 495, 534, 536, 538, 545, 586, 589, 983, 988, 1006, 1007, 1008, 1021, 1032, 1034], "extract": [3, 4, 6, 8, 11, 12, 16, 18, 51, 56, 70, 71, 72, 73, 77, 86, 96, 118, 144, 148, 166, 214, 225, 253, 259, 264, 265, 266, 268, 276, 302, 319, 329, 341, 351, 353, 362, 371, 374, 376, 381, 385, 388, 391, 407, 408, 411, 412, 448, 450, 453, 454, 460, 462, 486, 487, 491, 492, 501, 502, 529, 532, 533, 534, 535, 536, 537, 538, 539, 541, 543, 544, 545, 581, 582, 586, 587, 589, 591, 592, 595, 597, 629, 716, 785, 796, 810, 836, 858, 859, 904, 936, 944, 951, 976, 984, 988, 992, 997, 1001, 1006, 1008, 1011, 1013, 1017, 1018, 1023, 1027, 1028, 1036, 1039], "neg": [3, 4, 6, 16, 17, 25, 61, 76, 79, 87, 118, 124, 125, 129, 166, 168, 169, 177, 189, 195, 196, 197, 199, 217, 218, 225, 249, 250, 257, 260, 263, 267, 269, 270, 283, 305, 309, 319, 351, 385, 393, 394, 407, 411, 414, 415, 416, 418, 419, 430, 438, 442, 450, 463, 467, 480, 481, 482, 486, 529, 531, 533, 534, 535, 536, 538, 540, 542, 545, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 568, 586, 589, 590, 593, 594, 596, 597, 598, 600, 602, 603, 604, 605, 606, 607, 609, 633, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 658, 659, 660, 661, 662, 663, 665, 667, 668, 670, 671, 675, 676, 677, 678, 685, 696, 697, 702, 703, 710, 711, 713, 714, 716, 717, 719, 720, 721, 724, 726, 727, 728, 732, 735, 738, 740, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 755, 756, 779, 780, 781, 782, 784, 787, 788, 790, 794, 795, 802, 818, 820, 825, 832, 833, 842, 845, 850, 857, 866, 875, 877, 878, 883, 887, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 934, 936, 955, 985, 987, 988, 990, 991, 992, 993, 1001, 1002, 1008, 1021, 1022, 1023, 1027, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044], "matrix": [3, 6, 7, 9, 13, 14, 16, 20, 21, 22, 33, 35, 40, 42, 45, 55, 63, 71, 80, 81, 82, 83, 86, 96, 97, 98, 106, 158, 166, 172, 177, 185, 200, 204, 218, 225, 229, 232, 233, 235, 250, 253, 267, 276, 295, 301, 319, 322, 325, 326, 342, 351, 352, 353, 360, 366, 374, 375, 376, 379, 381, 385, 388, 391, 392, 393, 404, 408, 409, 410, 415, 416, 417, 418, 419, 429, 430, 436, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 450, 452, 455, 457, 458, 460, 461, 462, 463, 465, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 480, 481, 482, 483, 485, 486, 487, 490, 494, 495, 498, 499, 500, 501, 502, 503, 506, 507, 508, 517, 519, 521, 522, 524, 525, 527, 529, 530, 531, 532, 533, 534, 535, 536, 538, 539, 542, 543, 544, 545, 546, 547, 548, 551, 552, 553, 554, 555, 556, 557, 558, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 583, 584, 586, 587, 588, 589, 591, 592, 601, 602, 603, 604, 605, 606, 607, 609, 618, 627, 628, 629, 631, 633, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 705, 710, 711, 712, 713, 714, 716, 726, 727, 728, 731, 735, 736, 737, 738, 751, 752, 755, 756, 757, 758, 760, 761, 763, 764, 765, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 780, 781, 784, 785, 789, 790, 793, 794, 795, 796, 799, 800, 810, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 838, 841, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 862, 863, 864, 865, 866, 868, 870, 871, 872, 874, 876, 877, 878, 879, 881, 882, 883, 884, 886, 888, 889, 890, 891, 892, 893, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 915, 917, 918, 919, 920, 925, 933, 934, 935, 936, 937, 940, 941, 942, 950, 951, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 973, 977, 979, 981, 983, 984, 988, 989, 990, 991, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1008, 1020, 1021, 1022, 1023, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "factor": [3, 6, 9, 16, 27, 32, 45, 47, 54, 56, 63, 79, 86, 95, 101, 105, 107, 130, 166, 169, 213, 225, 228, 238, 271, 272, 283, 284, 297, 299, 300, 305, 307, 317, 319, 337, 366, 367, 379, 385, 388, 393, 404, 406, 407, 414, 415, 417, 438, 440, 452, 467, 469, 470, 471, 472, 474, 476, 486, 502, 512, 513, 525, 530, 533, 534, 536, 538, 539, 542, 543, 544, 545, 547, 548, 559, 560, 561, 586, 589, 595, 611, 647, 648, 649, 652, 653, 654, 680, 681, 690, 717, 780, 796, 799, 800, 821, 845, 879, 893, 895, 903, 935, 936, 976, 983, 984, 990, 997, 1000, 1004, 1006, 1008, 1022, 1023, 1027, 1028, 1030, 1031, 1033, 1041, 1043], "latent": [3, 6, 16, 18, 106, 166, 225, 302, 319, 352, 410, 415, 417, 486, 530, 534, 536, 537, 538, 541, 542, 586, 589, 855, 986, 1006, 1008, 1021, 1022, 1023, 1029, 1032], "dirichlet": [3, 6, 16, 166, 225, 245, 246, 251, 255, 319, 415, 486, 534, 536, 538, 586, 589, 794, 1006, 1008, 1022, 1023, 1027, 1032, 1033], "alloc": [3, 6, 16, 26, 62, 166, 225, 272, 317, 319, 375, 379, 380, 407, 415, 441, 445, 457, 486, 534, 536, 538, 582, 586, 589, 644, 650, 658, 660, 799, 800, 802, 818, 823, 826, 976, 997, 1006, 1008, 1022, 1023, 1031, 1032, 1037, 1038, 1044], "visual": [3, 4, 9, 13, 16, 17, 21, 26, 31, 33, 44, 47, 50, 53, 58, 61, 62, 67, 81, 86, 92, 95, 96, 98, 100, 103, 105, 107, 117, 118, 126, 128, 130, 134, 135, 147, 159, 164, 166, 170, 172, 183, 190, 199, 201, 217, 220, 221, 224, 225, 227, 230, 233, 239, 240, 243, 250, 253, 254, 256, 257, 261, 262, 265, 267, 269, 270, 276, 288, 292, 293, 298, 300, 303, 305, 309, 310, 315, 317, 326, 342, 371, 375, 377, 385, 386, 404, 409, 411, 412, 413, 414, 436, 439, 443, 444, 452, 470, 494, 500, 502, 505, 508, 512, 520, 530, 532, 539, 562, 564, 569, 629, 631, 656, 687, 690, 695, 696, 698, 699, 700, 716, 724, 779, 786, 797, 798, 801, 802, 813, 814, 815, 816, 817, 818, 825, 856, 860, 864, 868, 869, 871, 875, 876, 877, 879, 901, 904, 913, 932, 982, 984, 985, 990, 991, 993, 994, 997, 1003, 1006, 1008, 1012, 1023, 1030, 1037, 1038, 1039, 1041], "stock": [3, 16, 47, 53, 67, 166, 220, 221, 224, 407, 409, 452, 470, 687, 1008, 1015], "market": [3, 16, 47, 53, 67, 166, 220, 221, 224, 407, 409, 452, 470, 687, 1008, 1011, 1015], "wikipedia": [3, 16, 25, 166, 387, 406, 407, 593, 605, 606, 634, 654, 666, 669, 680, 681, 693, 702, 703, 705, 707, 710, 714, 716, 723, 726, 727, 728, 731, 732, 735, 740, 753, 780, 782, 783, 785, 786, 789, 790, 841, 842, 847, 848, 849, 850, 877, 893, 907, 908, 979, 983, 987, 990, 999, 1003, 1008, 1021, 1027, 1034], "princip": [3, 16, 85, 86, 88, 91, 98, 100, 101, 102, 104, 130, 166, 220, 233, 236, 292, 310, 317, 371, 407, 410, 419, 482, 529, 530, 531, 532, 533, 535, 537, 538, 539, 540, 541, 542, 543, 544, 548, 655, 686, 687, 688, 690, 691, 825, 848, 860, 879, 935, 936, 984, 990, 1008, 1022, 1023, 1027], "eigenvector": [3, 16, 47, 87, 91, 166, 245, 407, 450, 460, 532, 533, 539, 548, 686, 687, 689, 693, 984, 1008, 1027, 1031, 1041], "end": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 168, 169, 170, 171, 172, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360, 377, 379, 381, 383, 391, 393, 394, 397, 398, 404, 407, 408, 410, 414, 448, 454, 466, 486, 487, 506, 507, 535, 544, 555, 556, 557, 558, 562, 563, 564, 643, 644, 645, 648, 649, 650, 651, 652, 653, 658, 659, 660, 661, 679, 680, 681, 682, 796, 799, 800, 810, 817, 820, 857, 859, 897, 907, 908, 909, 910, 940, 941, 971, 976, 979, 983, 984, 986, 987, 997, 999, 1001, 1006, 1011, 1018, 1021, 1032, 1034, 1037, 1040, 1041], "download": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 138, 139, 140, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 166, 168, 169, 170, 171, 172, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360, 372, 374, 376, 377, 383, 384, 387, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 508, 1003, 1017, 1019, 1021, 1023, 1031, 1032, 1035, 1039, 1040, 1041], "exampl": [4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 366, 367, 376, 378, 379, 381, 382, 383, 385, 386, 387, 388, 389, 392, 393, 397, 400, 401, 406, 418, 419, 420, 422, 423, 425, 426, 428, 429, 432, 433, 434, 437, 454, 455, 457, 459, 461, 469, 476, 478, 479, 483, 484, 501, 505, 506, 514, 515, 516, 527, 529, 543, 544, 545, 546, 553, 570, 571, 575, 581, 583, 590, 593, 594, 596, 599, 601, 607, 610, 614, 618, 619, 622, 624, 627, 634, 635, 636, 640, 648, 649, 652, 658, 659, 661, 665, 673, 685, 692, 693, 694, 697, 706, 708, 709, 712, 713, 714, 718, 719, 720, 721, 722, 723, 725, 727, 728, 730, 733, 736, 737, 740, 741, 744, 748, 751, 753, 755, 756, 757, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 777, 778, 780, 788, 791, 793, 803, 804, 805, 806, 807, 808, 809, 819, 831, 833, 835, 839, 840, 849, 850, 851, 853, 854, 861, 862, 865, 867, 870, 881, 882, 884, 886, 887, 889, 890, 891, 894, 898, 900, 909, 910, 911, 912, 915, 916, 917, 918, 919, 920, 921, 923, 924, 925, 926, 927, 928, 929, 930, 932, 934, 935, 936, 937, 938, 939, 941, 942, 949, 950, 951, 952, 955, 956, 958, 959, 960, 962, 963, 964, 965, 966, 967, 968, 972, 973, 974, 975, 977, 985, 1007, 1008, 1009, 1011, 1013, 1016, 1017, 1021, 1023, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1037, 1040, 1042, 1043, 1044], "run": [4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 168, 169, 170, 171, 172, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360, 362, 366, 367, 377, 379, 380, 381, 383, 384, 385, 386, 387, 391, 393, 394, 397, 403, 407, 409, 411, 414, 417, 418, 419, 435, 441, 442, 444, 445, 447, 448, 449, 450, 451, 452, 453, 455, 456, 457, 460, 462, 465, 466, 469, 470, 529, 530, 531, 532, 533, 535, 537, 539, 540, 541, 543, 544, 546, 553, 554, 555, 556, 561, 562, 563, 564, 565, 566, 567, 568, 580, 590, 592, 593, 594, 596, 597, 598, 600, 608, 609, 628, 632, 638, 644, 645, 647, 649, 650, 651, 653, 654, 658, 659, 660, 661, 680, 681, 686, 687, 688, 689, 690, 691, 692, 778, 796, 799, 800, 802, 810, 818, 820, 821, 822, 823, 824, 826, 831, 832, 841, 842, 843, 845, 847, 849, 850, 851, 852, 853, 856, 857, 858, 861, 894, 895, 897, 899, 900, 901, 902, 903, 904, 905, 907, 908, 930, 931, 955, 958, 961, 976, 986, 988, 991, 1000, 1002, 1003, 1006, 1007, 1011, 1012, 1019, 1021, 1027, 1030, 1032, 1034, 1035, 1036, 1037, 1041, 1042, 1043], "your": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 168, 169, 170, 171, 172, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360, 362, 366, 367, 368, 373, 377, 378, 379, 380, 382, 383, 385, 387, 388, 391, 392, 393, 397, 401, 403, 406, 407, 408, 409, 414, 415, 418, 419, 442, 444, 501, 531, 559, 560, 600, 632, 644, 685, 796, 799, 800, 802, 810, 818, 822, 824, 930, 984, 991, 997, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1010, 1011, 1014, 1021, 1028, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "browser": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 168, 169, 170, 171, 172, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360, 379, 387, 997, 1044], "jupyterlit": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 168, 169, 170, 171, 172, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360], "binder": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 168, 169, 170, 171, 172, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360], "notebook": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 166, 168, 169, 170, 171, 172, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360, 380, 381, 385, 408, 466, 897, 1003, 1005, 1006, 1007, 1038, 1041], "introduc": [4, 72, 79, 81, 82, 101, 147, 166, 171, 178, 183, 203, 227, 232, 235, 238, 240, 243, 267, 320, 321, 353, 372, 375, 377, 379, 381, 383, 384, 387, 391, 393, 398, 405, 407, 409, 411, 412, 414, 415, 431, 439, 440, 441, 443, 445, 447, 457, 462, 466, 480, 481, 482, 483, 494, 502, 513, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 553, 554, 564, 565, 566, 567, 568, 579, 580, 581, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 605, 606, 625, 626, 627, 628, 633, 636, 637, 638, 639, 640, 656, 662, 683, 684, 686, 687, 690, 825, 843, 848, 851, 855, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 891, 892, 893, 897, 981, 983, 986, 989, 990, 993, 997, 999, 1001, 1002, 1008, 1012, 1019, 1027, 1028, 1033, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043], "differ": [4, 5, 7, 10, 12, 14, 15, 17, 21, 22, 25, 28, 31, 32, 35, 37, 38, 40, 42, 43, 44, 46, 47, 48, 50, 53, 54, 56, 57, 58, 59, 61, 65, 66, 67, 68, 69, 71, 72, 73, 75, 81, 86, 87, 91, 92, 93, 96, 98, 99, 101, 103, 104, 105, 112, 115, 117, 118, 121, 122, 123, 125, 127, 128, 132, 133, 134, 135, 138, 140, 143, 148, 150, 151, 152, 153, 156, 157, 158, 161, 163, 164, 166, 168, 169, 171, 175, 178, 179, 182, 185, 186, 187, 188, 190, 196, 199, 200, 201, 203, 204, 205, 206, 207, 216, 217, 220, 221, 222, 223, 225, 228, 230, 233, 234, 235, 238, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 274, 275, 278, 281, 283, 286, 289, 290, 292, 299, 300, 304, 306, 307, 309, 310, 313, 315, 333, 334, 336, 337, 338, 340, 341, 346, 347, 349, 351, 352, 353, 362, 366, 367, 368, 373, 374, 376, 377, 378, 379, 382, 384, 386, 388, 392, 393, 397, 401, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 420, 432, 435, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 456, 457, 460, 462, 473, 476, 488, 491, 492, 494, 501, 502, 506, 507, 510, 512, 520, 535, 536, 537, 538, 544, 545, 547, 548, 553, 554, 561, 579, 580, 586, 587, 588, 589, 592, 609, 611, 612, 613, 617, 620, 621, 625, 629, 630, 631, 632, 636, 641, 642, 645, 647, 649, 651, 653, 656, 659, 664, 665, 666, 670, 672, 674, 675, 676, 678, 688, 690, 692, 696, 698, 699, 702, 703, 704, 705, 707, 713, 715, 716, 724, 725, 726, 727, 728, 731, 732, 734, 740, 754, 755, 756, 758, 775, 779, 780, 781, 783, 784, 786, 789, 790, 792, 795, 796, 798, 799, 800, 801, 802, 805, 810, 811, 812, 813, 814, 815, 816, 818, 820, 822, 823, 826, 834, 835, 836, 837, 838, 839, 840, 841, 842, 845, 849, 852, 855, 859, 864, 868, 869, 871, 872, 873, 874, 875, 876, 877, 879, 880, 884, 885, 886, 887, 888, 889, 890, 899, 900, 901, 904, 907, 908, 909, 910, 944, 951, 976, 977, 979, 980, 982, 984, 985, 986, 987, 988, 989, 990, 991, 993, 994, 995, 997, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1011, 1012, 1014, 1015, 1016, 1020, 1021, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "strategi": [4, 13, 53, 55, 59, 62, 72, 122, 127, 132, 139, 145, 147, 163, 164, 166, 171, 183, 188, 199, 206, 207, 217, 229, 230, 238, 240, 253, 259, 261, 263, 264, 265, 267, 268, 269, 270, 272, 276, 281, 298, 301, 303, 304, 306, 307, 311, 312, 313, 315, 316, 319, 353, 365, 381, 385, 392, 393, 411, 414, 415, 416, 419, 435, 436, 437, 445, 450, 460, 470, 500, 502, 510, 512, 520, 531, 536, 549, 550, 559, 560, 562, 563, 565, 566, 569, 586, 587, 589, 590, 592, 600, 625, 626, 628, 632, 643, 645, 649, 651, 653, 659, 661, 663, 671, 673, 689, 693, 702, 711, 729, 752, 754, 792, 796, 799, 800, 802, 810, 813, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 856, 864, 869, 880, 894, 899, 901, 904, 907, 908, 909, 910, 958, 976, 977, 986, 988, 989, 990, 991, 993, 995, 997, 1001, 1002, 1003, 1006, 1008, 1016, 1021, 1023, 1030, 1031, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1045], "leverag": [4, 8, 38, 50, 87, 217, 351, 352, 366, 367, 377, 411, 414, 874, 976, 983, 1012, 1030, 1042], "task": [4, 7, 99, 119, 120, 126, 146, 147, 159, 166, 177, 183, 185, 186, 188, 198, 199, 215, 218, 220, 238, 257, 281, 342, 353, 366, 368, 374, 376, 377, 378, 379, 383, 384, 385, 388, 391, 392, 393, 412, 414, 415, 416, 417, 446, 459, 491, 503, 513, 590, 593, 594, 596, 597, 598, 602, 603, 604, 607, 630, 631, 644, 645, 650, 651, 658, 659, 660, 661, 672, 679, 682, 724, 726, 727, 751, 779, 781, 784, 786, 797, 801, 814, 819, 953, 954, 984, 987, 988, 989, 990, 998, 1000, 1002, 1003, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1019, 1020, 1021, 1023, 1027, 1032, 1036, 1042], "highli": [4, 9, 73, 81, 82, 98, 106, 128, 183, 194, 204, 260, 263, 269, 300, 342, 352, 366, 367, 379, 381, 385, 405, 407, 411, 414, 415, 450, 460, 494, 561, 669, 690, 808, 810, 855, 983, 987, 990, 991, 993, 1001, 1002, 1005, 1006], "depend": [4, 5, 7, 13, 38, 54, 76, 100, 118, 122, 125, 126, 129, 132, 143, 147, 157, 163, 166, 167, 169, 172, 173, 175, 179, 183, 217, 221, 227, 228, 234, 238, 243, 250, 260, 261, 265, 266, 267, 283, 300, 305, 310, 317, 320, 335, 342, 346, 352, 353, 362, 366, 367, 368, 372, 379, 381, 382, 387, 388, 391, 392, 393, 394, 396, 397, 400, 401, 403, 406, 407, 409, 411, 412, 414, 415, 416, 417, 418, 436, 437, 438, 442, 444, 445, 447, 448, 450, 452, 455, 457, 458, 460, 462, 467, 482, 487, 488, 489, 491, 494, 498, 499, 500, 502, 503, 508, 532, 533, 539, 542, 549, 557, 558, 560, 586, 587, 588, 589, 600, 602, 605, 606, 609, 625, 630, 631, 636, 638, 646, 656, 657, 667, 669, 671, 674, 675, 676, 678, 685, 688, 689, 692, 693, 726, 727, 735, 738, 775, 778, 780, 781, 784, 789, 790, 794, 795, 815, 824, 841, 842, 843, 845, 847, 848, 849, 850, 851, 857, 858, 860, 872, 873, 876, 879, 893, 900, 901, 904, 908, 917, 976, 977, 979, 980, 981, 983, 984, 986, 987, 989, 990, 991, 992, 995, 999, 1001, 1002, 1003, 1008, 1012, 1019, 1021, 1023, 1024, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1038, 1042, 1043, 1044], "busi": [4, 199, 260, 387, 391, 785, 983, 987, 1011], "dai": [4, 12, 13, 156, 170, 200, 367, 376, 379, 878, 1011, 1033, 1034, 1041, 1042], "week": [4, 13, 322, 378, 379, 394, 494, 1011, 1041], "yearli": 4, "season": [4, 13, 156, 170, 200, 378], "perform": [4, 7, 13, 18, 20, 25, 26, 27, 28, 33, 37, 39, 41, 49, 50, 54, 58, 59, 60, 61, 62, 63, 65, 67, 68, 69, 71, 72, 75, 79, 87, 90, 99, 105, 110, 112, 118, 120, 122, 123, 124, 126, 127, 131, 132, 138, 143, 146, 147, 148, 152, 160, 163, 164, 166, 169, 170, 171, 172, 175, 183, 188, 199, 201, 203, 205, 206, 207, 216, 217, 221, 222, 224, 228, 233, 236, 238, 247, 250, 253, 255, 256, 257, 258, 260, 261, 262, 265, 266, 268, 269, 271, 273, 275, 276, 278, 281, 283, 296, 302, 305, 307, 309, 311, 312, 315, 321, 322, 324, 326, 327, 331, 338, 341, 342, 344, 346, 351, 353, 362, 365, 367, 368, 374, 376, 381, 382, 383, 385, 387, 388, 391, 392, 393, 396, 398, 401, 402, 403, 404, 405, 406, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 425, 429, 438, 440, 441, 442, 444, 445, 446, 448, 450, 452, 453, 457, 459, 466, 467, 480, 481, 482, 483, 492, 500, 510, 513, 529, 530, 531, 533, 535, 540, 541, 542, 543, 544, 546, 548, 549, 550, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 579, 580, 581, 586, 587, 588, 589, 592, 599, 600, 601, 608, 609, 625, 628, 629, 636, 638, 643, 649, 652, 653, 654, 656, 662, 663, 664, 665, 666, 668, 671, 673, 674, 675, 676, 680, 681, 683, 685, 687, 688, 691, 692, 695, 701, 702, 703, 705, 706, 710, 711, 723, 726, 727, 735, 737, 739, 752, 753, 754, 775, 780, 781, 783, 784, 785, 791, 792, 793, 794, 795, 796, 799, 800, 807, 808, 810, 814, 820, 821, 822, 824, 825, 828, 831, 832, 834, 835, 836, 837, 838, 839, 840, 846, 848, 854, 855, 856, 857, 859, 860, 862, 865, 866, 868, 869, 871, 872, 873, 875, 876, 879, 880, 882, 884, 885, 886, 888, 889, 890, 894, 895, 897, 901, 902, 903, 904, 905, 907, 908, 909, 910, 919, 920, 960, 971, 976, 977, 979, 981, 983, 984, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 997, 1000, 1001, 1002, 1003, 1006, 1007, 1008, 1011, 1012, 1013, 1016, 1019, 1022, 1023, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044], "sklearn": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 85, 86, 87, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 280, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 362, 366, 367, 368, 372, 373, 374, 377, 378, 379, 380, 381, 383, 384, 385, 387, 388, 391, 392, 393, 396, 397, 398, 401, 403, 405, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 976, 977, 979, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 993, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1006, 1007, 1012, 1016, 1017, 1018, 1019, 1020, 1021, 1024, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "preprocess": [4, 5, 6, 10, 32, 43, 45, 50, 54, 56, 59, 63, 71, 72, 73, 74, 76, 87, 96, 106, 117, 122, 144, 148, 156, 160, 171, 175, 178, 180, 187, 188, 190, 199, 200, 205, 215, 217, 221, 229, 230, 239, 242, 257, 267, 269, 274, 286, 291, 292, 299, 300, 302, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 322, 329, 338, 341, 352, 368, 371, 373, 376, 379, 384, 392, 393, 403, 404, 407, 408, 411, 414, 415, 416, 462, 463, 464, 465, 487, 565, 579, 580, 586, 587, 589, 628, 656, 657, 670, 672, 674, 676, 685, 828, 859, 860, 899, 900, 901, 902, 904, 905, 977, 983, 988, 991, 998, 1001, 1002, 1004, 1006, 1008, 1010, 1011, 1012, 1017, 1018, 1021, 1023, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "splinetransform": [4, 200, 238, 318, 874, 997, 1040, 1042, 1043], "class": [4, 8, 9, 10, 11, 14, 17, 20, 24, 25, 26, 28, 29, 31, 35, 41, 46, 55, 56, 57, 59, 72, 73, 91, 92, 93, 101, 104, 106, 110, 111, 113, 116, 118, 120, 123, 128, 133, 136, 148, 151, 152, 154, 155, 159, 160, 163, 166, 169, 170, 175, 177, 189, 190, 191, 207, 211, 214, 215, 218, 221, 228, 235, 236, 238, 245, 246, 247, 253, 254, 255, 260, 262, 266, 270, 271, 276, 278, 281, 283, 286, 288, 289, 290, 291, 292, 293, 294, 310, 315, 319, 321, 322, 325, 327, 328, 333, 334, 335, 336, 338, 339, 342, 347, 349, 351, 352, 353, 357, 360, 368, 371, 373, 374, 375, 376, 379, 380, 381, 383, 384, 385, 386, 388, 391, 392, 397, 403, 405, 407, 408, 410, 412, 416, 417, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 459, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 485, 486, 487, 489, 490, 491, 492, 493, 494, 495, 498, 500, 501, 502, 506, 507, 508, 510, 512, 513, 517, 520, 521, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 579, 580, 581, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 686, 687, 688, 689, 690, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 707, 710, 711, 712, 713, 714, 715, 716, 718, 724, 726, 727, 728, 730, 732, 733, 734, 735, 736, 737, 738, 739, 740, 751, 752, 754, 779, 780, 781, 783, 784, 785, 786, 791, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 822, 823, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 883, 891, 892, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 914, 924, 925, 926, 927, 928, 930, 931, 943, 944, 945, 948, 953, 955, 957, 958, 971, 973, 976, 977, 978, 979, 981, 982, 983, 984, 986, 988, 989, 991, 994, 995, 997, 998, 1000, 1003, 1007, 1008, 1009, 1011, 1012, 1016, 1019, 1021, 1023, 1024, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "extrapol": [4, 151, 178, 200, 231, 263, 878, 987, 997, 1003, 1040, 1042], "option": [4, 31, 47, 53, 103, 118, 126, 157, 164, 180, 183, 200, 238, 263, 269, 316, 351, 356, 362, 368, 373, 374, 375, 377, 379, 380, 382, 384, 385, 387, 388, 391, 393, 394, 397, 401, 407, 408, 410, 411, 412, 414, 415, 418, 431, 435, 439, 440, 441, 442, 443, 444, 445, 446, 447, 450, 457, 459, 460, 461, 462, 463, 466, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 608, 609, 610, 611, 612, 613, 614, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 630, 631, 632, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 681, 685, 686, 687, 688, 690, 692, 693, 709, 711, 715, 726, 727, 732, 733, 734, 754, 755, 756, 761, 763, 764, 768, 771, 772, 773, 774, 775, 778, 780, 781, 784, 789, 790, 792, 797, 798, 799, 800, 802, 803, 805, 814, 818, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 846, 848, 849, 850, 851, 855, 856, 857, 858, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 891, 892, 894, 895, 897, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 913, 926, 973, 976, 977, 983, 986, 987, 990, 997, 1000, 1002, 1003, 1007, 1019, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "load": [4, 6, 11, 12, 13, 15, 27, 33, 47, 49, 54, 72, 73, 90, 96, 106, 117, 119, 121, 123, 128, 129, 132, 133, 135, 145, 146, 156, 169, 170, 175, 180, 195, 196, 199, 207, 215, 230, 231, 235, 237, 238, 239, 240, 242, 250, 256, 258, 260, 265, 267, 272, 278, 283, 287, 292, 300, 301, 302, 316, 317, 319, 320, 322, 327, 328, 329, 357, 360, 366, 371, 374, 376, 382, 385, 392, 401, 406, 410, 411, 412, 414, 480, 481, 482, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 530, 532, 541, 839, 840, 936, 997, 1007, 1013, 1015, 1017, 1023, 1027, 1032, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "openml": [4, 13, 72, 132, 156, 169, 199, 207, 215, 217, 229, 278, 281, 301, 372, 397, 494, 1023, 1035, 1037, 1040], "repositori": [4, 8, 13, 175, 321, 372, 374, 376, 377, 379, 381, 383, 387, 394, 397, 502, 1006, 1010, 1023], "import": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 110, 111, 112, 113, 114, 115, 116, 117, 118, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 143, 144, 145, 146, 147, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 166, 167, 168, 169, 170, 173, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 311, 312, 313, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360, 362, 366, 367, 368, 373, 374, 377, 378, 379, 381, 383, 384, 385, 386, 387, 388, 391, 392, 393, 396, 397, 398, 401, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 488, 489, 493, 494, 496, 498, 499, 500, 501, 502, 504, 505, 506, 508, 510, 512, 513, 514, 515, 516, 517, 519, 521, 522, 525, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 575, 577, 578, 579, 580, 581, 582, 583, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 682, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 948, 949, 950, 951, 952, 955, 956, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 971, 972, 973, 974, 975, 976, 977, 979, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 993, 994, 997, 998, 999, 1000, 1001, 1002, 1003, 1007, 1008, 1011, 1012, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1023, 1024, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1042], "fetch_openml": [4, 5, 13, 72, 76, 122, 132, 156, 169, 170, 171, 199, 207, 215, 217, 229, 238, 242, 278, 281, 283, 301, 311, 315, 319, 322, 373, 383, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "bike_shar": [4, 13], "bike_sharing_demand": [4, 13, 170], "version": [4, 13, 47, 54, 56, 72, 96, 101, 112, 153, 164, 170, 171, 175, 183, 197, 200, 201, 207, 213, 215, 235, 238, 242, 281, 301, 310, 315, 316, 317, 318, 320, 321, 322, 338, 351, 366, 374, 378, 379, 380, 381, 382, 385, 387, 388, 391, 393, 394, 397, 400, 401, 406, 407, 408, 410, 412, 414, 415, 417, 418, 419, 425, 429, 430, 431, 432, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 492, 493, 494, 495, 498, 499, 500, 502, 503, 506, 507, 508, 510, 512, 520, 521, 524, 525, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 579, 580, 581, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 698, 699, 700, 702, 705, 706, 711, 712, 716, 719, 720, 721, 722, 724, 725, 726, 727, 728, 731, 736, 737, 738, 739, 740, 743, 747, 748, 750, 751, 754, 755, 756, 758, 763, 764, 766, 775, 779, 780, 781, 782, 784, 786, 787, 788, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 809, 810, 814, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 885, 887, 888, 889, 891, 892, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 917, 919, 920, 930, 931, 935, 936, 943, 944, 945, 946, 947, 950, 953, 954, 955, 957, 962, 968, 973, 974, 976, 979, 981, 984, 987, 989, 991, 993, 995, 1000, 1001, 1003, 1006, 1007, 1010, 1020, 1025], "2": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 40, 41, 43, 44, 45, 46, 47, 48, 49, 51, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 88, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 138, 140, 144, 145, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 165, 166, 168, 169, 170, 171, 172, 175, 177, 179, 180, 181, 182, 183, 184, 185, 187, 188, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 321, 322, 323, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360, 362, 366, 367, 368, 373, 374, 376, 377, 379, 381, 383, 384, 385, 386, 388, 391, 392, 393, 397, 398, 399, 400, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 428, 429, 430, 431, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 466, 467, 469, 470, 471, 472, 473, 476, 477, 478, 480, 481, 482, 483, 491, 494, 498, 499, 502, 505, 506, 507, 508, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 526, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 575, 579, 580, 582, 583, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 599, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 699, 701, 702, 703, 704, 705, 706, 709, 711, 712, 713, 714, 715, 716, 719, 720, 721, 722, 723, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 753, 754, 755, 756, 760, 761, 764, 765, 766, 768, 770, 771, 772, 773, 775, 778, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 877, 878, 879, 880, 882, 883, 884, 885, 886, 887, 889, 890, 892, 893, 895, 897, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 912, 914, 915, 916, 917, 919, 920, 921, 925, 928, 934, 935, 936, 937, 938, 939, 940, 941, 942, 948, 949, 950, 951, 952, 953, 955, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 971, 973, 974, 976, 977, 978, 979, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 993, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1008, 1012, 1013, 1016, 1017, 1018, 1019, 1020, 1024, 1025, 1027, 1028, 1029, 1031, 1032, 1044], "as_fram": [4, 5, 13, 72, 76, 118, 122, 132, 156, 169, 170, 171, 172, 187, 188, 199, 207, 215, 217, 238, 242, 278, 283, 286, 301, 310, 311, 315, 317, 319, 320, 373, 374, 487, 488, 489, 490, 494, 498, 499, 500, 502, 503, 508, 1037, 1038, 1039, 1040, 1043], "true": [4, 5, 6, 7, 8, 10, 11, 13, 15, 17, 18, 20, 27, 31, 33, 35, 38, 45, 50, 51, 54, 55, 56, 58, 59, 61, 64, 71, 72, 73, 74, 76, 79, 80, 81, 82, 83, 86, 93, 96, 97, 98, 99, 101, 106, 110, 112, 116, 118, 122, 124, 125, 127, 128, 129, 132, 133, 135, 138, 139, 144, 147, 151, 155, 156, 157, 158, 159, 160, 163, 164, 168, 169, 170, 171, 172, 175, 183, 184, 186, 187, 188, 190, 192, 194, 195, 196, 199, 201, 202, 203, 206, 207, 213, 214, 215, 217, 220, 223, 224, 228, 229, 232, 234, 235, 236, 237, 238, 241, 242, 245, 248, 250, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 288, 289, 292, 296, 299, 300, 301, 302, 306, 310, 311, 312, 315, 317, 319, 320, 321, 322, 326, 328, 329, 330, 341, 345, 346, 347, 351, 352, 353, 356, 357, 360, 362, 366, 367, 372, 374, 375, 377, 379, 380, 381, 384, 385, 386, 388, 392, 393, 396, 398, 401, 403, 404, 405, 407, 408, 409, 411, 412, 414, 415, 416, 417, 419, 420, 421, 422, 424, 426, 427, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 457, 459, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 506, 507, 508, 509, 510, 511, 512, 513, 517, 520, 521, 522, 524, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 583, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 703, 705, 706, 707, 709, 710, 711, 712, 713, 716, 717, 718, 721, 723, 724, 725, 726, 727, 728, 730, 731, 732, 735, 736, 737, 738, 739, 740, 747, 748, 749, 751, 753, 758, 764, 766, 775, 779, 780, 781, 782, 783, 784, 785, 786, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 807, 808, 810, 814, 815, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 894, 895, 896, 897, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 917, 918, 919, 920, 930, 936, 937, 948, 949, 952, 953, 957, 958, 959, 960, 968, 973, 975, 976, 977, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 997, 999, 1000, 1001, 1002, 1003, 1006, 1012, 1016, 1017, 1019, 1020, 1021, 1024, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "df": [4, 13, 26, 28, 132, 168, 170, 178, 183, 199, 217, 250, 260, 309, 311, 322, 352, 384, 415, 588, 589, 976, 977, 1044], "frame": [4, 13, 17, 72, 156, 169, 170, 199, 311, 322, 374, 379, 391, 394, 487, 488, 489, 490, 494, 498, 499, 500, 502, 503, 508, 1006, 1017, 1039], "To": [4, 8, 17, 27, 28, 33, 47, 56, 58, 79, 81, 83, 87, 101, 112, 122, 125, 126, 134, 138, 148, 156, 157, 160, 163, 164, 168, 169, 175, 180, 183, 187, 199, 200, 201, 203, 207, 217, 232, 233, 235, 238, 240, 242, 250, 255, 257, 258, 260, 262, 263, 265, 267, 278, 281, 301, 305, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 348, 352, 356, 362, 366, 367, 372, 373, 377, 379, 380, 381, 383, 384, 385, 387, 391, 393, 394, 397, 398, 401, 403, 404, 407, 408, 409, 410, 411, 412, 414, 415, 444, 446, 447, 448, 459, 462, 465, 490, 494, 500, 501, 505, 506, 529, 535, 536, 537, 539, 541, 542, 543, 544, 555, 556, 557, 558, 562, 563, 567, 595, 609, 625, 630, 644, 645, 650, 651, 654, 656, 657, 658, 659, 660, 661, 682, 698, 710, 725, 760, 782, 790, 799, 800, 821, 828, 859, 870, 875, 889, 890, 899, 900, 904, 907, 908, 909, 910, 926, 936, 955, 974, 976, 977, 979, 982, 983, 984, 985, 987, 988, 989, 990, 993, 994, 997, 1001, 1002, 1003, 1011, 1012, 1016, 1018, 1019, 1021, 1027, 1030, 1032, 1033, 1034, 1036, 1038], "get": [4, 5, 9, 12, 17, 18, 20, 38, 49, 53, 57, 97, 101, 125, 134, 145, 148, 151, 156, 157, 163, 169, 170, 171, 172, 192, 201, 214, 217, 220, 236, 258, 261, 262, 264, 268, 271, 278, 283, 288, 296, 306, 315, 322, 326, 329, 335, 338, 340, 343, 348, 351, 353, 356, 367, 372, 373, 374, 377, 379, 380, 381, 384, 385, 386, 387, 393, 397, 401, 403, 405, 406, 407, 408, 409, 411, 412, 414, 415, 416, 417, 421, 422, 423, 428, 430, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 460, 462, 463, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 605, 606, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 632, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 686, 687, 688, 689, 690, 693, 697, 719, 720, 721, 723, 729, 730, 739, 753, 760, 761, 766, 782, 785, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806, 809, 810, 811, 812, 813, 814, 815, 816, 817, 820, 821, 822, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 858, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 891, 892, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 914, 927, 928, 929, 935, 936, 946, 976, 982, 983, 984, 986, 987, 997, 1000, 1001, 1002, 1003, 1007, 1016, 1019, 1020, 1021, 1024, 1027, 1030, 1033, 1035, 1038, 1040, 1041, 1044], "quick": [4, 101, 241, 379, 381, 385, 397, 604, 825, 987, 988, 997, 1011, 1019, 1024], "understand": [4, 9, 13, 42, 112, 156, 166, 170, 235, 255, 258, 317, 318, 335, 342, 351, 355, 356, 361, 362, 377, 378, 379, 380, 385, 391, 396, 407, 414, 415, 502, 825, 856, 857, 907, 908, 909, 910, 913, 976, 977, 984, 986, 1003, 1005, 1006, 1008, 1011, 1027, 1041], "pattern": [4, 13, 17, 21, 64, 83, 86, 91, 95, 96, 103, 107, 151, 163, 166, 170, 183, 203, 235, 238, 318, 351, 352, 353, 362, 376, 379, 381, 394, 404, 407, 408, 412, 414, 415, 446, 462, 464, 502, 530, 532, 539, 553, 554, 636, 706, 722, 738, 766, 785, 786, 794, 879, 979, 981, 983, 987, 988, 994, 1002, 1004, 1007, 1008, 1011, 1039], "let": [4, 5, 13, 54, 56, 65, 72, 76, 91, 96, 101, 119, 122, 125, 126, 129, 151, 157, 158, 164, 169, 170, 171, 180, 188, 199, 201, 217, 220, 224, 235, 242, 255, 260, 263, 267, 351, 353, 360, 362, 374, 379, 381, 385, 391, 404, 407, 411, 414, 415, 439, 443, 489, 498, 502, 508, 532, 644, 645, 648, 649, 650, 651, 652, 653, 654, 658, 659, 660, 661, 679, 682, 865, 872, 873, 983, 984, 985, 986, 987, 994, 995, 997, 1002, 1003, 1011, 1019, 1020, 1021, 1037], "u": [4, 10, 11, 12, 13, 17, 18, 35, 51, 53, 57, 91, 96, 103, 122, 123, 151, 160, 168, 169, 170, 196, 200, 203, 207, 217, 221, 224, 232, 235, 241, 242, 246, 247, 251, 255, 260, 263, 267, 309, 311, 342, 351, 360, 367, 374, 379, 383, 385, 387, 391, 397, 404, 407, 410, 412, 414, 415, 430, 461, 463, 480, 481, 482, 529, 535, 543, 544, 548, 550, 552, 554, 556, 558, 560, 563, 566, 568, 586, 587, 589, 609, 633, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 658, 659, 660, 661, 662, 663, 665, 668, 670, 671, 676, 677, 679, 682, 687, 691, 702, 718, 737, 752, 832, 833, 842, 850, 857, 879, 893, 900, 902, 905, 908, 910, 936, 979, 981, 986, 987, 994, 997, 1011, 1021, 1024, 1037], "look": [4, 5, 54, 56, 96, 99, 101, 125, 126, 151, 156, 157, 164, 169, 170, 201, 220, 224, 228, 235, 251, 255, 260, 262, 301, 322, 351, 352, 362, 367, 368, 373, 374, 377, 379, 381, 383, 385, 387, 391, 392, 407, 410, 412, 413, 414, 415, 446, 486, 487, 555, 556, 557, 558, 562, 563, 600, 601, 629, 657, 690, 879, 907, 908, 909, 910, 983, 984, 997, 1001, 1002, 1004, 1020, 1021, 1027, 1035, 1037], "averag": [4, 13, 26, 28, 38, 40, 41, 45, 53, 61, 63, 115, 116, 121, 125, 128, 133, 134, 135, 148, 156, 170, 180, 188, 199, 206, 217, 238, 263, 265, 268, 270, 281, 305, 315, 321, 329, 351, 362, 366, 374, 376, 381, 391, 404, 405, 409, 411, 415, 416, 418, 419, 435, 436, 439, 442, 443, 444, 445, 447, 488, 491, 492, 521, 529, 530, 531, 535, 536, 538, 539, 543, 544, 545, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 567, 568, 585, 592, 630, 631, 646, 656, 657, 664, 665, 667, 670, 672, 674, 675, 676, 678, 685, 698, 701, 702, 704, 705, 706, 711, 718, 719, 720, 722, 723, 725, 726, 727, 731, 732, 733, 735, 736, 737, 740, 742, 743, 745, 747, 748, 750, 753, 761, 778, 779, 780, 781, 782, 784, 785, 787, 788, 792, 793, 794, 795, 823, 826, 845, 865, 880, 973, 977, 982, 983, 988, 991, 993, 994, 1001, 1002, 1003, 1019, 1021, 1027, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1041, 1042, 1043, 1044], "per": [4, 10, 21, 35, 49, 54, 65, 92, 117, 118, 122, 156, 158, 169, 170, 199, 214, 217, 238, 242, 246, 256, 267, 269, 305, 311, 317, 322, 346, 351, 353, 366, 374, 375, 379, 384, 385, 388, 391, 393, 405, 407, 411, 412, 413, 414, 415, 417, 444, 446, 448, 455, 459, 462, 466, 485, 494, 498, 500, 501, 502, 506, 508, 510, 513, 521, 530, 532, 533, 534, 537, 539, 541, 547, 548, 559, 560, 567, 581, 586, 589, 608, 609, 630, 631, 639, 640, 656, 657, 664, 665, 666, 669, 671, 672, 673, 674, 676, 690, 694, 711, 714, 718, 738, 751, 755, 756, 778, 780, 794, 795, 820, 827, 828, 829, 831, 832, 835, 837, 855, 858, 864, 866, 868, 869, 872, 873, 879, 880, 897, 899, 900, 901, 902, 903, 904, 905, 924, 925, 936, 962, 976, 979, 983, 986, 987, 988, 991, 994, 1001, 1002, 1003, 1006, 1007, 1019, 1021, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1039, 1040, 1041, 1043, 1044], "hour": [4, 169, 170, 322, 379, 385, 494, 984, 1005], "sundai": 4, "weekend": 4, "clearli": [4, 61, 99, 170, 233, 342, 378, 379, 391, 393, 412, 414, 988, 994], "distinguish": [4, 21, 41, 81, 93, 101, 201, 257, 278, 374, 381, 393, 394, 417, 976, 987, 990, 993], "commut": [4, 13], "morn": 4, "even": [4, 13, 14, 28, 41, 43, 53, 76, 87, 99, 118, 125, 157, 169, 170, 171, 188, 199, 200, 207, 217, 224, 225, 234, 246, 266, 278, 305, 307, 309, 310, 330, 346, 351, 352, 353, 362, 368, 374, 377, 378, 379, 380, 381, 383, 384, 387, 391, 393, 405, 406, 407, 408, 409, 411, 412, 414, 415, 417, 439, 441, 443, 444, 445, 446, 447, 457, 459, 530, 533, 555, 556, 557, 558, 562, 563, 580, 587, 592, 625, 626, 628, 637, 656, 657, 693, 698, 703, 710, 740, 758, 764, 771, 775, 778, 783, 785, 822, 859, 860, 882, 884, 885, 886, 887, 888, 889, 890, 891, 892, 907, 908, 909, 910, 936, 956, 976, 977, 979, 981, 983, 986, 987, 990, 992, 993, 995, 997, 999, 1001, 1002, 1003, 1011, 1021, 1034, 1035, 1036, 1039, 1041, 1044], "leisur": 4, "spread": [4, 41, 222, 261, 305, 325, 326, 327, 330, 346, 366, 379, 407, 450, 460, 513, 876, 888, 896, 987], "peak": [4, 13, 28, 170, 405, 411, 1041], "middl": [4, 25, 35, 61, 101, 183, 347, 376, 994, 997], "matplotlib": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 73, 74, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 140, 143, 144, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 168, 169, 170, 172, 175, 178, 179, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 241, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 259, 260, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 319, 320, 322, 325, 326, 327, 328, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360, 373, 382, 386, 397, 400, 436, 500, 629, 630, 695, 696, 698, 699, 700, 802, 818, 913, 982, 1006, 1015, 1016, 1017, 1018, 1019, 1020, 1024, 1036, 1039, 1040, 1041, 1042], "pyplot": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 73, 74, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 140, 143, 144, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 168, 169, 170, 172, 175, 178, 179, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 241, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 259, 260, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 319, 320, 322, 325, 326, 327, 328, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360, 379, 386, 436, 500, 629, 630, 695, 696, 698, 699, 700, 802, 818, 1016, 1017, 1018, 1019, 1020, 1024, 1041], "plt": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 73, 74, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 140, 143, 144, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 168, 169, 170, 172, 175, 178, 179, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 241, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 259, 260, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 319, 320, 322, 325, 326, 327, 328, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360, 386, 436, 500, 629, 630, 695, 696, 698, 699, 700, 802, 818, 913, 994, 1016, 1017, 1018, 1019, 1020, 1024], "fig": [4, 5, 7, 8, 9, 10, 13, 15, 26, 28, 31, 35, 43, 44, 46, 54, 56, 58, 61, 65, 67, 74, 79, 81, 87, 91, 96, 101, 102, 106, 112, 118, 119, 122, 123, 125, 126, 129, 130, 132, 134, 154, 160, 163, 170, 172, 175, 179, 187, 190, 193, 194, 196, 197, 199, 200, 203, 207, 212, 214, 217, 220, 221, 222, 223, 224, 225, 229, 231, 238, 239, 250, 255, 256, 257, 260, 261, 262, 263, 266, 269, 270, 271, 281, 283, 285, 287, 288, 296, 300, 301, 305, 306, 307, 309, 310, 311, 315, 319, 320, 335, 342, 345, 346, 347, 348, 351, 352, 353, 356, 386, 1017, 1020], "ax": [4, 5, 7, 8, 9, 10, 12, 13, 15, 17, 26, 28, 31, 32, 33, 35, 41, 43, 44, 46, 54, 56, 57, 58, 65, 67, 73, 76, 81, 83, 87, 91, 93, 96, 102, 106, 112, 114, 117, 119, 122, 123, 129, 130, 132, 133, 134, 154, 155, 160, 163, 168, 169, 170, 171, 172, 175, 178, 179, 182, 183, 188, 190, 191, 194, 196, 197, 199, 200, 201, 203, 204, 207, 208, 210, 212, 213, 214, 217, 220, 221, 222, 223, 224, 225, 229, 234, 238, 239, 241, 245, 247, 250, 255, 256, 257, 260, 262, 263, 264, 266, 267, 269, 270, 271, 272, 274, 278, 281, 283, 285, 286, 287, 288, 291, 293, 294, 299, 300, 301, 305, 307, 308, 309, 310, 311, 312, 315, 316, 319, 320, 322, 334, 335, 336, 337, 339, 340, 342, 345, 346, 347, 348, 351, 352, 353, 356, 357, 381, 382, 412, 417, 436, 532, 539, 548, 629, 630, 695, 696, 698, 699, 700, 716, 802, 818, 913, 987, 990, 994, 1020, 1024, 1037, 1043], "subplot": [4, 5, 6, 8, 9, 10, 11, 13, 14, 15, 31, 32, 33, 35, 40, 44, 45, 51, 52, 54, 55, 56, 57, 58, 61, 63, 66, 67, 74, 76, 80, 81, 82, 83, 86, 87, 91, 92, 93, 96, 97, 98, 99, 101, 105, 106, 112, 114, 115, 117, 118, 119, 121, 122, 123, 126, 129, 130, 132, 133, 134, 143, 153, 155, 160, 163, 164, 169, 170, 172, 175, 179, 182, 190, 191, 193, 194, 197, 198, 199, 200, 201, 203, 207, 212, 213, 215, 217, 220, 221, 224, 225, 228, 229, 231, 233, 234, 236, 237, 238, 239, 245, 246, 247, 248, 250, 251, 255, 256, 257, 260, 262, 263, 265, 266, 267, 269, 270, 271, 273, 274, 281, 283, 285, 286, 287, 288, 291, 292, 294, 295, 296, 299, 300, 301, 302, 306, 307, 308, 309, 310, 311, 315, 319, 320, 328, 330, 335, 336, 337, 338, 342, 345, 346, 347, 348, 351, 352, 353, 356, 357, 386, 1017], "figsiz": [4, 5, 6, 10, 12, 13, 14, 15, 26, 27, 28, 31, 32, 33, 35, 40, 41, 43, 44, 45, 46, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 74, 76, 81, 83, 86, 87, 90, 91, 92, 93, 96, 99, 100, 101, 102, 105, 106, 112, 114, 115, 122, 123, 124, 125, 126, 130, 132, 133, 143, 153, 155, 159, 160, 163, 164, 169, 170, 172, 175, 178, 179, 182, 183, 189, 193, 196, 197, 198, 199, 200, 201, 203, 205, 207, 210, 213, 215, 217, 220, 221, 222, 224, 225, 228, 229, 231, 233, 236, 237, 238, 239, 245, 247, 248, 251, 255, 256, 257, 262, 263, 264, 267, 269, 270, 274, 281, 283, 285, 286, 299, 300, 302, 305, 306, 307, 308, 309, 310, 311, 319, 320, 325, 327, 336, 338, 342, 343, 345, 346, 347, 348, 351, 352, 353, 913, 1017], "4": [4, 5, 6, 7, 8, 9, 10, 12, 13, 18, 20, 21, 26, 27, 28, 29, 32, 33, 34, 35, 39, 40, 41, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 56, 57, 59, 60, 61, 63, 65, 66, 67, 71, 72, 73, 74, 75, 82, 83, 86, 87, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 104, 105, 112, 113, 115, 116, 118, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 138, 144, 148, 151, 154, 156, 157, 159, 160, 163, 164, 166, 169, 170, 171, 172, 175, 178, 179, 180, 181, 182, 183, 187, 188, 189, 190, 191, 192, 196, 197, 198, 199, 200, 203, 205, 206, 207, 209, 212, 213, 217, 220, 222, 228, 232, 233, 234, 235, 236, 237, 238, 240, 242, 245, 246, 247, 248, 250, 251, 255, 256, 257, 258, 260, 261, 262, 263, 265, 267, 268, 269, 271, 272, 274, 281, 283, 285, 287, 288, 289, 290, 293, 299, 301, 302, 303, 305, 306, 308, 309, 311, 314, 315, 316, 317, 318, 320, 321, 323, 325, 326, 327, 328, 329, 335, 337, 341, 342, 343, 346, 347, 348, 351, 352, 353, 360, 362, 367, 373, 374, 376, 377, 379, 384, 385, 388, 391, 392, 393, 397, 398, 399, 400, 405, 407, 408, 409, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 428, 429, 430, 431, 435, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 489, 494, 502, 510, 511, 514, 515, 516, 522, 525, 526, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 575, 579, 580, 581, 583, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 612, 615, 616, 617, 620, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 649, 650, 651, 653, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 672, 674, 675, 677, 678, 682, 685, 686, 687, 688, 690, 691, 692, 696, 697, 700, 704, 705, 713, 714, 722, 723, 724, 729, 731, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 753, 765, 766, 778, 779, 785, 786, 787, 788, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 820, 821, 822, 823, 825, 827, 828, 829, 830, 833, 834, 835, 836, 838, 843, 847, 848, 851, 855, 856, 857, 858, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 882, 883, 886, 887, 891, 892, 893, 897, 899, 900, 903, 907, 908, 909, 910, 915, 916, 918, 919, 920, 921, 925, 935, 936, 937, 938, 940, 941, 942, 943, 944, 951, 955, 958, 959, 960, 962, 963, 964, 965, 968, 976, 977, 980, 981, 982, 983, 985, 987, 988, 989, 990, 997, 998, 1001, 1002, 1008, 1012, 1016, 1017, 1018, 1019, 1021, 1025, 1028, 1029, 1030, 1032, 1033, 1034, 1036, 1040, 1041, 1042, 1045], "average_week_demand": 4, "groupbi": [4, 74, 170, 207, 217], "weekdai": [4, 13, 170], "count": [4, 13, 15, 26, 28, 42, 50, 54, 71, 72, 93, 133, 134, 169, 170, 199, 201, 217, 232, 242, 269, 278, 283, 316, 317, 352, 353, 360, 374, 376, 383, 388, 393, 394, 405, 406, 407, 412, 414, 415, 444, 447, 487, 494, 534, 542, 579, 586, 587, 588, 589, 592, 602, 615, 638, 695, 703, 713, 716, 726, 727, 735, 751, 780, 781, 783, 784, 834, 838, 839, 840, 848, 851, 862, 911, 913, 938, 952, 976, 979, 983, 987, 989, 990, 997, 1003, 1011, 1021, 1027, 1030, 1032, 1035, 1036, 1038, 1039], "mean": [4, 5, 6, 8, 11, 13, 14, 15, 18, 20, 25, 26, 28, 35, 37, 38, 39, 41, 43, 45, 47, 50, 51, 54, 55, 56, 61, 69, 72, 80, 81, 82, 83, 87, 91, 93, 96, 99, 100, 101, 102, 103, 112, 114, 115, 118, 121, 122, 125, 126, 132, 133, 134, 147, 148, 151, 156, 158, 160, 163, 166, 169, 170, 179, 181, 188, 190, 192, 195, 196, 199, 201, 205, 206, 208, 214, 215, 216, 217, 223, 225, 228, 231, 232, 233, 234, 235, 236, 238, 239, 240, 242, 245, 246, 247, 248, 250, 251, 256, 257, 260, 261, 262, 263, 265, 267, 268, 269, 270, 271, 272, 274, 275, 278, 281, 283, 294, 305, 308, 310, 311, 312, 315, 318, 321, 328, 338, 341, 342, 346, 348, 350, 351, 353, 354, 362, 366, 371, 373, 374, 376, 377, 379, 380, 381, 383, 384, 385, 387, 388, 391, 392, 393, 398, 404, 405, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 424, 430, 435, 436, 437, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 455, 456, 457, 458, 459, 460, 462, 463, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 486, 499, 500, 502, 504, 510, 517, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 581, 586, 587, 588, 589, 592, 595, 600, 604, 605, 606, 607, 608, 609, 611, 620, 625, 626, 628, 630, 631, 632, 633, 637, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 677, 678, 679, 682, 686, 687, 688, 689, 690, 691, 692, 693, 702, 703, 705, 707, 710, 711, 714, 715, 721, 723, 726, 727, 728, 733, 734, 735, 738, 739, 742, 743, 744, 745, 746, 747, 748, 749, 750, 754, 771, 775, 776, 778, 780, 781, 782, 784, 785, 787, 788, 789, 790, 792, 794, 795, 796, 799, 800, 802, 810, 814, 818, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 845, 846, 847, 849, 850, 852, 853, 855, 856, 857, 858, 860, 861, 863, 864, 868, 869, 871, 875, 877, 879, 880, 885, 887, 888, 890, 892, 894, 895, 899, 900, 901, 902, 904, 905, 907, 908, 909, 910, 915, 919, 920, 922, 961, 962, 968, 972, 976, 977, 978, 981, 983, 984, 986, 989, 990, 991, 992, 994, 995, 1000, 1001, 1002, 1003, 1006, 1008, 1011, 1016, 1019, 1021, 1022, 1023, 1027, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "plot": [4, 5, 6, 11, 12, 13, 15, 17, 26, 27, 28, 30, 32, 33, 34, 36, 37, 38, 41, 43, 44, 46, 55, 56, 57, 59, 60, 61, 62, 63, 66, 69, 73, 74, 75, 76, 80, 81, 82, 87, 89, 94, 96, 99, 100, 103, 104, 105, 106, 111, 112, 114, 115, 116, 117, 119, 123, 124, 125, 127, 129, 130, 131, 136, 140, 143, 144, 146, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 166, 167, 168, 169, 171, 172, 173, 175, 177, 181, 182, 184, 186, 187, 188, 189, 194, 195, 196, 197, 198, 199, 200, 201, 202, 205, 206, 207, 209, 211, 212, 214, 215, 216, 217, 218, 222, 223, 224, 225, 227, 228, 231, 232, 234, 236, 237, 242, 243, 245, 246, 247, 249, 251, 253, 254, 255, 260, 261, 263, 265, 266, 270, 271, 272, 274, 276, 278, 283, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 299, 300, 301, 305, 306, 307, 308, 309, 310, 312, 316, 319, 320, 321, 322, 326, 327, 328, 330, 333, 334, 338, 339, 340, 343, 344, 345, 346, 347, 348, 349, 352, 353, 355, 356, 358, 359, 360, 361, 379, 382, 388, 391, 396, 397, 402, 405, 407, 409, 411, 413, 414, 436, 439, 444, 448, 454, 462, 469, 494, 499, 500, 502, 510, 513, 517, 521, 551, 555, 558, 560, 562, 563, 567, 568, 608, 620, 629, 630, 631, 655, 656, 670, 674, 695, 696, 698, 699, 700, 701, 716, 724, 732, 758, 779, 781, 784, 785, 786, 796, 802, 813, 818, 820, 821, 822, 823, 826, 837, 841, 857, 860, 872, 873, 874, 876, 879, 899, 901, 904, 907, 908, 913, 980, 981, 983, 984, 986, 987, 990, 991, 993, 1001, 1002, 1003, 1006, 1007, 1008, 1016, 1017, 1019, 1023, 1028, 1030, 1031, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "_": [4, 5, 7, 8, 9, 11, 12, 13, 15, 21, 26, 27, 28, 31, 33, 34, 41, 44, 51, 54, 56, 59, 64, 68, 71, 83, 91, 93, 96, 101, 103, 105, 115, 116, 117, 143, 151, 156, 157, 158, 168, 169, 170, 172, 175, 178, 182, 183, 184, 186, 187, 188, 191, 196, 197, 199, 201, 203, 212, 213, 216, 221, 224, 229, 234, 238, 242, 255, 260, 262, 263, 264, 266, 267, 269, 278, 286, 291, 294, 302, 307, 310, 311, 312, 316, 319, 320, 321, 326, 327, 337, 342, 346, 351, 353, 357, 381, 385, 393, 412, 414, 415, 419, 444, 476, 530, 531, 532, 533, 534, 536, 537, 538, 541, 543, 544, 545, 564, 595, 650, 651, 661, 682, 686, 687, 688, 689, 691, 693, 694, 696, 698, 708, 761, 796, 802, 810, 818, 843, 851, 872, 873, 880, 977, 983, 984, 987, 989, 990, 991, 994, 995, 997, 1002, 1003, 1019, 1020, 1034], "hourli": [4, 169], "xtick": [4, 6, 8, 11, 31, 35, 41, 45, 47, 51, 52, 53, 59, 60, 63, 83, 86, 99, 122, 124, 153, 154, 155, 159, 182, 189, 195, 212, 228, 236, 246, 247, 248, 251, 259, 260, 274, 287, 296, 302, 311, 325, 338, 341, 343, 344, 695, 1017], "24": [4, 5, 13, 67, 136, 145, 148, 166, 170, 175, 176, 183, 187, 239, 272, 283, 314, 315, 316, 318, 320, 321, 322, 323, 325, 326, 383, 397, 407, 414, 415, 435, 438, 439, 440, 442, 443, 445, 446, 447, 448, 449, 450, 451, 458, 460, 462, 467, 468, 469, 470, 471, 472, 473, 474, 487, 488, 489, 490, 494, 502, 513, 514, 515, 516, 529, 530, 531, 532, 533, 534, 535, 537, 538, 539, 541, 542, 547, 548, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 567, 568, 579, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 608, 609, 611, 625, 626, 627, 628, 630, 631, 632, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 686, 687, 688, 689, 690, 696, 697, 698, 700, 706, 712, 724, 743, 750, 794, 795, 796, 799, 800, 810, 817, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 860, 862, 863, 864, 865, 868, 869, 871, 873, 874, 875, 876, 877, 879, 889, 891, 892, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 930, 931, 935, 962, 968, 976, 994, 997, 1008, 1025, 1027, 1035, 1036, 1037, 1038, 1040], "rang": [4, 5, 6, 7, 8, 10, 12, 17, 18, 20, 21, 26, 27, 28, 33, 34, 38, 39, 41, 43, 47, 48, 49, 51, 52, 56, 61, 62, 64, 65, 66, 79, 80, 82, 83, 112, 114, 115, 116, 119, 125, 131, 143, 147, 152, 169, 170, 175, 183, 188, 189, 193, 197, 199, 200, 203, 206, 207, 215, 217, 221, 223, 231, 232, 237, 238, 245, 247, 250, 251, 255, 259, 260, 261, 263, 264, 265, 267, 268, 269, 271, 272, 273, 274, 281, 287, 293, 296, 302, 305, 310, 311, 315, 319, 320, 326, 338, 346, 351, 352, 357, 360, 367, 373, 374, 376, 379, 381, 385, 388, 393, 401, 407, 411, 414, 417, 438, 459, 467, 469, 470, 471, 472, 473, 474, 476, 479, 489, 492, 493, 512, 525, 539, 551, 552, 557, 558, 561, 586, 587, 589, 627, 630, 636, 638, 646, 647, 667, 669, 674, 675, 676, 678, 690, 710, 728, 743, 785, 825, 831, 845, 847, 849, 850, 855, 869, 876, 877, 878, 884, 885, 888, 889, 892, 893, 935, 936, 955, 976, 983, 987, 991, 1001, 1007, 1011, 1015, 1016, 1017, 1019, 1032, 1033, 1034, 1035, 1037, 1040, 1043], "7": [4, 6, 8, 11, 12, 13, 14, 15, 17, 20, 27, 31, 33, 34, 35, 40, 43, 45, 47, 54, 55, 56, 57, 61, 65, 66, 68, 72, 73, 75, 81, 83, 99, 112, 115, 125, 128, 132, 133, 148, 160, 168, 169, 170, 172, 175, 180, 181, 198, 199, 200, 201, 214, 217, 220, 228, 233, 234, 240, 242, 245, 246, 249, 250, 252, 255, 260, 264, 266, 267, 271, 273, 278, 281, 283, 285, 288, 289, 291, 301, 302, 305, 309, 315, 318, 319, 320, 322, 325, 326, 328, 329, 335, 342, 346, 347, 351, 352, 353, 362, 374, 376, 377, 383, 384, 385, 397, 399, 400, 405, 411, 412, 414, 415, 416, 418, 419, 422, 437, 442, 446, 448, 449, 450, 451, 453, 454, 455, 456, 459, 460, 461, 469, 470, 489, 494, 496, 530, 531, 532, 533, 534, 536, 542, 559, 560, 586, 589, 598, 603, 604, 625, 626, 628, 635, 645, 647, 656, 659, 690, 697, 705, 719, 720, 721, 723, 725, 741, 742, 743, 747, 748, 750, 782, 787, 788, 791, 794, 797, 798, 803, 806, 813, 814, 817, 822, 825, 829, 839, 840, 848, 857, 858, 871, 872, 894, 895, 935, 936, 939, 940, 942, 951, 956, 976, 977, 982, 983, 985, 987, 988, 990, 991, 993, 997, 1001, 1002, 1012, 1016, 1019, 1025, 1028, 1029, 1030, 1033, 1034, 1035, 1036, 1040], "xticklabel": [4, 10, 122, 170, 311], "sun": [4, 170, 1035, 1040, 1041], "mon": [4, 170], "tue": [4, 170, 1033], "wed": [4, 170], "thu": [4, 5, 25, 26, 27, 28, 41, 54, 56, 61, 79, 83, 99, 101, 115, 117, 118, 120, 122, 144, 151, 156, 157, 170, 183, 187, 188, 199, 201, 217, 228, 234, 239, 247, 258, 260, 265, 266, 267, 286, 312, 315, 318, 356, 362, 366, 367, 374, 381, 385, 391, 393, 405, 407, 411, 412, 414, 415, 417, 418, 435, 437, 461, 513, 525, 551, 552, 553, 554, 555, 556, 561, 562, 563, 564, 601, 604, 608, 620, 625, 630, 631, 641, 643, 656, 675, 703, 716, 722, 785, 792, 798, 803, 805, 817, 830, 833, 868, 899, 978, 979, 980, 981, 982, 983, 984, 987, 988, 993, 994, 997, 999, 1000, 1001, 1002, 1007, 1011, 1027, 1029, 1033, 1035, 1036, 1037, 1039, 1043], "fri": [4, 170, 374], "sat": [4, 170, 415], "xlabel": [4, 8, 9, 13, 25, 26, 27, 28, 34, 38, 42, 62, 79, 80, 82, 83, 86, 87, 91, 98, 103, 113, 114, 116, 122, 124, 125, 126, 127, 131, 135, 138, 143, 144, 147, 151, 152, 153, 154, 156, 157, 158, 169, 178, 181, 182, 183, 184, 186, 187, 188, 189, 192, 193, 199, 201, 202, 204, 206, 208, 209, 213, 217, 232, 234, 236, 238, 255, 259, 260, 264, 265, 269, 270, 273, 274, 285, 286, 289, 290, 311, 312, 335, 337, 338, 341, 351, 357, 358, 359, 629, 1016, 1020], "ylabel": [4, 8, 9, 13, 25, 26, 27, 28, 34, 38, 62, 79, 80, 82, 83, 86, 87, 91, 98, 103, 113, 114, 116, 124, 125, 126, 127, 131, 135, 138, 143, 144, 147, 151, 152, 153, 154, 156, 157, 158, 169, 178, 181, 182, 183, 184, 186, 187, 188, 189, 192, 193, 199, 201, 202, 204, 206, 208, 209, 217, 232, 234, 236, 255, 259, 260, 263, 264, 265, 269, 270, 273, 274, 286, 312, 335, 338, 341, 351, 357, 358, 359, 629, 1016, 1020], "number": [4, 5, 7, 8, 10, 12, 13, 14, 20, 21, 26, 27, 28, 33, 34, 37, 39, 40, 42, 44, 45, 47, 48, 49, 50, 51, 54, 55, 56, 58, 62, 63, 64, 66, 68, 69, 71, 72, 73, 74, 76, 83, 86, 87, 92, 93, 96, 98, 100, 101, 103, 112, 113, 115, 118, 120, 121, 123, 124, 125, 126, 128, 132, 134, 144, 145, 148, 159, 160, 164, 166, 169, 170, 175, 183, 188, 198, 199, 200, 201, 206, 207, 213, 214, 215, 216, 217, 220, 228, 232, 236, 238, 239, 245, 246, 248, 250, 251, 254, 255, 258, 259, 260, 261, 262, 265, 266, 267, 268, 269, 278, 283, 285, 289, 290, 305, 307, 308, 311, 315, 316, 317, 318, 319, 320, 321, 329, 338, 343, 346, 352, 353, 356, 360, 362, 367, 368, 371, 373, 374, 375, 376, 377, 379, 382, 383, 385, 386, 387, 388, 391, 392, 393, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 430, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 571, 579, 580, 581, 582, 586, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 699, 701, 702, 703, 705, 710, 711, 712, 714, 716, 718, 721, 725, 726, 727, 728, 731, 732, 735, 737, 749, 752, 771, 775, 778, 779, 780, 781, 782, 783, 784, 785, 789, 790, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 888, 891, 892, 893, 894, 895, 896, 897, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 919, 920, 923, 935, 936, 939, 940, 955, 956, 958, 961, 962, 979, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 997, 999, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1012, 1019, 1020, 1021, 1023, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "rental": [4, 13, 170, 994], "target": [4, 6, 13, 18, 20, 27, 31, 33, 34, 46, 53, 70, 72, 74, 75, 77, 87, 91, 100, 102, 104, 113, 120, 121, 122, 123, 125, 126, 129, 131, 132, 133, 135, 140, 143, 146, 148, 151, 153, 156, 157, 164, 166, 168, 169, 170, 171, 178, 181, 182, 183, 192, 195, 199, 201, 203, 204, 207, 208, 221, 229, 231, 232, 233, 234, 237, 238, 239, 247, 254, 256, 258, 261, 263, 265, 266, 269, 270, 278, 281, 283, 286, 291, 294, 295, 300, 304, 305, 313, 316, 317, 319, 321, 325, 326, 329, 330, 334, 335, 338, 342, 344, 345, 351, 352, 357, 358, 359, 360, 362, 366, 368, 371, 372, 373, 374, 375, 376, 381, 383, 384, 387, 388, 392, 396, 407, 410, 411, 414, 417, 431, 435, 436, 437, 440, 443, 462, 463, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 498, 499, 500, 501, 502, 503, 506, 508, 518, 522, 529, 530, 532, 534, 535, 537, 540, 541, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 562, 563, 565, 566, 567, 568, 571, 580, 581, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 625, 626, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 677, 678, 679, 680, 682, 683, 684, 685, 695, 696, 698, 699, 700, 705, 706, 707, 710, 711, 716, 718, 719, 720, 721, 723, 724, 725, 726, 727, 732, 735, 736, 737, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 753, 779, 780, 781, 782, 784, 785, 786, 787, 788, 791, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 810, 811, 812, 813, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 846, 848, 849, 850, 855, 856, 857, 858, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 876, 877, 878, 879, 880, 883, 888, 891, 892, 894, 895, 896, 897, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 919, 949, 950, 951, 978, 979, 980, 983, 984, 987, 991, 994, 995, 1001, 1002, 1003, 1007, 1008, 1010, 1011, 1012, 1017, 1019, 1021, 1023, 1027, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "absolut": [4, 13, 76, 100, 122, 148, 169, 199, 201, 205, 217, 381, 407, 409, 411, 412, 414, 415, 416, 417, 418, 442, 448, 454, 455, 529, 535, 540, 543, 544, 546, 547, 548, 556, 558, 559, 560, 563, 586, 588, 589, 591, 595, 600, 617, 625, 630, 644, 647, 648, 650, 652, 654, 669, 670, 672, 674, 676, 680, 681, 702, 715, 719, 733, 734, 742, 743, 745, 750, 752, 754, 792, 798, 802, 813, 816, 823, 825, 837, 839, 840, 844, 863, 868, 871, 884, 908, 910, 973, 983, 984, 997, 1001, 1003, 1019, 1020, 1028, 1033, 1038, 1039, 1040, 1041, 1044], "basi": [4, 6, 14, 101, 151, 156, 158, 200, 301, 318, 338, 342, 371, 377, 380, 407, 412, 414, 450, 532, 620, 630, 637, 689, 878, 985, 997, 1002, 1009, 1016, 1017, 1020, 1023, 1035, 1037, 1040], "max": [4, 8, 10, 11, 12, 13, 18, 20, 26, 28, 32, 34, 41, 45, 53, 59, 63, 68, 73, 78, 80, 83, 84, 96, 99, 103, 106, 112, 114, 121, 127, 130, 138, 139, 140, 143, 144, 148, 153, 155, 156, 164, 166, 169, 181, 186, 187, 188, 192, 194, 201, 202, 205, 213, 215, 217, 223, 232, 236, 258, 259, 260, 271, 273, 281, 283, 285, 289, 290, 294, 296, 299, 301, 305, 307, 308, 310, 318, 328, 330, 344, 347, 366, 407, 409, 412, 467, 468, 469, 470, 471, 472, 473, 474, 475, 510, 534, 553, 554, 555, 556, 557, 558, 561, 562, 563, 604, 625, 629, 630, 646, 647, 667, 670, 672, 678, 689, 690, 694, 697, 702, 703, 738, 754, 789, 790, 796, 856, 857, 868, 869, 871, 878, 885, 886, 907, 908, 909, 910, 955, 983, 985, 990, 997, 1001, 1002, 1008, 1019, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "977": [4, 13, 411], "rescal": [4, 47, 48, 56, 101, 180, 187, 223, 238, 305, 348, 409, 419, 467, 468, 469, 470, 471, 472, 473, 474, 531, 536, 644, 647, 650, 871, 877, 901, 902, 903, 904, 905, 987, 997, 1020, 1031, 1032], "variabl": [4, 9, 11, 12, 13, 17, 38, 71, 115, 119, 122, 125, 126, 139, 140, 143, 148, 158, 159, 163, 164, 170, 171, 175, 183, 188, 199, 203, 204, 217, 222, 238, 251, 260, 263, 270, 278, 281, 310, 311, 312, 362, 366, 368, 374, 376, 377, 379, 381, 383, 384, 387, 393, 403, 407, 408, 409, 410, 412, 414, 415, 416, 448, 480, 481, 482, 485, 497, 499, 506, 513, 530, 532, 534, 539, 542, 551, 557, 558, 602, 604, 605, 606, 638, 648, 649, 652, 653, 659, 680, 681, 693, 707, 744, 797, 798, 801, 803, 804, 805, 806, 811, 812, 813, 814, 815, 816, 819, 820, 821, 822, 824, 827, 831, 832, 862, 873, 876, 880, 888, 900, 976, 977, 979, 983, 986, 987, 988, 989, 990, 992, 994, 995, 997, 1001, 1003, 1006, 1007, 1012, 1013, 1015, 1017, 1027, 1032, 1035, 1037, 1040, 1042], "rel": [4, 6, 8, 18, 21, 28, 56, 62, 101, 119, 156, 172, 175, 179, 199, 217, 248, 289, 290, 306, 316, 319, 338, 342, 351, 352, 374, 378, 381, 387, 393, 405, 407, 411, 414, 415, 417, 438, 441, 445, 447, 457, 519, 522, 529, 532, 535, 539, 543, 544, 555, 556, 557, 558, 562, 563, 564, 602, 647, 656, 657, 669, 670, 672, 688, 692, 726, 744, 796, 799, 800, 802, 810, 818, 823, 826, 839, 840, 844, 856, 857, 868, 869, 879, 895, 899, 900, 901, 904, 906, 907, 908, 909, 910, 983, 984, 987, 989, 990, 991, 993, 1017], "so": [4, 9, 12, 13, 17, 18, 43, 49, 56, 57, 62, 66, 82, 118, 121, 122, 123, 124, 131, 151, 156, 169, 171, 175, 179, 199, 200, 228, 235, 238, 260, 278, 283, 289, 290, 293, 300, 301, 306, 311, 312, 316, 328, 338, 351, 353, 360, 362, 366, 367, 368, 373, 374, 377, 378, 379, 381, 383, 384, 385, 387, 388, 393, 398, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 420, 421, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 454, 463, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 494, 506, 507, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 579, 580, 581, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 605, 606, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 686, 687, 688, 689, 690, 693, 703, 706, 714, 723, 738, 753, 785, 794, 795, 796, 799, 800, 802, 803, 810, 818, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 883, 889, 891, 892, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 936, 953, 962, 976, 977, 979, 981, 982, 983, 984, 986, 987, 988, 989, 990, 991, 993, 997, 999, 1000, 1001, 1002, 1006, 1007, 1011, 1019, 1020, 1021, 1027, 1029, 1030, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1043, 1044], "error": [4, 5, 7, 13, 14, 18, 28, 55, 76, 79, 80, 82, 100, 105, 111, 115, 118, 119, 122, 124, 126, 136, 148, 151, 163, 166, 169, 183, 188, 195, 198, 199, 201, 202, 205, 206, 213, 217, 231, 234, 235, 241, 251, 253, 256, 260, 261, 265, 269, 270, 274, 276, 278, 289, 290, 319, 322, 337, 346, 351, 352, 367, 376, 377, 379, 381, 382, 383, 384, 388, 391, 393, 398, 401, 405, 406, 407, 408, 409, 411, 412, 414, 415, 416, 435, 441, 442, 445, 447, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 494, 501, 513, 522, 529, 531, 532, 535, 536, 540, 541, 543, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 573, 579, 580, 586, 588, 589, 590, 592, 593, 594, 596, 597, 598, 604, 608, 609, 627, 630, 633, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 683, 686, 687, 688, 690, 691, 694, 696, 699, 700, 707, 710, 718, 719, 720, 724, 737, 740, 741, 742, 743, 744, 745, 747, 748, 750, 761, 775, 779, 785, 786, 787, 788, 796, 797, 798, 799, 800, 802, 803, 805, 810, 814, 818, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 846, 847, 849, 850, 851, 854, 856, 857, 859, 860, 862, 864, 865, 866, 871, 872, 873, 878, 879, 894, 895, 897, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 917, 918, 919, 920, 923, 950, 971, 974, 976, 977, 978, 980, 981, 982, 984, 988, 991, 995, 997, 1001, 1002, 1003, 1008, 1009, 1019, 1023, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "easili": [4, 9, 32, 91, 145, 172, 202, 215, 233, 235, 239, 242, 260, 262, 269, 288, 307, 379, 381, 393, 394, 408, 414, 415, 417, 447, 981, 983, 984, 997, 1001, 1002, 1003, 1010, 1013, 1016, 1021, 1033], "interpret": [4, 28, 148, 158, 166, 167, 168, 170, 173, 195, 199, 200, 204, 215, 217, 254, 260, 262, 263, 302, 306, 309, 317, 351, 353, 366, 377, 379, 380, 385, 387, 388, 393, 396, 405, 407, 408, 413, 415, 450, 462, 463, 465, 494, 539, 570, 609, 637, 641, 651, 670, 671, 689, 690, 693, 699, 726, 750, 755, 756, 780, 789, 790, 802, 811, 822, 823, 825, 828, 860, 872, 879, 955, 981, 983, 987, 988, 994, 995, 997, 1003, 1006, 1008, 1012, 1020, 1027, 1028, 1032, 1035, 1040, 1041, 1042], "fraction": [4, 26, 28, 125, 199, 207, 217, 346, 352, 405, 411, 414, 436, 437, 447, 448, 454, 455, 513, 525, 555, 556, 557, 558, 562, 563, 564, 588, 591, 600, 664, 665, 666, 669, 674, 675, 676, 701, 719, 720, 721, 731, 791, 793, 798, 802, 823, 824, 838, 866, 901, 902, 903, 907, 908, 909, 910, 953, 983, 987, 990, 994, 995, 997, 1002, 1003, 1007, 1028, 1029, 1030, 1041], "maximum": [4, 8, 11, 17, 28, 34, 38, 58, 79, 80, 81, 82, 83, 92, 98, 112, 114, 117, 118, 121, 152, 154, 158, 166, 177, 187, 218, 238, 270, 285, 289, 290, 296, 305, 333, 334, 336, 337, 340, 342, 349, 352, 356, 358, 359, 366, 374, 384, 385, 392, 393, 404, 405, 407, 409, 410, 412, 414, 415, 417, 418, 419, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 452, 455, 457, 459, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 480, 481, 482, 496, 507, 509, 510, 511, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 543, 544, 545, 546, 550, 551, 552, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 581, 582, 595, 608, 625, 629, 630, 633, 635, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 669, 670, 672, 674, 675, 676, 677, 680, 681, 683, 684, 685, 686, 687, 688, 690, 691, 692, 714, 741, 778, 794, 796, 799, 800, 802, 810, 817, 823, 848, 855, 856, 857, 863, 864, 868, 869, 871, 874, 875, 876, 878, 887, 888, 893, 894, 895, 896, 899, 900, 904, 907, 908, 909, 910, 911, 913, 916, 923, 976, 982, 983, 984, 986, 987, 989, 990, 991, 993, 997, 1001, 1002, 1003, 1008, 1020, 1034, 1035, 1037, 1038, 1041, 1042, 1044], "fit": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 20, 22, 25, 26, 28, 31, 32, 33, 34, 35, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 62, 63, 64, 65, 66, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 96, 98, 99, 100, 101, 102, 104, 105, 106, 110, 112, 113, 114, 115, 116, 117, 118, 121, 122, 123, 124, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 157, 158, 159, 160, 166, 168, 169, 170, 171, 172, 175, 177, 181, 182, 183, 185, 187, 188, 189, 190, 191, 192, 194, 195, 197, 198, 199, 200, 202, 203, 204, 206, 207, 208, 211, 212, 213, 214, 215, 216, 217, 218, 223, 228, 229, 231, 233, 234, 235, 236, 237, 238, 239, 241, 242, 245, 246, 247, 248, 249, 250, 251, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 268, 269, 270, 271, 272, 273, 274, 278, 283, 285, 286, 287, 288, 289, 291, 292, 293, 294, 296, 299, 300, 301, 302, 304, 306, 307, 308, 309, 310, 311, 313, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 346, 347, 348, 351, 352, 356, 357, 358, 359, 360, 366, 368, 371, 374, 376, 379, 382, 384, 385, 388, 391, 393, 401, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 415, 416, 417, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 455, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 499, 507, 508, 522, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 573, 575, 579, 580, 581, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 608, 609, 611, 612, 613, 614, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 685, 686, 687, 688, 689, 690, 692, 695, 696, 698, 699, 700, 708, 709, 720, 729, 732, 747, 785, 794, 795, 796, 799, 800, 802, 810, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 883, 887, 888, 889, 890, 891, 892, 894, 895, 896, 897, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 928, 944, 945, 947, 955, 971, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 990, 991, 992, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1006, 1007, 1008, 1009, 1011, 1016, 1017, 1018, 1019, 1020, 1021, 1023, 1024, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "method": [4, 8, 12, 13, 18, 20, 21, 25, 26, 27, 28, 37, 38, 40, 41, 42, 45, 48, 50, 51, 53, 54, 55, 57, 58, 59, 60, 62, 66, 68, 69, 70, 73, 77, 80, 81, 85, 87, 88, 93, 96, 99, 101, 104, 105, 106, 110, 112, 117, 119, 120, 126, 132, 143, 144, 148, 163, 175, 186, 188, 200, 207, 216, 219, 221, 223, 224, 225, 226, 228, 232, 234, 235, 236, 238, 242, 244, 247, 252, 262, 265, 266, 267, 268, 269, 278, 283, 289, 290, 292, 305, 309, 312, 315, 317, 318, 341, 351, 352, 353, 360, 362, 366, 367, 368, 371, 376, 377, 379, 380, 381, 385, 386, 388, 391, 392, 396, 398, 401, 403, 404, 405, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 454, 455, 457, 460, 462, 463, 466, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 502, 510, 512, 520, 523, 526, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 579, 580, 581, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 681, 682, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 703, 708, 709, 728, 729, 732, 733, 738, 739, 760, 765, 766, 771, 775, 780, 785, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 858, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 887, 888, 891, 892, 894, 895, 896, 897, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 914, 922, 936, 943, 944, 945, 946, 947, 948, 953, 956, 971, 972, 975, 976, 977, 981, 982, 983, 984, 986, 987, 988, 989, 990, 991, 992, 995, 997, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1008, 1011, 1012, 1016, 1018, 1019, 1021, 1022, 1023, 1024, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "minim": [4, 12, 13, 58, 67, 79, 80, 125, 151, 159, 178, 195, 197, 199, 201, 203, 207, 217, 220, 231, 232, 245, 250, 261, 269, 270, 305, 315, 318, 335, 342, 346, 356, 378, 379, 382, 387, 391, 393, 405, 407, 409, 412, 414, 438, 439, 443, 444, 448, 461, 536, 538, 545, 555, 556, 557, 558, 562, 563, 607, 608, 609, 639, 644, 647, 655, 656, 665, 669, 670, 672, 676, 677, 685, 690, 692, 693, 745, 777, 846, 848, 857, 875, 887, 893, 907, 908, 909, 910, 983, 984, 987, 990, 991, 997, 999, 1000, 1001, 1002, 1006, 1009, 1019, 1020, 1023, 1031, 1036, 1037], "squar": [4, 5, 13, 62, 72, 80, 81, 82, 85, 86, 88, 97, 98, 106, 115, 126, 128, 148, 151, 156, 166, 168, 169, 177, 178, 180, 181, 183, 188, 189, 195, 196, 199, 201, 204, 209, 216, 217, 218, 231, 232, 234, 248, 274, 309, 317, 318, 320, 335, 351, 371, 376, 379, 385, 388, 393, 407, 409, 410, 412, 413, 414, 418, 419, 430, 438, 440, 441, 442, 444, 445, 447, 448, 452, 455, 457, 458, 463, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 499, 529, 535, 537, 539, 541, 543, 544, 545, 547, 550, 552, 554, 556, 557, 558, 560, 563, 566, 568, 588, 589, 590, 593, 594, 596, 597, 598, 602, 603, 604, 607, 609, 613, 620, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 658, 659, 660, 661, 662, 663, 665, 667, 668, 669, 670, 671, 672, 673, 674, 676, 677, 678, 680, 681, 683, 684, 685, 686, 688, 690, 692, 694, 707, 719, 720, 721, 747, 748, 755, 756, 760, 766, 767, 782, 787, 788, 825, 832, 833, 841, 842, 845, 847, 849, 850, 857, 860, 879, 899, 900, 902, 904, 905, 906, 908, 910, 934, 960, 973, 978, 980, 981, 990, 991, 995, 1001, 1003, 1008, 1009, 1019, 1020, 1023, 1027, 1030, 1032, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1043, 1044], "estim": [4, 6, 7, 8, 9, 10, 11, 12, 13, 25, 27, 28, 31, 34, 35, 38, 39, 45, 46, 50, 51, 55, 56, 57, 58, 59, 62, 64, 72, 73, 74, 75, 84, 86, 87, 96, 97, 98, 103, 105, 111, 112, 116, 117, 118, 119, 121, 123, 125, 126, 127, 129, 132, 133, 134, 135, 136, 138, 146, 147, 148, 150, 151, 152, 154, 156, 158, 159, 160, 161, 162, 163, 165, 168, 169, 177, 180, 183, 187, 188, 189, 194, 199, 200, 201, 203, 204, 206, 207, 216, 217, 218, 227, 228, 229, 234, 240, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 257, 258, 260, 261, 262, 263, 264, 265, 267, 269, 270, 271, 272, 273, 274, 276, 277, 279, 281, 283, 284, 290, 294, 297, 305, 307, 310, 318, 319, 321, 341, 342, 346, 352, 353, 356, 357, 359, 366, 367, 368, 371, 377, 379, 382, 383, 386, 387, 388, 389, 397, 398, 401, 402, 405, 407, 410, 412, 415, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 456, 459, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 488, 489, 490, 493, 494, 496, 499, 500, 522, 525, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 573, 574, 575, 577, 578, 579, 580, 581, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 682, 685, 686, 687, 688, 689, 690, 695, 696, 698, 699, 700, 705, 706, 709, 710, 711, 714, 716, 718, 719, 720, 721, 723, 724, 725, 726, 727, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 753, 779, 780, 781, 782, 784, 785, 786, 787, 788, 791, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 807, 808, 810, 812, 814, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 884, 885, 887, 888, 890, 891, 892, 894, 895, 896, 897, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 918, 919, 920, 922, 924, 925, 928, 930, 931, 932, 943, 944, 945, 947, 955, 971, 975, 982, 984, 986, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1003, 1004, 1007, 1008, 1009, 1011, 1012, 1013, 1015, 1017, 1019, 1020, 1021, 1022, 1023, 1024, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "condit": [4, 12, 13, 26, 28, 83, 120, 125, 129, 166, 167, 169, 173, 188, 201, 204, 217, 235, 239, 263, 318, 360, 385, 391, 396, 404, 405, 407, 409, 412, 414, 416, 449, 462, 469, 470, 471, 476, 494, 511, 521, 522, 534, 537, 538, 539, 541, 543, 545, 547, 548, 560, 625, 630, 631, 641, 648, 649, 650, 652, 653, 654, 668, 670, 671, 672, 673, 680, 681, 685, 695, 710, 715, 716, 733, 734, 792, 834, 835, 836, 837, 838, 857, 860, 863, 872, 873, 876, 880, 936, 959, 981, 983, 984, 985, 987, 989, 990, 992, 997, 1003, 1006, 1008, 1019, 1023, 1028, 1030, 1031, 1032, 1034, 1035, 1037, 1039, 1041, 1042, 1043], "median": [4, 13, 38, 72, 76, 81, 82, 125, 163, 164, 169, 201, 205, 216, 230, 238, 305, 316, 318, 319, 374, 409, 414, 416, 438, 452, 456, 459, 472, 550, 552, 556, 563, 595, 625, 628, 633, 668, 669, 677, 719, 750, 846, 877, 889, 908, 910, 977, 997, 1003, 1030, 1031], "nevertheless": [4, 172, 414], "measur": [4, 7, 8, 10, 11, 13, 20, 26, 38, 39, 50, 59, 61, 62, 97, 115, 116, 125, 128, 135, 148, 151, 156, 166, 168, 169, 170, 175, 188, 193, 198, 199, 203, 205, 217, 253, 258, 260, 266, 267, 273, 276, 310, 342, 351, 352, 366, 374, 376, 381, 385, 393, 404, 406, 409, 411, 412, 413, 414, 415, 447, 450, 460, 496, 513, 536, 538, 545, 549, 555, 556, 557, 558, 561, 562, 563, 602, 605, 606, 609, 625, 629, 656, 688, 690, 696, 700, 702, 703, 705, 707, 710, 711, 714, 715, 718, 722, 723, 724, 726, 728, 733, 734, 736, 737, 740, 744, 752, 753, 754, 779, 780, 781, 783, 784, 785, 786, 789, 792, 820, 822, 825, 845, 876, 888, 907, 908, 909, 910, 977, 983, 985, 990, 992, 993, 995, 1001, 1003, 1008, 1016, 1019, 1027, 1030, 1032, 1033, 1035, 1037], "test": [4, 6, 8, 10, 11, 13, 17, 25, 26, 27, 28, 32, 33, 34, 55, 71, 72, 86, 101, 112, 115, 117, 118, 119, 120, 124, 125, 126, 127, 138, 140, 142, 144, 147, 149, 151, 152, 166, 168, 169, 170, 171, 172, 175, 183, 188, 194, 195, 198, 199, 200, 201, 202, 203, 206, 207, 214, 215, 217, 224, 229, 234, 235, 237, 247, 253, 254, 255, 258, 259, 260, 261, 262, 264, 265, 267, 268, 270, 271, 272, 276, 281, 286, 291, 292, 299, 301, 307, 309, 310, 311, 312, 322, 329, 338, 346, 353, 362, 366, 367, 373, 374, 376, 382, 383, 384, 385, 391, 392, 393, 396, 397, 400, 402, 403, 405, 408, 409, 412, 414, 415, 416, 417, 424, 426, 430, 433, 434, 435, 463, 466, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 486, 487, 491, 495, 496, 500, 502, 522, 529, 535, 537, 541, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 562, 563, 565, 566, 567, 568, 590, 592, 593, 594, 596, 597, 598, 600, 602, 603, 604, 606, 607, 608, 609, 625, 626, 628, 633, 634, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 710, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 846, 849, 850, 856, 857, 859, 884, 885, 887, 888, 889, 890, 894, 895, 897, 899, 900, 901, 902, 904, 905, 907, 908, 909, 910, 918, 928, 930, 931, 982, 983, 986, 987, 990, 991, 995, 997, 1001, 1002, 1003, 1006, 1007, 1008, 1010, 1011, 1013, 1016, 1017, 1023, 1027, 1028, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043], "discuss": [4, 54, 59, 148, 169, 188, 220, 225, 263, 278, 351, 362, 368, 374, 376, 379, 384, 385, 387, 391, 393, 394, 407, 409, 413, 414, 417, 496, 680, 681, 841, 842, 847, 849, 850, 977, 981, 983, 984, 987, 990, 997, 1004, 1007, 1010, 1030], "choos": [4, 11, 12, 45, 47, 51, 54, 61, 63, 67, 79, 102, 121, 132, 138, 148, 169, 172, 192, 236, 255, 265, 272, 356, 362, 366, 367, 368, 381, 384, 387, 393, 407, 409, 411, 414, 415, 418, 441, 442, 445, 447, 457, 521, 530, 536, 557, 558, 580, 600, 656, 657, 670, 672, 677, 685, 686, 687, 691, 723, 753, 796, 799, 800, 810, 866, 899, 900, 907, 908, 909, 910, 977, 978, 982, 983, 984, 985, 986, 990, 997, 1000, 1001, 1002, 1013, 1015, 1019, 1020, 1029, 1030, 1034, 1036, 1038], "focu": [4, 9, 28, 96, 112, 151, 251, 293, 366, 384, 405, 414, 551, 552, 557, 559, 560, 676, 984, 990, 997, 1006, 1007, 1010], "root": [4, 17, 81, 148, 180, 360, 376, 379, 387, 407, 440, 499, 539, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 637, 747, 748, 787, 788, 907, 908, 909, 910, 911, 913, 987, 993, 1003, 1029, 1035, 1036, 1037, 1038, 1041, 1042], "becaus": [4, 5, 13, 20, 26, 28, 41, 48, 51, 72, 83, 87, 112, 117, 120, 125, 148, 152, 155, 158, 169, 170, 172, 179, 185, 192, 199, 203, 205, 207, 217, 234, 235, 246, 257, 260, 261, 266, 281, 283, 300, 301, 302, 305, 309, 310, 311, 312, 327, 338, 342, 351, 352, 353, 356, 360, 362, 366, 367, 374, 377, 381, 384, 387, 391, 392, 393, 398, 401, 404, 405, 407, 408, 411, 412, 413, 414, 415, 417, 420, 430, 445, 446, 459, 463, 473, 480, 481, 482, 532, 534, 550, 552, 554, 556, 558, 560, 563, 566, 568, 586, 589, 605, 606, 609, 630, 631, 633, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 670, 671, 674, 675, 676, 677, 678, 687, 697, 707, 710, 711, 719, 720, 721, 743, 760, 782, 785, 791, 796, 810, 823, 827, 832, 833, 842, 845, 847, 849, 850, 851, 857, 868, 869, 877, 879, 880, 884, 885, 887, 888, 889, 890, 900, 902, 905, 908, 910, 951, 977, 979, 980, 981, 982, 983, 984, 985, 987, 988, 990, 992, 994, 997, 1002, 1003, 1011, 1020, 1033, 1034, 1036, 1037, 1038, 1039, 1041, 1043], "intuit": [4, 13, 32, 45, 53, 63, 101, 112, 115, 122, 143, 151, 169, 170, 200, 201, 222, 228, 261, 278, 288, 307, 310, 335, 338, 342, 352, 379, 393, 405, 407, 409, 411, 413, 779, 780, 781, 784, 870, 901, 904, 979, 983, 984, 987, 988, 994, 997, 998, 1002, 1011, 1019, 1021, 1027], "studi": [4, 61, 125, 199, 217, 263, 266, 267, 351, 374, 376, 411, 416, 694, 706, 755, 756, 824, 985, 987, 1001, 1012], "metric": [4, 6, 7, 11, 13, 20, 21, 22, 25, 26, 27, 31, 33, 37, 39, 43, 45, 48, 49, 50, 53, 59, 61, 63, 65, 69, 71, 76, 83, 112, 117, 123, 124, 126, 127, 132, 145, 148, 152, 163, 166, 168, 169, 171, 183, 188, 194, 195, 199, 201, 203, 205, 217, 223, 229, 232, 233, 238, 241, 253, 254, 256, 257, 258, 260, 261, 263, 267, 269, 270, 276, 281, 283, 285, 293, 296, 302, 305, 310, 315, 316, 318, 319, 320, 321, 322, 325, 326, 328, 329, 351, 352, 362, 366, 371, 374, 379, 381, 391, 392, 393, 396, 398, 402, 405, 412, 413, 414, 417, 418, 424, 435, 439, 442, 443, 444, 448, 452, 453, 454, 455, 460, 467, 518, 533, 547, 548, 549, 551, 553, 555, 556, 557, 559, 560, 562, 563, 565, 567, 576, 600, 608, 618, 626, 629, 632, 636, 637, 638, 639, 640, 641, 656, 657, 661, 664, 666, 672, 673, 674, 686, 688, 690, 692, 694, 796, 799, 800, 802, 810, 818, 820, 821, 822, 824, 827, 828, 829, 830, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 856, 865, 871, 894, 895, 899, 901, 904, 907, 909, 977, 979, 982, 984, 988, 993, 995, 1006, 1007, 1008, 1016, 1017, 1021, 1023, 1024, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "ones": [4, 11, 35, 44, 56, 72, 82, 123, 128, 151, 175, 183, 203, 204, 228, 231, 235, 260, 268, 271, 290, 309, 326, 348, 366, 367, 379, 387, 393, 407, 409, 411, 414, 422, 425, 429, 448, 530, 564, 579, 608, 609, 616, 642, 643, 656, 657, 668, 674, 701, 793, 798, 803, 814, 841, 842, 843, 845, 847, 849, 850, 851, 852, 853, 874, 878, 941, 983, 987, 992, 993, 997, 1002, 1019, 1027, 1035, 1036, 1037], "term": [4, 14, 15, 26, 33, 59, 101, 115, 118, 122, 125, 156, 168, 183, 187, 188, 199, 201, 203, 213, 216, 217, 238, 258, 262, 283, 299, 318, 342, 346, 351, 353, 368, 379, 381, 383, 391, 401, 405, 406, 407, 409, 411, 412, 414, 441, 445, 447, 450, 457, 460, 522, 533, 536, 538, 542, 545, 547, 586, 587, 588, 589, 602, 605, 606, 630, 631, 638, 640, 642, 643, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 666, 667, 668, 670, 671, 672, 673, 674, 676, 678, 685, 693, 727, 735, 780, 781, 784, 856, 857, 874, 878, 881, 899, 900, 901, 902, 903, 904, 905, 976, 978, 979, 981, 982, 983, 984, 987, 988, 989, 991, 992, 997, 1001, 1002, 1012, 1021, 1035, 1041, 1042, 1043], "y": [4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 25, 26, 27, 28, 31, 32, 34, 35, 40, 41, 43, 44, 45, 46, 53, 55, 57, 58, 61, 62, 63, 66, 67, 72, 73, 75, 76, 82, 86, 87, 92, 93, 98, 100, 101, 102, 104, 105, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 140, 143, 144, 145, 146, 147, 148, 152, 153, 154, 155, 156, 157, 158, 159, 160, 168, 169, 170, 171, 172, 175, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 214, 215, 217, 220, 221, 222, 225, 229, 231, 232, 233, 234, 235, 236, 238, 239, 241, 242, 245, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 356, 357, 358, 359, 360, 362, 371, 372, 373, 374, 377, 379, 381, 384, 386, 388, 392, 393, 398, 401, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 462, 463, 466, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 485, 496, 498, 500, 503, 506, 507, 510, 511, 512, 513, 514, 515, 516, 517, 518, 520, 521, 522, 524, 526, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 583, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 695, 696, 697, 698, 699, 700, 704, 709, 723, 729, 732, 738, 739, 753, 755, 756, 757, 758, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 782, 785, 786, 789, 790, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 858, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 883, 891, 892, 894, 895, 896, 897, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 912, 919, 924, 925, 947, 949, 950, 951, 955, 958, 961, 974, 976, 977, 978, 979, 981, 982, 983, 985, 987, 988, 989, 990, 991, 992, 994, 997, 1001, 1002, 1003, 1007, 1012, 1016, 1017, 1019, 1020, 1023, 1024, 1027, 1028, 1029, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "hist": [4, 26, 28, 54, 76, 114, 118, 199, 201, 232, 238, 266, 288, 305, 309, 311, 319, 322, 414], "bin": [4, 25, 26, 28, 54, 76, 114, 118, 199, 232, 238, 266, 288, 305, 306, 307, 308, 309, 311, 312, 377, 387, 397, 405, 413, 414, 436, 437, 446, 459, 559, 560, 862, 864, 878, 938, 1020, 1035, 1036, 1037, 1041, 1045], "30": [4, 8, 10, 15, 20, 35, 40, 41, 45, 55, 61, 72, 74, 79, 99, 103, 112, 121, 125, 131, 138, 148, 151, 152, 155, 157, 170, 175, 178, 193, 197, 199, 217, 220, 221, 225, 233, 237, 238, 249, 260, 265, 274, 278, 283, 292, 293, 309, 310, 311, 320, 321, 325, 326, 330, 336, 339, 341, 344, 366, 374, 376, 384, 385, 411, 415, 418, 442, 448, 453, 454, 455, 498, 529, 533, 535, 536, 537, 539, 541, 543, 544, 568, 590, 593, 594, 596, 646, 690, 732, 780, 839, 840, 841, 842, 843, 845, 847, 849, 850, 851, 880, 895, 908, 965, 976, 981, 987, 988, 990, 995, 1017, 1027, 1028, 1034, 1035, 1036], "rent": 4, "fleet": 4, "input": [4, 6, 10, 32, 34, 74, 96, 100, 121, 125, 126, 157, 158, 159, 169, 175, 178, 199, 202, 203, 207, 214, 217, 231, 232, 234, 235, 242, 255, 278, 287, 288, 301, 306, 307, 308, 309, 315, 318, 320, 338, 342, 344, 347, 353, 373, 376, 379, 382, 384, 388, 389, 391, 392, 393, 404, 405, 408, 411, 412, 413, 414, 415, 416, 417, 419, 425, 428, 429, 430, 431, 432, 435, 436, 437, 438, 439, 440, 443, 446, 447, 448, 452, 455, 456, 459, 462, 463, 465, 466, 467, 469, 470, 480, 481, 482, 487, 501, 507, 514, 515, 516, 518, 522, 526, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 580, 581, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 609, 618, 620, 625, 626, 627, 628, 629, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 680, 683, 684, 685, 686, 687, 688, 690, 691, 694, 695, 696, 697, 698, 699, 700, 719, 720, 721, 725, 742, 743, 745, 747, 748, 750, 751, 758, 764, 768, 769, 771, 775, 776, 777, 778, 782, 787, 788, 794, 795, 796, 799, 800, 802, 810, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 845, 847, 848, 849, 850, 851, 854, 855, 856, 857, 858, 859, 862, 863, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 886, 887, 891, 892, 894, 895, 897, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 916, 917, 918, 919, 920, 921, 925, 930, 933, 935, 944, 946, 947, 951, 960, 962, 968, 973, 974, 977, 979, 981, 983, 984, 985, 986, 987, 989, 990, 991, 992, 994, 995, 999, 1000, 1001, 1002, 1003, 1006, 1007, 1011, 1012, 1016, 1017, 1023, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "annot": [4, 9, 27, 134, 175, 221, 264, 267, 351, 379, 380, 381, 407, 714, 913, 987, 1003, 1036], "log": [4, 21, 26, 27, 28, 79, 96, 112, 123, 125, 132, 144, 148, 152, 153, 155, 156, 157, 160, 184, 187, 188, 192, 199, 204, 209, 217, 232, 234, 249, 293, 310, 351, 374, 376, 377, 379, 383, 387, 388, 393, 404, 405, 407, 408, 409, 412, 414, 415, 417, 446, 449, 458, 463, 468, 469, 470, 471, 472, 473, 474, 530, 534, 539, 547, 548, 549, 551, 553, 555, 557, 560, 562, 588, 589, 591, 592, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 640, 643, 646, 656, 657, 667, 669, 674, 678, 738, 748, 752, 794, 795, 796, 799, 800, 810, 834, 835, 836, 837, 838, 839, 840, 844, 855, 856, 863, 864, 893, 896, 901, 904, 906, 907, 909, 934, 976, 979, 981, 983, 984, 989, 990, 992, 995, 997, 1001, 1003, 1006, 1007, 1019, 1029, 1030, 1031, 1036, 1037, 1038, 1041, 1044], "describ": [4, 13, 57, 132, 148, 169, 217, 233, 260, 269, 362, 366, 367, 372, 374, 376, 378, 379, 381, 384, 387, 393, 394, 404, 407, 409, 410, 411, 412, 414, 415, 460, 467, 471, 472, 489, 491, 493, 494, 495, 498, 499, 500, 501, 502, 503, 508, 514, 515, 516, 526, 605, 606, 643, 657, 666, 712, 794, 795, 834, 836, 874, 936, 976, 979, 982, 983, 986, 987, 989, 993, 1001, 1002, 1003, 1010, 1012, 1018, 1019, 1035, 1037], "weather": [4, 13, 156, 170, 983, 987], "includ": [4, 33, 35, 56, 81, 118, 122, 123, 124, 168, 169, 171, 183, 199, 203, 217, 235, 261, 278, 283, 300, 305, 318, 319, 321, 338, 343, 351, 353, 362, 366, 367, 373, 375, 377, 379, 380, 381, 383, 384, 385, 387, 388, 393, 394, 397, 404, 406, 407, 408, 410, 411, 412, 414, 415, 416, 417, 418, 442, 444, 448, 454, 464, 467, 468, 469, 470, 471, 472, 473, 474, 487, 488, 489, 494, 498, 499, 500, 502, 503, 508, 532, 539, 555, 562, 572, 630, 636, 644, 645, 650, 658, 659, 660, 663, 679, 686, 687, 695, 711, 726, 727, 732, 734, 735, 768, 780, 781, 784, 792, 796, 798, 799, 800, 809, 810, 813, 816, 822, 825, 847, 849, 850, 851, 872, 873, 874, 878, 896, 899, 900, 907, 909, 911, 913, 919, 920, 923, 925, 928, 944, 976, 983, 986, 987, 988, 990, 991, 997, 1001, 1002, 1003, 1006, 1007, 1010, 1011, 1019, 1021, 1027, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "both": [4, 5, 7, 9, 10, 13, 15, 17, 21, 26, 27, 35, 43, 55, 56, 65, 72, 79, 81, 86, 87, 101, 103, 110, 115, 118, 119, 122, 123, 131, 132, 135, 143, 144, 148, 151, 158, 160, 168, 169, 170, 171, 178, 183, 185, 187, 188, 199, 200, 201, 203, 204, 205, 207, 217, 224, 234, 235, 236, 245, 246, 247, 248, 249, 250, 260, 261, 262, 263, 267, 269, 271, 275, 283, 295, 305, 309, 310, 315, 317, 321, 327, 328, 335, 340, 342, 351, 352, 353, 360, 362, 366, 367, 368, 372, 373, 374, 375, 377, 379, 381, 385, 386, 388, 391, 392, 393, 394, 397, 398, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 417, 420, 435, 444, 450, 460, 466, 473, 480, 481, 482, 483, 486, 487, 494, 495, 498, 500, 503, 505, 506, 507, 532, 536, 538, 545, 549, 553, 554, 555, 561, 562, 563, 564, 565, 575, 586, 587, 589, 595, 605, 606, 625, 630, 631, 641, 655, 656, 657, 670, 672, 674, 676, 685, 697, 702, 710, 714, 726, 727, 728, 733, 735, 754, 758, 764, 771, 775, 780, 781, 784, 785, 786, 792, 799, 800, 802, 818, 828, 856, 857, 871, 873, 875, 887, 892, 897, 899, 900, 907, 909, 923, 928, 937, 950, 962, 976, 977, 978, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 993, 994, 995, 997, 1000, 1001, 1002, 1003, 1006, 1007, 1011, 1016, 1019, 1020, 1021, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "numer": [4, 13, 20, 67, 72, 76, 120, 122, 132, 148, 156, 159, 170, 171, 188, 199, 217, 238, 240, 242, 293, 311, 318, 322, 353, 373, 374, 376, 382, 384, 385, 391, 392, 393, 407, 409, 414, 415, 416, 417, 419, 420, 438, 441, 445, 457, 469, 470, 473, 476, 487, 488, 489, 494, 498, 499, 500, 502, 503, 508, 529, 531, 533, 538, 545, 559, 560, 565, 579, 588, 609, 615, 618, 625, 628, 630, 631, 644, 650, 652, 670, 685, 688, 692, 712, 785, 791, 796, 799, 800, 802, 810, 818, 821, 822, 823, 826, 834, 835, 836, 837, 838, 856, 857, 862, 867, 872, 873, 880, 911, 912, 913, 919, 920, 935, 936, 976, 977, 983, 984, 988, 995, 997, 998, 1003, 1010, 1011, 1012, 1021, 1027, 1028, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "categor": [4, 72, 111, 117, 132, 136, 166, 169, 170, 171, 199, 217, 238, 240, 242, 263, 278, 312, 318, 320, 321, 368, 371, 373, 374, 381, 384, 393, 408, 415, 464, 465, 487, 488, 494, 503, 559, 560, 579, 580, 605, 606, 630, 631, 646, 656, 657, 667, 678, 707, 822, 834, 835, 836, 837, 838, 860, 862, 866, 867, 870, 872, 873, 880, 894, 895, 977, 983, 994, 995, 1003, 1006, 1007, 1008, 1009, 1010, 1011, 1021, 1023, 1027, 1028, 1031, 1032, 1035, 1037, 1039, 1042, 1043, 1044], "inform": [4, 5, 8, 11, 12, 14, 26, 28, 34, 35, 38, 39, 50, 54, 59, 67, 68, 71, 72, 87, 90, 91, 92, 102, 118, 119, 120, 142, 144, 145, 147, 148, 149, 151, 156, 166, 169, 170, 172, 175, 177, 178, 179, 183, 200, 203, 207, 214, 216, 217, 218, 235, 239, 247, 248, 250, 255, 257, 260, 261, 262, 265, 267, 269, 286, 289, 290, 293, 312, 318, 322, 341, 346, 351, 352, 353, 357, 360, 362, 366, 372, 373, 374, 375, 376, 378, 379, 380, 381, 382, 384, 385, 387, 391, 392, 393, 394, 398, 401, 404, 411, 412, 414, 415, 416, 417, 421, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 460, 462, 467, 468, 469, 471, 472, 473, 474, 480, 481, 482, 483, 490, 492, 493, 494, 495, 498, 499, 500, 501, 502, 503, 508, 513, 522, 526, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 579, 580, 581, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 601, 604, 605, 606, 607, 608, 609, 625, 626, 627, 628, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 672, 674, 675, 676, 677, 678, 685, 686, 687, 688, 689, 690, 693, 695, 699, 702, 703, 713, 723, 727, 740, 752, 753, 754, 783, 785, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 822, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 884, 885, 887, 888, 889, 890, 891, 892, 894, 895, 898, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 913, 944, 977, 979, 984, 985, 986, 987, 988, 989, 990, 991, 993, 994, 997, 998, 1001, 1003, 1007, 1008, 1010, 1011, 1018, 1019, 1020, 1021, 1027, 1030, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "alreadi": [4, 6, 10, 17, 56, 59, 91, 101, 112, 132, 148, 169, 229, 236, 238, 241, 261, 267, 283, 318, 321, 379, 380, 384, 391, 393, 405, 409, 411, 413, 414, 419, 435, 497, 521, 531, 565, 566, 632, 644, 647, 662, 663, 664, 665, 666, 672, 674, 675, 676, 683, 684, 765, 834, 854, 862, 868, 869, 871, 876, 896, 899, 900, 922, 946, 976, 979, 993, 997, 998, 1007, 1012, 1017, 1021, 1024, 1028, 1032, 1035, 1039, 1040, 1041, 1042], "expand": [4, 17, 50, 66, 230, 311, 316, 362, 371, 414, 442, 448, 497, 555, 556, 557, 558, 562, 563, 564, 907, 908, 909, 910, 987, 1028, 1035, 1036, 1043], "complementari": [4, 415], "column": [4, 8, 13, 21, 22, 61, 70, 73, 76, 77, 91, 119, 121, 122, 125, 129, 132, 148, 156, 163, 166, 168, 169, 170, 171, 172, 188, 199, 200, 203, 207, 217, 230, 237, 238, 239, 242, 250, 260, 261, 271, 272, 281, 301, 310, 311, 312, 317, 318, 319, 320, 322, 351, 352, 353, 366, 373, 374, 376, 379, 381, 385, 388, 391, 392, 393, 404, 407, 408, 410, 412, 414, 415, 416, 419, 422, 449, 451, 462, 464, 465, 469, 470, 476, 485, 486, 487, 488, 489, 490, 492, 494, 498, 499, 500, 502, 503, 506, 507, 508, 509, 511, 513, 524, 529, 532, 535, 539, 540, 546, 553, 555, 556, 559, 560, 562, 563, 564, 565, 579, 580, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 605, 606, 608, 625, 628, 630, 631, 632, 644, 646, 650, 656, 658, 660, 662, 663, 667, 678, 683, 684, 695, 711, 716, 717, 726, 727, 735, 751, 760, 765, 766, 767, 770, 780, 781, 784, 785, 796, 799, 800, 810, 820, 825, 830, 833, 834, 835, 836, 837, 838, 839, 840, 859, 863, 864, 865, 866, 872, 873, 874, 878, 879, 880, 881, 883, 884, 885, 889, 890, 899, 901, 904, 907, 909, 915, 919, 920, 925, 936, 950, 963, 964, 966, 974, 976, 977, 979, 983, 985, 987, 988, 995, 997, 1002, 1007, 1008, 1027, 1029, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "x": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 20, 25, 26, 27, 28, 31, 32, 34, 35, 39, 40, 41, 42, 43, 44, 45, 46, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 72, 73, 75, 76, 80, 81, 82, 83, 86, 87, 92, 93, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 140, 143, 144, 145, 146, 147, 148, 152, 153, 154, 155, 156, 157, 158, 159, 160, 168, 169, 170, 171, 172, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 217, 220, 221, 222, 225, 228, 229, 231, 232, 233, 234, 235, 236, 238, 239, 241, 242, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360, 362, 366, 372, 373, 374, 379, 380, 381, 383, 384, 385, 386, 387, 388, 391, 392, 393, 398, 401, 405, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 491, 492, 493, 496, 498, 499, 500, 503, 504, 506, 507, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 583, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 704, 708, 709, 722, 729, 732, 739, 755, 756, 757, 758, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 785, 789, 790, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 884, 885, 886, 887, 888, 889, 890, 891, 892, 894, 895, 896, 897, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 920, 923, 933, 935, 936, 937, 938, 947, 948, 955, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 976, 977, 978, 979, 981, 982, 983, 984, 985, 987, 988, 989, 990, 991, 992, 993, 994, 997, 999, 1000, 1001, 1002, 1003, 1007, 1012, 1016, 1017, 1019, 1020, 1021, 1024, 1027, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044], "drop": [4, 5, 13, 72, 76, 87, 156, 168, 169, 170, 172, 199, 203, 217, 238, 242, 270, 311, 317, 320, 322, 352, 383, 387, 408, 412, 414, 462, 465, 565, 566, 567, 568, 693, 698, 700, 779, 786, 858, 872, 878, 977, 983, 987, 997, 1006, 1027, 1028, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "axi": [4, 5, 7, 11, 12, 13, 14, 15, 18, 20, 26, 27, 38, 40, 41, 48, 49, 51, 53, 54, 55, 56, 62, 72, 73, 76, 83, 87, 92, 93, 96, 97, 98, 99, 100, 105, 114, 115, 119, 121, 128, 131, 135, 140, 144, 155, 156, 160, 163, 168, 169, 180, 184, 186, 188, 191, 192, 193, 199, 204, 208, 211, 213, 214, 216, 217, 221, 222, 225, 228, 232, 233, 237, 245, 247, 249, 250, 256, 257, 261, 262, 267, 269, 270, 281, 283, 288, 289, 290, 293, 294, 295, 302, 305, 309, 312, 322, 326, 328, 330, 334, 337, 338, 341, 343, 344, 345, 346, 348, 351, 352, 357, 358, 359, 360, 374, 381, 388, 393, 405, 407, 415, 419, 436, 443, 462, 465, 529, 531, 534, 535, 537, 539, 541, 543, 544, 548, 583, 610, 629, 630, 683, 684, 699, 760, 776, 777, 778, 779, 802, 818, 827, 868, 869, 876, 877, 879, 884, 885, 886, 888, 889, 890, 913, 915, 919, 920, 938, 962, 968, 977, 987, 994, 997, 1002, 1018, 1020, 1035, 1037, 1039, 1044], "holidai": [4, 170], "workingdai": [4, 170], "temp": [4, 13, 170], "feel_temp": [4, 13, 170], "humid": [4, 13, 170, 994], "windspe": [4, 13, 170], "0": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 86, 87, 88, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 165, 166, 168, 169, 170, 171, 172, 173, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 366, 367, 373, 374, 376, 377, 379, 380, 381, 383, 384, 385, 386, 388, 391, 392, 393, 397, 398, 399, 400, 401, 403, 404, 405, 407, 408, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 430, 432, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 519, 520, 521, 522, 523, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 576, 579, 580, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 919, 920, 924, 925, 927, 928, 929, 930, 931, 933, 935, 936, 938, 939, 940, 941, 948, 949, 950, 952, 953, 955, 956, 957, 958, 961, 962, 963, 964, 965, 966, 967, 968, 971, 973, 976, 977, 979, 980, 981, 982, 983, 984, 985, 987, 988, 989, 990, 991, 992, 993, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1006, 1007, 1008, 1009, 1012, 1016, 1017, 1018, 1019, 1020, 1021, 1023, 1024, 1025], "spring": [4, 13, 170], "fals": [4, 5, 7, 8, 10, 11, 14, 15, 17, 21, 22, 25, 27, 28, 33, 34, 35, 40, 43, 45, 47, 48, 55, 56, 65, 68, 71, 72, 73, 80, 82, 93, 100, 104, 105, 112, 118, 119, 122, 125, 126, 135, 138, 151, 156, 157, 158, 159, 169, 170, 171, 172, 178, 179, 183, 185, 199, 200, 204, 205, 207, 215, 217, 220, 223, 235, 236, 238, 242, 245, 257, 258, 260, 263, 264, 267, 268, 269, 270, 271, 272, 273, 274, 283, 287, 293, 296, 300, 301, 305, 306, 311, 312, 315, 317, 318, 319, 320, 322, 327, 338, 340, 346, 347, 351, 352, 373, 379, 380, 381, 384, 393, 398, 405, 407, 408, 409, 411, 412, 414, 415, 416, 417, 419, 420, 432, 433, 434, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 451, 452, 457, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 506, 507, 508, 510, 513, 521, 522, 524, 525, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 630, 633, 634, 635, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 688, 692, 693, 695, 696, 697, 698, 699, 700, 701, 706, 707, 709, 710, 711, 712, 713, 716, 717, 723, 724, 725, 726, 727, 728, 735, 739, 740, 747, 748, 751, 753, 758, 760, 764, 766, 771, 775, 779, 780, 781, 782, 784, 786, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 807, 810, 814, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 869, 870, 871, 872, 874, 875, 876, 877, 878, 879, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 894, 895, 896, 897, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 917, 918, 919, 920, 930, 937, 948, 949, 952, 953, 957, 958, 959, 961, 968, 973, 974, 976, 977, 983, 987, 990, 997, 1001, 1002, 1020, 1021, 1027, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044], "6": [4, 7, 9, 10, 11, 12, 13, 17, 20, 27, 32, 33, 41, 45, 47, 50, 51, 53, 57, 58, 61, 62, 63, 64, 65, 66, 68, 74, 75, 76, 77, 79, 80, 81, 83, 91, 96, 98, 105, 113, 125, 126, 129, 131, 138, 143, 148, 149, 151, 154, 156, 158, 159, 163, 164, 169, 170, 172, 175, 178, 179, 180, 183, 188, 192, 197, 199, 200, 201, 203, 213, 217, 220, 221, 222, 224, 226, 228, 231, 232, 236, 239, 240, 245, 246, 247, 248, 250, 251, 254, 255, 258, 259, 260, 261, 262, 263, 265, 269, 270, 271, 272, 273, 275, 281, 285, 288, 296, 299, 301, 302, 305, 307, 309, 310, 312, 315, 318, 319, 320, 321, 322, 325, 326, 328, 329, 330, 331, 338, 339, 341, 343, 346, 348, 352, 353, 359, 362, 373, 374, 376, 377, 379, 384, 385, 392, 397, 399, 400, 405, 407, 408, 411, 412, 414, 415, 416, 422, 439, 443, 444, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 459, 460, 461, 480, 481, 482, 483, 488, 494, 503, 515, 522, 525, 528, 535, 536, 537, 538, 539, 543, 544, 545, 551, 559, 560, 561, 567, 568, 591, 592, 602, 603, 604, 606, 609, 612, 613, 623, 625, 626, 628, 634, 635, 642, 643, 668, 674, 675, 687, 691, 697, 719, 725, 735, 739, 742, 743, 747, 748, 750, 766, 782, 785, 787, 794, 795, 797, 798, 803, 805, 806, 808, 813, 814, 817, 820, 821, 822, 823, 825, 834, 835, 836, 838, 839, 840, 847, 849, 850, 851, 866, 867, 869, 872, 874, 877, 878, 882, 883, 914, 915, 919, 920, 935, 936, 937, 939, 941, 942, 950, 962, 965, 973, 976, 977, 981, 983, 984, 987, 997, 998, 1001, 1002, 1003, 1012, 1016, 1017, 1019, 1025, 1028, 1029, 1030, 1033, 1035, 1040, 1044], "clear": [4, 17, 56, 61, 73, 169, 170, 310, 374, 378, 379, 381, 391, 392, 393, 405, 408, 413, 913, 914, 976, 981, 1038, 1039, 1040], "9": [4, 5, 7, 8, 9, 12, 13, 25, 27, 28, 32, 33, 35, 43, 45, 51, 56, 59, 63, 65, 75, 83, 92, 121, 122, 124, 125, 127, 130, 132, 138, 139, 140, 148, 154, 158, 164, 168, 169, 170, 180, 181, 190, 199, 206, 212, 213, 215, 216, 217, 220, 223, 232, 233, 234, 242, 245, 246, 247, 248, 254, 263, 267, 269, 281, 285, 287, 288, 291, 292, 293, 299, 300, 302, 305, 307, 308, 309, 311, 312, 320, 321, 325, 326, 328, 329, 330, 338, 342, 348, 353, 362, 376, 377, 385, 392, 397, 399, 400, 405, 408, 409, 411, 414, 415, 437, 441, 448, 455, 461, 480, 481, 482, 483, 488, 494, 496, 514, 516, 518, 525, 532, 536, 537, 538, 545, 558, 565, 568, 581, 589, 602, 603, 605, 606, 625, 628, 632, 635, 637, 645, 656, 659, 685, 690, 697, 707, 720, 723, 738, 745, 766, 775, 776, 777, 794, 797, 799, 800, 814, 817, 823, 825, 828, 836, 837, 841, 842, 847, 850, 856, 857, 865, 871, 874, 935, 936, 940, 960, 976, 982, 983, 987, 991, 997, 1001, 1002, 1012, 1016, 1021, 1025, 1028, 1029, 1030, 1032, 1041, 1043], "84": [4, 6, 71, 145, 190, 217, 307, 325, 362, 376, 414, 415, 785, 810, 987, 997, 1017], "14": [4, 11, 13, 16, 39, 50, 61, 63, 64, 67, 75, 82, 101, 143, 165, 170, 183, 188, 190, 217, 220, 222, 226, 228, 233, 259, 265, 266, 274, 281, 283, 297, 302, 308, 309, 320, 345, 348, 367, 374, 376, 377, 392, 397, 399, 400, 407, 411, 494, 496, 508, 551, 552, 583, 584, 633, 641, 690, 810, 814, 865, 980, 983, 987, 997, 1002, 1008, 1012, 1025, 1027, 1028, 1030, 1031, 1035, 1040], "395": [4, 214], "81": [4, 51, 222, 242, 325, 326, 407, 697, 758, 785, 796, 810, 826, 987, 988, 990, 997], "0000": [4, 320], "02": [4, 8, 12, 13, 29, 31, 36, 45, 51, 53, 59, 63, 65, 69, 77, 83, 84, 86, 96, 99, 114, 121, 136, 148, 153, 158, 161, 168, 169, 173, 180, 217, 228, 236, 238, 243, 255, 261, 267, 276, 288, 297, 299, 302, 303, 305, 307, 313, 323, 330, 334, 352, 357, 361, 373, 376, 384, 411, 439, 443, 595, 603, 656, 674, 796, 810, 878, 894, 908, 983, 1008], "13": [4, 6, 10, 11, 13, 45, 75, 101, 105, 121, 124, 125, 126, 136, 163, 169, 175, 185, 208, 225, 238, 254, 261, 264, 266, 297, 302, 305, 309, 338, 374, 376, 379, 385, 392, 411, 419, 494, 508, 511, 530, 531, 549, 550, 580, 604, 633, 637, 731, 756, 814, 843, 858, 865, 891, 892, 983, 987, 988, 993, 994, 997, 1002, 1008, 1012, 1025, 1027, 1029, 1030, 1033, 1034, 1035, 1036, 1039], "635": [4, 614], "80": [4, 6, 11, 17, 28, 68, 82, 132, 140, 145, 170, 178, 236, 307, 311, 325, 341, 343, 351, 358, 362, 374, 376, 379, 405, 411, 416, 418, 442, 477, 508, 539, 711, 796, 810, 880, 893, 912, 976, 982, 983, 987, 994, 1000, 1003, 1021], "75": [4, 6, 7, 8, 10, 13, 34, 45, 56, 83, 115, 145, 158, 159, 164, 169, 175, 178, 181, 190, 206, 217, 242, 247, 248, 260, 269, 273, 288, 305, 318, 348, 351, 362, 447, 499, 549, 635, 656, 692, 704, 710, 731, 736, 737, 742, 750, 753, 791, 796, 877, 885, 889, 896, 912, 924, 925, 968, 987, 989, 997, 1003, 1005, 1017, 1029], "17374": [4, 13], "19": [4, 13, 99, 156, 169, 203, 224, 226, 250, 309, 310, 326, 352, 376, 377, 383, 393, 397, 399, 400, 407, 408, 415, 418, 442, 490, 514, 515, 516, 534, 538, 539, 545, 547, 548, 555, 556, 557, 558, 562, 563, 564, 580, 587, 605, 646, 656, 657, 664, 665, 666, 669, 670, 672, 674, 676, 685, 705, 778, 782, 796, 810, 822, 827, 828, 830, 831, 845, 846, 865, 876, 897, 901, 904, 907, 908, 909, 910, 976, 987, 997, 1008, 1025, 1027, 1028, 1029, 1030, 1032, 1035, 1044], "misti": [4, 170], "10": [4, 5, 6, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 21, 26, 27, 28, 31, 32, 33, 38, 40, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 72, 73, 75, 79, 80, 81, 82, 83, 86, 87, 93, 96, 98, 99, 100, 101, 105, 106, 107, 112, 114, 115, 117, 118, 119, 121, 122, 123, 125, 126, 129, 130, 133, 135, 140, 145, 148, 152, 153, 155, 157, 158, 160, 161, 163, 164, 168, 169, 170, 171, 172, 175, 178, 183, 189, 190, 192, 193, 197, 199, 200, 201, 202, 203, 204, 205, 206, 210, 211, 212, 215, 216, 217, 221, 222, 228, 231, 232, 233, 234, 235, 237, 238, 239, 241, 248, 249, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266, 268, 271, 274, 276, 278, 281, 288, 299, 300, 301, 302, 305, 306, 308, 309, 310, 315, 316, 317, 318, 319, 321, 322, 325, 326, 327, 329, 336, 337, 338, 340, 341, 343, 345, 346, 348, 351, 352, 353, 362, 366, 373, 374, 375, 376, 379, 381, 384, 385, 391, 392, 393, 397, 398, 404, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 420, 436, 441, 445, 447, 449, 450, 451, 457, 458, 460, 473, 490, 491, 494, 498, 499, 500, 502, 508, 509, 510, 511, 514, 518, 519, 522, 526, 529, 533, 534, 535, 536, 537, 539, 540, 542, 543, 544, 546, 550, 553, 554, 555, 556, 559, 560, 562, 563, 564, 565, 566, 568, 580, 581, 591, 592, 597, 598, 603, 605, 609, 615, 617, 625, 628, 630, 632, 633, 634, 635, 638, 640, 641, 642, 647, 657, 662, 663, 664, 665, 667, 668, 670, 671, 673, 674, 675, 676, 683, 684, 689, 690, 693, 694, 697, 703, 713, 723, 739, 753, 766, 794, 795, 796, 797, 798, 799, 800, 807, 810, 811, 812, 813, 814, 816, 817, 818, 823, 825, 826, 827, 828, 834, 835, 836, 838, 839, 840, 846, 855, 856, 857, 859, 865, 869, 872, 873, 876, 888, 896, 902, 905, 907, 908, 912, 923, 933, 936, 940, 951, 955, 956, 957, 963, 964, 973, 976, 977, 982, 983, 984, 985, 987, 988, 990, 991, 993, 994, 997, 1001, 1002, 1008, 1012, 1016, 1017, 1019, 1020, 1021, 1024, 1025, 1028, 1029, 1030, 1035, 1037, 1038, 1039, 1041, 1042], "66": [4, 224, 311, 376, 407, 424, 459, 530, 630, 710, 780, 781, 792, 878, 886, 987, 999], "880": 4, "60": [4, 6, 17, 60, 74, 83, 93, 99, 199, 211, 217, 220, 221, 242, 248, 268, 273, 326, 341, 351, 373, 407, 411, 448, 455, 711, 796, 987, 997, 1017, 1027, 1030], "11": [4, 13, 20, 75, 82, 98, 99, 107, 124, 136, 148, 154, 169, 170, 183, 199, 200, 201, 204, 222, 232, 238, 243, 257, 265, 266, 272, 276, 286, 287, 289, 309, 317, 320, 321, 337, 341, 346, 351, 353, 373, 376, 377, 385, 392, 407, 410, 411, 414, 448, 455, 480, 481, 482, 483, 494, 499, 515, 516, 610, 648, 654, 668, 713, 719, 720, 721, 775, 776, 777, 797, 800, 814, 817, 824, 851, 908, 937, 951, 979, 983, 985, 997, 1001, 1002, 1008, 1012, 1019, 1021, 1025, 1029, 1033, 1035, 1036, 1038, 1041, 1042], "0014": 4, "17375": [4, 13], "20": [4, 7, 8, 13, 15, 17, 20, 26, 27, 28, 34, 35, 40, 41, 43, 44, 47, 48, 51, 55, 56, 62, 68, 79, 83, 93, 96, 103, 105, 114, 118, 121, 122, 125, 128, 132, 133, 135, 140, 143, 144, 145, 148, 157, 168, 170, 171, 181, 188, 189, 191, 195, 196, 198, 199, 200, 203, 208, 211, 212, 213, 214, 216, 223, 232, 238, 243, 247, 249, 250, 260, 261, 263, 264, 266, 271, 272, 274, 278, 283, 287, 288, 289, 290, 291, 294, 302, 309, 310, 311, 316, 317, 318, 319, 321, 325, 326, 329, 335, 337, 341, 343, 348, 352, 353, 354, 358, 359, 372, 376, 379, 381, 383, 384, 385, 397, 407, 414, 415, 439, 444, 445, 447, 462, 463, 467, 469, 470, 476, 486, 487, 488, 489, 490, 492, 494, 495, 498, 500, 502, 503, 510, 513, 514, 521, 529, 534, 535, 540, 543, 544, 546, 550, 553, 554, 557, 558, 559, 560, 561, 567, 568, 580, 587, 588, 590, 592, 595, 597, 627, 628, 643, 647, 656, 664, 665, 666, 674, 676, 694, 702, 706, 711, 714, 722, 723, 736, 753, 754, 764, 789, 790, 794, 795, 796, 810, 821, 822, 823, 826, 828, 831, 832, 833, 836, 837, 844, 845, 856, 857, 858, 859, 861, 863, 864, 872, 873, 874, 875, 880, 894, 895, 897, 898, 903, 906, 911, 917, 919, 920, 923, 965, 976, 983, 987, 990, 993, 994, 997, 1000, 1008, 1010, 1011, 1013, 1019, 1023, 1025, 1027, 1033, 1036, 1039, 1041, 1042], "17376": [4, 13], "21": [4, 8, 13, 74, 99, 148, 161, 169, 188, 200, 217, 225, 238, 250, 283, 302, 307, 309, 321, 376, 377, 381, 383, 397, 404, 414, 415, 439, 443, 472, 476, 527, 530, 559, 560, 561, 567, 568, 586, 587, 589, 625, 667, 685, 751, 796, 798, 810, 822, 865, 872, 874, 880, 897, 913, 935, 979, 983, 988, 997, 1025, 1027, 1028, 1030, 1034, 1035, 1037], "17377": [4, 13], "22": [4, 13, 43, 110, 116, 117, 118, 119, 163, 164, 166, 169, 170, 171, 216, 225, 241, 250, 257, 269, 276, 278, 281, 285, 302, 305, 309, 314, 317, 320, 321, 322, 323, 326, 353, 379, 384, 397, 404, 435, 446, 470, 476, 486, 487, 493, 494, 502, 513, 522, 529, 535, 540, 543, 544, 555, 556, 557, 558, 559, 561, 562, 563, 564, 565, 566, 567, 568, 592, 607, 625, 626, 630, 632, 643, 645, 649, 651, 653, 656, 657, 659, 661, 663, 667, 686, 690, 700, 702, 711, 754, 766, 775, 780, 781, 785, 796, 797, 801, 810, 815, 817, 819, 820, 821, 822, 823, 824, 825, 826, 843, 845, 847, 849, 850, 851, 856, 857, 858, 860, 863, 879, 890, 899, 901, 902, 903, 904, 905, 907, 908, 909, 910, 930, 931, 979, 987, 997, 1008, 1025, 1027, 1030, 1035, 1038, 1040], "56": [4, 8, 13, 69, 149, 208, 217, 232, 385, 711, 732, 987, 997, 1027], "8": [4, 5, 6, 7, 8, 9, 12, 13, 14, 20, 26, 27, 28, 32, 33, 35, 38, 44, 45, 46, 49, 51, 54, 56, 61, 63, 65, 66, 71, 73, 75, 76, 82, 86, 91, 92, 93, 96, 97, 100, 101, 104, 106, 112, 115, 117, 118, 121, 122, 124, 125, 127, 130, 133, 134, 138, 147, 148, 152, 154, 156, 157, 159, 160, 164, 168, 169, 170, 172, 175, 178, 179, 184, 185, 190, 193, 199, 200, 203, 207, 209, 215, 217, 220, 221, 222, 224, 225, 229, 232, 233, 234, 236, 240, 241, 242, 245, 246, 247, 249, 250, 251, 255, 256, 258, 259, 260, 261, 263, 264, 265, 267, 270, 271, 278, 281, 285, 287, 291, 295, 299, 301, 302, 305, 307, 308, 309, 310, 311, 313, 315, 320, 323, 325, 326, 327, 329, 330, 335, 338, 342, 343, 345, 346, 347, 351, 352, 353, 359, 362, 367, 373, 374, 376, 377, 379, 384, 385, 397, 399, 400, 405, 407, 411, 412, 414, 415, 416, 418, 420, 437, 441, 442, 445, 447, 448, 450, 453, 454, 455, 460, 461, 467, 468, 469, 470, 471, 472, 473, 474, 477, 478, 479, 481, 482, 483, 485, 488, 494, 496, 500, 501, 512, 514, 529, 532, 536, 538, 541, 543, 545, 547, 548, 553, 554, 563, 568, 580, 586, 587, 588, 589, 602, 603, 626, 627, 634, 635, 646, 656, 668, 674, 687, 690, 691, 692, 693, 697, 700, 704, 705, 707, 708, 713, 719, 724, 725, 726, 738, 742, 743, 747, 748, 750, 779, 780, 782, 785, 786, 787, 788, 792, 794, 797, 798, 803, 806, 813, 814, 817, 818, 825, 826, 828, 837, 839, 840, 846, 856, 857, 858, 864, 871, 878, 880, 901, 904, 934, 935, 936, 940, 956, 962, 963, 964, 965, 966, 967, 968, 976, 977, 983, 984, 985, 987, 990, 995, 997, 1001, 1011, 1012, 1016, 1017, 1018, 1019, 1020, 1024, 1025, 1028, 1029, 1030, 1034, 1035, 1040, 1041, 1043], "9981": 4, "17378": [4, 13], "23": [4, 13, 20, 27, 35, 51, 99, 129, 148, 166, 180, 199, 218, 230, 240, 242, 250, 302, 309, 314, 317, 318, 319, 321, 322, 323, 326, 329, 376, 377, 379, 385, 397, 399, 400, 414, 420, 430, 438, 445, 450, 452, 460, 463, 465, 466, 473, 476, 477, 478, 480, 481, 482, 488, 490, 498, 499, 500, 502, 503, 508, 510, 512, 520, 522, 536, 537, 538, 541, 545, 552, 554, 556, 558, 559, 560, 563, 566, 567, 568, 605, 606, 609, 625, 628, 630, 633, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 665, 667, 668, 670, 671, 673, 676, 677, 678, 715, 727, 775, 825, 831, 832, 833, 842, 850, 857, 860, 872, 879, 887, 888, 897, 900, 902, 905, 908, 910, 917, 919, 920, 930, 931, 936, 987, 1008, 1025, 1027, 1028, 1034, 1035, 1036, 1039], "65": [4, 34, 170, 199, 269, 311, 407, 437, 500, 515, 595, 697, 738, 789, 790, 994, 1017, 1027, 1028, 1029], "17379": [4, 13, 1039], "row": [4, 20, 21, 22, 26, 28, 35, 45, 61, 76, 91, 93, 118, 121, 130, 133, 163, 199, 200, 201, 229, 232, 238, 239, 307, 360, 366, 374, 381, 388, 392, 393, 404, 407, 410, 415, 422, 440, 441, 445, 447, 448, 449, 451, 454, 455, 457, 462, 466, 486, 488, 489, 490, 491, 492, 493, 498, 499, 500, 502, 503, 508, 509, 511, 532, 540, 546, 549, 588, 589, 618, 630, 641, 644, 645, 650, 651, 658, 659, 660, 661, 679, 682, 690, 694, 695, 708, 716, 717, 722, 755, 756, 760, 763, 765, 766, 767, 768, 770, 771, 773, 775, 776, 777, 778, 794, 795, 828, 834, 835, 836, 837, 838, 844, 847, 848, 849, 850, 851, 854, 865, 869, 871, 872, 874, 884, 885, 886, 889, 890, 893, 897, 915, 919, 920, 936, 958, 961, 965, 967, 969, 970, 973, 974, 976, 977, 979, 981, 983, 985, 987, 988, 990, 997, 998, 1001, 1002, 1007, 1034, 1035, 1036, 1037, 1042], "onli": [4, 7, 11, 14, 15, 21, 25, 26, 27, 28, 31, 34, 35, 38, 40, 41, 46, 50, 54, 56, 59, 67, 71, 72, 73, 75, 76, 82, 91, 99, 100, 102, 106, 112, 114, 119, 120, 121, 122, 124, 131, 132, 143, 144, 145, 148, 151, 153, 156, 158, 160, 164, 166, 168, 169, 170, 175, 177, 182, 183, 188, 195, 199, 200, 202, 205, 207, 208, 217, 218, 220, 221, 228, 230, 232, 234, 235, 239, 242, 245, 246, 247, 250, 251, 256, 258, 260, 262, 263, 266, 267, 268, 269, 271, 272, 278, 281, 283, 289, 291, 294, 296, 301, 305, 306, 310, 311, 317, 318, 325, 326, 328, 334, 335, 338, 342, 343, 346, 347, 351, 352, 353, 356, 357, 360, 362, 366, 367, 368, 372, 373, 374, 376, 377, 379, 381, 383, 384, 385, 386, 387, 388, 391, 393, 394, 397, 398, 401, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 422, 423, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 457, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 480, 481, 482, 483, 487, 488, 489, 490, 492, 494, 495, 498, 499, 500, 501, 502, 503, 506, 507, 508, 510, 514, 517, 521, 522, 526, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 697, 705, 707, 711, 723, 726, 727, 731, 733, 734, 735, 738, 739, 740, 753, 755, 757, 771, 775, 776, 777, 778, 780, 781, 784, 785, 789, 790, 791, 794, 795, 796, 797, 798, 799, 800, 802, 803, 805, 810, 814, 818, 820, 821, 822, 823, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 856, 857, 858, 859, 862, 863, 864, 865, 866, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 915, 917, 918, 919, 920, 923, 925, 928, 936, 938, 941, 943, 948, 953, 976, 977, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 990, 991, 992, 993, 994, 995, 997, 998, 999, 1001, 1002, 1003, 1006, 1007, 1008, 1011, 1019, 1020, 1021, 1024, 1027, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1039, 1041, 1042, 1043, 1044], "present": [4, 5, 13, 44, 50, 93, 96, 103, 117, 118, 125, 128, 147, 148, 157, 160, 178, 181, 183, 188, 199, 228, 231, 235, 250, 258, 263, 266, 269, 270, 283, 305, 308, 310, 352, 376, 377, 381, 384, 391, 393, 398, 407, 409, 412, 414, 415, 425, 426, 429, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 462, 466, 467, 468, 469, 470, 471, 472, 473, 474, 487, 488, 489, 490, 494, 498, 499, 500, 501, 502, 503, 508, 529, 531, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 547, 548, 559, 560, 561, 564, 567, 568, 579, 580, 581, 586, 587, 589, 615, 625, 626, 627, 628, 648, 652, 675, 686, 687, 688, 689, 710, 726, 727, 735, 766, 780, 781, 784, 794, 795, 796, 799, 800, 808, 810, 823, 841, 842, 843, 845, 847, 849, 850, 851, 858, 863, 871, 872, 873, 874, 875, 877, 880, 891, 892, 903, 911, 913, 914, 936, 971, 986, 987, 988, 989, 994, 997, 1005, 1007, 1030, 1035, 1037, 1038, 1039, 1041, 1042, 1044], "date": [4, 71, 148, 156, 170, 374, 376, 379, 383, 394, 408, 1007], "datetim": [4, 18, 156, 170], "panda": [4, 12, 26, 71, 72, 73, 74, 112, 118, 119, 122, 125, 129, 156, 163, 168, 169, 170, 171, 172, 178, 183, 188, 199, 203, 207, 217, 238, 239, 242, 250, 258, 260, 261, 263, 271, 272, 278, 310, 311, 312, 315, 318, 319, 346, 351, 352, 373, 374, 377, 378, 379, 381, 382, 393, 397, 400, 408, 431, 440, 441, 443, 445, 447, 462, 464, 466, 480, 481, 482, 483, 487, 488, 489, 490, 494, 498, 499, 500, 502, 503, 508, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 559, 560, 564, 565, 566, 567, 568, 579, 580, 581, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 625, 626, 627, 628, 630, 631, 633, 636, 637, 638, 639, 640, 686, 687, 690, 796, 799, 800, 810, 825, 843, 848, 851, 855, 858, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 891, 892, 897, 915, 976, 977, 997, 1006, 1007, 1021, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "http": [4, 6, 7, 8, 12, 18, 25, 72, 126, 132, 148, 160, 164, 175, 199, 207, 215, 217, 225, 229, 278, 281, 283, 301, 373, 374, 376, 377, 379, 383, 384, 385, 387, 391, 393, 397, 407, 411, 416, 440, 447, 485, 490, 494, 498, 500, 506, 507, 508, 528, 529, 532, 535, 539, 593, 634, 639, 642, 647, 656, 662, 664, 665, 666, 669, 674, 677, 680, 681, 683, 684, 690, 693, 703, 719, 720, 721, 755, 756, 766, 834, 836, 837, 838, 841, 842, 847, 848, 849, 850, 855, 877, 892, 893, 894, 907, 908, 983, 985, 987, 1000, 1003, 1017, 1037], "pydata": [4, 397, 400, 1005, 1011], "org": [4, 12, 14, 15, 18, 25, 27, 33, 38, 47, 49, 62, 67, 72, 73, 117, 119, 120, 128, 129, 132, 135, 145, 156, 160, 169, 170, 171, 175, 180, 190, 191, 199, 207, 215, 217, 221, 229, 230, 231, 233, 235, 239, 240, 241, 242, 250, 258, 260, 261, 263, 267, 272, 281, 301, 302, 311, 316, 317, 319, 320, 322, 325, 326, 327, 330, 351, 352, 353, 360, 367, 372, 377, 379, 382, 385, 387, 394, 411, 593, 634, 666, 669, 674, 693, 703, 766, 841, 842, 847, 848, 849, 850, 877, 893, 907, 908, 983, 987, 1003, 1023, 1035, 1039], "stabl": [4, 160, 169, 193, 197, 201, 283, 316, 346, 352, 377, 379, 383, 385, 388, 393, 397, 411, 415, 419, 469, 470, 476, 531, 653, 670, 672, 685, 690, 721, 749, 935, 936, 983, 989, 990, 997, 1007, 1027, 1028, 1033, 1038, 1040, 1044], "user_guid": 4, "timeseri": 4, "html": [4, 8, 12, 27, 72, 73, 117, 119, 120, 128, 129, 132, 135, 145, 148, 156, 160, 169, 170, 171, 175, 180, 229, 231, 235, 239, 240, 241, 242, 250, 258, 260, 261, 267, 272, 302, 311, 316, 317, 319, 320, 322, 327, 360, 374, 376, 379, 380, 382, 383, 387, 408, 411, 415, 421, 485, 506, 507, 656, 834, 838, 932, 985, 1006, 1007, 1038, 1039, 1040, 1041, 1042, 1044], "compon": [4, 5, 18, 34, 45, 59, 63, 71, 74, 85, 86, 88, 91, 97, 98, 100, 101, 102, 103, 104, 106, 130, 139, 156, 164, 166, 168, 183, 220, 232, 233, 236, 245, 246, 249, 250, 251, 259, 261, 283, 284, 285, 286, 294, 295, 297, 302, 310, 317, 366, 371, 374, 379, 381, 385, 388, 391, 403, 406, 407, 408, 410, 415, 417, 419, 421, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 460, 461, 463, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 500, 502, 513, 519, 524, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 571, 579, 580, 581, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 686, 687, 688, 689, 690, 693, 794, 795, 796, 799, 800, 810, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 889, 890, 891, 892, 893, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 935, 936, 979, 984, 986, 997, 999, 1002, 1006, 1007, 1008, 1009, 1011, 1015, 1021, 1022, 1023, 1027, 1029, 1033, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "now": [4, 5, 7, 13, 18, 21, 54, 58, 72, 87, 101, 112, 113, 117, 119, 121, 122, 125, 126, 132, 135, 148, 151, 156, 157, 158, 164, 168, 169, 170, 171, 175, 178, 180, 185, 187, 188, 200, 201, 203, 224, 233, 235, 256, 260, 263, 271, 272, 278, 286, 310, 316, 317, 319, 320, 321, 322, 327, 338, 351, 352, 353, 362, 366, 368, 374, 379, 380, 381, 385, 391, 392, 393, 397, 404, 407, 411, 412, 414, 415, 419, 491, 506, 507, 510, 534, 547, 577, 578, 580, 625, 628, 647, 651, 656, 661, 682, 723, 753, 794, 795, 799, 800, 831, 846, 859, 962, 976, 977, 983, 987, 993, 996, 997, 1002, 1003, 1005, 1007, 1012, 1019, 1021, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "introspect": [4, 6, 72, 385, 557, 558, 586, 587, 589, 997, 1017], "value_count": [4, 13, 170, 278], "11413": 4, "4544": 4, "rain": [4, 13, 170, 983], "1419": 4, "heavy_rain": [4, 170], "name": [4, 6, 7, 9, 10, 11, 12, 13, 18, 20, 26, 28, 31, 32, 38, 45, 46, 59, 63, 72, 74, 76, 83, 97, 102, 115, 116, 117, 118, 122, 125, 132, 169, 170, 171, 188, 197, 199, 201, 203, 205, 206, 214, 216, 217, 220, 221, 228, 234, 235, 237, 238, 242, 247, 255, 257, 258, 261, 263, 264, 267, 269, 270, 278, 283, 291, 292, 299, 300, 307, 309, 311, 319, 320, 329, 343, 351, 352, 353, 367, 368, 373, 374, 377, 379, 381, 383, 384, 386, 387, 393, 397, 401, 404, 407, 411, 414, 415, 417, 421, 423, 428, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 455, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 486, 487, 488, 489, 490, 492, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 508, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 574, 579, 580, 581, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 685, 686, 687, 688, 689, 690, 695, 696, 697, 698, 700, 706, 707, 711, 729, 730, 739, 776, 777, 794, 795, 796, 797, 798, 799, 800, 802, 803, 805, 808, 810, 814, 818, 822, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 891, 892, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 918, 919, 920, 923, 927, 928, 929, 931, 943, 944, 945, 947, 950, 957, 971, 975, 976, 981, 983, 987, 988, 994, 995, 997, 1003, 1007, 1016, 1017, 1019, 1021, 1027, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "dtype": [4, 8, 10, 11, 13, 18, 49, 50, 54, 66, 71, 72, 122, 124, 126, 127, 128, 152, 153, 154, 164, 169, 170, 201, 217, 242, 245, 258, 264, 268, 278, 290, 296, 311, 318, 319, 321, 326, 360, 373, 374, 379, 381, 391, 393, 403, 408, 411, 414, 422, 423, 425, 428, 440, 441, 445, 446, 447, 448, 449, 451, 457, 462, 464, 465, 467, 470, 472, 486, 487, 488, 489, 494, 495, 496, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 512, 520, 540, 546, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 579, 580, 583, 584, 586, 587, 589, 591, 592, 599, 600, 604, 625, 626, 627, 628, 630, 631, 638, 639, 642, 643, 644, 650, 654, 655, 658, 659, 660, 661, 662, 663, 669, 671, 673, 695, 697, 703, 712, 713, 728, 735, 738, 752, 783, 802, 820, 822, 823, 835, 839, 840, 842, 850, 864, 870, 872, 873, 879, 880, 882, 884, 885, 886, 887, 888, 889, 890, 893, 901, 902, 903, 904, 905, 907, 908, 909, 910, 916, 917, 919, 920, 952, 962, 963, 964, 965, 968, 974, 977, 997, 1000, 1002, 1012, 1028, 1030, 1031, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "int64": [4, 13, 14, 55, 72, 169, 170, 278, 311, 322, 360, 393, 415, 425, 440, 446, 448, 494, 586, 638, 712, 713, 835, 864, 917, 973, 1035, 1038, 1040, 1042, 1043, 1044], "cannot": [4, 13, 41, 57, 76, 83, 96, 101, 120, 169, 170, 183, 199, 217, 235, 305, 338, 346, 368, 378, 380, 385, 391, 393, 394, 407, 408, 409, 411, 412, 414, 415, 417, 463, 519, 536, 537, 538, 541, 545, 608, 611, 612, 613, 615, 617, 618, 620, 621, 623, 649, 653, 680, 690, 709, 715, 775, 799, 800, 846, 847, 849, 850, 851, 859, 860, 869, 870, 881, 917, 919, 920, 976, 977, 981, 983, 984, 988, 993, 997, 1002, 1003, 1007, 1011, 1016, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "train": [4, 5, 6, 7, 8, 10, 11, 13, 17, 25, 27, 28, 31, 32, 33, 34, 55, 57, 59, 65, 66, 71, 72, 76, 86, 87, 91, 93, 96, 99, 100, 101, 110, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 129, 132, 133, 134, 138, 145, 151, 152, 153, 156, 157, 158, 159, 160, 166, 168, 169, 170, 171, 172, 175, 182, 183, 185, 187, 188, 190, 191, 192, 194, 195, 198, 199, 200, 201, 202, 206, 207, 208, 211, 213, 214, 217, 228, 231, 233, 237, 247, 249, 253, 254, 255, 256, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 279, 281, 283, 286, 289, 290, 291, 292, 294, 296, 299, 300, 301, 305, 307, 309, 310, 315, 318, 322, 324, 325, 326, 329, 330, 331, 334, 335, 337, 345, 346, 353, 355, 358, 359, 361, 362, 366, 367, 368, 371, 374, 376, 381, 384, 391, 392, 393, 401, 403, 405, 407, 408, 409, 410, 412, 414, 415, 416, 417, 419, 435, 438, 439, 441, 442, 445, 447, 449, 450, 451, 452, 457, 463, 467, 468, 470, 471, 472, 473, 474, 480, 481, 482, 483, 485, 486, 487, 491, 494, 495, 496, 498, 502, 522, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 608, 609, 625, 626, 628, 629, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 682, 685, 686, 687, 689, 690, 694, 701, 738, 785, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 859, 864, 865, 868, 869, 872, 873, 877, 878, 879, 880, 884, 885, 887, 888, 889, 890, 891, 892, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 913, 961, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 991, 992, 993, 994, 995, 997, 1001, 1002, 1003, 1006, 1007, 1008, 1009, 1011, 1013, 1016, 1017, 1023, 1024, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "learn": [4, 6, 7, 8, 9, 10, 13, 15, 17, 18, 21, 26, 27, 28, 32, 33, 35, 37, 38, 49, 50, 52, 53, 54, 56, 57, 68, 69, 71, 72, 76, 82, 83, 95, 101, 105, 107, 110, 112, 115, 116, 117, 118, 119, 120, 121, 122, 127, 129, 130, 131, 132, 138, 139, 140, 145, 147, 148, 151, 154, 156, 160, 163, 164, 167, 171, 172, 173, 174, 176, 180, 185, 187, 188, 194, 199, 200, 201, 203, 206, 213, 217, 223, 224, 225, 226, 227, 228, 230, 232, 233, 236, 237, 238, 239, 240, 241, 242, 253, 257, 259, 260, 263, 265, 266, 268, 269, 272, 274, 276, 278, 281, 283, 285, 287, 288, 289, 290, 291, 292, 296, 298, 301, 302, 303, 305, 306, 310, 311, 312, 314, 323, 324, 328, 330, 331, 337, 342, 344, 346, 351, 352, 353, 356, 357, 358, 359, 362, 367, 371, 372, 373, 374, 376, 378, 382, 385, 386, 387, 388, 392, 393, 396, 398, 401, 402, 403, 404, 405, 407, 408, 409, 411, 413, 415, 416, 417, 421, 422, 424, 425, 426, 427, 429, 430, 431, 435, 436, 437, 440, 441, 444, 445, 447, 448, 455, 462, 463, 465, 466, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 506, 507, 508, 510, 512, 513, 514, 515, 516, 518, 519, 520, 522, 523, 528, 529, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 547, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 562, 563, 564, 565, 569, 574, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 597, 600, 601, 608, 609, 612, 617, 620, 624, 626, 628, 630, 632, 636, 638, 639, 641, 642, 643, 644, 646, 650, 655, 656, 666, 667, 674, 675, 676, 678, 686, 687, 688, 689, 690, 694, 698, 699, 700, 706, 711, 715, 716, 719, 720, 721, 723, 729, 732, 738, 739, 740, 745, 753, 775, 776, 777, 782, 785, 792, 794, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 833, 834, 835, 836, 837, 838, 841, 843, 848, 855, 856, 857, 858, 859, 860, 862, 864, 866, 869, 871, 872, 873, 874, 877, 878, 879, 880, 883, 891, 892, 894, 895, 896, 897, 899, 900, 901, 904, 907, 908, 909, 910, 922, 930, 931, 953, 954, 955, 976, 977, 979, 980, 981, 983, 985, 986, 987, 988, 989, 990, 991, 993, 994, 995, 997, 998, 1001, 1002, 1003, 1004, 1005, 1008, 1010, 1014, 1016, 1017, 1023, 1024, 1025, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "simplifi": [4, 72, 187, 338, 378, 380, 384, 407, 410, 513, 560, 858, 859, 987, 989, 997], "represent": [4, 12, 18, 21, 27, 54, 72, 73, 96, 99, 117, 119, 120, 128, 129, 130, 132, 135, 145, 156, 169, 171, 175, 180, 183, 220, 221, 222, 229, 231, 235, 239, 240, 241, 242, 250, 258, 260, 261, 267, 272, 278, 293, 302, 311, 317, 319, 320, 322, 327, 352, 353, 360, 362, 371, 373, 382, 393, 401, 407, 408, 412, 413, 414, 421, 461, 529, 533, 535, 538, 540, 546, 564, 586, 588, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 628, 641, 644, 650, 656, 657, 658, 660, 664, 665, 666, 674, 675, 676, 766, 794, 795, 802, 818, 855, 868, 872, 873, 877, 879, 892, 899, 911, 913, 916, 932, 953, 979, 984, 986, 988, 990, 991, 992, 994, 997, 1002, 1007, 1012, 1013, 1015, 1019, 1021, 1027, 1028, 1031, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "collaps": [4, 170, 238, 305, 338, 391], "those": [4, 7, 12, 18, 20, 56, 61, 72, 113, 125, 148, 160, 168, 170, 171, 172, 199, 201, 203, 217, 225, 232, 235, 237, 238, 251, 254, 260, 263, 266, 278, 300, 305, 310, 335, 338, 351, 352, 353, 366, 367, 373, 379, 381, 383, 384, 385, 386, 391, 393, 394, 397, 404, 405, 407, 411, 412, 414, 415, 417, 446, 448, 459, 462, 466, 492, 493, 494, 501, 555, 556, 562, 563, 567, 568, 579, 690, 695, 710, 716, 733, 796, 799, 800, 808, 810, 817, 841, 842, 843, 845, 847, 848, 849, 850, 851, 899, 900, 901, 904, 907, 908, 909, 910, 947, 976, 979, 983, 986, 987, 989, 990, 991, 994, 997, 1003, 1005, 1006, 1011, 1012, 1021, 1027, 1030, 1033, 1034, 1035, 1040, 1041, 1042, 1043, 1044], "astyp": [4, 14, 38, 42, 45, 46, 54, 61, 63, 67, 82, 102, 122, 124, 140, 168, 170, 189, 190, 217, 223, 234, 238, 271, 283, 312, 415, 977, 983, 1034], "object": [4, 11, 14, 15, 20, 27, 45, 51, 63, 67, 71, 72, 99, 110, 132, 138, 146, 147, 156, 166, 170, 183, 195, 199, 215, 217, 227, 235, 239, 241, 242, 243, 258, 267, 269, 270, 272, 296, 311, 318, 319, 321, 322, 325, 352, 353, 362, 372, 373, 374, 379, 380, 382, 384, 385, 386, 388, 392, 393, 394, 398, 401, 407, 408, 409, 412, 415, 416, 417, 421, 423, 428, 430, 432, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 455, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 476, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 681, 685, 686, 687, 688, 689, 690, 691, 692, 695, 696, 697, 698, 699, 700, 709, 716, 729, 730, 739, 755, 756, 778, 779, 786, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 882, 891, 892, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 914, 919, 920, 921, 922, 923, 926, 930, 932, 942, 943, 944, 945, 946, 947, 948, 950, 952, 953, 955, 972, 973, 975, 983, 984, 985, 986, 990, 993, 994, 997, 1000, 1001, 1002, 1006, 1007, 1008, 1012, 1013, 1015, 1016, 1019, 1021, 1023, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044], "replac": [4, 26, 81, 100, 112, 151, 158, 163, 170, 185, 200, 263, 283, 307, 312, 317, 340, 377, 379, 381, 383, 385, 388, 393, 401, 408, 411, 414, 415, 439, 443, 462, 501, 513, 553, 554, 561, 580, 586, 587, 588, 589, 605, 606, 625, 628, 632, 637, 639, 725, 782, 802, 808, 810, 818, 858, 859, 862, 882, 895, 902, 956, 958, 961, 976, 977, 979, 983, 987, 997, 1002, 1003, 1006, 1007, 1027, 1028, 1029, 1031, 1032, 1033, 1034, 1035, 1037, 1038, 1039, 1040, 1042, 1043, 1044], "to_replac": [4, 170], "valu": [4, 5, 7, 11, 12, 13, 14, 17, 18, 20, 21, 22, 27, 28, 33, 38, 41, 43, 45, 47, 54, 56, 61, 62, 63, 67, 72, 74, 76, 79, 81, 83, 96, 99, 106, 110, 112, 114, 116, 117, 118, 119, 120, 122, 125, 126, 128, 129, 131, 132, 143, 144, 147, 151, 154, 155, 157, 159, 165, 168, 169, 170, 171, 172, 175, 178, 179, 181, 183, 185, 187, 188, 189, 190, 192, 197, 199, 200, 201, 203, 205, 214, 217, 219, 220, 222, 223, 226, 228, 229, 230, 231, 232, 233, 234, 238, 241, 242, 245, 251, 254, 256, 258, 260, 261, 263, 265, 266, 267, 269, 271, 272, 273, 275, 283, 286, 296, 299, 300, 302, 305, 306, 307, 308, 309, 310, 311, 312, 317, 328, 338, 342, 343, 346, 351, 352, 353, 356, 362, 366, 367, 368, 371, 372, 373, 374, 376, 380, 381, 382, 384, 385, 386, 388, 391, 392, 393, 396, 397, 398, 404, 405, 406, 407, 408, 409, 410, 411, 415, 416, 417, 418, 419, 420, 421, 430, 431, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 480, 481, 482, 483, 485, 488, 489, 491, 494, 495, 496, 499, 506, 507, 509, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 522, 523, 524, 525, 526, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 693, 695, 696, 697, 698, 699, 700, 702, 703, 705, 706, 707, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 732, 733, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 766, 768, 771, 775, 776, 777, 778, 779, 780, 781, 782, 784, 785, 786, 787, 788, 789, 790, 791, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 805, 807, 808, 810, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 887, 888, 889, 890, 891, 892, 894, 895, 896, 897, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 913, 914, 916, 917, 918, 919, 920, 923, 924, 925, 926, 928, 936, 938, 944, 947, 948, 949, 950, 951, 955, 963, 964, 965, 976, 979, 980, 981, 982, 983, 984, 986, 988, 989, 990, 991, 992, 993, 994, 998, 1000, 1001, 1002, 1008, 1009, 1011, 1012, 1017, 1019, 1020, 1021, 1022, 1023, 1024, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "1422": 4, "expect": [4, 5, 10, 13, 25, 38, 45, 54, 87, 93, 101, 112, 115, 117, 119, 122, 125, 129, 145, 151, 157, 166, 167, 171, 173, 185, 190, 199, 200, 201, 203, 207, 217, 232, 235, 238, 239, 246, 247, 250, 251, 267, 283, 310, 346, 351, 352, 362, 366, 367, 379, 381, 383, 384, 385, 386, 387, 388, 391, 392, 393, 394, 396, 398, 403, 405, 407, 408, 409, 411, 414, 415, 416, 430, 462, 463, 465, 466, 467, 480, 481, 482, 494, 521, 530, 534, 536, 539, 550, 552, 553, 554, 555, 556, 558, 560, 561, 562, 563, 564, 565, 566, 568, 570, 583, 584, 586, 587, 589, 593, 595, 604, 609, 625, 630, 631, 633, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 658, 659, 660, 661, 662, 663, 665, 668, 670, 671, 672, 673, 676, 677, 693, 702, 703, 714, 732, 785, 791, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 845, 849, 850, 851, 852, 857, 860, 865, 872, 873, 876, 879, 880, 889, 890, 897, 899, 900, 901, 902, 903, 904, 905, 908, 910, 950, 976, 983, 986, 987, 989, 993, 997, 1001, 1002, 1003, 1008, 1010, 1017, 1020, 1021, 1023, 1027, 1028, 1029, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "balanc": [4, 6, 13, 54, 67, 73, 112, 118, 123, 147, 166, 203, 204, 253, 258, 261, 263, 264, 276, 305, 368, 391, 393, 405, 411, 412, 414, 500, 513, 532, 538, 539, 545, 555, 559, 562, 638, 656, 657, 664, 666, 672, 673, 674, 701, 706, 726, 740, 779, 784, 796, 797, 814, 859, 899, 901, 904, 907, 909, 924, 925, 976, 1002, 1003, 1008, 1017, 1027, 1029, 1032, 1033, 1036, 1037, 1041], "fall": [4, 13, 125, 158, 259, 260, 379, 381, 406, 407, 415, 432, 444, 445, 506, 507, 724, 725, 791, 876, 888, 986, 987, 997, 1012, 1020, 1036], "4496": [4, 13], "4409": [4, 13], "4242": [4, 13], "winter": [4, 13], "4232": [4, 13], "order": [4, 14, 21, 25, 48, 56, 65, 66, 73, 79, 90, 105, 120, 121, 122, 126, 140, 156, 168, 169, 172, 175, 188, 192, 195, 199, 200, 205, 213, 217, 222, 232, 235, 238, 242, 247, 255, 258, 260, 267, 281, 302, 305, 310, 311, 312, 317, 318, 346, 351, 353, 362, 366, 367, 374, 379, 381, 384, 385, 388, 393, 397, 398, 401, 407, 408, 409, 411, 412, 413, 414, 415, 417, 419, 438, 441, 444, 445, 447, 448, 453, 454, 455, 457, 462, 486, 487, 488, 493, 495, 513, 532, 533, 537, 538, 539, 541, 545, 549, 551, 553, 554, 555, 556, 557, 561, 562, 563, 564, 565, 579, 586, 589, 591, 592, 595, 604, 605, 606, 608, 620, 625, 629, 638, 656, 657, 663, 674, 683, 684, 686, 687, 691, 695, 697, 698, 700, 702, 710, 711, 716, 723, 726, 727, 735, 737, 738, 739, 751, 753, 775, 779, 780, 781, 784, 785, 786, 791, 796, 797, 799, 800, 801, 803, 807, 810, 814, 815, 820, 827, 828, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 849, 856, 859, 870, 872, 873, 874, 878, 879, 880, 883, 884, 885, 887, 888, 889, 890, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 914, 919, 920, 925, 936, 951, 956, 977, 983, 984, 987, 988, 990, 991, 997, 1000, 1001, 1002, 1003, 1007, 1016, 1018, 1019, 1021, 1027, 1029, 1030, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "sensit": [4, 45, 56, 81, 82, 115, 125, 170, 201, 202, 203, 228, 305, 338, 367, 368, 394, 409, 414, 450, 460, 690, 710, 711, 785, 879, 982, 983, 984, 986, 987, 991, 993, 1001, 1002, 1012, 1020, 1031], "splitter": [4, 321, 322, 393, 398, 411, 435, 470, 562, 563, 565, 566, 592, 600, 645, 649, 651, 653, 657, 659, 661, 663, 671, 673, 796, 798, 799, 800, 801, 802, 810, 811, 812, 815, 816, 818, 819, 820, 821, 822, 823, 824, 826, 830, 833, 907, 908, 909, 910, 1003, 1007, 1033, 1034, 1035, 1036, 1043, 1044, 1045], "evalu": [4, 5, 6, 10, 11, 18, 25, 33, 37, 39, 43, 44, 50, 56, 60, 64, 65, 69, 72, 73, 99, 112, 118, 119, 120, 122, 123, 125, 143, 144, 154, 166, 172, 175, 179, 188, 201, 206, 217, 227, 228, 243, 253, 254, 257, 258, 259, 260, 263, 265, 266, 267, 269, 271, 272, 274, 276, 281, 290, 292, 296, 305, 310, 312, 317, 321, 322, 329, 338, 342, 351, 362, 372, 374, 381, 385, 393, 396, 406, 408, 415, 416, 417, 445, 447, 462, 464, 486, 489, 490, 491, 494, 507, 518, 534, 549, 559, 560, 561, 565, 566, 589, 592, 600, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 625, 629, 630, 631, 632, 645, 651, 657, 671, 673, 695, 697, 699, 700, 701, 702, 703, 709, 711, 712, 713, 715, 716, 723, 724, 733, 734, 739, 751, 752, 753, 754, 783, 792, 794, 795, 796, 799, 800, 802, 810, 818, 820, 821, 822, 823, 824, 825, 826, 830, 836, 839, 840, 845, 857, 859, 860, 866, 869, 872, 873, 877, 878, 879, 884, 885, 887, 888, 889, 890, 901, 904, 907, 922, 930, 961, 979, 983, 985, 989, 990, 993, 994, 995, 998, 1001, 1003, 1006, 1008, 1011, 1012, 1013, 1016, 1017, 1019, 1022, 1023, 1027, 1028, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1040], "realist": [4, 8, 262, 269, 270, 335, 374, 987], "gap": [4, 13, 351, 374, 411, 469, 470, 476, 586, 644, 645, 650, 651, 658, 659, 660, 661, 679, 682, 817, 907, 908, 909, 910, 983, 984, 1035, 1039, 1041], "between": [4, 5, 8, 9, 11, 12, 13, 21, 35, 38, 39, 40, 41, 43, 44, 54, 61, 62, 67, 86, 91, 99, 101, 104, 112, 115, 118, 122, 123, 125, 143, 151, 156, 157, 159, 166, 168, 169, 170, 171, 178, 183, 185, 190, 194, 195, 199, 200, 201, 203, 204, 207, 217, 220, 228, 233, 235, 238, 253, 256, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 272, 276, 278, 281, 285, 289, 290, 292, 293, 305, 310, 312, 318, 328, 338, 342, 345, 346, 351, 352, 353, 360, 362, 366, 367, 374, 379, 381, 388, 391, 392, 393, 394, 398, 401, 404, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 428, 438, 439, 442, 443, 444, 445, 448, 450, 451, 452, 454, 455, 456, 461, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 489, 491, 492, 493, 494, 495, 496, 500, 512, 513, 519, 522, 525, 532, 534, 535, 536, 537, 538, 539, 544, 545, 547, 551, 552, 557, 558, 560, 561, 562, 563, 582, 586, 588, 589, 590, 591, 592, 593, 594, 596, 597, 598, 600, 602, 603, 604, 605, 606, 607, 609, 618, 625, 630, 631, 632, 637, 640, 643, 644, 645, 650, 651, 654, 655, 656, 657, 658, 659, 660, 661, 664, 665, 666, 668, 674, 676, 677, 679, 682, 686, 688, 690, 692, 693, 694, 697, 699, 701, 702, 703, 705, 707, 708, 712, 713, 714, 715, 717, 721, 722, 723, 726, 727, 728, 731, 733, 734, 740, 749, 751, 752, 753, 754, 755, 756, 757, 758, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 780, 781, 783, 784, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 801, 805, 813, 814, 815, 816, 817, 824, 825, 827, 829, 841, 842, 843, 845, 846, 847, 849, 850, 851, 852, 853, 856, 857, 863, 866, 867, 869, 870, 872, 873, 876, 877, 878, 880, 885, 888, 889, 893, 899, 900, 904, 907, 908, 909, 910, 912, 933, 944, 945, 956, 976, 979, 981, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 997, 998, 999, 1001, 1002, 1003, 1004, 1007, 1008, 1019, 1020, 1027, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "side": [4, 17, 28, 60, 125, 192, 203, 217, 222, 231, 305, 342, 351, 362, 374, 391, 405, 408, 411, 412, 415, 424, 430, 513, 983, 984, 987, 989, 1002, 1036], "split": [4, 5, 6, 11, 13, 15, 18, 25, 27, 32, 33, 71, 101, 112, 117, 118, 119, 121, 123, 124, 125, 126, 127, 128, 138, 144, 148, 168, 169, 172, 183, 194, 195, 199, 202, 207, 217, 229, 235, 238, 246, 247, 254, 255, 258, 260, 265, 267, 270, 278, 286, 292, 299, 301, 306, 307, 312, 319, 321, 328, 338, 351, 353, 360, 374, 379, 386, 392, 393, 397, 398, 405, 407, 412, 414, 415, 416, 435, 440, 441, 470, 471, 477, 478, 495, 529, 535, 537, 540, 544, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 586, 587, 589, 592, 600, 645, 649, 651, 653, 659, 661, 663, 671, 673, 693, 702, 703, 715, 728, 734, 754, 792, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 830, 833, 839, 840, 856, 857, 880, 884, 885, 887, 888, 889, 890, 907, 908, 909, 910, 958, 976, 979, 983, 984, 990, 993, 994, 995, 997, 1001, 1003, 1007, 1012, 1016, 1017, 1019, 1020, 1021, 1023, 1027, 1030, 1032, 1033, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "limit": [4, 8, 18, 38, 43, 58, 67, 83, 112, 119, 120, 126, 132, 163, 169, 170, 171, 178, 199, 200, 216, 232, 267, 307, 311, 318, 346, 353, 362, 367, 380, 381, 384, 391, 393, 394, 405, 407, 410, 412, 416, 444, 461, 466, 557, 558, 559, 560, 630, 648, 656, 657, 677, 680, 681, 686, 775, 817, 847, 849, 850, 851, 872, 873, 897, 901, 902, 903, 904, 905, 955, 976, 983, 984, 986, 987, 994, 995, 997, 1007, 1012, 1023, 1035, 1037, 1040, 1041, 1044], "cv": [4, 12, 13, 25, 26, 27, 55, 72, 73, 74, 75, 79, 103, 118, 122, 124, 138, 147, 163, 164, 169, 188, 198, 201, 256, 258, 259, 260, 261, 262, 263, 265, 266, 270, 274, 278, 311, 320, 322, 338, 346, 392, 393, 398, 405, 411, 414, 416, 435, 470, 565, 566, 592, 600, 645, 649, 651, 653, 657, 659, 661, 663, 671, 673, 796, 798, 799, 800, 801, 802, 810, 811, 812, 815, 816, 818, 819, 820, 821, 822, 823, 824, 826, 830, 833, 880, 907, 908, 976, 979, 982, 983, 987, 997, 1007, 1016, 1017, 1021, 1029, 1033, 1034, 1035, 1036, 1037, 1039, 1041, 1043, 1044, 1045], "fold": [4, 68, 75, 79, 118, 121, 124, 138, 147, 169, 188, 247, 255, 256, 258, 260, 261, 263, 270, 312, 328, 346, 362, 374, 379, 382, 383, 392, 393, 398, 407, 416, 435, 470, 491, 534, 565, 566, 592, 600, 645, 649, 651, 653, 657, 659, 661, 663, 671, 673, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 830, 833, 880, 901, 904, 976, 983, 987, 997, 1002, 1016, 1027, 1029, 1031, 1032, 1033, 1035, 1036, 1038, 1039, 1044], "1000": [4, 7, 8, 15, 27, 32, 38, 51, 73, 76, 86, 105, 115, 117, 119, 123, 124, 125, 129, 134, 139, 143, 157, 175, 185, 191, 202, 218, 222, 231, 232, 234, 245, 249, 258, 260, 266, 269, 271, 288, 290, 306, 309, 316, 317, 319, 321, 322, 339, 340, 347, 351, 352, 384, 385, 392, 405, 415, 435, 471, 477, 478, 529, 530, 535, 537, 540, 541, 543, 544, 546, 551, 562, 630, 644, 645, 649, 650, 651, 653, 658, 659, 660, 661, 664, 665, 666, 670, 674, 675, 676, 685, 690, 696, 699, 761, 876, 888, 894, 899, 900, 976, 980, 1002, 1008, 1016, 1019, 1034, 1036], "datapoint": [4, 43, 53, 57, 155, 158, 182, 233, 234, 238, 255, 260, 281, 344, 417, 444, 500, 555, 556, 557, 558, 562, 563, 564, 609, 907, 908, 909, 910, 980], "should": [4, 5, 6, 8, 9, 13, 15, 18, 26, 28, 32, 38, 54, 110, 112, 115, 118, 122, 125, 148, 163, 169, 175, 178, 179, 183, 199, 201, 217, 228, 233, 234, 235, 238, 260, 263, 266, 267, 269, 278, 283, 306, 307, 312, 327, 338, 346, 352, 362, 366, 367, 368, 374, 377, 378, 379, 381, 383, 384, 386, 387, 388, 392, 393, 397, 398, 401, 403, 405, 407, 409, 411, 412, 414, 415, 416, 417, 418, 419, 421, 424, 430, 435, 438, 440, 441, 442, 443, 445, 447, 448, 450, 452, 455, 456, 457, 460, 461, 462, 463, 465, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 485, 494, 501, 506, 507, 514, 519, 521, 522, 525, 530, 531, 532, 534, 536, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 583, 584, 586, 587, 588, 589, 591, 592, 595, 600, 605, 606, 608, 609, 618, 625, 626, 627, 629, 630, 631, 633, 636, 637, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 682, 685, 687, 688, 689, 690, 691, 692, 693, 694, 699, 707, 724, 725, 739, 763, 768, 771, 775, 776, 777, 778, 779, 782, 785, 786, 789, 797, 798, 803, 804, 805, 806, 813, 814, 815, 816, 821, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 856, 857, 859, 862, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 878, 879, 880, 882, 886, 889, 890, 891, 892, 893, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 919, 923, 925, 928, 936, 944, 948, 953, 956, 958, 961, 962, 963, 964, 965, 966, 967, 968, 976, 977, 981, 982, 983, 984, 987, 988, 990, 992, 993, 994, 997, 1000, 1001, 1002, 1003, 1007, 1011, 1017, 1021, 1024, 1027, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "enough": [4, 13, 38, 45, 63, 118, 121, 151, 163, 170, 171, 188, 199, 233, 236, 238, 309, 351, 353, 362, 377, 379, 383, 394, 405, 406, 407, 409, 411, 414, 565, 566, 587, 796, 799, 800, 802, 810, 823, 936, 976, 981, 984, 986, 993, 997, 1002, 1006, 1011, 1033, 1043, 1044], "quantifi": [4, 38, 50, 79, 156, 217, 267, 381, 393, 402, 406, 571, 862, 982, 995, 997, 1023], "repres": [4, 8, 10, 12, 13, 15, 21, 27, 33, 35, 45, 49, 50, 51, 54, 92, 96, 98, 104, 105, 119, 120, 128, 169, 178, 186, 191, 201, 203, 204, 208, 222, 224, 233, 238, 248, 254, 257, 260, 263, 267, 288, 307, 342, 351, 353, 360, 368, 371, 374, 376, 381, 391, 392, 393, 394, 401, 405, 407, 411, 412, 413, 414, 415, 416, 436, 440, 444, 450, 461, 468, 469, 470, 471, 472, 473, 474, 486, 488, 489, 490, 492, 494, 496, 498, 499, 500, 502, 503, 508, 525, 532, 534, 536, 538, 539, 545, 553, 561, 579, 586, 589, 627, 630, 632, 638, 674, 676, 695, 697, 699, 727, 740, 786, 796, 798, 809, 810, 813, 816, 822, 824, 825, 828, 829, 835, 841, 842, 843, 845, 846, 847, 849, 850, 851, 856, 857, 866, 872, 873, 896, 899, 900, 919, 920, 940, 945, 977, 983, 984, 985, 986, 987, 988, 989, 990, 991, 993, 995, 997, 998, 1000, 1001, 1003, 1012, 1017, 1018, 1020, 1033, 1035, 1038, 1039, 1042], "bit": [4, 13, 49, 54, 79, 99, 197, 201, 278, 305, 338, 352, 362, 366, 374, 377, 397, 414, 415, 580, 587, 656, 829, 919, 920, 984, 988, 1005, 1014, 1021, 1027, 1030, 1033, 1035, 1036, 1039, 1040, 1041, 1044, 1045], "less": [4, 5, 8, 53, 54, 61, 93, 96, 99, 106, 112, 119, 125, 126, 151, 158, 169, 181, 183, 199, 201, 203, 234, 238, 246, 248, 260, 261, 269, 271, 274, 306, 309, 310, 311, 317, 319, 342, 351, 352, 362, 366, 368, 374, 379, 381, 391, 393, 407, 411, 412, 414, 415, 419, 437, 439, 441, 443, 446, 448, 450, 455, 458, 460, 461, 480, 481, 482, 494, 513, 529, 533, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 588, 594, 617, 625, 632, 645, 659, 674, 676, 690, 699, 719, 720, 721, 722, 733, 749, 761, 776, 777, 782, 792, 794, 795, 798, 799, 800, 806, 823, 834, 835, 836, 838, 839, 840, 841, 842, 843, 845, 847, 848, 849, 850, 851, 862, 874, 876, 877, 879, 882, 888, 889, 899, 900, 907, 908, 909, 910, 925, 939, 976, 977, 979, 980, 981, 984, 986, 987, 990, 992, 997, 1001, 1002, 1003, 1006, 1019, 1021, 1027, 1028, 1030, 1031, 1033, 1034, 1035, 1037, 1041, 1042, 1044], "than": [4, 5, 7, 11, 12, 14, 20, 28, 31, 32, 41, 45, 48, 54, 56, 73, 76, 81, 83, 87, 93, 96, 99, 101, 103, 112, 114, 115, 117, 118, 119, 121, 122, 125, 148, 151, 157, 160, 163, 169, 170, 171, 175, 178, 183, 185, 188, 199, 201, 205, 215, 216, 217, 224, 228, 234, 235, 236, 238, 246, 257, 258, 260, 261, 262, 263, 266, 269, 278, 281, 283, 289, 290, 302, 305, 309, 310, 311, 312, 317, 319, 321, 326, 342, 351, 352, 353, 362, 366, 367, 368, 373, 374, 375, 377, 378, 379, 381, 384, 385, 387, 393, 394, 401, 403, 404, 405, 406, 407, 409, 410, 411, 412, 414, 415, 416, 417, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 450, 452, 455, 458, 461, 462, 465, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 491, 492, 494, 507, 512, 513, 521, 529, 532, 533, 534, 535, 536, 538, 539, 540, 542, 545, 546, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 571, 579, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 608, 609, 625, 626, 628, 632, 638, 640, 641, 642, 643, 644, 645, 650, 651, 653, 656, 657, 658, 659, 660, 661, 664, 665, 666, 669, 670, 672, 674, 675, 676, 677, 680, 685, 690, 692, 694, 702, 703, 710, 718, 719, 720, 721, 732, 733, 736, 761, 776, 777, 778, 780, 782, 792, 794, 795, 796, 799, 800, 806, 810, 815, 817, 820, 821, 822, 823, 824, 827, 829, 830, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 845, 846, 847, 848, 849, 850, 851, 853, 856, 857, 862, 872, 873, 874, 876, 877, 879, 882, 888, 889, 893, 896, 899, 900, 901, 904, 905, 907, 908, 909, 910, 911, 925, 936, 938, 939, 944, 950, 956, 958, 961, 976, 977, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 993, 994, 995, 997, 1001, 1002, 1003, 1006, 1007, 1010, 1012, 1016, 1019, 1020, 1021, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "half": [4, 25, 99, 233, 237, 258, 260, 272, 374, 375, 412, 461, 520, 560, 591, 595, 600, 767, 858, 866, 987, 990, 1003], "contigu": [4, 22, 381, 391, 404, 411, 415, 441, 445, 447, 457, 644, 645, 650, 651, 658, 659, 660, 661, 679, 682, 778, 815, 839, 840, 899, 901, 902, 903, 904, 905, 1002, 1030, 1037, 1041], "model_select": [4, 5, 6, 7, 10, 13, 25, 26, 28, 32, 33, 55, 72, 73, 74, 75, 76, 79, 87, 101, 103, 112, 117, 118, 119, 122, 123, 124, 125, 126, 127, 128, 131, 132, 138, 144, 145, 147, 151, 163, 164, 166, 168, 169, 171, 172, 175, 183, 194, 199, 201, 206, 207, 214, 215, 217, 229, 234, 238, 240, 241, 242, 247, 250, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 281, 285, 286, 287, 291, 292, 299, 301, 302, 307, 309, 310, 311, 312, 315, 316, 317, 320, 322, 328, 329, 338, 341, 346, 356, 360, 362, 379, 381, 384, 392, 393, 398, 403, 408, 411, 414, 435, 436, 556, 558, 565, 566, 577, 657, 695, 696, 698, 700, 739, 827, 830, 848, 856, 857, 859, 907, 908, 909, 910, 955, 976, 977, 982, 987, 989, 990, 995, 997, 1002, 1007, 1008, 1016, 1017, 1021, 1024, 1031, 1033, 1034], "timeseriessplit": [4, 13, 183, 255, 411, 1033, 1034, 1039], "ts_cv": [4, 13], "n_split": [4, 13, 118, 124, 163, 164, 169, 247, 255, 260, 262, 265, 270, 278, 322, 328, 338, 346, 362, 411, 797, 798, 799, 800, 801, 803, 804, 805, 806, 809, 811, 812, 813, 814, 815, 816, 817, 822, 1016, 1033, 1035], "5": [4, 7, 8, 10, 11, 12, 13, 14, 15, 17, 18, 20, 22, 25, 26, 27, 32, 33, 35, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 65, 66, 67, 68, 71, 72, 74, 75, 76, 80, 81, 82, 83, 84, 86, 87, 93, 96, 97, 98, 99, 100, 102, 103, 105, 110, 114, 115, 116, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 138, 140, 143, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 168, 169, 170, 171, 172, 173, 175, 179, 180, 181, 182, 183, 185, 187, 188, 189, 190, 191, 193, 194, 196, 197, 199, 200, 201, 202, 205, 207, 210, 211, 212, 213, 214, 215, 217, 221, 222, 223, 225, 228, 231, 232, 233, 234, 236, 237, 238, 239, 240, 242, 245, 246, 247, 248, 249, 250, 251, 255, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 269, 271, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 292, 293, 295, 296, 299, 300, 301, 302, 305, 307, 308, 309, 310, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 328, 329, 330, 336, 337, 338, 339, 340, 342, 343, 345, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360, 361, 362, 374, 376, 377, 379, 381, 384, 385, 391, 392, 393, 397, 399, 400, 405, 407, 408, 411, 412, 414, 415, 416, 417, 418, 419, 422, 435, 436, 437, 438, 440, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 459, 460, 461, 462, 464, 467, 470, 476, 480, 481, 482, 483, 488, 491, 492, 494, 496, 502, 512, 513, 514, 515, 516, 517, 519, 521, 522, 524, 526, 529, 531, 532, 534, 535, 536, 537, 538, 541, 542, 543, 544, 545, 550, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 580, 590, 591, 592, 595, 600, 602, 603, 604, 605, 606, 608, 611, 612, 613, 614, 617, 618, 620, 621, 623, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 639, 641, 642, 643, 644, 645, 649, 650, 651, 653, 654, 655, 657, 658, 659, 660, 661, 663, 664, 665, 666, 668, 670, 674, 675, 676, 678, 679, 682, 686, 687, 689, 690, 691, 693, 694, 697, 701, 703, 705, 707, 710, 711, 718, 719, 720, 721, 723, 724, 725, 727, 729, 732, 735, 736, 737, 738, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 753, 766, 767, 778, 779, 781, 782, 784, 785, 786, 787, 788, 791, 793, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 828, 829, 830, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 856, 857, 858, 859, 864, 865, 866, 868, 869, 871, 872, 873, 874, 875, 876, 878, 879, 880, 882, 884, 885, 886, 887, 888, 889, 893, 899, 900, 901, 902, 903, 904, 905, 907, 909, 915, 916, 919, 920, 924, 925, 934, 935, 936, 937, 938, 940, 941, 942, 950, 951, 955, 956, 958, 959, 962, 963, 964, 965, 966, 967, 968, 976, 977, 979, 982, 983, 985, 986, 987, 988, 989, 990, 991, 993, 994, 995, 997, 999, 1001, 1002, 1009, 1010, 1012, 1016, 1017, 1019, 1020, 1021, 1023, 1025, 1028, 1029, 1030, 1032, 1034, 1035, 1037, 1041, 1042, 1043], "48": [4, 13, 46, 102, 156, 238, 242, 243, 311, 376, 385, 407, 508, 595, 697, 743, 823, 834, 976, 989, 997, 1008], "max_train_s": [4, 13, 411, 817, 1034], "10000": [4, 11, 13, 31, 44, 64, 73, 74, 126, 138, 185, 192, 199, 207, 215, 232, 234, 273, 317, 335, 337, 362, 368, 414, 415, 559, 560, 642, 677, 876, 905, 999, 1017, 1021], "test_siz": [4, 5, 6, 10, 13, 25, 26, 28, 32, 33, 72, 117, 123, 124, 126, 127, 131, 168, 175, 183, 194, 199, 206, 207, 214, 215, 257, 258, 262, 267, 269, 273, 281, 291, 292, 299, 301, 302, 307, 309, 310, 317, 338, 346, 362, 384, 411, 696, 798, 813, 816, 817, 825, 827, 848, 977, 989, 990, 1016, 1017, 1027, 1028, 1033, 1034, 1039], "manual": [4, 47, 56, 169, 170, 172, 200, 210, 262, 283, 328, 336, 351, 353, 366, 367, 374, 379, 383, 384, 391, 392, 397, 407, 411, 412, 413, 435, 447, 565, 849, 872, 878, 976, 981, 982, 983, 986, 987, 990, 997, 1007, 1012, 1013, 1021, 1035, 1037, 1043], "inspect": [4, 9, 31, 32, 35, 57, 62, 114, 119, 126, 128, 129, 133, 145, 151, 156, 157, 169, 170, 171, 172, 173, 182, 191, 208, 213, 239, 260, 263, 272, 286, 291, 294, 310, 315, 316, 317, 318, 320, 322, 334, 335, 336, 337, 339, 340, 342, 351, 357, 367, 381, 393, 407, 408, 414, 415, 462, 551, 552, 555, 556, 557, 558, 562, 563, 564, 828, 859, 860, 907, 908, 909, 910, 975, 987, 988, 991, 994, 995, 1002, 1006, 1008, 1021, 1023, 1030], "variou": [4, 12, 37, 38, 40, 42, 56, 57, 59, 61, 62, 63, 69, 82, 86, 90, 99, 146, 166, 169, 177, 207, 209, 218, 219, 220, 221, 222, 226, 232, 278, 283, 300, 309, 316, 325, 326, 351, 353, 360, 362, 366, 373, 374, 375, 376, 379, 381, 384, 392, 394, 405, 406, 407, 409, 435, 439, 470, 500, 512, 513, 523, 555, 556, 557, 558, 559, 560, 562, 563, 565, 566, 567, 568, 592, 600, 645, 649, 651, 653, 656, 659, 661, 663, 664, 666, 671, 673, 674, 689, 690, 697, 796, 799, 800, 802, 810, 818, 819, 820, 821, 822, 823, 824, 825, 826, 859, 899, 900, 976, 977, 984, 987, 990, 994, 997, 1001, 1003, 1006, 1008, 1010, 1011, 1020, 1021, 1027, 1030, 1031, 1044], "check": [4, 5, 8, 18, 47, 54, 57, 100, 110, 118, 132, 151, 166, 168, 170, 171, 185, 187, 188, 199, 221, 235, 246, 253, 269, 276, 278, 318, 327, 360, 366, 367, 377, 378, 379, 380, 381, 382, 383, 385, 386, 388, 389, 391, 393, 397, 398, 401, 406, 408, 421, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 462, 463, 467, 468, 469, 471, 472, 473, 474, 480, 481, 482, 483, 489, 500, 506, 507, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 549, 550, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 579, 580, 581, 586, 587, 588, 589, 590, 593, 594, 595, 596, 597, 598, 601, 608, 609, 625, 626, 627, 628, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 672, 674, 675, 676, 677, 678, 679, 685, 686, 687, 688, 689, 690, 691, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 809, 810, 811, 812, 813, 814, 815, 816, 817, 823, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 891, 892, 894, 895, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 919, 920, 921, 930, 931, 942, 943, 944, 948, 949, 971, 972, 973, 975, 982, 983, 984, 987, 1002, 1003, 1007, 1008, 1011, 1023, 1027, 1028, 1030, 1034, 1038, 1039, 1040, 1041, 1042, 1044, 1045], "all_split": [4, 13], "list": [4, 8, 10, 12, 13, 14, 17, 18, 20, 21, 26, 33, 41, 45, 50, 63, 71, 105, 106, 116, 118, 124, 132, 172, 203, 238, 239, 255, 258, 260, 261, 263, 264, 269, 273, 292, 307, 311, 315, 316, 317, 318, 319, 320, 321, 322, 329, 341, 352, 353, 368, 373, 374, 377, 378, 379, 381, 383, 384, 385, 386, 387, 388, 391, 392, 393, 394, 397, 398, 405, 407, 408, 411, 413, 414, 415, 430, 432, 435, 448, 454, 455, 462, 463, 464, 469, 470, 476, 480, 481, 482, 486, 487, 488, 489, 490, 494, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 512, 513, 514, 515, 516, 517, 521, 530, 548, 549, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 586, 587, 589, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 625, 630, 632, 633, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 668, 670, 671, 676, 677, 679, 682, 684, 685, 690, 694, 695, 697, 708, 710, 711, 714, 716, 722, 730, 739, 743, 751, 775, 778, 780, 785, 791, 794, 795, 796, 799, 800, 802, 807, 808, 810, 818, 820, 821, 822, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 856, 857, 858, 859, 860, 861, 863, 867, 870, 872, 873, 878, 880, 896, 900, 902, 905, 907, 908, 909, 910, 913, 915, 919, 920, 921, 925, 927, 928, 929, 931, 939, 940, 942, 953, 958, 961, 971, 976, 977, 983, 987, 989, 990, 991, 994, 995, 998, 1003, 1006, 1007, 1011, 1012, 1016, 1018, 1021, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "train_0": 4, "test_0": 4, "iloc": [4, 13, 132, 169, 170, 217, 260, 286], "12379": 4, "25": [4, 5, 6, 7, 9, 10, 11, 13, 20, 25, 27, 43, 46, 55, 56, 81, 86, 92, 103, 105, 116, 125, 144, 145, 152, 163, 169, 170, 173, 179, 189, 203, 228, 238, 247, 260, 296, 299, 302, 305, 307, 320, 325, 326, 351, 359, 362, 366, 385, 411, 414, 415, 418, 442, 475, 479, 499, 502, 568, 595, 616, 676, 731, 793, 813, 825, 851, 869, 874, 876, 877, 880, 888, 889, 891, 892, 933, 937, 968, 983, 987, 988, 990, 997, 1008, 1017, 1027, 1029, 1035, 1038], "760": 4, "68": [4, 13, 160, 190, 302, 325, 407, 476, 533, 539, 588, 1027], "27": [4, 6, 8, 13, 20, 32, 48, 55, 207, 218, 225, 238, 325, 326, 347, 376, 407, 415, 515, 522, 603, 711, 785, 786, 880, 900, 987, 997, 1008, 1020, 1027, 1029], "9993": [4, 651, 653, 1035], "12380": 4, "32": [4, 5, 13, 52, 132, 136, 168, 171, 237, 261, 276, 319, 326, 373, 377, 384, 393, 404, 414, 415, 443, 562, 563, 580, 587, 632, 674, 878, 880, 919, 920, 952, 995, 997, 1008, 1020, 1027, 1030, 1033, 1035, 1036, 1039, 1040, 1041, 1044], "000": [4, 5, 16, 22, 26, 28, 43, 75, 109, 152, 171, 175, 205, 232, 258, 260, 262, 297, 310, 318, 332, 351, 352, 362, 374, 385, 414, 415, 488, 559, 560, 642, 675, 1001, 1008, 1021, 1038], "77": [4, 6, 45, 148, 175, 269, 326, 373, 376, 532, 705, 733, 772], "0028": 4, "12381": 4, "72": [4, 6, 7, 13, 118, 154, 384, 823], "9995": 4, "12382": 4, "240": [4, 6, 45, 995, 1027], "82": [4, 31, 54, 59, 121, 145, 202, 294, 325, 785, 796, 810, 935, 987, 990, 1017, 1027], "9980": [4, 1035], "12383": 4, "13374": 4, "34": [4, 13, 125, 148, 151, 288, 302, 325, 326, 360, 376, 411, 518, 527, 568, 595, 647, 665, 714, 761, 1017, 1027], "44": [4, 156, 169, 170, 183, 278, 287, 477, 778, 880, 900, 903, 987, 994, 1027], "40": [4, 13, 15, 55, 67, 79, 91, 93, 96, 128, 134, 151, 183, 190, 191, 193, 216, 218, 222, 224, 236, 238, 249, 261, 289, 295, 301, 307, 325, 326, 336, 337, 339, 341, 343, 345, 349, 360, 367, 374, 411, 444, 493, 515, 516, 839, 840, 844, 856, 857, 976, 988, 997, 1027, 1028], "150": [4, 6, 91, 93, 116, 119, 125, 136, 138, 221, 225, 228, 273, 322, 337, 342, 346, 349, 376, 411, 416, 502, 599, 600, 820, 821, 822, 987, 1008, 1016, 1017, 1018], "53": [4, 16, 54, 136, 238, 329, 407, 414, 533, 539, 544, 789, 790], "15": [4, 6, 7, 12, 13, 14, 15, 31, 32, 35, 41, 45, 54, 55, 56, 62, 63, 67, 69, 74, 75, 81, 83, 93, 105, 116, 118, 121, 122, 125, 143, 145, 147, 148, 151, 155, 163, 168, 169, 170, 173, 188, 196, 201, 213, 217, 222, 225, 228, 243, 247, 248, 255, 263, 265, 268, 271, 272, 274, 287, 291, 299, 300, 302, 305, 307, 309, 321, 326, 336, 338, 341, 345, 348, 349, 357, 373, 374, 377, 379, 392, 397, 399, 400, 411, 414, 415, 438, 452, 488, 494, 495, 496, 529, 535, 543, 544, 553, 554, 596, 602, 607, 642, 650, 659, 661, 666, 674, 676, 690, 738, 814, 828, 851, 880, 976, 982, 983, 984, 987, 990, 991, 997, 1002, 1008, 1012, 1017, 1025, 1029, 1039, 1041, 1042], "0013": 4, "13375": 4, "39": [4, 8, 13, 148, 242, 374, 376, 377, 383, 407, 415, 493, 890, 908, 937], "49": [4, 13, 73, 77, 148, 203, 238, 373, 374, 376, 384, 407, 448, 455, 711, 723, 753, 761, 790, 794, 796, 880, 987, 997, 1008, 1030], "13376": 4, "0012": [4, 692], "13377": 4, "36": [4, 6, 7, 13, 14, 98, 148, 157, 169, 217, 238, 341, 376, 385, 414, 415, 553, 554, 568, 732, 756, 987, 1021, 1027], "08": [4, 13, 16, 45, 51, 99, 136, 165, 169, 170, 183, 276, 302, 331, 376, 476, 529, 541, 543, 561, 639, 656, 796, 856, 857, 878, 993, 1008], "910": 4, "42": [4, 5, 6, 13, 20, 21, 25, 26, 27, 28, 32, 45, 47, 57, 79, 98, 103, 112, 119, 120, 122, 123, 125, 126, 128, 132, 144, 145, 164, 169, 171, 172, 175, 178, 188, 191, 193, 194, 201, 205, 206, 207, 213, 214, 216, 220, 221, 222, 228, 233, 234, 235, 238, 241, 259, 261, 264, 283, 289, 290, 291, 299, 305, 306, 307, 308, 310, 312, 315, 317, 319, 328, 336, 338, 351, 352, 362, 367, 381, 384, 385, 393, 398, 407, 411, 414, 415, 418, 435, 442, 476, 486, 490, 512, 513, 514, 515, 516, 517, 521, 522, 525, 527, 529, 535, 542, 543, 544, 555, 556, 563, 564, 565, 566, 568, 603, 604, 605, 606, 607, 675, 692, 693, 694, 757, 789, 790, 794, 798, 823, 825, 839, 840, 844, 848, 851, 891, 892, 894, 895, 896, 906, 909, 910, 922, 935, 952, 956, 990, 997, 1017, 1021, 1024, 1027], "0015": 4, "13378": 4, "35": [4, 6, 7, 9, 11, 56, 72, 114, 134, 169, 170, 178, 187, 228, 278, 310, 325, 326, 542, 646, 647, 654, 700, 704, 705, 724, 738, 753, 779, 786, 832, 976, 983, 987, 993, 994, 997, 1017, 1021, 1027, 1029], "26": [4, 13, 20, 47, 51, 55, 81, 98, 156, 169, 225, 237, 273, 326, 385, 568, 646, 726, 780, 875, 887, 936, 987, 997, 1027, 1030, 1031, 1039], "47": [4, 13, 86, 160, 191, 195, 374, 491, 492, 533, 539], "16": [4, 5, 13, 20, 28, 44, 51, 52, 55, 67, 75, 81, 96, 99, 143, 170, 192, 198, 199, 200, 217, 220, 221, 233, 237, 262, 263, 264, 287, 302, 303, 305, 309, 315, 331, 342, 352, 358, 374, 376, 385, 392, 411, 412, 415, 440, 455, 457, 469, 470, 476, 477, 495, 496, 500, 514, 532, 533, 568, 587, 593, 594, 605, 606, 637, 648, 649, 652, 653, 654, 655, 680, 681, 809, 814, 825, 874, 900, 908, 963, 964, 965, 976, 983, 987, 997, 1002, 1012, 1021, 1025, 1027, 1028, 1032, 1033, 1035, 1036], "9979": 4, "2331": 4, "31": [4, 13, 69, 71, 80, 217, 288, 318, 325, 326, 404, 415, 498, 559, 560, 595, 647, 669, 677, 952, 988, 1027], "060": [4, 748], "0032": 4, "2332": 4, "2333": 4, "78": [4, 13, 54, 175, 217, 269, 307, 326, 491, 492, 651, 653, 662, 663, 796, 802, 823, 987, 1007, 1017], "275": [4, 100, 107, 326, 1008, 1030], "2334": 4, "96": [4, 13, 33, 49, 63, 158, 228, 238, 302, 307, 310, 311, 325, 326, 376, 411, 551, 709, 976, 982, 987, 997, 1027], "515": 4, "64": [4, 13, 33, 49, 54, 59, 90, 96, 156, 169, 221, 232, 233, 237, 258, 269, 287, 292, 366, 367, 376, 377, 385, 397, 412, 419, 493, 496, 500, 597, 598, 644, 656, 686, 687, 688, 689, 691, 900, 990, 1018, 1027, 1029, 1035, 1036, 1039, 1040, 1041, 1044], "2335": 4, "12326": 4, "12327": 4, "12328": [4, 1036], "12329": 4, "46": [4, 13, 54, 199, 238, 313, 362, 385, 591, 592, 714, 903, 908, 997], "12330": [4, 1035], "52": [4, 43, 156, 173, 199, 529, 631, 794, 935, 1027], "last": [4, 21, 45, 59, 90, 125, 169, 178, 199, 200, 207, 212, 228, 251, 263, 271, 272, 310, 317, 319, 328, 356, 366, 374, 377, 381, 383, 384, 387, 393, 397, 407, 408, 415, 419, 436, 440, 445, 457, 462, 466, 513, 531, 557, 558, 559, 560, 581, 582, 585, 591, 592, 595, 608, 680, 681, 683, 684, 695, 696, 698, 699, 700, 705, 779, 794, 795, 799, 800, 815, 839, 840, 844, 859, 860, 864, 872, 878, 914, 939, 962, 976, 982, 983, 984, 986, 988, 991, 1001, 1007, 1012, 1019, 1027, 1033, 1034, 1035, 1036, 1041, 1043, 1044], "train_4": 4, "test_4": 4, "16379": 4, "94": [4, 33, 35, 55, 98, 121, 198, 236, 273, 307, 325, 326, 414, 661, 785, 982, 987, 988, 997, 1021, 1027], "665": 4, "16380": 4, "71": [4, 13, 148, 203, 217, 268, 351, 376, 508, 727, 733, 763, 773, 987, 1019, 1029], "16381": 4, "76": [4, 8, 175, 199, 326, 351, 362, 376, 385, 774, 778, 859, 1019], "16382": 4, "16383": 4, "18": [4, 7, 8, 10, 13, 16, 20, 41, 45, 50, 54, 61, 63, 75, 103, 125, 160, 169, 210, 222, 225, 228, 233, 260, 278, 279, 302, 309, 311, 326, 351, 352, 353, 379, 385, 408, 411, 412, 415, 445, 457, 490, 498, 499, 500, 502, 503, 508, 533, 534, 536, 538, 539, 555, 556, 557, 558, 561, 562, 563, 564, 567, 569, 570, 571, 572, 573, 575, 576, 587, 592, 597, 598, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 644, 647, 656, 657, 669, 712, 716, 728, 731, 732, 738, 740, 757, 767, 794, 795, 817, 832, 855, 856, 857, 863, 869, 877, 878, 889, 899, 900, 907, 908, 909, 910, 911, 935, 936, 976, 985, 987, 997, 1008, 1025, 1027, 1028, 1031, 1032, 1034, 1035, 1037, 1038], "940": [4, 45, 69, 1008], "6331": 4, "28": [4, 8, 67, 125, 148, 169, 215, 225, 262, 269, 276, 301, 311, 313, 325, 326, 376, 385, 407, 411, 448, 455, 997, 1008, 1017, 1027, 1030, 1033], "790": [4, 71], "89": [4, 13, 33, 156, 190, 325, 326, 982, 987, 997, 1021, 1027, 1030, 1038], "6332": 4, "6333": 4, "88": [4, 6, 11, 33, 93, 190, 203, 259, 302, 325, 326, 356, 374, 376, 379, 409, 471, 859, 935, 1017, 1027], "820": [4, 839, 840], "79": [4, 6, 31, 33, 81, 82, 99, 148, 175, 302, 326, 376, 384, 409, 472, 522, 595, 692, 837, 1027, 1029], "6334": 4, "6335": 4, "70": [4, 6, 11, 13, 67, 72, 74, 112, 170, 238, 245, 260, 326, 374, 376, 411, 491, 492, 711, 723, 753, 796, 810, 886, 976, 997, 1017], "33": [4, 13, 81, 99, 107, 199, 320, 326, 374, 376, 383, 384, 385, 407, 415, 459, 530, 635, 646, 710, 711, 726, 727, 735, 740, 780, 781, 784, 802, 823, 825, 827, 886, 910, 983, 987, 997, 1008, 1017, 1027, 1035], "335": 4, "74": [4, 8, 13, 215, 325, 326, 376, 588, 692, 796, 810, 878], "16326": [4, 1039], "16327": 4, "16328": 4, "16329": 4, "16330": 4, "readi": [4, 7, 156, 200, 374, 383, 387], "tree": [4, 7, 12, 13, 27, 28, 32, 42, 45, 56, 63, 91, 100, 111, 114, 115, 116, 118, 122, 123, 124, 125, 126, 128, 131, 132, 133, 134, 135, 136, 148, 159, 163, 170, 172, 182, 208, 221, 235, 237, 238, 239, 257, 264, 266, 278, 281, 283, 286, 288, 296, 305, 306, 310, 317, 330, 335, 361, 362, 366, 374, 376, 385, 392, 393, 396, 405, 407, 413, 418, 435, 439, 440, 441, 442, 443, 444, 446, 448, 455, 461, 493, 498, 502, 512, 513, 517, 542, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 629, 630, 631, 632, 656, 686, 690, 700, 701, 709, 785, 802, 823, 825, 834, 839, 840, 841, 842, 843, 844, 845, 847, 849, 850, 851, 860, 863, 872, 931, 977, 984, 987, 988, 993, 994, 1006, 1007, 1008, 1009, 1023, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "often": [4, 20, 25, 26, 34, 71, 75, 118, 130, 155, 163, 169, 170, 200, 217, 221, 238, 247, 262, 265, 305, 310, 338, 348, 351, 352, 353, 366, 367, 373, 374, 376, 379, 381, 384, 387, 391, 392, 393, 396, 401, 405, 407, 408, 409, 411, 412, 414, 415, 417, 419, 466, 519, 522, 531, 534, 630, 644, 645, 650, 651, 658, 659, 660, 661, 670, 672, 685, 725, 869, 877, 885, 897, 976, 977, 979, 982, 983, 984, 985, 986, 987, 989, 990, 992, 993, 994, 997, 1000, 1001, 1003, 1012, 1014, 1019, 1020, 1021, 1028, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "flexibl": [4, 26, 122, 163, 199, 306, 335, 353, 381, 386, 391, 411, 417, 672, 899, 900, 976, 981, 983, 987, 991, 997, 1006, 1007, 1011, 1036, 1040], "effici": [4, 5, 12, 14, 43, 47, 54, 56, 96, 118, 123, 130, 175, 188, 192, 201, 207, 288, 351, 366, 371, 373, 379, 381, 382, 384, 385, 391, 393, 401, 404, 406, 407, 412, 413, 414, 417, 419, 440, 441, 444, 445, 447, 448, 450, 452, 455, 457, 459, 460, 494, 531, 532, 533, 536, 538, 539, 542, 561, 564, 572, 579, 580, 586, 587, 589, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 630, 631, 632, 636, 638, 653, 656, 657, 662, 664, 665, 666, 671, 673, 674, 675, 676, 677, 683, 684, 686, 723, 753, 760, 776, 777, 794, 795, 796, 810, 828, 839, 840, 841, 842, 843, 845, 847, 849, 850, 851, 864, 876, 888, 892, 899, 908, 910, 936, 955, 976, 979, 981, 983, 984, 986, 987, 988, 990, 991, 992, 993, 995, 997, 998, 999, 1000, 1001, 1002, 1006, 1011, 1012, 1016, 1019, 1020, 1021, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "heterogen": [4, 8, 9, 25, 56, 70, 72, 77, 166, 170, 199, 242, 310, 315, 353, 371, 373, 391, 462, 486, 539, 579, 589, 711, 859, 863, 899, 984, 994, 997, 1006, 1008, 1023, 1031, 1035, 1037, 1038], "tabular": [4, 13, 170, 381, 414, 995], "mix": [4, 63, 70, 71, 77, 97, 98, 122, 166, 199, 230, 240, 242, 261, 305, 311, 373, 381, 391, 393, 408, 412, 419, 462, 464, 465, 494, 531, 536, 538, 545, 598, 602, 628, 644, 645, 650, 656, 657, 658, 659, 660, 661, 666, 674, 676, 679, 796, 810, 825, 859, 872, 873, 879, 880, 951, 958, 961, 983, 992, 1008, 1020, 1039, 1041, 1042], "long": [4, 11, 12, 45, 63, 125, 156, 164, 169, 171, 199, 235, 236, 238, 263, 296, 305, 316, 351, 352, 362, 367, 377, 379, 387, 391, 393, 394, 401, 406, 407, 451, 496, 536, 674, 675, 676, 799, 800, 834, 835, 836, 837, 838, 856, 857, 867, 987, 993, 997, 998, 1000, 1001, 1005, 1029, 1033, 1039, 1041], "sampl": [4, 5, 8, 11, 14, 25, 26, 27, 28, 33, 34, 35, 38, 40, 42, 43, 44, 47, 49, 50, 54, 57, 58, 59, 60, 61, 66, 81, 82, 83, 87, 91, 93, 96, 100, 101, 104, 105, 112, 113, 114, 115, 116, 117, 118, 121, 122, 124, 125, 126, 128, 133, 134, 135, 140, 145, 147, 148, 151, 155, 156, 157, 158, 160, 163, 166, 169, 170, 175, 177, 183, 185, 187, 188, 199, 201, 203, 206, 207, 209, 210, 211, 213, 215, 216, 217, 218, 220, 228, 232, 233, 235, 236, 238, 245, 246, 248, 249, 250, 251, 253, 255, 259, 260, 262, 263, 264, 266, 268, 272, 274, 276, 281, 283, 287, 288, 289, 290, 292, 293, 294, 301, 302, 305, 307, 308, 309, 310, 312, 315, 317, 318, 320, 322, 325, 327, 328, 329, 330, 333, 334, 336, 338, 340, 342, 343, 344, 346, 347, 349, 351, 352, 357, 360, 366, 372, 374, 375, 378, 379, 381, 382, 391, 392, 398, 404, 405, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 424, 425, 426, 429, 430, 431, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 452, 454, 455, 456, 459, 460, 461, 463, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 526, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 608, 609, 625, 626, 627, 628, 630, 631, 632, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 681, 685, 686, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 705, 706, 707, 708, 710, 711, 712, 713, 714, 716, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 731, 732, 733, 734, 735, 736, 737, 738, 740, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 757, 758, 760, 761, 765, 766, 767, 768, 770, 771, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 859, 862, 863, 864, 865, 868, 869, 870, 871, 872, 873, 874, 876, 877, 878, 879, 880, 884, 885, 886, 888, 889, 890, 891, 892, 893, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 915, 919, 920, 924, 925, 936, 940, 956, 958, 961, 962, 965, 968, 976, 977, 979, 980, 981, 982, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1006, 1007, 1008, 1010, 1012, 1018, 1019, 1020, 1021, 1023, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "larg": [4, 12, 13, 14, 22, 27, 38, 40, 44, 48, 50, 51, 53, 54, 56, 74, 76, 96, 100, 115, 117, 118, 125, 128, 130, 144, 156, 157, 171, 172, 178, 179, 188, 190, 199, 201, 203, 204, 205, 217, 233, 238, 257, 263, 266, 269, 285, 292, 301, 305, 307, 318, 319, 322, 338, 343, 346, 352, 353, 366, 374, 379, 385, 388, 391, 392, 393, 397, 401, 406, 409, 411, 412, 413, 414, 416, 418, 420, 440, 442, 444, 445, 448, 449, 450, 451, 456, 460, 471, 473, 497, 512, 532, 534, 536, 538, 542, 545, 547, 553, 554, 555, 556, 557, 558, 559, 560, 562, 563, 565, 566, 580, 586, 587, 589, 632, 639, 641, 648, 652, 655, 656, 657, 662, 669, 670, 672, 675, 677, 683, 685, 687, 689, 690, 691, 693, 743, 776, 777, 796, 804, 806, 810, 814, 824, 834, 835, 836, 837, 838, 839, 840, 845, 856, 857, 864, 868, 869, 877, 879, 891, 892, 899, 900, 904, 905, 907, 908, 909, 910, 935, 936, 976, 979, 981, 983, 984, 986, 989, 990, 991, 995, 997, 1000, 1001, 1002, 1003, 1006, 1007, 1011, 1017, 1019, 1020, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "here": [4, 8, 9, 12, 13, 14, 18, 25, 58, 59, 67, 79, 83, 90, 91, 93, 98, 99, 101, 102, 103, 104, 106, 112, 115, 118, 122, 126, 132, 145, 148, 151, 159, 160, 169, 170, 171, 175, 178, 183, 188, 192, 199, 203, 205, 214, 215, 217, 220, 222, 228, 233, 235, 238, 239, 246, 247, 248, 254, 257, 258, 260, 262, 263, 265, 269, 270, 272, 278, 283, 285, 292, 300, 301, 302, 307, 310, 317, 319, 322, 325, 327, 338, 342, 346, 348, 353, 356, 362, 366, 367, 368, 373, 374, 377, 378, 379, 380, 381, 383, 384, 385, 387, 391, 392, 398, 401, 403, 404, 407, 408, 410, 411, 412, 413, 414, 415, 418, 420, 435, 438, 439, 440, 441, 442, 443, 445, 447, 450, 462, 470, 473, 534, 536, 537, 541, 542, 565, 566, 567, 568, 579, 580, 582, 586, 589, 592, 600, 626, 628, 645, 649, 651, 653, 659, 661, 663, 671, 673, 687, 689, 693, 697, 710, 723, 743, 753, 791, 796, 799, 800, 802, 810, 818, 819, 820, 821, 822, 823, 824, 826, 835, 839, 840, 863, 871, 874, 877, 880, 891, 892, 902, 953, 976, 979, 983, 984, 985, 986, 987, 990, 993, 997, 999, 1000, 1001, 1002, 1006, 1007, 1010, 1011, 1012, 1013, 1019, 1027, 1035, 1040], "modern": [4, 415, 466, 501, 588, 688, 692, 727, 897, 984, 1006, 1007, 1043], "histgradientboostingregressor": [4, 7, 13, 118, 122, 125, 126, 129, 132, 163, 170, 199, 311, 315, 316, 317, 318, 320, 321, 322, 383, 414, 558, 563, 630, 631, 633, 977, 994, 1006, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "nativ": [4, 131, 163, 367, 374, 393, 414, 494, 559, 560, 831, 832, 955, 983, 987, 1006, 1037, 1039], "support": [4, 6, 7, 8, 9, 10, 17, 25, 28, 31, 33, 47, 71, 72, 73, 111, 116, 131, 132, 136, 144, 145, 170, 200, 209, 210, 211, 217, 233, 234, 235, 241, 254, 258, 263, 265, 267, 278, 283, 302, 305, 309, 319, 325, 326, 329, 330, 334, 335, 338, 339, 340, 341, 342, 343, 346, 349, 366, 367, 368, 373, 377, 379, 381, 383, 384, 385, 386, 388, 389, 392, 393, 394, 407, 411, 412, 415, 416, 417, 435, 438, 448, 450, 451, 462, 463, 464, 465, 467, 470, 472, 485, 494, 510, 536, 538, 539, 542, 545, 547, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 608, 609, 611, 612, 613, 615, 617, 618, 620, 621, 623, 625, 629, 630, 631, 641, 643, 655, 656, 657, 668, 669, 670, 671, 672, 673, 674, 675, 676, 685, 688, 692, 697, 705, 711, 726, 727, 735, 740, 775, 776, 777, 780, 781, 784, 785, 796, 799, 800, 802, 810, 822, 823, 831, 832, 837, 839, 840, 843, 845, 846, 851, 858, 859, 860, 864, 870, 872, 873, 875, 879, 887, 896, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 915, 925, 930, 931, 975, 976, 977, 979, 980, 981, 983, 986, 987, 988, 989, 990, 991, 993, 994, 997, 998, 1001, 1006, 1007, 1008, 1009, 1011, 1012, 1015, 1017, 1021, 1023, 1024, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "therefor": [4, 9, 14, 21, 25, 35, 38, 53, 54, 72, 73, 76, 81, 87, 101, 105, 112, 115, 117, 125, 130, 132, 147, 168, 171, 199, 203, 215, 216, 245, 250, 251, 261, 263, 278, 281, 286, 301, 305, 310, 325, 338, 346, 347, 351, 352, 360, 366, 373, 377, 384, 391, 398, 403, 407, 408, 409, 411, 412, 414, 415, 435, 533, 547, 549, 551, 552, 557, 558, 562, 563, 602, 604, 656, 657, 663, 666, 669, 674, 676, 677, 699, 710, 732, 754, 794, 859, 860, 872, 876, 880, 888, 977, 981, 983, 984, 987, 989, 990, 991, 992, 995, 997, 1002, 1003, 1007, 1012, 1019, 1020, 1021, 1036, 1037, 1040, 1041, 1042, 1043, 1044], "categorical_featur": [4, 72, 122, 170, 311, 317, 318, 319, 320, 322, 384, 414, 559, 560, 630, 631, 994, 1035, 1039, 1042, 1044], "from_dtyp": [4, 122, 322, 414, 559, 560, 1044], "For": [4, 8, 9, 12, 13, 14, 20, 28, 33, 38, 41, 45, 47, 49, 50, 54, 56, 58, 59, 61, 68, 74, 81, 87, 92, 97, 115, 117, 118, 120, 125, 126, 128, 130, 144, 145, 148, 151, 153, 158, 163, 164, 169, 170, 183, 187, 188, 199, 200, 203, 204, 207, 216, 217, 220, 222, 225, 228, 229, 231, 232, 233, 235, 242, 250, 257, 260, 261, 267, 275, 281, 283, 293, 299, 301, 302, 307, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 328, 330, 338, 340, 342, 346, 351, 352, 353, 356, 357, 360, 362, 366, 368, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 391, 392, 393, 394, 398, 401, 403, 404, 405, 406, 407, 408, 411, 412, 414, 415, 416, 417, 418, 423, 430, 435, 438, 440, 441, 442, 443, 444, 445, 447, 448, 449, 452, 454, 455, 456, 458, 459, 460, 462, 463, 464, 466, 470, 472, 480, 481, 482, 483, 487, 494, 496, 501, 510, 512, 513, 517, 521, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 545, 547, 548, 549, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 570, 571, 579, 580, 581, 582, 583, 584, 586, 587, 589, 590, 591, 592, 595, 600, 605, 606, 607, 608, 609, 612, 617, 620, 621, 625, 626, 627, 628, 629, 630, 631, 633, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 682, 685, 686, 687, 688, 690, 691, 693, 699, 702, 704, 705, 726, 727, 735, 738, 739, 760, 766, 775, 780, 781, 784, 785, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 828, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 864, 865, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 884, 885, 886, 887, 888, 889, 890, 891, 892, 897, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 919, 925, 950, 971, 976, 977, 979, 980, 981, 982, 983, 984, 987, 988, 989, 990, 991, 992, 993, 994, 995, 997, 998, 1001, 1002, 1003, 1005, 1010, 1011, 1012, 1019, 1020, 1021, 1027, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "refer": [4, 38, 39, 61, 64, 72, 91, 126, 132, 148, 160, 217, 235, 238, 267, 286, 293, 305, 315, 316, 317, 318, 319, 320, 321, 322, 352, 367, 376, 377, 379, 380, 381, 383, 384, 385, 386, 387, 391, 392, 393, 394, 397, 398, 401, 408, 410, 418, 419, 420, 435, 436, 437, 438, 440, 442, 444, 445, 446, 448, 449, 450, 451, 452, 455, 460, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 496, 501, 509, 511, 513, 514, 515, 516, 517, 518, 526, 528, 529, 530, 531, 532, 533, 534, 535, 536, 538, 539, 542, 545, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 588, 591, 592, 593, 600, 605, 606, 608, 609, 612, 617, 620, 621, 625, 626, 629, 630, 632, 633, 634, 635, 636, 637, 640, 641, 642, 643, 645, 647, 649, 651, 653, 654, 656, 659, 661, 663, 664, 665, 666, 669, 671, 673, 674, 676, 677, 680, 681, 686, 687, 688, 689, 690, 691, 692, 693, 694, 699, 702, 703, 705, 706, 707, 708, 710, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 726, 727, 728, 731, 732, 733, 734, 735, 737, 738, 740, 753, 755, 756, 766, 780, 782, 783, 785, 786, 789, 790, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 810, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 829, 830, 834, 835, 836, 838, 841, 844, 845, 846, 848, 855, 856, 857, 859, 864, 865, 866, 868, 869, 871, 872, 873, 875, 876, 877, 879, 880, 887, 892, 893, 894, 895, 896, 897, 899, 901, 902, 904, 905, 907, 908, 909, 910, 924, 936, 953, 989, 998, 1003, 1007, 1010, 1012, 1016, 1020, 1021, 1027, 1031, 1032, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "datafram": [4, 13, 26, 71, 72, 73, 74, 112, 118, 122, 125, 129, 156, 163, 168, 169, 170, 171, 178, 183, 188, 203, 207, 217, 239, 242, 250, 258, 260, 261, 263, 271, 272, 278, 310, 311, 312, 318, 319, 320, 346, 351, 352, 373, 374, 379, 381, 384, 393, 408, 414, 431, 440, 441, 443, 445, 447, 462, 464, 465, 466, 480, 481, 482, 483, 487, 488, 489, 490, 494, 498, 499, 500, 502, 503, 508, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 559, 560, 564, 565, 566, 567, 568, 579, 580, 581, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 625, 626, 627, 628, 629, 630, 631, 632, 633, 636, 637, 638, 639, 640, 686, 687, 690, 796, 799, 800, 810, 825, 843, 848, 851, 855, 858, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 891, 892, 897, 915, 942, 958, 961, 976, 977, 1007, 1021, 1030, 1031, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "dedic": [4, 258, 348, 377, 383, 385, 391, 394, 403, 407, 582, 670, 672, 685, 976, 983, 1006, 1012, 1035, 1044], "rule": [4, 118, 175, 357, 360, 362, 366, 376, 379, 380, 381, 391, 393, 394, 402, 405, 406, 407, 411, 412, 414, 416, 534, 547, 548, 549, 550, 551, 559, 560, 567, 568, 600, 632, 643, 656, 657, 664, 665, 666, 674, 675, 676, 704, 705, 796, 799, 800, 802, 810, 818, 822, 824, 848, 899, 912, 976, 981, 989, 990, 1001, 1003, 1007, 1012, 1019, 1023, 1029, 1032, 1039, 1044], "sake": [4, 125, 164, 169, 199, 310, 342, 351, 353, 387, 391, 668], "simplic": [4, 14, 32, 183, 342, 351, 353, 393, 413, 990, 991, 992, 1002], "try": [4, 6, 11, 12, 13, 15, 17, 26, 27, 40, 54, 72, 73, 99, 112, 117, 118, 119, 120, 121, 128, 129, 132, 135, 145, 151, 156, 164, 168, 169, 170, 171, 175, 178, 180, 188, 229, 230, 231, 235, 239, 240, 241, 242, 246, 247, 250, 258, 260, 261, 267, 272, 278, 283, 296, 302, 311, 316, 317, 319, 320, 322, 327, 340, 346, 351, 352, 360, 374, 377, 378, 379, 381, 384, 385, 387, 391, 393, 397, 398, 401, 407, 410, 411, 414, 415, 486, 487, 488, 489, 490, 491, 492, 493, 495, 496, 501, 565, 575, 587, 656, 671, 673, 687, 691, 796, 799, 800, 808, 810, 820, 821, 822, 824, 877, 879, 882, 884, 885, 886, 887, 888, 889, 890, 899, 918, 971, 976, 983, 984, 993, 1002, 1003, 1007, 1010, 1011, 1012, 1014, 1017, 1019, 1020, 1021, 1029, 1030, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1045], "default": [4, 13, 15, 26, 28, 31, 43, 46, 47, 49, 56, 60, 96, 118, 144, 151, 163, 170, 178, 179, 188, 199, 200, 217, 230, 232, 238, 240, 242, 248, 255, 263, 269, 281, 283, 305, 309, 312, 315, 316, 320, 322, 342, 346, 347, 351, 352, 353, 356, 362, 366, 367, 373, 374, 377, 381, 382, 383, 384, 385, 386, 388, 391, 392, 393, 397, 398, 401, 405, 407, 408, 411, 412, 414, 415, 416, 418, 419, 420, 421, 423, 424, 425, 426, 428, 429, 430, 431, 432, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 705, 706, 707, 709, 710, 711, 712, 714, 716, 717, 718, 719, 720, 721, 723, 724, 725, 726, 727, 728, 731, 732, 733, 735, 736, 737, 738, 739, 740, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 760, 761, 763, 764, 765, 766, 768, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 923, 925, 926, 928, 930, 935, 936, 937, 938, 939, 940, 941, 950, 952, 953, 955, 956, 957, 958, 960, 961, 962, 968, 971, 973, 974, 976, 977, 979, 981, 983, 986, 987, 988, 990, 991, 993, 994, 997, 999, 1001, 1002, 1003, 1012, 1016, 1019, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "hyper": [4, 72, 118, 254, 260, 265, 302, 338, 362, 381, 391, 392, 393, 402, 411, 414, 416, 466, 642, 643, 800, 808, 810, 855, 897, 982, 983, 987, 990, 1001, 1002, 1012, 1023, 1027, 1041], "paramet": [4, 5, 9, 10, 11, 14, 15, 17, 35, 45, 55, 56, 59, 61, 62, 63, 72, 73, 74, 80, 82, 83, 93, 96, 110, 112, 114, 116, 118, 121, 122, 123, 126, 127, 138, 145, 148, 151, 152, 155, 156, 157, 158, 159, 160, 163, 164, 166, 169, 170, 178, 179, 180, 181, 183, 184, 186, 187, 188, 190, 191, 199, 201, 203, 204, 207, 208, 215, 216, 217, 224, 225, 228, 230, 233, 234, 235, 245, 246, 247, 248, 250, 251, 254, 255, 259, 260, 261, 262, 264, 265, 268, 271, 272, 273, 274, 275, 278, 283, 285, 286, 289, 290, 296, 299, 300, 302, 305, 306, 307, 310, 315, 316, 318, 319, 320, 321, 329, 333, 335, 340, 342, 343, 345, 347, 348, 349, 351, 352, 353, 356, 357, 358, 359, 362, 366, 367, 368, 371, 372, 374, 382, 384, 385, 386, 387, 388, 391, 398, 402, 405, 407, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 574, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 928, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 954, 955, 956, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 971, 972, 973, 974, 975, 977, 978, 979, 980, 981, 982, 984, 986, 989, 990, 991, 992, 993, 994, 995, 997, 999, 1000, 1001, 1003, 1006, 1007, 1008, 1013, 1015, 1017, 1018, 1019, 1023, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "compos": [4, 5, 26, 70, 71, 72, 76, 77, 87, 114, 122, 132, 166, 169, 170, 171, 199, 201, 217, 230, 238, 240, 242, 278, 311, 316, 318, 319, 320, 322, 392, 398, 407, 408, 411, 513, 610, 986, 1008, 1027], "columntransform": [4, 71, 72, 132, 169, 170, 171, 199, 217, 230, 238, 240, 242, 311, 316, 318, 319, 320, 322, 371, 373, 391, 392, 398, 464, 465, 627, 864, 976, 977, 1007, 1023, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "ensembl": [4, 7, 10, 12, 13, 27, 28, 32, 57, 112, 113, 114, 115, 116, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 159, 163, 164, 170, 171, 172, 199, 221, 228, 237, 238, 240, 241, 257, 272, 278, 281, 307, 311, 315, 316, 317, 318, 320, 321, 322, 330, 351, 357, 358, 359, 362, 366, 383, 384, 392, 393, 398, 405, 407, 411, 416, 435, 502, 513, 630, 631, 633, 656, 700, 799, 800, 825, 829, 830, 860, 863, 872, 903, 907, 909, 910, 928, 976, 987, 988, 993, 994, 1003, 1006, 1007, 1008, 1009, 1023, 1024, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "cross_valid": [4, 13, 122, 132, 169, 201, 256, 263, 278, 311, 322, 379, 392, 398, 573, 820, 821, 987, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1042, 1043, 1044], "pipelin": [4, 32, 55, 59, 72, 75, 76, 77, 87, 100, 117, 118, 122, 139, 142, 144, 147, 148, 149, 163, 164, 170, 171, 175, 178, 187, 188, 199, 200, 205, 213, 217, 221, 227, 228, 229, 231, 233, 238, 239, 242, 243, 253, 257, 258, 259, 264, 267, 268, 271, 272, 274, 276, 283, 285, 286, 291, 292, 299, 302, 307, 310, 312, 315, 316, 317, 318, 319, 320, 321, 329, 351, 352, 362, 366, 371, 373, 374, 379, 382, 393, 398, 411, 415, 417, 421, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 462, 463, 465, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 486, 500, 513, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 603, 605, 608, 609, 625, 626, 627, 628, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 686, 687, 688, 689, 690, 695, 696, 698, 699, 700, 711, 794, 795, 796, 797, 798, 799, 800, 803, 805, 810, 814, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 882, 884, 885, 886, 887, 888, 889, 890, 891, 892, 894, 895, 896, 897, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 976, 977, 979, 983, 990, 991, 996, 997, 1001, 1002, 1006, 1007, 1008, 1009, 1011, 1013, 1015, 1023, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1044], "make_pipelin": [4, 32, 59, 87, 117, 122, 132, 144, 145, 148, 163, 164, 169, 170, 175, 178, 187, 188, 199, 200, 205, 213, 217, 221, 228, 229, 230, 238, 239, 240, 242, 257, 267, 283, 292, 299, 307, 310, 311, 312, 315, 316, 317, 318, 319, 320, 352, 362, 392, 398, 408, 411, 565, 674, 676, 851, 859, 884, 885, 887, 888, 889, 890, 899, 900, 901, 902, 904, 905, 977, 990, 997, 1001, 1002, 1030, 1037, 1040], "gbrt": [4, 13, 199, 414], "random_st": [4, 5, 6, 7, 10, 12, 13, 15, 20, 21, 22, 25, 26, 27, 28, 31, 32, 39, 43, 44, 45, 47, 49, 50, 51, 54, 56, 57, 58, 59, 60, 61, 62, 63, 71, 72, 76, 83, 87, 93, 96, 98, 101, 112, 113, 114, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 134, 135, 138, 144, 145, 147, 151, 160, 163, 164, 168, 169, 170, 171, 172, 175, 178, 180, 181, 185, 191, 198, 199, 202, 203, 205, 206, 207, 211, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 228, 229, 233, 236, 237, 238, 239, 241, 242, 245, 247, 248, 251, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 278, 281, 283, 286, 287, 291, 292, 293, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 328, 336, 338, 339, 340, 346, 347, 351, 352, 356, 360, 362, 381, 384, 388, 392, 393, 403, 407, 408, 411, 412, 414, 415, 419, 432, 435, 436, 438, 441, 445, 447, 449, 450, 451, 452, 456, 457, 458, 460, 467, 472, 476, 485, 486, 489, 490, 493, 495, 501, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 534, 535, 536, 537, 538, 539, 541, 542, 543, 544, 545, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 581, 582, 591, 592, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 622, 623, 625, 630, 631, 632, 633, 636, 637, 638, 639, 640, 644, 645, 647, 648, 649, 650, 651, 652, 653, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 669, 670, 672, 674, 675, 676, 677, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 699, 700, 708, 732, 785, 789, 790, 794, 795, 798, 799, 800, 801, 802, 808, 810, 811, 812, 813, 814, 815, 816, 818, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 844, 848, 855, 856, 857, 859, 864, 876, 880, 888, 891, 892, 899, 900, 901, 904, 906, 907, 908, 909, 910, 912, 913, 933, 935, 936, 956, 958, 961, 976, 977, 979, 982, 987, 988, 989, 990, 991, 994, 995, 997, 1002, 1003, 1012, 1016, 1017, 1021, 1024, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040], "categorical_column": [4, 122, 169, 171, 238, 465], "print": [4, 6, 7, 8, 10, 11, 12, 13, 15, 17, 18, 20, 21, 22, 25, 27, 31, 33, 39, 43, 44, 47, 48, 49, 50, 51, 53, 54, 59, 61, 62, 64, 68, 71, 72, 74, 75, 76, 81, 86, 87, 93, 96, 99, 103, 104, 106, 112, 115, 118, 119, 120, 121, 122, 124, 126, 138, 139, 144, 145, 147, 148, 151, 152, 154, 156, 160, 168, 170, 171, 172, 175, 183, 184, 185, 186, 190, 191, 194, 195, 199, 201, 202, 203, 206, 207, 214, 215, 217, 221, 222, 225, 230, 232, 234, 235, 238, 242, 248, 254, 258, 259, 260, 261, 263, 265, 268, 269, 273, 283, 287, 294, 296, 300, 301, 302, 307, 310, 312, 315, 316, 317, 319, 321, 322, 325, 326, 329, 338, 351, 352, 353, 356, 360, 362, 366, 373, 374, 377, 380, 381, 387, 393, 398, 401, 408, 411, 414, 415, 417, 462, 465, 466, 470, 476, 488, 500, 510, 539, 542, 547, 548, 557, 558, 559, 560, 562, 563, 567, 568, 575, 581, 582, 583, 586, 587, 589, 610, 615, 616, 628, 644, 645, 647, 648, 650, 651, 652, 654, 658, 659, 660, 661, 664, 665, 674, 675, 682, 694, 711, 715, 734, 792, 794, 795, 797, 798, 801, 803, 804, 805, 806, 809, 811, 812, 813, 814, 815, 816, 817, 821, 822, 823, 824, 826, 828, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 845, 846, 847, 848, 849, 850, 851, 856, 857, 858, 859, 860, 861, 869, 875, 879, 887, 897, 898, 899, 900, 901, 904, 906, 912, 918, 923, 948, 955, 971, 977, 987, 988, 989, 990, 995, 1003, 1012, 1016, 1017, 1019, 1020, 1021, 1027, 1029, 1035, 1036, 1038, 1042], "tolist": [4, 124, 163, 259, 317, 374], "across": [4, 13, 56, 62, 68, 86, 91, 118, 138, 169, 188, 193, 221, 255, 257, 260, 283, 305, 310, 342, 380, 381, 388, 393, 401, 406, 407, 411, 415, 416, 419, 435, 438, 448, 450, 452, 455, 458, 460, 467, 470, 472, 486, 489, 490, 493, 495, 501, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 541, 542, 543, 544, 545, 549, 551, 552, 553, 554, 555, 557, 558, 559, 560, 561, 562, 565, 566, 586, 589, 592, 600, 605, 606, 608, 609, 630, 631, 632, 637, 638, 639, 640, 644, 645, 648, 650, 651, 652, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 669, 674, 676, 677, 683, 684, 687, 688, 689, 690, 691, 692, 693, 702, 703, 715, 728, 754, 785, 790, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 808, 810, 811, 812, 813, 814, 815, 816, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 844, 848, 855, 856, 857, 864, 868, 869, 876, 877, 879, 880, 888, 891, 892, 894, 895, 899, 900, 901, 904, 907, 908, 935, 936, 955, 958, 961, 976, 983, 985, 987, 997, 1001, 1003, 1007, 1011, 1021, 1027, 1030, 1033, 1034, 1035, 1036, 1037], "numpi": [4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 34, 35, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 76, 79, 80, 81, 82, 83, 86, 87, 91, 93, 96, 97, 98, 99, 100, 102, 103, 105, 106, 113, 114, 115, 119, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 138, 140, 143, 144, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 168, 169, 170, 171, 172, 178, 179, 180, 181, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 221, 222, 223, 225, 228, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 245, 246, 247, 248, 249, 250, 251, 254, 255, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 281, 283, 287, 288, 289, 290, 292, 293, 294, 295, 296, 299, 302, 305, 306, 307, 308, 309, 310, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 336, 337, 338, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 357, 358, 359, 360, 362, 366, 372, 373, 374, 377, 379, 380, 381, 382, 383, 385, 387, 388, 391, 392, 393, 397, 398, 400, 401, 403, 404, 407, 408, 411, 412, 413, 414, 415, 420, 421, 422, 423, 424, 425, 428, 429, 430, 431, 437, 438, 439, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 483, 488, 491, 492, 494, 501, 504, 506, 507, 525, 529, 532, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 567, 568, 579, 580, 583, 586, 587, 589, 599, 602, 616, 625, 626, 627, 628, 629, 630, 631, 641, 644, 645, 647, 650, 651, 655, 656, 657, 658, 659, 660, 661, 664, 665, 666, 668, 670, 674, 675, 676, 682, 685, 686, 689, 690, 691, 692, 693, 697, 700, 701, 704, 705, 707, 710, 712, 723, 724, 726, 727, 729, 731, 732, 735, 736, 751, 753, 770, 776, 778, 779, 780, 781, 784, 785, 786, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 822, 825, 826, 827, 828, 831, 832, 834, 835, 836, 837, 838, 839, 840, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 862, 863, 866, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 882, 884, 885, 886, 887, 888, 889, 890, 891, 892, 894, 895, 896, 899, 901, 902, 904, 905, 907, 915, 916, 917, 918, 922, 924, 933, 934, 935, 936, 940, 941, 942, 949, 950, 956, 958, 961, 962, 963, 964, 965, 966, 967, 968, 973, 974, 976, 977, 982, 983, 985, 987, 988, 990, 993, 997, 999, 1002, 1003, 1005, 1007, 1012, 1015, 1016, 1017, 1019, 1020, 1021, 1027, 1030, 1031, 1033, 1034, 1035, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "np": [4, 5, 7, 8, 10, 11, 12, 13, 14, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 34, 35, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 76, 79, 80, 81, 82, 83, 86, 87, 93, 97, 98, 99, 100, 102, 103, 105, 106, 113, 114, 115, 119, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 138, 140, 143, 144, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 168, 169, 170, 171, 172, 178, 179, 180, 181, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 221, 222, 223, 225, 228, 231, 232, 233, 234, 235, 236, 237, 238, 240, 245, 246, 247, 248, 249, 250, 251, 254, 255, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 281, 283, 287, 288, 289, 290, 292, 293, 294, 295, 296, 299, 302, 305, 306, 307, 308, 309, 310, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 336, 337, 338, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 357, 358, 359, 360, 362, 366, 373, 374, 379, 381, 384, 385, 388, 391, 393, 398, 404, 407, 408, 411, 412, 413, 414, 415, 417, 420, 421, 422, 423, 424, 425, 428, 429, 430, 431, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 483, 494, 495, 506, 507, 518, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 555, 556, 557, 558, 559, 561, 562, 563, 564, 567, 568, 579, 580, 583, 584, 586, 587, 591, 592, 595, 599, 602, 604, 607, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 639, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 666, 668, 669, 670, 672, 673, 674, 675, 676, 679, 680, 681, 682, 685, 689, 690, 692, 693, 697, 700, 701, 704, 705, 707, 710, 711, 712, 713, 723, 724, 726, 727, 729, 731, 732, 735, 736, 738, 751, 753, 760, 766, 770, 775, 778, 779, 780, 781, 784, 785, 786, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 825, 826, 827, 828, 831, 832, 834, 835, 836, 837, 838, 839, 840, 844, 845, 846, 847, 849, 850, 851, 855, 856, 863, 864, 866, 872, 873, 874, 875, 876, 878, 879, 880, 887, 888, 891, 892, 894, 895, 896, 899, 901, 902, 904, 905, 907, 908, 909, 910, 915, 916, 917, 918, 919, 920, 922, 924, 925, 934, 935, 936, 941, 942, 949, 950, 952, 956, 958, 961, 962, 963, 964, 965, 966, 967, 968, 973, 976, 977, 982, 983, 985, 987, 988, 990, 991, 993, 997, 998, 999, 1001, 1002, 1003, 1012, 1016, 1017, 1019, 1020, 1021, 1028, 1030, 1033, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "def": [4, 5, 6, 7, 8, 10, 11, 13, 14, 15, 17, 18, 20, 26, 28, 34, 35, 38, 41, 42, 49, 53, 56, 57, 59, 62, 71, 76, 93, 96, 98, 99, 103, 105, 110, 112, 115, 117, 122, 124, 125, 132, 154, 157, 159, 160, 164, 172, 179, 187, 188, 191, 196, 199, 200, 207, 208, 209, 217, 220, 221, 235, 236, 238, 245, 246, 247, 248, 250, 251, 255, 258, 259, 260, 261, 263, 268, 271, 274, 283, 288, 290, 293, 296, 300, 302, 305, 307, 310, 311, 315, 329, 334, 338, 342, 348, 351, 352, 353, 366, 374, 379, 381, 385, 386, 391, 408, 411, 415, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 506, 531, 595, 599, 608, 609, 616, 778, 872, 926, 931, 948, 987, 994, 1002, 1017], "model_prop": 4, "none": [4, 8, 9, 10, 13, 17, 18, 27, 31, 34, 40, 42, 43, 45, 53, 55, 56, 57, 63, 98, 101, 105, 116, 121, 122, 124, 127, 140, 148, 152, 158, 159, 172, 178, 199, 200, 207, 210, 217, 220, 234, 235, 236, 238, 254, 260, 261, 272, 288, 290, 294, 309, 312, 317, 318, 326, 329, 336, 338, 339, 342, 343, 345, 351, 352, 374, 376, 379, 381, 386, 388, 393, 398, 407, 411, 414, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 501, 506, 507, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 696, 698, 699, 700, 701, 705, 706, 707, 709, 710, 711, 712, 714, 716, 718, 719, 720, 721, 723, 724, 725, 726, 727, 729, 731, 732, 735, 736, 737, 738, 739, 740, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 760, 761, 763, 764, 765, 766, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 784, 785, 786, 787, 788, 790, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 888, 891, 892, 894, 895, 896, 897, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 914, 916, 918, 919, 920, 922, 923, 924, 925, 928, 930, 935, 936, 939, 940, 941, 942, 946, 947, 950, 953, 955, 956, 958, 961, 962, 968, 971, 972, 974, 976, 983, 987, 997, 1000, 1003, 1012, 1016, 1021, 1023, 1027, 1028, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "model_step": 4, "cv_result": [4, 13, 72, 118, 258, 259, 261, 263, 398, 810, 822, 987], "score": [4, 6, 8, 11, 13, 17, 21, 22, 25, 26, 27, 32, 33, 34, 38, 59, 61, 71, 72, 73, 74, 75, 76, 79, 83, 87, 103, 110, 112, 114, 121, 122, 123, 124, 125, 128, 131, 132, 139, 143, 144, 145, 148, 163, 166, 168, 169, 170, 171, 172, 175, 183, 190, 191, 194, 199, 201, 205, 207, 215, 217, 228, 233, 234, 235, 238, 242, 249, 253, 258, 260, 261, 262, 263, 264, 265, 268, 269, 271, 272, 273, 274, 275, 276, 278, 281, 290, 291, 292, 299, 300, 301, 302, 307, 309, 310, 311, 312, 315, 316, 317, 318, 322, 325, 326, 328, 329, 338, 346, 351, 352, 356, 362, 374, 379, 381, 384, 392, 393, 401, 402, 404, 405, 406, 408, 410, 412, 414, 416, 424, 426, 430, 435, 441, 445, 447, 450, 463, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 500, 502, 530, 534, 539, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 590, 591, 592, 593, 594, 596, 597, 598, 600, 601, 602, 604, 607, 608, 609, 611, 612, 613, 614, 617, 618, 619, 620, 621, 622, 623, 632, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 696, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 711, 713, 714, 715, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 733, 734, 735, 736, 737, 739, 752, 753, 754, 779, 780, 781, 782, 783, 784, 785, 786, 791, 792, 793, 794, 795, 796, 799, 800, 802, 810, 815, 818, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 844, 845, 846, 848, 849, 850, 855, 856, 857, 859, 879, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 938, 945, 976, 979, 983, 985, 990, 993, 995, 997, 1001, 1007, 1008, 1015, 1017, 1019, 1021, 1023, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "neg_mean_absolute_error": [4, 132, 201, 987], "neg_root_mean_squared_error": [4, 311, 987], "return_estim": [4, 169, 322, 411, 822, 1035], "getattr": [4, 8, 305, 381, 393, 1043], "els": [4, 8, 11, 12, 13, 17, 20, 35, 42, 45, 50, 56, 57, 63, 83, 100, 115, 121, 122, 125, 159, 169, 170, 188, 201, 217, 221, 228, 232, 234, 235, 236, 237, 238, 260, 261, 264, 271, 283, 288, 296, 299, 300, 307, 351, 352, 360, 379, 383, 385, 414, 415, 417, 419, 427, 435, 447, 506, 518, 531, 567, 616, 623, 642, 643, 644, 645, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 665, 666, 668, 670, 671, 672, 674, 677, 679, 680, 681, 682, 701, 707, 785, 791, 793, 799, 800, 825, 863, 875, 878, 886, 899, 900, 914, 949, 951, 953, 974, 1003], "mae": [4, 13, 132, 199, 201, 556, 563, 742, 908, 910, 987, 1003, 1034, 1035, 1039, 1040], "test_neg_mean_absolute_error": [4, 201], "rmse": [4, 13, 82, 311, 747, 987, 1038], "test_neg_root_mean_squared_error": 4, "3f": [4, 6, 8, 11, 13, 15, 18, 22, 25, 27, 39, 41, 48, 49, 50, 59, 72, 74, 76, 87, 112, 119, 120, 144, 148, 151, 152, 153, 155, 160, 168, 170, 171, 179, 183, 185, 191, 199, 201, 205, 214, 215, 217, 221, 232, 234, 258, 260, 261, 263, 266, 268, 271, 283, 299, 329, 351, 352, 353, 824, 995, 1017], "std": [4, 11, 12, 13, 38, 47, 51, 55, 62, 67, 80, 82, 83, 97, 98, 99, 119, 121, 122, 132, 160, 163, 164, 169, 179, 184, 208, 232, 258, 259, 260, 262, 263, 265, 268, 270, 274, 311, 328, 341, 352, 362, 393, 407, 411, 414, 513, 604, 607, 824, 879, 890, 997, 1016, 1020, 1035, 1039], "n": [4, 5, 7, 8, 10, 11, 15, 18, 20, 33, 34, 38, 40, 41, 59, 71, 76, 81, 86, 93, 96, 99, 101, 103, 105, 106, 112, 114, 115, 119, 134, 143, 148, 151, 155, 160, 170, 172, 179, 183, 195, 199, 200, 203, 214, 216, 217, 220, 231, 232, 233, 236, 245, 247, 248, 258, 260, 263, 265, 266, 267, 269, 270, 283, 286, 288, 302, 307, 309, 310, 317, 320, 322, 326, 332, 342, 346, 360, 366, 373, 376, 377, 379, 383, 385, 388, 393, 397, 398, 404, 405, 407, 410, 411, 412, 413, 414, 415, 417, 418, 442, 443, 445, 446, 448, 467, 469, 472, 476, 487, 513, 514, 515, 516, 521, 526, 536, 538, 539, 545, 555, 556, 557, 558, 561, 562, 563, 564, 586, 587, 588, 589, 605, 606, 612, 625, 647, 669, 677, 690, 694, 697, 704, 705, 752, 801, 804, 806, 811, 812, 815, 835, 839, 840, 844, 864, 891, 893, 907, 908, 909, 910, 916, 934, 939, 940, 962, 966, 967, 976, 979, 981, 983, 984, 987, 988, 989, 990, 991, 993, 994, 997, 999, 1001, 1002, 1003, 1012, 1019, 1021, 1027, 1029, 1030, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1044], "n_iter_": [4, 99, 207, 248, 393, 438, 445, 446, 447, 469, 470, 480, 481, 482, 529, 530, 531, 534, 535, 536, 537, 538, 541, 559, 560, 625, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 672, 674, 675, 676, 677, 678, 688, 690, 794, 795, 848, 856, 857, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 1031, 1034, 1035, 1037, 1040, 1041, 1043], "100": [4, 5, 7, 10, 12, 13, 17, 18, 20, 26, 28, 38, 43, 51, 54, 58, 62, 67, 72, 73, 76, 80, 81, 96, 98, 99, 105, 113, 118, 124, 128, 131, 134, 136, 152, 156, 159, 160, 169, 170, 172, 175, 178, 179, 181, 183, 185, 189, 190, 191, 193, 198, 199, 200, 201, 203, 208, 209, 210, 212, 214, 215, 217, 222, 223, 225, 231, 232, 233, 234, 235, 239, 245, 247, 251, 255, 256, 258, 260, 263, 265, 270, 271, 274, 288, 289, 290, 302, 306, 307, 309, 311, 312, 318, 322, 329, 330, 336, 337, 339, 340, 341, 345, 346, 348, 351, 352, 356, 359, 360, 366, 368, 374, 376, 379, 381, 384, 385, 398, 404, 407, 408, 411, 412, 413, 414, 415, 435, 439, 443, 447, 469, 470, 476, 488, 509, 510, 511, 512, 513, 514, 515, 516, 517, 519, 520, 521, 522, 523, 526, 528, 532, 534, 537, 542, 543, 544, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 603, 605, 608, 629, 630, 631, 637, 638, 639, 640, 644, 645, 646, 647, 650, 651, 656, 657, 658, 659, 660, 661, 663, 665, 667, 669, 678, 679, 682, 685, 686, 687, 688, 689, 691, 693, 694, 743, 794, 795, 798, 823, 824, 829, 834, 835, 836, 838, 839, 840, 844, 856, 857, 875, 877, 880, 889, 906, 976, 977, 980, 984, 987, 988, 994, 997, 999, 1008, 1012, 1016, 1020, 1021, 1035, 1036, 1037, 1040, 1041], "044": [4, 258, 351, 352, 354, 748, 987, 1008], "003": [4, 151, 292, 297, 357, 361, 1008], "068": [4, 13, 28, 29, 260, 1008], "005": [4, 38, 69, 119, 260, 264, 288, 305, 319, 323, 352, 385, 1008], "max_it": [4, 8, 13, 15, 18, 26, 31, 32, 73, 74, 96, 99, 117, 118, 122, 134, 138, 139, 160, 163, 164, 169, 170, 178, 185, 191, 192, 206, 207, 208, 211, 212, 214, 220, 221, 222, 223, 239, 240, 245, 246, 247, 248, 251, 273, 293, 299, 300, 301, 311, 317, 318, 319, 325, 326, 335, 351, 352, 385, 393, 414, 419, 438, 441, 445, 446, 447, 452, 457, 459, 469, 470, 476, 480, 481, 482, 529, 530, 531, 533, 534, 535, 536, 537, 538, 541, 543, 544, 545, 546, 559, 560, 625, 636, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 670, 672, 674, 675, 676, 677, 678, 680, 681, 685, 686, 687, 688, 691, 692, 794, 795, 810, 848, 856, 857, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 977, 979, 983, 990, 991, 1000, 1001, 1017, 1021, 1028, 1031, 1034, 1035, 1036, 1037, 1039, 1041, 1042, 1043, 1044], "earli": [4, 7, 15, 45, 63, 111, 112, 118, 121, 124, 126, 136, 166, 177, 187, 188, 218, 309, 316, 345, 393, 414, 439, 443, 447, 461, 488, 494, 534, 535, 536, 537, 544, 551, 552, 557, 558, 559, 560, 569, 625, 643, 654, 664, 665, 666, 674, 676, 690, 747, 825, 856, 857, 961, 984, 990, 997, 1005, 1007, 1008, 1011, 1027, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1041, 1042, 1044], "stop": [4, 7, 12, 18, 45, 63, 111, 112, 118, 124, 126, 136, 156, 158, 166, 170, 177, 187, 188, 201, 218, 309, 316, 345, 379, 381, 387, 388, 393, 407, 412, 414, 416, 438, 439, 441, 443, 445, 447, 450, 452, 460, 461, 469, 470, 476, 480, 481, 482, 488, 494, 506, 507, 530, 534, 535, 536, 537, 538, 541, 543, 544, 545, 551, 552, 555, 556, 557, 558, 559, 560, 562, 563, 569, 586, 587, 589, 600, 615, 625, 642, 643, 644, 646, 647, 650, 654, 656, 657, 664, 665, 666, 667, 669, 674, 675, 676, 678, 689, 690, 693, 712, 747, 794, 795, 825, 856, 857, 896, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 941, 961, 976, 983, 991, 992, 1002, 1003, 1007, 1008, 1009, 1011, 1023, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1041, 1042, 1043, 1044], "place": [4, 17, 61, 229, 239, 287, 366, 377, 379, 380, 381, 384, 386, 394, 405, 415, 417, 439, 443, 444, 480, 481, 482, 513, 579, 588, 626, 628, 629, 765, 778, 794, 882, 884, 885, 886, 887, 888, 889, 890, 966, 967, 1006, 1027, 1034, 1037, 1038, 1040, 1044, 1045], "an": [4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 22, 26, 27, 28, 34, 35, 37, 38, 40, 41, 42, 43, 44, 45, 47, 49, 51, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 67, 68, 69, 71, 72, 73, 74, 76, 79, 80, 81, 82, 90, 96, 97, 98, 99, 100, 101, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 125, 126, 128, 129, 130, 131, 132, 135, 139, 140, 144, 148, 151, 152, 153, 156, 157, 158, 160, 162, 163, 165, 166, 168, 169, 170, 171, 175, 177, 178, 179, 182, 183, 187, 194, 199, 200, 201, 203, 204, 206, 207, 213, 215, 216, 217, 218, 220, 221, 222, 223, 225, 228, 229, 231, 232, 233, 234, 235, 236, 238, 242, 245, 246, 248, 250, 251, 254, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 269, 271, 273, 275, 281, 283, 286, 289, 290, 291, 294, 295, 296, 305, 310, 311, 312, 316, 317, 318, 320, 321, 322, 326, 330, 334, 335, 337, 338, 340, 341, 342, 351, 352, 353, 356, 359, 360, 362, 366, 367, 368, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 392, 393, 394, 396, 397, 398, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419, 428, 431, 432, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 501, 506, 507, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 573, 574, 578, 579, 580, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 604, 605, 606, 608, 609, 610, 617, 620, 621, 625, 626, 627, 628, 629, 630, 631, 632, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 703, 704, 707, 709, 710, 716, 718, 719, 724, 726, 727, 731, 732, 734, 739, 740, 742, 743, 745, 747, 748, 750, 753, 755, 756, 760, 761, 763, 764, 765, 766, 767, 770, 772, 773, 774, 775, 778, 779, 780, 781, 784, 785, 786, 787, 788, 789, 790, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 807, 808, 810, 811, 812, 813, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 856, 857, 858, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 914, 916, 917, 919, 920, 922, 923, 926, 930, 931, 932, 934, 935, 936, 938, 940, 943, 944, 945, 946, 947, 948, 950, 951, 952, 955, 957, 958, 961, 962, 968, 971, 973, 974, 975, 977, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1013, 1015, 1016, 1020, 1021, 1023, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "quit": [4, 13, 54, 58, 87, 115, 138, 148, 169, 170, 197, 217, 268, 278, 318, 351, 366, 384, 392, 407, 415, 982, 984, 989, 1011, 1035], "good": [4, 9, 21, 26, 28, 41, 45, 47, 50, 53, 54, 56, 59, 75, 82, 87, 105, 118, 121, 124, 125, 152, 156, 163, 169, 183, 188, 199, 200, 205, 214, 225, 228, 232, 235, 238, 246, 248, 254, 260, 266, 275, 302, 310, 311, 317, 325, 330, 338, 351, 352, 362, 366, 367, 368, 378, 380, 381, 382, 383, 385, 391, 393, 401, 404, 405, 407, 409, 411, 412, 414, 415, 416, 417, 435, 437, 442, 532, 557, 559, 560, 588, 628, 638, 645, 646, 654, 656, 657, 659, 667, 678, 688, 692, 720, 728, 739, 761, 824, 893, 936, 976, 982, 983, 984, 987, 988, 990, 991, 992, 994, 995, 997, 1001, 1002, 1003, 1007, 1011, 1012, 1016, 1019, 1021, 1033], "trial": [4, 265, 445, 447, 458, 669, 794, 795, 983, 1033], "without": [4, 5, 13, 14, 25, 37, 43, 45, 48, 53, 56, 57, 63, 67, 68, 69, 76, 101, 118, 123, 124, 127, 129, 132, 139, 144, 148, 158, 166, 168, 169, 170, 183, 188, 207, 228, 232, 235, 236, 239, 241, 254, 261, 265, 267, 278, 283, 284, 285, 286, 292, 293, 294, 295, 297, 305, 306, 310, 312, 315, 342, 346, 352, 368, 374, 375, 377, 379, 380, 381, 383, 384, 385, 388, 391, 392, 393, 398, 401, 407, 408, 412, 414, 415, 416, 417, 432, 437, 439, 444, 456, 467, 472, 494, 502, 513, 530, 532, 553, 554, 561, 577, 578, 609, 625, 629, 632, 637, 657, 690, 698, 778, 799, 800, 801, 808, 810, 824, 825, 841, 848, 852, 858, 859, 862, 865, 868, 869, 871, 875, 876, 877, 879, 884, 899, 915, 956, 976, 977, 979, 981, 983, 984, 987, 990, 993, 997, 1001, 1002, 1003, 1006, 1007, 1008, 1012, 1013, 1021, 1024, 1027, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1041, 1042, 1043, 1044], "ani": [4, 8, 9, 13, 14, 20, 45, 47, 56, 58, 68, 129, 143, 148, 156, 157, 158, 168, 169, 170, 171, 172, 188, 199, 203, 217, 228, 231, 232, 235, 246, 250, 251, 260, 261, 263, 266, 269, 278, 296, 305, 306, 309, 315, 317, 318, 320, 338, 342, 353, 362, 366, 367, 368, 373, 374, 376, 377, 379, 381, 383, 384, 385, 387, 392, 393, 394, 397, 398, 403, 404, 405, 406, 407, 408, 411, 412, 413, 414, 415, 416, 432, 438, 444, 446, 447, 448, 450, 452, 454, 455, 459, 462, 465, 486, 487, 506, 507, 521, 532, 535, 537, 544, 549, 555, 556, 557, 558, 562, 563, 564, 565, 566, 567, 568, 577, 578, 580, 586, 587, 589, 591, 601, 608, 609, 618, 625, 630, 631, 643, 646, 656, 657, 664, 665, 666, 667, 674, 675, 676, 677, 678, 690, 694, 697, 698, 702, 714, 715, 717, 721, 733, 734, 749, 752, 754, 771, 775, 776, 777, 778, 789, 790, 792, 796, 799, 800, 808, 809, 828, 831, 839, 840, 845, 849, 858, 859, 863, 864, 868, 870, 872, 873, 880, 889, 890, 893, 896, 899, 900, 907, 908, 909, 910, 911, 913, 915, 919, 920, 957, 971, 976, 977, 979, 982, 983, 984, 987, 988, 989, 990, 993, 994, 995, 997, 999, 1000, 1001, 1002, 1003, 1006, 1012, 1014, 1018, 1019, 1021, 1028, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "tune": [4, 45, 56, 72, 101, 112, 118, 147, 151, 163, 170, 188, 203, 204, 216, 224, 238, 254, 265, 285, 306, 338, 342, 346, 351, 362, 366, 367, 368, 392, 393, 402, 406, 407, 411, 414, 416, 417, 450, 460, 557, 558, 592, 611, 612, 613, 615, 617, 618, 620, 621, 623, 641, 657, 688, 692, 855, 904, 981, 982, 983, 984, 986, 987, 990, 991, 993, 1001, 1002, 1013, 1023, 1027, 1041, 1043], "just": [4, 13, 32, 71, 87, 96, 118, 122, 148, 189, 196, 221, 233, 260, 267, 271, 283, 299, 338, 351, 352, 360, 362, 374, 378, 379, 380, 381, 383, 384, 387, 391, 392, 393, 404, 407, 408, 411, 414, 416, 419, 466, 531, 533, 540, 544, 553, 554, 555, 556, 557, 558, 561, 562, 563, 564, 577, 582, 608, 609, 644, 650, 655, 656, 658, 660, 664, 665, 666, 674, 675, 676, 802, 818, 848, 856, 857, 976, 983, 986, 987, 988, 991, 995, 997, 1001, 1007, 1019, 1027, 1031, 1033, 1035, 1039, 1043], "had": [4, 9, 48, 125, 156, 235, 305, 311, 318, 362, 379, 380, 415, 418, 442, 977, 987, 1011, 1012, 1027, 1028, 1034, 1035, 1036, 1037, 1038, 1042], "explicit": [4, 166, 170, 175, 227, 235, 243, 275, 342, 366, 367, 368, 378, 380, 391, 393, 394, 408, 415, 421, 470, 497, 499, 500, 539, 549, 550, 629, 636, 637, 639, 674, 796, 797, 804, 843, 851, 859, 899, 904, 951, 955, 979, 981, 983, 987, 997, 1003, 1006, 1008, 1027, 1031, 1036, 1037, 1040, 1044], "pass": [4, 7, 8, 21, 22, 35, 39, 118, 129, 145, 180, 183, 200, 229, 231, 232, 235, 238, 239, 241, 250, 258, 261, 312, 315, 318, 343, 353, 362, 366, 367, 368, 374, 379, 380, 381, 384, 385, 386, 387, 388, 391, 393, 398, 401, 403, 407, 408, 411, 412, 414, 415, 417, 418, 419, 424, 425, 429, 430, 435, 436, 438, 440, 441, 442, 444, 445, 446, 447, 448, 450, 452, 455, 457, 458, 460, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 486, 489, 490, 493, 494, 495, 501, 506, 507, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 541, 542, 543, 544, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 579, 580, 586, 587, 588, 589, 591, 592, 595, 605, 606, 608, 609, 615, 618, 624, 629, 630, 632, 633, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 682, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 729, 730, 739, 760, 771, 775, 776, 777, 778, 785, 789, 790, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 808, 810, 811, 812, 813, 814, 815, 816, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 858, 859, 862, 863, 864, 865, 866, 870, 871, 872, 873, 874, 876, 878, 879, 880, 888, 889, 890, 891, 892, 894, 895, 896, 897, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 918, 919, 920, 926, 930, 931, 935, 936, 938, 940, 942, 944, 947, 948, 955, 957, 958, 961, 976, 977, 983, 985, 987, 988, 989, 990, 991, 994, 997, 1000, 1001, 1002, 1007, 1011, 1012, 1016, 1024, 1027, 1028, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "them": [4, 5, 8, 33, 40, 41, 50, 54, 56, 57, 61, 66, 67, 71, 72, 87, 96, 98, 101, 113, 128, 143, 148, 151, 163, 164, 169, 170, 171, 175, 178, 183, 194, 200, 201, 203, 217, 232, 235, 238, 239, 258, 260, 261, 263, 269, 278, 285, 305, 310, 312, 318, 329, 338, 353, 360, 366, 368, 374, 377, 379, 380, 381, 382, 383, 387, 391, 393, 394, 396, 398, 401, 405, 406, 407, 408, 411, 412, 414, 415, 417, 442, 445, 447, 448, 455, 462, 465, 491, 492, 506, 565, 566, 567, 568, 605, 606, 614, 618, 619, 622, 630, 637, 662, 690, 765, 768, 771, 775, 776, 777, 778, 786, 796, 810, 817, 824, 859, 863, 868, 869, 873, 877, 879, 880, 889, 890, 896, 907, 908, 944, 953, 976, 977, 983, 986, 987, 988, 990, 991, 992, 997, 1002, 1003, 1005, 1006, 1010, 1011, 1012, 1019, 1020, 1021, 1027, 1028, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "But": [4, 9, 54, 168, 200, 201, 260, 283, 305, 379, 391, 407, 410, 413, 414, 460, 743, 907, 908, 976, 987, 1002, 1007], "much": [4, 6, 7, 9, 13, 20, 26, 41, 56, 81, 83, 93, 99, 105, 117, 125, 126, 132, 133, 134, 151, 163, 164, 169, 170, 171, 172, 175, 196, 197, 201, 232, 235, 260, 262, 263, 266, 271, 301, 306, 310, 311, 312, 317, 318, 320, 338, 343, 351, 352, 362, 366, 367, 368, 374, 379, 380, 381, 384, 387, 391, 392, 397, 405, 406, 409, 410, 411, 412, 413, 414, 415, 416, 445, 446, 494, 532, 533, 534, 536, 557, 558, 559, 560, 656, 657, 664, 665, 666, 674, 675, 676, 690, 776, 777, 799, 800, 814, 874, 892, 899, 976, 979, 982, 983, 984, 986, 987, 988, 990, 991, 993, 995, 999, 1000, 1002, 1003, 1007, 1011, 1016, 1017, 1019, 1020, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "monoton": [4, 26, 111, 136, 166, 170, 217, 231, 239, 316, 405, 555, 556, 559, 560, 562, 563, 630, 633, 634, 692, 704, 875, 887, 901, 904, 907, 908, 909, 910, 984, 988, 997, 1002, 1008, 1034, 1038, 1042, 1044], "relationship": [4, 13, 21, 112, 113, 157, 168, 169, 178, 183, 199, 201, 202, 267, 281, 306, 312, 322, 393, 407, 409, 411, 460, 494, 634, 712, 984, 987, 989, 990, 994, 995, 1019, 1032], "ordin": [4, 54, 72, 132, 238, 308, 311, 312, 317, 320, 373, 393, 414, 494, 565, 707, 864, 867, 872, 873, 880, 983, 984, 997, 1007, 1035, 1041], "case": [4, 7, 8, 13, 26, 28, 35, 38, 50, 53, 56, 58, 62, 67, 72, 73, 82, 87, 101, 103, 115, 117, 118, 125, 126, 132, 145, 147, 148, 151, 158, 169, 170, 172, 183, 185, 188, 190, 199, 200, 201, 203, 204, 207, 213, 215, 216, 217, 228, 232, 233, 234, 235, 238, 239, 250, 254, 257, 259, 260, 261, 263, 266, 267, 269, 278, 283, 286, 290, 301, 305, 307, 310, 312, 315, 318, 342, 351, 352, 353, 360, 362, 366, 367, 368, 373, 374, 377, 379, 380, 381, 383, 384, 385, 386, 388, 391, 392, 393, 394, 397, 398, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 435, 438, 441, 442, 444, 445, 449, 451, 461, 462, 463, 465, 472, 494, 506, 507, 513, 537, 539, 540, 541, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 579, 580, 586, 589, 591, 592, 595, 600, 604, 607, 608, 609, 623, 625, 626, 628, 630, 645, 646, 651, 654, 655, 656, 657, 659, 661, 664, 666, 667, 670, 672, 673, 674, 678, 680, 681, 682, 683, 684, 685, 697, 701, 706, 707, 710, 716, 718, 719, 720, 723, 725, 726, 727, 731, 732, 735, 739, 740, 742, 743, 745, 747, 750, 751, 753, 760, 775, 778, 780, 781, 782, 784, 785, 786, 787, 791, 793, 795, 796, 799, 800, 802, 810, 814, 818, 819, 820, 821, 822, 823, 824, 826, 828, 836, 839, 840, 841, 842, 843, 845, 847, 848, 849, 850, 851, 859, 866, 868, 869, 872, 873, 874, 877, 878, 879, 880, 883, 889, 890, 891, 892, 899, 901, 904, 907, 908, 914, 915, 925, 936, 937, 955, 976, 977, 979, 981, 982, 984, 985, 986, 988, 989, 990, 991, 993, 994, 997, 1001, 1002, 1003, 1006, 1007, 1011, 1012, 1021, 1024, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "usual": [4, 13, 41, 79, 80, 82, 124, 125, 127, 132, 168, 170, 185, 199, 200, 254, 257, 260, 269, 270, 306, 318, 338, 362, 366, 367, 377, 379, 381, 387, 391, 392, 393, 397, 398, 404, 407, 408, 411, 412, 414, 415, 416, 448, 454, 536, 538, 540, 545, 557, 558, 605, 606, 628, 638, 656, 657, 664, 665, 666, 674, 675, 676, 690, 723, 755, 802, 823, 827, 899, 936, 976, 977, 979, 982, 983, 984, 986, 987, 988, 991, 992, 993, 994, 997, 1001, 1002, 1003, 1012, 1018, 1019, 1042], "hot": [4, 72, 117, 120, 132, 169, 199, 269, 306, 307, 311, 317, 338, 393, 414, 415, 549, 564, 579, 646, 656, 657, 667, 678, 862, 864, 866, 867, 870, 872, 873, 880, 983, 997, 1035, 1041, 1042], "encod": [4, 8, 11, 49, 56, 72, 96, 117, 132, 166, 169, 170, 171, 181, 198, 199, 238, 269, 304, 306, 307, 308, 313, 317, 319, 320, 338, 351, 353, 371, 373, 375, 381, 384, 391, 393, 408, 411, 412, 414, 415, 417, 462, 485, 494, 501, 524, 529, 535, 537, 538, 540, 542, 543, 544, 546, 549, 559, 560, 564, 565, 567, 579, 586, 587, 589, 628, 646, 656, 657, 667, 670, 678, 732, 798, 803, 805, 822, 825, 859, 860, 862, 864, 866, 867, 870, 872, 873, 880, 883, 897, 976, 977, 983, 984, 987, 989, 990, 992, 1001, 1006, 1007, 1008, 1023, 1028, 1029, 1035, 1039, 1041, 1042, 1043, 1044], "consist": [4, 7, 27, 33, 38, 57, 58, 71, 81, 91, 93, 96, 118, 122, 128, 135, 148, 154, 156, 159, 164, 172, 199, 217, 234, 238, 266, 269, 301, 310, 315, 318, 346, 352, 362, 366, 372, 374, 376, 379, 381, 385, 386, 387, 388, 392, 393, 394, 405, 407, 409, 413, 414, 415, 425, 426, 429, 430, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 461, 462, 463, 465, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 488, 495, 529, 531, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 552, 554, 555, 556, 557, 558, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 586, 587, 589, 609, 625, 626, 627, 628, 633, 636, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 658, 659, 660, 661, 662, 663, 665, 668, 670, 671, 672, 675, 676, 677, 685, 686, 687, 688, 689, 698, 732, 794, 795, 803, 827, 828, 829, 831, 832, 833, 834, 842, 843, 845, 847, 850, 851, 857, 862, 863, 864, 866, 870, 871, 874, 875, 877, 878, 880, 891, 892, 895, 899, 900, 902, 903, 905, 908, 910, 919, 921, 942, 958, 961, 976, 979, 980, 981, 983, 984, 986, 987, 988, 990, 991, 997, 1000, 1002, 1003, 1005, 1007, 1011, 1012, 1019, 1027, 1028, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044], "scale": [4, 5, 12, 26, 28, 38, 41, 44, 47, 48, 57, 59, 62, 72, 73, 80, 83, 87, 98, 101, 123, 129, 148, 151, 152, 153, 156, 157, 158, 160, 166, 170, 175, 179, 180, 187, 190, 199, 201, 203, 213, 214, 215, 217, 219, 222, 226, 228, 234, 238, 250, 257, 260, 261, 262, 263, 267, 286, 288, 300, 301, 302, 304, 305, 313, 316, 319, 321, 322, 330, 333, 335, 338, 342, 349, 362, 365, 366, 371, 372, 373, 376, 379, 384, 388, 391, 392, 393, 406, 407, 408, 412, 414, 415, 416, 417, 444, 445, 448, 449, 455, 462, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 499, 508, 512, 513, 522, 532, 536, 538, 539, 545, 547, 548, 559, 560, 580, 588, 589, 595, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 629, 630, 639, 642, 643, 644, 645, 647, 650, 656, 657, 658, 659, 660, 670, 672, 674, 675, 676, 679, 685, 686, 687, 688, 690, 692, 697, 701, 714, 738, 744, 754, 756, 766, 772, 774, 802, 810, 813, 825, 826, 827, 839, 840, 841, 856, 857, 860, 863, 868, 869, 871, 874, 876, 877, 879, 884, 885, 886, 888, 889, 891, 892, 899, 900, 901, 902, 903, 904, 905, 962, 963, 964, 965, 968, 976, 979, 980, 983, 987, 988, 989, 990, 991, 995, 1001, 1002, 1007, 1008, 1011, 1012, 1019, 1020, 1022, 1023, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "same": [4, 7, 8, 13, 17, 21, 27, 35, 38, 41, 45, 54, 56, 58, 59, 65, 71, 72, 73, 93, 96, 98, 101, 103, 105, 113, 115, 119, 122, 125, 126, 130, 148, 151, 169, 170, 172, 185, 187, 188, 193, 199, 200, 201, 207, 217, 235, 239, 250, 255, 256, 257, 258, 260, 261, 263, 265, 266, 268, 273, 283, 286, 288, 301, 305, 306, 308, 310, 311, 315, 317, 328, 338, 351, 352, 353, 360, 362, 366, 367, 368, 373, 374, 376, 378, 379, 381, 383, 385, 388, 391, 392, 393, 394, 398, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 428, 432, 436, 437, 444, 448, 454, 463, 467, 468, 469, 470, 471, 472, 473, 474, 476, 491, 493, 494, 496, 502, 506, 507, 529, 530, 533, 534, 535, 536, 537, 538, 541, 545, 547, 549, 550, 551, 552, 555, 557, 558, 559, 560, 562, 563, 565, 566, 587, 588, 600, 601, 604, 608, 609, 611, 620, 625, 626, 627, 630, 631, 644, 647, 650, 651, 653, 656, 657, 661, 664, 665, 666, 670, 671, 672, 673, 674, 675, 676, 682, 685, 697, 702, 703, 710, 711, 713, 715, 723, 728, 729, 733, 739, 752, 753, 754, 775, 776, 777, 783, 785, 789, 791, 792, 794, 795, 796, 797, 799, 800, 802, 804, 805, 810, 814, 815, 818, 820, 821, 822, 823, 824, 825, 826, 841, 842, 843, 847, 849, 850, 851, 862, 863, 864, 868, 869, 871, 873, 874, 875, 876, 877, 878, 879, 881, 888, 899, 900, 907, 909, 921, 925, 936, 953, 958, 961, 962, 972, 976, 977, 979, 981, 983, 984, 985, 986, 987, 988, 990, 991, 992, 993, 994, 995, 997, 1001, 1002, 1003, 1006, 1007, 1016, 1021, 1027, 1028, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "minmaxscal": [4, 5, 73, 144, 175, 221, 238, 300, 317, 368, 403, 408, 462, 885, 977, 997, 1029, 1032, 1035, 1037, 1038, 1039, 1043, 1044], "although": [4, 9, 26, 119, 132, 168, 196, 217, 228, 247, 281, 342, 362, 368, 381, 393, 407, 408, 412, 415, 494, 813, 816, 870, 986, 988, 989, 990, 993, 1003, 1012, 1019, 1020, 1021, 1027, 1035, 1042], "doe": [4, 7, 8, 9, 12, 13, 25, 26, 28, 32, 35, 41, 47, 54, 56, 58, 71, 73, 74, 87, 106, 112, 117, 118, 121, 122, 123, 127, 132, 148, 157, 169, 170, 183, 196, 199, 205, 217, 220, 221, 222, 225, 228, 231, 232, 233, 235, 236, 238, 247, 248, 255, 260, 262, 263, 267, 269, 270, 281, 283, 296, 305, 307, 309, 311, 312, 318, 319, 328, 329, 336, 338, 346, 348, 351, 352, 353, 366, 367, 373, 377, 379, 380, 381, 383, 387, 392, 393, 398, 401, 405, 406, 407, 408, 411, 412, 414, 415, 416, 417, 432, 438, 440, 444, 445, 447, 448, 452, 454, 463, 465, 470, 471, 477, 485, 497, 501, 506, 525, 533, 535, 536, 537, 539, 542, 544, 547, 548, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 562, 563, 565, 566, 567, 568, 579, 580, 581, 586, 587, 589, 591, 592, 595, 600, 604, 608, 630, 636, 647, 648, 649, 652, 653, 654, 657, 669, 671, 673, 680, 681, 696, 698, 700, 705, 725, 726, 727, 731, 733, 735, 740, 743, 775, 780, 781, 784, 785, 791, 796, 799, 800, 810, 856, 858, 860, 861, 862, 864, 866, 868, 871, 872, 873, 876, 879, 880, 888, 891, 892, 896, 899, 900, 907, 908, 909, 910, 914, 919, 923, 936, 939, 940, 953, 955, 971, 976, 977, 979, 981, 982, 983, 984, 986, 987, 988, 989, 990, 991, 993, 995, 997, 1001, 1002, 1003, 1021, 1027, 1028, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044], "result": [4, 5, 6, 9, 13, 14, 20, 25, 26, 27, 28, 31, 33, 35, 38, 41, 43, 44, 45, 47, 49, 54, 55, 56, 61, 63, 67, 72, 74, 76, 82, 87, 96, 99, 101, 102, 106, 115, 116, 117, 119, 122, 123, 125, 126, 128, 130, 131, 140, 147, 148, 151, 153, 155, 159, 163, 169, 170, 171, 172, 179, 184, 185, 188, 189, 194, 200, 201, 203, 207, 213, 214, 217, 220, 221, 224, 228, 231, 233, 239, 245, 250, 251, 254, 255, 258, 260, 261, 263, 266, 267, 268, 269, 271, 272, 275, 278, 283, 285, 289, 299, 300, 301, 305, 306, 307, 310, 315, 317, 319, 320, 321, 322, 325, 328, 330, 338, 342, 343, 346, 351, 353, 358, 359, 360, 366, 367, 368, 373, 374, 376, 379, 381, 383, 384, 385, 387, 391, 392, 393, 394, 401, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 419, 432, 438, 439, 441, 443, 444, 445, 448, 449, 450, 451, 452, 453, 455, 457, 460, 462, 465, 467, 468, 469, 470, 471, 472, 473, 474, 477, 487, 506, 507, 509, 511, 529, 530, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 549, 550, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 567, 577, 578, 579, 580, 582, 586, 587, 589, 605, 606, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 628, 629, 630, 632, 634, 638, 641, 650, 651, 656, 662, 663, 664, 665, 674, 675, 676, 684, 687, 688, 689, 690, 691, 692, 693, 706, 708, 710, 715, 722, 723, 725, 726, 727, 728, 729, 733, 734, 735, 751, 753, 754, 761, 768, 771, 775, 776, 777, 778, 780, 781, 782, 784, 790, 791, 794, 795, 796, 798, 799, 800, 801, 806, 810, 811, 812, 815, 816, 820, 826, 827, 828, 830, 831, 832, 833, 839, 840, 841, 842, 843, 844, 845, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 861, 863, 864, 872, 873, 876, 877, 880, 888, 892, 896, 899, 901, 904, 907, 908, 909, 910, 911, 912, 919, 920, 935, 936, 938, 942, 952, 958, 961, 977, 979, 981, 982, 983, 984, 986, 987, 988, 990, 991, 992, 993, 994, 995, 997, 999, 1001, 1002, 1003, 1006, 1007, 1010, 1012, 1016, 1017, 1019, 1020, 1021, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "compar": [4, 5, 9, 13, 20, 21, 25, 26, 28, 35, 37, 38, 40, 41, 42, 44, 48, 50, 53, 55, 56, 57, 58, 59, 62, 65, 68, 69, 72, 73, 74, 75, 81, 82, 85, 87, 88, 92, 93, 99, 103, 105, 111, 112, 113, 115, 117, 121, 122, 123, 125, 127, 128, 130, 132, 135, 136, 139, 148, 155, 163, 164, 166, 169, 170, 171, 172, 177, 179, 181, 183, 187, 188, 194, 196, 199, 200, 202, 203, 205, 207, 209, 213, 216, 217, 218, 220, 221, 224, 227, 230, 233, 236, 238, 239, 241, 243, 247, 248, 253, 255, 257, 258, 259, 261, 263, 265, 267, 269, 271, 272, 274, 276, 278, 283, 284, 285, 286, 288, 289, 290, 292, 293, 294, 295, 297, 298, 301, 303, 304, 306, 309, 310, 312, 313, 317, 342, 351, 352, 353, 359, 360, 362, 368, 374, 376, 379, 381, 404, 405, 407, 409, 410, 411, 412, 414, 416, 417, 438, 439, 440, 442, 443, 444, 446, 447, 448, 450, 456, 461, 462, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 488, 494, 500, 502, 510, 512, 520, 522, 526, 529, 535, 537, 543, 544, 549, 550, 559, 560, 561, 562, 563, 569, 629, 637, 642, 643, 651, 653, 655, 656, 661, 664, 666, 674, 675, 682, 693, 703, 710, 713, 728, 735, 740, 783, 795, 796, 801, 810, 822, 825, 832, 841, 845, 848, 852, 856, 859, 860, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 879, 880, 884, 885, 886, 887, 888, 889, 890, 899, 900, 901, 903, 904, 976, 979, 980, 981, 983, 984, 986, 987, 988, 989, 990, 991, 993, 997, 998, 1001, 1002, 1003, 1005, 1006, 1008, 1019, 1020, 1027, 1029, 1034, 1035, 1040], "linear_model": [4, 7, 8, 10, 14, 26, 28, 31, 55, 72, 74, 76, 87, 117, 132, 134, 135, 138, 139, 147, 148, 151, 163, 166, 168, 169, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 211, 212, 213, 214, 215, 216, 217, 218, 228, 229, 230, 231, 235, 237, 240, 242, 256, 263, 268, 269, 273, 274, 281, 302, 306, 307, 310, 312, 315, 316, 317, 318, 319, 321, 322, 329, 351, 362, 366, 368, 378, 379, 381, 385, 387, 388, 392, 393, 398, 408, 414, 427, 432, 436, 463, 535, 537, 540, 541, 543, 544, 546, 565, 566, 567, 568, 595, 629, 630, 632, 633, 636, 638, 639, 640, 641, 698, 699, 785, 810, 818, 820, 821, 822, 824, 826, 830, 831, 832, 833, 857, 874, 878, 899, 900, 903, 906, 928, 930, 931, 932, 971, 979, 983, 987, 988, 993, 995, 997, 1001, 1008, 1016, 1017, 1019, 1021, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "ridgecv": [4, 76, 132, 148, 169, 237, 393, 398, 414, 566, 641, 670, 673, 983, 1027, 1029, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041], "onehotencod": [4, 72, 117, 122, 132, 169, 170, 199, 217, 230, 238, 240, 242, 311, 316, 318, 321, 322, 373, 393, 408, 414, 464, 465, 564, 579, 580, 862, 866, 867, 870, 873, 880, 977, 997, 1028, 1031, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "one_hot_encod": [4, 122], "handle_unknown": [4, 72, 117, 122, 132, 170, 171, 230, 238, 240, 242, 311, 316, 319, 872, 873, 997, 1031, 1035, 1039, 1040], "ignor": [4, 6, 8, 18, 45, 50, 56, 63, 72, 112, 114, 117, 122, 129, 132, 170, 187, 191, 199, 208, 214, 230, 235, 240, 242, 251, 255, 300, 301, 310, 311, 316, 319, 342, 343, 352, 357, 367, 379, 381, 383, 385, 393, 397, 407, 408, 414, 415, 425, 426, 429, 432, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 458, 459, 462, 463, 465, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 486, 501, 506, 507, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 577, 579, 580, 581, 586, 587, 588, 589, 592, 595, 600, 601, 608, 609, 625, 626, 627, 628, 630, 631, 633, 637, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 686, 687, 688, 689, 690, 705, 711, 712, 723, 726, 727, 735, 752, 753, 760, 766, 771, 775, 780, 781, 784, 785, 794, 795, 797, 798, 799, 801, 803, 804, 805, 806, 809, 811, 812, 813, 814, 815, 816, 817, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 856, 857, 858, 859, 862, 863, 864, 865, 866, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 891, 892, 894, 895, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 962, 983, 984, 987, 989, 993, 997, 1002, 1017, 1027, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1044, 1045], "sparse_output": [4, 122, 242, 311, 319, 322, 564, 866, 870, 872, 878, 883, 997, 1042, 1043], "alpha": [4, 5, 7, 8, 10, 12, 13, 14, 17, 18, 25, 27, 32, 35, 38, 41, 43, 46, 53, 57, 61, 66, 76, 83, 87, 96, 98, 99, 101, 102, 104, 105, 112, 114, 115, 121, 125, 128, 129, 131, 132, 133, 148, 151, 154, 156, 157, 158, 159, 160, 163, 164, 169, 178, 179, 180, 181, 183, 184, 185, 187, 188, 193, 194, 196, 197, 199, 200, 201, 203, 204, 208, 211, 212, 217, 220, 221, 224, 233, 234, 241, 245, 260, 261, 262, 263, 264, 267, 268, 270, 272, 273, 281, 283, 286, 288, 291, 293, 299, 301, 305, 306, 307, 308, 310, 312, 316, 318, 319, 322, 327, 329, 335, 336, 339, 340, 342, 343, 346, 347, 348, 351, 366, 374, 381, 385, 391, 409, 410, 412, 414, 416, 417, 419, 444, 469, 470, 476, 525, 529, 531, 533, 534, 535, 536, 537, 538, 540, 541, 543, 544, 545, 546, 558, 593, 594, 596, 609, 611, 613, 614, 621, 629, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 658, 659, 660, 661, 666, 667, 668, 670, 671, 672, 673, 674, 675, 676, 678, 679, 680, 681, 682, 685, 720, 745, 834, 835, 836, 838, 856, 857, 895, 907, 908, 909, 910, 976, 983, 987, 989, 991, 995, 1000, 1001, 1002, 1003, 1016, 1019, 1021, 1024, 1027, 1029, 1030, 1031, 1032, 1034, 1035, 1039, 1040, 1041, 1042, 1043], "logspac": [4, 12, 74, 79, 103, 138, 148, 152, 157, 169, 192, 203, 204, 232, 234, 249, 261, 273, 275, 287, 299, 307, 310, 338, 346, 818, 826, 982, 983, 1016, 1017, 1019], "naive_linear_pipelin": 4, "transform": [4, 5, 6, 8, 10, 12, 14, 26, 28, 45, 47, 48, 49, 52, 55, 58, 63, 70, 74, 75, 77, 87, 90, 91, 98, 99, 101, 102, 104, 105, 111, 116, 118, 122, 131, 132, 134, 136, 145, 157, 164, 166, 169, 170, 171, 175, 191, 199, 200, 207, 213, 215, 217, 221, 224, 228, 230, 231, 233, 235, 236, 238, 242, 247, 256, 257, 258, 261, 269, 281, 283, 285, 291, 292, 293, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 320, 322, 338, 341, 342, 351, 353, 362, 373, 374, 375, 376, 379, 381, 384, 388, 393, 398, 403, 405, 406, 407, 409, 410, 412, 414, 415, 416, 417, 423, 428, 431, 435, 439, 440, 441, 443, 445, 447, 450, 462, 463, 464, 465, 466, 480, 481, 482, 483, 486, 487, 494, 501, 506, 507, 512, 513, 522, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 545, 547, 548, 555, 557, 559, 562, 564, 565, 566, 567, 568, 579, 580, 581, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 633, 634, 636, 637, 638, 639, 640, 651, 656, 661, 671, 674, 682, 686, 687, 688, 689, 690, 692, 699, 700, 711, 750, 751, 782, 796, 799, 800, 810, 825, 828, 834, 843, 848, 851, 855, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 897, 899, 901, 904, 905, 928, 930, 945, 976, 977, 979, 981, 983, 984, 987, 988, 991, 1001, 1002, 1004, 1006, 1007, 1008, 1009, 1012, 1017, 1018, 1021, 1023, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "remaind": [4, 122, 169, 188, 199, 201, 217, 238, 320, 356, 408, 462, 465, 1027, 1034, 1035, 1036, 1039, 1040, 1043], "alpha_": [4, 83, 138, 169, 179, 187, 188, 470, 609, 642, 643, 645, 649, 651, 653, 654, 659, 661, 671, 673, 983, 1003, 1016, 1027, 1034], "7298221281347033": 4, "142": [4, 13, 59, 181, 218, 414, 1008], "014": [4, 7, 16, 59, 145, 149, 156, 161, 268, 352, 385, 1008], "184": [4, 199, 270, 276, 302, 351, 385, 1008, 1019], "020": [4, 995], "affirm": 4, "select": [4, 7, 9, 10, 21, 35, 37, 38, 45, 48, 56, 58, 63, 66, 69, 70, 72, 75, 77, 79, 83, 93, 95, 96, 100, 105, 106, 107, 112, 114, 120, 122, 125, 132, 143, 145, 149, 156, 158, 169, 170, 172, 175, 177, 179, 181, 183, 185, 186, 198, 203, 207, 214, 217, 218, 221, 228, 232, 234, 238, 244, 245, 246, 247, 251, 252, 258, 259, 260, 261, 265, 273, 287, 305, 310, 311, 317, 321, 325, 326, 329, 333, 338, 346, 349, 351, 352, 353, 362, 366, 367, 374, 376, 377, 379, 381, 387, 392, 393, 404, 407, 408, 409, 412, 414, 415, 417, 441, 443, 444, 445, 447, 449, 451, 456, 457, 458, 462, 464, 465, 470, 471, 474, 486, 487, 490, 491, 494, 495, 498, 499, 500, 502, 510, 513, 530, 532, 533, 538, 539, 542, 547, 549, 556, 557, 558, 561, 563, 579, 586, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 625, 629, 630, 643, 644, 645, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 669, 671, 674, 676, 680, 681, 689, 690, 695, 710, 714, 716, 751, 785, 789, 790, 794, 795, 796, 799, 800, 801, 802, 810, 821, 822, 823, 825, 827, 841, 842, 843, 845, 847, 849, 850, 851, 859, 860, 864, 869, 875, 879, 896, 899, 900, 904, 907, 908, 909, 910, 915, 956, 957, 981, 982, 984, 986, 987, 988, 990, 991, 993, 997, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1015, 1019, 1020, 1021, 1023, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044], "specifi": [4, 21, 56, 96, 122, 123, 152, 155, 157, 158, 159, 188, 200, 207, 245, 268, 366, 367, 373, 377, 379, 381, 388, 392, 393, 398, 401, 407, 408, 411, 412, 414, 416, 417, 419, 421, 427, 435, 439, 443, 448, 450, 461, 462, 465, 467, 468, 470, 471, 472, 473, 474, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 501, 513, 525, 529, 531, 535, 536, 538, 539, 544, 545, 550, 555, 557, 558, 559, 560, 562, 565, 566, 581, 582, 591, 592, 595, 600, 608, 609, 618, 629, 630, 631, 636, 641, 644, 645, 646, 649, 650, 651, 653, 654, 656, 657, 658, 659, 660, 661, 663, 666, 667, 670, 671, 672, 673, 674, 675, 678, 679, 680, 681, 682, 685, 689, 696, 698, 700, 707, 709, 726, 727, 735, 739, 751, 768, 776, 777, 780, 781, 784, 796, 798, 799, 800, 802, 803, 805, 809, 810, 813, 818, 819, 820, 821, 822, 823, 824, 826, 830, 833, 834, 835, 837, 838, 839, 840, 844, 849, 872, 873, 874, 877, 878, 880, 895, 899, 900, 901, 902, 903, 904, 905, 906, 907, 909, 931, 938, 971, 977, 983, 984, 986, 987, 990, 994, 995, 997, 1000, 1001, 1002, 1016, 1020, 1027, 1033, 1034, 1035, 1036, 1038, 1039, 1041, 1042, 1043, 1044, 1045], "three": [4, 7, 27, 35, 41, 42, 46, 47, 56, 59, 79, 91, 92, 112, 117, 119, 122, 123, 124, 133, 134, 135, 145, 148, 159, 169, 183, 191, 196, 199, 201, 208, 210, 234, 235, 245, 248, 281, 311, 312, 316, 367, 372, 376, 383, 397, 404, 407, 411, 412, 413, 415, 449, 460, 496, 707, 938, 980, 982, 983, 984, 987, 990, 997, 1001, 1002, 1005, 1012, 1020, 1027], "higher": [4, 13, 58, 81, 99, 103, 112, 115, 117, 118, 125, 128, 151, 153, 158, 159, 169, 170, 171, 175, 199, 200, 203, 217, 224, 225, 251, 254, 258, 260, 263, 274, 288, 310, 338, 342, 351, 352, 353, 362, 366, 374, 377, 381, 404, 407, 409, 414, 416, 417, 418, 442, 446, 447, 469, 476, 507, 530, 537, 541, 546, 551, 552, 555, 556, 557, 558, 559, 560, 562, 563, 564, 571, 586, 589, 605, 606, 617, 625, 629, 633, 635, 644, 645, 650, 651, 658, 659, 660, 661, 674, 676, 677, 702, 721, 725, 749, 782, 794, 796, 799, 800, 802, 810, 817, 818, 823, 826, 845, 848, 874, 891, 892, 893, 899, 900, 901, 902, 903, 904, 905, 912, 979, 983, 984, 986, 987, 990, 994, 997, 1001, 1002, 1019, 1021, 1028, 1033, 1035, 1042, 1044], "suspect": 4, "origin": [4, 5, 14, 17, 21, 22, 47, 48, 49, 52, 57, 59, 75, 76, 91, 96, 98, 99, 105, 130, 144, 145, 148, 151, 153, 155, 156, 163, 164, 170, 175, 187, 188, 203, 220, 221, 222, 224, 225, 232, 233, 234, 238, 251, 257, 263, 286, 291, 302, 306, 310, 321, 326, 342, 344, 351, 353, 362, 367, 374, 376, 378, 379, 381, 383, 384, 391, 393, 401, 404, 407, 408, 411, 412, 414, 415, 417, 418, 419, 420, 432, 435, 439, 441, 442, 443, 444, 445, 447, 448, 457, 461, 462, 463, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 491, 492, 493, 499, 517, 529, 531, 532, 533, 535, 536, 537, 538, 539, 541, 542, 543, 544, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 571, 574, 579, 580, 582, 586, 588, 589, 592, 605, 606, 608, 609, 612, 628, 630, 633, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 688, 690, 694, 699, 725, 760, 766, 797, 798, 803, 805, 814, 824, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 844, 845, 846, 849, 850, 856, 857, 859, 862, 863, 864, 865, 866, 867, 868, 871, 872, 873, 875, 876, 877, 878, 879, 888, 891, 892, 893, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 917, 919, 920, 924, 925, 946, 958, 961, 980, 981, 983, 984, 986, 987, 990, 993, 998, 999, 1000, 1001, 1004, 1006, 1011, 1012, 1021, 1030, 1031, 1033, 1035, 1037, 1039, 1041, 1043], "mere": [4, 260, 393, 826, 1001], "min": [4, 10, 11, 12, 13, 14, 26, 28, 32, 53, 59, 76, 96, 99, 112, 114, 121, 124, 125, 130, 140, 148, 153, 155, 156, 157, 164, 169, 181, 187, 188, 194, 201, 202, 205, 221, 232, 233, 236, 281, 289, 290, 296, 299, 301, 305, 307, 308, 310, 330, 344, 347, 388, 407, 410, 412, 480, 481, 482, 483, 510, 532, 533, 536, 538, 539, 547, 548, 561, 625, 629, 630, 652, 653, 654, 655, 680, 681, 702, 738, 754, 777, 799, 800, 848, 856, 857, 869, 878, 885, 936, 952, 978, 983, 987, 990, 997, 1033, 1036, 1038, 1039, 1042], "prevent": [4, 56, 123, 125, 145, 168, 200, 203, 305, 311, 312, 338, 351, 356, 362, 379, 381, 383, 391, 392, 407, 412, 415, 440, 447, 486, 487, 559, 560, 588, 589, 609, 725, 782, 856, 857, 884, 885, 887, 888, 889, 890, 987, 989, 992, 993, 997, 1003, 1019, 1029, 1030, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042], "properli": [4, 13, 26, 56, 129, 156, 255, 315, 368, 377, 379, 383, 387, 413, 899, 900, 901, 902, 903, 904, 905, 976, 1030, 1032, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "automat": [4, 8, 12, 47, 64, 66, 72, 103, 138, 147, 178, 202, 245, 246, 258, 261, 305, 312, 316, 320, 329, 340, 342, 367, 374, 377, 379, 381, 383, 387, 393, 397, 403, 407, 408, 409, 412, 414, 415, 416, 431, 448, 450, 454, 460, 462, 463, 465, 494, 497, 513, 536, 538, 539, 545, 547, 549, 555, 559, 562, 581, 586, 589, 592, 600, 641, 643, 644, 645, 650, 651, 656, 657, 658, 659, 660, 661, 664, 665, 666, 670, 672, 673, 674, 676, 679, 682, 685, 686, 689, 693, 798, 813, 816, 825, 835, 856, 857, 860, 861, 863, 872, 873, 880, 891, 892, 899, 900, 901, 904, 907, 909, 913, 925, 958, 961, 976, 978, 981, 986, 991, 997, 1001, 1003, 1006, 1007, 1016, 1027, 1030, 1031, 1032, 1038, 1041, 1042, 1043, 1044], "raw": [4, 12, 15, 38, 82, 98, 132, 156, 169, 175, 302, 312, 327, 353, 366, 374, 381, 387, 393, 405, 406, 407, 409, 412, 415, 467, 472, 499, 500, 501, 557, 558, 559, 561, 580, 586, 587, 588, 589, 632, 675, 688, 692, 703, 783, 845, 903, 984, 987, 991, 993, 994, 997, 1000, 1018, 1020, 1028, 1032, 1035, 1038, 1044], "recogn": [4, 5, 30, 36, 52, 54, 87, 90, 99, 120, 146, 166, 200, 254, 258, 287, 302, 318, 325, 326, 385, 398, 407, 415, 500, 695, 711, 825, 904, 987, 1008, 1012, 1044], "increas": [4, 7, 15, 27, 38, 44, 56, 58, 59, 62, 76, 99, 112, 113, 115, 118, 121, 123, 129, 144, 148, 151, 155, 156, 157, 160, 169, 170, 175, 179, 181, 190, 199, 200, 201, 203, 217, 225, 232, 246, 247, 260, 261, 262, 267, 273, 299, 306, 307, 310, 317, 326, 338, 346, 352, 353, 356, 366, 367, 368, 378, 387, 388, 405, 407, 409, 412, 414, 415, 418, 438, 442, 444, 450, 461, 469, 470, 476, 530, 534, 551, 552, 555, 556, 557, 558, 559, 560, 562, 563, 565, 566, 586, 589, 625, 633, 634, 635, 643, 648, 649, 652, 653, 654, 656, 657, 664, 665, 666, 674, 675, 676, 680, 681, 683, 684, 690, 704, 705, 710, 779, 786, 799, 800, 828, 847, 849, 850, 851, 854, 856, 857, 873, 899, 907, 908, 909, 910, 936, 976, 978, 982, 983, 984, 986, 987, 990, 997, 1001, 1002, 1003, 1011, 1027, 1029, 1032, 1036, 1038, 1039, 1042], "strong": [4, 13, 55, 151, 166, 168, 169, 177, 179, 192, 196, 197, 203, 204, 205, 218, 234, 281, 312, 346, 406, 412, 414, 522, 647, 670, 980, 981, 983, 984, 986, 994, 1002, 1008, 1019], "similar": [4, 5, 7, 12, 18, 21, 26, 27, 35, 38, 50, 52, 58, 61, 76, 87, 96, 100, 112, 125, 147, 151, 158, 168, 169, 170, 171, 183, 199, 201, 213, 220, 222, 223, 224, 228, 234, 235, 251, 257, 260, 263, 266, 267, 268, 278, 281, 283, 305, 318, 337, 342, 346, 352, 353, 362, 366, 371, 373, 375, 377, 378, 379, 381, 384, 385, 388, 391, 393, 401, 404, 405, 407, 410, 411, 412, 414, 415, 416, 417, 418, 438, 441, 442, 448, 450, 452, 453, 501, 506, 507, 534, 580, 587, 588, 589, 608, 675, 690, 693, 701, 703, 713, 717, 722, 725, 726, 728, 731, 735, 737, 752, 757, 758, 783, 789, 790, 793, 794, 795, 821, 826, 871, 892, 895, 899, 900, 901, 902, 920, 976, 979, 980, 982, 983, 984, 986, 988, 990, 991, 993, 994, 997, 999, 1000, 1001, 1002, 1003, 1006, 1007, 1012, 1020, 1023, 1027, 1031, 1032, 1033, 1035, 1039, 1040], "magnitud": [4, 105, 114, 152, 164, 169, 216, 238, 265, 305, 310, 318, 366, 374, 385, 407, 414, 417, 611, 650, 702, 879, 983, 987, 991, 997, 1001, 1003, 1029, 1036], "discret": [4, 32, 47, 76, 93, 105, 112, 130, 150, 161, 166, 170, 179, 199, 206, 217, 239, 278, 293, 299, 304, 308, 313, 358, 368, 371, 374, 375, 383, 392, 393, 407, 412, 415, 417, 436, 437, 446, 450, 458, 459, 460, 490, 512, 513, 520, 551, 557, 569, 586, 587, 590, 593, 594, 597, 598, 605, 606, 608, 609, 610, 614, 615, 616, 655, 656, 739, 796, 807, 825, 834, 835, 838, 860, 864, 872, 873, 876, 879, 888, 899, 904, 908, 950, 976, 983, 984, 985, 987, 988, 990, 1003, 1006, 1008, 1012, 1023, 1029, 1032, 1040, 1041, 1042], "manner": [4, 76, 96, 145, 170, 175, 247, 319, 320, 367, 379, 385, 407, 412, 414, 415, 707, 839, 840, 976, 987, 1003, 1030, 1037], "integ": [4, 18, 49, 54, 72, 169, 199, 217, 316, 317, 362, 366, 373, 374, 376, 381, 384, 388, 392, 393, 407, 408, 411, 412, 414, 415, 432, 435, 460, 462, 465, 470, 485, 494, 496, 499, 500, 501, 503, 506, 507, 510, 512, 513, 517, 520, 548, 557, 558, 559, 560, 561, 565, 566, 570, 580, 586, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 625, 626, 627, 628, 630, 631, 642, 649, 653, 657, 663, 671, 673, 674, 676, 697, 712, 732, 796, 798, 799, 800, 801, 803, 805, 810, 811, 812, 815, 816, 819, 822, 830, 833, 835, 838, 839, 840, 864, 872, 873, 878, 879, 880, 883, 893, 895, 907, 908, 909, 910, 915, 950, 951, 952, 956, 977, 983, 988, 990, 997, 1000, 1002, 1003, 1012, 1019, 1021, 1027, 1029, 1030, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044], "uniqu": [4, 17, 25, 31, 43, 48, 49, 58, 59, 64, 68, 119, 120, 126, 127, 169, 171, 183, 214, 217, 247, 269, 292, 311, 312, 321, 328, 351, 352, 353, 373, 381, 388, 393, 407, 408, 411, 414, 415, 438, 448, 452, 454, 462, 465, 494, 547, 548, 549, 551, 552, 555, 556, 557, 558, 559, 560, 562, 563, 564, 608, 631, 632, 633, 664, 666, 674, 695, 707, 751, 779, 796, 798, 810, 822, 827, 828, 831, 837, 846, 849, 851, 856, 870, 872, 873, 880, 883, 899, 901, 907, 908, 909, 910, 924, 936, 950, 951, 983, 988, 997, 1011, 1019, 1035, 1038, 1039, 1041, 1042, 1043, 1044], "decid": [4, 11, 58, 61, 72, 123, 251, 257, 260, 267, 374, 379, 394, 415, 417, 448, 455, 557, 558, 609, 633, 644, 645, 648, 649, 650, 651, 652, 653, 654, 658, 659, 660, 661, 669, 679, 682, 794, 841, 842, 843, 845, 847, 849, 850, 851, 862, 986, 993, 1011, 1040, 1043], "treat": [4, 6, 72, 122, 132, 163, 169, 199, 269, 311, 317, 322, 328, 362, 379, 391, 393, 404, 414, 415, 440, 559, 560, 586, 587, 589, 605, 606, 630, 636, 643, 669, 672, 726, 727, 735, 751, 780, 781, 784, 785, 868, 869, 875, 876, 879, 880, 884, 887, 888, 890, 899, 900, 944, 977, 979, 983, 987, 988, 994, 997, 1001, 1003, 1017, 1031, 1039, 1043, 1044], "therebi": [4, 169, 411, 414, 979, 1037], "assumpt": [4, 9, 13, 26, 28, 37, 44, 69, 79, 80, 99, 156, 160, 166, 168, 199, 201, 228, 256, 281, 305, 385, 391, 392, 396, 405, 406, 407, 409, 411, 412, 415, 417, 445, 449, 451, 486, 501, 510, 530, 532, 539, 648, 652, 795, 796, 799, 800, 810, 836, 891, 892, 981, 983, 987, 988, 989, 990, 992, 993, 994, 997, 1000, 1003, 1008, 1034, 1040], "impli": [4, 151, 351, 352, 353, 412, 414, 417, 472, 571, 580, 608, 609, 620, 732, 923, 983, 984, 1021, 1038], "give": [4, 12, 13, 14, 25, 26, 40, 45, 50, 61, 63, 65, 71, 72, 76, 98, 124, 151, 156, 160, 163, 169, 170, 188, 190, 196, 199, 200, 201, 228, 251, 257, 262, 269, 285, 289, 292, 302, 318, 319, 329, 366, 368, 374, 376, 377, 378, 379, 381, 385, 387, 391, 392, 393, 394, 401, 404, 405, 406, 407, 408, 409, 412, 414, 415, 417, 419, 432, 444, 445, 447, 449, 457, 470, 494, 497, 501, 531, 536, 547, 548, 549, 550, 555, 556, 562, 563, 564, 591, 592, 595, 605, 606, 636, 645, 659, 663, 674, 718, 727, 733, 736, 791, 796, 799, 800, 810, 820, 821, 822, 824, 839, 840, 841, 842, 843, 845, 847, 849, 850, 851, 876, 877, 879, 880, 888, 983, 987, 990, 991, 992, 994, 995, 997, 1001, 1002, 1003, 1006, 1011, 1012, 1014, 1019, 1020, 1021, 1027, 1031, 1034, 1035, 1037, 1038, 1039, 1041, 1043], "lot": [4, 83, 169, 203, 374, 379, 380, 381, 387, 412, 414, 799, 800, 891, 892, 976, 999, 1001, 1002, 1006, 1007, 1011, 1020, 1021, 1027, 1032, 1034, 1035, 1036, 1037, 1039], "addit": [4, 5, 7, 12, 14, 15, 67, 72, 83, 91, 96, 99, 112, 116, 118, 119, 122, 123, 147, 156, 157, 158, 164, 169, 170, 178, 183, 188, 200, 201, 203, 224, 239, 262, 269, 274, 281, 305, 316, 317, 322, 327, 342, 353, 358, 362, 366, 367, 371, 372, 373, 374, 375, 377, 378, 379, 381, 384, 385, 387, 391, 392, 394, 397, 401, 406, 407, 409, 411, 412, 415, 416, 417, 418, 431, 439, 440, 442, 443, 444, 448, 455, 467, 472, 494, 501, 530, 532, 534, 535, 537, 539, 540, 541, 547, 551, 552, 555, 556, 557, 558, 559, 560, 562, 563, 564, 565, 566, 567, 568, 580, 581, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 609, 610, 617, 626, 628, 629, 633, 636, 637, 638, 639, 640, 641, 642, 643, 668, 685, 686, 690, 696, 697, 700, 739, 755, 756, 785, 789, 794, 795, 802, 818, 828, 830, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 847, 848, 849, 850, 851, 852, 853, 855, 862, 863, 864, 865, 868, 869, 871, 872, 873, 874, 876, 877, 878, 879, 881, 891, 892, 899, 900, 930, 936, 976, 981, 983, 987, 988, 990, 991, 994, 997, 999, 1000, 1001, 1002, 1003, 1006, 1012, 1023, 1027, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042], "level": [4, 9, 11, 12, 17, 28, 35, 42, 54, 96, 97, 117, 121, 140, 148, 150, 151, 152, 155, 158, 159, 160, 161, 166, 169, 170, 210, 211, 212, 213, 214, 217, 228, 232, 233, 249, 260, 263, 269, 270, 289, 296, 336, 337, 339, 340, 342, 344, 346, 352, 360, 366, 374, 376, 377, 379, 381, 385, 391, 393, 396, 397, 398, 405, 412, 415, 417, 421, 452, 466, 491, 492, 494, 501, 519, 529, 534, 535, 543, 544, 545, 559, 560, 565, 566, 609, 613, 620, 621, 623, 664, 665, 666, 674, 675, 676, 685, 688, 690, 692, 698, 700, 714, 720, 725, 782, 820, 821, 822, 824, 827, 828, 855, 856, 857, 897, 912, 976, 983, 987, 988, 990, 995, 1001, 1003, 1006, 1007, 1008, 1021, 1030, 1038, 1041, 1042, 1043], "one_hot_linear_pipelin": 4, "one_hot_tim": 4, "099": [4, 202, 218, 1008], "011": [4, 261, 268, 276, 283, 352, 385, 1008], "131": [4, 14, 57, 170, 385, 987, 1028], "rate": [4, 112, 116, 122, 143, 170, 199, 206, 217, 232, 238, 257, 260, 267, 269, 270, 300, 301, 302, 368, 379, 407, 408, 412, 416, 444, 464, 534, 551, 552, 557, 558, 559, 560, 590, 593, 594, 596, 597, 598, 604, 642, 643, 666, 674, 675, 676, 690, 696, 700, 724, 779, 786, 855, 856, 857, 893, 976, 983, 984, 987, 990, 991, 1001, 1003, 1011, 1031, 1035, 1036], "better": [4, 5, 9, 13, 20, 21, 25, 32, 51, 56, 75, 76, 79, 80, 81, 82, 87, 91, 96, 99, 115, 118, 123, 124, 125, 132, 143, 155, 156, 157, 159, 163, 171, 179, 183, 185, 188, 199, 200, 201, 207, 214, 216, 217, 224, 233, 234, 235, 238, 250, 254, 260, 262, 263, 266, 269, 270, 278, 281, 302, 309, 310, 319, 320, 338, 346, 351, 352, 353, 356, 362, 366, 374, 378, 379, 380, 381, 383, 384, 385, 387, 393, 396, 401, 403, 405, 407, 409, 411, 412, 413, 414, 415, 417, 447, 448, 536, 538, 545, 557, 558, 559, 560, 605, 606, 628, 669, 675, 690, 707, 722, 731, 736, 739, 760, 795, 824, 834, 835, 836, 837, 838, 839, 840, 845, 856, 857, 876, 877, 880, 888, 891, 892, 899, 900, 976, 977, 979, 980, 981, 983, 984, 986, 987, 989, 990, 991, 995, 997, 1000, 1001, 1003, 1007, 1011, 1014, 1016, 1021, 1027, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044], "confirm": [4, 13, 87, 115, 122, 125, 171, 199, 201, 263, 266, 269, 310, 353, 383, 976, 997, 1035], "benefit": [4, 47, 57, 75, 76, 112, 123, 169, 213, 224, 231, 233, 285, 319, 366, 379, 388, 393, 405, 407, 446, 459, 466, 506, 565, 566, 656, 657, 664, 665, 666, 674, 675, 676, 830, 897, 899, 976, 982, 990, 997, 1007, 1011, 1027, 1030, 1031, 1032, 1039, 1040, 1041, 1042], "ad": [4, 14, 21, 76, 103, 105, 112, 118, 144, 151, 157, 158, 178, 183, 201, 203, 224, 234, 235, 260, 261, 262, 305, 316, 317, 318, 319, 320, 321, 322, 329, 342, 352, 378, 379, 381, 383, 385, 391, 393, 394, 412, 414, 415, 416, 417, 431, 439, 440, 441, 443, 445, 447, 450, 457, 460, 462, 466, 480, 481, 482, 483, 512, 520, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 545, 547, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 605, 606, 609, 611, 625, 626, 627, 628, 633, 636, 637, 638, 639, 640, 646, 648, 652, 656, 657, 667, 674, 676, 678, 686, 687, 690, 693, 711, 712, 726, 727, 772, 774, 780, 781, 784, 786, 794, 795, 796, 810, 820, 827, 837, 843, 848, 851, 855, 856, 857, 858, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 891, 892, 896, 897, 899, 900, 907, 908, 909, 910, 926, 976, 980, 982, 983, 984, 988, 990, 991, 993, 1007, 1011, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "progress": [4, 7, 8, 96, 135, 148, 164, 192, 288, 319, 376, 379, 383, 384, 394, 398, 403, 407, 557, 558, 690, 828, 830, 833, 848, 856, 857, 1011, 1019, 1021, 1027, 1029, 1036, 1041], "veri": [4, 13, 26, 28, 40, 41, 43, 45, 51, 53, 61, 63, 81, 82, 83, 86, 93, 99, 125, 130, 138, 156, 163, 169, 170, 171, 188, 199, 200, 201, 204, 207, 217, 224, 228, 234, 235, 238, 245, 262, 263, 266, 267, 269, 270, 275, 283, 301, 305, 318, 325, 328, 338, 342, 348, 351, 353, 362, 366, 374, 378, 379, 381, 384, 385, 387, 391, 392, 393, 401, 405, 407, 409, 411, 412, 413, 414, 415, 416, 417, 440, 445, 450, 460, 469, 470, 476, 498, 502, 508, 555, 556, 559, 560, 562, 563, 565, 566, 587, 588, 620, 648, 649, 652, 653, 654, 662, 680, 681, 683, 689, 690, 693, 703, 740, 743, 789, 794, 796, 804, 806, 810, 813, 816, 839, 840, 864, 868, 869, 870, 879, 891, 892, 901, 904, 907, 908, 909, 910, 936, 976, 979, 980, 982, 983, 984, 985, 986, 987, 990, 991, 993, 994, 995, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1011, 1019, 1020, 1027, 1032, 1033, 1035, 1038, 1040, 1042, 1043, 1044], "new": [4, 7, 8, 10, 51, 57, 59, 61, 71, 72, 91, 103, 112, 114, 116, 117, 118, 123, 125, 131, 132, 145, 148, 151, 157, 164, 171, 172, 199, 205, 213, 228, 259, 262, 267, 281, 287, 289, 311, 316, 319, 322, 326, 329, 337, 342, 362, 367, 368, 373, 374, 376, 377, 378, 381, 382, 383, 385, 387, 388, 392, 393, 394, 397, 405, 407, 408, 411, 412, 413, 414, 415, 416, 417, 418, 419, 425, 429, 431, 432, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 492, 493, 494, 495, 498, 499, 500, 502, 503, 506, 507, 508, 510, 521, 524, 525, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 572, 579, 580, 581, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 698, 699, 700, 702, 706, 711, 712, 716, 719, 720, 721, 722, 724, 725, 726, 727, 728, 731, 736, 737, 738, 739, 740, 743, 750, 751, 754, 758, 763, 764, 766, 775, 779, 780, 781, 782, 784, 785, 786, 787, 788, 794, 795, 796, 797, 798, 799, 800, 802, 803, 805, 809, 810, 814, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 856, 857, 858, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 885, 887, 888, 889, 891, 892, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 914, 917, 919, 920, 922, 930, 931, 935, 936, 943, 944, 945, 946, 947, 950, 953, 955, 957, 962, 968, 974, 976, 977, 979, 983, 987, 988, 990, 991, 992, 993, 997, 999, 1000, 1001, 1002, 1007, 1011, 1012, 1013, 1016, 1019, 1021, 1025, 1029, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "minut": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 168, 169, 170, 171, 172, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360, 374, 379, 984, 1005], "1440": 4, "caus": [4, 26, 28, 125, 152, 169, 197, 199, 203, 204, 217, 281, 312, 342, 353, 362, 377, 384, 405, 407, 412, 413, 415, 417, 441, 445, 447, 457, 507, 530, 580, 587, 608, 609, 834, 835, 836, 838, 863, 872, 874, 877, 878, 919, 920, 976, 977, 983, 987, 995, 997, 1000, 1007, 1012, 1027, 1028, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1043, 1044, 1045], "signific": [4, 56, 118, 125, 143, 144, 166, 203, 217, 253, 260, 276, 281, 283, 309, 351, 362, 373, 374, 391, 407, 410, 411, 414, 502, 530, 532, 547, 548, 625, 656, 657, 664, 665, 666, 674, 675, 676, 815, 824, 899, 901, 902, 903, 904, 905, 986, 987, 990, 1008, 1027, 1029, 1030, 1031, 1035], "overfit": [4, 117, 123, 125, 166, 170, 171, 172, 178, 200, 203, 228, 247, 253, 255, 261, 265, 275, 276, 299, 306, 307, 309, 310, 311, 312, 338, 346, 356, 358, 359, 374, 393, 405, 411, 414, 435, 486, 487, 559, 560, 565, 566, 655, 796, 799, 800, 810, 821, 822, 856, 857, 859, 874, 878, 982, 991, 993, 995, 997, 1003, 1008, 1011, 1019, 1030], "avoid": [4, 7, 12, 13, 45, 58, 63, 73, 117, 118, 123, 169, 170, 201, 203, 208, 217, 223, 235, 238, 255, 261, 265, 291, 293, 294, 309, 310, 322, 334, 335, 352, 367, 377, 379, 380, 381, 383, 384, 385, 391, 393, 394, 397, 401, 405, 407, 409, 411, 414, 415, 418, 438, 440, 442, 450, 460, 466, 491, 492, 493, 497, 506, 507, 532, 537, 541, 583, 584, 632, 644, 645, 650, 651, 658, 659, 660, 661, 679, 682, 687, 689, 691, 693, 710, 789, 796, 797, 801, 807, 810, 820, 821, 822, 859, 862, 868, 869, 871, 876, 877, 878, 879, 882, 884, 885, 886, 887, 888, 889, 890, 892, 897, 936, 981, 984, 986, 987, 990, 991, 993, 995, 997, 1002, 1003, 1007, 1010, 1021, 1023, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "kbinsdiscret": [4, 54, 76, 93, 166, 179, 199, 217, 239, 293, 304, 307, 312, 313, 320, 358, 510, 655, 862, 878, 908, 997, 1008, 1035, 1039, 1040, 1041, 1043], "re": [4, 8, 14, 27, 57, 71, 72, 112, 122, 154, 168, 217, 235, 246, 250, 263, 265, 269, 316, 351, 353, 367, 379, 380, 383, 387, 392, 394, 398, 405, 411, 415, 467, 468, 469, 470, 471, 472, 473, 474, 553, 554, 555, 556, 559, 560, 561, 562, 563, 564, 644, 650, 658, 660, 798, 813, 816, 907, 908, 909, 910, 983, 988, 990, 997, 1002, 1007, 1011, 1021, 1027, 1031, 1032, 1034, 1036], "fine": [4, 38, 121, 148, 203, 215, 251, 258, 342, 358, 359, 376, 383, 393, 415, 444, 936, 955, 990, 993, 1002, 1007, 1037], "grain": [4, 32, 38, 233, 251, 307, 385, 415, 444, 955, 1007], "still": [4, 13, 33, 45, 54, 56, 58, 63, 83, 91, 100, 120, 125, 132, 151, 157, 168, 169, 171, 172, 178, 183, 199, 201, 217, 233, 263, 269, 305, 317, 318, 321, 351, 352, 362, 368, 373, 378, 379, 381, 383, 384, 385, 387, 391, 393, 407, 411, 414, 415, 418, 438, 442, 452, 472, 494, 625, 630, 633, 635, 715, 753, 775, 778, 789, 790, 799, 800, 813, 816, 877, 879, 899, 917, 976, 977, 981, 983, 986, 987, 990, 993, 995, 1002, 1003, 1005, 1007, 1010, 1011, 1027, 1029, 1032, 1033, 1035, 1036, 1037, 1040, 1041, 1042, 1043], "express": [4, 7, 12, 112, 118, 151, 156, 169, 260, 261, 311, 317, 335, 342, 353, 373, 374, 379, 380, 385, 391, 407, 412, 413, 415, 448, 454, 455, 586, 587, 589, 714, 785, 796, 802, 810, 818, 820, 821, 822, 823, 826, 846, 979, 983, 987, 991, 997, 998, 1003, 1035], "advantag": [4, 5, 40, 56, 58, 96, 101, 199, 200, 228, 246, 261, 281, 319, 362, 393, 405, 411, 412, 415, 417, 439, 443, 458, 532, 587, 647, 672, 673, 760, 827, 828, 829, 859, 860, 899, 900, 901, 902, 903, 904, 905, 976, 979, 982, 983, 984, 987, 988, 990, 991, 995, 997, 1001, 1002, 1003, 1030], "final": [4, 13, 27, 35, 41, 43, 56, 71, 72, 81, 83, 87, 92, 101, 112, 113, 115, 117, 122, 123, 126, 132, 135, 145, 156, 164, 168, 170, 172, 175, 178, 183, 187, 188, 196, 199, 201, 216, 217, 221, 228, 242, 249, 258, 266, 278, 283, 311, 312, 315, 316, 338, 342, 366, 368, 374, 377, 379, 380, 381, 383, 392, 393, 404, 405, 407, 408, 411, 414, 415, 416, 435, 440, 445, 446, 450, 457, 460, 462, 534, 553, 554, 565, 566, 568, 592, 625, 645, 651, 657, 677, 688, 692, 717, 796, 827, 828, 859, 860, 896, 899, 976, 977, 979, 983, 984, 987, 990, 993, 994, 997, 1000, 1011, 1019, 1032, 1035, 1036, 1037, 1038, 1040], "observ": [4, 5, 7, 9, 11, 13, 14, 17, 21, 25, 28, 35, 38, 41, 44, 54, 63, 72, 79, 81, 82, 83, 97, 98, 101, 103, 112, 115, 116, 118, 119, 125, 128, 131, 139, 140, 148, 151, 154, 156, 157, 158, 160, 169, 170, 171, 178, 179, 194, 195, 197, 199, 200, 201, 203, 213, 217, 224, 225, 231, 232, 238, 256, 260, 262, 263, 267, 283, 286, 289, 296, 310, 321, 328, 337, 338, 342, 343, 351, 352, 353, 358, 359, 374, 376, 393, 397, 405, 407, 409, 410, 411, 412, 413, 416, 417, 439, 441, 443, 444, 445, 447, 457, 458, 467, 468, 469, 470, 471, 472, 473, 474, 522, 530, 549, 550, 561, 608, 609, 644, 650, 655, 699, 714, 716, 755, 817, 837, 845, 878, 880, 983, 986, 987, 991, 992, 993, 994, 995, 997, 1000, 1001, 1002, 1003, 1010, 1013, 1015, 1016, 1018, 1028, 1040, 1041, 1042, 1043], "complet": [4, 38, 39, 40, 45, 50, 51, 53, 59, 63, 87, 130, 143, 145, 148, 166, 171, 172, 205, 227, 228, 235, 238, 243, 258, 310, 312, 315, 352, 362, 374, 379, 383, 384, 387, 391, 408, 411, 412, 414, 415, 439, 443, 447, 450, 460, 461, 462, 465, 493, 534, 535, 536, 537, 542, 544, 556, 567, 568, 579, 585, 586, 587, 589, 625, 626, 627, 628, 643, 647, 655, 669, 671, 702, 703, 713, 714, 715, 726, 728, 733, 734, 754, 783, 792, 827, 830, 833, 842, 858, 859, 860, 861, 922, 972, 976, 981, 983, 987, 988, 990, 1002, 1003, 1008, 1012, 1021, 1027, 1030, 1034, 1035, 1036, 1037, 1038, 1039, 1040], "induct": [4, 37, 69, 110, 125, 166, 393, 407, 414, 421, 439, 510, 562, 625, 629, 894, 895, 948, 971, 983, 1000, 1008, 1029], "bia": [4, 10, 28, 79, 98, 111, 119, 120, 125, 136, 166, 169, 171, 178, 179, 181, 265, 299, 342, 346, 362, 374, 381, 393, 405, 409, 413, 414, 417, 522, 554, 557, 558, 605, 606, 612, 640, 646, 647, 656, 657, 667, 668, 678, 856, 857, 872, 874, 878, 884, 885, 887, 888, 889, 890, 908, 982, 983, 986, 987, 991, 992, 995, 1001, 1008, 1019], "preserv": [4, 49, 101, 224, 232, 255, 381, 382, 406, 411, 412, 415, 579, 586, 587, 589, 644, 650, 694, 739, 771, 775, 814, 815, 816, 883, 919, 920, 977, 983, 984, 997, 999, 1006, 1016, 1020, 1027, 1030, 1031, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1045], "smooth": [4, 47, 48, 55, 148, 156, 192, 200, 215, 311, 338, 376, 394, 407, 413, 417, 446, 447, 535, 536, 537, 544, 555, 556, 557, 558, 562, 563, 564, 588, 589, 617, 620, 674, 834, 835, 836, 838, 876, 880, 888, 907, 908, 909, 910, 983, 989, 997, 1001, 1002, 1003, 1021], "local": [4, 9, 12, 21, 40, 53, 58, 62, 96, 99, 117, 118, 129, 148, 156, 157, 166, 170, 200, 213, 219, 222, 224, 226, 228, 232, 238, 283, 284, 292, 293, 297, 337, 358, 359, 367, 376, 377, 379, 383, 385, 387, 397, 407, 412, 414, 415, 417, 445, 450, 460, 486, 487, 488, 489, 490, 491, 492, 493, 495, 496, 500, 536, 538, 542, 545, 547, 557, 558, 561, 564, 608, 609, 686, 687, 688, 689, 690, 691, 693, 694, 755, 756, 842, 845, 848, 850, 860, 869, 892, 895, 903, 953, 955, 985, 986, 990, 991, 1003, 1008, 1010, 1020, 1022, 1023, 1031, 1035, 1039, 1042], "attempt": [4, 55, 170, 195, 205, 255, 351, 366, 378, 393, 407, 419, 444, 448, 455, 466, 629, 686, 687, 691, 814, 841, 842, 843, 845, 847, 849, 850, 851, 877, 879, 897, 919, 920, 983, 984, 990, 1003, 1012, 1034, 1039, 1044], "each": [4, 7, 8, 10, 11, 12, 15, 18, 21, 26, 27, 28, 33, 35, 38, 42, 44, 45, 48, 50, 54, 56, 59, 61, 62, 71, 72, 74, 75, 76, 86, 87, 90, 91, 92, 93, 96, 97, 101, 103, 104, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 126, 128, 130, 131, 132, 133, 134, 135, 144, 146, 148, 153, 155, 160, 163, 164, 168, 169, 170, 172, 175, 178, 185, 186, 188, 193, 197, 199, 200, 201, 203, 204, 207, 214, 217, 221, 228, 229, 232, 233, 234, 235, 236, 238, 239, 240, 242, 245, 248, 250, 254, 255, 256, 258, 260, 261, 263, 265, 266, 269, 270, 278, 281, 283, 286, 288, 292, 294, 296, 299, 300, 302, 305, 306, 307, 308, 310, 311, 312, 315, 317, 318, 319, 321, 322, 325, 326, 327, 330, 338, 342, 344, 346, 352, 353, 356, 357, 360, 362, 366, 367, 368, 373, 374, 375, 376, 377, 379, 380, 381, 383, 384, 385, 387, 388, 391, 392, 393, 398, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 424, 425, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 457, 458, 459, 461, 462, 463, 465, 467, 468, 469, 470, 471, 472, 473, 474, 476, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 502, 503, 506, 507, 508, 509, 510, 511, 512, 513, 517, 520, 521, 524, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 694, 705, 706, 708, 711, 717, 722, 725, 726, 727, 735, 736, 742, 743, 745, 747, 748, 750, 751, 755, 756, 759, 760, 761, 762, 763, 765, 766, 767, 768, 770, 771, 773, 775, 776, 777, 778, 780, 781, 782, 784, 785, 787, 788, 789, 790, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 812, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 883, 884, 885, 886, 888, 889, 890, 891, 892, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 925, 930, 931, 936, 938, 939, 943, 944, 955, 963, 964, 965, 968, 977, 979, 981, 983, 984, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1011, 1012, 1016, 1018, 1019, 1020, 1021, 1027, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "sine": [4, 151, 156, 157, 166, 193, 205, 244, 245, 246, 247, 248, 249, 250, 252, 358, 375, 613, 794, 795, 986, 1003, 1008], "cosin": [4, 41, 274, 283, 288, 371, 374, 393, 407, 412, 413, 439, 443, 448, 455, 533, 588, 589, 618, 694, 757, 758, 759, 762, 767, 768, 771, 775, 776, 777, 839, 840, 844, 871, 990, 1003, 1023, 1037], "match": [4, 21, 38, 55, 96, 97, 99, 102, 105, 118, 166, 175, 177, 199, 218, 222, 231, 238, 273, 342, 353, 374, 377, 381, 383, 407, 412, 414, 415, 428, 447, 462, 464, 506, 507, 513, 524, 529, 535, 540, 546, 549, 565, 566, 570, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 625, 626, 627, 628, 656, 662, 663, 683, 684, 697, 701, 702, 703, 711, 713, 717, 731, 775, 776, 777, 783, 839, 840, 844, 848, 862, 863, 864, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 899, 906, 912, 923, 955, 984, 986, 987, 989, 990, 1008, 1009, 1012, 1021, 1023, 1027, 1033, 1034, 1035, 1037, 1039, 1040, 1043], "togeth": [4, 12, 52, 61, 72, 121, 132, 151, 157, 169, 180, 221, 224, 238, 256, 311, 319, 341, 357, 362, 381, 383, 391, 392, 393, 401, 407, 414, 415, 416, 422, 449, 451, 565, 566, 592, 687, 713, 796, 810, 859, 860, 873, 983, 984, 988, 994, 997, 1003, 1004, 1011, 1013, 1015, 1033, 1044], "equival": [4, 15, 35, 56, 58, 122, 128, 147, 151, 156, 169, 183, 217, 250, 269, 283, 310, 342, 353, 362, 366, 377, 385, 388, 392, 393, 407, 408, 409, 410, 411, 412, 414, 416, 417, 439, 441, 442, 443, 444, 445, 447, 448, 455, 462, 467, 472, 507, 532, 539, 556, 559, 560, 561, 562, 563, 586, 589, 611, 614, 617, 619, 622, 644, 645, 646, 650, 652, 656, 657, 664, 665, 666, 667, 670, 674, 675, 678, 681, 685, 686, 691, 706, 707, 720, 731, 738, 739, 744, 745, 746, 758, 767, 776, 777, 794, 795, 799, 800, 804, 806, 830, 833, 841, 842, 843, 845, 847, 849, 850, 851, 852, 853, 856, 862, 868, 869, 871, 874, 875, 876, 877, 879, 887, 889, 890, 923, 934, 973, 976, 981, 983, 984, 985, 987, 993, 997, 1001, 1002, 1003, 1035, 1036, 1037, 1038, 1040, 1041, 1044], "importantli": [4, 14, 97, 170, 175, 305, 407], "jump": [4, 200, 305, 376, 379, 415, 878], "functiontransform": [4, 71, 117, 199, 217, 329, 462, 463, 997, 1032, 1033, 1035, 1040, 1041, 1042, 1044], "sin_transform": 4, "return": [4, 6, 7, 8, 10, 11, 13, 14, 17, 18, 20, 25, 26, 28, 34, 35, 38, 41, 49, 54, 57, 62, 71, 76, 93, 103, 105, 110, 112, 115, 117, 124, 125, 128, 132, 148, 154, 157, 159, 164, 172, 178, 179, 187, 188, 191, 199, 200, 207, 208, 209, 217, 235, 238, 241, 242, 248, 250, 255, 256, 257, 258, 259, 260, 261, 263, 264, 267, 274, 283, 288, 293, 296, 302, 305, 307, 310, 315, 334, 338, 351, 353, 356, 360, 366, 372, 373, 374, 379, 380, 381, 385, 386, 388, 391, 393, 405, 406, 407, 408, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 919, 920, 922, 923, 924, 925, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 953, 954, 956, 957, 958, 959, 960, 961, 962, 968, 971, 972, 973, 974, 975, 977, 987, 990, 994, 995, 1002, 1003, 1007, 1012, 1017, 1019, 1021, 1024, 1027, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "lambda": [4, 7, 8, 10, 13, 20, 57, 74, 124, 179, 217, 260, 261, 309, 329, 403, 407, 412, 414, 415, 642, 643, 644, 645, 863, 875, 979, 983, 997, 1016, 1035, 1041], "sin": [4, 14, 20, 40, 97, 113, 124, 125, 129, 131, 143, 151, 157, 158, 160, 178, 179, 183, 193, 200, 205, 222, 234, 251, 295, 306, 316, 322, 345, 358, 359, 417, 514, 613, 697, 761, 1020], "pi": [4, 14, 35, 40, 41, 97, 105, 129, 131, 143, 151, 179, 183, 187, 193, 200, 222, 245, 246, 247, 250, 251, 274, 296, 316, 322, 359, 397, 413, 417, 514, 515, 516, 613, 640, 981, 982, 983, 989, 1020], "cos_transform": 4, "co": [4, 8, 12, 14, 19, 21, 23, 40, 41, 71, 129, 131, 156, 166, 169, 200, 222, 260, 274, 319, 329, 351, 352, 353, 359, 383, 413, 415, 447, 449, 451, 486, 509, 589, 697, 717, 761, 792, 982, 997, 1008, 1011, 1022, 1023], "effect": [4, 6, 28, 38, 40, 41, 46, 47, 54, 58, 63, 66, 70, 74, 77, 87, 93, 99, 101, 112, 123, 125, 127, 128, 129, 132, 147, 151, 152, 156, 158, 166, 167, 169, 170, 172, 173, 183, 194, 199, 200, 201, 203, 204, 205, 216, 219, 220, 222, 224, 226, 231, 238, 242, 246, 250, 256, 260, 261, 262, 265, 268, 269, 270, 283, 302, 304, 306, 309, 313, 316, 324, 331, 338, 342, 343, 346, 347, 348, 351, 352, 353, 362, 367, 379, 381, 384, 391, 393, 405, 407, 408, 412, 413, 414, 415, 417, 418, 435, 441, 442, 444, 445, 447, 448, 463, 467, 468, 469, 470, 471, 472, 473, 474, 476, 480, 481, 482, 488, 494, 498, 512, 522, 523, 531, 532, 536, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 586, 587, 588, 589, 592, 604, 607, 608, 609, 633, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 685, 688, 689, 690, 699, 701, 750, 782, 794, 797, 798, 801, 803, 805, 807, 814, 815, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 844, 845, 846, 849, 850, 856, 857, 859, 862, 863, 864, 865, 866, 868, 869, 871, 875, 876, 877, 878, 879, 880, 884, 885, 886, 887, 888, 889, 890, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 919, 920, 936, 953, 961, 976, 981, 983, 984, 986, 987, 988, 994, 995, 997, 1000, 1002, 1003, 1008, 1017, 1019, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "expans": [4, 163, 317, 448, 874, 1036], "synthet": [4, 14, 26, 28, 32, 35, 38, 43, 50, 119, 125, 130, 151, 156, 158, 170, 189, 201, 216, 299, 307, 346, 362, 366, 372, 382, 394, 407, 409, 416, 656, 657, 899, 900, 906, 981, 1019, 1020, 1033], "beyond": [4, 28, 200, 201, 366, 368, 378, 379, 391, 405, 414, 726, 727, 735, 780, 781, 784, 904, 984, 988, 997, 1002, 1007, 1035], "pd": [4, 12, 13, 26, 72, 73, 74, 112, 118, 119, 125, 129, 156, 163, 168, 169, 170, 171, 172, 178, 183, 188, 199, 203, 207, 217, 239, 242, 250, 258, 260, 261, 263, 271, 272, 278, 310, 311, 312, 318, 319, 346, 351, 352, 384, 393, 408, 462, 464, 625, 626, 627, 628, 630, 775, 917, 919, 920, 976, 977, 994, 997, 1038, 1040, 1041, 1042, 1044], "hour_df": 4, "arang": [4, 11, 13, 14, 17, 41, 59, 61, 66, 74, 80, 81, 103, 106, 121, 122, 124, 126, 127, 130, 134, 144, 151, 153, 158, 159, 163, 164, 172, 183, 199, 202, 204, 208, 223, 231, 233, 255, 260, 263, 268, 271, 281, 283, 296, 299, 307, 318, 325, 326, 328, 330, 338, 345, 351, 353, 358, 359, 360, 362, 391, 404, 411, 415, 463, 542, 825, 874, 878, 982, 983, 991, 997, 1001, 1017], "reshap": [4, 5, 6, 14, 17, 25, 33, 47, 48, 49, 51, 52, 54, 55, 59, 73, 81, 86, 96, 99, 105, 115, 120, 121, 130, 140, 146, 151, 153, 154, 155, 156, 157, 158, 160, 178, 190, 196, 212, 213, 215, 216, 221, 223, 225, 228, 233, 237, 249, 258, 287, 289, 296, 299, 301, 302, 306, 307, 308, 312, 315, 318, 319, 321, 322, 330, 337, 338, 343, 344, 347, 348, 391, 404, 412, 414, 415, 443, 463, 582, 629, 729, 825, 874, 878, 983, 997, 1003, 1017, 1020, 1032], "hour_sin": 4, "fit_transform": [4, 5, 6, 10, 12, 15, 20, 45, 50, 53, 54, 59, 63, 91, 97, 100, 106, 130, 175, 190, 215, 217, 220, 221, 222, 223, 224, 225, 231, 232, 235, 236, 242, 283, 287, 300, 305, 306, 310, 311, 312, 315, 318, 320, 321, 322, 338, 351, 352, 353, 362, 371, 374, 381, 384, 385, 393, 403, 408, 412, 415, 416, 423, 431, 440, 441, 443, 445, 447, 462, 464, 466, 480, 481, 482, 483, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 564, 565, 566, 567, 568, 579, 580, 581, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 625, 626, 627, 628, 633, 636, 637, 638, 639, 640, 686, 687, 688, 689, 690, 694, 843, 848, 851, 855, 858, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 891, 892, 897, 977, 979, 983, 988, 990, 997, 998, 999, 1012, 1017, 1020, 1021, 1031, 1032, 1033, 1035, 1036, 1037, 1039, 1041, 1043, 1044], "hour_co": 4, "2d": [4, 34, 37, 40, 42, 45, 48, 49, 50, 54, 57, 62, 63, 69, 90, 91, 95, 97, 100, 102, 106, 107, 130, 146, 166, 193, 200, 205, 220, 221, 222, 225, 228, 231, 232, 292, 325, 326, 335, 338, 360, 373, 375, 379, 381, 388, 393, 407, 408, 412, 415, 417, 439, 450, 460, 462, 465, 479, 486, 488, 489, 490, 491, 492, 498, 499, 500, 502, 508, 512, 531, 539, 547, 582, 584, 633, 641, 655, 670, 689, 735, 776, 820, 824, 828, 866, 915, 919, 920, 935, 950, 973, 974, 981, 983, 984, 987, 994, 998, 1003, 1008, 1012, 1018, 1027, 1031, 1034, 1035, 1036, 1039, 1041], "scatter": [4, 9, 11, 12, 17, 25, 31, 32, 35, 39, 40, 43, 44, 45, 46, 50, 53, 57, 58, 59, 60, 61, 63, 68, 81, 87, 92, 93, 98, 100, 101, 102, 104, 113, 114, 118, 121, 128, 130, 131, 133, 140, 143, 151, 152, 153, 155, 157, 158, 159, 160, 168, 169, 175, 179, 182, 189, 191, 195, 196, 197, 200, 201, 202, 208, 211, 212, 213, 216, 220, 221, 222, 223, 224, 225, 228, 233, 234, 236, 245, 246, 247, 248, 249, 250, 251, 255, 261, 263, 274, 283, 286, 289, 290, 291, 292, 293, 294, 295, 299, 305, 307, 308, 310, 319, 327, 330, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 347, 348, 351, 357, 358, 359, 409, 629, 699, 955, 981, 983, 1019, 1020], "color": [4, 6, 7, 8, 9, 10, 11, 12, 13, 17, 21, 25, 26, 27, 28, 32, 34, 35, 37, 39, 41, 43, 45, 47, 48, 50, 54, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 79, 80, 81, 82, 83, 87, 91, 92, 93, 96, 97, 98, 99, 100, 102, 103, 104, 105, 112, 113, 118, 121, 122, 124, 127, 128, 129, 130, 132, 134, 138, 140, 151, 153, 154, 155, 156, 157, 158, 159, 160, 164, 166, 169, 171, 172, 178, 179, 181, 182, 183, 184, 186, 187, 188, 189, 191, 193, 195, 197, 199, 200, 201, 202, 203, 204, 205, 208, 209, 210, 211, 213, 216, 217, 221, 222, 223, 225, 228, 232, 233, 234, 236, 239, 245, 246, 247, 248, 249, 250, 251, 255, 259, 261, 263, 264, 265, 266, 267, 269, 270, 271, 273, 281, 285, 288, 289, 290, 291, 294, 295, 296, 299, 305, 306, 307, 309, 310, 311, 316, 322, 327, 328, 330, 336, 337, 338, 339, 340, 342, 344, 345, 346, 347, 357, 358, 373, 374, 376, 387, 407, 414, 415, 445, 491, 492, 504, 581, 582, 776, 961, 1001, 1003, 1008, 1032, 1037, 1039, 1044], "map": [4, 5, 10, 11, 18, 20, 27, 54, 87, 101, 116, 124, 127, 130, 151, 166, 175, 199, 217, 220, 222, 227, 235, 238, 243, 261, 264, 269, 275, 291, 294, 296, 304, 305, 313, 329, 338, 342, 344, 352, 353, 373, 374, 380, 391, 393, 398, 405, 406, 407, 408, 411, 412, 414, 415, 421, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 462, 463, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 494, 496, 500, 507, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 686, 687, 688, 689, 690, 759, 762, 794, 795, 796, 799, 800, 807, 808, 810, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 858, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 887, 888, 891, 892, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 941, 944, 945, 976, 979, 984, 987, 989, 999, 1002, 1003, 1008, 1016, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1044], "space": [4, 8, 10, 20, 32, 47, 49, 54, 58, 59, 61, 62, 64, 66, 71, 72, 75, 87, 96, 98, 104, 106, 117, 121, 125, 130, 145, 148, 151, 157, 175, 183, 200, 220, 221, 222, 224, 232, 233, 234, 238, 239, 246, 251, 268, 271, 272, 283, 292, 293, 307, 317, 342, 351, 352, 353, 360, 362, 366, 371, 374, 375, 376, 379, 386, 391, 392, 393, 404, 406, 407, 410, 412, 413, 414, 415, 417, 441, 445, 446, 447, 450, 460, 462, 463, 464, 465, 480, 481, 482, 496, 530, 532, 533, 536, 537, 538, 539, 541, 542, 547, 571, 580, 586, 587, 589, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 630, 631, 636, 638, 639, 640, 641, 686, 687, 688, 690, 691, 692, 694, 697, 796, 799, 800, 802, 810, 818, 829, 839, 840, 847, 848, 849, 850, 859, 864, 865, 871, 876, 891, 892, 893, 912, 940, 979, 980, 981, 982, 983, 985, 987, 988, 990, 991, 992, 993, 997, 998, 999, 1000, 1001, 1002, 1003, 1006, 1007, 1012, 1019, 1021, 1022, 1023, 1027, 1028, 1030, 1035, 1036, 1037, 1041, 1042, 1043], "akin": [4, 200, 393], "sort": [4, 8, 10, 12, 20, 21, 25, 61, 71, 110, 115, 122, 125, 131, 148, 178, 183, 199, 200, 217, 237, 260, 261, 264, 274, 295, 345, 351, 358, 359, 379, 383, 387, 388, 393, 411, 414, 415, 417, 532, 539, 553, 564, 579, 608, 615, 695, 710, 716, 726, 727, 735, 751, 780, 781, 784, 786, 796, 822, 834, 835, 836, 837, 838, 839, 840, 847, 849, 850, 851, 854, 864, 870, 872, 873, 876, 878, 880, 888, 901, 904, 936, 941, 983, 990, 993, 997, 1011, 1021, 1027, 1031, 1037, 1038, 1039, 1041, 1042, 1045], "analog": [4, 20, 127, 385, 414, 987, 988, 1002, 1036], "clock": 4, "25th": [4, 238, 877], "back": [4, 101, 240, 367, 377, 379, 381, 394, 401, 408, 415, 432, 441, 444, 445, 457, 480, 481, 482, 506, 507, 531, 532, 533, 536, 538, 539, 542, 579, 628, 656, 657, 664, 665, 666, 674, 675, 676, 725, 864, 866, 867, 868, 872, 873, 874, 876, 877, 879, 891, 892, 899, 983, 987, 991, 1007, 1012, 1021, 1030, 1035, 1037, 1038, 1041], "natur": [4, 32, 118, 125, 158, 169, 170, 175, 183, 199, 200, 216, 217, 224, 238, 245, 251, 269, 281, 351, 379, 381, 393, 412, 414, 415, 418, 442, 448, 455, 549, 588, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 625, 690, 702, 738, 752, 754, 841, 842, 843, 845, 847, 849, 850, 851, 878, 934, 983, 984, 986, 987, 990, 992, 997, 1001, 1006, 1027, 1035], "sp": [4, 169, 322, 977, 1020], "c": [4, 6, 7, 8, 11, 12, 17, 20, 25, 26, 28, 31, 32, 35, 40, 41, 43, 44, 46, 53, 57, 58, 60, 61, 62, 66, 72, 73, 75, 87, 91, 92, 93, 101, 102, 112, 114, 115, 121, 122, 128, 130, 131, 133, 134, 140, 146, 148, 152, 153, 154, 155, 159, 175, 182, 184, 189, 190, 191, 192, 194, 196, 197, 206, 208, 210, 211, 212, 213, 215, 216, 220, 221, 222, 224, 225, 233, 234, 236, 240, 246, 248, 249, 250, 251, 254, 255, 257, 258, 259, 260, 263, 265, 269, 271, 283, 286, 288, 289, 291, 292, 293, 294, 295, 296, 299, 300, 302, 305, 306, 307, 310, 315, 316, 317, 318, 319, 320, 321, 322, 327, 330, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 351, 357, 358, 359, 366, 367, 373, 374, 376, 377, 379, 380, 381, 382, 384, 387, 388, 391, 397, 398, 404, 405, 407, 408, 409, 410, 411, 412, 414, 416, 420, 435, 440, 441, 444, 445, 447, 457, 466, 473, 521, 526, 532, 536, 538, 539, 545, 547, 548, 588, 605, 606, 608, 629, 637, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 668, 670, 671, 677, 683, 684, 686, 687, 690, 691, 706, 712, 713, 716, 728, 732, 738, 739, 755, 756, 796, 810, 818, 824, 826, 834, 835, 836, 837, 838, 839, 840, 846, 848, 855, 870, 872, 873, 874, 878, 880, 894, 897, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 910, 914, 919, 920, 950, 976, 979, 980, 982, 983, 984, 985, 987, 989, 990, 992, 994, 997, 999, 1001, 1002, 1003, 1006, 1011, 1012, 1016, 1017, 1019, 1020, 1027, 1028, 1030, 1032, 1033, 1034, 1035, 1036, 1038, 1039, 1040, 1043], "colorbar": [4, 11, 31, 41, 96, 106, 120, 128, 146, 152, 154, 155, 157, 170, 220, 232, 249, 271, 305, 338, 695, 1039], "cyclic_cossin_transform": 4, "month_sin": 4, "month_co": 4, "weekday_sin": 4, "weekday_co": 4, "cyclic_cossin_linear_pipelin": 4, "125": [4, 13, 54, 81, 99, 120, 318, 532, 976, 987, 997], "166": [4, 302, 385, 987, 1027], "simpl": [4, 17, 28, 56, 72, 76, 79, 86, 87, 96, 118, 123, 158, 166, 170, 183, 200, 216, 241, 261, 278, 284, 287, 296, 297, 310, 319, 334, 351, 353, 357, 362, 377, 379, 381, 382, 383, 384, 386, 391, 392, 393, 394, 398, 404, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 421, 428, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 460, 463, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 512, 520, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 579, 580, 581, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 686, 687, 688, 689, 690, 783, 785, 794, 795, 796, 799, 800, 810, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 883, 891, 892, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 943, 979, 981, 982, 983, 984, 986, 987, 990, 997, 999, 1001, 1003, 1007, 1008, 1011, 1012, 1021, 1024, 1027], "wors": [4, 87, 112, 152, 170, 205, 260, 268, 281, 310, 362, 405, 407, 417, 430, 463, 480, 481, 482, 550, 552, 554, 556, 558, 560, 563, 566, 568, 608, 609, 633, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 658, 659, 660, 661, 662, 663, 665, 667, 668, 670, 671, 676, 677, 678, 703, 719, 720, 721, 725, 782, 832, 833, 842, 850, 857, 900, 902, 905, 908, 910, 987, 997, 1036], "further": [4, 26, 43, 72, 79, 87, 96, 115, 121, 123, 147, 151, 156, 169, 171, 178, 183, 220, 225, 235, 257, 260, 261, 267, 320, 338, 352, 360, 366, 379, 391, 393, 406, 407, 409, 412, 414, 415, 417, 450, 460, 513, 530, 533, 580, 612, 620, 626, 656, 657, 664, 665, 666, 674, 675, 676, 689, 693, 734, 771, 775, 778, 789, 790, 835, 841, 842, 849, 850, 877, 879, 899, 901, 904, 936, 986, 987, 989, 990, 991, 993, 995, 997, 1001, 1002, 1019, 1021, 1036, 1040], "analyz": [4, 7, 18, 183, 262, 269, 320, 351, 353, 384, 385, 407, 415, 501, 586, 587, 589, 785, 984, 987, 994, 995, 1003, 1021, 1027, 1036], "reason": [4, 8, 12, 43, 54, 71, 125, 148, 169, 170, 175, 199, 200, 207, 217, 228, 232, 233, 235, 238, 257, 260, 261, 266, 278, 283, 306, 310, 352, 353, 362, 366, 367, 368, 374, 378, 379, 381, 383, 387, 391, 392, 393, 394, 407, 408, 409, 412, 414, 415, 506, 530, 572, 636, 644, 650, 652, 670, 685, 690, 760, 796, 810, 843, 848, 855, 874, 896, 976, 977, 982, 983, 984, 987, 989, 990, 991, 993, 997, 1001, 1002, 1011, 1021, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "disappoint": 4, "outcom": [4, 118, 169, 393, 414, 567, 656, 707, 739, 791, 827, 894, 895, 896, 901, 904, 983, 987, 1003, 1010, 1021, 1031, 1035, 1037], "altern": [4, 27, 72, 87, 119, 120, 126, 132, 171, 183, 199, 217, 229, 248, 251, 269, 315, 342, 351, 352, 353, 362, 374, 382, 383, 385, 391, 393, 394, 397, 402, 404, 405, 407, 408, 409, 411, 412, 414, 415, 417, 439, 440, 443, 444, 445, 450, 456, 461, 497, 536, 538, 539, 545, 551, 552, 555, 556, 557, 558, 562, 563, 564, 580, 586, 587, 589, 615, 618, 641, 690, 704, 706, 768, 771, 775, 778, 798, 828, 863, 869, 872, 885, 892, 894, 907, 908, 909, 910, 954, 955, 981, 983, 984, 986, 987, 990, 991, 995, 997, 999, 1000, 1002, 1003, 1007, 1016, 1021, 1023, 1032, 1034, 1040, 1041], "larger": [4, 7, 28, 38, 40, 43, 48, 56, 81, 83, 93, 105, 115, 126, 152, 157, 158, 164, 169, 170, 175, 179, 183, 214, 215, 216, 225, 232, 234, 245, 251, 261, 263, 269, 270, 278, 283, 285, 299, 300, 302, 305, 338, 342, 352, 353, 372, 374, 379, 385, 393, 404, 405, 407, 408, 409, 411, 412, 414, 415, 417, 438, 441, 447, 448, 450, 452, 454, 513, 525, 539, 542, 559, 560, 561, 565, 566, 580, 587, 641, 650, 670, 671, 672, 673, 677, 685, 690, 702, 717, 733, 794, 844, 845, 876, 878, 879, 880, 888, 893, 935, 936, 958, 961, 979, 980, 983, 984, 986, 987, 990, 991, 995, 997, 1001, 1002, 1019, 1021, 1031, 1032, 1035, 1036, 1037, 1040, 1041, 1044], "periodic_spline_transform": 4, "n_spline": [4, 878], "degre": [4, 17, 35, 98, 114, 156, 163, 168, 170, 175, 178, 183, 187, 188, 200, 203, 234, 240, 245, 246, 247, 250, 251, 260, 274, 302, 317, 318, 335, 342, 345, 412, 416, 444, 450, 496, 533, 539, 637, 638, 641, 654, 772, 794, 796, 845, 874, 878, 901, 902, 903, 904, 905, 979, 980, 982, 983, 984, 985, 987, 988, 990, 993, 994, 997, 1000, 1002, 1019, 1030, 1036, 1040, 1041, 1044], "n_knot": [4, 200, 318, 878, 997, 1040], "include_bia": [4, 178, 274, 874, 878, 1041], "knot": [4, 200, 318, 878, 997, 1040], "linspac": [4, 8, 10, 11, 14, 25, 27, 38, 39, 41, 43, 50, 56, 81, 82, 97, 105, 113, 125, 151, 152, 154, 155, 156, 157, 158, 160, 170, 178, 179, 181, 183, 189, 193, 199, 200, 201, 205, 209, 210, 211, 212, 213, 217, 225, 228, 231, 232, 234, 236, 249, 260, 262, 263, 267, 268, 269, 270, 274, 288, 289, 295, 296, 306, 308, 319, 320, 337, 338, 341, 343, 344, 346, 347, 348, 629, 630, 802, 823, 839, 840, 1020], "again": [4, 21, 68, 73, 125, 155, 157, 159, 169, 224, 261, 351, 362, 383, 388, 393, 394, 407, 408, 409, 414, 415, 470, 565, 566, 632, 645, 649, 651, 653, 659, 661, 663, 690, 976, 983, 987, 1001, 1024, 1027, 1035, 1044], "splines_df": 4, "spline_": 4, "shape": [4, 5, 6, 8, 9, 10, 11, 13, 14, 17, 18, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 42, 47, 48, 49, 52, 53, 54, 55, 56, 59, 61, 62, 67, 71, 75, 76, 81, 96, 97, 99, 113, 118, 119, 120, 121, 122, 125, 126, 127, 130, 131, 140, 144, 146, 152, 153, 155, 157, 158, 163, 164, 166, 170, 171, 187, 188, 199, 201, 206, 208, 211, 212, 213, 214, 215, 219, 220, 221, 222, 223, 226, 228, 231, 232, 233, 234, 235, 237, 238, 245, 247, 249, 250, 251, 258, 260, 262, 263, 266, 267, 269, 270, 283, 288, 289, 293, 296, 299, 301, 307, 308, 315, 317, 320, 321, 322, 327, 328, 330, 335, 338, 341, 342, 343, 344, 347, 348, 351, 352, 360, 366, 372, 373, 374, 379, 381, 393, 404, 405, 407, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 496, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 710, 711, 712, 713, 714, 715, 716, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 916, 921, 924, 925, 930, 934, 936, 938, 941, 949, 951, 956, 958, 962, 963, 964, 965, 966, 967, 968, 977, 982, 983, 987, 988, 989, 990, 991, 993, 997, 998, 999, 1000, 1001, 1002, 1003, 1008, 1017, 1018, 1020, 1021, 1027, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1041, 1043, 1044], "concat": [4, 13, 163, 168, 188, 217, 872], "cmap": [4, 5, 6, 11, 12, 14, 17, 21, 22, 31, 32, 33, 35, 40, 41, 47, 48, 51, 52, 54, 55, 59, 81, 83, 90, 96, 99, 102, 106, 114, 120, 121, 140, 146, 154, 155, 170, 178, 182, 183, 190, 191, 208, 211, 212, 213, 215, 221, 222, 223, 232, 233, 237, 254, 255, 283, 287, 289, 291, 292, 294, 296, 299, 301, 302, 305, 307, 325, 326, 330, 334, 335, 336, 337, 338, 339, 340, 343, 344, 347, 348, 357, 695, 1017, 1018], "cm": [4, 6, 11, 12, 14, 17, 21, 22, 25, 31, 32, 33, 39, 40, 47, 48, 50, 51, 52, 53, 54, 55, 56, 59, 61, 62, 68, 81, 83, 90, 96, 99, 102, 114, 120, 121, 140, 146, 154, 155, 170, 182, 191, 208, 211, 212, 215, 221, 222, 223, 229, 232, 233, 237, 242, 254, 255, 283, 286, 287, 289, 293, 296, 299, 301, 302, 305, 307, 317, 320, 325, 326, 330, 334, 335, 336, 338, 339, 340, 344, 347, 348, 357, 376, 408, 695, 912, 987, 997, 1003, 1017, 1018], "tab20b": 4, "stai": [4, 13, 27, 38, 105, 169, 352, 378, 379, 383, 393, 394, 992, 1010, 1033], "midnight": 4, "fewer": [4, 14, 27, 56, 112, 121, 123, 199, 366, 380, 407, 416, 417, 446, 459, 551, 592, 694, 829, 940, 983, 988, 990, 1032, 1033, 1034], "most": [4, 6, 8, 12, 14, 20, 25, 28, 53, 54, 56, 63, 79, 86, 87, 104, 112, 118, 119, 126, 132, 143, 144, 145, 147, 148, 156, 164, 168, 169, 170, 171, 172, 175, 183, 199, 200, 217, 235, 239, 245, 251, 257, 258, 263, 267, 268, 270, 278, 281, 292, 305, 311, 312, 315, 318, 321, 326, 338, 342, 351, 352, 353, 362, 366, 367, 368, 374, 375, 377, 379, 381, 383, 384, 385, 387, 391, 393, 394, 397, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 441, 442, 444, 448, 454, 455, 458, 466, 494, 501, 519, 522, 530, 532, 537, 541, 547, 549, 559, 560, 564, 565, 586, 587, 589, 591, 602, 609, 625, 628, 647, 656, 670, 672, 674, 676, 685, 686, 690, 693, 722, 725, 743, 755, 756, 760, 782, 791, 794, 795, 799, 800, 815, 827, 828, 841, 842, 843, 845, 847, 848, 849, 850, 851, 874, 876, 884, 885, 887, 888, 889, 890, 897, 935, 936, 938, 950, 955, 976, 977, 981, 982, 983, 984, 985, 986, 987, 988, 990, 993, 994, 995, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1011, 1017, 1019, 1020, 1021, 1029, 1030, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1042, 1044], "cyclic_spline_transform": 4, "cyclic_month": 4, "cyclic_weekdai": 4, "cyclic_hour": 4, "cyclic_spline_linear_pipelin": 4, "097": [4, 148, 376], "132": [4, 8, 14, 57, 123, 136, 414, 1008], "013": [4, 268, 352], "successfulli": [4, 14, 309, 378, 383, 407, 415, 1001], "reduc": [4, 7, 43, 46, 47, 48, 49, 54, 72, 73, 79, 115, 125, 127, 130, 145, 169, 178, 179, 183, 197, 203, 204, 207, 230, 232, 235, 238, 261, 267, 278, 292, 307, 310, 311, 320, 352, 353, 362, 371, 373, 376, 379, 385, 391, 393, 405, 406, 407, 409, 411, 412, 414, 415, 416, 418, 442, 443, 448, 455, 458, 491, 532, 542, 547, 553, 554, 555, 556, 561, 562, 563, 564, 571, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 605, 606, 608, 625, 641, 650, 670, 671, 672, 673, 685, 690, 693, 778, 796, 799, 800, 802, 810, 818, 820, 821, 822, 823, 826, 868, 869, 876, 888, 891, 892, 899, 900, 907, 908, 909, 910, 976, 979, 981, 982, 983, 984, 987, 990, 999, 1000, 1002, 1004, 1012, 1020, 1027, 1029, 1030, 1031, 1032, 1033, 1036, 1037, 1038, 1039, 1041, 1043], "choic": [4, 7, 41, 47, 56, 66, 71, 79, 103, 151, 152, 158, 163, 188, 200, 238, 254, 258, 260, 263, 288, 312, 317, 351, 352, 362, 366, 377, 381, 384, 397, 407, 409, 411, 413, 414, 416, 417, 450, 460, 469, 470, 471, 472, 473, 474, 476, 536, 538, 539, 545, 557, 636, 645, 646, 654, 656, 657, 659, 667, 678, 690, 703, 739, 828, 841, 842, 847, 849, 850, 876, 879, 888, 890, 899, 900, 923, 976, 981, 983, 984, 985, 986, 987, 988, 993, 995, 1000, 1001, 1002, 1003, 1034, 1037, 1038, 1042, 1043], "arbitrari": [4, 56, 87, 96, 97, 98, 117, 158, 178, 199, 216, 217, 258, 305, 309, 311, 317, 351, 360, 367, 379, 391, 393, 408, 411, 412, 414, 415, 419, 444, 448, 453, 455, 463, 530, 531, 557, 558, 579, 637, 646, 667, 678, 686, 739, 786, 797, 798, 803, 805, 839, 840, 841, 842, 843, 845, 847, 849, 850, 851, 852, 853, 863, 865, 878, 976, 978, 979, 983, 984, 987, 990, 997, 1007, 1021, 1027, 1028, 1031, 1033, 1034, 1035, 1037, 1041, 1043], "held": [4, 8, 72, 103, 126, 171, 207, 247, 263, 268, 281, 414, 557, 558, 559, 560, 699, 796, 799, 800, 810, 856, 857, 869, 976, 977, 986, 995, 1021], "point": [4, 9, 11, 13, 14, 17, 27, 32, 38, 39, 41, 42, 49, 50, 53, 56, 59, 61, 65, 68, 81, 82, 86, 91, 92, 93, 95, 97, 99, 101, 107, 112, 114, 118, 121, 122, 123, 130, 148, 153, 158, 159, 166, 169, 170, 171, 178, 182, 188, 191, 193, 195, 197, 199, 200, 201, 203, 205, 208, 211, 212, 216, 217, 220, 221, 222, 223, 224, 228, 231, 233, 247, 251, 254, 257, 261, 262, 267, 269, 270, 281, 283, 286, 287, 288, 289, 290, 291, 292, 294, 296, 299, 306, 307, 309, 311, 325, 326, 330, 334, 338, 339, 340, 342, 343, 347, 348, 351, 352, 353, 357, 362, 366, 367, 368, 373, 374, 375, 376, 377, 378, 379, 381, 383, 384, 385, 387, 391, 393, 394, 406, 407, 412, 413, 414, 415, 418, 419, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 450, 452, 453, 454, 455, 456, 458, 459, 467, 470, 472, 496, 502, 510, 512, 513, 517, 520, 523, 528, 531, 533, 539, 550, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 608, 609, 626, 629, 630, 631, 635, 636, 637, 642, 643, 649, 653, 655, 668, 669, 671, 673, 674, 676, 677, 680, 681, 686, 687, 688, 689, 690, 691, 692, 699, 704, 705, 708, 711, 715, 720, 722, 728, 733, 734, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 761, 776, 777, 787, 788, 794, 795, 796, 810, 820, 829, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 856, 857, 864, 869, 878, 893, 894, 895, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 913, 917, 979, 981, 983, 984, 985, 986, 987, 988, 989, 990, 991, 993, 994, 997, 999, 1000, 1002, 1003, 1006, 1007, 1008, 1016, 1019, 1020, 1021, 1027, 1028, 1029, 1031, 1033, 1034, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "naive_linear_predict": 4, "one_hot_linear_predict": 4, "cyclic_cossin_linear_predict": 4, "cyclic_spline_linear_predict": 4, "zoom": [4, 117, 305], "insight": [4, 7, 169, 170, 200, 201, 217, 301, 305, 351, 360, 405, 796, 799, 800, 810, 822, 994, 1003, 1011], "last_hour": [4, 13], "slice": [4, 13, 18, 121, 208, 222, 225, 233, 291, 294, 318, 319, 334, 374, 380, 381, 388, 408, 462, 465, 491, 492, 506, 544, 637, 771, 775, 778, 915, 939, 940, 958, 1039, 1041], "suptitl": [4, 5, 13, 15, 33, 34, 35, 40, 41, 51, 54, 58, 61, 68, 76, 96, 99, 106, 112, 121, 122, 129, 132, 160, 169, 170, 172, 193, 198, 214, 215, 220, 221, 222, 237, 248, 256, 302, 305, 307, 315, 317, 325, 326, 330, 345, 346, 357], "label": [4, 6, 7, 9, 11, 12, 13, 14, 17, 21, 25, 26, 27, 28, 31, 33, 34, 39, 41, 43, 44, 46, 47, 48, 49, 50, 52, 53, 56, 57, 59, 61, 64, 65, 66, 67, 68, 74, 76, 79, 80, 81, 82, 86, 87, 90, 92, 93, 98, 100, 102, 103, 104, 105, 112, 113, 114, 115, 116, 123, 124, 125, 126, 127, 128, 129, 131, 132, 135, 144, 146, 151, 152, 156, 157, 158, 159, 160, 163, 166, 169, 172, 175, 178, 179, 181, 182, 183, 187, 188, 189, 193, 199, 200, 201, 202, 205, 206, 207, 208, 209, 213, 214, 216, 217, 221, 222, 223, 228, 233, 234, 236, 237, 238, 239, 247, 254, 255, 258, 259, 261, 262, 263, 264, 266, 269, 270, 271, 272, 273, 274, 281, 288, 290, 292, 295, 300, 302, 305, 306, 310, 315, 316, 319, 322, 324, 328, 329, 330, 331, 340, 342, 345, 346, 351, 352, 356, 357, 358, 359, 368, 371, 372, 373, 378, 379, 381, 384, 388, 393, 394, 404, 405, 417, 418, 424, 425, 429, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 457, 459, 460, 463, 467, 485, 486, 487, 491, 492, 493, 494, 500, 501, 506, 507, 510, 512, 513, 517, 520, 521, 547, 548, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 562, 563, 565, 567, 568, 590, 591, 592, 593, 594, 596, 597, 598, 602, 603, 604, 607, 608, 629, 656, 657, 664, 665, 666, 671, 672, 673, 674, 675, 676, 695, 696, 698, 700, 701, 702, 703, 705, 707, 708, 710, 711, 712, 713, 714, 715, 716, 718, 722, 723, 724, 726, 727, 728, 731, 732, 733, 734, 735, 736, 737, 738, 740, 751, 752, 753, 754, 779, 780, 781, 783, 784, 785, 786, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 802, 803, 805, 810, 811, 812, 814, 815, 816, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 845, 846, 848, 849, 856, 857, 859, 863, 866, 867, 870, 872, 873, 880, 883, 894, 895, 896, 899, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 913, 919, 924, 925, 950, 951, 958, 976, 983, 984, 988, 989, 990, 991, 993, 994, 997, 1001, 1002, 1003, 1006, 1008, 1009, 1012, 1016, 1017, 1019, 1020, 1021, 1023, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "actual": [4, 13, 28, 47, 61, 76, 87, 118, 148, 175, 188, 199, 203, 207, 247, 256, 263, 353, 362, 366, 368, 376, 377, 379, 381, 384, 385, 391, 392, 393, 405, 407, 412, 415, 416, 432, 507, 513, 514, 525, 533, 536, 538, 545, 560, 561, 642, 643, 646, 656, 657, 664, 665, 666, 667, 668, 670, 672, 674, 675, 676, 678, 685, 689, 693, 699, 702, 707, 713, 719, 720, 721, 782, 794, 799, 800, 815, 816, 845, 876, 899, 905, 927, 928, 929, 962, 979, 986, 987, 990, 994, 995, 1010, 1034, 1035, 1041, 1042, 1043], "black": [4, 9, 10, 11, 13, 27, 35, 45, 50, 56, 57, 81, 82, 93, 96, 121, 143, 151, 152, 156, 157, 160, 164, 169, 170, 178, 187, 188, 189, 191, 195, 199, 200, 201, 205, 208, 211, 212, 217, 228, 238, 245, 248, 288, 299, 300, 302, 330, 348, 357, 358, 359, 379, 397, 400, 407, 414, 417, 553, 554, 629, 993, 994, 1003, 1006, 1012], "One": [4, 9, 12, 25, 31, 50, 56, 92, 101, 103, 120, 122, 125, 128, 166, 169, 172, 177, 203, 208, 214, 218, 228, 239, 250, 260, 267, 270, 278, 289, 290, 292, 306, 322, 333, 335, 336, 347, 349, 352, 366, 376, 379, 392, 393, 407, 410, 412, 413, 414, 415, 416, 418, 442, 447, 470, 472, 476, 510, 564, 629, 637, 656, 664, 666, 671, 673, 674, 675, 785, 803, 804, 827, 828, 829, 860, 861, 872, 903, 950, 977, 979, 983, 984, 985, 986, 987, 988, 990, 991, 994, 995, 997, 1002, 1008, 1009, 1023, 1031, 1033, 1040, 1042], "legend": [4, 7, 8, 9, 11, 13, 25, 27, 34, 38, 41, 62, 73, 74, 76, 79, 80, 81, 82, 86, 87, 91, 98, 100, 103, 104, 105, 112, 113, 114, 115, 116, 118, 123, 124, 125, 126, 127, 128, 129, 131, 132, 134, 135, 144, 151, 152, 156, 157, 158, 159, 160, 169, 170, 175, 178, 179, 181, 184, 187, 188, 189, 193, 199, 200, 201, 202, 205, 206, 207, 208, 209, 212, 213, 214, 216, 217, 223, 231, 232, 233, 234, 236, 239, 247, 255, 257, 259, 260, 262, 263, 264, 265, 267, 270, 272, 273, 274, 278, 286, 288, 289, 290, 295, 300, 306, 310, 316, 319, 322, 327, 337, 340, 342, 345, 351, 356, 357, 358, 359, 698, 1017, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "draw": [4, 7, 17, 61, 160, 169, 195, 239, 262, 267, 338, 386, 410, 412, 413, 414, 553, 554, 555, 556, 561, 562, 563, 564, 609, 632, 699, 802, 818, 911, 913, 986, 1006, 1015, 1040, 1041], "conclus": [4, 101, 169, 171, 199, 201, 260, 262, 362, 414, 1015], "abov": [4, 26, 27, 38, 45, 67, 71, 114, 117, 118, 125, 135, 147, 148, 169, 170, 185, 199, 201, 205, 210, 232, 235, 236, 260, 266, 278, 288, 307, 310, 311, 316, 318, 322, 352, 353, 360, 362, 366, 367, 368, 373, 374, 376, 377, 378, 379, 381, 383, 385, 391, 393, 394, 407, 408, 409, 411, 412, 413, 415, 417, 439, 443, 462, 465, 487, 493, 494, 495, 521, 588, 632, 702, 752, 796, 800, 808, 810, 820, 862, 863, 876, 882, 888, 896, 950, 976, 977, 979, 981, 983, 984, 987, 990, 992, 994, 997, 1001, 1002, 1003, 1007, 1012, 1013, 1019, 1020, 1021, 1033], "problemat": [4, 256, 408, 977, 1035], "captur": [4, 9, 12, 13, 38, 40, 87, 125, 129, 143, 156, 169, 178, 183, 199, 203, 251, 281, 316, 338, 342, 387, 407, 414, 415, 416, 569, 586, 587, 589, 845, 954, 987, 992, 1000, 1004, 1019, 1039], "big": [4, 45, 61, 63, 204, 221, 238, 251, 367, 379, 385, 394, 409, 415, 419, 536, 559, 560, 562, 563, 802, 823, 834, 835, 836, 837, 838, 1007, 1011, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "goe": [4, 38, 117, 360, 377, 379, 414, 469, 470, 476, 555, 556, 562, 563, 564, 907, 908, 909, 910, 997, 1001], "artifact": [4, 14, 47, 48, 305, 368, 383], "discontinu": [4, 391], "fail": [4, 55, 67, 97, 103, 159, 160, 178, 183, 203, 235, 260, 315, 367, 377, 379, 381, 382, 387, 394, 397, 410, 411, 438, 470, 472, 674, 675, 676, 856, 857, 918, 930, 976, 984, 1027, 1028, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044], "intra": [4, 586, 589, 789, 790], "variat": [4, 7, 12, 38, 66, 93, 129, 148, 156, 157, 164, 166, 169, 204, 244, 246, 251, 252, 257, 271, 281, 293, 316, 328, 338, 376, 411, 412, 441, 445, 457, 534, 641, 670, 672, 673, 794, 795, 814, 815, 817, 976, 987, 997, 1000, 1003, 1006, 1008, 1017, 1019, 1022, 1023, 1030, 1032, 1033], "harmon": [4, 38, 267, 352, 407, 533, 539, 726, 727, 733, 780, 792, 987], "phase": [4, 183, 193, 366, 625, 979, 984, 990, 1011, 1035, 1037], "potenti": [4, 56, 79, 164, 168, 170, 178, 289, 290, 299, 321, 322, 342, 353, 366, 367, 377, 393, 397, 398, 407, 411, 414, 415, 466, 480, 481, 482, 483, 494, 522, 547, 555, 556, 559, 560, 562, 563, 571, 604, 609, 632, 760, 889, 890, 897, 907, 908, 909, 910, 993, 1001, 1003, 1006, 1021, 1030, 1037, 1038, 1041, 1044], "fix": [4, 8, 21, 26, 35, 47, 72, 105, 117, 118, 121, 151, 152, 156, 159, 169, 183, 201, 217, 238, 251, 263, 299, 315, 316, 317, 318, 319, 320, 321, 322, 352, 366, 367, 373, 375, 377, 378, 379, 381, 382, 387, 391, 393, 394, 398, 407, 408, 411, 412, 414, 415, 417, 450, 460, 470, 502, 510, 529, 535, 538, 540, 546, 547, 557, 558, 562, 563, 586, 589, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 628, 651, 661, 666, 668, 682, 685, 689, 693, 705, 782, 794, 810, 817, 841, 842, 844, 847, 849, 850, 866, 869, 883, 907, 908, 936, 954, 976, 983, 986, 987, 990, 997, 1007, 1021, 1025, 1026, 1028, 1029, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045], "two": [4, 7, 9, 11, 15, 17, 21, 25, 27, 31, 35, 38, 40, 41, 44, 56, 61, 65, 71, 72, 76, 81, 86, 87, 91, 92, 93, 96, 98, 99, 101, 104, 111, 112, 113, 120, 121, 122, 123, 125, 128, 129, 130, 133, 136, 145, 148, 151, 152, 153, 154, 157, 158, 163, 164, 166, 169, 170, 171, 178, 182, 183, 187, 188, 189, 190, 195, 199, 200, 201, 207, 208, 211, 216, 217, 222, 224, 225, 228, 233, 235, 236, 238, 245, 246, 247, 249, 250, 251, 255, 257, 261, 267, 278, 286, 288, 291, 292, 294, 296, 305, 307, 310, 315, 316, 318, 319, 327, 334, 335, 338, 339, 340, 342, 347, 351, 352, 353, 357, 362, 372, 373, 374, 375, 376, 377, 379, 381, 383, 385, 386, 387, 391, 393, 394, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 439, 440, 441, 442, 443, 445, 448, 449, 450, 451, 455, 457, 462, 467, 468, 469, 470, 471, 472, 473, 474, 486, 488, 489, 490, 491, 492, 494, 496, 498, 499, 500, 501, 502, 503, 505, 508, 512, 517, 520, 534, 536, 538, 542, 545, 547, 548, 551, 558, 568, 579, 582, 588, 589, 590, 593, 594, 596, 597, 598, 599, 600, 601, 604, 605, 606, 608, 609, 618, 619, 622, 626, 629, 630, 637, 641, 643, 668, 669, 671, 690, 697, 701, 702, 703, 710, 713, 714, 717, 719, 720, 721, 728, 729, 732, 733, 735, 738, 740, 751, 752, 754, 760, 761, 768, 771, 774, 775, 776, 777, 778, 782, 783, 791, 792, 793, 794, 828, 839, 840, 841, 842, 843, 845, 847, 849, 850, 851, 856, 857, 863, 864, 871, 872, 873, 874, 893, 894, 895, 899, 900, 907, 909, 910, 950, 966, 967, 973, 976, 977, 979, 981, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 997, 999, 1000, 1001, 1002, 1003, 1004, 1008, 1012, 1016, 1019, 1020, 1021, 1024, 1027, 1028, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "onc": [4, 8, 51, 145, 148, 151, 221, 235, 238, 258, 261, 278, 283, 311, 315, 319, 351, 353, 360, 362, 366, 368, 373, 374, 377, 379, 383, 384, 385, 386, 387, 392, 393, 394, 407, 408, 410, 411, 412, 414, 415, 416, 417, 447, 449, 451, 470, 506, 507, 536, 542, 549, 557, 558, 588, 589, 595, 609, 617, 625, 645, 649, 651, 653, 659, 661, 663, 664, 665, 666, 674, 675, 676, 695, 710, 714, 716, 733, 778, 797, 801, 804, 814, 834, 835, 836, 837, 838, 911, 983, 984, 990, 997, 1001, 1002, 1003, 1012, 1021, 1024, 1027, 1035, 1037, 1038, 1039, 1040, 1044], "specif": [4, 11, 12, 21, 28, 35, 45, 56, 63, 66, 71, 73, 118, 132, 156, 159, 169, 170, 175, 203, 217, 255, 260, 278, 305, 315, 316, 320, 342, 351, 352, 353, 362, 366, 367, 374, 379, 382, 384, 385, 387, 391, 393, 397, 403, 406, 407, 408, 411, 412, 414, 415, 416, 417, 431, 494, 501, 532, 549, 555, 562, 565, 566, 567, 568, 572, 586, 589, 591, 610, 611, 612, 613, 615, 616, 617, 618, 620, 621, 623, 638, 641, 644, 645, 650, 656, 670, 685, 695, 697, 710, 711, 743, 796, 797, 798, 803, 804, 805, 810, 822, 835, 928, 930, 931, 950, 963, 964, 965, 981, 983, 984, 986, 987, 989, 990, 992, 994, 995, 997, 1001, 1003, 1004, 1005, 1021, 1023, 1027, 1031, 1035, 1036, 1037, 1038, 1041, 1042, 1044], "furthermor": [4, 13, 38, 118, 157, 170, 171, 238, 239, 241, 283, 351, 352, 366, 368, 386, 407, 412, 414, 415, 560, 588, 604, 617, 702, 733, 743, 752, 754, 792, 899, 983, 995, 1030, 1034], "enforc": [4, 12, 35, 54, 96, 156, 193, 292, 366, 379, 409, 412, 414, 424, 430, 506, 525, 529, 535, 537, 540, 541, 543, 544, 546, 555, 556, 559, 560, 562, 563, 863, 878, 907, 908, 909, 910, 919, 920, 977, 984, 1029, 1035, 1037, 1039, 1043], "behav": [4, 12, 53, 58, 203, 255, 305, 317, 338, 362, 379, 385, 391, 392, 407, 408, 411, 879, 983, 997, 1002, 1004, 1007, 1021, 1027, 1034, 1036, 1040, 1041], "similarli": [4, 12, 38, 56, 93, 128, 170, 172, 183, 188, 199, 229, 238, 260, 299, 305, 321, 338, 362, 367, 375, 377, 381, 384, 393, 404, 410, 411, 415, 726, 727, 735, 780, 781, 784, 982, 984, 985, 987, 994, 1001, 1002, 1004, 1012, 1016, 1035, 1041, 1043], "spiki": 4, "instanc": [4, 8, 10, 13, 25, 27, 28, 54, 57, 59, 115, 145, 148, 164, 170, 171, 182, 183, 230, 235, 238, 256, 258, 269, 271, 272, 294, 315, 322, 330, 334, 335, 341, 342, 351, 352, 353, 365, 366, 367, 373, 374, 376, 377, 378, 379, 381, 383, 384, 385, 387, 388, 391, 393, 397, 398, 404, 405, 407, 408, 411, 412, 414, 415, 416, 417, 418, 419, 421, 431, 432, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 455, 456, 457, 458, 460, 462, 463, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 486, 489, 490, 493, 494, 495, 501, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 575, 579, 580, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 605, 606, 608, 609, 618, 625, 626, 627, 628, 630, 632, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 705, 718, 726, 727, 735, 768, 771, 775, 776, 777, 778, 780, 781, 784, 785, 786, 789, 790, 794, 795, 796, 798, 799, 800, 801, 802, 803, 805, 808, 810, 811, 812, 813, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 858, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 888, 891, 892, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 912, 919, 920, 922, 930, 931, 935, 936, 943, 944, 945, 946, 955, 956, 957, 958, 961, 971, 972, 976, 977, 983, 984, 987, 989, 990, 993, 995, 997, 1001, 1002, 1003, 1007, 1012, 1019, 1020, 1021, 1023, 1027, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "shorter": [4, 157, 248, 391, 407, 412, 448, 455, 561, 695, 989, 993, 1021, 1038], "necessarili": [4, 32, 73, 99, 169, 199, 207, 217, 233, 234, 246, 307, 351, 352, 373, 383, 403, 405, 407, 414, 625, 847, 849, 850, 851, 981, 984, 986, 987], "59": [4, 175, 183, 217, 343, 376, 385, 407, 408, 508, 987, 1027], "37": [4, 8, 183, 263, 325, 360, 374, 414, 522, 714, 879, 890, 997, 1027], "creat": [4, 5, 8, 11, 13, 17, 21, 22, 27, 28, 31, 33, 35, 38, 40, 42, 44, 45, 47, 50, 53, 59, 61, 63, 72, 73, 81, 87, 91, 98, 101, 114, 117, 121, 122, 123, 125, 128, 131, 146, 147, 151, 153, 156, 157, 158, 160, 164, 168, 170, 178, 180, 182, 185, 195, 200, 201, 211, 212, 222, 233, 235, 238, 239, 241, 250, 255, 256, 258, 260, 270, 291, 293, 294, 307, 309, 310, 315, 318, 319, 330, 334, 335, 339, 340, 343, 346, 347, 348, 353, 356, 358, 359, 362, 367, 374, 375, 377, 378, 379, 381, 383, 384, 385, 386, 387, 388, 392, 393, 397, 405, 407, 408, 411, 413, 414, 415, 417, 436, 449, 451, 463, 464, 497, 513, 514, 515, 516, 544, 551, 553, 554, 555, 556, 557, 558, 561, 562, 563, 564, 586, 587, 589, 595, 626, 628, 629, 630, 631, 695, 696, 698, 699, 700, 779, 786, 796, 798, 802, 806, 810, 814, 818, 820, 821, 829, 860, 872, 901, 904, 907, 908, 909, 910, 914, 917, 939, 940, 946, 955, 960, 972, 977, 983, 986, 987, 988, 990, 994, 997, 998, 999, 1001, 1002, 1003, 1006, 1007, 1011, 1017, 1019, 1020, 1024, 1027, 1028, 1030, 1033, 1037, 1040, 1041, 1042, 1043, 1044], "turn": [4, 33, 79, 163, 164, 169, 183, 214, 215, 233, 260, 287, 353, 366, 367, 368, 374, 391, 393, 394, 406, 407, 408, 410, 412, 415, 416, 417, 579, 580, 587, 605, 606, 828, 832, 901, 904, 922, 977, 981, 989, 992, 997, 1011, 1021, 1032, 1034, 1035, 1040], "downstream": [4, 81, 312, 353, 415, 529, 532, 535, 539, 540, 604, 872, 997, 1037], "freedom": [4, 98, 156, 187, 188, 190, 260, 539, 654, 794, 983, 1030], "underfit": [4, 35, 125, 151, 166, 171, 200, 203, 253, 275, 276, 299, 311, 346, 414, 655, 796, 799, 800, 810, 821, 822, 859, 874, 982, 983, 1008], "approxim": [4, 5, 28, 34, 47, 54, 81, 100, 101, 105, 116, 124, 125, 148, 152, 169, 176, 179, 195, 199, 200, 213, 217, 222, 225, 227, 228, 231, 234, 243, 251, 260, 265, 274, 275, 284, 285, 292, 297, 305, 307, 308, 310, 315, 318, 351, 353, 358, 359, 362, 371, 376, 388, 391, 393, 404, 405, 408, 410, 411, 412, 414, 417, 419, 420, 421, 431, 447, 467, 468, 471, 472, 473, 474, 480, 481, 482, 489, 494, 500, 519, 522, 531, 532, 533, 534, 536, 537, 538, 539, 541, 542, 543, 544, 545, 557, 558, 580, 587, 608, 609, 617, 636, 637, 638, 639, 640, 655, 656, 657, 670, 672, 674, 675, 677, 685, 690, 755, 756, 761, 794, 797, 814, 820, 824, 825, 839, 840, 843, 847, 849, 850, 851, 855, 859, 860, 865, 869, 871, 872, 876, 888, 899, 904, 905, 935, 936, 961, 980, 981, 982, 983, 984, 986, 990, 991, 992, 993, 994, 995, 999, 1001, 1002, 1003, 1006, 1007, 1008, 1021, 1023, 1027, 1028, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1041], "especi": [4, 8, 13, 56, 57, 122, 125, 169, 199, 235, 311, 320, 352, 362, 367, 373, 379, 387, 391, 393, 405, 407, 415, 441, 447, 499, 536, 555, 556, 557, 558, 562, 563, 564, 644, 645, 646, 648, 650, 651, 652, 656, 657, 658, 659, 660, 661, 667, 678, 693, 703, 743, 834, 835, 836, 837, 838, 907, 908, 909, 910, 983, 989, 990, 997, 1011, 1030, 1035, 1039, 1040, 1041], "sharp": [4, 170, 994, 997], "rush": [4, 13, 379], "flatter": [4, 26], "accur": [4, 9, 13, 22, 26, 27, 81, 96, 127, 151, 158, 169, 170, 203, 214, 217, 260, 267, 271, 278, 319, 351, 352, 362, 378, 405, 407, 409, 412, 414, 415, 416, 435, 441, 445, 449, 451, 457, 529, 536, 538, 540, 541, 543, 544, 545, 605, 606, 632, 799, 800, 839, 840, 935, 936, 979, 984, 987, 1003, 1041], "tend": [4, 12, 28, 38, 40, 44, 53, 56, 58, 148, 169, 170, 188, 199, 204, 217, 245, 248, 257, 261, 281, 302, 342, 353, 366, 368, 379, 381, 393, 405, 407, 409, 412, 414, 416, 435, 446, 651, 845, 876, 888, 936, 983, 984, 990, 1003, 1021], "under": [4, 7, 11, 25, 26, 28, 42, 68, 79, 80, 103, 122, 125, 170, 199, 228, 238, 260, 267, 269, 270, 306, 321, 373, 379, 381, 383, 385, 387, 393, 397, 401, 405, 407, 409, 411, 412, 415, 416, 444, 449, 451, 468, 469, 470, 471, 472, 473, 474, 530, 537, 539, 541, 652, 653, 654, 700, 704, 705, 706, 713, 739, 751, 785, 786, 794, 795, 844, 943, 983, 984, 985, 987, 990, 997, 1001, 1002, 1003, 1006, 1007, 1021, 1027, 1029, 1030, 1032, 1035, 1039], "These": [4, 5, 7, 28, 52, 96, 98, 117, 121, 166, 170, 188, 199, 200, 201, 229, 267, 278, 283, 287, 302, 305, 312, 314, 319, 326, 328, 362, 366, 367, 372, 375, 376, 379, 381, 383, 386, 388, 391, 393, 397, 401, 404, 405, 406, 407, 410, 412, 414, 415, 416, 417, 440, 444, 446, 496, 506, 507, 513, 536, 565, 566, 600, 601, 666, 674, 675, 697, 704, 730, 775, 791, 796, 799, 800, 802, 810, 818, 820, 821, 822, 823, 824, 826, 844, 845, 864, 976, 978, 981, 983, 984, 987, 988, 998, 1000, 1002, 1006, 1012, 1016, 1021, 1027, 1033, 1035, 1036, 1037, 1040, 1044], "systemat": [4, 260, 381, 710, 725, 987, 1042], "reveal": [4, 13, 169, 171, 351, 385, 404, 984, 1043], "form": [4, 9, 20, 33, 43, 61, 68, 96, 135, 158, 159, 169, 234, 235, 251, 260, 325, 362, 373, 376, 379, 381, 383, 393, 394, 404, 406, 407, 410, 411, 412, 413, 414, 415, 417, 419, 421, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 454, 457, 461, 462, 463, 465, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 568, 579, 580, 581, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 681, 683, 685, 686, 687, 688, 689, 690, 691, 697, 794, 795, 796, 799, 800, 801, 804, 806, 810, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 891, 892, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 925, 944, 947, 976, 978, 980, 981, 983, 984, 987, 988, 991, 992, 993, 997, 1002, 1006, 1012, 1019, 1033, 1037, 1039], "explain": [4, 5, 12, 57, 74, 86, 87, 104, 125, 151, 156, 157, 170, 171, 199, 217, 228, 235, 251, 270, 273, 311, 351, 352, 367, 377, 379, 383, 391, 401, 403, 410, 412, 417, 491, 519, 522, 532, 539, 542, 547, 623, 646, 654, 667, 678, 719, 720, 721, 725, 782, 983, 990, 1003, 1005, 1006, 1017, 1019, 1020, 1038, 1040, 1041], "lack": [4, 342, 379, 381, 391, 411, 824, 914, 1002, 1041], "deriv": [4, 20, 105, 106, 124, 156, 159, 171, 187, 188, 192, 200, 367, 374, 381, 409, 411, 413, 414, 415, 417, 419, 439, 443, 444, 463, 531, 604, 615, 620, 646, 667, 674, 678, 856, 857, 872, 878, 899, 900, 981, 983, 984, 987, 991, 993, 1002, 1027, 1028, 1029, 1034, 1035, 1036, 1042], "address": [4, 49, 203, 351, 374, 379, 407, 415, 445, 655, 983, 984, 989, 990, 991, 992, 993, 997, 1011, 1019, 1035], "section": [4, 38, 96, 101, 115, 123, 132, 138, 139, 140, 156, 160, 168, 169, 170, 172, 178, 183, 187, 188, 201, 224, 229, 235, 238, 240, 258, 260, 263, 269, 310, 311, 312, 317, 351, 352, 353, 362, 372, 374, 377, 379, 380, 381, 383, 384, 385, 386, 387, 394, 398, 401, 405, 406, 408, 410, 411, 412, 414, 415, 416, 417, 437, 441, 457, 532, 612, 617, 620, 635, 643, 785, 795, 901, 904, 976, 981, 983, 987, 988, 990, 991, 993, 994, 1001, 1002, 1004, 1005, 1019, 1021, 1027, 1029, 1030, 1031, 1034], "margin": [4, 12, 17, 26, 28, 92, 114, 152, 153, 154, 155, 156, 157, 166, 169, 170, 177, 209, 210, 212, 218, 236, 238, 260, 278, 305, 308, 311, 333, 334, 336, 337, 338, 340, 342, 347, 348, 349, 376, 405, 406, 412, 414, 417, 510, 608, 609, 629, 643, 674, 732, 828, 876, 888, 901, 904, 983, 987, 989, 993, 994, 997, 1001, 1002, 1008, 1019, 1034, 1036], "construct": [4, 11, 71, 73, 112, 114, 116, 120, 132, 148, 217, 229, 235, 240, 242, 296, 306, 308, 316, 319, 373, 376, 381, 388, 393, 407, 408, 411, 412, 414, 415, 418, 432, 439, 440, 442, 443, 448, 450, 455, 461, 463, 465, 517, 533, 539, 542, 553, 554, 579, 585, 637, 686, 688, 689, 810, 839, 840, 841, 842, 843, 845, 847, 849, 850, 851, 858, 859, 860, 861, 863, 904, 918, 920, 935, 936, 945, 946, 950, 976, 977, 979, 983, 984, 987, 988, 990, 997, 1000, 1002, 1003, 1007, 1012, 1016, 1032, 1034, 1035, 1038, 1041], "polynomialfeatur": [4, 178, 199, 200, 205, 240, 274, 317, 342, 878, 983, 997, 1031, 1035, 1036, 1037, 1040, 1041, 1043, 1044], "coars": [4, 121, 385, 446, 459], "explicitli": [4, 47, 119, 151, 158, 163, 164, 200, 231, 235, 322, 342, 353, 362, 367, 373, 375, 379, 380, 381, 383, 391, 393, 398, 403, 411, 415, 417, 533, 547, 548, 577, 578, 595, 625, 646, 656, 657, 667, 678, 707, 724, 779, 785, 786, 799, 800, 830, 833, 839, 840, 865, 889, 890, 955, 976, 977, 979, 981, 983, 984, 987, 989, 990, 997, 1011, 1021, 1027, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1039, 1040, 1041], "too": [4, 7, 12, 13, 18, 45, 51, 56, 58, 63, 71, 75, 83, 100, 125, 163, 171, 183, 200, 203, 221, 232, 238, 246, 254, 258, 267, 275, 301, 311, 338, 351, 358, 359, 366, 376, 379, 385, 387, 391, 393, 407, 409, 411, 414, 415, 416, 419, 435, 447, 536, 586, 589, 677, 690, 705, 834, 835, 836, 837, 838, 864, 877, 879, 982, 984, 986, 987, 989, 990, 994, 1019, 1028, 1031, 1034, 1035, 1036, 1037, 1039], "mani": [4, 7, 10, 20, 56, 57, 75, 79, 83, 112, 118, 119, 120, 121, 126, 144, 148, 171, 199, 220, 232, 246, 254, 260, 267, 268, 272, 283, 305, 310, 311, 315, 316, 317, 318, 319, 321, 322, 351, 362, 366, 368, 374, 376, 378, 379, 392, 393, 394, 397, 398, 404, 405, 407, 408, 409, 412, 414, 415, 416, 417, 419, 501, 551, 552, 555, 556, 557, 558, 562, 563, 564, 586, 589, 604, 607, 625, 637, 648, 652, 656, 657, 664, 665, 666, 674, 675, 676, 690, 693, 771, 775, 796, 800, 810, 856, 857, 872, 877, 879, 899, 907, 908, 909, 910, 976, 977, 979, 983, 984, 986, 987, 988, 989, 990, 993, 994, 997, 1000, 1002, 1004, 1005, 1006, 1007, 1011, 1019, 1021, 1027, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1041, 1042, 1043, 1044], "featureunion": [4, 75, 371, 393, 398, 406, 462, 627, 861, 977, 1007, 1011, 1023, 1028, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043], "hour_workday_interact": 4, "interaction_onli": [4, 874, 983, 997], "combin": [4, 12, 13, 21, 26, 28, 62, 71, 72, 74, 75, 76, 91, 96, 104, 105, 111, 122, 123, 127, 135, 136, 151, 157, 163, 164, 166, 169, 183, 199, 203, 216, 217, 224, 228, 230, 233, 238, 256, 260, 261, 269, 271, 272, 292, 300, 311, 317, 318, 320, 341, 342, 353, 357, 366, 371, 375, 376, 379, 384, 392, 393, 404, 405, 406, 407, 408, 411, 412, 413, 414, 415, 416, 417, 419, 420, 443, 462, 464, 465, 471, 473, 474, 477, 478, 479, 487, 494, 506, 507, 513, 519, 522, 524, 529, 535, 536, 538, 540, 545, 547, 558, 560, 563, 565, 566, 608, 612, 614, 619, 622, 628, 632, 641, 644, 645, 650, 651, 656, 657, 658, 659, 660, 661, 664, 666, 670, 671, 672, 673, 674, 676, 677, 679, 682, 690, 699, 727, 785, 796, 799, 800, 807, 808, 820, 822, 826, 843, 858, 859, 860, 864, 872, 873, 874, 879, 899, 961, 976, 979, 980, 983, 987, 988, 990, 993, 997, 1000, 1001, 1003, 1004, 1008, 1011, 1017, 1019, 1021, 1027, 1032, 1035, 1038, 1039, 1040, 1042, 1043], "previou": [4, 44, 54, 72, 96, 115, 122, 123, 125, 132, 151, 156, 157, 168, 169, 170, 183, 185, 200, 232, 234, 235, 260, 263, 267, 305, 310, 319, 351, 352, 353, 362, 366, 374, 379, 381, 384, 385, 387, 391, 393, 394, 397, 407, 414, 415, 466, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 628, 644, 646, 650, 651, 656, 658, 660, 664, 665, 666, 667, 674, 675, 676, 678, 705, 815, 830, 833, 848, 856, 857, 896, 913, 983, 987, 991, 997, 1007, 1012, 1021, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "nice": [4, 68, 200, 235, 305, 366, 412, 1021], "cyclic_spline_interactions_pipelin": 4, "078": [4, 175, 176, 212, 218, 1008], "009": [4, 6, 385], "104": [4, 13, 25, 187, 218, 240, 243, 1008], "highlight": [4, 13, 15, 56, 72, 81, 93, 110, 116, 117, 118, 119, 122, 129, 145, 148, 151, 152, 157, 163, 164, 170, 171, 175, 180, 187, 199, 200, 201, 217, 230, 235, 239, 240, 241, 242, 255, 257, 269, 272, 278, 281, 285, 309, 311, 323, 351, 353, 379, 383, 384, 387, 391, 417, 441, 444, 445, 462, 465, 488, 489, 494, 499, 500, 502, 510, 513, 519, 522, 536, 539, 559, 560, 562, 563, 565, 597, 600, 626, 628, 630, 632, 638, 644, 646, 650, 656, 667, 678, 686, 699, 700, 715, 729, 745, 785, 792, 796, 797, 799, 800, 802, 810, 818, 821, 822, 825, 841, 843, 860, 864, 869, 872, 873, 874, 878, 879, 880, 896, 897, 899, 904, 907, 908, 931, 984, 987, 995, 997, 1002, 1008, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "anoth": [4, 38, 96, 101, 112, 123, 127, 148, 151, 159, 164, 169, 188, 203, 207, 225, 228, 235, 239, 246, 260, 262, 263, 266, 270, 293, 351, 353, 356, 362, 366, 368, 373, 374, 377, 379, 381, 385, 391, 393, 398, 401, 404, 407, 411, 412, 414, 415, 416, 418, 440, 442, 450, 453, 460, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 506, 536, 538, 545, 671, 674, 690, 707, 717, 802, 818, 858, 859, 880, 976, 977, 982, 983, 984, 987, 988, 990, 993, 997, 1001, 1002, 1012, 1019, 1020, 1021, 1036, 1037, 1044], "either": [4, 10, 31, 72, 118, 121, 122, 169, 187, 189, 229, 238, 255, 264, 269, 288, 346, 351, 360, 366, 367, 371, 374, 377, 379, 380, 381, 385, 393, 398, 401, 405, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 419, 440, 445, 450, 485, 494, 510, 522, 531, 532, 534, 542, 553, 554, 555, 556, 557, 558, 559, 560, 562, 563, 564, 565, 566, 580, 581, 582, 586, 587, 588, 589, 591, 592, 595, 600, 605, 606, 608, 609, 620, 625, 628, 630, 631, 648, 652, 654, 662, 674, 676, 680, 681, 688, 695, 696, 700, 704, 705, 709, 710, 718, 721, 723, 724, 725, 726, 727, 732, 735, 736, 737, 739, 749, 753, 766, 771, 775, 779, 780, 781, 782, 784, 785, 786, 791, 796, 799, 800, 802, 810, 818, 819, 820, 821, 822, 823, 824, 826, 829, 859, 889, 890, 896, 899, 900, 907, 908, 909, 910, 914, 944, 948, 976, 983, 987, 988, 989, 990, 991, 992, 995, 997, 1001, 1002, 1012, 1020, 1021, 1027, 1030, 1036, 1037, 1038, 1041], "after": [4, 18, 21, 22, 27, 47, 54, 56, 71, 72, 76, 82, 98, 112, 123, 130, 132, 135, 144, 148, 156, 158, 160, 163, 169, 175, 192, 199, 238, 239, 242, 248, 260, 269, 281, 283, 291, 293, 305, 306, 309, 310, 351, 352, 368, 374, 376, 377, 378, 379, 381, 383, 385, 386, 387, 391, 393, 401, 403, 404, 405, 407, 408, 411, 412, 415, 416, 419, 440, 445, 448, 449, 450, 451, 454, 460, 513, 530, 534, 551, 552, 557, 558, 559, 560, 595, 625, 628, 656, 657, 664, 665, 666, 671, 673, 674, 675, 676, 690, 710, 723, 753, 791, 794, 795, 799, 800, 848, 855, 859, 872, 878, 899, 904, 905, 976, 977, 981, 983, 987, 991, 992, 997, 999, 1001, 1002, 1003, 1007, 1012, 1019, 1021, 1027, 1030, 1034, 1035, 1038, 1039, 1042, 1045], "quadrat": [4, 9, 30, 34, 36, 81, 82, 83, 156, 160, 166, 213, 250, 262, 318, 406, 438, 456, 459, 547, 548, 621, 629, 646, 656, 657, 667, 674, 678, 714, 904, 905, 983, 984, 987, 990, 993, 997, 1001, 1002, 1008, 1009, 1023, 1028], "tractabl": [4, 411, 632, 1006, 1040], "nystr\u00f6m": [4, 979], "latter": [4, 15, 250, 260, 269, 270, 291, 310, 346, 368, 376, 393, 411, 414, 415, 421, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 463, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 579, 580, 581, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 686, 687, 688, 689, 690, 739, 794, 795, 796, 799, 800, 805, 810, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 891, 892, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 954, 990, 995, 1036], "kernel_approxim": [4, 163, 166, 174, 175, 176, 213, 228, 233, 317, 675, 755, 756, 865, 979, 1008, 1012, 1028, 1034, 1044], "nystroem": [4, 163, 213, 228, 233, 371, 638, 639, 640, 675, 865, 904, 905, 1023, 1028, 1034, 1037, 1039, 1040, 1041], "cyclic_spline_poly_pipelin": 4, "poli": [4, 17, 140, 175, 260, 335, 342, 345, 450, 533, 618, 762, 771, 796, 874, 901, 902, 903, 904, 905, 983, 997, 1019], "n_compon": [4, 5, 6, 12, 15, 45, 53, 58, 59, 60, 71, 74, 75, 86, 87, 91, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 130, 175, 198, 220, 221, 222, 223, 224, 225, 228, 232, 233, 236, 240, 245, 246, 247, 248, 249, 250, 251, 259, 287, 292, 302, 310, 317, 319, 322, 352, 381, 384, 385, 393, 410, 412, 419, 449, 450, 460, 462, 480, 481, 482, 483, 524, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 637, 638, 639, 640, 686, 687, 688, 689, 690, 691, 692, 693, 694, 794, 795, 848, 855, 858, 891, 892, 893, 936, 979, 981, 984, 986, 990, 1017, 1020, 1028, 1029, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1044], "300": [4, 21, 22, 35, 39, 51, 59, 81, 84, 99, 112, 113, 114, 118, 164, 189, 225, 228, 232, 249, 263, 293, 308, 317, 325, 344, 346, 381, 441, 445, 446, 457, 459, 637, 642, 643, 677, 688, 690, 692, 856, 983, 1008, 1037], "053": [4, 148, 376, 385], "002": [4, 12, 148, 151, 183, 376], "076": [4, 887], "004": [4, 352], "almost": [4, 35, 118, 124, 201, 207, 235, 238, 274, 310, 328, 362, 372, 374, 383, 385, 391, 392, 393, 398, 407, 411, 412, 468, 469, 470, 471, 473, 474, 475, 794, 976, 982, 983, 986, 987, 1002, 1020, 1021, 1035, 1040], "rival": [4, 896, 1000], "intermedi": [4, 7, 53, 56, 117, 125, 238, 338, 391, 415, 557, 558, 617, 859, 987, 1039], "compound": [4, 217, 415, 608, 610, 678, 721, 749, 983, 1021], "one_hot_poly_pipelin": 4, "passthrough": [4, 73, 122, 169, 170, 199, 217, 238, 311, 320, 408, 462, 465, 565, 566, 858, 859, 997, 1036, 1038, 1041, 1042, 1044], "082": 4, "006": [4, 268, 385], "111": [4, 7, 8, 17, 68, 91, 102, 196, 209, 214, 218, 224, 260, 283, 353, 851, 1008, 1020, 1030], "competit": [4, 125, 351, 414, 642, 990], "low": [4, 11, 12, 38, 51, 82, 87, 98, 100, 103, 112, 115, 128, 148, 171, 192, 194, 199, 201, 203, 213, 220, 222, 228, 232, 238, 245, 246, 248, 251, 254, 260, 262, 266, 267, 275, 289, 290, 301, 309, 311, 312, 321, 328, 337, 338, 351, 360, 375, 376, 379, 384, 387, 391, 393, 397, 404, 405, 406, 411, 412, 415, 440, 442, 447, 466, 519, 522, 533, 580, 587, 601, 677, 690, 694, 703, 723, 739, 786, 844, 873, 880, 897, 936, 952, 955, 976, 982, 983, 984, 986, 987, 990, 992, 993, 994, 995, 997, 999, 1002, 1003, 1009, 1023, 1028, 1031, 1032, 1033, 1035, 1036, 1041, 1042], "rank": [4, 18, 26, 81, 100, 103, 119, 146, 171, 172, 217, 258, 260, 268, 375, 402, 404, 405, 409, 410, 412, 414, 415, 506, 507, 519, 522, 547, 548, 591, 592, 604, 646, 655, 667, 678, 694, 718, 723, 724, 736, 737, 753, 785, 791, 799, 800, 936, 976, 978, 979, 984, 995, 997, 1011, 1023, 1028, 1033, 1036, 1037, 1041, 1042], "fact": [4, 11, 20, 26, 82, 87, 112, 123, 125, 171, 232, 242, 278, 281, 351, 373, 386, 391, 393, 410, 412, 413, 414, 415, 647, 666, 668, 702, 981, 983, 990, 997, 1001, 1002, 1007, 1011, 1041], "smoother": [4, 5, 125, 170, 301, 413], "allow": [4, 21, 57, 59, 75, 76, 91, 100, 101, 115, 116, 123, 130, 151, 156, 158, 160, 193, 199, 203, 217, 221, 229, 232, 239, 241, 242, 245, 260, 281, 315, 316, 317, 318, 320, 342, 343, 351, 360, 362, 366, 373, 374, 377, 379, 380, 381, 383, 386, 388, 391, 393, 394, 405, 406, 407, 408, 410, 411, 412, 414, 415, 416, 417, 418, 435, 441, 442, 444, 445, 447, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 494, 521, 522, 531, 532, 536, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 586, 587, 588, 589, 591, 592, 595, 601, 608, 609, 613, 625, 626, 628, 632, 633, 636, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 686, 688, 690, 697, 739, 759, 762, 771, 775, 778, 789, 790, 794, 795, 796, 797, 798, 799, 800, 803, 805, 807, 810, 814, 817, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 844, 845, 846, 849, 850, 854, 856, 857, 859, 861, 862, 864, 865, 866, 871, 878, 879, 883, 892, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 917, 919, 920, 930, 931, 951, 955, 976, 977, 979, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 997, 999, 1000, 1001, 1002, 1003, 1006, 1007, 1011, 1012, 1024, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "find": [4, 5, 6, 12, 18, 41, 47, 48, 49, 50, 53, 54, 56, 58, 66, 74, 81, 82, 96, 98, 100, 101, 106, 123, 132, 151, 155, 157, 159, 170, 183, 187, 188, 201, 207, 220, 222, 224, 225, 231, 238, 250, 259, 260, 261, 271, 286, 291, 292, 293, 310, 315, 321, 340, 341, 342, 346, 351, 352, 356, 367, 376, 377, 379, 380, 381, 384, 385, 388, 391, 392, 393, 394, 404, 407, 409, 410, 412, 414, 415, 416, 418, 439, 442, 443, 444, 448, 449, 450, 451, 460, 529, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 556, 563, 580, 587, 608, 609, 645, 648, 651, 652, 653, 654, 656, 657, 669, 686, 705, 726, 727, 735, 779, 780, 781, 784, 785, 791, 796, 810, 841, 842, 843, 845, 847, 849, 850, 851, 872, 873, 878, 891, 892, 893, 907, 908, 910, 916, 935, 936, 938, 976, 977, 979, 982, 983, 984, 986, 987, 988, 991, 993, 997, 1001, 1002, 1003, 1005, 1007, 1010, 1011, 1012, 1014, 1016, 1017, 1019, 1020, 1021, 1027, 1034, 1035, 1036, 1037, 1039, 1041, 1042, 1045], "function": [4, 5, 6, 7, 8, 13, 15, 21, 22, 38, 47, 54, 55, 56, 58, 60, 67, 71, 72, 73, 76, 80, 96, 99, 101, 105, 110, 117, 118, 122, 123, 124, 125, 126, 127, 138, 144, 151, 154, 155, 156, 157, 158, 159, 164, 166, 168, 169, 170, 172, 177, 178, 181, 183, 186, 192, 194, 195, 196, 197, 199, 200, 205, 206, 207, 212, 215, 216, 217, 218, 220, 229, 231, 234, 235, 238, 239, 241, 242, 250, 258, 260, 261, 262, 263, 268, 269, 274, 278, 283, 299, 302, 305, 312, 315, 316, 318, 319, 321, 330, 335, 336, 337, 338, 339, 340, 342, 344, 346, 348, 351, 352, 357, 362, 366, 367, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 391, 392, 393, 397, 398, 401, 405, 407, 408, 409, 410, 412, 413, 415, 416, 418, 419, 422, 424, 426, 427, 429, 430, 431, 435, 438, 441, 442, 443, 445, 446, 448, 450, 452, 455, 456, 457, 458, 459, 462, 463, 466, 467, 469, 470, 472, 476, 486, 487, 489, 490, 493, 495, 501, 506, 507, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 541, 542, 543, 544, 545, 547, 548, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 570, 573, 579, 580, 586, 587, 589, 590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 602, 605, 606, 607, 608, 609, 613, 615, 617, 618, 620, 621, 625, 626, 629, 630, 631, 632, 633, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 685, 686, 687, 688, 689, 690, 691, 692, 696, 697, 698, 700, 701, 702, 704, 709, 710, 714, 717, 719, 720, 721, 725, 729, 731, 732, 735, 737, 738, 739, 747, 752, 754, 758, 759, 760, 762, 765, 768, 771, 775, 776, 777, 778, 779, 780, 782, 786, 789, 790, 791, 793, 794, 795, 796, 798, 799, 800, 801, 802, 807, 808, 810, 811, 812, 813, 814, 815, 816, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 839, 840, 841, 842, 843, 844, 845, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 862, 863, 864, 865, 866, 868, 869, 871, 875, 876, 877, 878, 879, 880, 883, 885, 888, 891, 892, 894, 895, 896, 897, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 914, 917, 926, 928, 929, 930, 935, 936, 946, 947, 953, 954, 955, 957, 958, 961, 962, 971, 976, 977, 978, 980, 982, 984, 985, 988, 990, 991, 992, 993, 994, 995, 997, 1000, 1001, 1003, 1006, 1007, 1008, 1009, 1012, 1015, 1016, 1017, 1021, 1023, 1024, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045], "abl": [4, 5, 9, 25, 48, 56, 62, 83, 87, 100, 101, 129, 157, 169, 172, 183, 188, 199, 215, 217, 224, 266, 271, 322, 338, 362, 366, 367, 368, 373, 377, 379, 381, 383, 384, 391, 407, 409, 411, 415, 483, 501, 532, 824, 871, 976, 977, 983, 986, 987, 988, 993, 997, 1000, 1003, 1004, 1007, 1012, 1020, 1021, 1033, 1034, 1038], "gbrt_predict": 4, "one_hot_poly_predict": 4, "cyclic_spline_poly_predict": 4, "grow": [4, 13, 40, 175, 183, 285, 346, 353, 366, 391, 403, 409, 415, 555, 556, 557, 558, 562, 563, 564, 806, 839, 840, 907, 908, 909, 910, 976, 987, 990, 1003, 1011, 1015, 1019, 1030, 1031], "depth": [4, 117, 122, 126, 128, 133, 278, 356, 358, 359, 360, 366, 377, 379, 383, 392, 414, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 839, 840, 844, 907, 908, 909, 910, 911, 913, 941, 992, 993, 1003, 1029, 1030, 1038], "accuraci": [4, 6, 7, 8, 17, 26, 31, 32, 33, 34, 71, 72, 73, 74, 112, 118, 119, 123, 124, 130, 144, 145, 147, 152, 172, 175, 199, 203, 207, 214, 215, 247, 258, 259, 260, 261, 262, 264, 266, 275, 278, 285, 291, 292, 293, 302, 307, 310, 321, 325, 326, 328, 338, 341, 342, 346, 362, 366, 381, 392, 393, 406, 407, 411, 414, 415, 416, 424, 435, 447, 467, 469, 470, 476, 530, 532, 539, 547, 548, 549, 551, 553, 555, 556, 557, 559, 562, 563, 565, 567, 608, 632, 656, 657, 664, 666, 669, 672, 673, 674, 690, 695, 701, 706, 709, 711, 716, 729, 730, 731, 735, 740, 751, 760, 784, 791, 793, 823, 826, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 841, 846, 848, 849, 856, 894, 895, 899, 901, 904, 907, 909, 935, 936, 976, 981, 982, 983, 984, 988, 990, 991, 995, 999, 1001, 1003, 1016, 1021, 1035, 1036], "On": [4, 12, 13, 18, 27, 68, 72, 73, 86, 87, 101, 112, 115, 117, 119, 120, 125, 128, 129, 132, 135, 143, 145, 155, 156, 169, 170, 171, 180, 187, 188, 201, 203, 229, 230, 231, 232, 234, 235, 238, 239, 240, 241, 242, 245, 247, 250, 255, 256, 257, 258, 260, 261, 262, 263, 265, 267, 272, 302, 305, 307, 309, 310, 311, 316, 317, 319, 320, 322, 327, 338, 346, 360, 366, 377, 380, 381, 383, 391, 393, 401, 403, 405, 407, 411, 412, 414, 416, 417, 641, 654, 689, 732, 758, 864, 880, 976, 980, 983, 986, 987, 989, 993, 995, 1000, 1002, 1016, 1019], "contrari": [4, 14, 169, 221, 225, 238, 245, 263, 305, 351, 373, 407, 494, 542, 604, 813, 880, 983, 989, 993], "significantli": [4, 25, 26, 38, 79, 80, 112, 118, 123, 125, 148, 169, 170, 171, 199, 203, 207, 215, 217, 260, 283, 316, 317, 352, 353, 362, 367, 383, 407, 412, 414, 415, 420, 467, 472, 477, 478, 536, 538, 545, 556, 563, 644, 645, 650, 651, 658, 659, 660, 661, 682, 690, 839, 840, 979, 983, 984, 990, 995, 1002, 1027, 1029, 1030, 1034, 1035, 1040, 1041, 1042], "over": [4, 7, 8, 9, 17, 21, 25, 27, 28, 32, 38, 51, 56, 57, 73, 75, 96, 115, 118, 123, 128, 143, 147, 151, 159, 163, 168, 170, 181, 193, 199, 207, 217, 228, 238, 260, 261, 263, 265, 267, 268, 269, 272, 288, 296, 299, 300, 307, 318, 319, 321, 325, 351, 352, 366, 367, 368, 374, 375, 378, 379, 380, 381, 385, 392, 393, 403, 405, 406, 407, 408, 411, 412, 413, 414, 415, 419, 444, 447, 462, 470, 507, 531, 532, 534, 535, 536, 537, 544, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 579, 580, 586, 587, 589, 592, 600, 628, 630, 631, 632, 642, 643, 644, 645, 650, 651, 656, 658, 659, 660, 661, 663, 664, 665, 666, 674, 675, 676, 683, 684, 695, 714, 716, 736, 760, 785, 790, 794, 796, 799, 800, 802, 807, 808, 810, 818, 820, 821, 822, 823, 824, 826, 855, 856, 857, 858, 874, 878, 899, 907, 909, 916, 925, 955, 976, 983, 984, 987, 988, 989, 990, 991, 992, 993, 994, 995, 997, 1000, 1001, 1002, 1003, 1006, 1007, 1011, 1017, 1020, 1027, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1040], "compet": 4, "access": [4, 50, 79, 123, 238, 246, 251, 322, 351, 360, 366, 367, 379, 380, 381, 387, 391, 393, 394, 403, 407, 409, 410, 414, 415, 417, 448, 455, 462, 534, 565, 566, 567, 568, 615, 857, 858, 859, 914, 976, 983, 986, 987, 993, 994, 995, 1001, 1002, 1007, 1011, 1012, 1020, 1021, 1027, 1029, 1033, 1034, 1035, 1036, 1039, 1041, 1042, 1043], "requir": [4, 7, 14, 26, 46, 47, 49, 54, 56, 58, 59, 68, 71, 91, 100, 102, 117, 118, 122, 123, 126, 128, 132, 148, 170, 183, 188, 196, 199, 220, 222, 229, 232, 235, 238, 242, 261, 269, 271, 283, 285, 305, 310, 317, 318, 351, 352, 353, 373, 376, 377, 379, 381, 383, 385, 387, 391, 393, 394, 397, 398, 403, 406, 407, 408, 409, 411, 412, 414, 415, 416, 418, 424, 430, 435, 436, 437, 442, 444, 448, 450, 455, 460, 462, 465, 467, 480, 481, 482, 494, 506, 519, 522, 533, 539, 547, 548, 549, 551, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 570, 577, 578, 579, 608, 609, 617, 625, 630, 631, 632, 641, 656, 657, 664, 665, 666, 669, 672, 673, 674, 675, 676, 684, 687, 689, 690, 691, 693, 697, 721, 726, 727, 739, 744, 746, 749, 760, 781, 784, 796, 799, 800, 803, 805, 810, 822, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 845, 846, 847, 849, 850, 851, 856, 859, 860, 861, 863, 873, 874, 875, 879, 887, 891, 892, 894, 895, 899, 900, 901, 904, 907, 908, 909, 910, 944, 947, 953, 973, 976, 981, 982, 983, 984, 987, 988, 989, 990, 991, 993, 994, 997, 1001, 1002, 1003, 1007, 1012, 1019, 1021, 1029, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "geograph": [4, 11, 296, 374, 496], "repartit": 4, "immobil": 4, "quantit": [4, 5, 6, 13, 26, 62, 125, 135, 148, 256, 274, 376, 1017], "predictionerrordisplai": [4, 13, 76, 132, 169, 256, 320, 987, 1042, 1044], "nrow": [4, 5, 31, 33, 35, 58, 67, 74, 96, 160, 170, 199, 201, 207, 217, 220, 221, 224, 238, 262, 263, 283, 307, 309, 310, 320, 326, 345, 346, 1017], "ncol": [4, 5, 13, 31, 33, 35, 54, 58, 67, 96, 101, 106, 123, 170, 199, 200, 201, 207, 217, 220, 221, 231, 238, 256, 262, 263, 271, 283, 286, 300, 306, 307, 309, 310, 320, 345, 346, 352], "sharex": [4, 7, 15, 35, 74, 93, 101, 133, 160, 170, 201, 262, 288, 328, 1017], "sharei": [4, 13, 35, 76, 93, 101, 106, 133, 160, 170, 199, 201, 207, 262, 271, 288, 306, 311, 345, 346, 352], "npolynomi": 4, "ntree": 4, "plot_kind": 4, "actual_vs_predict": [4, 76, 132, 169, 256, 320, 699], "residual_vs_predict": [4, 13, 76, 256, 320, 699], "axis_idx": 4, "kind": [4, 9, 12, 13, 25, 26, 76, 104, 118, 132, 143, 169, 170, 250, 254, 256, 269, 312, 317, 320, 335, 338, 351, 367, 368, 372, 374, 379, 381, 385, 391, 392, 405, 407, 410, 411, 412, 414, 415, 416, 486, 487, 501, 506, 507, 519, 522, 586, 630, 631, 699, 928, 983, 989, 994, 1003, 1030, 1039, 1041, 1042, 1043], "enumer": [4, 8, 10, 11, 12, 14, 15, 18, 20, 26, 28, 31, 32, 38, 40, 41, 42, 43, 44, 45, 46, 51, 56, 60, 61, 62, 63, 71, 80, 82, 83, 87, 97, 99, 105, 115, 118, 123, 124, 126, 127, 138, 153, 155, 160, 172, 179, 181, 190, 199, 221, 222, 225, 228, 233, 237, 238, 245, 246, 247, 248, 250, 251, 255, 262, 263, 269, 270, 288, 292, 293, 295, 302, 307, 308, 325, 326, 328, 330, 336, 338, 345, 346, 351, 357, 374, 557, 558, 562, 563, 778, 797, 798, 801, 803, 804, 805, 806, 809, 811, 812, 813, 814, 815, 816, 817], "pred": [4, 7, 11, 13, 33, 347, 351, 374, 646, 667, 678, 695, 700, 704, 716, 726, 727, 735, 780, 781, 784, 785, 987], "zip": [4, 5, 8, 9, 12, 13, 25, 27, 32, 33, 35, 38, 39, 41, 43, 46, 50, 56, 64, 65, 66, 76, 87, 93, 96, 97, 100, 104, 105, 106, 114, 116, 123, 132, 133, 157, 163, 166, 169, 170, 171, 184, 190, 191, 199, 207, 208, 220, 232, 238, 246, 250, 251, 258, 262, 263, 264, 267, 269, 283, 286, 288, 291, 299, 300, 301, 307, 309, 310, 311, 329, 335, 346, 347, 357, 377, 414, 823, 997, 1021], "disp": [4, 31, 33, 114, 128, 129, 254, 263, 275, 286, 310, 316, 322, 335, 340, 436, 629, 695, 698, 699, 848], "from_predict": [4, 13, 33, 76, 132, 169, 238, 256, 267, 269, 318, 325, 351, 386, 436, 629, 696, 716, 724, 779, 781, 784, 785, 786, 987, 1024, 1040, 1041, 1042, 1043, 1044, 1045], "y_true": [4, 13, 20, 33, 60, 76, 112, 132, 154, 199, 209, 217, 238, 248, 328, 379, 430, 436, 437, 463, 480, 481, 482, 550, 552, 554, 555, 556, 558, 560, 562, 563, 566, 568, 609, 633, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 658, 659, 660, 661, 662, 663, 665, 668, 670, 671, 676, 677, 695, 696, 698, 699, 700, 701, 705, 706, 707, 710, 711, 716, 718, 719, 720, 721, 723, 724, 725, 726, 727, 731, 732, 733, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 753, 779, 780, 781, 782, 784, 785, 786, 787, 788, 791, 793, 832, 833, 842, 850, 857, 900, 902, 905, 908, 910, 987, 1028, 1033, 1034, 1035, 1036, 1038, 1039, 1041, 1042, 1044], "y_pred": [4, 6, 7, 13, 26, 31, 33, 35, 45, 58, 63, 71, 76, 112, 125, 126, 132, 145, 169, 199, 201, 206, 209, 214, 216, 217, 228, 229, 238, 256, 258, 263, 290, 294, 302, 310, 328, 329, 362, 379, 386, 393, 414, 430, 437, 463, 480, 481, 482, 547, 550, 552, 554, 555, 556, 558, 560, 562, 563, 565, 566, 568, 609, 629, 633, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 671, 672, 673, 674, 676, 677, 678, 695, 696, 698, 699, 700, 701, 706, 710, 711, 716, 719, 720, 721, 725, 726, 727, 731, 733, 735, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 780, 781, 782, 784, 785, 787, 788, 793, 796, 799, 800, 810, 820, 830, 832, 833, 842, 850, 857, 859, 899, 900, 901, 902, 903, 904, 905, 908, 910, 987, 989, 1017, 1033, 1034, 1036, 1038, 1042, 1043, 1044], "scatter_kwarg": [4, 13, 76, 132, 169, 699], "set_xtick": [4, 8, 10, 17, 32, 44, 61, 65, 106, 130, 134, 170, 172, 190, 215, 233, 245, 271, 272, 281, 299, 301, 307, 308, 335], "num": [4, 12, 72, 148, 151, 156, 157, 158, 170, 171, 201, 267, 268, 319, 321, 322, 494, 630], "set_ytick": [4, 17, 32, 44, 61, 65, 106, 130, 163, 164, 172, 190, 215, 245, 271, 299, 301, 307, 308, 335, 353], "loc": [4, 7, 8, 9, 25, 27, 34, 41, 73, 76, 80, 81, 82, 86, 91, 98, 100, 103, 104, 105, 112, 114, 115, 116, 124, 125, 126, 127, 129, 132, 134, 135, 144, 151, 152, 158, 160, 169, 170, 181, 184, 189, 193, 199, 200, 201, 202, 205, 206, 209, 212, 213, 216, 217, 223, 231, 232, 233, 234, 236, 238, 247, 248, 255, 258, 259, 260, 263, 264, 267, 270, 273, 274, 286, 288, 289, 300, 306, 309, 310, 316, 319, 322, 327, 337, 340, 342, 345, 346, 351, 357, 359, 810, 876, 888, 1016], "upper": [4, 7, 9, 25, 73, 76, 80, 81, 82, 114, 115, 116, 124, 125, 126, 127, 132, 134, 144, 155, 157, 160, 169, 193, 199, 205, 206, 209, 213, 216, 217, 232, 236, 237, 259, 260, 261, 288, 289, 300, 310, 328, 337, 340, 342, 345, 407, 413, 461, 586, 587, 589, 593, 611, 612, 613, 615, 617, 618, 620, 621, 623, 630, 631, 633, 635, 648, 652, 675, 732, 785, 872, 873, 901, 902, 903, 923, 986, 987, 990, 997, 1001, 1002, 1003, 1035], "bbox_to_anchor": [4, 38, 160, 265, 345], "set_aspect": [4, 154, 210, 247, 347], "equal": [4, 11, 12, 27, 35, 38, 40, 54, 61, 81, 87, 112, 125, 154, 169, 200, 201, 210, 216, 239, 247, 250, 254, 258, 260, 269, 293, 307, 311, 338, 340, 347, 352, 374, 375, 379, 381, 393, 404, 405, 407, 411, 412, 414, 415, 420, 435, 438, 439, 440, 441, 443, 445, 447, 452, 457, 458, 461, 467, 472, 477, 478, 501, 510, 513, 517, 530, 531, 532, 537, 539, 541, 542, 547, 548, 549, 553, 554, 555, 556, 557, 558, 559, 561, 562, 563, 564, 565, 566, 567, 568, 586, 591, 592, 595, 597, 598, 605, 606, 623, 626, 627, 630, 631, 632, 633, 635, 639, 640, 643, 647, 656, 657, 669, 697, 701, 716, 718, 726, 780, 784, 785, 791, 793, 796, 797, 799, 800, 809, 810, 814, 820, 827, 831, 832, 839, 840, 841, 842, 847, 848, 849, 850, 851, 856, 857, 862, 863, 864, 871, 874, 877, 878, 879, 880, 882, 889, 896, 899, 900, 906, 907, 908, 909, 910, 925, 936, 962, 968, 981, 983, 987, 988, 990, 991, 993, 997, 1001, 1002, 1003, 1020, 1021, 1028, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "adjust": [4, 9, 18, 37, 39, 50, 59, 69, 79, 112, 125, 143, 166, 203, 228, 233, 241, 261, 278, 315, 329, 346, 352, 386, 407, 408, 412, 414, 415, 522, 551, 552, 555, 557, 559, 560, 562, 656, 657, 664, 666, 672, 673, 674, 702, 703, 706, 712, 713, 752, 754, 783, 792, 834, 835, 837, 838, 869, 891, 892, 899, 900, 901, 904, 907, 909, 925, 986, 987, 991, 997, 1008, 1019, 1024, 1027, 1033, 1043], "box": [4, 10, 31, 56, 170, 171, 221, 278, 305, 309, 386, 412, 414, 510, 553, 554, 875, 887, 911, 913, 987, 988, 994, 997, 1003, 1006, 1012, 1035, 1043], "show": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 140, 143, 144, 145, 146, 147, 148, 152, 153, 154, 155, 156, 157, 159, 163, 164, 168, 169, 170, 171, 172, 175, 178, 179, 180, 181, 182, 184, 185, 186, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 322, 325, 326, 327, 328, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 356, 357, 358, 359, 360, 367, 368, 379, 385, 391, 392, 397, 398, 404, 405, 409, 411, 412, 413, 414, 416, 417, 436, 500, 557, 591, 592, 629, 630, 695, 696, 698, 699, 700, 711, 802, 818, 841, 859, 911, 912, 913, 976, 979, 981, 982, 984, 986, 987, 989, 990, 991, 993, 994, 995, 997, 1001, 1002, 1007, 1016, 1017, 1021, 1029, 1031, 1032, 1034, 1036, 1037, 1038, 1039, 1041, 1043, 1044], "seem": [4, 9, 13, 47, 56, 125, 170, 199, 224, 228, 261, 278, 300, 309, 346, 351, 352, 378, 379, 384, 411, 499, 983, 987], "regim": [4, 393, 899, 900, 986], "overal": [4, 44, 49, 112, 115, 118, 123, 132, 156, 217, 257, 283, 310, 311, 352, 366, 378, 379, 385, 404, 405, 414, 445, 447, 462, 469, 470, 476, 547, 880, 984, 987, 1003, 1011, 1037], "closer": [4, 28, 38, 99, 101, 131, 148, 151, 170, 178, 203, 342, 353, 405, 407, 412, 447, 551, 626, 710, 841, 842, 847, 849, 850, 851, 1002, 1034], "diagon": [4, 26, 41, 83, 86, 217, 238, 247, 250, 251, 254, 338, 404, 407, 409, 417, 451, 469, 470, 476, 479, 509, 511, 525, 530, 548, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 648, 649, 652, 653, 654, 680, 681, 699, 713, 789, 794, 795, 843, 851, 979, 981, 983, 986, 987, 990, 997, 1033, 1035, 1036, 1037], "obtain": [4, 7, 9, 12, 13, 21, 28, 49, 56, 58, 59, 72, 75, 76, 101, 103, 112, 122, 125, 126, 130, 138, 148, 153, 155, 169, 170, 183, 199, 201, 203, 213, 224, 238, 245, 246, 247, 256, 260, 261, 262, 266, 269, 286, 310, 318, 336, 342, 352, 353, 360, 362, 374, 376, 381, 391, 393, 401, 405, 407, 409, 410, 412, 414, 415, 416, 417, 435, 440, 467, 494, 530, 531, 553, 554, 555, 556, 557, 558, 561, 562, 563, 591, 604, 612, 643, 657, 659, 664, 666, 670, 672, 674, 675, 685, 706, 710, 723, 736, 753, 790, 802, 818, 824, 827, 828, 831, 845, 856, 876, 888, 901, 904, 907, 908, 936, 977, 979, 981, 983, 984, 986, 987, 988, 990, 991, 993, 994, 997, 1001, 1002, 1033, 1035, 1038, 1040, 1041, 1042, 1043, 1044], "slightli": [4, 26, 65, 83, 115, 118, 122, 125, 128, 132, 148, 151, 152, 153, 171, 178, 199, 217, 223, 225, 235, 238, 268, 283, 315, 335, 353, 378, 379, 391, 405, 407, 414, 415, 417, 419, 444, 586, 587, 589, 636, 656, 799, 800, 899, 901, 904, 935, 936, 976, 983, 997, 1001, 1002, 1036, 1040, 1041, 1043], "cost": [4, 40, 99, 118, 151, 166, 175, 220, 233, 262, 269, 315, 338, 352, 353, 355, 360, 361, 379, 385, 387, 391, 407, 414, 476, 498, 535, 536, 537, 544, 555, 556, 557, 558, 562, 563, 600, 608, 617, 625, 644, 645, 650, 651, 658, 659, 660, 661, 666, 670, 672, 674, 676, 685, 686, 690, 825, 899, 900, 901, 904, 907, 908, 909, 910, 936, 979, 983, 984, 987, 990, 1000, 1001, 1002, 1008, 1009, 1023, 1033, 1036, 1037], "durat": [4, 8, 199, 217, 238, 285, 353, 367, 953, 954, 983], "regressor": [4, 76, 87, 126, 131, 132, 135, 151, 156, 164, 166, 169, 177, 179, 181, 183, 199, 200, 202, 205, 216, 217, 218, 235, 263, 274, 288, 310, 316, 317, 366, 379, 381, 391, 393, 405, 408, 417, 430, 433, 434, 463, 480, 481, 482, 483, 522, 549, 550, 551, 552, 553, 554, 555, 556, 558, 560, 563, 564, 565, 566, 567, 568, 603, 604, 607, 609, 630, 631, 633, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 658, 659, 660, 661, 662, 663, 665, 667, 668, 670, 671, 676, 677, 699, 827, 828, 831, 832, 833, 842, 850, 855, 856, 857, 860, 866, 874, 879, 880, 900, 902, 905, 907, 908, 909, 910, 913, 928, 930, 976, 977, 983, 987, 988, 990, 995, 1001, 1006, 1008, 1009, 1016, 1023, 1027, 1028, 1032, 1033, 1034, 1036, 1037, 1040, 1041, 1042, 1044], "mlpregressor": [4, 170, 239, 368, 855, 856, 991, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "hidden": [4, 170, 301, 302, 379, 387, 404, 412, 855, 856, 857, 991, 992, 1006, 1027, 1038], "layer": [4, 32, 121, 130, 140, 153, 155, 166, 206, 215, 239, 298, 301, 302, 303, 307, 308, 330, 343, 344, 348, 366, 387, 414, 512, 513, 520, 565, 825, 855, 856, 857, 860, 879, 992, 1008, 1009, 1023, 1033], "cyclic": [4, 644, 645, 650, 651, 658, 659, 660, 661, 1039], "within": [4, 21, 61, 117, 119, 120, 123, 131, 145, 147, 148, 195, 200, 201, 211, 217, 239, 258, 259, 263, 273, 305, 306, 317, 336, 339, 342, 346, 353, 362, 366, 374, 379, 383, 388, 391, 393, 394, 404, 405, 406, 407, 408, 411, 413, 414, 418, 442, 446, 459, 461, 462, 464, 467, 472, 513, 547, 565, 566, 567, 568, 591, 592, 630, 690, 694, 697, 708, 722, 778, 794, 795, 801, 802, 814, 815, 823, 824, 839, 840, 841, 842, 847, 849, 850, 851, 858, 859, 860, 872, 880, 884, 885, 887, 888, 889, 890, 901, 902, 903, 904, 905, 907, 908, 909, 910, 976, 981, 983, 984, 990, 993, 997, 1000, 1002, 1003, 1007, 1011, 1012, 1016, 1019, 1021, 1029, 1030, 1034, 1035, 1040, 1041, 1043, 1044], "finer": [4, 13, 38, 285, 338, 367, 407, 411, 976, 990, 1037], "resolut": [4, 11, 18, 105, 170, 295, 296, 338, 394, 405, 1012, 1037], "taken": [4, 7, 32, 43, 54, 56, 127, 148, 156, 169, 232, 233, 248, 266, 278, 307, 374, 376, 378, 379, 383, 393, 401, 406, 407, 411, 415, 419, 438, 531, 559, 560, 581, 582, 644, 645, 648, 650, 651, 652, 656, 657, 658, 659, 660, 661, 675, 677, 679, 682, 693, 872, 873, 893, 896, 902, 903, 946, 987, 989, 997, 999, 1033, 1036, 1039, 1040], "everi": [4, 96, 163, 197, 200, 221, 234, 246, 251, 269, 318, 322, 362, 374, 377, 379, 381, 383, 387, 393, 407, 409, 411, 412, 415, 438, 452, 506, 529, 534, 537, 543, 555, 557, 558, 559, 560, 562, 588, 589, 601, 644, 645, 647, 650, 651, 657, 658, 659, 660, 661, 662, 663, 664, 666, 670, 671, 672, 673, 674, 683, 684, 685, 690, 694, 751, 768, 776, 777, 809, 848, 907, 909, 911, 913, 925, 980, 982, 987, 988, 989, 997, 1003, 1011, 1016, 1027, 1031, 1033, 1036, 1040, 1044], "offer": [4, 118, 381, 387, 391, 392, 397, 411, 412, 414, 415, 976, 977, 988, 991, 1003, 1006, 1007, 1011, 1033], "view": [4, 17, 43, 47, 79, 98, 170, 196, 240, 366, 368, 379, 407, 415, 534, 643, 655, 839, 840, 914, 983, 984], "gaussian": [4, 5, 7, 9, 17, 27, 28, 31, 32, 35, 45, 47, 48, 56, 58, 62, 66, 79, 80, 81, 82, 83, 92, 93, 97, 98, 99, 105, 113, 114, 121, 125, 128, 130, 140, 161, 164, 178, 181, 183, 187, 189, 209, 210, 211, 212, 228, 232, 234, 247, 248, 252, 271, 288, 293, 296, 299, 308, 309, 312, 328, 330, 335, 342, 343, 344, 371, 375, 381, 384, 393, 407, 409, 412, 413, 419, 450, 467, 468, 469, 470, 471, 472, 473, 474, 494, 502, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 520, 522, 523, 528, 530, 542, 547, 548, 561, 608, 609, 611, 612, 613, 615, 616, 617, 620, 621, 623, 625, 641, 642, 670, 675, 678, 701, 721, 738, 749, 773, 794, 795, 796, 810, 834, 835, 836, 837, 838, 839, 840, 844, 875, 879, 887, 891, 892, 893, 981, 983, 984, 985, 993, 1008, 1009, 1011, 1020, 1022, 1023, 1027, 1028, 1030, 1031, 1033, 1034, 1035, 1037, 1039, 1041], "random": [4, 5, 6, 7, 11, 12, 13, 14, 21, 22, 25, 26, 27, 28, 32, 34, 35, 38, 40, 41, 45, 46, 49, 51, 53, 55, 56, 58, 59, 61, 62, 63, 65, 66, 67, 72, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 93, 97, 98, 99, 102, 103, 111, 112, 113, 115, 117, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 132, 135, 136, 140, 143, 144, 147, 151, 152, 155, 157, 158, 160, 163, 164, 166, 167, 168, 173, 175, 178, 179, 180, 181, 183, 188, 189, 193, 194, 197, 198, 199, 200, 201, 202, 205, 206, 208, 212, 213, 216, 217, 220, 221, 223, 224, 225, 227, 228, 233, 234, 235, 237, 238, 243, 245, 246, 248, 249, 250, 251, 253, 255, 257, 258, 259, 260, 261, 263, 265, 267, 269, 270, 271, 272, 274, 276, 281, 283, 288, 289, 290, 295, 299, 306, 308, 309, 312, 316, 317, 319, 321, 325, 326, 329, 330, 337, 338, 340, 341, 343, 344, 345, 348, 351, 352, 358, 359, 366, 367, 371, 375, 382, 384, 391, 392, 393, 398, 402, 403, 405, 407, 415, 416, 420, 432, 438, 441, 445, 447, 449, 450, 451, 452, 456, 457, 458, 460, 462, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 486, 487, 488, 489, 490, 493, 494, 495, 500, 501, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 533, 534, 536, 537, 538, 539, 542, 545, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 571, 580, 581, 582, 587, 605, 606, 608, 609, 625, 628, 630, 632, 637, 638, 639, 640, 641, 644, 645, 647, 648, 650, 651, 652, 656, 658, 659, 660, 661, 668, 669, 670, 674, 675, 676, 677, 685, 687, 688, 689, 690, 691, 692, 693, 699, 702, 703, 706, 728, 740, 778, 785, 790, 794, 795, 796, 798, 799, 800, 801, 808, 810, 811, 812, 813, 814, 815, 816, 817, 824, 825, 830, 832, 833, 834, 835, 836, 838, 839, 840, 844, 848, 855, 856, 857, 859, 862, 864, 873, 876, 880, 888, 891, 892, 893, 894, 895, 896, 899, 900, 901, 902, 904, 905, 907, 908, 909, 910, 922, 933, 935, 936, 958, 961, 977, 979, 982, 984, 986, 987, 991, 992, 993, 995, 997, 1002, 1003, 1006, 1007, 1008, 1009, 1012, 1016, 1017, 1019, 1020, 1023, 1024, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "constant": [4, 105, 115, 154, 158, 164, 169, 187, 200, 201, 203, 217, 230, 235, 240, 263, 295, 300, 302, 306, 308, 316, 346, 348, 362, 371, 381, 388, 393, 404, 414, 417, 430, 444, 463, 480, 481, 482, 509, 511, 532, 536, 538, 545, 547, 548, 549, 550, 552, 554, 556, 558, 560, 563, 566, 568, 588, 604, 607, 609, 611, 625, 628, 630, 631, 633, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 671, 674, 675, 676, 677, 678, 685, 687, 691, 693, 719, 720, 721, 725, 729, 772, 774, 782, 832, 833, 842, 850, 856, 857, 864, 875, 878, 887, 899, 900, 901, 902, 903, 904, 905, 906, 908, 910, 979, 981, 983, 984, 987, 989, 990, 997, 1001, 1003, 1023, 1030, 1035, 1037, 1039, 1040, 1041, 1043], "varianc": [4, 5, 10, 13, 28, 45, 56, 58, 63, 74, 79, 81, 86, 87, 91, 96, 97, 98, 101, 103, 104, 106, 111, 127, 136, 158, 160, 166, 169, 177, 179, 181, 183, 188, 189, 195, 199, 201, 204, 217, 218, 250, 257, 260, 263, 269, 270, 273, 292, 299, 305, 310, 352, 362, 371, 375, 388, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 419, 439, 443, 447, 461, 519, 522, 530, 531, 532, 539, 542, 547, 548, 553, 554, 556, 557, 558, 563, 601, 605, 606, 609, 623, 641, 642, 643, 650, 654, 655, 658, 660, 670, 671, 672, 673, 674, 685, 708, 725, 782, 794, 795, 837, 848, 863, 869, 875, 877, 879, 885, 887, 889, 890, 908, 910, 962, 963, 964, 968, 981, 982, 983, 985, 990, 991, 992, 995, 999, 1001, 1002, 1003, 1004, 1008, 1009, 1017, 1019, 1020, 1023, 1027, 1035, 1037, 1038, 1039, 1040, 1041, 1042], "poisson": [4, 13, 166, 177, 218, 236, 375, 414, 462, 463, 494, 521, 550, 556, 560, 563, 646, 667, 670, 678, 704, 721, 742, 746, 747, 749, 825, 859, 860, 863, 864, 872, 873, 874, 879, 908, 910, 940, 983, 1003, 1008, 1037, 1038, 1039, 1040, 1041, 1043, 1044], "gamma": [4, 5, 6, 7, 9, 11, 17, 32, 33, 101, 133, 140, 175, 213, 228, 233, 234, 258, 260, 262, 265, 271, 275, 317, 325, 326, 328, 330, 335, 337, 338, 341, 342, 344, 345, 348, 410, 412, 417, 450, 533, 560, 617, 618, 637, 638, 639, 641, 642, 643, 646, 678, 683, 689, 721, 744, 749, 756, 763, 772, 773, 774, 794, 807, 810, 894, 895, 896, 901, 902, 903, 904, 905, 976, 979, 982, 983, 985, 1000, 1002, 1012, 1016, 1017, 1019, 1027, 1028, 1030, 1031, 1032, 1034, 1035, 1037, 1038, 1041, 1042, 1043], "achiev": [4, 12, 18, 20, 28, 32, 99, 112, 121, 123, 130, 159, 175, 199, 207, 257, 260, 267, 310, 328, 338, 341, 342, 346, 351, 362, 366, 368, 373, 374, 376, 381, 385, 391, 393, 404, 405, 407, 411, 412, 414, 415, 551, 556, 563, 638, 647, 674, 676, 705, 726, 727, 735, 737, 760, 780, 781, 784, 799, 800, 835, 879, 976, 977, 979, 983, 987, 997, 1000, 1002, 1021, 1040], "gridsearchcv": [4, 55, 70, 72, 74, 75, 77, 79, 100, 103, 118, 166, 234, 240, 250, 253, 258, 259, 260, 261, 265, 268, 271, 276, 278, 285, 287, 302, 307, 317, 321, 322, 338, 342, 362, 367, 381, 391, 393, 398, 408, 411, 417, 421, 500, 518, 538, 539, 573, 597, 605, 651, 701, 739, 807, 810, 859, 869, 899, 907, 955, 976, 983, 987, 991, 1001, 1002, 1006, 1007, 1008, 1016, 1017, 1021, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1044], "tweedieregressor": [4, 316, 319, 646, 667, 983, 1038, 1041, 1042], "power": [4, 7, 18, 118, 123, 168, 200, 217, 251, 263, 268, 287, 305, 306, 309, 325, 335, 366, 367, 392, 405, 407, 410, 413, 414, 415, 418, 442, 480, 481, 482, 530, 533, 539, 542, 628, 678, 692, 721, 744, 746, 749, 841, 842, 849, 850, 852, 853, 874, 875, 876, 887, 888, 935, 936, 983, 984, 987, 995, 997, 1001, 1002, 1011, 1030, 1033, 1035, 1037, 1038, 1040, 1044], "param_grid": [4, 6, 72, 73, 74, 75, 118, 125, 234, 240, 250, 258, 259, 260, 264, 265, 268, 271, 278, 285, 307, 322, 338, 393, 398, 408, 414, 739, 796, 799, 807, 808, 955, 976, 987, 1016, 1017], "total": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 20, 21, 22, 23, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 86, 87, 88, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 281, 282, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 357, 358, 359, 360, 361, 367, 373, 374, 376, 385, 393, 404, 407, 413, 415, 418, 430, 442, 463, 480, 481, 482, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 498, 499, 500, 502, 503, 508, 510, 512, 513, 517, 520, 521, 534, 542, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 562, 563, 564, 566, 568, 581, 582, 588, 592, 594, 609, 633, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 658, 659, 660, 661, 662, 663, 664, 665, 668, 669, 670, 671, 674, 675, 676, 677, 695, 702, 703, 711, 726, 727, 728, 731, 735, 736, 754, 766, 780, 781, 784, 791, 792, 793, 796, 810, 820, 821, 822, 832, 833, 834, 835, 842, 844, 850, 857, 874, 878, 900, 902, 905, 907, 908, 909, 910, 936, 976, 983, 984, 987, 988, 989, 990, 997, 1001, 1002, 1003, 1008, 1017, 1021, 1028, 1033, 1035, 1043], "script": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 168, 169, 170, 171, 172, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360, 362, 367, 379, 380, 381, 382, 383, 385, 391, 393, 397, 415, 1007, 1010, 1021], "248": [4, 16, 232, 1008], "second": [4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 168, 169, 170, 171, 172, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360, 362, 366, 374, 381, 383, 385, 393, 404, 407, 411, 412, 414, 415, 417, 462, 465, 486, 488, 489, 490, 492, 494, 498, 500, 502, 508, 551, 581, 586, 587, 588, 589, 619, 622, 629, 630, 697, 710, 714, 755, 756, 760, 761, 763, 764, 771, 772, 773, 774, 775, 778, 796, 799, 800, 810, 823, 829, 830, 833, 836, 847, 849, 850, 851, 856, 857, 976, 977, 981, 982, 983, 984, 987, 988, 989, 990, 991, 994, 997, 998, 1003, 1012, 1018, 1020, 1042], "jupyt": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 166, 168, 169, 170, 171, 172, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360, 380, 381, 408, 466, 897, 1003, 1006, 1007, 1038, 1041], "plot_cyclical_feature_engin": [4, 16, 1008], "ipynb": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 168, 169, 170, 171, 172, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360], "py": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 86, 87, 88, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 168, 169, 170, 171, 172, 173, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 367, 377, 379, 380, 383, 385, 387, 393, 397, 415, 418, 438, 442, 452, 459, 496, 528, 642, 644, 645, 650, 651, 658, 659, 660, 661, 679, 682, 874, 878, 931, 987, 1006, 1008, 1019, 1021, 1027, 1029, 1033, 1037, 1041], "interpol": [4, 14, 33, 41, 51, 52, 55, 59, 83, 90, 96, 99, 143, 155, 158, 166, 177, 178, 190, 215, 218, 231, 237, 269, 274, 287, 288, 295, 302, 326, 338, 344, 417, 633, 643, 651, 661, 670, 682, 698, 705, 842, 850, 860, 874, 878, 978, 983, 987, 997, 1008, 1034, 1039], "partial": [4, 8, 12, 51, 85, 86, 88, 98, 129, 166, 167, 173, 217, 227, 243, 317, 320, 376, 393, 396, 409, 410, 412, 414, 417, 462, 480, 481, 482, 483, 494, 499, 532, 534, 539, 560, 587, 630, 631, 655, 785, 825, 827, 828, 855, 856, 857, 860, 872, 873, 876, 879, 908, 984, 991, 1001, 1008, 1021, 1023, 1024, 1028, 1035, 1036, 1040, 1044], "individu": [4, 47, 61, 81, 111, 115, 125, 129, 131, 132, 136, 143, 160, 166, 167, 172, 173, 195, 199, 217, 229, 238, 239, 263, 265, 281, 315, 322, 342, 346, 367, 380, 383, 386, 388, 393, 396, 404, 408, 411, 414, 415, 435, 450, 460, 462, 494, 499, 501, 507, 553, 554, 557, 558, 560, 561, 563, 565, 566, 567, 568, 601, 607, 608, 630, 631, 641, 643, 655, 656, 657, 666, 669, 670, 671, 672, 673, 674, 675, 676, 685, 710, 717, 725, 731, 747, 748, 782, 787, 788, 796, 810, 827, 831, 832, 834, 835, 836, 837, 838, 857, 860, 868, 869, 871, 872, 873, 876, 878, 879, 884, 885, 886, 899, 900, 987, 988, 997, 1002, 1008, 1016, 1021, 1023, 1028, 1031, 1033, 1039, 1041, 1043], "common": [4, 13, 15, 18, 20, 99, 145, 148, 166, 167, 168, 173, 195, 203, 204, 255, 260, 267, 278, 317, 342, 351, 353, 360, 366, 373, 379, 381, 387, 389, 391, 392, 396, 397, 398, 404, 405, 406, 407, 408, 411, 413, 416, 417, 445, 463, 465, 494, 588, 630, 651, 670, 671, 699, 743, 750, 766, 797, 798, 801, 811, 813, 814, 815, 816, 817, 822, 825, 860, 862, 870, 871, 872, 877, 879, 884, 885, 887, 888, 889, 890, 938, 976, 977, 983, 990, 993, 997, 1002, 1003, 1006, 1007, 1008, 1011, 1012, 1023, 1027, 1035, 1037, 1038, 1042], "pitfal": [4, 148, 166, 167, 168, 171, 173, 195, 203, 204, 260, 317, 392, 393, 396, 411, 463, 465, 494, 651, 670, 671, 699, 750, 811, 822, 825, 860, 872, 879, 983, 1008, 1023], "coeffici": [4, 7, 10, 39, 50, 59, 61, 79, 80, 83, 96, 99, 138, 145, 151, 166, 167, 168, 173, 177, 181, 183, 184, 185, 186, 190, 192, 193, 194, 195, 196, 197, 201, 202, 214, 217, 218, 242, 260, 273, 301, 312, 317, 318, 319, 342, 346, 351, 352, 353, 366, 375, 379, 381, 393, 396, 406, 409, 410, 412, 416, 417, 420, 430, 450, 463, 465, 471, 473, 474, 476, 477, 478, 479, 480, 481, 482, 494, 522, 524, 525, 529, 533, 535, 537, 540, 541, 546, 550, 552, 554, 556, 558, 560, 563, 566, 568, 580, 587, 591, 595, 607, 609, 612, 625, 633, 634, 637, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 689, 699, 701, 714, 717, 726, 731, 735, 740, 747, 750, 772, 774, 782, 783, 785, 789, 790, 793, 811, 822, 825, 832, 833, 842, 850, 857, 860, 872, 879, 899, 900, 901, 902, 903, 904, 905, 908, 910, 978, 981, 983, 1001, 1002, 1008, 1019, 1027, 1031, 1032, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1044], "galleri": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 166, 168, 169, 170, 171, 172, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360, 374, 379, 381, 393, 397, 400, 1008, 1017, 1027, 1031, 1034], "sphinx": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 166, 168, 169, 170, 171, 172, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360, 367, 379, 383, 393, 397, 400, 1021, 1027, 1034], "kernelpca": [5, 408, 412, 531, 532, 539, 542, 686, 688, 690, 865, 997, 1028, 1029, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044], "short": [5, 91, 122, 128, 190, 258, 301, 351, 379, 387, 411, 415, 419, 983, 984, 990, 1010, 1032, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "take": [5, 8, 13, 21, 31, 47, 54, 56, 58, 67, 76, 81, 93, 96, 112, 121, 151, 153, 156, 160, 169, 175, 182, 203, 207, 208, 224, 235, 247, 248, 255, 261, 265, 269, 270, 281, 283, 286, 289, 290, 291, 293, 294, 305, 319, 328, 334, 335, 338, 348, 352, 353, 357, 366, 367, 368, 373, 374, 377, 379, 381, 384, 385, 386, 387, 391, 393, 394, 405, 407, 408, 410, 411, 412, 414, 415, 416, 417, 419, 435, 441, 444, 445, 447, 448, 450, 455, 456, 457, 459, 461, 467, 517, 531, 536, 537, 538, 544, 545, 579, 590, 593, 594, 596, 597, 598, 608, 609, 614, 618, 619, 622, 630, 641, 647, 669, 671, 672, 673, 674, 677, 689, 690, 697, 703, 705, 707, 717, 726, 727, 735, 739, 740, 753, 768, 771, 775, 776, 777, 778, 780, 781, 784, 785, 796, 797, 801, 802, 810, 814, 823, 841, 842, 843, 845, 847, 848, 849, 850, 851, 863, 873, 894, 895, 899, 900, 901, 902, 903, 904, 905, 923, 957, 976, 979, 983, 984, 986, 987, 988, 990, 992, 993, 994, 997, 1002, 1003, 1011, 1012, 1016, 1018, 1024, 1027, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044], "exact": [5, 7, 83, 101, 118, 156, 203, 233, 283, 322, 362, 366, 367, 373, 379, 381, 388, 391, 392, 393, 407, 414, 416, 432, 480, 481, 482, 486, 494, 532, 533, 539, 559, 560, 636, 640, 644, 690, 796, 810, 820, 821, 822, 901, 904, 976, 979, 983, 984, 993, 997, 1001, 1002, 1034, 1035, 1037], "usp": 5, "digit": [5, 12, 13, 30, 36, 37, 39, 40, 42, 44, 46, 47, 49, 50, 52, 54, 57, 58, 60, 62, 63, 69, 73, 74, 86, 89, 94, 99, 117, 137, 141, 146, 148, 166, 189, 190, 206, 214, 215, 219, 220, 222, 224, 226, 232, 233, 237, 248, 254, 258, 259, 262, 283, 287, 292, 293, 298, 300, 301, 303, 321, 324, 327, 331, 352, 372, 379, 385, 407, 413, 414, 416, 439, 443, 445, 500, 539, 542, 547, 564, 656, 686, 687, 688, 689, 690, 695, 702, 703, 711, 715, 716, 734, 790, 792, 825, 841, 848, 855, 859, 860, 869, 879, 885, 892, 895, 904, 911, 912, 913, 976, 982, 984, 987, 990, 992, 1000, 1008, 1012, 1016, 1019, 1020, 1023, 1031], "reproduc": [5, 12, 61, 112, 169, 175, 187, 269, 278, 302, 367, 378, 379, 381, 382, 387, 391, 393, 401, 407, 411, 412, 415, 419, 438, 452, 458, 467, 472, 486, 489, 490, 493, 495, 501, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 534, 535, 536, 537, 538, 539, 541, 542, 543, 544, 545, 549, 551, 552, 553, 554, 557, 558, 559, 560, 561, 605, 606, 608, 609, 632, 637, 638, 639, 640, 644, 645, 648, 650, 651, 652, 658, 659, 660, 661, 664, 665, 666, 669, 674, 676, 677, 687, 688, 690, 691, 692, 790, 794, 795, 798, 799, 800, 801, 802, 808, 810, 811, 812, 813, 814, 815, 816, 823, 824, 825, 829, 830, 833, 844, 848, 855, 856, 857, 864, 876, 880, 888, 891, 892, 899, 900, 901, 904, 935, 936, 958, 961, 979, 1006, 1010, 1027, 1035, 1040, 1041], "sect": 5, "bak\u0131r": [5, 412, 533], "g\u00f6khan": [5, 412, 533], "h": [5, 6, 49, 59, 96, 97, 112, 113, 130, 148, 153, 169, 247, 288, 291, 299, 307, 319, 330, 334, 353, 376, 385, 405, 407, 409, 412, 413, 414, 415, 418, 442, 517, 530, 533, 536, 538, 545, 551, 565, 566, 580, 588, 605, 606, 687, 691, 702, 706, 754, 834, 838, 839, 840, 845, 855, 870, 879, 979, 981, 983, 984, 985, 987, 989, 991, 992, 1001, 1003, 1017, 1033, 1038, 1042, 1043, 1044], "jason": [5, 412, 533, 895, 1033, 1035, 1039, 1042], "weston": [5, 412, 533, 591, 592, 895], "bernhard": [5, 412, 533, 830, 865, 895, 988, 993, 1002, 1033], "sch\u00f6lkopf": [5, 412, 533, 865, 993, 997, 1002], "pre": [5, 72, 169, 188, 305, 353, 377, 379, 393, 397, 409, 411, 412, 414, 415, 416, 418, 419, 441, 442, 445, 457, 531, 533, 688, 710, 760, 862, 904, 987, 992, 997, 1002, 1003, 1006, 1007, 1023, 1030, 1035, 1041, 1045], "advanc": [5, 129, 166, 170, 227, 229, 243, 260, 281, 368, 382, 407, 412, 487, 499, 533, 630, 637, 780, 794, 848, 857, 860, 879, 908, 979, 987, 990, 997, 1008, 1011, 1024, 1029], "neural": [5, 6, 32, 260, 301, 393, 401, 411, 412, 414, 419, 531, 533, 536, 538, 545, 565, 566, 637, 643, 694, 738, 794, 848, 855, 856, 857, 865, 979, 983, 984, 985, 987, 990, 993, 997, 1001, 1003, 1006, 1009, 1011, 1017, 1022, 1023, 1027, 1039], "system": [5, 101, 183, 260, 267, 362, 366, 367, 368, 374, 376, 379, 380, 381, 382, 387, 391, 397, 407, 412, 414, 418, 442, 469, 470, 476, 533, 537, 541, 548, 637, 643, 648, 649, 652, 653, 654, 680, 681, 723, 753, 766, 794, 848, 894, 895, 955, 983, 987, 990, 999, 1006, 1007, 1011, 1021, 1027, 1035, 1036], "2004": [5, 148, 260, 278, 374, 376, 407, 409, 412, 471, 533, 605, 606, 687, 691, 703, 740, 780, 895, 981, 983, 984, 989, 1002, 1019], "449": [5, 250, 252, 412, 533, 1008], "456": [5, 153, 161, 412, 533, 1008], "author": [5, 7, 8, 9, 10, 11, 12, 14, 15, 17, 18, 21, 22, 25, 26, 27, 28, 31, 33, 38, 40, 41, 43, 47, 48, 49, 53, 54, 55, 57, 58, 62, 66, 67, 68, 71, 72, 73, 75, 76, 83, 96, 98, 100, 101, 103, 106, 110, 113, 114, 115, 116, 117, 118, 124, 126, 127, 131, 132, 148, 151, 152, 154, 155, 156, 157, 158, 160, 164, 175, 178, 179, 181, 183, 184, 186, 187, 188, 190, 191, 192, 193, 199, 200, 201, 203, 204, 206, 207, 214, 215, 216, 217, 220, 221, 222, 223, 225, 228, 231, 233, 234, 236, 238, 245, 247, 248, 259, 261, 263, 264, 266, 273, 281, 283, 285, 288, 295, 296, 299, 302, 305, 306, 308, 309, 310, 325, 326, 327, 328, 330, 346, 351, 352, 353, 373, 379, 383, 387, 391, 393, 394, 411, 449, 532, 866, 979, 1006, 1030], "fr": [5, 7, 8, 9, 10, 25, 26, 31, 38, 43, 55, 58, 76, 83, 118, 157, 178, 183, 184, 186, 190, 192, 193, 204, 221, 222, 228, 231, 238, 261, 263, 266, 273, 295, 310, 346, 351, 352, 353, 529, 535, 656, 662, 683, 684, 755, 756, 985, 987], "licenc": [5, 373], "bsd": [5, 7, 8, 9, 10, 11, 12, 14, 15, 17, 18, 21, 22, 25, 26, 27, 28, 31, 32, 33, 38, 40, 41, 43, 46, 47, 48, 49, 52, 53, 54, 55, 58, 62, 66, 67, 68, 71, 72, 74, 75, 76, 83, 90, 91, 96, 98, 100, 101, 102, 103, 106, 110, 112, 113, 114, 115, 116, 117, 118, 123, 124, 126, 127, 131, 132, 148, 151, 152, 154, 155, 156, 157, 158, 160, 164, 175, 181, 182, 184, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 199, 200, 201, 204, 206, 207, 215, 216, 217, 221, 222, 223, 225, 228, 231, 233, 234, 236, 238, 245, 247, 261, 264, 266, 273, 281, 283, 285, 291, 292, 293, 295, 296, 299, 302, 305, 306, 307, 308, 309, 310, 325, 326, 327, 328, 330, 342, 343, 346, 347, 351, 352, 353, 385], "claus": [5, 7, 8, 9, 10, 11, 12, 14, 15, 17, 18, 21, 22, 26, 28, 31, 32, 33, 38, 40, 41, 43, 46, 47, 48, 49, 52, 53, 54, 55, 58, 62, 66, 67, 68, 71, 72, 74, 75, 76, 83, 90, 91, 96, 98, 100, 101, 102, 103, 106, 110, 112, 113, 114, 115, 116, 117, 118, 123, 124, 126, 127, 131, 132, 148, 151, 152, 154, 155, 156, 157, 158, 160, 164, 175, 181, 182, 184, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 199, 200, 201, 204, 206, 207, 215, 216, 217, 221, 222, 228, 233, 234, 236, 238, 245, 247, 261, 266, 273, 281, 283, 285, 291, 292, 293, 295, 296, 299, 305, 306, 307, 308, 309, 310, 342, 343, 346, 347, 351, 352, 353], "normal": [5, 10, 12, 13, 15, 18, 20, 21, 27, 30, 35, 36, 38, 41, 45, 47, 58, 62, 63, 67, 74, 76, 79, 80, 81, 86, 87, 97, 112, 113, 115, 118, 124, 125, 128, 129, 143, 154, 157, 158, 164, 166, 168, 169, 177, 178, 179, 180, 181, 183, 189, 192, 194, 197, 201, 202, 203, 205, 213, 217, 218, 223, 238, 245, 250, 251, 254, 257, 260, 266, 288, 289, 292, 304, 306, 310, 313, 316, 319, 322, 328, 338, 352, 353, 362, 371, 374, 375, 376, 379, 384, 388, 392, 393, 403, 404, 405, 407, 408, 410, 413, 414, 415, 419, 438, 447, 449, 450, 451, 460, 462, 463, 473, 480, 481, 482, 487, 494, 510, 513, 517, 524, 525, 531, 534, 539, 540, 542, 546, 547, 550, 551, 552, 555, 556, 557, 558, 560, 561, 562, 563, 564, 577, 578, 580, 586, 587, 588, 589, 609, 623, 625, 637, 656, 657, 667, 670, 674, 678, 685, 689, 693, 695, 701, 702, 704, 716, 721, 723, 731, 733, 738, 742, 746, 747, 749, 752, 753, 754, 758, 767, 791, 792, 793, 799, 800, 825, 827, 836, 838, 844, 845, 848, 859, 860, 863, 864, 867, 869, 872, 873, 874, 875, 876, 877, 879, 884, 885, 887, 888, 889, 890, 894, 895, 907, 908, 909, 910, 935, 936, 940, 963, 964, 969, 970, 976, 979, 981, 983, 984, 985, 986, 989, 993, 998, 1000, 1002, 1003, 1008, 1017, 1019, 1020, 1021, 1023, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "pixel": [5, 6, 14, 21, 33, 48, 49, 54, 96, 111, 119, 136, 146, 166, 171, 172, 175, 232, 258, 301, 302, 376, 407, 412, 414, 415, 416, 491, 492, 493, 562, 583, 584, 605, 606, 632, 990, 992, 1003, 1008, 1017, 1020], "train_test_split": [5, 6, 7, 10, 13, 25, 26, 28, 32, 33, 72, 76, 87, 101, 112, 117, 119, 123, 124, 125, 126, 127, 128, 131, 144, 145, 168, 169, 171, 172, 175, 183, 194, 199, 206, 207, 214, 215, 217, 229, 238, 241, 242, 254, 257, 258, 263, 267, 269, 273, 281, 286, 291, 292, 299, 301, 302, 307, 309, 310, 312, 315, 316, 317, 322, 329, 356, 360, 362, 384, 392, 403, 408, 411, 414, 435, 436, 556, 558, 565, 566, 695, 696, 698, 700, 796, 827, 830, 848, 856, 857, 859, 909, 910, 976, 977, 987, 989, 990, 995, 997, 1002, 1017, 1024, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1036, 1040, 1044], "data_id": [5, 122, 156, 169, 199, 217, 229, 278, 311, 373, 494], "41082": 5, "return_x_i": [5, 7, 15, 59, 71, 72, 73, 74, 96, 118, 122, 135, 138, 139, 144, 163, 164, 171, 172, 175, 184, 186, 187, 188, 190, 195, 196, 206, 214, 215, 229, 237, 238, 241, 242, 256, 259, 262, 267, 268, 275, 278, 281, 285, 292, 300, 301, 302, 310, 315, 317, 319, 320, 321, 322, 328, 341, 353, 356, 372, 384, 385, 392, 401, 407, 408, 411, 414, 416, 419, 427, 444, 486, 487, 488, 489, 490, 492, 493, 494, 495, 498, 499, 500, 502, 503, 508, 530, 531, 532, 533, 556, 559, 560, 565, 566, 590, 593, 594, 596, 597, 598, 599, 600, 608, 617, 618, 620, 621, 636, 637, 656, 657, 666, 671, 672, 673, 686, 687, 688, 689, 691, 693, 699, 709, 785, 799, 800, 802, 827, 832, 843, 848, 851, 908, 909, 910, 977, 982, 987, 988, 989, 990, 997, 1012, 1016, 1017, 1019, 1020, 1024, 1033, 1035, 1037, 1040], "idea": [5, 54, 81, 82, 118, 148, 156, 169, 200, 220, 288, 338, 356, 366, 367, 379, 384, 385, 409, 410, 411, 412, 413, 414, 416, 605, 606, 983, 984, 987, 990, 993, 1005, 1011, 1021], "noisi": [5, 34, 50, 56, 63, 97, 112, 144, 151, 157, 183, 198, 201, 223, 231, 251, 261, 267, 269, 270, 310, 358, 359, 362, 407, 415, 417, 418, 442, 444, 448, 519, 522, 936, 982, 984, 990, 1002, 1006], "nois": [5, 10, 14, 21, 22, 28, 32, 34, 41, 45, 50, 53, 55, 56, 62, 63, 68, 76, 87, 96, 97, 99, 101, 103, 113, 115, 125, 129, 130, 150, 151, 152, 156, 159, 160, 161, 166, 178, 180, 181, 183, 188, 189, 194, 197, 198, 201, 202, 203, 204, 216, 223, 225, 228, 230, 231, 234, 260, 268, 273, 274, 295, 299, 300, 307, 312, 316, 322, 345, 358, 359, 362, 375, 381, 384, 405, 407, 412, 414, 416, 417, 418, 442, 444, 450, 509, 511, 512, 513, 514, 515, 516, 520, 522, 523, 528, 530, 532, 539, 604, 605, 606, 607, 609, 611, 612, 613, 614, 615, 619, 620, 622, 623, 642, 643, 647, 648, 649, 651, 652, 653, 654, 661, 662, 663, 669, 677, 690, 876, 888, 894, 980, 982, 983, 984, 987, 990, 1000, 1008, 1019, 1020, 1028, 1033, 1038, 1040, 1041], "approach": [5, 8, 59, 64, 67, 100, 148, 151, 163, 169, 172, 181, 187, 199, 201, 207, 217, 220, 278, 311, 342, 351, 352, 353, 368, 378, 379, 385, 388, 393, 397, 401, 405, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 435, 441, 444, 446, 450, 460, 518, 530, 580, 587, 609, 633, 656, 657, 672, 673, 828, 844, 936, 976, 977, 983, 984, 987, 988, 990, 991, 997, 1001, 1002, 1005, 1006, 1011, 1014, 1019, 1020, 1031, 1043], "copi": [5, 12, 13, 18, 45, 63, 76, 99, 115, 148, 163, 164, 169, 170, 171, 185, 192, 205, 215, 217, 221, 283, 325, 326, 328, 330, 352, 357, 367, 376, 377, 379, 381, 383, 384, 385, 391, 393, 432, 435, 438, 440, 441, 442, 444, 445, 447, 452, 457, 480, 481, 482, 483, 498, 500, 508, 530, 531, 532, 533, 539, 546, 551, 552, 557, 559, 560, 570, 588, 595, 605, 606, 608, 609, 626, 628, 642, 643, 644, 645, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 663, 669, 670, 672, 677, 679, 682, 683, 684, 729, 766, 789, 796, 810, 839, 840, 854, 862, 865, 868, 869, 870, 871, 875, 876, 877, 879, 882, 884, 885, 886, 887, 888, 889, 890, 894, 895, 899, 901, 902, 903, 904, 905, 914, 917, 919, 920, 946, 958, 960, 961, 997, 1002, 1003, 1007, 1013, 1016, 1021, 1027, 1030, 1033, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044], "add": [5, 12, 17, 18, 21, 26, 27, 28, 33, 34, 41, 45, 55, 76, 81, 82, 87, 97, 121, 124, 144, 148, 151, 156, 157, 158, 163, 164, 181, 188, 194, 200, 202, 203, 214, 223, 228, 232, 234, 235, 267, 269, 270, 283, 295, 307, 309, 315, 317, 318, 341, 342, 345, 346, 352, 366, 377, 378, 379, 380, 381, 383, 385, 387, 393, 397, 403, 405, 411, 414, 415, 416, 513, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 600, 625, 626, 628, 630, 656, 657, 692, 695, 817, 839, 840, 896, 926, 944, 945, 955, 976, 977, 986, 993, 997, 1000, 1001, 1007, 1019, 1020, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "corrupt": [5, 103, 183, 205, 216, 391, 855, 983, 995], "uncorrupt": 5, "base": [5, 12, 13, 14, 15, 18, 21, 26, 27, 28, 35, 50, 57, 58, 59, 68, 71, 72, 76, 81, 91, 96, 97, 110, 112, 113, 118, 123, 124, 125, 126, 130, 132, 135, 142, 145, 149, 151, 156, 157, 159, 168, 170, 171, 172, 177, 178, 184, 185, 187, 188, 193, 194, 199, 200, 207, 216, 217, 218, 220, 228, 235, 236, 238, 257, 258, 263, 278, 281, 283, 296, 302, 305, 306, 308, 310, 317, 319, 330, 336, 342, 352, 356, 366, 367, 373, 374, 375, 376, 377, 380, 381, 382, 387, 391, 393, 394, 396, 405, 408, 412, 413, 415, 417, 418, 419, 435, 442, 444, 445, 446, 447, 448, 450, 454, 455, 459, 461, 462, 463, 464, 465, 485, 498, 499, 506, 507, 530, 531, 533, 534, 535, 536, 537, 539, 544, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 576, 586, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 604, 605, 606, 608, 609, 614, 615, 616, 619, 622, 630, 631, 633, 634, 642, 643, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 656, 662, 667, 669, 670, 671, 672, 673, 678, 680, 681, 683, 684, 685, 688, 690, 702, 715, 723, 732, 733, 734, 736, 738, 752, 753, 754, 782, 785, 792, 796, 798, 799, 800, 802, 803, 805, 810, 814, 815, 816, 817, 823, 825, 829, 830, 833, 841, 842, 843, 845, 847, 849, 850, 851, 856, 857, 860, 861, 864, 871, 872, 874, 878, 879, 880, 888, 891, 892, 895, 896, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 922, 930, 955, 956, 976, 978, 979, 981, 982, 984, 987, 988, 989, 990, 991, 992, 993, 994, 997, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1011, 1016, 1021, 1023, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1038], "solv": [5, 6, 67, 151, 188, 233, 260, 281, 378, 379, 380, 381, 384, 391, 407, 409, 411, 412, 417, 445, 451, 460, 476, 529, 535, 536, 537, 541, 543, 544, 545, 546, 633, 635, 644, 650, 652, 653, 662, 663, 668, 670, 672, 675, 683, 684, 685, 829, 899, 900, 903, 936, 978, 981, 983, 984, 987, 988, 1001, 1002, 1003, 1005, 1006, 1011, 1014, 1017, 1021, 1033, 1037, 1040], "x_train": [5, 6, 7, 8, 10, 13, 25, 26, 27, 28, 32, 33, 71, 72, 76, 79, 86, 87, 101, 112, 115, 119, 123, 124, 125, 126, 127, 128, 131, 139, 140, 144, 145, 157, 158, 159, 160, 168, 169, 170, 171, 172, 175, 179, 183, 194, 196, 197, 200, 206, 207, 213, 214, 215, 217, 229, 237, 241, 242, 247, 249, 254, 257, 258, 263, 267, 269, 273, 281, 286, 289, 291, 292, 299, 301, 302, 307, 309, 310, 312, 315, 316, 317, 322, 328, 329, 337, 351, 356, 360, 362, 366, 373, 381, 384, 392, 408, 411, 414, 435, 436, 507, 556, 557, 558, 565, 566, 695, 696, 698, 700, 825, 827, 830, 848, 856, 857, 859, 873, 909, 910, 977, 987, 989, 990, 991, 993, 995, 997, 1001, 1002, 1016, 1017, 1024], "x_test": [5, 6, 7, 8, 10, 13, 25, 26, 27, 28, 32, 33, 71, 72, 76, 79, 86, 87, 101, 112, 115, 117, 119, 124, 125, 126, 127, 128, 131, 139, 140, 144, 145, 156, 159, 168, 169, 170, 171, 172, 175, 179, 183, 189, 194, 196, 197, 205, 206, 207, 213, 214, 215, 217, 229, 231, 237, 241, 242, 247, 254, 257, 258, 263, 267, 269, 273, 274, 281, 286, 289, 291, 292, 299, 301, 302, 307, 309, 310, 312, 315, 316, 317, 322, 328, 329, 337, 351, 356, 358, 359, 360, 362, 366, 373, 381, 384, 392, 408, 411, 414, 436, 468, 469, 470, 471, 472, 473, 474, 507, 556, 557, 558, 565, 566, 695, 696, 698, 700, 825, 827, 830, 848, 856, 857, 859, 873, 909, 910, 977, 987, 989, 990, 991, 993, 997, 1001, 1002, 1003, 1016, 1017, 1019, 1024, 1027], "y_train": [5, 6, 7, 8, 10, 13, 25, 26, 27, 28, 32, 33, 71, 72, 76, 86, 87, 101, 112, 115, 119, 123, 124, 125, 126, 127, 128, 131, 139, 140, 144, 145, 157, 158, 159, 160, 168, 169, 170, 171, 172, 175, 179, 183, 194, 196, 197, 200, 206, 207, 214, 215, 229, 237, 241, 242, 247, 254, 257, 258, 263, 267, 269, 273, 281, 286, 291, 292, 299, 301, 302, 307, 310, 312, 315, 316, 317, 322, 325, 326, 328, 329, 330, 351, 356, 360, 362, 366, 373, 381, 384, 392, 408, 411, 414, 435, 436, 556, 557, 558, 565, 566, 695, 696, 698, 700, 825, 827, 830, 848, 856, 857, 859, 909, 910, 977, 987, 989, 990, 995, 997, 1002, 1016, 1017, 1024], "y_test": [5, 6, 7, 8, 10, 13, 25, 26, 27, 28, 32, 33, 71, 72, 76, 86, 87, 101, 112, 115, 117, 119, 124, 125, 126, 127, 128, 131, 139, 140, 144, 145, 159, 168, 169, 170, 171, 172, 175, 183, 194, 196, 199, 205, 206, 207, 214, 215, 217, 229, 237, 241, 242, 247, 254, 257, 258, 263, 267, 269, 273, 281, 286, 291, 292, 299, 301, 302, 307, 310, 312, 315, 316, 317, 322, 328, 329, 351, 356, 360, 362, 373, 384, 392, 408, 411, 414, 436, 556, 557, 558, 565, 566, 695, 696, 698, 700, 825, 827, 830, 848, 856, 857, 859, 909, 910, 987, 989, 990, 997, 1002, 1016, 1017, 1024, 1027], "stratifi": [5, 101, 119, 128, 144, 171, 214, 229, 238, 242, 255, 260, 263, 269, 286, 291, 292, 315, 381, 393, 549, 557, 565, 566, 600, 657, 664, 666, 674, 796, 799, 800, 802, 810, 811, 812, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 830, 833, 848, 856, 958, 987, 990, 1016, 1032, 1033, 1034, 1036, 1037, 1040], "train_siz": [5, 7, 10, 112, 131, 152, 175, 215, 234, 238, 262, 273, 317, 320, 346, 798, 802, 813, 816, 823, 825, 982, 1016, 1027, 1028, 1033, 1034], "1_000": [5, 35, 49, 73, 101, 151, 156, 158, 170, 232, 257, 346, 535, 537, 699, 818, 826], "rng": [5, 21, 22, 32, 35, 38, 45, 51, 63, 82, 87, 96, 98, 103, 113, 125, 128, 129, 131, 151, 152, 155, 157, 158, 160, 163, 164, 168, 171, 178, 179, 180, 181, 183, 188, 193, 200, 201, 206, 213, 228, 234, 235, 237, 245, 255, 263, 266, 271, 272, 299, 309, 312, 316, 317, 319, 321, 322, 325, 326, 330, 341, 358, 359, 362, 367, 381, 384, 398, 420, 468, 472, 473, 474, 476, 477, 478, 479, 641, 647, 668, 670, 676, 685, 808, 834, 835, 836, 838, 839, 840, 844, 847, 849, 850, 851, 876, 888, 891, 892, 894, 895, 896, 905, 1012], "randomst": [5, 14, 21, 22, 25, 32, 35, 38, 45, 51, 62, 63, 82, 83, 87, 96, 98, 103, 113, 124, 125, 128, 129, 131, 144, 151, 152, 155, 157, 158, 160, 163, 164, 168, 171, 178, 179, 180, 181, 183, 188, 193, 200, 201, 206, 213, 223, 228, 234, 235, 245, 248, 255, 263, 266, 267, 269, 270, 271, 272, 299, 306, 308, 309, 312, 316, 317, 319, 321, 322, 325, 326, 330, 341, 358, 359, 381, 384, 388, 393, 398, 412, 419, 420, 438, 441, 445, 447, 449, 450, 451, 452, 456, 457, 458, 460, 467, 468, 472, 473, 474, 476, 477, 478, 479, 486, 489, 490, 493, 495, 501, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 534, 535, 536, 537, 538, 539, 541, 542, 543, 544, 545, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 581, 582, 605, 606, 608, 609, 625, 630, 632, 637, 638, 639, 640, 641, 644, 645, 647, 648, 650, 651, 652, 656, 657, 658, 659, 660, 661, 664, 665, 666, 668, 669, 670, 672, 674, 675, 676, 677, 685, 687, 688, 689, 690, 691, 692, 693, 699, 778, 790, 794, 795, 798, 799, 800, 801, 802, 808, 810, 811, 812, 813, 814, 815, 816, 823, 824, 825, 829, 830, 833, 834, 835, 836, 838, 839, 840, 844, 848, 855, 856, 857, 864, 876, 880, 888, 891, 892, 894, 895, 896, 899, 900, 901, 904, 905, 907, 908, 909, 910, 922, 935, 936, 956, 958, 961, 997, 1012, 1023], "x_test_noisi": 5, "x_train_noisi": 5, "helper": [5, 6, 99, 217, 271, 372, 381, 382, 392, 393, 411, 466, 573, 897, 1016, 1017, 1027, 1034, 1035, 1036, 1040], "qualit": [5, 6, 54, 56, 62, 118, 125, 199, 320, 374, 407, 437, 699, 1017, 1042], "assess": [5, 13, 38, 61, 112, 123, 125, 169, 199, 217, 238, 256, 257, 259, 263, 405, 414, 699, 740, 986, 987, 993, 1007, 1042], "plot_digit": 5, "small": [5, 11, 13, 22, 28, 40, 49, 50, 54, 56, 71, 79, 83, 87, 92, 101, 113, 115, 122, 124, 125, 156, 158, 169, 170, 179, 185, 189, 190, 200, 203, 205, 214, 216, 217, 247, 260, 267, 272, 285, 296, 300, 302, 305, 307, 309, 317, 325, 330, 338, 343, 346, 351, 352, 368, 372, 374, 376, 379, 382, 388, 393, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 420, 439, 441, 443, 444, 445, 447, 456, 457, 461, 473, 494, 496, 536, 538, 545, 553, 554, 555, 559, 560, 562, 580, 587, 588, 600, 605, 606, 648, 652, 653, 654, 656, 657, 677, 680, 681, 743, 799, 800, 814, 824, 827, 856, 857, 864, 892, 901, 904, 936, 976, 981, 982, 983, 984, 986, 987, 988, 989, 990, 991, 992, 994, 995, 997, 999, 1000, 1003, 1007, 1011, 1019, 1020, 1027, 1028, 1030, 1032, 1033, 1034, 1035, 1036, 1038, 1039, 1041, 1042, 1043, 1044], "img": [5, 51, 67, 504, 584], "ravel": [5, 14, 17, 18, 20, 27, 43, 54, 55, 59, 81, 105, 113, 115, 121, 125, 130, 131, 132, 140, 151, 153, 155, 156, 157, 158, 169, 178, 189, 190, 192, 199, 212, 213, 221, 225, 228, 232, 234, 238, 242, 247, 249, 263, 267, 269, 283, 288, 289, 295, 296, 299, 300, 301, 302, 307, 308, 319, 330, 338, 343, 344, 345, 347, 348, 351, 358, 359, 463, 491, 492, 493, 629, 716, 974, 987, 1043], "imshow": [5, 6, 14, 33, 41, 47, 48, 49, 51, 52, 54, 55, 59, 83, 90, 96, 99, 106, 153, 154, 155, 159, 172, 190, 215, 221, 237, 271, 287, 302, 325, 326, 338, 344, 347, 373, 630, 695, 1017, 1018, 1041], "grei": [5, 270, 305, 346, 374], "off": [5, 12, 14, 38, 40, 41, 48, 49, 53, 54, 79, 83, 86, 96, 118, 203, 221, 233, 237, 254, 259, 261, 262, 305, 326, 330, 338, 348, 351, 374, 379, 381, 407, 409, 416, 440, 551, 552, 557, 558, 586, 589, 632, 654, 690, 713, 794, 795, 796, 799, 800, 810, 822, 940, 986, 992, 1002, 1007, 1027, 1031, 1032, 1034], "fontsiz": [5, 8, 10, 15, 35, 51, 61, 92, 99, 121, 143, 154, 155, 157, 160, 170, 179, 189, 198, 210, 221, 222, 248, 255, 264, 265, 266, 271, 272, 302, 309, 345, 913], "mse": [5, 7, 79, 80, 123, 125, 126, 163, 164, 199, 201, 203, 205, 274, 322, 645, 651, 747, 987, 1003, 1038, 1040], "nmse": [5, 274], "2f": [5, 8, 11, 13, 20, 32, 40, 43, 45, 47, 51, 53, 63, 65, 68, 86, 93, 99, 105, 125, 131, 132, 143, 169, 170, 175, 179, 188, 190, 195, 199, 214, 215, 216, 217, 228, 232, 238, 259, 263, 264, 266, 268, 269, 270, 291, 292, 299, 307, 310, 319, 338, 351, 352, 362, 408, 411, 414, 694, 823, 826], "linear": [5, 9, 10, 11, 12, 13, 14, 15, 17, 28, 30, 31, 32, 36, 38, 53, 58, 75, 76, 79, 80, 81, 82, 83, 87, 91, 96, 101, 104, 115, 117, 130, 132, 135, 138, 140, 143, 146, 148, 153, 155, 157, 163, 164, 167, 168, 170, 173, 175, 179, 181, 183, 185, 187, 188, 189, 194, 196, 197, 200, 201, 203, 204, 207, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 222, 224, 226, 231, 232, 234, 236, 237, 240, 249, 250, 254, 256, 257, 258, 260, 263, 265, 266, 267, 268, 269, 270, 274, 283, 288, 289, 290, 291, 292, 293, 296, 299, 302, 305, 306, 307, 308, 310, 312, 317, 318, 330, 333, 335, 338, 339, 340, 343, 346, 347, 348, 349, 351, 358, 359, 367, 371, 375, 376, 377, 381, 382, 384, 393, 396, 407, 410, 411, 412, 413, 414, 415, 416, 417, 419, 440, 453, 463, 465, 473, 480, 481, 482, 494, 499, 500, 510, 513, 519, 522, 530, 531, 532, 533, 534, 537, 539, 541, 542, 546, 547, 548, 552, 564, 580, 587, 591, 592, 604, 607, 612, 618, 629, 633, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 682, 685, 686, 687, 688, 689, 690, 691, 699, 705, 714, 747, 750, 762, 764, 771, 782, 796, 807, 811, 822, 825, 839, 840, 844, 848, 855, 856, 857, 860, 864, 865, 866, 869, 872, 874, 876, 877, 878, 879, 888, 892, 899, 900, 901, 902, 903, 904, 905, 976, 978, 979, 980, 982, 987, 990, 991, 992, 993, 994, 995, 1001, 1002, 1006, 1008, 1009, 1011, 1012, 1015, 1016, 1021, 1022, 1023, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1038, 1039, 1040, 1041], "radial": [5, 101, 151, 156, 158, 338, 342, 371, 450, 620, 689, 985, 1002, 1023], "rbf": [5, 6, 7, 10, 11, 17, 31, 32, 101, 133, 140, 151, 152, 153, 155, 156, 157, 158, 159, 160, 166, 175, 213, 227, 228, 234, 243, 258, 260, 262, 265, 271, 274, 275, 278, 289, 290, 330, 333, 335, 344, 345, 349, 371, 408, 412, 414, 450, 460, 500, 502, 533, 539, 608, 609, 610, 611, 614, 616, 617, 618, 619, 621, 622, 629, 637, 638, 639, 640, 641, 674, 689, 762, 771, 773, 796, 807, 810, 816, 859, 879, 894, 895, 899, 901, 902, 903, 904, 905, 976, 979, 980, 982, 984, 987, 993, 997, 1000, 1008, 1012, 1017, 1023, 1033, 1038], "decomposit": [5, 6, 10, 15, 18, 51, 59, 71, 73, 74, 75, 87, 88, 91, 93, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 111, 130, 136, 175, 220, 221, 223, 232, 233, 236, 237, 240, 259, 287, 292, 310, 319, 322, 352, 368, 372, 385, 388, 393, 403, 404, 405, 408, 414, 447, 449, 450, 451, 460, 480, 481, 482, 493, 547, 554, 609, 648, 649, 650, 651, 652, 653, 654, 661, 662, 663, 670, 671, 672, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 694, 794, 795, 848, 855, 858, 861, 877, 908, 935, 936, 983, 984, 987, 1004, 1006, 1008, 1009, 1015, 1017, 1022, 1023, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "kernel_pca": [5, 101, 408], "400": [5, 27, 51, 96, 127, 131, 151, 164, 205, 225, 272, 300, 352, 374, 412, 493, 1021], "1e": [5, 6, 7, 10, 18, 27, 47, 96, 148, 151, 154, 156, 157, 158, 159, 160, 163, 169, 179, 192, 199, 200, 206, 213, 217, 223, 228, 234, 239, 245, 248, 251, 258, 268, 271, 301, 312, 318, 321, 329, 336, 338, 346, 351, 385, 419, 441, 445, 450, 457, 460, 469, 470, 476, 480, 481, 482, 529, 530, 531, 534, 535, 536, 537, 538, 540, 541, 543, 544, 545, 546, 557, 558, 559, 560, 590, 595, 604, 606, 607, 609, 611, 612, 613, 617, 618, 620, 621, 623, 625, 636, 638, 639, 640, 642, 643, 644, 645, 646, 647, 650, 651, 656, 657, 658, 659, 660, 661, 664, 665, 666, 667, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 682, 685, 687, 688, 689, 690, 691, 692, 693, 725, 738, 782, 794, 795, 810, 834, 835, 836, 837, 838, 839, 840, 848, 856, 857, 864, 894, 895, 899, 900, 901, 902, 903, 904, 905, 973, 976, 987, 991, 995, 997, 1001, 1017, 1021, 1035, 1040, 1041, 1042], "fit_inverse_transform": [5, 101, 533, 1036], "5e": [5, 96, 184, 593, 594, 596], "inde": [5, 7, 26, 35, 40, 41, 54, 56, 59, 83, 87, 101, 112, 115, 147, 148, 151, 169, 171, 178, 183, 187, 188, 199, 201, 262, 263, 267, 269, 278, 283, 305, 310, 346, 352, 362, 366, 378, 384, 392, 393, 394, 407, 409, 414, 565, 566, 983, 997, 1001, 1041], "least": [5, 13, 15, 81, 82, 85, 86, 88, 98, 99, 115, 126, 148, 159, 166, 168, 177, 178, 181, 183, 189, 192, 195, 196, 199, 201, 203, 204, 207, 216, 217, 218, 232, 238, 260, 278, 281, 310, 317, 318, 338, 352, 353, 366, 372, 374, 376, 378, 379, 383, 385, 387, 391, 393, 394, 398, 406, 407, 409, 410, 411, 412, 414, 415, 416, 417, 418, 442, 446, 448, 454, 455, 456, 459, 472, 479, 480, 481, 482, 483, 492, 514, 529, 535, 537, 539, 540, 541, 543, 544, 545, 546, 547, 555, 556, 557, 558, 560, 562, 563, 564, 591, 600, 633, 641, 644, 646, 648, 649, 650, 651, 652, 653, 654, 655, 661, 662, 663, 664, 665, 666, 667, 669, 670, 672, 674, 676, 677, 678, 680, 681, 682, 683, 684, 685, 690, 695, 710, 714, 716, 782, 797, 801, 802, 808, 810, 811, 812, 814, 815, 817, 820, 823, 824, 825, 856, 857, 860, 871, 879, 904, 907, 908, 909, 910, 928, 950, 977, 980, 984, 987, 990, 999, 1001, 1002, 1003, 1007, 1008, 1009, 1011, 1019, 1023, 1027, 1029, 1030, 1033, 1034, 1038], "hope": [5, 217, 393, 406, 1036], "remov": [5, 15, 17, 18, 55, 56, 71, 76, 148, 163, 164, 169, 172, 261, 305, 312, 315, 316, 317, 322, 351, 352, 356, 362, 371, 374, 378, 379, 380, 381, 383, 384, 388, 393, 397, 400, 407, 408, 411, 414, 415, 417, 418, 439, 440, 442, 443, 445, 447, 448, 455, 476, 486, 487, 524, 525, 532, 533, 535, 537, 539, 544, 551, 565, 566, 567, 568, 577, 586, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 605, 606, 609, 628, 631, 636, 642, 643, 652, 653, 654, 674, 675, 738, 739, 747, 748, 775, 776, 777, 802, 818, 820, 821, 822, 823, 846, 858, 859, 863, 864, 876, 877, 879, 888, 914, 930, 931, 977, 984, 990, 1003, 1009, 1013, 1023, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "think": [5, 38, 170, 351, 352, 379, 413, 986, 1007, 1011, 1012], "happen": [5, 117, 187, 305, 311, 352, 362, 366, 367, 377, 378, 379, 383, 384, 385, 391, 393, 394, 397, 407, 409, 411, 414, 435, 513, 570, 656, 782, 877, 879, 899, 983, 987, 988, 1002, 1007, 1021, 1035, 1039, 1040, 1042, 1043, 1044], "ridg": [5, 10, 14, 55, 76, 97, 98, 115, 132, 138, 148, 150, 156, 158, 160, 161, 163, 166, 168, 169, 170, 177, 178, 183, 186, 189, 192, 194, 195, 199, 200, 205, 218, 227, 237, 243, 273, 306, 309, 345, 346, 351, 366, 391, 412, 414, 417, 522, 533, 537, 541, 609, 613, 620, 623, 641, 642, 643, 645, 647, 655, 659, 671, 672, 673, 676, 685, 699, 747, 796, 802, 810, 832, 905, 987, 995, 997, 1001, 1002, 1008, 1009, 1019, 1023, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1036, 1037, 1040, 1041, 1042, 1043], "x_reconstructed_kernel_pca": [5, 101], "inverse_transform": [5, 52, 55, 101, 145, 235, 287, 352, 398, 412, 415, 443, 463, 480, 481, 482, 531, 532, 533, 536, 537, 538, 539, 541, 542, 579, 586, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 628, 796, 799, 800, 810, 859, 863, 864, 866, 867, 868, 869, 870, 872, 873, 875, 876, 877, 879, 891, 892, 997, 998, 999, 1029, 1031, 1032, 1033, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "x_reconstructed_pca": [5, 101], "lower": [5, 13, 17, 27, 32, 34, 59, 80, 87, 91, 96, 98, 103, 112, 115, 118, 121, 125, 128, 151, 153, 155, 157, 159, 170, 171, 183, 184, 185, 189, 199, 200, 201, 202, 212, 220, 224, 231, 232, 237, 247, 251, 259, 260, 262, 263, 267, 268, 270, 273, 286, 287, 289, 290, 307, 310, 319, 328, 338, 344, 351, 352, 353, 357, 374, 379, 405, 406, 407, 410, 411, 412, 413, 414, 415, 418, 442, 446, 462, 465, 496, 507, 530, 532, 539, 542, 551, 557, 558, 559, 560, 561, 586, 587, 589, 601, 609, 611, 612, 613, 615, 617, 618, 620, 621, 623, 630, 631, 633, 635, 675, 677, 710, 714, 722, 725, 731, 736, 794, 795, 845, 847, 849, 850, 851, 853, 880, 899, 900, 901, 902, 903, 906, 923, 982, 983, 984, 986, 987, 988, 990, 991, 992, 993, 994, 995, 999, 1001, 1002, 1003, 1019, 1029, 1030, 1035, 1042, 1044], "analysi": [5, 7, 9, 10, 15, 21, 26, 30, 36, 37, 38, 58, 64, 66, 69, 79, 80, 81, 82, 83, 86, 87, 91, 93, 95, 97, 98, 100, 101, 102, 104, 105, 107, 122, 139, 164, 166, 169, 188, 221, 244, 246, 250, 251, 252, 257, 260, 261, 265, 271, 283, 284, 285, 286, 294, 295, 297, 305, 310, 328, 346, 352, 371, 374, 376, 379, 381, 394, 404, 407, 409, 414, 415, 419, 437, 445, 446, 471, 473, 474, 480, 481, 483, 500, 502, 510, 513, 529, 530, 531, 532, 533, 535, 537, 538, 539, 540, 541, 542, 543, 544, 547, 548, 553, 554, 629, 636, 686, 688, 689, 690, 691, 708, 717, 722, 723, 753, 785, 786, 789, 790, 794, 796, 821, 825, 841, 848, 859, 860, 865, 875, 879, 887, 935, 936, 977, 983, 984, 986, 987, 997, 1005, 1006, 1008, 1009, 1011, 1013, 1022, 1023, 1027, 1028, 1029, 1031, 1036], "favor": [5, 83, 118, 245, 251, 391, 409, 414, 631, 727, 804, 806, 858, 976, 995, 1029, 1031, 1033, 1034, 1036, 1039, 1040, 1041, 1042, 1043, 1044], "background": [5, 11, 48, 67, 128, 302, 307, 374, 377, 379, 387, 407, 491, 492, 984, 992, 1001, 1037], "224": [5, 13, 16, 54, 86, 130, 256, 276, 320, 323, 407, 722, 1008], "plot_digits_denois": [5, 16, 1008], "agglomer": [5, 33, 37, 48, 51, 69, 90, 144, 146, 166, 181, 198, 237, 273, 287, 371, 407, 415, 443, 500, 598, 604, 643, 796, 801, 859, 1008, 1023], "hand": [5, 30, 36, 52, 54, 87, 90, 98, 99, 101, 118, 125, 143, 146, 156, 166, 169, 170, 192, 203, 206, 224, 231, 232, 234, 235, 238, 254, 257, 258, 262, 269, 287, 302, 325, 326, 338, 366, 373, 374, 376, 379, 381, 385, 387, 392, 401, 412, 413, 414, 416, 424, 430, 500, 641, 695, 711, 785, 825, 880, 904, 976, 980, 983, 987, 989, 991, 995, 1000, 1002, 1008, 1011, 1012, 1015, 1018, 1019], "written": [5, 7, 30, 36, 52, 54, 90, 99, 146, 166, 206, 254, 258, 287, 302, 318, 325, 326, 367, 376, 379, 380, 381, 385, 387, 391, 393, 406, 408, 413, 485, 500, 506, 695, 711, 825, 904, 911, 981, 983, 987, 991, 992, 1001, 1005, 1008, 1012, 1013, 1018, 1021, 1036], "onlin": [5, 6, 8, 15, 37, 52, 69, 96, 99, 120, 166, 177, 207, 213, 218, 237, 300, 368, 374, 378, 384, 393, 407, 412, 415, 417, 440, 444, 445, 447, 493, 500, 529, 534, 535, 536, 537, 543, 544, 580, 582, 656, 664, 665, 666, 674, 676, 825, 834, 835, 836, 837, 838, 841, 842, 847, 849, 850, 868, 869, 879, 899, 900, 979, 983, 991, 993, 1005, 1008, 1009, 1011, 1019, 1023, 1027, 1031, 1032, 1034, 1042], "dictionari": [5, 6, 7, 8, 37, 49, 52, 54, 69, 95, 97, 107, 120, 129, 166, 198, 235, 237, 352, 353, 372, 373, 374, 381, 391, 393, 407, 415, 447, 462, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 505, 508, 524, 529, 535, 536, 537, 538, 540, 541, 542, 543, 544, 546, 565, 566, 567, 568, 579, 580, 582, 585, 586, 587, 630, 631, 632, 662, 683, 684, 699, 711, 796, 799, 800, 807, 808, 810, 822, 858, 863, 872, 907, 908, 909, 910, 914, 924, 944, 947, 976, 983, 987, 1002, 1008, 1012, 1021, 1022, 1023, 1027, 1035, 1038, 1039, 1040, 1041, 1042], "dataset": [6, 7, 9, 10, 11, 14, 15, 17, 18, 20, 21, 22, 27, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 64, 65, 68, 69, 72, 73, 74, 75, 76, 81, 82, 83, 87, 94, 95, 98, 99, 100, 101, 102, 103, 105, 106, 107, 111, 113, 114, 115, 116, 117, 119, 120, 123, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 139, 140, 141, 144, 145, 146, 147, 148, 150, 152, 154, 157, 159, 161, 163, 164, 171, 172, 175, 177, 179, 180, 182, 184, 185, 186, 187, 189, 190, 191, 192, 195, 196, 197, 198, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 218, 222, 224, 225, 227, 229, 232, 234, 236, 237, 241, 242, 243, 245, 247, 248, 249, 251, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 268, 269, 270, 271, 272, 273, 275, 283, 285, 286, 287, 289, 290, 291, 292, 293, 294, 296, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 331, 333, 334, 336, 338, 339, 340, 341, 343, 344, 346, 347, 348, 349, 352, 353, 355, 356, 358, 359, 360, 361, 362, 367, 368, 381, 382, 383, 385, 392, 393, 396, 397, 401, 403, 404, 405, 407, 408, 411, 412, 413, 414, 415, 416, 419, 422, 427, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 456, 457, 467, 468, 471, 472, 473, 474, 476, 479, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 541, 543, 544, 547, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 581, 582, 586, 587, 588, 590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 622, 623, 626, 629, 630, 631, 632, 633, 636, 637, 638, 641, 643, 644, 645, 647, 649, 650, 651, 653, 655, 656, 657, 661, 662, 663, 664, 665, 666, 669, 670, 671, 672, 673, 674, 675, 677, 685, 686, 687, 688, 689, 690, 691, 693, 694, 695, 696, 698, 699, 700, 701, 702, 706, 708, 709, 726, 752, 754, 784, 785, 789, 790, 792, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 810, 811, 812, 813, 814, 815, 816, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 841, 842, 843, 845, 847, 848, 849, 850, 851, 852, 855, 856, 857, 859, 860, 863, 864, 872, 873, 877, 879, 881, 889, 890, 891, 892, 893, 894, 895, 896, 899, 900, 901, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 919, 920, 924, 925, 976, 977, 979, 980, 981, 982, 983, 984, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 997, 999, 1000, 1001, 1002, 1003, 1006, 1007, 1008, 1011, 1013, 1015, 1016, 1017, 1020, 1023, 1024, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "excerpt": [6, 999, 1017], "wild": [6, 372, 491, 492, 506, 507, 1017, 1023, 1027], "aka": [6, 299, 351, 391, 415, 450, 534, 536, 538, 542, 545, 579, 580, 613, 620, 649, 650, 652, 653, 654, 656, 657, 660, 664, 665, 666, 668, 674, 675, 676, 738, 866, 870, 872, 983, 991, 1001, 1012, 1017, 1029, 1041], "lfw": [6, 374, 491, 492, 1017, 1027], "vi": [6, 8, 374, 697, 1017, 1035, 1038], "www": [6, 72, 175, 199, 215, 217, 229, 281, 301, 373, 374, 379, 387, 407, 411, 440, 447, 485, 506, 507, 529, 532, 535, 539, 642, 656, 662, 669, 683, 684, 848, 855, 907, 908, 983, 1000, 1017], "umass": [6, 20, 374, 1017], "edu": [6, 8, 11, 18, 47, 148, 158, 175, 181, 220, 248, 259, 278, 288, 296, 309, 351, 373, 374, 376, 407, 447, 485, 498, 500, 506, 507, 508, 532, 639, 642, 647, 656, 664, 665, 674, 677, 680, 681, 834, 836, 837, 838, 848, 855, 892, 894, 907, 908, 983, 985, 1017], "funnel": [6, 491, 492, 1017], "tgz": [6, 1017], "233mb": [6, 1017], "stat": [6, 8, 10, 71, 81, 148, 151, 172, 257, 260, 268, 272, 288, 317, 325, 326, 376, 388, 392, 409, 472, 590, 593, 594, 596, 597, 598, 602, 603, 604, 607, 680, 681, 800, 808, 810, 907, 908, 938, 976, 983, 997, 1017, 1034, 1036, 1040], "loguniform": [6, 151, 268, 976, 1017, 1037], "fetch_lfw_peopl": [6, 374, 1017, 1042], "confusionmatrixdisplai": [6, 33, 254, 318, 325, 351, 629, 716, 987, 1017, 1037, 1038, 1040, 1041, 1042], "classification_report": [6, 33, 71, 145, 258, 302, 325, 326, 987, 1017, 1021, 1029, 1031, 1035, 1036, 1037, 1039, 1043], "randomizedsearchcv": [6, 72, 151, 261, 268, 317, 362, 392, 398, 573, 976, 987, 1001, 1006, 1017, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1042, 1044], "standardscal": [6, 10, 32, 45, 50, 56, 59, 63, 72, 74, 87, 106, 132, 148, 169, 178, 187, 188, 190, 199, 215, 217, 229, 230, 238, 239, 240, 242, 257, 267, 286, 291, 292, 299, 307, 310, 315, 316, 318, 319, 320, 322, 338, 341, 362, 368, 379, 381, 384, 388, 392, 408, 411, 428, 464, 465, 565, 674, 676, 859, 860, 863, 876, 890, 899, 900, 901, 902, 904, 905, 977, 984, 991, 997, 1001, 1002, 1004, 1017, 1029, 1031, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1043], "svc": [6, 17, 26, 28, 31, 32, 33, 71, 75, 123, 133, 140, 146, 152, 166, 175, 190, 203, 215, 233, 236, 240, 254, 258, 260, 262, 265, 266, 267, 270, 271, 275, 307, 310, 315, 317, 328, 330, 333, 334, 335, 336, 338, 339, 340, 341, 343, 344, 347, 348, 349, 351, 366, 381, 385, 393, 401, 405, 408, 411, 414, 433, 434, 435, 466, 513, 553, 695, 696, 698, 700, 796, 813, 826, 828, 859, 896, 897, 899, 901, 975, 976, 982, 985, 987, 988, 997, 1008, 1012, 1016, 1017, 1019, 1024, 1027, 1028, 1029, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041], "disk": [6, 14, 374, 377, 379, 384, 393, 401, 1017], "arrai": [6, 7, 8, 10, 11, 12, 13, 14, 17, 20, 33, 34, 35, 41, 45, 47, 49, 54, 55, 62, 63, 65, 71, 73, 82, 86, 93, 97, 98, 124, 126, 128, 131, 134, 145, 148, 152, 153, 154, 159, 169, 178, 180, 183, 192, 193, 196, 199, 200, 206, 216, 221, 222, 228, 232, 235, 238, 239, 242, 245, 246, 247, 249, 250, 255, 256, 258, 260, 261, 264, 265, 269, 281, 296, 308, 315, 318, 319, 321, 322, 326, 334, 341, 342, 351, 359, 362, 366, 367, 372, 373, 374, 379, 380, 381, 382, 384, 385, 387, 389, 391, 392, 393, 401, 404, 407, 408, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 488, 489, 490, 491, 492, 494, 495, 496, 498, 499, 500, 501, 502, 504, 506, 507, 508, 509, 510, 511, 513, 517, 521, 522, 525, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 579, 580, 581, 582, 584, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 710, 711, 712, 713, 714, 715, 716, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 920, 921, 924, 925, 934, 935, 936, 937, 938, 940, 941, 942, 949, 950, 951, 956, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 973, 974, 977, 982, 983, 985, 987, 988, 990, 991, 993, 994, 997, 998, 999, 1001, 1002, 1003, 1005, 1011, 1016, 1017, 1018, 1019, 1020, 1021, 1023, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "lfw_peopl": [6, 374, 1017], "min_faces_per_person": [6, 374, 492, 1017], "resiz": [6, 47, 48, 239, 374, 491, 492, 1017], "n_sampl": [6, 7, 10, 15, 25, 26, 27, 28, 33, 34, 35, 38, 39, 40, 42, 43, 44, 45, 49, 50, 53, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 68, 71, 76, 79, 80, 81, 82, 83, 87, 93, 96, 97, 101, 103, 112, 114, 115, 116, 117, 118, 119, 124, 125, 126, 127, 128, 129, 139, 140, 147, 148, 160, 163, 164, 168, 178, 180, 181, 183, 185, 187, 189, 191, 193, 194, 198, 199, 200, 202, 203, 207, 211, 214, 216, 217, 220, 221, 222, 223, 224, 225, 228, 232, 233, 235, 238, 246, 248, 249, 250, 251, 257, 258, 260, 263, 264, 267, 269, 270, 271, 272, 273, 274, 283, 293, 307, 308, 309, 312, 316, 317, 319, 321, 322, 327, 336, 339, 340, 346, 351, 352, 362, 372, 376, 379, 381, 384, 388, 391, 392, 393, 398, 407, 409, 410, 411, 412, 414, 418, 419, 420, 422, 424, 425, 426, 429, 430, 431, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 492, 499, 502, 506, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 526, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 619, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 705, 706, 707, 708, 710, 711, 712, 713, 714, 715, 716, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 767, 768, 769, 770, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 924, 925, 936, 938, 940, 949, 956, 958, 961, 962, 963, 964, 965, 966, 967, 968, 976, 979, 983, 987, 988, 990, 991, 997, 998, 999, 1001, 1002, 1003, 1012, 1017, 1018, 1019, 1020, 1021, 1027, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "w": [6, 12, 14, 17, 31, 35, 41, 43, 46, 49, 59, 65, 102, 105, 148, 163, 198, 203, 216, 235, 236, 245, 246, 247, 250, 251, 271, 302, 318, 319, 342, 343, 346, 353, 362, 367, 374, 376, 385, 401, 407, 408, 412, 414, 415, 419, 424, 430, 435, 463, 467, 470, 472, 480, 481, 482, 521, 536, 538, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 562, 563, 565, 566, 567, 568, 586, 587, 589, 608, 609, 633, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 691, 697, 722, 723, 753, 796, 810, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 841, 842, 845, 846, 849, 850, 856, 857, 892, 894, 895, 899, 900, 901, 902, 904, 905, 907, 908, 909, 910, 933, 938, 983, 987, 991, 992, 997, 999, 1001, 1002, 1017, 1021, 1037, 1041, 1042, 1043, 1044], "info": [6, 43, 72, 96, 169, 170, 235, 258, 376, 378, 383, 393, 415, 494, 943, 953, 1017], "n_featur": [6, 8, 15, 26, 27, 28, 31, 32, 33, 34, 35, 41, 53, 59, 61, 62, 79, 80, 81, 82, 83, 92, 93, 96, 103, 112, 114, 116, 118, 119, 145, 147, 148, 163, 164, 175, 178, 181, 183, 185, 193, 194, 198, 202, 203, 214, 216, 221, 228, 232, 233, 235, 245, 250, 257, 263, 267, 269, 270, 272, 273, 293, 299, 307, 315, 316, 317, 319, 321, 322, 346, 351, 352, 353, 362, 366, 372, 373, 379, 381, 384, 391, 392, 393, 398, 407, 409, 410, 412, 414, 415, 418, 419, 420, 422, 424, 425, 426, 429, 430, 431, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 455, 456, 457, 458, 459, 461, 462, 463, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 487, 488, 489, 490, 492, 499, 502, 506, 507, 510, 513, 514, 517, 519, 521, 522, 524, 526, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 630, 631, 632, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 694, 695, 696, 698, 699, 700, 708, 722, 755, 756, 757, 758, 760, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 789, 790, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 859, 862, 863, 864, 865, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 936, 962, 963, 964, 965, 966, 967, 968, 979, 983, 988, 990, 991, 997, 1001, 1002, 1003, 1012, 1017, 1018, 1020, 1021, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "id": [6, 20, 217, 296, 360, 373, 374, 379, 387, 409, 411, 415, 421, 492, 493, 494, 911, 913, 931, 1017, 1021, 1035, 1036, 1039], "person": [6, 263, 374, 378, 411, 415, 491, 492, 493, 997, 1017, 1035], "target_nam": [6, 20, 31, 53, 91, 100, 104, 168, 208, 221, 247, 254, 261, 269, 270, 286, 311, 329, 351, 357, 372, 374, 486, 487, 489, 490, 491, 492, 494, 495, 498, 500, 501, 502, 503, 508, 711, 987, 1003, 1012, 1017, 1021, 1037], "n_class": [6, 38, 92, 93, 112, 114, 119, 121, 145, 147, 214, 221, 233, 236, 247, 267, 268, 269, 292, 293, 315, 357, 360, 362, 379, 381, 393, 414, 435, 486, 487, 500, 513, 517, 521, 547, 548, 549, 551, 553, 555, 557, 559, 562, 565, 567, 591, 592, 602, 608, 632, 637, 656, 657, 664, 665, 666, 672, 673, 674, 675, 695, 705, 714, 716, 732, 735, 738, 751, 785, 791, 796, 799, 800, 810, 820, 827, 828, 829, 830, 831, 833, 834, 835, 836, 837, 838, 841, 846, 848, 849, 856, 859, 866, 867, 870, 873, 880, 883, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 907, 909, 911, 912, 924, 925, 983, 987, 988, 991, 998, 1001, 1002, 1017, 1032, 1033, 1034, 1036, 1037, 1038, 1044], "1288": [6, 374], "1850": [6, 374], "scaler": [6, 72, 74, 128, 166, 215, 216, 233, 238, 240, 242, 286, 291, 304, 309, 310, 313, 320, 338, 341, 362, 384, 408, 411, 488, 656, 657, 670, 672, 685, 859, 868, 869, 871, 875, 876, 877, 879, 884, 885, 886, 887, 888, 889, 890, 991, 997, 1001, 1008, 1017, 1027, 1032, 1035, 1040], "unlabel": [6, 236, 317, 325, 326, 327, 329, 330, 393, 406, 407, 894, 895, 896, 986, 1012, 1015, 1017, 1019, 1039], "unsupervis": [6, 12, 38, 50, 73, 74, 87, 96, 117, 130, 228, 236, 289, 290, 337, 351, 352, 362, 371, 374, 381, 392, 393, 406, 407, 410, 412, 413, 414, 415, 416, 431, 440, 443, 530, 532, 534, 535, 537, 540, 541, 547, 561, 564, 565, 567, 568, 580, 581, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 626, 628, 632, 633, 636, 637, 638, 639, 640, 675, 796, 799, 800, 802, 810, 818, 823, 826, 841, 842, 845, 847, 848, 849, 850, 855, 862, 863, 864, 865, 868, 869, 871, 872, 873, 874, 876, 877, 878, 879, 880, 891, 892, 896, 903, 984, 987, 993, 1000, 1009, 1012, 1013, 1015, 1017, 1023, 1027, 1030, 1040, 1044], "dimension": [6, 9, 10, 20, 32, 34, 41, 45, 55, 56, 58, 59, 63, 70, 72, 74, 75, 77, 86, 87, 93, 96, 100, 103, 104, 112, 117, 130, 139, 140, 148, 151, 153, 154, 158, 166, 183, 195, 200, 216, 219, 221, 222, 224, 226, 228, 232, 233, 236, 246, 247, 284, 287, 291, 293, 297, 307, 335, 342, 351, 362, 366, 371, 374, 375, 376, 379, 388, 393, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 443, 445, 447, 463, 467, 471, 480, 481, 482, 483, 486, 487, 488, 489, 490, 491, 492, 493, 495, 498, 499, 500, 502, 503, 508, 513, 517, 530, 532, 533, 536, 537, 538, 539, 542, 545, 547, 561, 564, 571, 597, 605, 629, 638, 639, 640, 650, 686, 687, 688, 689, 690, 691, 692, 694, 697, 708, 722, 794, 795, 796, 825, 839, 840, 841, 844, 847, 848, 855, 859, 860, 863, 869, 874, 879, 891, 892, 893, 899, 903, 936, 973, 978, 979, 982, 983, 988, 989, 993, 999, 1000, 1001, 1002, 1003, 1008, 1009, 1011, 1012, 1013, 1015, 1017, 1018, 1020, 1021, 1022, 1023, 1027, 1028, 1029, 1030, 1032, 1033, 1034, 1036, 1039, 1042, 1043], "reduct": [6, 20, 34, 55, 58, 70, 74, 77, 87, 96, 100, 104, 115, 130, 166, 219, 221, 222, 225, 226, 232, 236, 284, 291, 293, 297, 319, 335, 362, 366, 371, 406, 407, 408, 410, 412, 414, 416, 466, 480, 481, 482, 483, 500, 528, 530, 532, 533, 536, 537, 538, 539, 542, 545, 547, 551, 552, 555, 556, 557, 558, 562, 563, 564, 597, 605, 656, 657, 686, 687, 688, 689, 690, 691, 778, 796, 825, 841, 848, 855, 859, 860, 869, 879, 897, 899, 907, 908, 909, 910, 979, 984, 999, 1003, 1007, 1008, 1009, 1011, 1017, 1023, 1028, 1029, 1030, 1033, 1041, 1042, 1043], "top": [6, 12, 14, 15, 17, 18, 35, 38, 40, 42, 43, 44, 45, 46, 52, 63, 65, 72, 92, 98, 110, 117, 118, 121, 132, 135, 169, 199, 201, 210, 214, 228, 238, 239, 245, 247, 248, 251, 257, 261, 269, 270, 288, 305, 307, 311, 316, 322, 325, 326, 338, 342, 351, 362, 377, 379, 381, 385, 391, 404, 405, 407, 412, 413, 414, 485, 585, 586, 589, 597, 723, 753, 791, 911, 913, 976, 979, 983, 985, 995, 1006, 1011, 1017, 1020, 1021, 1041], "t0": [6, 8, 11, 15, 18, 40, 43, 45, 47, 49, 51, 53, 59, 63, 65, 99, 183, 185, 214, 215, 216, 222, 225, 228, 232, 234, 261, 322, 351, 352, 353, 674, 675, 676, 1017], "svd_solver": [6, 71, 96, 103, 322, 403, 412, 533, 539, 1017, 1033], "whiten": [6, 96, 97, 98, 287, 412, 419, 531, 532, 539, 877, 879, 1017, 1031, 1033, 1041, 1042], "done": [6, 8, 9, 11, 13, 15, 18, 20, 49, 51, 53, 54, 99, 145, 148, 156, 169, 170, 175, 178, 183, 185, 203, 216, 234, 235, 250, 258, 261, 264, 269, 283, 308, 317, 351, 352, 353, 362, 367, 373, 377, 379, 381, 383, 386, 387, 388, 391, 393, 398, 407, 409, 411, 412, 414, 439, 440, 443, 448, 450, 470, 480, 481, 482, 483, 487, 533, 559, 560, 580, 604, 605, 606, 626, 628, 630, 632, 641, 642, 643, 657, 738, 794, 795, 796, 810, 815, 816, 863, 877, 972, 976, 977, 980, 983, 984, 987, 989, 990, 991, 997, 1000, 1001, 1002, 1003, 1007, 1012, 1016, 1017, 1019, 1021, 1027, 1029, 1034, 1037, 1039, 1043], "components_": [6, 15, 59, 87, 96, 98, 99, 106, 232, 233, 302, 310, 319, 393, 408, 412, 442, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 541, 542, 637, 848, 855, 891, 892, 979, 999, 1017, 1031, 1033, 1039, 1042], "project": [6, 8, 11, 14, 18, 34, 46, 56, 59, 68, 91, 95, 96, 98, 100, 102, 106, 107, 114, 155, 157, 159, 160, 166, 170, 175, 191, 196, 208, 220, 221, 222, 224, 227, 233, 236, 243, 246, 255, 287, 292, 296, 302, 335, 343, 352, 357, 366, 371, 373, 377, 378, 384, 385, 388, 393, 394, 397, 404, 410, 412, 413, 419, 438, 444, 449, 450, 460, 472, 480, 481, 482, 483, 487, 500, 502, 529, 531, 532, 533, 535, 537, 539, 540, 541, 542, 546, 547, 571, 580, 587, 639, 640, 647, 670, 672, 686, 689, 693, 694, 829, 848, 876, 891, 892, 893, 935, 936, 981, 983, 984, 985, 988, 990, 991, 993, 1000, 1003, 1008, 1011, 1012, 1017, 1020, 1023, 1027, 1028, 1030, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "orthonorm": [6, 388, 935, 979, 1017], "x_train_pca": [6, 1017], "x_test_pca": [6, 101, 1017], "966": 6, "107": [6, 13, 320, 407, 894, 988, 1029], "classifi": [6, 7, 8, 9, 24, 27, 29, 30, 31, 33, 35, 36, 46, 57, 71, 72, 73, 74, 75, 91, 101, 104, 106, 112, 113, 114, 115, 116, 119, 120, 121, 124, 130, 133, 134, 140, 144, 145, 147, 153, 166, 171, 172, 175, 177, 189, 190, 191, 197, 199, 206, 208, 211, 214, 217, 218, 228, 231, 233, 235, 236, 241, 254, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 275, 278, 280, 282, 285, 291, 292, 294, 299, 302, 307, 317, 318, 322, 324, 325, 326, 328, 329, 331, 333, 334, 336, 337, 339, 340, 341, 342, 347, 348, 349, 353, 374, 376, 379, 381, 384, 391, 393, 407, 408, 411, 415, 416, 417, 424, 432, 433, 434, 435, 436, 437, 486, 487, 494, 502, 510, 512, 513, 520, 529, 534, 535, 540, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 559, 561, 562, 564, 565, 566, 567, 568, 591, 592, 600, 604, 608, 620, 627, 629, 630, 631, 647, 656, 657, 664, 666, 669, 670, 671, 672, 673, 674, 695, 696, 698, 700, 701, 705, 706, 707, 709, 710, 711, 716, 718, 723, 724, 726, 727, 729, 731, 732, 735, 736, 737, 738, 739, 740, 751, 753, 779, 780, 781, 784, 785, 786, 791, 793, 796, 799, 800, 802, 810, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 846, 847, 849, 850, 855, 856, 857, 859, 860, 866, 879, 880, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 913, 928, 930, 976, 977, 979, 982, 983, 984, 987, 988, 989, 992, 995, 997, 1000, 1001, 1002, 1003, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1015, 1016, 1017, 1023, 1024, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1044], "1e3": [6, 7, 10, 151, 157, 163, 234, 271, 321, 976, 1017], "1e5": [6, 156, 180, 182, 189, 271, 611, 612, 613, 617, 618, 620, 621, 623, 888, 893, 999, 1017, 1019], "clf": [6, 10, 11, 12, 17, 25, 26, 27, 28, 32, 33, 39, 49, 52, 55, 59, 64, 72, 102, 116, 124, 127, 128, 133, 138, 140, 144, 145, 147, 153, 155, 172, 189, 191, 192, 196, 197, 203, 206, 208, 211, 212, 213, 215, 223, 229, 230, 233, 236, 242, 249, 257, 261, 265, 266, 268, 271, 272, 286, 289, 290, 291, 294, 299, 307, 310, 315, 316, 317, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 351, 356, 357, 360, 366, 374, 392, 393, 401, 408, 411, 414, 416, 436, 547, 548, 551, 553, 555, 557, 559, 561, 562, 565, 591, 592, 595, 630, 632, 636, 637, 638, 639, 640, 642, 643, 646, 650, 656, 657, 658, 659, 660, 664, 666, 667, 670, 671, 672, 673, 674, 675, 678, 695, 696, 698, 700, 785, 796, 799, 800, 810, 827, 828, 829, 831, 834, 835, 836, 837, 838, 845, 846, 856, 899, 901, 903, 904, 907, 911, 913, 977, 979, 983, 987, 988, 990, 991, 993, 994, 1001, 1002, 1003, 1012, 1016, 1017, 1021], "class_weight": [6, 340, 393, 406, 555, 559, 562, 656, 657, 664, 666, 672, 673, 674, 675, 899, 901, 904, 906, 907, 909, 976, 1001, 1002, 1017, 1027, 1028, 1030, 1031, 1032, 1033, 1035, 1041, 1042], "n_iter": [6, 18, 72, 151, 207, 220, 221, 225, 261, 268, 283, 302, 340, 381, 385, 392, 419, 452, 476, 530, 531, 542, 543, 544, 545, 642, 643, 644, 645, 650, 651, 658, 659, 660, 661, 679, 680, 681, 682, 683, 684, 685, 690, 692, 799, 800, 808, 810, 855, 857, 935, 936, 976, 1001, 1017, 1028, 1033, 1034, 1035, 1039, 1041, 1042, 1043], "found": [6, 20, 21, 22, 106, 119, 147, 151, 155, 157, 159, 203, 236, 258, 261, 262, 263, 310, 315, 318, 320, 321, 338, 353, 366, 368, 373, 376, 378, 379, 381, 391, 393, 394, 404, 407, 410, 411, 412, 414, 415, 417, 432, 439, 442, 443, 457, 470, 555, 556, 557, 558, 562, 563, 586, 588, 608, 609, 626, 634, 645, 649, 651, 653, 659, 661, 663, 669, 670, 672, 674, 676, 685, 686, 710, 717, 796, 799, 800, 810, 836, 841, 842, 848, 870, 872, 873, 907, 908, 909, 910, 914, 916, 971, 975, 976, 979, 983, 984, 986, 988, 989, 990, 991, 997, 1001, 1002, 1003, 1007, 1012, 1017, 1021, 1027, 1030, 1031, 1034, 1035, 1037, 1041, 1044], "grid": [6, 8, 10, 11, 21, 26, 27, 28, 43, 55, 62, 72, 73, 74, 75, 79, 83, 121, 130, 143, 145, 147, 155, 166, 168, 169, 170, 188, 217, 225, 229, 233, 234, 235, 239, 245, 250, 253, 257, 259, 261, 264, 265, 267, 272, 276, 281, 285, 287, 288, 296, 302, 307, 308, 310, 335, 337, 338, 344, 345, 351, 374, 381, 386, 391, 393, 402, 408, 411, 413, 414, 415, 446, 459, 462, 470, 496, 500, 513, 520, 629, 630, 631, 645, 648, 651, 652, 654, 657, 659, 661, 674, 711, 725, 739, 782, 785, 796, 799, 800, 807, 810, 812, 825, 826, 859, 904, 980, 982, 987, 990, 994, 1007, 1008, 1012, 1013, 1015, 1017, 1019, 1023, 1027, 1030, 1031, 1032, 1034, 1035, 1041, 1043, 1044], "search": [6, 47, 55, 72, 73, 74, 75, 125, 143, 145, 147, 148, 151, 166, 217, 229, 234, 235, 250, 253, 259, 261, 264, 265, 267, 272, 276, 281, 283, 285, 287, 302, 307, 320, 338, 345, 351, 362, 376, 377, 379, 381, 391, 393, 402, 407, 408, 411, 414, 415, 416, 418, 441, 446, 448, 450, 455, 456, 459, 462, 469, 470, 476, 500, 513, 520, 555, 556, 557, 558, 562, 563, 564, 577, 597, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 626, 651, 674, 686, 687, 690, 691, 711, 725, 782, 785, 796, 799, 800, 807, 808, 810, 812, 825, 826, 839, 840, 841, 842, 843, 845, 847, 849, 850, 851, 852, 853, 859, 904, 907, 908, 909, 910, 941, 975, 980, 982, 984, 987, 990, 991, 1001, 1003, 1006, 1007, 1008, 1012, 1013, 1015, 1017, 1023, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1039, 1041, 1042, 1044], "best_estimator_": [6, 55, 74, 75, 79, 103, 234, 250, 261, 264, 287, 796, 799, 800, 810, 976, 1016, 1017, 1034], "76823": 6, "03433306456": 6, "0034189458230957995": 6, "from_estim": [6, 9, 26, 28, 31, 32, 35, 57, 114, 117, 128, 129, 133, 170, 182, 191, 208, 213, 234, 239, 241, 254, 257, 262, 263, 267, 270, 275, 286, 291, 294, 310, 315, 316, 317, 318, 320, 321, 322, 334, 335, 336, 337, 339, 340, 342, 357, 386, 405, 631, 716, 724, 779, 781, 784, 785, 786, 982, 987, 994, 1017, 1024, 1040, 1041, 1042, 1043, 1044, 1045], "display_label": [6, 254, 695, 1017, 1039], "xticks_rot": [6, 695, 1017], "vertic": [6, 18, 61, 124, 172, 188, 232, 233, 264, 281, 305, 308, 343, 345, 393, 404, 407, 412, 513, 695, 778, 1017], "tight_layout": [6, 8, 26, 28, 32, 41, 53, 56, 66, 74, 76, 87, 96, 97, 98, 106, 112, 114, 119, 121, 123, 126, 130, 132, 134, 153, 155, 160, 163, 168, 169, 171, 172, 178, 179, 183, 189, 197, 199, 207, 210, 214, 217, 220, 233, 238, 255, 256, 272, 281, 283, 285, 295, 306, 307, 308, 309, 310, 315, 319, 336, 352, 356, 357, 1017], "047": [6, 385], "precis": [6, 13, 26, 33, 71, 76, 83, 96, 145, 157, 158, 166, 175, 229, 253, 254, 258, 276, 302, 305, 325, 326, 379, 381, 393, 404, 405, 406, 407, 409, 412, 414, 441, 467, 468, 469, 470, 471, 472, 473, 474, 476, 502, 521, 530, 532, 539, 542, 642, 643, 644, 646, 648, 649, 650, 652, 653, 654, 667, 670, 672, 678, 680, 681, 685, 697, 698, 704, 705, 706, 711, 724, 726, 727, 728, 736, 760, 779, 780, 781, 784, 785, 794, 795, 825, 828, 839, 840, 845, 860, 879, 883, 899, 904, 911, 913, 936, 981, 983, 990, 991, 1002, 1008, 1017, 1021, 1027, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044], "recal": [6, 26, 33, 71, 83, 101, 145, 166, 229, 253, 258, 276, 278, 302, 325, 326, 379, 393, 407, 502, 602, 698, 704, 705, 706, 710, 711, 724, 726, 727, 728, 779, 780, 781, 784, 785, 825, 828, 860, 879, 883, 899, 983, 1003, 1008, 1017, 1021, 1030, 1031, 1034, 1036, 1037, 1039, 1040, 1041, 1043, 1044], "f1": [6, 26, 33, 71, 145, 258, 302, 325, 326, 329, 411, 711, 726, 727, 735, 780, 987, 988, 1017, 1021, 1031, 1043], "ariel": [6, 374, 1027, 1033], "sharon": [6, 374], "69": [6, 13, 190, 310, 326, 407, 469, 470, 605, 606, 753, 987, 997, 1019], "colin": [6, 374, 1033], "powel": [6, 374], "87": [6, 33, 71, 160, 326, 595, 665, 774, 785, 796, 875, 887, 987, 1021], "donald": [6, 374, 407, 722, 977], "rumsfeld": [6, 374], "63": [6, 357, 376, 414, 555, 556, 563, 564, 697, 723, 796, 810, 909, 910, 987], "georg": [6, 374, 407, 1033, 1039, 1040, 1041, 1042], "bush": [6, 374], "95": [6, 13, 15, 33, 45, 53, 58, 68, 92, 102, 121, 125, 158, 169, 178, 199, 201, 206, 217, 247, 248, 251, 258, 260, 261, 288, 296, 307, 311, 319, 326, 338, 362, 414, 525, 630, 631, 634, 645, 659, 745, 896, 983, 987, 988, 1000, 1021, 1030], "91": [6, 33, 52, 156, 238, 302, 325, 326, 414, 982, 1017, 1021], "146": [6, 414], "gerhard": [6, 374], "schroeder": [6, 374], "hugo": [6, 374, 1033, 1038, 1039, 1040, 1041], "chavez": [6, 374], "90": [6, 10, 13, 15, 33, 75, 105, 106, 124, 125, 126, 145, 156, 172, 179, 190, 196, 198, 201, 206, 217, 238, 245, 269, 271, 307, 311, 321, 325, 326, 362, 366, 379, 385, 411, 561, 778, 796, 823, 828, 880, 982, 987, 1017, 1021, 1042, 1043], "toni": [6, 374, 561, 879, 993, 1040, 1041], "blair": [6, 374], "93": [6, 13, 33, 148, 199, 214, 242, 326, 351, 376, 774, 785, 796, 823, 907, 982, 987, 1017, 1021], "83": [6, 31, 35, 40, 325, 376, 381, 692, 705, 783, 982, 987, 1017, 1021, 1030], "322": [6, 92, 469, 470], "macro": [6, 33, 71, 145, 258, 302, 315, 325, 326, 374, 411, 705, 711, 726, 727, 735, 780, 781, 784, 785, 987, 1021, 1027, 1035, 1043], "avg": [6, 33, 71, 145, 258, 302, 325, 326, 567, 702, 711, 987, 1017, 1021, 1043], "weight": [6, 11, 13, 14, 15, 20, 25, 33, 55, 71, 106, 125, 133, 134, 140, 144, 145, 155, 156, 164, 166, 169, 177, 183, 188, 190, 199, 203, 204, 206, 209, 210, 211, 213, 214, 215, 217, 218, 235, 240, 245, 249, 258, 263, 267, 269, 286, 295, 298, 299, 300, 302, 303, 310, 312, 315, 318, 322, 325, 326, 333, 338, 340, 342, 343, 344, 346, 347, 349, 351, 352, 353, 360, 362, 375, 376, 388, 391, 393, 407, 409, 410, 412, 413, 416, 418, 424, 430, 435, 438, 441, 442, 444, 445, 447, 451, 457, 458, 461, 462, 463, 465, 467, 472, 480, 481, 482, 494, 513, 522, 536, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 584, 587, 588, 589, 591, 595, 600, 601, 608, 609, 626, 630, 631, 632, 633, 635, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 685, 687, 691, 695, 696, 698, 700, 701, 705, 706, 707, 710, 711, 714, 716, 718, 719, 720, 721, 723, 724, 725, 726, 727, 731, 732, 733, 735, 736, 737, 738, 740, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 753, 755, 756, 766, 779, 780, 781, 782, 784, 785, 786, 787, 788, 791, 792, 793, 794, 795, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 855, 856, 857, 858, 861, 864, 878, 879, 880, 894, 895, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 924, 925, 938, 962, 968, 977, 978, 983, 984, 986, 987, 989, 990, 991, 992, 994, 997, 1000, 1001, 1002, 1003, 1007, 1008, 1012, 1019, 1021, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "85": [6, 17, 18, 33, 51, 56, 71, 99, 145, 214, 217, 258, 271, 302, 326, 362, 414, 437, 496, 498, 553, 554, 595, 650, 656, 742, 750, 785, 796, 823, 987, 988, 1017, 1027], "plot_galleri": [6, 96, 1017], "n_row": [6, 20, 96, 404, 422, 449, 451, 509, 511, 1017], "n_col": [6, 20, 96, 237, 422, 449, 451, 509, 511, 630, 1017], "portrait": [6, 412, 1017], "figur": [6, 7, 8, 10, 12, 14, 17, 25, 26, 27, 28, 32, 38, 39, 40, 41, 43, 45, 46, 47, 48, 49, 51, 52, 53, 55, 57, 59, 60, 62, 63, 64, 65, 66, 68, 79, 83, 86, 90, 91, 92, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 112, 113, 114, 115, 124, 125, 126, 127, 130, 131, 135, 138, 140, 143, 144, 147, 152, 153, 154, 155, 158, 159, 164, 169, 170, 171, 172, 178, 183, 184, 189, 192, 193, 196, 198, 200, 201, 205, 210, 214, 215, 216, 222, 223, 224, 228, 232, 233, 234, 236, 237, 239, 245, 247, 248, 251, 254, 259, 264, 265, 274, 288, 292, 293, 296, 299, 302, 305, 307, 308, 312, 315, 317, 325, 326, 327, 336, 338, 343, 357, 358, 359, 379, 407, 413, 414, 415, 417, 436, 629, 630, 695, 696, 698, 699, 700, 802, 818, 913, 976, 980, 983, 986, 987, 990, 991, 994, 995, 1001, 1002, 1003, 1016, 1017, 1019, 1020, 1040], "subplots_adjust": [6, 7, 14, 15, 40, 43, 45, 46, 51, 52, 55, 63, 65, 81, 83, 92, 93, 98, 99, 105, 114, 115, 132, 169, 198, 199, 214, 217, 228, 236, 245, 247, 248, 251, 255, 271, 273, 288, 296, 299, 302, 307, 317, 326, 335, 338, 1017], "bottom": [6, 8, 12, 14, 15, 35, 38, 40, 43, 45, 46, 52, 54, 63, 65, 92, 93, 123, 130, 135, 199, 210, 228, 245, 247, 248, 251, 257, 260, 271, 288, 305, 326, 328, 338, 379, 405, 407, 413, 585, 911, 981, 983, 987, 995, 1007, 1017, 1020], "left": [6, 7, 12, 14, 15, 17, 25, 34, 35, 40, 43, 45, 46, 52, 56, 63, 65, 73, 76, 82, 83, 92, 93, 98, 99, 112, 115, 117, 118, 119, 122, 125, 132, 134, 154, 160, 164, 169, 172, 184, 192, 199, 200, 201, 203, 210, 212, 213, 216, 217, 228, 232, 236, 238, 239, 245, 247, 248, 251, 256, 257, 258, 259, 261, 269, 270, 272, 286, 288, 289, 296, 299, 302, 305, 319, 321, 322, 326, 337, 338, 342, 360, 374, 379, 381, 383, 404, 407, 410, 411, 413, 414, 415, 417, 424, 430, 444, 470, 480, 481, 482, 483, 491, 496, 547, 553, 554, 555, 556, 557, 558, 559, 560, 562, 563, 564, 585, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 625, 633, 637, 641, 649, 653, 794, 795, 796, 799, 800, 803, 810, 872, 879, 907, 908, 909, 910, 911, 923, 936, 958, 961, 976, 979, 981, 983, 985, 987, 989, 994, 999, 1001, 1003, 1016, 1017, 1019, 1020, 1034, 1036, 1041], "01": [6, 8, 10, 13, 14, 16, 17, 29, 36, 41, 45, 52, 63, 69, 77, 86, 96, 98, 99, 115, 124, 126, 129, 130, 136, 148, 156, 160, 161, 169, 170, 180, 183, 190, 206, 211, 212, 217, 218, 220, 221, 226, 228, 232, 233, 234, 238, 239, 243, 247, 251, 252, 254, 259, 260, 261, 265, 267, 268, 269, 276, 282, 288, 297, 300, 302, 305, 313, 316, 322, 323, 331, 340, 349, 352, 358, 359, 361, 374, 376, 384, 407, 416, 447, 469, 513, 530, 537, 541, 543, 593, 594, 596, 603, 640, 644, 652, 656, 676, 694, 713, 796, 810, 893, 956, 983, 987, 991, 997, 999, 1001, 1008, 1017, 1021], "right": [6, 7, 11, 12, 14, 15, 17, 32, 35, 40, 43, 44, 45, 46, 52, 54, 61, 63, 65, 80, 81, 83, 91, 92, 93, 98, 99, 101, 103, 105, 112, 114, 115, 116, 125, 126, 127, 134, 144, 151, 154, 164, 172, 189, 200, 201, 202, 203, 205, 206, 209, 210, 228, 231, 232, 235, 245, 247, 248, 250, 251, 255, 256, 260, 263, 267, 270, 271, 273, 288, 296, 299, 302, 305, 307, 310, 321, 322, 326, 338, 340, 342, 346, 348, 351, 357, 360, 362, 379, 391, 394, 404, 407, 410, 412, 413, 414, 417, 462, 480, 481, 482, 483, 532, 539, 542, 555, 556, 557, 558, 559, 560, 562, 563, 564, 585, 610, 611, 612, 613, 614, 617, 618, 619, 620, 621, 622, 623, 625, 633, 674, 676, 864, 907, 908, 909, 910, 911, 923, 936, 976, 979, 981, 983, 985, 987, 989, 990, 994, 999, 1001, 1002, 1003, 1006, 1007, 1011, 1013, 1017, 1019, 1020, 1029, 1035, 1041, 1043, 1044], "99": [6, 13, 26, 33, 45, 52, 63, 96, 217, 228, 232, 238, 245, 247, 258, 261, 305, 326, 367, 372, 376, 383, 411, 414, 415, 490, 645, 659, 669, 785, 846, 956, 982, 987, 997, 1001, 1017, 1023, 1029], "hspace": [6, 14, 15, 45, 46, 63, 96, 217, 228, 245, 247, 248, 251, 288, 317, 326, 335, 1017], "grai": [6, 14, 47, 48, 51, 52, 54, 96, 99, 127, 148, 197, 199, 217, 232, 236, 237, 267, 301, 376, 412, 491, 492, 500, 519, 1017, 1020, 1038], "ytick": [6, 11, 31, 35, 41, 45, 47, 51, 52, 53, 59, 60, 63, 83, 86, 99, 126, 144, 153, 154, 155, 159, 182, 189, 195, 212, 228, 236, 246, 247, 248, 251, 255, 274, 287, 296, 302, 325, 338, 343, 344, 351, 1016, 1017], "portion": [6, 8, 82, 123, 148, 269, 366, 374, 376, 379, 385, 393, 785, 820, 837, 976, 986, 990, 1017, 1021], "pred_nam": [6, 1017], "rsplit": [6, 18, 261, 1017], "true_nam": [6, 1017], "ntrue": [6, 325, 326, 1017], "prediction_titl": [6, 1017], "signif": [6, 979, 1017], "eigenface_titl": [6, 1017], "convolut": [6, 159, 1017], "network": [6, 238, 301, 366, 367, 368, 373, 374, 393, 394, 401, 407, 412, 414, 419, 494, 531, 533, 565, 566, 694, 738, 856, 857, 983, 985, 987, 1001, 1003, 1006, 1009, 1017, 1022, 1023, 1027, 1041], "famili": [6, 366, 368, 393, 407, 410, 412, 415, 416, 590, 593, 594, 596, 597, 598, 604, 856, 857, 875, 887, 983, 997, 1001, 1017, 1019, 1031, 1041], "outsid": [6, 9, 20, 121, 200, 201, 231, 242, 415, 444, 633, 878, 993, 1017, 1035], "scope": [6, 20, 366, 368, 379, 391, 415, 1006, 1007, 1017], "scikit": [6, 8, 10, 12, 13, 15, 17, 18, 32, 33, 51, 56, 71, 72, 110, 116, 117, 118, 119, 122, 129, 132, 145, 147, 148, 160, 163, 164, 166, 169, 170, 171, 172, 175, 180, 187, 188, 199, 200, 201, 217, 227, 230, 238, 239, 240, 241, 242, 253, 257, 265, 269, 272, 276, 278, 281, 283, 285, 288, 290, 311, 314, 323, 342, 351, 352, 356, 357, 362, 367, 368, 371, 373, 374, 375, 376, 378, 379, 382, 385, 386, 387, 388, 392, 393, 398, 400, 401, 403, 404, 405, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 421, 422, 424, 425, 426, 427, 429, 430, 431, 436, 441, 444, 445, 448, 455, 462, 463, 465, 466, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 510, 513, 519, 522, 536, 539, 559, 560, 562, 563, 565, 574, 579, 580, 581, 583, 584, 587, 597, 600, 609, 624, 626, 628, 630, 632, 636, 638, 644, 646, 650, 656, 667, 678, 686, 698, 699, 700, 715, 729, 739, 745, 775, 776, 777, 785, 792, 796, 797, 798, 799, 800, 801, 802, 810, 813, 814, 815, 816, 817, 818, 821, 822, 825, 827, 828, 841, 843, 859, 860, 862, 864, 866, 869, 871, 872, 873, 874, 878, 879, 880, 883, 896, 897, 899, 904, 907, 908, 930, 931, 953, 954, 955, 976, 977, 983, 984, 986, 987, 988, 989, 990, 991, 992, 993, 997, 1000, 1001, 1002, 1003, 1005, 1008, 1010, 1015, 1016, 1017, 1019, 1020, 1023, 1024, 1025, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "librari": [6, 260, 318, 320, 358, 362, 371, 373, 374, 377, 378, 379, 380, 385, 391, 392, 393, 397, 403, 656, 899, 900, 901, 902, 904, 905, 955, 983, 987, 1002, 1003, 1006, 1007, 1011, 1017, 1021, 1025, 1030, 1034, 1035, 1036, 1037, 1038, 1040, 1044], "reader": [6, 43, 318, 368, 379, 1017], "pytorch": [6, 391, 1006, 1007, 1017, 1043, 1044], "tensorflow": [6, 391, 1006, 1017], "implement": [6, 7, 13, 14, 17, 18, 47, 57, 82, 96, 118, 164, 172, 175, 183, 184, 188, 213, 217, 220, 228, 234, 235, 258, 260, 269, 278, 281, 283, 285, 288, 308, 315, 316, 317, 318, 319, 321, 351, 353, 366, 367, 368, 373, 374, 376, 377, 379, 380, 381, 384, 385, 387, 388, 393, 397, 398, 401, 403, 404, 406, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 435, 440, 441, 442, 444, 445, 446, 447, 448, 473, 491, 494, 506, 530, 531, 532, 533, 534, 536, 539, 540, 541, 551, 552, 553, 555, 556, 559, 560, 561, 565, 570, 580, 586, 587, 589, 591, 595, 599, 608, 609, 630, 631, 638, 639, 643, 644, 651, 655, 656, 657, 661, 662, 666, 669, 670, 672, 673, 674, 675, 676, 682, 683, 684, 685, 686, 689, 690, 693, 705, 709, 718, 732, 735, 739, 775, 779, 785, 786, 794, 796, 799, 800, 802, 810, 814, 815, 818, 820, 821, 822, 823, 824, 826, 827, 828, 829, 831, 832, 834, 835, 836, 837, 838, 841, 842, 844, 847, 849, 850, 855, 856, 857, 859, 881, 889, 890, 896, 899, 900, 901, 902, 903, 904, 905, 935, 936, 944, 947, 952, 955, 956, 958, 976, 977, 979, 981, 983, 984, 985, 986, 988, 989, 991, 992, 993, 997, 999, 1000, 1003, 1004, 1006, 1007, 1009, 1011, 1012, 1017, 1018, 1019, 1020, 1021, 1023, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "308": [6, 16, 633, 1008], "plot_face_recognit": [6, 16, 1008], "quantiz": [6, 37, 47, 59, 69, 99, 166, 373, 374, 407, 441, 445, 447, 504, 776, 864, 961, 997, 1008], "k": [6, 11, 12, 15, 17, 18, 20, 25, 27, 31, 32, 37, 38, 39, 41, 43, 47, 50, 51, 54, 56, 57, 61, 64, 66, 69, 75, 76, 81, 91, 92, 93, 96, 99, 102, 103, 112, 114, 121, 125, 128, 130, 131, 133, 134, 138, 140, 144, 145, 148, 152, 154, 155, 159, 160, 164, 166, 169, 170, 171, 172, 179, 181, 182, 184, 193, 196, 201, 203, 211, 213, 232, 234, 236, 237, 238, 245, 248, 256, 260, 261, 263, 264, 269, 270, 273, 283, 285, 288, 289, 290, 291, 292, 294, 295, 296, 306, 307, 308, 309, 312, 315, 319, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 350, 351, 353, 354, 360, 362, 367, 373, 374, 376, 379, 387, 388, 391, 393, 398, 403, 404, 405, 406, 408, 409, 410, 412, 413, 414, 415, 416, 417, 419, 438, 441, 444, 445, 446, 447, 448, 449, 450, 451, 457, 458, 460, 467, 470, 486, 500, 502, 504, 510, 521, 529, 535, 539, 542, 543, 544, 547, 548, 551, 553, 555, 556, 557, 579, 587, 588, 589, 590, 592, 593, 594, 596, 597, 598, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 629, 637, 638, 646, 648, 649, 651, 652, 653, 654, 656, 657, 661, 662, 663, 664, 665, 667, 677, 678, 680, 681, 682, 683, 684, 686, 689, 693, 694, 702, 703, 706, 715, 723, 734, 740, 753, 755, 756, 758, 763, 766, 771, 772, 773, 774, 776, 790, 791, 792, 794, 795, 797, 801, 803, 804, 805, 808, 811, 812, 814, 815, 817, 823, 834, 839, 840, 841, 842, 843, 844, 845, 847, 849, 850, 851, 852, 853, 860, 864, 865, 866, 870, 871, 872, 874, 875, 879, 887, 892, 906, 914, 922, 931, 936, 961, 976, 977, 979, 980, 981, 983, 984, 985, 986, 989, 991, 992, 993, 995, 1000, 1001, 1002, 1003, 1006, 1008, 1016, 1022, 1023, 1027, 1028, 1029, 1030, 1033, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1044], "spars": [6, 7, 8, 12, 14, 18, 20, 31, 35, 40, 41, 55, 56, 58, 71, 78, 79, 80, 82, 84, 95, 97, 107, 117, 130, 166, 168, 177, 178, 184, 187, 188, 191, 193, 194, 198, 215, 218, 232, 234, 254, 261, 267, 283, 300, 302, 316, 320, 329, 350, 353, 354, 360, 366, 371, 373, 374, 375, 379, 381, 382, 383, 384, 391, 392, 393, 407, 408, 414, 415, 417, 418, 422, 429, 436, 438, 440, 441, 442, 444, 445, 447, 448, 449, 450, 451, 455, 457, 458, 460, 461, 462, 463, 465, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 485, 486, 487, 494, 495, 501, 506, 521, 522, 524, 525, 526, 527, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 551, 552, 553, 554, 555, 556, 557, 558, 561, 562, 563, 564, 565, 566, 567, 568, 569, 579, 580, 583, 584, 586, 587, 588, 589, 591, 592, 601, 602, 603, 604, 605, 606, 607, 627, 628, 629, 631, 636, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 689, 690, 691, 693, 694, 695, 696, 698, 699, 700, 701, 710, 711, 712, 726, 727, 728, 731, 735, 736, 737, 751, 752, 757, 758, 760, 761, 763, 764, 765, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 780, 781, 782, 784, 789, 790, 793, 796, 799, 800, 810, 817, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 838, 841, 842, 843, 845, 846, 847, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 862, 863, 864, 866, 868, 869, 870, 871, 872, 874, 876, 877, 878, 879, 881, 882, 883, 884, 886, 888, 889, 890, 891, 892, 893, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 915, 917, 918, 919, 920, 925, 933, 936, 937, 940, 941, 942, 950, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 973, 977, 980, 983, 984, 985, 987, 988, 990, 1000, 1002, 1003, 1007, 1008, 1009, 1019, 1020, 1021, 1022, 1023, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045], "demonstr": [7, 13, 20, 21, 22, 26, 33, 37, 41, 44, 56, 62, 69, 71, 73, 90, 112, 116, 123, 126, 145, 146, 159, 160, 166, 172, 200, 201, 235, 241, 242, 247, 251, 253, 256, 263, 266, 269, 274, 276, 285, 288, 295, 304, 306, 307, 309, 312, 313, 317, 324, 326, 327, 330, 331, 336, 342, 351, 352, 353, 362, 368, 374, 375, 379, 384, 391, 398, 403, 407, 411, 414, 445, 500, 510, 518, 695, 701, 711, 739, 795, 796, 864, 895, 907, 976, 977, 981, 987, 988, 989, 990, 997, 1000, 1003, 1005, 1008], "diabet": [7, 126, 135, 137, 141, 147, 148, 164, 166, 186, 187, 188, 195, 196, 255, 256, 265, 273, 372, 414, 499, 650, 651, 796, 801, 820, 821, 822, 995, 1008, 1012, 1016, 1023], "regress": [7, 10, 14, 26, 28, 31, 46, 55, 70, 72, 73, 77, 81, 82, 85, 88, 91, 97, 98, 99, 104, 106, 111, 112, 115, 117, 118, 119, 120, 123, 124, 127, 131, 132, 136, 139, 148, 150, 152, 160, 161, 163, 164, 166, 168, 169, 170, 171, 172, 177, 181, 183, 184, 185, 186, 189, 193, 194, 196, 200, 202, 203, 204, 205, 208, 210, 215, 218, 223, 227, 229, 237, 238, 239, 240, 242, 243, 256, 259, 268, 271, 272, 273, 274, 281, 284, 286, 291, 294, 297, 300, 301, 302, 305, 306, 309, 310, 312, 317, 318, 319, 320, 322, 333, 334, 335, 346, 347, 349, 351, 355, 356, 360, 361, 367, 368, 371, 372, 374, 376, 379, 381, 384, 387, 388, 391, 392, 393, 402, 405, 409, 410, 411, 412, 416, 430, 435, 462, 463, 472, 482, 487, 488, 490, 494, 499, 500, 502, 503, 510, 514, 515, 516, 522, 526, 529, 533, 535, 537, 539, 540, 541, 543, 544, 546, 550, 551, 552, 553, 554, 555, 556, 557, 558, 560, 562, 563, 564, 565, 568, 569, 590, 591, 592, 593, 594, 595, 596, 597, 598, 602, 603, 604, 607, 608, 609, 612, 613, 620, 621, 623, 629, 630, 631, 632, 633, 635, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 692, 699, 704, 719, 720, 721, 725, 738, 739, 742, 743, 744, 745, 746, 747, 748, 749, 750, 782, 787, 788, 796, 799, 800, 802, 810, 818, 822, 823, 825, 826, 830, 832, 833, 841, 842, 847, 849, 850, 856, 857, 859, 860, 863, 864, 866, 872, 873, 874, 876, 879, 880, 883, 888, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 911, 913, 919, 922, 924, 940, 976, 977, 979, 982, 984, 994, 995, 997, 998, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1015, 1018, 1023, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044], "patient": [7, 135, 148, 164, 376, 387, 411, 983, 1019], "diseas": [7, 135, 148, 164, 263, 376, 710, 987, 1019], "newsgroup": [7, 15, 20, 232, 261, 329, 352, 353, 372, 404, 415, 486, 487, 1013, 1023], "post": [7, 15, 20, 71, 166, 319, 351, 352, 353, 355, 360, 361, 366, 374, 378, 379, 383, 384, 392, 407, 446, 486, 487, 498, 710, 825, 907, 987, 1003, 1008, 1010, 1011, 1021, 1038], "about": [7, 11, 30, 45, 54, 58, 63, 71, 87, 90, 121, 145, 160, 166, 168, 169, 172, 203, 216, 228, 235, 257, 258, 260, 262, 267, 281, 288, 310, 315, 317, 318, 319, 320, 321, 326, 351, 353, 360, 362, 366, 367, 372, 374, 377, 378, 379, 383, 384, 385, 392, 393, 394, 401, 406, 411, 412, 415, 417, 436, 490, 492, 493, 494, 495, 498, 499, 500, 502, 503, 508, 513, 559, 560, 591, 592, 605, 606, 612, 631, 638, 674, 676, 740, 796, 802, 810, 818, 828, 878, 920, 977, 983, 984, 986, 988, 990, 993, 994, 997, 998, 1000, 1002, 1003, 1006, 1010, 1011, 1012, 1013, 1019, 1021, 1032, 1033, 1043], "sgdclassifi": [7, 8, 206, 207, 208, 209, 210, 211, 212, 233, 268, 329, 340, 351, 362, 366, 368, 385, 393, 405, 406, 415, 636, 638, 639, 640, 644, 656, 664, 666, 899, 904, 979, 983, 988, 1001, 1002, 1021, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1038, 1040, 1041, 1042, 1043, 1044], "stochast": [7, 59, 123, 124, 127, 139, 166, 175, 177, 187, 188, 206, 218, 222, 224, 228, 233, 289, 291, 292, 298, 301, 303, 318, 336, 337, 407, 412, 414, 460, 486, 494, 500, 501, 502, 512, 520, 534, 542, 557, 558, 569, 602, 625, 629, 637, 656, 657, 666, 670, 672, 674, 675, 676, 677, 685, 686, 687, 688, 690, 825, 848, 855, 856, 857, 860, 869, 903, 935, 936, 961, 976, 990, 991, 993, 1008, 1009, 1022, 1023, 1027, 1028, 1031, 1032, 1034, 1036, 1038], "gradient": [7, 13, 47, 67, 72, 111, 112, 116, 117, 119, 120, 129, 132, 135, 136, 156, 157, 158, 166, 171, 172, 177, 179, 187, 188, 201, 218, 223, 228, 233, 259, 261, 263, 278, 289, 300, 305, 309, 311, 322, 336, 337, 345, 393, 406, 407, 417, 450, 460, 464, 465, 486, 488, 494, 499, 501, 518, 551, 552, 557, 558, 559, 560, 562, 563, 569, 584, 608, 609, 610, 611, 612, 613, 614, 617, 618, 619, 620, 621, 622, 623, 629, 632, 633, 637, 646, 647, 656, 657, 666, 667, 670, 672, 674, 675, 676, 678, 685, 690, 692, 693, 738, 739, 745, 747, 796, 799, 800, 801, 822, 825, 855, 856, 857, 860, 872, 873, 903, 961, 984, 987, 990, 991, 992, 993, 1006, 1008, 1009, 1023, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1036, 1037, 1040, 1042, 1044], "descent": [7, 14, 123, 124, 166, 177, 184, 187, 218, 228, 233, 289, 318, 336, 337, 412, 414, 469, 470, 476, 486, 494, 501, 529, 535, 536, 537, 538, 540, 541, 543, 544, 545, 546, 569, 629, 637, 644, 645, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 666, 670, 672, 674, 675, 676, 679, 680, 681, 682, 685, 692, 825, 856, 857, 860, 899, 903, 961, 984, 991, 993, 1002, 1008, 1009, 1019, 1023, 1027, 1030, 1031, 1032, 1034, 1036, 1038, 1040, 1041, 1042], "nusvr": [7, 366, 905, 1002, 1029, 1035, 1037, 1038, 1039, 1041, 1042], "nu": [7, 9, 11, 160, 213, 228, 337, 366, 414, 417, 617, 675, 901, 902, 903, 993, 1001, 1002, 1038, 1042], "vector": [7, 8, 9, 10, 12, 15, 17, 20, 21, 27, 28, 31, 33, 37, 41, 49, 69, 73, 90, 96, 98, 99, 144, 151, 159, 180, 186, 203, 204, 211, 215, 233, 234, 241, 258, 260, 261, 265, 289, 302, 305, 330, 334, 335, 338, 339, 340, 341, 342, 343, 346, 348, 349, 352, 366, 368, 374, 384, 385, 388, 391, 393, 404, 405, 407, 409, 410, 411, 412, 414, 417, 418, 419, 435, 441, 442, 443, 445, 447, 448, 449, 451, 462, 463, 465, 466, 480, 481, 482, 483, 485, 487, 495, 507, 510, 519, 522, 529, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 547, 548, 549, 550, 565, 566, 567, 568, 579, 580, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 615, 616, 617, 618, 620, 621, 623, 629, 636, 638, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 666, 670, 671, 672, 673, 674, 675, 676, 684, 685, 686, 687, 689, 690, 691, 693, 697, 717, 732, 760, 765, 766, 767, 768, 770, 771, 772, 774, 775, 796, 799, 800, 810, 823, 826, 827, 828, 834, 835, 836, 837, 838, 841, 842, 843, 845, 846, 847, 849, 850, 851, 856, 857, 864, 866, 871, 879, 883, 886, 897, 899, 900, 901, 902, 903, 904, 905, 906, 919, 933, 935, 936, 950, 956, 976, 979, 980, 981, 983, 984, 985, 987, 988, 989, 991, 992, 993, 997, 1001, 1003, 1008, 1009, 1012, 1015, 1018, 1021, 1023, 1024, 1027, 1028, 1029, 1030, 1031, 1033, 1035, 1036, 1038, 1040, 1045], "gradientboostingregressor": [7, 123, 125, 126, 132, 135, 366, 384, 391, 552, 560, 630, 631, 983, 987, 988, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1044], "forward": [7, 112, 148, 235, 317, 366, 379, 398, 416, 506, 507, 537, 541, 551, 557, 558, 583, 584, 600, 666, 683, 684, 859, 863, 983, 1007, 1039], "wise": [7, 27, 49, 159, 200, 228, 270, 305, 352, 366, 393, 405, 407, 411, 412, 416, 456, 529, 532, 535, 539, 543, 544, 547, 548, 551, 553, 554, 557, 558, 590, 593, 594, 596, 597, 598, 604, 638, 650, 698, 751, 827, 876, 889, 890, 893, 960, 962, 963, 964, 965, 968, 979, 981, 983, 987, 988, 1001, 1007, 1027, 1032, 1035, 1036, 1037], "fashion": [7, 117, 123, 207, 269, 367, 393, 404, 405, 407, 412, 414, 551, 555, 556, 557, 558, 562, 563, 564, 600, 625, 825, 848, 863, 866, 872, 883, 907, 908, 909, 910, 958, 977, 983, 987, 997, 1036], "notic": [7, 13, 26, 27, 35, 54, 58, 81, 115, 117, 118, 125, 147, 178, 183, 228, 241, 257, 258, 260, 261, 263, 269, 270, 283, 310, 342, 351, 352, 353, 362, 384, 394, 411, 494, 539, 561, 976, 986, 987, 993, 1021, 1024, 1040], "faster": [7, 20, 40, 65, 74, 96, 117, 118, 122, 123, 125, 148, 170, 175, 185, 199, 201, 214, 215, 217, 234, 283, 285, 301, 316, 318, 319, 351, 352, 353, 366, 373, 379, 387, 388, 393, 406, 407, 412, 416, 417, 419, 441, 445, 447, 449, 450, 451, 460, 506, 529, 530, 531, 534, 535, 536, 537, 538, 540, 541, 543, 544, 545, 546, 551, 557, 558, 559, 560, 641, 644, 645, 650, 651, 656, 657, 658, 659, 660, 661, 670, 672, 682, 685, 689, 693, 723, 753, 775, 776, 777, 839, 840, 844, 856, 857, 874, 876, 878, 888, 892, 936, 956, 976, 980, 983, 988, 990, 991, 994, 999, 1001, 1002, 1003, 1006, 1017, 1021, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "10_000": [7, 26, 76, 117, 125, 168, 175, 232, 263, 283, 557, 558, 562, 563, 876], "vari": [7, 13, 32, 35, 45, 47, 56, 63, 66, 76, 93, 118, 119, 121, 130, 140, 147, 153, 155, 166, 169, 170, 172, 188, 190, 193, 197, 206, 225, 233, 238, 250, 256, 260, 263, 270, 298, 303, 305, 307, 308, 310, 321, 324, 330, 331, 338, 341, 343, 344, 348, 362, 366, 368, 374, 393, 439, 443, 444, 498, 506, 512, 513, 520, 557, 558, 562, 563, 644, 645, 648, 649, 650, 651, 652, 653, 658, 659, 660, 661, 679, 682, 701, 760, 815, 818, 823, 825, 826, 856, 860, 864, 879, 896, 904, 907, 908, 961, 979, 982, 983, 987, 990, 991, 1000, 1003, 1008, 1011, 1034, 1035, 1043], "relev": [7, 9, 20, 78, 82, 84, 103, 146, 148, 166, 178, 193, 202, 260, 261, 267, 362, 366, 368, 374, 376, 378, 379, 381, 383, 384, 385, 393, 394, 398, 409, 410, 416, 417, 435, 441, 442, 445, 447, 463, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 531, 532, 536, 539, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 586, 588, 589, 592, 608, 609, 633, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 688, 723, 737, 753, 797, 798, 799, 800, 803, 805, 814, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 844, 846, 849, 850, 856, 857, 859, 862, 864, 865, 866, 871, 877, 878, 879, 894, 895, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 987, 988, 993, 1004, 1007, 1008, 1030, 1035, 1041], "next": [7, 26, 61, 81, 121, 122, 126, 135, 158, 168, 172, 192, 196, 199, 229, 237, 241, 242, 247, 255, 266, 281, 310, 311, 312, 317, 326, 351, 356, 360, 362, 377, 379, 381, 383, 404, 407, 408, 411, 414, 506, 507, 608, 632, 690, 696, 698, 700, 778, 794, 795, 825, 953, 976, 980, 986, 987, 997, 1011, 1024, 1027, 1040, 1041], "ham": [7, 448, 455, 579, 697, 701, 707, 731, 738, 775, 776, 777, 793, 990], "loss": [7, 13, 25, 26, 27, 28, 80, 105, 118, 124, 125, 126, 127, 151, 152, 166, 177, 181, 189, 192, 201, 203, 204, 206, 207, 211, 217, 218, 234, 268, 300, 301, 310, 318, 322, 329, 335, 336, 340, 342, 346, 351, 391, 393, 405, 406, 412, 417, 462, 463, 494, 506, 507, 530, 536, 537, 538, 541, 545, 550, 551, 552, 556, 557, 558, 559, 560, 563, 641, 644, 647, 656, 657, 664, 665, 666, 667, 668, 669, 670, 674, 675, 676, 677, 701, 704, 707, 720, 731, 732, 737, 738, 739, 742, 743, 744, 745, 746, 747, 748, 749, 750, 787, 788, 793, 796, 799, 800, 810, 821, 822, 825, 856, 857, 859, 860, 863, 864, 872, 873, 874, 879, 899, 900, 905, 906, 908, 910, 936, 940, 980, 983, 991, 995, 1000, 1001, 1002, 1003, 1008, 1021, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "eustach": [7, 8, 10, 1011, 1029, 1030], "diemert": [7, 8, 10, 1011, 1029, 1030], "maria": [7, 126, 132, 148, 164, 407, 1038, 1039, 1040, 1041, 1042], "telenczuk": [7, 126, 132, 148, 164, 1036, 1039, 1040, 1042], "github": [7, 8, 12, 27, 72, 73, 117, 119, 120, 126, 128, 129, 132, 135, 145, 156, 164, 169, 170, 171, 180, 229, 230, 231, 235, 239, 240, 241, 242, 250, 258, 260, 261, 267, 272, 283, 302, 311, 316, 317, 319, 320, 322, 327, 360, 377, 378, 382, 383, 384, 385, 387, 391, 393, 394, 401, 403, 690, 1005, 1006, 1010, 1021, 1037], "com": [7, 8, 11, 12, 15, 17, 21, 22, 25, 43, 49, 58, 66, 71, 72, 110, 112, 113, 114, 115, 116, 117, 124, 126, 127, 131, 132, 151, 154, 156, 158, 160, 164, 179, 199, 201, 206, 216, 217, 221, 223, 225, 231, 245, 247, 248, 261, 264, 283, 305, 306, 309, 310, 351, 352, 374, 377, 379, 383, 384, 385, 387, 391, 407, 440, 532, 539, 669, 703, 1034, 1037], "maikia": [7, 126, 132, 164, 1035, 1036, 1038, 1039], "lemaitre58": [7, 132, 151, 156, 158, 160, 221, 305], "gmail": [7, 11, 15, 17, 25, 43, 49, 58, 66, 71, 72, 110, 112, 113, 114, 115, 116, 117, 124, 126, 127, 131, 132, 151, 154, 156, 158, 160, 179, 199, 201, 216, 217, 221, 223, 231, 245, 247, 248, 261, 264, 305, 310, 351, 352], "licens": [7, 8, 9, 10, 11, 12, 14, 15, 17, 18, 21, 22, 25, 26, 27, 28, 31, 32, 33, 38, 40, 41, 43, 46, 47, 48, 49, 52, 53, 54, 55, 58, 62, 66, 67, 68, 71, 72, 74, 75, 76, 83, 90, 91, 96, 98, 100, 101, 102, 103, 106, 110, 112, 113, 114, 115, 116, 117, 118, 123, 124, 126, 127, 131, 132, 148, 151, 152, 154, 155, 156, 157, 158, 160, 164, 175, 181, 182, 184, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 199, 200, 201, 204, 206, 207, 215, 216, 217, 221, 222, 223, 225, 228, 231, 233, 234, 236, 238, 245, 247, 261, 264, 266, 273, 281, 283, 285, 291, 292, 293, 295, 296, 299, 302, 305, 306, 307, 308, 309, 310, 325, 326, 327, 328, 330, 342, 343, 346, 347, 351, 352, 353, 373, 393, 401, 1003, 1011], "hamming_loss": [7, 701, 793, 987, 1029, 1033, 1036], "mean_squared_error": [7, 123, 125, 126, 195, 199, 201, 203, 205, 217, 362, 414, 749, 987, 1028, 1030, 1037, 1038, 1044], "seed": [7, 11, 27, 35, 40, 41, 45, 46, 53, 55, 58, 60, 61, 65, 66, 72, 79, 80, 81, 93, 97, 102, 115, 121, 140, 143, 171, 189, 194, 197, 202, 205, 208, 212, 216, 223, 246, 248, 249, 250, 251, 263, 266, 274, 288, 289, 290, 295, 343, 344, 348, 352, 362, 367, 381, 388, 391, 393, 407, 411, 412, 441, 445, 446, 448, 450, 455, 457, 458, 459, 460, 469, 470, 471, 534, 542, 551, 552, 553, 554, 557, 558, 625, 644, 645, 650, 651, 658, 659, 660, 661, 675, 687, 689, 691, 693, 794, 795, 800, 830, 833, 848, 902, 922, 935, 936, 952, 956, 976, 977, 982, 984, 1019, 1020, 1031, 1032, 1036, 1037, 1043], "fetch_20newsgroups_vector": [7, 214, 232, 374, 1027, 1037, 1039, 1044], "generate_data": [7, 34], "load_diabet": [7, 126, 135, 138, 148, 164, 184, 186, 187, 188, 195, 196, 239, 256, 320, 414, 556, 560, 566, 671, 699, 820, 821, 822, 908, 910, 995, 1016, 1019, 1033, 1038, 1041], "elif": [7, 8, 17, 179, 201, 236, 247, 288, 875], "subset": [7, 20, 21, 27, 28, 33, 71, 72, 81, 82, 119, 121, 122, 123, 138, 145, 148, 170, 172, 188, 200, 214, 215, 216, 217, 231, 233, 237, 238, 258, 261, 263, 269, 270, 272, 278, 310, 311, 317, 325, 329, 351, 352, 353, 362, 374, 379, 387, 391, 393, 404, 405, 407, 408, 411, 414, 415, 417, 424, 435, 447, 462, 464, 465, 467, 486, 487, 490, 491, 495, 506, 547, 548, 549, 551, 553, 554, 555, 556, 557, 559, 560, 561, 562, 563, 564, 565, 567, 600, 608, 627, 637, 638, 639, 640, 649, 653, 656, 664, 665, 666, 669, 672, 673, 674, 675, 676, 677, 695, 701, 702, 711, 714, 716, 728, 731, 752, 754, 790, 793, 798, 823, 825, 827, 828, 829, 830, 834, 835, 836, 837, 838, 841, 846, 849, 856, 865, 894, 895, 899, 901, 904, 907, 909, 915, 956, 976, 983, 987, 988, 998, 1000, 1002, 1003, 1021, 1030, 1035, 1036, 1038, 1040], "regression_data": 7, "classification_data": 7, "calcul": [7, 25, 27, 28, 34, 47, 60, 81, 110, 111, 112, 116, 133, 136, 164, 166, 172, 195, 203, 204, 216, 233, 235, 259, 260, 266, 270, 274, 281, 336, 342, 343, 362, 366, 386, 393, 404, 405, 407, 411, 412, 414, 418, 436, 441, 442, 444, 446, 448, 449, 451, 453, 454, 469, 470, 476, 479, 534, 545, 551, 562, 567, 595, 609, 618, 630, 631, 632, 642, 643, 644, 645, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 670, 671, 672, 673, 677, 679, 682, 686, 688, 690, 692, 705, 714, 726, 727, 732, 733, 735, 741, 747, 748, 751, 761, 766, 768, 769, 770, 771, 775, 778, 780, 781, 784, 785, 786, 789, 790, 792, 803, 805, 820, 824, 837, 839, 840, 877, 878, 879, 885, 889, 899, 900, 925, 938, 979, 981, 983, 984, 985, 987, 989, 990, 991, 995, 997, 1000, 1002, 1008, 1016, 1019, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "given": [7, 10, 11, 13, 28, 31, 38, 50, 59, 61, 79, 86, 97, 101, 118, 128, 130, 132, 151, 158, 169, 170, 183, 199, 200, 203, 217, 221, 228, 232, 233, 235, 237, 238, 239, 256, 260, 261, 262, 263, 269, 286, 289, 290, 291, 307, 311, 318, 351, 352, 353, 359, 366, 368, 374, 378, 379, 381, 383, 385, 387, 388, 391, 393, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 424, 433, 434, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 454, 456, 457, 458, 459, 461, 462, 463, 465, 467, 468, 469, 470, 471, 472, 473, 474, 476, 479, 480, 481, 482, 485, 494, 499, 501, 503, 521, 531, 532, 534, 536, 537, 538, 541, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 586, 587, 588, 589, 591, 592, 599, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 629, 630, 633, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 685, 686, 688, 689, 695, 696, 697, 698, 699, 700, 702, 703, 704, 710, 712, 715, 716, 718, 721, 723, 724, 731, 733, 734, 737, 749, 752, 753, 755, 756, 761, 771, 775, 778, 779, 781, 784, 785, 786, 791, 792, 794, 795, 796, 797, 798, 799, 800, 802, 803, 805, 808, 810, 814, 818, 820, 821, 822, 823, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 856, 857, 858, 859, 860, 861, 862, 864, 865, 866, 869, 870, 871, 872, 873, 874, 875, 876, 878, 879, 885, 886, 888, 891, 892, 893, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 914, 923, 924, 925, 943, 944, 945, 946, 971, 975, 976, 979, 981, 983, 984, 985, 986, 987, 989, 990, 991, 992, 993, 994, 995, 997, 1000, 1001, 1002, 1003, 1011, 1012, 1016, 1017, 1019, 1020, 1021, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044], "round": [7, 9, 26, 86, 118, 163, 164, 206, 217, 260, 266, 307, 309, 351, 393, 448, 454, 455, 562, 563, 591, 592, 595, 625, 690, 711, 798, 808, 864, 896, 911, 913, 977, 991, 1003, 1029, 1031, 1033, 1035, 1036, 1038, 1040, 1041, 1043, 1044], "changing_param": 7, "collect": [7, 10, 12, 13, 17, 20, 26, 116, 128, 135, 148, 156, 164, 172, 187, 192, 223, 231, 263, 267, 352, 353, 366, 374, 376, 383, 397, 406, 411, 412, 414, 415, 444, 462, 551, 552, 553, 554, 555, 556, 557, 558, 561, 562, 563, 564, 567, 568, 579, 581, 582, 586, 587, 588, 589, 630, 726, 727, 735, 780, 781, 784, 798, 802, 803, 805, 818, 945, 958, 961, 976, 982, 983, 987, 993, 998, 1007, 1011, 1016, 1021, 1029, 1039], "chang": [7, 17, 26, 27, 96, 100, 101, 115, 118, 126, 152, 163, 168, 169, 172, 200, 201, 203, 204, 239, 240, 255, 260, 267, 270, 309, 315, 316, 317, 318, 319, 320, 321, 322, 326, 338, 342, 353, 360, 362, 366, 367, 368, 374, 377, 381, 382, 383, 384, 387, 391, 393, 398, 407, 411, 414, 415, 417, 419, 432, 435, 438, 441, 442, 445, 447, 450, 452, 457, 460, 463, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 480, 481, 482, 491, 492, 494, 502, 506, 507, 510, 511, 512, 520, 524, 525, 529, 531, 532, 533, 534, 535, 536, 537, 538, 544, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 575, 576, 577, 578, 579, 580, 586, 587, 588, 589, 591, 592, 595, 600, 608, 609, 611, 612, 613, 615, 617, 618, 620, 621, 623, 625, 633, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 685, 688, 690, 692, 698, 702, 705, 710, 714, 715, 726, 727, 733, 734, 738, 752, 754, 775, 781, 782, 784, 792, 794, 795, 796, 797, 798, 799, 800, 801, 803, 805, 810, 814, 815, 817, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 845, 846, 849, 850, 856, 857, 858, 859, 861, 862, 863, 864, 865, 866, 871, 872, 878, 879, 880, 887, 888, 893, 894, 895, 897, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 913, 917, 919, 920, 931, 936, 946, 953, 954, 955, 957, 976, 977, 978, 986, 987, 988, 990, 997, 1000, 1001, 1002, 1003, 1007, 1012, 1019, 1021, 1025, 1026, 1045], "affect": [7, 26, 81, 158, 168, 169, 203, 224, 238, 239, 263, 270, 310, 321, 362, 366, 367, 368, 375, 393, 396, 405, 407, 410, 411, 413, 415, 418, 420, 442, 448, 455, 471, 473, 477, 547, 548, 567, 697, 710, 785, 796, 799, 800, 801, 810, 814, 815, 839, 840, 841, 842, 843, 845, 847, 849, 850, 851, 879, 880, 890, 904, 986, 990, 1002, 1027, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040], "complexity_comput": [7, 10], "benchmark_influ": 7, "conf": [7, 28, 383, 405, 411, 834, 989, 1041], "prediction_tim": [7, 8], "prediction_pow": 7, "param_valu": 7, "changing_param_valu": 7, "tuned_param": 7, "postfit_hook": 7, "append": [7, 8, 9, 12, 13, 17, 18, 26, 34, 38, 41, 45, 51, 62, 72, 103, 115, 116, 118, 123, 125, 164, 172, 192, 203, 204, 206, 207, 214, 217, 233, 234, 260, 263, 269, 270, 273, 299, 300, 311, 328, 338, 341, 351, 352, 353, 356, 360, 385, 393, 408, 415, 656, 657, 899, 900, 906, 926, 997, 1016], "start_tim": [7, 10, 20, 119, 120, 123, 132, 151, 188, 221], "elapsed_tim": [7, 40, 68, 119, 120, 132, 216], "float": [7, 10, 12, 13, 17, 20, 42, 46, 47, 48, 49, 54, 61, 62, 66, 67, 68, 72, 99, 102, 140, 159, 169, 185, 189, 223, 259, 260, 264, 268, 346, 353, 366, 373, 374, 379, 388, 393, 407, 408, 415, 416, 418, 419, 420, 424, 426, 430, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 452, 453, 454, 455, 456, 457, 459, 460, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 485, 490, 491, 492, 494, 496, 509, 510, 511, 512, 513, 514, 515, 516, 517, 519, 520, 522, 523, 525, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 581, 582, 586, 589, 590, 591, 592, 593, 594, 595, 596, 600, 601, 608, 609, 611, 612, 613, 614, 615, 617, 618, 620, 621, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 710, 711, 712, 714, 715, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 731, 732, 733, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 752, 753, 754, 756, 763, 766, 772, 773, 774, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 790, 791, 792, 793, 794, 795, 796, 798, 799, 800, 802, 810, 813, 816, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 859, 862, 865, 866, 872, 873, 875, 877, 879, 880, 881, 882, 891, 892, 893, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 913, 916, 917, 919, 920, 923, 933, 934, 950, 962, 968, 973, 977, 987, 988, 990, 991, 997, 1002, 1003, 1027, 1028, 1029, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044], "pred_scor": 7, "prediction_performance_comput": 7, "4f": [7, 8, 20, 115, 124, 126, 214, 215, 217, 310, 906], "prediction_performance_label": 7, "necessari": [7, 14, 116, 183, 199, 204, 245, 260, 261, 267, 285, 342, 358, 366, 374, 377, 378, 379, 380, 381, 382, 383, 387, 391, 407, 409, 414, 450, 460, 486, 487, 489, 490, 491, 492, 493, 495, 532, 642, 643, 644, 650, 654, 655, 658, 659, 660, 661, 662, 663, 669, 671, 673, 674, 689, 693, 792, 862, 871, 882, 886, 892, 976, 979, 983, 986, 989, 997, 1003, 1021, 1027, 1035], "defin": [7, 12, 35, 54, 56, 58, 67, 71, 72, 74, 87, 96, 101, 110, 112, 113, 132, 148, 151, 158, 159, 160, 170, 171, 172, 178, 200, 207, 216, 217, 228, 232, 235, 239, 241, 245, 250, 260, 261, 263, 267, 269, 270, 271, 272, 278, 283, 302, 305, 316, 322, 338, 342, 346, 351, 352, 366, 375, 378, 379, 380, 381, 385, 386, 388, 391, 392, 393, 401, 402, 403, 404, 406, 407, 408, 409, 411, 412, 413, 414, 415, 417, 422, 423, 424, 426, 427, 428, 429, 430, 431, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 454, 457, 461, 462, 463, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 487, 517, 518, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 604, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 620, 621, 625, 626, 627, 628, 630, 632, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 686, 687, 688, 689, 690, 694, 695, 697, 706, 708, 714, 719, 720, 721, 722, 725, 728, 735, 738, 742, 743, 745, 747, 748, 750, 751, 754, 757, 763, 778, 782, 787, 788, 789, 790, 794, 795, 796, 799, 800, 802, 810, 818, 822, 824, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 859, 862, 863, 864, 865, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 886, 891, 892, 893, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 923, 925, 928, 934, 945, 947, 971, 976, 977, 983, 984, 985, 986, 988, 989, 990, 992, 993, 994, 995, 997, 999, 1001, 1002, 1003, 1007, 1017, 1020, 1023, 1024, 1029, 1033, 1034, 1035, 1037, 1038, 1039, 1041, 1042, 1043, 1044], "complexity_label": [7, 10], "type": [7, 17, 54, 55, 66, 70, 71, 77, 82, 91, 93, 105, 121, 122, 124, 156, 164, 166, 168, 169, 170, 175, 183, 199, 201, 230, 235, 240, 242, 244, 246, 247, 250, 251, 252, 255, 261, 266, 267, 269, 270, 271, 278, 293, 311, 322, 328, 342, 351, 353, 360, 362, 367, 372, 373, 374, 376, 377, 379, 380, 382, 383, 384, 385, 391, 392, 397, 401, 403, 404, 408, 415, 431, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 494, 506, 507, 513, 565, 570, 579, 580, 583, 584, 586, 587, 589, 598, 602, 615, 625, 627, 628, 636, 654, 656, 670, 672, 677, 685, 687, 690, 691, 697, 699, 705, 712, 714, 726, 727, 730, 735, 738, 780, 781, 784, 785, 794, 795, 796, 802, 810, 818, 823, 825, 826, 841, 842, 843, 845, 846, 847, 849, 850, 851, 852, 853, 859, 860, 861, 864, 866, 872, 873, 879, 880, 897, 901, 902, 903, 904, 905, 915, 917, 919, 920, 923, 927, 928, 950, 951, 958, 961, 973, 974, 977, 979, 984, 986, 987, 988, 989, 990, 991, 997, 999, 1003, 1008, 1010, 1011, 1014, 1019, 1020, 1021, 1027, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "_count_nonzero_coeffici": 7, "coef_": [7, 10, 14, 55, 86, 144, 145, 148, 168, 169, 178, 181, 183, 184, 185, 189, 190, 191, 192, 193, 194, 195, 198, 202, 203, 204, 208, 214, 215, 236, 242, 273, 312, 319, 336, 343, 347, 351, 362, 374, 381, 393, 410, 416, 463, 480, 481, 482, 547, 591, 592, 595, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 899, 900, 901, 902, 903, 904, 905, 971, 981, 983, 1001, 1002, 1019, 1027, 1029, 1032, 1034, 1039, 1041, 1044], "toarrai": [7, 322, 329, 360, 408, 415, 564, 580, 586, 588, 841, 842, 843, 845, 847, 849, 850, 851, 852, 853, 872, 889, 890, 937, 958, 959, 961, 977, 990, 997, 1044], "count_nonzero": [7, 10, 366], "configur": [7, 10, 72, 73, 170, 240, 242, 312, 351, 365, 377, 379, 381, 385, 387, 391, 393, 397, 398, 403, 406, 408, 415, 416, 431, 440, 441, 443, 445, 447, 450, 460, 462, 466, 480, 481, 482, 483, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 564, 565, 566, 567, 568, 579, 580, 581, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 624, 625, 626, 627, 628, 630, 633, 636, 637, 638, 639, 640, 686, 687, 688, 689, 690, 692, 693, 785, 843, 848, 851, 855, 858, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 891, 892, 897, 953, 954, 955, 984, 987, 997, 1002, 1006, 1021, 1023, 1031, 1034, 1035, 1036, 1037, 1039, 1041, 1042, 1043, 1044], "penalti": [7, 10, 31, 83, 166, 177, 178, 183, 184, 188, 192, 199, 203, 214, 215, 218, 230, 268, 299, 318, 329, 343, 351, 366, 387, 391, 406, 409, 412, 416, 469, 470, 471, 472, 473, 474, 476, 500, 529, 535, 536, 537, 538, 540, 541, 545, 546, 595, 641, 644, 645, 646, 647, 650, 651, 652, 655, 656, 657, 658, 659, 660, 666, 667, 668, 670, 674, 676, 678, 679, 685, 810, 879, 899, 900, 902, 904, 905, 906, 976, 983, 986, 991, 997, 1001, 1002, 1008, 1019, 1021, 1029, 1032, 1034, 1036, 1037, 1039, 1040, 1042, 1043], "elasticnet": [7, 10, 180, 190, 268, 273, 366, 385, 391, 412, 645, 650, 655, 656, 657, 658, 659, 660, 661, 666, 674, 676, 679, 983, 1001, 1027, 1028, 1031, 1032, 1033, 1035, 1036, 1038, 1039, 1040, 1041], "001": [7, 14, 33, 45, 63, 123, 148, 151, 169, 183, 208, 228, 238, 245, 258, 260, 262, 328, 352, 376, 385, 411, 534, 535, 537, 544, 625, 642, 643, 644, 645, 650, 651, 658, 659, 660, 661, 664, 665, 666, 674, 675, 676, 677, 679, 682, 687, 688, 691, 692, 794, 795, 856, 857, 894, 895, 901, 902, 903, 904, 905, 976, 1012, 1021], "modified_hub": [7, 674, 1001], "fit_intercept": [7, 178, 179, 185, 204, 213, 228, 268, 312, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 685, 899, 900, 906, 983, 1001, 1031, 1035, 1036, 1037, 1039, 1040, 1041], "tol": [7, 10, 18, 74, 96, 123, 148, 163, 179, 190, 192, 206, 207, 213, 215, 228, 239, 246, 248, 302, 318, 346, 351, 381, 385, 414, 419, 441, 445, 447, 450, 457, 460, 469, 470, 476, 480, 481, 482, 529, 530, 531, 533, 535, 536, 537, 538, 539, 541, 542, 543, 544, 545, 547, 548, 557, 558, 559, 560, 600, 625, 636, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 670, 672, 674, 675, 676, 677, 678, 680, 681, 683, 684, 685, 686, 687, 689, 691, 693, 794, 795, 810, 848, 856, 857, 894, 895, 899, 900, 901, 902, 903, 904, 905, 973, 983, 1001, 1002, 1017, 1021, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1044], "n_iter_no_chang": [7, 118, 123, 207, 318, 351, 384, 393, 414, 557, 558, 559, 560, 664, 665, 666, 674, 675, 676, 856, 857, 1001, 1035, 1038], "l1_ratio": [7, 10, 15, 183, 184, 190, 268, 273, 366, 391, 412, 536, 538, 545, 644, 645, 650, 656, 657, 658, 659, 660, 661, 666, 674, 676, 679, 983, 1001, 1028, 1030, 1032, 1039, 1041], "non_zero": [7, 12], "misclassif": [7, 112, 342, 793, 1001, 1002, 1003, 1028], "ratio": [7, 54, 67, 74, 104, 166, 232, 234, 248, 253, 276, 366, 379, 407, 409, 411, 414, 448, 454, 491, 492, 513, 539, 547, 548, 549, 629, 656, 708, 710, 714, 722, 727, 733, 736, 779, 780, 781, 784, 792, 822, 825, 845, 892, 956, 981, 993, 1003, 1008, 1017, 1042, 1044], "sparsifi": [7, 183, 366, 656, 657, 664, 665, 666, 674, 675, 676, 899, 971, 1029], "05": [7, 8, 13, 15, 25, 27, 29, 38, 45, 61, 63, 65, 66, 68, 69, 76, 92, 101, 115, 118, 125, 130, 138, 141, 144, 148, 156, 159, 160, 161, 165, 169, 179, 180, 198, 201, 213, 222, 224, 225, 228, 238, 245, 247, 248, 251, 260, 261, 269, 271, 288, 291, 296, 305, 307, 315, 319, 326, 328, 343, 349, 354, 376, 416, 448, 454, 476, 529, 544, 590, 593, 594, 596, 611, 612, 613, 617, 618, 620, 621, 623, 630, 631, 647, 688, 692, 753, 796, 848, 899, 900, 983, 991, 997, 1008], "n_support_vector": 7, "len": [7, 8, 10, 11, 17, 18, 20, 31, 32, 33, 38, 39, 42, 44, 45, 50, 51, 52, 56, 61, 62, 63, 64, 65, 66, 71, 73, 99, 105, 106, 110, 115, 118, 121, 122, 139, 140, 146, 147, 151, 159, 164, 170, 172, 198, 199, 217, 223, 228, 231, 232, 233, 235, 237, 238, 245, 247, 248, 255, 258, 260, 261, 268, 269, 271, 274, 281, 283, 290, 292, 293, 299, 306, 307, 308, 311, 321, 325, 326, 329, 338, 345, 348, 351, 352, 353, 360, 391, 393, 417, 425, 429, 431, 435, 443, 448, 454, 462, 505, 513, 548, 567, 568, 580, 595, 630, 631, 779, 796, 810, 821, 825, 827, 829, 830, 880, 894, 895, 1019, 1020, 1021, 1036, 1039], "support_vectors_": [7, 10, 17, 339, 342, 343, 901, 902, 903, 904, 905, 1002], "squared_error": [7, 13, 105, 125, 126, 318, 414, 556, 557, 558, 560, 563, 669, 674, 676, 691, 908, 910, 1001, 1003, 1040, 1043, 1044], "learning_r": [7, 112, 123, 124, 125, 126, 127, 225, 283, 300, 302, 316, 318, 414, 551, 552, 557, 558, 559, 560, 666, 674, 675, 676, 690, 855, 856, 857, 984, 994, 1001, 1028, 1036, 1040], "max_depth": [7, 32, 113, 114, 117, 121, 122, 123, 124, 125, 126, 127, 130, 131, 133, 163, 221, 257, 272, 278, 317, 318, 356, 358, 359, 360, 392, 393, 414, 551, 552, 555, 556, 557, 558, 559, 560, 562, 563, 564, 709, 799, 800, 823, 907, 908, 909, 910, 911, 912, 913, 976, 994, 1003, 1036, 1038], "n_estim": [7, 10, 27, 32, 112, 113, 114, 115, 116, 117, 118, 120, 121, 123, 124, 125, 126, 127, 130, 131, 134, 163, 172, 221, 237, 241, 247, 257, 272, 307, 315, 317, 366, 392, 393, 414, 416, 551, 552, 553, 554, 555, 556, 557, 558, 561, 562, 563, 564, 565, 566, 567, 568, 630, 799, 800, 976, 993, 994, 1024, 1035, 1043], "n_tree": 7, "loop": [7, 8, 115, 125, 169, 255, 265, 351, 360, 366, 379, 380, 385, 407, 411, 416, 644, 645, 650, 651, 657, 658, 659, 660, 661, 976, 1000, 1001, 1016, 1030, 1031, 1034, 1039, 1040, 1043, 1044], "previous": [7, 54, 58, 72, 112, 157, 169, 258, 267, 319, 374, 387, 391, 397, 407, 412, 415, 438, 441, 452, 522, 532, 539, 647, 656, 657, 664, 665, 666, 674, 675, 676, 899, 955, 983, 997, 1006, 1024, 1027, 1028, 1029, 1030, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "subsequ": [7, 33, 59, 76, 99, 112, 145, 187, 201, 262, 265, 283, 285, 338, 362, 379, 381, 385, 393, 407, 408, 414, 417, 435, 494, 506, 551, 552, 557, 559, 560, 664, 666, 674, 799, 800, 827, 828, 831, 834, 835, 836, 837, 838, 856, 874, 878, 977, 986, 988, 1036, 1037, 1041, 1043], "relax": [7, 407, 415, 451, 1000, 1034], "sgd": [7, 8, 11, 17, 80, 92, 105, 114, 124, 125, 133, 140, 154, 155, 166, 177, 180, 182, 184, 190, 191, 206, 213, 218, 228, 235, 249, 268, 300, 301, 318, 334, 339, 340, 343, 344, 348, 351, 357, 362, 368, 502, 510, 629, 647, 664, 665, 666, 669, 674, 675, 676, 677, 856, 857, 976, 991, 1008, 1009, 1023, 1027, 1030, 1031, 1032, 1034, 1038, 1040], "svr": [7, 10, 166, 227, 243, 315, 333, 349, 366, 433, 434, 554, 565, 566, 591, 592, 641, 676, 796, 802, 900, 902, 904, 980, 1008, 1019, 1027, 1029, 1031, 1032, 1035, 1037, 1038, 1039, 1040, 1041, 1042], "optim": [7, 14, 28, 54, 55, 58, 61, 73, 79, 80, 96, 123, 124, 126, 147, 148, 151, 152, 155, 156, 157, 158, 159, 183, 187, 188, 192, 207, 215, 234, 238, 258, 265, 268, 273, 278, 281, 287, 302, 305, 310, 319, 328, 340, 346, 351, 352, 353, 362, 366, 373, 376, 379, 381, 382, 391, 393, 397, 402, 404, 407, 409, 411, 412, 414, 416, 417, 418, 442, 445, 446, 447, 448, 450, 455, 459, 460, 470, 471, 477, 529, 532, 533, 535, 537, 541, 555, 556, 557, 558, 572, 608, 609, 617, 618, 633, 636, 638, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 670, 671, 672, 674, 675, 676, 678, 679, 680, 681, 682, 685, 688, 690, 692, 693, 699, 720, 727, 796, 810, 841, 842, 843, 845, 847, 848, 849, 850, 851, 856, 857, 875, 887, 891, 892, 899, 900, 901, 902, 903, 904, 905, 979, 980, 981, 982, 983, 984, 987, 988, 989, 990, 991, 992, 1001, 1002, 1003, 1006, 1011, 1016, 1023, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1037, 1038, 1039, 1041, 1042, 1043], "few": [7, 15, 20, 40, 47, 53, 100, 122, 154, 157, 158, 188, 197, 199, 201, 217, 234, 235, 245, 262, 263, 267, 301, 305, 309, 315, 316, 317, 318, 319, 320, 321, 322, 325, 346, 353, 366, 374, 375, 376, 379, 381, 392, 394, 398, 401, 404, 405, 407, 411, 412, 414, 416, 417, 435, 447, 559, 560, 586, 589, 653, 690, 693, 892, 936, 955, 983, 984, 986, 987, 990, 991, 1000, 1002, 1003, 1011, 1012, 1019, 1020, 1021, 1033, 1043], "drawn": [7, 53, 81, 115, 147, 151, 160, 168, 239, 267, 287, 351, 375, 407, 413, 414, 417, 419, 467, 468, 469, 470, 471, 472, 473, 474, 513, 521, 531, 553, 554, 555, 556, 561, 562, 563, 564, 609, 625, 630, 639, 835, 891, 892, 909, 910, 983, 997, 999, 1030], "boost": [7, 13, 72, 111, 112, 113, 116, 117, 119, 120, 129, 132, 135, 136, 158, 166, 171, 172, 179, 201, 207, 223, 259, 261, 263, 278, 300, 309, 311, 322, 345, 385, 393, 406, 416, 446, 464, 465, 488, 494, 499, 518, 551, 552, 557, 558, 559, 560, 562, 563, 630, 631, 632, 633, 738, 739, 745, 747, 796, 799, 800, 801, 822, 825, 860, 872, 873, 983, 987, 1006, 1008, 1009, 1023, 1027, 1028, 1030, 1032, 1033, 1034, 1036, 1040], "detriment": [7, 147, 367, 416, 983], "plot_influ": 7, "mse_valu": 7, "ax1": [7, 10, 58, 61, 66, 68, 74, 76, 81, 93, 122, 164, 172, 199, 229, 231, 239, 245, 263, 271, 306, 310, 311, 328, 351, 352, 1017], "add_subplot": [7, 17, 26, 28, 43, 46, 65, 68, 91, 102, 170, 196, 214, 222, 224, 325, 326, 386, 1020], "line1": [7, 12, 223], "tab": [7, 9, 35, 54, 81, 112, 129, 132, 151, 156, 158, 187, 188, 316, 322, 408, 1034], "blue": [7, 9, 13, 21, 22, 27, 35, 81, 93, 96, 112, 115, 119, 127, 129, 132, 134, 146, 156, 158, 175, 179, 187, 188, 195, 197, 223, 232, 254, 255, 260, 300, 310, 316, 322, 327, 376, 407, 412, 1044], "set_xlabel": [7, 10, 46, 54, 61, 73, 74, 76, 91, 93, 101, 123, 160, 163, 164, 168, 170, 171, 172, 175, 188, 194, 196, 197, 199, 201, 214, 215, 233, 260, 262, 266, 271, 272, 275, 278, 288, 305, 306, 310, 328, 352, 353, 356], "y1_label": 7, "set_ylabel": [7, 8, 10, 31, 35, 46, 54, 61, 66, 73, 74, 76, 81, 91, 93, 101, 106, 112, 119, 123, 160, 170, 175, 188, 190, 194, 196, 197, 199, 201, 203, 214, 233, 245, 260, 262, 266, 271, 272, 281, 288, 305, 306, 310, 315, 328, 346, 352, 356, 1017], "spine": [7, 15, 35, 210, 305], "set_color": [7, 210], "get_color": 7, "yaxi": [7, 10, 46, 61, 91, 102, 118, 196, 220, 222, 225, 245, 283, 288, 351], "tick_param": [7, 15, 135, 245, 260, 309, 328], "ax2": [7, 58, 61, 66, 68, 81, 93, 122, 164, 172, 199, 229, 239, 245, 263, 271, 293, 306, 310, 311, 328, 351], "frameon": [7, 205], "line2": [7, 12, 223, 347], "orang": [7, 9, 54, 81, 93, 97, 98, 103, 112, 127, 129, 158, 164, 187, 188, 209, 236, 248, 294, 316, 322, 359, 988, 1044], "tick_right": 7, "set_label_posit": 7, "y2_label": 7, "__name__": [7, 17, 26, 62, 163, 199, 201, 235, 238, 242, 255, 262, 307, 329, 351, 352, 353, 386, 391, 872], "prediction_perform": 7, "4948": 7, "2675": 7, "063501": 7, "1847": 7, "3264": 7, "046802": 7, "997": [7, 41, 148], "3383": 7, "040264": 7, "802": [7, 148, 376], "3582": 7, "036314": 7, "0517578125e": 7, "5558": 7, "7313": 7, "000195": 7, "5289": 7, "8022": [7, 393, 471, 1036], "000269": 7, "5193": 7, "8353": 7, "000434": 7, "124": [7, 352, 414, 1029], "5131": [7, 1032], "3279": 7, "001157": 7, "178": [7, 141, 376, 385, 508, 843], "5149": 7, "0779": 7, "001349": 7, "4066": 7, "4812": 7, "000179": 7, "3551": 7, "1723": 7, "000213": 7, "3445": 7, "2171": 7, "000453": 7, "3433": 7, "0358": 7, "000283": 7, "3456": 7, "0602": 7, "000506": 7, "deduc": 7, "guarante": [7, 8, 81, 82, 169, 207, 232, 281, 283, 305, 352, 362, 368, 373, 387, 388, 407, 411, 412, 415, 444, 534, 643, 656, 657, 666, 670, 672, 674, 676, 685, 692, 813, 816, 839, 840, 877, 879, 882, 884, 885, 886, 887, 888, 889, 890, 892, 893, 906, 979, 983, 984, 986, 990, 995, 999, 1003, 1020, 1037], "aspect": [7, 59, 87, 96, 155, 170, 220, 228, 269, 292, 344, 366, 367, 368, 379, 393, 394, 407, 489, 656, 657, 1003, 1011, 1044], "plot_model_complexity_influ": [7, 16, 1008], "concentr": [7, 9, 66, 93, 101, 112, 130, 156, 164, 166, 225, 244, 246, 251, 252, 271, 293, 307, 327, 328, 375, 379, 414, 441, 517, 794, 986, 993, 1008], "bayesian": [7, 28, 55, 66, 93, 164, 166, 177, 183, 187, 200, 203, 205, 218, 244, 246, 250, 251, 252, 263, 271, 274, 288, 293, 306, 309, 310, 328, 412, 435, 522, 526, 530, 609, 642, 643, 654, 655, 794, 795, 860, 862, 874, 879, 976, 1006, 1008, 1009, 1022, 1023, 1033, 1040], "mixtur": [7, 9, 35, 45, 56, 58, 66, 93, 154, 164, 187, 247, 248, 252, 271, 288, 293, 296, 322, 328, 374, 375, 393, 407, 412, 413, 417, 621, 796, 1006, 1007, 1008, 1022, 1023, 1027, 1031, 1032, 1033, 1034], "doesn": [8, 199, 235, 246, 281, 301, 338, 387, 393, 397, 398, 407, 415, 416, 420, 432, 473, 630, 631, 664, 666, 674, 714, 823, 826, 831, 841, 842, 856, 868, 869, 986, 987, 1003, 1031, 1044], "t": [8, 11, 12, 17, 18, 27, 35, 40, 41, 43, 44, 45, 53, 55, 59, 71, 73, 79, 80, 81, 83, 86, 93, 97, 98, 103, 105, 106, 112, 115, 116, 124, 125, 126, 127, 131, 132, 148, 152, 154, 155, 156, 159, 160, 166, 169, 170, 171, 172, 178, 180, 183, 186, 193, 196, 197, 198, 199, 200, 217, 219, 221, 222, 223, 224, 226, 235, 236, 246, 249, 251, 259, 260, 281, 283, 295, 296, 301, 315, 318, 319, 321, 325, 326, 328, 334, 335, 338, 339, 343, 351, 352, 353, 359, 360, 362, 366, 367, 373, 374, 376, 379, 381, 383, 385, 387, 392, 393, 397, 398, 405, 406, 407, 408, 410, 411, 412, 414, 415, 416, 420, 424, 430, 432, 435, 445, 446, 448, 454, 461, 463, 466, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 493, 494, 511, 512, 513, 517, 518, 523, 528, 530, 532, 539, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 562, 563, 565, 566, 567, 568, 588, 589, 592, 605, 606, 608, 609, 625, 626, 628, 629, 630, 631, 633, 637, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 690, 693, 694, 702, 708, 714, 715, 723, 733, 734, 752, 753, 754, 764, 785, 786, 791, 792, 796, 799, 800, 810, 823, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 845, 846, 849, 850, 855, 856, 857, 865, 868, 869, 870, 872, 873, 879, 880, 892, 894, 895, 899, 900, 901, 902, 904, 905, 907, 908, 909, 910, 936, 937, 951, 976, 979, 981, 983, 986, 987, 988, 989, 990, 991, 992, 993, 994, 997, 1001, 1002, 1003, 1008, 1012, 1019, 1020, 1021, 1022, 1023, 1028, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "memori": [8, 55, 72, 73, 100, 169, 170, 285, 311, 315, 317, 319, 320, 351, 352, 353, 367, 368, 373, 379, 382, 388, 391, 393, 408, 411, 412, 415, 418, 419, 439, 440, 441, 442, 443, 444, 445, 447, 448, 452, 455, 457, 466, 471, 477, 494, 501, 506, 531, 532, 533, 536, 553, 554, 555, 556, 561, 562, 563, 564, 579, 580, 586, 587, 589, 644, 645, 646, 650, 651, 656, 657, 658, 659, 660, 661, 664, 665, 666, 667, 674, 675, 676, 677, 678, 679, 682, 775, 776, 777, 778, 796, 802, 810, 818, 820, 821, 822, 823, 826, 827, 828, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 845, 847, 849, 850, 851, 859, 860, 877, 879, 889, 890, 892, 897, 899, 900, 907, 908, 909, 910, 920, 956, 972, 983, 989, 990, 997, 999, 1000, 1002, 1003, 1007, 1011, 1012, 1021, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "partial_fit": [8, 51, 96, 235, 319, 368, 381, 393, 407, 412, 440, 447, 532, 534, 535, 536, 587, 595, 656, 657, 664, 665, 666, 674, 675, 676, 827, 828, 831, 832, 834, 835, 836, 837, 838, 855, 856, 857, 868, 869, 879, 899, 983, 989, 991, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1038, 1040, 1041, 1042, 1043, 1044], "fed": [8, 132, 362, 374, 415, 976, 992, 997, 1038], "batch": [8, 11, 65, 96, 100, 296, 319, 368, 388, 393, 415, 438, 440, 445, 447, 449, 451, 529, 531, 532, 534, 535, 536, 537, 538, 540, 541, 543, 544, 662, 683, 684, 801, 814, 815, 834, 835, 836, 837, 838, 856, 857, 868, 869, 879, 892, 939, 953, 991, 992, 1001, 1027, 1031, 1032, 1035, 1036, 1037, 1038, 1040, 1042, 1043], "remain": [8, 26, 28, 72, 112, 119, 124, 126, 147, 169, 199, 203, 215, 245, 258, 262, 266, 269, 404, 407, 408, 409, 411, 415, 444, 462, 465, 513, 514, 519, 526, 532, 568, 608, 609, 760, 766, 798, 799, 800, 801, 804, 806, 834, 835, 836, 838, 940, 976, 977, 979, 986, 987, 991, 997, 1003, 1007, 1029, 1035, 1041, 1044], "hashingvector": [8, 353, 368, 415, 487, 586, 588, 1028, 1034, 1035, 1036, 1037, 1040], "where": [8, 11, 12, 14, 17, 18, 20, 21, 25, 26, 27, 33, 54, 56, 58, 81, 87, 93, 96, 99, 105, 106, 112, 114, 116, 118, 122, 123, 125, 129, 145, 148, 151, 157, 160, 164, 169, 178, 183, 191, 200, 203, 208, 209, 210, 212, 216, 217, 220, 222, 223, 228, 229, 232, 235, 236, 238, 240, 251, 256, 257, 260, 262, 266, 267, 269, 271, 272, 278, 281, 302, 305, 307, 308, 309, 310, 311, 312, 315, 317, 318, 326, 327, 336, 342, 346, 347, 348, 351, 356, 357, 362, 366, 367, 368, 373, 375, 376, 378, 379, 381, 383, 385, 386, 387, 391, 392, 393, 394, 397, 401, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 430, 435, 442, 445, 446, 450, 459, 461, 462, 463, 465, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 485, 494, 529, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 543, 544, 545, 547, 548, 549, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 580, 581, 582, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 604, 607, 608, 609, 611, 613, 617, 620, 621, 623, 625, 626, 627, 628, 630, 631, 632, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 682, 686, 689, 690, 691, 694, 705, 710, 714, 722, 726, 727, 728, 736, 752, 760, 765, 766, 767, 770, 778, 779, 780, 781, 784, 785, 789, 791, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 822, 823, 824, 826, 827, 828, 831, 832, 833, 834, 835, 836, 837, 838, 842, 846, 847, 849, 850, 851, 852, 853, 854, 855, 856, 857, 859, 862, 869, 872, 874, 875, 878, 879, 885, 887, 893, 894, 895, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 927, 928, 929, 930, 936, 944, 947, 972, 976, 978, 979, 980, 981, 982, 983, 984, 985, 987, 988, 989, 990, 991, 992, 993, 994, 997, 998, 999, 1001, 1002, 1003, 1007, 1012, 1013, 1027, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "word": [8, 15, 20, 71, 151, 232, 236, 338, 352, 353, 366, 374, 375, 379, 381, 384, 393, 404, 407, 409, 410, 411, 412, 451, 509, 521, 532, 534, 539, 586, 587, 589, 694, 828, 838, 896, 981, 985, 989, 992, 997, 1000, 1001, 1011, 1019, 1020, 1027, 1035], "federicov": 8, "itertool": [8, 43, 45, 63, 133, 170, 184, 246, 251, 260, 267, 269, 414], "sy": [8, 12, 17, 20, 207, 232, 283, 329, 353, 374, 391, 615], "tarfil": 8, "hashlib": 8, "sha256": [8, 1042], "parser": [8, 13, 315, 319, 494, 1042, 1043], "htmlparser": 8, "pathlib": [8, 1042, 1043], "path": [8, 17, 18, 166, 169, 177, 184, 185, 188, 190, 193, 203, 215, 218, 273, 346, 356, 373, 377, 379, 383, 387, 388, 393, 439, 443, 448, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 506, 507, 546, 555, 556, 561, 562, 563, 564, 591, 592, 595, 644, 645, 648, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 679, 680, 681, 682, 683, 684, 686, 859, 860, 906, 907, 908, 909, 910, 941, 976, 983, 984, 993, 1007, 1008, 1027, 1028, 1031, 1033, 1034, 1036, 1037, 1039, 1040, 1042, 1043], "urllib": [8, 18], "request": [8, 18, 47, 199, 217, 235, 318, 367, 373, 377, 378, 382, 393, 394, 398, 401, 412, 415, 416, 435, 441, 442, 445, 447, 463, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 531, 532, 536, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 579, 580, 586, 588, 589, 592, 597, 598, 608, 609, 630, 633, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 688, 697, 797, 798, 803, 805, 814, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 844, 846, 849, 850, 856, 857, 859, 862, 864, 865, 866, 871, 878, 879, 894, 895, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 943, 944, 946, 987, 990, 1021, 1033, 1034, 1035, 1044], "urlretriev": 8, "rcparam": [8, 228, 233, 312], "get_data_hom": 8, "feature_extract": [8, 15, 20, 47, 48, 51, 52, 55, 67, 71, 99, 166, 261, 329, 350, 351, 352, 353, 368, 374, 407, 408, 415, 462, 542, 872, 985, 1020, 1021, 1027, 1028, 1029, 1030, 1033, 1034], "passiveaggressiveclassifi": [8, 206, 366, 368, 983, 988, 1028, 1031, 1032, 1034, 1035, 1038, 1040], "perceptron": [8, 32, 121, 130, 140, 153, 155, 166, 206, 209, 215, 239, 298, 303, 307, 308, 330, 343, 344, 348, 368, 391, 415, 512, 513, 520, 664, 674, 825, 855, 856, 857, 860, 879, 985, 988, 992, 1001, 1008, 1009, 1023, 1031, 1033, 1034, 1035, 1039], "naive_bay": [8, 25, 26, 28, 32, 130, 134, 261, 262, 351, 362, 368, 374, 414, 435, 567, 860, 981, 988, 989, 1021, 1028, 1029, 1031, 1032, 1033, 1034], "multinomialnb": [8, 368, 374, 415, 834, 835, 836, 837, 989, 1021, 1029, 1031, 1034, 1035, 1039, 1040, 1042], "_not_in_sphinx": [8, 10], "hack": [8, 10], "whether": [8, 10, 13, 17, 72, 110, 128, 154, 157, 159, 169, 170, 199, 203, 217, 221, 229, 235, 258, 305, 360, 362, 367, 374, 377, 378, 379, 381, 383, 384, 385, 393, 398, 407, 408, 409, 411, 412, 414, 416, 419, 438, 440, 449, 451, 452, 457, 462, 463, 467, 468, 469, 470, 471, 472, 473, 474, 476, 480, 481, 482, 483, 485, 486, 489, 490, 494, 495, 501, 506, 507, 512, 520, 525, 529, 530, 535, 536, 537, 538, 540, 543, 544, 546, 550, 553, 554, 555, 556, 559, 560, 561, 562, 563, 564, 579, 586, 587, 588, 589, 595, 600, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 627, 629, 630, 631, 633, 634, 635, 636, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 670, 671, 672, 673, 674, 675, 676, 677, 679, 680, 681, 682, 683, 684, 688, 692, 693, 695, 696, 698, 700, 702, 710, 739, 758, 764, 771, 775, 779, 786, 796, 799, 800, 801, 802, 810, 814, 815, 818, 819, 822, 823, 825, 828, 830, 833, 834, 835, 836, 838, 841, 842, 843, 845, 847, 849, 850, 851, 852, 853, 856, 857, 863, 880, 886, 899, 900, 901, 902, 903, 904, 905, 911, 913, 917, 919, 920, 921, 923, 935, 936, 943, 944, 960, 971, 975, 976, 977, 982, 983, 987, 992, 993, 999, 1001, 1002, 1011, 1034, 1035, 1036, 1044], "builder": [8, 10, 346, 383], "__file__": [8, 10, 1040], "global": [8, 10, 43, 58, 96, 199, 220, 221, 242, 269, 301, 316, 362, 366, 367, 385, 391, 393, 406, 407, 417, 440, 450, 460, 466, 588, 624, 630, 686, 689, 690, 693, 705, 726, 727, 735, 780, 781, 784, 785, 814, 880, 895, 897, 955, 957, 976, 984, 987, 993, 997, 1003, 1011, 1035, 1042], "21578": [8, 1040], "uci": [8, 148, 310, 373, 376, 498, 500, 502, 508], "ml": [8, 148, 278, 373, 376, 384, 498, 500, 508, 983, 985, 1006, 1007, 1011], "uncompress": [8, 506, 507, 1021], "reuterspars": 8, "util": [8, 10, 11, 49, 56, 57, 62, 90, 110, 112, 132, 199, 201, 207, 215, 222, 231, 235, 237, 248, 266, 268, 283, 307, 315, 328, 338, 342, 351, 367, 373, 374, 377, 379, 380, 381, 382, 391, 392, 393, 403, 407, 408, 411, 412, 415, 435, 441, 442, 445, 447, 451, 463, 466, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 531, 532, 536, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 575, 579, 580, 586, 588, 589, 592, 608, 609, 633, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 688, 796, 797, 798, 803, 805, 814, 819, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 844, 846, 849, 850, 856, 857, 859, 862, 864, 865, 866, 871, 878, 879, 894, 895, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 976, 982, 985, 987, 988, 997, 998, 1006, 1011, 1013, 1023, 1027, 1028, 1030, 1031, 1033, 1034], "pars": [8, 18, 366, 373, 374, 380, 506], "sgml": [8, 366], "file": [8, 12, 16, 17, 23, 29, 33, 36, 49, 69, 77, 84, 88, 94, 107, 109, 136, 141, 149, 161, 165, 173, 176, 218, 226, 243, 252, 276, 279, 282, 297, 303, 313, 323, 331, 332, 349, 351, 352, 354, 361, 366, 367, 368, 373, 374, 376, 377, 379, 383, 384, 385, 387, 391, 401, 408, 412, 485, 491, 492, 494, 501, 506, 507, 532, 577, 578, 586, 587, 589, 911, 990, 1003, 1008, 1010, 1013, 1027, 1028, 1030, 1033, 1034, 1035, 1036, 1039, 1040, 1041, 1042, 1043], "yield": [8, 9, 26, 46, 56, 79, 80, 81, 82, 125, 183, 194, 199, 214, 217, 265, 281, 299, 305, 335, 340, 351, 352, 362, 366, 368, 373, 384, 393, 404, 407, 409, 411, 412, 414, 415, 416, 435, 447, 466, 470, 506, 507, 535, 536, 537, 539, 544, 551, 552, 557, 558, 559, 560, 565, 566, 592, 600, 645, 649, 650, 651, 653, 659, 661, 663, 671, 673, 684, 723, 778, 785, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 822, 823, 824, 826, 830, 833, 891, 892, 930, 937, 939, 940, 945, 979, 981, 983, 984, 987, 1002, 1003, 1016, 1032, 1033, 1035, 1038, 1040], "__init__": [8, 17, 57, 110, 159, 235, 283, 338, 379, 381, 383, 384, 385, 386, 393, 415, 421, 424, 427, 430, 431, 616, 948, 1028, 1033, 1035, 1040, 1041, 1042, 1043], "self": [8, 17, 20, 26, 28, 57, 66, 93, 110, 159, 166, 172, 235, 270, 283, 324, 330, 331, 338, 351, 373, 379, 380, 381, 384, 385, 386, 387, 407, 415, 417, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 462, 463, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 498, 506, 507, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 579, 580, 581, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 686, 687, 688, 689, 690, 701, 794, 795, 796, 797, 798, 799, 800, 803, 805, 810, 814, 815, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 858, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 891, 892, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 944, 945, 947, 948, 953, 961, 990, 1007, 1008, 1009, 1011, 1023, 1029, 1034, 1041], "latin": [8, 415], "_reset": 8, "handle_starttag": 8, "tag": [8, 50, 72, 228, 327, 373, 378, 382, 383, 387, 391, 393, 403, 415, 424, 430, 494, 827, 1007, 1010, 1032, 1036, 1037, 1038, 1041, 1042, 1043, 1044], "attr": [8, 57], "start_": 8, "handle_endtag": 8, "end_": 8, "in_titl": 8, "in_bodi": 8, "in_top": 8, "in_topic_d": 8, "bodi": [8, 71, 148, 239, 320, 376], "topic_d": 8, "fd": 8, "chunk": [8, 51, 366, 367, 407, 412, 418, 442, 447, 466, 536, 775, 778, 827, 828, 834, 835, 836, 837, 838, 897, 989, 1034, 1035, 1036, 1037, 1038], "feed": [8, 87, 200, 353, 374, 384, 391, 407, 415, 739, 872, 988], "decod": [8, 296, 374, 393, 501, 567, 586, 587, 589, 1027, 1028], "close": [8, 12, 18, 25, 26, 28, 39, 40, 47, 55, 61, 67, 79, 80, 83, 101, 115, 122, 125, 128, 132, 151, 152, 155, 156, 157, 158, 159, 169, 171, 183, 203, 205, 221, 228, 234, 238, 245, 251, 260, 261, 289, 290, 305, 315, 338, 342, 343, 352, 362, 374, 379, 381, 387, 391, 393, 394, 405, 406, 407, 410, 411, 414, 417, 448, 453, 470, 506, 507, 530, 561, 626, 641, 645, 659, 670, 672, 685, 703, 743, 794, 814, 815, 834, 835, 836, 838, 845, 920, 976, 980, 981, 983, 984, 986, 987, 988, 990, 993, 994, 997, 1002, 1006, 1011, 1019, 1030, 1034, 1035, 1036], "handle_data": 8, "start_reut": 8, "attribut": [8, 26, 33, 50, 72, 104, 110, 112, 119, 120, 123, 144, 148, 199, 207, 235, 250, 258, 259, 264, 272, 292, 296, 318, 342, 353, 360, 368, 372, 373, 374, 376, 379, 382, 386, 391, 403, 404, 405, 407, 408, 409, 410, 412, 414, 415, 416, 417, 422, 423, 424, 425, 426, 429, 430, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 462, 463, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 505, 508, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 686, 687, 688, 689, 690, 695, 696, 698, 699, 700, 733, 792, 794, 795, 796, 799, 800, 802, 810, 818, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 858, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 891, 892, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 913, 914, 948, 971, 979, 981, 983, 988, 990, 991, 993, 997, 1000, 1001, 1002, 1003, 1011, 1012, 1018, 1021, 1024, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "end_reut": 8, "sub": [8, 38, 49, 54, 56, 58, 61, 71, 105, 235, 237, 245, 317, 325, 326, 335, 338, 347, 374, 379, 381, 385, 393, 408, 414, 415, 435, 441, 442, 445, 447, 463, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 531, 532, 534, 536, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 586, 588, 589, 592, 595, 608, 609, 625, 633, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 688, 797, 798, 803, 805, 814, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 844, 846, 849, 850, 856, 857, 859, 862, 864, 865, 866, 871, 878, 879, 894, 895, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 945, 983, 987, 1001, 1021, 1037, 1041, 1043, 1044, 1045], "start_titl": 8, "end_titl": 8, "start_bodi": 8, "end_bodi": 8, "start_top": 8, "end_top": 8, "start_d": 8, "end_d": 8, "stream_reuters_docu": 8, "data_path": 8, "iter": [8, 15, 18, 32, 47, 73, 83, 96, 99, 112, 115, 118, 121, 123, 124, 126, 127, 148, 160, 163, 166, 178, 179, 207, 214, 247, 248, 253, 255, 268, 271, 276, 299, 301, 302, 307, 317, 326, 328, 329, 338, 379, 381, 385, 387, 388, 392, 393, 402, 407, 410, 412, 414, 416, 419, 435, 438, 439, 441, 443, 445, 446, 447, 450, 452, 457, 459, 460, 461, 469, 470, 476, 480, 481, 482, 513, 529, 530, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 551, 552, 557, 558, 559, 560, 562, 565, 566, 579, 580, 586, 587, 589, 591, 592, 600, 608, 625, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 830, 833, 848, 855, 856, 857, 858, 859, 863, 870, 872, 874, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 914, 935, 936, 942, 943, 944, 945, 953, 977, 983, 984, 986, 987, 990, 991, 992, 1000, 1001, 1002, 1003, 1007, 1008, 1011, 1016, 1020, 1021, 1023, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044], "archiv": [8, 278, 373, 374, 376, 377, 401, 407, 440, 498, 500, 508, 755, 756, 985, 1002, 1021], "exist": [8, 9, 13, 18, 20, 54, 217, 260, 301, 305, 342, 373, 378, 381, 382, 385, 391, 393, 394, 397, 401, 407, 411, 412, 414, 415, 422, 432, 435, 441, 442, 445, 447, 449, 451, 463, 466, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 497, 531, 532, 536, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 583, 586, 587, 588, 589, 592, 595, 601, 608, 609, 630, 631, 633, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 688, 696, 698, 700, 759, 762, 766, 797, 798, 801, 803, 804, 805, 806, 809, 811, 812, 813, 814, 815, 816, 817, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 844, 846, 849, 850, 856, 857, 859, 862, 864, 865, 866, 871, 872, 873, 878, 879, 894, 895, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 971, 979, 984, 986, 987, 991, 993, 994, 997, 1011, 1020, 1027, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "str": [8, 10, 17, 59, 61, 104, 106, 121, 217, 238, 260, 272, 283, 293, 336, 351, 373, 374, 388, 415, 418, 419, 423, 428, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 447, 448, 450, 455, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 525, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 574, 579, 580, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 608, 609, 615, 625, 626, 627, 628, 629, 630, 631, 632, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 686, 687, 688, 690, 694, 695, 696, 697, 698, 700, 705, 707, 709, 711, 724, 726, 727, 729, 730, 735, 739, 768, 771, 775, 776, 777, 778, 779, 780, 781, 784, 786, 789, 790, 796, 797, 798, 799, 800, 802, 803, 805, 807, 808, 810, 814, 818, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 862, 863, 864, 865, 866, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 891, 892, 894, 895, 897, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 915, 918, 919, 920, 923, 926, 928, 932, 943, 944, 945, 947, 950, 971, 972, 975, 1042], "kei": [8, 10, 13, 18, 20, 43, 118, 122, 132, 163, 168, 217, 235, 238, 241, 261, 263, 264, 316, 317, 318, 319, 320, 321, 322, 368, 372, 381, 384, 385, 386, 391, 393, 394, 397, 398, 407, 408, 411, 417, 462, 470, 559, 560, 565, 566, 567, 568, 586, 589, 592, 615, 624, 630, 631, 632, 657, 796, 799, 800, 808, 810, 822, 858, 859, 914, 924, 952, 995, 1007, 1021, 1024, 1033, 1039, 1040, 1042, 1043], "download_url": 8, "ic": [8, 278, 317, 373, 376, 396, 498, 500, 508, 630, 631, 1023, 1039, 1040], "databas": [8, 148, 310, 366, 368, 374, 376, 407, 412, 414, 415, 418, 440, 442, 508, 553, 554, 892, 999], "reuters21578": 8, "mld": 8, "tar": [8, 383], "gz": [8, 383, 397, 506, 507], "archive_sha256": 8, "3bae43c9b14e387f76a61b6d82bf98a4fb5d3ef99ef7e7075ff2ccbcf59f9d30": 8, "archive_filenam": 8, "mkdir": [8, 385, 387], "parent": [8, 168, 235, 379, 383, 393, 407, 440, 461, 944, 945, 1027, 1044], "exist_ok": 8, "blocknum": 8, "total_sz_mb": 8, "mb": [8, 16, 23, 29, 36, 69, 77, 84, 88, 94, 107, 109, 136, 141, 149, 161, 165, 173, 176, 218, 226, 232, 243, 252, 276, 279, 282, 297, 303, 313, 323, 331, 332, 349, 351, 353, 354, 361, 374, 385, 494, 901, 902, 903, 904, 905, 1002, 1008], "1e6": [8, 10, 192, 232, 351, 353, 366, 534, 893, 987, 999], "current_sz_mb": 8, "stdout": [8, 96, 207, 828, 848, 856, 857], "write": [8, 18, 164, 235, 351, 366, 367, 373, 377, 378, 382, 383, 384, 385, 387, 388, 391, 393, 403, 408, 412, 415, 998, 1007, 1021, 1028, 1040, 1044], "rdownload": 8, "archive_path": 8, "filenam": [8, 18, 329, 374, 385, 401, 486, 498, 501, 502, 505, 586, 587, 589, 1021, 1027, 1032, 1035, 1036], "reporthook": 8, "tamper": 8, "assert": [8, 18, 49, 97, 232, 260, 269, 367, 382, 1007], "read_byt": 8, "hexdigest": 8, "untar": 8, "open": [8, 12, 18, 222, 373, 374, 377, 378, 379, 383, 385, 391, 392, 394, 401, 408, 415, 485, 494, 506, 507, 977, 1006, 1011, 1015, 1030, 1034, 1035, 1037, 1043], "extractal": 8, "glob": 8, "sgm": 8, "rb": 8, "decode_error": [8, 415, 501, 586, 587, 589, 1029], "alternate_sign": [8, 415, 580, 587, 1034], "data_stream": 8, "binari": [8, 14, 26, 28, 116, 118, 128, 130, 145, 159, 169, 175, 190, 192, 199, 207, 221, 229, 238, 241, 257, 258, 263, 269, 275, 278, 287, 338, 342, 344, 360, 362, 373, 374, 375, 381, 383, 384, 393, 397, 401, 404, 405, 406, 407, 414, 415, 417, 435, 436, 437, 450, 485, 498, 506, 507, 518, 521, 547, 548, 551, 553, 557, 559, 564, 565, 566, 579, 586, 587, 589, 591, 592, 600, 608, 625, 626, 627, 628, 629, 630, 631, 656, 657, 664, 666, 671, 672, 673, 674, 698, 701, 705, 706, 707, 710, 711, 713, 716, 718, 724, 726, 727, 731, 732, 735, 736, 737, 738, 739, 740, 779, 780, 781, 784, 785, 786, 791, 793, 796, 797, 799, 800, 801, 802, 810, 814, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 834, 845, 855, 866, 870, 872, 880, 883, 899, 901, 904, 950, 977, 988, 989, 990, 991, 992, 994, 995, 997, 998, 999, 1001, 1002, 1003, 1012, 1024, 1028, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1041, 1042, 1044], "acq": 8, "chosen": [8, 21, 47, 74, 132, 152, 169, 170, 188, 200, 216, 236, 254, 255, 257, 263, 352, 362, 366, 391, 407, 409, 410, 414, 417, 438, 444, 447, 449, 451, 452, 458, 494, 521, 533, 555, 556, 557, 558, 559, 560, 562, 563, 645, 651, 654, 656, 657, 659, 661, 669, 674, 675, 676, 677, 678, 688, 692, 791, 794, 795, 796, 799, 800, 810, 829, 848, 899, 900, 907, 908, 909, 910, 936, 976, 979, 981, 983, 984, 986, 988, 993, 994, 1001, 1016, 1017, 1019, 1020, 1035, 1043, 1044], "evenli": [8, 40, 53, 125, 172, 203, 255, 415, 940, 1021], "care": [8, 56, 126, 278, 342, 366, 368, 383, 385, 391, 393, 394, 407, 409, 415, 435, 458, 467, 638, 656, 657, 664, 665, 666, 674, 675, 676, 693, 899, 984, 1002, 1011, 1043], "all_class": 8, "positive_class": [8, 710], "partial_fit_classifi": 8, "nb": [8, 103, 130, 362, 836, 989], "multinomi": [8, 31, 166, 177, 190, 192, 208, 214, 218, 236, 255, 269, 301, 346, 347, 374, 375, 379, 412, 414, 494, 510, 521, 549, 551, 557, 559, 567, 629, 656, 657, 738, 825, 833, 834, 835, 836, 837, 838, 879, 922, 987, 988, 1003, 1008, 1009, 1021, 1023, 1027, 1031, 1033, 1034, 1035, 1040, 1041], "passiv": [8, 206, 664, 665, 1009, 1023, 1028], "aggress": [8, 206, 664, 665, 799, 800, 1009, 1023, 1028], "get_minibatch": 8, "doc_it": 8, "pos_class": 8, "minibatch": [8, 45, 407, 412, 447, 532, 674, 855, 856, 857, 1006, 1027], "tupl": [8, 13, 49, 50, 56, 105, 170, 217, 372, 373, 374, 381, 393, 411, 419, 432, 449, 451, 462, 465, 480, 481, 482, 483, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 498, 499, 500, 502, 503, 506, 508, 509, 510, 511, 512, 520, 531, 559, 560, 565, 566, 567, 568, 580, 581, 582, 585, 586, 587, 589, 625, 630, 631, 632, 710, 717, 739, 778, 780, 794, 796, 810, 822, 839, 840, 858, 859, 869, 870, 874, 877, 885, 889, 901, 902, 903, 904, 905, 914, 920, 921, 923, 927, 928, 929, 930, 945, 954, 971, 994, 1033, 1034, 1038, 1039, 1040], "x_text": 8, "befor": [8, 12, 26, 43, 71, 73, 76, 87, 123, 132, 144, 158, 160, 162, 163, 165, 166, 169, 170, 172, 180, 183, 187, 188, 192, 235, 260, 267, 285, 286, 306, 309, 310, 312, 318, 341, 362, 366, 367, 374, 377, 379, 381, 382, 384, 385, 387, 388, 391, 393, 394, 396, 397, 401, 403, 405, 407, 408, 409, 411, 412, 416, 419, 420, 441, 445, 446, 447, 457, 459, 463, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 480, 481, 482, 483, 488, 499, 532, 535, 536, 537, 538, 539, 542, 544, 545, 559, 560, 563, 565, 567, 568, 575, 586, 587, 589, 609, 625, 626, 628, 643, 664, 665, 666, 669, 674, 676, 685, 690, 692, 794, 795, 801, 802, 814, 815, 817, 821, 823, 825, 839, 840, 847, 848, 849, 850, 851, 854, 859, 860, 863, 866, 873, 877, 878, 879, 880, 884, 885, 887, 888, 889, 890, 896, 907, 908, 936, 971, 977, 983, 984, 987, 993, 997, 1001, 1002, 1003, 1007, 1008, 1021, 1027, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "exclud": [8, 13, 20, 168, 305, 379, 383, 393, 444, 462, 464, 726, 727, 735, 780, 781, 784, 809, 817, 874, 962, 987, 990, 1036, 1043], "invalid": [8, 199, 393, 444, 576, 669, 710, 771, 983, 987, 1033, 1035, 1037, 1038, 1040, 1041, 1043], "assign": [8, 18, 21, 35, 38, 47, 50, 58, 59, 61, 112, 117, 128, 130, 144, 153, 212, 217, 228, 233, 236, 299, 307, 312, 330, 346, 352, 374, 379, 381, 393, 404, 411, 412, 414, 415, 416, 417, 438, 439, 440, 441, 443, 444, 445, 446, 447, 450, 452, 454, 457, 458, 459, 460, 513, 534, 559, 560, 591, 592, 605, 606, 608, 656, 657, 664, 665, 666, 674, 675, 676, 702, 703, 713, 714, 715, 718, 726, 727, 728, 735, 736, 740, 752, 754, 780, 781, 783, 784, 790, 791, 792, 796, 799, 800, 802, 805, 810, 818, 820, 821, 822, 823, 826, 843, 849, 851, 852, 853, 866, 894, 895, 899, 900, 901, 902, 903, 904, 905, 981, 983, 986, 987, 988, 989, 990, 991, 992, 997, 1000, 1011, 1012, 1021, 1027, 1032, 1034, 1035, 1044], "format": [8, 11, 12, 13, 20, 22, 49, 55, 59, 62, 71, 81, 96, 105, 115, 121, 124, 126, 138, 143, 144, 175, 179, 185, 190, 199, 217, 255, 265, 267, 268, 271, 274, 287, 288, 291, 292, 309, 315, 345, 356, 360, 366, 372, 378, 379, 381, 382, 387, 388, 392, 393, 408, 411, 414, 415, 431, 440, 441, 443, 445, 447, 448, 450, 457, 462, 466, 480, 481, 482, 483, 485, 487, 494, 495, 496, 506, 507, 508, 521, 525, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 549, 555, 556, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 582, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 625, 626, 627, 628, 633, 636, 637, 638, 639, 640, 644, 650, 656, 657, 658, 660, 664, 665, 666, 674, 675, 676, 686, 687, 690, 695, 711, 718, 736, 737, 748, 765, 788, 789, 828, 841, 842, 843, 845, 847, 848, 849, 850, 851, 852, 853, 854, 855, 858, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 882, 883, 886, 891, 892, 897, 899, 911, 919, 920, 941, 949, 953, 958, 961, 963, 964, 965, 966, 967, 968, 973, 977, 987, 990, 995, 997, 998, 1001, 1003, 1006, 1012, 1013, 1023, 1027, 1028, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1038, 1040, 1042, 1044], "islic": [8, 45, 63], "asarrai": [8, 18, 199, 217, 302, 327, 351, 352, 381, 393, 403, 583, 584, 723, 753, 847, 849, 850, 851, 997, 1002, 1044], "int": [8, 10, 13, 14, 17, 18, 20, 38, 45, 63, 82, 115, 124, 128, 139, 140, 152, 153, 154, 160, 164, 168, 180, 190, 192, 199, 217, 225, 228, 234, 238, 245, 255, 258, 259, 260, 283, 288, 290, 296, 312, 326, 353, 374, 379, 381, 391, 393, 405, 408, 411, 415, 418, 419, 422, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 480, 481, 482, 483, 486, 489, 490, 492, 493, 494, 495, 500, 501, 506, 507, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 582, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 605, 606, 608, 609, 615, 625, 626, 627, 628, 629, 630, 631, 632, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 698, 699, 700, 701, 702, 703, 705, 707, 711, 723, 724, 726, 727, 728, 731, 735, 753, 754, 766, 771, 775, 776, 777, 778, 779, 780, 781, 784, 786, 790, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 866, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 915, 919, 920, 922, 923, 935, 936, 938, 939, 940, 941, 952, 956, 958, 961, 966, 967, 983, 994, 1027, 1033, 1037, 1038], "iter_minibatch": 8, "minibatch_s": [8, 368], "statist": [8, 13, 82, 112, 115, 116, 127, 138, 139, 140, 143, 147, 148, 166, 168, 169, 170, 171, 183, 187, 203, 253, 257, 259, 262, 269, 276, 278, 281, 305, 311, 317, 362, 372, 374, 376, 379, 385, 393, 405, 407, 408, 409, 411, 412, 414, 416, 432, 467, 472, 491, 492, 514, 515, 516, 518, 520, 539, 551, 557, 558, 560, 602, 603, 604, 607, 625, 628, 632, 633, 642, 647, 654, 688, 692, 694, 708, 714, 719, 720, 721, 728, 740, 785, 796, 812, 829, 856, 857, 875, 876, 877, 879, 884, 887, 888, 890, 904, 907, 908, 962, 976, 977, 981, 983, 984, 986, 987, 988, 989, 994, 995, 997, 1001, 1002, 1003, 1004, 1005, 1008, 1013, 1019, 1020, 1032, 1035, 1038, 1039, 1041, 1042], "test_stat": 8, "n_test": [8, 10, 34, 115, 260, 1027, 1030], "n_test_po": 8, "hold": [8, 13, 17, 27, 28, 199, 203, 261, 360, 372, 379, 380, 381, 393, 405, 407, 411, 414, 415, 417, 501, 555, 559, 562, 587, 630, 631, 632, 733, 796, 799, 800, 810, 835, 866, 867, 872, 873, 880, 883, 907, 909, 977, 981, 987, 991, 1001, 1002, 1003, 1012, 1021, 1035, 1039], "n_test_docu": 8, "tick": [8, 44, 61, 154, 239, 271, 630, 823], "x_test_text": 8, "parsing_tim": 8, "vectorizing_tim": 8, "sum": [8, 18, 20, 27, 62, 82, 93, 99, 105, 124, 125, 144, 148, 159, 169, 180, 186, 195, 199, 203, 214, 217, 221, 223, 238, 269, 283, 290, 293, 319, 329, 342, 343, 346, 351, 352, 353, 360, 376, 385, 393, 404, 405, 406, 407, 409, 410, 412, 413, 414, 415, 417, 430, 440, 441, 445, 447, 457, 462, 463, 480, 481, 482, 513, 518, 521, 529, 532, 534, 535, 539, 542, 543, 544, 547, 548, 550, 552, 554, 555, 556, 557, 558, 559, 560, 562, 563, 564, 566, 567, 568, 588, 589, 609, 611, 621, 623, 633, 639, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 670, 671, 674, 675, 676, 677, 679, 682, 688, 692, 694, 697, 707, 708, 717, 723, 738, 753, 755, 756, 760, 785, 827, 828, 832, 833, 842, 846, 850, 857, 858, 878, 879, 899, 900, 902, 905, 907, 908, 909, 910, 938, 962, 968, 973, 983, 987, 988, 989, 990, 1002, 1003, 1019, 1030, 1031, 1033, 1035, 1036, 1038, 1043, 1044], "cls_name": [8, 10], "string": [8, 72, 121, 159, 217, 230, 264, 318, 353, 366, 373, 374, 379, 380, 381, 385, 393, 401, 408, 411, 414, 415, 416, 418, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 455, 462, 463, 465, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 485, 487, 488, 494, 503, 525, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 579, 580, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 608, 609, 615, 618, 625, 626, 627, 628, 629, 630, 631, 632, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 686, 687, 688, 689, 690, 697, 707, 709, 717, 729, 759, 762, 768, 771, 775, 776, 777, 778, 789, 790, 794, 795, 796, 799, 800, 802, 810, 818, 822, 827, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 858, 859, 860, 862, 863, 864, 865, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 891, 892, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 917, 919, 920, 927, 928, 929, 945, 951, 955, 971, 972, 976, 977, 987, 1000, 1002, 1012, 1019, 1027, 1028, 1029, 1030, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "n_train": [8, 10, 34, 115, 260, 1027, 1030], "6d": 8, "n_train_po": 8, "5d": 8, "cls_stat": 8, "accuracy_histori": 8, "runtime_histori": 8, "total_fit_tim": 8, "discard": [8, 56, 180, 263, 366, 404, 409, 416, 506, 507, 547, 595, 625, 628, 642, 872, 876, 888, 977, 983, 1035, 1039], "mini": [8, 65, 96, 319, 368, 393, 415, 438, 440, 445, 447, 449, 451, 529, 531, 534, 535, 536, 537, 538, 540, 541, 543, 544, 991, 992, 1027, 1038, 1040], "smaller": [8, 25, 41, 47, 56, 83, 112, 148, 156, 157, 160, 163, 184, 188, 190, 203, 232, 278, 289, 290, 299, 305, 338, 346, 352, 379, 404, 406, 407, 409, 411, 412, 414, 416, 437, 438, 444, 448, 452, 454, 512, 532, 533, 555, 556, 557, 558, 559, 560, 562, 563, 591, 608, 617, 631, 644, 645, 647, 648, 650, 651, 652, 654, 656, 657, 658, 659, 660, 661, 670, 672, 680, 681, 690, 707, 794, 799, 800, 845, 848, 872, 873, 891, 892, 899, 907, 908, 909, 910, 936, 981, 983, 984, 986, 987, 988, 990, 991, 993, 997, 999, 1001, 1002, 1003, 1007, 1021, 1035, 1040, 1044], "bigger": [8, 41, 61, 212, 260, 302, 342, 348, 352, 365, 367, 415, 436, 437, 506, 536, 845, 1016, 1023], "overhead": [8, 283, 367, 368, 379, 385, 388, 391, 393, 414, 439, 443, 447, 532, 697, 831, 832, 834, 835, 836, 837, 838, 839, 840, 955, 989, 990, 1030, 1035, 1036, 1039], "stream": [8, 407, 412, 415, 460, 587, 868, 869, 879, 979, 1006, 1035, 1038], "minibatch_iter": 8, "total_vect_tim": 8, "x_train_text": 8, "item": [8, 9, 10, 11, 12, 13, 18, 20, 31, 44, 56, 76, 116, 118, 122, 125, 132, 169, 197, 201, 207, 221, 234, 235, 237, 247, 257, 263, 319, 326, 352, 372, 379, 380, 381, 388, 408, 462, 524, 559, 560, 586, 587, 589, 630, 808, 872, 894, 895, 914, 915, 941, 979, 1000, 1007, 1012], "updat": [8, 17, 45, 63, 112, 118, 127, 233, 315, 353, 377, 378, 379, 383, 387, 393, 407, 412, 414, 421, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 461, 463, 467, 468, 469, 470, 471, 472, 473, 474, 476, 480, 481, 482, 483, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 686, 687, 688, 689, 690, 794, 795, 796, 797, 798, 799, 800, 803, 805, 810, 814, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 891, 892, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 914, 962, 983, 990, 991, 992, 1001, 1010, 1011, 1028, 1034, 1035, 1036, 1038, 1040, 1042, 1043, 1045], "accumul": [8, 51, 119, 120, 188, 383, 385, 407, 415, 987, 1028, 1035], "acc_histori": 8, "run_histori": 8, "878": 8, "962": 8, "915": 8, "1306": 8, "855": [8, 146, 149, 1008], "1300": [8, 51], "877": [8, 258], "1285": 8, "933": [8, 75, 411], "1280": 8, "3911": 8, "517": [8, 450, 460, 1019], "938": [8, 195, 782, 987, 1016], "1940": [8, 217], "936": [8, 435, 987], "1937": 8, "885": [8, 148, 376], "03": [8, 12, 53, 69, 81, 84, 96, 107, 136, 148, 149, 156, 161, 169, 180, 217, 226, 232, 243, 245, 251, 261, 268, 297, 303, 313, 326, 352, 376, 415, 745, 796, 983, 987, 1008], "1928": 8, "941": 8, "1925": 8, "6821": 8, "891": 8, "952": [8, 50], "2085": 8, "2083": 8, "900": [8, 51, 75, 76], "2077": 8, "953": [8, 50], "29": [8, 82, 93, 152, 156, 190, 199, 203, 216, 261, 320, 326, 346, 349, 376, 414, 557, 558, 688, 692, 778, 794, 851, 983, 984, 1001, 1008], "2075": 8, "9759": 8, "1276": 8, "949": 8, "54": [8, 93, 148, 175, 183, 199, 202, 238, 374, 376, 407, 489, 1028, 1029], "2148": 8, "55": [8, 169, 175, 194, 199, 217, 222, 326, 384, 407, 411, 489, 595, 796, 802, 810, 823, 987, 1027], "2146": 8, "909": 8, "2143": 8, "958": 8, "2141": 8, "11680": 8, "1499": 8, "944": [8, 1016], "2033": 8, "956": [8, 74, 77, 1008, 1016], "2032": 8, "2029": 8, "950": 8, "2028": 8, "14625": 8, "1865": 8, "965": [8, 987], "2031": 8, "903": 8, "924": 8, "957": [8, 725, 987], "2027": 8, "17360": [8, 1038], "2179": 8, "2074": 8, "2073": 8, "932": 8, "38": [8, 13, 170, 190, 198, 203, 254, 269, 288, 321, 414, 630, 880, 935, 987, 997, 1027, 1028, 1029], "2071": 8, "2070": 8, "curv": [8, 11, 24, 25, 27, 29, 38, 76, 79, 115, 117, 118, 124, 128, 166, 177, 178, 189, 199, 217, 218, 220, 222, 225, 227, 229, 231, 238, 239, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 260, 270, 276, 300, 306, 309, 315, 338, 342, 358, 386, 402, 406, 411, 413, 435, 436, 437, 500, 508, 513, 519, 523, 562, 630, 643, 656, 696, 698, 700, 704, 705, 706, 707, 724, 726, 738, 739, 779, 781, 784, 785, 786, 794, 795, 802, 813, 818, 823, 825, 826, 837, 860, 879, 899, 904, 983, 984, 986, 987, 993, 1003, 1008, 1009, 1011, 1023, 1024, 1029, 1030, 1033, 1037, 1039, 1040, 1041, 1042, 1043], "evolut": [8, 10, 272, 366, 368], "cours": [8, 9, 175, 366, 379, 381, 412, 415, 416, 977, 982, 983, 1011], "valid": [8, 13, 14, 27, 55, 56, 57, 58, 72, 73, 75, 76, 79, 83, 92, 103, 110, 116, 118, 121, 122, 123, 124, 125, 128, 137, 141, 142, 145, 146, 148, 149, 159, 166, 169, 171, 177, 183, 185, 186, 187, 193, 199, 201, 207, 217, 218, 229, 235, 237, 241, 247, 250, 253, 257, 260, 261, 262, 264, 266, 267, 268, 269, 272, 273, 274, 276, 278, 287, 302, 306, 311, 315, 317, 322, 328, 338, 346, 356, 367, 374, 379, 382, 391, 392, 393, 398, 401, 402, 405, 407, 408, 409, 412, 413, 414, 415, 416, 421, 423, 435, 440, 441, 443, 444, 445, 447, 448, 455, 461, 462, 466, 469, 470, 471, 472, 473, 474, 476, 480, 481, 482, 483, 491, 499, 500, 502, 513, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 545, 547, 555, 556, 557, 558, 559, 560, 562, 563, 564, 565, 566, 567, 568, 570, 573, 575, 580, 581, 587, 591, 592, 595, 600, 630, 632, 636, 637, 638, 639, 640, 641, 644, 645, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 680, 681, 682, 683, 684, 686, 687, 690, 697, 699, 700, 704, 711, 725, 759, 762, 771, 775, 776, 777, 782, 789, 790, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 830, 833, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 862, 863, 865, 871, 879, 891, 892, 894, 895, 897, 899, 901, 904, 906, 907, 908, 909, 910, 919, 920, 921, 922, 923, 930, 942, 944, 947, 977, 986, 987, 988, 991, 995, 997, 999, 1001, 1002, 1003, 1006, 1007, 1008, 1011, 1012, 1015, 1023, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "consumpt": [8, 366, 532, 555, 556, 562, 563, 796, 810, 820, 821, 822, 907, 908, 909, 910, 953, 1012, 1027, 1029, 1033, 1035, 1036, 1041], "queue": [8, 990, 1030], "up": [8, 11, 38, 45, 47, 48, 49, 53, 56, 58, 63, 71, 81, 82, 90, 93, 110, 117, 164, 170, 178, 183, 192, 200, 215, 216, 247, 262, 265, 283, 296, 302, 306, 311, 319, 326, 335, 342, 346, 351, 353, 368, 373, 374, 379, 383, 385, 386, 387, 388, 391, 393, 394, 405, 407, 412, 414, 415, 441, 445, 446, 447, 448, 450, 454, 457, 458, 459, 506, 507, 534, 547, 548, 555, 556, 557, 558, 559, 560, 562, 563, 564, 608, 625, 630, 631, 637, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 658, 659, 660, 661, 662, 679, 680, 681, 682, 690, 703, 766, 794, 795, 798, 799, 800, 802, 823, 873, 874, 877, 889, 907, 908, 909, 910, 913, 936, 939, 940, 976, 979, 983, 984, 987, 990, 997, 1001, 1002, 1007, 1010, 1011, 1020, 1021, 1027, 1028, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044], "amount": [8, 12, 46, 54, 67, 79, 82, 96, 100, 113, 115, 157, 169, 183, 203, 217, 233, 317, 325, 328, 330, 338, 346, 353, 366, 367, 368, 391, 406, 407, 409, 412, 414, 415, 416, 441, 452, 467, 536, 537, 539, 541, 561, 594, 644, 645, 648, 649, 650, 651, 652, 653, 654, 658, 659, 660, 661, 663, 679, 682, 690, 799, 800, 839, 840, 845, 880, 895, 896, 909, 910, 982, 983, 986, 989, 991, 997, 999, 1000, 1001, 1002, 1019, 1020, 1040, 1044], "learner": [8, 113, 123, 132, 368, 555, 556, 557, 558, 559, 560, 562, 563, 564, 580, 587, 628, 841, 842, 847, 849, 850, 989, 992, 1003, 1006, 1007, 1021, 1043], "plot_accuraci": 8, "x_legend": 8, "n_exampl": 8, "gca": [8, 45, 63, 87, 154, 204, 208, 210, 228, 241, 264, 291, 293, 306, 334, 336, 339, 340, 994, 1024], "set_ylim": [8, 10, 17, 32, 43, 61, 73, 93, 117, 129, 130, 160, 170, 179, 197, 199, 200, 233, 245, 264, 275, 281, 288, 299, 305, 307, 308, 310, 316, 322, 328, 347], "runtim": [8, 10, 59, 112, 185, 214, 216, 233, 302, 307, 367, 381, 382, 391, 393, 406, 407, 414, 448, 561, 677, 810, 899, 900, 901, 902, 903, 904, 905, 1001, 1002, 1030, 1034, 1035, 1041, 1042, 1044, 1045], "gcf": [8, 994], "cls_runtim": 8, "bar_color": 8, "rectangl": 8, "bar": [8, 10, 15, 73, 118, 119, 122, 123, 126, 134, 144, 148, 159, 163, 170, 178, 245, 250, 259, 261, 265, 281, 310, 311, 319, 320, 352, 381, 410, 579, 630, 646, 667, 678, 987, 994, 1001, 1003, 1033, 1034, 1035, 1036], "width": [8, 10, 13, 17, 46, 54, 81, 91, 98, 99, 104, 105, 106, 115, 121, 122, 125, 134, 144, 153, 159, 182, 242, 245, 259, 286, 305, 307, 308, 311, 317, 320, 335, 376, 408, 436, 437, 450, 462, 491, 492, 504, 519, 584, 864, 912, 997, 1001, 1003, 1018, 1019, 1035], "set_xticklabel": [8, 10, 81, 106, 134, 154, 170, 172, 271, 272, 281], "ymax": [8, 10, 11, 79, 186, 188, 191, 192, 200, 208, 260, 296], "set_titl": [8, 10, 15, 26, 28, 31, 32, 33, 35, 43, 44, 46, 54, 56, 58, 61, 65, 66, 73, 76, 81, 91, 93, 101, 106, 112, 117, 119, 123, 128, 130, 132, 133, 160, 163, 164, 168, 169, 170, 171, 172, 178, 179, 188, 190, 197, 199, 200, 201, 207, 220, 221, 224, 225, 231, 233, 234, 238, 239, 245, 254, 255, 256, 257, 260, 262, 263, 267, 271, 272, 275, 278, 281, 283, 286, 287, 288, 293, 299, 300, 305, 306, 307, 308, 309, 310, 315, 319, 325, 326, 335, 342, 346, 347, 348, 351, 356], "autolabel": 8, "attach": [8, 351, 432, 844, 1028, 1038], "rect": [8, 53, 178], "height": [8, 15, 54, 99, 122, 123, 148, 305, 311, 322, 351, 413, 444, 491, 492, 504, 584], "get_height": [8, 123], "get_x": [8, 123], "get_width": [8, 123], "va": [8, 123, 271, 291, 293, 345], "setp": [8, 10, 271, 274], "rotat": [8, 41, 86, 95, 96, 98, 101, 103, 107, 124, 134, 166, 172, 223, 271, 272, 281, 338, 345, 410, 412, 417, 419, 502, 530, 539, 548, 612, 695, 879, 911, 983, 1008, 1038, 1039], "read": [8, 13, 18, 96, 220, 267, 315, 316, 317, 319, 321, 366, 373, 377, 380, 381, 382, 383, 384, 386, 387, 391, 392, 393, 407, 418, 419, 420, 421, 424, 430, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 455, 457, 459, 460, 461, 462, 463, 465, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 608, 609, 611, 612, 613, 614, 617, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 695, 696, 698, 699, 700, 701, 702, 703, 705, 706, 707, 708, 710, 711, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 754, 755, 756, 757, 758, 759, 760, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 846, 847, 848, 849, 850, 851, 852, 853, 855, 858, 859, 862, 863, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 882, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 913, 932, 976, 983, 987, 988, 1006, 1011, 1021, 1028, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1044], "feat": [8, 10, 383, 415], "extr": 8, "hash": [8, 111, 136, 166, 352, 353, 366, 368, 371, 379, 382, 391, 414, 512, 542, 555, 564, 579, 580, 587, 638, 834, 952, 979, 1008, 1021, 1023, 1028, 1031, 1034], "vect": [8, 71, 261, 329, 415, 1021], "510": [8, 16, 1008, 1019], "plot_out_of_core_classif": [8, 16, 1008], "featurehash": [8, 20, 71, 166, 329, 350, 351, 352, 354, 368, 374, 415, 486, 579, 586, 587, 588, 589, 872, 1008, 1028, 1033, 1034, 1035, 1041, 1042], "dictvector": [8, 20, 71, 166, 329, 350, 351, 352, 354, 374, 415, 486, 580, 586, 587, 588, 589, 872, 1008, 1027, 1028, 1031, 1037, 1039, 1040, 1043, 1044], "comparison": [8, 12, 14, 20, 24, 25, 26, 27, 29, 30, 34, 36, 37, 39, 41, 43, 49, 51, 58, 59, 60, 61, 62, 64, 69, 71, 80, 91, 95, 97, 98, 100, 102, 106, 107, 112, 115, 118, 125, 130, 134, 135, 142, 144, 149, 150, 156, 158, 160, 161, 166, 171, 181, 183, 185, 187, 190, 197, 199, 203, 214, 217, 219, 222, 223, 224, 225, 226, 227, 231, 232, 243, 247, 253, 255, 256, 257, 264, 268, 272, 276, 281, 292, 299, 307, 309, 310, 312, 315, 317, 329, 330, 335, 345, 350, 351, 352, 354, 362, 374, 376, 393, 405, 409, 410, 412, 416, 417, 435, 436, 441, 444, 445, 447, 480, 481, 482, 486, 502, 510, 512, 513, 520, 523, 539, 547, 548, 551, 562, 563, 579, 580, 586, 587, 588, 589, 604, 606, 608, 609, 613, 620, 623, 629, 637, 641, 656, 670, 686, 687, 688, 689, 690, 702, 735, 740, 776, 785, 796, 797, 798, 799, 801, 802, 810, 812, 813, 814, 815, 816, 817, 825, 834, 837, 841, 856, 860, 872, 873, 877, 879, 880, 884, 885, 886, 887, 888, 889, 890, 899, 901, 902, 904, 905, 907, 976, 981, 984, 987, 989, 990, 993, 1002, 1008, 1024], "biclust": [8, 22, 23, 71, 327, 329, 351, 352, 353, 415, 422, 447, 449, 451, 486, 509, 511, 589, 717, 792, 987, 1008, 1022, 1023, 1029, 1033], "spectral": [8, 14, 19, 23, 37, 45, 47, 50, 56, 69, 71, 166, 221, 222, 327, 329, 351, 352, 353, 379, 415, 447, 449, 450, 451, 460, 467, 468, 469, 470, 471, 472, 473, 474, 486, 509, 511, 589, 686, 687, 688, 689, 690, 693, 717, 792, 990, 1000, 1008, 1022, 1023, 1027, 1028], "cluster": [8, 9, 14, 15, 18, 19, 21, 23, 25, 43, 44, 47, 49, 51, 52, 54, 55, 58, 60, 62, 63, 69, 71, 81, 90, 91, 92, 102, 110, 114, 121, 128, 143, 146, 172, 196, 221, 223, 224, 225, 232, 238, 245, 246, 247, 248, 261, 285, 289, 290, 292, 308, 316, 320, 325, 326, 327, 329, 340, 350, 351, 353, 354, 360, 368, 372, 374, 376, 379, 381, 384, 391, 393, 402, 408, 413, 415, 421, 422, 425, 486, 500, 501, 502, 509, 510, 511, 512, 513, 520, 528, 539, 542, 562, 564, 587, 588, 589, 629, 689, 690, 693, 702, 703, 708, 715, 717, 722, 728, 733, 734, 752, 754, 775, 776, 783, 789, 790, 792, 794, 795, 851, 852, 860, 864, 871, 879, 928, 930, 948, 955, 971, 977, 984, 986, 990, 993, 995, 997, 1000, 1004, 1006, 1007, 1008, 1011, 1012, 1015, 1018, 1021, 1022, 1023, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "algorithm": [8, 9, 14, 18, 19, 23, 30, 32, 37, 38, 40, 43, 44, 46, 47, 51, 57, 58, 59, 60, 61, 62, 63, 67, 68, 69, 71, 80, 81, 86, 96, 98, 112, 113, 114, 118, 121, 128, 166, 175, 186, 188, 202, 213, 215, 216, 222, 224, 227, 231, 232, 238, 243, 246, 247, 248, 251, 257, 260, 269, 283, 289, 290, 292, 296, 305, 307, 310, 315, 316, 317, 320, 322, 327, 329, 337, 351, 352, 353, 362, 366, 368, 372, 373, 374, 375, 376, 379, 380, 381, 382, 387, 388, 392, 393, 396, 403, 404, 406, 407, 409, 410, 411, 412, 414, 415, 417, 418, 419, 420, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 467, 472, 473, 476, 480, 481, 482, 486, 501, 509, 510, 511, 512, 513, 520, 528, 529, 530, 531, 532, 533, 534, 535, 536, 538, 539, 540, 542, 543, 544, 545, 546, 551, 552, 553, 554, 557, 558, 561, 589, 601, 602, 608, 609, 633, 635, 637, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 672, 674, 675, 676, 677, 678, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 702, 703, 706, 715, 717, 732, 734, 740, 771, 775, 776, 790, 792, 794, 795, 827, 836, 837, 839, 840, 841, 842, 843, 844, 845, 847, 848, 849, 850, 851, 852, 855, 860, 864, 866, 879, 883, 895, 899, 900, 901, 902, 903, 904, 905, 907, 908, 919, 935, 936, 938, 952, 956, 962, 977, 979, 982, 984, 985, 986, 987, 989, 992, 993, 997, 1000, 1001, 1002, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1015, 1016, 1018, 1020, 1021, 1023, 1027, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "illustr": [9, 24, 25, 27, 32, 34, 53, 57, 58, 71, 72, 75, 76, 79, 81, 87, 93, 98, 112, 115, 120, 127, 129, 131, 132, 143, 148, 150, 151, 152, 153, 154, 156, 157, 158, 159, 161, 164, 166, 168, 170, 171, 175, 188, 195, 196, 199, 201, 203, 207, 209, 210, 212, 213, 216, 217, 220, 221, 223, 225, 228, 230, 231, 233, 234, 235, 237, 245, 249, 260, 267, 272, 273, 284, 292, 297, 308, 310, 314, 315, 317, 328, 338, 339, 343, 344, 346, 347, 352, 353, 359, 362, 366, 376, 379, 384, 387, 392, 410, 412, 414, 415, 513, 608, 609, 611, 612, 613, 617, 620, 621, 848, 976, 983, 987, 990, 993, 999, 1000, 1001, 1002, 1008, 1011, 1012], "robust": [9, 35, 62, 64, 78, 80, 84, 103, 123, 125, 148, 164, 166, 169, 170, 177, 189, 201, 203, 216, 218, 228, 238, 274, 305, 321, 368, 376, 381, 387, 407, 414, 415, 444, 446, 467, 468, 471, 472, 473, 474, 522, 532, 557, 558, 647, 655, 668, 669, 676, 677, 747, 829, 860, 874, 876, 877, 888, 894, 934, 987, 991, 993, 997, 1000, 1001, 1006, 1008, 1009, 1011, 1022, 1023, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1043], "covari": [9, 12, 30, 34, 36, 80, 84, 86, 103, 106, 127, 128, 151, 158, 202, 228, 244, 246, 248, 249, 250, 251, 252, 267, 294, 322, 388, 393, 398, 407, 410, 412, 417, 480, 481, 482, 483, 502, 513, 517, 525, 530, 532, 539, 546, 547, 548, 561, 608, 609, 611, 620, 621, 629, 642, 643, 648, 652, 654, 680, 681, 684, 687, 691, 794, 795, 796, 815, 986, 993, 997, 1008, 1009, 1022, 1023, 1027, 1029, 1030, 1031, 1032, 1034, 1036], "wine": [9, 241, 310, 311, 372, 508, 1023], "tool": [9, 11, 123, 169, 235, 258, 263, 362, 372, 373, 374, 377, 379, 381, 382, 383, 384, 385, 386, 387, 392, 393, 394, 396, 397, 398, 401, 407, 408, 409, 485, 690, 699, 976, 982, 983, 987, 993, 997, 1002, 1004, 1006, 1007, 1011, 1012, 1021, 1034, 1037, 1040, 1041, 1042], "purpos": [9, 12, 17, 38, 87, 123, 163, 213, 214, 215, 220, 222, 236, 248, 250, 256, 257, 338, 339, 346, 351, 352, 362, 374, 379, 381, 392, 393, 394, 397, 400, 404, 407, 408, 412, 414, 415, 416, 417, 636, 821, 822, 859, 984, 987, 988, 990, 993, 1006, 1012, 1039, 1041], "awar": [9, 15, 145, 160, 335, 351, 377, 379, 381, 391, 394, 411, 415, 565, 566, 646, 652, 653, 654, 656, 657, 667, 678, 845, 874, 993, 997, 1003, 1024, 1027, 1028, 1041], "thing": [9, 35, 221, 255, 351, 367, 368, 374, 378, 379, 381, 391, 394, 407, 409, 415, 557, 558, 983, 997, 1011, 1033], "trivial": [9, 201, 356, 379, 407, 814, 901, 904, 984, 1007, 1027], "dimens": [9, 12, 13, 15, 38, 41, 54, 83, 86, 91, 96, 148, 153, 155, 157, 159, 170, 182, 183, 197, 222, 224, 228, 232, 233, 239, 246, 247, 287, 288, 292, 308, 342, 351, 352, 353, 374, 376, 380, 393, 406, 407, 412, 413, 417, 419, 440, 441, 443, 445, 446, 447, 450, 462, 463, 480, 481, 482, 491, 492, 513, 522, 523, 527, 528, 531, 539, 547, 580, 581, 582, 583, 585, 587, 595, 609, 617, 620, 639, 642, 657, 688, 689, 690, 692, 693, 697, 761, 820, 839, 840, 844, 858, 891, 892, 893, 901, 902, 903, 904, 905, 919, 920, 921, 950, 958, 961, 977, 979, 981, 983, 984, 985, 988, 990, 991, 993, 999, 1002, 1012, 1019, 1020, 1034, 1036, 1037, 1039], "below": [9, 13, 26, 27, 28, 33, 35, 56, 61, 71, 76, 81, 90, 91, 96, 110, 116, 119, 120, 125, 143, 168, 170, 182, 195, 196, 199, 201, 215, 216, 221, 225, 230, 235, 238, 240, 242, 255, 258, 263, 265, 266, 267, 305, 309, 315, 316, 317, 318, 319, 320, 321, 322, 343, 351, 360, 362, 367, 372, 373, 377, 379, 381, 383, 384, 388, 393, 394, 397, 407, 409, 410, 411, 412, 414, 415, 416, 417, 444, 446, 469, 470, 476, 489, 490, 492, 493, 494, 495, 496, 498, 499, 500, 502, 503, 508, 529, 535, 540, 546, 580, 593, 594, 595, 596, 597, 598, 631, 644, 650, 656, 657, 665, 666, 671, 673, 690, 697, 703, 740, 760, 794, 795, 796, 807, 810, 828, 859, 862, 872, 873, 876, 882, 888, 976, 977, 981, 982, 983, 984, 986, 987, 988, 989, 990, 991, 993, 994, 995, 997, 1001, 1002, 1003, 1004, 1006, 1014, 1021, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040], "main": [9, 17, 33, 63, 87, 100, 122, 166, 228, 269, 281, 314, 346, 351, 366, 367, 368, 372, 377, 379, 381, 383, 385, 387, 391, 392, 393, 396, 397, 405, 406, 407, 412, 414, 415, 417, 501, 523, 528, 547, 548, 623, 711, 829, 899, 900, 976, 984, 986, 987, 994, 999, 1007, 1010, 1018, 1021, 1027, 1030, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "empir": [9, 13, 25, 26, 35, 37, 43, 44, 60, 64, 65, 69, 78, 80, 81, 83, 84, 166, 179, 217, 266, 305, 405, 411, 414, 417, 445, 447, 458, 467, 468, 469, 472, 475, 476, 530, 532, 537, 539, 541, 547, 549, 563, 588, 601, 637, 647, 665, 669, 676, 677, 714, 719, 720, 721, 824, 834, 835, 836, 838, 857, 880, 922, 961, 979, 981, 987, 989, 991, 997, 999, 1001, 1008, 1022, 1023], "mode": [9, 10, 47, 48, 81, 199, 228, 283, 285, 302, 315, 379, 382, 387, 388, 391, 404, 410, 414, 418, 441, 442, 445, 447, 450, 457, 460, 469, 470, 476, 480, 485, 506, 507, 555, 559, 562, 590, 593, 594, 596, 597, 598, 608, 625, 642, 643, 656, 657, 664, 666, 671, 672, 673, 674, 677, 680, 681, 687, 691, 841, 842, 843, 845, 847, 849, 850, 851, 852, 853, 855, 899, 901, 904, 907, 909, 925, 935, 936, 938, 990, 993, 1006, 1012, 1013, 1020, 1028, 1036, 1041, 1044], "stick": [9, 794, 986], "bias": [9, 28, 83, 99, 125, 131, 168, 169, 171, 265, 374, 396, 405, 414, 522, 547, 855, 879, 890, 982, 986, 995, 1001, 1003], "yet": [9, 58, 183, 217, 250, 261, 353, 368, 374, 378, 383, 391, 396, 397, 398, 411, 412, 414, 415, 417, 446, 450, 459, 460, 463, 470, 551, 552, 553, 554, 565, 566, 567, 568, 575, 591, 592, 600, 669, 671, 673, 775, 858, 896, 971, 976, 983, 987, 993, 1001, 1007, 1036, 1044], "extent": [9, 59, 153, 154, 155, 232, 344, 347, 438, 533, 694, 794, 987], "assum": [9, 35, 56, 58, 158, 164, 168, 169, 188, 199, 217, 228, 231, 251, 260, 269, 305, 346, 353, 367, 378, 379, 381, 383, 385, 391, 392, 393, 396, 401, 404, 405, 407, 409, 411, 412, 414, 415, 417, 418, 423, 428, 435, 437, 442, 444, 448, 455, 461, 467, 468, 469, 470, 471, 472, 473, 474, 501, 506, 507, 530, 540, 546, 547, 559, 560, 565, 566, 585, 586, 587, 589, 618, 630, 641, 642, 644, 645, 650, 656, 657, 658, 659, 660, 664, 665, 666, 669, 670, 674, 675, 676, 679, 683, 685, 686, 690, 707, 723, 732, 738, 753, 761, 766, 771, 775, 778, 796, 799, 800, 810, 835, 841, 842, 845, 846, 847, 849, 850, 855, 866, 879, 947, 963, 964, 965, 977, 981, 983, 985, 986, 987, 989, 990, 992, 993, 994, 997, 1001, 1003, 1033, 1039], "parametr": [9, 25, 26, 83, 231, 287, 309, 318, 405, 408, 413, 414, 435, 549, 551, 633, 683, 694, 875, 887, 930, 931, 983, 986, 989, 990, 997, 1000, 1003, 1035, 1037, 1040], "minimum": [9, 13, 56, 58, 81, 125, 126, 147, 188, 209, 232, 238, 270, 289, 290, 381, 388, 397, 400, 404, 407, 414, 415, 439, 443, 444, 448, 452, 454, 467, 468, 471, 472, 473, 474, 509, 511, 539, 550, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 592, 625, 629, 630, 633, 635, 666, 669, 674, 676, 677, 680, 681, 690, 703, 722, 776, 777, 799, 800, 820, 835, 856, 857, 868, 869, 872, 873, 874, 878, 892, 893, 906, 907, 908, 909, 910, 916, 919, 920, 923, 939, 984, 987, 991, 993, 997, 999, 1003, 1027, 1030, 1034, 1035, 1039, 1040, 1044], "determin": [9, 11, 14, 20, 47, 56, 81, 112, 114, 118, 156, 169, 178, 179, 195, 202, 260, 305, 310, 342, 353, 360, 362, 378, 379, 381, 388, 392, 393, 404, 405, 407, 411, 412, 414, 415, 416, 417, 430, 435, 439, 440, 441, 443, 445, 447, 448, 454, 457, 458, 459, 463, 467, 468, 470, 471, 472, 473, 474, 480, 481, 482, 486, 489, 490, 493, 495, 501, 506, 507, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 535, 537, 540, 541, 550, 551, 552, 554, 556, 557, 558, 559, 560, 561, 563, 565, 566, 568, 580, 581, 582, 586, 589, 592, 600, 605, 606, 608, 609, 610, 611, 612, 613, 614, 617, 618, 619, 620, 621, 622, 623, 625, 633, 634, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 670, 671, 672, 673, 674, 676, 677, 678, 685, 687, 688, 690, 691, 692, 705, 709, 720, 726, 727, 735, 780, 781, 782, 784, 785, 790, 796, 798, 799, 800, 802, 810, 818, 819, 820, 821, 822, 823, 824, 826, 830, 832, 833, 835, 842, 844, 845, 850, 855, 856, 857, 863, 864, 872, 873, 874, 876, 880, 888, 899, 900, 902, 905, 908, 910, 913, 934, 950, 956, 958, 961, 976, 979, 981, 986, 990, 992, 993, 995, 997, 1000, 1001, 1003, 1012, 1027, 1032, 1035, 1036, 1038, 1039, 1040], "outli": [9, 81, 393, 467, 472, 983, 993], "skew": [9, 125, 202, 232, 238, 305, 321, 371, 411, 637, 638, 639, 640, 875, 887, 983, 997, 1023, 1030, 1034, 1043], "Of": [9, 26, 28, 163, 366, 381, 407, 415, 977], "screen": [9, 1040], "presenc": [9, 61, 63, 81, 82, 110, 168, 172, 183, 203, 238, 305, 377, 380, 393, 409, 412, 710, 723, 753, 766, 828, 862, 870, 872, 879, 971, 977, 983, 987, 988, 1001, 1030, 1031, 1033, 1037, 1039, 1041], "univari": [9, 10, 37, 48, 69, 73, 75, 142, 143, 145, 149, 166, 181, 198, 214, 273, 333, 349, 371, 406, 407, 408, 415, 443, 502, 523, 528, 590, 593, 594, 596, 597, 598, 600, 603, 604, 605, 606, 607, 625, 626, 627, 628, 643, 796, 801, 821, 825, 859, 860, 869, 874, 878, 879, 899, 904, 983, 1002, 1004, 1008, 1009, 1020, 1023, 1027, 1033], "appli": [9, 13, 15, 20, 26, 28, 33, 41, 45, 47, 48, 56, 57, 59, 63, 72, 74, 76, 87, 91, 96, 97, 102, 104, 106, 117, 118, 123, 125, 144, 151, 169, 171, 183, 188, 203, 204, 213, 220, 221, 222, 228, 233, 235, 260, 261, 263, 272, 281, 292, 305, 309, 310, 316, 338, 342, 353, 360, 362, 366, 371, 379, 381, 387, 391, 392, 393, 404, 405, 406, 407, 408, 409, 411, 412, 414, 415, 416, 417, 419, 438, 444, 450, 460, 462, 463, 465, 467, 472, 480, 481, 482, 483, 506, 507, 514, 515, 516, 522, 529, 530, 531, 532, 533, 535, 537, 539, 540, 541, 546, 547, 548, 551, 552, 555, 556, 557, 558, 562, 563, 564, 586, 587, 588, 589, 625, 630, 631, 636, 637, 639, 640, 656, 657, 666, 674, 675, 676, 689, 697, 699, 705, 723, 753, 755, 756, 778, 785, 789, 790, 796, 810, 825, 828, 834, 835, 836, 837, 838, 848, 858, 859, 868, 875, 876, 879, 884, 885, 887, 888, 889, 890, 895, 906, 907, 908, 909, 910, 919, 925, 928, 935, 936, 959, 977, 979, 983, 984, 985, 986, 987, 989, 991, 993, 995, 997, 1001, 1002, 1003, 1004, 1005, 1011, 1028, 1031, 1032, 1033, 1034, 1035, 1038, 1039, 1041], "ellipticenvelop": [9, 228, 468, 471, 472, 473, 474, 561, 993, 1027, 1030, 1034, 1035, 1040], "decisionboundarydisplai": [9, 31, 32, 35, 57, 114, 128, 133, 182, 191, 208, 213, 263, 286, 291, 294, 310, 334, 335, 336, 337, 339, 340, 342, 357, 1041, 1042, 1044], "oneclasssvm": [9, 11, 17, 213, 228, 318, 337, 561, 675, 845, 993, 1001, 1002, 1029, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042], "support_fract": [9, 467, 472], "contamin": [9, 81, 82, 228, 238, 289, 290, 467, 561, 845, 993, 1035, 1043, 1044], "ocsvm": [9, 213], "line": [9, 11, 13, 17, 18, 41, 44, 61, 71, 81, 92, 96, 101, 112, 118, 124, 150, 161, 163, 164, 166, 169, 170, 187, 188, 189, 191, 194, 195, 197, 200, 201, 202, 207, 208, 210, 211, 213, 228, 232, 233, 236, 238, 257, 264, 266, 267, 289, 293, 296, 306, 317, 337, 340, 342, 343, 347, 348, 351, 373, 374, 377, 379, 380, 381, 383, 384, 385, 386, 387, 391, 412, 413, 414, 436, 485, 486, 487, 506, 507, 540, 551, 552, 553, 554, 608, 611, 612, 630, 668, 684, 698, 699, 700, 802, 818, 955, 981, 987, 991, 994, 1001, 1006, 1008, 1010, 1019, 1021, 1029, 1038, 1040, 1043, 1044], "mline": [9, 81, 213, 289, 337, 340], "load_win": [9, 241, 310, 843, 851, 1024, 1038], "red": [9, 10, 11, 27, 34, 35, 61, 81, 93, 96, 97, 98, 115, 132, 135, 160, 175, 178, 179, 189, 197, 225, 239, 255, 266, 296, 300, 306, 310, 311, 327, 338, 359, 377, 393, 407, 412, 988], "frontier": [9, 213, 289, 337, 993, 1019], "legend_lin": 9, "response_method": [9, 31, 35, 57, 114, 128, 133, 182, 191, 208, 213, 263, 286, 291, 294, 310, 334, 335, 337, 342, 357, 629, 630, 631, 696, 698, 700, 739, 987, 1044], "decision_funct": [9, 11, 17, 26, 28, 57, 114, 128, 140, 211, 212, 213, 229, 235, 238, 267, 289, 290, 299, 307, 322, 336, 337, 338, 342, 343, 344, 348, 381, 393, 405, 414, 435, 467, 547, 548, 551, 553, 557, 559, 561, 565, 591, 592, 629, 630, 631, 656, 657, 664, 666, 672, 673, 674, 675, 696, 698, 700, 705, 718, 723, 724, 732, 736, 737, 739, 753, 779, 785, 786, 791, 796, 799, 800, 810, 820, 827, 828, 829, 830, 845, 859, 866, 896, 899, 901, 903, 904, 983, 987, 993, 994, 1001, 1002, 1019, 1027, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1044], "plot_method": [9, 35, 182, 213, 286, 291, 334, 336, 337, 339, 340, 342, 629], "contour": [9, 11, 17, 35, 47, 48, 81, 121, 140, 148, 154, 155, 157, 210, 211, 212, 213, 228, 233, 249, 289, 296, 336, 337, 339, 340, 342, 343, 344, 376, 386, 629, 630, 993, 1001], "line2d": [9, 81, 213, 289, 337, 340, 802, 818], "bbox_arg": 9, "dict": [9, 10, 11, 12, 18, 27, 40, 46, 71, 74, 75, 102, 118, 123, 125, 127, 197, 205, 228, 237, 247, 258, 259, 261, 264, 267, 269, 283, 287, 307, 311, 319, 329, 338, 352, 353, 368, 371, 373, 381, 391, 393, 408, 411, 418, 419, 421, 425, 429, 431, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 455, 462, 463, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 494, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 686, 687, 688, 689, 690, 695, 696, 698, 699, 700, 711, 759, 762, 768, 776, 777, 794, 795, 796, 799, 800, 802, 807, 808, 810, 818, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 891, 892, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 914, 924, 925, 941, 944, 947, 976, 987, 997, 1016, 1017, 1021, 1023, 1027, 1033, 1034, 1043, 1044], "boxstyl": [9, 307], "fc": [9, 288, 374], "arrow_arg": 9, "arrowstyl": 9, "xy": [9, 27, 50, 267, 296, 343, 397, 644, 645, 648, 649, 650, 651, 652, 653, 658, 659, 660, 661, 662, 679, 680, 681, 682, 684], "xycoord": [9, 27], "textcoord": [9, 175], "xytext": [9, 27, 175], "bbox": [9, 12, 35, 46, 102, 245, 246, 247, 250, 251, 307], "arrowprop": [9, 27], "ash": [9, 376, 1030, 1033], "malic_acid": 9, "abil": [9, 13, 62, 81, 97, 125, 150, 151, 152, 156, 158, 159, 160, 161, 163, 166, 168, 169, 171, 199, 203, 217, 228, 351, 368, 397, 414, 415, 417, 609, 620, 623, 779, 780, 781, 784, 785, 984, 987, 990, 993, 1003, 1007, 1008, 1027, 1029, 1034, 1036, 1040, 1041], "locat": [9, 26, 54, 55, 73, 81, 82, 193, 296, 317, 338, 372, 374, 377, 379, 383, 384, 387, 388, 397, 407, 409, 413, 446, 458, 459, 467, 468, 469, 470, 471, 472, 473, 474, 486, 498, 499, 502, 503, 510, 513, 972, 977, 983, 988, 993, 997, 1003, 1035], "hard": [9, 199, 228, 232, 260, 262, 368, 378, 391, 393, 407, 412, 415, 532, 539, 567, 674, 901, 902, 903, 904, 905, 983, 1000, 1002, 1003, 1007, 1019, 1020, 1021, 1036, 1037], "due": [9, 13, 27, 28, 54, 56, 61, 76, 112, 115, 151, 169, 170, 178, 183, 190, 197, 199, 201, 216, 217, 232, 238, 246, 268, 269, 281, 283, 310, 311, 342, 346, 351, 352, 353, 377, 379, 385, 393, 397, 405, 407, 411, 412, 414, 417, 441, 444, 445, 457, 533, 537, 541, 542, 572, 669, 796, 799, 800, 804, 806, 810, 820, 821, 824, 827, 831, 832, 864, 868, 869, 879, 977, 983, 984, 986, 987, 988, 990, 994, 1001, 1002, 1007, 1020, 1027, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "banana": [9, 987], "anywai": [9, 351, 381, 663, 683, 684], "rid": [9, 1001], "difficulti": [9, 28, 217, 305, 368, 379, 405, 856, 857, 986, 990], "bandwidth": [9, 45, 64, 234, 287, 288, 296, 391, 393, 407, 413, 446, 456, 459, 839, 840, 844, 980, 993, 1038, 1042], "compromis": [9, 170, 366, 379, 645, 677, 990, 1030], "risk": [9, 56, 199, 203, 217, 306, 346, 362, 378, 379, 393, 406, 411, 414, 565, 566, 884, 885, 887, 888, 889, 890, 983, 987, 1011, 1034], "flavanoid": [9, 376], "color_intens": 9, "453": [9, 16, 1008], "plot_outlier_detection_win": [9, 16, 1008], "anomali": [9, 81, 128, 166, 213, 216, 227, 238, 243, 289, 290, 374, 406, 467, 510, 520, 561, 637, 675, 845, 860, 903, 993, 1006, 1008, 1033, 1034], "toi": [9, 21, 37, 40, 41, 42, 43, 48, 50, 53, 54, 56, 57, 58, 68, 69, 81, 87, 100, 115, 128, 133, 134, 166, 181, 189, 203, 213, 216, 227, 238, 243, 245, 289, 290, 300, 335, 345, 372, 385, 391, 414, 415, 438, 439, 440, 442, 444, 446, 447, 448, 450, 456, 467, 510, 512, 520, 561, 637, 675, 723, 753, 795, 845, 852, 860, 879, 903, 984, 986, 987, 993, 997, 1008, 1023], "lof": [9, 166, 213, 228, 238, 284, 297, 337, 561, 845, 903, 993, 1008], "discrimin": [9, 10, 15, 30, 36, 79, 80, 81, 82, 83, 104, 143, 145, 148, 166, 175, 214, 221, 236, 250, 292, 376, 405, 414, 473, 510, 547, 548, 564, 629, 780, 848, 976, 984, 987, 990, 1001, 1003, 1008, 1009, 1019, 1023, 1030], "ellipsoid": [9, 30, 34, 36, 81, 82, 83, 166, 244, 245, 247, 248, 249, 250, 251, 252, 547, 548, 629, 794, 795, 981, 986, 1008], "mahalanobi": [9, 78, 82, 84, 103, 166, 202, 407, 409, 448, 455, 467, 468, 469, 470, 471, 472, 473, 474, 697, 775, 776, 777, 846, 981, 993, 1008, 1035, 1038, 1039], "distanc": [9, 40, 41, 56, 58, 61, 62, 66, 68, 78, 82, 84, 101, 103, 148, 163, 166, 172, 185, 200, 202, 220, 222, 225, 232, 238, 283, 285, 286, 291, 293, 295, 296, 305, 310, 315, 319, 320, 342, 351, 352, 366, 376, 388, 391, 393, 404, 407, 409, 412, 413, 417, 418, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 450, 453, 454, 455, 456, 457, 459, 460, 461, 466, 467, 468, 469, 470, 471, 472, 473, 474, 536, 538, 545, 605, 606, 613, 617, 618, 620, 621, 626, 656, 657, 664, 666, 672, 673, 674, 675, 676, 686, 687, 688, 690, 691, 692, 693, 694, 697, 701, 722, 731, 755, 757, 759, 760, 761, 762, 765, 766, 767, 768, 769, 770, 775, 776, 777, 778, 789, 790, 793, 828, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 854, 878, 893, 897, 899, 901, 903, 904, 905, 907, 908, 909, 910, 977, 981, 984, 985, 987, 993, 997, 999, 1001, 1002, 1007, 1008, 1019, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "goal": [10, 18, 21, 53, 58, 87, 163, 170, 175, 199, 214, 217, 237, 238, 257, 258, 351, 367, 368, 374, 381, 384, 385, 393, 394, 396, 412, 416, 540, 546, 588, 591, 736, 987, 990, 992, 993, 1001, 1002, 1003, 1011, 1012, 1015, 1019, 1021, 1035], "boxplot": [10, 81, 126, 169, 172, 315], "gc": 10, "defaultdict": [10, 13, 20, 26, 172, 263, 352, 353], "make_regress": [10, 76, 178, 180, 181, 185, 202, 203, 273, 316, 322, 362, 375, 381, 382, 392, 552, 554, 558, 563, 604, 606, 607, 633, 644, 645, 647, 649, 651, 653, 661, 662, 663, 665, 669, 677, 685, 857, 900, 987, 988, 990], "randomforestregressor": [10, 118, 131, 132, 135, 163, 164, 317, 322, 392, 414, 555, 556, 558, 560, 564, 566, 568, 630, 631, 909, 977, 1032, 1033, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044], "sgdregressor": [10, 210, 366, 368, 391, 406, 644, 647, 665, 669, 674, 677, 857, 900, 905, 983, 1001, 1029, 1031, 1033, 1034, 1035, 1038, 1040, 1041, 1042, 1043], "shuffl": [10, 13, 15, 21, 22, 25, 28, 33, 49, 61, 62, 96, 118, 119, 121, 132, 164, 183, 207, 208, 213, 228, 261, 265, 266, 273, 283, 312, 325, 326, 327, 328, 340, 351, 352, 362, 374, 388, 393, 402, 467, 472, 486, 487, 489, 490, 493, 495, 501, 509, 510, 511, 512, 513, 517, 520, 522, 529, 535, 537, 538, 544, 545, 551, 552, 553, 554, 562, 563, 565, 566, 600, 603, 605, 656, 657, 664, 665, 666, 670, 672, 674, 675, 676, 685, 796, 798, 799, 800, 801, 802, 810, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 829, 856, 857, 880, 899, 900, 901, 904, 935, 936, 956, 958, 982, 983, 988, 995, 1001, 1002, 1016, 1021, 1023, 1027, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038], "atomic_benchmark_estim": 10, "verbos": [10, 43, 51, 55, 65, 71, 73, 75, 132, 186, 261, 301, 302, 305, 318, 329, 351, 377, 383, 393, 401, 438, 441, 445, 447, 450, 452, 457, 460, 462, 465, 469, 470, 476, 529, 534, 535, 536, 537, 538, 541, 543, 544, 545, 546, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 591, 592, 625, 630, 642, 643, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 674, 675, 676, 677, 678, 679, 680, 681, 682, 685, 688, 690, 692, 762, 775, 794, 795, 796, 799, 800, 802, 810, 818, 820, 821, 822, 823, 824, 826, 828, 830, 833, 848, 855, 856, 857, 858, 859, 860, 861, 896, 899, 900, 901, 902, 903, 904, 905, 953, 1007, 1029, 1030, 1032, 1034, 1035, 1036, 1038, 1039, 1041, 1042], "n_instanc": [10, 631], "zero": [10, 11, 14, 28, 35, 38, 41, 42, 53, 55, 80, 82, 83, 96, 99, 101, 114, 115, 124, 126, 127, 131, 145, 148, 164, 178, 183, 185, 190, 192, 193, 198, 199, 200, 203, 204, 205, 209, 214, 217, 232, 235, 236, 238, 245, 249, 251, 257, 260, 265, 269, 270, 288, 305, 316, 317, 342, 346, 352, 353, 356, 360, 366, 367, 374, 381, 385, 393, 405, 406, 407, 409, 412, 414, 415, 416, 417, 420, 444, 450, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 485, 495, 506, 507, 521, 524, 525, 529, 530, 533, 535, 536, 537, 538, 540, 541, 545, 546, 550, 555, 556, 557, 558, 559, 560, 562, 563, 564, 579, 583, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 605, 606, 609, 634, 637, 641, 642, 643, 648, 656, 657, 662, 663, 664, 665, 666, 669, 674, 675, 676, 683, 684, 701, 707, 710, 711, 713, 714, 722, 726, 727, 731, 735, 737, 743, 780, 781, 782, 784, 793, 794, 811, 812, 815, 816, 828, 839, 840, 841, 842, 843, 845, 847, 848, 849, 850, 851, 852, 853, 854, 855, 862, 869, 871, 872, 874, 875, 876, 878, 879, 885, 886, 887, 888, 892, 899, 907, 908, 909, 910, 934, 962, 973, 977, 983, 985, 986, 989, 990, 991, 997, 998, 999, 1001, 1002, 1003, 1012, 1019, 1021, 1027, 1029, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "atomic_benchmark": 10, "percentil": [10, 13, 72, 125, 238, 242, 305, 366, 590, 593, 594, 596, 597, 598, 601, 604, 630, 631, 745, 997, 1032, 1040], "bulk_benchmark_estim": 10, "n_bulk_repeat": 10, "whole": [10, 51, 75, 135, 164, 200, 257, 264, 338, 342, 356, 366, 377, 379, 391, 392, 408, 410, 414, 417, 447, 481, 536, 553, 554, 555, 556, 561, 562, 563, 564, 568, 683, 684, 796, 799, 800, 810, 823, 834, 835, 836, 837, 838, 976, 987, 997, 1021, 1035, 1037], "bulk_benchmark": 10, "benchmark_estim": 10, "repeat": [10, 34, 67, 80, 82, 124, 148, 151, 157, 158, 170, 175, 201, 255, 260, 261, 272, 278, 326, 352, 353, 381, 388, 393, 394, 404, 405, 406, 407, 412, 415, 416, 586, 591, 605, 606, 613, 625, 632, 657, 801, 811, 812, 815, 925, 977, 986, 1023, 1035, 1037], "atomic_runtim": 10, "bulk_runtim": 10, "pair": [10, 13, 38, 45, 59, 65, 101, 114, 116, 121, 125, 140, 155, 159, 179, 182, 191, 208, 211, 217, 232, 255, 260, 267, 269, 330, 334, 336, 338, 339, 340, 342, 344, 352, 357, 374, 391, 393, 404, 405, 408, 411, 415, 417, 435, 438, 439, 443, 448, 455, 461, 469, 470, 476, 491, 506, 507, 580, 590, 593, 594, 596, 597, 598, 608, 611, 612, 613, 615, 617, 618, 620, 621, 623, 625, 630, 631, 641, 690, 697, 698, 703, 704, 705, 713, 728, 737, 755, 756, 760, 763, 766, 767, 768, 769, 770, 771, 773, 775, 776, 777, 778, 779, 783, 827, 839, 840, 914, 987, 988, 989, 990, 997, 1003, 1027, 1039, 1040, 1042, 1043, 1044], "contain": [10, 13, 20, 25, 28, 34, 41, 50, 57, 59, 71, 72, 114, 116, 120, 128, 157, 169, 170, 172, 175, 190, 203, 217, 228, 235, 238, 239, 242, 250, 258, 260, 266, 269, 270, 281, 289, 290, 292, 305, 318, 326, 329, 351, 352, 372, 373, 374, 376, 379, 381, 383, 384, 385, 386, 387, 388, 392, 393, 401, 405, 406, 407, 408, 410, 411, 412, 414, 415, 416, 417, 419, 421, 431, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 460, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 494, 498, 500, 501, 502, 506, 507, 508, 512, 513, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 683, 684, 686, 687, 688, 689, 690, 694, 695, 696, 698, 699, 700, 707, 710, 732, 733, 734, 769, 776, 777, 785, 791, 794, 795, 796, 799, 800, 802, 810, 814, 815, 818, 822, 823, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 858, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 891, 892, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 914, 915, 918, 919, 920, 939, 940, 942, 943, 950, 954, 956, 976, 977, 979, 985, 988, 991, 993, 995, 997, 998, 1000, 1003, 1006, 1010, 1012, 1021, 1027, 1029, 1030, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044], "generate_dataset": 10, "coef": [10, 55, 105, 168, 169, 178, 183, 186, 190, 191, 193, 198, 202, 203, 204, 208, 215, 242, 273, 301, 321, 347, 522, 644, 645, 647, 650, 651, 657, 658, 659, 660, 661, 667, 670, 672, 678, 679, 680, 681, 682, 683, 684, 685, 991], "random_se": [10, 93, 121], "x_scaler": 10, "y_scaler": 10, "ok": [10, 379, 993], "boxplot_runtim": 10, "pred_typ": 10, "micro": [10, 296, 329, 366, 705, 711, 726, 727, 735, 780, 781, 784, 785, 987, 1027, 1035, 1036, 1042], "bp": [10, 126, 148, 187, 188, 376, 995], "cls_info": 10, "estimator_conf": 10, "whisker": 10, "flier": 10, "marker": [10, 11, 18, 28, 31, 35, 38, 39, 43, 53, 56, 59, 60, 61, 64, 65, 86, 92, 93, 98, 118, 131, 158, 159, 175, 187, 192, 194, 196, 197, 199, 201, 202, 214, 216, 221, 245, 247, 248, 255, 260, 262, 263, 264, 290, 305, 310, 327, 356, 379, 383, 415, 1035, 1037, 1038, 1043], "linestyl": [10, 11, 17, 34, 61, 74, 81, 103, 105, 112, 124, 134, 138, 140, 151, 154, 156, 158, 160, 171, 172, 184, 186, 187, 188, 199, 200, 201, 205, 209, 211, 212, 217, 236, 238, 257, 259, 263, 264, 269, 288, 296, 300, 306, 336, 339, 340, 342, 343, 344, 346, 1017], "major": [10, 15, 35, 118, 267, 305, 309, 315, 316, 317, 318, 319, 320, 321, 322, 342, 353, 366, 374, 378, 379, 382, 385, 391, 394, 407, 411, 413, 415, 549, 567, 568, 692, 911, 913, 987, 990, 1001, 1007, 1011, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "lightgrei": 10, "set_axisbelow": 10, "capit": [10, 26, 322, 494, 802, 818], "clf_name": [10, 351], "n_feature_influ": 10, "nber": 10, "estimator_nam": [10, 207, 381, 386, 436, 574, 696, 698, 700, 918], "percentile_perf_in_u": 10, "plot_n_features_influ": 10, "il": [10, 662, 683, 684, 983, 987], "benchmark_throughput": 10, "duration_sec": 10, "estimator_config": 10, "n_predict": 10, "plot_benchmark_throughput": 10, "cls_valu": 10, "sec": [10, 207, 222, 225, 283], "1e2": [10, 151, 158, 234, 251, 338, 743], "randomforest": [10, 121, 366, 414, 907, 908, 1032], "0001": [10, 148, 207, 258, 381, 419, 441, 445, 457, 469, 470, 476, 531, 536, 538, 545, 547, 548, 557, 558, 644, 645, 646, 647, 650, 651, 656, 657, 658, 659, 660, 661, 666, 667, 670, 672, 674, 676, 678, 685, 687, 691, 856, 857, 899, 900, 976], "250": [10, 66, 125, 175, 198, 218, 220, 342, 491, 690, 976, 999, 1008, 1034], "500": [10, 45, 51, 58, 61, 62, 64, 86, 87, 103, 105, 116, 118, 126, 147, 151, 175, 212, 213, 221, 239, 240, 245, 246, 250, 260, 263, 273, 283, 289, 295, 309, 316, 321, 322, 344, 348, 366, 414, 420, 467, 468, 472, 473, 474, 479, 480, 481, 482, 609, 611, 612, 614, 619, 622, 623, 648, 649, 652, 653, 654, 678, 680, 681, 857, 976, 1002], "722": [10, 16, 128, 136, 289, 297, 1008], "plot_prediction_lat": [10, 16, 1008], "anova": [10, 55, 75, 142, 144, 147, 148, 149, 166, 258, 333, 349, 408, 502, 513, 590, 593, 594, 596, 597, 598, 602, 603, 604, 607, 711, 821, 825, 859, 860, 879, 899, 904, 1002, 1008], "ledoit": [10, 15, 30, 35, 36, 78, 79, 82, 83, 84, 166, 292, 471, 473, 477, 478, 510, 547, 981, 1008], "wolf": [10, 15, 30, 35, 36, 78, 79, 82, 83, 84, 166, 292, 471, 473, 477, 478, 510, 547, 981, 1008, 1034], "oa": [10, 15, 30, 35, 36, 78, 82, 83, 84, 103, 127, 166, 292, 294, 409, 467, 468, 471, 472, 474, 475, 510, 547, 796, 981, 1008], "singl": [10, 35, 40, 49, 53, 54, 56, 59, 62, 63, 73, 98, 111, 112, 113, 121, 122, 131, 136, 148, 151, 157, 163, 166, 170, 172, 175, 183, 199, 201, 203, 239, 241, 250, 256, 269, 278, 301, 319, 321, 338, 351, 352, 353, 357, 359, 362, 366, 367, 373, 374, 379, 384, 386, 387, 388, 391, 392, 393, 405, 406, 408, 410, 411, 412, 414, 415, 416, 432, 435, 438, 439, 443, 444, 445, 447, 452, 462, 464, 465, 491, 492, 494, 504, 507, 532, 551, 554, 555, 556, 557, 558, 559, 560, 562, 563, 564, 580, 590, 597, 598, 600, 604, 625, 630, 632, 641, 664, 665, 671, 674, 675, 676, 688, 690, 692, 708, 719, 720, 721, 722, 733, 734, 735, 738, 771, 782, 794, 795, 796, 799, 800, 810, 817, 821, 822, 824, 825, 828, 836, 839, 840, 844, 856, 857, 858, 868, 869, 872, 873, 874, 879, 880, 894, 895, 907, 908, 909, 910, 915, 945, 951, 955, 974, 976, 982, 983, 984, 987, 988, 990, 992, 994, 995, 997, 1001, 1002, 1003, 1006, 1008, 1011, 1012, 1019, 1021, 1027, 1028, 1029, 1031, 1033, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "versu": [10, 32, 98, 111, 121, 130, 132, 136, 138, 140, 153, 166, 169, 177, 208, 214, 218, 228, 233, 234, 236, 248, 253, 255, 276, 278, 289, 291, 299, 307, 324, 329, 331, 335, 336, 337, 341, 342, 407, 411, 414, 417, 502, 532, 554, 608, 629, 637, 656, 657, 664, 666, 672, 673, 674, 675, 780, 796, 801, 821, 831, 860, 895, 896, 903, 904, 908, 976, 983, 987, 988, 993, 1000, 1001, 1002, 1008, 1019, 1035], "bag": [10, 28, 71, 98, 111, 116, 118, 126, 127, 136, 166, 171, 207, 278, 352, 353, 375, 405, 406, 514, 515, 516, 553, 554, 555, 556, 557, 558, 561, 562, 563, 564, 738, 801, 825, 908, 985, 988, 1008, 1009, 1023, 1027, 1029, 1030, 1031, 1032, 1033, 1040, 1041, 1043], "conserv": [11, 393, 580, 587, 891, 892, 986, 999], "biologi": 11, "south": [11, 169, 296, 374, 413], "american": [11, 12, 71, 82, 374, 407, 409, 413, 414, 415, 467, 472, 728, 879], "mammal": 11, "past": [11, 13, 383, 384, 387, 391, 394, 411, 412, 414, 536, 553, 554, 676, 1011, 1013, 1043], "environment": [11, 183, 217], "unsuccess": 11, "cast": [11, 54, 199, 221, 373, 393, 394, 415, 494, 642, 643, 644, 650, 654, 655, 658, 659, 660, 661, 662, 663, 671, 673, 952, 1034, 1035, 1036, 1037, 1040, 1042], "densiti": [11, 50, 56, 61, 66, 76, 105, 148, 154, 166, 185, 199, 200, 214, 217, 224, 228, 232, 244, 245, 246, 251, 252, 260, 266, 278, 284, 289, 290, 297, 305, 310, 338, 351, 374, 376, 388, 393, 407, 414, 418, 426, 442, 444, 446, 448, 450, 462, 465, 496, 500, 534, 539, 547, 548, 794, 795, 796, 839, 840, 844, 845, 892, 981, 983, 986, 990, 992, 993, 999, 1006, 1008, 1009, 1012, 1022, 1023, 1029, 1031, 1035, 1036, 1042, 1043], "phillip": [11, 296, 374, 496], "2006": [11, 296, 374, 414, 417, 460, 496, 555, 556, 563, 564, 608, 609, 612, 617, 620, 647, 664, 665, 738, 785, 786, 794, 834, 892, 909, 910, 983, 987, 989, 992, 999, 1000], "basemap": [11, 296], "coast": [11, 296], "nation": [11, 81, 296, 374, 846], "boundari": [11, 14, 26, 27, 28, 32, 35, 59, 61, 111, 114, 121, 130, 134, 136, 140, 152, 153, 155, 166, 170, 182, 200, 208, 228, 233, 236, 263, 274, 291, 293, 294, 296, 299, 305, 307, 310, 324, 329, 331, 333, 335, 336, 337, 338, 340, 341, 347, 348, 349, 357, 375, 405, 414, 415, 417, 448, 454, 502, 534, 547, 548, 567, 586, 587, 589, 629, 732, 758, 796, 828, 841, 847, 849, 850, 851, 874, 878, 895, 896, 901, 903, 904, 907, 923, 981, 990, 993, 997, 1000, 1001, 1002, 1008, 1027, 1029, 1031, 1040, 1041, 1042, 1044], "america": [11, 12, 81, 296, 374, 846, 997], "bradypu": [11, 296, 374, 496], "variegatu": [11, 296, 374, 496], "brown": [11, 93, 296, 374, 496, 626, 977, 1032, 1034, 1035, 1036, 1039], "throat": [11, 296, 374, 496], "sloth": [11, 296, 374, 496], "microryzomi": [11, 296, 374, 496], "minutu": [11, 296, 374, 496], "known": [11, 18, 26, 28, 40, 50, 58, 59, 82, 104, 105, 132, 156, 158, 164, 183, 199, 200, 217, 228, 260, 262, 269, 292, 296, 306, 318, 325, 335, 342, 352, 368, 374, 376, 377, 379, 382, 387, 391, 393, 403, 404, 405, 407, 408, 409, 410, 411, 412, 414, 415, 417, 436, 461, 480, 482, 496, 506, 507, 542, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 562, 563, 564, 586, 587, 589, 592, 607, 620, 631, 656, 657, 670, 680, 681, 692, 702, 708, 711, 716, 726, 740, 752, 754, 792, 828, 834, 835, 836, 837, 838, 841, 846, 849, 855, 883, 907, 908, 909, 910, 977, 979, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 997, 1002, 1003, 1012, 1017, 1019, 1020], "forest": [11, 28, 32, 111, 112, 117, 121, 123, 124, 126, 127, 128, 130, 132, 135, 136, 163, 166, 167, 173, 175, 228, 257, 259, 261, 296, 317, 351, 359, 362, 372, 392, 393, 405, 406, 416, 461, 462, 488, 489, 493, 494, 496, 513, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 628, 632, 796, 801, 825, 832, 859, 873, 903, 907, 908, 909, 976, 977, 988, 995, 1007, 1008, 1009, 1023, 1024, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1036, 1044], "rice": [11, 296, 374, 496, 1040], "rat": [11, 296, 374, 496], "rodent": [11, 296, 374, 496], "live": [11, 71, 169, 296, 374, 379, 407, 496, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 1010], "peru": [11, 296, 374, 496], "colombia": [11, 296, 374, 496], "ecuador": [11, 296, 374, 496], "venezuela": [11, 296, 374, 496], "entropi": [11, 240, 272, 296, 317, 325, 326, 362, 374, 407, 414, 419, 496, 531, 555, 562, 605, 606, 656, 715, 733, 734, 738, 792, 907, 909, 983, 984, 987, 991, 1003, 1029, 1031, 1035, 1036, 1041, 1043, 1044], "anderson": [11, 296, 374, 496, 1033, 1039], "schapir": [11, 278, 296, 374, 414, 496, 551, 552], "ecolog": [11, 296, 374, 496], "190": [11, 124, 217, 232, 269, 296, 374, 385, 496], "231": [11, 296, 374, 407, 418, 442, 496, 582], "259": [11, 222, 296, 374, 414, 496, 565, 566], "________________________________________________________________________________": [11, 55, 351], "coastlin": [11, 148, 296, 376], "coverag": [11, 13, 125, 199, 217, 296, 374, 382, 403, 496, 625, 718], "area": [11, 13, 128, 148, 199, 217, 238, 257, 260, 267, 269, 270, 338, 342, 343, 347, 376, 379, 383, 391, 407, 415, 700, 704, 705, 706, 739, 785, 786, 984, 987, 990, 1005, 1029], "roc": [11, 26, 117, 148, 166, 227, 229, 238, 239, 243, 253, 255, 262, 267, 276, 322, 328, 386, 405, 411, 502, 508, 562, 656, 700, 704, 705, 706, 724, 739, 779, 785, 786, 815, 825, 828, 866, 904, 993, 1008, 1024, 1029, 1030, 1032, 1033, 1037, 1039, 1043], "868443": 11, "993919": 11, "elaps": [11, 48, 68, 118, 119, 120, 366, 462, 465, 567, 568, 858, 859, 860, 861], "astro": [11, 158, 220, 248], "washington": [11, 158, 220, 248, 288, 296], "fetch_species_distribut": [11, 296, 1036], "bunch": [11, 372, 373, 374, 462, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 505, 508, 565, 566, 567, 568, 630, 631, 632, 858, 859, 907, 908, 909, 910, 944, 947, 1011, 1021, 1032, 1034, 1037, 1039, 1043], "ll": [11, 56, 120, 255, 296, 379, 391, 530, 539, 979, 990, 1003, 1012], "otherwis": [11, 57, 63, 114, 160, 164, 180, 201, 207, 296, 342, 346, 362, 368, 377, 381, 383, 385, 393, 398, 407, 409, 411, 415, 417, 432, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 447, 449, 451, 452, 462, 463, 465, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 494, 524, 525, 531, 532, 533, 534, 536, 538, 539, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 586, 588, 589, 592, 595, 600, 608, 609, 612, 629, 630, 631, 633, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 683, 684, 688, 690, 694, 695, 696, 698, 700, 701, 705, 707, 711, 712, 721, 723, 724, 725, 726, 727, 735, 738, 749, 751, 752, 753, 763, 771, 775, 778, 779, 780, 781, 782, 784, 785, 786, 789, 790, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 810, 814, 815, 818, 823, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 854, 856, 857, 859, 862, 863, 864, 865, 866, 870, 871, 878, 879, 880, 881, 884, 885, 886, 888, 889, 890, 894, 895, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 912, 914, 920, 922, 935, 936, 946, 948, 971, 973, 982, 983, 984, 987, 990, 991, 993, 994, 997, 999, 1001, 1002, 1006, 1011, 1012, 1029, 1035, 1036, 1037, 1040, 1043], "improvis": [11, 296], "mpl_toolkit": [11, 46, 68, 91, 102, 170, 196, 220, 222, 296], "except": [11, 17, 45, 54, 99, 110, 118, 156, 207, 214, 228, 235, 268, 283, 296, 300, 301, 305, 307, 320, 372, 379, 381, 382, 383, 384, 391, 393, 398, 401, 404, 408, 411, 412, 414, 415, 417, 430, 458, 463, 466, 480, 481, 482, 507, 552, 554, 555, 556, 558, 560, 562, 563, 566, 568, 609, 625, 628, 633, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 658, 659, 660, 661, 662, 663, 665, 668, 670, 671, 676, 677, 685, 709, 775, 803, 832, 833, 839, 840, 842, 845, 850, 856, 857, 863, 877, 879, 897, 900, 902, 905, 908, 910, 918, 940, 971, 973, 983, 987, 1002, 1012, 1020, 1021, 1028, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1044], "importerror": [11, 17, 54, 99, 283, 296, 387], "construct_grid": [11, 296], "func": [11, 76, 117, 169, 179, 217, 296, 379, 408, 463, 697, 863, 997, 1031, 1033, 1035, 1036, 1044], "xgrid": [11, 296], "ygrid": [11, 296], "correspond": [11, 13, 14, 17, 21, 27, 33, 42, 54, 66, 79, 83, 98, 112, 115, 118, 119, 121, 128, 144, 147, 148, 152, 157, 160, 169, 188, 191, 199, 200, 203, 208, 217, 229, 234, 235, 242, 250, 259, 261, 263, 264, 269, 270, 296, 310, 317, 318, 319, 352, 356, 357, 362, 367, 373, 374, 375, 378, 379, 381, 383, 386, 387, 392, 393, 394, 404, 405, 407, 409, 410, 411, 412, 414, 415, 416, 417, 422, 428, 435, 437, 439, 443, 446, 449, 451, 457, 459, 461, 462, 470, 480, 481, 482, 488, 489, 490, 491, 492, 493, 494, 532, 539, 542, 543, 544, 547, 548, 550, 553, 555, 557, 558, 559, 562, 580, 582, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 608, 609, 615, 628, 630, 631, 633, 641, 642, 643, 644, 645, 646, 650, 656, 657, 658, 659, 660, 666, 667, 669, 670, 671, 672, 673, 674, 676, 678, 679, 680, 681, 685, 688, 689, 690, 692, 701, 708, 711, 721, 722, 731, 735, 739, 749, 751, 771, 775, 779, 785, 786, 791, 793, 794, 795, 796, 799, 800, 802, 810, 818, 820, 828, 831, 834, 835, 836, 837, 838, 839, 840, 844, 845, 846, 848, 856, 857, 866, 869, 870, 872, 873, 876, 880, 888, 899, 900, 901, 904, 907, 908, 909, 910, 924, 930, 944, 947, 962, 976, 977, 979, 980, 981, 983, 984, 986, 987, 988, 990, 991, 992, 993, 994, 997, 998, 1001, 1002, 1005, 1012, 1018, 1021, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "coordin": [11, 12, 14, 55, 101, 131, 155, 184, 220, 261, 296, 366, 374, 412, 417, 441, 445, 446, 447, 459, 469, 470, 476, 529, 535, 536, 537, 538, 540, 541, 543, 544, 545, 546, 548, 612, 644, 645, 649, 650, 651, 652, 653, 654, 656, 658, 659, 660, 661, 679, 680, 681, 682, 686, 687, 688, 691, 692, 704, 761, 766, 899, 983, 984, 1002, 1019, 1027, 1030, 1031, 1032, 1036, 1038, 1040, 1041, 1042], "corner": [11, 14, 27, 54, 168, 257, 261, 269, 270, 296, 322, 374, 379, 496, 911, 913, 987, 1041], "cell": [11, 12, 21, 27, 33, 72, 73, 117, 119, 120, 128, 129, 132, 135, 145, 148, 156, 169, 170, 171, 180, 229, 230, 231, 235, 239, 240, 241, 242, 250, 258, 260, 261, 267, 272, 296, 302, 311, 316, 317, 319, 320, 322, 327, 360, 376, 384, 690, 987, 988, 1033, 1041], "xmin": [11, 79, 189, 191, 208, 209, 296], "x_left_lower_corn": [11, 296, 374, 496], "grid_siz": [11, 62, 296, 374, 496], "xmax": [11, 79, 189, 191, 208, 209, 296], "nx": [11, 296, 374, 496], "ymin": [11, 79, 186, 188, 191, 192, 200, 208, 260, 296], "y_left_lower_corn": [11, 296, 374, 496], "ny": [11, 13, 259, 296, 374, 376, 496, 977, 999], "create_species_bunch": 11, "species_nam": [11, 296], "record": [11, 97, 116, 171, 235, 311, 353, 366, 379, 407, 409, 448, 455, 496, 618, 641, 690, 768, 771, 775, 776, 777, 778, 822, 845, 1040, 1041], "join": [11, 12, 20, 56, 163, 217, 260, 307, 374, 394, 461, 1010, 1021, 1027, 1035], "ascii": [11, 296, 415, 485, 586, 587, 589], "pt": [11, 374, 416, 875, 997], "desir": [11, 25, 114, 148, 164, 199, 201, 305, 309, 372, 379, 381, 383, 387, 401, 404, 407, 410, 411, 412, 416, 501, 536, 538, 542, 545, 565, 591, 600, 601, 662, 668, 683, 684, 697, 706, 733, 839, 840, 844, 859, 864, 866, 869, 870, 872, 873, 875, 876, 880, 883, 885, 887, 888, 923, 956, 979, 981, 984, 990, 997, 1001, 1002, 1003, 1012, 1027, 1035, 1036, 1037, 1040], "pts_": 11, "ix": [11, 269, 345], "searchsort": 11, "dd": [11, 12, 130, 296, 496], "ii": [11, 97, 170, 206, 255, 376, 415, 580, 581, 587, 636, 664, 665, 862, 871, 983, 997, 1005], "lat": [11, 296, 496, 761], "cov_": [11, 83], "plot_species_distribut": 11, "bradypus_variegatus_0": 11, "microryzomys_minutus_0": 11, "meshgrid": [11, 17, 27, 43, 59, 81, 121, 130, 152, 153, 154, 155, 157, 170, 210, 211, 212, 213, 225, 228, 249, 289, 296, 299, 307, 308, 330, 337, 338, 343, 344, 347, 348, 629], "bv_bunch": 11, "mm_bunch": 11, "background_point": 11, "c_": [11, 17, 26, 27, 28, 59, 81, 97, 121, 124, 129, 130, 140, 153, 197, 212, 215, 228, 289, 308, 310, 330, 338, 344, 347, 348, 407, 657, 712, 713, 716, 987, 1016, 1019, 1020], "randint": [11, 38, 82, 93, 124, 164, 171, 223, 231, 235, 237, 272, 317, 322, 381, 384, 392, 398, 800, 817, 834, 835, 836, 838, 976, 977], "land": [11, 296, 394, 414], "water": 11, "land_refer": [11, 296], "standard": [11, 12, 13, 21, 27, 33, 35, 56, 62, 71, 72, 74, 81, 82, 87, 97, 112, 115, 117, 118, 119, 120, 121, 128, 132, 148, 151, 156, 158, 160, 169, 178, 184, 188, 197, 199, 208, 220, 221, 222, 233, 238, 250, 255, 258, 259, 260, 261, 263, 305, 310, 336, 351, 366, 367, 371, 372, 373, 375, 376, 377, 379, 381, 382, 384, 385, 388, 391, 393, 397, 401, 403, 407, 409, 410, 411, 415, 417, 444, 466, 470, 486, 494, 499, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 520, 522, 523, 528, 530, 533, 539, 550, 588, 592, 609, 632, 642, 643, 670, 671, 672, 673, 674, 676, 685, 687, 691, 785, 802, 817, 818, 836, 839, 840, 841, 842, 843, 845, 847, 848, 849, 850, 851, 852, 853, 863, 868, 869, 872, 875, 876, 877, 879, 887, 888, 889, 890, 897, 899, 900, 919, 976, 979, 983, 984, 987, 989, 990, 991, 993, 1001, 1002, 1007, 1011, 1012, 1017, 1019, 1020, 1021, 1023, 1033, 1034, 1035, 1036, 1038, 1039, 1040], "cov_train": 11, "train_cover_std": 11, "cyl": [11, 296], "llcrnrlat": [11, 296], "urcrnrlat": [11, 296], "llcrnrlon": [11, 296], "urcrnrlon": [11, 296], "drawcoastlin": [11, 296], "drawcountri": [11, 296], "9998": [11, 296], "solid": [11, 17, 32, 34, 124, 154, 211, 212, 228, 238, 296, 307, 1011], "z": [11, 17, 59, 121, 140, 153, 155, 170, 209, 211, 212, 220, 222, 228, 233, 249, 289, 296, 299, 307, 310, 330, 338, 343, 344, 348, 376, 404, 412, 414, 551, 552, 583, 637, 662, 669, 683, 684, 687, 691, 697, 721, 782, 879, 983, 984, 991, 992, 1020, 1042], "float64": [11, 14, 49, 54, 72, 124, 126, 127, 169, 170, 271, 319, 320, 367, 373, 379, 381, 393, 415, 469, 470, 476, 494, 495, 506, 507, 540, 546, 579, 580, 587, 589, 639, 656, 671, 673, 697, 735, 864, 872, 873, 901, 902, 904, 905, 908, 910, 917, 919, 958, 961, 963, 964, 965, 1002, 1012, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045], "idx": [11, 17, 20, 46, 56, 105, 114, 118, 121, 133, 160, 170, 172, 183, 191, 198, 199, 208, 221, 357, 408, 411], "9999": [11, 217, 296, 328, 496, 625, 1035], "coverages_land": 11, "contourf": [11, 17, 121, 213, 233, 289, 296, 299, 307, 308, 330, 337, 343, 348, 629, 630], "pts_train": 11, "pts_test": 11, "auc": [11, 26, 148, 199, 217, 238, 257, 260, 264, 267, 269, 270, 322, 405, 700, 706, 785, 987, 1032, 1035, 1039], "pred_background": 11, "pred_test": 11, "cov_test": 11, "r_": [11, 105, 212, 213, 246, 267, 289, 290, 337, 343, 348, 407, 705, 987, 1003], "fpr": [11, 229, 238, 257, 269, 270, 386, 590, 594, 696, 700, 704, 724, 786, 987, 1024, 1027, 1043], "tpr": [11, 229, 238, 257, 269, 270, 386, 700, 704, 786, 987, 1024, 1027, 1043], "threshold": [11, 26, 43, 66, 93, 99, 105, 148, 166, 170, 172, 194, 229, 231, 257, 258, 259, 267, 270, 281, 321, 322, 324, 331, 357, 360, 393, 407, 412, 414, 416, 439, 440, 443, 444, 467, 498, 506, 507, 529, 535, 540, 546, 547, 548, 561, 586, 589, 591, 595, 600, 601, 642, 665, 669, 674, 676, 690, 696, 698, 700, 701, 704, 705, 718, 723, 724, 736, 737, 753, 779, 785, 786, 791, 794, 795, 815, 834, 845, 846, 862, 864, 866, 882, 894, 895, 896, 904, 911, 913, 961, 983, 987, 990, 991, 993, 997, 1000, 1002, 1003, 1007, 1008, 1027, 1031, 1032, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1043, 1044, 1045], "roc_curv": [11, 229, 257, 269, 700, 704, 724, 779, 785, 987, 1027, 1028, 1029, 1032, 1033, 1035, 1040, 1043, 1045], "roc_auc": [11, 148, 260, 264, 269, 270, 386, 632, 700, 730, 987, 1024], "ntime": [11, 271], "039": [11, 16, 59, 258, 352, 748, 778, 987, 1008], "plot_species_distribution_model": [11, 16, 496, 1008], "multi": [11, 32, 51, 92, 111, 113, 115, 116, 121, 123, 130, 133, 135, 136, 140, 153, 155, 166, 177, 182, 183, 185, 186, 188, 191, 198, 206, 215, 218, 219, 222, 226, 227, 228, 236, 239, 243, 253, 257, 269, 276, 281, 298, 303, 306, 307, 308, 315, 320, 330, 334, 343, 344, 348, 351, 355, 356, 357, 358, 360, 361, 367, 374, 376, 381, 382, 388, 393, 397, 407, 414, 415, 417, 424, 435, 450, 460, 467, 472, 493, 494, 502, 503, 508, 512, 513, 517, 518, 520, 539, 547, 548, 549, 551, 553, 555, 556, 557, 559, 562, 563, 565, 567, 608, 629, 631, 641, 644, 645, 650, 651, 655, 656, 658, 659, 660, 661, 664, 666, 670, 671, 672, 673, 674, 679, 682, 688, 701, 711, 718, 731, 737, 739, 780, 796, 810, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 846, 847, 849, 855, 856, 857, 860, 866, 879, 883, 894, 895, 899, 901, 904, 907, 908, 909, 911, 912, 913, 919, 922, 925, 976, 988, 990, 994, 997, 1001, 1006, 1007, 1008, 1009, 1012, 1018, 1022, 1023, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1040, 1041, 1043, 1044], "iri": [11, 18, 31, 32, 34, 42, 46, 75, 89, 94, 95, 98, 100, 101, 106, 107, 111, 112, 113, 114, 116, 130, 133, 136, 140, 144, 150, 152, 155, 156, 159, 161, 166, 175, 177, 182, 191, 192, 196, 218, 233, 236, 242, 247, 254, 265, 266, 269, 270, 275, 286, 292, 294, 299, 300, 307, 317, 324, 329, 331, 333, 334, 336, 338, 340, 341, 342, 349, 355, 356, 358, 359, 360, 361, 372, 373, 392, 407, 408, 411, 412, 414, 445, 494, 502, 539, 547, 551, 555, 562, 608, 620, 629, 674, 796, 810, 894, 895, 896, 899, 904, 907, 911, 912, 913, 976, 977, 981, 986, 987, 990, 994, 997, 1000, 1001, 1002, 1003, 1008, 1012, 1019, 1020, 1023, 1040], "emploi": [12, 151, 234, 409, 415, 448, 476, 580, 587, 1011, 1020, 1033], "techniqu": [12, 19, 71, 73, 98, 106, 113, 123, 139, 147, 148, 164, 166, 168, 207, 222, 224, 265, 278, 287, 318, 326, 342, 356, 368, 376, 391, 393, 405, 406, 407, 411, 412, 413, 414, 415, 416, 445, 446, 447, 448, 532, 552, 675, 687, 691, 692, 723, 753, 979, 983, 984, 986, 987, 990, 993, 995, 999, 1001, 1003, 1007, 1011, 1015, 1020, 1021, 1040], "histor": [12, 199, 1007], "quot": [12, 15, 71, 261, 351, 352, 367, 373, 374, 377, 383, 397, 403, 406, 486, 487, 494, 987, 999, 1002, 1021, 1042], "quantiti": [12, 122, 260, 267, 317, 366, 393, 407, 414, 719, 720, 721, 782, 855, 976, 978, 981, 983, 1032], "daili": [12, 1011], "price": [12, 76, 122, 123, 132, 238, 311, 977, 983, 1011, 1017], "link": [12, 18, 112, 169, 170, 178, 199, 203, 217, 245, 263, 293, 356, 367, 377, 378, 379, 380, 381, 383, 387, 393, 405, 407, 409, 412, 417, 559, 560, 608, 646, 667, 678, 686, 703, 918, 920, 983, 990, 1003, 1004, 1006, 1010, 1015, 1019, 1021, 1025, 1027, 1030, 1031, 1034, 1035, 1038, 1044], "fluctuat": [12, 61, 199, 267, 1035], "normalesup": [12, 33, 47, 67, 233], "2003": [12, 404, 407, 412, 415, 449, 450, 460, 511, 513, 687, 691, 834, 836, 983, 984, 989, 999, 1035], "2008": [12, 409, 411, 412, 476, 532, 561, 588, 643, 662, 683, 684, 690, 714, 723, 753, 829, 834, 838, 855, 981, 984, 985, 987, 988, 989, 992, 993, 1002], "calm": 12, "ago": [12, 1007], "tech": [12, 376, 837], "firm": [12, 407], "crash": [12, 379, 466, 889, 890, 897, 997, 1031, 1035, 1043, 1044], "nasdaq": 12, "alphavantag": 12, "symbol_dict": 12, "tot": 12, "xom": 12, "exxon": 12, "cvx": 12, "chevron": 12, "cop": 12, "conocophillip": 12, "vlo": 12, "valero": 12, "energi": [12, 387, 855, 992, 1019], "msft": 12, "ibm": [12, 20, 329, 353, 374], "twx": 12, "warner": [12, 1042, 1043], "cmcsa": 12, "comcast": 12, "cvc": 12, "cablevis": 12, "yhoo": 12, "yahoo": 12, "dell": 12, "hpq": 12, "hp": [12, 1021], "amzn": 12, "amazon": 12, "tm": [12, 990], "toyota": 12, "caj": 12, "canon": [12, 393, 405, 414, 480, 481, 483, 765, 1007, 1009, 1023], "sne": [12, 166, 219, 220, 221, 222, 224, 226, 283, 512, 523, 690, 1008, 1022, 1023], "soni": [12, 1037, 1039], "ford": 12, "hmc": 12, "honda": 12, "nav": 12, "navistar": 12, "noc": 12, "northrop": 12, "grumman": 12, "ba": [12, 856, 857, 991], "boe": 12, "ko": [12, 27, 152], "coca": 12, "cola": 12, "mmm": 12, "3m": 12, "mcd": [12, 81, 82, 409, 467, 472], "mcdonald": 12, "pep": [12, 387, 1027], "pepsi": 12, "kellogg": 12, "un": [12, 379, 405, 415, 419, 531, 587, 792, 862, 871, 882, 886, 1036], "unilev": 12, "mar": 12, "marriott": 12, "pg": [12, 385, 647, 983, 1032], "procter": 12, "gambl": 12, "colgat": [12, 18], "palmol": 12, "ge": [12, 978, 989, 1039], "electr": [12, 376, 407], "wfc": 12, "fargo": 12, "jpm": 12, "jpmorgan": [12, 1011], "chase": [12, 1027], "aig": 12, "axp": 12, "bac": 12, "bank": [12, 20, 1011], "goldman": 12, "sach": 12, "aapl": 12, "appl": [12, 366, 377, 391, 988], "sap": 12, "csco": 12, "cisco": 12, "txn": 12, "texa": [12, 71], "instrument": [12, 71, 97, 168], "xrx": 12, "xerox": 12, "wmt": 12, "wal": 12, "mart": [12, 1037], "hd": 12, "depot": 12, "gsk": 12, "glaxosmithklin": 12, "pfe": 12, "pfizer": 12, "sny": 12, "sanofi": 12, "aventi": 12, "nv": 12, "novarti": 12, "kmb": 12, "kimberli": 12, "clark": 12, "ryder": 12, "gd": [12, 135], "dynam": [12, 13, 170, 553, 554, 555, 556, 561, 562, 563, 564, 577, 578, 674, 675, 676, 1003, 1011, 1033, 1039, 1044], "rtn": 12, "raytheon": 12, "cat": [12, 72, 170, 171, 238, 318, 319, 320, 321, 322, 374, 415, 580, 710, 716, 751, 780, 880, 987, 997, 1036, 1037, 1039], "caterpillar": 12, "dupont": 12, "nemour": 12, "symbol": [12, 353, 367, 381, 385, 409, 415, 497, 580, 586, 587, 589, 911, 913, 1006], "fetch": [12, 18, 132, 169, 217, 372, 373, 374, 379, 383, 384, 387, 406, 412, 494, 553, 554, 555, 556, 561, 562, 563, 564, 586, 587, 589, 1035, 1043], "histori": [12, 557, 558, 1027], "stderr": [12, 828], "url": [12, 18, 148, 373, 376, 381, 383], "githubusercont": 12, "master": [12, 17, 283, 320, 379, 383, 1011], "financi": [12, 407, 414, 983], "csv": [12, 373, 376, 384, 1035, 1040], "read_csv": [12, 384, 494, 1042], "close_pric": 12, "vstack": [12, 27, 58, 66, 154, 155, 181, 245, 249, 283, 296, 343, 629, 988, 1035], "q": [12, 72, 86, 125, 199, 318, 404, 407, 412, 935, 983, 1002], "open_pric": 12, "carri": [12, 32, 112, 164, 260, 263, 268, 300, 307, 353, 394, 401, 415, 555, 556, 557, 558, 562, 563, 564, 907, 908, 909, 910, 1011, 1020], "invers": [12, 35, 55, 78, 79, 80, 82, 84, 112, 166, 250, 267, 269, 275, 286, 338, 352, 353, 371, 393, 406, 408, 410, 411, 412, 415, 419, 443, 463, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 525, 531, 532, 533, 537, 539, 541, 555, 559, 562, 587, 588, 589, 626, 642, 643, 656, 657, 664, 666, 672, 673, 674, 675, 676, 678, 721, 740, 749, 794, 795, 841, 842, 849, 850, 856, 857, 859, 863, 866, 872, 873, 875, 891, 892, 899, 900, 901, 904, 905, 907, 909, 925, 981, 983, 987, 990, 991, 997, 1001, 1002, 1008, 1019, 1021, 1022, 1023, 1027, 1030, 1035, 1038, 1039, 1041, 1045], "correl": [12, 28, 83, 86, 87, 106, 119, 120, 129, 144, 147, 148, 156, 166, 167, 168, 170, 171, 173, 183, 188, 194, 217, 260, 266, 281, 311, 316, 317, 328, 372, 375, 376, 384, 393, 396, 404, 409, 411, 416, 448, 455, 480, 481, 483, 491, 492, 498, 522, 562, 604, 607, 625, 632, 633, 634, 680, 681, 740, 754, 775, 776, 777, 825, 839, 840, 876, 877, 879, 888, 978, 983, 988, 994, 997, 1001, 1003, 1007, 1008, 1009, 1023, 1027, 1028, 1029, 1040, 1041], "condition": [12, 28, 199, 405, 409, 755, 981], "connect": [12, 40, 45, 48, 52, 55, 63, 67, 68, 377, 379, 388, 393, 409, 439, 443, 450, 460, 461, 583, 584, 693, 841, 842, 843, 845, 847, 849, 850, 851, 852, 853, 985, 990, 992, 1000, 1010, 1031, 1040, 1044], "edge_model": 12, "graphicallassocv": [12, 83, 398, 409, 469, 471, 472, 473, 474, 476, 1035, 1039, 1041, 1043], "rather": [12, 54, 83, 112, 115, 163, 169, 199, 200, 213, 238, 309, 310, 351, 352, 362, 367, 375, 377, 379, 381, 384, 385, 387, 391, 392, 393, 394, 407, 411, 412, 414, 415, 417, 446, 459, 461, 563, 579, 586, 587, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 627, 644, 645, 650, 651, 658, 659, 660, 661, 778, 810, 830, 832, 833, 862, 899, 900, 911, 936, 981, 983, 984, 987, 989, 990, 994, 1007, 1016, 1019, 1027, 1028, 1029, 1030, 1034, 1035, 1036, 1037, 1042, 1043], "former": [12, 353, 414, 415, 563, 798, 805, 814, 989, 1027, 1033, 1036], "recoveri": [12, 83, 183, 198, 409, 416], "03162278": 12, "05994843": 12, "11364637": 12, "21544347": 12, "40842387": 12, "77426368": 12, "46779927": 12, "7825594": 12, "27499706": 12, "rerun": [12, 27, 43, 72, 73, 117, 119, 120, 128, 129, 132, 135, 145, 156, 169, 170, 171, 180, 229, 230, 231, 235, 239, 240, 241, 242, 250, 258, 260, 261, 267, 272, 302, 311, 316, 317, 319, 320, 322, 327, 360, 387], "trust": [12, 27, 72, 73, 82, 112, 117, 119, 120, 128, 129, 132, 135, 145, 156, 169, 170, 171, 172, 180, 229, 230, 231, 235, 239, 240, 241, 242, 250, 258, 260, 261, 267, 272, 302, 311, 316, 317, 319, 320, 322, 327, 360, 383, 394, 401, 405, 1016, 1041], "unabl": [12, 27, 72, 73, 117, 119, 120, 128, 129, 132, 135, 145, 156, 168, 169, 170, 171, 180, 183, 199, 229, 230, 231, 235, 239, 240, 241, 242, 250, 258, 260, 261, 267, 272, 302, 311, 316, 317, 319, 320, 322, 327, 360, 368, 879, 997, 1036], "render": [12, 27, 54, 72, 73, 117, 119, 120, 128, 129, 132, 135, 145, 156, 169, 170, 171, 180, 194, 203, 229, 230, 231, 235, 239, 240, 241, 242, 250, 258, 260, 261, 267, 272, 302, 311, 316, 317, 319, 320, 322, 327, 360, 379, 381, 383, 384, 385, 393, 549, 587, 629, 698, 700, 876, 888, 911, 913, 986, 1003, 1040, 1044], "nbviewer": [12, 27, 72, 73, 117, 119, 120, 128, 129, 132, 135, 145, 156, 169, 170, 171, 180, 229, 230, 231, 235, 239, 240, 241, 242, 250, 258, 260, 261, 267, 272, 302, 311, 316, 317, 319, 320, 322, 327, 360], "nbsp": [12, 13, 27, 72, 73, 117, 119, 120, 125, 128, 129, 132, 135, 145, 156, 169, 170, 171, 180, 188, 229, 230, 231, 235, 239, 240, 241, 242, 250, 258, 260, 261, 267, 272, 302, 311, 316, 317, 319, 320, 322, 327, 360], "graphicallassocvifittedgraphicallassocv": 12, "group": [12, 38, 41, 56, 59, 61, 134, 170, 172, 199, 221, 235, 251, 255, 311, 322, 327, 352, 360, 374, 384, 393, 394, 398, 407, 413, 414, 415, 432, 444, 493, 586, 587, 589, 592, 716, 785, 796, 797, 798, 801, 802, 803, 804, 805, 806, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 826, 872, 873, 909, 910, 983, 984, 986, 987, 988, 997, 1003, 1004, 1006, 1012, 1015, 1016, 1033, 1034, 1035, 1036, 1039, 1040, 1041, 1043, 1044, 1045], "amongst": [12, 1003], "indic": [12, 20, 21, 26, 27, 28, 49, 60, 61, 67, 76, 87, 91, 96, 112, 117, 123, 156, 159, 164, 168, 170, 196, 222, 232, 235, 254, 262, 263, 266, 267, 283, 296, 325, 326, 329, 351, 352, 353, 360, 367, 374, 379, 380, 381, 383, 387, 388, 391, 393, 403, 404, 405, 407, 409, 411, 412, 414, 415, 418, 422, 435, 438, 442, 448, 449, 450, 451, 453, 454, 455, 458, 462, 465, 470, 485, 506, 507, 509, 510, 511, 521, 530, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 579, 586, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 605, 606, 618, 625, 626, 627, 628, 630, 631, 637, 645, 648, 649, 651, 652, 653, 659, 661, 663, 671, 673, 680, 681, 688, 690, 692, 694, 701, 705, 710, 711, 716, 717, 718, 722, 725, 726, 727, 728, 731, 735, 736, 737, 738, 751, 768, 775, 776, 777, 778, 780, 781, 782, 784, 785, 789, 790, 791, 793, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 830, 832, 833, 839, 840, 841, 842, 843, 845, 847, 849, 850, 851, 863, 866, 870, 872, 880, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 913, 915, 919, 920, 925, 940, 950, 951, 962, 963, 964, 965, 966, 967, 968, 977, 982, 983, 984, 987, 988, 989, 990, 991, 994, 997, 998, 1001, 1002, 1007, 1012, 1016, 1019, 1021, 1027, 1028, 1029, 1030, 1031, 1032, 1035, 1037, 1038, 1040, 1042, 1043, 1044], "reflect": [12, 41, 47, 48, 81, 93, 97, 122, 170, 171, 199, 217, 269, 287, 352, 375, 378, 383, 393, 396, 404, 448, 454, 984, 987, 993, 995, 1020, 1028, 1036], "properti": [12, 26, 158, 159, 201, 216, 246, 285, 310, 360, 366, 372, 379, 381, 397, 404, 405, 407, 409, 412, 414, 416, 417, 422, 440, 443, 449, 450, 451, 462, 463, 540, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 589, 591, 592, 595, 608, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 630, 644, 650, 653, 658, 660, 672, 673, 697, 702, 703, 706, 796, 799, 800, 810, 827, 828, 858, 859, 872, 873, 874, 880, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 976, 979, 982, 983, 984, 987, 988, 990, 993, 997, 1000, 1002, 1003, 1004, 1007, 1012, 1032, 1036, 1037, 1040, 1041, 1044], "impact": [12, 13, 26, 37, 38, 43, 44, 60, 64, 65, 69, 76, 112, 144, 166, 168, 169, 170, 179, 201, 203, 217, 238, 254, 278, 286, 310, 320, 346, 352, 362, 366, 367, 372, 391, 394, 405, 407, 412, 445, 447, 534, 538, 545, 588, 664, 665, 666, 670, 672, 674, 675, 676, 690, 791, 796, 799, 800, 810, 822, 839, 840, 841, 876, 888, 899, 900, 922, 936, 958, 961, 976, 986, 994, 1002, 1008, 1034, 1037, 1040], "affinity_propag": [12, 45], "covariance_": [12, 35, 81, 83, 467, 468, 469, 470, 471, 472, 473, 474, 547, 548, 981, 1034], "n_label": [12, 93, 236, 393, 485, 521, 711, 718, 723, 736, 737, 751, 753, 789, 790, 816, 987, 1033, 1035], "lai": [12, 310, 342, 993], "canva": [12, 17], "manifold": [12, 40, 53, 68, 117, 223, 224, 225, 226, 232, 283, 292, 293, 315, 319, 320, 327, 372, 393, 407, 412, 414, 500, 523, 528, 542, 547, 564, 848, 860, 869, 892, 922, 990, 1008, 1022, 1023, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1044], "dens": [12, 14, 56, 166, 177, 183, 193, 218, 319, 320, 329, 366, 388, 393, 407, 412, 414, 416, 441, 444, 445, 447, 462, 465, 494, 521, 522, 525, 532, 533, 542, 564, 583, 584, 605, 606, 627, 628, 650, 655, 656, 657, 664, 665, 666, 670, 671, 674, 675, 676, 685, 686, 687, 690, 691, 757, 758, 764, 776, 789, 856, 857, 864, 871, 872, 874, 876, 877, 878, 879, 888, 889, 890, 891, 892, 899, 900, 901, 902, 904, 905, 937, 958, 961, 977, 980, 983, 984, 987, 988, 990, 993, 997, 999, 1000, 1001, 1002, 1003, 1008, 1027, 1029, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044], "eigen_solv": [12, 45, 47, 67, 220, 221, 412, 450, 460, 533, 686, 687, 689, 691, 693, 984, 1028, 1037, 1040, 1041, 1042], "arpack": [12, 20, 45, 47, 67, 71, 221, 322, 412, 449, 450, 451, 460, 533, 539, 542, 686, 687, 689, 691, 693, 984, 1033, 1034, 1039, 1043, 1044], "don": [12, 55, 71, 169, 221, 235, 236, 260, 283, 328, 335, 339, 351, 352, 366, 373, 379, 381, 383, 385, 387, 392, 397, 398, 408, 415, 644, 650, 827, 907, 908, 909, 910, 951, 976, 983, 986, 988, 991, 993, 1001, 1021, 1031, 1036, 1043, 1044, 1045], "control": [12, 17, 35, 62, 100, 101, 118, 138, 156, 158, 183, 200, 203, 207, 231, 232, 261, 263, 278, 285, 302, 316, 318, 342, 356, 358, 359, 366, 367, 372, 375, 379, 381, 384, 387, 391, 393, 397, 401, 406, 407, 410, 411, 412, 413, 416, 417, 432, 438, 447, 452, 469, 470, 476, 529, 534, 535, 536, 537, 538, 541, 543, 544, 545, 546, 548, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 591, 592, 594, 612, 617, 623, 625, 630, 632, 637, 639, 640, 644, 645, 647, 648, 649, 650, 652, 653, 654, 670, 672, 674, 675, 680, 681, 685, 690, 699, 707, 794, 795, 796, 798, 799, 800, 801, 802, 810, 811, 812, 813, 814, 815, 816, 818, 820, 821, 822, 823, 825, 826, 829, 830, 833, 856, 857, 878, 880, 891, 892, 899, 900, 901, 902, 904, 905, 907, 908, 909, 910, 913, 953, 955, 974, 976, 983, 984, 986, 987, 988, 990, 993, 994, 997, 999, 1001, 1002, 1003, 1006, 1007, 1009, 1019, 1023, 1027, 1029, 1031, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041], "neighbor": [12, 32, 40, 45, 48, 61, 67, 73, 128, 130, 133, 139, 163, 164, 221, 222, 224, 225, 228, 231, 237, 238, 254, 263, 275, 287, 288, 289, 290, 292, 293, 294, 296, 297, 301, 317, 319, 320, 351, 371, 376, 388, 391, 393, 397, 407, 413, 414, 415, 418, 421, 431, 439, 442, 443, 446, 448, 450, 455, 456, 459, 461, 494, 500, 502, 561, 568, 600, 605, 606, 625, 626, 629, 686, 687, 688, 689, 690, 691, 693, 694, 778, 796, 825, 859, 860, 879, 895, 903, 961, 988, 993, 1007, 1008, 1009, 1015, 1020, 1022, 1023, 1027, 1029, 1030, 1031, 1032, 1033, 1034], "node": [12, 42, 122, 126, 183, 315, 321, 322, 356, 360, 387, 388, 407, 409, 412, 414, 439, 440, 443, 461, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 648, 652, 654, 680, 681, 690, 839, 840, 907, 908, 909, 910, 911, 913, 941, 955, 990, 992, 993, 994, 1003, 1030, 1031, 1032, 1033, 1034, 1036, 1039, 1040, 1041, 1042, 1044], "plane": [12, 148, 211, 233, 289, 340, 342, 343, 348, 376, 450, 460, 981, 983, 1002, 1019], "node_position_model": 12, "locallylinearembed": [12, 220, 221, 222, 319, 686, 688, 690, 984, 990, 1032, 1033, 1041, 1042, 1043], "n_neighbor": [12, 45, 63, 68, 133, 163, 220, 221, 222, 224, 228, 238, 283, 285, 286, 289, 290, 291, 292, 295, 310, 315, 317, 351, 414, 450, 600, 605, 606, 626, 686, 687, 689, 691, 693, 694, 841, 842, 843, 845, 847, 848, 852, 894, 895, 977, 984, 990, 993, 1000, 1034, 1041, 1043, 1044], "output": [12, 15, 17, 26, 28, 38, 51, 54, 60, 99, 111, 112, 113, 115, 121, 132, 135, 136, 139, 140, 151, 159, 163, 164, 166, 169, 195, 227, 235, 239, 242, 243, 248, 254, 258, 260, 263, 267, 269, 270, 278, 283, 306, 309, 311, 312, 315, 318, 319, 321, 352, 353, 355, 356, 358, 360, 361, 372, 373, 374, 376, 377, 379, 381, 385, 387, 391, 392, 393, 405, 406, 407, 408, 410, 411, 414, 415, 416, 417, 423, 428, 431, 435, 439, 440, 441, 443, 444, 445, 447, 448, 450, 457, 458, 460, 461, 462, 463, 464, 465, 466, 480, 481, 482, 483, 486, 489, 490, 491, 492, 493, 494, 495, 501, 503, 506, 507, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 609, 625, 626, 627, 628, 629, 630, 631, 633, 636, 637, 638, 639, 640, 644, 645, 648, 650, 651, 652, 655, 656, 658, 659, 660, 661, 664, 665, 666, 669, 671, 672, 674, 676, 677, 679, 680, 681, 682, 686, 687, 688, 690, 692, 694, 697, 698, 711, 712, 719, 720, 721, 723, 725, 732, 742, 743, 745, 747, 748, 749, 750, 751, 753, 758, 764, 769, 782, 785, 787, 788, 794, 795, 798, 799, 800, 801, 802, 808, 810, 811, 812, 813, 814, 815, 816, 820, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 842, 843, 844, 848, 849, 851, 855, 856, 857, 858, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 883, 887, 888, 891, 892, 896, 897, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 914, 920, 922, 925, 936, 937, 943, 944, 946, 954, 974, 976, 977, 979, 981, 983, 984, 987, 988, 989, 990, 991, 994, 997, 1002, 1008, 1009, 1012, 1013, 1015, 1023, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "edg": [12, 27, 47, 67, 99, 122, 223, 267, 387, 393, 404, 407, 409, 451, 559, 560, 583, 584, 586, 587, 589, 794, 836, 841, 842, 843, 845, 847, 849, 850, 851, 852, 853, 864, 912, 997, 1000, 1011, 1033, 1035, 1038, 1041], "displai": [12, 13, 26, 28, 35, 38, 47, 49, 61, 72, 82, 83, 86, 87, 90, 96, 118, 128, 129, 132, 163, 166, 169, 170, 184, 186, 217, 227, 228, 238, 241, 242, 243, 249, 257, 261, 262, 267, 269, 270, 274, 293, 311, 316, 317, 337, 357, 366, 379, 381, 382, 386, 388, 397, 406, 408, 412, 415, 416, 421, 436, 462, 465, 466, 494, 539, 562, 628, 629, 630, 656, 685, 695, 696, 698, 699, 700, 711, 716, 779, 786, 796, 802, 810, 818, 825, 859, 860, 872, 874, 879, 897, 904, 911, 912, 913, 927, 953, 974, 987, 991, 1006, 1008, 1023, 1036, 1038, 1039, 1041, 1042], "strength": [12, 132, 158, 199, 203, 261, 315, 366, 410, 414, 444, 565, 566, 641, 646, 647, 650, 656, 657, 667, 670, 671, 672, 673, 674, 676, 678, 685, 780, 856, 857, 899, 900, 904, 905, 976, 983, 990, 993, 1001, 1002], "plan": [12, 373, 377, 379, 380, 394, 997, 1030], "fair": [12, 414, 688, 692, 828, 988, 1011], "crucial": [12, 168, 203, 255, 366, 378, 379, 394, 407, 417, 1002], "challeng": [12, 132, 151, 170, 178, 217, 228, 368, 374, 375, 407, 409, 460, 470, 987, 993, 1011, 1012], "overlap": [12, 13, 38, 56, 91, 126, 147, 223, 247, 352, 377, 404, 407, 411, 414, 415, 585, 789, 790, 797, 801, 803, 804, 805, 806, 814, 984, 997, 1033], "heurist": [12, 15, 124, 238, 351, 367, 407, 416, 447, 450, 459, 460, 506, 507, 535, 537, 544, 674, 675, 676, 689, 693, 799, 800, 901, 902, 903, 904, 905, 924, 984, 985, 990, 1001, 1003, 1011, 1019, 1027, 1028, 1032, 1036, 1039, 1040], "direct": [12, 86, 87, 96, 98, 104, 148, 205, 245, 251, 257, 292, 302, 310, 338, 343, 377, 379, 380, 383, 387, 394, 397, 407, 410, 412, 415, 416, 450, 460, 469, 470, 476, 532, 539, 547, 586, 587, 589, 600, 639, 686, 848, 981, 982, 983, 988, 990, 992, 1007, 1020, 1027, 1030], "nearest": [12, 14, 32, 33, 40, 41, 51, 52, 55, 59, 62, 67, 73, 79, 83, 90, 96, 99, 127, 128, 133, 139, 155, 164, 190, 211, 215, 222, 225, 231, 237, 254, 263, 275, 287, 289, 292, 293, 297, 301, 302, 310, 338, 343, 344, 348, 371, 376, 388, 391, 393, 407, 413, 414, 418, 421, 431, 442, 444, 446, 448, 450, 455, 459, 460, 494, 500, 502, 605, 606, 625, 626, 628, 629, 633, 686, 687, 689, 690, 694, 789, 790, 796, 825, 839, 840, 841, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 859, 860, 864, 879, 961, 984, 993, 1002, 1007, 1008, 1009, 1015, 1023, 1027, 1029, 1030, 1031, 1032, 1034, 1036, 1037, 1039], "along": [12, 14, 57, 60, 67, 87, 119, 125, 186, 199, 233, 235, 264, 315, 352, 353, 362, 374, 379, 383, 385, 387, 388, 393, 397, 398, 401, 404, 412, 414, 415, 416, 419, 531, 548, 585, 609, 610, 628, 644, 645, 648, 649, 650, 651, 652, 653, 654, 658, 659, 660, 661, 674, 676, 679, 680, 681, 682, 683, 684, 776, 777, 789, 796, 810, 868, 869, 872, 873, 876, 877, 878, 879, 884, 885, 886, 888, 889, 890, 915, 938, 962, 968, 976, 983, 990, 997, 1000, 1011, 1027, 1032, 1033, 1035, 1039, 1040], "linecollect": [12, 223, 231, 630], "facecolor": [12, 17, 27, 35, 46, 61, 96, 102, 114, 140, 159, 220, 236, 260, 290, 307, 336, 339, 342, 343, 345], "partial_correl": 12, "precision_": [12, 83, 467, 468, 469, 470, 471, 472, 473, 474], "sqrt": [12, 81, 82, 83, 99, 105, 116, 138, 172, 178, 180, 223, 225, 240, 245, 246, 247, 250, 251, 260, 343, 346, 407, 414, 415, 417, 461, 467, 468, 469, 470, 471, 472, 473, 474, 536, 538, 545, 555, 556, 557, 558, 562, 563, 617, 644, 645, 650, 651, 658, 659, 660, 661, 679, 682, 697, 728, 760, 761, 766, 879, 892, 907, 908, 909, 910, 979, 983, 984, 987, 989, 999, 1041], "diag": [12, 83, 159, 247, 250, 412, 417, 530, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 794, 795, 983, 1042], "newaxi": [12, 14, 20, 25, 43, 83, 105, 113, 152, 180, 189, 195, 200, 201, 202, 204, 205, 216, 231, 233, 274, 288, 295, 358, 359, 404, 534, 983], "ab": [12, 18, 41, 76, 100, 106, 114, 122, 132, 144, 148, 172, 186, 190, 210, 212, 215, 217, 223, 260, 305, 336, 348, 407, 536, 538, 545, 625, 743, 839, 840, 874, 987], "triu": 12, "nipy_spectr": [12, 40, 47, 48, 52, 53, 61, 62, 102], "start_idx": [12, 223], "end_idx": [12, 223], "sequenc": [12, 112, 121, 187, 223, 381, 393, 408, 411, 412, 414, 415, 501, 510, 559, 560, 567, 568, 579, 580, 586, 587, 589, 644, 796, 799, 807, 825, 859, 883, 939, 940, 950, 958, 961, 1006, 1027, 1030, 1032, 1033], "line0": [12, 223], "linen": [12, 223], "x0": [12, 191, 208, 223, 305, 335, 393, 428, 462, 565, 566, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 625, 626, 627, 628, 862, 863, 864, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880], "y0": [12, 223], "x1": [12, 17, 86, 92, 114, 124, 154, 211, 223, 305, 335, 381, 393, 428, 462, 507, 565, 566, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 625, 626, 627, 628, 697, 862, 863, 864, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 1020], "y1": [12, 92, 114, 223, 507, 714, 988, 989], "xm": [12, 223], "ym": [12, 223], "segment": [12, 14, 18, 22, 37, 48, 49, 54, 69, 99, 166, 223, 231, 374, 387, 407, 415, 450, 460, 506, 507, 689, 855, 987, 1006, 1008, 1011, 1035, 1037, 1039], "lc": [12, 223, 231], "zorder": [12, 59, 98, 129, 140, 152, 160, 189, 197, 221, 223, 231, 234, 245, 316, 322, 343], "hot_r": [12, 305], "norm": [12, 14, 15, 18, 31, 35, 41, 55, 99, 154, 157, 178, 183, 185, 190, 223, 245, 246, 247, 249, 251, 257, 261, 288, 305, 338, 352, 385, 388, 393, 407, 415, 416, 440, 441, 445, 457, 458, 462, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 487, 529, 532, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 587, 588, 589, 595, 641, 644, 645, 650, 651, 655, 656, 657, 658, 659, 660, 661, 662, 670, 672, 674, 676, 679, 682, 683, 684, 688, 690, 691, 692, 767, 836, 871, 886, 899, 901, 904, 969, 970, 980, 983, 985, 987, 997, 1001, 1030, 1032, 1034, 1038], "set_arrai": [12, 223, 231], "set_linewidth": [12, 223, 231], "add_collect": [12, 223, 231], "index": [12, 13, 15, 18, 38, 39, 40, 41, 42, 50, 51, 59, 72, 73, 112, 117, 119, 145, 148, 156, 163, 168, 169, 170, 171, 172, 199, 203, 217, 239, 242, 246, 247, 251, 255, 258, 259, 260, 261, 263, 271, 272, 283, 305, 310, 311, 312, 319, 325, 326, 352, 353, 374, 376, 377, 379, 381, 383, 388, 391, 393, 404, 408, 411, 412, 414, 415, 422, 441, 445, 446, 447, 448, 449, 451, 452, 455, 457, 458, 462, 465, 501, 507, 555, 556, 557, 558, 562, 563, 564, 585, 586, 587, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 615, 630, 631, 638, 695, 702, 703, 710, 714, 716, 728, 735, 754, 776, 777, 783, 785, 791, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806, 809, 810, 811, 812, 813, 814, 815, 816, 817, 825, 839, 840, 841, 842, 843, 845, 847, 849, 850, 851, 872, 907, 908, 909, 910, 940, 958, 961, 966, 967, 987, 989, 990, 991, 1001, 1003, 1006, 1019, 1021, 1027, 1030, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "dx": [12, 14, 524, 697], "dy": [12, 697], "this_dx": 12, "argmin": [12, 124, 259, 381, 409, 529, 535, 543, 544, 683, 776, 777, 1003], "this_di": 12, "horizontalalign": [12, 27, 32, 41, 45, 46, 63, 102, 228, 245, 299, 307], "verticalalign": [12, 27, 40, 41], "edgecolor": [12, 17, 25, 31, 32, 35, 43, 46, 57, 61, 68, 92, 93, 102, 114, 121, 128, 130, 131, 133, 134, 140, 143, 152, 153, 155, 159, 170, 182, 191, 201, 208, 211, 212, 213, 232, 233, 234, 236, 238, 245, 248, 260, 263, 274, 286, 289, 290, 291, 294, 299, 307, 308, 310, 330, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 348, 357, 358, 359, 629], "xlim": [12, 27, 45, 59, 63, 74, 79, 80, 81, 98, 114, 115, 116, 131, 138, 152, 153, 169, 178, 189, 191, 198, 205, 208, 213, 228, 236, 246, 251, 255, 269, 274, 289, 290, 337, 342, 343, 347, 359], "ptp": 12, "ylim": [12, 25, 27, 34, 38, 45, 59, 63, 79, 80, 81, 98, 114, 115, 122, 125, 131, 134, 152, 153, 169, 186, 188, 189, 191, 192, 193, 205, 208, 209, 213, 228, 236, 246, 251, 255, 259, 263, 269, 273, 274, 289, 290, 337, 342, 343, 347, 351, 359, 1016], "502": [12, 16, 331, 1008], "plot_stock_market": [12, 16, 1008], "handwritten": [12, 37, 39, 44, 46, 47, 49, 50, 53, 58, 60, 62, 69, 117, 166, 219, 220, 222, 224, 226, 232, 248, 258, 283, 292, 293, 301, 302, 325, 326, 352, 372, 407, 414, 445, 500, 539, 542, 547, 564, 686, 687, 688, 689, 690, 702, 703, 715, 734, 790, 792, 848, 860, 869, 879, 892, 984, 990, 1008, 1012, 1023], "isomap": [12, 53, 117, 166, 219, 222, 224, 226, 232, 283, 292, 293, 315, 319, 414, 500, 542, 547, 564, 687, 688, 689, 690, 848, 860, 869, 892, 990, 1008, 1022, 1023, 1035, 1037, 1040, 1041, 1042, 1043, 1044], "agglom": [12, 21, 22, 37, 38, 42, 43, 45, 48, 57, 61, 63, 67, 68, 69, 90, 146, 166, 221, 223, 285, 325, 326, 407, 439, 443, 500, 689, 775, 852, 1008, 1030], "pictur": [12, 18, 22, 37, 49, 54, 67, 69, 99, 166, 232, 251, 374, 394, 407, 412, 415, 460, 491, 492, 519, 1007, 1008], "greek": [12, 18, 22, 37, 49, 54, 67, 69, 99, 166, 407, 460, 1008], "coin": [12, 14, 18, 22, 37, 40, 41, 42, 43, 45, 49, 54, 55, 57, 63, 67, 68, 69, 99, 166, 407, 415, 439, 460, 999, 1008, 1020], "region": [12, 17, 18, 22, 26, 37, 48, 49, 50, 54, 57, 67, 69, 99, 133, 158, 166, 169, 199, 217, 228, 232, 233, 251, 308, 338, 346, 376, 386, 393, 407, 414, 417, 446, 448, 454, 460, 585, 984, 987, 990, 993, 997, 1001, 1003, 1008, 1020], "explor": [13, 38, 115, 116, 172, 224, 225, 238, 261, 262, 268, 269, 278, 312, 317, 338, 352, 362, 373, 376, 378, 385, 401, 407, 414, 470, 796, 799, 807, 880, 976, 983, 984, 986, 992, 994, 997, 1011, 1015, 1021, 1033], "demo": [13, 14, 19, 20, 23, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 49, 54, 55, 57, 58, 60, 61, 62, 63, 65, 68, 69, 128, 166, 172, 183, 205, 232, 248, 250, 261, 269, 310, 327, 351, 352, 381, 404, 407, 415, 438, 439, 442, 444, 445, 446, 448, 449, 451, 453, 456, 500, 509, 510, 511, 539, 702, 703, 715, 717, 734, 790, 792, 860, 879, 880, 1008], "period": [13, 151, 156, 160, 383, 393, 394, 405, 417, 613, 817, 878, 1035, 1040, 1042], "summari": [13, 148, 319, 360, 362, 376, 391, 690, 711, 785, 912, 985, 988, 1006, 1021], "style": [13, 25, 27, 82, 125, 188, 207, 217, 264, 379, 386, 407, 415, 441, 445, 457, 698, 802, 818, 919, 920, 932, 1027, 1030, 1041], "background_gradi": 13, "set_table_attribut": 13, "inlin": [13, 210, 379, 380, 1003], "set_capt": 13, "set_table_styl": 13, "selector": [13, 72, 144, 145, 238, 346, 387, 415, 416, 464, 579, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 1029, 1037, 1039, 1043], "caption": [13, 71], "prop": [13, 74, 82, 205, 247, 289, 337, 360, 944, 947, 1017], "font": [13, 125, 188, 213, 233, 911, 913], "16px": 13, "000000": [13, 45, 169, 188, 217, 260, 309, 734], "502561": 13, "537775": 13, "546752": 13, "003683": 13, "376474": 13, "788755": 13, "627229": 13, "736540": 13, "189": [13, 199, 215, 385, 896, 1000], "463088": 13, "500008": 13, "438776": 13, "914405": 13, "005771": 13, "894801": 13, "592511": 13, "192930": 13, "196795": 13, "181": [13, 278, 302, 385], "387599": 13, "820000": 13, "940000": [13, 300], "665000": 13, "480000": 13, "001500": 13, "500000": [13, 300], "240000": 13, "630000": 13, "998000": 13, "060000": 13, "780000": 13, "997900": 13, "281": [13, 210, 218, 1008], "41": [13, 148, 199, 218, 238, 360, 374, 376, 455, 467, 479, 490, 619, 622, 633, 656, 662, 683, 684, 697, 778, 834, 989, 993], "996900": 13, "sequenti": [13, 121, 142, 145, 149, 166, 193, 261, 317, 377, 412, 414, 415, 498, 499, 532, 591, 595, 600, 601, 603, 604, 644, 645, 650, 651, 656, 658, 659, 660, 661, 671, 785, 859, 860, 879, 977, 995, 1001, 1006, 1008, 1009, 1023, 1027, 1036, 1039], "lagged_df": 13, "shift": [13, 37, 39, 45, 50, 65, 69, 166, 178, 223, 250, 288, 302, 305, 342, 409, 413, 438, 446, 456, 459, 467, 510, 513, 687, 691, 845, 868, 997, 1008, 1022, 1023, 1027, 1031, 1035], "renam": [13, 250, 261, 379, 383, 407, 444, 445, 457, 469, 470, 476, 525, 534, 551, 552, 553, 554, 555, 556, 561, 562, 563, 564, 872, 1027, 1028, 1029, 1033, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "lagged_count_1h": 13, "lagged_count_2h": 13, "lagged_count_3h": 13, "lagged_count_1d": 13, "lagged_count_1d_1h": 13, "lagged_count_7d": 13, "lagged_count_7d_1h": 13, "roll": [13, 68, 166, 219, 220, 221, 222, 225, 226, 382, 407, 528, 690, 691, 930, 1008, 1011, 1037, 1042], "lagged_mean_24h": 13, "lagged_max_24h": 13, "lagged_min_24h": 13, "lagged_mean_7d": 13, "lagged_max_7d": 13, "lagged_min_7d": 13, "tail": [13, 125, 164, 169, 199, 201, 260, 305, 519, 522, 983], "17369": 13, "247": [13, 879], "203": [13, 54], "157": [13, 385], "160": [13, 236, 327, 331, 976, 1008, 1019], "169": [13, 59, 302], "135": [13, 148, 242, 243, 320, 376, 1008], "67": [13, 67, 169, 217, 376, 496, 514, 515, 516, 625, 665, 711, 810, 977, 987, 1001, 1027], "732143": 13, "271": 13, "17370": 13, "315": [13, 179, 218, 283, 376, 1008], "138": [13, 385, 414, 987], "97": [13, 33, 105, 148, 172, 236, 251, 326, 338, 376, 385, 392, 411, 656, 982, 988, 997, 1027], "125000": 13, "785714": 13, "17371": 13, "214": [13, 152, 582], "133": [13, 14, 57, 192, 218, 1008], "386905": 13, "17372": 13, "164": [13, 231, 243, 414, 1008], "123": [13, 116, 134, 362, 414, 514, 515, 516, 553, 554, 832, 988, 995], "875000": 13, "464286": 13, "17373": 13, "109": [13, 25, 54, 988, 1029], "583333": 13, "244048": 13, "119": [13, 981, 1030], "102": [13, 234, 385, 1019, 1029], "458333": 13, "815476": 13, "110": [13, 91, 178, 196, 206, 231, 311, 322, 435, 981, 982], "166667": 13, "73": [13, 47, 114, 264, 326, 392, 479, 733, 796, 810, 845, 908, 997, 1017, 1027, 1029], "369048": 13, "791667": 13, "61": [13, 82, 170, 217, 373, 376, 385, 408, 456, 539, 558, 711, 937], "112": [13, 55, 148, 374, 376, 1029], "666667": 13, "190476": 13, "113": [13, 278, 385, 1030], "708333": 13, "422619": 13, "watch": [13, 367], "undefin": [13, 263, 393, 710, 726, 735, 738, 780, 956, 987, 1035, 1039, 1043], "own": [13, 35, 118, 217, 235, 250, 283, 285, 327, 352, 367, 373, 382, 383, 384, 387, 388, 397, 406, 407, 419, 423, 438, 452, 531, 555, 562, 644, 794, 795, 841, 842, 843, 845, 847, 849, 850, 851, 873, 907, 909, 925, 930, 955, 983, 989, 990, 993, 997, 1002, 1006, 1011, 1020, 1021, 1034, 1035, 1037, 1044], "unknown": [13, 17, 57, 169, 235, 260, 325, 327, 368, 374, 393, 401, 404, 415, 866, 872, 873, 950, 986, 997, 1012, 1031, 1035, 1039, 1040], "nan": [13, 76, 122, 163, 164, 169, 217, 238, 240, 242, 255, 263, 311, 315, 320, 321, 322, 366, 371, 381, 388, 393, 414, 444, 466, 494, 553, 554, 555, 559, 560, 562, 591, 592, 595, 601, 604, 607, 625, 626, 627, 628, 633, 710, 711, 712, 719, 720, 721, 725, 726, 727, 766, 775, 780, 781, 782, 784, 796, 799, 800, 802, 810, 818, 821, 822, 823, 826, 868, 869, 873, 875, 876, 879, 880, 884, 887, 888, 890, 917, 918, 919, 920, 962, 976, 987, 997, 1003, 1023, 1030, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044], "separ": [13, 14, 17, 25, 26, 31, 32, 41, 56, 61, 63, 67, 74, 81, 92, 95, 96, 98, 101, 107, 112, 114, 117, 120, 130, 148, 154, 164, 166, 170, 171, 175, 177, 198, 200, 218, 221, 236, 247, 260, 263, 269, 270, 305, 307, 310, 317, 328, 333, 334, 336, 337, 338, 342, 343, 349, 351, 362, 366, 375, 376, 381, 384, 387, 391, 393, 405, 407, 408, 409, 412, 414, 415, 417, 462, 510, 517, 531, 536, 538, 539, 545, 547, 579, 586, 587, 589, 608, 629, 636, 644, 645, 671, 674, 675, 688, 692, 722, 729, 742, 743, 745, 750, 789, 815, 831, 832, 858, 859, 901, 903, 904, 909, 910, 976, 977, 979, 981, 983, 984, 986, 993, 994, 997, 1001, 1002, 1008, 1017, 1019, 1020, 1027, 1030, 1032, 1033, 1037, 1039, 1040, 1043, 1044], "dropna": [13, 156], "17210": [13, 1038], "randomli": [13, 38, 49, 51, 62, 72, 86, 89, 94, 114, 115, 128, 154, 163, 166, 170, 211, 216, 232, 236, 250, 255, 266, 278, 281, 325, 328, 362, 367, 388, 391, 392, 407, 411, 414, 417, 447, 456, 510, 513, 517, 521, 529, 535, 543, 544, 549, 557, 558, 559, 560, 561, 562, 563, 608, 609, 669, 677, 688, 692, 714, 794, 795, 855, 893, 907, 908, 909, 910, 986, 988, 990, 993, 995, 999, 1003, 1008, 1019, 1021, 1038, 1042, 1044], "percentag": [13, 55, 104, 122, 190, 217, 255, 263, 266, 411, 416, 532, 539, 542, 547, 591, 592, 646, 667, 678, 701, 731, 743, 814, 815, 816, 829, 911, 913, 988, 1003, 1029, 1033, 1039, 1040], "mape": [13, 743, 987], "aim": [13, 21, 82, 164, 203, 291, 327, 342, 368, 374, 377, 379, 393, 401, 407, 409, 415, 446, 983, 987, 990, 997, 1002, 1006, 1012, 1020, 1041], "futur": [13, 156, 200, 241, 318, 321, 377, 379, 381, 383, 393, 394, 401, 411, 415, 494, 532, 633, 957, 987, 988, 1002, 1003, 1011, 1024, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "ulterior": 13, "independ": [13, 26, 28, 38, 47, 97, 98, 100, 117, 121, 158, 170, 237, 238, 260, 263, 265, 269, 281, 305, 312, 315, 352, 362, 366, 367, 375, 381, 383, 392, 393, 397, 404, 405, 406, 407, 408, 409, 410, 411, 415, 419, 447, 462, 486, 501, 513, 514, 515, 516, 518, 530, 531, 533, 535, 537, 538, 544, 545, 549, 550, 602, 605, 606, 623, 638, 642, 643, 644, 645, 648, 649, 650, 651, 652, 653, 654, 655, 658, 659, 660, 661, 662, 663, 670, 671, 672, 673, 702, 703, 715, 733, 734, 752, 754, 792, 798, 824, 828, 830, 832, 833, 871, 875, 876, 877, 879, 883, 884, 885, 886, 888, 889, 890, 893, 901, 902, 903, 904, 905, 930, 976, 979, 981, 983, 984, 987, 988, 989, 992, 994, 997, 1002, 1003, 1022, 1023, 1027, 1028, 1033, 1035, 1037, 1042], "ident": [13, 20, 65, 124, 194, 199, 217, 228, 232, 330, 351, 374, 381, 393, 404, 407, 408, 409, 411, 417, 420, 436, 437, 450, 462, 463, 471, 473, 474, 477, 478, 479, 486, 501, 549, 557, 558, 562, 563, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 641, 677, 678, 697, 702, 703, 733, 782, 792, 798, 801, 811, 812, 815, 816, 841, 842, 848, 856, 857, 863, 864, 876, 888, 907, 908, 980, 981, 984, 987, 990, 991, 1002, 1031, 1035, 1036, 1037, 1041], "tempor": [13, 183, 1006, 1007], "mean_absolute_percentage_error": [13, 122, 987, 1039, 1041], "3889873516666431": 13, "account": [13, 14, 56, 98, 104, 112, 156, 163, 169, 217, 235, 260, 286, 292, 346, 348, 352, 366, 375, 379, 393, 394, 401, 407, 410, 411, 412, 414, 415, 461, 559, 560, 565, 566, 625, 626, 628, 630, 631, 647, 671, 677, 702, 705, 725, 726, 727, 735, 740, 753, 780, 781, 784, 785, 797, 801, 814, 873, 979, 981, 985, 987, 988, 989, 990, 997, 1001, 1003, 1032, 1034, 1035, 1036, 1039, 1040, 1042, 1044], "cheat": [13, 338, 991, 1001, 1029], "fast": [13, 63, 175, 183, 188, 214, 215, 233, 234, 306, 353, 366, 374, 379, 388, 407, 409, 411, 412, 414, 415, 419, 444, 445, 467, 472, 506, 530, 531, 533, 536, 538, 542, 545, 562, 563, 564, 586, 587, 589, 630, 631, 638, 656, 657, 670, 672, 685, 697, 796, 810, 820, 821, 831, 832, 839, 840, 844, 855, 936, 956, 979, 983, 986, 989, 990, 992, 993, 1003, 1006, 1011, 1021, 1027, 1028, 1033, 1034, 1037, 1038], "laptop": [13, 387, 466, 897, 1041, 1042, 1043], "3000": [13, 65, 223, 891, 892], "train_idx": [13, 169, 393], "test_idx": [13, 393], "44300751539296973": 13, "optimist": [13, 188, 265, 351, 362, 705, 983, 987], "cross": [13, 14, 35, 55, 58, 59, 72, 73, 75, 76, 79, 83, 87, 88, 92, 93, 103, 118, 121, 122, 124, 125, 137, 141, 142, 145, 146, 148, 149, 169, 170, 177, 181, 183, 185, 186, 187, 193, 199, 201, 207, 217, 218, 229, 236, 241, 247, 248, 250, 253, 257, 260, 261, 262, 264, 266, 267, 268, 269, 272, 273, 274, 276, 278, 287, 302, 304, 306, 311, 313, 315, 317, 322, 328, 338, 346, 374, 379, 381, 388, 391, 392, 393, 398, 401, 402, 405, 408, 409, 412, 414, 415, 416, 417, 435, 469, 470, 471, 472, 473, 474, 476, 480, 481, 482, 483, 491, 499, 500, 502, 513, 539, 565, 566, 573, 591, 592, 595, 600, 604, 607, 640, 641, 644, 645, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 670, 671, 672, 673, 674, 676, 677, 679, 680, 681, 682, 683, 684, 699, 700, 704, 711, 725, 738, 782, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 830, 833, 859, 860, 864, 879, 880, 897, 899, 901, 904, 942, 986, 987, 990, 991, 995, 997, 1002, 1003, 1006, 1007, 1008, 1009, 1011, 1012, 1015, 1023, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1044], "cross_val_scor": [13, 103, 163, 164, 166, 253, 256, 265, 274, 276, 321, 341, 362, 379, 381, 391, 398, 411, 414, 518, 573, 701, 739, 796, 820, 822, 907, 908, 976, 987, 1008, 1016, 1027, 1028, 1029, 1030, 1031, 1034, 1035, 1036, 1039, 1040, 1043, 1044], "cv_mape_scor": 13, "neg_mean_absolute_percentage_error": [13, 122, 987, 995], "44300752": 13, "27772182": 13, "3697178": 13, "real": [13, 16, 32, 35, 56, 58, 71, 75, 79, 81, 82, 83, 112, 154, 169, 203, 224, 228, 238, 254, 266, 274, 287, 290, 306, 307, 337, 342, 353, 366, 372, 373, 376, 383, 385, 388, 391, 392, 393, 404, 405, 407, 409, 411, 412, 414, 415, 467, 487, 488, 491, 492, 493, 494, 495, 498, 499, 502, 508, 549, 550, 551, 553, 554, 555, 556, 557, 558, 562, 563, 590, 592, 593, 594, 595, 596, 597, 598, 629, 697, 702, 721, 725, 749, 752, 754, 782, 792, 824, 856, 857, 901, 902, 903, 904, 905, 908, 910, 977, 978, 979, 984, 987, 989, 991, 992, 993, 1003, 1005, 1008, 1023, 1027, 1040, 1044], "life": [13, 254, 387, 984], "advis": [13, 200, 235, 362, 377, 379, 407, 415, 435, 644, 650, 652, 658, 660, 670, 685, 955, 979, 983, 989, 991, 1002, 1041], "deviat": [13, 21, 35, 62, 81, 115, 118, 119, 120, 121, 123, 148, 151, 156, 158, 160, 169, 178, 205, 238, 257, 258, 259, 260, 261, 263, 289, 290, 305, 310, 371, 375, 376, 384, 388, 393, 411, 414, 417, 448, 470, 499, 509, 510, 511, 512, 514, 515, 516, 520, 522, 523, 528, 550, 592, 609, 632, 642, 643, 669, 721, 749, 802, 818, 845, 868, 869, 879, 888, 889, 890, 983, 987, 993, 997, 1019, 1033, 1034, 1035, 1038, 1039, 1040], "363": [13, 315, 323, 1008], "make_scor": [13, 125, 264, 398, 411, 796, 821, 822, 987, 1036, 1044], "mean_absolute_error": [13, 199, 201, 217, 987, 1028, 1030], "mean_pinball_loss": [13, 125, 318, 983, 987, 1040], "root_mean_squared_error": [13, 747, 987, 1044], "consolidate_scor": 13, "1f": [13, 21, 51, 54, 99, 179, 199, 232, 245, 247, 267, 315, 322, 352, 353], "pinball_loss_05": 13, "pinball_loss_50": 13, "pinball_loss_95": 13, "loss_funct": 13, "absolute_error": [13, 414, 556, 558, 560, 563, 669, 908, 910, 1040], "loss_func": 13, "n_job": [13, 55, 73, 74, 118, 119, 120, 125, 126, 132, 147, 148, 163, 169, 170, 171, 172, 221, 223, 240, 259, 261, 262, 264, 275, 278, 283, 315, 316, 317, 320, 346, 367, 379, 393, 414, 418, 435, 442, 444, 446, 448, 450, 453, 454, 455, 456, 459, 462, 465, 470, 529, 533, 534, 535, 537, 540, 541, 543, 544, 546, 553, 554, 555, 556, 561, 562, 563, 564, 565, 566, 567, 568, 592, 600, 605, 606, 608, 630, 632, 637, 645, 649, 651, 653, 655, 656, 657, 659, 661, 663, 664, 666, 674, 677, 686, 687, 688, 689, 690, 691, 692, 771, 775, 778, 796, 799, 800, 802, 810, 818, 820, 821, 822, 823, 824, 826, 827, 828, 829, 831, 832, 841, 842, 843, 845, 847, 849, 850, 851, 852, 853, 858, 861, 894, 895, 953, 955, 976, 987, 988, 990, 1016, 1017, 1021, 1027, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1042, 1045], "fit_tim": [13, 59, 122, 188, 207, 262, 411, 822, 823], "startswith": [13, 71, 221, 296], "test_": [13, 132, 411], "x_i": [13, 81, 116, 143, 169, 200, 318, 346, 407, 412, 413, 414, 417, 612, 613, 617, 620, 621, 623, 834, 835, 838, 978, 979, 983, 989, 990, 991, 997, 1001, 1002, 1003], "fulli": [13, 45, 56, 119, 125, 366, 373, 374, 393, 407, 413, 414, 416, 441, 445, 555, 556, 562, 563, 907, 908, 909, 910, 911, 913, 976, 977, 983, 992, 1000, 1006, 1040, 1041], "anticip": 13, "call": [13, 14, 18, 47, 49, 51, 55, 72, 93, 110, 117, 124, 145, 151, 155, 157, 159, 168, 170, 187, 199, 200, 203, 217, 235, 239, 241, 242, 260, 261, 269, 274, 275, 278, 283, 285, 310, 312, 317, 318, 351, 352, 353, 360, 366, 367, 368, 374, 377, 379, 380, 381, 383, 384, 385, 386, 387, 388, 391, 392, 393, 394, 397, 398, 405, 407, 408, 409, 410, 411, 412, 414, 415, 417, 419, 430, 438, 441, 444, 445, 447, 448, 449, 450, 451, 452, 455, 458, 460, 462, 463, 466, 467, 472, 480, 481, 482, 486, 489, 490, 493, 495, 501, 506, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 541, 542, 543, 544, 545, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 575, 580, 581, 583, 584, 586, 587, 589, 595, 600, 605, 606, 608, 609, 612, 615, 618, 625, 626, 627, 628, 629, 630, 632, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 687, 688, 689, 690, 691, 692, 693, 695, 697, 698, 699, 702, 729, 739, 752, 768, 771, 775, 776, 777, 778, 790, 794, 795, 796, 798, 799, 800, 801, 802, 808, 810, 811, 812, 813, 814, 815, 816, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 842, 844, 845, 848, 850, 855, 856, 857, 858, 859, 862, 863, 864, 866, 868, 869, 871, 876, 879, 880, 883, 888, 889, 890, 891, 892, 896, 899, 900, 901, 902, 904, 905, 908, 910, 926, 930, 935, 936, 944, 945, 947, 953, 954, 955, 958, 961, 971, 976, 977, 979, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 993, 995, 997, 999, 1000, 1002, 1003, 1006, 1011, 1012, 1016, 1019, 1020, 1021, 1023, 1024, 1027, 1028, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "aleator": 13, "descript": [13, 148, 169, 311, 372, 373, 378, 379, 383, 384, 387, 393, 407, 415, 450, 460, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 498, 499, 500, 501, 502, 503, 505, 508, 542, 628, 674, 759, 762, 775, 987, 1001, 1002, 1007, 1010, 1021, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "quantile_list": 13, "styled_df_copi": 13, "extract_numer": 13, "mean_valu": 13, "std_valu": 13, "convert": [13, 18, 35, 47, 49, 67, 72, 99, 156, 172, 199, 220, 238, 241, 246, 247, 250, 251, 296, 366, 373, 374, 388, 391, 393, 401, 415, 438, 441, 442, 445, 447, 448, 449, 450, 457, 462, 463, 494, 532, 539, 551, 552, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 570, 579, 580, 586, 587, 588, 589, 591, 592, 604, 625, 626, 627, 628, 644, 650, 656, 657, 658, 660, 664, 665, 666, 668, 672, 674, 675, 676, 690, 775, 854, 863, 864, 866, 870, 872, 873, 874, 876, 899, 907, 908, 909, 910, 917, 919, 920, 942, 972, 973, 976, 983, 984, 985, 987, 997, 998, 1002, 1003, 1021, 1027, 1029, 1030, 1031, 1032, 1033, 1035, 1037, 1038, 1039, 1042, 1043, 1044], "cols_to_convert": 13, "col": [13, 20, 26, 28, 39, 43, 50, 56, 60, 64, 65, 71, 118, 133, 220, 238, 347, 509, 511], "min_valu": [13, 625, 1038, 1039], "mask": [13, 14, 43, 67, 120, 199, 207, 238, 258, 259, 329, 388, 393, 408, 414, 467, 472, 559, 560, 579, 583, 584, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 605, 606, 627, 628, 630, 631, 647, 669, 796, 799, 800, 810, 959, 977, 994, 1027, 1030, 1032, 1033, 1035, 1037], "bold": [13, 61, 125, 188, 194, 379], "07": [13, 16, 23, 36, 84, 86, 105, 169, 195, 217, 218, 269, 276, 303, 310, 354, 362, 374, 407, 559, 560, 690, 692, 987, 1001, 1008], "62": [13, 47, 170, 175, 217, 254, 320, 326, 362, 374, 491, 492, 839, 840, 1030], "17": [13, 20, 40, 53, 75, 81, 93, 148, 152, 169, 198, 221, 226, 232, 263, 299, 309, 374, 377, 384, 397, 399, 400, 407, 411, 442, 459, 485, 495, 496, 498, 521, 529, 534, 538, 545, 547, 548, 553, 557, 558, 567, 568, 595, 626, 647, 655, 656, 657, 664, 667, 670, 672, 685, 690, 726, 727, 737, 758, 763, 781, 784, 786, 814, 837, 848, 863, 868, 869, 877, 879, 885, 901, 904, 907, 908, 909, 910, 937, 976, 977, 988, 990, 997, 1008, 1025, 1027, 1028, 1029, 1030, 1033, 1036, 1041], "06": [13, 16, 23, 53, 68, 86, 141, 160, 169, 190, 198, 199, 226, 238, 252, 260, 261, 276, 302, 307, 331, 345, 385, 480, 481, 482, 642, 643, 687, 691, 794, 795, 796, 810, 908, 983, 997, 999, 1008], "09": [13, 16, 98, 105, 136, 169, 218, 232, 236, 243, 252, 273, 313, 407, 527, 605, 732, 837, 987, 997, 1001, 1008], "145": [13, 407], "92": [13, 33, 51, 99, 145, 175, 258, 302, 325, 326, 338, 374, 376, 536, 538, 545, 560, 595, 694, 796, 810, 982, 1021], "86": [13, 33, 71, 145, 190, 255, 307, 325, 326, 785, 907, 987, 1017], "wherea": [13, 35, 49, 54, 68, 81, 128, 213, 238, 261, 262, 263, 269, 286, 310, 342, 346, 347, 368, 394, 411, 414, 442, 563, 656, 657, 798, 814, 827, 979, 986, 988, 990, 997, 1003, 1040], "That": [13, 96, 112, 148, 188, 228, 260, 264, 352, 353, 367, 373, 387, 393, 411, 416, 417, 441, 444, 445, 555, 562, 591, 814, 907, 908, 976, 984, 985, 987, 993, 1003, 1036, 1037], "pinbal": [13, 125, 318, 560, 668, 720, 745, 983, 1040, 1041], "5th": [13, 125, 159, 407], "95th": [13, 125, 745], "gbrt_mean_poisson": 13, "mean_predict": [13, 158], "gbrt_median": 13, "median_predict": 13, "gbrt_percentile_5": 13, "percentile_5_predict": 13, "gbrt_percentile_95": 13, "percentile_95_predict": 13, "fill_between": [13, 125, 138, 151, 156, 158, 160, 178, 179, 217, 260, 262, 263, 264, 270, 802, 818], "interv": [13, 28, 111, 135, 136, 158, 166, 183, 199, 200, 201, 217, 260, 374, 393, 405, 411, 414, 417, 436, 437, 514, 515, 516, 555, 556, 558, 560, 562, 563, 633, 634, 636, 675, 739, 745, 747, 800, 817, 825, 862, 864, 878, 901, 902, 903, 923, 979, 983, 987, 997, 1003, 1008, 1034, 1038], "At": [13, 76, 112, 204, 272, 278, 281, 325, 328, 366, 367, 383, 394, 398, 403, 410, 414, 435, 438, 463, 586, 587, 589, 600, 827, 829, 866, 951, 976, 983, 986, 988, 992, 1001, 1011], "night": 13, "band": [13, 263, 307, 997], "narrow": [13, 115, 125, 305, 307, 384, 839, 840], "certain": [13, 56, 123, 169, 204, 216, 235, 260, 283, 309, 342, 362, 374, 375, 377, 383, 393, 396, 407, 412, 416, 636, 647, 651, 656, 661, 682, 859, 864, 899, 976, 979, 983, 984, 987, 988, 991, 997, 1002, 1006, 1012, 1016, 1032, 1036, 1039, 1042], "And": [13, 166, 219, 220, 221, 222, 225, 226, 235, 260, 351, 387, 401, 407, 411, 415, 528, 586, 587, 589, 690, 691, 983, 987, 1008, 1034], "correct": [13, 27, 28, 58, 82, 112, 123, 159, 169, 183, 188, 199, 217, 245, 254, 260, 267, 269, 278, 281, 338, 340, 351, 362, 376, 379, 381, 383, 394, 405, 406, 407, 411, 412, 414, 415, 424, 430, 448, 454, 467, 472, 486, 499, 501, 633, 665, 674, 676, 701, 702, 706, 710, 711, 716, 719, 720, 721, 725, 726, 727, 731, 735, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 780, 781, 782, 784, 787, 788, 791, 793, 827, 828, 829, 836, 844, 870, 972, 983, 987, 988, 1002, 1012, 1029, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "wider": [13, 201, 415, 912, 983], "probabl": [13, 17, 24, 28, 29, 30, 35, 36, 56, 76, 92, 93, 111, 133, 136, 143, 150, 151, 152, 153, 161, 166, 169, 191, 211, 214, 215, 220, 224, 229, 231, 232, 235, 260, 262, 263, 266, 267, 270, 302, 305, 309, 315, 317, 328, 330, 345, 346, 366, 374, 375, 381, 385, 391, 393, 407, 411, 412, 415, 416, 417, 433, 434, 435, 436, 437, 444, 445, 447, 502, 510, 513, 521, 525, 547, 548, 549, 551, 553, 555, 557, 559, 562, 565, 567, 568, 591, 592, 608, 611, 612, 620, 625, 629, 630, 631, 656, 657, 669, 674, 690, 696, 698, 700, 701, 704, 705, 707, 710, 714, 718, 723, 724, 726, 736, 737, 738, 739, 753, 779, 781, 784, 785, 786, 791, 794, 795, 796, 799, 800, 810, 824, 825, 828, 830, 831, 834, 835, 836, 837, 838, 841, 844, 849, 855, 856, 880, 892, 893, 894, 895, 896, 899, 901, 904, 907, 909, 981, 982, 983, 984, 985, 986, 987, 989, 990, 991, 992, 993, 994, 997, 999, 1000, 1001, 1003, 1007, 1008, 1009, 1021, 1023, 1027, 1029, 1031, 1033, 1035, 1036, 1037, 1038, 1039, 1041], "visibl": [13, 169, 170, 201, 348, 373, 379, 407, 855, 992, 1032, 1042], "lie": [13, 61, 86, 147, 169, 233, 305, 327, 336, 338, 412, 414, 604, 847, 849, 850, 851, 899, 900, 981, 984, 987, 997, 1002], "span": [13, 56, 79, 125, 233, 257, 374, 407, 415, 547, 634, 796, 799, 987, 1020], "underestim": [13, 125, 170, 199, 217, 260, 379], "calibr": [13, 29, 31, 115, 134, 217, 231, 235, 260, 262, 267, 393, 398, 510, 513, 562, 567, 656, 674, 707, 726, 738, 781, 784, 785, 825, 837, 896, 899, 927, 976, 983, 987, 1000, 1002, 1008, 1009, 1023, 1024, 1031, 1033], "confid": [13, 25, 26, 27, 28, 156, 158, 246, 260, 263, 328, 394, 405, 417, 634, 656, 657, 664, 666, 669, 672, 673, 674, 696, 700, 705, 718, 723, 724, 736, 737, 753, 786, 827, 866, 899, 901, 904, 983, 986, 987, 988, 993, 1000, 1001, 1002, 1011, 1021, 1037], "produc": [13, 14, 26, 27, 45, 58, 71, 99, 125, 126, 127, 128, 183, 266, 302, 328, 362, 367, 374, 375, 379, 381, 384, 393, 394, 407, 408, 411, 412, 414, 438, 441, 444, 450, 517, 534, 557, 561, 579, 586, 591, 592, 630, 631, 798, 799, 800, 808, 813, 816, 820, 864, 874, 901, 904, 978, 979, 983, 985, 986, 987, 990, 993, 994, 998, 1000, 1001, 1002, 1012, 1029, 1030, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "overli": [13, 26, 27, 188, 265, 362, 412, 987], "mapi": 13, "recent": [13, 201, 235, 377, 380, 384, 387, 393, 407, 466, 536, 563, 1001, 1011, 1030, 1039], "conform": [13, 579, 626, 827, 828, 987, 1006, 1007, 1034, 1040], "epistem": 13, "sktime": [13, 1006], "extend": [13, 56, 57, 68, 110, 200, 249, 267, 338, 376, 377, 391, 393, 405, 406, 407, 412, 414, 629, 718, 817, 828, 831, 832, 864, 866, 883, 899, 900, 914, 979, 987, 988, 1002, 1007, 1009, 1023, 1032, 1033, 1034, 1035, 1037, 1042], "recurs": [13, 33, 52, 90, 92, 128, 138, 142, 145, 148, 149, 166, 255, 259, 265, 287, 325, 326, 328, 356, 381, 406, 407, 411, 438, 439, 440, 443, 461, 500, 513, 561, 591, 592, 595, 600, 630, 631, 656, 815, 904, 987, 990, 993, 994, 1003, 1008, 1009, 1020, 1023, 1027, 1037, 1038], "enabl": [13, 31, 51, 73, 170, 207, 222, 235, 307, 316, 318, 319, 321, 322, 347, 377, 379, 384, 387, 391, 393, 397, 398, 403, 406, 407, 408, 412, 414, 415, 447, 462, 466, 532, 533, 539, 557, 558, 559, 560, 561, 577, 578, 588, 589, 600, 608, 794, 795, 796, 799, 820, 821, 822, 859, 860, 872, 873, 896, 897, 899, 900, 901, 902, 903, 904, 905, 914, 947, 954, 977, 979, 984, 986, 987, 990, 997, 998, 1001, 1002, 1007, 1011, 1027, 1033, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "961": [13, 16, 856, 1008], "plot_time_series_lagged_featur": [13, 16, 1008], "parallel": [14, 111, 116, 118, 119, 121, 136, 166, 170, 171, 172, 201, 261, 316, 317, 319, 343, 360, 365, 371, 379, 380, 382, 383, 391, 393, 408, 416, 418, 419, 435, 442, 444, 446, 447, 448, 450, 455, 456, 459, 462, 465, 470, 493, 529, 531, 532, 533, 535, 537, 539, 540, 541, 543, 544, 546, 553, 554, 555, 556, 561, 562, 563, 564, 565, 566, 567, 568, 587, 592, 600, 605, 606, 608, 630, 632, 637, 656, 686, 687, 688, 689, 690, 691, 692, 771, 775, 778, 796, 799, 800, 802, 807, 810, 818, 820, 821, 822, 823, 824, 826, 827, 828, 829, 831, 832, 841, 842, 843, 845, 847, 849, 850, 851, 852, 853, 858, 861, 894, 895, 955, 957, 1007, 1008, 1016, 1021, 1023, 1027, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1042, 1043], "acquir": [14, 120, 262, 1039], "angl": [14, 35, 99, 148, 245, 246, 247, 250, 251, 376, 412, 529, 535, 537, 540, 541, 543, 544, 546, 648, 649, 650, 651, 652, 653, 654, 661, 662, 663, 676, 680, 681, 682, 683, 684, 690, 984, 985, 1009, 1023, 1027], "Such": [14, 128, 151, 156, 168, 178, 183, 188, 200, 263, 351, 393, 394, 411, 412, 414, 553, 554, 654, 977, 987, 990, 997, 1003, 1019, 1037, 1042, 1044], "ct": [14, 159, 242, 408, 462, 464, 465], "cellular": 14, "materi": [14, 322, 394, 579, 889, 890, 1005], "haar": [14, 1044], "wavelet": [14, 105, 412], "sparsiti": [14, 31, 46, 83, 102, 166, 177, 183, 184, 192, 210, 214, 215, 218, 234, 346, 352, 366, 393, 409, 412, 414, 416, 499, 500, 525, 529, 535, 536, 537, 538, 541, 543, 544, 545, 644, 650, 655, 656, 674, 676, 719, 720, 721, 868, 874, 879, 884, 980, 983, 990, 997, 1008, 1015, 1020, 1029], "oper": [14, 20, 148, 159, 166, 229, 234, 241, 253, 255, 257, 262, 267, 276, 328, 353, 366, 367, 376, 377, 379, 382, 385, 391, 393, 394, 397, 401, 403, 411, 412, 414, 415, 416, 420, 446, 459, 466, 473, 480, 481, 482, 483, 502, 531, 532, 539, 549, 550, 564, 570, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 614, 619, 622, 628, 633, 641, 656, 687, 691, 700, 704, 705, 706, 724, 771, 778, 779, 785, 786, 815, 825, 828, 839, 840, 862, 866, 871, 882, 883, 897, 904, 907, 938, 955, 960, 983, 990, 997, 1002, 1006, 1008, 1011, 1019, 1031, 1033, 1034, 1035, 1037, 1038, 1043], "fidel": 14, "penal": [14, 31, 83, 132, 183, 188, 192, 199, 203, 215, 217, 310, 346, 407, 409, 412, 416, 467, 468, 469, 470, 471, 472, 473, 474, 476, 645, 650, 651, 659, 661, 674, 703, 713, 731, 783, 792, 872, 899, 900, 906, 983, 987, 989, 991, 1001, 1002, 1019], "computation": [14, 79, 96, 118, 124, 132, 151, 283, 342, 351, 365, 380, 391, 406, 407, 408, 411, 412, 414, 417, 536, 630, 631, 669, 760, 796, 798, 799, 800, 810, 822, 983, 984, 986, 994, 995, 999, 1020, 1023, 1031], "l2": [14, 31, 41, 83, 86, 166, 168, 169, 177, 178, 183, 184, 190, 192, 194, 195, 199, 204, 210, 214, 215, 217, 218, 261, 273, 283, 305, 312, 329, 351, 352, 381, 388, 391, 407, 409, 412, 415, 439, 443, 448, 455, 522, 536, 538, 545, 556, 559, 560, 563, 587, 588, 589, 641, 644, 645, 646, 647, 650, 655, 656, 657, 658, 659, 660, 661, 666, 667, 670, 674, 676, 678, 679, 684, 685, 686, 732, 747, 758, 759, 775, 776, 777, 810, 841, 842, 843, 845, 847, 849, 850, 851, 852, 853, 856, 857, 871, 879, 886, 899, 900, 904, 905, 906, 908, 910, 970, 976, 980, 983, 985, 990, 991, 997, 1001, 1003, 1008, 1019, 1021, 1029, 1031, 1032, 1034, 1036], "circular": 14, "central": [14, 201, 374, 407, 993, 1006], "emmanuel": [14, 67, 1027, 1034, 1035, 1036, 1044], "gouillart": [14, 67, 1027], "nsup": 14, "ndimag": [14, 47, 48, 55, 302, 1020], "_weight": [14, 217], "orig": [14, 290], "floor_x": 14, "floor": 14, "hstack": [14, 34, 43, 134, 144, 225, 237, 255, 341, 411, 858], "_generate_center_coordin": 14, "l_x": 14, "mgrid": [14, 140], "build_projection_oper": 14, "n_dir": 14, "endpoint": [14, 306, 341, 633], "data_ind": 14, "camera_ind": 14, "data_unravel_indic": 14, "xrot": 14, "ind": [14, 43, 124, 134, 352, 839, 840], "logical_and": [14, 125], "proj_oper": 14, "coo_matrix": [14, 185, 450, 583, 584, 958, 961], "generate_synthetic_data": 14, "n_pt": 14, "ogrid": 14, "mask_out": 14, "rand": [14, 25, 38, 39, 40, 41, 45, 50, 59, 63, 103, 115, 129, 131, 143, 178, 183, 222, 223, 228, 234, 235, 274, 295, 316, 317, 322, 329, 330, 345, 352, 358, 359, 388, 398, 542, 702, 703, 713, 754, 778, 783, 891, 892, 894, 895, 896, 999, 1012, 1027, 1038, 1039], "gaussian_filt": [14, 47, 48, 55, 1020], "sigma": [14, 47, 48, 55, 81, 103, 125, 258, 260, 404, 409, 412, 414, 612, 647, 981, 983, 985, 989, 992, 1020], "logical_xor": [14, 155, 344], "binary_eros": 14, "128": [14, 15, 199, 366, 534], "proj": [14, 647], "randn": [14, 34, 35, 40, 55, 66, 67, 81, 82, 99, 103, 128, 143, 151, 155, 168, 171, 188, 193, 194, 198, 212, 213, 216, 246, 249, 250, 255, 267, 269, 270, 274, 289, 290, 312, 316, 317, 322, 337, 343, 344, 348, 381, 384, 641, 668, 670, 676, 685, 817, 902, 905], "rgr_ridg": 14, "rec_l2": 14, "lassocv": [14, 132, 138, 169, 183, 188, 398, 414, 416, 649, 650, 652, 653, 654, 661, 682, 983, 1016, 1027, 1030, 1034, 1037, 1038, 1040, 1041, 1044], "rgr_lasso": 14, "rec_l1": 14, "wspace": [14, 15, 40, 45, 46, 63, 81, 96, 114, 199, 217, 228, 245, 247, 248, 251, 288, 296, 326, 335], "376": [14, 16, 995, 1008], "plot_tomography_l1_reconstruct": [14, 16, 1008], "hierarch": [14, 22, 37, 40, 41, 43, 45, 47, 53, 54, 55, 57, 58, 69, 166, 172, 224, 319, 360, 393, 415, 439, 441, 443, 444, 502, 510, 512, 520, 528, 545, 728, 852, 879, 1004, 1007, 1008, 1022, 1023, 1027, 1030, 1031, 1043], "signal": [14, 82, 96, 97, 98, 105, 123, 125, 151, 156, 157, 166, 168, 177, 178, 184, 185, 187, 188, 193, 194, 198, 200, 218, 251, 318, 406, 407, 409, 415, 416, 417, 420, 473, 501, 519, 524, 529, 532, 535, 539, 543, 544, 623, 642, 643, 644, 645, 650, 651, 661, 662, 670, 682, 683, 684, 782, 817, 825, 873, 983, 987, 1004, 1008, 1011, 1015, 1022, 1023], "unstructur": [14, 37, 40, 41, 42, 45, 48, 57, 69, 166, 224, 301, 407, 439, 443, 461, 501, 528, 852, 999, 1008, 1011, 1031], "nmf": [15, 73, 385, 406, 415, 533, 536, 542, 545, 1022, 1023, 1027, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044], "latentdirichletalloc": [15, 368, 384, 412, 1006, 1032, 1034, 1041, 1042], "corpu": [15, 352, 353, 374, 412, 586, 587, 588, 589, 1021, 1028], "frobeniu": [15, 99, 441, 445, 457, 467, 468, 469, 470, 471, 472, 473, 474, 529, 535, 536, 538, 543, 544, 545, 983, 1034], "kullback": [15, 220, 412, 536, 538, 545, 690, 984, 1034], "leibler": [15, 220, 412, 536, 538, 545, 690, 984, 1034], "diverg": [15, 124, 220, 225, 288, 536, 538, 545, 690, 855, 984, 986, 987, 992, 994, 1034, 1035, 1040], "probabilist": [15, 27, 28, 31, 79, 83, 95, 96, 105, 106, 107, 150, 151, 154, 157, 158, 161, 166, 234, 351, 393, 405, 413, 414, 435, 471, 474, 530, 532, 533, 539, 557, 586, 587, 608, 620, 641, 643, 674, 701, 738, 796, 821, 866, 901, 902, 904, 905, 980, 981, 983, 986, 987, 992, 997, 1002, 1003, 1006, 1008, 1011, 1027, 1030, 1034], "semant": [15, 351, 352, 393, 542, 1021, 1022, 1023, 1029], "runnabl": [15, 383, 384], "coupl": [15, 53, 54, 56, 221, 373, 374, 404, 405, 407, 416, 587, 905, 976, 1002], "ten": [15, 20, 112, 118, 148, 221, 251, 374, 376, 414, 518, 904, 1036], "polynomi": [15, 143, 163, 166, 174, 176, 177, 199, 205, 218, 233, 240, 260, 274, 288, 317, 318, 335, 345, 371, 375, 450, 489, 618, 637, 638, 639, 641, 670, 762, 771, 772, 825, 860, 869, 871, 874, 878, 899, 901, 902, 903, 904, 905, 982, 1002, 1008, 1009, 1023, 1039, 1040], "lda": [15, 34, 91, 95, 98, 100, 102, 106, 107, 166, 292, 362, 376, 403, 502, 534, 539, 547, 548, 848, 1006, 1008, 1009, 1022, 1023, 1032], "proport": [15, 27, 41, 147, 185, 199, 206, 212, 228, 238, 263, 286, 290, 293, 346, 348, 366, 374, 405, 407, 409, 411, 412, 414, 415, 436, 437, 444, 467, 472, 513, 547, 548, 553, 555, 557, 558, 559, 560, 561, 562, 581, 582, 586, 589, 625, 630, 656, 657, 664, 665, 666, 672, 673, 674, 676, 694, 699, 710, 797, 798, 799, 800, 813, 816, 825, 845, 856, 857, 873, 899, 900, 901, 904, 905, 907, 909, 911, 913, 925, 976, 986, 987, 990, 993, 1001, 1002, 1003, 1032, 1044], "238": 15, "tf": [15, 20, 232, 351, 352, 353, 374, 412, 519, 542, 586, 587, 588, 589, 838, 846, 871, 976, 985, 989, 997, 1006, 1021], "idf": [15, 20, 232, 351, 352, 353, 374, 412, 519, 542, 586, 587, 588, 589, 838, 846, 871, 976, 985, 989, 997, 1021, 1027], "283": 15, "286": [15, 414], "2000": [15, 27, 41, 51, 76, 97, 103, 175, 248, 251, 260, 278, 299, 319, 352, 374, 376, 407, 408, 414, 419, 450, 460, 531, 532, 557, 687, 689, 691, 740, 785, 794, 845, 875, 887, 984, 987, 993, 999, 1012, 1020], "081": [15, 995], "326": [15, 92, 352], "minibatchnmf": [15, 368, 412, 1041, 1043, 1044], "batch_siz": [15, 20, 43, 65, 96, 99, 100, 352, 412, 447, 532, 534, 535, 536, 537, 544, 855, 856, 857, 939, 940, 953, 1028, 1035, 1038, 1040, 1041], "087": 15, "237": [15, 1019], "290": [15, 326, 686, 687, 691, 984], "ensta": [15, 18, 38, 49, 62, 199, 217, 221, 261, 263, 351, 352, 353], "chyi": [15, 1030, 1031, 1032, 1033, 1034], "kwei": [15, 1030, 1031, 1032, 1033, 1034], "yau": [15, 1030, 1031, 1032, 1033, 1034], "chyikwei": 15, "fetch_20newsgroup": [15, 20, 71, 261, 329, 351, 352, 353, 374, 487, 1021, 1032, 1037], "countvector": [15, 329, 353, 374, 384, 408, 412, 415, 462, 487, 534, 580, 587, 588, 589, 1021, 1027, 1029, 1032, 1035, 1036, 1037, 1038, 1039, 1040], "tfidfvector": [15, 20, 71, 261, 351, 374, 412, 415, 487, 586, 587, 588, 1021, 1027, 1029, 1035, 1036, 1037, 1040, 1041], "n_top_word": 15, "init": [15, 43, 46, 59, 60, 62, 65, 170, 179, 220, 221, 223, 224, 225, 246, 248, 283, 352, 382, 387, 407, 412, 414, 441, 445, 447, 449, 451, 457, 458, 536, 538, 545, 546, 557, 558, 630, 631, 688, 690, 692, 848, 984, 1027, 1036, 1039, 1041, 1042, 1043], "nndsvda": [15, 412, 536, 538, 545, 1036, 1039], "plot_top_word": 15, "feature_nam": [15, 20, 91, 106, 119, 126, 129, 148, 169, 171, 208, 239, 286, 305, 315, 316, 317, 322, 335, 351, 357, 372, 374, 384, 408, 488, 489, 490, 494, 498, 499, 500, 502, 503, 508, 580, 629, 630, 631, 880, 911, 912, 913, 995, 1003, 1043], "flatten": [15, 33, 223, 233, 258, 309, 335, 347, 385, 500, 567, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 848], "topic_idx": 15, "top_features_ind": 15, "argsort": [15, 18, 20, 21, 22, 124, 126, 171, 172, 199, 217, 315, 325, 326, 351, 352, 374, 995], "top_featur": 15, "barh": [15, 126, 163, 164, 168, 169, 171, 172, 242, 312, 351, 352, 353], "fontdict": [15, 40], "labels": [15, 309], "set_vis": [15, 35, 287, 293, 305], "filter": [15, 47, 48, 205, 217, 258, 260, 285, 351, 367, 374, 385, 388, 406, 407, 415, 446, 486, 487, 501, 586, 589, 593, 594, 595, 596, 597, 598, 771, 834, 928, 952, 989, 990, 1018, 1021, 1037], "useless": [15, 121, 263, 385, 416, 513, 526, 656, 710, 983, 997, 1036], "strip": [15, 217, 352, 366, 373, 374, 494], "header": [15, 71, 261, 351, 352, 374, 377, 415, 486, 487, 796, 799, 800, 810], "footer": [15, 71, 261, 351, 352, 374, 486, 487], "repli": [15, 351, 378, 379, 382], "english": [15, 20, 71, 351, 352, 353, 384, 415, 586, 587, 589, 1006, 1007, 1021, 1040], "occur": [15, 71, 123, 199, 203, 217, 346, 362, 379, 381, 387, 394, 404, 407, 409, 411, 415, 442, 506, 507, 570, 579, 586, 588, 589, 625, 669, 795, 796, 799, 800, 802, 810, 818, 821, 822, 823, 826, 869, 924, 987, 989, 997, 1021, 1027, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "data_sampl": 15, "tfidf_vector": 15, "max_df": [15, 261, 329, 351, 352, 586, 589, 1038], "min_df": [15, 20, 71, 261, 329, 351, 352, 415, 586, 589, 1027, 1029, 1038], "max_featur": [15, 32, 116, 127, 237, 257, 272, 317, 414, 416, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 586, 589, 595, 907, 908, 909, 910, 976, 983, 1027, 1029, 1030, 1034, 1035, 1038, 1041, 1044], "stop_word": [15, 20, 351, 352, 415, 586, 587, 589], "tfidf": [15, 71, 329, 415, 589, 1021], "tf_vector": 15, "beta_loss": [15, 536, 538, 545, 1034], "alpha_w": [15, 412, 536, 538, 545, 1040], "00005": 15, "alpha_h": [15, 412, 536, 538, 545, 1040], "tfidf_feature_nam": 15, "get_feature_names_out": [15, 20, 169, 171, 318, 351, 352, 353, 374, 381, 393, 408, 415, 423, 428, 431, 440, 441, 443, 445, 447, 462, 465, 480, 481, 482, 483, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 564, 565, 566, 567, 568, 579, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 625, 626, 627, 628, 633, 636, 637, 638, 639, 640, 686, 687, 690, 843, 848, 851, 855, 858, 859, 862, 863, 864, 865, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 891, 892, 997, 1040, 1041, 1042, 1043, 1044], "solver": [15, 31, 34, 35, 47, 67, 166, 177, 188, 190, 191, 192, 199, 201, 207, 214, 215, 217, 218, 299, 300, 301, 302, 312, 322, 351, 385, 391, 393, 397, 403, 407, 419, 450, 460, 469, 470, 476, 500, 531, 533, 538, 539, 542, 545, 547, 644, 645, 646, 650, 651, 656, 657, 658, 659, 660, 661, 664, 666, 667, 668, 670, 672, 674, 678, 679, 682, 685, 686, 687, 689, 691, 693, 785, 810, 825, 830, 833, 856, 857, 901, 902, 903, 904, 905, 981, 984, 987, 991, 1001, 1002, 1006, 1008, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "mu": [15, 81, 82, 260, 412, 420, 471, 473, 474, 477, 478, 479, 538, 545, 981, 983, 1034, 1037], "mbnmf": 15, "learning_method": [15, 384, 534], "learning_offset": [15, 534], "tf_feature_nam": 15, "059": [15, 16, 1008], "plot_topics_extraction_with_nmf_lda": [15, 16, 1008], "417": [16, 281], "execut": [16, 23, 29, 36, 69, 77, 84, 88, 94, 107, 109, 136, 141, 149, 161, 163, 165, 173, 176, 183, 188, 218, 226, 234, 243, 252, 265, 276, 279, 282, 297, 303, 313, 323, 331, 332, 349, 354, 361, 367, 379, 385, 401, 403, 407, 412, 418, 441, 459, 796, 802, 810, 818, 820, 821, 822, 823, 826, 844, 953, 954, 997, 1000, 1008, 1013, 1021, 1029, 1032, 1035], "auto_exampl": [16, 23, 29, 36, 69, 77, 84, 88, 94, 107, 109, 136, 141, 149, 161, 165, 173, 176, 218, 226, 243, 252, 276, 279, 282, 297, 303, 313, 323, 331, 332, 349, 354, 361], "mem": [16, 23, 29, 36, 55, 69, 77, 84, 88, 94, 107, 109, 136, 141, 149, 161, 165, 173, 176, 218, 226, 243, 252, 276, 279, 282, 297, 303, 313, 323, 331, 332, 349, 354, 361, 385, 506, 1008], "00": [16, 23, 29, 33, 36, 69, 77, 81, 84, 88, 94, 99, 107, 109, 136, 141, 149, 156, 161, 165, 169, 170, 173, 176, 190, 217, 218, 226, 232, 243, 252, 258, 261, 276, 279, 282, 297, 302, 303, 313, 322, 323, 325, 326, 331, 332, 349, 352, 354, 361, 373, 376, 385, 407, 414, 415, 603, 604, 711, 713, 785, 796, 810, 823, 908, 983, 987, 997, 999, 1001, 1008, 1020], "svm_gui": [16, 17, 1008, 1019], "wikipedia_principal_eigenvector": [16, 18, 1008], "graphic": [17, 20, 82, 170, 329, 351, 352, 353, 374, 385, 406, 407, 409, 412, 789, 790, 794, 829, 911, 987, 988, 994, 1006, 1021], "frontend": [17, 385], "mainli": [17, 28, 54, 112, 115, 151, 269, 278, 366, 381, 405, 609, 989, 994], "intend": [17, 58, 59, 100, 200, 342, 351, 379, 380, 381, 386, 391, 411, 466, 580, 671, 697, 868, 869, 879, 897, 982, 983, 987, 991, 998], "didact": [17, 379, 1007], "induc": [17, 27, 57, 169, 183, 190, 192, 197, 200, 214, 234, 238, 346, 353, 404, 406, 412, 414, 444, 447, 537, 541, 551, 555, 556, 557, 558, 562, 563, 564, 641, 723, 753, 872, 907, 908, 909, 910, 980, 987, 1001, 1019], "mous": [17, 373], "button": [17, 379, 387, 1019], "prettenho": 17, "tkagg": 17, "backend": [17, 367, 377, 393, 466, 897, 953, 955, 957, 987, 1030, 1035, 1036, 1037, 1038, 1045], "backend_tkagg": 17, "figurecanvastkagg": 17, "navigationtoolbar2tk": 17, "navigationtoolbar2tkagg": 17, "deprec": [17, 318, 367, 382, 383, 388, 393, 398, 439, 443, 444, 445, 447, 448, 455, 457, 476, 524, 525, 534, 535, 536, 537, 538, 544, 551, 567, 568, 577, 578, 580, 625, 631, 636, 642, 643, 674, 675, 738, 739, 747, 748, 775, 776, 777, 799, 800, 802, 820, 821, 822, 846, 858, 901, 904, 915, 930, 931, 976, 977, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "tkinter": 17, "tk": 17, "contourset": 17, "dump_svmlight_fil": [17, 1027, 1028, 1032, 1042, 1044], "y_min": [17, 32, 59, 114, 121, 130, 140, 153, 233, 299, 307, 330, 342, 343, 633, 635], "y_max": [17, 32, 59, 114, 121, 130, 140, 153, 217, 233, 299, 307, 330, 342, 343, 633, 635], "x_min": [17, 32, 53, 59, 114, 121, 125, 130, 140, 153, 188, 233, 299, 307, 330, 342, 343], "x_max": [17, 32, 53, 59, 114, 121, 130, 140, 153, 233, 299, 307, 330, 342, 343], "notifi": [17, 570, 571, 572, 1025, 1037], "regist": [17, 183, 351, 385, 955, 957], "surfac": [17, 32, 91, 100, 111, 112, 113, 114, 116, 133, 136, 159, 166, 182, 191, 208, 266, 286, 330, 334, 335, 355, 356, 358, 359, 360, 361, 414, 502, 551, 555, 562, 629, 761, 907, 913, 981, 986, 1001, 1002, 1003, 1008], "surface_typ": 17, "add_observ": 17, "set_surfac": 17, "intvar": 17, "coef0": [17, 175, 342, 345, 450, 533, 637, 638, 641, 772, 774, 901, 902, 903, 904, 905, 985, 1002], "kernel_map": 17, "hasattr": [17, 45, 57, 63, 83, 110, 121, 217, 232, 299, 307, 351, 393, 422, 426, 432, 948, 1037], "x2": [17, 86, 92, 114, 124, 154, 211, 381, 408, 586, 627, 697, 1020], "decision_surfac": 17, "delta": [17, 410, 450], "clear_data": 17, "add_exampl": 17, "example_ad": 17, "refit": [17, 119, 138, 145, 147, 166, 229, 253, 259, 261, 264, 267, 268, 272, 276, 393, 411, 417, 500, 565, 625, 657, 663, 711, 796, 799, 800, 810, 825, 904, 976, 983, 987, 1008, 1034, 1035, 1036], "docstr": [17, 379, 381, 385, 393, 446, 459, 470, 697, 699, 926, 976, 987, 990, 991, 1001, 1027, 1034, 1035, 1040, 1041, 1044], "set_xlim": [17, 32, 43, 61, 76, 81, 93, 117, 130, 164, 170, 197, 199, 204, 233, 245, 264, 266, 278, 288, 299, 305, 307, 308, 309, 310, 316, 322, 347], "attributeerror": [17, 408, 557, 575, 948, 1020, 1036, 1037, 1039, 1043, 1044, 1045], "get_tk_widget": 17, "pack": [17, 388, 1035], "fill": [17, 35, 121, 138, 171, 255, 288, 357, 393, 408, 412, 513, 525, 536, 538, 545, 585, 628, 911, 913, 977, 990, 1003, 1045], "_tkcanva": 17, "mpl_connect": 17, "button_press_ev": 17, "onclick": 17, "toolbar": 17, "controllbar": 17, "c_label": 17, "plot_kernel": 17, "exp": [17, 47, 55, 67, 105, 115, 125, 152, 183, 209, 288, 293, 296, 316, 317, 321, 342, 405, 407, 408, 413, 419, 450, 463, 519, 531, 534, 613, 614, 620, 639, 756, 763, 773, 856, 857, 875, 981, 983, 985, 989, 990, 991, 1000, 1001, 1002, 1019], "xdata": 17, "ydata": 17, "update_exampl": 17, "scalex": 17, "scalei": 17, "examples_load": 17, "remove_surfac": 17, "plot_support_vector": 17, "plot_decision_surfac": 17, "old": [17, 217, 379, 383, 385, 407, 466, 534, 644, 650, 897, 984, 1007, 1027, 1032, 1033, 1035, 1040, 1041, 1042], "isinst": [17, 35, 121, 217, 393], "lineset": 17, "support_vector": [17, 336], "circl": [17, 35, 61, 101, 130, 131, 140, 225, 236, 290, 293, 300, 305, 307, 327, 342, 359, 375, 383, 387, 407, 450, 460, 512, 520, 761, 1002], "dash": [17, 34, 81, 112, 124, 134, 151, 154, 156, 169, 186, 191, 194, 200, 201, 208, 211, 212, 238, 260, 270, 340, 344, 1001], "bone": [17, 212, 348], "rais": [17, 110, 200, 235, 236, 263, 309, 318, 379, 381, 383, 384, 385, 388, 391, 393, 398, 401, 408, 411, 435, 441, 442, 445, 447, 463, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 486, 487, 488, 489, 490, 491, 492, 493, 495, 496, 507, 531, 532, 536, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 571, 574, 575, 579, 580, 586, 587, 588, 589, 591, 592, 600, 601, 608, 609, 615, 627, 630, 633, 634, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 688, 694, 696, 700, 707, 709, 710, 711, 712, 724, 726, 727, 735, 775, 779, 780, 781, 784, 785, 786, 794, 795, 796, 797, 798, 799, 800, 802, 803, 805, 810, 814, 818, 821, 822, 823, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 844, 846, 848, 849, 850, 854, 856, 857, 858, 859, 862, 863, 864, 865, 866, 871, 872, 873, 877, 878, 879, 886, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 914, 917, 919, 920, 922, 923, 940, 944, 948, 971, 972, 973, 974, 987, 997, 1029, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "valueerror": [17, 156, 235, 236, 381, 385, 398, 466, 575, 601, 615, 633, 669, 712, 831, 849, 858, 864, 878, 918, 922, 923, 972, 973, 974, 997, 1029, 1030, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1044], "fm": 17, "kernel_group": 17, "radiobutton": 17, "command": [17, 232, 366, 367, 377, 379, 383, 385, 387, 397, 415, 506, 1006, 1021, 1029], "anchor": [17, 271], "valbox": 17, "stringvar": 17, "textvari": 17, "cmap_group": 17, "hyperplan": [17, 92, 114, 154, 166, 177, 191, 208, 218, 236, 263, 333, 334, 335, 336, 337, 338, 342, 343, 349, 510, 629, 656, 657, 664, 666, 672, 673, 674, 675, 899, 901, 903, 904, 1001, 1002, 1008], "train_button": 17, "get_pars": 17, "optpars": 17, "optionpars": 17, "op": [17, 383, 426, 656, 657, 664, 665, 666, 674, 675, 676, 856, 857, 899, 997], "add_opt": 17, "action": [17, 318, 351, 378, 382, 383, 397, 997, 1037], "store": [17, 33, 54, 55, 71, 73, 82, 91, 145, 159, 175, 185, 188, 203, 221, 229, 239, 250, 265, 269, 325, 353, 360, 366, 373, 374, 379, 381, 386, 387, 388, 391, 393, 408, 410, 412, 414, 415, 417, 418, 436, 438, 442, 444, 448, 455, 467, 468, 471, 472, 473, 474, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 501, 506, 532, 533, 539, 547, 548, 553, 554, 555, 556, 561, 562, 563, 564, 567, 568, 587, 608, 609, 625, 629, 630, 633, 636, 647, 648, 652, 658, 659, 660, 661, 664, 665, 671, 673, 674, 675, 676, 686, 687, 688, 690, 695, 696, 698, 699, 700, 778, 794, 795, 796, 802, 810, 818, 839, 840, 841, 842, 843, 845, 847, 848, 849, 850, 851, 854, 870, 877, 879, 880, 894, 895, 896, 919, 920, 944, 945, 958, 961, 973, 977, 979, 983, 990, 999, 1002, 1003, 1006, 1012, 1021, 1024, 1027, 1028, 1029, 1032, 1033, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "dest": [17, 320], "dump": [17, 18, 401, 485, 839, 840], "argv": [17, 232], "opt": [17, 377, 381], "arg": [17, 235, 300, 380, 393, 412, 414, 421, 569, 570, 571, 572, 573, 574, 575, 576, 615, 697, 863, 983, 989, 990], "parse_arg": 17, "wm_titl": 17, "mainloop": 17, "__main__": [17, 329, 391], "iso": [17, 92, 150, 161, 166, 211, 222, 608, 611, 612, 1008], "gpc": [17, 27, 31, 32, 92, 121, 130, 140, 150, 156, 157, 158, 159, 161, 166, 209, 210, 211, 212, 234, 249, 299, 308, 330, 343, 344, 502, 608, 609, 611, 612, 617, 618, 620, 621, 701, 738, 1008, 1009, 1023, 1037], "exercis": [17, 74, 121, 130, 141, 147, 153, 155, 209, 212, 255, 265, 273, 300, 330, 343, 344, 347, 348, 368, 376, 379, 499, 500, 502, 503, 650, 651, 656, 796, 801, 841, 904, 1008, 1013, 1030], "adaboost": [17, 32, 92, 111, 115, 116, 121, 123, 128, 131, 132, 135, 136, 154, 166, 306, 342, 357, 358, 359, 517, 549, 551, 552, 557, 629, 701, 825, 907, 908, 1008, 1009, 1023, 1029], "classic": [18, 194, 224, 245, 251, 376, 383, 409, 411, 412, 441, 445, 447, 457, 490, 498, 502, 508, 630, 631, 909, 910, 981, 983, 986, 989, 997, 1006, 1015, 1027, 1028, 1032, 1041], "graph": [18, 26, 40, 45, 47, 67, 68, 159, 220, 257, 283, 285, 328, 366, 379, 382, 393, 404, 409, 418, 439, 442, 443, 450, 451, 455, 460, 461, 469, 470, 476, 509, 583, 584, 686, 689, 690, 693, 779, 841, 842, 843, 845, 847, 849, 850, 851, 852, 853, 854, 895, 984, 987, 990, 992, 1000, 1003, 1006, 1011, 1017, 1020, 1027, 1034, 1035, 1037, 1040, 1042], "vertex": [18, 27, 407, 451, 1040], "en": [18, 25, 387, 529, 535, 593, 634, 662, 666, 669, 683, 684, 693, 703, 841, 842, 847, 848, 849, 850, 877, 893, 907, 908, 983, 987, 1002, 1003], "wiki": [18, 25, 385, 387, 593, 634, 666, 669, 693, 703, 841, 842, 847, 848, 849, 850, 877, 893, 907, 908, 983, 1003], "eigenvector_centr": 18, "webpag": [18, 175, 379], "pagerank": 18, "insid": [18, 20, 27, 170, 201, 235, 260, 327, 338, 368, 373, 374, 381, 385, 398, 407, 415, 435, 441, 442, 445, 447, 463, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 531, 532, 536, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 586, 587, 588, 589, 592, 608, 609, 633, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 688, 797, 798, 803, 805, 814, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 844, 846, 849, 850, 856, 857, 859, 862, 864, 865, 866, 871, 878, 879, 894, 895, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 944, 947, 955, 994, 1011, 1044], "accord": [18, 25, 27, 38, 50, 79, 118, 124, 148, 152, 182, 199, 217, 232, 315, 342, 352, 362, 379, 381, 391, 392, 393, 394, 404, 407, 409, 411, 412, 414, 415, 417, 435, 448, 450, 454, 458, 460, 463, 467, 502, 514, 515, 516, 523, 528, 530, 533, 534, 536, 538, 548, 551, 552, 559, 560, 561, 564, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 639, 640, 642, 643, 647, 656, 657, 668, 678, 689, 693, 732, 776, 777, 796, 797, 798, 799, 800, 803, 804, 805, 810, 820, 834, 835, 836, 837, 838, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 862, 869, 877, 889, 891, 892, 899, 900, 901, 902, 904, 905, 981, 983, 987, 989, 990, 997, 1000, 1001, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "tradit": [18, 56, 199, 214, 352, 368, 405, 414, 415, 630, 692, 983, 986, 997, 1006, 1011], "power_iter": 18, "martinsson": [18, 533, 539, 936], "dbpedia": 18, "content": [18, 310, 351, 353, 374, 379, 383, 385, 401, 406, 415, 484, 501, 506, 507, 586, 587, 589, 669, 913, 996, 1011, 1021, 1028, 1037], "bz2": [18, 506, 507], "bz2file": 18, "pprint": [18, 125, 235, 261, 374, 931], "urlopen": 18, "randomized_svd": [18, 388, 449, 451, 530, 539, 542, 544, 1027, 1028, 1033, 1040, 1041, 1042], "redirects_url": 18, "redirects_en": 18, "nt": 18, "redirects_filenam": 18, "page_links_url": 18, "page_links_en": 18, "page_links_filenam": 18, "resourc": [18, 43, 125, 163, 199, 301, 317, 365, 382, 392, 414, 799, 800, 988, 1007, 1011, 1013, 1023, 1035, 1040, 1041], "wait": [18, 377, 379, 383, 393, 664, 665, 666, 674, 676, 1039], "wb": 18, "index_map": 18, "setdefault": [18, 914], "dbpedia_resource_prefix_len": 18, "shortname_slic": 18, "short_nam": 18, "nt_uri": 18, "uri": 18, "prefix": [18, 71, 261, 285, 315, 379, 383, 385, 387, 417, 423, 440, 441, 443, 445, 447, 462, 465, 480, 481, 482, 483, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 637, 638, 639, 640, 686, 687, 690, 802, 823, 843, 848, 851, 855, 859, 865, 891, 892, 1033, 1034, 1040, 1042], "get_redirect": 18, "transit": [18, 346, 383, 1038], "malform": [18, 1031], "1000000": [18, 534], "08d": 18, "isoformat": 18, "closur": 18, "transitive_target": 18, "seen": [18, 26, 41, 56, 67, 83, 99, 105, 119, 125, 169, 170, 195, 224, 231, 235, 300, 305, 338, 351, 374, 381, 383, 392, 393, 405, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 423, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 462, 463, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 519, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 608, 609, 621, 625, 626, 627, 628, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 686, 687, 688, 689, 690, 794, 795, 796, 799, 800, 810, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 858, 859, 862, 863, 864, 865, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 891, 892, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 962, 968, 976, 982, 990, 991, 997, 1003, 1011, 1016, 1017, 1019, 1020, 1039, 1040, 1041, 1042, 1043, 1044], "break": [18, 40, 47, 71, 82, 166, 188, 191, 205, 235, 247, 278, 318, 326, 333, 349, 351, 353, 379, 381, 383, 385, 392, 407, 467, 510, 637, 771, 775, 778, 794, 872, 879, 884, 901, 904, 983, 986, 995, 997, 1002, 1007, 1008, 1027, 1028, 1034, 1035, 1037, 1039, 1043], "get_adjacency_matrix": 18, "resolv": [18, 378, 379, 383, 387, 394, 415, 444, 450, 460, 689, 693, 936, 977, 987, 1034, 1036, 1037, 1040], "lil_matrix": 18, "float32": [18, 124, 223, 302, 320, 367, 374, 379, 381, 403, 555, 556, 557, 558, 561, 562, 563, 564, 591, 592, 638, 639, 656, 697, 760, 864, 907, 908, 909, 910, 917, 963, 964, 965, 1003, 1012, 1021, 1030, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "del": [18, 385, 1039, 1040], "csr": [18, 353, 366, 373, 374, 388, 391, 393, 415, 418, 441, 444, 445, 447, 448, 457, 495, 506, 521, 525, 551, 552, 555, 556, 562, 563, 564, 588, 628, 656, 690, 712, 765, 789, 841, 842, 843, 845, 847, 849, 850, 851, 852, 853, 854, 862, 866, 868, 870, 871, 872, 874, 877, 878, 879, 882, 883, 884, 886, 889, 892, 907, 908, 909, 910, 915, 919, 920, 942, 950, 962, 963, 964, 965, 966, 967, 968, 990, 997, 1001, 1027, 1028, 1033, 1035, 1036, 1042, 1043, 1044], "tocsr": 18, "convers": [18, 125, 190, 351, 362, 368, 373, 379, 381, 387, 391, 401, 415, 570, 854, 863, 871, 919, 920, 973, 984, 1007, 1011, 1035, 1036, 1037, 1040, 1043], "5m": 18, "ram": [18, 54, 368, 414, 891, 892, 989, 1002, 1021, 1033, 1039, 1042, 1043], "5000000": 18, "strongest": [18, 192], "highest": [18, 20, 27, 83, 144, 148, 203, 258, 260, 271, 317, 351, 379, 391, 405, 407, 411, 414, 416, 435, 553, 555, 562, 590, 593, 594, 596, 597, 598, 601, 602, 604, 633, 635, 723, 753, 791, 794, 796, 799, 800, 810, 896, 907, 938, 976, 983, 987, 988, 991, 1001, 1003, 1039], "centrality_scor": 18, "networkx": [18, 388], "copyright": [18, 83], "aric": 18, "hagberg": 18, "lanl": 18, "gov": [18, 376], "dan": [18, 1027, 1031, 1032, 1033, 1035, 1036], "schult": 18, "dschult": 18, "pieter": [18, 1033, 1034, 1041], "swart": 18, "incoming_count": 18, "nonzero": [18, 20, 105, 198, 232, 264, 353, 404, 418, 442, 521, 522, 529, 535, 540, 546, 586, 589, 683, 684, 697, 841, 842, 845, 847, 849, 850, 983, 987], "indptr": [18, 283, 360, 962, 963, 964, 965, 966, 967, 968, 1035, 1043], "dangl": 18, "isclos": 18, "guess": [18, 112, 121, 411, 414, 415, 476, 530, 536, 538, 539, 545, 785, 987, 1001], "prev_scor": 18, "dot": [18, 33, 34, 45, 50, 55, 58, 63, 79, 80, 81, 83, 86, 87, 97, 98, 99, 103, 105, 112, 115, 151, 152, 158, 159, 169, 180, 183, 191, 193, 194, 206, 233, 246, 247, 249, 250, 264, 334, 336, 342, 366, 381, 385, 388, 393, 404, 412, 415, 531, 536, 538, 545, 588, 589, 612, 644, 645, 648, 650, 651, 652, 655, 658, 659, 660, 661, 679, 682, 685, 758, 760, 871, 911, 937, 985, 989, 997, 1001, 1002, 1020, 1036], "converg": [18, 58, 62, 79, 80, 123, 125, 151, 157, 160, 192, 201, 207, 215, 246, 248, 300, 301, 305, 310, 326, 368, 388, 393, 404, 407, 412, 415, 417, 419, 438, 441, 444, 445, 446, 447, 450, 452, 457, 458, 459, 460, 469, 470, 476, 480, 481, 482, 531, 533, 534, 535, 536, 537, 544, 551, 569, 608, 642, 643, 644, 645, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 666, 670, 672, 674, 676, 680, 681, 685, 686, 688, 689, 692, 693, 794, 795, 848, 856, 857, 894, 895, 901, 977, 982, 983, 984, 986, 991, 1001, 1027, 1030, 1031, 1032, 1034, 1035, 1038, 1040, 1041, 1042, 1043, 1044], "l_inf": 18, "scores_max": 18, "err": [18, 86, 100, 112], "6f": [18, 100, 265, 734, 792], "chanc": [18, 37, 39, 50, 69, 112, 143, 166, 172, 199, 207, 214, 217, 260, 266, 269, 270, 311, 346, 352, 362, 378, 407, 411, 698, 700, 702, 703, 706, 714, 752, 754, 783, 792, 824, 987, 995, 1003, 1008, 1043], "concern": [19, 37, 78, 85, 89, 95, 108, 111, 142, 150, 162, 166, 174, 177, 219, 244, 250, 277, 280, 284, 298, 304, 324, 333, 350, 355, 366, 381, 406, 984, 999], "twenti": [20, 232, 376, 404, 407, 1021], "comp": [20, 86, 87, 99, 106, 302, 329, 351, 352, 353, 374, 1021], "window": [20, 329, 374, 379, 381, 382, 415, 1006, 1027, 1030, 1034, 1038, 1040, 1041], "misc": [20, 54, 99, 261, 329, 351, 352, 353, 374, 1020], "categori": [20, 45, 63, 71, 72, 122, 132, 169, 170, 199, 207, 214, 238, 261, 300, 301, 307, 311, 312, 317, 320, 322, 329, 351, 352, 353, 373, 374, 388, 406, 407, 408, 414, 415, 417, 486, 494, 495, 501, 559, 560, 646, 656, 657, 667, 678, 740, 755, 756, 835, 872, 873, 880, 977, 983, 984, 985, 989, 995, 1012, 1021, 1033, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "noth": [20, 71, 351, 352, 384, 540, 712, 862, 871, 920, 997], "frequenc": [20, 28, 151, 170, 183, 193, 199, 232, 316, 317, 351, 352, 353, 374, 391, 405, 411, 412, 414, 415, 416, 549, 555, 557, 558, 559, 562, 586, 587, 588, 589, 602, 656, 657, 662, 664, 666, 672, 673, 674, 683, 684, 828, 863, 872, 873, 899, 901, 904, 907, 909, 925, 983, 984, 989, 997, 1001, 1003, 1029, 1031, 1032, 1038, 1045], "dhillon": [20, 404, 449, 451, 509], "cut": [20, 44, 47, 66, 67, 222, 383, 391, 404, 407, 444, 450, 451, 460, 586, 589, 689, 693, 997], "minibatchkmean": [20, 37, 39, 41, 44, 45, 51, 59, 60, 61, 62, 64, 69, 92, 166, 352, 368, 407, 412, 438, 440, 445, 510, 776, 1008, 1028, 1033, 1034, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "coclust": [20, 404, 449, 511], "4415": 20, "3015": 20, "talk": [20, 71, 261, 351, 352, 353, 374, 393, 401, 1011, 1013, 1021], "polit": [20, 351, 374, 378, 983, 988], "mideast": [20, 374], "cosmo": 20, "angmar": 20, "alfalfa": 20, "alphalpha": 20, "prolin": [20, 310, 376], "benson": 20, "1948": 20, "4325": 20, "gun": [20, 374], "sci": [20, 71, 351, 352, 353, 374, 391, 687, 691, 870, 984, 997, 1021], "med": [20, 71, 269, 374, 997, 1021], "geb": 20, "gordon": [20, 248, 1033, 1037, 1039, 1041], "clinton": 20, "pitt": 20, "cdt": 20, "surrend": 20, "veal": 20, "1259": 20, "3534": 20, "soc": [20, 374, 1021], "religion": [20, 261, 351, 352, 353, 374, 988, 1021], "alt": [20, 261, 329, 351, 352, 353, 374, 387, 1021], "atheism": [20, 261, 329, 351, 352, 353, 374, 1021], "god": [20, 351, 352, 1021], "jesu": [20, 351, 352], "kent": 20, "belief": [20, 260, 855, 992], "christ": 20, "faith": [20, 157, 343], "moral": [20, 72, 351, 656, 1035, 1039, 1040], "775": 20, "1623": 20, "pc": [20, 329, 353, 374], "hardwar": [20, 329, 353, 366, 367, 374, 377, 391, 397, 403, 1006, 1041, 1042], "scsi": 20, "nada": 20, "vga": 20, "esdi": 20, "isa": 20, "kth": [20, 817], "s3": [20, 97, 148, 187, 188, 376, 1020], "vlb": 20, "bmug": 20, "2180": 20, "2802": 20, "mac": [20, 311, 329, 374, 379, 706, 987], "electron": [20, 148, 374, 376, 536, 538, 545, 625], "voltag": 20, "ship": [20, 132, 164, 357, 367, 377, 397, 415, 983, 1027, 1036], "circuit": [20, 984], "mpce": 20, "kolstad": 20, "spectralcoclust": [20, 22, 404, 449, 1029, 1034, 1038], "v_measure_scor": [20, 38, 39, 50, 59, 321, 352, 407, 715, 733, 734, 754, 987, 1036], "number_norm": 20, "token": [20, 353, 366, 374, 383, 415, 534, 586, 587, 588, 589, 1027, 1035, 1039], "placehold": [20, 383, 625, 626, 627, 628, 811, 812, 815, 816, 977], "begin": [20, 110, 148, 151, 255, 262, 281, 318, 351, 362, 379, 384, 385, 393, 404, 407, 414, 551, 552, 557, 559, 560, 664, 665, 674, 675, 676, 976, 979, 983, 987, 997, 999, 1001, 1035, 1041, 1042], "By": [20, 46, 96, 128, 129, 178, 203, 235, 269, 278, 305, 315, 321, 322, 342, 351, 367, 379, 381, 385, 386, 393, 398, 407, 408, 410, 411, 412, 413, 414, 416, 436, 439, 443, 444, 448, 462, 465, 466, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 522, 524, 547, 548, 555, 556, 557, 558, 562, 563, 583, 584, 586, 587, 589, 604, 607, 630, 631, 669, 671, 673, 675, 688, 690, 692, 695, 697, 698, 700, 701, 716, 726, 727, 731, 735, 780, 781, 784, 791, 793, 799, 800, 845, 859, 860, 872, 873, 875, 877, 887, 889, 897, 902, 903, 907, 908, 909, 910, 919, 920, 955, 976, 977, 979, 983, 987, 994, 995, 997, 999, 1003, 1012, 1016, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1037, 1039, 1041, 1044], "isdigit": [20, 415], "numbernormalizingvector": 20, "build_token": [20, 415, 586, 587, 589], "super": [20, 26, 28, 381, 415, 1035], "forsal": [20, 353, 374], "rec": [20, 353, 374, 639], "auto": [20, 26, 28, 34, 58, 59, 93, 144, 145, 148, 155, 175, 182, 220, 225, 233, 240, 257, 259, 267, 283, 286, 291, 307, 315, 316, 317, 318, 319, 320, 334, 335, 336, 341, 344, 345, 353, 373, 374, 381, 414, 416, 417, 418, 439, 442, 443, 444, 445, 447, 448, 450, 453, 454, 455, 457, 460, 494, 506, 507, 533, 536, 538, 539, 542, 545, 547, 555, 556, 559, 560, 561, 562, 563, 565, 566, 591, 592, 595, 600, 605, 606, 627, 629, 630, 631, 633, 637, 644, 645, 648, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 670, 671, 672, 678, 679, 680, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 696, 698, 700, 732, 738, 799, 800, 827, 839, 840, 841, 842, 843, 844, 845, 847, 848, 849, 850, 851, 852, 853, 856, 857, 872, 873, 880, 891, 892, 896, 899, 900, 901, 902, 903, 904, 905, 909, 910, 935, 936, 953, 956, 978, 981, 983, 984, 987, 988, 990, 997, 1002, 1006, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "motorcycl": [20, 374], "sport": [20, 374], "basebal": [20, 374], "hockei": [20, 374], "crypt": [20, 374], "n_cluster": [20, 21, 22, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 57, 58, 59, 60, 61, 62, 63, 65, 67, 68, 96, 319, 352, 379, 393, 407, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 457, 458, 459, 460, 461, 509, 511, 708, 789, 790, 1020, 1027, 1031, 1033, 1035, 1036, 1038, 1041], "svd_method": [20, 449, 451, 530, 1030], "kmean": [20, 21, 37, 38, 44, 46, 47, 49, 51, 54, 58, 59, 62, 66, 69, 166, 248, 251, 308, 319, 352, 388, 407, 438, 441, 446, 447, 450, 460, 510, 708, 789, 790, 794, 795, 864, 990, 997, 1007, 1008, 1020, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "20000": [20, 98], "n_init": [20, 43, 44, 46, 51, 58, 59, 62, 65, 220, 221, 222, 223, 316, 319, 352, 407, 441, 445, 447, 449, 450, 451, 457, 460, 688, 692, 794, 795, 1020, 1027, 1035, 1041, 1042, 1043], "y_coclust": 20, "row_labels_": [20, 21, 22, 404, 449, 451], "y_kmean": 20, "fit_predict": [20, 57, 58, 61, 228, 235, 238, 290, 381, 393, 407, 425, 429, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 467, 561, 675, 789, 790, 794, 795, 845, 851, 859, 903, 993, 1032, 1035, 1036, 1040, 1042, 1044], "document_nam": 20, "bicluster_ncut": 20, "get_indic": [20, 422, 449, 451], "float_info": 20, "row_compl": 20, "logical_not": [20, 65, 105, 202], "rows_": [20, 404, 422, 449, 451], "col_compl": 20, "columns_": [20, 404, 422, 449, 451], "most_common": 20, "counter": [20, 112, 267, 407, 674, 675, 676, 1040], "itemgett": 20, "revers": [20, 76, 148, 204, 260, 532, 539, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 609, 786, 859, 987, 1027, 1028, 1037, 1039, 1043], "best_idx": [20, 259], "get_shap": [20, 422, 449, 451], "cluster_doc": 20, "cluster_word": 20, "cat_str": 20, "0f": [20, 59], "out_of_cluster_doc": 20, "word_col": 20, "word_scor": 20, "important_word": 20, "556": [20, 23, 1008], "plot_bicluster_newsgroup": [20, 23, 1008], "semi": [20, 32, 71, 121, 130, 140, 153, 233, 236, 299, 307, 317, 331, 335, 341, 342, 353, 374, 393, 486, 502, 533, 586, 588, 674, 726, 825, 859, 863, 894, 895, 896, 904, 985, 990, 993, 1008, 1009, 1023, 1027, 1039, 1042], "supervis": [20, 26, 28, 32, 38, 50, 55, 59, 71, 87, 104, 117, 121, 130, 139, 140, 153, 221, 233, 236, 247, 260, 292, 299, 307, 317, 328, 331, 335, 341, 342, 352, 353, 366, 374, 381, 392, 393, 405, 407, 410, 411, 412, 414, 415, 417, 435, 437, 462, 486, 501, 502, 551, 586, 588, 591, 592, 632, 674, 726, 797, 798, 801, 803, 804, 805, 806, 811, 812, 813, 814, 815, 816, 819, 820, 821, 822, 824, 825, 848, 858, 859, 863, 873, 880, 894, 895, 896, 904, 981, 984, 987, 989, 990, 993, 997, 998, 1002, 1003, 1004, 1006, 1007, 1008, 1010, 1012, 1013, 1015, 1021, 1023, 1027, 1033, 1039], "checkerboard": [21, 404, 449, 451, 509, 511], "simultan": [21, 56, 97, 264, 268, 321, 346, 359, 371, 404, 407, 976, 987, 988, 1003, 1011, 1034], "identifi": [21, 91, 98, 104, 125, 126, 168, 169, 199, 202, 203, 248, 250, 258, 263, 269, 292, 312, 317, 342, 351, 352, 373, 374, 378, 379, 383, 384, 393, 407, 408, 411, 414, 415, 444, 448, 455, 485, 494, 506, 507, 553, 554, 555, 556, 561, 562, 563, 564, 604, 641, 647, 697, 710, 771, 824, 845, 864, 894, 895, 976, 983, 987, 993, 1000, 1011, 1019, 1034, 1036, 1041, 1042], "particularli": [21, 32, 71, 72, 75, 105, 130, 200, 230, 260, 307, 316, 348, 362, 366, 379, 388, 393, 407, 408, 410, 413, 415, 494, 802, 818, 836, 936, 955, 956, 983, 984, 987, 989, 995, 1007, 1011, 1020, 1027, 1032, 1034, 1035, 1041], "suit": [21, 96, 130, 169, 199, 200, 228, 250, 318, 319, 321, 351, 367, 379, 381, 384, 385, 387, 391, 397, 410, 412, 414, 448, 450, 501, 675, 836, 880, 930, 976, 979, 984, 987, 989, 990, 1001, 1006, 1007, 1011, 1014, 1034, 1041], "arrang": [21, 281, 630, 830, 831, 832, 833, 987], "genom": [21, 511], "rearrang": [21, 22, 404], "kemaleren": [21, 22], "make_checkerboard": [21, 509, 1029], "uniform": [21, 32, 38, 54, 124, 125, 128, 144, 152, 157, 160, 178, 179, 213, 225, 228, 231, 268, 286, 289, 290, 295, 299, 306, 308, 309, 312, 319, 321, 337, 381, 384, 407, 436, 437, 549, 567, 568, 608, 609, 626, 637, 647, 648, 652, 666, 674, 675, 676, 697, 719, 720, 725, 742, 743, 745, 747, 748, 750, 782, 787, 788, 800, 808, 810, 834, 835, 838, 841, 842, 849, 850, 864, 876, 878, 888, 924, 938, 976, 977, 986, 987, 990, 1033, 1035, 1037, 1041, 1043], "matshow": [21, 22, 67, 120, 146, 301, 500], "afterward": [21, 383, 533, 539, 823], "row_idx_shuffl": 21, "permut": [21, 22, 38, 82, 118, 120, 126, 140, 143, 148, 166, 167, 173, 215, 253, 260, 276, 309, 312, 328, 396, 402, 407, 414, 462, 494, 498, 502, 557, 558, 562, 563, 625, 628, 632, 677, 702, 703, 715, 733, 734, 752, 754, 792, 813, 815, 824, 825, 859, 873, 904, 907, 908, 936, 956, 958, 961, 987, 1001, 1008, 1016, 1019, 1023, 1027, 1033, 1040, 1042], "col_idx_shuffl": 21, "redefin": [21, 125, 169], "lost": [21, 58, 83, 374, 380, 391, 984, 987], "ground": [21, 33, 41, 46, 50, 58, 59, 62, 79, 83, 87, 99, 128, 159, 183, 193, 199, 200, 238, 251, 263, 352, 393, 406, 407, 701, 702, 703, 706, 710, 711, 712, 713, 715, 716, 719, 720, 721, 725, 726, 727, 731, 733, 734, 735, 736, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 754, 780, 781, 782, 783, 784, 787, 788, 792, 793, 987, 1000, 1012, 1020, 1035], "truth": [21, 33, 41, 46, 50, 58, 59, 62, 79, 83, 87, 99, 103, 128, 159, 183, 193, 199, 200, 238, 251, 263, 352, 393, 406, 407, 701, 702, 703, 706, 710, 711, 712, 713, 715, 716, 719, 720, 721, 723, 725, 726, 727, 731, 733, 734, 735, 736, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 780, 781, 782, 783, 784, 787, 788, 792, 793, 987, 1012, 1020, 1035, 1041], "consensus_scor": [21, 22, 404, 1029], "biclusters_": [21, 22, 422, 449, 451], "consensu": [21, 22, 38, 378, 379, 394, 404, 407, 647, 669, 676, 677, 717, 987], "perfect": [21, 27, 38, 71, 82, 99, 101, 195, 199, 351, 352, 379, 383, 407, 411, 551, 552, 688, 692, 702, 703, 706, 715, 723, 725, 728, 734, 740, 753, 754, 782, 783, 792, 983, 987, 990, 1002, 1011, 1019, 1041], "ascend": [21, 72, 171, 311, 414, 448, 454, 625, 633, 911, 912, 913, 1001, 1037, 1043], "column_labels_": [21, 22, 404, 449, 451], "reorder": [21, 102, 393, 695, 716, 1007, 1035], "reordered_row": 21, "reordered_data": 21, "step": [21, 27, 34, 43, 55, 56, 59, 68, 71, 72, 73, 74, 75, 82, 87, 99, 103, 112, 117, 121, 122, 123, 132, 145, 146, 147, 153, 156, 169, 171, 199, 207, 217, 229, 230, 233, 239, 242, 251, 258, 261, 267, 269, 283, 285, 286, 291, 299, 302, 307, 310, 311, 316, 319, 330, 334, 338, 352, 353, 356, 362, 366, 374, 377, 378, 379, 381, 383, 384, 387, 391, 393, 404, 405, 407, 409, 410, 412, 414, 415, 416, 440, 445, 447, 534, 535, 536, 537, 544, 561, 586, 587, 589, 591, 592, 595, 604, 625, 642, 646, 664, 665, 667, 674, 676, 677, 678, 692, 698, 794, 795, 796, 799, 800, 810, 830, 831, 832, 833, 855, 856, 857, 859, 860, 862, 899, 900, 901, 902, 904, 905, 935, 936, 958, 962, 977, 983, 986, 991, 992, 997, 1001, 1003, 1004, 1006, 1010, 1017, 1021, 1027, 1031, 1032, 1034, 1035, 1036, 1038, 1039, 1040, 1043], "outer": [21, 101, 265, 327, 449, 512, 638, 648, 649, 652, 979, 1028], "product": [21, 72, 96, 133, 151, 156, 170, 342, 362, 366, 381, 382, 385, 388, 401, 404, 412, 414, 449, 536, 538, 545, 580, 587, 588, 589, 611, 612, 631, 638, 662, 663, 683, 684, 758, 760, 772, 774, 871, 874, 891, 892, 937, 976, 979, 983, 985, 997, 999, 1001, 1002, 1006, 1011, 1035], "shade": [21, 54, 182, 286, 291, 334, 412], "532": [21, 23, 317, 323, 1008], "plot_spectral_biclust": [21, 23, 1008], "silhouett": [21, 37, 38, 39, 50, 58, 59, 66, 69, 166, 352, 379, 445, 510, 789, 790, 1008, 1027, 1031], "propag": [21, 33, 37, 38, 50, 56, 64, 65, 69, 90, 146, 166, 237, 324, 331, 374, 406, 438, 452, 500, 510, 512, 695, 702, 703, 711, 712, 715, 716, 734, 790, 792, 859, 873, 894, 895, 896, 953, 954, 991, 1008, 1009, 1022, 1023, 1027, 1039, 1042], "make_biclust": [22, 511, 1029], "implant": 22, "row_idx": [22, 199], "col_idx": 22, "fit_data": 22, "346": [22, 23, 309, 313, 414, 499, 553, 554, 1008], "plot_spectral_coclust": [22, 23, 1008], "434": 23, "being": [25, 28, 35, 46, 53, 56, 83, 87, 91, 101, 112, 116, 129, 151, 156, 169, 171, 175, 193, 235, 238, 254, 260, 302, 309, 310, 338, 342, 351, 353, 377, 378, 379, 381, 383, 384, 391, 393, 394, 401, 407, 409, 411, 414, 415, 416, 417, 418, 420, 439, 440, 442, 443, 448, 454, 467, 473, 491, 521, 567, 638, 647, 654, 670, 672, 685, 688, 692, 710, 716, 731, 733, 780, 786, 794, 839, 840, 845, 847, 849, 850, 851, 874, 892, 937, 976, 977, 983, 986, 987, 990, 993, 994, 997, 999, 1001, 1002, 1003, 1027, 1028, 1033, 1034, 1035, 1036, 1038, 1039, 1041, 1042, 1043, 1044], "postprocess": [25, 405, 533, 539], "brier": [25, 26, 405, 707], "brier_scor": 25, "sigmoid": [25, 26, 27, 28, 371, 414, 435, 450, 533, 559, 618, 637, 641, 762, 771, 774, 856, 857, 901, 902, 903, 904, 905, 992, 1002, 1023, 1040, 1044], "isoton": [25, 26, 74, 76, 166, 223, 227, 243, 435, 655, 922, 1008, 1009, 1023, 1028, 1029, 1030, 1031, 1033, 1040, 1043], "belong": [25, 28, 31, 56, 61, 238, 260, 315, 321, 327, 373, 374, 404, 405, 407, 408, 410, 411, 414, 422, 438, 441, 445, 446, 447, 449, 451, 521, 710, 728, 803, 809, 820, 846, 866, 880, 943, 944, 983, 986, 987, 989, 990, 991, 993, 1002, 1006, 1012, 1019], "mblondel": [25, 49, 190, 221, 261, 351, 373, 506], "telecom": [25, 26, 43, 228, 1011], "balaz": [25, 1031], "kegl": [25, 1031], "jhm": [25, 26, 27, 28, 151, 152, 154, 155, 156, 157, 158, 160, 234], "informatik": [25, 26, 27, 28, 151, 152, 154, 155, 156, 157, 158, 160, 234, 987], "uni": [25, 26, 27, 28, 75, 116, 151, 152, 154, 155, 156, 157, 158, 160, 190, 233, 234, 327, 346], "bremen": [25, 26, 27, 28, 151, 152, 154, 155, 156, 157, 158, 160, 234], "make_blob": [25, 27, 34, 39, 43, 44, 45, 50, 56, 57, 58, 60, 61, 63, 64, 65, 92, 191, 211, 228, 248, 308, 316, 319, 336, 339, 340, 347, 375, 381, 382, 414, 513, 694, 708, 789, 790, 1035, 1038, 1041], "50000": 25, "n_bin": [25, 26, 28, 54, 199, 217, 306, 308, 312, 436, 437, 864, 997], "calibration_curv": [25, 405, 435, 436, 1036, 1041, 1045], "blob": [25, 34, 35, 43, 45, 58, 63, 65, 92, 407, 446, 510], "sample_weight": [25, 180, 199, 212, 217, 235, 316, 321, 322, 348, 379, 393, 398, 407, 414, 418, 424, 430, 435, 441, 442, 445, 447, 457, 458, 463, 467, 480, 481, 482, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 608, 609, 630, 631, 632, 633, 635, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 685, 695, 696, 698, 700, 701, 705, 706, 707, 710, 711, 714, 716, 718, 719, 720, 721, 723, 724, 725, 726, 727, 731, 732, 735, 736, 737, 738, 740, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 753, 779, 780, 781, 782, 784, 785, 786, 787, 788, 791, 793, 796, 810, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 844, 846, 849, 850, 856, 857, 859, 864, 878, 879, 894, 895, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 913, 947, 975, 987, 1001, 1002, 1003, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044], "sw_train": [25, 316], "sw_test": [25, 316], "calibratedclassifiercv": [25, 26, 27, 362, 393, 398, 405, 674, 976, 1002, 1007, 1031, 1033, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044], "brier_score_loss": [25, 26, 405, 987, 1035, 1036, 1037, 1045], "gaussiannb": [25, 26, 28, 32, 134, 262, 362, 405, 414, 435, 567, 834, 835, 836, 838, 860, 981, 988, 989, 1031, 1032, 1033, 1035, 1040, 1043], "With": [25, 35, 45, 68, 76, 91, 101, 129, 144, 166, 170, 199, 201, 227, 229, 234, 236, 242, 243, 260, 287, 366, 374, 379, 381, 393, 407, 408, 411, 414, 416, 435, 437, 499, 580, 630, 631, 656, 857, 860, 862, 873, 879, 880, 906, 908, 980, 983, 984, 987, 988, 990, 991, 994, 1001, 1003, 1008, 1012, 1013, 1020, 1024, 1030, 1034, 1035, 1037, 1039, 1041], "itself": [25, 50, 56, 112, 125, 128, 170, 183, 197, 235, 241, 269, 283, 312, 338, 352, 366, 368, 378, 379, 381, 383, 393, 398, 406, 407, 418, 438, 439, 442, 443, 444, 467, 468, 469, 470, 471, 472, 473, 474, 525, 529, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 549, 564, 567, 581, 590, 593, 594, 596, 597, 598, 600, 601, 637, 638, 639, 640, 641, 643, 653, 687, 689, 789, 790, 834, 835, 836, 837, 838, 839, 840, 844, 852, 853, 864, 865, 866, 894, 895, 944, 979, 983, 984, 986, 990, 991, 995, 1006, 1031, 1042], "prob_pos_clf": 25, "predict_proba": [25, 26, 27, 28, 31, 35, 130, 134, 148, 152, 153, 154, 155, 235, 269, 281, 299, 307, 310, 315, 317, 351, 381, 386, 393, 405, 406, 414, 435, 436, 547, 548, 549, 551, 553, 555, 557, 559, 562, 565, 567, 591, 592, 608, 617, 618, 620, 621, 629, 630, 631, 656, 657, 674, 696, 698, 700, 738, 739, 785, 794, 795, 796, 799, 800, 810, 820, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 841, 849, 856, 859, 866, 894, 895, 896, 901, 904, 907, 909, 983, 987, 989, 991, 994, 1000, 1001, 1002, 1003, 1027, 1028, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045], "clf_isoton": 25, "prob_pos_isoton": 25, "clf_sigmoid": 25, "prob_pos_sigmoid": 25, "clf_score": 25, "No": [25, 114, 127, 183, 191, 205, 207, 208, 235, 326, 343, 346, 357, 376, 387, 397, 407, 472, 557, 558, 588, 589, 633, 643, 662, 674, 676, 683, 684, 794, 983, 1044], "clf_isotonic_scor": 25, "clf_sigmoid_scor": 25, "084": 25, "y_uniqu": 25, "rainbow": [25, 222], "this_i": [25, 205], "this_x": [25, 197, 205, 1019], "this_sw": 25, "lexsort": 25, "linewidth": [25, 34, 35, 38, 41, 59, 74, 79, 87, 93, 113, 125, 129, 151, 155, 159, 188, 189, 193, 194, 195, 197, 200, 202, 205, 213, 216, 228, 236, 238, 269, 273, 289, 293, 306, 316, 322, 336, 337, 339, 344, 358, 1017], "51": [25, 43, 86, 107, 148, 149, 156, 214, 217, 278, 283, 407, 408, 763, 773, 778, 983, 1008], "uncalibr": [25, 26, 27, 435], "gnb": [25, 26, 28, 134, 414, 567, 989], "347": [25, 29, 1008], "plot_calibr": [25, 29, 1008], "metadata": [25, 110, 166, 180, 227, 243, 352, 373, 374, 401, 421, 424, 427, 430, 431, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 462, 463, 466, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 486, 487, 494, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 608, 609, 625, 626, 627, 628, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 686, 687, 688, 689, 690, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806, 809, 810, 811, 812, 813, 814, 815, 816, 817, 820, 821, 822, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 858, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 891, 892, 894, 895, 896, 897, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 943, 944, 945, 946, 947, 971, 987, 1006, 1007, 1008, 1012, 1023, 1043], "rout": [25, 110, 166, 180, 227, 243, 421, 424, 427, 430, 431, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 462, 463, 466, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 608, 609, 625, 626, 627, 628, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 686, 687, 688, 689, 690, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806, 809, 810, 811, 812, 813, 814, 815, 816, 817, 820, 821, 822, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 858, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 891, 892, 894, 895, 896, 897, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 944, 945, 946, 947, 971, 1008, 1023, 1041, 1043], "votingclassifi": [25, 27, 28, 111, 136, 166, 208, 357, 398, 502, 562, 568, 629, 656, 837, 841, 904, 907, 976, 977, 1008, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1044], "reliabl": [26, 28, 405, 411, 436, 437, 644, 1003, 1011], "diagram": [26, 28, 72, 240, 316, 322, 381, 405, 407, 436, 437, 466, 897, 997, 1038, 1039, 1044], "redund": [26, 28, 106, 147, 246, 251, 322, 362, 375, 378, 379, 384, 393, 405, 513, 632, 1007, 1021, 1039], "uninform": [26, 28, 312, 375, 384, 415, 976, 983, 1035], "rest": [26, 31, 122, 126, 166, 177, 183, 208, 214, 218, 235, 238, 248, 278, 315, 329, 335, 347, 385, 393, 406, 417, 510, 608, 629, 642, 656, 657, 674, 751, 785, 827, 828, 829, 848, 899, 901, 904, 983, 987, 988, 991, 994, 1002, 1008, 1011, 1031, 1032, 1041, 1042, 1043], "make_classif": [26, 28, 32, 92, 116, 117, 119, 145, 147, 257, 263, 271, 272, 293, 299, 307, 315, 317, 321, 346, 362, 375, 382, 403, 435, 436, 485, 510, 551, 553, 555, 562, 603, 605, 664, 695, 696, 698, 700, 818, 823, 824, 826, 829, 856, 859, 899, 906, 976, 987, 988, 997, 1002, 1033, 1034, 1035, 1037], "100_000": [26, 28, 169], "n_inform": [26, 28, 32, 92, 116, 119, 145, 147, 178, 183, 202, 203, 257, 263, 273, 293, 299, 307, 315, 346, 381, 384, 513, 522, 551, 552, 553, 554, 562, 563, 603, 604, 605, 606, 607, 663, 829, 988, 1035], "n_redund": [26, 28, 32, 92, 119, 145, 147, 257, 263, 293, 299, 307, 384, 435, 513, 551, 553, 562, 829], "logisticregress": [26, 28, 31, 72, 74, 117, 134, 139, 147, 148, 182, 189, 190, 191, 192, 206, 214, 215, 229, 230, 240, 242, 263, 269, 302, 307, 315, 316, 317, 318, 319, 321, 351, 366, 379, 381, 385, 387, 392, 398, 405, 408, 414, 416, 427, 432, 436, 565, 567, 595, 629, 632, 641, 650, 657, 670, 671, 672, 673, 674, 685, 698, 785, 810, 818, 824, 826, 830, 831, 833, 884, 885, 887, 888, 889, 890, 906, 930, 931, 932, 971, 983, 987, 988, 997, 1001, 1002, 1017, 1019, 1027, 1028, 1031, 1032, 1033, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "baselin": [26, 112, 122, 125, 135, 148, 172, 178, 217, 270, 281, 317, 352, 376, 407, 416, 549, 550, 632, 987, 990, 1021, 1043], "regular": [26, 32, 37, 41, 58, 60, 61, 62, 69, 72, 74, 80, 101, 111, 121, 123, 124, 126, 130, 136, 138, 140, 151, 152, 153, 155, 158, 160, 163, 166, 168, 177, 178, 179, 181, 183, 184, 186, 187, 188, 190, 194, 195, 197, 199, 206, 213, 215, 217, 218, 234, 246, 254, 256, 261, 262, 264, 273, 288, 289, 298, 300, 301, 302, 303, 307, 308, 310, 311, 312, 330, 333, 335, 337, 338, 339, 342, 343, 344, 348, 349, 351, 353, 356, 366, 379, 391, 392, 405, 407, 409, 410, 412, 413, 414, 417, 435, 441, 445, 469, 470, 474, 476, 477, 478, 479, 502, 510, 512, 513, 518, 520, 522, 526, 536, 537, 538, 541, 545, 546, 548, 557, 559, 560, 586, 587, 589, 636, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 685, 687, 691, 732, 738, 747, 794, 795, 813, 825, 826, 856, 857, 860, 879, 899, 900, 901, 902, 904, 905, 906, 976, 977, 979, 980, 981, 984, 986, 992, 993, 997, 1000, 1001, 1002, 1008, 1009, 1011, 1016, 1017, 1019, 1023, 1027, 1028, 1029, 1031, 1032, 1036, 1037, 1039, 1040], "logist": [26, 28, 31, 46, 70, 72, 73, 76, 77, 91, 104, 106, 117, 139, 166, 177, 184, 186, 194, 196, 197, 203, 204, 205, 208, 210, 216, 218, 229, 231, 240, 242, 259, 268, 271, 272, 281, 294, 300, 301, 302, 310, 319, 334, 335, 346, 347, 351, 393, 394, 405, 408, 414, 416, 417, 435, 487, 494, 500, 502, 510, 539, 557, 559, 569, 608, 629, 644, 655, 656, 657, 664, 666, 674, 738, 796, 810, 825, 855, 856, 857, 859, 879, 906, 922, 924, 987, 991, 992, 1001, 1002, 1008, 1009, 1011, 1017, 1023, 1031, 1034, 1035, 1037, 1038], "guid": [26, 56, 70, 96, 118, 160, 166, 169, 170, 187, 220, 267, 289, 290, 293, 311, 315, 316, 317, 318, 319, 320, 321, 322, 377, 378, 379, 384, 385, 386, 392, 393, 394, 398, 406, 408, 414, 418, 419, 420, 421, 424, 430, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 455, 457, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 504, 505, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 617, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 695, 696, 698, 699, 700, 701, 702, 703, 705, 706, 707, 708, 710, 711, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 754, 755, 756, 757, 758, 759, 760, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 882, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 913, 932, 987, 988, 1014, 1021, 1027, 1028, 1029, 1030, 1032, 1034, 1036, 1037, 1044, 1045], "gridspec": [26, 28, 66, 245, 386], "calibrationdisplai": [26, 28, 405, 927, 1040, 1041, 1045], "lr": [26, 28, 117, 134, 135, 202, 214, 230, 231, 256, 263, 392, 398, 414, 566, 567, 568, 710, 971], "gnb_isoton": 26, "gnb_sigmoid": 26, "clf_list": [26, 28], "get_cmap": [26, 28, 343], "dark2": [26, 28, 221], "ax_calibration_curv": [26, 28], "calibration_displai": [26, 28], "histogram": [26, 28, 54, 111, 117, 123, 136, 166, 199, 232, 259, 261, 266, 288, 305, 317, 322, 405, 488, 557, 558, 559, 560, 562, 563, 640, 755, 756, 796, 801, 979, 985, 997, 1008, 1022, 1023, 1039, 1042, 1044], "grid_posit": [26, 28], "y_prob": [26, 28, 154, 436, 437, 707, 830, 856, 987, 1041], "poorli": [26, 63, 79, 87, 115, 127, 224, 367, 407, 414, 526, 628, 983, 984, 1033], "violat": [26, 338, 387, 391, 393, 633, 923, 994, 1001, 1003], "typic": [26, 28, 100, 110, 123, 175, 183, 199, 203, 217, 234, 262, 263, 267, 269, 270, 289, 290, 317, 338, 352, 366, 372, 373, 374, 377, 381, 382, 383, 388, 392, 393, 405, 406, 407, 408, 411, 412, 414, 415, 417, 441, 445, 447, 494, 549, 551, 553, 554, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 627, 636, 638, 641, 652, 653, 654, 669, 680, 681, 710, 866, 873, 877, 880, 935, 936, 944, 947, 972, 976, 980, 983, 984, 986, 987, 988, 989, 993, 995, 1011, 1021, 1036, 1040, 1043, 1044], "transpos": [26, 260, 419, 524, 536, 538, 545, 658, 659, 660, 661, 785, 936, 973, 979, 987, 999, 1020, 1027, 1041], "nearli": [26, 263, 374, 393, 406, 761, 987, 990, 999, 1021], "albeit": 26, "strongli": [26, 28, 83, 87, 99, 122, 126, 169, 181, 214, 235, 266, 351, 379, 396, 397, 405, 414, 656, 733, 792, 983, 984, 1023, 1036, 1043], "plenti": 26, "greater": [26, 93, 112, 114, 169, 216, 233, 238, 248, 266, 281, 289, 290, 356, 366, 375, 384, 393, 405, 407, 410, 414, 439, 443, 447, 450, 461, 470, 534, 539, 555, 556, 557, 558, 559, 560, 562, 563, 564, 591, 592, 595, 608, 609, 626, 638, 640, 643, 662, 664, 665, 669, 674, 675, 676, 690, 707, 710, 718, 732, 733, 736, 739, 785, 792, 794, 795, 829, 841, 842, 849, 850, 856, 857, 862, 877, 889, 893, 896, 899, 900, 907, 908, 909, 910, 936, 956, 976, 982, 983, 984, 987, 988, 993, 997, 1002, 1003, 1030, 1035, 1038, 1040, 1041, 1042, 1044], "exploit": [26, 281, 988, 1007, 1030], "f1_score": [26, 267, 329, 374, 735, 987, 1027, 1029, 1030, 1031, 1032, 1036, 1037, 1043, 1044], "log_loss": [26, 27, 124, 127, 152, 310, 329, 351, 393, 405, 414, 555, 557, 559, 562, 644, 656, 674, 907, 909, 976, 983, 987, 1001, 1003, 1029, 1031, 1033, 1041, 1042, 1043, 1044], "precision_scor": [26, 267, 706, 784, 987, 1027, 1029, 1030, 1031, 1032, 1037, 1043], "recall_scor": [26, 267, 411, 706, 781, 987, 1027, 1029, 1030, 1031, 1032, 1037, 1043], "roc_auc_scor": [26, 148, 260, 269, 315, 322, 700, 704, 705, 706, 786, 987, 1029, 1030, 1035, 1037, 1041, 1042], "score_nam": [26, 38, 234, 262, 275, 321, 352, 802, 818], "score_df": 26, "set_index": [26, 112, 125, 156, 188, 217, 260, 311, 352], "decim": [26, 157, 469, 470, 912, 1034, 1035], "098932": 26, "323200": 26, "937443": 26, "871965": 26, "851348": 26, "861533": 26, "117608": 26, "782755": 26, "940374": 26, "857400": 26, "875941": 26, "866571": 26, "098332": 26, "370738": 26, "938613": 26, "883065": 26, "836224": 26, "859007": 26, "108880": 26, "368896": 26, "940201": 26, "861106": 26, "871277": 26, "866161": 26, "refin": [26, 83, 470, 707, 987, 1021], "alter": [26, 164, 381, 393, 726, 727, 735, 780, 781, 784, 1032, 1036, 1039], "uncertainti": [26, 151, 158, 178, 262, 405, 407, 565, 566, 641, 859, 977, 999], "linearsvc": [26, 28, 71, 73, 144, 145, 166, 175, 233, 257, 259, 267, 307, 315, 333, 334, 335, 339, 340, 346, 349, 351, 366, 381, 385, 405, 415, 416, 435, 510, 565, 575, 629, 637, 641, 650, 670, 671, 672, 673, 674, 685, 732, 739, 822, 827, 900, 901, 904, 906, 983, 987, 988, 1002, 1008, 1027, 1028, 1029, 1033, 1035, 1038, 1043], "naivelycalibratedlinearsvc": [26, 28], "df_min_": [26, 28], "df_max_": [26, 28], "calibrated_df": [26, 28], "proba_pos_class": [26, 28], "clip": [26, 28, 217, 231, 305, 338, 633, 674, 738, 869, 997, 1031, 1038, 1039], "proba_neg_class": [26, 28], "proba": [26, 28, 134, 435, 907, 909], "dual": [26, 28, 71, 73, 144, 145, 175, 233, 257, 259, 267, 307, 315, 335, 336, 346, 351, 415, 416, 469, 470, 476, 565, 566, 609, 637, 644, 645, 650, 651, 656, 657, 658, 659, 660, 661, 679, 682, 732, 827, 839, 840, 899, 900, 901, 904, 987, 988, 1002, 1029, 1038, 1041, 1043], "svc_isoton": 26, "svc_sigmoid": 26, "opposit": [26, 28, 54, 68, 101, 169, 170, 188, 267, 393, 405, 409, 411, 416, 441, 445, 447, 467, 536, 538, 545, 561, 710, 727, 845, 903, 1027], "behavior": [26, 28, 38, 40, 53, 147, 163, 166, 169, 170, 199, 217, 235, 251, 253, 263, 265, 276, 301, 302, 305, 307, 312, 338, 362, 367, 373, 376, 379, 381, 383, 387, 388, 393, 405, 407, 411, 415, 534, 549, 564, 664, 665, 666, 674, 675, 676, 697, 699, 726, 727, 780, 781, 784, 797, 798, 801, 813, 814, 815, 816, 817, 836, 872, 899, 900, 976, 983, 987, 988, 993, 997, 1002, 1008, 1011, 1012, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "hing": [26, 206, 209, 211, 268, 335, 336, 340, 342, 393, 664, 674, 732, 899, 906, 983, 1001, 1002, 1021], "focus": [26, 79, 188, 278, 374, 391, 984, 997, 1006], "far": [26, 61, 83, 122, 152, 158, 169, 199, 217, 338, 342, 351, 353, 379, 388, 417, 718, 879, 962, 992, 993, 1002, 1011, 1019], "awai": [26, 27, 28, 61, 79, 121, 151, 152, 156, 202, 342, 343, 374, 405, 417, 626, 841, 842, 849, 850, 986, 987, 1002, 1019], "shown": [26, 49, 58, 90, 110, 114, 118, 125, 160, 168, 170, 183, 189, 197, 217, 225, 228, 233, 238, 247, 260, 263, 266, 269, 278, 288, 300, 301, 305, 306, 307, 325, 346, 351, 352, 379, 384, 394, 405, 407, 408, 411, 412, 413, 415, 417, 436, 458, 630, 696, 698, 699, 700, 711, 796, 810, 911, 913, 982, 983, 984, 987, 990, 997, 1001, 1002, 1003, 1021, 1031, 1036, 1037, 1038, 1041], "varieti": [26, 163, 247, 311, 338, 387, 406, 407, 409, 415, 641, 990, 1003, 1006, 1011, 1029, 1042, 1043], "niculescu": [26, 28, 405, 435, 437], "mizil": [26, 28, 405, 435, 437], "caruana": [26, 28, 405, 435, 437], "144943": 26, "465660": 26, "937597": 26, "872186": 26, "851792": 26, "861868": 26, "099820": 26, "376999": 26, "936480": 26, "853174": 26, "877981": 26, "865400": 26, "098758": 26, "321301": 26, "937532": 26, "873724": 26, "848743": 26, "861053": 26, "deal": [26, 58, 72, 163, 169, 183, 224, 278, 342, 353, 379, 384, 408, 415, 416, 417, 472, 494, 701, 706, 760, 784, 865, 936, 983, 1011, 1018, 1030, 1042, 1043], "situat": [26, 45, 58, 73, 168, 169, 205, 228, 263, 379, 387, 409, 411, 412, 414, 466, 526, 532, 580, 872, 875, 887, 897, 981, 983, 989, 990, 1000, 1003, 1035], "icml": [26, 28, 405, 407, 415, 435, 437, 834, 836, 855, 987, 989, 1001, 1005], "2005": [26, 28, 82, 376, 405, 435, 437, 848, 983, 990, 1000], "364": [26, 29, 287, 297, 469, 470, 1008, 1028], "plot_calibration_curv": [26, 29, 1008], "simplex": [27, 668, 794, 874], "arrow": [27, 1041], "green": [27, 82, 93, 115, 129, 134, 151, 175, 225, 300, 306, 310, 316, 322, 393, 988, 1035, 1036, 1038, 1039], "600": [27, 51, 123, 131, 132, 374, 678], "x_train_valid": 27, "y_train_valid": 27, "cluster_std": [27, 39, 45, 50, 56, 57, 58, 60, 61, 63, 64, 65, 211, 228, 248, 308, 340, 510], "x_valid": 27, "y_valid": 27, "randomforestclassifi": [27, 28, 32, 57, 116, 117, 118, 119, 120, 121, 134, 171, 172, 240, 241, 257, 272, 315, 317, 322, 351, 362, 392, 393, 405, 414, 416, 555, 556, 557, 559, 564, 565, 567, 799, 800, 829, 909, 976, 977, 988, 995, 1011, 1024, 1031, 1032, 1035, 1036, 1037, 1040, 1041, 1042, 1043, 1044], "concaten": [27, 35, 40, 51, 62, 70, 73, 77, 82, 114, 128, 144, 159, 166, 178, 181, 213, 221, 228, 245, 249, 250, 256, 265, 266, 267, 268, 269, 270, 288, 302, 309, 312, 326, 337, 341, 351, 408, 462, 465, 502, 507, 529, 535, 539, 540, 597, 778, 796, 858, 859, 861, 864, 872, 904, 988, 1008, 1016, 1020, 1028], "randomforestclassifierifittedrandomforestclassifi": [27, 119, 120, 322], "cal_clf": 27, "prefit": [27, 393, 405, 416, 435, 565, 566, 595, 1007, 1039, 1040, 1041], "x27": [27, 72, 73, 117, 132, 135, 145, 169, 170, 171, 229, 230, 239, 240, 242, 250, 258, 260, 261, 267, 272, 302, 311, 316, 317, 319, 327], "calibratedclassifiercvifittedcalibratedclassifiercv": 27, "randomforestclassifierrandomforestclassifi": [27, 171, 240, 272], "clf_prob": 27, "cal_clf_prob": 27, "head_width": 27, "ro": 27, "bo": [27, 1039], "unit": [27, 71, 81, 169, 175, 199, 217, 288, 301, 305, 352, 374, 379, 380, 381, 385, 387, 388, 412, 415, 419, 462, 487, 488, 517, 522, 530, 531, 532, 539, 540, 587, 588, 589, 605, 606, 609, 656, 657, 674, 683, 697, 767, 846, 855, 856, 857, 863, 869, 871, 875, 877, 879, 885, 886, 887, 889, 890, 899, 900, 983, 985, 986, 987, 992, 997, 1003, 1006, 1019, 1031, 1035, 1041, 1042], "mid": [27, 338, 987, 989], "frac": [27, 81, 82, 112, 260, 267, 269, 318, 404, 405, 407, 409, 412, 413, 414, 415, 417, 430, 461, 463, 480, 481, 482, 552, 554, 556, 558, 560, 563, 566, 568, 609, 613, 617, 620, 621, 633, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 658, 659, 660, 661, 662, 663, 665, 667, 668, 670, 671, 676, 677, 678, 694, 726, 727, 752, 766, 832, 833, 842, 850, 857, 900, 902, 905, 908, 910, 979, 981, 982, 983, 984, 985, 987, 989, 990, 991, 992, 994, 995, 997, 999, 1001, 1002, 1003, 1019], "shrink": [27, 83, 96, 126, 170, 183, 194, 197, 203, 220, 249, 305, 346, 412, 557, 558, 674, 676, 846, 856, 857, 901, 902, 903, 904, 905, 990, 1002, 1019], "perfectli": [27, 38, 263, 274, 342, 396, 407, 414, 436, 565, 604, 702, 703, 713, 715, 733, 734, 754, 783, 792, 872, 982, 984, 987, 1002, 1040, 1041], "incur": [27, 617, 899, 1002, 1035], "decreas": [27, 40, 47, 56, 59, 67, 76, 129, 147, 148, 159, 169, 170, 172, 207, 231, 232, 262, 267, 273, 299, 307, 310, 315, 356, 366, 368, 379, 405, 407, 414, 439, 443, 461, 519, 532, 533, 539, 555, 556, 557, 558, 559, 560, 562, 563, 564, 600, 633, 634, 635, 674, 675, 676, 704, 710, 724, 779, 786, 856, 857, 907, 908, 909, 910, 976, 978, 979, 983, 984, 987, 990, 991, 994, 995, 1001, 1002, 1011, 1019, 1029, 1034, 1037, 1040], "cal_scor": 27, "327": [27, 197, 218, 727, 1008, 1019], "549": [27, 138, 141, 1008], "p1d": 27, "p0": 27, "p1": [27, 134], "p2": [27, 134, 217], "calibrated_classifi": 27, "calibrated_classifiers_": [27, 405, 435], "this_p": 27, "sure": [27, 57, 192, 205, 235, 236, 362, 366, 367, 373, 377, 378, 379, 380, 381, 383, 384, 387, 391, 397, 405, 408, 415, 491, 521, 647, 919, 920, 930, 973, 977, 984, 1001, 1006, 1007, 1034, 1035, 1037, 1042], "renorm": 27, "multiclass": [27, 31, 118, 177, 191, 215, 218, 229, 236, 238, 241, 253, 257, 265, 267, 270, 276, 279, 281, 300, 302, 335, 347, 356, 374, 375, 381, 382, 384, 393, 398, 407, 414, 435, 450, 460, 487, 494, 502, 555, 557, 559, 562, 565, 566, 569, 592, 600, 608, 629, 630, 631, 656, 657, 664, 666, 671, 672, 673, 674, 700, 704, 706, 726, 727, 731, 732, 735, 740, 751, 780, 781, 784, 785, 786, 791, 796, 797, 799, 800, 801, 802, 810, 812, 814, 818, 819, 820, 821, 822, 823, 824, 825, 826, 866, 880, 899, 901, 904, 907, 909, 981, 983, 997, 998, 1002, 1003, 1008, 1009, 1021, 1023, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1037, 1042, 1043, 1044], "argmax": [27, 103, 259, 273, 381, 414, 567, 827, 907, 1002, 1040], "493": [27, 29, 641, 899, 980, 1008], "plot_calibration_multiclass": [27, 29, 1008], "gave": [28, 405, 796, 799, 800, 810, 866], "four": [28, 144, 159, 175, 181, 200, 247, 248, 326, 335, 375, 379, 393, 555, 562, 717, 907, 909, 925, 983, 985, 986, 987, 997, 1005], "naiv": [28, 32, 130, 260, 262, 281, 351, 353, 374, 405, 414, 415, 435, 542, 834, 835, 836, 837, 838, 981, 982, 990, 995, 1009, 1023, 1027, 1028, 1029, 1030, 1035, 1037, 1040, 1042], "bay": [28, 32, 115, 130, 151, 188, 250, 262, 351, 374, 405, 412, 414, 415, 534, 547, 548, 654, 834, 835, 836, 837, 838, 880, 981, 982, 983, 997, 1009, 1021, 1023, 1027, 1028, 1029, 1030, 1035, 1037, 1040, 1042], "train_sampl": [28, 214, 215], "against": [28, 38, 87, 105, 115, 126, 143, 175, 190, 191, 208, 216, 235, 269, 311, 315, 338, 374, 379, 394, 405, 407, 411, 415, 436, 507, 540, 546, 549, 674, 676, 752, 754, 785, 798, 803, 805, 824, 828, 953, 979, 983, 987, 988, 990, 1002, 1005, 1012], "rfc": [28, 241, 315, 1024], "contrast": [28, 104, 170, 201, 234, 260, 262, 292, 310, 352, 393, 405, 407, 410, 414, 417, 447, 450, 460, 617, 641, 810, 855, 977, 980, 982, 983, 987, 990, 992, 995, 997, 1000, 1001, 1003, 1037], "push": [28, 379, 383, 405, 1010], "equat": [28, 346, 379, 407, 412, 414, 555, 556, 557, 558, 562, 563, 564, 588, 625, 656, 657, 680, 681, 685, 760, 879, 907, 908, 909, 910, 977, 984, 987, 992, 1035], "twice": [28, 272, 351, 353, 381, 417, 617, 727, 729, 938, 1036, 1044], "approx": [28, 96, 233, 412, 414, 415, 987, 994, 1001], "rare": [28, 170, 311, 362, 383, 391, 393, 396, 405, 407, 411, 587, 646, 656, 657, 667, 678, 899, 924, 955, 983, 997, 1011, 1034, 1035, 1036, 1040, 1042], "explan": [28, 87, 235, 366, 378, 379, 405, 415, 976, 986, 988, 1003, 1011, 1030], "underli": [28, 57, 81, 131, 148, 172, 200, 202, 203, 235, 265, 287, 288, 342, 359, 367, 379, 391, 393, 396, 398, 403, 405, 407, 409, 411, 412, 413, 414, 416, 417, 435, 449, 450, 451, 460, 462, 463, 469, 470, 476, 522, 562, 563, 565, 566, 567, 568, 591, 592, 595, 600, 656, 657, 663, 666, 678, 689, 693, 796, 799, 800, 810, 820, 821, 822, 827, 828, 829, 830, 831, 832, 833, 842, 844, 899, 907, 908, 909, 910, 952, 983, 984, 988, 993, 1000, 1002, 1029, 1031, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1043, 1044], "restrict": [28, 67, 68, 74, 86, 139, 163, 166, 189, 214, 216, 298, 303, 381, 385, 391, 405, 407, 414, 415, 463, 491, 500, 530, 579, 608, 651, 652, 653, 654, 656, 680, 681, 711, 779, 785, 786, 825, 847, 849, 850, 851, 853, 855, 856, 857, 859, 885, 987, 1003, 1008, 1022, 1023, 1027, 1029, 1037, 1039, 1044], "move": [28, 121, 261, 302, 338, 378, 379, 383, 385, 405, 407, 547, 548, 569, 570, 571, 573, 575, 576, 954, 1020, 1027, 1028, 1032, 1035, 1037, 1040, 1041], "characterist": [28, 45, 63, 148, 156, 166, 228, 229, 241, 253, 255, 257, 262, 267, 276, 305, 328, 362, 374, 376, 384, 405, 411, 414, 417, 501, 502, 621, 636, 656, 700, 704, 706, 724, 779, 785, 786, 815, 825, 828, 866, 904, 983, 1008], "difficult": [28, 56, 112, 169, 207, 238, 379, 387, 405, 412, 414, 551, 552, 557, 559, 560, 982, 984, 986, 990, 992, 994, 1003, 1011, 1027, 1041], "domingo": [28, 785, 987], "pazzani": 28, "proc": [28, 80, 405, 415, 448, 687, 691, 834, 976, 984, 989, 993], "13th": 28, "intl": [28, 411], "1996": [28, 407, 414, 418, 442, 514, 515, 516, 553, 554, 997], "zadrozni": [28, 405, 435, 674], "bianca": 28, "charl": [28, 761, 1027, 1030, 1033, 1037, 1039, 1042], "elkan": [28, 316, 405, 435, 441, 445, 457, 674, 1033, 1037, 1038, 1040, 1041], "vol": [28, 159, 183, 266, 376, 407, 472, 557, 558, 626, 633, 643, 662, 683, 684, 794, 824, 836, 977, 989, 990], "2001": [28, 156, 171, 259, 404, 407, 414, 435, 449, 450, 451, 460, 509, 557, 558, 562, 563, 626, 632, 637, 643, 689, 694, 732, 785, 880, 892, 924, 977, 979, 983, 987, 993, 995, 997, 999, 1002], "plot_compare_calibr": [28, 29, 1008], "272": [29, 377, 397, 399, 400], "built": [31, 87, 110, 112, 113, 121, 123, 171, 207, 263, 278, 296, 315, 357, 360, 366, 374, 377, 379, 380, 381, 383, 385, 387, 388, 391, 392, 393, 397, 401, 406, 407, 408, 411, 414, 416, 443, 501, 551, 552, 553, 554, 557, 558, 559, 560, 586, 587, 591, 595, 637, 638, 639, 640, 641, 644, 645, 650, 656, 658, 659, 660, 661, 670, 671, 672, 673, 679, 799, 800, 807, 830, 833, 839, 840, 909, 910, 971, 983, 987, 988, 1000, 1001, 1003, 1006, 1011, 1021, 1027, 1030, 1031, 1033, 1039], "troubl": [31, 415], "ovr": [31, 191, 214, 278, 281, 315, 347, 656, 657, 785, 828, 899, 901, 904, 983, 987, 988, 1002, 1027, 1032, 1033, 1035, 1036, 1037, 1041, 1042], "gaussian_process": [31, 32, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 166, 393, 417, 641, 988, 1008, 1030, 1033, 1034], "gaussianprocessclassifi": [31, 32, 152, 153, 154, 155, 159, 393, 417, 609, 617, 618, 620, 621, 988, 1033, 1035, 1037, 1041], "accuracy_scor": [31, 112, 152, 264, 310, 328, 351, 362, 392, 398, 403, 424, 555, 562, 706, 726, 727, 731, 735, 780, 781, 784, 791, 793, 929, 976, 987, 1028, 1029, 1030, 1039, 1044], "load_iri": [31, 42, 46, 75, 91, 100, 102, 104, 106, 121, 133, 140, 144, 153, 182, 192, 208, 242, 247, 254, 265, 266, 267, 269, 270, 286, 291, 294, 300, 315, 317, 320, 330, 334, 335, 338, 341, 357, 360, 392, 401, 407, 408, 411, 414, 416, 427, 559, 565, 599, 600, 608, 617, 618, 620, 621, 629, 656, 657, 709, 785, 796, 799, 800, 802, 810, 827, 848, 894, 895, 896, 907, 909, 911, 912, 913, 977, 982, 987, 988, 989, 990, 994, 997, 1003, 1012, 1018, 1019, 1020, 1033, 1035, 1038], "saga": [31, 190, 214, 215, 656, 657, 670, 672, 685, 810, 983, 1034, 1036], "multi_class": [31, 191, 214, 269, 315, 567, 608, 656, 657, 785, 833, 899, 983, 988, 1002, 1027, 1031, 1035, 1040, 1042], "n_classifi": [31, 567, 568], "classifier_idx": 31, "class_of_interest": [31, 269, 629, 1044], "vmin": [31, 41, 83, 96, 99, 106, 154, 157, 178, 183, 190, 215, 233, 249, 255, 301, 338], "vmax": [31, 52, 83, 96, 99, 106, 154, 157, 178, 183, 190, 215, 233, 249, 255, 301, 338], "mask_y_pr": 31, "04": [31, 41, 43, 55, 68, 86, 98, 105, 136, 148, 156, 161, 169, 173, 180, 198, 217, 236, 245, 251, 260, 261, 273, 276, 296, 297, 323, 345, 376, 414, 416, 469, 470, 785, 796, 810, 983, 987, 991, 1001, 1008], "scalarmapp": 31, "viridi": [31, 39, 283, 695], "cax": [31, 154, 271], "orient": [31, 96, 169, 220, 305, 393, 911, 984], "horizont": [31, 96, 220, 233, 305, 308, 384, 393, 462, 513, 695, 699], "467": [31, 36, 251, 252, 1008], "plot_classification_prob": [31, 36, 1008], "20newgroup": [31, 166, 177, 191, 215, 218, 300, 302, 487, 569, 656, 825, 983, 1008], "mnist": [31, 166, 177, 190, 192, 207, 214, 218, 283, 298, 300, 303, 346, 494, 569, 656, 825, 856, 879, 922, 983, 991, 1008], "salt": [32, 233, 307, 1041], "convei": [32, 225, 307, 1019], "linearli": [32, 101, 114, 148, 169, 178, 213, 221, 228, 269, 270, 307, 310, 342, 351, 366, 376, 391, 412, 414, 513, 640, 705, 868, 869, 987, 990, 993, 1002, 1019, 1034, 1043], "transpar": [32, 307, 972, 1011], "ga\u00ebl": [32, 46, 52, 74, 90, 91, 102, 182, 196, 197, 307, 342, 343, 394, 1011], "modifi": [32, 46, 52, 74, 76, 90, 91, 182, 183, 196, 197, 209, 220, 221, 222, 235, 238, 247, 321, 343, 348, 377, 379, 381, 383, 393, 407, 414, 417, 441, 445, 452, 457, 466, 480, 481, 482, 483, 493, 508, 579, 608, 609, 611, 617, 674, 676, 687, 691, 726, 727, 765, 780, 781, 784, 917, 983, 1000, 1001, 1007, 1018, 1022, 1023, 1027, 1029, 1030, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1042], "listedcolormap": [32, 35, 121, 291, 294, 299, 307], "make_circl": [32, 45, 63, 101, 130, 225, 299, 300, 307, 327, 375, 1028, 1035, 1038], "make_moon": [32, 45, 63, 228, 260, 299, 300, 307, 375, 976, 1034, 1038], "discriminant_analysi": [32, 34, 35, 104, 221, 292, 362, 403, 534, 848, 981, 988, 1027, 1030, 1031, 1032, 1033, 1034], "quadraticdiscriminantanalysi": [32, 35, 547, 981, 988, 990, 1027, 1032, 1034, 1042], "adaboostclassifi": [32, 114, 121, 398, 414, 552, 557, 559, 928, 1029, 1030, 1033, 1034, 1036, 1037, 1040, 1042, 1043, 1044], "kneighborsclassifi": [32, 133, 139, 285, 286, 291, 292, 310, 317, 319, 351, 414, 600, 842, 846, 847, 848, 849, 850, 988, 990, 1019, 1027, 1037, 1039, 1040, 1041, 1042, 1043, 1044], "neural_network": [32, 166, 170, 239, 298, 299, 300, 301, 302, 303, 368, 391, 988, 991, 1008, 1029, 1044], "mlpclassifi": [32, 127, 139, 166, 206, 298, 299, 301, 303, 368, 500, 502, 512, 520, 569, 855, 857, 869, 988, 991, 1008, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "decisiontreeclassifi": [32, 112, 114, 121, 133, 264, 278, 321, 356, 357, 360, 393, 414, 551, 553, 555, 557, 559, 562, 629, 709, 802, 823, 908, 909, 911, 912, 913, 977, 988, 1003, 1028, 1029, 1031, 1032, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "net": [32, 166, 177, 183, 185, 186, 190, 193, 210, 218, 232, 235, 273, 295, 385, 406, 411, 469, 470, 476, 499, 522, 555, 556, 557, 558, 562, 563, 564, 644, 645, 650, 655, 656, 657, 658, 659, 660, 661, 666, 674, 676, 679, 682, 855, 907, 908, 909, 910, 976, 987, 992, 1001, 1008, 1009, 1011, 1023, 1027, 1032, 1036, 1037, 1039], "qda": [32, 376, 547, 548, 1009, 1023, 1032], "025": [32, 201, 238, 257, 688, 692], "samm": [32, 112, 114, 121, 414, 551, 1043, 1044], "n_clusters_per_class": [32, 92, 116, 145, 147, 257, 293, 299, 307, 384, 513, 603, 605], "linearly_separ": [32, 299], "ds_cnt": [32, 307, 308], "rdbu": [32, 35, 96, 215, 299, 338, 343], "cm_bright": [32, 299, 307], "ff0000": [32, 291, 299], "0000ff": [32, 291, 299], "ep": [32, 45, 47, 50, 56, 66, 182, 184, 223, 232, 391, 407, 418, 442, 448, 453, 469, 470, 476, 629, 644, 645, 648, 649, 650, 651, 652, 653, 654, 658, 659, 660, 661, 679, 680, 681, 682, 688, 692, 712, 738, 851, 891, 892, 893, 999, 1042, 1043], "lstrip": [32, 45, 63, 228, 299, 307], "179": [32, 36, 254, 276, 376, 385, 414, 1008, 1027], "plot_classifier_comparison": [32, 36, 307, 1008], "8x8": [33, 90, 190, 232, 292, 302, 376, 500, 1018], "grayscal": 33, "imread": 33, "load_digit": [33, 52, 53, 59, 73, 74, 90, 139, 146, 190, 206, 221, 232, 233, 258, 259, 262, 268, 275, 285, 287, 292, 300, 302, 321, 325, 326, 385, 408, 419, 443, 444, 530, 531, 532, 533, 597, 598, 636, 637, 666, 686, 687, 688, 689, 691, 693, 1012, 1016, 1017, 1018, 1019, 1020, 1033, 1038], "set_axis_off": 33, "gray_r": [33, 90, 99, 154, 221, 302, 325, 326, 1018], "entir": [33, 163, 199, 207, 302, 305, 316, 342, 360, 362, 373, 380, 381, 393, 401, 407, 411, 413, 415, 470, 490, 532, 586, 587, 588, 589, 645, 649, 651, 653, 656, 657, 659, 661, 663, 664, 666, 674, 680, 681, 731, 793, 827, 828, 831, 856, 858, 859, 872, 884, 885, 887, 888, 889, 890, 956, 976, 977, 987, 997, 1001, 1003, 1019, 1036, 1037], "98": [33, 43, 45, 55, 63, 65, 83, 99, 148, 228, 258, 299, 307, 326, 376, 383, 411, 414, 657, 834, 890, 982, 989, 1016, 1021], "899": [33, 148, 258], "confus": [33, 166, 229, 253, 269, 276, 325, 326, 351, 393, 466, 502, 629, 650, 695, 711, 713, 716, 726, 727, 735, 751, 781, 784, 825, 897, 904, 1008, 1021, 1027, 1028, 1032, 1036, 1037, 1039, 1040, 1041, 1042], "figure_": [33, 170, 239, 315, 317, 386, 436, 629, 630, 695, 696, 698, 699, 700, 802, 818], "confusion_matrix": [33, 229, 254, 325, 326, 695, 711, 751, 822, 987, 1021, 1028, 1033, 1034, 1037, 1038, 1040, 1044], "gt": [33, 72, 73, 117, 132, 169, 250, 258, 272, 377, 379, 383], "rebuilt": [33, 839, 840], "445": [33, 36, 159, 995, 1008], "plot_digits_classif": [33, 36, 1008], "elimin": [33, 52, 90, 92, 138, 142, 145, 148, 149, 166, 255, 259, 265, 287, 325, 326, 328, 406, 407, 411, 446, 500, 513, 591, 592, 595, 600, 656, 799, 800, 815, 904, 973, 987, 1008, 1009, 1011, 1023, 1027], "oracl": [34, 199, 217, 420, 467, 468, 471, 472, 473, 474, 981, 1027], "shrinkag": [34, 78, 80, 83, 84, 103, 127, 166, 294, 420, 467, 468, 471, 472, 473, 474, 475, 477, 478, 479, 537, 541, 547, 559, 560, 796, 983, 997, 1008, 1009, 1023, 1027, 1031, 1032, 1034], "lineardiscriminantanalysi": [34, 35, 104, 221, 292, 362, 403, 534, 548, 848, 981, 988, 990, 1027, 1030, 1031, 1032, 1033, 1034, 1036, 1039, 1041, 1042, 1043], "200": [34, 35, 45, 51, 55, 61, 76, 99, 114, 125, 131, 155, 185, 194, 200, 203, 204, 205, 211, 216, 221, 240, 245, 261, 267, 269, 270, 305, 308, 327, 337, 338, 359, 362, 374, 381, 391, 412, 414, 419, 438, 452, 466, 469, 470, 531, 532, 533, 536, 537, 538, 541, 545, 582, 647, 649, 669, 677, 690, 810, 856, 857, 897, 901, 902, 903, 904, 905, 1002], "n_averag": 34, "n_features_max": 34, "ish": 34, "acc_clf1": 34, "acc_clf2": 34, "acc_clf3": 34, "n_features_rang": 34, "score_clf1": 34, "score_clf2": 34, "score_clf3": 34, "clf1": [34, 133, 134, 414, 567], "lsqr": [34, 312, 547, 670, 672, 685, 981, 1028, 1034, 1041], "clf2": [34, 133, 134, 381, 401, 414, 567], "store_precis": [34, 80, 467, 468, 471, 472, 473, 474], "assume_cent": [34, 80, 409, 420, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "clf3": [34, 133, 134, 381, 414, 567], "covariance_estim": [34, 547, 981, 1039], "features_samples_ratio": 34, "gold": [34, 193, 200, 202, 205, 209, 213, 216, 246, 251, 267, 289, 337, 385], "navi": [34, 71, 80, 100, 104, 105, 131, 178, 202, 210, 223, 246, 247, 248, 251, 267, 269, 288, 295, 327, 359], "513": [34, 36, 158, 161, 848, 990, 1008], "plot_lda": [34, 36, 1008], "ledoitwolf": [34, 78, 80, 83, 84, 103, 127, 166, 294, 409, 467, 468, 472, 473, 474, 475, 796, 1008, 1031], "likelihood": [34, 58, 78, 80, 81, 82, 83, 84, 103, 127, 151, 152, 153, 155, 156, 157, 158, 160, 166, 187, 217, 249, 253, 260, 266, 276, 294, 302, 305, 381, 393, 405, 409, 412, 414, 417, 435, 467, 468, 469, 470, 471, 472, 473, 474, 475, 513, 530, 534, 539, 547, 548, 549, 608, 609, 629, 643, 656, 710, 738, 794, 795, 796, 822, 825, 844, 855, 875, 887, 901, 902, 904, 905, 983, 986, 989, 997, 1002, 1008, 1030, 1031, 1036, 1042], "neighborhood": [34, 56, 83, 87, 104, 139, 164, 166, 220, 245, 283, 284, 285, 286, 294, 295, 297, 376, 393, 407, 412, 418, 442, 444, 448, 455, 500, 502, 513, 539, 547, 626, 629, 694, 825, 841, 842, 845, 847, 848, 849, 850, 851, 853, 859, 860, 879, 984, 993, 1008, 1009, 1023, 1036], "doubl": [35, 118, 272, 379, 393, 412, 536, 538, 545, 839, 840, 850, 971, 977, 1002, 1003, 1027, 1037, 1038], "dispers": [35, 407, 708, 722, 983], "cov_class_1": 35, "cov_class_2": 35, "matric": [35, 40, 41, 81, 83, 96, 204, 246, 247, 249, 250, 251, 283, 296, 316, 322, 329, 351, 352, 371, 373, 381, 382, 391, 392, 393, 407, 408, 409, 410, 412, 415, 416, 422, 448, 449, 451, 462, 471, 479, 480, 481, 482, 532, 533, 536, 538, 539, 542, 545, 547, 548, 553, 554, 561, 564, 579, 580, 587, 641, 656, 662, 670, 672, 685, 751, 757, 765, 771, 775, 776, 777, 778, 789, 794, 795, 825, 843, 846, 851, 862, 866, 868, 871, 874, 876, 877, 879, 882, 884, 886, 888, 889, 890, 891, 892, 901, 902, 904, 905, 915, 936, 942, 951, 958, 960, 961, 977, 979, 981, 984, 985, 986, 988, 990, 991, 999, 1001, 1002, 1006, 1021, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "make_data": [35, 62], "share": [35, 86, 130, 169, 250, 351, 360, 362, 366, 367, 381, 387, 407, 412, 415, 547, 666, 702, 706, 794, 795, 799, 800, 981, 994, 1027, 1029, 1035, 1037, 1039, 1042], "spheric": [35, 58, 86, 128, 222, 247, 249, 250, 296, 375, 761, 794, 795, 983, 986, 990, 1006], "isotrop": [35, 56, 58, 62, 101, 153, 155, 220, 222, 407, 409, 417, 510, 517, 530, 613, 617, 618, 620, 621], "third": [35, 121, 126, 143, 148, 159, 217, 228, 251, 278, 288, 307, 321, 367, 374, 378, 391, 394, 415, 532, 586, 587, 588, 589, 798, 799, 800, 805, 841, 842, 843, 845, 847, 877, 889, 955, 976, 998, 1027, 1038, 1043, 1044], "x_isotropic_covari": 35, "y_isotropic_covari": 35, "x_shared_covari": 35, "y_shared_covari": 35, "x_different_covari": 35, "y_different_covari": 35, "piec": [35, 48, 200, 367, 986], "misclassifi": [35, 112, 254, 342, 351, 1002], "mark": [35, 59, 93, 143, 164, 264, 271, 371, 379, 381, 383, 387, 388, 393, 407, 533, 605, 606, 609, 630, 656, 852, 853, 894, 895, 912, 926, 931, 936, 983, 1011, 1023, 1027, 1028, 1033, 1035, 1036, 1043, 1044, 1045], "star": [35, 93, 135, 379], "ellips": [35, 228, 245, 246, 247, 250, 251, 993], "mpl": [35, 245, 246, 247, 251, 305], "plot_ellips": [35, 245], "cov": [35, 83, 87, 114, 250, 379, 393, 397, 400, 410, 420, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 517, 530, 532, 539, 546], "linalg": [35, 55, 79, 80, 83, 103, 105, 185, 245, 246, 247, 250, 251, 322, 379, 385, 412, 449, 450, 451, 460, 530, 533, 539, 542, 655, 670, 672, 685, 689, 693, 934], "eigh": [35, 245, 246, 247, 250, 251, 412, 419, 531, 533, 1042], "arctan": [35, 246, 251, 375, 516], "180": [35, 245, 246, 247, 250, 251, 292, 296, 385, 500], "ell": [35, 245, 246, 247, 251, 404], "patch": [35, 51, 238, 245, 246, 247, 250, 251, 255, 374, 383, 391, 412, 414, 553, 554, 581, 582, 585, 1027, 1035], "set_clip_box": [35, 245, 246, 247, 250, 251], "set_alpha": [35, 245, 246, 247, 250, 251], "add_artist": [35, 221, 245, 246, 247, 250, 251], "plot_result": [35, 122, 245, 246, 251], "pcolormesh": [35, 130, 140, 182, 286, 291, 334, 338, 342, 629], "x_right": 35, "y_right": 35, "x_wrong": 35, "y_wrong": 35, "means_": [35, 245, 246, 247, 248, 250, 251, 547, 548, 794, 795], "yellow": [35, 93, 338, 988], "set_box_aspect": 35, "svd": [35, 103, 130, 221, 352, 388, 403, 410, 419, 449, 451, 480, 481, 483, 530, 531, 532, 533, 537, 538, 539, 542, 544, 547, 548, 662, 670, 671, 672, 683, 684, 685, 858, 936, 981, 1021, 1029, 1033, 1034, 1040, 1042], "store_covari": [35, 547, 548, 1032, 1034], "ax_row": 35, "align": [35, 126, 164, 220, 245, 271, 353, 393, 687, 691, 979, 990, 1001, 1022, 1023, 1043, 1044], "perpendicular": [35, 343], "bisector": 35, "411": [35, 36, 169, 409, 419, 471, 531, 1008], "plot_lda_qda": [35, 36, 1008], "015": [36, 352, 356, 361, 995], "modul": [37, 38, 50, 54, 78, 85, 89, 95, 96, 111, 142, 150, 160, 162, 166, 167, 174, 177, 214, 219, 220, 244, 253, 277, 278, 280, 284, 298, 300, 301, 304, 324, 333, 350, 355, 358, 373, 374, 377, 378, 379, 380, 381, 383, 384, 385, 387, 388, 391, 393, 396, 397, 401, 405, 406, 407, 410, 414, 415, 416, 418, 442, 501, 533, 577, 578, 657, 928, 976, 981, 983, 985, 987, 988, 991, 993, 994, 997, 999, 1001, 1003, 1004, 1011, 1015, 1016, 1021, 1028, 1029, 1030, 1032, 1033, 1037, 1041], "bisect": [37, 41, 58, 60, 61, 62, 69, 160, 166, 256, 441, 445, 510, 1008, 1041], "birch": [37, 41, 45, 62, 65, 69, 92, 166, 319, 368, 393, 444, 447, 510, 1008, 1022, 1023, 1031, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044], "linkag": [37, 40, 41, 42, 45, 48, 53, 56, 57, 58, 68, 69, 166, 172, 438, 439, 443, 444, 461, 510, 512, 520, 879, 1006, 1008, 1020, 1030, 1035, 1038], "dbscan": [37, 38, 39, 45, 56, 59, 61, 64, 66, 69, 166, 321, 327, 391, 393, 444, 448, 450, 453, 510, 702, 703, 715, 734, 790, 792, 851, 879, 990, 1008, 1022, 1023, 1027, 1029, 1031, 1032, 1034, 1035, 1036, 1043, 1044], "hdbscan": [37, 45, 50, 66, 69, 166, 232, 442, 510, 879, 977, 1006, 1008, 1022, 1023, 1043, 1044], "optic": [37, 45, 69, 166, 319, 372, 418, 442, 444, 453, 454, 455, 500, 1008, 1022, 1023, 1036, 1040, 1041, 1042, 1043, 1044], "affin": [37, 38, 45, 50, 56, 64, 65, 69, 166, 305, 327, 371, 381, 393, 406, 412, 438, 439, 450, 452, 460, 510, 533, 689, 693, 702, 703, 715, 734, 790, 792, 895, 981, 984, 987, 1008, 1022, 1023, 1027, 1028, 1031, 1037, 1038, 1040, 1042], "dendrogram": [37, 68, 69, 166, 172, 360, 407, 439, 443, 502, 1008, 1039], "embed": [37, 40, 42, 45, 47, 56, 57, 63, 69, 90, 117, 146, 151, 166, 175, 219, 222, 224, 226, 227, 243, 283, 292, 325, 326, 385, 393, 406, 407, 439, 450, 460, 487, 500, 542, 547, 564, 580, 637, 686, 687, 688, 689, 690, 691, 692, 693, 694, 848, 860, 869, 891, 892, 893, 979, 990, 993, 999, 1004, 1006, 1008, 1022, 1023, 1027, 1028, 1038, 1039, 1041], "uniformli": [38, 118, 125, 143, 228, 245, 315, 381, 514, 515, 516, 549, 640, 800, 808, 810, 878, 976, 977, 987, 990, 997, 1031, 1036], "divid": [38, 44, 49, 92, 96, 145, 156, 199, 238, 245, 352, 362, 375, 376, 404, 407, 411, 412, 467, 468, 469, 470, 471, 472, 473, 474, 510, 517, 532, 539, 674, 675, 676, 717, 723, 731, 735, 753, 791, 793, 856, 857, 901, 904, 936, 939, 940, 976, 984, 986, 987, 990, 997, 1001, 1021, 1027, 1034, 1035, 1038], "quiroz": [38, 58, 118, 178, 183, 238, 261, 263, 310, 351, 352, 353], "fundament": [38, 50, 82, 352, 377, 391, 392, 410, 494, 536, 538, 545, 706, 983, 987], "homogen": [38, 39, 40, 45, 47, 50, 56, 59, 352, 374, 391, 393, 409, 414, 417, 444, 612, 702, 715, 728, 733, 734, 754, 792, 984, 985, 987, 1036], "frequent": [38, 112, 164, 263, 269, 270, 352, 376, 379, 415, 549, 588, 628, 849, 872, 873, 876, 888, 977, 979, 987, 1001, 1007], "ari": [38, 59, 352, 407, 703, 1032, 1038], "mutual": [38, 39, 50, 56, 59, 142, 144, 149, 166, 393, 414, 416, 444, 590, 593, 594, 597, 598, 604, 605, 606, 607, 702, 703, 713, 752, 754, 783, 792, 976, 983, 987, 988, 1008, 1027, 1033, 1043], "mi": [38, 143, 407, 605, 606, 702, 752, 754, 977, 987, 1001], "theoret": [38, 58, 151, 406, 407, 414, 551, 552, 637, 702, 723, 753, 899, 976, 983, 984, 986, 987, 989, 999, 1001, 1002, 1011], "nmi": [38, 407, 715, 733, 734, 754], "ami": [38, 50, 59, 407, 702], "score_func": [38, 72, 73, 416, 590, 593, 594, 596, 597, 598, 739, 1027, 1029, 1044], "rand_scor": [38, 407, 713, 987, 1039], "adjusted_rand_scor": [38, 39, 50, 59, 352, 407, 702, 713, 730, 754, 783, 987, 1040], "mutual_info_scor": [38, 407, 702, 987, 1035, 1038, 1039], "normalized_mutual_info_scor": [38, 407, 733, 752, 792, 987, 1035, 1041], "adjusted_mutual_info_scor": [38, 39, 50, 59, 407, 703, 713, 730, 752, 754, 783, 987, 1027, 1035, 1039, 1043], "random_label": 38, "labels_a": 38, "labels_b": 38, "fixed_classes_uniform_labelings_scor": 38, "n_clusters_rang": 38, "n_run": [38, 62, 175, 352], "seaborn": [38, 113, 168, 169, 178, 183, 250, 260, 379, 397, 400, 1006], "sn": [38, 113, 168, 169, 178, 183, 250, 260], "color_palett": [38, 113, 250], "colorblind": [38, 113], "vx": 38, "errorbar": [38, 62, 74, 80, 82, 147, 157, 158, 285, 328, 341, 802, 818], "satur": [38, 169, 305], "uniform_labelings_scor": 38, "nwith": [38, 58, 62, 147, 352], "constantli": [38, 199, 1011], "unbound": [38, 986, 1041], "cardin": [38, 119, 120, 126, 171, 172, 311, 312, 321, 407, 414, 461, 551, 552, 555, 556, 557, 558, 562, 563, 564, 677, 872, 873, 880, 907, 908, 909, 910, 987, 988, 995, 997, 1041, 1042], "why": [38, 53, 96, 112, 118, 169, 171, 175, 188, 257, 260, 278, 351, 352, 379, 387, 393, 407, 409, 412, 418, 442, 445, 449, 987, 989, 1002, 1016, 1019, 1030], "chart": [38, 123, 265, 988, 1014, 1030], "henc": [38, 61, 73, 169, 203, 232, 269, 338, 351, 352, 366, 374, 381, 383, 385, 393, 397, 407, 411, 414, 415, 485, 506, 537, 539, 540, 541, 561, 588, 641, 644, 650, 658, 660, 670, 685, 702, 703, 707, 713, 728, 754, 783, 792, 815, 816, 834, 835, 836, 837, 838, 874, 944, 984, 986, 987, 988, 993, 994, 997, 1007, 1034, 1035, 1038, 1039, 1041], "safe": [38, 169, 188, 235, 352, 379, 381, 407, 408, 432, 506, 507, 586, 589, 595, 771, 775, 893, 953, 959, 990, 1033, 1034, 1035, 1040, 1041], "stabil": [38, 116, 123, 169, 221, 265, 305, 346, 352, 393, 404, 444, 648, 652, 668, 837, 856, 857, 875, 887, 935, 977, 983, 986, 997, 1007, 1012, 1027, 1031, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042], "mislead": [38, 119, 120, 126, 169, 380, 396, 414, 551, 552, 555, 556, 557, 558, 562, 563, 564, 907, 908, 909, 910, 1023, 1040], "meaning": [38, 172, 225, 292, 353, 404, 411, 415, 416, 546, 726, 727, 735, 780, 781, 784, 848, 991, 1001, 1002, 1027, 1043], "plot_adjusted_for_chance_measur": [38, 69, 1008], "brendan": [39, 438, 452, 1043, 1044], "frei": [39, 438, 452, 1037], "delbert": [39, 438, 452], "dueck": [39, 438, 452], "messag": [39, 45, 63, 71, 96, 235, 351, 352, 374, 377, 378, 379, 383, 384, 387, 388, 407, 438, 452, 466, 537, 541, 546, 572, 625, 710, 796, 799, 800, 802, 810, 818, 823, 826, 828, 848, 856, 857, 897, 918, 919, 920, 923, 926, 950, 971, 987, 997, 1027, 1031, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "feb": [39, 438, 452], "affinitypropag": [39, 45, 319, 407, 1027, 1030, 1031, 1035, 1038, 1040, 1041, 1042, 1043, 1044], "labels_tru": [39, 50, 56, 65, 407, 702, 703, 712, 713, 715, 728, 733, 734, 752, 754, 783, 792], "af": 39, "prefer": [39, 45, 56, 251, 269, 305, 362, 366, 367, 368, 377, 379, 380, 381, 393, 407, 411, 412, 414, 415, 438, 452, 469, 470, 476, 485, 506, 507, 625, 630, 631, 652, 656, 657, 699, 723, 725, 739, 754, 755, 848, 874, 899, 900, 941, 953, 976, 979, 981, 983, 987, 992, 1002, 1003, 1006, 1010, 1019, 1028, 1034, 1036, 1040, 1041, 1044], "cluster_centers_indic": [39, 452], "cluster_centers_indices_": [39, 438], "labels_": [39, 40, 41, 42, 43, 44, 45, 46, 48, 50, 52, 53, 56, 59, 62, 63, 64, 66, 68, 319, 321, 352, 379, 393, 407, 425, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 453, 708, 1020, 1032], "n_clusters_": [39, 50, 56, 64, 439, 443], "homogeneity_scor": [39, 50, 59, 352, 407, 715, 733, 792, 987], "completeness_scor": [39, 50, 59, 316, 352, 407, 733, 734, 792, 987], "silhouette_scor": [39, 50, 59, 61, 352, 379, 407, 1027, 1031, 1033, 1035, 1037, 1041], "sqeuclidean": [39, 448, 455, 775, 776, 777], "872": [39, 261, 995], "912": 39, "871": [39, 81, 82, 409, 472], "753": [39, 351], "cycler": 39, "class_memb": 39, "cluster_cent": [39, 62, 64, 65, 459], "368": [39, 69, 1008], "plot_affinity_propag": [39, 69, 438, 452, 1008], "impos": [40, 58, 129, 193, 203, 311, 391, 407, 412, 414, 415, 525, 655, 983], "simpli": [40, 87, 130, 151, 159, 224, 236, 238, 269, 296, 317, 318, 366, 374, 379, 381, 384, 391, 393, 409, 410, 411, 412, 414, 415, 483, 693, 759, 762, 866, 938, 979, 987, 988, 989, 990, 1001, 1013, 1021, 1034, 1035, 1036], "There": [40, 47, 118, 151, 217, 224, 235, 251, 255, 257, 260, 281, 351, 372, 374, 376, 379, 380, 381, 384, 391, 393, 394, 397, 404, 406, 407, 412, 414, 415, 416, 444, 450, 460, 532, 551, 552, 557, 558, 586, 587, 589, 604, 643, 977, 983, 984, 985, 986, 987, 990, 994, 997, 1001, 1002, 1003, 1005, 1020, 1027, 1035], "unstabl": [40, 67, 169, 407, 409, 410, 687, 691, 935, 936, 1003, 1031, 1032, 1034, 1039, 1041, 1043], "quickli": [40, 239, 300, 315, 376, 379, 380, 411, 414, 690, 983, 990, 991, 1011, 1021, 1038], "fight": [40, 203, 1011], "percol": 40, "merg": [40, 42, 47, 52, 318, 377, 379, 382, 387, 391, 394, 407, 438, 439, 440, 443, 444, 461, 816, 1020, 1027, 1034], "exagger": [40, 169, 690, 984], "behaviour": [40, 101, 200, 201, 217, 340, 379, 393, 407, 414, 557, 558, 562, 563, 600, 739, 797, 798, 801, 813, 814, 815, 816, 817, 897, 907, 908, 960, 976, 977, 987, 997, 1035, 1038, 1039, 1042, 1043], "shortest": [40, 384, 388, 686, 941, 984, 1040], "mechan": [40, 235, 347, 351, 367, 379, 381, 407, 415, 421, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 462, 463, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 586, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 601, 608, 609, 625, 626, 627, 628, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 686, 687, 688, 689, 690, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806, 809, 810, 811, 812, 813, 814, 815, 816, 817, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 858, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 891, 892, 894, 895, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 985, 1003, 1011], "resembl": [40, 203], "brittl": [40, 407], "pronounc": [40, 41, 53, 156], "kneighbors_graph": [40, 45, 63, 68, 283, 393, 407, 439, 443, 693, 841, 842, 843, 845, 847, 849, 850, 851, 853, 990, 1027, 1031, 1036], "geometri": [40, 407, 984, 990], "instabl": [40, 169, 293, 417, 450, 533, 537, 541, 693, 1034, 1037, 1040], "agglomerativeclust": [40, 41, 42, 45, 48, 53, 57, 63, 68, 393, 407, 438, 440, 443, 1020, 1030, 1031, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1044], "1500": [40, 51, 58, 63, 68, 93, 220, 224, 245], "knn_graph": 40, "include_self": [40, 45, 68, 693, 852, 853, 1031], "837": [40, 69, 114, 136, 1008], "plot_agglomerative_clust": [40, 69, 1008], "waveform": 41, "euclidean": [41, 58, 59, 185, 232, 238, 283, 286, 291, 315, 320, 342, 352, 404, 406, 407, 412, 413, 414, 415, 417, 438, 439, 442, 443, 444, 448, 450, 455, 458, 461, 529, 535, 543, 544, 587, 613, 617, 620, 621, 674, 676, 688, 690, 693, 694, 697, 759, 760, 766, 767, 768, 769, 775, 776, 777, 778, 789, 790, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 893, 977, 981, 985, 988, 990, 999, 1007, 1031, 1034, 1035, 1036, 1037, 1043, 1044], "cityblock": [41, 45, 407, 448, 455, 759, 775, 776, 777, 990], "invari": [41, 376, 393, 407, 417, 612, 687, 744, 814, 815, 983, 984, 987, 1002, 1007, 1035, 1038, 1039, 1040], "ie": [41, 67, 97, 438, 702, 983, 997], "inter": [41, 119, 362, 414, 714, 942], "character": [41, 217, 356, 407, 411, 984], "ill": [41, 83, 204, 302, 469, 470, 476, 648, 649, 652, 653, 654, 680, 681, 983, 986, 1020, 1037], "recov": [41, 66, 83, 97, 98, 103, 122, 151, 168, 183, 198, 199, 203, 220, 353, 409, 413, 416, 419, 458, 531, 557, 983, 984, 986, 1007, 1020, 1033], "put": [41, 59, 140, 151, 153, 233, 240, 245, 299, 307, 319, 330, 343, 348, 368, 381, 383, 384, 387, 417, 441, 445, 457, 513, 612, 645, 659, 794, 876, 880, 888, 901, 902, 903, 904, 905, 926, 977, 984, 986, 987, 988, 994, 997, 1013, 1015, 1021], "cc": [41, 377], "patheffect": 41, "pairwise_dist": [41, 393, 407, 418, 442, 444, 448, 455, 686, 694, 759, 768, 776, 777, 789, 790, 843, 845, 847, 851, 985, 1027, 1031, 1033, 1035, 1036, 1038, 1039, 1044], "sqr": 41, "sign": [41, 80, 87, 97, 100, 114, 183, 250, 299, 346, 379, 407, 412, 415, 542, 580, 587, 604, 633, 634, 656, 657, 664, 666, 672, 673, 674, 675, 732, 739, 899, 903, 934, 936, 952, 983, 987, 992, 997, 1001, 1002, 1020, 1027, 1031, 1036, 1040, 1042], "phi": [41, 412, 740, 865, 979, 987, 997, 1002], "phase_nois": 41, "amplitude_nois": 41, "additional_nois": 41, "f7bd01": 41, "377eb8": [41, 45, 63, 64, 228], "f781bf": [41, 45, 63, 64], "set_label": [41, 154, 232], "tight": [41, 105, 114, 121, 140, 144, 184, 186, 191, 192, 193, 204, 208, 211, 216, 222, 225, 249, 283, 289, 290, 294, 295, 334, 338, 341, 343, 357, 580, 690, 1039], "avg_dist": [41, 778], "set_path_effect": 41, "withstrok": 41, "foreground": [41, 67], "cividi": 41, "45": [41, 65, 74, 86, 144, 156, 171, 188, 199, 217, 267, 271, 272, 326, 338, 411, 414, 415, 562, 563, 625, 632, 785, 794, 903, 977, 987, 995, 1005, 1008, 1017, 1027, 1030], "interclass": 41, "083": [41, 69, 258, 1008], "plot_agglomerative_clustering_metr": [41, 69, 1008], "hierarchi": [42, 172, 379, 448, 454, 461, 992, 1020], "plot_dendrogram": 42, "kwarg": [42, 99, 235, 381, 386, 421, 425, 429, 436, 440, 446, 448, 462, 467, 533, 536, 538, 561, 615, 629, 644, 645, 650, 651, 658, 659, 660, 661, 675, 679, 682, 696, 697, 698, 700, 739, 839, 840, 858, 859, 863, 903, 914, 947, 1034, 1038, 1040, 1044], "children_": [42, 439, 443, 461], "current_count": 42, "child_idx": 42, "leaf": [42, 117, 128, 130, 356, 360, 407, 414, 418, 439, 440, 441, 442, 443, 444, 448, 455, 461, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 839, 840, 841, 842, 843, 844, 845, 847, 849, 850, 851, 907, 908, 909, 910, 911, 912, 990, 1003, 1030, 1032, 1034, 1038, 1041], "linkage_matrix": 42, "column_stack": [42, 299, 307], "distances_": [42, 439, 443, 1039], "distance_threshold": [42, 439, 443, 1036, 1039], "truncate_mod": 42, "parenthesi": [42, 379], "plot_agglomerative_dendrogram": [42, 69, 1008], "scalabl": [43, 45, 63, 166, 174, 176, 233, 253, 276, 320, 352, 379, 407, 414, 415, 446, 489, 500, 587, 638, 802, 813, 823, 825, 837, 860, 869, 871, 899, 901, 904, 905, 979, 982, 984, 987, 1000, 1002, 1008, 1011, 1027, 1030, 1031, 1037, 1038, 1041, 1042], "hundr": [43, 124, 221, 309, 374, 411, 414, 559, 560, 984, 1038], "thousand": [43, 118, 232, 234, 309, 352, 374, 407, 414, 856, 857, 904, 984, 1021, 1036, 1038], "million": [43, 57, 156, 175, 415, 690, 984, 1002, 1011, 1041, 1042], "chose": [43, 169, 1016], "usag": [43, 54, 72, 75, 86, 100, 110, 145, 169, 170, 229, 233, 235, 254, 292, 294, 301, 334, 353, 366, 374, 378, 379, 381, 382, 386, 387, 389, 393, 394, 397, 406, 407, 411, 412, 417, 418, 442, 444, 448, 462, 487, 494, 510, 513, 517, 521, 532, 533, 539, 559, 560, 589, 607, 638, 646, 656, 657, 658, 664, 665, 666, 667, 674, 675, 676, 677, 678, 688, 775, 778, 789, 790, 858, 899, 907, 908, 909, 910, 936, 976, 977, 979, 986, 987, 988, 990, 1002, 1009, 1012, 1016, 1023, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044], "enjoi": 43, "edit": [43, 376, 378, 379, 382, 383, 387, 391, 397, 528, 532, 829, 981, 983, 988, 994, 1021], "158": [43, 414, 667], "manojkumarsivaraj334": 43, "joblib": [43, 55, 73, 118, 283, 316, 374, 377, 379, 382, 388, 391, 393, 397, 400, 401, 406, 408, 418, 435, 439, 442, 443, 444, 446, 448, 450, 455, 456, 459, 462, 465, 470, 506, 529, 533, 534, 535, 537, 540, 541, 543, 544, 546, 553, 554, 555, 556, 561, 562, 563, 564, 565, 566, 567, 568, 592, 600, 605, 606, 608, 630, 632, 637, 645, 649, 651, 653, 655, 656, 657, 659, 661, 663, 664, 666, 674, 677, 686, 687, 688, 689, 690, 691, 692, 771, 775, 778, 796, 799, 800, 802, 810, 818, 820, 821, 822, 823, 824, 826, 827, 828, 829, 831, 832, 841, 842, 845, 847, 849, 850, 852, 853, 858, 859, 860, 861, 894, 895, 953, 954, 955, 957, 972, 987, 1007, 1027, 1028, 1030, 1032, 1034, 1035, 1036, 1038, 1039, 1042, 1044], "cpu_count": [43, 118, 283, 955], "xx": [43, 59, 81, 121, 125, 130, 140, 153, 154, 155, 170, 186, 206, 209, 210, 211, 212, 213, 225, 228, 236, 249, 289, 299, 307, 308, 330, 337, 338, 343, 344, 347, 348, 383], "yy": [43, 59, 81, 121, 130, 140, 153, 155, 170, 206, 210, 211, 212, 213, 225, 228, 236, 289, 299, 307, 308, 330, 337, 338, 343, 344, 347, 348], "n_center": [43, 510], "25000": 43, "colors_": 43, "cname": 43, "birch_model": 43, "final_step": 43, "centroid": [43, 46, 58, 59, 79, 127, 166, 284, 291, 297, 308, 319, 352, 375, 407, 440, 441, 444, 445, 446, 447, 450, 457, 458, 460, 502, 547, 629, 846, 1008, 1009, 1023, 1027, 1031, 1034, 1039, 1043], "subcluster_centers_": [43, 440], "this_centroid": 43, "set_autoscaley_on": 43, "mbk": [43, 65], "256": [43, 49, 54, 124, 311, 367, 374, 407, 414, 447, 466, 535, 544, 561, 855, 887, 897, 1021, 1041], "max_no_improv": [43, 62, 65, 447, 535, 536, 537, 544, 1041, 1042], "t_mini_batch": [43, 65], "mbk_means_labels_uniqu": 43, "cluster_centers_": [43, 44, 49, 51, 59, 61, 62, 64, 65, 96, 319, 352, 438, 441, 445, 446, 447, 1020], "468": [43, 69, 1008], "plot_birch_vs_minibatchkmean": [43, 69, 1008], "cloud": [44, 86, 95, 97, 107, 166, 387, 412, 531, 539, 690, 987, 1005, 1006, 1008, 1020], "bisectingkmean": [44, 407, 1041, 1042, 1043], "__doc__": [44, 76, 156, 248, 393], "n_clusters_list": 44, "clustering_algorithm": [44, 45, 63], "variant": [44, 96, 162, 164, 165, 166, 230, 260, 318, 319, 352, 353, 385, 407, 410, 412, 415, 417, 447, 458, 488, 491, 492, 510, 513, 541, 557, 558, 563, 613, 617, 620, 621, 625, 628, 636, 637, 639, 643, 670, 702, 797, 801, 803, 804, 805, 814, 821, 842, 860, 896, 977, 983, 984, 985, 986, 987, 989, 990, 1001, 1007, 1008, 1021, 1027, 1035], "algorithm_nam": 44, "algo": [44, 105], "hide": [44, 379, 387, 834, 835, 836, 837, 838, 1030, 1035, 1043], "flat": [44, 96, 170, 220, 221, 222, 258, 407, 415, 438, 444, 446, 459, 507, 994, 1020, 1027, 1028, 1043], "label_out": 44, "980": [44, 69, 1008], "plot_bisect_kmean": [44, 69, 1008], "null": [45, 72, 169, 170, 171, 260, 266, 407, 411, 494, 646, 667, 678, 702, 728, 754, 792, 824, 983, 984, 987, 1002, 1037], "mismatch": [45, 986, 1036], "warn": [45, 63, 73, 199, 214, 235, 263, 283, 300, 301, 309, 366, 367, 379, 382, 383, 384, 393, 401, 408, 415, 494, 536, 538, 545, 548, 551, 552, 555, 556, 557, 558, 559, 560, 562, 563, 564, 569, 570, 571, 572, 573, 574, 576, 600, 634, 691, 710, 711, 726, 727, 735, 780, 781, 784, 849, 863, 864, 899, 900, 902, 903, 904, 905, 907, 908, 909, 910, 919, 920, 926, 936, 944, 953, 957, 973, 974, 976, 987, 997, 1019, 1027, 1029, 1030, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "noisy_circl": [45, 63], "noisy_moon": [45, 63], "no_structur": [45, 63], "anisotropicli": [45, 63], "170": [45, 58, 59, 63, 385], "x_aniso": [45, 58, 63], "aniso": [45, 63], "plot_num": [45, 63, 228], "default_bas": [45, 63], "quantil": [45, 54, 64, 92, 112, 114, 166, 177, 218, 256, 305, 308, 309, 391, 414, 436, 437, 456, 517, 550, 558, 560, 655, 668, 720, 742, 745, 747, 822, 864, 876, 877, 878, 888, 889, 987, 997, 1008, 1009, 1023, 1027, 1031, 1034, 1036, 1040, 1041, 1043], "damp": [45, 407, 438, 452], "min_sampl": [45, 50, 66, 391, 393, 407, 418, 442, 444, 448, 453, 454, 455, 669, 983, 1036, 1040], "xi": [45, 66, 376, 407, 410, 415, 448, 454, 507, 1001, 1038], "min_cluster_s": [45, 66, 321, 407, 444, 448, 454, 1036], "allow_single_clust": [45, 444], "hdbscan_min_cluster_s": 45, "hdbscan_min_sampl": 45, "220": [45, 1027], "i_dataset": [45, 63, 228], "algo_param": [45, 63], "param": [45, 56, 62, 63, 72, 123, 124, 126, 127, 220, 234, 235, 258, 260, 268, 272, 287, 300, 322, 379, 381, 393, 398, 414, 417, 421, 424, 430, 431, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 462, 463, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 682, 686, 687, 688, 689, 690, 794, 795, 796, 799, 800, 808, 810, 820, 821, 822, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 858, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 891, 892, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 943, 944, 976, 1033, 1037, 1038, 1040, 1041, 1044], "easier": [45, 63, 67, 83, 122, 178, 184, 230, 238, 257, 258, 305, 338, 351, 362, 374, 379, 381, 384, 387, 391, 397, 409, 411, 466, 513, 897, 930, 982, 987, 994, 1003, 1007, 1011, 1021, 1036, 1041], "estimate_bandwidth": [45, 64, 407, 446, 459], "symmetr": [45, 125, 172, 201, 393, 405, 407, 450, 460, 461, 472, 517, 525, 527, 688, 692, 693, 702, 703, 713, 714, 715, 721, 725, 733, 734, 752, 754, 760, 782, 792, 794, 795, 973, 976, 983, 987, 990, 1043], "meanshift": [45, 319, 407, 438, 1030, 1031, 1032, 1035, 1037, 1038, 1041, 1042, 1043], "bin_seed": [45, 64, 446, 459, 1038], "two_mean": 45, "spectralclust": [45, 319, 407, 438, 990, 1027, 1028, 1037, 1039, 1040, 1041, 1042, 1043, 1044], "nearest_neighbor": [45, 450, 689], "average_linkag": 45, "gmm": [45, 60, 110, 166, 244, 246, 249, 250, 251, 252, 502, 510, 795, 815, 986, 1008, 1027, 1028, 1031, 1032, 1033], "gaussianmixtur": [45, 58, 246, 247, 248, 249, 250, 251, 413, 794, 986, 1033, 1035, 1036, 1040, 1041, 1043], "covariance_typ": [45, 246, 247, 249, 250, 251, 794, 795, 1043], "nkmean": 45, "npropag": 45, "ncluster": 45, "nmixtur": 45, "catch": [45, 63, 301, 367, 387, 388], "catch_warn": [45, 63, 235, 300, 301], "filterwarn": [45, 63, 214, 300, 301, 379, 997], "userwarn": [45, 63, 114, 160, 191, 208, 255, 343, 357, 384, 710, 997, 1033, 1035, 1040], "t1": [45, 47, 63, 214, 222, 225, 228], "ff7f00": [45, 63, 228], "4daf4a": [45, 63], "a65628": [45, 63], "984ea3": [45, 63], "999999": [45, 63], "e41a1c": [45, 63], "dede00": [45, 63, 64], "transax": [45, 63, 224, 228, 247, 291, 307], "plot_cluster_comparison": [45, 69, 1008], "deliv": [46, 366, 1011], "bad": [46, 61, 62, 152, 169, 351, 362, 379, 407, 417, 690, 743, 976, 983, 984, 989, 995, 1020, 1027], "though": [46, 56, 118, 148, 175, 178, 238, 266, 288, 307, 309, 352, 353, 362, 366, 373, 376, 379, 381, 392, 393, 407, 412, 413, 414, 415, 416, 697, 803, 805, 899, 976, 977, 979, 984, 987, 990, 995, 997, 1001, 1021, 1035], "3d": [46, 49, 68, 91, 102, 196, 220, 222, 224, 360, 415, 504, 584, 950, 1020, 1034, 1035, 1037], "mplot3d": [46, 68, 91, 102, 170, 196, 220, 222], "noqa": [46, 68, 91, 102, 125, 148, 163, 164, 170, 196, 220, 222, 271, 272, 317, 351, 383, 577, 578, 625, 799, 800, 976, 1036], "f401": [46, 68, 91, 102, 170, 196, 220, 222], "k_means_iris_8": 46, "k_means_iris_3": 46, "k_means_iris_bad_init": 46, "est": [46, 132, 169, 235, 237, 307, 317, 362, 401, 414, 560, 732, 864, 976, 987, 997, 1001, 1038, 1039], "elev": [46, 68, 91, 102, 170, 196, 220, 224, 489], "azim": [46, 68, 91, 102, 170, 196, 220, 224], "134": [46, 54, 102, 124, 135, 136, 260, 1008, 1030], "xaxi": [46, 91, 102, 118, 196, 220, 222, 225, 283, 288, 351], "set_ticklabel": [46, 91, 102, 196, 351], "zaxi": [46, 91, 102, 196, 220], "petal": [46, 91, 104, 106, 121, 242, 317, 320, 376, 408, 912, 1003, 1018, 1019], "sepal": [46, 91, 104, 106, 121, 153, 182, 242, 286, 317, 320, 335, 376, 997, 1018, 1019], "length": [46, 71, 90, 91, 93, 104, 106, 121, 148, 151, 152, 153, 156, 157, 159, 175, 182, 235, 236, 239, 242, 286, 317, 320, 335, 353, 372, 376, 379, 387, 388, 393, 408, 412, 414, 415, 417, 443, 488, 506, 507, 510, 513, 521, 549, 561, 579, 580, 587, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 630, 644, 645, 648, 649, 650, 651, 652, 654, 655, 658, 659, 660, 661, 679, 682, 778, 796, 799, 800, 810, 825, 827, 830, 831, 833, 841, 842, 843, 845, 847, 886, 912, 919, 921, 925, 941, 942, 958, 961, 986, 993, 997, 1012, 1018, 1019, 1027, 1030, 1031, 1033, 1034, 1035, 1036, 1038, 1039, 1043], "set_zlabel": [46, 91, 196], "setosa": [46, 91, 102, 104, 269, 270, 376, 502, 1012, 1019], "versicolour": [46, 91, 102, 104, 376, 1019], "virginica": [46, 91, 102, 104, 269, 270, 376, 502, 987, 1019], "text3d": [46, 102], "316": [46, 69, 156, 160, 188, 218, 609, 612, 623, 875, 1008], "plot_cluster_iri": [46, 69, 1008], "voxel": [47, 67, 583], "multipl": [47, 70, 73, 77, 93, 105, 112, 118, 120, 121, 123, 144, 166, 169, 193, 233, 260, 265, 266, 268, 272, 278, 281, 285, 315, 321, 341, 366, 367, 368, 373, 375, 376, 379, 381, 382, 383, 384, 391, 393, 406, 407, 408, 409, 410, 412, 414, 415, 416, 417, 418, 419, 442, 458, 462, 464, 465, 467, 472, 486, 489, 490, 493, 494, 495, 501, 502, 506, 507, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 534, 535, 536, 537, 538, 539, 541, 542, 543, 544, 545, 549, 551, 552, 553, 554, 557, 558, 559, 560, 561, 579, 597, 605, 606, 608, 609, 625, 630, 632, 637, 638, 639, 640, 644, 645, 648, 650, 651, 652, 655, 658, 659, 660, 661, 664, 665, 666, 669, 671, 674, 676, 677, 687, 688, 690, 691, 692, 719, 720, 725, 742, 743, 745, 747, 748, 750, 782, 785, 787, 788, 790, 794, 795, 796, 798, 799, 800, 801, 802, 808, 810, 811, 812, 813, 814, 815, 816, 821, 822, 823, 825, 829, 830, 831, 832, 833, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 858, 859, 861, 864, 876, 880, 888, 891, 892, 899, 900, 901, 904, 915, 930, 935, 936, 958, 961, 979, 982, 983, 984, 988, 989, 990, 994, 995, 1000, 1001, 1003, 1006, 1007, 1008, 1012, 1021, 1027, 1028, 1030, 1033, 1034, 1037, 1038, 1039, 1040, 1042, 1043, 1044], "partli": [47, 766], "procedur": [47, 57, 118, 125, 148, 179, 187, 250, 262, 308, 312, 338, 351, 362, 379, 381, 391, 392, 393, 394, 405, 406, 409, 411, 412, 414, 416, 529, 535, 536, 538, 543, 544, 545, 551, 552, 553, 554, 557, 558, 591, 593, 600, 607, 642, 670, 672, 685, 725, 782, 856, 857, 876, 888, 958, 976, 983, 989, 997, 1000, 1001, 1002, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "solut": [47, 178, 183, 188, 190, 204, 213, 228, 234, 318, 338, 377, 381, 393, 404, 407, 409, 411, 412, 415, 416, 447, 449, 451, 529, 535, 536, 537, 538, 540, 541, 543, 544, 545, 546, 547, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 608, 644, 646, 648, 650, 652, 653, 654, 656, 658, 660, 662, 663, 664, 665, 666, 667, 670, 672, 674, 675, 676, 677, 678, 680, 681, 683, 684, 685, 794, 795, 810, 848, 856, 857, 980, 981, 983, 984, 986, 991, 993, 1001, 1002, 1005, 1011, 1016, 1019, 1021, 1027, 1030, 1040, 1041, 1042], "closest": [47, 65, 203, 381, 407, 438, 440, 441, 445, 446, 447, 457, 651, 776, 777, 829, 839, 840, 841, 842, 843, 845, 847, 849, 850, 851, 978, 981, 988, 990, 1019], "partit": [47, 67, 71, 128, 130, 260, 301, 393, 404, 405, 407, 411, 414, 447, 449, 451, 460, 509, 555, 556, 557, 558, 561, 562, 563, 702, 703, 713, 783, 847, 907, 908, 909, 910, 986, 990, 993, 997, 1003, 1021], "cluster_qr": [47, 407, 450, 460, 1041], "qr": [47, 201, 403, 532, 539, 542, 935, 936, 984, 1033, 1044], "pivot": [47, 271, 272], "cheung": [47, 1028], "andrew": [47, 407, 460, 689, 693, 715, 734, 792, 874, 991, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "knyazev": [47, 407, 450, 460, 693, 1037, 1040, 1041], "ucdenv": 47, "skimag": [47, 48, 373, 1020], "spectral_clust": [47, 67, 1035, 1037, 1039, 1040, 1041, 1042, 1044], "orig_coin": [47, 48], "speed": [47, 48, 58, 71, 99, 110, 118, 164, 170, 185, 188, 192, 283, 317, 326, 351, 353, 368, 379, 382, 388, 391, 393, 403, 405, 407, 412, 414, 415, 418, 441, 442, 445, 446, 447, 448, 450, 455, 457, 458, 459, 460, 529, 530, 608, 625, 630, 631, 632, 637, 644, 645, 648, 649, 650, 651, 652, 653, 654, 658, 659, 660, 661, 662, 679, 682, 690, 794, 795, 802, 823, 839, 840, 841, 842, 843, 845, 847, 849, 850, 851, 874, 936, 976, 979, 984, 986, 988, 1001, 1011, 1020, 1021, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "down": [47, 48, 82, 112, 214, 215, 222, 232, 233, 235, 263, 278, 302, 305, 342, 362, 373, 382, 387, 409, 412, 441, 448, 454, 588, 591, 592, 637, 647, 771, 775, 778, 868, 869, 874, 877, 878, 889, 901, 904, 911, 983, 1012, 1020, 1035, 1045], "alias": [47, 48, 235, 377, 379, 382, 398, 595, 1027, 1031, 1041], "smoothened_coin": [47, 48], "rescaled_coin": [47, 48, 1020], "anti_alias": [47, 48, 1020], "img_to_graph": [47, 67, 415, 1030, 1040], "exponenti": [47, 76, 151, 156, 288, 293, 413, 414, 417, 447, 534, 552, 557, 612, 617, 620, 637, 641, 755, 756, 839, 840, 844, 856, 857, 874, 979, 983, 987, 1002, 1019, 1034, 1040], "beta": [47, 86, 168, 203, 385, 405, 407, 410, 534, 536, 538, 545, 642, 726, 727, 733, 739, 780, 792, 794, 987, 1019, 1029, 1032, 1034, 1036, 1037], "voronoi": [47, 67, 407], "n_region": 47, "extra": [47, 121, 237, 283, 322, 353, 377, 378, 380, 383, 393, 414, 415, 436, 441, 445, 457, 462, 530, 555, 556, 564, 588, 589, 698, 699, 700, 820, 843, 909, 910, 926, 986, 987, 990, 1027, 1030, 1032, 1033, 1035, 1040, 1042], "n_regions_plu": 47, "lobpcg": [47, 450, 460, 686, 689, 693, 1037, 1040, 1041, 1042], "amg": [47, 67, 407, 450, 460, 689, 693, 1037, 1041, 1042], "pyamg": [47, 397, 400, 407, 450, 460, 689, 693], "toler": [47, 74, 163, 190, 192, 215, 216, 342, 353, 374, 381, 388, 407, 419, 441, 445, 450, 457, 460, 469, 470, 476, 480, 481, 482, 529, 530, 531, 533, 534, 538, 539, 540, 541, 542, 543, 545, 546, 557, 558, 559, 560, 625, 644, 645, 648, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 674, 676, 677, 679, 680, 681, 682, 686, 687, 688, 689, 691, 692, 693, 839, 840, 844, 848, 856, 857, 894, 895, 899, 900, 901, 902, 903, 904, 905, 973, 983, 987, 1001, 1002, 1017, 1039, 1040, 1041, 1042], "eigen_tol": [47, 450, 460, 689, 693, 1028, 1041, 1042], "todo": [47, 232, 383, 387, 393, 407, 1045], "21243": 47, "assign_label": [47, 407, 450, 460], "comment": [47, 351, 377, 378, 379, 380, 382, 383, 387, 485, 577, 987], "paus": 47, "21194": [47, 1040], "186": [47, 69, 199, 302, 329, 385, 785, 987, 1008], "plot_coin_segment": [47, 69, 1008], "spatial": [48, 50, 56, 172, 183, 216, 301, 374, 393, 407, 418, 442, 444, 448, 450, 455, 677, 690, 757, 760, 775, 776, 777, 778, 789, 790, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 983, 990, 997, 1029, 1033, 1040, 1043], "constrain": [48, 96, 122, 129, 170, 190, 299, 316, 322, 336, 338, 372, 393, 406, 407, 412, 414, 507, 559, 560, 633, 656, 657, 688, 692, 824, 983, 986, 1031], "grid_to_graph": [48, 52, 55, 407, 415, 1020, 1040], "st": [48, 68, 260, 320, 1030, 1033, 1035], "168": [48, 293, 297, 1008, 1027], "4697": 48, "356": [48, 69, 995, 1008], "plot_coin_ward_segment": [48, 69, 1008], "vq": [49, 59], "palac": 49, "china": [49, 407, 504, 505, 582], "615": 49, "literatur": [49, 156, 260, 278, 352, 376, 379, 385, 387, 391, 392, 407, 410, 412, 414, 441, 445, 447, 499, 534, 536, 538, 545, 553, 554, 586, 589, 706, 794, 976, 979, 983, 987, 1037], "codebook": [49, 278, 564, 829], "palett": [49, 169, 260], "byte": [49, 54, 415, 485, 501, 506, 507, 580, 586, 587, 589, 952, 1019, 1021, 1027, 1034, 1035, 1042], "rgb": [49, 374, 415, 491, 492, 581, 582, 585], "gif": 49, "pick": [49, 56, 61, 172, 236, 268, 319, 325, 374, 379, 383, 407, 414, 441, 458, 521, 671, 909, 910, 976, 983, 984, 986, 1001, 1038], "018": [49, 260, 352, 470], "038": [49, 195, 218, 469, 470, 856, 1008], "080": [49, 343, 349, 1008], "robertlayton": 49, "load_sample_imag": [49, 581, 582, 1036], "pairwise_distances_argmin": [49, 65, 319, 777, 1035, 1041, 1042, 1043, 1044], "n_color": 49, "photo": 49, "jpg": [49, 504, 582], "255": [49, 99, 283, 301, 311, 318, 374, 491, 492, 559, 560], "original_shap": 49, "image_arrai": 49, "image_array_sampl": 49, "codebook_random": 49, "labels_random": 49, "recreate_imag": 49, "recreat": [49, 239], "book": [49, 71, 441, 445, 447, 829, 834, 838, 983, 984, 985, 988, 1039], "alongsid": [49, 379, 385, 393, 397, 416, 820, 821, 822, 987, 994, 1006, 1007], "506": [49, 69, 1008], "plot_color_quant": [49, 69, 1008], "750": [50, 56, 120, 260], "math": [50, 71, 148, 238, 260, 261, 376, 397, 761], "db": [50, 56, 407], "n_noise_": 50, "come": [50, 68, 71, 81, 87, 101, 148, 151, 233, 315, 351, 352, 366, 368, 372, 376, 379, 380, 383, 387, 391, 393, 397, 407, 411, 414, 415, 437, 448, 454, 470, 548, 703, 792, 817, 901, 904, 976, 977, 981, 984, 986, 990, 993, 1002, 1012, 1027, 1038, 1041, 1043], "handi": [50, 72, 352, 353, 380, 1043], "883": [50, 173], "917": 50, "916": [50, 99, 107, 352, 354, 1008], "626": [50, 185], "unique_label": [50, 56, 352, 381, 388], "core_samples_mask": 50, "zeros_lik": [50, 201, 269], "bool": [50, 67, 82, 164, 217, 360, 379, 419, 420, 421, 422, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 457, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 506, 507, 508, 509, 510, 511, 512, 513, 517, 520, 521, 522, 524, 525, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 693, 695, 696, 698, 700, 701, 705, 706, 707, 709, 710, 711, 712, 723, 724, 725, 726, 727, 728, 735, 738, 739, 747, 748, 751, 753, 758, 760, 764, 766, 771, 775, 779, 780, 781, 782, 784, 786, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 810, 814, 815, 818, 819, 822, 823, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 894, 895, 896, 897, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 915, 917, 918, 919, 920, 930, 936, 937, 949, 952, 958, 960, 968, 973, 974, 975, 977, 1036, 1039, 1040], "core_sample_indices_": [50, 442], "class_member_mask": 50, "markerfacecolor": [50, 56, 62, 64, 65], "markeredgecolor": [50, 56, 62, 64, 65], "markers": [50, 56, 59, 62, 64, 65, 125, 154, 158, 231, 319], "167": [50, 69, 385, 1008, 1027], "plot_dbscan": [50, 69, 418, 442, 1008], "constitut": [51, 393, 411, 414, 448, 454, 586, 587, 589, 991], "standpoint": 51, "proce": [51, 145, 180, 377, 383, 410, 411, 414, 438, 983], "reassign": [51, 379, 445, 447, 1028, 1032], "success": [51, 143, 166, 253, 264, 267, 268, 276, 345, 362, 402, 407, 411, 412, 414, 513, 562, 577, 796, 799, 800, 817, 904, 990, 1008, 1011, 1016, 1020, 1023, 1039], "becom": [51, 56, 58, 73, 81, 123, 201, 203, 235, 238, 262, 283, 306, 310, 338, 342, 351, 362, 373, 379, 381, 383, 387, 393, 394, 407, 409, 414, 415, 417, 438, 448, 452, 453, 455, 551, 579, 586, 587, 589, 617, 625, 656, 657, 674, 676, 873, 899, 900, 906, 982, 983, 984, 986, 990, 997, 1002, 1019, 1021, 1028, 1035, 1036, 1039, 1040, 1041, 1042, 1044], "fetch_olivetti_fac": [51, 96, 120, 237, 374, 1035, 1036, 1037], "extract_patches_2d": [51, 99, 415, 1035], "patch_siz": [51, 99, 415, 581, 582], "buffer": [51, 1040], "max_patch": [51, 415, 581, 582, 1035], "4i": 51, "dt": [51, 99, 133, 414, 415, 1003], "2400": 51, "700": [51, 317], "800": [51, 318, 374, 582, 690], "1100": 51, "1200": [51, 124, 305, 414], "1400": [51, 472], "1600": 51, "1700": 51, "1800": 51, "1900": 51, "2100": [51, 318], "2200": [51, 374, 491], "2300": [51, 188], "ntrain": 51, "431": [51, 69, 97, 107, 376, 1008], "plot_dict_face_patch": [51, 69, 1008], "agglo": [52, 443, 1020], "featureagglomer": [52, 55, 438, 439, 1004, 1020, 1030, 1036, 1037, 1040, 1041, 1043, 1044], "x_reduc": [52, 91, 130, 443, 1020], "x_restor": 52, "images_restor": 52, "176": [52, 65, 69, 385, 832, 988, 995, 1008], "plot_digits_agglomer": [52, 69, 1008], "rich": [53, 387, 391, 407, 437, 1011, 1038, 1041], "richer": [53, 105, 407], "uneven": [53, 255, 407, 411], "patholog": [53, 986, 1033], "clean": [53, 72, 198, 362, 371, 377, 413, 993, 997, 1037], "fring": [53, 407], "sensibl": [53, 163, 278, 352, 381, 983, 997], "resampl": [53, 125, 156, 169, 217, 287, 388, 391, 393, 553, 554, 961, 1007, 1036, 1040], "plot_clust": 53, "x_red": 53, "spectralembed": [53, 220, 221, 222, 686, 687, 688, 690, 984, 1028, 1033, 1037, 1041, 1042, 1044], "650": [53, 69, 405, 1008], "plot_digits_linkag": [53, 69, 1008], "raccoon": [54, 99, 412], "addition": [54, 73, 114, 169, 199, 217, 235, 316, 318, 352, 379, 391, 405, 415, 608, 609, 644, 650, 669, 876, 976, 977, 987, 995, 1006, 1033, 1044], "adapt": [54, 56, 112, 124, 125, 154, 245, 246, 307, 342, 367, 377, 378, 379, 388, 407, 414, 417, 513, 514, 515, 516, 674, 675, 676, 856, 857, 983, 989, 991, 997, 1001, 1006, 1007, 1035, 1036, 1043, 1044], "pooch": [54, 379, 397, 400], "instal": [54, 242, 283, 315, 316, 317, 318, 319, 320, 321, 322, 366, 367, 379, 380, 382, 383, 385, 387, 391, 392, 400, 403, 407, 415, 450, 460, 494, 689, 693, 1003, 1021, 1034, 1035, 1036, 1040, 1041], "raccoon_fac": [54, 99], "nbyte": [54, 232], "768": 54, "1024": [54, 105, 447, 466, 536, 897, 1040], "uint8": [54, 99, 373, 495, 504, 505, 1039], "786432": 54, "unsign": [54, 100, 374, 580, 952], "786": [54, 72], "kilobyt": 54, "behind": [54, 81, 112, 278, 377, 381, 383, 387, 406, 409, 414, 986, 990, 999, 1043], "simplest": [54, 382, 411, 984, 987, 1019, 1020], "know": [54, 67, 145, 148, 151, 160, 169, 217, 235, 236, 260, 278, 281, 319, 325, 346, 352, 366, 379, 391, 398, 401, 407, 410, 411, 412, 415, 498, 502, 508, 644, 650, 656, 657, 723, 753, 796, 810, 884, 885, 887, 888, 889, 890, 907, 908, 909, 910, 976, 986, 987, 988, 990, 999, 1033, 1034, 1037, 1039], "certainli": [54, 71, 352], "subsampl": [54, 105, 124, 127, 170, 199, 216, 217, 256, 308, 312, 317, 456, 557, 558, 559, 560, 561, 630, 677, 699, 799, 800, 825, 864, 876, 888, 915, 925, 979, 983, 1007, 1027, 1037, 1041, 1043, 1044], "200_000": [54, 308, 864, 1043], "compressed_raccoon_uniform": 54, "spot": [54, 230, 407], "leav": [54, 112, 117, 126, 170, 172, 217, 267, 310, 360, 362, 366, 376, 378, 384, 393, 407, 414, 439, 440, 443, 444, 461, 501, 555, 556, 557, 558, 559, 560, 562, 563, 564, 671, 673, 798, 803, 804, 805, 806, 814, 815, 839, 840, 907, 908, 909, 910, 976, 984, 990, 994, 1003, 1016, 1019, 1027, 1034, 1036, 1038, 1039, 1043], "bin_edg": 54, "bin_edges_": [54, 306, 864], "bin_cent": [54, 199], "625": [54, 199, 616, 706], "875": [54, 152, 667], "375": [54, 447, 747, 987], "140": [54, 170, 322, 414, 508, 514, 515, 516, 553, 554, 988], "171": [54, 148, 376, 385, 785, 987], "234": [54, 834, 838, 856, 857, 989], "axvlin": [54, 61, 74, 83, 103, 124, 134, 169, 171, 172, 188, 266, 346, 1017], "get_ybound": 54, "state": [54, 58, 71, 73, 81, 201, 232, 240, 246, 266, 317, 362, 367, 368, 379, 381, 385, 387, 391, 393, 394, 406, 415, 420, 438, 441, 445, 447, 452, 457, 473, 542, 587, 677, 799, 800, 808, 810, 812, 839, 840, 846, 894, 895, 922, 976, 977, 983, 989, 992, 999, 1006, 1007, 1011, 1029, 1031, 1033, 1035, 1037, 1040, 1043], "compressed_raccoon_kmean": 54, "90885631": 54, "34346583": 54, "64447187": 54, "28225276": 54, "70763101": 54, "159": [54, 374, 1027], "78681467": 54, "185": [54, 148, 160, 376, 385, 856, 857], "17226834": 54, "02069427": 54, "save": [54, 71, 73, 238, 302, 378, 379, 383, 385, 386, 387, 393, 401, 411, 419, 466, 532, 533, 625, 839, 840, 897, 983, 987, 997, 1003, 1011, 1021, 1027, 1030, 1034, 1037], "verifi": [54, 61, 110, 169, 199, 379, 384, 403, 971, 990], "6291456": 54, "surpris": [54, 170, 377, 983, 1006, 1029], "x8": 54, "ndarrai": [54, 59, 91, 199, 242, 258, 259, 260, 379, 380, 381, 385, 386, 403, 415, 418, 419, 422, 423, 425, 428, 429, 431, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 461, 462, 463, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 483, 486, 487, 488, 489, 490, 491, 492, 493, 495, 498, 499, 500, 501, 502, 503, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 693, 695, 696, 698, 699, 700, 713, 716, 719, 720, 721, 724, 725, 735, 742, 743, 745, 747, 748, 750, 751, 755, 756, 757, 758, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 782, 786, 787, 788, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 858, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 916, 917, 918, 919, 924, 925, 933, 935, 936, 937, 938, 942, 949, 951, 952, 956, 959, 960, 962, 963, 964, 965, 968, 973, 974, 987, 1002, 1007, 1030, 1034, 1037, 1038, 1041, 1042, 1043, 1044], "practic": [54, 72, 81, 87, 99, 118, 122, 123, 151, 168, 169, 175, 183, 201, 228, 234, 261, 268, 289, 290, 317, 338, 342, 367, 379, 381, 382, 385, 387, 392, 393, 407, 409, 411, 412, 413, 414, 415, 417, 445, 450, 460, 519, 522, 587, 630, 631, 668, 794, 838, 892, 899, 976, 977, 981, 983, 986, 987, 988, 989, 990, 993, 994, 997, 1006, 1007, 1009, 1011, 1012, 1021, 1022, 1023, 1029, 1033, 1035, 1037, 1039], "gain": [54, 222, 267, 283, 285, 322, 326, 351, 352, 360, 378, 385, 387, 414, 494, 530, 555, 559, 560, 562, 723, 753, 794, 795, 828, 907, 909, 988, 992, 1000, 1003, 1030, 1034, 1037], "409": [54, 69, 1008], "plot_face_compress": [54, 69, 1008], "bayesianridg": [55, 163, 178, 179, 183, 317, 625, 642, 983, 1034, 1035, 1036, 1037, 1040, 1041, 1043, 1044], "shutil": [55, 73, 408], "tempfil": [55, 285, 315, 408, 990], "feature_select": [55, 72, 73, 75, 142, 143, 144, 145, 146, 147, 148, 149, 166, 242, 317, 319, 341, 362, 393, 398, 408, 416, 579, 976, 1008, 1027, 1028, 1030, 1031, 1032, 1033, 1034], "kfold": [55, 118, 124, 138, 255, 265, 362, 411, 435, 470, 565, 566, 592, 600, 645, 649, 651, 653, 659, 661, 663, 671, 796, 799, 800, 802, 804, 806, 810, 815, 817, 818, 819, 820, 821, 822, 823, 824, 826, 830, 833, 880, 1016, 1028, 1029, 1030, 1032, 1033, 1035, 1037], "roi_siz": 55, "snr": 55, "noise_coef": 55, "gridsearch": [55, 79, 271, 1006], "cachedir": [55, 73, 388, 408], "mkdtemp": [55, 408], "n_x": [55, 583], "n_y": [55, 583, 989, 997], "parcel": [55, 68, 407], "ward__n_clust": 55, "coef_agglomeration_": 55, "_agglom": 55, "ward_tre": [55, 439, 443, 1027, 1031], "451933": 55, "675318": 55, "275706": 55, "085711": 55, "1600x1600": 55, "7840": 55, "element": [55, 96, 115, 116, 127, 230, 254, 259, 267, 269, 316, 352, 356, 360, 376, 378, 379, 381, 388, 394, 404, 406, 407, 411, 412, 414, 415, 418, 442, 444, 450, 462, 485, 506, 510, 512, 518, 520, 524, 525, 529, 535, 536, 538, 548, 555, 556, 557, 558, 562, 563, 564, 565, 566, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 615, 630, 656, 657, 664, 665, 666, 674, 675, 676, 705, 715, 724, 731, 733, 743, 760, 766, 775, 779, 785, 786, 829, 839, 840, 841, 842, 843, 845, 847, 849, 850, 854, 856, 857, 862, 878, 879, 882, 886, 899, 904, 907, 908, 909, 910, 938, 939, 940, 958, 960, 961, 973, 981, 983, 987, 988, 991, 994, 997, 998, 999, 1003, 1011, 1012, 1032, 1033, 1035, 1037, 1038, 1039, 1041, 1043], "return_dist": [55, 461, 839, 840, 841, 842, 843, 845, 847, 849, 850, 851, 990, 1031], "________________________________________________________ward_tre": 55, "0min": 55, "905206": 55, "161245": 55, "849835": 55, "091621": 55, "f_regress": [55, 143, 416, 590, 593, 594, 596, 597, 598, 602, 603, 607, 1030, 1034, 1041, 1044], "cach": [55, 67, 166, 261, 283, 284, 286, 291, 295, 297, 366, 367, 374, 393, 439, 443, 448, 466, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 500, 506, 796, 841, 843, 859, 860, 897, 901, 902, 903, 904, 905, 972, 990, 1002, 1008, 1030, 1034, 1035, 1036, 1037, 1039, 1040, 1042, 1043], "selectpercentil": [55, 72, 242, 341, 416, 590, 593, 594, 596, 597, 601, 604, 1028, 1033, 1043, 1044], "anova__percentil": [55, 341], "coef_selection_": 55, "_univariate_select": 55, "267703": 55, "026711": 55, "_____________________________________________________f_regress": 55, "447268": 55, "638768": 55, "rdbu_r": [55, 83, 106, 338], "temporari": [55, 71, 73, 366, 466, 685, 778, 897, 990, 1030, 1031, 1034, 1040, 1041], "worri": [55, 984, 1013], "rmtree": [55, 73, 408], "ignore_error": 55, "567": [55, 69, 1008], "plot_feature_agglomeration_vs_univariate_select": [55, 69, 1008], "huberregressor": [55, 151, 166, 177, 179, 197, 203, 204, 205, 218, 312, 522, 668, 669, 670, 676, 677, 983, 1008, 1033, 1034, 1035, 1036], "orthogon": [55, 97, 98, 99, 105, 166, 177, 218, 273, 406, 412, 524, 529, 535, 537, 540, 541, 546, 662, 663, 683, 684, 999, 1008, 1009, 1023, 1027], "pursuit": [55, 97, 99, 105, 166, 177, 218, 273, 412, 472, 524, 529, 535, 540, 546, 662, 663, 683, 684, 1008, 1009, 1023, 1027], "perspect": [56, 61, 199, 366, 374, 391, 394, 528, 641, 899, 980], "conveni": [56, 203, 238, 371, 387, 391, 408, 411, 415, 417, 422, 441, 445, 447, 449, 451, 462, 487, 609, 674, 676, 697, 725, 782, 858, 859, 961, 977, 979, 983, 984, 994, 1011, 1021, 1027], "ground_truth": [56, 290], "proba_map": 56, "class_index": 56, "ci": [56, 367, 382, 383, 387, 989, 1033, 1035], "preambl": 56, "parameters_str": 56, "greatest": [56, 397, 407, 866, 1035], "remark": [56, 87, 148, 368, 379, 997], "unlik": [56, 57, 118, 169, 170, 220, 222, 250, 305, 336, 379, 381, 385, 391, 393, 398, 409, 411, 412, 415, 444, 448, 533, 648, 649, 652, 653, 654, 680, 681, 782, 817, 839, 840, 879, 890, 902, 983, 986, 987, 994, 1002, 1027, 1033], "bi": [56, 415], "worth": [56, 121, 170, 199, 377, 379, 387, 1011], "rememb": [56, 381, 384, 397, 415, 990, 994, 1003], "hardli": [56, 605, 606], "proper": [56, 188, 217, 368, 385, 405, 414, 447, 539, 551, 674, 936, 962, 982, 983, 984, 987, 1002, 1027, 1037, 1038, 1039, 1040, 1041, 1042, 1044], "must": [56, 169, 170, 172, 180, 183, 216, 217, 228, 239, 255, 289, 306, 311, 351, 362, 374, 378, 379, 380, 381, 383, 385, 387, 393, 394, 398, 403, 405, 407, 408, 411, 412, 414, 415, 416, 417, 418, 428, 436, 439, 442, 443, 444, 445, 447, 448, 449, 453, 455, 457, 459, 460, 462, 464, 465, 467, 472, 485, 506, 507, 510, 521, 529, 535, 536, 537, 538, 539, 541, 542, 545, 551, 552, 557, 558, 559, 560, 565, 566, 579, 580, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 608, 609, 615, 618, 625, 626, 627, 628, 630, 631, 636, 640, 641, 646, 647, 650, 656, 657, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 680, 683, 684, 685, 686, 687, 690, 691, 692, 693, 694, 697, 701, 704, 707, 732, 743, 761, 768, 771, 775, 778, 785, 789, 790, 791, 793, 794, 795, 796, 797, 799, 800, 801, 803, 805, 806, 808, 810, 811, 812, 814, 815, 817, 820, 823, 825, 826, 834, 835, 836, 837, 838, 841, 842, 843, 845, 847, 848, 849, 850, 851, 854, 855, 856, 857, 859, 862, 863, 864, 866, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 883, 899, 900, 901, 902, 903, 904, 905, 906, 912, 955, 962, 971, 973, 976, 977, 983, 984, 985, 987, 990, 991, 993, 994, 1001, 1002, 1003, 1012, 1021, 1027, 1030, 1034, 1038, 1040, 1041, 1044], "maintain": [56, 204, 217, 220, 235, 260, 367, 378, 382, 385, 386, 387, 391, 393, 397, 407, 414, 438, 440, 868, 869, 875, 876, 879, 884, 887, 888, 890, 983, 984, 997, 1006, 1007, 1012, 1023, 1042], "mitig": [56, 171, 312, 367, 368, 984, 1003, 1019, 1020, 1039], "great": [56, 168, 169, 197, 362, 379, 391, 412, 761, 1007, 1011, 1027, 1034], "appropri": [56, 58, 103, 156, 169, 203, 235, 269, 356, 362, 377, 379, 381, 387, 393, 406, 407, 411, 413, 414, 418, 442, 448, 455, 487, 488, 489, 494, 498, 499, 500, 502, 503, 508, 575, 580, 589, 590, 593, 594, 596, 597, 598, 670, 672, 685, 707, 841, 842, 843, 845, 847, 849, 850, 851, 971, 983, 986, 987, 997, 1031, 1034, 1040, 1043], "immedi": [56, 379, 391, 796, 810, 820, 821, 1035], "hdb": [56, 444], "probabilities_": [56, 444], "capabl": [56, 57, 87, 156, 203, 224, 381, 393, 397, 988, 991, 1002, 1003, 1011, 1027, 1036, 1044], "constraint": [56, 58, 68, 96, 111, 136, 166, 194, 203, 238, 239, 255, 300, 301, 302, 316, 379, 391, 412, 415, 485, 506, 507, 555, 556, 559, 560, 562, 563, 630, 633, 814, 815, 907, 908, 909, 910, 956, 976, 978, 983, 984, 1001, 1008, 1031, 1034, 1035, 1038, 1040, 1042, 1044], "reachabl": [56, 66, 444, 448, 453, 454, 455, 845, 941], "fragment": [56, 99], "sparser": [56, 178, 190, 412, 469, 476, 537, 541, 983, 990, 1001], "Not": [56, 138, 170, 366, 391, 407, 425, 426, 429, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 467, 468, 469, 470, 471, 472, 473, 474, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 561, 564, 567, 568, 579, 580, 581, 586, 587, 589, 625, 626, 627, 628, 675, 686, 687, 688, 689, 691, 791, 794, 795, 796, 799, 800, 810, 836, 839, 840, 843, 844, 845, 847, 851, 863, 871, 874, 875, 877, 880, 891, 892, 903, 987, 993, 1006, 1036], "mention": [56, 87, 112, 217, 316, 362, 366, 379, 383, 384, 391, 393, 407, 694, 891, 892, 976, 981, 983, 1007, 1010, 1011, 1021, 1034, 1035, 1036], "until": [56, 148, 207, 272, 317, 319, 384, 393, 394, 404, 407, 411, 416, 506, 507, 555, 556, 557, 558, 562, 563, 564, 591, 644, 645, 650, 651, 656, 657, 658, 659, 660, 661, 664, 665, 666, 669, 674, 675, 676, 692, 794, 795, 799, 800, 856, 857, 896, 899, 907, 908, 909, 910, 962, 976, 983, 984, 992, 1000, 1003, 1021, 1030, 1034, 1035, 1041], "tradeoff": [56, 115, 166, 233, 241, 253, 267, 268, 269, 270, 276, 351, 366, 379, 387, 413, 513, 562, 696, 700, 724, 786, 825, 860, 879, 899, 984, 1008, 1019, 1036, 1039], "comfort": [56, 414], "epsilon": [56, 66, 181, 223, 234, 321, 345, 412, 444, 453, 641, 647, 665, 674, 676, 743, 856, 857, 900, 902, 905, 980, 983, 987, 991, 1001, 1002, 1019, 1027], "incap": 56, "suffici": [56, 132, 207, 274, 338, 366, 393, 407, 416, 530, 655, 680, 681, 815, 816, 988, 990, 1007, 1036, 1042, 1043], "intervent": 56, "inaccess": 56, "ultim": [56, 224, 380], "world": [56, 71, 75, 169, 203, 224, 238, 351, 366, 372, 376, 407, 412, 415, 952, 977, 987, 989, 1005, 1007, 1011, 1015, 1023, 1027], "whose": [56, 80, 81, 82, 148, 156, 199, 336, 374, 387, 388, 393, 405, 407, 409, 414, 416, 417, 420, 435, 436, 437, 446, 459, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 513, 532, 536, 538, 539, 542, 545, 547, 570, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 638, 669, 693, 716, 796, 803, 810, 824, 845, 864, 891, 892, 935, 966, 967, 981, 988, 992, 993, 994, 1002, 1030, 1035, 1036, 1038, 1041], "respect": [56, 68, 91, 101, 112, 116, 118, 121, 129, 159, 175, 178, 183, 188, 201, 213, 216, 220, 222, 229, 232, 234, 238, 250, 269, 289, 290, 302, 310, 319, 335, 342, 366, 367, 374, 375, 379, 405, 407, 410, 412, 414, 415, 417, 444, 462, 465, 468, 469, 470, 471, 472, 473, 474, 532, 538, 539, 545, 551, 559, 560, 595, 608, 609, 610, 611, 612, 613, 614, 617, 618, 619, 620, 621, 622, 623, 634, 641, 669, 688, 692, 710, 725, 779, 782, 794, 795, 835, 845, 856, 857, 911, 913, 976, 980, 981, 983, 984, 987, 990, 991, 992, 993, 997, 1002, 1006, 1011, 1030, 1032, 1033, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "recomput": [56, 57, 239, 241, 285, 315, 467, 472, 983, 999, 1032, 1043], "cut_dist": [56, 444], "455": [56, 69, 155, 157, 165, 311, 1008], "plot_hdbscan": [56, 69, 1008], "johnson": [56, 166, 175, 227, 243, 305, 309, 371, 406, 487, 500, 875, 887, 891, 892, 893, 997, 1004, 1008, 1023, 1035, 1041, 1043], "lindenstrauss": [56, 166, 175, 227, 243, 371, 406, 487, 500, 891, 892, 893, 1004, 1008, 1023], "bound": [56, 155, 157, 159, 166, 175, 201, 217, 227, 243, 259, 377, 386, 407, 412, 415, 417, 418, 442, 487, 500, 510, 521, 534, 593, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 630, 633, 635, 648, 652, 656, 675, 703, 732, 785, 794, 795, 839, 840, 876, 888, 891, 892, 893, 901, 902, 903, 906, 923, 955, 983, 986, 987, 990, 999, 1001, 1002, 1004, 1008, 1035, 1038, 1039, 1041], "intract": [57, 412, 984, 992], "inferenti": 57, "meta": [57, 71, 111, 135, 136, 166, 199, 235, 265, 269, 277, 279, 281, 321, 322, 356, 359, 362, 373, 377, 381, 383, 391, 393, 398, 403, 405, 416, 417, 427, 435, 441, 442, 445, 447, 463, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 494, 531, 532, 536, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 573, 579, 580, 586, 588, 589, 592, 595, 601, 608, 609, 633, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 688, 796, 797, 798, 803, 805, 812, 814, 822, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 844, 846, 849, 850, 856, 857, 859, 862, 864, 865, 866, 871, 878, 879, 894, 895, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 947, 976, 988, 1007, 1008, 1009, 1023, 1027, 1030, 1031, 1032, 1033, 1034, 1035, 1038, 1039, 1041, 1042, 1044], "chirag": 57, "nagpal": 57, "christo": [57, 1036, 1037, 1039, 1041, 1044], "arida": [57, 1036, 1037, 1039, 1041, 1044], "baseestim": [57, 110, 235, 283, 379, 392, 393, 417, 422, 424, 425, 429, 430, 431, 599, 630, 631, 928, 1027, 1034, 1037, 1039, 1041, 1042], "clone": [57, 125, 159, 170, 235, 302, 322, 362, 377, 379, 382, 383, 385, 387, 393, 405, 408, 417, 435, 463, 567, 568, 595, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 802, 818, 823, 826, 830, 833, 859, 860, 896, 1007, 1027, 1033, 1035, 1039, 1043, 1044], "metaestim": [57, 381, 393, 406, 896, 1031, 1040, 1041, 1044, 1045], "available_if": [57, 393, 1040, 1041, 1045], "check_is_fit": [57, 110, 235, 382, 388, 393, 1037, 1040, 1041], "5000": [57, 185, 214, 215, 217, 317, 880], "_classifier_ha": 57, "deleg": [57, 385, 431, 432, 912, 1031, 1033, 1039], "unfit": [57, 408, 432, 462, 567, 568, 600, 609, 1035, 1037, 1044], "classifier_": [57, 235], "inductivecluster": 57, "clusterer_": 57, "plot_scatt": 57, "cluster_label": [57, 61], "x_new": [57, 408, 412, 416, 431, 440, 441, 443, 445, 447, 529, 530, 531, 532, 533, 534, 535, 537, 539, 540, 541, 542, 547, 565, 567, 568, 580, 581, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 626, 628, 633, 636, 637, 638, 639, 640, 686, 687, 688, 689, 690, 848, 855, 862, 863, 864, 865, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 891, 892, 999, 1012], "y_new": 57, "declar": [57, 221, 235, 362, 379, 380, 381, 385, 393, 441, 444, 445, 457, 469, 470, 476, 688, 692, 1034, 1038], "membership": [57, 394, 404, 406, 407, 509, 510, 511, 512, 513, 517, 520, 1002], "inductive_learn": 57, "probable_clust": 57, "049": [57, 69, 469, 1008], "plot_inductive_clust": [57, 69, 1008], "__sklearn_is_fitted__": [57, 108, 109, 166, 381, 421, 424, 971, 1008, 1040, 1041], "develop": [57, 109, 217, 258, 260, 278, 315, 321, 351, 366, 374, 378, 379, 385, 391, 393, 394, 396, 398, 401, 404, 406, 409, 410, 414, 415, 421, 424, 431, 491, 796, 971, 983, 987, 990, 1003, 1006, 1007, 1008, 1010, 1011, 1019, 1027, 1035, 1036, 1037, 1042, 1044, 1045], "meant": [58, 148, 238, 374, 381, 388, 472, 491, 675, 845, 953, 954, 977, 991, 993, 997, 1028], "unintuit": 58, "possibli": [58, 87, 148, 199, 214, 342, 352, 376, 378, 387, 401, 407, 414, 415, 449, 451, 587, 834, 835, 836, 837, 838, 904, 905, 907, 908, 909, 910, 976, 979, 984, 990, 997, 1042], "undesir": [58, 152, 417], "phil": [58, 1032, 1043], "roth": [58, 1032, 1035, 1042], "mr": [58, 320, 1028, 1031, 1041], "anisotrop": [58, 153, 417, 615, 617, 620], "ellipt": [58, 983], "60834549": 58, "63667341": 58, "40887718": 58, "85253229": 58, "x_vari": 58, "y_vari": 58, "unequ": [58, 1035], "x_filter": 58, "unevenli": [58, 199, 255], "y_filter": 58, "set_i": 58, "scenario": [58, 71, 151, 175, 203, 263, 362, 386, 397, 411, 414, 535, 541, 543, 544, 981, 987, 997, 1037], "criteria": [58, 118, 166, 177, 188, 207, 218, 250, 260, 387, 407, 416, 464, 480, 481, 482, 499, 555, 556, 557, 558, 562, 563, 644, 650, 654, 656, 657, 669, 690, 860, 879, 899, 900, 907, 908, 909, 910, 977, 986, 991, 1001, 1008, 1020, 1030, 1035, 1038], "knowledg": [58, 120, 169, 216, 238, 260, 374, 379, 382, 385, 392, 393, 407, 411, 414, 418, 442, 509, 553, 554, 561, 718, 733, 737, 780, 828, 987, 988, 999, 1021], "consequ": [58, 103, 217, 260, 261, 305, 335, 362, 412, 414, 559, 560, 564, 653, 654, 977, 983, 987, 995, 1003, 1036, 1038, 1043], "inertia": [58, 59, 62, 352, 407, 441, 445, 447, 450, 457, 458, 460, 461, 1038], "common_param": [58, 125, 170, 234, 262, 263, 342], "unexpect": [58, 235, 362, 379, 384, 387, 397, 401, 533, 694, 987, 1002, 1029, 1035, 1036, 1039, 1041, 1043], "suffic": [58, 59, 381, 1021], "propos": [58, 79, 80, 283, 374, 379, 381, 391, 393, 407, 409, 414, 419, 420, 448, 473, 533, 605, 606, 674, 675, 676, 856, 857, 983, 986, 990, 1001, 1034], "inflat": [58, 168, 169, 171, 407, 411, 987, 997], "allevi": [58, 178, 183, 407, 989], "fastest": [58, 258, 353, 445, 668, 670, 672, 685, 935, 936, 986], "restart": [58, 382, 387, 445, 529, 535, 536, 541, 543, 544, 608, 609, 984, 1040], "254": [58, 69, 1008], "plot_kmeans_assumpt": [58, 69, 1008], "posterior": [58, 150, 151, 152, 157, 161, 166, 178, 260, 412, 417, 547, 548, 550, 608, 609, 611, 612, 613, 617, 620, 621, 625, 642, 643, 706, 794, 981, 1006, 1008, 1033, 1036], "judg": [59, 205, 407, 1016], "definit": [59, 82, 187, 199, 267, 283, 352, 379, 380, 381, 393, 396, 407, 409, 410, 412, 525, 527, 533, 609, 626, 690, 706, 716, 725, 755, 794, 795, 976, 979, 981, 983, 985, 987, 990, 1001, 1005, 1023, 1031, 1035, 1042], "shorthand": [59, 393, 408, 465, 559, 560, 860, 861, 1030], "homo": 59, "compl": 59, "mea": 59, "context": [59, 238, 242, 283, 366, 367, 373, 378, 380, 392, 393, 407, 408, 413, 414, 415, 417, 418, 435, 442, 444, 446, 448, 450, 455, 456, 459, 462, 465, 466, 470, 529, 533, 534, 535, 537, 540, 541, 542, 543, 544, 546, 553, 554, 555, 556, 561, 562, 563, 564, 565, 566, 567, 568, 592, 600, 605, 606, 608, 624, 625, 628, 630, 632, 637, 645, 649, 651, 653, 655, 656, 657, 659, 661, 663, 664, 666, 674, 677, 686, 687, 688, 689, 690, 691, 692, 771, 775, 778, 796, 799, 800, 802, 810, 818, 820, 821, 822, 823, 824, 826, 827, 828, 829, 831, 832, 841, 842, 845, 847, 849, 850, 852, 853, 858, 861, 894, 895, 897, 899, 900, 901, 902, 903, 904, 905, 955, 977, 983, 987, 993, 997, 1001, 1007, 1010, 1011, 1019, 1027, 1034, 1035, 1040, 1043], "n_digit": 59, "1797": [59, 90, 258, 302, 325, 376, 419, 443, 500, 530, 531, 532, 533, 597, 598, 686, 687, 688, 689, 691, 990, 1018], "bench_k_mean": 59, "tabl": [59, 217, 260, 379, 380, 383, 388, 407, 415, 580, 656, 678, 796, 810, 836, 952, 983, 987, 988, 993, 1006, 1028], "inertia_": [59, 62, 65, 441, 445, 447, 1038], "clustering_metr": 59, "sample_s": [59, 233, 352, 790], "formatter_result": 59, "determinist": [59, 125, 367, 375, 381, 393, 407, 441, 445, 447, 449, 450, 451, 456, 457, 460, 549, 557, 558, 562, 563, 581, 582, 689, 693, 807, 808, 855, 907, 908, 979, 983, 1028, 1031, 1033, 1035, 1036, 1039, 1042, 1043], "ttime": 59, "tinertia": 59, "thomo": 59, "tcompl": 59, "tv": 59, "tari": 59, "tami": 59, "tsilhouett": 59, "__________________________________________________________________________________": 59, "69545": 59, "598": [59, 103, 152, 271, 276, 539, 1008], "645": 59, "621": [59, 766], "469": 59, "617": [59, 263, 407, 766], "152": [59, 385], "046": 59, "69735": 59, "681": [59, 385], "723": [59, 234], "701": 59, "574": [59, 353, 532, 539], "698": 59, "72686": 59, "636": [59, 120, 136, 183, 385, 1008], "658": [59, 87, 170], "647": 59, "521": [59, 147, 149, 170, 1008], "643": [59, 258], "reduced_data": 59, "mesh": [59, 121, 130, 153, 233, 291, 299, 307, 330, 334], "white": [59, 61, 96, 156, 169, 213, 220, 289, 302, 307, 330, 337, 412, 415, 623, 1003, 1027, 1030, 1033, 1037, 1041], "758": [59, 69, 329, 1008], "plot_kmeans_digit": [59, 69, 1008], "kmeans_plusplu": [60, 407, 1039, 1044], "4000": [60, 127, 248], "centers_init": 60, "4eacc5": [60, 65], "ff9c34": [60, 65], "4e9a06": [60, 65], "cluster_data": 60, "061": [60, 69, 258, 1008], "plot_kmeans_plusplu": [60, 69, 1008], "wrong": [61, 199, 289, 351, 362, 376, 379, 381, 415, 502, 723, 753, 790, 987, 993, 1002, 1030, 1032, 1034, 1035, 1036, 1037, 1040, 1044], "wide": [61, 62, 91, 115, 232, 306, 391, 407, 412, 415, 976, 983, 1006, 1011, 1021, 1027, 1029, 1043], "ambival": 61, "thick": [61, 293, 990], "ow": 61, "7049787496083262": 61, "5882004012129721": 61, "6505186632729437": 61, "561464362648773": 61, "4857596147013469": 61, "silhouette_sampl": [61, 790, 1031, 1033, 1035, 1043], "distinct": [61, 260, 327, 351, 353, 374, 381, 384, 393, 394, 411, 414, 415, 587, 797, 806, 814, 873, 874, 894, 895, 976, 983, 990, 993, 1021, 1035], "center_box": [61, 510], "range_n_clust": 61, "set_size_inch": [61, 138, 239], "insert": [61, 169, 199, 391, 407, 485, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 914], "blank": [61, 384, 977, 1003], "demarc": 61, "silhouette_avg": 61, "sample_silhouette_valu": 61, "y_lower": [61, 125], "aggreg": [61, 116, 217, 263, 269, 319, 321, 407, 414, 416, 532, 553, 554, 592, 719, 720, 725, 742, 743, 745, 747, 748, 750, 782, 787, 788, 988, 990, 997, 1043], "ith_cluster_silhouette_valu": 61, "size_cluster_i": 61, "y_upper": [61, 125], "fill_betweenx": 61, "2nd": [61, 91, 159, 310, 407, 418, 442, 528, 997, 1042], "lw": [61, 79, 80, 82, 100, 104, 105, 193, 200, 202, 205, 209, 216, 223, 248, 255, 270, 288, 305, 327, 345], "fontweight": [61, 194], "334": [61, 69, 154, 1008], "plot_kmeans_silhouette_analysi": [61, 69, 1008], "reach": [62, 118, 123, 148, 199, 201, 215, 217, 262, 319, 338, 360, 384, 394, 397, 407, 412, 416, 448, 455, 506, 507, 591, 592, 625, 642, 643, 644, 645, 650, 651, 652, 653, 654, 658, 659, 660, 661, 664, 665, 666, 674, 675, 676, 677, 679, 680, 681, 682, 726, 727, 780, 794, 795, 856, 857, 896, 976, 987, 991, 1001, 1003, 1011, 1038, 1042, 1043, 1044], "optimum": [62, 157, 169, 175, 273, 412, 470, 983, 986], "stuck": [62, 690, 984], "check_random_st": [62, 215, 222, 231, 237, 381, 388, 393], "trade": [62, 79, 118, 171, 203, 259, 261, 262, 338, 351, 406, 407, 409, 551, 552, 557, 558, 632, 654, 690, 796, 799, 800, 810, 822, 984, 991, 999, 1001, 1002, 1007], "n_init_rang": 62, "n_samples_per_cent": 62, "n_clusters_tru": 62, "init_s": [62, 352, 447], "factori": [62, 260, 415, 957, 987], "empti": [62, 71, 105, 211, 328, 366, 374, 381, 383, 407, 419, 481, 531, 559, 560, 629, 807, 864, 904, 906, 914, 919, 920, 926, 946, 947, 977, 1002, 1019, 1029, 1031, 1035, 1036, 1038, 1039, 1041, 1042, 1043], "run_id": 62, "km": [62, 319, 352], "fmt": [62, 210], "my_memb": [62, 64, 65], "480": [62, 69, 183, 352, 1008], "plot_kmeans_stability_low_dim_dens": [62, 69, 1008], "globular": [63, 407], "cleanli": [63, 1027], "876": [63, 69, 1008], "plot_linkage_comparison": [63, 69, 1008], "dorin": [64, 446], "comaniciu": [64, 407, 446], "meer": [64, 407, 446], "ieee": [64, 80, 82, 376, 407, 409, 416, 420, 446, 473, 532, 561, 662, 683, 684, 722, 766, 983, 987, 993], "transact": [64, 376, 407, 409, 418, 420, 442, 446, 473, 532, 536, 538, 545, 561, 642, 662, 683, 684, 722, 723, 753, 766, 983, 987], "intellig": [64, 148, 351, 376, 407, 414, 446, 553, 554, 636, 694, 722, 829, 856, 857, 988, 999, 1007, 1011], "2002": [64, 405, 407, 414, 435, 446, 591, 592, 723, 753, 846, 894, 979, 987], "603": [64, 446], "619": [64, 446], "labels_uniqu": 64, "432": [64, 69, 260, 409, 1008], "plot_mean_shift": [64, 69, 459, 1008], "k_mean": [65, 388, 393, 1020, 1035, 1043], "t_batch": 65, "pairwis": [65, 168, 169, 232, 269, 315, 319, 320, 351, 366, 371, 381, 393, 407, 412, 417, 444, 452, 456, 459, 460, 466, 485, 506, 507, 533, 559, 560, 618, 636, 637, 638, 639, 640, 641, 686, 688, 690, 692, 694, 697, 775, 776, 777, 778, 785, 789, 790, 827, 843, 847, 851, 865, 897, 979, 987, 990, 999, 1002, 1023, 1027, 1028, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1041, 1042, 1043, 1044], "k_means_cluster_cent": 65, "mbk_means_cluster_cent": 65, "k_means_label": 65, "mbk_means_label": 65, "ninertia": 65, "bbbbbb": 65, "plot_mini_batch_kmean": [65, 69, 1008], "shane": [66, 1036, 1039, 1042], "grigsbi": 66, "refug": 66, "rocktalu": 66, "cluster_optics_dbscan": [66, 407], "n_points_per_clust": 66, "c1": [66, 122, 159, 231, 311], "c2": [66, 122, 159, 231, 311], "c3": [66, 122, 311], "c4": [66, 311, 1009, 1023], "c5": [66, 1009, 1023], "c6": 66, "clust": [66, 448, 455], "labels_050": 66, "reachability_": [66, 407, 448, 453, 454, 455], "core_dist": [66, 453, 454, 455], "core_distances_": [66, 448, 453, 455], "ordering_": [66, 407, 448, 453, 454, 455], "labels_200": 66, "ax3": [66, 328], "ax4": 66, "klass": 66, "xk": [66, 548], "rk": 66, "full_lik": 66, "noptic": 66, "ndbscan": 66, "743": [66, 69, 258, 1008, 1019], "plot_opt": [66, 69, 1008], "tri": [67, 104, 220, 292, 342, 367, 381, 384, 391, 394, 405, 447, 449, 451, 629, 630, 631, 668, 690, 696, 698, 700, 810, 955, 992, 1012, 1029, 1035, 1039], "intens": [67, 99, 283, 376, 380, 391, 412, 441, 445, 457, 605, 606, 630, 631, 798, 976, 994, 1011, 1035], "weakli": 67, "outlin": [67, 121, 379, 381, 393, 394, 396, 407, 976, 1023], "center1": 67, "center2": 67, "center3": 67, "58": [67, 80, 376, 409, 420, 473, 605, 761, 997, 1017], "center4": 67, "radius1": 67, "radius2": 67, "radius3": 67, "radius4": 67, "circle1": 67, "circle2": 67, "circle3": 67, "circle4": 67, "label_im": 67, "cleaner": 67, "578": [67, 69, 1008], "plot_segmentation_toi": [67, 69, 1008], "swiss": [68, 166, 219, 220, 221, 222, 225, 226, 407, 528, 690, 691, 1008, 1041], "sole": [68, 391, 407], "oppos": [68, 235, 383, 403, 407, 895, 990, 1002, 1012, 1027], "make_swiss_rol": [68, 224, 1041], "thinner": 68, "fig1": 68, "set_posit": [68, 102, 210, 305], "jet": 68, "fig2": 68, "121": [68, 114, 164, 183, 233, 616, 667, 997], "354": [68, 69, 352, 1008], "plot_ward_structured_vs_unstructur": [68, 69, 1008], "103": [69, 125, 136, 185, 281, 283, 374, 414, 495, 553, 554, 1008, 1027], "chain": [70, 73, 76, 77, 112, 139, 166, 231, 259, 268, 271, 272, 278, 280, 282, 283, 286, 302, 362, 371, 391, 393, 406, 417, 494, 500, 539, 609, 625, 656, 735, 796, 825, 828, 830, 831, 832, 833, 859, 860, 879, 976, 977, 988, 992, 1004, 1006, 1008, 1011, 1021, 1023], "raster": 71, "serv": [71, 100, 112, 157, 263, 342, 408, 549, 636, 979, 1041], "matt": [71, 1030, 1031, 1032, 1037, 1038, 1042, 1043], "terri": [71, 1031], "compris": [71, 125, 258, 351, 352, 353, 374, 391, 412, 414, 513, 803, 984], "subject": [71, 129, 251, 263, 351, 374, 379, 381, 383, 391, 393, 394, 405, 406, 409, 411, 412, 493, 656, 657, 683, 862, 957, 978, 983, 1002, 1005, 1021, 1036, 1037, 1040, 1042], "mccall": 71, "mksol": 71, "dseg": 71, "ti": [71, 199, 247, 250, 258, 347, 366, 405, 407, 597, 598, 633, 718, 723, 753, 794, 795, 901, 904, 907, 986, 987, 1002, 1028, 1030, 1031, 1035, 1037, 1041, 1042, 1043], "fred": [71, 1027, 1040], "575": [71, 199], "3539": 71, "1993apr6": 71, "131900": 71, "8407": 71, "perhap": [71, 121, 376, 378, 387, 393, 413, 1007], "militari": 71, "slug": 71, "school": [71, 376, 407, 785, 987], "physic": [71, 118, 367, 503, 952, 983, 1043], "teacher": 71, "ex": [71, 377, 380, 397, 1031, 1032], "fighter": 71, "jock": 71, "wasn": [71, 235, 1036], "poundal": 71, "flink": 71, "funni": 71, "propon": 71, "si": 71, "insist": 71, "safeti": [71, 391, 408, 953, 1007, 1037], "ball": [71, 288, 296, 407, 413, 446, 690, 839, 840, 844, 847, 849, 850, 851, 1027, 1029, 1032, 1038], "mari": [71, 1035, 1036, 1037, 1038, 1041], "shafer": 71, "nasa": [71, 351, 352, 376], "am": [71, 76, 81, 132, 170, 351, 384, 409, 472, 491, 1034], "dryden": 71, "stateless": [71, 352, 368, 381, 393, 415, 580, 581, 587, 636, 862, 863, 871, 997, 1043], "subject_body_extractor": 71, "subject_body_transform": 71, "sentenc": [71, 351, 353, 374, 394, 415], "text_stat": 71, "num_sent": 71, "text_stats_transform": 71, "subjectbodyextractor": 71, "subjectbodi": 71, "union": [71, 169, 408, 735, 751, 858, 1034], "body_bow": 71, "pull": [71, 318, 367, 377, 382, 393, 394, 1037], "body_stat": 71, "transformer_weight": [71, 462, 465, 858, 1032, 1039], "396": [71, 148, 351, 376, 1021], "394": [71, 160], "863": [71, 77, 1008], "plot_column_transform": [71, 77, 1008], "imput": [72, 132, 165, 171, 230, 240, 242, 316, 319, 371, 383, 392, 393, 398, 408, 414, 488, 499, 563, 578, 637, 643, 670, 821, 842, 860, 918, 920, 1006, 1007, 1008, 1023, 1029, 1030, 1044], "miss": [72, 132, 148, 165, 171, 230, 240, 260, 283, 316, 320, 362, 366, 371, 374, 376, 378, 379, 381, 383, 384, 393, 403, 406, 407, 408, 409, 444, 470, 488, 494, 496, 499, 555, 556, 559, 560, 562, 563, 564, 625, 626, 627, 628, 637, 643, 670, 688, 692, 724, 766, 821, 842, 860, 868, 869, 873, 875, 876, 879, 880, 884, 887, 888, 890, 907, 908, 909, 910, 983, 984, 987, 1006, 1007, 1008, 1009, 1011, 1023, 1029, 1031, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "chi": [72, 81, 112, 309, 371, 416, 517, 590, 593, 594, 596, 597, 598, 602, 603, 604, 607, 636, 637, 638, 639, 640, 755, 756, 1023, 1027, 1032, 1033], "dispatch": [72, 403, 466, 796, 810, 820, 821, 822, 897, 953, 954, 1016, 1023, 1042], "processor": [72, 132, 169, 418, 435, 442, 444, 446, 448, 450, 455, 456, 459, 462, 465, 470, 529, 533, 534, 535, 537, 540, 541, 543, 544, 546, 553, 554, 555, 556, 561, 562, 563, 564, 565, 566, 567, 568, 592, 600, 605, 606, 608, 630, 632, 637, 645, 649, 651, 653, 655, 656, 657, 659, 661, 663, 664, 666, 674, 677, 686, 687, 688, 689, 690, 691, 692, 771, 775, 778, 796, 799, 800, 802, 810, 818, 820, 821, 822, 823, 824, 826, 827, 828, 829, 841, 842, 845, 847, 849, 850, 852, 853, 858, 861, 894, 895], "pedro": [72, 1028, 1030, 1031, 1035], "chi2": [72, 415, 416, 450, 579, 590, 593, 594, 596, 597, 598, 603, 604, 607, 618, 636, 637, 638, 639, 640, 641, 756, 762, 771, 1027, 1034, 1041], "simpleimput": [72, 132, 163, 164, 171, 230, 240, 242, 316, 319, 362, 393, 625, 626, 627, 977, 997, 1035, 1036, 1038, 1039, 1041, 1042, 1043, 1044, 1045], "40945": 72, "titan": [72, 171, 242, 315, 319, 320, 995], "surviv": [72, 171, 976, 1006], "ag": [72, 148, 169, 171, 187, 188, 199, 217, 239, 240, 242, 305, 318, 319, 320, 322, 374, 376, 494, 1011, 1012, 1019], "fare": [72, 171, 242, 319, 320, 1031, 1032], "embark": [72, 171, 242, 315, 319, 320], "sex": [72, 148, 169, 171, 187, 188, 242, 320, 322, 376, 494, 995, 1019], "femal": [72, 169, 320, 384, 872, 873, 997], "male": [72, 169, 320, 384, 872, 873, 997], "pclass": [72, 171, 242, 315, 319, 320], "numeric_featur": [72, 319], "numeric_transform": [72, 319], "categorical_transform": 72, "preprocessor": [72, 132, 169, 199, 230, 238, 240, 311, 316, 318, 319, 320, 322, 408, 415, 586, 587, 589, 1006, 1021, 1027, 1030, 1035, 1037], "798": [72, 414], "lt": [72, 73, 117, 132, 169, 250, 258, 272, 377, 379], "0x7f5862ce29d0": 72, "pipelineifittedpipelin": [72, 117, 145, 169, 171, 229, 239, 242, 267, 319], "columntransformercolumntransform": [72, 132, 169, 171, 230, 240, 311, 316, 319], "simpleimputersimpleimput": [72, 132, 171, 230, 240, 316, 319], "standardscalerstandardscal": [72, 132, 169, 229, 230, 239, 240, 242, 267, 316, 319], "onehotencoderonehotencod": [72, 117, 132, 169, 170, 230, 240, 316, 319], "selectpercentileselectpercentil": [72, 242], "logisticregressionlogisticregress": [72, 117, 229, 230, 240, 242, 316, 319], "make_column_selector": [72, 122, 132, 238, 408, 462, 465, 1037], "subset_featur": 72, "Then": [72, 113, 117, 120, 132, 135, 145, 169, 175, 183, 187, 199, 203, 224, 229, 235, 241, 262, 263, 278, 351, 373, 383, 385, 387, 397, 404, 405, 407, 410, 412, 415, 416, 568, 591, 717, 753, 796, 810, 899, 900, 977, 986, 987, 993, 1002, 1021, 1036], "1047": 72, "1118": 72, "684": [72, 81], "1045": 72, "841": 72, "1046": [72, 250], "kb": [72, 169, 170], "numerical_transform": 72, "yourself": [72, 377, 378, 379, 380, 384, 387, 991], "dtype_exclud": [72, 464], "dtype_includ": [72, 122, 132, 238, 408, 464], "_column_transform": [72, 132], "0x7f5833c6f280": 72, "0x7f5833c6f190": 72, "exactli": [72, 112, 168, 178, 183, 192, 199, 203, 251, 268, 306, 346, 351, 379, 381, 404, 407, 411, 412, 415, 420, 444, 451, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 513, 524, 588, 589, 613, 674, 676, 701, 703, 760, 797, 814, 820, 979, 983, 984, 985, 987, 988, 1003, 1020, 1021, 1027, 1033, 1034, 1040], "hyperparamet": [72, 74, 75, 151, 152, 158, 159, 163, 166, 170, 178, 183, 188, 213, 217, 228, 238, 253, 258, 263, 265, 271, 272, 276, 285, 302, 351, 381, 393, 407, 411, 412, 414, 417, 500, 533, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 641, 651, 657, 663, 671, 674, 725, 782, 796, 810, 904, 976, 981, 982, 983, 986, 987, 989, 991, 993, 1001, 1007, 1008, 1021, 1029, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1043], "cartesian": [72, 404, 631, 990, 1042], "preprocessor__num__imputer__strategi": 72, "preprocessor__cat__selector__percentil": 72, "classifier__c": 72, "search_cv": 72, "param_distribut": [72, 151, 261, 268, 272, 317, 392, 800, 808, 810, 1043], "randomizedsearchcvinot": 72, "fittedrandomizedsearchcv": 72, "pipelinepipelin": [72, 73, 240], "trigger": [72, 73, 383, 408, 856, 857, 859, 860, 919, 920, 936, 983, 1021, 1035, 1041, 1042], "best_params_": [72, 74, 125, 151, 234, 250, 258, 264, 317, 338, 392, 796, 799, 800, 810, 976, 1017, 1021], "best_score_": [72, 74, 234, 261, 264, 265, 338, 671, 673, 796, 799, 800, 810, 1016, 1017, 1021, 1038], "cv_results_": [72, 73, 74, 83, 118, 138, 147, 250, 258, 259, 260, 261, 264, 268, 271, 272, 285, 338, 470, 592, 796, 799, 800, 810, 1021, 1033, 1037, 1039, 1040], "sort_valu": [72, 171, 172, 242, 250, 260, 271, 311, 312], "mean_test_scor": [72, 73, 74, 83, 118, 138, 147, 250, 259, 260, 261, 268, 271, 272, 285, 338, 470, 592, 796, 810, 976, 1033, 1040], "std_test_scor": [72, 74, 118, 138, 147, 259, 260, 261, 268, 285, 470, 592, 796, 810, 1033, 1040], "param_preprocessor__num__imputer__strategi": 72, "param_preprocessor__cat__selector__percentil": 72, "param_classifier__c": 72, "786015": 72, "031020": 72, "785063": 72, "030498": 72, "783149": 72, "030462": 72, "485": [72, 77, 694, 1008], "plot_column_transformer_mixed_typ": [72, 77, 1008], "set_output": [72, 166, 170, 227, 240, 243, 310, 311, 382, 431, 440, 441, 443, 445, 447, 462, 466, 480, 481, 482, 483, 494, 502, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 564, 565, 566, 567, 568, 579, 580, 581, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 625, 626, 627, 628, 633, 636, 637, 638, 639, 640, 656, 686, 687, 690, 825, 843, 848, 851, 855, 858, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 891, 892, 897, 1008, 1042, 1043, 1044], "instanti": [73, 154, 318, 382, 398, 414, 448, 565, 566, 600, 628, 796, 799, 800, 802, 810, 818, 820, 821, 822, 823, 824, 826, 926, 993, 1018, 1027, 1035, 1039, 1043], "argument": [73, 200, 229, 232, 235, 367, 373, 374, 379, 380, 382, 384, 385, 387, 388, 391, 393, 407, 408, 411, 412, 414, 416, 418, 419, 421, 425, 429, 436, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 452, 455, 457, 459, 461, 466, 467, 491, 494, 501, 506, 531, 533, 534, 536, 538, 549, 557, 558, 561, 565, 566, 567, 568, 575, 579, 580, 586, 587, 589, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 629, 637, 641, 644, 645, 648, 649, 650, 651, 652, 653, 654, 658, 659, 660, 661, 664, 666, 674, 675, 679, 682, 686, 690, 694, 696, 697, 698, 699, 700, 712, 717, 732, 739, 760, 776, 777, 802, 818, 820, 821, 822, 827, 828, 831, 841, 842, 843, 845, 847, 848, 849, 850, 851, 852, 853, 856, 859, 863, 897, 903, 913, 917, 926, 931, 954, 955, 956, 957, 971, 976, 979, 983, 984, 985, 987, 990, 994, 995, 1002, 1003, 1012, 1016, 1027, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1039, 1041, 1042, 1043, 1044, 1045], "memoiz": [73, 374, 393], "costli": [73, 79, 119, 163, 261, 347, 367, 380, 385, 407, 441, 625, 804, 806, 891, 892, 936, 987, 990, 999, 1007], "mcgibbon": [73, 1029, 1030, 1033], "selectkbest": [73, 75, 144, 145, 319, 362, 379, 398, 408, 416, 579, 590, 593, 594, 596, 598, 604, 976, 1028, 1033, 1043, 1044], "mutual_info_classif": [73, 416, 590, 593, 594, 597, 598, 1033, 1039, 1042, 1045], "pipe": [73, 74, 122, 240, 259, 311, 317, 318, 392, 398, 408, 415, 588, 859, 884, 885, 887, 888, 889, 890, 976, 997, 1017], "reduce_dim": [73, 240, 259, 408], "popul": [73, 79, 81, 169, 199, 238, 263, 305, 374, 388, 393, 409, 438, 488, 710, 716, 841, 842, 843, 845, 847, 849, 850, 851, 956, 987, 993, 997, 1003], "n_features_opt": 73, "c_option": 73, "iterated_pow": [73, 530, 533, 539, 1033], "reduce_dim__n_compon": [73, 259, 408], "classify__c": 73, "reduce_dim__k": 73, "reducer_label": 73, "kbest": [73, 590], "0x7f585d953ee0": 73, "gridsearchcvifittedgridsearchcv": [73, 250, 258, 260], "minmaxscalerminmaxscal": 73, "passthroughpassthrough": [73, 169, 170, 311], "linearsvclinearsvc": [73, 145, 267], "mean_scor": [73, 269, 272, 352, 1040], "alphabet": [73, 393, 738], "eas": [73, 172, 250, 310, 379, 382, 385, 983, 1001, 1006, 1007, 1011, 1038, 1039, 1041], "sometim": [73, 132, 168, 260, 301, 352, 362, 367, 368, 379, 381, 383, 385, 392, 393, 407, 409, 412, 414, 415, 447, 532, 533, 536, 538, 539, 864, 865, 866, 914, 982, 983, 984, 987, 992, 997, 998, 1002, 1012, 1020, 1024, 1028, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1043], "worthwhil": [73, 393], "slower": [73, 99, 118, 122, 163, 234, 269, 353, 414, 415, 416, 444, 449, 451, 536, 538, 545, 553, 554, 555, 556, 561, 562, 563, 564, 586, 587, 589, 629, 630, 631, 641, 657, 670, 672, 685, 690, 702, 827, 831, 832, 980, 984, 985, 986, 988, 990, 1003, 1021, 1031, 1038], "constructor": [73, 231, 367, 381, 393, 406, 408, 415, 462, 465, 547, 548, 553, 565, 566, 567, 568, 579, 580, 586, 587, 595, 666, 674, 675, 841, 842, 843, 845, 846, 847, 849, 850, 851, 858, 859, 860, 861, 955, 976, 988, 997, 1002, 1007, 1012, 1027, 1028, 1030, 1031, 1032, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1044], "folder": [73, 374, 377, 379, 383, 387, 397, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 501, 990, 1021], "cached_pip": [73, 408], "delet": [73, 326, 328, 383, 384, 467, 472, 484], "exit": [73, 283, 383, 387, 466], "benefici": [73, 75, 79, 96, 130, 305, 306, 377, 984], "304": [73, 77, 148, 309, 376, 1008], "plot_compare_reduct": [73, 77, 1008], "increment": [73, 75, 95, 101, 102, 103, 104, 107, 166, 263, 383, 385, 440, 445, 461, 502, 531, 532, 533, 534, 537, 539, 542, 600, 644, 656, 664, 802, 823, 831, 832, 834, 835, 836, 837, 838, 868, 869, 879, 899, 900, 962, 983, 989, 1008, 1030, 1031], "874": [74, 785, 786, 987], "logistic__c": [74, 1017], "54434690031882": 74, "pca__n_compon": [74, 1017], "truncat": [74, 130, 221, 388, 532, 533, 537, 538, 539, 542, 674, 676, 723, 753, 794, 848, 912, 936, 976, 986, 987, 1001, 1017, 1021, 1022, 1023, 1033, 1035], "x_digit": [74, 139, 300, 408, 1016, 1017, 1019], "y_digit": [74, 139, 300, 408, 1016, 1017, 1019], "__": [74, 261, 393, 408, 421, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 463, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 579, 580, 581, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 686, 687, 688, 689, 690, 794, 795, 796, 799, 800, 810, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 858, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 891, 892, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 976, 1017, 1035, 1036], "spectrum": [74, 522, 542, 693, 936, 1011, 1017, 1035], "ax0": [74, 76, 199, 231, 352, 1017], "n_components_": [74, 103, 393, 439, 443, 532, 536, 537, 538, 539, 540, 541, 891, 892, 1017, 1036, 1038], "explained_variance_ratio_": [74, 104, 352, 412, 532, 539, 542, 547, 1017, 1030, 1033], "named_step": [74, 87, 408, 591, 592, 595, 859, 860, 899, 900, 983, 1017, 1034, 1036], "components_col": 74, "param_pca__n_compon": 74, "best_clf": 74, "nlargest": 74, "yerr": [74, 80, 82, 119, 122, 147, 285, 311, 328], "val": [74, 211, 260, 938], "plot_digits_pip": [74, 77, 1008], "boltzmann": [74, 86, 139, 166, 189, 214, 298, 303, 500, 656, 711, 825, 855, 856, 857, 859, 885, 1008, 1022, 1023, 1029], "candid": [75, 250, 258, 261, 268, 317, 368, 379, 383, 407, 414, 446, 448, 796, 799, 800, 808, 810, 983, 990, 1003, 1033], "features__pca__n_compon": 75, "features__univ_select__k": 75, "svm__c": 75, "867": 75, "967": [75, 987, 991], "transformer_list": [75, 408, 858, 861, 977, 1038, 1039], "univ_select": 75, "amuel": [75, 116, 190, 233, 327, 346], "ai": [75, 116, 190, 233, 327, 346, 411], "bonn": [75, 116, 190, 233, 327, 346], "mayb": [75, 301, 393, 415, 1002, 1007], "combined_featur": 75, "x_featur": [75, 638, 639, 640, 979], "grid_search": [75, 118, 240, 250, 258, 268, 322, 408, 955, 1029, 1030, 1031, 1032, 1033, 1034], "458": [75, 77, 342, 349, 1008], "plot_feature_union": [75, 77, 1008], "overview": [76, 166, 265, 277, 279, 281, 356, 380, 382, 392, 393, 494, 731, 740, 796, 812, 822, 827, 828, 829, 907, 989, 1001, 1008, 1022, 1023], "transformedtargetregressor": [76, 169, 199, 391, 398, 408, 591, 592, 595, 1035, 1037, 1040], "hous": [76, 123, 132, 163, 164, 305, 317, 372, 488, 1023], "translat": [76, 381, 417, 525, 612, 868, 869, 885, 984, 987, 1011], "lowest": [76, 87, 170, 183, 250, 373, 407, 411, 633, 635, 799, 800, 803, 906, 907, 984, 987, 1003, 1042], "logarithm": [76, 132, 169, 203, 232, 261, 338, 393, 416, 458, 588, 656, 657, 674, 702, 723, 738, 748, 752, 753, 754, 788, 802, 830, 839, 840, 934, 1003, 1016, 1034], "log1p": [76, 231, 863, 987, 997], "expm1": 76, "y_tran": 76, "meda": [76, 169, 987], "median_absolute_error": [76, 169, 987, 1031, 1037, 1039], "r2_score": [76, 168, 183, 194, 195, 414, 430, 463, 480, 481, 482, 552, 554, 556, 558, 560, 563, 566, 568, 609, 633, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 658, 659, 660, 661, 662, 663, 665, 668, 670, 671, 676, 677, 721, 725, 832, 833, 842, 850, 857, 900, 902, 905, 908, 910, 976, 987, 1028, 1030, 1036, 1040, 1041], "compute_scor": [76, 103, 178, 179, 642, 643, 1036], "r2": [76, 113, 118, 132, 168, 170, 194, 234, 381, 408, 414, 552, 568, 671, 822, 857, 987, 995, 1036], "ridge_cv": 76, "y_pred_ridg": 76, "ridge_cv_with_trans_target": 76, "inverse_func": [76, 169, 408, 463, 863, 997, 1035], "y_pred_ridge_with_trans_target": 76, "sell": 76, "quantile_transform": [76, 876, 887, 997, 1034, 1035, 1036], "house_pric": [76, 132], "select_dtyp": [76, 122, 320, 464], "inf": [76, 154, 293, 388, 407, 417, 444, 448, 453, 454, 455, 459, 469, 470, 476, 551, 552, 557, 558, 591, 592, 595, 604, 605, 606, 617, 625, 633, 635, 646, 647, 648, 650, 667, 669, 670, 674, 675, 676, 678, 685, 725, 727, 743, 775, 782, 786, 855, 864, 871, 917, 918, 919, 920, 934, 987, 997, 1034, 1036, 1037, 1038, 1039, 1041, 1042, 1043], "lotfrontag": 76, "garageyrblt": 76, "masvnrarea": [76, 132], "to_fram": 76, "n_quantil": [76, 170, 309, 876, 888, 1036], "output_distribut": [76, 305, 309, 408, 875, 876, 887, 888, 997], "squeez": [76, 157, 158, 238, 283, 305, 1020], "quantiletransform": [76, 170, 309, 408, 463, 875, 888, 977, 997, 1034, 1035, 1036, 1037, 1038, 1043], "weaker": [76, 559, 560], "residu": [76, 195, 201, 256, 430, 463, 480, 481, 482, 550, 552, 554, 556, 558, 560, 563, 566, 568, 609, 633, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 658, 659, 660, 661, 662, 663, 665, 668, 669, 670, 671, 672, 676, 677, 683, 684, 699, 741, 782, 832, 833, 842, 850, 857, 900, 902, 905, 908, 910, 983, 987, 1019, 1039, 1040, 1042], "smile": [76, 374, 1041], "546": [76, 77, 1008], "plot_transformed_target": [76, 77, 1008], "predictor": [76, 111, 122, 135, 136, 163, 164, 166, 199, 217, 230, 238, 256, 311, 381, 392, 393, 408, 410, 411, 414, 417, 464, 465, 480, 481, 482, 494, 514, 515, 516, 553, 554, 560, 563, 566, 600, 608, 628, 630, 631, 646, 651, 655, 667, 671, 678, 699, 820, 822, 831, 832, 859, 860, 872, 873, 879, 961, 983, 988, 1008, 1028, 1034, 1037], "stack": [76, 111, 122, 135, 136, 163, 164, 166, 199, 230, 238, 256, 288, 311, 360, 378, 387, 391, 393, 406, 413, 462, 464, 465, 494, 513, 560, 563, 565, 566, 610, 625, 626, 628, 651, 671, 699, 820, 822, 860, 864, 872, 873, 879, 961, 977, 1006, 1007, 1008, 1009, 1010, 1023, 1027, 1030, 1034, 1035, 1036, 1037, 1038], "57": [77, 151, 169, 215, 269, 302, 376, 377, 397, 399, 400, 408, 703, 758, 778, 832, 987, 997, 1027], "612": [77, 83, 84, 787, 1008], "empiricalcovari": [79, 81, 82, 409, 467, 471, 472, 473, 474, 993], "unbias": [79, 405, 409, 412, 435, 548, 654, 670, 672, 685, 983, 1016], "shrunk": [79, 103, 305, 312, 321, 420, 471, 473, 474, 477, 478, 479, 547, 880, 981, 1001, 1022, 1023], "base_x_train": 79, "base_x_test": 79, "coloring_matrix": [79, 80], "shrunkcovari": [79, 103, 409, 467, 468, 471, 472, 473], "empirical_covari": [79, 409, 476, 477, 479, 1043], "log_likelihood": [79, 608, 609, 794, 795], "negative_loglik": 79, "real_cov": [79, 80, 420, 468, 471, 472, 473, 474, 477, 478, 479], "emp_cov": [79, 81, 83, 476, 479], "loglik_r": 79, "inv": [79, 83, 300], "formula": [79, 80, 267, 404, 407, 409, 420, 471, 473, 514, 515, 516, 588, 641, 644, 645, 648, 649, 650, 651, 652, 653, 654, 658, 659, 660, 661, 662, 674, 676, 702, 726, 727, 752, 761, 976, 981, 983, 987, 992, 993, 997, 1001, 1032, 1034, 1036], "asymptot": [79, 80, 188, 366, 409, 472, 534, 727, 983, 986, 1037], "criterion": [79, 80, 172, 187, 207, 250, 272, 316, 381, 388, 393, 407, 412, 439, 443, 447, 450, 457, 460, 530, 535, 537, 544, 551, 552, 555, 556, 557, 558, 562, 563, 564, 604, 625, 642, 643, 646, 654, 664, 665, 666, 667, 669, 670, 672, 674, 675, 676, 678, 689, 693, 708, 795, 896, 901, 902, 903, 904, 905, 907, 908, 909, 910, 983, 986, 987, 995, 1000, 1003, 1009, 1020, 1023, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1043, 1044], "chen": [79, 80, 409, 414, 420, 473, 723, 753, 979, 987, 1030, 1033, 1034, 1035, 1037, 1040, 1041, 1042, 1043], "Its": [79, 258, 262, 375, 381, 393, 412, 417, 536, 982, 983, 992, 995, 1001, 1006, 1011, 1030, 1044], "tuned_paramet": [79, 138, 258], "loglik_lw": 79, "loglik_oa": 79, "unseen": [79, 123, 145, 188, 203, 207, 273, 289, 342, 368, 371, 381, 392, 393, 407, 411, 845, 876, 888, 978, 987, 993, 995, 997, 1003, 1012, 1030, 1035, 1039], "loglog": [79, 232], "lik_max": 79, "amax": 79, "lik_min": 79, "amin": 79, "vline": [79, 98, 186, 187, 188, 200, 260, 273, 306], "shrinkage_": [79, 80, 471, 473], "magenta": [79, 127], "purpl": [79, 93, 224], "cyan": [79, 115, 169, 294], "realli": [79, 171, 188, 383, 384, 385, 987, 993, 1011, 1041], "interestingli": [79, 148, 997], "outperform": [79, 87, 132, 278, 310, 391, 411, 414, 450, 460, 989, 997], "462": [79, 84, 1008], "plot_covariance_estim": [79, 84, 1008], "fa": [79, 95, 105, 106, 107, 166, 385, 412, 471, 474, 530, 539, 796, 821, 1008], "inspir": [80, 129, 170, 217, 379, 391, 414, 559, 560, 924, 977, 1006, 1036], "mmse": [80, 409, 420, 473], "tran": 80, "octob": [80, 374, 1027, 1034, 1040, 1041, 1043], "choleski": [80, 199, 217, 388, 469, 470, 476, 525, 609, 646, 648, 649, 652, 653, 654, 656, 657, 667, 670, 672, 678, 680, 681, 685, 794, 795, 983, 1030, 1034, 1036, 1039, 1042, 1043], "toeplitz": 80, "simul": [80, 98, 169, 193, 236, 260, 1011], "n_samples_rang": [80, 232], "lw_mse": 80, "oa_ms": 80, "lw_shrinkag": 80, "oa_shrinkag": 80, "error_norm": [80, 82, 467, 468, 469, 470, 471, 472, 473, 474], "darkorang": [80, 100, 104, 105, 200, 210, 223, 246, 247, 248, 251, 267, 269, 288, 294, 295, 327, 358], "868": [80, 84, 125, 144, 1008], "plot_lw_vs_oa": [80, 84, 1008], "convex": [80, 105, 124, 125, 166, 177, 206, 218, 220, 347, 352, 407, 409, 412, 420, 444, 450, 460, 471, 473, 474, 477, 478, 479, 656, 674, 690, 983, 984, 990, 991, 1001, 1008, 1040], "d_": [81, 407, 412, 646, 667, 678, 775, 984, 989], "mle": [81, 103, 539, 1035, 1038], "resist": [81, 82, 379], "erron": [81, 82, 412, 983, 1028, 1035, 1039], "breakdown": [81, 82, 216, 677, 983], "n_": [81, 82, 172, 260, 318, 407, 412, 414, 644, 650, 683, 694, 979, 983, 987, 989, 990, 994, 997, 999, 1002, 1003], "smallest": [81, 82, 199, 283, 356, 374, 407, 409, 416, 525, 539, 628, 652, 653, 654, 680, 681, 688, 692, 693, 796, 799, 800, 810, 815, 869, 916, 1003, 1040], "pure": [81, 82, 87, 183, 199, 393, 407, 471, 477, 494, 555, 556, 557, 558, 562, 563, 564, 703, 713, 783, 792, 907, 908, 909, 910, 997], "rousseuw": [81, 82], "rousseeuw": [81, 82, 407, 409, 467, 472, 789, 790, 993], "ass": [81, 82, 409, 472], "1984": [81, 82, 409, 472, 907, 908, 1003], "wilson": [81, 376, 1027, 1030], "hilferti": 81, "1931": 81, "proceed": [81, 148, 374, 376, 407, 418, 437, 442, 509, 694, 706, 723, 753, 846, 896, 987, 999, 1000, 1001], "academi": [81, 846], "688": [81, 238, 243, 1008], "n_outlier": [81, 82, 128, 202, 228, 290], "gen_cov": 81, "ey": [81, 82, 247, 251, 338, 374, 532, 539, 548], "outliers_cov": 81, "mincovdet": [81, 82, 409, 467, 468, 471, 473, 474, 993, 1027, 1034], "robust_cov": 81, "nmcd": 81, "nmle": 81, "26253567e": 81, "06695631e": 81, "22747343e": 81, "23773583": 81, "24640578": 81, "51963999": 81, "inlier": [81, 128, 202, 228, 238, 305, 393, 409, 429, 467, 561, 669, 675, 845, 876, 888, 902, 903, 905, 983, 993, 1034, 1035, 1040], "inlier_plot": 81, "outlier_plot": 81, "get_xlim": [81, 194, 204, 305], "zz": 81, "mahal_emp_cov": 81, "emp_cov_contour": 81, "pubu_r": 81, "mahal_robust_cov": 81, "robust_contour": 81, "ylorbr_r": 81, "dist": [81, 221, 232, 383, 467, 468, 469, 470, 471, 472, 473, 474, 697, 760, 766, 839, 840], "borderaxespad": 81, "cubic": [81, 417], "suggest": [81, 99, 115, 119, 169, 172, 260, 338, 366, 378, 379, 386, 393, 411, 412, 414, 467, 472, 563, 643, 824, 981, 983, 984, 992, 995, 1002, 1021, 1031, 1038, 1041, 1044], "emp_mah": 81, "markeredgewidth": [81, 264], "rm": [81, 154, 383, 387, 409], "mahal": 81, "robust_mah": 81, "location_": [81, 82, 467, 468, 469, 470, 471, 472, 473, 474], "plot_mahalanobis_dist": [81, 84, 1008], "ransac": [81, 166, 177, 205, 216, 218, 522, 647, 655, 669, 676, 677, 1008], "compens": [82, 168, 170, 175, 199, 217, 261, 409, 412], "soon": [82, 393, 1019], "5n_": 82, "johanna": 82, "hardin": 82, "rock": 82, "decemb": [82, 156, 374, 662, 683, 684, 1027, 1035, 1037, 1039, 1040, 1042], "928": [82, 435], "946": 82, "zoubir": 82, "koivunen": 82, "chakhchoukh": 82, "muma": 82, "tutori": [82, 138, 139, 140, 188, 201, 217, 260, 379, 380, 385, 387, 392, 401, 407, 450, 460, 689, 1002, 1019, 1030], "treatment": [82, 168, 373, 412, 467, 472], "concept": [82, 118, 123, 235, 269, 379, 391, 406, 407, 413, 415, 979, 987, 990, 1003, 1011], "magazin": [82, 416], "font_manag": [82, 289, 337], "range_n_outli": 82, "err_loc_mcd": 82, "err_cov_mcd": 82, "err_loc_emp_ful": 82, "err_cov_emp_ful": 82, "err_loc_emp_pur": 82, "err_cov_emp_pur": 82, "outliers_index": 82, "outliers_offset": 82, "inliers_mask": 82, "pure_x": 82, "pure_loc": 82, "pure_emp_cov": 82, "font_prop": 82, "fontproperti": [82, 289, 337], "hat": [82, 105, 256, 260, 288, 318, 377, 405, 409, 413, 414, 978, 983, 984, 987, 989, 991], "_2": [82, 156, 342, 412, 415, 529, 535, 543, 544, 644, 650, 983, 991, 1001, 1002], "x_size": 82, "244": [82, 84, 278, 582, 1008], "plot_robust_vs_empirical_covari": [82, 84, 1008], "graphicallasso": [83, 409, 467, 468, 470, 471, 472, 473, 474, 476, 1035, 1043], "largest": [83, 98, 118, 148, 201, 376, 407, 409, 412, 441, 525, 539, 555, 556, 557, 558, 562, 563, 586, 707, 794, 795, 815, 837, 869, 907, 908, 909, 910, 936, 984, 987, 997, 1002, 1003], "invert": [83, 101, 145, 221, 352, 353, 391, 409, 415, 628, 687, 691, 997, 1036], "fairli": [83, 124, 222, 275, 300, 387, 407, 557, 558, 697, 988, 1019], "tweak": [83, 235, 411, 953, 986, 1021, 1038], "readabl": [83, 261, 318, 384, 385, 387, 401, 532, 1036, 1039, 1040, 1041, 1042], "make_sparse_spd_matrix": [83, 476, 527, 1044], "prng": [83, 1020], "prec": [83, 229, 525, 987], "smallest_coef": [83, 525], "largest_coef": [83, 525], "multivariate_norm": [83, 87, 245, 420, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479], "ledoit_wolf": [83, 409, 1040], "prec_": 83, "lw_cov_": 83, "lw_prec_": 83, "this_cov": 83, "this_prec": 83, "ma": [83, 311, 338, 983, 1033, 1038], "masked_equ": 83, "set_facecolor": [83, 245], "set_axis_bgcolor": 83, "plot_sparse_cov": [83, 84, 1008], "486": [84, 201], "cross_decomposit": [85, 86, 87, 88, 166, 236, 1008, 1031, 1032, 1034, 1035, 1036], "plscanon": [86, 480, 482, 483, 1009, 1023, 1031, 1035, 1037, 1039, 1041], "plsregress": [86, 87, 1009, 1023, 1034, 1037, 1039, 1041, 1043], "appar": [86, 989, 1011], "scatterplot": [86, 178, 260], "maxim": [86, 87, 91, 96, 106, 125, 178, 250, 251, 261, 265, 269, 270, 293, 310, 317, 338, 342, 356, 360, 376, 393, 404, 407, 410, 412, 416, 417, 547, 592, 608, 609, 642, 643, 646, 667, 677, 678, 718, 796, 799, 800, 810, 868, 874, 884, 981, 983, 986, 987, 990, 992, 1002, 1016, 1019, 1030, 1032, 1037, 1040, 1042], "weak": [86, 123, 126, 203, 217, 266, 411, 555, 556, 557, 562, 563, 564, 628, 990, 1011, 1043], "var": [86, 87, 115, 148, 179, 260, 376, 380, 416, 639, 643, 901, 902, 903, 904, 905, 987, 1035], "corr": [86, 172, 260], "corrcoef": [86, 106], "plsca": [86, 481], "x_train_r": 86, "y_train_r": 86, "x_test_r": 86, "y_test_r": 86, "221": [86, 130, 1030], "222": [86, 130, 1002], "223": [86, 130, 148, 376], "yj": [86, 309], "noiz": 86, "xb": [86, 878], "95213778": 86, "10988205": 86, "08029173": 86, "80414253": 86, "81422502": 86, "83199463": 86, "92896897": 86, "76438188": 86, "8798454": 86, "47804127": 86, "59007842": 86, "58442585": 86, "73908648": 86, "87282488": 86, "85481267": 86, "16714557": 86, "99951652": 86, "09671339": 86, "exce": [86, 281, 316, 417, 440, 513, 600, 647, 656, 1036, 1039, 1041], "233": [86, 88, 328, 331, 1008], "plot_compare_cross_decomposit": [86, 88, 1008], "multilabel": [86, 89, 94, 166, 227, 243, 267, 278, 280, 282, 328, 374, 381, 382, 393, 402, 480, 485, 494, 495, 506, 507, 513, 521, 539, 555, 562, 565, 656, 672, 673, 701, 705, 711, 723, 726, 727, 731, 732, 735, 736, 751, 753, 780, 781, 784, 785, 791, 793, 825, 828, 830, 832, 856, 863, 866, 870, 872, 883, 904, 907, 909, 925, 949, 950, 951, 998, 1008, 1009, 1021, 1023, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1040, 1041, 1042, 1043, 1044], "pcr": [87, 410], "pl": [87, 203, 322, 376, 410, 480, 481, 482, 483, 1032], "greedili": [87, 148, 407, 411, 416, 458], "despit": [87, 197, 199, 217, 234, 292, 393, 398, 409, 625, 626, 628, 983, 990, 1011, 1035, 1036], "suffer": [87, 120, 171, 283, 305, 352, 366, 407, 414, 542, 760, 982, 983, 987, 990, 1020, 1036], "dive": [87, 379, 385], "explained_variance_": [87, 532, 539, 542, 1020, 1034], "onto": [87, 221, 222, 233, 305, 391, 412, 415, 419, 444, 446, 459, 531, 537, 541, 625, 626, 628, 686, 981, 985, 990], "recommend": [87, 120, 163, 216, 229, 235, 256, 269, 309, 317, 342, 366, 367, 373, 377, 379, 381, 385, 387, 391, 397, 410, 411, 412, 414, 416, 436, 445, 447, 449, 458, 494, 506, 533, 536, 542, 547, 559, 560, 567, 580, 581, 587, 604, 609, 629, 630, 636, 668, 674, 690, 695, 696, 698, 700, 802, 808, 810, 818, 855, 862, 864, 871, 878, 879, 884, 885, 887, 888, 889, 890, 892, 901, 904, 936, 955, 976, 984, 987, 989, 991, 994, 997, 999, 1001, 1002, 1003, 1005, 1011, 1023, 1029, 1030, 1036, 1037, 1038, 1039, 1041, 1043], "linearregress": [87, 135, 168, 178, 189, 194, 195, 196, 197, 202, 205, 216, 231, 235, 237, 256, 274, 306, 362, 379, 391, 392, 408, 414, 463, 568, 630, 633, 644, 647, 650, 652, 669, 670, 685, 983, 987, 997, 1019, 1031, 1032, 1036, 1039, 1040, 1041, 1043], "retriev": [87, 169, 203, 267, 352, 360, 383, 393, 412, 415, 416, 466, 494, 588, 591, 592, 624, 651, 661, 682, 697, 723, 727, 729, 730, 753, 778, 834, 838, 871, 897, 983, 985, 987, 989, 1006, 1007, 1020, 1032, 1037, 1039, 1041, 1044], "026": 87, "predit": 87, "pca_2": 87, "673": [87, 183, 218, 352, 385, 1008], "581": [87, 88, 175, 1008], "plot_pcr_vs_pl": [87, 88, 1008], "814": [88, 171, 1019], "057": [90, 94, 385, 824, 1008], "plot_digits_last_imag": [90, 94, 1008], "iris": [91, 266, 267, 1018], "150x4": 91, "legend_el": [91, 128, 212, 263, 286, 342], "flower": [91, 104, 269, 504, 505, 987, 1006], "versicolor": [91, 269, 270, 502], "differenti": [91, 267, 414, 417, 557, 558, 617, 620], "unus": [91, 102, 170, 196, 220, 222, 461, 577, 760, 768, 976, 984, 1027, 1035, 1037, 1038, 1040, 1042], "3rd": [91, 159, 834, 877, 989, 997], "eigenvalu": [91, 250, 322, 404, 407, 409, 450, 460, 467, 468, 469, 470, 471, 472, 473, 474, 533, 539, 547, 671, 686, 687, 689, 691, 693, 865, 979, 984, 997, 1029, 1033, 1036, 1037, 1038, 1039], "218": [91, 94, 376, 469, 713, 783, 1008], "plot_iris_dataset": [91, 94, 1008], "easi": [92, 170, 207, 217, 248, 258, 260, 338, 351, 362, 374, 385, 387, 391, 392, 407, 414, 498, 502, 508, 866, 976, 982, 986, 994, 997, 1006, 1007, 1011, 1021, 1037, 1042, 1043], "make_gaussian_quantil": [92, 112, 114, 375, 468, 472, 473, 474, 479, 518], "321": 92, "323": [92, 232], "y2": [92, 114, 714, 988], "324": [92, 374], "325": 92, "357": [92, 94, 148, 263, 276, 376, 498, 900, 1008], "plot_random_dataset": [92, 94, 1008], "make_multilabel_classif": [93, 236, 375, 513, 534, 785, 830, 831, 987, 1029, 1030, 1032, 1038], "degener": [93, 246, 419, 438, 452, 531, 718, 983, 987, 1036, 1040, 1041], "vocabulari": [93, 214, 351, 352, 391, 415, 586, 587, 588, 589, 989, 1012, 1021, 1027, 1029, 1032, 1035, 1038, 1040], "353": [93, 352, 1021], "w0": 93, "w1": [93, 414, 655], "make_ml_clf": 93, "ff3333": 93, "0198e1": 93, "bf5fff": 93, "fcd116": 93, "ff7216": 93, "4dbd33": 93, "87421f": 93, "plot_2d": [93, 220], "p_c": [93, 521], "p_w_c": [93, 521], "allow_unlabel": [93, 236, 521], "return_distribut": [93, 521], "sep": [93, 269], "p_w": 93, "151": [93, 94, 154, 161, 320, 385, 414, 499, 999, 1008], "plot_random_multilabel_dataset": [93, 94, 1008], "783": 94, "blind": [95, 98, 107, 166, 198, 351, 412, 531, 539, 1008], "fastica": [95, 107, 166, 198, 412, 530, 533, 539, 1008, 1020, 1027, 1029, 1035, 1041, 1042], "precomput": [95, 96, 97, 107, 166, 177, 198, 218, 223, 235, 283, 285, 295, 381, 388, 391, 393, 407, 415, 418, 430, 438, 439, 442, 443, 444, 448, 450, 455, 463, 469, 480, 481, 482, 522, 529, 533, 535, 538, 540, 546, 552, 554, 556, 558, 560, 563, 566, 568, 608, 609, 618, 633, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 658, 659, 660, 661, 662, 663, 665, 668, 670, 671, 676, 677, 679, 680, 682, 683, 686, 688, 689, 690, 694, 771, 775, 778, 789, 790, 832, 833, 841, 842, 843, 845, 846, 847, 849, 850, 851, 857, 900, 901, 902, 903, 904, 905, 908, 910, 963, 964, 965, 979, 985, 990, 1002, 1007, 1008, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1037, 1038, 1040, 1041, 1042, 1043, 1044], "olivetti": [96, 120, 372, 412, 493, 1023, 1027, 1035], "chapter": [96, 362, 381, 407, 412, 414, 417, 528, 530, 532, 612, 617, 620, 641, 977, 980, 983, 1002, 1003], "decompos": [96, 100, 115, 307, 406, 532, 536, 707, 820, 936, 982, 983, 987, 1004, 1022, 1023], "basicconfig": 96, "asctim": 96, "levelnam": 96, "faces_cent": 96, "image_shap": [96, 237], "constrained_layout": [96, 170, 220, 311, 312, 320], "set_constrained_layout_pad": 96, "w_pad": [96, 121, 357], "h_pad": [96, 121, 357], "set_edgecolor": 96, "vec": [96, 415, 536, 538, 545], "im": [96, 106, 271, 287], "pad": [96, 121, 163, 170, 220, 238, 351, 357, 415, 586, 587, 589], "initialis": [96, 536, 538, 545, 1027, 1035, 1036], "mathbb": [96, 115, 154, 410, 987, 994, 1002], "4096": [96, 374, 412, 493], "human": [96, 170, 351, 401, 407, 412, 856, 857, 987, 994, 1036], "friendli": [96, 367, 379, 387, 412, 892, 999, 1000, 1006, 1007], "visualis": [96, 99, 106, 236, 542, 797, 798, 801, 813, 814, 815, 816, 817, 990, 1007], "64x64": [96, 374, 412], "singular": [96, 388, 404, 407, 410, 449, 451, 480, 481, 482, 483, 519, 522, 532, 536, 538, 539, 542, 545, 547, 548, 655, 670, 671, 672, 685, 936, 983, 984, 986, 1022, 1023, 1033, 1034], "scalar": [96, 318, 385, 393, 408, 417, 419, 462, 465, 522, 531, 613, 614, 615, 620, 621, 625, 626, 628, 735, 739, 915, 923, 979, 991, 993, 997, 1001, 1006, 1037, 1038, 1041, 1043], "noise_variance_": [96, 187, 530, 532, 539, 654, 1034, 1041], "pixelwis": 96, "pca_estim": 96, "nmf_estim": 96, "multivari": [96, 169, 371, 409, 412, 415, 471, 514, 515, 516, 625, 626, 627, 628, 647, 669, 676, 677, 834, 835, 836, 837, 838, 981, 983, 986, 989, 1006, 1012, 1020, 1023], "subcompon": [96, 412], "ica_estim": 96, "15e": 96, "sparsepca": [96, 529, 531, 532, 533, 535, 537, 538, 539, 540, 543, 544, 1027, 1034, 1035, 1037, 1038, 1040, 1041, 1042], "batch_pca_estim": 96, "minibatchdictionarylearn": [96, 99, 368, 412, 529, 536, 540, 543, 544, 1028, 1030, 1037, 1038, 1040, 1041, 1042, 1043, 1044], "batch_dict_estim": 96, "enhanc": [96, 203, 378, 379, 383, 391, 393, 407, 987, 1025, 1026, 1027, 1028, 1029, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "consum": [96, 362, 373, 381, 393, 398, 407, 411, 414, 447, 799, 800, 859, 860, 943, 944, 983, 1011, 1032, 1044], "kmeans_estim": 96, "factoranalysi": [96, 103, 106, 412, 542, 1028, 1030, 1039, 1041], "heteroscedast": [96, 103, 125, 201, 412, 875, 887], "fa_estim": 96, "wrap": [96, 117, 125, 283, 373, 381, 393, 431, 506, 583, 584, 655, 674, 825, 883, 977, 987, 990, 1002, 1006, 1027, 1032, 1035, 1037, 1038, 1040, 1042], "colormap": [96, 114, 159, 191, 208, 338, 343, 357, 695, 1040], "uv": [96, 412], "x_1": [96, 143, 154, 196, 200, 410, 412, 414, 417, 611, 623, 655, 872, 899, 900, 983, 989, 991, 997, 1001], "x_n": [96, 412, 899, 900, 989, 991, 1001], "dict_pos_dict_estim": 96, "positive_dict": [96, 529, 535, 543, 544], "dict_pos_code_estim": 96, "fit_algorithm": [96, 529, 535, 1042, 1043], "cd": [96, 148, 376, 377, 379, 383, 385, 412, 469, 470, 476, 529, 535, 537, 538, 541, 543, 544, 545, 983, 1021, 1032, 1042], "positive_cod": [96, 529, 535, 540, 543, 544], "dict_pos_estim": 96, "427": [96, 107, 148, 376, 504, 505, 581, 582, 1008], "plot_faces_decomposit": [96, 107, 1008], "imagin": [97, 151, 235, 342, 411, 412, 415, 983], "plai": [97, 126, 153, 182, 208, 254, 294, 334, 335, 366, 1021], "microphon": 97, "s1": [97, 148, 159, 187, 188, 376, 1020], "sinusoid": [97, 113, 125, 183, 234, 980, 1020], "s2": [97, 148, 159, 187, 188, 376, 548, 1020], "sawtooth": [97, 1020], "saw": [97, 200, 203, 1020], "tooth": [97, 1020], "s_": [97, 264, 984, 995, 997, 1020], "a_": [97, 404, 407, 536, 538, 545, 983, 1020], "mixing_": [97, 98, 531, 1020], "prove": [97, 1011], "revert": [97, 628, 630, 631, 1034, 1039, 1044], "unmix": [97, 419, 531], "allclos": [97, 129, 999, 1020], "mean_": [97, 264, 530, 531, 532, 537, 539, 541, 879, 997, 1020, 1035], "steelblu": [97, 98, 134], "sig": 97, "plot_ica_blind_source_separ": [97, 107, 1008], "gpr": [97, 150, 151, 152, 158, 159, 160, 161, 166, 494, 608, 609, 611, 612, 613, 614, 619, 620, 621, 622, 623, 1008, 1009, 1023, 1037], "ica": [98, 406, 419, 1003, 1022, 1023], "geometr": [98, 407, 686, 702, 728, 754, 984, 1035], "standard_t": 98, "s_pca_": 98, "s_ica_": 98, "plot_sampl": [98, 251], "axis_list": 98, "x_axi": [98, 207, 264], "y_axi": [98, 207], "quiver": 98, "hline": 98, "set_zord": 98, "438": [98, 107, 169, 995, 1008], "plot_ica_vs_pca": [98, 107, 1008], "ordinari": [98, 115, 166, 177, 178, 181, 183, 189, 195, 201, 202, 204, 216, 218, 318, 633, 644, 650, 652, 653, 654, 655, 670, 676, 680, 681, 685, 1001, 1008, 1009, 1023], "firstli": [99, 366, 391, 655, 1021], "undistort": 99, "noiseless": [99, 985], "omp": [99, 105, 198, 412, 529, 535, 540, 546, 662, 663, 683, 684, 1009, 1023, 1027, 1035], "promin": [99, 393], "reminisc": 99, "downsampl": 99, "075": 99, "show_with_diff": 99, "puor": 99, "22692": 99, "dico": 99, "n_steps_": [99, 447, 535, 536, 1040], "reconstruct_from_patches_2d": [99, 415, 581], "intercept": [99, 191, 208, 216, 347, 393, 480, 481, 482, 547, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 685, 874, 878, 881, 899, 900, 906, 983, 985, 987, 992, 1001, 1002, 1030, 1032, 1036, 1037], "transform_algorithm": [99, 105, 529, 535, 540, 1043], "n1": 99, "atom": [99, 105, 412, 529, 535, 537, 540, 541, 543, 544, 651, 661, 682, 983, 1027, 1040], "transform_n_nonzero_coef": [99, 105, 529, 535, 540], "n2": 99, "n4": 99, "transform_alpha": [99, 105, 529, 535, 540, 1040], "set_param": [99, 106, 116, 122, 125, 170, 171, 179, 187, 188, 192, 203, 207, 233, 238, 273, 286, 315, 341, 352, 382, 393, 407, 408, 414, 417, 421, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 462, 463, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 686, 687, 688, 689, 690, 794, 795, 796, 799, 800, 810, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 858, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 891, 892, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 977, 993, 1012, 1019, 1020, 1027, 1033, 1034, 1035, 1040, 1041], "plot_image_denois": [99, 107, 1008], "ipca": [100, 531, 532], "flip": [100, 580, 739, 936, 989, 1031, 1040], "incrementalpca": [100, 368, 412, 531, 533, 537, 539, 542, 1031, 1034, 1035, 1037, 1038, 1041], "x_ipca": 100, "x_pca": 100, "turquois": [100, 104, 105, 127, 205, 216, 223, 247, 248, 267], "x_transform": [100, 130, 235, 483, 529, 530, 531, 532, 533, 535, 537, 541, 564, 636, 637, 686, 687, 688, 689], "nmean": 100, "shadow": [100, 104, 105, 223, 327, 345, 353, 415], "scatterpoint": [100, 104, 223, 247, 327], "plot_incremental_pca": [100, 107, 1008], "nest": [101, 112, 138, 166, 188, 235, 253, 255, 276, 278, 322, 367, 385, 393, 397, 407, 411, 417, 421, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 454, 460, 463, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 502, 517, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 579, 580, 581, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 686, 687, 688, 689, 690, 794, 795, 796, 799, 800, 801, 810, 821, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 891, 892, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 976, 987, 990, 1008, 1027, 1028, 1031, 1033, 1034, 1035, 1041], "train_ax": 101, "test_ax": 101, "straight": [101, 189, 195, 197, 257, 342, 366], "inner": [101, 125, 261, 265, 281, 327, 366, 415, 441, 512, 580, 587, 616, 646, 667, 678, 772, 774, 979, 987, 997, 1002, 1028, 1031, 1041, 1044], "x_test_kernel_pca": 101, "orig_data_ax": 101, "pca_proj_ax": 101, "kernel_pca_proj_ax": 101, "unfold": [101, 382, 984], "untangl": 101, "mind": [101, 168, 169, 170, 217, 309, 310, 351, 352, 362, 379, 401, 409, 411, 414, 644, 645, 702, 983, 1002, 1006, 1012, 1019], "investig": [101, 106, 112, 164, 346, 379, 983], "pca_back_proj_ax": 101, "kernel_pca_back_proj_ax": 101, "reli": [101, 118, 122, 148, 172, 187, 188, 278, 283, 316, 320, 351, 366, 367, 381, 384, 387, 388, 391, 393, 403, 404, 407, 412, 414, 415, 547, 583, 584, 591, 595, 605, 606, 823, 826, 864, 953, 976, 979, 981, 983, 987, 990, 995, 997, 1002, 1011, 1035, 1036, 1037, 1041, 1043, 1044], "analyt": [101, 412, 417, 530, 618, 706, 977, 981, 987, 1005, 1011], "kernelridg": [101, 151, 234, 670, 980, 1031, 1044], "kernal": 101, "relianc": [101, 203], "676": [101, 107, 667, 1008], "plot_kernel_pca": [101, 107, 1008], "cla": 102, "094": [102, 107, 470, 1008], "plot_pca_iri": [102, 107, 1008], "homoscedast": [103, 231, 309, 987, 1035], "succe": [103, 183], "subspac": [103, 410, 414, 450, 513, 553, 554, 689, 693, 936, 981, 990, 993, 999, 1011, 1020], "overestim": [103, 362, 411], "circumst": [103, 217, 990, 1006], "nip": [103, 376, 513, 539, 564, 639, 987], "604": [103, 539], "minka": [103, 539, 983], "deni": [103, 1029, 1030, 1034, 1035, 1036, 1042, 1043], "engemann": [103, 1029, 1030, 1034], "x_homo": 103, "x_hetero": 103, "pca_scor": 103, "fa_scor": 103, "shrunk_cov_scor": 103, "lw_score": 103, "n_components_pca": 103, "n_components_fa": 103, "n_components_pca_ml": 103, "axhlin": [103, 138, 189, 259, 263], "violet": [103, 1043], "791": [103, 107, 160, 1008], "plot_pca_vs_fa_model_select": [103, 107, 1008], "92461872": 104, "05306648": 104, "x_r": [104, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601], "x_r2": 104, "229": [104, 107, 987, 1008], "plot_pca_vs_lda": [104, 107, 1008], "ricker": 105, "sparsecod": [105, 412, 529, 535, 538, 546, 1034, 1035, 1037, 1039, 1041], "mexican": 105, "piecewis": [105, 318, 404, 978, 983, 997, 1003], "matter": [105, 251, 342, 362, 407, 408, 414, 565, 666, 674, 676, 983, 1031], "motiv": [105, 379, 381, 393, 979, 987, 997, 1011, 1040], "heavier": [105, 409, 983], "ricker_funct": 105, "ricker_matrix": 105, "d_fix": 105, "d_multi": 105, "first_quart": 105, "transform_n_nozero_coef": 105, "lasso_lar": [105, 529, 535, 540, 546, 1037], "n_nonzero": 105, "coder": [105, 540, 714], "flatnonzero": [105, 187, 259, 268, 269, 778], "soft": [105, 133, 134, 379, 393, 567, 568, 895, 903, 1001, 1011, 1032], "debias": 105, "lstsq": [105, 379, 655, 668], "rcond": 105, "312": [105, 107, 1008, 1030], "plot_sparse_cod": [105, 107, 1008], "uncov": [106, 693], "inher": [106, 194, 362, 407, 412, 977, 979, 981, 982, 984, 988], "varimax": [106, 412, 530, 1039], "jona": [106, 1039, 1044], "sassenhagen": [106, 1039, 1044], "set_yticklabel": [106, 154, 163, 164, 172, 271, 353], "n_comp": [106, 175], "unrot": 106, "52106591": 106, "37741762": 106, "26934744": 106, "92329566": 106, "5804131": 106, "02449161": 106, "56485654": 106, "06694199": 106, "88096009": 106, "4472869": 106, "41691605": 106, "55390036": 106, "99918858": 106, "01915283": 106, "96228895": 106, "05840206": 106, "98633022": 106, "05752333": 106, "16052385": 106, "67443065": 106, "90809432": 106, "41726413": 106, "85857475": 106, "43847489": 106, "454": [106, 107, 1008], "plot_varimax_fa": [106, 107, 1008], "043": [107, 151, 385], "custom": [108, 145, 147, 166, 182, 208, 229, 239, 253, 259, 261, 264, 267, 268, 272, 276, 285, 290, 294, 315, 333, 335, 336, 338, 339, 341, 349, 351, 353, 371, 374, 377, 381, 386, 387, 388, 391, 392, 393, 406, 407, 408, 411, 417, 466, 487, 491, 492, 500, 502, 536, 538, 545, 547, 555, 556, 562, 563, 569, 571, 600, 628, 629, 688, 697, 711, 796, 825, 863, 897, 904, 971, 976, 981, 987, 990, 1006, 1007, 1008, 1011, 1021, 1023, 1027, 1031, 1032, 1034, 1035, 1037, 1038, 1039, 1042, 1043, 1044, 1045], "developing_estim": [109, 1008], "sklearn_is_fit": [109, 110, 1008], "convent": [110, 260, 379, 381, 382, 383, 385, 393, 425, 426, 429, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 467, 468, 469, 470, 471, 472, 473, 474, 506, 507, 529, 531, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 545, 561, 564, 567, 568, 579, 580, 581, 586, 587, 589, 625, 626, 627, 628, 675, 686, 687, 688, 689, 716, 794, 795, 827, 828, 843, 845, 847, 851, 863, 871, 874, 875, 877, 880, 891, 892, 903, 930, 931, 987, 1013, 1027, 1034, 1035, 1038, 1040, 1041, 1043, 1044], "subclass": [110, 381, 417, 572, 953, 1032, 1035, 1040, 1044], "showcas": [110, 381], "statu": [110, 160, 322, 373, 383, 397, 494, 839, 840], "_is_fit": 110, "snippet": [110, 362, 379, 384, 387, 391, 403, 414, 415, 416, 977, 997, 1010, 1040], "customestim": 110, "classifiermixin": [110, 235, 379, 381, 393, 411, 1038], "kushan": [110, 1044], "kushansharma1": 110, "classes_": [110, 191, 208, 229, 235, 269, 325, 326, 379, 381, 393, 432, 435, 436, 547, 548, 549, 551, 553, 555, 557, 559, 562, 565, 567, 591, 592, 608, 629, 656, 657, 664, 666, 672, 673, 674, 695, 698, 700, 785, 796, 799, 800, 810, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 841, 846, 849, 856, 859, 866, 867, 870, 880, 894, 895, 896, 899, 901, 904, 907, 909, 912, 987, 998, 1001, 1028, 1031, 1032, 1034, 1037, 1039], "track": [110, 116, 124, 326, 379, 382, 383, 403, 532, 956, 988, 1006, 1007, 1034, 1037], "notfittederror": [110, 393, 848, 971, 1031, 1033, 1036, 1037, 1043, 1044], "logic": [110, 367, 380, 381, 386, 403, 414, 1003, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "boolean": [110, 360, 374, 379, 381, 388, 408, 414, 415, 416, 462, 559, 560, 579, 580, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 605, 606, 627, 630, 631, 634, 647, 669, 697, 828, 834, 855, 862, 882, 915, 971, 977, 983, 989, 994, 997, 1003, 1027, 1030, 1032, 1033, 1034, 1036, 1037, 1038, 1040, 1041, 1042], "isolationforest": [111, 114, 136, 166, 202, 228, 238, 275, 305, 629, 825, 903, 993, 1008, 1033, 1034, 1035, 1036, 1038, 1040, 1041, 1042, 1043, 1044], "oob": [111, 112, 124, 136, 166, 414, 513, 562, 1007, 1008, 1029, 1040, 1044], "vote": [111, 118, 125, 131, 132, 133, 134, 136, 166, 195, 281, 342, 393, 394, 406, 499, 553, 554, 555, 558, 562, 563, 567, 568, 655, 827, 841, 842, 847, 849, 988, 990, 1008, 1009, 1019, 1023, 1027, 1030, 1032, 1037], "experi": [112, 154, 158, 168, 169, 170, 171, 175, 201, 278, 310, 346, 352, 353, 367, 373, 379, 382, 406, 411, 513, 725, 782, 983, 988, 999, 1005, 1006, 1011, 1019, 1021], "depict": [112, 262, 414, 986], "zhu": [112, 414, 517, 551, 656, 894], "principl": [112, 158, 288, 353, 379, 391, 393, 394, 411, 414, 936, 976, 986, 990, 1001, 1034], "repeatedli": [112, 319, 362, 393, 407, 414, 417, 506, 544, 664, 665, 674, 675, 676, 778, 977, 991, 1016], "zou": [112, 187, 414, 517, 551, 654, 983, 1001], "rosset": [112, 414, 517, 551], "hasti": [112, 115, 116, 127, 148, 187, 259, 376, 411, 414, 517, 518, 551, 557, 558, 626, 654, 719, 720, 721, 829, 846, 892, 907, 908, 977, 981, 983, 988, 994, 999, 1001, 1003], "2009": [112, 115, 116, 127, 183, 407, 411, 412, 414, 415, 517, 518, 526, 529, 535, 536, 538, 539, 542, 545, 551, 557, 558, 633, 669, 677, 694, 830, 907, 908, 935, 936, 983, 987, 988, 994, 1003], "349": [112, 385, 551], "360": [112, 352, 551], "sphere": [112, 166, 219, 220, 223, 224, 225, 226, 283, 352, 413, 517, 587, 686, 687, 688, 689, 690, 761, 922, 981, 985, 990, 1008], "roughli": [112, 125, 188, 251, 270, 283, 310, 366, 393, 412, 415, 517, 984, 1027], "2_000": 112, "percent": [112, 490, 598, 1000], "predecessor": [112, 448, 453, 454, 455, 1044], "mistak": [112, 145, 326, 362, 407, 411, 732, 870, 884, 885, 887, 888, 889, 890, 983, 988], "incorrect": [112, 168, 267, 328, 362, 379, 407, 605, 606, 630, 631, 731, 1027, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040], "consecut": [112, 123, 200, 391, 405, 411, 415, 441, 445, 447, 448, 450, 454, 457, 460, 535, 536, 537, 544, 600, 643, 664, 665, 666, 674, 675, 676, 794, 795, 801, 834, 835, 836, 837, 838, 856, 857, 976, 997, 1021, 1035], "weak_learn": 112, "max_leaf_nod": [112, 118, 127, 199, 318, 360, 414, 555, 556, 557, 558, 559, 560, 562, 563, 564, 907, 908, 909, 910, 1030, 1036, 1038], "adaboost_clf": 112, "misclassification_error": 112, "dummyclassifi": [112, 263, 550, 729, 987, 1028, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1045], "preval": [112, 315, 393, 698, 710, 987], "dummi": [112, 113, 199, 217, 235, 263, 381, 384, 402, 729, 872, 881, 997, 1003, 1023, 1028, 1030, 1031, 1032, 1034], "dummy_clf": [112, 549], "weak_learners_misclassification_error": 112, "dummy_classifiers_misclassification_error": 112, "475": 112, "692": [112, 288, 297, 1008], "surpass": [112, 342, 856, 857], "staged_predict": [112, 123, 126, 414, 551, 552, 557, 558, 559, 560, 1027, 1039], "conclud": [112, 169, 179, 217, 260, 353, 362, 394, 859], "boosting_error": 112, "missclassif": 112, "jitter": [112, 648, 652, 1038], "stagewis": 112, "estimator_errors_": [112, 551, 552], "estimator_weights_": [112, 551, 552], "weak_learners_info": 112, "layout": [112, 305, 391, 899, 900, 901, 904, 920, 1002, 1030, 1032, 1044], "get_figur": 112, "reweight": [112, 352, 393, 409, 414, 588, 589, 646, 667, 678], "formul": [112, 151, 160, 203, 269, 379, 409, 412, 415, 417, 420, 473, 547, 548, 555, 562, 648, 649, 652, 653, 654, 656, 657, 663, 668, 760, 766, 795, 901, 904, 907, 909, 983, 987, 988, 997, 1009, 1023, 1044], "mathemat": [112, 169, 187, 216, 263, 371, 376, 379, 393, 396, 409, 412, 413, 417, 547, 548, 555, 562, 633, 644, 654, 789, 790, 795, 857, 901, 904, 907, 909, 983, 987, 997, 999, 1009, 1011, 1019, 1023, 1041], "th": [112, 238, 318, 360, 392, 407, 411, 414, 422, 439, 443, 449, 451, 457, 461, 470, 555, 556, 557, 558, 559, 560, 562, 563, 564, 591, 592, 630, 646, 647, 667, 669, 678, 694, 716, 777, 817, 880, 924, 977, 983, 987, 991, 994, 1001, 1002, 1042], "boil": [112, 382, 409], "forc": [112, 151, 184, 203, 283, 309, 351, 373, 377, 383, 402, 411, 414, 448, 455, 494, 604, 607, 644, 645, 650, 651, 655, 658, 659, 660, 661, 670, 671, 672, 679, 682, 685, 751, 775, 778, 839, 840, 841, 842, 843, 845, 847, 849, 850, 851, 901, 902, 903, 904, 905, 917, 919, 920, 997, 1023, 1032, 1035, 1036, 1037, 1039, 1040, 1041, 1043], "970": [112, 136, 1008], "plot_adaboost_multiclass": [112, 136, 1008], "1d": [113, 115, 166, 170, 200, 232, 284, 287, 296, 297, 310, 345, 358, 379, 386, 388, 392, 393, 408, 413, 462, 465, 615, 628, 631, 651, 655, 658, 661, 682, 701, 710, 711, 717, 726, 727, 731, 735, 739, 780, 781, 784, 793, 841, 842, 843, 844, 845, 847, 849, 850, 851, 864, 915, 919, 920, 950, 974, 988, 1008, 1012, 1019, 1027, 1032, 1033, 1034, 1036, 1040, 1041], "299": [113, 678], "drucker": [113, 414, 552], "1997": [113, 374, 412, 414, 533, 552, 688, 692, 983, 984, 987], "decisiontreeregressor": [113, 115, 239, 306, 315, 321, 358, 359, 384, 552, 554, 556, 557, 558, 560, 562, 563, 630, 631, 907, 910, 912, 931, 977, 1003, 1028, 1029, 1032, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "adaboostregressor": [113, 398, 414, 551, 560, 928, 1029, 1030, 1033, 1036, 1037, 1040, 1042, 1043], "regr_1": [113, 358, 359], "regr_2": [113, 358, 359], "y_1": [113, 358, 359, 410, 987, 991, 1001], "y_2": [113, 358, 359, 991], "589": [113, 136, 1008], "plot_adaboost_regress": [113, 136, 1008], "stump": [114, 414, 557, 1038], "puriti": [114, 911, 913], "circleci": [114, 155, 157, 159, 160, 191, 208, 246, 255, 302, 343, 357, 379], "plot_adaboost_twoclass": [114, 136, 1008], "bdt": 114, "plot_color": [114, 357], "br": 114, "plot_step": [114, 121, 357], "class_nam": [114, 254, 880, 911, 912, 913, 1003, 1043], "xx0": [114, 629], "xx1": [114, 629], "twoclass_output": 114, "plot_rang": 114, "irreduc": [115, 987], "dark": [115, 169, 338, 374, 1044], "light": [115, 374], "beam": [115, 1027], "pointwis": [115, 158, 418, 442], "offset": [115, 175, 391, 409, 412, 467, 506, 507, 561, 630, 631, 639, 640, 642, 643, 675, 725, 772, 774, 845, 903, 987, 1001, 1019, 1035], "bootstrap": [115, 116, 124, 163, 263, 272, 317, 411, 414, 552, 553, 554, 555, 556, 561, 562, 563, 925, 958, 983, 1027, 1028, 1030, 1032, 1035, 1037, 1040], "stem": [115, 123, 171, 198, 251, 411, 415, 979, 989], "tibshirani": [115, 116, 127, 148, 187, 259, 376, 411, 414, 518, 557, 558, 626, 654, 719, 720, 721, 829, 846, 907, 908, 977, 981, 983, 988, 994, 1003], "friedman": [115, 116, 127, 259, 409, 411, 414, 476, 514, 515, 516, 518, 556, 557, 558, 563, 591, 592, 829, 907, 908, 910, 981, 983, 988, 994, 1003], "springer": [115, 116, 127, 259, 405, 407, 411, 412, 414, 518, 533, 557, 558, 688, 692, 694, 703, 718, 723, 737, 738, 753, 794, 907, 908, 984, 987, 988, 994, 1003], "0255": 115, "0003": 115, "0152": 115, "0098": 115, "0196": 115, "0004": [115, 310, 602], "0092": 115, "baggingregressor": [115, 398, 414, 553, 910, 977, 1030, 1033, 1035, 1038, 1042, 1043], "n_repeat": [115, 119, 126, 147, 169, 171, 172, 260, 278, 315, 411, 513, 632, 811, 812, 995], "knn": [115, 133, 139, 163, 286, 291, 292, 295, 310, 317, 327, 351, 414, 600, 848, 894, 895, 990, 1000, 1019, 1033], "y_predict": [115, 381, 1027], "y_error": [115, 205], "y_nois": 115, "y_bia": 115, "y_var": 115, "616": [115, 136, 836, 989, 997, 1008], "plot_bias_vari": [115, 136, 1008], "z_i": [116, 991], "y_i": [116, 318, 346, 405, 414, 978, 979, 983, 987, 991, 1001, 1002, 1003], "whilst": [116, 222], "practition": [116, 203], "suitabl": [116, 125, 183, 185, 203, 300, 353, 373, 374, 385, 388, 407, 412, 415, 450, 460, 466, 485, 503, 506, 625, 633, 834, 835, 838, 873, 874, 897, 952, 956, 981, 983, 986, 997, 999, 1001, 1006, 1021, 1041, 1042], "ed": [116, 127, 407, 414, 518, 557, 558, 999, 1027, 1034], "p592": 116, "593": 116, "kian": [116, 1032, 1042, 1043, 1044], "ho": [116, 414, 553, 554, 987, 1032, 1035, 1036, 1041], "hui": [116, 187, 536, 538, 545, 654, 983], "ordereddict": 116, "warm_start": [116, 155, 192, 318, 381, 385, 393, 414, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 608, 644, 646, 647, 650, 656, 658, 660, 664, 665, 666, 667, 674, 675, 676, 678, 794, 795, 848, 856, 857, 993, 1009, 1023, 1027, 1030, 1031, 1032, 1035, 1036, 1037, 1038, 1041, 1043], "disabl": [116, 312, 322, 351, 377, 379, 398, 415, 447, 458, 466, 535, 536, 537, 544, 557, 558, 559, 560, 858, 897, 919, 920, 997, 1033, 1036, 1040, 1042], "trajectori": 116, "ensemble_clf": 116, "oob_scor": [116, 414, 553, 554, 555, 556, 562, 563, 1032, 1034], "log2": [116, 209, 240, 555, 556, 557, 558, 562, 563, 907, 908, 909, 910, 988], "error_r": 116, "min_estim": 116, "max_estim": 116, "oob_error": 116, "oob_score_": [116, 553, 554, 555, 556, 557, 558, 562, 563, 1029, 1043], "clf_err": 116, "384": [116, 136, 694, 900, 1008], "plot_ensemble_oob": [116, 136, 1008], "betatim": [117, 131, 1042], "leak": [117, 265, 351, 362, 408, 411, 859, 884, 885, 887, 888, 889, 890, 997, 1027, 1034, 1037, 1043, 1044], "80_000": 117, "x_full_train": 117, "y_full_train": 117, "x_train_ensembl": 117, "x_train_linear": 117, "y_train_ensembl": 117, "y_train_linear": 117, "gradientboostingclassifi": [117, 124, 127, 307, 362, 391, 551, 559, 630, 631, 988, 994, 1027, 1028, 1029, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044], "random_forest": 117, "gradient_boost": [117, 1029, 1030, 1036], "histgradientboostingclassifi": [117, 118, 315, 316, 317, 318, 320, 322, 367, 557, 562, 630, 631, 977, 1006, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "randomtreesembed": [117, 130, 221, 414, 909, 1028, 1035, 1036, 1040, 1041, 1042], "random_tree_embed": 117, "rt_model": 117, "randomtreesembeddingrandomtreesembed": 117, "rf_appli": 117, "rf_leaves_yield": 117, "kw_arg": [117, 863, 997, 1033], "rf_model": 117, "0x7f58357a0430": 117, "functiontransformerfunctiontransform": 117, "gbdt_appli": 117, "gbdt_leaves_yield": 117, "gbdt_model": 117, "0x7f58351435e0": 117, "roccurvedisplai": [117, 238, 241, 257, 269, 270, 315, 386, 785, 786, 993, 1024, 1037, 1043, 1044, 1045], "rt": 117, "rf": [117, 118, 131, 134, 135, 171, 315, 362, 414, 565, 567, 568], "gbdt": [117, 170, 315, 316, 321, 384, 414], "model_displai": 117, "191": [117, 136, 148, 196, 218, 385, 988, 1008], "plot_feature_transform": [117, 136, 1008], "hgbt": [118, 414], "fetch_california_h": [118, 123, 163, 164, 305, 317, 374, 392, 408, 1036, 1038], "20640": [118, 164, 374, 488], "n_core": 118, "only_physical_cor": 118, "unnecessari": [118, 245, 384, 441, 644, 645, 650, 651, 658, 659, 660, 661, 679, 682, 703, 990, 997, 1007, 1011, 1030, 1032, 1037, 1038, 1040, 1043], "min_samples_leaf": [118, 124, 125, 171, 315, 318, 356, 414, 555, 556, 557, 558, 559, 560, 562, 563, 564, 907, 908, 909, 910, 1003, 1033], "early_stop": [118, 170, 207, 299, 318, 351, 393, 414, 559, 560, 664, 665, 666, 674, 675, 676, 856, 857, 1001, 1035, 1038, 1041, 1042], "return_train_scor": [118, 264, 311, 411, 796, 799, 800, 810, 822, 1033, 1034, 1036], "wast": [118, 385, 411, 412, 976], "plotli": [118, 261, 379, 397, 400], "cursor": [118, 261], "px": [118, 261], "make_subplot": 118, "shared_yax": 118, "subplot_titl": 118, "model_nam": [118, 238, 281], "colors_list": 118, "param_nam": [118, 261, 275, 321, 346, 398, 818, 826, 982, 1021], "param_": 118, "scatter_fig": 118, "mean_fit_tim": [118, 285, 796, 810], "error_x": [118, 261], "std_fit_tim": [118, 285, 796, 810], "error_i": [118, 261], "hover_data": [118, 261], "line_fig": 118, "scatter_trac": 118, "line_trac": 118, "add_trac": 118, "mean_score_tim": [118, 258, 261, 796, 810], "std_score_tim": [118, 261, 796, 810], "update_layout": [118, 261], "xaxis2": 118, "traceord": 118, "borderwidth": 118, "plateau": [118, 123, 147, 258, 262], "earlier": [118, 170, 203, 373, 379, 410, 830, 833, 997, 1025, 1028, 1040, 1042], "never": [118, 236, 362, 379, 388, 391, 401, 407, 408, 410, 411, 448, 455, 521, 553, 554, 555, 562, 859, 860, 979, 997, 1037, 1040], "hgbdt": 118, "domin": [118, 164, 172, 199, 204, 238, 269, 310, 374, 385, 405, 879, 989, 997, 1003, 1043], "ever": [118, 131, 388, 414, 1011], "disput": 118, "alwai": [118, 122, 125, 178, 199, 217, 225, 232, 263, 266, 270, 312, 335, 342, 346, 352, 362, 366, 367, 373, 377, 379, 380, 381, 385, 392, 393, 397, 405, 407, 408, 411, 414, 415, 416, 417, 424, 430, 441, 447, 462, 463, 465, 467, 480, 481, 482, 486, 494, 506, 507, 542, 547, 549, 550, 552, 554, 556, 557, 558, 559, 560, 562, 563, 566, 568, 579, 586, 587, 589, 592, 609, 625, 626, 628, 630, 631, 633, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 658, 659, 660, 661, 662, 663, 665, 668, 669, 670, 671, 674, 676, 677, 693, 703, 707, 713, 719, 720, 721, 729, 731, 732, 736, 779, 782, 783, 794, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806, 809, 810, 811, 812, 813, 814, 815, 816, 817, 832, 833, 842, 843, 850, 851, 857, 864, 872, 877, 879, 882, 884, 885, 886, 887, 888, 889, 890, 892, 900, 901, 902, 904, 905, 907, 908, 910, 937, 946, 947, 976, 977, 979, 981, 983, 986, 987, 990, 993, 995, 999, 1000, 1002, 1003, 1011, 1012, 1019, 1027, 1029, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1044], "thumb": [118, 175, 366, 379, 380, 391, 407, 656, 657, 664, 665, 666, 674, 675, 676, 899, 987], "512": [118, 136, 198, 214, 218, 1008], "plot_forest_hist_grad_boosting_comparison": [118, 136, 1008], "mdi": [118, 119, 126, 166, 167, 172, 173, 414, 462, 494, 562, 628, 632, 825, 859, 873, 995, 1008], "artifici": [119, 122, 129, 148, 164, 203, 220, 234, 302, 351, 374, 375, 376, 384, 404, 406, 407, 411, 412, 533, 694, 829, 856, 857, 980, 984, 986, 988, 994, 999, 1003, 1007, 1011, 1027], "feature_importances_": [119, 120, 126, 148, 171, 172, 393, 414, 416, 551, 552, 555, 556, 557, 558, 562, 563, 564, 591, 592, 595, 907, 908, 909, 910, 1029, 1032, 1036], "estimators_": [119, 121, 236, 315, 393, 551, 552, 553, 554, 555, 556, 557, 558, 561, 562, 563, 564, 565, 566, 567, 568, 827, 828, 829, 830, 831, 832, 833, 1028, 1034, 1041], "forest_import": 119, "overcom": [119, 203, 366, 415], "permutation_import": [119, 120, 126, 171, 172, 315, 414, 551, 552, 555, 556, 557, 558, 562, 563, 564, 907, 908, 909, 910, 995, 1037, 1039, 1040, 1044], "importances_mean": [119, 126, 171, 172, 315, 632, 995], "497": 119, "importances_std": [119, 632, 995], "omit": [119, 168, 169, 330, 384, 420, 473, 532, 664, 666, 674, 803, 805, 827, 828, 831, 834, 835, 836, 837, 838, 856, 985, 992], "plot_forest_import": [119, 136, 1008], "multicollinear": [119, 120, 148, 166, 167, 171, 173, 266, 328, 410, 498, 562, 632, 653, 825, 983, 995, 1008], "hotter": 120, "job": [120, 248, 379, 383, 387, 414, 418, 435, 442, 444, 446, 448, 450, 455, 456, 459, 462, 465, 466, 470, 529, 533, 534, 535, 537, 540, 541, 543, 544, 546, 553, 554, 555, 556, 561, 562, 563, 564, 565, 566, 567, 568, 600, 605, 606, 608, 632, 637, 655, 686, 687, 688, 689, 690, 691, 692, 771, 775, 778, 796, 799, 800, 802, 810, 818, 820, 821, 822, 823, 824, 826, 827, 828, 829, 831, 832, 841, 842, 843, 845, 847, 849, 850, 851, 852, 853, 858, 861, 894, 895, 897, 953, 1011, 1014], "five": [120, 246, 326, 329, 374, 529, 537, 543, 984, 990, 1002, 1011, 1027], "drawback": [120, 216, 979, 982], "img_shap": 120, "imp_reshap": 120, "met": [120, 235, 381, 416, 532, 539, 625, 669, 983, 987, 1035], "plot_forest_importances_fac": [120, 136, 1008], "fourth": [121, 1012], "descend": [121, 625, 1037], "extratreesclassifi": [121, 130, 414, 416, 556, 562, 564, 909, 910, 988, 1030, 1031, 1035, 1036, 1037, 1040, 1041, 1042, 1043, 1044], "decisiontre": [121, 1032], "consol": [121, 377, 1013], "extratre": [121, 130, 366, 1030], "9266666666666666": 121, "9933333333333333": 121, "9866666666666667": 121, "rdylbu": [121, 357], "plot_step_coars": 121, "plot_idx": 121, "model_titl": 121, "model_detail": 121, "blend": [121, 132, 311, 393, 411, 1006], "estimator_alpha": 121, "coarser": [121, 125], "regularli": [121, 278, 391, 989], "xx_coarser": 121, "yy_coars": 121, "z_points_coars": 121, "cs_point": 121, "784": [121, 136, 301, 1008], "plot_forest_iri": [121, 136, 1008], "ordinalencod": [122, 132, 170, 171, 199, 238, 311, 320, 373, 393, 579, 835, 867, 872, 880, 977, 989, 997, 1035, 1036, 1039, 1040, 1041, 1042, 1043, 1044], "equidist": [122, 690], "iowa": [122, 132, 238], "sale": [122, 238, 260, 987, 1011], "42165": 122, "categorical_columns_subset": 122, "bldgtype": 122, "garagefinish": 122, "lotconfig": 122, "masvnrtyp": [122, 132], "housestyl": [122, 132], "fireplacequ": 122, "extercond": 122, "exterqu": [122, 132], "poolqc": 122, "numerical_columns_subset": 122, "3ssnporch": 122, "fireplac": 122, "bsmthalfbath": 122, "halfbath": 122, "garagecar": [122, 132], "totrmsabvgrd": 122, "bsmtfinsf1": [122, 132], "bsmtfinsf2": 122, "grlivarea": 122, "screenporch": 122, "n_categorical_featur": [122, 559, 560, 630, 631], "n_numerical_featur": 122, "1460": [122, 132], "make_column_transform": [122, 132, 169, 230, 316, 408, 462, 464, 1035], "dropper": 122, "hist_drop": 122, "hist_one_hot": 122, "etc": [122, 199, 217, 255, 264, 265, 362, 366, 368, 379, 381, 383, 384, 391, 392, 393, 398, 404, 408, 411, 415, 487, 501, 525, 555, 556, 562, 563, 666, 674, 690, 716, 768, 796, 810, 830, 833, 863, 874, 907, 908, 909, 910, 911, 913, 919, 920, 930, 945, 976, 977, 981, 987, 990, 1006, 1007, 1011, 1027, 1034, 1036, 1037], "ordinal_encod": [122, 238], "use_encoded_valu": [122, 132, 171, 238, 311, 873, 997, 1039], "unknown_valu": [122, 132, 171, 238, 311, 873, 997, 1039, 1041, 1042], "verbose_feature_names_out": [122, 169, 170, 171, 242, 311, 318, 319, 320, 322, 408, 462, 465, 1040, 1044], "hist_ordin": 122, "hist_n": 122, "n_cv_fold": [122, 311, 802, 818, 823, 826], "dropped_result": 122, "one_hot_result": 122, "ordinal_result": 122, "native_result": 122, "figure_titl": 122, "plot_info": 122, "test_scor": [122, 124, 126, 207, 259, 262, 278, 311, 346, 356, 392, 411, 802, 818, 822, 823, 826], "y_limit": 122, "mape_cv_mean": 122, "mape_cv_std": 122, "c0": [122, 231, 311], "slowest": [122, 935, 936], "theori": [122, 234, 250, 346, 376, 406, 407, 411, 414, 688, 692, 723, 753, 891, 892, 936, 976, 983, 984, 986, 987, 988, 1002, 1003], "poorer": [122, 362, 412], "slight": [122, 204, 317, 414, 447, 1037], "acf": 122, "bde": 122, "isol": [122, 128, 228, 238, 352, 377, 379, 385, 397, 561, 845, 903, 1036, 1037], "bcde": 122, "histgradientboostingregressor__max_depth": 122, "histgradientboostingregressor__max_it": 122, "altogeth": [122, 385, 1035], "289": [122, 136, 169, 1008], "plot_gradient_boosting_categor": [122, 136, 1008], "asid": [123, 207, 401, 557, 558, 559, 560, 664, 665, 666, 674, 676, 856, 857], "validation_fract": [123, 207, 318, 414, 557, 558, 559, 560, 664, 665, 666, 674, 676, 856, 857, 1001, 1035, 1041], "monitor": [123, 183, 207, 382, 393, 551, 552, 557, 558, 559, 560, 991, 1030, 1035, 1037, 1039], "worsen": 123, "n_estimators_": [123, 557, 558], "valuabl": [123, 379, 977, 1011], "strike": [123, 170, 203], "california": [123, 159, 163, 164, 305, 311, 317, 372, 376, 488, 1023], "x_val": [123, 995], "y_val": [123, 995], "gbm_full": 123, "gbm_early_stop": 123, "training_time_ful": 123, "n_estimators_ful": 123, "training_time_early_stop": 123, "estimators_early_stop": 123, "train_errors_without": 123, "val_errors_without": 123, "train_errors_with": 123, "val_errors_with": 123, "train_pr": 123, "val_pr": 123, "set_yscal": [123, 199, 802], "training_tim": [123, 351], "plot_gradient_boosting_early_stop": [123, 136, 1008], "fly": [124, 384, 387, 506, 507, 580, 1027, 1029, 1036], "pessimist": [124, 414], "cumul": [124, 199, 217, 407, 723, 732, 753, 876, 888, 997, 1001, 1034, 1036, 1037], "demand": [124, 415, 796, 810, 820, 821], "6860": 124, "special": [124, 169, 189, 217, 278, 293, 311, 338, 373, 375, 381, 385, 391, 393, 407, 410, 412, 462, 465, 551, 553, 557, 820, 911, 976, 981, 983, 985, 986, 987, 988, 990, 1003, 1034, 1037, 1039, 1041], "expit": [124, 189, 414, 559, 983, 1034], "ridgewai": [124, 414], "gbm": [124, 414, 1030], "x3": [124, 408, 1020], "binomi": [124, 127, 414, 551, 557, 559, 983, 1041, 1044], "acc": 124, "heldout_scor": 124, "devianc": [124, 127, 199, 217, 321, 414, 551, 556, 557, 559, 560, 563, 646, 667, 678, 719, 720, 721, 744, 746, 749, 908, 910, 983, 1003, 1028, 1037, 1038, 1040, 1041, 1043], "y_proba": [124, 127, 310, 393, 859], "staged_predict_proba": [124, 127, 551, 557, 559, 1027], "cv_estim": 124, "cv_clf": 124, "val_scor": 124, "cv_score": 124, "cumsum": [124, 199, 217, 1034], "oob_improvement_": [124, 414, 557, 558, 1029], "oob_best_it": 124, "test_best_it": 124, "cv_best_it": 124, "brew": [124, 377, 397], "oob_color": 124, "174": [124, 294, 297, 302, 385, 582, 1008], "212": [124, 148, 247, 252, 265, 328, 376, 467, 498, 993, 1008, 1019], "test_color": 124, "127": [124, 234, 249, 252, 1008, 1027], "201": [124, 148, 376, 582], "cv_color": 124, "253": [124, 532], "192": [124, 330, 331, 385, 1008, 1027], "oob_lin": 124, "test_lin": 124, "cv_line": 124, "dashdot": [124, 151, 154, 238], "xticks_po": 124, "xticks_label": 124, "plot_gradient_boosting_oob": [124, 136, 1008], "atleast_2d": [125, 381], "expected_i": 125, "amplitud": [125, 156, 158, 193, 983], "lognorm": [125, 157, 180, 249, 309, 997], "imposs": [125, 353, 1007], "all_model": 125, "min_samples_split": [125, 126, 127, 264, 272, 306, 317, 414, 555, 556, 557, 558, 562, 563, 564, 799, 800, 907, 908, 909, 910, 976, 1003, 1033], "gbr": 125, "gbr_l": 125, "y_med": 125, "unfortun": [125, 168, 169, 217, 387, 391, 414, 506, 507], "sinoisoid": 125, "highlight_min": [125, 188], "pbl": 125, "715413": 125, "750348": 125, "127128": 125, "253445": 125, "379763": 125, "933253": 125, "305438": 125, "622811": 125, "940184": 125, "827917": 125, "909909": 125, "145957": 125, "382005": 125, "667219": 125, "asymmetr": [125, 201, 393, 1032], "nor": [125, 263, 351, 362, 366, 384, 391, 415, 435, 444, 592, 923, 991, 1003, 1038], "917281": 125, "767498": 125, "617715": 125, "692901": 125, "144204": 125, "245961": 125, "347717": 125, "648026": 125, "412021": 125, "607752": 125, "803483": 125, "874771": 125, "354394": 125, "355445": 125, "356497": 125, "852774": 125, "extrem": [125, 199, 201, 237, 238, 305, 312, 328, 352, 379, 382, 407, 412, 555, 556, 562, 563, 564, 630, 631, 677, 721, 749, 909, 910, 911, 913, 987, 989], "coverage_fract": 125, "y_low": 125, "y_high": 125, "hypothesi": [125, 260, 266, 411, 688, 692, 824, 984], "experiment": [125, 163, 164, 199, 271, 272, 317, 318, 377, 379, 381, 382, 389, 391, 393, 398, 411, 494, 547, 625, 694, 799, 800, 957, 976, 977, 983, 986, 987, 1006, 1007, 1015, 1023, 1035, 1036, 1039, 1040, 1041, 1042, 1044], "enable_halving_search_cv": [125, 271, 272, 317, 383, 799, 800, 976], "halvingrandomsearchcv": [125, 272, 317, 398, 577, 799, 976, 1039, 1041, 1042, 1043, 1044], "neg_mean_pinball_loss_05p_scor": 125, "greater_is_bett": [125, 739, 987], "search_05p": 125, "max_resourc": [125, 799, 800, 976], "min_resourc": [125, 799, 800], "neg_mean_pinball_loss_95p_scor": 125, "search_95p": 125, "estimator__alpha": 125, "did": [125, 151, 169, 172, 199, 207, 217, 246, 312, 374, 625, 710, 815, 901, 1020, 1028, 1029, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1042], "untun": 125, "joint": [125, 166, 170, 177, 183, 185, 186, 188, 198, 218, 220, 408, 609, 650, 660, 690, 834, 835, 836, 837, 838, 899, 983, 984, 988, 992, 994, 998, 1008, 1027], "9026666666666666": 125, "796": 125, "sadli": 125, "plot_gradient_boosting_quantil": [125, 136, 1008], "basic": [125, 150, 151, 156, 157, 159, 160, 161, 164, 166, 197, 312, 343, 366, 368, 379, 381, 383, 391, 393, 407, 411, 412, 414, 609, 620, 895, 907, 908, 909, 910, 976, 977, 990, 1001, 1005, 1006, 1007, 1008, 1011, 1019], "introductori": [125, 150, 151, 156, 157, 159, 160, 161, 166, 227, 417, 609, 620, 1008, 1011], "tackl": [126, 260, 367, 379, 407, 836, 989, 1011, 1015], "katrina": [126, 1038], "ni": [126, 1033, 1038], "nilichen": 126, "reg": [126, 169, 179, 235, 306, 316, 343, 414, 556, 558, 566, 648, 649, 651, 652, 653, 654, 655, 661, 662, 663, 668, 669, 676, 677, 687, 691, 910, 983, 1032], "3044": 126, "4733": 126, "train_score_": [126, 414, 557, 558, 559, 560], "impur": [126, 172, 360, 396, 414, 416, 551, 552, 555, 556, 557, 558, 562, 563, 564, 907, 908, 909, 910, 911, 913, 1003, 1023, 1032, 1033, 1034, 1035], "feature_import": 126, "sorted_idx": [126, 315], "po": [126, 223, 415], "vert": [126, 171, 172, 315, 1001], "620": [126, 136, 496, 1008], "plot_gradient_boosting_regress": [126, 136, 1008], "consider": [127, 152, 155, 238, 255, 261, 267, 379, 417, 617, 796, 810, 976, 983, 989, 993, 1001, 1011, 1044], "make_hastie_10_2": [127, 264, 375, 414, 557, 994], "return_invers": [127, 381], "original_param": 127, "test_devi": 127, "387": [127, 136, 1008, 1027], "plot_gradient_boosting_regular": [127, 136, 1008], "deform": [128, 250, 348], "notat": [128, 393, 408, 412, 415, 588, 710, 983, 987, 1012, 1036, 1043], "120": [128, 221, 322, 416, 588, 1027], "cluster_1": 128, "cluster_2": 128, "nuniformli": 128, "max_sampl": [128, 163, 414, 553, 554, 555, 556, 561, 562, 563, 632, 1037, 1040, 1043], "isolationforestifittedisolationforest": 128, "ax_": [128, 254, 263, 267, 269, 275, 286, 310, 315, 386, 436, 629, 695, 696, 698, 699, 700, 802, 818], "nof": 128, "plot_isolation_forest": [128, 136, 1008], "trend": [129, 156, 170, 231, 300, 1011, 1034], "xgboost": [129, 414, 1006], "partialdependencedisplai": [129, 170, 239, 316, 317, 318, 320, 322, 386, 631, 994, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "f_0": 129, "f_1": [129, 267, 987], "gbdt_no_cst": [129, 316], "histgradientboostingregressorifittedhistgradientboostingregressor": [129, 320], "gbdt_with_monotonic_cst": 129, "monotonic_cst": [129, 316, 318, 322, 414, 555, 556, 559, 560, 562, 563, 907, 908, 909, 910, 1042], "line_kw": [129, 239, 262, 316, 322, 630, 802, 818], "unconstrain": [129, 170, 316, 322, 374, 1001], "axes_": [129, 239, 316, 322, 386, 630], "f_idx": 129, "oscil": [129, 170, 204, 407, 438], "x_df": 129, "gbdt_with_monotonic_cst_df": 129, "657": [129, 136, 242, 260, 1008], "plot_monotonic_constraint": [129, 136, 1008], "excel": [130, 373, 379, 414, 688, 692, 983, 1011], "bernoullinb": [130, 368, 835, 836, 837, 838, 988, 989, 1028, 1029, 1031, 1034, 1039, 1040, 1042], "truncatedsvd": [130, 221, 352, 412, 532, 533, 537, 538, 539, 690, 858, 861, 1029, 1034, 1038, 1039, 1041], "hasher": [130, 353, 415], "transformed_grid": 130, "y_grid_pr": 130, "443": [130, 136, 1008], "plot_random_forest_embed": [130, 136, 1008], "multioutput": [131, 269, 281, 282, 381, 393, 398, 430, 463, 480, 481, 482, 549, 552, 554, 555, 556, 558, 560, 562, 563, 566, 568, 609, 630, 631, 633, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 658, 659, 660, 661, 662, 663, 665, 668, 670, 671, 676, 677, 719, 720, 725, 742, 743, 745, 747, 748, 750, 782, 785, 787, 788, 820, 828, 842, 850, 857, 866, 900, 902, 905, 907, 908, 909, 910, 925, 950, 951, 987, 1008, 1009, 1023, 1027, 1028, 1029, 1033, 1034, 1040, 1041], "multioutputregressor": [131, 398, 430, 463, 480, 481, 482, 552, 554, 556, 558, 560, 563, 566, 568, 609, 633, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 658, 659, 660, 661, 662, 663, 665, 668, 670, 671, 676, 677, 831, 833, 842, 850, 857, 900, 902, 905, 908, 910, 1033, 1034, 1036, 1038, 1039, 1043, 1044], "centr": 131, "regr_multirf": 131, "regr_rf": 131, "y_multirf": 131, "y_rf": 131, "cornflowerblu": [131, 193, 202, 209, 246, 248, 251, 267, 269, 288, 294, 358, 359], "652": [131, 136, 352, 1008], "plot_random_forest_regression_multioutput": [131, 136, 1008], "compil": [132, 283, 353, 366, 367, 379, 380, 381, 382, 387, 388, 391, 1006, 1027], "dean": [132, 1035, 1041, 1043], "cock": [132, 1036], "becam": [132, 394, 1035], "kaggl": [132, 392], "residenti": 132, "won": [132, 301, 352, 383, 407, 466, 494, 625, 626, 628, 685, 702, 715, 733, 734, 752, 754, 792, 986, 997, 1032, 1033, 1038], "load_ames_h": 132, "yrsold": 132, "heatingqc": 132, "street": [132, 148, 376], "yearremodadd": 132, "heat": [132, 338, 407, 450, 460, 693], "bsmtunfsf": 132, "mssubclass": 132, "condition2": 132, "garagetyp": 132, "overallqu": 132, "totalbsmtsf": 132, "miscfeatur": 132, "mosold": 132, "cat_selector": 132, "num_selector": 132, "besid": [132, 231, 379, 384, 587, 976, 1035], "cat_tree_processor": 132, "encoded_missing_valu": [132, 171, 873, 997, 1041, 1042], "num_tree_processor": 132, "add_ind": [132, 164, 625, 626, 628, 977, 1036, 1039, 1043], "tree_preprocessor": [132, 199], "0x7f5835ec6430": 132, "0x7f5835ec6b20": 132, "columntransformerinot": [132, 170], "fittedcolumntransform": [132, 170], "ordinalencoderordinalencod": [132, 170, 171, 311], "cat_linear_processor": 132, "num_linear_processor": 132, "linear_preprocessor": 132, "tediou": 132, "wrote": [132, 374], "lasso_pipelin": 132, "pipelineinot": [132, 230, 240, 261, 311, 316], "fittedpipelin": [132, 230, 240, 261, 311, 316], "lassocvlassocv": 132, "rf_pipelin": 132, "randomforestregressorrandomforestregressor": [132, 135], "gbdt_pipelin": 132, "histgradientboostingregressorhistgradientboostingregressor": [132, 311], "stackingregressor": [132, 315, 393, 398, 414, 565, 977, 1037, 1038, 1039, 1040, 1041, 1044], "stacking_regressor": 132, "final_estim": [132, 315, 414, 565, 566], "unknown_v": 132, "stackingregressorinot": 132, "fittedstackingregressor": 132, "ridgecvridgecv": [132, 169], "cross_val_predict": [132, 256, 315, 398, 405, 411, 414, 435, 565, 566, 821, 822, 1031, 1032, 1033, 1034, 1036, 1038, 1040, 1044], "scorer": [132, 217, 264, 322, 381, 393, 398, 411, 414, 416, 559, 560, 592, 600, 632, 657, 671, 673, 709, 729, 730, 739, 796, 799, 800, 802, 810, 818, 821, 822, 823, 826, 945, 976, 983, 987, 995, 1007, 1031, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044], "line_kwarg": [132, 699], "nevalu": 132, "831": [132, 136, 1008], "plot_stack_predictor": [132, 136, 1008], "exemplari": [133, 134], "eclf": [133, 134, 414], "axarr": [133, 305], "tt": [133, 255, 463], "869": [133, 136, 232, 243, 1008], "plot_voting_decision_region": [133, 136, 1008], "class1_1": 134, "class2_1": 134, "lightgreen": [134, 205, 216], "p3": 134, "p4": 134, "nweight": 134, "457": [134, 136, 613, 1008], "plot_voting_proba": [134, 136, 1008], "votingregressor": [135, 398, 414, 567, 977, 1036, 1037, 1038, 1041, 1044], "cohort": 135, "reg1": [135, 414], "reg2": [135, 414], "reg3": [135, 414], "ereg": [135, 414], "gb": [135, 414, 551, 631], "votingregressorifittedvotingregressor": 135, "gradientboostingregressorgradientboostingregressor": 135, "linearregressionlinearregress": 135, "xt": [135, 283, 393, 443, 536, 538, 625, 627, 796, 799, 800, 810, 843, 851, 859, 864, 869, 876, 888, 917, 1043], "pred1": 135, "pred2": 135, "pred3": 135, "pred4": 135, "labelbottom": [135, 260], "plot_voting_regressor": [135, 136, 1008], "067": [136, 160], "n_fold": [138, 645, 649, 651, 653, 657, 659, 661, 1028, 1029, 1033], "scores_std": [138, 1016], "semilogx": [138, 188, 273, 1016], "std_error": 138, "transluc": 138, "999999999999999e": 138, "31622776601683794": 138, "answer": [138, 168, 260, 379, 391, 723, 753, 987, 1010, 1011], "extern": [138, 151, 368, 372, 376, 379, 381, 384, 391, 393, 404, 407, 415, 416, 417, 591, 608, 609, 715, 734, 792, 983, 986, 987, 990, 1003, 1007, 1013, 1019, 1023, 1035, 1039], "lasso_cv": 138, "k_fold": [138, 1016], "maximis": [138, 246, 291, 981, 990], "5f": [138, 319], "moreov": [138, 157, 307, 319, 362, 383, 407, 411, 417, 892, 957, 987, 995, 1011, 1035, 1041, 1042], "substanti": [138, 285, 289, 290, 306, 379, 845, 993, 1031, 1034], "05968": 138, "54209": 138, "04520": 138, "15521": 138, "07880": 138, "45192": 138, "plot_cv_diabet": [138, 141, 1008], "aic": [138, 166, 177, 183, 185, 186, 187, 193, 207, 218, 250, 499, 649, 651, 652, 653, 654, 795, 860, 879, 976, 1008, 1027, 1034, 1040, 1041], "bic": [138, 166, 177, 183, 185, 186, 187, 193, 207, 218, 416, 499, 649, 651, 652, 653, 654, 795, 860, 879, 976, 986, 1008, 1027, 1034, 1040, 1041], "961111": 139, "933333": [139, 848], "091": [139, 141, 1008], "plot_digits_classification_exercis": [139, 141, 1008], "200j": 140, "538": [140, 141, 1008], "plot_iris_exercis": [140, 141, 1008], "x_2": [143, 154, 196, 412, 414, 415, 417, 611, 623, 983, 991, 997], "x_3": [143, 997], "irrelev": [143, 183, 362, 385, 409, 414, 416, 602, 737, 987], "agre": [143, 387, 394, 406, 407, 783, 1012], "percept": [143, 170, 994], "correctli": [143, 147, 199, 217, 235, 267, 269, 274, 293, 312, 327, 338, 379, 388, 412, 414, 424, 435, 467, 491, 547, 548, 549, 551, 553, 555, 557, 559, 562, 565, 567, 608, 656, 664, 666, 672, 673, 674, 701, 791, 793, 827, 828, 829, 830, 834, 835, 836, 837, 838, 841, 846, 849, 856, 879, 894, 895, 899, 901, 902, 903, 904, 905, 907, 909, 937, 984, 987, 990, 991, 997, 1002, 1029, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "mutual_info_regress": [143, 319, 416, 590, 593, 594, 597, 598, 607, 1033, 1034, 1039, 1041, 1042, 1043, 1045], "f_test": 143, "x_": [143, 152, 251, 260, 315, 381, 407, 410, 412, 625, 633, 761, 854, 894, 895, 983, 989, 994, 1033], "251": [143, 148, 149, 222, 376, 1008], "plot_f_test_vs_mi": [143, 149, 1008], "halv": [143, 166, 253, 264, 268, 276, 345, 402, 513, 562, 577, 796, 799, 800, 904, 1008, 1023, 1039], "spline": [143, 166, 177, 178, 218, 274, 288, 514, 515, 516, 670, 860, 874, 878, 1006, 1008, 1040], "examin": [144, 385, 387, 407, 848], "f_classif": [144, 145, 341, 416, 590, 593, 594, 596, 597, 598, 602, 604, 607], "log10": [144, 157, 169, 184, 192, 261, 338], "pvalues_": [144, 590, 593, 594, 596, 597, 598, 1027], "x_indic": 144, "p_": [144, 987, 990, 1003], "svm_weight": 144, "789": [144, 414], "clf_select": 144, "svm_weights_select": 144, "get_support": [144, 148, 317, 579, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 1029], "230": [144, 149, 257, 276, 295, 297, 582, 1008], "plot_feature_select": [144, 149, 1008], "anova_filt": 145, "anova_svm": 145, "selectkbestselectkbest": [145, 319], "Be": [145, 160, 351, 379, 409, 565, 566, 646, 652, 653, 654, 656, 657, 667, 678, 702, 814, 815, 874, 997, 1024, 1028], "75788833": 145, "27161955": 145, "26113448": 145, "plot_feature_selection_pipelin": [145, 149, 1008], "rfe": [146, 147, 398, 416, 592, 595, 600, 1027, 1031, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045], "n_features_to_select": [146, 148, 317, 416, 591, 600, 1039, 1041], "ranking_": [146, 591, 592], "plot_rfe_digit": [146, 149, 1008], "introduct": [147, 217, 258, 379, 411, 412, 415, 588, 785, 786, 834, 838, 983, 985, 987, 989, 1005, 1013, 1019, 1022, 1023], "class_sep": [147, 293, 513], "rfecv": [147, 398, 416, 591, 595, 600, 1031, 1033, 1035, 1037, 1038, 1039, 1040, 1043, 1044], "stratifiedkfold": [147, 247, 255, 266, 270, 328, 411, 435, 565, 566, 592, 600, 657, 671, 796, 797, 799, 800, 801, 802, 804, 806, 810, 814, 816, 818, 819, 820, 821, 822, 823, 824, 826, 880, 1016, 1028, 1029, 1030, 1033, 1034, 1035, 1036, 1037, 1040], "min_features_to_select": [147, 592, 1035], "n_features_": [147, 591, 592, 1040, 1042], "n_score": 147, "plot_rfe_with_cross_valid": [147, 149, 1008], "selectfrommodel": [148, 393, 398, 591, 600, 601, 1009, 1023, 1032, 1033, 1034, 1035, 1037, 1039, 1040, 1041, 1043, 1044, 1045], "sequentialfeatureselector": [148, 398, 416, 591, 595, 601, 1039, 1040, 1041, 1042, 1043], "greedi": [148, 414, 416, 445, 447, 458, 557, 558, 600, 983, 1003], "442": [148, 164, 353, 354, 376, 499, 1008, 1019], "descr": [148, 372, 373, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 498, 499, 500, 501, 502, 503, 505, 508, 1018, 1035], "_diabetes_dataset": 148, "mass": [148, 239, 376, 444, 794, 983, 994], "blood": [148, 229, 376, 1019], "pressur": [148, 376, 1019], "six": [148, 200, 221, 309, 376, 1036], "serum": [148, 376], "bmi": [148, 187, 188, 239, 376, 995], "tc": [148, 376, 394], "cholesterol": [148, 376], "ldl": [148, 376], "lipoprotein": [148, 376], "hdl": [148, 376], "s4": [148, 187, 188, 376], "tch": [148, 376], "s5": [148, 187, 188, 376, 995], "ltg": [148, 376, 499], "triglycerid": [148, 376], "s6": [148, 187, 188, 376], "glu": [148, 376], "sugar": [148, 376], "www4": [148, 376], "ncsu": [148, 376], "boo": [148, 376], "bradlei": [148, 376, 983], "efron": [148, 376, 680, 681, 983], "trevor": [148, 187, 320, 376, 626, 654, 719, 720, 721, 977, 983, 999, 1031, 1032, 1035, 1036, 1037, 1039], "iain": [148, 376, 983], "johnston": [148, 376, 983, 1036], "annal": [148, 183, 187, 376, 414, 472, 514, 515, 516, 557, 558, 654, 983], "407": [148, 376], "499": [148, 376, 385], "web": [148, 373, 374, 376, 379, 382, 387, 407, 415, 519, 892, 987, 997, 1027], "stanford": [148, 376, 647, 680, 681, 834, 837, 838, 892, 985], "leastangle_2002": [148, 376], "pdf": [148, 260, 288, 305, 376, 379, 407, 416, 440, 447, 529, 532, 535, 539, 639, 642, 647, 656, 662, 664, 665, 669, 674, 677, 680, 681, 683, 684, 690, 836, 837, 848, 855, 892, 894, 983, 1000, 1003, 1010, 1027], "e501": [148, 351], "accept": [148, 151, 235, 257, 315, 338, 351, 353, 362, 366, 367, 373, 379, 381, 388, 391, 392, 393, 394, 398, 401, 403, 407, 415, 435, 439, 442, 443, 446, 459, 462, 465, 506, 507, 553, 554, 559, 560, 567, 568, 579, 580, 591, 592, 595, 626, 633, 637, 641, 677, 724, 739, 775, 794, 795, 799, 800, 841, 842, 849, 850, 859, 863, 917, 919, 920, 923, 983, 985, 987, 990, 995, 997, 1002, 1006, 1007, 1016, 1027, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "tic": [148, 170, 238, 271, 989], "sfm": 148, "toc": [148, 238], "sf": [148, 260, 317, 374, 416, 490, 600], "backward": [148, 235, 317, 382, 393, 416, 494, 575, 600, 612, 613, 616, 617, 618, 620, 621, 912, 915, 987, 991, 1007, 1027, 1030, 1035, 1036, 1037, 1039, 1041, 1043], "tic_fwd": 148, "sfs_forward": 148, "toc_fwd": 148, "tic_bwd": 148, "sfs_backward": 148, "toc_bwd": 148, "541": [148, 450, 460], "isn": [148, 315, 351, 353, 362, 367, 379, 387, 513, 559, 560, 592, 791, 799, 800, 872, 990, 1002, 1037], "sound": [148, 362], "finish": [148, 248, 984], "expos": [148, 235, 278, 318, 320, 367, 372, 376, 393, 398, 405, 408, 414, 416, 417, 435, 462, 551, 552, 559, 560, 565, 566, 567, 568, 591, 592, 600, 609, 796, 799, 800, 810, 828, 829, 830, 831, 832, 833, 914, 955, 983, 987, 989, 1016, 1018, 1020, 1024, 1027, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "breast": [148, 372, 498, 995, 1023, 1032], "cancer": [148, 372, 498, 591, 592, 846, 995, 1023, 1032], "569": [148, 185, 218, 328, 376, 498, 590, 593, 594, 596, 1008], "load_breast_canc": [148, 172, 328, 356, 384, 590, 593, 594, 596, 672, 673, 785, 987, 1032, 1033, 1038], "breast_cancer_data": 148, "_breast_cancer_dataset": 148, "wisconsin": [148, 172, 372, 498, 995, 1023, 1032], "diagnost": [148, 172, 263, 372, 393, 498, 710, 821, 822, 987, 995, 1006, 1007, 1023], "radiu": [148, 275, 290, 338, 376, 407, 440, 448, 686, 761, 778, 839, 840, 841, 842, 843, 847, 849, 850, 851, 853, 990, 1029, 1031, 1041, 1044], "perimet": [148, 376], "textur": [148, 376, 755, 756, 985], "compact": [148, 175, 305, 366, 376, 839, 840, 1003, 1029], "concav": [148, 376], "symmetri": [148, 376, 697, 872, 875, 887, 985], "fractal": [148, 376], "worst": [148, 199, 311, 376, 407, 442, 445, 706, 726, 727, 780, 781, 784, 789, 790, 824, 987, 1011, 1027, 1040], "field": [148, 217, 376, 404, 407, 408, 415, 496, 499, 615, 983, 985, 994, 1002, 1006, 1010, 1021, 1028], "se": [148, 222, 376, 397], "wdbc": [148, 376], "malign": [148, 376, 498], "benign": [148, 376, 498], "981": [148, 376, 987], "43": [148, 158, 196, 232, 260, 283, 376, 384, 796, 810, 880], "188": [148, 156, 376, 385, 582], "143": [148, 376, 469, 470, 999, 1027, 1028], "2501": [148, 376], "163": [148, 170, 278, 305, 313, 376, 995, 1008], "019": [148, 376, 385, 469], "345": [148, 376], "106": [148, 242, 376, 875, 981, 1028], "873": [148, 376], "757": [148, 170, 258, 283, 376], "542": [148, 183, 234, 356, 361, 376, 1008], "031": [148, 376], "008": [148, 302, 303, 352, 376, 385, 1008], "079": [148, 376], "4254": [148, 376], "071": [148, 376, 435], "027": [148, 230, 243, 376, 1008], "058": [148, 258, 376], "252": [148, 222, 376, 532, 875, 887], "291": [148, 170, 228, 243, 352, 374, 376, 1008], "156": [148, 169, 241, 243, 376, 1008], "664": [148, 376], "055": [148, 376, 987], "208": [148, 283, 376], "creator": [148, 373, 376], "william": [148, 374, 376, 417, 608, 609, 612, 617, 620, 637, 979, 987, 991, 1034, 1035, 1036, 1037, 1042, 1043], "wolberg": [148, 376], "nick": [148, 376, 1027, 1033, 1034, 1035, 1036], "olvi": [148, 376], "mangasarian": [148, 376], "donor": [148, 376], "novemb": [148, 199, 217, 376, 1032, 1033, 1035], "1995": [148, 260, 376, 405, 414, 551, 552, 829, 896, 988], "goo": [148, 376], "gl": [148, 376], "u2uwz2": [148, 376], "needl": [148, 376], "aspir": [148, 376, 379], "fna": [148, 376], "nuclei": [148, 376], "multisurfac": [148, 376], "msm": [148, 376], "bennett": [148, 376, 987], "4th": [148, 159, 376], "midwest": [148, 376], "cognit": [148, 376], "societi": [148, 376, 407, 409, 467, 472, 539, 625, 875, 887, 983, 1001], "101": [148, 278, 376, 845, 1028], "1992": [148, 374, 376, 411, 414, 565, 566, 643, 983], "exhaust": [148, 261, 315, 316, 317, 318, 319, 320, 321, 322, 366, 376, 384, 392, 402, 407, 414, 796, 799, 800, 810, 889, 890, 892, 983, 1021, 1023], "insepar": [148, 376], "uw": [148, 376, 1039], "ftp": [148, 376, 680, 681], "wisc": [148, 376, 894], "prog": [148, 376], "cpo": [148, 376], "nuclear": [148, 376], "tumor": [148, 376], "diagnosi": [148, 263, 376, 846], "spie": [148, 376], "1993": [148, 376, 472, 662, 683, 684, 1003], "symposium": [148, 376, 407, 458], "technologi": [148, 376, 407, 1006, 1011], "1905": [148, 376], "861": [148, 376, 785, 786, 987], "870": [148, 376], "san": [148, 376, 415, 999], "jose": [148, 376, 656, 987, 1035, 1037], "ca": [148, 376, 407, 440, 907, 908, 999, 1003], "prognosi": [148, 376], "570": [148, 376, 1019], "577": [148, 376], "juli": [148, 376, 416, 731, 880, 997, 1030, 1034, 1035, 1036], "august": [148, 376, 407, 509, 532, 1002, 1027, 1029, 1030, 1034, 1041], "diagnos": [148, 263, 376, 387, 396, 408], "letter": [148, 159, 374, 376, 383, 415, 785, 786, 802, 818, 987], "1994": [148, 374, 376, 642], "feature_selector": 148, "ntol": 148, "975": [148, 168, 1002], "437": [148, 345, 349, 1008], "998": [148, 180, 218, 991, 1008], "402": [148, 264, 354], "580": [148, 149, 352, 839, 840, 1008], "plot_select_from_model_diabet": [148, 149, 1008], "450": 149, "co2": [150, 151, 157, 158, 161, 166, 417, 494, 609, 613, 620, 621, 623, 1008, 1034], "mona": [150, 151, 157, 158, 161, 166, 417, 494, 609, 613, 620, 621, 623, 1008], "loa": [150, 151, 157, 158, 161, 166, 417, 494, 609, 613, 620, 621, 623, 1008], "xor": [150, 152, 153, 154, 156, 157, 158, 161, 166, 209, 210, 212, 249, 308, 343, 344, 608, 612, 620, 983, 1003, 1008, 1034], "trick": [151, 234, 293, 342, 353, 365, 368, 382, 391, 408, 580, 587, 641, 670, 979, 980, 991, 1001, 1002, 1019, 1020, 1023, 1028, 1036, 1044], "drastic": [151, 232, 268, 407, 411, 990, 1000], "theorem": [151, 346, 406, 989], "reus": [151, 192, 261, 315, 353, 381, 393, 407, 408, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 632, 644, 646, 647, 650, 656, 658, 660, 664, 665, 666, 667, 674, 675, 676, 678, 856, 857, 995, 999, 1011, 1034, 1044], "training_sample_indic": 151, "training_data": 151, "training_noisy_target": 151, "newer": [151, 378, 397, 412], "expsinesquar": [151, 156, 160, 417], "emb": [151, 221, 232, 292, 372, 373, 460, 693, 984], "kernel_ridg": [151, 234, 1031], "length_scal": [151, 152, 155, 156, 157, 158, 160, 417, 610, 613, 616, 617, 619, 620, 621, 622], "tell": [151, 169, 170, 235, 260, 338, 343, 367, 374, 407, 415, 561, 577, 976, 981, 994, 1021], "1e0": [151, 234, 251, 268, 976], "kernel__length_scal": 151, "kernel__period": 151, "1e1": [151, 157, 199, 234, 338], "kernel_ridge_tun": 151, "811": [151, 291, 297, 1008], "9915849773450223": 151, "7986499491396727": 151, "607275806426107": 151, "predictions_kr": 151, "gaussianprocessregressor": [151, 156, 157, 158, 159, 160, 417, 608, 611, 612, 613, 614, 615, 619, 622, 623, 641, 1030, 1033, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "whitekernel": [151, 156, 157, 417, 609, 610, 612, 1038], "periodicity_bound": [151, 156, 160, 613], "kernel_": [151, 152, 153, 154, 155, 156, 157, 158, 160, 608, 609], "675": [151, 272, 276, 346, 349, 1008], "noise_level": [151, 156, 157, 610, 623], "182": [151, 302, 385, 414], "mean_predictions_gpr": 151, "std_predictions_gpr": 151, "return_std": [151, 156, 157, 158, 160, 178, 179, 393, 550, 565, 566, 609, 611, 612, 613, 614, 623, 625, 642, 643, 859, 1034, 1035, 1039, 1044], "capac": [151, 171], "length_scale_bound": [151, 157, 158, 160, 417, 609, 613, 617, 620, 621], "attenu": 151, "531": [151, 161, 1008], "plot_compare_gpr_krr": [151, 161, 1008], "arbitrarili": [152, 246, 251, 351, 393, 417, 430, 463, 480, 481, 482, 550, 552, 554, 556, 558, 560, 563, 566, 568, 609, 633, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 658, 659, 660, 661, 662, 663, 665, 667, 668, 670, 671, 676, 677, 678, 719, 720, 721, 743, 782, 786, 832, 833, 842, 850, 857, 880, 900, 902, 905, 908, 910, 987, 990, 997, 1003], "lml": [152, 153, 157, 417], "exhibit": [152, 204, 342, 351, 396, 411, 412, 414, 417, 995], "steep": [152, 170, 269, 270, 407, 411, 417, 448, 454], "laplac": [152, 417, 608, 609, 834, 835, 836, 838, 989], "319": [152, 300, 303, 1008, 1021], "gp_fix": 152, "gp_opt": 152, "log_marginal_likelihood": [152, 153, 155, 157, 160, 417, 608, 609, 1037], "theta": [152, 153, 155, 157, 159, 160, 236, 412, 417, 521, 534, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 690, 989, 1003], "landscap": 152, "theta0": 152, "theta1": 152, "pcolor": 152, "xscale": [152, 157, 234, 802], "yscale": [152, 157, 199, 234, 351, 802], "660": [152, 161, 242, 1008], "plot_gpc": [152, 161, 1008], "gpc_rbf_isotrop": 153, "gpc_rbf_anisotrop": 153, "m_max": 153, "plot_gpc_iri": [153, 161, 1008], "0256": 154, "dotproduct": [154, 155, 160, 417, 609, 623], "sigma_0": [154, 155, 160, 417, 612], "constantkernel": [154, 160, 417, 609, 615, 619, 622], "lim": [154, 532], "61611719": 154, "00099547": 154, "10469096": 154, "32782448": 154, "00000000": 154, "50000000": 154, "17289014": 154, "6984743": 154, "3109306": 154, "93271427": 154, "03823144": 154, "10584743": 154, "87600388": 154, "74310541": 154, "21301203": 154, "26386883": 154, "gp": [154, 159, 417, 608, 609, 620, 1033], "cb": [154, 232, 249], "widehat": 154, "mathbf": [154, 342, 412, 983, 987, 991, 992, 1001], "leq": [154, 412, 414, 983, 987, 990, 1001, 1002, 1003], "clim": 154, "666": [154, 190, 218, 329, 407, 841, 977, 1008], "clabel": [154, 210], "plot_gpc_isoprob": [154, 161, 1008], "stationari": [155, 417, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623], "coincid": [155, 201, 417], "convergencewarn": [155, 157, 159, 160, 207, 214, 246, 300, 301, 307, 388, 393, 794, 795, 1035, 1036, 1039], "k1__constant_valu": 155, "100000": [155, 234, 245, 379, 611, 612, 613, 617, 618, 620, 621, 623, 888, 980, 1019, 1021], "puor_r": [155, 344], "526": [155, 161, 899, 1008], "plot_gpc_xor": [155, 161, 1008], "rw2006": [156, 417, 608, 609], "ascent": [156, 417], "monthli": [156, 394, 987], "atmospher": 156, "ppm": 156, "mauna": 156, "observatori": 156, "hawaii": 156, "1958": [156, 412, 414, 530], "air": [156, 761], "41187": 156, "flag": [156, 238, 322, 377, 379, 380, 382, 398, 403, 462, 608, 609, 625, 671, 673, 725, 782, 1002, 1033, 1037, 1038, 1040, 1041, 1042, 1043], "station": 156, "mlo": 156, "317": [156, 352], "co2_data": 156, "to_datetim": 156, "timestamp": 156, "march": [156, 723, 753, 987, 1027, 1031, 1035, 1037, 1042], "co2_data_resampled_monthli": 156, "me": [156, 351], "nfrom": 156, "upcom": [156, 377], "to_numpi": 156, "rise": 156, "irregular": [156, 342, 407, 990], "long_term_trend_kernel": 156, "decai": [156, 542, 856, 857, 936, 987, 1001, 1031], "seasonal_kernel": 156, "ration": [156, 621, 985], "diffus": 156, "accommod": [156, 1035], "rationalquadrat": [156, 160, 417, 614], "irregularities_kernel": 156, "shall": 156, "phenomena": 156, "noise_kernel": 156, "noise_level_bound": [156, 157, 623], "co2_kernel": 156, "subtract": [156, 169, 238, 410, 412, 441, 445, 457, 532, 642, 643, 1034, 1044], "normalize_i": [156, 417, 609, 1041], "y_mean": [156, 157, 160, 609, 642, 643], "gaussianprocessregressorifittedgaussianprocessregressor": 156, "todai": [156, 1021], "current_month": 156, "mean_y_pr": 156, "std_y_pr": 156, "536": [156, 283], "968": [156, 168, 258], "0367": 156, "6ppm": 156, "plot_gpr_co2": [156, 161, 1008], "target_gener": 157, "add_nois": 157, "minima": [157, 187, 412, 445, 690, 984, 1020, 1035], "y_std": [157, 160, 550, 609, 642, 643, 1040], "k1__k2__length_scal": [157, 417], "noptimum": 157, "nlog": 157, "length_scale_grid": 157, "noise_level_grid": 157, "newshap": 157, "819": [157, 161, 163, 165, 178, 218, 415, 1008], "plot_gpr_noisi": [157, 161, 1008], "tikhonov": [158, 417, 670], "training_indic": 158, "n_restarts_optim": [158, 417, 608, 609], "std_predict": 158, "whenev": [158, 168, 362, 373, 387, 393, 397, 405, 480, 481, 482, 494, 626, 628, 978, 986, 1007, 1037], "noise_std": 158, "y_train_noisi": 158, "plot_gpr_noisy_target": [158, 161, 1008], "gene": [159, 373, 404, 449, 511, 591, 592, 846, 879], "among": [159, 170, 172, 175, 199, 250, 281, 360, 368, 374, 381, 393, 394, 405, 406, 410, 445, 447, 510, 517, 791, 824, 842, 847, 849, 901, 904, 907, 908, 909, 910, 976, 979, 987, 988, 994, 997, 1002, 1027, 1033, 1034, 1037, 1044], "brighter": 159, "6th": 159, "haussler": 159, "1999": [159, 374, 405, 407, 409, 412, 414, 435, 448, 455, 467, 472, 532, 539, 553, 554, 557, 558, 720, 893, 901, 902, 904, 905, 993, 999], "646": [159, 260, 276, 1008], "technic": [159, 200, 221, 319, 374, 376, 379, 393, 414, 650, 662, 683, 684, 894, 983, 984, 990], "depart": [159, 407], "santa": [159, 1042], "cruz": 159, "generickernelmixin": [159, 1037], "sequencekernel": 159, "baseline_similar": 159, "baseline_similarity_bound": 159, "hyperparameter_baseline_similar": 159, "_f": [159, 983], "_g": 159, "__call__": [159, 338, 393, 415, 417, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 1034], "eval_gradi": [159, 417, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623], "is_stationari": [159, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623], "clone_with_theta": [159, 417, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623], "agct": 159, "agc": 159, "aact": 159, "taa": 159, "aaa": 159, "gaaca": 159, "training_idx": 159, "cga": 159, "taac": 159, "tcg": 159, "cttt": 159, "tgct": 159, "atag": 159, "ctc": 159, "243": [159, 161, 303, 582, 1008], "plot_gpr_on_structured_data": [159, 161, 1008], "plot_gpr_sampl": 160, "gpr_model": 160, "y_sampl": [160, 609], "sample_i": [160, 417, 609, 1041], "single_prior": 160, "pm": [160, 170, 270, 414, 987], "dev": [160, 169, 217, 265, 270, 377, 379, 383, 385, 387, 987, 1011, 1034, 1039, 1042, 1043], "594": [160, 199], "279": [160, 983], "alpha_bound": [160, 621], "1e15": 160, "05e": 160, "799": [160, 352], "sigma_0_bound": [160, 612], "_gpr": 160, "663": [160, 893, 995, 999], "lbfg": [160, 299, 381, 646, 647, 656, 657, 667, 670, 672, 678, 685, 830, 833, 856, 857, 983, 991, 1031, 1032, 1034, 1035, 1040, 1041, 1042, 1044], "abnormal_termination_in_lnsrch": 160, "479": 160, "7337046907": 160, "481": 160, "matern": [160, 417, 1038, 1042], "609": [160, 385], "484": [160, 200, 218, 1008], "672": [160, 161, 1008], "plot_gpr_prior_posterior": [160, 161, 1008], "585": [161, 1019], "iterativeimput": [162, 164, 165, 166, 230, 398, 488, 563, 578, 626, 627, 628, 637, 643, 670, 821, 842, 860, 1008, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045], "robin": [163, 164, 625, 977, 1033, 1036, 1041, 1042], "kneighborsregressor": [163, 237, 295, 319, 414, 568, 841, 847, 849, 850, 990, 1027, 1029, 1031, 1037, 1039, 1040, 1041, 1042, 1043, 1044], "mimic": [163, 199, 351, 814], "missforest": [163, 977], "popular": [163, 224, 374, 377, 384, 387, 391, 393, 406, 413, 414, 415, 417, 450, 460, 977, 979, 983, 985, 992, 1001, 1007, 1016, 1021], "enable_iterative_imput": [163, 164, 383, 625, 977, 1036], "x_full": [163, 164, 305], "y_full": [163, 164, 305], "2k": 163, "br_estim": 163, "score_full_data": 163, "neg_mean_squared_error": [163, 164, 201, 234, 274, 322, 822, 987, 995, 1033], "x_miss": [163, 164], "y_miss": [163, 164], "missing_sampl": [163, 164], "missing_featur": [163, 164], "score_simple_imput": 163, "missing_valu": [163, 164, 240, 393, 625, 626, 627, 628, 766, 977, 1035, 1036], "score_iterative_imput": 163, "stricter": 163, "impute_estim": 163, "__class__": [163, 199, 201, 235, 238, 262, 307, 351, 352, 353, 386], "xerr": [163, 164, 352], "plot_iterative_imputer_variants_comparison": [163, 165, 1008], "ness": [164, 217], "auxiliari": [164, 377, 406, 1011, 1042], "district": [164, 374], "neither": [164, 169, 315, 351, 362, 391, 435, 592, 626, 923, 990, 1003], "feel": [164, 305, 378, 379, 387, 407, 444, 1003], "x_diabet": [164, 1016], "y_diabet": [164, 1016], "x_california": 164, "y_california": 164, "add_missing_valu": 164, "missing_r": 164, "n_missing_sampl": 164, "x_miss_california": 164, "y_miss_california": 164, "x_miss_diabet": 164, "y_miss_diabet": 164, "knnimput": [164, 315, 625, 628, 977, 1037, 1038, 1041, 1042, 1043, 1044], "get_scores_for_imput": 164, "impute_scor": 164, "x_label": 164, "mses_california": 164, "stds_california": 164, "mses_diabet": 164, "stds_diabet": 164, "get_full_scor": 164, "full_scor": 164, "get_impute_zero_scor": 164, "fill_valu": [164, 230, 240, 316, 421, 424, 430, 431, 625, 628, 997, 1035, 1043], "zero_impute_scor": 164, "unweight": [164, 212, 461, 645, 651, 676, 705, 711, 726, 727, 735, 780, 781, 784, 785, 834, 835, 836, 837, 838, 977], "get_impute_knn_scor": 164, "knn_impute_scor": 164, "get_impute_mean": 164, "mean_impute_scor": 164, "obvious": [164, 366, 1021], "get_impute_it": 164, "n_nearest_featur": [164, 625], "sample_posterior": [164, 625, 977], "iterative_impute_scor": 164, "n_bar": 164, "xval": 164, "invert_yaxi": [164, 353], "637": [164, 165, 1008], "plot_missing_valu": [164, 165, 1008], "prune": [166, 355, 360, 361, 416, 498, 555, 556, 557, 558, 562, 563, 591, 642, 825, 907, 908, 909, 910, 990, 1008, 1009, 1023, 1027, 1030, 1037, 1038], "elast": [166, 177, 183, 185, 186, 190, 193, 210, 218, 232, 235, 273, 295, 406, 469, 470, 476, 499, 522, 644, 645, 650, 655, 656, 657, 658, 659, 660, 661, 666, 674, 676, 679, 682, 976, 987, 1001, 1008, 1009, 1023, 1027, 1032, 1036, 1037], "gram": [166, 177, 218, 235, 295, 381, 412, 415, 487, 522, 546, 586, 587, 588, 589, 644, 645, 648, 649, 650, 651, 652, 653, 654, 658, 659, 660, 661, 662, 663, 679, 680, 681, 682, 683, 684, 764, 976, 997, 1002, 1008, 1021, 1027, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1038, 1040, 1041], "theil": [166, 177, 202, 205, 218, 305, 647, 655, 669, 676, 677, 1008], "sen": [166, 177, 202, 205, 218, 305, 647, 655, 669, 676, 677, 1008], "tweedi": [166, 177, 199, 218, 462, 494, 550, 646, 667, 678, 704, 721, 742, 744, 746, 747, 749, 825, 860, 863, 864, 872, 879, 983, 1008, 1037, 1038, 1040], "insur": [166, 177, 199, 218, 462, 494, 550, 646, 667, 678, 704, 742, 747, 749, 825, 860, 863, 864, 872, 879, 983, 1008], "claim": [166, 177, 218, 379, 462, 494, 550, 646, 667, 678, 704, 742, 747, 749, 825, 860, 863, 864, 872, 879, 983, 1008], "failur": [166, 167, 169, 173, 194, 379, 387, 397, 655, 782, 825, 919, 920, 1008, 1010, 1011, 1040, 1041], "infer": [166, 167, 169, 173, 194, 246, 250, 251, 260, 357, 373, 381, 391, 406, 411, 412, 494, 506, 507, 513, 532, 534, 536, 538, 545, 547, 548, 551, 557, 558, 630, 633, 655, 707, 720, 738, 782, 794, 795, 802, 818, 825, 835, 873, 880, 894, 895, 907, 908, 909, 910, 950, 977, 983, 986, 987, 992, 997, 1000, 1003, 1006, 1007, 1008, 1015, 1028, 1032, 1033, 1038, 1041, 1044], "causal": [166, 167, 173, 194, 655, 782, 825, 1008], "hole": [166, 219, 220, 221, 222, 225, 226, 528, 690, 691, 1008, 1041], "perplex": [166, 219, 220, 222, 224, 226, 283, 512, 523, 534, 690, 984, 1008, 1032, 1034, 1041], "det": [166, 241, 253, 269, 270, 276, 379, 409, 513, 562, 696, 700, 724, 786, 825, 860, 879, 899, 934, 1008, 1039], "tsne": [166, 220, 221, 222, 224, 225, 284, 285, 297, 319, 393, 421, 431, 494, 686, 687, 688, 843, 847, 860, 961, 984, 990, 1008, 1030, 1032, 1033, 1034, 1035, 1037, 1039, 1040, 1041, 1042, 1043, 1044], "novelti": [166, 213, 228, 238, 284, 290, 297, 337, 845, 1008, 1009, 1022, 1023, 1027, 1035], "mlp": [166, 170, 239, 298, 300, 303, 494, 569, 825, 856, 857, 991, 1008], "semi_supervis": [166, 317, 319, 324, 325, 326, 327, 328, 329, 330, 331, 398, 988, 1000, 1008, 1028, 1033, 1034, 1041, 1042], "tie": [166, 191, 333, 349, 391, 414, 510, 827, 904, 988, 1002, 1003, 1008, 1028, 1043], "unbalanc": [166, 263, 333, 336, 339, 349, 411, 510, 629, 904, 924, 925, 976, 1001, 1008], "auto_examples_python": 166, "auto_examples_jupyt": 166, "unless": [168, 235, 246, 251, 379, 381, 382, 391, 393, 405, 407, 410, 418, 435, 442, 444, 446, 448, 450, 455, 456, 459, 462, 465, 470, 487, 494, 506, 507, 529, 533, 534, 535, 537, 540, 541, 543, 544, 545, 546, 553, 554, 555, 556, 557, 558, 561, 562, 563, 564, 565, 566, 567, 568, 592, 600, 605, 606, 608, 609, 630, 632, 637, 644, 645, 649, 650, 651, 653, 655, 656, 657, 659, 661, 663, 664, 666, 674, 677, 686, 687, 688, 689, 690, 691, 692, 707, 712, 771, 775, 778, 796, 799, 800, 802, 810, 818, 820, 821, 822, 823, 824, 826, 827, 828, 829, 831, 832, 841, 842, 845, 847, 849, 850, 852, 853, 856, 857, 858, 861, 880, 884, 885, 887, 888, 889, 890, 894, 895, 907, 908, 909, 910, 915, 919, 920, 936, 955, 983, 986, 988, 1027, 1029, 1033, 1035, 1038, 1039, 1044], "willing": [168, 257], "econom": [168, 169, 260], "educ": [168, 169, 322, 379, 494, 714, 988], "earn": [168, 169, 394], "polici": [168, 169, 199, 217, 393, 533, 539, 983, 1042], "maker": [168, 169], "ovb": [168, 169], "parent_hourly_wag": 168, "college_degre": 168, "true_coef": [168, 183, 194], "hourly_wag": 168, "stori": [168, 260, 278, 374, 986, 1045], "pairplot": [168, 169], "diag_kind": [168, 169], "kde": [168, 169, 278, 287, 288, 296, 413, 844], "features_nam": [168, 1034], "regressor_with_": 168, "y_pred_with_": 168, "r2_with_abl": 168, "model_coef": 168, "intellectu": 168, "proxi": [168, 169, 412, 855, 1016, 1032], "inadvert": [168, 393], "iq": 168, "regressor_without_": 168, "y_pred_without_": 168, "r2_without_": 168, "brought": [168, 551, 552, 555, 556, 557, 558, 562, 563, 564, 907, 908, 909, 910], "unobserv": [168, 169, 412], "confound": [168, 169], "conduct": [168, 260, 417, 1041], "prohibit": [168, 411, 414, 625, 992, 1000, 1034], "uneth": 168, "iv": [168, 987], "850": [168, 173, 203, 218, 1008], "plot_causal_interpret": [168, 173, 1008], "hint": [169, 366, 380, 384, 401, 446, 987, 1019], "aris": [169, 263, 346, 367, 384, 407, 713, 983, 984, 1039], "survei": [169, 410], "1985": [169, 407, 703, 713, 783], "534": 169, "race": [169, 322, 374, 494, 1030], "occup": [169, 305, 322, 494], "sector": 169, "marr": 169, "not_memb": 169, "marri": 169, "freq": [169, 183, 353], "378": [169, 414, 1021, 1027], "440": [169, 258, 276, 1008], "350": 169, "018727": 169, "822097": 169, "833333": 169, "615373": 169, "379710": 169, "726573": 169, "thereaft": [169, 178], "hispan": 169, "manufactur": [169, 414], "unmarri": 169, "dollar": [169, 374], "exploratori": [169, 1011], "emul": [169, 387], "train_dataset": [169, 373], "rangeindex": [169, 494], "533": 169, "normalis": [169, 609, 785, 1021], "numerical_column": [169, 171, 465], "if_binari": [169, 242, 872, 997, 1038], "prepend": [169, 1027], "exp10": 169, "ufunc": [169, 1044], "transformedtargetregressortransformedtargetregressor": 169, "ridgeridg": 169, "mae_train": 169, "mae_test": 169, "learnt": [169, 312, 362, 393, 411, 880, 976, 997], "obviou": [169, 342, 362, 366, 404, 412], "regressor_": [169, 463, 591, 592, 595], "race_hispan": 169, "013519": 169, "race_oth": 169, "009075": 169, "race_whit": 169, "022594": 169, "occupation_cler": 169, "000045": 169, "occupation_manag": 169, "090528": 169, "occupation_oth": 169, "025102": 169, "occupation_profession": 169, "071964": 169, "occupation_sal": 169, "046636": 169, "occupation_servic": 169, "091053": 169, "sector_construct": 169, "000198": 169, "sector_manufactur": 169, "031255": 169, "sector_oth": 169, "031025": 169, "marr_unmarri": 169, "032405": 169, "union_not_memb": 169, "117154": 169, "sex_mal": 169, "090808": 169, "south_y": 169, "033823": 169, "054699": 169, "035005": 169, "030867": 169, "adimension": 169, "Their": [169, 374, 376, 394, 407, 642, 1027], "gaug": 169, "decad": [169, 1007], "x_train_preprocess": 169, "multipli": [169, 203, 217, 260, 366, 388, 393, 412, 414, 415, 420, 462, 473, 513, 536, 538, 539, 545, 555, 559, 562, 644, 646, 650, 652, 656, 657, 658, 660, 666, 667, 668, 670, 674, 675, 676, 678, 684, 685, 687, 691, 761, 901, 904, 907, 909, 925, 963, 964, 965, 976, 979, 983, 987, 1001, 1038], "coef_i": 169, "std_i": 169, "emphas": [169, 348, 385, 412, 987], "perturb": [169, 216, 302, 412, 414, 986], "caution": [169, 383, 438, 452, 1035], "repeatedkfold": [169, 411, 801, 812, 1034], "cv_model": 169, "stripplot": 169, "whi": [169, 171], "collinear": [169, 172, 204, 217, 414, 565, 646, 667, 678, 872, 983, 1027], "teas": 169, "apart": [169, 318, 338, 391, 393, 408, 410, 416, 722, 1002, 1011, 1035], "vice": [169, 257, 351, 407, 417, 440, 605, 606, 828, 1031], "versa": [169, 257, 351, 407, 417, 440, 605, 606, 828, 1031], "column_to_drop": 169, "said": [169, 228, 261, 374, 379, 789, 985, 993, 1012, 1019], "unchang": [169, 217, 267, 414, 431, 435, 440, 441, 442, 443, 444, 445, 447, 462, 463, 466, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 608, 609, 625, 626, 627, 628, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 686, 687, 688, 690, 760, 797, 798, 803, 805, 814, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 846, 848, 849, 850, 851, 855, 856, 857, 858, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 891, 892, 894, 895, 897, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 990, 1012, 1035, 1041, 1043], "neglig": [169, 990, 1030, 1044], "littl": [169, 170, 171, 172, 228, 374, 415, 460, 642, 796, 810, 936, 977, 984, 986, 1002, 1003, 1019, 1028, 1039, 1044], "alon": [169, 203, 266, 338, 393, 401, 405, 646, 667, 678, 739, 1034, 1036], "suppress": [169, 366, 387, 690, 990, 1034], "themselv": [169, 305, 375, 381, 387, 393, 398, 404, 407, 414, 415, 417, 444, 613, 789, 1003, 1021, 1037], "bring": [169, 305, 412, 674, 676, 984, 1006, 1011], "entic": 169, "pursu": 169, "tempt": 169, "deflat": [169, 410, 419, 531], "presum": [169, 281, 407, 415, 834], "respond": [169, 379, 407], "010": [169, 173, 385, 824, 995, 1008], "plot_linear_model_coefficient_interpret": [169, 173, 1008], "complement": [170, 270, 351, 630, 631, 798, 813, 816, 825, 834, 835, 836, 837, 838, 994, 1009, 1023, 1035], "molnar": [170, 994], "christoph": [170, 412, 417, 530, 608, 609, 612, 617, 620, 794, 983, 988, 1028, 1032, 1035, 1038, 1039, 1040, 1041, 1042], "goldstein": [170, 994], "kapeln": [170, 994], "bleich": [170, 994], "pitkin": [170, 994], "peek": [170, 379, 994], "settingwithcopywarn": 170, "2284": 170, "904": [170, 258, 329, 408], "287": [170, 999], "1747": 170, "1729": 170, "mask_train": [170, 217], "accordingli": [170, 238, 342, 379, 383, 384, 1034, 1035, 1042], "8640": 170, "115": [170, 995], "nomin": [170, 373, 393, 394, 414, 415, 579, 580, 714, 997, 1007], "numerical_featur": [170, 311], "xtick_start": 170, "xtick_period": 170, "average_bike_rent": 170, "numeric_onli": 170, "decor": [170, 315, 379, 380, 381, 388, 802, 818, 926, 930, 931, 948, 954, 1037, 1040, 1043], "mlp_preprocessor": 170, "quantiletransformerquantiletransform": 170, "catindex": 170, "hgbdt_preprocessor": 170, "sparse_threshold": [170, 462, 465, 1035], "mlp_model": 170, "hidden_layer_s": [170, 239, 299, 301, 856, 857, 991], "learning_rate_init": [170, 300, 301, 856, 857], "forget": [170, 362, 367, 373, 383, 391, 412, 984], "poor": [170, 175, 266, 275, 328, 405, 411, 412, 688, 692, 735, 836, 839, 840, 981, 982, 984, 989, 1007, 1012, 1034, 1035, 1036, 1038, 1040], "grid_resolut": [170, 317, 336, 629, 630, 631], "features_info": 170, "hgbdt_model": 170, "cheaper": [170, 407, 417, 671, 979, 983], "262": [170, 1027], "temperatur": [170, 415, 994], "wind": [170, 988], "meaningless": [170, 415, 901, 904, 1030], "celsiu": [170, 994], "interaction_cst": [170, 320, 414, 559, 560, 1042], "hgbdt_model_without_interact": 170, "histgradientboostingregressor__interaction_cst": 170, "heatmap": [170, 172, 178, 183, 271, 320, 338, 630, 994], "slope": [170, 197, 201, 216, 407, 489, 720, 745, 985, 987], "dry": 170, "wetter": 170, "spike": 170, "degrad": [170, 228, 305, 346, 352, 413, 995], "somehow": 170, "forbidden": [170, 414], "noisili": 170, "partial_depend": [170, 630, 994, 1028, 1036, 1037, 1038, 1039, 1042, 1043], "grid_valu": [170, 631, 1043], "add_ax": [170, 224, 271], "surf": 170, "plot_surfac": [170, 196], "rstride": 170, "cstride": 170, "bupu": 170, "nthe": [170, 258, 360], "pretti": [170, 224, 258, 351, 366, 379, 391, 856, 857, 991, 1036], "view_init": [170, 220, 222, 224], "clb": 170, "ndepend": 170, "386": [170, 173, 875, 1008], "plot_partial_depend": [170, 173, 315, 316, 317, 1008, 1032, 1036, 1037, 1038, 1039, 1040, 1041], "breiman": [171, 411, 414, 514, 515, 516, 553, 554, 562, 563, 632, 907, 908, 995, 1003], "random_num": [171, 995], "random_cat": [171, 995], "sibsp": [171, 320], "parch": [171, 320], "categorical_encod": 171, "numerical_pip": 171, "memor": 171, "mdi_import": [171, 172], "sorted_importances_idx": 171, "retri": [171, 494, 1035, 1041], "classifier__min_samples_leaf": 171, "anymor": [171, 199, 262, 315, 316, 338, 362, 383, 408, 668, 1033, 1036, 1039, 1040, 1041, 1043, 1044], "810": [171, 352, 824], "832": [171, 414, 553, 554], "train_result": 171, "test_result": 171, "train_import": 171, "test_import": 171, "902": [171, 173, 1008], "plot_permutation_import": [171, 172, 173, 1008], "contradict": [172, 1007], "spearman": [172, 633, 634, 978], "perm_sorted_idx": 172, "tree_importance_sorted_idx": 172, "tree_indic": 172, "gini": [172, 199, 217, 240, 272, 317, 551, 552, 555, 556, 557, 558, 562, 563, 564, 785, 907, 908, 909, 910, 976, 995, 1003, 1035, 1036, 1043, 1044], "dilut": [172, 376], "012": [172, 175], "squareform": 172, "spearmanr": 172, "fill_diagon": [172, 223], "distance_matrix": 172, "dist_linkag": 172, "dendro": 172, "to_list": 172, "leaf_rot": 172, "dendro_idx": 172, "ivl": 172, "cluster_id": [172, 352], "fcluster": 172, "cluster_id_to_feature_id": 172, "selected_featur": 172, "selected_features_nam": 172, "x_train_sel": 172, "x_test_sel": 172, "clf_sel": 172, "735": [172, 173, 201, 218, 265, 276, 1008], "plot_permutation_importance_multicollinear": [172, 173, 1008], "polynomialcountsketch": [175, 637, 639, 979, 1039, 1041, 1044], "covtyp": 175, "tensor": [175, 371, 403, 412, 536, 538, 545, 637, 638, 639, 1023, 1039], "sketch": [175, 368, 371, 388, 406, 637, 638, 639, 952, 1023, 1039], "daniel": [175, 320, 366, 880, 997, 1011, 1027, 1028, 1029, 1030, 1032, 1033, 1034, 1035, 1037, 1039, 1041, 1044], "lopez": 175, "sanchez": [175, 1035, 1036], "lope": 175, "usal": 175, "cartograph": 175, "remot": [175, 326, 379, 382], "fetch_covtyp": [175, 238, 317, 374, 1036, 1039, 1041], "5_000": 175, "mm": 175, "lsvm": 175, "lsvm_time": 175, "lsvm_score": 175, "condens": [175, 444], "ps_lsvm_time": 175, "ps_lsvm_score": 175, "ksvm": 175, "ksvm_time": 175, "ksvm_score": 175, "pham": [175, 979, 1034], "ninh": 175, "rasmu": [175, 1034], "pagh": [175, 979], "kdd": [175, 374, 405, 435, 999], "doi": [175, 199, 217, 379, 407, 674], "1145": [175, 407, 674], "2487575": 175, "2487591": 175, "csie": [175, 373, 485, 506, 507, 656], "ntu": [175, 373, 485, 506, 507, 656], "tw": [175, 373, 485, 506, 507, 656, 1002], "cjlin": [175, 373, 485, 506, 507, 656, 1030], "libsvmtool": [175, 373, 485, 506, 507], "plot_scalable_poly_kernel": [175, 176, 1008], "ard": [178, 642, 643], "ol": [178, 189, 194, 196, 197, 205, 216, 318, 654, 983], "true_weight": 178, "ardregress": [178, 183, 643, 928, 983, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1043, 1044], "olr": 178, "brr": 178, "symlognorm": [178, 183], "linthresh": [178, 183], "10e": [178, 183], "cbar_kw": [178, 183], "seismic_r": [178, 183], "stabilis": 178, "retain": [178, 393, 407, 410, 411, 415, 435, 441, 442, 445, 447, 463, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 492, 531, 532, 536, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 608, 609, 633, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 688, 693, 694, 797, 798, 803, 805, 814, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 844, 846, 849, 850, 856, 857, 859, 862, 864, 865, 866, 871, 872, 878, 879, 894, 895, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 976, 1000, 1027], "ard_scor": 178, "scores_": [178, 179, 590, 593, 594, 596, 597, 598, 642, 643, 657, 1027, 1037], "brr_score": 178, "cutoff": [178, 941, 997, 1036], "full_data": 178, "input_featur": [178, 381, 393, 423, 428, 440, 441, 443, 445, 447, 462, 480, 481, 482, 483, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 564, 565, 566, 567, 568, 579, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 625, 626, 627, 628, 633, 636, 637, 638, 639, 640, 686, 687, 690, 843, 848, 851, 855, 858, 859, 862, 863, 864, 865, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 891, 892, 1043], "x_plot": [178, 200, 205, 234, 263, 288, 310], "y_plot": [178, 200, 205, 263], "ard_poli": 178, "brr_poli": 178, "y_ard": 178, "y_ard_std": 178, "y_brr": 178, "y_brr_std": 178, "queri": [178, 286, 296, 366, 413, 418, 442, 444, 448, 455, 550, 608, 609, 626, 642, 643, 723, 753, 839, 840, 841, 842, 843, 844, 845, 847, 849, 850, 851, 987, 990, 1003, 1006, 1010, 1029, 1031, 1032, 1035], "lambda_init": [178, 179, 643, 983, 1037], "intrins": [178, 393, 412, 414, 990, 995, 1001, 1039], "plot_ard": [178, 218, 642, 1008], "alpha_init": [179, 643, 983, 1037], "yoshihiro": [179, 1037], "uchida": [179, 1037], "nimbus1after2a1sun7show": 179, "1234": [179, 248, 263, 379], "n_order": 179, "vander": 179, "ymean": 179, "ystd": 179, "pink": 179, "_init": 179, "lambda_": [179, 642, 643, 875, 983, 1034], "plot_bayesian_ridge_curvefit": [179, 218, 1008], "normalized_weight": 180, "x_offset": 180, "x_center": 180, "x_scale": [180, 869, 885, 997], "uncent": 180, "incorrectli": [180, 414, 415, 551, 557, 559, 731, 737, 987, 1028, 1033, 1035, 1036, 1038, 1043], "lm": 180, "98809919e": 180, "48938813e": 180, "03237920e": 180, "25349312e": 180, "53959628e": 180, "67451144e": 180, "00768662e": 180, "19112072e": 180, "07963978e": 180, "47987268e": 180, "76195467e": 180, "00393284e": 180, "07582983e": 180, "66670169e": 180, "65799352e": 180, "99891212e": 180, "58195950e": 180, "58667835e": 180, "98350372e": 180, "60836363e": 180, "00911944e": 180, "elasticnetifittedelasticnet": 180, "plot_elastic_net_precomputed_gram_matrix_with_weighted_sampl": [180, 218, 1008], "huber": [181, 209, 406, 414, 558, 647, 674, 676, 1001, 1027, 1029, 1030, 1039], "mks542": 181, "x_outlier": [181, 213, 289, 290, 337], "y_outlier": 181, "epsilon_valu": 181, "intercept_": [181, 189, 191, 208, 236, 336, 343, 347, 381, 393, 480, 481, 482, 547, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 899, 900, 901, 902, 903, 904, 905, 981, 983, 1001, 1002, 1027, 1034, 1039, 1041, 1044], "coef_ridg": 181, "plot_huber_vs_ridg": [181, 218, 1008], "logreg": [182, 833], "051": [182, 218, 235, 243, 352, 470, 1008], "plot_iris_logist": [182, 218, 1008], "underdetermin": 183, "time_step": [183, 857], "anti": [183, 362, 604, 834, 989], "9502547": 183, "8059798": 183, "63394388": 183, "70359377": 183, "62241605": 183, "84077985": 183, "30506066": 183, "63327171": 183, "74495357": 183, "02456369": 183, "random_sampl": [183, 839, 840, 844], "sensor": 183, "superposit": 183, "y_pred_lasso": 183, "r2_score_lasso": 183, "y_pred_ard": 183, "r2_score_ard": 183, "elasticnetcv": [183, 393, 398, 644, 650, 658, 659, 660, 661, 679, 983, 1027, 1030, 1038, 1040, 1041, 1044], "enet": [183, 273], "y_pred_enet": 183, "r2_score_enet": 183, "nlasso": 183, "meinshausen": 183, "yu": [183, 407, 450, 460, 656, 983, 991, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041], "246": [183, 351, 995, 1027], "270": [183, 326], "plot_lasso_and_elasticnet": [183, 218, 1008], "penalis": [184, 197, 214, 694], "enet_path": [184, 393, 645, 1029, 1031, 1040], "lasso_path": [184, 649, 650, 651, 652, 653, 654, 661, 680, 681, 983, 1027, 1029, 1031, 1040], "alphas_lasso": 184, "coefs_lasso": 184, "alphas_positive_lasso": 184, "coefs_positive_lasso": 184, "alphas_enet": 184, "coefs_enet": 184, "alphas_positive_enet": 184, "coefs_positive_enet": 184, "neg_log_alphas_lasso": 184, "neg_log_alphas_enet": 184, "coef_l": 184, "neg_log_alphas_positive_lasso": 184, "coef_pl": 184, "neg_log_alphas_positive_enet": 184, "coef_p": 184, "362": [184, 218, 1008], "plot_lasso_coordinate_descent_path": [184, 218, 644, 645, 650, 651, 658, 659, 660, 661, 679, 682, 1008], "sai": [185, 228, 346, 351, 352, 379, 405, 407, 408, 412, 414, 415, 444, 445, 498, 502, 508, 675, 976, 993, 1000, 1011, 1018, 1019, 1021, 1044], "x_sp": 185, "sparse_lasso": 185, "dense_lasso": 185, "coeff_diff": 185, "2e": [185, 274], "116": [185, 1027], "050": [185, 995], "01e": 185, "xs_sp": 185, "tocsc": 185, "nnz": [185, 352, 374, 697], "204": [185, 335, 349, 995, 1000, 1008], "65e": 185, "plot_lasso_dense_vs_sparse_data": [185, 218, 1008], "lars_path": [186, 388, 529, 535, 537, 540, 541, 543, 544, 546, 648, 649, 650, 651, 652, 653, 654, 661, 662, 663, 681, 682, 683, 684, 983, 1027, 1029, 1032, 1036, 1038], "089": [186, 218, 1008], "plot_lasso_lar": [186, 218, 1008], "zht2007": 187, "lassolars": [187, 188, 416, 649, 652, 653, 983, 1027, 1034, 1036, 1040, 1041], "2173": [187, 654, 983], "2192": [187, 654, 983], "038076": [187, 188], "050680": [187, 188], "061696": [187, 188], "021872": [187, 188], "044223": [187, 188], "034821": [187, 188], "043401": [187, 188], "002592": [187, 188], "019907": [187, 188], "017646": [187, 188], "001882": [187, 188], "044642": [187, 188], "051474": [187, 188], "026328": [187, 188], "008449": [187, 188], "019163": [187, 188], "074412": [187, 188], "039493": [187, 188], "068332": [187, 188], "092204": [187, 188], "085299": [187, 188], "044451": [187, 188], "005670": [187, 188], "045599": [187, 188], "034194": [187, 188], "032356": [187, 188], "002861": [187, 188], "025930": [187, 188], "089063": [187, 188], "011595": [187, 188], "036656": [187, 188], "012191": [187, 188], "024991": [187, 188], "036038": [187, 188], "034309": [187, 188], "022688": [187, 188], "009362": [187, 188], "005383": [187, 188], "036385": [187, 188], "003935": [187, 188], "015596": [187, 188], "008142": [187, 188], "031988": [187, 188], "046641": [187, 188], "akaik": [187, 188, 250, 654, 795, 976, 983], "lasso_lars_": [187, 188], "zou_et_al_criterion_resc": 187, "noise_vari": [187, 530, 654, 983, 1041], "aic_criterion": 187, "criterion_": [187, 188, 654], "index_alpha_path_a": 187, "alphas_": [187, 188, 645, 648, 649, 651, 652, 653, 654, 659, 661, 680, 681, 1027, 1030, 1040], "lassolarsic__criterion": [187, 188], "bic_criterion": 187, "index_alpha_path_b": 187, "plot_lasso_lars_": [187, 218, 1008], "n_random_featur": 188, "x_random": 188, "random_": 188, "02d": 188, "random_02": 188, "random_05": 188, "random_08": 188, "random_11": 188, "647689": 188, "234137": 188, "469474": 188, "465730": 188, "012831": 188, "412304": 188, "067528": 188, "110923": 188, "601707": 188, "057711": 188, "208864": 188, "196861": 188, "478522": 188, "057122": 188, "324084": 188, "611676": 188, "331263": 188, "185659": 188, "812526": 188, "003533": 188, "alpha_a": 188, "alpha_b": 188, "160030": 188, "5244": 188, "764779": 188, "300343": 188, "5208": 188, "250639": 188, "5212": 188, "341949": 188, "542052": 188, "4928": 188, "018900": 188, "4936": 188, "201520": 188, "034077": 188, "4869": 188, "678359": 188, "4881": [188, 1032], "952289": 188, "189631": 188, "4815": 188, "437362": 188, "4831": [188, 653], "802601": 188, "329616": 188, "4810": 188, "423641": 188, "4830": 188, "880191": 188, "306012": 188, "4803": 188, "573491": 188, "4828": 188, "121351": 188, "124225": 188, "4804": 188, "126502": 188, "4832": 188, "765671": 188, "820705": 188, "621645": 188, "4836": 188, "352124": 188, "750389": 188, "4805": 188, "012521": 188, "4841": 188, "834310": 188, "570655": 188, "290075": 188, "4846": 188, "203174": 188, "550213": 188, "4807": 188, "075887": 188, "4852": 188, "080295": 188, "358295": 188, "4806": 188, "878051": 188, "4855": 188, "973770": 188, "259297": 188, "706026": 188, "4860": 188, "893055": 188, "237703": 188, "4809": [188, 263], "440409": 188, "4866": 188, "718747": 188, "850031": 188, "989341": 188, "4867": 188, "358990": 188, "384338": 188, "4801": 188, "702266": 188, "163224": 188, "296575": 188, "4802": 188, "594754": 188, "4872": 188, "147022": 188, "031555": 188, "236720": 188, "4874": 188, "880298": 188, "618263": 188, "4798": 188, "484109": 188, "4876": 188, "218997": 188, "526599": 188, "4799": 188, "543841": 188, "370039": 188, "586798": 188, "4794": 188, "238744": 188, "4880": 188, "156252": 188, "445978": 188, "4795": 188, "589715": 188, "4885": 188, "598533": 188, "259031": 188, "4796": 188, "966981": 188, "4891": 188, "067109": 188, "032179": 188, "662409": 188, "4894": 188, "853846": 188, "019069": 188, "652739": 188, "4888": 188, "752867": 188, "626286": 188, "817724": 188, "set_xscal": [188, 204, 802], "badli": [188, 199, 351, 368, 879, 983, 997], "lassolarscv": [188, 398, 416, 650, 651, 652, 654, 661, 663, 680, 681, 682, 983, 1027, 1034, 1040, 1044], "3800": 188, "mse_path_": [188, 645, 649, 651, 653, 659, 661], "cv_alphas_": [188, 649, 653, 1039], "kink": 188, "heavili": [188, 366, 367, 379, 387, 647, 653, 1004], "efficaci": 188, "plot_lasso_model_select": [188, 218, 645, 651, 1008], "126": [189, 218, 414, 1008], "plot_logist": [189, 218, 1008], "axes_row": 190, "clf_l1_lr": 190, "clf_l2_lr": 190, "clf_en_lr": 190, "coef_l1_lr": 190, "coef_l2_lr": 190, "coef_en_lr": 190, "sparsity_l1_lr": 190, "sparsity_l2_lr": 190, "sparsity_en_lr": 190, "nl1_ratio": 190, "plot_logistic_l1_l2_spars": [190, 218, 1008], "995": 191, "plot_logistic_multinomi": [191, 218, 1008], "976": [191, 268], "dupr": [191, 207, 283, 285, 1032, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043], "m4x": [191, 215], "sag": [191, 206, 656, 657, 670, 672, 685, 983, 1001, 1006, 1032, 1033, 1034, 1036, 1037], "bry": [191, 208], "plot_hyperplan": [191, 208, 236], "273": [191, 218, 1008], "looser": 192, "liblinear": [192, 336, 385, 656, 657, 785, 899, 900, 901, 904, 905, 983, 987, 1002, 1027, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1043], "l1_min_c": [192, 983, 1002, 1027], "intercept_sc": [192, 656, 657, 899, 900, 906, 983, 1002], "coefs_": [192, 301, 856, 857, 991, 1032], "plot_logistic_path": [192, 218, 1008], "jointli": [193, 267, 406, 407, 412, 983], "instant": 193, "wave": [193, 379, 986], "n_task": [193, 983], "n_relevant_featur": 193, "multitasklasso": [193, 650, 658, 661, 983, 1027, 1035, 1038, 1040], "coef_lasso_": 193, "coef_multi_task_lasso_": 193, "spy": 193, "feature_to_plot": 193, "seagreen": 193, "331": [193, 218, 1008], "plot_multi_task_lasso_support": [193, 218, 1008], "reg_nnl": 194, "y_pred_nnl": 194, "r2_score_nnl": 194, "nnl": [194, 655], "8225220806196525": 194, "reg_ol": 194, "y_pred_ol": 194, "r2_score_ol": 194, "7436926291700353": 194, "low_x": 194, "high_x": 194, "low_i": 194, "high_i": 194, "get_ylim": [194, 305, 306], "847222222222214": 194, "plot_nnl": [194, 218, 1008], "23786125": 195, "2548": 195, "diabetes_x": [195, 1019], "diabetes_i": [195, 1019], "diabetes_x_train": [195, 1019], "diabetes_x_test": [195, 1019], "diabetes_y_train": [195, 1019], "diabetes_y_test": [195, 1019], "regr": [195, 408, 552, 554, 563, 644, 645, 665, 832, 857, 900, 902, 905, 1002, 1019], "diabetes_y_pr": 195, "plot_ol": [195, 218, 1008], "plot_fig": 196, "fig_num": 196, "plot_ols_3d": [196, 218, 1008], "greatli": [197, 233, 320, 379, 387, 450, 990, 1003, 1033, 1041], "plot_ols_ridge_vari": [197, 218, 1008], "make_sparse_coded_sign": [198, 529, 535, 543, 544, 1041, 1043], "orthogonalmatchingpursuit": [198, 663, 683, 684, 983, 1027, 1029, 1032, 1035, 1040], "orthogonalmatchingpursuitcv": [198, 398, 662, 1029, 1040, 1044], "n_nonzero_coef": [198, 524, 529, 535, 540, 543, 544, 546, 648, 662, 683, 684], "xw": [198, 318, 644, 645, 647, 650, 651, 652, 653, 654, 658, 659, 660, 661, 670, 679, 680, 681, 682, 983], "_0": [198, 683, 983, 987, 1002], "distort": [198, 232, 376, 405, 406, 876, 888, 893, 984, 997, 999], "y_noisi": 198, "idx_r": 198, "omp_cv": 198, "plot_omp": [198, 218, 1008], "contract": [199, 217, 342, 367, 393, 1007], "compani": [199, 217, 407, 1011], "policyhold": [199, 217, 983], "vehicl": [199, 217], "driver": [199, 217, 1042], "exposur": [199, 217, 983], "car": 199, "accid": [199, 217], "noll": [199, 217], "salzmann": [199, 217], "wuthrich": [199, 217], "2139": [199, 217], "ssrn": [199, 217], "3164764": [199, 217], "ch": [199, 201, 217, 328, 330], "rth": [199, 217], "41214": [199, 217], "idpol": [199, 217], "claimnb": [199, 217], "vehpow": [199, 217], "vehag": [199, 217], "drivag": [199, 217], "bonusmalu": [199, 217], "vehbrand": [199, 217], "vehga": [199, 217], "b12": [199, 217], "1217": 199, "r82": 199, "77000": 199, "75000": 199, "diesel": [199, 217], "r22": 199, "09000": 199, "r72": 199, "84000": 199, "678008": 199, "6114326": 199, "00274": 199, "3317": 199, "r93": 199, "678009": 199, "6114327": 199, "9850": 199, "r11": [199, 217], "678010": 199, "6114328": 199, "1323": 199, "678011": 199, "6114329": 199, "r26": 199, "678012": 199, "6114330": 199, "678013": [199, 217], "10070308464041304": 199, "log_scale_transform": [199, 217], "linear_model_preprocessor": 199, "passthrough_numer": [199, 217], "binned_numer": [199, 217], "2e5": [199, 217], "log_scaled_numer": [199, 217], "onehot_categor": [199, 217], "imbalanc": [199, 263, 267, 269, 352, 391, 405, 411, 701, 706, 784, 797, 801, 836, 987, 989, 995, 1006], "simplist": [199, 415], "pertin": 199, "dummyregressor": [199, 217, 549, 987, 1028, 1030, 1031, 1034, 1035, 1037, 1040, 1041, 1045], "df_train": [199, 217], "df_test": [199, 217], "regressor__sample_weight": 199, "mean_poisson_devi": [199, 987, 1037], "score_estim": [199, 217], "n_mask": 199, "564": 199, "commonli": [199, 257, 342, 372, 393, 407, 408, 417, 612, 755, 756, 794, 828, 871, 984, 985, 987, 988, 990, 1043], "ridge_glm": 199, "strictli": [199, 217, 235, 305, 321, 352, 384, 393, 405, 410, 412, 415, 506, 507, 533, 539, 542, 559, 560, 586, 589, 640, 668, 669, 693, 698, 736, 763, 796, 799, 800, 806, 810, 822, 848, 875, 887, 891, 892, 894, 895, 899, 900, 904, 905, 934, 976, 978, 983, 987, 997, 1001, 1028, 1038, 1043], "domain": [199, 311, 393, 396, 411, 633, 719, 720, 721, 797, 798, 803, 804, 805, 983, 1007], "560": [199, 348, 349, 515, 516, 1008], "595": 199, "223745": 199, "597": 199, "glm": [199, 217, 316, 646, 667, 678, 983, 1027, 1038], "vanilla": [199, 403, 407, 445, 447, 458, 627], "poissonregressor": [199, 217, 316, 319, 646, 678, 983, 1038, 1041, 1042], "poisson_glm": 199, "newton": [199, 217, 302, 608, 646, 656, 657, 667, 678, 856, 857, 983, 1031, 1032, 1034, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "deep": [199, 381, 393, 414, 421, 432, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 462, 463, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 686, 687, 688, 689, 690, 766, 794, 795, 796, 799, 800, 810, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 858, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 891, 892, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 991, 992, 1006, 1007, 1011, 1032, 1038, 1039, 1041], "implicit": [199, 393, 414, 415, 570, 680, 681, 981, 986, 1006, 1036], "concis": [199, 379, 384, 1038, 1040], "poisson_gbrt": 199, "566": 199, "prone": [199, 247, 309, 391, 405], "5e5": 199, "realiz": [199, 1011], "priori": [199, 216, 269, 281, 305, 393, 407, 414, 586, 592, 986, 1043], "wrongli": [199, 338], "gen_even_slic": [199, 388, 939], "_mean_frequency_by_risk_group": 199, "y_true_bin": 199, "y_pred_bin": 199, "idx_sort": 199, "sl": 199, "y_true_seg": 199, "y_pred_seg": 199, "11935": 199, "11933": 199, "11932": 199, "12196": 199, "11931": 199, "portfolio": [199, 217, 981], "riskiest": [199, 217], "safest": [199, 217, 362, 373], "irrespect": [199, 232, 269, 283, 604], "lorenz": [199, 217, 1032, 1044], "summar": [199, 251, 267, 269, 353, 379, 381, 396, 414, 519, 656, 692, 704, 705, 983, 984, 987, 993], "lorenz_curv": [199, 217], "ranked_frequ": 199, "ranked_exposur": [199, 217], "cumulated_claim": 199, "cumulated_exposur": 199, "cum_exposur": 199, "cum_claim": [199, 217], "0x7f582696a550": 199, "occurr": [199, 311, 352, 353, 374, 379, 407, 415, 567, 568, 579, 587, 588, 615, 625, 626, 627, 628, 780, 834, 862, 989, 1028, 1033], "circumstanti": 199, "extractor": [199, 302, 368, 374, 393, 415, 501, 579, 580, 586, 587, 589, 976, 1027], "discrim": 199, "profil": [199, 366, 379, 382, 519, 522, 983, 1011], "ideal": [199, 201, 217, 257, 260, 267, 269, 270, 362, 378, 379, 383, 384, 387, 391, 393, 405, 723, 753, 976, 986, 1001, 1002, 1007, 1010], "meaningfulli": [199, 987], "435": [199, 218, 1008], "plot_poisson_regression_non_normal_loss": [199, 218, 1008], "monomi": 200, "vandermond": [200, 997], "x_0": [200, 655], "pseudo": [200, 302, 381, 411, 419, 438, 450, 452, 460, 467, 468, 469, 471, 472, 473, 474, 531, 559, 560, 561, 625, 632, 637, 639, 640, 644, 645, 650, 651, 658, 659, 660, 661, 675, 689, 693, 799, 800, 808, 810, 848, 855, 891, 892, 896, 899, 900, 901, 904, 935, 936, 983, 999, 1032, 1041], "basis_1": 200, "basis_2": 200, "infinit": [200, 245, 263, 342, 366, 417, 444, 620, 621, 775, 794, 917, 919, 920, 979, 986, 997, 1002, 1035, 1037, 1040, 1041, 1042, 1044], "malt": [200, 1040, 1041, 1042, 1044], "londschien": [200, 1040, 1044], "prepar": [200, 235, 351, 366, 381, 382, 385, 387, 1003, 1011, 1035, 1043], "set_prop_cycl": 200, "teal": [200, 209, 267], "yellowgreen": [200, 202, 209, 358], "tomato": 200, "unwant": [200, 351], "oscillatori": [200, 997], "danger": [200, 411], "pft": 200, "splt": 200, "bsplines_": [200, 878], "refrain": [200, 379], "dec": [200, 278, 675, 878, 903, 1002], "31st": [200, 878], "x_plot_ext": 200, "y_plot_ext": 200, "plot_polynomial_interpol": [200, 218, 874, 878, 1008], "pareto": 201, "dale": [201, 1040], "mail": [201, 310, 374, 379, 383, 387, 391, 394, 1035, 1036], "ru": 201, "glemaitre58": 201, "y_true_mean": 201, "y_normal": 201, "y_pareto": 201, "huge": [201, 204, 366, 385, 625, 1030], "heavi": [201, 391, 404, 1007], "parse_vers": [201, 668], "sp_version": [201, 668], "incompat": [201, 383, 494, 977, 1035, 1036], "older": [201, 235, 378, 383, 1010, 1025, 1030, 1037, 1039], "interior": [201, 668, 983, 1042], "out_bounds_predict": 201, "bool_": 201, "logical_or": [201, 207, 269, 385], "hit": [201, 385], "asymmetri": [201, 351], "linger": 201, "linear_regress": [201, 274], "quantile_regress": 201, "y_pred_lr": 201, "y_pred_qr": 201, "805": 201, "670": 201, "cv_results_lr": 201, "cv_results_qr": 201, "test_neg_mean_squared_error": [201, 822], "732": 201, "690": 201, "679": [201, 899], "129": [201, 1017, 1027], "plot_quantile_regress": [201, 218, 1008], "robustli": [202, 406], "faulti": [202, 1027], "1903908407869": 202, "17236387": 202, "08533159": 202, "ransacregressor": [202, 205, 216, 398, 647, 676, 677, 983, 1030, 1032, 1033, 1034, 1035, 1038, 1040, 1041], "inlier_mask": 202, "inlier_mask_": [202, 669], "outlier_mask": 202, "line_x": [202, 216], "line_i": 202, "line_y_ransac": 202, "estimator_": [202, 235, 427, 551, 552, 553, 554, 555, 556, 561, 562, 563, 564, 591, 592, 595, 669, 971, 1042], "plot_ransac": [202, 218, 1008], "mathcal": [203, 346, 412, 414, 625, 694, 979, 981, 983, 987, 1001, 1040], "discourag": [203, 391, 397, 687], "beta_": [203, 412], "excess": [203, 444, 997, 1034], "encourag": [203, 299, 338, 378, 379, 391, 1002, 1006], "kornel": [203, 1033], "kielczewski": [203, 1033], "plusnet": 203, "32634568": 203, "49665188": 203, "75747153": 203, "08699432": 203, "44381023": 203, "69892343": 203, "28808734": 203, "75949622": 203, "errors_coef": 203, "regularis": [203, 420, 471, 473], "logx": [203, 346], "gradual": [203, 856, 857, 1001], "formerli": [203, 1028, 1031, 1033, 1034], "intric": [203, 510], "rapidli": [203, 262, 1002, 1011, 1015], "influenti": [203, 352, 1011], "pose": [203, 268, 983, 1020], "lose": [203, 216, 353, 374, 393, 410, 415, 417, 935, 936, 977, 983, 1021], "concret": [203, 380, 394, 416, 666, 672, 673, 674, 675, 891, 892, 983, 1001, 1006], "plot_ridge_coeff": [203, 218, 1008], "practis": 204, "10x10": 204, "hilbert": [204, 865, 979, 997], "n_alpha": [204, 470, 644, 645, 648, 649, 650, 651, 652, 653, 654, 658, 659, 660, 661, 671, 673, 679, 680, 681, 682, 1030], "424": [204, 217, 218, 1008], "plot_ridge_path": [204, 218, 1008], "theilsen": 205, "lessen": [205, 656, 657], "theilsenregressor": [205, 216, 647, 669, 676, 983, 1031, 1039, 1041], "x_error": 205, "y_errors_larg": 205, "x_errors_larg": 205, "deviant": [205, 993], "legend_titl": 205, "nabsolut": 205, "nto": [205, 269], "plot_robust_fit": [205, 218, 1008], "asgd": [206, 1001], "rob": [206, 1027, 1028, 1029, 1031, 1032, 1033, 1034, 1035, 1039, 1042], "zinkov": [206, 1027, 1028, 1029, 1031, 1032], "heldout": 206, "squared_hing": [206, 346, 664, 674, 899, 906, 983, 1002], "0e4": 206, "yy_": 206, "422": [206, 218, 591, 592, 723, 753, 987, 1008], "plot_sgd_comparison": [206, 218, 1008], "_test": [207, 307, 367, 381, 1040], "ignore_warn": [207, 307, 1033], "load_mnist": [207, 283], "class_0": [207, 376, 508], "class_1": [207, 376, 508], "554": [207, 215, 301], "mnist_784": [207, 215, 283, 301], "fit_and_scor": 207, "train_scor": [207, 311, 346, 356, 802, 818, 822, 823, 826, 982], "estimator_dict": 207, "flush": 207, "results_df": [207, 260, 311], "group_df": 207, "425": [207, 218, 221, 613, 1008], "plot_sgd_early_stop": [207, 218, 1008], "ova": [208, 664, 666, 674, 1001], "plot_sgd_iri": [208, 218, 1008], "ugli": [208, 291, 294, 334], "dim": [208, 232, 291, 292, 294, 334, 335, 525, 697, 1044], "136": [208, 218, 1008], "modified_huber_loss": 209, "darkorchid": 209, "plot_sgd_loss_funct": [209, 218, 1008], "l1_color": 210, "l2_color": 210, "elastic_net_color": 210, "1001": [210, 242], "rho": [210, 412, 675, 983, 1001, 1028], "elastic_net": 210, "dpi": [210, 913, 1040], "elastic_net_contour": 210, "l2_contour": 210, "l1_contour": 210, "plot_sgd_penalti": [210, 218, 1008], "ndenumer": 211, "072": [211, 218, 435, 646, 1008], "plot_sgd_separating_hyperplan": [211, 218, 1008], "no_weight": 212, "samples_weight": 212, "no_weights_handl": 212, "weights_handl": 212, "plot_sgd_weighted_sampl": [212, 218, 1008], "sgdoneclasssvm": [213, 228, 318, 903, 993, 1001, 1040, 1042, 1043, 1044], "rc": [213, 383], "novel": [213, 289, 337, 362, 405, 976], "abnorm": [213, 228, 289, 337, 374, 490, 561, 845, 993, 1035], "y_pred_train": [213, 337], "y_pred_test": [213, 289, 337], "y_pred_outli": [213, 289, 337], "n_error_train": [213, 337], "n_error_test": [213, 289, 337], "n_error_outli": [213, 289, 337], "clf_sgd": 213, "pipe_sgd": 213, "y_pred_train_sgd": 213, "y_pred_test_sgd": 213, "y_pred_outliers_sgd": 213, "n_error_train_sgd": 213, "n_error_test_sgd": 213, "n_error_outliers_sgd": 213, "pubu": [213, 232, 289, 337], "darkr": [213, 289, 337], "palevioletr": [213, 289, 337], "b1": [213, 289, 337], "b2": [213, 289, 337], "blueviolet": [213, 289, 337], "487": [213, 218, 721, 1008], "plot_sgdocsvm_vs_ocsvm": [213, 218, 1008], "newgroups20": 214, "trim": [214, 407, 839, 840], "20newsgroup": [214, 372, 1027], "4500": 214, "130107": [214, 232, 487], "epoch": [214, 393, 534, 664, 665, 666, 674, 675, 676, 856, 857, 1001, 1034, 1035, 1040], "5960": 214, "26593496": 214, "43348936": 214, "26362917": 214, "31973683": 214, "37815029": 214, "2928359": 214, "27054655": 214, "62717609": 214, "19522393": 214, "30897646": 214, "34586917": 214, "28207552": 214, "34125758": 214, "29898468": 214, "34279478": 214, "59489497": 214, "38353048": 214, "35278655": 214, "19829832": 214, "14603365": 214, "6440": 214, "36047253": 214, "1268187": 214, "10606655": 214, "17985197": 214, "5395559": 214, "07993421": 214, "06686804": 214, "21443888": 214, "11528972": 214, "2075215": 214, "10914094": 214, "11144673": 214, "13988486": 214, "09684337": 214, "26286057": 214, "11682692": 214, "55800226": 214, "17370318": 214, "11452112": 214, "arthur": [214, 215, 407, 445, 458, 1032, 1033, 1034, 1035, 1036, 1039, 1041], "mensch": [214, 215, 1032, 1033, 1034, 1035], "timeit": [214, 248, 385], "default_tim": [214, 248], "model_param": 214, "this_max_it": 214, "train_tim": [214, 234, 351, 352], "ndataset": [214, 307], "run_tim": [214, 215], "plot_sparse_logistic_regression_20newsgroup": [214, 218, 1008], "8253": 215, "l1_plot": 215, "280": [215, 218, 326, 1008], "plot_sparse_logistic_regression_mnist": [215, 218, 1008], "subpopul": [216, 677, 983], "residual_threshold": [216, 669, 983, 1040], "remedi": 216, "max_subpopul": [216, 677, 1041], "florian": [216, 1011, 1027, 1031, 1033, 1037, 1044], "wilhelm": [216, 1031, 1033, 1037], "indigo": 216, "576": [216, 218, 353, 1008], "plot_theilsen": [216, 218, 1008], "motor": 217, "parti": [217, 278, 321, 367, 378, 391, 798, 805, 955, 1027, 1038, 1043, 1044], "liabil": 217, "functool": 217, "mean_tweedie_devi": [217, 987, 1037], "load_mtpl2": 217, "fremtpl2freq": 217, "df_freq": 217, "inplac": [217, 238, 272, 452, 480, 481, 482, 483, 854, 862, 865, 868, 869, 871, 875, 876, 877, 879, 960, 963, 964, 965, 969, 970, 1036], "fremtpl2sev": 217, "41215": 217, "df_sev": 217, "claimamount": 217, "fillna": [217, 238], "unquot": 217, "column_nam": 217, "plot_obs_pr": 217, "y_label": 217, "fill_legend": 217, "df_": 217, "tweedie_pow": 217, "d\u00b2": 217, "subset_label": 217, "score_label": [217, 266], "est_freq": 217, "est_sev": 217, "unstack": [217, 263], "fremtpl2": 217, "unreason": [217, 411], "exception": 217, "200000": 217, "column_tran": [217, 408], "purepremium": 217, "indirectli": [217, 342], "avgclaimamount": 217, "fmax": 217, "option_context": 217, "max_column": 217, "139": [217, 283, 385, 414, 450, 460, 689, 693, 988], "414": [217, 408, 723, 753, 875, 887, 987], "463": [217, 278], "27000": 217, "303": [217, 633], "404": 217, "333333": 217, "r25": 217, "1981": [217, 983], "14156": 217, "142857": 217, "4792": 217, "1456": 217, "10403": 217, "928571": 217, "10834": 217, "17474": 217, "193548": 217, "225806": 217, "r73": 217, "3986": 217, "12860": [217, 1036], "5417": 217, "seemingli": [217, 362, 391], "169504": 217, "6237": 217, "upon": [217, 225, 296, 374, 379, 391, 393, 401, 559, 560, 625, 628, 669, 786, 794, 795, 839, 840, 976, 983, 1003, 1012, 1021, 1041], "glm_freq": 217, "0448": 217, "0427": [217, 467, 472], "1379": 217, "1378": 217, "2441": 217, "2246": 217, "surprisingli": [217, 374, 415], "bonu": [217, 377, 379, 1016, 1021], "malu": 217, "younger": 217, "infti": [217, 417, 617, 983, 997, 1034], "gammaregressor": [217, 316, 319, 678, 983, 1038, 1041, 1042], "mask_test": 217, "glm_sev": 217, "900000e": 217, "400000e": 217, "756746e": 217, "744042e": 217, "801770e": 217, "030677e": 217, "dummy_sev": 217, "000000e": 217, "756687e": 217, "744497e": 217, "803882e": 217, "033764e": 217, "avgclaim": 217, "nbclaim": 217, "1951": 217, "1978": [217, 983], "apriori": 217, "regardless": [217, 261, 262, 263, 367, 379, 407, 533, 630, 631, 656, 702, 713, 987, 999, 1035, 1042, 1043], "glm_pure_premium": 217, "999": [217, 260, 383, 414, 715, 856, 857], "scores_product_model": 217, "scores_glm_pure_premium": 217, "expand_frame_repr": 217, "640000e": 217, "370000e": 217, "669930e": 217, "617050e": 217, "640770e": 217, "640880e": 217, "7000": 217, "695740e": 217, "683980e": 217, "682880e": 217, "692270e": 217, "8000": [217, 263, 264], "046010e": 217, "040530e": 217, "037600e": 217, "045390e": 217, "9000": 217, "387580e": 217, "385000e": 217, "382120e": 217, "387830e": 217, "9900": 217, "015716e": 217, "015414e": 217, "015347e": 217, "015587e": 217, "9990": 217, "914573e": 217, "914370e": 217, "914538e": 217, "914387e": 217, "904751e": 217, "904556e": 217, "904747e": 217, "904558e": 217, "730119e": 217, "722128e": 217, "739865e": 217, "731249e": 217, "295040e": 217, "212197e": 217, "295505e": 217, "213056e": 217, "917618e": 217, "299546e": 217, "916555e": 217, "313276e": 217, "951751e": 217, "325198e": 217, "riski": 217, "operation": [217, 1011], "simpler": [217, 338, 366, 378, 407, 412, 983, 988, 1019, 1032], "ranked_pure_premium": 217, "cumulated_claim_amount": 217, "cumulated_sampl": 217, "y_pred_product": 217, "y_pred_tot": 217, "ordered_sampl": 217, "430": [217, 218, 419, 531, 1008], "plot_tweedie_regression_insurance_claim": [217, 218, 1008], "718": 218, "md": [220, 221, 222, 223, 383, 686, 690, 692, 1022, 1023, 1027, 1039, 1042], "seek": [220, 222, 224, 378, 379, 391, 394, 506, 507, 984, 1010, 1013, 1015], "ticker": [220, 222, 225, 283], "s_point": 220, "s_color": 220, "make_s_curv": [220, 225], "plot_3d": 220, "points_color": 220, "subplot_kw": [220, 287], "set_major_loc": [220, 288], "multipleloc": [220, 288], "add_2d_scatt": 220, "set_major_formatt": [220, 222, 225, 283, 288], "nullformatt": [220, 222, 225, 283], "lle": [220, 221, 222, 224, 528, 687, 691, 984, 1039], "thought": [220, 288, 393, 407, 444, 984, 988], "analys": [220, 360, 412, 799, 800, 984, 1006, 1011], "lle_standard": 220, "s_standard": 220, "lle_ltsa": 220, "ltsa": [220, 221, 222, 687, 691, 984], "s_ltsa": 220, "lle_hessian": 220, "hessian": [220, 221, 222, 414, 646, 656, 657, 667, 678, 687, 691, 983, 991, 1022, 1023, 1042], "s_hessian": 220, "lle_mod": 220, "s_mod": 220, "lle_method": 220, "tangent": [220, 342, 687, 691, 985, 1022, 1023], "eigenmap": [220, 687, 689, 691, 693, 1022, 1023, 1028], "isometr": [220, 686, 688, 689, 690, 984], "geodes": [220, 686, 984], "s_isomap": 220, "md_scale": 220, "normalized_stress": [220, 688, 692, 984, 1042], "s_scale": 220, "laplacian": [220, 371, 404, 438, 450, 460, 618, 637, 641, 689, 693, 762, 763, 771, 895, 983, 984, 1000, 1023, 1028, 1033], "s_spectral": 220, "t_sne": [220, 1035], "s_t_sne": 220, "207": [220, 226, 264, 276, 302, 1008, 1027], "plot_compare_method": [220, 226, 1008], "offsetbox": 221, "plot_embed": 221, "shown_imag": 221, "someth": [221, 235, 278, 351, 379, 381, 382, 383, 387, 415, 987, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "4e": 221, "imagebox": 221, "annotationbbox": 221, "offsetimag": 221, "neighborhoodcomponentsanalysi": [221, 291, 292, 293, 990, 1036, 1041], "random_project": [221, 232, 999, 1004, 1028, 1033, 1043, 1044], "sparserandomproject": [221, 232, 891, 999, 1028, 1033, 1041, 1043, 1044], "n_iter_without_progress": [221, 690, 1032, 1033], "nca": [221, 291, 292, 293, 848, 990], "996": [221, 226, 1008], "plot_lle_digit": [221, 226, 1008], "pole": 222, "thin": [222, 618], "earth": [222, 352, 761, 1006], "062": 222, "sphere_data": 222, "trans_data": 222, "2g": [222, 225, 695, 1038], "257": [222, 258], "258": 222, "294": [222, 226, 1008], "plot_manifold_spher": [222, 226, 1008], "euclidean_dist": [223, 232, 381, 448, 452, 455, 686, 692, 759, 841, 842, 843, 845, 847, 849, 850, 851, 852, 853, 1027, 1032, 1035, 1036, 1044], "finfo": [223, 469, 470, 476, 604, 648, 649, 652, 653, 654, 680, 681, 738, 1042], "x_true": 223, "dissimilar": [223, 342, 393, 404, 450, 688, 692, 984, 1033, 1043], "embedding_": [223, 393, 686, 687, 688, 689, 690], "nmd": 223, "npo": 223, "196": [223, 226, 236, 243, 311, 313, 896, 1000, 1008], "plot_md": [223, 226, 1008], "sr_point": 224, "sr_color": 224, "ambient": 224, "text2d": 224, "unrol": 224, "unnecessarili": [224, 1034, 1037], "clump": 224, "sr_lle": 224, "sr_err": 224, "locally_linear_embed": [224, 984], "sr_tsne": 224, "stretch": [224, 249], "byproduct": 224, "sh_point": 224, "sh_color": 224, "topologi": [224, 225], "sh_lle": 224, "sh_err": 224, "sh_tsne": 224, "093": [224, 226, 352, 469, 1008], "plot_swissrol": [224, 226, 1008], "tendenc": [225, 983, 984, 986, 989, 992], "clearer": [225, 1002], "distil": 225, "pub": [225, 837, 894], "misread": 225, "narin": [225, 1034, 1035], "kokhlikyan": [225, 1034, 1035], "441": [225, 226, 329, 352, 1008], "plot_t_sne_perplex": [225, 226, 1008], "227": [226, 260, 407, 722], "cope": [228, 368, 374, 983], "multimod": 228, "inli": [228, 983, 993], "unimod": [228, 472], "localoutlierfactor": [228, 238, 289, 290, 319, 393, 561, 903, 993, 1034, 1035, 1037, 1041, 1042, 1043, 1044], "modal": [228, 472, 938], "hypercub": [228, 513], "decent": [228, 259, 374, 989], "handpick": 228, "absenc": [228, 263, 393, 710, 862, 986, 987], "negative_linestyl": 228, "outliers_fract": 228, "n_inlier": 228, "anomaly_algorithm": 228, "blobs_param": 228, "plot_anomaly_comparison": [228, 243, 1008], "transfus": 229, "1464": 229, "donat": 229, "cm_displai": 229, "y_score": [229, 267, 269, 393, 480, 481, 482, 705, 718, 723, 724, 736, 737, 753, 779, 785, 786, 791, 796, 799, 800, 810, 859, 987, 1033, 1041, 1043], "pos_label": [229, 238, 393, 436, 437, 696, 698, 700, 704, 705, 707, 724, 726, 727, 735, 779, 780, 781, 784, 786, 866, 883, 987, 1035, 1039, 1041, 1045], "roc_displai": 229, "previs": 229, "precision_recall_curv": [229, 267, 698, 704, 705, 724, 987, 1028, 1029, 1033, 1040, 1041, 1043, 1045], "pr_displai": 229, "easlii": 229, "338": [229, 238, 243, 1008], "plot_display_object_visu": [229, 243, 1008], "summaris": [230, 316], "composit": [230, 316, 371, 411, 656, 785, 977, 983, 996, 1023, 1028], "num_proc": [230, 316], "cat_proc": [230, 316], "feat1": [230, 316, 415], "feat3": [230, 316, 415], "feat0": [230, 316], "feat2": [230, 316, 415], "plot_estimator_represent": [230, 243, 1008], "isotonicregress": [231, 978, 1028, 1029, 1030, 1031, 1033, 1035, 1036, 1037, 1039, 1041, 1042, 1043], "ir": [231, 412, 588, 723, 753, 834, 838, 985, 987], "out_of_bound": [231, 633], "y_": [231, 246, 250, 251, 295, 381, 410, 412, 635, 646, 667, 678, 726, 727, 735, 761, 780, 781, 784, 983, 987, 1033], "linearregressionifittedlinearregress": 231, "x_thresholds_": [231, 633, 1039], "y_thresholds_": [231, 633, 1039], "plot_isotonic_regress": [231, 243, 1008], "lemma": [232, 371, 406, 532, 539, 547, 891, 892, 893, 981, 1023, 1030], "johnson_lindenstrauss_min_dim": [232, 999, 1028], "achliopta": [232, 892, 893, 999], "_compon": [232, 534], "geq": [232, 405, 412, 414, 983, 987, 997, 1001, 1002], "_sampl": [232, 412, 536, 538, 545], "admiss": [232, 367], "eps_rang": 232, "min_n_compon": 232, "nn_sampl": [232, 272], "semilogi": 232, "nn_compon": [232, 233], "100k": 232, "n_components_rang": 232, "rp": 232, "projected_data": 232, "n_byte": 232, "projected_dist": 232, "min_dist": 232, "max_dist": 232, "hexbin": 232, "gridsiz": 232, "293": 232, "840": [232, 385], "268": [232, 246], "jl": [232, 892], "436": [232, 352], "plot_johnson_lindenstrauss_bound": [232, 243, 1008], "rbfsampler": [233, 637, 638, 640, 979, 1012, 1031, 1041, 1042], "mont": [233, 417, 609, 639, 640, 979, 992], "fourier": [233, 406, 636, 637, 638, 639, 640, 755, 756, 979], "acceler": [233, 320, 366, 391, 403, 407, 466, 690, 897, 984, 1006, 1011, 1036, 1040, 1042, 1044], "data_train": [233, 261, 351], "targets_train": 233, "data_test": [233, 261, 351], "targets_test": 233, "kernel_svm": 233, "linear_svm": 233, "feature_map_fouri": 233, "feature_map_nystroem": [233, 637], "fourier_approx_svm": 233, "feature_map": [233, 305], "nystroem_approx_svm": 233, "kernel_svm_tim": 233, "kernel_svm_scor": 233, "linear_svm_tim": 233, "linear_svm_scor": 233, "fourier_scor": 233, "nystroem_scor": 233, "fourier_tim": 233, "nystroem_tim": 233, "feature_map__n_compon": 233, "timescal": 233, "ly": [233, 847, 849, 850, 851, 1031], "flat_grid": 233, "lv_ep": 233, "tab10": [233, 250], "744": [233, 243, 258, 283, 1008], "plot_kernel_approxim": [233, 243, 1008], "krr": [234, 641, 980], "insensit": [234, 641, 674, 676, 785, 900, 980, 1001, 1002, 1027], "fifth": [234, 980, 1012], "kr": [234, 260, 1041], "svr_fit": 234, "kr_fit": 234, "sv_ratio": 234, "support_": [234, 345, 467, 472, 591, 592, 600, 901, 902, 903, 904, 905, 1002], "y_svr": 234, "svr_predict": 234, "y_kr": 234, "kr_predict": 234, "09999999999999999": [234, 268, 338], "737": [234, 522], "213": 234, "340": [234, 325], "sv_ind": 234, "arithmet": [234, 385, 387, 407, 549, 646, 667, 678, 702, 715, 733, 734, 754, 792, 987, 1035], "test_tim": [234, 351], "train_test_s": 234, "learningcurvedisplai": [234, 262, 320, 982, 1042, 1043], "negate_scor": [234, 802, 818], "score_typ": [234, 262, 275, 321, 802, 818, 1043], "std_display_styl": [234, 262, 802, 818], "get_legend_handles_label": [234, 262, 267], "416": [234, 243, 736, 987, 1008], "plot_kernel_ridge_regress": [234, 243, 1008], "set_config": [235, 240, 242, 312, 316, 322, 366, 367, 398, 408, 435, 441, 442, 445, 447, 462, 463, 466, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 531, 532, 536, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 586, 588, 589, 592, 595, 608, 609, 624, 625, 633, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 688, 797, 798, 803, 805, 814, 820, 821, 822, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 844, 846, 849, 850, 856, 857, 859, 862, 864, 865, 866, 871, 878, 879, 894, 895, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 1036, 1038, 1041, 1043], "metaestimatormixin": 235, "regressormixin": [235, 381, 393, 463, 1038], "transformermixin": [235, 283, 381, 393, 463, 1035, 1042, 1043, 1044], "metadata_rout": [235, 406, 435, 441, 442, 445, 447, 463, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 531, 532, 536, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 586, 588, 589, 592, 608, 609, 633, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 688, 797, 798, 803, 805, 814, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 844, 846, 849, 850, 856, 857, 859, 862, 864, 865, 866, 871, 878, 879, 894, 895, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910], "metadatarout": [235, 435, 462, 595, 625, 645, 649, 651, 653, 657, 659, 661, 663, 796, 799, 800, 810, 827, 828, 829, 830, 831, 832, 833, 859, 946, 1044], "methodmap": [235, 944], "get_routing_for_object": [235, 944], "process_rout": [235, 1044], "my_group": [235, 398], "my_weight": [235, 398], "my_other_weight": [235, 398], "enable_metadata_rout": [235, 322, 398, 435, 441, 442, 445, 447, 462, 463, 466, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 531, 532, 536, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 586, 588, 589, 592, 595, 608, 609, 625, 633, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 688, 796, 797, 798, 799, 800, 803, 805, 810, 814, 820, 821, 822, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 844, 846, 849, 850, 856, 857, 859, 862, 864, 865, 866, 871, 878, 879, 894, 895, 897, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 1043], "check_metadata": 235, "obj": [235, 401, 565, 566, 944, 945, 946, 947, 948, 953], "print_rout": 235, "get_metadata_rout": [235, 421, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 462, 463, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 608, 609, 625, 626, 627, 628, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 686, 687, 688, 689, 690, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806, 809, 810, 811, 812, 813, 814, 815, 816, 817, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 858, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 891, 892, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 943, 944, 945, 946, 947, 987, 1044], "_serial": 235, "exampleclassifi": 235, "smart": [235, 441, 457, 458, 588], "accomplish": [235, 381, 405, 544, 984, 988, 990, 1011, 1044], "magic": [235, 380, 385, 417, 614, 619, 622], "set_fit_request": [235, 322, 398, 435, 441, 442, 445, 447, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 586, 589, 592, 633, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 688, 831, 832, 834, 835, 836, 837, 838, 844, 864, 865, 878, 879, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910], "set_predict_request": [235, 441, 445, 447, 480, 481, 482, 550, 609, 633, 642, 643, 907, 908, 909, 910], "set_score_request": [235, 322, 398, 435, 441, 445, 447, 463, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 562, 563, 565, 566, 567, 568, 608, 609, 633, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 671, 672, 673, 674, 676, 677, 678, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 841, 842, 846, 849, 850, 856, 857, 859, 894, 895, 899, 900, 901, 902, 904, 905, 907, 908, 909, 910, 987], "inherit": [235, 379, 381, 392, 393, 421, 575, 674, 928, 930, 983, 1027, 1032, 1033, 1034, 1035, 1037, 1038, 1039, 1042, 1043, 1044], "metaclassifi": [235, 236], "owner": [235, 374, 376, 943, 944], "method_map": [235, 944], "fit_param": [235, 393, 431, 435, 440, 443, 463, 530, 532, 534, 535, 537, 540, 541, 547, 565, 567, 568, 580, 581, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 625, 626, 628, 633, 636, 637, 638, 639, 640, 663, 802, 818, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 843, 848, 851, 855, 858, 862, 863, 864, 865, 868, 869, 871, 872, 873, 874, 876, 877, 878, 879, 891, 892, 947, 1034, 1037, 1038, 1039, 1041, 1043, 1044], "metadatarequest": [235, 421, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 467, 468, 469, 471, 472, 473, 474, 480, 481, 482, 483, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 579, 580, 581, 586, 587, 588, 589, 590, 593, 594, 596, 597, 598, 601, 608, 609, 626, 627, 628, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 650, 652, 654, 655, 656, 658, 660, 662, 664, 665, 666, 667, 668, 670, 672, 674, 675, 676, 677, 678, 686, 687, 688, 689, 690, 794, 795, 797, 798, 801, 803, 804, 805, 806, 809, 811, 812, 813, 814, 815, 816, 817, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 891, 892, 894, 895, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 944, 946, 1044], "request_rout": 235, "validate_metadata": [235, 944], "routed_param": [235, 947], "route_param": [235, 944], "caller": [235, 408, 644, 645, 650, 658, 659, 660, 679, 889, 890, 944, 945, 955, 963, 964, 965, 1036], "predict_param": [235, 463, 565, 566, 1040], "object_nam": [235, 944, 947], "method_nam": [235, 944, 947], "silent": [235, 415, 579, 855, 997, 1032, 1033, 1035, 1036, 1040, 1041], "bug": [235, 315, 316, 317, 318, 319, 320, 321, 322, 377, 381, 382, 384, 387, 391, 393, 1007, 1027, 1028, 1029, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "notabl": [235, 305, 373, 393, 494, 725, 872, 984, 986, 990, 1031, 1034, 1041], "metaclassifierifittedmetaclassifi": 235, "exampleclassifierexampleclassifi": 235, "typeerror": [235, 318, 384, 709, 923, 944, 971, 1034, 1035, 1038, 1040, 1044], "got": [235, 267, 362, 384, 549, 647, 663, 1040, 1042, 1044], "sample_weight1": 235, "sample_weight2": 235, "aliased_sample_weight": 235, "alia": [235, 380, 383, 387, 393, 435, 441, 442, 445, 447, 463, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 531, 532, 536, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 586, 588, 589, 592, 608, 609, 615, 633, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 688, 797, 798, 803, 805, 814, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 844, 846, 849, 850, 856, 857, 859, 862, 864, 865, 866, 871, 878, 879, 894, 895, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 961, 993, 1007, 1027, 1041], "calle": [235, 945], "predict_log_proba": [235, 381, 393, 547, 548, 549, 551, 553, 555, 557, 562, 591, 592, 656, 657, 674, 796, 799, 800, 810, 820, 830, 834, 835, 836, 837, 838, 856, 859, 896, 901, 904, 907, 909, 1002, 1027, 1040, 1044], "meta_est": 235, "routerconsumerclassifi": 235, "add_self_request": [235, 944], "self_request": 235, "clf_sample_weight": 235, "meta_clf_sample_weight": 235, "routerconsumerclassifierifittedrouterconsumerclassifi": 235, "complic": [235, 299, 385, 417, 692, 990], "simplepipelin": 235, "_required_paramet": [235, 381, 427], "transformer_": [235, 463], "child": [235, 351, 360, 367, 391, 393, 398, 407, 414, 440, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 907, 908, 909, 910, 944, 945, 947, 955, 1003, 1034], "boilerpl": [235, 381, 1011, 1021], "exampletransform": 235, "set_transform_request": [235, 480, 481, 482, 531, 580, 586, 588, 589, 633, 862, 865, 871, 879], "metaregressor": 235, "weightedmetaregressor": 235, "__metadata_request__fit": 235, "compat": [235, 263, 283, 316, 373, 382, 388, 389, 391, 393, 397, 398, 415, 461, 467, 506, 564, 575, 583, 584, 587, 601, 612, 613, 616, 617, 618, 620, 621, 630, 631, 632, 656, 657, 671, 673, 771, 775, 797, 798, 801, 803, 804, 805, 806, 809, 811, 812, 813, 814, 815, 816, 817, 843, 844, 859, 864, 872, 873, 911, 912, 915, 950, 984, 987, 990, 992, 1006, 1007, 1011, 1023, 1027, 1030, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "silenc": 235, "exampleregressor": 235, "commun": [235, 372, 378, 382, 384, 387, 393, 407, 414, 536, 538, 545, 690, 708, 871, 977, 984, 990, 997, 1001, 1006, 1010, 1011, 1035, 1036], "vendor": [235, 1032, 1035, 1036], "NOT": [235, 289, 376, 382, 806, 839, 840], "signatur": [235, 351, 352, 374, 486, 487, 555, 556, 562, 563, 592, 608, 609, 657, 671, 673, 709, 739, 802, 818, 821, 823, 826, 872, 947, 976, 1034, 1040, 1044], "plot_metadata_rout": [235, 243, 1008], "theta_c": [236, 521], "reject": [236, 393, 394, 521, 669, 724, 919, 920, 983, 987, 1035], "likewis": [236, 407, 521], "surround": [236, 379, 845, 993], "cca": [236, 410, 481, 483, 1031, 1035, 1036, 1037, 1039, 1041], "onevsrestclassifi": [236, 267, 269, 278, 398, 405, 827, 829, 899, 1012, 1028, 1029, 1031, 1033, 1034, 1040, 1041, 1044, 1045], "min_x": 236, "max_x": 236, "plot_subfigur": 236, "min_i": 236, "max_i": [236, 989], "zero_class": 236, "one_class": 236, "nfor": 236, "plot_multilabel": [236, 243, 1008], "extratreesregressor": [237, 414, 555, 563, 564, 909, 910, 1030, 1033, 1035, 1036, 1037, 1040, 1041, 1042, 1043, 1044], "n_face": 237, "face_id": 237, "n_pixel": [237, 258], "nn": [237, 415, 693, 1019], "y_test_predict": 237, "true_fac": 237, "completed_fac": 237, "852": [237, 243, 1008], "plot_multioutput_face_complet": [237, 243, 1008], "iforest": 238, "pharuj": 238, "rajborirug": 238, "ra": 238, "kmitl": 238, "ac": [238, 528, 662, 683, 684, 983, 1000, 1021], "robustscal": [238, 876, 889, 977, 997, 1032, 1033, 1035, 1037, 1038, 1039, 1043], "make_estim": 238, "iforest_kw": 238, "lof_kw": 238, "outlier_detector": [238, 429], "perf_count": 238, "negative_outlier_factor_": [238, 290, 845, 993], "expected_n_anomali": 238, "expected_anomaly_fract": 238, "kddcup": [238, 372, 490, 1023], "inject": [238, 374, 414], "attack": [238, 374], "fetch_kddcup99": [238, 374, 1034, 1035, 1036, 1039, 1040], "percent10": [238, 490], "int32": [238, 283, 312, 379, 393, 441, 445, 447, 449, 451, 457, 901, 902, 903, 904, 905, 952, 1002, 1036, 1042, 1043, 1044], "anomaly_frac": 238, "10065": 238, "protocol_typ": 238, "cat_column": 238, "wilderness_area": 238, "soil_typ": 238, "x_forestcov": 238, "14302": 238, "137": [238, 385, 1028], "forestcov": 238, "usd": 238, "sqft": 238, "ames_h": 238, "div": [238, 932], "lot_area": 238, "misc_featur": 238, "add_categori": 238, "noinfo": 238, "mas_vnr_typ": 238, "2714": 238, "categorical_columns_selector": 238, "fetal": 238, "cardiotocogram": 238, "heart": 238, "fhr": 238, "minor": [238, 263, 267, 374, 382, 394, 494, 987, 1027, 1029, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "x_cardiotocographi": 238, "2126": 238, "datasets_nam": 238, "ceil": [238, 555, 556, 557, 558, 561, 562, 563, 564, 592, 669, 799, 800, 907, 908, 909, 910, 1001], "dataset_nam": [238, 283], "model_idx": 238, "plot_chance_level": [238, 267, 269, 270, 698, 700, 1043], "chance_level_kw": [238, 698, 700, 1043], "privileg": [238, 387], "n_neighbors_list": [238, 285], "localoutlierfactor__n_neighbor": 238, "preprocessor_list": 238, "interquartil": [238, 877, 889], "iqr": [238, 877, 889], "75th": [238, 877], "squash": [238, 383, 417, 529, 535, 540, 546], "plot_outlier_detection_bench": [238, 243, 1008], "recalcul": [239, 241, 407, 1024, 1027], "mlpregressormlpregressor": 239, "tree_disp": 239, "mlp_disp": 239, "0x7f5826f97940": 239, "774": [239, 243, 1008], "plot_partial_dependence_visualization_api": [239, 243, 1008], "deactiv": [240, 373, 380, 385, 397, 408, 799, 800, 1041], "standard_scal": 240, "polynomialfeaturespolynomialfeatur": 240, "pcapca": 240, "svcsvc": [240, 258, 260, 317], "numeric_preprocessor": 240, "imputation_mean": 240, "categorical_preprocessor": [240, 311], "imputation_const": 240, "onehot": [240, 306, 307, 408, 864, 997], "gender": [240, 872, 997], "classifier__n_estim": 240, "classifier__max_featur": 240, "classifier__max_depth": 240, "classifier__criterion": 240, "gridsearchcvinot": 240, "fittedgridsearchcv": 240, "plot_pipeline_displai": [240, 243, 1008], "svcifittedsvc": 241, "svc_disp": [241, 315, 1024], "rfc_disp": [241, 315, 1024], "plot_roc_curve_visualization_api": [241, 243, 1008], "transform_output": [242, 312, 466, 897, 1042, 1043], "slep018": [242, 381, 1042], "x_test_scal": 242, "894264": 242, "798301": 242, "271411": 242, "327605": 242, "244466": 242, "086944": 242, "327407": 242, "459074": 242, "660797": 242, "462234": 242, "576989": 242, "159419": 242, "933197": 242, "427329": 242, "414810": 242, "039497": 242, "275851": 242, "scaler2": 242, "x_test_np": 242, "x_test_df": 242, "feature_names_in_": [242, 312, 318, 393, 428, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 462, 463, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 608, 609, 625, 626, 627, 628, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 686, 687, 688, 689, 690, 794, 795, 796, 799, 800, 810, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 858, 859, 862, 863, 864, 865, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 891, 892, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 1040, 1041, 1042, 1043, 1045], "num_pip": 242, "num_col": 242, "7621951219512195": 242, "log_reg": [242, 319], "config_context": [242, 366, 367, 403, 624, 897, 1034, 1040, 1043], "reset": [242, 362, 387, 532, 674, 675, 676, 839, 840, 868, 869, 879, 1029], "standardscalerifittedstandardscal": 242, "1088": 242, "151101": 242, "479229": 242, "188153": 242, "393297": 242, "263234": 242, "975455": 242, "285": [242, 326, 721], "532843": 242, "546068": 242, "1511007": 242, "47922861": 242, "18815268": 242, "39329747": 242, "26323428": 242, "97545464": 242, "53284267": 242, "54606834": 242, "plot_set_output": [242, 243, 1008], "803": 243, "miscellan": [243, 372, 373, 1008, 1033, 1034, 1041, 1042, 1044, 1045], "bayesiangaussianmixtur": [245, 246, 251, 795, 986, 1033, 1035, 1036, 1040, 1041], "weight_concentration_prior_typ": [245, 251, 794, 986, 1033], "dirichlet_distribut": [245, 794, 986, 1033], "dirichlet_process": [245, 251, 794, 986, 1033], "weight_concentration_prior": [245, 251, 794, 986], "finit": [245, 251, 366, 374, 393, 466, 536, 549, 580, 604, 607, 608, 609, 656, 725, 775, 782, 794, 820, 897, 917, 918, 919, 920, 983, 986, 987, 1011, 1012, 1019, 1034, 1035, 1039, 1041, 1042], "covar": [245, 246, 251], "eig_val": 245, "eig_vec": 245, "unit_eig_vec": 245, "arctan2": [245, 247, 250], "56b4e9": 245, "plot_titl": 245, "weights_": [245, 794, 795, 1041], "covariances_": [245, 246, 247, 250, 251, 794, 795, 1034], "get_xaxi": [245, 293, 305], "set_tick_param": 245, "007": [245, 268, 283, 352], "labelleft": 245, "0072b2": 245, "f0e442": 245, "d55e00": 245, "mean_precision_prior": [245, 251, 794], "nprior": 245, "gamma_0": [245, 251], "reg_covar": [245, 794, 795], "init_param": [245, 248, 251, 794, 795], "concentrations_prior": 245, "022": [245, 252, 995, 1008], "plot_concentration_prior": [245, 252, 1008], "_base": [246, 381], "color_it": [246, 250, 251], "splot": [246, 251], "dp": [246, 251], "shouldn": [246, 251, 379], "em": [246, 247, 251, 441, 445, 457, 534, 794, 795, 986, 1041], "dpgmm": [246, 251, 1027, 1031, 1033], "209": [246, 252, 738, 875, 1008], "plot_gmm": [246, 252, 1008], "ronweiss": 247, "make_ellips": 247, "datalim": 247, "skf": [247, 411, 815], "train_index": [247, 328, 411, 797, 798, 801, 803, 804, 805, 806, 809, 811, 812, 813, 814, 815, 816, 817], "test_index": [247, 328, 411, 797, 798, 801, 803, 804, 805, 806, 809, 811, 812, 813, 814, 815, 816, 817], "cov_typ": [247, 489], "means_init": [247, 248, 795], "y_train_pr": 247, "train_accuraci": 247, "y_test_pr": 247, "test_accuraci": [247, 261], "plot_gmm_covari": [247, 252, 1008], "random_from_data": [248, 794, 795, 986], "diamond": 248, "colour": [248, 376, 415, 585, 988], "eventu": [248, 406, 407, 416, 591, 1011], "walsh": [248, 1039, 1041], "timer": [248, 385], "_samples_gener": 248, "extmath": [248, 351, 388, 406, 451, 1027, 1028, 1033, 1034, 1037, 1041, 1042, 1044], "row_norm": 248, "x_squared_norm": [248, 458], "get_initial_mean": 248, "times_init": 248, "relative_tim": 248, "ini": 248, "init_tim": 248, "2fx": 248, "629": [248, 252, 1008], "plot_gmm_init": [248, 252, 1008], "shifted_gaussian": 249, "stretched_gaussian": 249, "score_sampl": [249, 288, 289, 290, 296, 393, 413, 467, 530, 539, 561, 675, 794, 795, 796, 799, 800, 810, 844, 845, 855, 859, 903, 993, 1030, 1035, 1037, 1039], "plot_gmm_pdf": [249, 252, 1008], "kept": [250, 283, 346, 373, 383, 401, 417, 494, 533, 536, 538, 539, 545, 595, 608, 609, 617, 618, 642, 693, 794, 795, 920, 997, 1035, 1036], "component_1": 250, "component_2": 250, "best_parameters_": 250, "gmm_bic_scor": 250, "callabl": [250, 264, 393, 411, 414, 415, 416, 418, 419, 439, 441, 442, 443, 444, 445, 447, 448, 450, 455, 457, 458, 462, 463, 464, 465, 529, 531, 533, 535, 537, 543, 544, 555, 556, 557, 558, 559, 560, 562, 563, 586, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 608, 609, 618, 626, 628, 632, 637, 641, 657, 664, 669, 671, 673, 686, 689, 690, 694, 709, 717, 729, 739, 768, 771, 775, 776, 777, 778, 789, 790, 796, 799, 800, 802, 810, 818, 821, 822, 823, 824, 826, 839, 840, 841, 842, 843, 845, 846, 847, 848, 849, 850, 851, 863, 872, 894, 895, 901, 902, 903, 904, 905, 948, 954, 957, 971, 976, 987, 997, 1027, 1031, 1034, 1035, 1036, 1037, 1039, 1041, 1043], "0x7f583587a4c0": 250, "gaussianmixturegaussianmixtur": 250, "param_n_compon": 250, "param_covariance_typ": 250, "829429": 250, "1084": 250, "038689": 250, "1114": 250, "517272": 250, "1148": 250, "512281": 250, "1179": 250, "977890": 250, "catplot": 250, "hue": [250, 260, 310, 376], "plot_gmm_select": [250, 252, 1008], "loos": [251, 257, 1002, 1035], "liberti": 251, "judgment": [251, 987], "panel": [251, 288, 305, 413, 1006], "primarili": [251, 265, 379, 393, 403, 407, 945, 1011, 1036, 1037], "covariance_prior": [251, 794], "plot_gmm_sin": [251, 252, 1008], "114": [252, 320, 708, 1027], "mislabel": [254, 414, 989], "imbal": [254, 263, 411, 705, 726, 727, 735, 780, 781, 784, 785, 987], "set_printopt": 254, "titles_opt": 254, "plot_confusion_matrix": [254, 276, 315, 1008, 1037, 1038, 1039, 1040], "groupkfold": [255, 265, 322, 398, 411, 592, 801, 802, 803, 804, 805, 814, 818, 820, 821, 822, 823, 826, 1016, 1033, 1040], "groupshufflesplit": [255, 411, 1016, 1033], "shufflesplit": [255, 262, 346, 411, 798, 804, 806, 816, 825, 1016, 1027, 1028, 1030, 1032, 1033], "stratifiedgroupkfold": [255, 1040], "stratifiedshufflesplit": [255, 338, 411, 1016, 1027, 1028, 1033, 1034, 1040], "1338": 255, "cmap_data": 255, "cmap_cv": 255, "coolwarm": [255, 335], "n_point": [255, 839, 840], "percentiles_class": 255, "perc": 255, "group_prior": 255, "visualize_group": 255, "yticklabel": [255, 351], "ngroup": 255, "nclass": 255, "plot_cv_indic": [255, 276, 1008], "tr": [255, 376, 383, 407, 409, 467, 468, 469, 470, 471, 472, 473, 474, 837], "_split": 255, "843": 255, "this_cv": 255, "2317": 255, "1206": 255, "373": [255, 276, 1008], "plot_cv_predict": [256, 276, 1008], "fnr": [257, 696, 724], "det_curv": [257, 696, 779, 786, 987, 1039, 1040, 1045], "detcurvedisplai": [257, 318, 724, 1039, 1040, 1044, 1045], "ax_roc": 257, "ax_det": 257, "feedback": [257, 378, 379, 380, 394, 1006, 1010, 1035], "aid": [257, 407, 789, 790, 984, 1011, 1027, 1039], "plot_det": [257, 276, 1008], "n_imag": 258, "print_datafram": 258, "filtered_cv_result": 258, "mean_precis": 258, "std_precis": 258, "mean_recal": 258, "std_recal": 258, "mean_test_precis": [258, 264], "std_test_precis": 258, "mean_test_recal": 258, "std_test_recal": 258, "03f": 258, "refit_strategi": 258, "best_index": [258, 264], "precision_threshold": 258, "high_precision_cv_result": 258, "rank_test_recal": 258, "rank_test_precis": [258, 264], "best_recall_std": 258, "best_recal": 258, "best_recall_threshold": 258, "high_recall_cv_result": 258, "fastest_top_recall_high_precision_index": 258, "idxmin": 258, "854": 258, "063": [258, 260, 435], "069": 258, "780": 258, "905": 258, "889": [258, 435], "074": 258, "890": 258, "073": [258, 339, 349, 469, 470, 1008], "695": 258, "065": [258, 385], "066": [258, 347, 349, 646, 1008], "611": [258, 260, 539], "028": [258, 329, 331, 352, 1008], "618": 258, "005263": 258, "853676": 258, "063184": 258, "0x7f58350e8ca0": 258, "807": [258, 260], "plot_grid_search_digit": [258, 276, 1008], "minimis": [259, 407, 411, 656, 657, 1003], "219": 259, "260": [259, 1040], "york": [259, 785, 794, 977, 987, 999], "usa": [259, 374, 896, 977, 984, 999, 1000], "best_index_": [259, 264, 796, 799, 800, 810], "wenhao": [259, 1035, 1036], "zhang": [259, 407, 440, 662, 677, 683, 684, 687, 691, 755, 756, 983, 984, 985, 989, 1001, 1031, 1032, 1034, 1035, 1036, 1037, 1039, 1043, 1044], "wenhaoz": 259, "ucla": [259, 983], "lower_bound": 259, "best_score_idx": 259, "best_low_complex": 259, "fewest": [259, 625], "candidate_idx": 259, "param_reduce_dim__n_compon": 259, "332": [259, 276, 352, 887, 1008], "plot_grid_search_refit_cal": [259, 276, 1008], "moon": [260, 300, 307, 351, 352, 520], "moder": [260, 379, 417, 452, 993], "352": [260, 385], "repeatedstratifiedkfold": [260, 278, 411, 811, 815, 1034], "repetit": [260, 278, 384, 411, 811, 812, 995, 1041], "rank_test_scor": [260, 268, 796, 810, 1033], "rename_axi": 260, "9400": 260, "079297": 260, "9300": 260, "077846": 260, "3_poli": 260, "9044": [260, 1034], "098776": 260, "2_poli": 260, "6852": 260, "169106": 260, "certainti": [260, 381, 739, 987], "repreat": 260, "model_scor": [260, 281], "regex": [260, 353, 462, 464], "_test_scor": [260, 470, 592, 1040], "lineplot": 260, "set1": [260, 292, 293], "labelpad": 260, "882561": 260, "783392": 260, "351390": 260, "746492": 260, "298688": 260, "355440": 260, "nadeau": [260, 1035], "bengio": [260, 856, 857, 976, 1000], "framework": [260, 366, 381, 391, 393, 401, 407, 635, 686, 794, 983, 984, 991, 1007, 1011, 1027, 1033], "diebold": 260, "mariano": 260, "proven": [260, 981, 985, 1011], "replic": [260, 378, 381], "cdot": [260, 342, 404, 407, 412, 413, 417, 612, 613, 617, 620, 621, 865, 979, 981, 987, 991, 997], "sum_": [260, 269, 346, 404, 405, 407, 412, 413, 414, 536, 538, 545, 694, 752, 981, 983, 984, 987, 989, 991, 992, 994, 995, 997, 1001, 1002, 1003], "ij": [260, 293, 404, 407, 412, 536, 538, 545, 644, 645, 650, 651, 658, 659, 660, 661, 679, 682, 983, 984, 987, 989, 992, 997, 1002], "corrected_std": 260, "crossvalid": [260, 274], "corrected_var": 260, "ddof": [260, 879, 890], "compute_corrected_ttest": 260, "t_stat": 260, "p_val": 260, "model_1_scor": 260, "model_2_scor": 260, "ncorrect": 260, "uncorrect": [260, 593, 596], "t_stat_uncorrect": 260, "p_val_uncorrect": 260, "benavoli": 260, "colleagu": 260, "conjug": [260, 450, 460, 670, 672, 685, 693, 983], "overlin": [260, 404], "t_post": 260, "ppf": 260, "infin": [260, 346, 539, 680, 681, 710, 820, 906, 918, 990], "minu": [260, 757, 987], "better_prob": 260, "cdf": 260, "773": [260, 646, 837], "essenti": [260, 320, 377, 381, 407, 411, 412, 507, 987, 990, 1007, 1011, 1035], "rope": 260, "rope_interv": 260, "rope_prob": 260, "x_rope": 260, "uncertain": [260, 326, 378], "credibl": 260, "cred_interv": 260, "cred_int_df": 260, "000977": 260, "019023": 260, "005422": 260, "025422": 260, "016445": 260, "036445": 260, "bonferroni": 260, "n_comparison": 260, "pairwise_t_test": 260, "model_i": 260, "model_k": 260, "model_i_scor": 260, "model_k_scor": 260, "pairwise_comp_df": 260, "model_1": 260, "model_2": 260, "302": [260, 625], "565": 260, "276": 260, "851": 260, "pairwise_bayesian": 260, "worse_prob": 260, "pairwise_bayesian_df": 260, "882": 260, "187": [260, 385, 582, 988, 1019, 1029], "dietterich": [260, 829, 988], "1998": [260, 374, 376, 412, 414, 553, 554, 829, 834, 865, 988, 989, 991, 997, 1001], "bouckaert": 260, "frank": [260, 830, 988, 1032, 1036, 1037], "pacif": 260, "asia": [260, 997], "confer": [260, 374, 407, 412, 418, 437, 442, 448, 509, 533, 561, 694, 706, 723, 753, 855, 856, 857, 987, 993, 999, 1003], "discoveri": [260, 374, 385, 388, 407, 414, 416, 418, 442, 509, 553, 554, 561, 590, 593, 594, 596, 597, 598, 604, 718, 737, 780, 987, 999, 1011, 1041, 1042], "corani": 260, "dem\u0161ar": 260, "zaffalon": 260, "accompani": [260, 1035], "144": [260, 385, 1027], "plot_grid_search_stat": [260, 276, 1008], "loader": [261, 329, 351, 372, 373, 374, 496, 497, 506, 1007, 1021, 1027, 1032, 1034, 1035, 1038], "857": [261, 352], "complementnb": [261, 351, 834, 835, 837, 838, 989, 1035, 1039, 1040, 1042], "tfidfvectorizertfidfvector": 261, "complementnbcomplementnb": 261, "vect__": 261, "clf__": 261, "parameter_grid": 261, "vect__max_df": 261, "vect__min_df": 261, "vect__ngram_rang": [261, 1021], "unigram": [261, 374, 415, 586, 587, 589, 1034], "bigram": [261, 415, 586, 587, 589, 1021], "vect__norm": 261, "clf__alpha": [261, 1021], "parallelis": [261, 466, 897, 1034], "random_search": [261, 268], "best_paramet": 261, "get_param": [261, 382, 393, 417, 421, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 462, 463, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 579, 580, 581, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 686, 687, 688, 689, 690, 794, 795, 796, 799, 800, 810, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 858, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 891, 892, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 976, 1037, 1038, 1039, 1041, 1042], "816": [261, 469, 470], "709": [261, 308, 313, 1008], "ambigu": [261, 384, 415, 570, 710, 936, 990, 1036, 1038, 1040], "shorten_param": 261, "xanchor": 261, "yanchor": 261, "autom": [261, 383, 397, 690, 976, 983, 984, 987, 1006, 1011], "parallel_coordin": 261, "understood": [261, 379, 407, 944, 1018], "column_result": 261, "transform_func": 261, "fromkei": [261, 914], "ngram_rang": [261, 329, 415, 586, 587, 589], "color_continuous_scal": 261, "viridis_r": 261, "slide": [261, 642, 983, 1005, 1006], "intersect": [261, 335, 404, 407, 735], "undo": [261, 869, 1031], "stronger": [261, 641, 650, 656, 657, 670, 671, 672, 673, 674, 676, 685], "plot_grid_search_text_feature_extract": [261, 276, 1008], "ax_idx": 262, "resort": [262, 374, 553, 1037], "learning_curv": [262, 320, 398, 802, 982, 1030, 1033, 1034, 1035, 1036, 1037, 1039, 1041, 1042, 1044], "return_tim": [262, 823, 1037], "test_scores_nb": 262, "fit_times_nb": 262, "score_times_nb": 262, "test_scores_svm": 262, "fit_times_svm": 262, "score_times_svm": 262, "score_tim": [262, 411, 822, 823], "inflect": 262, "914": [262, 276, 1008], "plot_learning_curv": [262, 276, 1008], "class_likelihood_ratio": [263, 987, 1042], "medicin": [263, 710, 987], "medic": [263, 411, 710, 983, 1011], "truli": [263, 267, 368, 710, 987], "odd": [263, 414, 512, 710, 987, 1034, 1035], "suppos": [263, 325, 366, 367, 381, 385, 409, 414, 415, 416, 555, 559, 562, 656, 657, 664, 666, 672, 673, 674, 739, 845, 899, 901, 904, 907, 909, 925, 991, 1036, 1038, 1044], "physiolog": [263, 376, 1019], "hopefulli": [263, 387, 1027], "indirect": [263, 380, 393], "bio": 263, "pos_lr": 263, "neg_lr": 263, "raise_warn": [263, 710, 973], "positive_likelihood_ratio": [263, 710], "negative_likelihood_ratio": [263, 710], "extract_scor": 263, "test_positive_likelihood_ratio": 263, "test_negative_likelihood_ratio": 263, "661086": 263, "724702": 263, "383973": 263, "054045": 263, "108843": 263, "986989": 263, "268147": 263, "034278": 263, "most_frequ": [263, 549, 625, 628, 849, 977, 987, 1035, 1037, 1039], "373333": 263, "5557": 263, "235430": 263, "stand": [263, 353, 383, 391, 412, 529, 535, 543, 544, 594, 607, 676, 703, 715, 733, 734, 754, 783, 785, 792, 986, 987, 993], "lr_base": 263, "pos_lr_bas": 263, "pos_lr_base_std": 263, "neg_lr_bas": 263, "neg_lr_base_std": 263, "plot_indic": 263, "scoring_on_bootstrap": 263, "n_bootstrap": [263, 1028], "results_for_preval": 263, "bootstrap_indic": 263, "default_rng": 263, "2039": 263, "507943": 263, "113516": 263, "207667": 263, "009778": 263, "3419": 263, "443238": 263, "125140": 263, "198766": 263, "008915": 263, "421087": 263, "123828": 263, "192913": 263, "006360": 263, "6196": [263, 1032], "409717": 263, "164009": 263, "193949": 263, "005861": 263, "7578": [263, 1034], "334795": 263, "175298": 263, "189267": 263, "005840": 263, "8963": 263, "197666": 263, "238955": 263, "185654": 263, "005027": 263, "plot_likelihood_ratio": [263, 276, 1008], "scorer_nam": [264, 796, 810], "rvraghav93": [264, 305], "predefin": [264, 809, 976, 990, 1016, 1042, 1044], "403": [264, 352], "maskedarrai": [264, 1033], "param_min_samples_split": 264, "sample_score_mean": 264, "sample_score_std": 264, "std_": [264, 1032], "rank_test_": 264, "best_scor": 264, "mean_test_": 264, "plot_multi_metric_evalu": [264, 276, 1008], "cawlei": [265, 987], "talbot": 265, "mach": [265, 405, 411, 591, 592], "2079": 265, "2107": 265, "007581": 265, "007833": 265, "num_trial": 265, "x_iri": [265, 1020], "y_iri": [265, 1020], "p_grid": 265, "non_nested_scor": 265, "nested_scor": 265, "leaveoneout": [265, 411, 1016], "leaveonegroupout": [265, 411, 797, 804, 805, 1016, 1033], "inner_cv": [265, 322], "outer_cv": [265, 322], "non_nest": 265, "score_differ": 265, "211": [265, 320, 328, 352, 875, 887], "non_nested_scores_lin": 265, "nested_lin": 265, "difference_plot": 265, "plot_nested_cross_validation_iri": [265, 276, 1008], "permutation_test_scor": [266, 398, 411, 1027, 1034, 1039], "plant": [266, 269, 270, 372, 987, 1023], "uncorrel": [266, 375, 526, 532, 539, 987, 1019], "n_uncorrelated_featur": 266, "x_rand": 266, "undergo": 266, "score_iri": 266, "perm_scores_iri": 266, "pvalue_iri": 266, "n_permut": [266, 411, 824], "score_rand": 266, "perm_scores_rand": 266, "pvalue_rand": 266, "evid": [266, 351, 387, 407, 411, 412, 414, 642, 794, 986], "ndata": 266, "destroi": [266, 415, 792, 868, 997], "ojala": [266, 411, 824], "garriga": [266, 411, 824], "712": [266, 276, 1008], "plot_permutation_tests_for_classif": [266, 276, 1008], "t_p": 267, "plu": [267, 376, 384, 677, 830, 833, 988, 1001], "f_p": 267, "f_n": 267, "2t_p": 267, "denomin": [267, 415, 420, 473, 588, 702, 754, 981], "stairstep": 267, "ap": [267, 705, 706, 987], "sum_n": [267, 705, 987], "r_n": [267, 705, 987], "p_n": [267, 705, 987], "nth": [267, 705, 987], "r_k": 267, "p_k": [267, 987], "trapezoid": [267, 704, 705, 987], "binar": [267, 269, 270, 371, 373, 406, 751, 834, 863, 864, 866, 870, 872, 880, 883, 987, 989, 1012, 1023, 1041, 1043], "average_precision_scor": [267, 698, 704, 706, 779, 785, 987, 1027, 1030, 1034, 1035, 1041, 1043], "mt19937": [267, 272, 922, 1038], "0x7f58341eb440": 267, "precisionrecalldisplai": [267, 318, 779, 781, 784, 987, 1037, 1040, 1043, 1044, 1045], "label_binar": [267, 269, 866, 1031], "average_precis": [267, 698, 705, 739, 987], "prevalence_pos_label": [267, 698], "setup": [267, 269, 366, 377, 381, 385, 387, 990, 1013], "f_score": 267, "extens": [267, 269, 288, 366, 367, 373, 374, 377, 380, 382, 383, 387, 388, 391, 401, 407, 412, 494, 501, 532, 738, 930, 938, 984, 986, 987, 1005, 1006, 1011, 1027, 1033, 1040, 1041, 1043, 1044], "382": [267, 276, 1008], "plot_precision_recal": [267, 276, 1008], "deem": [268, 269, 532, 995, 1040], "991": [268, 987], "05063247886572012": 268, "13822072286080167": 268, "987": [268, 352], "010877306503748912": 268, "9226260871125187": 268, "023": [268, 900, 995], "7271482064048191": 268, "25183501383331797": 268, "993": [268, 352], "1111111111111111": 268, "5555555555555556": 268, "n_top": 268, "param_dist": [268, 272, 317], "n_iter_search": 268, "755": [268, 276, 1008], "plot_randomized_search": [268, 276, 1008], "unambigu": [269, 988, 1033], "notion": [269, 342, 352, 368, 391, 407, 412, 414, 983, 987], "scheme": [269, 288, 311, 312, 374, 393, 407, 411, 413, 415, 564, 588, 656, 657, 703, 809, 866, 867, 870, 872, 876, 880, 883, 888, 899, 904, 976, 983, 997, 1001, 1027, 1035, 1038, 1039, 1044], "harder": [269, 270, 309, 374, 378, 381, 387, 391, 407, 513, 559, 560], "bulk": [269, 418, 442], "scrutin": 269, "labelbinar": [269, 393, 738, 828, 863, 872, 880, 883, 988, 1012, 1030, 1031, 1032, 1036, 1041], "y_onehot_test": 269, "class_id": [269, 270], "nvirginica": 269, "tp_c": 269, "fn_c": 269, "fp_c": 269, "tn_c": 269, "briefli": [269, 378, 392, 414, 976, 1037], "nreceiv": 269, "micro_roc_auc_ovr": 269, "mcclish": [269, 785], "deci": 269, "1989": [269, 633, 785, 856, 857, 983, 990], "jul": 269, "fpr_grid": 269, "mean_tpr": [269, 270], "interp": [269, 270, 338], "macro_roc_auc_ovr": 269, "deeppink": 269, "aqua": 269, "role": [269, 366, 378, 412], "pair_list": 269, "pair_scor": 269, "label_a": 269, "label_b": 269, "a_mask": 269, "b_mask": 269, "ab_mask": 269, "a_tru": 269, "b_true": 269, "idx_a": 269, "idx_b": 269, "fpr_a": 269, "tpr_a": 269, "fpr_b": 269, "tpr_b": 269, "macro_roc_auc_ovo": 269, "ovo_tpr": 269, "pool": [269, 391, 443, 633, 956, 1007, 1038], "724": [269, 276, 1008], "plot_roc": [269, 276, 1008], "mean_fpr": 270, "viz": [270, 386], "interp_tpr": 270, "mean_auc": 270, "std_auc": 270, "std_tpr": 270, "tprs_upper": 270, "tprs_lower": 270, "plot_roc_crossv": [270, 276, 1008], "halvinggridsearchcv": [271, 272, 317, 398, 577, 800, 976, 1039, 1041, 1042, 1044], "1e4": [271, 657, 677, 893, 999], "gsh": 271, "gsh_time": 271, "gs_time": 271, "make_heatmap": 271, "is_sh": 271, "make_cbar": 271, "param_c": [271, 796], "param_gamma": [271, 796, 810], "sh": [271, 383, 387, 976], "scores_matrix": 271, "pivot_t": 271, "aggfunc": 271, "0e": [271, 547, 548], "get_xticklabel": 271, "rotation_mod": 271, "cbar_ax": 271, "plot_successive_halving_heatmap": [271, 276, 1008], "rsh": [272, 317], "0x7f583519e440": 272, "_distn_infrastructur": 272, "rv_discrete_frozen": 272, "0x7f5835fcd0d0": 272, "0x7f58369999d0": 272, "halvingrandomsearchcvifittedhalvingrandomsearchcv": 272, "params_str": 272, "drop_dupl": 272, "n_resources_": [272, 799, 800, 976], "nn_candid": 272, "n_candidates_": [272, 799, 800, 976], "n_iterations_": [272, 799, 800], "multialign": 272, "plot_successive_halving_iter": [272, 276, 1008], "n_samples_train": [273, 901, 902, 903, 904, 905], "n_samples_test": [273, 901, 902, 903, 904, 905, 990, 997], "train_error": 273, "test_error": 273, "i_alpha_optim": 273, "alpha_optim": 273, "00020991037201085544": 273, "343": [273, 276, 1008], "plot_train_error_vs_test_error": [273, 276, 1008], "nonlinear": [274, 318, 642, 686, 687, 691, 694, 865, 983, 984, 992, 997], "true_fun": 274, "polynomial_featur": 274, "215": [274, 276, 582, 1008], "plot_underfitting_overfit": [274, 276, 1008], "validationcurvedisplai": [275, 982, 1043], "subset_mask": 275, "isin": [275, 326], "param_rang": [275, 321, 346, 818, 826, 982, 1043], "682": [275, 276, 296, 297, 385, 1008], "plot_validation_curv": [275, 276, 1008], "919": 276, "ovo": [278, 315, 785, 827, 901, 904, 987, 988, 1002], "onevsoneclassifi": [278, 398, 828, 829, 1028, 1030, 1031, 1033, 1034, 1036, 1039, 1041, 1044, 1045], "review": [278, 311, 366, 374, 381, 382, 383, 384, 385, 391, 394, 411, 412, 533, 539, 987, 997, 1013], "sort_index": 278, "class_protein_loc": 278, "cyt": 278, "erl": 278, "exc": [278, 971], "me1": 278, "me2": 278, "me3": 278, "mit": [278, 374, 385, 407, 417, 608, 609, 612, 617, 620, 641, 664, 665, 674, 836, 980], "nuc": 278, "429": 278, "pox": 278, "vac": 278, "outputcodeclassifi": [278, 398, 827, 828, 1034, 1039, 1043, 1044, 1045], "code_s": [278, 829, 988], "ovo_tre": 278, "ovr_tre": 278, "ecoc": 278, "cv_results_tre": 278, "cv_results_ovo": 278, "cv_results_ovr": 278, "cv_results_ecoc": 278, "glanc": [278, 378], "tree_optim": 278, "unifi": [278, 380, 388, 391, 392, 414, 635, 1006, 1027], "allwein": 278, "erin": [278, 1039], "yoram": [278, 732], "singer": [278, 664, 665, 732, 983, 987, 1001, 1002], "141": [278, 499, 532, 899, 988], "defens": 278, "548": [278, 279, 1008], "plot_multiclass_overview": [278, 279, 1008], "classifierchain": [281, 393, 398, 831, 833, 1034, 1039, 1042, 1044], "assembl": [281, 312, 353, 859], "multitask": [281, 415, 988], "jaccard": [281, 404, 448, 455, 697, 701, 717, 726, 731, 735, 775, 776, 777, 793, 990, 1035, 1036], "adam": [281, 300, 856, 857, 991, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "kleczewski": [281, 1034, 1035], "yeast": [281, 830], "40597": 281, "jaccard_scor": [281, 701, 726, 731, 793, 987, 1036, 1039], "base_lr": [281, 830], "y_pred_ovr": 281, "ovr_jaccard_scor": 281, "y_pred_chain": 281, "chain_jaccard_scor": 281, "y_pred_ensembl": 281, "ensemble_jaccard_scor": 281, "x_po": 281, "takeawai": 281, "778": [281, 282, 1008], "plot_classifier_chain_yeast": [281, 282, 1008], "kneighborstransform": [283, 285, 315, 690, 851, 990, 1037, 1041, 1042], "nmslib": 283, "pynndesc": 283, "pip": [283, 315, 316, 317, 318, 319, 320, 321, 322, 367, 377, 379, 383, 385, 397, 403, 1003], "wrapper": [283, 385, 388, 411, 417, 542, 618, 666, 669, 739, 899, 983, 1003, 1006, 1031, 1039], "pynndescenttransform": 283, "csr_matrix": [283, 316, 438, 442, 450, 494, 532, 542, 555, 556, 557, 558, 561, 562, 563, 564, 586, 591, 592, 712, 825, 854, 872, 874, 901, 902, 904, 905, 907, 908, 909, 910, 937, 942, 959, 962, 963, 964, 965, 966, 967, 968, 973, 988, 997, 1001, 1002, 1003, 1042], "nmslibtransform": 283, "sw": 283, "n_samples_fit_": [283, 841, 842, 843, 845, 847, 849, 850, 851], "cosinesimil": 283, "nmslib_": 283, "adddatapointbatch": 283, "createindex": 283, "n_samples_transform": [283, 843, 851], "thread": [283, 316, 319, 377, 391, 393, 407, 414, 831, 832, 953, 954, 955, 1030, 1032, 1034, 1035, 1036, 1037, 1038, 1040, 1042, 1043, 1044], "num_thread": 283, "knnquerybatch": 283, "benchmark": [283, 317, 352, 353, 366, 372, 374, 379, 391, 397, 400, 405, 466, 513, 897], "mnist_10000": 283, "mnist_20000": 283, "20_000": 283, "tsne_param": 283, "barnes_hut": [283, 690, 1034, 1035], "parallel_batch_queri": 283, "msg": [283, 971], "transformer_nam": 283, "longest": 283, "fit_dur": 283, "transform_dur": 283, "823": 283, "884": 283, "769": 283, "733": 283, "077": [283, 352], "448": 283, "759": 283, "numba": [283, 1007], "cold": 283, "nearestneighbor": [283, 319, 397, 407, 418, 442, 444, 446, 459, 686, 687, 691, 841, 842, 843, 845, 849, 850, 851, 990, 1027, 1031, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044], "i_ax": 283, "828": 283, "955": [283, 411, 652], "994": 283, "brute": [283, 391, 402, 411, 418, 442, 444, 448, 455, 630, 631, 686, 687, 839, 840, 841, 842, 843, 845, 847, 849, 850, 851, 994, 1023, 1031, 1035, 1039, 1042, 1043, 1044], "spent": [283, 311, 380, 385, 823, 1042], "approximate_nearest_neighbor": [283, 297, 1008], "slow": [285, 305, 351, 366, 373, 377, 379, 412, 415, 445, 697, 873, 874, 878, 901, 904, 936, 984, 990, 1007, 1020, 1034], "temporarydirectori": [285, 315], "graph_model": 285, "classifier_model": 285, "sklearn_graph_cache_": 285, "tmpdir": [285, 315], "full_model": 285, "classifier__n_neighbor": 285, "grid_model": 285, "355": [285, 297, 352, 1008], "plot_caching_nearest_neighbor": [285, 297, 1008], "beforehand": [286, 1003], "entitl": [286, 445, 609, 841, 979], "knn__weight": 286, "unifom": 286, "571": [286, 297, 1008], "plot_classif": [286, 297, 1008], "79269019073225": 287, "kerneldens": [287, 288, 296, 413, 1029, 1035, 1036, 1040, 1041, 1042], "new_data": [287, 381], "4x11": 287, "real_data": 287, "set_clim": 287, "plot_digits_kde_sampl": [287, 297, 1008], "block": [288, 305, 319, 374, 376, 379, 384, 387, 393, 404, 407, 410, 413, 450, 451, 460, 471, 477, 478, 486, 487, 509, 511, 693, 955, 990, 992], "wildli": [288, 986], "kd": [288, 407, 413, 990, 1035, 1036, 1037], "jakevdp": [288, 296], "aaaaff": [288, 291], "tophat": [288, 413, 839, 840, 844], "log_den": 288, "x_src": 288, "format_func": 288, "ih": 288, "epanechnikov": [288, 413, 839, 840, 844], "funcformatt": 288, "nullloc": 288, "true_den": 288, "plot_kde_1d": [288, 297, 1008], "plot_lof_novelty_detect": [289, 297, 1008], "x_inlier": 290, "n_error": 290, "x_score": [290, 480, 481, 482, 483], "legend_handl": 290, "handlerpathcollect": 290, "update_legend_marker_s": 290, "update_from": 290, "set_siz": 290, "handler_map": 290, "update_func": 290, "092": [290, 297, 1008], "plot_lof_outlier_detect": [290, 297, 1008], "cmap_light": [291, 294], "ffaaaa": 291, "aaffaa": 291, "cmap_bold": [291, 294], "00ff00": 291, "plot_nca_classif": [291, 297, 1008], "neighborhoodcomponentanalysi": 292, "dim_reduction_method": 292, "acc_knn": 292, "x_embed": [292, 293, 690, 694, 848, 990], "ntest": 292, "plot_nca_dim_reduct": [292, 297, 1008], "logsumexp": [293, 1034], "get_yaxi": [293, 305], "link_thickness_i": 293, "diff_embed": 293, "dist_embed": 293, "einsum": 293, "exp_dist_embed": 293, "relate_point": 293, "pt_i": 293, "pt_j": 293, "plot_nca_illustr": [293, 297, 1008], "8133333333333334": 294, "nearestcentroid": [294, 351, 988, 990, 1027, 1031, 1034, 1039, 1042], "darkblu": 294, "shrink_threshold": [294, 846, 990, 1027, 1039], "plot_nearest_centroid": [294, 297, 1008], "barycent": [295, 1027], "plot_regress": [295, 297, 1008], "geospati": [296, 413], "haversin": [296, 413, 697, 759, 761, 990, 1036, 1039], "latitud": [296, 305, 374, 496, 697, 761], "longitud": [296, 305, 374, 496, 697, 761], "xtrain": 296, "ytrain": 296, "radian": [296, 697, 761], "land_mask": 296, "ball_tre": [296, 418, 442, 444, 448, 455, 686, 687, 841, 842, 843, 844, 845, 847, 849, 850, 851, 990, 1027, 1044], "ocean": 296, "plot_species_kd": [296, 297, 1008], "864": 297, "combat": [299, 412], "lesser": [299, 393, 440, 539, 983], "curvatur": 299, "088": [299, 303, 667, 995, 1008], "plot_mlp_alpha": [299, 303, 1008], "bfg": [300, 608, 609, 646, 647, 656, 667, 670, 672, 678, 685, 990, 991, 1042], "980000": 300, "096950": 300, "momentum": [300, 856, 857, 991], "049530": 300, "nesterov": [300, 856, 857, 991, 1043, 1044], "049540": 300, "360000": 300, "978444": 300, "860000": 300, "504185": 300, "503452": 300, "045311": 300, "956038": 300, "243802": 300, "992766": 300, "041297": 300, "993879": 300, "042898": 300, "638843": 300, "855465": 300, "909293": 300, "318387": 300, "912632": 300, "290584": 300, "991653": 300, "045934": 300, "840000": 300, "601052": 300, "157334": 300, "154453": 300, "692470": 300, "689751": 300, "689143": 300, "150527": 300, "850000": 300, "341523": 300, "336188": 300, "335919": 300, "689015": 300, "830000": 300, "513034": 300, "512595": 300, "930000": 300, "170087": 300, "schedul": [300, 367, 674, 675, 676, 856, 857, 1001, 1011, 1034], "nesterovs_momentum": [300, 856, 857], "invscal": [300, 674, 675, 676, 856, 857, 1001], "plot_arg": 300, "plot_on_dataset": 300, "nlearn": 300, "loss_": [300, 856, 857, 991, 1041], "loss_curve_": [300, 856, 857], "data_set": 300, "get_lin": 300, "plot_mlp_training_curv": [300, 303, 1008], "28x28": 301, "throw": [301, 388, 918, 1031, 1034, 1035, 1036, 1037, 1041], "infrastructur": [301, 321, 1006, 1007], "44139186": 301, "19174891": 301, "13983521": 301, "11378556": 301, "09443967": 301, "07846529": 301, "06506307": 301, "05534985": 301, "986429": 301, "953061": 301, "829": [301, 303, 1008], "plot_mnist_filt": [301, 303, 1008], "greyscal": 302, "bernoulli": [302, 415, 416, 834, 835, 836, 837, 838, 855, 856, 857, 862, 983, 997, 1009, 1023, 1027], "bernoullirbm": [302, 856, 857, 992, 997, 1029, 1030, 1039, 1041, 1044], "yann": [302, 1027, 1029], "dauphin": [302, 1029], "gabriel": [302, 1035, 1036, 1037, 1040, 1041], "synnaev": 302, "convolv": 302, "minmax_scal": [302, 305, 869, 1032, 1035], "nudge_dataset": 302, "1px": 302, "direction_vector": 302, "apply_along_axi": 302, "feature_rang": [302, 869, 885, 997, 1029, 1039], "cg": [302, 656, 657, 670, 672, 685, 983, 1031, 1032, 1034, 1038, 1040, 1041, 1044], "rbm": [302, 855, 856, 857, 992], "rbm_features_classifi": 302, "6000": [302, 625], "raw_pixel_classifi": 302, "logisticregressionifittedlogisticregress": 302, "_classif": 302, "1509": 302, "undefinedmetricwarn": [302, 726, 727, 780, 781, 784, 1036], "zero_divis": [302, 711, 726, 727, 735, 780, 781, 784, 987, 1037, 1039, 1043], "194": [302, 338, 349, 1008], "154": [302, 649, 988], "plot_rbm_logistic_classif": [302, 303, 1008], "incom": [305, 374, 438], "unscal": [305, 310, 983, 987, 1035, 1041], "unterthin": [305, 1030, 1031, 1032], "medinc": [305, 317, 374, 488], "houseag": [305, 317, 374, 488], "averoom": [305, 317, 374, 488], "room": [305, 374, 384, 407, 1010], "avebedrm": [305, 374, 488], "bedroom": [305, 374], "aveoccup": [305, 317, 374, 488], "features_idx": 305, "quantile_rang": [305, 877, 889, 1033], "yeo": [305, 309, 875, 887, 997, 1035, 1041, 1043], "cox": [305, 309, 875, 887, 997, 1035, 1043], "plasma": 305, "plasma_r": 305, "create_ax": 305, "bottom_h": 305, "left_h": 305, "rect_scatt": 305, "rect_histx": 305, "rect_histi": 305, "ax_scatt": 305, "ax_histx": 305, "ax_histi": 305, "ax_scatter_zoom": 305, "ax_histx_zoom": 305, "ax_histy_zoom": 305, "rect_colorbar": 305, "ax_colorbar": 305, "plot_distribut": 305, "hist_nbin": 305, "x0_label": 305, "x1_label": 305, "hist_x1": 305, "hist_x0": 305, "aesthet": [305, 1003, 1032], "tick_bottom": 305, "tick_left": 305, "outward": 305, "ec": [305, 528], "make_plot": 305, "item_idx": 305, "ax_zoom_out": 305, "ax_zoom_in": 305, "zoom_in_percentile_rang": 305, "cutoffs_x0": 305, "cutoffs_x1": 305, "non_outliers_mask": 305, "colorbarbas": 305, "OR": [305, 407, 418, 442, 1038], "indistinguish": 305, "quadrant": 305, "plot_all_sc": [305, 313, 1008], "straightforward": [306, 378, 412, 1011], "anywher": 306, "qinhanmin2005": 306, "sina": [306, 1040], "rnd": 306, "enc": [306, 308, 319, 321, 872, 873, 997], "x_bin": 306, "line_bin": 306, "263": [306, 313, 1008], "plot_discret": [306, 313, 1008], "get_nam": 307, "broader": [307, 983, 1010], "logisticregression__c": 307, "linearsvc__c": 307, "kbinsdiscretizer__n_bin": 307, "gradientboostingclassifier__learning_r": 307, "svc__c": [307, 859], "cm_piyg": 307, "piyg": 307, "b30065": 307, "178000": 307, "est_idx": 307, "942": [307, 313, 1008], "plot_discretization_classif": [307, 313, 1008], "centers_0": 308, "centers_1": 308, "x_list": 308, "grid_encod": 308, "stripe": 308, "plot_discretization_strategi": [308, 313, 1008], "powertransform": [309, 876, 887, 977, 997, 1035, 1038, 1041, 1043], "johnwon": 309, "weibul": 309, "bimod": [309, 413], "ineffect": [309, 997, 1035, 1036], "eric": [309, 1030, 1031, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042], "ericchang2017": 309, "northwestern": [309, 656], "contact": [309, 391, 1006], "font_siz": 309, "bc": 309, "qt": [309, 876], "x_lognorm": [309, 997], "x_chisq": 309, "chisquar": 309, "x_weibul": 309, "x_gaussian": 309, "x_uniform": 309, "loc_a": 309, "loc_b": 309, "105": 309, "x_a": 309, "x_b": 309, "x_bimod": 309, "d81b60": 309, "0188ff": 309, "ffc107": 309, "b7a2ff": 309, "2ec5ac": 309, "figaspect": 309, "axes_idx": 309, "axes_list": 309, "x_trans_bc": 309, "lmbda_bc": 309, "lambdas_": [309, 875, 1040, 1043], "x_trans_yj": 309, "lmbda_yj": 309, "x_trans_qt": 309, "ax_origin": 309, "ax_bc": 309, "ax_yj": 309, "ax_qt": 309, "x_tran": [309, 321, 381, 403, 440, 462, 875, 880, 887, 997], "meth_nam": 309, "lmbda": 309, "plot_map_data_to_norm": [309, 313, 1008], "involv": [310, 312, 315, 338, 342, 366, 368, 374, 377, 379, 383, 393, 394, 410, 417, 697, 827, 828, 984, 988, 990, 994, 995, 1002, 1006, 1011, 1019, 1035], "kneighbor": [310, 319, 841, 842, 843, 845, 847, 990, 1031, 1036, 1040, 1041, 1042, 1043], "obatin": 310, "tyler": [310, 1034, 1040, 1041, 1042], "lanigan": [310, 1034], "tylerlanigan": 310, "sebastian": [310, 1028, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1044], "raschka": [310, 1032, 1033, 1034, 1035, 1036, 1039], "sebastianraschka": 310, "alcohol": [310, 376], "malic": [310, 376], "acid": [310, 376], "scaled_x_train": 310, "x_plot_scal": 310, "fit_and_plot_model": 310, "scaled_pca": 310, "x_train_transform": [310, 362, 411], "x_train_std_transform": 310, "first_pca_compon": 310, "target_class": 310, "repercuss": 310, "logisticregressioncv": [310, 393, 398, 656, 983, 988, 1031, 1032, 1033, 1035, 1036, 1037, 1041, 1042, 1044], "unscaled_clf": 310, "scaled_clf": 310, "y_pred_scal": 310, "y_proba_sc": 310, "0825": 310, "vastli": 310, "907": [310, 313, 1008], "plot_scaling_import": [310, 313, 1008], "targetencod": [311, 312, 393, 872, 873, 977, 997, 1006, 1043, 1044], "wine_review": 311, "42074": 311, "countri": [311, 322, 494, 984], "provinc": 311, "region_1": 311, "region_2": 311, "wineri": 311, "tremend": [311, 414], "variet": 311, "hail": 311, "martha": 311, "vineyard": 311, "235": 311, "napa": 311, "vallei": 311, "cabernet": 311, "sauvignon": 311, "heitz": 311, "spain": 311, "ripe": 311, "aroma": 311, "blackberri": 311, "cassi": 311, "carodorum": 311, "selecci\u00f3n": 311, "reserva": 311, "northern": 311, "toro": 311, "tinta": 311, "bodega": 311, "carmen": 311, "rodr\u00edguez": 311, "watson": [311, 408], "honor": 311, "late": [311, 368], "harvest": 311, "knight": 311, "sonoma": 311, "blanc": 311, "macaulei": 311, "oak": 311, "reserv": [311, 559, 560, 1011, 1012], "oregon": 311, "willamett": 311, "pinot": 311, "noir": 311, "ponzi": 311, "franc": [311, 761], "b\u00e9gude": 311, "aft": [311, 1030], "br\u00fblade": 311, "provenc": 311, "bandol": 311, "one_hot": 311, "max_categori": [311, 319, 321, 872, 873, 997, 1041, 1043], "target_typ": [311, 880, 923, 950, 1044], "evaluate_model_and_stor": 311, "rmse_test_scor": 311, "rmse_train_scor": 311, "rmse_test_mean": 311, "rmse_test_std": 311, "rmse_train_mean": 311, "rmse_train_std": 311, "n_unique_categori": 311, "nuniqu": 311, "14810": 311, "1236": 311, "632": [311, 316, 323, 1008], "workaround": [311, 379, 796, 810], "high_cardinality_featur": 311, "low_cardinality_featur": 311, "mixed_encoded_preprocessor": 311, "high_cardin": 311, "low_cardin": 311, "mixed_pip": 311, "high_cardinalityindex": 311, "targetencodertargetencod": 311, "low_cardinalityindex": 311, "mixed_target": 311, "name_to_color": 311, "rmse_": 311, "_mean": 311, "_std": 311, "explod": 311, "unrel": [311, 367, 384, 387, 415, 513], "plot_target_encod": [311, 313, 1008], "near_uniqu": 312, "50_000": [312, 352], "n_categori": [312, 835, 873, 997], "kbin": [312, 320], "x_inform": 312, "permuted_categori": 312, "x_shuffl": 312, "catastroph": [312, 760, 1007], "x_near_unique_categori": 312, "raw_model": 312, "0049896314219657345": 312, "00457762158159003": 312, "model_with_cf": 312, "cf": [312, 407, 410, 440, 698, 983, 997, 1007], "8000184677460285": 312, "7927845601690948": 312, "coefs_cf": 312, "target_encod": 312, "x_train_no_cf_encod": 312, "x_test_no_cf_encod": 312, "model_no_cf": 312, "858486250088675": 312, "6338211367110066": 312, "coefs_no_cf": 312, "333": [312, 313, 841, 1008], "plot_target_encoder_cross_v": [312, 313, 1008], "858": 313, "announc": [315, 316, 317, 318, 319, 320, 321, 322, 383], "latest": [315, 316, 317, 318, 319, 320, 321, 322, 377, 379, 383, 385, 387, 1003, 1041], "upgrad": [315, 316, 317, 318, 319, 320, 321, 322, 397, 1007, 1027, 1032, 1035], "conda": [315, 316, 317, 318, 319, 320, 321, 322, 367, 379, 380, 382, 383, 385, 387, 397, 400, 1003], "forg": [315, 316, 317, 318, 319, 320, 321, 322, 367, 380, 382, 383, 387, 397], "plot_roc_curv": [315, 1037, 1039], "plot_precision_recall_curv": [315, 1037, 1039, 1040], "stackingclassifi": [315, 362, 393, 398, 414, 566, 977, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045], "9473684210526315": 315, "radiusneighborstransform": [315, 843, 990, 1037, 1039, 1041, 1042], "sklearn_cache_": 315, "isomap__n_neighbor": 315, "nan_euclidean_dist": [315, 759, 977, 1037], "ccp_alpha": [315, 356, 555, 556, 557, 558, 562, 563, 907, 908, 909, 910, 1003, 1037], "tree_": [315, 356, 360, 844, 907, 908, 909, 910], "node_count": [315, 356, 360, 907, 908, 909, 910], "check_estim": [315, 381, 393, 931, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042], "pytest": [315, 367, 377, 379, 381, 382, 397, 400, 403, 930, 931, 1037, 1040], "estimator_check": [315, 381, 393, 406, 1034, 1035, 1037, 1038, 1041, 1042, 1043], "parametrize_with_check": [315, 381, 930, 1037, 1038], "test_sklearn_compatible_estim": [315, 931], "decision_function_shap": [315, 347, 901, 904, 1002, 1032, 1033, 1036, 1037], "9870666666666666": 315, "plot_release_highlights_0_22_0": [315, 323, 1008], "await": 316, "lam": [316, 317, 1038], "35776189065725783": 316, "42425183539869404": 316, "openmp": [316, 377, 382, 391, 393, 407, 414, 955, 1038, 1040, 1043], "6023123869556829": 316, "10k": [316, 445], "monotoinc": 316, "gbdt_cst": 316, "999791942438998": 316, "plot_release_highlights_0_23_0": [316, 323, 1008], "art": [317, 385, 647, 690, 1006, 1011], "footprint": [317, 320, 366, 368, 407, 412, 553, 554, 555, 556, 561, 562, 563, 564, 1029, 1032, 1033, 1038, 1039, 1042], "yarowski": [317, 896, 1000], "selftrainingclassifi": [317, 328, 329, 330, 398, 1000, 1039, 1045], "random_unlabeled_point": [317, 894, 895, 896], "self_training_model": [317, 896], "base_estim": [317, 381, 405, 551, 552, 553, 554, 830, 833, 896, 976, 983, 1038, 1040, 1041, 1042, 1043], "selftrainingclassifierifittedselftrainingclassifi": 317, "7342": 317, "linear_baselin": 317, "714": 317, "decisiontreeregressorifitteddecisiontreeregressor": 317, "effort": [317, 379, 385, 1006, 1011, 1038, 1040], "plot_release_highlights_0_24_0": [317, 323, 1008], "l2_regular": [318, 414, 559, 560], "max_bin": [318, 319, 414, 559, 560, 1044], "quantileregressor": [318, 983, 987, 1040, 1041, 1042], "min_": [318, 407, 414, 869, 983, 997, 1001, 1002, 1003], "sum_i": [318, 644, 645, 650, 651, 658, 659, 660, 661, 679, 682, 978, 979, 983, 985, 987, 992], "pb_q": [318, 983], "_1": [318, 342, 409, 412, 415, 529, 535, 536, 538, 543, 544, 545, 644, 645, 650, 651, 652, 653, 654, 658, 659, 660, 661, 679, 680, 681, 682, 763, 983, 985, 987, 1002], "get_feature_nam": [318, 1035, 1036, 1038, 1039, 1040], "pet": [318, 322, 785, 987], "dog": [318, 319, 321, 322, 580, 780, 880, 997], "fish": 318, "pet_cat": 318, "pet_dog": 318, "pet_fish": 318, "plot_": [318, 397], "016": [318, 323, 352, 1008], "plot_release_highlights_1_0_0": [318, 323, 1008], "x_1d": 319, "hist_quantil": 319, "log_reg_input_featur": 319, "gather": [319, 321, 387, 394, 406, 407, 997, 1011], "min_frequ": [319, 321, 872, 873, 997, 1041, 1043], "rabbit": [319, 321, 997], "snake": [319, 321, 580, 880, 997], "infrequent_categories_": [319, 321, 872, 873, 880, 997], "x0_cat": [319, 997], "x0_rabbit": [319, 997], "x0_infrequent_sklearn": [319, 997], "refactor": [319, 1027, 1029, 1030, 1031, 1037, 1040, 1041, 1042], "radius_neighbor": [319, 847, 849, 850, 851, 1031, 1036, 1037, 1039, 1040, 1041, 1042], "pairwise_distances_argmin_min": [319, 776, 1030, 1035, 1041, 1042, 1043, 1044], "radiusneighborsclassifi": [319, 841, 842, 847, 850, 988, 990, 1027, 1029, 1033, 1035, 1037, 1039, 1040, 1041, 1042, 1043, 1044], "radiusneighborsregressor": [319, 841, 842, 847, 849, 990, 1027, 1029, 1035, 1037, 1039, 1040, 1041, 1042, 1043, 1044], "trustworthi": [319, 1035, 1036, 1041, 1042, 1043, 1044], "labelpropag": [319, 327, 895, 896, 988, 1000, 1028, 1033, 1034, 1037, 1038, 1039, 1041, 1042, 1043], "labelspread": [319, 325, 326, 327, 329, 330, 894, 896, 988, 1000, 1028, 1033, 1034, 1037, 1038, 1041, 1042, 1043], "blog": [319, 366, 379, 385, 387, 394, 1038], "cython": [319, 366, 367, 377, 379, 382, 388, 391, 397, 400, 403, 406, 407, 414, 506, 997, 998, 1001, 1002, 1006, 1007, 1027, 1030, 1031, 1033, 1039, 1042, 1043, 1044], "readili": [319, 412, 1003, 1011], "true_w": 319, "true_h": 319, "x_reconstruct": [319, 480, 481, 482, 581], "00364": 319, "divis": [319, 407, 415, 588, 589, 592, 710, 711, 726, 727, 735, 743, 780, 781, 784, 987, 1020, 1031, 1035, 1036, 1039, 1043, 1044], "bisect_km": 319, "plot_release_highlights_1_1_0": [319, 323, 1008], "video": [320, 373, 382, 501, 988, 1011, 1013], "sepal_col": 320, "petal_col": 320, "x_out": [320, 863, 872, 873], "052506": 320, "592373": 320, "189830": 320, "973554": 320, "416010": 320, "630382": 320, "765012": 320, "362176": 320, "021849": 320, "788808": 320, "hist_no_interact": 320, "v1": [320, 373, 397, 559, 560, 794, 795, 1039, 1042, 1043, 1044], "liac": [320, 373, 379, 494, 1042, 1043], "arff": [320, 379, 494, 1039, 1042, 1043], "ticket": [320, 379], "cabin": 320, "boat": 320, "allen": [320, 1030, 1032, 1034, 1037], "elisabeth": [320, 1044], "walton": 320, "24160": 320, "3375": 320, "b5": 320, "loui": [320, 1032, 1033, 1037, 1039, 1041, 1043, 1044], "mo": [320, 1038], "allison": 320, "hudson": 320, "9167": 320, "113781": 320, "5500": [320, 686, 984], "c22": 320, "c26": 320, "montreal": 320, "pq": 320, "chestervil": 320, "ON": 320, "helen": 320, "lorain": 320, "joshua": [320, 374, 1029, 1030, 1032, 1033, 1039, 1042, 1043], "creighton": 320, "bessi": 320, "waldo": 320, "compliant": [320, 379], "cupi": [320, 391, 403, 1044], "gpu": [320, 403, 991, 1007, 1021, 1044], "changelog": [320, 383, 393, 1025], "plot_release_highlights_1_2_0": [320, 323, 1008], "throughout": [321, 362, 393, 625, 797, 856, 857, 1012, 1030, 1035], "codebas": [321, 362, 379, 380, 381, 415, 1027, 1033], "ongo": [321, 380, 394], "incorpor": [321, 379, 408, 414, 986, 1006, 1011], "contrib": [321, 379, 381, 387, 391, 393, 407, 1006, 1007, 1043], "adpot": 321, "true_label": [321, 325, 326], "non_noisy_label": 321, "9694149248180188": 321, "encodings_": [321, 880, 997], "validation_curv": [321, 346, 398, 818, 982, 1034, 1035, 1036, 1039, 1043], "geomspac": 321, "make_low_rank_matrix": [321, 522], "46858513287221654": 321, "428": [321, 323, 1008], "plot_release_highlights_1_3_0": [321, 323, 1008], "x_adult": 322, "y_adult": 322, "adult": [322, 494, 997], "fnlwgt": [322, 494], "workclass": [322, 494], "marit": [322, 494], "y_decis": [322, 830], "9290076807161807": 322, "df_out": 322, "heightpet_catpet_dogf64f64f64": 322, "2156660": 322, "8626621": 322, "4018260": 322, "7548291": 322, "2939931": 322, "rf_no_cst": 322, "rf_cst": 322, "icon": [322, 381], "hover": 322, "randomforestclassifierinot": 322, "fittedrandomforestclassifi": 322, "routin": [322, 368, 373, 376, 379, 380, 381, 382, 387, 391, 393, 416, 670, 672, 685, 842, 901, 902, 903, 904, 905, 984, 990, 997, 998, 1001, 1006, 1011, 1027, 1041, 1042, 1043], "get_scor": [322, 393, 730, 1034, 1043], "hyperparameter_grid": 322, "scoring_inner_cv": 322, "test_ms": 322, "interfer": [322, 1037], "2609845": 322, "34154663": 322, "26787937": 322, "2123341": 322, "28329047": 322, "levarag": 322, "linearoper": [322, 685], "x_spars": [322, 532, 958, 961], "x_dens": [322, 542], "time_spars": 322, "time_dens": 322, "speedup": [322, 366, 412, 414, 648, 652, 655, 1027, 1028, 1029, 1030, 1042], "2x": [322, 1027], "265": [322, 323, 732, 834, 838, 989, 1008], "plot_release_highlights_1_4_0": [322, 323, 1008], "466": [323, 994], "release_highlight": [323, 1008], "semisupervis": [325, 393], "clai": [325, 326, 327, 330, 1027], "woolam": [325, 326, 327, 330, 1027], "n_total_sampl": [325, 326], "n_labeled_point": [325, 326], "unlabeled_set": 325, "everyth": [325, 362, 383, 385, 391, 462, 942, 1006, 1007, 1027], "lp_model": [325, 326], "predicted_label": [325, 326], "transduction_": [325, 326, 327, 894, 895, 896], "_plot": 325, "0x7f5826fa9400": 325, "pred_entropi": [325, 326], "label_distributions_": [325, 326, 894, 895, 1038], "uncertainty_index": [325, 326], "image_index": [325, 326], "339": [325, 331, 1008], "plot_label_propagation_digit": [325, 331, 1008], "max_iter": 326, "______________________________________________________________________": 326, "330": 326, "unlabeled_indic": 326, "transduc": 326, "delete_indic": 326, "183": [326, 385, 988, 1027], "nfit": 326, "delete_index": 326, "550": [326, 331, 353, 1008], "plot_label_propagation_digits_active_learn": [326, 331, 1008], "label_spread": 327, "labelspreadingifittedlabelspread": 327, "output_label": 327, "output_label_arrai": 327, "outer_numb": 327, "inner_numb": 327, "plot_label_propagation_structur": [327, 331, 1008], "breast_canc": 328, "augment": [328, 628, 881, 995, 1011], "oliv": [328, 330, 1035, 1036, 1038, 1039, 1040], "rausch": [328, 330, 1035, 1036, 1039], "rauscho": [328, 330], "ethz": [328, 330], "total_sampl": [328, 534], "base_classifi": [328, 330, 1000], "x_valu": 328, "99999": 328, "amount_label": 328, "amount_iter": 328, "self_training_clf": 328, "skfold": 328, "y_test_tru": 328, "labeled_iter_": [328, 896], "return_count": [328, 352, 851], "capsiz": 328, "twinx": 328, "plot_self_training_varying_threshold": [328, 331, 1008], "2823": 329, "2117": 329, "1676": 329, "1108": 329, "847": 329, "tfidftransform": [329, 352, 353, 415, 487, 589, 1021, 1034, 1035, 1041, 1043, 1044, 1045], "sdg_param": 329, "vectorizer_param": 329, "selftrain": 329, "st_pipelin": 329, "ls_pipelin": 329, "eval_and_print_metr": 329, "y_mask": 329, "x_20": 329, "y_20": 329, "plot_semi_supervised_newsgroup": [329, 331, 1008], "y_rand": 330, "y_30": 330, "y_50": 330, "ls30": 330, "ls50": 330, "ls100": 330, "st30": 330, "st50": 330, "rbf_svc": [330, 1002], "color_map": 330, "plot_semi_supervised_versus_svm_iri": [330, 331, 1008], "my_kernel": [334, 1002], "117": [334, 349, 1008, 1028], "plot_custom_kernel": [334, 349, 1008], "2x2": [335, 407, 751], "plot_iris_svc": [335, 349, 1008], "convention": [336, 393, 895], "support_vector_indic": 336, "210": [336, 349, 1008], "plot_linearsvc_support_vector": [336, 349, 1008], "plot_oneclass": [337, 349, 1008], "midpoint": 338, "blink": 338, "act": [338, 351, 379, 392, 413, 414, 711, 726, 727, 735, 780, 781, 784, 874, 878, 984, 987, 990, 1002, 1035], "spuriou": [338, 387, 997, 1040, 1041, 1042], "c_rang": 338, "gamma_rang": 338, "midpointnorm": 338, "masked_arrai": [338, 796, 810], "x_2d": 338, "y_2d": 338, "c_2d_rang": 338, "gamma_2d_rang": 338, "bright": 338, "brutal": 338, "plot_rbf_paramet": [338, 349, 1008], "plot_separating_hyperplan": [339, 349, 1008], "plain": [340, 417, 655, 1001], "n_samples_1": [340, 1002], "n_samples_2": [340, 1002], "clusters_std": 340, "wclf": 340, "wdisp": 340, "202": [340, 349, 1008], "plot_separating_hyperplane_unbalanc": [340, 349, 1008], "blown": 341, "score_mean": 341, "score_std": 341, "this_scor": [341, 1016], "348": [341, 349, 1008], "plot_svm_anova": [341, 349, 1008], "outermost": 342, "hinge_loss": [342, 987, 1031, 1039, 1040], "enrich": 342, "plot_training_data_with_decision_boundari": 342, "cosine_similar": [342, 757, 762, 985, 1032], "untransform": [342, 462, 465, 998], "bend": 342, "tanh": [342, 774, 856, 857, 985, 1002], "hyperbol": [342, 640, 856, 857, 985, 991], "generaliz": [342, 414], "comprehens": [342, 415, 755, 756, 985, 1011, 1035], "plot_svm_kernel": [342, 349, 1008], "plot_svm_margin": [343, 349, 1008], "fignum": 343, "unreg": 343, "yy_down": 343, "yy_up": 343, "nusvc": [344, 366, 435, 902, 988, 1002, 1027, 1028, 1029, 1032, 1035, 1037, 1038, 1039, 1041], "562": [344, 349, 1008], "plot_svm_nonlinear": [344, 349, 1008], "svr_rbf": 345, "svr_lin": 345, "svr_poli": 345, "kernel_label": 345, "model_color": 345, "setdiff1d": 345, "fancybox": 345, "plot_svm_regress": [345, 349, 1008], "omega": [346, 410, 981], "dependen": 346, "reparametr": 346, "model_l1": 346, "shuffle_param": 346, "best_c": 346, "idxmax": 346, "train_size_idx": 346, "results_sc": 346, "c_scale": 346, "best_c_scal": 346, "somewhat": [346, 362, 368, 379, 381, 412, 414, 901, 904, 983, 1002, 1003], "dantzig": 346, "model_l2": 346, "plot_svm_scale_c": [346, 349, 1008], "break_ti": [347, 901, 904, 1002, 1037], "accent": [347, 586, 587, 589, 1037], "plot_svm_tie_break": [347, 349, 1008], "emphasi": [348, 410, 901, 902, 903, 904, 905, 994, 1006], "subtl": [348, 362, 986, 1007], "plot_decision_funct": 348, "sample_weight_last_ten": 348, "sample_weight_const": 348, "clf_no_weight": 348, "clf_weight": 348, "plot_weighted_sampl": [348, 349, 1008], "336": [349, 385, 997], "size_mb": 351, "utf": [351, 353, 415, 485, 501, 580, 586, 587, 589], "load_dataset": 351, "sublinear_tf": [351, 412, 415, 588, 589], "duration_train": 351, "duration_test": 351, "data_train_size_mb": 351, "data_test_size_mb": 351, "2034": [351, 374], "98mb": 351, "1353": 351, "87mb": 351, "044mb": 351, "7831": 351, "636mb": 351, "ridgeclassifi": [351, 366, 670, 671, 673, 983, 988, 1032, 1036, 1040, 1041, 1042], "sparse_cg": [351, 670, 672, 685, 983, 1028, 1034, 1036, 1037, 1041, 1043], "rarer": [351, 353, 415], "deeper": [351, 1003], "plot_feature_effect": 351, "average_feature_effect": 351, "top5": 351, "top_indic": 351, "predictive_word": 351, "bar_siz": 351, "y_loc": 351, "keyword": [351, 373, 379, 381, 384, 386, 393, 407, 418, 421, 436, 442, 443, 448, 450, 455, 462, 465, 494, 501, 533, 536, 538, 557, 558, 565, 566, 567, 568, 618, 626, 629, 630, 637, 641, 644, 645, 650, 651, 658, 659, 660, 661, 679, 682, 686, 690, 695, 696, 697, 698, 699, 700, 771, 775, 776, 777, 778, 789, 790, 802, 818, 839, 840, 841, 842, 843, 845, 847, 849, 850, 851, 852, 853, 859, 863, 931, 954, 976, 984, 987, 990, 1000, 1027, 1031, 1033, 1034, 1035, 1037, 1039, 1041, 1042, 1043, 1044], "keith": [351, 1027, 1032], "atheist": 351, "orbit": [351, 352], "caltech": 351, "expectedli": 351, "pollut": [351, 725, 782, 987, 993], "sender": [351, 374], "livesei": 351, "solntz": 351, "wpd": 351, "sgi": 351, "jon": [351, 1034, 1037, 1038, 1040, 1041, 1044], "nntp": [351, 374, 1021], "1qlettinn8oi": 351, "cco": 351, "allan": [351, 405, 1039], "schneider": [351, 1040], "instinct": 351, "happi": [351, 391, 394, 814, 815], "listen": 351, "murder": 351, "voluntari": 351, "disregard": [351, 393, 415, 430, 463, 480, 481, 482, 550, 552, 554, 556, 558, 560, 563, 566, 568, 609, 633, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 658, 659, 660, 661, 662, 663, 665, 668, 670, 671, 676, 677, 719, 720, 721, 782, 832, 833, 842, 850, 857, 868, 869, 875, 876, 879, 884, 887, 888, 890, 900, 902, 905, 908, 910, 987, 1035], "beings": 351, "bahavior": 351, "theirs": 351, "mimicri": 351, "imit": 351, "parrot": 351, "polli": 351, "pulchritud": 351, "anim": [351, 415], "kill": [351, 391], "Or": [351, 360, 411, 412, 872, 987, 993, 1001], "sigh": 351, "wonder": [351, 377], "bahaviour": 351, "believ": [351, 352, 387, 391, 1011], "primat": 351, "arbitarili": 351, "poster": [351, 378, 379, 1020], "weren": [351, 873, 1036], "slai": 351, "mate": 351, "ritual": 351, "whatnot": 351, "aren": [351, 374, 383, 397, 406, 723, 753, 992, 1037, 1039], "ye": [351, 387, 393, 866, 883, 983], "gorilla": 351, "dolphin": 351, "platypu": 351, "writer": 351, "launch": [351, 352, 397, 1011], "custom_nam": 351, "clf_descr": 351, "rocchio": [351, 846], "000955": 351, "772": [351, 720], "5316": 351, "0329": 351, "000628": 351, "000946": 351, "0911": 351, "0535": 351, "704": 351, "0315": 351, "000621": 351, "752": 351, "0306": 351, "000631": 351, "762": 351, "00336": 351, "00196": 351, "748": [351, 385], "00225": 351, "000532": 351, "779": 351, "txt": [351, 373, 491, 501], "curs": [351, 352, 407, 413, 989, 990, 1015, 1020], "harm": [351, 381, 415, 792], "plot_document_classification_20newsgroup": [351, 354, 1008], "discov": [352, 406, 407, 412, 415, 418, 442, 446, 1012, 1042], "category_s": 352, "true_k": 352, "3387": 352, "evaluations_std": 352, "fit_and_evalu": 352, "evaluation_std": 352, "score_valu": 352, "std_score": [352, 1040], "collis": [352, 353, 415, 580, 587], "x_tfidf": 352, "433": [352, 376], "7929": [352, 1034], "prod": [352, 619], "phenomenon": [352, 997], "cluster_s": 352, "1638": 352, "309": 352, "447": 352, "1689": 352, "638": [352, 385], "3384": 352, "1887": 352, "311": 352, "1771": 352, "973": [352, 411], "628": 352, "377": 352, "redo": 352, "x_lsa": 352, "explained_vari": [352, 987], "419": [352, 614], "310": 352, "029": [352, 995], "minibatch_kmean": 352, "342": 352, "371": 352, "297": [352, 374], "original_space_centroid": 352, "order_centroid": 352, "ve": [352, 379, 415, 1011, 1021, 1034], "shuttl": 352, "bibl": 352, "sparciti": 352, "lsa_vector": 352, "x_hashed_lsa": 352, "393": 352, "415": 352, "030": 352, "351": 352, "034": [352, 469], "037": [352, 707], "024": 352, "df_std": 352, "speak": [352, 366, 379, 1001], "safer": [352, 362, 377, 407, 411, 1027], "plot_document_clust": [352, 354, 1008], "18000": [353, 374], "raw_data": 353, "data_size_mb": 353, "3803": 353, "245mb": 353, "anyth": [353, 383, 385, 393, 398, 408, 411, 947, 951, 1041], "unicod": [353, 415, 485, 501, 580, 586, 587, 589, 952, 1027, 1035, 1039], "charact": [353, 379, 384, 393, 415, 501, 506, 507, 586, 587, 589, 911, 992, 1021, 1027, 1040, 1042], "underscor": [353, 381, 393, 971, 1018, 1027, 1037, 1040], "tok": [353, 415], "findal": 353, "token_freq": 353, "dict_count_vector": 353, "47928": 353, "vocabulary_": [353, 415, 579, 586, 589, 1021, 1027], "19145": 353, "n_nonzero_column": 353, "43873": 353, "inact": [353, 373, 379], "601": 353, "47668": 353, "input_typ": [353, 415, 580], "y_po": 353, "downsid": 353, "featureheash": 353, "implicitli": [353, 388, 414, 595, 630, 631, 878, 977, 979, 994, 997, 1002], "token_pattern": [353, 415, 586, 587, 589], "740": 353, "47885": 353, "754": 353, "plot_hashing_vs_dict_vector": [353, 354, 1008], "parameter": [356, 417, 612, 613, 620, 621, 794, 795, 983, 984, 992, 997, 1003], "weakest": [356, 1003], "cost_complexity_pruning_path": [356, 907, 908, 909, 910], "drawstyl": [356, 698], "3272984419327777": 356, "plot_cost_complexity_prun": [356, 361, 1008], "ryb": 357, "pairidx": 357, "borderpad": 357, "handletextpad": 357, "plot_iris_dtc": [357, 361, 1008], "plot_tre": [357, 360, 1003, 1036, 1038, 1039, 1040, 1042, 1043], "plot_tree_regress": [358, 361, 1008], "regr_3": 359, "y_3": 359, "278": [359, 361, 376, 839, 840, 1008], "plot_tree_regression_multioutput": [359, 361, 1008], "decision_path": [360, 555, 556, 562, 563, 564, 907, 908, 909, 910, 1033, 1038], "decisiontreeclassifierifitteddecisiontreeclassifi": 360, "compute_node_depth": 360, "children_left": 360, "children_right": 360, "n_node_sampl": 360, "weighted_n_node_sampl": 360, "travers": [360, 990, 994], "n_node": [360, 439, 443, 461, 555, 556, 562, 563, 564, 907, 908, 909, 910, 941], "node_depth": 360, "is_leav": 360, "pop": [360, 391, 914, 1016, 1035], "visit": [360, 379, 994, 1010], "node_id": [360, 911, 913], "is_split_nod": 360, "children": [360, 407, 414, 439, 443, 461, 564, 1031, 1044], "33035714": 360, "30357143": 360, "36607143": 360, "800000011920929": 360, "45333333": 360, "54666667": 360, "950000047683716": 360, "91666667": 360, "08333333": 360, "02564103": 360, "97435897": 360, "n_output": [360, 393, 414, 424, 430, 431, 435, 440, 443, 463, 467, 480, 481, 482, 530, 532, 534, 535, 537, 540, 541, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 562, 563, 565, 566, 567, 568, 580, 581, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 608, 609, 626, 628, 631, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 670, 671, 672, 673, 674, 676, 677, 719, 720, 725, 742, 743, 745, 747, 748, 750, 751, 782, 785, 787, 788, 796, 799, 800, 802, 810, 818, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 846, 848, 849, 850, 855, 856, 857, 858, 862, 863, 864, 865, 868, 869, 871, 872, 873, 874, 876, 877, 878, 879, 891, 892, 894, 895, 899, 900, 901, 902, 904, 905, 907, 908, 909, 910, 925, 958, 987, 988, 1003, 1034, 1037], "node_index": 360, "node_ind": 360, "leaf_id": 360, "sample_id": [360, 374, 495], "threshold_sign": 360, "inequ": [360, 393, 407, 441, 445, 457, 697, 984, 985, 990], "common_nod": 360, "common_node_id": 360, "085": [360, 361, 1008], "plot_unveil_tree_structur": [360, 361, 1008], "x_test_transform": [362, 411], "tip": [362, 365, 379, 382, 385, 402, 415, 532, 539, 643, 690, 983, 1009, 1010, 1022, 1023, 1030], "standard_norm": [362, 685], "unfair": 362, "x_select": 362, "gbc": 362, "x_train_select": 362, "x_test_select": 362, "glossari": [362, 379, 381, 385, 406, 418, 419, 435, 438, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 455, 456, 457, 458, 459, 460, 462, 465, 467, 470, 472, 486, 489, 490, 493, 495, 501, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 581, 582, 592, 600, 605, 606, 608, 609, 625, 630, 632, 637, 638, 639, 640, 644, 645, 647, 648, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 669, 670, 671, 672, 673, 674, 675, 676, 677, 685, 686, 687, 688, 689, 690, 691, 692, 693, 699, 771, 775, 778, 790, 794, 795, 796, 798, 799, 800, 801, 802, 808, 810, 811, 812, 813, 814, 815, 816, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 841, 842, 844, 845, 847, 848, 849, 850, 852, 853, 855, 856, 857, 858, 861, 864, 876, 880, 888, 891, 892, 894, 895, 899, 900, 901, 904, 907, 908, 909, 910, 935, 936, 958, 961, 976, 977, 983, 1012, 1035], "mtrand": 362, "_rand": 362, "85418642": 362, "79084103": 362, "13077794": 362, "11915045": 362, "56479934": 362, "70814003": 362, "25291366": 362, "55212743": 362, "18197458": 362, "37845099": 362, "mutat": [362, 1035], "debug": [362, 367, 380, 382, 385, 393, 396, 625, 898, 953, 1006, 1021, 1035, 1039], "govern": [362, 366, 379, 393, 1011], "implic": [362, 379], "rf_123": 362, "rf_inst": 362, "didn": [362, 393, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "strict": [362, 377, 393, 412, 501, 533, 586, 587, 589, 983, 1027, 1036, 1039], "pervas": [362, 379], "unlucki": 362, "lucki": 362, "fairer": 362, "temptat": [362, 379], "throughput": [365, 1006, 1023, 1030], "switch": [365, 676, 702, 715, 734, 752, 754, 792, 839, 840, 935, 936, 987, 990, 1023, 1027], "offlin": [366, 379], "bottleneck": [366, 385, 414, 446, 856, 857], "hurt": [366, 532, 1035], "toolkit": [366, 1006, 1011], "branch": [366, 377, 379, 382, 383, 407, 414, 440, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 907, 908, 909, 910, 912, 990, 994, 1003], "sklearn_assume_finit": 366, "assume_finit": [366, 367, 466, 897], "assert_all_finit": [366, 388, 466], "nm": 366, "csc": [366, 391, 393, 415, 525, 549, 551, 552, 668, 690, 866, 868, 874, 879, 882, 884, 890, 915, 919, 920, 950, 962, 963, 965, 966, 967, 968, 990, 997, 1035, 1036, 1038, 1041], "32bit": [366, 952], "multithread": [366, 407, 899, 900, 901, 902, 903, 904, 905], "bla": [366, 367, 377, 380, 385, 1027, 1035, 1036, 1038, 1039], "sparsity_ratio": 366, "gbt": 366, "speedi": 366, "packet": 366, "reuter": [366, 374], "carefulli": [366, 412, 1002], "spawn": [366, 391, 796, 810, 820, 821, 822, 1038], "gil": [366, 367, 380, 955, 1030, 1035, 1036, 1039, 1040, 1044], "ought": 366, "lapack": [366, 367, 377, 530, 533, 539, 686, 1042], "dgemm": 366, "show_vers": [366, 377, 379, 387, 397, 1035], "atla": [366, 377], "rebuild": [366, 401, 415, 440], "openbla": [366, 367, 377, 391, 955, 1040, 1044], "mkl": [366, 367, 377, 391, 955, 1027], "veclib": [366, 391], "osx": 366, "nouri": [366, 1028, 1030], "instruct": [366, 379, 380, 381, 382, 383, 384, 387, 391, 392, 501, 586, 587, 589, 1010, 1012, 1021, 1027], "ubuntu": [366, 377, 385, 387], "1gb": 366, "mib": [366, 466, 897], "working_memori": [366, 367, 466, 778, 897, 1035], "adher": [366, 381, 393, 930, 931, 1027, 1028], "pairwise_distances_chunk": [366, 775, 1035, 1038, 1044], "facilit": [366, 393, 401, 1006, 1007, 1033, 1036], "moment": [366, 412, 417, 438, 613, 621, 856, 857, 951, 991, 992], "000024": 366, "027400": 366, "mileag": 366, "deploi": [366, 396, 401, 1007, 1011], "upstream": [366, 379, 383, 387, 391, 997, 1036], "lighter": [366, 698, 700, 779, 786, 1043], "threadpoolctl": [367, 377, 397, 400], "subsect": [367, 379, 406], "worker": [367, 393, 415, 953, 954, 955, 1042], "14228": 367, "loki": [367, 955, 987, 1035, 1038], "duplic": [367, 378, 379, 393, 407, 418, 442, 446, 447, 513, 633, 644, 645, 650, 651, 658, 659, 660, 661, 679, 682, 823, 870, 973, 990, 1027, 1030, 1039, 1041, 1043, 1044], "memmap": [367, 374, 393, 412, 506, 532, 1035, 1044], "1mb": [367, 1032], "parallel_backend": [367, 418, 435, 442, 444, 446, 448, 450, 455, 456, 459, 462, 465, 470, 529, 533, 534, 535, 537, 540, 541, 543, 544, 546, 553, 554, 555, 556, 561, 562, 563, 564, 565, 566, 567, 568, 592, 600, 605, 606, 608, 630, 632, 637, 645, 649, 651, 653, 655, 656, 657, 659, 661, 663, 664, 666, 674, 677, 686, 687, 688, 689, 690, 691, 692, 771, 775, 778, 796, 799, 800, 802, 810, 818, 820, 821, 822, 823, 824, 826, 827, 828, 829, 831, 832, 841, 842, 845, 847, 849, 850, 852, 853, 858, 861, 894, 895, 1035], "exclus": [367, 391, 393, 412, 414, 625, 626, 628, 976, 983, 987, 988, 1011, 1034, 1038], "omp_num_thread": 367, "my_script": 367, "algebra": [367, 377, 382, 391, 412, 415, 460, 865, 997], "bli": [367, 377, 391], "mkl_num_thread": 367, "openblas_num_thread": 367, "blis_num_thread": 367, "bash": [367, 387], "zsh": 367, "termin": [367, 384, 385, 387, 397, 407, 421, 446, 459, 551, 552, 556, 557, 558, 561, 563, 664, 665, 666, 674, 676, 856, 857, 908, 910, 993, 1003], "pypi": [367, 377, 379, 381, 383, 385, 397, 1003, 1035, 1039, 1041, 1042, 1044], "channel": [367, 374, 377, 391, 397, 415, 491, 492, 581, 582, 584, 585, 1010], "subscript": [367, 1040], "max_thread": [367, 380], "n_cpu": [367, 393], "preced": [367, 379, 485, 987, 1027], "lib": [367, 377, 397, 1006], "_num_thread": 367, "singleton": [367, 804, 922, 1040, 1043], "aforement": [367, 988], "global_random_se": 367, "fixtur": [367, 379], "build_numb": 367, "disrupt": 367, "config": [367, 377, 379, 380, 387, 624, 1035], "contributor": [367, 382, 383, 384, 387, 391, 393, 987, 1007, 1028, 1029, 1030, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "encount": [367, 377, 397, 401, 407, 414, 415, 494, 559, 560, 579, 834, 835, 836, 838, 872, 962, 997, 1001, 1006, 1010, 1011, 1021, 1035, 1038], "annoi": 367, "test_your_test_nam": 367, "skip": [367, 379, 381, 388, 403, 415, 466, 566, 644, 645, 650, 658, 659, 660, 669, 679, 897, 1021, 1031, 1034, 1037, 1039, 1041, 1043], "global_dtyp": 367, "boundscheck": [367, 380], "segfault": [367, 380, 1027, 1035, 1040], "posix": [367, 391], "pairwisedistancesreduct": 367, "adequ": [367, 385, 565, 1012, 1040], "unset": [367, 393, 1035], "_get_warnings_filters_info_list": 367, "sklearn_warning_as_error": 367, "syntax": [367, 379, 384, 387, 408, 466, 858, 859, 897, 976, 1012, 1038, 1040], "rst": [367, 379, 383, 387, 1021, 1027], "drive": [368, 412, 413, 547, 1001, 1011, 1021], "passiveaggressiveregressor": [368, 983, 1028, 1031, 1034, 1035, 1038, 1040], "maxabsscal": [368, 403, 863, 884, 977, 997, 1032, 1035, 1036, 1037, 1038, 1043, 1044], "passiveaggress": [368, 415], "fledg": [368, 415], "naivebay": 368, "dramat": 368, "fetcher": [372, 1032, 1034, 1043], "linnerrud": [372, 1023], "covertyp": [372, 489, 1023], "rcv1": [372, 495, 1023, 1032], "svmlight": [372, 485, 506, 507, 1023, 1027, 1028, 1034, 1036], "jpeg": [373, 374, 491, 492], "publish": [373, 374, 381, 383, 387, 393, 999, 1007, 1039], "creativ": 373, "spare": [373, 672, 673], "pyplpt": 373, "load_svmlight_fil": [373, 1027, 1028, 1033, 1034, 1035, 1042], "test_dataset": 373, "everybodi": [373, 379], "upload": [373, 377, 383, 391, 669], "mice": [373, 625, 977], "brain": 373, "miceprotein": 373, "1080": [373, 407], "sc": [373, 407], "clara": [373, 1039], "higuera": 373, "katheleen": 373, "gardin": 373, "krzysztof": 373, "cio": 373, "protein": 373, "cite": [373, 407], "kj": [373, 989], "critic": [373, 379, 392, 401, 414, 690, 984, 987, 995, 1002, 1011, 1038], "syndrom": 373, "plo": [373, 605, 606], "ONE": [373, 605, 606], "e0129126": 373, "40966": 373, "upload_d": 373, "08t16": 373, "17928620": 373, "file_id": 373, "default_target_attribut": 373, "row_id_attribut": 373, "mouseid": 373, "ignore_attribut": 373, "genotyp": 373, "cc18": 373, "study_135": 373, "study_98": 373, "study_99": 373, "md5_checksum": 373, "3c479a6885bfa0438971388283a1ce32": 373, "websit": [373, 374, 376, 379, 394, 397, 991, 1001, 1010, 1011, 1021, 1028, 1029, 1030], "4550": 373, "17t14": 373, "1804243": 373, "pone": 373, "0129126": 373, "openml100": 373, "study_14": 373, "study_34": 373, "earliest": [373, 984], "iris_61": 373, "iris_969": 373, "969": 373, "iris_version_3": 373, "vanschoren": [373, 1039], "rijn": [373, 1035], "bischl": 373, "torgo": 373, "acm": [373, 374, 407, 418, 442, 448, 455, 458, 509, 561, 674, 723, 753, 845, 987, 990, 993, 999], "sigkdd": [373, 374, 509, 674, 880, 997, 999], "newslett": 373, "legaci": [373, 383, 393, 955, 1027, 1034, 1039], "my": [373, 379, 384, 387, 494], "columnar": [373, 462, 1006], "usabl": [373, 379, 381, 393, 401, 415, 796, 955, 1027, 1034, 1041, 1042], "io": [373, 376, 377, 379, 383, 385, 387, 393, 401, 690, 1006, 1025], "json": [373, 379, 397], "sql": 373, "smoothli": 373, "manipul": [373, 403, 505, 955, 1006, 1033], "mat": [373, 415], "load_fil": [373, 374, 1021, 1029, 1041], "audio": [373, 501], "wish": [373, 379, 386, 388, 397, 407, 936, 1013, 1021, 1034], "imageio": 373, "wavfil": 373, "wav": 373, "hdf5": 373, "h5py": 373, "pytabl": 373, "april": [374, 662, 683, 684, 1031, 1039], "AT": [374, 493], "laboratori": [374, 1006], "cambridg": [374, 412, 588, 834, 838, 983, 985, 989], "facial": 374, "glass": 374, "upright": 374, "frontal": 374, "movement": 374, "credit": [374, 387, 414, 983, 1011], "18846": [374, 486, 487], "scikit_learn_data": [374, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497], "20news_hom": 374, "newsgroups_train": 374, "11314": 374, "1073": 374, "20new": [374, 1021], "34118": 374, "30000": 374, "01327": 374, "newsgroups_test": 374, "vectors_test": 374, "class_prior": [374, 834, 835, 836, 838, 1028, 1031], "fit_prior": [374, 834, 835, 836, 838], "88213": 374, "suspici": 374, "show_top10": 374, "top10": 374, "affili": 374, "abund": 374, "clue": [374, 387, 984], "bare": [374, 984, 1021], "quotat": 374, "77310": 374, "76995": 374, "cleveland": 374, "indian": 374, "leagu": 374, "team": [374, 382, 391, 393, 1006, 1011, 1027], "ohio": 374, "spark": [374, 1007], "death": 374, "floyd": [374, 686, 984], "reckon": 374, "coloni": 374, "paul": [374, 1030, 1033, 1034, 1035, 1036, 1040, 1041], "dolan": 374, "nicknam": 374, "tribe": 374, "theme": [374, 397, 400, 1027], "mlb": [374, 870], "inappropri": [374, 411, 417, 707, 817], "nlp": [374, 412, 415, 834, 838, 985, 1011], "cultur": 374, "inflammatori": 374, "famou": [374, 376, 414, 1002], "internet": [374, 384, 997, 1019], "offici": [374, 381, 393, 397, 491, 495, 1006, 1021, 1035, 1036, 1039], "verif": [374, 987, 1011], "identif": [374, 379, 407, 495, 976, 1013], "viola": [374, 1035], "opencv": 374, "detector": [374, 393, 845], "5749": [374, 491, 492], "13233": [374, 491, 492], "5828": [374, 491, 492], "200m": 374, "lfw_home": 374, "rectangular": [374, 393, 936, 1007], "1140": 374, "fetch_lfw_pair": [374, 1032, 1042], "lfw_pairs_train": 374, "subdivid": [374, 417], "10_fold": [374, 491], "gari": [374, 1034], "huang": [374, 656, 1033, 1038], "manu": 374, "ramesh": [374, 1011, 1030, 1033, 1037], "tamara": [374, 1044], "berg": [374, 1028, 1029, 1039, 1044], "erik": [374, 1011, 1030], "miller": [374, 1035, 1036, 1040], "massachusett": 374, "amherst": 374, "30m": 374, "seven": [374, 980], "homepag": [374, 528, 1003], "581012": [374, 489], "newswir": 374, "ltd": [374, 1011], "804414": [374, 495], "47236": [374, 495], "fetch_rcv1": [374, 1032, 1036], "v2": [374, 495, 662, 683, 684, 983], "chronolog": [374, 495], "23149": [374, 495, 1041], "781265": [374, 495], "lyrl2004": [374, 495], "2286": 374, "810596": 374, "2287": 374, "2288": 374, "uint32": [374, 495], "gmil": 374, "381327": 374, "ccat": 374, "e11": 374, "ecat": 374, "m11": 374, "656": 374, "lewi": [374, 1034, 1038], "yang": [374, 407, 412, 532, 637, 1033, 1034, 1037, 1039, 1040, 1041, 1043, 1044], "rose": 374, "361": [374, 414, 553, 554], "397": 374, "cup": [374, 987], "tcpdump": 374, "darpa": 374, "intrus": 374, "lincoln": 374, "unrealist": 374, "sa": [374, 490], "logged_in": 374, "smtp": [374, 490], "resp": [374, 414, 595, 794, 795, 1001, 1035], "4898431": [374, 490], "976158": 374, "699691": 374, "619052": 374, "95373": 374, "kddcup99": [374, 490], "richard": [374, 416, 656, 1028, 1037, 1039, 1041, 1042], "lippmann": 374, "hain": 374, "jonathan": [374, 1031, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1043], "korba": 374, "da": [374, 1042, 1043], "yamanishi": 374, "takeuchi": 374, "miln": 374, "discount": [374, 407, 723, 753, 1034, 1037], "sixth": 374, "320": [374, 976, 1001, 1027], "press": [374, 407, 412, 417, 418, 442, 588, 608, 609, 612, 617, 620, 641, 834, 838, 980, 983, 985, 989], "household": 374, "statlib": 374, "dcc": 374, "ltorgo": 374, "cal_hous": 374, "1990": 374, "censu": 374, "bureau": 374, "resid": 374, "vacat": 374, "pace": 374, "kellei": [374, 1029, 1030], "ronald": [374, 991, 1030, 1040], "barri": [374, 1035], "autoregress": 374, "hyperspher": [375, 1006], "interleav": [375, 391, 520], "simplif": [375, 378, 384, 1027, 1033], "realiti": 375, "make_sparse_uncorrel": 375, "make_friedman1": [375, 414, 537, 541, 591, 592, 630], "make_friedman2": [375, 609, 611, 612, 613, 614, 615, 619, 622, 623], "reciproc": [375, 987], "make_friedman3": 375, "7826": 376, "4194": 376, "9490": 376, "9565": 376, "fisher": [376, 414, 502, 634, 1006], "michael": [376, 405, 407, 448, 626, 635, 689, 794, 977, 983, 1011, 1021, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1038, 1039, 1041, 1042, 1044], "marshal": 376, "arc": [376, 414], "1988": 376, "sir": 376, "referenc": [376, 379, 381, 387, 393, 891, 892, 990, 1034, 1040], "duda": [376, 981], "hart": [376, 981, 1035], "taxonom": 376, "annual": [376, 407, 723, 753, 896, 987, 1000], "eugen": [376, 1028, 1033], "1936": 376, "john": [376, 415, 534, 706, 732, 766, 874, 901, 902, 904, 905, 977, 983, 987, 1027, 1028, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1040, 1042, 1043, 1044], "wilei": [376, 977], "1950": [376, 987], "1973": [376, 405], "scene": [376, 377, 990, 992, 1040], "q327": 376, "d83": 376, "son": [376, 977], "isbn": [376, 407, 983], "471": 376, "22361": 376, "dasarathi": 376, "1980": 376, "nose": [376, 1030, 1034], "pami": [376, 407, 722], "gate": [376, 1040], "1972": 376, "mlc": 376, "cheeseman": 376, "autoclass": 376, "conceptu": [376, 414, 985], "alpaydin": 376, "boun": 376, "nist": [376, 987], "bitmap": 376, "preprint": 376, "32x32": 376, "nonoverlap": 376, "4x4": [376, 412, 415], "garri": 376, "candela": 376, "dimmick": 376, "geist": 376, "grother": 376, "janet": 376, "handprint": 376, "nistir": 376, "5469": 376, "kaynak": 376, "msc": 376, "graduat": 376, "bogazici": 376, "cascad": 376, "kybernetika": 376, "ken": [376, 1021, 1029, 1036], "tang": [376, 1037, 1038, 1039], "ponnuthurai": 376, "suganthan": 376, "yao": [376, 1033, 1034, 1035, 1036, 1043, 1044], "kai": [376, 561, 993, 1034], "dimensionalityreduct": 376, "nanyang": 376, "technolog": 376, "claudio": [376, 1041, 1042, 1044], "gentil": [376, 1039], "linnerud": [376, 503], "men": 376, "club": 376, "waist": 376, "puls": 376, "chin": [376, 1031], "situp": 376, "tenenhau": 376, "pratiqu": 376, "alcalin": 376, "magnesium": 376, "phenol": 376, "nonflavanoid": 376, "proanthocyanin": 376, "od280": 376, "od315": 376, "class_2": [376, 508], "162": 376, "1680": 376, "746": 376, "chemic": 376, "grown": [376, 414, 551, 552, 553, 554, 555, 556, 562, 563, 907, 908, 909, 910, 1003], "itali": 376, "cultiv": 376, "thirteen": 376, "constitu": 376, "forina": 376, "parvu": 376, "pharmaceut": 376, "food": 376, "brigata": 376, "salerno": 376, "16147": 376, "genoa": 376, "lichman": 376, "irvin": 376, "aeberhard": 376, "cooman": 376, "vel": 376, "rep": 376, "dept": 376, "cook": [376, 1027, 1033], "north": [376, 407], "queensland": 376, "submit": [376, 377, 378, 381, 382, 383, 384, 387, 393, 394, 397], "technometr": [376, 409, 467, 472, 993], "rda": 376, "1nn": 376, "THE": 376, "OF": 376, "chemometr": 376, "wheel": [377, 379, 383, 397, 1037, 1039, 1041], "quickest": 377, "registri": [377, 397, 1006], "uninstal": 377, "git": [377, 381, 383, 385, 387, 1010, 1027, 1043], "fork": [377, 379, 383, 387, 391], "miniforge3": [377, 387], "miniforg": [377, 387, 397], "env": [377, 387, 397], "prompt": [377, 379, 397, 400, 415, 1012], "newli": [377, 392, 414, 461, 994, 1033, 1034, 1042], "virtualenv": [377, 379], "python3": [377, 397], "venv": [377, 397], "pep517": [377, 379], "dev0": [377, 383, 1010], "pyx": [377, 379, 380, 385, 387], "pxd": [377, 379], "sklearn_fail_no_openmp": 377, "checkout": [377, 379, 383, 387], "cumbersom": 377, "reinstal": [377, 397], "setuptool": 377, "unix": [377, 415], "makefil": 377, "ninja": [377, 1011], "recompil": [377, 380, 385, 397], "pyproject": [377, 383], "toml": [377, 383], "mesonpi": 377, "spin": 377, "studio": [377, 1011], "vs_buildtool": 377, "desktop": 377, "screenshot": 377, "secondli": [377, 391, 407, 414, 655, 983, 1021], "architectur": [377, 381, 387, 391, 397, 401, 466, 897, 991, 1011, 1027, 1044], "cmd": 377, "powershel": 377, "struct": [377, 393, 1030], "calcsiz": 377, "distutils_use_sdk": 377, "x86": 377, "buildtool": 377, "vc": 377, "vcvarsal": 377, "bat": 377, "x64": 377, "clang": [377, 380], "confusingli": 377, "usr": 377, "gcc": [377, 380, 385, 391], "libomp": [377, 1039], "silicon": 377, "m1": [377, 403], "januari": [377, 379, 1027, 1028, 1037, 1039, 1042, 1044], "arm64": [377, 382], "llvm": 377, "toolchain": 377, "xcode": 377, "conflict": [377, 379, 383, 387, 397, 1034, 1035], "condarc": 377, "channel_prior": 377, "echo": [377, 383], "cxx": 377, "cflag": 377, "cxxflag": 377, "ldflag": 377, "subfold": [377, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 501, 1040], "fopenmp": [377, 380], "export": [377, 380, 381, 397, 401, 911, 912, 1003, 1006, 1036], "cppflag": 377, "xpreprocessor": 377, "wl": 377, "rpath": 377, "lomp": 377, "sudo": [377, 397], "apt": [377, 387, 397], "pip3": [377, 397], "pythonx": 377, "site": [377, 379, 382, 387, 397, 414, 486, 487, 488, 489, 490, 491, 492, 493, 495, 496, 1011, 1035], "precompil": 377, "arm": [377, 379, 387, 976], "cython3": 377, "cento": 377, "yum": 377, "devel": 377, "gnu": 377, "port": [377, 397, 1037], "pkg": 377, "build_ext": [377, 385], "build_clib": 377, "linker": [377, 380], "sysconfig": 377, "counterpart": [377, 976, 984, 1002, 1016], "get_config_var": 377, "sklearn_build_parallel": 377, "tracker": [378, 382, 387, 391, 394, 397, 401, 1007], "prioriti": [378, 630, 827, 828, 1007, 1030], "guidelin": [378, 382, 384, 385, 387, 406, 407, 414], "reformul": 378, "xyz": 378, "someestim": 378, "welcom": [378, 379, 387, 394, 1007], "relabel": [378, 814, 815, 896], "stall": [378, 382], "sprint": [378, 379, 1027], "unfinish": [378, 379], "supersed": [378, 1032], "overflow": [378, 387, 391, 1030, 1034, 1035, 1036, 1037, 1038, 1040], "submitt": 378, "strive": [378, 394, 1011], "expertis": [378, 379, 391], "unclear": [378, 379, 499], "pleasant": [378, 1011], "chime": 378, "permiss": [378, 383, 394, 397, 1011, 1042], "matthew": [378, 384, 534, 740, 1027, 1030, 1034, 1036, 1040, 1041], "rocklin": [378, 384], "acknowledg": [378, 607, 1044], "struggl": [378, 394, 407], "everyon": [379, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "underrepres": 379, "merit": [379, 383, 394], "teach": 379, "priceless": 379, "abid": 379, "codeofconduct": 379, "hesit": 379, "typo": [379, 394, 398, 1027], "send": [379, 407, 419, 531], "burden": [379, 871, 1007], "slep": [379, 393], "templat": [379, 383, 384, 393, 394, 555, 556, 561, 562, 563, 564, 1006], "ecosystem": [379, 977, 1005, 1011], "numpydoc": [379, 393, 397, 400], "compli": [379, 393, 930, 1007], "fulfil": [379, 407, 414, 796, 799, 800, 810, 859, 863, 983], "anyon": [379, 394, 1010, 1011], "gist": [379, 387, 1010], "repo": [379, 383, 1007, 1010], "feasibl": [379, 868, 869, 879], "traceback": [379, 384, 387, 391, 466, 1010, 1045], "curat": [379, 382, 383], "doubt": [379, 380, 383, 983, 993, 1006], "companion": [379, 997], "transcript": 379, "inclus": [379, 381, 387, 448, 454, 751, 783, 987, 988, 1027, 1041], "yourlogin": 379, "ruff": [379, 397, 400], "mypi": [379, 383, 397, 400, 1038], "synchron": [379, 415], "my_featur": 379, "commit": [379, 383, 387, 1010, 1027, 1028, 1029, 1030], "modified_fil": 379, "committ": [379, 1027], "modif": [379, 410, 414, 415, 444, 1000, 1044], "approv": [379, 394, 414], "mrg": [379, 387], "incomplet": [379, 397, 403, 407, 703, 792, 977, 984, 1021, 1031, 1033], "wip": [379, 387, 397], "matur": [379, 1006, 1007], "broad": [379, 393, 1006], "collabor": 379, "_logist": 379, "doctest": [379, 393, 1013, 1027], "test_logist": [379, 387], "test_common": [379, 387], "caught": [379, 387, 401], "submodul": [379, 383, 385, 406, 979, 985, 1027], "intricaci": 379, "narr": [379, 393, 656, 899, 904, 1027, 1028], "unittest": 379, "tests_for_packag": 379, "static": [379, 381, 385, 387, 644, 645, 650, 651, 658, 659, 660, 661], "astropi": 379, "linux": [379, 381, 382, 387, 1006, 1027], "gh": 379, "lint": [379, 387], "nogil": [379, 380], "cpython": [379, 380, 385, 1042], "pyodid": [379, 955], "sklearn_run_float32_test": 379, "lengthi": [379, 391], "etiquett": 379, "she": [379, 889, 890, 1037], "he": [379, 723, 753, 856, 857, 889, 890, 987, 1021, 1034, 1041, 1042], "shorten": [379, 1002, 1040], "leader": [379, 1011], "grab": 379, "familiar": [379, 413, 1035], "acquaint": 379, "experienc": 379, "abandon": 379, "someon": [379, 383, 393, 1027], "glad": 379, "restructuredtext": 379, "some_param": 379, "hello": [379, 387, 948, 952], "goodby": 379, "liter": [379, 383, 1011], "array_paramet": 379, "list_param": 379, "typed_ndarrai": 379, "multioutput_arrai": 379, "bracket": [379, 983], "delimit": [379, 993, 1042], "colon": 379, "selectfpr": [379, 416, 590, 593, 596, 597, 598, 604, 1043], "defer": 379, "backtick": [379, 384], "nowadai": 379, "dropdown": 379, "pragmat": 379, "bibliograph": 379, "arxiv": [379, 460], "_my": 379, "ref": [379, 387, 977, 1033], "currentmodul": 379, "succeed": 379, "editor": [379, 387, 391], "_build": 379, "viewabl": 379, "pillow": [379, 397, 400], "sphinxext": [379, 397, 400], "opengraph": [379, 397, 400], "copybutton": [379, 397, 400], "vast": 379, "examples_pattern": 379, "your_regex_goes_her": 379, "no_mathjax": 379, "latexpdf": 379, "stone": [379, 907, 908, 1003], "subdirectori": 379, "subpackag": [379, 383, 1031, 1036], "cleanup": [379, 1027], "charg": 379, "test_requiring_mpl_fixtur": 379, "hang": [379, 1037, 1038], "fruit": [379, 988], "asv": 379, "asv_benchmark": 379, "airspe": 379, "veloc": 379, "publicli": [379, 1037], "zero_on": [379, 1028], "zero_one_loss": [379, 403, 701, 731, 987, 1028, 1029, 1030, 1044], "futurewarn": [379, 387, 1034, 1035, 1036, 1038, 1040, 1043, 1044], "example_funct": 379, "exampleestim": 379, "_n_cluster": 379, "versionchang": 379, "meet": [379, 391, 394, 416, 570, 601, 856, 857, 896, 987, 1000, 1011, 1035, 1036, 1037], "nit": 379, "retract": 379, "grammar": 379, "disambigu": [379, 827, 896, 1000, 1042], "Will": [379, 495, 532, 625, 642, 643, 644, 650, 654, 655, 658, 659, 660, 661, 662, 663, 671, 673, 705, 712, 785, 864, 868, 878, 879, 1030, 1031, 1033, 1035], "clariti": [379, 387], "unhelp": 379, "extran": 379, "rewritten": [379, 647, 1029, 1031], "generos": 379, "reward": 379, "heard": 379, "enemi": 379, "courtesi": 379, "justifi": [379, 385, 405, 563], "occas": 379, "deserv": [379, 385], "digest": [379, 1042], "overwhelm": 379, "sheer": [379, 1011], "myself": 379, "trickiest": 379, "buri": 379, "mixin": [379, 393, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 599, 930, 1029, 1038, 1042], "grep": 379, "delai": [379, 494, 796, 810, 820, 821, 955, 1041, 1042], "some_funct": [379, 926], "some_iter": 379, "flavor": [379, 990], "pointer": [379, 387, 440, 1036], "mandatori": [379, 415, 427, 629], "favorit": [379, 391, 1011], "Being": [379, 393, 394, 401, 983, 990], "killer": [379, 1011], "blame": 379, "migrat": [379, 1027], "ignorerevsfil": 379, "rev": [379, 605, 606], "ruin": 379, "maco": [380, 382, 397, 403, 1035, 1039, 1041], "sklearn_enable_debug_cython_direct": 380, "scratch": [380, 440, 987, 1029], "gdb": [380, 382, 1010], "entrypoint_to_bug_reproduc": 380, "cdef": 380, "state_to_print": 380, "test_val": 380, "fuse": [380, 1033, 1043], "shell": [380, 387, 391, 1012, 1021], "cythonx": 380, "language_level": 380, "wraparound": 380, "initializedcheck": 380, "nonecheck": 380, "cdivis": 380, "pep073": 380, "pathwai": 380, "memoryview": 380, "cnp": 380, "lightweight": [380, 796, 810, 820, 821, 1006], "virtual": [380, 397, 411, 1011], "enter": [380, 383, 407, 440, 994], "prang": 380, "void": 380, "my_func": [380, 385], "st\u00e9fan": 380, "benhel": 380, "_cython_bla": 380, "protect": [380, 383, 953], "_openmp_help": 380, "cimport": [380, 388, 1035], "omp_get_max_thread": 380, "prolifer": 381, "adopt": [381, 391, 393, 895, 987, 1001, 1035, 1042, 1044], "predomin": [381, 1028], "overrid": [381, 415, 444, 448, 455, 540, 546, 586, 587, 589, 591, 592, 595, 654, 662, 683, 684, 802, 818, 841, 842, 843, 845, 847, 849, 850, 851, 1027, 1035, 1037, 1041, 1043], "creation": [381, 509, 510, 511, 513, 517, 518, 519, 521, 522, 523, 524, 525, 526, 527, 528, 654, 839, 840, 1011, 1034, 1035, 1036, 1040], "optimis": [381, 407, 990, 1030, 1040, 1042], "param1": [381, 1018], "param2": [381, 1018], "param3": 381, "postpon": [381, 383], "requisit": 381, "liner": [381, 825], "ipython": [381, 384, 385, 387, 1013, 1021], "session": [381, 385, 391, 397, 1005, 1011, 1021], "trainabl": 381, "trail": [381, 971], "overridden": [381, 393, 417, 540, 546, 614, 619, 622, 692, 1035, 1036, 1043], "n_features_in_": [381, 393, 428, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 462, 463, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 608, 609, 625, 626, 627, 628, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 686, 687, 688, 689, 690, 794, 795, 796, 799, 800, 810, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 858, 859, 862, 863, 864, 865, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 891, 892, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 1038, 1040, 1042, 1045], "slep010": [381, 1038], "duck": [381, 393, 1037], "check_x_i": [381, 388, 1031, 1035, 1036, 1041], "check_arrai": [381, 388, 466, 532, 897, 1031, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "templateclassifi": 381, "demo_param": 381, "myestim": [381, 421, 423, 424, 426, 427, 428, 429, 430], "subestim": 381, "my_extra_param": 381, "my_estim": [381, 408], "subestimator__c": 381, "subestimator__class_weight": 381, "subestimator__du": 381, "subestimator__fit_intercept": 381, "subestimator__intercept_sc": 381, "subestimator__l1_ratio": 381, "subestimator__max_it": 381, "subestimator__multi_class": 381, "subestimator__n_job": 381, "subestimator__penalti": 381, "subestimator__random_st": 381, "subestimator__solv": 381, "subestimator__tol": 381, "subestimator__verbos": 381, "subestimator__warm_start": 381, "__c": 381, "__class_weight": 381, "unpack": 381, "easiest": [381, 387, 408, 984], "__repr__": [381, 1007, 1036], "setattr": 381, "deepcopi": 381, "__sklearn_clone__": [381, 432, 1043], "frozen": 381, "frozentransform": 381, "fitted_transform": [381, 462], "__getattr__": 381, "_estimator_typ": [381, 393, 424, 425, 426, 429, 430, 1032], "clustermixin": [381, 1044], "is_classifi": [381, 393], "programmat": [381, 497, 1036], "_get_tag": [381, 1038], "allow_nan": [381, 918, 920, 1043], "array_api_support": [381, 403], "binary_onli": [381, 1037, 1038], "multioutput_onli": 381, "no_valid": 381, "non_determinist": [381, 1041], "primari": [381, 393, 412, 513, 994, 1010, 1011], "_safe_split": 381, "preserves_dtyp": 381, "poor_scor": 381, "requires_fit": 381, "requires_positive_x": [381, 1037, 1042], "requires_i": [381, 424, 430, 1038], "requires_positive_i": 381, "_skip_test": 381, "_xfail_check": 381, "check_nam": 381, "xfail": [381, 387], "skiptestwarn": 381, "x_type": 381, "2darrai": 381, "signifi": [381, 407, 579, 807, 992], "1dlabel": 381, "2dlabel": 381, "_more_tag": 381, "mymultioutputestim": 381, "ridgeregress": 381, "idiosyncrat": 381, "onetoonefeaturemixin": [381, 431], "classnameprefixfeaturesoutmixin": [381, 431, 1042], "auto_wrap_output_kei": 381, "mytransform": [381, 431], "__init_subclass__": 381, "invok": [381, 529, 535, 537, 543, 544, 565, 567, 568, 820, 896, 1039, 1044], "estimator_html_repr": [381, 408, 1038, 1039, 1040, 1041, 1044], "_doc_link_modul": 381, "_doc_link_templ": 381, "_doc_link_url_param_gener": 381, "estimator_modul": 381, "ownership": 381, "pep8": [381, 383, 387], "indent": [381, 953], "nsampl": [381, 794, 795], "statement": [381, 384, 387, 391, 393, 412, 1021], "flow": 381, "client": [381, 955], "corollari": 381, "foo": [381, 579, 991], "baz": [381, 579], "pyflak": 381, "asanyarrai": 381, "hadamard": 381, "choose_random_sampl": 381, "freestand": 381, "unmodifi": [381, 393], "random_state_": [381, 534, 625, 848, 1041], "gaussiannois": 381, "quasi": [381, 856, 857, 983], "assert_allclos": 381, "rtol": [381, 839, 840, 844], "atol": [381, 670, 672, 839, 840, 844], "checklist": 382, "unclaim": 382, "workflow": [382, 383, 392, 411], "craft": 382, "markdown": 382, "saniti": [382, 863, 987, 1027, 1028], "outdat": 382, "diff": [382, 987], "valgrind": 382, "platform": [382, 393, 394, 401, 1006, 1010, 1011, 1032, 1035, 1036, 1038, 1040, 1041, 1044], "x86_64": [382, 397], "yep": 382, "gperftool": 382, "debugg": [382, 387], "gprof": 382, "callgrind": 382, "kcachegrind": 382, "warm": [382, 393, 529, 535, 541, 543, 544, 608, 651, 657, 664, 665, 666, 674, 675, 676, 983, 1007, 1037, 1039, 1041], "meson": 382, "homebrew": [382, 397], "freebsd": 382, "rrrcn": 383, "pep101": 383, "build_tool": 383, "blocker": 383, "mileston": 383, "maint_tool": 383, "sort_whats_new": 383, "whats_miss": 383, "fixm": [383, 393], "feedstock": 383, "recip": [383, 984, 1011], "yaml": 383, "whats_new": [383, 387], "v0": [383, 469, 470, 476, 510, 586, 587, 589, 796, 810, 858, 861, 1028, 1035, 1036, 1037], "freez": [383, 397, 401, 1007, 1011, 1035], "0rc1": 383, "__version__": 383, "draft": [383, 394], "rebas": 383, "bugfix": [383, 1027, 1041], "backport": [383, 388, 1034], "maint": 383, "enh": 383, "blindli": 383, "invit": 383, "cherri": 383, "shortlog": 383, "f2": [383, 988], "sed": [383, 1027], "front": [383, 1034], "rc1": 383, "suffix": [383, 397, 822, 987, 1037], "brows": 383, "oldest": [383, 494], "abi": 383, "acronym": 383, "deliveri": 383, "whl": 383, "went": [383, 987], "bot": [383, 992, 1041, 1044], "sync": 383, "testpypi": 383, "tarbal": [383, 1042], "wheelhouse_upload": 383, "twine": 383, "rrr": 383, "symlink": 383, "latestst": 383, "tmp": 383, "ln": [383, 983, 991, 997], "versionwarn": 383, "secur": [383, 393, 1006, 1007, 1011, 1023], "twitter": 383, "linkedin": 383, "authorship": 383, "permalink": 383, "_hist_gradient_boost": 383, "_iter": 383, "pickl": [383, 393, 401, 415, 586, 587, 589, 839, 840, 1006, 1007, 1029, 1032, 1033, 1034, 1035, 1036, 1037, 1040, 1041, 1042, 1043, 1044], "checker": [383, 819], "type_check": 383, "test_enable_hist_gradient_boost": 383, "enable_hist_gradient_boost": [383, 1036], "enable_my_experimental_featur": 383, "indefinit": 383, "incentiv": 383, "workabl": 384, "stackoverflow": [384, 387, 391, 1010], "blogpost": 384, "mcve": [384, 391], "my_data": 384, "with_mean": [384, 879, 890, 997, 1035, 1040], "default_scor": 384, "other_scor": 384, "scrollbar": 384, "tripl": 384, "fenc": 384, "qualifi": 384, "a674e682c281": 384, "lda_featur": 384, "lda_model": 384, "n_topic": [384, 534, 1034], "minimalist": [384, 415, 1010], "continuous_featur": 384, "positive_featur": 384, "invest": [385, 1011], "idiom": 385, "crunch": 385, "performancetip": 385, "reimplement": [385, 391, 393, 1033, 1037], "spottabl": 385, "amen": [385, 391, 417, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 976], "cpp": 385, "engag": [385, 394, 1010], "tent": 385, "somewher": [385, 987, 1021], "prun": 385, "14496": [385, 1036], "ncall": 385, "tottim": 385, "percal": 385, "cumtim": 385, "lineno": 385, "017": [385, 469, 470], "042": 385, "_nls_subproblem": 385, "1263": 385, "_po": 385, "_initialize_nmf": 385, "_spars": 385, "_neg": 385, "337": 385, "461": 385, "hotspot": 385, "16159": [385, 1038], "2833": 385, "653": [385, 609, 612, 623], "_dotbla": 385, "651": 385, "036": [385, 470], "1397": 385, "2780": 385, "064": [385, 995], "1542": 385, "2734": 385, "fromnumer": 385, "1185": 385, "lapack_lit": 385, "dgesdd": 385, "rewrit": [385, 391, 1003, 1020, 1027], "shallow": [385, 414, 559, 560, 914], "4x": [385, 1042], "line_profil": 385, "wire": [385, 532, 539], "profile_default": 385, "ipython_config": 385, "terminalipythonapp": 385, "interactiveshellapp": 385, "lprun": 385, "qtconsol": 385, "_nmf": 385, "73153": 385, "h_init": 385, "5863": 385, "172": [385, 491, 492, 647, 983], "nl": 385, "173": [385, 582], "175": [385, 997], "112141": 385, "2336": 385, "wtv": 385, "16144": 385, "wtw": 385, "177": 385, "1880": 385, "195133": 385, "305": 385, "grad": [385, 1011], "495761": 385, "777": 385, "proj_gradi": 385, "2449": 385, "130": 385, "1474": 385, "4474": 385, "inner_it": 385, "83833": 385, "hn": 385, "194239": 385, "48858": 385, "150407": 385, "gradd": 385, "193": [385, 414, 713, 783, 1000], "515390": 385, "dqd": 385, "pin": 385, "memory_profil": [385, 397, 400], "memit": 385, "mprun": 385, "1e7": 385, "402344": 385, "standalon": [385, 656, 899], "bianp": 385, "reactiv": 385, "conda_prefix": 385, "pydebug": 385, "extra_cflag": 385, "dpy_debug": 385, "num_cor": 385, "dbg": 385, "fortun": [385, 414, 1021, 1040, 1041], "my_fil": 385, "callgrin": 385, "prof": 385, "encapsul": [386, 408, 421, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 462, 467, 468, 469, 471, 472, 473, 474, 480, 481, 482, 483, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 579, 580, 581, 586, 587, 588, 589, 590, 593, 594, 595, 596, 597, 598, 601, 608, 609, 625, 626, 627, 628, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 672, 674, 675, 676, 677, 678, 686, 687, 688, 689, 690, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806, 809, 810, 811, 812, 813, 814, 815, 816, 817, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 891, 892, 894, 895, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910], "artist": [386, 436, 630, 696, 698, 699, 700, 802, 818, 913], "classmethod": [386, 436, 629, 630, 695, 696, 697, 698, 699, 700, 802, 818, 945], "line_": [386, 436, 696, 698, 699, 700, 802, 818], "gridspecfromsubplotspec": 386, "subplot_spec": 386, "get_subplotspec": 386, "ax_top_left": 386, "ax_top_right": 386, "ax_bottom": 386, "bounding_ax_": [386, 630], "lines_": [386, 630, 802, 818], "contours_": [386, 630], "advic": [387, 417, 620, 621], "forth": 387, "userscript": 387, "tampermonkei": 387, "greasemonkei": 387, "shortcut": [387, 417], "pr_number": 387, "navig": [387, 1029], "overlai": [387, 630], "codecov": 387, "test_sparsifi": 387, "pdb": 387, "ipdb": [387, 1021], "pdbcl": 387, "terminalpdb": 387, "lf": 387, "ff": 387, "tb": [387, 569, 570, 571, 572, 573, 574, 575, 576], "runxfail": 387, "werror": 387, "mailman": 387, "listinfo": 387, "crowd": [387, 394, 984, 1007], "imped": 387, "attent": [387, 605, 606, 1001], "minimal_reproduc": 387, "pytb": 387, "stdin": [387, 1021], "perman": 387, "25163598": 387, "issuenumb": 387, "1506": 387, "volunt": 387, "establish": [387, 391, 394, 977], "clarifi": [387, 394, 790], "regression_test": 387, "0008": 387, "patienc": [387, 393], "crop": [387, 1042], "manifest": [387, 984, 990], "fault": [387, 1035, 1037, 1039], "glibc": 387, "uniniti": 387, "trace": [387, 407, 420, 471, 473, 474, 477, 478, 479, 687, 691, 984, 1038], "supp": 387, "readm": [387, 415, 491], "my_test_script": 387, "mobil": 387, "deploy": [387, 1006, 1007, 1011], "scalewai": 387, "aw": 387, "graviton": 387, "workstat": 387, "qemu": 387, "docker": [387, 401, 1040, 1041], "multiarch": 387, "ppc64le": 387, "filesystem": [387, 397, 1040], "pushd": 387, "wget": 387, "aarch64": 387, "arm64v8": 387, "mount": 387, "pwd": 387, "reinit": 387, "bashrc": 387, "ephemer": 387, "persist": [387, 391, 412, 444, 608, 609, 855, 992, 1006, 1023, 1033, 1036], "evolv": [388, 1042], "as_float_arrai": 388, "column_or_1d": [388, 1038, 1042], "multitarget": 388, "multi_output": [388, 919], "safe_index": [388, 1037], "check_memori": [388, 393, 1034], "denot": [388, 393, 397, 405, 407, 411, 414, 586, 587, 589, 796, 802, 810, 818, 872, 873, 972, 976, 979, 983, 985, 987, 988, 997, 1000, 1012, 1044], "5488135": 388, "71518937": 388, "60276338": 388, "54488318": 388, "has_fit_paramet": 388, "randomized_range_find": [388, 1028, 1033], "arrayfunc": [388, 406], "cholesky_delet": 388, "min_po": 388, "least_angl": 388, "fast_logdet": 388, "safe_sparse_dot": [388, 1037], "weighted_mod": 388, "sample_without_replac": [388, 1033], "n_popul": [388, 956], "sparsefunc": [388, 406, 1040], "mean_variance_axi": [388, 1033, 1040], "sparsefuncs_fast": [388, 406], "inplace_csr_row_normalize_l1": 388, "inplace_csr_row_normalize_l2": 388, "inplace_csr_column_scal": 388, "sort_graph_by_row_valu": [388, 1042], "single_source_shortest_path_length": 388, "dijkstra": [388, 686, 984], "graph_shortest_path": [388, 1040], "all_estim": [388, 1037, 1038, 1042], "all_displai": [388, 1042], "all_funct": [388, 1042], "is_multilabel": [388, 1044], "dict_learn": [388, 529, 535, 544, 1028, 1035, 1037, 1040, 1041, 1043], "gen_batch": [388, 940], "safe_mask": 388, "safe_sqr": 388, "murmurhash3_32": 388, "murmurhash3_x86_32": [388, 952], "cryptograph": 388, "lookup": [388, 952, 1036], "bloom": [388, 952], "384616559": 388, "3910350737": 388, "murmurhash": 388, "graphical_lasso": [388, 469, 470, 1035, 1043], "kit": 391, "toolbox": [391, 1006, 1011], "multilay": [391, 985], "kera": [391, 1006], "forese": 391, "redesign": [391, 1027], "pystruct": [391, 1006], "ssvm": 391, "seqlearn": 391, "harwar": 391, "fusion": 391, "22438": 391, "4143": 391, "meanwhil": [391, 1002], "pipegraph": 391, "squared_loss": [391, 1040], "undertak": 391, "slowli": [391, 393, 542, 936], "ordinarili": [391, 393], "corrobor": 391, "proof": [391, 414, 893, 999], "road": 391, "bridg": [391, 984, 1006], "reproduct": [391, 983], "guidanc": [391, 417], "gitter": [391, 1034, 1035], "value_kei": [391, 914], "levenshtein": 391, "dna": [391, 626, 977], "rna": 391, "pain": 391, "suppli": [391, 407, 644, 919, 920, 990, 1011, 1031, 1033, 1035, 1040], "leven": 391, "acctcctagaag": 391, "acctactagaagtt": 391, "gaatattaggccga": 391, "lev_metr": 391, "multiprocess": [391, 393, 953, 955, 990, 1027, 1035, 1041], "exec": 391, "cuda": [391, 403], "reiniti": 391, "culprit": 391, "refus": [391, 889, 890], "forkserv": 391, "joblib_start_method": 391, "set_start_method": 391, "dozen": [392, 417], "leakag": [392, 393, 408, 1023], "disclos": 392, "entail": [392, 877, 879, 1001], "r_squar": 392, "searchcv": [392, 1042], "tacit": 393, "inconsist": [393, 401, 415, 506, 507, 574, 901, 904, 923, 993, 1002, 1023, 1027, 1032, 1033, 1034, 1035, 1037, 1040, 1042, 1043, 1044], "elsewher": [393, 460, 461, 469, 470, 476], "formal": [393, 394, 407, 414, 839, 840, 984, 987, 988, 991], "thereof": 393, "transduct": [393, 407, 894, 895, 1007], "position": 393, "serial": [393, 421, 943, 1006, 1007, 1023, 1027, 1035, 1039, 1044], "unpickl": [393, 401, 574, 839, 840, 1033, 1039, 1043], "pep257": 393, "nuanc": 393, "flaw": [393, 414], "terminologi": [393, 1035], "est1": [393, 630], "est2": [393, 630], "exemplifi": 393, "_score": [393, 796, 810, 822, 987, 1027, 1040], "_loss": [393, 987], "divers": [393, 414], "abstract": [393, 412, 417, 616, 766, 1006, 1027], "descriptor": [393, 506, 507], "hoc": 393, "spectral_embed": [393, 984, 1028, 1031, 1033, 1035, 1037, 1040, 1041, 1042, 1044], "maxabs_scal": [393, 868, 1035], "astrai": 393, "readthedoc": 393, "entireti": 393, "shield": 393, "n_target": [393, 410, 480, 481, 482, 483, 522, 554, 609, 641, 644, 645, 648, 649, 650, 651, 652, 654, 655, 658, 659, 660, 661, 662, 663, 669, 670, 671, 672, 673, 679, 680, 681, 682, 683, 684, 685, 988, 1039, 1041, 1043], "synonym": [393, 841, 842, 843, 849, 850, 851], "themat": 393, "alphanumer": [393, 586, 587, 589], "statistician": [393, 879], "prescrib": 393, "baggingclassifi": [393, 398, 414, 554, 909, 928, 977, 1030, 1033, 1034, 1035, 1038, 1042, 1043], "estimator__max_depth": [393, 976], "improp": [393, 1034], "pairwise_kernel": [393, 417, 450, 460, 641, 762, 865, 985, 1027, 1034, 1044], "redundantli": 393, "distancemetr": [393, 413, 842, 990, 1035, 1039, 1040, 1041, 1044], "di": [393, 407, 412, 529, 535, 662, 683, 684, 892, 1031, 1040], "vectori": [393, 1037], "noun": 393, "venu": 393, "broadli": [393, 407], "consolid": [393, 394, 1027], "coo": [393, 551, 552, 690, 866, 915, 919, 920, 990, 1028, 1044], "lil": [393, 551, 552, 866, 915, 941, 990], "csgraph": [393, 1040], "absent": [393, 415, 726, 751, 820], "densifi": [393, 656, 657, 664, 665, 666, 674, 675, 676, 899, 977, 1029], "lossili": 393, "unnorm": [393, 534, 984, 1033, 1034], "encompass": [393, 448, 454, 553, 554, 984], "is_regressor": 393, "get_n_split": [393, 797, 798, 801, 803, 804, 805, 806, 809, 811, 812, 813, 814, 815, 816, 817], "estimatorcv": [393, 1007], "loo": [393, 804, 1038], "router": [393, 398, 944, 945, 946, 947], "lexicograph": [393, 565, 785, 791, 841, 849], "type_of_target": [393, 866, 880, 988, 1041, 1042, 1044], "hashabl": [393, 867, 870, 998], "labelencod": [393, 567, 873, 998, 1027, 1035, 1042, 1043], "canonic": 393, "xxx": 393, "everywher": 393, "multilabelbinar": [393, 828, 863, 872, 988, 1012, 1030, 1032, 1033, 1035, 1036], "nonetheless": [393, 987], "wherein": 393, "amber": 393, "return_cov": [393, 565, 566, 609, 859], "_idx": 393, "label1": 393, "label2": 393, "class_label": [393, 555, 559, 562, 656, 657, 664, 666, 672, 673, 674, 907, 909, 925, 1002], "bincount": [393, 411, 555, 559, 562, 656, 657, 664, 666, 672, 673, 674, 899, 901, 904, 907, 909, 924, 925, 1034], "rebalanc": 393, "compute_class_weight": [393, 1030, 1041], "check_cv": [393, 1032], "obei": [393, 985], "triangl": [393, 412, 441, 445, 457, 697, 985, 990], "concurr": [393, 415, 953, 1039, 1041], "check_scor": 393, "uppercas": [393, 1040], "unavail": [393, 656, 657, 948, 1034, 1040], "deadlock": 394, "meritocrat": 394, "somebodi": 394, "unanim": 394, "emeritu": 394, "recant": 394, "outreach": 394, "brand": [394, 397], "social": [394, 407, 1011], "authorit": 394, "strateg": 394, "entiti": [394, 723, 753], "duti": 394, "resign": 394, "occasion": [394, 724, 1036], "escal": 394, "fallback": [394, 397, 827, 828, 987], "hereaft": 394, "lazi": [394, 415, 1001, 1031], "opinion": 394, "slep020": 394, "veto": 394, "appeal": 394, "revis": [394, 668], "slep000": 394, "insuffici": [396, 986, 1020], "afraid": 397, "packg": 397, "miniconda": 397, "administr": 397, "dnf": 397, "pacman": 397, "raspberri": 397, "polar": [397, 400, 431, 440, 441, 443, 445, 447, 462, 466, 480, 481, 482, 483, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 559, 560, 564, 565, 566, 567, 568, 579, 580, 581, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 625, 626, 627, 628, 633, 636, 637, 638, 639, 640, 686, 687, 690, 843, 848, 851, 855, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 891, 892, 897, 1021, 1044], "pyarrow": [397, 400], "sphinxcontrib": [397, 400], "sass": [397, 400], "toctre": [397, 400], "lock": [397, 400, 953, 955], "py3": 397, "apk": 397, "bind": [397, 1006, 1027, 1034, 1035], "pkgsrc": 397, "py39": 397, "intelex": [397, 1006], "oned": 397, "sklearnex": 397, "plugin": 397, "appdata": 397, "usernam": 397, "windowsapp": 397, "oserror": [397, 486, 487, 488, 489, 490, 491, 492, 493, 495, 496], "errno": 397, "pythonsoftwarefound": 397, "7_qbz5n2kfra8p0": 397, "localcach": 397, "python37": 397, "292": [397, 414, 732], "data_nam": 397, "australian": 397, "data_vers": 397, "lift": 397, "regedit": 397, "menu": 397, "hkey_local_machin": 397, "currentcontrolset": 397, "longpathsen": 397, "broken": [397, 411, 597, 598, 633, 718, 915, 987, 1003, 1030, 1034, 1035, 1036, 1038, 1041], "unsupport": [398, 401, 491, 1035, 1040], "set_": 398, "_request": 398, "weighted_acc": 398, "sample_weigh": 398, "sel": [398, 416], "scoring_weight": 398, "fitting_weight": 398, "hasn": 398, "larscv": [398, 648, 663, 680, 681, 1034, 1040, 1044], "multitaskelasticnetcv": [398, 644, 645, 650, 658, 660, 661, 679, 983, 1030, 1037, 1038, 1040, 1044], "multitasklassocv": [398, 659, 660, 1030, 1037, 1038, 1040, 1044], "multioutputclassifi": [398, 785, 828, 830, 832, 987, 1034, 1036, 1037, 1038, 1039, 1043, 1044], "regressorchain": [398, 830, 832, 1035, 1038, 1042], "ridgeclassifiercv": [398, 671, 672, 785, 987, 988, 1035, 1037, 1038, 1040, 1041], "retrain": [401, 1007, 1043], "inconsistentversionwarn": [401, 1043], "simplefilt": 401, "model_from_prevision_vers": 401, "original_sklearn_vers": [401, 574], "untrust": 401, "malici": 401, "inadvis": 401, "immut": 401, "snapshot": [401, 557, 558, 1007], "portabl": [401, 1006], "alex": [401, 415, 1002, 1027, 1030, 1035, 1037, 1038, 1039, 1041, 1042, 1043, 1044], "gaynor": 401, "sio": 401, "get_untrusted_typ": 401, "unknown_typ": 401, "exchang": [401, 1010], "markup": 401, "pmml": [401, 1006], "onnx": [401, 1006, 1007], "xml": 401, "sklearn2pmml": [401, 1006], "affero": 401, "gplv3": 401, "datastructur": [403, 1035, 1039], "namespac": 403, "array_api": 403, "x_np": 403, "y_np": 403, "x_cu": 403, "y_cu": 403, "array_api_dispatch": [403, 466, 897], "_estimator_with_converted_arrai": 403, "transfer": [403, 983, 1007], "_array_api": 403, "cupy_to_ndarrai": 403, "lda_np": 403, "torch": 403, "x_torch": 403, "y_torch": 403, "power_iteration_norm": [403, 539, 542, 935, 936, 1041], "kernelcenter": [403, 997, 1037, 1041, 1043, 1044], "array_api_compat": 403, "metal": 403, "shader": 403, "m2": 403, "chip": [403, 1011], "77764": 403, "pytorch_enable_mps_fallback": 403, "submatrix": [404, 422, 449, 451], "unusu": [404, 993, 997, 1035], "submatric": 404, "bipartit": [404, 451, 509, 992], "subgraph": 404, "a_n": 404, "lceil": [404, 993], "log_2": [404, 561, 993], "rceil": [404, 993], "bmatrix": [404, 979], "u_2": [404, 979], "u_": [404, 480, 481, 482], "n_column": [404, 449, 451], "inderjit": [404, 451], "spectralbiclust": [404, 451, 1029, 1033, 1034, 1038], "blockwis": [404, 983], "bistochast": [404, 449], "l_": [404, 609, 650, 738, 987], "k_": [404, 417, 614, 617, 619, 622, 771, 979, 997], "u_1": [404, 979], "v_1": 404, "v_2": 404, "v_": [404, 415], "kluger": [404, 449, 511], "yuval": [404, 449], "microarrai": [404, 449, 511, 626, 977], "cap": [404, 407, 752, 987, 1036], "hochreit": [404, 717], "hungarian": [404, 717], "bodenhof": [404, 717], "fabia": [404, 717], "acquisit": [404, 717], "murphi": [405, 641, 980], "discriminatori": 405, "wilk": 405, "tricki": [405, 984], "logit": [405, 417, 656, 657, 983], "f_i": 405, "train_set": 405, "test_set": 405, "disjoint": [405, 407, 408, 435, 702, 728, 752, 754, 984], "platt": [405, 435, 901, 902, 904, 905, 1002], "_i": [405, 414, 978, 983, 987, 991, 1002], "_j": [405, 978], "f_j": [405, 995], "meteorologi": 405, "climatologi": 405, "precipit": 405, "wea": 405, "640": [405, 488, 504, 505, 581, 582, 976], "1990a": 405, "menon": 405, "ak": [405, 1041, 1042], "jiang": [405, 1031, 1038], "xj": 405, "vembu": 405, "ohno": 405, "machado": [405, 720], "703": [405, 511], "710": 405, "kull": [405, 987], "silva": [405, 686, 984, 1038, 1040], "filho": 405, "flach": [405, 987], "mario": [405, 1031, 1033, 1041, 1042, 1043], "w\u00fcthrich": 405, "merz": 405, "actuari": 405, "refurbish": 406, "rough": [406, 993, 1014], "uniti": 406, "lipschitz": [406, 999], "mod": 406, "usecas": 407, "mu_j": 407, "coher": 407, "elong": 407, "lloyd": [407, 441, 445, 447, 457, 1041, 1042], "distant": [407, 690, 707, 990], "comapar": 407, "sergei": [407, 1029, 1033, 1034, 1035, 1036, 1037], "vassilvitskii": [407, 445, 458], "eighteenth": 407, "siam": [407, 411, 450, 458, 460, 533, 539], "industri": [407, 1006], "predetermin": [407, 984], "scullei": 407, "19th": 407, "exemplar": [407, 438, 452, 1020], "sent": [407, 828], "leftarrow": [407, 991, 1001], "foral": [407, 417, 611], "neq": [407, 987, 989, 997], "notin": 407, "hill": [407, 446, 459, 1037], "climb": [407, 446, 459], "maxima": 407, "x_j": [407, 417, 612, 613, 617, 620, 621, 623, 978, 979, 983, 990, 1002, 1003], "dictat": 407, "solvabl": 407, "stella": [407, 450, 460], "jianbo": [407, 450, 460, 689], "shi": [407, 450, 460, 689], "anil": [407, 450, 460], "daml": [407, 450, 460], "victor": [407, 450, 460, 1034, 1037], "minden": [407, 450, 460], "lex": [407, 450, 460], "ying": [407, 450, 460, 1041], "adjac": [407, 412, 450, 460, 583, 584, 633, 689, 693, 941, 984, 990, 1020], "adjacency_matrix": 407, "ulrik": [407, 450, 460, 689], "von": [407, 450, 460, 689, 1006, 1034, 1035], "luxburg": [407, 450, 460, 689], "jitendra": [407, 450, 460, 689], "malik": [407, 450, 460, 689], "walk": [407, 413, 1030], "marina": 407, "meila": 407, "ng": [407, 412, 689, 845, 991, 993, 1038], "jordan": [407, 412, 689, 794, 1037, 1038, 1041, 1042], "yair": [407, 689], "precondit": [407, 450, 460, 693, 1003, 1043], "zhuzhunashvili": [407, 460], "forbid": [407, 414], "macroscop": 407, "occupi": [407, 987], "manhattan": [407, 439, 443, 448, 455, 697, 759, 768, 775, 776, 777, 846, 985, 990, 1031, 1036, 1043], "bisecting_strategi": [407, 441], "largest_clust": [407, 441], "biggest_inertia": [407, 441], "biggest": [407, 410, 412, 441], "steinbach": [407, 1042, 1044], "karypi": 407, "vipin": 407, "egin": 407, "minnesota": 407, "june": [407, 984, 1033, 1043], "weblog": 407, "abirami": 407, "mayilvahanan": 407, "emerg": [407, 1011], "ijet": 407, "jian": 407, "xinyu": 407, "gou": 407, "baod": 407, "hebei": 407, "knee": 407, "triangular": [407, 461, 609, 984], "whichev": [407, 414, 444, 542, 559, 560, 631, 648, 652, 654, 662, 680, 681, 695], "conjunct": [407, 592, 802, 818, 820, 821, 822, 823, 826, 954, 977, 983, 1042], "extract_dbscan": 407, "radius_neighbors_graph": [407, 418, 442, 841, 842, 843, 845, 847, 849, 850, 851, 852, 990, 1031, 1036, 1039], "ester": [407, 418, 442], "kriegel": [407, 418, 442, 448, 455, 845, 993], "sander": [407, 418, 442, 444, 448, 455, 845, 993, 1036, 1037], "xu": [407, 410, 418, 442, 1001, 1040, 1041, 1044], "portland": [407, 418, 442], "aaai": [407, 418, 442, 834, 989], "226": [407, 418, 442], "revisit": [407, 418, 442], "schubert": [407, 418, 442, 448, 1031, 1032, 1035, 1036, 1038, 1039, 1040, 1041], "tod": [407, 418, 442], "lj2017": 407, "d_c": 407, "x_p": [407, 983], "d_m": 407, "x_q": 407, "g_": 407, "varepsilon": [407, 1001, 1002], "cm2013": 407, "mst": 407, "minimum_cluster_s": 407, "campello": [407, 444], "moulavi": [407, 444], "pei": [407, 1034], "tseng": 407, "cao": 407, "motoda": 407, "pakdd": 407, "lectur": [407, 642, 979, 1005], "7819": [407, 1034], "berlin": [407, 412, 533, 694, 723, 753, 987], "heidelberg": [407, 412, 533, 694, 723, 753, 987], "mcinn": [407, 1033, 1034, 1035, 1037, 1038, 1043], "heali": 407, "icdmw": 407, "max_ep": [407, 448, 453, 454, 455], "nearbi": [407, 990], "cluster_hierarchy_": [407, 448], "planar": 407, "peripheri": 407, "wall": 407, "ankerst": [407, 448, 455], "mihael": [407, 448, 455], "marku": [407, 448, 455, 1035, 1037, 1038, 1039], "breunig": [407, 448, 455, 845, 993], "han": [407, 440, 448, 455, 1027, 1035, 1036, 1040], "j\u00f6rg": [407, 448, 455, 1035], "sigmod": [407, 448, 455, 845, 993], "cft": 407, "lossi": 407, "subclust": [407, 440], "till": [407, 440, 785, 987], "temporarili": [407, 1032], "farthest": 407, "brc": [407, 440], "tian": [407, 440, 1032, 1033, 1034], "raghu": [407, 440], "ramakrishnan": [407, 440], "maron": [407, 440], "livni": [407, 440], "sfu": [407, 440], "coursecentr": [407, 440], "459": [407, 440], "zhang96": [407, 440], "roberto": [407, 440], "perdisci": [407, 440], "jbirch": [407, 440], "java": [407, 440, 1006], "satisfi": [407, 648, 652, 697, 715, 733, 734, 839, 840], "labels_pr": [407, 702, 703, 712, 713, 715, 728, 733, 734, 752, 754, 783, 792], "unadjust": [407, 987, 1039], "swap": [407, 412, 714, 733, 966, 967, 1027], "ri": [407, 703, 783], "c_2": [407, 984], "unord": [407, 414, 997], "esp": [407, 1027], "hubert": [407, 703, 713, 783], "arabi": [407, 703, 713, 783], "steinlei": [407, 703], "psycholog": [407, 703, 714], "agreement": [407, 702, 714, 752, 754, 792, 987], "22504": 407, "10526": 407, "u_i": [407, 480, 481, 482, 752], "v_j": [407, 752, 992], "veb2009": 407, "a_i": 407, "b_j": 407, "yat2016": 407, "average_method": [407, 702, 754, 1035], "vinh": [407, 702], "veb2010": 407, "strehl": 407, "joydeep": 407, "583": [407, 1019], "1162": 407, "153244303321897735": 407, "epp": [407, 702], "bailei": [407, 702], "26th": [407, 723, 753, 987], "1553374": 407, "1553511": 407, "9781605585161": 407, "csail": [407, 664, 665, 674, 836], "volume11": 407, "vinh10a": 407, "algesheim": 407, "tesson": 407, "30750": 407, "1038": 407, "srep30750": 407, "rosenberg": [407, 715, 734, 792], "hirschberg": [407, 715, 734, 792], "b2011": 407, "homogeneity_completeness_v_measur": [407, 1036], "n_k": [407, 548], "n_c": [407, 657], "julia": [407, 715, 734, 792], "media": [407, 1011], "hila": 407, "becker": [407, 1011, 1030, 1039], "fowlkes_mallows_scor": [407, 987, 1033, 1035], "fmi": [407, 728], "tp": [407, 710, 716, 726, 727, 728, 779, 780, 781, 784, 911, 987], "fp": [407, 710, 716, 726, 727, 728, 779, 780, 781, 784, 987], "fn": [407, 710, 716, 726, 727, 728, 779, 780, 781, 784, 987, 988], "47140": 407, "fowkl": [407, 728], "1983": [407, 728, 879], "tandfonlin": 407, "01621459": 407, "10478008": 407, "kmeans_model": 407, "1987": [407, 605, 606, 789, 790], "calinski_harabasz_scor": [407, 1035], "561": 407, "n_e": 407, "mathrm": [407, 409, 412, 416, 983, 1003], "b_k": 407, "w_k": [407, 983], "c_q": 407, "n_q": 407, "c_e": 407, "cali\u0144ski": 407, "1974": [407, 415, 708], "dendrit": [407, 708], "davies_bouldin_scor": [407, 1035], "bould": 407, "c_i": [407, 990], "c_j": [407, 992], "s_i": [407, 983, 997], "diamet": 407, "nonneg": [407, 412, 451, 536, 538, 545, 876], "s_j": 407, "max_": [407, 987], "1979": [407, 722, 766], "halkidi": 407, "batistaki": 407, "yanni": 407, "vazirgianni": 407, "michali": 407, "contingency_matrix": [407, 752, 1035], "pair_confusion_matrix": [407, 1039], "permit": [408, 465, 586, 587, 589, 796, 799, 800, 810, 821, 860, 861, 987, 988, 989, 1033], "clf__c": 408, "pca1": [408, 423], "svm1": 408, "77484909e": 408, "07058917e": 408, "pca2": [408, 423], "svm2": 408, "raw_target_regr": 408, "bypass": [408, 597, 644, 650, 907, 908, 909, 910, 1043], "check_invers": [408, 463, 863, 997, 1035, 1041, 1042], "linear_pca": 408, "make_union": [408, 858, 1030, 1034], "unreli": 408, "citi": [408, 415, 464, 1021], "london": [408, 415, 464], "sallisaw": [408, 464], "bow": 408, "moveabl": 408, "feast": 408, "grape": 408, "wrath": 408, "expert_r": 408, "user_r": 408, "city_categori": 408, "title_bow": 408, "city_london": 408, "city_pari": 408, "city_sallisaw": 408, "507": 408, "301": [408, 1001], "ignored_new_col": 408, "shrunk_covari": [409, 1044], "sigma_": [409, 642, 643, 1040, 1044], "365": [409, 471], "wiesel": [409, 420, 473], "eldar": [409, 420, 473], "hero": [409, 420, 473], "5016": [409, 420, 473], "5029": [409, 420, 473], "_k": [409, 981, 983], "glasso": [409, 476], "biostatist": [409, 476], "uncommon": [409, 656, 899, 1002], "downweight": [409, 534], "driessen": [409, 467, 472, 993], "fastmcd": [409, 467, 472], "raw_location_": [409, 467, 472], "raw_covariance_": [409, 467, 472], "multidimension": [410, 686, 688, 690, 692, 984, 990], "plsw2a": 410, "u_k": [410, 412], "v_k": [410, 412, 529, 535, 543, 544], "x_k": [410, 412, 981, 990], "y_k": [410, 997], "xi_k": 410, "omega_k": [410, 981], "gamma_k": 410, "delta_k": 410, "nipal": [410, 481, 482], "xp": [410, 874], "x_rotations_": [410, 480, 481, 482], "y_rotations_": [410, 480, 481, 482], "ty": 410, "x_weights_": [410, 480, 481, 482, 483], "y_weights_": [410, 480, 481, 482, 483], "yv": 410, "tx": 410, "pls1": [410, 482], "pls2": [410, 482], "tx_k": [410, 981], "ty_k": 410, "ja": [410, 1034], "wegelin": 410, "methodolog": 411, "academ": [411, 1011], "commerci": [411, 1011], "flowchart": [411, 1014], "f1_macro": [411, 987, 1031], "custom_cv_2fold": 411, "custom_cv": 411, "9333": 411, "scorer1_nam": 411, "scorer2_nam": 411, "return_indic": [411, 822, 1043], "precision_macro": [411, 1016], "recall_macro": [411, 987], "test_precision_macro": 411, "test_recall_macro": 411, "prec_macro": 411, "rec_macro": 411, "test_prec_macro": 411, "test_rec_macro": 411, "train_prec_macro": 411, "train_rec_macro": 411, "undistinguish": 411, "devic": [411, 580, 1006], "kf": [411, 801], "12883823": 411, "rkf": [411, 811], "weigh": [411, 1034], "caveat": [411, 417], "part3": 411, "spector": 411, "submodel": 411, "kohavi": 411, "jnt": 411, "bharat": [411, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044], "rao": [411, 1039, 1042], "fung": 411, "rosal": 411, "witten": 411, "leavepout": [411, 804, 1016], "ss": 411, "gkf": 411, "sgkf": [411, 814], "suboptim": [411, 698, 700, 779, 786, 990, 1035, 1043], "leavepgroupsout": [411, 798, 1016, 1033], "n_group": [411, 805, 1016, 1033], "lpgo": [411, 805], "gss": [411, 798], "withheld": 411, "predefinedsplit": [411, 1016, 1031], "test_fold": [411, 809], "train_indx": 411, "test_indx": 411, "autocorrel": 411, "superset": [411, 817, 987], "surplu": 411, "tscv": [411, 817], "inbuilt": 411, "some_integ": 411, "n_cv": [411, 435], "isotropi": 412, "alik": [412, 985], "halko": [412, 533, 539, 542, 935, 936], "szlam": [412, 935, 936], "disadvantag": [412, 417, 983, 984, 991, 1001, 1002, 1003], "parsimoni": [412, 997], "jen09": 412, "mrl09": 412, "ell_1": [412, 983], "underset": [412, 983, 990, 1003], "operatornam": [412, 738, 983, 987, 1003], "fro": [412, 536, 538, 545, 691, 983], "gentli": 412, "spirit": 412, "mairal": [412, 529, 535], "bach": [412, 529, 534, 535, 536, 656, 983], "ponc": [412, 529, 535], "sapiro": [412, 529, 535], "jenatton": 412, "obozinski": 412, "scholkopf1997": 412, "bakir2003": 412, "smola": [412, 415, 533, 865, 997, 1002], "klau": [412, 533, 865], "eigendecompos": 412, "eigensolv": [412, 450, 460, 533, 542, 693, 984], "eigsh": [412, 533, 1033, 1034], "lehoucq": 412, "sorensen": 412, "columnwis": 412, "lsa": [412, 542, 1029], "synonymi": 412, "polysemi": 412, "lsi": 412, "sigma_k": [412, 981], "sublinear": [412, 588, 589], "use_idf": [412, 415, 588, 589, 1021], "textual": [412, 421, 1003, 1036], "man": [412, 588, 766, 834, 838, 985, 987, 989], "prabhakar": 412, "raghavan": [412, 588, 834, 838, 985, 987, 989], "hinrich": 412, "sch\u00fctze": [412, 588, 985, 987, 989], "transform_method": 412, "split_cod": 412, "dictionarylearn": [412, 535, 537, 538, 540, 541, 542, 543, 544, 1028, 1032, 1034, 1037, 1040, 1041, 1042, 1043], "overcomplet": 412, "mammalian": 412, "cortex": 412, "inpaint": 412, "h_i": [412, 992], "psi": 412, "sim": [412, 1019], "wh_i": 412, "ww": 412, "superflu": 412, "psi_1": 412, "psi_2": 412, "psi_n": 412, "superimpos": 412, "plug": [412, 983, 1011, 1021], "wh": [412, 536, 538, 545], "hoyer": [412, 1030], "nndsvd": [412, 536, 538, 545, 1036, 1039], "nndsvdar": [412, 536, 538, 545, 1036], "elementwis": [412, 536, 538, 545], "_featur": [412, 536, 538, 545], "kl": [412, 984, 1035], "itakura": [412, 536, 538, 545, 1034], "saito": [412, 536, 538, 545, 1034], "w_new": 412, "forget_factor": [412, 536], "lee": [412, 1027, 1028, 1031, 1033, 1034, 1035, 1036, 1038, 1039, 1042], "seung": 412, "boutsidi": 412, "gallopoulo": 412, "cichocki": [412, 536, 538, 545], "phan": 412, "fevott": [412, 536, 538, 545], "idier": [412, 536, 538, 545], "lefevr": [412, 536], "corpora": 412, "hoffman": [412, 534, 1032, 1039], "unshad": 412, "beta_k": 412, "eta": [412, 534, 674, 675, 676, 991, 1001, 1032], "topic_word_prior": [412, 534], "theta_d": 412, "doc_topic_prior": [412, 534], "z_": 412, "w_": [412, 644, 645, 650, 651, 658, 659, 660, 661, 679, 682, 983, 987, 989, 992], "elbo": 412, "overset": [412, 994], "e_": 412, "blei": [412, 534, 794], "wang": [412, 534, 677, 687, 691, 723, 753, 983, 984, 987, 1030, 1032, 1033, 1034, 1035, 1039, 1042, 1043], "paislei": [412, 534], "kaiser": [412, 530], "talli": 413, "disproportion": 413, "41075698": 413, "41076071": 413, "rho_k": 413, "unsmooth": 413, "scott": [413, 844, 1027, 1028, 1033, 1035, 1036, 1037, 1042, 1043], "silvermann": 413, "propto": [413, 989], "2h": 413, "angular": [413, 690, 761], "contin": [413, 712, 997], "semin": 414, "friedman2001": 414, "lightgbm": [414, 559, 560, 1006, 1036, 1043], "8965": 414, "grower": [414, 559, 560], "missing": [414, 625, 626, 628, 1036], "fisher1958": 414, "loan": [414, 532, 983, 1011], "mayer2022": 414, "mayer": [414, 1039, 1041, 1044], "bourassa": 414, "hoesli": 414, "scognamiglio": 414, "valuat": 414, "tianqi": 414, "guestrin": 414, "ke": [414, 1038, 1039], "boostingdecis": 414, "913": [414, 557], "nr": 414, "f_m": 414, "h_m": 414, "f_": [414, 633, 727, 987], "l_m": 414, "taylor": [414, 1035, 1037, 1038, 1041], "g_i": [414, 647], "sum_m": 414, "softmax": [414, 559, 656, 657, 983, 990, 991], "superior": 414, "ineffici": [414, 441, 572, 827, 828, 990, 992], "htf": 414, "r2007": 414, "friedman2002": 414, "1189": 414, "1232": 414, "367": [414, 1027], "b1998": 414, "decoupl": [414, 989], "cancel": [414, 415, 760], "b2001": 414, "bear": [414, 1006], "geurt": [414, 553, 554, 555, 556, 563, 564, 909, 910], "ernst": [414, 555, 556, 563, 564, 909, 910], "wehenkel": [414, 555, 556, 563, 564, 909, 910], "l2014": 414, "lieg": 414, "flavour": 414, "b1999": 414, "b1996": 414, "h1998": 414, "lg2012": 414, "bootstrap_featur": [414, 553, 554], "844": [414, 553, 554], "w2": 414, "w3": 414, "lr__c": 414, "rf__n_estim": 414, "w1992": 414, "knr": 414, "stack_method": [414, 565], "225": 414, "stack_method_": [414, 565, 566], "final_layer_rfr": 414, "final_layer_gbr": 414, "final_lay": 414, "multi_layer_regressor": 414, "wolpert": [414, 565, 566], "241": [414, 565, 566], "freund": [414, 551, 552], "fs1995": 414, "w_1": [414, 983, 991], "w_2": [414, 983, 991], "w_n": 414, "w_i": [414, 978, 987], "reappli": 414, "zzrh2009": 414, "d1997": 414, "dubai": 415, "francisco": [415, 999], "movi": [415, 1013], "movie_entri": 415, "thriller": [415, 870], "drama": 415, "000e": 415, "003e": 415, "011e": 415, "974e": 415, "unseen_featur": [415, 579], "speech": [415, 987], "chunker": 415, "pos_window": 415, "pos_vector": 415, "1x6": 415, "part_of_speech": 415, "token_featur": 415, "isupp": 415, "uppercase_initi": 415, "all_uppercas": 415, "raw_x": [415, 580], "pos_tagg": 415, "murmurhash3": [415, 580, 587, 952], "weinberg": 415, "modulo": [415, 1038], "kilian": [415, 1042, 1043], "anirban": 415, "dasgupta": [415, 444, 893, 999], "langford": [415, 686, 984], "josh": [415, 1034], "attenberg": 415, "punctuat": [415, 586, 587, 589], "diminish": 415, "4x9": 415, "build_analyz": [415, 586, 587, 589, 1037], "interrog": 415, "bigram_vector": 415, "cool": [415, 1027], "feature_index": 415, "him": 415, "constru": 415, "nqy18": 415, "smooth_idf": [415, 588, 589], "_n": [415, 987], "textbook": [415, 588], "6x3": 415, "81940995": 415, "57320793": 415, "47330339": 415, "88089948": 415, "58149261": 415, "81355169": 415, "term1": 415, "term2": 415, "term3": 415, "0986": [415, 863], "573": 415, "8473": 415, "8515": [415, 1034], "5243": 415, "85151335": 415, "52433293": 415, "55422893": 415, "83236428": 415, "63035731": 415, "77630514": 415, "idf_": [415, 588, 589, 1035], "western": 415, "europ": [415, 997], "koi8": 415, "russian": 415, "unicodedecodeerror": [415, 586, 587, 589], "told": 415, "troubleshoot": 415, "chardet": 415, "chardetect": 415, "damag": 415, "sloppili": 415, "ftfy": 415, "mish": 415, "mash": 415, "text1": 415, "sei": 415, "mir": 415, "gegr": 415, "xc3": 415, "xbc": 415, "x9ft": 415, "mein": 415, "sauerkraut": 415, "text2": 415, "holdselig": 415, "sind": 415, "dein": 415, "ger": 415, "xfcche": 415, "text3": 415, "xff": 415, "xfea": 415, "x00u": 415, "x00f": 415, "x00": 415, "x00l": 415, "xfc": 415, "x00g": 415, "x00e": 415, "x00n": 415, "x00d": 415, "x00a": 415, "x00h": 415, "x00r": 415, "x00z": 415, "x00i": 415, "x00b": 415, "x00c": 415, "x00t": 415, "x00o": 415, "spolski": 415, "nnmf": [415, 1022, 1023, 1027], "phrase": 415, "misspel": 415, "rescu": 415, "resili": 415, "wprd": 415, "ngram_vector": 415, "char_wb": [415, 586, 587, 589], "rd": 415, "wo": 415, "wp": [415, 655, 669], "char": [415, 586, 587, 589, 1027], "jumpi": 415, "fox": [415, 1043], "1x4": 415, "umpi": 415, "1x5": 415, "mpy": 415, "fo": 415, "paragraph": [415, 501, 1021], "barrier": 415, "hv": 415, "4x10": 415, "discrep": [415, 1021, 1031], "4x1048576": 415, "collid": 415, "ingest": 415, "spend": 415, "my_token": 415, "lowercas": [415, 423, 440, 441, 443, 445, 447, 480, 481, 482, 483, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 586, 587, 589, 637, 638, 639, 640, 686, 687, 690, 843, 848, 851, 855, 860, 865, 891, 892, 1040], "lucen": 415, "build_preprocessor": [415, 586, 587, 589, 1037], "whitespac": 415, "fanci": 415, "lemmat": 415, "nltk": [415, 1005, 1006], "word_token": 415, "wordnetlemmat": 415, "lemmatoken": 415, "wnl": 415, "british": 415, "spell": 415, "to_british": 415, "1or": 415, "bt": 415, "1er": 415, "ing": 415, "ation": 415, "1z": 415, "ogu": 415, "og": 415, "customvector": 415, "asian": 415, "one_imag": [415, 582], "fake": 415, "assert_array_equ": 415, "patchextractor": [415, 1043], "five_imag": 415, "variancethreshold": [416, 864, 977, 1030, 1037, 1040, 1043], "selectfdr": [416, 590, 594, 596, 597, 598, 604, 1031, 1033, 1034, 1043], "selectfw": [416, 590, 593, 594, 597, 598, 604, 1043], "genericunivariateselect": [416, 593, 594, 596, 597, 598, 600, 1041, 1043, 1044], "r_regress": [416, 604, 1040, 1041, 1044], "nonparametr": [416, 417, 605, 606], "bewar": 416, "importance_gett": [416, 591, 592, 595, 1039], "unimport": [416, 995], "lsvc": 416, "baraniuk": 416, "isr": 416, "ist": 416, "utl": 416, "aguiar": 416, "cs_note": 416, "ferri": [416, 987], "versatil": [417, 1002, 1011], "optima": 417, "markov": [417, 609, 992, 1006, 1027], "nuisanc": 417, "one_vs_on": [417, 608, 988], "ingredi": 417, "duv2014": 417, "theta_l": 417, "x_bound": [417, 615], "operand": 417, "k1__": 417, "k2__": 417, "constant_valu": [417, 611, 615], "constant_value_bound": [417, 609, 611, 615], "k1__k1__constant_valu": 417, "value_typ": [417, 615], "n_element": [417, 615], "k2__length_scal": 417, "k1": [417, 619, 622], "k1__k1": 417, "k1__k1__constant_value_bound": 417, "k1__k2": 417, "k1__k2__length_scale_bound": 417, "k2": [417, 619, 622], "k2__length_scale_bound": 417, "69314718": [417, 610, 997], "30258509": 417, "interoper": [417, 1007, 1023], "pairwisekernel": 417, "_valu": [417, 611], "_level": [417, 623], "k_1": [417, 619, 622], "k_2": [417, 619, 622], "__add__": [417, 622], "__mul___": 417, "__pow__": [417, 614], "2l": [417, 620], "bigg": [417, 617], "bessel": [417, 617], "rightarrow": [417, 617, 991], "quad": [417, 990, 1001], "tfrac": 417, "3l": 417, "pp84": 417, "x_d": [417, 612], "inhomogen": [417, 612], "expon": [417, 614, 674, 675, 676, 808, 856, 857, 874, 976], "carl": [417, 608, 609, 612, 617, 620], "rasmussen": [417, 608, 609, 612, 617, 620], "duvenaud": [417, 620, 621], "cookbook": [417, 620, 621], "minkowski": [418, 442, 448, 453, 454, 455, 686, 697, 775, 776, 777, 839, 840, 841, 842, 843, 845, 847, 849, 850, 851, 852, 853, 990, 1027, 1030, 1041, 1042, 1043], "metric_param": [418, 442, 444, 448, 453, 454, 455, 686, 690, 841, 842, 843, 844, 845, 847, 849, 850, 851, 852, 853, 1031, 1034, 1041], "leaf_siz": [418, 442, 444, 448, 453, 454, 455, 839, 840, 841, 842, 843, 844, 845, 847, 849, 850, 851], "kd_tree": [418, 442, 444, 448, 455, 686, 687, 841, 842, 843, 844, 845, 847, 849, 850, 851, 990, 1040, 1044], "balltre": [418, 442, 444, 448, 455, 686, 687, 697, 841, 842, 843, 844, 845, 847, 849, 850, 851, 984, 1027, 1029, 1031, 1035, 1040, 1043, 1044], "ckdtree": [418, 442, 1029], "inhibit": [418, 442], "core_sampl": 418, "n_core_sampl": [418, 442], "attract": [418, 442, 981, 990, 1006], "fun": [419, 531, 1011], "logcosh": [419, 531], "fun_arg": [419, 531], "w_init": [419, 531], "whiten_solv": [419, 531, 1042], "return_x_mean": 419, "compute_sourc": 419, "return_n_it": [419, 452, 457, 476, 543, 544, 644, 645, 650, 651, 658, 659, 660, 661, 679, 680, 681, 682, 683, 684, 685, 692, 1041], "cube": [419, 531], "my_g": [419, 531], "x_mean": 419, "AS": 419, "fortran": [419, 539, 644, 645, 650, 651, 658, 659, 660, 661, 663, 679, 682, 683, 684, 919, 920, 1027, 1030, 1031, 1035], "hyvarinen": [419, 531], "oja": [419, 531], "shrunk_cov": [420, 477, 479], "eq": [420, 473, 719, 720, 721], "7533": [420, 473, 1034], "2763": [420, 473], "3964": [420, 473], "0195": [420, 473], "friend": [421, 1031], "is_fitted_": [421, 424, 426, 429, 430], "subobject": [421, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 462, 463, 467, 468, 469, 470, 471, 472, 473, 474, 480, 481, 482, 483, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 579, 580, 581, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 686, 687, 688, 689, 690, 794, 795, 796, 799, 800, 810, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 856, 857, 858, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 891, 892, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910], "get_submatrix": [422, 449, 451], "dummybiclust": 422, "row_ind": [422, 449, 451], "intp": [422, 449, 451], "col_ind": [422, 449, 451], "pca0": 423, "_n_features_out": 423, "myestimator0": 423, "myestimator1": 423, "class_name0": [423, 440, 441, 443, 445, 447, 480, 481, 482, 483, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 637, 638, 639, 640, 686, 687, 690, 843, 848, 851, 855, 865, 891, 892], "class_name1": [423, 440, 441, 443, 445, 447, 480, 481, 482, 483, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 637, 638, 639, 640, 686, 687, 690, 843, 848, 851, 855, 865, 891, 892], "class_name2": [423, 440, 441, 443, 445, 447, 480, 481, 482, 483, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 637, 638, 639, 640, 686, 687, 690, 843, 848, 851, 855, 865, 891, 892], "feature_names_out": [423, 428, 440, 441, 443, 445, 447, 462, 480, 481, 482, 483, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 564, 565, 566, 567, 568, 579, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 625, 626, 627, 628, 633, 636, 637, 638, 639, 640, 686, 687, 690, 843, 848, 851, 855, 858, 859, 862, 863, 864, 865, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 891, 892, 1041, 1044], "mro": [424, 430, 1037, 1038], "harsh": [424, 435, 467, 547, 548, 549, 551, 553, 555, 557, 559, 562, 565, 567, 608, 656, 664, 666, 672, 673, 674, 827, 828, 829, 830, 834, 835, 836, 837, 838, 841, 846, 849, 856, 894, 895, 899, 901, 904, 907, 909, 1037, 1039, 1042], "mycluster": 425, "densityestim": 426, "n_samples_fit": [430, 463, 480, 481, 482, 552, 554, 556, 558, 560, 563, 566, 568, 609, 633, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 658, 659, 660, 661, 662, 663, 665, 668, 670, 671, 676, 677, 686, 832, 833, 841, 842, 843, 845, 847, 849, 850, 851, 857, 900, 902, 905, 908, 910], "uniform_averag": [430, 463, 480, 481, 482, 552, 554, 556, 558, 560, 563, 566, 568, 609, 633, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 658, 659, 660, 661, 662, 663, 665, 668, 670, 671, 676, 677, 719, 720, 725, 742, 743, 745, 747, 748, 750, 782, 787, 788, 832, 833, 842, 850, 857, 900, 902, 905, 908, 910, 987, 1036], "n_features_new": [431, 440, 443, 530, 532, 534, 535, 537, 540, 541, 547, 565, 567, 568, 580, 581, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 626, 628, 633, 636, 637, 638, 639, 640, 848, 855, 862, 863, 864, 865, 868, 869, 871, 872, 873, 874, 876, 877, 878, 879, 891, 892], "cloned_classifi": 432, "base_clf": 435, "calibrated_clf": 435, "927": 435, "x_calib": 435, "y_calib": 435, "prob_tru": [436, 437], "prob_pr": [436, 437], "ref_lin": 436, "alexandru": 437, "22nd": 437, "525": [437, 626, 977], "convergence_it": [438, 452], "hardcod": [438, 452, 1035], "affinity_matrix_": [438, 450, 689], "cluster_center_indic": [438, 452], "compute_full_tre": [439, 443, 1031], "compute_dist": [439, 443, 1039], "inferior": [439, 443, 1038], "n_leaves_": [439, 443], "n_connected_components_": [439, 443, 1036], "branching_factor": 440, "compute_label": [440, 447], "promot": [440, 706, 1006, 1038, 1040, 1044], "redistribut": 440, "overwritten": [440, 530, 531, 532, 534, 539, 546, 605, 606, 642, 643, 644, 645, 648, 649, 650, 651, 652, 653, 654, 655, 658, 659, 660, 661, 670, 672, 677, 679, 680, 681, 682, 684, 955, 957, 1040], "root_": 440, "_cfnode": 440, "cftree": 440, "dummy_leaf_": 440, "subcluster_labels_": 440, "centroids_": [440, 444, 846], "copy_x": [441, 445, 457, 533, 642, 643, 644, 645, 648, 649, 650, 651, 652, 653, 654, 655, 658, 659, 660, 661, 670, 672, 677, 679, 680, 681, 682, 683, 1029, 1035, 1036], "k_init": [441, 457], "sse": 441, "bisect_mean": 441, "denser": 442, "pooling_func": [443, 1035], "xred": [443, 1043], "cluster_selection_epsilon": 444, "max_cluster_s": 444, "cluster_selection_method": 444, "eom": 444, "store_cent": [444, 1044], "kdtree": [444, 448, 455, 686, 687, 839, 841, 842, 843, 844, 845, 847, 849, 850, 851, 1029, 1031, 1035, 1039, 1040, 1043, 1044], "neighbour": [444, 460, 690, 992], "medoid": 444, "overwrit": [444, 494, 629, 1012, 1027, 1038, 1043, 1044], "medoids_": 444, "zimek": 444, "chaudhuri": 444, "jaskowiak": 444, "malzer": 444, "baum": 444, "hybrid": [444, 647, 1006], "dbscan_clust": 444, "border": [444, 1037], "unclust": 444, "socg2006": 445, "min_bin_freq": [446, 459], "cluster_al": [446, 459], "get_bin_se": 446, "orphan": [446, 459, 1027], "reassignment_ratio": 447, "eec": [447, 639], "tuft": 447, "dscullei": 447, "fastkmean": 447, "55102041": 447, "48979592": 447, "06896552": 447, "set_partial_fit_request": [447, 532, 536, 664, 665, 666, 674, 675, 676, 827, 828, 831, 832, 834, 835, 836, 837, 838, 856, 879], "cluster_method": 448, "predecessor_correct": [448, 454], "unprocess": [448, 586, 587, 589], "heap": 448, "braycurti": [448, 455, 697, 775, 776, 777, 990], "canberra": [448, 455, 697, 775, 776, 777, 990], "chebyshev": [448, 455, 697, 775, 776, 777, 990], "dice": [448, 455, 697, 775, 776, 777, 990], "kulsinski": [448, 455, 697, 775, 776, 777], "rogerstanimoto": [448, 455, 697, 775, 776, 777, 990], "russellrao": [448, 455, 697, 775, 776, 777, 990], "seuclidean": [448, 455, 697, 775, 776, 777, 846, 990, 1035, 1038, 1039], "sokalmichen": [448, 455, 697, 775, 776, 777, 990], "sokalsneath": [448, 455, 697, 775, 776, 777, 990], "yule": [448, 455, 775, 776, 777], "manhattan_dist": [448, 455, 686, 759, 841, 842, 843, 845, 847, 849, 850, 851, 852, 853, 1027, 1037, 1042, 1043], "minkowski_dist": [448, 455, 686, 841, 842, 843, 845, 847, 849, 850, 851, 852, 853], "l_p": [448, 455, 686, 841, 842, 843, 845, 847, 849, 850, 851, 852, 853], "upward": [448, 454], "successor": [448, 454, 1003, 1006], "predecessor_": [448, 455], "erich": [448, 1031, 1032, 1035, 1036, 1038, 1039, 1040, 1041], "gertz": 448, "lernen": 448, "wissen": 448, "daten": [448, 1035, 1036], "analysen": 448, "lwda": 448, "318": 448, "329": 448, "n_best": 449, "n_svd_vec": [449, 451], "mini_batch": [449, 451], "n_row_clust": [449, 451, 511], "n_column_clust": [449, 451, 511], "ncv": [449, 451], "n_oversampl": [449, 451, 539, 542, 936, 1041], "kernel_param": [450, 533, 637, 641], "precomputed_nearest_neighbor": [450, 689], "eigen": [450, 547, 671, 689, 693, 981, 1033, 1036], "dist_matrix": 450, "csc_matrix": [450, 555, 556, 561, 562, 563, 564, 876, 907, 908, 909, 910, 977, 997, 1003, 1032], "compute_optics_graph": [453, 454, 1044], "best_n_it": 457, "n_local_tri": 458, "n_seed": 459, "multigrid": 460, "eigendecomposit": [460, 671, 689, 693, 865, 979], "multiscal": 460, "preliminari": 460, "heapq": 461, "topolog": [461, 1006], "n_connected_compon": 461, "n_leav": [461, 907, 908, 909, 910], "transformers_": [462, 1044], "remaining_column": 462, "named_transformers_": 462, "sparse_output_": [462, 549], "output_indices_": [462, 1040], "datatyp": [462, 464, 1034, 1037], "norm1": 462, "norm2": 462, "text_preprocess": 462, "num_preprocess": 462, "x_t": [462, 625, 858], "sum_n_compon": [462, 858], "notimplementederror": [463, 470, 551, 552, 553, 554, 565, 566, 567, 568, 591, 592, 600, 669, 671, 673, 858, 886, 896, 1034, 1044], "y_hat": 463, "90453403": 464, "50755672": 464, "30151134": 464, "print_changed_onli": [466, 897, 1036, 1038, 1039], "pairwise_dist_chunk_s": [466, 897], "enable_cython_pairwise_dist": [466, 897], "skip_parameter_valid": [466, 897, 1043], "cache_s": [466, 897, 901, 902, 903, 904, 905, 1002], "get_config": [466, 778, 897, 954, 1042], "offset_": [467, 561, 675, 845, 903, 1035], "raw_support_": [467, 472], "dist_": [467, 472], "true_cov": [467, 469, 470, 476], "7411": [467, 472, 1033], "2535": [467, 472], "3053": [467, 472], "0813": [467, 472], "correct_covari": [467, 472], "rvd": [467, 472], "covariance_correct": [467, 472], "comp_cov": [467, 468, 469, 470, 471, 472, 473, 474], "get_precis": [467, 468, 469, 470, 471, 472, 473, 474, 530, 532, 539], "getter": [467, 468, 469, 470, 471, 472, 473, 474, 591, 592, 595], "is_inli": [467, 561, 845], "reweight_covari": [467, 472], "rvdriessen": [467, 472], "location_reweight": [467, 472], "covariance_reweight": [467, 472], "support_reweight": [467, 472], "negative_mahal_dist": 467, "7569": 468, "2818": 468, "3928": 468, "0622": [468, 474], "0193": [468, 474], "enet_tol": [469, 470, 476, 1032], "220446049250313e": [469, 470, 476, 648, 649, 652, 653, 654, 680, 681], "graphlasso": [469, 1032, 1035], "costs_": [469, 470, 1043], "dual_gap": [469, 470, 476, 644, 645, 650, 651, 658, 659, 660, 661, 679, 682], "return_cost": [469, 470, 476], "n_refin": 470, "graphlassocv": [470, 1029, 1035], "dualiti": [470, 983], "block_siz": [471, 477, 478, 1031], "4406": 471, "1616": 471, "0595": 471, "0075": [471, 539], "rouseeuw1984": 472, "butlerdavi": 472, "butler": [472, 1030, 1038, 1039], "davi": [472, 722, 987, 1031], "jhun": 472, "1385": 472, "7833": 473, "2431": 473, "3889": 473, "7387": 474, "2536": 474, "4110": 474, "cov_init": [476, 1043], "graph_lasso": [476, 1035], "n_dim": [476, 525, 527, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 1044], "shrinkage_coeffici": 478, "x_loadings_": [480, 481, 482], "y_loadings_": [480, 481, 482], "plssvd": [480, 481, 1009, 1023, 1039, 1041], "x_c": [480, 481, 483, 994], "y_c": [480, 481, 483], "y_reconstruct": [480, 481, 482], "x_scores_": [482, 1039], "y_scores_": [482, 1039], "y_transform": 483, "data_hom": [484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 1034, 1043], "zero_bas": [485, 506, 507], "query_id": [485, 506, 507], "grok": 485, "qid": [485, 506, 507, 1028, 1033], "output_fil": 485, "my_dataset": 485, "download_if_miss": [486, 487, 488, 489, 490, 491, 492, 493, 495, 496, 1034], "stopword": [487, 1021], "target_column": [487, 488, 494], "horizontal_distance_to_hydrologi": 489, "494021": 490, "slice_": [491, 492, 1042], "195": [491, 492], "unrestrict": 491, "2914": 492, "5748": 492, "pathlik": [494, 1043], "n_retri": [494, 1041], "read_csv_kwarg": [494, 1043], "timeout": [494, 953, 1041], "412": [494, 983], "ith": [494, 771, 775, 835, 856, 857, 872, 873], "48842": 494, "48841": 494, "46043": 494, "46033": 494, "47985": 494, "1592": 496, "1212": 496, "1624": 496, "microryzomys_minutu": 496, "8333": 496, "3333": 496, "8833": 496, "2667": 496, "9833": 496, "s22": 496, "f4": 496, "data_filenam": [499, 503], "target_filenam": [499, 503], "container_path": 501, "load_cont": 501, "allowed_extens": 501, "container_fold": 501, "category_1_fold": 501, "file_1": 501, "file_2": 501, "file_42": 501, "category_2_fold": 501, "file_43": 501, "file_44": 501, "image_nam": 504, "first_img_data": 505, "backup": [506, 1027], "instantan": 506, "mycach": 506, "get_data": 506, "mysvmlightfil": 506, "xn": 507, "yn": [507, 988, 989], "q1": 507, "qn": 507, "yi": [507, 989, 1031, 1035, 1036, 1039], "qi": [507, 1039], "triplet": 507, "minval": [509, 511], "maxval": [509, 511], "seventh": [509, 999], "269": 509, "274": 509, "return_cent": [510, 1038], "basri": 511, "gerstein": 511, "716": 511, "flip_i": 513, "interdepend": 513, "polytop": 513, "guyon": [513, 591, 592, 987], "madelon": 513, "1991": [514, 515, 516], "1229": 515, "12000": 518, "effective_rank": [519, 522], "tail_strength": [519, 522], "bell": [519, 1035, 1037, 1039, 1040], "fat": [519, 522], "crawl": [519, 928], "return_ind": 521, "4967": 522, "1382": 522, "6476": 522, "523": 522, "2341": 522, "4694": 522, "5425": 522, "579": 522, "7674": [522, 1034], "4017": 522, "data_transpos": [524, 1041, 1043], "norm_diag": 525, "sparse_format": [525, 1044], "make_spd_matrix": 525, "celeux": 526, "el": [526, 1040, 1042, 1043], "anbari": 526, "marin": 526, "frequentist": 526, "marsland": 528, "vuw": 528, "nz": 528, "marslast": 528, "ch6": 528, "code_init": [529, 543], "dict_init": [529, 535, 543, 544], "callback": [529, 535, 537, 543, 544, 848, 953, 1007, 1043], "split_sign": [529, 535, 540], "transform_max_it": [529, 535, 536, 540, 1037], "_fro": [529, 535, 543, 544, 644, 645, 650, 658, 659, 660, 679], "lasso_cd": [529, 535, 540, 546], "error_": [529, 541], "minibatchsparsepca": [529, 531, 535, 538, 540, 541, 543, 544, 1027, 1028, 1038, 1040, 1041, 1042, 1043, 1044], "sierra": [529, 535], "icml09": [529, 535], "x_hat": [529, 535, 543, 544], "noise_variance_init": 530, "quartimax": [530, 1039], "loglike_": 530, "barber": 530, "bishop": [530, 532, 539, 738, 794, 983, 988, 1002], "get_covari": [530, 532, 539], "unmixing_matrix": 531, "whitening_": 531, "kpca": [531, 532, 533, 1022, 1023, 1027], "set_inverse_transform_request": [531, 579, 866, 879], "unsaf": 532, "singular_values_": [532, 539, 542, 1034], "var_": [532, 837, 879, 1040], "miketip": [532, 539], "mppca": [532, 539], "n_samples_seen_": [532, 868, 869, 879, 1035], "batch_size_": 532, "ross": [532, 605, 606, 1003, 1041, 1042], "vision": [532, 755, 756, 979, 983, 985, 1003, 1006, 1011, 1028], "toronto": [532, 642, 855], "dross": 532, "ivt": 532, "rosslimlinyang_ijcv": 532, "karhunen": 532, "loev": 532, "levi": [532, 1034], "lindenbaum": 532, "1371": 532, "1374": 532, "abstain": 532, "holub": 532, "opportun": [532, 1001], "golub": [532, 837, 879], "sigma2": [532, 539], "x_origin": [532, 537, 539, 541, 542, 628, 891, 892], "check_input": [532, 546, 644, 645, 650, 658, 659, 660, 679, 685, 907, 908, 909, 910, 1035], "remove_zero_eig": [533, 1029, 1036], "x_fit_": [533, 641], "eigenvalues_": [533, 1040], "eigenvectors_": [533, 1040], "dual_coef_": [533, 641, 901, 902, 903, 904, 905, 1002, 1031], "x_transformed_fit_": 533, "gamma_": [533, 1043], "nathan": [533, 1035, 1039, 1042], "gunnar": [533, 936], "tropp": [533, 539], "217": [533, 539], "288": [533, 539], "vladimir": [533, 936, 983, 1037, 1041, 1044], "rokhlin": [533, 539, 936], "tygert": [533, 539, 936], "learning_decai": 534, "evaluate_everi": 534, "perp_tol": 534, "mean_change_tol": 534, "max_doc_update_it": 534, "kappa": [534, 714], "tau_0": 534, "pseudocount": [534, 1035], "exp_dirichlet_component_": 534, "n_batch_iter_": 534, "bound_": 534, "doc_topic_prior_": 534, "topic_word_prior_": 534, "franci": [534, 656, 983, 1033], "onlineldavb": 534, "chong": 534, "00360392": 534, "25499205": 534, "0036211": 534, "64236448": 534, "09541846": 534, "15297572": 534, "00362644": 534, "44412786": 534, "39568399": 534, "003586": 534, "vb": 534, "sub_sampl": 534, "doc_topic_distr": [534, 1034], "052": 535, "fresh_restart": 536, "fresh_restarts_max_it": 536, "_w": [536, 538, 545], "_ratio": [536, 538, 545], "_h": [536, 538, 545], "fresh": [536, 1007, 1037], "reconstruction_err_": [536, 538], "andrzej": [536, 538, 545], "anh": [536, 538, 545], "ieic": [536, 538, 545], "708": [536, 538, 545, 747], "721": [536, 538, 545], "waspa": 536, "ridge_alpha": [537, 541, 1034], "500x500": 539, "lu": [539, 542, 935, 936, 1033, 1034, 1035, 1036, 1043, 1044], "n_samples_": 539, "royal": [539, 625, 875, 887, 1001], "methodologi": [539, 872, 977, 987, 1011], "622": 539, "9924": 539, "30061": 539, "54980": 539, "00755": 539, "99244": 539, "ascontiguousarrai": 539, "sparse_encod": [540, 648, 649, 650, 651, 652, 653, 654, 661, 662, 663, 680, 681, 682, 683, 684, 1027, 1034, 1035, 1037, 1041], "u_init": 541, "v_init": 541, "9666": 541, "oversampl": [542, 1027], "indeterminaci": 542, "0157": 542, "0512": 542, "0499": 542, "0479": 542, "0453": 542, "2102": 542, "2410": 542, "5981": 542, "5420": 542, "4486": 542, "3288": 542, "method_max_it": [543, 544, 1037], "dict_learning_onlin": [543, 1028, 1037, 1040, 1041, 1044], "return_cod": 544, "update_h": 545, "_n_compon": 545, "hal": [545, 656, 755, 756, 985], "copy_cov": 546, "orthogonal_mp": [546, 662, 663, 684, 983], "sum_k": [547, 1003], "prior_k": 547, "c_k": 547, "priors_": [547, 548], "scalings_": [547, 548], "xbar_": 547, "reg_param": 548, "scaling_": 548, "colinear": 548, "rotations_": 548, "vt": 548, "n_classes_": [549, 551, 553, 555, 557, 562, 608, 827, 828, 907, 909, 1028, 1037, 1039], "class_prior_": [549, 837], "n_outputs_": [549, 550, 555, 556, 562, 563, 564, 856, 857, 907, 908, 909, 910], "constant_": 550, "dummy_regr": 550, "base_estimator_": [551, 552, 553, 554, 555, 556, 561, 562, 563, 564, 608, 896, 1042], "dok": [551, 552, 866, 1040], "staged_decision_funct": [551, 557, 559], "staged_scor": [551, 552], "7972": 552, "9771": 552, "estimators_samples_": [553, 554, 555, 556, 561, 562, 563, 564, 1033, 1035, 1038, 1044], "estimators_features_": [553, 554, 561], "oob_decision_function_": [553, 555, 562], "oob_prediction_": [554, 556, 563], "8720": [554, 1035], "min_weight_fraction_leaf": [555, 556, 557, 558, 562, 563, 564, 907, 908, 909, 910, 1003, 1030, 1033, 1034], "min_impurity_decreas": [555, 556, 557, 558, 562, 563, 564, 907, 908, 909, 910, 1003, 1034], "shannon": [555, 562, 907, 909, 984, 1003], "unlimit": [555, 556, 557, 558, 562, 563, 564, 907, 908, 909, 910], "n_t": [555, 556, 557, 558, 562, 563, 564, 907, 908, 909, 910], "n_t_r": [555, 556, 557, 558, 562, 563, 564, 907, 908, 909, 910], "right_impur": [555, 556, 557, 558, 562, 563, 564, 907, 908, 909, 910], "n_t_l": [555, 556, 557, 558, 562, 563, 564, 907, 908, 909, 910], "left_impur": [555, 556, 557, 558, 562, 563, 564, 907, 908, 909, 910], "balanced_subsampl": [555, 562, 1035], "subtre": [555, 556, 557, 558, 562, 563, 907, 908, 909, 910, 1003], "extratreeclassifi": [555, 564, 910, 988, 1031, 1036, 1037, 1038, 1040, 1041, 1042, 1044], "unprun": [555, 556, 562, 563, 907, 908, 909, 910], "x_leav": [555, 556, 557, 558, 562, 563, 564, 907, 908, 909, 910], "n_nodes_ptr": [555, 556, 562, 563, 564], "friedman_ms": [556, 557, 558, 563, 908, 910, 1003, 1043, 1044], "extratreeregressor": [556, 561, 564, 909, 993, 1036, 1037, 1038, 1040, 1041, 1042, 1044], "2727": 556, "dummyestim": [557, 558], "eras": [557, 558, 644, 650, 656, 658, 660, 664, 665, 666, 674, 675, 676, 856, 857], "n_trees_per_iteration_": [557, 558, 559, 560], "oob_scores_": [557, 558, 1043], "init_": [557, 558], "max_features_": [557, 558, 595, 907, 908, 909, 910, 1041], "_fit_stag": [557, 558], "crossentropi": 559, "deepest": [559, 560, 1038], "__dataframe__": [559, 560], "no_interact": [559, 560, 1042], "do_early_stopping_": [559, 560], "validation_score_": [559, 560], "is_categorical_": [559, 560], "n_trees_per_iter": 559, "max_samples_": 561, "fei": [561, 993], "ting": [561, 993, 1035, 1036], "ming": [561, 993, 1031, 1035, 1036, 1037, 1041], "zhou": [561, 637, 895, 993, 1035, 1043, 1044], "zhi": [561, 993], "hua": [561, 993], "icdm": [561, 993], "eighth": [561, 993], "tkdd": 561, "n_left": 561, "32987858": 563, "n_out": 564, "one_hot_encoder_": 564, "moosmann": 564, "trigg": 564, "juri": 564, "random_tre": 564, "x_sparse_embed": 564, "randomtreesembedding_": 564, "final_estimator_": [565, 566], "named_estimators_": [565, 566, 567, 568, 1035, 1037], "named_estim": [565, 566, 567, 568], "parameter_nam": [565, 566, 567, 568], "new_valu": [565, 566, 567, 568], "linearsvr": [566, 905, 1002, 1031, 1033, 1038, 1043], "flatten_transform": [567, 1034], "le_": 567, "eclf1": 567, "array_equ": [567, 1034], "eclf2": 567, "eclf3": 567, "maj": 567, "probabilities_or_label": 567, "n_regressor": 568, "r1": 568, "r3": 568, "er": 568, "with_traceback": [569, 570, 571, 572, 573, 574, 575, 576], "__traceback__": [569, 570, 571, 572, 573, 574, 575, 576], "current_sklearn_vers": 574, "repr": [575, 1038, 1039, 1041], "linter": 577, "flake8": 577, "spam": [579, 707, 738, 834, 987, 989, 1011], "feature_names_": 579, "xa": 579, "dict_typ": 579, "1048576": [580, 587], "non_neg": [580, 1034], "eleph": 580, "bird": [580, 716, 751, 987], "patch_height": [581, 582, 585], "patch_width": [581, 582, 585], "img_height": 581, "img_width": 581, "pe": 581, "pe_tran": 581, "263758": 581, "image_height": [581, 582, 585], "image_width": [581, 582, 585], "n_channel": [581, 582, 585], "n_patch": [581, 582, 585], "272214": 582, "n_z": 583, "return_a": [583, 584, 953, 1030], "_coo": [583, 584], "shape_img": 583, "image_s": 585, "strip_acc": [586, 587, 589], "nfkd": [586, 587, 589, 1037], "unicodedata": [586, 587, 589], "regexp": [586, 587, 589], "min_n": [586, 587, 589, 1027], "max_n": [586, 587, 589, 1027], "fixed_vocabulary_": [586, 589], "stop_words_": [586, 589], "delattr": [586, 589, 1039], "vectorizer2": 586, "raw_docu": [586, 589], "get_stop_word": [586, 587, 589], "x_inv": [586, 589], "con": 587, "yates2011": 588, "baeza": [588, 727, 1030], "yate": [588, 727], "ribeiro": [588, 727, 1040], "neto": [588, 727, 1045], "addison": [588, 727], "weslei": [588, 727], "mrs2008": 588, "118": 588, "tfid": 588, "22314355": 588, "51082562": 588, "91629073": 588, "_check_stop_list": 589, "pvalu": [590, 593, 594, 596, 597, 598, 824], "k_best": [590, 896, 1000, 1044], "fdr": 590, "fwe": 590, "iff": [590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 870], "retent": [590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601], "n_selected_featur": [590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601], "n_original_featur": [590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601], "attrgett": [591, 595], "barnhil": [591, 592], "vapnik": [591, 592], "389": [591, 592, 1021], "n_subsets_of_featur": 592, "narrai": 592, "benjamini": [593, 1033, 1034], "hochberg": [593, 1033, 1034], "false_discovery_r": 593, "norm_ord": [595, 1034], "threshold_": [595, 1034], "3252": 595, "8345": 595, "4976": 595, "55249": 595, "half_cal": 595, "half_selector": 595, "partial_fit_param": [595, 827, 828, 831, 832], "unspecifi": [597, 598, 798, 984], "_get_support_mask": 599, "featureselector": 599, "n_features_to_select_": 600, "variances_": 601, "weed": 602, "p_valu": [602, 603, 604], "chi2_stat": 602, "0387": 602, "0116": 602, "f_statist": [603, 604], "force_finit": [604, 607, 725, 782, 987, 1041], "pearson": [604, 607, 1040], "discrete_featur": [605, 606], "nat": [605, 606, 702, 752, 754, 1041], "essenc": [605, 606, 740, 984, 987], "kraskov": [605, 606], "stogbauer": [605, 606], "grassberg": [605, 606], "phy": [605, 606], "kozachenko": [605, 606], "leonenko": [605, 606], "probl": [605, 606], "peredachi": [605, 606], "correlation_coeffici": 607, "fmin_l_bfgs_b": [608, 609], "max_iter_predict": 608, "copy_x_train": [608, 609], "one_vs_rest": [608, 988], "compoundkernel": [608, 1041], "obj_func": [608, 609], "initial_theta": [608, 609], "theta_opt": [608, 609], "func_min": [608, 609], "_posterior_mod": 608, "log_marginal_likelihood_value_": [608, 609], "9866": [608, 617, 620], "83548752": 608, "03228706": 608, "13222543": 608, "79064206": 608, "06525643": 608, "14410151": 608, "clone_kernel": [608, 609, 1037], "n_kernel_param": [608, 609], "log_likelihood_gradi": [608, 609], "x_train_": 609, "y_train_": 609, "3680": [609, 612, 623], "592": [609, 612, 623, 994], "y_cov": 609, "n_samples_x": [609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 755, 756, 757, 758, 760, 761, 763, 764, 765, 766, 771, 772, 773, 774, 775, 776, 777, 778], "requires_vector_input": [610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623], "51292546": 610, "09861229": [610, 997], "n_samples_i": [610, 611, 612, 613, 614, 617, 618, 619, 620, 621, 622, 623, 755, 756, 757, 758, 760, 761, 763, 764, 765, 766, 771, 772, 773, 774, 775, 776, 777, 778], "n_kernel": 610, "k_gradient": [610, 611, 612, 613, 614, 617, 618, 619, 620, 621, 622, 623], "k_diag": [610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623], "hyperparameter_constant_valu": 611, "3696": 611, "606": [611, 829, 988], "hyperparameter_sigma_0": 612, "edward": [612, 617, 620, 1030, 1035, 1036, 1037, 1038, 1042], "hyperparameter_length_scal": [613, 617, 620, 621], "hyperparameter_period": 613, "0144": 613, "3894": 613, "3467": 613, "559": 614, "namedtupl": [615, 945, 1043], "maxsiz": 615, "customkernel": 616, "mat\u00e9rn": 617, "appr": 617, "8513": 617, "0368": 617, "1117": 617, "8086": [617, 1034], "0693": 617, "1220": 617, "gamma_bound": 618, "pairwise_kernels_kwarg": 618, "additive_chi2": [618, 636, 762, 771], "pairwise_kernel_funct": [618, 641, 771], "hyperparameter_gamma": 618, "9733": [618, 621], "8880": 618, "05663": 618, "05532": 618, "8676": [618, 1034], "07073": 618, "06165": 618, "__mul__": 619, "8354": [620, 1034], "03228": 620, "1322": 620, "7906": [620, 647], "0652": 620, "1441": 620, "hyperparameter_alpha": 621, "8881": 621, "0566": 621, "05518": 621, "8678": 621, "0707": 621, "0614": 621, "hyperparameter_noise_level": 623, "dict_kei": 624, "initial_strategi": 625, "imputation_ord": [625, 1037], "skip_complet": 625, "max_valu": [625, 1038, 1039], "keep_empty_featur": [625, 626, 628, 977, 1042], "nullabl": [625, 626, 627, 628, 1038, 1042], "na": [625, 626, 627, 628, 766, 775, 917, 919, 920, 1037, 1038, 1041, 1042, 1043, 1044], "known_val": 625, "Nearness": 625, "arab": 625, "broadcast": 625, "missingind": [625, 626, 628, 977, 1035, 1036, 1037, 1041, 1043], "initial_imputer_": 625, "imputation_sequence_": 625, "feat_idx": 625, "neighbor_feat_idx": 625, "n_features_with_missing_": 625, "indicator_": [625, 626, 628], "knp": 625, "stef": [625, 977], "buuren": [625, 977], "karin": [625, 977], "groothui": [625, 977], "oudshoorn": [625, 977], "buck": 625, "1960": [625, 714], "306": 625, "imp_mean": [625, 628], "9584": [625, 1034], "nan_euclidean": [626, 759, 775], "_pairwise_cal": 626, "kwd": [626, 768, 771, 775, 778, 789, 790], "olga": [626, 977], "troyanskaya": [626, 977], "cantor": [626, 977], "gavin": [626, 977], "sherlock": [626, 977], "pat": [626, 977], "botstein": [626, 977], "russ": [626, 977], "altman": [626, 977], "bioinformat": [626, 977], "520": [626, 848, 977, 990], "n_output_featur": 626, "error_on_new": 627, "features_": [627, 977], "n_missing_featur": 627, "x2_tr": 627, "n_features_with_miss": 627, "statistics_": 628, "n_features_missing_ind": 628, "x_imput": 628, "n_features_out": 628, "surface_": 629, "quadcontourset": 629, "quadmesh": 629, "feature_1": [629, 912], "feature_2": 629, "nicer": 629, "pd_result": 630, "target_idx": 630, "decil": [630, 1038], "is_categor": 630, "pdp": [630, 994, 1041], "nonexist": 630, "deciles_vlines_": 630, "vlines_": 630, "deciles_hlines_": 630, "bars_": 630, "heatmaps_": 630, "pdp_lim": 630, "ice_lines_kw": 630, "pd_line_kw": 630, "contour_kw": 630, "disp1": 630, "disp2": 630, "pdp_line_kw": 630, "bar_kw": 630, "heatmap_kw": 630, "seq": 631, "n_values_feature_j": 631, "bre": [632, 1003], "4666": 632, "2211": 632, "x_min_": 633, "x_max_": 633, "n_threshold": [633, 724, 779, 786], "stepwis": [633, 652, 653, 654, 680, 681, 983], "increasing_": 633, "isotonic_regress": [633, 1040], "secondari": [633, 1031], "leeuw": 633, "1977": 633, "nilotp": [633, 635], "chakravarti": [633, 635], "pava": 633, "hornik": 633, "mair": 633, "kruskal": [633, 688, 692, 984], "psychometrica": 633, "iso_reg": 633, "8628": 633, "7256": 633, "isotonicregression0": 633, "increasing_bool": 634, "fisher_transform": 634, "sample_step": 636, "sample_interv": 636, "sample_interval_": [636, 1043], "skewedchi2sampl": [636, 637, 638, 639, 979, 1034, 1041, 1042], "chi2_kernel": [636, 640, 755, 762, 985, 1028], "additive_chi2_kernel": [636, 756, 762, 979], "vedaldi": [636, 979], "zisserman": [636, 979, 987], "chi2sampl": 636, "9499": 636, "component_indices_": [637, 1040], "normalization_": [637, 979], "additivechi2sampl": [637, 638, 639, 640, 755, 756, 979, 1041, 1043], "kernel_metr": [637, 638, 639, 640], "seeger": [637, 979], "mahdavi": 637, "jin": [637, 1038, 1039], "data_transform": 637, "9987": 637, "fft": 638, "indexhash": 638, "bithash": 638, "indexhash_": 638, "bithash_": 638, "kitchen": [639, 979], "sink": [639, 979], "random_offset_": [639, 640], "random_weights_": [639, 640], "rahimi": [639, 979], "benjamin": [639, 1029, 1030, 1038, 1039, 1040, 1041, 1042, 1043], "recht": [639, 979], "berkelei": [639, 907, 908], "brecht": 639, "rah": 639, "rbf_featur": [639, 979], "skewed": [640, 1034], "secant": 640, "fuxin": 640, "catalin": 640, "ionescu": [640, 979, 1037], "cristian": 640, "sminchisescu": [640, 979], "chi2_featur": 640, "2c": [641, 650, 670, 671, 672, 673, 685, 979], "kevin": [641, 1029, 1031, 1033, 1034, 1037, 1038, 1039, 1041, 1042, 1044], "492": [641, 980, 1019], "alpha_1": [642, 643, 983], "alpha_2": [642, 643, 983], "lambda_1": [642, 643, 983], "lambda_2": [642, 643, 983], "threshold_lambda": 642, "x_offset_": [642, 643, 1039], "x_scale_": [642, 643, 1039], "mackai": [642, 643, 983], "ashra": 642, "salakhutdinov": [642, 848, 990], "utstat": 642, "rsalakhu": 642, "sta4273": 642, "lecture2": 642, "computed_scor": 643, "appendix": [643, 674, 983, 997], "wipf": [643, 983], "nagarajan": [643, 983], "2_2": [644, 645, 650, 651, 652, 653, 654, 658, 659, 660, 661, 670, 679, 680, 681, 682], "glmnet": [644, 645, 1027], "sparse_coef_": [644, 650, 658, 660, 1027], "dual_gap_": [644, 645, 650, 651, 658, 659, 660, 661, 1040], "max_j": [644, 650], "w_j": [644, 650, 987, 1001], "ext": 644, "83816048": 644, "55968825": 644, "451": 644, "coef_init": [644, 645, 650, 651, 658, 659, 660, 661, 664, 665, 666, 674, 675, 676, 679, 682], "mono": [644, 645, 650, 651, 658, 659, 660, 661, 679, 682], "_21": [644, 645, 650, 651, 658, 659, 660, 661, 679, 682], "sum_j": [644, 645, 650, 651, 658, 659, 660, 661, 679, 682, 983, 987, 992], "alpha_min": [644, 645, 648, 650, 651, 652, 654, 658, 659, 660, 661, 679, 680, 681, 682], "alpha_max": [644, 645, 650, 651, 658, 659, 660, 661, 679, 682], "ndim": [644, 645, 650, 651, 658, 659, 660, 661, 679, 682, 919, 920], "multitaskelasticnet": [644, 645, 650, 659, 660, 661, 679, 983, 1027, 1034, 1035, 1038, 1040], "l1_ratio_": [645, 657, 659], "n_l1_ratio": [645, 657, 659, 1030], "199": [645, 788, 1002], "398": [645, 1021], "unpen": [646, 667, 678, 983], "raphson": [646, 667, 678], "g_j": [646, 667, 678], "896": 646, "483": 646, "795": 646, "pg_i": 647, "scale_": [647, 868, 869, 877, 879, 889, 997, 1032], "outliers_": 647, "elvezio": [647, 983], "ronchetti": [647, 983], "concomit": [647, 983], "owen": [647, 1036, 1037], "statweb": [647, 680, 681], "hhu": [647, 1036], "284": 647, "806": 647, "7200": 647, "4923": 647, "1698": 647, "0106": 647, "9221": 647, "0226": 647, "fit_path": [648, 652, 653, 654, 680, 681], "coef_path_": [648, 649, 652, 653, 983], "active_": [648, 649, 652, 653], "1111": [648, 654], "max_n_alpha": [649, 653], "n_cv_alpha": [649, 653], "cv_alpha": [649, 653], "lassolar": [649, 650, 651, 653, 654, 661, 662, 663, 680, 681, 682, 983, 1019, 1027, 1028, 1030, 1034, 1037, 1038, 1040], "9996": 649, "2961": 649, "3996": 649, "2_f": 650, "_11": 650, "4951": 651, "2_fro": [651, 660, 661, 682], "coef_path": [651, 661, 682], "46874778": [651, 661, 682], "2159048": [651, 661, 682], "4425765": [651, 661, 682], "23689075": [651, 661, 682], "coef_path_lar": [651, 661, 682], "coef_path_continu": [651, 661, 682], "interp1d": [651, 661, 682], "46915237": [651, 661, 682], "23668876": [651, 661, 682], "congruenc": [652, 653, 654, 680, 681], "fragil": 653, "3972": 653, "2222": 654, "rank_": 655, "singular_": 655, "maxent": [656, 657, 983], "primal": [656, 657, 675, 899, 900, 1001, 1002], "synthetic_feature_weight": [656, 657], "ciyou": 656, "byrd": 656, "jorg": [656, 1030, 1039, 1041], "noced": 656, "lui": [656, 1028, 1030, 1031, 1035, 1044], "iem": 656, "lbfgsb": 656, "schmidt": [656, 983, 1030], "le": [656, 867, 978, 983, 990, 998, 1000, 1035, 1039, 1040, 1044], "roux": [656, 983, 1000], "00860051": 656, "defazio": [656, 983], "lacost": [656, 983], "hsiang": [656, 1031], "fu": [656, 1031], "fang": [656, 1034, 1035], "lan": [656, 1042, 1043], "chih": [656, 1032], "jen": [656, 1035], "maxent_du": 656, "cs_": 657, "l1_ratios_": 657, "coefs_paths_": [657, 1037], "coefs_path": 657, "n_l1_ratios_": 657, "score_param": [657, 1044], "w_ij": 658, "eps_": [658, 660], "45663524": 658, "45612256": 658, "0872422": 658, "fro_2": [659, 661], "52875032": 659, "46958558": 659, "00166409": 659, "60809415": 660, "94592424": 660, "41888636": 660, "87382323": 660, "9994": 661, "5713": 661, "153": 661, "7971": 661, "9015": [661, 1035], "n_nonzero_coefs_": [662, 663], "orthogonal_mp_gram": [662, 663, 683, 1041], "mallat": [662, 683, 684, 983], "3397": [662, 683, 684], "3415": [662, 683, 684], "papier": [662, 683, 684], "mallatpursuit93": [662, 683, 684], "rubinstein": [662, 683, 684], "zibulevski": [662, 683, 684], "elad": [662, 683, 684], "technion": [662, 683, 684, 983], "ronrubin": [662, 683, 684, 983], "ksvd": [662, 683, 684, 983], "9991": [662, 663, 1035], "3854": [662, 663], "previous_loss": [664, 665, 666, 675], "pa": [664, 665, 896, 983, 987, 1000], "preset": [664, 666, 674, 991], "t_": [664, 665, 666, 674, 675, 676, 856, 857, 1001], "loss_function_": [664, 666, 674, 675, 1044], "volume7": [664, 665], "crammer06a": [664, 665], "crammer": [664, 665, 732, 983, 987, 1002], "dekel": [664, 665, 983], "keshat": [664, 665, 983], "shalev": [664, 665, 983, 1001], "shwartz": [664, 665, 983, 1001], "26642044": 664, "45070924": 664, "67251877": 664, "64185414": 664, "84127814": 664, "intercept_init": [664, 665, 666, 674, 676], "y_all": [664, 666, 674, 827, 828, 856], "epsilon_insensit": [665, 674, 676, 900, 983, 1001], "squared_epsilon_insensit": [665, 674, 676, 900, 983, 1033], "48736655": 665, "18818427": 665, "59122734": 665, "94731329": 665, "02306214": 665, "eta0": [666, 674, 675, 676, 1001], "lossfunct": [666, 674, 675, 1036], "therein": 666, "939": [666, 1016], "990": [667, 987], "solver_opt": 668, "ipm": 668, "linprog": [668, 983], "is_data_valid": [669, 983], "is_model_valid": [669, 983], "max_trial": [669, 983], "max_skip": 669, "stop_n_inli": [669, 983], "stop_scor": [669, 983], "stop_prob": 669, "mad": [669, 1033], "costlier": 669, "n_trials_": 669, "n_skips_no_inliers_": 669, "n_skips_invalid_data_": 669, "n_skips_invalid_model_": 669, "sri": [669, 983, 1034, 1035], "bmva": 669, "bmvc": [669, 983], "paper355": 669, "9885": 669, "9417": 669, "15000": [670, 685, 856, 857], "btol": [670, 672], "gcv_mode": [671, 1029], "store_cv_valu": [671, 673, 1035, 1038], "alpha_per_target": [671, 1039], "cv_values_": [671, 673], "5166": 671, "gcv": [671, 673], "9595": 672, "9630": 673, "power_t": [674, 675, 676, 856, 857, 1001], "best_loss": [674, 676], "leon": [674, 675, 676, 1027], "bottou": [674, 675, 676, 991, 1001], "pow": [674, 675, 676, 856, 857], "dl": 674, "775047": 674, "775151": 674, "justif": 674, "volume2": 674, "zhang02c": 674, "offset_init": 675, "unshifft": 675, "n_subsampl": [677, 925], "breakdown_": 677, "n_subpopulation_": 677, "xin": [677, 983, 1035], "dang": [677, 983], "hanxiang": [677, 983], "peng": [677, 983, 1033, 1034, 1035, 1037, 1039], "xueqin": [677, 983], "hepe": [677, 983], "olemiss": 677, "xdang": 677, "mtse": 677, "9884": 677, "5871": 677, "coeff": 678, "839": 678, "599": 678, "copy_gram": [680, 681, 684], "return_path": [680, 681, 683, 684], "lars_path_gram": [680, 983, 1036], "tib": [680, 681], "xgamma": 683, "norms_squar": 684, "copy_xi": 684, "return_intercept": [685, 1036], "_preprocess_data": 685, "path_method": [686, 984], "neighbors_algorithm": [686, 687], "arnoldi": [686, 687, 691], "fw": 686, "warshal": [686, 984], "kernel_pca_": 686, "nbrs_": [686, 687], "dist_matrix_": 686, "tenenbaum": [686, 984], "reconstruction_error": 686, "frobenius_norm": 686, "d_fit": 686, "x_fit": 686, "n_queri": [686, 841, 842, 843, 845, 847, 849, 850, 851], "hessian_tol": [687, 691], "modified_tol": [687, 691], "reconstruction_error_": 687, "rowei": [687, 691, 848, 984, 990], "saul": [687, 691, 984, 1034, 1035, 1037], "2323": [687, 691, 984], "donoho": [687, 691, 984], "grime": [687, 691, 984], "natl": [687, 691, 984], "acad": [687, 691, 984], "5591": [687, 691, 984], "mlle": [687, 691, 984], "zha": [687, 691, 984], "shanghai": [687, 691, 984], "univ": [687, 691, 984], "406": [687, 691, 984], "immers": [688, 692], "nonmetr": [688, 692, 984], "smacof": [688, 1042], "stress": [688, 692, 984, 1042], "stress_": 688, "dispar": [688, 692, 984], "dissimilarity_matrix_": 688, "psychometrika": [688, 692, 984], "1964": [688, 692, 875, 887, 984], "borg": [688, 692, 984], "groenen": [688, 692, 984], "affinity_matrix": [689, 693], "n_neighbors_": [689, 845], "early_exagger": 690, "min_grad_norm": [690, 1033], "der": [690, 694, 984, 1030, 1031, 1035], "maaten": [690, 694, 984], "bhtsne": [690, 1034], "opentsn": 690, "abort": 690, "pdist": [690, 775, 778], "pairwise_distance_funct": [690, 694, 775, 778, 990], "barn": [690, 984, 1032, 1034, 1037], "hut": [690, 984, 1032, 1034, 1037], "nlogn": 690, "kl_divergence_": [690, 1034], "learning_rate_": [690, 857], "hinton": [690, 848, 855, 856, 857, 984, 990, 991, 992], "2579": 690, "2605": 690, "lvdmaaten": [690, 1034], "oct": [690, 766, 984, 990], "3221": [690, 984], "3245": [690, 984], "jmlr_2014": 690, "belkina": [690, 984], "ciccolella": [690, 984], "anno": [690, 984], "halpert": [690, 984], "spidlen": [690, 984], "snyder": [690, 984], "cappion": [690, 984], "kobak": [690, 1040], "beren": 690, "transcriptom": 690, "guttman": 692, "mds_result": 692, "norm_laplacian": 693, "drop_first": 693, "nk": 694, "2n": [694, 979, 991], "3k": 694, "cosine_dist": [694, 759, 990, 1033], "jarkko": 694, "venna": 694, "samuel": [694, 1011, 1030, 1031, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1044], "kaski": 694, "icann": 694, "verlag": 694, "491": 694, "twelfth": 694, "pmlr": 694, "391": 694, "im_": 695, "axesimag": 695, "text_": 695, "include_valu": 695, "values_format": [695, 1037], "im_kw": [695, 1041], "text_kw": [695, 1042], "get_metr": 697, "euclideandist": 697, "manhattandist": 697, "chebyshevdist": 697, "minkowskidist": [697, 1040], "seuclideandist": 697, "mahalanobisdist": 697, "haversinedist": 697, "arcsin": [697, 761], "hammingdist": 697, "n_unequ": 697, "n_tot": 697, "canberradist": 697, "braycurtisdist": 697, "abbrevi": 697, "ntt": 697, "ntf": 697, "nft": 697, "nff": 697, "nneq": 697, "jaccarddist": 697, "matchingdist": 697, "dicedist": 697, "kulsinskidist": [697, 1043], "rogerstanimotodist": 697, "russellraodist": 697, "sokalmichenerdist": 697, "sokalsneathdist": 697, "pyfunc": [697, 990], "pyfuncdist": 697, "metric_obj": 697, "chance_level_": [698, 700, 1043], "drop_intermedi": [698, 700, 779, 786, 1043], "errors_lines_": 699, "with_error": 699, "scatter_": 699, "balanced_accuracy_scor": [701, 784, 987, 1035], "imperfectli": [701, 731, 987], "label_tru": [702, 715, 734, 752, 754, 792], "upperlimit": 702, "expected_ri": 703, "discord": 703, "hubert1985": 703, "1007": 703, "2fbf01908075": 703, "steinley2004": 703, "wk": 703, "rand_index": 703, "adjusted_rand_index": 703, "chacon": 703, "chac\u00f3n": 703, "rastrojo": 703, "balanced_accuraci": [706, 987, 1035], "brodersen": 706, "ong": 706, "stephan": [706, 1030, 1036, 1037, 1039], "buhmann": 706, "20th": 706, "3121": 706, "kelleh": [706, 987], "aoif": [706, 987], "arci": [706, 987], "y_true_categor": [707, 987], "calinski": [708, 1033], "harabasz": 708, "allow_non": 709, "thrown": [709, 1036, 1037], "tn": [710, 716, 987], "negative_class": 710, "zebra": 710, "output_dict": [711, 1035, 1039], "precision_recall_fscore_support": [711, 726, 727, 781, 784, 987, 1031, 1035, 1037, 1043], "multilabel_confusion_matrix": [711, 726, 727, 735, 781, 784, 987, 1036], "conting": [712, 713, 728, 752, 1033], "n_classes_tru": [712, 752], "n_classes_pr": [712, 752], "cohen": [714, 1035], "p_o": 714, "p_e": 714, "artstein": 714, "poesio": 714, "linguist": [714, 896, 1000], "555": 714, "596": 714, "neutral": 714, "6875": 714, "label_pr": [715, 733, 734, 752, 754, 792], "ant": [716, 751, 987], "a_row": 717, "a_column": 717, "b_row": 717, "b_column": 717, "tsoumaka": [718, 731, 737, 987], "kataki": [718, 731, 737, 987], "vlahava": [718, 737, 987], "handbook": [718, 737, 987], "667": [718, 737, 987], "685": [718, 737, 987], "raw_valu": [719, 720, 725, 742, 743, 745, 747, 748, 750, 782, 787, 788, 987, 1035, 1038], "wainwright": [719, 720, 721], "su": [719, 720, 721], "statlearnspars": [719, 720, 721], "764": [719, 987], "691": 719, "8125": 719, "57142857": 719, "d2": 720, "d2_absolute_error_scor": [720, 987, 1041], "koenker": [720, 983], "roger": [720, 1034, 1035, 1039], "jos\u00e9": [720, 1030, 1040], "045": 720, "630": 721, "bouldin": 722, "farther": 722, "log_bas": 723, "ignore_ti": [723, 753], "ndcg": [723, 753, 987, 1034], "ndcg_score": [723, 987, 1034, 1037, 1042, 1043], "sharper": 723, "discounted_cumulative_gain": 723, "dcg": [723, 753, 987, 1034], "jarvelin": [723, 753, 987], "kekalainen": [723, 753, 987], "446": [723, 753, 987], "colt": [723, 753, 987], "mcsherri": [723, 753, 987], "najork": [723, 753, 987], "european": [723, 753, 987], "421": [723, 753, 987], "groud": [723, 753], "true_relev": [723, 753], "imperfect": [725, 782, 987, 1029], "variance_weight": [725, 782, 987], "983": 725, "n_unique_label": [726, 727, 735, 780, 781, 784, 951], "fbeta_scor": [726, 739, 780, 987, 1029, 1030, 1031, 1032, 1037, 1043], "y_true_empti": 726, "y_pred_empti": [726, 727], "66666667": [726, 779, 849, 997], "328": 727, "fowlk": [728, 1033], "mallow": [728, 1033], "get_scorer_nam": [729, 987, 1041, 1044], "all_scor": 730, "forgiv": 731, "upperbound": 731, "grigorio": 731, "ioanni": 731, "wareh": 731, "septemb": [731, 987, 1027, 1030, 1033, 1035, 1040, 1043], "pred_decis": [732, 987, 1040], "disagre": [732, 994], "kobi": 732, "AND": 732, "denero": 732, "gluster": 733, "v_measur": [733, 792], "6666": [735, 987, 1033], "5833": [735, 987], "lrap": [736, 987], "21616": 738, "needs_proba": [739, 1036, 1044], "needs_threshold": [739, 1044], "ftwo_scor": [739, 987], "mcc": [740, 987, 1041], "baldi": 740, "brunak": 740, "chauvin": 740, "andersen": [740, 1041], "nielsen": [740, 1035], "gorodkin": 740, "jurman": 740, "riccadonna": 740, "furlanello": 740, "cen": 740, "3273": 743, "5515": 743, "6198": 743, "112589990684262": 743, "0568": 744, "4260": [746, 749], "41666667": 747, "825": 747, "msle": [748, 987], "rmsle": [748, 987], "root_mean_squared_log_error": [748, 987, 1044], "00462428": 748, "08377444": 748, "samplewis": [751, 987], "mcm": [751, 987], "mcm_": 751, "multi_confus": 751, "056": [752, 995], "normalized_discounted_cumulative_gain": 753, "dcg_score": [753, 987, 1034, 1037], "marszalek": [755, 756, 985], "lazebnik": [755, 756, 985], "schmid": [755, 756, 985], "ouvert": [755, 756, 985], "00171412": [755, 756, 985], "dense_output": [758, 764, 892, 937, 1035], "linear_kernel": [758, 762, 985, 1035], "haversine_dist": [759, 1036], "y_norm_squar": 760, "x_norm_squar": [760, 1032, 1044], "paired_dist": [760, 766, 775, 1031], "41421356": [760, 766, 990], "lon": 761, "ezeiza": 761, "airport": 761, "bueno": 761, "argentina": 761, "gaull": 761, "bsa": 761, "83333": 761, "5166646": 761, "0083899664": 761, "53844117956": 761, "bsas_in_radian": 761, "paris_in_radian": 761, "6371000": 761, "kilomet": 761, "11099": 761, "54035582": 761, "polynomial_kernel": [762, 985, 1044], "rbf_kernel": [762, 985, 1031], "laplacian_kernel": [762, 985, 1032], "sigmoid_kernel": [762, 985], "sq": 766, "dixon": [766, 1037, 1038], "cybernet": 766, "ieeexplor": 766, "4310090": 766, "filter_param": 771, "jth": [771, 775], "force_all_finit": [775, 917, 919, 920, 1038, 1041], "distance_metr": [775, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853], "metric_kwarg": [776, 777], "reduce_func": [778, 1038], "d_chunk": 778, "sought": 778, "neigh": [778, 841, 842, 843, 845, 847, 849, 850, 851], "gen": 778, "probas_pr": 779, "warn_for": 780, "shantanu": 780, "godbol": 780, "sunita": 780, "sarawagi": 780, "pig": 780, "948": [782, 987], "max_fpr": [785, 987, 1035], "provost": [785, 987], "ceder": [785, 987], "stern": [785, 987], "fawcett": [785, 786, 987], "generalis": [785, 987, 1007], "822": 787, "n_samples_a": [789, 790], "favour": [789, 984, 986, 1036], "mean_prior": 794, "degrees_of_freedom_prior": 794, "verbose_interv": [794, 795], "wishart": 794, "emipr": 794, "precisions_": [794, 795], "precisions_cholesky_": [794, 795, 1041], "converged_": [794, 795], "lower_bound_": [794, 795, 1035], "weight_concentration_prior_": 794, "weight_concentration_": 794, "mean_precision_prior_": 794, "mean_precision_": 794, "mean_prior_": 794, "degrees_of_freedom_prior_": 794, "degrees_of_freedom_": 794, "covariance_prior_": 794, "hagai": 794, "attia": 794, "bgm": 794, "n_dimens": [794, 795], "log_prob": [794, 795], "weights_init": 795, "precisions_init": [795, 1041, 1043], "gm": 795, "pre_dispatch": [796, 802, 810, 818, 820, 821, 822, 823, 826, 953, 1030], "error_scor": [796, 799, 800, 802, 810, 818, 821, 822, 823, 826, 976, 1031, 1035, 1039, 1042], "explos": [796, 810, 820, 821, 822], "fitfailedwarn": [796, 799, 800, 802, 810, 818, 821, 822, 823, 826], "param_kernel": [796, 810], "param_degre": 796, "split0_test_scor": [796, 810, 1033], "rank_t": 796, "split1_test_scor": [796, 810], "split0_train_scor": [796, 810, 1033], "split1_train_scor": [796, 810], "mean_train_scor": [796, 810, 1033], "std_train_scor": [796, 810, 1033], "split0_test_precis": [796, 810], "mean_train_precis": [796, 810], "best_estim": [796, 799, 800, 810], "scorer_": [796, 799, 800, 810], "n_splits_": [796, 799, 800, 810], "refit_time_": [796, 799, 800, 810, 1035], "multimetric_": [796, 799, 800, 810], "parametergrid": [796, 1029, 1035], "split2_test_scor": 796, "num_sampl": [796, 810, 1042], "versionad": [796, 799, 800, 810], "stratif": [797, 798, 804, 805, 814, 815, 816, 958, 1036], "group_kfold": 797, "set_split_request": [797, 798, 803, 805, 814], "aggressive_elimin": [799, 800, 976], "r0": [799, 800], "replai": [799, 800], "n_remaining_candidates_": [799, 800], "n_candid": [799, 800, 976], "max_resources_": [799, 800], "min_resources_": [799, 800], "n_required_iterations_": [799, 800], "n_possible_iterations_": [799, 800], "exceed": [799, 800, 1033], "n_unique_tick": [802, 823], "n_tick": [802, 818, 823, 826], "neg_": [802, 818, 1033], "errorbar_": [802, 818], "errorbarcontain": [802, 818], "fill_between_": [802, 818], "polycollect": [802, 818], "exploit_incremental_learn": [802, 823], "log_scal": [802, 1043], "fill_between_kw": [802, 818], "errorbar_kw": [802, 818], "predispatch": [802, 818, 823, 826], "negat": [802, 818, 987], "combinator": 806, "lpo": 806, "param_list": 808, "rounded_list": 808, "89856": 808, "923223": 808, "878964": 808, "038159": 808, "parametersampl": [810, 1029, 1035, 1039], "2652124": 811, "rskf": 812, "36851234": 812, "sizeabl": [813, 816], "sad": [814, 815], "sss": 816, "logistic_regress": [818, 826], "n_valu": [818, 826, 1035], "checked_cv": 819, "3315057": [821, 822], "08022103": [821, 822], "03531816": [821, 822], "test_r2": 822, "test_auc": 822, "train_r2": 822, "train_auc": 822, "3635": 822, "3573": 822, "6114": 822, "28009951": 822, "3908844": 822, "22784907": 822, "train_sizes_ab": 823, "train_size_ab": 823, "cv_train_scor": 823, "cv_test_scor": 823, "permutation_scor": 824, "505": 824, "pairwise_indices_": 827, "label_binarizer_": 828, "multilabel_": [828, 1032], "code_book_": 829, "bakiri": [829, 988], "pict": [829, 988], "order_": [830, 833], "jess": [830, 988, 1040], "pfahring": [830, 988], "geoff": [830, 988], "holm": [830, 988, 1044], "eib": [830, 988], "8387": 830, "9431": 830, "4576": 830, "8878": 830, "3684": 830, "2640": 830, "0321": 830, "9935": 830, "0626": 830, "y_log_prob": 830, "load_linnerud": [832, 1033, 1038], "force_alpha": [834, 835, 836, 838, 1042], "lidston": [834, 835, 836, 838, 989], "class_count_": [834, 835, 836, 837, 838], "class_log_prior_": [834, 835, 836, 838], "feature_count_": [834, 836, 838], "feature_log_prob_": [834, 835, 836, 838], "categoricalnb": [834, 836, 837, 838, 989, 1037, 1038, 1039, 1040, 1042], "renni": [834, 836, 989, 1035], "schuetz": [834, 838], "htmledit": [834, 838, 985], "mccallum": [834, 989], "nigam": [834, 989], "metsi": [834, 989], "androutsopoulo": [834, 989], "palioura": [834, 989], "cea": [834, 989], "predict_joint_log_proba": [834, 835, 836, 837, 838, 1042], "min_categori": [835, 1039], "category_count_": 835, "n_categories_": 835, "mirror": [836, 976], "mahout": 836, "weka": 836, "feature_all_": 836, "shih": [836, 989], "teevan": [836, 989], "karger": [836, 989], "623": [836, 989], "jrenni": 836, "icml03": 836, "var_smooth": [837, 1035], "stan": [837, 1044], "levequ": [837, 879], "cstr": 837, "epsilon_": 837, "theta_": [837, 989], "clf_pf": 837, "distancemetric64": [839, 840], "valid_metr": [839, 840, 990, 1043], "19662693": [839, 840], "29473397": [839, 840], "tree_copi": [839, 840], "query_radiu": [839, 840], "count_onli": [839, 840], "kernel_dens": [839, 840], "94114649": [839, 840], "83281226": [839, 840], "2071716": [839, 840], "two_point_correl": [839, 840], "get_arrai": [839, 840], "get_n_cal": [839, 840], "n_call": [839, 840], "get_tree_stat": [839, 840], "tree_stat": [839, 840], "breadth_first": [839, 840, 844], "return_log": [839, 840], "k_true": [839, 840], "k_ret": [839, 840], "breadth": [839, 840, 844, 1011, 1029], "dualtre": [839, 840], "sort_result": [839, 840, 847, 849, 850, 851, 1039], "radii": [839, 840], "reset_n_cal": [839, 840], "effective_metric_": [841, 842, 843, 845, 847, 849, 850, 851, 990], "callbl": 841, "effective_metric_params_": [841, 842, 843, 845, 847, 849, 850, 851], "outputs_2d_": [841, 849, 1037], "nearest_neighbor_algorithm": [841, 849, 850], "n_index": [841, 842, 843, 845, 847, 849, 850], "neigh_dist": [841, 842, 843, 845, 847, 849, 850, 851], "neigh_ind": [841, 842, 843, 845, 847, 849, 850, 851], "nearest_neighbors_algorithm": [842, 847], "nearer": [843, 851, 990], "x_dist_graph": 843, "silverman": [844, 1042], "binarytre": [844, 1031, 1035, 1039], "bandwidth_": 844, "log_dens": 844, "52955942": 844, "51462041": 844, "60244657": 844, "logprob": 844, "negative_outlier_factor": 845, "9821": 845, "0370": 845, "3697": 845, "shifted_opposite_lof_scor": 845, "opposite_lof_scor": 845, "wminkowski": [846, 1039, 1041], "narasimhan": 846, "chu": [846, 1043], "shrunken": [846, 1027], "6567": 846, "6572": 846, "nbr": [847, 990], "neighborsclassifi": [847, 849, 850, 851, 1027], "n_features_a": 848, "n_features_b": 848, "goldberg": [848, 990], "neighbourhood": [848, 990], "ncanip": 848, "neighbourhood_components_analysi": 848, "961904": 848, "outlier_label": [849, 1037], "outlier_label_": 849, "33333333": [849, 997], "x_cluster": 851, "warn_when_not_sort": 854, "efficiencywarn": [854, 1042], "sml": [855, 992], "pcd": [855, 992], "sweep": 855, "gibb": [855, 992, 1006], "intercept_hidden_": 855, "intercept_visible_": 855, "h_samples_": 855, "osindero": [855, 992], "teh": [855, 992], "1527": 855, "1554": 855, "absp": 855, "fastnc": 855, "tieleman": [855, 992], "v_new": 855, "pseudo_likelihood": 855, "relu": [856, 857], "beta_1": [856, 857], "beta_2": [856, 857], "max_fun": [856, 857, 1037], "n_layer": [856, 857], "neuron": [856, 857, 985, 991], "tan": [856, 857, 991, 1034], "rectifi": [856, 857], "kingma": [856, 857, 991], "diederik": [856, 857, 991, 1042], "jimmi": [856, 857, 991, 1033, 1035], "effective_learning_r": [856, 857], "best_loss_": [856, 857, 1042], "best_validation_score_": [856, 857, 1042], "validation_scores_": [856, 857, 1042], "intercepts_": [856, 857, 991], "n_layers_": [856, 857], "out_activation_": [856, 857], "geoffrei": [856, 857, 991, 1038, 1039, 1040, 1041, 1043], "connectionist": [856, 857], "glorot": [856, 857], "xavier": [856, 857, 1035, 1036, 1037, 1039, 1040], "yoshua": [856, 857, 1000], "feedforward": [856, 857], "kaim": [856, 857], "delv": [856, 857], "imagenet": [856, 857], "log_y_prob": 856, "named_transform": [858, 1042], "svd__n_compon": 858, "transform_list": 858, "s__p": 859, "n_transformed_featur": 859, "y_log_proba": 859, "analyst": 862, "x_tr": [862, 868, 871, 872, 873, 877, 879, 882, 884, 885, 889, 890], "accept_spars": [863, 919, 920, 1034, 1044], "inv_kw_arg": 863, "pickleabl": [863, 1033], "6931": 863, "3862": 863, "n_bins_": 864, "regener": 864, "xinv": 864, "tild": [865, 995, 997], "k_fit_rows_": 865, "k_fit_all_": 865, "1299": [865, 997], "1319": [865, 997], "n_samples1": 865, "n_samples2": 865, "k_new": 865, "neg_label": [866, 883], "y_type_": 866, "sparse_input_": 866, "lb": [866, 998], "tokyo": [867, 998], "amsterdam": [867, 998], "max_abs_": 868, "x_std": [869, 885, 997], "data_min_": [869, 1032], "data_max_": [869, 1032], "data_range_": [869, 1032], "unwieldi": 870, "fi": 870, "comedi": 870, "y_indic": 870, "yt": 870, "ands": 870, "feature_name_combin": [872, 1043], "categories_": [872, 873, 880, 997, 1035, 1042], "unregular": [872, 895, 1019, 1036], "intact": [872, 1021], "infrequ": [872, 873, 880, 987, 1027, 1041, 1042, 1043], "infrequent_if_exist": [872, 997], "x_6": 872, "x_7": 872, "drop_idx_": [872, 1038, 1042], "drop_idx": 872, "gender_femal": 872, "gender_mal": 872, "group_1": 872, "group_2": 872, "group_3": 872, "drop_enc": [872, 997], "drop_binary_enc": 872, "custom_combin": 872, "custom_fnames_enc": 872, "x0_str_femal": 872, "x0_str_male": 872, "x1_int_1": 872, "x1_int_2": 872, "x1_int_3": 872, "oh": [872, 1037], "infrequent_sklearn": [872, 997], "n_encoded_featur": [872, 873], "_csr": 872, "onward": [873, 1031], "bpo": 873, "43475": 873, "lenient": [873, 1007, 1044], "min_degre": [874, 1040], "max_degre": [874, 1040], "powers_": 874, "n_output_features_": 874, "nystrom": [874, 1036, 1037], "hugh": [874, 1029, 1040], "featurewis": 875, "power_transform": [875, 888, 1035], "biometrika": [875, 887], "954": [875, 887], "959": [875, 887], "707": [875, 887], "ignore_implicit_zero": [876, 888], "landmark": [876, 888, 997], "n_quantiles_": 876, "quantiles_": [876, 997, 1037], "references_": 876, "with_cent": [877, 889], "with_scal": [877, 889], "unit_vari": [877, 889, 1039], "quartil": 877, "q_min": [877, 889], "q_max": [877, 889], "center_": 877, "robust_scal": [877, 888, 1035], "interquartile_rang": 877, "bspline": 878, "n_features_out_": 878, "with_std": [879, 890, 997, 1035], "n_samples_seen": 879, "5a": 879, "randal": [879, 1031, 1041], "242": [879, 1027], "mic": [880, 997], "target_mean_": [880, 997], "target_type_": 880, "f0_c0": 880, "f0_c1": 880, "f0_c2": 880, "f1_c0": 880, "f1_c1": 880, "f1_c2": 880, "micci": [880, 997], "barreca": [880, 997], "newsl": [880, 997], "enc_auto": 880, "enc_high_smooth": 880, "enc_low_smooth": 880, "type_of_target_": 880, "ahead": 883, "return_norm": [886, 1034], "compute_inverse_compon": [891, 892, 999], "inverse_components_": [891, 892, 999, 1041], "2759": [891, 892], "afor": [891, 892], "baserandomproject": [891, 892], "ping": [892, 999, 1033, 1034], "density_": 892, "gaussianrandomproject": [892, 999, 1028, 1041, 1043, 1044], "church": [892, 999], "kdd06_rp": 892, "cgi": 892, "uoa": 892, "gr": 892, "opta": 892, "0182": 892, "e2": [893, 983], "93lindenstrauss_lemma": 893, "sanjoi": [893, 999], "anupam": [893, 999, 1042], "gupta": [893, 999, 1034, 1035, 1038, 1039, 1040, 1041, 1043, 1044], "elementari": [893, 999], "11841": [893, 999], "1112658": [893, 999], "7894": [893, 999], "9868": [893, 999], "steadi": [894, 895], "xiaojin": 894, "zoubin": 894, "ghahramani": 894, "cmu": 894, "cald": 894, "carnegi": 894, "mellon": 894, "jerryzhu": 894, "label_prop_model": [894, 895], "clamp": [895, 1000], "dengyong": 895, "bousquet": 895, "navin": 895, "lal": 895, "schoelkopf": 895, "termination_condition_": 896, "no_chang": 896, "all_label": 896, "33rd": [896, 1000], "acl": [896, 1000, 1001], "stroudsburg": [896, 1000], "crammer_sing": [899, 988, 1002, 1027], "seldom": 899, "w_x_1": [899, 900], "w_x_n": [899, 900], "w_intercept": [899, 900], "readonli": [899, 900, 1040, 1042, 1043], "raw_coef_": [899, 900], "smo": [899, 900], "1693": 899, "unsur": 900, "582": 900, "522": 900, "class_weight_": [901, 904, 1042], "n_sv": [901, 902, 903, 904, 905, 1002, 1037], "fit_status_": [901, 902, 903, 904, 905], "n_support_": [901, 902, 903, 904, 905, 1002, 1037], "proba_": [901, 904, 1038], "probb_": [901, 904, 1038], "shape_fit_": [901, 902, 903, 904, 905], "n_dimensions_of_x": [901, 902, 903, 904, 905], "7798": 903, "0547": 903, "0556": 903, "0561": 903, "7332": 903, "unshift": 903, "impract": 904, "tube": [905, 1002], "0044": 906, "_tree": [907, 908, 909, 910, 1028, 1030], "decision_tree_learn": [907, 908, 1003], "olshen": [907, 908, 1003], "wadsworth": [907, 908, 1003], "belmont": [907, 908, 1003], "cutler": [907, 908], "cc_home": [907, 908], "htm": [907, 908], "ccp_path": [907, 908, 909, 910], "get_depth": [907, 908, 909, 910, 1036], "get_n_leav": [907, 908, 909, 910, 1036], "set_predict_proba_request": [907, 909], "extra_tre": [909, 910], "8947": 909, "decision_tre": [911, 912, 913, 1003], "out_fil": [911, 1003], "leaves_parallel": 911, "special_charact": [911, 1003], "fontnam": [911, 1040], "helvetica": [911, 913], "graphviz": [911, 1003], "postscript": 911, "tpng": 911, "paint": [911, 913], "dot_data": [911, 1003], "digraph": 911, "show_weight": 912, "feature_0": 912, "unrepresent": 914, "keyerror": [914, 1037], "popitem": 914, "lifo": 914, "min_val": [916, 923], "input_nam": [918, 920, 950, 1041], "accept_large_spars": [919, 920, 1035], "ensure_2d": [919, 920], "allow_nd": [919, 920], "ensure_min_sampl": [919, 920], "ensure_min_featur": [919, 920], "y_numer": 919, "bsr": [919, 920, 1040], "x_convert": 919, "y_convert": 919, "array_convert": 920, "x_check": 920, "0x": 922, "max_val": 923, "include_boundari": [923, 1041], "y_org": 924, "class_weight_vect": 924, "king": 924, "zen": 924, "sample_weight_vect": 925, "parenthes": 926, "type_filt": 928, "_bay": 928, "_weight_boost": 928, "_bag": 928, "generate_onli": [930, 1037], "checks_gener": 930, "test_check_estim": 931, "check_estimators_fit_returns_self": 931, "_estimator_html_repr": 932, "array_lik": 934, "logdet": 934, "slogdet": 934, "6375861597263857": 934, "flip_sign": 936, "svd_lapack_driv": 936, "gesdd": 936, "p5": 936, "transposit": 936, "gesvd": 936, "conquer": 936, "unitari": 936, "vh": 936, "dot_product": 937, "deweight": 938, "min_batch_s": 939, "n_pack": [939, 940], "path_length": 941, "sliceabl": 942, "3x1": 942, "methodmetadatarequest": 943, "routemappingpair": 944, "routing_info": 944, "from_str": [944, 945], "methodpair": 945, "_obj": 947, "_method": 947, "any_method": 947, "truthi": 948, "helloifeven": 948, "_x_is_even": 948, "say_hello": 948, "3565178": 952, "temp_fold": 953, "max_nbyt": 953, "1m": 953, "mmap_mod": 953, "dispatch_next": 953, "dispatch_one_batch": 953, "unprotect": 953, "prefetch": 953, "print_progress": 953, "inner_max_num_thread": 955, "backend_param": 955, "parallel_config": 955, "register_parallel_backend": [955, 1035], "dask": [955, 1007, 1035], "localclust": 955, "workload": [955, 1006], "register_rai": 955, "backend_nam": 955, "oversubscript": [955, 1041], "threadpool": 955, "effective_n_job": 955, "tracking_select": 956, "reservoir_sampl": 956, "reservoir": 956, "make_default": 957, "parallelbackendbas": 957, "resampled_arrai": 958, "3x2": [958, 961], "shuffled_arrai": 961, "last_mean": 962, "last_var": 962, "last_n": 962, "todens": [962, 963, 964, 965, 966, 967, 968], "return_sum_weight": 968, "sum_weight": 968, "1875": 968, "all_or_ani": [971, 1037], "is_fit": 971, "eg": 971, "substitut": [971, 1007, 1033], "caching_dir": 972, "raise_except": 973, "array_sym": 973, "symmetric_arrai": 973, "sparse_symmetric_arrai": 973, "3x3": 973, "is_paramet": 975, "enclos": 976, "set_stat": 976, "bergstra": [976, 1027, 1028], "tournament": 976, "dispos": [976, 1021], "n_resources_i": 976, "n_resources_0": 976, "n_candidates_i": 976, "n_candidates_0": 976, "r_0": 976, "n_resourc": 976, "983667": 976, "951958": 976, "947958": 976, "961009": 976, "955989": 976, "jamieson": 976, "talwalkar": 976, "desalvo": 976, "rostamizadeh": 976, "hyperband": 976, "bandit": 976, "multimetr": [976, 1037, 1042], "calibrated_forest": 976, "select__k": 976, "model__estimator__max_depth": 976, "imp": 977, "sophist": [977, 989], "14338": 977, "13286": 977, "15611": 977, "amelia": 977, "scientist": [977, 1011], "roderick": 977, "rubin": 977, "1986": [977, 1003], "ol2001": 977, "mask_missing_values_onli": 977, "mask_al": 977, "3_": 979, "2_": 979, "ws2001": 979, "unsampl": 979, "equiv": [979, 1002], "elucid": 979, "frac12": 979, "rr2007": 979, "2x_iy_i": 979, "vz2010": 979, "vvz2010": 979, "prod_i": 979, "ls2010": 979, "c_0": [979, 985], "tensorsketch": 979, "pp2013": 979, "wikic": 979, "ccf2002": 979, "mercer": 979, "langl": [979, 987, 1001, 1002], "rangl": [979, 987, 1001, 1002], "y_j": [979, 987, 989, 997, 1002], "obviat": 979, "dagm": 979, "vempati": 979, "jawahar": 979, "charikar": 979, "farach": 979, "colton": 979, "m2012": 980, "mu_k": 981, "cst": 981, "omega_": 981, "k0": 981, "h_l": 981, "extrema": 981, "honei": 981, "stork": 981, "dilemma": 982, "valid_scor": 982, "w_0": 983, "w_p": 983, "34545455": 983, "13636": [983, 1036], "rifkin": 983, "lippert": 983, "2n_": 983, "softw": 983, "kim": [983, 1035, 1036, 1037, 1041], "koh": [983, 1011], "lustig": 983, "boyd": 983, "gorinevski": 983, "c_p": 983, "cherkasski": 983, "yunqian": 983, "1691": 983, "1714": 983, "ell_2": 983, "equiangular": 983, "weisberg": 983, "ell_0": [983, 987], "_coef": 983, "mp": 983, "ell_": 983, "posteriori": [983, 989], "radford": 983, "neal": [983, 1040], "50000013": 983, "49999993": 983, "lambda_i": [983, 997], "srikantan": 983, "tristan": 983, "fletcher": [983, 1027, 1031], "nomenclatur": [983, 1033], "deliber": 983, "overparameter": 983, "ldot": [983, 987, 989, 991, 1001], "w_l": 983, "min_w": 983, "iverson": 983, "hood": [983, 1002], "broyden": 983, "goldfarb": 983, "shanno": 983, "shortcom": 983, "aaron": [983, 1030, 1031, 1032, 1037], "simon": [983, 1011, 1030, 1031, 1040, 1041, 1042, 1043], "93fletcher": 983, "93goldfarb": 983, "93shanno_algorithm": 983, "noah": 983, "multirespons": 983, "statsmodel": [983, 1006], "edm": 983, "agricultur": 983, "rainfal": 983, "paid": 983, "fraud": [983, 1011], "cash": 983, "fraudul": [983, 1011], "interrupt": 983, "drug": 983, "cure": 983, "entertain": 983, "mccullagh": 983, "nelder": 983, "boca": 983, "raton": 983, "chapman": 983, "hall": [983, 1034, 1038], "crc": 983, "31760": 983, "j\u00f8rgensen": [983, 1044], "monografia": 983, "matem\u00e1tica": 983, "2463": 983, "4337": 983, "7638": 983, "disappear": [983, 1027], "photogrammetr": 983, "hypothes": 983, "paradigm": 983, "cartographi": 983, "fischler": 983, "boll": 983, "sunglok": 983, "choi": 983, "taemin": 983, "wonpil": 983, "binom": 983, "infeas": [983, 990, 992], "k\u00e4rkk\u00e4inen": 983, "\u00e4yr\u00e4m\u00f6": 983, "h_": 983, "oarc": 983, "dae": 983, "bassett": 983, "jr": 983, "econometrica": 983, "econometr": 983, "portnoi": [983, 1044], "hare": 983, "tortois": 983, "paraboloid": 983, "w_3": 983, "w_4": 983, "w_5": 983, "z_1": 983, "z_2": 983, "z_3": 983, "z_4": 983, "z_5": 983, "streamlin": 983, "gotten": [983, 997], "necess": [984, 990], "strife": 984, "mother": 984, "baloo": 984, "song": 984, "jungl": 984, "rubric": 984, "defici": [984, 1001], "hlle": 984, "revolv": 984, "belkin": 984, "niyogi": 984, "1373": 984, "1396": 984, "molecul": 984, "jk": 984, "delta_": 984, "c_1": 984, "disentangl": 984, "legitim": 984, "die": 984, "noisier": 984, "5415": 984, "brief": 985, "num_featur": [985, 1042], "quantum": 985, "nutshel": 985, "36787944": 985, "89483932": 985, "58364548": 985, "51341712": 985, "83822343": 985, "7768366": 985, "facil": 986, "equi": 986, "agnost": [986, 995], "cue": 986, "came": 986, "quicker": 986, "unpract": 986, "analogi": [986, 987], "top_k_accuraci": 987, "top_k_accuracy_scor": [987, 1039, 1041], "neg_brier_scor": [987, 1037], "f1_micro": [987, 1031], "f1_weight": [987, 1031], "f1_sampl": 987, "neg_log_loss": 987, "roc_auc_ovr": [987, 1037], "roc_auc_ovo": [987, 1037], "roc_auc_ovr_weight": [987, 1037], "roc_auc_ovo_weight": [987, 1037], "explained_variance_scor": [987, 1030, 1034, 1041], "max_error": [987, 1036], "neg_mean_squared_log_error": 987, "mean_squared_log_error": [987, 1034, 1040, 1044], "neg_root_mean_squared_log_error": 987, "neg_median_absolute_error": 987, "neg_mean_poisson_devi": 987, "neg_mean_gamma_devi": 987, "mean_gamma_devi": [987, 1037], "d2_pinball_scor": [987, 1041], "d2_tweedie_scor": [987, 1040], "invalidparametererror": 987, "_error": 987, "my_custom_loss_func": 987, "693": 987, "protocol": [987, 1030, 1043, 1044], "custom_scoring_funct": 987, "custom_scorer_modul": 987, "confusion_matrix_scor": 987, "test_tp": 987, "test_fn": 987, "untru": 987, "dividend": 987, "divisor": 987, "quotient": 987, "texttt": 987, "_class": 987, "youden": 987, "informed": 987, "mosley2013": 987, "kelleher2015": 987, "guyon2015": 987, "urbanowicz2015": 987, "escalant": 987, "escalera": 987, "maci\u00e0": [987, 1040, 1042], "saeed": 987, "statnikov": 987, "viega": 987, "chalearn": 987, "automl": [987, 1006], "ijcnn": 987, "moslei": 987, "ijcv": 987, "urbanowicz": 987, "exstrac": 987, "evol": 987, "intel": [987, 1006], "cohen_kappa_scor": [987, 1032, 1034], "4285714285714286": 987, "manning2008": 987, "everingham2010": 987, "davis2006": 987, "flach2015": 987, "everingham": 987, "gool": 987, "winn": 987, "pascal": 987, "voc": 987, "goadrich": 987, "y_l": 987, "_l": 987, "emptyset": 987, "f_beta": 987, "ne": [987, 990], "1738": 987, "matthews_corrcoef": [987, 1027, 1033, 1034, 1041], "t_k": [987, 1003], "ik": 987, "ki": 987, "kk": 987, "auroc": 987, "ht2001": 987, "fc2009": 987, "pd2000": 987, "f2006": 987, "f2001": 987, "inner_clf": 987, "c\u00e8sar": 987, "hernandez": 987, "orallo": 987, "modroiu": 987, "wikipediadet2017": 987, "martin1997": 987, "navratil2007": 987, "consult": 987, "encyclopedia": 987, "utc": 987, "php": [987, 1006], "detection_error_tradeoff": 987, "oldid": 987, "798982054": 987, "doddington": 987, "kamm": 987, "ordowski": 987, "przybocki": 987, "navractil": 987, "klusacek": 987, "acoust": 987, "icassp": 987, "honolulu": 987, "232": 987, "brier1950": 987, "p_i": [987, 990], "bella2012": 987, "flach2008": 987, "bella": 987, "hern\u00e1ndez": 987, "ram\u00edrez": 987, "quintana": 987, "khosrow": 987, "pour": 987, "hershei": 987, "edson": [987, 1032], "matsubara": 987, "dagstuhl": 987, "seminar": 987, "schloss": 987, "leibniz": 987, "zentrum": 987, "lr_": 987, "brenner": 987, "gefel": 987, "coverage_error": [987, 1031, 1041], "label_ranking_average_precision_scor": [987, 1031, 1035, 1036, 1042], "label_ranking_loss": [987, 1032], "grade": 987, "unalt": 987, "epsilon_i": 987, "908": 987, "925": [987, 1016], "7083": 987, "rsme": 987, "log_": 987, "growth": [987, 1032, 1033], "commod": 987, "mapd": 987, "2e6": 987, "2666": 987, "y_n": [987, 991, 1001], "elicit": 987, "2500": 987, "mean_pinball_loss_95p": 987, "skill": 987, "mcfadden": 987, "d2_tweedie_score_15": 987, "d2_pinball_score_08": 987, "heteroschedast": 987, "homoschedast": 987, "pear": 988, "y_dens": 988, "y_spars": 988, "advoc": 988, "elabor": 988, "financ": 988, "f3": 988, "y3": 988, "multi_target_forest": 988, "75474165": 988, "147": 988, "03498585": 988, "03812219": 988, "12165031": 988, "12914884": 988, "46081961": 988, "8948621": 988, "44373091": 988, "88978285": 988, "62745778": 988, "02891072": 988, "48204257": 988, "03260883": 988, "165": 988, "34867495": 988, "52003279": 988, "92529176": 988, "25719016": 988, "84253": 988, "25193977": 988, "16443186": 988, "12274212": 988, "170388": 988, "80956739": 988, "16979946": 988, "72667194": 988, "50941682": 988, "50447799": 988, "149": [988, 1027], "37967282": 988, "15699552": 988, "72850319": 988, "prod_": 989, "downarrow": 989, "spite": 989, "famous": 989, "serious": 989, "flair": 989, "2_y": 989, "mu_i": 989, "sigma_i": [989, 997], "theta_i": 989, "cnb": 989, "mnb": 989, "inventor": 989, "alpha_i": [989, 1002], "cj": [989, 1030, 1031, 1032, 1033, 1034], "summat": [989, 991], "min_c": 989, "t_i": 989, "poorest": 989, "n_i": [989, 997], "satellit": 990, "kdt": 990, "farawai": 990, "invent": 990, "orthotrop": 990, "bentlei": 990, "1975": 990, "omohundro": 990, "characteris": 990, "unaffect": 990, "amort": 990, "cache_path": 990, "gettempdir": 990, "unsort": [990, 1028, 1031, 1035], "5807": 990, "nca_pip": 990, "96190476": 990, "limits_": 990, "lx": 990, "x_m": 991, "leftmost": 991, "w_1x_1": 991, "w_2x_2": 991, "w_mx_m": 991, "backpropag": 991, "b_1": 991, "b_2": 991, "z_l": 991, "dfrac": [991, 997], "nabla": 991, "deduct": 991, "rumelhart": 991, "jiquan": 991, "ngiam": 991, "chuan": 991, "yifan": 991, "carolin": 991, "suen": 991, "backprop": [991, 1001], "lecun": [991, 1001], "orr": [991, 1001], "strai": 992, "v_ih_j": 992, "b_iv_i": 992, "c_jh_j": 992, "h_j": 992, "v_i": 992, "b_i": 992, "sum_h": 992, "fantasi": 992, "particl": 992, "thoroughli": 992, "hereund": 993, "1443": 993, "1471": 993, "outlying": 993, "h2009": 994, "g2015": 994, "absurd": 994, "m2019": 994, "bike": 994, "mc_clf": 994, "624": 994, "overlaid": 994, "obscur": [994, 1043], "cice": [994, 1041], "pd_": 994, "dx_c": 994, "footnot": [994, 1006], "opaqu": 995, "categr": 995, "probe": 995, "048": 995, "033": 995, "r_multi": 995, "1013": 995, "866": 995, "726": 995, "298": 995, "277": [995, 1029], "i_j": 995, "min_max_scal": 997, "x_train_minmax": 997, "x_test_minmax": 997, "max_abs_scal": 997, "x_train_maxab": 997, "x_test_maxab": 997, "unintention": 997, "semidefinit": [997, 1002], "scholkopf1998": 997, "1_": 997, "x_train_tran": 997, "x_test_tran": 997, "8pt": 997, "x_normal": 997, "firefox": 997, "chrome": 997, "safari": 997, "africa": 997, "dragon": 997, "lexicon": 997, "par": 997, "tau": 997, "iy_j": 997, "l_i": 997, "pargent": 997, "pfister": 997, "2671": 997, "2692": 997, "infant": 997, "kid": 997, "teen": 997, "senior": [997, 1011], "citizen": 997, "retbin": 997, "x_1x_2": 997, "x_1x_3": 997, "x_2x_3": 997, "x_1x_2x_3": 997, "rung": 997, "eiler": 997, "marx": 997, "perperogl": 997, "sauerbrei": 997, "abrahamowicz": 997, "bmc": 997, "methodol": 997, "38629436": 997, "sixteenth": 999, "uai": 999, "craig": [999, 1030, 1035], "boutili": 999, "mois\u00e9": 999, "goldszmidt": 999, "morgan": [999, 1003], "kaufmann": [999, 1003, 1039], "ella": 999, "bingham": 999, "heikki": 999, "mannila": 999, "245": [999, 1029], "explic": 999, "3947": 999, "671": 999, "687": 999, "kenneth": [999, 1027, 1028, 1033, 1034, 1041, 1042], "12th": 999, "296": 999, "x_new_invers": 999, "x_new_again": 999, "delalleau": 1000, "216": 1000, "aistat": 1000, "gatsbi": 1000, "ucl": 1000, "uk": [1000, 1021], "fullpap": 1000, "xi_i": 1001, "slack": 1001, "t_0": 1001, "l\u00e9on": [1001, 1041, 1042, 1043], "_init_t": 1001, "basesgd": 1001, "eta_0": 1001, "_t": 1001, "svmsgd": 1001, "pegaso": 1001, "srebro": 1001, "tsuruoka": 1001, "tsujii": 1001, "ananiad": 1001, "afnlp": 1001, "lin_clf": 1002, "grasp": [1002, 1007], "sv": 1002, "builtin": 1002, "qp": 1002, "linear_svc": 1002, "gram_train": 1002, "gram_test": 1002, "zeta": 1002, "zeta_i": 1002, "textrm": [1002, 1019], "q_": 1002, "reparameter": 1002, "wu": [1002, 1031, 1039], "weng": 1002, "1005": 1002, "rong": 1002, "aug": 1002, "1871": 1002, "1874": 1002, "ofmulticlass": 1002, "fitter": 1003, "pariti": 1003, "multiplex": 1003, "export_graphviz": [1003, 1032, 1034, 1040, 1042, 1043], "export_text": [1003, 1036, 1043], "dumont": 1003, "subwindow": 1003, "dichotomis": 1003, "quinlan": 1003, "multiwai": 1003, "proprietari": 1003, "ruleset": 1003, "q_m": 1003, "n_m": 1003, "t_m": 1003, "setminu": 1003, "mk": 1003, "_m": 1003, "ge0": 1003, "widetild": 1003, "tradition": 1003, "t_t": 1003, "eff": 1003, "predictive_analyt": 1003, "foot": 1005, "gear": 1005, "neuroimag": [1005, 1011], "astronom": 1005, "pycon": 1005, "thirti": 1005, "nyc": [1005, 1011], "sister": 1006, "sklearn_panda": 1006, "sklearn_xarrai": 1006, "xarrai": 1006, "autoviml": 1006, "tpot": 1006, "featuretool": 1006, "neuraxl": 1006, "neat": [1006, 1027], "checkpoint": 1006, "funki": 1006, "saver": 1006, "evalml": 1006, "mlflow": 1006, "lifecycl": [1006, 1007], "neptun": 1006, "mlop": 1006, "sacr": 1006, "dtreeviz": 1006, "eli5": 1006, "yellowbrick": 1006, "deap": 1006, "evolutionari": 1006, "interchang": [1006, 1044], "skop": [1006, 1023], "jpmml": 1006, "porter": 1006, "transpil": 1006, "javascript": 1006, "m2cgen": 1006, "dart": 1006, "haskel": 1006, "rust": 1006, "treelit": 1006, "micromlgen": 1006, "microml": 1006, "microcontrol": 1006, "emlearn": 1006, "c99": 1006, "arima": 1006, "skforecast": 1006, "tslearn": 1006, "hmmlearn": 1006, "pomegran": 1006, "crfsuit": 1006, "skorch": 1006, "scikera": 1006, "scikit_learn": 1006, "feder": 1006, "privaci": 1006, "homomorph": 1006, "encrypt": 1006, "mlxtend": 1006, "lego": 1006, "subsembl": 1006, "lightn": 1006, "sdca": 1006, "adagrad": 1006, "svrg": 1006, "gplearn": 1006, "genet": 1006, "multilearn": 1006, "seglearn": 1006, "fastfm": 1006, "kmode": 1006, "sphereclust": 1006, "mise": 1006, "giotto": 1006, "tda": 1006, "pymc": 1006, "censor": 1006, "lightfm": 1006, "openrec": 1006, "gensim": 1006, "nilearn": 1006, "neuro": 1006, "astroml": 1006, "astronomi": 1006, "dissemin": 1006, "chines": 1006, "persian": 1006, "spanish": 1006, "korean": 1006, "disclaim": 1006, "promis": 1007, "eleven": 1007, "incept": 1007, "scala": 1007, "reinforc": 1007, "era": 1007, "7242": 1007, "12147": 1007, "5523": 1007, "10733": 1007, "13902": [1007, 1037], "12800": 1007, "12866": 1007, "15550": 1007, "5853": 1007, "11805": 1007, "15319": 1007, "11977": 1007, "12852": [1007, 1037], "13911": [1007, 1037], "amput": 1007, "6284": 1007, "beginn": 1007, "priorit": [1007, 1034], "4497": 1007, "7646": 1007, "6425": 1007, "6424": 1007, "8480": 1007, "6231": 1007, "8100": 1007, "6599": 1007, "6715": 1007, "14582": 1007, "3855": 1007, "13227": 1007, "6323": 1007, "14180": [1007, 1038], "9173": 1007, "13146": [1007, 1037], "8614": 1007, "7608": 1007, "5082": 1007, "8243": 1007, "searchgrid": 1007, "6929": 1007, "__array_function__": [1007, 1037], "etl": [1007, 1011], "8370": 1007, "6451": 1007, "8157": 1007, "7382": 1007, "drift": 1007, "11047": [1007, 1037], "9326": 1007, "slep011": 1007, "1626": 1007, "10463": 1007, "470": 1008, "id3": [1009, 1023], "cart": [1009, 1023], "printabl": 1010, "indispens": 1011, "stephen": [1011, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1040], "simmon": 1011, "vp": 1011, "athena": 1011, "music": 1011, "bernhardsson": 1011, "pariet": [1011, 1027], "lear": 1011, "visag": 1011, "fantast": 1011, "startup": 1011, "bitli": 1011, "chartbeat": 1011, "digg": [1011, 1034], "poncho": 1011, "gilad": 1011, "lotan": 1011, "chief": 1011, "chat": 1011, "bread": 1011, "butter": 1011, "chaumond": [1011, 1035], "offic": 1011, "ayzenshtat": [1011, 1035], "undergrad": 1011, "professor": 1011, "hotel": 1011, "destin": 1011, "agent": 1011, "melani": [1011, 1034, 1035], "awesom": 1011, "stuff": 1011, "randomizedpca": [1011, 1027, 1029, 1030, 1032, 1033, 1034], "boston": 1011, "mdbecker": 1011, "pydata_2013": 1011, "thorough": 1011, "notch": 1011, "production": 1011, "greg": [1011, 1033, 1034, 1036, 1037], "lamp": 1011, "founder": 1011, "prototyp": 1011, "jurgen": 1011, "director": 1011, "commerc": 1011, "inventori": 1011, "bertin": 1011, "mahieux": 1011, "invalu": 1011, "vijai": [1011, 1030], "surrog": 1011, "traine": 1011, "impress": 1011, "traffic": 1011, "tenur": 1011, "matchmak": 1011, "weitzenfeld": 1011, "tweet": 1011, "ferenc": 1011, "huszar": 1011, "shop": 1011, "ourselv": 1011, "jeremi": [1011, 1032, 1033, 1034, 1035, 1038, 1039], "achin": 1011, "ceo": 1011, "marketplac": 1011, "frid": [1011, 1030], "radar": 1011, "partnership": 1011, "lebourgeoi": 1011, "charron": [1011, 1030, 1031, 1038, 1039, 1040], "cornerston": 1011, "sheep": 1011, "featureforg": 1011, "rafael": [1011, 1028, 1029, 1031, 1034], "carrascosa": [1011, 1031], "law": 1011, "semiconductor": 1011, "fab": [1011, 1037, 1038], "bleed": 1011, "smartphon": 1011, "automobil": 1011, "trent": [1011, 1033], "mcconaghi": 1011, "rapid": 1011, "immens": 1011, "thorsten": 1011, "kranz": 1011, "coma": 1011, "dss": 1011, "douetteau": 1011, "b2c": 1011, "retail": 1011, "palladium": 1011, "rammig": [1011, 1033], "peer": 1011, "lend": 1011, "billion": 1011, "gbp": 1011, "grate": 1011, "vlasio": [1011, 1034], "vasilei": [1011, 1034], "petfood": 1011, "cocoa": 1011, "worldwid": 1011, "toolset": 1011, "equip": 1011, "fitzk": 1011, "sr": 1011, "fondat": 1011, "s\u00e9bastien": [1011, 1033, 1035], "conort": 1011, "salmon": 1012, "nine": 1012, "sentiment": 1013, "cli": 1013, "doctest_mod": 1013, "hardest": 1014, "tightli": 1015, "knit": 1015, "x_fold": 1016, "array_split": 1016, "y_fold": 1016, "934": 1016, "train_indic": 1016, "test_indic": 1016, "963": 1016, "922": 1016, "930": 1016, "96388889": 1016, "92222222": 1016, "9637883": 1016, "93036212": 1016, "96578289": 1016, "92708922": 1016, "96681476": 1016, "96362897": 1016, "93192644": 1016, "0077": 1016, "943": 1016, "00375": 1016, "lfw_": 1017, "_lfw": 1017, "gerhard_schroed": 1017, "donald_rumsfeld": 1017, "tony_blair": 1017, "colin_powel": 1017, "george_w_bush": 1017, "282": [1017, 1027], "estimated_param_": 1018, "iris_x": 1019, "iris_i": 1019, "iris_x_train": 1019, "iris_y_train": 1019, "iris_x_test": 1019, "iris_y_test": 1019, "pave": 1019, "paltri": 1019, "exabyt": 1019, "30349955": 1019, "63931533": 1019, "53060544": 1019, "73698041": 1019, "13170937": 1019, "81458798": 1019, "84845219": 1019, "60648906": 1019, "51961675": 1019, "09517222": 1019, "5854": 1019, "5855": 1019, "occam": 1019, "razor": 1019, "best_alpha": [1019, 1027], "025118864315095794": 1019, "313": 1019, "508": 1019, "knew": 1020, "taxonomist": 1020, "face_compress": 1020, "x_approx": 1020, "images_approx": 1020, "zlabel": 1020, "18565811e": 1020, "19346747e": 1020, "43026679e": 1020, "text_analyt": 1021, "skeleton": [1021, 1030], "sklearn_tut_workspac": 1021, "cp": 1021, "work_directori": 1021, "tutorial_hom": 1021, "fetch_data": 1021, "lang": 1021, "newsweed": 1021, "netnew": 1021, "bydat": 1021, "twenty_train": 1021, "holder": 1021, "2257": 1021, "sd345": 1021, "collier": 1021, "laserjet": 1021, "iii": [1021, 1041], "hampton": 1021, "4gb": 1021, "count_vect": 1021, "x_train_count": 1021, "35788": 1021, "4690": 1021, "downscal": 1021, "tf_transform": 1021, "x_train_tf": 1021, "tfidf_transform": 1021, "x_train_tfidf": 1021, "na\u00efv": 1021, "docs_new": 1021, "love": 1021, "opengl": 1021, "x_new_count": 1021, "x_new_tfidf": 1021, "text_clf": 1021, "twenty_test": 1021, "docs_test": 1021, "8348": 1021, "9101": [1021, 1035], "1502": 1021, "380": 1021, "tfidf__use_idf": 1021, "searcher": 1021, "eight": 1021, "gs_clf": 1021, "workspac": 1021, "fear": 1021, "fire": 1021, "exercise_xx_script": 1021, "arg1": 1021, "arg2": 1021, "arg3": 1021, "mortem": 1021, "exercise_01_language_train_model": 1021, "exercise_02_senti": 1021, "movie_review": 1021, "txt_sentoken": 1021, "cpickl": 1021, "subtleti": 1023, "subscrib": 1025, "post1": 1025, "64bit": 1027, "gzip": 1027, "bzip2": 1027, "decompress": 1027, "auc_scor": [1027, 1029], "kernc": [1027, 1041, 1042], "led": 1027, "probabilisticpca": [1027, 1030], "hmm": [1027, 1028, 1029, 1030, 1032], "gaussianhmm": 1027, "multinomialhmm": 1027, "n_gram_rang": 1027, "267": 1027, "alexi": [1027, 1030, 1031, 1034, 1044], "mignon": [1027, 1030, 1031, 1034], "subhodeep": [1027, 1028, 1029], "moitra": [1027, 1028, 1029], "yannick": [1027, 1029], "schwartz": [1027, 1029, 1041], "duckworth": 1027, "benediktsson": [1027, 1028, 1029], "marko": [1027, 1036, 1037, 1043], "burjek": 1027, "pinto": 1027, "abraham": [1027, 1028, 1033, 1037], "hoenig": 1027, "flyingimmidev": 1027, "francoi": [1027, 1040], "savard": 1027, "hann": 1027, "schulz": 1027, "welind": 1027, "companioni": 1027, "brandyn": 1027, "bussonni": [1027, 1039], "matthia": [1027, 1029, 1030, 1033, 1034, 1035, 1039, 1042], "pierr": [1027, 1035, 1036, 1038, 1040, 1042, 1044, 1045], "astolfi": 1027, "huiginn": 1027, "goodman": [1027, 1032], "ludwig": 1027, "schwardt": 1027, "hervieu": 1027, "sergio": [1027, 1029, 1030, 1039, 1042], "medina": [1027, 1029], "sheerman": 1027, "buguen": 1027, "seq_dataset": [1027, 1037], "weight_vector": [1027, 1037], "reuben": 1027, "costin": 1027, "_basehmm": 1027, "neighborsregressor": 1027, "gone": [1027, 1028], "vbgmm": [1027, 1031, 1033], "_pvalu": 1027, "charset": [1027, 1029], "test_fract": 1027, "train_fract": 1027, "239": 1027, "198": 1027, "marek": [1027, 1044], "fcostin": 1027, "adrien": 1027, "gaidon": 1027, "joona": 1027, "sillanp\u00e4\u00e4": 1027, "mccarthi": [1027, 1035], "roi": [1027, 1041], "hyunjin": 1027, "ibay": 1027, "scheidegg": 1027, "clair": 1027, "revillet": 1027, "conrad": [1027, 1028, 1042], "meng": [1027, 1028, 1031, 1033, 1034], "xinfan": [1027, 1028, 1031], "udi": 1027, "weinsberg": 1027, "janso": 1027, "palafox": 1027, "overwrite_": 1027, "copy_": 1027, "buffer_mb": 1027, "sparse_encode_parallel": 1027, "accident": [1027, 1031, 1036], "basedictionarylearn": 1027, "sparsecodingmixin": 1027, "fast_svd": 1027, "arnold": [1027, 1028], "bala": [1027, 1030], "subrahmanyam": [1027, 1030], "varanasi": [1027, 1030], "draxu": 1027, "eickenberg": [1027, 1029, 1030, 1031, 1032], "bogdan": 1027, "trach": 1027, "f\u00e9lix": [1027, 1029, 1030, 1031, 1035], "antoin": [1027, 1029, 1030, 1031, 1034], "fortin": [1027, 1029, 1030, 1031], "manuel": [1027, 1031, 1035, 1036, 1039, 1040], "caicedo": 1027, "carvaj": 1027, "tiziano": 1027, "zito": [1027, 1040], "jean": [1027, 1030, 1031, 1032, 1033, 1034, 1040], "kossaifi": [1027, 1031, 1032], "thumbnail": 1027, "mldata": [1027, 1035], "pietro": [1027, 1030, 1044], "berk": 1027, "macosx": 1027, "xarg": 1027, "bscikit": 1027, "cross_val": 1027, "bcross_val": 1027, "lurk": 1027, "l1_distanc": 1027, "sum_over_featur": [1027, 1042], "andi": [1027, 1034], "amit": [1027, 1041, 1042], "salvator": [1027, 1041, 1042, 1044], "masecchia": 1027, "schut": 1027, "metaireau": [1027, 1030], "bryan": [1027, 1030, 1036, 1037, 1040], "silverthorn": 1027, "minwoo": 1027, "luca": [1027, 1037, 1038, 1039, 1040], "wiman": 1027, "schl\u00fcter": [1027, 1035], "malet": 1027, "miott": [1027, 1030], "feth": 1027, "arezki": 1027, "yamin": 1027, "notes_neighbor": 1027, "netbsd": 1027, "kamel": 1027, "ibn": 1027, "hassen": 1027, "derouich": 1027, "virgilefritsch": 1027, "example_gaussian_process_plot_gp_regress": 1027, "example_gaussian_process_plot_gp_probabilistic_classification_after_regress": 1027, "tast": 1027, "10x": 1027, "200x": 1027, "ann": [1027, 1039, 1041], "laur": 1027, "fouqu": 1027, "ronan": [1027, 1030, 1035], "amicel": [1027, 1030], "osendorf": [1027, 1028], "gmmhmm": [1027, 1028], "latex": 1027, "mlcomp": 1027, "sphx_glr_auto_examples_mlcomp_sparse_document_classif": 1027, "pybrain": 1027, "rokem": [1027, 1033], "100x": [1027, 1030, 1044], "obsolet": [1027, 1043], "attrselect": 1027, "unmaintain": 1027, "lite": 1027, "filo": [1027, 1030], "mailhot": 1027, "huard": 1027, "dave": [1027, 1034, 1035, 1041, 1043], "morril": 1027, "schofield": 1027, "travi": [1027, 1035], "oliph": 1027, "pearu": 1027, "peterson": [1027, 1029], "0d": 1028, "marchman": [1028, 1029], "hrishikesh": [1028, 1029], "huilgolkar": [1028, 1029], "bastiaan": [1028, 1029], "diego": [1028, 1029], "molla": [1028, 1029], "cunha": [1028, 1029], "almeida": [1028, 1029, 1040], "rolando": [1028, 1029], "espinoza": [1028, 1029], "fuent": [1028, 1029], "beauchamp": [1028, 1031], "longstand": [1028, 1034], "shaun": 1028, "jackman": 1028, "winterman": 1028, "seberg": 1028, "n_atom": 1028, "label_propag": 1028, "learn_rat": 1028, "basegradientboost": 1028, "mean_square_error": 1028, "gmm_": 1028, "eig_tol": 1028, "chunk_siz": 1028, "zero_one_scor": 1028, "aymer": 1028, "masurel": 1028, "syhw": [1028, 1029], "corei": [1028, 1035, 1036], "lynch": [1028, 1034], "shu": [1028, 1031, 1035], "tadej": [1028, 1029], "jane\u017e": [1028, 1029], "caje": 1028, "tiago": [1028, 1032], "nune": 1028, "cow": 1028, "anz": 1028, "jauvin": 1028, "jacqu": [1028, 1030], "kvam": [1028, 1030], "doug": [1028, 1029, 1039], "coleman": [1028, 1029], "dickerson": 1028, "approximateident": 1028, "veronda": 1028, "matti": [1028, 1031, 1032], "lyra": [1028, 1031, 1032], "mikhail": [1028, 1029, 1030, 1033, 1034, 1042, 1043], "korobov": [1028, 1029, 1030, 1033, 1034], "alejandro": [1028, 1033, 1044], "weinstein": 1028, "deil": [1028, 1038, 1039], "nizhibitski": 1028, "coelho": [1028, 1030, 1031, 1035], "miroslav": [1028, 1029, 1032], "batchkarov": [1028, 1032], "pavel": [1028, 1036], "bob": [1028, 1034], "dengemann": 1028, "emanuel": 1028, "x006": 1028, "justin": [1029, 1035, 1039], "stochastic_gradi": [1029, 1030, 1036], "crombach": 1029, "sheet": 1029, "jaccard_similarity_scor": [1029, 1031, 1036], "jochen": 1029, "wersd\u00f6rfer": 1029, "sinayev": 1029, "unpleas": 1029, "novic": 1029, "tini": [1029, 1042, 1045], "hyperlink": 1029, "luessi": 1029, "philipp": [1029, 1030, 1033, 1042], "gervai": [1029, 1030], "cleverless": 1029, "nosetest": 1029, "compute_import": 1029, "return_model": [1029, 1031], "itergrid": 1029, "tacitli": 1029, "charset_error": 1029, "precompute_gram": 1029, "2224": 1029, "jim": 1029, "holmstr\u00f6m": 1029, "steven": [1029, 1030, 1032, 1034, 1035, 1040, 1042, 1043], "gryze": [1029, 1032], "sergeyf": 1029, "ben": [1029, 1030, 1031, 1034, 1035, 1036, 1039, 1044], "speer": 1029, "federico": [1029, 1030, 1035, 1036, 1041], "vaggi": [1029, 1030], "raul": [1029, 1030], "garreta": [1029, 1030], "gei": 1029, "flaxman": [1029, 1031], "denton": 1029, "cockburn": 1029, "dougal": [1029, 1031, 1032, 1034, 1035, 1036, 1037], "sutherland": [1029, 1031, 1032, 1034, 1035, 1036, 1037], "ian": [1029, 1031, 1036, 1037, 1039, 1042, 1043], "ozsvald": 1029, "johann": [1029, 1030, 1035, 1037, 1038, 1041], "sch\u00f6nberger": [1029, 1030], "szabo": [1029, 1030], "roland": [1029, 1030], "imran": [1029, 1030, 1031], "haqu": [1029, 1030, 1031], "karayev": 1029, "jamestwebb": [1029, 1030], "abhijeet": 1029, "kolh": 1029, "velkov": 1029, "fazlul": 1029, "shahriar": 1029, "felix": [1029, 1034, 1035, 1037, 1039, 1040, 1041], "brockherd": 1029, "harikrishnan": 1029, "jack": [1029, 1032, 1040, 1041, 1042, 1043], "hale": [1029, 1041], "jakemick": 1029, "mcdermott": [1029, 1044], "zwinck": 1029, "vredevoogd": [1029, 1030], "pati": 1029, "ekman": [1029, 1033], "shubernetskii": 1029, "naoki": [1029, 1039], "orii": 1029, "seamu": 1029, "absher": 1029, "feldman": [1029, 1034, 1035, 1036, 1037], "stefano": 1029, "lattarini": 1029, "steve": [1029, 1031, 1035, 1040, 1042], "koch": [1029, 1035, 1036, 1038, 1039], "sturla": 1029, "molden": 1029, "jarosch": 1029, "nikolai": [1030, 1031, 1032, 1033, 1035, 1036, 1041, 1043], "mayorov": [1030, 1031, 1032, 1033], "msvc": 1030, "mingw": 1030, "resourcewarn": 1030, "calvin": [1030, 1031], "gile": [1030, 1031], "billing": [1030, 1031, 1032], "safe_realloc": 1030, "bradshaw": [1030, 1031, 1034], "pico": [1030, 1031], "restor": [1030, 1035, 1036, 1037, 1038, 1042], "raff": 1030, "__array__": [1030, 1037], "jeffrei": [1030, 1033], "blackburn": [1030, 1033], "danni": [1030, 1031, 1032], "sullivan": [1030, 1031, 1032], "wignal": [1030, 1031, 1037, 1038], "grid_tograph": 1030, "gracefulli": [1030, 1031], "novak": 1030, "tulloch": [1030, 1031], "wardagglomer": 1030, "wardclust": 1030, "mean_l1_ratio": 1030, "phlypo": 1030, "148": 1030, "bommarito": [1030, 1031], "brook": [1030, 1031, 1039], "osborn": [1030, 1031], "eltermann": 1030, "bwignal": 1030, "ankit": [1030, 1037, 1039, 1041], "agraw": [1030, 1035, 1041, 1042], "carei": [1030, 1031, 1032, 1033, 1034], "ugurthemast": [1030, 1031], "schumach": [1030, 1031, 1032], "baptist": [1030, 1038], "lagard": 1030, "rajat": [1030, 1037], "khanduja": 1030, "pascual": 1030, "ignacio": 1030, "rossi": 1030, "s\u00e4ger": [1030, 1033], "ilambharathi": [1030, 1031], "kanniah": [1030, 1031], "sdenton4": 1030, "alyssa": [1030, 1034], "amo": 1030, "waterland": 1030, "murad": 1030, "maud": 1030, "karol": 1030, "pysniak": 1030, "cgohlk": [1030, 1031], "jacobsen": 1030, "collin": 1030, "kaushik94": 1030, "erwin": 1030, "marsi": 1030, "csytraci": 1030, "lk": 1030, "laurent": [1030, 1031, 1034, 1035, 1042, 1043], "direr": [1030, 1031, 1034, 1035], "shilt": 1030, "yoshiki": [1030, 1033], "v\u00e1zquez": 1030, "yung": [1030, 1033], "siang": 1030, "liau": 1030, "abhishek": [1030, 1031, 1037, 1041, 1043, 1044], "thakur": [1030, 1031], "rohit": [1030, 1031, 1035, 1036], "sivaprasad": [1030, 1031], "amormachin": 1030, "oscar": [1030, 1034], "carlsson": 1030, "nanta": 1030, "nardelli": 1030, "jess010": 1030, "kowalski87": 1030, "clegg": 1030, "ralf": [1030, 1033, 1034, 1042, 1043], "gommer": [1030, 1033, 1034, 1042, 1043], "rupesh": 1030, "srivastava": [1030, 1042], "ryan": [1030, 1033, 1035, 1036], "skipper": [1030, 1032, 1033], "seabold": [1030, 1032, 1033], "stefan": [1030, 1031, 1035, 1037], "walt": [1030, 1031, 1035], "riddel": [1030, 1032, 1034], "valentin": [1030, 1032, 1042, 1043], "haenel": 1030, "myer": [1030, 1034], "yoni": 1030, "meshulam": 1030, "yuri": [1030, 1032], "zaytsev": 1030, "adrinjalali": [1030, 1039], "ai8rahim": 1030, "alemagnani": 1030, "chalmerlow": 1030, "dziki": 1030, "dro\u017cd\u017c": 1030, "matrixorz": 1030, "popo": 1030, "samuela": 1030, "boulogn": 1030, "ethan": [1030, 1033], "guilherm": 1030, "trein": 1030, "heuer": 1030, "ivicajov": 1030, "rouli": 1030, "eduardo": [1030, 1032, 1040, 1041], "ari\u00f1o": 1030, "rubia": 1030, "jell": 1030, "zijlstra": 1030, "eddi": [1030, 1044], "jansson": [1030, 1042], "ca\u00f1ardo": 1030, "alastuei": 1030, "joseph": [1030, 1031, 1032, 1033, 1039, 1041, 1042], "perla": 1030, "ricardo": [1030, 1040, 1041, 1044], "kenta": 1030, "sato": 1030, "medri": 1030, "luce": 1030, "pierron": 1030, "danielweitzenfeld": 1030, "thompson": [1030, 1042, 1043], "brett": [1030, 1032, 1033, 1034, 1035, 1042], "feurer": [1030, 1035], "earl": 1030, "hank": 1030, "orr\u00f9": 1030, "lunt": 1030, "kearn": 1030, "pawe\u0142": [1030, 1034, 1039, 1040], "mandera": 1030, "zambelli": 1030, "staubda": 1030, "dedupl": 1031, "heilman": [1031, 1032], "precompute_dist": [1031, 1038], "lshforest": [1031, 1034], "qiang": 1031, "luo": 1031, "clemen": 1031, "brunner": 1031, "matteo": [1031, 1033, 1041], "visconti": 1031, "oleggio": 1031, "castello": 1031, "linkage_tre": 1031, "jatin": [1031, 1033], "shah": [1031, 1032, 1033, 1039], "saurabh": [1031, 1032, 1033, 1034, 1035, 1039], "jha": [1031, 1037, 1041], "blanchard": [1031, 1032], "michal": [1031, 1034, 1040, 1041], "romaniuk": 1031, "gilmor": 1031, "stapl": 1031, "hedyati": 1031, "antoni": [1031, 1033, 1039, 1042], "parel": 1031, "herv\u00e9": 1031, "bredin": 1031, "hasil": 1031, "sharma": [1031, 1033, 1035, 1036, 1038, 1039, 1041, 1044], "ducktyp": [1031, 1044], "download_20newsgroup": 1031, "cathi": [1031, 1037], "deng": [1031, 1032, 1033], "dawson": 1031, "garret": 1031, "hanna": [1031, 1032, 1038], "wallach": [1031, 1032], "yan": [1031, 1039], "artem": [1031, 1034, 1044], "sobolev": 1031, "fit_ovr": 1031, "predict_ovr": 1031, "predict_proba_ovr": 1031, "fit_ovo": 1031, "predict_ovo": 1031, "fit_ecoc": 1031, "predict_ecoc": 1031, "lamond": 1031, "outweigh": 1031, "thresh": 1031, "akshai": [1031, 1034, 1039], "akshayah3": 1031, "aldrian": 1031, "obaja": 1031, "ander": [1031, 1037], "aagaard": 1031, "cranenburgh": 1031, "walker": 1031, "banilo": [1031, 1032], "barmalei": [1031, 1032], "benedikt": 1031, "koehler": 1031, "bhsu": 1031, "bori": [1031, 1039, 1043], "feld": [1031, 1043], "borja": 1031, "ayerdi": 1031, "boyuan": [1031, 1032, 1033], "brent": [1031, 1035, 1036], "pedersen": [1031, 1043], "celeo": 1031, "chebee7i": 1031, "stade": 1031, "schuldt": 1031, "christof": [1031, 1032], "angermuel": [1031, 1032], "daiki": 1031, "aminaka": 1031, "danfrankj": 1031, "dmitrij": 1031, "milajev": 1031, "floydsoft": 1031, "garrett": 1031, "gpassino": 1031, "gwulf": [1031, 1032], "hampu": 1031, "bengtsson": 1031, "harri": [1031, 1033, 1039, 1040], "mavroforaki": [1031, 1033], "helder": [1031, 1040, 1041], "herv": 1031, "hugu": 1031, "salamin": 1031, "ism": 1031, "dlabal": 1031, "javier": 1031, "l\u00f3pez": [1031, 1035, 1036, 1039], "pe\u00f1a": 1031, "jdcaballero": 1031, "jeff": [1031, 1033, 1040, 1041], "hammerbach": 1031, "helmu": 1031, "kaicheng": 1031, "markham": [1031, 1038, 1039], "lagacheri": 1031, "leepei": 1031, "loic": [1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044], "estev": [1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044], "luka": [1031, 1038, 1044], "michelbach": 1031, "krell": [1031, 1033], "ku": [1031, 1032], "mateusz": [1031, 1038, 1039, 1044], "susik": 1031, "mehdi": [1031, 1040], "cherti": 1031, "mlg": 1031, "montecchio": 1031, "okal": 1031, "billi": 1031, "\u00f3scar": [1031, 1032, 1033, 1034], "n\u00e1jera": [1031, 1032, 1033, 1034], "puggioni": 1031, "pratap": [1031, 1034, 1041], "vardhan": 1031, "pvnguyen": 1031, "queqichao": 1031, "rahiel": 1031, "kasim": 1031, "mason": 1031, "saket": [1031, 1032, 1039], "choudhari": [1031, 1032, 1041, 1043], "sam": [1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042], "nichol": 1031, "sethdandridg": 1031, "sinhrk": [1031, 1032], "snuderl": 1031, "ott": 1031, "tjoa": 1031, "swu": 1031, "zimmer": [1031, 1041], "tejesh95": 1031, "terrycojon": 1031, "delteil": 1031, "toma": 1031, "kazmar": 1031, "trevorstephen": [1031, 1033], "tttthomasssss": 1031, "tzu": 1031, "kuo": 1031, "ugurcaliskan": 1031, "vinayak": [1031, 1032, 1033, 1035, 1036, 1042, 1043], "mehta": [1031, 1032, 1033, 1035, 1036, 1037, 1038, 1042, 1043], "vjacheslav": 1031, "murashkin": 1031, "wadawson": 1031, "x0l": 1031, "6147": 1032, "presort": [1032, 1037], "5857": 1032, "mcculloh": [1032, 1033], "6258": 1032, "giorgio": [1032, 1033, 1034], "patrini": [1032, 1033, 1034], "joe": 1032, "jevnik": 1032, "labelkfold": [1032, 1033], "labelshufflesplit": [1032, 1033], "mcfee": [1032, 1033], "3659": 1032, "4738": 1032, "projectedgradientnmf": 1032, "nls_max_it": 1032, "erick": 1032, "moodi": 1032, "4025": 1032, "mean_shift": [1032, 1035], "martino": 1032, "sorbaro": 1032, "cori": 1032, "konstantin": [1032, 1033, 1034], "shmelkov": 1032, "backlink": 1032, "jaidev": 1032, "deshpand": [1032, 1033], "dictlearn": 1032, "kashif": 1032, "rasul": [1032, 1034, 1035], "galvez": 1032, "sonni": 1032, "hu": [1032, 1035, 1037], "santi": [1032, 1034, 1035], "villalba": [1032, 1035, 1039], "5186": 1032, "stolbunov": 1032, "booster": 1032, "graham": [1032, 1033], "clenaghan": [1032, 1033], "clyde": 1032, "subproblem": 1032, "forestclassifi": 1032, "ankur": [1032, 1043], "ankan": 1032, "henri": [1032, 1033, 1034, 1035, 1037, 1038, 1039, 1041, 1042], "5431": 1032, "buddha": 1032, "prakash": [1032, 1034, 1040], "5182": 1032, "lamb": [1032, 1040], "5282": 1032, "5355": 1032, "5360": 1032, "4478": 1032, "5337": 1032, "4362": 1032, "5495": 1032, "elvi": [1032, 1033, 1034], "dohmatob": [1032, 1033, 1034], "data_min": 1032, "data_max": 1032, "data_rang": 1032, "vighnesh": [1032, 1033, 1035], "birodkar": [1032, 1033, 1035], "_learntselectormixin": 1032, "gradientboost": 1032, "metatransfom": 1032, "load_lfw_pair": 1032, "wardagglom": 1032, "residues_": 1032, "indicator_matrix_": 1032, "adithya": 1032, "ganesh": [1032, 1044], "akitti": 1032, "alexei": 1032, "grigorev": 1032, "ali": [1032, 1035, 1036, 1039, 1040, 1042, 1043, 1044], "baharev": 1032, "ando": 1032, "saaba": 1032, "anish": [1032, 1033], "anthoni": [1032, 1034, 1035], "erling": 1032, "rouvinen": 1032, "rachez": [1032, 1033], "benjaminirv": 1032, "naul": [1032, 1033], "gohlk": 1032, "bourguignat": 1032, "cindi": [1032, 1040, 1044], "sridharan": 1032, "kronovet": 1032, "data1010": 1032, "dotson": 1032, "djipei": [1032, 1033], "dmitri": [1032, 1034, 1035, 1036, 1040, 1043, 1044], "spikhalskii": 1032, "donn": 1032, "duart": [1032, 1040, 1042], "caro": 1032, "larson": [1032, 1036, 1037, 1039, 1041], "fernando": [1032, 1039], "carrillo": 1032, "eckert": 1032, "zalkow": 1032, "ganiev": [1032, 1033, 1034], "ibraim": [1032, 1033, 1034], "giorgiop": 1032, "gryllo": [1032, 1035], "prokopi": [1032, 1035], "hsuan": 1032, "tien": 1032, "ishank": [1032, 1033, 1034], "gulati": [1032, 1033, 1034], "jeffrey04": [1032, 1033], "jfraj": 1032, "jiali": 1032, "mei": [1032, 1037], "kirkham": [1032, 1033, 1035], "wittenau": 1032, "loyal": 1032, "jungkook": 1032, "park": [1032, 1037, 1039, 1042, 1043], "kamalakerdadi": [1032, 1033], "kyler": 1032, "lilian": [1032, 1033, 1044], "besson": [1032, 1033], "tiao": [1032, 1033], "marktab": 1032, "spacek": 1032, "martinbpr": [1032, 1033], "martinosorb": 1032, "maryanmorel": [1032, 1033], "masafumi": 1032, "oyamada": 1032, "krump": 1032, "kolganov": 1032, "mbilling": 1032, "mhg": 1032, "patterson": 1032, "omer": 1032, "katz": [1032, 1039, 1040], "pauli": 1032, "virtanen": 1032, "fischer": [1032, 1033], "pianomania": 1032, "preston": [1032, 1033, 1034], "parri": [1032, 1033, 1034], "rohan": [1032, 1033, 1035, 1036, 1040], "ramanath": 1032, "bansod": [1032, 1033, 1034], "scls19fr": 1032, "saeger": [1032, 1033, 1034], "shivan": 1032, "sornarajah": 1032, "simonpl": 1032, "sseg": 1032, "hoover": [1032, 1033, 1034, 1036], "seguin": 1032, "theodor": 1032, "vasiloudi": 1032, "freita": [1032, 1034, 1035], "pereira": [1032, 1035, 1036], "timothi": [1032, 1040], "hopper": 1032, "tokoroten": 1032, "vstolbunov": 1032, "wangz10": 1032, "yucheng": 1032, "zhauniarovich": 1032, "zac": 1032, "stewart": [1032, 1037, 1040, 1042], "zhai_pro": 1032, "zichen": 1032, "7946": 1033, "8355": 1033, "9010": 1033, "8040": 1033, "9149": 1033, "aman": [1033, 1034, 1035, 1041, 1042], "dalmia": [1033, 1034, 1035], "nate": [1033, 1034, 1040], "guerin": [1033, 1034], "lebedev": [1033, 1034], "utilis": 1033, "6497": 1033, "7724": 1033, "bing": [1033, 1034], "explained_variance_ratio": 1033, "7632": 1033, "jpfrancoia": [1033, 1034], "7676": 1033, "moham": [1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1044], "affan": 1033, "7756": 1033, "7786": 1033, "srivatsan": [1033, 1034, 1037], "7799": 1033, "7490": [1033, 1034], "6282": 1033, "7301": 1033, "6178": 1033, "7680": 1033, "n_iters_": 1033, "7553": 1033, "ekaterina": [1033, 1034, 1035, 1036, 1038, 1043], "krivich": [1033, 1034, 1036], "5874": 1033, "7593": 1033, "7594": 1033, "7660": 1033, "7750": 1033, "7732": 1033, "artsion": 1033, "lieu": [1033, 1034], "grid_scores_": [1033, 1039, 1040], "leaveonelabelout": 1033, "leaveplabelout": 1033, "plural": 1033, "mean_tim": 1033, "std_time": 1033, "3204": 1033, "5291": 1033, "sounder": 1033, "7295": 1033, "5299": 1033, "bravi": 1033, "fouchet": 1033, "calinski_harabaz_scor": [1033, 1035], "harabaz": 1033, "6586": 1033, "4294": 1033, "6667": 1033, "6954": 1033, "unveil": 1033, "yelit": 1033, "basebag": [1033, 1035], "staub": 1033, "5805": 1033, "5251": 1033, "imacul": 1033, "1000x": 1033, "arfa": 1033, "6691": 1033, "6913": 1033, "5762": 1033, "utkarsh": [1033, 1034, 1035, 1036], "upadhyai": [1033, 1034, 1035, 1036], "6846": 1033, "5929": 1033, "podshumok": [1033, 1034], "6173": 1033, "ryad": 1033, "zenin": 1033, "devashish": 1033, "asish": [1033, 1034], "dowl": 1033, "6697": 1033, "ori": 1033, "ziv": 1033, "sear": 1033, "merritt": 1033, "7325": 1033, "7239": 1033, "hong": [1033, 1035, 1039, 1040, 1041, 1043], "guangguo": 1033, "jensen": [1033, 1039], "7419": 1033, "gregori": [1033, 1037, 1038, 1039, 1040], "stupp": [1033, 1034], "bernardo": 1033, "stein": 1033, "sparse_func": [1033, 1039], "incr_mean_variance_axi": [1033, 1039], "7049": 1033, "7152": 1033, "load_boston": [1033, 1035, 1040], "7154": 1033, "manvendra": [1033, 1034], "singh": [1033, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044], "5540": 1033, "7248": 1033, "6764": 1033, "wenhua": 1033, "6817": 1033, "6902": 1033, "leonieborn": 1033, "5141": 1033, "4995": 1033, "5012": 1033, "_transform_select": 1033, "7194": 1033, "caio": [1033, 1035, 1037], "oliveira": [1033, 1035, 1037, 1041], "6182": 1033, "6121": 1033, "6472": 1033, "7350": 1033, "russel": [1033, 1034], "smith": [1033, 1034, 1035, 1036, 1037, 1039], "7159": 1033, "yichuan": [1033, 1034], "5460": 1033, "document_clust": 1033, "7353": 1033, "_search": 1033, "_check_param_grid": 1033, "xrang": 1033, "7323": 1033, "viacheslav": 1033, "kovalevskyi": 1033, "7101": 1033, "residual_metr": 1033, "6651": 1033, "reorgan": 1033, "7187": 1033, "7260": 1033, "sebasti\u00e1n": 1033, "vanrel": 1033, "leaveplabelsout": 1033, "6660": 1033, "unprefix": 1033, "7261": 1033, "aditya": [1033, 1035, 1036, 1037, 1041, 1042], "joshi": [1033, 1035, 1041, 1044], "loginov": 1033, "minyushkin": 1033, "rudi": 1033, "abadi": [1033, 1034], "saint": 1033, "alexfield": 1033, "alvaro": [1033, 1035], "ulloa": 1033, "alyssaq": 1033, "amlan": 1033, "kar": 1033, "giessel": 1033, "jackson": [1033, 1034, 1036], "murrai": [1033, 1034], "arafat": 1033, "archit": 1033, "asnt": 1033, "b0noi": 1033, "behzad": 1033, "tabibian": 1033, "kratzwald": 1033, "bhargav": 1033, "mangipudi": 1033, "blakeflei": 1033, "brandon": [1033, 1034, 1041, 1042], "carter": [1033, 1034, 1042], "camilo": 1033, "lamu": 1033, "carol": [1033, 1034], "Willing": [1033, 1034], "cass": 1033, "ceshin": 1033, "truong": 1033, "codevig": 1033, "shiebler": 1033, "hnyk": [1033, 1034], "elli": [1033, 1036], "nicholson": [1033, 1034, 1035], "thaler": 1033, "warshaw": 1033, "lasagna": 1033, "deborah": [1033, 1034, 1044], "definitelyuncertain": 1033, "didi": [1033, 1034, 1035, 1036], "zev": [1033, 1034, 1035, 1036], "dsquareindia": 1033, "edwinensa": 1033, "elia": 1033, "kuth": 1033, "fabio": 1033, "ticconi": 1033, "fisach": 1033, "donovan": 1033, "ghg": 1033, "giovanni": [1033, 1035], "cherubin": 1033, "lanzani": 1033, "glenn": 1033, "qian": [1033, 1038], "mohr": 1033, "govin": 1033, "vatsan": 1033, "reda": 1033, "gustav": 1033, "m\u00f6rtberg": 1033, "halwai": 1033, "harizo": [1033, 1034], "rajaona": [1033, 1034], "hashcode55": 1033, "hdmetor": 1033, "hobson": 1033, "lane": 1033, "bown": 1033, "igor": [1033, 1034, 1040], "andriushchenko": [1033, 1034], "inki": 1033, "hwang": 1033, "isaac": [1033, 1034, 1036, 1037, 1044], "sijaranamu": 1033, "iver": 1033, "jordal": 1033, "jackmartin": 1033, "fiedler": 1033, "routlei": 1033, "zike": 1033, "janna": 1033, "brettingen": 1033, "jarfa": 1033, "laska": 1033, "jblackburn": 1033, "levesqu": 1033, "hintz": 1033, "jeremynixon": 1033, "jeroen": 1033, "jessica": 1033, "jill": 1033, "j\u00eann": 1033, "vie": 1033, "jia": 1033, "jiyuan": 1033, "johannah": 1033, "boersma": 1033, "moeller": 1033, "striebel": [1033, 1034], "joncral": 1033, "jordi": 1033, "munoz": [1033, 1039], "jrfiedler": 1033, "juliankahnert": 1033, "juliathebrav": 1033, "kaichogami": 1033, "lyon": [1033, 1034], "kingjr": 1033, "kjell": 1033, "krishna": [1033, 1034, 1035, 1036, 1037, 1038, 1041, 1042], "kalyan": 1033, "krishnakalyan3": 1033, "kvle": 1033, "putnam": 1033, "ldavid": 1033, "leig": 1033, "leightonzhang": 1033, "leland": [1033, 1034, 1035, 1037, 1038, 1043], "liang": [1033, 1038, 1039, 1044], "hsieh": 1033, "lizsz": 1033, "l\u00e9oni": 1033, "born": 1033, "maniteja": [1033, 1034, 1035], "nandana": [1033, 1034, 1035], "marco": [1033, 1035, 1036, 1040, 1041, 1042, 1045], "bao": [1033, 1041], "szepieniec": 1033, "madsen": [1033, 1035], "massil": 1033, "matheu": 1033, "duboi": [1033, 1035], "moroz": 1033, "scherer": 1033, "michiaki": 1033, "ariga": 1033, "moussa": 1033, "taifi": 1033, "mrandrewandrad": 1033, "mridul": 1033, "seth": 1033, "nadya": 1033, "naoya": [1033, 1034, 1035, 1036], "kanai": [1033, 1034, 1035], "nickledav": 1033, "nico": [1033, 1040], "ningchi": 1033, "nlathia": 1033, "okbalefthand": 1033, "okhlopkov": [1033, 1034], "pano": 1033, "lourida": 1033, "strickland": 1033, "perrin": 1033, "letelli": 1033, "pestrickland": 1033, "practicalswift": 1033, "qimu": 1033, "zheng": [1033, 1034, 1039], "rachit": [1033, 1039, 1042], "kansal": 1033, "ramana": [1033, 1034], "randi": 1033, "olson": 1033, "lutz": [1033, 1037, 1040, 1044], "schucker": 1033, "jain": [1033, 1034, 1035, 1039, 1041, 1042], "ruifeng": [1033, 1034, 1039], "r\u00e9my": 1033, "l\u00e9one": 1033, "saihttam": 1033, "saiw": 1033, "yeung": 1033, "shleifer": [1033, 1034], "sartaj": 1033, "sasank": 1033, "chilamkurthi": 1033, "seal": 1033, "shagun": 1033, "sodhani": 1033, "shanmuga": 1033, "shashank": [1033, 1039], "shekhar": 1033, "shawpan": 1033, "shengxiduan": 1033, "shota": 1033, "shuckle16": 1033, "smedbergm": 1033, "srvanrel": 1033, "leriqu": [1033, 1035], "taranjeet": 1033, "themrmax": [1033, 1034], "hallock": 1033, "moreau": [1033, 1034, 1035, 1036, 1037], "tkammi": 1033, "toastedcornflak": [1033, 1034], "tomdlt": 1033, "toshihiro": [1033, 1034, 1040], "kamishima": [1033, 1034], "tracer0tong": 1033, "hauck": 1033, "vo": [1033, 1041], "varun": [1033, 1034, 1035, 1041, 1042], "jewalikar": 1033, "vikram": [1033, 1042, 1043], "villu": 1033, "ruusmann": 1033, "walter": 1033, "waterponei": [1033, 1034], "wenjian": 1033, "welch": 1033, "wyseguy7": 1033, "xyguo": [1033, 1035], "yanlend": 1033, "yen": [1033, 1034], "yenchenlin": 1033, "yoav": 1033, "zivori": 1033, "10723": [1034, 1035], "9623": 1034, "undocu": 1034, "deleteri": 1034, "9677": 1034, "ashutosh": [1034, 1035, 1037, 1039], "correlation_model": 1034, "regression_model": 1034, "belatedli": 1034, "9717": 1034, "9693": 1034, "steingold": [1034, 1035], "9711": 1034, "goncalo": [1034, 1035], "rodrigu": [1034, 1035, 1040], "9641": 1034, "bourbeau": [1034, 1035, 1036], "9865": 1034, "sachin": [1034, 1035, 1041], "kelkar": [1034, 1035, 1037], "9922": 1034, "charli": [1034, 1035, 1043], "brummitt": [1034, 1035], "9945": 1034, "9830": 1034, "9600": 1034, "kerimov": [1034, 1035], "9593": 1034, "reiichiro": [1034, 1035], "nakano": [1034, 1035], "9604": 1034, "interim": 1034, "9558": 1034, "9847": 1034, "joan": [1034, 1035, 1036, 1037], "massich": [1034, 1035, 1036, 1037], "oli": 1034, "blum": 1034, "9697": 1034, "9750": 1034, "9788": 1034, "9815": 1034, "9802": 1034, "vrishank": [1034, 1035], "bhardwaj": [1034, 1035], "nagarjuna": [1034, 1035], "nathaniel": [1034, 1035, 1037], "diegodlh": [1034, 1035], "jkleint": [1034, 1035], "oliblum90": [1034, 1035], "pasbi": [1034, 1035], "lawson": [1034, 1035, 1036], "nielsenmarkus11": [1034, 1035], "excit": 1034, "cautiou": 1034, "min_impurity_split": 1034, "7823": [1034, 1035], "8446": 1034, "5279": 1034, "8363": 1034, "5295": 1034, "7388": 1034, "userguid": 1034, "7655": 1034, "karan": [1034, 1035, 1036], "desai": [1034, 1036, 1039, 1040, 1042, 1043], "7739": 1034, "gasquez": 1034, "8120": 1034, "neeraj": 1034, "gangwar": 1034, "7548": 1034, "9206": 1034, "7441": 1034, "6101": 1034, "8698": 1034, "7794": 1034, "herilalaina": [1034, 1035, 1037], "rakotoarison": [1034, 1035, 1037], "5036": 1034, "4939": 1034, "esuli": [1034, 1039], "n_skips_": 1034, "7914": 1034, "horrel": 1034, "8591": 1034, "hadrien": [1034, 1037], "7838": 1034, "8835": 1034, "8061": 1034, "cordier": 1034, "6288": 1034, "9145": 1034, "reddi": [1034, 1035, 1036, 1041, 1044], "chinthala": 1034, "7721": 1034, "crall": [1034, 1040], "7685": 1034, "tommi": [1034, 1035, 1036], "l\u00f6fstedt": 1034, "9277": 1034, "hongkahjun": 1034, "7089": 1034, "randomized_svd_low_rank": 1034, "9067": 1034, "6181": 1034, "wendling": 1034, "8065": 1034, "lejeun": 1034, "7567": 1034, "jay": 1034, "doepk": 1034, "7573": 1034, "romain": [1034, 1039], "brault": 1034, "5229": 1034, "7990": 1034, "8586": 1034, "7723": 1034, "8028": 1034, "booth": 1034, "8005": 1034, "7863": 1034, "7506": 1034, "5991": 1034, "8845": 1034, "8053": 1034, "8282": 1034, "8117": 1034, "9259": 1034, "8094": 1034, "8335": 1034, "poughon": 1034, "7880": 1034, "karnofski": 1034, "935": 1034, "8931": 1034, "attractador": [1034, 1035], "8002": 1034, "8549": 1034, "zerodivisionerror": [1034, 1037, 1043], "7501": 1034, "dominik": [1034, 1043], "krzeminski": 1034, "7970": 1034, "8006": 1034, "p\u00f6lsterl": [1034, 1037, 1040], "8936": 1034, "8672": 1034, "mike": 1034, "benfield": 1034, "broke": 1034, "8068": 1034, "5732": 1034, "ytrue": 1034, "ypred": 1034, "8087": 1034, "7983": 1034, "8512": 1034, "8251": 1034, "aivision2020": 1034, "5814": 1034, "7849": 1034, "jair": 1034, "montoya": 1034, "martinez": 1034, "randomizedlasso": 1034, "5359": 1034, "9302": 1034, "8160": 1034, "8224": 1034, "gedeck": 1034, "vathsala": [1034, 1035, 1036, 1037], "achar": [1034, 1035, 1036, 1037], "9022": 1034, "mehmet": [1034, 1040], "basbug": 1034, "9024": 1034, "8973": 1034, "paulo": [1034, 1040, 1042], "haddad": 1034, "unmeaning": 1034, "6573": 1034, "quazi": [1034, 1035], "marufur": 1034, "rahman": [1034, 1035, 1039], "baselabelpropag": 1034, "9239": 1034, "andr": [1034, 1041], "ambrosio": 1034, "boechat": 1034, "early_exager": 1034, "assertionerror": 1034, "8992": 1034, "7954": 1034, "foreman": 1034, "9105": 1034, "9108": 1034, "8306": 1034, "7872": 1034, "_c_step": 1034, "3367": 1034, "steward": 1034, "8768": 1034, "detomaso": 1034, "6507": 1034, "jayzed82": 1034, "6126": 1034, "7814": 1034, "7702": 1034, "9219": 1034, "7771": 1034, "ang": 1034, "randomizedlogisticregress": 1034, "8259": 1034, "mandatorili": 1034, "7565": 1034, "8181": 1034, "basesearchcv": [1034, 1035], "8344": 1034, "eriksson": 1034, "7661": 1034, "8295": 1034, "batula": 1034, "dylan": [1034, 1037], "werner": [1034, 1039], "meier": 1034, "7365": 1034, "aleksandr": 1034, "sandrovskii": 1034, "5697": 1034, "stijn": 1034, "tonk": 1034, "6250": 1034, "8093": 1034, "bull": 1034, "9507": 1034, "7356": 1034, "dingwal": 1034, "_check_target": 1034, "8377": 1034, "5211": 1034, "rhinehart": 1034, "8159": 1034, "8198": 1034, "fetch_": 1034, "7944": 1034, "7825": 1034, "kathleen": 1034, "7376": 1034, "7331": 1034, "yangarbit": 1034, "__getstate__": [1034, 1042], "obstruct": 1034, "8316": 1034, "holger": 1034, "8010": 1034, "7986": 1034, "najera": 1034, "9289": 1034, "makedir": 1034, "9284": 1034, "sebastin": [1034, 1035], "alert": 1034, "lgtm": 1034, "9278": 1034, "heli": 1034, "8449": 1034, "9078": 1034, "purport": 1034, "sergul": [1034, 1035, 1038], "aydor": [1034, 1035, 1038], "8922": 1034, "8137": 1034, "8139": 1034, "8995": 1034, "2879": 1034, "7459": 1034, "7812": 1034, "9100": 1034, "8481": 1034, "8174": 1034, "tahar": 1034, "zanouda": 1034, "8854": 1034, "8874": 1034, "7998": 1034, "jiacheng": 1034, "argpartit": 1034, "frombuffer_empti": 1034, "in1d": 1034, "rankdata": 1034, "safe_copi": 1034, "eig": 1034, "fast_dot": 1034, "pinvh": [1034, 1036], "graph_laplacian": 1034, "sparsetool": 1034, "connected_compon": 1034, "check_decision_proba_consist": 1034, "shubham": [1034, 1037], "9019": 1034, "baseensembl": [1034, 1037], "7464": 1034, "rishikesh": 1034, "taehoon": [1034, 1035], "aashil": 1034, "balakumaran": [1034, 1035], "manoharan": [1034, 1035], "petrov": [1034, 1035, 1043], "minghui": [1034, 1035], "jc": [1034, 1035], "alexandercbooth": 1034, "chkoar": 1034, "aarshai": [1034, 1035], "gilliam": 1034, "subramanyam": 1034, "clement": [1034, 1035, 1039], "joudet": [1034, 1035], "robl": 1034, "kati": 1034, "luangkot": 1034, "lacchia": 1034, "akshay0724": 1034, "omtcyfz": 1034, "rickiepark": 1034, "jbdelafoss": 1034, "vivek": [1034, 1035, 1036, 1044], "elliott": 1034, "ldirer": 1034, "sid": 1034, "kapur": 1034, "midina": 1034, "mikebenfield": 1034, "sourav": [1034, 1037], "aseem": 1034, "bansal": 1034, "aishwaryark": 1034, "howel": 1034, "dokato": 1034, "kathi": [1034, 1037], "ferria": 1034, "nikita": [1034, 1035, 1037, 1040, 1041, 1042], "basil": 1034, "beirouti": 1034, "possa": 1034, "bednar": 1034, "janin": 1034, "harper": 1034, "artsiom": 1034, "ligo": 1034, "rahn": [1034, 1037], "seanpwilliam": 1034, "julian": [1034, 1035], "kuhlmann": [1034, 1035], "aubert": 1034, "j\u00f6rn": 1034, "hee": [1034, 1037], "shivamgargsya": [1034, 1038, 1040], "kat": 1034, "hempstalk": 1034, "kaushik": [1034, 1041, 1042, 1043], "lakshmikanth": 1034, "kennedi": [1034, 1037, 1044], "yap": 1034, "kiril": [1034, 1035, 1037, 1039], "bobyrev": 1034, "imbert": [1034, 1036, 1039, 1041, 1044], "lera": 1034, "douillard": 1034, "mainak": 1034, "tobychees": [1034, 1035], "manraj": 1034, "marc": [1034, 1036, 1037, 1043], "meketon": 1034, "marcofalk": 1034, "gilch": 1034, "mehul": 1034, "ahuja": [1034, 1041, 1042], "goetz": [1034, 1035], "dezub": 1034, "baumgartn": 1034, "vibrantabhi19": 1034, "golubin": 1034, "milen": 1034, "paskov": 1034, "antonin": 1034, "carett": 1034, "morikko": 1034, "mrmjauh": 1034, "nalepa": 1034, "namiya": 1034, "narinek": [1034, 1035], "angu": [1034, 1035, 1041], "nicol": 1034, "vavrova": 1034, "nitish": 1034, "pandei": [1034, 1039], "daniil": 1034, "olegovich": 1034, "craze": 1034, "om": 1034, "parmind": 1034, "patrick": [1034, 1035, 1040, 1041, 1044], "carlson": 1034, "ganssl": 1034, "lorek": 1034, "pete": [1034, 1038, 1039], "bachant": 1034, "csizsek": 1034, "jong": 1034, "puneet": 1034, "mathur": [1034, 1036, 1037, 1042, 1043], "quentin": [1034, 1035, 1036, 1043, 1044], "hibon": 1034, "1kastner": 1034, "rameshwar": [1034, 1035], "bhaskaran": [1034, 1035], "rebecca": 1034, "bilbro": 1034, "remi": 1034, "rampin": 1034, "pratik": 1034, "agarw": [1034, 1035, 1037], "sailesh": [1034, 1035], "choyal": [1034, 1035], "samson": 1034, "samu\u00ebl": 1034, "weber": 1034, "sarah": [1034, 1036, 1039], "abhyudai": 1034, "sharan": [1034, 1035], "yalburgi": [1034, 1035], "willduan": 1034, "siddharth": [1034, 1038], "almer": 1034, "theofilo": 1034, "papapanagiot": 1034, "alison": 1034, "boucher": 1034, "folkman": 1034, "jung": [1034, 1038, 1042], "shenoi": 1034, "vilhelm": [1034, 1035], "ehrenheim": [1034, 1035], "alan": [1034, 1035, 1038, 1040, 1041], "yee": [1034, 1035], "warut": [1034, 1035], "vijitbenjaronk": [1034, 1035], "yuichi": 1034, "fujikawa": 1034, "affanv14": 1034, "andreh7": 1034, "bradi": 1034, "salz": 1034, "campustrampu": 1034, "agamemnon": [1034, 1035, 1036, 1037, 1039, 1040], "krasouli": [1034, 1035, 1036, 1037, 1039, 1040], "ditenberg": 1034, "elena": 1034, "sharova": 1034, "filipj8": [1034, 1035], "fukatani": 1034, "guiniol": 1034, "guoci": 1034, "hakaa1": [1034, 1035], "xhy": 1034, "jakirkham": [1034, 1035, 1036, 1042, 1043], "jaroslaw": 1034, "jeroko": 1034, "jmontoyam": 1034, "josephsalmon": [1034, 1035, 1036], "jschendel": [1034, 1035], "leereev": 1034, "hahn": [1034, 1035], "mathurinm": [1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "mehak": 1034, "sachdeva": 1034, "mlewis1729": 1034, "mlliou112": 1034, "mthorrel": [1034, 1037], "ndingwal": 1034, "nuff": 1034, "plagre": 1034, "pldtc325": 1034, "breno": [1034, 1035], "olsen": 1034, "alfano": 1034, "burn": [1034, 1035], "polmauri": 1034, "charlton": 1034, "austin": 1034, "chayant": 1034, "t15h": 1034, "chinmaya": 1034, "pancholi": 1034, "danielsen": 1034, "chung": [1034, 1035], "pravarmahajan": [1034, 1035], "dariu": [1034, 1035], "morawiec": [1034, 1035], "haberth\u00fcr": 1034, "heryanto": 1034, "kirkbi": [1034, 1035], "rashchedrin": 1034, "gertrud": 1034, "devansh": [1034, 1035], "dickson": 1034, "baxlei": 1034, "don86": 1034, "klarup": 1034, "elizabeth": [1034, 1036, 1039], "ferriss": 1034, "ellen": 1034, "egli": [1034, 1044], "chieh": [1034, 1035], "chou": [1034, 1035], "grzegorz": [1034, 1037], "szpak": [1034, 1037], "zxcvbniu": 1034, "icyblad": 1034, "ilya": 1034, "laughlin": 1034, "iv\u00e1n": [1034, 1040], "vall\u00e9": 1034, "aur\u00e9lien": [1034, 1035, 1036, 1040, 1041], "bellet": [1034, 1035, 1036], "mahapatra": 1034, "couldn": [1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "bundl": [1035, 1036], "indexerror": [1035, 1036], "11756": [1035, 1036], "14237": [1035, 1036], "schuder": [1035, 1036, 1037], "13903": [1035, 1036], "13124": [1035, 1036], "13772": [1035, 1036], "vya": [1035, 1036, 1037], "12949": 1035, "prabakaran": [1035, 1036, 1039, 1041, 1042], "kumaresshan": [1035, 1036, 1039], "12946": 1035, "tallott": 1035, "13276": 1035, "13005": 1035, "13312": 1035, "11295": 1035, "vacaliuc": [1035, 1036], "13046": 1035, "12360": 1035, "aakanksha": 1035, "13134": 1035, "sandro": [1035, 1042], "casagrand": [1035, 1036], "12881": 1035, "13165": 1035, "13221": 1035, "bertrandhaut": [1035, 1036], "raghunathan": [1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044], "dowon": [1035, 1036], "aria": [1035, 1036, 1042], "fibins": [1035, 1036], "finn": [1035, 1036], "shea": [1035, 1036], "joaak": [1035, 1036], "m\u00e9hault": [1035, 1036], "kms15": [1035, 1036], "kossori": [1035, 1036], "aruku": [1035, 1036], "lakshya": [1035, 1036, 1037], "ib\u00e1\u00f1ez": [1035, 1036, 1039], "gorelli": [1035, 1036, 1040, 1042], "marcogorelli": [1035, 1036], "mferrari3": [1035, 1036], "micka\u00ebl": [1035, 1036], "schoentgen": [1035, 1036], "pavlo": [1035, 1036], "kalli": [1035, 1036], "glaser": [1035, 1036], "pierretallott": [1035, 1036, 1037], "kapoor": [1035, 1036], "sandrocasagrand": [1035, 1036], "tashai": [1035, 1036], "vishaal": [1035, 1036], "zhuyi": [1035, 1036], "ziji": [1035, 1036], "zj": [1035, 1036], "poh": [1035, 1036], "12704": 1035, "12701": 1035, "12685": 1035, "12699": 1035, "adanhawth": [1035, 1036], "stine": [1035, 1036], "feda": [1035, 1036], "curic": [1035, 1036], "jeremiedbb": [1035, 1036, 1037], "katrin": [1035, 1036], "leinweb": [1035, 1036], "muhammad": [1035, 1036, 1040], "hassaan": [1035, 1036], "rafiqu": [1035, 1036], "paczuski": [1035, 1036], "waterburi": [1035, 1036], "shivam": [1035, 1036, 1037], "kotwalia": [1035, 1036], "12159": 1035, "12105": 1035, "11912": 1035, "12304": 1035, "12339": 1035, "12246": 1035, "10811": 1035, "feldbauer": [1035, 1036, 1037, 1038, 1041], "12441": 1035, "12517": 1035, "12234": 1035, "12165": 1035, "12388": 1035, "connor": [1035, 1040, 1044], "tann": [1035, 1040], "12393": 1035, "12122": 1035, "sharedmem": 1035, "12518": 1035, "12481": 1035, "12612": 1035, "12211": 1035, "lisa": [1035, 1036, 1038, 1039, 1041, 1042], "hannel": [1035, 1036], "melissa": 1035, "ferrari": 1035, "12451": 1035, "12171": 1035, "12365": 1035, "_encod": 1035, "12514": 1035, "12522": 1035, "12471": 1035, "marzinotto": [1035, 1036], "12317": 1035, "12338": 1035, "bauk": [1035, 1036], "12625": 1035, "sklearn_site_joblib": 1035, "12350": 1035, "12467": 1035, "unvendor": 1035, "12345": 1035, "navarret": [1035, 1036, 1037], "benjastudio": [1035, 1036], "cheuk": [1035, 1036], "connossor": [1035, 1036], "levinson": [1035, 1036], "kieker": [1035, 1036], "kataev": [1035, 1036], "dillon": [1035, 1036, 1037], "gardner": [1035, 1036], "vukolov": [1035, 1036], "caselli": [1035, 1036], "gauravahlawat": [1035, 1036], "gustavo": [1035, 1036, 1041], "haroldfox": [1035, 1036], "jacklangerman": [1035, 1036], "jacopo": [1035, 1036], "notarstefano": [1035, 1036], "janvanrijn": [1035, 1036], "jdethuren": [1035, 1036], "koen": [1035, 1036], "kushal": [1035, 1036], "chauhan": [1035, 1036, 1042, 1043], "jie": [1035, 1036, 1039], "lili": [1035, 1036], "xiong": [1035, 1036, 1041], "liam": [1035, 1036], "melsyt": [1035, 1036], "nichola": [1035, 1036, 1038], "shebanov": [1035, 1036], "oleksandr": [1035, 1036, 1037, 1038, 1041], "pavlyk": [1035, 1036, 1037, 1038], "hausamann": [1035, 1036], "pulkit": [1035, 1036, 1038], "maloo": [1035, 1036], "batista": [1035, 1036, 1040], "radostin": [1035, 1036], "stoyanov": [1035, 1036], "ramil": [1035, 1036], "nugmanov": [1035, 1036], "rebekah": [1035, 1036, 1037], "roopam": [1035, 1036], "tiernei": [1035, 1036, 1037], "sylvainlan": [1035, 1036, 1037, 1038, 1039], "takingitcasu": [1035, 1036], "tulio": [1035, 1036], "xing": [1035, 1036], "zach": [1035, 1036, 1041], "mountain": 1035, "sorri": 1035, "basemultilayerperceptron": [1035, 1037], "11924": 1035, "macbook": 1035, "9354": 1035, "9372": 1035, "astel": 1035, "10933": 1035, "hansen": 1035, "10471": 1035, "gaurav": [1035, 1036, 1037, 1038, 1039, 1041], "dhingra": [1035, 1036, 1039, 1044], "8003": 1035, "jo\u00ebl": 1035, "billaud": 1035, "10059": 1035, "braun": 1035, "9612": 1035, "jonatan": 1035, "samoocha": 1035, "8129": 1035, "margeta": 1035, "k_means_elkan": 1035, "11353": 1035, "11901": 1035, "9875": 1035, "9012": 1035, "11315": 1035, "9041": 1035, "9858": 1035, "artiem": 1035, "krinitsyn": 1035, "9908": 1035, "8617": 1035, "maskani": [1035, 1037, 1038, 1039], "filali": 1035, "konstantino": [1035, 1044], "katriopla": 1035, "10774": 1035, "catalfo": 1035, "10795": 1035, "takeshi": [1035, 1040, 1041, 1042], "yoshizawa": 1035, "11082": 1035, "sadhana": 1035, "srinivasan": [1035, 1038], "9731": 1035, "10045": 1035, "fetch_mldata": 1035, "11466": 1035, "6374": 1035, "normalize_compon": [1035, 1037], "11585": 1035, "ivan": [1035, 1036, 1039, 1042], "panico": [1035, 1039], "11420": 1035, "6452": 1035, "walli": 1035, "gauz": 1035, "9492": 1035, "8484": 1035, "9886": 1035, "underflow": [1035, 1040], "10142": 1035, "5956": 1035, "_class_mean": 1035, "_class_cov": 1035, "10898": 1035, "nanxin": 1035, "9832": 1035, "11951": 1035, "r\u00fcdiger": [1035, 1036, 1038], "busch": [1035, 1036, 1038], "9707": 1035, "wan": 1035, "7071": 1035, "9157": 1035, "11176": 1035, "forsyth": 1035, "11542": 1035, "anna": 1035, "9524": 1035, "9723": 1035, "10908": 1035, "10899": 1035, "melderi": 1035, "10101": 1035, "10\u2079": 1035, "9147": 1035, "clae": 1035, "fredrik": 1035, "mannbi": 1035, "10441": 1035, "mayur": 1035, "kulkarni": 1035, "6689": 1035, "nihar": 1035, "sheth": 1035, "11293": 1035, "9656": 1035, "greenhal": 1035, "n_features_to_comput": 1035, "9222": 1035, "hoh": 1035, "9234": 1035, "andrewww": 1035, "8075": 1035, "11211": 1035, "9484": 1035, "dalla": 1035, "card": 1035, "9043": 1035, "10112": 1035, "logistic_regression_path": [1035, 1036], "11724": 1035, "9939": 1035, "westov": 1035, "10998": 1035, "vazelh": [1035, 1036, 1037], "10071": 1035, "10153": 1035, "d\u00f6pfert": 1035, "10095": 1035, "cv_valu": 1035, "10297": 1035, "mabel": [1035, 1039], "10581": 1035, "yacin": 1035, "mazari": 1035, "10687": 1035, "10836": 1035, "aishwarya": 1035, "10397": 1035, "10992": 1035, "11327": 1035, "11905": 1035, "9837": 1035, "10593": 1035, "10610": 1035, "8554": 1035, "9775": 1035, "10827": 1035, "osa": 1035, "8066": 1035, "10587": 1035, "3840": 1035, "niederb\u00fchl": 1035, "9521": 1035, "11124": 1035, "arya": 1035, "11160": 1035, "barkhorn": 1035, "11679": 1035, "pacha": 1035, "10845": 1035, "perez": [1035, 1042], "parra": 1035, "toledano": 1035, "10999": 1035, "memoryerror": [1035, 1039], "11135": 1035, "10377": 1035, "9786": 1035, "10093": 1035, "alexryndin": 1035, "9772": 1035, "9515": 1035, "liddel": 1035, "manh": 1035, "dao": 1035, "9851": 1035, "10280": 1035, "10336": 1035, "haoran": 1035, "basemixtur": [1035, 1036], "10740": 1035, "10869": 1035, "g\u00e9ron": 1035, "9686": 1035, "11310": 1035, "_fit_and_scor": 1035, "11576": 1035, "ronsin": [1035, 1036, 1044], "_run_search": 1035, "9599": 1035, "11006": 1035, "11557": 1035, "boucaud": 1035, "iid": 1035, "9085": 1035, "10677": 1035, "zhdanovich": 1035, "10982": 1035, "juliet": 1035, "lawton": 1035, "10928": 1035, "solutu": 1035, "immensu": 1035, "9257": 1035, "8190": 1035, "alcorn": 1035, "9681": 1035, "mottl": [1035, 1036], "10005": 1035, "10346": 1035, "tobia": [1035, 1040, 1042], "10887": 1035, "11136": 1035, "4394": 1035, "9579": 1035, "kober": 1035, "9655": 1035, "bjerr": 1035, "11556": 1035, "11774": 1035, "9456": 1035, "unexpectedli": 1035, "9304": 1035, "11144": [1035, 1036], "9151": 1035, "10521": 1035, "7668": 1035, "9647": 1035, "10195": 1035, "10192": 1035, "11272": 1035, "11467": 1035, "11505": 1035, "giusepp": [1035, 1036], "costa": [1035, 1040], "10210": 1035, "11520": 1035, "11011": 1035, "11005": 1035, "11308": 1035, "11206": 1035, "11306": 1035, "10437": 1035, "lucija": 1035, "gregov": 1035, "10452": 1035, "10181": 1035, "nirvan": [1035, 1039], "anjirbag": 1035, "9399": 1035, "10913": 1035, "rodrigo": 1035, "agundez": 1035, "10458": 1035, "9816": 1035, "newei": 1035, "11042": 1035, "11235": 1035, "active_features_": 1035, "feature_indices_": 1035, "n_values_": 1035, "9726": 1035, "10829": 1035, "gilberto": 1035, "olimpio": 1035, "10655": 1035, "python2": 1035, "10412": 1035, "jiongyan": 1035, "9497": 1035, "8361": 1035, "neo": 1035, "_criterion": 1035, "classificationcriterion": 1035, "regressioncriterion": 1035, "10325": 1035, "camil": [1035, 1043, 1044], "stap": 1035, "basedecisiontre": [1035, 1036, 1039], "10536": 1035, "ohayon": [1035, 1036, 1043], "11464": 1035, "stott": 1035, "10663": 1035, "10229": 1035, "11553": 1035, "10881": 1035, "sevin": 1035, "ridge_regress": [1035, 1036, 1042], "10306": 1035, "siebert": 1035, "11741": 1035, "11166": 1035, "pypy3": 1035, "v5": 1035, "11010": 1035, "lami": 1035, "11596": 1035, "marcu": [1035, 1044], "voss": 1035, "9569": 1035, "12462": 1035, "zachariah": 1035, "10474": 1035, "10500": 1035, "9701": 1035, "9378": 1035, "check_set_param": 1035, "7738": 1035, "alvin": 1035, "chiang": 1035, "8102": 1035, "ankita": 1035, "sinha": [1035, 1044], "check_methods_subset_invari": [1035, 1041], "10428": 1035, "check_sample_weights_pandas_seri": 1035, "11558": 1035, "211217613": 1035, "absolutelynowarranti": 1035, "richi": 1035, "halford": [1035, 1042, 1043], "adelr": 1035, "adityadaflapurkar": 1035, "aidan": 1035, "fitzgerald": 1035, "aishgrt1": 1035, "akash": 1035, "shivram": 1035, "lenail": [1035, 1039], "egg": 1035, "diaz": 1035, "amanda": [1035, 1038, 1039, 1040, 1041], "aniruddha": 1035, "annaayzenshtat": 1035, "antonio": [1035, 1037], "quinonez": 1035, "anubhav": 1035, "marwaha": 1035, "arik": 1035, "pamnani": 1035, "ozga": 1035, "arunava": 1035, "geron": [1035, 1040, 1041], "ayush": [1035, 1040], "bangda": 1035, "bastian": 1035, "venthur": 1035, "benn": 1035, "koonc": 1035, "cclauss": 1035, "chadi": 1035, "kamar": 1035, "holdgraf": 1035, "hirsch": 1035, "hogan": 1035, "cnx": 1035, "cwitt": 1035, "ferreira": [1035, 1040, 1041], "gomez": [1035, 1042, 1044], "klevebr": 1035, "shwed": 1035, "mohn": [1035, 1039], "danil": 1035, "baibak": [1035, 1036], "beach": 1035, "pickup": 1035, "derek": 1035, "niederhut": [1035, 1037], "dilutedsauc": 1035, "dlovel": 1035, "dor": 1035, "dougla": 1035, "duhaim": 1035, "tuzova": 1035, "eunji": 1035, "farahsae": 1035, "raimundo": 1035, "fenx": 1035, "frankhui": 1035, "franz": 1035, "wompner": 1035, "freija": 1035, "descamp": 1035, "frsi": 1035, "calvo": [1035, 1036], "georgi": [1035, 1038], "peev": [1035, 1038], "gkevinyen5418": 1035, "vermeil": 1035, "hongh": 1035, "hossein": [1035, 1036, 1037], "pourbozorg": [1035, 1036, 1037], "hristo": [1035, 1042], "hunan": 1035, "rostomyan": 1035, "iampat": 1035, "jaewon": 1035, "malcolm": 1035, "jami": 1035, "wolosonovich": 1035, "jeb": 1035, "bearer": 1035, "jinkun": 1035, "jjabl": 1035, "johnstott": 1035, "jotasi": 1035, "julietcl": 1035, "shenk": 1035, "karl": 1035, "kasper": 1035, "primdal": 1035, "lauritzen": 1035, "ksemb": 1035, "kuai": [1035, 1036], "kyeongpil": 1035, "kang": [1035, 1037], "kye": 1035, "kyledrogo": 1035, "l\u00e9o": 1035, "liutong": 1035, "lizao": 1035, "lkjcalc": 1035, "louib": [1035, 1036], "luciano": [1035, 1042], "luke": 1035, "persola": 1035, "markiwanchyshyn": 1035, "marsgui": 1035, "gubri": [1035, 1036], "koko": [1035, 1041, 1042], "copeland": [1035, 1036], "meghann": [1035, 1037], "minh": 1035, "jamaoui": [1035, 1036, 1039], "mohammad": [1035, 1036], "shahebaz": 1035, "muayyad": 1035, "alsadi": 1035, "nabarun": 1035, "pal": [1035, 1041], "narendran": 1035, "santhanam": 1035, "suh": 1035, "eng": 1035, "av": 1035, "nicolau": 1035, "werneck": 1035, "titov": [1035, 1037, 1040, 1041], "nilesh": 1035, "kevlani": 1035, "notmatthancock": [1035, 1037], "nzw": 1035, "oren": 1035, "milman": 1035, "osaid": 1035, "rehman": 1035, "nasir": 1035, "fernand": [1035, 1041, 1042], "olden": 1035, "pierreablin": 1035, "pietruh": 1035, "pinaki": 1035, "nath": 1035, "chowdhuri": [1035, 1041], "piotr": [1035, 1036], "szyma\u0144ski": [1035, 1036], "pradeep": [1035, 1036], "raamana": [1035, 1036], "pravar": 1035, "mahajan": [1035, 1037, 1044], "qingi": 1035, "rajendra": 1035, "arora": [1035, 1042], "rankylau": 1035, "kosobrodov": 1035, "rragundez": 1035, "sagnik": 1035, "bhattacharya": 1035, "radhakrishnan": 1035, "saqib": 1035, "nizam": 1035, "shamsi": 1035, "satish": 1035, "gigant": [1035, 1037, 1042, 1043], "flennerhag": 1035, "sebastien": 1035, "shalil": 1035, "awalei": 1035, "shangwu": [1035, 1036], "sharad": 1035, "vijalapuram": 1035, "shenhanc78": 1035, "rastogi": 1035, "siftikha": 1035, "sinclert": 1035, "p\u00e9rez": 1035, "solutusimmensu": 1035, "somya": 1035, "anand": [1035, 1039], "srajan": 1035, "paliw": 1035, "sriharsha": [1035, 1036], "hatwar": [1035, 1036], "mcdowel": 1035, "syonekura": 1035, "takanori": 1035, "hayashi": 1035, "tarcusx": 1035, "theriley106": 1035, "heavei": 1035, "augspurg": [1035, 1037], "trishnendu": 1035, "ghorai": 1035, "twosigmajab": 1035, "umar": [1035, 1036], "farouk": [1035, 1036], "urvang": [1035, 1037], "patel": [1035, 1037, 1038, 1039, 1041], "vadim": [1035, 1039, 1040], "markovtsev": 1035, "vinit": 1035, "vinod": 1035, "viraj": 1035, "mavani": 1035, "navkal": 1035, "vqean3": [1035, 1036], "vufg": 1035, "wallygauz": 1035, "wdevazelh": 1035, "barnett": 1035, "rosenfeld": 1035, "yime": 1035, "ymazari": 1035, "yufeng": 1035, "griffith": [1035, 1036], "z\u00e9": 1035, "vin\u00edciu": 1035, "zhenq": 1035, "zhiqe": 1035, "xiao": [1035, 1037, 1040, 1041, 1042, 1043, 1044], "12955": 1036, "klopfer": 1036, "14197": 1036, "14024": 1036, "nicolashug": 1036, "13974": 1036, "hoang": [1036, 1037], "fhoang7": 1036, "14393": 1036, "guillem": [1036, 1037, 1042], "subi": [1036, 1037, 1042], "14087": 1036, "14067": 1036, "stalei": [1036, 1037], "14092": 1036, "14053": 1036, "13947": 1036, "instanci": 1036, "13910": 1036, "13894": 1036, "myatt": [1036, 1037], "min_max_axi": 1036, "13741": 1036, "roddi": [1036, 1037], "macsween": [1036, 1037], "14309": 1036, "13864": 1036, "paresh": [1036, 1037], "13877": 1036, "_sag": 1036, "sag_solv": 1036, "3591": 1036, "13317": 1036, "13157": 1036, "13086": 1036, "cole": 1036, "13485": 1036, "assia": 1036, "benbihi": 1036, "13651": 1036, "reloc": 1036, "13486": 1036, "13427": 1036, "couvreur": [1036, 1037], "9069": 1036, "13835": 1036, "10727": 1036, "wood": 1036, "13250": 1036, "13241": 1036, "12143": 1036, "11650": 1036, "non_negative_factor": [1036, 1038, 1039, 1040, 1044], "12988": 1036, "8769": 1036, "11000": 1036, "thibault": 1036, "sejourn": 1036, "changedbehaviourwarn": 1036, "11526": 1036, "6848": 1036, "glemaitr": [1036, 1037, 1039], "11727": 1036, "13266": 1036, "13545": 1036, "sorro": 1036, "12807": 1036, "12513": 1036, "12543": 1036, "storch": 1036, "13260": 1036, "13283": 1036, "13524": 1036, "13174": 1036, "13496": 1036, "13620": 1036, "12436": 1036, "12983": 1036, "13251": 1036, "joshuakennethjon": 1036, "12715": 1036, "13164": 1036, "12834": 1036, "leastsquareserror": 1036, "update_terminal_region": 1036, "6463": 1036, "movelikeriv": 1036, "13193": 1036, "12599": 1036, "13779": 1036, "13780": 1036, "12916": 1036, "13641": 1036, "8478": 1036, "12177": 1036, "12583": 1036, "13601": 1036, "danylo": 1036, "densif": 1036, "13240": 1036, "bartosz": 1036, "13562": 1036, "11646": 1036, "11699": 1036, "make_dataset": 1036, "13336": 1036, "toleranbc": 1036, "11754": 1036, "13397": 1036, "fagan": 1036, "12174": 1036, "12972": 1036, "lucio": 1036, "fernandez": 1036, "arjona": 1036, "coeffeci": 1036, "13279": 1036, "13328": 1036, "13389": 1036, "basesgdclassifi": 1036, "13422": 1036, "cl\u00e9ment": [1036, 1040, 1042], "doumouro": 1036, "unhandl": 1036, "13363": 1036, "12821": 1036, "13350": 1036, "j\u00e9r\u00f4me": [1036, 1037, 1038, 1044], "dock\u00e8": [1036, 1037, 1038, 1044], "9907": 1036, "12232": 1036, "sangeeth": 1036, "11179": 1036, "13151": 1036, "12568": 1036, "8216": 1036, "romuald": 1036, "menuet": 1036, "12732": 1036, "12334": 1036, "13607": 1036, "12855": 1036, "pawel": 1036, "sendyk": 1036, "13628": 1036, "13447": 1036, "10580": 1036, "sandra": [1036, 1042], "mitrov": 1036, "13554": 1036, "celelibi": 1036, "13142": 1036, "11354": 1036, "12613": 1036, "12669": 1036, "torrella": [1036, 1037, 1043], "12861": 1036, "8773": 1036, "13366": 1036, "fournier": 1036, "10440": 1036, "12222": 1036, "10058": 1036, "chiotelli": 1036, "12279": 1036, "12582": 1036, "my_pipelin": 1036, "2568": 1036, "make_": 1036, "11364": 1036, "baze": 1036, "petrushev": 1036, "__len__": 1036, "13439": 1036, "12908": 1036, "drew": 1036, "13253": 1036, "12116": 1036, "12197": 1036, "12251": 1036, "float16": 1036, "13007": 1036, "raffaello": 1036, "baluyot": 1036, "13333": 1036, "13459": 1036, "hunter": 1036, "mcgushion": 1036, "8508": 1036, "6261": 1036, "vettigli": 1036, "justglow": 1036, "12300": 1036, "11458": 1036, "mitar": 1036, "milutinov": 1036, "12344": 1036, "13549": 1036, "warn_on_dtyp": 1036, "check_pairwise_arrai": 1036, "13382": 1036, "prathmesh": 1036, "saval": 1036, "11705": 1036, "11973": 1036, "our_rand_r": 1036, "madhura": [1036, 1038, 1039, 1042, 1043], "parikh": [1036, 1041, 1042, 1043, 1044], "13531": 1036, "check_fit_idempot": 1036, "alberto": [1036, 1040, 1041], "torr": 1036, "amourav": 1036, "assiaben": 1036, "micha\u0142owski": 1036, "brentfagan": 1036, "chenal": [1036, 1037, 1039], "choe": 1036, "drewmjohnston": 1036, "dror": 1036, "atariah": 1036, "esvhd": 1036, "falak": 1036, "gandenberg": 1036, "luqi": 1036, "jf": 1036, "kulbear": 1036, "leandro": [1036, 1040], "hermida": [1036, 1040], "luk": 1036, "manimaran": [1036, 1038, 1039, 1040, 1041], "gaido": 1036, "marinelm": 1036, "masstran": 1036, "roeschk": 1036, "aftab": 1036, "abdela": 1036, "ibraheem": 1036, "mwestt": 1036, "iijima": 1036, "oresti": 1036, "osman": [1036, 1042], "flanagan": [1036, 1037], "soriano": 1036, "peai": 1036, "pim": 1036, "haan": 1036, "raf": 1036, "rajdeep": 1036, "dua": 1036, "ra\u00fal": 1036, "garc\u00eda": [1036, 1037, 1042], "lekhwani": 1036, "varma": 1036, "shiyu": 1036, "duan": [1036, 1038], "smari": [1036, 1037, 1038], "st\u00e9phane": [1036, 1037, 1041, 1042], "surgan12": 1036, "thibsej": 1036, "xhan": 1036, "xinyuliu12": 1036, "zayd": 1036, "hammoudeh": 1036, "16397": [1037, 1038], "16500": 1037, "16505": 1037, "16076": 1037, "shack": [1037, 1038, 1039], "15930": 1037, "inder128": 1037, "15810": 1037, "15898": 1037, "gargsya": 1037, "15933": 1037, "15760": 1037, "15888": 1037, "15936": 1037, "dizietasahi": 1037, "15879": 1037, "bibhash": [1037, 1038], "chandra": [1037, 1038, 1041], "mitra": [1037, 1038, 1042], "15937": 1037, "blyston": [1037, 1038], "15863": 1037, "abstractmethod": 1037, "_check_x": 1037, "basenb": 1037, "15996": 1037, "brigitta": [1037, 1038, 1039, 1043], "sip\u0151cz": [1037, 1038, 1039, 1043], "15751": 1037, "tirth": [1037, 1038], "15868": 1037, "nikla": [1037, 1038], "smedemark": 1037, "marguli": 1037, "15797": 1037, "15947": 1037, "revamp": 1037, "14849": 1037, "_name_estim": 1037, "_gb": 1037, "facto": 1037, "_birch": 1037, "9250": 1037, "12927": 1037, "deprecationwarn": 1037, "hinder": 1037, "15080": 1037, "14464": 1037, "13575": 1037, "10482": 1037, "13726": 1037, "shuzh": 1037, "9288": 1037, "15057": 1037, "korolev": 1037, "15120": 1037, "7943": 1037, "12303": 1037, "14510": 1037, "14890": 1037, "miguel": 1037, "cabrera": 1037, "14544": 1037, "15304": 1037, "jaim": 1037, "ferrando": 1037, "huerta": 1037, "12068": 1037, "12145": 1037, "13609": 1037, "camila": 1037, "williamson": 1037, "15661": 1037, "15160": 1037, "14259": 1037, "14764": 1037, "14740": 1037, "st\u00e9phan": 1037, "tulken": 1037, "14623": 1037, "sarra": 1037, "habchi": 1037, "15257": 1037, "willocx": 1037, "12650": 1037, "13960": 1037, "multiouput": 1037, "14908": 1037, "martina": [1037, 1039], "vila": [1037, 1039], "15382": 1037, "14933": 1037, "15138": 1037, "cusick": 1037, "14406": 1037, "14012": 1037, "faouzi": [1037, 1038], "13769": 1037, "14194": 1037, "least_absolute_devi": [1037, 1039, 1040], "13896": 1037, "13933": 1037, "14710": 1037, "categorical_crossentropi": [1037, 1041], "14869": 1037, "14682": 1037, "hancock": 1037, "5963": 1037, "pablo": [1037, 1040, 1041], "dubou": 1037, "14287": 1037, "15375": 1037, "14305": 1037, "14114": 1037, "15084": 1037, "14294": 1037, "14907": 1037, "14602": 1037, "chawla": 1037, "vectorizermixin": 1037, "14430": 1037, "strip_accents_unicod": 1037, "15100": 1037, "gradi": 1037, "overflowerror": 1037, "15463": 1037, "norvan": 1037, "sahin": 1037, "14520": 1037, "11635": 1037, "alec": 1037, "13704": 1037, "15557": 1037, "14378": 1037, "masashi": [1037, 1039], "shibata": 1037, "ashim": 1037, "bhattarai": 1037, "15010": 1037, "skip_comput": 1037, "13773": 1037, "14356": 1037, "15393": 1037, "venkatachalam": [1037, 1038, 1039, 1040, 1041, 1044], "14646": 1037, "14028": 1037, "15429": 1037, "14706": 1037, "14108": 1037, "14170": 1037, "14296": 1037, "13618": 1037, "13995": 1037, "14458": 1037, "14591": 1037, "14864": 1037, "15044": 1037, "15086": 1037, "15038": 1037, "15082": 1037, "13213": 1037, "14647": 1037, "linalgerror": 1037, "13393": 1037, "13707": 1037, "training_data_": 1037, "14357": 1037, "14900": 1037, "socastro": [1037, 1043], "9951": 1037, "14936": 1037, "15083": 1037, "12789": 1037, "15274": 1037, "13938": 1037, "15049": 1037, "toccac": 1037, "ptocca": 1037, "13231": 1037, "dong": 1037, "13467": 1037, "14595": 1037, "14865": 1037, "l\u00e9onard": [1037, 1042], "binet": [1037, 1042], "14732": 1037, "14417": 1037, "15625": 1037, "12258": 1037, "14898": 1037, "matcovici": 1037, "14593": 1037, "reboul": 1037, "14549": 1037, "14704": 1037, "15096": 1037, "14629": 1037, "15488": 1037, "15490": 1037, "12569": 1037, "bicker": 1037, "9597": 1037, "wenbo": [1037, 1039], "zhao": [1037, 1039, 1040, 1041, 1042], "14336": 1037, "dexter": 1037, "9274": 1037, "perri": 1037, "13806": 1037, "ana\u00ebl": 1037, "beaugnon": 1037, "15119": 1037, "15053": 1037, "13290": 1037, "13987": 1037, "_pairwis": [1037, 1039], "13925": 1037, "robson": 1037, "15524": 1037, "xun": [1037, 1039], "12557": 1037, "14286": 1037, "15099": 1037, "baselibsvm": 1037, "_sparse_fit": 1037, "14894": 1037, "danna": 1037, "naser": 1037, "12887": 1037, "15028": 1037, "guan": 1037, "14381": 1037, "11232": 1037, "sievert": 1037, "10815": 1037, "14035": 1037, "14475": 1037, "14538": 1037, "14872": 1037, "upcast": [1037, 1041], "15094": 1037, "choose_check_classifiers_label": 1037, "enforce_estimator_tags_i": 1037, "mock": 1037, "mockdatafram": 1037, "checkingclassifi": 1037, "newton_cg": 1037, "random_choice_csc": 1037, "fast_dict": 1037, "parallel_help": 1037, "14902": 1037, "14971": 1037, "nep": 1037, "14702": 1037, "13013": 1037, "13875": 1037, "14680": 1037, "check_classifier_multioutput": 1037, "check_regressor_multioutput": 1037, "13392": 1037, "rok": 1037, "mihevc": 1037, "check_transformer_data_not_an_arrai": 1037, "14884": 1037, "alphonsu": 1037, "abbi": [1037, 1038], "popa": [1037, 1038], "abdur": 1037, "rahmaan": 1037, "janhang": 1037, "abenbihi": 1037, "abhinav": [1037, 1040], "sagar": 1037, "jana": 1037, "lagat": 1037, "alessandro": [1037, 1039, 1042], "surac": 1037, "siqueira": 1037, "alexgoryainov": 1037, "itk": [1037, 1038, 1039], "alexshack": [1037, 1038, 1039], "akinkunl": 1037, "kaseorg": 1037, "maldonado": [1037, 1040], "angela": [1037, 1038, 1042], "ambroz": [1037, 1038], "anisha": 1037, "keshavan": 1037, "gutierrez": 1037, "anuja": 1037, "archana": [1037, 1039], "alva": 1037, "arnaudstiegl": 1037, "arpanchowdhri": 1037, "ashimb9": 1037, "ayomid": 1037, "bamidel": 1037, "baran": 1037, "buluttekin": 1037, "barrycg": 1037, "bill": [1037, 1038], "mill": 1037, "biswadip": 1037, "mandal": 1037, "blackd0t": 1037, "barklei": 1037, "c56poni": 1037, "camilaagw": 1037, "cartman_nabana": 1037, "catajara": 1037, "cgsavard": [1037, 1038], "vesteghem": 1037, "dakota": 1037, "grusak": 1037, "datenbergwerk": 1037, "dormagen": 1037, "deeplook": 1037, "drgfreeman": 1037, "cashman": 1037, "edvardlindelof": 1037, "ndirangu": [1037, 1041], "eunseop": 1037, "jeong": 1037, "fanni": 1037, "federicopisanu": 1037, "divo": 1037, "flaviomorelli": 1037, "francidona": 1037, "franco": 1037, "luqu": 1037, "freder": 1037, "haas": 1037, "g0g0gadget": 1037, "altai": 1037, "vale": 1037, "rio": [1037, 1039, 1040, 1041], "ganevgv": 1037, "gdex1": 1037, "getgaurav2": 1037, "gideon": 1037, "sonoiya": 1037, "gpapadok": [1037, 1041], "mogavero": 1037, "h4dr1en": 1037, "hadshirt": 1037, "hailei": [1037, 1038], "nguyen": [1037, 1038, 1041, 1042], "hannah": [1037, 1039, 1041], "bruce": [1037, 1038], "macdonald": [1037, 1038], "honglu": 1037, "ingrid": 1037, "spielman": 1037, "a16": [1037, 1038], "jaehong": 1037, "jai": [1037, 1041], "jeromedock": 1037, "jesper": 1037, "dramsch": 1037, "joanna": 1037, "ortiz": [1037, 1043], "kanika": 1037, "sabharw": 1037, "katarina": [1037, 1039], "slama": [1037, 1039], "kellycarmodi": 1037, "eth": 1037, "kensuk": 1037, "arai": 1037, "kesshi": [1037, 1038], "kevad": 1037, "lofti": [1037, 1038], "winata": [1037, 1039], "sheng": 1037, "dolmatov": 1037, "kirthi": 1037, "shankar": 1037, "sivamani": 1037, "katyal": 1037, "lakshmi": 1037, "krishnan": 1037, "lalliacqua": [1037, 1040], "lbfin": 1037, "loopym": 1037, "lostcoast": 1037, "huynh": [1037, 1039], "lrjball": [1037, 1038], "roeder": 1037, "maggiecheg": [1037, 1041], "maithreyi": 1037, "venkatesh": 1037, "maltimor": 1037, "maocx": 1037, "douriez": [1037, 1038], "oywa": 1037, "aladago": 1037, "mbillingr": 1037, "clare": 1037, "micah": 1037, "miguelbarao": 1037, "mina": [1037, 1038], "naghshhnejad": [1037, 1038], "motmoti": 1037, "mschaffenroth": 1037, "natasha": 1037, "nezar": 1037, "nidhin": 1037, "pattaniyil": 1037, "nishan": 1037, "mann": 1037, "nitya": 1037, "mandyam": 1037, "novaya": [1037, 1040], "nxorabl": 1037, "oleg": 1037, "stikhin": 1037, "saleem": 1037, "panpiort8": [1037, 1039], "paula": [1037, 1038], "poorna": [1037, 1039], "pspachtholz": [1037, 1038, 1039], "qdeffens": [1037, 1040], "garg": [1037, 1038], "rapha\u00ebl": 1037, "bournhonesqu": 1037, "reza": 1037, "gharibi": 1037, "payn": 1037, "rlm": 1037, "juergen": [1037, 1042], "sanjabi": 1037, "ruchitagard": 1037, "ruth": 1037, "waithera": 1037, "sackei": 1037, "samesh": [1037, 1038], "lakhotia": [1037, 1038], "sewook": 1037, "dare": 1037, "shreya": 1037, "simoncw": 1037, "smujjiga": 1037, "s\u00f6nke": 1037, "behrend": 1037, "soumirai": 1037, "steinfurt": [1037, 1039], "cowlei": 1037, "th0rwa": [1037, 1038], "theoptip": [1037, 1038], "theotheo": 1037, "thierno": 1037, "ibrahima": 1037, "diop": 1037, "schmitt": [1037, 1038], "tilen": 1037, "kusterl": 1037, "timsaur": 1037, "tola": 1037, "topisan": 1037, "ttang131": 1037, "veerlosar": 1037, "luzgin": 1037, "jeanselm": 1037, "lostanlen": 1037, "vnherdeiro": 1037, "wendi": 1037, "willdarnel": 1037, "wolframalpha": 1037, "xcjason": 1037, "martian": 1037, "xsat": 1037, "yinglr": 1037, "yokasr": 1037, "maxin": [1037, 1038], "yulia": 1037, "zamrii": 1037, "feng": [1037, 1039, 1040, 1041], "17959": 1038, "17848": 1038, "17742": 1038, "17995": 1038, "thomaz": 1038, "santana": [1038, 1041], "dsouza": [1038, 1039, 1040, 1041], "17433": 1038, "17985": 1038, "multinomialdevi": 1038, "logloss": 1038, "17694": 1038, "rempfler": 1038, "tsutomu": 1038, "kusanagi": [1038, 1040], "17357": 1038, "18016": 1038, "x_copi": 1038, "17914": 1038, "15730": 1038, "forrest": [1038, 1039], "17309": 1038, "swier": [1038, 1039], "heer": 1038, "17812": 1038, "bruno": [1038, 1039, 1040], "idl": 1038, "17235": 1038, "17204": 1038, "changed_onli": 1038, "17205": 1038, "15005": [1038, 1040], "slep009": [1038, 1040, 1041], "estimator_samples_": 1038, "16149": 1038, "11950": 1038, "11514": 1038, "16075": 1038, "16484": 1038, "16257": 1038, "simona": [1038, 1039, 1040], "maggio": [1038, 1039, 1040], "16801": 1038, "rcwoolston": 1038, "16431": 1038, "14048": 1038, "15963": 1038, "16084": 1038, "15950": 1038, "stephani": 1038, "15980": 1038, "wconnel": 1038, "15709": 1038, "15707": 1038, "maciej": 1038, "mikulski": 1038, "16006": 1038, "rushabh": 1038, "vasani": 1038, "streamhandl": 1038, "logger": 1038, "handler": 1038, "16451": 1038, "16280": 1038, "16837": 1038, "wornbb": 1038, "15669": 1038, "chaitanya": 1038, "16224": 1038, "schwetlick": [1038, 1039], "gelavizh": 1038, "ahmadi": 1038, "marija": [1038, 1039], "vlajic": [1038, 1039], "wheeler": [1038, 1039], "16841": 1038, "16655": 1038, "16718": 1038, "miotto": 1038, "16981": 1038, "g\u00f3rski": [1038, 1039], "14696": 1038, "14516": 1038, "15582": 1038, "16069": 1038, "bail": 1038, "16183": 1038, "16182": 1038, "santhosh": 1038, "16437": 1038, "hwan": 1038, "cho": 1038, "16539": 1038, "deros": 1038, "16692": 1038, "16663": 1038, "15834": 1038, "santiago": 1038, "mola": [1038, 1044], "16103": 1038, "divyaprabha": 1038, "selectormixin": 1038, "16132": 1038, "trimeta": 1038, "15503": 1038, "15782": 1038, "plgreenliru": 1038, "16403": 1038, "narendra": [1038, 1044], "mukherje": 1038, "16508": 1038, "15864": 1038, "14300": 1038, "15436": 1038, "15652": 1038, "15179": 1038, "angelaambroz": 1038, "15773": 1038, "15655": 1038, "14848": 1038, "absgrad": 1038, "_newton_cg": 1038, "16266": 1038, "standard_coef_": 1038, "standard_intercept_": 1038, "average_coef_": 1038, "average_intercept_": 1038, "16261": 1038, "brandt": 1038, "16849": 1038, "14264": 1038, "17021": 1038, "16323": 1038, "16362": 1038, "16442": 1038, "parson": [1038, 1040], "rick": 1038, "mackenbach": 1038, "16993": 1038, "emit": 1038, "15622": 1038, "mors": 1038, "15918": 1038, "kubin": 1038, "fit_grid_point": 1038, "16401": 1038, "pratama": 1038, "sutiono": 1038, "15953": 1038, "15959": 1038, "16111": 1038, "16090": 1038, "jayaratn": [1038, 1039, 1042, 1043], "14075": 1038, "meyer89": 1038, "16117": 1038, "15785": 1038, "16245": 1038, "16585": 1038, "15762": 1038, "16466": 1038, "16632": 1038, "maura": 1038, "pintor": 1038, "battista": 1038, "biggio": 1038, "15946": 1038, "ngshya": 1038, "32767": 1038, "mersenn": 1038, "twister": 1038, "31bit": 1038, "63bit": 1038, "crude": 1038, "postprocessor": 1038, "lemir": 1038, "13511": 1038, "kennel": 1038, "11296": 1038, "15558": 1038, "15806": 1038, "16331": 1038, "batiss": 1038, "15926": 1038, "16021": 1038, "sparsearrai": 1038, "16728": 1038, "uint": 1038, "17032": 1038, "_safe_tag": 1038, "16950": 1038, "15380": 1038, "16726": 1038, "16112": 1038, "16622": 1038, "17061": 1038, "aleksandra": 1038, "kocot": 1038, "alonso": [1038, 1040], "allend": [1038, 1040], "ana": [1038, 1040], "casado": 1038, "ankit810": 1038, "arunav": 1038, "konwar": 1038, "maingret": 1038, "beier": 1038, "berni": 1038, "bharathi": 1038, "brigi": [1038, 1039], "castachick": 1038, "castor": 1038, "corri": 1038, "bartelheim": 1038, "dani\u00ebl": 1038, "gelder": 1038, "daphn": 1038, "breuer": 1038, "cort": [1038, 1039, 1042, 1043], "dbauer9": 1038, "borovikova": 1038, "eln": 1038, "emili": [1038, 1039], "leung": 1038, "evgeni": 1038, "chasnovski": 1038, "fabiana": 1038, "facundo": [1038, 1041], "ferr\u00edn": 1038, "franziska": 1038, "boenisch": 1038, "bolmier": [1038, 1039, 1043], "gholdman1": 1038, "gonthier": 1038, "hao": [1038, 1039, 1041, 1042], "chun": [1038, 1039, 1041, 1042, 1043], "haoyin": [1038, 1040, 1041], "h\u00e9lion": 1038, "bourboux": 1038, "himanshu": [1038, 1041], "hirofumi": [1038, 1039], "suzuki": [1038, 1039], "huangk10": 1038, "kemenad": 1038, "hye": 1038, "sung": 1038, "indecisiveus": [1038, 1039], "inderjeet": 1038, "jjmistri": 1038, "haitz": [1038, 1040, 1041], "legarreta": [1038, 1040, 1041], "gorro\u00f1o": [1038, 1040, 1041], "judithabk6": 1038, "jumon": 1038, "kathryn": 1038, "krishnachaitanya9": 1038, "gia": 1038, "thuan": 1038, "lkubin": 1038, "lopusz": 1038, "lucgiffon": 1038, "lucyleeow": 1038, "kemk": 1038, "magda": 1038, "zielinska": 1038, "mandi": [1038, 1041], "gu": [1038, 1039, 1041], "manish": 1038, "aradwad": 1038, "mariana": 1038, "meirel": 1038, "mariel": 1038, "mc4229": 1038, "shoemak": 1038, "micha\u0142": 1038, "s\u0142apek": 1038, "mojca": 1038, "bertoncelj": 1038, "narendramukherje": 1038, "nicolasservel": 1038, "nkish": 1038, "noa": [1038, 1044], "tamir": [1038, 1041], "olicairn": 1038, "ur": 1038, "lenz": [1038, 1042], "delanou": 1038, "qizhi": 1038, "quang": 1038, "rachelcjordan": 1038, "raduspaimoc": 1038, "riccardo": [1038, 1044], "folloni": 1038, "ritchi": 1038, "rori": 1038, "hartong": 1038, "redden": 1038, "sambhav": 1038, "kothari": 1038, "santhoshbala18": 1038, "sarat": 1038, "addep": 1038, "scibol": 1038, "kie\u00dfl": 1038, "sergiodsr": 1038, "shiki": 1038, "shubh": 1038, "chatterje": 1038, "simonamaggio": [1038, 1039, 1040], "snowhit": 1038, "stareh": 1038, "marsh": 1038, "sunmi": 1038, "yoon": 1038, "talgatomarov": 1038, "tamirlan1": 1038, "nonner": 1038, "vink": [1038, 1040], "tiphain": 1038, "viard": 1038, "titu": 1038, "vachan": 1038, "vandana": 1038, "iyer": 1038, "waelbenamara": 1038, "wderos": 1038, "wenliwyan": 1038, "windber": 1038, "19579": 1039, "19646": 1039, "stopiter": 1039, "19922": 1039, "19732": 1039, "ishikawa": [1039, 1040], "19407": 1039, "ushtanit": [1039, 1040], "19982": 1039, "19939": 1039, "halvic": 1039, "19703": 1039, "sobkevich": 1039, "villaz\u00f3n": 1039, "terraza": 1039, "fonari": [1039, 1040], "19182": 1039, "yosuk": [1039, 1040], "kobayashi": [1039, 1040], "19721": 1039, "19659": 1039, "19211": 1039, "19847": 1039, "xiaoyu": 1039, "chai": [1039, 1042, 1043], "19308": 1039, "19234": 1039, "19727": 1039, "delong": [1039, 1040], "19888": 1039, "19924": 1039, "19271": 1039, "zhaowei": 1039, "19580": 1039, "brice": [1039, 1040], "adamson": 1039, "wil": 1039, "yegelwel": 1039, "css": 1039, "19417": 1039, "19179": 1039, "19126": 1039, "17448": 1039, "17107": 1039, "17546": 1039, "17856": 1039, "17984": 1039, "riedmann": 1039, "francesco": [1039, 1042], "casalegno": 1039, "18052": 1039, "sean": [1039, 1040, 1042], "stallei": 1039, "17937": 1039, "counts_": 1039, "init_size_": 1039, "17864": 1039, "17616": 1039, "18167": 1039, "18256": 1039, "jayratn": 1039, "16392": 1039, "17095": 1039, "18746": 1039, "norm_y_weight": 1039, "x_mean_": 1039, "y_mean_": 1039, "x_std_": 1039, "y_std_": 1039, "18768": 1039, "18302": 1039, "md5": 1039, "checksum": 1039, "14800": 1039, "17396": 1039, "jiaxiang": 1039, "17491": 1039, "18280": 1039, "17499": 1039, "17610": 1039, "18525": 1039, "11064": 1039, "17414": 1039, "18149": 1039, "17679": 1039, "18528": 1039, "villanova": [1039, 1040], "14446": 1039, "18394": 1039, "16985": 1039, "garbag": 1039, "18334": 1039, "multicor": [1039, 1040], "18341": 1039, "egor": 1039, "smirnov": 1039, "18410": 1039, "17702": 1039, "18326": 1039, "changedbehaviorwarn": 1039, "nonblasdotwarn": 1039, "17804": 1039, "17367": 1039, "15427": 1039, "gangesh": 1039, "gudmalwar": 1039, "6545": 1039, "17159": 1039, "15361": 1039, "17878": 1039, "17090": 1039, "_check_bounds_param": 1039, "12638": 1039, "lannuzel": 1039, "17526": 1039, "ayako": 1039, "yagi": 1039, "17612": 1039, "srimukh": 1039, "sripada": 1039, "16493": 1039, "darshan": 1039, "15636": 1039, "18987": 1039, "16619": 1039, "16906": 1039, "roei": 1039, "kahni": 1039, "18293": 1039, "16289": 1039, "kishimoto": 1039, "18639": 1039, "13003": 1039, "s\u00e1nchez": 1039, "18545": 1039, "laurenz": 1039, "reitsam": 1039, "17578": 1039, "knox": 1039, "6624": 1039, "marijn": 1039, "vliet": 1039, "18121": 1039, "18607": 1039, "fhaselbeck": 1039, "18622": 1039, "haesun": [1039, 1042, 1043], "10493": 1039, "17997": 1039, "maisonneuv": 1039, "square_dist": 1039, "17662": 1039, "18278": 1039, "17412": 1039, "16625": 1039, "10591": 1039, "karnowski": 1039, "plot_det_curv": [1039, 1040], "18176": 1039, "10708": 1039, "15007": 1039, "hathidara": 1039, "10711": 1039, "17192": 1039, "avi": [1039, 1040], "17225": 1039, "17569": 1039, "17651": 1039, "mato": 1039, "17777": 1039, "shubhanshu": 1039, "mishra": [1039, 1040], "17826": 1039, "decal": 1039, "willard": 1039, "17935": 1039, "cari": 1039, "goltermann": 1039, "18114": 1039, "18405": 1039, "yakov": 1039, "pchelintsev": 1039, "13900": 1039, "17478": 1039, "teon": 1039, "13204": 1039, "kosic": 1039, "18527": 1039, "18343": 1039, "devi": 1039, "sandeep": 1039, "18595": 1039, "18222": 1039, "18266": 1039, "subrat": 1039, "sahu": 1039, "15126": 1039, "17987": 1039, "17233": 1039, "zolisa": 1039, "bleki": 1039, "histgradientboost": 1039, "18124": 1039, "brocchini": 1039, "armstrong": 1039, "17427": 1039, "17038": 1039, "neighborsbas": [1039, 1042], "17148": 1039, "18691": 1039, "18370": 1039, "18612": 1039, "17603": 1039, "17604": 1039, "17606": 1039, "17608": 1039, "17609": 1039, "17633": 1039, "17661": 1039, "17932": 1039, "16352": 1039, "17759": 1039, "18269": 1039, "17876": 1039, "18429": 1039, "biernat": 1039, "17317": 1039, "17406": 1039, "wick": 1039, "18406": 1039, "17833": 1039, "yashika": 1039, "18510": 1039, "18447": 1039, "16066": 1039, "18682": 1039, "16935": 1039, "17193": 1039, "16335": 1039, "14982": 1039, "11682": 1039, "patric": [1039, 1040], "15763": 1039, "16530": 1039, "shuhua": 1039, "17386": 1039, "17187": 1039, "x_idx_sort": 1039, "17614": 1039, "check_methods_sample_order_invari": [1039, 1041], "17598": 1039, "ngo": 1039, "17992": 1039, "endian": 1039, "17644": 1039, "18508": 1039, "abo7atm": 1039, "spannbauer": 1039, "deodhar": 1039, "alexandracraciun": 1039, "amy12xx": 1039, "tiwari": 1039, "choraria": 1039, "subramaniyan": 1039, "kushwaha": 1039, "atsushi": [1039, 1040], "nukariya": [1039, 1040], "aura": 1039, "autoviz": 1039, "auto_viml": 1039, "avinash": 1039, "anak": 1039, "barankaraku": 1039, "barberogaston": 1039, "beatrizsmg": 1039, "mainy": 1039, "bossan": [1039, 1041, 1042, 1043], "pedigo": [1039, 1040], "bhavika": 1039, "devnani": 1039, "biprateep": 1039, "dei": 1039, "bmaisonn": 1039, "byron": 1039, "ceethinwa": [1039, 1040], "chaitanyamog": 1039, "clmbst": 1039, "coelhudo": 1039, "crispinlogan": [1039, 1042, 1043], "cristina": 1039, "mula": 1039, "darioka": [1039, 1041, 1042], "declan": 1039, "neill": 1039, "deeksha": 1039, "madan": 1039, "fiegel": [1039, 1040, 1042], "khoo": 1039, "eschibli": 1039, "fran": [1039, 1040, 1041], "larsson": [1039, 1040, 1041], "sheni": 1039, "genvalen": [1039, 1040, 1041, 1042, 1043], "kiragu": 1039, "gesa": 1039, "stupperich": 1039, "ghislain": 1039, "vaillant": 1039, "gim": 1039, "seng": 1039, "chevali": 1039, "bohl": [1039, 1041], "schole": 1039, "hitesh": 1039, "somani": 1039, "hoda1394": 1039, "moin": 1039, "hugorichard": 1039, "isuru": 1039, "wiryadi": 1039, "j0rd1smit": 1039, "jaehyun": 1039, "ahn": 1039, "tae": 1039, "hoctor": 1039, "vese": 1039, "jeevan": 1039, "jeroenpeterbo": 1039, "jhay": 1039, "jigna": 1039, "panchal": 1039, "jim0421": 1039, "joaquin": 1039, "gorb": 1039, "moya": 1039, "kartik": 1039, "chugh": 1039, "kaylani2": 1039, "kendrick": 1039, "cetina": 1039, "kenni": 1039, "isakov": 1039, "koki": 1039, "nishihara": 1039, "krum": [1039, 1041], "arnaudov": [1039, 1041], "oldja": 1039, "guitton": 1039, "mariam": 1039, "l\u00f6ning": 1039, "scheubrein": 1039, "megasari": 1039, "mathschi": 1039, "giudic": 1039, "milan": 1039, "straka": 1039, "muoki": 1039, "caleb": 1039, "haiat": 1039, "nadia": 1039, "tahiri": 1039, "ph": 1039, "hamada": 1039, "neil": 1039, "botelho": 1039, "nil": 1039, "noelano": 1039, "oj_lappi": 1039, "oleh": [1039, 1041], "kozynet": [1039, 1041], "pankaj": 1039, "jindal": 1039, "pardeep": 1039, "parthiv": 1039, "chigurupati": 1039, "pgithub": 1039, "probinette4": 1039, "pwalchessen": 1039, "rachel": [1039, 1042], "fischoff": 1039, "toshniw": 1039, "rafei": 1039, "iqbal": 1039, "rahul": [1039, 1044], "jakhar": 1039, "rachum": 1039, "ramyanp": [1039, 1040], "rauwuckl": 1039, "ravi": [1039, 1042], "kiran": 1039, "boggavarapu": 1039, "rishi": 1039, "advani": 1039, "rithvik": 1039, "romijnd": 1039, "tavenard": 1039, "rubi": 1039, "werman": 1039, "ryotaro": 1039, "tsukada": 1039, "sadak": 1039, "khandelw": 1039, "ezebunandu": 1039, "kimbinyi": 1039, "shail": 1039, "keller": 1039, "shao": [1039, 1040, 1041], "shooter23": [1039, 1040], "soledad": 1039, "galli": 1039, "subrat93": 1039, "sunitha": 1039, "selvan": 1039, "kusanagi2": 1039, "terenc": [1039, 1040], "honl": [1039, 1040], "thij": [1039, 1042, 1043], "thomas9292": 1039, "thorben": 1039, "tijanajovanov": 1039, "timo": 1039, "tnwei": 1039, "ufmay": 1039, "umberto": 1039, "lupo": 1039, "vika": [1039, 1041], "viniciu": [1039, 1040], "fuck": [1039, 1040], "violeta": 1039, "watchtheblur": 1039, "willpeppo": 1039, "xethan": 1039, "qianm": 1039, "yue": 1039, "yutaro": 1039, "ikeda": 1039, "zacchari": 1039, "ramzi": 1039, "zoj613": 1039, "21271": 1040, "21833": 1040, "siavash": 1040, "rezazadeh": 1040, "19210": 1040, "21295": 1040, "22050": 1040, "21991": 1040, "19869": 1040, "21481": [1040, 1041], "andr\u00e9": [1040, 1041, 1043], "babino": [1040, 1041], "disconnect": 1040, "21915": 1040, "21694": 1040, "minknowski": 1040, "cdist": 1040, "21741": 1040, "21871": 1040, "21845": 1040, "21517": 1040, "21917": 1040, "21552": 1040, "escap": [1040, 1042], "21493": 1040, "21199": 1040, "20638": 1040, "bohn\u00e9": 1040, "21179": 1040, "21195": 1040, "21130": 1040, "20761": 1040, "21251": 1040, "min_idf": 1040, "max_idf": 1040, "20752": 1040, "alek": [1040, 1041], "lefebvr": [1040, 1041], "21340": 1040, "21093": 1040, "21351": 1040, "cve": 1040, "28975": 1040, "21336": 1040, "_check_sample_weight": 1040, "only_non_neg": 1040, "20880": 1040, "andr\u00e1": [1040, 1041, 1042, 1043], "if_delegate_has_method": [1040, 1041], "21145": 1040, "zahlii": 1040, "21389": 1040, "20002": 1040, "19310": 1040, "least_squar": 1040, "19733": 1040, "lad": 1040, "absolute_loss": 1040, "20165": 1040, "18444": 1040, "18010": 1040, "threadsaf": 1040, "18736": 1040, "17443": 1040, "19641": 1040, "20087": 1040, "fauchereau": 1040, "19002": 1040, "19052": 1040, "yusuk": 1040, "nagasaka": 1040, "17622": 1040, "19024": 1040, "franki": 1040, "robertson": 1040, "20117": 1040, "natchiappan": [1040, 1041], "19883": 1040, "20597": 1040, "20899": 1040, "20200": 1040, "fit_": 1040, "partial_fit_": 1040, "19297": 1040, "20560": 1040, "18393": 1040, "bittarello": 1040, "19263": 1040, "19244": 1040, "18459": 1040, "nd": [1040, 1044], "18898": 1040, "ora": 1040, "phongpanagnam": 1040, "21080": 1040, "ledoit_wolf_shrinkag": 1040, "20416": 1040, "defoi": 1040, "20583": 1040, "19365": 1040, "ateif": 1040, "sara": 1040, "19669": 1040, "importlib": 1040, "pyoxid": 1040, "20297": 1040, "20209": 1040, "19011": 1040, "20729": 1040, "12069": 1040, "19046": 1040, "surya": [1040, 1041], "18433": 1040, "19198": 1040, "19159": 1040, "beno\u00eet": 1040, "mal\u00e9zieux": 1040, "19908": 1040, "20512": 1040, "20960": 1040, "cgroup": [1040, 1041], "quota": [1040, 1041], "20477": 1040, "19799": 1040, "19564": 1040, "19836": 1040, "19162": 1040, "10096": 1040, "fenil": 1040, "suchak": 1040, "20159": 1040, "murata": [1040, 1041], "20534": 1040, "19296": 1040, "19035": 1040, "19520": 1040, "18964": 1040, "19401": 1040, "relova": 1040, "17169": 1040, "dmytro": 1040, "lituiev": 1040, "20380": 1040, "pulido": 1040, "felip": [1040, 1041, 1042, 1043], "bidu": [1040, 1041], "rutter": 1040, "20515": 1040, "carsten": 1040, "allefeld": 1040, "19568": 1040, "shyam": 1040, "20207": 1040, "tomohiro": 1040, "endo": 1040, "20161": 1040, "shuhei": 1040, "kayawari": 1040, "arka204": [1040, 1042], "20431": 1040, "pfaffel": 1040, "19428": 1040, "hamoumi": 1040, "19411": 1040, "20959": 1040, "20554": 1040, "xiangyin": 1040, "kong": 1040, "9978": 1040, "10027": 1040, "16449": 1040, "20231": 1040, "naka": 1040, "19571": 1040, "20155": 1040, "oura": [1040, 1041, 1042], "19004": 1040, "midvidi": 1040, "19055": 1040, "19172": 1040, "19426": 1040, "19499": 1040, "strubel": 1040, "19616": 1040, "19391": 1040, "19390": 1040, "linearmodel": 1040, "17743": 1040, "17772": 1040, "17746": 1040, "17785": 1040, "17750": 1040, "17769": 1040, "20683": 1040, "19491": 1040, "19472": 1040, "shortest_path": 1040, "20531": 1040, "19415": 1040, "17036": 1040, "20326": 1040, "uttam": 1040, "9843": 1040, "19643": 1040, "attard": 1040, "19784": 1040, "18328": 1040, "20312": 1040, "divyanshu": 1040, "deoli": 1040, "18543": 1040, "20552": 1040, "19278": 1040, "20030": 1040, "tingshan": 1040, "18649": 1040, "rodion": 1040, "martynov": 1040, "20619": 1040, "baseshufflesplit": 1040, "20056": 1040, "pabloduque0": 1040, "prematur": 1040, "20904": 1040, "tomasz": 1040, "jakubek": [1040, 1041], "18925": 1040, "poznik": [1040, 1041, 1042], "18842": 1040, "19473": 1040, "jiefangxuanyan": 1040, "20072": 1040, "20842": 1040, "mart\u00edn": [1040, 1041], "19631": 1040, "19790": 1040, "flynn": [1040, 1042], "18368": 1040, "19483": 1040, "20526": 1040, "19069": 1040, "19041": 1040, "20250": 1040, "20652": 1040, "19934": 1040, "gleb": [1040, 1042, 1043, 1044], "levitskii": 1040, "19734": 1040, "robinson": 1040, "19752": 1040, "zhehao": [1040, 1041, 1042, 1043], "19527": 1040, "19788": 1040, "19356": 1040, "makoeppel": 1040, "19879": 1040, "19906": 1040, "20727": 1040, "20961": 1040, "n_input_features_": 1040, "20240": 1040, "20843": 1040, "18959": 1040, "wstate": 1040, "20023": 1040, "19336": 1040, "20272": 1040, "19459": 1040, "bezuidenhout": 1040, "clifford": 1040, "akai": 1040, "nettei": 1040, "19948": 1040, "20657": 1040, "19766": 1040, "20385": 1040, "_weighted_percentil": 1040, "huberlossfunct": 1040, "20528": 1040, "_safe_index": [1040, 1044], "20673": 1040, "is_scalar_nan": 1040, "assert_warn": 1040, "assert_warns_messag": 1040, "20521": 1040, "abdulelah": 1040, "mesfer": 1040, "adrian": [1040, 1041, 1042], "garcia": 1040, "badaracco": 1040, "sad\u0142ocha": 1040, "rubial": 1040, "alessia": 1040, "marcolini": 1040, "alihan": 1040, "zihna": 1040, "alin": 1040, "amol": 1040, "deshmukh": 1040, "pessoa": 1040, "anavelyz": 1040, "ashish": [1040, 1043], "ashvith": 1040, "shetti": 1040, "baam": [1040, 1041], "baptbillard": 1040, "bmalezieux": 1040, "bumblebe": 1040, "caherrera": 1040, "meli": [1040, 1041, 1042], "chrissobel": 1040, "yeh": 1040, "chuliang": 1040, "cliffordemmanuel": 1040, "conner": 1040, "shen": 1040, "dimitri": [1040, 1041, 1042, 1043, 1044], "papadopoulo": [1040, 1041, 1042, 1043, 1044], "orfano": [1040, 1041, 1042, 1043, 1044], "dmallia17": 1040, "ds_ana": 1040, "jardim": 1040, "edwinwenink": 1040, "eleni": 1040, "markou": 1040, "ericellwang": [1040, 1041], "ezri": 1040, "mudd": 1040, "fato": 1040, "morina": 1040, "hafner": 1040, "flyingdutchman23": 1040, "uwha": [1040, 1041], "bereng": 1040, "frederick": 1040, "frellwan": 1040, "vicent": [1040, 1041, 1042], "geroldcsend": 1040, "glen": 1040, "gl\u00f2ria": [1040, 1042], "mu\u00f1oz": [1040, 1042], "gregorystrubel": 1040, "groceryheist": 1040, "guiweb": 1040, "haidar": [1040, 1041], "almubarak": [1040, 1041], "moritz": [1040, 1042], "g\u00fcnther": [1040, 1044], "mirza": 1040, "harutaka": 1040, "kawamura": 1040, "hassan": 1040, "alsawadi": 1040, "geovan": [1040, 1041], "gome": [1040, 1041], "lima": [1040, 1041], "ilic": 1040, "ikko": 1040, "ashimin": 1040, "isaack": 1040, "mungui": 1040, "ishaan": 1040, "bhat": [1040, 1042, 1043, 1044], "ishan": [1040, 1041], "iwhalv": 1040, "preiss": 1040, "budarz": 1040, "jannik": 1040, "jennif": 1040, "jianzhu": 1040, "guo": 1040, "jnboehm": 1040, "johanwork": 1040, "paton": 1040, "n\u00e1pole": 1040, "julio": 1040, "julyrashchenko": 1040, "jvm": 1040, "kadatatlu": 1040, "kishor": 1040, "karen": 1040, "palacio": 1040, "kmatt10": 1040, "kobaski": 1040, "kot271828": 1040, "kunj": 1040, "kurumeyuta": 1040, "kxytim": 1040, "lacrosse91": 1040, "laveen": 1040, "bagai": 1040, "leonardo": 1040, "rocco": [1040, 1041, 1042], "uieda": 1040, "leopoldo": 1040, "corona": 1040, "lsturtew": 1040, "lucca": 1040, "quadro": 1040, "ly648499246": 1040, "mabu": 1040, "manaileng": 1040, "mariangela": 1040, "marielaraj": 1040, "hirzel": 1040, "mateo": 1040, "nore\u00f1a": 1040, "mathi": 1040, "batoul": 1040, "calcot": 1040, "prieur": 1040, "\u00f6zer": 1040, "miao": 1040, "cai": 1040, "karbownik": 1040, "michalkrawczyk": [1040, 1041], "mitzi": [1040, 1041], "mlondschien": 1040, "haseeb": [1040, 1041], "khoual": 1040, "jarir": 1040, "kanji": 1040, "nadim": 1040, "kawwa": 1040, "nanshan": 1040, "naozin555": 1040, "fultz": 1040, "nic": 1040, "annau": 1040, "stefani": [1040, 1042, 1043, 1044, 1045], "nigel": 1040, "bosch": 1040, "nodar": 1040, "okroshiashvili": 1040, "ogbonna": 1040, "chibuik": 1040, "ogordon100": 1040, "phongpanangam": 1040, "duqu": 1040, "ibieta": 1040, "jimenez": [1040, 1041], "lacouth": 1040, "olszewski": 1040, "dye": 1040, "pierreattard": [1040, 1041], "yve": 1040, "borgn": 1040, "pranayanchuri": 1040, "princ": 1040, "canuma": 1040, "putschblo": 1040, "ranjanikrishnan": 1040, "rene": 1040, "corneil": 1040, "ricardojnf": 1040, "richardscottoz": 1040, "sandi": 1040, "khosasi": 1040, "benhur": 1040, "flore": 1040, "shinehid": 1040, "shinnar": 1040, "tootoonian": 1040, "solosil": 1040, "kolawol": 1040, "stagg": 1040, "swpeas": 1040, "tfifi": 1040, "caswel": [1040, 1043], "timotheemathieu": 1040, "wolodzko": 1040, "tliu68": 1040, "uhmann": 1040, "tom1092": 1040, "tom\u00e1": [1040, 1041], "moreyra": 1040, "tommaso": 1040, "noto": 1040, "tsuga": 1040, "vang": 1040, "gkiasta": 1040, "vil\u00e9m": 1040, "zouhar": 1040, "vlasovet": 1040, "waijean": 1040, "whidou": 1040, "xiaoyuchai": 1040, "yasmeen": 1040, "alsaedi": 1040, "yoch": 1040, "yusukenagasaka": 1040, "yzhenman": 1040, "zeyusun": 1040, "zhaoweiwang": 1040, "msvcp140": 1041, "dll": 1041, "24631": 1041, "24446": 1041, "10805": 1041, "mathia": 1041, "23471": 1041, "24015": 1041, "23990": 1041, "23833": 1041, "24017": 1041, "sorski": [1041, 1042], "23395": 1041, "23636": 1041, "22063": 1041, "22059": 1041, "kurz": [1041, 1042], "23608": 1041, "23548": 1041, "24087": 1041, "23273": 1041, "23194": 1041, "23198": 1041, "lise": 1041, "kleiber": 1041, "23358": 1041, "23264": 1041, "feature_names_in": 1041, "23299": 1041, "23214": 1041, "collot": [1041, 1042], "baak": 1041, "23370": 1041, "23410": 1041, "compute_sample_weight": 1041, "23115": 1041, "22868": 1041, "multiindex": 1041, "22410": 1041, "23271": 1041, "21987": 1041, "22064": 1041, "22065": 1041, "22288": 1041, "22320": 1041, "21219": 1041, "21542": 1041, "23098": 1041, "22318": 1041, "23036": 1041, "binary_crossentropi": 1041, "23040": 1041, "23046": 1041, "22856": 1041, "21032": 1041, "18170": 1041, "21038": 1041, "14975": 1041, "22526": 1041, "23095": 1041, "silk": 1041, "20031": 1041, "krawczyk": 1041, "21148": 1041, "22255": 1041, "21881": 1041, "vassard": 1041, "22217": 1041, "21735": 1041, "22154": 1041, "22537": 1041, "iofal": 1041, "arisa": [1041, 1042], "22775": 1041, "22913": 1041, "randomgeek78": 1041, "22493": 1041, "19680": 1041, "thibaut": 1041, "22119": 1041, "22016": 1041, "22015": 1041, "19747": 1041, "attalla": 1041, "22498": 1041, "21482": 1041, "pujalt": 1041, "22412": 1041, "16605": 1041, "21901": 1041, "rileran": 1041, "23113": 1041, "ilion": 1041, "beyst": 1041, "21425": 1041, "stefanini": 1041, "16948": 1041, "patricio": 1041, "cerda": 1041, "22002": 1041, "21109": 1041, "iter_offset": 1041, "return_inner_stat": 1041, "inner_stat": 1041, "inner_stats_": 1041, "iter_offset_": 1041, "18975": 1041, "22111": 1041, "22181": 1041, "21334": 1041, "21705": 1041, "stanlei": [1041, 1042, 1043], "21432": 1041, "22806": 1041, "jihan": 1041, "benni": 1041, "21713": 1041, "haya": 1041, "21567": 1041, "maggi": 1041, "chege": 1041, "22300": 1041, "15948": 1041, "sysuresh": 1041, "22553": 1041, "19490": 1041, "ferrin": 1041, "22120": 1041, "15984": 1041, "okon": 1041, "22696": 1041, "22486": 1041, "21800": 1041, "20567": 1041, "22159": 1041, "20811": 1041, "21814": 1041, "16748": 1041, "siqi": 1041, "22215": 1041, "23047": 1041, "22695": 1041, "22697": 1041, "21762": 1041, "22106": 1041, "gijsber": 1041, "21632": 1041, "genesi": [1041, 1043], "valencia": [1041, 1043], "22566": 1041, "22908": 1041, "23097": 1041, "23079": 1041, "20803": 1041, "23023": 1041, "21573": 1041, "21832": 1041, "20145": 1041, "22356": 1041, "18482": 1041, "gameiro": 1041, "kharsa": 1041, "22370": 1041, "17819": 1041, "22235": 1041, "21837": 1041, "wagner": 1041, "22199": 1041, "aidar": 1041, "shakerimoff": 1041, "tenavi": 1041, "nakamura": 1041, "22223": 1041, "marcom": 1041, "21617": 1041, "ritter": [1041, 1042], "21114": 1041, "21078": 1041, "21448": 1041, "16061": 1041, "19438": 1041, "18310": 1041, "elfner": 1041, "22249": 1041, "22137": 1041, "22694": 1041, "22808": 1041, "22950": 1041, "21086": 1041, "22206": 1041, "21808": 1041, "22548": 1041, "22062": 1041, "trujillo": [1041, 1042], "22148": 1041, "22240": 1041, "9087": 1041, "22525": 1041, "19689": 1041, "21606": 1041, "21341": 1041, "preservs": 1041, "21767": 1041, "21724": 1041, "yar": 1041, "khine": 1041, "phyo": 1041, "21998": 1041, "22891": 1041, "22899": 1041, "23256": 1041, "19794": 1041, "21534": 1041, "22254": 1041, "21805": 1041, "jeann": 1041, "dionisi": 1041, "22685": 1041, "n_neighbour": 1041, "18832": 1041, "23033": 1041, "21565": 1041, "17266": 1041, "22118": 1041, "ohad": 1041, "22284": 1041, "19158": 1041, "nicki": 1041, "skaft": 1041, "20753": 1041, "22108": 1041, "22635": 1041, "19085": 1041, "22866": 1041, "21576": 1041, "emil": 1041, "dugnat": 1041, "21873": 1041, "21177": 1041, "20408": 1041, "ceballo": 1041, "22058": 1041, "23034": 1041, "22203": 1041, "21026": 1041, "21880": 1041, "mrinal": 1041, "tyagi": 1041, "22982": 1041, "22508": 1041, "comb": 1041, "22604": 1041, "22212": 1041, "21430": 1041, "desislava": 1041, "vasileva": 1041, "22687": 1041, "22150": 1041, "22248": 1041, "20860": 1041, "shubhraneel": 1041, "21888": 1041, "21954": 1041, "22953": 1041, "16018": 1041, "21445": 1041, "21988": 1041, "get_output_feature_nam": 1041, "21569": 1041, "21079": 1041, "20653": 1041, "21434": 1041, "19916": 1041, "22735": 1041, "compute_inverse_transform": 1041, "21701": 1041, "22114": 1041, "21330": 1041, "21408": 1041, "22149": 1041, "21436": 1041, "22191": 1041, "22476": 1041, "21278": 1041, "21316": 1041, "clickabl": 1041, "21298": 1041, "22237": 1041, "check_scalar": 1041, "22218": 1041, "validationerror": 1041, "check_requires_y_non": 1041, "22578": 1041, "arcidiacono": [1041, 1042, 1044], "22595": 1041, "21310": 1041, "22027": 1041, "lanterni": 1041, "23077": 1041, "22188": 1041, "22830": 1041, "2357juan": [1041, 1042, 1043], "adamgonzo": 1041, "adijohar": 1041, "kumawat": 1041, "raghuwanshi": 1041, "duron": 1041, "ahmadjubair33": 1041, "aj": 1041, "druck": 1041, "peixinho": 1041, "arroyo": 1041, "alexanmv": 1041, "almeidayoel": 1041, "amar": [1041, 1042, 1043], "amrcod": 1041, "griva": [1041, 1042], "andrii": 1041, "herrou": 1041, "ducout": 1041, "arth": 1041, "arthurmello": 1041, "arturoamor": 1041, "atharva": 1041, "patil": [1041, 1044], "aufarkari": 1041, "avm19": [1041, 1042, 1044], "ayan": 1041, "bardiya": [1041, 1042], "behrouz": 1041, "ben3940": 1041, "bijil": 1041, "subhash": 1041, "bmreinig": 1041, "brenden": 1041, "kadota": 1041, "cdrig": 1041, "chalmer": 1041, "chitteti": 1041, "srinath": [1041, 1042], "chloe": 1041, "agath": 1041, "azencott": 1041, "christopherlim98": 1041, "weidemann": 1041, "combsccod": 1041, "daniela": [1041, 1042], "darren": [1041, 1042], "eargl": 1041, "gilbertson": [1041, 1042], "dea": [1041, 1042, 1043], "mar\u00eda": [1041, 1042, 1043], "denni": 1041, "osei": 1041, "dessyvv": 1041, "dev514": 1041, "diwakar": 1041, "ries": 1041, "drskd": 1041, "emiko": 1041, "sano": 1041, "emmanouil": 1041, "gionanidi": 1041, "ermolaevpa": [1041, 1042], "estefania": 1041, "barreto": 1041, "ojeda": 1041, "eyast": 1041, "fatima": [1041, 1044], "gasmi": 1041, "luna": 1041, "glushchenkov": 1041, "fkaren27": 1041, "fpgawesom": 1041, "ftorres16": [1041, 1042], "gabor": 1041, "berei": 1041, "kertesz": 1041, "gauthier": 1041, "giancarlo": 1041, "glennfrutiz": 1041, "guillermo": 1041, "fern\u00e1ndez": 1041, "hansin": [1041, 1042], "henrymooresc": [1041, 1042], "hideaki": 1041, "imamura": 1041, "hind": 1041, "hmasdev": 1041, "hvassard": 1041, "aki": [1041, 1042, 1043], "iasoon": 1041, "ingela": 1041, "cowton": 1041, "jalexand3r": 1041, "jauhar": 1041, "jaya": 1041, "kommireddi": 1041, "je": 1041, "jelfner": 1041, "jenni": 1041, "jirka": 1041, "borovec": 1041, "cipri\u00e1n": 1041, "loayza": 1041, "chazalon": 1041, "mess": 1041, "jovan": [1041, 1042], "stojanov": [1041, 1042], "jschuerz": 1041, "katotten": 1041, "ken4git": 1041, "doucet": 1041, "kimayoung": 1041, "koushik": 1041, "kranthi": 1041, "sedamaki": 1041, "krumetoft": 1041, "lesne": 1041, "casino": [1041, 1042], "logan": [1041, 1042, 1043], "lucieclair": 1041, "luiz": 1041, "magali": 1041, "mandjev": 1041, "wurp": [1041, 1042], "boerner": 1041, "wimld": 1041, "martel": 1041, "corentin": 1041, "mat\u00eda": 1041, "matjansen": 1041, "francia": 1041, "megabyt": 1041, "mehrdad": 1041, "moradizadeh": 1041, "melemo2": 1041, "micky774": [1041, 1042], "milana2": 1041, "millawel": 1041, "miwojc": 1041, "mizuki": 1041, "mlant": 1041, "mohit": [1041, 1044], "moonkyung94": 1041, "mpoemsl": 1041, "mrinaltyagi": 1041, "leu": 1041, "msabati": 1041, "nadirhan": 1041, "\u015fahin": 1041, "naipawat": [1041, 1042], "poolsawat": [1041, 1042], "nartayxd": 1041, "nastegiano": 1041, "nathansquan": 1041, "detlefsen": 1041, "niket": 1041, "nikhil": 1041, "suresh": 1041, "kondratyev": 1041, "husak": 1041, "partev": [1041, 1042, 1043, 1044], "pelennor": 1041, "piet": [1041, 1042], "br\u00f6mmel": [1041, 1042], "pinki": 1041, "poloso": 1041, "pramod": 1041, "anantharam": 1041, "puhuk": [1041, 1042], "purna": 1041, "mansingh": 1041, "quadv": 1041, "rahil": [1041, 1042, 1043, 1044], "boy": 1041, "raz": 1041, "hoshia": 1041, "rishabh": 1041, "barnowski": [1041, 1042], "rsnegrin": 1041, "yadav": 1041, "sakinaouisrani": 1041, "sanjai": 1041, "marreddi": 1041, "seel": 1041, "sele": [1041, 1042], "seyedsaman": 1041, "emami": 1041, "shandeng123": 1041, "sharmadharmp": 1041, "shaymernaturalint": 1041, "shuangchi": [1041, 1042], "siavrez": 1041, "slishak": 1041, "spikebh": 1041, "sply88": 1041, "kailasa": [1041, 1042], "sultan": 1041, "orazbayev": 1041, "sumit": 1041, "saha": 1041, "sven": [1041, 1042], "eschlbeck": 1041, "stehl": [1041, 1042], "swapnil": 1041, "teunp": 1041, "ferr\u00e9": 1041, "hjortkj\u00e6r": 1041, "thiruvenkadam": 1041, "toastedyeast": [1041, 1042], "mctiernan": [1041, 1042], "udit": 1041, "ugo": 1041, "marchand": 1041, "vera": [1041, 1042], "komey": [1041, 1042], "victoireloui": 1041, "vishwakarma": 1041, "vikrant": 1041, "khedkar": 1041, "chernyi": 1041, "weijiadu": 1041, "yuan": [1041, 1042, 1043, 1044], "yiyangq": 1041, "yosshi999": 1041, "yuki": 1041, "koyama": 1041, "zeel": 1041, "zempleni": 1041, "zhenfish": 1041, "\u8d75\u4e30": 1041, "25747": 1042, "base_estimator__": 1042, "25477": 1042, "25563": 1042, "25570": 1042, "25664": 1042, "25774": 1042, "25500": 1042, "25589": 1042, "25704": 1042, "min_sample_split": 1042, "25744": 1042, "25619": 1042, "25638": 1042, "25354": 1042, "25174": 1042, "25089": 1042, "25129": 1042, "25363": 1042, "25188": 1042, "25295": 1042, "spec": [1042, 1043], "25312": 1042, "backslash": 1042, "25511": 1042, "25172": 1042, "25341": 1042, "25094": 1042, "25250": 1042, "25370": 1042, "23101": 1042, "24873": 1042, "25694": 1042, "25274": 1042, "25296": 1042, "25147": 1042, "23619": 1042, "24354": 1042, "safiuddin": 1042, "khaja": 1042, "gsiisg": 1042, "23935": 1042, "22527": 1042, "_sgd_fast": 1042, "_plain_sgd": 1042, "oversc": 1042, "23798": 1042, "24543": 1042, "24465": 1042, "23734": 1042, "24699": 1042, "23865": 1042, "simd": 1042, "primit": 1042, "23446": 1042, "23197": 1042, "23604": 1042, "23585": 1042, "24556": 1042, "maladi\u00e8r": [1042, 1043], "24617": 1042, "sim4n6": 1042, "24688": 1042, "22054": 1042, "roic": 1042, "24264": 1042, "maladier": 1042, "14736": 1042, "hunt": 1042, "zhan": 1042, "20802": 1042, "pokorni": 1042, "22965": 1042, "22968": 1042, "23038": 1042, "23210": 1042, "24258": 1042, "23470": 1042, "21938": 1042, "23127": 1042, "19075": 1042, "ramo": 1042, "carre\u00f1o": 1042, "24951": 1042, "22268": 1042, "mohamedbsh": 1042, "23905": 1042, "11860": 1042, "ablin": 1042, "24528": 1042, "23726": 1042, "24421": 1042, "kshitij": [1042, 1043], "22554": 1042, "24218": 1042, "molin": 1042, "21020": 1042, "24856": 1042, "22014": 1042, "23252": 1042, "24538": 1042, "24889": 1042, "24146": 1042, "peretti": 1042, "nestor": 1042, "navarro": 1042, "nati": 1042, "tomatti": 1042, "24855": 1042, "24849": 1042, "20415": 1042, "24283": 1042, "24894": 1042, "23819": [1042, 1043], "edoardo": [1042, 1044], "abati": [1042, 1044], "24747": 1042, "24245": 1042, "24405": 1042, "16695": 1042, "vitor": 1042, "rosa": 1042, "18298": 1042, "25077": 1042, "24317": 1042, "24350": 1042, "24755": 1042, "levitski": [1042, 1043, 1044], "24637": 1042, "24767": 1042, "23275": 1042, "maxwelllzh": 1042, "24433": 1042, "yogendrasingh": 1042, "23637": 1042, "23877": 1042, "10168": 1042, "\u0142ukasz": 1042, "borchmann": 1042, "12285": 1042, "miltenberg": 1042, "13042": 1042, "parizi": 1042, "18094": 1042, "22562": 1042, "24714": 1042, "23834": 1042, "24051": 1042, "22518": 1042, "18020": 1042, "24338": 1042, "23442": 1042, "atukorala": 1042, "22710": 1042, "conroi": 1042, "trinh": 1042, "23461": 1042, "24365": 1042, "24630": 1042, "rushil": [1042, 1043], "24084": 1042, "iinfo": 1042, "24141": 1042, "24539": 1042, "23977": 1042, "23683": 1042, "andrei": [1042, 1044, 1045], "melnik": 1042, "16747": 1042, "18805": 1042, "hongshaoyang": 1042, "22269": 1042, "23139": 1042, "24645": 1042, "10468": 1042, "ruben": 1042, "22993": 1042, "24750": 1042, "rudresh": 1042, "veerkhar": 1042, "23874": 1042, "24075": 1042, "22665": 1042, "24683": 1042, "24058": 1042, "perdok": 1042, "20331": 1042, "23993": 1042, "22629": 1042, "24412": 1042, "22898": 1042, "23480": 1042, "21469": 1042, "lapack_svd_driv": 1042, "20617": 1042, "25067": 1042, "14862": 1042, "24512": 1042, "24667": 1042, "25080": 1042, "24523": 1042, "mia": 1042, "bajic": 1042, "3llobo": 1042, "kania": [1042, 1043], "anulekh": 1042, "admir": [1042, 1043], "demiraj": [1042, 1043], "adoublet": [1042, 1043], "ahmedbgh": [1042, 1043], "aiko": 1042, "akshita": 1042, "prasanth": 1042, "ala": [1042, 1043], "miola": 1042, "lebel": 1042, "buzenet": [1042, 1043], "kassa": [1042, 1043], "bera": 1042, "maennel": 1042, "aniket": [1042, 1044], "shirsat": 1042, "anthony22": [1042, 1043], "apostolo": 1042, "tsetogl": 1042, "aravindh": 1042, "artur": [1042, 1043], "hermano": [1042, 1043], "ashah002": [1042, 1043, 1044], "ashwin": [1042, 1043], "azaria": [1042, 1043], "gebremichael": [1042, 1043], "b0rxington": 1042, "badr": 1042, "moufad": 1042, "bart\u0142omiej": 1042, "go\u0144da": 1042, "bdegraaff": 1042, "berkecanrizai": 1042, "bernd": 1042, "fritzk": 1042, "bhoomika": 1042, "biswaroop": 1042, "cannon": 1042, "bsh": 1042, "ceh": 1042, "chalulu": 1042, "changyao": [1042, 1043], "zablit": 1042, "veenhui": [1042, 1043, 1044], "christianwaldmann": 1042, "christin": [1042, 1043], "verrier": 1042, "dangonite57": [1042, 1043], "danielgaerb": 1042, "davidblnc": [1042, 1043], "dayn": [1042, 1043], "khant": 1042, "dhanshre": 1042, "diadochokinet": 1042, "diederikwp": 1042, "litsidi": [1042, 1043], "drewhogg": 1042, "oc": 1042, "dwight": 1042, "lindquist": 1042, "eden": 1042, "brekk": 1042, "edern": [1042, 1043], "eleanor": 1042, "eliaschiavon": 1042, "emir": [1042, 1043], "fabrizio": 1042, "damicelli": 1042, "fcharra": 1042, "siola": [1042, 1043], "tuveri": 1042, "franck": [1042, 1044], "charra": [1042, 1044], "geevarghes": 1042, "georgiamaydai": 1042, "gianr": 1042, "lazz": 1042, "guitar": 1042, "gunesbayir": [1042, 1043], "harshit5674": 1042, "hasan": 1042, "yaman": 1042, "vrigazov": 1042, "htsedebenham": 1042, "humahn": 1042, "ido": [1042, 1043], "iglesi": 1042, "iliya": 1042, "zhechev": 1042, "iren": [1042, 1043], "ivanllt": 1042, "sedykh": 1042, "mcivor": [1042, 1043], "janfidor": [1042, 1043], "jiten": 1042, "sidhpura": 1042, "jkarolczak": 1042, "jo\u00e3o": 1042, "johnathanpi": [1042, 1043], "koumenti": 1042, "panga": [1042, 1043], "johnthagen": 1042, "fleme": 1042, "choo": [1042, 1043], "yun": [1042, 1043], "keat": [1042, 1043], "juanfe88": 1042, "juliaschoepp": [1042, 1043], "jygerardi": [1042, 1043], "ka00ri": [1042, 1043], "kanishk": 1042, "sachdev": 1042, "kanissh": 1042, "kendal": 1042, "kento": [1042, 1043], "nozawa": [1042, 1043], "eliasi": [1042, 1043, 1044], "kluge": [1042, 1043], "lieret": 1042, "kirandevraj": 1042, "kraig": 1042, "vamsi": 1042, "kapadni": 1042, "lingyi1110": 1042, "mantovani": 1042, "maascha": 1042, "madinak": 1042, "maksym": 1042, "mansi": 1042, "kostelac": [1042, 1043], "marvin": [1042, 1043], "krawutschk": [1042, 1043], "masanori": [1042, 1043], "kanazu": [1042, 1043], "haberland": [1042, 1043], "mauroantonioserrano": 1042, "maxi": 1042, "marufo": 1042, "maximesaur": [1042, 1043], "smolskii": 1042, "bou": [1042, 1043], "mehgarg": 1042, "mehmetcanakbai": 1042, "baji\u0107": 1042, "flak": 1042, "hornstein": 1042, "ruiter": 1042, "paradi": 1042, "iljin": [1042, 1043], "misa": 1042, "ogura": 1042, "wilksch": 1042, "mrastgoo": [1042, 1044], "naois": [1042, 1044], "holohan": [1042, 1044], "nass": 1042, "jacobi": 1042, "nawazish": [1042, 1043], "alam": [1042, 1043], "nguy\u1ec5n": 1042, "v\u0103n": 1042, "di\u1ec5n": 1042, "fanelli": [1042, 1043], "nihal": 1042, "thukarama": 1042, "jare": 1042, "nima10khodaveisi": 1042, "nima": 1042, "sarajpoor": 1042, "nitinramvelraj": 1042, "nnlnr": [1042, 1043], "npach": [1042, 1043], "nwanna": 1042, "nymark": 1042, "kho": 1042, "holman": 1042, "oll": 1042, "lukowski": 1042, "hassoun": 1042, "tamer": 1042, "ouss1508": [1042, 1043], "oyindamola": 1042, "olatunji": 1042, "pab": [1042, 1043], "pandata": [1042, 1043], "soar": 1042, "petar": 1042, "mlinari\u0107": 1042, "pooja": [1042, 1043, 1044], "subramaniam": [1042, 1043, 1044], "priyam": 1042, "kakati": 1042, "freeland": 1042, "keerti": 1042, "rafal": [1042, 1043], "wojdyla": [1042, 1043], "raghuv": [1042, 1043], "makhija": 1042, "rehan": 1042, "guha": 1042, "klima": 1042, "crockett": 1042, "homm": 1042, "roman4oo": 1042, "rowan": 1042, "mankoo": 1042, "sabri": 1042, "monaf": 1042, "safikh": 1042, "salahuddin": 1042, "yojana": 1042, "menes": 1042, "ephrem": 1042, "sangam": 1042, "sangamswadik": 1042, "sanjai_3": [1042, 1043], "sarahremu": 1042, "sashka": [1042, 1043], "savkomax": 1042, "gustafson": [1042, 1043], "sec65": 1042, "seljak": 1042, "shadi": [1042, 1043], "gewili": [1042, 1043], "shellyfung": 1042, "shinsuk": 1042, "mori": 1042, "shiva": [1042, 1043], "shoaib": 1042, "khan": [1042, 1043], "shogo": [1042, 1043], "hida": [1042, 1043], "shrankhla": 1042, "sonniv": [1042, 1043], "sortofamudkip": [1042, 1043], "stanislav": [1042, 1043], "modrak": [1042, 1043], "stellalin7": 1042, "vaerenbergh": [1042, 1043], "schmerler": 1042, "tabea": [1042, 1043], "kossen": [1042, 1043], "thedevpanda": 1042, "syd": 1042, "sre": 1042, "weezel": [1042, 1043], "bonald": 1042, "germer": [1042, 1043], "ion": 1042, "timofei": 1042, "kornev": 1042, "pitter": 1042, "tomiock": [1042, 1043], "mathew": 1042, "tspeng": [1042, 1043], "egashira": 1042, "rey": 1042, "puerta": 1042, "vishal": 1042, "vyom": [1042, 1043], "pathak": [1042, 1043], "wattai": 1042, "wchathura": 1042, "wen": 1042, "x110": 1042, "xuniu": 1042, "yanhong": 1042, "ef": 1042, "yusuf": [1042, 1043], "raji": [1042, 1043], "adil": 1042, "khwaja": 1042, "zeeshan": [1042, 1043], "lone": [1042, 1043], "27468": 1043, "27583": 1043, "paralel": 1043, "27573": 1043, "27580": 1043, "18488": 1043, "26814": 1043, "27044": 1043, "26913": 1043, "27167": 1043, "27243": 1043, "26602": 1043, "26521": 1043, "26748": 1043, "26600": 1043, "shreesha": [1043, 1044], "27002": 1043, "26416": 1043, "tao": [1043, 1044], "26772": 1043, "reintroduc": 1043, "26754": 1043, "26893": 1043, "senger": [1043, 1044, 1045], "26760": 1043, "26940": 1043, "26931": 1043, "26903": 1043, "roehr": [1043, 1044], "27292": 1043, "25196": 1043, "24871": 1043, "25752": 1043, "25438": 1043, "yotam": 1043, "avidar": 1043, "constantini": 1043, "26337": 1043, "25120": 1043, "27311": 1043, "25294": 1043, "25308": 1043, "25291": 1043, "25367": 1043, "25402": 1043, "25044": 1043, "smt": 1043, "26082": 1043, "24027": 1043, "25815": 1043, "24568": 1043, "26121": 1043, "25805": 1043, "26385": 1043, "26657": 1043, "binesh": [1043, 1044], "bannerje": [1043, 1044], "25251": 1043, "26503": 1043, "26286": 1043, "26323": 1043, "26033": 1043, "26108": 1043, "barth\u00e9lemi": [1043, 1044], "26433": 1043, "26386": 1043, "26551": 1043, "26579": 1043, "25784": 1043, "25490": 1043, "25956": 1043, "22409": 1043, "25177": 1043, "24882": 1043, "25186": 1043, "breve": 1043, "26318": 1043, "25506": 1043, "25601": 1043, "fidor": 1043, "25931": 1043, "25629": 1043, "26242": 1043, "toplak": 1043, "sckit": 1043, "25297": 1043, "24230": 1043, "25102": 1043, "25973": 1043, "25232": 1043, "26454": 1043, "25209": 1043, "26644": 1043, "lemo": [1043, 1044], "21809": 1043, "25732": 1043, "25190": 1043, "26207": 1043, "25587": 1043, "25697": 1043, "25214": 1043, "26653": 1043, "25531": 1043, "17388": 1043, "24769": 1043, "25713": 1043, "18723": 1043, "sahil": 1043, "24677": 1043, "24668": 1043, "dberenbaum": 1043, "25987": 1043, "26019": 1043, "25432": 1043, "25672": 1043, "lene": 1043, "preuss": 1043, "25299": 1043, "omarmanzoor": 1043, "26194": 1043, "26264": 1043, "barata": 1043, "onggo": 1043, "23099": 1043, "26021": 1043, "jiawei": [1043, 1044], "25659": 1043, "26333": 1043, "24140": 1043, "24076": 1043, "25417": 1043, "24083": 1043, "25443": 1043, "feature_union": 1043, "25093": 1043, "25220": 1043, "26325": 1043, "25334": 1043, "25677": 1043, "20524": 1043, "niuk": 1043, "23731": 1043, "24145": 1043, "22506": 1043, "24935": 1043, "seladu": 1043, "25257": 1043, "26424": 1043, "26400": 1043, "26566": 1043, "26093": 1043, "23595": 1043, "26376": 1043, "25387": 1043, "26289": 1043, "25813": 1043, "26106": 1043, "25814": 1043, "check_transformers_unfitted_stateless": 1043, "25733": 1043, "19664": 1043, "environmenterror": 1043, "ioerror": 1043, "windowserror": 1043, "26466": 1043, "kushwah": [1043, 1044], "handk": 1043, "adien": 1043, "mansouri": 1043, "alexl": [1043, 1044], "amai": 1043, "annegnx": 1043, "ansam": 1043, "zedan": 1043, "dutt": 1043, "aymericbasset": 1043, "tripramudya": 1043, "benedek": 1043, "harsanyi": 1043, "brevin": [1043, 1044], "kund": [1043, 1044], "troillard": [1043, 1044], "carla": 1043, "berenbaum": 1043, "proding": 1043, "butyugina": 1043, "elabonga": [1043, 1044], "atuo": [1043, 1044], "farhan": 1043, "hujiahong726": 1043, "ili": [1043, 1044], "jb": [1043, 1044], "mountford": [1043, 1044], "jessicakk0711": 1043, "joei": 1043, "hedlund": 1043, "linu": [1043, 1044], "fouquet": [1043, 1044], "harfouch": 1043, "mdarii": 1043, "murezzda": 1043, "nightwalkx": 1043, "nishu": 1043, "piontek": 1043, "pnucci": 1043, "sadra": 1043, "barikbin": 1043, "searchforpass": 1043, "seoeun": 1043, "th\u00e9ophil": 1043, "barang": 1043, "veghit": 1043, "vignesh": 1043, "vijeth": [1043, 1044], "moudgalya": [1043, 1044], "windiana42": 1043, "yuchen": [1043, 1044], "28188": 1044, "28256": 1044, "28195": 1044, "28191": 1044, "28235": 1044, "28262": 1044, "28240": 1044, "28247": 1044, "28121": 1044, "peterlongo": 1044, "28165": 1044, "int64dtyp": 1044, "28385": 1044, "27702": 1044, "28184": 1044, "28377": 1044, "bergman": 1044, "28241": 1044, "28263": 1044, "28295": 1044, "28327": 1044, "28222": 1044, "28233": 1044, "hopfensperg": 1044, "2024": 1044, "sooner": 1044, "26721": 1044, "27670": 1044, "27315": 1044, "26464": 1044, "26616": 1044, "cappuzzo": 1044, "Ines": 1044, "ibnukhsein": 1044, "boulard": 1044, "26648": 1044, "27538": 1044, "27308": 1044, "26789": 1044, "26896": 1044, "27058": 1044, "27005": 1044, "26525": 1044, "27490": 1044, "27500": 1044, "27478": 1044, "27389": 1044, "27104": 1044, "27250": 1044, "27179": 1044, "nurseit": 1044, "kamchyev": 1044, "27100": 1044, "virshup": 1044, "27239": 1044, "korobko": 1044, "27240": 1044, "27274": 1044, "27161": 1044, "27219": 1044, "27277": 1044, "27301": 1044, "lohit": 1044, "sundaramahalingam": 1044, "27252": 1044, "27166": 1044, "27314": 1044, "jax": 1044, "27137": 1044, "26855": 1044, "27601": 1044, "26315": 1044, "27098": 1044, "27431": 1044, "sok\u00f3\u0142": 1044, "27556": 1044, "27110": 1044, "26243": 1044, "27558": 1044, "28048": 1044, "outliermixin": 1044, "26506": 1044, "correspondingli": 1044, "26831": 1044, "26786": 1044, "26909": 1044, "27185": 1044, "27668": 1044, "nolan": 1044, "mcmahon": 1044, "depedend": 1044, "26459": 1044, "haoi": 1044, "27678": 1044, "tata": 1044, "27651": 1044, "27898": 1044, "26744": 1044, "27828": 1044, "26683": 1044, "27734": 1044, "25275": 1044, "27204": 1044, "27438": 1044, "28111": 1044, "27718": 1044, "sparrai": 1044, "spmatrix": 1044, "70x": 1044, "tarashanski": 1044, "scanpi": 1044, "18689": 1044, "26634": 1044, "landeau": 1044, "vigni": 1044, "27834": 1044, "26391": 1044, "26411": 1044, "27835": 1044, "27139": 1044, "13649": 1044, "reilli": 1044, "dealloc": 1044, "27865": 1044, "26278": 1044, "28095": 1044, "26957": 1044, "26163": 1044, "26736": 1044, "27645": 1044, "27817": 1044, "ongari": 1044, "27710": 1044, "28074": 1044, "26830": 1044, "24838": 1044, "hertel": 1044, "27721": 1044, "27841": 1044, "21807": 1044, "27291": 1044, "27675": 1044, "cant": 1044, "27417": 1044, "27899": 1044, "27979": 1044, "5x": 1044, "26765": 1044, "27006": 1044, "26366": 1044, "mojdeh": 1044, "rastgoo": 1044, "neg_root_mean_squared_log_error_scor": 1044, "26734": 1044, "27650": 1044, "27624": 1044, "27577": 1044, "26840": 1044, "26299": 1044, "27720": 1044, "27018": 1044, "26828": 1044, "23317": 1044, "26410": 1044, "26267": 1044, "27017": 1044, "xuefeng": 1044, "27760": 1044, "26944": 1044, "26674": 1044, "27309": 1044, "27328": 1044, "27801": 1044, "27821": 1044, "26862": 1044, "goh": 1044, "yisheng": 1044, "dia": 1044, "datastuctur": 1044, "27372": 1044, "may_share_memori": 1044, "27336": 1044, "check_estimators_pickl": 1044, "readonly_memmap": 1044, "misdetect": 1044, "27614": 1044, "27757": 1044, "28090": 1044, "furrer": 1044, "log_logist": 1044, "logaddexp": 1044, "27544": 1044, "101alexmartin": 1044, "adarsh": 1044, "wase": 1044, "advik": 1044, "feghali": 1044, "anam": 1044, "andyscanzio": 1044, "kislovskii": 1044, "mare": 1044, "benoit": 1044, "chevalli": 1044, "mame": 1044, "chad": 1044, "parmet": 1044, "clauss": 1044, "boyl": 1044, "cynthias13w": 1044, "damink": 1044, "schmitz": 1044, "tinoco": 1044, "brochart": 1044, "devanshkyada27": 1044, "duong": 1044, "eitan": 1044, "heme": 1044, "emma": 1044, "carbal": 1044, "ferdman": 1044, "epimorph": 1044, "erwan": 1044, "floch": 1044, "filip": 1044, "karlo": 1044, "do\u0161ilovi\u0107": 1044, "idelberg": 1044, "harmanan": 1044, "kohli": 1044, "ioangatop": 1044, "isaactrost": 1044, "iwona": 1044, "zdzieblo": 1044, "jakub": 1044, "kaczmarzyk": 1044, "nordbi": 1044, "waweru": 1044, "kishan": 1044, "ved": 1044, "pita": 1044, "koustav": 1044, "ldwy4": 1044, "silvestrin": 1044, "luk\u00e1\u0161": 1044, "folwarczn\u00fd": 1044, "geiger": 1044, "fraa\u00df": 1044, "hanu\u0161": 1044, "elliot": [1044, 1045], "larrald": 1044, "mecopur": 1044, "higgin": 1044, "miki": 1044, "watanab": 1044, "milton": 1044, "mn193": 1044, "hamdi": 1044, "naman": 1044, "dangi": 1044, "malem": 1044, "shinitski": 1044, "oleksii": 1044, "kachaiev": 1044, "hull": 1044, "fr\u00e9minvil": [1044, 1045], "puneeth": 1044, "qmarcou": 1044, "raj": 1044, "pulapakura": 1044, "raphael": 1044, "pere": 1044, "salim": 1044, "dohri": 1044, "sandip": 1044, "dutta": 1044, "qaiser": 1044, "scaja": 1044, "shubhal": 1044, "s\u00f8ren": 1044, "fugled": 1044, "tanjina": 1044, "afroj": 1044, "tharak": 1044, "hegd": 1044, "thebabush": 1044, "tialo": 1044, "tongyu": 1044, "fokow": 1044, "yuusuk": 1044, "hiramatsu": 1044, "28040": 1045, "settl": 1045, "28187": 1045, "__getitem__": 1045, "27990": 1045, "27937": 1045, "vd": 1045, "boom": 1045, "27844": 1045, "28102": 1045, "18843": 1045, "montesel": 1045, "28136": 1045, "28085": 1045, "menoci": 1045, "florin": 1045, "28053": 1045, "28051": 1045, "28210": 1045, "rerais": 1045, "28198": 1045, "28167": 1045}, "objects": {"": [[406, 0, 0, "-", "sklearn"]], "sklearn": [[406, 0, 0, "-", "base"], [406, 0, 0, "-", "calibration"], [406, 0, 0, "-", "cluster"], [406, 0, 0, "-", "compose"], [466, 4, 1, "", "config_context"], [406, 0, 0, "-", "covariance"], [406, 0, 0, "-", "cross_decomposition"], [406, 0, 0, "-", "datasets"], [406, 0, 0, "-", "decomposition"], [406, 0, 0, "-", "discriminant_analysis"], [406, 0, 0, "-", "dummy"], [406, 0, 0, "-", "ensemble"], [406, 0, 0, "-", "exceptions"], [406, 0, 0, "-", "experimental"], [406, 0, 0, "-", "feature_extraction"], [406, 0, 0, "-", "feature_selection"], [406, 0, 0, "-", "gaussian_process"], [624, 4, 1, "", "get_config"], [406, 0, 0, "-", "impute"], [406, 0, 0, "-", "inspection"], [406, 0, 0, "-", "isotonic"], [406, 0, 0, "-", "kernel_approximation"], [406, 0, 0, "-", "kernel_ridge"], [406, 0, 0, "-", "linear_model"], [406, 0, 0, "-", "manifold"], [406, 0, 0, "-", "metrics"], [406, 0, 0, "-", "mixture"], [406, 0, 0, "-", "model_selection"], [406, 0, 0, "-", "multiclass"], [406, 0, 0, "-", "multioutput"], [406, 0, 0, "-", "naive_bayes"], [406, 0, 0, "-", "neighbors"], [406, 0, 0, "-", "neural_network"], [406, 0, 0, "-", "pipeline"], [406, 0, 0, "-", "preprocessing"], [406, 0, 0, "-", "random_projection"], [406, 0, 0, "-", "semi_supervised"], [897, 4, 1, "", "set_config"], [898, 4, 1, "", "show_versions"], [406, 0, 0, "-", "svm"], [406, 0, 0, "-", "tree"], [406, 0, 0, "-", "utils"]], "sklearn.base": [[421, 1, 1, "", "BaseEstimator"], [422, 1, 1, "", "BiclusterMixin"], [423, 1, 1, "", "ClassNamePrefixFeaturesOutMixin"], [424, 1, 1, "", "ClassifierMixin"], [425, 1, 1, "", "ClusterMixin"], [426, 1, 1, "", "DensityMixin"], [427, 1, 1, "", "MetaEstimatorMixin"], [428, 1, 1, "", "OneToOneFeatureMixin"], [429, 1, 1, "", "OutlierMixin"], [430, 1, 1, "", "RegressorMixin"], [431, 1, 1, "", "TransformerMixin"], [432, 4, 1, "", "clone"], [433, 4, 1, "", "is_classifier"], [434, 4, 1, "", "is_regressor"]], "sklearn.base.BaseEstimator": [[421, 2, 1, "", "get_metadata_routing"], [421, 2, 1, "", "get_params"], [421, 2, 1, "", "set_params"]], "sklearn.base.BiclusterMixin": [[422, 3, 1, "", "biclusters_"], [422, 2, 1, "", "get_indices"], [422, 2, 1, "", "get_shape"], [422, 2, 1, "", "get_submatrix"]], "sklearn.base.ClassNamePrefixFeaturesOutMixin": [[423, 2, 1, "", "get_feature_names_out"]], "sklearn.base.ClassifierMixin": [[424, 2, 1, "", "score"]], "sklearn.base.ClusterMixin": [[425, 2, 1, "", "fit_predict"]], "sklearn.base.DensityMixin": [[426, 2, 1, "", "score"]], "sklearn.base.OneToOneFeatureMixin": [[428, 2, 1, "", "get_feature_names_out"]], "sklearn.base.OutlierMixin": [[429, 2, 1, "", "fit_predict"]], "sklearn.base.RegressorMixin": [[430, 2, 1, "", "score"]], "sklearn.base.TransformerMixin": [[431, 2, 1, "", "fit_transform"], [431, 2, 1, "", "set_output"]], "sklearn.calibration": [[435, 1, 1, "", "CalibratedClassifierCV"], [436, 1, 1, "", "CalibrationDisplay"], [437, 4, 1, "", "calibration_curve"]], "sklearn.calibration.CalibratedClassifierCV": [[435, 2, 1, "", "fit"], [435, 2, 1, "", "get_metadata_routing"], [435, 2, 1, "", "get_params"], [435, 2, 1, "", "predict"], [435, 2, 1, "", "predict_proba"], [435, 2, 1, "", "score"], [435, 2, 1, "", "set_fit_request"], [435, 2, 1, "", "set_params"], [435, 2, 1, "", "set_score_request"]], "sklearn.calibration.CalibrationDisplay": [[436, 2, 1, "", "from_estimator"], [436, 2, 1, "", "from_predictions"], [436, 2, 1, "", "plot"]], "sklearn.cluster": [[438, 1, 1, "", "AffinityPropagation"], [439, 1, 1, "", "AgglomerativeClustering"], [440, 1, 1, "", "Birch"], [441, 1, 1, "", "BisectingKMeans"], [442, 1, 1, "", "DBSCAN"], [443, 1, 1, "", "FeatureAgglomeration"], [444, 1, 1, "", "HDBSCAN"], [445, 1, 1, "", "KMeans"], [446, 1, 1, "", "MeanShift"], [447, 1, 1, "", "MiniBatchKMeans"], [448, 1, 1, "", "OPTICS"], [449, 1, 1, "", "SpectralBiclustering"], [450, 1, 1, "", "SpectralClustering"], [451, 1, 1, "", "SpectralCoclustering"], [452, 4, 1, "", "affinity_propagation"], [453, 4, 1, "", "cluster_optics_dbscan"], [454, 4, 1, "", "cluster_optics_xi"], [455, 4, 1, "", "compute_optics_graph"], [418, 4, 1, "", "dbscan"], [456, 4, 1, "", "estimate_bandwidth"], [457, 4, 1, "", "k_means"], [458, 4, 1, "", "kmeans_plusplus"], [459, 4, 1, "", "mean_shift"], [460, 4, 1, "", "spectral_clustering"], [461, 4, 1, "", "ward_tree"]], "sklearn.cluster.AffinityPropagation": [[438, 2, 1, "", "fit"], [438, 2, 1, "", "fit_predict"], [438, 2, 1, "", "get_metadata_routing"], [438, 2, 1, "", "get_params"], [438, 2, 1, "", "predict"], [438, 2, 1, "", "set_params"]], "sklearn.cluster.AgglomerativeClustering": [[439, 2, 1, "", "fit"], [439, 2, 1, "", "fit_predict"], [439, 2, 1, "", "get_metadata_routing"], [439, 2, 1, "", "get_params"], [439, 2, 1, "", "set_params"]], "sklearn.cluster.Birch": [[440, 2, 1, "", "fit"], [440, 2, 1, "", "fit_predict"], [440, 2, 1, "", "fit_transform"], [440, 2, 1, "", "get_feature_names_out"], [440, 2, 1, "", "get_metadata_routing"], [440, 2, 1, "", "get_params"], [440, 2, 1, "", "partial_fit"], [440, 2, 1, "", "predict"], [440, 2, 1, "", "set_output"], [440, 2, 1, "", "set_params"], [440, 2, 1, "", "transform"]], "sklearn.cluster.BisectingKMeans": [[441, 2, 1, "", "fit"], [441, 2, 1, "", "fit_predict"], [441, 2, 1, "", "fit_transform"], [441, 2, 1, "", "get_feature_names_out"], [441, 2, 1, "", "get_metadata_routing"], [441, 2, 1, "", "get_params"], [441, 2, 1, "", "predict"], [441, 2, 1, "", "score"], [441, 2, 1, "", "set_fit_request"], [441, 2, 1, "", "set_output"], [441, 2, 1, "", "set_params"], [441, 2, 1, "", "set_predict_request"], [441, 2, 1, "", "set_score_request"], [441, 2, 1, "", "transform"]], "sklearn.cluster.DBSCAN": [[442, 2, 1, "", "fit"], [442, 2, 1, "", "fit_predict"], [442, 2, 1, "", "get_metadata_routing"], [442, 2, 1, "", "get_params"], [442, 2, 1, "", "set_fit_request"], [442, 2, 1, "", "set_params"]], "sklearn.cluster.FeatureAgglomeration": [[443, 2, 1, "", "fit"], [443, 3, 1, "", "fit_predict"], [443, 2, 1, "", "fit_transform"], [443, 2, 1, "", "get_feature_names_out"], [443, 2, 1, "", "get_metadata_routing"], [443, 2, 1, "", "get_params"], [443, 2, 1, "", "inverse_transform"], [443, 2, 1, "", "set_output"], [443, 2, 1, "", "set_params"], [443, 2, 1, "", "transform"]], "sklearn.cluster.HDBSCAN": [[444, 2, 1, "", "dbscan_clustering"], [444, 2, 1, "", "fit"], [444, 2, 1, "", "fit_predict"], [444, 2, 1, "", "get_metadata_routing"], [444, 2, 1, "", "get_params"], [444, 2, 1, "", "set_params"]], "sklearn.cluster.KMeans": [[445, 2, 1, "", "fit"], [445, 2, 1, "", "fit_predict"], [445, 2, 1, "", "fit_transform"], [445, 2, 1, "", "get_feature_names_out"], [445, 2, 1, "", "get_metadata_routing"], [445, 2, 1, "", "get_params"], [445, 2, 1, "", "predict"], [445, 2, 1, "", "score"], [445, 2, 1, "", "set_fit_request"], [445, 2, 1, "", "set_output"], [445, 2, 1, "", "set_params"], [445, 2, 1, "", "set_predict_request"], [445, 2, 1, "", "set_score_request"], [445, 2, 1, "", "transform"]], "sklearn.cluster.MeanShift": [[446, 2, 1, "", "fit"], [446, 2, 1, "", "fit_predict"], [446, 2, 1, "", "get_metadata_routing"], [446, 2, 1, "", "get_params"], [446, 2, 1, "", "predict"], [446, 2, 1, "", "set_params"]], "sklearn.cluster.MiniBatchKMeans": [[447, 2, 1, "", "fit"], [447, 2, 1, "", "fit_predict"], [447, 2, 1, "", "fit_transform"], [447, 2, 1, "", "get_feature_names_out"], [447, 2, 1, "", "get_metadata_routing"], [447, 2, 1, "", "get_params"], [447, 2, 1, "", "partial_fit"], [447, 2, 1, "", "predict"], [447, 2, 1, "", "score"], [447, 2, 1, "", "set_fit_request"], [447, 2, 1, "", "set_output"], [447, 2, 1, "", "set_params"], [447, 2, 1, "", "set_partial_fit_request"], [447, 2, 1, "", "set_predict_request"], [447, 2, 1, "", "set_score_request"], [447, 2, 1, "", "transform"]], "sklearn.cluster.OPTICS": [[448, 2, 1, "", "fit"], [448, 2, 1, "", "fit_predict"], [448, 2, 1, "", "get_metadata_routing"], [448, 2, 1, "", "get_params"], [448, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralBiclustering": [[449, 3, 1, "", "biclusters_"], [449, 2, 1, "", "fit"], [449, 2, 1, "", "get_indices"], [449, 2, 1, "", "get_metadata_routing"], [449, 2, 1, "", "get_params"], [449, 2, 1, "", "get_shape"], [449, 2, 1, "", "get_submatrix"], [449, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralClustering": [[450, 2, 1, "", "fit"], [450, 2, 1, "", "fit_predict"], [450, 2, 1, "", "get_metadata_routing"], [450, 2, 1, "", "get_params"], [450, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralCoclustering": [[451, 3, 1, "", "biclusters_"], [451, 2, 1, "", "fit"], [451, 2, 1, "", "get_indices"], [451, 2, 1, "", "get_metadata_routing"], [451, 2, 1, "", "get_params"], [451, 2, 1, "", "get_shape"], [451, 2, 1, "", "get_submatrix"], [451, 2, 1, "", "set_params"]], "sklearn.compose": [[462, 1, 1, "", "ColumnTransformer"], [463, 1, 1, "", "TransformedTargetRegressor"], [464, 4, 1, "", "make_column_selector"], [465, 4, 1, "", "make_column_transformer"]], "sklearn.compose.ColumnTransformer": [[462, 2, 1, "", "fit"], [462, 2, 1, "", "fit_transform"], [462, 2, 1, "", "get_feature_names_out"], [462, 2, 1, "", "get_metadata_routing"], [462, 2, 1, "", "get_params"], [462, 3, 1, "", "named_transformers_"], [462, 2, 1, "", "set_output"], [462, 2, 1, "", "set_params"], [462, 2, 1, "", "transform"]], "sklearn.compose.TransformedTargetRegressor": [[463, 2, 1, "", "fit"], [463, 2, 1, "", "get_metadata_routing"], [463, 2, 1, "", "get_params"], [463, 3, 1, "", "n_features_in_"], [463, 2, 1, "", "predict"], [463, 2, 1, "", "score"], [463, 2, 1, "", "set_params"], [463, 2, 1, "", "set_score_request"]], "sklearn.covariance": [[467, 1, 1, "", "EllipticEnvelope"], [468, 1, 1, "", "EmpiricalCovariance"], [469, 1, 1, "", "GraphicalLasso"], [470, 1, 1, "", "GraphicalLassoCV"], [471, 1, 1, "", "LedoitWolf"], [472, 1, 1, "", "MinCovDet"], [473, 1, 1, "", "OAS"], [474, 1, 1, "", "ShrunkCovariance"], [475, 4, 1, "", "empirical_covariance"], [476, 4, 1, "", "graphical_lasso"], [477, 4, 1, "", "ledoit_wolf"], [478, 4, 1, "", "ledoit_wolf_shrinkage"], [420, 4, 1, "", "oas"], [479, 4, 1, "", "shrunk_covariance"]], "sklearn.covariance.EllipticEnvelope": [[467, 2, 1, "", "correct_covariance"], [467, 2, 1, "", "decision_function"], [467, 2, 1, "", "error_norm"], [467, 2, 1, "", "fit"], [467, 2, 1, "", "fit_predict"], [467, 2, 1, "", "get_metadata_routing"], [467, 2, 1, "", "get_params"], [467, 2, 1, "", "get_precision"], [467, 2, 1, "", "mahalanobis"], [467, 2, 1, "", "predict"], [467, 2, 1, "", "reweight_covariance"], [467, 2, 1, "", "score"], [467, 2, 1, "", "score_samples"], [467, 2, 1, "", "set_params"], [467, 2, 1, "", "set_score_request"]], "sklearn.covariance.EmpiricalCovariance": [[468, 2, 1, "", "error_norm"], [468, 2, 1, "", "fit"], [468, 2, 1, "", "get_metadata_routing"], [468, 2, 1, "", "get_params"], [468, 2, 1, "", "get_precision"], [468, 2, 1, "", "mahalanobis"], [468, 2, 1, "", "score"], [468, 2, 1, "", "set_params"], [468, 2, 1, "", "set_score_request"]], "sklearn.covariance.GraphicalLasso": [[469, 2, 1, "", "error_norm"], [469, 2, 1, "", "fit"], [469, 2, 1, "", "get_metadata_routing"], [469, 2, 1, "", "get_params"], [469, 2, 1, "", "get_precision"], [469, 2, 1, "", "mahalanobis"], [469, 2, 1, "", "score"], [469, 2, 1, "", "set_params"], [469, 2, 1, "", "set_score_request"]], "sklearn.covariance.GraphicalLassoCV": [[470, 2, 1, "", "error_norm"], [470, 2, 1, "", "fit"], [470, 2, 1, "", "get_metadata_routing"], [470, 2, 1, "", "get_params"], [470, 2, 1, "", "get_precision"], [470, 2, 1, "", "mahalanobis"], [470, 2, 1, "", "score"], [470, 2, 1, "", "set_params"], [470, 2, 1, "", "set_score_request"]], "sklearn.covariance.LedoitWolf": [[471, 2, 1, "", "error_norm"], [471, 2, 1, "", "fit"], [471, 2, 1, "", "get_metadata_routing"], [471, 2, 1, "", "get_params"], [471, 2, 1, "", "get_precision"], [471, 2, 1, "", "mahalanobis"], [471, 2, 1, "", "score"], [471, 2, 1, "", "set_params"], [471, 2, 1, "", "set_score_request"]], "sklearn.covariance.MinCovDet": [[472, 2, 1, "", "correct_covariance"], [472, 2, 1, "", "error_norm"], [472, 2, 1, "", "fit"], [472, 2, 1, "", "get_metadata_routing"], [472, 2, 1, "", "get_params"], [472, 2, 1, "", "get_precision"], [472, 2, 1, "", "mahalanobis"], [472, 2, 1, "", "reweight_covariance"], [472, 2, 1, "", "score"], [472, 2, 1, "", "set_params"], [472, 2, 1, "", "set_score_request"]], "sklearn.covariance.OAS": [[473, 2, 1, "", "error_norm"], [473, 2, 1, "", "fit"], [473, 2, 1, "", "get_metadata_routing"], [473, 2, 1, "", "get_params"], [473, 2, 1, "", "get_precision"], [473, 2, 1, "", "mahalanobis"], [473, 2, 1, "", "score"], [473, 2, 1, "", "set_params"], [473, 2, 1, "", "set_score_request"]], "sklearn.covariance.ShrunkCovariance": [[474, 2, 1, "", "error_norm"], [474, 2, 1, "", "fit"], [474, 2, 1, "", "get_metadata_routing"], [474, 2, 1, "", "get_params"], [474, 2, 1, "", "get_precision"], [474, 2, 1, "", "mahalanobis"], [474, 2, 1, "", "score"], [474, 2, 1, "", "set_params"], [474, 2, 1, "", "set_score_request"]], "sklearn.cross_decomposition": [[480, 1, 1, "", "CCA"], [481, 1, 1, "", "PLSCanonical"], [482, 1, 1, "", "PLSRegression"], [483, 1, 1, "", "PLSSVD"]], "sklearn.cross_decomposition.CCA": [[480, 2, 1, "", "fit"], [480, 2, 1, "", "fit_transform"], [480, 2, 1, "", "get_feature_names_out"], [480, 2, 1, "", "get_metadata_routing"], [480, 2, 1, "", "get_params"], [480, 2, 1, "", "inverse_transform"], [480, 2, 1, "", "predict"], [480, 2, 1, "", "score"], [480, 2, 1, "", "set_output"], [480, 2, 1, "", "set_params"], [480, 2, 1, "", "set_predict_request"], [480, 2, 1, "", "set_score_request"], [480, 2, 1, "", "set_transform_request"], [480, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSCanonical": [[481, 2, 1, "", "fit"], [481, 2, 1, "", "fit_transform"], [481, 2, 1, "", "get_feature_names_out"], [481, 2, 1, "", "get_metadata_routing"], [481, 2, 1, "", "get_params"], [481, 2, 1, "", "inverse_transform"], [481, 2, 1, "", "predict"], [481, 2, 1, "", "score"], [481, 2, 1, "", "set_output"], [481, 2, 1, "", "set_params"], [481, 2, 1, "", "set_predict_request"], [481, 2, 1, "", "set_score_request"], [481, 2, 1, "", "set_transform_request"], [481, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSRegression": [[482, 2, 1, "", "fit"], [482, 2, 1, "", "fit_transform"], [482, 2, 1, "", "get_feature_names_out"], [482, 2, 1, "", "get_metadata_routing"], [482, 2, 1, "", "get_params"], [482, 2, 1, "", "inverse_transform"], [482, 2, 1, "", "predict"], [482, 2, 1, "", "score"], [482, 2, 1, "", "set_output"], [482, 2, 1, "", "set_params"], [482, 2, 1, "", "set_predict_request"], [482, 2, 1, "", "set_score_request"], [482, 2, 1, "", "set_transform_request"], [482, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSSVD": [[483, 2, 1, "", "fit"], [483, 2, 1, "", "fit_transform"], [483, 2, 1, "", "get_feature_names_out"], [483, 2, 1, "", "get_metadata_routing"], [483, 2, 1, "", "get_params"], [483, 2, 1, "", "set_output"], [483, 2, 1, "", "set_params"], [483, 2, 1, "", "transform"]], "sklearn.datasets": [[484, 4, 1, "", "clear_data_home"], [485, 4, 1, "", "dump_svmlight_file"], [486, 4, 1, "", "fetch_20newsgroups"], [487, 4, 1, "", "fetch_20newsgroups_vectorized"], [488, 4, 1, "", "fetch_california_housing"], [489, 4, 1, "", "fetch_covtype"], [490, 4, 1, "", "fetch_kddcup99"], [491, 4, 1, "", "fetch_lfw_pairs"], [492, 4, 1, "", "fetch_lfw_people"], [493, 4, 1, "", "fetch_olivetti_faces"], [494, 4, 1, "", "fetch_openml"], [495, 4, 1, "", "fetch_rcv1"], [496, 4, 1, "", "fetch_species_distributions"], [497, 4, 1, "", "get_data_home"], [498, 4, 1, "", "load_breast_cancer"], [499, 4, 1, "", "load_diabetes"], [500, 4, 1, "", "load_digits"], [501, 4, 1, "", "load_files"], [502, 4, 1, "", "load_iris"], [503, 4, 1, "", "load_linnerud"], [504, 4, 1, "", "load_sample_image"], [505, 4, 1, "", "load_sample_images"], [506, 4, 1, "", "load_svmlight_file"], [507, 4, 1, "", "load_svmlight_files"], [508, 4, 1, "", "load_wine"], [509, 4, 1, "", "make_biclusters"], [510, 4, 1, "", "make_blobs"], [511, 4, 1, "", "make_checkerboard"], [512, 4, 1, "", "make_circles"], [513, 4, 1, "", "make_classification"], [514, 4, 1, "", "make_friedman1"], [515, 4, 1, "", "make_friedman2"], [516, 4, 1, "", "make_friedman3"], [517, 4, 1, "", "make_gaussian_quantiles"], [518, 4, 1, "", "make_hastie_10_2"], [519, 4, 1, "", "make_low_rank_matrix"], [520, 4, 1, "", "make_moons"], [521, 4, 1, "", "make_multilabel_classification"], [522, 4, 1, "", "make_regression"], [523, 4, 1, "", "make_s_curve"], [524, 4, 1, "", "make_sparse_coded_signal"], [525, 4, 1, "", "make_sparse_spd_matrix"], [526, 4, 1, "", "make_sparse_uncorrelated"], [527, 4, 1, "", "make_spd_matrix"], [528, 4, 1, "", "make_swiss_roll"]], "sklearn.decomposition": [[529, 1, 1, "", "DictionaryLearning"], [530, 1, 1, "", "FactorAnalysis"], [531, 1, 1, "", "FastICA"], [532, 1, 1, "", "IncrementalPCA"], [533, 1, 1, "", "KernelPCA"], [534, 1, 1, "", "LatentDirichletAllocation"], [535, 1, 1, "", "MiniBatchDictionaryLearning"], [536, 1, 1, "", "MiniBatchNMF"], [537, 1, 1, "", "MiniBatchSparsePCA"], [538, 1, 1, "", "NMF"], [539, 1, 1, "", "PCA"], [540, 1, 1, "", "SparseCoder"], [541, 1, 1, "", "SparsePCA"], [542, 1, 1, "", "TruncatedSVD"], [543, 4, 1, "", "dict_learning"], [544, 4, 1, "", "dict_learning_online"], [419, 4, 1, "", "fastica"], [545, 4, 1, "", "non_negative_factorization"], [546, 4, 1, "", "sparse_encode"]], "sklearn.decomposition.DictionaryLearning": [[529, 2, 1, "", "fit"], [529, 2, 1, "", "fit_transform"], [529, 2, 1, "", "get_feature_names_out"], [529, 2, 1, "", "get_metadata_routing"], [529, 2, 1, "", "get_params"], [529, 2, 1, "", "set_output"], [529, 2, 1, "", "set_params"], [529, 2, 1, "", "transform"]], "sklearn.decomposition.FactorAnalysis": [[530, 2, 1, "", "fit"], [530, 2, 1, "", "fit_transform"], [530, 2, 1, "", "get_covariance"], [530, 2, 1, "", "get_feature_names_out"], [530, 2, 1, "", "get_metadata_routing"], [530, 2, 1, "", "get_params"], [530, 2, 1, "", "get_precision"], [530, 2, 1, "", "score"], [530, 2, 1, "", "score_samples"], [530, 2, 1, "", "set_output"], [530, 2, 1, "", "set_params"], [530, 2, 1, "", "transform"]], "sklearn.decomposition.FastICA": [[531, 2, 1, "", "fit"], [531, 2, 1, "", "fit_transform"], [531, 2, 1, "", "get_feature_names_out"], [531, 2, 1, "", "get_metadata_routing"], [531, 2, 1, "", "get_params"], [531, 2, 1, "", "inverse_transform"], [531, 2, 1, "", "set_inverse_transform_request"], [531, 2, 1, "", "set_output"], [531, 2, 1, "", "set_params"], [531, 2, 1, "", "set_transform_request"], [531, 2, 1, "", "transform"]], "sklearn.decomposition.IncrementalPCA": [[532, 2, 1, "", "fit"], [532, 2, 1, "", "fit_transform"], [532, 2, 1, "", "get_covariance"], [532, 2, 1, "", "get_feature_names_out"], [532, 2, 1, "", "get_metadata_routing"], [532, 2, 1, "", "get_params"], [532, 2, 1, "", "get_precision"], [532, 2, 1, "", "inverse_transform"], [532, 2, 1, "", "partial_fit"], [532, 2, 1, "", "set_output"], [532, 2, 1, "", "set_params"], [532, 2, 1, "", "set_partial_fit_request"], [532, 2, 1, "", "transform"]], "sklearn.decomposition.KernelPCA": [[533, 2, 1, "", "fit"], [533, 2, 1, "", "fit_transform"], [533, 2, 1, "", "get_feature_names_out"], [533, 2, 1, "", "get_metadata_routing"], [533, 2, 1, "", "get_params"], [533, 2, 1, "", "inverse_transform"], [533, 2, 1, "", "set_output"], [533, 2, 1, "", "set_params"], [533, 2, 1, "", "transform"]], "sklearn.decomposition.LatentDirichletAllocation": [[534, 2, 1, "", "fit"], [534, 2, 1, "", "fit_transform"], [534, 2, 1, "", "get_feature_names_out"], [534, 2, 1, "", "get_metadata_routing"], [534, 2, 1, "", "get_params"], [534, 2, 1, "", "partial_fit"], [534, 2, 1, "", "perplexity"], [534, 2, 1, "", "score"], [534, 2, 1, "", "set_output"], [534, 2, 1, "", "set_params"], [534, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchDictionaryLearning": [[535, 2, 1, "", "fit"], [535, 2, 1, "", "fit_transform"], [535, 2, 1, "", "get_feature_names_out"], [535, 2, 1, "", "get_metadata_routing"], [535, 2, 1, "", "get_params"], [535, 2, 1, "", "partial_fit"], [535, 2, 1, "", "set_output"], [535, 2, 1, "", "set_params"], [535, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchNMF": [[536, 2, 1, "", "fit"], [536, 2, 1, "", "fit_transform"], [536, 2, 1, "", "get_feature_names_out"], [536, 2, 1, "", "get_metadata_routing"], [536, 2, 1, "", "get_params"], [536, 2, 1, "", "inverse_transform"], [536, 2, 1, "", "partial_fit"], [536, 2, 1, "", "set_output"], [536, 2, 1, "", "set_params"], [536, 2, 1, "", "set_partial_fit_request"], [536, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchSparsePCA": [[537, 2, 1, "", "fit"], [537, 2, 1, "", "fit_transform"], [537, 2, 1, "", "get_feature_names_out"], [537, 2, 1, "", "get_metadata_routing"], [537, 2, 1, "", "get_params"], [537, 2, 1, "", "inverse_transform"], [537, 2, 1, "", "set_output"], [537, 2, 1, "", "set_params"], [537, 2, 1, "", "transform"]], "sklearn.decomposition.NMF": [[538, 2, 1, "", "fit"], [538, 2, 1, "", "fit_transform"], [538, 2, 1, "", "get_feature_names_out"], [538, 2, 1, "", "get_metadata_routing"], [538, 2, 1, "", "get_params"], [538, 2, 1, "", "inverse_transform"], [538, 2, 1, "", "set_output"], [538, 2, 1, "", "set_params"], [538, 2, 1, "", "transform"]], "sklearn.decomposition.PCA": [[539, 2, 1, "", "fit"], [539, 2, 1, "", "fit_transform"], [539, 2, 1, "", "get_covariance"], [539, 2, 1, "", "get_feature_names_out"], [539, 2, 1, "", "get_metadata_routing"], [539, 2, 1, "", "get_params"], [539, 2, 1, "", "get_precision"], [539, 2, 1, "", "inverse_transform"], [539, 2, 1, "", "score"], [539, 2, 1, "", "score_samples"], [539, 2, 1, "", "set_output"], [539, 2, 1, "", "set_params"], [539, 2, 1, "", "transform"]], "sklearn.decomposition.SparseCoder": [[540, 2, 1, "", "fit"], [540, 2, 1, "", "fit_transform"], [540, 2, 1, "", "get_feature_names_out"], [540, 2, 1, "", "get_metadata_routing"], [540, 2, 1, "", "get_params"], [540, 3, 1, "", "n_components_"], [540, 3, 1, "", "n_features_in_"], [540, 2, 1, "", "set_output"], [540, 2, 1, "", "set_params"], [540, 2, 1, "", "transform"]], "sklearn.decomposition.SparsePCA": [[541, 2, 1, "", "fit"], [541, 2, 1, "", "fit_transform"], [541, 2, 1, "", "get_feature_names_out"], [541, 2, 1, "", "get_metadata_routing"], [541, 2, 1, "", "get_params"], [541, 2, 1, "", "inverse_transform"], [541, 2, 1, "", "set_output"], [541, 2, 1, "", "set_params"], [541, 2, 1, "", "transform"]], "sklearn.decomposition.TruncatedSVD": [[542, 2, 1, "", "fit"], [542, 2, 1, "", "fit_transform"], [542, 2, 1, "", "get_feature_names_out"], [542, 2, 1, "", "get_metadata_routing"], [542, 2, 1, "", "get_params"], [542, 2, 1, "", "inverse_transform"], [542, 2, 1, "", "set_output"], [542, 2, 1, "", "set_params"], [542, 2, 1, "", "transform"]], "sklearn.discriminant_analysis": [[547, 1, 1, "", "LinearDiscriminantAnalysis"], [548, 1, 1, "", "QuadraticDiscriminantAnalysis"]], "sklearn.discriminant_analysis.LinearDiscriminantAnalysis": [[547, 2, 1, "", "decision_function"], [547, 2, 1, "", "fit"], [547, 2, 1, "", "fit_transform"], [547, 2, 1, "", "get_feature_names_out"], [547, 2, 1, "", "get_metadata_routing"], [547, 2, 1, "", "get_params"], [547, 2, 1, "", "predict"], [547, 2, 1, "", "predict_log_proba"], [547, 2, 1, "", "predict_proba"], [547, 2, 1, "", "score"], [547, 2, 1, "", "set_output"], [547, 2, 1, "", "set_params"], [547, 2, 1, "", "set_score_request"], [547, 2, 1, "", "transform"]], "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis": [[548, 2, 1, "", "decision_function"], [548, 2, 1, "", "fit"], [548, 2, 1, "", "get_metadata_routing"], [548, 2, 1, "", "get_params"], [548, 2, 1, "", "predict"], [548, 2, 1, "", "predict_log_proba"], [548, 2, 1, "", "predict_proba"], [548, 2, 1, "", "score"], [548, 2, 1, "", "set_params"], [548, 2, 1, "", "set_score_request"]], "sklearn.dummy": [[549, 1, 1, "", "DummyClassifier"], [550, 1, 1, "", "DummyRegressor"]], "sklearn.dummy.DummyClassifier": [[549, 2, 1, "", "fit"], [549, 2, 1, "", "get_metadata_routing"], [549, 2, 1, "", "get_params"], [549, 2, 1, "", "predict"], [549, 2, 1, "", "predict_log_proba"], [549, 2, 1, "", "predict_proba"], [549, 2, 1, "", "score"], [549, 2, 1, "", "set_fit_request"], [549, 2, 1, "", "set_params"], [549, 2, 1, "", "set_score_request"]], "sklearn.dummy.DummyRegressor": [[550, 2, 1, "", "fit"], [550, 2, 1, "", "get_metadata_routing"], [550, 2, 1, "", "get_params"], [550, 2, 1, "", "predict"], [550, 2, 1, "", "score"], [550, 2, 1, "", "set_fit_request"], [550, 2, 1, "", "set_params"], [550, 2, 1, "", "set_predict_request"], [550, 2, 1, "", "set_score_request"]], "sklearn.ensemble": [[551, 1, 1, "", "AdaBoostClassifier"], [552, 1, 1, "", "AdaBoostRegressor"], [553, 1, 1, "", "BaggingClassifier"], [554, 1, 1, "", "BaggingRegressor"], [555, 1, 1, "", "ExtraTreesClassifier"], [556, 1, 1, "", "ExtraTreesRegressor"], [557, 1, 1, "", "GradientBoostingClassifier"], [558, 1, 1, "", "GradientBoostingRegressor"], [559, 1, 1, "", "HistGradientBoostingClassifier"], [560, 1, 1, "", "HistGradientBoostingRegressor"], [561, 1, 1, "", "IsolationForest"], [562, 1, 1, "", "RandomForestClassifier"], [563, 1, 1, "", "RandomForestRegressor"], [564, 1, 1, "", "RandomTreesEmbedding"], [565, 1, 1, "", "StackingClassifier"], [566, 1, 1, "", "StackingRegressor"], [567, 1, 1, "", "VotingClassifier"], [568, 1, 1, "", "VotingRegressor"]], "sklearn.ensemble.AdaBoostClassifier": [[551, 2, 1, "", "decision_function"], [551, 3, 1, "", "feature_importances_"], [551, 2, 1, "", "fit"], [551, 2, 1, "", "get_metadata_routing"], [551, 2, 1, "", "get_params"], [551, 2, 1, "", "predict"], [551, 2, 1, "", "predict_log_proba"], [551, 2, 1, "", "predict_proba"], [551, 2, 1, "", "score"], [551, 2, 1, "", "set_fit_request"], [551, 2, 1, "", "set_params"], [551, 2, 1, "", "set_score_request"], [551, 2, 1, "", "staged_decision_function"], [551, 2, 1, "", "staged_predict"], [551, 2, 1, "", "staged_predict_proba"], [551, 2, 1, "", "staged_score"]], "sklearn.ensemble.AdaBoostRegressor": [[552, 3, 1, "", "feature_importances_"], [552, 2, 1, "", "fit"], [552, 2, 1, "", "get_metadata_routing"], [552, 2, 1, "", "get_params"], [552, 2, 1, "", "predict"], [552, 2, 1, "", "score"], [552, 2, 1, "", "set_fit_request"], [552, 2, 1, "", "set_params"], [552, 2, 1, "", "set_score_request"], [552, 2, 1, "", "staged_predict"], [552, 2, 1, "", "staged_score"]], "sklearn.ensemble.BaggingClassifier": [[553, 2, 1, "", "decision_function"], [553, 3, 1, "", "estimators_samples_"], [553, 2, 1, "", "fit"], [553, 2, 1, "", "get_metadata_routing"], [553, 2, 1, "", "get_params"], [553, 2, 1, "", "predict"], [553, 2, 1, "", "predict_log_proba"], [553, 2, 1, "", "predict_proba"], [553, 2, 1, "", "score"], [553, 2, 1, "", "set_fit_request"], [553, 2, 1, "", "set_params"], [553, 2, 1, "", "set_score_request"]], "sklearn.ensemble.BaggingRegressor": [[554, 3, 1, "", "estimators_samples_"], [554, 2, 1, "", "fit"], [554, 2, 1, "", "get_metadata_routing"], [554, 2, 1, "", "get_params"], [554, 2, 1, "", "predict"], [554, 2, 1, "", "score"], [554, 2, 1, "", "set_fit_request"], [554, 2, 1, "", "set_params"], [554, 2, 1, "", "set_score_request"]], "sklearn.ensemble.ExtraTreesClassifier": [[555, 2, 1, "", "apply"], [555, 2, 1, "", "decision_path"], [555, 3, 1, "", "estimators_samples_"], [555, 3, 1, "", "feature_importances_"], [555, 2, 1, "", "fit"], [555, 2, 1, "", "get_metadata_routing"], [555, 2, 1, "", "get_params"], [555, 2, 1, "", "predict"], [555, 2, 1, "", "predict_log_proba"], [555, 2, 1, "", "predict_proba"], [555, 2, 1, "", "score"], [555, 2, 1, "", "set_fit_request"], [555, 2, 1, "", "set_params"], [555, 2, 1, "", "set_score_request"]], "sklearn.ensemble.ExtraTreesRegressor": [[556, 2, 1, "", "apply"], [556, 2, 1, "", "decision_path"], [556, 3, 1, "", "estimators_samples_"], [556, 3, 1, "", "feature_importances_"], [556, 2, 1, "", "fit"], [556, 2, 1, "", "get_metadata_routing"], [556, 2, 1, "", "get_params"], [556, 2, 1, "", "predict"], [556, 2, 1, "", "score"], [556, 2, 1, "", "set_fit_request"], [556, 2, 1, "", "set_params"], [556, 2, 1, "", "set_score_request"]], "sklearn.ensemble.GradientBoostingClassifier": [[557, 2, 1, "", "apply"], [557, 2, 1, "", "decision_function"], [557, 3, 1, "", "feature_importances_"], [557, 2, 1, "", "fit"], [557, 2, 1, "", "get_metadata_routing"], [557, 2, 1, "", "get_params"], [557, 2, 1, "", "predict"], [557, 2, 1, "", "predict_log_proba"], [557, 2, 1, "", "predict_proba"], [557, 2, 1, "", "score"], [557, 2, 1, "", "set_fit_request"], [557, 2, 1, "", "set_params"], [557, 2, 1, "", "set_score_request"], [557, 2, 1, "", "staged_decision_function"], [557, 2, 1, "", "staged_predict"], [557, 2, 1, "", "staged_predict_proba"]], "sklearn.ensemble.GradientBoostingRegressor": [[558, 2, 1, "", "apply"], [558, 3, 1, "", "feature_importances_"], [558, 2, 1, "", "fit"], [558, 2, 1, "", "get_metadata_routing"], [558, 2, 1, "", "get_params"], [558, 2, 1, "", "predict"], [558, 2, 1, "", "score"], [558, 2, 1, "", "set_fit_request"], [558, 2, 1, "", "set_params"], [558, 2, 1, "", "set_score_request"], [558, 2, 1, "", "staged_predict"]], "sklearn.ensemble.HistGradientBoostingClassifier": [[559, 2, 1, "", "decision_function"], [559, 2, 1, "", "fit"], [559, 2, 1, "", "get_metadata_routing"], [559, 2, 1, "", "get_params"], [559, 3, 1, "", "n_iter_"], [559, 2, 1, "", "predict"], [559, 2, 1, "", "predict_proba"], [559, 2, 1, "", "score"], [559, 2, 1, "", "set_fit_request"], [559, 2, 1, "", "set_params"], [559, 2, 1, "", "set_score_request"], [559, 2, 1, "", "staged_decision_function"], [559, 2, 1, "", "staged_predict"], [559, 2, 1, "", "staged_predict_proba"]], "sklearn.ensemble.HistGradientBoostingRegressor": [[560, 2, 1, "", "fit"], [560, 2, 1, "", "get_metadata_routing"], [560, 2, 1, "", "get_params"], [560, 3, 1, "", "n_iter_"], [560, 2, 1, "", "predict"], [560, 2, 1, "", "score"], [560, 2, 1, "", "set_fit_request"], [560, 2, 1, "", "set_params"], [560, 2, 1, "", "set_score_request"], [560, 2, 1, "", "staged_predict"]], "sklearn.ensemble.IsolationForest": [[561, 2, 1, "", "decision_function"], [561, 3, 1, "", "estimators_samples_"], [561, 2, 1, "", "fit"], [561, 2, 1, "", "fit_predict"], [561, 2, 1, "", "get_metadata_routing"], [561, 2, 1, "", "get_params"], [561, 2, 1, "", "predict"], [561, 2, 1, "", "score_samples"], [561, 2, 1, "", "set_fit_request"], [561, 2, 1, "", "set_params"]], "sklearn.ensemble.RandomForestClassifier": [[562, 2, 1, "", "apply"], [562, 2, 1, "", "decision_path"], [562, 3, 1, "", "estimators_samples_"], [562, 3, 1, "", "feature_importances_"], [562, 2, 1, "", "fit"], [562, 2, 1, "", "get_metadata_routing"], [562, 2, 1, "", "get_params"], [562, 2, 1, "", "predict"], [562, 2, 1, "", "predict_log_proba"], [562, 2, 1, "", "predict_proba"], [562, 2, 1, "", "score"], [562, 2, 1, "", "set_fit_request"], [562, 2, 1, "", "set_params"], [562, 2, 1, "", "set_score_request"]], "sklearn.ensemble.RandomForestRegressor": [[563, 2, 1, "", "apply"], [563, 2, 1, "", "decision_path"], [563, 3, 1, "", "estimators_samples_"], [563, 3, 1, "", "feature_importances_"], [563, 2, 1, "", "fit"], [563, 2, 1, "", "get_metadata_routing"], [563, 2, 1, "", "get_params"], [563, 2, 1, "", "predict"], [563, 2, 1, "", "score"], [563, 2, 1, "", "set_fit_request"], [563, 2, 1, "", "set_params"], [563, 2, 1, "", "set_score_request"]], "sklearn.ensemble.RandomTreesEmbedding": [[564, 2, 1, "", "apply"], [564, 2, 1, "", "decision_path"], [564, 3, 1, "", "estimators_samples_"], [564, 3, 1, "", "feature_importances_"], [564, 2, 1, "", "fit"], [564, 2, 1, "", "fit_transform"], [564, 2, 1, "", "get_feature_names_out"], [564, 2, 1, "", "get_metadata_routing"], [564, 2, 1, "", "get_params"], [564, 2, 1, "", "set_fit_request"], [564, 2, 1, "", "set_output"], [564, 2, 1, "", "set_params"], [564, 2, 1, "", "transform"]], "sklearn.ensemble.StackingClassifier": [[565, 2, 1, "", "decision_function"], [565, 2, 1, "", "fit"], [565, 2, 1, "", "fit_transform"], [565, 2, 1, "", "get_feature_names_out"], [565, 2, 1, "", "get_metadata_routing"], [565, 2, 1, "", "get_params"], [565, 3, 1, "", "n_features_in_"], [565, 3, 1, "", "named_estimators"], [565, 2, 1, "", "predict"], [565, 2, 1, "", "predict_proba"], [565, 2, 1, "", "score"], [565, 2, 1, "", "set_fit_request"], [565, 2, 1, "", "set_output"], [565, 2, 1, "", "set_params"], [565, 2, 1, "", "set_score_request"], [565, 2, 1, "", "transform"]], "sklearn.ensemble.StackingRegressor": [[566, 2, 1, "", "fit"], [566, 2, 1, "", "fit_transform"], [566, 2, 1, "", "get_feature_names_out"], [566, 2, 1, "", "get_metadata_routing"], [566, 2, 1, "", "get_params"], [566, 3, 1, "", "n_features_in_"], [566, 3, 1, "", "named_estimators"], [566, 2, 1, "", "predict"], [566, 2, 1, "", "score"], [566, 2, 1, "", "set_fit_request"], [566, 2, 1, "", "set_output"], [566, 2, 1, "", "set_params"], [566, 2, 1, "", "set_score_request"], [566, 2, 1, "", "transform"]], "sklearn.ensemble.VotingClassifier": [[567, 2, 1, "", "fit"], [567, 2, 1, "", "fit_transform"], [567, 2, 1, "", "get_feature_names_out"], [567, 2, 1, "", "get_metadata_routing"], [567, 2, 1, "", "get_params"], [567, 3, 1, "", "n_features_in_"], [567, 3, 1, "", "named_estimators"], [567, 2, 1, "", "predict"], [567, 2, 1, "", "predict_proba"], [567, 2, 1, "", "score"], [567, 2, 1, "", "set_fit_request"], [567, 2, 1, "", "set_output"], [567, 2, 1, "", "set_params"], [567, 2, 1, "", "set_score_request"], [567, 2, 1, "", "transform"]], "sklearn.ensemble.VotingRegressor": [[568, 2, 1, "", "fit"], [568, 2, 1, "", "fit_transform"], [568, 2, 1, "", "get_feature_names_out"], [568, 2, 1, "", "get_metadata_routing"], [568, 2, 1, "", "get_params"], [568, 3, 1, "", "n_features_in_"], [568, 3, 1, "", "named_estimators"], [568, 2, 1, "", "predict"], [568, 2, 1, "", "score"], [568, 2, 1, "", "set_fit_request"], [568, 2, 1, "", "set_output"], [568, 2, 1, "", "set_params"], [568, 2, 1, "", "set_score_request"], [568, 2, 1, "", "transform"]], "sklearn.exceptions": [[569, 1, 1, "", "ConvergenceWarning"], [570, 1, 1, "", "DataConversionWarning"], [571, 1, 1, "", "DataDimensionalityWarning"], [572, 1, 1, "", "EfficiencyWarning"], [573, 1, 1, "", "FitFailedWarning"], [574, 1, 1, "", "InconsistentVersionWarning"], [575, 1, 1, "", "NotFittedError"], [576, 1, 1, "", "UndefinedMetricWarning"]], "sklearn.exceptions.ConvergenceWarning": [[569, 2, 1, "", "with_traceback"]], "sklearn.exceptions.DataConversionWarning": [[570, 2, 1, "", "with_traceback"]], "sklearn.exceptions.DataDimensionalityWarning": [[571, 2, 1, "", "with_traceback"]], "sklearn.exceptions.EfficiencyWarning": [[572, 2, 1, "", "with_traceback"]], "sklearn.exceptions.FitFailedWarning": [[573, 2, 1, "", "with_traceback"]], "sklearn.exceptions.InconsistentVersionWarning": [[574, 2, 1, "", "with_traceback"]], "sklearn.exceptions.NotFittedError": [[575, 2, 1, "", "with_traceback"]], "sklearn.exceptions.UndefinedMetricWarning": [[576, 2, 1, "", "with_traceback"]], "sklearn.experimental": [[577, 0, 0, "-", "enable_halving_search_cv"], [578, 0, 0, "-", "enable_iterative_imputer"]], "sklearn.feature_extraction": [[579, 1, 1, "", "DictVectorizer"], [580, 1, 1, "", "FeatureHasher"], [406, 0, 0, "-", "image"], [406, 0, 0, "-", "text"]], "sklearn.feature_extraction.DictVectorizer": [[579, 2, 1, "", "fit"], [579, 2, 1, "", "fit_transform"], [579, 2, 1, "", "get_feature_names_out"], [579, 2, 1, "", "get_metadata_routing"], [579, 2, 1, "", "get_params"], [579, 2, 1, "", "inverse_transform"], [579, 2, 1, "", "restrict"], [579, 2, 1, "", "set_inverse_transform_request"], [579, 2, 1, "", "set_output"], [579, 2, 1, "", "set_params"], [579, 2, 1, "", "transform"]], "sklearn.feature_extraction.FeatureHasher": [[580, 2, 1, "", "fit"], [580, 2, 1, "", "fit_transform"], [580, 2, 1, "", "get_metadata_routing"], [580, 2, 1, "", "get_params"], [580, 2, 1, "", "set_output"], [580, 2, 1, "", "set_params"], [580, 2, 1, "", "set_transform_request"], [580, 2, 1, "", "transform"]], "sklearn.feature_extraction.image": [[581, 1, 1, "", "PatchExtractor"], [582, 4, 1, "", "extract_patches_2d"], [583, 4, 1, "", "grid_to_graph"], [584, 4, 1, "", "img_to_graph"], [585, 4, 1, "", "reconstruct_from_patches_2d"]], "sklearn.feature_extraction.image.PatchExtractor": [[581, 2, 1, "", "fit"], [581, 2, 1, "", "fit_transform"], [581, 2, 1, "", "get_metadata_routing"], [581, 2, 1, "", "get_params"], [581, 2, 1, "", "set_output"], [581, 2, 1, "", "set_params"], [581, 2, 1, "", "transform"]], "sklearn.feature_extraction.text": [[586, 1, 1, "", "CountVectorizer"], [587, 1, 1, "", "HashingVectorizer"], [588, 1, 1, "", "TfidfTransformer"], [589, 1, 1, "", "TfidfVectorizer"]], "sklearn.feature_extraction.text.CountVectorizer": [[586, 2, 1, "", "build_analyzer"], [586, 2, 1, "", "build_preprocessor"], [586, 2, 1, "", "build_tokenizer"], [586, 2, 1, "", "decode"], [586, 2, 1, "", "fit"], [586, 2, 1, "", "fit_transform"], [586, 2, 1, "", "get_feature_names_out"], [586, 2, 1, "", "get_metadata_routing"], [586, 2, 1, "", "get_params"], [586, 2, 1, "", "get_stop_words"], [586, 2, 1, "", "inverse_transform"], [586, 2, 1, "", "set_fit_request"], [586, 2, 1, "", "set_params"], [586, 2, 1, "", "set_transform_request"], [586, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.HashingVectorizer": [[587, 2, 1, "", "build_analyzer"], [587, 2, 1, "", "build_preprocessor"], [587, 2, 1, "", "build_tokenizer"], [587, 2, 1, "", "decode"], [587, 2, 1, "", "fit"], [587, 2, 1, "", "fit_transform"], [587, 2, 1, "", "get_metadata_routing"], [587, 2, 1, "", "get_params"], [587, 2, 1, "", "get_stop_words"], [587, 2, 1, "", "partial_fit"], [587, 2, 1, "", "set_output"], [587, 2, 1, "", "set_params"], [587, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.TfidfTransformer": [[588, 2, 1, "", "fit"], [588, 2, 1, "", "fit_transform"], [588, 2, 1, "", "get_feature_names_out"], [588, 2, 1, "", "get_metadata_routing"], [588, 2, 1, "", "get_params"], [588, 2, 1, "", "set_output"], [588, 2, 1, "", "set_params"], [588, 2, 1, "", "set_transform_request"], [588, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.TfidfVectorizer": [[589, 2, 1, "", "build_analyzer"], [589, 2, 1, "", "build_preprocessor"], [589, 2, 1, "", "build_tokenizer"], [589, 2, 1, "", "decode"], [589, 2, 1, "", "fit"], [589, 2, 1, "", "fit_transform"], [589, 2, 1, "", "get_feature_names_out"], [589, 2, 1, "", "get_metadata_routing"], [589, 2, 1, "", "get_params"], [589, 2, 1, "", "get_stop_words"], [589, 3, 1, "", "idf_"], [589, 2, 1, "", "inverse_transform"], [589, 2, 1, "", "set_fit_request"], [589, 2, 1, "", "set_params"], [589, 2, 1, "", "set_transform_request"], [589, 2, 1, "", "transform"]], "sklearn.feature_selection": [[590, 1, 1, "", "GenericUnivariateSelect"], [591, 1, 1, "", "RFE"], [592, 1, 1, "", "RFECV"], [593, 1, 1, "", "SelectFdr"], [594, 1, 1, "", "SelectFpr"], [595, 1, 1, "", "SelectFromModel"], [596, 1, 1, "", "SelectFwe"], [597, 1, 1, "", "SelectKBest"], [598, 1, 1, "", "SelectPercentile"], [599, 1, 1, "", "SelectorMixin"], [600, 1, 1, "", "SequentialFeatureSelector"], [601, 1, 1, "", "VarianceThreshold"], [602, 4, 1, "", "chi2"], [603, 4, 1, "", "f_classif"], [604, 4, 1, "", "f_regression"], [605, 4, 1, "", "mutual_info_classif"], [606, 4, 1, "", "mutual_info_regression"], [607, 4, 1, "", "r_regression"]], "sklearn.feature_selection.GenericUnivariateSelect": [[590, 2, 1, "", "fit"], [590, 2, 1, "", "fit_transform"], [590, 2, 1, "", "get_feature_names_out"], [590, 2, 1, "", "get_metadata_routing"], [590, 2, 1, "", "get_params"], [590, 2, 1, "", "get_support"], [590, 2, 1, "", "inverse_transform"], [590, 2, 1, "", "set_output"], [590, 2, 1, "", "set_params"], [590, 2, 1, "", "transform"]], "sklearn.feature_selection.RFE": [[591, 3, 1, "", "classes_"], [591, 2, 1, "", "decision_function"], [591, 2, 1, "", "fit"], [591, 2, 1, "", "fit_transform"], [591, 2, 1, "", "get_feature_names_out"], [591, 2, 1, "", "get_metadata_routing"], [591, 2, 1, "", "get_params"], [591, 2, 1, "", "get_support"], [591, 2, 1, "", "inverse_transform"], [591, 2, 1, "", "predict"], [591, 2, 1, "", "predict_log_proba"], [591, 2, 1, "", "predict_proba"], [591, 2, 1, "", "score"], [591, 2, 1, "", "set_output"], [591, 2, 1, "", "set_params"], [591, 2, 1, "", "transform"]], "sklearn.feature_selection.RFECV": [[592, 3, 1, "", "classes_"], [592, 2, 1, "", "decision_function"], [592, 2, 1, "", "fit"], [592, 2, 1, "", "fit_transform"], [592, 2, 1, "", "get_feature_names_out"], [592, 2, 1, "", "get_metadata_routing"], [592, 2, 1, "", "get_params"], [592, 2, 1, "", "get_support"], [592, 2, 1, "", "inverse_transform"], [592, 2, 1, "", "predict"], [592, 2, 1, "", "predict_log_proba"], [592, 2, 1, "", "predict_proba"], [592, 2, 1, "", "score"], [592, 2, 1, "", "set_fit_request"], [592, 2, 1, "", "set_output"], [592, 2, 1, "", "set_params"], [592, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFdr": [[593, 2, 1, "", "fit"], [593, 2, 1, "", "fit_transform"], [593, 2, 1, "", "get_feature_names_out"], [593, 2, 1, "", "get_metadata_routing"], [593, 2, 1, "", "get_params"], [593, 2, 1, "", "get_support"], [593, 2, 1, "", "inverse_transform"], [593, 2, 1, "", "set_output"], [593, 2, 1, "", "set_params"], [593, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFpr": [[594, 2, 1, "", "fit"], [594, 2, 1, "", "fit_transform"], [594, 2, 1, "", "get_feature_names_out"], [594, 2, 1, "", "get_metadata_routing"], [594, 2, 1, "", "get_params"], [594, 2, 1, "", "get_support"], [594, 2, 1, "", "inverse_transform"], [594, 2, 1, "", "set_output"], [594, 2, 1, "", "set_params"], [594, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFromModel": [[595, 2, 1, "", "fit"], [595, 2, 1, "", "fit_transform"], [595, 2, 1, "", "get_feature_names_out"], [595, 2, 1, "", "get_metadata_routing"], [595, 2, 1, "", "get_params"], [595, 2, 1, "", "get_support"], [595, 2, 1, "", "inverse_transform"], [595, 3, 1, "", "n_features_in_"], [595, 2, 1, "", "partial_fit"], [595, 2, 1, "", "set_output"], [595, 2, 1, "", "set_params"], [595, 3, 1, "", "threshold_"], [595, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFwe": [[596, 2, 1, "", "fit"], [596, 2, 1, "", "fit_transform"], [596, 2, 1, "", "get_feature_names_out"], [596, 2, 1, "", "get_metadata_routing"], [596, 2, 1, "", "get_params"], [596, 2, 1, "", "get_support"], [596, 2, 1, "", "inverse_transform"], [596, 2, 1, "", "set_output"], [596, 2, 1, "", "set_params"], [596, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectKBest": [[597, 2, 1, "", "fit"], [597, 2, 1, "", "fit_transform"], [597, 2, 1, "", "get_feature_names_out"], [597, 2, 1, "", "get_metadata_routing"], [597, 2, 1, "", "get_params"], [597, 2, 1, "", "get_support"], [597, 2, 1, "", "inverse_transform"], [597, 2, 1, "", "set_output"], [597, 2, 1, "", "set_params"], [597, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectPercentile": [[598, 2, 1, "", "fit"], [598, 2, 1, "", "fit_transform"], [598, 2, 1, "", "get_feature_names_out"], [598, 2, 1, "", "get_metadata_routing"], [598, 2, 1, "", "get_params"], [598, 2, 1, "", "get_support"], [598, 2, 1, "", "inverse_transform"], [598, 2, 1, "", "set_output"], [598, 2, 1, "", "set_params"], [598, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectorMixin": [[599, 2, 1, "", "fit_transform"], [599, 2, 1, "", "get_feature_names_out"], [599, 2, 1, "", "get_support"], [599, 2, 1, "", "inverse_transform"], [599, 2, 1, "", "set_output"], [599, 2, 1, "", "transform"]], "sklearn.feature_selection.SequentialFeatureSelector": [[600, 2, 1, "", "fit"], [600, 2, 1, "", "fit_transform"], [600, 2, 1, "", "get_feature_names_out"], [600, 2, 1, "", "get_metadata_routing"], [600, 2, 1, "", "get_params"], [600, 2, 1, "", "get_support"], [600, 2, 1, "", "inverse_transform"], [600, 2, 1, "", "set_output"], [600, 2, 1, "", "set_params"], [600, 2, 1, "", "transform"]], "sklearn.feature_selection.VarianceThreshold": [[601, 2, 1, "", "fit"], [601, 2, 1, "", "fit_transform"], [601, 2, 1, "", "get_feature_names_out"], [601, 2, 1, "", "get_metadata_routing"], [601, 2, 1, "", "get_params"], [601, 2, 1, "", "get_support"], [601, 2, 1, "", "inverse_transform"], [601, 2, 1, "", "set_output"], [601, 2, 1, "", "set_params"], [601, 2, 1, "", "transform"]], "sklearn.gaussian_process": [[608, 1, 1, "", "GaussianProcessClassifier"], [609, 1, 1, "", "GaussianProcessRegressor"], [406, 0, 0, "-", "kernels"]], "sklearn.gaussian_process.GaussianProcessClassifier": [[608, 2, 1, "", "fit"], [608, 2, 1, "", "get_metadata_routing"], [608, 2, 1, "", "get_params"], [608, 3, 1, "", "kernel_"], [608, 2, 1, "", "log_marginal_likelihood"], [608, 2, 1, "", "predict"], [608, 2, 1, "", "predict_proba"], [608, 2, 1, "", "score"], [608, 2, 1, "", "set_params"], [608, 2, 1, "", "set_score_request"]], "sklearn.gaussian_process.GaussianProcessRegressor": [[609, 2, 1, "", "fit"], [609, 2, 1, "", "get_metadata_routing"], [609, 2, 1, "", "get_params"], [609, 2, 1, "", "log_marginal_likelihood"], [609, 2, 1, "", "predict"], [609, 2, 1, "", "sample_y"], [609, 2, 1, "", "score"], [609, 2, 1, "", "set_params"], [609, 2, 1, "", "set_predict_request"], [609, 2, 1, "", "set_score_request"]], "sklearn.gaussian_process.kernels": [[610, 1, 1, "", "CompoundKernel"], [611, 1, 1, "", "ConstantKernel"], [612, 1, 1, "", "DotProduct"], [613, 1, 1, "", "ExpSineSquared"], [614, 1, 1, "", "Exponentiation"], [615, 1, 1, "", "Hyperparameter"], [616, 1, 1, "", "Kernel"], [617, 1, 1, "", "Matern"], [618, 1, 1, "", "PairwiseKernel"], [619, 1, 1, "", "Product"], [620, 1, 1, "", "RBF"], [621, 1, 1, "", "RationalQuadratic"], [622, 1, 1, "", "Sum"], [623, 1, 1, "", "WhiteKernel"]], "sklearn.gaussian_process.kernels.CompoundKernel": [[610, 2, 1, "", "__call__"], [610, 3, 1, "", "bounds"], [610, 2, 1, "", "clone_with_theta"], [610, 2, 1, "", "diag"], [610, 2, 1, "", "get_params"], [610, 3, 1, "", "hyperparameters"], [610, 2, 1, "", "is_stationary"], [610, 3, 1, "", "n_dims"], [610, 3, 1, "", "requires_vector_input"], [610, 2, 1, "", "set_params"], [610, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.ConstantKernel": [[611, 2, 1, "", "__call__"], [611, 3, 1, "", "bounds"], [611, 2, 1, "", "clone_with_theta"], [611, 2, 1, "", "diag"], [611, 2, 1, "", "get_params"], [611, 3, 1, "", "hyperparameters"], [611, 2, 1, "", "is_stationary"], [611, 3, 1, "", "n_dims"], [611, 3, 1, "", "requires_vector_input"], [611, 2, 1, "", "set_params"], [611, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.DotProduct": [[612, 2, 1, "", "__call__"], [612, 3, 1, "", "bounds"], [612, 2, 1, "", "clone_with_theta"], [612, 2, 1, "", "diag"], [612, 2, 1, "", "get_params"], [612, 3, 1, "", "hyperparameters"], [612, 2, 1, "", "is_stationary"], [612, 3, 1, "", "n_dims"], [612, 3, 1, "", "requires_vector_input"], [612, 2, 1, "", "set_params"], [612, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.ExpSineSquared": [[613, 2, 1, "", "__call__"], [613, 3, 1, "", "bounds"], [613, 2, 1, "", "clone_with_theta"], [613, 2, 1, "", "diag"], [613, 2, 1, "", "get_params"], [613, 3, 1, "", "hyperparameter_length_scale"], [613, 3, 1, "", "hyperparameters"], [613, 2, 1, "", "is_stationary"], [613, 3, 1, "", "n_dims"], [613, 3, 1, "", "requires_vector_input"], [613, 2, 1, "", "set_params"], [613, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Exponentiation": [[614, 2, 1, "", "__call__"], [614, 3, 1, "", "bounds"], [614, 2, 1, "", "clone_with_theta"], [614, 2, 1, "", "diag"], [614, 2, 1, "", "get_params"], [614, 3, 1, "", "hyperparameters"], [614, 2, 1, "", "is_stationary"], [614, 3, 1, "", "n_dims"], [614, 3, 1, "", "requires_vector_input"], [614, 2, 1, "", "set_params"], [614, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Hyperparameter": [[615, 2, 1, "", "__call__"], [615, 5, 1, "", "bounds"], [615, 2, 1, "", "count"], [615, 5, 1, "", "fixed"], [615, 2, 1, "", "index"], [615, 5, 1, "", "n_elements"], [615, 5, 1, "", "name"], [615, 5, 1, "", "value_type"]], "sklearn.gaussian_process.kernels.Kernel": [[616, 2, 1, "", "__call__"], [616, 3, 1, "", "bounds"], [616, 2, 1, "", "clone_with_theta"], [616, 2, 1, "", "diag"], [616, 2, 1, "", "get_params"], [616, 3, 1, "", "hyperparameters"], [616, 2, 1, "", "is_stationary"], [616, 3, 1, "", "n_dims"], [616, 3, 1, "", "requires_vector_input"], [616, 2, 1, "", "set_params"], [616, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Matern": [[617, 2, 1, "", "__call__"], [617, 3, 1, "", "bounds"], [617, 2, 1, "", "clone_with_theta"], [617, 2, 1, "", "diag"], [617, 2, 1, "", "get_params"], [617, 3, 1, "", "hyperparameters"], [617, 2, 1, "", "is_stationary"], [617, 3, 1, "", "n_dims"], [617, 3, 1, "", "requires_vector_input"], [617, 2, 1, "", "set_params"], [617, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.PairwiseKernel": [[618, 2, 1, "", "__call__"], [618, 3, 1, "", "bounds"], [618, 2, 1, "", "clone_with_theta"], [618, 2, 1, "", "diag"], [618, 2, 1, "", "get_params"], [618, 3, 1, "", "hyperparameters"], [618, 2, 1, "", "is_stationary"], [618, 3, 1, "", "n_dims"], [618, 3, 1, "", "requires_vector_input"], [618, 2, 1, "", "set_params"], [618, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Product": [[619, 2, 1, "", "__call__"], [619, 3, 1, "", "bounds"], [619, 2, 1, "", "clone_with_theta"], [619, 2, 1, "", "diag"], [619, 2, 1, "", "get_params"], [619, 3, 1, "", "hyperparameters"], [619, 2, 1, "", "is_stationary"], [619, 3, 1, "", "n_dims"], [619, 3, 1, "", "requires_vector_input"], [619, 2, 1, "", "set_params"], [619, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.RBF": [[620, 2, 1, "", "__call__"], [620, 3, 1, "", "bounds"], [620, 2, 1, "", "clone_with_theta"], [620, 2, 1, "", "diag"], [620, 2, 1, "", "get_params"], [620, 3, 1, "", "hyperparameters"], [620, 2, 1, "", "is_stationary"], [620, 3, 1, "", "n_dims"], [620, 3, 1, "", "requires_vector_input"], [620, 2, 1, "", "set_params"], [620, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.RationalQuadratic": [[621, 2, 1, "", "__call__"], [621, 3, 1, "", "bounds"], [621, 2, 1, "", "clone_with_theta"], [621, 2, 1, "", "diag"], [621, 2, 1, "", "get_params"], [621, 3, 1, "", "hyperparameters"], [621, 2, 1, "", "is_stationary"], [621, 3, 1, "", "n_dims"], [621, 3, 1, "", "requires_vector_input"], [621, 2, 1, "", "set_params"], [621, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Sum": [[622, 2, 1, "", "__call__"], [622, 3, 1, "", "bounds"], [622, 2, 1, "", "clone_with_theta"], [622, 2, 1, "", "diag"], [622, 2, 1, "", "get_params"], [622, 3, 1, "", "hyperparameters"], [622, 2, 1, "", "is_stationary"], [622, 3, 1, "", "n_dims"], [622, 3, 1, "", "requires_vector_input"], [622, 2, 1, "", "set_params"], [622, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.WhiteKernel": [[623, 2, 1, "", "__call__"], [623, 3, 1, "", "bounds"], [623, 2, 1, "", "clone_with_theta"], [623, 2, 1, "", "diag"], [623, 2, 1, "", "get_params"], [623, 3, 1, "", "hyperparameters"], [623, 2, 1, "", "is_stationary"], [623, 3, 1, "", "n_dims"], [623, 3, 1, "", "requires_vector_input"], [623, 2, 1, "", "set_params"], [623, 3, 1, "", "theta"]], "sklearn.impute": [[625, 1, 1, "", "IterativeImputer"], [626, 1, 1, "", "KNNImputer"], [627, 1, 1, "", "MissingIndicator"], [628, 1, 1, "", "SimpleImputer"]], "sklearn.impute.IterativeImputer": [[625, 2, 1, "", "fit"], [625, 2, 1, "", "fit_transform"], [625, 2, 1, "", "get_feature_names_out"], [625, 2, 1, "", "get_metadata_routing"], [625, 2, 1, "", "get_params"], [625, 2, 1, "", "set_output"], [625, 2, 1, "", "set_params"], [625, 2, 1, "", "transform"]], "sklearn.impute.KNNImputer": [[626, 2, 1, "", "fit"], [626, 2, 1, "", "fit_transform"], [626, 2, 1, "", "get_feature_names_out"], [626, 2, 1, "", "get_metadata_routing"], [626, 2, 1, "", "get_params"], [626, 2, 1, "", "set_output"], [626, 2, 1, "", "set_params"], [626, 2, 1, "", "transform"]], "sklearn.impute.MissingIndicator": [[627, 2, 1, "", "fit"], [627, 2, 1, "", "fit_transform"], [627, 2, 1, "", "get_feature_names_out"], [627, 2, 1, "", "get_metadata_routing"], [627, 2, 1, "", "get_params"], [627, 2, 1, "", "set_output"], [627, 2, 1, "", "set_params"], [627, 2, 1, "", "transform"]], "sklearn.impute.SimpleImputer": [[628, 2, 1, "", "fit"], [628, 2, 1, "", "fit_transform"], [628, 2, 1, "", "get_feature_names_out"], [628, 2, 1, "", "get_metadata_routing"], [628, 2, 1, "", "get_params"], [628, 2, 1, "", "inverse_transform"], [628, 2, 1, "", "set_output"], [628, 2, 1, "", "set_params"], [628, 2, 1, "", "transform"]], "sklearn.inspection": [[629, 1, 1, "", "DecisionBoundaryDisplay"], [630, 1, 1, "", "PartialDependenceDisplay"], [631, 4, 1, "", "partial_dependence"], [632, 4, 1, "", "permutation_importance"]], "sklearn.inspection.DecisionBoundaryDisplay": [[629, 2, 1, "", "from_estimator"], [629, 2, 1, "", "plot"]], "sklearn.inspection.PartialDependenceDisplay": [[630, 2, 1, "", "from_estimator"], [630, 2, 1, "", "plot"]], "sklearn.isotonic": [[633, 1, 1, "", "IsotonicRegression"], [634, 4, 1, "", "check_increasing"], [635, 4, 1, "", "isotonic_regression"]], "sklearn.isotonic.IsotonicRegression": [[633, 2, 1, "", "fit"], [633, 2, 1, "", "fit_transform"], [633, 2, 1, "", "get_feature_names_out"], [633, 2, 1, "", "get_metadata_routing"], [633, 2, 1, "", "get_params"], [633, 2, 1, "", "predict"], [633, 2, 1, "", "score"], [633, 2, 1, "", "set_fit_request"], [633, 2, 1, "", "set_output"], [633, 2, 1, "", "set_params"], [633, 2, 1, "", "set_predict_request"], [633, 2, 1, "", "set_score_request"], [633, 2, 1, "", "set_transform_request"], [633, 2, 1, "", "transform"]], "sklearn.kernel_approximation": [[636, 1, 1, "", "AdditiveChi2Sampler"], [637, 1, 1, "", "Nystroem"], [638, 1, 1, "", "PolynomialCountSketch"], [639, 1, 1, "", "RBFSampler"], [640, 1, 1, "", "SkewedChi2Sampler"]], "sklearn.kernel_approximation.AdditiveChi2Sampler": [[636, 2, 1, "", "fit"], [636, 2, 1, "", "fit_transform"], [636, 2, 1, "", "get_feature_names_out"], [636, 2, 1, "", "get_metadata_routing"], [636, 2, 1, "", "get_params"], [636, 2, 1, "", "set_output"], [636, 2, 1, "", "set_params"], [636, 2, 1, "", "transform"]], "sklearn.kernel_approximation.Nystroem": [[637, 2, 1, "", "fit"], [637, 2, 1, "", "fit_transform"], [637, 2, 1, "", "get_feature_names_out"], [637, 2, 1, "", "get_metadata_routing"], [637, 2, 1, "", "get_params"], [637, 2, 1, "", "set_output"], [637, 2, 1, "", "set_params"], [637, 2, 1, "", "transform"]], "sklearn.kernel_approximation.PolynomialCountSketch": [[638, 2, 1, "", "fit"], [638, 2, 1, "", "fit_transform"], [638, 2, 1, "", "get_feature_names_out"], [638, 2, 1, "", "get_metadata_routing"], [638, 2, 1, "", "get_params"], [638, 2, 1, "", "set_output"], [638, 2, 1, "", "set_params"], [638, 2, 1, "", "transform"]], "sklearn.kernel_approximation.RBFSampler": [[639, 2, 1, "", "fit"], [639, 2, 1, "", "fit_transform"], [639, 2, 1, "", "get_feature_names_out"], [639, 2, 1, "", "get_metadata_routing"], [639, 2, 1, "", "get_params"], [639, 2, 1, "", "set_output"], [639, 2, 1, "", "set_params"], [639, 2, 1, "", "transform"]], "sklearn.kernel_approximation.SkewedChi2Sampler": [[640, 2, 1, "", "fit"], [640, 2, 1, "", "fit_transform"], [640, 2, 1, "", "get_feature_names_out"], [640, 2, 1, "", "get_metadata_routing"], [640, 2, 1, "", "get_params"], [640, 2, 1, "", "set_output"], [640, 2, 1, "", "set_params"], [640, 2, 1, "", "transform"]], "sklearn.kernel_ridge": [[641, 1, 1, "", "KernelRidge"]], "sklearn.kernel_ridge.KernelRidge": [[641, 2, 1, "", "fit"], [641, 2, 1, "", "get_metadata_routing"], [641, 2, 1, "", "get_params"], [641, 2, 1, "", "predict"], [641, 2, 1, "", "score"], [641, 2, 1, "", "set_fit_request"], [641, 2, 1, "", "set_params"], [641, 2, 1, "", "set_score_request"]], "sklearn.linear_model": [[642, 1, 1, "", "ARDRegression"], [643, 1, 1, "", "BayesianRidge"], [644, 1, 1, "", "ElasticNet"], [645, 1, 1, "", "ElasticNetCV"], [646, 1, 1, "", "GammaRegressor"], [647, 1, 1, "", "HuberRegressor"], [648, 1, 1, "", "Lars"], [649, 1, 1, "", "LarsCV"], [650, 1, 1, "", "Lasso"], [651, 1, 1, "", "LassoCV"], [652, 1, 1, "", "LassoLars"], [653, 1, 1, "", "LassoLarsCV"], [654, 1, 1, "", "LassoLarsIC"], [655, 1, 1, "", "LinearRegression"], [656, 1, 1, "", "LogisticRegression"], [657, 1, 1, "", "LogisticRegressionCV"], [658, 1, 1, "", "MultiTaskElasticNet"], [659, 1, 1, "", "MultiTaskElasticNetCV"], [660, 1, 1, "", "MultiTaskLasso"], [661, 1, 1, "", "MultiTaskLassoCV"], [662, 1, 1, "", "OrthogonalMatchingPursuit"], [663, 1, 1, "", "OrthogonalMatchingPursuitCV"], [664, 1, 1, "", "PassiveAggressiveClassifier"], [665, 1, 1, "", "PassiveAggressiveRegressor"], [666, 1, 1, "", "Perceptron"], [667, 1, 1, "", "PoissonRegressor"], [668, 1, 1, "", "QuantileRegressor"], [669, 1, 1, "", "RANSACRegressor"], [670, 1, 1, "", "Ridge"], [671, 1, 1, "", "RidgeCV"], [672, 1, 1, "", "RidgeClassifier"], [673, 1, 1, "", "RidgeClassifierCV"], [674, 1, 1, "", "SGDClassifier"], [675, 1, 1, "", "SGDOneClassSVM"], [676, 1, 1, "", "SGDRegressor"], [677, 1, 1, "", "TheilSenRegressor"], [678, 1, 1, "", "TweedieRegressor"], [679, 4, 1, "", "enet_path"], [680, 4, 1, "", "lars_path"], [681, 4, 1, "", "lars_path_gram"], [682, 4, 1, "", "lasso_path"], [683, 4, 1, "", "orthogonal_mp"], [684, 4, 1, "", "orthogonal_mp_gram"], [685, 4, 1, "", "ridge_regression"]], "sklearn.linear_model.ARDRegression": [[642, 2, 1, "", "fit"], [642, 2, 1, "", "get_metadata_routing"], [642, 2, 1, "", "get_params"], [642, 2, 1, "", "predict"], [642, 2, 1, "", "score"], [642, 2, 1, "", "set_params"], [642, 2, 1, "", "set_predict_request"], [642, 2, 1, "", "set_score_request"]], "sklearn.linear_model.BayesianRidge": [[643, 2, 1, "", "fit"], [643, 2, 1, "", "get_metadata_routing"], [643, 2, 1, "", "get_params"], [643, 2, 1, "", "predict"], [643, 2, 1, "", "score"], [643, 2, 1, "", "set_fit_request"], [643, 2, 1, "", "set_params"], [643, 2, 1, "", "set_predict_request"], [643, 2, 1, "", "set_score_request"]], "sklearn.linear_model.ElasticNet": [[644, 2, 1, "", "fit"], [644, 2, 1, "", "get_metadata_routing"], [644, 2, 1, "", "get_params"], [644, 2, 1, "", "path"], [644, 2, 1, "", "predict"], [644, 2, 1, "", "score"], [644, 2, 1, "", "set_fit_request"], [644, 2, 1, "", "set_params"], [644, 2, 1, "", "set_score_request"], [644, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.ElasticNetCV": [[645, 2, 1, "", "fit"], [645, 2, 1, "", "get_metadata_routing"], [645, 2, 1, "", "get_params"], [645, 2, 1, "", "path"], [645, 2, 1, "", "predict"], [645, 2, 1, "", "score"], [645, 2, 1, "", "set_fit_request"], [645, 2, 1, "", "set_params"], [645, 2, 1, "", "set_score_request"]], "sklearn.linear_model.GammaRegressor": [[646, 2, 1, "", "fit"], [646, 2, 1, "", "get_metadata_routing"], [646, 2, 1, "", "get_params"], [646, 2, 1, "", "predict"], [646, 2, 1, "", "score"], [646, 2, 1, "", "set_fit_request"], [646, 2, 1, "", "set_params"], [646, 2, 1, "", "set_score_request"]], "sklearn.linear_model.HuberRegressor": [[647, 2, 1, "", "fit"], [647, 2, 1, "", "get_metadata_routing"], [647, 2, 1, "", "get_params"], [647, 2, 1, "", "predict"], [647, 2, 1, "", "score"], [647, 2, 1, "", "set_fit_request"], [647, 2, 1, "", "set_params"], [647, 2, 1, "", "set_score_request"]], "sklearn.linear_model.Lars": [[648, 2, 1, "", "fit"], [648, 2, 1, "", "get_metadata_routing"], [648, 2, 1, "", "get_params"], [648, 2, 1, "", "predict"], [648, 2, 1, "", "score"], [648, 2, 1, "", "set_fit_request"], [648, 2, 1, "", "set_params"], [648, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LarsCV": [[649, 2, 1, "", "fit"], [649, 2, 1, "", "get_metadata_routing"], [649, 2, 1, "", "get_params"], [649, 2, 1, "", "predict"], [649, 2, 1, "", "score"], [649, 2, 1, "", "set_fit_request"], [649, 2, 1, "", "set_params"], [649, 2, 1, "", "set_score_request"]], "sklearn.linear_model.Lasso": [[650, 2, 1, "", "fit"], [650, 2, 1, "", "get_metadata_routing"], [650, 2, 1, "", "get_params"], [650, 2, 1, "", "path"], [650, 2, 1, "", "predict"], [650, 2, 1, "", "score"], [650, 2, 1, "", "set_fit_request"], [650, 2, 1, "", "set_params"], [650, 2, 1, "", "set_score_request"], [650, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.LassoCV": [[651, 2, 1, "", "fit"], [651, 2, 1, "", "get_metadata_routing"], [651, 2, 1, "", "get_params"], [651, 2, 1, "", "path"], [651, 2, 1, "", "predict"], [651, 2, 1, "", "score"], [651, 2, 1, "", "set_fit_request"], [651, 2, 1, "", "set_params"], [651, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LassoLars": [[652, 2, 1, "", "fit"], [652, 2, 1, "", "get_metadata_routing"], [652, 2, 1, "", "get_params"], [652, 2, 1, "", "predict"], [652, 2, 1, "", "score"], [652, 2, 1, "", "set_fit_request"], [652, 2, 1, "", "set_params"], [652, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LassoLarsCV": [[653, 2, 1, "", "fit"], [653, 2, 1, "", "get_metadata_routing"], [653, 2, 1, "", "get_params"], [653, 2, 1, "", "predict"], [653, 2, 1, "", "score"], [653, 2, 1, "", "set_fit_request"], [653, 2, 1, "", "set_params"], [653, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LassoLarsIC": [[654, 2, 1, "", "fit"], [654, 2, 1, "", "get_metadata_routing"], [654, 2, 1, "", "get_params"], [654, 2, 1, "", "predict"], [654, 2, 1, "", "score"], [654, 2, 1, "", "set_fit_request"], [654, 2, 1, "", "set_params"], [654, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LinearRegression": [[655, 2, 1, "", "fit"], [655, 2, 1, "", "get_metadata_routing"], [655, 2, 1, "", "get_params"], [655, 2, 1, "", "predict"], [655, 2, 1, "", "score"], [655, 2, 1, "", "set_fit_request"], [655, 2, 1, "", "set_params"], [655, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LogisticRegression": [[656, 2, 1, "", "decision_function"], [656, 2, 1, "", "densify"], [656, 2, 1, "", "fit"], [656, 2, 1, "", "get_metadata_routing"], [656, 2, 1, "", "get_params"], [656, 2, 1, "", "predict"], [656, 2, 1, "", "predict_log_proba"], [656, 2, 1, "", "predict_proba"], [656, 2, 1, "", "score"], [656, 2, 1, "", "set_fit_request"], [656, 2, 1, "", "set_params"], [656, 2, 1, "", "set_score_request"], [656, 2, 1, "", "sparsify"]], "sklearn.linear_model.LogisticRegressionCV": [[657, 2, 1, "", "decision_function"], [657, 2, 1, "", "densify"], [657, 2, 1, "", "fit"], [657, 2, 1, "", "get_metadata_routing"], [657, 2, 1, "", "get_params"], [657, 2, 1, "", "predict"], [657, 2, 1, "", "predict_log_proba"], [657, 2, 1, "", "predict_proba"], [657, 2, 1, "", "score"], [657, 2, 1, "", "set_fit_request"], [657, 2, 1, "", "set_params"], [657, 2, 1, "", "set_score_request"], [657, 2, 1, "", "sparsify"]], "sklearn.linear_model.MultiTaskElasticNet": [[658, 2, 1, "", "fit"], [658, 2, 1, "", "get_metadata_routing"], [658, 2, 1, "", "get_params"], [658, 2, 1, "", "path"], [658, 2, 1, "", "predict"], [658, 2, 1, "", "score"], [658, 2, 1, "", "set_fit_request"], [658, 2, 1, "", "set_params"], [658, 2, 1, "", "set_score_request"], [658, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.MultiTaskElasticNetCV": [[659, 2, 1, "", "fit"], [659, 2, 1, "", "get_metadata_routing"], [659, 2, 1, "", "get_params"], [659, 2, 1, "", "path"], [659, 2, 1, "", "predict"], [659, 2, 1, "", "score"], [659, 2, 1, "", "set_fit_request"], [659, 2, 1, "", "set_params"], [659, 2, 1, "", "set_score_request"]], "sklearn.linear_model.MultiTaskLasso": [[660, 2, 1, "", "fit"], [660, 2, 1, "", "get_metadata_routing"], [660, 2, 1, "", "get_params"], [660, 2, 1, "", "path"], [660, 2, 1, "", "predict"], [660, 2, 1, "", "score"], [660, 2, 1, "", "set_fit_request"], [660, 2, 1, "", "set_params"], [660, 2, 1, "", "set_score_request"], [660, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.MultiTaskLassoCV": [[661, 2, 1, "", "fit"], [661, 2, 1, "", "get_metadata_routing"], [661, 2, 1, "", "get_params"], [661, 2, 1, "", "path"], [661, 2, 1, "", "predict"], [661, 2, 1, "", "score"], [661, 2, 1, "", "set_fit_request"], [661, 2, 1, "", "set_params"], [661, 2, 1, "", "set_score_request"]], "sklearn.linear_model.OrthogonalMatchingPursuit": [[662, 2, 1, "", "fit"], [662, 2, 1, "", "get_metadata_routing"], [662, 2, 1, "", "get_params"], [662, 2, 1, "", "predict"], [662, 2, 1, "", "score"], [662, 2, 1, "", "set_params"], [662, 2, 1, "", "set_score_request"]], "sklearn.linear_model.OrthogonalMatchingPursuitCV": [[663, 2, 1, "", "fit"], [663, 2, 1, "", "get_metadata_routing"], [663, 2, 1, "", "get_params"], [663, 2, 1, "", "predict"], [663, 2, 1, "", "score"], [663, 2, 1, "", "set_params"], [663, 2, 1, "", "set_score_request"]], "sklearn.linear_model.PassiveAggressiveClassifier": [[664, 2, 1, "", "decision_function"], [664, 2, 1, "", "densify"], [664, 2, 1, "", "fit"], [664, 2, 1, "", "get_metadata_routing"], [664, 2, 1, "", "get_params"], [664, 2, 1, "", "partial_fit"], [664, 2, 1, "", "predict"], [664, 2, 1, "", "score"], [664, 2, 1, "", "set_fit_request"], [664, 2, 1, "", "set_params"], [664, 2, 1, "", "set_partial_fit_request"], [664, 2, 1, "", "set_score_request"], [664, 2, 1, "", "sparsify"]], "sklearn.linear_model.PassiveAggressiveRegressor": [[665, 2, 1, "", "densify"], [665, 2, 1, "", "fit"], [665, 2, 1, "", "get_metadata_routing"], [665, 2, 1, "", "get_params"], [665, 2, 1, "", "partial_fit"], [665, 2, 1, "", "predict"], [665, 2, 1, "", "score"], [665, 2, 1, "", "set_fit_request"], [665, 2, 1, "", "set_params"], [665, 2, 1, "", "set_partial_fit_request"], [665, 2, 1, "", "set_score_request"], [665, 2, 1, "", "sparsify"]], "sklearn.linear_model.Perceptron": [[666, 2, 1, "", "decision_function"], [666, 2, 1, "", "densify"], [666, 2, 1, "", "fit"], [666, 2, 1, "", "get_metadata_routing"], [666, 2, 1, "", "get_params"], [666, 2, 1, "", "partial_fit"], [666, 2, 1, "", "predict"], [666, 2, 1, "", "score"], [666, 2, 1, "", "set_fit_request"], [666, 2, 1, "", "set_params"], [666, 2, 1, "", "set_partial_fit_request"], [666, 2, 1, "", "set_score_request"], [666, 2, 1, "", "sparsify"]], "sklearn.linear_model.PoissonRegressor": [[667, 2, 1, "", "fit"], [667, 2, 1, "", "get_metadata_routing"], [667, 2, 1, "", "get_params"], [667, 2, 1, "", "predict"], [667, 2, 1, "", "score"], [667, 2, 1, "", "set_fit_request"], [667, 2, 1, "", "set_params"], [667, 2, 1, "", "set_score_request"]], "sklearn.linear_model.QuantileRegressor": [[668, 2, 1, "", "fit"], [668, 2, 1, "", "get_metadata_routing"], [668, 2, 1, "", "get_params"], [668, 2, 1, "", "predict"], [668, 2, 1, "", "score"], [668, 2, 1, "", "set_fit_request"], [668, 2, 1, "", "set_params"], [668, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RANSACRegressor": [[669, 2, 1, "", "fit"], [669, 2, 1, "", "get_metadata_routing"], [669, 2, 1, "", "get_params"], [669, 2, 1, "", "predict"], [669, 2, 1, "", "score"], [669, 2, 1, "", "set_fit_request"], [669, 2, 1, "", "set_params"]], "sklearn.linear_model.Ridge": [[670, 2, 1, "", "fit"], [670, 2, 1, "", "get_metadata_routing"], [670, 2, 1, "", "get_params"], [670, 2, 1, "", "predict"], [670, 2, 1, "", "score"], [670, 2, 1, "", "set_fit_request"], [670, 2, 1, "", "set_params"], [670, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RidgeCV": [[671, 2, 1, "", "fit"], [671, 2, 1, "", "get_metadata_routing"], [671, 2, 1, "", "get_params"], [671, 2, 1, "", "predict"], [671, 2, 1, "", "score"], [671, 2, 1, "", "set_fit_request"], [671, 2, 1, "", "set_params"], [671, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RidgeClassifier": [[672, 3, 1, "", "classes_"], [672, 2, 1, "", "decision_function"], [672, 2, 1, "", "fit"], [672, 2, 1, "", "get_metadata_routing"], [672, 2, 1, "", "get_params"], [672, 2, 1, "", "predict"], [672, 2, 1, "", "score"], [672, 2, 1, "", "set_fit_request"], [672, 2, 1, "", "set_params"], [672, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RidgeClassifierCV": [[673, 3, 1, "", "classes_"], [673, 2, 1, "", "decision_function"], [673, 2, 1, "", "fit"], [673, 2, 1, "", "get_metadata_routing"], [673, 2, 1, "", "get_params"], [673, 2, 1, "", "predict"], [673, 2, 1, "", "score"], [673, 2, 1, "", "set_fit_request"], [673, 2, 1, "", "set_params"], [673, 2, 1, "", "set_score_request"]], "sklearn.linear_model.SGDClassifier": [[674, 2, 1, "", "decision_function"], [674, 2, 1, "", "densify"], [674, 2, 1, "", "fit"], [674, 2, 1, "", "get_metadata_routing"], [674, 2, 1, "", "get_params"], [674, 2, 1, "", "partial_fit"], [674, 2, 1, "", "predict"], [674, 2, 1, "", "predict_log_proba"], [674, 2, 1, "", "predict_proba"], [674, 2, 1, "", "score"], [674, 2, 1, "", "set_fit_request"], [674, 2, 1, "", "set_params"], [674, 2, 1, "", "set_partial_fit_request"], [674, 2, 1, "", "set_score_request"], [674, 2, 1, "", "sparsify"]], "sklearn.linear_model.SGDOneClassSVM": [[675, 2, 1, "", "decision_function"], [675, 2, 1, "", "densify"], [675, 2, 1, "", "fit"], [675, 2, 1, "", "fit_predict"], [675, 2, 1, "", "get_metadata_routing"], [675, 2, 1, "", "get_params"], [675, 2, 1, "", "partial_fit"], [675, 2, 1, "", "predict"], [675, 2, 1, "", "score_samples"], [675, 2, 1, "", "set_fit_request"], [675, 2, 1, "", "set_params"], [675, 2, 1, "", "set_partial_fit_request"], [675, 2, 1, "", "sparsify"]], "sklearn.linear_model.SGDRegressor": [[676, 2, 1, "", "densify"], [676, 2, 1, "", "fit"], [676, 2, 1, "", "get_metadata_routing"], [676, 2, 1, "", "get_params"], [676, 2, 1, "", "partial_fit"], [676, 2, 1, "", "predict"], [676, 2, 1, "", "score"], [676, 2, 1, "", "set_fit_request"], [676, 2, 1, "", "set_params"], [676, 2, 1, "", "set_partial_fit_request"], [676, 2, 1, "", "set_score_request"], [676, 2, 1, "", "sparsify"]], "sklearn.linear_model.TheilSenRegressor": [[677, 2, 1, "", "fit"], [677, 2, 1, "", "get_metadata_routing"], [677, 2, 1, "", "get_params"], [677, 2, 1, "", "predict"], [677, 2, 1, "", "score"], [677, 2, 1, "", "set_params"], [677, 2, 1, "", "set_score_request"]], "sklearn.linear_model.TweedieRegressor": [[678, 2, 1, "", "fit"], [678, 2, 1, "", "get_metadata_routing"], [678, 2, 1, "", "get_params"], [678, 2, 1, "", "predict"], [678, 2, 1, "", "score"], [678, 2, 1, "", "set_fit_request"], [678, 2, 1, "", "set_params"], [678, 2, 1, "", "set_score_request"]], "sklearn.manifold": [[686, 1, 1, "", "Isomap"], [687, 1, 1, "", "LocallyLinearEmbedding"], [688, 1, 1, "", "MDS"], [689, 1, 1, "", "SpectralEmbedding"], [690, 1, 1, "", "TSNE"], [691, 4, 1, "", "locally_linear_embedding"], [692, 4, 1, "", "smacof"], [693, 4, 1, "", "spectral_embedding"], [694, 4, 1, "", "trustworthiness"]], "sklearn.manifold.Isomap": [[686, 2, 1, "", "fit"], [686, 2, 1, "", "fit_transform"], [686, 2, 1, "", "get_feature_names_out"], [686, 2, 1, "", "get_metadata_routing"], [686, 2, 1, "", "get_params"], [686, 2, 1, "", "reconstruction_error"], [686, 2, 1, "", "set_output"], [686, 2, 1, "", "set_params"], [686, 2, 1, "", "transform"]], "sklearn.manifold.LocallyLinearEmbedding": [[687, 2, 1, "", "fit"], [687, 2, 1, "", "fit_transform"], [687, 2, 1, "", "get_feature_names_out"], [687, 2, 1, "", "get_metadata_routing"], [687, 2, 1, "", "get_params"], [687, 2, 1, "", "set_output"], [687, 2, 1, "", "set_params"], [687, 2, 1, "", "transform"]], "sklearn.manifold.MDS": [[688, 2, 1, "", "fit"], [688, 2, 1, "", "fit_transform"], [688, 2, 1, "", "get_metadata_routing"], [688, 2, 1, "", "get_params"], [688, 2, 1, "", "set_fit_request"], [688, 2, 1, "", "set_params"]], "sklearn.manifold.SpectralEmbedding": [[689, 2, 1, "", "fit"], [689, 2, 1, "", "fit_transform"], [689, 2, 1, "", "get_metadata_routing"], [689, 2, 1, "", "get_params"], [689, 2, 1, "", "set_params"]], "sklearn.manifold.TSNE": [[690, 2, 1, "", "fit"], [690, 2, 1, "", "fit_transform"], [690, 2, 1, "", "get_feature_names_out"], [690, 2, 1, "", "get_metadata_routing"], [690, 2, 1, "", "get_params"], [690, 2, 1, "", "set_output"], [690, 2, 1, "", "set_params"]], "sklearn.metrics": [[695, 1, 1, "", "ConfusionMatrixDisplay"], [696, 1, 1, "", "DetCurveDisplay"], [697, 1, 1, "", "DistanceMetric"], [698, 1, 1, "", "PrecisionRecallDisplay"], [699, 1, 1, "", "PredictionErrorDisplay"], [700, 1, 1, "", "RocCurveDisplay"], [701, 4, 1, "", "accuracy_score"], [702, 4, 1, "", "adjusted_mutual_info_score"], [703, 4, 1, "", "adjusted_rand_score"], [704, 4, 1, "", "auc"], [705, 4, 1, "", "average_precision_score"], [706, 4, 1, "", "balanced_accuracy_score"], [707, 4, 1, "", "brier_score_loss"], [708, 4, 1, "", "calinski_harabasz_score"], [709, 4, 1, "", "check_scoring"], [710, 4, 1, "", "class_likelihood_ratios"], [711, 4, 1, "", "classification_report"], [406, 0, 0, "-", "cluster"], [714, 4, 1, "", "cohen_kappa_score"], [715, 4, 1, "", "completeness_score"], [716, 4, 1, "", "confusion_matrix"], [717, 4, 1, "", "consensus_score"], [718, 4, 1, "", "coverage_error"], [719, 4, 1, "", "d2_absolute_error_score"], [720, 4, 1, "", "d2_pinball_score"], [721, 4, 1, "", "d2_tweedie_score"], [722, 4, 1, "", "davies_bouldin_score"], [723, 4, 1, "", "dcg_score"], [724, 4, 1, "", "det_curve"], [725, 4, 1, "", "explained_variance_score"], [726, 4, 1, "", "f1_score"], [727, 4, 1, "", "fbeta_score"], [728, 4, 1, "", "fowlkes_mallows_score"], [729, 4, 1, "", "get_scorer"], [730, 4, 1, "", "get_scorer_names"], [731, 4, 1, "", "hamming_loss"], [732, 4, 1, "", "hinge_loss"], [733, 4, 1, "", "homogeneity_completeness_v_measure"], [734, 4, 1, "", "homogeneity_score"], [735, 4, 1, "", "jaccard_score"], [736, 4, 1, "", "label_ranking_average_precision_score"], [737, 4, 1, "", "label_ranking_loss"], [738, 4, 1, "", "log_loss"], [739, 4, 1, "", "make_scorer"], [740, 4, 1, "", "matthews_corrcoef"], [741, 4, 1, "", "max_error"], [742, 4, 1, "", "mean_absolute_error"], [743, 4, 1, "", "mean_absolute_percentage_error"], [744, 4, 1, "", "mean_gamma_deviance"], [745, 4, 1, "", "mean_pinball_loss"], [746, 4, 1, "", "mean_poisson_deviance"], [747, 4, 1, "", "mean_squared_error"], [748, 4, 1, "", "mean_squared_log_error"], [749, 4, 1, "", "mean_tweedie_deviance"], [750, 4, 1, "", "median_absolute_error"], [751, 4, 1, "", "multilabel_confusion_matrix"], [752, 4, 1, "", "mutual_info_score"], [753, 4, 1, "", "ndcg_score"], [754, 4, 1, "", "normalized_mutual_info_score"], [406, 0, 0, "-", "pairwise"], [775, 4, 1, "", "pairwise_distances"], [776, 4, 1, "", "pairwise_distances_argmin"], [777, 4, 1, "", "pairwise_distances_argmin_min"], [778, 4, 1, "", "pairwise_distances_chunked"], [779, 4, 1, "", "precision_recall_curve"], [780, 4, 1, "", "precision_recall_fscore_support"], [781, 4, 1, "", "precision_score"], [782, 4, 1, "", "r2_score"], [783, 4, 1, "", "rand_score"], [784, 4, 1, "", "recall_score"], [785, 4, 1, "", "roc_auc_score"], [786, 4, 1, "", "roc_curve"], [787, 4, 1, "", "root_mean_squared_error"], [788, 4, 1, "", "root_mean_squared_log_error"], [789, 4, 1, "", "silhouette_samples"], [790, 4, 1, "", "silhouette_score"], [791, 4, 1, "", "top_k_accuracy_score"], [792, 4, 1, "", "v_measure_score"], [793, 4, 1, "", "zero_one_loss"]], "sklearn.metrics.ConfusionMatrixDisplay": [[695, 2, 1, "", "from_estimator"], [695, 2, 1, "", "from_predictions"], [695, 2, 1, "", "plot"]], "sklearn.metrics.DetCurveDisplay": [[696, 2, 1, "", "from_estimator"], [696, 2, 1, "", "from_predictions"], [696, 2, 1, "", "plot"]], "sklearn.metrics.DistanceMetric": [[697, 2, 1, "", "get_metric"]], "sklearn.metrics.PrecisionRecallDisplay": [[698, 2, 1, "", "from_estimator"], [698, 2, 1, "", "from_predictions"], [698, 2, 1, "", "plot"]], "sklearn.metrics.PredictionErrorDisplay": [[699, 2, 1, "", "from_estimator"], [699, 2, 1, "", "from_predictions"], [699, 2, 1, "", "plot"]], "sklearn.metrics.RocCurveDisplay": [[700, 2, 1, "", "from_estimator"], [700, 2, 1, "", "from_predictions"], [700, 2, 1, "", "plot"]], "sklearn.metrics.cluster": [[712, 4, 1, "", "contingency_matrix"], [713, 4, 1, "", "pair_confusion_matrix"]], "sklearn.metrics.pairwise": [[755, 4, 1, "", "additive_chi2_kernel"], [756, 4, 1, "", "chi2_kernel"], [757, 4, 1, "", "cosine_distances"], [758, 4, 1, "", "cosine_similarity"], [759, 4, 1, "", "distance_metrics"], [760, 4, 1, "", "euclidean_distances"], [761, 4, 1, "", "haversine_distances"], [762, 4, 1, "", "kernel_metrics"], [763, 4, 1, "", "laplacian_kernel"], [764, 4, 1, "", "linear_kernel"], [765, 4, 1, "", "manhattan_distances"], [766, 4, 1, "", "nan_euclidean_distances"], [767, 4, 1, "", "paired_cosine_distances"], [768, 4, 1, "", "paired_distances"], [769, 4, 1, "", "paired_euclidean_distances"], [770, 4, 1, "", "paired_manhattan_distances"], [771, 4, 1, "", "pairwise_kernels"], [772, 4, 1, "", "polynomial_kernel"], [773, 4, 1, "", "rbf_kernel"], [774, 4, 1, "", "sigmoid_kernel"]], "sklearn.mixture": [[794, 1, 1, "", "BayesianGaussianMixture"], [795, 1, 1, "", "GaussianMixture"]], "sklearn.mixture.BayesianGaussianMixture": [[794, 2, 1, "", "fit"], [794, 2, 1, "", "fit_predict"], [794, 2, 1, "", "get_metadata_routing"], [794, 2, 1, "", "get_params"], [794, 2, 1, "", "predict"], [794, 2, 1, "", "predict_proba"], [794, 2, 1, "", "sample"], [794, 2, 1, "", "score"], [794, 2, 1, "", "score_samples"], [794, 2, 1, "", "set_params"]], "sklearn.mixture.GaussianMixture": [[795, 2, 1, "", "aic"], [795, 2, 1, "", "bic"], [795, 2, 1, "", "fit"], [795, 2, 1, "", "fit_predict"], [795, 2, 1, "", "get_metadata_routing"], [795, 2, 1, "", "get_params"], [795, 2, 1, "", "predict"], [795, 2, 1, "", "predict_proba"], [795, 2, 1, "", "sample"], [795, 2, 1, "", "score"], [795, 2, 1, "", "score_samples"], [795, 2, 1, "", "set_params"]], "sklearn.model_selection": [[796, 1, 1, "", "GridSearchCV"], [797, 1, 1, "", "GroupKFold"], [798, 1, 1, "", "GroupShuffleSplit"], [799, 1, 1, "", "HalvingGridSearchCV"], [800, 1, 1, "", "HalvingRandomSearchCV"], [801, 1, 1, "", "KFold"], [802, 1, 1, "", "LearningCurveDisplay"], [803, 1, 1, "", "LeaveOneGroupOut"], [804, 1, 1, "", "LeaveOneOut"], [805, 1, 1, "", "LeavePGroupsOut"], [806, 1, 1, "", "LeavePOut"], [807, 1, 1, "", "ParameterGrid"], [808, 1, 1, "", "ParameterSampler"], [809, 1, 1, "", "PredefinedSplit"], [810, 1, 1, "", "RandomizedSearchCV"], [811, 1, 1, "", "RepeatedKFold"], [812, 1, 1, "", "RepeatedStratifiedKFold"], [813, 1, 1, "", "ShuffleSplit"], [814, 1, 1, "", "StratifiedGroupKFold"], [815, 1, 1, "", "StratifiedKFold"], [816, 1, 1, "", "StratifiedShuffleSplit"], [817, 1, 1, "", "TimeSeriesSplit"], [818, 1, 1, "", "ValidationCurveDisplay"], [819, 4, 1, "", "check_cv"], [820, 4, 1, "", "cross_val_predict"], [821, 4, 1, "", "cross_val_score"], [822, 4, 1, "", "cross_validate"], [823, 4, 1, "", "learning_curve"], [824, 4, 1, "", "permutation_test_score"], [825, 4, 1, "", "train_test_split"], [826, 4, 1, "", "validation_curve"]], "sklearn.model_selection.GridSearchCV": [[796, 3, 1, "", "classes_"], [796, 2, 1, "", "decision_function"], [796, 2, 1, "", "fit"], [796, 2, 1, "", "get_metadata_routing"], [796, 2, 1, "", "get_params"], [796, 2, 1, "", "inverse_transform"], [796, 3, 1, "", "n_features_in_"], [796, 2, 1, "", "predict"], [796, 2, 1, "", "predict_log_proba"], [796, 2, 1, "", "predict_proba"], [796, 2, 1, "", "score"], [796, 2, 1, "", "score_samples"], [796, 2, 1, "", "set_params"], [796, 2, 1, "", "transform"]], "sklearn.model_selection.GroupKFold": [[797, 2, 1, "", "get_metadata_routing"], [797, 2, 1, "", "get_n_splits"], [797, 2, 1, "", "set_split_request"], [797, 2, 1, "", "split"]], "sklearn.model_selection.GroupShuffleSplit": [[798, 2, 1, "", "get_metadata_routing"], [798, 2, 1, "", "get_n_splits"], [798, 2, 1, "", "set_split_request"], [798, 2, 1, "", "split"]], "sklearn.model_selection.HalvingGridSearchCV": [[799, 3, 1, "", "classes_"], [799, 2, 1, "", "decision_function"], [799, 2, 1, "", "fit"], [799, 2, 1, "", "get_metadata_routing"], [799, 2, 1, "", "get_params"], [799, 2, 1, "", "inverse_transform"], [799, 3, 1, "", "n_features_in_"], [799, 2, 1, "", "predict"], [799, 2, 1, "", "predict_log_proba"], [799, 2, 1, "", "predict_proba"], [799, 2, 1, "", "score"], [799, 2, 1, "", "score_samples"], [799, 2, 1, "", "set_params"], [799, 2, 1, "", "transform"]], "sklearn.model_selection.HalvingRandomSearchCV": [[800, 3, 1, "", "classes_"], [800, 2, 1, "", "decision_function"], [800, 2, 1, "", "fit"], [800, 2, 1, "", "get_metadata_routing"], [800, 2, 1, "", "get_params"], [800, 2, 1, "", "inverse_transform"], [800, 3, 1, "", "n_features_in_"], [800, 2, 1, "", "predict"], [800, 2, 1, "", "predict_log_proba"], [800, 2, 1, "", "predict_proba"], [800, 2, 1, "", "score"], [800, 2, 1, "", "score_samples"], [800, 2, 1, "", "set_params"], [800, 2, 1, "", "transform"]], "sklearn.model_selection.KFold": [[801, 2, 1, "", "get_metadata_routing"], [801, 2, 1, "", "get_n_splits"], [801, 2, 1, "", "split"]], "sklearn.model_selection.LearningCurveDisplay": [[802, 2, 1, "", "from_estimator"], [802, 2, 1, "", "plot"]], "sklearn.model_selection.LeaveOneGroupOut": [[803, 2, 1, "", "get_metadata_routing"], [803, 2, 1, "", "get_n_splits"], [803, 2, 1, "", "set_split_request"], [803, 2, 1, "", "split"]], "sklearn.model_selection.LeaveOneOut": [[804, 2, 1, "", "get_metadata_routing"], [804, 2, 1, "", "get_n_splits"], [804, 2, 1, "", "split"]], "sklearn.model_selection.LeavePGroupsOut": [[805, 2, 1, "", "get_metadata_routing"], [805, 2, 1, "", "get_n_splits"], [805, 2, 1, "", "set_split_request"], [805, 2, 1, "", "split"]], "sklearn.model_selection.LeavePOut": [[806, 2, 1, "", "get_metadata_routing"], [806, 2, 1, "", "get_n_splits"], [806, 2, 1, "", "split"]], "sklearn.model_selection.PredefinedSplit": [[809, 2, 1, "", "get_metadata_routing"], [809, 2, 1, "", "get_n_splits"], [809, 2, 1, "", "split"]], "sklearn.model_selection.RandomizedSearchCV": [[810, 3, 1, "", "classes_"], [810, 2, 1, "", "decision_function"], [810, 2, 1, "", "fit"], [810, 2, 1, "", "get_metadata_routing"], [810, 2, 1, "", "get_params"], [810, 2, 1, "", "inverse_transform"], [810, 3, 1, "", "n_features_in_"], [810, 2, 1, "", "predict"], [810, 2, 1, "", "predict_log_proba"], [810, 2, 1, "", "predict_proba"], [810, 2, 1, "", "score"], [810, 2, 1, "", "score_samples"], [810, 2, 1, "", "set_params"], [810, 2, 1, "", "transform"]], "sklearn.model_selection.RepeatedKFold": [[811, 2, 1, "", "get_metadata_routing"], [811, 2, 1, "", "get_n_splits"], [811, 2, 1, "", "split"]], "sklearn.model_selection.RepeatedStratifiedKFold": [[812, 2, 1, "", "get_metadata_routing"], [812, 2, 1, "", "get_n_splits"], [812, 2, 1, "", "split"]], "sklearn.model_selection.ShuffleSplit": [[813, 2, 1, "", "get_metadata_routing"], [813, 2, 1, "", "get_n_splits"], [813, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedGroupKFold": [[814, 2, 1, "", "get_metadata_routing"], [814, 2, 1, "", "get_n_splits"], [814, 2, 1, "", "set_split_request"], [814, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedKFold": [[815, 2, 1, "", "get_metadata_routing"], [815, 2, 1, "", "get_n_splits"], [815, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedShuffleSplit": [[816, 2, 1, "", "get_metadata_routing"], [816, 2, 1, "", "get_n_splits"], [816, 2, 1, "", "split"]], "sklearn.model_selection.TimeSeriesSplit": [[817, 2, 1, "", "get_metadata_routing"], [817, 2, 1, "", "get_n_splits"], [817, 2, 1, "", "split"]], "sklearn.model_selection.ValidationCurveDisplay": [[818, 2, 1, "", "from_estimator"], [818, 2, 1, "", "plot"]], "sklearn.multiclass": [[827, 1, 1, "", "OneVsOneClassifier"], [828, 1, 1, "", "OneVsRestClassifier"], [829, 1, 1, "", "OutputCodeClassifier"]], "sklearn.multiclass.OneVsOneClassifier": [[827, 2, 1, "", "decision_function"], [827, 2, 1, "", "fit"], [827, 2, 1, "", "get_metadata_routing"], [827, 2, 1, "", "get_params"], [827, 3, 1, "", "n_classes_"], [827, 2, 1, "", "partial_fit"], [827, 2, 1, "", "predict"], [827, 2, 1, "", "score"], [827, 2, 1, "", "set_params"], [827, 2, 1, "", "set_partial_fit_request"], [827, 2, 1, "", "set_score_request"]], "sklearn.multiclass.OneVsRestClassifier": [[828, 2, 1, "", "decision_function"], [828, 2, 1, "", "fit"], [828, 2, 1, "", "get_metadata_routing"], [828, 2, 1, "", "get_params"], [828, 3, 1, "", "multilabel_"], [828, 3, 1, "", "n_classes_"], [828, 2, 1, "", "partial_fit"], [828, 2, 1, "", "predict"], [828, 2, 1, "", "predict_proba"], [828, 2, 1, "", "score"], [828, 2, 1, "", "set_params"], [828, 2, 1, "", "set_partial_fit_request"], [828, 2, 1, "", "set_score_request"]], "sklearn.multiclass.OutputCodeClassifier": [[829, 2, 1, "", "fit"], [829, 2, 1, "", "get_metadata_routing"], [829, 2, 1, "", "get_params"], [829, 2, 1, "", "predict"], [829, 2, 1, "", "score"], [829, 2, 1, "", "set_params"], [829, 2, 1, "", "set_score_request"]], "sklearn.multioutput": [[830, 1, 1, "", "ClassifierChain"], [831, 1, 1, "", "MultiOutputClassifier"], [832, 1, 1, "", "MultiOutputRegressor"], [833, 1, 1, "", "RegressorChain"]], "sklearn.multioutput.ClassifierChain": [[830, 2, 1, "", "decision_function"], [830, 2, 1, "", "fit"], [830, 2, 1, "", "get_metadata_routing"], [830, 2, 1, "", "get_params"], [830, 2, 1, "", "predict"], [830, 2, 1, "", "predict_log_proba"], [830, 2, 1, "", "predict_proba"], [830, 2, 1, "", "score"], [830, 2, 1, "", "set_params"], [830, 2, 1, "", "set_score_request"]], "sklearn.multioutput.MultiOutputClassifier": [[831, 2, 1, "", "fit"], [831, 2, 1, "", "get_metadata_routing"], [831, 2, 1, "", "get_params"], [831, 2, 1, "", "partial_fit"], [831, 2, 1, "", "predict"], [831, 2, 1, "", "predict_proba"], [831, 2, 1, "", "score"], [831, 2, 1, "", "set_fit_request"], [831, 2, 1, "", "set_params"], [831, 2, 1, "", "set_partial_fit_request"]], "sklearn.multioutput.MultiOutputRegressor": [[832, 2, 1, "", "fit"], [832, 2, 1, "", "get_metadata_routing"], [832, 2, 1, "", "get_params"], [832, 2, 1, "", "partial_fit"], [832, 2, 1, "", "predict"], [832, 2, 1, "", "score"], [832, 2, 1, "", "set_fit_request"], [832, 2, 1, "", "set_params"], [832, 2, 1, "", "set_partial_fit_request"], [832, 2, 1, "", "set_score_request"]], "sklearn.multioutput.RegressorChain": [[833, 2, 1, "", "fit"], [833, 2, 1, "", "get_metadata_routing"], [833, 2, 1, "", "get_params"], [833, 2, 1, "", "predict"], [833, 2, 1, "", "score"], [833, 2, 1, "", "set_params"], [833, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes": [[834, 1, 1, "", "BernoulliNB"], [835, 1, 1, "", "CategoricalNB"], [836, 1, 1, "", "ComplementNB"], [837, 1, 1, "", "GaussianNB"], [838, 1, 1, "", "MultinomialNB"]], "sklearn.naive_bayes.BernoulliNB": [[834, 2, 1, "", "fit"], [834, 2, 1, "", "get_metadata_routing"], [834, 2, 1, "", "get_params"], [834, 2, 1, "", "partial_fit"], [834, 2, 1, "", "predict"], [834, 2, 1, "", "predict_joint_log_proba"], [834, 2, 1, "", "predict_log_proba"], [834, 2, 1, "", "predict_proba"], [834, 2, 1, "", "score"], [834, 2, 1, "", "set_fit_request"], [834, 2, 1, "", "set_params"], [834, 2, 1, "", "set_partial_fit_request"], [834, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.CategoricalNB": [[835, 2, 1, "", "fit"], [835, 2, 1, "", "get_metadata_routing"], [835, 2, 1, "", "get_params"], [835, 2, 1, "", "partial_fit"], [835, 2, 1, "", "predict"], [835, 2, 1, "", "predict_joint_log_proba"], [835, 2, 1, "", "predict_log_proba"], [835, 2, 1, "", "predict_proba"], [835, 2, 1, "", "score"], [835, 2, 1, "", "set_fit_request"], [835, 2, 1, "", "set_params"], [835, 2, 1, "", "set_partial_fit_request"], [835, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.ComplementNB": [[836, 2, 1, "", "fit"], [836, 2, 1, "", "get_metadata_routing"], [836, 2, 1, "", "get_params"], [836, 2, 1, "", "partial_fit"], [836, 2, 1, "", "predict"], [836, 2, 1, "", "predict_joint_log_proba"], [836, 2, 1, "", "predict_log_proba"], [836, 2, 1, "", "predict_proba"], [836, 2, 1, "", "score"], [836, 2, 1, "", "set_fit_request"], [836, 2, 1, "", "set_params"], [836, 2, 1, "", "set_partial_fit_request"], [836, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.GaussianNB": [[837, 2, 1, "", "fit"], [837, 2, 1, "", "get_metadata_routing"], [837, 2, 1, "", "get_params"], [837, 2, 1, "", "partial_fit"], [837, 2, 1, "", "predict"], [837, 2, 1, "", "predict_joint_log_proba"], [837, 2, 1, "", "predict_log_proba"], [837, 2, 1, "", "predict_proba"], [837, 2, 1, "", "score"], [837, 2, 1, "", "set_fit_request"], [837, 2, 1, "", "set_params"], [837, 2, 1, "", "set_partial_fit_request"], [837, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.MultinomialNB": [[838, 2, 1, "", "fit"], [838, 2, 1, "", "get_metadata_routing"], [838, 2, 1, "", "get_params"], [838, 2, 1, "", "partial_fit"], [838, 2, 1, "", "predict"], [838, 2, 1, "", "predict_joint_log_proba"], [838, 2, 1, "", "predict_log_proba"], [838, 2, 1, "", "predict_proba"], [838, 2, 1, "", "score"], [838, 2, 1, "", "set_fit_request"], [838, 2, 1, "", "set_params"], [838, 2, 1, "", "set_partial_fit_request"], [838, 2, 1, "", "set_score_request"]], "sklearn.neighbors": [[839, 1, 1, "", "BallTree"], [840, 1, 1, "", "KDTree"], [841, 1, 1, "", "KNeighborsClassifier"], [842, 1, 1, "", "KNeighborsRegressor"], [843, 1, 1, "", "KNeighborsTransformer"], [844, 1, 1, "", "KernelDensity"], [845, 1, 1, "", "LocalOutlierFactor"], [846, 1, 1, "", "NearestCentroid"], [847, 1, 1, "", "NearestNeighbors"], [848, 1, 1, "", "NeighborhoodComponentsAnalysis"], [849, 1, 1, "", "RadiusNeighborsClassifier"], [850, 1, 1, "", "RadiusNeighborsRegressor"], [851, 1, 1, "", "RadiusNeighborsTransformer"], [852, 4, 1, "", "kneighbors_graph"], [853, 4, 1, "", "radius_neighbors_graph"], [854, 4, 1, "", "sort_graph_by_row_values"]], "sklearn.neighbors.BallTree": [[839, 2, 1, "", "get_arrays"], [839, 2, 1, "", "get_n_calls"], [839, 2, 1, "", "get_tree_stats"], [839, 2, 1, "", "kernel_density"], [839, 2, 1, "", "query"], [839, 2, 1, "", "query_radius"], [839, 2, 1, "", "reset_n_calls"], [839, 2, 1, "", "two_point_correlation"]], "sklearn.neighbors.KDTree": [[840, 2, 1, "", "get_arrays"], [840, 2, 1, "", "get_n_calls"], [840, 2, 1, "", "get_tree_stats"], [840, 2, 1, "", "kernel_density"], [840, 2, 1, "", "query"], [840, 2, 1, "", "query_radius"], [840, 2, 1, "", "reset_n_calls"], [840, 2, 1, "", "two_point_correlation"]], "sklearn.neighbors.KNeighborsClassifier": [[841, 2, 1, "", "fit"], [841, 2, 1, "", "get_metadata_routing"], [841, 2, 1, "", "get_params"], [841, 2, 1, "", "kneighbors"], [841, 2, 1, "", "kneighbors_graph"], [841, 2, 1, "", "predict"], [841, 2, 1, "", "predict_proba"], [841, 2, 1, "", "score"], [841, 2, 1, "", "set_params"], [841, 2, 1, "", "set_score_request"]], "sklearn.neighbors.KNeighborsRegressor": [[842, 2, 1, "", "fit"], [842, 2, 1, "", "get_metadata_routing"], [842, 2, 1, "", "get_params"], [842, 2, 1, "", "kneighbors"], [842, 2, 1, "", "kneighbors_graph"], [842, 2, 1, "", "predict"], [842, 2, 1, "", "score"], [842, 2, 1, "", "set_params"], [842, 2, 1, "", "set_score_request"]], "sklearn.neighbors.KNeighborsTransformer": [[843, 2, 1, "", "fit"], [843, 2, 1, "", "fit_transform"], [843, 2, 1, "", "get_feature_names_out"], [843, 2, 1, "", "get_metadata_routing"], [843, 2, 1, "", "get_params"], [843, 2, 1, "", "kneighbors"], [843, 2, 1, "", "kneighbors_graph"], [843, 2, 1, "", "set_output"], [843, 2, 1, "", "set_params"], [843, 2, 1, "", "transform"]], "sklearn.neighbors.KernelDensity": [[844, 2, 1, "", "fit"], [844, 2, 1, "", "get_metadata_routing"], [844, 2, 1, "", "get_params"], [844, 2, 1, "", "sample"], [844, 2, 1, "", "score"], [844, 2, 1, "", "score_samples"], [844, 2, 1, "", "set_fit_request"], [844, 2, 1, "", "set_params"]], "sklearn.neighbors.LocalOutlierFactor": [[845, 2, 1, "", "decision_function"], [845, 2, 1, "", "fit"], [845, 2, 1, "", "fit_predict"], [845, 2, 1, "", "get_metadata_routing"], [845, 2, 1, "", "get_params"], [845, 2, 1, "", "kneighbors"], [845, 2, 1, "", "kneighbors_graph"], [845, 2, 1, "", "predict"], [845, 2, 1, "", "score_samples"], [845, 2, 1, "", "set_params"]], "sklearn.neighbors.NearestCentroid": [[846, 2, 1, "", "fit"], [846, 2, 1, "", "get_metadata_routing"], [846, 2, 1, "", "get_params"], [846, 2, 1, "", "predict"], [846, 2, 1, "", "score"], [846, 2, 1, "", "set_params"], [846, 2, 1, "", "set_score_request"]], "sklearn.neighbors.NearestNeighbors": [[847, 2, 1, "", "fit"], [847, 2, 1, "", "get_metadata_routing"], [847, 2, 1, "", "get_params"], [847, 2, 1, "", "kneighbors"], [847, 2, 1, "", "kneighbors_graph"], [847, 2, 1, "", "radius_neighbors"], [847, 2, 1, "", "radius_neighbors_graph"], [847, 2, 1, "", "set_params"]], "sklearn.neighbors.NeighborhoodComponentsAnalysis": [[848, 2, 1, "", "fit"], [848, 2, 1, "", "fit_transform"], [848, 2, 1, "", "get_feature_names_out"], [848, 2, 1, "", "get_metadata_routing"], [848, 2, 1, "", "get_params"], [848, 2, 1, "", "set_output"], [848, 2, 1, "", "set_params"], [848, 2, 1, "", "transform"]], "sklearn.neighbors.RadiusNeighborsClassifier": [[849, 2, 1, "", "fit"], [849, 2, 1, "", "get_metadata_routing"], [849, 2, 1, "", "get_params"], [849, 2, 1, "", "predict"], [849, 2, 1, "", "predict_proba"], [849, 2, 1, "", "radius_neighbors"], [849, 2, 1, "", "radius_neighbors_graph"], [849, 2, 1, "", "score"], [849, 2, 1, "", "set_params"], [849, 2, 1, "", "set_score_request"]], "sklearn.neighbors.RadiusNeighborsRegressor": [[850, 2, 1, "", "fit"], [850, 2, 1, "", "get_metadata_routing"], [850, 2, 1, "", "get_params"], [850, 2, 1, "", "predict"], [850, 2, 1, "", "radius_neighbors"], [850, 2, 1, "", "radius_neighbors_graph"], [850, 2, 1, "", "score"], [850, 2, 1, "", "set_params"], [850, 2, 1, "", "set_score_request"]], "sklearn.neighbors.RadiusNeighborsTransformer": [[851, 2, 1, "", "fit"], [851, 2, 1, "", "fit_transform"], [851, 2, 1, "", "get_feature_names_out"], [851, 2, 1, "", "get_metadata_routing"], [851, 2, 1, "", "get_params"], [851, 2, 1, "", "radius_neighbors"], [851, 2, 1, "", "radius_neighbors_graph"], [851, 2, 1, "", "set_output"], [851, 2, 1, "", "set_params"], [851, 2, 1, "", "transform"]], "sklearn.neural_network": [[855, 1, 1, "", "BernoulliRBM"], [856, 1, 1, "", "MLPClassifier"], [857, 1, 1, "", "MLPRegressor"]], "sklearn.neural_network.BernoulliRBM": [[855, 2, 1, "", "fit"], [855, 2, 1, "", "fit_transform"], [855, 2, 1, "", "get_feature_names_out"], [855, 2, 1, "", "get_metadata_routing"], [855, 2, 1, "", "get_params"], [855, 2, 1, "", "gibbs"], [855, 2, 1, "", "partial_fit"], [855, 2, 1, "", "score_samples"], [855, 2, 1, "", "set_output"], [855, 2, 1, "", "set_params"], [855, 2, 1, "", "transform"]], "sklearn.neural_network.MLPClassifier": [[856, 2, 1, "", "fit"], [856, 2, 1, "", "get_metadata_routing"], [856, 2, 1, "", "get_params"], [856, 2, 1, "", "partial_fit"], [856, 2, 1, "", "predict"], [856, 2, 1, "", "predict_log_proba"], [856, 2, 1, "", "predict_proba"], [856, 2, 1, "", "score"], [856, 2, 1, "", "set_params"], [856, 2, 1, "", "set_partial_fit_request"], [856, 2, 1, "", "set_score_request"]], "sklearn.neural_network.MLPRegressor": [[857, 2, 1, "", "fit"], [857, 2, 1, "", "get_metadata_routing"], [857, 2, 1, "", "get_params"], [857, 2, 1, "", "partial_fit"], [857, 2, 1, "", "predict"], [857, 2, 1, "", "score"], [857, 2, 1, "", "set_params"], [857, 2, 1, "", "set_score_request"]], "sklearn.pipeline": [[858, 1, 1, "", "FeatureUnion"], [859, 1, 1, "", "Pipeline"], [860, 4, 1, "", "make_pipeline"], [861, 4, 1, "", "make_union"]], "sklearn.pipeline.FeatureUnion": [[858, 3, 1, "", "feature_names_in_"], [858, 2, 1, "", "fit"], [858, 2, 1, "", "fit_transform"], [858, 2, 1, "", "get_feature_names_out"], [858, 2, 1, "", "get_metadata_routing"], [858, 2, 1, "", "get_params"], [858, 3, 1, "", "n_features_in_"], [858, 2, 1, "", "set_output"], [858, 2, 1, "", "set_params"], [858, 2, 1, "", "transform"]], "sklearn.pipeline.Pipeline": [[859, 3, 1, "", "classes_"], [859, 2, 1, "", "decision_function"], [859, 3, 1, "", "feature_names_in_"], [859, 2, 1, "", "fit"], [859, 2, 1, "", "fit_predict"], [859, 2, 1, "", "fit_transform"], [859, 2, 1, "", "get_feature_names_out"], [859, 2, 1, "", "get_metadata_routing"], [859, 2, 1, "", "get_params"], [859, 2, 1, "", "inverse_transform"], [859, 3, 1, "", "n_features_in_"], [859, 3, 1, "", "named_steps"], [859, 2, 1, "", "predict"], [859, 2, 1, "", "predict_log_proba"], [859, 2, 1, "", "predict_proba"], [859, 2, 1, "", "score"], [859, 2, 1, "", "score_samples"], [859, 2, 1, "", "set_output"], [859, 2, 1, "", "set_params"], [859, 2, 1, "", "set_score_request"], [859, 2, 1, "", "transform"]], "sklearn.preprocessing": [[862, 1, 1, "", "Binarizer"], [863, 1, 1, "", "FunctionTransformer"], [864, 1, 1, "", "KBinsDiscretizer"], [865, 1, 1, "", "KernelCenterer"], [866, 1, 1, "", "LabelBinarizer"], [867, 1, 1, "", "LabelEncoder"], [868, 1, 1, "", "MaxAbsScaler"], [869, 1, 1, "", "MinMaxScaler"], [870, 1, 1, "", "MultiLabelBinarizer"], [871, 1, 1, "", "Normalizer"], [872, 1, 1, "", "OneHotEncoder"], [873, 1, 1, "", "OrdinalEncoder"], [874, 1, 1, "", "PolynomialFeatures"], [875, 1, 1, "", "PowerTransformer"], [876, 1, 1, "", "QuantileTransformer"], [877, 1, 1, "", "RobustScaler"], [878, 1, 1, "", "SplineTransformer"], [879, 1, 1, "", "StandardScaler"], [880, 1, 1, "", "TargetEncoder"], [881, 4, 1, "", "add_dummy_feature"], [882, 4, 1, "", "binarize"], [883, 4, 1, "", "label_binarize"], [884, 4, 1, "", "maxabs_scale"], [885, 4, 1, "", "minmax_scale"], [886, 4, 1, "", "normalize"], [887, 4, 1, "", "power_transform"], [888, 4, 1, "", "quantile_transform"], [889, 4, 1, "", "robust_scale"], [890, 4, 1, "", "scale"]], "sklearn.preprocessing.Binarizer": [[862, 2, 1, "", "fit"], [862, 2, 1, "", "fit_transform"], [862, 2, 1, "", "get_feature_names_out"], [862, 2, 1, "", "get_metadata_routing"], [862, 2, 1, "", "get_params"], [862, 2, 1, "", "set_output"], [862, 2, 1, "", "set_params"], [862, 2, 1, "", "set_transform_request"], [862, 2, 1, "", "transform"]], "sklearn.preprocessing.FunctionTransformer": [[863, 2, 1, "", "fit"], [863, 2, 1, "", "fit_transform"], [863, 2, 1, "", "get_feature_names_out"], [863, 2, 1, "", "get_metadata_routing"], [863, 2, 1, "", "get_params"], [863, 2, 1, "", "inverse_transform"], [863, 2, 1, "", "set_output"], [863, 2, 1, "", "set_params"], [863, 2, 1, "", "transform"]], "sklearn.preprocessing.KBinsDiscretizer": [[864, 2, 1, "", "fit"], [864, 2, 1, "", "fit_transform"], [864, 2, 1, "", "get_feature_names_out"], [864, 2, 1, "", "get_metadata_routing"], [864, 2, 1, "", "get_params"], [864, 2, 1, "", "inverse_transform"], [864, 2, 1, "", "set_fit_request"], [864, 2, 1, "", "set_output"], [864, 2, 1, "", "set_params"], [864, 2, 1, "", "transform"]], "sklearn.preprocessing.KernelCenterer": [[865, 2, 1, "", "fit"], [865, 2, 1, "", "fit_transform"], [865, 2, 1, "", "get_feature_names_out"], [865, 2, 1, "", "get_metadata_routing"], [865, 2, 1, "", "get_params"], [865, 2, 1, "", "set_fit_request"], [865, 2, 1, "", "set_output"], [865, 2, 1, "", "set_params"], [865, 2, 1, "", "set_transform_request"], [865, 2, 1, "", "transform"]], "sklearn.preprocessing.LabelBinarizer": [[866, 2, 1, "", "fit"], [866, 2, 1, "", "fit_transform"], [866, 2, 1, "", "get_metadata_routing"], [866, 2, 1, "", "get_params"], [866, 2, 1, "", "inverse_transform"], [866, 2, 1, "", "set_inverse_transform_request"], [866, 2, 1, "", "set_output"], [866, 2, 1, "", "set_params"], [866, 2, 1, "", "transform"]], "sklearn.preprocessing.LabelEncoder": [[867, 2, 1, "", "fit"], [867, 2, 1, "", "fit_transform"], [867, 2, 1, "", "get_metadata_routing"], [867, 2, 1, "", "get_params"], [867, 2, 1, "", "inverse_transform"], [867, 2, 1, "", "set_output"], [867, 2, 1, "", "set_params"], [867, 2, 1, "", "transform"]], "sklearn.preprocessing.MaxAbsScaler": [[868, 2, 1, "", "fit"], [868, 2, 1, "", "fit_transform"], [868, 2, 1, "", "get_feature_names_out"], [868, 2, 1, "", "get_metadata_routing"], [868, 2, 1, "", "get_params"], [868, 2, 1, "", "inverse_transform"], [868, 2, 1, "", "partial_fit"], [868, 2, 1, "", "set_output"], [868, 2, 1, "", "set_params"], [868, 2, 1, "", "transform"]], "sklearn.preprocessing.MinMaxScaler": [[869, 2, 1, "", "fit"], [869, 2, 1, "", "fit_transform"], [869, 2, 1, "", "get_feature_names_out"], [869, 2, 1, "", "get_metadata_routing"], [869, 2, 1, "", "get_params"], [869, 2, 1, "", "inverse_transform"], [869, 2, 1, "", "partial_fit"], [869, 2, 1, "", "set_output"], [869, 2, 1, "", "set_params"], [869, 2, 1, "", "transform"]], "sklearn.preprocessing.MultiLabelBinarizer": [[870, 2, 1, "", "fit"], [870, 2, 1, "", "fit_transform"], [870, 2, 1, "", "get_metadata_routing"], [870, 2, 1, "", "get_params"], [870, 2, 1, "", "inverse_transform"], [870, 2, 1, "", "set_output"], [870, 2, 1, "", "set_params"], [870, 2, 1, "", "transform"]], "sklearn.preprocessing.Normalizer": [[871, 2, 1, "", "fit"], [871, 2, 1, "", "fit_transform"], [871, 2, 1, "", "get_feature_names_out"], [871, 2, 1, "", "get_metadata_routing"], [871, 2, 1, "", "get_params"], [871, 2, 1, "", "set_output"], [871, 2, 1, "", "set_params"], [871, 2, 1, "", "set_transform_request"], [871, 2, 1, "", "transform"]], "sklearn.preprocessing.OneHotEncoder": [[872, 2, 1, "", "fit"], [872, 2, 1, "", "fit_transform"], [872, 2, 1, "", "get_feature_names_out"], [872, 2, 1, "", "get_metadata_routing"], [872, 2, 1, "", "get_params"], [872, 3, 1, "", "infrequent_categories_"], [872, 2, 1, "", "inverse_transform"], [872, 2, 1, "", "set_output"], [872, 2, 1, "", "set_params"], [872, 2, 1, "", "transform"]], "sklearn.preprocessing.OrdinalEncoder": [[873, 2, 1, "", "fit"], [873, 2, 1, "", "fit_transform"], [873, 2, 1, "", "get_feature_names_out"], [873, 2, 1, "", "get_metadata_routing"], [873, 2, 1, "", "get_params"], [873, 3, 1, "", "infrequent_categories_"], [873, 2, 1, "", "inverse_transform"], [873, 2, 1, "", "set_output"], [873, 2, 1, "", "set_params"], [873, 2, 1, "", "transform"]], "sklearn.preprocessing.PolynomialFeatures": [[874, 2, 1, "", "fit"], [874, 2, 1, "", "fit_transform"], [874, 2, 1, "", "get_feature_names_out"], [874, 2, 1, "", "get_metadata_routing"], [874, 2, 1, "", "get_params"], [874, 3, 1, "", "powers_"], [874, 2, 1, "", "set_output"], [874, 2, 1, "", "set_params"], [874, 2, 1, "", "transform"]], "sklearn.preprocessing.PowerTransformer": [[875, 2, 1, "", "fit"], [875, 2, 1, "", "fit_transform"], [875, 2, 1, "", "get_feature_names_out"], [875, 2, 1, "", "get_metadata_routing"], [875, 2, 1, "", "get_params"], [875, 2, 1, "", "inverse_transform"], [875, 2, 1, "", "set_output"], [875, 2, 1, "", "set_params"], [875, 2, 1, "", "transform"]], "sklearn.preprocessing.QuantileTransformer": [[876, 2, 1, "", "fit"], [876, 2, 1, "", "fit_transform"], [876, 2, 1, "", "get_feature_names_out"], [876, 2, 1, "", "get_metadata_routing"], [876, 2, 1, "", "get_params"], [876, 2, 1, "", "inverse_transform"], [876, 2, 1, "", "set_output"], [876, 2, 1, "", "set_params"], [876, 2, 1, "", "transform"]], "sklearn.preprocessing.RobustScaler": [[877, 2, 1, "", "fit"], [877, 2, 1, "", "fit_transform"], [877, 2, 1, "", "get_feature_names_out"], [877, 2, 1, "", "get_metadata_routing"], [877, 2, 1, "", "get_params"], [877, 2, 1, "", "inverse_transform"], [877, 2, 1, "", "set_output"], [877, 2, 1, "", "set_params"], [877, 2, 1, "", "transform"]], "sklearn.preprocessing.SplineTransformer": [[878, 2, 1, "", "fit"], [878, 2, 1, "", "fit_transform"], [878, 2, 1, "", "get_feature_names_out"], [878, 2, 1, "", "get_metadata_routing"], [878, 2, 1, "", "get_params"], [878, 2, 1, "", "set_fit_request"], [878, 2, 1, "", "set_output"], [878, 2, 1, "", "set_params"], [878, 2, 1, "", "transform"]], "sklearn.preprocessing.StandardScaler": [[879, 2, 1, "", "fit"], [879, 2, 1, "", "fit_transform"], [879, 2, 1, "", "get_feature_names_out"], [879, 2, 1, "", "get_metadata_routing"], [879, 2, 1, "", "get_params"], [879, 2, 1, "", "inverse_transform"], [879, 2, 1, "", "partial_fit"], [879, 2, 1, "", "set_fit_request"], [879, 2, 1, "", "set_inverse_transform_request"], [879, 2, 1, "", "set_output"], [879, 2, 1, "", "set_params"], [879, 2, 1, "", "set_partial_fit_request"], [879, 2, 1, "", "set_transform_request"], [879, 2, 1, "", "transform"]], "sklearn.preprocessing.TargetEncoder": [[880, 2, 1, "", "fit"], [880, 2, 1, "", "fit_transform"], [880, 2, 1, "", "get_feature_names_out"], [880, 2, 1, "", "get_metadata_routing"], [880, 2, 1, "", "get_params"], [880, 3, 1, "", "infrequent_categories_"], [880, 2, 1, "", "set_output"], [880, 2, 1, "", "set_params"], [880, 2, 1, "", "transform"]], "sklearn.random_projection": [[891, 1, 1, "", "GaussianRandomProjection"], [892, 1, 1, "", "SparseRandomProjection"], [893, 4, 1, "", "johnson_lindenstrauss_min_dim"]], "sklearn.random_projection.GaussianRandomProjection": [[891, 2, 1, "", "fit"], [891, 2, 1, "", "fit_transform"], [891, 2, 1, "", "get_feature_names_out"], [891, 2, 1, "", "get_metadata_routing"], [891, 2, 1, "", "get_params"], [891, 2, 1, "", "inverse_transform"], [891, 2, 1, "", "set_output"], [891, 2, 1, "", "set_params"], [891, 2, 1, "", "transform"]], "sklearn.random_projection.SparseRandomProjection": [[892, 2, 1, "", "fit"], [892, 2, 1, "", "fit_transform"], [892, 2, 1, "", "get_feature_names_out"], [892, 2, 1, "", "get_metadata_routing"], [892, 2, 1, "", "get_params"], [892, 2, 1, "", "inverse_transform"], [892, 2, 1, "", "set_output"], [892, 2, 1, "", "set_params"], [892, 2, 1, "", "transform"]], "sklearn.semi_supervised": [[894, 1, 1, "", "LabelPropagation"], [895, 1, 1, "", "LabelSpreading"], [896, 1, 1, "", "SelfTrainingClassifier"]], "sklearn.semi_supervised.LabelPropagation": [[894, 2, 1, "", "fit"], [894, 2, 1, "", "get_metadata_routing"], [894, 2, 1, "", "get_params"], [894, 2, 1, "", "predict"], [894, 2, 1, "", "predict_proba"], [894, 2, 1, "", "score"], [894, 2, 1, "", "set_params"], [894, 2, 1, "", "set_score_request"]], "sklearn.semi_supervised.LabelSpreading": [[895, 2, 1, "", "fit"], [895, 2, 1, "", "get_metadata_routing"], [895, 2, 1, "", "get_params"], [895, 2, 1, "", "predict"], [895, 2, 1, "", "predict_proba"], [895, 2, 1, "", "score"], [895, 2, 1, "", "set_params"], [895, 2, 1, "", "set_score_request"]], "sklearn.semi_supervised.SelfTrainingClassifier": [[896, 2, 1, "", "decision_function"], [896, 2, 1, "", "fit"], [896, 2, 1, "", "get_metadata_routing"], [896, 2, 1, "", "get_params"], [896, 2, 1, "", "predict"], [896, 2, 1, "", "predict_log_proba"], [896, 2, 1, "", "predict_proba"], [896, 2, 1, "", "score"], [896, 2, 1, "", "set_params"]], "sklearn.svm": [[899, 1, 1, "", "LinearSVC"], [900, 1, 1, "", "LinearSVR"], [901, 1, 1, "", "NuSVC"], [902, 1, 1, "", "NuSVR"], [903, 1, 1, "", "OneClassSVM"], [904, 1, 1, "", "SVC"], [905, 1, 1, "", "SVR"], [906, 4, 1, "", "l1_min_c"]], "sklearn.svm.LinearSVC": [[899, 2, 1, "", "decision_function"], [899, 2, 1, "", "densify"], [899, 2, 1, "", "fit"], [899, 2, 1, "", "get_metadata_routing"], [899, 2, 1, "", "get_params"], [899, 2, 1, "", "predict"], [899, 2, 1, "", "score"], [899, 2, 1, "", "set_fit_request"], [899, 2, 1, "", "set_params"], [899, 2, 1, "", "set_score_request"], [899, 2, 1, "", "sparsify"]], "sklearn.svm.LinearSVR": [[900, 2, 1, "", "fit"], [900, 2, 1, "", "get_metadata_routing"], [900, 2, 1, "", "get_params"], [900, 2, 1, "", "predict"], [900, 2, 1, "", "score"], [900, 2, 1, "", "set_fit_request"], [900, 2, 1, "", "set_params"], [900, 2, 1, "", "set_score_request"]], "sklearn.svm.NuSVC": [[901, 3, 1, "", "coef_"], [901, 2, 1, "", "decision_function"], [901, 2, 1, "", "fit"], [901, 2, 1, "", "get_metadata_routing"], [901, 2, 1, "", "get_params"], [901, 3, 1, "", "n_support_"], [901, 2, 1, "", "predict"], [901, 2, 1, "", "predict_log_proba"], [901, 2, 1, "", "predict_proba"], [901, 3, 1, "", "probA_"], [901, 3, 1, "", "probB_"], [901, 2, 1, "", "score"], [901, 2, 1, "", "set_fit_request"], [901, 2, 1, "", "set_params"], [901, 2, 1, "", "set_score_request"]], "sklearn.svm.NuSVR": [[902, 3, 1, "", "coef_"], [902, 2, 1, "", "fit"], [902, 2, 1, "", "get_metadata_routing"], [902, 2, 1, "", "get_params"], [902, 3, 1, "", "n_support_"], [902, 2, 1, "", "predict"], [902, 2, 1, "", "score"], [902, 2, 1, "", "set_fit_request"], [902, 2, 1, "", "set_params"], [902, 2, 1, "", "set_score_request"]], "sklearn.svm.OneClassSVM": [[903, 3, 1, "", "coef_"], [903, 2, 1, "", "decision_function"], [903, 2, 1, "", "fit"], [903, 2, 1, "", "fit_predict"], [903, 2, 1, "", "get_metadata_routing"], [903, 2, 1, "", "get_params"], [903, 3, 1, "", "n_support_"], [903, 2, 1, "", "predict"], [903, 2, 1, "", "score_samples"], [903, 2, 1, "", "set_fit_request"], [903, 2, 1, "", "set_params"]], "sklearn.svm.SVC": [[904, 3, 1, "", "coef_"], [904, 2, 1, "", "decision_function"], [904, 2, 1, "", "fit"], [904, 2, 1, "", "get_metadata_routing"], [904, 2, 1, "", "get_params"], [904, 3, 1, "", "n_support_"], [904, 2, 1, "", "predict"], [904, 2, 1, "", "predict_log_proba"], [904, 2, 1, "", "predict_proba"], [904, 3, 1, "", "probA_"], [904, 3, 1, "", "probB_"], [904, 2, 1, "", "score"], [904, 2, 1, "", "set_fit_request"], [904, 2, 1, "", "set_params"], [904, 2, 1, "", "set_score_request"]], "sklearn.svm.SVR": [[905, 3, 1, "", "coef_"], [905, 2, 1, "", "fit"], [905, 2, 1, "", "get_metadata_routing"], [905, 2, 1, "", "get_params"], [905, 3, 1, "", "n_support_"], [905, 2, 1, "", "predict"], [905, 2, 1, "", "score"], [905, 2, 1, "", "set_fit_request"], [905, 2, 1, "", "set_params"], [905, 2, 1, "", "set_score_request"]], "sklearn.tree": [[907, 1, 1, "", "DecisionTreeClassifier"], [908, 1, 1, "", "DecisionTreeRegressor"], [909, 1, 1, "", "ExtraTreeClassifier"], [910, 1, 1, "", "ExtraTreeRegressor"], [911, 4, 1, "", "export_graphviz"], [912, 4, 1, "", "export_text"], [913, 4, 1, "", "plot_tree"]], "sklearn.tree.DecisionTreeClassifier": [[907, 2, 1, "", "apply"], [907, 2, 1, "", "cost_complexity_pruning_path"], [907, 2, 1, "", "decision_path"], [907, 3, 1, "", "feature_importances_"], [907, 2, 1, "", "fit"], [907, 2, 1, "", "get_depth"], [907, 2, 1, "", "get_metadata_routing"], [907, 2, 1, "", "get_n_leaves"], [907, 2, 1, "", "get_params"], [907, 2, 1, "", "predict"], [907, 2, 1, "", "predict_log_proba"], [907, 2, 1, "", "predict_proba"], [907, 2, 1, "", "score"], [907, 2, 1, "", "set_fit_request"], [907, 2, 1, "", "set_params"], [907, 2, 1, "", "set_predict_proba_request"], [907, 2, 1, "", "set_predict_request"], [907, 2, 1, "", "set_score_request"]], "sklearn.tree.DecisionTreeRegressor": [[908, 2, 1, "", "apply"], [908, 2, 1, "", "cost_complexity_pruning_path"], [908, 2, 1, "", "decision_path"], [908, 3, 1, "", "feature_importances_"], [908, 2, 1, "", "fit"], [908, 2, 1, "", "get_depth"], [908, 2, 1, "", "get_metadata_routing"], [908, 2, 1, "", "get_n_leaves"], [908, 2, 1, "", "get_params"], [908, 2, 1, "", "predict"], [908, 2, 1, "", "score"], [908, 2, 1, "", "set_fit_request"], [908, 2, 1, "", "set_params"], [908, 2, 1, "", "set_predict_request"], [908, 2, 1, "", "set_score_request"]], "sklearn.tree.ExtraTreeClassifier": [[909, 2, 1, "", "apply"], [909, 2, 1, "", "cost_complexity_pruning_path"], [909, 2, 1, "", "decision_path"], [909, 3, 1, "", "feature_importances_"], [909, 2, 1, "", "fit"], [909, 2, 1, "", "get_depth"], [909, 2, 1, "", "get_metadata_routing"], [909, 2, 1, "", "get_n_leaves"], [909, 2, 1, "", "get_params"], [909, 2, 1, "", "predict"], [909, 2, 1, "", "predict_log_proba"], [909, 2, 1, "", "predict_proba"], [909, 2, 1, "", "score"], [909, 2, 1, "", "set_fit_request"], [909, 2, 1, "", "set_params"], [909, 2, 1, "", "set_predict_proba_request"], [909, 2, 1, "", "set_predict_request"], [909, 2, 1, "", "set_score_request"]], "sklearn.tree.ExtraTreeRegressor": [[910, 2, 1, "", "apply"], [910, 2, 1, "", "cost_complexity_pruning_path"], [910, 2, 1, "", "decision_path"], [910, 3, 1, "", "feature_importances_"], [910, 2, 1, "", "fit"], [910, 2, 1, "", "get_depth"], [910, 2, 1, "", "get_metadata_routing"], [910, 2, 1, "", "get_n_leaves"], [910, 2, 1, "", "get_params"], [910, 2, 1, "", "predict"], [910, 2, 1, "", "score"], [910, 2, 1, "", "set_fit_request"], [910, 2, 1, "", "set_params"], [910, 2, 1, "", "set_predict_request"], [910, 2, 1, "", "set_score_request"]], "sklearn.utils": [[914, 1, 1, "", "Bunch"], [915, 4, 1, "", "_safe_indexing"], [406, 0, 0, "-", "arrayfuncs"], [917, 4, 1, "", "as_float_array"], [918, 4, 1, "", "assert_all_finite"], [919, 4, 1, "", "check_X_y"], [920, 4, 1, "", "check_array"], [921, 4, 1, "", "check_consistent_length"], [922, 4, 1, "", "check_random_state"], [923, 4, 1, "", "check_scalar"], [406, 0, 0, "-", "class_weight"], [926, 4, 1, "", "deprecated"], [406, 0, 0, "-", "discovery"], [406, 0, 0, "-", "estimator_checks"], [932, 4, 1, "", "estimator_html_repr"], [406, 0, 0, "-", "extmath"], [939, 4, 1, "", "gen_batches"], [940, 4, 1, "", "gen_even_slices"], [406, 0, 0, "-", "graph"], [942, 4, 1, "", "indexable"], [406, 0, 0, "-", "metadata_routing"], [406, 0, 0, "-", "metaestimators"], [406, 0, 0, "-", "multiclass"], [952, 4, 1, "", "murmurhash3_32"], [406, 0, 0, "-", "parallel"], [955, 4, 1, "", "parallel_backend"], [406, 0, 0, "-", "random"], [957, 4, 1, "", "register_parallel_backend"], [958, 4, 1, "", "resample"], [959, 4, 1, "", "safe_mask"], [960, 4, 1, "", "safe_sqr"], [961, 4, 1, "", "shuffle"], [406, 0, 0, "-", "sparsefuncs"], [406, 0, 0, "-", "sparsefuncs_fast"], [406, 0, 0, "-", "validation"]], "sklearn.utils.Bunch": [[914, 2, 1, "", "clear"], [914, 2, 1, "", "copy"], [914, 2, 1, "", "fromkeys"], [914, 2, 1, "", "get"], [914, 2, 1, "", "items"], [914, 2, 1, "", "keys"], [914, 2, 1, "", "pop"], [914, 2, 1, "", "popitem"], [914, 2, 1, "", "setdefault"], [914, 2, 1, "", "update"], [914, 2, 1, "", "values"]], "sklearn.utils.arrayfuncs": [[916, 4, 1, "", "min_pos"]], "sklearn.utils.class_weight": [[924, 4, 1, "", "compute_class_weight"], [925, 4, 1, "", "compute_sample_weight"]], "sklearn.utils.discovery": [[927, 4, 1, "", "all_displays"], [928, 4, 1, "", "all_estimators"], [929, 4, 1, "", "all_functions"]], "sklearn.utils.estimator_checks": [[930, 4, 1, "", "check_estimator"], [931, 4, 1, "", "parametrize_with_checks"]], "sklearn.utils.extmath": [[933, 4, 1, "", "density"], [934, 4, 1, "", "fast_logdet"], [935, 4, 1, "", "randomized_range_finder"], [936, 4, 1, "", "randomized_svd"], [937, 4, 1, "", "safe_sparse_dot"], [938, 4, 1, "", "weighted_mode"]], "sklearn.utils.graph": [[941, 4, 1, "", "single_source_shortest_path_length"]], "sklearn.utils.metadata_routing": [[943, 1, 1, "", "MetadataRequest"], [944, 1, 1, "", "MetadataRouter"], [945, 1, 1, "", "MethodMapping"], [946, 4, 1, "", "get_routing_for_object"], [947, 4, 1, "", "process_routing"]], "sklearn.utils.metadata_routing.MetadataRequest": [[943, 2, 1, "", "consumes"]], "sklearn.utils.metadata_routing.MetadataRouter": [[944, 2, 1, "", "add"], [944, 2, 1, "", "add_self_request"], [944, 2, 1, "", "consumes"], [944, 2, 1, "", "route_params"], [944, 2, 1, "", "validate_metadata"]], "sklearn.utils.metadata_routing.MethodMapping": [[945, 2, 1, "", "add"], [945, 2, 1, "", "from_str"]], "sklearn.utils.metaestimators": [[948, 4, 1, "", "available_if"]], "sklearn.utils.multiclass": [[949, 4, 1, "", "is_multilabel"], [950, 4, 1, "", "type_of_target"], [951, 4, 1, "", "unique_labels"]], "sklearn.utils.parallel": [[953, 1, 1, "", "Parallel"], [954, 4, 1, "", "delayed"]], "sklearn.utils.parallel.Parallel": [[953, 2, 1, "", "dispatch_next"], [953, 2, 1, "", "dispatch_one_batch"], [953, 2, 1, "", "format"], [953, 2, 1, "", "print_progress"]], "sklearn.utils.random": [[956, 4, 1, "", "sample_without_replacement"]], "sklearn.utils.sparsefuncs": [[962, 4, 1, "", "incr_mean_variance_axis"], [963, 4, 1, "", "inplace_column_scale"], [964, 4, 1, "", "inplace_csr_column_scale"], [965, 4, 1, "", "inplace_row_scale"], [966, 4, 1, "", "inplace_swap_column"], [967, 4, 1, "", "inplace_swap_row"], [968, 4, 1, "", "mean_variance_axis"]], "sklearn.utils.sparsefuncs_fast": [[969, 4, 1, "", "inplace_csr_row_normalize_l1"], [970, 4, 1, "", "inplace_csr_row_normalize_l2"]], "sklearn.utils.validation": [[971, 4, 1, "", "check_is_fitted"], [972, 4, 1, "", "check_memory"], [973, 4, 1, "", "check_symmetric"], [974, 4, 1, "", "column_or_1d"], [975, 4, 1, "", "has_fit_parameter"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:function", "5": "py:attribute"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "function", "Python function"], "5": ["py", "attribute", "Python attribute"]}, "titleterms": {"about": [0, 391], "u": 0, "histori": [0, 1025], "govern": [0, 394], "author": [0, 1027], "document": [0, 8, 20, 166, 317, 318, 350, 351, 352, 379, 394, 1006, 1007, 1010, 1027, 1030, 1031, 1034, 1035], "team": [0, 378, 394], "contributor": [0, 378, 379, 394, 1031, 1032, 1033, 1034, 1035], "experi": [0, 38, 378, 394], "commun": [0, 379, 394], "emeritu": 0, "core": [0, 8, 368, 378, 383, 385, 391, 394, 989], "develop": [0, 108, 110, 166, 235, 377, 380, 381, 382, 383, 386, 387, 388, 976, 1023, 1043], "cite": 0, "scikit": [0, 235, 255, 315, 316, 317, 318, 319, 320, 321, 322, 365, 366, 377, 380, 381, 383, 384, 391, 394, 397, 406, 1006, 1007, 1011, 1012, 1013, 1018, 1021], "learn": [0, 5, 12, 51, 96, 99, 150, 166, 168, 169, 170, 175, 219, 220, 221, 222, 234, 235, 255, 262, 293, 300, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 365, 366, 368, 375, 377, 379, 380, 381, 383, 384, 391, 394, 397, 406, 412, 414, 982, 984, 992, 1000, 1006, 1007, 1009, 1011, 1012, 1013, 1015, 1018, 1019, 1020, 1021, 1022], "artwork": 0, "fund": 0, "past": 0, "sponsor": 0, "sprint": 0, "donat": 0, "project": [0, 87, 101, 104, 232, 379, 381, 391, 406, 999, 1004, 1006], "infrastructur": 0, "support": [0, 26, 122, 166, 193, 311, 315, 316, 317, 318, 320, 321, 322, 333, 336, 345, 391, 397, 398, 403, 405, 406, 414, 1002, 1003, 1010, 1019, 1044, 1045], "exampl": [3, 6, 9, 54, 60, 76, 89, 102, 110, 128, 158, 166, 195, 196, 203, 343, 347, 368, 373, 374, 384, 391, 396, 398, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 421, 424, 427, 430, 431, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 456, 458, 460, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 477, 480, 481, 482, 485, 486, 487, 488, 489, 490, 492, 493, 494, 496, 497, 498, 499, 500, 502, 504, 508, 509, 510, 511, 512, 513, 517, 518, 519, 520, 521, 522, 523, 524, 525, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 579, 580, 582, 585, 586, 587, 588, 589, 591, 592, 595, 597, 598, 600, 602, 603, 604, 605, 606, 608, 609, 611, 612, 613, 615, 616, 617, 620, 621, 623, 625, 626, 628, 629, 630, 631, 632, 633, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 650, 651, 653, 654, 655, 656, 657, 660, 662, 663, 664, 666, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 679, 680, 682, 686, 687, 688, 689, 690, 691, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 707, 710, 711, 715, 716, 717, 724, 726, 729, 731, 732, 734, 735, 738, 739, 742, 743, 745, 746, 747, 749, 750, 752, 754, 758, 775, 776, 779, 781, 782, 783, 784, 785, 786, 787, 789, 790, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 834, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 852, 855, 856, 857, 858, 859, 860, 863, 864, 866, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 883, 885, 888, 892, 893, 895, 896, 897, 899, 901, 902, 903, 904, 905, 906, 907, 908, 913, 914, 922, 931, 933, 940, 944, 945, 946, 947, 948, 961, 971, 976, 979, 981, 982, 983, 984, 986, 987, 988, 990, 991, 992, 993, 994, 995, 997, 999, 1000, 1001, 1002, 1003, 1004, 1012, 1018, 1019, 1020, 1024, 1027], "base": [3, 4, 86, 119, 120, 148, 166, 183, 234, 315, 316, 318, 320, 321, 322, 379, 406, 407, 411, 414, 416, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 983, 995, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044], "real": [3, 9, 76, 166, 374], "world": [3, 76, 166, 374], "dataset": [3, 4, 5, 8, 13, 25, 26, 28, 33, 45, 59, 63, 71, 86, 89, 90, 91, 92, 93, 96, 104, 112, 118, 121, 122, 132, 138, 151, 153, 155, 156, 158, 160, 166, 168, 169, 170, 178, 181, 183, 188, 199, 201, 208, 217, 220, 221, 228, 233, 238, 239, 258, 266, 267, 278, 281, 312, 329, 330, 335, 342, 351, 357, 371, 372, 373, 374, 375, 376, 384, 391, 406, 417, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 1012, 1018, 1019, 1021, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "time": [4, 13, 16, 23, 29, 36, 69, 77, 84, 88, 94, 107, 109, 118, 136, 141, 149, 161, 165, 173, 176, 193, 218, 226, 233, 234, 243, 252, 276, 279, 282, 297, 303, 313, 323, 331, 332, 349, 351, 354, 361, 411, 1008], "relat": [4, 8, 373, 379, 995, 1006, 1034], "featur": [4, 13, 52, 55, 75, 101, 117, 119, 120, 122, 126, 129, 130, 142, 144, 146, 147, 148, 166, 171, 172, 175, 178, 193, 196, 217, 233, 239, 261, 302, 306, 307, 310, 311, 315, 317, 318, 341, 351, 352, 366, 368, 379, 383, 398, 406, 408, 414, 415, 416, 977, 995, 997, 1004, 1020, 1021, 1030, 1031, 1032, 1033, 1034], "engin": [4, 13, 171, 1006, 1011], "data": [4, 7, 9, 12, 18, 21, 25, 27, 35, 39, 48, 50, 51, 56, 58, 59, 64, 65, 67, 68, 71, 76, 79, 81, 83, 86, 87, 97, 98, 101, 102, 103, 113, 119, 120, 123, 126, 128, 132, 144, 147, 148, 157, 159, 164, 168, 171, 172, 175, 179, 185, 192, 193, 203, 229, 234, 241, 250, 255, 257, 261, 266, 267, 269, 270, 273, 286, 290, 295, 302, 305, 309, 310, 311, 322, 325, 338, 341, 345, 346, 352, 353, 362, 366, 368, 374, 384, 391, 393, 407, 408, 411, 416, 997, 1001, 1011, 1012, 1015, 1018, 1020, 1021], "explor": 4, "bike": [4, 13, 170], "share": [4, 13, 170], "demand": [4, 13], "cross": [4, 85, 86, 138, 147, 166, 188, 255, 256, 258, 259, 263, 265, 270, 312, 341, 362, 406, 410, 411, 976, 983, 1016], "valid": [4, 138, 147, 188, 232, 255, 256, 258, 259, 263, 265, 270, 275, 341, 362, 366, 381, 388, 406, 411, 971, 972, 973, 974, 975, 976, 982, 983, 990, 1016], "gradient": [4, 118, 122, 123, 124, 125, 126, 127, 170, 199, 207, 213, 315, 316, 318, 320, 321, 414, 983, 1001], "boost": [4, 118, 122, 123, 124, 125, 126, 127, 170, 199, 315, 316, 318, 320, 321, 414], "naiv": [4, 13, 25, 26, 406, 989], "linear": [4, 26, 34, 35, 125, 151, 166, 169, 177, 178, 195, 199, 202, 205, 220, 221, 233, 316, 337, 342, 344, 345, 366, 388, 391, 406, 981, 983, 984, 985, 997, 1019], "regress": [4, 13, 74, 76, 86, 87, 113, 125, 126, 135, 151, 156, 157, 158, 159, 178, 179, 182, 188, 190, 191, 192, 195, 197, 199, 201, 214, 216, 217, 231, 234, 295, 345, 358, 359, 375, 406, 408, 414, 417, 978, 980, 983, 987, 988, 990, 991, 1001, 1002, 1003, 1019], "step": [4, 240, 392, 408], "categori": [4, 319, 321, 997], "trigonometr": 4, "period": [4, 200], "spline": [4, 200, 318, 997], "qualit": [4, 13], "analysi": [4, 34, 35, 61, 96, 103, 106, 112, 125, 170, 183, 245, 262, 263, 270, 291, 292, 293, 351, 406, 410, 412, 981, 990, 1004, 1020, 1021], "impact": [4, 62, 1042, 1043, 1044], "model": [4, 7, 11, 13, 58, 76, 86, 97, 103, 118, 119, 120, 122, 123, 126, 128, 147, 148, 151, 156, 166, 169, 170, 171, 175, 177, 178, 183, 187, 188, 193, 199, 202, 217, 229, 234, 238, 239, 244, 246, 250, 251, 253, 259, 260, 262, 267, 281, 290, 295, 302, 310, 316, 318, 322, 342, 345, 351, 366, 381, 391, 392, 394, 401, 402, 406, 411, 976, 982, 983, 986, 987, 989, 991, 992, 1012, 1016, 1019, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "predict": [4, 10, 13, 25, 87, 113, 125, 135, 152, 168, 179, 199, 234, 256, 267, 325, 366, 391, 392, 411, 417, 987, 998, 1012, 1019], "pairwis": [4, 260, 406, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 985], "interact": [4, 170, 320, 414, 1019], "polynomi": [4, 175, 178, 179, 200, 342, 979, 983, 985, 997, 1019], "non": [4, 15, 96, 125, 194, 199, 203, 220, 265, 337, 344, 345, 412, 983, 997], "kernel": [4, 5, 101, 151, 156, 157, 159, 160, 166, 174, 175, 233, 234, 287, 288, 296, 317, 334, 337, 342, 345, 406, 412, 413, 417, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 979, 980, 985, 997, 1002, 1019], "conclud": [4, 224], "remark": [4, 58, 224, 232], "imag": [5, 48, 51, 54, 67, 99, 373, 406, 415, 581, 582, 583, 584, 585], "denois": [5, 99], "us": [5, 6, 12, 18, 49, 96, 97, 99, 129, 130, 132, 148, 156, 186, 202, 213, 215, 260, 264, 269, 281, 306, 345, 351, 352, 360, 362, 368, 380, 384, 385, 387, 391, 406, 411, 412, 414, 415, 416, 421, 424, 427, 430, 431, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 456, 458, 460, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 477, 480, 481, 482, 485, 486, 487, 488, 489, 490, 492, 493, 494, 496, 497, 498, 499, 500, 502, 504, 508, 509, 510, 511, 512, 513, 517, 518, 519, 520, 521, 522, 523, 524, 525, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 549, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 579, 580, 582, 585, 586, 587, 588, 589, 591, 592, 595, 597, 598, 600, 602, 603, 604, 605, 606, 608, 609, 611, 612, 613, 615, 616, 617, 620, 621, 623, 625, 626, 628, 629, 630, 631, 632, 633, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 650, 651, 653, 654, 655, 656, 657, 660, 662, 663, 664, 666, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 679, 680, 682, 686, 687, 688, 689, 690, 691, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 707, 710, 711, 715, 716, 717, 724, 726, 729, 731, 732, 734, 735, 738, 739, 742, 743, 745, 746, 747, 749, 750, 752, 754, 758, 775, 776, 779, 781, 782, 783, 784, 785, 786, 787, 789, 790, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 834, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 852, 855, 856, 857, 858, 859, 860, 863, 864, 866, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 883, 885, 888, 892, 893, 895, 896, 897, 899, 901, 902, 903, 904, 905, 906, 907, 908, 913, 914, 922, 931, 933, 940, 944, 945, 946, 947, 948, 961, 971, 981, 983, 984, 987, 991, 1001, 1002, 1003, 1011, 1019, 1021, 1037], "pca": [5, 59, 74, 91, 96, 97, 100, 101, 102, 103, 104, 310, 322, 412, 539, 1004, 1020], "refer": [5, 11, 26, 28, 81, 82, 99, 112, 115, 171, 175, 183, 187, 260, 265, 266, 278, 296, 373, 374, 404, 405, 406, 407, 409, 411, 412, 414, 415, 416, 417, 976, 977, 979, 980, 981, 983, 984, 985, 987, 988, 990, 991, 992, 993, 994, 995, 997, 999, 1000, 1001, 1002], "load": [5, 7, 18, 51, 59, 91, 118, 120, 122, 126, 138, 148, 171, 192, 217, 221, 229, 233, 241, 261, 269, 270, 281, 286, 310, 311, 338, 341, 351, 352, 353, 372, 373, 384, 391, 415, 1012, 1020, 1021], "via": [5, 13, 54, 187, 188, 217, 414, 979], "openml": [5, 311, 315, 373], "basi": [5, 160, 417, 979, 983, 1019], "reconstruct": [5, 14, 99], "test": [5, 79, 143, 263, 266, 273, 351, 356, 377, 379, 381, 387, 388, 411, 1012, 1019, 1021], "face": [6, 51, 96, 237, 374, 1011, 1017], "recognit": [6, 374, 376, 1017], "eigenfac": [6, 96, 1017], "svm": [6, 140, 144, 145, 175, 213, 233, 318, 330, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 347, 348, 406, 899, 900, 901, 902, 903, 904, 905, 906, 983, 993, 1001, 1019, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "complex": [7, 230, 240, 259, 262, 327, 356, 366, 407, 983, 990, 991, 1001, 1002, 1003], "influenc": [7, 10, 366], "benchmark": [7, 10, 59, 351], "choos": [7, 976, 1012, 1014, 1016], "paramet": [7, 79, 125, 258, 317, 338, 346, 379, 381, 392, 393, 406, 408, 414, 976, 983, 987, 1002, 1012, 1016, 1021], "run": [7, 59, 264], "code": [7, 96, 105, 379, 381, 384, 385, 387, 412, 1031, 1032, 1033, 1034, 1035], "plot": [7, 8, 10, 21, 25, 31, 35, 39, 42, 48, 50, 51, 58, 64, 65, 67, 68, 79, 83, 86, 91, 92, 93, 97, 98, 113, 118, 121, 126, 128, 132, 133, 134, 135, 138, 147, 164, 170, 178, 179, 183, 191, 192, 193, 203, 204, 208, 221, 229, 233, 238, 239, 241, 250, 256, 257, 262, 264, 267, 269, 273, 275, 281, 290, 302, 311, 315, 317, 318, 325, 335, 336, 341, 342, 351, 357, 386, 406, 982, 994, 1024], "result": [7, 8, 21, 39, 48, 50, 51, 58, 59, 64, 65, 68, 79, 81, 83, 97, 98, 113, 118, 132, 135, 164, 175, 183, 204, 234, 238, 264, 273, 281, 290, 311, 345, 352, 362, 976], "conclus": [7, 13, 151, 183, 188, 278, 286, 312, 342], "out": [8, 124, 368, 387, 411, 976, 983, 989], "classif": [8, 27, 30, 31, 33, 34, 71, 92, 139, 152, 153, 154, 155, 159, 166, 215, 236, 263, 266, 267, 270, 281, 286, 294, 302, 315, 324, 329, 342, 351, 375, 406, 414, 417, 983, 987, 988, 990, 991, 1001, 1002, 1003, 1019, 1021], "text": [8, 166, 230, 261, 329, 350, 351, 352, 353, 374, 406, 415, 586, 587, 588, 589, 1021], "reuter": 8, "routin": [8, 367, 388], "main": [8, 199], "outlier": [9, 181, 216, 228, 238, 289, 290, 305, 406, 983, 993, 997], "detect": [9, 228, 238, 257, 289, 290, 987, 993, 1002], "set": [9, 76, 79, 102, 132, 164, 203, 267, 338, 356, 391, 406, 411, 983, 1012, 1018, 1019, 1021], "first": [9, 38, 379], "second": [9, 38], "latenc": [10, 366], "helper": [10, 160, 221, 388], "function": [10, 35, 160, 189, 203, 204, 209, 221, 255, 273, 317, 341, 353, 388, 406, 411, 414, 417, 979, 983, 987, 1002, 1019, 1044], "bulk": [10, 366], "atom": [10, 366], "speed": [10, 385], "variou": [10, 53, 206, 225], "regressor": [10, 113, 125, 178, 203, 312, 315, 318, 406, 414], "n_featur": 10, "throughput": [10, 366], "speci": [11, 296, 374], "distribut": [11, 217, 220, 296, 309, 374, 397, 984, 997], "visual": [12, 59, 106, 123, 229, 234, 241, 255, 301, 316, 338, 406, 407, 408, 987, 1024], "stock": [12, 1017], "market": [12, 1017], "structur": [12, 40, 48, 68, 159, 327, 360, 1017], "retriev": [12, 315], "from": [12, 99, 148, 171, 311, 315, 367, 373, 377, 391, 406, 415, 987, 1012, 1019, 1020, 1021, 1037], "internet": 12, "graph": [12, 315, 388, 391, 406, 407, 415, 941], "cluster": [12, 20, 22, 37, 38, 39, 40, 41, 42, 45, 46, 48, 50, 53, 56, 57, 59, 61, 64, 65, 66, 67, 68, 96, 166, 319, 321, 352, 375, 404, 406, 407, 412, 418, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 712, 713, 987, 1020, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "affin": [12, 39, 407, 985], "propag": [12, 39, 325, 326, 327, 407, 1000], "embed": [12, 53, 220, 221, 232, 293, 414, 984], "2d": [12, 53, 98, 104, 170], "space": [12, 101, 408, 976, 984], "lag": 13, "seri": [13, 193, 411], "forecast": [13, 156], "analyz": [13, 976], "gener": [13, 21, 25, 35, 39, 48, 50, 56, 58, 64, 65, 67, 68, 79, 81, 83, 92, 93, 97, 98, 99, 119, 128, 144, 147, 151, 157, 158, 160, 166, 177, 178, 179, 183, 193, 199, 201, 234, 250, 257, 273, 290, 295, 302, 316, 325, 345, 346, 362, 375, 379, 393, 406, 412, 414, 983, 997, 1007, 1016], "panda": [13, 320, 384, 391], "evalu": [13, 38, 59, 62, 82, 199, 238, 261, 264, 302, 311, 352, 392, 402, 404, 407, 411, 414, 976, 982, 987, 1021], "next": [13, 392], "hour": 13, "proper": [13, 156], "uncertainti": 13, "quantil": [13, 125, 201, 318, 319, 983], "A": [13, 21, 22, 48, 59, 64, 199, 318, 378, 385, 401, 411, 1015, 1018], "look": [13, 234, 345], "compress": [14, 54, 366], "sens": 14, "tomographi": 14, "l1": [14, 183, 190, 192, 215, 346, 416], "prior": [14, 160, 245], "lasso": [14, 183, 184, 185, 186, 187, 188, 193, 316, 650, 983], "topic": 15, "extract": [15, 75, 99, 217, 261, 352, 366, 368, 406, 415, 1021], "neg": [15, 96, 148, 194, 412, 983], "matrix": [15, 18, 159, 180, 254, 406, 407, 412, 987], "factor": [15, 96, 103, 106, 289, 290, 412, 993], "latent": [15, 86, 412], "dirichlet": [15, 412, 986], "alloc": [15, 412], "comput": [16, 18, 23, 29, 36, 39, 48, 50, 64, 65, 68, 69, 77, 79, 84, 88, 94, 107, 109, 118, 136, 141, 149, 161, 165, 173, 176, 192, 204, 218, 226, 243, 252, 273, 276, 279, 282, 297, 303, 313, 323, 331, 332, 349, 354, 361, 365, 366, 406, 407, 408, 411, 994, 1008], "libsvm": [17, 373], "gui": 17, "wikipedia": 18, "princip": [18, 87, 412, 1004, 1020], "eigenvector": 18, "download": [18, 132, 164, 373], "alreadi": 18, "disk": 18, "redirect": 18, "file": [18, 397, 415, 1021], "adjac": 18, "singular": [18, 412], "vector": [18, 26, 54, 166, 333, 336, 345, 351, 353, 406, 415, 1002, 1019, 1020], "random": [18, 96, 116, 118, 130, 131, 171, 172, 232, 241, 266, 268, 322, 362, 381, 388, 406, 411, 412, 414, 956, 976, 983, 999, 1004], "svd": [18, 96, 412], "central": 18, "score": [18, 86, 118, 138, 147, 164, 178, 250, 259, 266, 267, 341, 398, 407, 411, 982, 987, 1002, 1016], "biclust": [19, 20, 21, 166, 375, 404, 406], "spectral": [20, 21, 22, 67, 220, 404, 407, 984], "co": [20, 22, 404], "algorithm": [20, 21, 22, 39, 45, 50, 56, 64, 65, 66, 220, 228, 385, 391, 981, 983, 988, 990, 991, 995, 1003, 1019], "demo": [21, 22, 39, 48, 50, 56, 59, 64, 66], "sampl": [21, 39, 56, 64, 79, 97, 98, 144, 180, 212, 234, 261, 273, 295, 316, 345, 348, 373, 388, 393, 406, 407, 414, 983], "fit": [21, 27, 58, 97, 103, 119, 120, 125, 126, 156, 178, 179, 180, 193, 196, 201, 205, 267, 281, 290, 295, 312, 345, 362, 381, 392, 398, 414, 989, 993, 1012], "spectralbiclust": [21, 449], "calibr": [24, 25, 26, 27, 28, 125, 166, 199, 405, 406, 435, 436, 437, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044], "probabl": [25, 26, 27, 31, 134, 154, 405, 406, 414, 1002], "classifi": [25, 26, 28, 32, 110, 135, 182, 240, 257, 281, 286, 315, 330, 335, 338, 351, 360, 405, 406, 414, 981, 990, 1019, 1021], "synthet": [25, 76, 178, 183, 257, 312, 384], "gaussian": [25, 26, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 166, 244, 245, 246, 249, 250, 251, 305, 406, 417, 986, 989, 997, 999], "bay": [25, 26, 406, 989], "curv": [26, 28, 179, 234, 241, 251, 257, 262, 267, 269, 275, 405, 982], "summari": [26, 123, 188, 352, 353, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "3": [27, 182, 321, 1021, 1035, 1036, 1041, 1043], "class": [27, 38, 112, 114, 134, 182, 208, 213, 263, 267, 269, 318, 337, 340, 393, 406, 411, 414, 415, 987, 990, 993, 1001, 1002, 1027, 1028], "compar": [27, 43, 45, 63, 79, 86, 118, 131, 144, 175, 178, 185, 201, 206, 228, 234, 260, 268, 291, 300, 305, 311, 391], "comparison": [28, 32, 35, 44, 65, 81, 104, 122, 123, 143, 151, 220, 221, 234, 260, 271, 278, 353, 407, 983], "recogn": 33, "hand": 33, "written": 33, "digit": [33, 53, 59, 90, 139, 221, 302, 325, 326, 376, 1018], "normal": [34, 175, 199, 305, 309, 406, 871, 886, 987, 997], "ledoit": [34, 80, 409], "wolf": [34, 80, 409], "oa": [34, 79, 80, 420, 473], "discrimin": [34, 35, 406, 981], "quadrat": [35, 417, 981], "covari": [35, 78, 79, 81, 82, 83, 166, 247, 406, 409, 420, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 981, 1035, 1039, 1040, 1041, 1043, 1044], "ellipsoid": [35, 246], "lda": [35, 104, 412, 981], "qda": [35, 981], "adjust": 38, "chanc": 38, "perform": [38, 44, 263, 310, 317, 319, 325, 352, 366, 379, 380, 407, 411, 1021], "defin": [38, 48, 59, 68, 220, 255, 257, 258, 353, 987], "list": [38, 1010], "metric": [38, 41, 125, 264, 403, 406, 407, 411, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 976, 985, 987, 990, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "fix": [38, 383, 1027, 1030, 1031, 1032, 1033, 1034, 1040], "ground": [38, 178], "truth": [38, 178], "label": [38, 267, 325, 326, 327, 374, 375, 406, 407, 411, 414, 987, 998, 1000], "grow": 38, "number": [38, 61, 122, 147, 272, 366, 381, 976, 977], "vari": [38, 299, 328, 407], "agglom": [40, 41, 53, 1020], "without": [40, 291, 351], "differ": [41, 45, 63, 79, 160, 170, 305, 308, 311, 335, 342, 381, 391, 398, 407, 983, 1019], "hierarch": [42, 48, 63, 68, 321, 407, 1020], "dendrogram": 42, "birch": [43, 407, 440], "minibatchkmean": [43, 65, 96, 447], "bisect": [44, 407], "k": [44, 46, 49, 58, 59, 60, 62, 65, 68, 86, 286, 310, 352, 407, 411, 987, 990, 997, 1019, 1020], "mean": [44, 46, 49, 58, 59, 60, 62, 64, 65, 119, 120, 164, 171, 203, 352, 407, 987, 997, 1020], "regular": [44, 79, 127, 169, 192, 203, 204, 299, 346, 983, 991], "toi": [45, 63, 228, 376], "segment": [47, 67], "pictur": 47, "greek": 47, "coin": [47, 48], "region": [47, 260], "ward": [48, 68, 407, 1020], "an": [48, 60, 110, 164, 180, 188, 293, 315, 319, 391, 415, 976, 993, 1012, 1018, 1019], "color": 49, "quantiz": [49, 54, 1020], "dbscan": [50, 407, 418, 442], "onlin": [51, 206, 318, 319, 1001], "dictionari": [51, 96, 99, 105, 412], "part": [51, 416], "agglomer": [52, 55, 1004, 1020], "origin": [54, 101, 266, 293, 305], "encod": [54, 122, 311, 312, 321, 997, 998], "strategi": [54, 258, 278, 300, 308, 321, 368, 406, 407, 987], "memori": [54, 322, 366, 385, 387, 407], "footprint": 54, "v": [55, 68, 79, 80, 82, 87, 101, 147, 170, 171, 181, 191, 217, 263, 269, 273, 274, 356, 407, 414, 977, 997, 1012], "univari": [55, 86, 144, 341, 416, 977], "select": [55, 61, 73, 103, 138, 142, 144, 147, 148, 166, 187, 188, 193, 250, 253, 341, 391, 398, 402, 406, 411, 416, 976, 983, 1016, 1033], "hdbscan": [56, 321, 407, 444], "scale": [56, 169, 220, 223, 310, 346, 368, 890, 984, 993, 997, 1004], "invari": [56, 263], "multi": [56, 112, 131, 170, 193, 208, 223, 237, 264, 267, 299, 359, 385, 406, 983, 984, 987, 991, 1002, 1003], "hyperparamet": [56, 156, 157, 261, 268, 278, 615], "robust": [56, 81, 82, 178, 202, 205, 362, 406, 409, 976, 983], "min_cluster_s": 56, "min_sampl": 56, "dbscan_clust": 56, "induct": 57, "demonstr": [58, 264, 308, 325], "assumpt": 58, "possibl": [58, 384], "solut": 58, "final": [58, 151], "handwritten": [59, 221, 376], "our": [59, 255, 258, 379], "reduc": [59, 366], "initi": [60, 62, 248], "silhouett": [61, 407], "kmean": [61, 65, 316, 445], "empir": [62, 82, 232, 409], "linkag": [63, 407], "method": [63, 75, 86, 111, 151, 166, 220, 222, 248, 277, 280, 393, 406, 407, 979, 993, 994, 1020], "shift": [64, 407], "meanshift": [64, 446], "establish": [65, 175], "pariti": 65, "between": [65, 271, 983], "optic": [66, 376, 407, 448], "four": 67, "circl": 67, "two": [67, 114, 185, 239, 260], "unstructur": 68, "we": 68, "ar": [68, 318, 391], "nearest": [68, 166, 283, 284, 285, 286, 291, 294, 295, 315, 406, 977, 990, 1019], "neighbor": [68, 166, 220, 283, 284, 285, 286, 291, 295, 310, 315, 406, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 977, 984, 990, 1019, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044], "10": [68, 1027], "pipelin": [70, 71, 73, 74, 132, 145, 166, 169, 230, 235, 240, 261, 311, 341, 381, 391, 392, 406, 408, 416, 858, 859, 860, 861, 1004, 1017, 1021, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "composit": [70, 166, 406, 408, 976], "estim": [70, 78, 79, 80, 81, 82, 83, 108, 110, 115, 122, 124, 131, 157, 164, 166, 178, 202, 205, 230, 235, 237, 238, 249, 268, 278, 287, 288, 296, 315, 316, 317, 320, 322, 362, 381, 391, 392, 393, 403, 406, 408, 409, 411, 413, 414, 976, 977, 981, 983, 987, 1002, 1006, 1014, 1016, 1018, 1028, 1035, 1036, 1037], "column": [71, 72, 240], "transform": [71, 72, 73, 76, 86, 117, 130, 240, 317, 318, 319, 371, 391, 392, 408, 411, 990, 997, 998, 999, 1020], "heterogen": [71, 408], "sourc": [71, 97, 377], "20": [71, 351, 374, 1021, 1035], "newsgroup": [71, 351, 374, 1021], "creat": [71, 103, 112, 203, 229, 267, 312, 341, 342, 391], "mix": 72, "type": [72, 245, 381, 393, 407, 1012], "dimension": [73, 220, 223, 240, 292, 310, 352, 981, 984, 990, 1004, 1019], "reduct": [73, 220, 224, 240, 292, 310, 352, 981, 990, 1004], "gridsearchcv": [73, 138, 264, 414, 796], "illustr": [73, 155, 160, 293, 417], "cach": [73, 285, 408], "within": 73, "chain": [74, 240, 281, 392, 408], "logist": [74, 182, 189, 190, 191, 192, 214, 215, 983, 1019], "concaten": 75, "multipl": [75, 240, 264, 362, 386, 411, 976, 977, 987, 1035, 1036, 1045], "effect": [76, 168, 225, 305, 310, 328, 356, 990], "target": [76, 158, 217, 311, 312, 391, 393, 406, 408, 988, 997, 998], "shrinkag": [79, 409, 414, 981, 1019], "ledoitwolf": [79, 471], "max": [79, 987], "likelihood": [79, 178, 179, 263, 987, 992], "approach": [79, 188, 260], "mahalanobi": [81, 990], "distanc": [81, 406, 990], "relev": [81, 183, 983], "minimum": [82, 409], "determin": [82, 183, 409, 983, 987], "spars": [83, 96, 105, 169, 183, 185, 214, 315, 322, 351, 352, 388, 406, 409, 412, 416, 997, 999, 1001, 1044], "invers": [83, 409, 999], "decomposit": [85, 86, 95, 96, 115, 166, 375, 406, 410, 412, 419, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 1020, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "variabl": [86, 168, 169, 367, 391, 406, 1019], "canon": [86, 410], "symmetr": 86, "pl": 86, "scatter": [86, 91], "multivari": [86, 977], "respons": [86, 394], "pls2": 86, "pls1": 86, "cca": [86, 480], "mode": [86, 366, 377], "b": 86, "deflat": 86, "compon": [87, 96, 291, 292, 293, 412, 990, 1004, 1020], "partial": [87, 168, 170, 239, 994], "least": [87, 125, 188, 194, 197, 983], "squar": [87, 125, 160, 194, 197, 203, 417, 979, 983, 985, 987], "The": [87, 90, 91, 168, 169, 199, 225, 232, 258, 267, 278, 374, 383, 411, 415, 986, 987, 999, 1019, 1020], "one": [87, 122, 239, 983, 987], "power": [87, 199], "iri": [91, 102, 104, 121, 153, 208, 330, 335, 357, 376, 417, 1018], "represent": [91, 170, 230, 316, 366, 381, 415, 1020], "randomli": [92, 93], "multilabel": [93, 236, 281, 375, 388, 406, 987, 988, 1012], "prepar": [96, 113, 123, 175, 220, 269, 270, 310, 338, 383], "nmf": [96, 319, 412, 538], "independ": [96, 412, 1020], "fastica": [96, 97, 98, 419, 531], "minibatchsparsepca": [96, 412, 537], "center": [96, 997], "fa": [96, 103], "posit": [96, 318], "blind": 97, "separ": [97, 211, 339, 340], "ica": [97, 412, 1020], "point": [98, 293], "cloud": 98, "distort": 99, "displai": [99, 204, 229, 230, 240, 320, 321, 322, 387, 1024, 1043], "patch": [99, 415], "noisi": [99, 158, 203], "them": [99, 378], "increment": [100, 368, 412], "kernelpca": [101, 533], "probabilist": [103, 152, 412, 417], "precomput": [105, 180, 315, 412], "rotat": 106, "pattern": 106, "__sklearn_is_fitted__": 110, "api": [110, 241, 242, 315, 318, 320, 367, 381, 386, 393, 398, 403, 406, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1037, 1044], "custom": [110, 258, 334, 415, 997, 1002], "implement": [110, 185, 391, 407, 987, 990, 1001, 1002], "simpl": [110, 151, 235, 288, 385, 1018], "ensembl": [111, 117, 121, 166, 319, 406, 414, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "adaboost": [112, 113, 114, 414], "decis": [112, 113, 121, 128, 133, 166, 233, 286, 321, 330, 342, 355, 356, 357, 358, 359, 360, 391, 394, 406, 1003], "tree": [112, 113, 117, 119, 120, 121, 130, 166, 171, 199, 315, 320, 321, 322, 355, 356, 357, 358, 359, 360, 391, 406, 414, 416, 907, 908, 909, 910, 911, 912, 913, 990, 995, 1003, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "train": [112, 113, 123, 126, 128, 135, 147, 203, 229, 234, 238, 239, 241, 250, 273, 278, 302, 311, 312, 317, 328, 338, 342, 351, 356, 357, 360, 411, 990, 1000, 1012, 1019, 1021], "adaboostclassifi": [112, 551], "converg": 112, "error": [112, 116, 123, 125, 138, 178, 203, 257, 273, 387, 397, 983, 987], "weight": [112, 178, 180, 212, 301, 316, 348, 398, 406, 414, 415], "weak": [112, 414], "learner": [112, 414], "decisiontre": 113, "singl": [115, 132, 217, 229, 375, 407, 977], "versu": [115, 213, 265, 330, 366], "bag": [115, 124, 351, 414, 415, 976, 1021], "bia": 115, "varianc": [115, 197, 416, 987, 997], "oob": 116, "forest": [116, 118, 119, 120, 131, 171, 172, 238, 241, 322, 374, 414, 993], "histogram": [118, 316, 318, 320, 413, 414], "import": [119, 120, 126, 148, 171, 172, 233, 278, 310, 315, 414, 995], "decreas": [119, 120, 171], "impur": [119, 120, 171, 356, 995], "permut": [119, 171, 172, 266, 315, 411, 995], "pixel": 120, "parallel": [120, 367, 377, 385, 406, 407, 414, 953, 954, 976], "mdi": [120, 171], "surfac": [121, 233, 357], "categor": [122, 311, 317, 322, 391, 414, 989, 997], "am": [122, 238], "hous": [122, 238, 374], "drop": 122, "hot": 122, "ordin": 122, "nativ": [122, 311, 315, 317, 322], "limit": [122, 151, 366, 397, 401, 415], "split": [122, 317, 362, 411], "earli": [123, 207], "stop": [123, 207, 415, 1001], "calcul": [123, 134], "interv": 125, "confid": 125, "tune": [125, 258, 261, 317, 976, 1021], "hyper": [125, 258, 317, 406, 976], "preprocess": [126, 132, 166, 169, 170, 238, 240, 304, 321, 353, 362, 391, 406, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 997, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "devianc": [126, 987], "isolationforest": [128, 561], "discret": [128, 159, 306, 307, 997], "boundari": [128, 133, 286, 330, 342], "path": [128, 186, 192, 204, 360, 397], "length": [128, 397], "monoton": [129, 322, 414], "constraint": [129, 320, 322, 407, 414], "name": [129, 318, 391, 408], "specifi": [129, 391, 976], "hash": [130, 388, 415], "total": [130, 356, 414], "output": [131, 237, 305, 320, 322, 359, 1003, 1019], "meta": [131, 278, 317, 406, 414], "combin": [132, 229], "predictor": 132, "stack": [132, 315, 414], "make": [132, 135, 164, 379, 383, 394], "measur": [132, 263, 407, 987], "votingclassifi": [133, 134, 414, 567], "individu": [135, 170, 317, 994], "vote": [135, 414], "tutori": [137, 166, 1005, 1013, 1015, 1021], "exercis": [137, 138, 139, 140, 166, 1016, 1019, 1021], "diabet": [138, 239, 376, 1019], "appli": 138, "line": [138, 154], "show": [138, 269], "std": [138, 178], "bonu": 138, "how": [138, 362, 379, 385, 391], "much": 138, "can": [138, 391], "you": [138, 391], "trust": 138, "alpha": [138, 356], "f": [143, 987], "mutual": [143, 407], "inform": [143, 164, 187, 188, 383, 406, 407, 976, 983], "anova": [145, 341], "recurs": [146, 147, 416], "elimin": [146, 147, 416, 976], "sequenti": [148, 416], "coeffici": [148, 169, 178, 203, 204, 407, 987], "toler": 148, "valu": [148, 162, 163, 164, 166, 225, 235, 315, 321, 322, 360, 379, 412, 414, 977, 987, 995, 997, 1003], "process": [150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 166, 169, 362, 394, 406, 417, 986, 1015], "machin": [150, 166, 168, 169, 170, 302, 333, 387, 406, 992, 1002, 1012, 1019], "ridg": [151, 179, 181, 197, 203, 204, 234, 312, 406, 670, 980, 983], "gpc": [152, 153, 154, 155, 417], "iso": [154, 267], "xor": [155, 417], "co2": 156, "level": [156, 157, 367, 407, 414], "mona": 156, "loa": 156, "gpr": [156, 157, 417], "build": [156, 164, 377, 379, 387, 408, 1021, 1045], "design": 156, "extrapol": 156, "interpret": [156, 169, 203, 238, 281, 412, 414], "abil": 157, "nois": [157, 158, 179], "optimis": 157, "basic": [158, 217, 392, 409, 417], "introductori": 158, "free": 158, "sequenc": [159, 391], "similar": [159, 985, 987], "under": [159, 391, 1023, 1043], "posterior": 160, "cookbook": 160, "radial": [160, 417, 979, 1019], "ration": [160, 417], "quadradt": 160, "exp": [160, 417], "sine": [160, 251, 417], "dot": [160, 417], "product": [160, 217, 387, 391, 417, 619], "mat\u00e9rn": [160, 417], "miss": [162, 163, 164, 166, 315, 321, 322, 414, 977, 997, 1003], "imput": [162, 163, 164, 166, 315, 406, 625, 626, 627, 628, 977, 997, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045], "variant": 163, "iterativeimput": [163, 625, 977], "befor": [164, 383], "replac": 164, "0": [164, 315, 316, 317, 318, 1003, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "knn": [164, 315], "iter": [164, 272, 411, 976], "releas": [166, 314, 315, 316, 317, 318, 319, 320, 321, 322, 383, 397, 1025], "highlight": [166, 314, 315, 316, 317, 318, 319, 320, 321, 322, 1027, 1030, 1031, 1034, 1035], "mixtur": [166, 244, 245, 246, 249, 250, 251, 406, 794, 795, 986, 1035, 1036, 1040, 1041, 1043], "inspect": [166, 167, 396, 406, 629, 630, 631, 632, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "approxim": [166, 174, 175, 233, 283, 317, 406, 409, 979], "manifold": [166, 219, 220, 221, 222, 375, 406, 686, 687, 688, 689, 690, 691, 692, 693, 694, 984, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "miscellan": [166, 227, 406, 1035, 1036, 1037, 1038, 1039, 1040, 1043], "multiclass": [166, 214, 269, 277, 278, 315, 388, 405, 406, 827, 828, 829, 949, 950, 951, 987, 988, 1012, 1019, 1036, 1039, 1040, 1041], "multioutput": [166, 280, 406, 830, 831, 832, 833, 988, 1035, 1036, 1037, 1038, 1039, 1042, 1043, 1044], "neural": [166, 170, 298, 406, 991, 992], "network": [166, 170, 298, 406, 991, 992], "semi": [166, 324, 325, 329, 330, 406, 1000], "supervis": [166, 324, 325, 329, 330, 406, 991, 1000, 1009, 1019], "work": [166, 350, 366, 378, 391, 406, 1021], "failur": [168, 976], "infer": 168, "causal": [168, 169], "simul": 168, "hourli": 168, "wage": [168, 169], "descript": 168, "incom": 168, "fulli": 168, "observ": [168, 1019, 1020], "lesson": [168, 169], "common": [169, 362, 393, 403, 415, 987], "pitfal": [169, 362], "matter": 169, "check": [169, 262, 315, 387, 403, 1035, 1036, 1037], "problem": [169, 412, 1002, 1003, 1012, 1017, 1019, 1020], "correl": [169, 172, 410, 987, 995], "numer": [169, 367, 381], "wrong": [169, 391], "depend": [170, 235, 239, 377, 994, 1027, 1040, 1041], "condit": [170, 317, 994], "expect": [170, 317, 994], "preprocessor": 170, "1": [170, 196, 318, 319, 320, 321, 322, 391, 1021, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "wai": [170, 377, 379, 391], "layer": [170, 299, 991], "perceptron": [170, 299, 666, 983, 991], "ic": [170, 994], "pdp": 170, "3d": 170, "accuraci": [171, 233, 351, 356, 987], "": [171, 310, 312, 382, 391, 414, 987], "multicollinear": 172, "breast": [172, 376], "cancer": [172, 376], "handl": [172, 406, 977], "scalabl": [175, 262, 316], "partit": 175, "baselin": [175, 199], "bayesian": [178, 179, 245, 260, 406, 983, 986], "recov": 178, "true": [178, 179], "margin": [178, 179, 211, 339, 343], "log": [178, 179, 987], "expans": 178, "sinusoid": 179, "cubic": 179, "l": 179, "elast": [180, 184, 983], "net": [180, 184, 983], "gram": 180, "huberregressor": [181, 647], "strong": 181, "signal": [183, 412, 1020], "automat": [183, 392, 983], "ard": [183, 983], "elasticnet": [183, 316, 644], "dens": 185, "lar": [186, 648, 983], "criteria": [187, 391, 983, 1003], "aic": [188, 983], "bic": [188, 250, 983], "criterion": [188, 317, 976, 1001], "coordin": 188, "descent": [188, 207, 213, 983, 1001], "angl": [188, 983], "penalti": [190, 210, 346], "sparsiti": [190, 196, 415, 1019], "multinomi": [191, 215, 983, 989], "One": [191, 213, 269, 318, 337, 411, 993, 1001], "rest": [191, 269], "joint": 193, "task": [193, 406, 983, 1006], "onli": [196, 216, 1038, 1040], "2": [196, 320, 1021, 1030, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "ordinari": [197, 983], "orthogon": [198, 983], "match": [198, 983], "pursuit": [198, 983], "poisson": [199, 217, 316, 317, 987], "loss": [199, 209, 316, 319, 321, 414, 987, 1044], "french": 199, "motor": 199, "third": [199, 235, 397], "parti": [199, 235, 397], "liabil": 199, "claim": [199, 217], "constant": [199, 977], "rank": [199, 406, 987], "takeawai": 199, "interpol": 200, "quantileregressor": [201, 668], "linearregress": [201, 655], "ransac": [202, 983], "l2": [203, 346], "purpos": [203, 353, 1007], "thi": [203, 1007], "solver": [206, 412, 983], "stochast": [207, 213, 220, 300, 983, 984, 992, 1001], "sgd": [208, 209, 210, 211, 212, 983, 1001], "convex": 209, "maximum": [211, 339, 992], "hyperplan": [211, 339, 340], "20newgroup": 214, "mnist": [215, 301], "theil": [216, 983], "sen": [216, 983], "y": [216, 391, 998, 1000], "direct": 216, "x": 216, "tweedi": [217, 987], "insur": 217, "definit": [217, 302, 994, 1037], "frequenc": [217, 1021], "sever": [217, 222], "gamma": [217, 321, 987], "pure": 217, "premium": 217, "tweedieregressor": [217, 678], "local": [220, 221, 289, 290, 984, 993], "isomap": [220, 221, 686, 984], "multidimension": 220, "t": [220, 225, 984], "techniqu": 221, "sphere": 222, "swiss": 224, "roll": [224, 381], "And": [224, 394], "hole": 224, "sne": [225, 984], "perplex": 225, "shape": [225, 1012], "anomali": 228, "object": [229, 255, 381, 391, 406, 976, 987, 1018, 1024], "confusionmatrixdisplai": [229, 695], "roccurvedisplai": [229, 700], "precisionrecalldisplai": [229, 698], "compact": 230, "rich": [230, 316], "html": [230, 381], "isoton": [231, 405, 406, 633, 634, 635, 978, 1035, 1036, 1037, 1039, 1041, 1042], "johnson": [232, 999], "lindenstrauss": [232, 999], "bound": 232, "theoret": 232, "explicit": 233, "map": [233, 309, 997], "rbf": [233, 337, 338, 342, 417, 620, 985, 1002, 1019], "python": [233, 367, 385, 401, 1005, 1006], "packag": [233, 1006, 1039], "svr": [234, 345, 905, 1002], "construct": 234, "metadata": [235, 321, 322, 351, 393, 398, 406, 1044, 1045], "rout": [235, 321, 322, 393, 398, 406, 1044, 1045], "router": 235, "consum": 235, "deprec": [235, 379, 406, 926, 1037], "default": [235, 290, 379], "chang": [235, 379, 394, 1011, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "complet": [237, 407], "kddcup99": 238, "sa": 238, "covertyp": [238, 374], "cardiotocographi": 238, "ablat": 238, "studi": 238, "advanc": [239, 377, 398], "With": [239, 1021], "togeth": [239, 269, 1017, 1020], "grid": [240, 258, 260, 268, 271, 976, 1016, 1021], "search": [240, 258, 260, 268, 271, 278, 392, 976, 1016, 1021], "over": 240, "roc": [241, 257, 269, 270, 315, 987], "svc": [241, 342, 346, 904, 1002], "introduc": 242, "set_output": [242, 320, 322, 381], "concentr": 245, "variat": [245, 986], "gmm": [247, 248], "densiti": [249, 287, 288, 296, 321, 413, 933, 1002], "best": [250, 380, 391], "confus": [254, 407, 987], "behavior": 255, "indic": 255, "mani": [255, 320, 367, 391], "cv": [255, 362], "tradeoff": [257, 987], "det": [257, 987], "refit": [258, 1012], "balanc": [259, 987], "statist": [260, 1006, 1015, 1018], "frequentist": 260, "practic": [260, 362, 380, 384, 984, 991, 1001, 1002, 1003], "equival": 260, "all": [260, 269, 319, 397, 1017, 1042, 1043, 1044], "take": 260, "home": 260, "messag": 260, "ratio": [263, 987], "pre": [263, 362, 392], "post": [263, 356], "respect": 263, "preval": 263, "cross_val_scor": [264, 821], "nest": [265, 408, 1016], "see": [265, 408], "also": [265, 383, 408], "signific": 266, "precis": [267, 987], "recal": [267, 987], "In": 267, "binari": [267, 281, 983, 987], "averag": [267, 269, 407, 414, 987], "micro": [267, 269], "each": [267, 272, 351, 976], "f1": 267, "receiv": [269, 270, 987], "oper": [269, 270, 378, 388, 406, 417, 987], "characterist": [269, 270, 987], "specif": [269, 377, 381, 401, 976, 1006, 1007], "ovr": 269, "macro": 269, "ovo": 269, "success": [271, 272, 317, 976], "halv": [271, 272, 317, 976], "candid": [272, 976], "amount": [272, 976], "resourc": [272, 367, 379, 976, 1005, 1010], "underfit": 274, "overfit": 274, "overview": [278, 386, 407, 993], "yeast": 278, "uci": 278, "logisticregress": [281, 656], "wrap": 281, "onevsrestclassifi": [281, 828, 988], "tsne": [283, 690], "1d": 288, "novelti": [289, 993, 1002], "lof": [289, 290], "neighborhood": [291, 292, 293, 990], "centroid": [294, 990], "mlpclassifi": [300, 856], "mlp": 301, "restrict": [302, 992], "boltzmann": [302, 992], "scaler": 305, "standardscal": [305, 879], "minmaxscal": [305, 869], "maxabsscal": [305, 868], "robustscal": [305, 877], "powertransform": [305, 875], "quantiletransform": [305, 876], "uniform": [305, 997], "kbinsdiscret": [306, 308, 864], "continu": [306, 379], "rescal": 310, "other": [311, 373, 391, 414, 1006, 1027], "intern": 312, "22": [315, 1037], "new": [315, 317, 318, 320, 321, 379, 391, 1005, 1027, 1028, 1030, 1031, 1032, 1033, 1034], "prune": [315, 356, 1003], "datafram": [315, 322, 391, 1044], "compat": [315, 379, 381, 403, 406], "auc": [315, 704], "now": [315, 318, 1037], "23": [316, 1038], "stabil": 316, "improv": [316, 317, 318, 319, 320, 322, 378, 379, 1030, 1031], "24": [317, 1039], "histgradientboost": [317, 322], "self": [317, 328, 1000], "sequentialfeatureselector": [317, 600], "polynomialcountsketch": [317, 638], "decisiontreeregressor": [317, 908], "keyword": [318, 1038, 1040], "argument": [318, 381, 1038, 1040], "more": [318, 377, 391, 401, 991], "flexibl": [318, 977], "stabl": 318, "histgradientboostingregressor": [319, 560], "get_feature_names_out": 319, "avail": [319, 976, 1024], "group": [319, 321, 411, 1011, 1020], "infrequ": [319, 321, 997], "onehotencod": [319, 872], "minibatchnmf": [319, 536], "version": [319, 373, 377, 383, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "bisectingkmean": [319, 441], "divid": 319, "enhanc": [320, 394, 1006, 1030, 1031, 1032, 1033, 1034], "faster": [320, 414], "parser": [320, 373], "fetch_openml": [320, 494], "experiment": [320, 383, 403, 406, 577, 578, 1043], "arrai": [320, 360, 388, 403, 406, 1012, 1044], "lineardiscriminantanalysi": [320, 547], "effici": [320, 322, 388], "targetencod": [321, 880], "model_select": [321, 406, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "validationcurvedisplai": [321, 818], "ordinalencod": [321, 873], "4": [322, 1027, 1035, 1044], "dtype": 322, "polar": 322, "add": [322, 391], "enrich": 322, "runtim": [322, 377], "most": 325, "uncertain": 325, "activ": 326, "threshold": 328, "linearsvc": [336, 899], "unbalanc": [340, 1002], "some": 341, "plai": 341, "percentil": 341, "sigmoid": [342, 405, 985, 1019], "case": [346, 983, 987], "tie": 347, "break": 347, "word": [351, 415, 1021], "strip": 351, "quantifi": [352, 987], "qualiti": [352, 987], "tfidfvector": [352, 353, 589], "lsa": 352, "top": [352, 987], "term": [352, 393, 415], "per": 352, "hashingvector": [352, 587], "featurehash": [353, 580], "dictvector": [353, 579], "special": 353, "cost": [356, 1003], "leav": [356, 411, 983], "understand": 360, "what": [360, 391], "i": [360, 384, 391, 411, 1011], "here": [360, 1021], "recommend": [362, 374, 1006], "inconsist": 362, "leakag": 362, "avoid": [362, 408], "dure": 362, "control": [362, 414, 991], "none": 362, "randomst": 362, "instanc": [362, 368], "repeat": [362, 408, 411], "call": [362, 378], "splitter": [362, 406], "subtleti": 362, "get": [362, 391, 392], "reproduc": [362, 384], "across": 362, "execut": [362, 391], "configur": [366, 367], "overhead": 366, "input": [366, 381, 403, 406, 407, 997], "tip": [366, 380, 387, 976, 984, 991, 1001, 1002, 1003], "trick": [366, 385, 387, 415], "algebra": [366, 388], "librari": [366, 367], "reshap": [366, 1018], "link": [366, 373, 987], "manag": [367, 397], "higher": 367, "joblib": [367, 385], "lower": 367, "openmp": [367, 380], "numpi": [367, 384], "scipi": [367, 1044], "oversubscript": 367, "spawn": 367, "too": 367, "thread": 367, "switch": 367, "environ": 367, "sklearn_assume_finit": 367, "sklearn_working_memori": 367, "sklearn_se": 367, "sklearn_tests_global_random_se": 367, "sklearn_skip_network_test": 367, "sklearn_run_float32_test": 367, "sklearn_enable_debug_cython_direct": 367, "sklearn_build_enable_debug_symbol": 367, "sklearn_pairwise_dist_chunk_s": 367, "sklearn_warnings_as_error": 367, "computation": 368, "bigger": 368, "stream": 368, "note": [368, 403, 411], "util": [372, 384, 388, 406, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 1021, 1024, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "svmlight": 373, "format": [373, 384, 391, 401, 988], "org": [373, 383, 1011], "repositori": 373, "arff": 373, "extern": [373, 1005, 1012, 1027, 1036], "olivetti": 374, "consider": 374, "wild": 374, "rcv1": 374, "kddcup": 374, "99": 374, "california": 374, "plant": 376, "linnerrud": 376, "wine": 376, "wisconsin": 376, "diagnost": 376, "instal": [377, 397], "nightli": 377, "tag": [377, 379, 381], "edit": 377, "meson": [377, 1045], "simplest": 377, "platform": [377, 387, 397], "instruct": 377, "window": [377, 397], "maco": 377, "compil": [377, 385], "conda": 377, "forg": 377, "homebrew": 377, "linux": [377, 391, 397], "system": 377, "freebsd": 377, "altern": [377, 976], "bug": [378, 379, 383, 1010, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "triag": 378, "issu": [378, 379], "curat": 378, "fruit": 378, "discuss": 378, "pr": [378, 383], "help": [378, 379, 391], "review": [378, 379, 387, 1021], "member": 378, "close": 378, "tough": 378, "typic": 378, "workflow": [378, 379], "contribut": [379, 391], "submit": 379, "report": [379, 384, 987], "request": [379, 383, 387, 391], "good": [379, 384], "video": [379, 1005], "git": 379, "pull": [379, 383, 387, 391], "checklist": [379, 383], "integr": 379, "ci": 379, "stall": 379, "unclaim": 379, "easi": 379, "want": 379, "github": 379, "action": 379, "coverag": [379, 387, 987], "write": 379, "matplotlib": 379, "monitor": 379, "tracker": [379, 1010], "maintain": [379, 383, 394, 401], "backward": 379, "guidelin": [379, 381], "read": 379, "exist": 379, "cython": [380, 385, 387], "convent": [380, 1012], "knowledg": 380, "eas": 380, "instanti": 381, "attribut": [381, 393, 976], "option": 381, "univers": 381, "your": [381, 384, 987], "own": [381, 391, 987], "templat": 381, "baseestim": [381, 421], "mixin": 381, "get_param": 381, "set_param": 381, "init": 381, "clone": [381, 432], "check_is_fit": [381, 971], "assert": 381, "guid": [382, 1023], "major": [383, 414, 1035, 1036], "minor": 383, "known": [383, 1035, 1036], "merg": 383, "web": 383, "site": 383, "craft": 384, "minim": [384, 1003, 1040, 1041], "provid": 384, "fail": 384, "comment": 384, "boil": 384, "down": 384, "script": 384, "someth": 384, "small": 384, "do": [384, 391], "NOT": 384, "unless": 384, "extrem": [384, 414], "necessari": 384, "markdown": 384, "make_regress": [384, 522], "make_classif": [384, 513], "make_blob": [384, 510], "optim": [385, 406, 976], "c": 385, "profil": 385, "usag": [385, 391, 398, 403, 405, 408, 414, 415, 983], "extens": [385, 397], "yep": 385, "gperftool": 385, "debugg": 385, "gdb": 385, "gprof": 385, "valgrind": [385, 387], "callgrind": 385, "kcachegrind": 385, "warm": 385, "restart": 385, "ax": 386, "saniti": 387, "preserv": 387, "fold": [387, 411], "unfold": 387, "outdat": 387, "diff": 387, "remot": 387, "track": [387, 408], "branch": 387, "pytest": 387, "alias": 387, "flag": 387, "standard": [387, 997], "repli": 387, "debug": 387, "arm64": 387, "x86_64": 387, "tool": [388, 391, 403, 406], "matric": [388, 406, 997], "warn": [388, 406], "except": [388, 406, 569, 570, 571, 572, 573, 574, 575, 576, 1039, 1043], "dispatch": 389, "frequent": 391, "ask": 391, "question": [391, 1010], "tabl": 391, "content": [391, 1012], "lot": 391, "peopl": [391, 1027, 1028, 1029, 1030], "pronounc": 391, "why": [391, 414], "pypi": 391, "deep": 391, "reinforc": 391, "Will": 391, "futur": 391, "graphic": [391, 992], "did": 391, "remov": [391, 416, 997, 1027], "hmm": 391, "gpu": 391, "need": 391, "doe": 391, "directli": 391, "plan": 391, "so": 391, "my": 391, "ani": 391, "attent": 391, "inclus": 391, "includ": 391, "should": 391, "save": 391, "export": 391, "deploi": 391, "bunch": [391, 914], "usabl": 391, "deal": [391, 406], "string": 391, "sometim": 391, "crash": 391, "freez": 391, "n_job": 391, "osx": [391, 397], "job": 391, "than": 391, "random_st": 391, "entir": 391, "start": 392, "processor": 392, "glossari": 393, "element": 393, "concept": [393, 983], "properti": 393, "role": 394, "technic": 394, "committe": 394, "propos": 394, "slep": 394, "latest": 397, "alpin": 397, "arch": 397, "debian": 397, "ubuntu": 397, "fedora": 397, "netbsd": 397, "macport": 397, "mac": 397, "anaconda": 397, "enthought": 397, "deploy": 397, "intel": 397, "winpython": 397, "troubleshoot": 397, "caus": 397, "unweight": 398, "interfac": [398, 406], "statu": 398, "persist": 401, "serial": 401, "secur": 401, "skop": 401, "interoper": [401, 1006], "pytorch": 403, "mp": 403, "devic": 403, "mathemat": [404, 406, 407, 414, 979, 981, 990, 991, 994, 1001, 1002, 1003], "formul": [404, 407, 414, 981, 990, 991, 1001, 1002, 1003], "sklearn": [406, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "compos": [406, 462, 463, 464, 465, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "cross_decomposit": [406, 480, 481, 482, 483, 1037, 1039, 1041, 1043], "loader": 406, "discriminant_analysi": [406, 547, 548, 1035, 1036, 1039, 1041, 1042, 1043], "dummi": [406, 549, 550, 987, 1035, 1036, 1037, 1040, 1041, 1045], "feature_extract": [406, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "feature_select": [406, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "gaussian_process": [406, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "kernel_approxim": [406, 636, 637, 638, 639, 640, 1037, 1039, 1040, 1041, 1042, 1043], "kernel_ridg": [406, 641, 1044], "linear_model": [406, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "classic": 406, "glm": 406, "naive_bay": [406, 834, 835, 836, 837, 838, 1035, 1037, 1038, 1039, 1040, 1042, 1043], "neural_network": [406, 855, 856, 857, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "random_project": [406, 891, 892, 893, 1041], "semi_supervis": [406, 894, 895, 896, 1037, 1038, 1039, 1043], "discoveri": [406, 927, 928, 929], "checker": 406, "recent": 406, "low": [407, 414, 416], "mini": [407, 412], "batch": [407, 412], "assign": 407, "featureagglomer": [407, 443], "hierarchi": 407, "ad": 407, "connect": [407, 415, 1020], "consumpt": 407, "larg": [407, 415], "size": [407, 414], "reachabl": 407, "rand": 407, "index": [407, 942], "advantag": 407, "drawback": 407, "homogen": 407, "fowlk": 407, "mallow": 407, "calinski": 407, "harabasz": 407, "davi": 407, "bouldin": 407, "conting": 407, "pair": 407, "access": 408, "featureunion": [408, 858], "columntransform": [408, 462], "shrunk": 409, "oracl": 409, "plscanon": [410, 481], "plssvd": [410, 483], "plsregress": [410, 482], "held": 411, "cross_valid": [411, 822], "obtain": 411, "d": [411, 990], "loo": 411, "p": [411, 1011], "lpo": 411, "shuffl": [411, 961], "stratif": 411, "stratifi": 411, "stratifiedgroupkfold": [411, 814], "predefin": [411, 987], "decompos": 412, "exact": 412, "sparsepca": [412, 541], "kpca": 412, "choic": [412, 990], "truncat": 412, "semant": 412, "nnmf": 412, "frobeniu": 412, "norm": 412, "beta": 412, "diverg": 412, "gradientboostingclassifi": [414, 557], "histgradientboostingclassifi": [414, 559], "gradientboostingregressor": [414, 558], "addit": [414, 979], "rate": 414, "subsampl": 414, "hard": 414, "soft": 414, "dict": 415, "tf": 415, "idf": 415, "decod": 415, "applic": [415, 1020], "corpu": 415, "selectfrommodel": [416, 595], "biclustermixin": 422, "classnameprefixfeaturesoutmixin": 423, "classifiermixin": 424, "clustermixin": 425, "densitymixin": 426, "metaestimatormixin": 427, "onetoonefeaturemixin": 428, "outliermixin": 429, "regressormixin": 430, "transformermixin": 431, "is_classifi": 433, "is_regressor": 434, "calibratedclassifiercv": 435, "calibrationdisplai": 436, "from_estim": [436, 629, 630, 695, 696, 698, 699, 700, 802, 818], "calibration_curv": 437, "affinitypropag": 438, "agglomerativeclust": 439, "spectralclust": 450, "spectralcoclust": 451, "affinity_propag": 452, "cluster_optics_dbscan": 453, "cluster_optics_xi": 454, "compute_optics_graph": 455, "estimate_bandwidth": 456, "k_mean": 457, "kmeans_plusplu": 458, "mean_shift": 459, "spectral_clust": 460, "ward_tre": 461, "transformedtargetregressor": 463, "make_column_selector": 464, "make_column_transform": 465, "config_context": 466, "ellipticenvelop": 467, "empiricalcovari": 468, "graphicallasso": 469, "graphicallassocv": 470, "mincovdet": 472, "shrunkcovari": 474, "empirical_covari": 475, "graphical_lasso": 476, "ledoit_wolf": 477, "ledoit_wolf_shrinkag": 478, "shrunk_covari": 479, "clear_data_hom": 484, "dump_svmlight_fil": 485, "fetch_20newsgroup": 486, "fetch_20newsgroups_vector": 487, "fetch_california_h": 488, "fetch_covtyp": 489, "fetch_kddcup99": 490, "fetch_lfw_pair": 491, "fetch_lfw_peopl": 492, "fetch_olivetti_fac": 493, "fetch_rcv1": 495, "fetch_species_distribut": 496, "get_data_hom": 497, "load_breast_canc": 498, "load_diabet": 499, "load_digit": 500, "load_fil": 501, "load_iri": 502, "load_linnerud": 503, "load_sample_imag": [504, 505], "load_svmlight_fil": [506, 507], "load_win": 508, "make_biclust": 509, "make_checkerboard": 511, "make_circl": 512, "make_friedman1": 514, "make_friedman2": 515, "make_friedman3": 516, "make_gaussian_quantil": 517, "make_hastie_10_2": 518, "make_low_rank_matrix": 519, "make_moon": 520, "make_multilabel_classif": 521, "make_s_curv": 523, "make_sparse_coded_sign": 524, "make_sparse_spd_matrix": 525, "make_sparse_uncorrel": 526, "make_spd_matrix": 527, "make_swiss_rol": 528, "dictionarylearn": 529, "factoranalysi": 530, "incrementalpca": 532, "latentdirichletalloc": 534, "minibatchdictionarylearn": 535, "sparsecod": 540, "truncatedsvd": 542, "dict_learn": 543, "dict_learning_onlin": 544, "non_negative_factor": 545, "sparse_encod": 546, "quadraticdiscriminantanalysi": 548, "dummyclassifi": 549, "dummyregressor": 550, "adaboostregressor": 552, "baggingclassifi": 553, "baggingregressor": 554, "extratreesclassifi": 555, "extratreesregressor": 556, "randomforestclassifi": 562, "randomforestregressor": 563, "randomtreesembed": 564, "stackingclassifi": 565, "stackingregressor": 566, "votingregressor": 568, "convergencewarn": 569, "dataconversionwarn": 570, "datadimensionalitywarn": 571, "efficiencywarn": 572, "fitfailedwarn": 573, "inconsistentversionwarn": 574, "notfittederror": 575, "undefinedmetricwarn": 576, "enable_halving_search_cv": 577, "enable_iterative_imput": 578, "patchextractor": 581, "extract_patches_2d": 582, "grid_to_graph": 583, "img_to_graph": 584, "reconstruct_from_patches_2d": 585, "countvector": 586, "tfidftransform": 588, "genericunivariateselect": 590, "rfe": 591, "rfecv": 592, "selectfdr": 593, "selectfpr": 594, "selectfw": 596, "selectkbest": 597, "selectpercentil": 598, "selectormixin": 599, "variancethreshold": 601, "chi2": 602, "f_classif": 603, "f_regress": 604, "mutual_info_classif": 605, "mutual_info_regress": 606, "r_regress": 607, "gaussianprocessclassifi": 608, "gaussianprocessregressor": 609, "compoundkernel": 610, "constantkernel": 611, "dotproduct": 612, "expsinesquar": 613, "exponenti": 614, "matern": 617, "pairwisekernel": 618, "rationalquadrat": 621, "sum": 622, "whitekernel": 623, "get_config": 624, "knnimput": 626, "missingind": 627, "simpleimput": 628, "decisionboundarydisplai": 629, "partialdependencedisplai": 630, "partial_depend": 631, "permutation_import": 632, "isotonicregress": 633, "check_increas": 634, "isotonic_regress": 635, "additivechi2sampl": 636, "nystroem": [637, 979], "rbfsampler": 639, "skewedchi2sampl": 640, "kernelridg": 641, "ardregress": 642, "bayesianridg": 643, "elasticnetcv": 645, "gammaregressor": 646, "larscv": 649, "lassocv": 651, "lassolar": 652, "lassolarscv": 653, "lassolars": 654, "logisticregressioncv": 657, "multitaskelasticnet": 658, "multitaskelasticnetcv": 659, "multitasklasso": 660, "multitasklassocv": 661, "orthogonalmatchingpursuit": 662, "orthogonalmatchingpursuitcv": 663, "passiveaggressiveclassifi": 664, "passiveaggressiveregressor": 665, "poissonregressor": 667, "ransacregressor": 669, "ridgecv": 671, "ridgeclassifi": 672, "ridgeclassifiercv": 673, "sgdclassifi": 674, "sgdoneclasssvm": 675, "sgdregressor": 676, "theilsenregressor": 677, "enet_path": 679, "lars_path": 680, "lars_path_gram": 681, "lasso_path": 682, "orthogonal_mp": 683, "orthogonal_mp_gram": 684, "ridge_regress": 685, "locallylinearembed": 687, "md": [688, 984], "spectralembed": 689, "locally_linear_embed": 691, "smacof": 692, "spectral_embed": 693, "trustworthi": 694, "from_predict": [695, 698, 699, 700], "detcurvedisplai": 696, "distancemetr": 697, "predictionerrordisplai": 699, "accuracy_scor": 701, "adjusted_mutual_info_scor": 702, "adjusted_rand_scor": 703, "average_precision_scor": 705, "balanced_accuracy_scor": 706, "brier_score_loss": 707, "calinski_harabasz_scor": 708, "check_scor": 709, "class_likelihood_ratio": 710, "classification_report": 711, "contingency_matrix": 712, "pair_confusion_matrix": 713, "cohen_kappa_scor": 714, "completeness_scor": 715, "confusion_matrix": 716, "consensus_scor": 717, "coverage_error": 718, "d2_absolute_error_scor": 719, "d2_pinball_scor": 720, "d2_tweedie_scor": 721, "davies_bouldin_scor": 722, "dcg_score": 723, "det_curv": 724, "explained_variance_scor": 725, "f1_score": 726, "fbeta_scor": 727, "fowlkes_mallows_scor": 728, "get_scor": 729, "get_scorer_nam": 730, "hamming_loss": 731, "hinge_loss": 732, "homogeneity_completeness_v_measur": 733, "homogeneity_scor": 734, "jaccard_scor": 735, "label_ranking_average_precision_scor": 736, "label_ranking_loss": 737, "log_loss": 738, "make_scor": 739, "matthews_corrcoef": 740, "max_error": 741, "mean_absolute_error": 742, "mean_absolute_percentage_error": 743, "mean_gamma_devi": 744, "mean_pinball_loss": 745, "mean_poisson_devi": 746, "mean_squared_error": 747, "mean_squared_log_error": 748, "mean_tweedie_devi": 749, "median_absolute_error": 750, "multilabel_confusion_matrix": 751, "mutual_info_scor": 752, "ndcg_score": 753, "normalized_mutual_info_scor": 754, "additive_chi2_kernel": 755, "chi2_kernel": 756, "cosine_dist": 757, "cosine_similar": 758, "distance_metr": 759, "euclidean_dist": 760, "haversine_dist": 761, "kernel_metr": 762, "laplacian_kernel": 763, "linear_kernel": 764, "manhattan_dist": 765, "nan_euclidean_dist": 766, "paired_cosine_dist": 767, "paired_dist": 768, "paired_euclidean_dist": 769, "paired_manhattan_dist": 770, "pairwise_kernel": 771, "polynomial_kernel": 772, "rbf_kernel": 773, "sigmoid_kernel": 774, "pairwise_dist": 775, "pairwise_distances_argmin": 776, "pairwise_distances_argmin_min": 777, "pairwise_distances_chunk": 778, "precision_recall_curv": 779, "precision_recall_fscore_support": 780, "precision_scor": 781, "r2_score": 782, "rand_scor": 783, "recall_scor": 784, "roc_auc_scor": 785, "roc_curv": 786, "root_mean_squared_error": 787, "root_mean_squared_log_error": 788, "silhouette_sampl": 789, "silhouette_scor": 790, "top_k_accuracy_scor": 791, "v_measure_scor": 792, "zero_one_loss": 793, "bayesiangaussianmixtur": 794, "gaussianmixtur": 795, "groupkfold": 797, "groupshufflesplit": 798, "halvinggridsearchcv": 799, "halvingrandomsearchcv": 800, "kfold": 801, "learningcurvedisplai": 802, "leaveonegroupout": 803, "leaveoneout": 804, "leavepgroupsout": 805, "leavepout": 806, "parametergrid": 807, "parametersampl": 808, "predefinedsplit": 809, "randomizedsearchcv": 810, "repeatedkfold": 811, "repeatedstratifiedkfold": 812, "shufflesplit": 813, "stratifiedkfold": 815, "stratifiedshufflesplit": 816, "timeseriessplit": 817, "check_cv": 819, "cross_val_predict": 820, "learning_curv": 823, "permutation_test_scor": 824, "train_test_split": 825, "validation_curv": 826, "onevsoneclassifi": [827, 988], "outputcodeclassifi": [829, 988], "classifierchain": [830, 988], "multioutputclassifi": [831, 988], "multioutputregressor": [832, 988], "regressorchain": [833, 988], "bernoullinb": 834, "categoricalnb": 835, "complementnb": 836, "gaussiannb": 837, "multinomialnb": 838, "balltre": [839, 990], "kdtree": [840, 990], "kneighborsclassifi": 841, "kneighborsregressor": 842, "kneighborstransform": 843, "kerneldens": 844, "localoutlierfactor": 845, "nearestcentroid": 846, "nearestneighbor": 847, "neighborhoodcomponentsanalysi": 848, "radiusneighborsclassifi": 849, "radiusneighborsregressor": 850, "radiusneighborstransform": 851, "kneighbors_graph": 852, "radius_neighbors_graph": 853, "sort_graph_by_row_valu": 854, "bernoullirbm": 855, "mlpregressor": 857, "make_pipelin": 860, "make_union": 861, "binar": [862, 882, 997, 998], "functiontransform": 863, "kernelcenter": 865, "labelbinar": [866, 998], "labelencod": 867, "multilabelbinar": [870, 998], "polynomialfeatur": 874, "splinetransform": 878, "add_dummy_featur": 881, "label_binar": 883, "maxabs_scal": 884, "minmax_scal": 885, "power_transform": 887, "quantile_transform": 888, "robust_scal": 889, "gaussianrandomproject": 891, "sparserandomproject": 892, "johnson_lindenstrauss_min_dim": 893, "labelpropag": 894, "labelspread": 895, "selftrainingclassifi": 896, "set_config": 897, "show_vers": 898, "linearsvr": 900, "nusvc": 901, "nusvr": 902, "oneclasssvm": 903, "l1_min_c": 906, "decisiontreeclassifi": 907, "extratreeclassifi": 909, "extratreeregressor": 910, "export_graphviz": 911, "export_text": 912, "plot_tre": 913, "_safe_index": 915, "arrayfunc": 916, "min_po": 916, "as_float_arrai": 917, "assert_all_finit": 918, "check_x_i": 919, "check_arrai": 920, "check_consistent_length": 921, "check_random_st": 922, "check_scalar": 923, "class_weight": [924, 925], "compute_class_weight": 924, "compute_sample_weight": 925, "all_displai": 927, "all_estim": 928, "all_funct": 929, "estimator_check": [930, 931], "check_estim": 930, "parametrize_with_check": 931, "estimator_html_repr": 932, "extmath": [933, 934, 935, 936, 937, 938], "fast_logdet": 934, "randomized_range_find": 935, "randomized_svd": 936, "safe_sparse_dot": 937, "weighted_mod": 938, "gen_batch": 939, "gen_even_slic": 940, "single_source_shortest_path_length": 941, "metadata_rout": [943, 944, 945, 946, 947], "metadatarequest": 943, "metadatarout": 944, "methodmap": 945, "get_routing_for_object": 946, "process_rout": 947, "metaestim": 948, "available_if": 948, "is_multilabel": 949, "type_of_target": 950, "unique_label": 951, "murmurhash3_32": 952, "delai": 954, "parallel_backend": 955, "sample_without_replac": 956, "register_parallel_backend": 957, "resampl": 958, "safe_mask": 959, "safe_sqr": 960, "sparsefunc": [962, 963, 964, 965, 966, 967, 968, 1036], "incr_mean_variance_axi": 962, "inplace_column_scal": 963, "inplace_csr_column_scal": 964, "inplace_row_scal": 965, "inplace_swap_column": 966, "inplace_swap_row": 967, "mean_variance_axi": 968, "sparsefuncs_fast": [969, 970], "inplace_csr_row_normalize_l1": 969, "inplace_csr_row_normalize_l2": 970, "check_memori": 972, "check_symmetr": 973, "column_or_1d": 974, "has_fit_paramet": 975, "exhaust": 976, "min_resourc": 976, "aggress": [976, 983], "cv_results_": 976, "brute": [976, 990], "forc": [976, 990], "keep": 977, "mark": 977, "nan": 977, "chi": [979, 985], "skew": 979, "tensor": 979, "sketch": 979, "detail": [979, 1001, 1002], "omp": 983, "passiv": 983, "scenario": 983, "trade": 983, "off": 983, "which": 983, "consensu": 983, "median": [983, 987], "huber": 983, "extend": 983, "introduct": [984, 1012], "modifi": 984, "hessian": 984, "eigenmap": 984, "tangent": 984, "align": 984, "cosin": 985, "laplacian": 985, "pro": 986, "con": 986, "rule": 987, "cohen": 987, "kappa": 987, "ham": 987, "jaccard": 987, "hing": 987, "matthew": 987, "zero": 987, "brier": 987, "discount": 987, "cumul": 987, "gain": 987, "r\u00b2": 987, "absolut": 987, "logarithm": 987, "percentag": 987, "explain": 987, "pinbal": 987, "d\u00b2": 987, "complement": 989, "bernoulli": [989, 992], "unsupervis": [990, 992, 1004, 1020, 1022], "find": 990, "ball": 990, "leaf_siz": 990, "shrunken": 990, "warm_start": 991, "parametr": 992, "up": 993, "ellipt": 993, "envelop": 993, "isol": 993, "outlin": 995, "mislead": 995, "strongli": 995, "rang": 997, "whiten": 997, "bin": 997, "lemma": 999, "unlabel": 1000, "entri": 1000, "id3": 1003, "c4": 1003, "5": [1003, 1027, 1045], "c5": 1003, "cart": 1003, "talk": 1005, "scientif": [1005, 1015], "framework": 1006, "domain": 1006, "translat": 1006, "roadmap": 1007, "statement": 1007, "2018": 1007, "architectur": 1007, "goal": 1007, "subpackag": 1007, "mail": 1010, "user": [1010, 1023], "gitter": 1010, "who": 1011, "j": 1011, "morgan": 1011, "spotifi": 1011, "inria": 1011, "betawork": 1011, "hug": 1011, "evernot": 1011, "t\u00e9l\u00e9com": 1011, "paristech": 1011, "book": 1011, "com": 1011, "aweb": 1011, "yhat": 1011, "rangespan": 1011, "birchbox": 1011, "bestofmedia": 1011, "phimeca": 1011, "howaboutw": 1011, "peerindex": 1011, "datarobot": 1011, "okcupid": 1011, "love": 1011, "publica": 1011, "machinali": 1011, "solido": 1011, "infonea": 1011, "dataiku": 1011, "otto": 1011, "zopa": 1011, "mar": 1011, "bnp": 1011, "pariba": 1011, "cardif": 1011, "section": 1012, "cast": 1012, "updat": [1012, 1037], "right": 1014, "put": 1017, "open": 1017, "ship": 1018, "would": 1018, "high": 1019, "solv": [1019, 1020], "vocabulari": 1019, "curs": 1019, "iris": 1019, "same": 1019, "seek": 1020, "constrain": 1020, "inverse_transform": 1020, "setup": 1021, "token": 1021, "occurr": 1021, "languag": 1021, "identif": 1021, "sentiment": 1021, "movi": 1021, "cli": 1021, "where": 1021, "older": 1027, "12": 1027, "changelog": [1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "11": 1027, "9": 1027, "8": 1027, "7": 1027, "6": 1027, "modul": [1027, 1035, 1036, 1042, 1043, 1044, 1045], "misc": 1027, "earlier": 1027, "13": 1028, "14": 1029, "15": 1030, "16": 1031, "17": 1032, "18": 1033, "19": 1034, "21": 1036, "post1": 1037, "websit": 1037, "clear": 1037, "public": 1037, "futurewarn": 1037, "enforc": [1038, 1040], "privat": 1044}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 60}, "alltitles": {"About us": [[0, "about-us"]], "History": [[0, "history"]], "Governance": [[0, "governance"]], "Authors": [[0, "authors"], [1027, "authors"], [1027, "id20"]], "Documentation Team": [[0, "documentation-team"]], "Contributor Experience Team": [[0, "contributor-experience-team"], [394, "contributor-experience-team"]], "Communication Team": [[0, "communication-team"]], "Emeritus Core Developers": [[0, "emeritus-core-developers"]], "Emeritus Communication Team": [[0, "emeritus-communication-team"]], "Emeritus Contributor Experience Team": [[0, "emeritus-contributor-experience-team"]], "Citing scikit-learn": [[0, "citing-scikit-learn"]], "Artwork": [[0, "artwork"]], "Funding": [[0, "funding"]], "Past Sponsors": [[0, "past-sponsors"]], "Sprints": [[0, "sprints"]], "Donating to the project": [[0, "donating-to-the-project"]], "Infrastructure support": [[0, "infrastructure-support"]], "Examples based on real world datasets": [[3, "examples-based-on-real-world-datasets"], [166, "examples-based-on-real-world-datasets"]], "Time-related feature engineering": [[4, "time-related-feature-engineering"]], "Data exploration on the Bike Sharing Demand dataset": [[4, "data-exploration-on-the-bike-sharing-demand-dataset"]], "Time-based cross-validation": [[4, "time-based-cross-validation"]], "Gradient Boosting": [[4, "gradient-boosting"]], "Naive linear regression": [[4, "naive-linear-regression"]], "Time-steps as categories": [[4, "time-steps-as-categories"]], "Trigonometric features": [[4, "trigonometric-features"]], "Periodic spline features": [[4, "periodic-spline-features"]], "Qualitative analysis of the impact of features on linear model predictions": [[4, "qualitative-analysis-of-the-impact-of-features-on-linear-model-predictions"]], "Modeling pairwise interactions with splines and polynomial features": [[4, "modeling-pairwise-interactions-with-splines-and-polynomial-features"]], "Modeling non-linear feature interactions with kernels": [[4, "modeling-non-linear-feature-interactions-with-kernels"]], "Concluding remarks": [[4, "concluding-remarks"], [224, "concluding-remarks"]], "Image denoising using kernel PCA": [[5, "image-denoising-using-kernel-pca"]], "References": [[5, null], [11, "references"], [26, "references"], [28, "references"], [82, "references"], [115, "references"], [175, "references"], [183, "references"], [187, null], [260, null], [278, "references"], [296, "references"], [374, null], [374, null], [374, null], [374, null], [407, null], [407, null], [407, null], [407, null], [407, null], [407, null], [407, null], [407, null], [407, null], [414, null], [414, null], [414, null], [414, null], [414, null], [414, null], [414, null], [414, null], [415, null], [417, "references"], [977, "references"], [977, null], [994, null], [997, null], [997, null], [1000, null], [1000, null]], "Load the dataset via OpenML": [[5, "load-the-dataset-via-openml"]], "Learn the PCA basis": [[5, "learn-the-pca-basis"]], "Reconstruct and denoise test images": [[5, "reconstruct-and-denoise-test-images"]], "Faces recognition example using eigenfaces and SVMs": [[6, "faces-recognition-example-using-eigenfaces-and-svms"]], "Model Complexity Influence": [[7, "model-complexity-influence"]], "Load the data": [[7, "load-the-data"], [51, "load-the-data"], [126, "load-the-data"], [286, "load-the-data"]], "Benchmark influence": [[7, "benchmark-influence"]], "Choose parameters": [[7, "choose-parameters"]], "Run the code and plot the results": [[7, "run-the-code-and-plot-the-results"]], "Conclusion": [[7, "conclusion"], [13, "conclusion"], [188, "conclusion"], [278, "conclusion"], [286, "conclusion"], [312, "conclusion"], [342, "conclusion"]], "Out-of-core classification of text documents": [[8, "out-of-core-classification-of-text-documents"]], "Reuters Dataset related routines": [[8, "reuters-dataset-related-routines"]], "Main": [[8, "main"]], "Plot results": [[8, "plot-results"], [50, "plot-results"], [79, "plot-results"], [97, "plot-results"], [98, "plot-results"], [118, "plot-results"], [281, "plot-results"], [290, "plot-results"]], "Outlier detection on a real data set": [[9, "outlier-detection-on-a-real-data-set"]], "First example": [[9, "first-example"]], "Second example": [[9, "second-example"]], "Prediction Latency": [[10, "prediction-latency"], [366, "prediction-latency"]], "Benchmark and plot helper functions": [[10, "benchmark-and-plot-helper-functions"]], "Benchmark bulk/atomic prediction speed for various regressors": [[10, "benchmark-bulk-atomic-prediction-speed-for-various-regressors"]], "Benchmark n_features influence on prediction speed": [[10, "benchmark-n-features-influence-on-prediction-speed"]], "Benchmark throughput": [[10, "benchmark-throughput"]], "Species distribution modeling": [[11, "species-distribution-modeling"]], "Visualizing the stock market structure": [[12, "visualizing-the-stock-market-structure"]], "Retrieve the data from Internet": [[12, "retrieve-the-data-from-internet"]], "Learning a graph structure": [[12, "learning-a-graph-structure"]], "Clustering using affinity propagation": [[12, "clustering-using-affinity-propagation"]], "Embedding in 2D space": [[12, "embedding-in-2d-space"]], "Visualization": [[12, "visualization"], [338, "visualization"], [406, "visualization"]], "Lagged features for time series forecasting": [[13, "lagged-features-for-time-series-forecasting"]], "Analyzing the Bike Sharing Demand dataset": [[13, "analyzing-the-bike-sharing-demand-dataset"]], "Generating pandas-engineered lagged features": [[13, "generating-pandas-engineered-lagged-features"]], "Naive evaluation of the next hour bike demand regression": [[13, "naive-evaluation-of-the-next-hour-bike-demand-regression"]], "Proper next hour forecasting evaluation": [[13, "proper-next-hour-forecasting-evaluation"]], "Modeling predictive uncertainty via quantile regression": [[13, "modeling-predictive-uncertainty-via-quantile-regression"]], "A qualitative look at the predictions": [[13, "a-qualitative-look-at-the-predictions"]], "Compressive sensing: tomography reconstruction with L1 prior (Lasso)": [[14, "compressive-sensing-tomography-reconstruction-with-l1-prior-lasso"]], "Topic extraction with Non-negative Matrix Factorization and Latent Dirichlet Allocation": [[15, "topic-extraction-with-non-negative-matrix-factorization-and-latent-dirichlet-allocation"]], "Computation times": [[16, "computation-times"], [23, "computation-times"], [29, "computation-times"], [36, "computation-times"], [69, "computation-times"], [77, "computation-times"], [84, "computation-times"], [88, "computation-times"], [94, "computation-times"], [107, "computation-times"], [109, "computation-times"], [136, "computation-times"], [141, "computation-times"], [149, "computation-times"], [161, "computation-times"], [165, "computation-times"], [173, "computation-times"], [176, "computation-times"], [218, "computation-times"], [226, "computation-times"], [243, "computation-times"], [252, "computation-times"], [276, "computation-times"], [279, "computation-times"], [282, "computation-times"], [297, "computation-times"], [303, "computation-times"], [313, "computation-times"], [323, "computation-times"], [331, "computation-times"], [332, "computation-times"], [349, "computation-times"], [354, "computation-times"], [361, "computation-times"], [1008, "computation-times"]], "Libsvm GUI": [[17, "libsvm-gui"]], "Wikipedia principal eigenvector": [[18, "wikipedia-principal-eigenvector"]], "Download data, if not already on disk": [[18, "download-data-if-not-already-on-disk"]], "Loading the redirect files": [[18, "loading-the-redirect-files"]], "Computing the Adjacency matrix": [[18, "computing-the-adjacency-matrix"]], "Computing Principal Singular Vector using Randomized SVD": [[18, "computing-principal-singular-vector-using-randomized-svd"]], "Computing Centrality scores": [[18, "computing-centrality-scores"]], "Biclustering": [[19, "biclustering"], [166, "biclustering"], [375, "biclustering"], [404, "biclustering"]], "Biclustering documents with the Spectral Co-clustering algorithm": [[20, "biclustering-documents-with-the-spectral-co-clustering-algorithm"]], "A demo of the Spectral Biclustering algorithm": [[21, "a-demo-of-the-spectral-biclustering-algorithm"]], "Generate sample data": [[21, "generate-sample-data"], [39, "generate-sample-data"], [56, "generate-sample-data"], [64, "generate-sample-data"], [79, "generate-sample-data"], [97, "generate-sample-data"], [98, "generate-sample-data"], [144, "generate-sample-data"], [234, "generate-sample-data"], [273, "generate-sample-data"], [295, "generate-sample-data"], [345, "generate-sample-data"]], "Fitting SpectralBiclustering": [[21, "fitting-spectralbiclustering"]], "Plotting results": [[21, "plotting-results"]], "A demo of the Spectral Co-Clustering algorithm": [[22, "a-demo-of-the-spectral-co-clustering-algorithm"]], "Calibration": [[24, "calibration"], [166, "calibration"]], "Probability calibration of classifiers": [[25, "probability-calibration-of-classifiers"]], "Generate synthetic dataset": [[25, "generate-synthetic-dataset"], [178, "generate-synthetic-dataset"], [178, "id1"], [183, "generate-synthetic-dataset"]], "Gaussian Naive-Bayes": [[25, "gaussian-naive-bayes"]], "Plot data and the predicted probabilities": [[25, "plot-data-and-the-predicted-probabilities"]], "Probability Calibration curves": [[26, "probability-calibration-curves"]], "Dataset": [[26, "dataset"], [28, "dataset"], [188, "dataset"], [266, "dataset"]], "Calibration curves": [[26, "calibration-curves"], [28, "calibration-curves"], [405, "calibration-curves"]], "Gaussian Naive Bayes": [[26, "gaussian-naive-bayes"], [989, "gaussian-naive-bayes"]], "Linear support vector classifier": [[26, "linear-support-vector-classifier"]], "Summary": [[26, "summary"], [123, "summary"], [353, "summary"]], "Probability Calibration for 3-class classification": [[27, "probability-calibration-for-3-class-classification"]], "Data": [[27, "data"]], "Fitting and calibration": [[27, "fitting-and-calibration"]], "Compare probabilities": [[27, "compare-probabilities"]], "Comparison of Calibration of Classifiers": [[28, "comparison-of-calibration-of-classifiers"]], "Classification": [[30, "classification"], [33, "classification"], [159, "classification"], [166, "classification"], [414, "classification"], [414, "id10"], [983, "classification"], [990, "id4"], [991, "classification"], [1001, "classification"], [1002, "classification"], [1003, "classification"], [1019, "classification"]], "Plot classification probability": [[31, "plot-classification-probability"]], "Classifier comparison": [[32, "classifier-comparison"]], "Recognizing hand-written digits": [[33, "recognizing-hand-written-digits"]], "Digits dataset": [[33, "digits-dataset"]], "Normal, Ledoit-Wolf and OAS Linear Discriminant Analysis for classification": [[34, "normal-ledoit-wolf-and-oas-linear-discriminant-analysis-for-classification"]], "Linear and Quadratic Discriminant Analysis with covariance ellipsoid": [[35, "linear-and-quadratic-discriminant-analysis-with-covariance-ellipsoid"]], "Data generation": [[35, "data-generation"], [50, "data-generation"], [58, "data-generation"], [128, "data-generation"], [147, "data-generation"], [157, "data-generation"], [250, "data-generation"], [325, "data-generation"], [346, "data-generation"]], "Plotting Functions": [[35, "plotting-functions"]], "Comparison of LDA and QDA": [[35, "comparison-of-lda-and-qda"]], "Clustering": [[37, "clustering"], [166, "clustering"], [407, "clustering"]], "Adjustment for chance in clustering performance evaluation": [[38, "adjustment-for-chance-in-clustering-performance-evaluation"]], "Defining the list of metrics to evaluate": [[38, "defining-the-list-of-metrics-to-evaluate"]], "First experiment: fixed ground truth labels and growing number of clusters": [[38, "first-experiment-fixed-ground-truth-labels-and-growing-number-of-clusters"]], "Second experiment: varying number of classes and clusters": [[38, "second-experiment-varying-number-of-classes-and-clusters"]], "Demo of affinity propagation clustering algorithm": [[39, "demo-of-affinity-propagation-clustering-algorithm"]], "Compute Affinity Propagation": [[39, "compute-affinity-propagation"]], "Plot result": [[39, "plot-result"], [64, "plot-result"], [68, "plot-result"], [68, "id2"]], "Agglomerative clustering with and without structure": [[40, "agglomerative-clustering-with-and-without-structure"]], "Agglomerative clustering with different metrics": [[41, "agglomerative-clustering-with-different-metrics"]], "Plot Hierarchical Clustering Dendrogram": [[42, "plot-hierarchical-clustering-dendrogram"]], "Compare BIRCH and MiniBatchKMeans": [[43, "compare-birch-and-minibatchkmeans"]], "Bisecting K-Means and Regular K-Means Performance Comparison": [[44, "bisecting-k-means-and-regular-k-means-performance-comparison"]], "Comparing different clustering algorithms on toy datasets": [[45, "comparing-different-clustering-algorithms-on-toy-datasets"]], "K-means Clustering": [[46, "k-means-clustering"]], "Segmenting the picture of greek coins in regions": [[47, "segmenting-the-picture-of-greek-coins-in-regions"]], "A demo of structured Ward hierarchical clustering on an image of coins": [[48, "a-demo-of-structured-ward-hierarchical-clustering-on-an-image-of-coins"]], "Generate data": [[48, "generate-data"], [68, "generate-data"], [81, "generate-data"], [193, "generate-data"], [302, "generate-data"]], "Define structure of the data": [[48, "define-structure-of-the-data"]], "Compute clustering": [[48, "compute-clustering"], [68, "compute-clustering"], [68, "id1"]], "Plot the results on an image": [[48, "plot-the-results-on-an-image"]], "Color Quantization using K-Means": [[49, "color-quantization-using-k-means"]], "Demo of DBSCAN clustering algorithm": [[50, "demo-of-dbscan-clustering-algorithm"]], "Compute DBSCAN": [[50, "compute-dbscan"]], "Online learning of a dictionary of parts of faces": [[51, "online-learning-of-a-dictionary-of-parts-of-faces"]], "Learn the dictionary of images": [[51, "learn-the-dictionary-of-images"]], "Plot the results": [[51, "plot-the-results"], [83, "plot-the-results"], [135, "plot-the-results"], [164, "plot-the-results"]], "Feature agglomeration": [[52, "feature-agglomeration"], [1004, "feature-agglomeration"], [1020, "feature-agglomeration"]], "Various Agglomerative Clustering on a 2D embedding of digits": [[53, "various-agglomerative-clustering-on-a-2d-embedding-of-digits"]], "Vector Quantization Example": [[54, "vector-quantization-example"]], "Original image": [[54, "original-image"]], "Compression via vector quantization": [[54, "compression-via-vector-quantization"]], "Encoding strategy": [[54, "encoding-strategy"]], "Memory footprint": [[54, "memory-footprint"]], "Feature agglomeration vs. univariate selection": [[55, "feature-agglomeration-vs-univariate-selection"]], "Demo of HDBSCAN clustering algorithm": [[56, "demo-of-hdbscan-clustering-algorithm"]], "Scale Invariance": [[56, "scale-invariance"]], "Multi-Scale Clustering": [[56, "multi-scale-clustering"]], "Hyperparameter Robustness": [[56, "hyperparameter-robustness"]], "min_cluster_size": [[56, "min-cluster-size"]], "min_samples": [[56, "min-samples"]], "dbscan_clustering": [[56, "dbscan-clustering"]], "Inductive Clustering": [[57, "inductive-clustering"]], "Demonstration of k-means assumptions": [[58, "demonstration-of-k-means-assumptions"]], "Fit models and plot results": [[58, "fit-models-and-plot-results"]], "Possible solutions": [[58, "possible-solutions"]], "Final remarks": [[58, "final-remarks"]], "A demo of K-Means clustering on the handwritten digits data": [[59, "a-demo-of-k-means-clustering-on-the-handwritten-digits-data"]], "Load the dataset": [[59, "load-the-dataset"]], "Define our evaluation benchmark": [[59, "define-our-evaluation-benchmark"]], "Run the benchmark": [[59, "run-the-benchmark"]], "Visualize the results on PCA-reduced data": [[59, "visualize-the-results-on-pca-reduced-data"]], "An example of K-Means++ initialization": [[60, "an-example-of-k-means-initialization"]], "Selecting the number of clusters with silhouette analysis on KMeans clustering": [[61, "selecting-the-number-of-clusters-with-silhouette-analysis-on-kmeans-clustering"]], "Empirical evaluation of the impact of k-means initialization": [[62, "empirical-evaluation-of-the-impact-of-k-means-initialization"]], "Comparing different hierarchical linkage methods on toy datasets": [[63, "comparing-different-hierarchical-linkage-methods-on-toy-datasets"]], "A demo of the mean-shift clustering algorithm": [[64, "a-demo-of-the-mean-shift-clustering-algorithm"]], "Compute clustering with MeanShift": [[64, "compute-clustering-with-meanshift"]], "Comparison of the K-Means and MiniBatchKMeans clustering algorithms": [[65, "comparison-of-the-k-means-and-minibatchkmeans-clustering-algorithms"]], "Generate the data": [[65, "generate-the-data"], [67, "generate-the-data"], [83, "generate-the-data"]], "Compute clustering with KMeans": [[65, "compute-clustering-with-kmeans"]], "Compute clustering with MiniBatchKMeans": [[65, "compute-clustering-with-minibatchkmeans"]], "Establishing parity between clusters": [[65, "establishing-parity-between-clusters"]], "Plotting the results": [[65, "plotting-the-results"], [113, "plotting-the-results"]], "Demo of OPTICS clustering algorithm": [[66, "demo-of-optics-clustering-algorithm"]], "Spectral clustering for image segmentation": [[67, "spectral-clustering-for-image-segmentation"]], "Plotting four circles": [[67, "plotting-four-circles"]], "Plotting two circles": [[67, "plotting-two-circles"]], "Hierarchical clustering: structured vs unstructured ward": [[68, "hierarchical-clustering-structured-vs-unstructured-ward"]], "We are defining k-Nearest Neighbors with 10 neighbors": [[68, "we-are-defining-k-nearest-neighbors-with-10-neighbors"]], "Pipelines and composite estimators": [[70, "pipelines-and-composite-estimators"], [166, "pipelines-and-composite-estimators"], [408, "pipelines-and-composite-estimators"]], "Column Transformer with Heterogeneous Data Sources": [[71, "column-transformer-with-heterogeneous-data-sources"]], "20 newsgroups dataset": [[71, "newsgroups-dataset"]], "Creating transformers": [[71, "creating-transformers"]], "Classification pipeline": [[71, "classification-pipeline"]], "Column Transformer with Mixed Types": [[72, "column-transformer-with-mixed-types"]], "Selecting dimensionality reduction with Pipeline and GridSearchCV": [[73, "selecting-dimensionality-reduction-with-pipeline-and-gridsearchcv"]], "Illustration of Pipeline and GridSearchCV": [[73, "illustration-of-pipeline-and-gridsearchcv"]], "Caching transformers within a Pipeline": [[73, "caching-transformers-within-a-pipeline"]], "Pipelining: chaining a PCA and a logistic regression": [[74, "pipelining-chaining-a-pca-and-a-logistic-regression"]], "Concatenating multiple feature extraction methods": [[75, "concatenating-multiple-feature-extraction-methods"]], "Effect of transforming the targets in regression model": [[76, "effect-of-transforming-the-targets-in-regression-model"]], "Synthetic example": [[76, "synthetic-example"]], "Real-world data set": [[76, "real-world-data-set"]], "Covariance estimation": [[78, "covariance-estimation"], [166, "covariance-estimation"], [409, "covariance-estimation"]], "Shrinkage covariance estimation: LedoitWolf vs OAS and max-likelihood": [[79, "shrinkage-covariance-estimation-ledoitwolf-vs-oas-and-max-likelihood"]], "Compute the likelihood on test data": [[79, "compute-the-likelihood-on-test-data"]], "Compare different approaches to setting the regularization parameter": [[79, "compare-different-approaches-to-setting-the-regularization-parameter"]], "Ledoit-Wolf vs OAS estimation": [[80, "ledoit-wolf-vs-oas-estimation"]], "Robust covariance estimation and Mahalanobis distances relevance": [[81, "robust-covariance-estimation-and-mahalanobis-distances-relevance"]], "References:": [[81, null], [112, null], [171, null], [265, null], [266, null], [373, null], [374, null], [404, null], [404, null], [404, null], [405, null], [407, null], [407, null], [407, null], [407, null], [407, null], [407, null], [407, null], [407, null], [407, null], [407, null], [409, null], [409, null], [409, null], [409, null], [411, null], [411, null], [412, null], [412, null], [412, null], [412, null], [412, null], [412, null], [412, null], [412, null], [415, null], [415, null], [976, null], [976, null], [979, null], [980, null], [981, null], [983, null], [983, null], [983, null], [983, null], [983, null], [983, null], [983, null], [984, null], [984, null], [984, null], [984, null], [984, null], [984, null], [984, null], [984, null], [985, null], [985, null], [987, null], [987, null], [987, null], [987, null], [987, null], [987, null], [987, null], [987, null], [988, null], [988, null], [988, null], [990, null], [990, null], [990, null], [991, null], [992, null], [993, null], [993, null], [993, null], [993, null], [995, null], [997, null], [997, null], [999, null], [999, null], [999, null], [1001, null], [1001, null], [1002, null]], "Comparison of results": [[81, "comparison-of-results"]], "Robust vs Empirical covariance estimate": [[82, "robust-vs-empirical-covariance-estimate"]], "Minimum Covariance Determinant Estimator": [[82, "minimum-covariance-determinant-estimator"]], "Evaluation": [[82, "evaluation"], [302, "evaluation"]], "Sparse inverse covariance estimation": [[83, "sparse-inverse-covariance-estimation"]], "Estimate the covariance": [[83, "estimate-the-covariance"]], "Cross decomposition": [[85, "cross-decomposition"], [166, "cross-decomposition"], [410, "cross-decomposition"]], "Compare cross decomposition methods": [[86, "compare-cross-decomposition-methods"]], "Dataset based latent variables model": [[86, "dataset-based-latent-variables-model"]], "Canonical (symmetric) PLS": [[86, "canonical-symmetric-pls"]], "Transform data": [[86, "transform-data"]], "Scatter plot of scores": [[86, "scatter-plot-of-scores"]], "PLS regression, with multivariate response, a.k.a. PLS2": [[86, "pls-regression-with-multivariate-response-a-k-a-pls2"]], "PLS regression, with univariate response, a.k.a. PLS1": [[86, "pls-regression-with-univariate-response-a-k-a-pls1"]], "CCA (PLS mode B with symmetric deflation)": [[86, "cca-pls-mode-b-with-symmetric-deflation"]], "Principal Component Regression vs Partial Least Squares Regression": [[87, "principal-component-regression-vs-partial-least-squares-regression"]], "The data": [[87, "the-data"]], "Projection on one component and predictive power": [[87, "projection-on-one-component-and-predictive-power"]], "Dataset examples": [[89, "dataset-examples"], [166, "dataset-examples"]], "The Digit Dataset": [[90, "the-digit-dataset"]], "The Iris Dataset": [[91, "the-iris-dataset"]], "Loading the iris dataset": [[91, "loading-the-iris-dataset"]], "Scatter Plot of the Iris dataset": [[91, "scatter-plot-of-the-iris-dataset"]], "Plot a PCA representation": [[91, "plot-a-pca-representation"]], "Plot randomly generated classification dataset": [[92, "plot-randomly-generated-classification-dataset"]], "Plot randomly generated multilabel dataset": [[93, "plot-randomly-generated-multilabel-dataset"]], "Decomposition": [[95, "decomposition"], [96, "decomposition"], [166, "decomposition"]], "Faces dataset decompositions": [[96, "faces-dataset-decompositions"]], "Dataset preparation": [[96, "dataset-preparation"], [220, "dataset-preparation"]], "Eigenfaces - PCA using randomized SVD": [[96, "eigenfaces-pca-using-randomized-svd"]], "Non-negative components - NMF": [[96, "non-negative-components-nmf"]], "Independent components - FastICA": [[96, "independent-components-fastica"]], "Sparse components - MiniBatchSparsePCA": [[96, "sparse-components-minibatchsparsepca"]], "Dictionary learning": [[96, "dictionary-learning"]], "Cluster centers - MiniBatchKMeans": [[96, "cluster-centers-minibatchkmeans"]], "Factor Analysis components - FA": [[96, "factor-analysis-components-fa"]], "Decomposition: Dictionary learning": [[96, "decomposition-dictionary-learning"]], "Dictionary learning - positive dictionary": [[96, "dictionary-learning-positive-dictionary"]], "Dictionary learning - positive code": [[96, "dictionary-learning-positive-code"]], "Dictionary learning - positive dictionary & code": [[96, "dictionary-learning-positive-dictionary-code"]], "Blind source separation using FastICA": [[97, "blind-source-separation-using-fastica"]], "Fit ICA and PCA models": [[97, "fit-ica-and-pca-models"]], "FastICA on 2D point clouds": [[98, "fastica-on-2d-point-clouds"]], "Image denoising using dictionary learning": [[99, "image-denoising-using-dictionary-learning"]], "Generate distorted image": [[99, "generate-distorted-image"]], "Display the distorted image": [[99, "display-the-distorted-image"]], "Extract reference patches": [[99, "extract-reference-patches"]], "Learn the dictionary from reference patches": [[99, "learn-the-dictionary-from-reference-patches"]], "Extract noisy patches and reconstruct them using the dictionary": [[99, "extract-noisy-patches-and-reconstruct-them-using-the-dictionary"]], "Incremental PCA": [[100, "incremental-pca"], [412, "incremental-pca"]], "Kernel PCA": [[101, "kernel-pca"]], "Projecting data: PCA vs. KernelPCA": [[101, "projecting-data-pca-vs-kernelpca"]], "Projecting into the original feature space": [[101, "projecting-into-the-original-feature-space"]], "PCA example with Iris Data-set": [[102, "pca-example-with-iris-data-set"]], "Model selection with Probabilistic PCA and Factor Analysis (FA)": [[103, "model-selection-with-probabilistic-pca-and-factor-analysis-fa"]], "Create the data": [[103, "create-the-data"]], "Fit the models": [[103, "fit-the-models"]], "Comparison of LDA and PCA 2D projection of Iris dataset": [[104, "comparison-of-lda-and-pca-2d-projection-of-iris-dataset"]], "Sparse coding with a precomputed dictionary": [[105, "sparse-coding-with-a-precomputed-dictionary"], [412, "sparse-coding-with-a-precomputed-dictionary"]], "Factor Analysis (with rotation) to visualize patterns": [[106, "factor-analysis-with-rotation-to-visualize-patterns"]], "Developing Estimators": [[108, "developing-estimators"], [166, "developing-estimators"]], "__sklearn_is_fitted__ as Developer API": [[110, "sklearn-is-fitted-as-developer-api"]], "An example custom estimator implementing a simple classifier": [[110, "an-example-custom-estimator-implementing-a-simple-classifier"]], "Ensemble methods": [[111, "ensemble-methods"], [166, "ensemble-methods"]], "Multi-class AdaBoosted Decision Trees": [[112, "multi-class-adaboosted-decision-trees"]], "Creating the dataset": [[112, "creating-the-dataset"]], "Training the AdaBoostClassifier": [[112, "training-the-adaboostclassifier"]], "Analysis": [[112, "analysis"]], "Convergence of the AdaBoostClassifier": [[112, "convergence-of-the-adaboostclassifier"]], "Errors and weights of the Weak Learners": [[112, "errors-and-weights-of-the-weak-learners"]], "Decision Tree Regression with AdaBoost": [[113, "decision-tree-regression-with-adaboost"]], "Preparing the data": [[113, "preparing-the-data"], [175, "preparing-the-data"]], "Training and prediction with DecisionTree and AdaBoost Regressors": [[113, "training-and-prediction-with-decisiontree-and-adaboost-regressors"]], "Two-class AdaBoost": [[114, "two-class-adaboost"]], "Single estimator versus bagging: bias-variance decomposition": [[115, "single-estimator-versus-bagging-bias-variance-decomposition"]], "OOB Errors for Random Forests": [[116, "oob-errors-for-random-forests"]], "Feature transformations with ensembles of trees": [[117, "feature-transformations-with-ensembles-of-trees"]], "Comparing Random Forests and Histogram Gradient Boosting models": [[118, "comparing-random-forests-and-histogram-gradient-boosting-models"]], "Load dataset": [[118, "load-dataset"]], "Compute score and computation times": [[118, "compute-score-and-computation-times"]], "Feature importances with a forest of trees": [[119, "feature-importances-with-a-forest-of-trees"]], "Data generation and model fitting": [[119, "data-generation-and-model-fitting"]], "Feature importance based on mean decrease in impurity": [[119, "feature-importance-based-on-mean-decrease-in-impurity"]], "Feature importance based on feature permutation": [[119, "feature-importance-based-on-feature-permutation"]], "Pixel importances with a parallel forest of trees": [[120, "pixel-importances-with-a-parallel-forest-of-trees"]], "Loading the data and model fitting": [[120, "loading-the-data-and-model-fitting"]], "Feature importance based on mean decrease in impurity (MDI)": [[120, "feature-importance-based-on-mean-decrease-in-impurity-mdi"]], "Plot the decision surfaces of ensembles of trees on the iris dataset": [[121, "plot-the-decision-surfaces-of-ensembles-of-trees-on-the-iris-dataset"]], "Categorical Feature Support in Gradient Boosting": [[122, "categorical-feature-support-in-gradient-boosting"]], "Load Ames Housing dataset": [[122, "load-ames-housing-dataset"]], "Gradient boosting estimator with dropped categorical features": [[122, "gradient-boosting-estimator-with-dropped-categorical-features"]], "Gradient boosting estimator with one-hot encoding": [[122, "gradient-boosting-estimator-with-one-hot-encoding"]], "Gradient boosting estimator with ordinal encoding": [[122, "gradient-boosting-estimator-with-ordinal-encoding"]], "Gradient boosting estimator with native categorical support": [[122, "gradient-boosting-estimator-with-native-categorical-support"]], "Model comparison": [[122, "model-comparison"]], "Limiting the number of splits": [[122, "limiting-the-number-of-splits"]], "Early stopping in Gradient Boosting": [[123, "early-stopping-in-gradient-boosting"]], "Data Preparation": [[123, "data-preparation"]], "Model Training and Comparison": [[123, "model-training-and-comparison"]], "Error Calculation": [[123, "error-calculation"]], "Visualize Comparison": [[123, "visualize-comparison"]], "Gradient Boosting Out-of-Bag estimates": [[124, "gradient-boosting-out-of-bag-estimates"]], "Prediction Intervals for Gradient Boosting Regression": [[125, "prediction-intervals-for-gradient-boosting-regression"]], "Fitting non-linear quantile and least squares regressors": [[125, "fitting-non-linear-quantile-and-least-squares-regressors"]], "Analysis of the error metrics": [[125, "analysis-of-the-error-metrics"]], "Calibration of the confidence interval": [[125, "calibration-of-the-confidence-interval"]], "Tuning the hyper-parameters of the quantile regressors": [[125, "tuning-the-hyper-parameters-of-the-quantile-regressors"]], "Gradient Boosting regression": [[126, "gradient-boosting-regression"]], "Data preprocessing": [[126, "data-preprocessing"]], "Fit regression model": [[126, "fit-regression-model"], [295, "fit-regression-model"], [345, "fit-regression-model"]], "Plot training deviance": [[126, "plot-training-deviance"]], "Plot feature importance": [[126, "plot-feature-importance"]], "Gradient Boosting regularization": [[127, "gradient-boosting-regularization"]], "IsolationForest example": [[128, "isolationforest-example"]], "Training of the model": [[128, "training-of-the-model"]], "Plot discrete decision boundary": [[128, "plot-discrete-decision-boundary"]], "Plot path length decision boundary": [[128, "plot-path-length-decision-boundary"]], "Monotonic Constraints": [[129, "monotonic-constraints"], [414, "monotonic-constraints"]], "Using feature names to specify monotonic constraints": [[129, "using-feature-names-to-specify-monotonic-constraints"]], "Hashing feature transformation using Totally Random Trees": [[130, "hashing-feature-transformation-using-totally-random-trees"]], "Comparing random forests and the multi-output meta estimator": [[131, "comparing-random-forests-and-the-multi-output-meta-estimator"]], "Combine predictors using stacking": [[132, "combine-predictors-using-stacking"]], "Download the dataset": [[132, "download-the-dataset"]], "Make pipeline to preprocess the data": [[132, "make-pipeline-to-preprocess-the-data"]], "Stack of predictors on a single data set": [[132, "stack-of-predictors-on-a-single-data-set"]], "Measure and plot the results": [[132, "measure-and-plot-the-results"]], "Plot the decision boundaries of a VotingClassifier": [[133, "plot-the-decision-boundaries-of-a-votingclassifier"]], "Plot class probabilities calculated by the VotingClassifier": [[134, "plot-class-probabilities-calculated-by-the-votingclassifier"]], "Plot individual and voting regression predictions": [[135, "plot-individual-and-voting-regression-predictions"]], "Training classifiers": [[135, "training-classifiers"]], "Making predictions": [[135, "making-predictions"]], "Tutorial exercises": [[137, "tutorial-exercises"], [166, "tutorial-exercises"]], "Cross-validation on diabetes Dataset Exercise": [[138, "cross-validation-on-diabetes-dataset-exercise"]], "Load dataset and apply GridSearchCV": [[138, "load-dataset-and-apply-gridsearchcv"]], "Plot error lines showing +/- std. errors of the scores": [[138, "plot-error-lines-showing-std-errors-of-the-scores"]], "Bonus: how much can you trust the selection of alpha?": [[138, "bonus-how-much-can-you-trust-the-selection-of-alpha"]], "Digits Classification Exercise": [[139, "digits-classification-exercise"]], "SVM Exercise": [[140, "svm-exercise"]], "Feature Selection": [[142, "feature-selection"], [166, "feature-selection"]], "Comparison of F-test and mutual information": [[143, "comparison-of-f-test-and-mutual-information"]], "Univariate Feature Selection": [[144, "univariate-feature-selection"]], "Univariate feature selection": [[144, "id1"], [416, "univariate-feature-selection"]], "Compare with SVMs": [[144, "compare-with-svms"]], "Pipeline ANOVA SVM": [[145, "pipeline-anova-svm"]], "Recursive feature elimination": [[146, "recursive-feature-elimination"], [416, "recursive-feature-elimination"]], "Recursive feature elimination with cross-validation": [[147, "recursive-feature-elimination-with-cross-validation"]], "Model training and selection": [[147, "model-training-and-selection"], [250, "model-training-and-selection"]], "Plot number of features VS. cross-validation scores": [[147, "plot-number-of-features-vs-cross-validation-scores"]], "Model-based and sequential feature selection": [[148, "model-based-and-sequential-feature-selection"]], "Loading the data": [[148, "loading-the-data"]], "Feature importance from coefficients": [[148, "feature-importance-from-coefficients"]], "Selecting features based on importance": [[148, "selecting-features-based-on-importance"]], "Selecting features with Sequential Feature Selection": [[148, "selecting-features-with-sequential-feature-selection"]], "Using negative tolerance values": [[148, "using-negative-tolerance-values"]], "Gaussian Process for Machine Learning": [[150, "gaussian-process-for-machine-learning"], [166, "gaussian-process-for-machine-learning"]], "Comparison of kernel ridge and Gaussian process regression": [[151, "comparison-of-kernel-ridge-and-gaussian-process-regression"]], "Generating a dataset": [[151, "generating-a-dataset"]], "Limitations of a simple linear model": [[151, "limitations-of-a-simple-linear-model"]], "Kernel methods: kernel ridge and Gaussian process": [[151, "kernel-methods-kernel-ridge-and-gaussian-process"]], "Kernel ridge": [[151, "kernel-ridge"]], "Gaussian process regression": [[151, "gaussian-process-regression"]], "Final conclusion": [[151, "final-conclusion"]], "Probabilistic predictions with Gaussian process classification (GPC)": [[152, "probabilistic-predictions-with-gaussian-process-classification-gpc"]], "Gaussian process classification (GPC) on iris dataset": [[153, "gaussian-process-classification-gpc-on-iris-dataset"], [417, "gaussian-process-classification-gpc-on-iris-dataset"]], "Iso-probability lines for Gaussian Processes classification (GPC)": [[154, "iso-probability-lines-for-gaussian-processes-classification-gpc"]], "Illustration of Gaussian process classification (GPC) on the XOR dataset": [[155, "illustration-of-gaussian-process-classification-gpc-on-the-xor-dataset"]], "Forecasting of CO2 level on Mona Loa dataset using Gaussian process regression (GPR)": [[156, "forecasting-of-co2-level-on-mona-loa-dataset-using-gaussian-process-regression-gpr"]], "Build the dataset": [[156, "build-the-dataset"]], "Design the proper kernel": [[156, "design-the-proper-kernel"]], "Model fitting and extrapolation": [[156, "model-fitting-and-extrapolation"]], "Interpretation of kernel hyperparameters": [[156, "interpretation-of-kernel-hyperparameters"]], "Ability of Gaussian process regression (GPR) to estimate data noise-level": [[157, "ability-of-gaussian-process-regression-gpr-to-estimate-data-noise-level"]], "Optimisation of kernel hyperparameters in GPR": [[157, "optimisation-of-kernel-hyperparameters-in-gpr"]], "Gaussian Processes regression: basic introductory example": [[158, "gaussian-processes-regression-basic-introductory-example"]], "Dataset generation": [[158, "dataset-generation"], [201, "dataset-generation"]], "Example with noise-free target": [[158, "example-with-noise-free-target"]], "Example with noisy targets": [[158, "example-with-noisy-targets"]], "Gaussian processes on discrete data structures": [[159, "gaussian-processes-on-discrete-data-structures"]], "Sequence similarity matrix under the kernel": [[159, "sequence-similarity-matrix-under-the-kernel"]], "Regression": [[159, "regression"], [414, "regression"], [414, "id9"], [983, "regression"], [991, "regression"], [1001, "regression"], [1002, "regression"], [1003, "regression"]], "Illustration of prior and posterior Gaussian process for different kernels": [[160, "illustration-of-prior-and-posterior-gaussian-process-for-different-kernels"]], "Helper function": [[160, "helper-function"]], "Dataset and Gaussian process generation": [[160, "dataset-and-gaussian-process-generation"]], "Kernel cookbook": [[160, "kernel-cookbook"]], "Radial Basis Function kernel": [[160, "radial-basis-function-kernel"]], "Rational Quadradtic kernel": [[160, "rational-quadradtic-kernel"]], "Exp-Sine-Squared kernel": [[160, "exp-sine-squared-kernel"], [417, "exp-sine-squared-kernel"]], "Dot-product kernel": [[160, "dot-product-kernel"]], "Mat\u00e9rn kernel": [[160, "matern-kernel"], [417, "matern-kernel"]], "Missing Value Imputation": [[162, "missing-value-imputation"], [166, "missing-value-imputation"]], "Imputing missing values with variants of IterativeImputer": [[163, "imputing-missing-values-with-variants-of-iterativeimputer"]], "Imputing missing values before building an estimator": [[164, "imputing-missing-values-before-building-an-estimator"]], "Download the data and make missing values sets": [[164, "download-the-data-and-make-missing-values-sets"]], "Impute the missing data and score": [[164, "impute-the-missing-data-and-score"]], "Missing information": [[164, "missing-information"]], "Estimate the score": [[164, "estimate-the-score"]], "Replace missing values by 0": [[164, "replace-missing-values-by-0"]], "kNN-imputation of the missing values": [[164, "knn-imputation-of-the-missing-values"]], "Impute missing values with mean": [[164, "impute-missing-values-with-mean"]], "Iterative imputation of the missing values": [[164, "iterative-imputation-of-the-missing-values"]], "Examples": [[166, "examples"], [368, "examples"], [374, null], [411, null], [411, null], [416, null], [416, null], [417, null], [983, null], [983, null], [983, null], [1000, null], [1000, null], [1004, null], [1004, null], [1004, null], [1027, "examples"]], "Release Highlights": [[166, "release-highlights"], [314, "release-highlights"]], "Decision Trees": [[166, "decision-trees"], [355, "decision-trees"], [1003, "decision-trees"]], "Gaussian Mixture Models": [[166, "gaussian-mixture-models"], [244, "gaussian-mixture-models"]], "Generalized Linear Models": [[166, "generalized-linear-models"], [177, "generalized-linear-models"], [983, "generalized-linear-models"]], "Inspection": [[166, "inspection"], [167, "inspection"], [396, "inspection"]], "Kernel Approximation": [[166, "kernel-approximation"], [174, "kernel-approximation"], [979, "kernel-approximation"]], "Manifold learning": [[166, "manifold-learning"], [219, "manifold-learning"], [984, "manifold-learning"]], "Miscellaneous": [[166, "miscellaneous"], [227, "miscellaneous"], [406, "miscellaneous"], [1035, "miscellaneous"], [1035, "id40"], [1036, "miscellaneous"], [1037, "miscellaneous"], [1038, "miscellaneous"], [1038, "id13"], [1039, "miscellaneous"], [1040, "miscellaneous"], [1043, "miscellaneous"]], "Model Selection": [[166, "model-selection"], [253, "model-selection"]], "Multiclass methods": [[166, "multiclass-methods"], [277, "multiclass-methods"]], "Multioutput methods": [[166, "multioutput-methods"], [280, "multioutput-methods"]], "Nearest Neighbors": [[166, "nearest-neighbors"], [284, "nearest-neighbors"], [990, "nearest-neighbors"]], "Neural Networks": [[166, "neural-networks"], [298, "neural-networks"]], "Preprocessing": [[166, "preprocessing"], [304, "preprocessing"]], "Semi Supervised Classification": [[166, "semi-supervised-classification"], [324, "semi-supervised-classification"]], "Support Vector Machines": [[166, "support-vector-machines"], [333, "support-vector-machines"], [1002, "support-vector-machines"]], "Working with text documents": [[166, "working-with-text-documents"], [350, "working-with-text-documents"]], "Failure of Machine Learning to infer causal effects": [[168, "failure-of-machine-learning-to-infer-causal-effects"]], "The dataset: simulated hourly wages": [[168, "the-dataset-simulated-hourly-wages"]], "Description of the simulated data": [[168, "description-of-the-simulated-data"]], "Income prediction with fully observed variables": [[168, "income-prediction-with-fully-observed-variables"]], "Income prediction with partial observations": [[168, "income-prediction-with-partial-observations"]], "Lessons learned": [[168, "lessons-learned"], [169, "lessons-learned"]], "Common pitfalls in the interpretation of coefficients of linear models": [[169, "common-pitfalls-in-the-interpretation-of-coefficients-of-linear-models"]], "The dataset: wages": [[169, "the-dataset-wages"]], "The machine-learning pipeline": [[169, "the-machine-learning-pipeline"]], "Processing the dataset": [[169, "processing-the-dataset"]], "Interpreting coefficients: scale matters": [[169, "interpreting-coefficients-scale-matters"]], "Checking the variability of the coefficients": [[169, "checking-the-variability-of-the-coefficients"]], "The problem of correlated variables": [[169, "the-problem-of-correlated-variables"]], "Preprocessing numerical variables": [[169, "preprocessing-numerical-variables"]], "Linear models with regularization": [[169, "linear-models-with-regularization"]], "Linear models with sparse coefficients": [[169, "linear-models-with-sparse-coefficients"]], "Wrong causal interpretation": [[169, "wrong-causal-interpretation"]], "Partial Dependence and Individual Conditional Expectation Plots": [[170, "partial-dependence-and-individual-conditional-expectation-plots"]], "Bike sharing dataset preprocessing": [[170, "bike-sharing-dataset-preprocessing"]], "Preprocessor for machine-learning models": [[170, "preprocessor-for-machine-learning-models"]], "Preprocessor for the neural network model": [[170, "preprocessor-for-the-neural-network-model"]], "Preprocessor for the gradient boosting model": [[170, "preprocessor-for-the-gradient-boosting-model"]], "1-way partial dependence with different models": [[170, "way-partial-dependence-with-different-models"]], "Multi-layer perceptron": [[170, "multi-layer-perceptron"]], "Gradient boosting": [[170, "gradient-boosting"]], "Analysis of the plots": [[170, "analysis-of-the-plots"]], "ICE vs. PDP": [[170, "ice-vs-pdp"]], "2D interaction plots": [[170, "d-interaction-plots"]], "3D representation": [[170, "d-representation"]], "Permutation Importance vs Random Forest Feature Importance (MDI)": [[171, "permutation-importance-vs-random-forest-feature-importance-mdi"]], "Data Loading and Feature Engineering": [[171, "data-loading-and-feature-engineering"]], "Accuracy of the Model": [[171, "accuracy-of-the-model"]], "Tree\u2019s Feature Importance from Mean Decrease in Impurity (MDI)": [[171, "tree-s-feature-importance-from-mean-decrease-in-impurity-mdi"]], "Permutation Importance with Multicollinear or Correlated Features": [[172, "permutation-importance-with-multicollinear-or-correlated-features"]], "Random Forest Feature Importance on Breast Cancer Data": [[172, "random-forest-feature-importance-on-breast-cancer-data"]], "Handling Multicollinear Features": [[172, "handling-multicollinear-features"]], "Scalable learning with polynomial kernel approximation": [[175, "scalable-learning-with-polynomial-kernel-approximation"]], "Partitioning the data": [[175, "partitioning-the-data"]], "Feature normalization": [[175, "feature-normalization"]], "Establishing a baseline model": [[175, "establishing-a-baseline-model"]], "Establishing the kernel approximation model": [[175, "establishing-the-kernel-approximation-model"]], "Establishing the kernelized SVM model": [[175, "establishing-the-kernelized-svm-model"]], "Comparing the results": [[175, "comparing-the-results"]], "Comparing Linear Bayesian Regressors": [[178, "comparing-linear-bayesian-regressors"]], "Models robustness to recover the ground truth weights": [[178, "models-robustness-to-recover-the-ground-truth-weights"]], "Fit the regressors": [[178, "fit-the-regressors"], [178, "id2"]], "Plot the true and estimated coefficients": [[178, "plot-the-true-and-estimated-coefficients"]], "Plot the marginal log-likelihood": [[178, "plot-the-marginal-log-likelihood"]], "Bayesian regressions with polynomial feature expansion": [[178, "bayesian-regressions-with-polynomial-feature-expansion"]], "Plotting polynomial regressions with std errors of the scores": [[178, "plotting-polynomial-regressions-with-std-errors-of-the-scores"]], "Curve Fitting with Bayesian Ridge Regression": [[179, "curve-fitting-with-bayesian-ridge-regression"]], "Generate sinusoidal data with noise": [[179, "generate-sinusoidal-data-with-noise"]], "Fit by cubic polynomial": [[179, "fit-by-cubic-polynomial"]], "Plot the true and predicted curves with log marginal likelihood (L)": [[179, "plot-the-true-and-predicted-curves-with-log-marginal-likelihood-l"]], "Fitting an Elastic Net with a precomputed Gram Matrix and Weighted Samples": [[180, "fitting-an-elastic-net-with-a-precomputed-gram-matrix-and-weighted-samples"]], "HuberRegressor vs Ridge on dataset with strong outliers": [[181, "huberregressor-vs-ridge-on-dataset-with-strong-outliers"]], "Logistic Regression 3-class Classifier": [[182, "logistic-regression-3-class-classifier"]], "L1-based models for Sparse Signals": [[183, "l1-based-models-for-sparse-signals"]], "Lasso": [[183, "lasso"], [983, "lasso"]], "Automatic Relevance Determination (ARD)": [[183, "automatic-relevance-determination-ard"]], "ElasticNet": [[183, "elasticnet"]], "Plot and analysis of the results": [[183, "plot-and-analysis-of-the-results"]], "Conclusions": [[183, "conclusions"]], "Lasso and Elastic Net": [[184, "lasso-and-elastic-net"]], "Lasso on dense and sparse data": [[185, "lasso-on-dense-and-sparse-data"]], "Comparing the two Lasso implementations on Dense data": [[185, "comparing-the-two-lasso-implementations-on-dense-data"]], "Comparing the two Lasso implementations on Sparse data": [[185, "comparing-the-two-lasso-implementations-on-sparse-data"]], "Lasso path using LARS": [[186, "lasso-path-using-lars"]], "Lasso model selection via information criteria": [[187, "lasso-model-selection-via-information-criteria"]], "Lasso model selection: AIC-BIC / cross-validation": [[188, "lasso-model-selection-aic-bic-cross-validation"]], "Selecting Lasso via an information criterion": [[188, "selecting-lasso-via-an-information-criterion"]], "Selecting Lasso via cross-validation": [[188, "selecting-lasso-via-cross-validation"]], "Lasso via coordinate descent": [[188, "lasso-via-coordinate-descent"]], "Lasso via least angle regression": [[188, "lasso-via-least-angle-regression"]], "Summary of cross-validation approach": [[188, "summary-of-cross-validation-approach"]], "Logistic function": [[189, "logistic-function"]], "L1 Penalty and Sparsity in Logistic Regression": [[190, "l1-penalty-and-sparsity-in-logistic-regression"]], "Plot multinomial and One-vs-Rest Logistic Regression": [[191, "plot-multinomial-and-one-vs-rest-logistic-regression"]], "Regularization path of L1- Logistic Regression": [[192, "regularization-path-of-l1-logistic-regression"]], "Load data": [[192, "load-data"]], "Compute regularization path": [[192, "compute-regularization-path"]], "Plot regularization path": [[192, "plot-regularization-path"]], "Joint feature selection with multi-task Lasso": [[193, "joint-feature-selection-with-multi-task-lasso"]], "Fit models": [[193, "fit-models"], [281, "fit-models"]], "Plot support and time series": [[193, "plot-support-and-time-series"]], "Non-negative least squares": [[194, "non-negative-least-squares"]], "Linear Regression Example": [[195, "linear-regression-example"]], "Sparsity Example: Fitting only features 1  and 2": [[196, "sparsity-example-fitting-only-features-1-and-2"]], "Ordinary Least Squares and Ridge Regression Variance": [[197, "ordinary-least-squares-and-ridge-regression-variance"]], "Orthogonal Matching Pursuit": [[198, "orthogonal-matching-pursuit"]], "Poisson regression and non-normal loss": [[199, "poisson-regression-and-non-normal-loss"]], "The French Motor Third-Party Liability Claims dataset": [[199, "the-french-motor-third-party-liability-claims-dataset"]], "A constant prediction baseline": [[199, "a-constant-prediction-baseline"]], "(Generalized) linear models": [[199, "generalized-linear-models"]], "Gradient Boosting Regression Trees for Poisson regression": [[199, "gradient-boosting-regression-trees-for-poisson-regression"]], "Evaluation of the calibration of predictions": [[199, "evaluation-of-the-calibration-of-predictions"]], "Evaluation of the ranking power": [[199, "evaluation-of-the-ranking-power"]], "Main takeaways": [[199, "main-takeaways"]], "Polynomial and Spline interpolation": [[200, "polynomial-and-spline-interpolation"]], "Periodic Splines": [[200, "periodic-splines"]], "Quantile regression": [[201, "quantile-regression"]], "Fitting a QuantileRegressor": [[201, "fitting-a-quantileregressor"]], "Comparing QuantileRegressor and LinearRegression": [[201, "comparing-quantileregressor-and-linearregression"]], "Robust linear model estimation using RANSAC": [[202, "robust-linear-model-estimation-using-ransac"]], "Ridge coefficients as a function of the L2 Regularization": [[203, "ridge-coefficients-as-a-function-of-the-l2-regularization"]], "Purpose of this example": [[203, "purpose-of-this-example"]], "Creating a non-noisy data set": [[203, "creating-a-non-noisy-data-set"]], "Training the Ridge Regressor": [[203, "training-the-ridge-regressor"]], "Plotting trained Coefficients and Mean Squared Errors": [[203, "plotting-trained-coefficients-and-mean-squared-errors"]], "Interpreting the plots": [[203, "interpreting-the-plots"]], "Plot Ridge coefficients as a function of the regularization": [[204, "plot-ridge-coefficients-as-a-function-of-the-regularization"]], "Compute paths": [[204, "compute-paths"]], "Display results": [[204, "display-results"]], "Robust linear estimator fitting": [[205, "robust-linear-estimator-fitting"]], "Comparing various online solvers": [[206, "comparing-various-online-solvers"]], "Early stopping of Stochastic Gradient Descent": [[207, "early-stopping-of-stochastic-gradient-descent"]], "Plot multi-class SGD on the iris dataset": [[208, "plot-multi-class-sgd-on-the-iris-dataset"]], "SGD: convex loss functions": [[209, "sgd-convex-loss-functions"]], "SGD: Penalties": [[210, "sgd-penalties"]], "SGD: Maximum margin separating hyperplane": [[211, "sgd-maximum-margin-separating-hyperplane"]], "SGD: Weighted samples": [[212, "sgd-weighted-samples"]], "One-Class SVM versus One-Class SVM using Stochastic Gradient Descent": [[213, "one-class-svm-versus-one-class-svm-using-stochastic-gradient-descent"]], "Multiclass sparse logistic regression on 20newgroups": [[214, "multiclass-sparse-logistic-regression-on-20newgroups"]], "MNIST classification using multinomial logistic + L1": [[215, "mnist-classification-using-multinomial-logistic-l1"]], "Theil-Sen Regression": [[216, "theil-sen-regression"]], "Outliers only in the y direction": [[216, "outliers-only-in-the-y-direction"]], "Outliers in the X direction": [[216, "outliers-in-the-x-direction"]], "Tweedie regression on insurance claims": [[217, "tweedie-regression-on-insurance-claims"]], "Loading datasets, basic feature extraction and target definitions": [[217, "loading-datasets-basic-feature-extraction-and-target-definitions"]], "Frequency model \u2013 Poisson distribution": [[217, "frequency-model-poisson-distribution"]], "Severity Model -  Gamma distribution": [[217, "severity-model-gamma-distribution"]], "Pure Premium Modeling via a Product Model vs single TweedieRegressor": [[217, "pure-premium-modeling-via-a-product-model-vs-single-tweedieregressor"]], "Comparison of Manifold Learning methods": [[220, "comparison-of-manifold-learning-methods"]], "Define algorithms for the manifold learning": [[220, "define-algorithms-for-the-manifold-learning"]], "Locally Linear Embeddings": [[220, "locally-linear-embeddings"]], "Isomap Embedding": [[220, "isomap-embedding"]], "Multidimensional scaling": [[220, "multidimensional-scaling"]], "Spectral embedding for non-linear dimensionality reduction": [[220, "spectral-embedding-for-non-linear-dimensionality-reduction"]], "T-distributed Stochastic Neighbor Embedding": [[220, "t-distributed-stochastic-neighbor-embedding"]], "Manifold learning on handwritten digits: Locally Linear Embedding, Isomap\u2026": [[221, "manifold-learning-on-handwritten-digits-locally-linear-embedding-isomap"]], "Load digits dataset": [[221, "load-digits-dataset"]], "Helper function to plot embedding": [[221, "helper-function-to-plot-embedding"]], "Embedding techniques comparison": [[221, "embedding-techniques-comparison"]], "Manifold Learning methods on a severed sphere": [[222, "manifold-learning-methods-on-a-severed-sphere"]], "Multi-dimensional scaling": [[223, "multi-dimensional-scaling"]], "Swiss Roll And Swiss-Hole Reduction": [[224, "swiss-roll-and-swiss-hole-reduction"]], "Swiss Roll": [[224, "swiss-roll"]], "Swiss-Hole": [[224, "swiss-hole"]], "t-SNE: The effect of various perplexity values on the shape": [[225, "t-sne-the-effect-of-various-perplexity-values-on-the-shape"]], "Comparing anomaly detection algorithms for outlier detection on toy datasets": [[228, "comparing-anomaly-detection-algorithms-for-outlier-detection-on-toy-datasets"]], "Visualizations with Display Objects": [[229, "visualizations-with-display-objects"]], "Load Data and train model": [[229, "load-data-and-train-model"]], "Create ConfusionMatrixDisplay": [[229, "create-confusionmatrixdisplay"]], "Create RocCurveDisplay": [[229, "create-roccurvedisplay"]], "Create PrecisionRecallDisplay": [[229, "create-precisionrecalldisplay"]], "Combining the display objects into a single plot": [[229, "combining-the-display-objects-into-a-single-plot"]], "Displaying estimators and complex pipelines": [[230, "displaying-estimators-and-complex-pipelines"]], "Compact text representation": [[230, "compact-text-representation"]], "Rich HTML representation": [[230, "rich-html-representation"]], "Isotonic Regression": [[231, "isotonic-regression"]], "The Johnson-Lindenstrauss bound for embedding with random projections": [[232, "the-johnson-lindenstrauss-bound-for-embedding-with-random-projections"]], "Theoretical bounds": [[232, "theoretical-bounds"]], "Empirical validation": [[232, "empirical-validation"]], "Remarks": [[232, "remarks"]], "Explicit feature map approximation for RBF kernels": [[233, "explicit-feature-map-approximation-for-rbf-kernels"]], "Python package and dataset imports, load dataset": [[233, "python-package-and-dataset-imports-load-dataset"]], "Timing and accuracy plots": [[233, "timing-and-accuracy-plots"]], "Decision Surfaces of RBF Kernel SVM and Linear SVM": [[233, "decision-surfaces-of-rbf-kernel-svm-and-linear-svm"]], "Comparison of kernel ridge regression and SVR": [[234, "comparison-of-kernel-ridge-regression-and-svr"]], "Construct the kernel-based regression models": [[234, "construct-the-kernel-based-regression-models"]], "Compare times of SVR and Kernel Ridge Regression": [[234, "compare-times-of-svr-and-kernel-ridge-regression"]], "Look at the results": [[234, "look-at-the-results"], [345, "look-at-the-results"]], "Visualize training and prediction times": [[234, "visualize-training-and-prediction-times"]], "Visualize the learning curves": [[234, "visualize-the-learning-curves"]], "Metadata Routing": [[235, "metadata-routing"], [321, "metadata-routing"], [393, "metadata-routing"], [398, "metadata-routing"], [1044, "metadata-routing"], [1044, "id1"], [1044, "id4"], [1045, "metadata-routing"]], "Estimators": [[235, "estimators"], [362, "estimators"], [362, "id2"], [381, "estimators"], [403, "estimators"], [406, "estimators"]], "Router and Consumer": [[235, "router-and-consumer"]], "Simple Pipeline": [[235, "simple-pipeline"]], "Deprecation / Default Value Change": [[235, "deprecation-default-value-change"]], "Third Party Development and scikit-learn Dependency": [[235, "third-party-development-and-scikit-learn-dependency"]], "Multilabel classification": [[236, "multilabel-classification"], [988, "multilabel-classification"]], "Face completion with a multi-output estimators": [[237, "face-completion-with-a-multi-output-estimators"]], "Evaluation of outlier detection estimators": [[238, "evaluation-of-outlier-detection-estimators"]], "Dataset preprocessing and model training": [[238, "dataset-preprocessing-and-model-training"]], "KDDCup99 - SA dataset": [[238, "kddcup99-sa-dataset"]], "Forest covertypes dataset": [[238, "forest-covertypes-dataset"]], "Ames Housing dataset": [[238, "ames-housing-dataset"]], "Cardiotocography dataset": [[238, "cardiotocography-dataset"]], "Plot and interpret results": [[238, "plot-and-interpret-results"]], "Ablation study": [[238, "ablation-study"]], "Advanced Plotting With Partial Dependence": [[239, "advanced-plotting-with-partial-dependence"]], "Train models on the diabetes dataset": [[239, "train-models-on-the-diabetes-dataset"]], "Plotting partial dependence for two features": [[239, "plotting-partial-dependence-for-two-features"]], "Plotting partial dependence of the two models together": [[239, "plotting-partial-dependence-of-the-two-models-together"]], "Plotting partial dependence for one feature": [[239, "plotting-partial-dependence-for-one-feature"]], "Displaying Pipelines": [[240, "displaying-pipelines"]], "Displaying a Pipeline with a Preprocessing Step and Classifier": [[240, "displaying-a-pipeline-with-a-preprocessing-step-and-classifier"]], "Displaying a Pipeline Chaining Multiple Preprocessing Steps & Classifier": [[240, "displaying-a-pipeline-chaining-multiple-preprocessing-steps-classifier"]], "Displaying a Pipeline and Dimensionality Reduction and Classifier": [[240, "displaying-a-pipeline-and-dimensionality-reduction-and-classifier"]], "Displaying a Complex Pipeline Chaining a Column Transformer": [[240, "displaying-a-complex-pipeline-chaining-a-column-transformer"]], "Displaying a Grid Search over a Pipeline with a Classifier": [[240, "displaying-a-grid-search-over-a-pipeline-with-a-classifier"]], "ROC Curve with Visualization API": [[241, "roc-curve-with-visualization-api"]], "Load Data and Train a SVC": [[241, "load-data-and-train-a-svc"]], "Plotting the ROC Curve": [[241, "plotting-the-roc-curve"]], "Training a Random Forest and Plotting the ROC Curve": [[241, "training-a-random-forest-and-plotting-the-roc-curve"]], "Introducing the set_output API": [[242, "introducing-the-set-output-api"]], "Concentration Prior Type Analysis of Variation Bayesian Gaussian Mixture": [[245, "concentration-prior-type-analysis-of-variation-bayesian-gaussian-mixture"]], "Gaussian Mixture Model Ellipsoids": [[246, "gaussian-mixture-model-ellipsoids"]], "GMM covariances": [[247, "gmm-covariances"]], "GMM Initialization Methods": [[248, "gmm-initialization-methods"]], "Density Estimation for a Gaussian mixture": [[249, "density-estimation-for-a-gaussian-mixture"]], "Gaussian Mixture Model Selection": [[250, "gaussian-mixture-model-selection"]], "Plot the BIC scores": [[250, "plot-the-bic-scores"]], "Plot the best model": [[250, "plot-the-best-model"]], "Gaussian Mixture Model Sine Curve": [[251, "gaussian-mixture-model-sine-curve"]], "Confusion matrix": [[254, "confusion-matrix"], [987, "confusion-matrix"]], "Visualizing cross-validation behavior in scikit-learn": [[255, "visualizing-cross-validation-behavior-in-scikit-learn"]], "Visualize our data": [[255, "visualize-our-data"]], "Define a function to visualize cross-validation behavior": [[255, "define-a-function-to-visualize-cross-validation-behavior"]], "Visualize cross-validation indices for many CV objects": [[255, "visualize-cross-validation-indices-for-many-cv-objects"]], "Plotting Cross-Validated Predictions": [[256, "plotting-cross-validated-predictions"]], "Detection error tradeoff (DET) curve": [[257, "detection-error-tradeoff-det-curve"]], "Generate synthetic data": [[257, "generate-synthetic-data"]], "Define the classifiers": [[257, "define-the-classifiers"]], "Plot ROC and DET curves": [[257, "plot-roc-and-det-curves"]], "Custom refit strategy of a grid search with cross-validation": [[258, "custom-refit-strategy-of-a-grid-search-with-cross-validation"]], "The dataset": [[258, "the-dataset"]], "Define our grid-search strategy": [[258, "define-our-grid-search-strategy"]], "Tuning hyper-parameters": [[258, "tuning-hyper-parameters"]], "Balance model complexity and cross-validated score": [[259, "balance-model-complexity-and-cross-validated-score"]], "Statistical comparison of models using grid search": [[260, "statistical-comparison-of-models-using-grid-search"]], "Comparing two models: frequentist approach": [[260, "comparing-two-models-frequentist-approach"]], "Comparing two models: Bayesian approach": [[260, "comparing-two-models-bayesian-approach"]], "Region of Practical Equivalence": [[260, "region-of-practical-equivalence"]], "Pairwise comparison of all models: frequentist approach": [[260, "pairwise-comparison-of-all-models-frequentist-approach"]], "Pairwise comparison of all models: Bayesian approach": [[260, "pairwise-comparison-of-all-models-bayesian-approach"]], "Take-home messages": [[260, "take-home-messages"]], "Sample pipeline for text feature extraction and evaluation": [[261, "sample-pipeline-for-text-feature-extraction-and-evaluation"]], "Data loading": [[261, "data-loading"]], "Pipeline with hyperparameter tuning": [[261, "pipeline-with-hyperparameter-tuning"]], "Plotting Learning Curves and Checking Models\u2019 Scalability": [[262, "plotting-learning-curves-and-checking-models-scalability"]], "Learning Curve": [[262, "learning-curve"]], "Complexity analysis": [[262, "complexity-analysis"]], "Class Likelihood Ratios to measure classification performance": [[263, "class-likelihood-ratios-to-measure-classification-performance"]], "Pre-test vs. post-test analysis": [[263, "pre-test-vs-post-test-analysis"]], "Cross-validation of likelihood ratios": [[263, "cross-validation-of-likelihood-ratios"]], "Invariance with respect to prevalence": [[263, "invariance-with-respect-to-prevalence"]], "Demonstration of multi-metric evaluation on cross_val_score and GridSearchCV": [[264, "demonstration-of-multi-metric-evaluation-on-cross-val-score-and-gridsearchcv"]], "Running GridSearchCV using multiple evaluation metrics": [[264, "running-gridsearchcv-using-multiple-evaluation-metrics"]], "Plotting the result": [[264, "plotting-the-result"]], "Nested versus non-nested cross-validation": [[265, "nested-versus-non-nested-cross-validation"]], "See Also:": [[265, null], [408, null]], "Test with permutations the significance of a classification score": [[266, "test-with-permutations-the-significance-of-a-classification-score"]], "Permutation test score": [[266, "permutation-test-score"], [411, "permutation-test-score"]], "Original data": [[266, "original-data"], [305, "original-data"]], "Random data": [[266, "random-data"]], "Precision-Recall": [[267, "precision-recall"]], "In binary classification settings": [[267, "in-binary-classification-settings"]], "Dataset and model": [[267, "dataset-and-model"]], "Plot the Precision-Recall curve": [[267, "plot-the-precision-recall-curve"]], "In multi-label settings": [[267, "in-multi-label-settings"]], "Create multi-label data, fit, and predict": [[267, "create-multi-label-data-fit-and-predict"]], "The average precision score in multi-label settings": [[267, "the-average-precision-score-in-multi-label-settings"]], "Plot the micro-averaged Precision-Recall curve": [[267, "plot-the-micro-averaged-precision-recall-curve"]], "Plot Precision-Recall curve for each class and iso-f1 curves": [[267, "plot-precision-recall-curve-for-each-class-and-iso-f1-curves"]], "Comparing randomized search and grid search for hyperparameter estimation": [[268, "comparing-randomized-search-and-grid-search-for-hyperparameter-estimation"]], "Multiclass Receiver Operating Characteristic (ROC)": [[269, "multiclass-receiver-operating-characteristic-roc"]], "Load and prepare data": [[269, "load-and-prepare-data"], [270, "load-and-prepare-data"], [310, "load-and-prepare-data"]], "One-vs-Rest multiclass ROC": [[269, "one-vs-rest-multiclass-roc"]], "ROC curve showing a specific class": [[269, "roc-curve-showing-a-specific-class"]], "ROC curve using micro-averaged OvR": [[269, "roc-curve-using-micro-averaged-ovr"]], "ROC curve using the OvR macro-average": [[269, "roc-curve-using-the-ovr-macro-average"]], "Plot all OvR ROC curves together": [[269, "plot-all-ovr-roc-curves-together"]], "One-vs-One multiclass ROC": [[269, "one-vs-one-multiclass-roc"]], "ROC curve using the OvO macro-average": [[269, "roc-curve-using-the-ovo-macro-average"]], "Plot all OvO ROC curves together": [[269, "plot-all-ovo-roc-curves-together"]], "Receiver Operating Characteristic (ROC) with cross validation": [[270, "receiver-operating-characteristic-roc-with-cross-validation"]], "Classification and ROC analysis": [[270, "classification-and-roc-analysis"]], "Comparison between grid search and successive halving": [[271, "comparison-between-grid-search-and-successive-halving"]], "Successive Halving Iterations": [[272, "successive-halving-iterations"]], "Number of candidates and amount of resource at each iteration": [[272, "number-of-candidates-and-amount-of-resource-at-each-iteration"]], "Train error vs Test error": [[273, "train-error-vs-test-error"]], "Compute train and test errors": [[273, "compute-train-and-test-errors"]], "Plot results functions": [[273, "plot-results-functions"]], "Underfitting vs. Overfitting": [[274, "underfitting-vs-overfitting"]], "Plotting Validation Curves": [[275, "plotting-validation-curves"]], "Overview of multiclass training meta-estimators": [[278, "overview-of-multiclass-training-meta-estimators"]], "The Yeast UCI dataset": [[278, "the-yeast-uci-dataset"]], "Strategies comparison": [[278, "strategies-comparison"]], "The importance of hyperparameters search": [[278, "the-importance-of-hyperparameters-search"]], "Multilabel classification using a classifier chain": [[281, "multilabel-classification-using-a-classifier-chain"]], "Loading a dataset": [[281, "loading-a-dataset"]], "LogisticRegression wrapped by OneVsRestClassifier": [[281, "logisticregression-wrapped-by-onevsrestclassifier"]], "Chain of binary classifiers": [[281, "chain-of-binary-classifiers"]], "Results interpretation": [[281, "results-interpretation"]], "Approximate nearest neighbors in TSNE": [[283, "approximate-nearest-neighbors-in-tsne"]], "Caching nearest neighbors": [[285, "caching-nearest-neighbors"]], "Nearest Neighbors Classification": [[286, "nearest-neighbors-classification"], [990, "nearest-neighbors-classification"]], "K-nearest neighbors classifier": [[286, "k-nearest-neighbors-classifier"]], "Decision boundary": [[286, "decision-boundary"]], "Kernel Density Estimation": [[287, "kernel-density-estimation"], [413, "kernel-density-estimation"]], "Simple 1D Kernel Density Estimation": [[288, "simple-1d-kernel-density-estimation"]], "Novelty detection with Local Outlier Factor (LOF)": [[289, "novelty-detection-with-local-outlier-factor-lof"]], "Outlier detection with Local Outlier Factor (LOF)": [[290, "outlier-detection-with-local-outlier-factor-lof"]], "Generate data with outliers": [[290, "generate-data-with-outliers"]], "Fit the model for outlier detection (default)": [[290, "fit-the-model-for-outlier-detection-default"]], "Comparing Nearest Neighbors with and without Neighborhood Components Analysis": [[291, "comparing-nearest-neighbors-with-and-without-neighborhood-components-analysis"]], "Dimensionality Reduction with Neighborhood Components Analysis": [[292, "dimensionality-reduction-with-neighborhood-components-analysis"]], "Neighborhood Components Analysis Illustration": [[293, "neighborhood-components-analysis-illustration"]], "Original points": [[293, "original-points"]], "Learning an embedding": [[293, "learning-an-embedding"]], "Nearest Centroid Classification": [[294, "nearest-centroid-classification"]], "Nearest Neighbors regression": [[295, "nearest-neighbors-regression"]], "Kernel Density Estimate of Species Distributions": [[296, "kernel-density-estimate-of-species-distributions"]], "Varying regularization in Multi-layer Perceptron": [[299, "varying-regularization-in-multi-layer-perceptron"]], "Compare Stochastic learning strategies for MLPClassifier": [[300, "compare-stochastic-learning-strategies-for-mlpclassifier"]], "Visualization of MLP weights on MNIST": [[301, "visualization-of-mlp-weights-on-mnist"]], "Restricted Boltzmann Machine features for digit classification": [[302, "restricted-boltzmann-machine-features-for-digit-classification"]], "Models definition": [[302, "models-definition"]], "Training": [[302, "training"], [990, "training"]], "Plotting": [[302, "plotting"], [406, "plotting"], [406, "id7"], [406, "id9"]], "Compare the effect of different scalers on data with outliers": [[305, "compare-the-effect-of-different-scalers-on-data-with-outliers"]], "StandardScaler": [[305, "standardscaler"]], "MinMaxScaler": [[305, "minmaxscaler"]], "MaxAbsScaler": [[305, "maxabsscaler"]], "RobustScaler": [[305, "robustscaler"]], "PowerTransformer": [[305, "powertransformer"]], "QuantileTransformer (uniform output)": [[305, "quantiletransformer-uniform-output"]], "QuantileTransformer (Gaussian output)": [[305, "quantiletransformer-gaussian-output"]], "Normalizer": [[305, "normalizer"]], "Using KBinsDiscretizer to discretize continuous features": [[306, "using-kbinsdiscretizer-to-discretize-continuous-features"]], "Feature discretization": [[307, "feature-discretization"]], "Demonstrating the different strategies of KBinsDiscretizer": [[308, "demonstrating-the-different-strategies-of-kbinsdiscretizer"]], "Map data to a normal distribution": [[309, "map-data-to-a-normal-distribution"]], "Importance of Feature Scaling": [[310, "importance-of-feature-scaling"]], "Effect of rescaling on a k-neighbors models": [[310, "effect-of-rescaling-on-a-k-neighbors-models"]], "Effect of rescaling on a PCA dimensional reduction": [[310, "effect-of-rescaling-on-a-pca-dimensional-reduction"]], "Effect of rescaling on model\u2019s performance": [[310, "effect-of-rescaling-on-model-s-performance"]], "Comparing Target Encoder with Other Encoders": [[311, "comparing-target-encoder-with-other-encoders"]], "Loading Data from OpenML": [[311, "loading-data-from-openml"]], "Training and Evaluating Pipelines with Different Encoders": [[311, "training-and-evaluating-pipelines-with-different-encoders"]], "Native Categorical Feature Support": [[311, "native-categorical-feature-support"]], "Plotting the Results": [[311, "plotting-the-results"]], "Target Encoder\u2019s Internal Cross fitting": [[312, "target-encoder-s-internal-cross-fitting"]], "Create Synthetic Dataset": [[312, "create-synthetic-dataset"]], "Training a Ridge Regressor": [[312, "training-a-ridge-regressor"]], "Release Highlights for scikit-learn 0.22": [[315, "release-highlights-for-scikit-learn-0-22"]], "New plotting API": [[315, "new-plotting-api"]], "Stacking Classifier and Regressor": [[315, "stacking-classifier-and-regressor"]], "Permutation-based feature importance": [[315, "permutation-based-feature-importance"]], "Native support for missing values for gradient boosting": [[315, "native-support-for-missing-values-for-gradient-boosting"]], "Precomputed sparse nearest neighbors graph": [[315, "precomputed-sparse-nearest-neighbors-graph"]], "KNN Based Imputation": [[315, "knn-based-imputation"]], "Tree pruning": [[315, "tree-pruning"]], "Retrieve dataframes from OpenML": [[315, "retrieve-dataframes-from-openml"]], "Checking scikit-learn compatibility of an estimator": [[315, "checking-scikit-learn-compatibility-of-an-estimator"]], "ROC AUC now supports multiclass classification": [[315, "roc-auc-now-supports-multiclass-classification"]], "Release Highlights for scikit-learn 0.23": [[316, "release-highlights-for-scikit-learn-0-23"]], "Generalized Linear Models, and Poisson loss for gradient boosting": [[316, "generalized-linear-models-and-poisson-loss-for-gradient-boosting"]], "Rich visual representation of estimators": [[316, "rich-visual-representation-of-estimators"]], "Scalability and stability improvements to KMeans": [[316, "scalability-and-stability-improvements-to-kmeans"]], "Improvements to the histogram-based Gradient Boosting estimators": [[316, "improvements-to-the-histogram-based-gradient-boosting-estimators"]], "Sample-weight support for Lasso and ElasticNet": [[316, "sample-weight-support-for-lasso-and-elasticnet"]], "Release Highlights for scikit-learn 0.24": [[317, "release-highlights-for-scikit-learn-0-24"]], "Successive Halving estimators for tuning hyper-parameters": [[317, "successive-halving-estimators-for-tuning-hyper-parameters"]], "Native support for categorical features in HistGradientBoosting estimators": [[317, "native-support-for-categorical-features-in-histgradientboosting-estimators"]], "Improved performances of HistGradientBoosting estimators": [[317, "improved-performances-of-histgradientboosting-estimators"]], "New self-training meta-estimator": [[317, "new-self-training-meta-estimator"]], "New SequentialFeatureSelector transformer": [[317, "new-sequentialfeatureselector-transformer"]], "New PolynomialCountSketch kernel approximation function": [[317, "new-polynomialcountsketch-kernel-approximation-function"]], "Individual Conditional Expectation plots": [[317, "individual-conditional-expectation-plots"]], "New Poisson splitting criterion for DecisionTreeRegressor": [[317, "new-poisson-splitting-criterion-for-decisiontreeregressor"]], "New documentation improvements": [[317, "new-documentation-improvements"], [318, "new-documentation-improvements"]], "Release Highlights for scikit-learn 1.0": [[318, "release-highlights-for-scikit-learn-1-0"]], "Keyword and positional arguments": [[318, "keyword-and-positional-arguments"]], "Spline Transformers": [[318, "spline-transformers"]], "Quantile Regressor": [[318, "quantile-regressor"]], "Feature Names Support": [[318, "feature-names-support"]], "A more flexible plotting API": [[318, "a-more-flexible-plotting-api"]], "Online One-Class SVM": [[318, "online-one-class-svm"], [1001, "online-one-class-svm"]], "Histogram-based Gradient Boosting Models are now stable": [[318, "histogram-based-gradient-boosting-models-are-now-stable"]], "Release Highlights for scikit-learn 1.1": [[319, "release-highlights-for-scikit-learn-1-1"]], "Quantile loss in ensemble.HistGradientBoostingRegressor": [[319, "quantile-loss-in-ensemble-histgradientboostingregressor"]], "get_feature_names_out Available in all Transformers": [[319, "get-feature-names-out-available-in-all-transformers"]], "Grouping infrequent categories in OneHotEncoder": [[319, "grouping-infrequent-categories-in-onehotencoder"]], "Performance improvements": [[319, "performance-improvements"]], "MiniBatchNMF: an online version of NMF": [[319, "minibatchnmf-an-online-version-of-nmf"]], "BisectingKMeans: divide and cluster": [[319, "bisectingkmeans-divide-and-cluster"]], "Release Highlights for scikit-learn 1.2": [[320, "release-highlights-for-scikit-learn-1-2"]], "Pandas output with set_output API": [[320, "pandas-output-with-set-output-api"]], "Interaction constraints in Histogram-based Gradient Boosting Trees": [[320, "interaction-constraints-in-histogram-based-gradient-boosting-trees"]], "New and enhanced displays": [[320, "new-and-enhanced-displays"]], "Faster parser in fetch_openml": [[320, "faster-parser-in-fetch-openml"]], "Experimental Array API support in LinearDiscriminantAnalysis": [[320, "experimental-array-api-support-in-lineardiscriminantanalysis"]], "Improved efficiency of many estimators": [[320, "improved-efficiency-of-many-estimators"]], "Release Highlights for scikit-learn 1.3": [[321, "release-highlights-for-scikit-learn-1-3"]], "HDBSCAN: hierarchical density-based clustering": [[321, "hdbscan-hierarchical-density-based-clustering"]], "TargetEncoder: a new category encoding strategy": [[321, "targetencoder-a-new-category-encoding-strategy"]], "Missing values support in decision trees": [[321, "missing-values-support-in-decision-trees"]], "New display model_selection.ValidationCurveDisplay": [[321, "new-display-model-selection-validationcurvedisplay"]], "Gamma loss for gradient boosting": [[321, "gamma-loss-for-gradient-boosting"]], "Grouping infrequent categories in preprocessing.OrdinalEncoder": [[321, "grouping-infrequent-categories-in-preprocessing-ordinalencoder"]], "Release Highlights for scikit-learn 1.4": [[322, "release-highlights-for-scikit-learn-1-4"]], "HistGradientBoosting Natively Supports Categorical DTypes in DataFrames": [[322, "histgradientboosting-natively-supports-categorical-dtypes-in-dataframes"]], "Polars output in set_output": [[322, "polars-output-in-set-output"]], "Missing value support for Random Forest": [[322, "missing-value-support-for-random-forest"]], "Add support for monotonic constraints in tree-based models": [[322, "add-support-for-monotonic-constraints-in-tree-based-models"]], "Enriched estimator displays": [[322, "enriched-estimator-displays"]], "Metadata Routing Support": [[322, "metadata-routing-support"]], "Improved memory and runtime efficiency for PCA on sparse data": [[322, "improved-memory-and-runtime-efficiency-for-pca-on-sparse-data"]], "Label Propagation digits: Demonstrating performance": [[325, "label-propagation-digits-demonstrating-performance"]], "Semi-supervised learning": [[325, "semi-supervised-learning"], [1000, "semi-supervised-learning"]], "Plot the most uncertain predictions": [[325, "plot-the-most-uncertain-predictions"]], "Label Propagation digits active learning": [[326, "label-propagation-digits-active-learning"]], "Label Propagation learning a complex structure": [[327, "label-propagation-learning-a-complex-structure"]], "Effect of varying threshold for self-training": [[328, "effect-of-varying-threshold-for-self-training"]], "Semi-supervised Classification on a Text Dataset": [[329, "semi-supervised-classification-on-a-text-dataset"]], "Decision boundary of semi-supervised classifiers versus SVM on the Iris dataset": [[330, "decision-boundary-of-semi-supervised-classifiers-versus-svm-on-the-iris-dataset"]], "SVM with custom kernel": [[334, "svm-with-custom-kernel"]], "Plot different SVM classifiers in the iris dataset": [[335, "plot-different-svm-classifiers-in-the-iris-dataset"]], "Plot the support vectors in LinearSVC": [[336, "plot-the-support-vectors-in-linearsvc"]], "One-class SVM with non-linear kernel (RBF)": [[337, "one-class-svm-with-non-linear-kernel-rbf"]], "RBF SVM parameters": [[338, "rbf-svm-parameters"]], "Load and prepare data set": [[338, "load-and-prepare-data-set"]], "Train classifiers": [[338, "train-classifiers"]], "SVM: Maximum margin separating hyperplane": [[339, "svm-maximum-margin-separating-hyperplane"]], "SVM: Separating hyperplane for unbalanced classes": [[340, "svm-separating-hyperplane-for-unbalanced-classes"]], "SVM-Anova: SVM with univariate feature selection": [[341, "svm-anova-svm-with-univariate-feature-selection"]], "Load some data to play with": [[341, "load-some-data-to-play-with"]], "Create the pipeline": [[341, "create-the-pipeline"]], "Plot the cross-validation score as a function of percentile of features": [[341, "plot-the-cross-validation-score-as-a-function-of-percentile-of-features"]], "Plot classification boundaries with different SVM Kernels": [[342, "plot-classification-boundaries-with-different-svm-kernels"]], "Creating a dataset": [[342, "creating-a-dataset"]], "Training SVC model and plotting decision boundaries": [[342, "training-svc-model-and-plotting-decision-boundaries"]], "Linear kernel": [[342, "linear-kernel"], [985, "linear-kernel"], [1019, "linear-kernel"]], "Polynomial kernel": [[342, "polynomial-kernel"], [985, "polynomial-kernel"], [1019, "polynomial-kernel"]], "RBF kernel": [[342, "rbf-kernel"], [985, "rbf-kernel"]], "Sigmoid kernel": [[342, "sigmoid-kernel"], [985, "sigmoid-kernel"], [1019, "sigmoid-kernel"]], "SVM Margins Example": [[343, "svm-margins-example"]], "Non-linear SVM": [[344, "non-linear-svm"]], "Support Vector Regression (SVR) using linear and non-linear kernels": [[345, "support-vector-regression-svr-using-linear-and-non-linear-kernels"]], "Scaling the regularization parameter for SVCs": [[346, "scaling-the-regularization-parameter-for-svcs"]], "L1-penalty case": [[346, "l1-penalty-case"]], "L2-penalty case": [[346, "l2-penalty-case"]], "SVM Tie Breaking Example": [[347, "svm-tie-breaking-example"]], "SVM: Weighted samples": [[348, "svm-weighted-samples"]], "Classification of text documents using sparse features": [[351, "classification-of-text-documents-using-sparse-features"]], "Loading and vectorizing the 20 newsgroups text dataset": [[351, "loading-and-vectorizing-the-20-newsgroups-text-dataset"]], "Analysis of a bag-of-words document classifier": [[351, "analysis-of-a-bag-of-words-document-classifier"]], "Model without metadata stripping": [[351, "model-without-metadata-stripping"]], "Model with metadata stripping": [[351, "model-with-metadata-stripping"]], "Benchmarking classifiers": [[351, "benchmarking-classifiers"]], "Plot accuracy, training and test time of each classifier": [[351, "plot-accuracy-training-and-test-time-of-each-classifier"]], "Clustering text documents using k-means": [[352, "clustering-text-documents-using-k-means"]], "Loading text data": [[352, "loading-text-data"]], "Quantifying the quality of clustering results": [[352, "quantifying-the-quality-of-clustering-results"]], "K-means clustering on text features": [[352, "k-means-clustering-on-text-features"]], "Feature Extraction using TfidfVectorizer": [[352, "feature-extraction-using-tfidfvectorizer"]], "Clustering sparse data with k-means": [[352, "clustering-sparse-data-with-k-means"]], "Performing dimensionality reduction using LSA": [[352, "performing-dimensionality-reduction-using-lsa"]], "Top terms per cluster": [[352, "top-terms-per-cluster"]], "HashingVectorizer": [[352, "hashingvectorizer"]], "Clustering evaluation summary": [[352, "clustering-evaluation-summary"]], "FeatureHasher and DictVectorizer Comparison": [[353, "featurehasher-and-dictvectorizer-comparison"]], "Load Data": [[353, "load-data"]], "Define preprocessing functions": [[353, "define-preprocessing-functions"]], "DictVectorizer": [[353, "dictvectorizer"]], "FeatureHasher": [[353, "featurehasher"]], "Comparison with special purpose text vectorizers": [[353, "comparison-with-special-purpose-text-vectorizers"]], "TfidfVectorizer": [[353, "tfidfvectorizer"]], "Post pruning decision trees with cost complexity pruning": [[356, "post-pruning-decision-trees-with-cost-complexity-pruning"]], "Total impurity of leaves vs effective alphas of pruned tree": [[356, "total-impurity-of-leaves-vs-effective-alphas-of-pruned-tree"]], "Accuracy vs alpha for training and testing sets": [[356, "accuracy-vs-alpha-for-training-and-testing-sets"]], "Plot the decision surface of decision trees trained on the iris dataset": [[357, "plot-the-decision-surface-of-decision-trees-trained-on-the-iris-dataset"]], "Decision Tree Regression": [[358, "decision-tree-regression"]], "Multi-output Decision Tree Regression": [[359, "multi-output-decision-tree-regression"]], "Understanding the decision tree structure": [[360, "understanding-the-decision-tree-structure"]], "Train tree classifier": [[360, "train-tree-classifier"]], "Tree structure": [[360, "tree-structure"]], "What is the values array used here?": [[360, "what-is-the-values-array-used-here"]], "Decision path": [[360, "decision-path"]], "Common pitfalls and recommended practices": [[362, "common-pitfalls-and-recommended-practices"]], "Inconsistent preprocessing": [[362, "inconsistent-preprocessing"]], "Data leakage": [[362, "data-leakage"]], "How to avoid data leakage": [[362, "how-to-avoid-data-leakage"]], "Data leakage during pre-processing": [[362, "data-leakage-during-pre-processing"]], "Controlling randomness": [[362, "controlling-randomness"]], "Using None or RandomState instances, and repeated calls to fit and split": [[362, "using-none-or-randomstate-instances-and-repeated-calls-to-fit-and-split"]], "CV splitters": [[362, "cv-splitters"], [362, "id3"]], "Common pitfalls and subtleties": [[362, "common-pitfalls-and-subtleties"]], "General recommendations": [[362, "general-recommendations"]], "Getting reproducible results across multiple executions": [[362, "getting-reproducible-results-across-multiple-executions"]], "Robustness of cross-validation results": [[362, "robustness-of-cross-validation-results"]], "Computing with scikit-learn": [[365, "computing-with-scikit-learn"]], "Computational Performance": [[366, "computational-performance"]], "Bulk versus Atomic mode": [[366, "bulk-versus-atomic-mode"]], "Configuring Scikit-learn for reduced validation overhead": [[366, "configuring-scikit-learn-for-reduced-validation-overhead"]], "Influence of the Number of Features": [[366, "influence-of-the-number-of-features"]], "Influence of the Input Data Representation": [[366, "influence-of-the-input-data-representation"]], "Influence of the Model Complexity": [[366, "influence-of-the-model-complexity"]], "Feature Extraction Latency": [[366, "feature-extraction-latency"]], "Prediction Throughput": [[366, "prediction-throughput"]], "Tips and Tricks": [[366, "tips-and-tricks"]], "Linear algebra libraries": [[366, "linear-algebra-libraries"]], "Limiting Working Memory": [[366, "limiting-working-memory"]], "Model Compression": [[366, "model-compression"]], "Model Reshaping": [[366, "model-reshaping"]], "Links": [[366, "links"]], "Parallelism, resource management, and configuration": [[367, "parallelism-resource-management-and-configuration"]], "Parallelism": [[367, "parallelism"], [976, "parallelism"]], "Higher-level parallelism with joblib": [[367, "higher-level-parallelism-with-joblib"]], "Lower-level parallelism with OpenMP": [[367, "lower-level-parallelism-with-openmp"]], "Parallel NumPy and SciPy routines from numerical libraries": [[367, "parallel-numpy-and-scipy-routines-from-numerical-libraries"]], "Oversubscription: spawning too many threads": [[367, "oversubscription-spawning-too-many-threads"]], "Configuration switches": [[367, "configuration-switches"]], "Python API": [[367, "python-api"]], "Environment variables": [[367, "environment-variables"]], "SKLEARN_ASSUME_FINITE": [[367, "sklearn-assume-finite"]], "SKLEARN_WORKING_MEMORY": [[367, "sklearn-working-memory"]], "SKLEARN_SEED": [[367, "sklearn-seed"]], "SKLEARN_TESTS_GLOBAL_RANDOM_SEED": [[367, "sklearn-tests-global-random-seed"]], "SKLEARN_SKIP_NETWORK_TESTS": [[367, "sklearn-skip-network-tests"]], "SKLEARN_RUN_FLOAT32_TESTS": [[367, "sklearn-run-float32-tests"]], "SKLEARN_ENABLE_DEBUG_CYTHON_DIRECTIVES": [[367, "sklearn-enable-debug-cython-directives"]], "SKLEARN_BUILD_ENABLE_DEBUG_SYMBOLS": [[367, "sklearn-build-enable-debug-symbols"]], "SKLEARN_PAIRWISE_DIST_CHUNK_SIZE": [[367, "sklearn-pairwise-dist-chunk-size"]], "SKLEARN_WARNINGS_AS_ERRORS": [[367, "sklearn-warnings-as-errors"]], "Strategies to scale computationally: bigger data": [[368, "strategies-to-scale-computationally-bigger-data"]], "Scaling with instances using out-of-core learning": [[368, "scaling-with-instances-using-out-of-core-learning"]], "Streaming instances": [[368, "streaming-instances"]], "Extracting features": [[368, "extracting-features"]], "Incremental learning": [[368, "incremental-learning"]], "Notes": [[368, "notes"]], "Dataset transformations": [[371, "dataset-transformations"]], "Dataset loading utilities": [[372, "dataset-loading-utilities"], [384, "dataset-loading-utilities"]], "Loading other datasets": [[373, "loading-other-datasets"]], "Sample images": [[373, "sample-images"]], "Examples:": [[373, null], [374, null], [396, null], [404, null], [404, null], [405, null], [407, null], [407, null], [407, null], [407, null], [407, null], [407, null], [407, null], [407, null], [407, null], [407, null], [407, null], [407, null], [407, null], [407, null], [407, null], [408, null], [408, null], [408, null], [408, null], [408, null], [409, null], [409, null], [409, null], [409, null], [409, null], [409, null], [410, null], [412, null], [412, null], [412, null], [412, null], [412, null], [412, null], [412, null], [412, null], [412, null], [412, null], [412, null], [412, null], [413, null], [414, null], [414, null], [414, null], [414, null], [414, null], [414, null], [414, null], [414, null], [414, null], [414, null], [414, null], [414, null], [414, null], [414, null], [416, null], [416, null], [416, null], [416, null], [976, null], [976, null], [976, null], [979, null], [979, null], [979, null], [981, null], [981, null], [981, null], [982, null], [983, null], [983, null], [983, null], [983, null], [983, null], [983, null], [983, null], [983, null], [983, null], [983, null], [983, null], [983, null], [983, null], [983, null], [984, null], [986, null], [986, null], [986, null], [986, null], [987, null], [987, null], [987, null], [987, null], [987, null], [988, null], [990, null], [990, null], [990, null], [990, null], [990, null], [991, null], [991, null], [992, null], [993, null], [993, null], [993, null], [993, null], [993, null], [993, null], [994, null], [995, null], [997, null], [997, null], [997, null], [1001, null], [1001, null], [1002, null], [1002, null], [1002, null], [1002, null], [1002, null], [1002, null], [1003, null], [1003, null], [1003, null], [1003, null], [1024, null]], "Datasets in svmlight / libsvm format": [[373, "datasets-in-svmlight-libsvm-format"]], "Related links:": [[373, null]], "Downloading datasets from the openml.org repository": [[373, "downloading-datasets-from-the-openml-org-repository"]], "Dataset Versions": [[373, "dataset-versions"]], "ARFF parser": [[373, "arff-parser"]], "Loading from external datasets": [[373, "loading-from-external-datasets"], [1012, null]], "Real world datasets": [[374, "real-world-datasets"]], "The Olivetti faces dataset": [[374, "the-olivetti-faces-dataset"]], "The 20 newsgroups text dataset": [[374, "the-20-newsgroups-text-dataset"]], "Data Considerations": [[374, null]], "Recommendation": [[374, null]], "The Labeled Faces in the Wild face recognition dataset": [[374, "the-labeled-faces-in-the-wild-face-recognition-dataset"]], "Forest covertypes": [[374, "forest-covertypes"]], "RCV1 dataset": [[374, "rcv1-dataset"]], "Kddcup 99 dataset": [[374, "kddcup-99-dataset"]], "California Housing dataset": [[374, "california-housing-dataset"]], "Species distribution dataset": [[374, "species-distribution-dataset"]], "Generated datasets": [[375, "generated-datasets"]], "Generators for classification and clustering": [[375, "generators-for-classification-and-clustering"]], "Single label": [[375, "single-label"]], "Multilabel": [[375, "multilabel"]], "Generators for regression": [[375, "generators-for-regression"]], "Generators for manifold learning": [[375, "generators-for-manifold-learning"]], "Generators for decomposition": [[375, "generators-for-decomposition"]], "Toy datasets": [[376, "toy-datasets"]], "Iris plants dataset": [[376, "iris-plants-dataset"]], "Diabetes dataset": [[376, "diabetes-dataset"], [1019, null]], "Optical recognition of handwritten digits dataset": [[376, "optical-recognition-of-handwritten-digits-dataset"]], "Linnerrud dataset": [[376, "linnerrud-dataset"]], "Wine recognition dataset": [[376, "wine-recognition-dataset"]], "Breast cancer wisconsin (diagnostic) dataset": [[376, "breast-cancer-wisconsin-diagnostic-dataset"]], "Installing the development version of scikit-learn": [[377, "installing-the-development-version-of-scikit-learn"]], "Installing nightly builds": [[377, "installing-nightly-builds"]], "Building from source": [[377, "building-from-source"]], "Dependencies": [[377, "dependencies"]], "Runtime dependencies": [[377, "runtime-dependencies"]], "Build dependencies": [[377, "build-dependencies"]], "Test dependencies": [[377, "test-dependencies"]], "Building a specific version from a tag": [[377, "building-a-specific-version-from-a-tag"]], "Editable mode": [[377, "editable-mode"]], "Building with Meson": [[377, "building-with-meson"]], "Simplest way to build with Meson": [[377, "simplest-way-to-build-with-meson"]], "More advanced way to build with Meson": [[377, "more-advanced-way-to-build-with-meson"]], "Platform-specific instructions": [[377, "platform-specific-instructions"]], "Windows": [[377, "windows"]], "macOS": [[377, "macos"]], "macOS compilers from conda-forge": [[377, "macos-compilers-from-conda-forge"]], "macOS compilers from Homebrew": [[377, "macos-compilers-from-homebrew"]], "Linux": [[377, "linux"]], "Linux compilers from the system": [[377, "linux-compilers-from-the-system"]], "Linux compilers from conda-forge": [[377, "linux-compilers-from-conda-forge"]], "FreeBSD": [[377, "freebsd"]], "Alternative compilers": [[377, "alternative-compilers"]], "Parallel builds": [[377, "parallel-builds"]], "Bug triaging and issue curation": [[378, "bug-triaging-and-issue-curation"]], "Working on issues to improve them": [[378, "working-on-issues-to-improve-them"]], "Fruitful discussions": [[378, null]], "Working on PRs to help review": [[378, "working-on-prs-to-help-review"]], "Triaging operations for members of the core and contributor experience teams": [[378, "triaging-operations-for-members-of-the-core-and-contributor-experience-teams"]], "Closing issues: a tough call": [[378, null]], "A typical workflow for triaging issues": [[378, "a-typical-workflow-for-triaging-issues"]], "Contributing": [[379, "contributing"], [391, "contributing"]], "Our community, our values": [[379, null]], "Ways to contribute": [[379, "ways-to-contribute"]], "Contributing to related projects": [[379, null]], "Submitting a bug report or a feature request": [[379, "submitting-a-bug-report-or-a-feature-request"]], "How to make a good bug report": [[379, "how-to-make-a-good-bug-report"]], "Contributing code": [[379, "contributing-code"]], "Video resources": [[379, "video-resources"]], "How to contribute": [[379, "how-to-contribute"]], "Learning git:": [[379, null]], "Pull request checklist": [[379, "pull-request-checklist"]], "Continuous Integration (CI)": [[379, "continuous-integration-ci"]], "Stalled pull requests": [[379, "stalled-pull-requests"]], "Stalled and Unclaimed Issues": [[379, "stalled-and-unclaimed-issues"]], "Issues for New Contributors": [[379, "issues-for-new-contributors"]], "good first issue tag": [[379, null]], "Easy tag": [[379, null]], "help wanted tag": [[379, null]], "Documentation": [[379, "documentation"], [1027, "documentation"]], "Building the documentation": [[379, "building-the-documentation"]], "Generated documentation on GitHub Actions": [[379, "generated-documentation-on-github-actions"]], "Testing and improving test coverage": [[379, "testing-and-improving-test-coverage"]], "Writing matplotlib related tests": [[379, "writing-matplotlib-related-tests"]], "Workflow to improve test coverage": [[379, "workflow-to-improve-test-coverage"]], "Monitoring performance": [[379, "monitoring-performance"]], "Issue Tracker Tags": [[379, "issue-tracker-tags"]], "Maintaining backwards compatibility": [[379, "maintaining-backwards-compatibility"]], "Deprecation": [[379, "deprecation"]], "Change the default value of a parameter": [[379, "change-the-default-value-of-a-parameter"]], "Code Review Guidelines": [[379, "code-review-guidelines"]], "Communication Guidelines": [[379, "communication-guidelines"]], "Reading the existing code base": [[379, "reading-the-existing-code-base"]], "Cython Best Practices, Conventions and Knowledge": [[380, "cython-best-practices-conventions-and-knowledge"]], "Tips for developing with Cython in scikit-learn": [[380, "tips-for-developing-with-cython-in-scikit-learn"]], "Tips to ease development": [[380, "tips-to-ease-development"]], "Tips for performance": [[380, "tips-for-performance"]], "Using OpenMP": [[380, "using-openmp"]], "Developing scikit-learn estimators": [[381, "developing-scikit-learn-estimators"]], "APIs of scikit-learn objects": [[381, "apis-of-scikit-learn-objects"]], "Different objects": [[381, "different-objects"]], "Instantiation": [[381, "instantiation"]], "Fitting": [[381, "fitting"]], "Estimated Attributes": [[381, "estimated-attributes"]], "Optional Arguments": [[381, "optional-arguments"]], "Universal attributes": [[381, "universal-attributes"]], "Rolling your own estimator": [[381, "rolling-your-own-estimator"]], "Project template:": [[381, null]], "BaseEstimator and mixins:": [[381, null]], "get_params and set_params": [[381, "get-params-and-set-params"]], "Parameters and init": [[381, "parameters-and-init"]], "Cloning": [[381, "cloning"]], "Pipeline compatibility": [[381, "pipeline-compatibility"]], "Estimator types": [[381, "estimator-types"]], "Specific models": [[381, "specific-models"]], "Estimator Tags": [[381, "estimator-tags"]], "Developer API for set_output": [[381, "developer-api-for-set-output"]], "Developer API for check_is_fitted": [[381, "developer-api-for-check-is-fitted"]], "Developer API for HTML representation": [[381, "developer-api-for-html-representation"]], "Coding guidelines": [[381, "coding-guidelines"]], "Input validation": [[381, "input-validation"]], "Random Numbers": [[381, "random-numbers"]], "Numerical assertions in tests": [[381, "numerical-assertions-in-tests"]], "Developer\u2019s Guide": [[382, "developer-s-guide"]], "Maintainer / core-developer information": [[383, "maintainer-core-developer-information"]], "Releasing": [[383, "releasing"]], "Before a release": [[383, "before-a-release"]], "Preparing a release PR": [[383, "preparing-a-release-pr"]], "Major version release": [[383, "major-version-release"]], "Minor version release (also known as bug-fix release)": [[383, "minor-version-release-also-known-as-bug-fix-release"]], "Making a release": [[383, "making-a-release"]], "Release checklist": [[383, "release-checklist"]], "Merging Pull Requests": [[383, "merging-pull-requests"]], "The scikit-learn.org web site": [[383, "the-scikit-learn-org-web-site"]], "Experimental features": [[383, "experimental-features"]], "Crafting a minimal reproducer for scikit-learn": [[384, "crafting-a-minimal-reproducer-for-scikit-learn"]], "Good practices": [[384, "good-practices"]], "Provide a failing code example with minimal comments": [[384, "provide-a-failing-code-example-with-minimal-comments"]], "Boil down your script to something as small as possible": [[384, "boil-down-your-script-to-something-as-small-as-possible"]], "DO NOT report your data unless it is extremely necessary": [[384, "do-not-report-your-data-unless-it-is-extremely-necessary"]], "Use markdown formatting": [[384, "use-markdown-formatting"]], "Synthetic dataset": [[384, "synthetic-dataset"]], "NumPy": [[384, "numpy"]], "Pandas": [[384, "pandas"]], "make_regression": [[384, "make-regression"]], "make_classification": [[384, "make-classification"]], "make_blobs": [[384, "make-blobs"]], "How to optimize for speed": [[385, "how-to-optimize-for-speed"]], "Python, Cython or C/C++?": [[385, "python-cython-or-c-c"]], "Profiling Python code": [[385, "profiling-python-code"]], "Memory usage profiling": [[385, "memory-usage-profiling"]], "Using Cython": [[385, "using-cython"]], "Profiling compiled extensions": [[385, "profiling-compiled-extensions"]], "Using yep and gperftools": [[385, "using-yep-and-gperftools"]], "Using a debugger, gdb": [[385, "using-a-debugger-gdb"]], "Using gprof": [[385, "using-gprof"]], "Using valgrind / callgrind / kcachegrind": [[385, "using-valgrind-callgrind-kcachegrind"]], "kcachegrind": [[385, "kcachegrind"]], "Multi-core parallelism using joblib.Parallel": [[385, "multi-core-parallelism-using-joblib-parallel"]], "A simple algorithmic trick: warm restarts": [[385, "a-simple-algorithmic-trick-warm-restarts"]], "Developing with the Plotting API": [[386, "developing-with-the-plotting-api"]], "Plotting API Overview": [[386, "plotting-api-overview"]], "Plotting with Multiple Axes": [[386, "plotting-with-multiple-axes"]], "Developers\u2019 Tips and Tricks": [[387, "developers-tips-and-tricks"]], "Productivity and sanity-preserving tips": [[387, "productivity-and-sanity-preserving-tips"]], "Folding and unfolding outdated diffs on pull requests": [[387, "folding-and-unfolding-outdated-diffs-on-pull-requests"]], "Checking out pull requests as remote-tracking branches": [[387, "checking-out-pull-requests-as-remote-tracking-branches"]], "Display code coverage in pull requests": [[387, "display-code-coverage-in-pull-requests"]], "Useful pytest aliases and flags": [[387, "useful-pytest-aliases-and-flags"]], "Standard replies for reviewing": [[387, "standard-replies-for-reviewing"]], "Debugging memory errors in Cython with valgrind": [[387, "debugging-memory-errors-in-cython-with-valgrind"]], "Building and testing for the ARM64 platform on a x86_64 machine": [[387, "building-and-testing-for-the-arm64-platform-on-a-x86-64-machine"]], "Utilities for Developers": [[388, "utilities-for-developers"]], "Validation Tools": [[388, "validation-tools"]], "Efficient Linear Algebra & Array Operations": [[388, "efficient-linear-algebra-array-operations"]], "Efficient Random Sampling": [[388, "efficient-random-sampling"]], "Efficient Routines for Sparse Matrices": [[388, "efficient-routines-for-sparse-matrices"]], "Graph Routines": [[388, "graph-routines"]], "Testing Functions": [[388, "testing-functions"]], "Multiclass and multilabel utility function": [[388, "multiclass-and-multilabel-utility-function"]], "Helper Functions": [[388, "helper-functions"]], "Hash Functions": [[388, "hash-functions"]], "Warnings and Exceptions": [[388, "warnings-and-exceptions"]], "Dispatching": [[389, "dispatching"]], "Frequently Asked Questions": [[391, "frequently-asked-questions"]], "Table of Contents": [[391, "table-of-contents"]], "About the project": [[391, "about-the-project"]], "What is the project name (a lot of people get it wrong)?": [[391, "what-is-the-project-name-a-lot-of-people-get-it-wrong"]], "How do you pronounce the project name?": [[391, "how-do-you-pronounce-the-project-name"]], "Why scikit?": [[391, "why-scikit"]], "Do you support PyPy?": [[391, "do-you-support-pypy"]], "Implementation decisions": [[391, "implementation-decisions"]], "Why is there no support for deep or reinforcement learning? Will there be such support in the future?": [[391, "why-is-there-no-support-for-deep-or-reinforcement-learning-will-there-be-such-support-in-the-future"]], "Will you add graphical models or sequence prediction to scikit-learn?": [[391, "will-you-add-graphical-models-or-sequence-prediction-to-scikit-learn"]], "Why did you remove HMMs from scikit-learn?": [[391, "why-did-you-remove-hmms-from-scikit-learn"]], "Will you add GPU support?": [[391, "will-you-add-gpu-support"]], "Why do categorical variables need preprocessing in scikit-learn, compared to other tools?": [[391, "why-do-categorical-variables-need-preprocessing-in-scikit-learn-compared-to-other-tools"]], "Why does scikit-learn not directly work with, for example, pandas.DataFrame?": [[391, "why-does-scikit-learn-not-directly-work-with-for-example-pandas-dataframe"]], "Do you plan to implement transform for target y in a pipeline?": [[391, "do-you-plan-to-implement-transform-for-target-y-in-a-pipeline"]], "Why are there so many different estimators for linear models?": [[391, "why-are-there-so-many-different-estimators-for-linear-models"]], "How can I contribute to scikit-learn?": [[391, "how-can-i-contribute-to-scikit-learn"]], "Why is my pull request not getting any attention?": [[391, "why-is-my-pull-request-not-getting-any-attention"]], "What are the inclusion criteria for new algorithms?": [[391, "what-are-the-inclusion-criteria-for-new-algorithms"]], "Why are you so selective on what algorithms you include in scikit-learn?": [[391, "why-are-you-so-selective-on-what-algorithms-you-include-in-scikit-learn"]], "Using scikit-learn": [[391, "using-scikit-learn"]], "What\u2019s the best way to get help on scikit-learn usage?": [[391, "what-s-the-best-way-to-get-help-on-scikit-learn-usage"]], "How should I save, export or deploy estimators for production?": [[391, "how-should-i-save-export-or-deploy-estimators-for-production"]], "How can I create a bunch object?": [[391, "how-can-i-create-a-bunch-object"]], "How can I load my own datasets into a format usable by scikit-learn?": [[391, "how-can-i-load-my-own-datasets-into-a-format-usable-by-scikit-learn"]], "How do I deal with string data (or trees, graphs\u2026)?": [[391, "how-do-i-deal-with-string-data-or-trees-graphs"]], "Why do I sometime get a crash/freeze with n_jobs > 1 under OSX or Linux?": [[391, "why-do-i-sometime-get-a-crash-freeze-with-n-jobs-1-under-osx-or-linux"]], "Why does my job use more cores than specified with n_jobs?": [[391, "why-does-my-job-use-more-cores-than-specified-with-n-jobs"]], "How do I set a random_state for an entire execution?": [[391, "how-do-i-set-a-random-state-for-an-entire-execution"]], "Getting Started": [[392, "getting-started"]], "Fitting and predicting: estimator basics": [[392, "fitting-and-predicting-estimator-basics"]], "Transformers and pre-processors": [[392, "transformers-and-pre-processors"]], "Pipelines: chaining pre-processors and estimators": [[392, "pipelines-chaining-pre-processors-and-estimators"]], "Model evaluation": [[392, "model-evaluation"]], "Automatic parameter searches": [[392, "automatic-parameter-searches"]], "Next steps": [[392, "next-steps"]], "Glossary of Common Terms and API Elements": [[393, "glossary-of-common-terms-and-api-elements"]], "General Concepts": [[393, "general-concepts"]], "Class APIs and Estimator Types": [[393, "class-apis-and-estimator-types"]], "Target Types": [[393, "target-types"]], "Methods": [[393, "methods"]], "Parameters": [[393, "parameters"], [414, "parameters"]], "Attributes": [[393, "attributes"]], "Data and sample properties": [[393, "data-and-sample-properties"]], "Scikit-learn governance and decision-making": [[394, "scikit-learn-governance-and-decision-making"]], "Roles And Responsibilities": [[394, "roles-and-responsibilities"]], "Contributors": [[394, "contributors"]], "Core Contributors": [[394, "core-contributors"]], "Communication team": [[394, "communication-team"]], "Documentation team": [[394, "documentation-team"]], "Maintainers": [[394, "maintainers"]], "Technical Committee": [[394, "technical-committee"]], "Decision Making Process": [[394, "decision-making-process"]], "Governance Model Changes": [[394, "governance-model-changes"]], "Enhancement proposals (SLEPs)": [[394, "enhancement-proposals-sleps"]], "Installing scikit-learn": [[397, "installing-scikit-learn"]], "Installing the latest release": [[397, "installing-the-latest-release"]], "Third party distributions of scikit-learn": [[397, "third-party-distributions-of-scikit-learn"]], "Alpine Linux": [[397, "alpine-linux"]], "Arch Linux": [[397, "arch-linux"]], "Debian/Ubuntu": [[397, "debian-ubuntu"]], "Fedora": [[397, "fedora"]], "NetBSD": [[397, "netbsd"]], "MacPorts for Mac OSX": [[397, "macports-for-mac-osx"]], "Anaconda and Enthought Deployment Manager for all supported platforms": [[397, "anaconda-and-enthought-deployment-manager-for-all-supported-platforms"]], "Intel Extension for Scikit-learn": [[397, "intel-extension-for-scikit-learn"]], "WinPython for Windows": [[397, "winpython-for-windows"]], "Troubleshooting": [[397, "troubleshooting"]], "Error caused by file path length limit on Windows": [[397, "error-caused-by-file-path-length-limit-on-windows"]], "Usage Examples": [[398, "usage-examples"]], "Weighted scoring and fitting": [[398, "weighted-scoring-and-fitting"]], "Weighted scoring and unweighted fitting": [[398, "weighted-scoring-and-unweighted-fitting"]], "Unweighted feature selection": [[398, "unweighted-feature-selection"]], "Advanced: Different scoring and fitting weights": [[398, "advanced-different-scoring-and-fitting-weights"]], "API Interface": [[398, "api-interface"]], "Metadata Routing Support Status": [[398, "metadata-routing-support-status"]], "Model persistence": [[401, "model-persistence"]], "Python specific serialization": [[401, "python-specific-serialization"]], "Security & maintainability limitations": [[401, "security-maintainability-limitations"]], "A more secure format: skops": [[401, "a-more-secure-format-skops"]], "Interoperable formats": [[401, "interoperable-formats"]], "Model selection and evaluation": [[402, "model-selection-and-evaluation"]], "Array API support (experimental)": [[403, "array-api-support-experimental"]], "Example usage": [[403, "example-usage"]], "PyTorch Support": [[403, "pytorch-support"]], "Support for Array API-compatible inputs": [[403, "support-for-array-api-compatible-inputs"]], "Metrics": [[403, "metrics"]], "Tools": [[403, "tools"]], "Common estimator checks": [[403, "common-estimator-checks"]], "Note on MPS device support": [[403, "note-on-mps-device-support"]], "Spectral Co-Clustering": [[404, "spectral-co-clustering"]], "Mathematical formulation": [[404, "mathematical-formulation"], [404, "id3"], [407, "mathematical-formulation"], [407, "id16"], [407, "id23"], [407, "id33"], [407, "id37"], [414, "mathematical-formulation"], [990, "mathematical-formulation"], [991, "mathematical-formulation"], [1001, "mathematical-formulation"], [1002, "mathematical-formulation"], [1003, "mathematical-formulation"]], "Spectral Biclustering": [[404, "spectral-biclustering"]], "Biclustering evaluation": [[404, "biclustering-evaluation"]], "Probability calibration": [[405, "probability-calibration"]], "Calibrating a classifier": [[405, "calibrating-a-classifier"]], "Usage": [[405, "usage"], [408, "usage"], [408, "id1"], [414, "usage"], [414, "id24"], [414, "id25"], [414, "id27"], [414, "id35"], [983, "usage"]], "Sigmoid": [[405, "sigmoid"]], "Isotonic": [[405, "isotonic"]], "Multiclass support": [[405, "multiclass-support"]], "API Reference": [[406, "api-reference"]], "sklearn: Settings and information tools": [[406, "module-sklearn"]], "sklearn.base: Base classes and utility functions": [[406, "module-sklearn.base"]], "Base classes": [[406, "base-classes"]], "Functions": [[406, "functions"], [406, "id1"]], "sklearn.calibration: Probability Calibration": [[406, "module-sklearn.calibration"]], "sklearn.cluster: Clustering": [[406, "module-sklearn.cluster"]], "Classes": [[406, "classes"]], "sklearn.compose: Composite Estimators": [[406, "module-sklearn.compose"]], "sklearn.covariance: Covariance Estimators": [[406, "module-sklearn.covariance"]], "sklearn.cross_decomposition: Cross decomposition": [[406, "module-sklearn.cross_decomposition"]], "sklearn.datasets: Datasets": [[406, "module-sklearn.datasets"]], "Loaders": [[406, "loaders"]], "Samples generator": [[406, "samples-generator"]], "sklearn.decomposition: Matrix Decomposition": [[406, "module-sklearn.decomposition"]], "sklearn.discriminant_analysis: Discriminant Analysis": [[406, "module-sklearn.discriminant_analysis"]], "sklearn.dummy: Dummy estimators": [[406, "module-sklearn.dummy"]], "sklearn.ensemble: Ensemble Methods": [[406, "module-sklearn.ensemble"]], "sklearn.exceptions: Exceptions and warnings": [[406, "module-sklearn.exceptions"]], "sklearn.experimental: Experimental": [[406, "module-sklearn.experimental"]], "sklearn.feature_extraction: Feature Extraction": [[406, "module-sklearn.feature_extraction"]], "From images": [[406, "module-sklearn.feature_extraction.image"]], "From text": [[406, "module-sklearn.feature_extraction.text"]], "sklearn.feature_selection: Feature Selection": [[406, "module-sklearn.feature_selection"]], "sklearn.gaussian_process: Gaussian Processes": [[406, "module-sklearn.gaussian_process"]], "Kernels": [[406, "module-sklearn.gaussian_process.kernels"]], "sklearn.impute: Impute": [[406, "module-sklearn.impute"]], "sklearn.inspection: Inspection": [[406, "module-sklearn.inspection"]], "sklearn.isotonic: Isotonic regression": [[406, "module-sklearn.isotonic"]], "sklearn.kernel_approximation: Kernel Approximation": [[406, "module-sklearn.kernel_approximation"]], "sklearn.kernel_ridge: Kernel Ridge Regression": [[406, "module-sklearn.kernel_ridge"]], "sklearn.linear_model: Linear Models": [[406, "module-sklearn.linear_model"]], "Linear classifiers": [[406, "linear-classifiers"]], "Classical linear regressors": [[406, "classical-linear-regressors"]], "Regressors with variable selection": [[406, "regressors-with-variable-selection"]], "Bayesian regressors": [[406, "bayesian-regressors"]], "Multi-task linear regressors with variable selection": [[406, "multi-task-linear-regressors-with-variable-selection"]], "Outlier-robust regressors": [[406, "outlier-robust-regressors"]], "Generalized linear models (GLM) for regression": [[406, "generalized-linear-models-glm-for-regression"]], "sklearn.manifold: Manifold Learning": [[406, "module-sklearn.manifold"]], "sklearn.metrics: Metrics": [[406, "sklearn-metrics-metrics"]], "Model Selection Interface": [[406, "model-selection-interface"]], "Classification metrics": [[406, "classification-metrics"], [987, "classification-metrics"]], "Regression metrics": [[406, "regression-metrics"], [987, "regression-metrics"]], "Multilabel ranking metrics": [[406, "multilabel-ranking-metrics"], [987, "multilabel-ranking-metrics"]], "Clustering metrics": [[406, "clustering-metrics"], [987, "clustering-metrics"]], "Biclustering metrics": [[406, "biclustering-metrics"]], "Distance metrics": [[406, "distance-metrics"]], "Pairwise metrics": [[406, "pairwise-metrics"]], "sklearn.mixture: Gaussian Mixture Models": [[406, "module-sklearn.mixture"]], "sklearn.model_selection: Model Selection": [[406, "module-sklearn.model_selection"]], "Splitter Classes": [[406, "splitter-classes"]], "Splitter Functions": [[406, "splitter-functions"]], "Hyper-parameter optimizers": [[406, "hyper-parameter-optimizers"]], "Model validation": [[406, "model-validation"]], "sklearn.multiclass: Multiclass classification": [[406, "module-sklearn.multiclass"]], "Multiclass classification strategies": [[406, "multiclass-classification-strategies"]], "sklearn.multioutput: Multioutput regression and classification": [[406, "module-sklearn.multioutput"]], "sklearn.naive_bayes: Naive Bayes": [[406, "module-sklearn.naive_bayes"]], "sklearn.neighbors: Nearest Neighbors": [[406, "module-sklearn.neighbors"]], "sklearn.neural_network: Neural network models": [[406, "module-sklearn.neural_network"]], "sklearn.pipeline: Pipeline": [[406, "module-sklearn.pipeline"]], "sklearn.preprocessing: Preprocessing and Normalization": [[406, "module-sklearn.preprocessing"]], "sklearn.random_projection: Random projection": [[406, "module-sklearn.random_projection"]], "sklearn.semi_supervised: Semi-Supervised Learning": [[406, "module-sklearn.semi_supervised"]], "sklearn.svm: Support Vector Machines": [[406, "module-sklearn.svm"]], "sklearn.tree: Decision Trees": [[406, "module-sklearn.tree"]], "sklearn.utils: Utilities": [[406, "module-sklearn.utils"]], "Input and parameter validation": [[406, "module-sklearn.utils.validation"]], "Utilities used in meta-estimators": [[406, "module-sklearn.utils.metaestimators"]], "Utilities to handle weights based on class labels": [[406, "module-sklearn.utils.class_weight"]], "Utilities to deal with multiclass target in classifiers": [[406, "module-sklearn.utils.multiclass"]], "Utilities for optimal mathematical operations": [[406, "module-sklearn.utils.extmath"]], "Utilities to work with sparse matrices and arrays": [[406, "module-sklearn.utils.sparsefuncs"]], "Utilities to work with graphs": [[406, "module-sklearn.utils.graph"]], "Utilities for random sampling": [[406, "module-sklearn.utils.random"]], "Utilities to operate on arrays": [[406, "module-sklearn.utils.arrayfuncs"]], "Metadata routing": [[406, "module-sklearn.utils.metadata_routing"]], "Scikit-learn object discovery": [[406, "module-sklearn.utils.discovery"]], "Scikit-learn compatibility checker": [[406, "module-sklearn.utils.estimator_checks"]], "Utilities for parallel computing": [[406, "module-sklearn.utils.parallel"]], "Recently deprecated": [[406, "recently-deprecated"]], "Input data": [[407, null]], "Overview of clustering methods": [[407, "overview-of-clustering-methods"]], "K-means": [[407, "k-means"]], "Low-level parallelism": [[407, "low-level-parallelism"], [414, "low-level-parallelism"]], "Mini Batch K-Means": [[407, "mini-batch-k-means"]], "Affinity Propagation": [[407, "affinity-propagation"]], "Mean Shift": [[407, "mean-shift"]], "Spectral clustering": [[407, "spectral-clustering"]], "Different label assignment strategies": [[407, "different-label-assignment-strategies"]], "Spectral Clustering Graphs": [[407, "spectral-clustering-graphs"]], "Hierarchical clustering": [[407, "hierarchical-clustering"]], "FeatureAgglomeration": [[407, null]], "Different linkage type: Ward, complete, average, and single linkage": [[407, "different-linkage-type-ward-complete-average-and-single-linkage"]], "Visualization of cluster hierarchy": [[407, "visualization-of-cluster-hierarchy"]], "Adding connectivity constraints": [[407, "adding-connectivity-constraints"]], "Varying the metric": [[407, "varying-the-metric"]], "Bisecting K-Means": [[407, "bisecting-k-means"]], "DBSCAN": [[407, "dbscan"]], "Implementation": [[407, null], [990, "implementation"]], "Memory consumption for large sample sizes": [[407, null]], "HDBSCAN": [[407, "hdbscan"]], "Mutual Reachability Graph": [[407, "mutual-reachability-graph"]], "Hierarchical Clustering": [[407, "id11"]], "OPTICS": [[407, "optics"]], "Comparison with DBSCAN": [[407, null]], "Computational Complexity": [[407, null]], "BIRCH": [[407, "birch"]], "Clustering performance evaluation": [[407, "clustering-performance-evaluation"]], "Rand index": [[407, "rand-index"]], "Advantages": [[407, "advantages"], [407, "id14"], [407, "id21"], [407, "id25"], [407, "id28"], [407, "id31"], [407, "id35"], [407, "id39"]], "Drawbacks": [[407, "drawbacks"], [407, "id15"], [407, "id22"], [407, "id26"], [407, "id29"], [407, "id32"], [407, "id36"], [407, "id40"]], "Mutual Information based scores": [[407, "mutual-information-based-scores"]], "Homogeneity, completeness and V-measure": [[407, "homogeneity-completeness-and-v-measure"]], "Fowlkes-Mallows scores": [[407, "fowlkes-mallows-scores"]], "Silhouette Coefficient": [[407, "silhouette-coefficient"]], "Calinski-Harabasz Index": [[407, "calinski-harabasz-index"]], "Davies-Bouldin Index": [[407, "davies-bouldin-index"]], "Contingency Matrix": [[407, "contingency-matrix"]], "Pair Confusion Matrix": [[407, "pair-confusion-matrix"]], "Pipeline: chaining estimators": [[408, "pipeline-chaining-estimators"]], "Build a pipeline": [[408, "build-a-pipeline"]], "Access pipeline steps": [[408, "access-pipeline-steps"]], "Tracking feature names in a pipeline": [[408, "tracking-feature-names-in-a-pipeline"]], "Access to nested parameters": [[408, "access-to-nested-parameters"]], "Caching transformers: avoid repeated computation": [[408, "caching-transformers-avoid-repeated-computation"]], "Transforming target in regression": [[408, "transforming-target-in-regression"]], "FeatureUnion: composite feature spaces": [[408, "featureunion-composite-feature-spaces"]], "ColumnTransformer for heterogeneous data": [[408, "columntransformer-for-heterogeneous-data"]], "Visualizing Composite Estimators": [[408, "visualizing-composite-estimators"]], "Empirical covariance": [[409, "empirical-covariance"]], "Shrunk Covariance": [[409, "shrunk-covariance"]], "Basic shrinkage": [[409, "basic-shrinkage"]], "Ledoit-Wolf shrinkage": [[409, "ledoit-wolf-shrinkage"]], "Oracle Approximating Shrinkage": [[409, "oracle-approximating-shrinkage"]], "Sparse inverse covariance": [[409, "sparse-inverse-covariance"]], "Robust Covariance Estimation": [[409, "robust-covariance-estimation"]], "Minimum Covariance Determinant": [[409, "minimum-covariance-determinant"]], "PLSCanonical": [[410, "plscanonical"]], "PLSSVD": [[410, "plssvd"]], "PLSRegression": [[410, "plsregression"]], "Canonical Correlation Analysis": [[410, "canonical-correlation-analysis"]], "Cross-validation: evaluating estimator performance": [[411, "cross-validation-evaluating-estimator-performance"]], "Computing cross-validated metrics": [[411, "computing-cross-validated-metrics"]], "Data transformation with held out data": [[411, null]], "The cross_validate function and multiple metric evaluation": [[411, "the-cross-validate-function-and-multiple-metric-evaluation"]], "Obtaining predictions by cross-validation": [[411, "obtaining-predictions-by-cross-validation"]], "Cross validation iterators": [[411, "cross-validation-iterators"]], "Cross-validation iterators for i.i.d. data": [[411, "cross-validation-iterators-for-i-i-d-data"]], "K-fold": [[411, "k-fold"]], "Repeated K-Fold": [[411, "repeated-k-fold"]], "Leave One Out (LOO)": [[411, "leave-one-out-loo"]], "Leave P Out (LPO)": [[411, "leave-p-out-lpo"]], "Random permutations cross-validation a.k.a. Shuffle & Split": [[411, "random-permutations-cross-validation-a-k-a-shuffle-split"]], "Cross-validation iterators with stratification based on class labels": [[411, "cross-validation-iterators-with-stratification-based-on-class-labels"]], "Stratified k-fold": [[411, "stratified-k-fold"]], "Stratified Shuffle Split": [[411, "stratified-shuffle-split"]], "Cross-validation iterators for grouped data": [[411, "cross-validation-iterators-for-grouped-data"]], "Group k-fold": [[411, "group-k-fold"]], "StratifiedGroupKFold": [[411, "stratifiedgroupkfold"]], "Leave One Group Out": [[411, "leave-one-group-out"]], "Leave P Groups Out": [[411, "leave-p-groups-out"]], "Group Shuffle Split": [[411, "group-shuffle-split"]], "Predefined fold-splits / Validation-sets": [[411, "predefined-fold-splits-validation-sets"]], "Using cross-validation iterators to split train and test": [[411, "using-cross-validation-iterators-to-split-train-and-test"]], "Cross validation of time series data": [[411, "cross-validation-of-time-series-data"]], "Time Series Split": [[411, "time-series-split"]], "A note on shuffling": [[411, "a-note-on-shuffling"]], "Cross validation and model selection": [[411, "cross-validation-and-model-selection"]], "Decomposing signals in components (matrix factorization problems)": [[412, "decomposing-signals-in-components-matrix-factorization-problems"]], "Principal component analysis (PCA)": [[412, "principal-component-analysis-pca"]], "Exact PCA and probabilistic interpretation": [[412, "exact-pca-and-probabilistic-interpretation"]], "PCA using randomized SVD": [[412, "pca-using-randomized-svd"]], "Sparse principal components analysis (SparsePCA and MiniBatchSparsePCA)": [[412, "sparse-principal-components-analysis-sparsepca-and-minibatchsparsepca"]], "Kernel Principal Component Analysis (kPCA)": [[412, "kernel-principal-component-analysis-kpca"]], "Exact Kernel PCA": [[412, "exact-kernel-pca"]], "Choice of solver for Kernel PCA": [[412, "choice-of-solver-for-kernel-pca"]], "Truncated singular value decomposition and latent semantic analysis": [[412, "truncated-singular-value-decomposition-and-latent-semantic-analysis"]], "Dictionary Learning": [[412, "dictionary-learning"]], "Generic dictionary learning": [[412, "generic-dictionary-learning"]], "Mini-batch dictionary learning": [[412, "mini-batch-dictionary-learning"]], "Clustering for dictionary learning": [[412, null]], "Factor Analysis": [[412, "factor-analysis"]], "Independent component analysis (ICA)": [[412, "independent-component-analysis-ica"]], "Non-negative matrix factorization (NMF or NNMF)": [[412, "non-negative-matrix-factorization-nmf-or-nnmf"]], "NMF with the Frobenius norm": [[412, "nmf-with-the-frobenius-norm"]], "NMF with a beta-divergence": [[412, "nmf-with-a-beta-divergence"]], "Mini-batch Non Negative Matrix Factorization": [[412, "mini-batch-non-negative-matrix-factorization"]], "Latent Dirichlet Allocation (LDA)": [[412, "latent-dirichlet-allocation-lda"]], "Density Estimation": [[413, "density-estimation"]], "Density Estimation: Histograms": [[413, "density-estimation-histograms"]], "Ensembles: Gradient boosting, random forests, bagging, voting, stacking": [[414, "ensembles-gradient-boosting-random-forests-bagging-voting-stacking"]], "Gradient-boosted trees": [[414, "gradient-boosted-trees"]], "GradientBoostingClassifier vs HistGradientBoostingClassifier": [[414, null]], "Histogram-Based Gradient Boosting": [[414, "histogram-based-gradient-boosting"]], "Missing values support": [[414, "missing-values-support"]], "Sample weight support": [[414, "sample-weight-support"]], "Categorical Features Support": [[414, "categorical-features-support"]], "Interaction constraints": [[414, "interaction-constraints"]], "Why it\u2019s faster": [[414, "why-it-s-faster"]], "GradientBoostingClassifier and GradientBoostingRegressor": [[414, "gradientboostingclassifier-and-gradientboostingregressor"]], "Fitting additional weak-learners": [[414, "fitting-additional-weak-learners"]], "Controlling the tree size": [[414, "controlling-the-tree-size"]], "Loss Functions": [[414, "loss-functions"]], "Shrinkage via learning rate": [[414, "shrinkage-via-learning-rate"]], "Subsampling": [[414, "subsampling"]], "Interpretation with feature importance": [[414, "interpretation-with-feature-importance"]], "Random forests and other randomized tree ensembles": [[414, "random-forests-and-other-randomized-tree-ensembles"]], "Random Forests": [[414, "random-forests"]], "Extremely Randomized Trees": [[414, "extremely-randomized-trees"]], "Parallelization": [[414, "parallelization"]], "Feature importance evaluation": [[414, "feature-importance-evaluation"]], "Totally Random Trees Embedding": [[414, "totally-random-trees-embedding"]], "Bagging meta-estimator": [[414, "bagging-meta-estimator"]], "Voting Classifier": [[414, "voting-classifier"]], "Majority Class Labels (Majority/Hard Voting)": [[414, "majority-class-labels-majority-hard-voting"]], "Weighted Average Probabilities (Soft Voting)": [[414, "weighted-average-probabilities-soft-voting"]], "Using the VotingClassifier with GridSearchCV": [[414, "using-the-votingclassifier-with-gridsearchcv"]], "Voting Regressor": [[414, "voting-regressor"]], "Stacked generalization": [[414, "stacked-generalization"]], "AdaBoost": [[414, "adaboost"]], "Feature extraction": [[415, "feature-extraction"]], "Loading features from dicts": [[415, "loading-features-from-dicts"]], "Feature hashing": [[415, "feature-hashing"]], "Text feature extraction": [[415, "text-feature-extraction"]], "The Bag of Words representation": [[415, "the-bag-of-words-representation"]], "Sparsity": [[415, "sparsity"], [1019, "sparsity"]], "Common Vectorizer usage": [[415, "common-vectorizer-usage"]], "Using stop words": [[415, "using-stop-words"]], "Tf\u2013idf term weighting": [[415, "tfidf-term-weighting"]], "Decoding text files": [[415, "decoding-text-files"]], "Applications and examples": [[415, "applications-and-examples"]], "Limitations of the Bag of Words representation": [[415, "limitations-of-the-bag-of-words-representation"]], "Vectorizing a large text corpus with the hashing trick": [[415, "vectorizing-a-large-text-corpus-with-the-hashing-trick"]], "Customizing the vectorizer classes": [[415, "customizing-the-vectorizer-classes"]], "Image feature extraction": [[415, "image-feature-extraction"]], "Patch extraction": [[415, "patch-extraction"]], "Connectivity graph of an image": [[415, "connectivity-graph-of-an-image"]], "Feature selection": [[416, "feature-selection"]], "Removing features with low variance": [[416, "removing-features-with-low-variance"]], "Feature selection with sparse data": [[416, null]], "Feature selection using SelectFromModel": [[416, "feature-selection-using-selectfrommodel"]], "L1-based feature selection": [[416, "l1-based-feature-selection"]], "Reference": [[416, null], [416, null]], "Tree-based feature selection": [[416, "tree-based-feature-selection"]], "Sequential Feature Selection": [[416, "sequential-feature-selection"]], "Feature selection as part of a pipeline": [[416, "feature-selection-as-part-of-a-pipeline"]], "Gaussian Processes": [[417, "gaussian-processes"]], "Gaussian Process Regression (GPR)": [[417, "gaussian-process-regression-gpr"]], "Gaussian Process Classification (GPC)": [[417, "gaussian-process-classification-gpc"]], "GPC examples": [[417, "gpc-examples"]], "Probabilistic predictions with GPC": [[417, "probabilistic-predictions-with-gpc"]], "Illustration of GPC on the XOR dataset": [[417, "illustration-of-gpc-on-the-xor-dataset"]], "Kernels for Gaussian Processes": [[417, "kernels-for-gaussian-processes"]], "Basic kernels": [[417, "basic-kernels"]], "Kernel operators": [[417, "kernel-operators"]], "Radial basis function (RBF) kernel": [[417, "radial-basis-function-rbf-kernel"]], "Rational quadratic kernel": [[417, "rational-quadratic-kernel"]], "Dot-Product kernel": [[417, "dot-product-kernel"]], "sklearn.cluster.dbscan": [[418, "sklearn-cluster-dbscan"]], "sklearn.decomposition.fastica": [[419, "sklearn-decomposition-fastica"]], "sklearn.covariance.oas": [[420, "sklearn-covariance-oas"]], "sklearn.base.BaseEstimator": [[421, "sklearn-base-baseestimator"]], "Examples using sklearn.base.BaseEstimator": [[421, "examples-using-sklearn-base-baseestimator"]], "sklearn.base.BiclusterMixin": [[422, "sklearn-base-biclustermixin"]], "sklearn.base.ClassNamePrefixFeaturesOutMixin": [[423, "sklearn-base-classnameprefixfeaturesoutmixin"]], "sklearn.base.ClassifierMixin": [[424, "sklearn-base-classifiermixin"]], "Examples using sklearn.base.ClassifierMixin": [[424, "examples-using-sklearn-base-classifiermixin"]], "sklearn.base.ClusterMixin": [[425, "sklearn-base-clustermixin"]], "sklearn.base.DensityMixin": [[426, "sklearn-base-densitymixin"]], "sklearn.base.MetaEstimatorMixin": [[427, "sklearn-base-metaestimatormixin"]], "Examples using sklearn.base.MetaEstimatorMixin": [[427, "examples-using-sklearn-base-metaestimatormixin"]], "sklearn.base.OneToOneFeatureMixin": [[428, "sklearn-base-onetoonefeaturemixin"]], "sklearn.base.OutlierMixin": [[429, "sklearn-base-outliermixin"]], "sklearn.base.RegressorMixin": [[430, "sklearn-base-regressormixin"]], "Examples using sklearn.base.RegressorMixin": [[430, "examples-using-sklearn-base-regressormixin"]], "sklearn.base.TransformerMixin": [[431, "sklearn-base-transformermixin"]], "Examples using sklearn.base.TransformerMixin": [[431, "examples-using-sklearn-base-transformermixin"]], "sklearn.base.clone": [[432, "sklearn-base-clone"]], "sklearn.base.is_classifier": [[433, "sklearn-base-is-classifier"]], "sklearn.base.is_regressor": [[434, "sklearn-base-is-regressor"]], "sklearn.calibration.CalibratedClassifierCV": [[435, "sklearn-calibration-calibratedclassifiercv"]], "Examples using sklearn.calibration.CalibratedClassifierCV": [[435, "examples-using-sklearn-calibration-calibratedclassifiercv"]], "sklearn.calibration.CalibrationDisplay": [[436, "sklearn-calibration-calibrationdisplay"]], "Examples using sklearn.calibration.CalibrationDisplay.from_estimator": [[436, "examples-using-sklearn-calibration-calibrationdisplay-from-estimator"]], "sklearn.calibration.calibration_curve": [[437, "sklearn-calibration-calibration-curve"]], "sklearn.cluster.AffinityPropagation": [[438, "sklearn-cluster-affinitypropagation"]], "Examples using sklearn.cluster.AffinityPropagation": [[438, "examples-using-sklearn-cluster-affinitypropagation"]], "sklearn.cluster.AgglomerativeClustering": [[439, "sklearn-cluster-agglomerativeclustering"]], "Examples using sklearn.cluster.AgglomerativeClustering": [[439, "examples-using-sklearn-cluster-agglomerativeclustering"]], "sklearn.cluster.Birch": [[440, "sklearn-cluster-birch"]], "Examples using sklearn.cluster.Birch": [[440, "examples-using-sklearn-cluster-birch"]], "sklearn.cluster.BisectingKMeans": [[441, "sklearn-cluster-bisectingkmeans"]], "Examples using sklearn.cluster.BisectingKMeans": [[441, "examples-using-sklearn-cluster-bisectingkmeans"]], "sklearn.cluster.DBSCAN": [[442, "sklearn-cluster-dbscan"]], "Examples using sklearn.cluster.DBSCAN": [[442, "examples-using-sklearn-cluster-dbscan"]], "sklearn.cluster.FeatureAgglomeration": [[443, "sklearn-cluster-featureagglomeration"]], "Examples using sklearn.cluster.FeatureAgglomeration": [[443, "examples-using-sklearn-cluster-featureagglomeration"]], "sklearn.cluster.HDBSCAN": [[444, "sklearn-cluster-hdbscan"]], "Examples using sklearn.cluster.HDBSCAN": [[444, "examples-using-sklearn-cluster-hdbscan"]], "sklearn.cluster.KMeans": [[445, "sklearn-cluster-kmeans"]], "Examples using sklearn.cluster.KMeans": [[445, "examples-using-sklearn-cluster-kmeans"]], "sklearn.cluster.MeanShift": [[446, "sklearn-cluster-meanshift"]], "Examples using sklearn.cluster.MeanShift": [[446, "examples-using-sklearn-cluster-meanshift"]], "sklearn.cluster.MiniBatchKMeans": [[447, "sklearn-cluster-minibatchkmeans"]], "Examples using sklearn.cluster.MiniBatchKMeans": [[447, "examples-using-sklearn-cluster-minibatchkmeans"]], "sklearn.cluster.OPTICS": [[448, "sklearn-cluster-optics"]], "Examples using sklearn.cluster.OPTICS": [[448, "examples-using-sklearn-cluster-optics"]], "sklearn.cluster.SpectralBiclustering": [[449, "sklearn-cluster-spectralbiclustering"]], "Examples using sklearn.cluster.SpectralBiclustering": [[449, "examples-using-sklearn-cluster-spectralbiclustering"]], "sklearn.cluster.SpectralClustering": [[450, "sklearn-cluster-spectralclustering"]], "Examples using sklearn.cluster.SpectralClustering": [[450, "examples-using-sklearn-cluster-spectralclustering"]], "sklearn.cluster.SpectralCoclustering": [[451, "sklearn-cluster-spectralcoclustering"]], "Examples using sklearn.cluster.SpectralCoclustering": [[451, "examples-using-sklearn-cluster-spectralcoclustering"]], "sklearn.cluster.affinity_propagation": [[452, "sklearn-cluster-affinity-propagation"]], "Examples using sklearn.cluster.affinity_propagation": [[452, "examples-using-sklearn-cluster-affinity-propagation"]], "sklearn.cluster.cluster_optics_dbscan": [[453, "sklearn-cluster-cluster-optics-dbscan"]], "Examples using sklearn.cluster.cluster_optics_dbscan": [[453, "examples-using-sklearn-cluster-cluster-optics-dbscan"]], "sklearn.cluster.cluster_optics_xi": [[454, "sklearn-cluster-cluster-optics-xi"]], "sklearn.cluster.compute_optics_graph": [[455, "sklearn-cluster-compute-optics-graph"]], "sklearn.cluster.estimate_bandwidth": [[456, "sklearn-cluster-estimate-bandwidth"]], "Examples using sklearn.cluster.estimate_bandwidth": [[456, "examples-using-sklearn-cluster-estimate-bandwidth"]], "sklearn.cluster.k_means": [[457, "sklearn-cluster-k-means"]], "sklearn.cluster.kmeans_plusplus": [[458, "sklearn-cluster-kmeans-plusplus"]], "Examples using sklearn.cluster.kmeans_plusplus": [[458, "examples-using-sklearn-cluster-kmeans-plusplus"]], "sklearn.cluster.mean_shift": [[459, "sklearn-cluster-mean-shift"]], "sklearn.cluster.spectral_clustering": [[460, "sklearn-cluster-spectral-clustering"]], "Examples using sklearn.cluster.spectral_clustering": [[460, "examples-using-sklearn-cluster-spectral-clustering"]], "sklearn.cluster.ward_tree": [[461, "sklearn-cluster-ward-tree"]], "sklearn.compose.ColumnTransformer": [[462, "sklearn-compose-columntransformer"]], "Examples using sklearn.compose.ColumnTransformer": [[462, "examples-using-sklearn-compose-columntransformer"]], "sklearn.compose.TransformedTargetRegressor": [[463, "sklearn-compose-transformedtargetregressor"]], "Examples using sklearn.compose.TransformedTargetRegressor": [[463, "examples-using-sklearn-compose-transformedtargetregressor"]], "sklearn.compose.make_column_selector": [[464, "sklearn-compose-make-column-selector"]], "Examples using sklearn.compose.make_column_selector": [[464, "examples-using-sklearn-compose-make-column-selector"]], "sklearn.compose.make_column_transformer": [[465, "sklearn-compose-make-column-transformer"]], "Examples using sklearn.compose.make_column_transformer": [[465, "examples-using-sklearn-compose-make-column-transformer"]], "sklearn.config_context": [[466, "sklearn-config-context"]], "Examples using sklearn.config_context": [[466, "examples-using-sklearn-config-context"]], "sklearn.covariance.EllipticEnvelope": [[467, "sklearn-covariance-ellipticenvelope"]], "Examples using sklearn.covariance.EllipticEnvelope": [[467, "examples-using-sklearn-covariance-ellipticenvelope"]], "sklearn.covariance.EmpiricalCovariance": [[468, "sklearn-covariance-empiricalcovariance"]], "Examples using sklearn.covariance.EmpiricalCovariance": [[468, "examples-using-sklearn-covariance-empiricalcovariance"]], "sklearn.covariance.GraphicalLasso": [[469, "sklearn-covariance-graphicallasso"]], "sklearn.covariance.GraphicalLassoCV": [[470, "sklearn-covariance-graphicallassocv"]], "Examples using sklearn.covariance.GraphicalLassoCV": [[470, "examples-using-sklearn-covariance-graphicallassocv"]], "sklearn.covariance.LedoitWolf": [[471, "sklearn-covariance-ledoitwolf"]], "Examples using sklearn.covariance.LedoitWolf": [[471, "examples-using-sklearn-covariance-ledoitwolf"]], "sklearn.covariance.MinCovDet": [[472, "sklearn-covariance-mincovdet"]], "Examples using sklearn.covariance.MinCovDet": [[472, "examples-using-sklearn-covariance-mincovdet"]], "sklearn.covariance.OAS": [[473, "sklearn-covariance-oas"]], "Examples using sklearn.covariance.OAS": [[473, "examples-using-sklearn-covariance-oas"]], "sklearn.covariance.ShrunkCovariance": [[474, "sklearn-covariance-shrunkcovariance"]], "Examples using sklearn.covariance.ShrunkCovariance": [[474, "examples-using-sklearn-covariance-shrunkcovariance"]], "sklearn.covariance.empirical_covariance": [[475, "sklearn-covariance-empirical-covariance"]], "Examples using sklearn.covariance.empirical_covariance": [[475, "examples-using-sklearn-covariance-empirical-covariance"]], "sklearn.covariance.graphical_lasso": [[476, "sklearn-covariance-graphical-lasso"]], "sklearn.covariance.ledoit_wolf": [[477, "sklearn-covariance-ledoit-wolf"]], "Examples using sklearn.covariance.ledoit_wolf": [[477, "examples-using-sklearn-covariance-ledoit-wolf"]], "sklearn.covariance.ledoit_wolf_shrinkage": [[478, "sklearn-covariance-ledoit-wolf-shrinkage"]], "sklearn.covariance.shrunk_covariance": [[479, "sklearn-covariance-shrunk-covariance"]], "sklearn.cross_decomposition.CCA": [[480, "sklearn-cross-decomposition-cca"]], "Examples using sklearn.cross_decomposition.CCA": [[480, "examples-using-sklearn-cross-decomposition-cca"]], "sklearn.cross_decomposition.PLSCanonical": [[481, "sklearn-cross-decomposition-plscanonical"]], "Examples using sklearn.cross_decomposition.PLSCanonical": [[481, "examples-using-sklearn-cross-decomposition-plscanonical"]], "sklearn.cross_decomposition.PLSRegression": [[482, "sklearn-cross-decomposition-plsregression"]], "Examples using sklearn.cross_decomposition.PLSRegression": [[482, "examples-using-sklearn-cross-decomposition-plsregression"]], "sklearn.cross_decomposition.PLSSVD": [[483, "sklearn-cross-decomposition-plssvd"]], "sklearn.datasets.clear_data_home": [[484, "sklearn-datasets-clear-data-home"]], "sklearn.datasets.dump_svmlight_file": [[485, "sklearn-datasets-dump-svmlight-file"]], "Examples using sklearn.datasets.dump_svmlight_file": [[485, "examples-using-sklearn-datasets-dump-svmlight-file"]], "sklearn.datasets.fetch_20newsgroups": [[486, "sklearn-datasets-fetch-20newsgroups"]], "Examples using sklearn.datasets.fetch_20newsgroups": [[486, "examples-using-sklearn-datasets-fetch-20newsgroups"]], "sklearn.datasets.fetch_20newsgroups_vectorized": [[487, "sklearn-datasets-fetch-20newsgroups-vectorized"]], "Examples using sklearn.datasets.fetch_20newsgroups_vectorized": [[487, "examples-using-sklearn-datasets-fetch-20newsgroups-vectorized"]], "sklearn.datasets.fetch_california_housing": [[488, "sklearn-datasets-fetch-california-housing"]], "Examples using sklearn.datasets.fetch_california_housing": [[488, "examples-using-sklearn-datasets-fetch-california-housing"]], "sklearn.datasets.fetch_covtype": [[489, "sklearn-datasets-fetch-covtype"]], "Examples using sklearn.datasets.fetch_covtype": [[489, "examples-using-sklearn-datasets-fetch-covtype"]], "sklearn.datasets.fetch_kddcup99": [[490, "sklearn-datasets-fetch-kddcup99"]], "Examples using sklearn.datasets.fetch_kddcup99": [[490, "examples-using-sklearn-datasets-fetch-kddcup99"]], "sklearn.datasets.fetch_lfw_pairs": [[491, "sklearn-datasets-fetch-lfw-pairs"]], "sklearn.datasets.fetch_lfw_people": [[492, "sklearn-datasets-fetch-lfw-people"]], "Examples using sklearn.datasets.fetch_lfw_people": [[492, "examples-using-sklearn-datasets-fetch-lfw-people"]], "sklearn.datasets.fetch_olivetti_faces": [[493, "sklearn-datasets-fetch-olivetti-faces"]], "Examples using sklearn.datasets.fetch_olivetti_faces": [[493, "examples-using-sklearn-datasets-fetch-olivetti-faces"]], "sklearn.datasets.fetch_openml": [[494, "sklearn-datasets-fetch-openml"]], "Examples using sklearn.datasets.fetch_openml": [[494, "examples-using-sklearn-datasets-fetch-openml"]], "sklearn.datasets.fetch_rcv1": [[495, "sklearn-datasets-fetch-rcv1"]], "sklearn.datasets.fetch_species_distributions": [[496, "sklearn-datasets-fetch-species-distributions"]], "Examples using sklearn.datasets.fetch_species_distributions": [[496, "examples-using-sklearn-datasets-fetch-species-distributions"]], "sklearn.datasets.get_data_home": [[497, "sklearn-datasets-get-data-home"]], "Examples using sklearn.datasets.get_data_home": [[497, "examples-using-sklearn-datasets-get-data-home"]], "sklearn.datasets.load_breast_cancer": [[498, "sklearn-datasets-load-breast-cancer"]], "Examples using sklearn.datasets.load_breast_cancer": [[498, "examples-using-sklearn-datasets-load-breast-cancer"]], "sklearn.datasets.load_diabetes": [[499, "sklearn-datasets-load-diabetes"]], "Examples using sklearn.datasets.load_diabetes": [[499, "examples-using-sklearn-datasets-load-diabetes"]], "sklearn.datasets.load_digits": [[500, "sklearn-datasets-load-digits"]], "Examples using sklearn.datasets.load_digits": [[500, "examples-using-sklearn-datasets-load-digits"]], "sklearn.datasets.load_files": [[501, "sklearn-datasets-load-files"]], "sklearn.datasets.load_iris": [[502, "sklearn-datasets-load-iris"]], "Examples using sklearn.datasets.load_iris": [[502, "examples-using-sklearn-datasets-load-iris"]], "sklearn.datasets.load_linnerud": [[503, "sklearn-datasets-load-linnerud"]], "sklearn.datasets.load_sample_image": [[504, "sklearn-datasets-load-sample-image"]], "Examples using sklearn.datasets.load_sample_image": [[504, "examples-using-sklearn-datasets-load-sample-image"]], "sklearn.datasets.load_sample_images": [[505, "sklearn-datasets-load-sample-images"]], "sklearn.datasets.load_svmlight_file": [[506, "sklearn-datasets-load-svmlight-file"]], "sklearn.datasets.load_svmlight_files": [[507, "sklearn-datasets-load-svmlight-files"]], "sklearn.datasets.load_wine": [[508, "sklearn-datasets-load-wine"]], "Examples using sklearn.datasets.load_wine": [[508, "examples-using-sklearn-datasets-load-wine"]], "sklearn.datasets.make_biclusters": [[509, "sklearn-datasets-make-biclusters"]], "Examples using sklearn.datasets.make_biclusters": [[509, "examples-using-sklearn-datasets-make-biclusters"]], "sklearn.datasets.make_blobs": [[510, "sklearn-datasets-make-blobs"]], "Examples using sklearn.datasets.make_blobs": [[510, "examples-using-sklearn-datasets-make-blobs"]], "sklearn.datasets.make_checkerboard": [[511, "sklearn-datasets-make-checkerboard"]], "Examples using sklearn.datasets.make_checkerboard": [[511, "examples-using-sklearn-datasets-make-checkerboard"]], "sklearn.datasets.make_circles": [[512, "sklearn-datasets-make-circles"]], "Examples using sklearn.datasets.make_circles": [[512, "examples-using-sklearn-datasets-make-circles"]], "sklearn.datasets.make_classification": [[513, "sklearn-datasets-make-classification"]], "Examples using sklearn.datasets.make_classification": [[513, "examples-using-sklearn-datasets-make-classification"]], "sklearn.datasets.make_friedman1": [[514, "sklearn-datasets-make-friedman1"]], "sklearn.datasets.make_friedman2": [[515, "sklearn-datasets-make-friedman2"]], "sklearn.datasets.make_friedman3": [[516, "sklearn-datasets-make-friedman3"]], "sklearn.datasets.make_gaussian_quantiles": [[517, "sklearn-datasets-make-gaussian-quantiles"]], "Examples using sklearn.datasets.make_gaussian_quantiles": [[517, "examples-using-sklearn-datasets-make-gaussian-quantiles"]], "sklearn.datasets.make_hastie_10_2": [[518, "sklearn-datasets-make-hastie-10-2"]], "Examples using sklearn.datasets.make_hastie_10_2": [[518, "examples-using-sklearn-datasets-make-hastie-10-2"]], "sklearn.datasets.make_low_rank_matrix": [[519, "sklearn-datasets-make-low-rank-matrix"]], "Examples using sklearn.datasets.make_low_rank_matrix": [[519, "examples-using-sklearn-datasets-make-low-rank-matrix"]], "sklearn.datasets.make_moons": [[520, "sklearn-datasets-make-moons"]], "Examples using sklearn.datasets.make_moons": [[520, "examples-using-sklearn-datasets-make-moons"]], "sklearn.datasets.make_multilabel_classification": [[521, "sklearn-datasets-make-multilabel-classification"]], "Examples using sklearn.datasets.make_multilabel_classification": [[521, "examples-using-sklearn-datasets-make-multilabel-classification"]], "sklearn.datasets.make_regression": [[522, "sklearn-datasets-make-regression"]], "Examples using sklearn.datasets.make_regression": [[522, "examples-using-sklearn-datasets-make-regression"]], "sklearn.datasets.make_s_curve": [[523, "sklearn-datasets-make-s-curve"]], "Examples using sklearn.datasets.make_s_curve": [[523, "examples-using-sklearn-datasets-make-s-curve"]], "sklearn.datasets.make_sparse_coded_signal": [[524, "sklearn-datasets-make-sparse-coded-signal"]], "Examples using sklearn.datasets.make_sparse_coded_signal": [[524, "examples-using-sklearn-datasets-make-sparse-coded-signal"]], "sklearn.datasets.make_sparse_spd_matrix": [[525, "sklearn-datasets-make-sparse-spd-matrix"]], "Examples using sklearn.datasets.make_sparse_spd_matrix": [[525, "examples-using-sklearn-datasets-make-sparse-spd-matrix"]], "sklearn.datasets.make_sparse_uncorrelated": [[526, "sklearn-datasets-make-sparse-uncorrelated"]], "sklearn.datasets.make_spd_matrix": [[527, "sklearn-datasets-make-spd-matrix"]], "sklearn.datasets.make_swiss_roll": [[528, "sklearn-datasets-make-swiss-roll"]], "Examples using sklearn.datasets.make_swiss_roll": [[528, "examples-using-sklearn-datasets-make-swiss-roll"]], "sklearn.decomposition.DictionaryLearning": [[529, "sklearn-decomposition-dictionarylearning"]], "sklearn.decomposition.FactorAnalysis": [[530, "sklearn-decomposition-factoranalysis"]], "Examples using sklearn.decomposition.FactorAnalysis": [[530, "examples-using-sklearn-decomposition-factoranalysis"]], "sklearn.decomposition.FastICA": [[531, "sklearn-decomposition-fastica"]], "Examples using sklearn.decomposition.FastICA": [[531, "examples-using-sklearn-decomposition-fastica"]], "sklearn.decomposition.IncrementalPCA": [[532, "sklearn-decomposition-incrementalpca"]], "Examples using sklearn.decomposition.IncrementalPCA": [[532, "examples-using-sklearn-decomposition-incrementalpca"]], "sklearn.decomposition.KernelPCA": [[533, "sklearn-decomposition-kernelpca"]], "Examples using sklearn.decomposition.KernelPCA": [[533, "examples-using-sklearn-decomposition-kernelpca"]], "sklearn.decomposition.LatentDirichletAllocation": [[534, "sklearn-decomposition-latentdirichletallocation"]], "Examples using sklearn.decomposition.LatentDirichletAllocation": [[534, "examples-using-sklearn-decomposition-latentdirichletallocation"]], "sklearn.decomposition.MiniBatchDictionaryLearning": [[535, "sklearn-decomposition-minibatchdictionarylearning"]], "Examples using sklearn.decomposition.MiniBatchDictionaryLearning": [[535, "examples-using-sklearn-decomposition-minibatchdictionarylearning"]], "sklearn.decomposition.MiniBatchNMF": [[536, "sklearn-decomposition-minibatchnmf"]], "Examples using sklearn.decomposition.MiniBatchNMF": [[536, "examples-using-sklearn-decomposition-minibatchnmf"]], "sklearn.decomposition.MiniBatchSparsePCA": [[537, "sklearn-decomposition-minibatchsparsepca"]], "Examples using sklearn.decomposition.MiniBatchSparsePCA": [[537, "examples-using-sklearn-decomposition-minibatchsparsepca"]], "sklearn.decomposition.NMF": [[538, "sklearn-decomposition-nmf"]], "Examples using sklearn.decomposition.NMF": [[538, "examples-using-sklearn-decomposition-nmf"]], "sklearn.decomposition.PCA": [[539, "sklearn-decomposition-pca"]], "Examples using sklearn.decomposition.PCA": [[539, "examples-using-sklearn-decomposition-pca"]], "sklearn.decomposition.SparseCoder": [[540, "sklearn-decomposition-sparsecoder"]], "Examples using sklearn.decomposition.SparseCoder": [[540, "examples-using-sklearn-decomposition-sparsecoder"]], "sklearn.decomposition.SparsePCA": [[541, "sklearn-decomposition-sparsepca"]], "Examples using sklearn.decomposition.SparsePCA": [[541, "examples-using-sklearn-decomposition-sparsepca"]], "sklearn.decomposition.TruncatedSVD": [[542, "sklearn-decomposition-truncatedsvd"]], "Examples using sklearn.decomposition.TruncatedSVD": [[542, "examples-using-sklearn-decomposition-truncatedsvd"]], "sklearn.decomposition.dict_learning": [[543, "sklearn-decomposition-dict-learning"]], "sklearn.decomposition.dict_learning_online": [[544, "sklearn-decomposition-dict-learning-online"]], "sklearn.decomposition.non_negative_factorization": [[545, "sklearn-decomposition-non-negative-factorization"]], "sklearn.decomposition.sparse_encode": [[546, "sklearn-decomposition-sparse-encode"]], "sklearn.discriminant_analysis.LinearDiscriminantAnalysis": [[547, "sklearn-discriminant-analysis-lineardiscriminantanalysis"]], "Examples using sklearn.discriminant_analysis.LinearDiscriminantAnalysis": [[547, "examples-using-sklearn-discriminant-analysis-lineardiscriminantanalysis"]], "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis": [[548, "sklearn-discriminant-analysis-quadraticdiscriminantanalysis"]], "Examples using sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis": [[548, "examples-using-sklearn-discriminant-analysis-quadraticdiscriminantanalysis"]], "sklearn.dummy.DummyClassifier": [[549, "sklearn-dummy-dummyclassifier"]], "Examples using sklearn.dummy.DummyClassifier": [[549, "examples-using-sklearn-dummy-dummyclassifier"]], "sklearn.dummy.DummyRegressor": [[550, "sklearn-dummy-dummyregressor"]], "Examples using sklearn.dummy.DummyRegressor": [[550, "examples-using-sklearn-dummy-dummyregressor"]], "sklearn.ensemble.AdaBoostClassifier": [[551, "sklearn-ensemble-adaboostclassifier"]], "Examples using sklearn.ensemble.AdaBoostClassifier": [[551, "examples-using-sklearn-ensemble-adaboostclassifier"]], "sklearn.ensemble.AdaBoostRegressor": [[552, "sklearn-ensemble-adaboostregressor"]], "Examples using sklearn.ensemble.AdaBoostRegressor": [[552, "examples-using-sklearn-ensemble-adaboostregressor"]], "sklearn.ensemble.BaggingClassifier": [[553, "sklearn-ensemble-baggingclassifier"]], "sklearn.ensemble.BaggingRegressor": [[554, "sklearn-ensemble-baggingregressor"]], "Examples using sklearn.ensemble.BaggingRegressor": [[554, "examples-using-sklearn-ensemble-baggingregressor"]], "sklearn.ensemble.ExtraTreesClassifier": [[555, "sklearn-ensemble-extratreesclassifier"]], "Examples using sklearn.ensemble.ExtraTreesClassifier": [[555, "examples-using-sklearn-ensemble-extratreesclassifier"]], "sklearn.ensemble.ExtraTreesRegressor": [[556, "sklearn-ensemble-extratreesregressor"]], "Examples using sklearn.ensemble.ExtraTreesRegressor": [[556, "examples-using-sklearn-ensemble-extratreesregressor"]], "sklearn.ensemble.GradientBoostingClassifier": [[557, "sklearn-ensemble-gradientboostingclassifier"]], "Examples using sklearn.ensemble.GradientBoostingClassifier": [[557, "examples-using-sklearn-ensemble-gradientboostingclassifier"]], "sklearn.ensemble.GradientBoostingRegressor": [[558, "sklearn-ensemble-gradientboostingregressor"]], "Examples using sklearn.ensemble.GradientBoostingRegressor": [[558, "examples-using-sklearn-ensemble-gradientboostingregressor"]], "sklearn.ensemble.HistGradientBoostingClassifier": [[559, "sklearn-ensemble-histgradientboostingclassifier"]], "Examples using sklearn.ensemble.HistGradientBoostingClassifier": [[559, "examples-using-sklearn-ensemble-histgradientboostingclassifier"]], "sklearn.ensemble.HistGradientBoostingRegressor": [[560, "sklearn-ensemble-histgradientboostingregressor"]], "Examples using sklearn.ensemble.HistGradientBoostingRegressor": [[560, "examples-using-sklearn-ensemble-histgradientboostingregressor"]], "sklearn.ensemble.IsolationForest": [[561, "sklearn-ensemble-isolationforest"]], "Examples using sklearn.ensemble.IsolationForest": [[561, "examples-using-sklearn-ensemble-isolationforest"]], "sklearn.ensemble.RandomForestClassifier": [[562, "sklearn-ensemble-randomforestclassifier"]], "Examples using sklearn.ensemble.RandomForestClassifier": [[562, "examples-using-sklearn-ensemble-randomforestclassifier"]], "sklearn.ensemble.RandomForestRegressor": [[563, "sklearn-ensemble-randomforestregressor"]], "Examples using sklearn.ensemble.RandomForestRegressor": [[563, "examples-using-sklearn-ensemble-randomforestregressor"]], "sklearn.ensemble.RandomTreesEmbedding": [[564, "sklearn-ensemble-randomtreesembedding"]], "Examples using sklearn.ensemble.RandomTreesEmbedding": [[564, "examples-using-sklearn-ensemble-randomtreesembedding"]], "sklearn.ensemble.StackingClassifier": [[565, "sklearn-ensemble-stackingclassifier"]], "Examples using sklearn.ensemble.StackingClassifier": [[565, "examples-using-sklearn-ensemble-stackingclassifier"]], "sklearn.ensemble.StackingRegressor": [[566, "sklearn-ensemble-stackingregressor"]], "Examples using sklearn.ensemble.StackingRegressor": [[566, "examples-using-sklearn-ensemble-stackingregressor"]], "sklearn.ensemble.VotingClassifier": [[567, "sklearn-ensemble-votingclassifier"]], "Examples using sklearn.ensemble.VotingClassifier": [[567, "examples-using-sklearn-ensemble-votingclassifier"]], "sklearn.ensemble.VotingRegressor": [[568, "sklearn-ensemble-votingregressor"]], "Examples using sklearn.ensemble.VotingRegressor": [[568, "examples-using-sklearn-ensemble-votingregressor"]], "sklearn.exceptions.ConvergenceWarning": [[569, "sklearn-exceptions-convergencewarning"]], "Examples using sklearn.exceptions.ConvergenceWarning": [[569, "examples-using-sklearn-exceptions-convergencewarning"]], "sklearn.exceptions.DataConversionWarning": [[570, "sklearn-exceptions-dataconversionwarning"]], "sklearn.exceptions.DataDimensionalityWarning": [[571, "sklearn-exceptions-datadimensionalitywarning"]], "sklearn.exceptions.EfficiencyWarning": [[572, "sklearn-exceptions-efficiencywarning"]], "sklearn.exceptions.FitFailedWarning": [[573, "sklearn-exceptions-fitfailedwarning"]], "sklearn.exceptions.InconsistentVersionWarning": [[574, "sklearn-exceptions-inconsistentversionwarning"]], "sklearn.exceptions.NotFittedError": [[575, "sklearn-exceptions-notfittederror"]], "sklearn.exceptions.UndefinedMetricWarning": [[576, "sklearn-exceptions-undefinedmetricwarning"]], "sklearn.experimental.enable_halving_search_cv": [[577, "module-sklearn.experimental.enable_halving_search_cv"]], "sklearn.experimental.enable_iterative_imputer": [[578, "module-sklearn.experimental.enable_iterative_imputer"]], "sklearn.feature_extraction.DictVectorizer": [[579, "sklearn-feature-extraction-dictvectorizer"]], "Examples using sklearn.feature_extraction.DictVectorizer": [[579, "examples-using-sklearn-feature-extraction-dictvectorizer"]], "sklearn.feature_extraction.FeatureHasher": [[580, "sklearn-feature-extraction-featurehasher"]], "Examples using sklearn.feature_extraction.FeatureHasher": [[580, "examples-using-sklearn-feature-extraction-featurehasher"]], "sklearn.feature_extraction.image.PatchExtractor": [[581, "sklearn-feature-extraction-image-patchextractor"]], "sklearn.feature_extraction.image.extract_patches_2d": [[582, "sklearn-feature-extraction-image-extract-patches-2d"]], "Examples using sklearn.feature_extraction.image.extract_patches_2d": [[582, "examples-using-sklearn-feature-extraction-image-extract-patches-2d"]], "sklearn.feature_extraction.image.grid_to_graph": [[583, "sklearn-feature-extraction-image-grid-to-graph"]], "sklearn.feature_extraction.image.img_to_graph": [[584, "sklearn-feature-extraction-image-img-to-graph"]], "sklearn.feature_extraction.image.reconstruct_from_patches_2d": [[585, "sklearn-feature-extraction-image-reconstruct-from-patches-2d"]], "Examples using sklearn.feature_extraction.image.reconstruct_from_patches_2d": [[585, "examples-using-sklearn-feature-extraction-image-reconstruct-from-patches-2d"]], "sklearn.feature_extraction.text.CountVectorizer": [[586, "sklearn-feature-extraction-text-countvectorizer"]], "Examples using sklearn.feature_extraction.text.CountVectorizer": [[586, "examples-using-sklearn-feature-extraction-text-countvectorizer"]], "sklearn.feature_extraction.text.HashingVectorizer": [[587, "sklearn-feature-extraction-text-hashingvectorizer"]], "Examples using sklearn.feature_extraction.text.HashingVectorizer": [[587, "examples-using-sklearn-feature-extraction-text-hashingvectorizer"]], "sklearn.feature_extraction.text.TfidfTransformer": [[588, "sklearn-feature-extraction-text-tfidftransformer"]], "Examples using sklearn.feature_extraction.text.TfidfTransformer": [[588, "examples-using-sklearn-feature-extraction-text-tfidftransformer"]], "sklearn.feature_extraction.text.TfidfVectorizer": [[589, "sklearn-feature-extraction-text-tfidfvectorizer"]], "Examples using sklearn.feature_extraction.text.TfidfVectorizer": [[589, "examples-using-sklearn-feature-extraction-text-tfidfvectorizer"]], "sklearn.feature_selection.GenericUnivariateSelect": [[590, "sklearn-feature-selection-genericunivariateselect"]], "sklearn.feature_selection.RFE": [[591, "sklearn-feature-selection-rfe"]], "Examples using sklearn.feature_selection.RFE": [[591, "examples-using-sklearn-feature-selection-rfe"]], "sklearn.feature_selection.RFECV": [[592, "sklearn-feature-selection-rfecv"]], "Examples using sklearn.feature_selection.RFECV": [[592, "examples-using-sklearn-feature-selection-rfecv"]], "sklearn.feature_selection.SelectFdr": [[593, "sklearn-feature-selection-selectfdr"]], "sklearn.feature_selection.SelectFpr": [[594, "sklearn-feature-selection-selectfpr"]], "sklearn.feature_selection.SelectFromModel": [[595, "sklearn-feature-selection-selectfrommodel"]], "Examples using sklearn.feature_selection.SelectFromModel": [[595, "examples-using-sklearn-feature-selection-selectfrommodel"]], "sklearn.feature_selection.SelectFwe": [[596, "sklearn-feature-selection-selectfwe"]], "sklearn.feature_selection.SelectKBest": [[597, "sklearn-feature-selection-selectkbest"]], "Examples using sklearn.feature_selection.SelectKBest": [[597, "examples-using-sklearn-feature-selection-selectkbest"]], "sklearn.feature_selection.SelectPercentile": [[598, "sklearn-feature-selection-selectpercentile"]], "Examples using sklearn.feature_selection.SelectPercentile": [[598, "examples-using-sklearn-feature-selection-selectpercentile"]], "sklearn.feature_selection.SelectorMixin": [[599, "sklearn-feature-selection-selectormixin"]], "sklearn.feature_selection.SequentialFeatureSelector": [[600, "sklearn-feature-selection-sequentialfeatureselector"]], "Examples using sklearn.feature_selection.SequentialFeatureSelector": [[600, "examples-using-sklearn-feature-selection-sequentialfeatureselector"]], "sklearn.feature_selection.VarianceThreshold": [[601, "sklearn-feature-selection-variancethreshold"]], "sklearn.feature_selection.chi2": [[602, "sklearn-feature-selection-chi2"]], "Examples using sklearn.feature_selection.chi2": [[602, "examples-using-sklearn-feature-selection-chi2"]], "sklearn.feature_selection.f_classif": [[603, "sklearn-feature-selection-f-classif"]], "Examples using sklearn.feature_selection.f_classif": [[603, "examples-using-sklearn-feature-selection-f-classif"]], "sklearn.feature_selection.f_regression": [[604, "sklearn-feature-selection-f-regression"]], "Examples using sklearn.feature_selection.f_regression": [[604, "examples-using-sklearn-feature-selection-f-regression"]], "sklearn.feature_selection.mutual_info_classif": [[605, "sklearn-feature-selection-mutual-info-classif"]], "Examples using sklearn.feature_selection.mutual_info_classif": [[605, "examples-using-sklearn-feature-selection-mutual-info-classif"]], "sklearn.feature_selection.mutual_info_regression": [[606, "sklearn-feature-selection-mutual-info-regression"]], "Examples using sklearn.feature_selection.mutual_info_regression": [[606, "examples-using-sklearn-feature-selection-mutual-info-regression"]], "sklearn.feature_selection.r_regression": [[607, "sklearn-feature-selection-r-regression"]], "sklearn.gaussian_process.GaussianProcessClassifier": [[608, "sklearn-gaussian-process-gaussianprocessclassifier"]], "Examples using sklearn.gaussian_process.GaussianProcessClassifier": [[608, "examples-using-sklearn-gaussian-process-gaussianprocessclassifier"]], "sklearn.gaussian_process.GaussianProcessRegressor": [[609, "sklearn-gaussian-process-gaussianprocessregressor"]], "Examples using sklearn.gaussian_process.GaussianProcessRegressor": [[609, "examples-using-sklearn-gaussian-process-gaussianprocessregressor"]], "sklearn.gaussian_process.kernels.CompoundKernel": [[610, "sklearn-gaussian-process-kernels-compoundkernel"]], "sklearn.gaussian_process.kernels.ConstantKernel": [[611, "sklearn-gaussian-process-kernels-constantkernel"]], "Examples using sklearn.gaussian_process.kernels.ConstantKernel": [[611, "examples-using-sklearn-gaussian-process-kernels-constantkernel"]], "sklearn.gaussian_process.kernels.DotProduct": [[612, "sklearn-gaussian-process-kernels-dotproduct"]], "Examples using sklearn.gaussian_process.kernels.DotProduct": [[612, "examples-using-sklearn-gaussian-process-kernels-dotproduct"]], "sklearn.gaussian_process.kernels.ExpSineSquared": [[613, "sklearn-gaussian-process-kernels-expsinesquared"]], "Examples using sklearn.gaussian_process.kernels.ExpSineSquared": [[613, "examples-using-sklearn-gaussian-process-kernels-expsinesquared"]], "sklearn.gaussian_process.kernels.Exponentiation": [[614, "sklearn-gaussian-process-kernels-exponentiation"]], "sklearn.gaussian_process.kernels.Hyperparameter": [[615, "sklearn-gaussian-process-kernels-hyperparameter"]], "Examples using sklearn.gaussian_process.kernels.Hyperparameter": [[615, "examples-using-sklearn-gaussian-process-kernels-hyperparameter"]], "sklearn.gaussian_process.kernels.Kernel": [[616, "sklearn-gaussian-process-kernels-kernel"]], "Examples using sklearn.gaussian_process.kernels.Kernel": [[616, "examples-using-sklearn-gaussian-process-kernels-kernel"]], "sklearn.gaussian_process.kernels.Matern": [[617, "sklearn-gaussian-process-kernels-matern"]], "Examples using sklearn.gaussian_process.kernels.Matern": [[617, "examples-using-sklearn-gaussian-process-kernels-matern"]], "sklearn.gaussian_process.kernels.PairwiseKernel": [[618, "sklearn-gaussian-process-kernels-pairwisekernel"]], "sklearn.gaussian_process.kernels.Product": [[619, "sklearn-gaussian-process-kernels-product"]], "sklearn.gaussian_process.kernels.RBF": [[620, "sklearn-gaussian-process-kernels-rbf"]], "Examples using sklearn.gaussian_process.kernels.RBF": [[620, "examples-using-sklearn-gaussian-process-kernels-rbf"]], "sklearn.gaussian_process.kernels.RationalQuadratic": [[621, "sklearn-gaussian-process-kernels-rationalquadratic"]], "Examples using sklearn.gaussian_process.kernels.RationalQuadratic": [[621, "examples-using-sklearn-gaussian-process-kernels-rationalquadratic"]], "sklearn.gaussian_process.kernels.Sum": [[622, "sklearn-gaussian-process-kernels-sum"]], "sklearn.gaussian_process.kernels.WhiteKernel": [[623, "sklearn-gaussian-process-kernels-whitekernel"]], "Examples using sklearn.gaussian_process.kernels.WhiteKernel": [[623, "examples-using-sklearn-gaussian-process-kernels-whitekernel"]], "sklearn.get_config": [[624, "sklearn-get-config"]], "sklearn.impute.IterativeImputer": [[625, "sklearn-impute-iterativeimputer"]], "Examples using sklearn.impute.IterativeImputer": [[625, "examples-using-sklearn-impute-iterativeimputer"]], "sklearn.impute.KNNImputer": [[626, "sklearn-impute-knnimputer"]], "Examples using sklearn.impute.KNNImputer": [[626, "examples-using-sklearn-impute-knnimputer"]], "sklearn.impute.MissingIndicator": [[627, "sklearn-impute-missingindicator"]], "sklearn.impute.SimpleImputer": [[628, "sklearn-impute-simpleimputer"]], "Examples using sklearn.impute.SimpleImputer": [[628, "examples-using-sklearn-impute-simpleimputer"]], "sklearn.inspection.DecisionBoundaryDisplay": [[629, "sklearn-inspection-decisionboundarydisplay"]], "Examples using sklearn.inspection.DecisionBoundaryDisplay": [[629, "examples-using-sklearn-inspection-decisionboundarydisplay"]], "Examples using sklearn.inspection.DecisionBoundaryDisplay.from_estimator": [[629, "examples-using-sklearn-inspection-decisionboundarydisplay-from-estimator"]], "sklearn.inspection.PartialDependenceDisplay": [[630, "sklearn-inspection-partialdependencedisplay"]], "Examples using sklearn.inspection.PartialDependenceDisplay": [[630, "examples-using-sklearn-inspection-partialdependencedisplay"]], "Examples using sklearn.inspection.PartialDependenceDisplay.from_estimator": [[630, "examples-using-sklearn-inspection-partialdependencedisplay-from-estimator"]], "sklearn.inspection.partial_dependence": [[631, "sklearn-inspection-partial-dependence"]], "Examples using sklearn.inspection.partial_dependence": [[631, "examples-using-sklearn-inspection-partial-dependence"]], "sklearn.inspection.permutation_importance": [[632, "sklearn-inspection-permutation-importance"]], "Examples using sklearn.inspection.permutation_importance": [[632, "examples-using-sklearn-inspection-permutation-importance"]], "sklearn.isotonic.IsotonicRegression": [[633, "sklearn-isotonic-isotonicregression"]], "Examples using sklearn.isotonic.IsotonicRegression": [[633, "examples-using-sklearn-isotonic-isotonicregression"]], "sklearn.isotonic.check_increasing": [[634, "sklearn-isotonic-check-increasing"]], "sklearn.isotonic.isotonic_regression": [[635, "sklearn-isotonic-isotonic-regression"]], "sklearn.kernel_approximation.AdditiveChi2Sampler": [[636, "sklearn-kernel-approximation-additivechi2sampler"]], "sklearn.kernel_approximation.Nystroem": [[637, "sklearn-kernel-approximation-nystroem"]], "Examples using sklearn.kernel_approximation.Nystroem": [[637, "examples-using-sklearn-kernel-approximation-nystroem"]], "sklearn.kernel_approximation.PolynomialCountSketch": [[638, "sklearn-kernel-approximation-polynomialcountsketch"]], "Examples using sklearn.kernel_approximation.PolynomialCountSketch": [[638, "examples-using-sklearn-kernel-approximation-polynomialcountsketch"]], "sklearn.kernel_approximation.RBFSampler": [[639, "sklearn-kernel-approximation-rbfsampler"]], "Examples using sklearn.kernel_approximation.RBFSampler": [[639, "examples-using-sklearn-kernel-approximation-rbfsampler"]], "sklearn.kernel_approximation.SkewedChi2Sampler": [[640, "sklearn-kernel-approximation-skewedchi2sampler"]], "sklearn.kernel_ridge.KernelRidge": [[641, "sklearn-kernel-ridge-kernelridge"]], "Examples using sklearn.kernel_ridge.KernelRidge": [[641, "examples-using-sklearn-kernel-ridge-kernelridge"]], "sklearn.linear_model.ARDRegression": [[642, "sklearn-linear-model-ardregression"]], "Examples using sklearn.linear_model.ARDRegression": [[642, "examples-using-sklearn-linear-model-ardregression"]], "sklearn.linear_model.BayesianRidge": [[643, "sklearn-linear-model-bayesianridge"]], "Examples using sklearn.linear_model.BayesianRidge": [[643, "examples-using-sklearn-linear-model-bayesianridge"]], "sklearn.linear_model.ElasticNet": [[644, "sklearn-linear-model-elasticnet"]], "Examples using sklearn.linear_model.ElasticNet": [[644, "examples-using-sklearn-linear-model-elasticnet"]], "sklearn.linear_model.ElasticNetCV": [[645, "sklearn-linear-model-elasticnetcv"]], "Examples using sklearn.linear_model.ElasticNetCV": [[645, "examples-using-sklearn-linear-model-elasticnetcv"]], "sklearn.linear_model.GammaRegressor": [[646, "sklearn-linear-model-gammaregressor"]], "Examples using sklearn.linear_model.GammaRegressor": [[646, "examples-using-sklearn-linear-model-gammaregressor"]], "sklearn.linear_model.HuberRegressor": [[647, "sklearn-linear-model-huberregressor"]], "Examples using sklearn.linear_model.HuberRegressor": [[647, "examples-using-sklearn-linear-model-huberregressor"]], "sklearn.linear_model.Lars": [[648, "sklearn-linear-model-lars"]], "sklearn.linear_model.LarsCV": [[649, "sklearn-linear-model-larscv"]], "sklearn.linear_model.Lasso": [[650, "sklearn-linear-model-lasso"]], "Examples using sklearn.linear_model.Lasso": [[650, "examples-using-sklearn-linear-model-lasso"]], "sklearn.linear_model.LassoCV": [[651, "sklearn-linear-model-lassocv"]], "Examples using sklearn.linear_model.LassoCV": [[651, "examples-using-sklearn-linear-model-lassocv"]], "sklearn.linear_model.LassoLars": [[652, "sklearn-linear-model-lassolars"]], "sklearn.linear_model.LassoLarsCV": [[653, "sklearn-linear-model-lassolarscv"]], "Examples using sklearn.linear_model.LassoLarsCV": [[653, "examples-using-sklearn-linear-model-lassolarscv"]], "sklearn.linear_model.LassoLarsIC": [[654, "sklearn-linear-model-lassolarsic"]], "Examples using sklearn.linear_model.LassoLarsIC": [[654, "examples-using-sklearn-linear-model-lassolarsic"]], "sklearn.linear_model.LinearRegression": [[655, "sklearn-linear-model-linearregression"]], "Examples using sklearn.linear_model.LinearRegression": [[655, "examples-using-sklearn-linear-model-linearregression"]], "sklearn.linear_model.LogisticRegression": [[656, "sklearn-linear-model-logisticregression"]], "Examples using sklearn.linear_model.LogisticRegression": [[656, "examples-using-sklearn-linear-model-logisticregression"]], "sklearn.linear_model.LogisticRegressionCV": [[657, "sklearn-linear-model-logisticregressioncv"]], "Examples using sklearn.linear_model.LogisticRegressionCV": [[657, "examples-using-sklearn-linear-model-logisticregressioncv"]], "sklearn.linear_model.MultiTaskElasticNet": [[658, "sklearn-linear-model-multitaskelasticnet"]], "sklearn.linear_model.MultiTaskElasticNetCV": [[659, "sklearn-linear-model-multitaskelasticnetcv"]], "sklearn.linear_model.MultiTaskLasso": [[660, "sklearn-linear-model-multitasklasso"]], "Examples using sklearn.linear_model.MultiTaskLasso": [[660, "examples-using-sklearn-linear-model-multitasklasso"]], "sklearn.linear_model.MultiTaskLassoCV": [[661, "sklearn-linear-model-multitasklassocv"]], "sklearn.linear_model.OrthogonalMatchingPursuit": [[662, "sklearn-linear-model-orthogonalmatchingpursuit"]], "Examples using sklearn.linear_model.OrthogonalMatchingPursuit": [[662, "examples-using-sklearn-linear-model-orthogonalmatchingpursuit"]], "sklearn.linear_model.OrthogonalMatchingPursuitCV": [[663, "sklearn-linear-model-orthogonalmatchingpursuitcv"]], "Examples using sklearn.linear_model.OrthogonalMatchingPursuitCV": [[663, "examples-using-sklearn-linear-model-orthogonalmatchingpursuitcv"]], "sklearn.linear_model.PassiveAggressiveClassifier": [[664, "sklearn-linear-model-passiveaggressiveclassifier"]], "Examples using sklearn.linear_model.PassiveAggressiveClassifier": [[664, "examples-using-sklearn-linear-model-passiveaggressiveclassifier"]], "sklearn.linear_model.PassiveAggressiveRegressor": [[665, "sklearn-linear-model-passiveaggressiveregressor"]], "sklearn.linear_model.Perceptron": [[666, "sklearn-linear-model-perceptron"]], "Examples using sklearn.linear_model.Perceptron": [[666, "examples-using-sklearn-linear-model-perceptron"]], "sklearn.linear_model.PoissonRegressor": [[667, "sklearn-linear-model-poissonregressor"]], "Examples using sklearn.linear_model.PoissonRegressor": [[667, "examples-using-sklearn-linear-model-poissonregressor"]], "sklearn.linear_model.QuantileRegressor": [[668, "sklearn-linear-model-quantileregressor"]], "Examples using sklearn.linear_model.QuantileRegressor": [[668, "examples-using-sklearn-linear-model-quantileregressor"]], "sklearn.linear_model.RANSACRegressor": [[669, "sklearn-linear-model-ransacregressor"]], "Examples using sklearn.linear_model.RANSACRegressor": [[669, "examples-using-sklearn-linear-model-ransacregressor"]], "sklearn.linear_model.Ridge": [[670, "sklearn-linear-model-ridge"]], "Examples using sklearn.linear_model.Ridge": [[670, "examples-using-sklearn-linear-model-ridge"]], "sklearn.linear_model.RidgeCV": [[671, "sklearn-linear-model-ridgecv"]], "Examples using sklearn.linear_model.RidgeCV": [[671, "examples-using-sklearn-linear-model-ridgecv"]], "sklearn.linear_model.RidgeClassifier": [[672, "sklearn-linear-model-ridgeclassifier"]], "Examples using sklearn.linear_model.RidgeClassifier": [[672, "examples-using-sklearn-linear-model-ridgeclassifier"]], "sklearn.linear_model.RidgeClassifierCV": [[673, "sklearn-linear-model-ridgeclassifiercv"]], "sklearn.linear_model.SGDClassifier": [[674, "sklearn-linear-model-sgdclassifier"]], "Examples using sklearn.linear_model.SGDClassifier": [[674, "examples-using-sklearn-linear-model-sgdclassifier"]], "sklearn.linear_model.SGDOneClassSVM": [[675, "sklearn-linear-model-sgdoneclasssvm"]], "Examples using sklearn.linear_model.SGDOneClassSVM": [[675, "examples-using-sklearn-linear-model-sgdoneclasssvm"]], "sklearn.linear_model.SGDRegressor": [[676, "sklearn-linear-model-sgdregressor"]], "Examples using sklearn.linear_model.SGDRegressor": [[676, "examples-using-sklearn-linear-model-sgdregressor"]], "sklearn.linear_model.TheilSenRegressor": [[677, "sklearn-linear-model-theilsenregressor"]], "Examples using sklearn.linear_model.TheilSenRegressor": [[677, "examples-using-sklearn-linear-model-theilsenregressor"]], "sklearn.linear_model.TweedieRegressor": [[678, "sklearn-linear-model-tweedieregressor"]], "Examples using sklearn.linear_model.TweedieRegressor": [[678, "examples-using-sklearn-linear-model-tweedieregressor"]], "sklearn.linear_model.enet_path": [[679, "sklearn-linear-model-enet-path"]], "Examples using sklearn.linear_model.enet_path": [[679, "examples-using-sklearn-linear-model-enet-path"]], "sklearn.linear_model.lars_path": [[680, "sklearn-linear-model-lars-path"]], "Examples using sklearn.linear_model.lars_path": [[680, "examples-using-sklearn-linear-model-lars-path"]], "sklearn.linear_model.lars_path_gram": [[681, "sklearn-linear-model-lars-path-gram"]], "sklearn.linear_model.lasso_path": [[682, "sklearn-linear-model-lasso-path"]], "Examples using sklearn.linear_model.lasso_path": [[682, "examples-using-sklearn-linear-model-lasso-path"]], "sklearn.linear_model.orthogonal_mp": [[683, "sklearn-linear-model-orthogonal-mp"]], "sklearn.linear_model.orthogonal_mp_gram": [[684, "sklearn-linear-model-orthogonal-mp-gram"]], "sklearn.linear_model.ridge_regression": [[685, "sklearn-linear-model-ridge-regression"]], "sklearn.manifold.Isomap": [[686, "sklearn-manifold-isomap"]], "Examples using sklearn.manifold.Isomap": [[686, "examples-using-sklearn-manifold-isomap"]], "sklearn.manifold.LocallyLinearEmbedding": [[687, "sklearn-manifold-locallylinearembedding"]], "Examples using sklearn.manifold.LocallyLinearEmbedding": [[687, "examples-using-sklearn-manifold-locallylinearembedding"]], "sklearn.manifold.MDS": [[688, "sklearn-manifold-mds"]], "Examples using sklearn.manifold.MDS": [[688, "examples-using-sklearn-manifold-mds"]], "sklearn.manifold.SpectralEmbedding": [[689, "sklearn-manifold-spectralembedding"]], "Examples using sklearn.manifold.SpectralEmbedding": [[689, "examples-using-sklearn-manifold-spectralembedding"]], "sklearn.manifold.TSNE": [[690, "sklearn-manifold-tsne"]], "Examples using sklearn.manifold.TSNE": [[690, "examples-using-sklearn-manifold-tsne"]], "sklearn.manifold.locally_linear_embedding": [[691, "sklearn-manifold-locally-linear-embedding"]], "Examples using sklearn.manifold.locally_linear_embedding": [[691, "examples-using-sklearn-manifold-locally-linear-embedding"]], "sklearn.manifold.smacof": [[692, "sklearn-manifold-smacof"]], "sklearn.manifold.spectral_embedding": [[693, "sklearn-manifold-spectral-embedding"]], "sklearn.manifold.trustworthiness": [[694, "sklearn-manifold-trustworthiness"]], "sklearn.metrics.ConfusionMatrixDisplay": [[695, "sklearn-metrics-confusionmatrixdisplay"]], "Examples using sklearn.metrics.ConfusionMatrixDisplay": [[695, "examples-using-sklearn-metrics-confusionmatrixdisplay"]], "Examples using sklearn.metrics.ConfusionMatrixDisplay.from_estimator": [[695, "examples-using-sklearn-metrics-confusionmatrixdisplay-from-estimator"]], "Examples using sklearn.metrics.ConfusionMatrixDisplay.from_predictions": [[695, "examples-using-sklearn-metrics-confusionmatrixdisplay-from-predictions"]], "sklearn.metrics.DetCurveDisplay": [[696, "sklearn-metrics-detcurvedisplay"]], "Examples using sklearn.metrics.DetCurveDisplay.from_estimator": [[696, "examples-using-sklearn-metrics-detcurvedisplay-from-estimator"]], "sklearn.metrics.DistanceMetric": [[697, "sklearn-metrics-distancemetric"]], "sklearn.metrics.PrecisionRecallDisplay": [[698, "sklearn-metrics-precisionrecalldisplay"]], "Examples using sklearn.metrics.PrecisionRecallDisplay": [[698, "examples-using-sklearn-metrics-precisionrecalldisplay"]], "Examples using sklearn.metrics.PrecisionRecallDisplay.from_estimator": [[698, "examples-using-sklearn-metrics-precisionrecalldisplay-from-estimator"]], "Examples using sklearn.metrics.PrecisionRecallDisplay.from_predictions": [[698, "examples-using-sklearn-metrics-precisionrecalldisplay-from-predictions"]], "sklearn.metrics.PredictionErrorDisplay": [[699, "sklearn-metrics-predictionerrordisplay"]], "Examples using sklearn.metrics.PredictionErrorDisplay": [[699, "examples-using-sklearn-metrics-predictionerrordisplay"]], "Examples using sklearn.metrics.PredictionErrorDisplay.from_estimator": [[699, "examples-using-sklearn-metrics-predictionerrordisplay-from-estimator"]], "Examples using sklearn.metrics.PredictionErrorDisplay.from_predictions": [[699, "examples-using-sklearn-metrics-predictionerrordisplay-from-predictions"]], "sklearn.metrics.RocCurveDisplay": [[700, "sklearn-metrics-roccurvedisplay"]], "Examples using sklearn.metrics.RocCurveDisplay": [[700, "examples-using-sklearn-metrics-roccurvedisplay"]], "Examples using sklearn.metrics.RocCurveDisplay.from_estimator": [[700, "examples-using-sklearn-metrics-roccurvedisplay-from-estimator"]], "Examples using sklearn.metrics.RocCurveDisplay.from_predictions": [[700, "examples-using-sklearn-metrics-roccurvedisplay-from-predictions"]], "sklearn.metrics.accuracy_score": [[701, "sklearn-metrics-accuracy-score"]], "Examples using sklearn.metrics.accuracy_score": [[701, "examples-using-sklearn-metrics-accuracy-score"]], "sklearn.metrics.adjusted_mutual_info_score": [[702, "sklearn-metrics-adjusted-mutual-info-score"]], "Examples using sklearn.metrics.adjusted_mutual_info_score": [[702, "examples-using-sklearn-metrics-adjusted-mutual-info-score"]], "sklearn.metrics.adjusted_rand_score": [[703, "sklearn-metrics-adjusted-rand-score"]], "Examples using sklearn.metrics.adjusted_rand_score": [[703, "examples-using-sklearn-metrics-adjusted-rand-score"]], "sklearn.metrics.auc": [[704, "sklearn-metrics-auc"]], "Examples using sklearn.metrics.auc": [[704, "examples-using-sklearn-metrics-auc"]], "sklearn.metrics.average_precision_score": [[705, "sklearn-metrics-average-precision-score"]], "Examples using sklearn.metrics.average_precision_score": [[705, "examples-using-sklearn-metrics-average-precision-score"]], "sklearn.metrics.balanced_accuracy_score": [[706, "sklearn-metrics-balanced-accuracy-score"]], "sklearn.metrics.brier_score_loss": [[707, "sklearn-metrics-brier-score-loss"]], "Examples using sklearn.metrics.brier_score_loss": [[707, "examples-using-sklearn-metrics-brier-score-loss"]], "sklearn.metrics.calinski_harabasz_score": [[708, "sklearn-metrics-calinski-harabasz-score"]], "sklearn.metrics.check_scoring": [[709, "sklearn-metrics-check-scoring"]], "sklearn.metrics.class_likelihood_ratios": [[710, "sklearn-metrics-class-likelihood-ratios"]], "Examples using sklearn.metrics.class_likelihood_ratios": [[710, "examples-using-sklearn-metrics-class-likelihood-ratios"]], "sklearn.metrics.classification_report": [[711, "sklearn-metrics-classification-report"]], "Examples using sklearn.metrics.classification_report": [[711, "examples-using-sklearn-metrics-classification-report"]], "sklearn.metrics.cluster.contingency_matrix": [[712, "sklearn-metrics-cluster-contingency-matrix"]], "sklearn.metrics.cluster.pair_confusion_matrix": [[713, "sklearn-metrics-cluster-pair-confusion-matrix"]], "sklearn.metrics.cohen_kappa_score": [[714, "sklearn-metrics-cohen-kappa-score"]], "sklearn.metrics.completeness_score": [[715, "sklearn-metrics-completeness-score"]], "Examples using sklearn.metrics.completeness_score": [[715, "examples-using-sklearn-metrics-completeness-score"]], "sklearn.metrics.confusion_matrix": [[716, "sklearn-metrics-confusion-matrix"]], "Examples using sklearn.metrics.confusion_matrix": [[716, "examples-using-sklearn-metrics-confusion-matrix"]], "sklearn.metrics.consensus_score": [[717, "sklearn-metrics-consensus-score"]], "Examples using sklearn.metrics.consensus_score": [[717, "examples-using-sklearn-metrics-consensus-score"]], "sklearn.metrics.coverage_error": [[718, "sklearn-metrics-coverage-error"]], "sklearn.metrics.d2_absolute_error_score": [[719, "sklearn-metrics-d2-absolute-error-score"]], "sklearn.metrics.d2_pinball_score": [[720, "sklearn-metrics-d2-pinball-score"]], "sklearn.metrics.d2_tweedie_score": [[721, "sklearn-metrics-d2-tweedie-score"]], "sklearn.metrics.davies_bouldin_score": [[722, "sklearn-metrics-davies-bouldin-score"]], "sklearn.metrics.dcg_score": [[723, "sklearn-metrics-dcg-score"]], "sklearn.metrics.det_curve": [[724, "sklearn-metrics-det-curve"]], "Examples using sklearn.metrics.det_curve": [[724, "examples-using-sklearn-metrics-det-curve"]], "sklearn.metrics.explained_variance_score": [[725, "sklearn-metrics-explained-variance-score"]], "sklearn.metrics.f1_score": [[726, "sklearn-metrics-f1-score"]], "Examples using sklearn.metrics.f1_score": [[726, "examples-using-sklearn-metrics-f1-score"]], "sklearn.metrics.fbeta_score": [[727, "sklearn-metrics-fbeta-score"]], "sklearn.metrics.fowlkes_mallows_score": [[728, "sklearn-metrics-fowlkes-mallows-score"]], "sklearn.metrics.get_scorer": [[729, "sklearn-metrics-get-scorer"]], "Examples using sklearn.metrics.get_scorer": [[729, "examples-using-sklearn-metrics-get-scorer"]], "sklearn.metrics.get_scorer_names": [[730, "sklearn-metrics-get-scorer-names"]], "sklearn.metrics.hamming_loss": [[731, "sklearn-metrics-hamming-loss"]], "Examples using sklearn.metrics.hamming_loss": [[731, "examples-using-sklearn-metrics-hamming-loss"]], "sklearn.metrics.hinge_loss": [[732, "sklearn-metrics-hinge-loss"]], "Examples using sklearn.metrics.hinge_loss": [[732, "examples-using-sklearn-metrics-hinge-loss"]], "sklearn.metrics.homogeneity_completeness_v_measure": [[733, "sklearn-metrics-homogeneity-completeness-v-measure"]], "sklearn.metrics.homogeneity_score": [[734, "sklearn-metrics-homogeneity-score"]], "Examples using sklearn.metrics.homogeneity_score": [[734, "examples-using-sklearn-metrics-homogeneity-score"]], "sklearn.metrics.jaccard_score": [[735, "sklearn-metrics-jaccard-score"]], "Examples using sklearn.metrics.jaccard_score": [[735, "examples-using-sklearn-metrics-jaccard-score"]], "sklearn.metrics.label_ranking_average_precision_score": [[736, "sklearn-metrics-label-ranking-average-precision-score"]], "sklearn.metrics.label_ranking_loss": [[737, "sklearn-metrics-label-ranking-loss"]], "sklearn.metrics.log_loss": [[738, "sklearn-metrics-log-loss"]], "Examples using sklearn.metrics.log_loss": [[738, "examples-using-sklearn-metrics-log-loss"]], "sklearn.metrics.make_scorer": [[739, "sklearn-metrics-make-scorer"]], "Examples using sklearn.metrics.make_scorer": [[739, "examples-using-sklearn-metrics-make-scorer"]], "sklearn.metrics.matthews_corrcoef": [[740, "sklearn-metrics-matthews-corrcoef"]], "sklearn.metrics.max_error": [[741, "sklearn-metrics-max-error"]], "sklearn.metrics.mean_absolute_error": [[742, "sklearn-metrics-mean-absolute-error"]], "Examples using sklearn.metrics.mean_absolute_error": [[742, "examples-using-sklearn-metrics-mean-absolute-error"]], "sklearn.metrics.mean_absolute_percentage_error": [[743, "sklearn-metrics-mean-absolute-percentage-error"]], "Examples using sklearn.metrics.mean_absolute_percentage_error": [[743, "examples-using-sklearn-metrics-mean-absolute-percentage-error"]], "sklearn.metrics.mean_gamma_deviance": [[744, "sklearn-metrics-mean-gamma-deviance"]], "sklearn.metrics.mean_pinball_loss": [[745, "sklearn-metrics-mean-pinball-loss"]], "Examples using sklearn.metrics.mean_pinball_loss": [[745, "examples-using-sklearn-metrics-mean-pinball-loss"]], "sklearn.metrics.mean_poisson_deviance": [[746, "sklearn-metrics-mean-poisson-deviance"]], "Examples using sklearn.metrics.mean_poisson_deviance": [[746, "examples-using-sklearn-metrics-mean-poisson-deviance"]], "sklearn.metrics.mean_squared_error": [[747, "sklearn-metrics-mean-squared-error"]], "Examples using sklearn.metrics.mean_squared_error": [[747, "examples-using-sklearn-metrics-mean-squared-error"]], "sklearn.metrics.mean_squared_log_error": [[748, "sklearn-metrics-mean-squared-log-error"]], "sklearn.metrics.mean_tweedie_deviance": [[749, "sklearn-metrics-mean-tweedie-deviance"]], "Examples using sklearn.metrics.mean_tweedie_deviance": [[749, "examples-using-sklearn-metrics-mean-tweedie-deviance"]], "sklearn.metrics.median_absolute_error": [[750, "sklearn-metrics-median-absolute-error"]], "Examples using sklearn.metrics.median_absolute_error": [[750, "examples-using-sklearn-metrics-median-absolute-error"]], "sklearn.metrics.multilabel_confusion_matrix": [[751, "sklearn-metrics-multilabel-confusion-matrix"]], "sklearn.metrics.mutual_info_score": [[752, "sklearn-metrics-mutual-info-score"]], "Examples using sklearn.metrics.mutual_info_score": [[752, "examples-using-sklearn-metrics-mutual-info-score"]], "sklearn.metrics.ndcg_score": [[753, "sklearn-metrics-ndcg-score"]], "sklearn.metrics.normalized_mutual_info_score": [[754, "sklearn-metrics-normalized-mutual-info-score"]], "Examples using sklearn.metrics.normalized_mutual_info_score": [[754, "examples-using-sklearn-metrics-normalized-mutual-info-score"]], "sklearn.metrics.pairwise.additive_chi2_kernel": [[755, "sklearn-metrics-pairwise-additive-chi2-kernel"]], "sklearn.metrics.pairwise.chi2_kernel": [[756, "sklearn-metrics-pairwise-chi2-kernel"]], "sklearn.metrics.pairwise.cosine_distances": [[757, "sklearn-metrics-pairwise-cosine-distances"]], "sklearn.metrics.pairwise.cosine_similarity": [[758, "sklearn-metrics-pairwise-cosine-similarity"]], "Examples using sklearn.metrics.pairwise.cosine_similarity": [[758, "examples-using-sklearn-metrics-pairwise-cosine-similarity"]], "sklearn.metrics.pairwise.distance_metrics": [[759, "sklearn-metrics-pairwise-distance-metrics"]], "sklearn.metrics.pairwise.euclidean_distances": [[760, "sklearn-metrics-pairwise-euclidean-distances"]], "sklearn.metrics.pairwise.haversine_distances": [[761, "sklearn-metrics-pairwise-haversine-distances"]], "sklearn.metrics.pairwise.kernel_metrics": [[762, "sklearn-metrics-pairwise-kernel-metrics"]], "sklearn.metrics.pairwise.laplacian_kernel": [[763, "sklearn-metrics-pairwise-laplacian-kernel"]], "sklearn.metrics.pairwise.linear_kernel": [[764, "sklearn-metrics-pairwise-linear-kernel"]], "sklearn.metrics.pairwise.manhattan_distances": [[765, "sklearn-metrics-pairwise-manhattan-distances"]], "sklearn.metrics.pairwise.nan_euclidean_distances": [[766, "sklearn-metrics-pairwise-nan-euclidean-distances"]], "sklearn.metrics.pairwise.paired_cosine_distances": [[767, "sklearn-metrics-pairwise-paired-cosine-distances"]], "sklearn.metrics.pairwise.paired_distances": [[768, "sklearn-metrics-pairwise-paired-distances"]], "sklearn.metrics.pairwise.paired_euclidean_distances": [[769, "sklearn-metrics-pairwise-paired-euclidean-distances"]], "sklearn.metrics.pairwise.paired_manhattan_distances": [[770, "sklearn-metrics-pairwise-paired-manhattan-distances"]], "sklearn.metrics.pairwise.pairwise_kernels": [[771, "sklearn-metrics-pairwise-pairwise-kernels"]], "sklearn.metrics.pairwise.polynomial_kernel": [[772, "sklearn-metrics-pairwise-polynomial-kernel"]], "sklearn.metrics.pairwise.rbf_kernel": [[773, "sklearn-metrics-pairwise-rbf-kernel"]], "sklearn.metrics.pairwise.sigmoid_kernel": [[774, "sklearn-metrics-pairwise-sigmoid-kernel"]], "sklearn.metrics.pairwise_distances": [[775, "sklearn-metrics-pairwise-distances"]], "Examples using sklearn.metrics.pairwise_distances": [[775, "examples-using-sklearn-metrics-pairwise-distances"]], "sklearn.metrics.pairwise_distances_argmin": [[776, "sklearn-metrics-pairwise-distances-argmin"]], "Examples using sklearn.metrics.pairwise_distances_argmin": [[776, "examples-using-sklearn-metrics-pairwise-distances-argmin"]], "sklearn.metrics.pairwise_distances_argmin_min": [[777, "sklearn-metrics-pairwise-distances-argmin-min"]], "sklearn.metrics.pairwise_distances_chunked": [[778, "sklearn-metrics-pairwise-distances-chunked"]], "sklearn.metrics.precision_recall_curve": [[779, "sklearn-metrics-precision-recall-curve"]], "Examples using sklearn.metrics.precision_recall_curve": [[779, "examples-using-sklearn-metrics-precision-recall-curve"]], "sklearn.metrics.precision_recall_fscore_support": [[780, "sklearn-metrics-precision-recall-fscore-support"]], "sklearn.metrics.precision_score": [[781, "sklearn-metrics-precision-score"]], "Examples using sklearn.metrics.precision_score": [[781, "examples-using-sklearn-metrics-precision-score"]], "sklearn.metrics.r2_score": [[782, "sklearn-metrics-r2-score"]], "Examples using sklearn.metrics.r2_score": [[782, "examples-using-sklearn-metrics-r2-score"]], "sklearn.metrics.rand_score": [[783, "sklearn-metrics-rand-score"]], "Examples using sklearn.metrics.rand_score": [[783, "examples-using-sklearn-metrics-rand-score"]], "sklearn.metrics.recall_score": [[784, "sklearn-metrics-recall-score"]], "Examples using sklearn.metrics.recall_score": [[784, "examples-using-sklearn-metrics-recall-score"]], "sklearn.metrics.roc_auc_score": [[785, "sklearn-metrics-roc-auc-score"]], "Examples using sklearn.metrics.roc_auc_score": [[785, "examples-using-sklearn-metrics-roc-auc-score"]], "sklearn.metrics.roc_curve": [[786, "sklearn-metrics-roc-curve"]], "Examples using sklearn.metrics.roc_curve": [[786, "examples-using-sklearn-metrics-roc-curve"]], "sklearn.metrics.root_mean_squared_error": [[787, "sklearn-metrics-root-mean-squared-error"]], "Examples using sklearn.metrics.root_mean_squared_error": [[787, "examples-using-sklearn-metrics-root-mean-squared-error"]], "sklearn.metrics.root_mean_squared_log_error": [[788, "sklearn-metrics-root-mean-squared-log-error"]], "sklearn.metrics.silhouette_samples": [[789, "sklearn-metrics-silhouette-samples"]], "Examples using sklearn.metrics.silhouette_samples": [[789, "examples-using-sklearn-metrics-silhouette-samples"]], "sklearn.metrics.silhouette_score": [[790, "sklearn-metrics-silhouette-score"]], "Examples using sklearn.metrics.silhouette_score": [[790, "examples-using-sklearn-metrics-silhouette-score"]], "sklearn.metrics.top_k_accuracy_score": [[791, "sklearn-metrics-top-k-accuracy-score"]], "sklearn.metrics.v_measure_score": [[792, "sklearn-metrics-v-measure-score"]], "Examples using sklearn.metrics.v_measure_score": [[792, "examples-using-sklearn-metrics-v-measure-score"]], "sklearn.metrics.zero_one_loss": [[793, "sklearn-metrics-zero-one-loss"]], "sklearn.mixture.BayesianGaussianMixture": [[794, "sklearn-mixture-bayesiangaussianmixture"]], "Examples using sklearn.mixture.BayesianGaussianMixture": [[794, "examples-using-sklearn-mixture-bayesiangaussianmixture"]], "sklearn.mixture.GaussianMixture": [[795, "sklearn-mixture-gaussianmixture"]], "Examples using sklearn.mixture.GaussianMixture": [[795, "examples-using-sklearn-mixture-gaussianmixture"]], "sklearn.model_selection.GridSearchCV": [[796, "sklearn-model-selection-gridsearchcv"]], "Examples using sklearn.model_selection.GridSearchCV": [[796, "examples-using-sklearn-model-selection-gridsearchcv"]], "sklearn.model_selection.GroupKFold": [[797, "sklearn-model-selection-groupkfold"]], "Examples using sklearn.model_selection.GroupKFold": [[797, "examples-using-sklearn-model-selection-groupkfold"]], "sklearn.model_selection.GroupShuffleSplit": [[798, "sklearn-model-selection-groupshufflesplit"]], "Examples using sklearn.model_selection.GroupShuffleSplit": [[798, "examples-using-sklearn-model-selection-groupshufflesplit"]], "sklearn.model_selection.HalvingGridSearchCV": [[799, "sklearn-model-selection-halvinggridsearchcv"]], "Examples using sklearn.model_selection.HalvingGridSearchCV": [[799, "examples-using-sklearn-model-selection-halvinggridsearchcv"]], "sklearn.model_selection.HalvingRandomSearchCV": [[800, "sklearn-model-selection-halvingrandomsearchcv"]], "Examples using sklearn.model_selection.HalvingRandomSearchCV": [[800, "examples-using-sklearn-model-selection-halvingrandomsearchcv"]], "sklearn.model_selection.KFold": [[801, "sklearn-model-selection-kfold"]], "Examples using sklearn.model_selection.KFold": [[801, "examples-using-sklearn-model-selection-kfold"]], "sklearn.model_selection.LearningCurveDisplay": [[802, "sklearn-model-selection-learningcurvedisplay"]], "Examples using sklearn.model_selection.LearningCurveDisplay": [[802, "examples-using-sklearn-model-selection-learningcurvedisplay"]], "Examples using sklearn.model_selection.LearningCurveDisplay.from_estimator": [[802, "examples-using-sklearn-model-selection-learningcurvedisplay-from-estimator"]], "sklearn.model_selection.LeaveOneGroupOut": [[803, "sklearn-model-selection-leaveonegroupout"]], "sklearn.model_selection.LeaveOneOut": [[804, "sklearn-model-selection-leaveoneout"]], "sklearn.model_selection.LeavePGroupsOut": [[805, "sklearn-model-selection-leavepgroupsout"]], "sklearn.model_selection.LeavePOut": [[806, "sklearn-model-selection-leavepout"]], "sklearn.model_selection.ParameterGrid": [[807, "sklearn-model-selection-parametergrid"]], "sklearn.model_selection.ParameterSampler": [[808, "sklearn-model-selection-parametersampler"]], "sklearn.model_selection.PredefinedSplit": [[809, "sklearn-model-selection-predefinedsplit"]], "sklearn.model_selection.RandomizedSearchCV": [[810, "sklearn-model-selection-randomizedsearchcv"]], "Examples using sklearn.model_selection.RandomizedSearchCV": [[810, "examples-using-sklearn-model-selection-randomizedsearchcv"]], "sklearn.model_selection.RepeatedKFold": [[811, "sklearn-model-selection-repeatedkfold"]], "Examples using sklearn.model_selection.RepeatedKFold": [[811, "examples-using-sklearn-model-selection-repeatedkfold"]], "sklearn.model_selection.RepeatedStratifiedKFold": [[812, "sklearn-model-selection-repeatedstratifiedkfold"]], "Examples using sklearn.model_selection.RepeatedStratifiedKFold": [[812, "examples-using-sklearn-model-selection-repeatedstratifiedkfold"]], "sklearn.model_selection.ShuffleSplit": [[813, "sklearn-model-selection-shufflesplit"]], "Examples using sklearn.model_selection.ShuffleSplit": [[813, "examples-using-sklearn-model-selection-shufflesplit"]], "sklearn.model_selection.StratifiedGroupKFold": [[814, "sklearn-model-selection-stratifiedgroupkfold"]], "Examples using sklearn.model_selection.StratifiedGroupKFold": [[814, "examples-using-sklearn-model-selection-stratifiedgroupkfold"]], "sklearn.model_selection.StratifiedKFold": [[815, "sklearn-model-selection-stratifiedkfold"]], "Examples using sklearn.model_selection.StratifiedKFold": [[815, "examples-using-sklearn-model-selection-stratifiedkfold"]], "sklearn.model_selection.StratifiedShuffleSplit": [[816, "sklearn-model-selection-stratifiedshufflesplit"]], "Examples using sklearn.model_selection.StratifiedShuffleSplit": [[816, "examples-using-sklearn-model-selection-stratifiedshufflesplit"]], "sklearn.model_selection.TimeSeriesSplit": [[817, "sklearn-model-selection-timeseriessplit"]], "Examples using sklearn.model_selection.TimeSeriesSplit": [[817, "examples-using-sklearn-model-selection-timeseriessplit"]], "sklearn.model_selection.ValidationCurveDisplay": [[818, "sklearn-model-selection-validationcurvedisplay"]], "Examples using sklearn.model_selection.ValidationCurveDisplay.from_estimator": [[818, "examples-using-sklearn-model-selection-validationcurvedisplay-from-estimator"]], "sklearn.model_selection.check_cv": [[819, "sklearn-model-selection-check-cv"]], "sklearn.model_selection.cross_val_predict": [[820, "sklearn-model-selection-cross-val-predict"]], "Examples using sklearn.model_selection.cross_val_predict": [[820, "examples-using-sklearn-model-selection-cross-val-predict"]], "sklearn.model_selection.cross_val_score": [[821, "sklearn-model-selection-cross-val-score"]], "Examples using sklearn.model_selection.cross_val_score": [[821, "examples-using-sklearn-model-selection-cross-val-score"]], "sklearn.model_selection.cross_validate": [[822, "sklearn-model-selection-cross-validate"]], "Examples using sklearn.model_selection.cross_validate": [[822, "examples-using-sklearn-model-selection-cross-validate"]], "sklearn.model_selection.learning_curve": [[823, "sklearn-model-selection-learning-curve"]], "Examples using sklearn.model_selection.learning_curve": [[823, "examples-using-sklearn-model-selection-learning-curve"]], "sklearn.model_selection.permutation_test_score": [[824, "sklearn-model-selection-permutation-test-score"]], "Examples using sklearn.model_selection.permutation_test_score": [[824, "examples-using-sklearn-model-selection-permutation-test-score"]], "sklearn.model_selection.train_test_split": [[825, "sklearn-model-selection-train-test-split"]], "Examples using sklearn.model_selection.train_test_split": [[825, "examples-using-sklearn-model-selection-train-test-split"]], "sklearn.model_selection.validation_curve": [[826, "sklearn-model-selection-validation-curve"]], "Examples using sklearn.model_selection.validation_curve": [[826, "examples-using-sklearn-model-selection-validation-curve"]], "sklearn.multiclass.OneVsOneClassifier": [[827, "sklearn-multiclass-onevsoneclassifier"]], "Examples using sklearn.multiclass.OneVsOneClassifier": [[827, "examples-using-sklearn-multiclass-onevsoneclassifier"]], "sklearn.multiclass.OneVsRestClassifier": [[828, "sklearn-multiclass-onevsrestclassifier"]], "Examples using sklearn.multiclass.OneVsRestClassifier": [[828, "examples-using-sklearn-multiclass-onevsrestclassifier"]], "sklearn.multiclass.OutputCodeClassifier": [[829, "sklearn-multiclass-outputcodeclassifier"]], "Examples using sklearn.multiclass.OutputCodeClassifier": [[829, "examples-using-sklearn-multiclass-outputcodeclassifier"]], "sklearn.multioutput.ClassifierChain": [[830, "sklearn-multioutput-classifierchain"]], "Examples using sklearn.multioutput.ClassifierChain": [[830, "examples-using-sklearn-multioutput-classifierchain"]], "sklearn.multioutput.MultiOutputClassifier": [[831, "sklearn-multioutput-multioutputclassifier"]], "sklearn.multioutput.MultiOutputRegressor": [[832, "sklearn-multioutput-multioutputregressor"]], "Examples using sklearn.multioutput.MultiOutputRegressor": [[832, "examples-using-sklearn-multioutput-multioutputregressor"]], "sklearn.multioutput.RegressorChain": [[833, "sklearn-multioutput-regressorchain"]], "sklearn.naive_bayes.BernoulliNB": [[834, "sklearn-naive-bayes-bernoullinb"]], "Examples using sklearn.naive_bayes.BernoulliNB": [[834, "examples-using-sklearn-naive-bayes-bernoullinb"]], "sklearn.naive_bayes.CategoricalNB": [[835, "sklearn-naive-bayes-categoricalnb"]], "sklearn.naive_bayes.ComplementNB": [[836, "sklearn-naive-bayes-complementnb"]], "Examples using sklearn.naive_bayes.ComplementNB": [[836, "examples-using-sklearn-naive-bayes-complementnb"]], "sklearn.naive_bayes.GaussianNB": [[837, "sklearn-naive-bayes-gaussiannb"]], "Examples using sklearn.naive_bayes.GaussianNB": [[837, "examples-using-sklearn-naive-bayes-gaussiannb"]], "sklearn.naive_bayes.MultinomialNB": [[838, "sklearn-naive-bayes-multinomialnb"]], "Examples using sklearn.naive_bayes.MultinomialNB": [[838, "examples-using-sklearn-naive-bayes-multinomialnb"]], "sklearn.neighbors.BallTree": [[839, "sklearn-neighbors-balltree"]], "sklearn.neighbors.KDTree": [[840, "sklearn-neighbors-kdtree"]], "sklearn.neighbors.KNeighborsClassifier": [[841, "sklearn-neighbors-kneighborsclassifier"]], "Examples using sklearn.neighbors.KNeighborsClassifier": [[841, "examples-using-sklearn-neighbors-kneighborsclassifier"]], "sklearn.neighbors.KNeighborsRegressor": [[842, "sklearn-neighbors-kneighborsregressor"]], "Examples using sklearn.neighbors.KNeighborsRegressor": [[842, "examples-using-sklearn-neighbors-kneighborsregressor"]], "sklearn.neighbors.KNeighborsTransformer": [[843, "sklearn-neighbors-kneighborstransformer"]], "Examples using sklearn.neighbors.KNeighborsTransformer": [[843, "examples-using-sklearn-neighbors-kneighborstransformer"]], "sklearn.neighbors.KernelDensity": [[844, "sklearn-neighbors-kerneldensity"]], "Examples using sklearn.neighbors.KernelDensity": [[844, "examples-using-sklearn-neighbors-kerneldensity"]], "sklearn.neighbors.LocalOutlierFactor": [[845, "sklearn-neighbors-localoutlierfactor"]], "Examples using sklearn.neighbors.LocalOutlierFactor": [[845, "examples-using-sklearn-neighbors-localoutlierfactor"]], "sklearn.neighbors.NearestCentroid": [[846, "sklearn-neighbors-nearestcentroid"]], "Examples using sklearn.neighbors.NearestCentroid": [[846, "examples-using-sklearn-neighbors-nearestcentroid"]], "sklearn.neighbors.NearestNeighbors": [[847, "sklearn-neighbors-nearestneighbors"]], "Examples using sklearn.neighbors.NearestNeighbors": [[847, "examples-using-sklearn-neighbors-nearestneighbors"]], "sklearn.neighbors.NeighborhoodComponentsAnalysis": [[848, "sklearn-neighbors-neighborhoodcomponentsanalysis"]], "Examples using sklearn.neighbors.NeighborhoodComponentsAnalysis": [[848, "examples-using-sklearn-neighbors-neighborhoodcomponentsanalysis"]], "sklearn.neighbors.RadiusNeighborsClassifier": [[849, "sklearn-neighbors-radiusneighborsclassifier"]], "sklearn.neighbors.RadiusNeighborsRegressor": [[850, "sklearn-neighbors-radiusneighborsregressor"]], "sklearn.neighbors.RadiusNeighborsTransformer": [[851, "sklearn-neighbors-radiusneighborstransformer"]], "sklearn.neighbors.kneighbors_graph": [[852, "sklearn-neighbors-kneighbors-graph"]], "Examples using sklearn.neighbors.kneighbors_graph": [[852, "examples-using-sklearn-neighbors-kneighbors-graph"]], "sklearn.neighbors.radius_neighbors_graph": [[853, "sklearn-neighbors-radius-neighbors-graph"]], "sklearn.neighbors.sort_graph_by_row_values": [[854, "sklearn-neighbors-sort-graph-by-row-values"]], "sklearn.neural_network.BernoulliRBM": [[855, "sklearn-neural-network-bernoullirbm"]], "Examples using sklearn.neural_network.BernoulliRBM": [[855, "examples-using-sklearn-neural-network-bernoullirbm"]], "sklearn.neural_network.MLPClassifier": [[856, "sklearn-neural-network-mlpclassifier"]], "Examples using sklearn.neural_network.MLPClassifier": [[856, "examples-using-sklearn-neural-network-mlpclassifier"]], "sklearn.neural_network.MLPRegressor": [[857, "sklearn-neural-network-mlpregressor"]], "Examples using sklearn.neural_network.MLPRegressor": [[857, "examples-using-sklearn-neural-network-mlpregressor"]], "sklearn.pipeline.FeatureUnion": [[858, "sklearn-pipeline-featureunion"]], "Examples using sklearn.pipeline.FeatureUnion": [[858, "examples-using-sklearn-pipeline-featureunion"]], "sklearn.pipeline.Pipeline": [[859, "sklearn-pipeline-pipeline"]], "Examples using sklearn.pipeline.Pipeline": [[859, "examples-using-sklearn-pipeline-pipeline"]], "sklearn.pipeline.make_pipeline": [[860, "sklearn-pipeline-make-pipeline"]], "Examples using sklearn.pipeline.make_pipeline": [[860, "examples-using-sklearn-pipeline-make-pipeline"]], "sklearn.pipeline.make_union": [[861, "sklearn-pipeline-make-union"]], "sklearn.preprocessing.Binarizer": [[862, "sklearn-preprocessing-binarizer"]], "sklearn.preprocessing.FunctionTransformer": [[863, "sklearn-preprocessing-functiontransformer"]], "Examples using sklearn.preprocessing.FunctionTransformer": [[863, "examples-using-sklearn-preprocessing-functiontransformer"]], "sklearn.preprocessing.KBinsDiscretizer": [[864, "sklearn-preprocessing-kbinsdiscretizer"]], "Examples using sklearn.preprocessing.KBinsDiscretizer": [[864, "examples-using-sklearn-preprocessing-kbinsdiscretizer"]], "sklearn.preprocessing.KernelCenterer": [[865, "sklearn-preprocessing-kernelcenterer"]], "sklearn.preprocessing.LabelBinarizer": [[866, "sklearn-preprocessing-labelbinarizer"]], "Examples using sklearn.preprocessing.LabelBinarizer": [[866, "examples-using-sklearn-preprocessing-labelbinarizer"]], "sklearn.preprocessing.LabelEncoder": [[867, "sklearn-preprocessing-labelencoder"]], "sklearn.preprocessing.MaxAbsScaler": [[868, "sklearn-preprocessing-maxabsscaler"]], "Examples using sklearn.preprocessing.MaxAbsScaler": [[868, "examples-using-sklearn-preprocessing-maxabsscaler"]], "sklearn.preprocessing.MinMaxScaler": [[869, "sklearn-preprocessing-minmaxscaler"]], "Examples using sklearn.preprocessing.MinMaxScaler": [[869, "examples-using-sklearn-preprocessing-minmaxscaler"]], "sklearn.preprocessing.MultiLabelBinarizer": [[870, "sklearn-preprocessing-multilabelbinarizer"]], "sklearn.preprocessing.Normalizer": [[871, "sklearn-preprocessing-normalizer"]], "Examples using sklearn.preprocessing.Normalizer": [[871, "examples-using-sklearn-preprocessing-normalizer"]], "sklearn.preprocessing.OneHotEncoder": [[872, "sklearn-preprocessing-onehotencoder"]], "Examples using sklearn.preprocessing.OneHotEncoder": [[872, "examples-using-sklearn-preprocessing-onehotencoder"]], "sklearn.preprocessing.OrdinalEncoder": [[873, "sklearn-preprocessing-ordinalencoder"]], "Examples using sklearn.preprocessing.OrdinalEncoder": [[873, "examples-using-sklearn-preprocessing-ordinalencoder"]], "sklearn.preprocessing.PolynomialFeatures": [[874, "sklearn-preprocessing-polynomialfeatures"]], "Examples using sklearn.preprocessing.PolynomialFeatures": [[874, "examples-using-sklearn-preprocessing-polynomialfeatures"]], "sklearn.preprocessing.PowerTransformer": [[875, "sklearn-preprocessing-powertransformer"]], "Examples using sklearn.preprocessing.PowerTransformer": [[875, "examples-using-sklearn-preprocessing-powertransformer"]], "sklearn.preprocessing.QuantileTransformer": [[876, "sklearn-preprocessing-quantiletransformer"]], "Examples using sklearn.preprocessing.QuantileTransformer": [[876, "examples-using-sklearn-preprocessing-quantiletransformer"]], "sklearn.preprocessing.RobustScaler": [[877, "sklearn-preprocessing-robustscaler"]], "Examples using sklearn.preprocessing.RobustScaler": [[877, "examples-using-sklearn-preprocessing-robustscaler"]], "sklearn.preprocessing.SplineTransformer": [[878, "sklearn-preprocessing-splinetransformer"]], "Examples using sklearn.preprocessing.SplineTransformer": [[878, "examples-using-sklearn-preprocessing-splinetransformer"]], "sklearn.preprocessing.StandardScaler": [[879, "sklearn-preprocessing-standardscaler"]], "Examples using sklearn.preprocessing.StandardScaler": [[879, "examples-using-sklearn-preprocessing-standardscaler"]], "sklearn.preprocessing.TargetEncoder": [[880, "sklearn-preprocessing-targetencoder"]], "Examples using sklearn.preprocessing.TargetEncoder": [[880, "examples-using-sklearn-preprocessing-targetencoder"]], "sklearn.preprocessing.add_dummy_feature": [[881, "sklearn-preprocessing-add-dummy-feature"]], "sklearn.preprocessing.binarize": [[882, "sklearn-preprocessing-binarize"]], "sklearn.preprocessing.label_binarize": [[883, "sklearn-preprocessing-label-binarize"]], "Examples using sklearn.preprocessing.label_binarize": [[883, "examples-using-sklearn-preprocessing-label-binarize"]], "sklearn.preprocessing.maxabs_scale": [[884, "sklearn-preprocessing-maxabs-scale"]], "sklearn.preprocessing.minmax_scale": [[885, "sklearn-preprocessing-minmax-scale"]], "Examples using sklearn.preprocessing.minmax_scale": [[885, "examples-using-sklearn-preprocessing-minmax-scale"]], "sklearn.preprocessing.normalize": [[886, "sklearn-preprocessing-normalize"]], "sklearn.preprocessing.power_transform": [[887, "sklearn-preprocessing-power-transform"]], "sklearn.preprocessing.quantile_transform": [[888, "sklearn-preprocessing-quantile-transform"]], "Examples using sklearn.preprocessing.quantile_transform": [[888, "examples-using-sklearn-preprocessing-quantile-transform"]], "sklearn.preprocessing.robust_scale": [[889, "sklearn-preprocessing-robust-scale"]], "sklearn.preprocessing.scale": [[890, "sklearn-preprocessing-scale"]], "sklearn.random_projection.GaussianRandomProjection": [[891, "sklearn-random-projection-gaussianrandomprojection"]], "sklearn.random_projection.SparseRandomProjection": [[892, "sklearn-random-projection-sparserandomprojection"]], "Examples using sklearn.random_projection.SparseRandomProjection": [[892, "examples-using-sklearn-random-projection-sparserandomprojection"]], "sklearn.random_projection.johnson_lindenstrauss_min_dim": [[893, "sklearn-random-projection-johnson-lindenstrauss-min-dim"]], "Examples using sklearn.random_projection.johnson_lindenstrauss_min_dim": [[893, "examples-using-sklearn-random-projection-johnson-lindenstrauss-min-dim"]], "sklearn.semi_supervised.LabelPropagation": [[894, "sklearn-semi-supervised-labelpropagation"]], "sklearn.semi_supervised.LabelSpreading": [[895, "sklearn-semi-supervised-labelspreading"]], "Examples using sklearn.semi_supervised.LabelSpreading": [[895, "examples-using-sklearn-semi-supervised-labelspreading"]], "sklearn.semi_supervised.SelfTrainingClassifier": [[896, "sklearn-semi-supervised-selftrainingclassifier"]], "Examples using sklearn.semi_supervised.SelfTrainingClassifier": [[896, "examples-using-sklearn-semi-supervised-selftrainingclassifier"]], "sklearn.set_config": [[897, "sklearn-set-config"]], "Examples using sklearn.set_config": [[897, "examples-using-sklearn-set-config"]], "sklearn.show_versions": [[898, "sklearn-show-versions"]], "sklearn.svm.LinearSVC": [[899, "sklearn-svm-linearsvc"]], "Examples using sklearn.svm.LinearSVC": [[899, "examples-using-sklearn-svm-linearsvc"]], "sklearn.svm.LinearSVR": [[900, "sklearn-svm-linearsvr"]], "sklearn.svm.NuSVC": [[901, "sklearn-svm-nusvc"]], "Examples using sklearn.svm.NuSVC": [[901, "examples-using-sklearn-svm-nusvc"]], "sklearn.svm.NuSVR": [[902, "sklearn-svm-nusvr"]], "Examples using sklearn.svm.NuSVR": [[902, "examples-using-sklearn-svm-nusvr"]], "sklearn.svm.OneClassSVM": [[903, "sklearn-svm-oneclasssvm"]], "Examples using sklearn.svm.OneClassSVM": [[903, "examples-using-sklearn-svm-oneclasssvm"]], "sklearn.svm.SVC": [[904, "sklearn-svm-svc"]], "Examples using sklearn.svm.SVC": [[904, "examples-using-sklearn-svm-svc"]], "sklearn.svm.SVR": [[905, "sklearn-svm-svr"]], "Examples using sklearn.svm.SVR": [[905, "examples-using-sklearn-svm-svr"]], "sklearn.svm.l1_min_c": [[906, "sklearn-svm-l1-min-c"]], "Examples using sklearn.svm.l1_min_c": [[906, "examples-using-sklearn-svm-l1-min-c"]], "sklearn.tree.DecisionTreeClassifier": [[907, "sklearn-tree-decisiontreeclassifier"]], "Examples using sklearn.tree.DecisionTreeClassifier": [[907, "examples-using-sklearn-tree-decisiontreeclassifier"]], "sklearn.tree.DecisionTreeRegressor": [[908, "sklearn-tree-decisiontreeregressor"]], "Examples using sklearn.tree.DecisionTreeRegressor": [[908, "examples-using-sklearn-tree-decisiontreeregressor"]], "sklearn.tree.ExtraTreeClassifier": [[909, "sklearn-tree-extratreeclassifier"]], "sklearn.tree.ExtraTreeRegressor": [[910, "sklearn-tree-extratreeregressor"]], "sklearn.tree.export_graphviz": [[911, "sklearn-tree-export-graphviz"]], "sklearn.tree.export_text": [[912, "sklearn-tree-export-text"]], "sklearn.tree.plot_tree": [[913, "sklearn-tree-plot-tree"]], "Examples using sklearn.tree.plot_tree": [[913, "examples-using-sklearn-tree-plot-tree"]], "sklearn.utils.Bunch": [[914, "sklearn-utils-bunch"]], "Examples using sklearn.utils.Bunch": [[914, "examples-using-sklearn-utils-bunch"]], "sklearn.utils._safe_indexing": [[915, "sklearn-utils-safe-indexing"]], "sklearn.utils.arrayfuncs.min_pos": [[916, "sklearn-utils-arrayfuncs-min-pos"]], "sklearn.utils.as_float_array": [[917, "sklearn-utils-as-float-array"]], "sklearn.utils.assert_all_finite": [[918, "sklearn-utils-assert-all-finite"]], "sklearn.utils.check_X_y": [[919, "sklearn-utils-check-x-y"]], "sklearn.utils.check_array": [[920, "sklearn-utils-check-array"]], "sklearn.utils.check_consistent_length": [[921, "sklearn-utils-check-consistent-length"]], "sklearn.utils.check_random_state": [[922, "sklearn-utils-check-random-state"]], "Examples using sklearn.utils.check_random_state": [[922, "examples-using-sklearn-utils-check-random-state"]], "sklearn.utils.check_scalar": [[923, "sklearn-utils-check-scalar"]], "sklearn.utils.class_weight.compute_class_weight": [[924, "sklearn-utils-class-weight-compute-class-weight"]], "sklearn.utils.class_weight.compute_sample_weight": [[925, "sklearn-utils-class-weight-compute-sample-weight"]], "sklearn.utils.deprecated": [[926, "sklearn-utils-deprecated"]], "sklearn.utils.discovery.all_displays": [[927, "sklearn-utils-discovery-all-displays"]], "sklearn.utils.discovery.all_estimators": [[928, "sklearn-utils-discovery-all-estimators"]], "sklearn.utils.discovery.all_functions": [[929, "sklearn-utils-discovery-all-functions"]], "sklearn.utils.estimator_checks.check_estimator": [[930, "sklearn-utils-estimator-checks-check-estimator"]], "sklearn.utils.estimator_checks.parametrize_with_checks": [[931, "sklearn-utils-estimator-checks-parametrize-with-checks"]], "Examples using sklearn.utils.estimator_checks.parametrize_with_checks": [[931, "examples-using-sklearn-utils-estimator-checks-parametrize-with-checks"]], "sklearn.utils.estimator_html_repr": [[932, "sklearn-utils-estimator-html-repr"]], "sklearn.utils.extmath.density": [[933, "sklearn-utils-extmath-density"]], "Examples using sklearn.utils.extmath.density": [[933, "examples-using-sklearn-utils-extmath-density"]], "sklearn.utils.extmath.fast_logdet": [[934, "sklearn-utils-extmath-fast-logdet"]], "sklearn.utils.extmath.randomized_range_finder": [[935, "sklearn-utils-extmath-randomized-range-finder"]], "sklearn.utils.extmath.randomized_svd": [[936, "sklearn-utils-extmath-randomized-svd"]], "sklearn.utils.extmath.safe_sparse_dot": [[937, "sklearn-utils-extmath-safe-sparse-dot"]], "sklearn.utils.extmath.weighted_mode": [[938, "sklearn-utils-extmath-weighted-mode"]], "sklearn.utils.gen_batches": [[939, "sklearn-utils-gen-batches"]], "sklearn.utils.gen_even_slices": [[940, "sklearn-utils-gen-even-slices"]], "Examples using sklearn.utils.gen_even_slices": [[940, "examples-using-sklearn-utils-gen-even-slices"]], "sklearn.utils.graph.single_source_shortest_path_length": [[941, "sklearn-utils-graph-single-source-shortest-path-length"]], "sklearn.utils.indexable": [[942, "sklearn-utils-indexable"]], "sklearn.utils.metadata_routing.MetadataRequest": [[943, "sklearn-utils-metadata-routing-metadatarequest"]], "sklearn.utils.metadata_routing.MetadataRouter": [[944, "sklearn-utils-metadata-routing-metadatarouter"]], "Examples using sklearn.utils.metadata_routing.MetadataRouter": [[944, "examples-using-sklearn-utils-metadata-routing-metadatarouter"]], "sklearn.utils.metadata_routing.MethodMapping": [[945, "sklearn-utils-metadata-routing-methodmapping"]], "Examples using sklearn.utils.metadata_routing.MethodMapping": [[945, "examples-using-sklearn-utils-metadata-routing-methodmapping"]], "sklearn.utils.metadata_routing.get_routing_for_object": [[946, "sklearn-utils-metadata-routing-get-routing-for-object"]], "Examples using sklearn.utils.metadata_routing.get_routing_for_object": [[946, "examples-using-sklearn-utils-metadata-routing-get-routing-for-object"]], "sklearn.utils.metadata_routing.process_routing": [[947, "sklearn-utils-metadata-routing-process-routing"]], "Examples using sklearn.utils.metadata_routing.process_routing": [[947, "examples-using-sklearn-utils-metadata-routing-process-routing"]], "sklearn.utils.metaestimators.available_if": [[948, "sklearn-utils-metaestimators-available-if"]], "Examples using sklearn.utils.metaestimators.available_if": [[948, "examples-using-sklearn-utils-metaestimators-available-if"]], "sklearn.utils.multiclass.is_multilabel": [[949, "sklearn-utils-multiclass-is-multilabel"]], "sklearn.utils.multiclass.type_of_target": [[950, "sklearn-utils-multiclass-type-of-target"]], "sklearn.utils.multiclass.unique_labels": [[951, "sklearn-utils-multiclass-unique-labels"]], "sklearn.utils.murmurhash3_32": [[952, "sklearn-utils-murmurhash3-32"]], "sklearn.utils.parallel.Parallel": [[953, "sklearn-utils-parallel-parallel"]], "sklearn.utils.parallel.delayed": [[954, "sklearn-utils-parallel-delayed"]], "sklearn.utils.parallel_backend": [[955, "sklearn-utils-parallel-backend"]], "sklearn.utils.random.sample_without_replacement": [[956, "sklearn-utils-random-sample-without-replacement"]], "sklearn.utils.register_parallel_backend": [[957, "sklearn-utils-register-parallel-backend"]], "sklearn.utils.resample": [[958, "sklearn-utils-resample"]], "sklearn.utils.safe_mask": [[959, "sklearn-utils-safe-mask"]], "sklearn.utils.safe_sqr": [[960, "sklearn-utils-safe-sqr"]], "sklearn.utils.shuffle": [[961, "sklearn-utils-shuffle"]], "Examples using sklearn.utils.shuffle": [[961, "examples-using-sklearn-utils-shuffle"]], "sklearn.utils.sparsefuncs.incr_mean_variance_axis": [[962, "sklearn-utils-sparsefuncs-incr-mean-variance-axis"]], "sklearn.utils.sparsefuncs.inplace_column_scale": [[963, "sklearn-utils-sparsefuncs-inplace-column-scale"]], "sklearn.utils.sparsefuncs.inplace_csr_column_scale": [[964, "sklearn-utils-sparsefuncs-inplace-csr-column-scale"]], "sklearn.utils.sparsefuncs.inplace_row_scale": [[965, "sklearn-utils-sparsefuncs-inplace-row-scale"]], "sklearn.utils.sparsefuncs.inplace_swap_column": [[966, "sklearn-utils-sparsefuncs-inplace-swap-column"]], "sklearn.utils.sparsefuncs.inplace_swap_row": [[967, "sklearn-utils-sparsefuncs-inplace-swap-row"]], "sklearn.utils.sparsefuncs.mean_variance_axis": [[968, "sklearn-utils-sparsefuncs-mean-variance-axis"]], "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1": [[969, "sklearn-utils-sparsefuncs-fast-inplace-csr-row-normalize-l1"]], "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2": [[970, "sklearn-utils-sparsefuncs-fast-inplace-csr-row-normalize-l2"]], "sklearn.utils.validation.check_is_fitted": [[971, "sklearn-utils-validation-check-is-fitted"]], "Examples using sklearn.utils.validation.check_is_fitted": [[971, "examples-using-sklearn-utils-validation-check-is-fitted"]], "sklearn.utils.validation.check_memory": [[972, "sklearn-utils-validation-check-memory"]], "sklearn.utils.validation.check_symmetric": [[973, "sklearn-utils-validation-check-symmetric"]], "sklearn.utils.validation.column_or_1d": [[974, "sklearn-utils-validation-column-or-1d"]], "sklearn.utils.validation.has_fit_parameter": [[975, "sklearn-utils-validation-has-fit-parameter"]], "Tuning the hyper-parameters of an estimator": [[976, "tuning-the-hyper-parameters-of-an-estimator"]], "Exhaustive Grid Search": [[976, "exhaustive-grid-search"]], "Randomized Parameter Optimization": [[976, "randomized-parameter-optimization"]], "Searching for optimal parameters with successive halving": [[976, "searching-for-optimal-parameters-with-successive-halving"]], "Choosing min_resources and the number of candidates": [[976, "choosing-min-resources-and-the-number-of-candidates"]], "Amount of resource and number of candidates at each iteration": [[976, "amount-of-resource-and-number-of-candidates-at-each-iteration"]], "Choosing a resource": [[976, "choosing-a-resource"]], "Exhausting the available resources": [[976, "exhausting-the-available-resources"]], "Aggressive elimination of candidates": [[976, "aggressive-elimination-of-candidates"]], "Analyzing results with the cv_results_ attribute": [[976, "analyzing-results-with-the-cv-results-attribute"]], "Tips for parameter search": [[976, "tips-for-parameter-search"]], "Specifying an objective metric": [[976, "specifying-an-objective-metric"]], "Specifying multiple metrics for evaluation": [[976, "specifying-multiple-metrics-for-evaluation"]], "Composite estimators and parameter spaces": [[976, "composite-estimators-and-parameter-spaces"]], "Model selection: development and evaluation": [[976, "model-selection-development-and-evaluation"]], "Robustness to failure": [[976, "robustness-to-failure"]], "Alternatives to brute force parameter search": [[976, "alternatives-to-brute-force-parameter-search"]], "Model specific cross-validation": [[976, "model-specific-cross-validation"]], "Information Criterion": [[976, "information-criterion"]], "Out of Bag Estimates": [[976, "out-of-bag-estimates"]], "Imputation of missing values": [[977, "imputation-of-missing-values"], [997, "imputation-of-missing-values"]], "Univariate vs. Multivariate Imputation": [[977, "univariate-vs-multivariate-imputation"]], "Univariate feature imputation": [[977, "univariate-feature-imputation"]], "Multivariate feature imputation": [[977, "multivariate-feature-imputation"]], "Flexibility of IterativeImputer": [[977, "flexibility-of-iterativeimputer"]], "Multiple vs. Single Imputation": [[977, "multiple-vs-single-imputation"]], "Nearest neighbors imputation": [[977, "nearest-neighbors-imputation"]], "Keeping the number of features constant": [[977, "keeping-the-number-of-features-constant"]], "Marking imputed values": [[977, "marking-imputed-values"]], "Estimators that handle NaN values": [[977, "estimators-that-handle-nan-values"]], "Isotonic regression": [[978, "isotonic-regression"]], "Nystroem Method for Kernel Approximation": [[979, "nystroem-method-for-kernel-approximation"]], "Radial Basis Function Kernel": [[979, "radial-basis-function-kernel"]], "Additive Chi Squared Kernel": [[979, "additive-chi-squared-kernel"]], "Skewed Chi Squared Kernel": [[979, "skewed-chi-squared-kernel"]], "Polynomial Kernel Approximation via Tensor Sketch": [[979, "polynomial-kernel-approximation-via-tensor-sketch"]], "Mathematical Details": [[979, "mathematical-details"]], "Kernel ridge regression": [[980, "kernel-ridge-regression"]], "Linear and Quadratic Discriminant Analysis": [[981, "linear-and-quadratic-discriminant-analysis"]], "Dimensionality reduction using Linear Discriminant Analysis": [[981, "dimensionality-reduction-using-linear-discriminant-analysis"]], "Mathematical formulation of the LDA and QDA classifiers": [[981, "mathematical-formulation-of-the-lda-and-qda-classifiers"]], "QDA": [[981, "qda"]], "LDA": [[981, "lda"]], "Mathematical formulation of LDA dimensionality reduction": [[981, "mathematical-formulation-of-lda-dimensionality-reduction"]], "Shrinkage and Covariance Estimator": [[981, "shrinkage-and-covariance-estimator"]], "Estimation algorithms": [[981, "estimation-algorithms"]], "Validation curves: plotting scores to evaluate models": [[982, "validation-curves-plotting-scores-to-evaluate-models"]], "Validation curve": [[982, "validation-curve"]], "Learning curve": [[982, "learning-curve"]], "Linear Models": [[983, "linear-models"]], "Ordinary Least Squares": [[983, "ordinary-least-squares"]], "Non-Negative Least Squares": [[983, "non-negative-least-squares"]], "Ordinary Least Squares Complexity": [[983, "ordinary-least-squares-complexity"]], "Ridge regression and classification": [[983, "ridge-regression-and-classification"]], "Ridge Complexity": [[983, "ridge-complexity"]], "Setting the regularization parameter: leave-one-out Cross-Validation": [[983, "setting-the-regularization-parameter-leave-one-out-cross-validation"]], "Setting regularization parameter": [[983, "setting-regularization-parameter"]], "Using cross-validation": [[983, "using-cross-validation"]], "Information-criteria based model selection": [[983, "information-criteria-based-model-selection"]], "AIC and BIC criteria": [[983, "aic-and-bic-criteria"]], "Comparison with the regularization parameter of SVM": [[983, "comparison-with-the-regularization-parameter-of-svm"]], "Multi-task Lasso": [[983, "multi-task-lasso"]], "Elastic-Net": [[983, "elastic-net"]], "Multi-task Elastic-Net": [[983, "multi-task-elastic-net"]], "Least Angle Regression": [[983, "least-angle-regression"]], "LARS Lasso": [[983, "lars-lasso"]], "Orthogonal Matching Pursuit (OMP)": [[983, "orthogonal-matching-pursuit-omp"]], "Bayesian Regression": [[983, "bayesian-regression"]], "Bayesian Ridge Regression": [[983, "bayesian-ridge-regression"]], "Automatic Relevance Determination - ARD": [[983, "automatic-relevance-determination-ard"]], "Logistic regression": [[983, "logistic-regression"]], "Binary Case": [[983, "binary-case"]], "Multinomial Case": [[983, "multinomial-case"]], "Solvers": [[983, "solvers"]], "Differences between solvers": [[983, "differences-between-solvers"]], "Stochastic Gradient Descent - SGD": [[983, "stochastic-gradient-descent-sgd"]], "Perceptron": [[983, "perceptron"]], "Passive Aggressive Algorithms": [[983, "passive-aggressive-algorithms"]], "Robustness regression: outliers and modeling errors": [[983, "robustness-regression-outliers-and-modeling-errors"]], "Different scenario and useful concepts": [[983, "different-scenario-and-useful-concepts"]], "Trade-offs: which estimator ?": [[983, null]], "RANSAC: RANdom SAmple Consensus": [[983, "ransac-random-sample-consensus"]], "Theil-Sen estimator: generalized-median-based estimator": [[983, "theil-sen-estimator-generalized-median-based-estimator"]], "Huber Regression": [[983, "huber-regression"]], "Quantile Regression": [[983, "quantile-regression"]], "Polynomial regression: extending linear models with basis functions": [[983, "polynomial-regression-extending-linear-models-with-basis-functions"]], "Introduction": [[984, "introduction"]], "Isomap": [[984, "isomap"]], "Locally Linear Embedding": [[984, "locally-linear-embedding"]], "Modified Locally Linear Embedding": [[984, "modified-locally-linear-embedding"]], "Hessian Eigenmapping": [[984, "hessian-eigenmapping"]], "Spectral Embedding": [[984, "spectral-embedding"]], "Local Tangent Space Alignment": [[984, "local-tangent-space-alignment"]], "Multi-dimensional Scaling (MDS)": [[984, "multi-dimensional-scaling-mds"]], "t-distributed Stochastic Neighbor Embedding (t-SNE)": [[984, "t-distributed-stochastic-neighbor-embedding-t-sne"]], "Tips on practical use": [[984, "tips-on-practical-use"], [1003, "tips-on-practical-use"]], "Pairwise metrics, Affinities and Kernels": [[985, "pairwise-metrics-affinities-and-kernels"]], "Cosine similarity": [[985, "cosine-similarity"]], "Laplacian kernel": [[985, "laplacian-kernel"]], "Chi-squared kernel": [[985, "chi-squared-kernel"]], "Gaussian mixture models": [[986, "gaussian-mixture-models"]], "Gaussian Mixture": [[986, "gaussian-mixture"]], "Pros:": [[986, null], [986, null]], "Cons:": [[986, null], [986, null]], "Variational Bayesian Gaussian Mixture": [[986, "variational-bayesian-gaussian-mixture"]], "The Dirichlet Process": [[986, "the-dirichlet-process"]], "Metrics and scoring: quantifying the quality of predictions": [[987, "metrics-and-scoring-quantifying-the-quality-of-predictions"]], "The scoring parameter: defining model evaluation rules": [[987, "the-scoring-parameter-defining-model-evaluation-rules"]], "Common cases: predefined values": [[987, "common-cases-predefined-values"]], "Defining your scoring strategy from metric functions": [[987, "defining-your-scoring-strategy-from-metric-functions"]], "Implementing your own scoring object": [[987, "implementing-your-own-scoring-object"]], "Using multiple metric evaluation": [[987, "using-multiple-metric-evaluation"]], "From binary to multiclass and multilabel": [[987, "from-binary-to-multiclass-and-multilabel"]], "Accuracy score": [[987, "accuracy-score"]], "Example:": [[987, null], [987, null], [987, null], [987, null], [987, null], [987, null], [987, null], [987, null], [999, null], [1019, null]], "Top-k accuracy score": [[987, "top-k-accuracy-score"]], "Balanced accuracy score": [[987, "balanced-accuracy-score"]], "Cohen\u2019s kappa": [[987, "cohen-s-kappa"]], "Classification report": [[987, "classification-report"]], "Hamming loss": [[987, "hamming-loss"]], "Precision, recall and F-measures": [[987, "precision-recall-and-f-measures"]], "Binary classification": [[987, "binary-classification"]], "Multiclass and multilabel classification": [[987, "multiclass-and-multilabel-classification"]], "Jaccard similarity coefficient score": [[987, "jaccard-similarity-coefficient-score"]], "Hinge loss": [[987, "hinge-loss"]], "Log loss": [[987, "log-loss"]], "Matthews correlation coefficient": [[987, "matthews-correlation-coefficient"]], "Multi-label confusion matrix": [[987, "multi-label-confusion-matrix"]], "Receiver operating characteristic (ROC)": [[987, "receiver-operating-characteristic-roc"]], "Binary case": [[987, "binary-case"]], "Multi-class case": [[987, "multi-class-case"]], "Multi-label case": [[987, "multi-label-case"]], "Detection error tradeoff (DET)": [[987, "detection-error-tradeoff-det"]], "Zero one loss": [[987, "zero-one-loss"]], "Brier score loss": [[987, "brier-score-loss"]], "Class likelihood ratios": [[987, "class-likelihood-ratios"]], "Coverage error": [[987, "coverage-error"]], "Label ranking average precision": [[987, "label-ranking-average-precision"]], "Ranking loss": [[987, "ranking-loss"]], "Normalized Discounted Cumulative Gain": [[987, "normalized-discounted-cumulative-gain"]], "R\u00b2 score, the coefficient of determination": [[987, "r2-score-the-coefficient-of-determination"]], "Mean absolute error": [[987, "mean-absolute-error"]], "Mean squared error": [[987, "mean-squared-error"]], "Mean squared logarithmic error": [[987, "mean-squared-logarithmic-error"]], "Mean absolute percentage error": [[987, "mean-absolute-percentage-error"]], "Median absolute error": [[987, "median-absolute-error"]], "Max error": [[987, "max-error"]], "Explained variance score": [[987, "explained-variance-score"]], "Link to R\u00b2 score, the coefficient of determination": [[987, null]], "Mean Poisson, Gamma, and Tweedie deviances": [[987, "mean-poisson-gamma-and-tweedie-deviances"]], "Pinball loss": [[987, "pinball-loss"]], "D\u00b2 score": [[987, "d2-score"]], "D\u00b2 Tweedie score": [[987, "d2-tweedie-score"]], "D\u00b2 pinball score": [[987, "d2-pinball-score"]], "D\u00b2 absolute error score": [[987, "d2-absolute-error-score"]], "Visual evaluation of regression models": [[987, "visual-evaluation-of-regression-models"]], "Dummy estimators": [[987, "dummy-estimators"]], "Multiclass and multioutput algorithms": [[988, "multiclass-and-multioutput-algorithms"]], "Multiclass classification": [[988, "multiclass-classification"], [1019, null]], "Target format": [[988, "target-format"], [988, "id5"], [988, "id8"], [988, "id10"]], "OneVsRestClassifier": [[988, "onevsrestclassifier"]], "OneVsOneClassifier": [[988, "onevsoneclassifier"]], "OutputCodeClassifier": [[988, "outputcodeclassifier"]], "MultiOutputClassifier": [[988, "multioutputclassifier"]], "ClassifierChain": [[988, "classifierchain"]], "Multiclass-multioutput classification": [[988, "multiclass-multioutput-classification"]], "Multioutput regression": [[988, "multioutput-regression"]], "MultiOutputRegressor": [[988, "multioutputregressor"]], "RegressorChain": [[988, "regressorchain"]], "Naive Bayes": [[989, "naive-bayes"]], "Multinomial Naive Bayes": [[989, "multinomial-naive-bayes"]], "Complement Naive Bayes": [[989, "complement-naive-bayes"]], "Bernoulli Naive Bayes": [[989, "bernoulli-naive-bayes"]], "Categorical Naive Bayes": [[989, "categorical-naive-bayes"]], "Out-of-core naive Bayes model fitting": [[989, "out-of-core-naive-bayes-model-fitting"]], "Unsupervised Nearest Neighbors": [[990, "unsupervised-nearest-neighbors"]], "Finding the Nearest Neighbors": [[990, "finding-the-nearest-neighbors"]], "KDTree and BallTree Classes": [[990, "kdtree-and-balltree-classes"]], "Nearest Neighbors Regression": [[990, "nearest-neighbors-regression"]], "Nearest Neighbor Algorithms": [[990, "nearest-neighbor-algorithms"]], "Brute Force": [[990, "brute-force"]], "K-D Tree": [[990, "k-d-tree"]], "Ball Tree": [[990, "ball-tree"]], "Choice of Nearest Neighbors Algorithm": [[990, "choice-of-nearest-neighbors-algorithm"]], "Effect of leaf_size": [[990, "effect-of-leaf-size"]], "Valid Metrics for Nearest Neighbor Algorithms": [[990, "valid-metrics-for-nearest-neighbor-algorithms"]], "Nearest Centroid Classifier": [[990, "nearest-centroid-classifier"]], "Nearest Shrunken Centroid": [[990, "nearest-shrunken-centroid"]], "Nearest Neighbors Transformer": [[990, "nearest-neighbors-transformer"]], "Neighborhood Components Analysis": [[990, "neighborhood-components-analysis"]], "Dimensionality reduction": [[990, "dimensionality-reduction"]], "Mahalanobis distance": [[990, "mahalanobis-distance"]], "Complexity": [[990, "complexity"], [991, "complexity"], [1001, "complexity"], [1002, "complexity"], [1003, "complexity"]], "Transform": [[990, "transform"]], "Neural network models (supervised)": [[991, "neural-network-models-supervised"]], "Multi-layer Perceptron": [[991, "multi-layer-perceptron"]], "Regularization": [[991, "regularization"]], "Algorithms": [[991, "algorithms"]], "Tips on Practical Use": [[991, "tips-on-practical-use"], [1001, "tips-on-practical-use"], [1002, "tips-on-practical-use"]], "More control with warm_start": [[991, "more-control-with-warm-start"]], "Neural network models (unsupervised)": [[992, "neural-network-models-unsupervised"]], "Restricted Boltzmann machines": [[992, "restricted-boltzmann-machines"]], "Graphical model and parametrization": [[992, "graphical-model-and-parametrization"]], "Bernoulli Restricted Boltzmann machines": [[992, "bernoulli-restricted-boltzmann-machines"]], "Stochastic Maximum Likelihood learning": [[992, "stochastic-maximum-likelihood-learning"]], "Novelty and Outlier Detection": [[993, "novelty-and-outlier-detection"]], "Overview of outlier detection methods": [[993, "overview-of-outlier-detection-methods"]], "Novelty Detection": [[993, "novelty-detection"]], "Scaling up the One-Class SVM": [[993, "scaling-up-the-one-class-svm"]], "Outlier Detection": [[993, "id1"]], "Fitting an elliptic envelope": [[993, "fitting-an-elliptic-envelope"]], "Isolation Forest": [[993, "isolation-forest"]], "Local Outlier Factor": [[993, "local-outlier-factor"]], "Novelty detection with Local Outlier Factor": [[993, "novelty-detection-with-local-outlier-factor"]], "Partial Dependence and Individual Conditional Expectation plots": [[994, "partial-dependence-and-individual-conditional-expectation-plots"]], "Partial dependence plots": [[994, "partial-dependence-plots"]], "Individual conditional expectation (ICE) plot": [[994, "individual-conditional-expectation-ice-plot"]], "Mathematical Definition": [[994, "mathematical-definition"]], "Computation methods": [[994, "computation-methods"]], "Permutation feature importance": [[995, "permutation-feature-importance"]], "Outline of the permutation importance algorithm": [[995, "outline-of-the-permutation-importance-algorithm"]], "Relation to impurity-based importance in trees": [[995, "relation-to-impurity-based-importance-in-trees"]], "Misleading values on strongly correlated features": [[995, "misleading-values-on-strongly-correlated-features"]], "Preprocessing data": [[997, "preprocessing-data"]], "Standardization, or mean removal and variance scaling": [[997, "standardization-or-mean-removal-and-variance-scaling"]], "Scaling features to a range": [[997, "scaling-features-to-a-range"]], "Scaling sparse data": [[997, "scaling-sparse-data"]], "Scaling data with outliers": [[997, "scaling-data-with-outliers"]], "Scaling vs Whitening": [[997, null]], "Centering kernel matrices": [[997, "centering-kernel-matrices"]], "Non-linear transformation": [[997, "non-linear-transformation"]], "Mapping to a Uniform distribution": [[997, "mapping-to-a-uniform-distribution"]], "Mapping to a Gaussian distribution": [[997, "mapping-to-a-gaussian-distribution"]], "Normalization": [[997, "normalization"]], "Sparse input": [[997, null], [997, null]], "Encoding categorical features": [[997, "encoding-categorical-features"]], "Infrequent categories": [[997, "infrequent-categories"]], "Target Encoder": [[997, "target-encoder"]], "Discretization": [[997, "discretization"]], "K-bins discretization": [[997, "k-bins-discretization"]], "Feature binarization": [[997, "feature-binarization"]], "Generating polynomial features": [[997, "generating-polynomial-features"]], "Polynomial features": [[997, "polynomial-features"]], "Spline transformer": [[997, "spline-transformer"]], "Custom transformers": [[997, "custom-transformers"]], "Transforming the prediction target (y)": [[998, "transforming-the-prediction-target-y"]], "Label binarization": [[998, "label-binarization"]], "LabelBinarizer": [[998, "labelbinarizer"]], "MultiLabelBinarizer": [[998, "multilabelbinarizer"]], "Label encoding": [[998, "label-encoding"]], "Random Projection": [[999, "random-projection"]], "The Johnson-Lindenstrauss lemma": [[999, "the-johnson-lindenstrauss-lemma"]], "Gaussian random projection": [[999, "gaussian-random-projection"]], "Sparse random projection": [[999, "sparse-random-projection"]], "Inverse Transform": [[999, "inverse-transform"]], "Unlabeled entries in y": [[1000, null]], "Self Training": [[1000, "self-training"]], "Label Propagation": [[1000, "label-propagation"]], "Stochastic Gradient Descent": [[1001, "stochastic-gradient-descent"]], "Stochastic Gradient Descent for sparse data": [[1001, "stochastic-gradient-descent-for-sparse-data"]], "Stopping criterion": [[1001, "stopping-criterion"]], "SGD": [[1001, "id5"]], "Implementation details": [[1001, "implementation-details"], [1002, "implementation-details"]], "Multi-class classification": [[1002, "multi-class-classification"]], "Scores and probabilities": [[1002, "scores-and-probabilities"]], "Unbalanced problems": [[1002, "unbalanced-problems"]], "Density estimation, novelty detection": [[1002, "density-estimation-novelty-detection"]], "Kernel functions": [[1002, "kernel-functions"]], "Parameters of the RBF Kernel": [[1002, "parameters-of-the-rbf-kernel"]], "Custom Kernels": [[1002, "custom-kernels"]], "SVC": [[1002, "svc"]], "SVR": [[1002, "svr"]], "Multi-output problems": [[1003, "multi-output-problems"]], "Tree algorithms: ID3, C4.5, C5.0 and CART": [[1003, "tree-algorithms-id3-c4-5-c5-0-and-cart"]], "Classification criteria": [[1003, "classification-criteria"]], "Regression criteria": [[1003, "regression-criteria"]], "Missing Values Support": [[1003, "missing-values-support"]], "Minimal Cost-Complexity Pruning": [[1003, "minimal-cost-complexity-pruning"]], "Unsupervised dimensionality reduction": [[1004, "unsupervised-dimensionality-reduction"]], "Pipelining": [[1004, null], [1017, "pipelining"]], "PCA: principal component analysis": [[1004, "pca-principal-component-analysis"]], "Random projections": [[1004, "random-projections"]], "Feature scaling": [[1004, null]], "External Resources, Videos and Talks": [[1005, "external-resources-videos-and-talks"]], "New to Scientific Python?": [[1005, "new-to-scientific-python"]], "External Tutorials": [[1005, "external-tutorials"]], "Videos": [[1005, "videos"]], "Related Projects": [[1006, "related-projects"]], "Interoperability and framework enhancements": [[1006, "interoperability-and-framework-enhancements"]], "Other estimators and tasks": [[1006, "other-estimators-and-tasks"]], "Statistical learning with Python": [[1006, "statistical-learning-with-python"]], "Recommendation Engine packages": [[1006, "recommendation-engine-packages"]], "Domain specific packages": [[1006, "domain-specific-packages"]], "Translations of scikit-learn documentation": [[1006, "translations-of-scikit-learn-documentation"]], "Roadmap": [[1007, "roadmap"]], "Purpose of this document": [[1007, "purpose-of-this-document"]], "Statement of purpose: Scikit-learn in 2018": [[1007, "statement-of-purpose-scikit-learn-in-2018"]], "Architectural / general goals": [[1007, "architectural-general-goals"]], "Subpackage-specific goals": [[1007, "subpackage-specific-goals"]], "Supervised learning": [[1009, "supervised-learning"]], "Support": [[1010, "support"]], "Mailing Lists": [[1010, "mailing-lists"]], "User Questions": [[1010, "user-questions"]], "Bug Tracker": [[1010, "bug-tracker"]], "Gitter": [[1010, "gitter"]], "Documentation Resources": [[1010, "documentation-resources"]], "Who is using scikit-learn?": [[1011, "who-is-using-scikit-learn"]], "J.P.Morgan": [[1011, "id1"]], "Spotify": [[1011, "id2"]], "Inria": [[1011, "id3"]], "betaworks": [[1011, "id4"]], "Hugging Face": [[1011, "id5"]], "Evernote": [[1011, "id6"]], "T\u00e9l\u00e9com ParisTech": [[1011, "id7"]], "Booking.com": [[1011, "id8"]], "AWeber": [[1011, "id9"]], "Yhat": [[1011, "id10"]], "Rangespan": [[1011, "id11"]], "Birchbox": [[1011, "id12"]], "Bestofmedia Group": [[1011, "id13"]], "Change.org": [[1011, "id14"]], "PHIMECA Engineering": [[1011, "id15"]], "HowAboutWe": [[1011, "id16"]], "PeerIndex": [[1011, "id17"]], "DataRobot": [[1011, "id18"]], "OkCupid": [[1011, "id19"]], "Lovely": [[1011, "id20"]], "Data Publica": [[1011, "id21"]], "Machinalis": [[1011, "id22"]], "solido": [[1011, "id23"]], "INFONEA": [[1011, "id24"]], "Dataiku": [[1011, "id25"]], "Otto Group": [[1011, "id26"]], "Zopa": [[1011, "id27"]], "MARS": [[1011, "id28"]], "BNP Paribas Cardif": [[1011, "id29"]], "An introduction to machine learning with scikit-learn": [[1012, "an-introduction-to-machine-learning-with-scikit-learn"]], "Section contents": [[1012, null]], "Machine learning: the problem setting": [[1012, "machine-learning-the-problem-setting"]], "Training set and testing set": [[1012, null], [1019, null]], "Loading an example dataset": [[1012, "loading-an-example-dataset"]], "Shape of the data arrays": [[1012, null]], "Learning and predicting": [[1012, "learning-and-predicting"]], "Choosing the parameters of the model": [[1012, null]], "Conventions": [[1012, "conventions"]], "Type casting": [[1012, "type-casting"]], "Refitting and updating parameters": [[1012, "refitting-and-updating-parameters"]], "Multiclass vs. multilabel fitting": [[1012, "multiclass-vs-multilabel-fitting"]], "scikit-learn Tutorials": [[1013, "scikit-learn-tutorials"]], "Choosing the right estimator": [[1014, "choosing-the-right-estimator"]], "A tutorial on statistical-learning for scientific data processing": [[1015, "a-tutorial-on-statistical-learning-for-scientific-data-processing"]], "Statistical learning": [[1015, null]], "Model selection: choosing estimators and their parameters": [[1016, "model-selection-choosing-estimators-and-their-parameters"]], "Score, and cross-validated scores": [[1016, "score-and-cross-validated-scores"]], "Cross-validation generators": [[1016, "cross-validation-generators"]], "Exercise": [[1016, null], [1016, null], [1019, null], [1019, null]], "Grid-search and cross-validated estimators": [[1016, "grid-search-and-cross-validated-estimators"]], "Grid-search": [[1016, "grid-search"]], "Nested cross-validation": [[1016, null]], "Cross-validated estimators": [[1016, "cross-validated-estimators"]], "Putting it all together": [[1017, "putting-it-all-together"]], "Face recognition with eigenfaces": [[1017, "face-recognition-with-eigenfaces"]], "Open problem: Stock Market Structure": [[1017, "open-problem-stock-market-structure"]], "Statistical learning: the setting and the estimator object in scikit-learn": [[1018, "statistical-learning-the-setting-and-the-estimator-object-in-scikit-learn"]], "Datasets": [[1018, "datasets"]], "A simple example shipped with scikit-learn: iris dataset": [[1018, null]], "An example of reshaping data would be the digits dataset": [[1018, null]], "Estimators objects": [[1018, "estimators-objects"]], "Supervised learning: predicting an output variable from high-dimensional observations": [[1019, "supervised-learning-predicting-an-output-variable-from-high-dimensional-observations"]], "The problem solved in supervised learning": [[1019, null]], "Vocabulary: classification and regression": [[1019, null]], "Nearest neighbor and the curse of dimensionality": [[1019, "nearest-neighbor-and-the-curse-of-dimensionality"]], "Classifying irises:": [[1019, null]], "k-Nearest neighbors classifier": [[1019, "k-nearest-neighbors-classifier"]], "The curse of dimensionality": [[1019, "the-curse-of-dimensionality"]], "Linear model: from regression to sparsity": [[1019, "linear-model-from-regression-to-sparsity"]], "Linear regression": [[1019, "linear-regression"]], "Shrinkage": [[1019, "shrinkage"]], "Different algorithms for the same problem": [[1019, null]], "Shrinkage and sparsity with logistic regression": [[1019, null]], "Support vector machines (SVMs)": [[1019, "support-vector-machines-svms"]], "Linear SVMs": [[1019, "linear-svms"]], "Using kernels": [[1019, "using-kernels"]], "RBF kernel (Radial Basis Function)": [[1019, "rbf-kernel-radial-basis-function"]], "Interactive example": [[1019, null]], "Unsupervised learning: seeking representations of the data": [[1020, "unsupervised-learning-seeking-representations-of-the-data"]], "Clustering: grouping observations together": [[1020, "clustering-grouping-observations-together"]], "The problem solved in clustering": [[1020, null]], "K-means clustering": [[1020, "k-means-clustering"]], "Application example: vector quantization": [[1020, null]], "Hierarchical agglomerative clustering: Ward": [[1020, "hierarchical-agglomerative-clustering-ward"]], "Connectivity-constrained clustering": [[1020, "connectivity-constrained-clustering"]], "transform and inverse_transform methods": [[1020, null]], "Decompositions: from a signal to components and loadings": [[1020, "decompositions-from-a-signal-to-components-and-loadings"]], "Components and loadings": [[1020, null]], "Principal component analysis: PCA": [[1020, "principal-component-analysis-pca"]], "Independent Component Analysis: ICA": [[1020, "independent-component-analysis-ica"]], "Working With Text Data": [[1021, "working-with-text-data"]], "Tutorial setup": [[1021, "tutorial-setup"]], "Loading the 20 newsgroups dataset": [[1021, "loading-the-20-newsgroups-dataset"]], "Extracting features from text files": [[1021, "extracting-features-from-text-files"]], "Bags of words": [[1021, "bags-of-words"]], "Tokenizing text with scikit-learn": [[1021, "tokenizing-text-with-scikit-learn"]], "From occurrences to frequencies": [[1021, "from-occurrences-to-frequencies"]], "Training a classifier": [[1021, "training-a-classifier"]], "Building a pipeline": [[1021, "building-a-pipeline"]], "Evaluation of the performance on the test set": [[1021, "evaluation-of-the-performance-on-the-test-set"]], "Parameter tuning using grid search": [[1021, "parameter-tuning-using-grid-search"]], "Exercises": [[1021, "exercises"]], "Exercise 1: Language identification": [[1021, "exercise-1-language-identification"]], "Exercise 2: Sentiment Analysis on movie reviews": [[1021, "exercise-2-sentiment-analysis-on-movie-reviews"]], "Exercise 3: CLI text classification utility": [[1021, "exercise-3-cli-text-classification-utility"]], "Where to from here": [[1021, "where-to-from-here"]], "Unsupervised learning": [[1022, "unsupervised-learning"]], "User Guide": [[1023, "user-guide"]], "Under Development": [[1023, "under-development"]], "Visualizations": [[1024, "visualizations"]], "Available Plotting Utilities": [[1024, "available-plotting-utilities"]], "Display Objects": [[1024, "display-objects"]], "Release History": [[1025, "release-history"]], "Older Versions": [[1027, "older-versions"]], "Version 0.12.1": [[1027, "version-0-12-1"]], "Changelog": [[1027, "changelog"], [1027, "id1"], [1027, "id3"], [1027, "id6"], [1027, "id9"], [1027, "id12"], [1027, "id14"], [1027, "id16"], [1027, "id18"], [1027, "id19"], [1028, "changelog"], [1028, "id2"], [1029, "changelog"], [1030, "changelog"], [1031, "changelog"], [1031, "id2"], [1032, "changelog"], [1032, "id2"], [1033, "changelog"], [1033, "id1"], [1033, "id3"], [1034, "changelog"], [1034, "id2"], [1035, "changelog"], [1035, "id1"], [1035, "id5"], [1035, "id10"], [1035, "id23"], [1036, "changelog"], [1036, "id1"], [1036, "id2"], [1036, "id7"], [1037, "changelog"], [1037, "id1"], [1037, "id4"], [1038, "changelog"], [1038, "id1"], [1038, "id4"], [1039, "changelog"], [1039, "id1"], [1039, "id4"], [1040, "changelog"], [1040, "id6"], [1041, "changelog"], [1041, "id1"], [1041, "id7"], [1042, "changelog"], [1042, "id1"], [1042, "id9"], [1043, "changelog"], [1043, "id1"], [1043, "id6"], [1044, "changelog"], [1044, "id5"], [1045, "changelog"]], "People": [[1027, "people"], [1027, "id2"], [1027, "id5"], [1027, "id8"], [1027, "id11"], [1027, "id13"], [1027, "id15"], [1027, "id17"], [1028, "people"], [1028, "id3"], [1029, "people"], [1030, "people"]], "Version 0.12": [[1027, "version-0-12"]], "API changes summary": [[1027, "api-changes-summary"], [1027, "id4"], [1027, "id7"], [1027, "id10"], [1028, "api-changes-summary"], [1029, "api-changes-summary"], [1030, "api-changes-summary"], [1031, "api-changes-summary"], [1032, "api-changes-summary"], [1033, "api-changes-summary"], [1033, "id6"], [1034, "api-changes-summary"]], "Version 0.11": [[1027, "version-0-11"]], "Highlights": [[1027, "highlights"], [1030, "highlights"], [1031, "highlights"], [1034, "highlights"], [1035, "highlights"]], "Other changes": [[1027, "other-changes"]], "Version 0.10": [[1027, "version-0-10"]], "Version 0.9": [[1027, "version-0-9"]], "Version 0.8": [[1027, "version-0-8"]], "Version 0.7": [[1027, "version-0-7"]], "Version 0.6": [[1027, "version-0-6"]], "Version 0.5": [[1027, "version-0-5"]], "New classes": [[1027, "new-classes"]], "Fixes": [[1027, "fixes"]], "External dependencies": [[1027, "external-dependencies"]], "Removed modules": [[1027, "removed-modules"]], "Misc": [[1027, "misc"]], "Version 0.4": [[1027, "version-0-4"]], "Earlier versions": [[1027, "earlier-versions"]], "Version 0.13": [[1028, "version-0-13"], [1028, "changes-0-13"]], "Version 0.13.1": [[1028, "version-0-13-1"]], "New Estimator Classes": [[1028, "new-estimator-classes"]], "Version 0.14": [[1029, "version-0-14"], [1029, "changes-0-14"]], "Version 0.15": [[1030, "version-0-15"], [1030, "changes-0-15"]], "Version 0.15.2": [[1030, "version-0-15-2"]], "Bug fixes": [[1030, "bug-fixes"], [1030, "id1"], [1030, "id3"], [1031, "bug-fixes"], [1031, "id3"], [1032, "bug-fixes"], [1032, "id3"], [1033, "bug-fixes"], [1033, "id5"], [1034, "bug-fixes"], [1034, "id4"]], "Version 0.15.1": [[1030, "version-0-15-1"]], "New features": [[1030, "new-features"], [1031, "new-features"], [1032, "new-features"], [1033, "new-features"], [1034, "new-features"]], "Enhancements": [[1030, "enhancements"], [1031, "enhancements"], [1032, "enhancements"], [1033, "enhancements"], [1033, "id4"], [1034, "enhancements"], [1034, "id3"]], "Documentation improvements": [[1030, "documentation-improvements"], [1031, "documentation-improvements"]], "Version 0.16": [[1031, "version-0-16"], [1031, "changes-0-16"]], "Version 0.16.1": [[1031, "version-0-16-1"]], "Code Contributors": [[1031, "code-contributors"], [1032, "code-contributors"], [1033, "code-contributors"], [1033, "id7"]], "Version 0.17": [[1032, "version-0-17"], [1032, "changes-0-17"]], "Version 0.17.1": [[1032, "version-0-17-1"]], "Version 0.18": [[1033, "version-0-18"], [1033, "changes-0-18"]], "Version 0.18.2": [[1033, "version-0-18-2"]], "Version 0.18.1": [[1033, "version-0-18-1"]], "Model Selection Enhancements and API Changes": [[1033, "model-selection-enhancements-and-api-changes"]], "Version 0.19": [[1034, "version-0-19"], [1034, "id1"]], "Version 0.19.2": [[1034, "version-0-19-2"]], "Related changes": [[1034, "related-changes"]], "Version 0.19.1": [[1034, "version-0-19-1"]], "API changes": [[1034, "api-changes"]], "Code and Documentation Contributors": [[1034, "code-and-documentation-contributors"], [1034, "id10"], [1035, "code-and-documentation-contributors"], [1035, "id8"], [1035, "id21"], [1035, "id41"]], "Changed models": [[1034, "changed-models"], [1035, "changed-models"], [1035, "id9"], [1035, "id22"], [1036, "changed-models"], [1036, "id6"], [1037, "changed-models"], [1038, "changed-models"], [1038, "id3"], [1039, "changed-models"], [1040, "changed-models"], [1041, "changed-models"], [1041, "id6"], [1042, "changed-models"], [1042, "id7"], [1043, "changed-models"], [1043, "id4"], [1044, "changed-models"]], "Version 0.20": [[1035, "version-0-20"]], "Version 0.20.4": [[1035, "version-0-20-4"]], "sklearn.cluster": [[1035, "sklearn-cluster"], [1035, "id2"], [1035, "id11"], [1035, "id24"], [1036, "sklearn-cluster"], [1036, "id8"], [1037, "sklearn-cluster"], [1037, "id5"], [1038, "sklearn-cluster"], [1038, "id2"], [1038, "id5"], [1039, "sklearn-cluster"], [1040, "sklearn-cluster"], [1040, "id1"], [1040, "id8"], [1041, "sklearn-cluster"], [1041, "id8"], [1042, "sklearn-cluster"], [1042, "id12"], [1043, "sklearn-cluster"], [1043, "id8"], [1044, "sklearn-cluster"], [1044, "id7"]], "sklearn.compose": [[1035, "sklearn-compose"], [1035, "id3"], [1035, "id6"], [1035, "id12"], [1035, "id25"], [1036, "sklearn-compose"], [1036, "id9"], [1037, "sklearn-compose"], [1038, "sklearn-compose"], [1039, "sklearn-compose"], [1039, "id5"], [1040, "sklearn-compose"], [1041, "sklearn-compose"], [1042, "sklearn-compose"], [1043, "sklearn-compose"], [1044, "sklearn-compose"], [1044, "id8"], [1045, "sklearn-compose"]], "sklearn.decomposition": [[1035, "sklearn-decomposition"], [1035, "id4"], [1035, "id14"], [1035, "id28"], [1036, "sklearn-decomposition"], [1036, "id11"], [1037, "sklearn-decomposition"], [1038, "sklearn-decomposition"], [1038, "id6"], [1039, "sklearn-decomposition"], [1039, "id7"], [1040, "sklearn-decomposition"], [1040, "id10"], [1041, "sklearn-decomposition"], [1041, "id10"], [1042, "sklearn-decomposition"], [1042, "id14"], [1043, "sklearn-decomposition"], [1043, "id10"], [1044, "sklearn-decomposition"]], "sklearn.model_selection": [[1035, "sklearn-model-selection"], [1035, "id35"], [1036, "sklearn-model-selection"], [1037, "sklearn-model-selection"], [1037, "id9"], [1037, "id13"], [1038, "sklearn-model-selection"], [1039, "sklearn-model-selection"], [1039, "id13"], [1040, "sklearn-model-selection"], [1041, "sklearn-model-selection"], [1042, "sklearn-model-selection"], [1042, "id20"], [1043, "sklearn-model-selection"], [1044, "sklearn-model-selection"], [1045, "sklearn-model-selection"]], "sklearn.neighbors": [[1035, "sklearn-neighbors"], [1035, "id7"], [1035, "id18"], [1035, "id36"], [1036, "sklearn-neighbors"], [1036, "id5"], [1036, "id17"], [1037, "sklearn-neighbors"], [1037, "id11"], [1039, "sklearn-neighbors"], [1040, "sklearn-neighbors"], [1040, "id4"], [1040, "id17"], [1041, "sklearn-neighbors"], [1042, "sklearn-neighbors"], [1043, "sklearn-neighbors"], [1043, "id16"], [1044, "sklearn-neighbors"]], "Version 0.20.3": [[1035, "version-0-20-3"]], "sklearn.covariance": [[1035, "sklearn-covariance"], [1035, "id26"], [1039, "sklearn-covariance"], [1040, "sklearn-covariance"], [1041, "sklearn-covariance"], [1043, "sklearn-covariance"], [1044, "sklearn-covariance"]], "sklearn.datasets": [[1035, "sklearn-datasets"], [1035, "id13"], [1035, "id27"], [1036, "sklearn-datasets"], [1036, "id10"], [1037, "sklearn-datasets"], [1038, "sklearn-datasets"], [1039, "sklearn-datasets"], [1040, "sklearn-datasets"], [1040, "id9"], [1041, "sklearn-datasets"], [1041, "id9"], [1042, "sklearn-datasets"], [1042, "id13"], [1043, "sklearn-datasets"], [1043, "id9"], [1044, "sklearn-datasets"]], "sklearn.feature_extraction": [[1035, "sklearn-feature-extraction"], [1035, "id15"], [1035, "id30"], [1036, "sklearn-feature-extraction"], [1037, "sklearn-feature-extraction"], [1038, "sklearn-feature-extraction"], [1038, "id8"], [1039, "sklearn-feature-extraction"], [1039, "id9"], [1040, "sklearn-feature-extraction"], [1040, "id12"], [1041, "sklearn-feature-extraction"], [1042, "sklearn-feature-extraction"], [1043, "sklearn-feature-extraction"], [1044, "sklearn-feature-extraction"], [1045, "sklearn-feature-extraction"]], "sklearn.impute": [[1035, "sklearn-impute"], [1035, "id31"], [1036, "sklearn-impute"], [1036, "id13"], [1037, "sklearn-impute"], [1037, "id6"], [1038, "sklearn-impute"], [1039, "sklearn-impute"], [1040, "sklearn-impute"], [1041, "sklearn-impute"], [1041, "id12"], [1042, "sklearn-impute"], [1043, "sklearn-impute"], [1043, "id13"], [1045, "sklearn-impute"]], "sklearn.linear_model": [[1035, "sklearn-linear-model"], [1035, "id16"], [1035, "id32"], [1036, "sklearn-linear-model"], [1036, "id15"], [1037, "sklearn-linear-model"], [1038, "sklearn-linear-model"], [1038, "id9"], [1039, "sklearn-linear-model"], [1039, "id11"], [1040, "sklearn-linear-model"], [1040, "id3"], [1040, "id14"], [1041, "sklearn-linear-model"], [1041, "id13"], [1042, "sklearn-linear-model"], [1042, "id18"], [1043, "sklearn-linear-model"], [1044, "sklearn-linear-model"], [1044, "id11"]], "sklearn.preprocessing": [[1035, "sklearn-preprocessing"], [1035, "id19"], [1035, "id37"], [1036, "sklearn-preprocessing"], [1036, "id18"], [1037, "sklearn-preprocessing"], [1037, "id12"], [1038, "sklearn-preprocessing"], [1039, "sklearn-preprocessing"], [1039, "id15"], [1040, "sklearn-preprocessing"], [1040, "id19"], [1041, "sklearn-preprocessing"], [1041, "id4"], [1041, "id16"], [1042, "sklearn-preprocessing"], [1042, "id4"], [1042, "id22"], [1043, "sklearn-preprocessing"], [1043, "id17"], [1044, "sklearn-preprocessing"], [1044, "id2"], [1044, "id12"]], "sklearn.svm": [[1035, "sklearn-svm"], [1035, "id38"], [1036, "sklearn-svm"], [1037, "sklearn-svm"], [1038, "sklearn-svm"], [1039, "sklearn-svm"], [1040, "sklearn-svm"], [1040, "id20"], [1041, "sklearn-svm"], [1042, "sklearn-svm"], [1043, "sklearn-svm"]], "Version 0.20.2": [[1035, "version-0-20-2"]], "sklearn.metrics": [[1035, "sklearn-metrics"], [1035, "id17"], [1035, "id33"], [1036, "sklearn-metrics"], [1036, "id4"], [1036, "id16"], [1037, "sklearn-metrics"], [1037, "id2"], [1037, "id8"], [1038, "sklearn-metrics"], [1038, "id10"], [1039, "sklearn-metrics"], [1039, "id2"], [1039, "id12"], [1040, "sklearn-metrics"], [1040, "id16"], [1041, "sklearn-metrics"], [1041, "id3"], [1041, "id15"], [1042, "sklearn-metrics"], [1043, "sklearn-metrics"], [1043, "id2"], [1043, "id14"], [1044, "sklearn-metrics"], [1045, "sklearn-metrics"]], "sklearn.utils": [[1035, "sklearn-utils"], [1035, "id20"], [1035, "id39"], [1036, "sklearn-utils"], [1037, "sklearn-utils"], [1037, "id14"], [1038, "sklearn-utils"], [1038, "id12"], [1039, "sklearn-utils"], [1039, "id18"], [1040, "sklearn-utils"], [1040, "id5"], [1040, "id22"], [1041, "sklearn-utils"], [1041, "id18"], [1042, "sklearn-utils"], [1042, "id6"], [1042, "id24"], [1043, "sklearn-utils"], [1044, "sklearn-utils"], [1044, "id14"], [1045, "sklearn-utils"]], "Version 0.20.1": [[1035, "version-0-20-1"]], "sklearn.ensemble": [[1035, "sklearn-ensemble"], [1035, "id29"], [1036, "sklearn-ensemble"], [1036, "id12"], [1037, "sklearn-ensemble"], [1038, "sklearn-ensemble"], [1038, "id7"], [1039, "sklearn-ensemble"], [1039, "id8"], [1040, "sklearn-ensemble"], [1040, "id2"], [1040, "id11"], [1041, "sklearn-ensemble"], [1042, "sklearn-ensemble"], [1042, "id3"], [1042, "id15"], [1043, "sklearn-ensemble"], [1043, "id11"], [1044, "sklearn-ensemble"], [1044, "id9"], [1045, "sklearn-ensemble"]], "sklearn.mixture": [[1035, "sklearn-mixture"], [1035, "id34"], [1036, "sklearn-mixture"], [1040, "sklearn-mixture"], [1041, "sklearn-mixture"], [1043, "sklearn-mixture"], [1043, "id15"]], "Version 0.20.0": [[1035, "version-0-20-0"]], "Known Major Bugs": [[1035, "known-major-bugs"], [1036, "known-major-bugs"]], "sklearn.discriminant_analysis": [[1035, "sklearn-discriminant-analysis"], [1036, "sklearn-discriminant-analysis"], [1039, "sklearn-discriminant-analysis"], [1041, "sklearn-discriminant-analysis"], [1042, "sklearn-discriminant-analysis"], [1043, "sklearn-discriminant-analysis"]], "sklearn.dummy": [[1035, "sklearn-dummy"], [1036, "sklearn-dummy"], [1037, "sklearn-dummy"], [1040, "sklearn-dummy"], [1041, "sklearn-dummy"], [1045, "sklearn-dummy"]], "sklearn.feature_selection": [[1035, "sklearn-feature-selection"], [1037, "sklearn-feature-selection"], [1038, "sklearn-feature-selection"], [1039, "sklearn-feature-selection"], [1040, "sklearn-feature-selection"], [1040, "id13"], [1041, "sklearn-feature-selection"], [1041, "id2"], [1041, "id11"], [1042, "sklearn-feature-selection"], [1042, "id16"], [1043, "sklearn-feature-selection"], [1043, "id12"], [1044, "sklearn-feature-selection"], [1045, "sklearn-feature-selection"]], "sklearn.gaussian_process": [[1035, "sklearn-gaussian-process"], [1037, "sklearn-gaussian-process"], [1038, "sklearn-gaussian-process"], [1039, "sklearn-gaussian-process"], [1039, "id10"], [1040, "sklearn-gaussian-process"], [1041, "sklearn-gaussian-process"], [1042, "sklearn-gaussian-process"], [1043, "sklearn-gaussian-process"]], "sklearn.isotonic": [[1035, "sklearn-isotonic"], [1036, "sklearn-isotonic"], [1037, "sklearn-isotonic"], [1039, "sklearn-isotonic"], [1041, "sklearn-isotonic"], [1042, "sklearn-isotonic"]], "sklearn.manifold": [[1035, "sklearn-manifold"], [1036, "sklearn-manifold"], [1037, "sklearn-manifold"], [1038, "sklearn-manifold"], [1039, "sklearn-manifold"], [1040, "sklearn-manifold"], [1040, "id15"], [1041, "sklearn-manifold"], [1041, "id14"], [1042, "sklearn-manifold"], [1042, "id19"], [1043, "sklearn-manifold"]], "sklearn.multioutput": [[1035, "sklearn-multioutput"], [1036, "sklearn-multioutput"], [1037, "sklearn-multioutput"], [1038, "sklearn-multioutput"], [1039, "sklearn-multioutput"], [1039, "id14"], [1042, "sklearn-multioutput"], [1043, "sklearn-multioutput"], [1044, "sklearn-multioutput"]], "sklearn.naive_bayes": [[1035, "sklearn-naive-bayes"], [1037, "sklearn-naive-bayes"], [1037, "id10"], [1038, "sklearn-naive-bayes"], [1039, "sklearn-naive-bayes"], [1040, "sklearn-naive-bayes"], [1042, "sklearn-naive-bayes"], [1043, "sklearn-naive-bayes"]], "sklearn.neural_network": [[1035, "sklearn-neural-network"], [1036, "sklearn-neural-network"], [1037, "sklearn-neural-network"], [1038, "sklearn-neural-network"], [1039, "sklearn-neural-network"], [1040, "sklearn-neural-network"], [1041, "sklearn-neural-network"], [1042, "sklearn-neural-network"], [1042, "id21"], [1043, "sklearn-neural-network"]], "sklearn.pipeline": [[1035, "sklearn-pipeline"], [1036, "sklearn-pipeline"], [1037, "sklearn-pipeline"], [1038, "sklearn-pipeline"], [1039, "sklearn-pipeline"], [1040, "sklearn-pipeline"], [1040, "id18"], [1041, "sklearn-pipeline"], [1042, "sklearn-pipeline"], [1043, "sklearn-pipeline"]], "sklearn.tree": [[1035, "sklearn-tree"], [1036, "sklearn-tree"], [1036, "id19"], [1037, "sklearn-tree"], [1038, "sklearn-tree"], [1039, "sklearn-tree"], [1039, "id17"], [1040, "sklearn-tree"], [1040, "id21"], [1041, "sklearn-tree"], [1041, "id5"], [1041, "id17"], [1042, "sklearn-tree"], [1042, "id5"], [1042, "id23"], [1043, "sklearn-tree"], [1043, "id3"], [1043, "id18"], [1044, "sklearn-tree"], [1044, "id13"]], "Multiple modules": [[1035, "multiple-modules"], [1036, "multiple-modules"], [1045, "multiple-modules"]], "Changes to estimator checks": [[1035, "changes-to-estimator-checks"], [1036, "changes-to-estimator-checks"], [1037, "changes-to-estimator-checks"]], "Version 0.21": [[1036, "version-0-21"]], "Version 0.21.3": [[1036, "version-0-21-3"]], "sklearn.inspection": [[1036, "sklearn-inspection"], [1036, "id3"], [1036, "id14"], [1037, "sklearn-inspection"], [1037, "id7"], [1038, "sklearn-inspection"], [1038, "id11"], [1039, "sklearn-inspection"], [1040, "sklearn-inspection"], [1041, "sklearn-inspection"], [1042, "sklearn-inspection"], [1042, "id17"], [1043, "sklearn-inspection"], [1044, "sklearn-inspection"], [1044, "id10"]], "Version 0.21.2": [[1036, "version-0-21-2"]], "sklearn.utils.sparsefuncs": [[1036, "sklearn-utils-sparsefuncs"]], "Version 0.21.1": [[1036, "version-0-21-1"]], "Version 0.21.0": [[1036, "version-0-21-0"]], "sklearn.base": [[1036, "sklearn-base"], [1037, "sklearn-base"], [1039, "sklearn-base"], [1040, "sklearn-base"], [1041, "sklearn-base"], [1042, "sklearn-base"], [1042, "id2"], [1042, "id10"], [1043, "sklearn-base"], [1044, "sklearn-base"]], "sklearn.calibration": [[1036, "sklearn-calibration"], [1037, "sklearn-calibration"], [1039, "sklearn-calibration"], [1040, "sklearn-calibration"], [1040, "id7"], [1041, "sklearn-calibration"], [1042, "sklearn-calibration"], [1042, "id11"], [1043, "sklearn-calibration"], [1043, "id7"], [1044, "sklearn-calibration"], [1044, "id6"]], "sklearn.externals": [[1036, "sklearn-externals"]], "sklearn.multiclass": [[1036, "sklearn-multiclass"], [1039, "sklearn-multiclass"], [1040, "sklearn-multiclass"], [1041, "sklearn-multiclass"]], "Version 0.22": [[1037, "version-0-22"]], "Version 0.22.2.post1": [[1037, "version-0-22-2-post1"]], "Version 0.22.1": [[1037, "version-0-22-1"]], "sklearn.semi_supervised": [[1037, "sklearn-semi-supervised"], [1038, "sklearn-semi-supervised"], [1039, "sklearn-semi-supervised"], [1039, "id3"], [1039, "id16"], [1043, "sklearn-semi-supervised"]], "Version 0.22.0": [[1037, "version-0-22-0"]], "Website update": [[1037, "website-update"]], "Clear definition of the public API": [[1037, "clear-definition-of-the-public-api"]], "Deprecations: using FutureWarning from now on": [[1037, "deprecations-using-futurewarning-from-now-on"]], "sklearn.cross_decomposition": [[1037, "sklearn-cross-decomposition"], [1039, "sklearn-cross-decomposition"], [1039, "id6"], [1041, "sklearn-cross-decomposition"], [1043, "sklearn-cross-decomposition"]], "sklearn.kernel_approximation": [[1037, "sklearn-kernel-approximation"], [1039, "sklearn-kernel-approximation"], [1040, "sklearn-kernel-approximation"], [1041, "sklearn-kernel-approximation"], [1042, "sklearn-kernel-approximation"], [1043, "sklearn-kernel-approximation"]], "Version 0.23": [[1038, "version-0-23"]], "Version 0.23.2": [[1038, "version-0-23-2"]], "Version 0.23.1": [[1038, "version-0-23-1"]], "Version 0.23.0": [[1038, "version-0-23-0"]], "Enforcing keyword-only arguments": [[1038, "enforcing-keyword-only-arguments"], [1040, "enforcing-keyword-only-arguments"]], "Version 0.24": [[1039, "version-0-24"]], "Version 0.24.2": [[1039, "version-0-24-2"]], "Version 0.24.1": [[1039, "version-0-24-1"]], "Packaging": [[1039, "packaging"]], "Version 0.24.0": [[1039, "version-0-24-0"]], "sklearn.exceptions": [[1039, "sklearn-exceptions"], [1043, "sklearn-exceptions"]], "Version 1.0": [[1040, "version-1-0"]], "Version 1.0.2": [[1040, "version-1-0-2"]], "Version 1.0.1": [[1040, "version-1-0-1"]], "Fixed models": [[1040, "fixed-models"]], "Version 1.0.0": [[1040, "version-1-0-0"]], "Minimal dependencies": [[1040, "minimal-dependencies"], [1041, "minimal-dependencies"]], "Version 1.1": [[1041, "version-1-1"]], "Version 1.1.3": [[1041, "version-1-1-3"]], "Version 1.1.2": [[1041, "version-1-1-2"]], "Version 1.1.1": [[1041, "version-1-1-1"]], "Version 1.1.0": [[1041, "version-1-1-0"]], "sklearn.random_projection": [[1041, "sklearn-random-projection"]], "Version 1.2": [[1042, "version-1-2"]], "Version 1.2.2": [[1042, "version-1-2-2"]], "Version 1.2.1": [[1042, "version-1-2-1"]], "Changes impacting all modules": [[1042, "changes-impacting-all-modules"], [1042, "id8"], [1043, "changes-impacting-all-modules"], [1043, "id5"], [1044, "changes-impacting-all-modules"], [1044, "id3"]], "Version 1.2.0": [[1042, "version-1-2-0"]], "Version 1.3": [[1043, "version-1-3"]], "Version 1.3.2": [[1043, "version-1-3-2"]], "Version 1.3.1": [[1043, "version-1-3-1"]], "Version 1.3.0": [[1043, "version-1-3-0"]], "Changed displays": [[1043, "changed-displays"]], "Experimental / Under Development": [[1043, "experimental-under-development"]], "sklearn": [[1043, "sklearn"]], "Version 1.4": [[1044, "version-1-4"]], "Version 1.4.1": [[1044, "version-1-4-1"]], "DataFrame Support": [[1044, "dataframe-support"]], "Version 1.4.0": [[1044, "version-1-4-0"]], "Support for SciPy sparse arrays": [[1044, "support-for-scipy-sparse-arrays"]], "Support for Array API": [[1044, "support-for-array-api"]], "Private Loss Function Module": [[1044, "private-loss-function-module"]], "sklearn.kernel_ridge": [[1044, "sklearn-kernel-ridge"]], "Version 1.5": [[1045, "version-1-5"]], "Version 1.5.0": [[1045, "version-1-5-0"]], "Support for building with Meson": [[1045, "support-for-building-with-meson"]]}, "indexentries": {"1d": [[393, "term-1d"]], "1d array": [[393, "term-1d-array"]], "2d": [[393, "term-2d"]], "2d array": [[393, "term-2d-array"]], "api": [[393, "term-API"]], "cv splitter": [[393, "term-CV-splitter"]], "slep": [[393, "term-SLEP"]], "sleps": [[393, "term-SLEPs"]], "x": [[393, "term-X"]], "xt": [[393, "term-Xt"]], "y": [[393, "term-Y"], [393, "term-y"]], "_estimator_type": [[393, "term-_estimator_type"]], "array-like": [[393, "term-array-like"]], "attribute": [[393, "term-attribute"]], "attributes": [[393, "term-attributes"]], "backwards compatibility": [[393, "term-backwards-compatibility"]], "binary": [[393, "term-binary"]], "callable": [[393, "term-callable"]], "categorical feature": [[393, "term-categorical-feature"]], "class_weight": [[393, "term-class_weight"]], "classes_": [[393, "term-classes_"]], "classifier": [[393, "term-classifier"]], "classifiers": [[393, "term-classifiers"]], "clone": [[393, "term-clone"]], "cloned": [[393, "term-cloned"]], "clusterer": [[393, "term-clusterer"]], "clusterers": [[393, "term-clusterers"]], "coef_": [[393, "term-coef_"]], "common tests": [[393, "term-common-tests"]], "components_": [[393, "term-components_"]], "consumer": [[393, "term-consumer"]], "continuous": [[393, "term-continuous"]], "continuous multi-output": [[393, "term-continuous-multi-output"]], "continuous multioutput": [[393, "term-continuous-multioutput"]], "cross fitting": [[393, "term-0"]], "cross validation": [[393, "term-1"]], "cross-fitting": [[393, "term-cross-fitting"]], "cross-validation": [[393, "term-cross-validation"]], "cross-validation estimator": [[393, "term-cross-validation-estimator"]], "cross-validation generator": [[393, "term-cross-validation-generator"]], "cross-validation splitter": [[393, "term-cross-validation-splitter"]], "cv": [[393, "term-cv"]], "data leakage": [[393, "term-data-leakage"]], "data type": [[393, "term-data-type"]], "decision_function": [[393, "term-decision_function"]], "density estimator": [[393, "term-density-estimator"]], "deprecation": [[393, "term-deprecation"]], "dimensionality": [[393, "term-dimensionality"]], "docstring": [[393, "term-docstring"]], "double underscore": [[393, "term-double-underscore"]], "double underscore notation": [[393, "term-double-underscore-notation"]], "dtype": [[393, "term-dtype"]], "duck typing": [[393, "term-duck-typing"]], "early stopping": [[393, "term-early-stopping"]], "embedding_": [[393, "term-embedding_"]], "estimator": [[393, "term-estimator"]], "estimator instance": [[393, "term-estimator-instance"]], "estimator tags": [[393, "term-estimator-tags"]], "estimators": [[393, "term-estimators"]], "evaluation metric": [[393, "term-evaluation-metric"]], "evaluation metrics": [[393, "term-evaluation-metrics"]], "examples": [[393, "term-examples"]], "experimental": [[393, "term-experimental"]], "feature": [[393, "term-feature"]], "feature extractor": [[393, "term-feature-extractor"]], "feature extractors": [[393, "term-feature-extractors"]], "feature vector": [[393, "term-feature-vector"]], "feature_importances_": [[393, "term-feature_importances_"]], "features": [[393, "term-features"]], "fit": [[393, "term-fit"]], "fit_predict": [[393, "term-fit_predict"]], "fit_transform": [[393, "term-fit_transform"]], "fitted": [[393, "term-fitted"]], "fitting": [[393, "term-fitting"]], "function": [[393, "term-function"]], "gallery": [[393, "term-gallery"]], "get_feature_names_out": [[393, "term-get_feature_names_out"]], "get_n_splits": [[393, "term-get_n_splits"]], "get_params": [[393, "term-get_params"]], "groups": [[393, "term-groups"]], "hyper-parameter": [[393, "term-hyper-parameter"]], "hyperparameter": [[393, "term-hyperparameter"]], "imputation": [[393, "term-imputation"]], "impute": [[393, "term-impute"]], "indexable": [[393, "term-indexable"]], "induction": [[393, "term-induction"]], "inductive": [[393, "term-inductive"]], "joblib": [[393, "term-joblib"]], "kernel": [[393, "term-kernel"]], "label indicator matrix": [[393, "term-label-indicator-matrix"]], "labels_": [[393, "term-labels_"]], "leakage": [[393, "term-leakage"]], "max_iter": [[393, "term-max_iter"]], "memmapping": [[393, "term-memmapping"]], "memory": [[393, "term-memory"]], "memory map": [[393, "term-memory-map"]], "memory mapping": [[393, "term-memory-mapping"]], "meta-estimator": [[393, "term-meta-estimator"]], "meta-estimators": [[393, "term-meta-estimators"]], "metadata": [[393, "term-metadata"]], "metaestimator": [[393, "term-metaestimator"]], "metaestimators": [[393, "term-metaestimators"]], "metric": [[393, "term-metric"]], "missing values": [[393, "term-missing-values"]], "multi-class": [[393, "term-multi-class"]], "multi-class multi-output": [[393, "term-multi-class-multi-output"]], "multi-label": [[393, "term-multi-label"]], "multi-output": [[393, "term-multi-output"]], "multi-output continuous": [[393, "term-multi-output-continuous"]], "multi-output multi-class": [[393, "term-multi-output-multi-class"]], "multiclass": [[393, "term-multiclass"]], "multiclass multioutput": [[393, "term-multiclass-multioutput"]], "multilabel": [[393, "term-multilabel"]], "multilabel indicator matrices": [[393, "term-multilabel-indicator-matrices"]], "multilabel indicator matrix": [[393, "term-multilabel-indicator-matrix"]], "multioutput": [[393, "term-multioutput"]], "multioutput continuous": [[393, "term-multioutput-continuous"]], "multioutput multiclass": [[393, "term-multioutput-multiclass"]], "n_components": [[393, "term-n_components"]], "n_features": [[393, "term-n_features"]], "n_iter_": [[393, "term-n_iter_"]], "n_iter_no_change": [[393, "term-n_iter_no_change"]], "n_jobs": [[393, "term-n_jobs"]], "n_outputs": [[393, "term-n_outputs"]], "n_samples": [[393, "term-n_samples"]], "n_targets": [[393, "term-n_targets"]], "narrative docs": [[393, "term-narrative-docs"]], "narrative documentation": [[393, "term-narrative-documentation"]], "np": [[393, "term-np"]], "online learning": [[393, "term-online-learning"]], "out-of-core": [[393, "term-out-of-core"]], "outlier detector": [[393, "term-outlier-detector"]], "outlier detectors": [[393, "term-outlier-detectors"]], "outputs": [[393, "term-outputs"]], "pair": [[393, "term-pair"]], "pairwise metric": [[393, "term-pairwise-metric"]], "pairwise metrics": [[393, "term-pairwise-metrics"]], "param": [[393, "term-param"]], "parameter": [[393, "term-parameter"]], "parameters": [[393, "term-parameters"]], "params": [[393, "term-params"]], "partial_fit": [[393, "term-partial_fit"]], "pd": [[393, "term-pd"]], "pos_label": [[393, "term-pos_label"]], "precomputed": [[393, "term-precomputed"]], "predict": [[393, "term-predict"]], "predict_log_proba": [[393, "term-predict_log_proba"]], "predict_proba": [[393, "term-predict_proba"]], "predictor": [[393, "term-predictor"]], "predictors": [[393, "term-predictors"]], "random_state": [[393, "term-random_state"]], "rectangular": [[393, "term-rectangular"]], "regressor": [[393, "term-regressor"]], "regressors": [[393, "term-regressors"]], "router": [[393, "term-router"]], "sample": [[393, "term-sample"]], "sample properties": [[393, "term-sample-properties"]], "sample property": [[393, "term-sample-property"]], "sample_weight": [[393, "term-sample_weight"]], "samples": [[393, "term-samples"]], "scikit-learn enhancement proposals": [[393, "term-scikit-learn-enhancement-proposals"]], "scikit-learn-contrib": [[393, "term-scikit-learn-contrib"]], "score": [[393, "term-score"]], "score_samples": [[393, "term-score_samples"]], "scorer": [[393, "term-scorer"]], "scoring": [[393, "term-scoring"]], "semi-supervised": [[393, "term-semi-supervised"]], "semi-supervised learning": [[393, "term-semi-supervised-learning"]], "semisupervised": [[393, "term-semisupervised"]], "set_params": [[393, "term-set_params"]], "sparse graph": [[393, "term-sparse-graph"]], "sparse matrix": [[393, "term-sparse-matrix"]], "split": [[393, "term-split"]], "stateless": [[393, "term-stateless"]], "supervised": [[393, "term-supervised"]], "supervised learning": [[393, "term-supervised-learning"]], "target": [[393, "term-target"]], "targets": [[393, "term-targets"]], "transduction": [[393, "term-transduction"]], "transductive": [[393, "term-transductive"]], "transform": [[393, "term-transform"]], "transformer": [[393, "term-transformer"]], "transformers": [[393, "term-transformers"]], "unlabeled": [[393, "term-unlabeled"]], "unlabeled data": [[393, "term-unlabeled-data"]], "unsupervised": [[393, "term-unsupervised"]], "unsupervised learning": [[393, "term-unsupervised-learning"]], "vectorizer": [[393, "term-vectorizer"]], "vectorizers": [[393, "term-vectorizers"]], "verbose": [[393, "term-verbose"]], "warm_start": [[393, "term-warm_start"]], "module": [[406, "module-sklearn"], [406, "module-sklearn.base"], [406, "module-sklearn.calibration"], [406, "module-sklearn.cluster"], [406, "module-sklearn.compose"], [406, "module-sklearn.covariance"], [406, "module-sklearn.cross_decomposition"], [406, "module-sklearn.datasets"], [406, "module-sklearn.decomposition"], [406, "module-sklearn.discriminant_analysis"], [406, "module-sklearn.dummy"], [406, "module-sklearn.ensemble"], [406, "module-sklearn.exceptions"], [406, "module-sklearn.experimental"], [406, "module-sklearn.feature_extraction"], [406, "module-sklearn.feature_extraction.image"], [406, "module-sklearn.feature_extraction.text"], [406, "module-sklearn.feature_selection"], [406, "module-sklearn.gaussian_process"], [406, "module-sklearn.gaussian_process.kernels"], [406, "module-sklearn.impute"], [406, "module-sklearn.inspection"], [406, "module-sklearn.isotonic"], [406, "module-sklearn.kernel_approximation"], [406, "module-sklearn.kernel_ridge"], [406, "module-sklearn.linear_model"], [406, "module-sklearn.manifold"], [406, "module-sklearn.metrics"], [406, "module-sklearn.metrics.cluster"], [406, "module-sklearn.metrics.pairwise"], [406, "module-sklearn.mixture"], [406, "module-sklearn.model_selection"], [406, "module-sklearn.multiclass"], [406, "module-sklearn.multioutput"], [406, "module-sklearn.naive_bayes"], [406, "module-sklearn.neighbors"], [406, "module-sklearn.neural_network"], [406, "module-sklearn.pipeline"], [406, "module-sklearn.preprocessing"], [406, "module-sklearn.random_projection"], [406, "module-sklearn.semi_supervised"], [406, "module-sklearn.svm"], [406, "module-sklearn.tree"], [406, "module-sklearn.utils"], [406, "module-sklearn.utils.arrayfuncs"], [406, "module-sklearn.utils.class_weight"], [406, "module-sklearn.utils.discovery"], [406, "module-sklearn.utils.estimator_checks"], [406, "module-sklearn.utils.extmath"], [406, "module-sklearn.utils.graph"], [406, "module-sklearn.utils.metadata_routing"], [406, "module-sklearn.utils.metaestimators"], [406, "module-sklearn.utils.multiclass"], [406, "module-sklearn.utils.parallel"], [406, "module-sklearn.utils.random"], [406, "module-sklearn.utils.sparsefuncs"], [406, "module-sklearn.utils.sparsefuncs_fast"], [406, "module-sklearn.utils.validation"], [577, "module-sklearn.experimental.enable_halving_search_cv"], [578, "module-sklearn.experimental.enable_iterative_imputer"]], "sklearn": [[406, "module-sklearn"]], "sklearn.base": [[406, "module-sklearn.base"]], "sklearn.calibration": [[406, "module-sklearn.calibration"]], "sklearn.cluster": [[406, "module-sklearn.cluster"]], "sklearn.compose": [[406, "module-sklearn.compose"]], "sklearn.covariance": [[406, "module-sklearn.covariance"]], "sklearn.cross_decomposition": [[406, "module-sklearn.cross_decomposition"]], "sklearn.datasets": [[406, "module-sklearn.datasets"]], "sklearn.decomposition": [[406, "module-sklearn.decomposition"]], "sklearn.discriminant_analysis": [[406, "module-sklearn.discriminant_analysis"]], "sklearn.dummy": [[406, "module-sklearn.dummy"]], "sklearn.ensemble": [[406, "module-sklearn.ensemble"]], "sklearn.exceptions": [[406, "module-sklearn.exceptions"]], "sklearn.experimental": [[406, "module-sklearn.experimental"]], "sklearn.feature_extraction": [[406, "module-sklearn.feature_extraction"]], "sklearn.feature_extraction.image": [[406, "module-sklearn.feature_extraction.image"]], "sklearn.feature_extraction.text": [[406, "module-sklearn.feature_extraction.text"]], "sklearn.feature_selection": [[406, "module-sklearn.feature_selection"]], "sklearn.gaussian_process": [[406, "module-sklearn.gaussian_process"]], "sklearn.gaussian_process.kernels": [[406, "module-sklearn.gaussian_process.kernels"]], "sklearn.impute": [[406, "module-sklearn.impute"]], "sklearn.inspection": [[406, "module-sklearn.inspection"]], "sklearn.isotonic": [[406, "module-sklearn.isotonic"]], "sklearn.kernel_approximation": [[406, "module-sklearn.kernel_approximation"]], "sklearn.kernel_ridge": [[406, "module-sklearn.kernel_ridge"]], "sklearn.linear_model": [[406, "module-sklearn.linear_model"]], "sklearn.manifold": [[406, "module-sklearn.manifold"]], "sklearn.metrics": [[406, "module-sklearn.metrics"]], "sklearn.metrics.cluster": [[406, "module-sklearn.metrics.cluster"]], "sklearn.metrics.pairwise": [[406, "module-sklearn.metrics.pairwise"]], "sklearn.mixture": [[406, "module-sklearn.mixture"]], "sklearn.model_selection": [[406, "module-sklearn.model_selection"]], "sklearn.multiclass": [[406, "module-sklearn.multiclass"]], "sklearn.multioutput": [[406, "module-sklearn.multioutput"]], "sklearn.naive_bayes": [[406, "module-sklearn.naive_bayes"]], "sklearn.neighbors": [[406, "module-sklearn.neighbors"]], "sklearn.neural_network": [[406, "module-sklearn.neural_network"]], "sklearn.pipeline": [[406, "module-sklearn.pipeline"]], "sklearn.preprocessing": [[406, "module-sklearn.preprocessing"]], "sklearn.random_projection": [[406, "module-sklearn.random_projection"]], "sklearn.semi_supervised": [[406, "module-sklearn.semi_supervised"]], "sklearn.svm": [[406, "module-sklearn.svm"]], "sklearn.tree": [[406, "module-sklearn.tree"]], "sklearn.utils": [[406, "module-sklearn.utils"]], "sklearn.utils.arrayfuncs": [[406, "module-sklearn.utils.arrayfuncs"]], "sklearn.utils.class_weight": [[406, "module-sklearn.utils.class_weight"]], "sklearn.utils.discovery": [[406, "module-sklearn.utils.discovery"]], "sklearn.utils.estimator_checks": [[406, "module-sklearn.utils.estimator_checks"]], "sklearn.utils.extmath": [[406, "module-sklearn.utils.extmath"]], "sklearn.utils.graph": [[406, "module-sklearn.utils.graph"]], "sklearn.utils.metadata_routing": [[406, "module-sklearn.utils.metadata_routing"]], "sklearn.utils.metaestimators": [[406, "module-sklearn.utils.metaestimators"]], "sklearn.utils.multiclass": [[406, "module-sklearn.utils.multiclass"]], "sklearn.utils.parallel": [[406, "module-sklearn.utils.parallel"]], "sklearn.utils.random": [[406, "module-sklearn.utils.random"]], "sklearn.utils.sparsefuncs": [[406, "module-sklearn.utils.sparsefuncs"]], "sklearn.utils.sparsefuncs_fast": [[406, "module-sklearn.utils.sparsefuncs_fast"]], "sklearn.utils.validation": [[406, "module-sklearn.utils.validation"]], "dbscan() (in module sklearn.cluster)": [[418, "sklearn.cluster.dbscan"]], "fastica() (in module sklearn.decomposition)": [[419, "sklearn.decomposition.fastica"]], "oas() (in module sklearn.covariance)": [[420, "sklearn.covariance.oas"]], "baseestimator (class in sklearn.base)": [[421, "sklearn.base.BaseEstimator"]], "get_metadata_routing() (sklearn.base.baseestimator method)": [[421, "sklearn.base.BaseEstimator.get_metadata_routing"]], "get_params() (sklearn.base.baseestimator method)": [[421, "sklearn.base.BaseEstimator.get_params"]], "set_params() (sklearn.base.baseestimator method)": [[421, "sklearn.base.BaseEstimator.set_params"]], "biclustermixin (class in sklearn.base)": [[422, "sklearn.base.BiclusterMixin"]], "biclusters_ (sklearn.base.biclustermixin property)": [[422, "sklearn.base.BiclusterMixin.biclusters_"]], "get_indices() (sklearn.base.biclustermixin method)": [[422, "sklearn.base.BiclusterMixin.get_indices"]], "get_shape() (sklearn.base.biclustermixin method)": [[422, "sklearn.base.BiclusterMixin.get_shape"]], "get_submatrix() (sklearn.base.biclustermixin method)": [[422, "sklearn.base.BiclusterMixin.get_submatrix"]], "classnameprefixfeaturesoutmixin (class in sklearn.base)": [[423, "sklearn.base.ClassNamePrefixFeaturesOutMixin"]], "get_feature_names_out() (sklearn.base.classnameprefixfeaturesoutmixin method)": [[423, "sklearn.base.ClassNamePrefixFeaturesOutMixin.get_feature_names_out"]], "classifiermixin (class in sklearn.base)": [[424, "sklearn.base.ClassifierMixin"]], "score() (sklearn.base.classifiermixin method)": [[424, "sklearn.base.ClassifierMixin.score"]], "clustermixin (class in sklearn.base)": [[425, "sklearn.base.ClusterMixin"]], "fit_predict() (sklearn.base.clustermixin method)": [[425, "sklearn.base.ClusterMixin.fit_predict"]], "densitymixin (class in sklearn.base)": [[426, "sklearn.base.DensityMixin"]], "score() (sklearn.base.densitymixin method)": [[426, "sklearn.base.DensityMixin.score"]], "metaestimatormixin (class in sklearn.base)": [[427, "sklearn.base.MetaEstimatorMixin"]], "onetoonefeaturemixin (class in sklearn.base)": [[428, "sklearn.base.OneToOneFeatureMixin"]], "get_feature_names_out() (sklearn.base.onetoonefeaturemixin method)": [[428, "sklearn.base.OneToOneFeatureMixin.get_feature_names_out"]], "outliermixin (class in sklearn.base)": [[429, "sklearn.base.OutlierMixin"]], "fit_predict() (sklearn.base.outliermixin method)": [[429, "sklearn.base.OutlierMixin.fit_predict"]], "regressormixin (class in sklearn.base)": [[430, "sklearn.base.RegressorMixin"]], "score() (sklearn.base.regressormixin method)": [[430, "sklearn.base.RegressorMixin.score"]], "transformermixin (class in sklearn.base)": [[431, "sklearn.base.TransformerMixin"]], "fit_transform() (sklearn.base.transformermixin method)": [[431, "sklearn.base.TransformerMixin.fit_transform"]], "set_output() (sklearn.base.transformermixin method)": [[431, "sklearn.base.TransformerMixin.set_output"]], "clone() (in module sklearn.base)": [[432, "sklearn.base.clone"]], "is_classifier() (in module sklearn.base)": [[433, "sklearn.base.is_classifier"]], "is_regressor() (in module sklearn.base)": [[434, "sklearn.base.is_regressor"]], "calibratedclassifiercv (class in sklearn.calibration)": [[435, "sklearn.calibration.CalibratedClassifierCV"]], "fit() (sklearn.calibration.calibratedclassifiercv method)": [[435, "sklearn.calibration.CalibratedClassifierCV.fit"]], "get_metadata_routing() (sklearn.calibration.calibratedclassifiercv method)": [[435, "sklearn.calibration.CalibratedClassifierCV.get_metadata_routing"]], "get_params() (sklearn.calibration.calibratedclassifiercv method)": [[435, "sklearn.calibration.CalibratedClassifierCV.get_params"]], "predict() (sklearn.calibration.calibratedclassifiercv method)": [[435, "sklearn.calibration.CalibratedClassifierCV.predict"]], "predict_proba() (sklearn.calibration.calibratedclassifiercv method)": [[435, "sklearn.calibration.CalibratedClassifierCV.predict_proba"]], "score() (sklearn.calibration.calibratedclassifiercv method)": [[435, "sklearn.calibration.CalibratedClassifierCV.score"]], "set_fit_request() (sklearn.calibration.calibratedclassifiercv method)": [[435, "sklearn.calibration.CalibratedClassifierCV.set_fit_request"]], "set_params() (sklearn.calibration.calibratedclassifiercv method)": [[435, "sklearn.calibration.CalibratedClassifierCV.set_params"]], "set_score_request() (sklearn.calibration.calibratedclassifiercv method)": [[435, "sklearn.calibration.CalibratedClassifierCV.set_score_request"]], "calibrationdisplay (class in sklearn.calibration)": [[436, "sklearn.calibration.CalibrationDisplay"]], "from_estimator() (sklearn.calibration.calibrationdisplay class method)": [[436, "sklearn.calibration.CalibrationDisplay.from_estimator"]], "from_predictions() (sklearn.calibration.calibrationdisplay class method)": [[436, "sklearn.calibration.CalibrationDisplay.from_predictions"]], "plot() (sklearn.calibration.calibrationdisplay method)": [[436, "sklearn.calibration.CalibrationDisplay.plot"]], "calibration_curve() (in module sklearn.calibration)": [[437, "sklearn.calibration.calibration_curve"]], "affinitypropagation (class in sklearn.cluster)": [[438, "sklearn.cluster.AffinityPropagation"]], "fit() (sklearn.cluster.affinitypropagation method)": [[438, "sklearn.cluster.AffinityPropagation.fit"]], "fit_predict() (sklearn.cluster.affinitypropagation method)": [[438, "sklearn.cluster.AffinityPropagation.fit_predict"]], "get_metadata_routing() (sklearn.cluster.affinitypropagation method)": [[438, "sklearn.cluster.AffinityPropagation.get_metadata_routing"]], "get_params() (sklearn.cluster.affinitypropagation method)": [[438, "sklearn.cluster.AffinityPropagation.get_params"]], "predict() (sklearn.cluster.affinitypropagation method)": [[438, "sklearn.cluster.AffinityPropagation.predict"]], "set_params() (sklearn.cluster.affinitypropagation method)": [[438, "sklearn.cluster.AffinityPropagation.set_params"]], "agglomerativeclustering (class in sklearn.cluster)": [[439, "sklearn.cluster.AgglomerativeClustering"]], "fit() (sklearn.cluster.agglomerativeclustering method)": [[439, "sklearn.cluster.AgglomerativeClustering.fit"]], "fit_predict() (sklearn.cluster.agglomerativeclustering method)": [[439, "sklearn.cluster.AgglomerativeClustering.fit_predict"]], "get_metadata_routing() (sklearn.cluster.agglomerativeclustering method)": [[439, "sklearn.cluster.AgglomerativeClustering.get_metadata_routing"]], "get_params() (sklearn.cluster.agglomerativeclustering method)": [[439, "sklearn.cluster.AgglomerativeClustering.get_params"]], "set_params() (sklearn.cluster.agglomerativeclustering method)": [[439, "sklearn.cluster.AgglomerativeClustering.set_params"]], "birch (class in sklearn.cluster)": [[440, "sklearn.cluster.Birch"]], "fit() (sklearn.cluster.birch method)": [[440, "sklearn.cluster.Birch.fit"]], "fit_predict() (sklearn.cluster.birch method)": [[440, "sklearn.cluster.Birch.fit_predict"]], "fit_transform() (sklearn.cluster.birch method)": [[440, "sklearn.cluster.Birch.fit_transform"]], "get_feature_names_out() (sklearn.cluster.birch method)": [[440, "sklearn.cluster.Birch.get_feature_names_out"]], "get_metadata_routing() (sklearn.cluster.birch method)": [[440, "sklearn.cluster.Birch.get_metadata_routing"]], "get_params() (sklearn.cluster.birch method)": [[440, "sklearn.cluster.Birch.get_params"]], "partial_fit() (sklearn.cluster.birch method)": [[440, "sklearn.cluster.Birch.partial_fit"]], "predict() (sklearn.cluster.birch method)": [[440, "sklearn.cluster.Birch.predict"]], "set_output() (sklearn.cluster.birch method)": [[440, "sklearn.cluster.Birch.set_output"]], "set_params() (sklearn.cluster.birch method)": [[440, "sklearn.cluster.Birch.set_params"]], "transform() (sklearn.cluster.birch method)": [[440, "sklearn.cluster.Birch.transform"]], "bisectingkmeans (class in sklearn.cluster)": [[441, "sklearn.cluster.BisectingKMeans"]], "fit() (sklearn.cluster.bisectingkmeans method)": [[441, "sklearn.cluster.BisectingKMeans.fit"]], "fit_predict() (sklearn.cluster.bisectingkmeans method)": [[441, "sklearn.cluster.BisectingKMeans.fit_predict"]], "fit_transform() (sklearn.cluster.bisectingkmeans method)": [[441, "sklearn.cluster.BisectingKMeans.fit_transform"]], "get_feature_names_out() (sklearn.cluster.bisectingkmeans method)": [[441, "sklearn.cluster.BisectingKMeans.get_feature_names_out"]], "get_metadata_routing() (sklearn.cluster.bisectingkmeans method)": [[441, "sklearn.cluster.BisectingKMeans.get_metadata_routing"]], "get_params() (sklearn.cluster.bisectingkmeans method)": [[441, "sklearn.cluster.BisectingKMeans.get_params"]], "predict() (sklearn.cluster.bisectingkmeans method)": [[441, "sklearn.cluster.BisectingKMeans.predict"]], "score() (sklearn.cluster.bisectingkmeans method)": [[441, "sklearn.cluster.BisectingKMeans.score"]], "set_fit_request() (sklearn.cluster.bisectingkmeans method)": [[441, "sklearn.cluster.BisectingKMeans.set_fit_request"]], "set_output() (sklearn.cluster.bisectingkmeans method)": [[441, "sklearn.cluster.BisectingKMeans.set_output"]], "set_params() (sklearn.cluster.bisectingkmeans method)": [[441, "sklearn.cluster.BisectingKMeans.set_params"]], "set_predict_request() (sklearn.cluster.bisectingkmeans method)": [[441, "sklearn.cluster.BisectingKMeans.set_predict_request"]], "set_score_request() (sklearn.cluster.bisectingkmeans method)": [[441, "sklearn.cluster.BisectingKMeans.set_score_request"]], "transform() (sklearn.cluster.bisectingkmeans method)": [[441, "sklearn.cluster.BisectingKMeans.transform"]], "dbscan (class in sklearn.cluster)": [[442, "sklearn.cluster.DBSCAN"]], "fit() (sklearn.cluster.dbscan method)": [[442, "sklearn.cluster.DBSCAN.fit"]], "fit_predict() (sklearn.cluster.dbscan method)": [[442, "sklearn.cluster.DBSCAN.fit_predict"]], "get_metadata_routing() (sklearn.cluster.dbscan method)": [[442, "sklearn.cluster.DBSCAN.get_metadata_routing"]], "get_params() (sklearn.cluster.dbscan method)": [[442, "sklearn.cluster.DBSCAN.get_params"]], "set_fit_request() (sklearn.cluster.dbscan method)": [[442, "sklearn.cluster.DBSCAN.set_fit_request"]], "set_params() (sklearn.cluster.dbscan method)": [[442, "sklearn.cluster.DBSCAN.set_params"]], "featureagglomeration (class in sklearn.cluster)": [[443, "sklearn.cluster.FeatureAgglomeration"]], "fit() (sklearn.cluster.featureagglomeration method)": [[443, "sklearn.cluster.FeatureAgglomeration.fit"]], "fit_predict (sklearn.cluster.featureagglomeration property)": [[443, "sklearn.cluster.FeatureAgglomeration.fit_predict"]], "fit_transform() (sklearn.cluster.featureagglomeration method)": [[443, "sklearn.cluster.FeatureAgglomeration.fit_transform"]], "get_feature_names_out() (sklearn.cluster.featureagglomeration method)": [[443, "sklearn.cluster.FeatureAgglomeration.get_feature_names_out"]], "get_metadata_routing() (sklearn.cluster.featureagglomeration method)": [[443, "sklearn.cluster.FeatureAgglomeration.get_metadata_routing"]], "get_params() (sklearn.cluster.featureagglomeration method)": [[443, "sklearn.cluster.FeatureAgglomeration.get_params"]], "inverse_transform() (sklearn.cluster.featureagglomeration method)": [[443, "sklearn.cluster.FeatureAgglomeration.inverse_transform"]], "set_output() (sklearn.cluster.featureagglomeration method)": [[443, "sklearn.cluster.FeatureAgglomeration.set_output"]], "set_params() (sklearn.cluster.featureagglomeration method)": [[443, "sklearn.cluster.FeatureAgglomeration.set_params"]], "transform() (sklearn.cluster.featureagglomeration method)": [[443, "sklearn.cluster.FeatureAgglomeration.transform"]], "hdbscan (class in sklearn.cluster)": [[444, "sklearn.cluster.HDBSCAN"]], "dbscan_clustering() (sklearn.cluster.hdbscan method)": [[444, "sklearn.cluster.HDBSCAN.dbscan_clustering"]], "fit() (sklearn.cluster.hdbscan method)": [[444, "sklearn.cluster.HDBSCAN.fit"]], "fit_predict() (sklearn.cluster.hdbscan method)": [[444, "sklearn.cluster.HDBSCAN.fit_predict"]], "get_metadata_routing() (sklearn.cluster.hdbscan method)": [[444, "sklearn.cluster.HDBSCAN.get_metadata_routing"]], "get_params() (sklearn.cluster.hdbscan method)": [[444, "sklearn.cluster.HDBSCAN.get_params"]], "set_params() (sklearn.cluster.hdbscan method)": [[444, "sklearn.cluster.HDBSCAN.set_params"]], "kmeans (class in sklearn.cluster)": [[445, "sklearn.cluster.KMeans"]], "fit() (sklearn.cluster.kmeans method)": [[445, "sklearn.cluster.KMeans.fit"]], "fit_predict() (sklearn.cluster.kmeans method)": [[445, "sklearn.cluster.KMeans.fit_predict"]], "fit_transform() (sklearn.cluster.kmeans method)": [[445, "sklearn.cluster.KMeans.fit_transform"]], "get_feature_names_out() (sklearn.cluster.kmeans method)": [[445, "sklearn.cluster.KMeans.get_feature_names_out"]], "get_metadata_routing() (sklearn.cluster.kmeans method)": [[445, "sklearn.cluster.KMeans.get_metadata_routing"]], "get_params() (sklearn.cluster.kmeans method)": [[445, "sklearn.cluster.KMeans.get_params"]], "predict() (sklearn.cluster.kmeans method)": [[445, "sklearn.cluster.KMeans.predict"]], "score() (sklearn.cluster.kmeans method)": [[445, "sklearn.cluster.KMeans.score"]], "set_fit_request() (sklearn.cluster.kmeans method)": [[445, "sklearn.cluster.KMeans.set_fit_request"]], "set_output() (sklearn.cluster.kmeans method)": [[445, "sklearn.cluster.KMeans.set_output"]], "set_params() (sklearn.cluster.kmeans method)": [[445, "sklearn.cluster.KMeans.set_params"]], "set_predict_request() (sklearn.cluster.kmeans method)": [[445, "sklearn.cluster.KMeans.set_predict_request"]], "set_score_request() (sklearn.cluster.kmeans method)": [[445, "sklearn.cluster.KMeans.set_score_request"]], "transform() (sklearn.cluster.kmeans method)": [[445, "sklearn.cluster.KMeans.transform"]], "meanshift (class in sklearn.cluster)": [[446, "sklearn.cluster.MeanShift"]], "fit() (sklearn.cluster.meanshift method)": [[446, "sklearn.cluster.MeanShift.fit"]], "fit_predict() (sklearn.cluster.meanshift method)": [[446, "sklearn.cluster.MeanShift.fit_predict"]], "get_metadata_routing() (sklearn.cluster.meanshift method)": [[446, "sklearn.cluster.MeanShift.get_metadata_routing"]], "get_params() (sklearn.cluster.meanshift method)": [[446, "sklearn.cluster.MeanShift.get_params"]], "predict() (sklearn.cluster.meanshift method)": [[446, "sklearn.cluster.MeanShift.predict"]], "set_params() (sklearn.cluster.meanshift method)": [[446, "sklearn.cluster.MeanShift.set_params"]], "minibatchkmeans (class in sklearn.cluster)": [[447, "sklearn.cluster.MiniBatchKMeans"]], "fit() (sklearn.cluster.minibatchkmeans method)": [[447, "sklearn.cluster.MiniBatchKMeans.fit"]], "fit_predict() (sklearn.cluster.minibatchkmeans method)": [[447, "sklearn.cluster.MiniBatchKMeans.fit_predict"]], "fit_transform() (sklearn.cluster.minibatchkmeans method)": [[447, "sklearn.cluster.MiniBatchKMeans.fit_transform"]], "get_feature_names_out() (sklearn.cluster.minibatchkmeans method)": [[447, "sklearn.cluster.MiniBatchKMeans.get_feature_names_out"]], "get_metadata_routing() (sklearn.cluster.minibatchkmeans method)": [[447, "sklearn.cluster.MiniBatchKMeans.get_metadata_routing"]], "get_params() (sklearn.cluster.minibatchkmeans method)": [[447, "sklearn.cluster.MiniBatchKMeans.get_params"]], "partial_fit() (sklearn.cluster.minibatchkmeans method)": [[447, "sklearn.cluster.MiniBatchKMeans.partial_fit"]], "predict() (sklearn.cluster.minibatchkmeans method)": [[447, "sklearn.cluster.MiniBatchKMeans.predict"]], "score() (sklearn.cluster.minibatchkmeans method)": [[447, "sklearn.cluster.MiniBatchKMeans.score"]], "set_fit_request() (sklearn.cluster.minibatchkmeans method)": [[447, "sklearn.cluster.MiniBatchKMeans.set_fit_request"]], "set_output() (sklearn.cluster.minibatchkmeans method)": [[447, "sklearn.cluster.MiniBatchKMeans.set_output"]], "set_params() (sklearn.cluster.minibatchkmeans method)": [[447, "sklearn.cluster.MiniBatchKMeans.set_params"]], "set_partial_fit_request() (sklearn.cluster.minibatchkmeans method)": [[447, "sklearn.cluster.MiniBatchKMeans.set_partial_fit_request"]], "set_predict_request() (sklearn.cluster.minibatchkmeans method)": [[447, "sklearn.cluster.MiniBatchKMeans.set_predict_request"]], "set_score_request() (sklearn.cluster.minibatchkmeans method)": [[447, "sklearn.cluster.MiniBatchKMeans.set_score_request"]], "transform() (sklearn.cluster.minibatchkmeans method)": [[447, "sklearn.cluster.MiniBatchKMeans.transform"]], "optics (class in sklearn.cluster)": [[448, "sklearn.cluster.OPTICS"]], "fit() (sklearn.cluster.optics method)": [[448, "sklearn.cluster.OPTICS.fit"]], "fit_predict() (sklearn.cluster.optics method)": [[448, "sklearn.cluster.OPTICS.fit_predict"]], "get_metadata_routing() (sklearn.cluster.optics method)": [[448, "sklearn.cluster.OPTICS.get_metadata_routing"]], "get_params() (sklearn.cluster.optics method)": [[448, "sklearn.cluster.OPTICS.get_params"]], "set_params() (sklearn.cluster.optics method)": [[448, "sklearn.cluster.OPTICS.set_params"]], "spectralbiclustering (class in sklearn.cluster)": [[449, "sklearn.cluster.SpectralBiclustering"]], "biclusters_ (sklearn.cluster.spectralbiclustering property)": [[449, "sklearn.cluster.SpectralBiclustering.biclusters_"]], "fit() (sklearn.cluster.spectralbiclustering method)": [[449, "sklearn.cluster.SpectralBiclustering.fit"]], "get_indices() (sklearn.cluster.spectralbiclustering method)": [[449, "sklearn.cluster.SpectralBiclustering.get_indices"]], "get_metadata_routing() (sklearn.cluster.spectralbiclustering method)": [[449, "sklearn.cluster.SpectralBiclustering.get_metadata_routing"]], "get_params() (sklearn.cluster.spectralbiclustering method)": [[449, "sklearn.cluster.SpectralBiclustering.get_params"]], "get_shape() (sklearn.cluster.spectralbiclustering method)": [[449, "sklearn.cluster.SpectralBiclustering.get_shape"]], "get_submatrix() (sklearn.cluster.spectralbiclustering method)": [[449, "sklearn.cluster.SpectralBiclustering.get_submatrix"]], "set_params() (sklearn.cluster.spectralbiclustering method)": [[449, "sklearn.cluster.SpectralBiclustering.set_params"]], "spectralclustering (class in sklearn.cluster)": [[450, "sklearn.cluster.SpectralClustering"]], "fit() (sklearn.cluster.spectralclustering method)": [[450, "sklearn.cluster.SpectralClustering.fit"]], "fit_predict() (sklearn.cluster.spectralclustering method)": [[450, "sklearn.cluster.SpectralClustering.fit_predict"]], "get_metadata_routing() (sklearn.cluster.spectralclustering method)": [[450, "sklearn.cluster.SpectralClustering.get_metadata_routing"]], "get_params() (sklearn.cluster.spectralclustering method)": [[450, "sklearn.cluster.SpectralClustering.get_params"]], "set_params() (sklearn.cluster.spectralclustering method)": [[450, "sklearn.cluster.SpectralClustering.set_params"]], "spectralcoclustering (class in sklearn.cluster)": [[451, "sklearn.cluster.SpectralCoclustering"]], "biclusters_ (sklearn.cluster.spectralcoclustering property)": [[451, "sklearn.cluster.SpectralCoclustering.biclusters_"]], "fit() (sklearn.cluster.spectralcoclustering method)": [[451, "sklearn.cluster.SpectralCoclustering.fit"]], "get_indices() (sklearn.cluster.spectralcoclustering method)": [[451, "sklearn.cluster.SpectralCoclustering.get_indices"]], "get_metadata_routing() (sklearn.cluster.spectralcoclustering method)": [[451, "sklearn.cluster.SpectralCoclustering.get_metadata_routing"]], "get_params() (sklearn.cluster.spectralcoclustering method)": [[451, "sklearn.cluster.SpectralCoclustering.get_params"]], "get_shape() (sklearn.cluster.spectralcoclustering method)": [[451, "sklearn.cluster.SpectralCoclustering.get_shape"]], "get_submatrix() (sklearn.cluster.spectralcoclustering method)": [[451, "sklearn.cluster.SpectralCoclustering.get_submatrix"]], "set_params() (sklearn.cluster.spectralcoclustering method)": [[451, "sklearn.cluster.SpectralCoclustering.set_params"]], "affinity_propagation() (in module sklearn.cluster)": [[452, "sklearn.cluster.affinity_propagation"]], "cluster_optics_dbscan() (in module sklearn.cluster)": [[453, "sklearn.cluster.cluster_optics_dbscan"]], "cluster_optics_xi() (in module sklearn.cluster)": [[454, "sklearn.cluster.cluster_optics_xi"]], "compute_optics_graph() (in module sklearn.cluster)": [[455, "sklearn.cluster.compute_optics_graph"]], "estimate_bandwidth() (in module sklearn.cluster)": [[456, "sklearn.cluster.estimate_bandwidth"]], "k_means() (in module sklearn.cluster)": [[457, "sklearn.cluster.k_means"]], "kmeans_plusplus() (in module sklearn.cluster)": [[458, "sklearn.cluster.kmeans_plusplus"]], "mean_shift() (in module sklearn.cluster)": [[459, "sklearn.cluster.mean_shift"]], "spectral_clustering() (in module sklearn.cluster)": [[460, "sklearn.cluster.spectral_clustering"]], "ward_tree() (in module sklearn.cluster)": [[461, "sklearn.cluster.ward_tree"]], "columntransformer (class in sklearn.compose)": [[462, "sklearn.compose.ColumnTransformer"]], "fit() (sklearn.compose.columntransformer method)": [[462, "sklearn.compose.ColumnTransformer.fit"]], "fit_transform() (sklearn.compose.columntransformer method)": [[462, "sklearn.compose.ColumnTransformer.fit_transform"]], "get_feature_names_out() (sklearn.compose.columntransformer method)": [[462, "sklearn.compose.ColumnTransformer.get_feature_names_out"]], "get_metadata_routing() (sklearn.compose.columntransformer method)": [[462, "sklearn.compose.ColumnTransformer.get_metadata_routing"]], "get_params() (sklearn.compose.columntransformer method)": [[462, "sklearn.compose.ColumnTransformer.get_params"]], "named_transformers_ (sklearn.compose.columntransformer property)": [[462, "sklearn.compose.ColumnTransformer.named_transformers_"]], "set_output() (sklearn.compose.columntransformer method)": [[462, "sklearn.compose.ColumnTransformer.set_output"]], "set_params() (sklearn.compose.columntransformer method)": [[462, "sklearn.compose.ColumnTransformer.set_params"]], "transform() (sklearn.compose.columntransformer method)": [[462, "sklearn.compose.ColumnTransformer.transform"]], "transformedtargetregressor (class in sklearn.compose)": [[463, "sklearn.compose.TransformedTargetRegressor"]], "fit() (sklearn.compose.transformedtargetregressor method)": [[463, "sklearn.compose.TransformedTargetRegressor.fit"]], "get_metadata_routing() (sklearn.compose.transformedtargetregressor method)": [[463, "sklearn.compose.TransformedTargetRegressor.get_metadata_routing"]], "get_params() (sklearn.compose.transformedtargetregressor method)": [[463, "sklearn.compose.TransformedTargetRegressor.get_params"]], "n_features_in_ (sklearn.compose.transformedtargetregressor property)": [[463, "sklearn.compose.TransformedTargetRegressor.n_features_in_"]], "predict() (sklearn.compose.transformedtargetregressor method)": [[463, "sklearn.compose.TransformedTargetRegressor.predict"]], "score() (sklearn.compose.transformedtargetregressor method)": [[463, "sklearn.compose.TransformedTargetRegressor.score"]], "set_params() (sklearn.compose.transformedtargetregressor method)": [[463, "sklearn.compose.TransformedTargetRegressor.set_params"]], "set_score_request() (sklearn.compose.transformedtargetregressor method)": [[463, "sklearn.compose.TransformedTargetRegressor.set_score_request"]], "make_column_selector() (in module sklearn.compose)": [[464, "sklearn.compose.make_column_selector"]], "make_column_transformer() (in module sklearn.compose)": [[465, "sklearn.compose.make_column_transformer"]], "config_context() (in module sklearn)": [[466, "sklearn.config_context"]], "ellipticenvelope (class in sklearn.covariance)": [[467, "sklearn.covariance.EllipticEnvelope"]], "correct_covariance() (sklearn.covariance.ellipticenvelope method)": [[467, "sklearn.covariance.EllipticEnvelope.correct_covariance"]], "decision_function() (sklearn.covariance.ellipticenvelope method)": [[467, "sklearn.covariance.EllipticEnvelope.decision_function"]], "error_norm() (sklearn.covariance.ellipticenvelope method)": [[467, "sklearn.covariance.EllipticEnvelope.error_norm"]], "fit() (sklearn.covariance.ellipticenvelope method)": [[467, "sklearn.covariance.EllipticEnvelope.fit"]], "fit_predict() (sklearn.covariance.ellipticenvelope method)": [[467, "sklearn.covariance.EllipticEnvelope.fit_predict"]], "get_metadata_routing() (sklearn.covariance.ellipticenvelope method)": [[467, "sklearn.covariance.EllipticEnvelope.get_metadata_routing"]], "get_params() (sklearn.covariance.ellipticenvelope method)": [[467, "sklearn.covariance.EllipticEnvelope.get_params"]], "get_precision() (sklearn.covariance.ellipticenvelope method)": [[467, "sklearn.covariance.EllipticEnvelope.get_precision"]], "mahalanobis() (sklearn.covariance.ellipticenvelope method)": [[467, "sklearn.covariance.EllipticEnvelope.mahalanobis"]], "predict() (sklearn.covariance.ellipticenvelope method)": [[467, "sklearn.covariance.EllipticEnvelope.predict"]], "reweight_covariance() (sklearn.covariance.ellipticenvelope method)": [[467, "sklearn.covariance.EllipticEnvelope.reweight_covariance"]], "score() (sklearn.covariance.ellipticenvelope method)": [[467, "sklearn.covariance.EllipticEnvelope.score"]], "score_samples() (sklearn.covariance.ellipticenvelope method)": [[467, "sklearn.covariance.EllipticEnvelope.score_samples"]], "set_params() (sklearn.covariance.ellipticenvelope method)": [[467, "sklearn.covariance.EllipticEnvelope.set_params"]], "set_score_request() (sklearn.covariance.ellipticenvelope method)": [[467, "sklearn.covariance.EllipticEnvelope.set_score_request"]], "empiricalcovariance (class in sklearn.covariance)": [[468, "sklearn.covariance.EmpiricalCovariance"]], "error_norm() (sklearn.covariance.empiricalcovariance method)": [[468, "sklearn.covariance.EmpiricalCovariance.error_norm"]], "fit() (sklearn.covariance.empiricalcovariance method)": [[468, "sklearn.covariance.EmpiricalCovariance.fit"]], "get_metadata_routing() (sklearn.covariance.empiricalcovariance method)": [[468, "sklearn.covariance.EmpiricalCovariance.get_metadata_routing"]], "get_params() (sklearn.covariance.empiricalcovariance method)": [[468, "sklearn.covariance.EmpiricalCovariance.get_params"]], "get_precision() (sklearn.covariance.empiricalcovariance method)": [[468, "sklearn.covariance.EmpiricalCovariance.get_precision"]], "mahalanobis() (sklearn.covariance.empiricalcovariance method)": [[468, "sklearn.covariance.EmpiricalCovariance.mahalanobis"]], "score() (sklearn.covariance.empiricalcovariance method)": [[468, "sklearn.covariance.EmpiricalCovariance.score"]], "set_params() (sklearn.covariance.empiricalcovariance method)": [[468, "sklearn.covariance.EmpiricalCovariance.set_params"]], "set_score_request() (sklearn.covariance.empiricalcovariance method)": [[468, "sklearn.covariance.EmpiricalCovariance.set_score_request"]], "graphicallasso (class in sklearn.covariance)": [[469, "sklearn.covariance.GraphicalLasso"]], "error_norm() (sklearn.covariance.graphicallasso method)": [[469, "sklearn.covariance.GraphicalLasso.error_norm"]], "fit() (sklearn.covariance.graphicallasso method)": [[469, "sklearn.covariance.GraphicalLasso.fit"]], "get_metadata_routing() (sklearn.covariance.graphicallasso method)": [[469, "sklearn.covariance.GraphicalLasso.get_metadata_routing"]], "get_params() (sklearn.covariance.graphicallasso method)": [[469, "sklearn.covariance.GraphicalLasso.get_params"]], "get_precision() (sklearn.covariance.graphicallasso method)": [[469, "sklearn.covariance.GraphicalLasso.get_precision"]], "mahalanobis() (sklearn.covariance.graphicallasso method)": [[469, "sklearn.covariance.GraphicalLasso.mahalanobis"]], "score() (sklearn.covariance.graphicallasso method)": [[469, "sklearn.covariance.GraphicalLasso.score"]], "set_params() (sklearn.covariance.graphicallasso method)": [[469, "sklearn.covariance.GraphicalLasso.set_params"]], "set_score_request() (sklearn.covariance.graphicallasso method)": [[469, "sklearn.covariance.GraphicalLasso.set_score_request"]], "graphicallassocv (class in sklearn.covariance)": [[470, "sklearn.covariance.GraphicalLassoCV"]], "error_norm() (sklearn.covariance.graphicallassocv method)": [[470, "sklearn.covariance.GraphicalLassoCV.error_norm"]], "fit() (sklearn.covariance.graphicallassocv method)": [[470, "sklearn.covariance.GraphicalLassoCV.fit"]], "get_metadata_routing() (sklearn.covariance.graphicallassocv method)": [[470, "sklearn.covariance.GraphicalLassoCV.get_metadata_routing"]], "get_params() (sklearn.covariance.graphicallassocv method)": [[470, "sklearn.covariance.GraphicalLassoCV.get_params"]], "get_precision() (sklearn.covariance.graphicallassocv method)": [[470, "sklearn.covariance.GraphicalLassoCV.get_precision"]], "mahalanobis() (sklearn.covariance.graphicallassocv method)": [[470, "sklearn.covariance.GraphicalLassoCV.mahalanobis"]], "score() (sklearn.covariance.graphicallassocv method)": [[470, "sklearn.covariance.GraphicalLassoCV.score"]], "set_params() (sklearn.covariance.graphicallassocv method)": [[470, "sklearn.covariance.GraphicalLassoCV.set_params"]], "set_score_request() (sklearn.covariance.graphicallassocv method)": [[470, "sklearn.covariance.GraphicalLassoCV.set_score_request"]], "ledoitwolf (class in sklearn.covariance)": [[471, "sklearn.covariance.LedoitWolf"]], "error_norm() (sklearn.covariance.ledoitwolf method)": [[471, "sklearn.covariance.LedoitWolf.error_norm"]], "fit() (sklearn.covariance.ledoitwolf method)": [[471, "sklearn.covariance.LedoitWolf.fit"]], "get_metadata_routing() (sklearn.covariance.ledoitwolf method)": [[471, "sklearn.covariance.LedoitWolf.get_metadata_routing"]], "get_params() (sklearn.covariance.ledoitwolf method)": [[471, "sklearn.covariance.LedoitWolf.get_params"]], "get_precision() (sklearn.covariance.ledoitwolf method)": [[471, "sklearn.covariance.LedoitWolf.get_precision"]], "mahalanobis() (sklearn.covariance.ledoitwolf method)": [[471, "sklearn.covariance.LedoitWolf.mahalanobis"]], "score() (sklearn.covariance.ledoitwolf method)": [[471, "sklearn.covariance.LedoitWolf.score"]], "set_params() (sklearn.covariance.ledoitwolf method)": [[471, "sklearn.covariance.LedoitWolf.set_params"]], "set_score_request() (sklearn.covariance.ledoitwolf method)": [[471, "sklearn.covariance.LedoitWolf.set_score_request"]], "mincovdet (class in sklearn.covariance)": [[472, "sklearn.covariance.MinCovDet"]], "correct_covariance() (sklearn.covariance.mincovdet method)": [[472, "sklearn.covariance.MinCovDet.correct_covariance"]], "error_norm() (sklearn.covariance.mincovdet method)": [[472, "sklearn.covariance.MinCovDet.error_norm"]], "fit() (sklearn.covariance.mincovdet method)": [[472, "sklearn.covariance.MinCovDet.fit"]], "get_metadata_routing() (sklearn.covariance.mincovdet method)": [[472, "sklearn.covariance.MinCovDet.get_metadata_routing"]], "get_params() (sklearn.covariance.mincovdet method)": [[472, "sklearn.covariance.MinCovDet.get_params"]], "get_precision() (sklearn.covariance.mincovdet method)": [[472, "sklearn.covariance.MinCovDet.get_precision"]], "mahalanobis() (sklearn.covariance.mincovdet method)": [[472, "sklearn.covariance.MinCovDet.mahalanobis"]], "reweight_covariance() (sklearn.covariance.mincovdet method)": [[472, "sklearn.covariance.MinCovDet.reweight_covariance"]], "score() (sklearn.covariance.mincovdet method)": [[472, "sklearn.covariance.MinCovDet.score"]], "set_params() (sklearn.covariance.mincovdet method)": [[472, "sklearn.covariance.MinCovDet.set_params"]], "set_score_request() (sklearn.covariance.mincovdet method)": [[472, "sklearn.covariance.MinCovDet.set_score_request"]], "oas (class in sklearn.covariance)": [[473, "sklearn.covariance.OAS"]], "error_norm() (sklearn.covariance.oas method)": [[473, "sklearn.covariance.OAS.error_norm"]], "fit() (sklearn.covariance.oas method)": [[473, "sklearn.covariance.OAS.fit"]], "get_metadata_routing() (sklearn.covariance.oas method)": [[473, "sklearn.covariance.OAS.get_metadata_routing"]], "get_params() (sklearn.covariance.oas method)": [[473, "sklearn.covariance.OAS.get_params"]], "get_precision() (sklearn.covariance.oas method)": [[473, "sklearn.covariance.OAS.get_precision"]], "mahalanobis() (sklearn.covariance.oas method)": [[473, "sklearn.covariance.OAS.mahalanobis"]], "score() (sklearn.covariance.oas method)": [[473, "sklearn.covariance.OAS.score"]], "set_params() (sklearn.covariance.oas method)": [[473, "sklearn.covariance.OAS.set_params"]], "set_score_request() (sklearn.covariance.oas method)": [[473, "sklearn.covariance.OAS.set_score_request"]], "shrunkcovariance (class in sklearn.covariance)": [[474, "sklearn.covariance.ShrunkCovariance"]], "error_norm() (sklearn.covariance.shrunkcovariance method)": [[474, "sklearn.covariance.ShrunkCovariance.error_norm"]], "fit() (sklearn.covariance.shrunkcovariance method)": [[474, "sklearn.covariance.ShrunkCovariance.fit"]], "get_metadata_routing() (sklearn.covariance.shrunkcovariance method)": [[474, "sklearn.covariance.ShrunkCovariance.get_metadata_routing"]], "get_params() (sklearn.covariance.shrunkcovariance method)": [[474, "sklearn.covariance.ShrunkCovariance.get_params"]], "get_precision() (sklearn.covariance.shrunkcovariance method)": [[474, "sklearn.covariance.ShrunkCovariance.get_precision"]], "mahalanobis() (sklearn.covariance.shrunkcovariance method)": [[474, "sklearn.covariance.ShrunkCovariance.mahalanobis"]], "score() (sklearn.covariance.shrunkcovariance method)": [[474, "sklearn.covariance.ShrunkCovariance.score"]], "set_params() (sklearn.covariance.shrunkcovariance method)": [[474, "sklearn.covariance.ShrunkCovariance.set_params"]], "set_score_request() (sklearn.covariance.shrunkcovariance method)": [[474, "sklearn.covariance.ShrunkCovariance.set_score_request"]], "empirical_covariance() (in module sklearn.covariance)": [[475, "sklearn.covariance.empirical_covariance"]], "graphical_lasso() (in module sklearn.covariance)": [[476, "sklearn.covariance.graphical_lasso"]], "ledoit_wolf() (in module sklearn.covariance)": [[477, "sklearn.covariance.ledoit_wolf"]], "ledoit_wolf_shrinkage() (in module sklearn.covariance)": [[478, "sklearn.covariance.ledoit_wolf_shrinkage"]], "shrunk_covariance() (in module sklearn.covariance)": [[479, "sklearn.covariance.shrunk_covariance"]], "cca (class in sklearn.cross_decomposition)": [[480, "sklearn.cross_decomposition.CCA"]], "fit() (sklearn.cross_decomposition.cca method)": [[480, "sklearn.cross_decomposition.CCA.fit"]], "fit_transform() (sklearn.cross_decomposition.cca method)": [[480, "sklearn.cross_decomposition.CCA.fit_transform"]], "get_feature_names_out() (sklearn.cross_decomposition.cca method)": [[480, "sklearn.cross_decomposition.CCA.get_feature_names_out"]], "get_metadata_routing() (sklearn.cross_decomposition.cca method)": [[480, "sklearn.cross_decomposition.CCA.get_metadata_routing"]], "get_params() (sklearn.cross_decomposition.cca method)": [[480, "sklearn.cross_decomposition.CCA.get_params"]], "inverse_transform() (sklearn.cross_decomposition.cca method)": [[480, "sklearn.cross_decomposition.CCA.inverse_transform"]], "predict() (sklearn.cross_decomposition.cca method)": [[480, "sklearn.cross_decomposition.CCA.predict"]], "score() (sklearn.cross_decomposition.cca method)": [[480, "sklearn.cross_decomposition.CCA.score"]], "set_output() (sklearn.cross_decomposition.cca method)": [[480, "sklearn.cross_decomposition.CCA.set_output"]], "set_params() (sklearn.cross_decomposition.cca method)": [[480, "sklearn.cross_decomposition.CCA.set_params"]], "set_predict_request() (sklearn.cross_decomposition.cca method)": [[480, "sklearn.cross_decomposition.CCA.set_predict_request"]], "set_score_request() (sklearn.cross_decomposition.cca method)": [[480, "sklearn.cross_decomposition.CCA.set_score_request"]], "set_transform_request() (sklearn.cross_decomposition.cca method)": [[480, "sklearn.cross_decomposition.CCA.set_transform_request"]], "transform() (sklearn.cross_decomposition.cca method)": [[480, "sklearn.cross_decomposition.CCA.transform"]], "plscanonical (class in sklearn.cross_decomposition)": [[481, "sklearn.cross_decomposition.PLSCanonical"]], "fit() (sklearn.cross_decomposition.plscanonical method)": [[481, "sklearn.cross_decomposition.PLSCanonical.fit"]], "fit_transform() (sklearn.cross_decomposition.plscanonical method)": [[481, "sklearn.cross_decomposition.PLSCanonical.fit_transform"]], "get_feature_names_out() (sklearn.cross_decomposition.plscanonical method)": [[481, "sklearn.cross_decomposition.PLSCanonical.get_feature_names_out"]], "get_metadata_routing() (sklearn.cross_decomposition.plscanonical method)": [[481, "sklearn.cross_decomposition.PLSCanonical.get_metadata_routing"]], "get_params() (sklearn.cross_decomposition.plscanonical method)": [[481, "sklearn.cross_decomposition.PLSCanonical.get_params"]], "inverse_transform() (sklearn.cross_decomposition.plscanonical method)": [[481, "sklearn.cross_decomposition.PLSCanonical.inverse_transform"]], "predict() (sklearn.cross_decomposition.plscanonical method)": [[481, "sklearn.cross_decomposition.PLSCanonical.predict"]], "score() (sklearn.cross_decomposition.plscanonical method)": [[481, "sklearn.cross_decomposition.PLSCanonical.score"]], "set_output() (sklearn.cross_decomposition.plscanonical method)": [[481, "sklearn.cross_decomposition.PLSCanonical.set_output"]], "set_params() (sklearn.cross_decomposition.plscanonical method)": [[481, "sklearn.cross_decomposition.PLSCanonical.set_params"]], "set_predict_request() (sklearn.cross_decomposition.plscanonical method)": [[481, "sklearn.cross_decomposition.PLSCanonical.set_predict_request"]], "set_score_request() (sklearn.cross_decomposition.plscanonical method)": [[481, "sklearn.cross_decomposition.PLSCanonical.set_score_request"]], "set_transform_request() (sklearn.cross_decomposition.plscanonical method)": [[481, "sklearn.cross_decomposition.PLSCanonical.set_transform_request"]], "transform() (sklearn.cross_decomposition.plscanonical method)": [[481, "sklearn.cross_decomposition.PLSCanonical.transform"]], "plsregression (class in sklearn.cross_decomposition)": [[482, "sklearn.cross_decomposition.PLSRegression"]], "fit() (sklearn.cross_decomposition.plsregression method)": [[482, "sklearn.cross_decomposition.PLSRegression.fit"]], "fit_transform() (sklearn.cross_decomposition.plsregression method)": [[482, "sklearn.cross_decomposition.PLSRegression.fit_transform"]], "get_feature_names_out() (sklearn.cross_decomposition.plsregression method)": [[482, "sklearn.cross_decomposition.PLSRegression.get_feature_names_out"]], "get_metadata_routing() (sklearn.cross_decomposition.plsregression method)": [[482, "sklearn.cross_decomposition.PLSRegression.get_metadata_routing"]], "get_params() (sklearn.cross_decomposition.plsregression method)": [[482, "sklearn.cross_decomposition.PLSRegression.get_params"]], "inverse_transform() (sklearn.cross_decomposition.plsregression method)": [[482, "sklearn.cross_decomposition.PLSRegression.inverse_transform"]], "predict() (sklearn.cross_decomposition.plsregression method)": [[482, "sklearn.cross_decomposition.PLSRegression.predict"]], "score() (sklearn.cross_decomposition.plsregression method)": [[482, "sklearn.cross_decomposition.PLSRegression.score"]], "set_output() (sklearn.cross_decomposition.plsregression method)": [[482, "sklearn.cross_decomposition.PLSRegression.set_output"]], "set_params() (sklearn.cross_decomposition.plsregression method)": [[482, "sklearn.cross_decomposition.PLSRegression.set_params"]], "set_predict_request() (sklearn.cross_decomposition.plsregression method)": [[482, "sklearn.cross_decomposition.PLSRegression.set_predict_request"]], "set_score_request() (sklearn.cross_decomposition.plsregression method)": [[482, "sklearn.cross_decomposition.PLSRegression.set_score_request"]], "set_transform_request() (sklearn.cross_decomposition.plsregression method)": [[482, "sklearn.cross_decomposition.PLSRegression.set_transform_request"]], "transform() (sklearn.cross_decomposition.plsregression method)": [[482, "sklearn.cross_decomposition.PLSRegression.transform"]], "plssvd (class in sklearn.cross_decomposition)": [[483, "sklearn.cross_decomposition.PLSSVD"]], "fit() (sklearn.cross_decomposition.plssvd method)": [[483, "sklearn.cross_decomposition.PLSSVD.fit"]], "fit_transform() (sklearn.cross_decomposition.plssvd method)": [[483, "sklearn.cross_decomposition.PLSSVD.fit_transform"]], "get_feature_names_out() (sklearn.cross_decomposition.plssvd method)": [[483, "sklearn.cross_decomposition.PLSSVD.get_feature_names_out"]], "get_metadata_routing() (sklearn.cross_decomposition.plssvd method)": [[483, "sklearn.cross_decomposition.PLSSVD.get_metadata_routing"]], "get_params() (sklearn.cross_decomposition.plssvd method)": [[483, "sklearn.cross_decomposition.PLSSVD.get_params"]], "set_output() (sklearn.cross_decomposition.plssvd method)": [[483, "sklearn.cross_decomposition.PLSSVD.set_output"]], "set_params() (sklearn.cross_decomposition.plssvd method)": [[483, "sklearn.cross_decomposition.PLSSVD.set_params"]], "transform() (sklearn.cross_decomposition.plssvd method)": [[483, "sklearn.cross_decomposition.PLSSVD.transform"]], "clear_data_home() (in module sklearn.datasets)": [[484, "sklearn.datasets.clear_data_home"]], "dump_svmlight_file() (in module sklearn.datasets)": [[485, "sklearn.datasets.dump_svmlight_file"]], "fetch_20newsgroups() (in module sklearn.datasets)": [[486, "sklearn.datasets.fetch_20newsgroups"]], "fetch_20newsgroups_vectorized() (in module sklearn.datasets)": [[487, "sklearn.datasets.fetch_20newsgroups_vectorized"]], "fetch_california_housing() (in module sklearn.datasets)": [[488, "sklearn.datasets.fetch_california_housing"]], "fetch_covtype() (in module sklearn.datasets)": [[489, "sklearn.datasets.fetch_covtype"]], "fetch_kddcup99() (in module sklearn.datasets)": [[490, "sklearn.datasets.fetch_kddcup99"]], "fetch_lfw_pairs() (in module sklearn.datasets)": [[491, "sklearn.datasets.fetch_lfw_pairs"]], "fetch_lfw_people() (in module sklearn.datasets)": [[492, "sklearn.datasets.fetch_lfw_people"]], "fetch_olivetti_faces() (in module sklearn.datasets)": [[493, "sklearn.datasets.fetch_olivetti_faces"]], "fetch_openml() (in module sklearn.datasets)": [[494, "sklearn.datasets.fetch_openml"]], "fetch_rcv1() (in module sklearn.datasets)": [[495, "sklearn.datasets.fetch_rcv1"]], "fetch_species_distributions() (in module sklearn.datasets)": [[496, "sklearn.datasets.fetch_species_distributions"]], "get_data_home() (in module sklearn.datasets)": [[497, "sklearn.datasets.get_data_home"]], "load_breast_cancer() (in module sklearn.datasets)": [[498, "sklearn.datasets.load_breast_cancer"]], "load_diabetes() (in module sklearn.datasets)": [[499, "sklearn.datasets.load_diabetes"]], "load_digits() (in module sklearn.datasets)": [[500, "sklearn.datasets.load_digits"]], "load_files() (in module sklearn.datasets)": [[501, "sklearn.datasets.load_files"]], "load_iris() (in module sklearn.datasets)": [[502, "sklearn.datasets.load_iris"]], "load_linnerud() (in module sklearn.datasets)": [[503, "sklearn.datasets.load_linnerud"]], "load_sample_image() (in module sklearn.datasets)": [[504, "sklearn.datasets.load_sample_image"]], "load_sample_images() (in module sklearn.datasets)": [[505, "sklearn.datasets.load_sample_images"]], "load_svmlight_file() (in module sklearn.datasets)": [[506, "sklearn.datasets.load_svmlight_file"]], "load_svmlight_files() (in module sklearn.datasets)": [[507, "sklearn.datasets.load_svmlight_files"]], "load_wine() (in module sklearn.datasets)": [[508, "sklearn.datasets.load_wine"]], "make_biclusters() (in module sklearn.datasets)": [[509, "sklearn.datasets.make_biclusters"]], "make_blobs() (in module sklearn.datasets)": [[510, "sklearn.datasets.make_blobs"]], "make_checkerboard() (in module sklearn.datasets)": [[511, "sklearn.datasets.make_checkerboard"]], "make_circles() (in module sklearn.datasets)": [[512, "sklearn.datasets.make_circles"]], "make_classification() (in module sklearn.datasets)": [[513, "sklearn.datasets.make_classification"]], "make_friedman1() (in module sklearn.datasets)": [[514, "sklearn.datasets.make_friedman1"]], "make_friedman2() (in module sklearn.datasets)": [[515, "sklearn.datasets.make_friedman2"]], "make_friedman3() (in module sklearn.datasets)": [[516, "sklearn.datasets.make_friedman3"]], "make_gaussian_quantiles() (in module sklearn.datasets)": [[517, "sklearn.datasets.make_gaussian_quantiles"]], "make_hastie_10_2() (in module sklearn.datasets)": [[518, "sklearn.datasets.make_hastie_10_2"]], "make_low_rank_matrix() (in module sklearn.datasets)": [[519, "sklearn.datasets.make_low_rank_matrix"]], "make_moons() (in module sklearn.datasets)": [[520, "sklearn.datasets.make_moons"]], "make_multilabel_classification() (in module sklearn.datasets)": [[521, "sklearn.datasets.make_multilabel_classification"]], "make_regression() (in module sklearn.datasets)": [[522, "sklearn.datasets.make_regression"]], "make_s_curve() (in module sklearn.datasets)": [[523, "sklearn.datasets.make_s_curve"]], "make_sparse_coded_signal() (in module sklearn.datasets)": [[524, "sklearn.datasets.make_sparse_coded_signal"]], "make_sparse_spd_matrix() (in module sklearn.datasets)": [[525, "sklearn.datasets.make_sparse_spd_matrix"]], "make_sparse_uncorrelated() (in module sklearn.datasets)": [[526, "sklearn.datasets.make_sparse_uncorrelated"]], "make_spd_matrix() (in module sklearn.datasets)": [[527, "sklearn.datasets.make_spd_matrix"]], "make_swiss_roll() (in module sklearn.datasets)": [[528, "sklearn.datasets.make_swiss_roll"]], "dictionarylearning (class in sklearn.decomposition)": [[529, "sklearn.decomposition.DictionaryLearning"]], "fit() (sklearn.decomposition.dictionarylearning method)": [[529, "sklearn.decomposition.DictionaryLearning.fit"]], "fit_transform() (sklearn.decomposition.dictionarylearning method)": [[529, "sklearn.decomposition.DictionaryLearning.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.dictionarylearning method)": [[529, "sklearn.decomposition.DictionaryLearning.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.dictionarylearning method)": [[529, "sklearn.decomposition.DictionaryLearning.get_metadata_routing"]], "get_params() (sklearn.decomposition.dictionarylearning method)": [[529, "sklearn.decomposition.DictionaryLearning.get_params"]], "set_output() (sklearn.decomposition.dictionarylearning method)": [[529, "sklearn.decomposition.DictionaryLearning.set_output"]], "set_params() (sklearn.decomposition.dictionarylearning method)": [[529, "sklearn.decomposition.DictionaryLearning.set_params"]], "transform() (sklearn.decomposition.dictionarylearning method)": [[529, "sklearn.decomposition.DictionaryLearning.transform"]], "factoranalysis (class in sklearn.decomposition)": [[530, "sklearn.decomposition.FactorAnalysis"]], "fit() (sklearn.decomposition.factoranalysis method)": [[530, "sklearn.decomposition.FactorAnalysis.fit"]], "fit_transform() (sklearn.decomposition.factoranalysis method)": [[530, "sklearn.decomposition.FactorAnalysis.fit_transform"]], "get_covariance() (sklearn.decomposition.factoranalysis method)": [[530, "sklearn.decomposition.FactorAnalysis.get_covariance"]], "get_feature_names_out() (sklearn.decomposition.factoranalysis method)": [[530, "sklearn.decomposition.FactorAnalysis.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.factoranalysis method)": [[530, "sklearn.decomposition.FactorAnalysis.get_metadata_routing"]], "get_params() (sklearn.decomposition.factoranalysis method)": [[530, "sklearn.decomposition.FactorAnalysis.get_params"]], "get_precision() (sklearn.decomposition.factoranalysis method)": [[530, "sklearn.decomposition.FactorAnalysis.get_precision"]], "score() (sklearn.decomposition.factoranalysis method)": [[530, "sklearn.decomposition.FactorAnalysis.score"]], "score_samples() (sklearn.decomposition.factoranalysis method)": [[530, "sklearn.decomposition.FactorAnalysis.score_samples"]], "set_output() (sklearn.decomposition.factoranalysis method)": [[530, "sklearn.decomposition.FactorAnalysis.set_output"]], "set_params() (sklearn.decomposition.factoranalysis method)": [[530, "sklearn.decomposition.FactorAnalysis.set_params"]], "transform() (sklearn.decomposition.factoranalysis method)": [[530, "sklearn.decomposition.FactorAnalysis.transform"]], "fastica (class in sklearn.decomposition)": [[531, "sklearn.decomposition.FastICA"]], "fit() (sklearn.decomposition.fastica method)": [[531, "sklearn.decomposition.FastICA.fit"]], "fit_transform() (sklearn.decomposition.fastica method)": [[531, "sklearn.decomposition.FastICA.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.fastica method)": [[531, "sklearn.decomposition.FastICA.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.fastica method)": [[531, "sklearn.decomposition.FastICA.get_metadata_routing"]], "get_params() (sklearn.decomposition.fastica method)": [[531, "sklearn.decomposition.FastICA.get_params"]], "inverse_transform() (sklearn.decomposition.fastica method)": [[531, "sklearn.decomposition.FastICA.inverse_transform"]], "set_inverse_transform_request() (sklearn.decomposition.fastica method)": [[531, "sklearn.decomposition.FastICA.set_inverse_transform_request"]], "set_output() (sklearn.decomposition.fastica method)": [[531, "sklearn.decomposition.FastICA.set_output"]], "set_params() (sklearn.decomposition.fastica method)": [[531, "sklearn.decomposition.FastICA.set_params"]], "set_transform_request() (sklearn.decomposition.fastica method)": [[531, "sklearn.decomposition.FastICA.set_transform_request"]], "transform() (sklearn.decomposition.fastica method)": [[531, "sklearn.decomposition.FastICA.transform"]], "incrementalpca (class in sklearn.decomposition)": [[532, "sklearn.decomposition.IncrementalPCA"]], "fit() (sklearn.decomposition.incrementalpca method)": [[532, "sklearn.decomposition.IncrementalPCA.fit"]], "fit_transform() (sklearn.decomposition.incrementalpca method)": [[532, "sklearn.decomposition.IncrementalPCA.fit_transform"]], "get_covariance() (sklearn.decomposition.incrementalpca method)": [[532, "sklearn.decomposition.IncrementalPCA.get_covariance"]], "get_feature_names_out() (sklearn.decomposition.incrementalpca method)": [[532, "sklearn.decomposition.IncrementalPCA.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.incrementalpca method)": [[532, "sklearn.decomposition.IncrementalPCA.get_metadata_routing"]], "get_params() (sklearn.decomposition.incrementalpca method)": [[532, "sklearn.decomposition.IncrementalPCA.get_params"]], "get_precision() (sklearn.decomposition.incrementalpca method)": [[532, "sklearn.decomposition.IncrementalPCA.get_precision"]], "inverse_transform() (sklearn.decomposition.incrementalpca method)": [[532, "sklearn.decomposition.IncrementalPCA.inverse_transform"]], "partial_fit() (sklearn.decomposition.incrementalpca method)": [[532, "sklearn.decomposition.IncrementalPCA.partial_fit"]], "set_output() (sklearn.decomposition.incrementalpca method)": [[532, "sklearn.decomposition.IncrementalPCA.set_output"]], "set_params() (sklearn.decomposition.incrementalpca method)": [[532, "sklearn.decomposition.IncrementalPCA.set_params"]], "set_partial_fit_request() (sklearn.decomposition.incrementalpca method)": [[532, "sklearn.decomposition.IncrementalPCA.set_partial_fit_request"]], "transform() (sklearn.decomposition.incrementalpca method)": [[532, "sklearn.decomposition.IncrementalPCA.transform"]], "kernelpca (class in sklearn.decomposition)": [[533, "sklearn.decomposition.KernelPCA"]], "fit() (sklearn.decomposition.kernelpca method)": [[533, "sklearn.decomposition.KernelPCA.fit"]], "fit_transform() (sklearn.decomposition.kernelpca method)": [[533, "sklearn.decomposition.KernelPCA.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.kernelpca method)": [[533, "sklearn.decomposition.KernelPCA.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.kernelpca method)": [[533, "sklearn.decomposition.KernelPCA.get_metadata_routing"]], "get_params() (sklearn.decomposition.kernelpca method)": [[533, "sklearn.decomposition.KernelPCA.get_params"]], "inverse_transform() (sklearn.decomposition.kernelpca method)": [[533, "sklearn.decomposition.KernelPCA.inverse_transform"]], "set_output() (sklearn.decomposition.kernelpca method)": [[533, "sklearn.decomposition.KernelPCA.set_output"]], "set_params() (sklearn.decomposition.kernelpca method)": [[533, "sklearn.decomposition.KernelPCA.set_params"]], "transform() (sklearn.decomposition.kernelpca method)": [[533, "sklearn.decomposition.KernelPCA.transform"]], "latentdirichletallocation (class in sklearn.decomposition)": [[534, "sklearn.decomposition.LatentDirichletAllocation"]], "fit() (sklearn.decomposition.latentdirichletallocation method)": [[534, "sklearn.decomposition.LatentDirichletAllocation.fit"]], "fit_transform() (sklearn.decomposition.latentdirichletallocation method)": [[534, "sklearn.decomposition.LatentDirichletAllocation.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.latentdirichletallocation method)": [[534, "sklearn.decomposition.LatentDirichletAllocation.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.latentdirichletallocation method)": [[534, "sklearn.decomposition.LatentDirichletAllocation.get_metadata_routing"]], "get_params() (sklearn.decomposition.latentdirichletallocation method)": [[534, "sklearn.decomposition.LatentDirichletAllocation.get_params"]], "partial_fit() (sklearn.decomposition.latentdirichletallocation method)": [[534, "sklearn.decomposition.LatentDirichletAllocation.partial_fit"]], "perplexity() (sklearn.decomposition.latentdirichletallocation method)": [[534, "sklearn.decomposition.LatentDirichletAllocation.perplexity"]], "score() (sklearn.decomposition.latentdirichletallocation method)": [[534, "sklearn.decomposition.LatentDirichletAllocation.score"]], "set_output() (sklearn.decomposition.latentdirichletallocation method)": [[534, "sklearn.decomposition.LatentDirichletAllocation.set_output"]], "set_params() (sklearn.decomposition.latentdirichletallocation method)": [[534, "sklearn.decomposition.LatentDirichletAllocation.set_params"]], "transform() (sklearn.decomposition.latentdirichletallocation method)": [[534, "sklearn.decomposition.LatentDirichletAllocation.transform"]], "minibatchdictionarylearning (class in sklearn.decomposition)": [[535, "sklearn.decomposition.MiniBatchDictionaryLearning"]], "fit() (sklearn.decomposition.minibatchdictionarylearning method)": [[535, "sklearn.decomposition.MiniBatchDictionaryLearning.fit"]], "fit_transform() (sklearn.decomposition.minibatchdictionarylearning method)": [[535, "sklearn.decomposition.MiniBatchDictionaryLearning.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.minibatchdictionarylearning method)": [[535, "sklearn.decomposition.MiniBatchDictionaryLearning.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.minibatchdictionarylearning method)": [[535, "sklearn.decomposition.MiniBatchDictionaryLearning.get_metadata_routing"]], "get_params() (sklearn.decomposition.minibatchdictionarylearning method)": [[535, "sklearn.decomposition.MiniBatchDictionaryLearning.get_params"]], "partial_fit() (sklearn.decomposition.minibatchdictionarylearning method)": [[535, "sklearn.decomposition.MiniBatchDictionaryLearning.partial_fit"]], "set_output() (sklearn.decomposition.minibatchdictionarylearning method)": [[535, "sklearn.decomposition.MiniBatchDictionaryLearning.set_output"]], "set_params() (sklearn.decomposition.minibatchdictionarylearning method)": [[535, "sklearn.decomposition.MiniBatchDictionaryLearning.set_params"]], "transform() (sklearn.decomposition.minibatchdictionarylearning method)": [[535, "sklearn.decomposition.MiniBatchDictionaryLearning.transform"]], "minibatchnmf (class in sklearn.decomposition)": [[536, "sklearn.decomposition.MiniBatchNMF"]], "fit() (sklearn.decomposition.minibatchnmf method)": [[536, "sklearn.decomposition.MiniBatchNMF.fit"]], "fit_transform() (sklearn.decomposition.minibatchnmf method)": [[536, "sklearn.decomposition.MiniBatchNMF.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.minibatchnmf method)": [[536, "sklearn.decomposition.MiniBatchNMF.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.minibatchnmf method)": [[536, "sklearn.decomposition.MiniBatchNMF.get_metadata_routing"]], "get_params() (sklearn.decomposition.minibatchnmf method)": [[536, "sklearn.decomposition.MiniBatchNMF.get_params"]], "inverse_transform() (sklearn.decomposition.minibatchnmf method)": [[536, "sklearn.decomposition.MiniBatchNMF.inverse_transform"]], "partial_fit() (sklearn.decomposition.minibatchnmf method)": [[536, "sklearn.decomposition.MiniBatchNMF.partial_fit"]], "set_output() (sklearn.decomposition.minibatchnmf method)": [[536, "sklearn.decomposition.MiniBatchNMF.set_output"]], "set_params() (sklearn.decomposition.minibatchnmf method)": [[536, "sklearn.decomposition.MiniBatchNMF.set_params"]], "set_partial_fit_request() (sklearn.decomposition.minibatchnmf method)": [[536, "sklearn.decomposition.MiniBatchNMF.set_partial_fit_request"]], "transform() (sklearn.decomposition.minibatchnmf method)": [[536, "sklearn.decomposition.MiniBatchNMF.transform"]], "minibatchsparsepca (class in sklearn.decomposition)": [[537, "sklearn.decomposition.MiniBatchSparsePCA"]], "fit() (sklearn.decomposition.minibatchsparsepca method)": [[537, "sklearn.decomposition.MiniBatchSparsePCA.fit"]], "fit_transform() (sklearn.decomposition.minibatchsparsepca method)": [[537, "sklearn.decomposition.MiniBatchSparsePCA.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.minibatchsparsepca method)": [[537, "sklearn.decomposition.MiniBatchSparsePCA.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.minibatchsparsepca method)": [[537, "sklearn.decomposition.MiniBatchSparsePCA.get_metadata_routing"]], "get_params() (sklearn.decomposition.minibatchsparsepca method)": [[537, "sklearn.decomposition.MiniBatchSparsePCA.get_params"]], "inverse_transform() (sklearn.decomposition.minibatchsparsepca method)": [[537, "sklearn.decomposition.MiniBatchSparsePCA.inverse_transform"]], "set_output() (sklearn.decomposition.minibatchsparsepca method)": [[537, "sklearn.decomposition.MiniBatchSparsePCA.set_output"]], "set_params() (sklearn.decomposition.minibatchsparsepca method)": [[537, "sklearn.decomposition.MiniBatchSparsePCA.set_params"]], "transform() (sklearn.decomposition.minibatchsparsepca method)": [[537, "sklearn.decomposition.MiniBatchSparsePCA.transform"]], "nmf (class in sklearn.decomposition)": [[538, "sklearn.decomposition.NMF"]], "fit() (sklearn.decomposition.nmf method)": [[538, "sklearn.decomposition.NMF.fit"]], "fit_transform() (sklearn.decomposition.nmf method)": [[538, "sklearn.decomposition.NMF.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.nmf method)": [[538, "sklearn.decomposition.NMF.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.nmf method)": [[538, "sklearn.decomposition.NMF.get_metadata_routing"]], "get_params() (sklearn.decomposition.nmf method)": [[538, "sklearn.decomposition.NMF.get_params"]], "inverse_transform() (sklearn.decomposition.nmf method)": [[538, "sklearn.decomposition.NMF.inverse_transform"]], "set_output() (sklearn.decomposition.nmf method)": [[538, "sklearn.decomposition.NMF.set_output"]], "set_params() (sklearn.decomposition.nmf method)": [[538, "sklearn.decomposition.NMF.set_params"]], "transform() (sklearn.decomposition.nmf method)": [[538, "sklearn.decomposition.NMF.transform"]], "pca (class in sklearn.decomposition)": [[539, "sklearn.decomposition.PCA"]], "fit() (sklearn.decomposition.pca method)": [[539, "sklearn.decomposition.PCA.fit"]], "fit_transform() (sklearn.decomposition.pca method)": [[539, "sklearn.decomposition.PCA.fit_transform"]], "get_covariance() (sklearn.decomposition.pca method)": [[539, "sklearn.decomposition.PCA.get_covariance"]], "get_feature_names_out() (sklearn.decomposition.pca method)": [[539, "sklearn.decomposition.PCA.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.pca method)": [[539, "sklearn.decomposition.PCA.get_metadata_routing"]], "get_params() (sklearn.decomposition.pca method)": [[539, "sklearn.decomposition.PCA.get_params"]], "get_precision() (sklearn.decomposition.pca method)": [[539, "sklearn.decomposition.PCA.get_precision"]], "inverse_transform() (sklearn.decomposition.pca method)": [[539, "sklearn.decomposition.PCA.inverse_transform"]], "score() (sklearn.decomposition.pca method)": [[539, "sklearn.decomposition.PCA.score"]], "score_samples() (sklearn.decomposition.pca method)": [[539, "sklearn.decomposition.PCA.score_samples"]], "set_output() (sklearn.decomposition.pca method)": [[539, "sklearn.decomposition.PCA.set_output"]], "set_params() (sklearn.decomposition.pca method)": [[539, "sklearn.decomposition.PCA.set_params"]], "transform() (sklearn.decomposition.pca method)": [[539, "sklearn.decomposition.PCA.transform"]], "sparsecoder (class in sklearn.decomposition)": [[540, "sklearn.decomposition.SparseCoder"]], "fit() (sklearn.decomposition.sparsecoder method)": [[540, "sklearn.decomposition.SparseCoder.fit"]], "fit_transform() (sklearn.decomposition.sparsecoder method)": [[540, "sklearn.decomposition.SparseCoder.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.sparsecoder method)": [[540, "sklearn.decomposition.SparseCoder.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.sparsecoder method)": [[540, "sklearn.decomposition.SparseCoder.get_metadata_routing"]], "get_params() (sklearn.decomposition.sparsecoder method)": [[540, "sklearn.decomposition.SparseCoder.get_params"]], "n_components_ (sklearn.decomposition.sparsecoder property)": [[540, "sklearn.decomposition.SparseCoder.n_components_"]], "n_features_in_ (sklearn.decomposition.sparsecoder property)": [[540, "sklearn.decomposition.SparseCoder.n_features_in_"]], "set_output() (sklearn.decomposition.sparsecoder method)": [[540, "sklearn.decomposition.SparseCoder.set_output"]], "set_params() (sklearn.decomposition.sparsecoder method)": [[540, "sklearn.decomposition.SparseCoder.set_params"]], "transform() (sklearn.decomposition.sparsecoder method)": [[540, "sklearn.decomposition.SparseCoder.transform"]], "sparsepca (class in sklearn.decomposition)": [[541, "sklearn.decomposition.SparsePCA"]], "fit() (sklearn.decomposition.sparsepca method)": [[541, "sklearn.decomposition.SparsePCA.fit"]], "fit_transform() (sklearn.decomposition.sparsepca method)": [[541, "sklearn.decomposition.SparsePCA.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.sparsepca method)": [[541, "sklearn.decomposition.SparsePCA.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.sparsepca method)": [[541, "sklearn.decomposition.SparsePCA.get_metadata_routing"]], "get_params() (sklearn.decomposition.sparsepca method)": [[541, "sklearn.decomposition.SparsePCA.get_params"]], "inverse_transform() (sklearn.decomposition.sparsepca method)": [[541, "sklearn.decomposition.SparsePCA.inverse_transform"]], "set_output() (sklearn.decomposition.sparsepca method)": [[541, "sklearn.decomposition.SparsePCA.set_output"]], "set_params() (sklearn.decomposition.sparsepca method)": [[541, "sklearn.decomposition.SparsePCA.set_params"]], "transform() (sklearn.decomposition.sparsepca method)": [[541, "sklearn.decomposition.SparsePCA.transform"]], "truncatedsvd (class in sklearn.decomposition)": [[542, "sklearn.decomposition.TruncatedSVD"]], "fit() (sklearn.decomposition.truncatedsvd method)": [[542, "sklearn.decomposition.TruncatedSVD.fit"]], "fit_transform() (sklearn.decomposition.truncatedsvd method)": [[542, "sklearn.decomposition.TruncatedSVD.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.truncatedsvd method)": [[542, "sklearn.decomposition.TruncatedSVD.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.truncatedsvd method)": [[542, "sklearn.decomposition.TruncatedSVD.get_metadata_routing"]], "get_params() (sklearn.decomposition.truncatedsvd method)": [[542, "sklearn.decomposition.TruncatedSVD.get_params"]], "inverse_transform() (sklearn.decomposition.truncatedsvd method)": [[542, "sklearn.decomposition.TruncatedSVD.inverse_transform"]], "set_output() (sklearn.decomposition.truncatedsvd method)": [[542, "sklearn.decomposition.TruncatedSVD.set_output"]], "set_params() (sklearn.decomposition.truncatedsvd method)": [[542, "sklearn.decomposition.TruncatedSVD.set_params"]], "transform() (sklearn.decomposition.truncatedsvd method)": [[542, "sklearn.decomposition.TruncatedSVD.transform"]], "dict_learning() (in module sklearn.decomposition)": [[543, "sklearn.decomposition.dict_learning"]], "dict_learning_online() (in module sklearn.decomposition)": [[544, "sklearn.decomposition.dict_learning_online"]], "non_negative_factorization() (in module sklearn.decomposition)": [[545, "sklearn.decomposition.non_negative_factorization"]], "sparse_encode() (in module sklearn.decomposition)": [[546, "sklearn.decomposition.sparse_encode"]], "lineardiscriminantanalysis (class in sklearn.discriminant_analysis)": [[547, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis"]], "decision_function() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[547, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.decision_function"]], "fit() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[547, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit"]], "fit_transform() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[547, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit_transform"]], "get_feature_names_out() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[547, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_feature_names_out"]], "get_metadata_routing() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[547, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_metadata_routing"]], "get_params() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[547, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_params"]], "predict() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[547, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict"]], "predict_log_proba() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[547, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_log_proba"]], "predict_proba() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[547, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_proba"]], "score() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[547, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.score"]], "set_output() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[547, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_output"]], "set_params() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[547, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_params"]], "set_score_request() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[547, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_score_request"]], "transform() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[547, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.transform"]], "quadraticdiscriminantanalysis (class in sklearn.discriminant_analysis)": [[548, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis"]], "decision_function() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[548, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.decision_function"]], "fit() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[548, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.fit"]], "get_metadata_routing() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[548, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.get_metadata_routing"]], "get_params() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[548, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.get_params"]], "predict() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[548, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict"]], "predict_log_proba() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[548, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_log_proba"]], "predict_proba() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[548, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_proba"]], "score() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[548, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.score"]], "set_params() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[548, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.set_params"]], "set_score_request() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[548, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.set_score_request"]], "dummyclassifier (class in sklearn.dummy)": [[549, "sklearn.dummy.DummyClassifier"]], "fit() (sklearn.dummy.dummyclassifier method)": [[549, "sklearn.dummy.DummyClassifier.fit"]], "get_metadata_routing() (sklearn.dummy.dummyclassifier method)": [[549, "sklearn.dummy.DummyClassifier.get_metadata_routing"]], "get_params() (sklearn.dummy.dummyclassifier method)": [[549, "sklearn.dummy.DummyClassifier.get_params"]], "predict() (sklearn.dummy.dummyclassifier method)": [[549, "sklearn.dummy.DummyClassifier.predict"]], "predict_log_proba() (sklearn.dummy.dummyclassifier method)": [[549, "sklearn.dummy.DummyClassifier.predict_log_proba"]], "predict_proba() (sklearn.dummy.dummyclassifier method)": [[549, "sklearn.dummy.DummyClassifier.predict_proba"]], "score() (sklearn.dummy.dummyclassifier method)": [[549, "sklearn.dummy.DummyClassifier.score"]], "set_fit_request() (sklearn.dummy.dummyclassifier method)": [[549, "sklearn.dummy.DummyClassifier.set_fit_request"]], "set_params() (sklearn.dummy.dummyclassifier method)": [[549, "sklearn.dummy.DummyClassifier.set_params"]], "set_score_request() (sklearn.dummy.dummyclassifier method)": [[549, "sklearn.dummy.DummyClassifier.set_score_request"]], "dummyregressor (class in sklearn.dummy)": [[550, "sklearn.dummy.DummyRegressor"]], "fit() (sklearn.dummy.dummyregressor method)": [[550, "sklearn.dummy.DummyRegressor.fit"]], "get_metadata_routing() (sklearn.dummy.dummyregressor method)": [[550, "sklearn.dummy.DummyRegressor.get_metadata_routing"]], "get_params() (sklearn.dummy.dummyregressor method)": [[550, "sklearn.dummy.DummyRegressor.get_params"]], "predict() (sklearn.dummy.dummyregressor method)": [[550, "sklearn.dummy.DummyRegressor.predict"]], "score() (sklearn.dummy.dummyregressor method)": [[550, "sklearn.dummy.DummyRegressor.score"]], "set_fit_request() (sklearn.dummy.dummyregressor method)": [[550, "sklearn.dummy.DummyRegressor.set_fit_request"]], "set_params() (sklearn.dummy.dummyregressor method)": [[550, "sklearn.dummy.DummyRegressor.set_params"]], "set_predict_request() (sklearn.dummy.dummyregressor method)": [[550, "sklearn.dummy.DummyRegressor.set_predict_request"]], "set_score_request() (sklearn.dummy.dummyregressor method)": [[550, "sklearn.dummy.DummyRegressor.set_score_request"]], "adaboostclassifier (class in sklearn.ensemble)": [[551, "sklearn.ensemble.AdaBoostClassifier"]], "decision_function() (sklearn.ensemble.adaboostclassifier method)": [[551, "sklearn.ensemble.AdaBoostClassifier.decision_function"]], "feature_importances_ (sklearn.ensemble.adaboostclassifier property)": [[551, "sklearn.ensemble.AdaBoostClassifier.feature_importances_"]], "fit() (sklearn.ensemble.adaboostclassifier method)": [[551, "sklearn.ensemble.AdaBoostClassifier.fit"]], "get_metadata_routing() (sklearn.ensemble.adaboostclassifier method)": [[551, "sklearn.ensemble.AdaBoostClassifier.get_metadata_routing"]], "get_params() (sklearn.ensemble.adaboostclassifier method)": [[551, "sklearn.ensemble.AdaBoostClassifier.get_params"]], "predict() (sklearn.ensemble.adaboostclassifier method)": [[551, "sklearn.ensemble.AdaBoostClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.adaboostclassifier method)": [[551, "sklearn.ensemble.AdaBoostClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.adaboostclassifier method)": [[551, "sklearn.ensemble.AdaBoostClassifier.predict_proba"]], "score() (sklearn.ensemble.adaboostclassifier method)": [[551, "sklearn.ensemble.AdaBoostClassifier.score"]], "set_fit_request() (sklearn.ensemble.adaboostclassifier method)": [[551, "sklearn.ensemble.AdaBoostClassifier.set_fit_request"]], "set_params() (sklearn.ensemble.adaboostclassifier method)": [[551, "sklearn.ensemble.AdaBoostClassifier.set_params"]], "set_score_request() (sklearn.ensemble.adaboostclassifier method)": [[551, "sklearn.ensemble.AdaBoostClassifier.set_score_request"]], "staged_decision_function() (sklearn.ensemble.adaboostclassifier method)": [[551, "sklearn.ensemble.AdaBoostClassifier.staged_decision_function"]], "staged_predict() (sklearn.ensemble.adaboostclassifier method)": [[551, "sklearn.ensemble.AdaBoostClassifier.staged_predict"]], "staged_predict_proba() (sklearn.ensemble.adaboostclassifier method)": [[551, "sklearn.ensemble.AdaBoostClassifier.staged_predict_proba"]], "staged_score() (sklearn.ensemble.adaboostclassifier method)": [[551, "sklearn.ensemble.AdaBoostClassifier.staged_score"]], "adaboostregressor (class in sklearn.ensemble)": [[552, "sklearn.ensemble.AdaBoostRegressor"]], "feature_importances_ (sklearn.ensemble.adaboostregressor property)": [[552, "sklearn.ensemble.AdaBoostRegressor.feature_importances_"]], "fit() (sklearn.ensemble.adaboostregressor method)": [[552, "sklearn.ensemble.AdaBoostRegressor.fit"]], "get_metadata_routing() (sklearn.ensemble.adaboostregressor method)": [[552, "sklearn.ensemble.AdaBoostRegressor.get_metadata_routing"]], "get_params() (sklearn.ensemble.adaboostregressor method)": [[552, "sklearn.ensemble.AdaBoostRegressor.get_params"]], "predict() (sklearn.ensemble.adaboostregressor method)": [[552, "sklearn.ensemble.AdaBoostRegressor.predict"]], "score() (sklearn.ensemble.adaboostregressor method)": [[552, "sklearn.ensemble.AdaBoostRegressor.score"]], "set_fit_request() (sklearn.ensemble.adaboostregressor method)": [[552, "sklearn.ensemble.AdaBoostRegressor.set_fit_request"]], "set_params() (sklearn.ensemble.adaboostregressor method)": [[552, "sklearn.ensemble.AdaBoostRegressor.set_params"]], "set_score_request() (sklearn.ensemble.adaboostregressor method)": [[552, "sklearn.ensemble.AdaBoostRegressor.set_score_request"]], "staged_predict() (sklearn.ensemble.adaboostregressor method)": [[552, "sklearn.ensemble.AdaBoostRegressor.staged_predict"]], "staged_score() (sklearn.ensemble.adaboostregressor method)": [[552, "sklearn.ensemble.AdaBoostRegressor.staged_score"]], "baggingclassifier (class in sklearn.ensemble)": [[553, "sklearn.ensemble.BaggingClassifier"]], "decision_function() (sklearn.ensemble.baggingclassifier method)": [[553, "sklearn.ensemble.BaggingClassifier.decision_function"]], "estimators_samples_ (sklearn.ensemble.baggingclassifier property)": [[553, "sklearn.ensemble.BaggingClassifier.estimators_samples_"]], "fit() (sklearn.ensemble.baggingclassifier method)": [[553, "sklearn.ensemble.BaggingClassifier.fit"]], "get_metadata_routing() (sklearn.ensemble.baggingclassifier method)": [[553, "sklearn.ensemble.BaggingClassifier.get_metadata_routing"]], "get_params() (sklearn.ensemble.baggingclassifier method)": [[553, "sklearn.ensemble.BaggingClassifier.get_params"]], "predict() (sklearn.ensemble.baggingclassifier method)": [[553, "sklearn.ensemble.BaggingClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.baggingclassifier method)": [[553, "sklearn.ensemble.BaggingClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.baggingclassifier method)": [[553, "sklearn.ensemble.BaggingClassifier.predict_proba"]], "score() (sklearn.ensemble.baggingclassifier method)": [[553, "sklearn.ensemble.BaggingClassifier.score"]], "set_fit_request() (sklearn.ensemble.baggingclassifier method)": [[553, "sklearn.ensemble.BaggingClassifier.set_fit_request"]], "set_params() (sklearn.ensemble.baggingclassifier method)": [[553, "sklearn.ensemble.BaggingClassifier.set_params"]], "set_score_request() (sklearn.ensemble.baggingclassifier method)": [[553, "sklearn.ensemble.BaggingClassifier.set_score_request"]], "baggingregressor (class in sklearn.ensemble)": [[554, "sklearn.ensemble.BaggingRegressor"]], "estimators_samples_ (sklearn.ensemble.baggingregressor property)": [[554, "sklearn.ensemble.BaggingRegressor.estimators_samples_"]], "fit() (sklearn.ensemble.baggingregressor method)": [[554, "sklearn.ensemble.BaggingRegressor.fit"]], "get_metadata_routing() (sklearn.ensemble.baggingregressor method)": [[554, "sklearn.ensemble.BaggingRegressor.get_metadata_routing"]], "get_params() (sklearn.ensemble.baggingregressor method)": [[554, "sklearn.ensemble.BaggingRegressor.get_params"]], "predict() (sklearn.ensemble.baggingregressor method)": [[554, "sklearn.ensemble.BaggingRegressor.predict"]], "score() (sklearn.ensemble.baggingregressor method)": [[554, "sklearn.ensemble.BaggingRegressor.score"]], "set_fit_request() (sklearn.ensemble.baggingregressor method)": [[554, "sklearn.ensemble.BaggingRegressor.set_fit_request"]], "set_params() (sklearn.ensemble.baggingregressor method)": [[554, "sklearn.ensemble.BaggingRegressor.set_params"]], "set_score_request() (sklearn.ensemble.baggingregressor method)": [[554, "sklearn.ensemble.BaggingRegressor.set_score_request"]], "extratreesclassifier (class in sklearn.ensemble)": [[555, "sklearn.ensemble.ExtraTreesClassifier"]], "apply() (sklearn.ensemble.extratreesclassifier method)": [[555, "sklearn.ensemble.ExtraTreesClassifier.apply"]], "decision_path() (sklearn.ensemble.extratreesclassifier method)": [[555, "sklearn.ensemble.ExtraTreesClassifier.decision_path"]], "estimators_samples_ (sklearn.ensemble.extratreesclassifier property)": [[555, "sklearn.ensemble.ExtraTreesClassifier.estimators_samples_"]], "feature_importances_ (sklearn.ensemble.extratreesclassifier property)": [[555, "sklearn.ensemble.ExtraTreesClassifier.feature_importances_"]], "fit() (sklearn.ensemble.extratreesclassifier method)": [[555, "sklearn.ensemble.ExtraTreesClassifier.fit"]], "get_metadata_routing() (sklearn.ensemble.extratreesclassifier method)": [[555, "sklearn.ensemble.ExtraTreesClassifier.get_metadata_routing"]], "get_params() (sklearn.ensemble.extratreesclassifier method)": [[555, "sklearn.ensemble.ExtraTreesClassifier.get_params"]], "predict() (sklearn.ensemble.extratreesclassifier method)": [[555, "sklearn.ensemble.ExtraTreesClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.extratreesclassifier method)": [[555, "sklearn.ensemble.ExtraTreesClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.extratreesclassifier method)": [[555, "sklearn.ensemble.ExtraTreesClassifier.predict_proba"]], "score() (sklearn.ensemble.extratreesclassifier method)": [[555, "sklearn.ensemble.ExtraTreesClassifier.score"]], "set_fit_request() (sklearn.ensemble.extratreesclassifier method)": [[555, "sklearn.ensemble.ExtraTreesClassifier.set_fit_request"]], "set_params() (sklearn.ensemble.extratreesclassifier method)": [[555, "sklearn.ensemble.ExtraTreesClassifier.set_params"]], "set_score_request() (sklearn.ensemble.extratreesclassifier method)": [[555, "sklearn.ensemble.ExtraTreesClassifier.set_score_request"]], "extratreesregressor (class in sklearn.ensemble)": [[556, "sklearn.ensemble.ExtraTreesRegressor"]], "apply() (sklearn.ensemble.extratreesregressor method)": [[556, "sklearn.ensemble.ExtraTreesRegressor.apply"]], "decision_path() (sklearn.ensemble.extratreesregressor method)": [[556, "sklearn.ensemble.ExtraTreesRegressor.decision_path"]], "estimators_samples_ (sklearn.ensemble.extratreesregressor property)": [[556, "sklearn.ensemble.ExtraTreesRegressor.estimators_samples_"]], "feature_importances_ (sklearn.ensemble.extratreesregressor property)": [[556, "sklearn.ensemble.ExtraTreesRegressor.feature_importances_"]], "fit() (sklearn.ensemble.extratreesregressor method)": [[556, "sklearn.ensemble.ExtraTreesRegressor.fit"]], "get_metadata_routing() (sklearn.ensemble.extratreesregressor method)": [[556, "sklearn.ensemble.ExtraTreesRegressor.get_metadata_routing"]], "get_params() (sklearn.ensemble.extratreesregressor method)": [[556, "sklearn.ensemble.ExtraTreesRegressor.get_params"]], "predict() (sklearn.ensemble.extratreesregressor method)": [[556, "sklearn.ensemble.ExtraTreesRegressor.predict"]], "score() (sklearn.ensemble.extratreesregressor method)": [[556, "sklearn.ensemble.ExtraTreesRegressor.score"]], "set_fit_request() (sklearn.ensemble.extratreesregressor method)": [[556, "sklearn.ensemble.ExtraTreesRegressor.set_fit_request"]], "set_params() (sklearn.ensemble.extratreesregressor method)": [[556, "sklearn.ensemble.ExtraTreesRegressor.set_params"]], "set_score_request() (sklearn.ensemble.extratreesregressor method)": [[556, "sklearn.ensemble.ExtraTreesRegressor.set_score_request"]], "gradientboostingclassifier (class in sklearn.ensemble)": [[557, "sklearn.ensemble.GradientBoostingClassifier"]], "apply() (sklearn.ensemble.gradientboostingclassifier method)": [[557, "sklearn.ensemble.GradientBoostingClassifier.apply"]], "decision_function() (sklearn.ensemble.gradientboostingclassifier method)": [[557, "sklearn.ensemble.GradientBoostingClassifier.decision_function"]], "feature_importances_ (sklearn.ensemble.gradientboostingclassifier property)": [[557, "sklearn.ensemble.GradientBoostingClassifier.feature_importances_"]], "fit() (sklearn.ensemble.gradientboostingclassifier method)": [[557, "sklearn.ensemble.GradientBoostingClassifier.fit"]], "get_metadata_routing() (sklearn.ensemble.gradientboostingclassifier method)": [[557, "sklearn.ensemble.GradientBoostingClassifier.get_metadata_routing"]], "get_params() (sklearn.ensemble.gradientboostingclassifier method)": [[557, "sklearn.ensemble.GradientBoostingClassifier.get_params"]], "predict() (sklearn.ensemble.gradientboostingclassifier method)": [[557, "sklearn.ensemble.GradientBoostingClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[557, "sklearn.ensemble.GradientBoostingClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[557, "sklearn.ensemble.GradientBoostingClassifier.predict_proba"]], "score() (sklearn.ensemble.gradientboostingclassifier method)": [[557, "sklearn.ensemble.GradientBoostingClassifier.score"]], "set_fit_request() (sklearn.ensemble.gradientboostingclassifier method)": [[557, "sklearn.ensemble.GradientBoostingClassifier.set_fit_request"]], "set_params() (sklearn.ensemble.gradientboostingclassifier method)": [[557, "sklearn.ensemble.GradientBoostingClassifier.set_params"]], "set_score_request() (sklearn.ensemble.gradientboostingclassifier method)": [[557, "sklearn.ensemble.GradientBoostingClassifier.set_score_request"]], "staged_decision_function() (sklearn.ensemble.gradientboostingclassifier method)": [[557, "sklearn.ensemble.GradientBoostingClassifier.staged_decision_function"]], "staged_predict() (sklearn.ensemble.gradientboostingclassifier method)": [[557, "sklearn.ensemble.GradientBoostingClassifier.staged_predict"]], "staged_predict_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[557, "sklearn.ensemble.GradientBoostingClassifier.staged_predict_proba"]], "gradientboostingregressor (class in sklearn.ensemble)": [[558, "sklearn.ensemble.GradientBoostingRegressor"]], "apply() (sklearn.ensemble.gradientboostingregressor method)": [[558, "sklearn.ensemble.GradientBoostingRegressor.apply"]], "feature_importances_ (sklearn.ensemble.gradientboostingregressor property)": [[558, "sklearn.ensemble.GradientBoostingRegressor.feature_importances_"]], "fit() (sklearn.ensemble.gradientboostingregressor method)": [[558, "sklearn.ensemble.GradientBoostingRegressor.fit"]], "get_metadata_routing() (sklearn.ensemble.gradientboostingregressor method)": [[558, "sklearn.ensemble.GradientBoostingRegressor.get_metadata_routing"]], "get_params() (sklearn.ensemble.gradientboostingregressor method)": [[558, "sklearn.ensemble.GradientBoostingRegressor.get_params"]], "predict() (sklearn.ensemble.gradientboostingregressor method)": [[558, "sklearn.ensemble.GradientBoostingRegressor.predict"]], "score() (sklearn.ensemble.gradientboostingregressor method)": [[558, "sklearn.ensemble.GradientBoostingRegressor.score"]], "set_fit_request() (sklearn.ensemble.gradientboostingregressor method)": [[558, "sklearn.ensemble.GradientBoostingRegressor.set_fit_request"]], "set_params() (sklearn.ensemble.gradientboostingregressor method)": [[558, "sklearn.ensemble.GradientBoostingRegressor.set_params"]], "set_score_request() (sklearn.ensemble.gradientboostingregressor method)": [[558, "sklearn.ensemble.GradientBoostingRegressor.set_score_request"]], "staged_predict() (sklearn.ensemble.gradientboostingregressor method)": [[558, "sklearn.ensemble.GradientBoostingRegressor.staged_predict"]], "histgradientboostingclassifier (class in sklearn.ensemble)": [[559, "sklearn.ensemble.HistGradientBoostingClassifier"]], "decision_function() (sklearn.ensemble.histgradientboostingclassifier method)": [[559, "sklearn.ensemble.HistGradientBoostingClassifier.decision_function"]], "fit() (sklearn.ensemble.histgradientboostingclassifier method)": [[559, "sklearn.ensemble.HistGradientBoostingClassifier.fit"]], "get_metadata_routing() (sklearn.ensemble.histgradientboostingclassifier method)": [[559, "sklearn.ensemble.HistGradientBoostingClassifier.get_metadata_routing"]], "get_params() (sklearn.ensemble.histgradientboostingclassifier method)": [[559, "sklearn.ensemble.HistGradientBoostingClassifier.get_params"]], "n_iter_ (sklearn.ensemble.histgradientboostingclassifier property)": [[559, "sklearn.ensemble.HistGradientBoostingClassifier.n_iter_"]], "predict() (sklearn.ensemble.histgradientboostingclassifier method)": [[559, "sklearn.ensemble.HistGradientBoostingClassifier.predict"]], "predict_proba() (sklearn.ensemble.histgradientboostingclassifier method)": [[559, "sklearn.ensemble.HistGradientBoostingClassifier.predict_proba"]], "score() (sklearn.ensemble.histgradientboostingclassifier method)": [[559, "sklearn.ensemble.HistGradientBoostingClassifier.score"]], "set_fit_request() (sklearn.ensemble.histgradientboostingclassifier method)": [[559, "sklearn.ensemble.HistGradientBoostingClassifier.set_fit_request"]], "set_params() (sklearn.ensemble.histgradientboostingclassifier method)": [[559, "sklearn.ensemble.HistGradientBoostingClassifier.set_params"]], "set_score_request() (sklearn.ensemble.histgradientboostingclassifier method)": [[559, "sklearn.ensemble.HistGradientBoostingClassifier.set_score_request"]], "staged_decision_function() (sklearn.ensemble.histgradientboostingclassifier method)": [[559, "sklearn.ensemble.HistGradientBoostingClassifier.staged_decision_function"]], "staged_predict() (sklearn.ensemble.histgradientboostingclassifier method)": [[559, "sklearn.ensemble.HistGradientBoostingClassifier.staged_predict"]], "staged_predict_proba() (sklearn.ensemble.histgradientboostingclassifier method)": [[559, "sklearn.ensemble.HistGradientBoostingClassifier.staged_predict_proba"]], "histgradientboostingregressor (class in sklearn.ensemble)": [[560, "sklearn.ensemble.HistGradientBoostingRegressor"]], "fit() (sklearn.ensemble.histgradientboostingregressor method)": [[560, "sklearn.ensemble.HistGradientBoostingRegressor.fit"]], "get_metadata_routing() (sklearn.ensemble.histgradientboostingregressor method)": [[560, "sklearn.ensemble.HistGradientBoostingRegressor.get_metadata_routing"]], "get_params() (sklearn.ensemble.histgradientboostingregressor method)": [[560, "sklearn.ensemble.HistGradientBoostingRegressor.get_params"]], "n_iter_ (sklearn.ensemble.histgradientboostingregressor property)": [[560, "sklearn.ensemble.HistGradientBoostingRegressor.n_iter_"]], "predict() (sklearn.ensemble.histgradientboostingregressor method)": [[560, "sklearn.ensemble.HistGradientBoostingRegressor.predict"]], "score() (sklearn.ensemble.histgradientboostingregressor method)": [[560, "sklearn.ensemble.HistGradientBoostingRegressor.score"]], "set_fit_request() (sklearn.ensemble.histgradientboostingregressor method)": [[560, "sklearn.ensemble.HistGradientBoostingRegressor.set_fit_request"]], "set_params() (sklearn.ensemble.histgradientboostingregressor method)": [[560, "sklearn.ensemble.HistGradientBoostingRegressor.set_params"]], "set_score_request() (sklearn.ensemble.histgradientboostingregressor method)": [[560, "sklearn.ensemble.HistGradientBoostingRegressor.set_score_request"]], "staged_predict() (sklearn.ensemble.histgradientboostingregressor method)": [[560, "sklearn.ensemble.HistGradientBoostingRegressor.staged_predict"]], "isolationforest (class in sklearn.ensemble)": [[561, "sklearn.ensemble.IsolationForest"]], "decision_function() (sklearn.ensemble.isolationforest method)": [[561, "sklearn.ensemble.IsolationForest.decision_function"]], "estimators_samples_ (sklearn.ensemble.isolationforest property)": [[561, "sklearn.ensemble.IsolationForest.estimators_samples_"]], "fit() (sklearn.ensemble.isolationforest method)": [[561, "sklearn.ensemble.IsolationForest.fit"]], "fit_predict() (sklearn.ensemble.isolationforest method)": [[561, "sklearn.ensemble.IsolationForest.fit_predict"]], "get_metadata_routing() (sklearn.ensemble.isolationforest method)": [[561, "sklearn.ensemble.IsolationForest.get_metadata_routing"]], "get_params() (sklearn.ensemble.isolationforest method)": [[561, "sklearn.ensemble.IsolationForest.get_params"]], "predict() (sklearn.ensemble.isolationforest method)": [[561, "sklearn.ensemble.IsolationForest.predict"]], "score_samples() (sklearn.ensemble.isolationforest method)": [[561, "sklearn.ensemble.IsolationForest.score_samples"]], "set_fit_request() (sklearn.ensemble.isolationforest method)": [[561, "sklearn.ensemble.IsolationForest.set_fit_request"]], "set_params() (sklearn.ensemble.isolationforest method)": [[561, "sklearn.ensemble.IsolationForest.set_params"]], "randomforestclassifier (class in sklearn.ensemble)": [[562, "sklearn.ensemble.RandomForestClassifier"]], "apply() (sklearn.ensemble.randomforestclassifier method)": [[562, "sklearn.ensemble.RandomForestClassifier.apply"]], "decision_path() (sklearn.ensemble.randomforestclassifier method)": [[562, "sklearn.ensemble.RandomForestClassifier.decision_path"]], "estimators_samples_ (sklearn.ensemble.randomforestclassifier property)": [[562, "sklearn.ensemble.RandomForestClassifier.estimators_samples_"]], "feature_importances_ (sklearn.ensemble.randomforestclassifier property)": [[562, "sklearn.ensemble.RandomForestClassifier.feature_importances_"]], "fit() (sklearn.ensemble.randomforestclassifier method)": [[562, "sklearn.ensemble.RandomForestClassifier.fit"]], "get_metadata_routing() (sklearn.ensemble.randomforestclassifier method)": [[562, "sklearn.ensemble.RandomForestClassifier.get_metadata_routing"]], "get_params() (sklearn.ensemble.randomforestclassifier method)": [[562, "sklearn.ensemble.RandomForestClassifier.get_params"]], "predict() (sklearn.ensemble.randomforestclassifier method)": [[562, "sklearn.ensemble.RandomForestClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.randomforestclassifier method)": [[562, "sklearn.ensemble.RandomForestClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.randomforestclassifier method)": [[562, "sklearn.ensemble.RandomForestClassifier.predict_proba"]], "score() (sklearn.ensemble.randomforestclassifier method)": [[562, "sklearn.ensemble.RandomForestClassifier.score"]], "set_fit_request() (sklearn.ensemble.randomforestclassifier method)": [[562, "sklearn.ensemble.RandomForestClassifier.set_fit_request"]], "set_params() (sklearn.ensemble.randomforestclassifier method)": [[562, "sklearn.ensemble.RandomForestClassifier.set_params"]], "set_score_request() (sklearn.ensemble.randomforestclassifier method)": [[562, "sklearn.ensemble.RandomForestClassifier.set_score_request"]], "randomforestregressor (class in sklearn.ensemble)": [[563, "sklearn.ensemble.RandomForestRegressor"]], "apply() (sklearn.ensemble.randomforestregressor method)": [[563, "sklearn.ensemble.RandomForestRegressor.apply"]], "decision_path() (sklearn.ensemble.randomforestregressor method)": [[563, "sklearn.ensemble.RandomForestRegressor.decision_path"]], "estimators_samples_ (sklearn.ensemble.randomforestregressor property)": [[563, "sklearn.ensemble.RandomForestRegressor.estimators_samples_"]], "feature_importances_ (sklearn.ensemble.randomforestregressor property)": [[563, "sklearn.ensemble.RandomForestRegressor.feature_importances_"]], "fit() (sklearn.ensemble.randomforestregressor method)": [[563, "sklearn.ensemble.RandomForestRegressor.fit"]], "get_metadata_routing() (sklearn.ensemble.randomforestregressor method)": [[563, "sklearn.ensemble.RandomForestRegressor.get_metadata_routing"]], "get_params() (sklearn.ensemble.randomforestregressor method)": [[563, "sklearn.ensemble.RandomForestRegressor.get_params"]], "predict() (sklearn.ensemble.randomforestregressor method)": [[563, "sklearn.ensemble.RandomForestRegressor.predict"]], "score() (sklearn.ensemble.randomforestregressor method)": [[563, "sklearn.ensemble.RandomForestRegressor.score"]], "set_fit_request() (sklearn.ensemble.randomforestregressor method)": [[563, "sklearn.ensemble.RandomForestRegressor.set_fit_request"]], "set_params() (sklearn.ensemble.randomforestregressor method)": [[563, "sklearn.ensemble.RandomForestRegressor.set_params"]], "set_score_request() (sklearn.ensemble.randomforestregressor method)": [[563, "sklearn.ensemble.RandomForestRegressor.set_score_request"]], "randomtreesembedding (class in sklearn.ensemble)": [[564, "sklearn.ensemble.RandomTreesEmbedding"]], "apply() (sklearn.ensemble.randomtreesembedding method)": [[564, "sklearn.ensemble.RandomTreesEmbedding.apply"]], "decision_path() (sklearn.ensemble.randomtreesembedding method)": [[564, "sklearn.ensemble.RandomTreesEmbedding.decision_path"]], "estimators_samples_ (sklearn.ensemble.randomtreesembedding property)": [[564, "sklearn.ensemble.RandomTreesEmbedding.estimators_samples_"]], "feature_importances_ (sklearn.ensemble.randomtreesembedding property)": [[564, "sklearn.ensemble.RandomTreesEmbedding.feature_importances_"]], "fit() (sklearn.ensemble.randomtreesembedding method)": [[564, "sklearn.ensemble.RandomTreesEmbedding.fit"]], "fit_transform() (sklearn.ensemble.randomtreesembedding method)": [[564, "sklearn.ensemble.RandomTreesEmbedding.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.randomtreesembedding method)": [[564, "sklearn.ensemble.RandomTreesEmbedding.get_feature_names_out"]], "get_metadata_routing() (sklearn.ensemble.randomtreesembedding method)": [[564, "sklearn.ensemble.RandomTreesEmbedding.get_metadata_routing"]], "get_params() (sklearn.ensemble.randomtreesembedding method)": [[564, "sklearn.ensemble.RandomTreesEmbedding.get_params"]], "set_fit_request() (sklearn.ensemble.randomtreesembedding method)": [[564, "sklearn.ensemble.RandomTreesEmbedding.set_fit_request"]], "set_output() (sklearn.ensemble.randomtreesembedding method)": [[564, "sklearn.ensemble.RandomTreesEmbedding.set_output"]], "set_params() (sklearn.ensemble.randomtreesembedding method)": [[564, "sklearn.ensemble.RandomTreesEmbedding.set_params"]], "transform() (sklearn.ensemble.randomtreesembedding method)": [[564, "sklearn.ensemble.RandomTreesEmbedding.transform"]], "stackingclassifier (class in sklearn.ensemble)": [[565, "sklearn.ensemble.StackingClassifier"]], "decision_function() (sklearn.ensemble.stackingclassifier method)": [[565, "sklearn.ensemble.StackingClassifier.decision_function"]], "fit() (sklearn.ensemble.stackingclassifier method)": [[565, "sklearn.ensemble.StackingClassifier.fit"]], "fit_transform() (sklearn.ensemble.stackingclassifier method)": [[565, "sklearn.ensemble.StackingClassifier.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.stackingclassifier method)": [[565, "sklearn.ensemble.StackingClassifier.get_feature_names_out"]], "get_metadata_routing() (sklearn.ensemble.stackingclassifier method)": [[565, "sklearn.ensemble.StackingClassifier.get_metadata_routing"]], "get_params() (sklearn.ensemble.stackingclassifier method)": [[565, "sklearn.ensemble.StackingClassifier.get_params"]], "n_features_in_ (sklearn.ensemble.stackingclassifier property)": [[565, "sklearn.ensemble.StackingClassifier.n_features_in_"]], "named_estimators (sklearn.ensemble.stackingclassifier property)": [[565, "sklearn.ensemble.StackingClassifier.named_estimators"]], "predict() (sklearn.ensemble.stackingclassifier method)": [[565, "sklearn.ensemble.StackingClassifier.predict"]], "predict_proba() (sklearn.ensemble.stackingclassifier method)": [[565, "sklearn.ensemble.StackingClassifier.predict_proba"]], "score() (sklearn.ensemble.stackingclassifier method)": [[565, "sklearn.ensemble.StackingClassifier.score"]], "set_fit_request() (sklearn.ensemble.stackingclassifier method)": [[565, "sklearn.ensemble.StackingClassifier.set_fit_request"]], "set_output() (sklearn.ensemble.stackingclassifier method)": [[565, "sklearn.ensemble.StackingClassifier.set_output"]], "set_params() (sklearn.ensemble.stackingclassifier method)": [[565, "sklearn.ensemble.StackingClassifier.set_params"]], "set_score_request() (sklearn.ensemble.stackingclassifier method)": [[565, "sklearn.ensemble.StackingClassifier.set_score_request"]], "transform() (sklearn.ensemble.stackingclassifier method)": [[565, "sklearn.ensemble.StackingClassifier.transform"]], "stackingregressor (class in sklearn.ensemble)": [[566, "sklearn.ensemble.StackingRegressor"]], "fit() (sklearn.ensemble.stackingregressor method)": [[566, "sklearn.ensemble.StackingRegressor.fit"]], "fit_transform() (sklearn.ensemble.stackingregressor method)": [[566, "sklearn.ensemble.StackingRegressor.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.stackingregressor method)": [[566, "sklearn.ensemble.StackingRegressor.get_feature_names_out"]], "get_metadata_routing() (sklearn.ensemble.stackingregressor method)": [[566, "sklearn.ensemble.StackingRegressor.get_metadata_routing"]], "get_params() (sklearn.ensemble.stackingregressor method)": [[566, "sklearn.ensemble.StackingRegressor.get_params"]], "n_features_in_ (sklearn.ensemble.stackingregressor property)": [[566, "sklearn.ensemble.StackingRegressor.n_features_in_"]], "named_estimators (sklearn.ensemble.stackingregressor property)": [[566, "sklearn.ensemble.StackingRegressor.named_estimators"]], "predict() (sklearn.ensemble.stackingregressor method)": [[566, "sklearn.ensemble.StackingRegressor.predict"]], "score() (sklearn.ensemble.stackingregressor method)": [[566, "sklearn.ensemble.StackingRegressor.score"]], "set_fit_request() (sklearn.ensemble.stackingregressor method)": [[566, "sklearn.ensemble.StackingRegressor.set_fit_request"]], "set_output() (sklearn.ensemble.stackingregressor method)": [[566, "sklearn.ensemble.StackingRegressor.set_output"]], "set_params() (sklearn.ensemble.stackingregressor method)": [[566, "sklearn.ensemble.StackingRegressor.set_params"]], "set_score_request() (sklearn.ensemble.stackingregressor method)": [[566, "sklearn.ensemble.StackingRegressor.set_score_request"]], "transform() (sklearn.ensemble.stackingregressor method)": [[566, "sklearn.ensemble.StackingRegressor.transform"]], "votingclassifier (class in sklearn.ensemble)": [[567, "sklearn.ensemble.VotingClassifier"]], "fit() (sklearn.ensemble.votingclassifier method)": [[567, "sklearn.ensemble.VotingClassifier.fit"]], "fit_transform() (sklearn.ensemble.votingclassifier method)": [[567, "sklearn.ensemble.VotingClassifier.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.votingclassifier method)": [[567, "sklearn.ensemble.VotingClassifier.get_feature_names_out"]], "get_metadata_routing() (sklearn.ensemble.votingclassifier method)": [[567, "sklearn.ensemble.VotingClassifier.get_metadata_routing"]], "get_params() (sklearn.ensemble.votingclassifier method)": [[567, "sklearn.ensemble.VotingClassifier.get_params"]], "n_features_in_ (sklearn.ensemble.votingclassifier property)": [[567, "sklearn.ensemble.VotingClassifier.n_features_in_"]], "named_estimators (sklearn.ensemble.votingclassifier property)": [[567, "sklearn.ensemble.VotingClassifier.named_estimators"]], "predict() (sklearn.ensemble.votingclassifier method)": [[567, "sklearn.ensemble.VotingClassifier.predict"]], "predict_proba() (sklearn.ensemble.votingclassifier method)": [[567, "sklearn.ensemble.VotingClassifier.predict_proba"]], "score() (sklearn.ensemble.votingclassifier method)": [[567, "sklearn.ensemble.VotingClassifier.score"]], "set_fit_request() (sklearn.ensemble.votingclassifier method)": [[567, "sklearn.ensemble.VotingClassifier.set_fit_request"]], "set_output() (sklearn.ensemble.votingclassifier method)": [[567, "sklearn.ensemble.VotingClassifier.set_output"]], "set_params() (sklearn.ensemble.votingclassifier method)": [[567, "sklearn.ensemble.VotingClassifier.set_params"]], "set_score_request() (sklearn.ensemble.votingclassifier method)": [[567, "sklearn.ensemble.VotingClassifier.set_score_request"]], "transform() (sklearn.ensemble.votingclassifier method)": [[567, "sklearn.ensemble.VotingClassifier.transform"]], "votingregressor (class in sklearn.ensemble)": [[568, "sklearn.ensemble.VotingRegressor"]], "fit() (sklearn.ensemble.votingregressor method)": [[568, "sklearn.ensemble.VotingRegressor.fit"]], "fit_transform() (sklearn.ensemble.votingregressor method)": [[568, "sklearn.ensemble.VotingRegressor.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.votingregressor method)": [[568, "sklearn.ensemble.VotingRegressor.get_feature_names_out"]], "get_metadata_routing() (sklearn.ensemble.votingregressor method)": [[568, "sklearn.ensemble.VotingRegressor.get_metadata_routing"]], "get_params() (sklearn.ensemble.votingregressor method)": [[568, "sklearn.ensemble.VotingRegressor.get_params"]], "n_features_in_ (sklearn.ensemble.votingregressor property)": [[568, "sklearn.ensemble.VotingRegressor.n_features_in_"]], "named_estimators (sklearn.ensemble.votingregressor property)": [[568, "sklearn.ensemble.VotingRegressor.named_estimators"]], "predict() (sklearn.ensemble.votingregressor method)": [[568, "sklearn.ensemble.VotingRegressor.predict"]], "score() (sklearn.ensemble.votingregressor method)": [[568, "sklearn.ensemble.VotingRegressor.score"]], "set_fit_request() (sklearn.ensemble.votingregressor method)": [[568, "sklearn.ensemble.VotingRegressor.set_fit_request"]], "set_output() (sklearn.ensemble.votingregressor method)": [[568, "sklearn.ensemble.VotingRegressor.set_output"]], "set_params() (sklearn.ensemble.votingregressor method)": [[568, "sklearn.ensemble.VotingRegressor.set_params"]], "set_score_request() (sklearn.ensemble.votingregressor method)": [[568, "sklearn.ensemble.VotingRegressor.set_score_request"]], "transform() (sklearn.ensemble.votingregressor method)": [[568, "sklearn.ensemble.VotingRegressor.transform"]], "convergencewarning (class in sklearn.exceptions)": [[569, "sklearn.exceptions.ConvergenceWarning"]], "with_traceback() (sklearn.exceptions.convergencewarning method)": [[569, "sklearn.exceptions.ConvergenceWarning.with_traceback"]], "dataconversionwarning (class in sklearn.exceptions)": [[570, "sklearn.exceptions.DataConversionWarning"]], "with_traceback() (sklearn.exceptions.dataconversionwarning method)": [[570, "sklearn.exceptions.DataConversionWarning.with_traceback"]], "datadimensionalitywarning (class in sklearn.exceptions)": [[571, "sklearn.exceptions.DataDimensionalityWarning"]], "with_traceback() (sklearn.exceptions.datadimensionalitywarning method)": [[571, "sklearn.exceptions.DataDimensionalityWarning.with_traceback"]], "efficiencywarning (class in sklearn.exceptions)": [[572, "sklearn.exceptions.EfficiencyWarning"]], "with_traceback() (sklearn.exceptions.efficiencywarning method)": [[572, "sklearn.exceptions.EfficiencyWarning.with_traceback"]], "fitfailedwarning (class in sklearn.exceptions)": [[573, "sklearn.exceptions.FitFailedWarning"]], "with_traceback() (sklearn.exceptions.fitfailedwarning method)": [[573, "sklearn.exceptions.FitFailedWarning.with_traceback"]], "inconsistentversionwarning (class in sklearn.exceptions)": [[574, "sklearn.exceptions.InconsistentVersionWarning"]], "with_traceback() (sklearn.exceptions.inconsistentversionwarning method)": [[574, "sklearn.exceptions.InconsistentVersionWarning.with_traceback"]], "notfittederror (class in sklearn.exceptions)": [[575, "sklearn.exceptions.NotFittedError"]], "with_traceback() (sklearn.exceptions.notfittederror method)": [[575, "sklearn.exceptions.NotFittedError.with_traceback"]], "undefinedmetricwarning (class in sklearn.exceptions)": [[576, "sklearn.exceptions.UndefinedMetricWarning"]], "with_traceback() (sklearn.exceptions.undefinedmetricwarning method)": [[576, "sklearn.exceptions.UndefinedMetricWarning.with_traceback"]], "sklearn.experimental.enable_halving_search_cv": [[577, "module-sklearn.experimental.enable_halving_search_cv"]], "sklearn.experimental.enable_iterative_imputer": [[578, "module-sklearn.experimental.enable_iterative_imputer"]], "dictvectorizer (class in sklearn.feature_extraction)": [[579, "sklearn.feature_extraction.DictVectorizer"]], "fit() (sklearn.feature_extraction.dictvectorizer method)": [[579, "sklearn.feature_extraction.DictVectorizer.fit"]], "fit_transform() (sklearn.feature_extraction.dictvectorizer method)": [[579, "sklearn.feature_extraction.DictVectorizer.fit_transform"]], "get_feature_names_out() (sklearn.feature_extraction.dictvectorizer method)": [[579, "sklearn.feature_extraction.DictVectorizer.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_extraction.dictvectorizer method)": [[579, "sklearn.feature_extraction.DictVectorizer.get_metadata_routing"]], "get_params() (sklearn.feature_extraction.dictvectorizer method)": [[579, "sklearn.feature_extraction.DictVectorizer.get_params"]], "inverse_transform() (sklearn.feature_extraction.dictvectorizer method)": [[579, "sklearn.feature_extraction.DictVectorizer.inverse_transform"]], "restrict() (sklearn.feature_extraction.dictvectorizer method)": [[579, "sklearn.feature_extraction.DictVectorizer.restrict"]], "set_inverse_transform_request() (sklearn.feature_extraction.dictvectorizer method)": [[579, "sklearn.feature_extraction.DictVectorizer.set_inverse_transform_request"]], "set_output() (sklearn.feature_extraction.dictvectorizer method)": [[579, "sklearn.feature_extraction.DictVectorizer.set_output"]], "set_params() (sklearn.feature_extraction.dictvectorizer method)": [[579, "sklearn.feature_extraction.DictVectorizer.set_params"]], "transform() (sklearn.feature_extraction.dictvectorizer method)": [[579, "sklearn.feature_extraction.DictVectorizer.transform"]], "featurehasher (class in sklearn.feature_extraction)": [[580, "sklearn.feature_extraction.FeatureHasher"]], "fit() (sklearn.feature_extraction.featurehasher method)": [[580, "sklearn.feature_extraction.FeatureHasher.fit"]], "fit_transform() (sklearn.feature_extraction.featurehasher method)": [[580, "sklearn.feature_extraction.FeatureHasher.fit_transform"]], "get_metadata_routing() (sklearn.feature_extraction.featurehasher method)": [[580, "sklearn.feature_extraction.FeatureHasher.get_metadata_routing"]], "get_params() (sklearn.feature_extraction.featurehasher method)": [[580, "sklearn.feature_extraction.FeatureHasher.get_params"]], "set_output() (sklearn.feature_extraction.featurehasher method)": [[580, "sklearn.feature_extraction.FeatureHasher.set_output"]], "set_params() (sklearn.feature_extraction.featurehasher method)": [[580, "sklearn.feature_extraction.FeatureHasher.set_params"]], "set_transform_request() (sklearn.feature_extraction.featurehasher method)": [[580, "sklearn.feature_extraction.FeatureHasher.set_transform_request"]], "transform() (sklearn.feature_extraction.featurehasher method)": [[580, "sklearn.feature_extraction.FeatureHasher.transform"]], "patchextractor (class in sklearn.feature_extraction.image)": [[581, "sklearn.feature_extraction.image.PatchExtractor"]], "fit() (sklearn.feature_extraction.image.patchextractor method)": [[581, "sklearn.feature_extraction.image.PatchExtractor.fit"]], "fit_transform() (sklearn.feature_extraction.image.patchextractor method)": [[581, "sklearn.feature_extraction.image.PatchExtractor.fit_transform"]], "get_metadata_routing() (sklearn.feature_extraction.image.patchextractor method)": [[581, "sklearn.feature_extraction.image.PatchExtractor.get_metadata_routing"]], "get_params() (sklearn.feature_extraction.image.patchextractor method)": [[581, "sklearn.feature_extraction.image.PatchExtractor.get_params"]], "set_output() (sklearn.feature_extraction.image.patchextractor method)": [[581, "sklearn.feature_extraction.image.PatchExtractor.set_output"]], "set_params() (sklearn.feature_extraction.image.patchextractor method)": [[581, "sklearn.feature_extraction.image.PatchExtractor.set_params"]], "transform() (sklearn.feature_extraction.image.patchextractor method)": [[581, "sklearn.feature_extraction.image.PatchExtractor.transform"]], "extract_patches_2d() (in module sklearn.feature_extraction.image)": [[582, "sklearn.feature_extraction.image.extract_patches_2d"]], "grid_to_graph() (in module sklearn.feature_extraction.image)": [[583, "sklearn.feature_extraction.image.grid_to_graph"]], "img_to_graph() (in module sklearn.feature_extraction.image)": [[584, "sklearn.feature_extraction.image.img_to_graph"]], "reconstruct_from_patches_2d() (in module sklearn.feature_extraction.image)": [[585, "sklearn.feature_extraction.image.reconstruct_from_patches_2d"]], "countvectorizer (class in sklearn.feature_extraction.text)": [[586, "sklearn.feature_extraction.text.CountVectorizer"]], "build_analyzer() (sklearn.feature_extraction.text.countvectorizer method)": [[586, "sklearn.feature_extraction.text.CountVectorizer.build_analyzer"]], "build_preprocessor() (sklearn.feature_extraction.text.countvectorizer method)": [[586, "sklearn.feature_extraction.text.CountVectorizer.build_preprocessor"]], "build_tokenizer() (sklearn.feature_extraction.text.countvectorizer method)": [[586, "sklearn.feature_extraction.text.CountVectorizer.build_tokenizer"]], "decode() (sklearn.feature_extraction.text.countvectorizer method)": [[586, "sklearn.feature_extraction.text.CountVectorizer.decode"]], "fit() (sklearn.feature_extraction.text.countvectorizer method)": [[586, "sklearn.feature_extraction.text.CountVectorizer.fit"]], "fit_transform() (sklearn.feature_extraction.text.countvectorizer method)": [[586, "sklearn.feature_extraction.text.CountVectorizer.fit_transform"]], "get_feature_names_out() (sklearn.feature_extraction.text.countvectorizer method)": [[586, "sklearn.feature_extraction.text.CountVectorizer.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_extraction.text.countvectorizer method)": [[586, "sklearn.feature_extraction.text.CountVectorizer.get_metadata_routing"]], "get_params() (sklearn.feature_extraction.text.countvectorizer method)": [[586, "sklearn.feature_extraction.text.CountVectorizer.get_params"]], "get_stop_words() (sklearn.feature_extraction.text.countvectorizer method)": [[586, "sklearn.feature_extraction.text.CountVectorizer.get_stop_words"]], "inverse_transform() (sklearn.feature_extraction.text.countvectorizer method)": [[586, "sklearn.feature_extraction.text.CountVectorizer.inverse_transform"]], "set_fit_request() (sklearn.feature_extraction.text.countvectorizer method)": [[586, "sklearn.feature_extraction.text.CountVectorizer.set_fit_request"]], "set_params() (sklearn.feature_extraction.text.countvectorizer method)": [[586, "sklearn.feature_extraction.text.CountVectorizer.set_params"]], "set_transform_request() (sklearn.feature_extraction.text.countvectorizer method)": [[586, "sklearn.feature_extraction.text.CountVectorizer.set_transform_request"]], "transform() (sklearn.feature_extraction.text.countvectorizer method)": [[586, "sklearn.feature_extraction.text.CountVectorizer.transform"]], "hashingvectorizer (class in sklearn.feature_extraction.text)": [[587, "sklearn.feature_extraction.text.HashingVectorizer"]], "build_analyzer() (sklearn.feature_extraction.text.hashingvectorizer method)": [[587, "sklearn.feature_extraction.text.HashingVectorizer.build_analyzer"]], "build_preprocessor() (sklearn.feature_extraction.text.hashingvectorizer method)": [[587, "sklearn.feature_extraction.text.HashingVectorizer.build_preprocessor"]], "build_tokenizer() (sklearn.feature_extraction.text.hashingvectorizer method)": [[587, "sklearn.feature_extraction.text.HashingVectorizer.build_tokenizer"]], "decode() (sklearn.feature_extraction.text.hashingvectorizer method)": [[587, "sklearn.feature_extraction.text.HashingVectorizer.decode"]], "fit() (sklearn.feature_extraction.text.hashingvectorizer method)": [[587, "sklearn.feature_extraction.text.HashingVectorizer.fit"]], "fit_transform() (sklearn.feature_extraction.text.hashingvectorizer method)": [[587, "sklearn.feature_extraction.text.HashingVectorizer.fit_transform"]], "get_metadata_routing() (sklearn.feature_extraction.text.hashingvectorizer method)": [[587, "sklearn.feature_extraction.text.HashingVectorizer.get_metadata_routing"]], "get_params() (sklearn.feature_extraction.text.hashingvectorizer method)": [[587, "sklearn.feature_extraction.text.HashingVectorizer.get_params"]], "get_stop_words() (sklearn.feature_extraction.text.hashingvectorizer method)": [[587, "sklearn.feature_extraction.text.HashingVectorizer.get_stop_words"]], "partial_fit() (sklearn.feature_extraction.text.hashingvectorizer method)": [[587, "sklearn.feature_extraction.text.HashingVectorizer.partial_fit"]], "set_output() (sklearn.feature_extraction.text.hashingvectorizer method)": [[587, "sklearn.feature_extraction.text.HashingVectorizer.set_output"]], "set_params() (sklearn.feature_extraction.text.hashingvectorizer method)": [[587, "sklearn.feature_extraction.text.HashingVectorizer.set_params"]], "transform() (sklearn.feature_extraction.text.hashingvectorizer method)": [[587, "sklearn.feature_extraction.text.HashingVectorizer.transform"]], "tfidftransformer (class in sklearn.feature_extraction.text)": [[588, "sklearn.feature_extraction.text.TfidfTransformer"]], "fit() (sklearn.feature_extraction.text.tfidftransformer method)": [[588, "sklearn.feature_extraction.text.TfidfTransformer.fit"]], "fit_transform() (sklearn.feature_extraction.text.tfidftransformer method)": [[588, "sklearn.feature_extraction.text.TfidfTransformer.fit_transform"]], "get_feature_names_out() (sklearn.feature_extraction.text.tfidftransformer method)": [[588, "sklearn.feature_extraction.text.TfidfTransformer.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_extraction.text.tfidftransformer method)": [[588, "sklearn.feature_extraction.text.TfidfTransformer.get_metadata_routing"]], "get_params() (sklearn.feature_extraction.text.tfidftransformer method)": [[588, "sklearn.feature_extraction.text.TfidfTransformer.get_params"]], "set_output() (sklearn.feature_extraction.text.tfidftransformer method)": [[588, "sklearn.feature_extraction.text.TfidfTransformer.set_output"]], "set_params() (sklearn.feature_extraction.text.tfidftransformer method)": [[588, "sklearn.feature_extraction.text.TfidfTransformer.set_params"]], "set_transform_request() (sklearn.feature_extraction.text.tfidftransformer method)": [[588, "sklearn.feature_extraction.text.TfidfTransformer.set_transform_request"]], "transform() (sklearn.feature_extraction.text.tfidftransformer method)": [[588, "sklearn.feature_extraction.text.TfidfTransformer.transform"]], "tfidfvectorizer (class in sklearn.feature_extraction.text)": [[589, "sklearn.feature_extraction.text.TfidfVectorizer"]], "build_analyzer() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[589, "sklearn.feature_extraction.text.TfidfVectorizer.build_analyzer"]], "build_preprocessor() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[589, "sklearn.feature_extraction.text.TfidfVectorizer.build_preprocessor"]], "build_tokenizer() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[589, "sklearn.feature_extraction.text.TfidfVectorizer.build_tokenizer"]], "decode() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[589, "sklearn.feature_extraction.text.TfidfVectorizer.decode"]], "fit() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[589, "sklearn.feature_extraction.text.TfidfVectorizer.fit"]], "fit_transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[589, "sklearn.feature_extraction.text.TfidfVectorizer.fit_transform"]], "get_feature_names_out() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[589, "sklearn.feature_extraction.text.TfidfVectorizer.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[589, "sklearn.feature_extraction.text.TfidfVectorizer.get_metadata_routing"]], "get_params() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[589, "sklearn.feature_extraction.text.TfidfVectorizer.get_params"]], "get_stop_words() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[589, "sklearn.feature_extraction.text.TfidfVectorizer.get_stop_words"]], "idf_ (sklearn.feature_extraction.text.tfidfvectorizer property)": [[589, "sklearn.feature_extraction.text.TfidfVectorizer.idf_"]], "inverse_transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[589, "sklearn.feature_extraction.text.TfidfVectorizer.inverse_transform"]], "set_fit_request() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[589, "sklearn.feature_extraction.text.TfidfVectorizer.set_fit_request"]], "set_params() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[589, "sklearn.feature_extraction.text.TfidfVectorizer.set_params"]], "set_transform_request() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[589, "sklearn.feature_extraction.text.TfidfVectorizer.set_transform_request"]], "transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[589, "sklearn.feature_extraction.text.TfidfVectorizer.transform"]], "genericunivariateselect (class in sklearn.feature_selection)": [[590, "sklearn.feature_selection.GenericUnivariateSelect"]], "fit() (sklearn.feature_selection.genericunivariateselect method)": [[590, "sklearn.feature_selection.GenericUnivariateSelect.fit"]], "fit_transform() (sklearn.feature_selection.genericunivariateselect method)": [[590, "sklearn.feature_selection.GenericUnivariateSelect.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.genericunivariateselect method)": [[590, "sklearn.feature_selection.GenericUnivariateSelect.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.genericunivariateselect method)": [[590, "sklearn.feature_selection.GenericUnivariateSelect.get_metadata_routing"]], "get_params() (sklearn.feature_selection.genericunivariateselect method)": [[590, "sklearn.feature_selection.GenericUnivariateSelect.get_params"]], "get_support() (sklearn.feature_selection.genericunivariateselect method)": [[590, "sklearn.feature_selection.GenericUnivariateSelect.get_support"]], "inverse_transform() (sklearn.feature_selection.genericunivariateselect method)": [[590, "sklearn.feature_selection.GenericUnivariateSelect.inverse_transform"]], "set_output() (sklearn.feature_selection.genericunivariateselect method)": [[590, "sklearn.feature_selection.GenericUnivariateSelect.set_output"]], "set_params() (sklearn.feature_selection.genericunivariateselect method)": [[590, "sklearn.feature_selection.GenericUnivariateSelect.set_params"]], "transform() (sklearn.feature_selection.genericunivariateselect method)": [[590, "sklearn.feature_selection.GenericUnivariateSelect.transform"]], "rfe (class in sklearn.feature_selection)": [[591, "sklearn.feature_selection.RFE"]], "classes_ (sklearn.feature_selection.rfe property)": [[591, "sklearn.feature_selection.RFE.classes_"]], "decision_function() (sklearn.feature_selection.rfe method)": [[591, "sklearn.feature_selection.RFE.decision_function"]], "fit() (sklearn.feature_selection.rfe method)": [[591, "sklearn.feature_selection.RFE.fit"]], "fit_transform() (sklearn.feature_selection.rfe method)": [[591, "sklearn.feature_selection.RFE.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.rfe method)": [[591, "sklearn.feature_selection.RFE.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.rfe method)": [[591, "sklearn.feature_selection.RFE.get_metadata_routing"]], "get_params() (sklearn.feature_selection.rfe method)": [[591, "sklearn.feature_selection.RFE.get_params"]], "get_support() (sklearn.feature_selection.rfe method)": [[591, "sklearn.feature_selection.RFE.get_support"]], "inverse_transform() (sklearn.feature_selection.rfe method)": [[591, "sklearn.feature_selection.RFE.inverse_transform"]], "predict() (sklearn.feature_selection.rfe method)": [[591, "sklearn.feature_selection.RFE.predict"]], "predict_log_proba() (sklearn.feature_selection.rfe method)": [[591, "sklearn.feature_selection.RFE.predict_log_proba"]], "predict_proba() (sklearn.feature_selection.rfe method)": [[591, "sklearn.feature_selection.RFE.predict_proba"]], "score() (sklearn.feature_selection.rfe method)": [[591, "sklearn.feature_selection.RFE.score"]], "set_output() (sklearn.feature_selection.rfe method)": [[591, "sklearn.feature_selection.RFE.set_output"]], "set_params() (sklearn.feature_selection.rfe method)": [[591, "sklearn.feature_selection.RFE.set_params"]], "transform() (sklearn.feature_selection.rfe method)": [[591, "sklearn.feature_selection.RFE.transform"]], "rfecv (class in sklearn.feature_selection)": [[592, "sklearn.feature_selection.RFECV"]], "classes_ (sklearn.feature_selection.rfecv property)": [[592, "sklearn.feature_selection.RFECV.classes_"]], "decision_function() (sklearn.feature_selection.rfecv method)": [[592, "sklearn.feature_selection.RFECV.decision_function"]], "fit() (sklearn.feature_selection.rfecv method)": [[592, "sklearn.feature_selection.RFECV.fit"]], "fit_transform() (sklearn.feature_selection.rfecv method)": [[592, "sklearn.feature_selection.RFECV.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.rfecv method)": [[592, "sklearn.feature_selection.RFECV.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.rfecv method)": [[592, "sklearn.feature_selection.RFECV.get_metadata_routing"]], "get_params() (sklearn.feature_selection.rfecv method)": [[592, "sklearn.feature_selection.RFECV.get_params"]], "get_support() (sklearn.feature_selection.rfecv method)": [[592, "sklearn.feature_selection.RFECV.get_support"]], "inverse_transform() (sklearn.feature_selection.rfecv method)": [[592, "sklearn.feature_selection.RFECV.inverse_transform"]], "predict() (sklearn.feature_selection.rfecv method)": [[592, "sklearn.feature_selection.RFECV.predict"]], "predict_log_proba() (sklearn.feature_selection.rfecv method)": [[592, "sklearn.feature_selection.RFECV.predict_log_proba"]], "predict_proba() (sklearn.feature_selection.rfecv method)": [[592, "sklearn.feature_selection.RFECV.predict_proba"]], "score() (sklearn.feature_selection.rfecv method)": [[592, "sklearn.feature_selection.RFECV.score"]], "set_fit_request() (sklearn.feature_selection.rfecv method)": [[592, "sklearn.feature_selection.RFECV.set_fit_request"]], "set_output() (sklearn.feature_selection.rfecv method)": [[592, "sklearn.feature_selection.RFECV.set_output"]], "set_params() (sklearn.feature_selection.rfecv method)": [[592, "sklearn.feature_selection.RFECV.set_params"]], "transform() (sklearn.feature_selection.rfecv method)": [[592, "sklearn.feature_selection.RFECV.transform"]], "selectfdr (class in sklearn.feature_selection)": [[593, "sklearn.feature_selection.SelectFdr"]], "fit() (sklearn.feature_selection.selectfdr method)": [[593, "sklearn.feature_selection.SelectFdr.fit"]], "fit_transform() (sklearn.feature_selection.selectfdr method)": [[593, "sklearn.feature_selection.SelectFdr.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectfdr method)": [[593, "sklearn.feature_selection.SelectFdr.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.selectfdr method)": [[593, "sklearn.feature_selection.SelectFdr.get_metadata_routing"]], "get_params() (sklearn.feature_selection.selectfdr method)": [[593, "sklearn.feature_selection.SelectFdr.get_params"]], "get_support() (sklearn.feature_selection.selectfdr method)": [[593, "sklearn.feature_selection.SelectFdr.get_support"]], "inverse_transform() (sklearn.feature_selection.selectfdr method)": [[593, "sklearn.feature_selection.SelectFdr.inverse_transform"]], "set_output() (sklearn.feature_selection.selectfdr method)": [[593, "sklearn.feature_selection.SelectFdr.set_output"]], "set_params() (sklearn.feature_selection.selectfdr method)": [[593, "sklearn.feature_selection.SelectFdr.set_params"]], "transform() (sklearn.feature_selection.selectfdr method)": [[593, "sklearn.feature_selection.SelectFdr.transform"]], "selectfpr (class in sklearn.feature_selection)": [[594, "sklearn.feature_selection.SelectFpr"]], "fit() (sklearn.feature_selection.selectfpr method)": [[594, "sklearn.feature_selection.SelectFpr.fit"]], "fit_transform() (sklearn.feature_selection.selectfpr method)": [[594, "sklearn.feature_selection.SelectFpr.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectfpr method)": [[594, "sklearn.feature_selection.SelectFpr.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.selectfpr method)": [[594, "sklearn.feature_selection.SelectFpr.get_metadata_routing"]], "get_params() (sklearn.feature_selection.selectfpr method)": [[594, "sklearn.feature_selection.SelectFpr.get_params"]], "get_support() (sklearn.feature_selection.selectfpr method)": [[594, "sklearn.feature_selection.SelectFpr.get_support"]], "inverse_transform() (sklearn.feature_selection.selectfpr method)": [[594, "sklearn.feature_selection.SelectFpr.inverse_transform"]], "set_output() (sklearn.feature_selection.selectfpr method)": [[594, "sklearn.feature_selection.SelectFpr.set_output"]], "set_params() (sklearn.feature_selection.selectfpr method)": [[594, "sklearn.feature_selection.SelectFpr.set_params"]], "transform() (sklearn.feature_selection.selectfpr method)": [[594, "sklearn.feature_selection.SelectFpr.transform"]], "selectfrommodel (class in sklearn.feature_selection)": [[595, "sklearn.feature_selection.SelectFromModel"]], "fit() (sklearn.feature_selection.selectfrommodel method)": [[595, "sklearn.feature_selection.SelectFromModel.fit"]], "fit_transform() (sklearn.feature_selection.selectfrommodel method)": [[595, "sklearn.feature_selection.SelectFromModel.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectfrommodel method)": [[595, "sklearn.feature_selection.SelectFromModel.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.selectfrommodel method)": [[595, "sklearn.feature_selection.SelectFromModel.get_metadata_routing"]], "get_params() (sklearn.feature_selection.selectfrommodel method)": [[595, "sklearn.feature_selection.SelectFromModel.get_params"]], "get_support() (sklearn.feature_selection.selectfrommodel method)": [[595, "sklearn.feature_selection.SelectFromModel.get_support"]], "inverse_transform() (sklearn.feature_selection.selectfrommodel method)": [[595, "sklearn.feature_selection.SelectFromModel.inverse_transform"]], "n_features_in_ (sklearn.feature_selection.selectfrommodel property)": [[595, "sklearn.feature_selection.SelectFromModel.n_features_in_"]], "partial_fit() (sklearn.feature_selection.selectfrommodel method)": [[595, "sklearn.feature_selection.SelectFromModel.partial_fit"]], "set_output() (sklearn.feature_selection.selectfrommodel method)": [[595, "sklearn.feature_selection.SelectFromModel.set_output"]], "set_params() (sklearn.feature_selection.selectfrommodel method)": [[595, "sklearn.feature_selection.SelectFromModel.set_params"]], "threshold_ (sklearn.feature_selection.selectfrommodel property)": [[595, "sklearn.feature_selection.SelectFromModel.threshold_"]], "transform() (sklearn.feature_selection.selectfrommodel method)": [[595, "sklearn.feature_selection.SelectFromModel.transform"]], "selectfwe (class in sklearn.feature_selection)": [[596, "sklearn.feature_selection.SelectFwe"]], "fit() (sklearn.feature_selection.selectfwe method)": [[596, "sklearn.feature_selection.SelectFwe.fit"]], "fit_transform() (sklearn.feature_selection.selectfwe method)": [[596, "sklearn.feature_selection.SelectFwe.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectfwe method)": [[596, "sklearn.feature_selection.SelectFwe.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.selectfwe method)": [[596, "sklearn.feature_selection.SelectFwe.get_metadata_routing"]], "get_params() (sklearn.feature_selection.selectfwe method)": [[596, "sklearn.feature_selection.SelectFwe.get_params"]], "get_support() (sklearn.feature_selection.selectfwe method)": [[596, "sklearn.feature_selection.SelectFwe.get_support"]], "inverse_transform() (sklearn.feature_selection.selectfwe method)": [[596, "sklearn.feature_selection.SelectFwe.inverse_transform"]], "set_output() (sklearn.feature_selection.selectfwe method)": [[596, "sklearn.feature_selection.SelectFwe.set_output"]], "set_params() (sklearn.feature_selection.selectfwe method)": [[596, "sklearn.feature_selection.SelectFwe.set_params"]], "transform() (sklearn.feature_selection.selectfwe method)": [[596, "sklearn.feature_selection.SelectFwe.transform"]], "selectkbest (class in sklearn.feature_selection)": [[597, "sklearn.feature_selection.SelectKBest"]], "fit() (sklearn.feature_selection.selectkbest method)": [[597, "sklearn.feature_selection.SelectKBest.fit"]], "fit_transform() (sklearn.feature_selection.selectkbest method)": [[597, "sklearn.feature_selection.SelectKBest.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectkbest method)": [[597, "sklearn.feature_selection.SelectKBest.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.selectkbest method)": [[597, "sklearn.feature_selection.SelectKBest.get_metadata_routing"]], "get_params() (sklearn.feature_selection.selectkbest method)": [[597, "sklearn.feature_selection.SelectKBest.get_params"]], "get_support() (sklearn.feature_selection.selectkbest method)": [[597, "sklearn.feature_selection.SelectKBest.get_support"]], "inverse_transform() (sklearn.feature_selection.selectkbest method)": [[597, "sklearn.feature_selection.SelectKBest.inverse_transform"]], "set_output() (sklearn.feature_selection.selectkbest method)": [[597, "sklearn.feature_selection.SelectKBest.set_output"]], "set_params() (sklearn.feature_selection.selectkbest method)": [[597, "sklearn.feature_selection.SelectKBest.set_params"]], "transform() (sklearn.feature_selection.selectkbest method)": [[597, "sklearn.feature_selection.SelectKBest.transform"]], "selectpercentile (class in sklearn.feature_selection)": [[598, "sklearn.feature_selection.SelectPercentile"]], "fit() (sklearn.feature_selection.selectpercentile method)": [[598, "sklearn.feature_selection.SelectPercentile.fit"]], "fit_transform() (sklearn.feature_selection.selectpercentile method)": [[598, "sklearn.feature_selection.SelectPercentile.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectpercentile method)": [[598, "sklearn.feature_selection.SelectPercentile.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.selectpercentile method)": [[598, "sklearn.feature_selection.SelectPercentile.get_metadata_routing"]], "get_params() (sklearn.feature_selection.selectpercentile method)": [[598, "sklearn.feature_selection.SelectPercentile.get_params"]], "get_support() (sklearn.feature_selection.selectpercentile method)": [[598, "sklearn.feature_selection.SelectPercentile.get_support"]], "inverse_transform() (sklearn.feature_selection.selectpercentile method)": [[598, "sklearn.feature_selection.SelectPercentile.inverse_transform"]], "set_output() (sklearn.feature_selection.selectpercentile method)": [[598, "sklearn.feature_selection.SelectPercentile.set_output"]], "set_params() (sklearn.feature_selection.selectpercentile method)": [[598, "sklearn.feature_selection.SelectPercentile.set_params"]], "transform() (sklearn.feature_selection.selectpercentile method)": [[598, "sklearn.feature_selection.SelectPercentile.transform"]], "selectormixin (class in sklearn.feature_selection)": [[599, "sklearn.feature_selection.SelectorMixin"]], "fit_transform() (sklearn.feature_selection.selectormixin method)": [[599, "sklearn.feature_selection.SelectorMixin.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectormixin method)": [[599, "sklearn.feature_selection.SelectorMixin.get_feature_names_out"]], "get_support() (sklearn.feature_selection.selectormixin method)": [[599, "sklearn.feature_selection.SelectorMixin.get_support"]], "inverse_transform() (sklearn.feature_selection.selectormixin method)": [[599, "sklearn.feature_selection.SelectorMixin.inverse_transform"]], "set_output() (sklearn.feature_selection.selectormixin method)": [[599, "sklearn.feature_selection.SelectorMixin.set_output"]], "transform() (sklearn.feature_selection.selectormixin method)": [[599, "sklearn.feature_selection.SelectorMixin.transform"]], "sequentialfeatureselector (class in sklearn.feature_selection)": [[600, "sklearn.feature_selection.SequentialFeatureSelector"]], "fit() (sklearn.feature_selection.sequentialfeatureselector method)": [[600, "sklearn.feature_selection.SequentialFeatureSelector.fit"]], "fit_transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[600, "sklearn.feature_selection.SequentialFeatureSelector.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.sequentialfeatureselector method)": [[600, "sklearn.feature_selection.SequentialFeatureSelector.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.sequentialfeatureselector method)": [[600, "sklearn.feature_selection.SequentialFeatureSelector.get_metadata_routing"]], "get_params() (sklearn.feature_selection.sequentialfeatureselector method)": [[600, "sklearn.feature_selection.SequentialFeatureSelector.get_params"]], "get_support() (sklearn.feature_selection.sequentialfeatureselector method)": [[600, "sklearn.feature_selection.SequentialFeatureSelector.get_support"]], "inverse_transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[600, "sklearn.feature_selection.SequentialFeatureSelector.inverse_transform"]], "set_output() (sklearn.feature_selection.sequentialfeatureselector method)": [[600, "sklearn.feature_selection.SequentialFeatureSelector.set_output"]], "set_params() (sklearn.feature_selection.sequentialfeatureselector method)": [[600, "sklearn.feature_selection.SequentialFeatureSelector.set_params"]], "transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[600, "sklearn.feature_selection.SequentialFeatureSelector.transform"]], "variancethreshold (class in sklearn.feature_selection)": [[601, "sklearn.feature_selection.VarianceThreshold"]], "fit() (sklearn.feature_selection.variancethreshold method)": [[601, "sklearn.feature_selection.VarianceThreshold.fit"]], "fit_transform() (sklearn.feature_selection.variancethreshold method)": [[601, "sklearn.feature_selection.VarianceThreshold.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.variancethreshold method)": [[601, "sklearn.feature_selection.VarianceThreshold.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.variancethreshold method)": [[601, "sklearn.feature_selection.VarianceThreshold.get_metadata_routing"]], "get_params() (sklearn.feature_selection.variancethreshold method)": [[601, "sklearn.feature_selection.VarianceThreshold.get_params"]], "get_support() (sklearn.feature_selection.variancethreshold method)": [[601, "sklearn.feature_selection.VarianceThreshold.get_support"]], "inverse_transform() (sklearn.feature_selection.variancethreshold method)": [[601, "sklearn.feature_selection.VarianceThreshold.inverse_transform"]], "set_output() (sklearn.feature_selection.variancethreshold method)": [[601, "sklearn.feature_selection.VarianceThreshold.set_output"]], "set_params() (sklearn.feature_selection.variancethreshold method)": [[601, "sklearn.feature_selection.VarianceThreshold.set_params"]], "transform() (sklearn.feature_selection.variancethreshold method)": [[601, "sklearn.feature_selection.VarianceThreshold.transform"]], "chi2() (in module sklearn.feature_selection)": [[602, "sklearn.feature_selection.chi2"]], "f_classif() (in module sklearn.feature_selection)": [[603, "sklearn.feature_selection.f_classif"]], "f_regression() (in module sklearn.feature_selection)": [[604, "sklearn.feature_selection.f_regression"]], "mutual_info_classif() (in module sklearn.feature_selection)": [[605, "sklearn.feature_selection.mutual_info_classif"]], "mutual_info_regression() (in module sklearn.feature_selection)": [[606, "sklearn.feature_selection.mutual_info_regression"]], "r_regression() (in module sklearn.feature_selection)": [[607, "sklearn.feature_selection.r_regression"]], "gaussianprocessclassifier (class in sklearn.gaussian_process)": [[608, "sklearn.gaussian_process.GaussianProcessClassifier"]], "fit() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[608, "sklearn.gaussian_process.GaussianProcessClassifier.fit"]], "get_metadata_routing() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[608, "sklearn.gaussian_process.GaussianProcessClassifier.get_metadata_routing"]], "get_params() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[608, "sklearn.gaussian_process.GaussianProcessClassifier.get_params"]], "kernel_ (sklearn.gaussian_process.gaussianprocessclassifier property)": [[608, "sklearn.gaussian_process.GaussianProcessClassifier.kernel_"]], "log_marginal_likelihood() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[608, "sklearn.gaussian_process.GaussianProcessClassifier.log_marginal_likelihood"]], "predict() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[608, "sklearn.gaussian_process.GaussianProcessClassifier.predict"]], "predict_proba() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[608, "sklearn.gaussian_process.GaussianProcessClassifier.predict_proba"]], "score() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[608, "sklearn.gaussian_process.GaussianProcessClassifier.score"]], "set_params() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[608, "sklearn.gaussian_process.GaussianProcessClassifier.set_params"]], "set_score_request() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[608, "sklearn.gaussian_process.GaussianProcessClassifier.set_score_request"]], "gaussianprocessregressor (class in sklearn.gaussian_process)": [[609, "sklearn.gaussian_process.GaussianProcessRegressor"]], "fit() (sklearn.gaussian_process.gaussianprocessregressor method)": [[609, "sklearn.gaussian_process.GaussianProcessRegressor.fit"]], "get_metadata_routing() (sklearn.gaussian_process.gaussianprocessregressor method)": [[609, "sklearn.gaussian_process.GaussianProcessRegressor.get_metadata_routing"]], "get_params() (sklearn.gaussian_process.gaussianprocessregressor method)": [[609, "sklearn.gaussian_process.GaussianProcessRegressor.get_params"]], "log_marginal_likelihood() (sklearn.gaussian_process.gaussianprocessregressor method)": [[609, "sklearn.gaussian_process.GaussianProcessRegressor.log_marginal_likelihood"]], "predict() (sklearn.gaussian_process.gaussianprocessregressor method)": [[609, "sklearn.gaussian_process.GaussianProcessRegressor.predict"]], "sample_y() (sklearn.gaussian_process.gaussianprocessregressor method)": [[609, "sklearn.gaussian_process.GaussianProcessRegressor.sample_y"]], "score() (sklearn.gaussian_process.gaussianprocessregressor method)": [[609, "sklearn.gaussian_process.GaussianProcessRegressor.score"]], "set_params() (sklearn.gaussian_process.gaussianprocessregressor method)": [[609, "sklearn.gaussian_process.GaussianProcessRegressor.set_params"]], "set_predict_request() (sklearn.gaussian_process.gaussianprocessregressor method)": [[609, "sklearn.gaussian_process.GaussianProcessRegressor.set_predict_request"]], "set_score_request() (sklearn.gaussian_process.gaussianprocessregressor method)": [[609, "sklearn.gaussian_process.GaussianProcessRegressor.set_score_request"]], "compoundkernel (class in sklearn.gaussian_process.kernels)": [[610, "sklearn.gaussian_process.kernels.CompoundKernel"]], "__call__() (sklearn.gaussian_process.kernels.compoundkernel method)": [[610, "sklearn.gaussian_process.kernels.CompoundKernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.compoundkernel property)": [[610, "sklearn.gaussian_process.kernels.CompoundKernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.compoundkernel method)": [[610, "sklearn.gaussian_process.kernels.CompoundKernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.compoundkernel method)": [[610, "sklearn.gaussian_process.kernels.CompoundKernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.compoundkernel method)": [[610, "sklearn.gaussian_process.kernels.CompoundKernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.compoundkernel property)": [[610, "sklearn.gaussian_process.kernels.CompoundKernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.compoundkernel method)": [[610, "sklearn.gaussian_process.kernels.CompoundKernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.compoundkernel property)": [[610, "sklearn.gaussian_process.kernels.CompoundKernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.compoundkernel property)": [[610, "sklearn.gaussian_process.kernels.CompoundKernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.compoundkernel method)": [[610, "sklearn.gaussian_process.kernels.CompoundKernel.set_params"]], "theta (sklearn.gaussian_process.kernels.compoundkernel property)": [[610, "sklearn.gaussian_process.kernels.CompoundKernel.theta"]], "constantkernel (class in sklearn.gaussian_process.kernels)": [[611, "sklearn.gaussian_process.kernels.ConstantKernel"]], "__call__() (sklearn.gaussian_process.kernels.constantkernel method)": [[611, "sklearn.gaussian_process.kernels.ConstantKernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.constantkernel property)": [[611, "sklearn.gaussian_process.kernels.ConstantKernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.constantkernel method)": [[611, "sklearn.gaussian_process.kernels.ConstantKernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.constantkernel method)": [[611, "sklearn.gaussian_process.kernels.ConstantKernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.constantkernel method)": [[611, "sklearn.gaussian_process.kernels.ConstantKernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.constantkernel property)": [[611, "sklearn.gaussian_process.kernels.ConstantKernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.constantkernel method)": [[611, "sklearn.gaussian_process.kernels.ConstantKernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.constantkernel property)": [[611, "sklearn.gaussian_process.kernels.ConstantKernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.constantkernel property)": [[611, "sklearn.gaussian_process.kernels.ConstantKernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.constantkernel method)": [[611, "sklearn.gaussian_process.kernels.ConstantKernel.set_params"]], "theta (sklearn.gaussian_process.kernels.constantkernel property)": [[611, "sklearn.gaussian_process.kernels.ConstantKernel.theta"]], "dotproduct (class in sklearn.gaussian_process.kernels)": [[612, "sklearn.gaussian_process.kernels.DotProduct"]], "__call__() (sklearn.gaussian_process.kernels.dotproduct method)": [[612, "sklearn.gaussian_process.kernels.DotProduct.__call__"]], "bounds (sklearn.gaussian_process.kernels.dotproduct property)": [[612, "sklearn.gaussian_process.kernels.DotProduct.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.dotproduct method)": [[612, "sklearn.gaussian_process.kernels.DotProduct.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.dotproduct method)": [[612, "sklearn.gaussian_process.kernels.DotProduct.diag"]], "get_params() (sklearn.gaussian_process.kernels.dotproduct method)": [[612, "sklearn.gaussian_process.kernels.DotProduct.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.dotproduct property)": [[612, "sklearn.gaussian_process.kernels.DotProduct.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.dotproduct method)": [[612, "sklearn.gaussian_process.kernels.DotProduct.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.dotproduct property)": [[612, "sklearn.gaussian_process.kernels.DotProduct.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.dotproduct property)": [[612, "sklearn.gaussian_process.kernels.DotProduct.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.dotproduct method)": [[612, "sklearn.gaussian_process.kernels.DotProduct.set_params"]], "theta (sklearn.gaussian_process.kernels.dotproduct property)": [[612, "sklearn.gaussian_process.kernels.DotProduct.theta"]], "expsinesquared (class in sklearn.gaussian_process.kernels)": [[613, "sklearn.gaussian_process.kernels.ExpSineSquared"]], "__call__() (sklearn.gaussian_process.kernels.expsinesquared method)": [[613, "sklearn.gaussian_process.kernels.ExpSineSquared.__call__"]], "bounds (sklearn.gaussian_process.kernels.expsinesquared property)": [[613, "sklearn.gaussian_process.kernels.ExpSineSquared.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.expsinesquared method)": [[613, "sklearn.gaussian_process.kernels.ExpSineSquared.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.expsinesquared method)": [[613, "sklearn.gaussian_process.kernels.ExpSineSquared.diag"]], "get_params() (sklearn.gaussian_process.kernels.expsinesquared method)": [[613, "sklearn.gaussian_process.kernels.ExpSineSquared.get_params"]], "hyperparameter_length_scale (sklearn.gaussian_process.kernels.expsinesquared property)": [[613, "sklearn.gaussian_process.kernels.ExpSineSquared.hyperparameter_length_scale"]], "hyperparameters (sklearn.gaussian_process.kernels.expsinesquared property)": [[613, "sklearn.gaussian_process.kernels.ExpSineSquared.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.expsinesquared method)": [[613, "sklearn.gaussian_process.kernels.ExpSineSquared.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.expsinesquared property)": [[613, "sklearn.gaussian_process.kernels.ExpSineSquared.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.expsinesquared property)": [[613, "sklearn.gaussian_process.kernels.ExpSineSquared.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.expsinesquared method)": [[613, "sklearn.gaussian_process.kernels.ExpSineSquared.set_params"]], "theta (sklearn.gaussian_process.kernels.expsinesquared property)": [[613, "sklearn.gaussian_process.kernels.ExpSineSquared.theta"]], "exponentiation (class in sklearn.gaussian_process.kernels)": [[614, "sklearn.gaussian_process.kernels.Exponentiation"]], "__call__() (sklearn.gaussian_process.kernels.exponentiation method)": [[614, "sklearn.gaussian_process.kernels.Exponentiation.__call__"]], "bounds (sklearn.gaussian_process.kernels.exponentiation property)": [[614, "sklearn.gaussian_process.kernels.Exponentiation.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.exponentiation method)": [[614, "sklearn.gaussian_process.kernels.Exponentiation.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.exponentiation method)": [[614, "sklearn.gaussian_process.kernels.Exponentiation.diag"]], "get_params() (sklearn.gaussian_process.kernels.exponentiation method)": [[614, "sklearn.gaussian_process.kernels.Exponentiation.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.exponentiation property)": [[614, "sklearn.gaussian_process.kernels.Exponentiation.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.exponentiation method)": [[614, "sklearn.gaussian_process.kernels.Exponentiation.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.exponentiation property)": [[614, "sklearn.gaussian_process.kernels.Exponentiation.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.exponentiation property)": [[614, "sklearn.gaussian_process.kernels.Exponentiation.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.exponentiation method)": [[614, "sklearn.gaussian_process.kernels.Exponentiation.set_params"]], "theta (sklearn.gaussian_process.kernels.exponentiation property)": [[614, "sklearn.gaussian_process.kernels.Exponentiation.theta"]], "hyperparameter (class in sklearn.gaussian_process.kernels)": [[615, "sklearn.gaussian_process.kernels.Hyperparameter"]], "__call__() (sklearn.gaussian_process.kernels.hyperparameter method)": [[615, "sklearn.gaussian_process.kernels.Hyperparameter.__call__"]], "bounds (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[615, "sklearn.gaussian_process.kernels.Hyperparameter.bounds"]], "count() (sklearn.gaussian_process.kernels.hyperparameter method)": [[615, "sklearn.gaussian_process.kernels.Hyperparameter.count"]], "fixed (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[615, "sklearn.gaussian_process.kernels.Hyperparameter.fixed"]], "index() (sklearn.gaussian_process.kernels.hyperparameter method)": [[615, "sklearn.gaussian_process.kernels.Hyperparameter.index"]], "n_elements (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[615, "sklearn.gaussian_process.kernels.Hyperparameter.n_elements"]], "name (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[615, "sklearn.gaussian_process.kernels.Hyperparameter.name"]], "value_type (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[615, "sklearn.gaussian_process.kernels.Hyperparameter.value_type"]], "kernel (class in sklearn.gaussian_process.kernels)": [[616, "sklearn.gaussian_process.kernels.Kernel"]], "__call__() (sklearn.gaussian_process.kernels.kernel method)": [[616, "sklearn.gaussian_process.kernels.Kernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.kernel property)": [[616, "sklearn.gaussian_process.kernels.Kernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.kernel method)": [[616, "sklearn.gaussian_process.kernels.Kernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.kernel method)": [[616, "sklearn.gaussian_process.kernels.Kernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.kernel method)": [[616, "sklearn.gaussian_process.kernels.Kernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.kernel property)": [[616, "sklearn.gaussian_process.kernels.Kernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.kernel method)": [[616, "sklearn.gaussian_process.kernels.Kernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.kernel property)": [[616, "sklearn.gaussian_process.kernels.Kernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.kernel property)": [[616, "sklearn.gaussian_process.kernels.Kernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.kernel method)": [[616, "sklearn.gaussian_process.kernels.Kernel.set_params"]], "theta (sklearn.gaussian_process.kernels.kernel property)": [[616, "sklearn.gaussian_process.kernels.Kernel.theta"]], "matern (class in sklearn.gaussian_process.kernels)": [[617, "sklearn.gaussian_process.kernels.Matern"]], "__call__() (sklearn.gaussian_process.kernels.matern method)": [[617, "sklearn.gaussian_process.kernels.Matern.__call__"]], "bounds (sklearn.gaussian_process.kernels.matern property)": [[617, "sklearn.gaussian_process.kernels.Matern.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.matern method)": [[617, "sklearn.gaussian_process.kernels.Matern.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.matern method)": [[617, "sklearn.gaussian_process.kernels.Matern.diag"]], "get_params() (sklearn.gaussian_process.kernels.matern method)": [[617, "sklearn.gaussian_process.kernels.Matern.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.matern property)": [[617, "sklearn.gaussian_process.kernels.Matern.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.matern method)": [[617, "sklearn.gaussian_process.kernels.Matern.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.matern property)": [[617, "sklearn.gaussian_process.kernels.Matern.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.matern property)": [[617, "sklearn.gaussian_process.kernels.Matern.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.matern method)": [[617, "sklearn.gaussian_process.kernels.Matern.set_params"]], "theta (sklearn.gaussian_process.kernels.matern property)": [[617, "sklearn.gaussian_process.kernels.Matern.theta"]], "pairwisekernel (class in sklearn.gaussian_process.kernels)": [[618, "sklearn.gaussian_process.kernels.PairwiseKernel"]], "__call__() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[618, "sklearn.gaussian_process.kernels.PairwiseKernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.pairwisekernel property)": [[618, "sklearn.gaussian_process.kernels.PairwiseKernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[618, "sklearn.gaussian_process.kernels.PairwiseKernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[618, "sklearn.gaussian_process.kernels.PairwiseKernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[618, "sklearn.gaussian_process.kernels.PairwiseKernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.pairwisekernel property)": [[618, "sklearn.gaussian_process.kernels.PairwiseKernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[618, "sklearn.gaussian_process.kernels.PairwiseKernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.pairwisekernel property)": [[618, "sklearn.gaussian_process.kernels.PairwiseKernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.pairwisekernel property)": [[618, "sklearn.gaussian_process.kernels.PairwiseKernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[618, "sklearn.gaussian_process.kernels.PairwiseKernel.set_params"]], "theta (sklearn.gaussian_process.kernels.pairwisekernel property)": [[618, "sklearn.gaussian_process.kernels.PairwiseKernel.theta"]], "product (class in sklearn.gaussian_process.kernels)": [[619, "sklearn.gaussian_process.kernels.Product"]], "__call__() (sklearn.gaussian_process.kernels.product method)": [[619, "sklearn.gaussian_process.kernels.Product.__call__"]], "bounds (sklearn.gaussian_process.kernels.product property)": [[619, "sklearn.gaussian_process.kernels.Product.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.product method)": [[619, "sklearn.gaussian_process.kernels.Product.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.product method)": [[619, "sklearn.gaussian_process.kernels.Product.diag"]], "get_params() (sklearn.gaussian_process.kernels.product method)": [[619, "sklearn.gaussian_process.kernels.Product.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.product property)": [[619, "sklearn.gaussian_process.kernels.Product.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.product method)": [[619, "sklearn.gaussian_process.kernels.Product.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.product property)": [[619, "sklearn.gaussian_process.kernels.Product.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.product property)": [[619, "sklearn.gaussian_process.kernels.Product.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.product method)": [[619, "sklearn.gaussian_process.kernels.Product.set_params"]], "theta (sklearn.gaussian_process.kernels.product property)": [[619, "sklearn.gaussian_process.kernels.Product.theta"]], "rbf (class in sklearn.gaussian_process.kernels)": [[620, "sklearn.gaussian_process.kernels.RBF"]], "__call__() (sklearn.gaussian_process.kernels.rbf method)": [[620, "sklearn.gaussian_process.kernels.RBF.__call__"]], "bounds (sklearn.gaussian_process.kernels.rbf property)": [[620, "sklearn.gaussian_process.kernels.RBF.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.rbf method)": [[620, "sklearn.gaussian_process.kernels.RBF.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.rbf method)": [[620, "sklearn.gaussian_process.kernels.RBF.diag"]], "get_params() (sklearn.gaussian_process.kernels.rbf method)": [[620, "sklearn.gaussian_process.kernels.RBF.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.rbf property)": [[620, "sklearn.gaussian_process.kernels.RBF.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.rbf method)": [[620, "sklearn.gaussian_process.kernels.RBF.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.rbf property)": [[620, "sklearn.gaussian_process.kernels.RBF.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.rbf property)": [[620, "sklearn.gaussian_process.kernels.RBF.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.rbf method)": [[620, "sklearn.gaussian_process.kernels.RBF.set_params"]], "theta (sklearn.gaussian_process.kernels.rbf property)": [[620, "sklearn.gaussian_process.kernels.RBF.theta"]], "rationalquadratic (class in sklearn.gaussian_process.kernels)": [[621, "sklearn.gaussian_process.kernels.RationalQuadratic"]], "__call__() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[621, "sklearn.gaussian_process.kernels.RationalQuadratic.__call__"]], "bounds (sklearn.gaussian_process.kernels.rationalquadratic property)": [[621, "sklearn.gaussian_process.kernels.RationalQuadratic.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[621, "sklearn.gaussian_process.kernels.RationalQuadratic.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[621, "sklearn.gaussian_process.kernels.RationalQuadratic.diag"]], "get_params() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[621, "sklearn.gaussian_process.kernels.RationalQuadratic.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.rationalquadratic property)": [[621, "sklearn.gaussian_process.kernels.RationalQuadratic.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[621, "sklearn.gaussian_process.kernels.RationalQuadratic.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.rationalquadratic property)": [[621, "sklearn.gaussian_process.kernels.RationalQuadratic.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.rationalquadratic property)": [[621, "sklearn.gaussian_process.kernels.RationalQuadratic.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[621, "sklearn.gaussian_process.kernels.RationalQuadratic.set_params"]], "theta (sklearn.gaussian_process.kernels.rationalquadratic property)": [[621, "sklearn.gaussian_process.kernels.RationalQuadratic.theta"]], "sum (class in sklearn.gaussian_process.kernels)": [[622, "sklearn.gaussian_process.kernels.Sum"]], "__call__() (sklearn.gaussian_process.kernels.sum method)": [[622, "sklearn.gaussian_process.kernels.Sum.__call__"]], "bounds (sklearn.gaussian_process.kernels.sum property)": [[622, "sklearn.gaussian_process.kernels.Sum.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.sum method)": [[622, "sklearn.gaussian_process.kernels.Sum.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.sum method)": [[622, "sklearn.gaussian_process.kernels.Sum.diag"]], "get_params() (sklearn.gaussian_process.kernels.sum method)": [[622, "sklearn.gaussian_process.kernels.Sum.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.sum property)": [[622, "sklearn.gaussian_process.kernels.Sum.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.sum method)": [[622, "sklearn.gaussian_process.kernels.Sum.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.sum property)": [[622, "sklearn.gaussian_process.kernels.Sum.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.sum property)": [[622, "sklearn.gaussian_process.kernels.Sum.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.sum method)": [[622, "sklearn.gaussian_process.kernels.Sum.set_params"]], "theta (sklearn.gaussian_process.kernels.sum property)": [[622, "sklearn.gaussian_process.kernels.Sum.theta"]], "whitekernel (class in sklearn.gaussian_process.kernels)": [[623, "sklearn.gaussian_process.kernels.WhiteKernel"]], "__call__() (sklearn.gaussian_process.kernels.whitekernel method)": [[623, "sklearn.gaussian_process.kernels.WhiteKernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.whitekernel property)": [[623, "sklearn.gaussian_process.kernels.WhiteKernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.whitekernel method)": [[623, "sklearn.gaussian_process.kernels.WhiteKernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.whitekernel method)": [[623, "sklearn.gaussian_process.kernels.WhiteKernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.whitekernel method)": [[623, "sklearn.gaussian_process.kernels.WhiteKernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.whitekernel property)": [[623, "sklearn.gaussian_process.kernels.WhiteKernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.whitekernel method)": [[623, "sklearn.gaussian_process.kernels.WhiteKernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.whitekernel property)": [[623, "sklearn.gaussian_process.kernels.WhiteKernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.whitekernel property)": [[623, "sklearn.gaussian_process.kernels.WhiteKernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.whitekernel method)": [[623, "sklearn.gaussian_process.kernels.WhiteKernel.set_params"]], "theta (sklearn.gaussian_process.kernels.whitekernel property)": [[623, "sklearn.gaussian_process.kernels.WhiteKernel.theta"]], "get_config() (in module sklearn)": [[624, "sklearn.get_config"]], "iterativeimputer (class in sklearn.impute)": [[625, "sklearn.impute.IterativeImputer"]], "fit() (sklearn.impute.iterativeimputer method)": [[625, "sklearn.impute.IterativeImputer.fit"]], "fit_transform() (sklearn.impute.iterativeimputer method)": [[625, "sklearn.impute.IterativeImputer.fit_transform"]], "get_feature_names_out() (sklearn.impute.iterativeimputer method)": [[625, "sklearn.impute.IterativeImputer.get_feature_names_out"]], "get_metadata_routing() (sklearn.impute.iterativeimputer method)": [[625, "sklearn.impute.IterativeImputer.get_metadata_routing"]], "get_params() (sklearn.impute.iterativeimputer method)": [[625, "sklearn.impute.IterativeImputer.get_params"]], "set_output() (sklearn.impute.iterativeimputer method)": [[625, "sklearn.impute.IterativeImputer.set_output"]], "set_params() (sklearn.impute.iterativeimputer method)": [[625, "sklearn.impute.IterativeImputer.set_params"]], "transform() (sklearn.impute.iterativeimputer method)": [[625, "sklearn.impute.IterativeImputer.transform"]], "knnimputer (class in sklearn.impute)": [[626, "sklearn.impute.KNNImputer"]], "fit() (sklearn.impute.knnimputer method)": [[626, "sklearn.impute.KNNImputer.fit"]], "fit_transform() (sklearn.impute.knnimputer method)": [[626, "sklearn.impute.KNNImputer.fit_transform"]], "get_feature_names_out() (sklearn.impute.knnimputer method)": [[626, "sklearn.impute.KNNImputer.get_feature_names_out"]], "get_metadata_routing() (sklearn.impute.knnimputer method)": [[626, "sklearn.impute.KNNImputer.get_metadata_routing"]], "get_params() (sklearn.impute.knnimputer method)": [[626, "sklearn.impute.KNNImputer.get_params"]], "set_output() (sklearn.impute.knnimputer method)": [[626, "sklearn.impute.KNNImputer.set_output"]], "set_params() (sklearn.impute.knnimputer method)": [[626, "sklearn.impute.KNNImputer.set_params"]], "transform() (sklearn.impute.knnimputer method)": [[626, "sklearn.impute.KNNImputer.transform"]], "missingindicator (class in sklearn.impute)": [[627, "sklearn.impute.MissingIndicator"]], "fit() (sklearn.impute.missingindicator method)": [[627, "sklearn.impute.MissingIndicator.fit"]], "fit_transform() (sklearn.impute.missingindicator method)": [[627, "sklearn.impute.MissingIndicator.fit_transform"]], "get_feature_names_out() (sklearn.impute.missingindicator method)": [[627, "sklearn.impute.MissingIndicator.get_feature_names_out"]], "get_metadata_routing() (sklearn.impute.missingindicator method)": [[627, "sklearn.impute.MissingIndicator.get_metadata_routing"]], "get_params() (sklearn.impute.missingindicator method)": [[627, "sklearn.impute.MissingIndicator.get_params"]], "set_output() (sklearn.impute.missingindicator method)": [[627, "sklearn.impute.MissingIndicator.set_output"]], "set_params() (sklearn.impute.missingindicator method)": [[627, "sklearn.impute.MissingIndicator.set_params"]], "transform() (sklearn.impute.missingindicator method)": [[627, "sklearn.impute.MissingIndicator.transform"]], "simpleimputer (class in sklearn.impute)": [[628, "sklearn.impute.SimpleImputer"]], "fit() (sklearn.impute.simpleimputer method)": [[628, "sklearn.impute.SimpleImputer.fit"]], "fit_transform() (sklearn.impute.simpleimputer method)": [[628, "sklearn.impute.SimpleImputer.fit_transform"]], "get_feature_names_out() (sklearn.impute.simpleimputer method)": [[628, "sklearn.impute.SimpleImputer.get_feature_names_out"]], "get_metadata_routing() (sklearn.impute.simpleimputer method)": [[628, "sklearn.impute.SimpleImputer.get_metadata_routing"]], "get_params() (sklearn.impute.simpleimputer method)": [[628, "sklearn.impute.SimpleImputer.get_params"]], "inverse_transform() (sklearn.impute.simpleimputer method)": [[628, "sklearn.impute.SimpleImputer.inverse_transform"]], "set_output() (sklearn.impute.simpleimputer method)": [[628, "sklearn.impute.SimpleImputer.set_output"]], "set_params() (sklearn.impute.simpleimputer method)": [[628, "sklearn.impute.SimpleImputer.set_params"]], "transform() (sklearn.impute.simpleimputer method)": [[628, "sklearn.impute.SimpleImputer.transform"]], "decisionboundarydisplay (class in sklearn.inspection)": [[629, "sklearn.inspection.DecisionBoundaryDisplay"]], "from_estimator() (sklearn.inspection.decisionboundarydisplay class method)": [[629, "sklearn.inspection.DecisionBoundaryDisplay.from_estimator"]], "plot() (sklearn.inspection.decisionboundarydisplay method)": [[629, "sklearn.inspection.DecisionBoundaryDisplay.plot"]], "partialdependencedisplay (class in sklearn.inspection)": [[630, "sklearn.inspection.PartialDependenceDisplay"]], "from_estimator() (sklearn.inspection.partialdependencedisplay class method)": [[630, "sklearn.inspection.PartialDependenceDisplay.from_estimator"]], "plot() (sklearn.inspection.partialdependencedisplay method)": [[630, "sklearn.inspection.PartialDependenceDisplay.plot"]], "partial_dependence() (in module sklearn.inspection)": [[631, "sklearn.inspection.partial_dependence"]], "permutation_importance() (in module sklearn.inspection)": [[632, "sklearn.inspection.permutation_importance"]], "isotonicregression (class in sklearn.isotonic)": [[633, "sklearn.isotonic.IsotonicRegression"]], "fit() (sklearn.isotonic.isotonicregression method)": [[633, "sklearn.isotonic.IsotonicRegression.fit"]], "fit_transform() (sklearn.isotonic.isotonicregression method)": [[633, "sklearn.isotonic.IsotonicRegression.fit_transform"]], "get_feature_names_out() (sklearn.isotonic.isotonicregression method)": [[633, "sklearn.isotonic.IsotonicRegression.get_feature_names_out"]], "get_metadata_routing() (sklearn.isotonic.isotonicregression method)": [[633, "sklearn.isotonic.IsotonicRegression.get_metadata_routing"]], "get_params() (sklearn.isotonic.isotonicregression method)": [[633, "sklearn.isotonic.IsotonicRegression.get_params"]], "predict() (sklearn.isotonic.isotonicregression method)": [[633, "sklearn.isotonic.IsotonicRegression.predict"]], "score() (sklearn.isotonic.isotonicregression method)": [[633, "sklearn.isotonic.IsotonicRegression.score"]], "set_fit_request() (sklearn.isotonic.isotonicregression method)": [[633, "sklearn.isotonic.IsotonicRegression.set_fit_request"]], "set_output() (sklearn.isotonic.isotonicregression method)": [[633, "sklearn.isotonic.IsotonicRegression.set_output"]], "set_params() (sklearn.isotonic.isotonicregression method)": [[633, "sklearn.isotonic.IsotonicRegression.set_params"]], "set_predict_request() (sklearn.isotonic.isotonicregression method)": [[633, "sklearn.isotonic.IsotonicRegression.set_predict_request"]], "set_score_request() (sklearn.isotonic.isotonicregression method)": [[633, "sklearn.isotonic.IsotonicRegression.set_score_request"]], "set_transform_request() (sklearn.isotonic.isotonicregression method)": [[633, "sklearn.isotonic.IsotonicRegression.set_transform_request"]], "transform() (sklearn.isotonic.isotonicregression method)": [[633, "sklearn.isotonic.IsotonicRegression.transform"]], "check_increasing() (in module sklearn.isotonic)": [[634, "sklearn.isotonic.check_increasing"]], "isotonic_regression() (in module sklearn.isotonic)": [[635, "sklearn.isotonic.isotonic_regression"]], "additivechi2sampler (class in sklearn.kernel_approximation)": [[636, "sklearn.kernel_approximation.AdditiveChi2Sampler"]], "fit() (sklearn.kernel_approximation.additivechi2sampler method)": [[636, "sklearn.kernel_approximation.AdditiveChi2Sampler.fit"]], "fit_transform() (sklearn.kernel_approximation.additivechi2sampler method)": [[636, "sklearn.kernel_approximation.AdditiveChi2Sampler.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.additivechi2sampler method)": [[636, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_feature_names_out"]], "get_metadata_routing() (sklearn.kernel_approximation.additivechi2sampler method)": [[636, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_metadata_routing"]], "get_params() (sklearn.kernel_approximation.additivechi2sampler method)": [[636, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_params"]], "set_output() (sklearn.kernel_approximation.additivechi2sampler method)": [[636, "sklearn.kernel_approximation.AdditiveChi2Sampler.set_output"]], "set_params() (sklearn.kernel_approximation.additivechi2sampler method)": [[636, "sklearn.kernel_approximation.AdditiveChi2Sampler.set_params"]], "transform() (sklearn.kernel_approximation.additivechi2sampler method)": [[636, "sklearn.kernel_approximation.AdditiveChi2Sampler.transform"]], "nystroem (class in sklearn.kernel_approximation)": [[637, "sklearn.kernel_approximation.Nystroem"]], "fit() (sklearn.kernel_approximation.nystroem method)": [[637, "sklearn.kernel_approximation.Nystroem.fit"]], "fit_transform() (sklearn.kernel_approximation.nystroem method)": [[637, "sklearn.kernel_approximation.Nystroem.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.nystroem method)": [[637, "sklearn.kernel_approximation.Nystroem.get_feature_names_out"]], "get_metadata_routing() (sklearn.kernel_approximation.nystroem method)": [[637, "sklearn.kernel_approximation.Nystroem.get_metadata_routing"]], "get_params() (sklearn.kernel_approximation.nystroem method)": [[637, "sklearn.kernel_approximation.Nystroem.get_params"]], "set_output() (sklearn.kernel_approximation.nystroem method)": [[637, "sklearn.kernel_approximation.Nystroem.set_output"]], "set_params() (sklearn.kernel_approximation.nystroem method)": [[637, "sklearn.kernel_approximation.Nystroem.set_params"]], "transform() (sklearn.kernel_approximation.nystroem method)": [[637, "sklearn.kernel_approximation.Nystroem.transform"]], "polynomialcountsketch (class in sklearn.kernel_approximation)": [[638, "sklearn.kernel_approximation.PolynomialCountSketch"]], "fit() (sklearn.kernel_approximation.polynomialcountsketch method)": [[638, "sklearn.kernel_approximation.PolynomialCountSketch.fit"]], "fit_transform() (sklearn.kernel_approximation.polynomialcountsketch method)": [[638, "sklearn.kernel_approximation.PolynomialCountSketch.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.polynomialcountsketch method)": [[638, "sklearn.kernel_approximation.PolynomialCountSketch.get_feature_names_out"]], "get_metadata_routing() (sklearn.kernel_approximation.polynomialcountsketch method)": [[638, "sklearn.kernel_approximation.PolynomialCountSketch.get_metadata_routing"]], "get_params() (sklearn.kernel_approximation.polynomialcountsketch method)": [[638, "sklearn.kernel_approximation.PolynomialCountSketch.get_params"]], "set_output() (sklearn.kernel_approximation.polynomialcountsketch method)": [[638, "sklearn.kernel_approximation.PolynomialCountSketch.set_output"]], "set_params() (sklearn.kernel_approximation.polynomialcountsketch method)": [[638, "sklearn.kernel_approximation.PolynomialCountSketch.set_params"]], "transform() (sklearn.kernel_approximation.polynomialcountsketch method)": [[638, "sklearn.kernel_approximation.PolynomialCountSketch.transform"]], "rbfsampler (class in sklearn.kernel_approximation)": [[639, "sklearn.kernel_approximation.RBFSampler"]], "fit() (sklearn.kernel_approximation.rbfsampler method)": [[639, "sklearn.kernel_approximation.RBFSampler.fit"]], "fit_transform() (sklearn.kernel_approximation.rbfsampler method)": [[639, "sklearn.kernel_approximation.RBFSampler.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.rbfsampler method)": [[639, "sklearn.kernel_approximation.RBFSampler.get_feature_names_out"]], "get_metadata_routing() (sklearn.kernel_approximation.rbfsampler method)": [[639, "sklearn.kernel_approximation.RBFSampler.get_metadata_routing"]], "get_params() (sklearn.kernel_approximation.rbfsampler method)": [[639, "sklearn.kernel_approximation.RBFSampler.get_params"]], "set_output() (sklearn.kernel_approximation.rbfsampler method)": [[639, "sklearn.kernel_approximation.RBFSampler.set_output"]], "set_params() (sklearn.kernel_approximation.rbfsampler method)": [[639, "sklearn.kernel_approximation.RBFSampler.set_params"]], "transform() (sklearn.kernel_approximation.rbfsampler method)": [[639, "sklearn.kernel_approximation.RBFSampler.transform"]], "skewedchi2sampler (class in sklearn.kernel_approximation)": [[640, "sklearn.kernel_approximation.SkewedChi2Sampler"]], "fit() (sklearn.kernel_approximation.skewedchi2sampler method)": [[640, "sklearn.kernel_approximation.SkewedChi2Sampler.fit"]], "fit_transform() (sklearn.kernel_approximation.skewedchi2sampler method)": [[640, "sklearn.kernel_approximation.SkewedChi2Sampler.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.skewedchi2sampler method)": [[640, "sklearn.kernel_approximation.SkewedChi2Sampler.get_feature_names_out"]], "get_metadata_routing() (sklearn.kernel_approximation.skewedchi2sampler method)": [[640, "sklearn.kernel_approximation.SkewedChi2Sampler.get_metadata_routing"]], "get_params() (sklearn.kernel_approximation.skewedchi2sampler method)": [[640, "sklearn.kernel_approximation.SkewedChi2Sampler.get_params"]], "set_output() (sklearn.kernel_approximation.skewedchi2sampler method)": [[640, "sklearn.kernel_approximation.SkewedChi2Sampler.set_output"]], "set_params() (sklearn.kernel_approximation.skewedchi2sampler method)": [[640, "sklearn.kernel_approximation.SkewedChi2Sampler.set_params"]], "transform() (sklearn.kernel_approximation.skewedchi2sampler method)": [[640, "sklearn.kernel_approximation.SkewedChi2Sampler.transform"]], "kernelridge (class in sklearn.kernel_ridge)": [[641, "sklearn.kernel_ridge.KernelRidge"]], "fit() (sklearn.kernel_ridge.kernelridge method)": [[641, "sklearn.kernel_ridge.KernelRidge.fit"]], "get_metadata_routing() (sklearn.kernel_ridge.kernelridge method)": [[641, "sklearn.kernel_ridge.KernelRidge.get_metadata_routing"]], "get_params() (sklearn.kernel_ridge.kernelridge method)": [[641, "sklearn.kernel_ridge.KernelRidge.get_params"]], "predict() (sklearn.kernel_ridge.kernelridge method)": [[641, "sklearn.kernel_ridge.KernelRidge.predict"]], "score() (sklearn.kernel_ridge.kernelridge method)": [[641, "sklearn.kernel_ridge.KernelRidge.score"]], "set_fit_request() (sklearn.kernel_ridge.kernelridge method)": [[641, "sklearn.kernel_ridge.KernelRidge.set_fit_request"]], "set_params() (sklearn.kernel_ridge.kernelridge method)": [[641, "sklearn.kernel_ridge.KernelRidge.set_params"]], "set_score_request() (sklearn.kernel_ridge.kernelridge method)": [[641, "sklearn.kernel_ridge.KernelRidge.set_score_request"]], "ardregression (class in sklearn.linear_model)": [[642, "sklearn.linear_model.ARDRegression"]], "fit() (sklearn.linear_model.ardregression method)": [[642, "sklearn.linear_model.ARDRegression.fit"]], "get_metadata_routing() (sklearn.linear_model.ardregression method)": [[642, "sklearn.linear_model.ARDRegression.get_metadata_routing"]], "get_params() (sklearn.linear_model.ardregression method)": [[642, "sklearn.linear_model.ARDRegression.get_params"]], "predict() (sklearn.linear_model.ardregression method)": [[642, "sklearn.linear_model.ARDRegression.predict"]], "score() (sklearn.linear_model.ardregression method)": [[642, "sklearn.linear_model.ARDRegression.score"]], "set_params() (sklearn.linear_model.ardregression method)": [[642, "sklearn.linear_model.ARDRegression.set_params"]], "set_predict_request() (sklearn.linear_model.ardregression method)": [[642, "sklearn.linear_model.ARDRegression.set_predict_request"]], "set_score_request() (sklearn.linear_model.ardregression method)": [[642, "sklearn.linear_model.ARDRegression.set_score_request"]], "bayesianridge (class in sklearn.linear_model)": [[643, "sklearn.linear_model.BayesianRidge"]], "fit() (sklearn.linear_model.bayesianridge method)": [[643, "sklearn.linear_model.BayesianRidge.fit"]], "get_metadata_routing() (sklearn.linear_model.bayesianridge method)": [[643, "sklearn.linear_model.BayesianRidge.get_metadata_routing"]], "get_params() (sklearn.linear_model.bayesianridge method)": [[643, "sklearn.linear_model.BayesianRidge.get_params"]], "predict() (sklearn.linear_model.bayesianridge method)": [[643, "sklearn.linear_model.BayesianRidge.predict"]], "score() (sklearn.linear_model.bayesianridge method)": [[643, "sklearn.linear_model.BayesianRidge.score"]], "set_fit_request() (sklearn.linear_model.bayesianridge method)": [[643, "sklearn.linear_model.BayesianRidge.set_fit_request"]], "set_params() (sklearn.linear_model.bayesianridge method)": [[643, "sklearn.linear_model.BayesianRidge.set_params"]], "set_predict_request() (sklearn.linear_model.bayesianridge method)": [[643, "sklearn.linear_model.BayesianRidge.set_predict_request"]], "set_score_request() (sklearn.linear_model.bayesianridge method)": [[643, "sklearn.linear_model.BayesianRidge.set_score_request"]], "elasticnet (class in sklearn.linear_model)": [[644, "sklearn.linear_model.ElasticNet"]], "fit() (sklearn.linear_model.elasticnet method)": [[644, "sklearn.linear_model.ElasticNet.fit"]], "get_metadata_routing() (sklearn.linear_model.elasticnet method)": [[644, "sklearn.linear_model.ElasticNet.get_metadata_routing"]], "get_params() (sklearn.linear_model.elasticnet method)": [[644, "sklearn.linear_model.ElasticNet.get_params"]], "path() (sklearn.linear_model.elasticnet static method)": [[644, "sklearn.linear_model.ElasticNet.path"]], "predict() (sklearn.linear_model.elasticnet method)": [[644, "sklearn.linear_model.ElasticNet.predict"]], "score() (sklearn.linear_model.elasticnet method)": [[644, "sklearn.linear_model.ElasticNet.score"]], "set_fit_request() (sklearn.linear_model.elasticnet method)": [[644, "sklearn.linear_model.ElasticNet.set_fit_request"]], "set_params() (sklearn.linear_model.elasticnet method)": [[644, "sklearn.linear_model.ElasticNet.set_params"]], "set_score_request() (sklearn.linear_model.elasticnet method)": [[644, "sklearn.linear_model.ElasticNet.set_score_request"]], "sparse_coef_ (sklearn.linear_model.elasticnet property)": [[644, "sklearn.linear_model.ElasticNet.sparse_coef_"]], "elasticnetcv (class in sklearn.linear_model)": [[645, "sklearn.linear_model.ElasticNetCV"]], "fit() (sklearn.linear_model.elasticnetcv method)": [[645, "sklearn.linear_model.ElasticNetCV.fit"]], "get_metadata_routing() (sklearn.linear_model.elasticnetcv method)": [[645, "sklearn.linear_model.ElasticNetCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.elasticnetcv method)": [[645, "sklearn.linear_model.ElasticNetCV.get_params"]], "path() (sklearn.linear_model.elasticnetcv static method)": [[645, "sklearn.linear_model.ElasticNetCV.path"]], "predict() (sklearn.linear_model.elasticnetcv method)": [[645, "sklearn.linear_model.ElasticNetCV.predict"]], "score() (sklearn.linear_model.elasticnetcv method)": [[645, "sklearn.linear_model.ElasticNetCV.score"]], "set_fit_request() (sklearn.linear_model.elasticnetcv method)": [[645, "sklearn.linear_model.ElasticNetCV.set_fit_request"]], "set_params() (sklearn.linear_model.elasticnetcv method)": [[645, "sklearn.linear_model.ElasticNetCV.set_params"]], "set_score_request() (sklearn.linear_model.elasticnetcv method)": [[645, "sklearn.linear_model.ElasticNetCV.set_score_request"]], "gammaregressor (class in sklearn.linear_model)": [[646, "sklearn.linear_model.GammaRegressor"]], "fit() (sklearn.linear_model.gammaregressor method)": [[646, "sklearn.linear_model.GammaRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.gammaregressor method)": [[646, "sklearn.linear_model.GammaRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.gammaregressor method)": [[646, "sklearn.linear_model.GammaRegressor.get_params"]], "predict() (sklearn.linear_model.gammaregressor method)": [[646, "sklearn.linear_model.GammaRegressor.predict"]], "score() (sklearn.linear_model.gammaregressor method)": [[646, "sklearn.linear_model.GammaRegressor.score"]], "set_fit_request() (sklearn.linear_model.gammaregressor method)": [[646, "sklearn.linear_model.GammaRegressor.set_fit_request"]], "set_params() (sklearn.linear_model.gammaregressor method)": [[646, "sklearn.linear_model.GammaRegressor.set_params"]], "set_score_request() (sklearn.linear_model.gammaregressor method)": [[646, "sklearn.linear_model.GammaRegressor.set_score_request"]], "huberregressor (class in sklearn.linear_model)": [[647, "sklearn.linear_model.HuberRegressor"]], "fit() (sklearn.linear_model.huberregressor method)": [[647, "sklearn.linear_model.HuberRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.huberregressor method)": [[647, "sklearn.linear_model.HuberRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.huberregressor method)": [[647, "sklearn.linear_model.HuberRegressor.get_params"]], "predict() (sklearn.linear_model.huberregressor method)": [[647, "sklearn.linear_model.HuberRegressor.predict"]], "score() (sklearn.linear_model.huberregressor method)": [[647, "sklearn.linear_model.HuberRegressor.score"]], "set_fit_request() (sklearn.linear_model.huberregressor method)": [[647, "sklearn.linear_model.HuberRegressor.set_fit_request"]], "set_params() (sklearn.linear_model.huberregressor method)": [[647, "sklearn.linear_model.HuberRegressor.set_params"]], "set_score_request() (sklearn.linear_model.huberregressor method)": [[647, "sklearn.linear_model.HuberRegressor.set_score_request"]], "lars (class in sklearn.linear_model)": [[648, "sklearn.linear_model.Lars"]], "fit() (sklearn.linear_model.lars method)": [[648, "sklearn.linear_model.Lars.fit"]], "get_metadata_routing() (sklearn.linear_model.lars method)": [[648, "sklearn.linear_model.Lars.get_metadata_routing"]], "get_params() (sklearn.linear_model.lars method)": [[648, "sklearn.linear_model.Lars.get_params"]], "predict() (sklearn.linear_model.lars method)": [[648, "sklearn.linear_model.Lars.predict"]], "score() (sklearn.linear_model.lars method)": [[648, "sklearn.linear_model.Lars.score"]], "set_fit_request() (sklearn.linear_model.lars method)": [[648, "sklearn.linear_model.Lars.set_fit_request"]], "set_params() (sklearn.linear_model.lars method)": [[648, "sklearn.linear_model.Lars.set_params"]], "set_score_request() (sklearn.linear_model.lars method)": [[648, "sklearn.linear_model.Lars.set_score_request"]], "larscv (class in sklearn.linear_model)": [[649, "sklearn.linear_model.LarsCV"]], "fit() (sklearn.linear_model.larscv method)": [[649, "sklearn.linear_model.LarsCV.fit"]], "get_metadata_routing() (sklearn.linear_model.larscv method)": [[649, "sklearn.linear_model.LarsCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.larscv method)": [[649, "sklearn.linear_model.LarsCV.get_params"]], "predict() (sklearn.linear_model.larscv method)": [[649, "sklearn.linear_model.LarsCV.predict"]], "score() (sklearn.linear_model.larscv method)": [[649, "sklearn.linear_model.LarsCV.score"]], "set_fit_request() (sklearn.linear_model.larscv method)": [[649, "sklearn.linear_model.LarsCV.set_fit_request"]], "set_params() (sklearn.linear_model.larscv method)": [[649, "sklearn.linear_model.LarsCV.set_params"]], "set_score_request() (sklearn.linear_model.larscv method)": [[649, "sklearn.linear_model.LarsCV.set_score_request"]], "lasso (class in sklearn.linear_model)": [[650, "sklearn.linear_model.Lasso"]], "fit() (sklearn.linear_model.lasso method)": [[650, "sklearn.linear_model.Lasso.fit"]], "get_metadata_routing() (sklearn.linear_model.lasso method)": [[650, "sklearn.linear_model.Lasso.get_metadata_routing"]], "get_params() (sklearn.linear_model.lasso method)": [[650, "sklearn.linear_model.Lasso.get_params"]], "path() (sklearn.linear_model.lasso static method)": [[650, "sklearn.linear_model.Lasso.path"]], "predict() (sklearn.linear_model.lasso method)": [[650, "sklearn.linear_model.Lasso.predict"]], "score() (sklearn.linear_model.lasso method)": [[650, "sklearn.linear_model.Lasso.score"]], "set_fit_request() (sklearn.linear_model.lasso method)": [[650, "sklearn.linear_model.Lasso.set_fit_request"]], "set_params() (sklearn.linear_model.lasso method)": [[650, "sklearn.linear_model.Lasso.set_params"]], "set_score_request() (sklearn.linear_model.lasso method)": [[650, "sklearn.linear_model.Lasso.set_score_request"]], "sparse_coef_ (sklearn.linear_model.lasso property)": [[650, "sklearn.linear_model.Lasso.sparse_coef_"]], "lassocv (class in sklearn.linear_model)": [[651, "sklearn.linear_model.LassoCV"]], "fit() (sklearn.linear_model.lassocv method)": [[651, "sklearn.linear_model.LassoCV.fit"]], "get_metadata_routing() (sklearn.linear_model.lassocv method)": [[651, "sklearn.linear_model.LassoCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.lassocv method)": [[651, "sklearn.linear_model.LassoCV.get_params"]], "path() (sklearn.linear_model.lassocv static method)": [[651, "sklearn.linear_model.LassoCV.path"]], "predict() (sklearn.linear_model.lassocv method)": [[651, "sklearn.linear_model.LassoCV.predict"]], "score() (sklearn.linear_model.lassocv method)": [[651, "sklearn.linear_model.LassoCV.score"]], "set_fit_request() (sklearn.linear_model.lassocv method)": [[651, "sklearn.linear_model.LassoCV.set_fit_request"]], "set_params() (sklearn.linear_model.lassocv method)": [[651, "sklearn.linear_model.LassoCV.set_params"]], "set_score_request() (sklearn.linear_model.lassocv method)": [[651, "sklearn.linear_model.LassoCV.set_score_request"]], "lassolars (class in sklearn.linear_model)": [[652, "sklearn.linear_model.LassoLars"]], "fit() (sklearn.linear_model.lassolars method)": [[652, "sklearn.linear_model.LassoLars.fit"]], "get_metadata_routing() (sklearn.linear_model.lassolars method)": [[652, "sklearn.linear_model.LassoLars.get_metadata_routing"]], "get_params() (sklearn.linear_model.lassolars method)": [[652, "sklearn.linear_model.LassoLars.get_params"]], "predict() (sklearn.linear_model.lassolars method)": [[652, "sklearn.linear_model.LassoLars.predict"]], "score() (sklearn.linear_model.lassolars method)": [[652, "sklearn.linear_model.LassoLars.score"]], "set_fit_request() (sklearn.linear_model.lassolars method)": [[652, "sklearn.linear_model.LassoLars.set_fit_request"]], "set_params() (sklearn.linear_model.lassolars method)": [[652, "sklearn.linear_model.LassoLars.set_params"]], "set_score_request() (sklearn.linear_model.lassolars method)": [[652, "sklearn.linear_model.LassoLars.set_score_request"]], "lassolarscv (class in sklearn.linear_model)": [[653, "sklearn.linear_model.LassoLarsCV"]], "fit() (sklearn.linear_model.lassolarscv method)": [[653, "sklearn.linear_model.LassoLarsCV.fit"]], "get_metadata_routing() (sklearn.linear_model.lassolarscv method)": [[653, "sklearn.linear_model.LassoLarsCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.lassolarscv method)": [[653, "sklearn.linear_model.LassoLarsCV.get_params"]], "predict() (sklearn.linear_model.lassolarscv method)": [[653, "sklearn.linear_model.LassoLarsCV.predict"]], "score() (sklearn.linear_model.lassolarscv method)": [[653, "sklearn.linear_model.LassoLarsCV.score"]], "set_fit_request() (sklearn.linear_model.lassolarscv method)": [[653, "sklearn.linear_model.LassoLarsCV.set_fit_request"]], "set_params() (sklearn.linear_model.lassolarscv method)": [[653, "sklearn.linear_model.LassoLarsCV.set_params"]], "set_score_request() (sklearn.linear_model.lassolarscv method)": [[653, "sklearn.linear_model.LassoLarsCV.set_score_request"]], "lassolarsic (class in sklearn.linear_model)": [[654, "sklearn.linear_model.LassoLarsIC"]], "fit() (sklearn.linear_model.lassolarsic method)": [[654, "sklearn.linear_model.LassoLarsIC.fit"]], "get_metadata_routing() (sklearn.linear_model.lassolarsic method)": [[654, "sklearn.linear_model.LassoLarsIC.get_metadata_routing"]], "get_params() (sklearn.linear_model.lassolarsic method)": [[654, "sklearn.linear_model.LassoLarsIC.get_params"]], "predict() (sklearn.linear_model.lassolarsic method)": [[654, "sklearn.linear_model.LassoLarsIC.predict"]], "score() (sklearn.linear_model.lassolarsic method)": [[654, "sklearn.linear_model.LassoLarsIC.score"]], "set_fit_request() (sklearn.linear_model.lassolarsic method)": [[654, "sklearn.linear_model.LassoLarsIC.set_fit_request"]], "set_params() (sklearn.linear_model.lassolarsic method)": [[654, "sklearn.linear_model.LassoLarsIC.set_params"]], "set_score_request() (sklearn.linear_model.lassolarsic method)": [[654, "sklearn.linear_model.LassoLarsIC.set_score_request"]], "linearregression (class in sklearn.linear_model)": [[655, "sklearn.linear_model.LinearRegression"]], "fit() (sklearn.linear_model.linearregression method)": [[655, "sklearn.linear_model.LinearRegression.fit"]], "get_metadata_routing() (sklearn.linear_model.linearregression method)": [[655, "sklearn.linear_model.LinearRegression.get_metadata_routing"]], "get_params() (sklearn.linear_model.linearregression method)": [[655, "sklearn.linear_model.LinearRegression.get_params"]], "predict() (sklearn.linear_model.linearregression method)": [[655, "sklearn.linear_model.LinearRegression.predict"]], "score() (sklearn.linear_model.linearregression method)": [[655, "sklearn.linear_model.LinearRegression.score"]], "set_fit_request() (sklearn.linear_model.linearregression method)": [[655, "sklearn.linear_model.LinearRegression.set_fit_request"]], "set_params() (sklearn.linear_model.linearregression method)": [[655, "sklearn.linear_model.LinearRegression.set_params"]], "set_score_request() (sklearn.linear_model.linearregression method)": [[655, "sklearn.linear_model.LinearRegression.set_score_request"]], "logisticregression (class in sklearn.linear_model)": [[656, "sklearn.linear_model.LogisticRegression"]], "decision_function() (sklearn.linear_model.logisticregression method)": [[656, "sklearn.linear_model.LogisticRegression.decision_function"]], "densify() (sklearn.linear_model.logisticregression method)": [[656, "sklearn.linear_model.LogisticRegression.densify"]], "fit() (sklearn.linear_model.logisticregression method)": [[656, "sklearn.linear_model.LogisticRegression.fit"]], "get_metadata_routing() (sklearn.linear_model.logisticregression method)": [[656, "sklearn.linear_model.LogisticRegression.get_metadata_routing"]], "get_params() (sklearn.linear_model.logisticregression method)": [[656, "sklearn.linear_model.LogisticRegression.get_params"]], "predict() (sklearn.linear_model.logisticregression method)": [[656, "sklearn.linear_model.LogisticRegression.predict"]], "predict_log_proba() (sklearn.linear_model.logisticregression method)": [[656, "sklearn.linear_model.LogisticRegression.predict_log_proba"]], "predict_proba() (sklearn.linear_model.logisticregression method)": [[656, "sklearn.linear_model.LogisticRegression.predict_proba"]], "score() (sklearn.linear_model.logisticregression method)": [[656, "sklearn.linear_model.LogisticRegression.score"]], "set_fit_request() (sklearn.linear_model.logisticregression method)": [[656, "sklearn.linear_model.LogisticRegression.set_fit_request"]], "set_params() (sklearn.linear_model.logisticregression method)": [[656, "sklearn.linear_model.LogisticRegression.set_params"]], "set_score_request() (sklearn.linear_model.logisticregression method)": [[656, "sklearn.linear_model.LogisticRegression.set_score_request"]], "sparsify() (sklearn.linear_model.logisticregression method)": [[656, "sklearn.linear_model.LogisticRegression.sparsify"]], "logisticregressioncv (class in sklearn.linear_model)": [[657, "sklearn.linear_model.LogisticRegressionCV"]], "decision_function() (sklearn.linear_model.logisticregressioncv method)": [[657, "sklearn.linear_model.LogisticRegressionCV.decision_function"]], "densify() (sklearn.linear_model.logisticregressioncv method)": [[657, "sklearn.linear_model.LogisticRegressionCV.densify"]], "fit() (sklearn.linear_model.logisticregressioncv method)": [[657, "sklearn.linear_model.LogisticRegressionCV.fit"]], "get_metadata_routing() (sklearn.linear_model.logisticregressioncv method)": [[657, "sklearn.linear_model.LogisticRegressionCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.logisticregressioncv method)": [[657, "sklearn.linear_model.LogisticRegressionCV.get_params"]], "predict() (sklearn.linear_model.logisticregressioncv method)": [[657, "sklearn.linear_model.LogisticRegressionCV.predict"]], "predict_log_proba() (sklearn.linear_model.logisticregressioncv method)": [[657, "sklearn.linear_model.LogisticRegressionCV.predict_log_proba"]], "predict_proba() (sklearn.linear_model.logisticregressioncv method)": [[657, "sklearn.linear_model.LogisticRegressionCV.predict_proba"]], "score() (sklearn.linear_model.logisticregressioncv method)": [[657, "sklearn.linear_model.LogisticRegressionCV.score"]], "set_fit_request() (sklearn.linear_model.logisticregressioncv method)": [[657, "sklearn.linear_model.LogisticRegressionCV.set_fit_request"]], "set_params() (sklearn.linear_model.logisticregressioncv method)": [[657, "sklearn.linear_model.LogisticRegressionCV.set_params"]], "set_score_request() (sklearn.linear_model.logisticregressioncv method)": [[657, "sklearn.linear_model.LogisticRegressionCV.set_score_request"]], "sparsify() (sklearn.linear_model.logisticregressioncv method)": [[657, "sklearn.linear_model.LogisticRegressionCV.sparsify"]], "multitaskelasticnet (class in sklearn.linear_model)": [[658, "sklearn.linear_model.MultiTaskElasticNet"]], "fit() (sklearn.linear_model.multitaskelasticnet method)": [[658, "sklearn.linear_model.MultiTaskElasticNet.fit"]], "get_metadata_routing() (sklearn.linear_model.multitaskelasticnet method)": [[658, "sklearn.linear_model.MultiTaskElasticNet.get_metadata_routing"]], "get_params() (sklearn.linear_model.multitaskelasticnet method)": [[658, "sklearn.linear_model.MultiTaskElasticNet.get_params"]], "path() (sklearn.linear_model.multitaskelasticnet static method)": [[658, "sklearn.linear_model.MultiTaskElasticNet.path"]], "predict() (sklearn.linear_model.multitaskelasticnet method)": [[658, "sklearn.linear_model.MultiTaskElasticNet.predict"]], "score() (sklearn.linear_model.multitaskelasticnet method)": [[658, "sklearn.linear_model.MultiTaskElasticNet.score"]], "set_fit_request() (sklearn.linear_model.multitaskelasticnet method)": [[658, "sklearn.linear_model.MultiTaskElasticNet.set_fit_request"]], "set_params() (sklearn.linear_model.multitaskelasticnet method)": [[658, "sklearn.linear_model.MultiTaskElasticNet.set_params"]], "set_score_request() (sklearn.linear_model.multitaskelasticnet method)": [[658, "sklearn.linear_model.MultiTaskElasticNet.set_score_request"]], "sparse_coef_ (sklearn.linear_model.multitaskelasticnet property)": [[658, "sklearn.linear_model.MultiTaskElasticNet.sparse_coef_"]], "multitaskelasticnetcv (class in sklearn.linear_model)": [[659, "sklearn.linear_model.MultiTaskElasticNetCV"]], "fit() (sklearn.linear_model.multitaskelasticnetcv method)": [[659, "sklearn.linear_model.MultiTaskElasticNetCV.fit"]], "get_metadata_routing() (sklearn.linear_model.multitaskelasticnetcv method)": [[659, "sklearn.linear_model.MultiTaskElasticNetCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.multitaskelasticnetcv method)": [[659, "sklearn.linear_model.MultiTaskElasticNetCV.get_params"]], "path() (sklearn.linear_model.multitaskelasticnetcv static method)": [[659, "sklearn.linear_model.MultiTaskElasticNetCV.path"]], "predict() (sklearn.linear_model.multitaskelasticnetcv method)": [[659, "sklearn.linear_model.MultiTaskElasticNetCV.predict"]], "score() (sklearn.linear_model.multitaskelasticnetcv method)": [[659, "sklearn.linear_model.MultiTaskElasticNetCV.score"]], "set_fit_request() (sklearn.linear_model.multitaskelasticnetcv method)": [[659, "sklearn.linear_model.MultiTaskElasticNetCV.set_fit_request"]], "set_params() (sklearn.linear_model.multitaskelasticnetcv method)": [[659, "sklearn.linear_model.MultiTaskElasticNetCV.set_params"]], "set_score_request() (sklearn.linear_model.multitaskelasticnetcv method)": [[659, "sklearn.linear_model.MultiTaskElasticNetCV.set_score_request"]], "multitasklasso (class in sklearn.linear_model)": [[660, "sklearn.linear_model.MultiTaskLasso"]], "fit() (sklearn.linear_model.multitasklasso method)": [[660, "sklearn.linear_model.MultiTaskLasso.fit"]], "get_metadata_routing() (sklearn.linear_model.multitasklasso method)": [[660, "sklearn.linear_model.MultiTaskLasso.get_metadata_routing"]], "get_params() (sklearn.linear_model.multitasklasso method)": [[660, "sklearn.linear_model.MultiTaskLasso.get_params"]], "path() (sklearn.linear_model.multitasklasso static method)": [[660, "sklearn.linear_model.MultiTaskLasso.path"]], "predict() (sklearn.linear_model.multitasklasso method)": [[660, "sklearn.linear_model.MultiTaskLasso.predict"]], "score() (sklearn.linear_model.multitasklasso method)": [[660, "sklearn.linear_model.MultiTaskLasso.score"]], "set_fit_request() (sklearn.linear_model.multitasklasso method)": [[660, "sklearn.linear_model.MultiTaskLasso.set_fit_request"]], "set_params() (sklearn.linear_model.multitasklasso method)": [[660, "sklearn.linear_model.MultiTaskLasso.set_params"]], "set_score_request() (sklearn.linear_model.multitasklasso method)": [[660, "sklearn.linear_model.MultiTaskLasso.set_score_request"]], "sparse_coef_ (sklearn.linear_model.multitasklasso property)": [[660, "sklearn.linear_model.MultiTaskLasso.sparse_coef_"]], "multitasklassocv (class in sklearn.linear_model)": [[661, "sklearn.linear_model.MultiTaskLassoCV"]], "fit() (sklearn.linear_model.multitasklassocv method)": [[661, "sklearn.linear_model.MultiTaskLassoCV.fit"]], "get_metadata_routing() (sklearn.linear_model.multitasklassocv method)": [[661, "sklearn.linear_model.MultiTaskLassoCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.multitasklassocv method)": [[661, "sklearn.linear_model.MultiTaskLassoCV.get_params"]], "path() (sklearn.linear_model.multitasklassocv static method)": [[661, "sklearn.linear_model.MultiTaskLassoCV.path"]], "predict() (sklearn.linear_model.multitasklassocv method)": [[661, "sklearn.linear_model.MultiTaskLassoCV.predict"]], "score() (sklearn.linear_model.multitasklassocv method)": [[661, "sklearn.linear_model.MultiTaskLassoCV.score"]], "set_fit_request() (sklearn.linear_model.multitasklassocv method)": [[661, "sklearn.linear_model.MultiTaskLassoCV.set_fit_request"]], "set_params() (sklearn.linear_model.multitasklassocv method)": [[661, "sklearn.linear_model.MultiTaskLassoCV.set_params"]], "set_score_request() (sklearn.linear_model.multitasklassocv method)": [[661, "sklearn.linear_model.MultiTaskLassoCV.set_score_request"]], "orthogonalmatchingpursuit (class in sklearn.linear_model)": [[662, "sklearn.linear_model.OrthogonalMatchingPursuit"]], "fit() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[662, "sklearn.linear_model.OrthogonalMatchingPursuit.fit"]], "get_metadata_routing() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[662, "sklearn.linear_model.OrthogonalMatchingPursuit.get_metadata_routing"]], "get_params() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[662, "sklearn.linear_model.OrthogonalMatchingPursuit.get_params"]], "predict() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[662, "sklearn.linear_model.OrthogonalMatchingPursuit.predict"]], "score() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[662, "sklearn.linear_model.OrthogonalMatchingPursuit.score"]], "set_params() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[662, "sklearn.linear_model.OrthogonalMatchingPursuit.set_params"]], "set_score_request() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[662, "sklearn.linear_model.OrthogonalMatchingPursuit.set_score_request"]], "orthogonalmatchingpursuitcv (class in sklearn.linear_model)": [[663, "sklearn.linear_model.OrthogonalMatchingPursuitCV"]], "fit() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[663, "sklearn.linear_model.OrthogonalMatchingPursuitCV.fit"]], "get_metadata_routing() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[663, "sklearn.linear_model.OrthogonalMatchingPursuitCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[663, "sklearn.linear_model.OrthogonalMatchingPursuitCV.get_params"]], "predict() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[663, "sklearn.linear_model.OrthogonalMatchingPursuitCV.predict"]], "score() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[663, "sklearn.linear_model.OrthogonalMatchingPursuitCV.score"]], "set_params() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[663, "sklearn.linear_model.OrthogonalMatchingPursuitCV.set_params"]], "set_score_request() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[663, "sklearn.linear_model.OrthogonalMatchingPursuitCV.set_score_request"]], "passiveaggressiveclassifier (class in sklearn.linear_model)": [[664, "sklearn.linear_model.PassiveAggressiveClassifier"]], "decision_function() (sklearn.linear_model.passiveaggressiveclassifier method)": [[664, "sklearn.linear_model.PassiveAggressiveClassifier.decision_function"]], "densify() (sklearn.linear_model.passiveaggressiveclassifier method)": [[664, "sklearn.linear_model.PassiveAggressiveClassifier.densify"]], "fit() (sklearn.linear_model.passiveaggressiveclassifier method)": [[664, "sklearn.linear_model.PassiveAggressiveClassifier.fit"]], "get_metadata_routing() (sklearn.linear_model.passiveaggressiveclassifier method)": [[664, "sklearn.linear_model.PassiveAggressiveClassifier.get_metadata_routing"]], "get_params() (sklearn.linear_model.passiveaggressiveclassifier method)": [[664, "sklearn.linear_model.PassiveAggressiveClassifier.get_params"]], "partial_fit() (sklearn.linear_model.passiveaggressiveclassifier method)": [[664, "sklearn.linear_model.PassiveAggressiveClassifier.partial_fit"]], "predict() (sklearn.linear_model.passiveaggressiveclassifier method)": [[664, "sklearn.linear_model.PassiveAggressiveClassifier.predict"]], "score() (sklearn.linear_model.passiveaggressiveclassifier method)": [[664, "sklearn.linear_model.PassiveAggressiveClassifier.score"]], "set_fit_request() (sklearn.linear_model.passiveaggressiveclassifier method)": [[664, "sklearn.linear_model.PassiveAggressiveClassifier.set_fit_request"]], "set_params() (sklearn.linear_model.passiveaggressiveclassifier method)": [[664, "sklearn.linear_model.PassiveAggressiveClassifier.set_params"]], "set_partial_fit_request() (sklearn.linear_model.passiveaggressiveclassifier method)": [[664, "sklearn.linear_model.PassiveAggressiveClassifier.set_partial_fit_request"]], "set_score_request() (sklearn.linear_model.passiveaggressiveclassifier method)": [[664, "sklearn.linear_model.PassiveAggressiveClassifier.set_score_request"]], "sparsify() (sklearn.linear_model.passiveaggressiveclassifier method)": [[664, "sklearn.linear_model.PassiveAggressiveClassifier.sparsify"]], "passiveaggressiveregressor (class in sklearn.linear_model)": [[665, "sklearn.linear_model.PassiveAggressiveRegressor"]], "densify() (sklearn.linear_model.passiveaggressiveregressor method)": [[665, "sklearn.linear_model.PassiveAggressiveRegressor.densify"]], "fit() (sklearn.linear_model.passiveaggressiveregressor method)": [[665, "sklearn.linear_model.PassiveAggressiveRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.passiveaggressiveregressor method)": [[665, "sklearn.linear_model.PassiveAggressiveRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.passiveaggressiveregressor method)": [[665, "sklearn.linear_model.PassiveAggressiveRegressor.get_params"]], "partial_fit() (sklearn.linear_model.passiveaggressiveregressor method)": [[665, "sklearn.linear_model.PassiveAggressiveRegressor.partial_fit"]], "predict() (sklearn.linear_model.passiveaggressiveregressor method)": [[665, "sklearn.linear_model.PassiveAggressiveRegressor.predict"]], "score() (sklearn.linear_model.passiveaggressiveregressor method)": [[665, "sklearn.linear_model.PassiveAggressiveRegressor.score"]], "set_fit_request() (sklearn.linear_model.passiveaggressiveregressor method)": [[665, "sklearn.linear_model.PassiveAggressiveRegressor.set_fit_request"]], "set_params() (sklearn.linear_model.passiveaggressiveregressor method)": [[665, "sklearn.linear_model.PassiveAggressiveRegressor.set_params"]], "set_partial_fit_request() (sklearn.linear_model.passiveaggressiveregressor method)": [[665, "sklearn.linear_model.PassiveAggressiveRegressor.set_partial_fit_request"]], "set_score_request() (sklearn.linear_model.passiveaggressiveregressor method)": [[665, "sklearn.linear_model.PassiveAggressiveRegressor.set_score_request"]], "sparsify() (sklearn.linear_model.passiveaggressiveregressor method)": [[665, "sklearn.linear_model.PassiveAggressiveRegressor.sparsify"]], "perceptron (class in sklearn.linear_model)": [[666, "sklearn.linear_model.Perceptron"]], "decision_function() (sklearn.linear_model.perceptron method)": [[666, "sklearn.linear_model.Perceptron.decision_function"]], "densify() (sklearn.linear_model.perceptron method)": [[666, "sklearn.linear_model.Perceptron.densify"]], "fit() (sklearn.linear_model.perceptron method)": [[666, "sklearn.linear_model.Perceptron.fit"]], "get_metadata_routing() (sklearn.linear_model.perceptron method)": [[666, "sklearn.linear_model.Perceptron.get_metadata_routing"]], "get_params() (sklearn.linear_model.perceptron method)": [[666, "sklearn.linear_model.Perceptron.get_params"]], "partial_fit() (sklearn.linear_model.perceptron method)": [[666, "sklearn.linear_model.Perceptron.partial_fit"]], "predict() (sklearn.linear_model.perceptron method)": [[666, "sklearn.linear_model.Perceptron.predict"]], "score() (sklearn.linear_model.perceptron method)": [[666, "sklearn.linear_model.Perceptron.score"]], "set_fit_request() (sklearn.linear_model.perceptron method)": [[666, "sklearn.linear_model.Perceptron.set_fit_request"]], "set_params() (sklearn.linear_model.perceptron method)": [[666, "sklearn.linear_model.Perceptron.set_params"]], "set_partial_fit_request() (sklearn.linear_model.perceptron method)": [[666, "sklearn.linear_model.Perceptron.set_partial_fit_request"]], "set_score_request() (sklearn.linear_model.perceptron method)": [[666, "sklearn.linear_model.Perceptron.set_score_request"]], "sparsify() (sklearn.linear_model.perceptron method)": [[666, "sklearn.linear_model.Perceptron.sparsify"]], "poissonregressor (class in sklearn.linear_model)": [[667, "sklearn.linear_model.PoissonRegressor"]], "fit() (sklearn.linear_model.poissonregressor method)": [[667, "sklearn.linear_model.PoissonRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.poissonregressor method)": [[667, "sklearn.linear_model.PoissonRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.poissonregressor method)": [[667, "sklearn.linear_model.PoissonRegressor.get_params"]], "predict() (sklearn.linear_model.poissonregressor method)": [[667, "sklearn.linear_model.PoissonRegressor.predict"]], "score() (sklearn.linear_model.poissonregressor method)": [[667, "sklearn.linear_model.PoissonRegressor.score"]], "set_fit_request() (sklearn.linear_model.poissonregressor method)": [[667, "sklearn.linear_model.PoissonRegressor.set_fit_request"]], "set_params() (sklearn.linear_model.poissonregressor method)": [[667, "sklearn.linear_model.PoissonRegressor.set_params"]], "set_score_request() (sklearn.linear_model.poissonregressor method)": [[667, "sklearn.linear_model.PoissonRegressor.set_score_request"]], "quantileregressor (class in sklearn.linear_model)": [[668, "sklearn.linear_model.QuantileRegressor"]], "fit() (sklearn.linear_model.quantileregressor method)": [[668, "sklearn.linear_model.QuantileRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.quantileregressor method)": [[668, "sklearn.linear_model.QuantileRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.quantileregressor method)": [[668, "sklearn.linear_model.QuantileRegressor.get_params"]], "predict() (sklearn.linear_model.quantileregressor method)": [[668, "sklearn.linear_model.QuantileRegressor.predict"]], "score() (sklearn.linear_model.quantileregressor method)": [[668, "sklearn.linear_model.QuantileRegressor.score"]], "set_fit_request() (sklearn.linear_model.quantileregressor method)": [[668, "sklearn.linear_model.QuantileRegressor.set_fit_request"]], "set_params() (sklearn.linear_model.quantileregressor method)": [[668, "sklearn.linear_model.QuantileRegressor.set_params"]], "set_score_request() (sklearn.linear_model.quantileregressor method)": [[668, "sklearn.linear_model.QuantileRegressor.set_score_request"]], "ransacregressor (class in sklearn.linear_model)": [[669, "sklearn.linear_model.RANSACRegressor"]], "fit() (sklearn.linear_model.ransacregressor method)": [[669, "sklearn.linear_model.RANSACRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.ransacregressor method)": [[669, "sklearn.linear_model.RANSACRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.ransacregressor method)": [[669, "sklearn.linear_model.RANSACRegressor.get_params"]], "predict() (sklearn.linear_model.ransacregressor method)": [[669, "sklearn.linear_model.RANSACRegressor.predict"]], "score() (sklearn.linear_model.ransacregressor method)": [[669, "sklearn.linear_model.RANSACRegressor.score"]], "set_fit_request() (sklearn.linear_model.ransacregressor method)": [[669, "sklearn.linear_model.RANSACRegressor.set_fit_request"]], "set_params() (sklearn.linear_model.ransacregressor method)": [[669, "sklearn.linear_model.RANSACRegressor.set_params"]], "ridge (class in sklearn.linear_model)": [[670, "sklearn.linear_model.Ridge"]], "fit() (sklearn.linear_model.ridge method)": [[670, "sklearn.linear_model.Ridge.fit"]], "get_metadata_routing() (sklearn.linear_model.ridge method)": [[670, "sklearn.linear_model.Ridge.get_metadata_routing"]], "get_params() (sklearn.linear_model.ridge method)": [[670, "sklearn.linear_model.Ridge.get_params"]], "predict() (sklearn.linear_model.ridge method)": [[670, "sklearn.linear_model.Ridge.predict"]], "score() (sklearn.linear_model.ridge method)": [[670, "sklearn.linear_model.Ridge.score"]], "set_fit_request() (sklearn.linear_model.ridge method)": [[670, "sklearn.linear_model.Ridge.set_fit_request"]], "set_params() (sklearn.linear_model.ridge method)": [[670, "sklearn.linear_model.Ridge.set_params"]], "set_score_request() (sklearn.linear_model.ridge method)": [[670, "sklearn.linear_model.Ridge.set_score_request"]], "ridgecv (class in sklearn.linear_model)": [[671, "sklearn.linear_model.RidgeCV"]], "fit() (sklearn.linear_model.ridgecv method)": [[671, "sklearn.linear_model.RidgeCV.fit"]], "get_metadata_routing() (sklearn.linear_model.ridgecv method)": [[671, "sklearn.linear_model.RidgeCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.ridgecv method)": [[671, "sklearn.linear_model.RidgeCV.get_params"]], "predict() (sklearn.linear_model.ridgecv method)": [[671, "sklearn.linear_model.RidgeCV.predict"]], "score() (sklearn.linear_model.ridgecv method)": [[671, "sklearn.linear_model.RidgeCV.score"]], "set_fit_request() (sklearn.linear_model.ridgecv method)": [[671, "sklearn.linear_model.RidgeCV.set_fit_request"]], "set_params() (sklearn.linear_model.ridgecv method)": [[671, "sklearn.linear_model.RidgeCV.set_params"]], "set_score_request() (sklearn.linear_model.ridgecv method)": [[671, "sklearn.linear_model.RidgeCV.set_score_request"]], "ridgeclassifier (class in sklearn.linear_model)": [[672, "sklearn.linear_model.RidgeClassifier"]], "classes_ (sklearn.linear_model.ridgeclassifier property)": [[672, "sklearn.linear_model.RidgeClassifier.classes_"]], "decision_function() (sklearn.linear_model.ridgeclassifier method)": [[672, "sklearn.linear_model.RidgeClassifier.decision_function"]], "fit() (sklearn.linear_model.ridgeclassifier method)": [[672, "sklearn.linear_model.RidgeClassifier.fit"]], "get_metadata_routing() (sklearn.linear_model.ridgeclassifier method)": [[672, "sklearn.linear_model.RidgeClassifier.get_metadata_routing"]], "get_params() (sklearn.linear_model.ridgeclassifier method)": [[672, "sklearn.linear_model.RidgeClassifier.get_params"]], "predict() (sklearn.linear_model.ridgeclassifier method)": [[672, "sklearn.linear_model.RidgeClassifier.predict"]], "score() (sklearn.linear_model.ridgeclassifier method)": [[672, "sklearn.linear_model.RidgeClassifier.score"]], "set_fit_request() (sklearn.linear_model.ridgeclassifier method)": [[672, "sklearn.linear_model.RidgeClassifier.set_fit_request"]], "set_params() (sklearn.linear_model.ridgeclassifier method)": [[672, "sklearn.linear_model.RidgeClassifier.set_params"]], "set_score_request() (sklearn.linear_model.ridgeclassifier method)": [[672, "sklearn.linear_model.RidgeClassifier.set_score_request"]], "ridgeclassifiercv (class in sklearn.linear_model)": [[673, "sklearn.linear_model.RidgeClassifierCV"]], "classes_ (sklearn.linear_model.ridgeclassifiercv property)": [[673, "sklearn.linear_model.RidgeClassifierCV.classes_"]], "decision_function() (sklearn.linear_model.ridgeclassifiercv method)": [[673, "sklearn.linear_model.RidgeClassifierCV.decision_function"]], "fit() (sklearn.linear_model.ridgeclassifiercv method)": [[673, "sklearn.linear_model.RidgeClassifierCV.fit"]], "get_metadata_routing() (sklearn.linear_model.ridgeclassifiercv method)": [[673, "sklearn.linear_model.RidgeClassifierCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.ridgeclassifiercv method)": [[673, "sklearn.linear_model.RidgeClassifierCV.get_params"]], "predict() (sklearn.linear_model.ridgeclassifiercv method)": [[673, "sklearn.linear_model.RidgeClassifierCV.predict"]], "score() (sklearn.linear_model.ridgeclassifiercv method)": [[673, "sklearn.linear_model.RidgeClassifierCV.score"]], "set_fit_request() (sklearn.linear_model.ridgeclassifiercv method)": [[673, "sklearn.linear_model.RidgeClassifierCV.set_fit_request"]], "set_params() (sklearn.linear_model.ridgeclassifiercv method)": [[673, "sklearn.linear_model.RidgeClassifierCV.set_params"]], "set_score_request() (sklearn.linear_model.ridgeclassifiercv method)": [[673, "sklearn.linear_model.RidgeClassifierCV.set_score_request"]], "sgdclassifier (class in sklearn.linear_model)": [[674, "sklearn.linear_model.SGDClassifier"]], "decision_function() (sklearn.linear_model.sgdclassifier method)": [[674, "sklearn.linear_model.SGDClassifier.decision_function"]], "densify() (sklearn.linear_model.sgdclassifier method)": [[674, "sklearn.linear_model.SGDClassifier.densify"]], "fit() (sklearn.linear_model.sgdclassifier method)": [[674, "sklearn.linear_model.SGDClassifier.fit"]], "get_metadata_routing() (sklearn.linear_model.sgdclassifier method)": [[674, "sklearn.linear_model.SGDClassifier.get_metadata_routing"]], "get_params() (sklearn.linear_model.sgdclassifier method)": [[674, "sklearn.linear_model.SGDClassifier.get_params"]], "partial_fit() (sklearn.linear_model.sgdclassifier method)": [[674, "sklearn.linear_model.SGDClassifier.partial_fit"]], "predict() (sklearn.linear_model.sgdclassifier method)": [[674, "sklearn.linear_model.SGDClassifier.predict"]], "predict_log_proba() (sklearn.linear_model.sgdclassifier method)": [[674, "sklearn.linear_model.SGDClassifier.predict_log_proba"]], "predict_proba() (sklearn.linear_model.sgdclassifier method)": [[674, "sklearn.linear_model.SGDClassifier.predict_proba"]], "score() (sklearn.linear_model.sgdclassifier method)": [[674, "sklearn.linear_model.SGDClassifier.score"]], "set_fit_request() (sklearn.linear_model.sgdclassifier method)": [[674, "sklearn.linear_model.SGDClassifier.set_fit_request"]], "set_params() (sklearn.linear_model.sgdclassifier method)": [[674, "sklearn.linear_model.SGDClassifier.set_params"]], "set_partial_fit_request() (sklearn.linear_model.sgdclassifier method)": [[674, "sklearn.linear_model.SGDClassifier.set_partial_fit_request"]], "set_score_request() (sklearn.linear_model.sgdclassifier method)": [[674, "sklearn.linear_model.SGDClassifier.set_score_request"]], "sparsify() (sklearn.linear_model.sgdclassifier method)": [[674, "sklearn.linear_model.SGDClassifier.sparsify"]], "sgdoneclasssvm (class in sklearn.linear_model)": [[675, "sklearn.linear_model.SGDOneClassSVM"]], "decision_function() (sklearn.linear_model.sgdoneclasssvm method)": [[675, "sklearn.linear_model.SGDOneClassSVM.decision_function"]], "densify() (sklearn.linear_model.sgdoneclasssvm method)": [[675, "sklearn.linear_model.SGDOneClassSVM.densify"]], "fit() (sklearn.linear_model.sgdoneclasssvm method)": [[675, "sklearn.linear_model.SGDOneClassSVM.fit"]], "fit_predict() (sklearn.linear_model.sgdoneclasssvm method)": [[675, "sklearn.linear_model.SGDOneClassSVM.fit_predict"]], "get_metadata_routing() (sklearn.linear_model.sgdoneclasssvm method)": [[675, "sklearn.linear_model.SGDOneClassSVM.get_metadata_routing"]], "get_params() (sklearn.linear_model.sgdoneclasssvm method)": [[675, "sklearn.linear_model.SGDOneClassSVM.get_params"]], "partial_fit() (sklearn.linear_model.sgdoneclasssvm method)": [[675, "sklearn.linear_model.SGDOneClassSVM.partial_fit"]], "predict() (sklearn.linear_model.sgdoneclasssvm method)": [[675, "sklearn.linear_model.SGDOneClassSVM.predict"]], "score_samples() (sklearn.linear_model.sgdoneclasssvm method)": [[675, "sklearn.linear_model.SGDOneClassSVM.score_samples"]], "set_fit_request() (sklearn.linear_model.sgdoneclasssvm method)": [[675, "sklearn.linear_model.SGDOneClassSVM.set_fit_request"]], "set_params() (sklearn.linear_model.sgdoneclasssvm method)": [[675, "sklearn.linear_model.SGDOneClassSVM.set_params"]], "set_partial_fit_request() (sklearn.linear_model.sgdoneclasssvm method)": [[675, "sklearn.linear_model.SGDOneClassSVM.set_partial_fit_request"]], "sparsify() (sklearn.linear_model.sgdoneclasssvm method)": [[675, "sklearn.linear_model.SGDOneClassSVM.sparsify"]], "sgdregressor (class in sklearn.linear_model)": [[676, "sklearn.linear_model.SGDRegressor"]], "densify() (sklearn.linear_model.sgdregressor method)": [[676, "sklearn.linear_model.SGDRegressor.densify"]], "fit() (sklearn.linear_model.sgdregressor method)": [[676, "sklearn.linear_model.SGDRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.sgdregressor method)": [[676, "sklearn.linear_model.SGDRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.sgdregressor method)": [[676, "sklearn.linear_model.SGDRegressor.get_params"]], "partial_fit() (sklearn.linear_model.sgdregressor method)": [[676, "sklearn.linear_model.SGDRegressor.partial_fit"]], "predict() (sklearn.linear_model.sgdregressor method)": [[676, "sklearn.linear_model.SGDRegressor.predict"]], "score() (sklearn.linear_model.sgdregressor method)": [[676, "sklearn.linear_model.SGDRegressor.score"]], "set_fit_request() (sklearn.linear_model.sgdregressor method)": [[676, "sklearn.linear_model.SGDRegressor.set_fit_request"]], "set_params() (sklearn.linear_model.sgdregressor method)": [[676, "sklearn.linear_model.SGDRegressor.set_params"]], "set_partial_fit_request() (sklearn.linear_model.sgdregressor method)": [[676, "sklearn.linear_model.SGDRegressor.set_partial_fit_request"]], "set_score_request() (sklearn.linear_model.sgdregressor method)": [[676, "sklearn.linear_model.SGDRegressor.set_score_request"]], "sparsify() (sklearn.linear_model.sgdregressor method)": [[676, "sklearn.linear_model.SGDRegressor.sparsify"]], "theilsenregressor (class in sklearn.linear_model)": [[677, "sklearn.linear_model.TheilSenRegressor"]], "fit() (sklearn.linear_model.theilsenregressor method)": [[677, "sklearn.linear_model.TheilSenRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.theilsenregressor method)": [[677, "sklearn.linear_model.TheilSenRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.theilsenregressor method)": [[677, "sklearn.linear_model.TheilSenRegressor.get_params"]], "predict() (sklearn.linear_model.theilsenregressor method)": [[677, "sklearn.linear_model.TheilSenRegressor.predict"]], "score() (sklearn.linear_model.theilsenregressor method)": [[677, "sklearn.linear_model.TheilSenRegressor.score"]], "set_params() (sklearn.linear_model.theilsenregressor method)": [[677, "sklearn.linear_model.TheilSenRegressor.set_params"]], "set_score_request() (sklearn.linear_model.theilsenregressor method)": [[677, "sklearn.linear_model.TheilSenRegressor.set_score_request"]], "tweedieregressor (class in sklearn.linear_model)": [[678, "sklearn.linear_model.TweedieRegressor"]], "fit() (sklearn.linear_model.tweedieregressor method)": [[678, "sklearn.linear_model.TweedieRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.tweedieregressor method)": [[678, "sklearn.linear_model.TweedieRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.tweedieregressor method)": [[678, "sklearn.linear_model.TweedieRegressor.get_params"]], "predict() (sklearn.linear_model.tweedieregressor method)": [[678, "sklearn.linear_model.TweedieRegressor.predict"]], "score() (sklearn.linear_model.tweedieregressor method)": [[678, "sklearn.linear_model.TweedieRegressor.score"]], "set_fit_request() (sklearn.linear_model.tweedieregressor method)": [[678, "sklearn.linear_model.TweedieRegressor.set_fit_request"]], "set_params() (sklearn.linear_model.tweedieregressor method)": [[678, "sklearn.linear_model.TweedieRegressor.set_params"]], "set_score_request() (sklearn.linear_model.tweedieregressor method)": [[678, "sklearn.linear_model.TweedieRegressor.set_score_request"]], "enet_path() (in module sklearn.linear_model)": [[679, "sklearn.linear_model.enet_path"]], "lars_path() (in module sklearn.linear_model)": [[680, "sklearn.linear_model.lars_path"]], "lars_path_gram() (in module sklearn.linear_model)": [[681, "sklearn.linear_model.lars_path_gram"]], "lasso_path() (in module sklearn.linear_model)": [[682, "sklearn.linear_model.lasso_path"]], "orthogonal_mp() (in module sklearn.linear_model)": [[683, "sklearn.linear_model.orthogonal_mp"]], "orthogonal_mp_gram() (in module sklearn.linear_model)": [[684, "sklearn.linear_model.orthogonal_mp_gram"]], "ridge_regression() (in module sklearn.linear_model)": [[685, "sklearn.linear_model.ridge_regression"]], "isomap (class in sklearn.manifold)": [[686, "sklearn.manifold.Isomap"]], "fit() (sklearn.manifold.isomap method)": [[686, "sklearn.manifold.Isomap.fit"]], "fit_transform() (sklearn.manifold.isomap method)": [[686, "sklearn.manifold.Isomap.fit_transform"]], "get_feature_names_out() (sklearn.manifold.isomap method)": [[686, "sklearn.manifold.Isomap.get_feature_names_out"]], "get_metadata_routing() (sklearn.manifold.isomap method)": [[686, "sklearn.manifold.Isomap.get_metadata_routing"]], "get_params() (sklearn.manifold.isomap method)": [[686, "sklearn.manifold.Isomap.get_params"]], "reconstruction_error() (sklearn.manifold.isomap method)": [[686, "sklearn.manifold.Isomap.reconstruction_error"]], "set_output() (sklearn.manifold.isomap method)": [[686, "sklearn.manifold.Isomap.set_output"]], "set_params() (sklearn.manifold.isomap method)": [[686, "sklearn.manifold.Isomap.set_params"]], "transform() (sklearn.manifold.isomap method)": [[686, "sklearn.manifold.Isomap.transform"]], "locallylinearembedding (class in sklearn.manifold)": [[687, "sklearn.manifold.LocallyLinearEmbedding"]], "fit() (sklearn.manifold.locallylinearembedding method)": [[687, "sklearn.manifold.LocallyLinearEmbedding.fit"]], "fit_transform() (sklearn.manifold.locallylinearembedding method)": [[687, "sklearn.manifold.LocallyLinearEmbedding.fit_transform"]], "get_feature_names_out() (sklearn.manifold.locallylinearembedding method)": [[687, "sklearn.manifold.LocallyLinearEmbedding.get_feature_names_out"]], "get_metadata_routing() (sklearn.manifold.locallylinearembedding method)": [[687, "sklearn.manifold.LocallyLinearEmbedding.get_metadata_routing"]], "get_params() (sklearn.manifold.locallylinearembedding method)": [[687, "sklearn.manifold.LocallyLinearEmbedding.get_params"]], "set_output() (sklearn.manifold.locallylinearembedding method)": [[687, "sklearn.manifold.LocallyLinearEmbedding.set_output"]], "set_params() (sklearn.manifold.locallylinearembedding method)": [[687, "sklearn.manifold.LocallyLinearEmbedding.set_params"]], "transform() (sklearn.manifold.locallylinearembedding method)": [[687, "sklearn.manifold.LocallyLinearEmbedding.transform"]], "mds (class in sklearn.manifold)": [[688, "sklearn.manifold.MDS"]], "fit() (sklearn.manifold.mds method)": [[688, "sklearn.manifold.MDS.fit"]], "fit_transform() (sklearn.manifold.mds method)": [[688, "sklearn.manifold.MDS.fit_transform"]], "get_metadata_routing() (sklearn.manifold.mds method)": [[688, "sklearn.manifold.MDS.get_metadata_routing"]], "get_params() (sklearn.manifold.mds method)": [[688, "sklearn.manifold.MDS.get_params"]], "set_fit_request() (sklearn.manifold.mds method)": [[688, "sklearn.manifold.MDS.set_fit_request"]], "set_params() (sklearn.manifold.mds method)": [[688, "sklearn.manifold.MDS.set_params"]], "spectralembedding (class in sklearn.manifold)": [[689, "sklearn.manifold.SpectralEmbedding"]], "fit() (sklearn.manifold.spectralembedding method)": [[689, "sklearn.manifold.SpectralEmbedding.fit"]], "fit_transform() (sklearn.manifold.spectralembedding method)": [[689, "sklearn.manifold.SpectralEmbedding.fit_transform"]], "get_metadata_routing() (sklearn.manifold.spectralembedding method)": [[689, "sklearn.manifold.SpectralEmbedding.get_metadata_routing"]], "get_params() (sklearn.manifold.spectralembedding method)": [[689, "sklearn.manifold.SpectralEmbedding.get_params"]], "set_params() (sklearn.manifold.spectralembedding method)": [[689, "sklearn.manifold.SpectralEmbedding.set_params"]], "tsne (class in sklearn.manifold)": [[690, "sklearn.manifold.TSNE"]], "fit() (sklearn.manifold.tsne method)": [[690, "sklearn.manifold.TSNE.fit"]], "fit_transform() (sklearn.manifold.tsne method)": [[690, "sklearn.manifold.TSNE.fit_transform"]], "get_feature_names_out() (sklearn.manifold.tsne method)": [[690, "sklearn.manifold.TSNE.get_feature_names_out"]], "get_metadata_routing() (sklearn.manifold.tsne method)": [[690, "sklearn.manifold.TSNE.get_metadata_routing"]], "get_params() (sklearn.manifold.tsne method)": [[690, "sklearn.manifold.TSNE.get_params"]], "set_output() (sklearn.manifold.tsne method)": [[690, "sklearn.manifold.TSNE.set_output"]], "set_params() (sklearn.manifold.tsne method)": [[690, "sklearn.manifold.TSNE.set_params"]], "locally_linear_embedding() (in module sklearn.manifold)": [[691, "sklearn.manifold.locally_linear_embedding"]], "smacof() (in module sklearn.manifold)": [[692, "sklearn.manifold.smacof"]], "spectral_embedding() (in module sklearn.manifold)": [[693, "sklearn.manifold.spectral_embedding"]], "trustworthiness() (in module sklearn.manifold)": [[694, "sklearn.manifold.trustworthiness"]], "confusionmatrixdisplay (class in sklearn.metrics)": [[695, "sklearn.metrics.ConfusionMatrixDisplay"]], "from_estimator() (sklearn.metrics.confusionmatrixdisplay class method)": [[695, "sklearn.metrics.ConfusionMatrixDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.confusionmatrixdisplay class method)": [[695, "sklearn.metrics.ConfusionMatrixDisplay.from_predictions"]], "plot() (sklearn.metrics.confusionmatrixdisplay method)": [[695, "sklearn.metrics.ConfusionMatrixDisplay.plot"]], "detcurvedisplay (class in sklearn.metrics)": [[696, "sklearn.metrics.DetCurveDisplay"]], "from_estimator() (sklearn.metrics.detcurvedisplay class method)": [[696, "sklearn.metrics.DetCurveDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.detcurvedisplay class method)": [[696, "sklearn.metrics.DetCurveDisplay.from_predictions"]], "plot() (sklearn.metrics.detcurvedisplay method)": [[696, "sklearn.metrics.DetCurveDisplay.plot"]], "distancemetric (class in sklearn.metrics)": [[697, "sklearn.metrics.DistanceMetric"]], "get_metric() (sklearn.metrics.distancemetric class method)": [[697, "sklearn.metrics.DistanceMetric.get_metric"]], "precisionrecalldisplay (class in sklearn.metrics)": [[698, "sklearn.metrics.PrecisionRecallDisplay"]], "from_estimator() (sklearn.metrics.precisionrecalldisplay class method)": [[698, "sklearn.metrics.PrecisionRecallDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.precisionrecalldisplay class method)": [[698, "sklearn.metrics.PrecisionRecallDisplay.from_predictions"]], "plot() (sklearn.metrics.precisionrecalldisplay method)": [[698, "sklearn.metrics.PrecisionRecallDisplay.plot"]], "predictionerrordisplay (class in sklearn.metrics)": [[699, "sklearn.metrics.PredictionErrorDisplay"]], "from_estimator() (sklearn.metrics.predictionerrordisplay class method)": [[699, "sklearn.metrics.PredictionErrorDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.predictionerrordisplay class method)": [[699, "sklearn.metrics.PredictionErrorDisplay.from_predictions"]], "plot() (sklearn.metrics.predictionerrordisplay method)": [[699, "sklearn.metrics.PredictionErrorDisplay.plot"]], "roccurvedisplay (class in sklearn.metrics)": [[700, "sklearn.metrics.RocCurveDisplay"]], "from_estimator() (sklearn.metrics.roccurvedisplay class method)": [[700, "sklearn.metrics.RocCurveDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.roccurvedisplay class method)": [[700, "sklearn.metrics.RocCurveDisplay.from_predictions"]], "plot() (sklearn.metrics.roccurvedisplay method)": [[700, "sklearn.metrics.RocCurveDisplay.plot"]], "accuracy_score() (in module sklearn.metrics)": [[701, "sklearn.metrics.accuracy_score"]], "adjusted_mutual_info_score() (in module sklearn.metrics)": [[702, "sklearn.metrics.adjusted_mutual_info_score"]], "adjusted_rand_score() (in module sklearn.metrics)": [[703, "sklearn.metrics.adjusted_rand_score"]], "auc() (in module sklearn.metrics)": [[704, "sklearn.metrics.auc"]], "average_precision_score() (in module sklearn.metrics)": [[705, "sklearn.metrics.average_precision_score"]], "balanced_accuracy_score() (in module sklearn.metrics)": [[706, "sklearn.metrics.balanced_accuracy_score"]], "brier_score_loss() (in module sklearn.metrics)": [[707, "sklearn.metrics.brier_score_loss"]], "calinski_harabasz_score() (in module sklearn.metrics)": [[708, "sklearn.metrics.calinski_harabasz_score"]], "check_scoring() (in module sklearn.metrics)": [[709, "sklearn.metrics.check_scoring"]], "class_likelihood_ratios() (in module sklearn.metrics)": [[710, "sklearn.metrics.class_likelihood_ratios"]], "classification_report() (in module sklearn.metrics)": [[711, "sklearn.metrics.classification_report"]], "contingency_matrix() (in module sklearn.metrics.cluster)": [[712, "sklearn.metrics.cluster.contingency_matrix"]], "pair_confusion_matrix() (in module sklearn.metrics.cluster)": [[713, "sklearn.metrics.cluster.pair_confusion_matrix"]], "cohen_kappa_score() (in module sklearn.metrics)": [[714, "sklearn.metrics.cohen_kappa_score"]], "completeness_score() (in module sklearn.metrics)": [[715, "sklearn.metrics.completeness_score"]], "confusion_matrix() (in module sklearn.metrics)": [[716, "sklearn.metrics.confusion_matrix"]], "consensus_score() (in module sklearn.metrics)": [[717, "sklearn.metrics.consensus_score"]], "coverage_error() (in module sklearn.metrics)": [[718, "sklearn.metrics.coverage_error"]], "d2_absolute_error_score() (in module sklearn.metrics)": [[719, "sklearn.metrics.d2_absolute_error_score"]], "d2_pinball_score() (in module sklearn.metrics)": [[720, "sklearn.metrics.d2_pinball_score"]], "d2_tweedie_score() (in module sklearn.metrics)": [[721, "sklearn.metrics.d2_tweedie_score"]], "davies_bouldin_score() (in module sklearn.metrics)": [[722, "sklearn.metrics.davies_bouldin_score"]], "dcg_score() (in module sklearn.metrics)": [[723, "sklearn.metrics.dcg_score"]], "det_curve() (in module sklearn.metrics)": [[724, "sklearn.metrics.det_curve"]], "explained_variance_score() (in module sklearn.metrics)": [[725, "sklearn.metrics.explained_variance_score"]], "f1_score() (in module sklearn.metrics)": [[726, "sklearn.metrics.f1_score"]], "fbeta_score() (in module sklearn.metrics)": [[727, "sklearn.metrics.fbeta_score"]], "fowlkes_mallows_score() (in module sklearn.metrics)": [[728, "sklearn.metrics.fowlkes_mallows_score"]], "get_scorer() (in module sklearn.metrics)": [[729, "sklearn.metrics.get_scorer"]], "get_scorer_names() (in module sklearn.metrics)": [[730, "sklearn.metrics.get_scorer_names"]], "hamming_loss() (in module sklearn.metrics)": [[731, "sklearn.metrics.hamming_loss"]], "hinge_loss() (in module sklearn.metrics)": [[732, "sklearn.metrics.hinge_loss"]], "homogeneity_completeness_v_measure() (in module sklearn.metrics)": [[733, "sklearn.metrics.homogeneity_completeness_v_measure"]], "homogeneity_score() (in module sklearn.metrics)": [[734, "sklearn.metrics.homogeneity_score"]], "jaccard_score() (in module sklearn.metrics)": [[735, "sklearn.metrics.jaccard_score"]], "label_ranking_average_precision_score() (in module sklearn.metrics)": [[736, "sklearn.metrics.label_ranking_average_precision_score"]], "label_ranking_loss() (in module sklearn.metrics)": [[737, "sklearn.metrics.label_ranking_loss"]], "log_loss() (in module sklearn.metrics)": [[738, "sklearn.metrics.log_loss"]], "make_scorer() (in module sklearn.metrics)": [[739, "sklearn.metrics.make_scorer"]], "matthews_corrcoef() (in module sklearn.metrics)": [[740, "sklearn.metrics.matthews_corrcoef"]], "max_error() (in module sklearn.metrics)": [[741, "sklearn.metrics.max_error"]], "mean_absolute_error() (in module sklearn.metrics)": [[742, "sklearn.metrics.mean_absolute_error"]], "mean_absolute_percentage_error() (in module sklearn.metrics)": [[743, "sklearn.metrics.mean_absolute_percentage_error"]], "mean_gamma_deviance() (in module sklearn.metrics)": [[744, "sklearn.metrics.mean_gamma_deviance"]], "mean_pinball_loss() (in module sklearn.metrics)": [[745, "sklearn.metrics.mean_pinball_loss"]], "mean_poisson_deviance() (in module sklearn.metrics)": [[746, "sklearn.metrics.mean_poisson_deviance"]], "mean_squared_error() (in module sklearn.metrics)": [[747, "sklearn.metrics.mean_squared_error"]], "mean_squared_log_error() (in module sklearn.metrics)": [[748, "sklearn.metrics.mean_squared_log_error"]], "mean_tweedie_deviance() (in module sklearn.metrics)": [[749, "sklearn.metrics.mean_tweedie_deviance"]], "median_absolute_error() (in module sklearn.metrics)": [[750, "sklearn.metrics.median_absolute_error"]], "multilabel_confusion_matrix() (in module sklearn.metrics)": [[751, "sklearn.metrics.multilabel_confusion_matrix"]], "mutual_info_score() (in module sklearn.metrics)": [[752, "sklearn.metrics.mutual_info_score"]], "ndcg_score() (in module sklearn.metrics)": [[753, "sklearn.metrics.ndcg_score"]], "normalized_mutual_info_score() (in module sklearn.metrics)": [[754, "sklearn.metrics.normalized_mutual_info_score"]], "additive_chi2_kernel() (in module sklearn.metrics.pairwise)": [[755, "sklearn.metrics.pairwise.additive_chi2_kernel"]], "chi2_kernel() (in module sklearn.metrics.pairwise)": [[756, "sklearn.metrics.pairwise.chi2_kernel"]], "cosine_distances() (in module sklearn.metrics.pairwise)": [[757, "sklearn.metrics.pairwise.cosine_distances"]], "cosine_similarity() (in module sklearn.metrics.pairwise)": [[758, "sklearn.metrics.pairwise.cosine_similarity"]], "distance_metrics() (in module sklearn.metrics.pairwise)": [[759, "sklearn.metrics.pairwise.distance_metrics"]], "euclidean_distances() (in module sklearn.metrics.pairwise)": [[760, "sklearn.metrics.pairwise.euclidean_distances"]], "haversine_distances() (in module sklearn.metrics.pairwise)": [[761, "sklearn.metrics.pairwise.haversine_distances"]], "kernel_metrics() (in module sklearn.metrics.pairwise)": [[762, "sklearn.metrics.pairwise.kernel_metrics"]], "laplacian_kernel() (in module sklearn.metrics.pairwise)": [[763, "sklearn.metrics.pairwise.laplacian_kernel"]], "linear_kernel() (in module sklearn.metrics.pairwise)": [[764, "sklearn.metrics.pairwise.linear_kernel"]], "manhattan_distances() (in module sklearn.metrics.pairwise)": [[765, "sklearn.metrics.pairwise.manhattan_distances"]], "nan_euclidean_distances() (in module sklearn.metrics.pairwise)": [[766, "sklearn.metrics.pairwise.nan_euclidean_distances"]], "paired_cosine_distances() (in module sklearn.metrics.pairwise)": [[767, "sklearn.metrics.pairwise.paired_cosine_distances"]], "paired_distances() (in module sklearn.metrics.pairwise)": [[768, "sklearn.metrics.pairwise.paired_distances"]], "paired_euclidean_distances() (in module sklearn.metrics.pairwise)": [[769, "sklearn.metrics.pairwise.paired_euclidean_distances"]], "paired_manhattan_distances() (in module sklearn.metrics.pairwise)": [[770, "sklearn.metrics.pairwise.paired_manhattan_distances"]], "pairwise_kernels() (in module sklearn.metrics.pairwise)": [[771, "sklearn.metrics.pairwise.pairwise_kernels"]], "polynomial_kernel() (in module sklearn.metrics.pairwise)": [[772, "sklearn.metrics.pairwise.polynomial_kernel"]], "rbf_kernel() (in module sklearn.metrics.pairwise)": [[773, "sklearn.metrics.pairwise.rbf_kernel"]], "sigmoid_kernel() (in module sklearn.metrics.pairwise)": [[774, "sklearn.metrics.pairwise.sigmoid_kernel"]], "pairwise_distances() (in module sklearn.metrics)": [[775, "sklearn.metrics.pairwise_distances"]], "pairwise_distances_argmin() (in module sklearn.metrics)": [[776, "sklearn.metrics.pairwise_distances_argmin"]], "pairwise_distances_argmin_min() (in module sklearn.metrics)": [[777, "sklearn.metrics.pairwise_distances_argmin_min"]], "pairwise_distances_chunked() (in module sklearn.metrics)": [[778, "sklearn.metrics.pairwise_distances_chunked"]], "precision_recall_curve() (in module sklearn.metrics)": [[779, "sklearn.metrics.precision_recall_curve"]], "precision_recall_fscore_support() (in module sklearn.metrics)": [[780, "sklearn.metrics.precision_recall_fscore_support"]], "precision_score() (in module sklearn.metrics)": [[781, "sklearn.metrics.precision_score"]], "r2_score() (in module sklearn.metrics)": [[782, "sklearn.metrics.r2_score"]], "rand_score() (in module sklearn.metrics)": [[783, "sklearn.metrics.rand_score"]], "recall_score() (in module sklearn.metrics)": [[784, "sklearn.metrics.recall_score"]], "roc_auc_score() (in module sklearn.metrics)": [[785, "sklearn.metrics.roc_auc_score"]], "roc_curve() (in module sklearn.metrics)": [[786, "sklearn.metrics.roc_curve"]], "root_mean_squared_error() (in module sklearn.metrics)": [[787, "sklearn.metrics.root_mean_squared_error"]], "root_mean_squared_log_error() (in module sklearn.metrics)": [[788, "sklearn.metrics.root_mean_squared_log_error"]], "silhouette_samples() (in module sklearn.metrics)": [[789, "sklearn.metrics.silhouette_samples"]], "silhouette_score() (in module sklearn.metrics)": [[790, "sklearn.metrics.silhouette_score"]], "top_k_accuracy_score() (in module sklearn.metrics)": [[791, "sklearn.metrics.top_k_accuracy_score"]], "v_measure_score() (in module sklearn.metrics)": [[792, "sklearn.metrics.v_measure_score"]], "zero_one_loss() (in module sklearn.metrics)": [[793, "sklearn.metrics.zero_one_loss"]], "bayesiangaussianmixture (class in sklearn.mixture)": [[794, "sklearn.mixture.BayesianGaussianMixture"]], "fit() (sklearn.mixture.bayesiangaussianmixture method)": [[794, "sklearn.mixture.BayesianGaussianMixture.fit"]], "fit_predict() (sklearn.mixture.bayesiangaussianmixture method)": [[794, "sklearn.mixture.BayesianGaussianMixture.fit_predict"]], "get_metadata_routing() (sklearn.mixture.bayesiangaussianmixture method)": [[794, "sklearn.mixture.BayesianGaussianMixture.get_metadata_routing"]], "get_params() (sklearn.mixture.bayesiangaussianmixture method)": [[794, "sklearn.mixture.BayesianGaussianMixture.get_params"]], "predict() (sklearn.mixture.bayesiangaussianmixture method)": [[794, "sklearn.mixture.BayesianGaussianMixture.predict"]], "predict_proba() (sklearn.mixture.bayesiangaussianmixture method)": [[794, "sklearn.mixture.BayesianGaussianMixture.predict_proba"]], "sample() (sklearn.mixture.bayesiangaussianmixture method)": [[794, "sklearn.mixture.BayesianGaussianMixture.sample"]], "score() (sklearn.mixture.bayesiangaussianmixture method)": [[794, "sklearn.mixture.BayesianGaussianMixture.score"]], "score_samples() (sklearn.mixture.bayesiangaussianmixture method)": [[794, "sklearn.mixture.BayesianGaussianMixture.score_samples"]], "set_params() (sklearn.mixture.bayesiangaussianmixture method)": [[794, "sklearn.mixture.BayesianGaussianMixture.set_params"]], "gaussianmixture (class in sklearn.mixture)": [[795, "sklearn.mixture.GaussianMixture"]], "aic() (sklearn.mixture.gaussianmixture method)": [[795, "sklearn.mixture.GaussianMixture.aic"]], "bic() (sklearn.mixture.gaussianmixture method)": [[795, "sklearn.mixture.GaussianMixture.bic"]], "fit() (sklearn.mixture.gaussianmixture method)": [[795, "sklearn.mixture.GaussianMixture.fit"]], "fit_predict() (sklearn.mixture.gaussianmixture method)": [[795, "sklearn.mixture.GaussianMixture.fit_predict"]], "get_metadata_routing() (sklearn.mixture.gaussianmixture method)": [[795, "sklearn.mixture.GaussianMixture.get_metadata_routing"]], "get_params() (sklearn.mixture.gaussianmixture method)": [[795, "sklearn.mixture.GaussianMixture.get_params"]], "predict() (sklearn.mixture.gaussianmixture method)": [[795, "sklearn.mixture.GaussianMixture.predict"]], "predict_proba() (sklearn.mixture.gaussianmixture method)": [[795, "sklearn.mixture.GaussianMixture.predict_proba"]], "sample() (sklearn.mixture.gaussianmixture method)": [[795, "sklearn.mixture.GaussianMixture.sample"]], "score() (sklearn.mixture.gaussianmixture method)": [[795, "sklearn.mixture.GaussianMixture.score"]], "score_samples() (sklearn.mixture.gaussianmixture method)": [[795, "sklearn.mixture.GaussianMixture.score_samples"]], "set_params() (sklearn.mixture.gaussianmixture method)": [[795, "sklearn.mixture.GaussianMixture.set_params"]], "gridsearchcv (class in sklearn.model_selection)": [[796, "sklearn.model_selection.GridSearchCV"]], "classes_ (sklearn.model_selection.gridsearchcv property)": [[796, "sklearn.model_selection.GridSearchCV.classes_"]], "decision_function() (sklearn.model_selection.gridsearchcv method)": [[796, "sklearn.model_selection.GridSearchCV.decision_function"]], "fit() (sklearn.model_selection.gridsearchcv method)": [[796, "sklearn.model_selection.GridSearchCV.fit"]], "get_metadata_routing() (sklearn.model_selection.gridsearchcv method)": [[796, "sklearn.model_selection.GridSearchCV.get_metadata_routing"]], "get_params() (sklearn.model_selection.gridsearchcv method)": [[796, "sklearn.model_selection.GridSearchCV.get_params"]], "inverse_transform() (sklearn.model_selection.gridsearchcv method)": [[796, "sklearn.model_selection.GridSearchCV.inverse_transform"]], "n_features_in_ (sklearn.model_selection.gridsearchcv property)": [[796, "sklearn.model_selection.GridSearchCV.n_features_in_"]], "predict() (sklearn.model_selection.gridsearchcv method)": [[796, "sklearn.model_selection.GridSearchCV.predict"]], "predict_log_proba() (sklearn.model_selection.gridsearchcv method)": [[796, "sklearn.model_selection.GridSearchCV.predict_log_proba"]], "predict_proba() (sklearn.model_selection.gridsearchcv method)": [[796, "sklearn.model_selection.GridSearchCV.predict_proba"]], "score() (sklearn.model_selection.gridsearchcv method)": [[796, "sklearn.model_selection.GridSearchCV.score"]], "score_samples() (sklearn.model_selection.gridsearchcv method)": [[796, "sklearn.model_selection.GridSearchCV.score_samples"]], "set_params() (sklearn.model_selection.gridsearchcv method)": [[796, "sklearn.model_selection.GridSearchCV.set_params"]], "transform() (sklearn.model_selection.gridsearchcv method)": [[796, "sklearn.model_selection.GridSearchCV.transform"]], "groupkfold (class in sklearn.model_selection)": [[797, "sklearn.model_selection.GroupKFold"]], "get_metadata_routing() (sklearn.model_selection.groupkfold method)": [[797, "sklearn.model_selection.GroupKFold.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.groupkfold method)": [[797, "sklearn.model_selection.GroupKFold.get_n_splits"]], "set_split_request() (sklearn.model_selection.groupkfold method)": [[797, "sklearn.model_selection.GroupKFold.set_split_request"]], "split() (sklearn.model_selection.groupkfold method)": [[797, "sklearn.model_selection.GroupKFold.split"]], "groupshufflesplit (class in sklearn.model_selection)": [[798, "sklearn.model_selection.GroupShuffleSplit"]], "get_metadata_routing() (sklearn.model_selection.groupshufflesplit method)": [[798, "sklearn.model_selection.GroupShuffleSplit.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.groupshufflesplit method)": [[798, "sklearn.model_selection.GroupShuffleSplit.get_n_splits"]], "set_split_request() (sklearn.model_selection.groupshufflesplit method)": [[798, "sklearn.model_selection.GroupShuffleSplit.set_split_request"]], "split() (sklearn.model_selection.groupshufflesplit method)": [[798, "sklearn.model_selection.GroupShuffleSplit.split"]], "halvinggridsearchcv (class in sklearn.model_selection)": [[799, "sklearn.model_selection.HalvingGridSearchCV"]], "classes_ (sklearn.model_selection.halvinggridsearchcv property)": [[799, "sklearn.model_selection.HalvingGridSearchCV.classes_"]], "decision_function() (sklearn.model_selection.halvinggridsearchcv method)": [[799, "sklearn.model_selection.HalvingGridSearchCV.decision_function"]], "fit() (sklearn.model_selection.halvinggridsearchcv method)": [[799, "sklearn.model_selection.HalvingGridSearchCV.fit"]], "get_metadata_routing() (sklearn.model_selection.halvinggridsearchcv method)": [[799, "sklearn.model_selection.HalvingGridSearchCV.get_metadata_routing"]], "get_params() (sklearn.model_selection.halvinggridsearchcv method)": [[799, "sklearn.model_selection.HalvingGridSearchCV.get_params"]], "inverse_transform() (sklearn.model_selection.halvinggridsearchcv method)": [[799, "sklearn.model_selection.HalvingGridSearchCV.inverse_transform"]], "n_features_in_ (sklearn.model_selection.halvinggridsearchcv property)": [[799, "sklearn.model_selection.HalvingGridSearchCV.n_features_in_"]], "predict() (sklearn.model_selection.halvinggridsearchcv method)": [[799, "sklearn.model_selection.HalvingGridSearchCV.predict"]], "predict_log_proba() (sklearn.model_selection.halvinggridsearchcv method)": [[799, "sklearn.model_selection.HalvingGridSearchCV.predict_log_proba"]], "predict_proba() (sklearn.model_selection.halvinggridsearchcv method)": [[799, "sklearn.model_selection.HalvingGridSearchCV.predict_proba"]], "score() (sklearn.model_selection.halvinggridsearchcv method)": [[799, "sklearn.model_selection.HalvingGridSearchCV.score"]], "score_samples() (sklearn.model_selection.halvinggridsearchcv method)": [[799, "sklearn.model_selection.HalvingGridSearchCV.score_samples"]], "set_params() (sklearn.model_selection.halvinggridsearchcv method)": [[799, "sklearn.model_selection.HalvingGridSearchCV.set_params"]], "transform() (sklearn.model_selection.halvinggridsearchcv method)": [[799, "sklearn.model_selection.HalvingGridSearchCV.transform"]], "halvingrandomsearchcv (class in sklearn.model_selection)": [[800, "sklearn.model_selection.HalvingRandomSearchCV"]], "classes_ (sklearn.model_selection.halvingrandomsearchcv property)": [[800, "sklearn.model_selection.HalvingRandomSearchCV.classes_"]], "decision_function() (sklearn.model_selection.halvingrandomsearchcv method)": [[800, "sklearn.model_selection.HalvingRandomSearchCV.decision_function"]], "fit() (sklearn.model_selection.halvingrandomsearchcv method)": [[800, "sklearn.model_selection.HalvingRandomSearchCV.fit"]], "get_metadata_routing() (sklearn.model_selection.halvingrandomsearchcv method)": [[800, "sklearn.model_selection.HalvingRandomSearchCV.get_metadata_routing"]], "get_params() (sklearn.model_selection.halvingrandomsearchcv method)": [[800, "sklearn.model_selection.HalvingRandomSearchCV.get_params"]], "inverse_transform() (sklearn.model_selection.halvingrandomsearchcv method)": [[800, "sklearn.model_selection.HalvingRandomSearchCV.inverse_transform"]], "n_features_in_ (sklearn.model_selection.halvingrandomsearchcv property)": [[800, "sklearn.model_selection.HalvingRandomSearchCV.n_features_in_"]], "predict() (sklearn.model_selection.halvingrandomsearchcv method)": [[800, "sklearn.model_selection.HalvingRandomSearchCV.predict"]], "predict_log_proba() (sklearn.model_selection.halvingrandomsearchcv method)": [[800, "sklearn.model_selection.HalvingRandomSearchCV.predict_log_proba"]], "predict_proba() (sklearn.model_selection.halvingrandomsearchcv method)": [[800, "sklearn.model_selection.HalvingRandomSearchCV.predict_proba"]], "score() (sklearn.model_selection.halvingrandomsearchcv method)": [[800, "sklearn.model_selection.HalvingRandomSearchCV.score"]], "score_samples() (sklearn.model_selection.halvingrandomsearchcv method)": [[800, "sklearn.model_selection.HalvingRandomSearchCV.score_samples"]], "set_params() (sklearn.model_selection.halvingrandomsearchcv method)": [[800, "sklearn.model_selection.HalvingRandomSearchCV.set_params"]], "transform() (sklearn.model_selection.halvingrandomsearchcv method)": [[800, "sklearn.model_selection.HalvingRandomSearchCV.transform"]], "kfold (class in sklearn.model_selection)": [[801, "sklearn.model_selection.KFold"]], "get_metadata_routing() (sklearn.model_selection.kfold method)": [[801, "sklearn.model_selection.KFold.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.kfold method)": [[801, "sklearn.model_selection.KFold.get_n_splits"]], "split() (sklearn.model_selection.kfold method)": [[801, "sklearn.model_selection.KFold.split"]], "learningcurvedisplay (class in sklearn.model_selection)": [[802, "sklearn.model_selection.LearningCurveDisplay"]], "from_estimator() (sklearn.model_selection.learningcurvedisplay class method)": [[802, "sklearn.model_selection.LearningCurveDisplay.from_estimator"]], "plot() (sklearn.model_selection.learningcurvedisplay method)": [[802, "sklearn.model_selection.LearningCurveDisplay.plot"]], "leaveonegroupout (class in sklearn.model_selection)": [[803, "sklearn.model_selection.LeaveOneGroupOut"]], "get_metadata_routing() (sklearn.model_selection.leaveonegroupout method)": [[803, "sklearn.model_selection.LeaveOneGroupOut.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.leaveonegroupout method)": [[803, "sklearn.model_selection.LeaveOneGroupOut.get_n_splits"]], "set_split_request() (sklearn.model_selection.leaveonegroupout method)": [[803, "sklearn.model_selection.LeaveOneGroupOut.set_split_request"]], "split() (sklearn.model_selection.leaveonegroupout method)": [[803, "sklearn.model_selection.LeaveOneGroupOut.split"]], "leaveoneout (class in sklearn.model_selection)": [[804, "sklearn.model_selection.LeaveOneOut"]], "get_metadata_routing() (sklearn.model_selection.leaveoneout method)": [[804, "sklearn.model_selection.LeaveOneOut.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.leaveoneout method)": [[804, "sklearn.model_selection.LeaveOneOut.get_n_splits"]], "split() (sklearn.model_selection.leaveoneout method)": [[804, "sklearn.model_selection.LeaveOneOut.split"]], "leavepgroupsout (class in sklearn.model_selection)": [[805, "sklearn.model_selection.LeavePGroupsOut"]], "get_metadata_routing() (sklearn.model_selection.leavepgroupsout method)": [[805, "sklearn.model_selection.LeavePGroupsOut.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.leavepgroupsout method)": [[805, "sklearn.model_selection.LeavePGroupsOut.get_n_splits"]], "set_split_request() (sklearn.model_selection.leavepgroupsout method)": [[805, "sklearn.model_selection.LeavePGroupsOut.set_split_request"]], "split() (sklearn.model_selection.leavepgroupsout method)": [[805, "sklearn.model_selection.LeavePGroupsOut.split"]], "leavepout (class in sklearn.model_selection)": [[806, "sklearn.model_selection.LeavePOut"]], "get_metadata_routing() (sklearn.model_selection.leavepout method)": [[806, "sklearn.model_selection.LeavePOut.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.leavepout method)": [[806, "sklearn.model_selection.LeavePOut.get_n_splits"]], "split() (sklearn.model_selection.leavepout method)": [[806, "sklearn.model_selection.LeavePOut.split"]], "parametergrid (class in sklearn.model_selection)": [[807, "sklearn.model_selection.ParameterGrid"]], "parametersampler (class in sklearn.model_selection)": [[808, "sklearn.model_selection.ParameterSampler"]], "predefinedsplit (class in sklearn.model_selection)": [[809, "sklearn.model_selection.PredefinedSplit"]], "get_metadata_routing() (sklearn.model_selection.predefinedsplit method)": [[809, "sklearn.model_selection.PredefinedSplit.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.predefinedsplit method)": [[809, "sklearn.model_selection.PredefinedSplit.get_n_splits"]], "split() (sklearn.model_selection.predefinedsplit method)": [[809, "sklearn.model_selection.PredefinedSplit.split"]], "randomizedsearchcv (class in sklearn.model_selection)": [[810, "sklearn.model_selection.RandomizedSearchCV"]], "classes_ (sklearn.model_selection.randomizedsearchcv property)": [[810, "sklearn.model_selection.RandomizedSearchCV.classes_"]], "decision_function() (sklearn.model_selection.randomizedsearchcv method)": [[810, "sklearn.model_selection.RandomizedSearchCV.decision_function"]], "fit() (sklearn.model_selection.randomizedsearchcv method)": [[810, "sklearn.model_selection.RandomizedSearchCV.fit"]], "get_metadata_routing() (sklearn.model_selection.randomizedsearchcv method)": [[810, "sklearn.model_selection.RandomizedSearchCV.get_metadata_routing"]], "get_params() (sklearn.model_selection.randomizedsearchcv method)": [[810, "sklearn.model_selection.RandomizedSearchCV.get_params"]], "inverse_transform() (sklearn.model_selection.randomizedsearchcv method)": [[810, "sklearn.model_selection.RandomizedSearchCV.inverse_transform"]], "n_features_in_ (sklearn.model_selection.randomizedsearchcv property)": [[810, "sklearn.model_selection.RandomizedSearchCV.n_features_in_"]], "predict() (sklearn.model_selection.randomizedsearchcv method)": [[810, "sklearn.model_selection.RandomizedSearchCV.predict"]], "predict_log_proba() (sklearn.model_selection.randomizedsearchcv method)": [[810, "sklearn.model_selection.RandomizedSearchCV.predict_log_proba"]], "predict_proba() (sklearn.model_selection.randomizedsearchcv method)": [[810, "sklearn.model_selection.RandomizedSearchCV.predict_proba"]], "score() (sklearn.model_selection.randomizedsearchcv method)": [[810, "sklearn.model_selection.RandomizedSearchCV.score"]], "score_samples() (sklearn.model_selection.randomizedsearchcv method)": [[810, "sklearn.model_selection.RandomizedSearchCV.score_samples"]], "set_params() (sklearn.model_selection.randomizedsearchcv method)": [[810, "sklearn.model_selection.RandomizedSearchCV.set_params"]], "transform() (sklearn.model_selection.randomizedsearchcv method)": [[810, "sklearn.model_selection.RandomizedSearchCV.transform"]], "repeatedkfold (class in sklearn.model_selection)": [[811, "sklearn.model_selection.RepeatedKFold"]], "get_metadata_routing() (sklearn.model_selection.repeatedkfold method)": [[811, "sklearn.model_selection.RepeatedKFold.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.repeatedkfold method)": [[811, "sklearn.model_selection.RepeatedKFold.get_n_splits"]], "split() (sklearn.model_selection.repeatedkfold method)": [[811, "sklearn.model_selection.RepeatedKFold.split"]], "repeatedstratifiedkfold (class in sklearn.model_selection)": [[812, "sklearn.model_selection.RepeatedStratifiedKFold"]], "get_metadata_routing() (sklearn.model_selection.repeatedstratifiedkfold method)": [[812, "sklearn.model_selection.RepeatedStratifiedKFold.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.repeatedstratifiedkfold method)": [[812, "sklearn.model_selection.RepeatedStratifiedKFold.get_n_splits"]], "split() (sklearn.model_selection.repeatedstratifiedkfold method)": [[812, "sklearn.model_selection.RepeatedStratifiedKFold.split"]], "shufflesplit (class in sklearn.model_selection)": [[813, "sklearn.model_selection.ShuffleSplit"]], "get_metadata_routing() (sklearn.model_selection.shufflesplit method)": [[813, "sklearn.model_selection.ShuffleSplit.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.shufflesplit method)": [[813, "sklearn.model_selection.ShuffleSplit.get_n_splits"]], "split() (sklearn.model_selection.shufflesplit method)": [[813, "sklearn.model_selection.ShuffleSplit.split"]], "stratifiedgroupkfold (class in sklearn.model_selection)": [[814, "sklearn.model_selection.StratifiedGroupKFold"]], "get_metadata_routing() (sklearn.model_selection.stratifiedgroupkfold method)": [[814, "sklearn.model_selection.StratifiedGroupKFold.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.stratifiedgroupkfold method)": [[814, "sklearn.model_selection.StratifiedGroupKFold.get_n_splits"]], "set_split_request() (sklearn.model_selection.stratifiedgroupkfold method)": [[814, "sklearn.model_selection.StratifiedGroupKFold.set_split_request"]], "split() (sklearn.model_selection.stratifiedgroupkfold method)": [[814, "sklearn.model_selection.StratifiedGroupKFold.split"]], "stratifiedkfold (class in sklearn.model_selection)": [[815, "sklearn.model_selection.StratifiedKFold"]], "get_metadata_routing() (sklearn.model_selection.stratifiedkfold method)": [[815, "sklearn.model_selection.StratifiedKFold.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.stratifiedkfold method)": [[815, "sklearn.model_selection.StratifiedKFold.get_n_splits"]], "split() (sklearn.model_selection.stratifiedkfold method)": [[815, "sklearn.model_selection.StratifiedKFold.split"]], "stratifiedshufflesplit (class in sklearn.model_selection)": [[816, "sklearn.model_selection.StratifiedShuffleSplit"]], "get_metadata_routing() (sklearn.model_selection.stratifiedshufflesplit method)": [[816, "sklearn.model_selection.StratifiedShuffleSplit.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.stratifiedshufflesplit method)": [[816, "sklearn.model_selection.StratifiedShuffleSplit.get_n_splits"]], "split() (sklearn.model_selection.stratifiedshufflesplit method)": [[816, "sklearn.model_selection.StratifiedShuffleSplit.split"]], "timeseriessplit (class in sklearn.model_selection)": [[817, "sklearn.model_selection.TimeSeriesSplit"]], "get_metadata_routing() (sklearn.model_selection.timeseriessplit method)": [[817, "sklearn.model_selection.TimeSeriesSplit.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.timeseriessplit method)": [[817, "sklearn.model_selection.TimeSeriesSplit.get_n_splits"]], "split() (sklearn.model_selection.timeseriessplit method)": [[817, "sklearn.model_selection.TimeSeriesSplit.split"]], "validationcurvedisplay (class in sklearn.model_selection)": [[818, "sklearn.model_selection.ValidationCurveDisplay"]], "from_estimator() (sklearn.model_selection.validationcurvedisplay class method)": [[818, "sklearn.model_selection.ValidationCurveDisplay.from_estimator"]], "plot() (sklearn.model_selection.validationcurvedisplay method)": [[818, "sklearn.model_selection.ValidationCurveDisplay.plot"]], "check_cv() (in module sklearn.model_selection)": [[819, "sklearn.model_selection.check_cv"]], "cross_val_predict() (in module sklearn.model_selection)": [[820, "sklearn.model_selection.cross_val_predict"]], "cross_val_score() (in module sklearn.model_selection)": [[821, "sklearn.model_selection.cross_val_score"]], "cross_validate() (in module sklearn.model_selection)": [[822, "sklearn.model_selection.cross_validate"]], "learning_curve() (in module sklearn.model_selection)": [[823, "sklearn.model_selection.learning_curve"]], "permutation_test_score() (in module sklearn.model_selection)": [[824, "sklearn.model_selection.permutation_test_score"]], "train_test_split() (in module sklearn.model_selection)": [[825, "sklearn.model_selection.train_test_split"]], "validation_curve() (in module sklearn.model_selection)": [[826, "sklearn.model_selection.validation_curve"]], "onevsoneclassifier (class in sklearn.multiclass)": [[827, "sklearn.multiclass.OneVsOneClassifier"]], "decision_function() (sklearn.multiclass.onevsoneclassifier method)": [[827, "sklearn.multiclass.OneVsOneClassifier.decision_function"]], "fit() (sklearn.multiclass.onevsoneclassifier method)": [[827, "sklearn.multiclass.OneVsOneClassifier.fit"]], "get_metadata_routing() (sklearn.multiclass.onevsoneclassifier method)": [[827, "sklearn.multiclass.OneVsOneClassifier.get_metadata_routing"]], "get_params() (sklearn.multiclass.onevsoneclassifier method)": [[827, "sklearn.multiclass.OneVsOneClassifier.get_params"]], "n_classes_ (sklearn.multiclass.onevsoneclassifier property)": [[827, "sklearn.multiclass.OneVsOneClassifier.n_classes_"]], "partial_fit() (sklearn.multiclass.onevsoneclassifier method)": [[827, "sklearn.multiclass.OneVsOneClassifier.partial_fit"]], "predict() (sklearn.multiclass.onevsoneclassifier method)": [[827, "sklearn.multiclass.OneVsOneClassifier.predict"]], "score() (sklearn.multiclass.onevsoneclassifier method)": [[827, "sklearn.multiclass.OneVsOneClassifier.score"]], "set_params() (sklearn.multiclass.onevsoneclassifier method)": [[827, "sklearn.multiclass.OneVsOneClassifier.set_params"]], "set_partial_fit_request() (sklearn.multiclass.onevsoneclassifier method)": [[827, "sklearn.multiclass.OneVsOneClassifier.set_partial_fit_request"]], "set_score_request() (sklearn.multiclass.onevsoneclassifier method)": [[827, "sklearn.multiclass.OneVsOneClassifier.set_score_request"]], "onevsrestclassifier (class in sklearn.multiclass)": [[828, "sklearn.multiclass.OneVsRestClassifier"]], "decision_function() (sklearn.multiclass.onevsrestclassifier method)": [[828, "sklearn.multiclass.OneVsRestClassifier.decision_function"]], "fit() (sklearn.multiclass.onevsrestclassifier method)": [[828, "sklearn.multiclass.OneVsRestClassifier.fit"]], "get_metadata_routing() (sklearn.multiclass.onevsrestclassifier method)": [[828, "sklearn.multiclass.OneVsRestClassifier.get_metadata_routing"]], "get_params() (sklearn.multiclass.onevsrestclassifier method)": [[828, "sklearn.multiclass.OneVsRestClassifier.get_params"]], "multilabel_ (sklearn.multiclass.onevsrestclassifier property)": [[828, "sklearn.multiclass.OneVsRestClassifier.multilabel_"]], "n_classes_ (sklearn.multiclass.onevsrestclassifier property)": [[828, "sklearn.multiclass.OneVsRestClassifier.n_classes_"]], "partial_fit() (sklearn.multiclass.onevsrestclassifier method)": [[828, "sklearn.multiclass.OneVsRestClassifier.partial_fit"]], "predict() (sklearn.multiclass.onevsrestclassifier method)": [[828, "sklearn.multiclass.OneVsRestClassifier.predict"]], "predict_proba() (sklearn.multiclass.onevsrestclassifier method)": [[828, "sklearn.multiclass.OneVsRestClassifier.predict_proba"]], "score() (sklearn.multiclass.onevsrestclassifier method)": [[828, "sklearn.multiclass.OneVsRestClassifier.score"]], "set_params() (sklearn.multiclass.onevsrestclassifier method)": [[828, "sklearn.multiclass.OneVsRestClassifier.set_params"]], "set_partial_fit_request() (sklearn.multiclass.onevsrestclassifier method)": [[828, "sklearn.multiclass.OneVsRestClassifier.set_partial_fit_request"]], "set_score_request() (sklearn.multiclass.onevsrestclassifier method)": [[828, "sklearn.multiclass.OneVsRestClassifier.set_score_request"]], "outputcodeclassifier (class in sklearn.multiclass)": [[829, "sklearn.multiclass.OutputCodeClassifier"]], "fit() (sklearn.multiclass.outputcodeclassifier method)": [[829, "sklearn.multiclass.OutputCodeClassifier.fit"]], "get_metadata_routing() (sklearn.multiclass.outputcodeclassifier method)": [[829, "sklearn.multiclass.OutputCodeClassifier.get_metadata_routing"]], "get_params() (sklearn.multiclass.outputcodeclassifier method)": [[829, "sklearn.multiclass.OutputCodeClassifier.get_params"]], "predict() (sklearn.multiclass.outputcodeclassifier method)": [[829, "sklearn.multiclass.OutputCodeClassifier.predict"]], "score() (sklearn.multiclass.outputcodeclassifier method)": [[829, "sklearn.multiclass.OutputCodeClassifier.score"]], "set_params() (sklearn.multiclass.outputcodeclassifier method)": [[829, "sklearn.multiclass.OutputCodeClassifier.set_params"]], "set_score_request() (sklearn.multiclass.outputcodeclassifier method)": [[829, "sklearn.multiclass.OutputCodeClassifier.set_score_request"]], "classifierchain (class in sklearn.multioutput)": [[830, "sklearn.multioutput.ClassifierChain"]], "decision_function() (sklearn.multioutput.classifierchain method)": [[830, "sklearn.multioutput.ClassifierChain.decision_function"]], "fit() (sklearn.multioutput.classifierchain method)": [[830, "sklearn.multioutput.ClassifierChain.fit"]], "get_metadata_routing() (sklearn.multioutput.classifierchain method)": [[830, "sklearn.multioutput.ClassifierChain.get_metadata_routing"]], "get_params() (sklearn.multioutput.classifierchain method)": [[830, "sklearn.multioutput.ClassifierChain.get_params"]], "predict() (sklearn.multioutput.classifierchain method)": [[830, "sklearn.multioutput.ClassifierChain.predict"]], "predict_log_proba() (sklearn.multioutput.classifierchain method)": [[830, "sklearn.multioutput.ClassifierChain.predict_log_proba"]], "predict_proba() (sklearn.multioutput.classifierchain method)": [[830, "sklearn.multioutput.ClassifierChain.predict_proba"]], "score() (sklearn.multioutput.classifierchain method)": [[830, "sklearn.multioutput.ClassifierChain.score"]], "set_params() (sklearn.multioutput.classifierchain method)": [[830, "sklearn.multioutput.ClassifierChain.set_params"]], "set_score_request() (sklearn.multioutput.classifierchain method)": [[830, "sklearn.multioutput.ClassifierChain.set_score_request"]], "multioutputclassifier (class in sklearn.multioutput)": [[831, "sklearn.multioutput.MultiOutputClassifier"]], "fit() (sklearn.multioutput.multioutputclassifier method)": [[831, "sklearn.multioutput.MultiOutputClassifier.fit"]], "get_metadata_routing() (sklearn.multioutput.multioutputclassifier method)": [[831, "sklearn.multioutput.MultiOutputClassifier.get_metadata_routing"]], "get_params() (sklearn.multioutput.multioutputclassifier method)": [[831, "sklearn.multioutput.MultiOutputClassifier.get_params"]], "partial_fit() (sklearn.multioutput.multioutputclassifier method)": [[831, "sklearn.multioutput.MultiOutputClassifier.partial_fit"]], "predict() (sklearn.multioutput.multioutputclassifier method)": [[831, "sklearn.multioutput.MultiOutputClassifier.predict"]], "predict_proba() (sklearn.multioutput.multioutputclassifier method)": [[831, "sklearn.multioutput.MultiOutputClassifier.predict_proba"]], "score() (sklearn.multioutput.multioutputclassifier method)": [[831, "sklearn.multioutput.MultiOutputClassifier.score"]], "set_fit_request() (sklearn.multioutput.multioutputclassifier method)": [[831, "sklearn.multioutput.MultiOutputClassifier.set_fit_request"]], "set_params() (sklearn.multioutput.multioutputclassifier method)": [[831, "sklearn.multioutput.MultiOutputClassifier.set_params"]], "set_partial_fit_request() (sklearn.multioutput.multioutputclassifier method)": [[831, "sklearn.multioutput.MultiOutputClassifier.set_partial_fit_request"]], "multioutputregressor (class in sklearn.multioutput)": [[832, "sklearn.multioutput.MultiOutputRegressor"]], "fit() (sklearn.multioutput.multioutputregressor method)": [[832, "sklearn.multioutput.MultiOutputRegressor.fit"]], "get_metadata_routing() (sklearn.multioutput.multioutputregressor method)": [[832, "sklearn.multioutput.MultiOutputRegressor.get_metadata_routing"]], "get_params() (sklearn.multioutput.multioutputregressor method)": [[832, "sklearn.multioutput.MultiOutputRegressor.get_params"]], "partial_fit() (sklearn.multioutput.multioutputregressor method)": [[832, "sklearn.multioutput.MultiOutputRegressor.partial_fit"]], "predict() (sklearn.multioutput.multioutputregressor method)": [[832, "sklearn.multioutput.MultiOutputRegressor.predict"]], "score() (sklearn.multioutput.multioutputregressor method)": [[832, "sklearn.multioutput.MultiOutputRegressor.score"]], "set_fit_request() (sklearn.multioutput.multioutputregressor method)": [[832, "sklearn.multioutput.MultiOutputRegressor.set_fit_request"]], "set_params() (sklearn.multioutput.multioutputregressor method)": [[832, "sklearn.multioutput.MultiOutputRegressor.set_params"]], "set_partial_fit_request() (sklearn.multioutput.multioutputregressor method)": [[832, "sklearn.multioutput.MultiOutputRegressor.set_partial_fit_request"]], "set_score_request() (sklearn.multioutput.multioutputregressor method)": [[832, "sklearn.multioutput.MultiOutputRegressor.set_score_request"]], "regressorchain (class in sklearn.multioutput)": [[833, "sklearn.multioutput.RegressorChain"]], "fit() (sklearn.multioutput.regressorchain method)": [[833, "sklearn.multioutput.RegressorChain.fit"]], "get_metadata_routing() (sklearn.multioutput.regressorchain method)": [[833, "sklearn.multioutput.RegressorChain.get_metadata_routing"]], "get_params() (sklearn.multioutput.regressorchain method)": [[833, "sklearn.multioutput.RegressorChain.get_params"]], "predict() (sklearn.multioutput.regressorchain method)": [[833, "sklearn.multioutput.RegressorChain.predict"]], "score() (sklearn.multioutput.regressorchain method)": [[833, "sklearn.multioutput.RegressorChain.score"]], "set_params() (sklearn.multioutput.regressorchain method)": [[833, "sklearn.multioutput.RegressorChain.set_params"]], "set_score_request() (sklearn.multioutput.regressorchain method)": [[833, "sklearn.multioutput.RegressorChain.set_score_request"]], "bernoullinb (class in sklearn.naive_bayes)": [[834, "sklearn.naive_bayes.BernoulliNB"]], "fit() (sklearn.naive_bayes.bernoullinb method)": [[834, "sklearn.naive_bayes.BernoulliNB.fit"]], "get_metadata_routing() (sklearn.naive_bayes.bernoullinb method)": [[834, "sklearn.naive_bayes.BernoulliNB.get_metadata_routing"]], "get_params() (sklearn.naive_bayes.bernoullinb method)": [[834, "sklearn.naive_bayes.BernoulliNB.get_params"]], "partial_fit() (sklearn.naive_bayes.bernoullinb method)": [[834, "sklearn.naive_bayes.BernoulliNB.partial_fit"]], "predict() (sklearn.naive_bayes.bernoullinb method)": [[834, "sklearn.naive_bayes.BernoulliNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.bernoullinb method)": [[834, "sklearn.naive_bayes.BernoulliNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.bernoullinb method)": [[834, "sklearn.naive_bayes.BernoulliNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.bernoullinb method)": [[834, "sklearn.naive_bayes.BernoulliNB.predict_proba"]], "score() (sklearn.naive_bayes.bernoullinb method)": [[834, "sklearn.naive_bayes.BernoulliNB.score"]], "set_fit_request() (sklearn.naive_bayes.bernoullinb method)": [[834, "sklearn.naive_bayes.BernoulliNB.set_fit_request"]], "set_params() (sklearn.naive_bayes.bernoullinb method)": [[834, "sklearn.naive_bayes.BernoulliNB.set_params"]], "set_partial_fit_request() (sklearn.naive_bayes.bernoullinb method)": [[834, "sklearn.naive_bayes.BernoulliNB.set_partial_fit_request"]], "set_score_request() (sklearn.naive_bayes.bernoullinb method)": [[834, "sklearn.naive_bayes.BernoulliNB.set_score_request"]], "categoricalnb (class in sklearn.naive_bayes)": [[835, "sklearn.naive_bayes.CategoricalNB"]], "fit() (sklearn.naive_bayes.categoricalnb method)": [[835, "sklearn.naive_bayes.CategoricalNB.fit"]], "get_metadata_routing() (sklearn.naive_bayes.categoricalnb method)": [[835, "sklearn.naive_bayes.CategoricalNB.get_metadata_routing"]], "get_params() (sklearn.naive_bayes.categoricalnb method)": [[835, "sklearn.naive_bayes.CategoricalNB.get_params"]], "partial_fit() (sklearn.naive_bayes.categoricalnb method)": [[835, "sklearn.naive_bayes.CategoricalNB.partial_fit"]], "predict() (sklearn.naive_bayes.categoricalnb method)": [[835, "sklearn.naive_bayes.CategoricalNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.categoricalnb method)": [[835, "sklearn.naive_bayes.CategoricalNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.categoricalnb method)": [[835, "sklearn.naive_bayes.CategoricalNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.categoricalnb method)": [[835, "sklearn.naive_bayes.CategoricalNB.predict_proba"]], "score() (sklearn.naive_bayes.categoricalnb method)": [[835, "sklearn.naive_bayes.CategoricalNB.score"]], "set_fit_request() (sklearn.naive_bayes.categoricalnb method)": [[835, "sklearn.naive_bayes.CategoricalNB.set_fit_request"]], "set_params() (sklearn.naive_bayes.categoricalnb method)": [[835, "sklearn.naive_bayes.CategoricalNB.set_params"]], "set_partial_fit_request() (sklearn.naive_bayes.categoricalnb method)": [[835, "sklearn.naive_bayes.CategoricalNB.set_partial_fit_request"]], "set_score_request() (sklearn.naive_bayes.categoricalnb method)": [[835, "sklearn.naive_bayes.CategoricalNB.set_score_request"]], "complementnb (class in sklearn.naive_bayes)": [[836, "sklearn.naive_bayes.ComplementNB"]], "fit() (sklearn.naive_bayes.complementnb method)": [[836, "sklearn.naive_bayes.ComplementNB.fit"]], "get_metadata_routing() (sklearn.naive_bayes.complementnb method)": [[836, "sklearn.naive_bayes.ComplementNB.get_metadata_routing"]], "get_params() (sklearn.naive_bayes.complementnb method)": [[836, "sklearn.naive_bayes.ComplementNB.get_params"]], "partial_fit() (sklearn.naive_bayes.complementnb method)": [[836, "sklearn.naive_bayes.ComplementNB.partial_fit"]], "predict() (sklearn.naive_bayes.complementnb method)": [[836, "sklearn.naive_bayes.ComplementNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.complementnb method)": [[836, "sklearn.naive_bayes.ComplementNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.complementnb method)": [[836, "sklearn.naive_bayes.ComplementNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.complementnb method)": [[836, "sklearn.naive_bayes.ComplementNB.predict_proba"]], "score() (sklearn.naive_bayes.complementnb method)": [[836, "sklearn.naive_bayes.ComplementNB.score"]], "set_fit_request() (sklearn.naive_bayes.complementnb method)": [[836, "sklearn.naive_bayes.ComplementNB.set_fit_request"]], "set_params() (sklearn.naive_bayes.complementnb method)": [[836, "sklearn.naive_bayes.ComplementNB.set_params"]], "set_partial_fit_request() (sklearn.naive_bayes.complementnb method)": [[836, "sklearn.naive_bayes.ComplementNB.set_partial_fit_request"]], "set_score_request() (sklearn.naive_bayes.complementnb method)": [[836, "sklearn.naive_bayes.ComplementNB.set_score_request"]], "gaussiannb (class in sklearn.naive_bayes)": [[837, "sklearn.naive_bayes.GaussianNB"]], "fit() (sklearn.naive_bayes.gaussiannb method)": [[837, "sklearn.naive_bayes.GaussianNB.fit"]], "get_metadata_routing() (sklearn.naive_bayes.gaussiannb method)": [[837, "sklearn.naive_bayes.GaussianNB.get_metadata_routing"]], "get_params() (sklearn.naive_bayes.gaussiannb method)": [[837, "sklearn.naive_bayes.GaussianNB.get_params"]], "partial_fit() (sklearn.naive_bayes.gaussiannb method)": [[837, "sklearn.naive_bayes.GaussianNB.partial_fit"]], "predict() (sklearn.naive_bayes.gaussiannb method)": [[837, "sklearn.naive_bayes.GaussianNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.gaussiannb method)": [[837, "sklearn.naive_bayes.GaussianNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.gaussiannb method)": [[837, "sklearn.naive_bayes.GaussianNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.gaussiannb method)": [[837, "sklearn.naive_bayes.GaussianNB.predict_proba"]], "score() (sklearn.naive_bayes.gaussiannb method)": [[837, "sklearn.naive_bayes.GaussianNB.score"]], "set_fit_request() (sklearn.naive_bayes.gaussiannb method)": [[837, "sklearn.naive_bayes.GaussianNB.set_fit_request"]], "set_params() (sklearn.naive_bayes.gaussiannb method)": [[837, "sklearn.naive_bayes.GaussianNB.set_params"]], "set_partial_fit_request() (sklearn.naive_bayes.gaussiannb method)": [[837, "sklearn.naive_bayes.GaussianNB.set_partial_fit_request"]], "set_score_request() (sklearn.naive_bayes.gaussiannb method)": [[837, "sklearn.naive_bayes.GaussianNB.set_score_request"]], "multinomialnb (class in sklearn.naive_bayes)": [[838, "sklearn.naive_bayes.MultinomialNB"]], "fit() (sklearn.naive_bayes.multinomialnb method)": [[838, "sklearn.naive_bayes.MultinomialNB.fit"]], "get_metadata_routing() (sklearn.naive_bayes.multinomialnb method)": [[838, "sklearn.naive_bayes.MultinomialNB.get_metadata_routing"]], "get_params() (sklearn.naive_bayes.multinomialnb method)": [[838, "sklearn.naive_bayes.MultinomialNB.get_params"]], "partial_fit() (sklearn.naive_bayes.multinomialnb method)": [[838, "sklearn.naive_bayes.MultinomialNB.partial_fit"]], "predict() (sklearn.naive_bayes.multinomialnb method)": [[838, "sklearn.naive_bayes.MultinomialNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.multinomialnb method)": [[838, "sklearn.naive_bayes.MultinomialNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.multinomialnb method)": [[838, "sklearn.naive_bayes.MultinomialNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.multinomialnb method)": [[838, "sklearn.naive_bayes.MultinomialNB.predict_proba"]], "score() (sklearn.naive_bayes.multinomialnb method)": [[838, "sklearn.naive_bayes.MultinomialNB.score"]], "set_fit_request() (sklearn.naive_bayes.multinomialnb method)": [[838, "sklearn.naive_bayes.MultinomialNB.set_fit_request"]], "set_params() (sklearn.naive_bayes.multinomialnb method)": [[838, "sklearn.naive_bayes.MultinomialNB.set_params"]], "set_partial_fit_request() (sklearn.naive_bayes.multinomialnb method)": [[838, "sklearn.naive_bayes.MultinomialNB.set_partial_fit_request"]], "set_score_request() (sklearn.naive_bayes.multinomialnb method)": [[838, "sklearn.naive_bayes.MultinomialNB.set_score_request"]], "balltree (class in sklearn.neighbors)": [[839, "sklearn.neighbors.BallTree"]], "get_arrays() (sklearn.neighbors.balltree method)": [[839, "sklearn.neighbors.BallTree.get_arrays"]], "get_n_calls() (sklearn.neighbors.balltree method)": [[839, "sklearn.neighbors.BallTree.get_n_calls"]], "get_tree_stats() (sklearn.neighbors.balltree method)": [[839, "sklearn.neighbors.BallTree.get_tree_stats"]], "kernel_density() (sklearn.neighbors.balltree method)": [[839, "sklearn.neighbors.BallTree.kernel_density"]], "query() (sklearn.neighbors.balltree method)": [[839, "sklearn.neighbors.BallTree.query"]], "query_radius() (sklearn.neighbors.balltree method)": [[839, "sklearn.neighbors.BallTree.query_radius"]], "reset_n_calls() (sklearn.neighbors.balltree method)": [[839, "sklearn.neighbors.BallTree.reset_n_calls"]], "two_point_correlation() (sklearn.neighbors.balltree method)": [[839, "sklearn.neighbors.BallTree.two_point_correlation"]], "kdtree (class in sklearn.neighbors)": [[840, "sklearn.neighbors.KDTree"]], "get_arrays() (sklearn.neighbors.kdtree method)": [[840, "sklearn.neighbors.KDTree.get_arrays"]], "get_n_calls() (sklearn.neighbors.kdtree method)": [[840, "sklearn.neighbors.KDTree.get_n_calls"]], "get_tree_stats() (sklearn.neighbors.kdtree method)": [[840, "sklearn.neighbors.KDTree.get_tree_stats"]], "kernel_density() (sklearn.neighbors.kdtree method)": [[840, "sklearn.neighbors.KDTree.kernel_density"]], "query() (sklearn.neighbors.kdtree method)": [[840, "sklearn.neighbors.KDTree.query"]], "query_radius() (sklearn.neighbors.kdtree method)": [[840, "sklearn.neighbors.KDTree.query_radius"]], "reset_n_calls() (sklearn.neighbors.kdtree method)": [[840, "sklearn.neighbors.KDTree.reset_n_calls"]], "two_point_correlation() (sklearn.neighbors.kdtree method)": [[840, "sklearn.neighbors.KDTree.two_point_correlation"]], "kneighborsclassifier (class in sklearn.neighbors)": [[841, "sklearn.neighbors.KNeighborsClassifier"]], "fit() (sklearn.neighbors.kneighborsclassifier method)": [[841, "sklearn.neighbors.KNeighborsClassifier.fit"]], "get_metadata_routing() (sklearn.neighbors.kneighborsclassifier method)": [[841, "sklearn.neighbors.KNeighborsClassifier.get_metadata_routing"]], "get_params() (sklearn.neighbors.kneighborsclassifier method)": [[841, "sklearn.neighbors.KNeighborsClassifier.get_params"]], "kneighbors() (sklearn.neighbors.kneighborsclassifier method)": [[841, "sklearn.neighbors.KNeighborsClassifier.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.kneighborsclassifier method)": [[841, "sklearn.neighbors.KNeighborsClassifier.kneighbors_graph"]], "predict() (sklearn.neighbors.kneighborsclassifier method)": [[841, "sklearn.neighbors.KNeighborsClassifier.predict"]], "predict_proba() (sklearn.neighbors.kneighborsclassifier method)": [[841, "sklearn.neighbors.KNeighborsClassifier.predict_proba"]], "score() (sklearn.neighbors.kneighborsclassifier method)": [[841, "sklearn.neighbors.KNeighborsClassifier.score"]], "set_params() (sklearn.neighbors.kneighborsclassifier method)": [[841, "sklearn.neighbors.KNeighborsClassifier.set_params"]], "set_score_request() (sklearn.neighbors.kneighborsclassifier method)": [[841, "sklearn.neighbors.KNeighborsClassifier.set_score_request"]], "kneighborsregressor (class in sklearn.neighbors)": [[842, "sklearn.neighbors.KNeighborsRegressor"]], "fit() (sklearn.neighbors.kneighborsregressor method)": [[842, "sklearn.neighbors.KNeighborsRegressor.fit"]], "get_metadata_routing() (sklearn.neighbors.kneighborsregressor method)": [[842, "sklearn.neighbors.KNeighborsRegressor.get_metadata_routing"]], "get_params() (sklearn.neighbors.kneighborsregressor method)": [[842, "sklearn.neighbors.KNeighborsRegressor.get_params"]], "kneighbors() (sklearn.neighbors.kneighborsregressor method)": [[842, "sklearn.neighbors.KNeighborsRegressor.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.kneighborsregressor method)": [[842, "sklearn.neighbors.KNeighborsRegressor.kneighbors_graph"]], "predict() (sklearn.neighbors.kneighborsregressor method)": [[842, "sklearn.neighbors.KNeighborsRegressor.predict"]], "score() (sklearn.neighbors.kneighborsregressor method)": [[842, "sklearn.neighbors.KNeighborsRegressor.score"]], "set_params() (sklearn.neighbors.kneighborsregressor method)": [[842, "sklearn.neighbors.KNeighborsRegressor.set_params"]], "set_score_request() (sklearn.neighbors.kneighborsregressor method)": [[842, "sklearn.neighbors.KNeighborsRegressor.set_score_request"]], "kneighborstransformer (class in sklearn.neighbors)": [[843, "sklearn.neighbors.KNeighborsTransformer"]], "fit() (sklearn.neighbors.kneighborstransformer method)": [[843, "sklearn.neighbors.KNeighborsTransformer.fit"]], "fit_transform() (sklearn.neighbors.kneighborstransformer method)": [[843, "sklearn.neighbors.KNeighborsTransformer.fit_transform"]], "get_feature_names_out() (sklearn.neighbors.kneighborstransformer method)": [[843, "sklearn.neighbors.KNeighborsTransformer.get_feature_names_out"]], "get_metadata_routing() (sklearn.neighbors.kneighborstransformer method)": [[843, "sklearn.neighbors.KNeighborsTransformer.get_metadata_routing"]], "get_params() (sklearn.neighbors.kneighborstransformer method)": [[843, "sklearn.neighbors.KNeighborsTransformer.get_params"]], "kneighbors() (sklearn.neighbors.kneighborstransformer method)": [[843, "sklearn.neighbors.KNeighborsTransformer.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.kneighborstransformer method)": [[843, "sklearn.neighbors.KNeighborsTransformer.kneighbors_graph"]], "set_output() (sklearn.neighbors.kneighborstransformer method)": [[843, "sklearn.neighbors.KNeighborsTransformer.set_output"]], "set_params() (sklearn.neighbors.kneighborstransformer method)": [[843, "sklearn.neighbors.KNeighborsTransformer.set_params"]], "transform() (sklearn.neighbors.kneighborstransformer method)": [[843, "sklearn.neighbors.KNeighborsTransformer.transform"]], "kerneldensity (class in sklearn.neighbors)": [[844, "sklearn.neighbors.KernelDensity"]], "fit() (sklearn.neighbors.kerneldensity method)": [[844, "sklearn.neighbors.KernelDensity.fit"]], "get_metadata_routing() (sklearn.neighbors.kerneldensity method)": [[844, "sklearn.neighbors.KernelDensity.get_metadata_routing"]], "get_params() (sklearn.neighbors.kerneldensity method)": [[844, "sklearn.neighbors.KernelDensity.get_params"]], "sample() (sklearn.neighbors.kerneldensity method)": [[844, "sklearn.neighbors.KernelDensity.sample"]], "score() (sklearn.neighbors.kerneldensity method)": [[844, "sklearn.neighbors.KernelDensity.score"]], "score_samples() (sklearn.neighbors.kerneldensity method)": [[844, "sklearn.neighbors.KernelDensity.score_samples"]], "set_fit_request() (sklearn.neighbors.kerneldensity method)": [[844, "sklearn.neighbors.KernelDensity.set_fit_request"]], "set_params() (sklearn.neighbors.kerneldensity method)": [[844, "sklearn.neighbors.KernelDensity.set_params"]], "localoutlierfactor (class in sklearn.neighbors)": [[845, "sklearn.neighbors.LocalOutlierFactor"]], "decision_function() (sklearn.neighbors.localoutlierfactor method)": [[845, "sklearn.neighbors.LocalOutlierFactor.decision_function"]], "fit() (sklearn.neighbors.localoutlierfactor method)": [[845, "sklearn.neighbors.LocalOutlierFactor.fit"]], "fit_predict() (sklearn.neighbors.localoutlierfactor method)": [[845, "sklearn.neighbors.LocalOutlierFactor.fit_predict"]], "get_metadata_routing() (sklearn.neighbors.localoutlierfactor method)": [[845, "sklearn.neighbors.LocalOutlierFactor.get_metadata_routing"]], "get_params() (sklearn.neighbors.localoutlierfactor method)": [[845, "sklearn.neighbors.LocalOutlierFactor.get_params"]], "kneighbors() (sklearn.neighbors.localoutlierfactor method)": [[845, "sklearn.neighbors.LocalOutlierFactor.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.localoutlierfactor method)": [[845, "sklearn.neighbors.LocalOutlierFactor.kneighbors_graph"]], "predict() (sklearn.neighbors.localoutlierfactor method)": [[845, "sklearn.neighbors.LocalOutlierFactor.predict"]], "score_samples() (sklearn.neighbors.localoutlierfactor method)": [[845, "sklearn.neighbors.LocalOutlierFactor.score_samples"]], "set_params() (sklearn.neighbors.localoutlierfactor method)": [[845, "sklearn.neighbors.LocalOutlierFactor.set_params"]], "nearestcentroid (class in sklearn.neighbors)": [[846, "sklearn.neighbors.NearestCentroid"]], "fit() (sklearn.neighbors.nearestcentroid method)": [[846, "sklearn.neighbors.NearestCentroid.fit"]], "get_metadata_routing() (sklearn.neighbors.nearestcentroid method)": [[846, "sklearn.neighbors.NearestCentroid.get_metadata_routing"]], "get_params() (sklearn.neighbors.nearestcentroid method)": [[846, "sklearn.neighbors.NearestCentroid.get_params"]], "predict() (sklearn.neighbors.nearestcentroid method)": [[846, "sklearn.neighbors.NearestCentroid.predict"]], "score() (sklearn.neighbors.nearestcentroid method)": [[846, "sklearn.neighbors.NearestCentroid.score"]], "set_params() (sklearn.neighbors.nearestcentroid method)": [[846, "sklearn.neighbors.NearestCentroid.set_params"]], "set_score_request() (sklearn.neighbors.nearestcentroid method)": [[846, "sklearn.neighbors.NearestCentroid.set_score_request"]], "nearestneighbors (class in sklearn.neighbors)": [[847, "sklearn.neighbors.NearestNeighbors"]], "fit() (sklearn.neighbors.nearestneighbors method)": [[847, "sklearn.neighbors.NearestNeighbors.fit"]], "get_metadata_routing() (sklearn.neighbors.nearestneighbors method)": [[847, "sklearn.neighbors.NearestNeighbors.get_metadata_routing"]], "get_params() (sklearn.neighbors.nearestneighbors method)": [[847, "sklearn.neighbors.NearestNeighbors.get_params"]], "kneighbors() (sklearn.neighbors.nearestneighbors method)": [[847, "sklearn.neighbors.NearestNeighbors.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.nearestneighbors method)": [[847, "sklearn.neighbors.NearestNeighbors.kneighbors_graph"]], "radius_neighbors() (sklearn.neighbors.nearestneighbors method)": [[847, "sklearn.neighbors.NearestNeighbors.radius_neighbors"]], "radius_neighbors_graph() (sklearn.neighbors.nearestneighbors method)": [[847, "sklearn.neighbors.NearestNeighbors.radius_neighbors_graph"]], "set_params() (sklearn.neighbors.nearestneighbors method)": [[847, "sklearn.neighbors.NearestNeighbors.set_params"]], "neighborhoodcomponentsanalysis (class in sklearn.neighbors)": [[848, "sklearn.neighbors.NeighborhoodComponentsAnalysis"]], "fit() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[848, "sklearn.neighbors.NeighborhoodComponentsAnalysis.fit"]], "fit_transform() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[848, "sklearn.neighbors.NeighborhoodComponentsAnalysis.fit_transform"]], "get_feature_names_out() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[848, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_feature_names_out"]], "get_metadata_routing() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[848, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_metadata_routing"]], "get_params() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[848, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_params"]], "set_output() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[848, "sklearn.neighbors.NeighborhoodComponentsAnalysis.set_output"]], "set_params() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[848, "sklearn.neighbors.NeighborhoodComponentsAnalysis.set_params"]], "transform() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[848, "sklearn.neighbors.NeighborhoodComponentsAnalysis.transform"]], "radiusneighborsclassifier (class in sklearn.neighbors)": [[849, "sklearn.neighbors.RadiusNeighborsClassifier"]], "fit() (sklearn.neighbors.radiusneighborsclassifier method)": [[849, "sklearn.neighbors.RadiusNeighborsClassifier.fit"]], "get_metadata_routing() (sklearn.neighbors.radiusneighborsclassifier method)": [[849, "sklearn.neighbors.RadiusNeighborsClassifier.get_metadata_routing"]], "get_params() (sklearn.neighbors.radiusneighborsclassifier method)": [[849, "sklearn.neighbors.RadiusNeighborsClassifier.get_params"]], "predict() (sklearn.neighbors.radiusneighborsclassifier method)": [[849, "sklearn.neighbors.RadiusNeighborsClassifier.predict"]], "predict_proba() (sklearn.neighbors.radiusneighborsclassifier method)": [[849, "sklearn.neighbors.RadiusNeighborsClassifier.predict_proba"]], "radius_neighbors() (sklearn.neighbors.radiusneighborsclassifier method)": [[849, "sklearn.neighbors.RadiusNeighborsClassifier.radius_neighbors"]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborsclassifier method)": [[849, "sklearn.neighbors.RadiusNeighborsClassifier.radius_neighbors_graph"]], "score() (sklearn.neighbors.radiusneighborsclassifier method)": [[849, "sklearn.neighbors.RadiusNeighborsClassifier.score"]], "set_params() (sklearn.neighbors.radiusneighborsclassifier method)": [[849, "sklearn.neighbors.RadiusNeighborsClassifier.set_params"]], "set_score_request() (sklearn.neighbors.radiusneighborsclassifier method)": [[849, "sklearn.neighbors.RadiusNeighborsClassifier.set_score_request"]], "radiusneighborsregressor (class in sklearn.neighbors)": [[850, "sklearn.neighbors.RadiusNeighborsRegressor"]], "fit() (sklearn.neighbors.radiusneighborsregressor method)": [[850, "sklearn.neighbors.RadiusNeighborsRegressor.fit"]], "get_metadata_routing() (sklearn.neighbors.radiusneighborsregressor method)": [[850, "sklearn.neighbors.RadiusNeighborsRegressor.get_metadata_routing"]], "get_params() (sklearn.neighbors.radiusneighborsregressor method)": [[850, "sklearn.neighbors.RadiusNeighborsRegressor.get_params"]], "predict() (sklearn.neighbors.radiusneighborsregressor method)": [[850, "sklearn.neighbors.RadiusNeighborsRegressor.predict"]], "radius_neighbors() (sklearn.neighbors.radiusneighborsregressor method)": [[850, "sklearn.neighbors.RadiusNeighborsRegressor.radius_neighbors"]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborsregressor method)": [[850, "sklearn.neighbors.RadiusNeighborsRegressor.radius_neighbors_graph"]], "score() (sklearn.neighbors.radiusneighborsregressor method)": [[850, "sklearn.neighbors.RadiusNeighborsRegressor.score"]], "set_params() (sklearn.neighbors.radiusneighborsregressor method)": [[850, "sklearn.neighbors.RadiusNeighborsRegressor.set_params"]], "set_score_request() (sklearn.neighbors.radiusneighborsregressor method)": [[850, "sklearn.neighbors.RadiusNeighborsRegressor.set_score_request"]], "radiusneighborstransformer (class in sklearn.neighbors)": [[851, "sklearn.neighbors.RadiusNeighborsTransformer"]], "fit() (sklearn.neighbors.radiusneighborstransformer method)": [[851, "sklearn.neighbors.RadiusNeighborsTransformer.fit"]], "fit_transform() (sklearn.neighbors.radiusneighborstransformer method)": [[851, "sklearn.neighbors.RadiusNeighborsTransformer.fit_transform"]], "get_feature_names_out() (sklearn.neighbors.radiusneighborstransformer method)": [[851, "sklearn.neighbors.RadiusNeighborsTransformer.get_feature_names_out"]], "get_metadata_routing() (sklearn.neighbors.radiusneighborstransformer method)": [[851, "sklearn.neighbors.RadiusNeighborsTransformer.get_metadata_routing"]], "get_params() (sklearn.neighbors.radiusneighborstransformer method)": [[851, "sklearn.neighbors.RadiusNeighborsTransformer.get_params"]], "radius_neighbors() (sklearn.neighbors.radiusneighborstransformer method)": [[851, "sklearn.neighbors.RadiusNeighborsTransformer.radius_neighbors"]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborstransformer method)": [[851, "sklearn.neighbors.RadiusNeighborsTransformer.radius_neighbors_graph"]], "set_output() (sklearn.neighbors.radiusneighborstransformer method)": [[851, "sklearn.neighbors.RadiusNeighborsTransformer.set_output"]], "set_params() (sklearn.neighbors.radiusneighborstransformer method)": [[851, "sklearn.neighbors.RadiusNeighborsTransformer.set_params"]], "transform() (sklearn.neighbors.radiusneighborstransformer method)": [[851, "sklearn.neighbors.RadiusNeighborsTransformer.transform"]], "kneighbors_graph() (in module sklearn.neighbors)": [[852, "sklearn.neighbors.kneighbors_graph"]], "radius_neighbors_graph() (in module sklearn.neighbors)": [[853, "sklearn.neighbors.radius_neighbors_graph"]], "sort_graph_by_row_values() (in module sklearn.neighbors)": [[854, "sklearn.neighbors.sort_graph_by_row_values"]], "bernoullirbm (class in sklearn.neural_network)": [[855, "sklearn.neural_network.BernoulliRBM"]], "fit() (sklearn.neural_network.bernoullirbm method)": [[855, "sklearn.neural_network.BernoulliRBM.fit"]], "fit_transform() (sklearn.neural_network.bernoullirbm method)": [[855, "sklearn.neural_network.BernoulliRBM.fit_transform"]], "get_feature_names_out() (sklearn.neural_network.bernoullirbm method)": [[855, "sklearn.neural_network.BernoulliRBM.get_feature_names_out"]], "get_metadata_routing() (sklearn.neural_network.bernoullirbm method)": [[855, "sklearn.neural_network.BernoulliRBM.get_metadata_routing"]], "get_params() (sklearn.neural_network.bernoullirbm method)": [[855, "sklearn.neural_network.BernoulliRBM.get_params"]], "gibbs() (sklearn.neural_network.bernoullirbm method)": [[855, "sklearn.neural_network.BernoulliRBM.gibbs"]], "partial_fit() (sklearn.neural_network.bernoullirbm method)": [[855, "sklearn.neural_network.BernoulliRBM.partial_fit"]], "score_samples() (sklearn.neural_network.bernoullirbm method)": [[855, "sklearn.neural_network.BernoulliRBM.score_samples"]], "set_output() (sklearn.neural_network.bernoullirbm method)": [[855, "sklearn.neural_network.BernoulliRBM.set_output"]], "set_params() (sklearn.neural_network.bernoullirbm method)": [[855, "sklearn.neural_network.BernoulliRBM.set_params"]], "transform() (sklearn.neural_network.bernoullirbm method)": [[855, "sklearn.neural_network.BernoulliRBM.transform"]], "mlpclassifier (class in sklearn.neural_network)": [[856, "sklearn.neural_network.MLPClassifier"]], "fit() (sklearn.neural_network.mlpclassifier method)": [[856, "sklearn.neural_network.MLPClassifier.fit"]], "get_metadata_routing() (sklearn.neural_network.mlpclassifier method)": [[856, "sklearn.neural_network.MLPClassifier.get_metadata_routing"]], "get_params() (sklearn.neural_network.mlpclassifier method)": [[856, "sklearn.neural_network.MLPClassifier.get_params"]], "partial_fit() (sklearn.neural_network.mlpclassifier method)": [[856, "sklearn.neural_network.MLPClassifier.partial_fit"]], "predict() (sklearn.neural_network.mlpclassifier method)": [[856, "sklearn.neural_network.MLPClassifier.predict"]], "predict_log_proba() (sklearn.neural_network.mlpclassifier method)": [[856, "sklearn.neural_network.MLPClassifier.predict_log_proba"]], "predict_proba() (sklearn.neural_network.mlpclassifier method)": [[856, "sklearn.neural_network.MLPClassifier.predict_proba"]], "score() (sklearn.neural_network.mlpclassifier method)": [[856, "sklearn.neural_network.MLPClassifier.score"]], "set_params() (sklearn.neural_network.mlpclassifier method)": [[856, "sklearn.neural_network.MLPClassifier.set_params"]], "set_partial_fit_request() (sklearn.neural_network.mlpclassifier method)": [[856, "sklearn.neural_network.MLPClassifier.set_partial_fit_request"]], "set_score_request() (sklearn.neural_network.mlpclassifier method)": [[856, "sklearn.neural_network.MLPClassifier.set_score_request"]], "mlpregressor (class in sklearn.neural_network)": [[857, "sklearn.neural_network.MLPRegressor"]], "fit() (sklearn.neural_network.mlpregressor method)": [[857, "sklearn.neural_network.MLPRegressor.fit"]], "get_metadata_routing() (sklearn.neural_network.mlpregressor method)": [[857, "sklearn.neural_network.MLPRegressor.get_metadata_routing"]], "get_params() (sklearn.neural_network.mlpregressor method)": [[857, "sklearn.neural_network.MLPRegressor.get_params"]], "partial_fit() (sklearn.neural_network.mlpregressor method)": [[857, "sklearn.neural_network.MLPRegressor.partial_fit"]], "predict() (sklearn.neural_network.mlpregressor method)": [[857, "sklearn.neural_network.MLPRegressor.predict"]], "score() (sklearn.neural_network.mlpregressor method)": [[857, "sklearn.neural_network.MLPRegressor.score"]], "set_params() (sklearn.neural_network.mlpregressor method)": [[857, "sklearn.neural_network.MLPRegressor.set_params"]], "set_score_request() (sklearn.neural_network.mlpregressor method)": [[857, "sklearn.neural_network.MLPRegressor.set_score_request"]], "featureunion (class in sklearn.pipeline)": [[858, "sklearn.pipeline.FeatureUnion"]], "feature_names_in_ (sklearn.pipeline.featureunion property)": [[858, "sklearn.pipeline.FeatureUnion.feature_names_in_"]], "fit() (sklearn.pipeline.featureunion method)": [[858, "sklearn.pipeline.FeatureUnion.fit"]], "fit_transform() (sklearn.pipeline.featureunion method)": [[858, "sklearn.pipeline.FeatureUnion.fit_transform"]], "get_feature_names_out() (sklearn.pipeline.featureunion method)": [[858, "sklearn.pipeline.FeatureUnion.get_feature_names_out"]], "get_metadata_routing() (sklearn.pipeline.featureunion method)": [[858, "sklearn.pipeline.FeatureUnion.get_metadata_routing"]], "get_params() (sklearn.pipeline.featureunion method)": [[858, "sklearn.pipeline.FeatureUnion.get_params"]], "n_features_in_ (sklearn.pipeline.featureunion property)": [[858, "sklearn.pipeline.FeatureUnion.n_features_in_"]], "set_output() (sklearn.pipeline.featureunion method)": [[858, "sklearn.pipeline.FeatureUnion.set_output"]], "set_params() (sklearn.pipeline.featureunion method)": [[858, "sklearn.pipeline.FeatureUnion.set_params"]], "transform() (sklearn.pipeline.featureunion method)": [[858, "sklearn.pipeline.FeatureUnion.transform"]], "pipeline (class in sklearn.pipeline)": [[859, "sklearn.pipeline.Pipeline"]], "classes_ (sklearn.pipeline.pipeline property)": [[859, "sklearn.pipeline.Pipeline.classes_"]], "decision_function() (sklearn.pipeline.pipeline method)": [[859, "sklearn.pipeline.Pipeline.decision_function"]], "feature_names_in_ (sklearn.pipeline.pipeline property)": [[859, "sklearn.pipeline.Pipeline.feature_names_in_"]], "fit() (sklearn.pipeline.pipeline method)": [[859, "sklearn.pipeline.Pipeline.fit"]], "fit_predict() (sklearn.pipeline.pipeline method)": [[859, "sklearn.pipeline.Pipeline.fit_predict"]], "fit_transform() (sklearn.pipeline.pipeline method)": [[859, "sklearn.pipeline.Pipeline.fit_transform"]], "get_feature_names_out() (sklearn.pipeline.pipeline method)": [[859, "sklearn.pipeline.Pipeline.get_feature_names_out"]], "get_metadata_routing() (sklearn.pipeline.pipeline method)": [[859, "sklearn.pipeline.Pipeline.get_metadata_routing"]], "get_params() (sklearn.pipeline.pipeline method)": [[859, "sklearn.pipeline.Pipeline.get_params"]], "inverse_transform() (sklearn.pipeline.pipeline method)": [[859, "sklearn.pipeline.Pipeline.inverse_transform"]], "n_features_in_ (sklearn.pipeline.pipeline property)": [[859, "sklearn.pipeline.Pipeline.n_features_in_"]], "named_steps (sklearn.pipeline.pipeline property)": [[859, "sklearn.pipeline.Pipeline.named_steps"]], "predict() (sklearn.pipeline.pipeline method)": [[859, "sklearn.pipeline.Pipeline.predict"]], "predict_log_proba() (sklearn.pipeline.pipeline method)": [[859, "sklearn.pipeline.Pipeline.predict_log_proba"]], "predict_proba() (sklearn.pipeline.pipeline method)": [[859, "sklearn.pipeline.Pipeline.predict_proba"]], "score() (sklearn.pipeline.pipeline method)": [[859, "sklearn.pipeline.Pipeline.score"]], "score_samples() (sklearn.pipeline.pipeline method)": [[859, "sklearn.pipeline.Pipeline.score_samples"]], "set_output() (sklearn.pipeline.pipeline method)": [[859, "sklearn.pipeline.Pipeline.set_output"]], "set_params() (sklearn.pipeline.pipeline method)": [[859, "sklearn.pipeline.Pipeline.set_params"]], "set_score_request() (sklearn.pipeline.pipeline method)": [[859, "sklearn.pipeline.Pipeline.set_score_request"]], "transform() (sklearn.pipeline.pipeline method)": [[859, "sklearn.pipeline.Pipeline.transform"]], "make_pipeline() (in module sklearn.pipeline)": [[860, "sklearn.pipeline.make_pipeline"]], "make_union() (in module sklearn.pipeline)": [[861, "sklearn.pipeline.make_union"]], "binarizer (class in sklearn.preprocessing)": [[862, "sklearn.preprocessing.Binarizer"]], "fit() (sklearn.preprocessing.binarizer method)": [[862, "sklearn.preprocessing.Binarizer.fit"]], "fit_transform() (sklearn.preprocessing.binarizer method)": [[862, "sklearn.preprocessing.Binarizer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.binarizer method)": [[862, "sklearn.preprocessing.Binarizer.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.binarizer method)": [[862, "sklearn.preprocessing.Binarizer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.binarizer method)": [[862, "sklearn.preprocessing.Binarizer.get_params"]], "set_output() (sklearn.preprocessing.binarizer method)": [[862, "sklearn.preprocessing.Binarizer.set_output"]], "set_params() (sklearn.preprocessing.binarizer method)": [[862, "sklearn.preprocessing.Binarizer.set_params"]], "set_transform_request() (sklearn.preprocessing.binarizer method)": [[862, "sklearn.preprocessing.Binarizer.set_transform_request"]], "transform() (sklearn.preprocessing.binarizer method)": [[862, "sklearn.preprocessing.Binarizer.transform"]], "functiontransformer (class in sklearn.preprocessing)": [[863, "sklearn.preprocessing.FunctionTransformer"]], "fit() (sklearn.preprocessing.functiontransformer method)": [[863, "sklearn.preprocessing.FunctionTransformer.fit"]], "fit_transform() (sklearn.preprocessing.functiontransformer method)": [[863, "sklearn.preprocessing.FunctionTransformer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.functiontransformer method)": [[863, "sklearn.preprocessing.FunctionTransformer.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.functiontransformer method)": [[863, "sklearn.preprocessing.FunctionTransformer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.functiontransformer method)": [[863, "sklearn.preprocessing.FunctionTransformer.get_params"]], "inverse_transform() (sklearn.preprocessing.functiontransformer method)": [[863, "sklearn.preprocessing.FunctionTransformer.inverse_transform"]], "set_output() (sklearn.preprocessing.functiontransformer method)": [[863, "sklearn.preprocessing.FunctionTransformer.set_output"]], "set_params() (sklearn.preprocessing.functiontransformer method)": [[863, "sklearn.preprocessing.FunctionTransformer.set_params"]], "transform() (sklearn.preprocessing.functiontransformer method)": [[863, "sklearn.preprocessing.FunctionTransformer.transform"]], "kbinsdiscretizer (class in sklearn.preprocessing)": [[864, "sklearn.preprocessing.KBinsDiscretizer"]], "fit() (sklearn.preprocessing.kbinsdiscretizer method)": [[864, "sklearn.preprocessing.KBinsDiscretizer.fit"]], "fit_transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[864, "sklearn.preprocessing.KBinsDiscretizer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.kbinsdiscretizer method)": [[864, "sklearn.preprocessing.KBinsDiscretizer.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.kbinsdiscretizer method)": [[864, "sklearn.preprocessing.KBinsDiscretizer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.kbinsdiscretizer method)": [[864, "sklearn.preprocessing.KBinsDiscretizer.get_params"]], "inverse_transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[864, "sklearn.preprocessing.KBinsDiscretizer.inverse_transform"]], "set_fit_request() (sklearn.preprocessing.kbinsdiscretizer method)": [[864, "sklearn.preprocessing.KBinsDiscretizer.set_fit_request"]], "set_output() (sklearn.preprocessing.kbinsdiscretizer method)": [[864, "sklearn.preprocessing.KBinsDiscretizer.set_output"]], "set_params() (sklearn.preprocessing.kbinsdiscretizer method)": [[864, "sklearn.preprocessing.KBinsDiscretizer.set_params"]], "transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[864, "sklearn.preprocessing.KBinsDiscretizer.transform"]], "kernelcenterer (class in sklearn.preprocessing)": [[865, "sklearn.preprocessing.KernelCenterer"]], "fit() (sklearn.preprocessing.kernelcenterer method)": [[865, "sklearn.preprocessing.KernelCenterer.fit"]], "fit_transform() (sklearn.preprocessing.kernelcenterer method)": [[865, "sklearn.preprocessing.KernelCenterer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.kernelcenterer method)": [[865, "sklearn.preprocessing.KernelCenterer.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.kernelcenterer method)": [[865, "sklearn.preprocessing.KernelCenterer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.kernelcenterer method)": [[865, "sklearn.preprocessing.KernelCenterer.get_params"]], "set_fit_request() (sklearn.preprocessing.kernelcenterer method)": [[865, "sklearn.preprocessing.KernelCenterer.set_fit_request"]], "set_output() (sklearn.preprocessing.kernelcenterer method)": [[865, "sklearn.preprocessing.KernelCenterer.set_output"]], "set_params() (sklearn.preprocessing.kernelcenterer method)": [[865, "sklearn.preprocessing.KernelCenterer.set_params"]], "set_transform_request() (sklearn.preprocessing.kernelcenterer method)": [[865, "sklearn.preprocessing.KernelCenterer.set_transform_request"]], "transform() (sklearn.preprocessing.kernelcenterer method)": [[865, "sklearn.preprocessing.KernelCenterer.transform"]], "labelbinarizer (class in sklearn.preprocessing)": [[866, "sklearn.preprocessing.LabelBinarizer"]], "fit() (sklearn.preprocessing.labelbinarizer method)": [[866, "sklearn.preprocessing.LabelBinarizer.fit"]], "fit_transform() (sklearn.preprocessing.labelbinarizer method)": [[866, "sklearn.preprocessing.LabelBinarizer.fit_transform"]], "get_metadata_routing() (sklearn.preprocessing.labelbinarizer method)": [[866, "sklearn.preprocessing.LabelBinarizer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.labelbinarizer method)": [[866, "sklearn.preprocessing.LabelBinarizer.get_params"]], "inverse_transform() (sklearn.preprocessing.labelbinarizer method)": [[866, "sklearn.preprocessing.LabelBinarizer.inverse_transform"]], "set_inverse_transform_request() (sklearn.preprocessing.labelbinarizer method)": [[866, "sklearn.preprocessing.LabelBinarizer.set_inverse_transform_request"]], "set_output() (sklearn.preprocessing.labelbinarizer method)": [[866, "sklearn.preprocessing.LabelBinarizer.set_output"]], "set_params() (sklearn.preprocessing.labelbinarizer method)": [[866, "sklearn.preprocessing.LabelBinarizer.set_params"]], "transform() (sklearn.preprocessing.labelbinarizer method)": [[866, "sklearn.preprocessing.LabelBinarizer.transform"]], "labelencoder (class in sklearn.preprocessing)": [[867, "sklearn.preprocessing.LabelEncoder"]], "fit() (sklearn.preprocessing.labelencoder method)": [[867, "sklearn.preprocessing.LabelEncoder.fit"]], "fit_transform() (sklearn.preprocessing.labelencoder method)": [[867, "sklearn.preprocessing.LabelEncoder.fit_transform"]], "get_metadata_routing() (sklearn.preprocessing.labelencoder method)": [[867, "sklearn.preprocessing.LabelEncoder.get_metadata_routing"]], "get_params() (sklearn.preprocessing.labelencoder method)": [[867, "sklearn.preprocessing.LabelEncoder.get_params"]], "inverse_transform() (sklearn.preprocessing.labelencoder method)": [[867, "sklearn.preprocessing.LabelEncoder.inverse_transform"]], "set_output() (sklearn.preprocessing.labelencoder method)": [[867, "sklearn.preprocessing.LabelEncoder.set_output"]], "set_params() (sklearn.preprocessing.labelencoder method)": [[867, "sklearn.preprocessing.LabelEncoder.set_params"]], "transform() (sklearn.preprocessing.labelencoder method)": [[867, "sklearn.preprocessing.LabelEncoder.transform"]], "maxabsscaler (class in sklearn.preprocessing)": [[868, "sklearn.preprocessing.MaxAbsScaler"]], "fit() (sklearn.preprocessing.maxabsscaler method)": [[868, "sklearn.preprocessing.MaxAbsScaler.fit"]], "fit_transform() (sklearn.preprocessing.maxabsscaler method)": [[868, "sklearn.preprocessing.MaxAbsScaler.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.maxabsscaler method)": [[868, "sklearn.preprocessing.MaxAbsScaler.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.maxabsscaler method)": [[868, "sklearn.preprocessing.MaxAbsScaler.get_metadata_routing"]], "get_params() (sklearn.preprocessing.maxabsscaler method)": [[868, "sklearn.preprocessing.MaxAbsScaler.get_params"]], "inverse_transform() (sklearn.preprocessing.maxabsscaler method)": [[868, "sklearn.preprocessing.MaxAbsScaler.inverse_transform"]], "partial_fit() (sklearn.preprocessing.maxabsscaler method)": [[868, "sklearn.preprocessing.MaxAbsScaler.partial_fit"]], "set_output() (sklearn.preprocessing.maxabsscaler method)": [[868, "sklearn.preprocessing.MaxAbsScaler.set_output"]], "set_params() (sklearn.preprocessing.maxabsscaler method)": [[868, "sklearn.preprocessing.MaxAbsScaler.set_params"]], "transform() (sklearn.preprocessing.maxabsscaler method)": [[868, "sklearn.preprocessing.MaxAbsScaler.transform"]], "minmaxscaler (class in sklearn.preprocessing)": [[869, "sklearn.preprocessing.MinMaxScaler"]], "fit() (sklearn.preprocessing.minmaxscaler method)": [[869, "sklearn.preprocessing.MinMaxScaler.fit"]], "fit_transform() (sklearn.preprocessing.minmaxscaler method)": [[869, "sklearn.preprocessing.MinMaxScaler.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.minmaxscaler method)": [[869, "sklearn.preprocessing.MinMaxScaler.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.minmaxscaler method)": [[869, "sklearn.preprocessing.MinMaxScaler.get_metadata_routing"]], "get_params() (sklearn.preprocessing.minmaxscaler method)": [[869, "sklearn.preprocessing.MinMaxScaler.get_params"]], "inverse_transform() (sklearn.preprocessing.minmaxscaler method)": [[869, "sklearn.preprocessing.MinMaxScaler.inverse_transform"]], "partial_fit() (sklearn.preprocessing.minmaxscaler method)": [[869, "sklearn.preprocessing.MinMaxScaler.partial_fit"]], "set_output() (sklearn.preprocessing.minmaxscaler method)": [[869, "sklearn.preprocessing.MinMaxScaler.set_output"]], "set_params() (sklearn.preprocessing.minmaxscaler method)": [[869, "sklearn.preprocessing.MinMaxScaler.set_params"]], "transform() (sklearn.preprocessing.minmaxscaler method)": [[869, "sklearn.preprocessing.MinMaxScaler.transform"]], "multilabelbinarizer (class in sklearn.preprocessing)": [[870, "sklearn.preprocessing.MultiLabelBinarizer"]], "fit() (sklearn.preprocessing.multilabelbinarizer method)": [[870, "sklearn.preprocessing.MultiLabelBinarizer.fit"]], "fit_transform() (sklearn.preprocessing.multilabelbinarizer method)": [[870, "sklearn.preprocessing.MultiLabelBinarizer.fit_transform"]], "get_metadata_routing() (sklearn.preprocessing.multilabelbinarizer method)": [[870, "sklearn.preprocessing.MultiLabelBinarizer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.multilabelbinarizer method)": [[870, "sklearn.preprocessing.MultiLabelBinarizer.get_params"]], "inverse_transform() (sklearn.preprocessing.multilabelbinarizer method)": [[870, "sklearn.preprocessing.MultiLabelBinarizer.inverse_transform"]], "set_output() (sklearn.preprocessing.multilabelbinarizer method)": [[870, "sklearn.preprocessing.MultiLabelBinarizer.set_output"]], "set_params() (sklearn.preprocessing.multilabelbinarizer method)": [[870, "sklearn.preprocessing.MultiLabelBinarizer.set_params"]], "transform() (sklearn.preprocessing.multilabelbinarizer method)": [[870, "sklearn.preprocessing.MultiLabelBinarizer.transform"]], "normalizer (class in sklearn.preprocessing)": [[871, "sklearn.preprocessing.Normalizer"]], "fit() (sklearn.preprocessing.normalizer method)": [[871, "sklearn.preprocessing.Normalizer.fit"]], "fit_transform() (sklearn.preprocessing.normalizer method)": [[871, "sklearn.preprocessing.Normalizer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.normalizer method)": [[871, "sklearn.preprocessing.Normalizer.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.normalizer method)": [[871, "sklearn.preprocessing.Normalizer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.normalizer method)": [[871, "sklearn.preprocessing.Normalizer.get_params"]], "set_output() (sklearn.preprocessing.normalizer method)": [[871, "sklearn.preprocessing.Normalizer.set_output"]], "set_params() (sklearn.preprocessing.normalizer method)": [[871, "sklearn.preprocessing.Normalizer.set_params"]], "set_transform_request() (sklearn.preprocessing.normalizer method)": [[871, "sklearn.preprocessing.Normalizer.set_transform_request"]], "transform() (sklearn.preprocessing.normalizer method)": [[871, "sklearn.preprocessing.Normalizer.transform"]], "onehotencoder (class in sklearn.preprocessing)": [[872, "sklearn.preprocessing.OneHotEncoder"]], "fit() (sklearn.preprocessing.onehotencoder method)": [[872, "sklearn.preprocessing.OneHotEncoder.fit"]], "fit_transform() (sklearn.preprocessing.onehotencoder method)": [[872, "sklearn.preprocessing.OneHotEncoder.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.onehotencoder method)": [[872, "sklearn.preprocessing.OneHotEncoder.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.onehotencoder method)": [[872, "sklearn.preprocessing.OneHotEncoder.get_metadata_routing"]], "get_params() (sklearn.preprocessing.onehotencoder method)": [[872, "sklearn.preprocessing.OneHotEncoder.get_params"]], "infrequent_categories_ (sklearn.preprocessing.onehotencoder property)": [[872, "sklearn.preprocessing.OneHotEncoder.infrequent_categories_"]], "inverse_transform() (sklearn.preprocessing.onehotencoder method)": [[872, "sklearn.preprocessing.OneHotEncoder.inverse_transform"]], "set_output() (sklearn.preprocessing.onehotencoder method)": [[872, "sklearn.preprocessing.OneHotEncoder.set_output"]], "set_params() (sklearn.preprocessing.onehotencoder method)": [[872, "sklearn.preprocessing.OneHotEncoder.set_params"]], "transform() (sklearn.preprocessing.onehotencoder method)": [[872, "sklearn.preprocessing.OneHotEncoder.transform"]], "ordinalencoder (class in sklearn.preprocessing)": [[873, "sklearn.preprocessing.OrdinalEncoder"]], "fit() (sklearn.preprocessing.ordinalencoder method)": [[873, "sklearn.preprocessing.OrdinalEncoder.fit"]], "fit_transform() (sklearn.preprocessing.ordinalencoder method)": [[873, "sklearn.preprocessing.OrdinalEncoder.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.ordinalencoder method)": [[873, "sklearn.preprocessing.OrdinalEncoder.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.ordinalencoder method)": [[873, "sklearn.preprocessing.OrdinalEncoder.get_metadata_routing"]], "get_params() (sklearn.preprocessing.ordinalencoder method)": [[873, "sklearn.preprocessing.OrdinalEncoder.get_params"]], "infrequent_categories_ (sklearn.preprocessing.ordinalencoder property)": [[873, "sklearn.preprocessing.OrdinalEncoder.infrequent_categories_"]], "inverse_transform() (sklearn.preprocessing.ordinalencoder method)": [[873, "sklearn.preprocessing.OrdinalEncoder.inverse_transform"]], "set_output() (sklearn.preprocessing.ordinalencoder method)": [[873, "sklearn.preprocessing.OrdinalEncoder.set_output"]], "set_params() (sklearn.preprocessing.ordinalencoder method)": [[873, "sklearn.preprocessing.OrdinalEncoder.set_params"]], "transform() (sklearn.preprocessing.ordinalencoder method)": [[873, "sklearn.preprocessing.OrdinalEncoder.transform"]], "polynomialfeatures (class in sklearn.preprocessing)": [[874, "sklearn.preprocessing.PolynomialFeatures"]], "fit() (sklearn.preprocessing.polynomialfeatures method)": [[874, "sklearn.preprocessing.PolynomialFeatures.fit"]], "fit_transform() (sklearn.preprocessing.polynomialfeatures method)": [[874, "sklearn.preprocessing.PolynomialFeatures.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.polynomialfeatures method)": [[874, "sklearn.preprocessing.PolynomialFeatures.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.polynomialfeatures method)": [[874, "sklearn.preprocessing.PolynomialFeatures.get_metadata_routing"]], "get_params() (sklearn.preprocessing.polynomialfeatures method)": [[874, "sklearn.preprocessing.PolynomialFeatures.get_params"]], "powers_ (sklearn.preprocessing.polynomialfeatures property)": [[874, "sklearn.preprocessing.PolynomialFeatures.powers_"]], "set_output() (sklearn.preprocessing.polynomialfeatures method)": [[874, "sklearn.preprocessing.PolynomialFeatures.set_output"]], "set_params() (sklearn.preprocessing.polynomialfeatures method)": [[874, "sklearn.preprocessing.PolynomialFeatures.set_params"]], "transform() (sklearn.preprocessing.polynomialfeatures method)": [[874, "sklearn.preprocessing.PolynomialFeatures.transform"]], "powertransformer (class in sklearn.preprocessing)": [[875, "sklearn.preprocessing.PowerTransformer"]], "fit() (sklearn.preprocessing.powertransformer method)": [[875, "sklearn.preprocessing.PowerTransformer.fit"]], "fit_transform() (sklearn.preprocessing.powertransformer method)": [[875, "sklearn.preprocessing.PowerTransformer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.powertransformer method)": [[875, "sklearn.preprocessing.PowerTransformer.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.powertransformer method)": [[875, "sklearn.preprocessing.PowerTransformer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.powertransformer method)": [[875, "sklearn.preprocessing.PowerTransformer.get_params"]], "inverse_transform() (sklearn.preprocessing.powertransformer method)": [[875, "sklearn.preprocessing.PowerTransformer.inverse_transform"]], "set_output() (sklearn.preprocessing.powertransformer method)": [[875, "sklearn.preprocessing.PowerTransformer.set_output"]], "set_params() (sklearn.preprocessing.powertransformer method)": [[875, "sklearn.preprocessing.PowerTransformer.set_params"]], "transform() (sklearn.preprocessing.powertransformer method)": [[875, "sklearn.preprocessing.PowerTransformer.transform"]], "quantiletransformer (class in sklearn.preprocessing)": [[876, "sklearn.preprocessing.QuantileTransformer"]], "fit() (sklearn.preprocessing.quantiletransformer method)": [[876, "sklearn.preprocessing.QuantileTransformer.fit"]], "fit_transform() (sklearn.preprocessing.quantiletransformer method)": [[876, "sklearn.preprocessing.QuantileTransformer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.quantiletransformer method)": [[876, "sklearn.preprocessing.QuantileTransformer.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.quantiletransformer method)": [[876, "sklearn.preprocessing.QuantileTransformer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.quantiletransformer method)": [[876, "sklearn.preprocessing.QuantileTransformer.get_params"]], "inverse_transform() (sklearn.preprocessing.quantiletransformer method)": [[876, "sklearn.preprocessing.QuantileTransformer.inverse_transform"]], "set_output() (sklearn.preprocessing.quantiletransformer method)": [[876, "sklearn.preprocessing.QuantileTransformer.set_output"]], "set_params() (sklearn.preprocessing.quantiletransformer method)": [[876, "sklearn.preprocessing.QuantileTransformer.set_params"]], "transform() (sklearn.preprocessing.quantiletransformer method)": [[876, "sklearn.preprocessing.QuantileTransformer.transform"]], "robustscaler (class in sklearn.preprocessing)": [[877, "sklearn.preprocessing.RobustScaler"]], "fit() (sklearn.preprocessing.robustscaler method)": [[877, "sklearn.preprocessing.RobustScaler.fit"]], "fit_transform() (sklearn.preprocessing.robustscaler method)": [[877, "sklearn.preprocessing.RobustScaler.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.robustscaler method)": [[877, "sklearn.preprocessing.RobustScaler.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.robustscaler method)": [[877, "sklearn.preprocessing.RobustScaler.get_metadata_routing"]], "get_params() (sklearn.preprocessing.robustscaler method)": [[877, "sklearn.preprocessing.RobustScaler.get_params"]], "inverse_transform() (sklearn.preprocessing.robustscaler method)": [[877, "sklearn.preprocessing.RobustScaler.inverse_transform"]], "set_output() (sklearn.preprocessing.robustscaler method)": [[877, "sklearn.preprocessing.RobustScaler.set_output"]], "set_params() (sklearn.preprocessing.robustscaler method)": [[877, "sklearn.preprocessing.RobustScaler.set_params"]], "transform() (sklearn.preprocessing.robustscaler method)": [[877, "sklearn.preprocessing.RobustScaler.transform"]], "splinetransformer (class in sklearn.preprocessing)": [[878, "sklearn.preprocessing.SplineTransformer"]], "fit() (sklearn.preprocessing.splinetransformer method)": [[878, "sklearn.preprocessing.SplineTransformer.fit"]], "fit_transform() (sklearn.preprocessing.splinetransformer method)": [[878, "sklearn.preprocessing.SplineTransformer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.splinetransformer method)": [[878, "sklearn.preprocessing.SplineTransformer.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.splinetransformer method)": [[878, "sklearn.preprocessing.SplineTransformer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.splinetransformer method)": [[878, "sklearn.preprocessing.SplineTransformer.get_params"]], "set_fit_request() (sklearn.preprocessing.splinetransformer method)": [[878, "sklearn.preprocessing.SplineTransformer.set_fit_request"]], "set_output() (sklearn.preprocessing.splinetransformer method)": [[878, "sklearn.preprocessing.SplineTransformer.set_output"]], "set_params() (sklearn.preprocessing.splinetransformer method)": [[878, "sklearn.preprocessing.SplineTransformer.set_params"]], "transform() (sklearn.preprocessing.splinetransformer method)": [[878, "sklearn.preprocessing.SplineTransformer.transform"]], "standardscaler (class in sklearn.preprocessing)": [[879, "sklearn.preprocessing.StandardScaler"]], "fit() (sklearn.preprocessing.standardscaler method)": [[879, "sklearn.preprocessing.StandardScaler.fit"]], "fit_transform() (sklearn.preprocessing.standardscaler method)": [[879, "sklearn.preprocessing.StandardScaler.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.standardscaler method)": [[879, "sklearn.preprocessing.StandardScaler.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.standardscaler method)": [[879, "sklearn.preprocessing.StandardScaler.get_metadata_routing"]], "get_params() (sklearn.preprocessing.standardscaler method)": [[879, "sklearn.preprocessing.StandardScaler.get_params"]], "inverse_transform() (sklearn.preprocessing.standardscaler method)": [[879, "sklearn.preprocessing.StandardScaler.inverse_transform"]], "partial_fit() (sklearn.preprocessing.standardscaler method)": [[879, "sklearn.preprocessing.StandardScaler.partial_fit"]], "set_fit_request() (sklearn.preprocessing.standardscaler method)": [[879, "sklearn.preprocessing.StandardScaler.set_fit_request"]], "set_inverse_transform_request() (sklearn.preprocessing.standardscaler method)": [[879, "sklearn.preprocessing.StandardScaler.set_inverse_transform_request"]], "set_output() (sklearn.preprocessing.standardscaler method)": [[879, "sklearn.preprocessing.StandardScaler.set_output"]], "set_params() (sklearn.preprocessing.standardscaler method)": [[879, "sklearn.preprocessing.StandardScaler.set_params"]], "set_partial_fit_request() (sklearn.preprocessing.standardscaler method)": [[879, "sklearn.preprocessing.StandardScaler.set_partial_fit_request"]], "set_transform_request() (sklearn.preprocessing.standardscaler method)": [[879, "sklearn.preprocessing.StandardScaler.set_transform_request"]], "transform() (sklearn.preprocessing.standardscaler method)": [[879, "sklearn.preprocessing.StandardScaler.transform"]], "targetencoder (class in sklearn.preprocessing)": [[880, "sklearn.preprocessing.TargetEncoder"]], "fit() (sklearn.preprocessing.targetencoder method)": [[880, "sklearn.preprocessing.TargetEncoder.fit"]], "fit_transform() (sklearn.preprocessing.targetencoder method)": [[880, "sklearn.preprocessing.TargetEncoder.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.targetencoder method)": [[880, "sklearn.preprocessing.TargetEncoder.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.targetencoder method)": [[880, "sklearn.preprocessing.TargetEncoder.get_metadata_routing"]], "get_params() (sklearn.preprocessing.targetencoder method)": [[880, "sklearn.preprocessing.TargetEncoder.get_params"]], "infrequent_categories_ (sklearn.preprocessing.targetencoder property)": [[880, "sklearn.preprocessing.TargetEncoder.infrequent_categories_"]], "set_output() (sklearn.preprocessing.targetencoder method)": [[880, "sklearn.preprocessing.TargetEncoder.set_output"]], "set_params() (sklearn.preprocessing.targetencoder method)": [[880, "sklearn.preprocessing.TargetEncoder.set_params"]], "transform() (sklearn.preprocessing.targetencoder method)": [[880, "sklearn.preprocessing.TargetEncoder.transform"]], "add_dummy_feature() (in module sklearn.preprocessing)": [[881, "sklearn.preprocessing.add_dummy_feature"]], "binarize() (in module sklearn.preprocessing)": [[882, "sklearn.preprocessing.binarize"]], "label_binarize() (in module sklearn.preprocessing)": [[883, "sklearn.preprocessing.label_binarize"]], "maxabs_scale() (in module sklearn.preprocessing)": [[884, "sklearn.preprocessing.maxabs_scale"]], "minmax_scale() (in module sklearn.preprocessing)": [[885, "sklearn.preprocessing.minmax_scale"]], "normalize() (in module sklearn.preprocessing)": [[886, "sklearn.preprocessing.normalize"]], "power_transform() (in module sklearn.preprocessing)": [[887, "sklearn.preprocessing.power_transform"]], "quantile_transform() (in module sklearn.preprocessing)": [[888, "sklearn.preprocessing.quantile_transform"]], "robust_scale() (in module sklearn.preprocessing)": [[889, "sklearn.preprocessing.robust_scale"]], "scale() (in module sklearn.preprocessing)": [[890, "sklearn.preprocessing.scale"]], "gaussianrandomprojection (class in sklearn.random_projection)": [[891, "sklearn.random_projection.GaussianRandomProjection"]], "fit() (sklearn.random_projection.gaussianrandomprojection method)": [[891, "sklearn.random_projection.GaussianRandomProjection.fit"]], "fit_transform() (sklearn.random_projection.gaussianrandomprojection method)": [[891, "sklearn.random_projection.GaussianRandomProjection.fit_transform"]], "get_feature_names_out() (sklearn.random_projection.gaussianrandomprojection method)": [[891, "sklearn.random_projection.GaussianRandomProjection.get_feature_names_out"]], "get_metadata_routing() (sklearn.random_projection.gaussianrandomprojection method)": [[891, "sklearn.random_projection.GaussianRandomProjection.get_metadata_routing"]], "get_params() (sklearn.random_projection.gaussianrandomprojection method)": [[891, "sklearn.random_projection.GaussianRandomProjection.get_params"]], "inverse_transform() (sklearn.random_projection.gaussianrandomprojection method)": [[891, "sklearn.random_projection.GaussianRandomProjection.inverse_transform"]], "set_output() (sklearn.random_projection.gaussianrandomprojection method)": [[891, "sklearn.random_projection.GaussianRandomProjection.set_output"]], "set_params() (sklearn.random_projection.gaussianrandomprojection method)": [[891, "sklearn.random_projection.GaussianRandomProjection.set_params"]], "transform() (sklearn.random_projection.gaussianrandomprojection method)": [[891, "sklearn.random_projection.GaussianRandomProjection.transform"]], "sparserandomprojection (class in sklearn.random_projection)": [[892, "sklearn.random_projection.SparseRandomProjection"]], "fit() (sklearn.random_projection.sparserandomprojection method)": [[892, "sklearn.random_projection.SparseRandomProjection.fit"]], "fit_transform() (sklearn.random_projection.sparserandomprojection method)": [[892, "sklearn.random_projection.SparseRandomProjection.fit_transform"]], "get_feature_names_out() (sklearn.random_projection.sparserandomprojection method)": [[892, "sklearn.random_projection.SparseRandomProjection.get_feature_names_out"]], "get_metadata_routing() (sklearn.random_projection.sparserandomprojection method)": [[892, "sklearn.random_projection.SparseRandomProjection.get_metadata_routing"]], "get_params() (sklearn.random_projection.sparserandomprojection method)": [[892, "sklearn.random_projection.SparseRandomProjection.get_params"]], "inverse_transform() (sklearn.random_projection.sparserandomprojection method)": [[892, "sklearn.random_projection.SparseRandomProjection.inverse_transform"]], "set_output() (sklearn.random_projection.sparserandomprojection method)": [[892, "sklearn.random_projection.SparseRandomProjection.set_output"]], "set_params() (sklearn.random_projection.sparserandomprojection method)": [[892, "sklearn.random_projection.SparseRandomProjection.set_params"]], "transform() (sklearn.random_projection.sparserandomprojection method)": [[892, "sklearn.random_projection.SparseRandomProjection.transform"]], "johnson_lindenstrauss_min_dim() (in module sklearn.random_projection)": [[893, "sklearn.random_projection.johnson_lindenstrauss_min_dim"]], "labelpropagation (class in sklearn.semi_supervised)": [[894, "sklearn.semi_supervised.LabelPropagation"]], "fit() (sklearn.semi_supervised.labelpropagation method)": [[894, "sklearn.semi_supervised.LabelPropagation.fit"]], "get_metadata_routing() (sklearn.semi_supervised.labelpropagation method)": [[894, "sklearn.semi_supervised.LabelPropagation.get_metadata_routing"]], "get_params() (sklearn.semi_supervised.labelpropagation method)": [[894, "sklearn.semi_supervised.LabelPropagation.get_params"]], "predict() (sklearn.semi_supervised.labelpropagation method)": [[894, "sklearn.semi_supervised.LabelPropagation.predict"]], "predict_proba() (sklearn.semi_supervised.labelpropagation method)": [[894, "sklearn.semi_supervised.LabelPropagation.predict_proba"]], "score() (sklearn.semi_supervised.labelpropagation method)": [[894, "sklearn.semi_supervised.LabelPropagation.score"]], "set_params() (sklearn.semi_supervised.labelpropagation method)": [[894, "sklearn.semi_supervised.LabelPropagation.set_params"]], "set_score_request() (sklearn.semi_supervised.labelpropagation method)": [[894, "sklearn.semi_supervised.LabelPropagation.set_score_request"]], "labelspreading (class in sklearn.semi_supervised)": [[895, "sklearn.semi_supervised.LabelSpreading"]], "fit() (sklearn.semi_supervised.labelspreading method)": [[895, "sklearn.semi_supervised.LabelSpreading.fit"]], "get_metadata_routing() (sklearn.semi_supervised.labelspreading method)": [[895, "sklearn.semi_supervised.LabelSpreading.get_metadata_routing"]], "get_params() (sklearn.semi_supervised.labelspreading method)": [[895, "sklearn.semi_supervised.LabelSpreading.get_params"]], "predict() (sklearn.semi_supervised.labelspreading method)": [[895, "sklearn.semi_supervised.LabelSpreading.predict"]], "predict_proba() (sklearn.semi_supervised.labelspreading method)": [[895, "sklearn.semi_supervised.LabelSpreading.predict_proba"]], "score() (sklearn.semi_supervised.labelspreading method)": [[895, "sklearn.semi_supervised.LabelSpreading.score"]], "set_params() (sklearn.semi_supervised.labelspreading method)": [[895, "sklearn.semi_supervised.LabelSpreading.set_params"]], "set_score_request() (sklearn.semi_supervised.labelspreading method)": [[895, "sklearn.semi_supervised.LabelSpreading.set_score_request"]], "selftrainingclassifier (class in sklearn.semi_supervised)": [[896, "sklearn.semi_supervised.SelfTrainingClassifier"]], "decision_function() (sklearn.semi_supervised.selftrainingclassifier method)": [[896, "sklearn.semi_supervised.SelfTrainingClassifier.decision_function"]], "fit() (sklearn.semi_supervised.selftrainingclassifier method)": [[896, "sklearn.semi_supervised.SelfTrainingClassifier.fit"]], "get_metadata_routing() (sklearn.semi_supervised.selftrainingclassifier method)": [[896, "sklearn.semi_supervised.SelfTrainingClassifier.get_metadata_routing"]], "get_params() (sklearn.semi_supervised.selftrainingclassifier method)": [[896, "sklearn.semi_supervised.SelfTrainingClassifier.get_params"]], "predict() (sklearn.semi_supervised.selftrainingclassifier method)": [[896, "sklearn.semi_supervised.SelfTrainingClassifier.predict"]], "predict_log_proba() (sklearn.semi_supervised.selftrainingclassifier method)": [[896, "sklearn.semi_supervised.SelfTrainingClassifier.predict_log_proba"]], "predict_proba() (sklearn.semi_supervised.selftrainingclassifier method)": [[896, "sklearn.semi_supervised.SelfTrainingClassifier.predict_proba"]], "score() (sklearn.semi_supervised.selftrainingclassifier method)": [[896, "sklearn.semi_supervised.SelfTrainingClassifier.score"]], "set_params() (sklearn.semi_supervised.selftrainingclassifier method)": [[896, "sklearn.semi_supervised.SelfTrainingClassifier.set_params"]], "set_config() (in module sklearn)": [[897, "sklearn.set_config"]], "show_versions() (in module sklearn)": [[898, "sklearn.show_versions"]], "linearsvc (class in sklearn.svm)": [[899, "sklearn.svm.LinearSVC"]], "decision_function() (sklearn.svm.linearsvc method)": [[899, "sklearn.svm.LinearSVC.decision_function"]], "densify() (sklearn.svm.linearsvc method)": [[899, "sklearn.svm.LinearSVC.densify"]], "fit() (sklearn.svm.linearsvc method)": [[899, "sklearn.svm.LinearSVC.fit"]], "get_metadata_routing() (sklearn.svm.linearsvc method)": [[899, "sklearn.svm.LinearSVC.get_metadata_routing"]], "get_params() (sklearn.svm.linearsvc method)": [[899, "sklearn.svm.LinearSVC.get_params"]], "predict() (sklearn.svm.linearsvc method)": [[899, "sklearn.svm.LinearSVC.predict"]], "score() (sklearn.svm.linearsvc method)": [[899, "sklearn.svm.LinearSVC.score"]], "set_fit_request() (sklearn.svm.linearsvc method)": [[899, "sklearn.svm.LinearSVC.set_fit_request"]], "set_params() (sklearn.svm.linearsvc method)": [[899, "sklearn.svm.LinearSVC.set_params"]], "set_score_request() (sklearn.svm.linearsvc method)": [[899, "sklearn.svm.LinearSVC.set_score_request"]], "sparsify() (sklearn.svm.linearsvc method)": [[899, "sklearn.svm.LinearSVC.sparsify"]], "linearsvr (class in sklearn.svm)": [[900, "sklearn.svm.LinearSVR"]], "fit() (sklearn.svm.linearsvr method)": [[900, "sklearn.svm.LinearSVR.fit"]], "get_metadata_routing() (sklearn.svm.linearsvr method)": [[900, "sklearn.svm.LinearSVR.get_metadata_routing"]], "get_params() (sklearn.svm.linearsvr method)": [[900, "sklearn.svm.LinearSVR.get_params"]], "predict() (sklearn.svm.linearsvr method)": [[900, "sklearn.svm.LinearSVR.predict"]], "score() (sklearn.svm.linearsvr method)": [[900, "sklearn.svm.LinearSVR.score"]], "set_fit_request() (sklearn.svm.linearsvr method)": [[900, "sklearn.svm.LinearSVR.set_fit_request"]], "set_params() (sklearn.svm.linearsvr method)": [[900, "sklearn.svm.LinearSVR.set_params"]], "set_score_request() (sklearn.svm.linearsvr method)": [[900, "sklearn.svm.LinearSVR.set_score_request"]], "nusvc (class in sklearn.svm)": [[901, "sklearn.svm.NuSVC"]], "coef_ (sklearn.svm.nusvc property)": [[901, "sklearn.svm.NuSVC.coef_"]], "decision_function() (sklearn.svm.nusvc method)": [[901, "sklearn.svm.NuSVC.decision_function"]], "fit() (sklearn.svm.nusvc method)": [[901, "sklearn.svm.NuSVC.fit"]], "get_metadata_routing() (sklearn.svm.nusvc method)": [[901, "sklearn.svm.NuSVC.get_metadata_routing"]], "get_params() (sklearn.svm.nusvc method)": [[901, "sklearn.svm.NuSVC.get_params"]], "n_support_ (sklearn.svm.nusvc property)": [[901, "sklearn.svm.NuSVC.n_support_"]], "predict() (sklearn.svm.nusvc method)": [[901, "sklearn.svm.NuSVC.predict"]], "predict_log_proba() (sklearn.svm.nusvc method)": [[901, "sklearn.svm.NuSVC.predict_log_proba"]], "predict_proba() (sklearn.svm.nusvc method)": [[901, "sklearn.svm.NuSVC.predict_proba"]], "proba_ (sklearn.svm.nusvc property)": [[901, "sklearn.svm.NuSVC.probA_"]], "probb_ (sklearn.svm.nusvc property)": [[901, "sklearn.svm.NuSVC.probB_"]], "score() (sklearn.svm.nusvc method)": [[901, "sklearn.svm.NuSVC.score"]], "set_fit_request() (sklearn.svm.nusvc method)": [[901, "sklearn.svm.NuSVC.set_fit_request"]], "set_params() (sklearn.svm.nusvc method)": [[901, "sklearn.svm.NuSVC.set_params"]], "set_score_request() (sklearn.svm.nusvc method)": [[901, "sklearn.svm.NuSVC.set_score_request"]], "nusvr (class in sklearn.svm)": [[902, "sklearn.svm.NuSVR"]], "coef_ (sklearn.svm.nusvr property)": [[902, "sklearn.svm.NuSVR.coef_"]], "fit() (sklearn.svm.nusvr method)": [[902, "sklearn.svm.NuSVR.fit"]], "get_metadata_routing() (sklearn.svm.nusvr method)": [[902, "sklearn.svm.NuSVR.get_metadata_routing"]], "get_params() (sklearn.svm.nusvr method)": [[902, "sklearn.svm.NuSVR.get_params"]], "n_support_ (sklearn.svm.nusvr property)": [[902, "sklearn.svm.NuSVR.n_support_"]], "predict() (sklearn.svm.nusvr method)": [[902, "sklearn.svm.NuSVR.predict"]], "score() (sklearn.svm.nusvr method)": [[902, "sklearn.svm.NuSVR.score"]], "set_fit_request() (sklearn.svm.nusvr method)": [[902, "sklearn.svm.NuSVR.set_fit_request"]], "set_params() (sklearn.svm.nusvr method)": [[902, "sklearn.svm.NuSVR.set_params"]], "set_score_request() (sklearn.svm.nusvr method)": [[902, "sklearn.svm.NuSVR.set_score_request"]], "oneclasssvm (class in sklearn.svm)": [[903, "sklearn.svm.OneClassSVM"]], "coef_ (sklearn.svm.oneclasssvm property)": [[903, "sklearn.svm.OneClassSVM.coef_"]], "decision_function() (sklearn.svm.oneclasssvm method)": [[903, "sklearn.svm.OneClassSVM.decision_function"]], "fit() (sklearn.svm.oneclasssvm method)": [[903, "sklearn.svm.OneClassSVM.fit"]], "fit_predict() (sklearn.svm.oneclasssvm method)": [[903, "sklearn.svm.OneClassSVM.fit_predict"]], "get_metadata_routing() (sklearn.svm.oneclasssvm method)": [[903, "sklearn.svm.OneClassSVM.get_metadata_routing"]], "get_params() (sklearn.svm.oneclasssvm method)": [[903, "sklearn.svm.OneClassSVM.get_params"]], "n_support_ (sklearn.svm.oneclasssvm property)": [[903, "sklearn.svm.OneClassSVM.n_support_"]], "predict() (sklearn.svm.oneclasssvm method)": [[903, "sklearn.svm.OneClassSVM.predict"]], "score_samples() (sklearn.svm.oneclasssvm method)": [[903, "sklearn.svm.OneClassSVM.score_samples"]], "set_fit_request() (sklearn.svm.oneclasssvm method)": [[903, "sklearn.svm.OneClassSVM.set_fit_request"]], "set_params() (sklearn.svm.oneclasssvm method)": [[903, "sklearn.svm.OneClassSVM.set_params"]], "svc (class in sklearn.svm)": [[904, "sklearn.svm.SVC"]], "coef_ (sklearn.svm.svc property)": [[904, "sklearn.svm.SVC.coef_"]], "decision_function() (sklearn.svm.svc method)": [[904, "sklearn.svm.SVC.decision_function"]], "fit() (sklearn.svm.svc method)": [[904, "sklearn.svm.SVC.fit"]], "get_metadata_routing() (sklearn.svm.svc method)": [[904, "sklearn.svm.SVC.get_metadata_routing"]], "get_params() (sklearn.svm.svc method)": [[904, "sklearn.svm.SVC.get_params"]], "n_support_ (sklearn.svm.svc property)": [[904, "sklearn.svm.SVC.n_support_"]], "predict() (sklearn.svm.svc method)": [[904, "sklearn.svm.SVC.predict"]], "predict_log_proba() (sklearn.svm.svc method)": [[904, "sklearn.svm.SVC.predict_log_proba"]], "predict_proba() (sklearn.svm.svc method)": [[904, "sklearn.svm.SVC.predict_proba"]], "proba_ (sklearn.svm.svc property)": [[904, "sklearn.svm.SVC.probA_"]], "probb_ (sklearn.svm.svc property)": [[904, "sklearn.svm.SVC.probB_"]], "score() (sklearn.svm.svc method)": [[904, "sklearn.svm.SVC.score"]], "set_fit_request() (sklearn.svm.svc method)": [[904, "sklearn.svm.SVC.set_fit_request"]], "set_params() (sklearn.svm.svc method)": [[904, "sklearn.svm.SVC.set_params"]], "set_score_request() (sklearn.svm.svc method)": [[904, "sklearn.svm.SVC.set_score_request"]], "svr (class in sklearn.svm)": [[905, "sklearn.svm.SVR"]], "coef_ (sklearn.svm.svr property)": [[905, "sklearn.svm.SVR.coef_"]], "fit() (sklearn.svm.svr method)": [[905, "sklearn.svm.SVR.fit"]], "get_metadata_routing() (sklearn.svm.svr method)": [[905, "sklearn.svm.SVR.get_metadata_routing"]], "get_params() (sklearn.svm.svr method)": [[905, "sklearn.svm.SVR.get_params"]], "n_support_ (sklearn.svm.svr property)": [[905, "sklearn.svm.SVR.n_support_"]], "predict() (sklearn.svm.svr method)": [[905, "sklearn.svm.SVR.predict"]], "score() (sklearn.svm.svr method)": [[905, "sklearn.svm.SVR.score"]], "set_fit_request() (sklearn.svm.svr method)": [[905, "sklearn.svm.SVR.set_fit_request"]], "set_params() (sklearn.svm.svr method)": [[905, "sklearn.svm.SVR.set_params"]], "set_score_request() (sklearn.svm.svr method)": [[905, "sklearn.svm.SVR.set_score_request"]], "l1_min_c() (in module sklearn.svm)": [[906, "sklearn.svm.l1_min_c"]], "decisiontreeclassifier (class in sklearn.tree)": [[907, "sklearn.tree.DecisionTreeClassifier"]], "apply() (sklearn.tree.decisiontreeclassifier method)": [[907, "sklearn.tree.DecisionTreeClassifier.apply"]], "cost_complexity_pruning_path() (sklearn.tree.decisiontreeclassifier method)": [[907, "sklearn.tree.DecisionTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sklearn.tree.decisiontreeclassifier method)": [[907, "sklearn.tree.DecisionTreeClassifier.decision_path"]], "feature_importances_ (sklearn.tree.decisiontreeclassifier property)": [[907, "sklearn.tree.DecisionTreeClassifier.feature_importances_"]], "fit() (sklearn.tree.decisiontreeclassifier method)": [[907, "sklearn.tree.DecisionTreeClassifier.fit"]], "get_depth() (sklearn.tree.decisiontreeclassifier method)": [[907, "sklearn.tree.DecisionTreeClassifier.get_depth"]], "get_metadata_routing() (sklearn.tree.decisiontreeclassifier method)": [[907, "sklearn.tree.DecisionTreeClassifier.get_metadata_routing"]], "get_n_leaves() (sklearn.tree.decisiontreeclassifier method)": [[907, "sklearn.tree.DecisionTreeClassifier.get_n_leaves"]], "get_params() (sklearn.tree.decisiontreeclassifier method)": [[907, "sklearn.tree.DecisionTreeClassifier.get_params"]], "predict() (sklearn.tree.decisiontreeclassifier method)": [[907, "sklearn.tree.DecisionTreeClassifier.predict"]], "predict_log_proba() (sklearn.tree.decisiontreeclassifier method)": [[907, "sklearn.tree.DecisionTreeClassifier.predict_log_proba"]], "predict_proba() (sklearn.tree.decisiontreeclassifier method)": [[907, "sklearn.tree.DecisionTreeClassifier.predict_proba"]], "score() (sklearn.tree.decisiontreeclassifier method)": [[907, "sklearn.tree.DecisionTreeClassifier.score"]], "set_fit_request() (sklearn.tree.decisiontreeclassifier method)": [[907, "sklearn.tree.DecisionTreeClassifier.set_fit_request"]], "set_params() (sklearn.tree.decisiontreeclassifier method)": [[907, "sklearn.tree.DecisionTreeClassifier.set_params"]], "set_predict_proba_request() (sklearn.tree.decisiontreeclassifier method)": [[907, "sklearn.tree.DecisionTreeClassifier.set_predict_proba_request"]], "set_predict_request() (sklearn.tree.decisiontreeclassifier method)": [[907, "sklearn.tree.DecisionTreeClassifier.set_predict_request"]], "set_score_request() (sklearn.tree.decisiontreeclassifier method)": [[907, "sklearn.tree.DecisionTreeClassifier.set_score_request"]], "decisiontreeregressor (class in sklearn.tree)": [[908, "sklearn.tree.DecisionTreeRegressor"]], "apply() (sklearn.tree.decisiontreeregressor method)": [[908, "sklearn.tree.DecisionTreeRegressor.apply"]], "cost_complexity_pruning_path() (sklearn.tree.decisiontreeregressor method)": [[908, "sklearn.tree.DecisionTreeRegressor.cost_complexity_pruning_path"]], "decision_path() (sklearn.tree.decisiontreeregressor method)": [[908, "sklearn.tree.DecisionTreeRegressor.decision_path"]], "feature_importances_ (sklearn.tree.decisiontreeregressor property)": [[908, "sklearn.tree.DecisionTreeRegressor.feature_importances_"]], "fit() (sklearn.tree.decisiontreeregressor method)": [[908, "sklearn.tree.DecisionTreeRegressor.fit"]], "get_depth() (sklearn.tree.decisiontreeregressor method)": [[908, "sklearn.tree.DecisionTreeRegressor.get_depth"]], "get_metadata_routing() (sklearn.tree.decisiontreeregressor method)": [[908, "sklearn.tree.DecisionTreeRegressor.get_metadata_routing"]], "get_n_leaves() (sklearn.tree.decisiontreeregressor method)": [[908, "sklearn.tree.DecisionTreeRegressor.get_n_leaves"]], "get_params() (sklearn.tree.decisiontreeregressor method)": [[908, "sklearn.tree.DecisionTreeRegressor.get_params"]], "predict() (sklearn.tree.decisiontreeregressor method)": [[908, "sklearn.tree.DecisionTreeRegressor.predict"]], "score() (sklearn.tree.decisiontreeregressor method)": [[908, "sklearn.tree.DecisionTreeRegressor.score"]], "set_fit_request() (sklearn.tree.decisiontreeregressor method)": [[908, "sklearn.tree.DecisionTreeRegressor.set_fit_request"]], "set_params() (sklearn.tree.decisiontreeregressor method)": [[908, "sklearn.tree.DecisionTreeRegressor.set_params"]], "set_predict_request() (sklearn.tree.decisiontreeregressor method)": [[908, "sklearn.tree.DecisionTreeRegressor.set_predict_request"]], "set_score_request() (sklearn.tree.decisiontreeregressor method)": [[908, "sklearn.tree.DecisionTreeRegressor.set_score_request"]], "extratreeclassifier (class in sklearn.tree)": [[909, "sklearn.tree.ExtraTreeClassifier"]], "apply() (sklearn.tree.extratreeclassifier method)": [[909, "sklearn.tree.ExtraTreeClassifier.apply"]], "cost_complexity_pruning_path() (sklearn.tree.extratreeclassifier method)": [[909, "sklearn.tree.ExtraTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sklearn.tree.extratreeclassifier method)": [[909, "sklearn.tree.ExtraTreeClassifier.decision_path"]], "feature_importances_ (sklearn.tree.extratreeclassifier property)": [[909, "sklearn.tree.ExtraTreeClassifier.feature_importances_"]], "fit() (sklearn.tree.extratreeclassifier method)": [[909, "sklearn.tree.ExtraTreeClassifier.fit"]], "get_depth() (sklearn.tree.extratreeclassifier method)": [[909, "sklearn.tree.ExtraTreeClassifier.get_depth"]], "get_metadata_routing() (sklearn.tree.extratreeclassifier method)": [[909, "sklearn.tree.ExtraTreeClassifier.get_metadata_routing"]], "get_n_leaves() (sklearn.tree.extratreeclassifier method)": [[909, "sklearn.tree.ExtraTreeClassifier.get_n_leaves"]], "get_params() (sklearn.tree.extratreeclassifier method)": [[909, "sklearn.tree.ExtraTreeClassifier.get_params"]], "predict() (sklearn.tree.extratreeclassifier method)": [[909, "sklearn.tree.ExtraTreeClassifier.predict"]], "predict_log_proba() (sklearn.tree.extratreeclassifier method)": [[909, "sklearn.tree.ExtraTreeClassifier.predict_log_proba"]], "predict_proba() (sklearn.tree.extratreeclassifier method)": [[909, "sklearn.tree.ExtraTreeClassifier.predict_proba"]], "score() (sklearn.tree.extratreeclassifier method)": [[909, "sklearn.tree.ExtraTreeClassifier.score"]], "set_fit_request() (sklearn.tree.extratreeclassifier method)": [[909, "sklearn.tree.ExtraTreeClassifier.set_fit_request"]], "set_params() (sklearn.tree.extratreeclassifier method)": [[909, "sklearn.tree.ExtraTreeClassifier.set_params"]], "set_predict_proba_request() (sklearn.tree.extratreeclassifier method)": [[909, "sklearn.tree.ExtraTreeClassifier.set_predict_proba_request"]], "set_predict_request() (sklearn.tree.extratreeclassifier method)": [[909, "sklearn.tree.ExtraTreeClassifier.set_predict_request"]], "set_score_request() (sklearn.tree.extratreeclassifier method)": [[909, "sklearn.tree.ExtraTreeClassifier.set_score_request"]], "extratreeregressor (class in sklearn.tree)": [[910, "sklearn.tree.ExtraTreeRegressor"]], "apply() (sklearn.tree.extratreeregressor method)": [[910, "sklearn.tree.ExtraTreeRegressor.apply"]], "cost_complexity_pruning_path() (sklearn.tree.extratreeregressor method)": [[910, "sklearn.tree.ExtraTreeRegressor.cost_complexity_pruning_path"]], "decision_path() (sklearn.tree.extratreeregressor method)": [[910, "sklearn.tree.ExtraTreeRegressor.decision_path"]], "feature_importances_ (sklearn.tree.extratreeregressor property)": [[910, "sklearn.tree.ExtraTreeRegressor.feature_importances_"]], "fit() (sklearn.tree.extratreeregressor method)": [[910, "sklearn.tree.ExtraTreeRegressor.fit"]], "get_depth() (sklearn.tree.extratreeregressor method)": [[910, "sklearn.tree.ExtraTreeRegressor.get_depth"]], "get_metadata_routing() (sklearn.tree.extratreeregressor method)": [[910, "sklearn.tree.ExtraTreeRegressor.get_metadata_routing"]], "get_n_leaves() (sklearn.tree.extratreeregressor method)": [[910, "sklearn.tree.ExtraTreeRegressor.get_n_leaves"]], "get_params() (sklearn.tree.extratreeregressor method)": [[910, "sklearn.tree.ExtraTreeRegressor.get_params"]], "predict() (sklearn.tree.extratreeregressor method)": [[910, "sklearn.tree.ExtraTreeRegressor.predict"]], "score() (sklearn.tree.extratreeregressor method)": [[910, "sklearn.tree.ExtraTreeRegressor.score"]], "set_fit_request() (sklearn.tree.extratreeregressor method)": [[910, "sklearn.tree.ExtraTreeRegressor.set_fit_request"]], "set_params() (sklearn.tree.extratreeregressor method)": [[910, "sklearn.tree.ExtraTreeRegressor.set_params"]], "set_predict_request() (sklearn.tree.extratreeregressor method)": [[910, "sklearn.tree.ExtraTreeRegressor.set_predict_request"]], "set_score_request() (sklearn.tree.extratreeregressor method)": [[910, "sklearn.tree.ExtraTreeRegressor.set_score_request"]], "export_graphviz() (in module sklearn.tree)": [[911, "sklearn.tree.export_graphviz"]], "export_text() (in module sklearn.tree)": [[912, "sklearn.tree.export_text"]], "plot_tree() (in module sklearn.tree)": [[913, "sklearn.tree.plot_tree"]], "bunch (class in sklearn.utils)": [[914, "sklearn.utils.Bunch"]], "clear() (sklearn.utils.bunch method)": [[914, "sklearn.utils.Bunch.clear"]], "copy() (sklearn.utils.bunch method)": [[914, "sklearn.utils.Bunch.copy"]], "fromkeys() (sklearn.utils.bunch method)": [[914, "sklearn.utils.Bunch.fromkeys"]], "get() (sklearn.utils.bunch method)": [[914, "sklearn.utils.Bunch.get"]], "items() (sklearn.utils.bunch method)": [[914, "sklearn.utils.Bunch.items"]], "keys() (sklearn.utils.bunch method)": [[914, "sklearn.utils.Bunch.keys"]], "pop() (sklearn.utils.bunch method)": [[914, "sklearn.utils.Bunch.pop"]], "popitem() (sklearn.utils.bunch method)": [[914, "sklearn.utils.Bunch.popitem"]], "setdefault() (sklearn.utils.bunch method)": [[914, "sklearn.utils.Bunch.setdefault"]], "update() (sklearn.utils.bunch method)": [[914, "sklearn.utils.Bunch.update"]], "values() (sklearn.utils.bunch method)": [[914, "sklearn.utils.Bunch.values"]], "_safe_indexing() (in module sklearn.utils)": [[915, "sklearn.utils._safe_indexing"]], "min_pos() (in module sklearn.utils.arrayfuncs)": [[916, "sklearn.utils.arrayfuncs.min_pos"]], "as_float_array() (in module sklearn.utils)": [[917, "sklearn.utils.as_float_array"]], "assert_all_finite() (in module sklearn.utils)": [[918, "sklearn.utils.assert_all_finite"]], "check_x_y() (in module sklearn.utils)": [[919, "sklearn.utils.check_X_y"]], "check_array() (in module sklearn.utils)": [[920, "sklearn.utils.check_array"]], "check_consistent_length() (in module sklearn.utils)": [[921, "sklearn.utils.check_consistent_length"]], "check_random_state() (in module sklearn.utils)": [[922, "sklearn.utils.check_random_state"]], "check_scalar() (in module sklearn.utils)": [[923, "sklearn.utils.check_scalar"]], "compute_class_weight() (in module sklearn.utils.class_weight)": [[924, "sklearn.utils.class_weight.compute_class_weight"]], "compute_sample_weight() (in module sklearn.utils.class_weight)": [[925, "sklearn.utils.class_weight.compute_sample_weight"]], "deprecated() (in module sklearn.utils)": [[926, "sklearn.utils.deprecated"]], "all_displays() (in module sklearn.utils.discovery)": [[927, "sklearn.utils.discovery.all_displays"]], "all_estimators() (in module sklearn.utils.discovery)": [[928, "sklearn.utils.discovery.all_estimators"]], "all_functions() (in module sklearn.utils.discovery)": [[929, "sklearn.utils.discovery.all_functions"]], "check_estimator() (in module sklearn.utils.estimator_checks)": [[930, "sklearn.utils.estimator_checks.check_estimator"]], "parametrize_with_checks() (in module sklearn.utils.estimator_checks)": [[931, "sklearn.utils.estimator_checks.parametrize_with_checks"]], "estimator_html_repr() (in module sklearn.utils)": [[932, "sklearn.utils.estimator_html_repr"]], "density() (in module sklearn.utils.extmath)": [[933, "sklearn.utils.extmath.density"]], "fast_logdet() (in module sklearn.utils.extmath)": [[934, "sklearn.utils.extmath.fast_logdet"]], "randomized_range_finder() (in module sklearn.utils.extmath)": [[935, "sklearn.utils.extmath.randomized_range_finder"]], "randomized_svd() (in module sklearn.utils.extmath)": [[936, "sklearn.utils.extmath.randomized_svd"]], "safe_sparse_dot() (in module sklearn.utils.extmath)": [[937, "sklearn.utils.extmath.safe_sparse_dot"]], "weighted_mode() (in module sklearn.utils.extmath)": [[938, "sklearn.utils.extmath.weighted_mode"]], "gen_batches() (in module sklearn.utils)": [[939, "sklearn.utils.gen_batches"]], "gen_even_slices() (in module sklearn.utils)": [[940, "sklearn.utils.gen_even_slices"]], "single_source_shortest_path_length() (in module sklearn.utils.graph)": [[941, "sklearn.utils.graph.single_source_shortest_path_length"]], "indexable() (in module sklearn.utils)": [[942, "sklearn.utils.indexable"]], "metadatarequest (class in sklearn.utils.metadata_routing)": [[943, "sklearn.utils.metadata_routing.MetadataRequest"]], "consumes() (sklearn.utils.metadata_routing.metadatarequest method)": [[943, "sklearn.utils.metadata_routing.MetadataRequest.consumes"]], "metadatarouter (class in sklearn.utils.metadata_routing)": [[944, "sklearn.utils.metadata_routing.MetadataRouter"]], "add() (sklearn.utils.metadata_routing.metadatarouter method)": [[944, "sklearn.utils.metadata_routing.MetadataRouter.add"]], "add_self_request() (sklearn.utils.metadata_routing.metadatarouter method)": [[944, "sklearn.utils.metadata_routing.MetadataRouter.add_self_request"]], "consumes() (sklearn.utils.metadata_routing.metadatarouter method)": [[944, "sklearn.utils.metadata_routing.MetadataRouter.consumes"]], "route_params() (sklearn.utils.metadata_routing.metadatarouter method)": [[944, "sklearn.utils.metadata_routing.MetadataRouter.route_params"]], "validate_metadata() (sklearn.utils.metadata_routing.metadatarouter method)": [[944, "sklearn.utils.metadata_routing.MetadataRouter.validate_metadata"]], "methodmapping (class in sklearn.utils.metadata_routing)": [[945, "sklearn.utils.metadata_routing.MethodMapping"]], "add() (sklearn.utils.metadata_routing.methodmapping method)": [[945, "sklearn.utils.metadata_routing.MethodMapping.add"]], "from_str() (sklearn.utils.metadata_routing.methodmapping class method)": [[945, "sklearn.utils.metadata_routing.MethodMapping.from_str"]], "get_routing_for_object() (in module sklearn.utils.metadata_routing)": [[946, "sklearn.utils.metadata_routing.get_routing_for_object"]], "process_routing() (in module sklearn.utils.metadata_routing)": [[947, "sklearn.utils.metadata_routing.process_routing"]], "available_if() (in module sklearn.utils.metaestimators)": [[948, "sklearn.utils.metaestimators.available_if"]], "is_multilabel() (in module sklearn.utils.multiclass)": [[949, "sklearn.utils.multiclass.is_multilabel"]], "type_of_target() (in module sklearn.utils.multiclass)": [[950, "sklearn.utils.multiclass.type_of_target"]], "unique_labels() (in module sklearn.utils.multiclass)": [[951, "sklearn.utils.multiclass.unique_labels"]], "murmurhash3_32() (in module sklearn.utils)": [[952, "sklearn.utils.murmurhash3_32"]], "parallel (class in sklearn.utils.parallel)": [[953, "sklearn.utils.parallel.Parallel"]], "dispatch_next() (sklearn.utils.parallel.parallel method)": [[953, "sklearn.utils.parallel.Parallel.dispatch_next"]], "dispatch_one_batch() (sklearn.utils.parallel.parallel method)": [[953, "sklearn.utils.parallel.Parallel.dispatch_one_batch"]], "format() (sklearn.utils.parallel.parallel method)": [[953, "sklearn.utils.parallel.Parallel.format"]], "print_progress() (sklearn.utils.parallel.parallel method)": [[953, "sklearn.utils.parallel.Parallel.print_progress"]], "delayed() (in module sklearn.utils.parallel)": [[954, "sklearn.utils.parallel.delayed"]], "parallel_backend() (in module sklearn.utils)": [[955, "sklearn.utils.parallel_backend"]], "sample_without_replacement() (in module sklearn.utils.random)": [[956, "sklearn.utils.random.sample_without_replacement"]], "register_parallel_backend() (in module sklearn.utils)": [[957, "sklearn.utils.register_parallel_backend"]], "resample() (in module sklearn.utils)": [[958, "sklearn.utils.resample"]], "safe_mask() (in module sklearn.utils)": [[959, "sklearn.utils.safe_mask"]], "safe_sqr() (in module sklearn.utils)": [[960, "sklearn.utils.safe_sqr"]], "shuffle() (in module sklearn.utils)": [[961, "sklearn.utils.shuffle"]], "incr_mean_variance_axis() (in module sklearn.utils.sparsefuncs)": [[962, "sklearn.utils.sparsefuncs.incr_mean_variance_axis"]], "inplace_column_scale() (in module sklearn.utils.sparsefuncs)": [[963, "sklearn.utils.sparsefuncs.inplace_column_scale"]], "inplace_csr_column_scale() (in module sklearn.utils.sparsefuncs)": [[964, "sklearn.utils.sparsefuncs.inplace_csr_column_scale"]], "inplace_row_scale() (in module sklearn.utils.sparsefuncs)": [[965, "sklearn.utils.sparsefuncs.inplace_row_scale"]], "inplace_swap_column() (in module sklearn.utils.sparsefuncs)": [[966, "sklearn.utils.sparsefuncs.inplace_swap_column"]], "inplace_swap_row() (in module sklearn.utils.sparsefuncs)": [[967, "sklearn.utils.sparsefuncs.inplace_swap_row"]], "mean_variance_axis() (in module sklearn.utils.sparsefuncs)": [[968, "sklearn.utils.sparsefuncs.mean_variance_axis"]], "inplace_csr_row_normalize_l1() (in module sklearn.utils.sparsefuncs_fast)": [[969, "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1"]], "inplace_csr_row_normalize_l2() (in module sklearn.utils.sparsefuncs_fast)": [[970, "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2"]], "check_is_fitted() (in module sklearn.utils.validation)": [[971, "sklearn.utils.validation.check_is_fitted"]], "check_memory() (in module sklearn.utils.validation)": [[972, "sklearn.utils.validation.check_memory"]], "check_symmetric() (in module sklearn.utils.validation)": [[973, "sklearn.utils.validation.check_symmetric"]], "column_or_1d() (in module sklearn.utils.validation)": [[974, "sklearn.utils.validation.column_or_1d"]], "has_fit_parameter() (in module sklearn.utils.validation)": [[975, "sklearn.utils.validation.has_fit_parameter"]]}})